{
    "nicklockwood": "Makes sense - I'll add that.\n. OK, this is fixed in beta 5.\n. can you paste the form properties you are using? I'll try to reproduce it.\n. Fixed in beta 5.\n. Was there a specific feature you'd like to see demoed?\n. The simplest way is:\n\nSet the base class of your custom view controller to be FXFormViewController instead of UIViewController.\n\nIn the storyboard, you should now be able to bind your tableView to the tableView outlet of your custom view controller.\n\nFinally, in the viewDidLoad or awakeFromNib method of your view controller, set self.formController.form = [your form]\n\nYou may need to call [self.tableView reloadData] after setting the form property.\n. Ah yes, sorry I missed this part when I skimmed the code:\n\n```\nif (self.valueTransformer) {\n    return [self.valueTransformer transformedValue:[self.value fieldDescription]];\n}\n```\n. That's exactly what it does. \n. Yeah, I thought it was better to localise the title-cased version because that follows the convention of using the human-readable english text as the key in the strings file.\n. In this case you'd just write \"options\": [NSLocalizedString(\"option1\", nil), NSLocalizedString(\"option2, nil)\"]\n. If that's in a JSON file, I guess you'd probably just make the JSON into a localised resource and have a different JSON for each locale.\n. You could use a value transformer to convert the unlocalized version to the localized one fir display purposes, then the value would be unaffected.\n. Yep, this is planned for the next release.\n. No, but I'll probably put a beta out quite soon.\n. It's probably simplest if I just do this. It won't be too long.\n. OK, this is implemented.\n. A PR would be great, thanks!\n. This is now merged.\n. @Ashton-W that makes sense. I'm considering adding a phone number type, but I think this might be better implemented as part of some kind of generic string formatting system.\n. OK, I think this is addressed by the new phone number field. Let me know if not.\n. Yes, you can do this by subclassing FXFormViewController, then in the viewDidAppear, do this:\n\n```\n- (void)viewDidAppear:(BOOL)animated\n{\n    [super viewDidAppear:animated];\n\n    //get first field\n    id <FXFormFieldCell> cell = (id <FXFormFieldCell>)[self.tableView cellForRowAtIndexPath:[NSIndexPath indexPathForRow:0 inSection:0]];\n\n    //select field (assuming it's a text field\n    if ([cell respondsToSelector:@selector(textField)])\n    {\n        [((FXFormTextFieldCell *)cell).textField becomeFirstResponder];\n    }\n}\n```\n. How very strange. That's exactly the approach I would have recommended, but it seems that for some reason, UITextField is not KVC-compliant for that key. I'll see if I can work out why.\n. I've put in a temporary fix in 1.0.2 that treats UITextInputTraits as a special case. I'll try to come up with something better for 1.1.\n. Thanks for yet another great PR :-)\n\nI've decided that int the interests of avoiding duplication, as much as possible the FXFormFieldType should relate only to the data type, not the way in which it is displayed.\n\nI think that in this case it would be sufficient simply to define the FXFormOptionPickerCell, and then specify that the field should use this cell class using the FXFormFieldCell property.\n\nIf you'd like to make that change, I'll merge this PR. Otherwise, I can make the change myself if you prefer.\n. Oops, sorry. I merged the PRs in the wrong order, and now can't merge this. If you wouldn't mind fixing the conflicts, I'll merge yours next.\n. The problem is that the type of Cell I'm using for buttons is\n\nUITableViewCellStyleValue1,     // Left aligned label on left and right aligned label on right with blue text (Used in Settings)\n\nAs far as I can tell, there's no way to center the text on this type of cell. I'm going to see if I can provide a way to fix this without subclassing FXFormBaseCell, however, if you are willing to subclass FXFormBaseCell you can just do this:\n\n```\n@interface MyFormButtonCell : FXFormBaseCell\n\n@end\n\n@implementation MyFormButtonCell\n\n- (id)init\n{\n    return [self initWithStyle:UITableViewCellStyleDefault reuseIdentifier:nil];\n}\n\n@end \n```\n\nThen if your field description, pass\n\n```\n{\n    FXFormFieldCell: [MyFormButtonCell class]\n    @\"textLabel.textAlignment\": @(NSTextAlignmentCenter)\n}\n```\n\nAnd it should work\n. I've added an FXFormFieldPlaceholder value that can be used in the same way as this.\n\nIf there's anything that FXFormFieldNilOption does that FXFormFieldPlaceholder doesn't, let me know, otherwise I think we can close this.\n. Hmm, ok. I'm not crazy about the idea of having both, but I'll keep thinking about it.\n. It's partly the name and partly the extra complexity. I'm hoping the same requirement can be solved another way, e.g. by using NSNull values or something, but i'm drawing a blank right now.\n. Yes, exactly. The valueTransformer feature added in 1.1 would let you format the NSNull however you want, but it's certainly not as elegant as the solution you've suggested from an end-user implementation point of view, especially if all the other values don't need transforming.\n. I've expanded the capabilities of the FXFormFieldPlaceholder to include the additional behaviour that the FXFormFieldNilOption had. I think this is a reasonable approach. Let me know if this solves your requirement.\n. Yeah, I know exactly what you mean, and I had the same thought.\n\nBut the problem with having two different properties is that they also overlap; for example, should a placeholder image in the FXFormImageCell be a nilOption or a placeholder value?\n\nI think perhaps the mistake here is that I use the placeholder for the detail label value in fields that have a disclosure arrow - maybe I just shouldn't do that.\n\nFortunately, it's fairly easy to override that, so I think I can live with it for now.\n\nThanks for your work on this, and the thoughtful feedback. I'm sorry I didn't merge your PR, but hopefully you don't feel the effort was wasted.\n\nI'll close this ticket now, but feel free to reopen it if you think of anything else.\n. Looks good, thanks.\n. If you change a form field value, you just need to call reloadData on the tableView, or reloadRowAtIndexPath if you just want to reload that cell.\n\nIf your change affects the field layout, you need to call the formController.form setter first, and then call reloadData on the tableView.\n\nI appreciate that this is a bit clunky - if you have a better suggestion, I'd love to hear it.\n. Ah, I see. The problem is that it would be a violation of MVC principles to have the form update the view directly.\n\nThe best way to handle this is either to set up a KVO observer for your form fields from the view controller, or have your form broadcast an NSNotification whenever it changes a field, which could then be observed by the view controller. \n. cool - remember to remove the observer again in your dealloc ;-)\n. It's listed here: https://github.com/nicklockwood/FXForms/blob/master/FXForms/FXForms.h\n\nDo you have an old copy of FXForms? Note that the CocoaPods version is only at v 1.0.2 and this feature was added in 1.1 beta 4.\n. You don't have to, you can just point your pod file directly at the github repo if you want to use the latest build.\n. I don't have any particularly elegant solution to these types of problem right now, but it should be possible to implement as follows:\n\nFor any control that modifies the forms fields, you can either 1) add an action to the field that will be called on the view controller and tell it to reload the form, or a subset of the form (the action can be either a block or a selector to call on the view controller), or 2) add a KVO observer on the form itself that does the same.\n\nThe fields method of the form is called whenever the formController.forms property is set, so as an example, your switch action could do this:\n\n```\n- (void)allDaySwitchAction\n{\n    //reload form fields\n    self.formController.form = self.formController.form;\n\n    //reload table\n    [self.formController.tableView reloadData];\n}\n```\n\nThen, in the fields method of your form, return a different configuration depending on the value of the allDay property.\n\nIf you can think of a better way to do this, please let me know.\n. Probably a silly question, but have you checked that your callback is firing on the main thread?\n. This is exactly the scenario that I added the new FXFormFieldViewController property for in the 1.1 beta. This feature is not completely finished yet, but if you don't mind being a guinea pig, here's how it works :-)\n\nInstead of a property called cityViewController of type UIViewController, as you have now, make a property called city or type string (presumably it's a string) on your form model. Modify your cityViewController to implement the FXFormFieldViewController protocol, which basically just means adding a field property to it.\n\nNow, in the config dictionary for your city property, return this:\n\n```\n@{ FXFormFieldKey : @\"city\", FXFormFieldViewController : @\"CityViewController\" },\n```\n\nThat will tell FXForms that the city property should not be displayed as a textfield, but should instead display your custom view controller and pass it the field object. Your view controller can then set the field.value directly, which will set the city property on the original form.\n\nHope that makes sense.\n. Yes the FXFormFieldViewController value should be the class name of your view controller, not the name of a key on the form.\n\nYou no longer need to haves the searchCityViewController property on your form itself - using the FXFormFieldViewController on the selectedCity property replaces having the view controller be a property in its own right.\n. Hmm, ok we'll that looks correct to me, so it may be a bug. I'll take a look.\n. I've pushed an update that should fix your issues. I've included an example project that demonstrates using a custom controller for a field.\n. Your view controller has to conform to the <FXFormFieldViewController) protocol, so yes, the field has to be called field. Either redeclaring the field property in your form controller header or adding a manual synthesize is sufficient (you don't have to do both).\n. As Broich says, this is the standard behaviour for table views. \n\nWhilst it would theoretically be possible for me to override it, part of the point of creating your own form viewcontroller is so that you can deviate the FXFormViewController's behaviours, not have them imposed on you anyway.\n\nFWIW, if you look at the the FXFormViewController's source, you can see how I handle this there (I use [tableView selectRowAtIndexPath:nil animated:YES] on viewDidAppear IIRC)\n. You're right, the documentation could be clearer on that point. I think the behaviour is probably correct as is, but I'll leave this open until I've amended the docs.\n. I've updated the documentation to make this clearer\n. I'm not able to reproduce this either.\n. I think the best option in this case is to create the field conditionally, based on whether mail accounts are available (i.e. in the fields method, make that property conditional) or make the field for that controller be a button that displays the controller using its action method instead of being a property of type MFMailComposeViewController.\n. I wonder if a phone pad is the correct input for a phone number in practice. I think the phone pad is probably just suited for dialling interfaces rather than phone number input. Maybe it should be the alphanumeric keyboard instead?\n. Huh, so it is. Fair enough then.\n. You read it right; this was a bug introduced in 1.1. Fixed in 1.1.1.\n. That is true. It's by design, but I can see that it's probably not what you want in this case.\n\nIf you want to trigger an action when the value is set, you can do this by overriding the setter method for that value in your form.\n\nI'll think about whether there's a better way to implement this.\n. I made a few changes to the interface and extended to support controllers too, but this is now merged.\n. Your solution for 1) will work, although you can actually just call becomeFirstResponder directly on the cell and it will call becomeFirstResponder on the textField for you.\n\nI'm not sure what you mean by default text value. If you mean placeholder text, then use the FXFormFieldPlaceholder value. If you mean you actually want the form to set the text to a default value if the string is nil, you can do this in your form object with a \"lazy getter\" for the field value, e.g.\n\n```\n@implementation MyForm\n\n- (NSString *)myField\n{\n    if (_myField == nil)\n    {\n        return @\"default value\";\n    }\n    return _myField;\n}\n\n@end\n```\n. You can set it with the @\"detailTextLabel.font\" keypath.\n. Hmm. It's hard to be certain, but I think the issue may be that the form object itself is an NSNull instance as opposed to the state property being nil.\n\nFXForms handles nil pointers just fine (in accordance with standard objective C practice), but It may well not cope with receiving an NSNull in place of a form.\n\nCan you investigate further and find out if this is the case? And if so, is this expected behaviour for CoreData (in which case FXForms should probably handle it gracefully) or the symptom of a bug in your app?\n. I can't see anything obvious that's wrong with it. Can you send me your project and I'll investigate?\n\nYou can email it to support at charcoaldesign dot co dot uk.\n. The problem seems to be that When FXForms encounters a nil form object, it instantiates it using alloc/init, which is not the correct way to create an NSManagedObject subclass.\n\nI'll see if I can find a better approach for this. It would be relatively easy to make a special case for Core Data objects, but it might be better to have a more flexible solution.\n. That might be easier for your case, although you'd have to override valueForUndefinedKey: and setValue:forUndefinedKey: on your form wrapper and pass those values to your core data model property.\n\nFXForms doesn't have any concept of edit mode at the moment - it's assumed that fields will always be in edit mode. Creating new objects is implicit (if you click on a nil field in your form, it will create a new object for it), which is why you're having the issue with null core data entities being initialised with the wrong constructor.\n. If you can explain how you'd like your form interface to work, I can use this as the basis for defining new functionality. Lack of real-world use cases (aka dogfooding) is always a problem when designing features for a library.\n. I've made an update that prevents FXForms trying to instantiate NSManagedObjects if they are null, which should hopefully fix the crashing.\n\nThe scenario you've described should work fine if you use a custom form controller and detect if the field value is nil, then show a new or edit button accordingly.\n\nLet me know if you run into any more problems (or if the original problem has not been solved).\n. Action methods only propagate up the responder chain, so if the delegate isn't a super view or parent controller of the form view controller it won't work.\n\nIt might be simpler in this case to use a block for your action instead of a selector.\n. The : in the selector is optional, just as it is with IBActions. But if you include the : in the selector, you have to include a parameter in your method as well. If you don't need the sender, you don't need the colon.\n. If you're using an action block to load a view controller, you'll need some way to get a reference to the controller from within your form, which is likely to be kind of horrible from a structural point of view.\n\nProbably your best bet is to post an NSNotification in your form that is observed by your view controller and triggers the action.\n. Yes, you need an FXFormFieldKey for virtual fields, otherwise valueForKey:/setValue:forKey: won't be called on your form object, and there will be no way to get/set the value.\n\nIf the field doesn't have a value (e.g. if it's a button or a custom cell with hard-coded content) then you don't need a key.\n. If you look in the BasicExample project there is a Submit button that shows how this is done.\n. Yes, just create a custom cell class containing a button, and use that with the FXForFieldCell property.\n. You can implement the button action as follows:\n\n```\n- (void)buttonAction:(id)sender\n{\n    if (self.field.action) self.field.action(self);\n}\n```\n\nThis will then call the standard action selector or block for your field, so you can implement the button action in the same way as shown in the BasicExample project.\n. BTW, If you've added this cell inside FXForms, I suggest you define it in a separate class inside your own project. Instead of overloading the private setUp method, you can just use the normal init method for UITableViewCell, like this:\n\n```\n- (id)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString *)reuseIdentifier\n{\n    if ((self = [super initWithStyle:style reuseIdentifier:reuseIdentifier]))\n    {\n        //do your setup\n    }\n    return self;\n}\n```\n. FYI, I've added an example for how to do this to the examples folder. My example uses a nib, but you can do it with code if you prefer.\n. That should work fine. I think you must have inadvertently changed the name of the method or the selector string (if that's a direct copy of the error you got, it looks like the colon is missing from the end of the selector name in the form field configuration).\n. In answer to your first question, about customising buttons, if you make the button a property of your cell, you can customise its properties using keypaths, the same way you can set the textLabel properties, etc.\n. It's not standard behaviour for cells to deselect themselves. I was attempting to follow the standard iOS pattern.\n. Dd you try adding `@\"textField.keyboardType\": @(UIKeyboardTypeDecimalPad)` to your field dictionary?\n. UITextView doesn't implement any placeholder functionality. I'll have to build something custom. I'll add this to the list for v1.2.\n. I've added this in 1.1.4.\n. The return value of the fields / extraFields method can vary at runtime. You could have an isNewInstance (or whatever) property on the form that toggles the inclusion of the delete button in the fields array.\n. If you come up with a better approach, or you can think of a way you'd like it to work, let me know.\n\nSomething I'm considering for a future update is to allow fields to be customised via the FXFormControllerDelegate, rather than  methods on the form. Would that work better for you?\n. Yes, I'm aware of this issue. It's on the todo list.\n. 1. No, not currently. I'm investigating a solution for this for the next release.\n2. I'm not 100% sure this is possible. You would need to create a cell subclass that can display a custom data type that encapsulates both the image and text, and register that cell as the default for FXFormFieldTypeOption, but I can't guarantee that you won't need to make additional changes to the library to make this work. I'll investigate.\n. if you implement the methods -valueForUndefinedKey: and -setValue:forUndefinedKey: on your form object, you can use these to set and get the values from your database. \n. The setValue:forUndefinedKey: will automatically be called on your form object with the value of the text field when the textfield resigns first responder. If the user presses submit while the keyboard is still visible, the value may not have been updated yet, so it's a good idea to dismiss the keyboard in your submit button action before saving the data in your database.\n. FXFormTextFieldCell adjusts the textfield frame in layoutSubviews, so it's probably positioning the left-hand edge back underneath your image.\n\nTry this:\n\n```\n- (void)layoutSubviews\n{\n    [super layoutSubviews]\n    self.textField.frame = CGRectMake(58, 10, 254, 30);\n}\n```\n\nIn general though, this is a bit fragile because it makes assumptions about how FXFormTextFieldCell works that may change in future. It would probably be better if I called the setUp method from within awakeFromNib so that you don't have to create it yourself.\n\nI'll look at changing that in the next version.\n. For now, it might be easier to subclass FXFormBaseCell instead, and copy the FXFormTextFieldCell implementation into your own class. I'll look at a way to make this easier in the next release.\n. Mean you give an example? It should be possible to implement the text field cell using only public properties of FXFormField and FXFormBaseCell.\n. Oh, I see. Yeah, you can't copy it exactly, but you can just put in hard-coded values for those - the functions are only because I need to support multiple OS-version targets without warnings.\n. This is now possible. Also, see the note in the README about the distinction between FXFormBaseCell and FXFormDefaultCell.\n. It's probably a stupid question, but are you sure the address value of your form isn't nil?\n. Ah, yeah. Sorry, didn't think of that explanation. I should probably make it resign responder automatically when you press a button.\n. I don't think there's any way to do this other than manually resigning the responder.\n. It should be possible to do this with a custom action method or cell.\n. You can call [navigationController popViewControllerAnimated:] - would that work?\n. Yeah, I think you'd have to do it like that, which I guess is a little awkward. Let me think about this a bit more.\n. This should be fixed now in 1.1.4\n. This should be fixed now in 1.1.4\n. This isn't a bug, but I can see why it's confusing.\n\nThe values returned by the form has nothing to do with the enum, it's just the index of the option you select. Enums have no runtime representation - they're just a convenient way of representing constants, but there's no way for FXForms to know what values you've used.\n\nIf you want non-zero-based, non-sequential option values, you can specify that actual numbers as your FXFormFieldOptions and then use a valueTransformer to convert them to strings, like this:\n\n```\n{FXFormFieldOptions: @[@(GenderMale), @(GenderFemale), @(GenderOther)],\n FXFormFieldValueTransformer: ^(id input) {\n        return @{@(GenderMale): @\"Male\",\n                       @(GenderFemale): @\"Female\",\n                       @(GenderOther): @\"Other\"}[input];\n }};\n```\n. Nothing yet, as there are a few other issues to tackle first. If you have any suggestions though, I'd be interested to hear them.\n\nIt seems like I should probably try to tie into the KVC model validation mechanism used by Core Data, but it's not an area I'm very familiar with.\n. This is something I'm planning for the next version, but I haven't started work on it yet.\n\nThe idea would be that you'd have an FXFormFieldTemplate attribute that would describe the properties of each field, and then the field would be represented as a section with the ability to add/remove and reorder items.\n. Now implemented in 1.2 beta 2\n. I've been considering ways to make this easier, but in the meantime I'll add an example of how to do this when I get a chance.\n. @mrs1987 no, you don't need to do that. You just need to return different options in your fields array based on the current values of the form, and reload the form whenever a value changes that would affect the fields structure.\n\nIf your options are dynamic, it probably doesn't make sense to use an enum for the values - just use an integer, or the actual option value type (e.g NSString).\n. @mrs1987 Looking at your specific problem, I think here's how you should solve it:\n\nIn your form object:\n\n```\n@implementation ProductSelectionForm\n\n- (NSDictionary *)productList\n{\n    return @{FXFormFieldOptions: @[@\"Juice\", @\"Water\", @\"Coffee\"],\n             FXFormFieldAction: @\"productListChanged\"};\n}\n\n- (NSDictionary *)productOptionsField\n{\n    NSMutableDictionary *details = [NSMutableDictionary dictionary];\n    details[FXFormFieldOptions] = @[@\"Option1\", @\"Option2\", @\"Option3\"];\n    if (self.productList == Coffee)\n    {\n        //only allow single-selection\n        return @{FXFormFieldType: FXFormFieldTypeInteger}\n    }\n    else\n    {\n        //allow multi-selection\n        return @{FXFormFieldType: FXFormFieldTypeBitfield}\n    }\n    return details;\n}  \n\n@end\n```\n\nAnd in your view controller:\n\n```\n@implementation ProductSelectionFormViewController\n\n- (void)productListChanged\n{\n    self.formController.form = self.productSelectionForm;\n    [self.tableView reloadData];\n}\n\n@end\n```\n\nHope that makes sense.\n\nNote, this will only work if you have 3 options in your productOptions field (as you do in your example). If you have 4 options, option 4 would have an enum value of 4 when it's in bitfield mode and 3 when it's in single-selection mode so it wouldn't quite work unless a different approach is used.\n. I've included a dependent fields example in the latest release, including a couple of fixes that are required to make it work as expected.\n. It might be better to add an action to the limitStorageSize field instead of reloading the table from within the setter.\n\nI'm not sure what's causing the crash, but the use of manual retain/release means it could be a lot of subtle things.\n. This is controlled by the value set in the form object. It should be working, but if not let me know.\n. You'd have a property called \"province\" on your form object that is an NSString, and if you set its value to \"B\" then option \"B\" in the picker should automatically be selected when the form is displayed.\n. If you mean helper text, you can use the FXFormFieldPlaceholder value. If you mean an actual default value, just set the default values in the init method of your form object, as you would for any ordinary object.\n. Try this instead:\n\n@\"detailTextLabel.font\": kFontNormal(14)};\n. Yes, this is actually the documented approach for customising cells.\n. Looks very cool! It will take a little while to review though I'm afraid :-)\n. Yeah, I did intend FXFormFieldTemplate to work a bit differently, but I'll see if your approach makes more sense.\n. Sorry for the much overdue response to this. I've now added basic support for templates collection fields. There is no doubt a lot more to do (e.g. setting maximum item count), but hopefully this meets at least some of your requirements.\n\nI'm sorry that I didn't end up using your approach in the end, but hopefully you'll agree that the template system I've used is quite flexible and intuitive.\n\nIf there's anything urgent missing from this solution, let me know. I would also certainly be interested in incorporating any additional functionality you developed, such as the key/value cell. \n. Sorry for not responding sooner - I didn't think there was much point adding Travis until I'd actually written some tests.\n\nI've now added Travis support, including some tests!\n. Hmm\u2026 the lack of support for negative numbers does seem like a bit of a dealbreaker.\n. You can style almost any property of the cell by adding properties with the correct keypath in your field configuration dictionary. Eg. to change the font of the cell title, use\n\n@\"textLabel.font\"\n\nas the key.\n. I just tried it and the only leak I saw was 64KB leaked by the UIImagePickerController (which seems to be an Apple bug).\n. OK, I've taken a look. It's not actually a retain cycle. The problems seems to be that UITableView caches all created cells up to a certain maximum, so because I'm not recycling them the tableview is storing a large pool of useless objects.\n\nThis isn't a permanent leak. If you dismiss the view controller then the memory is reclaimed, and if you reload the tableview enough times, eventually it will start releasing cells once it reaches its internal cache limit.\n\nIt's not ideal though. I'll look at a better strategy in the next update that lets it recycle the cells. It occurs to me that using the field key as the identifier might work, although it may cause problems for forms that modify fields dynamically.\n. Indeed. I don't really want to add the cognitive load of an extra key though. I suppose I could make the key field mandatory, or create a hash for each field based on _all_ the properties of the field dictionary.\n. Maybe something like key ?: title + cellClass is sufficient. It's hard to be certain how people are using them.\n. Why did you close the ticket? Found a workaround?\n. I've implemented a hybrid between your two solutions. Thanks!\n. You need to reassign the formController.form _and_ then reload the tableView in order to update a field.\n. It's working for me in the BasicExample project. Can you clarify what you mean by showing an incorrect value?\n\n(Note: it was broken in an earlier release, so make sure you're using 1.1.6 or later).\n. Yes. The valueTransformer property is usually only needed if the bitmask values aren't sequential.\n. I've added this in the latest beta\n. There is now a \"phone\" field type that uses the phone pad.\n. You can add a custom action block or selector to the last field in the form.\n. This should now be fixed.\n. Sorry for the delay - just waiting until I get a chunk of time to review this and start work on the next big update.\n. I think this is an issue with UITextField in general, rather than a problem with FXForms.\n. In that case, I guess you can fix it by left-aligning the textfield, which you can do by adding the following to your field dictionary:\n\n```\n- (NSDictionary *)myField {\n    return @{@\"textField.textAlignment\", @(NSTextAlignmentLeft)};\n}\n```\n. Currently there's no way to enforce this other than to check when the form is submitted and display an alert telling the user to select fewer options. \n. Ah, good point.\n. I've added support for reverse transforms in the latest beta.\n. I'm OK with this idea, but there are a few problems with the implementation that's stopping me from merging it as it stands:\n\n1) It should be optional - the way this is implemented means that all form fields will get this feature. No Apple forms actually use this toolbar approach - it's used exclusively in web-based forms in Safari, so really it's kind of nonstandard, which means it's not something I would want to force on everyone.\n\nI need to think of a good way to expose an option to enabled/disable this feature. I don't currently have a mechanism for this kind of from-wide configuration, and I want to add it in a way that will scale for other features\n\n2) This PR declares a couple of private Apple UI constants, for reasons that aren't entirely clear to me. This seems fragile and possibly risks rejection if that gets flagged as private API usage.\n. This is implemented as of beta 10.\n. You can supply your own UIViewController class using the FXFormFieldViewController key. If you create a subclass of FXFormViewController and set its title in the viewDidLoad method, then supply that class as the FXFormFieldViewController for your field, it should work.\n. I agree, it's not very convenient.\n\nNow that I think about it, an easier approach would  be to use the FXFormFieldTitle key to specify your view controller's title, and then override the title displayed in the cell using \"textLabel.text\".\n. It depends what you mean by \"change\".\n\nIf you want to push another form onto the navigation controller, you can just push that as you would with any normal view controller.\n\nIf you want to load a different form in the sane controller, just set your new form object on your formController, then call reloadData on the tableView.\n. This is expected behaviour (it's how any ordinary textfield/button would work in iOS).\n\nYou can fix it by resigning the first responder in your button action.\n\nI can make it so that the responder is resigned automatically when you press a button cell in the form, and perhaps I should, but I'm concerned that would just be masking the issue - for example, if you pressed a button outside of the form, you'd still have the same issue.\n\nAnother option would be to update the form values live as you edit, but the problem with that is that the field action would either have to be called after every key press, or you might have a situation where the value changes but the action is never called.\n\nThoughts?\n. That isn't necessary - you can resign the first responder just by calling [tableView endEditing:YES];\n. This is fixed in beta 3\n. Yes, you can add and remove or modify fields dynamically. Have a look at the dependent fields example for how to do this.\n. To make the value appear, you need to ensure that the value in the dynamic form dictionary is an NSNumber with value of zero, not nil.\n. They would have been, but unfortunately, neither of those pads support negative numbers.\n. I was considering adding FXFormTypeUnsignedInteger and doing that. That also has the benefit that I can detect that type automatically from the property.\n. I've added a FXFormFieldTypeUnsigned type that uses a number pad by default. This type will automatically be used for properties of type NSUInteger, or equivalent.\n. I like this idea a lot, but it seems very hard to generalise (i.e. to make it work without dictating the field keys or types for the form).\n\nThe problem with using a dictionary is that its unordered, which makes it hard to use with templates fields (I currently only support ordered collections for this reason).\n\nOne option would be to introduce a concrete FXForm class called something like FXKeyValueForm that contains hard-coded key and value fields of the correct type and is designed to work with the FXFormKeyValueCell.\n\nAnother option would be to make FXKeyValueForm a protocol, but then the developer would have to do quite a lot of work to set up such a form (perhaps it should be both a protocol AND a class, to provide maximum flexibility and minimum effort).\n. The form always knows (or guesses) the class of the collection values based on the FXFormFieldClass key in the template, so that shouldn't be a problem. Instantiating the value automatically is still a problem though, without having an equivalent to your newInstanceFor<FieldName>.\n. Sorry this is taking a while to fix. It turns out that handling nil values in a templates form is incredibly complicated, given that nil may actually be a legitimate value (e.g. if the field is multiple choice with a placeholder value).\n\nI think your approach of having the form instantiate and cleanup objects makes sense, but I'm going to tackle making nil values work correctly first.\n. OK, I believe I've fixed all the crashes.\n. Actually I was already thinking along the same lines. If the FXFormControllerDelegate protocol replicated the methods available on the FXForm protocol then it would be possible to use existing objects as form models without having to subclass them.\n. This is fixed in latest beta.\n. If you just leave the view controller in our storyboard empty, and set up the code for the controller the same way as it is done in the basic example, you shouldn't have to do anything else.\n. (That's assuming you set the superclass of your view controller to be FXFormViewController, as it is in the example)\n. I'll see if I can rustle up an example tomorrow.\n. OK, I've added a storyboard example, and also included some new features to make using storyboards easier, such as support for UIStoryboardSegues\n. Despite the reference to arm64 in the error, FXForms works fine on arm64 when using Objective-C, so I think it's unlikely that the architecture has anything to do with it. Hopefully just a beta bug in the Swift compiler, but I'll look into it.\n\nAs a side-note, it's nice to see FXForms still works well in Swift - I wasn't sure if the automatic property introspection would function correctly, since Swift doesn't have the same kind of runtime support - but I guess as long as you are subclassing NSObject for your form objects then declared properties are still inspectable?\n. Try importing the FXForms.h/m files into your project directly. They don't have any dependencies or unusual compiler requirements.\n. Yep, I like that idea.\n. That's odd - I thought I fixed this in the latest beta.\n. If you are using CocoaPods, try linking directly against the podspec in this repo instead of using the public spec. I've added quite a lot of stuff in the 1.2 beta that isn't in the most recent stable release. \n. Problem 1 is a design issue. If you have an index-based options field, and you select an option that isn't in the list (\"None\") then the index is set to NSNotFound (2147483648). Arguably it should be nil if the type is NSNumber and not NSInteger, but for consistency it currently uses NSNotFound for both.\n\nProblem 2 is not a bug. The default value of NSNumber is nil, which is treated as \"no value\". The default value of an NSInteger is 0, so it matches index zero in the list (the first item). You have to set it to NSNotFound in your init method if you want no item to be selected.\n\nProblem 3 sounds like a genuine bug. I'll take a look.\n. OK, in the latest update, options values of type NSNumber should be nil if the value is out of range (it will still be NSNotFound for NSInteger fields). That should fix Problem 1.\n\nI couldn't reproduce the crash mentioned in Problem 2, let me know if you're still seeing that. Option types of NSInteger will still default to option 1 though, as that's by design.\n\nI couldn't reproduce the bug in Problem 3, perhaps that was fixed by one of the other changes?\n. Sorry, the NSUnknownKeyException was an unrelated bug introduced in the last update, now fixed.\n\nStill can't see Problem 3 though - can you paste in the complete source for your form object (or whatever subset is needed to reproduce this problem)?\n. OK, I figured out what the problem with #3 was. Fixed in latest beta.\n. Sorry, that was an incomplete refactoring job on my part. Your fix is valid for the old way indexing was handled, but the new way avoids a lot of code duplication. Now fixed.\n. Whoops, sorry about that. Fixed.\n. Actually that's not quite right. You set the default value by just setting the property in your form object (e.g in init). Otherwise all values default to nil, which will display the placeholder if there is one.\n. I don't understand what you mean by that. There is no such thing as an \"enum type\" - at runtime an enum is just an integer.\n. @kbala assuming you are using the approach from the dynamic fields example, to set default values in your JSON, add a dictionary of default values by key and use it to populate the valuesByKey dictionary.\n\nI'm investigating whether there is a more convenient approach that can be used.\n. @batkru Ah, I understand the confusion. There was a bug causing the gender field to show up as a text field instead of a selection box. This is now fixed.\n\n@kbala I've now added an option called FXFormDefaultValue that can be used to set the default value in the field dictionary. This should make it simpler for you to set defaults for dynamic forms using JSON.\n. That's because the field type is NSDate, and FXForms doesn't convert a default value of type NSString to NSDate (it couldn't really do this, since there is more than one way to represent a date as a string).\n\nYou'll have to parse the default value to an NSDate yourself before passing the dictionary to FXForms.\n. I'm planning to at some point. For now you can set the field type to @\"label\" to make it read only.\n. This is a peculiar edge case, caused by the fact that \"class\" is a standard method of NSObject.\n\nEither use a different key, or change:\n\n```\n- (id)valueForUndefinedKey:(NSString *)key\n{\n    return self.valuesByKey[key];\n}\n```\n\nTo\n\n```\n- (id)valueForKey:(NSString *)key\n{\n    return self.valuesByKey[key];\n}\n```\n\nWhich, seems to work OK, although it may have some weird side effects later that I haven't thought of.\n. Good point - I'll look into that.\n. Awesome, thanks!\n. How are you setting them? By directly manipulating the cell.textField.text property?\n. OK, I've fixed it.\n. Glad you've found it useful :-)\n. If your form is just an ordinary class, you can set the properties directly. After setting properties, call reloadData on the tableView to refresh the table.\n\nIf you are using a dynamic form, use setValue:forKey: as you suggested, but remember to reload the tableView afterwards.\n. Sorry, I must have misunderstood what you are trying to do. If you want to set the default value, you can just use the FXFormFieldDefaultValue key.\n. Can you try again with the latest beta? When I paste that exact fields method into the DynamicForms example form it works fine.\n. There's a FXFormFieldDefaultValue you can use, or just set the value in the form object itself.\n. No, you should do it like this:\n\nreturn @{FXFormFieldKey: @\"yourEmail\", FXFormFieldDefaultValue: userEmail}\n\nSetting the the textField.text value directly won't store the value in the form, so if the user doesn't modify it, the value might not be saved and could be left as nil.\n. Setting the textField.text value is the wrong way to do that anyway (see my comment in the other thread), but in any case, the easiest way to do this is simply to set the form values directly:\n\nYourAccountForm *form = [[YourAccountForm alloc] init];\n[form setValue:someDefaultValue forKey:@\"someKey\"];\n...\n\n//then assign the form to the controller\ncontroller.formController.form = form;\n. Your form either needs to have properties matching the keys you are trying to set, or your need to set it up as a dynamic form by following the implementation design used in the DynamicForm example.\n. No problem.\n. Thanks. Fixed in b9.\n. Thanks. Fixed.\n. There's no way to do this right now except by creating a custom cell class and registering it as the cell to be used by FXFormFieldTypeOption. \n\nThe options lists just use regular UITableViewCells, which don't support multi-line labels.\n. The only reason that I haven't done so is that I can't currently see a use case for it. Generally you are interested in either displaying the option (for which you can use optionDescriptionAtIndex) or finding out the actual selected value of the field, for which you can use field.value.\n\nI can see that if the field values were something like colors, it would be useful to be able to display these using custom cells that displayed the actual color. I think that currently, implementing that would involve more than just having access to the field option value though - you'd also need some way to specify that you wanted to use a different cell type for that option, and then make the underlying options field available to the cell, which currently just sees the options as boolean values on the FXOptionsForm.\n\nSo basically I'd need to re-architect the way options fields are handled in order for the option value to be useful. If you have any suggestions for how that might work, I'd be interested.\n. But where would you call that method from in your code? The option cell doesn't have access to the original form field - it uses a proxy field. You can get to the original field from the proxy, but only by calling private methods.\n. Ah, so you're building a custom controller for selecting the field? Now I understand.\n. OK, I've exposed this method.\n. You can register a custom cell class to use for fields of type FXFormFieldTypeOption using the registerViewControllerClass:forFieldType: method of FXFormController, and then handle the display of the title value differently. I'm not sure if that would meet your requirements.\n. Ha ha, my time isn't _that_ valuable ;-)\n. Why does this cause a retain cycle? The form doesn't have a reference its fields.\n. Yes, if the cellPhone property is an array, set the array value directly, e.g.\n\n[form setValue:@[@\"Nokia Lumia\", @\"Galaxy Nexus\", @\"iPhone 5s\"] forKey:@\"cellPhone\"];\n. Sorry, I think I misunderstood the question.\n\nWhat is it that you are trying to do? set the FXFormFieldOptions for the form field in the view controller instead of the form object?\n\nWhy don't you want to set them in the form object?\n. Why not just return a different value from the FXFormFieldOptions in the form object based on the result from your web API? Why does it need to be set in controller?\n. You can set it in the controller, but the property itself should belong to the form. E.g. you could do something like this:\n\n```\n@interface MyForm <FXForm>\n\n@property (nonatomic, copy) NSString *resortName;\n@property (nonatomic, copy) NSArray *resortOptions;\n\n@end\n\n@implementation MyForm <FXForm>\n\n- (NSDictionary *)resortNameField\n{\n    return @{FXFormFieldOptions: resortOptions ?: @[]}\n}\n\n- (NSArray *)excludedFields\n{\n    return @\"resortOptions\";\n}\n\n@end\n```\n\nThat will let you set the resortOptions from your controller, like this:\n\n```\nself.form.resortOptions = //downloaded resorts array\nself.formController.form = self.form;\n[self.tableView reloadData];\n```\n. Yes, fixed in latest FXForms beta.\n. Use :head as the version in your podfile.\n. Currently there's no simple solution for this. The best approach is probably to create two proxy form objects that talk to the underlying NSManagedObject in the same way that the DynamicFieldsExample form talks to a dictionary.\n. The plan is to make field customisation available via the delegate, rather than having to add methods to the form object itself. I'm not sure when I'll get round to that though.\n. I'll update the pod when 1.2 is out of beta. CocoaPods doesn't currently have a way to submit pods for beta versions.\n. Your best bet is just to create a normal numeric field (e.g. using `FXFormFieldTypeUnsigned`) and then add `@\"textField.secureTextEntry\": @YES` to the field dictionary.\n. I'll consider whether there is a better approach for secure text fields - it's not an issue that has arisen before so I don't know that it's worth a huge amount of refactoring to fix it. Checking for `FXFormFieldTypePassword` and `@\"textField.secureTextEntry\"` should be the only cases you have to deal with. You could optionally create a new type \"FormFieldTypeNumericPassword\" and a custom cell to handle it if you prefer.\n\nThe code is all in one file because of the how C/Objective-C handles privacy. Currently the components rely on talking to each other's private methods, and there's no particularly elegant way to do this across multiple files (private categories is an option I'm considering). Swift appears to do nothing to improve this, and actually removes the private category option so I expect this pattern to continue. I don't consider having all code in one file to be a big issue as long as class responsibilities are separated.\n\nI don't have a specific date planned for 1.2 release. Features are mostly locked down now, so once I'm happy that it's stable I'll release it.\n. Can you paste the full code of how you enumerated the field? It sounds like it was enumerating the fields of the options subfotm instead of the root form.\n. Ah, interesting. The `FXFormFieldInline` is the cause here. I guess this is unexpected behavior, but it may be a little tricky to fix, since it's technically behaving correctly; those are the keys for the fields displayed at those index paths in the form, and if I return the non-inlined field instead then the indexPaths won't match the tableview, which may also be unexpected behavior.\n. Sorry, already fixed this a while ago, just forgot to push it for some reason.\n. You need to include FXFormFieldKey: @\"domain\" in the dictionary if you want to return it from the -fields array, otherwise FXForms doesn't know which field it relates to (it works when it's a standalone method because it infers the key from the domainField method name).\n. I would argue that tapping (or scrolling) elsewhere on screen _is_ a good way to dismiss it ;-)\n. Seems reasonable. Implemented in 1.2.8.\n. Sorry, I missed the part about changing the color, but I'm not sure hard-coding a color like this is appropriate anyway. Maybe it could use the tintColor instead though or something?\n. I guess this could be a configuration option in the form. I'll think about it.\n. It's possible to do all of your cell styling in IB, although currently it's necessary to create a custom cell class for each distinct cell.xib (although the class need not do anything except extend FXFormBaseCell).\n\nCan you paste in some examples of the classes you've had to write? It may be that in some cases there was a better way, but in the cases where there wasn't, I'll see if I can improve the API.\n. I'll need a bit more context. Is it a dynamic form? What properties have you included in the field dictionary?\n. Try the latest update. It should now treat empty text values as nil for fields of type NSNumber.\n. Have a look at the DynamicFieldsExample - it shows how to create a form from a JSON file.\n. You'll need to download the list as JSON using NSURLSession, and then set it as the options in your form fields dictionary.\n. I'm adding support for this in the next version, but FWIW you can customise the header and footer views using the UITableViewDelegate methods in your view controller, as normal.\n. Headers aren't cells, they're ordinary views. Just create a UILabel with the attributes and text that you want and set it as the FXFormFieldHeader of the field.\n. Note: There's currently no way for FXForms to set the text of custom headers automatically, so you'll need to set the text yourself for each header you create. You can always simplify that by creating a custom view class with a constructor, e.g. [MyHeaderView viewWithTitle:someString]\n. You can't set headers in JSON unless you create a separate class for each header, which would be a PiTA. I suggest you use the FXFormDelegate instead.\n\nYou don't need to add anything to your JSON, unless you want to modify the title text of the header. If you do, just add\n\n```\n\"header\": \"Some long title / description text to add to the form and tell the user what the next part is all about\"\n```\n\nto the dictionary for the first field in the section where you want it to appear.\n\nTo customise the font, etc, add a method like this to your form view controller:\n\n```\n- (UIView *)tableView:(UITableView *)tableView viewForHeaderInSection:(NSInteger)section\n{\n    NSString *title = [(id<UITableViewDataSource>)self.formController tableView:tableView titleForHeaderInSection:section];\n    if ([title length])\n    {\n        UILabel *label = [[UILabel alloc] initWithFrame:CGRectMake(10, 5, tableView.frame.size.width - 20, 18)];\n        label.text = title;\n        label.font = [UIFont boldSystemFontOfSize:12];\n        label.textColor = [UIColor redColor];\n        [label sizeToFit];\n\n        UIView *view = [[UIView alloc] initWithFrame:CGRectMake(0, 0, tableView.frame.size.width, label.frame.size.height + 10)];\n        view.backgroundColor = [UIColor greenColor];\n        [view addSubview:label];\n        return view;\n    }\n    return nil;\n}\n\n- (CGFloat)tableView:(UITableView *)tableView heightForHeaderInSection:(NSInteger)section\n{\n    return [self tableView:tableView viewForHeaderInSection:section].frame.size.height;\n}\n```\n. Add the \"header\": \"Whatever text I want\" to the first field in the section it relates to - don't put it in a field on its own. i.e., do it like this:\n\n```\n{\"header\": \"Whatever text I want\",\n \"key\": \"field1\",\n \"title\": \"field 1\",\n\"type\": \"integer\"},\n\n{\"key\": \"field2\",\n \"title\": \"field 2\",\n\"type\": \"text\"},\n```\n. Alternatively, if you just want an ordinary cell full of text that you can style, use a cell of \"type\": \"label\" instead, then you can customise it however you want in the normal way using keypaths.\n. Yes, that's true. You'll probably need to create a custom cell, as you originally suggested.\n\nI'll look into making multiline text work with FXFormFieldTypeLabel, as that would be a simpler solution.\n. I think removing readonly properties altogether is too blunt, as it can be useful for things like label fields or info pages. For now, I've eliminated just those properties.\n. This question is a bit confusing. I'm not sure why you've overridden -fields, -extraFields and -excludedFields instead of just returning _dynamicFields from the -fields method.\n\nAlso, if you are using Swift, why not define your ApplicationForm class in Swift instead of Objective-C? As long as it's a subclass of NSObject, it should work fine.\n\nThe solution to adding options to your dynamic fields should be to just add the Male/Female/etc options into your JSON file. There are several examples of how to specify options fields in JSON in the DynamicFieldsExample.\n. Note: for the example you've given, you shouldn't need to use FXFormFieldValueTransformer as the values are simple strings. If you find that do need to use a value transformer, let me know as that's a bit more complex.\n. You need to override valueForKey: and setValue:forKey: in your form object (see the DynamicFieldsExample for details) otherwise FXForms cannot record the state of the field.\n. You don't really need the cell in this case, it was only being used to look up the form. You can just do this instead:\n\n```\n- (IBAction)barBtnSave:(UIBarButtonItem *)sender\n{\n    //I'm assuming that the barBtnSave method is in your form view controller - if it's somewhere\n    //else then you'll need to get the form via a different route\n    RegistrationForm *form = self.formController.form;\n\n    //we can then perform validation, etc\n    if (form.agreedToTerms)\n    {\n        [[[UIAlertView alloc] initWithTitle:@\"Registration Form Submitted\" message:nil delegate:nil cancelButtonTitle:nil otherButtonTitles:@\"OK\", nil] show];\n    }\n    else\n    {\n        [[[UIAlertView alloc] initWithTitle:@\"User Error\" message:@\"Please agree to the terms and conditions before proceeding\" delegate:nil cancelButtonTitle:nil otherButtonTitles:@\"Yes Sir!\", nil] show];\n    }\n}\n```\n. You may need to resign the responder on the form. You can do that by calling [formViewController.view setEditing:NO];\n. Yes, this is fixed in the latest beta.\n. Just use :head, or link directly to the pod spec inside the repository. It will be published normally once it's out of beta.\n. Interesting. I think the problem may be that the value isn't being stored, not that the cell is being recycled, but I need to verify.\n. Yeah, so it looks like the problem is that you've not implemented any way to store the dynamic values in your form object. You'd normally do that by overriding the valueForUndefinedKey: and setValueForUndefinedKey: methods and then storing the values in a dictionary (have a look at the DynamicFieldsExample to see what I mean).\n\nBecause you aren't storing the values anywhere, when the cells are re-created, the value is lost.\n\nIt's not ideal that FXForms fails silently here: It should probably throw an exception when you try to set a value on a form that it can't store, but other than that it seems to be working correctly.\n. You can include arbitrary key/value pairs in the field dictionary, provided that they match up with a property of the UITableViewCell. So @\"accessibilityLabel\": @\"Foo\" should work for setting a cell's accessibility label.\n\nI don't think there's currently a way to do this for the fields in an options subform.\n. Currently, I dismiss the keyboard on scroll deliberately because it's the expected behaviour as of iOS 7, and many keyboard variants cannot be dismissed any other way as they don't have a close button.\n\nI guess I could look at making this a configurable option.\n. You can add an action for when the value in a field changes (which is usually triggered when the done button is pressed). You do that using the FXFormFieldAction key, which can be either a block or the name of a method on your controller.\n. I've added this fix in 1.2.1\n. This is already possible. Just add the FXFormFieldInline option to the field dictionary.\n. Oh, I see. Currently that feature doesn't exist. Interesting idea though.\n. Thanks for flagging this. Fixed in 1.2.1.\n. Yes, you may need to resign the responder manually. FXForms only resigns the responder automatically when you tap a cell, so if the button is not inside a cell then the currently editing value may not yet have been committed to the form when you press it.\n. The FXFormFieldDefaultValue is only intended for use with values that are nillable. A BOOL can only be true or false, so FXForms has no way of knowing if the value has already been set.\n\nThere are couple of options you could take:\n\n1) In the init method of your form object, set the value to YES (this is the general way to set default values)\n\n1) Use an NSNumber for your property instead of a BOOL. That way, if it's nil, FXForms can set it to YES automatically if you set the FXFormFieldDefaultValue to @YES.\n. You can create your own Cell subclass that uses this control, and then register it as the default cell for handling strings.\n. Ooh, nice. I didn't know about that constant.\n. Sorry, this was a bug. Should be fixed in 1.2.1\n. I'm unclear what you mean by  headers and footers now being implicit. Can you send me a screenshot of how your controller looks now, and how it looked before with the older version of FXForms so I can get some idea what the problem is?\n. If you are just trying to get rid of the header text, you can use { FXFormFieldHeader: @\"\" }, but that won't get rid of the gap.\n. @ninokierulf I suspect the effect you're describing is just the normal appearance of tableviews in group mode. You can supply your own tableview created with UITableViewStylePlain to get rid of the gap.\n. This doesn't seem like an FXForms issue. Are you maybe using some iOS8-only feature in your storyboard?\n. no problem :-)\n. Try setting the image to nil on your form and then reloading the tableView.\n. There was a bug in version 1.2.1 that was party responsible for this not working. That's fixed in 1.2.2.\n\nThe other part is that you need to specify the form types because Swift doesn't provide that information at runtime like objective C for some reason. You can do that like this:\n\n```\nclass SettingsForm: NSObject, FXForm {\n    var userProfile: UserProfileForm\n    var legal: LegalForm = LegalForm()\n\n    init(user: User) {\n        self.userProfile = UserProfileForm(user: user)\n    }\n\n    func userProfileField() -> FXFormFieldDictionary {\n        return [\n            FXFormFieldClass: userProfile.dynamicType,\n            FXFormFieldInline: true\n        ]\n    }\n\n    func legalField() -> FXFormFieldDictionary {\n        return [\n            FXFormFieldClass: legal.dynamicType,\n            FXFormFieldInline: true\n        ]\n    }\n}\n```\n. By the way, you can get rid of these two methods:\n\n```\nfunc fullNameField() -> FXFormFieldDictionary {\n    return [\n        FXFormFieldHeader: \"User Profile\",\n        FXFormFieldTitle: \"Full Name\"\n    ]\n}\n\nfunc emailField() -> FXFormFieldDictionary {\n    return [\n        FXFormFieldTitle: \"Email\",\n        FXFormFieldType: FXFormFieldTypeEmail\n    ]\n}\n```\n\nAll of that is inferred by default.\n\n<strike>EDIT: oops, you still need this bit:</strike>\nEDIT2: no, I was right the first time! :-)\n. This is the same problem. In your Legal form, put this:\n\n```\nfunc termsOfServiceField() -> FXFormFieldDictionary {\n    return [\n        FXFormFieldClass: termsOfService.dynamicType\n    ]\n}\n\n    func privacyPolicyField() -> FXFormFieldDictionary {\n    return [\n        FXFormFieldClass: privacyPolicy.dynamicType\n    ]\n}\n```\n\n(And there's no need to implement the fields() method)\n. Hmm, I tried the same and it worked at my end. Can you send me your project?\n\nsupport @ charcoaldesign.co.uk\n. Hi Justin,\n\nThanks for sending the project through. I turns out that the issue was just that you need to embed your view controller inside a UINavigationController, otherwise there's nothing to push the sub viewcontrollers onto.\n\nI should probably throw an exception in this case rather than failing silently!\n. FYI thanks to your help, I've managed to find a fix for the original issue. I just pushed version 1.2.3 that no longer requires you to specify the dynamicType for your forms and controllers, so you can take all that out again if you want!\n. @kumargaurav89 Is your formViewController inside a UINavigationController? It needs to be if you want to use non-inline subforms.\n. Create a new ViewController class that conforms to the <FXFormFieldViewController> protocol, which means that it has a \"field\" property of type FXFormField.\n\nWhen your controller is pushed, it's field property will be automatically set, and you can return the value by settings self.field.value before popping the controller.\n\nI don't think the inline array template is the one you want to base it on because your form controller won't appear inline in the form. Instead, you probably want something like this:\n\n```\n@{FXFormFieldKey: @\"myCustomField\",\n  FXFormFieldViewController: [MyFormFieldViewController class]}\n```\n. FXFormFieldTypeLabel is the type, not the key. Try this:\n\n@{FXFormFieldType: FXFormFieldTypeLabel,\n    FXFormFieldTitle: @\"Program Version\",\n    FXFormFieldDefaultValue: @\"1.0\"}\n. If you have property already, you can omit the FXFormFieldDefaultValue and it will get its value directly from your property.\n\nTo intercept changes to homeinit, you can add an action, like this:\n\n```\n@{FXFormFieldKey: @\"homeinit\", FXFormFieldAction: \"methodName:\"}\n```\n\nThe action is the name of a method that you want to call on your controller when the value changes. So in your controller, you'd add:\n\n```\n- (void)methodName:(id<FXFormFieldCell>)cell {\n    BOOL homeinitValue = [cell.field.value boolValue];\n}\n```\n\nBy the way, FXForms can automatically infer the field title from the property name, so if you give your form properties human-readable names then you don't have to specify the FXFormFieldTitle for every field (e.g. if you call your version property \"programVersion\", then the title will be \"Program Version\".\n. Probably because you've set field type to FXFormFieldTypeLabel. Labels are non-interactive. Remove the FXFormFieldType key and it will use the default.\n. :-)\n. I'll need a bit more detail. Can you paste in your form class and the json for that field?\n. FXFormFieldAction doesn't have to be a block, it can be the name of a method to call on your view controller instead. That allows you to put any model update logic in your controller, instead of having to observe the model directly.\n. You may need to set the FXFormFieldClass for your subforms - FXForms can't infer the type of dynamic properties, so it defaults to text.\n. This is working correctly for me in the latest version. Can you try again, and if it's still not working, please send a project demsonqrating the problem to support at charcoaldesign dot co dot uk.\n. This working correctly for me. Are you using a custom header view? Or maybe it's something to do with the font?\n. Add the table view manually in IB and bind into the tableView outlet of the FXFormViewController.\n. I can't see anything wrong with your code, but the dateOfBirth field is working fine in the BasicExample project, so I don't think it's an FXForms bug.\n\nCan you send me the project and I'll try to reproduce it? support at charcoal design dot co dot uk\n. Fair enough. I suggest putting a breakpoint in the tap handling method and stepping through to see what's going on then.\n. You weren't doing anything wrong, it's just that the class inference wasn't as smart as it should have been. Fixed in 1.2.6\n\n(PS, you don't need to specify FXFormFieldCell explicitly, just FXFormFieldType is enough).\n. Ah, you could be right. I'll check.\n. Hmm, it's working for me. Which OS are you testing on?\n. Also, is it the cancel button for the UIActionSheet, or the image picker controller that's not working for you?\n. Hmm, it won't be the UIAlertController NULL method then, because that's only used on iOS8+. I don't have an iOS7 device to hand - can you puta breakpoint in the action sheet callback and see if you can work out what's happening? Maybe the button index is wrong?\n. If you change the structure of the form, you need to reassign it to the formController using formController.form = formController.form, _then_ call [tableView reloadData]\n. You can't do this with an ordinary options field. You'll have to create a dynamic form object using the technique shown in the DynamicFieldsExample, then build a tree of subforms, where each field in each form is a subform containing the fields for the next set of options.\n. This is an interesting problem, and there's a case for me to create a \"tree\" type field to make this simpler, but I can't easily estimate how long that would take.\n. Quite right. Fixed in 1.2.8\n. Is this still happening in 1.2.8?\n. The proxy form seems like the way to go in this case.\n\nYou can present a field in a screen on its own, but only by building a custom view controller with a bespoke UI for editing the field value. FXFormViewController is only designed to work with fields whose value is of type FXForm, it can't display a single field.\n\nI could modify FXFormViewController to do this proxying automatically, but it seems like a bit of an edge case, and it's unclear how field properties such as header/footer should be handled in the general case (would they be displayed in both the main form and subform?).\n\nI'll think about it.\n. You can already make forms within forms - just define one of your root form's fields as being another FXForm object (the example app does this). The OP had a slightly different requirement.\n. What was the logical clarification?\n. Ah, the convention in Objective-C is to write selectors (method names) without the argument names, since they're redundant. So a method like:\n\n```\n- (void)didSelectWithTableView:(UITableView *)tableView controller:(UIViewController *)controller;\n```\n\nJust becomes:\n\n```\ndidSelectWithTableView:controller:\n```\n. You may be thinking of Swift, which has slightly different naming conventions.\n. You can do it, but it's a little awkward. Add an FXFormFieldAction to the field and it will be called when the value is updated. You can then set the field text color to red and refresh the form if it's invalid.\n. You'll need to subclass FXFormViewControllerandset up your custom back button as a leftBarButtonItem. Then add your custom controller class to the field dictionary for the field that displays it, e.g\n\n```\n- (NSDictionary *)mySubformField {\n    return @{FXFormFieldViewController: [MyFormSubclass class]};\n}\n```\n. from within your submitRegistrationForm method, get the navigation controller using self.navigationController, then call popToRootViewController on it to dismiss all the presented forms\n. If you override the setText method of the cell with your own method, do you still get the warning?\n. Fair enough. In that case it's a spurious warning. You can suppress it like this:\n\n```\n#pragma clang diagnostic push\n#pragma clang diagnostic ignored  \"-Wdeprecated-declarations\"\n- (void)setText:(NSString *)text {\n    ...\n}\n#pragma clang diagnostic pop\n```\n. There's no need to check if customLabel is nil before setting the text by the way - Objective-C is nil safe. Your setText method can just be:\n\n```\n#pragma clang diagnostic push\n#pragma clang diagnostic ignored  \"-Wdeprecated-declarations\"\n- (void)setText:(NSString *)text {\n    self.customLabel.text = text\n}\n#pragma clang diagnostic pop\n```\n. Is your customLabel outlet defined as weak? It probably shouldn't be - that recommendation only applies to outlets on view controllers, and even that is unnecessary since iOS6 because views are no longer unloaded.\n. I may have got the deprecation warning string wrong. You can find out what the actual warning you need to suppress is by right-clicking warning in left sidebar and selecting \"show in log\".\n. There is a PR that implements this already. I'm not certain whether I like it or not, but if you need it then you can use this fork until I decide what to do: https://github.com/nicklockwood/FXForms/pull/111\n. How is a \"hidden\" field different from an excluded field, e.g. one not included in the fields array, or that you've put into the excludedFields array?\n. Can you provide more information? Which iOS version was this? What was the crash - what appeared in the console, etc?\n. OK, fixed in 1.2.10\n. Yes, just set FXFormFieldTitle to a blank string @\"\"\n. You can call self.navigationController.topViewController to get the frontmost form controller.\n. Why not just set imageView.image instead of textView.leftView?\n. You can set the keyboard close button by adding the following to the field dictionary:\n\n```\n\"textField.returnKeyType\" : UIReturnKeySend\n```\n\nThe picker view doesn't have a close button.\n. Create a new class containing zip and state string properties to use as the form field, and a new cell class containing both fields. Then you'll just be mapping one form property to one cell.\n. Your custom cell would access the composite object by calling field.value and then read the subfields from it directly.\n. That isn't necessary, just set the field on your form object to be of the correct type and FXForms will infer the valueClass.\n. Ah, yes, it would. In that case you will need to specify valueClass. What crash are you seeing?\n. The key you need to set valueClass is just \"class\", are you using \"valueClass\" instead?\n. Can you paste in your whole field dictionary?\n. \"type\" shouldn't be \"option\" as that's used for bool values, also using \"options\" may confuse FXForms since it will think this is an options field where actually it's something completely custom. Maybe call it \"states\" instead.\n. I think the field.value will initially be nil. It would be up to you to create an instance of PPStateZip, either in the cell or in the DynamicForm itself.\n. If you want to send me your project, I'll take a look if you like. I think it can be done without modifying FXForms, but it's difficult to diagnose the issue remotely.\n. Hmm. I think it used to but no longer does because that crashed for CoreData objects. It will work if the custom class conforms to the FXForm protocol, which might actually make things easier.\n\nI.e. you could treat the field as a subform, but still render it using a single cell.\n. You'd just need to declare PPStateZip as conforming to < FXForm > protocol, but if it's already working for you  without doing that then don't worry about it.\n. It would still be the field.value.\n. There's no easy way to do this right now, sorry. You'll have to hack the tableView:editingStyleForRowAtIndexPath: method in FXForms.h\n. This will give you a left-aligned date:\n\n```\n@{FXFormFieldKey: @\"dateOfBirth\", FXFormFieldTitle: @\"\", @\"style\": @(UITableViewCellStyleSubtitle), FXFormFieldPlaceholder: @\"Date Of Birth\"},\n```\n\nTweaking the color of the placeholder text to match the other fields may be more challenging.\n. Well, actually, if you don't mind the date being grey after it is selected, you can set the text color like this:\n\n```\n@{FXFormFieldKey: @\"dateOfBirth\",\nFXFormFieldTitle: @\"\",\nFXFormFieldPlaceholder: @\"Date Of Birth\",\n@\"style\": @(UITableViewCellStyleSubtitle),\n@\"detailTextLabel.color\": [UIColor lightGrayColor]},\n```\n. You can always subclass FXFormDatePickerCell if you need more sophisticated customisation.\n. There's no automatic way to format currencies in iOS. Just use an NSValueTransformer to manually build the string. Or you can use a block if that's easier.\n. Fields have an optional FXFormFieldValueTransformer property, so you can supply the value transformer along with your other field configuration.\n. Yes, sorry, I was unclear. I meant that there's no way to automatically format a number with a currency symbol. You'd have to concatenate the number and symbol manually, although it would make sense to use NSNumberFormatterCurrencyStyle for the numeric part.\n. @marcelofabri ah, interesting. I didn't realise that.\n. @dformoso this isn't really an FXForms-related problem. If you can figure out how to get the effect you want with an ordinary UITextField, you can get the same effect in FXForms by creating a custom cell.\n. In Objective-C, NSInteger can't be nil. You need to set the value to NSNotFound to clear it - the default value of zero maps to the first element.\n. You could just use an options field and supply an array of NSNumbers in the desired range as the options.\n. NSInteger cannot have a value of nil, so it defaults to zero, which is the first value in your enum.\n\nThere are various solutions to this. Either use an NSNumber property instead of NSInteger, or set the value of the field to NSNotFound in the init method of your form.\n. The ISO3166 transformer is just example code, not part of the FXForms library. I haven't tested it and don't advocate re-using it in your own projects.\n. If you create a UIViewController subclass that conforms to the FXFormFieldViewController protocol, you can create a completely bespoke interface for setting a field value. In your field dictionary just add FXFormFieldViewController: MyCustomForm to use your VC instead of the default picker interface.\n\nAlternatively, I guess you could subclass FXTextFieldCell, and implement your autocomplete field as an inline control.\n. You can use FXFormFieldValueTransformer for that.\n. The reason I don't expose the options array is that the indexes/values vary depending on whether you include a placeholder or default value. For that reason, I've hidden the underlying array to avoid confusion and crashes due to mismatched indexes.\n. The newly pushed controller should inherit the configuration from the parent controller. If you want different configuration, you can supply a custom FXFormViewController subclass to use by setting the FXFormFieldViewController property of the field that displays the subform.\n. Yes, check out the DynamicFieldsExample project in the examples folder.\n. You need the string value if you are using it in a JSON file. Fair point about example usage though.\n. Um, no. Sorry. I hard-coded the cell class. I should probably fix that!\n. I'm not sure I fully understand what you mean by \"Send the selected object\"? What kind of object is it? Is it one of the values represented by a field in your form object?\n\nIf so, you can access the form from within a FXFormViewController subclass like this:\n\n```\nMyForm *form = (MyForm *)self.formController.form;\nform.someProperty = valueFromSegue;\n```\n\nThen you can set one of its properties, and then reload the table using \n\n```\n[self.formController.tableView reloadData];\n```\n\nTo see the updated value appear. Or, if the object from the segue actually is an entire form in its own right, you can just assign it to self.formController.form.\n\nIf that's not what you mean, please explain further.\n. Try calling setValuesForKeysWithDictionary: On your form object. If the keys and types match up with the properties, it should work (otherwise it will crash)\n. Are you using Swift?\n. It's not expected. Is it for every field, or just a particular type?\n. This should now be fixed in 1.2.12\n. That isn't how you use a custom cell in FXForms - I'm not sure why you thought it was :-)\n\nI can't tell exactly from the code you've given me how you're trying to use your custom cell, but take a look at the CustomButtonExample example project and hopefully that will make things clearer.\n. Sounds like a bug. I'll take a look.\n. Fixed in 1.2.11\n. Yeah, subclassing the cell is your best bet here. It should be pretty trivial - just subclass the FXFormsOptionSegmentsCell and override the - (void)layoutSubviews method . You can copy the existing code, but use a hardcoded width.\n\nThen just specify your new cell class in the form field dictionary instead of FXFormOptionSegmentsCell.\n. The template title was supposed to be used only for the \u201cAdd Item\u201d button, but was appearing inside each field. I\u2019ve fixed that in 1.2.12.\n\nOnce you upgrade to 1.2.12, if you just want a blank text field, you shouldn\u2019t need to do anything further to customize your cell - you can just use a standard FXFormTextFieldCell.\n\nThe only thing that isn't supported is making the email fields non-editable after they've been created. You might be able to rig that up using a custom cell, but I'm not exactly sure what the best way to do that would be - maybe replace the strings in your array with some kind of object that has an editable state?.\n\nNote that if a user edits any existing entries, it will call the setter on your form for the whole list, so you can apply any necessary re-validation logic. It may not be necessary for you to make them non-editable, unless it's particularly desirable for UX reasons.\n\nIf you want to apply custom styling then subclassing FXFormTextFieldCell as you were doing is the correct approach. The cell has a \u201cfield\u201d property that contains all the available state information.\n\nNick\n. It's fairly easy to add this with a custom action on the field, but yeah, it's a commonly requested feature - I'll think about adding it.\n. This looks awesome! I was intending to add something similar but haven't had the time. And yes, using the inline property makes perfect sense for this. Can you file a pull request? I can't promise I'll get to it right away, but I will eventually.\n. Set the value on the form object, and then reload the tableView (or just the relevant row) in the normal way.\n. It doesn't include a minus sign, unfortunately, otherwise that would be a good option.\n. I do use the decimal pad if you set the type to Unsigned Integer (there's no such thing as an unsigned float though).\n. Yes, but mostly because that property is rather poorly defined, and has suffered some scope creep. It really needs to be broken up into separate events.\n\nTo detect every text change, I suggest you add a KVC observer to your form field, or override the setter and have it call an action directly.\n. I don't think the \"self\" is required.\n. The tableView itself tou can just access directly, via the view controller, e.g. self.formController.tableView. IIRC though, cells are opaque by default, so setting tableview background may not do what you want.\n. How would you do it normally if you were calling the segue yourself?\n. If it's a push segue onto a navigation controller, you're probably better off using FXFormFieldViewController instead. Then you can implement the FXFormFieldViewController protocol, which adds a \"field\" property to your controller that can be used to set the field value.\n. Yeah, I don't recycle cells, and that's problematic for performance. I want to fix that, but it's not trivial to ensure that properties are properly reset.\n. It should be:\n\n```\n[self.formController registerCellClass:[MyFormTextFieldCell class] forFieldType:FXFormFieldTypeText];\n```\n\nWhich tells FXForms to use your MyFormTextFieldCell for any field of type FXFormFieldTypeText. That seems to be equivalent to the third option you tried though, so if it's not working, have you verified that self.formController is not nil inside your init method?\n. If you subclass FXFormTextFieldCell then it should handle the different keyboards, etc. automatically.\n\nYou can't get the field type in setUp, but in update you can check self.field.type.\n. There's a +heightForField: method you can override that is called whenever the row is updated.\n. I'm not sure why that wouldn't work, but take a look at how FXFormImagePickerCell works, and see if that's doing anything differently.\n\nYou might also try using Xcode's view logging features to inspect your cell and see if the imageView is being wrongly positioned or sized, or if the image property has been set correctly.\n. Brilliant! Thank you Donna :-)\n. You can add an action block or selector to the last field using FXFormFieldAction\n. @aryaxt I'm not sure I understand the question. It's included in version 1.2.13, which is the latest version on CocoaPods. It's not included in 1.2.12 because that version was released before that feature was merged.\n. You can set a default value in your form configuration for that field, e.g.\n\n```\n- (NSDictionary *)myPropertyField\n{\n    return @{FXFormFieldDefaultValue: @3}; // number equal to enum value you want to be default\n}\n```\n\nAlternatively, in the init for your form object, you can just set the default, like this:\n\n```\n- (id)init\n{\n    if ((self = [super init])) {\n        _myProperty = SOME_ENUM_VALUE;\n    }\n    return self;\n}\n```\n. @wdcurry thanks, I've updated my original answer.\n\n(ps, to indent code correctly on github, just add four spaces at the start of each line.)\n. If your View controller has a property called field of type FXFormField, it will be set automatically to the field of the cell that was clicked. You can include any data you want to pass as that field's value.\n. If you set the options value of the field yo be an array of the ids, you can use a valueTransformer to display these as human-readable names.\n\nThe country select menu in the example app demonstrates how to do this (it maps country names to codes).\n. The slider needs to set the value of it's cell.field when it changes, so if you haven't already done so, you should add this inside your custom cell:\n\n```\n[self.slider addTarget:self action:@selector(didChange)];\n\n...\n\n- (void)didChange {\n    self.field.value = @(self.slider.value);\n}\n```\n\nTo get the forms values as a dictionary, you can use KVC and say something like:\n\n```\nNSDictionary *values = [myForm dictionaryWithValuesForKeys:@[@\"field1\", @\"field2\", etc...]];\n```\n\nOr, if you follow the dynamic form example, you can create a form that stores all its values in a dictionary anyway, which you can access directly.\n. Yes, it's due to reuse. Just as you have to set the cell.field.value when you update the slider, you also have to set the cell.slider value when the field changes.\n\nOverride setField: on the cell, like this:\n\n```\n- (void)setField:(FXFormField)field\n{\n    super.field = field;\n    self.slider.value = field,value.floatValue;\n}\n```\n\n(You can get rid of the seperate float property)\n. You should be able to subclass FXFormBaseCell and save yourself some hassle, but if you're just using UITableViewCell as the base, change it to:\n\n```\n@synthesize field = _field; // field is part of FXFormFieldCell protocol. This creates ivar and accessors\n\n- (void)setField:(FXFormField)field\n{\n    _field = field;\n    self.slider.value = field,value.floatValue;\n}\n```\n. Analyzer warnings generally shouldn't be ignored. I'll look into it.\n. Init a new form object and assign it to the form property, then call reloadData on the tableView.\n. No, that just reloads the same form object. To reset the form you need to also update the form object first, like this:\n\n```\nself.form = MyForm()\nself.tableView.reloadData()\n```\n. \ud83d\udc4d\ud83c\udffd\n. That doesn't make a whole lot of sense. self.fields is functionally equivalent to [self fields]. Can you explain what effect you believe this change had on the behavior?\n. But `self.fields` doesn't access the instance variable. It calls the `- (NSMutableArray *)fields` method. To access the instance variable, you'd have to write `self->_fields`.\n\nTry putting a breakpoint inside `- (NSMutableArray *)fields` and you can verify that it's called when you access `self.fields`.\n\nI think perhaps the issue that you're referring to is \"Argument to 'NSMutableArray' method 'addObject;:' cannot be nil\"? In which case the issue it's complaining about is that the `field` value being added to the array is nil, not the array itself.\n\nI'll fix this in the next update.\n. Hmm, I can't actually replicate a clang warning on the line you fixed. The warning I'm seeing is on the line a few below that: `[self.fields addObject:field]`\n. I think maybe the change above just confused the analyzer so that it couldn't parse the logic below anymore \u00af_(\u30c4)_/\u00af \n. I will continue to support it, but I can't commit to any specific features or timelines.\n\nI've just submitted version 1.2.13 which works on Xcode 7.0 / iOS 9.\n\nMost issues seem minor. I'll review them as and when I can.\n. Therr are two simple options:\n\n1) add headers to separate the table into groups by adding FXFormFieldHeader values (see the registration form example)\n\n2) split the form into nested subforms, which you can do by splitting your form object up into several sub objects (again, see the registration form)\n\nImplementing a search filter is possible, but there's no support built in. You'd need to override the fields method of your form and return a filtered list based on a search string.\n. You could use a hex string and convert it using my ColorUtils library.\n. Yes, just use FXFormFieldTypeDateTime instead.\n. Call tableView.reloadData()\n. Make it a readwrite @property of your form object, then you can set it.\n. No, it will automatically use localised versions of your field titles if you include them in your Localizable.strings file.\n. Default values don't work that way. Default values are the value used when a field is reset to null. BOOL values can't be null, so they can't be reset.\n\nTo set the value to YES by default, just set self.rememberMe = YES in the init method of your form object.\n. You'd need to create a custom cell type backed by a custom class with two fields: NSString *name and BOOL selected. Then you could create a template form consisting of fields of that type.\n. I'm not sure what you were expecting `@\"stepper.backgroundColor\": [UIColor grayColor]` to do, but it looks to me like it's working as expected.\n\nIf you were trying to just change the color of the buttons and not the background, that's outside the scope of FXForms since I'm just using the standard control and not doing anything special with it, but here are some ideas:\n\nhttp://stackoverflow.com/questions/8762512/change-appearance-of-uistepper\n. The FieldSelectorViewController should have a field property of type FXFormField, like this:\n\n```\n@property (nonatomic, strong) FXFormField *field;\n```\n\nThis will be automatically populated by the parent form (your DynamicForm class) when the Reason field is selected.\n\nTo update the value from within the FieldSelectorViewController, just set the value of the field, like this:\n\n```\nself.field.value = @\"New Value\";\n```\n\nAnd that should then update the value of the Reason property in the DynamicForm. To refresh the display of the field in the FieldSelectorViewController you may also need to call\n\n```\n[self.tableView reloadData];\n```\n. I think I'm going to have to see more of the code to debug this.\n. @\"textField.textColor\"\n. This works fine in version 1.2.14, which was released on November 2nd. It may be that you need to upgrade your Xcode version.\n. @plandem, I was oversimplifying. You don't need to use the latest version of Xcode, but you do need to use the latest iOS SDK.\n\nThe reason that FXForms is giving you an error is because you are trying to build using the iOS8 SDK, and the `cellLayoutMarginsFollowReadableWidth` symbol doesn't exist in that SDK version.\n\nIf you build using the iOS9 SDK instead, but set the deployment target as iOS8 or earlier, FXForms will still work fine on iOS8 because it checks for the existence of that feature at runtime.\n\nYou don't need to use the iOS8 SDK to support iOS8, but if you choose to do so for some reason, you'll need to either use an old version of FXForms, or modify the new version to compile using the iOS8 SDK.\n. Which writeup are you referring to?\n. In your form class, add the following method:\n\n```\n- (NSDictionary *)<nameOfYourProperty>Field {\n  return @{FXFormFieldType: FXFormFieldTypeTime};\n}\n```\n. (You don't have to declare it in the `@interface`, only in the `@implementation`)\n. Try\n\n```\n- (NSDictionary *)<nameOfYourProperty>Field {\n  return @{FXFormFieldType: FXFormFieldTypeTime, FXFormFieldTitle: @\"\"};\n}\n```\n. Er\u2026 that's curious. Maybe an issue with the locale being different for the picker than the label?\n. Swift enums are very different from C enums, and I've not tested FXForms with them, so I can't be sure they can be used in the same way as in my example code.\n\nWith that said, did you try:\n\n```\nenum Gender : Int {\n  case male\n  case female\n  case undetermined\n}\n```\n\nPerhaps that will work?\n. I'm not sure I understand, but have you looked at the Dynamic Forms example? It shows how to build forms from json instead of a fixed structure.\n. Oh I see. There's no built-in control for that yet. You could do it with a template field, but you'd need to create a custom field type that includes both a text input and a tick for selection.\n. It might be easier to go the route of having an \"other, please specify\" option in your enum, and then having an optional text field that is shown only when \"other\" is selected.\n\nYou could also just have a separate text field for entering a new value which then modifies the source array for the selection in your data model, and reloads the form.\n. You need to nest your form view controller inside a navigation controller in order to push another controller.\n. Makes sense - I'll add that.\n. OK, this is fixed in beta 5.\n. can you paste the form properties you are using? I'll try to reproduce it.\n. Fixed in beta 5.\n. Was there a specific feature you'd like to see demoed?\n. The simplest way is:\n\nSet the base class of your custom view controller to be FXFormViewController instead of UIViewController.\n\nIn the storyboard, you should now be able to bind your tableView to the tableView outlet of your custom view controller.\n\nFinally, in the viewDidLoad or awakeFromNib method of your view controller, set self.formController.form = [your form]\n\nYou may need to call [self.tableView reloadData] after setting the form property.\n. Ah yes, sorry I missed this part when I skimmed the code:\n\n```\nif (self.valueTransformer) {\n    return [self.valueTransformer transformedValue:[self.value fieldDescription]];\n}\n```\n. That's exactly what it does. \n. Yeah, I thought it was better to localise the title-cased version because that follows the convention of using the human-readable english text as the key in the strings file.\n. In this case you'd just write \"options\": [NSLocalizedString(\"option1\", nil), NSLocalizedString(\"option2, nil)\"]\n. If that's in a JSON file, I guess you'd probably just make the JSON into a localised resource and have a different JSON for each locale.\n. You could use a value transformer to convert the unlocalized version to the localized one fir display purposes, then the value would be unaffected.\n. Yep, this is planned for the next release.\n. No, but I'll probably put a beta out quite soon.\n. It's probably simplest if I just do this. It won't be too long.\n. OK, this is implemented.\n. A PR would be great, thanks!\n. This is now merged.\n. @Ashton-W that makes sense. I'm considering adding a phone number type, but I think this might be better implemented as part of some kind of generic string formatting system.\n. OK, I think this is addressed by the new phone number field. Let me know if not.\n. Yes, you can do this by subclassing FXFormViewController, then in the viewDidAppear, do this:\n\n```\n- (void)viewDidAppear:(BOOL)animated\n{\n    [super viewDidAppear:animated];\n\n    //get first field\n    id <FXFormFieldCell> cell = (id <FXFormFieldCell>)[self.tableView cellForRowAtIndexPath:[NSIndexPath indexPathForRow:0 inSection:0]];\n\n    //select field (assuming it's a text field\n    if ([cell respondsToSelector:@selector(textField)])\n    {\n        [((FXFormTextFieldCell *)cell).textField becomeFirstResponder];\n    }\n}\n```\n. How very strange. That's exactly the approach I would have recommended, but it seems that for some reason, UITextField is not KVC-compliant for that key. I'll see if I can work out why.\n. I've put in a temporary fix in 1.0.2 that treats UITextInputTraits as a special case. I'll try to come up with something better for 1.1.\n. Thanks for yet another great PR :-)\n\nI've decided that int the interests of avoiding duplication, as much as possible the FXFormFieldType should relate only to the data type, not the way in which it is displayed.\n\nI think that in this case it would be sufficient simply to define the FXFormOptionPickerCell, and then specify that the field should use this cell class using the FXFormFieldCell property.\n\nIf you'd like to make that change, I'll merge this PR. Otherwise, I can make the change myself if you prefer.\n. Oops, sorry. I merged the PRs in the wrong order, and now can't merge this. If you wouldn't mind fixing the conflicts, I'll merge yours next.\n. The problem is that the type of Cell I'm using for buttons is\n\nUITableViewCellStyleValue1,     // Left aligned label on left and right aligned label on right with blue text (Used in Settings)\n\nAs far as I can tell, there's no way to center the text on this type of cell. I'm going to see if I can provide a way to fix this without subclassing FXFormBaseCell, however, if you are willing to subclass FXFormBaseCell you can just do this:\n\n```\n@interface MyFormButtonCell : FXFormBaseCell\n\n@end\n\n@implementation MyFormButtonCell\n\n- (id)init\n{\n    return [self initWithStyle:UITableViewCellStyleDefault reuseIdentifier:nil];\n}\n\n@end \n```\n\nThen if your field description, pass\n\n```\n{\n    FXFormFieldCell: [MyFormButtonCell class]\n    @\"textLabel.textAlignment\": @(NSTextAlignmentCenter)\n}\n```\n\nAnd it should work\n. I've added an FXFormFieldPlaceholder value that can be used in the same way as this.\n\nIf there's anything that FXFormFieldNilOption does that FXFormFieldPlaceholder doesn't, let me know, otherwise I think we can close this.\n. Hmm, ok. I'm not crazy about the idea of having both, but I'll keep thinking about it.\n. It's partly the name and partly the extra complexity. I'm hoping the same requirement can be solved another way, e.g. by using NSNull values or something, but i'm drawing a blank right now.\n. Yes, exactly. The valueTransformer feature added in 1.1 would let you format the NSNull however you want, but it's certainly not as elegant as the solution you've suggested from an end-user implementation point of view, especially if all the other values don't need transforming.\n. I've expanded the capabilities of the FXFormFieldPlaceholder to include the additional behaviour that the FXFormFieldNilOption had. I think this is a reasonable approach. Let me know if this solves your requirement.\n. Yeah, I know exactly what you mean, and I had the same thought.\n\nBut the problem with having two different properties is that they also overlap; for example, should a placeholder image in the FXFormImageCell be a nilOption or a placeholder value?\n\nI think perhaps the mistake here is that I use the placeholder for the detail label value in fields that have a disclosure arrow - maybe I just shouldn't do that.\n\nFortunately, it's fairly easy to override that, so I think I can live with it for now.\n\nThanks for your work on this, and the thoughtful feedback. I'm sorry I didn't merge your PR, but hopefully you don't feel the effort was wasted.\n\nI'll close this ticket now, but feel free to reopen it if you think of anything else.\n. Looks good, thanks.\n. If you change a form field value, you just need to call reloadData on the tableView, or reloadRowAtIndexPath if you just want to reload that cell.\n\nIf your change affects the field layout, you need to call the formController.form setter first, and then call reloadData on the tableView.\n\nI appreciate that this is a bit clunky - if you have a better suggestion, I'd love to hear it.\n. Ah, I see. The problem is that it would be a violation of MVC principles to have the form update the view directly.\n\nThe best way to handle this is either to set up a KVO observer for your form fields from the view controller, or have your form broadcast an NSNotification whenever it changes a field, which could then be observed by the view controller. \n. cool - remember to remove the observer again in your dealloc ;-)\n. It's listed here: https://github.com/nicklockwood/FXForms/blob/master/FXForms/FXForms.h\n\nDo you have an old copy of FXForms? Note that the CocoaPods version is only at v 1.0.2 and this feature was added in 1.1 beta 4.\n. You don't have to, you can just point your pod file directly at the github repo if you want to use the latest build.\n. I don't have any particularly elegant solution to these types of problem right now, but it should be possible to implement as follows:\n\nFor any control that modifies the forms fields, you can either 1) add an action to the field that will be called on the view controller and tell it to reload the form, or a subset of the form (the action can be either a block or a selector to call on the view controller), or 2) add a KVO observer on the form itself that does the same.\n\nThe fields method of the form is called whenever the formController.forms property is set, so as an example, your switch action could do this:\n\n```\n- (void)allDaySwitchAction\n{\n    //reload form fields\n    self.formController.form = self.formController.form;\n\n    //reload table\n    [self.formController.tableView reloadData];\n}\n```\n\nThen, in the fields method of your form, return a different configuration depending on the value of the allDay property.\n\nIf you can think of a better way to do this, please let me know.\n. Probably a silly question, but have you checked that your callback is firing on the main thread?\n. This is exactly the scenario that I added the new FXFormFieldViewController property for in the 1.1 beta. This feature is not completely finished yet, but if you don't mind being a guinea pig, here's how it works :-)\n\nInstead of a property called cityViewController of type UIViewController, as you have now, make a property called city or type string (presumably it's a string) on your form model. Modify your cityViewController to implement the FXFormFieldViewController protocol, which basically just means adding a field property to it.\n\nNow, in the config dictionary for your city property, return this:\n\n```\n@{ FXFormFieldKey : @\"city\", FXFormFieldViewController : @\"CityViewController\" },\n```\n\nThat will tell FXForms that the city property should not be displayed as a textfield, but should instead display your custom view controller and pass it the field object. Your view controller can then set the field.value directly, which will set the city property on the original form.\n\nHope that makes sense.\n. Yes the FXFormFieldViewController value should be the class name of your view controller, not the name of a key on the form.\n\nYou no longer need to haves the searchCityViewController property on your form itself - using the FXFormFieldViewController on the selectedCity property replaces having the view controller be a property in its own right.\n. Hmm, ok we'll that looks correct to me, so it may be a bug. I'll take a look.\n. I've pushed an update that should fix your issues. I've included an example project that demonstrates using a custom controller for a field.\n. Your view controller has to conform to the <FXFormFieldViewController) protocol, so yes, the field has to be called field. Either redeclaring the field property in your form controller header or adding a manual synthesize is sufficient (you don't have to do both).\n. As Broich says, this is the standard behaviour for table views. \n\nWhilst it would theoretically be possible for me to override it, part of the point of creating your own form viewcontroller is so that you can deviate the FXFormViewController's behaviours, not have them imposed on you anyway.\n\nFWIW, if you look at the the FXFormViewController's source, you can see how I handle this there (I use [tableView selectRowAtIndexPath:nil animated:YES] on viewDidAppear IIRC)\n. You're right, the documentation could be clearer on that point. I think the behaviour is probably correct as is, but I'll leave this open until I've amended the docs.\n. I've updated the documentation to make this clearer\n. I'm not able to reproduce this either.\n. I think the best option in this case is to create the field conditionally, based on whether mail accounts are available (i.e. in the fields method, make that property conditional) or make the field for that controller be a button that displays the controller using its action method instead of being a property of type MFMailComposeViewController.\n. I wonder if a phone pad is the correct input for a phone number in practice. I think the phone pad is probably just suited for dialling interfaces rather than phone number input. Maybe it should be the alphanumeric keyboard instead?\n. Huh, so it is. Fair enough then.\n. You read it right; this was a bug introduced in 1.1. Fixed in 1.1.1.\n. That is true. It's by design, but I can see that it's probably not what you want in this case.\n\nIf you want to trigger an action when the value is set, you can do this by overriding the setter method for that value in your form.\n\nI'll think about whether there's a better way to implement this.\n. I made a few changes to the interface and extended to support controllers too, but this is now merged.\n. Your solution for 1) will work, although you can actually just call becomeFirstResponder directly on the cell and it will call becomeFirstResponder on the textField for you.\n\nI'm not sure what you mean by default text value. If you mean placeholder text, then use the FXFormFieldPlaceholder value. If you mean you actually want the form to set the text to a default value if the string is nil, you can do this in your form object with a \"lazy getter\" for the field value, e.g.\n\n```\n@implementation MyForm\n\n- (NSString *)myField\n{\n    if (_myField == nil)\n    {\n        return @\"default value\";\n    }\n    return _myField;\n}\n\n@end\n```\n. You can set it with the @\"detailTextLabel.font\" keypath.\n. Hmm. It's hard to be certain, but I think the issue may be that the form object itself is an NSNull instance as opposed to the state property being nil.\n\nFXForms handles nil pointers just fine (in accordance with standard objective C practice), but It may well not cope with receiving an NSNull in place of a form.\n\nCan you investigate further and find out if this is the case? And if so, is this expected behaviour for CoreData (in which case FXForms should probably handle it gracefully) or the symptom of a bug in your app?\n. I can't see anything obvious that's wrong with it. Can you send me your project and I'll investigate?\n\nYou can email it to support at charcoaldesign dot co dot uk.\n. The problem seems to be that When FXForms encounters a nil form object, it instantiates it using alloc/init, which is not the correct way to create an NSManagedObject subclass.\n\nI'll see if I can find a better approach for this. It would be relatively easy to make a special case for Core Data objects, but it might be better to have a more flexible solution.\n. That might be easier for your case, although you'd have to override valueForUndefinedKey: and setValue:forUndefinedKey: on your form wrapper and pass those values to your core data model property.\n\nFXForms doesn't have any concept of edit mode at the moment - it's assumed that fields will always be in edit mode. Creating new objects is implicit (if you click on a nil field in your form, it will create a new object for it), which is why you're having the issue with null core data entities being initialised with the wrong constructor.\n. If you can explain how you'd like your form interface to work, I can use this as the basis for defining new functionality. Lack of real-world use cases (aka dogfooding) is always a problem when designing features for a library.\n. I've made an update that prevents FXForms trying to instantiate NSManagedObjects if they are null, which should hopefully fix the crashing.\n\nThe scenario you've described should work fine if you use a custom form controller and detect if the field value is nil, then show a new or edit button accordingly.\n\nLet me know if you run into any more problems (or if the original problem has not been solved).\n. Action methods only propagate up the responder chain, so if the delegate isn't a super view or parent controller of the form view controller it won't work.\n\nIt might be simpler in this case to use a block for your action instead of a selector.\n. The : in the selector is optional, just as it is with IBActions. But if you include the : in the selector, you have to include a parameter in your method as well. If you don't need the sender, you don't need the colon.\n. If you're using an action block to load a view controller, you'll need some way to get a reference to the controller from within your form, which is likely to be kind of horrible from a structural point of view.\n\nProbably your best bet is to post an NSNotification in your form that is observed by your view controller and triggers the action.\n. Yes, you need an FXFormFieldKey for virtual fields, otherwise valueForKey:/setValue:forKey: won't be called on your form object, and there will be no way to get/set the value.\n\nIf the field doesn't have a value (e.g. if it's a button or a custom cell with hard-coded content) then you don't need a key.\n. If you look in the BasicExample project there is a Submit button that shows how this is done.\n. Yes, just create a custom cell class containing a button, and use that with the FXForFieldCell property.\n. You can implement the button action as follows:\n\n```\n- (void)buttonAction:(id)sender\n{\n    if (self.field.action) self.field.action(self);\n}\n```\n\nThis will then call the standard action selector or block for your field, so you can implement the button action in the same way as shown in the BasicExample project.\n. BTW, If you've added this cell inside FXForms, I suggest you define it in a separate class inside your own project. Instead of overloading the private setUp method, you can just use the normal init method for UITableViewCell, like this:\n\n```\n- (id)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString *)reuseIdentifier\n{\n    if ((self = [super initWithStyle:style reuseIdentifier:reuseIdentifier]))\n    {\n        //do your setup\n    }\n    return self;\n}\n```\n. FYI, I've added an example for how to do this to the examples folder. My example uses a nib, but you can do it with code if you prefer.\n. That should work fine. I think you must have inadvertently changed the name of the method or the selector string (if that's a direct copy of the error you got, it looks like the colon is missing from the end of the selector name in the form field configuration).\n. In answer to your first question, about customising buttons, if you make the button a property of your cell, you can customise its properties using keypaths, the same way you can set the textLabel properties, etc.\n. It's not standard behaviour for cells to deselect themselves. I was attempting to follow the standard iOS pattern.\n. Dd you try adding `@\"textField.keyboardType\": @(UIKeyboardTypeDecimalPad)` to your field dictionary?\n. UITextView doesn't implement any placeholder functionality. I'll have to build something custom. I'll add this to the list for v1.2.\n. I've added this in 1.1.4.\n. The return value of the fields / extraFields method can vary at runtime. You could have an isNewInstance (or whatever) property on the form that toggles the inclusion of the delete button in the fields array.\n. If you come up with a better approach, or you can think of a way you'd like it to work, let me know.\n\nSomething I'm considering for a future update is to allow fields to be customised via the FXFormControllerDelegate, rather than  methods on the form. Would that work better for you?\n. Yes, I'm aware of this issue. It's on the todo list.\n. 1. No, not currently. I'm investigating a solution for this for the next release.\n2. I'm not 100% sure this is possible. You would need to create a cell subclass that can display a custom data type that encapsulates both the image and text, and register that cell as the default for FXFormFieldTypeOption, but I can't guarantee that you won't need to make additional changes to the library to make this work. I'll investigate.\n. if you implement the methods -valueForUndefinedKey: and -setValue:forUndefinedKey: on your form object, you can use these to set and get the values from your database. \n. The setValue:forUndefinedKey: will automatically be called on your form object with the value of the text field when the textfield resigns first responder. If the user presses submit while the keyboard is still visible, the value may not have been updated yet, so it's a good idea to dismiss the keyboard in your submit button action before saving the data in your database.\n. FXFormTextFieldCell adjusts the textfield frame in layoutSubviews, so it's probably positioning the left-hand edge back underneath your image.\n\nTry this:\n\n```\n- (void)layoutSubviews\n{\n    [super layoutSubviews]\n    self.textField.frame = CGRectMake(58, 10, 254, 30);\n}\n```\n\nIn general though, this is a bit fragile because it makes assumptions about how FXFormTextFieldCell works that may change in future. It would probably be better if I called the setUp method from within awakeFromNib so that you don't have to create it yourself.\n\nI'll look at changing that in the next version.\n. For now, it might be easier to subclass FXFormBaseCell instead, and copy the FXFormTextFieldCell implementation into your own class. I'll look at a way to make this easier in the next release.\n. Mean you give an example? It should be possible to implement the text field cell using only public properties of FXFormField and FXFormBaseCell.\n. Oh, I see. Yeah, you can't copy it exactly, but you can just put in hard-coded values for those - the functions are only because I need to support multiple OS-version targets without warnings.\n. This is now possible. Also, see the note in the README about the distinction between FXFormBaseCell and FXFormDefaultCell.\n. It's probably a stupid question, but are you sure the address value of your form isn't nil?\n. Ah, yeah. Sorry, didn't think of that explanation. I should probably make it resign responder automatically when you press a button.\n. I don't think there's any way to do this other than manually resigning the responder.\n. It should be possible to do this with a custom action method or cell.\n. You can call [navigationController popViewControllerAnimated:] - would that work?\n. Yeah, I think you'd have to do it like that, which I guess is a little awkward. Let me think about this a bit more.\n. This should be fixed now in 1.1.4\n. This should be fixed now in 1.1.4\n. This isn't a bug, but I can see why it's confusing.\n\nThe values returned by the form has nothing to do with the enum, it's just the index of the option you select. Enums have no runtime representation - they're just a convenient way of representing constants, but there's no way for FXForms to know what values you've used.\n\nIf you want non-zero-based, non-sequential option values, you can specify that actual numbers as your FXFormFieldOptions and then use a valueTransformer to convert them to strings, like this:\n\n```\n{FXFormFieldOptions: @[@(GenderMale), @(GenderFemale), @(GenderOther)],\n FXFormFieldValueTransformer: ^(id input) {\n        return @{@(GenderMale): @\"Male\",\n                       @(GenderFemale): @\"Female\",\n                       @(GenderOther): @\"Other\"}[input];\n }};\n```\n. Nothing yet, as there are a few other issues to tackle first. If you have any suggestions though, I'd be interested to hear them.\n\nIt seems like I should probably try to tie into the KVC model validation mechanism used by Core Data, but it's not an area I'm very familiar with.\n. This is something I'm planning for the next version, but I haven't started work on it yet.\n\nThe idea would be that you'd have an FXFormFieldTemplate attribute that would describe the properties of each field, and then the field would be represented as a section with the ability to add/remove and reorder items.\n. Now implemented in 1.2 beta 2\n. I've been considering ways to make this easier, but in the meantime I'll add an example of how to do this when I get a chance.\n. @mrs1987 no, you don't need to do that. You just need to return different options in your fields array based on the current values of the form, and reload the form whenever a value changes that would affect the fields structure.\n\nIf your options are dynamic, it probably doesn't make sense to use an enum for the values - just use an integer, or the actual option value type (e.g NSString).\n. @mrs1987 Looking at your specific problem, I think here's how you should solve it:\n\nIn your form object:\n\n```\n@implementation ProductSelectionForm\n\n- (NSDictionary *)productList\n{\n    return @{FXFormFieldOptions: @[@\"Juice\", @\"Water\", @\"Coffee\"],\n             FXFormFieldAction: @\"productListChanged\"};\n}\n\n- (NSDictionary *)productOptionsField\n{\n    NSMutableDictionary *details = [NSMutableDictionary dictionary];\n    details[FXFormFieldOptions] = @[@\"Option1\", @\"Option2\", @\"Option3\"];\n    if (self.productList == Coffee)\n    {\n        //only allow single-selection\n        return @{FXFormFieldType: FXFormFieldTypeInteger}\n    }\n    else\n    {\n        //allow multi-selection\n        return @{FXFormFieldType: FXFormFieldTypeBitfield}\n    }\n    return details;\n}  \n\n@end\n```\n\nAnd in your view controller:\n\n```\n@implementation ProductSelectionFormViewController\n\n- (void)productListChanged\n{\n    self.formController.form = self.productSelectionForm;\n    [self.tableView reloadData];\n}\n\n@end\n```\n\nHope that makes sense.\n\nNote, this will only work if you have 3 options in your productOptions field (as you do in your example). If you have 4 options, option 4 would have an enum value of 4 when it's in bitfield mode and 3 when it's in single-selection mode so it wouldn't quite work unless a different approach is used.\n. I've included a dependent fields example in the latest release, including a couple of fixes that are required to make it work as expected.\n. It might be better to add an action to the limitStorageSize field instead of reloading the table from within the setter.\n\nI'm not sure what's causing the crash, but the use of manual retain/release means it could be a lot of subtle things.\n. This is controlled by the value set in the form object. It should be working, but if not let me know.\n. You'd have a property called \"province\" on your form object that is an NSString, and if you set its value to \"B\" then option \"B\" in the picker should automatically be selected when the form is displayed.\n. If you mean helper text, you can use the FXFormFieldPlaceholder value. If you mean an actual default value, just set the default values in the init method of your form object, as you would for any ordinary object.\n. Try this instead:\n\n@\"detailTextLabel.font\": kFontNormal(14)};\n. Yes, this is actually the documented approach for customising cells.\n. Looks very cool! It will take a little while to review though I'm afraid :-)\n. Yeah, I did intend FXFormFieldTemplate to work a bit differently, but I'll see if your approach makes more sense.\n. Sorry for the much overdue response to this. I've now added basic support for templates collection fields. There is no doubt a lot more to do (e.g. setting maximum item count), but hopefully this meets at least some of your requirements.\n\nI'm sorry that I didn't end up using your approach in the end, but hopefully you'll agree that the template system I've used is quite flexible and intuitive.\n\nIf there's anything urgent missing from this solution, let me know. I would also certainly be interested in incorporating any additional functionality you developed, such as the key/value cell. \n. Sorry for not responding sooner - I didn't think there was much point adding Travis until I'd actually written some tests.\n\nI've now added Travis support, including some tests!\n. Hmm\u2026 the lack of support for negative numbers does seem like a bit of a dealbreaker.\n. You can style almost any property of the cell by adding properties with the correct keypath in your field configuration dictionary. Eg. to change the font of the cell title, use\n\n@\"textLabel.font\"\n\nas the key.\n. I just tried it and the only leak I saw was 64KB leaked by the UIImagePickerController (which seems to be an Apple bug).\n. OK, I've taken a look. It's not actually a retain cycle. The problems seems to be that UITableView caches all created cells up to a certain maximum, so because I'm not recycling them the tableview is storing a large pool of useless objects.\n\nThis isn't a permanent leak. If you dismiss the view controller then the memory is reclaimed, and if you reload the tableview enough times, eventually it will start releasing cells once it reaches its internal cache limit.\n\nIt's not ideal though. I'll look at a better strategy in the next update that lets it recycle the cells. It occurs to me that using the field key as the identifier might work, although it may cause problems for forms that modify fields dynamically.\n. Indeed. I don't really want to add the cognitive load of an extra key though. I suppose I could make the key field mandatory, or create a hash for each field based on _all_ the properties of the field dictionary.\n. Maybe something like key ?: title + cellClass is sufficient. It's hard to be certain how people are using them.\n. Why did you close the ticket? Found a workaround?\n. I've implemented a hybrid between your two solutions. Thanks!\n. You need to reassign the formController.form _and_ then reload the tableView in order to update a field.\n. It's working for me in the BasicExample project. Can you clarify what you mean by showing an incorrect value?\n\n(Note: it was broken in an earlier release, so make sure you're using 1.1.6 or later).\n. Yes. The valueTransformer property is usually only needed if the bitmask values aren't sequential.\n. I've added this in the latest beta\n. There is now a \"phone\" field type that uses the phone pad.\n. You can add a custom action block or selector to the last field in the form.\n. This should now be fixed.\n. Sorry for the delay - just waiting until I get a chunk of time to review this and start work on the next big update.\n. I think this is an issue with UITextField in general, rather than a problem with FXForms.\n. In that case, I guess you can fix it by left-aligning the textfield, which you can do by adding the following to your field dictionary:\n\n```\n- (NSDictionary *)myField {\n    return @{@\"textField.textAlignment\", @(NSTextAlignmentLeft)};\n}\n```\n. Currently there's no way to enforce this other than to check when the form is submitted and display an alert telling the user to select fewer options. \n. Ah, good point.\n. I've added support for reverse transforms in the latest beta.\n. I'm OK with this idea, but there are a few problems with the implementation that's stopping me from merging it as it stands:\n\n1) It should be optional - the way this is implemented means that all form fields will get this feature. No Apple forms actually use this toolbar approach - it's used exclusively in web-based forms in Safari, so really it's kind of nonstandard, which means it's not something I would want to force on everyone.\n\nI need to think of a good way to expose an option to enabled/disable this feature. I don't currently have a mechanism for this kind of from-wide configuration, and I want to add it in a way that will scale for other features\n\n2) This PR declares a couple of private Apple UI constants, for reasons that aren't entirely clear to me. This seems fragile and possibly risks rejection if that gets flagged as private API usage.\n. This is implemented as of beta 10.\n. You can supply your own UIViewController class using the FXFormFieldViewController key. If you create a subclass of FXFormViewController and set its title in the viewDidLoad method, then supply that class as the FXFormFieldViewController for your field, it should work.\n. I agree, it's not very convenient.\n\nNow that I think about it, an easier approach would  be to use the FXFormFieldTitle key to specify your view controller's title, and then override the title displayed in the cell using \"textLabel.text\".\n. It depends what you mean by \"change\".\n\nIf you want to push another form onto the navigation controller, you can just push that as you would with any normal view controller.\n\nIf you want to load a different form in the sane controller, just set your new form object on your formController, then call reloadData on the tableView.\n. This is expected behaviour (it's how any ordinary textfield/button would work in iOS).\n\nYou can fix it by resigning the first responder in your button action.\n\nI can make it so that the responder is resigned automatically when you press a button cell in the form, and perhaps I should, but I'm concerned that would just be masking the issue - for example, if you pressed a button outside of the form, you'd still have the same issue.\n\nAnother option would be to update the form values live as you edit, but the problem with that is that the field action would either have to be called after every key press, or you might have a situation where the value changes but the action is never called.\n\nThoughts?\n. That isn't necessary - you can resign the first responder just by calling [tableView endEditing:YES];\n. This is fixed in beta 3\n. Yes, you can add and remove or modify fields dynamically. Have a look at the dependent fields example for how to do this.\n. To make the value appear, you need to ensure that the value in the dynamic form dictionary is an NSNumber with value of zero, not nil.\n. They would have been, but unfortunately, neither of those pads support negative numbers.\n. I was considering adding FXFormTypeUnsignedInteger and doing that. That also has the benefit that I can detect that type automatically from the property.\n. I've added a FXFormFieldTypeUnsigned type that uses a number pad by default. This type will automatically be used for properties of type NSUInteger, or equivalent.\n. I like this idea a lot, but it seems very hard to generalise (i.e. to make it work without dictating the field keys or types for the form).\n\nThe problem with using a dictionary is that its unordered, which makes it hard to use with templates fields (I currently only support ordered collections for this reason).\n\nOne option would be to introduce a concrete FXForm class called something like FXKeyValueForm that contains hard-coded key and value fields of the correct type and is designed to work with the FXFormKeyValueCell.\n\nAnother option would be to make FXKeyValueForm a protocol, but then the developer would have to do quite a lot of work to set up such a form (perhaps it should be both a protocol AND a class, to provide maximum flexibility and minimum effort).\n. The form always knows (or guesses) the class of the collection values based on the FXFormFieldClass key in the template, so that shouldn't be a problem. Instantiating the value automatically is still a problem though, without having an equivalent to your newInstanceFor<FieldName>.\n. Sorry this is taking a while to fix. It turns out that handling nil values in a templates form is incredibly complicated, given that nil may actually be a legitimate value (e.g. if the field is multiple choice with a placeholder value).\n\nI think your approach of having the form instantiate and cleanup objects makes sense, but I'm going to tackle making nil values work correctly first.\n. OK, I believe I've fixed all the crashes.\n. Actually I was already thinking along the same lines. If the FXFormControllerDelegate protocol replicated the methods available on the FXForm protocol then it would be possible to use existing objects as form models without having to subclass them.\n. This is fixed in latest beta.\n. If you just leave the view controller in our storyboard empty, and set up the code for the controller the same way as it is done in the basic example, you shouldn't have to do anything else.\n. (That's assuming you set the superclass of your view controller to be FXFormViewController, as it is in the example)\n. I'll see if I can rustle up an example tomorrow.\n. OK, I've added a storyboard example, and also included some new features to make using storyboards easier, such as support for UIStoryboardSegues\n. Despite the reference to arm64 in the error, FXForms works fine on arm64 when using Objective-C, so I think it's unlikely that the architecture has anything to do with it. Hopefully just a beta bug in the Swift compiler, but I'll look into it.\n\nAs a side-note, it's nice to see FXForms still works well in Swift - I wasn't sure if the automatic property introspection would function correctly, since Swift doesn't have the same kind of runtime support - but I guess as long as you are subclassing NSObject for your form objects then declared properties are still inspectable?\n. Try importing the FXForms.h/m files into your project directly. They don't have any dependencies or unusual compiler requirements.\n. Yep, I like that idea.\n. That's odd - I thought I fixed this in the latest beta.\n. If you are using CocoaPods, try linking directly against the podspec in this repo instead of using the public spec. I've added quite a lot of stuff in the 1.2 beta that isn't in the most recent stable release. \n. Problem 1 is a design issue. If you have an index-based options field, and you select an option that isn't in the list (\"None\") then the index is set to NSNotFound (2147483648). Arguably it should be nil if the type is NSNumber and not NSInteger, but for consistency it currently uses NSNotFound for both.\n\nProblem 2 is not a bug. The default value of NSNumber is nil, which is treated as \"no value\". The default value of an NSInteger is 0, so it matches index zero in the list (the first item). You have to set it to NSNotFound in your init method if you want no item to be selected.\n\nProblem 3 sounds like a genuine bug. I'll take a look.\n. OK, in the latest update, options values of type NSNumber should be nil if the value is out of range (it will still be NSNotFound for NSInteger fields). That should fix Problem 1.\n\nI couldn't reproduce the crash mentioned in Problem 2, let me know if you're still seeing that. Option types of NSInteger will still default to option 1 though, as that's by design.\n\nI couldn't reproduce the bug in Problem 3, perhaps that was fixed by one of the other changes?\n. Sorry, the NSUnknownKeyException was an unrelated bug introduced in the last update, now fixed.\n\nStill can't see Problem 3 though - can you paste in the complete source for your form object (or whatever subset is needed to reproduce this problem)?\n. OK, I figured out what the problem with #3 was. Fixed in latest beta.\n. Sorry, that was an incomplete refactoring job on my part. Your fix is valid for the old way indexing was handled, but the new way avoids a lot of code duplication. Now fixed.\n. Whoops, sorry about that. Fixed.\n. Actually that's not quite right. You set the default value by just setting the property in your form object (e.g in init). Otherwise all values default to nil, which will display the placeholder if there is one.\n. I don't understand what you mean by that. There is no such thing as an \"enum type\" - at runtime an enum is just an integer.\n. @kbala assuming you are using the approach from the dynamic fields example, to set default values in your JSON, add a dictionary of default values by key and use it to populate the valuesByKey dictionary.\n\nI'm investigating whether there is a more convenient approach that can be used.\n. @batkru Ah, I understand the confusion. There was a bug causing the gender field to show up as a text field instead of a selection box. This is now fixed.\n\n@kbala I've now added an option called FXFormDefaultValue that can be used to set the default value in the field dictionary. This should make it simpler for you to set defaults for dynamic forms using JSON.\n. That's because the field type is NSDate, and FXForms doesn't convert a default value of type NSString to NSDate (it couldn't really do this, since there is more than one way to represent a date as a string).\n\nYou'll have to parse the default value to an NSDate yourself before passing the dictionary to FXForms.\n. I'm planning to at some point. For now you can set the field type to @\"label\" to make it read only.\n. This is a peculiar edge case, caused by the fact that \"class\" is a standard method of NSObject.\n\nEither use a different key, or change:\n\n```\n- (id)valueForUndefinedKey:(NSString *)key\n{\n    return self.valuesByKey[key];\n}\n```\n\nTo\n\n```\n- (id)valueForKey:(NSString *)key\n{\n    return self.valuesByKey[key];\n}\n```\n\nWhich, seems to work OK, although it may have some weird side effects later that I haven't thought of.\n. Good point - I'll look into that.\n. Awesome, thanks!\n. How are you setting them? By directly manipulating the cell.textField.text property?\n. OK, I've fixed it.\n. Glad you've found it useful :-)\n. If your form is just an ordinary class, you can set the properties directly. After setting properties, call reloadData on the tableView to refresh the table.\n\nIf you are using a dynamic form, use setValue:forKey: as you suggested, but remember to reload the tableView afterwards.\n. Sorry, I must have misunderstood what you are trying to do. If you want to set the default value, you can just use the FXFormFieldDefaultValue key.\n. Can you try again with the latest beta? When I paste that exact fields method into the DynamicForms example form it works fine.\n. There's a FXFormFieldDefaultValue you can use, or just set the value in the form object itself.\n. No, you should do it like this:\n\nreturn @{FXFormFieldKey: @\"yourEmail\", FXFormFieldDefaultValue: userEmail}\n\nSetting the the textField.text value directly won't store the value in the form, so if the user doesn't modify it, the value might not be saved and could be left as nil.\n. Setting the textField.text value is the wrong way to do that anyway (see my comment in the other thread), but in any case, the easiest way to do this is simply to set the form values directly:\n\nYourAccountForm *form = [[YourAccountForm alloc] init];\n[form setValue:someDefaultValue forKey:@\"someKey\"];\n...\n\n//then assign the form to the controller\ncontroller.formController.form = form;\n. Your form either needs to have properties matching the keys you are trying to set, or your need to set it up as a dynamic form by following the implementation design used in the DynamicForm example.\n. No problem.\n. Thanks. Fixed in b9.\n. Thanks. Fixed.\n. There's no way to do this right now except by creating a custom cell class and registering it as the cell to be used by FXFormFieldTypeOption. \n\nThe options lists just use regular UITableViewCells, which don't support multi-line labels.\n. The only reason that I haven't done so is that I can't currently see a use case for it. Generally you are interested in either displaying the option (for which you can use optionDescriptionAtIndex) or finding out the actual selected value of the field, for which you can use field.value.\n\nI can see that if the field values were something like colors, it would be useful to be able to display these using custom cells that displayed the actual color. I think that currently, implementing that would involve more than just having access to the field option value though - you'd also need some way to specify that you wanted to use a different cell type for that option, and then make the underlying options field available to the cell, which currently just sees the options as boolean values on the FXOptionsForm.\n\nSo basically I'd need to re-architect the way options fields are handled in order for the option value to be useful. If you have any suggestions for how that might work, I'd be interested.\n. But where would you call that method from in your code? The option cell doesn't have access to the original form field - it uses a proxy field. You can get to the original field from the proxy, but only by calling private methods.\n. Ah, so you're building a custom controller for selecting the field? Now I understand.\n. OK, I've exposed this method.\n. You can register a custom cell class to use for fields of type FXFormFieldTypeOption using the registerViewControllerClass:forFieldType: method of FXFormController, and then handle the display of the title value differently. I'm not sure if that would meet your requirements.\n. Ha ha, my time isn't _that_ valuable ;-)\n. Why does this cause a retain cycle? The form doesn't have a reference its fields.\n. Yes, if the cellPhone property is an array, set the array value directly, e.g.\n\n[form setValue:@[@\"Nokia Lumia\", @\"Galaxy Nexus\", @\"iPhone 5s\"] forKey:@\"cellPhone\"];\n. Sorry, I think I misunderstood the question.\n\nWhat is it that you are trying to do? set the FXFormFieldOptions for the form field in the view controller instead of the form object?\n\nWhy don't you want to set them in the form object?\n. Why not just return a different value from the FXFormFieldOptions in the form object based on the result from your web API? Why does it need to be set in controller?\n. You can set it in the controller, but the property itself should belong to the form. E.g. you could do something like this:\n\n```\n@interface MyForm <FXForm>\n\n@property (nonatomic, copy) NSString *resortName;\n@property (nonatomic, copy) NSArray *resortOptions;\n\n@end\n\n@implementation MyForm <FXForm>\n\n- (NSDictionary *)resortNameField\n{\n    return @{FXFormFieldOptions: resortOptions ?: @[]}\n}\n\n- (NSArray *)excludedFields\n{\n    return @\"resortOptions\";\n}\n\n@end\n```\n\nThat will let you set the resortOptions from your controller, like this:\n\n```\nself.form.resortOptions = //downloaded resorts array\nself.formController.form = self.form;\n[self.tableView reloadData];\n```\n. Yes, fixed in latest FXForms beta.\n. Use :head as the version in your podfile.\n. Currently there's no simple solution for this. The best approach is probably to create two proxy form objects that talk to the underlying NSManagedObject in the same way that the DynamicFieldsExample form talks to a dictionary.\n. The plan is to make field customisation available via the delegate, rather than having to add methods to the form object itself. I'm not sure when I'll get round to that though.\n. I'll update the pod when 1.2 is out of beta. CocoaPods doesn't currently have a way to submit pods for beta versions.\n. Your best bet is just to create a normal numeric field (e.g. using `FXFormFieldTypeUnsigned`) and then add `@\"textField.secureTextEntry\": @YES` to the field dictionary.\n. I'll consider whether there is a better approach for secure text fields - it's not an issue that has arisen before so I don't know that it's worth a huge amount of refactoring to fix it. Checking for `FXFormFieldTypePassword` and `@\"textField.secureTextEntry\"` should be the only cases you have to deal with. You could optionally create a new type \"FormFieldTypeNumericPassword\" and a custom cell to handle it if you prefer.\n\nThe code is all in one file because of the how C/Objective-C handles privacy. Currently the components rely on talking to each other's private methods, and there's no particularly elegant way to do this across multiple files (private categories is an option I'm considering). Swift appears to do nothing to improve this, and actually removes the private category option so I expect this pattern to continue. I don't consider having all code in one file to be a big issue as long as class responsibilities are separated.\n\nI don't have a specific date planned for 1.2 release. Features are mostly locked down now, so once I'm happy that it's stable I'll release it.\n. Can you paste the full code of how you enumerated the field? It sounds like it was enumerating the fields of the options subfotm instead of the root form.\n. Ah, interesting. The `FXFormFieldInline` is the cause here. I guess this is unexpected behavior, but it may be a little tricky to fix, since it's technically behaving correctly; those are the keys for the fields displayed at those index paths in the form, and if I return the non-inlined field instead then the indexPaths won't match the tableview, which may also be unexpected behavior.\n. Sorry, already fixed this a while ago, just forgot to push it for some reason.\n. You need to include FXFormFieldKey: @\"domain\" in the dictionary if you want to return it from the -fields array, otherwise FXForms doesn't know which field it relates to (it works when it's a standalone method because it infers the key from the domainField method name).\n. I would argue that tapping (or scrolling) elsewhere on screen _is_ a good way to dismiss it ;-)\n. Seems reasonable. Implemented in 1.2.8.\n. Sorry, I missed the part about changing the color, but I'm not sure hard-coding a color like this is appropriate anyway. Maybe it could use the tintColor instead though or something?\n. I guess this could be a configuration option in the form. I'll think about it.\n. It's possible to do all of your cell styling in IB, although currently it's necessary to create a custom cell class for each distinct cell.xib (although the class need not do anything except extend FXFormBaseCell).\n\nCan you paste in some examples of the classes you've had to write? It may be that in some cases there was a better way, but in the cases where there wasn't, I'll see if I can improve the API.\n. I'll need a bit more context. Is it a dynamic form? What properties have you included in the field dictionary?\n. Try the latest update. It should now treat empty text values as nil for fields of type NSNumber.\n. Have a look at the DynamicFieldsExample - it shows how to create a form from a JSON file.\n. You'll need to download the list as JSON using NSURLSession, and then set it as the options in your form fields dictionary.\n. I'm adding support for this in the next version, but FWIW you can customise the header and footer views using the UITableViewDelegate methods in your view controller, as normal.\n. Headers aren't cells, they're ordinary views. Just create a UILabel with the attributes and text that you want and set it as the FXFormFieldHeader of the field.\n. Note: There's currently no way for FXForms to set the text of custom headers automatically, so you'll need to set the text yourself for each header you create. You can always simplify that by creating a custom view class with a constructor, e.g. [MyHeaderView viewWithTitle:someString]\n. You can't set headers in JSON unless you create a separate class for each header, which would be a PiTA. I suggest you use the FXFormDelegate instead.\n\nYou don't need to add anything to your JSON, unless you want to modify the title text of the header. If you do, just add\n\n```\n\"header\": \"Some long title / description text to add to the form and tell the user what the next part is all about\"\n```\n\nto the dictionary for the first field in the section where you want it to appear.\n\nTo customise the font, etc, add a method like this to your form view controller:\n\n```\n- (UIView *)tableView:(UITableView *)tableView viewForHeaderInSection:(NSInteger)section\n{\n    NSString *title = [(id<UITableViewDataSource>)self.formController tableView:tableView titleForHeaderInSection:section];\n    if ([title length])\n    {\n        UILabel *label = [[UILabel alloc] initWithFrame:CGRectMake(10, 5, tableView.frame.size.width - 20, 18)];\n        label.text = title;\n        label.font = [UIFont boldSystemFontOfSize:12];\n        label.textColor = [UIColor redColor];\n        [label sizeToFit];\n\n        UIView *view = [[UIView alloc] initWithFrame:CGRectMake(0, 0, tableView.frame.size.width, label.frame.size.height + 10)];\n        view.backgroundColor = [UIColor greenColor];\n        [view addSubview:label];\n        return view;\n    }\n    return nil;\n}\n\n- (CGFloat)tableView:(UITableView *)tableView heightForHeaderInSection:(NSInteger)section\n{\n    return [self tableView:tableView viewForHeaderInSection:section].frame.size.height;\n}\n```\n. Add the \"header\": \"Whatever text I want\" to the first field in the section it relates to - don't put it in a field on its own. i.e., do it like this:\n\n```\n{\"header\": \"Whatever text I want\",\n \"key\": \"field1\",\n \"title\": \"field 1\",\n\"type\": \"integer\"},\n\n{\"key\": \"field2\",\n \"title\": \"field 2\",\n\"type\": \"text\"},\n```\n. Alternatively, if you just want an ordinary cell full of text that you can style, use a cell of \"type\": \"label\" instead, then you can customise it however you want in the normal way using keypaths.\n. Yes, that's true. You'll probably need to create a custom cell, as you originally suggested.\n\nI'll look into making multiline text work with FXFormFieldTypeLabel, as that would be a simpler solution.\n. I think removing readonly properties altogether is too blunt, as it can be useful for things like label fields or info pages. For now, I've eliminated just those properties.\n. This question is a bit confusing. I'm not sure why you've overridden -fields, -extraFields and -excludedFields instead of just returning _dynamicFields from the -fields method.\n\nAlso, if you are using Swift, why not define your ApplicationForm class in Swift instead of Objective-C? As long as it's a subclass of NSObject, it should work fine.\n\nThe solution to adding options to your dynamic fields should be to just add the Male/Female/etc options into your JSON file. There are several examples of how to specify options fields in JSON in the DynamicFieldsExample.\n. Note: for the example you've given, you shouldn't need to use FXFormFieldValueTransformer as the values are simple strings. If you find that do need to use a value transformer, let me know as that's a bit more complex.\n. You need to override valueForKey: and setValue:forKey: in your form object (see the DynamicFieldsExample for details) otherwise FXForms cannot record the state of the field.\n. You don't really need the cell in this case, it was only being used to look up the form. You can just do this instead:\n\n```\n- (IBAction)barBtnSave:(UIBarButtonItem *)sender\n{\n    //I'm assuming that the barBtnSave method is in your form view controller - if it's somewhere\n    //else then you'll need to get the form via a different route\n    RegistrationForm *form = self.formController.form;\n\n    //we can then perform validation, etc\n    if (form.agreedToTerms)\n    {\n        [[[UIAlertView alloc] initWithTitle:@\"Registration Form Submitted\" message:nil delegate:nil cancelButtonTitle:nil otherButtonTitles:@\"OK\", nil] show];\n    }\n    else\n    {\n        [[[UIAlertView alloc] initWithTitle:@\"User Error\" message:@\"Please agree to the terms and conditions before proceeding\" delegate:nil cancelButtonTitle:nil otherButtonTitles:@\"Yes Sir!\", nil] show];\n    }\n}\n```\n. You may need to resign the responder on the form. You can do that by calling [formViewController.view setEditing:NO];\n. Yes, this is fixed in the latest beta.\n. Just use :head, or link directly to the pod spec inside the repository. It will be published normally once it's out of beta.\n. Interesting. I think the problem may be that the value isn't being stored, not that the cell is being recycled, but I need to verify.\n. Yeah, so it looks like the problem is that you've not implemented any way to store the dynamic values in your form object. You'd normally do that by overriding the valueForUndefinedKey: and setValueForUndefinedKey: methods and then storing the values in a dictionary (have a look at the DynamicFieldsExample to see what I mean).\n\nBecause you aren't storing the values anywhere, when the cells are re-created, the value is lost.\n\nIt's not ideal that FXForms fails silently here: It should probably throw an exception when you try to set a value on a form that it can't store, but other than that it seems to be working correctly.\n. You can include arbitrary key/value pairs in the field dictionary, provided that they match up with a property of the UITableViewCell. So @\"accessibilityLabel\": @\"Foo\" should work for setting a cell's accessibility label.\n\nI don't think there's currently a way to do this for the fields in an options subform.\n. Currently, I dismiss the keyboard on scroll deliberately because it's the expected behaviour as of iOS 7, and many keyboard variants cannot be dismissed any other way as they don't have a close button.\n\nI guess I could look at making this a configurable option.\n. You can add an action for when the value in a field changes (which is usually triggered when the done button is pressed). You do that using the FXFormFieldAction key, which can be either a block or the name of a method on your controller.\n. I've added this fix in 1.2.1\n. This is already possible. Just add the FXFormFieldInline option to the field dictionary.\n. Oh, I see. Currently that feature doesn't exist. Interesting idea though.\n. Thanks for flagging this. Fixed in 1.2.1.\n. Yes, you may need to resign the responder manually. FXForms only resigns the responder automatically when you tap a cell, so if the button is not inside a cell then the currently editing value may not yet have been committed to the form when you press it.\n. The FXFormFieldDefaultValue is only intended for use with values that are nillable. A BOOL can only be true or false, so FXForms has no way of knowing if the value has already been set.\n\nThere are couple of options you could take:\n\n1) In the init method of your form object, set the value to YES (this is the general way to set default values)\n\n1) Use an NSNumber for your property instead of a BOOL. That way, if it's nil, FXForms can set it to YES automatically if you set the FXFormFieldDefaultValue to @YES.\n. You can create your own Cell subclass that uses this control, and then register it as the default cell for handling strings.\n. Ooh, nice. I didn't know about that constant.\n. Sorry, this was a bug. Should be fixed in 1.2.1\n. I'm unclear what you mean by  headers and footers now being implicit. Can you send me a screenshot of how your controller looks now, and how it looked before with the older version of FXForms so I can get some idea what the problem is?\n. If you are just trying to get rid of the header text, you can use { FXFormFieldHeader: @\"\" }, but that won't get rid of the gap.\n. @ninokierulf I suspect the effect you're describing is just the normal appearance of tableviews in group mode. You can supply your own tableview created with UITableViewStylePlain to get rid of the gap.\n. This doesn't seem like an FXForms issue. Are you maybe using some iOS8-only feature in your storyboard?\n. no problem :-)\n. Try setting the image to nil on your form and then reloading the tableView.\n. There was a bug in version 1.2.1 that was party responsible for this not working. That's fixed in 1.2.2.\n\nThe other part is that you need to specify the form types because Swift doesn't provide that information at runtime like objective C for some reason. You can do that like this:\n\n```\nclass SettingsForm: NSObject, FXForm {\n    var userProfile: UserProfileForm\n    var legal: LegalForm = LegalForm()\n\n    init(user: User) {\n        self.userProfile = UserProfileForm(user: user)\n    }\n\n    func userProfileField() -> FXFormFieldDictionary {\n        return [\n            FXFormFieldClass: userProfile.dynamicType,\n            FXFormFieldInline: true\n        ]\n    }\n\n    func legalField() -> FXFormFieldDictionary {\n        return [\n            FXFormFieldClass: legal.dynamicType,\n            FXFormFieldInline: true\n        ]\n    }\n}\n```\n. By the way, you can get rid of these two methods:\n\n```\nfunc fullNameField() -> FXFormFieldDictionary {\n    return [\n        FXFormFieldHeader: \"User Profile\",\n        FXFormFieldTitle: \"Full Name\"\n    ]\n}\n\nfunc emailField() -> FXFormFieldDictionary {\n    return [\n        FXFormFieldTitle: \"Email\",\n        FXFormFieldType: FXFormFieldTypeEmail\n    ]\n}\n```\n\nAll of that is inferred by default.\n\n<strike>EDIT: oops, you still need this bit:</strike>\nEDIT2: no, I was right the first time! :-)\n. This is the same problem. In your Legal form, put this:\n\n```\nfunc termsOfServiceField() -> FXFormFieldDictionary {\n    return [\n        FXFormFieldClass: termsOfService.dynamicType\n    ]\n}\n\n    func privacyPolicyField() -> FXFormFieldDictionary {\n    return [\n        FXFormFieldClass: privacyPolicy.dynamicType\n    ]\n}\n```\n\n(And there's no need to implement the fields() method)\n. Hmm, I tried the same and it worked at my end. Can you send me your project?\n\nsupport @ charcoaldesign.co.uk\n. Hi Justin,\n\nThanks for sending the project through. I turns out that the issue was just that you need to embed your view controller inside a UINavigationController, otherwise there's nothing to push the sub viewcontrollers onto.\n\nI should probably throw an exception in this case rather than failing silently!\n. FYI thanks to your help, I've managed to find a fix for the original issue. I just pushed version 1.2.3 that no longer requires you to specify the dynamicType for your forms and controllers, so you can take all that out again if you want!\n. @kumargaurav89 Is your formViewController inside a UINavigationController? It needs to be if you want to use non-inline subforms.\n. Create a new ViewController class that conforms to the <FXFormFieldViewController> protocol, which means that it has a \"field\" property of type FXFormField.\n\nWhen your controller is pushed, it's field property will be automatically set, and you can return the value by settings self.field.value before popping the controller.\n\nI don't think the inline array template is the one you want to base it on because your form controller won't appear inline in the form. Instead, you probably want something like this:\n\n```\n@{FXFormFieldKey: @\"myCustomField\",\n  FXFormFieldViewController: [MyFormFieldViewController class]}\n```\n. FXFormFieldTypeLabel is the type, not the key. Try this:\n\n@{FXFormFieldType: FXFormFieldTypeLabel,\n    FXFormFieldTitle: @\"Program Version\",\n    FXFormFieldDefaultValue: @\"1.0\"}\n. If you have property already, you can omit the FXFormFieldDefaultValue and it will get its value directly from your property.\n\nTo intercept changes to homeinit, you can add an action, like this:\n\n```\n@{FXFormFieldKey: @\"homeinit\", FXFormFieldAction: \"methodName:\"}\n```\n\nThe action is the name of a method that you want to call on your controller when the value changes. So in your controller, you'd add:\n\n```\n- (void)methodName:(id<FXFormFieldCell>)cell {\n    BOOL homeinitValue = [cell.field.value boolValue];\n}\n```\n\nBy the way, FXForms can automatically infer the field title from the property name, so if you give your form properties human-readable names then you don't have to specify the FXFormFieldTitle for every field (e.g. if you call your version property \"programVersion\", then the title will be \"Program Version\".\n. Probably because you've set field type to FXFormFieldTypeLabel. Labels are non-interactive. Remove the FXFormFieldType key and it will use the default.\n. :-)\n. I'll need a bit more detail. Can you paste in your form class and the json for that field?\n. FXFormFieldAction doesn't have to be a block, it can be the name of a method to call on your view controller instead. That allows you to put any model update logic in your controller, instead of having to observe the model directly.\n. You may need to set the FXFormFieldClass for your subforms - FXForms can't infer the type of dynamic properties, so it defaults to text.\n. This is working correctly for me in the latest version. Can you try again, and if it's still not working, please send a project demsonqrating the problem to support at charcoaldesign dot co dot uk.\n. This working correctly for me. Are you using a custom header view? Or maybe it's something to do with the font?\n. Add the table view manually in IB and bind into the tableView outlet of the FXFormViewController.\n. I can't see anything wrong with your code, but the dateOfBirth field is working fine in the BasicExample project, so I don't think it's an FXForms bug.\n\nCan you send me the project and I'll try to reproduce it? support at charcoal design dot co dot uk\n. Fair enough. I suggest putting a breakpoint in the tap handling method and stepping through to see what's going on then.\n. You weren't doing anything wrong, it's just that the class inference wasn't as smart as it should have been. Fixed in 1.2.6\n\n(PS, you don't need to specify FXFormFieldCell explicitly, just FXFormFieldType is enough).\n. Ah, you could be right. I'll check.\n. Hmm, it's working for me. Which OS are you testing on?\n. Also, is it the cancel button for the UIActionSheet, or the image picker controller that's not working for you?\n. Hmm, it won't be the UIAlertController NULL method then, because that's only used on iOS8+. I don't have an iOS7 device to hand - can you puta breakpoint in the action sheet callback and see if you can work out what's happening? Maybe the button index is wrong?\n. If you change the structure of the form, you need to reassign it to the formController using formController.form = formController.form, _then_ call [tableView reloadData]\n. You can't do this with an ordinary options field. You'll have to create a dynamic form object using the technique shown in the DynamicFieldsExample, then build a tree of subforms, where each field in each form is a subform containing the fields for the next set of options.\n. This is an interesting problem, and there's a case for me to create a \"tree\" type field to make this simpler, but I can't easily estimate how long that would take.\n. Quite right. Fixed in 1.2.8\n. Is this still happening in 1.2.8?\n. The proxy form seems like the way to go in this case.\n\nYou can present a field in a screen on its own, but only by building a custom view controller with a bespoke UI for editing the field value. FXFormViewController is only designed to work with fields whose value is of type FXForm, it can't display a single field.\n\nI could modify FXFormViewController to do this proxying automatically, but it seems like a bit of an edge case, and it's unclear how field properties such as header/footer should be handled in the general case (would they be displayed in both the main form and subform?).\n\nI'll think about it.\n. You can already make forms within forms - just define one of your root form's fields as being another FXForm object (the example app does this). The OP had a slightly different requirement.\n. What was the logical clarification?\n. Ah, the convention in Objective-C is to write selectors (method names) without the argument names, since they're redundant. So a method like:\n\n```\n- (void)didSelectWithTableView:(UITableView *)tableView controller:(UIViewController *)controller;\n```\n\nJust becomes:\n\n```\ndidSelectWithTableView:controller:\n```\n. You may be thinking of Swift, which has slightly different naming conventions.\n. You can do it, but it's a little awkward. Add an FXFormFieldAction to the field and it will be called when the value is updated. You can then set the field text color to red and refresh the form if it's invalid.\n. You'll need to subclass FXFormViewControllerandset up your custom back button as a leftBarButtonItem. Then add your custom controller class to the field dictionary for the field that displays it, e.g\n\n```\n- (NSDictionary *)mySubformField {\n    return @{FXFormFieldViewController: [MyFormSubclass class]};\n}\n```\n. from within your submitRegistrationForm method, get the navigation controller using self.navigationController, then call popToRootViewController on it to dismiss all the presented forms\n. If you override the setText method of the cell with your own method, do you still get the warning?\n. Fair enough. In that case it's a spurious warning. You can suppress it like this:\n\n```\n#pragma clang diagnostic push\n#pragma clang diagnostic ignored  \"-Wdeprecated-declarations\"\n- (void)setText:(NSString *)text {\n    ...\n}\n#pragma clang diagnostic pop\n```\n. There's no need to check if customLabel is nil before setting the text by the way - Objective-C is nil safe. Your setText method can just be:\n\n```\n#pragma clang diagnostic push\n#pragma clang diagnostic ignored  \"-Wdeprecated-declarations\"\n- (void)setText:(NSString *)text {\n    self.customLabel.text = text\n}\n#pragma clang diagnostic pop\n```\n. Is your customLabel outlet defined as weak? It probably shouldn't be - that recommendation only applies to outlets on view controllers, and even that is unnecessary since iOS6 because views are no longer unloaded.\n. I may have got the deprecation warning string wrong. You can find out what the actual warning you need to suppress is by right-clicking warning in left sidebar and selecting \"show in log\".\n. There is a PR that implements this already. I'm not certain whether I like it or not, but if you need it then you can use this fork until I decide what to do: https://github.com/nicklockwood/FXForms/pull/111\n. How is a \"hidden\" field different from an excluded field, e.g. one not included in the fields array, or that you've put into the excludedFields array?\n. Can you provide more information? Which iOS version was this? What was the crash - what appeared in the console, etc?\n. OK, fixed in 1.2.10\n. Yes, just set FXFormFieldTitle to a blank string @\"\"\n. You can call self.navigationController.topViewController to get the frontmost form controller.\n. Why not just set imageView.image instead of textView.leftView?\n. You can set the keyboard close button by adding the following to the field dictionary:\n\n```\n\"textField.returnKeyType\" : UIReturnKeySend\n```\n\nThe picker view doesn't have a close button.\n. Create a new class containing zip and state string properties to use as the form field, and a new cell class containing both fields. Then you'll just be mapping one form property to one cell.\n. Your custom cell would access the composite object by calling field.value and then read the subfields from it directly.\n. That isn't necessary, just set the field on your form object to be of the correct type and FXForms will infer the valueClass.\n. Ah, yes, it would. In that case you will need to specify valueClass. What crash are you seeing?\n. The key you need to set valueClass is just \"class\", are you using \"valueClass\" instead?\n. Can you paste in your whole field dictionary?\n. \"type\" shouldn't be \"option\" as that's used for bool values, also using \"options\" may confuse FXForms since it will think this is an options field where actually it's something completely custom. Maybe call it \"states\" instead.\n. I think the field.value will initially be nil. It would be up to you to create an instance of PPStateZip, either in the cell or in the DynamicForm itself.\n. If you want to send me your project, I'll take a look if you like. I think it can be done without modifying FXForms, but it's difficult to diagnose the issue remotely.\n. Hmm. I think it used to but no longer does because that crashed for CoreData objects. It will work if the custom class conforms to the FXForm protocol, which might actually make things easier.\n\nI.e. you could treat the field as a subform, but still render it using a single cell.\n. You'd just need to declare PPStateZip as conforming to < FXForm > protocol, but if it's already working for you  without doing that then don't worry about it.\n. It would still be the field.value.\n. There's no easy way to do this right now, sorry. You'll have to hack the tableView:editingStyleForRowAtIndexPath: method in FXForms.h\n. This will give you a left-aligned date:\n\n```\n@{FXFormFieldKey: @\"dateOfBirth\", FXFormFieldTitle: @\"\", @\"style\": @(UITableViewCellStyleSubtitle), FXFormFieldPlaceholder: @\"Date Of Birth\"},\n```\n\nTweaking the color of the placeholder text to match the other fields may be more challenging.\n. Well, actually, if you don't mind the date being grey after it is selected, you can set the text color like this:\n\n```\n@{FXFormFieldKey: @\"dateOfBirth\",\nFXFormFieldTitle: @\"\",\nFXFormFieldPlaceholder: @\"Date Of Birth\",\n@\"style\": @(UITableViewCellStyleSubtitle),\n@\"detailTextLabel.color\": [UIColor lightGrayColor]},\n```\n. You can always subclass FXFormDatePickerCell if you need more sophisticated customisation.\n. There's no automatic way to format currencies in iOS. Just use an NSValueTransformer to manually build the string. Or you can use a block if that's easier.\n. Fields have an optional FXFormFieldValueTransformer property, so you can supply the value transformer along with your other field configuration.\n. Yes, sorry, I was unclear. I meant that there's no way to automatically format a number with a currency symbol. You'd have to concatenate the number and symbol manually, although it would make sense to use NSNumberFormatterCurrencyStyle for the numeric part.\n. @marcelofabri ah, interesting. I didn't realise that.\n. @dformoso this isn't really an FXForms-related problem. If you can figure out how to get the effect you want with an ordinary UITextField, you can get the same effect in FXForms by creating a custom cell.\n. In Objective-C, NSInteger can't be nil. You need to set the value to NSNotFound to clear it - the default value of zero maps to the first element.\n. You could just use an options field and supply an array of NSNumbers in the desired range as the options.\n. NSInteger cannot have a value of nil, so it defaults to zero, which is the first value in your enum.\n\nThere are various solutions to this. Either use an NSNumber property instead of NSInteger, or set the value of the field to NSNotFound in the init method of your form.\n. The ISO3166 transformer is just example code, not part of the FXForms library. I haven't tested it and don't advocate re-using it in your own projects.\n. If you create a UIViewController subclass that conforms to the FXFormFieldViewController protocol, you can create a completely bespoke interface for setting a field value. In your field dictionary just add FXFormFieldViewController: MyCustomForm to use your VC instead of the default picker interface.\n\nAlternatively, I guess you could subclass FXTextFieldCell, and implement your autocomplete field as an inline control.\n. You can use FXFormFieldValueTransformer for that.\n. The reason I don't expose the options array is that the indexes/values vary depending on whether you include a placeholder or default value. For that reason, I've hidden the underlying array to avoid confusion and crashes due to mismatched indexes.\n. The newly pushed controller should inherit the configuration from the parent controller. If you want different configuration, you can supply a custom FXFormViewController subclass to use by setting the FXFormFieldViewController property of the field that displays the subform.\n. Yes, check out the DynamicFieldsExample project in the examples folder.\n. You need the string value if you are using it in a JSON file. Fair point about example usage though.\n. Um, no. Sorry. I hard-coded the cell class. I should probably fix that!\n. I'm not sure I fully understand what you mean by \"Send the selected object\"? What kind of object is it? Is it one of the values represented by a field in your form object?\n\nIf so, you can access the form from within a FXFormViewController subclass like this:\n\n```\nMyForm *form = (MyForm *)self.formController.form;\nform.someProperty = valueFromSegue;\n```\n\nThen you can set one of its properties, and then reload the table using \n\n```\n[self.formController.tableView reloadData];\n```\n\nTo see the updated value appear. Or, if the object from the segue actually is an entire form in its own right, you can just assign it to self.formController.form.\n\nIf that's not what you mean, please explain further.\n. Try calling setValuesForKeysWithDictionary: On your form object. If the keys and types match up with the properties, it should work (otherwise it will crash)\n. Are you using Swift?\n. It's not expected. Is it for every field, or just a particular type?\n. This should now be fixed in 1.2.12\n. That isn't how you use a custom cell in FXForms - I'm not sure why you thought it was :-)\n\nI can't tell exactly from the code you've given me how you're trying to use your custom cell, but take a look at the CustomButtonExample example project and hopefully that will make things clearer.\n. Sounds like a bug. I'll take a look.\n. Fixed in 1.2.11\n. Yeah, subclassing the cell is your best bet here. It should be pretty trivial - just subclass the FXFormsOptionSegmentsCell and override the - (void)layoutSubviews method . You can copy the existing code, but use a hardcoded width.\n\nThen just specify your new cell class in the form field dictionary instead of FXFormOptionSegmentsCell.\n. The template title was supposed to be used only for the \u201cAdd Item\u201d button, but was appearing inside each field. I\u2019ve fixed that in 1.2.12.\n\nOnce you upgrade to 1.2.12, if you just want a blank text field, you shouldn\u2019t need to do anything further to customize your cell - you can just use a standard FXFormTextFieldCell.\n\nThe only thing that isn't supported is making the email fields non-editable after they've been created. You might be able to rig that up using a custom cell, but I'm not exactly sure what the best way to do that would be - maybe replace the strings in your array with some kind of object that has an editable state?.\n\nNote that if a user edits any existing entries, it will call the setter on your form for the whole list, so you can apply any necessary re-validation logic. It may not be necessary for you to make them non-editable, unless it's particularly desirable for UX reasons.\n\nIf you want to apply custom styling then subclassing FXFormTextFieldCell as you were doing is the correct approach. The cell has a \u201cfield\u201d property that contains all the available state information.\n\nNick\n. It's fairly easy to add this with a custom action on the field, but yeah, it's a commonly requested feature - I'll think about adding it.\n. This looks awesome! I was intending to add something similar but haven't had the time. And yes, using the inline property makes perfect sense for this. Can you file a pull request? I can't promise I'll get to it right away, but I will eventually.\n. Set the value on the form object, and then reload the tableView (or just the relevant row) in the normal way.\n. It doesn't include a minus sign, unfortunately, otherwise that would be a good option.\n. I do use the decimal pad if you set the type to Unsigned Integer (there's no such thing as an unsigned float though).\n. Yes, but mostly because that property is rather poorly defined, and has suffered some scope creep. It really needs to be broken up into separate events.\n\nTo detect every text change, I suggest you add a KVC observer to your form field, or override the setter and have it call an action directly.\n. I don't think the \"self\" is required.\n. The tableView itself tou can just access directly, via the view controller, e.g. self.formController.tableView. IIRC though, cells are opaque by default, so setting tableview background may not do what you want.\n. How would you do it normally if you were calling the segue yourself?\n. If it's a push segue onto a navigation controller, you're probably better off using FXFormFieldViewController instead. Then you can implement the FXFormFieldViewController protocol, which adds a \"field\" property to your controller that can be used to set the field value.\n. Yeah, I don't recycle cells, and that's problematic for performance. I want to fix that, but it's not trivial to ensure that properties are properly reset.\n. It should be:\n\n```\n[self.formController registerCellClass:[MyFormTextFieldCell class] forFieldType:FXFormFieldTypeText];\n```\n\nWhich tells FXForms to use your MyFormTextFieldCell for any field of type FXFormFieldTypeText. That seems to be equivalent to the third option you tried though, so if it's not working, have you verified that self.formController is not nil inside your init method?\n. If you subclass FXFormTextFieldCell then it should handle the different keyboards, etc. automatically.\n\nYou can't get the field type in setUp, but in update you can check self.field.type.\n. There's a +heightForField: method you can override that is called whenever the row is updated.\n. I'm not sure why that wouldn't work, but take a look at how FXFormImagePickerCell works, and see if that's doing anything differently.\n\nYou might also try using Xcode's view logging features to inspect your cell and see if the imageView is being wrongly positioned or sized, or if the image property has been set correctly.\n. Brilliant! Thank you Donna :-)\n. You can add an action block or selector to the last field using FXFormFieldAction\n. @aryaxt I'm not sure I understand the question. It's included in version 1.2.13, which is the latest version on CocoaPods. It's not included in 1.2.12 because that version was released before that feature was merged.\n. You can set a default value in your form configuration for that field, e.g.\n\n```\n- (NSDictionary *)myPropertyField\n{\n    return @{FXFormFieldDefaultValue: @3}; // number equal to enum value you want to be default\n}\n```\n\nAlternatively, in the init for your form object, you can just set the default, like this:\n\n```\n- (id)init\n{\n    if ((self = [super init])) {\n        _myProperty = SOME_ENUM_VALUE;\n    }\n    return self;\n}\n```\n. @wdcurry thanks, I've updated my original answer.\n\n(ps, to indent code correctly on github, just add four spaces at the start of each line.)\n. If your View controller has a property called field of type FXFormField, it will be set automatically to the field of the cell that was clicked. You can include any data you want to pass as that field's value.\n. If you set the options value of the field yo be an array of the ids, you can use a valueTransformer to display these as human-readable names.\n\nThe country select menu in the example app demonstrates how to do this (it maps country names to codes).\n. The slider needs to set the value of it's cell.field when it changes, so if you haven't already done so, you should add this inside your custom cell:\n\n```\n[self.slider addTarget:self action:@selector(didChange)];\n\n...\n\n- (void)didChange {\n    self.field.value = @(self.slider.value);\n}\n```\n\nTo get the forms values as a dictionary, you can use KVC and say something like:\n\n```\nNSDictionary *values = [myForm dictionaryWithValuesForKeys:@[@\"field1\", @\"field2\", etc...]];\n```\n\nOr, if you follow the dynamic form example, you can create a form that stores all its values in a dictionary anyway, which you can access directly.\n. Yes, it's due to reuse. Just as you have to set the cell.field.value when you update the slider, you also have to set the cell.slider value when the field changes.\n\nOverride setField: on the cell, like this:\n\n```\n- (void)setField:(FXFormField)field\n{\n    super.field = field;\n    self.slider.value = field,value.floatValue;\n}\n```\n\n(You can get rid of the seperate float property)\n. You should be able to subclass FXFormBaseCell and save yourself some hassle, but if you're just using UITableViewCell as the base, change it to:\n\n```\n@synthesize field = _field; // field is part of FXFormFieldCell protocol. This creates ivar and accessors\n\n- (void)setField:(FXFormField)field\n{\n    _field = field;\n    self.slider.value = field,value.floatValue;\n}\n```\n. Analyzer warnings generally shouldn't be ignored. I'll look into it.\n. Init a new form object and assign it to the form property, then call reloadData on the tableView.\n. No, that just reloads the same form object. To reset the form you need to also update the form object first, like this:\n\n```\nself.form = MyForm()\nself.tableView.reloadData()\n```\n. \ud83d\udc4d\ud83c\udffd\n. That doesn't make a whole lot of sense. self.fields is functionally equivalent to [self fields]. Can you explain what effect you believe this change had on the behavior?\n. But `self.fields` doesn't access the instance variable. It calls the `- (NSMutableArray *)fields` method. To access the instance variable, you'd have to write `self->_fields`.\n\nTry putting a breakpoint inside `- (NSMutableArray *)fields` and you can verify that it's called when you access `self.fields`.\n\nI think perhaps the issue that you're referring to is \"Argument to 'NSMutableArray' method 'addObject;:' cannot be nil\"? In which case the issue it's complaining about is that the `field` value being added to the array is nil, not the array itself.\n\nI'll fix this in the next update.\n. Hmm, I can't actually replicate a clang warning on the line you fixed. The warning I'm seeing is on the line a few below that: `[self.fields addObject:field]`\n. I think maybe the change above just confused the analyzer so that it couldn't parse the logic below anymore \u00af_(\u30c4)_/\u00af \n. I will continue to support it, but I can't commit to any specific features or timelines.\n\nI've just submitted version 1.2.13 which works on Xcode 7.0 / iOS 9.\n\nMost issues seem minor. I'll review them as and when I can.\n. Therr are two simple options:\n\n1) add headers to separate the table into groups by adding FXFormFieldHeader values (see the registration form example)\n\n2) split the form into nested subforms, which you can do by splitting your form object up into several sub objects (again, see the registration form)\n\nImplementing a search filter is possible, but there's no support built in. You'd need to override the fields method of your form and return a filtered list based on a search string.\n. You could use a hex string and convert it using my ColorUtils library.\n. Yes, just use FXFormFieldTypeDateTime instead.\n. Call tableView.reloadData()\n. Make it a readwrite @property of your form object, then you can set it.\n. No, it will automatically use localised versions of your field titles if you include them in your Localizable.strings file.\n. Default values don't work that way. Default values are the value used when a field is reset to null. BOOL values can't be null, so they can't be reset.\n\nTo set the value to YES by default, just set self.rememberMe = YES in the init method of your form object.\n. You'd need to create a custom cell type backed by a custom class with two fields: NSString *name and BOOL selected. Then you could create a template form consisting of fields of that type.\n. I'm not sure what you were expecting `@\"stepper.backgroundColor\": [UIColor grayColor]` to do, but it looks to me like it's working as expected.\n\nIf you were trying to just change the color of the buttons and not the background, that's outside the scope of FXForms since I'm just using the standard control and not doing anything special with it, but here are some ideas:\n\nhttp://stackoverflow.com/questions/8762512/change-appearance-of-uistepper\n. The FieldSelectorViewController should have a field property of type FXFormField, like this:\n\n```\n@property (nonatomic, strong) FXFormField *field;\n```\n\nThis will be automatically populated by the parent form (your DynamicForm class) when the Reason field is selected.\n\nTo update the value from within the FieldSelectorViewController, just set the value of the field, like this:\n\n```\nself.field.value = @\"New Value\";\n```\n\nAnd that should then update the value of the Reason property in the DynamicForm. To refresh the display of the field in the FieldSelectorViewController you may also need to call\n\n```\n[self.tableView reloadData];\n```\n. I think I'm going to have to see more of the code to debug this.\n. @\"textField.textColor\"\n. This works fine in version 1.2.14, which was released on November 2nd. It may be that you need to upgrade your Xcode version.\n. @plandem, I was oversimplifying. You don't need to use the latest version of Xcode, but you do need to use the latest iOS SDK.\n\nThe reason that FXForms is giving you an error is because you are trying to build using the iOS8 SDK, and the `cellLayoutMarginsFollowReadableWidth` symbol doesn't exist in that SDK version.\n\nIf you build using the iOS9 SDK instead, but set the deployment target as iOS8 or earlier, FXForms will still work fine on iOS8 because it checks for the existence of that feature at runtime.\n\nYou don't need to use the iOS8 SDK to support iOS8, but if you choose to do so for some reason, you'll need to either use an old version of FXForms, or modify the new version to compile using the iOS8 SDK.\n. Which writeup are you referring to?\n. In your form class, add the following method:\n\n```\n- (NSDictionary *)<nameOfYourProperty>Field {\n  return @{FXFormFieldType: FXFormFieldTypeTime};\n}\n```\n. (You don't have to declare it in the `@interface`, only in the `@implementation`)\n. Try\n\n```\n- (NSDictionary *)<nameOfYourProperty>Field {\n  return @{FXFormFieldType: FXFormFieldTypeTime, FXFormFieldTitle: @\"\"};\n}\n```\n. Er\u2026 that's curious. Maybe an issue with the locale being different for the picker than the label?\n. Swift enums are very different from C enums, and I've not tested FXForms with them, so I can't be sure they can be used in the same way as in my example code.\n\nWith that said, did you try:\n\n```\nenum Gender : Int {\n  case male\n  case female\n  case undetermined\n}\n```\n\nPerhaps that will work?\n. I'm not sure I understand, but have you looked at the Dynamic Forms example? It shows how to build forms from json instead of a fixed structure.\n. Oh I see. There's no built-in control for that yet. You could do it with a template field, but you'd need to create a custom field type that includes both a text input and a tick for selection.\n. It might be easier to go the route of having an \"other, please specify\" option in your enum, and then having an optional text field that is shown only when \"other\" is selected.\n\nYou could also just have a separate text field for entering a new value which then modifies the source array for the selection in your data model, and reloads the form.\n. You need to nest your form view controller inside a navigation controller in order to push another controller.\n. ",
    "mirceamironenco": "Hello , i'm still having this problem with a custom footer view.If i set the footer height in heightForFooterInSection it moves the scrollview (table) up when it doesn't have to . If i however don't call the method the screen just flickers like so : \n\n![fxformstable](https://cloud.githubusercontent.com/assets/5738815/3675364/5ec40f02-127e-11e4-8b6c-00e94f9d9233.gif)\n\nAny suggestions @nicklockwood ?\n\nEdit: Not adding the view height in heightForFooterInSection will make the buttons inactive, as it doesn't register the view.\n\nBehaviour with the heightForFooterInSection method :\n\n-(CGFloat)tableView:(UITableView *)tableView heightForFooterInSection:(NSInteger)section{\n    if (section == 1) {\n        return 180;\n    }else{\n        return 0;\n    }\n}\n\n![ajhjk](https://cloud.githubusercontent.com/assets/5738815/3676228/fc71ea92-1285-11e4-964f-fff9f81395d6.gif)\n\nOn the 4 inch retina the behaviour is not really noticeable, but it still happens.\n. Indeed , this is needed , great addition :+1: \n. Hello , i'm still having this problem with a custom footer view.If i set the footer height in heightForFooterInSection it moves the scrollview (table) up when it doesn't have to . If i however don't call the method the screen just flickers like so : \n\n![fxformstable](https://cloud.githubusercontent.com/assets/5738815/3675364/5ec40f02-127e-11e4-8b6c-00e94f9d9233.gif)\n\nAny suggestions @nicklockwood ?\n\nEdit: Not adding the view height in heightForFooterInSection will make the buttons inactive, as it doesn't register the view.\n\nBehaviour with the heightForFooterInSection method :\n\n-(CGFloat)tableView:(UITableView *)tableView heightForFooterInSection:(NSInteger)section{\n    if (section == 1) {\n        return 180;\n    }else{\n        return 0;\n    }\n}\n\n![ajhjk](https://cloud.githubusercontent.com/assets/5738815/3676228/fc71ea92-1285-11e4-964f-fff9f81395d6.gif)\n\nOn the 4 inch retina the behaviour is not really noticeable, but it still happens.\n. Indeed , this is needed , great addition :+1: \n. ",
    "nsbraksa": "Yes, I have a UIViewController in Storyboard with a UITableView inside it. \nCreated a custom UIViewController class, and linked it with the UIViewController in Storyboard.\n\nNow I wanna know how to inject FXForm inside that UIViewController ? \n. Worked like a charm ! Thanks for your help! \n\nAnd thank you again for the awesome FXForms ! \n. Alright all I had to do is actually access it via \n\n```\nrootForm.login.email\n```\n. Yes, I have a UIViewController in Storyboard with a UITableView inside it. \nCreated a custom UIViewController class, and linked it with the UIViewController in Storyboard.\n\nNow I wanna know how to inject FXForm inside that UIViewController ? \n. Worked like a charm ! Thanks for your help! \n\nAnd thank you again for the awesome FXForms ! \n. Alright all I had to do is actually access it via \n\n```\nrootForm.login.email\n```\n. ",
    "bartvandendriessche": "Sounds great.\n\nActually you can already use the `FXFormFieldValueTransformer` on other fields as well.\n\nYou'd just do something like:\n\n``` Objective-C\n@{\n    FXFormFieldKey: @\"name\",\n    FXFormFieldValueTransformer: [NSValueTransformer valueTransformerForName:UppercaseValueTransformerName],\n},\n```\n\nBut I understand if you'd like to restructure things a bit anyway.\n. Wondering now if it would be useful to use `NSValueTransformer`s in the opposite direction for data normalisation.\n. Ugh, changes from my previous pull request snuck in this one as well. I'll close this and make a new pullrequest.\n. Sounds good, I'll try to have a go at it tomorrow :rocket: \n. I rebased this against master, can you forward-merge it now ?\n. I'd say FXFormFieldPlaceholder and FXFormFieldNilOption are complementary.\n\nFXFormFieldNilOption allows you to select an option that will set the underlying field to nil.\n\ne.g.:\n\nIn the BasicExample app, FXFormFieldNilOption allows you to select 'English', setting the language property to 'en', and then allows you to select the 'NilOption', setting the language property to nil again.\n\nTo give a more concrete example, I have an app that has `Items` and `Categories`. An `Item` _may_ belong to a `Category`. `FXFormFieldNilOption` allows me to remove a `Category` from an `Item` by setting `item.category` to nil.\n. Sure no problem.\n\nAny idea what it is specifically that you dislike about it ? \n\nI realise every new option adds a bit of extra complexity, but being able to set something to nil is something I need in a project I'm working on.\n\nI must admit I'm not in love with `FXFormFieldNilOption` as a name though.\n. Yeah I considered adding an `[NSNull null]` property to the front of the `FXFormFieldOptions` array, but then I wound up with not having a good presentation of that value (which is why `FXFormFieldNilOption` takes a `NSString`).\n\nI'll mull over it some more too.\n. It's reasonable, and a valid solution for my current requirement.\n\nHowever, I can't shake the feeling that this is conflating two somewhat distinct concepts, namely a 'placeholder' and a 'nil option'. \n\nThere will be some friction when a user will try to:\n- Have an instructional placeholder, like 'pick a language' on the main form, but have 'None' as the first option in the options list.\n- Leave the `detailTextLabel.text` to be `nil` but offer 'None' or 'Empty' as the first option in the options list.\n\nThat being said, it's much better than not being able to set an option to nil :)\n\nI've been thinking about having a `FXFormDataSource` protocol, which may be a great way to offer more flexibility in this regard, but I haven't found the time yet to really think things true and write code for it.\n. No worries, happy to help!\n. Hm, that's odd, what version of iOS are you using where this issue happens ?\n\nI tried to reproduce this in the BasicExample on iOS 7.1 and 6.1, but it seemed to work ok.\n\nDoes this bug manifest for you in the BasicExample ?\n. @cvconover: I'm using FXForms with CoreData, and the approach I'm using so far is as follows:\n- For each NSManagedObject I create a category that implements `FXForm` so that I have a `Customer` and a `Customer+Form`.\n- When creating a new `Customer`, I create an ad-hoc `FXFormViewController`, in my `CustomersViewController` I have something like this:\n\n``` Objc\n- (void)add:(id)sender {\n    self.scratchContext = [[NSManagedObjectContext alloc] initWithConcurrencyType:NSMainQueueConcurrencyType];\n    self.scratchContext.parentContext = [CoreDataStack defaultStack].managedObjectContext;\n\n    FXFormViewController *vc = [[FXFormViewController alloc] init];\n    vc.formController.form = [Customer insertInManagedObjectContext:self.scratchContext];\n    vc.navigationItem.rightBarButtonItem = [[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemSave target:self action:@selector(save:)];\n    [self.navigationController pushViewController:vc animated:YES];\n}\n\n- (void)save:(id)sender {\n    if (self.scratchContext && [self.scratchContext hasChanges]) {\n        NSError *error;\n        if ([self.scratchContext save:&error]) {\n            [[CoreDataStack defaultStack] saveContext];\n        } else {\n            [[UIAlertView alertViewWithError:error] show];\n        }\n    }\n    [self.navigationController popToViewController:self animated:YES];\n}\n```\n- I have a readonly `CustomerDetailViewController` with an edit button, which looks something like this:\n\n``` Objc\n- (void)edit:(id)sender {\n    FXFormViewController *vc = [[FXFormViewController alloc] init];\n    vc.formController.form = self.customer;\n    vc.navigationItem.rightBarButtonItem = [[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemSave target:self action:@selector(save:)];\n    [self.navigationController pushViewController:vc animated:YES];\n}\n\n- (void)save:(id)sender {\n    [[MyAPI sharedAPI] saveEntity:self.customer];\n}\n```\n. I haven't used `FXFormFieldAction` yet, but my understanding is that the action can only be run on a subclass of `UIResponder`, so if `Team+Form` is a `NSManagedObject` subclass, I don't think it will work.\n\nTo figure out why your `selector` turns out to be `null`, I'd set a breakpoint on the `setAction:` method of `FXFormField` and then trace back what the value of `action` is up the stack. \n\nHopefully that will provide a clue.\n. @nicklockwood I just encountered the same issue. \n\nThe cause, as described in the above PR, is that `NSManagedObject` overrides `respondsToSelector:` and crashes on `nil` values.\n. Make sure your subclass conforms to the `UITextFieldDelegate` protocol, and assign the textField's text to your field's value.\n\n``` objc\n\n- (void)setUp\n{\n    self.textField = <initialization>;\n    self.textField.delegate = self;\n}\n\n...snip...\n\n- (void)textFieldDidEndEditing:(__unused UITextField *)textField\n{\n    self.field.value = self.textField.text;\n    if (self.field.action) self.field.action(self);\n}\n```\n\nBe sure to check [FXFormTextFieldCell](https://github.com/nicklockwood/FXForms/blob/master/FXForms/FXForms.m#L1832-1856) for more detail.\n. Upgrading `FXFormFieldInline` is a decent idea.\n\nMaybe having a `FXFormFieldPresentationStyle` bitmask would be nice. That way we would be able to do something like:\n\n``` objc\n// popover on iPad. New screen on navigationController stack on iPhone:\n@{FXFormFieldPresentationStyle: @(FXFormFieldPresentationStylePopover)}; \n\n// popover on iPad. Inline on iPhone:\n@{FXFormFieldPresentationStyle: @(FXFormFieldPresentationStylePopover|FXFormFieldPresentationStyleInline)};\n```\n. I'm working on a solution for this problem in an app I'm working on. Once I have my specific solution working, I'll try to make a pull request to solve the general problem.\n\nMy current idea is to have an option where you can tell a `FXFormField` that it is a `FXFormFieldRelationshipToMany` or something like that.\n\nThis would only work with properties of type `NSArray` or `NSSet`, and I'd like to build in support for swipe to delete, and by default show an 'Add <RelationType>' button.\n\nIt's still a work in progress though, so I can't promise that I'll be able to come up with a satisfying general solution.\n. Awesome. I'll keep that approach in mind.\n\nBy the way, since FXForms tries to auto-configure a lot of stuff right now, it might be interesting to test if a `FXForm` is an `NSManagedObject`, and if so, use its `NSEntityDescription` for some more information.\n\nFor relations specifically, it should be possible to obtain a relationship's cardinality through its [NSRelationshipDescription](https://developer.apple.com/library/mac/documentation/Cocoa/Reference/CoreDataFramework/Classes/NSRelationshipDescription_Class/NSRelationshipDescription.html#//apple_ref/occ/cl/NSRelationshipDescription)\n. @nicklockwood: do you have a rough idea of how you'd like the `FXFormFieldTemplate` attribute to function ?\n\nI've got something sort of working, but it's not flexible enough to my liking at the moment. I'm interested in hearing your thoughts on the matter.\n. This is a bit cumbersome at the moment.\n\nYou would add an action to the `productList` field, e.g. @\"productListChanged:\" and implement that in a subclass of `FXFormViewController` to do something like:\n\n``` objc\n- (void)productListChanged:(id)sender {\n    self.formController.form = self.productSelectionForm;\n    [self.tableView reloadData];\n}\n```\n\nYou also need the list of productOptions to be dynamic in the `fields` method of your `ProductSelectionForm`. You  can do this by assigning a method to `FXFormFieldOptions`:\n\n``` objc\n@{FXFormFieldKey: @\"productOptions\", FXFormFieldOptions: [self arrayOfProductOptionsBasedOnSelectedProductList]}\n```\n. You can do this by implemenig `- (NSString *)fieldDescription` on your `SalesAgent` entity.\n\nIf `SalesAgent` is a OneToMany relation and already conforms to the `FXForm` protocol, you should define the field as something like this in your `Client+Form`:\n\n``` objc\n- (NSArray *)fields {\n    return @[\n             @{\n                 FXFormFieldKey: @\"salesAgent\",\n                 FXFormFieldOptions: [self salesAgents],\n                 }];\n}\n\n- (NSArray *)salesAgents {\n    NSFetchRequest *request = [NSFetchRequest fetchRequestWithEntityName:@\"SalesAgent\"];\n\n    return [[CoreDataStack defaultStack].managedObjectContext executeFetchRequest:request error:nil];\n}\n```\n. Related to #71 \n. Because an image says more than words sometimes: \n\n<img src=\"https://cloud.githubusercontent.com/assets/58052/2814896/d3755a74-ceb1-11e3-830a-764ee4ca973e.png\" width=\"320\" height=\"568\">\n. Great, looking forward to your feedback, I kinda hijacked your `FXFormFieldTemplate` key, so sorry about that :grinning: \n\nIf you'd like to see these templates work differently, I'm happy to massage this pr into better shape.\n. The two new commits above are mainly for CoreData support.\n. Also working on a \"key-value\" cell that goes nicely with this, here's a teaser:\n\n![screen shot 2014-05-06 at 13 47 00](https://cloud.githubusercontent.com/assets/58052/2888952/422ea4d0-d514-11e3-97a7-432f1e3807a5.png)\n. Last commit adds functionality to show a modal viewcontroller if the new instance conforms to the `FXForm` protocol.\n\nCan be tested in the sample app by adding a new `Address`\n. Feedback is welcome, hope you find it useful.\n. Thanks for the PR.\n\n@nicklockwood UITableView has built-in support for an editingmode. I've been thinking about building a form similar to the one in the iOS Contacts.app, and it would be nice if FXForms could make a distinction between edit and readonly mode as well.\n\nWondering what your thoughts are on that.\n. Hm, haven't given that a lot of thought yet.\n\nI have a custom cell and a protocol that extends from the `FXForm` protocol to implement the key-value screenshot I posted above.\n\nBasically the custom protocol allows me to implement a `keyField` method which basically returns a `NSDictionary` from which I can build a form (much like the current `fields` method).\n\nI use this approach to declaratively build a list of possible choices, e.g.:\n\n``` objc\n- (NSDictionary *)keyField {\n    return @{\n             FXFormFieldKey: @\"keyProperty\",\n             FXFormFieldHeader: NSLocalizedString(@\"Contactoption Type\", nil),\n             FXFormFieldOptions: @[@(CPContactOptionTypePhone),\n                                   @(ContactOptionTypeMobilePhone),\n                                   @(ContactOptionTypeFax),\n                                   @(ContactOptionTypeEmail),\n                                   @(ContactOptionTypeWebsite)],\n             FXFormFieldInline: @(YES),\n             FXFormFieldValueTransformer: [NSValueTransformer valueTransformerForName:ContactOptionLocalizedValueTransformer]};\n}\n```\n\nThere's a bit more scaffolding around that, but that's the gist, it's basically 2 FormFields (part of a single model) in a single Cell.\n\nedit: as for picking a key to associate new values with, this would probably have to be a default value provided in the `fields` method somewhere.\n\nI've been holding of on trying to make this more generic, because I'm not sure about where @nicklockwood draws the line between feature and bloat :)\n. I'm gonna go ahead and try to swap out my branch with this solution.\n\nI'm also closing this pull request because it's a dead end now.\n\nDon't worry about not using my approach, I'm happy this is going to be a main line feature, and will try to help out with smaller sized pull requests.\n\nAs for missing features, I've only glanced over the code so far, but I think there's a bit of missing support for CoreData (where you can't just alloc init a new instance), but again, I'll make a new issue or PR for that when I hit it. :truck:\n. Having some way to assign a dedicated key (apart from the field key) to cells will also be useful in the future if we want to delete / insert / reload cells using a `UITableViewAnimation`.\n\nI have a bit of code somewhere where I:\n- iterate over the `FormController` fields\n- assign a new form to the FormController (the fields method is dynamic)\n- iterate over the new `FormController` fields\n- based on the field key, build a set of deleted and inserted fields, and use those for dynamic updates\n\nThis will probably fail in cases where a form has fields that don't correlate to a specific field though, e.g. login buttons (which you might want to dynamically show/hide/disable) etc.\n. Sounds fair, although some properties should probably be excluded from hashing.\n\ne.g. I have a FormField whose FXFormOptions change when the selected option from another FormField changes.\n. What about using something like key + title + header by default, and allowing `FXFormFieldIdentifier` for people that require more control ?\n\nSeems like a nice \"Try to be smart about it, but get out of the way when asked\" approach. It would also somewhat sidestep the cognitive load issue for the simple cases.\n. This is sort of what I did.\n\nI have a `User` class with a `contactOptions` property. `ContactOption` conforms to my `KeyValueField` protocol which looks as follows:\n\n``` objc\n@protocol KeyValueField <NSObject>\n\n@property (nonatomic, strong) id keyProperty;\n@property (nonatomic, strong) id valueProperty;\n\n/// returns a `NSDictionary` used to configure a `FXFormField`\n- (NSDictionary *)keyField;\n\n@end\n```\n\nI then have a `KeyValueCell` that's able to display and bind to these properties.\n\nThe actual implementation is a bit cobbled together, but in theory this should allow for a very flexible `KeyValueCell`.\n. Oh right, that makes sense, I must've overlooked that.\n\nIn that case, using the `FXFormFieldClass` key inside the `FXFormFieldTemplate` and instantiating a new instance of that class is likely the right thing to do by default.\n\nThe `newInstanceFor` would then only be necessary when initialisation is more complex, e.g. when working with CoreData, or having default values based on context.\n. Thanks! Will try to have a look later today.\n\nRegarding the form instantiating and cleaning up objects, what are your thoughts on having a delegate protocol next to, or instead of, some of the 'magic' methods ? \n\nI'm wondering if it might make the use of the library a bit easier for new users, since they'd be able to look through the protocol header and see what they could implement. Just a thought.\n. Nick expanded a bit on the reasons why the code is all in two files in #157.\n\nBut I agree that FXForms would be easier to work on / understand if the code could be split out in a more typical manner.\n. The ISO3166 transformer is based on the `ISOCountryCodes` available on `NSLocale`. I don't think it fully implements ISO3166 in that it only seemed to support the [alpha2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) part of the standard.\n\nAs nick says, it's just example code.\n. Sounds great.\n\nActually you can already use the `FXFormFieldValueTransformer` on other fields as well.\n\nYou'd just do something like:\n\n``` Objective-C\n@{\n    FXFormFieldKey: @\"name\",\n    FXFormFieldValueTransformer: [NSValueTransformer valueTransformerForName:UppercaseValueTransformerName],\n},\n```\n\nBut I understand if you'd like to restructure things a bit anyway.\n. Wondering now if it would be useful to use `NSValueTransformer`s in the opposite direction for data normalisation.\n. Ugh, changes from my previous pull request snuck in this one as well. I'll close this and make a new pullrequest.\n. Sounds good, I'll try to have a go at it tomorrow :rocket: \n. I rebased this against master, can you forward-merge it now ?\n. I'd say FXFormFieldPlaceholder and FXFormFieldNilOption are complementary.\n\nFXFormFieldNilOption allows you to select an option that will set the underlying field to nil.\n\ne.g.:\n\nIn the BasicExample app, FXFormFieldNilOption allows you to select 'English', setting the language property to 'en', and then allows you to select the 'NilOption', setting the language property to nil again.\n\nTo give a more concrete example, I have an app that has `Items` and `Categories`. An `Item` _may_ belong to a `Category`. `FXFormFieldNilOption` allows me to remove a `Category` from an `Item` by setting `item.category` to nil.\n. Sure no problem.\n\nAny idea what it is specifically that you dislike about it ? \n\nI realise every new option adds a bit of extra complexity, but being able to set something to nil is something I need in a project I'm working on.\n\nI must admit I'm not in love with `FXFormFieldNilOption` as a name though.\n. Yeah I considered adding an `[NSNull null]` property to the front of the `FXFormFieldOptions` array, but then I wound up with not having a good presentation of that value (which is why `FXFormFieldNilOption` takes a `NSString`).\n\nI'll mull over it some more too.\n. It's reasonable, and a valid solution for my current requirement.\n\nHowever, I can't shake the feeling that this is conflating two somewhat distinct concepts, namely a 'placeholder' and a 'nil option'. \n\nThere will be some friction when a user will try to:\n- Have an instructional placeholder, like 'pick a language' on the main form, but have 'None' as the first option in the options list.\n- Leave the `detailTextLabel.text` to be `nil` but offer 'None' or 'Empty' as the first option in the options list.\n\nThat being said, it's much better than not being able to set an option to nil :)\n\nI've been thinking about having a `FXFormDataSource` protocol, which may be a great way to offer more flexibility in this regard, but I haven't found the time yet to really think things true and write code for it.\n. No worries, happy to help!\n. Hm, that's odd, what version of iOS are you using where this issue happens ?\n\nI tried to reproduce this in the BasicExample on iOS 7.1 and 6.1, but it seemed to work ok.\n\nDoes this bug manifest for you in the BasicExample ?\n. @cvconover: I'm using FXForms with CoreData, and the approach I'm using so far is as follows:\n- For each NSManagedObject I create a category that implements `FXForm` so that I have a `Customer` and a `Customer+Form`.\n- When creating a new `Customer`, I create an ad-hoc `FXFormViewController`, in my `CustomersViewController` I have something like this:\n\n``` Objc\n- (void)add:(id)sender {\n    self.scratchContext = [[NSManagedObjectContext alloc] initWithConcurrencyType:NSMainQueueConcurrencyType];\n    self.scratchContext.parentContext = [CoreDataStack defaultStack].managedObjectContext;\n\n    FXFormViewController *vc = [[FXFormViewController alloc] init];\n    vc.formController.form = [Customer insertInManagedObjectContext:self.scratchContext];\n    vc.navigationItem.rightBarButtonItem = [[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemSave target:self action:@selector(save:)];\n    [self.navigationController pushViewController:vc animated:YES];\n}\n\n- (void)save:(id)sender {\n    if (self.scratchContext && [self.scratchContext hasChanges]) {\n        NSError *error;\n        if ([self.scratchContext save:&error]) {\n            [[CoreDataStack defaultStack] saveContext];\n        } else {\n            [[UIAlertView alertViewWithError:error] show];\n        }\n    }\n    [self.navigationController popToViewController:self animated:YES];\n}\n```\n- I have a readonly `CustomerDetailViewController` with an edit button, which looks something like this:\n\n``` Objc\n- (void)edit:(id)sender {\n    FXFormViewController *vc = [[FXFormViewController alloc] init];\n    vc.formController.form = self.customer;\n    vc.navigationItem.rightBarButtonItem = [[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemSave target:self action:@selector(save:)];\n    [self.navigationController pushViewController:vc animated:YES];\n}\n\n- (void)save:(id)sender {\n    [[MyAPI sharedAPI] saveEntity:self.customer];\n}\n```\n. I haven't used `FXFormFieldAction` yet, but my understanding is that the action can only be run on a subclass of `UIResponder`, so if `Team+Form` is a `NSManagedObject` subclass, I don't think it will work.\n\nTo figure out why your `selector` turns out to be `null`, I'd set a breakpoint on the `setAction:` method of `FXFormField` and then trace back what the value of `action` is up the stack. \n\nHopefully that will provide a clue.\n. @nicklockwood I just encountered the same issue. \n\nThe cause, as described in the above PR, is that `NSManagedObject` overrides `respondsToSelector:` and crashes on `nil` values.\n. Make sure your subclass conforms to the `UITextFieldDelegate` protocol, and assign the textField's text to your field's value.\n\n``` objc\n\n- (void)setUp\n{\n    self.textField = <initialization>;\n    self.textField.delegate = self;\n}\n\n...snip...\n\n- (void)textFieldDidEndEditing:(__unused UITextField *)textField\n{\n    self.field.value = self.textField.text;\n    if (self.field.action) self.field.action(self);\n}\n```\n\nBe sure to check [FXFormTextFieldCell](https://github.com/nicklockwood/FXForms/blob/master/FXForms/FXForms.m#L1832-1856) for more detail.\n. Upgrading `FXFormFieldInline` is a decent idea.\n\nMaybe having a `FXFormFieldPresentationStyle` bitmask would be nice. That way we would be able to do something like:\n\n``` objc\n// popover on iPad. New screen on navigationController stack on iPhone:\n@{FXFormFieldPresentationStyle: @(FXFormFieldPresentationStylePopover)}; \n\n// popover on iPad. Inline on iPhone:\n@{FXFormFieldPresentationStyle: @(FXFormFieldPresentationStylePopover|FXFormFieldPresentationStyleInline)};\n```\n. I'm working on a solution for this problem in an app I'm working on. Once I have my specific solution working, I'll try to make a pull request to solve the general problem.\n\nMy current idea is to have an option where you can tell a `FXFormField` that it is a `FXFormFieldRelationshipToMany` or something like that.\n\nThis would only work with properties of type `NSArray` or `NSSet`, and I'd like to build in support for swipe to delete, and by default show an 'Add <RelationType>' button.\n\nIt's still a work in progress though, so I can't promise that I'll be able to come up with a satisfying general solution.\n. Awesome. I'll keep that approach in mind.\n\nBy the way, since FXForms tries to auto-configure a lot of stuff right now, it might be interesting to test if a `FXForm` is an `NSManagedObject`, and if so, use its `NSEntityDescription` for some more information.\n\nFor relations specifically, it should be possible to obtain a relationship's cardinality through its [NSRelationshipDescription](https://developer.apple.com/library/mac/documentation/Cocoa/Reference/CoreDataFramework/Classes/NSRelationshipDescription_Class/NSRelationshipDescription.html#//apple_ref/occ/cl/NSRelationshipDescription)\n. @nicklockwood: do you have a rough idea of how you'd like the `FXFormFieldTemplate` attribute to function ?\n\nI've got something sort of working, but it's not flexible enough to my liking at the moment. I'm interested in hearing your thoughts on the matter.\n. This is a bit cumbersome at the moment.\n\nYou would add an action to the `productList` field, e.g. @\"productListChanged:\" and implement that in a subclass of `FXFormViewController` to do something like:\n\n``` objc\n- (void)productListChanged:(id)sender {\n    self.formController.form = self.productSelectionForm;\n    [self.tableView reloadData];\n}\n```\n\nYou also need the list of productOptions to be dynamic in the `fields` method of your `ProductSelectionForm`. You  can do this by assigning a method to `FXFormFieldOptions`:\n\n``` objc\n@{FXFormFieldKey: @\"productOptions\", FXFormFieldOptions: [self arrayOfProductOptionsBasedOnSelectedProductList]}\n```\n. You can do this by implemenig `- (NSString *)fieldDescription` on your `SalesAgent` entity.\n\nIf `SalesAgent` is a OneToMany relation and already conforms to the `FXForm` protocol, you should define the field as something like this in your `Client+Form`:\n\n``` objc\n- (NSArray *)fields {\n    return @[\n             @{\n                 FXFormFieldKey: @\"salesAgent\",\n                 FXFormFieldOptions: [self salesAgents],\n                 }];\n}\n\n- (NSArray *)salesAgents {\n    NSFetchRequest *request = [NSFetchRequest fetchRequestWithEntityName:@\"SalesAgent\"];\n\n    return [[CoreDataStack defaultStack].managedObjectContext executeFetchRequest:request error:nil];\n}\n```\n. Related to #71 \n. Because an image says more than words sometimes: \n\n<img src=\"https://cloud.githubusercontent.com/assets/58052/2814896/d3755a74-ceb1-11e3-830a-764ee4ca973e.png\" width=\"320\" height=\"568\">\n. Great, looking forward to your feedback, I kinda hijacked your `FXFormFieldTemplate` key, so sorry about that :grinning: \n\nIf you'd like to see these templates work differently, I'm happy to massage this pr into better shape.\n. The two new commits above are mainly for CoreData support.\n. Also working on a \"key-value\" cell that goes nicely with this, here's a teaser:\n\n![screen shot 2014-05-06 at 13 47 00](https://cloud.githubusercontent.com/assets/58052/2888952/422ea4d0-d514-11e3-97a7-432f1e3807a5.png)\n. Last commit adds functionality to show a modal viewcontroller if the new instance conforms to the `FXForm` protocol.\n\nCan be tested in the sample app by adding a new `Address`\n. Feedback is welcome, hope you find it useful.\n. Thanks for the PR.\n\n@nicklockwood UITableView has built-in support for an editingmode. I've been thinking about building a form similar to the one in the iOS Contacts.app, and it would be nice if FXForms could make a distinction between edit and readonly mode as well.\n\nWondering what your thoughts are on that.\n. Hm, haven't given that a lot of thought yet.\n\nI have a custom cell and a protocol that extends from the `FXForm` protocol to implement the key-value screenshot I posted above.\n\nBasically the custom protocol allows me to implement a `keyField` method which basically returns a `NSDictionary` from which I can build a form (much like the current `fields` method).\n\nI use this approach to declaratively build a list of possible choices, e.g.:\n\n``` objc\n- (NSDictionary *)keyField {\n    return @{\n             FXFormFieldKey: @\"keyProperty\",\n             FXFormFieldHeader: NSLocalizedString(@\"Contactoption Type\", nil),\n             FXFormFieldOptions: @[@(CPContactOptionTypePhone),\n                                   @(ContactOptionTypeMobilePhone),\n                                   @(ContactOptionTypeFax),\n                                   @(ContactOptionTypeEmail),\n                                   @(ContactOptionTypeWebsite)],\n             FXFormFieldInline: @(YES),\n             FXFormFieldValueTransformer: [NSValueTransformer valueTransformerForName:ContactOptionLocalizedValueTransformer]};\n}\n```\n\nThere's a bit more scaffolding around that, but that's the gist, it's basically 2 FormFields (part of a single model) in a single Cell.\n\nedit: as for picking a key to associate new values with, this would probably have to be a default value provided in the `fields` method somewhere.\n\nI've been holding of on trying to make this more generic, because I'm not sure about where @nicklockwood draws the line between feature and bloat :)\n. I'm gonna go ahead and try to swap out my branch with this solution.\n\nI'm also closing this pull request because it's a dead end now.\n\nDon't worry about not using my approach, I'm happy this is going to be a main line feature, and will try to help out with smaller sized pull requests.\n\nAs for missing features, I've only glanced over the code so far, but I think there's a bit of missing support for CoreData (where you can't just alloc init a new instance), but again, I'll make a new issue or PR for that when I hit it. :truck:\n. Having some way to assign a dedicated key (apart from the field key) to cells will also be useful in the future if we want to delete / insert / reload cells using a `UITableViewAnimation`.\n\nI have a bit of code somewhere where I:\n- iterate over the `FormController` fields\n- assign a new form to the FormController (the fields method is dynamic)\n- iterate over the new `FormController` fields\n- based on the field key, build a set of deleted and inserted fields, and use those for dynamic updates\n\nThis will probably fail in cases where a form has fields that don't correlate to a specific field though, e.g. login buttons (which you might want to dynamically show/hide/disable) etc.\n. Sounds fair, although some properties should probably be excluded from hashing.\n\ne.g. I have a FormField whose FXFormOptions change when the selected option from another FormField changes.\n. What about using something like key + title + header by default, and allowing `FXFormFieldIdentifier` for people that require more control ?\n\nSeems like a nice \"Try to be smart about it, but get out of the way when asked\" approach. It would also somewhat sidestep the cognitive load issue for the simple cases.\n. This is sort of what I did.\n\nI have a `User` class with a `contactOptions` property. `ContactOption` conforms to my `KeyValueField` protocol which looks as follows:\n\n``` objc\n@protocol KeyValueField <NSObject>\n\n@property (nonatomic, strong) id keyProperty;\n@property (nonatomic, strong) id valueProperty;\n\n/// returns a `NSDictionary` used to configure a `FXFormField`\n- (NSDictionary *)keyField;\n\n@end\n```\n\nI then have a `KeyValueCell` that's able to display and bind to these properties.\n\nThe actual implementation is a bit cobbled together, but in theory this should allow for a very flexible `KeyValueCell`.\n. Oh right, that makes sense, I must've overlooked that.\n\nIn that case, using the `FXFormFieldClass` key inside the `FXFormFieldTemplate` and instantiating a new instance of that class is likely the right thing to do by default.\n\nThe `newInstanceFor` would then only be necessary when initialisation is more complex, e.g. when working with CoreData, or having default values based on context.\n. Thanks! Will try to have a look later today.\n\nRegarding the form instantiating and cleaning up objects, what are your thoughts on having a delegate protocol next to, or instead of, some of the 'magic' methods ? \n\nI'm wondering if it might make the use of the library a bit easier for new users, since they'd be able to look through the protocol header and see what they could implement. Just a thought.\n. Nick expanded a bit on the reasons why the code is all in two files in #157.\n\nBut I agree that FXForms would be easier to work on / understand if the code could be split out in a more typical manner.\n. The ISO3166 transformer is based on the `ISOCountryCodes` available on `NSLocale`. I don't think it fully implements ISO3166 in that it only seemed to support the [alpha2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) part of the standard.\n\nAs nick says, it's just example code.\n. ",
    "BobDG": "Hi Nick,\nI see it does indeed include such functionality. However, it does that only with the TitleCase, and not the camelcase. But I simply now have to use the title case in my localization files and then it works, thanks! :)\n. Yeah you're right, and it works perfectly! :)\n. Hi Nick, \ndo you have an indication when this next release will be 'released'? :)\n. Ok, just gotta say, I absolutely love what you've done! It's so easy to create/use these forms, really awesome. Looking forward to the next release!\n. Just reopened this because this issue is actually not solved yet :)\nI could perhaps try to contribute here but I'm not sure if you're almost done with the new update and my work would be useless. If you're not almost done, could you point me in the right direction for starting to solve this issue?\n. I'm definitely for it!\n. Awesome works perfectly, it would be cool if it could be a property of the form perhaps, but maybe it's not that important.\nNow all I need is the 'Next' button to switch to the next textfield and I can fully use this awesome framework!\n. Awesome works perfectly, thanks!\n. Hi Nick,\n\nYeah I've done the reloading tableview already from within the controller. But the problem is, that the custom setter is within the FORM-class itself. And from there I can't reload the tableview. Or can I somehow call the 'superformcontroller' from within the FORM-class to reload the tableview?\n. Ah ok. It works, I thought this would never work but it did. From the ViewController:\n[self addObserver:self forKeyPath:@\"formController.form.valueToObserve\" options:NSKeyValueObservingOptionNew context:nil];\nSo thanks! :)\n. Hi Nick,\nI see it does indeed include such functionality. However, it does that only with the TitleCase, and not the camelcase. But I simply now have to use the title case in my localization files and then it works, thanks! :)\n. Yeah you're right, and it works perfectly! :)\n. Hi Nick, \ndo you have an indication when this next release will be 'released'? :)\n. Ok, just gotta say, I absolutely love what you've done! It's so easy to create/use these forms, really awesome. Looking forward to the next release!\n. Just reopened this because this issue is actually not solved yet :)\nI could perhaps try to contribute here but I'm not sure if you're almost done with the new update and my work would be useless. If you're not almost done, could you point me in the right direction for starting to solve this issue?\n. I'm definitely for it!\n. Awesome works perfectly, it would be cool if it could be a property of the form perhaps, but maybe it's not that important.\nNow all I need is the 'Next' button to switch to the next textfield and I can fully use this awesome framework!\n. Awesome works perfectly, thanks!\n. Hi Nick,\n\nYeah I've done the reloading tableview already from within the controller. But the problem is, that the custom setter is within the FORM-class itself. And from there I can't reload the tableview. Or can I somehow call the 'superformcontroller' from within the FORM-class to reload the tableview?\n. Ah ok. It works, I thought this would never work but it did. From the ViewController:\n[self addObserver:self forKeyPath:@\"formController.form.valueToObserve\" options:NSKeyValueObservingOptionNew context:nil];\nSo thanks! :)\n. ",
    "timgcarlson": "@nicklockwood Is localization supported for \"options\"? I'm not seeing it done in my forms for non-inline options, though it is being handled elsewhere.\n\nFor instance, I have a key that has an options type... `\"options\": [\"option1\", \"option2\"]`. I want to have option1 and option2 localize from my Localizable.strings file.\n. Thanks for the tip! I thought about doing this (localizing each of the options), however then the selection is going to be the localized string, instead of whatever string I pass in (the key). So I'll do it this way for now, but then I'll have to convert the localized selection back to the key for saving purposes.\n\nPerhaps I'll attempt to fork FXForms to allow passing more than just strings as options. ie. \n\n```\n\"options\": [{\"key\": \"option1\", \"title\": \"The First Option\"}, {\"key\": \"option2\", \"title\": \"The Second Option\"}]\n```\n\nAnd then localizing the _title_ strings. Perhaps I'm over thinking it though :)\n. :thumbsup: to both @xergic and @jakelisby for this. This worked for me. You can also get the FXFormBaseCell sent back with the selector method. I'm using this to determine if my options were inline or not.\n\n```\nFXFormFieldAction: @\"itemSelected:\"\n\n- (void)itemSelected:(id)sender {\n    // Option selected, navigate back automatically for user\n    FXFormBaseCell *baseCell = (FXFormBaseCell *)sender;\n    if (!baseCell.field.isInline) {\n        [self.navigationController popViewControllerAnimated:YES];\n    }\n}\n```\n. Excellent, that works brilliantly! I didn't think it would be that trivial, thanks for the help.\n. It's been a few months since I've worked with FXForms, so forgive me if I'm missing some details in my answer. I was able to validate input by adding an `FXFormFieldAction` to the field. You do this by assigning a selector string to the key `FXFormFieldAction` (\"action\"). I believe the action will be performed whenever the field is selected and when the first responder is resigned (user navigates out of the field)\n\nHere is an example on validating a date code in the format MMYY.\n\nWhen building your field...\n\n```\n// Don't forget the colon after the selector string so you can get the field in your method!\n[fieldDict setValue:@\"checkDateCodeRegEx:\" forKey: FXFormFieldAction];\n```\n\nNow create the selector method. I put the method in the view controller that presented the form. From the FXForm README, _\"...the target is determined by cascading up the responder chain from the cell until an object is encountered that responds to it. That means that you could choose to implement this action method on the tableview, its superview, the view controller, the app delegate, or even the window.\"_\n\n```\n- (void)checkDateCodeRegEx:(id)sender {\n    FXFormTextFieldCell *fieldCell = (FXFormTextFieldCell *)sender;\n    NSString *inputString = [NSString stringWithFormat:@\"%@\", fieldCell.field.value];\n\n    NSString *regex = @\"^(0[1-9]|1[0-2])[0-9][0-9]$\";  // MMYY\n    NSPredicate *regexTest = [NSPredicate predicateWithFormat:@\"SELF MATCHES %@\", regex];\n\n    if ([regexTest evaluateWithObject:inputString] || !inputString || [inputString isEqualToString:@\"\"]) {\n        fieldCell.textField.textColor = [UIColor blackColor];\n    } else {\n        fieldCell.textField.textColor = [UIColor redColor];\n    }\n}\n```\n\nThis will simply evaluate what was inputed into that field, and then change the font color depending on if the input was determined to be invalid or valid.\n. @confile You can do this by setting the `textAlignment` property of `UITextView`, which is a property of `FXFormTextViewCell`.\n\nWhen setting the dictionary for the field that you want right aligned, set this key-value combination:\n\n```\n@\"textView.textAlignment\": @2\n```\n\n2 is the enumerated value for `NSTextAlignmentRight`.\n\n![screen shot 2015-05-13 at 12 57 09 pm](https://cloud.githubusercontent.com/assets/3299917/7619745/9dabc98e-f96f-11e4-9f14-0efcbf753c35.png)\n. As far as the compiler is concerned, `valideFirst` and `valideFirst:` are two different methods. So you need to include a colon (`:`) at the end of your selector so that the correct method is invoked.\n\n*\\* Change the action selector to the following when you create the field...**\n\n```\nFXFormFieldAction:@\"valideFirst:\"\n```\n\nThen change the `valideFirst` method to the following...\n\n```\n- (void)valideFirst:(id)sender {\n    FXFormDefaultCell *yourFieldCell = (FXFormDefaultCell *)sender;\n    NSLog(@\"Cell title = %@\", yourFieldCell.field.title);\n}\n```\n. Change the `submitLoginForm` selector to `submitLoginForm:` (add the colon). Then, in the view controller that presents your form implement the following method.\n\n```\n- (void)submitLoginForm:(id)sender {\n    CustomButtonCell *fieldCell = (CustomButtonCell *)sender;\n\n    // Now you can access any of the CustomButtonCell properties\n    fieldCell.textField.textColor = [UIColor redColor];  // Assuming textfield is a property of CustomButtonCell\n}\n```\n. You can set the field's property 'userInteractionEnabled' to NO/false. Assuming you're using the `-fields` method to set up your form, it'd look something like this...\n\n```\nreturn @[ @{FXFormFieldKey: @\"yourProperty\",\n          @\"userInteractionEnabled\": (/*Some check on if the field should be readonly*/) ? @NO : @YES,\n           }];\n```\n. @nicklockwood Is localization supported for \"options\"? I'm not seeing it done in my forms for non-inline options, though it is being handled elsewhere.\n\nFor instance, I have a key that has an options type... `\"options\": [\"option1\", \"option2\"]`. I want to have option1 and option2 localize from my Localizable.strings file.\n. Thanks for the tip! I thought about doing this (localizing each of the options), however then the selection is going to be the localized string, instead of whatever string I pass in (the key). So I'll do it this way for now, but then I'll have to convert the localized selection back to the key for saving purposes.\n\nPerhaps I'll attempt to fork FXForms to allow passing more than just strings as options. ie. \n\n```\n\"options\": [{\"key\": \"option1\", \"title\": \"The First Option\"}, {\"key\": \"option2\", \"title\": \"The Second Option\"}]\n```\n\nAnd then localizing the _title_ strings. Perhaps I'm over thinking it though :)\n. :thumbsup: to both @xergic and @jakelisby for this. This worked for me. You can also get the FXFormBaseCell sent back with the selector method. I'm using this to determine if my options were inline or not.\n\n```\nFXFormFieldAction: @\"itemSelected:\"\n\n- (void)itemSelected:(id)sender {\n    // Option selected, navigate back automatically for user\n    FXFormBaseCell *baseCell = (FXFormBaseCell *)sender;\n    if (!baseCell.field.isInline) {\n        [self.navigationController popViewControllerAnimated:YES];\n    }\n}\n```\n. Excellent, that works brilliantly! I didn't think it would be that trivial, thanks for the help.\n. It's been a few months since I've worked with FXForms, so forgive me if I'm missing some details in my answer. I was able to validate input by adding an `FXFormFieldAction` to the field. You do this by assigning a selector string to the key `FXFormFieldAction` (\"action\"). I believe the action will be performed whenever the field is selected and when the first responder is resigned (user navigates out of the field)\n\nHere is an example on validating a date code in the format MMYY.\n\nWhen building your field...\n\n```\n// Don't forget the colon after the selector string so you can get the field in your method!\n[fieldDict setValue:@\"checkDateCodeRegEx:\" forKey: FXFormFieldAction];\n```\n\nNow create the selector method. I put the method in the view controller that presented the form. From the FXForm README, _\"...the target is determined by cascading up the responder chain from the cell until an object is encountered that responds to it. That means that you could choose to implement this action method on the tableview, its superview, the view controller, the app delegate, or even the window.\"_\n\n```\n- (void)checkDateCodeRegEx:(id)sender {\n    FXFormTextFieldCell *fieldCell = (FXFormTextFieldCell *)sender;\n    NSString *inputString = [NSString stringWithFormat:@\"%@\", fieldCell.field.value];\n\n    NSString *regex = @\"^(0[1-9]|1[0-2])[0-9][0-9]$\";  // MMYY\n    NSPredicate *regexTest = [NSPredicate predicateWithFormat:@\"SELF MATCHES %@\", regex];\n\n    if ([regexTest evaluateWithObject:inputString] || !inputString || [inputString isEqualToString:@\"\"]) {\n        fieldCell.textField.textColor = [UIColor blackColor];\n    } else {\n        fieldCell.textField.textColor = [UIColor redColor];\n    }\n}\n```\n\nThis will simply evaluate what was inputed into that field, and then change the font color depending on if the input was determined to be invalid or valid.\n. @confile You can do this by setting the `textAlignment` property of `UITextView`, which is a property of `FXFormTextViewCell`.\n\nWhen setting the dictionary for the field that you want right aligned, set this key-value combination:\n\n```\n@\"textView.textAlignment\": @2\n```\n\n2 is the enumerated value for `NSTextAlignmentRight`.\n\n![screen shot 2015-05-13 at 12 57 09 pm](https://cloud.githubusercontent.com/assets/3299917/7619745/9dabc98e-f96f-11e4-9f14-0efcbf753c35.png)\n. As far as the compiler is concerned, `valideFirst` and `valideFirst:` are two different methods. So you need to include a colon (`:`) at the end of your selector so that the correct method is invoked.\n\n*\\* Change the action selector to the following when you create the field...**\n\n```\nFXFormFieldAction:@\"valideFirst:\"\n```\n\nThen change the `valideFirst` method to the following...\n\n```\n- (void)valideFirst:(id)sender {\n    FXFormDefaultCell *yourFieldCell = (FXFormDefaultCell *)sender;\n    NSLog(@\"Cell title = %@\", yourFieldCell.field.title);\n}\n```\n. Change the `submitLoginForm` selector to `submitLoginForm:` (add the colon). Then, in the view controller that presents your form implement the following method.\n\n```\n- (void)submitLoginForm:(id)sender {\n    CustomButtonCell *fieldCell = (CustomButtonCell *)sender;\n\n    // Now you can access any of the CustomButtonCell properties\n    fieldCell.textField.textColor = [UIColor redColor];  // Assuming textfield is a property of CustomButtonCell\n}\n```\n. You can set the field's property 'userInteractionEnabled' to NO/false. Assuming you're using the `-fields` method to set up your form, it'd look something like this...\n\n```\nreturn @[ @{FXFormFieldKey: @\"yourProperty\",\n          @\"userInteractionEnabled\": (/*Some check on if the field should be readonly*/) ? @NO : @YES,\n           }];\n```\n. ",
    "endocrimes": "That would be pretty useful\n. That would be pretty useful\n. ",
    "Ashton-W": "I think a new type should be introduced for the input of [Nominal numbers](http://en.wikipedia.org/wiki/Nominal_number). An implementation would probably include a type for text input restricted to a given character set too.\n. Sorry if that merge causes problems, I will patch another branch if needed.\n. I prefer that too. Thanks\n. Any comments @nicklockwood?\n. @carlosnaguilera You might want to look at #165, it has helped me think about this.\n. Thanks Bart\u2014\nSent from Mailbox\n\nOn Fri, Aug 15, 2014 at 5:56 PM, Bart Vandendriessche\nnotifications@github.com wrote:\n\n> Nick expanded a bit on the reasons why the code is all in two files in #157.\n> \n> ## But I agree that FXForms would be easier to work on / understand if the code could be split out in a more typical manner.\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/nicklockwood/FXForms/issues/165#issuecomment-52283031\n. @nicklockwood are you interested in an updated PR of this?\n. Only just saw this since I wasn't @mentioned!\n. I think a new type should be introduced for the input of [Nominal numbers](http://en.wikipedia.org/wiki/Nominal_number). An implementation would probably include a type for text input restricted to a given character set too.\n. Sorry if that merge causes problems, I will patch another branch if needed.\n. I prefer that too. Thanks\n. Any comments @nicklockwood?\n. @carlosnaguilera You might want to look at #165, it has helped me think about this.\n. Thanks Bart\u2014\nSent from Mailbox\n\nOn Fri, Aug 15, 2014 at 5:56 PM, Bart Vandendriessche\nnotifications@github.com wrote:\n\n> Nick expanded a bit on the reasons why the code is all in two files in #157.\n> \n> ## But I agree that FXForms would be easier to work on / understand if the code could be split out in a more typical manner.\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/nicklockwood/FXForms/issues/165#issuecomment-52283031\n. @nicklockwood are you interested in an updated PR of this?\n. Only just saw this since I wasn't @mentioned!\n. ",
    "Broich": "Oh I see. That makes sense. Thanks for the quick response. I think I just wait until you update the CocoaPods to v1.1. Thanks!\n. Ah that's super cool. Thanks for pointing that out. Now I got the placeholder available. \n. Thank you so much for your support. Glad to be guinea pig in this case :) \n\nI tried the solution you mentioned above. The interface of my view controller looks like this:\n\n```\n@interface BKSearchCityViewController : BKFormSearchViewController <FXFormFieldViewController>\n\n@property (nonatomic, strong) FXFormField *formField;\n\n@end\n```\n\non the form model among several other properties I declared a NSString *selectedCity to hold the user's choice and a custom view controller displaying the search interface once the user selects the proper cell from the form.\n\n```\n@interface BKRegisterProfileForm : NSObject <FXForm>\n\n@property (nonatomic, copy) NSString *selectedCity;\n@property (nonatomic, strong) BKSearchCityViewController *searchCityViewController;\n\n@end\n```\n\nand the configuration field dictionary now looks like this:\n\n```\n@{ FXFormFieldKey : @\"selectedCity\", FXFormFieldTitle : NSLocalizedString(@\"ORT\", nil), FXFormFieldViewController : @\"searchCityViewController\" }\n```\n\nActually I'm not sure if the value that goes with the FXFormFieldViewController has to be the instace or class name? However I end up with a crash saying:\n\n> **\\* Terminating app due to uncaught exception 'NSInvalidArgumentException', reason: '**\\* setObjectForKey: object cannot be nil (key: viewController)'\n\nas soon as I segue to the controller that displays the form.  Any idea what could have gone wrong?\n. Alright. Got that. The crash is gone but the form view controller doesn't segue to the search view controller. Instead it behaves like a normal string field property and shows the keyboard. I deleted the property of searchCityViewController on the form itself.\n\nHm, this is how the field config looks like:\n\n```\n@{ FXFormFieldKey : @\"selectedCity\", FXFormFieldTitle : NSLocalizedString(@\"ORT\", nil), FXFormFieldViewController : @\"BKSearchCityViewController\" },\n```\n\nSetting the selectedKey to be type of NSDictionary (which is what I get back from the search controller) results in a crash\n\n> **\\* Terminating app due to uncaught exception 'FXFormsException', reason: 'FXFormViewController field value must conform to FXForm protocol'\n. I know I keep repeating myself, but I really appreciate your support. Thank You! I finally got it to run.\n\nOn a side node, when trying to compile I first got this failed message:\n\n> BKSearchCityViewController.m:17:17: Auto property synthesis will not synthesize property declared in a protocol\n\nTurned out that I had to add a `@synthesize field;` in the implementation section to make it compile. Seems a little strange to me as  I couldn't find such an addition in your example project.  \n\nApparently it's also important to name the `FXFormField *field` and not something like `formField`. At least that's then I had trouble getting the value set.\n. I have the same thing. Isn't the manual reload the way it was designed?\n. Oh I see. That makes sense. Thanks for the quick response. I think I just wait until you update the CocoaPods to v1.1. Thanks!\n. Ah that's super cool. Thanks for pointing that out. Now I got the placeholder available. \n. Thank you so much for your support. Glad to be guinea pig in this case :) \n\nI tried the solution you mentioned above. The interface of my view controller looks like this:\n\n```\n@interface BKSearchCityViewController : BKFormSearchViewController <FXFormFieldViewController>\n\n@property (nonatomic, strong) FXFormField *formField;\n\n@end\n```\n\non the form model among several other properties I declared a NSString *selectedCity to hold the user's choice and a custom view controller displaying the search interface once the user selects the proper cell from the form.\n\n```\n@interface BKRegisterProfileForm : NSObject <FXForm>\n\n@property (nonatomic, copy) NSString *selectedCity;\n@property (nonatomic, strong) BKSearchCityViewController *searchCityViewController;\n\n@end\n```\n\nand the configuration field dictionary now looks like this:\n\n```\n@{ FXFormFieldKey : @\"selectedCity\", FXFormFieldTitle : NSLocalizedString(@\"ORT\", nil), FXFormFieldViewController : @\"searchCityViewController\" }\n```\n\nActually I'm not sure if the value that goes with the FXFormFieldViewController has to be the instace or class name? However I end up with a crash saying:\n\n> **\\* Terminating app due to uncaught exception 'NSInvalidArgumentException', reason: '**\\* setObjectForKey: object cannot be nil (key: viewController)'\n\nas soon as I segue to the controller that displays the form.  Any idea what could have gone wrong?\n. Alright. Got that. The crash is gone but the form view controller doesn't segue to the search view controller. Instead it behaves like a normal string field property and shows the keyboard. I deleted the property of searchCityViewController on the form itself.\n\nHm, this is how the field config looks like:\n\n```\n@{ FXFormFieldKey : @\"selectedCity\", FXFormFieldTitle : NSLocalizedString(@\"ORT\", nil), FXFormFieldViewController : @\"BKSearchCityViewController\" },\n```\n\nSetting the selectedKey to be type of NSDictionary (which is what I get back from the search controller) results in a crash\n\n> **\\* Terminating app due to uncaught exception 'FXFormsException', reason: 'FXFormViewController field value must conform to FXForm protocol'\n. I know I keep repeating myself, but I really appreciate your support. Thank You! I finally got it to run.\n\nOn a side node, when trying to compile I first got this failed message:\n\n> BKSearchCityViewController.m:17:17: Auto property synthesis will not synthesize property declared in a protocol\n\nTurned out that I had to add a `@synthesize field;` in the implementation section to make it compile. Seems a little strange to me as  I couldn't find such an addition in your example project.  \n\nApparently it's also important to name the `FXFormField *field` and not something like `formField`. At least that's then I had trouble getting the value set.\n. I have the same thing. Isn't the manual reload the way it was designed?\n. ",
    "justinmakaila": "I can't get this to work on a subform after an asynchronous network operation. After receiving a response, I reconfigure my subform, reassign it to the main form, reassign the `formController.form` property, and then call reloadData, but nothing happens. \n\nEDIT: My method on my main view controller:\n\n```\n- (void)linkFacebookAccount:(UITableViewCell <FXFormFieldCell>*)sender {\n    PFacebookSettingsForm *facebookSettingsForm = sender.field.form;\n\n    if (![PSocialManager currentUserIsLinkedWithAccount:PSocialAccountTypeIdentifierFacebook]) {\n        [PSocialManager linkCurrentUserToAccountType:PSocialAccountTypeIdentifierFacebook success:^(id __unused object) {\n            [facebookSettingsForm configureWithUser:[PUser currentUser]];\n            self.settingsForm.facebookSettings = facebookSettingsForm;\n            self.formController.form = self.settingsForm;\n\n            [self.formController.tableView reloadData];\n        }failure:^(NSError __unused *error) {\n            [self showLinkErrorAlertView];\n        }];\n    }else {\n        [self showAlertViewToUnlinkAccountType:PSocialAccountTypeIdentifierFacebook];\n    }\n}\n```\n. Yes, just double checked\n. I ended up configuring a form like this:\n\n```\n        @{\n            FXFormFieldKey: @\"feedback\",\n            FXFormFieldHeader: @\"\",\n            FXFormFieldAction: @\"showFeedbackController\"\n        }\n```\n\nAnd set up an action method like this:\n\n```\n    if ([MFMailComposeViewController canSendMail]) {\n        MFMailComposeViewController *mailController = [[MFMailComposeViewController alloc] init];\n        [mailController setMailComposeDelegate:self.sharedManager];\n        [mailController setSubject:subject];\n        [mailController setToRecipients:recipients];\n        [mailController setMessageBody:messageBody isHTML:NO];\n\n        [self presentViewController:mailController];\n    }else {\n        [PSocialManager showAlertViewWithTitle:@\"No Mail Accounts\" message:@\"Please set up a Mail account in the Settings app.\"];\n    }\n```\n. That didn't work, I still can't use the text field; it won't become the first responder\n. Subclass of `FXFormBaseCell` worked wonderfully. Thanks!\n. Copying the implementation doesn't work because so many properties are within interfaces within the `FXForms.m`\n. Great!\n. Is this fixed?\n. Which version is the beta? I'm using CocoaPods.\n. Appreciate the quick response.\n. @nicklockwood I set the version to `:head` and now my forms are showing up empty...\n\nLoginForm.h\n\n```\n#import <Foundation/Foundation.h>\n#import <FXForms/FXForms.h>\n#import \"POnboardingCell.h\"\n\n@interface PLoginForm : NSObject <FXForm>\n\n@property (strong, nonatomic) NSString *username;\n@property (strong, nonatomic) NSString *password;\n\n@end\n```\n\nLoginForm.m\n\n```\n#import \"PLoginForm.h\"\n\n@implementation PLoginForm\n\n- (NSDictionary*)usernameField {\n    return @{\n        FXFormFieldCell: [POnboardingTextFieldCell class],\n        FXFormFieldTitle: @\"\",\n        @\"textField.placeholder\": @\"Username\",\n        @\"textField.autocorrectionType\": @(UITextAutocorrectionTypeNo),\n        @\"iconImageView.image\": [UIImage imageNamed:@\"user-icon\"]\n    };\n}\n\n- (NSDictionary*)passwordField {\n    return @{\n        FXFormFieldCell: [POnboardingPasswordCell class],\n        FXFormFieldTitle: @\"\",\n        @\"textField.placeholder\": @\"Password\",\n        @\"textField.autocorrectionType\": @(UITextAutocorrectionTypeNo),\n        @\"iconImageView.image\": [UIImage imageNamed:@\"password-icon\"]\n    };\n}\n\n@end\n```\n\nI'm running on iOS8. Here's a screen shot:\n\n![img_0185](https://cloud.githubusercontent.com/assets/1638996/4364065/53cfb378-429c-11e4-9341-f8d9c5b08961.PNG)\n. Saving the day. Thanks.\n. Actually, my view controllers aren't pushing on selection. Is there something else I need to modify relative to the Obj-C implementation?\n. I did as you suggested. The disclosure indicator now displays, but the controllers don't push. Sanity check:\n\n```\nclass LegalForm: NSObject, FXForm {\n    var termsOfService = WebViewController(url: NSURL(string: \"http://present.tv/terms.txt\"))\n    var privacyPolicy = WebViewController(url: NSURL(string: \"http://present.tv/privacy.txt\"))\n\n    func termsOfServiceField() -> FXFormFieldDictionary {\n        return [\n            FXFormFieldClass: termsOfService.dynamicType\n        ]\n    }\n\n    func privacyPolicyField() -> FXFormFieldDictionary {\n        return [\n            FXFormFieldClass: privacyPolicy.dynamicType\n        ]\n    }\n}\n```\n. Makes a lot of sense, didn't even cross my mind. I'll pull when you push, just to make sure I don't let this slip up in the future ;) Thanks!\n. Just finished updating, everything looks good. Thank you very much.\n. Sorry, wait, I messed up\n. Totally skimmed the header, typed the assumed property, and got it wrong. \n. I can't get this to work on a subform after an asynchronous network operation. After receiving a response, I reconfigure my subform, reassign it to the main form, reassign the `formController.form` property, and then call reloadData, but nothing happens. \n\nEDIT: My method on my main view controller:\n\n```\n- (void)linkFacebookAccount:(UITableViewCell <FXFormFieldCell>*)sender {\n    PFacebookSettingsForm *facebookSettingsForm = sender.field.form;\n\n    if (![PSocialManager currentUserIsLinkedWithAccount:PSocialAccountTypeIdentifierFacebook]) {\n        [PSocialManager linkCurrentUserToAccountType:PSocialAccountTypeIdentifierFacebook success:^(id __unused object) {\n            [facebookSettingsForm configureWithUser:[PUser currentUser]];\n            self.settingsForm.facebookSettings = facebookSettingsForm;\n            self.formController.form = self.settingsForm;\n\n            [self.formController.tableView reloadData];\n        }failure:^(NSError __unused *error) {\n            [self showLinkErrorAlertView];\n        }];\n    }else {\n        [self showAlertViewToUnlinkAccountType:PSocialAccountTypeIdentifierFacebook];\n    }\n}\n```\n. Yes, just double checked\n. I ended up configuring a form like this:\n\n```\n        @{\n            FXFormFieldKey: @\"feedback\",\n            FXFormFieldHeader: @\"\",\n            FXFormFieldAction: @\"showFeedbackController\"\n        }\n```\n\nAnd set up an action method like this:\n\n```\n    if ([MFMailComposeViewController canSendMail]) {\n        MFMailComposeViewController *mailController = [[MFMailComposeViewController alloc] init];\n        [mailController setMailComposeDelegate:self.sharedManager];\n        [mailController setSubject:subject];\n        [mailController setToRecipients:recipients];\n        [mailController setMessageBody:messageBody isHTML:NO];\n\n        [self presentViewController:mailController];\n    }else {\n        [PSocialManager showAlertViewWithTitle:@\"No Mail Accounts\" message:@\"Please set up a Mail account in the Settings app.\"];\n    }\n```\n. That didn't work, I still can't use the text field; it won't become the first responder\n. Subclass of `FXFormBaseCell` worked wonderfully. Thanks!\n. Copying the implementation doesn't work because so many properties are within interfaces within the `FXForms.m`\n. Great!\n. Is this fixed?\n. Which version is the beta? I'm using CocoaPods.\n. Appreciate the quick response.\n. @nicklockwood I set the version to `:head` and now my forms are showing up empty...\n\nLoginForm.h\n\n```\n#import <Foundation/Foundation.h>\n#import <FXForms/FXForms.h>\n#import \"POnboardingCell.h\"\n\n@interface PLoginForm : NSObject <FXForm>\n\n@property (strong, nonatomic) NSString *username;\n@property (strong, nonatomic) NSString *password;\n\n@end\n```\n\nLoginForm.m\n\n```\n#import \"PLoginForm.h\"\n\n@implementation PLoginForm\n\n- (NSDictionary*)usernameField {\n    return @{\n        FXFormFieldCell: [POnboardingTextFieldCell class],\n        FXFormFieldTitle: @\"\",\n        @\"textField.placeholder\": @\"Username\",\n        @\"textField.autocorrectionType\": @(UITextAutocorrectionTypeNo),\n        @\"iconImageView.image\": [UIImage imageNamed:@\"user-icon\"]\n    };\n}\n\n- (NSDictionary*)passwordField {\n    return @{\n        FXFormFieldCell: [POnboardingPasswordCell class],\n        FXFormFieldTitle: @\"\",\n        @\"textField.placeholder\": @\"Password\",\n        @\"textField.autocorrectionType\": @(UITextAutocorrectionTypeNo),\n        @\"iconImageView.image\": [UIImage imageNamed:@\"password-icon\"]\n    };\n}\n\n@end\n```\n\nI'm running on iOS8. Here's a screen shot:\n\n![img_0185](https://cloud.githubusercontent.com/assets/1638996/4364065/53cfb378-429c-11e4-9341-f8d9c5b08961.PNG)\n. Saving the day. Thanks.\n. Actually, my view controllers aren't pushing on selection. Is there something else I need to modify relative to the Obj-C implementation?\n. I did as you suggested. The disclosure indicator now displays, but the controllers don't push. Sanity check:\n\n```\nclass LegalForm: NSObject, FXForm {\n    var termsOfService = WebViewController(url: NSURL(string: \"http://present.tv/terms.txt\"))\n    var privacyPolicy = WebViewController(url: NSURL(string: \"http://present.tv/privacy.txt\"))\n\n    func termsOfServiceField() -> FXFormFieldDictionary {\n        return [\n            FXFormFieldClass: termsOfService.dynamicType\n        ]\n    }\n\n    func privacyPolicyField() -> FXFormFieldDictionary {\n        return [\n            FXFormFieldClass: privacyPolicy.dynamicType\n        ]\n    }\n}\n```\n. Makes a lot of sense, didn't even cross my mind. I'll pull when you push, just to make sure I don't let this slip up in the future ;) Thanks!\n. Just finished updating, everything looks good. Thank you very much.\n. Sorry, wait, I messed up\n. Totally skimmed the header, typed the assumed property, and got it wrong. \n. ",
    "ceeK": "If it was, I think it should at least be documented somewhere. I expected it to work similarly to the example (admittedly, this wasn't a custom view controller). \n\nThe FXFormController that you create as a property in your custom view controller has access to the tableview, so I can't see why it wouldn't reload the tableview when an option field has changed? \n. That's fair. I think the documentation led me to believe it would handle it for me, see \"To display a form using FXFormController, you just need to set the form and tableView properties, and it will do the rest.\". \n\nFor me this implied it would handle reloading of its tableview, but I can see why it was done the way it was. Misunderstanding on my part! =) \n. If it was, I think it should at least be documented somewhere. I expected it to work similarly to the example (admittedly, this wasn't a custom view controller). \n\nThe FXFormController that you create as a property in your custom view controller has access to the tableview, so I can't see why it wouldn't reload the tableview when an option field has changed? \n. That's fair. I think the documentation led me to believe it would handle it for me, see \"To display a form using FXFormController, you just need to set the form and tableView properties, and it will do the rest.\". \n\nFor me this implied it would handle reloading of its tableview, but I can see why it was done the way it was. Misunderstanding on my part! =) \n. ",
    "wimbledon": "I'm sorry. It's a false alarm.\n\nThe problem was I was calling the following code in my custom cell update method:\n\n// resize the tableview if required\n    id responder = [self nextResponder];\n    while (responder)\n    {\n        if ([responder respondsToSelector:@selector(beginUpdates)] &&\n            [responder respondsToSelector:@selector(endUpdates)])\n        {\n            [responder beginUpdates];\n            [responder endUpdates];\n            break;\n        }\n        responder = [responder nextResponder];\n    }\n. Duplicate issue. See https://github.com/nicklockwood/FXForms/issues/93\n. Right now, it seems the only thing I can obtain from the option's field is field.title.\n. I guess I'm just looking to customize the look/UI of option cell. What would be the best way to obtain the necessary data to do this?\n. I tried adding  {FXFormFieldViewController: field.viewController} in FXOptionsForm's  implementation, inside - (instancetype)initWithField:(FXFormField *)field\n\nThen in the cell prototype, \nFXFormViewController *fvc = self.field.viewController;\n    if ([fvc respondsToSelector:@selector(field)]) {\n        id optionObj = [fvc.field optionAtIndex:[self.field.key integerValue]];\n    }\n\nHowever, with little success...\n. The Field configuration was:\n@{FXFormFieldHeader: NSLocalizedString(@\"Insert Images HERE\", nil),\n                 FXFormFieldInline: @YES,\n                 FXFormFieldSortable:@YES,\n                 FXFormFieldTemplate: @{FXFormFieldType: FXFormFieldTypeImage,\n                                        FXFormFieldCell: [FXFormImagePickerCell class]},\n                 FXFormFieldTitle: NSLocalizedString(@\"Add Image\", nil)};\n. Using version 1.2.5, I was able to reproduce the crash on TemplateFieldsExample Xcode project using following form configurations:\n- (NSDictionary *)arrayWithTemplateField\n  {\n  return @{FXFormFieldTemplate: @{FXFormFieldType: FXFormFieldTypeImage,\n                                  FXFormFieldCell: [FXFormImagePickerCell class]}};\n  }\n- (NSDictionary *)sortableArrayWithTemplateField\n  {\n  return @{FXFormFieldSortable: @YES,\n           FXFormFieldTemplate: @{FXFormFieldType: FXFormFieldTypeImage,\n                                  FXFormFieldCell: [FXFormImagePickerCell class]}\n           };\n  }\n. Awesome! Thanks you!!!\n. Hey Nick,\nI noticed that the FXFormImagePickerCell's Cancel button is not working.\nMaybe the problem is not setting the handler in [alert addAction:[UIAlertAction actionWithTitle:NSLocalizedString(@\"Cancel\", nil) style:UIAlertActionStyleCancel handler:NULL]];\n\nDavid\n. It's the UIActionSheet's cancel button that's not working.\nI'm using 1.2.6 with iOS 7.1.1 where I see this problem.\nI've tested on iOS 8 and it's working perfectly with tint color set as well, but with iOS 7, it does not work.\n. Thank you!\n. I'm sorry. It's a false alarm.\n\nThe problem was I was calling the following code in my custom cell update method:\n\n// resize the tableview if required\n    id responder = [self nextResponder];\n    while (responder)\n    {\n        if ([responder respondsToSelector:@selector(beginUpdates)] &&\n            [responder respondsToSelector:@selector(endUpdates)])\n        {\n            [responder beginUpdates];\n            [responder endUpdates];\n            break;\n        }\n        responder = [responder nextResponder];\n    }\n. Duplicate issue. See https://github.com/nicklockwood/FXForms/issues/93\n. Right now, it seems the only thing I can obtain from the option's field is field.title.\n. I guess I'm just looking to customize the look/UI of option cell. What would be the best way to obtain the necessary data to do this?\n. I tried adding  {FXFormFieldViewController: field.viewController} in FXOptionsForm's  implementation, inside - (instancetype)initWithField:(FXFormField *)field\n\nThen in the cell prototype, \nFXFormViewController *fvc = self.field.viewController;\n    if ([fvc respondsToSelector:@selector(field)]) {\n        id optionObj = [fvc.field optionAtIndex:[self.field.key integerValue]];\n    }\n\nHowever, with little success...\n. The Field configuration was:\n@{FXFormFieldHeader: NSLocalizedString(@\"Insert Images HERE\", nil),\n                 FXFormFieldInline: @YES,\n                 FXFormFieldSortable:@YES,\n                 FXFormFieldTemplate: @{FXFormFieldType: FXFormFieldTypeImage,\n                                        FXFormFieldCell: [FXFormImagePickerCell class]},\n                 FXFormFieldTitle: NSLocalizedString(@\"Add Image\", nil)};\n. Using version 1.2.5, I was able to reproduce the crash on TemplateFieldsExample Xcode project using following form configurations:\n- (NSDictionary *)arrayWithTemplateField\n  {\n  return @{FXFormFieldTemplate: @{FXFormFieldType: FXFormFieldTypeImage,\n                                  FXFormFieldCell: [FXFormImagePickerCell class]}};\n  }\n- (NSDictionary *)sortableArrayWithTemplateField\n  {\n  return @{FXFormFieldSortable: @YES,\n           FXFormFieldTemplate: @{FXFormFieldType: FXFormFieldTypeImage,\n                                  FXFormFieldCell: [FXFormImagePickerCell class]}\n           };\n  }\n. Awesome! Thanks you!!!\n. Hey Nick,\nI noticed that the FXFormImagePickerCell's Cancel button is not working.\nMaybe the problem is not setting the handler in [alert addAction:[UIAlertAction actionWithTitle:NSLocalizedString(@\"Cancel\", nil) style:UIAlertActionStyleCancel handler:NULL]];\n\nDavid\n. It's the UIActionSheet's cancel button that's not working.\nI'm using 1.2.6 with iOS 7.1.1 where I see this problem.\nI've tested on iOS 8 and it's working perfectly with tint color set as well, but with iOS 7, it does not work.\n. Thank you!\n. ",
    "fblumenberg": "The contacts app is using the phone pad keyboard btw.\n. If you set an action for the FXFormFieldOptions, the tapping wil only activate the action and nnothing more. \n. The easiest way would be to add a `editable` property to the form and according to the value return different field definitions in the `fields` method. \n\n```\n- (NSArray *)fields\n{\n    if( self.isEditable )\n        return @[@\"field1\", ....];\n\n\n    return @[\n             @{FXFormFieldKey: @\"field1\", FXFormFieldType: @\"label\"}, ...\n             ];\n}\n```\n. The contacts app is using the phone pad keyboard btw.\n. If you set an action for the FXFormFieldOptions, the tapping wil only activate the action and nnothing more. \n. The easiest way would be to add a `editable` property to the form and according to the value return different field definitions in the `fields` method. \n\n```\n- (NSArray *)fields\n{\n    if( self.isEditable )\n        return @[@\"field1\", ....];\n\n\n    return @[\n             @{FXFormFieldKey: @\"field1\", FXFormFieldType: @\"label\"}, ...\n             ];\n}\n```\n. ",
    "adamcian": "Yup, the contacts app was my model for this change. Could be paired with a value transformer or validation function to ensure better formatting of the final value perhaps. Much easier to type the numbers quickly on the phone pad than the tiny top row of the other keyboards\n. Mostly it's a more direct approach to have field that can be hidden/shown dynamically based on dependent field values changing. We also use it for purely hidden fields that need more property definition, but I guess those examples could also be accomplished using field exclusion.\n. Bump on this issue. I'm seeing it for an NSArray property using:\n\n`FXFormFieldCell : [FXFormOptionPickerCell class],\nFXFormFieldInline : @YES,`\n\nAny ideas?\n. I found out why this is failing for inline FXOptionsForm. This code here won't work for inline:\n\n`//this nasty hack is necessary to pass the expected cell as the sender\n                FXFormController *formController = field.formController;\n                [formController enumerateFieldsWithBlock:^(FXFormField *f, NSIndexPath *indexPath) {\n                    if ([f.key isEqual:field.key])\n                    {\n                        field.action([formController.tableView cellForRowAtIndexPath:indexPath]);\n                    }\n                }];`\n\nThe keys will never match when it's inline b/c they are set to numeric strings instead of the original field's key so the action never fires. It already says that this is a nasty hack, and I can make it even nastier to work, but I'm wondering if we can clean this up more intelligently. \n\nAny thoughts?\n. It's rather easy with a field override:\n\n`- (NSDictionary *)overriddenField {\n    return  @{ @\"self.backgroundColor\" : [UIColor orangeColor] };\n}`\n\nObviously 'overridden' is the name of your field and make it whatever color you'd like.\n. Yup, the contacts app was my model for this change. Could be paired with a value transformer or validation function to ensure better formatting of the final value perhaps. Much easier to type the numbers quickly on the phone pad than the tiny top row of the other keyboards\n. Mostly it's a more direct approach to have field that can be hidden/shown dynamically based on dependent field values changing. We also use it for purely hidden fields that need more property definition, but I guess those examples could also be accomplished using field exclusion.\n. Bump on this issue. I'm seeing it for an NSArray property using:\n\n`FXFormFieldCell : [FXFormOptionPickerCell class],\nFXFormFieldInline : @YES,`\n\nAny ideas?\n. I found out why this is failing for inline FXOptionsForm. This code here won't work for inline:\n\n`//this nasty hack is necessary to pass the expected cell as the sender\n                FXFormController *formController = field.formController;\n                [formController enumerateFieldsWithBlock:^(FXFormField *f, NSIndexPath *indexPath) {\n                    if ([f.key isEqual:field.key])\n                    {\n                        field.action([formController.tableView cellForRowAtIndexPath:indexPath]);\n                    }\n                }];`\n\nThe keys will never match when it's inline b/c they are set to numeric strings instead of the original field's key so the action never fires. It already says that this is a nasty hack, and I can make it even nastier to work, but I'm wondering if we can clean this up more intelligently. \n\nAny thoughts?\n. It's rather easy with a field override:\n\n`- (NSDictionary *)overriddenField {\n    return  @{ @\"self.backgroundColor\" : [UIColor orangeColor] };\n}`\n\nObviously 'overridden' is the name of your field and make it whatever color you'd like.\n. ",
    "TUNER88": "+1 for this input\n. +1 for this input\n. ",
    "ghost": "I have similar problem using FXFormFieldOptions. The options are not loaded when the cell is tapped. I have no I dea why since it worked like two days ago and I havnt done any changes to the code\n. My problem was solved by embedding the form's ViewController to a Navigation Controller instead of embedding the form to Tab Bar Controller  directly.\n. > Nothing yet, as there are a few other issues to tackle first. \n\n@nicklockwood Is there a list somewhere? I'd be more than happy to help out in order to move this along.\n. Just a clarifying question. Do I have to make a new class  called productSelectionForm which has my products as properties instead of NS_ENUM and then subclass the FXFormViewController?\n. @nicklockwood  thanks alot. The new example is great.\n. Worth noting however, is that if I simply use the strings themselves or redefine the constants in my own project then it all works (obviously), just a bit annoying that the linker falls over for some reason!\n. I believe that's the case yeah, I think Apple realised that for swift to be even remotely successful it had to have complete interoperability with all things Objective-C.\n\nYeah, it is a weird one, some people seem to think it might be a cocoa pods issue where some build settings don't match quite right.\n\nI'm targeting 7.1 and using the standard (arm64, armv7) configuration on the pods and main projects and their targets.\n\nIf you can get it working that would be amazing!\n. :+1: I will attempt that when I'm next at the machine, that may just work, thanks!\n. However, a call to `self.view.endEditing` sorts this.\n. I have similar problem using FXFormFieldOptions. The options are not loaded when the cell is tapped. I have no I dea why since it worked like two days ago and I havnt done any changes to the code\n. My problem was solved by embedding the form's ViewController to a Navigation Controller instead of embedding the form to Tab Bar Controller  directly.\n. > Nothing yet, as there are a few other issues to tackle first. \n\n@nicklockwood Is there a list somewhere? I'd be more than happy to help out in order to move this along.\n. Just a clarifying question. Do I have to make a new class  called productSelectionForm which has my products as properties instead of NS_ENUM and then subclass the FXFormViewController?\n. @nicklockwood  thanks alot. The new example is great.\n. Worth noting however, is that if I simply use the strings themselves or redefine the constants in my own project then it all works (obviously), just a bit annoying that the linker falls over for some reason!\n. I believe that's the case yeah, I think Apple realised that for swift to be even remotely successful it had to have complete interoperability with all things Objective-C.\n\nYeah, it is a weird one, some people seem to think it might be a cocoa pods issue where some build settings don't match quite right.\n\nI'm targeting 7.1 and using the standard (arm64, armv7) configuration on the pods and main projects and their targets.\n\nIf you can get it working that would be amazing!\n. :+1: I will attempt that when I'm next at the machine, that may just work, thanks!\n. However, a call to `self.view.endEditing` sorts this.\n. ",
    "fdddf": "``` objc\nFXFormTextViewCell *cell = (FXFormTextViewCell *)[self.tableView cellForRowAtIndexPath:[NSIndexPath indexPathForRow:0 inSection:0]];\n    cell.textView.text = @\"http://\";\n    [cell.textView becomeFirstResponder];\n```\n\nI'm think this is a trick. Any other ways?\n. I need this feature too. \nSometime I need to disable some fields of a form, so fields can not be first responder and display keyboard. Think about that a form can be in edit mode or view mode.\n. ``` objc\nFXFormTextViewCell *cell = (FXFormTextViewCell *)[self.tableView cellForRowAtIndexPath:[NSIndexPath indexPathForRow:0 inSection:0]];\n    cell.textView.text = @\"http://\";\n    [cell.textView becomeFirstResponder];\n```\n\nI'm think this is a trick. Any other ways?\n. I need this feature too. \nSometime I need to disable some fields of a form, so fields can not be first responder and display keyboard. Think about that a form can be in edit mode or view mode.\n. ",
    "keithyeohh": "thanks for the quick reply nick :+1: \n. Hey Nick,\n\nI saw that, was wondering can be it style like a UIButton with image?\n. Here is my piece of codes, I manage to add custom button and action to the library, but may I know how to call the button action in my custom form class?\n\n```\n@interface FXFormButtonCell ()\n\n@property (nonatomic, strong) UIButton *button;\n\n@end\n\n@implementation FXFormButtonCell\n\n- (void)setUp\n{\n    [super setUp];\n\n    self.selectionStyle = UITableViewCellSelectionStyleNone;\n\n    self.button = [[UIButton alloc] initWithFrame:CGRectMake(0.f, 0.f, 280.f, 30.f)];\n    self.button.titleLabel.font = [Preferences getFontType:kFontTypeRegular\n                                                      size:18.f];\n    self.button.backgroundColor = [UIColor blackColor];\n\n    [self.button setTitle:NSLocalizedString(@\"CREATE ACCOUNT\", nil) forState:UIControlStateNormal];\n    [self.button setTitle:NSLocalizedString(@\"CREATE ACCOUNT\", nil) forState:UIControlStateSelected];\n    [self.button setTitle:NSLocalizedString(@\"CREATE ACCOUNT\", nil) forState:UIControlStateHighlighted];\n\n    [self.button setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];\n    [self.button setTitleColor:[UIColor whiteColor] forState:UIControlStateSelected];\n    [self.button setTitleColor:[UIColor whiteColor] forState:UIControlStateHighlighted];\n\n    [self.contentView addSubview:self.button];\n\n    self.button.center = self.contentView.center;\n\n    [self.button addTarget:self action:@selector(buttonAction:) forControlEvents:UIControlEventTouchUpInside];\n}\n\n- (void)buttonAction:(id)sender\n{\n    NSLog(@\"hello\");\n}\n```\n. Thanks a lot with all the kind helped Nick, you're just great ( ;\n. Hey Nick, \n\nSo 1 last question, since now we can add custom button there is there possible for us to customize the button in the Form Property? And also receive the Form property in the main view controller.\n\n```\n- (void)submitLoginForm:(UITableViewCell<FXFormFieldCell> *)cell\n{\n    LoginForm *form = cell.field.form;\n}\n```\n\n// I tried to change (CustomButtonTVCell <FXFormFieldCell> *) but it throw error\n\n**\\* Terminating app due to uncaught exception 'FXFormsException', reason: 'No object in the responder chain responds to the selector submitLoginForm'\n. Alright got it nick ( ;\n. thanks for the quick reply nick :+1: \n. Hey Nick,\n\nI saw that, was wondering can be it style like a UIButton with image?\n. Here is my piece of codes, I manage to add custom button and action to the library, but may I know how to call the button action in my custom form class?\n\n```\n@interface FXFormButtonCell ()\n\n@property (nonatomic, strong) UIButton *button;\n\n@end\n\n@implementation FXFormButtonCell\n\n- (void)setUp\n{\n    [super setUp];\n\n    self.selectionStyle = UITableViewCellSelectionStyleNone;\n\n    self.button = [[UIButton alloc] initWithFrame:CGRectMake(0.f, 0.f, 280.f, 30.f)];\n    self.button.titleLabel.font = [Preferences getFontType:kFontTypeRegular\n                                                      size:18.f];\n    self.button.backgroundColor = [UIColor blackColor];\n\n    [self.button setTitle:NSLocalizedString(@\"CREATE ACCOUNT\", nil) forState:UIControlStateNormal];\n    [self.button setTitle:NSLocalizedString(@\"CREATE ACCOUNT\", nil) forState:UIControlStateSelected];\n    [self.button setTitle:NSLocalizedString(@\"CREATE ACCOUNT\", nil) forState:UIControlStateHighlighted];\n\n    [self.button setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];\n    [self.button setTitleColor:[UIColor whiteColor] forState:UIControlStateSelected];\n    [self.button setTitleColor:[UIColor whiteColor] forState:UIControlStateHighlighted];\n\n    [self.contentView addSubview:self.button];\n\n    self.button.center = self.contentView.center;\n\n    [self.button addTarget:self action:@selector(buttonAction:) forControlEvents:UIControlEventTouchUpInside];\n}\n\n- (void)buttonAction:(id)sender\n{\n    NSLog(@\"hello\");\n}\n```\n. Thanks a lot with all the kind helped Nick, you're just great ( ;\n. Hey Nick, \n\nSo 1 last question, since now we can add custom button there is there possible for us to customize the button in the Form Property? And also receive the Form property in the main view controller.\n\n```\n- (void)submitLoginForm:(UITableViewCell<FXFormFieldCell> *)cell\n{\n    LoginForm *form = cell.field.form;\n}\n```\n\n// I tried to change (CustomButtonTVCell <FXFormFieldCell> *) but it throw error\n\n**\\* Terminating app due to uncaught exception 'FXFormsException', reason: 'No object in the responder chain responds to the selector submitLoginForm'\n. Alright got it nick ( ;\n. ",
    "cvconover": "The NSManagedObject continued to give me trouble. Turns out the state field\nwas not null so the error msg was just a red herring. Tried many different\ntweaks but nothing seemed to work\n\nTried to simplify things and follow the docs directly. No NSManagedObject,\nNo SplitViewController, etc. but I still can't seem to get anything\ndisplayed.\n\nI am using a Storyboard and you examples use separate xibs or no xib at\nall. I don't think that should matter but just thought I'd ask. I created\nthe ViewController just like the xib in one of the example app.\n\nBelow is a sample of the model I was trying to use as my FXForm. Any reason\nit wouldn't work just by looking at it?\n\nJust hoping I can get this working because really don't want to implement\nmy own forms.\n\nCheers\nCraig\n\n#import <Foundation/Foundation.h>\n#import <CoreData/CoreData.h>\n#import \"FXForms/FXForms.h\"\n\n@class game, gender, levels, player;\n\n@interface team : NSManagedObject <FXForm>\n\n{\n@private\n}\n@property (nonatomic, strong) NSString *state;\n@property (nonatomic, strong) NSNumber *wins;\n@property (nonatomic, strong) NSString *display_name;\n@property (nonatomic, strong) NSNumber *losses;\n@property (nonatomic, strong) NSSet *players;\n@property (nonatomic, strong) levels *level;\n@property (nonatomic, strong) NSSet *game;\n@end\n. I would send my project to you but it is quite large and it's a mess. It's been in the app store for 3 years and has been abused by unskilled developers and I am just starting to get a handle on cleaning it up myself. If you were really that motivated to help (I don't expect you to do so, since this is all open source) I have the code parked in a private github repo. But onto my progress from today...\n\nI have been digging into this quite a bit trying different ways to just get the simplest example of this working within my current app. I was finally able to do so using Storyboard, UIViewController and simple FXForm borrowed from one of the examples. So progress has been made - I see the form and it works, (although I will have some questions about dismissing the date picker and other non-keyboard editors).\n\nThen I took the simple FXForm example class (a subset of RegistrationForm fields) and replaced with my CoreData model class 'team' and the error message is the same but I think I was too sleep deprived yesterday to notice the log message above the exception: \n\nCoreData: error: Failed to call designated initializer on NSManagedObject class 'team' \n(the full error is listed at the end of this comment). \n\nAgain this is the same team object I tried before, but this error message indicates that the model object has not be instantiated and populated with data, yet. The reason the field name is different (state vs formal_name) is that I changed the order of the fields in the team class file on this test run.\n\nThis error makes sense on this latest test because I am not doing anything to select an instance of team from my SQLite db (via CoreData) because I was just testing the simplest of simple examples and just replace one FXForm with another, so there would not be any team record, just the model class as an FXForm.\n\nThe problem I have is that I am not sure how to use my model class as an FXForm properly. In the original test run from yesterday, I know that I have a team instance based on the fact that I am selecting one from a TableView and passing that object to the details view of the master/detail splitview. But either way, I need to show the form either with a current record populated in the form or a black form for insert mode. So what I don't get, just yet, is how FXForms knows where this data is (or what to do when it doesn't exist).\n\nDo you have any recommendations on how to proceed? Or possibly advice to stop trying because it won't work (at least not without a lot of effort). I really need a form framework and yours is the simplest yet most powerful I've seen of the few that I have found and played with. QuickDialog was a consideration but I couldn't get that to work at all. Much more complicated to integrate and looks to be a lot of boilerplate code to mess with.\n\n+++++++++++++++++\nFull error messages;\n2014-04-06 16:47:56.760 Lacrosse-Stats[984:60b] CoreData: error: Failed to call designated initializer on NSManagedObject class 'team' \n2014-04-06 16:47:56.795 Lacrosse-Stats[984:60b] **\\* Terminating app due to uncaught exception 'NSUnknownKeyException', reason: '[<team 0x16e5e830> valueForUndefinedKey:]: the entity (null) is not key value coding-compliant for the key \"formal_name\".'\n. If I were to be so bold to ask, I guess if I were to sum it all up, I'd really like to see an example using CoreData and SplitViewController for master/detail form use case, or just some steps. Probably trivial for most but I am still at the copy/paste/modify of developing iOS constructs.\n. Would it be proper to just create a separate FXForm class, get the CoreModel object and pass it to the FXForm? \n\nI think I am just not sure how data binding happens with respect to FXForms. I don't see any mention of operations or form mode (view, new, edit). I think if I understood that, I'd be good to go.\n. I'm not exactly sure how to describe the form interface but I'll do my best.\n- I should be able to display a list of records from a CoreData fetch.\n- Clicking on one of the records in the list (TableView) would display a ViewController that instantiates the FXForm with the currently selected record and the form would be in \"Edit\" mode. a) Perhaps it could be displayed in \"View\" mode first with option to go into \"Edit\" mode. b) Would be great if the model could just use <FXForm> as I was attempting.\n- If the ViewController that is loading the FXForm doesn't have any data for the CoreData record (nil model, I guess), then the form displays in \"New\" mode.\n- Ability to show default operation/action buttons for the form based on the mode: New (Cancel Save/Done), View (Edit), Edit (Cancel, Save/Done).\n\nAs an alternative to all that above, just an example of how to pass an CoreData object (populated or nil) to an FXForm and do the right thing: either show the data in the form for editing or show an empty form for inserting. \n\nI imagine that the FXForm would just be a copy of the CoreData model class but it wouldn't extend NSManagedObject. However, it would seem that this wouldn't be necessary. I would imagine there is some way to shoehorn the NSManagedObject into the current design so that it can be an <FXForm> and work properly. It's very possible that it does work but that I am just failing to do it the right way but I can't figure out what I am doing wrong.\n\nAgain, if you want to venture into my project, I can point you to the right branch and set of classes where I prototyped it and provide \"test run steps\". I just need your github username to add you as collaborator.\n. Thanks for making the change. I will fetch the changes and try to implement\nas you indicate and let you know how it goes.\n\nOn Mon, Apr 7, 2014 at 2:45 AM, Nick Lockwood notifications@github.comwrote:\n\n> I've made an update that prevents FXForms trying to instantiate\n> NSManagedObjects if they are null, which should hopefully fix the crashing.\n> \n> The scenario you've described should work fine if you use a custom form\n> controller and detect if the field value is nil, then show a new or edit\n> button accordingly.\n> \n> Let me know if you run into any more problems (or if the original problem\n> has not been solved).\n> \n> ## \n> \n> Reply to this email directly or view it on GitHubhttps://github.com/nicklockwood/FXForms/issues/42#issuecomment-39712321\n> .\n\n## \n\nPubNub http://pubnub.com - A Globally Distributed RealTime Network!\nLacrosse Stats Collection for the iPad - Get it on the App\nStorehttp://itunes.apple.com/us/app/x-static-apps-lacrosse-stats/id516229459?ls=1&mt=8\n. Sorry for the delay, I had some other pressing matters to attend to.\nThanks for the sample code. With a little bit of mods I was able to get a\nblank team form displayed and will continue to implement to completion.\nThis really helped alot.\n\ncheers\n\nOn Mon, Apr 7, 2014 at 10:00 AM, Bart Vandendriessche <\nnotifications@github.com> wrote:\n\n> @cvconover https://github.com/cvconover: I'm using FXForms with\n> CoreData, and the approach I'm using so far is as follows:\n> - For each NSManagedObject I create a category that implements FXFormso that I have a\n>   Customer and a Customer+Form.\n> - When creating a new Customer, I create an ad-hoc FXFormViewController,\n>   in my CustomersViewController I have something like this:\n> - (void)add:(id)sender {\n>   self.scratchContext = [[NSManagedObjectContext alloc] initWithConcurrencyType:NSMainQueueConcurrencyType];\n>   self.scratchContext.parentContext = [CoreDataStack defaultStack].managedObjectContext;\n>   \n>   FXFormViewController *vc = [[FXFormViewController alloc] init];\n>   vc.formController.form = [Customer insertInManagedObjectContext:self.scratchContext];\n>   vc.navigationItem.rightBarButtonItem = [[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemSave target:self action:@selector(save:)];\n>   [self.navigationController pushViewController:vc animated:YES];}\n> - (void)save:(id)sender {\n>   if (self.scratchContext && [self.scratchContext hasChanges]) {\n>       NSError *error;\n>       if ([self.scratchContext save:&error]) {\n>           [[CoreDataStack defaultStack] saveContext];\n>       } else {\n>           [[UIAlertView alertViewWithError:error] show];\n>       }\n>   }\n>   [self.navigationController popToViewController:self animated:YES];}\n>   - I have a readonly CustomerDetailViewController with an edit button,\n>     which looks something like this:\n> - (void)edit:(id)sender {\n>   FXFormViewController *vc = [[FXFormViewController alloc] init];\n>   vc.formController.form = self.customer;\n>   vc.navigationItem.rightBarButtonItem = [[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemSave target:self action:@selector(save:)];\n>   [self.navigationController pushViewController:vc animated:YES];}\n> - (void)save:(id)sender {\n>   [[MyAPI sharedAPI] saveEntity:self.customer];}\n> \n> ## \n> \n> Reply to this email directly or view it on GitHubhttps://github.com/nicklockwood/FXForms/issues/42#issuecomment-39755687\n> .\n\n## \n\nPubNub http://pubnub.com - A Globally Distributed RealTime Network!\nLacrosse Stats Collection for the iPad - Get it on the App\nStorehttp://itunes.apple.com/us/app/x-static-apps-lacrosse-stats/id516229459?ls=1&mt=8\n. @bartvandendriessche \nI have insert and edit forms working great with the SplitViewController but I am unable to correctly specify a button as an extra field with an action in the `Team+Form` file in the `extraFields` method:\n\n```\n- (NSArray *)extraFields {\n    return @[@{FXFormFieldTitle: @\"Players\", FXFormFieldHeader: @\"\", FXFormFieldAction: @\"showPlayers:\"}];\n}\n```\n\nIn my `TeamDetailViewController.m` (which is a subclass of `FXFormViewController` and uses the `FXFormControllerDelegate in the .h`), I have `showPlayers` defined:\n\n```\n- (void) showPlayers:(id) sender {\n    NSLog(@\"*** start showPlayers\");\n}\n```\n\nI have tried placing this method in the `TeamMasterViewController` and the `Team+Form` classes as well, but I always get the following exception. Is there any obvious reason why this selector is not being found (is null)\n\n```\n2014-04-11 20:21:16.722 Lacrosse-Stats[7782:60b] *** Terminating app due to uncaught exception 'NSInvalidArgumentException', reason: '*** -[team respondsToSelector:]: null selector'\n*** First throw call stack:\n(\n    0   CoreFoundation                      0x03a621e4 __exceptionPreprocess + 180\n    1   libobjc.A.dylib                     0x02f368e5 objc_exception_throw + 44\n    2   CoreFoundation                      0x03a61fbb +[NSException raise:format:] + 139\n    3   CoreData                            0x02c0ca09 -[NSManagedObject(_PFDynamicAccessorsAndPropertySupport) respondsToSelector:] + 89\n    4   Lacrosse-Stats                      0x000e02e0 +[FXFormField fieldsWithForm:controller:] + 1888\n    5   Lacrosse-Stats                      0x000e7dca +[FXFormSection sectionsWithForm:controller:] + 250\n    6   Lacrosse-Stats                      0x000eac53 -[FXFormController setForm:] + 131\n    7   Lacrosse-Stats                      0x000b8657 -[TeamDetailViewController addItem] + 487\n    8   Lacrosse-Stats                      0x000deb31 -[TeamMasterViewController insertNewObject:] + 129\n    9   libobjc.A.dylib                     0x02f48880 -[NSObject performSelector:withObject:withObject:] + 77\n    10  UIKit                               0x01c4c3b9 -[UIApplication\n```\n. @bartvandendriessche @nicklockwood \nThe exception is being thrown before `setAction`. I have very little understanding of `UIResponder` at this point and the responder chain but I thought I had everything setup for it to work. Here's what my class structure looks like.\n\n```\nNSManagedObject\n> Team\n>> Team+Form\n\n@interface TeamMasterViewController : UITableViewController\n@interface TeamDetailViewController : FXFormViewController <UISplitViewControllerDelegate, UITableViewDelegate, FXFormControllerDelegate>\n```\n\nI have have placed my selector in all of the above classes (both in .h and .m to make sure it was visible - still not comfortable with all of the visibility rules of members and methods - I'm long time recovering Java guy). But nothing seems to work.\n\nI do have one question. I see in the docs that the selector has the colon a appended: `@\"myAction:\"`. But in the sample code, the colon is not there: `@\"myAction\"`. Assuming the code sample is the proper way since it is in real code but thought I'd point that out in case this distinction is important (assuming it is) and doesn't cause confusion for others. For me, with or without the colon is failing.\n\nI will try the block route and see if I have success with that. I haven't had the opportunity to work with blocks yet (not the Objective-C flavor, plenty of other language experience, so assume it will be similar) so this is a good opportunity to learn.\n\nGood stuff though. I have functioning forms now and just need to keep layering in additional features and functionality available in FXForms.\n. Well that didn't take long. I understand the structure of the block, but not the implementation in this context. If what I want to do is load a new ViewController or save my form when my button is clicked. I am having trouble with the scope of objects. Sorry to lean on you guys so much but could I trouble you for a block field action example?\n. Hmm. That could get messy. I'm likely going to have a lot of these.\nStill not understanding why the selector route is failing. I'm sure I'm doing something subtle causing this to fail. I'll keep investigating in that area.\n. So I just thought to myself that maybe I am not creating the _virtual_ form field properly. So I commented it out and placed the field action on a _formal_ form field.\n\nSo I had this:\n`@{FXFormFieldTitle: @\"Submit\", FXFormFieldHeader: @\"\", FXFormFieldAction: @\"showPlayers\"},`\n\nThen I commented that out and moved the action to my _head coach_ form field:\n`@{FXFormFieldKey: @\"head_coach\", FXFormFieldTitle: @\"Head Coach\", FXFormFieldAction: @\"showPlayers\"},`\n\nAnd this worked perfectly. So what am I doing wrong with the virtual field field (meant to be a button)? Including my full tea+Form.h/.m files (inlined since attachments have to be pic files).  The code in question is the commented code for the \"Players\" field. What's interesting is that I removed the `FXFormFieldAction` from the virtual field and it gave the same exception so the selector is not the issue. So is it possible that the virtual field in a category is an issue? Let me know your thoughts on that.\n\nThanks for both of you for the prompt feedback. Much appreciated.\n\n```\n#import \"team.h\"\n@interface team (Form) <FXForm>\n@end \n```\n\n```\n#import \"team+Form.h\"\n@implementation team (Form)\n\n- (NSArray *)fields\n{\n    return @[\n             @{FXFormFieldKey: @\"formal_name\", FXFormFieldTitle: @\"Long Formal Name\", FXFormFieldPlaceholder: @\"The long, formal name of the team\"},\n             @{FXFormFieldKey: @\"display_name\", FXFormFieldTitle: @\"Short Display Name\", FXFormFieldPlaceholder: @\"A short name used for display in small places\"},\n             @{FXFormFieldKey: @\"mascot_name\", FXFormFieldTitle: @\"Mascot\"},\n             @{FXFormFieldKey: @\"city\", FXFormFieldTitle: @\"City\"},\n             @{FXFormFieldKey: @\"state\", FXFormFieldTitle: @\"State\", FXFormFieldOptions: @[@\"CA\",@\"MD\",@\"NY\"], FXFormFieldInline:@YES},\n             @{FXFormFieldKey: @\"color1\", FXFormFieldTitle: @\"Primary Color\"},\n             @{FXFormFieldKey: @\"color2\", FXFormFieldTitle: @\"Secondary Color\"},\n             @{FXFormFieldKey: @\"head_coach\", FXFormFieldTitle: @\"Head Coach\", FXFormFieldAction: @\"showPlayers\"},\n\n// This is the \"fields\" version (below is the \"extraFields\" version - don't enable both)\n//             @{FXFormFieldTitle: @\"Submit\", FXFormFieldHeader: @\"\", FXFormFieldAction: @\"showPlayers\"},             \n\n// if I remove the FXFormFieldAction, as I do here, this still throws the same exception when \n// attempting to create/display the form (crashes when I select an item in the master form).\n//             @{FXFormFieldTitle: @\"Submit\", FXFormFieldHeader: @\"\"},             \n             ];\n}\n\n//- (NSArray *)extraFields\n//{\n//    return @[@{FXFormFieldTitle: @\"Players\", FXFormFieldHeader: @\"\", FXFormFieldAction: @selector(showPlayers:)}];\n//}\n@end\n```\n. I just decided to put some breakpoints in the FXForms class in a few strategic spots and I figured out where it was crashing and at least why in my case, although the sample app doesn't suffer the same fate, so it must not be the real root cause.\n\nCrashes at this line:\nhttps://github.com/nicklockwood/FXForms/blob/master/FXForms/FXForms.m#L414\n\nIf I give my virtual field a `FXFormFieldKey` like this `FXFormFieldKey: @\"players\"`, or in full form:\n`@[@{FXFormFieldKey: @\"players\", FXFormFieldTitle: @\"Players\", FXFormFieldHeader: @\"\", FXFormFieldAction: @\"showPlayers\"}];`\n\nThen it doesn't crash and it works. But your sample app doesn't have a `FXFormFieldKey` and it works fine. So I'm not sure what else is at play here but might be worth putting in some sore to defensive coding here. I'm sure I must have something else misconfigured, but not sure what. But since it is working, I'll keep moving forward.\n. I want to close this thread off, but just want to understand one thing.\nDo I need to declare a `FXFormFieldKey` for a virtual field or am I doing something else wrong?\n\nMade lots of progress with using a list of values from a lookup table (a many to one relationship from team to gender). I have an NSValueTransformer working, which is pretty cool. And I have a better understanding of overriding `setValue:forKey/forUndefinedKey`.\n\n```\n@{FXFormFieldKey: @\"gender\", FXFormFieldTitle: @\"Gender\", \n            FXFormFieldOptions: genderObjects, FXFormFieldValueTransformer: \n            [[GenderValueTransformer alloc] init], FXFormFieldInline:@NO},\n```\n\nI am starting to understand the real power and flexibility, unfortunately, for you guys I guess, I have more questions more around the lines of best practices. I'll try to keep them as atomic and concise as possible. \n\nI hope I can contribute some sample apps back to this repo about working with NSManagedObject and some other features that are not as obvious or not shown in the current samples.\n\nGetting the hand of things thanks to the great responses from you two.\n\nCheers,\nCraig\n. I have a high level understanding that it is possible, just no actual insight on the implementation. I'm pretty good at figuring most things out but still pretty inexperienced with Objective-C and all its MVC goodness. \n\nI guess I just code up the popover UI details in the FXForm and use a custom action to call it up? But not sure if there is more to hooking it all up to the FXForm properly. _Can't see the forest for the trees_ as they say.\n\nA workaround is all I need and I'll work on making that happen (not as much of a priority as getting everything coded up first), but just throwing out a request for enhancement to deprecate the `FXFormFieldInline` and create something like `FXFormFieldEditorMode` with options like `Inline`, `NewScreen` and `Popover`. \n\nOr instead of deprecating `FXFormFieldInline`, have a new property called `FXFormFieldPopover`. When this property is enabled (`@YES`) and is an iPad form factor, then it overrides the `FXFormFieldInline` setting (no matter if it is `YES` or `NO`) and uses a popover, instead.\n\nIf I do end up figuring out a workaround I might continue to refactor it to do the above and submit a pull request, but that might be a bit of a stretch for me at this stage, but sometimes I surprise myself.\n. I have had quite a bit of success modifying FXForms to display in popover with relatively few lines of code added/modified. Speaks well of your framework architect skills, for sure. I'll test and polish a little more then submit pull request. Could be tonight, could be next week depending on the final bits of polishing left to be done but it is displaying a popover with the options. Very cool.\n. Success with first round of popover option. I will do a pull request and let you guys decide to use, enhance or toss. Needs a little more polish on the popover display but did best I could. Definitely room for more configuration options. Only tested on iPad with SplitViewController.\n. I am not sure, but assuming it does, where do I put that code? Do I override setValue:forKey?\n. Just my overall thoughts would be formalized events where values or actions could be altered. \nongotfocus/onlostfocus\nonsetvalue\netc\n\nSent from my iPhone\n\nOn Apr 14, 2014, at 2:31 PM, Nick Lockwood notifications@github.com wrote:\n\n> Yeah, I think you'd have to do it like that, which I guess is a little awkward. Let me think about this a bit more.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n. The NSManagedObject continued to give me trouble. Turns out the state field\nwas not null so the error msg was just a red herring. Tried many different\ntweaks but nothing seemed to work\n\nTried to simplify things and follow the docs directly. No NSManagedObject,\nNo SplitViewController, etc. but I still can't seem to get anything\ndisplayed.\n\nI am using a Storyboard and you examples use separate xibs or no xib at\nall. I don't think that should matter but just thought I'd ask. I created\nthe ViewController just like the xib in one of the example app.\n\nBelow is a sample of the model I was trying to use as my FXForm. Any reason\nit wouldn't work just by looking at it?\n\nJust hoping I can get this working because really don't want to implement\nmy own forms.\n\nCheers\nCraig\n\n#import <Foundation/Foundation.h>\n#import <CoreData/CoreData.h>\n#import \"FXForms/FXForms.h\"\n\n@class game, gender, levels, player;\n\n@interface team : NSManagedObject <FXForm>\n\n{\n@private\n}\n@property (nonatomic, strong) NSString *state;\n@property (nonatomic, strong) NSNumber *wins;\n@property (nonatomic, strong) NSString *display_name;\n@property (nonatomic, strong) NSNumber *losses;\n@property (nonatomic, strong) NSSet *players;\n@property (nonatomic, strong) levels *level;\n@property (nonatomic, strong) NSSet *game;\n@end\n. I would send my project to you but it is quite large and it's a mess. It's been in the app store for 3 years and has been abused by unskilled developers and I am just starting to get a handle on cleaning it up myself. If you were really that motivated to help (I don't expect you to do so, since this is all open source) I have the code parked in a private github repo. But onto my progress from today...\n\nI have been digging into this quite a bit trying different ways to just get the simplest example of this working within my current app. I was finally able to do so using Storyboard, UIViewController and simple FXForm borrowed from one of the examples. So progress has been made - I see the form and it works, (although I will have some questions about dismissing the date picker and other non-keyboard editors).\n\nThen I took the simple FXForm example class (a subset of RegistrationForm fields) and replaced with my CoreData model class 'team' and the error message is the same but I think I was too sleep deprived yesterday to notice the log message above the exception: \n\nCoreData: error: Failed to call designated initializer on NSManagedObject class 'team' \n(the full error is listed at the end of this comment). \n\nAgain this is the same team object I tried before, but this error message indicates that the model object has not be instantiated and populated with data, yet. The reason the field name is different (state vs formal_name) is that I changed the order of the fields in the team class file on this test run.\n\nThis error makes sense on this latest test because I am not doing anything to select an instance of team from my SQLite db (via CoreData) because I was just testing the simplest of simple examples and just replace one FXForm with another, so there would not be any team record, just the model class as an FXForm.\n\nThe problem I have is that I am not sure how to use my model class as an FXForm properly. In the original test run from yesterday, I know that I have a team instance based on the fact that I am selecting one from a TableView and passing that object to the details view of the master/detail splitview. But either way, I need to show the form either with a current record populated in the form or a black form for insert mode. So what I don't get, just yet, is how FXForms knows where this data is (or what to do when it doesn't exist).\n\nDo you have any recommendations on how to proceed? Or possibly advice to stop trying because it won't work (at least not without a lot of effort). I really need a form framework and yours is the simplest yet most powerful I've seen of the few that I have found and played with. QuickDialog was a consideration but I couldn't get that to work at all. Much more complicated to integrate and looks to be a lot of boilerplate code to mess with.\n\n+++++++++++++++++\nFull error messages;\n2014-04-06 16:47:56.760 Lacrosse-Stats[984:60b] CoreData: error: Failed to call designated initializer on NSManagedObject class 'team' \n2014-04-06 16:47:56.795 Lacrosse-Stats[984:60b] **\\* Terminating app due to uncaught exception 'NSUnknownKeyException', reason: '[<team 0x16e5e830> valueForUndefinedKey:]: the entity (null) is not key value coding-compliant for the key \"formal_name\".'\n. If I were to be so bold to ask, I guess if I were to sum it all up, I'd really like to see an example using CoreData and SplitViewController for master/detail form use case, or just some steps. Probably trivial for most but I am still at the copy/paste/modify of developing iOS constructs.\n. Would it be proper to just create a separate FXForm class, get the CoreModel object and pass it to the FXForm? \n\nI think I am just not sure how data binding happens with respect to FXForms. I don't see any mention of operations or form mode (view, new, edit). I think if I understood that, I'd be good to go.\n. I'm not exactly sure how to describe the form interface but I'll do my best.\n- I should be able to display a list of records from a CoreData fetch.\n- Clicking on one of the records in the list (TableView) would display a ViewController that instantiates the FXForm with the currently selected record and the form would be in \"Edit\" mode. a) Perhaps it could be displayed in \"View\" mode first with option to go into \"Edit\" mode. b) Would be great if the model could just use <FXForm> as I was attempting.\n- If the ViewController that is loading the FXForm doesn't have any data for the CoreData record (nil model, I guess), then the form displays in \"New\" mode.\n- Ability to show default operation/action buttons for the form based on the mode: New (Cancel Save/Done), View (Edit), Edit (Cancel, Save/Done).\n\nAs an alternative to all that above, just an example of how to pass an CoreData object (populated or nil) to an FXForm and do the right thing: either show the data in the form for editing or show an empty form for inserting. \n\nI imagine that the FXForm would just be a copy of the CoreData model class but it wouldn't extend NSManagedObject. However, it would seem that this wouldn't be necessary. I would imagine there is some way to shoehorn the NSManagedObject into the current design so that it can be an <FXForm> and work properly. It's very possible that it does work but that I am just failing to do it the right way but I can't figure out what I am doing wrong.\n\nAgain, if you want to venture into my project, I can point you to the right branch and set of classes where I prototyped it and provide \"test run steps\". I just need your github username to add you as collaborator.\n. Thanks for making the change. I will fetch the changes and try to implement\nas you indicate and let you know how it goes.\n\nOn Mon, Apr 7, 2014 at 2:45 AM, Nick Lockwood notifications@github.comwrote:\n\n> I've made an update that prevents FXForms trying to instantiate\n> NSManagedObjects if they are null, which should hopefully fix the crashing.\n> \n> The scenario you've described should work fine if you use a custom form\n> controller and detect if the field value is nil, then show a new or edit\n> button accordingly.\n> \n> Let me know if you run into any more problems (or if the original problem\n> has not been solved).\n> \n> ## \n> \n> Reply to this email directly or view it on GitHubhttps://github.com/nicklockwood/FXForms/issues/42#issuecomment-39712321\n> .\n\n## \n\nPubNub http://pubnub.com - A Globally Distributed RealTime Network!\nLacrosse Stats Collection for the iPad - Get it on the App\nStorehttp://itunes.apple.com/us/app/x-static-apps-lacrosse-stats/id516229459?ls=1&mt=8\n. Sorry for the delay, I had some other pressing matters to attend to.\nThanks for the sample code. With a little bit of mods I was able to get a\nblank team form displayed and will continue to implement to completion.\nThis really helped alot.\n\ncheers\n\nOn Mon, Apr 7, 2014 at 10:00 AM, Bart Vandendriessche <\nnotifications@github.com> wrote:\n\n> @cvconover https://github.com/cvconover: I'm using FXForms with\n> CoreData, and the approach I'm using so far is as follows:\n> - For each NSManagedObject I create a category that implements FXFormso that I have a\n>   Customer and a Customer+Form.\n> - When creating a new Customer, I create an ad-hoc FXFormViewController,\n>   in my CustomersViewController I have something like this:\n> - (void)add:(id)sender {\n>   self.scratchContext = [[NSManagedObjectContext alloc] initWithConcurrencyType:NSMainQueueConcurrencyType];\n>   self.scratchContext.parentContext = [CoreDataStack defaultStack].managedObjectContext;\n>   \n>   FXFormViewController *vc = [[FXFormViewController alloc] init];\n>   vc.formController.form = [Customer insertInManagedObjectContext:self.scratchContext];\n>   vc.navigationItem.rightBarButtonItem = [[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemSave target:self action:@selector(save:)];\n>   [self.navigationController pushViewController:vc animated:YES];}\n> - (void)save:(id)sender {\n>   if (self.scratchContext && [self.scratchContext hasChanges]) {\n>       NSError *error;\n>       if ([self.scratchContext save:&error]) {\n>           [[CoreDataStack defaultStack] saveContext];\n>       } else {\n>           [[UIAlertView alertViewWithError:error] show];\n>       }\n>   }\n>   [self.navigationController popToViewController:self animated:YES];}\n>   - I have a readonly CustomerDetailViewController with an edit button,\n>     which looks something like this:\n> - (void)edit:(id)sender {\n>   FXFormViewController *vc = [[FXFormViewController alloc] init];\n>   vc.formController.form = self.customer;\n>   vc.navigationItem.rightBarButtonItem = [[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemSave target:self action:@selector(save:)];\n>   [self.navigationController pushViewController:vc animated:YES];}\n> - (void)save:(id)sender {\n>   [[MyAPI sharedAPI] saveEntity:self.customer];}\n> \n> ## \n> \n> Reply to this email directly or view it on GitHubhttps://github.com/nicklockwood/FXForms/issues/42#issuecomment-39755687\n> .\n\n## \n\nPubNub http://pubnub.com - A Globally Distributed RealTime Network!\nLacrosse Stats Collection for the iPad - Get it on the App\nStorehttp://itunes.apple.com/us/app/x-static-apps-lacrosse-stats/id516229459?ls=1&mt=8\n. @bartvandendriessche \nI have insert and edit forms working great with the SplitViewController but I am unable to correctly specify a button as an extra field with an action in the `Team+Form` file in the `extraFields` method:\n\n```\n- (NSArray *)extraFields {\n    return @[@{FXFormFieldTitle: @\"Players\", FXFormFieldHeader: @\"\", FXFormFieldAction: @\"showPlayers:\"}];\n}\n```\n\nIn my `TeamDetailViewController.m` (which is a subclass of `FXFormViewController` and uses the `FXFormControllerDelegate in the .h`), I have `showPlayers` defined:\n\n```\n- (void) showPlayers:(id) sender {\n    NSLog(@\"*** start showPlayers\");\n}\n```\n\nI have tried placing this method in the `TeamMasterViewController` and the `Team+Form` classes as well, but I always get the following exception. Is there any obvious reason why this selector is not being found (is null)\n\n```\n2014-04-11 20:21:16.722 Lacrosse-Stats[7782:60b] *** Terminating app due to uncaught exception 'NSInvalidArgumentException', reason: '*** -[team respondsToSelector:]: null selector'\n*** First throw call stack:\n(\n    0   CoreFoundation                      0x03a621e4 __exceptionPreprocess + 180\n    1   libobjc.A.dylib                     0x02f368e5 objc_exception_throw + 44\n    2   CoreFoundation                      0x03a61fbb +[NSException raise:format:] + 139\n    3   CoreData                            0x02c0ca09 -[NSManagedObject(_PFDynamicAccessorsAndPropertySupport) respondsToSelector:] + 89\n    4   Lacrosse-Stats                      0x000e02e0 +[FXFormField fieldsWithForm:controller:] + 1888\n    5   Lacrosse-Stats                      0x000e7dca +[FXFormSection sectionsWithForm:controller:] + 250\n    6   Lacrosse-Stats                      0x000eac53 -[FXFormController setForm:] + 131\n    7   Lacrosse-Stats                      0x000b8657 -[TeamDetailViewController addItem] + 487\n    8   Lacrosse-Stats                      0x000deb31 -[TeamMasterViewController insertNewObject:] + 129\n    9   libobjc.A.dylib                     0x02f48880 -[NSObject performSelector:withObject:withObject:] + 77\n    10  UIKit                               0x01c4c3b9 -[UIApplication\n```\n. @bartvandendriessche @nicklockwood \nThe exception is being thrown before `setAction`. I have very little understanding of `UIResponder` at this point and the responder chain but I thought I had everything setup for it to work. Here's what my class structure looks like.\n\n```\nNSManagedObject\n> Team\n>> Team+Form\n\n@interface TeamMasterViewController : UITableViewController\n@interface TeamDetailViewController : FXFormViewController <UISplitViewControllerDelegate, UITableViewDelegate, FXFormControllerDelegate>\n```\n\nI have have placed my selector in all of the above classes (both in .h and .m to make sure it was visible - still not comfortable with all of the visibility rules of members and methods - I'm long time recovering Java guy). But nothing seems to work.\n\nI do have one question. I see in the docs that the selector has the colon a appended: `@\"myAction:\"`. But in the sample code, the colon is not there: `@\"myAction\"`. Assuming the code sample is the proper way since it is in real code but thought I'd point that out in case this distinction is important (assuming it is) and doesn't cause confusion for others. For me, with or without the colon is failing.\n\nI will try the block route and see if I have success with that. I haven't had the opportunity to work with blocks yet (not the Objective-C flavor, plenty of other language experience, so assume it will be similar) so this is a good opportunity to learn.\n\nGood stuff though. I have functioning forms now and just need to keep layering in additional features and functionality available in FXForms.\n. Well that didn't take long. I understand the structure of the block, but not the implementation in this context. If what I want to do is load a new ViewController or save my form when my button is clicked. I am having trouble with the scope of objects. Sorry to lean on you guys so much but could I trouble you for a block field action example?\n. Hmm. That could get messy. I'm likely going to have a lot of these.\nStill not understanding why the selector route is failing. I'm sure I'm doing something subtle causing this to fail. I'll keep investigating in that area.\n. So I just thought to myself that maybe I am not creating the _virtual_ form field properly. So I commented it out and placed the field action on a _formal_ form field.\n\nSo I had this:\n`@{FXFormFieldTitle: @\"Submit\", FXFormFieldHeader: @\"\", FXFormFieldAction: @\"showPlayers\"},`\n\nThen I commented that out and moved the action to my _head coach_ form field:\n`@{FXFormFieldKey: @\"head_coach\", FXFormFieldTitle: @\"Head Coach\", FXFormFieldAction: @\"showPlayers\"},`\n\nAnd this worked perfectly. So what am I doing wrong with the virtual field field (meant to be a button)? Including my full tea+Form.h/.m files (inlined since attachments have to be pic files).  The code in question is the commented code for the \"Players\" field. What's interesting is that I removed the `FXFormFieldAction` from the virtual field and it gave the same exception so the selector is not the issue. So is it possible that the virtual field in a category is an issue? Let me know your thoughts on that.\n\nThanks for both of you for the prompt feedback. Much appreciated.\n\n```\n#import \"team.h\"\n@interface team (Form) <FXForm>\n@end \n```\n\n```\n#import \"team+Form.h\"\n@implementation team (Form)\n\n- (NSArray *)fields\n{\n    return @[\n             @{FXFormFieldKey: @\"formal_name\", FXFormFieldTitle: @\"Long Formal Name\", FXFormFieldPlaceholder: @\"The long, formal name of the team\"},\n             @{FXFormFieldKey: @\"display_name\", FXFormFieldTitle: @\"Short Display Name\", FXFormFieldPlaceholder: @\"A short name used for display in small places\"},\n             @{FXFormFieldKey: @\"mascot_name\", FXFormFieldTitle: @\"Mascot\"},\n             @{FXFormFieldKey: @\"city\", FXFormFieldTitle: @\"City\"},\n             @{FXFormFieldKey: @\"state\", FXFormFieldTitle: @\"State\", FXFormFieldOptions: @[@\"CA\",@\"MD\",@\"NY\"], FXFormFieldInline:@YES},\n             @{FXFormFieldKey: @\"color1\", FXFormFieldTitle: @\"Primary Color\"},\n             @{FXFormFieldKey: @\"color2\", FXFormFieldTitle: @\"Secondary Color\"},\n             @{FXFormFieldKey: @\"head_coach\", FXFormFieldTitle: @\"Head Coach\", FXFormFieldAction: @\"showPlayers\"},\n\n// This is the \"fields\" version (below is the \"extraFields\" version - don't enable both)\n//             @{FXFormFieldTitle: @\"Submit\", FXFormFieldHeader: @\"\", FXFormFieldAction: @\"showPlayers\"},             \n\n// if I remove the FXFormFieldAction, as I do here, this still throws the same exception when \n// attempting to create/display the form (crashes when I select an item in the master form).\n//             @{FXFormFieldTitle: @\"Submit\", FXFormFieldHeader: @\"\"},             \n             ];\n}\n\n//- (NSArray *)extraFields\n//{\n//    return @[@{FXFormFieldTitle: @\"Players\", FXFormFieldHeader: @\"\", FXFormFieldAction: @selector(showPlayers:)}];\n//}\n@end\n```\n. I just decided to put some breakpoints in the FXForms class in a few strategic spots and I figured out where it was crashing and at least why in my case, although the sample app doesn't suffer the same fate, so it must not be the real root cause.\n\nCrashes at this line:\nhttps://github.com/nicklockwood/FXForms/blob/master/FXForms/FXForms.m#L414\n\nIf I give my virtual field a `FXFormFieldKey` like this `FXFormFieldKey: @\"players\"`, or in full form:\n`@[@{FXFormFieldKey: @\"players\", FXFormFieldTitle: @\"Players\", FXFormFieldHeader: @\"\", FXFormFieldAction: @\"showPlayers\"}];`\n\nThen it doesn't crash and it works. But your sample app doesn't have a `FXFormFieldKey` and it works fine. So I'm not sure what else is at play here but might be worth putting in some sore to defensive coding here. I'm sure I must have something else misconfigured, but not sure what. But since it is working, I'll keep moving forward.\n. I want to close this thread off, but just want to understand one thing.\nDo I need to declare a `FXFormFieldKey` for a virtual field or am I doing something else wrong?\n\nMade lots of progress with using a list of values from a lookup table (a many to one relationship from team to gender). I have an NSValueTransformer working, which is pretty cool. And I have a better understanding of overriding `setValue:forKey/forUndefinedKey`.\n\n```\n@{FXFormFieldKey: @\"gender\", FXFormFieldTitle: @\"Gender\", \n            FXFormFieldOptions: genderObjects, FXFormFieldValueTransformer: \n            [[GenderValueTransformer alloc] init], FXFormFieldInline:@NO},\n```\n\nI am starting to understand the real power and flexibility, unfortunately, for you guys I guess, I have more questions more around the lines of best practices. I'll try to keep them as atomic and concise as possible. \n\nI hope I can contribute some sample apps back to this repo about working with NSManagedObject and some other features that are not as obvious or not shown in the current samples.\n\nGetting the hand of things thanks to the great responses from you two.\n\nCheers,\nCraig\n. I have a high level understanding that it is possible, just no actual insight on the implementation. I'm pretty good at figuring most things out but still pretty inexperienced with Objective-C and all its MVC goodness. \n\nI guess I just code up the popover UI details in the FXForm and use a custom action to call it up? But not sure if there is more to hooking it all up to the FXForm properly. _Can't see the forest for the trees_ as they say.\n\nA workaround is all I need and I'll work on making that happen (not as much of a priority as getting everything coded up first), but just throwing out a request for enhancement to deprecate the `FXFormFieldInline` and create something like `FXFormFieldEditorMode` with options like `Inline`, `NewScreen` and `Popover`. \n\nOr instead of deprecating `FXFormFieldInline`, have a new property called `FXFormFieldPopover`. When this property is enabled (`@YES`) and is an iPad form factor, then it overrides the `FXFormFieldInline` setting (no matter if it is `YES` or `NO`) and uses a popover, instead.\n\nIf I do end up figuring out a workaround I might continue to refactor it to do the above and submit a pull request, but that might be a bit of a stretch for me at this stage, but sometimes I surprise myself.\n. I have had quite a bit of success modifying FXForms to display in popover with relatively few lines of code added/modified. Speaks well of your framework architect skills, for sure. I'll test and polish a little more then submit pull request. Could be tonight, could be next week depending on the final bits of polishing left to be done but it is displaying a popover with the options. Very cool.\n. Success with first round of popover option. I will do a pull request and let you guys decide to use, enhance or toss. Needs a little more polish on the popover display but did best I could. Definitely room for more configuration options. Only tested on iPad with SplitViewController.\n. I am not sure, but assuming it does, where do I put that code? Do I override setValue:forKey?\n. Just my overall thoughts would be formalized events where values or actions could be altered. \nongotfocus/onlostfocus\nonsetvalue\netc\n\nSent from my iPhone\n\nOn Apr 14, 2014, at 2:31 PM, Nick Lockwood notifications@github.com wrote:\n\n> Yeah, I think you'd have to do it like that, which I guess is a little awkward. Let me think about this a bit more.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n. ",
    "cyrilchandelier": "My bad, didn't see that a `[tableView reload]` is required in `viewWillAppear:`.\n\nFinally not a real issue, but why the cell is not deselecting by itself ?\n. My bad, didn't see that a `[tableView reload]` is required in `viewWillAppear:`.\n\nFinally not a real issue, but why the cell is not deselecting by itself ?\n. ",
    "nextorlg": "Thanks, that works. I will probably do a pull request in the future to add some need features for my project, I have workaround but they are not very neat.\n. I had the same problem, I just wanted to have the same font as in the parent field and I ended creating a whole FXFormFieldViewController to do so :(. I think i would be a good idea to make the options to inherit the style from the field.\n. Thanks, that works. I will probably do a pull request in the future to add some need features for my project, I have workaround but they are not very neat.\n. I had the same problem, I just wanted to have the same font as in the parent field and I ended creating a whole FXFormFieldViewController to do so :(. I think i would be a good idea to make the options to inherit the style from the field.\n. ",
    "itavero": "I guess I could do that. Doesn't really feel right, but I'll have another look at it.\n. I guess I could do that. Doesn't really feel right, but I'll have another look at it.\n. ",
    "nunofgs": "@nicklockwood I'm currently struggling with adding extra fields from the FormController instead of the actual Form model class. I would love to have that option.\n. @nicklockwood I'm currently struggling with adding extra fields from the FormController instead of the actual Form model class. I would love to have that option.\n. ",
    "turkenh": "+1 from me, I also need this.\n. +1 from me, I also need this.\n. ",
    "MP85": "Thank you Nick,\nI will use -setValue:forUndefinedKey: to prefill the values stored on the database..\nBut I can't understand how to get the value of the TextField that the user has edited before the submit..\nIn the submit method, if I defined a property I could get that value using \"form.myProperty\", but if I have no properties, how can I get the value of the text inputed in the textField?\n\nThank you and sorry\n. Thank you Nick!\n. Thank you Frank for the answer, I've already the property in my form and already use to set the field type (label for readonly and textField, date, etc. for others).\nMy need is to tell something like:\n\n```\nIF self.READONLY THEN\n    IF \"field1\" is NOT empty THEN \n        RETURN it\n    ELSE\n        NOT RETURN it \n```\n\nbut when i write the \"fields\" method I don't know if it's empty or not...\n. Thank you Nick,\nI will use -setValue:forUndefinedKey: to prefill the values stored on the database..\nBut I can't understand how to get the value of the TextField that the user has edited before the submit..\nIn the submit method, if I defined a property I could get that value using \"form.myProperty\", but if I have no properties, how can I get the value of the text inputed in the textField?\n\nThank you and sorry\n. Thank you Nick!\n. Thank you Frank for the answer, I've already the property in my form and already use to set the field type (label for readonly and textField, date, etc. for others).\nMy need is to tell something like:\n\n```\nIF self.READONLY THEN\n    IF \"field1\" is NOT empty THEN \n        RETURN it\n    ELSE\n        NOT RETURN it \n```\n\nbut when i write the \"fields\" method I don't know if it's empty or not...\n. ",
    "RobertAudi": "@nicklockwood A lot of `static const`s are private, as well as C functions. Examples:\n\n```\nstatic const CGFloat FXFormFieldMinLabelWidth = 97;\n```\n\n```\nstatic inline CGFloat FXFormLabelMinFontSize(UILabel *label)\n{\n    // ...\n}\n```\n\nThose, among others, are used in the implementation of `FXFormTextFieldCell`. So Copying the implementation as is won't work. The private stuff needs to be replaced.\n. Also, some private properties of `FXFormField` are used (`valueClass`) and other stuff that I didn't have time to look into, like `nextCell`.\n. @nicklockwood A lot of `static const`s are private, as well as C functions. Examples:\n\n```\nstatic const CGFloat FXFormFieldMinLabelWidth = 97;\n```\n\n```\nstatic inline CGFloat FXFormLabelMinFontSize(UILabel *label)\n{\n    // ...\n}\n```\n\nThose, among others, are used in the implementation of `FXFormTextFieldCell`. So Copying the implementation as is won't work. The private stuff needs to be replaced.\n. Also, some private properties of `FXFormField` are used (`valueClass`) and other stuff that I didn't have time to look into, like `nextCell`.\n. ",
    "jpaas": "I also tried subclassing and creating an alternative implementation of FXFormTextFieldCell and it was quite difficult because so much of its implementation and dependencies are private. In the end I ended up just creating my own local copy of FXForms.m so that I could add my specialization to it.\n. I also tried subclassing and creating an alternative implementation of FXFormTextFieldCell and it was quite difficult because so much of its implementation and dependencies are private. In the end I ended up just creating my own local copy of FXForms.m so that I could add my specialization to it.\n. ",
    "kiopro": "Hello , i use way from #60 and this code. It's hack, but this works good >:)\n\n```\n- (CGFloat) tableView:(UITableView *)tableView heightForHeaderInSection:(NSInteger)section\n{\n    if (section == 0)\n        return 0.000000000000000001f;\n    return 32.0f;\n}\n```\n. Hello , i use way from #60 and this code. It's hack, but this works good >:)\n\n```\n- (CGFloat) tableView:(UITableView *)tableView heightForHeaderInSection:(NSInteger)section\n{\n    if (section == 0)\n        return 0.000000000000000001f;\n    return 32.0f;\n}\n```\n. ",
    "imaks": "@alextor Did that solution help? If so, this issue may be closed.\n\nP.S. `CGFLOAT_MIN` instead of `0.000000000000000001f` also works fine here.\n. @wimbledon This issue may be closed as it duplicates #113 which was already merged.\n. Does this issue still take place? If not it may be closed.\n. @sebinsua Does this issue still occur? If not it may be closed to minimize FXForms issues backlog.\n. This issue should be fixed in latest FXForms version, @justinmakaila can you confirm that so this issue can be closed?\n. @plandem This issue may be closed as it duplicates #171 which was already merged.\n. OK, I've come up with KVO on form fields changing. Thanks, Nick!\n. @alextor Did that solution help? If so, this issue may be closed.\n\nP.S. `CGFLOAT_MIN` instead of `0.000000000000000001f` also works fine here.\n. @wimbledon This issue may be closed as it duplicates #113 which was already merged.\n. Does this issue still take place? If not it may be closed.\n. @sebinsua Does this issue still occur? If not it may be closed to minimize FXForms issues backlog.\n. This issue should be fixed in latest FXForms version, @justinmakaila can you confirm that so this issue can be closed?\n. @plandem This issue may be closed as it duplicates #171 which was already merged.\n. OK, I've come up with KVO on form fields changing. Thanks, Nick!\n. ",
    "sprynmr": "Sorry, fixing this PR.\n. Sorry, fixing this PR.\n. ",
    "l4u": ":+1: for making `setUp` to be overridable \n. This might be related to #90\n. :+1: for making `setUp` to be overridable \n. This might be related to #90\n. ",
    "rickcc": "I have added a pull request that adds this feature - FXFormFieldReadonly: @YES will cause that field to be readonly.  This was added to the source for release 1.2.3 so may not support field types added after that version, although should be easy to wire up.\n. I have added a pull request that adds this feature - FXFormFieldReadonly: @YES will cause that field to be readonly.  This was added to the source for release 1.2.3 so may not support field types added after that version, although should be easy to wire up.\n. ",
    "kukat": "small hack for readonly field\n\n```\n@{FXFormFieldKey: @\"username\", @\"textField.enabled\": @(NO)}\n```\n\nOr for date picker:\n\n```\n@{FXFormFieldKey: @\"dob\", FXFormFieldTitle: @\"Date of birth\", FXFormFieldType: FXFormFieldTypeDate, @\"userInteractionEnabled\": @(NO)},\n```\n. +1 \n. +1\n. I have same problem on iOS 7.\n\nHSPreferencesViewController.h\n\n``` Objective-C\n#import \"FXForms.h\"\n\n@interface HSPreferencesViewController : FXFormViewController\n\n@end\n```\n\nHSPreferencesViewController.m\n\n``` Objective-C\n#import \"HSPreferencesViewController.h\"\n#import \"HSPreferencesForm.h\"\n\n@implementation HSPreferencesViewController\n\n- (void)viewDidLoad\n{\n    [super viewDidLoad];\n\n    self.formController.form = [[HSPreferencesForm alloc] init];\n}\n\n@end\n```\n\nPresent it\n\n``` Objective-C\nHSPreferencesViewController *fc = [[HSPreferencesViewController alloc] init];\n[self.navigationController pushViewController:fc animated:YES];\n```\n\nI have to force `tabelView` to reload in `viewWillAppear`,  to get form shows.\n\n``` Objective-C\n- (void)viewWillAppear:(BOOL)animated\n{\n    [super viewWillAppear:animated];\n    [self.formController.tableView reloadData];\n}\n```\n. I think it's better to subclass `FXFormTextFieldCell` if you need to customize the field a lot. \n. small hack for readonly field\n\n```\n@{FXFormFieldKey: @\"username\", @\"textField.enabled\": @(NO)}\n```\n\nOr for date picker:\n\n```\n@{FXFormFieldKey: @\"dob\", FXFormFieldTitle: @\"Date of birth\", FXFormFieldType: FXFormFieldTypeDate, @\"userInteractionEnabled\": @(NO)},\n```\n. +1 \n. +1\n. I have same problem on iOS 7.\n\nHSPreferencesViewController.h\n\n``` Objective-C\n#import \"FXForms.h\"\n\n@interface HSPreferencesViewController : FXFormViewController\n\n@end\n```\n\nHSPreferencesViewController.m\n\n``` Objective-C\n#import \"HSPreferencesViewController.h\"\n#import \"HSPreferencesForm.h\"\n\n@implementation HSPreferencesViewController\n\n- (void)viewDidLoad\n{\n    [super viewDidLoad];\n\n    self.formController.form = [[HSPreferencesForm alloc] init];\n}\n\n@end\n```\n\nPresent it\n\n``` Objective-C\nHSPreferencesViewController *fc = [[HSPreferencesViewController alloc] init];\n[self.navigationController pushViewController:fc animated:YES];\n```\n\nI have to force `tabelView` to reload in `viewWillAppear`,  to get form shows.\n\n``` Objective-C\n- (void)viewWillAppear:(BOOL)animated\n{\n    [super viewWillAppear:animated];\n    [self.formController.tableView reloadData];\n}\n```\n. I think it's better to subclass `FXFormTextFieldCell` if you need to customize the field a lot. \n. ",
    "DonnaLea": "I managed to do simple customization of the section headers using the appearance protocol like so:\n\n[[UILabel appearanceWhenContainedIn:[UITableViewHeaderFooterView class], nil] setTextColor:[UIColor redColor]];\n\nI think it's possible to provide a custom section header, but I haven't done that myself yet. Hope this helps in the mean time. \n. This sounds related, but I am also using a custom NSValueTransformer and found that with + (BOOL)allowsReverseTransformation { return YES; }  on FXForms v1.2.11 that it crashes while trying to display my options. But if I set it to NO, then it doesn't crash. I am in the process of upgrading from v1.1.6 so not sure which version started this problem, but I know it also didn't work with v1.2.10\n. Thanks! v1.2.12 worked for me\n. I managed to do simple customization of the section headers using the appearance protocol like so:\n\n[[UILabel appearanceWhenContainedIn:[UITableViewHeaderFooterView class], nil] setTextColor:[UIColor redColor]];\n\nI think it's possible to provide a custom section header, but I haven't done that myself yet. Hope this helps in the mean time. \n. This sounds related, but I am also using a custom NSValueTransformer and found that with + (BOOL)allowsReverseTransformation { return YES; }  on FXForms v1.2.11 that it crashes while trying to display my options. But if I set it to NO, then it doesn't crash. I am in the process of upgrading from v1.1.6 so not sure which version started this problem, but I know it also didn't work with v1.2.10\n. Thanks! v1.2.12 worked for me\n. ",
    "mbuchetics": "It's actually quite simple to do. `FXFormControllerDelegate` forwards all the `UITableView` delegate calls to your own custom UIViewController where you can override `viewForHeaderInSection` and provide your own header views. Great library!\n. It's actually quite simple to do. `FXFormControllerDelegate` forwards all the `UITableView` delegate calls to your own custom UIViewController where you can override `viewForHeaderInSection` and provide your own header views. Great library!\n. ",
    "boringusername99": "Good question but I've tried different fields and populating all of them.\nOn Apr 12, 2014 12:19 AM, \"Nick Lockwood\" notifications@github.com wrote:\n\n> It's probably a stupid question, but are you sure the address value of\n> your form isn't nil?\n> \n> ## \n> \n> Reply to this email directly or view it on GitHubhttps://github.com/nicklockwood/FXForms/issues/61#issuecomment-40273901\n> .\n. Solved! Thank you.\n\nMight be worth a note in the docs. It's not a library issue but as a\nrelative newbie, I would never have thought about needing to resign first\nresponder, even though it has bitten me a couple of times before.\n\nOn Sun, Apr 13, 2014 at 1:34 PM, Nick Lockwood notifications@github.comwrote:\n\n> Ah, yeah. Sorry, didn't think of that explanation. I should probably make\n> it resign responder automatically when you press a button.\n> \n> ## \n> \n> Reply to this email directly or view it on GitHubhttps://github.com/nicklockwood/FXForms/issues/61#issuecomment-40318878\n> .\n. Good question but I've tried different fields and populating all of them.\nOn Apr 12, 2014 12:19 AM, \"Nick Lockwood\" notifications@github.com wrote:\n\n> It's probably a stupid question, but are you sure the address value of\n> your form isn't nil?\n> \n> ## \n> \n> Reply to this email directly or view it on GitHubhttps://github.com/nicklockwood/FXForms/issues/61#issuecomment-40273901\n> .\n. Solved! Thank you.\n\nMight be worth a note in the docs. It's not a library issue but as a\nrelative newbie, I would never have thought about needing to resign first\nresponder, even though it has bitten me a couple of times before.\n\nOn Sun, Apr 13, 2014 at 1:34 PM, Nick Lockwood notifications@github.comwrote:\n\n> Ah, yeah. Sorry, didn't think of that explanation. I should probably make\n> it resign responder automatically when you press a button.\n> \n> ## \n> \n> Reply to this email directly or view it on GitHubhttps://github.com/nicklockwood/FXForms/issues/61#issuecomment-40318878\n> .\n. ",
    "hermanccw": "@jwow313 Just run into this myself, I think you have resign the current responder.  you can do that by [self.view endEditing:YES];\n. @jwow313 Just run into this myself, I think you have resign the current responder.  you can do that by [self.view endEditing:YES];\n. ",
    "gastonborba": "I update the version and it works great :thumbsup:  \nThanks \n. I update the version and it works great :thumbsup:  \nThanks \n. ",
    "eBurns": "Ouch.  Fixed typo here:\nhttps://github.com/boxer/FXForms/commit/5082e696fe88ab101e6ed1eec9a13c3b593e9bbe\n. Ouch.  Fixed typo here:\nhttps://github.com/boxer/FXForms/commit/5082e696fe88ab101e6ed1eec9a13c3b593e9bbe\n. ",
    "cakl": "oh, I'm sorry. Works like a charm. thx\n. +1\n. oh, I'm sorry. Works like a charm. thx\n. +1\n. ",
    "zrll2": "Hi Nick,\n\nForm validation is really the way to go. At least we can provide a mechanism for user to check input data first (by providing error styling and a call back method). Most of the times we just need a simple non-empty check.\n\nWhat do you think?\n. Hi Nick,\n\nForm validation is really the way to go. At least we can provide a mechanism for user to check input data first (by providing error styling and a call back method). Most of the times we just need a simple non-empty check.\n\nWhat do you think?\n. ",
    "Mazyod": "My issue with this is how to reset the view after the form detects an invalid input?\n. I had to go with `NSNotificationCenter`...\n. My issue with this is how to reset the view after the form detects an invalid input?\n. I had to go with `NSNotificationCenter`...\n. ",
    "tomj": "This would be the icing on the cake.  Happy to help with direction from @nicklockwood \n. I haven't looked at the code/implementation but this is a great idea IMO\n. This would be the icing on the cake.  Happy to help with direction from @nicklockwood \n. I haven't looked at the code/implementation but this is a great idea IMO\n. ",
    "safareli": "is there any example project of form validation with FXForm ?\n. is there any example project of form validation with FXForm ?\n. ",
    "plandem": "Previously i used ReactiveCocoa, but finally i tied of it and here is:\nhttps://github.com/plandem/FXModelValidation\n\nJust created, so probably will need some hotfixes.\n\nNot tested heavily with FXForm integration yet, but don't see any problems. The only feature that i have in my mind right now - auto add 'exception fields' to return fields from FXModelValidation as exception too.\n. Also it would be nice to have an option to set title for toolbar. Here is my current implementation (not at FXForm yet):\n\nhttps://www.dropbox.com/s/14pmbpl2iiht1wr/Screenshot%202014-08-16%2010.54.14.png\n. yep, caught self on same thoughts - hard to understand internals. Separated sources would be more nice. I read about private, but not sure that's enough reason.\n. Ok, in my case i need: set font, position title( textLabel), change height of cell. At other screen i need border for textfield, differ font, colors and padding.\n\nSent from iPhone\n\n> 16 \u00e0\u00e2\u00e3. 2014 \u00e3., \u00e2 1:17, Nick Lockwood notifications@github.com \u00ed\u00e0\u00ef\u00e8\u00f1\u00e0\u00eb(\u00e0):\n> \n> It's possible to do all of your cell styling in IB, although currently it's necessary to create a custom cell class for each distinct cell.xib (although the class need not do anything except extend FXFormBaseCell).\n> \n> Can you paste in some examples of the classes you've had to write? It may be that in some cases there was a better way, but in the cases where there wasn't, I'll see if I can improve the API.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n. another reason - in some cases i would like to use extended subclassing of existing UI controls, E.g. - advanced UITextEdit, but without subclassing(actually rewrite from scratch to repeat same functionalities from FXForm side, but to substitute only one line of code: self.textField= [UITextField alloc] init]) FXFormBaseCell that's not possible. I'm sure that's not very flexible pattern - rewrite FXForm to get same results, but with advanced UIControls.\n. i was sure author will close it :)\n. well...right now i dropped to use it, because it was just testing for me - so i can't remember case for sure. But anyway, there is no any example  how to use.\n\nP.S.: and yes, form was dynamic.\n. ok, i added support for FXForms (auto \"implement\" excludedFields to exclude new properties). There is an example with FXForms now.\n\nLooks, like the only feature that i'm missing right now - hide fields at runtime.\n. of course i can manually set for each options, but i want to use default controller for this case.\n. i see, it's different type of controllers, but i still want use same class as i used as root without overriding it. now i have to replace:\n\n```\n- (FXFormController *)formController\n```\n. #426\n. I'm not using Xcode, and how is it connected with method that can't be find? I'm not using iOS9 SDK, so right now i have to roll back to 1.2.13 to use it.\n. i see. thanks.\n. Previously i used ReactiveCocoa, but finally i tied of it and here is:\nhttps://github.com/plandem/FXModelValidation\n\nJust created, so probably will need some hotfixes.\n\nNot tested heavily with FXForm integration yet, but don't see any problems. The only feature that i have in my mind right now - auto add 'exception fields' to return fields from FXModelValidation as exception too.\n. Also it would be nice to have an option to set title for toolbar. Here is my current implementation (not at FXForm yet):\n\nhttps://www.dropbox.com/s/14pmbpl2iiht1wr/Screenshot%202014-08-16%2010.54.14.png\n. yep, caught self on same thoughts - hard to understand internals. Separated sources would be more nice. I read about private, but not sure that's enough reason.\n. Ok, in my case i need: set font, position title( textLabel), change height of cell. At other screen i need border for textfield, differ font, colors and padding.\n\nSent from iPhone\n\n> 16 \u00e0\u00e2\u00e3. 2014 \u00e3., \u00e2 1:17, Nick Lockwood notifications@github.com \u00ed\u00e0\u00ef\u00e8\u00f1\u00e0\u00eb(\u00e0):\n> \n> It's possible to do all of your cell styling in IB, although currently it's necessary to create a custom cell class for each distinct cell.xib (although the class need not do anything except extend FXFormBaseCell).\n> \n> Can you paste in some examples of the classes you've had to write? It may be that in some cases there was a better way, but in the cases where there wasn't, I'll see if I can improve the API.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n. another reason - in some cases i would like to use extended subclassing of existing UI controls, E.g. - advanced UITextEdit, but without subclassing(actually rewrite from scratch to repeat same functionalities from FXForm side, but to substitute only one line of code: self.textField= [UITextField alloc] init]) FXFormBaseCell that's not possible. I'm sure that's not very flexible pattern - rewrite FXForm to get same results, but with advanced UIControls.\n. i was sure author will close it :)\n. well...right now i dropped to use it, because it was just testing for me - so i can't remember case for sure. But anyway, there is no any example  how to use.\n\nP.S.: and yes, form was dynamic.\n. ok, i added support for FXForms (auto \"implement\" excludedFields to exclude new properties). There is an example with FXForms now.\n\nLooks, like the only feature that i'm missing right now - hide fields at runtime.\n. of course i can manually set for each options, but i want to use default controller for this case.\n. i see, it's different type of controllers, but i still want use same class as i used as root without overriding it. now i have to replace:\n\n```\n- (FXFormController *)formController\n```\n. #426\n. I'm not using Xcode, and how is it connected with method that can't be find? I'm not using iOS9 SDK, so right now i have to roll back to 1.2.13 to use it.\n. i see. thanks.\n. ",
    "neoneye": "+1\n. @GantMan sorry, I'm busy with other projects\n. +1\n. @GantMan sorry, I'm busy with other projects\n. ",
    "fprosper": "I have the very same question!\n. I tried the solution @bartvandendriessche provided but I wasn't able to make it work, and anyway I agree it was a little cumbersome, do you have anything in plan to make it a little more straightforward?\n. Thank you @nicklockwood, I tested the example and is working great, I'll proceed integrating it manually in my project, waiting for cocoapods repository to be updated at 1.1.6. Again, thanks.\n. Thanks, but I am not sure I am getting where to set it, I would expect a kind of FXFormFieldValue key? What I am trying to do is i.e. have province \"B\" displayed as field value in the table, and selected value in the picker:\n@{FXFormFieldKey: @\"province\",\n    FXFormFieldOptions:@[\"A\", \"B\", \"C\"],\n    FXFormFieldCell: [FXFormOptionPickerCell class]},\n. Yes, it works, thank you very much! \n. Cool, thanks, it works. I should have thought something like that. Cheers.\n. Ah good, I went through the documentation but could not see it, I might have missed something, anyway thanks.\n. Yes, \n\n```\nself.formController.form = self.form;\n[self.formController.tableView reloadData];\n```\n\nworks. Thank you Nick.\n. Ok, if that is the only way....only it seems a little too much just to change a title, I was hoping it was enough to set a property to override as usual i.e. \"childViewController.title\" = @\"new-title\"....\n. Genius! It works, thanks ;)\n. I have the very same question!\n. I tried the solution @bartvandendriessche provided but I wasn't able to make it work, and anyway I agree it was a little cumbersome, do you have anything in plan to make it a little more straightforward?\n. Thank you @nicklockwood, I tested the example and is working great, I'll proceed integrating it manually in my project, waiting for cocoapods repository to be updated at 1.1.6. Again, thanks.\n. Thanks, but I am not sure I am getting where to set it, I would expect a kind of FXFormFieldValue key? What I am trying to do is i.e. have province \"B\" displayed as field value in the table, and selected value in the picker:\n@{FXFormFieldKey: @\"province\",\n    FXFormFieldOptions:@[\"A\", \"B\", \"C\"],\n    FXFormFieldCell: [FXFormOptionPickerCell class]},\n. Yes, it works, thank you very much! \n. Cool, thanks, it works. I should have thought something like that. Cheers.\n. Ah good, I went through the documentation but could not see it, I might have missed something, anyway thanks.\n. Yes, \n\n```\nself.formController.form = self.form;\n[self.formController.tableView reloadData];\n```\n\nworks. Thank you Nick.\n. Ok, if that is the only way....only it seems a little too much just to change a title, I was hoping it was enough to set a property to override as usual i.e. \"childViewController.title\" = @\"new-title\"....\n. Genius! It works, thanks ;)\n. ",
    "kumargaurav89": "hi i am using the same approach to show the values. but now i want to show the values from my database instead of hardcoded. so can you please link me with 1 of the best example. and i have several option not 1. which call controller to select 1 value. for example gender and country in your example but you add the options under FormFields.json but in my case i can't specify the values because if can be 5 or 10 or any number.\n. i am using iOS. but still getting the same error. when i am trying to call the another view.\n\n2015-11-19 01:06:27.818 ******_**[5791:274702] *_\\* Terminating app due to uncaught exception 'NSInternalInconsistencyException', reason: 'Attempted to push a sub-viewController from a form that is not embedded inside a UINavigationController. That won't work!'\n**\\* First throw call stack:\n(\n    0   CoreFoundation                      0x000000010651af45 **exceptionPreprocess + 165\n    1   libobjc.A.dylib                     0x0000000108466deb objc_exception_throw + 48\n    2   CoreFoundation                      0x000000010651adaa +[NSException raise:format:arguments:] + 106\n    3   Foundation                          0x0000000107e8b5ee -[NSAssertionHandler handleFailureInMethod:object:file:lineNumber:description:] + 198\n    4   Simply Hearing Mobile               0x00000001062b33c3 -[FXFormDefaultCell didSelectWithTableView:controller:] + 6883\n    5   Simply Hearing Mobile               0x00000001062ad699 -[FXFormController tableView:didSelectRowAtIndexPath:] + 217\n    6   UIKit                               0x0000000106a07a21 -[UITableView _selectRowAtIndexPath:animated:scrollPosition:notifyDelegate:] + 1968\n    7   UIKit                               0x0000000106a07c76 -[UITableView _userSelectRowAtPendingSelectionIndexPath:] + 388\n    8   UIKit                               0x00000001068d31ba _runAfterCACommitDeferredBlocks + 317\n    9   UIKit                               0x00000001068e6396 _cleanUpAfterCAFlushAndRunDeferredBlocks + 95\n    10  UIKit                               0x00000001068f21c2 _afterCACommitHandler + 90\n    11  CoreFoundation                      0x0000000106446947 __CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION** + 23\n    12  CoreFoundation                      0x00000001064468b7 __CFRunLoopDoObservers + 391\n    13  CoreFoundation                      0x000000010643c50b __CFRunLoopRun + 1147\n    14  CoreFoundation                      0x000000010643be08 CFRunLoopRunSpecific + 488\n    15  GraphicsServices                    0x0000000109e0bad2 GSEventRunModal + 161\n    16  UIKit                               0x00000001068c730d UIApplicationMain + 171\n    17  Simply Hearing Mobile               0x0000000106278bdf main + 111\n    18  libdyld.dylib                       0x0000000108d8a92d start + 1\n)\nlibc++abi.dylib: terminating with uncaught exception of type NSException\n(lldb) \n. hi nicklockwood.\n\ni am using tab view controller, there is no navigation controller. so is there any way to solve this issue?\n. hi i am using the same approach to show the values. but now i want to show the values from my database instead of hardcoded. so can you please link me with 1 of the best example. and i have several option not 1. which call controller to select 1 value. for example gender and country in your example but you add the options under FormFields.json but in my case i can't specify the values because if can be 5 or 10 or any number.\n. i am using iOS. but still getting the same error. when i am trying to call the another view.\n\n2015-11-19 01:06:27.818 ******_**[5791:274702] *_\\* Terminating app due to uncaught exception 'NSInternalInconsistencyException', reason: 'Attempted to push a sub-viewController from a form that is not embedded inside a UINavigationController. That won't work!'\n**\\* First throw call stack:\n(\n    0   CoreFoundation                      0x000000010651af45 **exceptionPreprocess + 165\n    1   libobjc.A.dylib                     0x0000000108466deb objc_exception_throw + 48\n    2   CoreFoundation                      0x000000010651adaa +[NSException raise:format:arguments:] + 106\n    3   Foundation                          0x0000000107e8b5ee -[NSAssertionHandler handleFailureInMethod:object:file:lineNumber:description:] + 198\n    4   Simply Hearing Mobile               0x00000001062b33c3 -[FXFormDefaultCell didSelectWithTableView:controller:] + 6883\n    5   Simply Hearing Mobile               0x00000001062ad699 -[FXFormController tableView:didSelectRowAtIndexPath:] + 217\n    6   UIKit                               0x0000000106a07a21 -[UITableView _selectRowAtIndexPath:animated:scrollPosition:notifyDelegate:] + 1968\n    7   UIKit                               0x0000000106a07c76 -[UITableView _userSelectRowAtPendingSelectionIndexPath:] + 388\n    8   UIKit                               0x00000001068d31ba _runAfterCACommitDeferredBlocks + 317\n    9   UIKit                               0x00000001068e6396 _cleanUpAfterCAFlushAndRunDeferredBlocks + 95\n    10  UIKit                               0x00000001068f21c2 _afterCACommitHandler + 90\n    11  CoreFoundation                      0x0000000106446947 __CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION** + 23\n    12  CoreFoundation                      0x00000001064468b7 __CFRunLoopDoObservers + 391\n    13  CoreFoundation                      0x000000010643c50b __CFRunLoopRun + 1147\n    14  CoreFoundation                      0x000000010643be08 CFRunLoopRunSpecific + 488\n    15  GraphicsServices                    0x0000000109e0bad2 GSEventRunModal + 161\n    16  UIKit                               0x00000001068c730d UIApplicationMain + 171\n    17  Simply Hearing Mobile               0x0000000106278bdf main + 111\n    18  libdyld.dylib                       0x0000000108d8a92d start + 1\n)\nlibc++abi.dylib: terminating with uncaught exception of type NSException\n(lldb) \n. hi nicklockwood.\n\ni am using tab view controller, there is no navigation controller. so is there any way to solve this issue?\n. ",
    "wdcurry": "just testing examples.. tapping country in all randomly tested ones results in a crash.\n. Is this on the radar? It clearly worked before, and i have not had time to get into it.. and wondered if others have?\n\n{edit: apparently the country/locale code crash _in the simulator_ is a known Apple issue. You can see reference to it here: http://www.nonhumanrightsproject.org/2014/12/04/appellate-court-decision-in-tommy-case/}\n. i had similar thoughts, as using a stepper for age as a default mechanism is decidedly not an expected iPhone experience. I just removed it for the natural numeric input for now but figured the dial picker was more what was expected (even if many don't like it)\n. thanks kindly, for a simple answer, i just added item 0 as the unselected one, it essentially works the same, but will integrate these thoughts as time permits.\n. i discovered MNT and SER were returning nil but am able to protect against them causing issues. I must admit to a wee bit of confusion as my test code is showing nulls yet i am now seeing returns, for example \"Serbia\" is listed even though SER was returning nil.\n\n{snip}\n. If within the simulator, this is an Apple issue.. search all issues here and you will find a link i dropped recently for this.\n. thanks my friend, and again, awesome job.\n. I have not had time to get this to work properly yet, but this repo provides all the base required, just needed integration into fxforms:\n\nhttps://github.com/EddyBorja/MLPAutoCompleteTextField\n. @tzwjava: you are not returning the reference to self in your example.\n\n```\n- (id)init\n{\n    if ((self = [super init])) {\n        _myProperty = SOME_ENUM_VALUE;\n    }\n    return self;\n}\n```\n\nps: trying to drop code-format but it renders in one line, sorry..\n. just testing examples.. tapping country in all randomly tested ones results in a crash.\n. Is this on the radar? It clearly worked before, and i have not had time to get into it.. and wondered if others have?\n\n{edit: apparently the country/locale code crash _in the simulator_ is a known Apple issue. You can see reference to it here: http://www.nonhumanrightsproject.org/2014/12/04/appellate-court-decision-in-tommy-case/}\n. i had similar thoughts, as using a stepper for age as a default mechanism is decidedly not an expected iPhone experience. I just removed it for the natural numeric input for now but figured the dial picker was more what was expected (even if many don't like it)\n. thanks kindly, for a simple answer, i just added item 0 as the unselected one, it essentially works the same, but will integrate these thoughts as time permits.\n. i discovered MNT and SER were returning nil but am able to protect against them causing issues. I must admit to a wee bit of confusion as my test code is showing nulls yet i am now seeing returns, for example \"Serbia\" is listed even though SER was returning nil.\n\n{snip}\n. If within the simulator, this is an Apple issue.. search all issues here and you will find a link i dropped recently for this.\n. thanks my friend, and again, awesome job.\n. I have not had time to get this to work properly yet, but this repo provides all the base required, just needed integration into fxforms:\n\nhttps://github.com/EddyBorja/MLPAutoCompleteTextField\n. @tzwjava: you are not returning the reference to self in your example.\n\n```\n- (id)init\n{\n    if ((self = [super init])) {\n        _myProperty = SOME_ENUM_VALUE;\n    }\n    return self;\n}\n```\n\nps: trying to drop code-format but it renders in one line, sorry..\n. ",
    "tleafs": "Brilliant!  The - (NSString *)fieldDescription took care of the issue.\n. Brilliant!  The - (NSString *)fieldDescription took care of the issue.\n. ",
    "hanneskaeufler": "I can confirm this as well. The cell grows larger than the input text would require.\n. I think this happens because the calculation does not user the correct fontSize here: https://github.com/nicklockwood/FXForms/blob/master/FXForms/FXForms.m#L2647\nMaybe the set font should be considered here?\n. I can confirm this as well. The cell grows larger than the input text would require.\n. I think this happens because the calculation does not user the correct fontSize here: https://github.com/nicklockwood/FXForms/blob/master/FXForms/FXForms.m#L2647\nMaybe the set font should be considered here?\n. ",
    "davidogren": "I just wanted to go on record as being very interested in this pull. I had started down a similar path myself when saw I Bart's code.\n\nNick: Thanks for FXForms. It's saved me a lot of time. Any advice regarding the path you intend to take for one-to-many would be helpful.\n\nBart: Great stuff. I think I'm going to at least try using your patches for a bit; I'll let you know if I have any feedback.\n. I sent a one-line patch to your branch that fixes an issue with disclosure indicators.\n. So, as your pull request stands right now, NSDictionary will not work as a field. At first I started working on fixing that. And then I realized that it might be impossible to make a fix as there would be no way to determine what key to associate a new object with when inserting new items. What is your opinion on that? It certainly would be possible to allow dictionaries but not allow insertion.\n\nOne of the reasons I ask is your \"key value\" comment above. Will key-value cells require dictionary support?\n. Just to follow up, I am currently abandoning work on this pull request. Too many issues remain, especially ones like the above that will likely require some architectural choices. (See my pull request on @bartvandendriessche 's fork to see a discussion on some of the outstanding issues.)\n\nJust to amend my earlier comment expressing interest in this feature:\n\nOne-To-Many is close to a make or break or feature for me. I started using FXForms to handle some of the configuration in my app. The problem quickly came up, however, that three of the five objects that I needed to build configuration screens for had critical one-to-many relationships. I was able to work around the lack of one-to-many (in part because of how flexible FXForms is), but I've found myself spending more time working around one-to-many than it would have taken to just build a view controller. And making too many design concessions.\n\nBart's pull request seemed an easy fix. But the edge cases still needed too much work and I'm spending too much effort trying to avoid writing five view controllers.\n\nThe bottom line of which is that I'm still very interested in official one-to-many FXForms support. But this pull request needs work, including architectural review. So I'm going to have to go a different direction for now.\n. I just wanted to go on record as being very interested in this pull. I had started down a similar path myself when saw I Bart's code.\n\nNick: Thanks for FXForms. It's saved me a lot of time. Any advice regarding the path you intend to take for one-to-many would be helpful.\n\nBart: Great stuff. I think I'm going to at least try using your patches for a bit; I'll let you know if I have any feedback.\n. I sent a one-line patch to your branch that fixes an issue with disclosure indicators.\n. So, as your pull request stands right now, NSDictionary will not work as a field. At first I started working on fixing that. And then I realized that it might be impossible to make a fix as there would be no way to determine what key to associate a new object with when inserting new items. What is your opinion on that? It certainly would be possible to allow dictionaries but not allow insertion.\n\nOne of the reasons I ask is your \"key value\" comment above. Will key-value cells require dictionary support?\n. Just to follow up, I am currently abandoning work on this pull request. Too many issues remain, especially ones like the above that will likely require some architectural choices. (See my pull request on @bartvandendriessche 's fork to see a discussion on some of the outstanding issues.)\n\nJust to amend my earlier comment expressing interest in this feature:\n\nOne-To-Many is close to a make or break or feature for me. I started using FXForms to handle some of the configuration in my app. The problem quickly came up, however, that three of the five objects that I needed to build configuration screens for had critical one-to-many relationships. I was able to work around the lack of one-to-many (in part because of how flexible FXForms is), but I've found myself spending more time working around one-to-many than it would have taken to just build a view controller. And making too many design concessions.\n\nBart's pull request seemed an easy fix. But the edge cases still needed too much work and I'm spending too much effort trying to avoid writing five view controllers.\n\nThe bottom line of which is that I'm still very interested in official one-to-many FXForms support. But this pull request needs work, including architectural review. So I'm going to have to go a different direction for now.\n. ",
    "7wonders": "@bartvandendriessche - did you get the ToMany coredata relations working and do you have any examples? I am struggling bad :(\n. @bartvandendriessche - did you get the ToMany coredata relations working and do you have any examples? I am struggling bad :(\n. ",
    "jcayzac": "None of these two keyboards support negative numbers.\n. None of these two keyboards support negative numbers.\n. ",
    "sdesimone": "Thanks for your comment. I am sorry, I should have been more exact: it's not about memory leaking, it's about ever growing memory allocation at each reloadData, which is the sign of some dependency cycles somewhere preventing ARC from reclaiming memory.  I also verified that cells `dealloc` is never called when doing a reloadData, although I would expect it since there is not cell reuse. I added a picture to my initial issue description depicting the way memory grows after tapping seven times the submit button in BasicExample app after the change I mentioned.\n. Thanks for your comment. I am sorry, I should have been more exact: it's not about memory leaking, it's about ever growing memory allocation at each reloadData, which is the sign of some dependency cycles somewhere preventing ARC from reclaiming memory.  I also verified that cells `dealloc` is never called when doing a reloadData, although I would expect it since there is not cell reuse. I added a picture to my initial issue description depicting the way memory grows after tapping seven times the submit button in BasicExample app after the change I mentioned.\n. ",
    "gahms": "Just realized that pull request #39 probably is a more elegant solution to the same problem\n. Just realized that pull request #39 probably is a more elegant solution to the same problem\n. ",
    "barrettj": "I must have had an old release sitting in my downloads as I just double checked it and it worked fine.  Does this mean a value transformer is no longer necessary like listed in the ReadMe and FXForms will just assume the the bitmask values based on the order?\n. This seems like it might be related to another issue I'm experiencing: https://github.com/nicklockwood/FXForms/issues/330\n. Anyone have any ideas on this?\n. I believe 1.2.13 fixes this\n. I should add that I'm also experiencing this is my shipping apps, and have reverted to that last cocoapods release to fix it (previously I was using :head).\n. 1.2.13 appears to have fixed this\n. I must have had an old release sitting in my downloads as I just double checked it and it worked fine.  Does this mean a value transformer is no longer necessary like listed in the ReadMe and FXForms will just assume the the bitmask values based on the order?\n. This seems like it might be related to another issue I'm experiencing: https://github.com/nicklockwood/FXForms/issues/330\n. Anyone have any ideas on this?\n. I believe 1.2.13 fixes this\n. I should add that I'm also experiencing this is my shipping apps, and have reverted to that last cocoapods release to fix it (previously I was using :head).\n. 1.2.13 appears to have fixed this\n. ",
    "markrickert": "This is a great idea! @moliver816 would you update it and fix merge conflicts with current `master`?\n. This is a great idea! @moliver816 would you update it and fix merge conflicts with current `master`?\n. ",
    "fjcaetano": "Woohoo! 100th issue! :cake: :fireworks: \n. I figured what was happening: the switch represented an \"advanced mode\" in the form and changed it's fields. The problem is that I didn't set the action for the switch when in advanced mode. Sorry for wasting the 100th issue with such neglect. :grimacing: \n\nAnyway, I'd also like to thank for this project, it has already helped me a lot.\n. Woohoo! 100th issue! :cake: :fireworks: \n. I figured what was happening: the switch represented an \"advanced mode\" in the form and changed it's fields. The problem is that I didn't set the action for the switch when in advanced mode. Sorry for wasting the 100th issue with such neglect. :grimacing: \n\nAnyway, I'd also like to thank for this project, it has already helped me a lot.\n. ",
    "Dschee": "This is not a true solution right now because this will lead to unexpected behavior when one focuses manually on other fields without to click the return button if on the last input field.\n. This is not a true solution right now because this will lead to unexpected behavior when one focuses manually on other fields without to click the return button if on the last input field.\n. ",
    "hossamzee": "Thank you.\n. Thank you.\n. ",
    "tobihagemann": "This would be a great addition! :+1: Please merge! :smile:\n. This would be a great addition! :+1: Please merge! :smile:\n. ",
    "alvaromb": "I've merged the latest upstream :godmode:.\n. @nicklockwood please let me know if I can do anything to help you with this PR :smiley: \n. Ok, problem solved. I haven't had the latest version in my laptop.\n. I've merged the latest upstream :godmode:.\n. @nicklockwood please let me know if I can do anything to help you with this PR :smiley: \n. Ok, problem solved. I haven't had the latest version in my laptop.\n. ",
    "raudabaugh": "Second @MuscleRumble's suggestion!\n. Second @MuscleRumble's suggestion!\n. ",
    "ciponthenet": "This was a missing piece indeed. Tested with iOS8 - works great!\n. This was a missing piece indeed. Tested with iOS8 - works great!\n. ",
    "kevinnguy": "Please merge this to master! Tested and is a great addition to the image picker!\n. Thanks for merging this in! It's fully working in master but I'm seeing this message in my log when I take a picture:\n\n`Snapshotting a view that has not been rendered results in an empty snapshot. Ensure your view has been rendered at least once before snapshotting or snapshot after screen updates.`\n\nIt seems like it has to do with transitioning out of the image picker controller but I'm not sure what that means.\n. Please merge this to master! Tested and is a great addition to the image picker!\n. Thanks for merging this in! It's fully working in master but I'm seeing this message in my log when I take a picture:\n\n`Snapshotting a view that has not been rendered results in an empty snapshot. Ensure your view has been rendered at least once before snapshotting or snapshot after screen updates.`\n\nIt seems like it has to do with transitioning out of the image picker controller but I'm not sure what that means.\n. ",
    "acalbuquerque": "I'm having the same problem...any update about this?\n\nEDIT: I've a solution for that in stackoverflow. (http://stackoverflow.com/questions/19569688/right-aligned-uitextfield-spacebar-does-not-advance-cursor-in-ios-7)\n. There is any way to change the close button title based in a tag(or other attribute) of the field?\n. I'm having the same problem...any update about this?\n\nEDIT: I've a solution for that in stackoverflow. (http://stackoverflow.com/questions/19569688/right-aligned-uitextfield-spacebar-does-not-advance-cursor-in-ios-7)\n. There is any way to change the close button title based in a tag(or other attribute) of the field?\n. ",
    "realcarlos": "Thanks a lot ,but if there a option to set the limit when new a form ,will be perfect.\n. it should add a close button on the right top of picker ,I think\n. me too\n. ok, thanks\n. my mistake ,NSString can not be assign\n. Thanks a lot ,but if there a option to set the limit when new a form ,will be perfect.\n. it should add a close button on the right top of picker ,I think\n. me too\n. ok, thanks\n. my mistake ,NSString can not be assign\n. ",
    "adamac": "Thanks!\n. Thanks!\n. ",
    "TomKremer": "Excellent, please merge this feature, this is important to have.\n. Same thing here in Xcode 6 Beta 5.\n. Excellent, please merge this feature, this is important to have.\n. Same thing here in Xcode 6 Beta 5.\n. ",
    "nikolaykasyanov": ":thumbsup: \n. There are some indentation issues, by the way\n. @nicklockwood any chance of merging this?\n. @nicklockwood :thumbsup: \n. Ah, sorry, I have to fix email in commit\n. Fixed!\n. well that's weird then, this change fixed form leak for me. Will try to provide more information.\n. @nicklockwood I'm sorry, that was a subtle retain cycle on my side.\n. Well, I was able to work this around by overriding `delivery` & `payment` setters like this:\n\n``` objc\n- (void)setDelivery:(DeliveryForm *)delivery\n{\n    if (_delivery != nil) {\n        return;\n    }\n\n    _delivery = delivery;\n}\n```\n\nMy question about more generic approach is still valid though.\n. https://github.com/nicklockwood/FXForms/commit/627eda9e73233b45508b8232e7dd61c0c04c0251 should fix this\n. :thumbsup: \n. There are some indentation issues, by the way\n. @nicklockwood any chance of merging this?\n. @nicklockwood :thumbsup: \n. Ah, sorry, I have to fix email in commit\n. Fixed!\n. well that's weird then, this change fixed form leak for me. Will try to provide more information.\n. @nicklockwood I'm sorry, that was a subtle retain cycle on my side.\n. Well, I was able to work this around by overriding `delivery` & `payment` setters like this:\n\n``` objc\n- (void)setDelivery:(DeliveryForm *)delivery\n{\n    if (_delivery != nil) {\n        return;\n    }\n\n    _delivery = delivery;\n}\n```\n\nMy question about more generic approach is still valid though.\n. https://github.com/nicklockwood/FXForms/commit/627eda9e73233b45508b8232e7dd61c0c04c0251 should fix this\n. ",
    "aslisabanci": "+1\n. Hi guys with the write access :)\nI was wondering if you're thinking of merging this pull request in the near future or not. If not, I'll merge it myself on my local copy, because I'd like to use this.\nCan you please let us know about your thoughts on this?\n\nCheers!\n. I think this pull request can remove the lines \n\n#define APPLE_PRIVATE_API_UIBarButtonSystemItem_Previous ((UIBarButtonSystemItem)105)\n#define APPLE_PRIVATE_API_UIBarButtonSystemItem_Next ((UIBarButtonSystemItem)106)\n\nas well and create the next / previous bar buttons in a custom way to eliminate the risk of rejection.\n\nI can understand your concerns in your first comment. Thanks for sharing your thoughts @nicklockwood \n. +1\n. Hi guys with the write access :)\nI was wondering if you're thinking of merging this pull request in the near future or not. If not, I'll merge it myself on my local copy, because I'd like to use this.\nCan you please let us know about your thoughts on this?\n\nCheers!\n. I think this pull request can remove the lines \n\n#define APPLE_PRIVATE_API_UIBarButtonSystemItem_Previous ((UIBarButtonSystemItem)105)\n#define APPLE_PRIVATE_API_UIBarButtonSystemItem_Next ((UIBarButtonSystemItem)106)\n\nas well and create the next / previous bar buttons in a custom way to eliminate the risk of rejection.\n\nI can understand your concerns in your first comment. Thanks for sharing your thoughts @nicklockwood \n. ",
    "GantMan": "Agreed it should be optional.  Seems more and more common that people use this, but it's not for everyone.\n\nlooking forward to getting this one merged, so I can use it!\n. @neoneye can you take a glance?   Seems like this a heavily requested feature.   I know none of us want to manage an aging fork of FXForms.\n. When using a custom cell, I thought the method was `didSelectWithTableView` with a `controller` only, and then when I looked at the code, I saw it was `tableView` AND `controller`.   Figured I'd adjust the doc to reflect that, and while I'm in there, I might as well do whatever fix-ups I can to make myself useful.\n\nThanks so much for FXForms!  We're enjoying it a lot in the RubyMotion community.\n. O!  As you can see, I'm not familiar with that. I've seen it when the method name is the same as the first parameter, but not when they differ.  I came from Rails to iOS dev, so these things are foreign.\n\nThanks for the info!  \n. I think @interator is referring to the \"done\" button that would be provided on this merge:   https://github.com/nicklockwood/FXForms/pull/111\n. Agreed it should be optional.  Seems more and more common that people use this, but it's not for everyone.\n\nlooking forward to getting this one merged, so I can use it!\n. @neoneye can you take a glance?   Seems like this a heavily requested feature.   I know none of us want to manage an aging fork of FXForms.\n. When using a custom cell, I thought the method was `didSelectWithTableView` with a `controller` only, and then when I looked at the code, I saw it was `tableView` AND `controller`.   Figured I'd adjust the doc to reflect that, and while I'm in there, I might as well do whatever fix-ups I can to make myself useful.\n\nThanks so much for FXForms!  We're enjoying it a lot in the RubyMotion community.\n. O!  As you can see, I'm not familiar with that. I've seen it when the method name is the same as the first parameter, but not when they differ.  I came from Rails to iOS dev, so these things are foreign.\n\nThanks for the info!  \n. I think @interator is referring to the \"done\" button that would be provided on this merge:   https://github.com/nicklockwood/FXForms/pull/111\n. ",
    "danielbraun": "I tried to merge this PR into master on my fork, it has some weird conflicts - multiple implementations of functions, access to private variables. Even after I solved it, it doesn't seem to be doing anything.\nPerhaps the codebase has changed too much since then.\n. I ended up implementing what I needed myself. I needed a toolbar above each picker with a single \"Done\" button.\nWhat I did:\n1. Subclass each cell I wanted to modify - I already did this because I RTLed every (right to left - my app is in Hebrew). This is painful if you haven't done it already in your app.\n2. Create a UIToolbar\n3. Set its items to an array of UIBarButtonItems\n. I tried to merge this PR into master on my fork, it has some weird conflicts - multiple implementations of functions, access to private variables. Even after I solved it, it doesn't seem to be doing anything.\nPerhaps the codebase has changed too much since then.\n. I ended up implementing what I needed myself. I needed a toolbar above each picker with a single \"Done\" button.\nWhat I did:\n1. Subclass each cell I wanted to modify - I already did this because I RTLed every (right to left - my app is in Hebrew). This is painful if you haven't done it already in your app.\n2. Create a UIToolbar\n3. Set its items to an array of UIBarButtonItems\n. ",
    "haojianzong": "In addition to @danielbraun's comment, that's what I do to add a done button to a picker view:\n1. Subclass FXFormOptionPickerCell\n2. Override the inputAccessoryView method as following:\n\n```\n- (UIView *)inputAccessoryView\n{\n    UIToolbar *toolBar= [[UIToolbar alloc] initWithFrame:CGRectMake(0,0,320,44)];\n    UIBarButtonItem *barButtonDone = [[UIBarButtonItem alloc] initWithTitle:@\"Done\"\n                                                                      style:UIBarButtonItemStyleBordered target:self action:@selector(doneButtonTapped:)];\n    UIBarButtonItem *flex = [[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemFlexibleSpace target:self action:nil];\n    [toolBar setItems:[NSArray arrayWithObjects:flex, barButtonDone, nil]];\n    return toolBar;\n}\n```\n. In addition to @danielbraun's comment, that's what I do to add a done button to a picker view:\n1. Subclass FXFormOptionPickerCell\n2. Override the inputAccessoryView method as following:\n\n```\n- (UIView *)inputAccessoryView\n{\n    UIToolbar *toolBar= [[UIToolbar alloc] initWithFrame:CGRectMake(0,0,320,44)];\n    UIBarButtonItem *barButtonDone = [[UIBarButtonItem alloc] initWithTitle:@\"Done\"\n                                                                      style:UIBarButtonItemStyleBordered target:self action:@selector(doneButtonTapped:)];\n    UIBarButtonItem *flex = [[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemFlexibleSpace target:self action:nil];\n    [toolBar setItems:[NSArray arrayWithObjects:flex, barButtonDone, nil]];\n    return toolBar;\n}\n```\n. ",
    "sebinsua": "Has anybody looked at this?\n\nI'm currently trying to load a FXFormFieldViewController but am finding that it isn't getting the view layout from the storyboard so I will have to do all of the setup manually...\n. I have actually done that.\n\nInterestingly `class BasicRegistrationViewController: UIViewController, FXFormControllerDelegate` works but `class BasicRegistrationViewController: FXFormController` doesn't. I've been able to implement the project by working at a lower-level.\n\nBy the way, I just tried your project and it also fails for me in the same way:\n\n```\nCompileSwift normal i386 com.apple.xcode.tools.swift.compiler\n    cd /Users/sebinsua/Downloads/FormsSwiftTest\n    export PATH=\"/Applications/Xcode6-Beta3.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/usr/bin:/Applications/Xcode6-Beta3.app/Contents/Developer/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin\"\n    /Applications/Xcode6-Beta3.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/swift -target i386-apple-ios8.0 -module-name FormsSwiftTest -O0 -sdk /Applications/Xcode6-Beta3.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator8.0.sdk -g -module-cache-path /Users/sebinsua/Library/Developer/Xcode/DerivedData/ModuleCache -I /Users/sebinsua/Library/Developer/Xcode/DerivedData/FormsSwiftTest-ffjgtmaewnnekfeixfbceayrwaxc/Build/Products/Debug-iphonesimulator -F /Users/sebinsua/Library/Developer/Xcode/DerivedData/FormsSwiftTest-ffjgtmaewnnekfeixfbceayrwaxc/Build/Products/Debug-iphonesimulator -c -j8 /Users/sebinsua/Downloads/FormsSwiftTest/FormsSwiftTest/ViewController.swift /Users/sebinsua/Downloads/FormsSwiftTest/FormsSwiftTest/AppDelegate.swift -output-file-map /Users/sebinsua/Library/Developer/Xcode/DerivedData/FormsSwiftTest-ffjgtmaewnnekfeixfbceayrwaxc/Build/Intermediates/FormsSwiftTest.build/Debug-iphonesimulator/FormsSwiftTest.build/Objects-normal/i386/FormsSwiftTest-OutputFileMap.json -serialize-diagnostics -emit-dependencies -emit-module -emit-module-path /Users/sebinsua/Library/Developer/Xcode/DerivedData/FormsSwiftTest-ffjgtmaewnnekfeixfbceayrwaxc/Build/Intermediates/FormsSwiftTest.build/Debug-iphonesimulator/FormsSwiftTest.build/Objects-normal/i386/FormsSwiftTest.swiftmodule -Xcc -I/Users/sebinsua/Library/Developer/Xcode/DerivedData/FormsSwiftTest-ffjgtmaewnnekfeixfbceayrwaxc/Build/Intermediates/FormsSwiftTest.build/Debug-iphonesimulator/FormsSwiftTest.build/swift-overrides.hmap -Xcc -iquote -Xcc /Users/sebinsua/Library/Developer/Xcode/DerivedData/FormsSwiftTest-ffjgtmaewnnekfeixfbceayrwaxc/Build/Intermediates/FormsSwiftTest.build/Debug-iphonesimulator/FormsSwiftTest.build/FormsSwiftTest-generated-files.hmap -Xcc -I/Users/sebinsua/Library/Developer/Xcode/DerivedData/FormsSwiftTest-ffjgtmaewnnekfeixfbceayrwaxc/Build/Intermediates/FormsSwiftTest.build/Debug-iphonesimulator/FormsSwiftTest.build/FormsSwiftTest-own-target-headers.hmap -Xcc -I/Users/sebinsua/Library/Developer/Xcode/DerivedData/FormsSwiftTest-ffjgtmaewnnekfeixfbceayrwaxc/Build/Intermediates/FormsSwiftTest.build/Debug-iphonesimulator/FormsSwiftTest.build/FormsSwiftTest-all-target-headers.hmap -Xcc -iquote -Xcc /Users/sebinsua/Library/Developer/Xcode/DerivedData/FormsSwiftTest-ffjgtmaewnnekfeixfbceayrwaxc/Build/Intermediates/FormsSwiftTest.build/Debug-iphonesimulator/FormsSwiftTest.build/FormsSwiftTest-project-headers.hmap -Xcc -I/Users/sebinsua/Library/Developer/Xcode/DerivedData/FormsSwiftTest-ffjgtmaewnnekfeixfbceayrwaxc/Build/Products/Debug-iphonesimulator/include -Xcc -I/Applications/Xcode6-Beta3.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include -Xcc -I/Users/sebinsua/Library/Developer/Xcode/DerivedData/FormsSwiftTest-ffjgtmaewnnekfeixfbceayrwaxc/Build/Intermediates/FormsSwiftTest.build/Debug-iphonesimulator/FormsSwiftTest.build/DerivedSources/i386 -Xcc -I/Users/sebinsua/Library/Developer/Xcode/DerivedData/FormsSwiftTest-ffjgtmaewnnekfeixfbceayrwaxc/Build/Intermediates/FormsSwiftTest.build/Debug-iphonesimulator/FormsSwiftTest.build/DerivedSources -Xcc -DDEBUG=1 -emit-objc-header -emit-objc-header-path /Users/sebinsua/Library/Developer/Xcode/DerivedData/FormsSwiftTest-ffjgtmaewnnekfeixfbceayrwaxc/Build/Intermediates/FormsSwiftTest.build/Debug-iphonesimulator/FormsSwiftTest.build/Objects-normal/i386/FormsSwiftTest-Swift.h -import-objc-header /Users/sebinsua/Downloads/FormsSwiftTest/FormsSwiftTest/FormsSwiftTest-Bridging-Header.h\n\n0  swift                    0x000000010c4f7de8 llvm::sys::PrintStackTrace(__sFILE*) + 40\n1  swift                    0x000000010c4f82d4 SignalHandler(int) + 452\n2  libsystem_platform.dylib 0x00007fff950535aa _sigtramp + 26\n3  libsystem_platform.dylib 0x00007fff54374000 _sigtramp + 3207727728\n4  swift                    0x000000010bafeaff clang::declvisitor::Base<clang::declvisitor::make_const_ptr, (anonymous namespace)::SwiftDeclConverter, swift::Decl*>::Visit(clang::Decl const*) + 815\n5  swift                    0x000000010bafe74b swift::ClangImporter::Implementation::importDeclImpl(clang::NamedDecl const*, bool&, bool&) + 331\n6  swift                    0x000000010bb031f2 swift::ClangImporter::Implementation::importDeclAndCacheImpl(clang::NamedDecl const*, bool) + 226\n7  swift                    0x000000010bb0e450 (anonymous namespace)::SwiftDeclConverter::importObjCProtocols(swift::Decl*, clang::ObjCProtocolList const&) + 256\n8  swift                    0x000000010bb01589 clang::declvisitor::Base<clang::declvisitor::make_const_ptr, (anonymous namespace)::SwiftDeclConverter, swift::Decl*>::Visit(clang::Decl const*) + 11705\n9  swift                    0x000000010bafe74b swift::ClangImporter::Implementation::importDeclImpl(clang::NamedDecl const*, bool&, bool&) + 331\n10 swift                    0x000000010bb031f2 swift::ClangImporter::Implementation::importDeclAndCacheImpl(clang::NamedDecl const*, bool) + 226\n11 swift                    0x000000010baf6b7e swift::ClangImporter::lookupValue(swift::Identifier, swift::VisibleDeclConsumer&) + 510\n12 swift                    0x000000010baf7faa swift::ClangModuleUnit::lookupValue(llvm::ArrayRef<std::__1::pair<swift::Identifier, swift::SourceLoc> >, swift::DeclName, swift::NLKind, llvm::SmallVectorImpl<swift::ValueDecl*>&) const + 250\n13 swift                    0x000000010c80d42a swift::Module::lookupValue(llvm::ArrayRef<std::__1::pair<swift::Identifier, swift::SourceLoc> >, swift::DeclName, swift::NLKind, llvm::SmallVectorImpl<swift::ValueDecl*>&) const + 90\n14 swift                    0x000000010c815489 void lookupInModule<llvm::SmallSet<swift::CanType, 4u, (anonymous namespace)::SortCanType>, swift::namelookup::lookupInModule(swift::Module*, llvm::ArrayRef<std::__1::pair<swift::Identifier, swift::SourceLoc> >, swift::DeclName, llvm::SmallVectorImpl<swift::ValueDecl*>&, swift::NLKind, swift::namelookup::ResolutionKind, swift::LazyResolver*, swift::DeclContext const*, llvm::ArrayRef<std::__1::pair<llvm::ArrayRef<std::__1::pair<swift::Identifier, swift::SourceLoc> >, swift::Module*> >)::$_0>(swift::Module*, llvm::ArrayRef<std::__1::pair<swift::Identifier, swift::SourceLoc> >, llvm::SmallVectorImpl<swift::ValueDecl*>&, swift::namelookup::ResolutionKind, bool, swift::LazyResolver*, llvm::SmallDenseMap<std::__1::pair<llvm::ArrayRef<std::__1::pair<swift::Identifier, swift::SourceLoc> >, swift::Module*>, llvm::TinyPtrVector<swift::ValueDecl*>, 32u, llvm::DenseMapInfo<std::__1::pair<llvm::ArrayRef<std::__1::pair<swift::Identifier, swift::SourceLoc> >, swift::Module*> > >&, swift::DeclContext const*, bool, llvm::ArrayRef<std::__1::pair<llvm::ArrayRef<std::__1::pair<swift::Identifier, swift::SourceLoc> >, swift::Module*> >, swift::namelookup::lookupInModule(swift::Module*, llvm::ArrayRef<std::__1::pair<swift::Identifier, swift::SourceLoc> >, swift::DeclName, llvm::SmallVectorImpl<swift::ValueDecl*>&, swift::NLKind, swift::namelookup::ResolutionKind, swift::LazyResolver*, swift::DeclContext const*, llvm::ArrayRef<std::__1::pair<llvm::ArrayRef<std::__1::pair<swift::Identifier, swift::SourceLoc> >, swift::Module*> >)::$_0) + 265\n15 swift                    0x000000010c815aa7 void lookupInModule<llvm::SmallSet<swift::CanType, 4u, (anonymous namespace)::SortCanType>, swift::namelookup::lookupInModule(swift::Module*, llvm::ArrayRef<std::__1::pair<swift::Identifier, swift::SourceLoc> >, swift::DeclName, llvm::SmallVectorImpl<swift::ValueDecl*>&, swift::NLKind, swift::namelookup::ResolutionKind, swift::LazyResolver*, swift::DeclContext const*, llvm::ArrayRef<std::__1::pair<llvm::ArrayRef<std::__1::pair<swift::Identifier, swift::SourceLoc> >, swift::Module*> >)::$_0>(swift::Module*, llvm::ArrayRef<std::__1::pair<swift::Identifier, swift::SourceLoc> >, llvm::SmallVectorImpl<swift::ValueDecl*>&, swift::namelookup::ResolutionKind, bool, swift::LazyResolver*, llvm::SmallDenseMap<std::__1::pair<llvm::ArrayRef<std::__1::pair<swift::Identifier, swift::SourceLoc> >, swift::Module*>, llvm::TinyPtrVector<swift::ValueDecl*>, 32u, llvm::DenseMapInfo<std::__1::pair<llvm::ArrayRef<std::__1::pair<swift::Identifier, swift::SourceLoc> >, swift::Module*> > >&, swift::DeclContext const*, bool, llvm::ArrayRef<std::__1::pair<llvm::ArrayRef<std::__1::pair<swift::Identifier, swift::SourceLoc> >, swift::Module*> >, swift::namelookup::lookupInModule(swift::Module*, llvm::ArrayRef<std::__1::pair<swift::Identifier, swift::SourceLoc> >, swift::DeclName, llvm::SmallVectorImpl<swift::ValueDecl*>&, swift::NLKind, swift::namelookup::ResolutionKind, swift::LazyResolver*, swift::DeclContext const*, llvm::ArrayRef<std::__1::pair<llvm::ArrayRef<std::__1::pair<swift::Identifier, swift::SourceLoc> >, swift::Module*> >)::$_0) + 1831\n16 swift                    0x000000010c815353 swift::namelookup::lookupInModule(swift::Module*, llvm::ArrayRef<std::__1::pair<swift::Identifier, swift::SourceLoc> >, swift::DeclName, llvm::SmallVectorImpl<swift::ValueDecl*>&, swift::NLKind, swift::namelookup::ResolutionKind, swift::LazyResolver*, swift::DeclContext const*, llvm::ArrayRef<std::__1::pair<llvm::ArrayRef<std::__1::pair<swift::Identifier, swift::SourceLoc> >, swift::Module*> >) + 243\n17 swift                    0x000000010c81a043 swift::UnqualifiedLookup::UnqualifiedLookup(swift::DeclName, swift::DeclContext*, swift::LazyResolver*, swift::SourceLoc, bool) + 3635\n18 swift                    0x000000010c73d6e5 resolveIdentTypeComponent(swift::TypeChecker&, swift::DeclContext*, llvm::ArrayRef<swift::ComponentIdentTypeRepr*>, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, bool, swift::GenericTypeResolver*) + 549\n19 swift                    0x000000010c73d0d4 swift::TypeChecker::resolveIdentifierType(swift::DeclContext*, swift::IdentTypeRepr*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, bool, swift::GenericTypeResolver*, swift::ValueDecl*) + 116\n20 swift                    0x000000010c73e23a (anonymous namespace)::TypeResolver::resolveType(swift::TypeRepr*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>) + 90\n21 swift                    0x000000010c73d02d swift::TypeChecker::validateType(swift::TypeLoc&, swift::DeclContext*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, swift::GenericTypeResolver*, swift::ValueDecl*) + 221\n22 swift                    0x000000010c70bd4b swift::TypeChecker::checkInheritanceClause(swift::Decl*, swift::DeclContext*, swift::GenericTypeResolver*) + 2731\n23 swift                    0x000000010c70d927 swift::TypeChecker::validateDecl(swift::ValueDecl*, bool) + 311\n24 swift                    0x000000010baf8004 swift::ClangImporter::loadExtensions(swift::NominalTypeDecl*, unsigned int) + 84\n25 swift                    0x000000010c79feaf swift::ASTContext::loadExtensions(swift::NominalTypeDecl*, unsigned int) + 63\n26 swift                    0x000000010c7f86b3 swift::NominalTypeDecl::getExtensions() + 51\n27 swift                    0x000000010c70d83d swift::TypeChecker::validateDecl(swift::ValueDecl*, bool) + 77\n28 swift                    0x000000010c71a255 swift::ASTVisitor<(anonymous namespace)::DeclChecker, void, void, void, void, void, void>::visit(swift::Decl*) + 1045\n29 swift                    0x000000010c70d7b0 swift::TypeChecker::typeCheckDecl(swift::Decl*, bool) + 112\n30 swift                    0x000000010c6f81a8 swift::performTypeChecking(swift::SourceFile&, swift::TopLevelContext&, unsigned int) + 1272\n31 swift                    0x000000010bad1720 swift::CompilerInstance::performSema() + 2256\n32 swift                    0x000000010b88af8d frontend_main(llvm::ArrayRef<char const*>, char const*, void*) + 1885\n33 swift                    0x000000010b88a81d main + 1533\n34 libdyld.dylib            0x00007fff8d8815fd start + 1\n35 libdyld.dylib            0x0000000000000039 start + 1920461373\nStack dump:\n0.  Program arguments: /Applications/Xcode6-Beta3.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/swift -frontend -c -primary-file /Users/sebinsua/Downloads/FormsSwiftTest/FormsSwiftTest/ViewController.swift /Users/sebinsua/Downloads/FormsSwiftTest/FormsSwiftTest/AppDelegate.swift -enable-objc-attr-requires-objc-module -target i386-apple-ios8.0 -module-name FormsSwiftTest -sdk /Applications/Xcode6-Beta3.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator8.0.sdk -I /Users/sebinsua/Library/Developer/Xcode/DerivedData/FormsSwiftTest-ffjgtmaewnnekfeixfbceayrwaxc/Build/Products/Debug-iphonesimulator -F /Users/sebinsua/Library/Developer/Xcode/DerivedData/FormsSwiftTest-ffjgtmaewnnekfeixfbceayrwaxc/Build/Products/Debug-iphonesimulator -g -import-objc-header /Users/sebinsua/Downloads/FormsSwiftTest/FormsSwiftTest/FormsSwiftTest-Bridging-Header.h -module-cache-path /Users/sebinsua/Library/Developer/Xcode/DerivedData/ModuleCache -Xcc -I/Users/sebinsua/Library/Developer/Xcode/DerivedData/FormsSwiftTest-ffjgtmaewnnekfeixfbceayrwaxc/Build/Intermediates/FormsSwiftTest.build/Debug-iphonesimulator/FormsSwiftTest.build/swift-overrides.hmap -Xcc -iquote -Xcc /Users/sebinsua/Library/Developer/Xcode/DerivedData/FormsSwiftTest-ffjgtmaewnnekfeixfbceayrwaxc/Build/Intermediates/FormsSwiftTest.build/Debug-iphonesimulator/FormsSwiftTest.build/FormsSwiftTest-generated-files.hmap -Xcc -I/Users/sebinsua/Library/Developer/Xcode/DerivedData/FormsSwiftTest-ffjgtmaewnnekfeixfbceayrwaxc/Build/Intermediates/FormsSwiftTest.build/Debug-iphonesimulator/FormsSwiftTest.build/FormsSwiftTest-own-target-headers.hmap -Xcc -I/Users/sebinsua/Library/Developer/Xcode/DerivedData/FormsSwiftTest-ffjgtmaewnnekfeixfbceayrwaxc/Build/Intermediates/FormsSwiftTest.build/Debug-iphonesimulator/FormsSwiftTest.build/FormsSwiftTest-all-target-headers.hmap -Xcc -iquote -Xcc /Users/sebinsua/Library/Developer/Xcode/DerivedData/FormsSwiftTest-ffjgtmaewnnekfeixfbceayrwaxc/Build/Intermediates/FormsSwiftTest.build/Debug-iphonesimulator/FormsSwiftTest.build/FormsSwiftTest-project-headers.hmap -Xcc -I/Users/sebinsua/Library/Developer/Xcode/DerivedData/FormsSwiftTest-ffjgtmaewnnekfeixfbceayrwaxc/Build/Products/Debug-iphonesimulator/include -Xcc -I/Applications/Xcode6-Beta3.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include -Xcc -I/Users/sebinsua/Library/Developer/Xcode/DerivedData/FormsSwiftTest-ffjgtmaewnnekfeixfbceayrwaxc/Build/Intermediates/FormsSwiftTest.build/Debug-iphonesimulator/FormsSwiftTest.build/DerivedSources/i386 -Xcc -I/Users/sebinsua/Library/Developer/Xcode/DerivedData/FormsSwiftTest-ffjgtmaewnnekfeixfbceayrwaxc/Build/Intermediates/FormsSwiftTest.build/Debug-iphonesimulator/FormsSwiftTest.build/DerivedSources -Xcc -DDEBUG=1 -emit-module-doc-path /Users/sebinsua/Library/Developer/Xcode/DerivedData/FormsSwiftTest-ffjgtmaewnnekfeixfbceayrwaxc/Build/Intermediates/FormsSwiftTest.build/Debug-iphonesimulator/FormsSwiftTest.build/Objects-normal/i386/ViewController~partial.swiftdoc -O0 -emit-module-path /Users/sebinsua/Library/Developer/Xcode/DerivedData/FormsSwiftTest-ffjgtmaewnnekfeixfbceayrwaxc/Build/Intermediates/FormsSwiftTest.build/Debug-iphonesimulator/FormsSwiftTest.build/Objects-normal/i386/ViewController~partial.swiftmodule -serialize-diagnostics-path /Users/sebinsua/Library/Developer/Xcode/DerivedData/FormsSwiftTest-ffjgtmaewnnekfeixfbceayrwaxc/Build/Intermediates/FormsSwiftTest.build/Debug-iphonesimulator/FormsSwiftTest.build/Objects-normal/i386/ViewController.dia -emit-dependencies-path /Users/sebinsua/Library/Developer/Xcode/DerivedData/FormsSwiftTest-ffjgtmaewnnekfeixfbceayrwaxc/Build/Intermediates/FormsSwiftTest.build/Debug-iphonesimulator/FormsSwiftTest.build/Objects-normal/i386/ViewController.d -o /Users/sebinsua/Library/Developer/Xcode/DerivedData/FormsSwiftTest-ffjgtmaewnnekfeixfbceayrwaxc/Build/Intermediates/FormsSwiftTest.build/Debug-iphonesimulator/FormsSwiftTest.build/Objects-normal/i386/ViewController.o \n1.  While type-checking 'ViewController' at /Users/sebinsua/Downloads/FormsSwiftTest/FormsSwiftTest/ViewController.swift:11:1\n2.  While resolving type FXFormViewController at [/Users/sebinsua/Downloads/FormsSwiftTest/FormsSwiftTest/ViewController.swift:11:23 - line:11:23] RangeText=\"F\"\n<unknown>:0: error: unable to execute command: Segmentation fault: 11\n<unknown>:0: error: swift frontend command failed due to signal (use -v to see invocation)\nCommand /Applications/Xcode6-Beta3.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/swift failed with exit code 254\n```\n\nAre you definitely using Xcode6-Beta3?\n\n**Edit:**\n\n> Update: I've just updated Xcode to Beta 3, and I have the same problem. I suppose, it is really specific only to beta 3, as on beta 1 everything was okay.\n\nOkay, I see. Yeah, you can try using FXFormControllerDelegate in the meantime as I did, but it would be good to work out what bit of syntax is failing perhaps.\n. Has anybody looked at this?\n\nI'm currently trying to load a FXFormFieldViewController but am finding that it isn't getting the view layout from the storyboard so I will have to do all of the setup manually...\n. I have actually done that.\n\nInterestingly `class BasicRegistrationViewController: UIViewController, FXFormControllerDelegate` works but `class BasicRegistrationViewController: FXFormController` doesn't. I've been able to implement the project by working at a lower-level.\n\nBy the way, I just tried your project and it also fails for me in the same way:\n\n```\nCompileSwift normal i386 com.apple.xcode.tools.swift.compiler\n    cd /Users/sebinsua/Downloads/FormsSwiftTest\n    export PATH=\"/Applications/Xcode6-Beta3.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/usr/bin:/Applications/Xcode6-Beta3.app/Contents/Developer/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin\"\n    /Applications/Xcode6-Beta3.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/swift -target i386-apple-ios8.0 -module-name FormsSwiftTest -O0 -sdk /Applications/Xcode6-Beta3.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator8.0.sdk -g -module-cache-path /Users/sebinsua/Library/Developer/Xcode/DerivedData/ModuleCache -I /Users/sebinsua/Library/Developer/Xcode/DerivedData/FormsSwiftTest-ffjgtmaewnnekfeixfbceayrwaxc/Build/Products/Debug-iphonesimulator -F /Users/sebinsua/Library/Developer/Xcode/DerivedData/FormsSwiftTest-ffjgtmaewnnekfeixfbceayrwaxc/Build/Products/Debug-iphonesimulator -c -j8 /Users/sebinsua/Downloads/FormsSwiftTest/FormsSwiftTest/ViewController.swift /Users/sebinsua/Downloads/FormsSwiftTest/FormsSwiftTest/AppDelegate.swift -output-file-map /Users/sebinsua/Library/Developer/Xcode/DerivedData/FormsSwiftTest-ffjgtmaewnnekfeixfbceayrwaxc/Build/Intermediates/FormsSwiftTest.build/Debug-iphonesimulator/FormsSwiftTest.build/Objects-normal/i386/FormsSwiftTest-OutputFileMap.json -serialize-diagnostics -emit-dependencies -emit-module -emit-module-path /Users/sebinsua/Library/Developer/Xcode/DerivedData/FormsSwiftTest-ffjgtmaewnnekfeixfbceayrwaxc/Build/Intermediates/FormsSwiftTest.build/Debug-iphonesimulator/FormsSwiftTest.build/Objects-normal/i386/FormsSwiftTest.swiftmodule -Xcc -I/Users/sebinsua/Library/Developer/Xcode/DerivedData/FormsSwiftTest-ffjgtmaewnnekfeixfbceayrwaxc/Build/Intermediates/FormsSwiftTest.build/Debug-iphonesimulator/FormsSwiftTest.build/swift-overrides.hmap -Xcc -iquote -Xcc /Users/sebinsua/Library/Developer/Xcode/DerivedData/FormsSwiftTest-ffjgtmaewnnekfeixfbceayrwaxc/Build/Intermediates/FormsSwiftTest.build/Debug-iphonesimulator/FormsSwiftTest.build/FormsSwiftTest-generated-files.hmap -Xcc -I/Users/sebinsua/Library/Developer/Xcode/DerivedData/FormsSwiftTest-ffjgtmaewnnekfeixfbceayrwaxc/Build/Intermediates/FormsSwiftTest.build/Debug-iphonesimulator/FormsSwiftTest.build/FormsSwiftTest-own-target-headers.hmap -Xcc -I/Users/sebinsua/Library/Developer/Xcode/DerivedData/FormsSwiftTest-ffjgtmaewnnekfeixfbceayrwaxc/Build/Intermediates/FormsSwiftTest.build/Debug-iphonesimulator/FormsSwiftTest.build/FormsSwiftTest-all-target-headers.hmap -Xcc -iquote -Xcc /Users/sebinsua/Library/Developer/Xcode/DerivedData/FormsSwiftTest-ffjgtmaewnnekfeixfbceayrwaxc/Build/Intermediates/FormsSwiftTest.build/Debug-iphonesimulator/FormsSwiftTest.build/FormsSwiftTest-project-headers.hmap -Xcc -I/Users/sebinsua/Library/Developer/Xcode/DerivedData/FormsSwiftTest-ffjgtmaewnnekfeixfbceayrwaxc/Build/Products/Debug-iphonesimulator/include -Xcc -I/Applications/Xcode6-Beta3.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include -Xcc -I/Users/sebinsua/Library/Developer/Xcode/DerivedData/FormsSwiftTest-ffjgtmaewnnekfeixfbceayrwaxc/Build/Intermediates/FormsSwiftTest.build/Debug-iphonesimulator/FormsSwiftTest.build/DerivedSources/i386 -Xcc -I/Users/sebinsua/Library/Developer/Xcode/DerivedData/FormsSwiftTest-ffjgtmaewnnekfeixfbceayrwaxc/Build/Intermediates/FormsSwiftTest.build/Debug-iphonesimulator/FormsSwiftTest.build/DerivedSources -Xcc -DDEBUG=1 -emit-objc-header -emit-objc-header-path /Users/sebinsua/Library/Developer/Xcode/DerivedData/FormsSwiftTest-ffjgtmaewnnekfeixfbceayrwaxc/Build/Intermediates/FormsSwiftTest.build/Debug-iphonesimulator/FormsSwiftTest.build/Objects-normal/i386/FormsSwiftTest-Swift.h -import-objc-header /Users/sebinsua/Downloads/FormsSwiftTest/FormsSwiftTest/FormsSwiftTest-Bridging-Header.h\n\n0  swift                    0x000000010c4f7de8 llvm::sys::PrintStackTrace(__sFILE*) + 40\n1  swift                    0x000000010c4f82d4 SignalHandler(int) + 452\n2  libsystem_platform.dylib 0x00007fff950535aa _sigtramp + 26\n3  libsystem_platform.dylib 0x00007fff54374000 _sigtramp + 3207727728\n4  swift                    0x000000010bafeaff clang::declvisitor::Base<clang::declvisitor::make_const_ptr, (anonymous namespace)::SwiftDeclConverter, swift::Decl*>::Visit(clang::Decl const*) + 815\n5  swift                    0x000000010bafe74b swift::ClangImporter::Implementation::importDeclImpl(clang::NamedDecl const*, bool&, bool&) + 331\n6  swift                    0x000000010bb031f2 swift::ClangImporter::Implementation::importDeclAndCacheImpl(clang::NamedDecl const*, bool) + 226\n7  swift                    0x000000010bb0e450 (anonymous namespace)::SwiftDeclConverter::importObjCProtocols(swift::Decl*, clang::ObjCProtocolList const&) + 256\n8  swift                    0x000000010bb01589 clang::declvisitor::Base<clang::declvisitor::make_const_ptr, (anonymous namespace)::SwiftDeclConverter, swift::Decl*>::Visit(clang::Decl const*) + 11705\n9  swift                    0x000000010bafe74b swift::ClangImporter::Implementation::importDeclImpl(clang::NamedDecl const*, bool&, bool&) + 331\n10 swift                    0x000000010bb031f2 swift::ClangImporter::Implementation::importDeclAndCacheImpl(clang::NamedDecl const*, bool) + 226\n11 swift                    0x000000010baf6b7e swift::ClangImporter::lookupValue(swift::Identifier, swift::VisibleDeclConsumer&) + 510\n12 swift                    0x000000010baf7faa swift::ClangModuleUnit::lookupValue(llvm::ArrayRef<std::__1::pair<swift::Identifier, swift::SourceLoc> >, swift::DeclName, swift::NLKind, llvm::SmallVectorImpl<swift::ValueDecl*>&) const + 250\n13 swift                    0x000000010c80d42a swift::Module::lookupValue(llvm::ArrayRef<std::__1::pair<swift::Identifier, swift::SourceLoc> >, swift::DeclName, swift::NLKind, llvm::SmallVectorImpl<swift::ValueDecl*>&) const + 90\n14 swift                    0x000000010c815489 void lookupInModule<llvm::SmallSet<swift::CanType, 4u, (anonymous namespace)::SortCanType>, swift::namelookup::lookupInModule(swift::Module*, llvm::ArrayRef<std::__1::pair<swift::Identifier, swift::SourceLoc> >, swift::DeclName, llvm::SmallVectorImpl<swift::ValueDecl*>&, swift::NLKind, swift::namelookup::ResolutionKind, swift::LazyResolver*, swift::DeclContext const*, llvm::ArrayRef<std::__1::pair<llvm::ArrayRef<std::__1::pair<swift::Identifier, swift::SourceLoc> >, swift::Module*> >)::$_0>(swift::Module*, llvm::ArrayRef<std::__1::pair<swift::Identifier, swift::SourceLoc> >, llvm::SmallVectorImpl<swift::ValueDecl*>&, swift::namelookup::ResolutionKind, bool, swift::LazyResolver*, llvm::SmallDenseMap<std::__1::pair<llvm::ArrayRef<std::__1::pair<swift::Identifier, swift::SourceLoc> >, swift::Module*>, llvm::TinyPtrVector<swift::ValueDecl*>, 32u, llvm::DenseMapInfo<std::__1::pair<llvm::ArrayRef<std::__1::pair<swift::Identifier, swift::SourceLoc> >, swift::Module*> > >&, swift::DeclContext const*, bool, llvm::ArrayRef<std::__1::pair<llvm::ArrayRef<std::__1::pair<swift::Identifier, swift::SourceLoc> >, swift::Module*> >, swift::namelookup::lookupInModule(swift::Module*, llvm::ArrayRef<std::__1::pair<swift::Identifier, swift::SourceLoc> >, swift::DeclName, llvm::SmallVectorImpl<swift::ValueDecl*>&, swift::NLKind, swift::namelookup::ResolutionKind, swift::LazyResolver*, swift::DeclContext const*, llvm::ArrayRef<std::__1::pair<llvm::ArrayRef<std::__1::pair<swift::Identifier, swift::SourceLoc> >, swift::Module*> >)::$_0) + 265\n15 swift                    0x000000010c815aa7 void lookupInModule<llvm::SmallSet<swift::CanType, 4u, (anonymous namespace)::SortCanType>, swift::namelookup::lookupInModule(swift::Module*, llvm::ArrayRef<std::__1::pair<swift::Identifier, swift::SourceLoc> >, swift::DeclName, llvm::SmallVectorImpl<swift::ValueDecl*>&, swift::NLKind, swift::namelookup::ResolutionKind, swift::LazyResolver*, swift::DeclContext const*, llvm::ArrayRef<std::__1::pair<llvm::ArrayRef<std::__1::pair<swift::Identifier, swift::SourceLoc> >, swift::Module*> >)::$_0>(swift::Module*, llvm::ArrayRef<std::__1::pair<swift::Identifier, swift::SourceLoc> >, llvm::SmallVectorImpl<swift::ValueDecl*>&, swift::namelookup::ResolutionKind, bool, swift::LazyResolver*, llvm::SmallDenseMap<std::__1::pair<llvm::ArrayRef<std::__1::pair<swift::Identifier, swift::SourceLoc> >, swift::Module*>, llvm::TinyPtrVector<swift::ValueDecl*>, 32u, llvm::DenseMapInfo<std::__1::pair<llvm::ArrayRef<std::__1::pair<swift::Identifier, swift::SourceLoc> >, swift::Module*> > >&, swift::DeclContext const*, bool, llvm::ArrayRef<std::__1::pair<llvm::ArrayRef<std::__1::pair<swift::Identifier, swift::SourceLoc> >, swift::Module*> >, swift::namelookup::lookupInModule(swift::Module*, llvm::ArrayRef<std::__1::pair<swift::Identifier, swift::SourceLoc> >, swift::DeclName, llvm::SmallVectorImpl<swift::ValueDecl*>&, swift::NLKind, swift::namelookup::ResolutionKind, swift::LazyResolver*, swift::DeclContext const*, llvm::ArrayRef<std::__1::pair<llvm::ArrayRef<std::__1::pair<swift::Identifier, swift::SourceLoc> >, swift::Module*> >)::$_0) + 1831\n16 swift                    0x000000010c815353 swift::namelookup::lookupInModule(swift::Module*, llvm::ArrayRef<std::__1::pair<swift::Identifier, swift::SourceLoc> >, swift::DeclName, llvm::SmallVectorImpl<swift::ValueDecl*>&, swift::NLKind, swift::namelookup::ResolutionKind, swift::LazyResolver*, swift::DeclContext const*, llvm::ArrayRef<std::__1::pair<llvm::ArrayRef<std::__1::pair<swift::Identifier, swift::SourceLoc> >, swift::Module*> >) + 243\n17 swift                    0x000000010c81a043 swift::UnqualifiedLookup::UnqualifiedLookup(swift::DeclName, swift::DeclContext*, swift::LazyResolver*, swift::SourceLoc, bool) + 3635\n18 swift                    0x000000010c73d6e5 resolveIdentTypeComponent(swift::TypeChecker&, swift::DeclContext*, llvm::ArrayRef<swift::ComponentIdentTypeRepr*>, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, bool, swift::GenericTypeResolver*) + 549\n19 swift                    0x000000010c73d0d4 swift::TypeChecker::resolveIdentifierType(swift::DeclContext*, swift::IdentTypeRepr*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, bool, swift::GenericTypeResolver*, swift::ValueDecl*) + 116\n20 swift                    0x000000010c73e23a (anonymous namespace)::TypeResolver::resolveType(swift::TypeRepr*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>) + 90\n21 swift                    0x000000010c73d02d swift::TypeChecker::validateType(swift::TypeLoc&, swift::DeclContext*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, swift::GenericTypeResolver*, swift::ValueDecl*) + 221\n22 swift                    0x000000010c70bd4b swift::TypeChecker::checkInheritanceClause(swift::Decl*, swift::DeclContext*, swift::GenericTypeResolver*) + 2731\n23 swift                    0x000000010c70d927 swift::TypeChecker::validateDecl(swift::ValueDecl*, bool) + 311\n24 swift                    0x000000010baf8004 swift::ClangImporter::loadExtensions(swift::NominalTypeDecl*, unsigned int) + 84\n25 swift                    0x000000010c79feaf swift::ASTContext::loadExtensions(swift::NominalTypeDecl*, unsigned int) + 63\n26 swift                    0x000000010c7f86b3 swift::NominalTypeDecl::getExtensions() + 51\n27 swift                    0x000000010c70d83d swift::TypeChecker::validateDecl(swift::ValueDecl*, bool) + 77\n28 swift                    0x000000010c71a255 swift::ASTVisitor<(anonymous namespace)::DeclChecker, void, void, void, void, void, void>::visit(swift::Decl*) + 1045\n29 swift                    0x000000010c70d7b0 swift::TypeChecker::typeCheckDecl(swift::Decl*, bool) + 112\n30 swift                    0x000000010c6f81a8 swift::performTypeChecking(swift::SourceFile&, swift::TopLevelContext&, unsigned int) + 1272\n31 swift                    0x000000010bad1720 swift::CompilerInstance::performSema() + 2256\n32 swift                    0x000000010b88af8d frontend_main(llvm::ArrayRef<char const*>, char const*, void*) + 1885\n33 swift                    0x000000010b88a81d main + 1533\n34 libdyld.dylib            0x00007fff8d8815fd start + 1\n35 libdyld.dylib            0x0000000000000039 start + 1920461373\nStack dump:\n0.  Program arguments: /Applications/Xcode6-Beta3.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/swift -frontend -c -primary-file /Users/sebinsua/Downloads/FormsSwiftTest/FormsSwiftTest/ViewController.swift /Users/sebinsua/Downloads/FormsSwiftTest/FormsSwiftTest/AppDelegate.swift -enable-objc-attr-requires-objc-module -target i386-apple-ios8.0 -module-name FormsSwiftTest -sdk /Applications/Xcode6-Beta3.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator8.0.sdk -I /Users/sebinsua/Library/Developer/Xcode/DerivedData/FormsSwiftTest-ffjgtmaewnnekfeixfbceayrwaxc/Build/Products/Debug-iphonesimulator -F /Users/sebinsua/Library/Developer/Xcode/DerivedData/FormsSwiftTest-ffjgtmaewnnekfeixfbceayrwaxc/Build/Products/Debug-iphonesimulator -g -import-objc-header /Users/sebinsua/Downloads/FormsSwiftTest/FormsSwiftTest/FormsSwiftTest-Bridging-Header.h -module-cache-path /Users/sebinsua/Library/Developer/Xcode/DerivedData/ModuleCache -Xcc -I/Users/sebinsua/Library/Developer/Xcode/DerivedData/FormsSwiftTest-ffjgtmaewnnekfeixfbceayrwaxc/Build/Intermediates/FormsSwiftTest.build/Debug-iphonesimulator/FormsSwiftTest.build/swift-overrides.hmap -Xcc -iquote -Xcc /Users/sebinsua/Library/Developer/Xcode/DerivedData/FormsSwiftTest-ffjgtmaewnnekfeixfbceayrwaxc/Build/Intermediates/FormsSwiftTest.build/Debug-iphonesimulator/FormsSwiftTest.build/FormsSwiftTest-generated-files.hmap -Xcc -I/Users/sebinsua/Library/Developer/Xcode/DerivedData/FormsSwiftTest-ffjgtmaewnnekfeixfbceayrwaxc/Build/Intermediates/FormsSwiftTest.build/Debug-iphonesimulator/FormsSwiftTest.build/FormsSwiftTest-own-target-headers.hmap -Xcc -I/Users/sebinsua/Library/Developer/Xcode/DerivedData/FormsSwiftTest-ffjgtmaewnnekfeixfbceayrwaxc/Build/Intermediates/FormsSwiftTest.build/Debug-iphonesimulator/FormsSwiftTest.build/FormsSwiftTest-all-target-headers.hmap -Xcc -iquote -Xcc /Users/sebinsua/Library/Developer/Xcode/DerivedData/FormsSwiftTest-ffjgtmaewnnekfeixfbceayrwaxc/Build/Intermediates/FormsSwiftTest.build/Debug-iphonesimulator/FormsSwiftTest.build/FormsSwiftTest-project-headers.hmap -Xcc -I/Users/sebinsua/Library/Developer/Xcode/DerivedData/FormsSwiftTest-ffjgtmaewnnekfeixfbceayrwaxc/Build/Products/Debug-iphonesimulator/include -Xcc -I/Applications/Xcode6-Beta3.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include -Xcc -I/Users/sebinsua/Library/Developer/Xcode/DerivedData/FormsSwiftTest-ffjgtmaewnnekfeixfbceayrwaxc/Build/Intermediates/FormsSwiftTest.build/Debug-iphonesimulator/FormsSwiftTest.build/DerivedSources/i386 -Xcc -I/Users/sebinsua/Library/Developer/Xcode/DerivedData/FormsSwiftTest-ffjgtmaewnnekfeixfbceayrwaxc/Build/Intermediates/FormsSwiftTest.build/Debug-iphonesimulator/FormsSwiftTest.build/DerivedSources -Xcc -DDEBUG=1 -emit-module-doc-path /Users/sebinsua/Library/Developer/Xcode/DerivedData/FormsSwiftTest-ffjgtmaewnnekfeixfbceayrwaxc/Build/Intermediates/FormsSwiftTest.build/Debug-iphonesimulator/FormsSwiftTest.build/Objects-normal/i386/ViewController~partial.swiftdoc -O0 -emit-module-path /Users/sebinsua/Library/Developer/Xcode/DerivedData/FormsSwiftTest-ffjgtmaewnnekfeixfbceayrwaxc/Build/Intermediates/FormsSwiftTest.build/Debug-iphonesimulator/FormsSwiftTest.build/Objects-normal/i386/ViewController~partial.swiftmodule -serialize-diagnostics-path /Users/sebinsua/Library/Developer/Xcode/DerivedData/FormsSwiftTest-ffjgtmaewnnekfeixfbceayrwaxc/Build/Intermediates/FormsSwiftTest.build/Debug-iphonesimulator/FormsSwiftTest.build/Objects-normal/i386/ViewController.dia -emit-dependencies-path /Users/sebinsua/Library/Developer/Xcode/DerivedData/FormsSwiftTest-ffjgtmaewnnekfeixfbceayrwaxc/Build/Intermediates/FormsSwiftTest.build/Debug-iphonesimulator/FormsSwiftTest.build/Objects-normal/i386/ViewController.d -o /Users/sebinsua/Library/Developer/Xcode/DerivedData/FormsSwiftTest-ffjgtmaewnnekfeixfbceayrwaxc/Build/Intermediates/FormsSwiftTest.build/Debug-iphonesimulator/FormsSwiftTest.build/Objects-normal/i386/ViewController.o \n1.  While type-checking 'ViewController' at /Users/sebinsua/Downloads/FormsSwiftTest/FormsSwiftTest/ViewController.swift:11:1\n2.  While resolving type FXFormViewController at [/Users/sebinsua/Downloads/FormsSwiftTest/FormsSwiftTest/ViewController.swift:11:23 - line:11:23] RangeText=\"F\"\n<unknown>:0: error: unable to execute command: Segmentation fault: 11\n<unknown>:0: error: swift frontend command failed due to signal (use -v to see invocation)\nCommand /Applications/Xcode6-Beta3.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/swift failed with exit code 254\n```\n\nAre you definitely using Xcode6-Beta3?\n\n**Edit:**\n\n> Update: I've just updated Xcode to Beta 3, and I have the same problem. I suppose, it is really specific only to beta 3, as on beta 1 everything was okay.\n\nOkay, I see. Yeah, you can try using FXFormControllerDelegate in the meantime as I did, but it would be good to work out what bit of syntax is failing perhaps.\n. ",
    "thiagoliof": "thanks a lot. very nice :+1: \n. thanks a lot. very nice :+1: \n. ",
    "nikalra": "I tried implementing a method that would resign the first responders by iterating through all the fields, accessing the textfields inside the cells, and then calling <code>resignFirstResponder</code> but the keyboard remains on the screen -- I'm probably not doing something right. I attached my code below.\n\n``` objc\nfor (FXFormField *field in sender.field.form.fields) {\n        NSIndexPath *path = [self.formController indexPathForField:field];\n        UITableViewCell *cell = [self.tableView cellForRowAtIndexPath:path];\n        if ([[self.formController cellClassForField:field] isEqual:[FXFormTextFieldCell class]]) {\n            [((FXFormTextFieldCell *)cell).textField resignFirstResponder];\n        }\n    }\n```\n\nWould it be possible to implement an option in the form that would resign the first responder when the button is pressed / field is selected? Perhaps that way -- since it would be up to the user to add the functionality to their form -- would solve the problem of the fields containing nil values while at the same time not masking the issue.\n. Duplicate of #102 and #90 \n. Thanks!\n\nOne last question:\nDoes the FXForms API allow for fields to be dynamically added and removed based upon the values entered in other fields or do I have to use a separate embedded form with values passed upon instantiation for this?\n. Thanks again!\n\nAlso, is there any way to make the stepper show the default value (the number to the left of the stepper doesn't appear unless the plus button is pressed and the count is incremented to 1) like the picture shows in the readme? I tried setting a placeholder but it's hidden behind the stepper.\n. Thanks!\n. Sorry for the late reply. Thanks for your help! I overrided the two methods and everything seems to be working now.\n. I tried implementing a method that would resign the first responders by iterating through all the fields, accessing the textfields inside the cells, and then calling <code>resignFirstResponder</code> but the keyboard remains on the screen -- I'm probably not doing something right. I attached my code below.\n\n``` objc\nfor (FXFormField *field in sender.field.form.fields) {\n        NSIndexPath *path = [self.formController indexPathForField:field];\n        UITableViewCell *cell = [self.tableView cellForRowAtIndexPath:path];\n        if ([[self.formController cellClassForField:field] isEqual:[FXFormTextFieldCell class]]) {\n            [((FXFormTextFieldCell *)cell).textField resignFirstResponder];\n        }\n    }\n```\n\nWould it be possible to implement an option in the form that would resign the first responder when the button is pressed / field is selected? Perhaps that way -- since it would be up to the user to add the functionality to their form -- would solve the problem of the fields containing nil values while at the same time not masking the issue.\n. Duplicate of #102 and #90 \n. Thanks!\n\nOne last question:\nDoes the FXForms API allow for fields to be dynamically added and removed based upon the values entered in other fields or do I have to use a separate embedded form with values passed upon instantiation for this?\n. Thanks again!\n\nAlso, is there any way to make the stepper show the default value (the number to the left of the stepper doesn't appear unless the plus button is pressed and the count is incremented to 1) like the picture shows in the readme? I tried setting a placeholder but it's hidden behind the stepper.\n. Thanks!\n. Sorry for the late reply. Thanks for your help! I overrided the two methods and everything seems to be working now.\n. ",
    "jackylimel": "then how about create another type(s) which supports negative numbers and leave FXFormFieldTypeInteger with UIKeyboardTypeNumberPad?\n. That's awesome!\n. then how about create another type(s) which supports negative numbers and leave FXFormFieldTypeInteger with UIKeyboardTypeNumberPad?\n. That's awesome!\n. ",
    "brdp": "Great! \nThank you!\n. Unfortunately I haven't solved yet... :( I'm working on a different project and we are not using FXForms. :(\n. Great! \nThank you!\n. Unfortunately I haven't solved yet... :( I'm working on a different project and we are not using FXForms. :(\n. ",
    "rocxteady": "My Bad.\n\nI did not set the properties correctly.\n. +1\n\nAnd you don't have to tap the next button for this. When you tap to the next field, this problem occurs again.\n. I added a temporary fix:\n[Fix](https://github.com/rocxteady/FXForms/commit/6ed7075924c912b218e37d4d25ae8a61692b3eaa)\n. My Bad.\n\nI did not set the properties correctly.\n. +1\n\nAnd you don't have to tap the next button for this. When you tap to the next field, this problem occurs again.\n. I added a temporary fix:\n[Fix](https://github.com/rocxteady/FXForms/commit/6ed7075924c912b218e37d4d25ae8a61692b3eaa)\n. ",
    "ericgross": "I totally believe you that it will work, I am just so far unable to make it work... an example would be totally dandy right now. In the mean time, I am able to continue with the scene not present on any storyboard like this:\n\n```\nFXFormViewController *controller = [[FXFormViewController alloc] init];\ncontroller.formController.form = [[ESGUser alloc] init];\n[self.view presentViewController:controller animated:YES completion:nil];\n```\n\nI guess the part I don't get is how I would do it using interface builder.\n. I guess what I thought was a solution really isn't because I want to embed the form in a navigation ui controller which I want to create in IB - as is the form isn't embedded in the navigation.\n. I totally believe you that it will work, I am just so far unable to make it work... an example would be totally dandy right now. In the mean time, I am able to continue with the scene not present on any storyboard like this:\n\n```\nFXFormViewController *controller = [[FXFormViewController alloc] init];\ncontroller.formController.form = [[ESGUser alloc] init];\n[self.view presentViewController:controller animated:YES completion:nil];\n```\n\nI guess the part I don't get is how I would do it using interface builder.\n. I guess what I thought was a solution really isn't because I want to embed the form in a navigation ui controller which I want to create in IB - as is the form isn't embedded in the navigation.\n. ",
    "TheLittleBoy": "#307   \n. +1\n. It has a new problem now.  see #448  @DonnaLea \n. If you don't press next button ,it has no problem.\n. when you press next button or change keyboard type ,it will call method 'keyboardDidShow:' again , and it don't call method 'keyboardWillHide' before.\n. #307   \n. +1\n. It has a new problem now.  see #448  @DonnaLea \n. If you don't press next button ,it has no problem.\n. when you press next button or change keyboard type ,it will call method 'keyboardDidShow:' again , and it don't call method 'keyboardWillHide' before.\n. ",
    "yakubbaev": "@brdp how did you solve this issue?\n. Related issue #366 \n. Fixed by #96 \n. +1\n. @brdp how did you solve this issue?\n. Related issue #366 \n. Fixed by #96 \n. +1\n. ",
    "frakman1": "If this helps, I was able to  change  the title directly in the .xib file for the custome button (CustomButtonCell.xib)\n. My easy solution was to associate an action to the form field and popping the view off the navigation stack\n\n``` objective-c\n@{FXFormFieldKey: @\"attorney\", FXFormFieldTitle:@\"Pick Attorney\",\n     FXFormFieldOptions: ([self.sortableArray count] ? self.sortableArray : @[]),\n     FXFormFieldAction: @\"pickedAttorney:\"\n     },\n```\n\nthen\n\n``` objective-c\n- (void) pickedAttorney:(UITableViewCell<FXFormFieldCell> *)cell\n{\n    [self.navigationController popViewControllerAnimated:YES];\n}\n```\n\nHope that helps.\n. Before calling `[self.tableView reloadData]`, try calling this:\n\n``` objective-c\nself.formController.form = self.formController.form;\n```\n\nor whatever your viewcontroller is called.\n. Can you provide an example of this feature being used please? It sounds like a great new feature. I just wish I knew how to use it! haha\n. What I do, is put some code to pop back to the parent view on the navigation controller stack. Like this:\n\n(in your didChangeState method)\n\n```\n[self.navigationController popViewControllerAnimated:YES];\n```\n\nNot sure about Swift but might look like this:\n\n```\nif let navController = self.navigationController {\n    navController.popViewControllerAnimated(true)\n} \n```\n. Could you perhaps post your code? \n. Fixed in version Version 1.2.14\nThank you Nick!\n. (Sorry for the stupid questions)\n- Is that like the custom button cell example (CustomButtonExample) provided in your examples folder? \n- Would I be making a subclass of FXFormBaseCell ?\n\nSo for example, using a list that is defined as such within the **fields** method:\n\n``` objective-c\n  @{FXFormFieldKey: @\"sortableArray\", FXFormFieldTitle:@\"List\", FXFormFieldSortable: @YES,  FXFormFieldTemplate: @{FXFormFieldTitle: @\"Add Name\" } },\n```\n\nwhich part would change to specify the new field type I would be adding?\n. See this issue:\nhttps://github.com/nicklockwood/FXForms/issues/433\n. If this helps, I was able to  change  the title directly in the .xib file for the custome button (CustomButtonCell.xib)\n. My easy solution was to associate an action to the form field and popping the view off the navigation stack\n\n``` objective-c\n@{FXFormFieldKey: @\"attorney\", FXFormFieldTitle:@\"Pick Attorney\",\n     FXFormFieldOptions: ([self.sortableArray count] ? self.sortableArray : @[]),\n     FXFormFieldAction: @\"pickedAttorney:\"\n     },\n```\n\nthen\n\n``` objective-c\n- (void) pickedAttorney:(UITableViewCell<FXFormFieldCell> *)cell\n{\n    [self.navigationController popViewControllerAnimated:YES];\n}\n```\n\nHope that helps.\n. Before calling `[self.tableView reloadData]`, try calling this:\n\n``` objective-c\nself.formController.form = self.formController.form;\n```\n\nor whatever your viewcontroller is called.\n. Can you provide an example of this feature being used please? It sounds like a great new feature. I just wish I knew how to use it! haha\n. What I do, is put some code to pop back to the parent view on the navigation controller stack. Like this:\n\n(in your didChangeState method)\n\n```\n[self.navigationController popViewControllerAnimated:YES];\n```\n\nNot sure about Swift but might look like this:\n\n```\nif let navController = self.navigationController {\n    navController.popViewControllerAnimated(true)\n} \n```\n. Could you perhaps post your code? \n. Fixed in version Version 1.2.14\nThank you Nick!\n. (Sorry for the stupid questions)\n- Is that like the custom button cell example (CustomButtonExample) provided in your examples folder? \n- Would I be making a subclass of FXFormBaseCell ?\n\nSo for example, using a list that is defined as such within the **fields** method:\n\n``` objective-c\n  @{FXFormFieldKey: @\"sortableArray\", FXFormFieldTitle:@\"List\", FXFormFieldSortable: @YES,  FXFormFieldTemplate: @{FXFormFieldTitle: @\"Add Name\" } },\n```\n\nwhich part would change to specify the new field type I would be adding?\n. See this issue:\nhttps://github.com/nicklockwood/FXForms/issues/433\n. ",
    "Rhuantavan": "Can't check the other issues as I am in a hurry, but I've checked the latest version and on Problem 1 it gives me an NSUnknownKeyException on line 2127 in FXForms.m\n\nOh, and Problem 3 is still there.\n. Can't check the other issues as I am in a hurry, but I've checked the latest version and on Problem 1 it gives me an NSUnknownKeyException on line 2127 in FXForms.m\n\nOh, and Problem 3 is still there.\n. ",
    "batkru": "Found issue and submitted a pull request. Thanks\n. I agree with this, the gender field is strange. I think Enum types should behave as a separate list that can be pushed (similar to the way Country value behaves). This is because otherwise users can type whatever they want in the field and in reality it only returns back correctly if you type the corresponding index of the Enum.\n\nThanks\n. Thanks!\n. Found issue and submitted a pull request. Thanks\n. I agree with this, the gender field is strange. I think Enum types should behave as a separate list that can be pushed (similar to the way Country value behaves). This is because otherwise users can type whatever they want in the field and in reality it only returns back correctly if you type the corresponding index of the Enum.\n\nThanks\n. Thanks!\n. ",
    "kbala": "Got it!, placeholder seems to be default value, thanks!\n. Ok, in another case I have to load the data from json coming from server for languages, and have to set the default value which is marked in the json. how to do that?\n\nThanks\n. Oh really, Let me check now.\n. Yep, it works, Thanks!\n. Nice for now.\n. but not working,\nI set like below,\n\n```\n         @{FXFormFieldKey:@\"class\",  FXFormFieldType:@\"label\", FXFormFieldDefaultValue:@\"Cedar Grove Pilot 1\"},\n```\n\nI missed something?\n. iOS Version: 8.1.1\n\n2014-11-18 18:05:50.131 ots[3711:1430171] **\\* Terminating app due to uncaught exception 'NSGenericException', reason: 'Your application has presented a UIAlertController (<UIAlertController: 0x136648940>) of style UIAlertControllerStyleActionSheet. The modalPresentationStyle of a UIAlertController with this style is UIModalPresentationPopover. You must provide location information for this popover through the alert controller's popoverPresentationController. You must provide either a sourceView and sourceRect or a barButtonItem.  If this information is not known when you present the alert controller, you may provide it in the UIPopoverPresentationControllerDelegate method -prepareForPopoverPresentation.'\n**\\* First throw call stack:\n(0x1848d9e48 0x1952dc0e4 0x1897c422c 0x1893871d8 0x189385c88 0x18910b244 0x18907cb78 0x18489214c 0x18488f0d8 0x18488f4b8 0x1847bd1f4 0x18d90f5a4 0x1890ee784 0x1000dc7a4 0x19594aa08)\nlibc++abi.dylib: terminating with uncaught exception of type NSException\n. yep. it works. Thanks :+1: \n. Got it!, placeholder seems to be default value, thanks!\n. Ok, in another case I have to load the data from json coming from server for languages, and have to set the default value which is marked in the json. how to do that?\n\nThanks\n. Oh really, Let me check now.\n. Yep, it works, Thanks!\n. Nice for now.\n. but not working,\nI set like below,\n\n```\n         @{FXFormFieldKey:@\"class\",  FXFormFieldType:@\"label\", FXFormFieldDefaultValue:@\"Cedar Grove Pilot 1\"},\n```\n\nI missed something?\n. iOS Version: 8.1.1\n\n2014-11-18 18:05:50.131 ots[3711:1430171] **\\* Terminating app due to uncaught exception 'NSGenericException', reason: 'Your application has presented a UIAlertController (<UIAlertController: 0x136648940>) of style UIAlertControllerStyleActionSheet. The modalPresentationStyle of a UIAlertController with this style is UIModalPresentationPopover. You must provide location information for this popover through the alert controller's popoverPresentationController. You must provide either a sourceView and sourceRect or a barButtonItem.  If this information is not known when you present the alert controller, you may provide it in the UIPopoverPresentationControllerDelegate method -prepareForPopoverPresentation.'\n**\\* First throw call stack:\n(0x1848d9e48 0x1952dc0e4 0x1897c422c 0x1893871d8 0x189385c88 0x18910b244 0x18907cb78 0x18489214c 0x18488f0d8 0x18488f4b8 0x1847bd1f4 0x18d90f5a4 0x1890ee784 0x1000dc7a4 0x19594aa08)\nlibc++abi.dylib: terminating with uncaught exception of type NSException\n. yep. it works. Thanks :+1: \n. ",
    "85636682": "@nicklockwood Have a sample code for this issue?\n. @nicklockwood Have a sample code for this issue?\n. ",
    "Davvie": "First I make a form instance, set all the properties and then assign it to the \"form\" property of formController.\nEverything works just fine except the placeholders.\n. As I can tell, it only affects placeholders for long text fields.\n\nBy the way, it also causes another bug which incredibly simple to reproduce.\nFirst I fill in the second field.\n![06 2014 14 58 02 ios](https://cloud.githubusercontent.com/assets/816045/3488436/58d7d87e-04e3-11e4-8421-d90916abd603.png)\nThen I choose a value from the first one.\n![06 2014 15 00 03 ios](https://cloud.githubusercontent.com/assets/816045/3488443/8e861666-04e3-11e4-8f4d-56be8714185b.png)\nAnd finally I tap the back button to proceed filling in the form. As you can see, the second field value I typed in is still there but the overlaying placeholder also shows up.\n![06 2014 15 02 05 ios](https://cloud.githubusercontent.com/assets/816045/3488445/e56524fe-04e3-11e4-83b6-f9a19d00a6a5.png)\n\nField description: `@{FXFormFieldKey: @\"taskDescription\", FXFormFieldTitle: @\"Task description\", FXFormFieldPlaceholder: @\"Task\", FXFormFieldType: FXFormFieldTypeLongText}`\n. Thank you so much! FXForms has saved me hours and days of work\n. Hi, @sebinsua \n\nMake sure that your bridging header is listed in the Build Settings under the \"Swift Compiler - Code Generation\" section.\nThe path should be relative to the project folder (similar to the Info.plist path).\n\n![2014-07-11 14 24 45](https://cloud.githubusercontent.com/assets/816045/3549720/04e84ebc-08ce-11e4-9aae-d82ee347c85b.png)\n\nYou might also want to read [\"Swift and Objective-C in the Same Project\"](https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/BuildingCocoaApps/MixandMatch.html).\n\nI made a test project with FXForms, and everything works perfectly fine. You can get it from my CloudApp. http://cl.ly/0O2W2T3e3n2S\n\n**Update**: I've just updated Xcode to Beta 3, and I have the same problem. I suppose, it is really specific only to beta 3, as on beta 1 everything was okay.\n. I guess, it's a compiler issue that should be fixed by Apple in the next beta.\n\nAnd it surely has something to do with FXFormViewController as it also appears in the error log.\n. First I make a form instance, set all the properties and then assign it to the \"form\" property of formController.\nEverything works just fine except the placeholders.\n. As I can tell, it only affects placeholders for long text fields.\n\nBy the way, it also causes another bug which incredibly simple to reproduce.\nFirst I fill in the second field.\n![06 2014 14 58 02 ios](https://cloud.githubusercontent.com/assets/816045/3488436/58d7d87e-04e3-11e4-8421-d90916abd603.png)\nThen I choose a value from the first one.\n![06 2014 15 00 03 ios](https://cloud.githubusercontent.com/assets/816045/3488443/8e861666-04e3-11e4-8f4d-56be8714185b.png)\nAnd finally I tap the back button to proceed filling in the form. As you can see, the second field value I typed in is still there but the overlaying placeholder also shows up.\n![06 2014 15 02 05 ios](https://cloud.githubusercontent.com/assets/816045/3488445/e56524fe-04e3-11e4-83b6-f9a19d00a6a5.png)\n\nField description: `@{FXFormFieldKey: @\"taskDescription\", FXFormFieldTitle: @\"Task description\", FXFormFieldPlaceholder: @\"Task\", FXFormFieldType: FXFormFieldTypeLongText}`\n. Thank you so much! FXForms has saved me hours and days of work\n. Hi, @sebinsua \n\nMake sure that your bridging header is listed in the Build Settings under the \"Swift Compiler - Code Generation\" section.\nThe path should be relative to the project folder (similar to the Info.plist path).\n\n![2014-07-11 14 24 45](https://cloud.githubusercontent.com/assets/816045/3549720/04e84ebc-08ce-11e4-9aae-d82ee347c85b.png)\n\nYou might also want to read [\"Swift and Objective-C in the Same Project\"](https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/BuildingCocoaApps/MixandMatch.html).\n\nI made a test project with FXForms, and everything works perfectly fine. You can get it from my CloudApp. http://cl.ly/0O2W2T3e3n2S\n\n**Update**: I've just updated Xcode to Beta 3, and I have the same problem. I suppose, it is really specific only to beta 3, as on beta 1 everything was okay.\n. I guess, it's a compiler issue that should be fixed by Apple in the next beta.\n\nAnd it surely has something to do with FXFormViewController as it also appears in the error log.\n. ",
    "resisi": "Hey @nicklockwood \ni still have this issue :/\n\nMay you can help me?\n\n![image](https://cloud.githubusercontent.com/assets/14897039/10179066/d880669e-6703-11e5-889b-fb079e505a7a.png)\n. Hey @nicklockwood \ni still have this issue :/\n\nMay you can help me?\n\n![image](https://cloud.githubusercontent.com/assets/14897039/10179066/d880669e-6703-11e5-889b-fb079e505a7a.png)\n. ",
    "ivanharmat": "Nick,\nI used this @\"textField.text\": userFirstName and it works fine.\nThank you for the great framework.\n. it works, but the table is in the edit mode.\n\n![ios simulator screen shot jul 24 2014 4 18 54 pm](https://cloud.githubusercontent.com/assets/2225400/3694221/1940e7f0-1370-11e4-8a92-b6c2ced18a61.png)\n. Yes,\nI'm fetching a list of resorts from my web API, and setting the NSArray object like this : [form setValue:resortArray forKey:@\"resortName\"];\nI might just hard code the list of resorts and create an array, but they may change once in a while.\nIf only I could set the table view in the non-edit mode, that would be awesome.\n. Could you be more specific?\nIt does not need to be set in controller, but I thought that would be the best way to make the API request and then reload table data. [self.tableView reloadData];\n. That worked!\nYou're the man! \nThanks.\n. @wdcurry looks pretty good. I'll look into that. Thanks\n. @billguy I'm going to try this solution, too. Thanks\n. Nick,\nI used this @\"textField.text\": userFirstName and it works fine.\nThank you for the great framework.\n. it works, but the table is in the edit mode.\n\n![ios simulator screen shot jul 24 2014 4 18 54 pm](https://cloud.githubusercontent.com/assets/2225400/3694221/1940e7f0-1370-11e4-8a92-b6c2ced18a61.png)\n. Yes,\nI'm fetching a list of resorts from my web API, and setting the NSArray object like this : [form setValue:resortArray forKey:@\"resortName\"];\nI might just hard code the list of resorts and create an array, but they may change once in a while.\nIf only I could set the table view in the non-edit mode, that would be awesome.\n. Could you be more specific?\nIt does not need to be set in controller, but I thought that would be the best way to make the API request and then reload table data. [self.tableView reloadData];\n. That worked!\nYou're the man! \nThanks.\n. @wdcurry looks pretty good. I'll look into that. Thanks\n. @billguy I'm going to try this solution, too. Thanks\n. ",
    "gardengrocer": "In your class, the field method that returns NSArray of form fields, add something like this to your array : @{FXFormFieldKey: @\"yourEmail\", @\"textField.text\": userEmail}\n. thanks for pointing that out Nick.\nSorry\n. I tried this : \nFXFormViewController *controller = [[FXFormViewController alloc] init];\n    YourAccountForm *form = [[YourAccountForm alloc] init];\n    [form setValue:@\"Ivan\" forKey:@\"firstName\"];\n    controller.formController.form = form;\n    self.formController.form = form;\nbut I get an error : '[<YourAccountForm 0x10dc84c50> setValue:forUndefinedKey:]: this class is not key value coding-compliant for the key firstName.'\n\nwithout the setValue method, form works, but the text field is empty.\n. ok. I'll look into the second option. Thanks\n. It's working now. I had a wrong field in a wrong form. stupid mistake.\nThanks for help Nick.\n. In your class, the field method that returns NSArray of form fields, add something like this to your array : @{FXFormFieldKey: @\"yourEmail\", @\"textField.text\": userEmail}\n. thanks for pointing that out Nick.\nSorry\n. I tried this : \nFXFormViewController *controller = [[FXFormViewController alloc] init];\n    YourAccountForm *form = [[YourAccountForm alloc] init];\n    [form setValue:@\"Ivan\" forKey:@\"firstName\"];\n    controller.formController.form = form;\n    self.formController.form = form;\nbut I get an error : '[<YourAccountForm 0x10dc84c50> setValue:forUndefinedKey:]: this class is not key value coding-compliant for the key firstName.'\n\nwithout the setValue method, form works, but the text field is empty.\n. ok. I'll look into the second option. Thanks\n. It's working now. I had a wrong field in a wrong form. stupid mistake.\nThanks for help Nick.\n. ",
    "ishaq": "here's an example where it might be useful\n\nWe want the user to pick from a list of themes. We display themes with an icon, a title (description of the field of course). Also user can also preview a theme before applying it.\n\nOne approach to do it would be by implementing a custom field controller (pretty much like the custom field controller example). Lets call it `ThemePickerViewController`. However, it would be wasteful to redefine the themes array again in `ThemePickerViewController`. So if it could access `field.options` somehow, it could configure its table view cells as appropriate.\n\nI am not very familiar with FXForms architecture but wouldn't it mean adding just another method `optionAtIndex` in addition to `optionDescriptionAtIndex`?\n\nPS: I was using 1.1.6 from Cocoa Pods till recently, just started pulling from this repo and wow. there's so much new functionality. You are a champ!\n. I think I didn't communicate effectively. I am not talking about something so complex :-)\n\nlet's take the field controller example as reference:\n\ninstead of a location (through a map view), this field controller lets you pick a theme (through a table view). so, something like this:\n\n``` objectivec\n// SettingsForm.h\n#import <FXForms/FXForms.h>\n\n@interface SettingsForm : NSObject <FXForm>\n@property (nonatomic, copy) NSString *theme;\n@end\n```\n\n``` objectivec\n// SettingsForm.m\n#import \"SettingsForm.h\"\n\n@implementation RASettingsForm\n\n#pragma mark - FXForms\n- (instancetype)init \n{\n    if(self = [super init]) \n    {\n        self.theme = @\"themes/01/\";\n    }\n}\n\n- (NSArray *)fields \n{\n    NSString *(^themeTransformer)(id value) = ^(id value) \n{\n        return {@\"themes/01/\": @\"Dark\",\n        @\"themes/02/\": @\"Light\",\n        @\"themes/03/\": @\"High Contrast\"}[value];\n};\n\n    return @[\n             @{FXFormFieldKey: @\"theme\", FXFormFieldOptions: @[@\"themes/01/\", @\"themes/02/\", @\"themes/03/\"],\n               FXFormFieldValueTransformer: themeTransformer, FXFormFieldController: @\"ThemePickerViewController\",\n               },\n             ];\n}\n```\n\n``` objectivec\n// ThemePickerViewController.h\n#import <FXForms/FXForms.h>\n@interface ThemePickerViewController : UITableViewController <FXFormFieldViewController>\n@property (nonatomic, strong) FXFormField *field;\n@end\n```\n\n``` objectivec\n// ThemePickerViewController.m\n#import \"ThemePickerViewController.m\"\n@implementation LocationMapViewController\n- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section\n {\n    return self.field.optionCount;\n}\n\n- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath \n{\n    // FIXME: right now FXFormField does not have an optionAtIndex method\n    NSString *themeDirectory = [self.field optionAtIndex:indexPath.row];\n    // now get the theme preview thumbnail, etc\n    // configure and return cell\n}\n@end\n```\n\nSo, if FXFormField had a `optionAtIndex` method (directly copied from `optionDescriptionAtIndex`)\n\n``` objectivec\n- (id)optionAtIndex:(NSUInteger)index\n{\n    if (index == 0)\n    {\n        return self.placeholder ?: self.options[0];\n    }\n    else\n    {\n        return self.options[index - (self.placeholder? 1: 0)];\n    }\n}\n```\n\nthe above ThemPickerViewController could have been implemented. right now it can't.\n. great :-)\n. thanks, I shouldn't be wasting your time with this anyway :-), closing.\n. here's an example where it might be useful\n\nWe want the user to pick from a list of themes. We display themes with an icon, a title (description of the field of course). Also user can also preview a theme before applying it.\n\nOne approach to do it would be by implementing a custom field controller (pretty much like the custom field controller example). Lets call it `ThemePickerViewController`. However, it would be wasteful to redefine the themes array again in `ThemePickerViewController`. So if it could access `field.options` somehow, it could configure its table view cells as appropriate.\n\nI am not very familiar with FXForms architecture but wouldn't it mean adding just another method `optionAtIndex` in addition to `optionDescriptionAtIndex`?\n\nPS: I was using 1.1.6 from Cocoa Pods till recently, just started pulling from this repo and wow. there's so much new functionality. You are a champ!\n. I think I didn't communicate effectively. I am not talking about something so complex :-)\n\nlet's take the field controller example as reference:\n\ninstead of a location (through a map view), this field controller lets you pick a theme (through a table view). so, something like this:\n\n``` objectivec\n// SettingsForm.h\n#import <FXForms/FXForms.h>\n\n@interface SettingsForm : NSObject <FXForm>\n@property (nonatomic, copy) NSString *theme;\n@end\n```\n\n``` objectivec\n// SettingsForm.m\n#import \"SettingsForm.h\"\n\n@implementation RASettingsForm\n\n#pragma mark - FXForms\n- (instancetype)init \n{\n    if(self = [super init]) \n    {\n        self.theme = @\"themes/01/\";\n    }\n}\n\n- (NSArray *)fields \n{\n    NSString *(^themeTransformer)(id value) = ^(id value) \n{\n        return {@\"themes/01/\": @\"Dark\",\n        @\"themes/02/\": @\"Light\",\n        @\"themes/03/\": @\"High Contrast\"}[value];\n};\n\n    return @[\n             @{FXFormFieldKey: @\"theme\", FXFormFieldOptions: @[@\"themes/01/\", @\"themes/02/\", @\"themes/03/\"],\n               FXFormFieldValueTransformer: themeTransformer, FXFormFieldController: @\"ThemePickerViewController\",\n               },\n             ];\n}\n```\n\n``` objectivec\n// ThemePickerViewController.h\n#import <FXForms/FXForms.h>\n@interface ThemePickerViewController : UITableViewController <FXFormFieldViewController>\n@property (nonatomic, strong) FXFormField *field;\n@end\n```\n\n``` objectivec\n// ThemePickerViewController.m\n#import \"ThemePickerViewController.m\"\n@implementation LocationMapViewController\n- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section\n {\n    return self.field.optionCount;\n}\n\n- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath \n{\n    // FIXME: right now FXFormField does not have an optionAtIndex method\n    NSString *themeDirectory = [self.field optionAtIndex:indexPath.row];\n    // now get the theme preview thumbnail, etc\n    // configure and return cell\n}\n@end\n```\n\nSo, if FXFormField had a `optionAtIndex` method (directly copied from `optionDescriptionAtIndex`)\n\n``` objectivec\n- (id)optionAtIndex:(NSUInteger)index\n{\n    if (index == 0)\n    {\n        return self.placeholder ?: self.options[0];\n    }\n    else\n    {\n        return self.options[index - (self.placeholder? 1: 0)];\n    }\n}\n```\n\nthe above ThemPickerViewController could have been implemented. right now it can't.\n. great :-)\n. thanks, I shouldn't be wasting your time with this anyway :-), closing.\n. ",
    "ohayon": "I had this issue as well and made a fix: https://github.com/nicklockwood/FXForms/pull/333\n\nThe fix just carries over the parent cellConfiguration dictionary onto its option-choosing children.\n. @aryaxt - im not exactly sure, but it looks like 1.2.13 is the most recent version @nicklockwood  has released.\n. if you point your podfile to master of this pod you'll get it @aryaxt \n. I had this issue as well and made a fix: https://github.com/nicklockwood/FXForms/pull/333\n\nThe fix just carries over the parent cellConfiguration dictionary onto its option-choosing children.\n. @aryaxt - im not exactly sure, but it looks like 1.2.13 is the most recent version @nicklockwood  has released.\n. if you point your podfile to master of this pod you'll get it @aryaxt \n. ",
    "markst": "+1 for adding support for disabling keyboard notifications. \nmy solution for now:\n`\n[[NSNotificationCenter defaultCenter] removeObserver:formController];\n`\nafter initialising the `FXFormController`\n. ah great, thanks for the pointer!\n. @nicklockwood cheers. though I wish for the section to be expandable/collapsable. i.e the user selects the option row, the inline options appear, they select the option then the section collapses. \n. I'm no longer experiencing this.\n. Thanks @nicklockwood\n. I wish for the use to be able to only select one option & to be displayed in a `FXFormOptionPickerCell`\n. Hey Nick, thanks. I'm using `1.2.7` and I'm still having this issue. \n. A resolution for this is to simply add\n`FXFormFieldType: FXFormFieldTypeDefault`\nperhaps this is not actually an issue?\n. Being able to define nested forms would be awesome. \nIf you had a object with relationships, which has relationships. \nYou could define a form within a form within a form. \n. +1\n. a resolution seems to be to define this in my form proxy:\n\n``` objc\n- (id)valueForKey:(NSString *)key\n{\n    if ([key containsString:@\".\"]) {\n        return [super valueForKeyPath:key];\n    }\n    return [super valueForKey:key];\n}\n```\n. This is pretty buggy on iOS9. \nAlso an issue if `UIKeyboardWillHideNotification` gets could get called before `UIKeyboardDidShowNotification`. i.e If a modal view is presented with a `FXForm` & the vc behind the modal has a keyboard input which is resigned...\n. @gtranchedone not really. but issue occurs for me even when pushing a vc with a `FXForm` without keyboard previously being visible. Seems like an iOS9 thing where by `UIKeyboardWillHideNotification` is called more than balanced show... \nhttp://stackoverflow.com/questions/32860151/uikeyboardwillshownotification-calling-twice-ios-9\n. Could KVO the content insets? or just expose the property `originalTableContentInset` which isn't set by the `keyboardDidShow:`. \n. +1 for adding support for disabling keyboard notifications. \nmy solution for now:\n`\n[[NSNotificationCenter defaultCenter] removeObserver:formController];\n`\nafter initialising the `FXFormController`\n. ah great, thanks for the pointer!\n. @nicklockwood cheers. though I wish for the section to be expandable/collapsable. i.e the user selects the option row, the inline options appear, they select the option then the section collapses. \n. I'm no longer experiencing this.\n. Thanks @nicklockwood\n. I wish for the use to be able to only select one option & to be displayed in a `FXFormOptionPickerCell`\n. Hey Nick, thanks. I'm using `1.2.7` and I'm still having this issue. \n. A resolution for this is to simply add\n`FXFormFieldType: FXFormFieldTypeDefault`\nperhaps this is not actually an issue?\n. Being able to define nested forms would be awesome. \nIf you had a object with relationships, which has relationships. \nYou could define a form within a form within a form. \n. +1\n. a resolution seems to be to define this in my form proxy:\n\n``` objc\n- (id)valueForKey:(NSString *)key\n{\n    if ([key containsString:@\".\"]) {\n        return [super valueForKeyPath:key];\n    }\n    return [super valueForKey:key];\n}\n```\n. This is pretty buggy on iOS9. \nAlso an issue if `UIKeyboardWillHideNotification` gets could get called before `UIKeyboardDidShowNotification`. i.e If a modal view is presented with a `FXForm` & the vc behind the modal has a keyboard input which is resigned...\n. @gtranchedone not really. but issue occurs for me even when pushing a vc with a `FXForm` without keyboard previously being visible. Seems like an iOS9 thing where by `UIKeyboardWillHideNotification` is called more than balanced show... \nhttp://stackoverflow.com/questions/32860151/uikeyboardwillshownotification-calling-twice-ios-9\n. Could KVO the content insets? or just expose the property `originalTableContentInset` which isn't set by the `keyboardDidShow:`. \n. ",
    "autresphere": "@markst Perfect workaround, thanks for sharing!\n. @markst Perfect workaround, thanks for sharing!\n. ",
    "ldantona": "Does anyone know if this fix has ever been pushed to master?\nI've just started working with FXForms and experiencing a strange behavior with the footer too, which seems to be fixed removing the observer as suggested.\n. Is there any update on this topic?\nI'm looking for a way to validate the fields and mark them when not valid.\n\nMany thanks,\nDAN\n. Hi @timgcarlson \nthanks for your detailed answer!\n\nI'm trying to reproduce what you suggest but my action is never called.\nFor a text field the action seems to be called at line 3001 of FXForms.m, but the textFieldDidEndEditing method is never called.\nDoes it work for you with iOS 9 too?\n\nEDIT: here's the issue: https://github.com/nicklockwood/FXForms/issues/410 which is not related to form validation.\n. Does anyone know if this fix has ever been pushed to master?\nI've just started working with FXForms and experiencing a strange behavior with the footer too, which seems to be fixed removing the observer as suggested.\n. Is there any update on this topic?\nI'm looking for a way to validate the fields and mark them when not valid.\n\nMany thanks,\nDAN\n. Hi @timgcarlson \nthanks for your detailed answer!\n\nI'm trying to reproduce what you suggest but my action is never called.\nFor a text field the action seems to be called at line 3001 of FXForms.m, but the textFieldDidEndEditing method is never called.\nDoes it work for you with iOS 9 too?\n\nEDIT: here's the issue: https://github.com/nicklockwood/FXForms/issues/410 which is not related to form validation.\n. ",
    "andreacremaschi": "Up! I am interested in this feature too. \n@nicklockwood I solved following the way you suggested, but many of the great automatisms implemented in FXForms are lost this way. I.e. FXForms can't infer field data types from data properties, so they must be declared manually. This happens because the functions that analyze the Objective-C object interface (i.e. FXFormProperties()) are called passing the proxy as a parameter and not the actual object. I'd like to suggest a solution but I am afraid this can't be solved without a huge API-breaking refactor.. Or maybe you see a better way out?\n. Ok, thanks for the feedback.\n. +1\n. Up! I am interested in this feature too. \n@nicklockwood I solved following the way you suggested, but many of the great automatisms implemented in FXForms are lost this way. I.e. FXForms can't infer field data types from data properties, so they must be declared manually. This happens because the functions that analyze the Objective-C object interface (i.e. FXFormProperties()) are called passing the proxy as a parameter and not the actual object. I'd like to suggest a solution but I am afraid this can't be solved without a huge API-breaking refactor.. Or maybe you see a better way out?\n. Ok, thanks for the feedback.\n. +1\n. ",
    "bachirelkhoury": "Yeah same here.\nIt would be good to have that updated.\n\nTo get the latest code I've used:\n\n```\npod 'FXForms', :head\n```\n. Thanks Nick! Feeling real silly now, the most obvious thing to try.\nTried removing the key entirely, then got the default capitalised key instead.\nall good. :]\ncheers\n. thx\n. Yeah same here.\nIt would be good to have that updated.\n\nTo get the latest code I've used:\n\n```\npod 'FXForms', :head\n```\n. Thanks Nick! Feeling real silly now, the most obvious thing to try.\nTried removing the key entirely, then got the default capitalised key instead.\nall good. :]\ncheers\n. thx\n. ",
    "ReDetection": "good. but not ideal because if I want to query my form for secure fields to save them in keychain I have to search for `FXFormFieldTypePassword` and for `@\"textField.secureTextEntry\"` (and maybe for some more). \nAlso to create not other issue: why so much code in one file? Are you looking forward to splitting them? Also, I can't find any milestone, when you plan to release version 1.2? \nFor me main issue is xcode6/ios8 support (currently, keyboard won't show there) and I will try to fix it. Have you investigated it already? \n. Ok, keyboard issue is not yours :) http://stackoverflow.com/questions/24095677/missing-keyboard-on-ios8-simulator\n. ok\n. Just called `-[FXFormController enumerateFieldsWithBlock:]` after click Done button (thus after form was displayed)\n\n``` objective-c\n- (IBAction)done:(id)sender {\n    [self.formController enumerateFieldsWithBlock:^(FXFormField *field, NSIndexPath *indexPath) {\n        NSLog(@\"field[%@]=%@\", field.key, field.value);\n    }];\n}\n```\n\nWhen there is no `FXFormFieldInline` option, everything is fine\n. ok, good enough.\n. good. but not ideal because if I want to query my form for secure fields to save them in keychain I have to search for `FXFormFieldTypePassword` and for `@\"textField.secureTextEntry\"` (and maybe for some more). \nAlso to create not other issue: why so much code in one file? Are you looking forward to splitting them? Also, I can't find any milestone, when you plan to release version 1.2? \nFor me main issue is xcode6/ios8 support (currently, keyboard won't show there) and I will try to fix it. Have you investigated it already? \n. Ok, keyboard issue is not yours :) http://stackoverflow.com/questions/24095677/missing-keyboard-on-ios8-simulator\n. ok\n. Just called `-[FXFormController enumerateFieldsWithBlock:]` after click Done button (thus after form was displayed)\n\n``` objective-c\n- (IBAction)done:(id)sender {\n    [self.formController enumerateFieldsWithBlock:^(FXFormField *field, NSIndexPath *indexPath) {\n        NSLog(@\"field[%@]=%@\", field.key, field.value);\n    }];\n}\n```\n\nWhen there is no `FXFormFieldInline` option, everything is fine\n. ok, good enough.\n. ",
    "webwarrior06": "It occurs when variable names in form model header file and keys you use in implementation file are different.\n. Thank you so much! It serves me well.\n. I found a solution. It works well. But I don't know how much it is accurate to fix it this way.\nI added following method into FXForms.m file\n![screen shot 2014-09-19 at 12 53 30](https://cloud.githubusercontent.com/assets/3088750/4333629/08f6cca8-3fe3-11e4-8a3f-33dc04816afd.png)\nAnd called it inside textFieldDidBeginEditing method in this way:\n![screen shot 2014-09-19 at 12 54 08](https://cloud.githubusercontent.com/assets/3088750/4333660/6570b67e-3fe3-11e4-96e6-dcda33526b4b.png)\n. It occurs when variable names in form model header file and keys you use in implementation file are different.\n. Thank you so much! It serves me well.\n. I found a solution. It works well. But I don't know how much it is accurate to fix it this way.\nI added following method into FXForms.m file\n![screen shot 2014-09-19 at 12 53 30](https://cloud.githubusercontent.com/assets/3088750/4333629/08f6cca8-3fe3-11e4-8a3f-33dc04816afd.png)\nAnd called it inside textFieldDidBeginEditing method in this way:\n![screen shot 2014-09-19 at 12 54 08](https://cloud.githubusercontent.com/assets/3088750/4333660/6570b67e-3fe3-11e4-96e6-dcda33526b4b.png)\n. ",
    "simonekalb": "Same problem here.\n. Same problem here.\n. ",
    "goofansu": "+1\n. +1\n. ",
    "nakp": "It's not tapping, as it is set as inputView for the field, it is normal (and expected) to be dismissed interactively or on scroll (this last one is set)\n. It's not tapping, as it is set as inputView for the field, it is normal (and expected) to be dismissed interactively or on scroll (this last one is set)\n. ",
    "DiogoAndre": "How about tapping on the same cell? I think that's the default behavior on similar uses of UIDatePicker. And also coloring the value while editing...\n\nsomething like this:\n\n``` objc\n- (void)didSelectWithTableView:(UITableView *)tableView controller:(__unused UIViewController *)controller\n{\n    if (self.isFirstResponder) {\n        [self resignFirstResponder];\n        self.detailTextLabel.textColor = _detailTextLabelColor;\n    } else {\n        [self becomeFirstResponder];\n        self.detailTextLabel.textColor = UIColor.redColor;\n    }\n    [tableView deselectRowAtIndexPath:tableView.indexPathForSelectedRow animated:YES];\n}\n```\n\nFrom diogoandre/FXForms@1feb8f81f28ff0c4380438ac9b29838ffc2983bd\n. Hey, thanks! About the color change, no problem.. I wasn't so sure about that implementation myself. I'll try to find a better way.\n. How about tapping on the same cell? I think that's the default behavior on similar uses of UIDatePicker. And also coloring the value while editing...\n\nsomething like this:\n\n``` objc\n- (void)didSelectWithTableView:(UITableView *)tableView controller:(__unused UIViewController *)controller\n{\n    if (self.isFirstResponder) {\n        [self resignFirstResponder];\n        self.detailTextLabel.textColor = _detailTextLabelColor;\n    } else {\n        [self becomeFirstResponder];\n        self.detailTextLabel.textColor = UIColor.redColor;\n    }\n    [tableView deselectRowAtIndexPath:tableView.indexPathForSelectedRow animated:YES];\n}\n```\n\nFrom diogoandre/FXForms@1feb8f81f28ff0c4380438ac9b29838ffc2983bd\n. Hey, thanks! About the color change, no problem.. I wasn't so sure about that implementation myself. I'll try to find a better way.\n. ",
    "internalG": "If I didn't read this thread I would not know this tip. Let alone the users:(\n. I mean the enum filed that user can input a new value. For example, the language field we only list @\"English\", @\"Spanish\", @\"French\", @\"Dutch\". How can I enable the user to input the Chinese as a new value?\n. Thanks. It seems the FieldController is the way to go.\n. If I didn't read this thread I would not know this tip. Let alone the users:(\n. I mean the enum filed that user can input a new value. For example, the language field we only list @\"English\", @\"Spanish\", @\"French\", @\"Dutch\". How can I enable the user to input the Chinese as a new value?\n. Thanks. It seems the FieldController is the way to go.\n. ",
    "carlosnaguilera": "I need this! We need a two columns layout for iPad. In the following days I will start to work on it. If I can make it work in a good way I will do a pull request. In the meanwhile, any idea is welcome\n. I started working on it but I didn't finish it...\n. Great! Thank you very much Nick!\n. I need this! We need a two columns layout for iPad. In the following days I will start to work on it. If I can make it work in a good way I will do a pull request. In the meanwhile, any idea is welcome\n. I started working on it but I didn't finish it...\n. Great! Thank you very much Nick!\n. ",
    "marbetschar": "Any news about UICollectionView support? Have seen #165 - but do not see how this is related..?\n. So what's the current state of progress? I may be able to jump in to get things done...?\n. Any news about UICollectionView support? Have seen #165 - but do not see how this is related..?\n. So what's the current state of progress? I may be able to jump in to get things done...?\n. ",
    "jjochen": "+1\n. +1\n. ",
    "lmcd": ":+1: \n. :+1: \n. ",
    "tranthanhvu": "I have a dynamic list of products, it'll be returned from API. \nI don't know how to use FXForm to create the option from remote data. I have a look at the DynamicFieldsExample, But still don't know. \n\nFXForm can do that or I need create a new cell for remote data case ?\n. I have a dynamic list of products, it'll be returned from API. \nI don't know how to use FXForm to create the option from remote data. I have a look at the DynamicFieldsExample, But still don't know. \n\nFXForm can do that or I need create a new cell for remote data case ?\n. ",
    "Irrelon": "Any chance you could give a quick description of how a header cell is created / modified? I'd like to create a custom header cell that I can set the font and bold / italic on but cannot work out how header cells are even being created.\n\nI'm assuming it is something like sub-classing FXFormBaseCell and then implementing an init that sets the font of the label or something like that?\n. Thanks Nick, please excuse my ignorance I'm just starting out with FXForms...\n\nI'm generating my form from the example code in DynamicFieldsExample using the JSON file to define the fields the form will use.\n\nIn there I've added a line:\n\n```\n {\n    \"key\": \"moo\",\n    \"class\": \"MyFormClass\",\n    \"title\": \"Some long title / description text to add to the form and tell the user what the next part is all about\"\n}\n```\n\nFirst I created a new class that sub-classed FXFormBaseCell but reading your comments that is incorrect. Instead I should sub-class UILabel and set the properties in init? How would I access the \"title\" property of the JSON above for the particular header view being created?\n. OK cool that works great, thank you!\n\nJust one more question... if I provide a {\"header\": \"Whatever text I want\"}, directly after that in the form I will get a blank cell. Is there an easy way to not show this blank cell?\n\nI'm trying to achieve a header with bold text that looks like a normal header but under which there are no further cells, to be used as either a title or description area in the form. From your above code I now have a header with all the styling I need but I also need to hide or disable the trailing cell.\n\nMany thanks for your replies and time!!!\n. The problem with...\n\n```\n{\"header\": \"Whatever text I want\",\n \"key\": \"field1\",\n \"title\": \"field 1\",\n\"type\": \"integer\"}\n```\n\n...is that we might want multiple title and description \"headers\" one after the other. I think your second suggestion of an ordinary cell might work but I need this description text to be multi-line and I didn't think multi-line worked with a regular cell?\n\nIs there any way to use a similar method to the one you gave code for above to customise a cell?\n\nE.g.:\n\n```\n- (UIView *)tableView:(UITableView *)tableView viewForMyCustomCellTypeInSection:(NSInteger)section {...}\n\n- (CGFloat)tableView:(UITableView *)tableView heightForMyCustomCellTypeInSection:(NSInteger)section {...}\n```\n. Any chance you could give a quick description of how a header cell is created / modified? I'd like to create a custom header cell that I can set the font and bold / italic on but cannot work out how header cells are even being created.\n\nI'm assuming it is something like sub-classing FXFormBaseCell and then implementing an init that sets the font of the label or something like that?\n. Thanks Nick, please excuse my ignorance I'm just starting out with FXForms...\n\nI'm generating my form from the example code in DynamicFieldsExample using the JSON file to define the fields the form will use.\n\nIn there I've added a line:\n\n```\n {\n    \"key\": \"moo\",\n    \"class\": \"MyFormClass\",\n    \"title\": \"Some long title / description text to add to the form and tell the user what the next part is all about\"\n}\n```\n\nFirst I created a new class that sub-classed FXFormBaseCell but reading your comments that is incorrect. Instead I should sub-class UILabel and set the properties in init? How would I access the \"title\" property of the JSON above for the particular header view being created?\n. OK cool that works great, thank you!\n\nJust one more question... if I provide a {\"header\": \"Whatever text I want\"}, directly after that in the form I will get a blank cell. Is there an easy way to not show this blank cell?\n\nI'm trying to achieve a header with bold text that looks like a normal header but under which there are no further cells, to be used as either a title or description area in the form. From your above code I now have a header with all the styling I need but I also need to hide or disable the trailing cell.\n\nMany thanks for your replies and time!!!\n. The problem with...\n\n```\n{\"header\": \"Whatever text I want\",\n \"key\": \"field1\",\n \"title\": \"field 1\",\n\"type\": \"integer\"}\n```\n\n...is that we might want multiple title and description \"headers\" one after the other. I think your second suggestion of an ordinary cell might work but I need this description text to be multi-line and I didn't think multi-line worked with a regular cell?\n\nIs there any way to use a similar method to the one you gave code for above to customise a cell?\n\nE.g.:\n\n```\n- (UIView *)tableView:(UITableView *)tableView viewForMyCustomCellTypeInSection:(NSInteger)section {...}\n\n- (CGFloat)tableView:(UITableView *)tableView heightForMyCustomCellTypeInSection:(NSInteger)section {...}\n```\n. ",
    "JonasGessner": "+1.\n. +1.\n. ",
    "carlhunterroach": "That was my understanding. Returning to using simple strings:\n\nOn my form when I click Gender, the options slide into view and the default\nvalue is ticked. But taps only turn the option grey and the tick doesn't\nmove. On the main form itself no default is displayed; just the title\n\"Gender\"\n\nElsewhere on my form, switches work, textfields work and datetime ui pops\nup and alls me to scroll to a new date.\n\nThe array entry for Gender looks like this (apologies but I have yet to\ndefine my own enums to stand-in for FXForm's macros)\n\n[\"key\":\"gender\",\n \"default: \"Female\",\n \"title\" : \"Gender\",\n \"type\" : [\"Not specified\", \"Female\", \"Male\"] ]\n\nHave I missed anything in this definition?\n\nOn 8 September 2014 11:53, Nick Lockwood notifications@github.com wrote:\n\n> Note: for the example you've given, you shouldn't need to use\n> FXFormFieldValueTransformer as the values are simple strings. If you find\n> that do need to use a value transformer, let me know as that's a bit more\n> complex.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/nicklockwood/FXForms/issues/177#issuecomment-54802466\n> .\n. I've still got the same behaviour. Tapping an item momentarily turns its background grey but doesn't set its tickmark. I've set inline to true but that, as you might guess, doesn't change the behaviour.\n\ntableView:didSelectRowAtIndexPath _is_ called in FXForm.m\n. thanks Nick.\n\nOn 16 September 2014 11:43, Nick Lockwood notifications@github.com wrote:\n\n> You need to override valueForKey: and setValue:forKey: in your form object\n> (see the DynamicFieldsExample for details) otherwise FXForms cannot record\n> the state of the field.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/nicklockwood/FXForms/issues/177#issuecomment-55725374\n> .\n. That was my understanding. Returning to using simple strings:\n\nOn my form when I click Gender, the options slide into view and the default\nvalue is ticked. But taps only turn the option grey and the tick doesn't\nmove. On the main form itself no default is displayed; just the title\n\"Gender\"\n\nElsewhere on my form, switches work, textfields work and datetime ui pops\nup and alls me to scroll to a new date.\n\nThe array entry for Gender looks like this (apologies but I have yet to\ndefine my own enums to stand-in for FXForm's macros)\n\n[\"key\":\"gender\",\n \"default: \"Female\",\n \"title\" : \"Gender\",\n \"type\" : [\"Not specified\", \"Female\", \"Male\"] ]\n\nHave I missed anything in this definition?\n\nOn 8 September 2014 11:53, Nick Lockwood notifications@github.com wrote:\n\n> Note: for the example you've given, you shouldn't need to use\n> FXFormFieldValueTransformer as the values are simple strings. If you find\n> that do need to use a value transformer, let me know as that's a bit more\n> complex.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/nicklockwood/FXForms/issues/177#issuecomment-54802466\n> .\n. I've still got the same behaviour. Tapping an item momentarily turns its background grey but doesn't set its tickmark. I've set inline to true but that, as you might guess, doesn't change the behaviour.\n\ntableView:didSelectRowAtIndexPath _is_ called in FXForm.m\n. thanks Nick.\n\nOn 16 September 2014 11:43, Nick Lockwood notifications@github.com wrote:\n\n> You need to override valueForKey: and setValue:forKey: in your form object\n> (see the DynamicFieldsExample for details) otherwise FXForms cannot record\n> the state of the field.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/nicklockwood/FXForms/issues/177#issuecomment-55725374\n> .\n. ",
    "byronrode": "Just an FYI: http://stackoverflow.com/questions/25773661/scaledvalueforvalue-called-on-a-font-that-doesnt-have-a-text-style-set/25996600#25996600\n. Just an FYI: http://stackoverflow.com/questions/25773661/scaledvalueforvalue-called-on-a-font-that-doesnt-have-a-text-style-set/25996600#25996600\n. ",
    "jarrodglasgow": "I'm doing something similar. But if you user is currently editing a field and taps the barbutton it doesn't set the value they entered. \n\nIs there a way around this? \n. I'm doing something similar. But if you user is currently editing a field and taps the barbutton it doesn't set the value they entered. \n\nIs there a way around this? \n. ",
    "avgx": "Is it available via pod?\n. Is it available via pod?\n. ",
    "BObereder": "Ah ok perfect, thanks for that quick answer.\n\nIs there a way to set the accessibilityLabel for the tableView of the options subform?\n. I just tried it setting the accessibilityLabel of a cell with key/value pairs but unfortunately it didn't work. ;(\n. Ah ok perfect, thanks for that quick answer.\n\nIs there a way to set the accessibilityLabel for the tableView of the options subform?\n. I just tried it setting the accessibilityLabel of a cell with key/value pairs but unfortunately it didn't work. ;(\n. ",
    "milesegan": "Struggling with this too. This is a larger issue because common iOS acceptance testing tools use the accessibility labels to drive automated UI tests.\n. Struggling with this too. This is a larger issue because common iOS acceptance testing tools use the accessibility labels to drive automated UI tests.\n. ",
    "yongeli": "Thanks for the response, it'd be great to not dismiss the keyboard on say a login form.\n\nAlso about the second part of the question, would I be able to put a custom action to the Done Button on the keyboard? I tried calling textFieldShouldReturn on the controller but it didn't seem to alter behaviour. Sorry if this is just an error on my part.\n\nThanks again,\n. I see, currently using that as a workaround, it's just slightly weird if the user changes the field then backtracks and edit previous fields instead pressing Login.\n\nThanks for the replies! Much appreciated.\n. Thanks for the response, it'd be great to not dismiss the keyboard on say a login form.\n\nAlso about the second part of the question, would I be able to put a custom action to the Done Button on the keyboard? I tried calling textFieldShouldReturn on the controller but it didn't seem to alter behaviour. Sorry if this is just an error on my part.\n\nThanks again,\n. I see, currently using that as a workaround, it's just slightly weird if the user changes the field then backtracks and edit previous fields instead pressing Login.\n\nThanks for the replies! Much appreciated.\n. ",
    "smileyborg": "Removing the `static` qualifier resolves the Swift compilation issue.\n. Removing the `static` qualifier resolves the Swift compilation issue.\n. ",
    "eclopez": "It seems like you can't set the `value` property of a FXFormField instance that belongs to a FXFormFieldViewController in iOS 8/FXForms2.  I tried to recreate the FieldControllerExample and it wouldn't work. I'll try to study the problem in greater detail tomorrow, as it's completely possible I did something wrong, as I did it quickly before I left for work this morning.\n. Nevermind, I figured it out. I needed to set the value on the form and not on the field.\n. Thanks. Setting the default in init did the trick.\n. It seems like you can't set the `value` property of a FXFormField instance that belongs to a FXFormFieldViewController in iOS 8/FXForms2.  I tried to recreate the FieldControllerExample and it wouldn't work. I'll try to study the problem in greater detail tomorrow, as it's completely possible I did something wrong, as I did it quickly before I left for work this morning.\n. Nevermind, I figured it out. I needed to set the value on the form and not on the field.\n. Thanks. Setting the default in init did the trick.\n. ",
    "willlarche": "+1\n. +1\n. ",
    "hjanuschka": "look at this subclass of FXFormTextFieldCell -> https://github.com/hjanuschka/HJFXFormsJVFloatLabeledTextField/tree/master/HJFXFormsJVFloatLabeledTextFieldDEMO/HJFXFormsJVFloatLabeledTextField\n\nworks as a 1:1 replacement for the textfield types, and supports the KV values of JVFFloatLable\n\nedit: sorry for the grave digger, have'nt realized its almost a year old\n. ```\n- (NSArray *)fields {\n}\n```\n\ni am doing it in a similiar way, looping threw the json finding values with `#` and replacing value with a a uicolor, just thought, there is a built in way in FXForms, issue can be closed\n. closed - was an issue in combination with https://github.com/CooperRS/RMStepsController/tree/master/RMStepsController\n. look at this subclass of FXFormTextFieldCell -> https://github.com/hjanuschka/HJFXFormsJVFloatLabeledTextField/tree/master/HJFXFormsJVFloatLabeledTextFieldDEMO/HJFXFormsJVFloatLabeledTextField\n\nworks as a 1:1 replacement for the textfield types, and supports the KV values of JVFFloatLable\n\nedit: sorry for the grave digger, have'nt realized its almost a year old\n. ```\n- (NSArray *)fields {\n}\n```\n\ni am doing it in a similiar way, looping threw the json finding values with `#` and replacing value with a a uicolor, just thought, there is a built in way in FXForms, issue can be closed\n. closed - was an issue in combination with https://github.com/CooperRS/RMStepsController/tree/master/RMStepsController\n. ",
    "ninokierulf": "Hi, I am using 1.2.2 but I still getting an implicit header and footer. Is there any workaround as I don't want to modify FXForm engine\n\nEDIT: I tried modifying the code of FXForm but still unable to find where it is adding the section.\nI used the delegate methods that requests for view height, also tried to return nil header/footer but also no luck. Any advice would be helpful, thanks! \n. It is the blank header and footer. If the gap is intended, then my solution is just to adjust the scrollview content inset. anyway, thanks for the feedback\n. Hi nick, it worked, thanks for that.\n. Hi, I am using 1.2.2 but I still getting an implicit header and footer. Is there any workaround as I don't want to modify FXForm engine\n\nEDIT: I tried modifying the code of FXForm but still unable to find where it is adding the section.\nI used the delegate methods that requests for view height, also tried to return nil header/footer but also no luck. Any advice would be helpful, thanks! \n. It is the blank header and footer. If the gap is intended, then my solution is just to adjust the scrollview content inset. anyway, thanks for the feedback\n. Hi nick, it worked, thanks for that.\n. ",
    "sampaulnaik": "Guise? :|\n\nI'm so lost.\n. DEAR GOD. I'm such a fool. Forgot to reload tableview.\nSorry for wasting your time. Had a brainfart there. My bad.\n\nAlso, you're doing some amazing work. Thank you :).\n. Guise? :|\n\nI'm so lost.\n. DEAR GOD. I'm such a fool. Forgot to reload tableview.\nSorry for wasting your time. Had a brainfart there. My bad.\n\nAlso, you're doing some amazing work. Thank you :).\n. ",
    "ianhotep": "Got it! Thanks for all your hard work.\n. Got it! Thanks for all your hard work.\n. ",
    "stefanocdn": "Thank you very much for your quick answer, I adopted the protocol like you told me and it works.\n. Sure, the form is a user profile form with properties;\n\n```\n@property (nonatomic, copy) NSString *firstName;\n@property (nonatomic, copy) NSString *lastName;\n@property (nonatomic, strong) NSDate *dateOfBirth;\n@property (nonatomic, strong) NSArray *languages;\n```\n\nWhere languagesField is set inline\n\n```\n- (NSDictionary *)languagesField\n{\n    return @{FXFormFieldInline: @YES};\n}\n```\n\nWhen the viewcontroller, which is a subclass of FXFormViewController, is loaded (to allow the user to edit these properties) I populate the fields like so:\n\n```\n    UserProfileForm *form = (UserProfileForm *)self.formController.form;\n    if(self.user.firstName) form.firstName = self.user.firstName;\n    if(self.user.lastName) form.lastName = self.user.lastName;\n    if(self.user.birthday) form.dateOfBirth = self.user.birthday;\n    if(self.user.languages) form.languages = self.user.languages;\n```\n\nWhich works for all fields except for languages, even after [self.tableView reloadData].\n. Ok thank you!\n. Thank you very much for your quick answer, I adopted the protocol like you told me and it works.\n. Sure, the form is a user profile form with properties;\n\n```\n@property (nonatomic, copy) NSString *firstName;\n@property (nonatomic, copy) NSString *lastName;\n@property (nonatomic, strong) NSDate *dateOfBirth;\n@property (nonatomic, strong) NSArray *languages;\n```\n\nWhere languagesField is set inline\n\n```\n- (NSDictionary *)languagesField\n{\n    return @{FXFormFieldInline: @YES};\n}\n```\n\nWhen the viewcontroller, which is a subclass of FXFormViewController, is loaded (to allow the user to edit these properties) I populate the fields like so:\n\n```\n    UserProfileForm *form = (UserProfileForm *)self.formController.form;\n    if(self.user.firstName) form.firstName = self.user.firstName;\n    if(self.user.lastName) form.lastName = self.user.lastName;\n    if(self.user.birthday) form.dateOfBirth = self.user.birthday;\n    if(self.user.languages) form.languages = self.user.languages;\n```\n\nWhich works for all fields except for languages, even after [self.tableView reloadData].\n. Ok thank you!\n. ",
    "marinofaggiana": "ah ! ok .. thanks .. if I can use your time ..how do I access the version property to insert my version number before it is displayed ...\n\n@interface ImpostazioniForm : NSObject <FXForm>\n\n@property (nonatomic, assign) NSString *version;\n@property (nonatomic, assign) BOOL homeinit;\n\n.....\n\n@end\n\n@{FXFormFieldKey: @\"version\", FXFormFieldType: FXFormFieldTypeLabel, FXFormFieldTitle: @\"Program Version\", FXFormFieldDefaultValue: @\"1.0\"}\n\nand ... homeinit il bool, how do I intercept (delegate) when it changes?\n\nthannnkssssss !!!!!!!!!\n. I try now, thanks for your work !!\n. another small problem ... this is my Field :\n\n@{@\"textLabel.font\": [UIFont fontWithName:@\"Arial\" size:15.0], FXFormFieldHeader: @\"\", FXFormFieldType: FXFormFieldTypeLabel, FXFormFieldTitle: @\"Termini e privacy\", FXFormFieldSegue: @\"PrivacyPolicySegue\", },\n\nits ok but not view Disclosure Indicator ... why ?\n. Yes !\n. ah ! ok .. thanks .. if I can use your time ..how do I access the version property to insert my version number before it is displayed ...\n\n@interface ImpostazioniForm : NSObject <FXForm>\n\n@property (nonatomic, assign) NSString *version;\n@property (nonatomic, assign) BOOL homeinit;\n\n.....\n\n@end\n\n@{FXFormFieldKey: @\"version\", FXFormFieldType: FXFormFieldTypeLabel, FXFormFieldTitle: @\"Program Version\", FXFormFieldDefaultValue: @\"1.0\"}\n\nand ... homeinit il bool, how do I intercept (delegate) when it changes?\n\nthannnkssssss !!!!!!!!!\n. I try now, thanks for your work !!\n. another small problem ... this is my Field :\n\n@{@\"textLabel.font\": [UIFont fontWithName:@\"Arial\" size:15.0], FXFormFieldHeader: @\"\", FXFormFieldType: FXFormFieldTypeLabel, FXFormFieldTitle: @\"Termini e privacy\", FXFormFieldSegue: @\"PrivacyPolicySegue\", },\n\nits ok but not view Disclosure Indicator ... why ?\n. Yes !\n. ",
    "KTachyon": "Oh, didn't see that one. That's what I was missing. Thanks :)\n. Oh, didn't see that one. That's what I was missing. Thanks :)\n. ",
    "Jamongkad": "I know this is closed. But can you please provide an example on how to do this programmatically? \n. Thanks Rounak I'll try that. \n. ```\nUITableView *table = [[UITableView alloc] init];\n[table setDelegate:self];\n[table setDataSource:self];\n[table registerClass:[UITableViewCell class] forCellReuseIdentifier:@\"MyCell\"];\n[self.view addSubview:table];\n\n\nFXFormViewController *controller = [[FXFormViewController alloc] init];\ncontroller.tableView = table;\ncontroller.formController.form = [[LocalBankForm alloc] init];\n```\n\nThis is my code. It is located in a UIViewController in the method viewDidLoad \nWhen I compile it I get this error **\\* Terminating app due to uncaught exception 'NSInvalidArgumentException', reason: '**\\* -[__NSPlaceholderDictionary initWithObjects:forKeys:count:]: attempt to insert nil object from objects[3]'\n\nThis is the code to my LocalBankForm model...\n\n```\n@implementation LocalBankForm\n\n@synthesize bank, accountType, accountName, accountNumber;\n\n-(id)init{\nif(self = [super init]) {\n    self.banks = @[\n        @\"ABC\",\n        @\"AUB\",\n        @\"BOA\",\n        @\"BDO\",\n        @\"BPI\",\n        @\"CBC\",\n        @\"CIT\",\n        @\"EWB\",\n        @\"EWR\",\n        @\"HSB\",\n        @\"LBP\",\n        @\"MAY\",\n        @\"MET\",\n        @\"PBC\",\n        @\"PNB\",\n        @\"RCBC\",\n        @\"SEC\",\n        @\"SCB\",\n        @\"UBP\",\n        @\"UCP\",\n    ];\n}\nreturn self;\n}\n\n-(NSArray *)fields {\nreturn @[\n          @{FXFormFieldKey: @\"bank\",\n            FXFormFieldOptions: self.banks,\n            FXFormFieldValueTransformer: [[BankTransformer alloc] init],\n            FXFormFieldDefaultValue: self.bank,\n          },\n          @{FXFormFieldKey: @\"accountType\",\n            FXFormFieldOptions: @[@\"Current\", @\"Savings\"],\n            FXFormFieldDefaultValue: @\"Current\",\n          },\n          @{FXFormFieldKey: @\"accountName\", FXFormFieldTitle: @\"Account Name\"},\n          @{FXFormFieldKey: @\"accountNumber\", FXFormFieldTitle: @\"Account Number\"},\n        ];\n}\n@end\n```\n. ```\nUITableView *table = [[UITableView alloc] init];\n//[table setDelegate:self];\n//[table setDataSource:self];\n//[table registerClass:[UITableViewCell class] forCellReuseIdentifier:@\"MyCell\"];\n[self.view addSubview:table];\n\nFXFormViewController *controller = [[FXFormViewController alloc] init];\ncontroller.tableView = table;\ncontroller.formController.form = [[LocalBankForm alloc] init];\n```\n\nI commented out the following code and I still get the same error....\n. Anyone?\n. It's cool I found a solution already. \n. @getaaron \n\n``` objective-c\n/* I removed the typedef\ntypedef NS_ENUM(NSInteger, Payment) {\n    PaymentLocalBank = 0,\n    PaymentPickup,\n    PaymentLocalAddress,\n};\n*/\n@interface RemitForm : NSObject <FXForm>\n\n@property (nonatomic, assign) NSString *currency;\n@property (nonatomic, assign) NSString *paymentMethod;\n@property (nonatomic, assign) NSString *province;\n@property (nonatomic, strong) NSArray *location;\n@property (nonatomic, assign) float amount;\n\n@end\n```\n\nI just removed the typedef and changed the property to an NSString.\n. I know this is closed. But can you please provide an example on how to do this programmatically? \n. Thanks Rounak I'll try that. \n. ```\nUITableView *table = [[UITableView alloc] init];\n[table setDelegate:self];\n[table setDataSource:self];\n[table registerClass:[UITableViewCell class] forCellReuseIdentifier:@\"MyCell\"];\n[self.view addSubview:table];\n\n\nFXFormViewController *controller = [[FXFormViewController alloc] init];\ncontroller.tableView = table;\ncontroller.formController.form = [[LocalBankForm alloc] init];\n```\n\nThis is my code. It is located in a UIViewController in the method viewDidLoad \nWhen I compile it I get this error **\\* Terminating app due to uncaught exception 'NSInvalidArgumentException', reason: '**\\* -[__NSPlaceholderDictionary initWithObjects:forKeys:count:]: attempt to insert nil object from objects[3]'\n\nThis is the code to my LocalBankForm model...\n\n```\n@implementation LocalBankForm\n\n@synthesize bank, accountType, accountName, accountNumber;\n\n-(id)init{\nif(self = [super init]) {\n    self.banks = @[\n        @\"ABC\",\n        @\"AUB\",\n        @\"BOA\",\n        @\"BDO\",\n        @\"BPI\",\n        @\"CBC\",\n        @\"CIT\",\n        @\"EWB\",\n        @\"EWR\",\n        @\"HSB\",\n        @\"LBP\",\n        @\"MAY\",\n        @\"MET\",\n        @\"PBC\",\n        @\"PNB\",\n        @\"RCBC\",\n        @\"SEC\",\n        @\"SCB\",\n        @\"UBP\",\n        @\"UCP\",\n    ];\n}\nreturn self;\n}\n\n-(NSArray *)fields {\nreturn @[\n          @{FXFormFieldKey: @\"bank\",\n            FXFormFieldOptions: self.banks,\n            FXFormFieldValueTransformer: [[BankTransformer alloc] init],\n            FXFormFieldDefaultValue: self.bank,\n          },\n          @{FXFormFieldKey: @\"accountType\",\n            FXFormFieldOptions: @[@\"Current\", @\"Savings\"],\n            FXFormFieldDefaultValue: @\"Current\",\n          },\n          @{FXFormFieldKey: @\"accountName\", FXFormFieldTitle: @\"Account Name\"},\n          @{FXFormFieldKey: @\"accountNumber\", FXFormFieldTitle: @\"Account Number\"},\n        ];\n}\n@end\n```\n. ```\nUITableView *table = [[UITableView alloc] init];\n//[table setDelegate:self];\n//[table setDataSource:self];\n//[table registerClass:[UITableViewCell class] forCellReuseIdentifier:@\"MyCell\"];\n[self.view addSubview:table];\n\nFXFormViewController *controller = [[FXFormViewController alloc] init];\ncontroller.tableView = table;\ncontroller.formController.form = [[LocalBankForm alloc] init];\n```\n\nI commented out the following code and I still get the same error....\n. Anyone?\n. It's cool I found a solution already. \n. @getaaron \n\n``` objective-c\n/* I removed the typedef\ntypedef NS_ENUM(NSInteger, Payment) {\n    PaymentLocalBank = 0,\n    PaymentPickup,\n    PaymentLocalAddress,\n};\n*/\n@interface RemitForm : NSObject <FXForm>\n\n@property (nonatomic, assign) NSString *currency;\n@property (nonatomic, assign) NSString *paymentMethod;\n@property (nonatomic, assign) NSString *province;\n@property (nonatomic, strong) NSArray *location;\n@property (nonatomic, assign) float amount;\n\n@end\n```\n\nI just removed the typedef and changed the property to an NSString.\n. ",
    "rounak": "Create your own tableView, add it as a subview, and assign it to `formController.tableView`\n. Don't think you need to set the dataSource\n. Thanks\n. Hi Nick. As a follow up to this, `FXFormFieldAction` gets called on `textFieldDidEndEditing:` which captures a lot more events than just the return key press. Any way to fire a method _only_ for the return key press?\n. Create your own tableView, add it as a subview, and assign it to `formController.tableView`\n. Don't think you need to set the dataSource\n. Thanks\n. Hi Nick. As a follow up to this, `FXFormFieldAction` gets called on `textFieldDidEndEditing:` which captures a lot more events than just the return key press. Any way to fire a method _only_ for the return key press?\n. ",
    "ibz": "I think the issue is only on the iPhone 6 and 6+ simulator, which is what I was testing on. Seems to work fine on iPhone 5S and downwards.\n. Actually that's not it ... It seems to work on any OS, but only for the first time after a simulator reset. The reason it worked on 5S was because the simulator was fresh. So I suspect something is wrong in my project, which is pretty big and I can't share. I'll keep digging.\n. Found the problem - the simulator's \"hardware keyboard\" is what breaks the date picker. Cmd-Shift-K fixes it. I'll close the issue, but hopefully reading this will save others hours.\n. I think the issue is only on the iPhone 6 and 6+ simulator, which is what I was testing on. Seems to work fine on iPhone 5S and downwards.\n. Actually that's not it ... It seems to work on any OS, but only for the first time after a simulator reset. The reason it worked on 5S was because the simulator was fresh. So I suspect something is wrong in my project, which is pretty big and I can't share. I'll keep digging.\n. Found the problem - the simulator's \"hardware keyboard\" is what breaks the date picker. Cmd-Shift-K fixes it. I'll close the issue, but hopefully reading this will save others hours.\n. ",
    "geoffhufford": "Thank you, the reassign is exactly the concept I was missing. \n. Thank you, the reassign is exactly the concept I was missing. \n. ",
    "timothyha": "I think I will learn more from the link below, and my request is not really related to FXForms, so I will close the issue.  Thanks.\nhttp://stackoverflow.com/questions/8809833/xcode-4-2-ios-5-multiple-segues-from-a-uitableview\n. I think I will learn more from the link below, and my request is not really related to FXForms, so I will close the issue.  Thanks.\nhttp://stackoverflow.com/questions/8809833/xcode-4-2-ios-5-multiple-segues-from-a-uitableview\n. ",
    "WestonHanners": "I would like something like this as well, I have been able to accomplish this goal by just exposing the FXFormField initializer.\n\nI wanted to create a Cell that contained two fields state and zipcode, so what I did was create a custom class to represent the data for the field. then when the user taps on the state label I do this\n\n```\n- (void)didSelectWithTableView:(UITableView *)tableView controller:(UIViewController *)controller {\n    FXFormViewController *subForm = [[FXFormViewController alloc] init];\n\n    NSDictionary *attributes = @{FXFormFieldKey: @\"stateCode\",\n                                 FXFormFieldOptions: @[                    @\"AL\",\n                                                                                     [Truncated]\n                                                                                             @\"WY\"],\n                                 FXFormFieldValueTransformer: @\"USStateValueTransformer\"\n                                 };\n\n    FXFormField *field = [[FXFormField alloc] initWithForm:self.field.value controller:subForm.formController attributes:attributes];\n\n\n    [subForm setField:field];\n\n    [controller.navigationController pushViewController:subForm animated:YES];\n    [tableView deselectRowAtIndexPath:tableView.indexPathForSelectedRow animated:NO];\n}\n```\n\nI also overrode -setField like so\n\n```\n- (void)setField:(FXFormField *)field {\n    [super setField:field];\n\n    if (!field.value) {\n        field.value = [PPStateZip new];\n    }\n}\n```\n\nthat way it uses my new value container.\n. there is a dynamic form example and I am using it to specify all of my form options via JSON. you might want to take a look at that.\n. it's going to be stuck in a cocoa pod anyway +1\n. ![screen shot 2014-11-14 at 4 05 07 pm](https://cloud.githubusercontent.com/assets/864259/5053391/d09f2c7c-6c17-11e4-9058-5d99c6dcb517.png)\n\nYep.\n. Actually, it looks like Xcode 6 will warn you if you access an IBOutlet directly.\n\n![screen shot 2014-11-15 at 10 18 44 am](https://cloud.githubusercontent.com/assets/864259/5058131/9a67a514-6cb0-11e4-9433-03c882021543.png)\n. I am wondering if perhaps this is an Xcode 6 bug? if I put the #pragma's in, I still get the warning.\n\nI cleared my derived data and build folder.\n\n![screen shot 2014-11-15 at 10 21 27 am](https://cloud.githubusercontent.com/assets/864259/5058134/f8042e9a-6cb0-11e4-9777-da1470e7b9a6.png)\n. Thats right, it should be\n\n-Wdeprecated-implementations\n\nas for the other warning.\n\nI generally follow what Xcode does by default. I was under the impression that outlets should always be weak and I haven't seen anything other than this warning to make me think otherwise. \n\nI would be interested in continuing this discussion, but this issue doesn't seem the place for it. Shall we move this to some other medium?\n. where would I be doing the mapping?\n. should I be setting valueClass or just class on the field to be my custom class? valueClass causes a crash in  -isCollectionType.\n. I am attempting to do this is with the dynamic forms, does that make a difference?\n. Crash is \"unrecognized selector sent to instance NSCFString\"\nself.valueClass is a string that says my class name, but [self.valueClass class] is NSCFString.\n\n![screen shot 2014-11-20 at 7 41 15 pm](https://cloud.githubusercontent.com/assets/864259/5135918/fef5f2b6-70ec-11e4-8191-f7b069121b86.png)\n. yes, I tried using class, but field.value is still an NSCFString, however it doesn't crash at -isCollectionType anymore.\n. is this what you want? this is the field in question.\n{\n    cell = PPCombinedStateZipCell;\n    class = PPStateZip;\n    key = \"state/zip\";\n    options =     (\n        AL,\n        AK,\n        AZ,\n        AR,\n        CA,\n        CO,\n        CT,\n        DE,\n        DC,\n        FL,\n        GA,\n        HI,\n        ID,\n        IL,\n        IN,\n        IA,\n        KS,\n        KY,\n        LA,\n        ME,\n        MD,\n        MA,\n        MI,\n        MN,\n        MS,\n        MO,\n        MT,\n        NE,\n        NV,\n        NH,\n        NJ,\n        NM,\n        NY,\n        NC,\n        ND,\n        OH,\n        OK,\n        OR,\n        PA,\n        RI,\n        SC,\n        SD,\n        TN,\n        TX,\n        UT,\n        VT,\n        VA,\n        WA,\n        WV,\n        WI,\n        WY\n    );\n    regexPattern = \"^(?=\\s_\\S)._$\";\n    title = \"State:\";\n    type = option;\n    valueTransformer = USStateValueTransformer;\n},\n. Could it be that DynamicForm needs to be creating an instance when it sees the key \"class\" instead of trying to set valueForKey?\n. It's a client project, so I can't really do that. I will try some things and let you know how it turns out.\n. If you were going to set a custom value object in a cell, where would be the best place to do so? setUp?\n. ok, parsing more code. please correct me if I'm wrong, but shouldn't [FXFormField setValue] be alloc-ing custom classes if there is a custom class specified?\n. Is there anything special I need to do in my JSON to let FXForms know that state field will be a subform?\n\nI got it, now I just need it to render in a single cell\n\n(by the way, I will probably make an example app for this when I am done if you want to add it to the repo.)\n. one more question methinks. how would I access the subform from the cell.field object?\n. I got it working! thanks for the help.\n. I would like something like this as well, I have been able to accomplish this goal by just exposing the FXFormField initializer.\n\nI wanted to create a Cell that contained two fields state and zipcode, so what I did was create a custom class to represent the data for the field. then when the user taps on the state label I do this\n\n```\n- (void)didSelectWithTableView:(UITableView *)tableView controller:(UIViewController *)controller {\n    FXFormViewController *subForm = [[FXFormViewController alloc] init];\n\n    NSDictionary *attributes = @{FXFormFieldKey: @\"stateCode\",\n                                 FXFormFieldOptions: @[                    @\"AL\",\n                                                                                     [Truncated]\n                                                                                             @\"WY\"],\n                                 FXFormFieldValueTransformer: @\"USStateValueTransformer\"\n                                 };\n\n    FXFormField *field = [[FXFormField alloc] initWithForm:self.field.value controller:subForm.formController attributes:attributes];\n\n\n    [subForm setField:field];\n\n    [controller.navigationController pushViewController:subForm animated:YES];\n    [tableView deselectRowAtIndexPath:tableView.indexPathForSelectedRow animated:NO];\n}\n```\n\nI also overrode -setField like so\n\n```\n- (void)setField:(FXFormField *)field {\n    [super setField:field];\n\n    if (!field.value) {\n        field.value = [PPStateZip new];\n    }\n}\n```\n\nthat way it uses my new value container.\n. there is a dynamic form example and I am using it to specify all of my form options via JSON. you might want to take a look at that.\n. it's going to be stuck in a cocoa pod anyway +1\n. ![screen shot 2014-11-14 at 4 05 07 pm](https://cloud.githubusercontent.com/assets/864259/5053391/d09f2c7c-6c17-11e4-9058-5d99c6dcb517.png)\n\nYep.\n. Actually, it looks like Xcode 6 will warn you if you access an IBOutlet directly.\n\n![screen shot 2014-11-15 at 10 18 44 am](https://cloud.githubusercontent.com/assets/864259/5058131/9a67a514-6cb0-11e4-9433-03c882021543.png)\n. I am wondering if perhaps this is an Xcode 6 bug? if I put the #pragma's in, I still get the warning.\n\nI cleared my derived data and build folder.\n\n![screen shot 2014-11-15 at 10 21 27 am](https://cloud.githubusercontent.com/assets/864259/5058134/f8042e9a-6cb0-11e4-9777-da1470e7b9a6.png)\n. Thats right, it should be\n\n-Wdeprecated-implementations\n\nas for the other warning.\n\nI generally follow what Xcode does by default. I was under the impression that outlets should always be weak and I haven't seen anything other than this warning to make me think otherwise. \n\nI would be interested in continuing this discussion, but this issue doesn't seem the place for it. Shall we move this to some other medium?\n. where would I be doing the mapping?\n. should I be setting valueClass or just class on the field to be my custom class? valueClass causes a crash in  -isCollectionType.\n. I am attempting to do this is with the dynamic forms, does that make a difference?\n. Crash is \"unrecognized selector sent to instance NSCFString\"\nself.valueClass is a string that says my class name, but [self.valueClass class] is NSCFString.\n\n![screen shot 2014-11-20 at 7 41 15 pm](https://cloud.githubusercontent.com/assets/864259/5135918/fef5f2b6-70ec-11e4-8191-f7b069121b86.png)\n. yes, I tried using class, but field.value is still an NSCFString, however it doesn't crash at -isCollectionType anymore.\n. is this what you want? this is the field in question.\n{\n    cell = PPCombinedStateZipCell;\n    class = PPStateZip;\n    key = \"state/zip\";\n    options =     (\n        AL,\n        AK,\n        AZ,\n        AR,\n        CA,\n        CO,\n        CT,\n        DE,\n        DC,\n        FL,\n        GA,\n        HI,\n        ID,\n        IL,\n        IN,\n        IA,\n        KS,\n        KY,\n        LA,\n        ME,\n        MD,\n        MA,\n        MI,\n        MN,\n        MS,\n        MO,\n        MT,\n        NE,\n        NV,\n        NH,\n        NJ,\n        NM,\n        NY,\n        NC,\n        ND,\n        OH,\n        OK,\n        OR,\n        PA,\n        RI,\n        SC,\n        SD,\n        TN,\n        TX,\n        UT,\n        VT,\n        VA,\n        WA,\n        WV,\n        WI,\n        WY\n    );\n    regexPattern = \"^(?=\\s_\\S)._$\";\n    title = \"State:\";\n    type = option;\n    valueTransformer = USStateValueTransformer;\n},\n. Could it be that DynamicForm needs to be creating an instance when it sees the key \"class\" instead of trying to set valueForKey?\n. It's a client project, so I can't really do that. I will try some things and let you know how it turns out.\n. If you were going to set a custom value object in a cell, where would be the best place to do so? setUp?\n. ok, parsing more code. please correct me if I'm wrong, but shouldn't [FXFormField setValue] be alloc-ing custom classes if there is a custom class specified?\n. Is there anything special I need to do in my JSON to let FXForms know that state field will be a subform?\n\nI got it, now I just need it to render in a single cell\n\n(by the way, I will probably make an example app for this when I am done if you want to add it to the repo.)\n. one more question methinks. how would I access the subform from the cell.field object?\n. I got it working! thanks for the help.\n. ",
    "aryaxt": "Having the same issue, not showing on iOS7. Calling reloadData fixes the issue\n. I was registering a custom cell for FXFormFieldOption and the custom cell was inheriting form FXFormBaseCell instead of FXFormDefaultCell. Switching to FXFormDefaultCell fixed the issue\n. Hey guys. What version did this go into? I'm not seeing this behavior in 1.2.12\n. Hmmm looks like it was merged to master, but not released. \n@nicklockwood any reason why those changes weren't included? any plan on releasing a new version with those changes anytime soon?\n\nThanks\n. @ohwutup  thanks, yep but I wanna know if there was a reason why it was not included in a version that was released after the PR was merged. Just being cautious :)\n. My bad, I looked at the wrong commit. I updated to 1.2.13 and everything works great thanks\n. Here is my pod file\n\n```\nplatform :ios, '7.0'\ninhibit_all_warnings!\n\npod 'AWSiOSSDKv2' , '2.3.0'\npod 'CocoaLumberjack', '1.9.1'\npod 'DateTools', '1.4.3'\npod 'FXForms', '1.2.13'\npod 'Facebook-iOS-SDK', '4.0'\npod 'GoogleAnalytics-iOS-SDK' , '3.10'\npod 'JVFloatLabeledTextField',' 0.0.9'\npod 'MBProgressHUD', '0.9'\npod 'NSDate-Extensions', '0.0.1'\npod 'OCThumbor', '0.3.1'\npod 'PREBorderView', '2.0'\npod 'RCLocationManager', :git => 'https://github.com/rcabamo/RCLocationManager.git', :commit => 'd505b7451e'\npod 'SlackTextViewController', '1.7'\npod 'Toast', '2.4'\npod 'UAObfuscatedString', '0.2'\npod 'UIActionSheet+Blocks', '0.8.1'\npod 'UIAlertView+Blocks', '0.8.1'\npod 'OCMapper', '2.0'\npod 'CSStickyHeaderFlowLayout', '0.2.7'\npod 'Amplitude-iOS', '3.2.1'\npod 'AFNetworking', '2.5.4'\npod 'RSDayFlow', :git => 'https://github.com/aryaxt/RSDayFlow.git'\npod 'MCSwipeTableViewCell', '2.1.3'\npod 'SWTableViewCell', '0.3.7'\n```\n. Having the same issue, not showing on iOS7. Calling reloadData fixes the issue\n. I was registering a custom cell for FXFormFieldOption and the custom cell was inheriting form FXFormBaseCell instead of FXFormDefaultCell. Switching to FXFormDefaultCell fixed the issue\n. Hey guys. What version did this go into? I'm not seeing this behavior in 1.2.12\n. Hmmm looks like it was merged to master, but not released. \n@nicklockwood any reason why those changes weren't included? any plan on releasing a new version with those changes anytime soon?\n\nThanks\n. @ohwutup  thanks, yep but I wanna know if there was a reason why it was not included in a version that was released after the PR was merged. Just being cautious :)\n. My bad, I looked at the wrong commit. I updated to 1.2.13 and everything works great thanks\n. Here is my pod file\n\n```\nplatform :ios, '7.0'\ninhibit_all_warnings!\n\npod 'AWSiOSSDKv2' , '2.3.0'\npod 'CocoaLumberjack', '1.9.1'\npod 'DateTools', '1.4.3'\npod 'FXForms', '1.2.13'\npod 'Facebook-iOS-SDK', '4.0'\npod 'GoogleAnalytics-iOS-SDK' , '3.10'\npod 'JVFloatLabeledTextField',' 0.0.9'\npod 'MBProgressHUD', '0.9'\npod 'NSDate-Extensions', '0.0.1'\npod 'OCThumbor', '0.3.1'\npod 'PREBorderView', '2.0'\npod 'RCLocationManager', :git => 'https://github.com/rcabamo/RCLocationManager.git', :commit => 'd505b7451e'\npod 'SlackTextViewController', '1.7'\npod 'Toast', '2.4'\npod 'UAObfuscatedString', '0.2'\npod 'UIActionSheet+Blocks', '0.8.1'\npod 'UIAlertView+Blocks', '0.8.1'\npod 'OCMapper', '2.0'\npod 'CSStickyHeaderFlowLayout', '0.2.7'\npod 'Amplitude-iOS', '3.2.1'\npod 'AFNetworking', '2.5.4'\npod 'RSDayFlow', :git => 'https://github.com/aryaxt/RSDayFlow.git'\npod 'MCSwipeTableViewCell', '2.1.3'\npod 'SWTableViewCell', '0.3.7'\n```\n. ",
    "CaliosD": "But the `options` in `{\"key\": \"picker\", \"options\": [\"English\", \"Spanish\", \"French\", \"Dutch\"], \"placeholder\": \"None\", \"cell\": \"FXFormOptionPickerCell\"},` can only be a simple array... I wonder if there's no way to create a picker with multiple columns... Can anyone help?\n. @realcarlos Have you got the solution already, please? I've met the same problem.\n. But the `options` in `{\"key\": \"picker\", \"options\": [\"English\", \"Spanish\", \"French\", \"Dutch\"], \"placeholder\": \"None\", \"cell\": \"FXFormOptionPickerCell\"},` can only be a simple array... I wonder if there's no way to create a picker with multiple columns... Can anyone help?\n. @realcarlos Have you got the solution already, please? I've met the same problem.\n. ",
    "amontoya": "Thank you for your quick reply. That worked.\n. Thank you for your quick reply. That worked.\n. ",
    "Yourney": "Yeah!\nThat would make browsing the code MUCH easier ... and maintenance too ;-)\n. Yeah!\nThat would make browsing the code MUCH easier ... and maintenance too ;-)\n. ",
    "xergic": "I think there's no option to do that. You can do that with custom ViewController (in which you load the form) with method like this one:\n\n``` objc\n- (void)itemSelected {\n    [self.navigationController popToRootViewControllerAnimated:YES];\n}\n```\n\nThen you set this method as FXFormFieldAction in your field(s):\n\n``` objc\nFXFormFieldAction: @\"itemSelected\"\n```\n. I think there's no option to do that. You can do that with custom ViewController (in which you load the form) with method like this one:\n\n``` objc\n- (void)itemSelected {\n    [self.navigationController popToRootViewControllerAnimated:YES];\n}\n```\n\nThen you set this method as FXFormFieldAction in your field(s):\n\n``` objc\nFXFormFieldAction: @\"itemSelected\"\n```\n. ",
    "jakelisby": "Correction to @xergic answer, this only works if your form is the RootViewController, if it's not, you'll need to use something like this to only traverse one layer up: \n[self.navigationController popViewControllerAnimated:YES];\n. +1 trying to do the same thing.\n. Mine is a dictionary of keys and I'm trying to pass it to the form and set the fields default values to the values of keys. Essentially I'm selecting a row from a table that represents a person's profile, then loading the form for editing, and want to pre-populate the fields. \n. Awesome, thanks a ton for your help!\n. Correction to @xergic answer, this only works if your form is the RootViewController, if it's not, you'll need to use something like this to only traverse one layer up: \n[self.navigationController popViewControllerAnimated:YES];\n. +1 trying to do the same thing.\n. Mine is a dictionary of keys and I'm trying to pass it to the form and set the fields default values to the values of keys. Essentially I'm selecting a row from a table that represents a person's profile, then loading the form for editing, and want to pre-populate the fields. \n. Awesome, thanks a ton for your help!\n. ",
    "jorisroling": "nice!\n. nice!\n. ",
    "abbasmousavi": "+1 for FXFormFieldReadonly, Please accept this pull request.\n. The problem persists after #325 merge. @nicklockwood\n. +1, please review and merge this.\n. +1 for FXFormFieldReadonly, Please accept this pull request.\n. The problem persists after #325 merge. @nicklockwood\n. +1, please review and merge this.\n. ",
    "lawfrey": "Thanks!\n. Thanks!\n. ",
    "xbu": "thx\n. thx\n. ",
    "interator": "Yes, @GantMan, that's what I'm referring.\nThanks\n. Yes, @GantMan, that's what I'm referring.\nThanks\n. ",
    "notionally": "@Kronusdark I'm about to implement something similar here -- sure would be great to see how you did it. Any chance you could share that example you mentioned (or an example)?\n. @Kronusdark I'm about to implement something similar here -- sure would be great to see how you did it. Any chance you could share that example you mentioned (or an example)?\n. ",
    "jsleeuw": "oops.. meant to post that comment under this account..\n. Ok, thanks nick\n. oops.. meant to post that comment under this account..\n. Ok, thanks nick\n. ",
    "mbesnili": "@Kronusdark would you mind sharing your code showing that how you did it, i'm having hard time implementing something similar ? \n. @Kronusdark would you mind sharing your code showing that how you did it, i'm having hard time implementing something similar ? \n. ",
    "lazyneighbour": "@Kronusdark I'm struggling with exact same issue here, I would be thankfull if you could help me\n. @Kronusdark I'm struggling with exact same issue here, I would be thankfull if you could help me\n. ",
    "zenkimoto": "@basdvries \n\nIs your ViewController inherited from FXFormViewController?  I did just that last night with no issue.  It accessed the viewForHeaderInSection delegate method with no issue.\n. @basdvries \n\nIs your ViewController inherited from FXFormViewController?  I did just that last night with no issue.  It accessed the viewForHeaderInSection delegate method with no issue.\n. ",
    "dformoso": "Thanks for answering so quickly mate.\n\nI know how to use NSValueTransformer, but I have no clue how to integrate that into the field while still using cocoapods without modifying the code. I would imagine I would have to copy/paste the project instead of using cocoapods and edit it as I need correct? Let me know if there's an easier way that I'm not seeing... I'd like to keep using the cocoapods version and get the updates. :-)\n. Thanks Nick,\n\nIs there a chance that you could help me understand how it's configured. I get how it's supposed to work, but all the apps in the example crash when selecting \"country\" which is the only field using the Transformer, which makes it a little harder for me to test. I'll keep trying.\n\nWhen I try to use the transformer on fields like \"phone\", or \"integer\", the transformedValue function is not called, even after I add it to the Form in the FXFormFieldValueTransformer field. I assume because it doesn't go to a new menu like the country field does. Not sure.\n. Thanks again... and my apologies.. I think I'm not explaining the problem I'm experiencing well, I'll have another go.\n\nI'm trying to have the value change in real time from 100, to $100,00 as I type.\n\nI've done a very minimal number of changes to edit the swift example code, making the field \"phone\", look like this:\n[FXFormFieldKey: \"phone\", FXFormFieldValueTransformer: ISO3166CountryValueTransformer()],\n\nI've also edited the ISO3166CountryValueTransformer transformed Value function to look like this:\n    override func transformedValue(value: AnyObject?) -> AnyObject? {\n        if value != nil {\n            var numberFormatter = NSNumberFormatter()\n            numberFormatter.numberStyle = NSNumberFormatterStyle.CurrencyStyle\n            var number = numberFormatter.stringFromNumber((value!.description as NSString).integerValue)\n            return number!\n        }\n        return nil\n    }\n\nThe value doesn't change as I type, but it changes If I, for instance, go to the \"country\", \"gender\", \"language\", etc menus (the ones that move into another VC and return). After I go into any one of these menus, the \"phone\" field changes from 100, to $100.00\n\nHope this time I've done a better job. :-)\n\nMany thanks again for helping me with this.\n. Yeap, thanks Marcelo. I'm now wondering how to apply it and update as-you-type. I'm not sure whether it is possible with FXForms current implementation.\n. Custom cell! That's it. I'll give it a go. Thanks! \n. Thanks for answering so quickly mate.\n\nI know how to use NSValueTransformer, but I have no clue how to integrate that into the field while still using cocoapods without modifying the code. I would imagine I would have to copy/paste the project instead of using cocoapods and edit it as I need correct? Let me know if there's an easier way that I'm not seeing... I'd like to keep using the cocoapods version and get the updates. :-)\n. Thanks Nick,\n\nIs there a chance that you could help me understand how it's configured. I get how it's supposed to work, but all the apps in the example crash when selecting \"country\" which is the only field using the Transformer, which makes it a little harder for me to test. I'll keep trying.\n\nWhen I try to use the transformer on fields like \"phone\", or \"integer\", the transformedValue function is not called, even after I add it to the Form in the FXFormFieldValueTransformer field. I assume because it doesn't go to a new menu like the country field does. Not sure.\n. Thanks again... and my apologies.. I think I'm not explaining the problem I'm experiencing well, I'll have another go.\n\nI'm trying to have the value change in real time from 100, to $100,00 as I type.\n\nI've done a very minimal number of changes to edit the swift example code, making the field \"phone\", look like this:\n[FXFormFieldKey: \"phone\", FXFormFieldValueTransformer: ISO3166CountryValueTransformer()],\n\nI've also edited the ISO3166CountryValueTransformer transformed Value function to look like this:\n    override func transformedValue(value: AnyObject?) -> AnyObject? {\n        if value != nil {\n            var numberFormatter = NSNumberFormatter()\n            numberFormatter.numberStyle = NSNumberFormatterStyle.CurrencyStyle\n            var number = numberFormatter.stringFromNumber((value!.description as NSString).integerValue)\n            return number!\n        }\n        return nil\n    }\n\nThe value doesn't change as I type, but it changes If I, for instance, go to the \"country\", \"gender\", \"language\", etc menus (the ones that move into another VC and return). After I go into any one of these menus, the \"phone\" field changes from 100, to $100.00\n\nHope this time I've done a better job. :-)\n\nMany thanks again for helping me with this.\n. Yeap, thanks Marcelo. I'm now wondering how to apply it and update as-you-type. I'm not sure whether it is possible with FXForms current implementation.\n. Custom cell! That's it. I'll give it a go. Thanks! \n. ",
    "marcelofabri": "Note that iOS **does** have a way to format currency: `NSNumberFormatter` with `NSNumberFormatterCurrencyStyle`.\n. Just for clarification, `NSNumberFormatter` with `NSNumberFormatterCurrencyStyle` adds the currency symbol and you can even customize it by setting [`currencySymbol`](https://developer.apple.com/library/mac/Documentation/Cocoa/Reference/Foundation/Classes/NSNumberFormatter_Class/index.html#//apple_ref/occ/instp/NSNumberFormatter/currencySymbol).\n. Note that iOS **does** have a way to format currency: `NSNumberFormatter` with `NSNumberFormatterCurrencyStyle`.\n. Just for clarification, `NSNumberFormatter` with `NSNumberFormatterCurrencyStyle` adds the currency symbol and you can even customize it by setting [`currencySymbol`](https://developer.apple.com/library/mac/Documentation/Cocoa/Reference/Foundation/Classes/NSNumberFormatter_Class/index.html#//apple_ref/occ/instp/NSNumberFormatter/currencySymbol).\n. ",
    "realenginerd": "This looks like a duplicate of #262.\n. Weird -- doing that makes the field disappear entirely. I've tried both setting a default value for the field (`var gender: Gender = Gender.undetermined`), as well as leaving it an optional(`var gender: Gender?`), to no avail.\n\nI could convert this field into a regular int for now, but I would prefer a native Swift way of working with this. Alternatively, I could convert this file to ObjC, using `NS_ENUM` instead of Swift enums. What is your recommendation?\n. Great news! I got it to work by moving the enum out of Swift and into Objective-C. I created a new .h file that contains the `NS_ENUM`:\n\n```\ntypedef NS_ENUM(NSUInteger, Gender)\n{\n    Gendermale,\n    Genderfemale,\n    Genderundetermined\n}\n```\n\nI added this header file to the bridging header so that my Swift form could access it. Happily, the field is no longer unselectable. \n\nThis solves my issue for now. \n. Further observation: seems as though Placeholder and Default Value doesn't work well together; I can only get one or the other. I can select the Placeholder with no problems **if** there is no Default Value specified. However, if I cannot specify a Default Value, the form does not get populated correctly. \n\nOn the other hand, if a Default Value **is** specified, the opposite problem occurs: the form shows up correctly -- default value is selected -- but I cannot select the Placeholder. \n\nAm I holding this wrong? Is there a way to make this work? Please advise. Thanks in advance!\n. This looks like a duplicate of #262.\n. Weird -- doing that makes the field disappear entirely. I've tried both setting a default value for the field (`var gender: Gender = Gender.undetermined`), as well as leaving it an optional(`var gender: Gender?`), to no avail.\n\nI could convert this field into a regular int for now, but I would prefer a native Swift way of working with this. Alternatively, I could convert this file to ObjC, using `NS_ENUM` instead of Swift enums. What is your recommendation?\n. Great news! I got it to work by moving the enum out of Swift and into Objective-C. I created a new .h file that contains the `NS_ENUM`:\n\n```\ntypedef NS_ENUM(NSUInteger, Gender)\n{\n    Gendermale,\n    Genderfemale,\n    Genderundetermined\n}\n```\n\nI added this header file to the bridging header so that my Swift form could access it. Happily, the field is no longer unselectable. \n\nThis solves my issue for now. \n. Further observation: seems as though Placeholder and Default Value doesn't work well together; I can only get one or the other. I can select the Placeholder with no problems **if** there is no Default Value specified. However, if I cannot specify a Default Value, the form does not get populated correctly. \n\nOn the other hand, if a Default Value **is** specified, the opposite problem occurs: the form shows up correctly -- default value is selected -- but I cannot select the Placeholder. \n\nAm I holding this wrong? Is there a way to make this work? Please advise. Thanks in advance!\n. ",
    "tsif": "I've run into this issue also, did you manage to resolve it eventually?\n. I've run into this issue also, did you manage to resolve it eventually?\n. ",
    "adamwaite": "Yeah, I'm seeing this too. Looking into it now.\n. I've figured it out:\n\nThe implementation of `UIImagePickerControllerDelegate`'s `imagePickerController: didFinishPickingMediaWithInfo:` looks like this:\n\n```\n- (void)imagePickerController:(UIImagePickerController *)picker didFinishPickingMediaWithInfo:(NSDictionary *)info\n{\n    self.field.value = info[UIImagePickerControllerEditedImage] ?: info[UIImagePickerControllerOriginalImage];\n    [picker dismissViewControllerAnimated:YES completion:NULL];\n    if (self.field.action) self.field.action(self);\n    [self update];\n}\n```\n\nYou'll see the picker is dismissed with `[picker dismissViewControllerAnimated:YES completion:NULL];` once an image is picked. On iOS7 this will immediately trigger a call to `viewWillAppear` and related on the presenting controller before moving on, whereas on iOS8 it's delayed until after the method has finished it's execution. The problem lies when you have `reloadData` (or similar) in `viewWillAppear` (or similar). With `reloadData` the form is refreshed meaning that existing references to `field` in the remainder of the method (i.e `if (self.field.action) self.field.action(self);`) are no longer there, causing a crash (message sent to deallocated instance).\n\nSo to fix - don't reload the table data when the view appears.\n. Yeah, I'm seeing this too. Looking into it now.\n. I've figured it out:\n\nThe implementation of `UIImagePickerControllerDelegate`'s `imagePickerController: didFinishPickingMediaWithInfo:` looks like this:\n\n```\n- (void)imagePickerController:(UIImagePickerController *)picker didFinishPickingMediaWithInfo:(NSDictionary *)info\n{\n    self.field.value = info[UIImagePickerControllerEditedImage] ?: info[UIImagePickerControllerOriginalImage];\n    [picker dismissViewControllerAnimated:YES completion:NULL];\n    if (self.field.action) self.field.action(self);\n    [self update];\n}\n```\n\nYou'll see the picker is dismissed with `[picker dismissViewControllerAnimated:YES completion:NULL];` once an image is picked. On iOS7 this will immediately trigger a call to `viewWillAppear` and related on the presenting controller before moving on, whereas on iOS8 it's delayed until after the method has finished it's execution. The problem lies when you have `reloadData` (or similar) in `viewWillAppear` (or similar). With `reloadData` the form is refreshed meaning that existing references to `field` in the remainder of the method (i.e `if (self.field.action) self.field.action(self);`) are no longer there, causing a crash (message sent to deallocated instance).\n\nSo to fix - don't reload the table data when the view appears.\n. ",
    "kegan": "+1 I am having the same issue.\n. +1 I am having the same issue.\n. ",
    "huan-nba": "yes I am, Xcode version 6.1.1 :)\n. In my case it happened with FormFieldTypeOption only.\n. yes I am, Xcode version 6.1.1 :)\n. In my case it happened with FormFieldTypeOption only.\n. ",
    "davemess": "Bumping this issue.\n. Bumping this issue.\n. ",
    "aarsla": "Bump\n. Bump\n. ",
    "billguy": "I achieved this by implementing a custom view controller with FXFormFieldViewController that used UISearchController.  I also had to do:\n\n```\n- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath{\n    [tableView deselectRowAtIndexPath:indexPath animated:NO];\n    if (self.searchController.isActive) {\n        Customer *selectedCustomer = [self.resultsFilteredTableController.filteredResults objectAtIndex: indexPath.row];\n        indexPath = [NSIndexPath indexPathForRow:[[Customer list] indexOfObject:selectedCustomer] inSection:0];\n    }\n    UITableViewCell<FXFormFieldCell> *cell = (UITableViewCell<FXFormFieldCell> *)[self.formController.tableView cellForRowAtIndexPath:indexPath];\n    if ([cell respondsToSelector:@selector(didSelectWithTableView:controller:)]) {\n        [cell didSelectWithTableView:tableView controller:self];\n    }\n}\n```\n\n to get the selected row from the filtered results.\n. I achieved this by implementing a custom view controller with FXFormFieldViewController that used UISearchController.  I also had to do:\n\n```\n- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath{\n    [tableView deselectRowAtIndexPath:indexPath animated:NO];\n    if (self.searchController.isActive) {\n        Customer *selectedCustomer = [self.resultsFilteredTableController.filteredResults objectAtIndex: indexPath.row];\n        indexPath = [NSIndexPath indexPathForRow:[[Customer list] indexOfObject:selectedCustomer] inSection:0];\n    }\n    UITableViewCell<FXFormFieldCell> *cell = (UITableViewCell<FXFormFieldCell> *)[self.formController.tableView cellForRowAtIndexPath:indexPath];\n    if ([cell respondsToSelector:@selector(didSelectWithTableView:controller:)]) {\n        [cell didSelectWithTableView:tableView controller:self];\n    }\n}\n```\n\n to get the selected row from the filtered results.\n. ",
    "kevinrenskers": "Never mind, it was a problem with my backing variable which wasn't updated. So it was always calculated with the initial value.\n. Haven't really looked into this myself, @nicklockwood any chance you could take a look please?\n. Looks like it. Here's hoping for a new release soon :)\n. Never mind, it was a problem with my backing variable which wasn't updated. So it was always calculated with the initial value.\n. Haven't really looked into this myself, @nicklockwood any chance you could take a look please?\n. Looks like it. Here's hoping for a new release soon :)\n. ",
    "powerqian": "Same issue here. Any possible fix or work around?\n. I think this may be fixed by #325, which is merged to master 22 days ago.\n. Same issue here. Any possible fix or work around?\n. I think this may be fixed by #325, which is merged to master 22 days ago.\n. ",
    "billykan": "The fix works perfect. Many thanks!\n. The fix works perfect. Many thanks!\n. ",
    "wrousseau": "+1, would love this. Do you have a fork with such a feature ?\n. Seems to work well, thanks ! This should be the default behavior I believe\n. +1, would love this. Do you have a fork with such a feature ?\n. Seems to work well, thanks ! This should be the default behavior I believe\n. ",
    "WenchaoD": "Hi @wrousseau \nI made a fork for this as a temporary solution:\nhttps://github.com/f33chobits/FXForms/tree/exit-on-single-selection-branch\n\nThe detail is :\n![image](https://cloud.githubusercontent.com/assets/5186464/5991214/7171465e-aa1a-11e4-976c-6341b8f7bfbe.png)\n\nIt's been tested in the sample project. But I don't know if it is strict enough to submit a PR, what do you think? @nicklockwood \n. Hey, @s \nI wrote some code for this effect myself in FXForms.m, but haven't published it yet. You want me to add a fork for this?\n. Of course. I'll clean up the code and send you a PR for this~\n. #307 \n. @adamcian  +1 \nBut @\"self.contentView.backgroundColor\" might be more reasonable\n. True that. 'self' is not necessary\n. Hi @wrousseau \nI made a fork for this as a temporary solution:\nhttps://github.com/f33chobits/FXForms/tree/exit-on-single-selection-branch\n\nThe detail is :\n![image](https://cloud.githubusercontent.com/assets/5186464/5991214/7171465e-aa1a-11e4-976c-6341b8f7bfbe.png)\n\nIt's been tested in the sample project. But I don't know if it is strict enough to submit a PR, what do you think? @nicklockwood \n. Hey, @s \nI wrote some code for this effect myself in FXForms.m, but haven't published it yet. You want me to add a fork for this?\n. Of course. I'll clean up the code and send you a PR for this~\n. #307 \n. @adamcian  +1 \nBut @\"self.contentView.backgroundColor\" might be more reasonable\n. True that. 'self' is not necessary\n. ",
    "gilthonweapps": "+1 Works well.\n\nWould be nice to have an updated version of the lib :)\n. I really like your lib as it completely fulfills my needs. I see you have done a really great job here.\nI hope you will come with a solution to recycle cells :-)\n. Hi again,\n\nMaybe you should have a look at this lib: https://github.com/xmartlabs/XLForm\nIt seems they managed to handle the recycling of the cells quite well.\n. +1 Works well.\n\nWould be nice to have an updated version of the lib :)\n. I really like your lib as it completely fulfills my needs. I see you have done a really great job here.\nI hope you will come with a solution to recycle cells :-)\n. Hi again,\n\nMaybe you should have a look at this lib: https://github.com/xmartlabs/XLForm\nIt seems they managed to handle the recycling of the cells quite well.\n. ",
    "s": "Hey!\nI've added same code but it didn't work for me. How did you make this inline date picker component work other than two field methods? Is there anything you've written yourself?\n. Hey!\nThanks for reply! I see, thank you very much but I decided to use Apple's DateCell implementation on official documentations. Thank you in advance!\n\n10 \u015eub 2015 tarihinde 05:09 saatinde, Wenchao Ding notifications@github.com \u015funlar\u0131 yazd\u0131:\n\n> Hey, @s \n> I wrote some code for this effect myself in FXForms.m, but haven't published it yet. You want me to add a fork for this?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n. Hey!\nI've added same code but it didn't work for me. How did you make this inline date picker component work other than two field methods? Is there anything you've written yourself?\n. Hey!\nThanks for reply! I see, thank you very much but I decided to use Apple's DateCell implementation on official documentations. Thank you in advance!\n\n10 \u015eub 2015 tarihinde 05:09 saatinde, Wenchao Ding notifications@github.com \u015funlar\u0131 yazd\u0131:\n\n> Hey, @s \n> I wrote some code for this effect myself in FXForms.m, but haven't published it yet. You want me to add a fork for this?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n. ",
    "AlexanderZubkov": "I think @\"textLabel.textColor\" is the right way to set color.\n. Can you share your custom delegate function? \n. I think @\"textLabel.textColor\" is the right way to set color.\n. Can you share your custom delegate function? \n. ",
    "getaaron": "@jamongkad What was your solution?\n. @jamongkad What was your solution?\n. ",
    "SebastianThiebaud": "Would be nice to review that PR. We are still using our fork because the official one isn't supporting that. \n. Would be nice to review that PR. We are still using our fork because the official one isn't supporting that. \n. ",
    "arnaudWasappli": "And one more thing I try to manage is:\nIf he press on \"add item cell\" he has to select a category before being able to tap again on \"add item cell\"\n![avoid](https://cloud.githubusercontent.com/assets/7737273/6189303/e345cf9c-b399-11e4-957d-be773706d236.png)\n. For those who search the same answer for my first question:\n- add FXFormFieldAction: @\"updateFields\"\n\n``` objC\n- (NSDictionary *)categoriesField {\n    NSMutableArray *arrayCat = [@[@\"Football\", @\"Tennis\", @\"Golf\", @\"BasketBall\", @\"Powerbocking\"] mutableCopy];\n    [arrayCat removeObjectsInArray:self.categories];\n    return @{ FXFormFieldInline: @YES,\n              FXFormFieldAction: @\"updateFields\",\n              FXFormFieldTemplate: @{\n                      FXFormFieldOptions: arrayCat\n                      }\n              };\n}\n```\n- in the ViewController\n\n``` objC\n- (void)updateFields {\n    //refresh the form\n    self.formController.form = self.formController.form;\n    [self.tableView reloadData];\n}\n```\n. And one more thing I try to manage is:\nIf he press on \"add item cell\" he has to select a category before being able to tap again on \"add item cell\"\n![avoid](https://cloud.githubusercontent.com/assets/7737273/6189303/e345cf9c-b399-11e4-957d-be773706d236.png)\n. For those who search the same answer for my first question:\n- add FXFormFieldAction: @\"updateFields\"\n\n``` objC\n- (NSDictionary *)categoriesField {\n    NSMutableArray *arrayCat = [@[@\"Football\", @\"Tennis\", @\"Golf\", @\"BasketBall\", @\"Powerbocking\"] mutableCopy];\n    [arrayCat removeObjectsInArray:self.categories];\n    return @{ FXFormFieldInline: @YES,\n              FXFormFieldAction: @\"updateFields\",\n              FXFormFieldTemplate: @{\n                      FXFormFieldOptions: arrayCat\n                      }\n              };\n}\n```\n- in the ViewController\n\n``` objC\n- (void)updateFields {\n    //refresh the form\n    self.formController.form = self.formController.form;\n    [self.tableView reloadData];\n}\n```\n. ",
    "safronovser": "I have the same issue\n![ios simulator screen shot 5 2015 14 53 03](https://cloud.githubusercontent.com/assets/8860847/6996761/691d07f2-dba4-11e4-944d-3037ad05a555.png)\n. I have the same issue\n![ios simulator screen shot 5 2015 14 53 03](https://cloud.githubusercontent.com/assets/8860847/6996761/691d07f2-dba4-11e4-944d-3037ad05a555.png)\n. ",
    "zapzero": "have to add `@property (nonatomic, copy) NSString *about;`   in  your .h file. @\"backgroundColor\": [UIColor clearColor] ,. have to add `@property (nonatomic, copy) NSString *about;`   in  your .h file. @\"backgroundColor\": [UIColor clearColor] ,. ",
    "tosbaha": "I am currently achieving like this.  In my MapViewController I created a delegate and calling a method in my viewDidDisappear\n\n``` swift\nprotocol MapViewControllerDelegate{\n    func updateKonum(controller:MapViewController,text:String)\n}\n\n    func konumEkle() {\n\n        var konum = \"Cant get location\"\n        if (delegate != nil) {\n            if let coord = currentLocation?.coordinate {\n                   konum = \"\\(coord.latitude),\\(coord.longitude)\"\n                if newCoordinate?.latitude != nil {\n                    konum = \"\\(newCoordinate!.latitude),\\(newCoordinate!.longitude)\"\n                }\n\n            }\n                        delegate!.updateKonum(self, text: konum)\n        }\n\n    }\n    override func viewDidDisappear(animated: Bool) {\n        konumEkle()\n    }\n```\n\nThen in my form view controller, I do it like below\n\n``` swift\n    func updateKonum(controller: MapViewController, text: String) {\n       println(\"Update Konum Delegate: \\(text)\")\n\n        var indexpath = NSIndexPath(forItem: 4, inSection: 1) //get cell reference to Konum\n        tableView.cellForRowAtIndexPath(indexpath)?.detailTextLabel?.text = text\n\n    }\n```\n\nIt works, I can update the detailtextLabel of the cell. However, using hard coded value for indexpath, not able to update the field,(FXFormFieldKey: \"location....) in my form kind a looks odd. I really don't know any other method. I appreciate if you can help me on this. Thanks.\n. I made it like below I guess better than previous one but still I am not sure whether it is the best method for this.\n\n``` swift\nfunc updateKonum(controller: MapViewController, text: String) {\n       let form =  formController.form as IstekForm\n        form.konum = text\n        formController.tableView.reloadData()\n    }\n```\n. I am using the delegate function I wrote in issue #313 \n. @Slijkhuis You can also add image like this\n\n``` swift\n    func nameField() -> NSDictionary {\n        let image:UIImage = UIImage(named: \"user\")!\n        return [\"imageView.image\": image]\n    }\n```\n\nHowever, be aware that padding of cells are not calculated correctly if there is an image in standard cell. Especially in TextView cells, image collapses with content. You can change the origin of textView frame like this \n\n``` swift\ntextViewFrame.origin.x = 2*FXFormFieldPaddingLeft + self.imageView.frame.size.width;\n```\n\nAlthough it is ugly hack, it worked for my purposes. I hope @nicklockwood adds support for imageview support for other basic cells as well. \n. I am currently achieving like this.  In my MapViewController I created a delegate and calling a method in my viewDidDisappear\n\n``` swift\nprotocol MapViewControllerDelegate{\n    func updateKonum(controller:MapViewController,text:String)\n}\n\n    func konumEkle() {\n\n        var konum = \"Cant get location\"\n        if (delegate != nil) {\n            if let coord = currentLocation?.coordinate {\n                   konum = \"\\(coord.latitude),\\(coord.longitude)\"\n                if newCoordinate?.latitude != nil {\n                    konum = \"\\(newCoordinate!.latitude),\\(newCoordinate!.longitude)\"\n                }\n\n            }\n                        delegate!.updateKonum(self, text: konum)\n        }\n\n    }\n    override func viewDidDisappear(animated: Bool) {\n        konumEkle()\n    }\n```\n\nThen in my form view controller, I do it like below\n\n``` swift\n    func updateKonum(controller: MapViewController, text: String) {\n       println(\"Update Konum Delegate: \\(text)\")\n\n        var indexpath = NSIndexPath(forItem: 4, inSection: 1) //get cell reference to Konum\n        tableView.cellForRowAtIndexPath(indexpath)?.detailTextLabel?.text = text\n\n    }\n```\n\nIt works, I can update the detailtextLabel of the cell. However, using hard coded value for indexpath, not able to update the field,(FXFormFieldKey: \"location....) in my form kind a looks odd. I really don't know any other method. I appreciate if you can help me on this. Thanks.\n. I made it like below I guess better than previous one but still I am not sure whether it is the best method for this.\n\n``` swift\nfunc updateKonum(controller: MapViewController, text: String) {\n       let form =  formController.form as IstekForm\n        form.konum = text\n        formController.tableView.reloadData()\n    }\n```\n. I am using the delegate function I wrote in issue #313 \n. @Slijkhuis You can also add image like this\n\n``` swift\n    func nameField() -> NSDictionary {\n        let image:UIImage = UIImage(named: \"user\")!\n        return [\"imageView.image\": image]\n    }\n```\n\nHowever, be aware that padding of cells are not calculated correctly if there is an image in standard cell. Especially in TextView cells, image collapses with content. You can change the origin of textView frame like this \n\n``` swift\ntextViewFrame.origin.x = 2*FXFormFieldPaddingLeft + self.imageView.frame.size.width;\n```\n\nAlthough it is ugly hack, it worked for my purposes. I hope @nicklockwood adds support for imageview support for other basic cells as well. \n. ",
    "Slijkhuis": "I hadn't.. The formController was indeed nil. So, I moved it to `viewDidLoad` and it worked!\n\nE-mail, phone and password fields are however still in the default style, but those have different field types I guess. Is there a way to cover each of those at once? So, if I'd do this:\n\n```\n [self.formController registerCellClass:[MyFormTextFieldCell class] forFieldType:FXFormFieldTypeText];\n [self.formController registerCellClass:[MyFormTextFieldCell class] forFieldType:FXFormFieldTypePhone];\n [self.formController registerCellClass:[MyFormTextFieldCell class] forFieldType:FXFormFieldTypePassword];\n [self.formController registerCellClass:[MyFormTextFieldCell class] forFieldType:FXFormFieldTypeEmail];\n```\n\nCan I retrieve the field type in the `setUp` method of `MyFormTextFieldCell`? Because then I can manually recreate the keyboard, autocorrect and secureTextEntry behaviour for each of those types, or are different in more ways?\n. Thanks! Amazing library and amazing support :+1: \n. Ow, missed that! Thanks!\n\nI need to display an image in the row. I thought it was hidden because the height of the row wasn't sufficient. However, I now see that (since I'm able to set the height now) it's not displaying at all. What would be the recommended way to display an image in the table row?\n\nCurrently, I'm adding the image by adding a `UIImageView` as a subview to `contentView` (placing it at the x/y position of `detailTextLabel`). But that does not seem to be working.\n. Nice, thanks for the tip. However, I'm not having trouble with displaying an image from the start. The problem only occurs when I want to change the image based on user input.\n\nI haven't found the exact problem yet, but I'll it post here as soon as I find out where it goes wrong. I suspect it has something to do with the tableview not redrawing.\n. Never mind, it suddenly started working... I really don't know why.\n\nFirst, I set the image like this:\n1. `- (void)didSelectWithTableView:(UITableView *)tableView controller:(UIViewController *)controller` is called.\n2. A view controller is pushed to front\n3. After user interaction, another view controller is pushed to the front\n4. After async contact with the server, the view controllers are popped and the image is set and the `self.field.value` is set.\n\nNow it's like this:\n1/2/3. same\n4. Same, but only `self.field.value` is set and in the `[self update]` method I set the image _based on `self.field.value`_\n\nI'm not sure what the difference is.. But it's working now :).\n. I hadn't.. The formController was indeed nil. So, I moved it to `viewDidLoad` and it worked!\n\nE-mail, phone and password fields are however still in the default style, but those have different field types I guess. Is there a way to cover each of those at once? So, if I'd do this:\n\n```\n [self.formController registerCellClass:[MyFormTextFieldCell class] forFieldType:FXFormFieldTypeText];\n [self.formController registerCellClass:[MyFormTextFieldCell class] forFieldType:FXFormFieldTypePhone];\n [self.formController registerCellClass:[MyFormTextFieldCell class] forFieldType:FXFormFieldTypePassword];\n [self.formController registerCellClass:[MyFormTextFieldCell class] forFieldType:FXFormFieldTypeEmail];\n```\n\nCan I retrieve the field type in the `setUp` method of `MyFormTextFieldCell`? Because then I can manually recreate the keyboard, autocorrect and secureTextEntry behaviour for each of those types, or are different in more ways?\n. Thanks! Amazing library and amazing support :+1: \n. Ow, missed that! Thanks!\n\nI need to display an image in the row. I thought it was hidden because the height of the row wasn't sufficient. However, I now see that (since I'm able to set the height now) it's not displaying at all. What would be the recommended way to display an image in the table row?\n\nCurrently, I'm adding the image by adding a `UIImageView` as a subview to `contentView` (placing it at the x/y position of `detailTextLabel`). But that does not seem to be working.\n. Nice, thanks for the tip. However, I'm not having trouble with displaying an image from the start. The problem only occurs when I want to change the image based on user input.\n\nI haven't found the exact problem yet, but I'll it post here as soon as I find out where it goes wrong. I suspect it has something to do with the tableview not redrawing.\n. Never mind, it suddenly started working... I really don't know why.\n\nFirst, I set the image like this:\n1. `- (void)didSelectWithTableView:(UITableView *)tableView controller:(UIViewController *)controller` is called.\n2. A view controller is pushed to front\n3. After user interaction, another view controller is pushed to the front\n4. After async contact with the server, the view controllers are popped and the image is set and the `self.field.value` is set.\n\nNow it's like this:\n1/2/3. same\n4. Same, but only `self.field.value` is set and in the `[self update]` method I set the image _based on `self.field.value`_\n\nI'm not sure what the difference is.. But it's working now :).\n. ",
    "ZevEisenberg": ":+1: I'm seeing static analysis warnings here in my project.\n. :+1: I'm seeing static analysis warnings here in my project.\n. ",
    "gtranchedone": "I'll try to have a look at it by this weekend. In the mean time, do you have a code sample showing the issue?\n. I'll try to have a look at it by this weekend. In the mean time, do you have a code sample showing the issue?\n. ",
    "funkyboy": "I ended up implementing a `-(BOOL)satisfiesMandatoryFields` method in the form model, which I call before submitting the form. \nIt does the job in my case.\n. I ended up implementing a `-(BOOL)satisfiesMandatoryFields` method in the form model, which I call before submitting the form. \nIt does the job in my case.\n. ",
    "gohar-musoyan-shocase": "Did you find any solution to this issue?. Did you find any solution to this issue?. ",
    "yihshin": "I do something like this\n    @{FXFormFieldKey:@\"gender\", FXFormFieldTitle: @\"Gender\", FXFormFieldOptions: @[@\"Male\",@\"Female\"],FXFormFieldDefaultValue: @1}\n\nwith \n\n```\ntypedef NS_ENUM(NSInteger, Gender)\n{\n    GenderMale = 0,\n    GenderFemale,\n};\n```\n\n in the header file.\n\nsupposedly it will set default value to female, right? But it doesn't seems to work so. Am i doing it wrongly? \n. I do something like this\n    @{FXFormFieldKey:@\"gender\", FXFormFieldTitle: @\"Gender\", FXFormFieldOptions: @[@\"Male\",@\"Female\"],FXFormFieldDefaultValue: @1}\n\nwith \n\n```\ntypedef NS_ENUM(NSInteger, Gender)\n{\n    GenderMale = 0,\n    GenderFemale,\n};\n```\n\n in the header file.\n\nsupposedly it will set default value to female, right? But it doesn't seems to work so. Am i doing it wrongly? \n. ",
    "lzwjava": " @yihshin \ntry use \n\n```\n- (id)init\n{\n    if ((self = [super init])) {\n        _myProperty = SOME_ENUM_VALUE;\n    }\n}\n```\n\nworks great \uff01\n.  @yihshin \ntry use \n\n```\n- (id)init\n{\n    if ((self = [super init])) {\n        _myProperty = SOME_ENUM_VALUE;\n    }\n}\n```\n\nworks great \uff01\n. ",
    "bumaociyuan": "#271\n. #271\n. ",
    "JJJJJJJerk": "i do not know how to get the property of a cell in the TVC either!\n. i do not know how to get the property of a cell in the TVC either!\n. ",
    "dehlen": "Great thanks for the support.\n. Had the same issue. Above solution helped me compile it. Thanks @Brisdo.\n. Great thanks for the support.\n. Had the same issue. Above solution helped me compile it. Thanks @Brisdo.\n. ",
    "apauly": "Ok, cool. I just wasn't sure if there's build in support for storing and handling those custom key-value pairs. But then I'll just do it by myself ;)\n. Ok, cool. I just wasn't sure if there's build in support for storing and handling those custom key-value pairs. But then I'll just do it by myself ;)\n. ",
    "Vol-i": "It turns out that extraFields method should be implemented. on view controllers that uses FxForms.\n\nThis ticket can be closed.\n. It turns out that extraFields method should be implemented. on view controllers that uses FxForms.\n\nThis ticket can be closed.\n. ",
    "fotiDim": "I have managed to find a workaround. One issue was that FXFormViewController needed to be an instance variable instead of a local variable. I tried changing FXFormViewController to an instance variable and still didn't work. The controller.tableView property was nil. Not sure why though...\n\nInstead I added a UIView within my tableview in Interface Builder. Then I changed manually its class to UITableView, created an outlet and used the following code which worked:\n\n```\nvar controller : FXFormViewController!\n@IBOutlet weak var headerView: UITableView!\noverride func viewDidLoad() {\n    super.viewDidLoad()\n\n    controller = FXFormViewController()\n    controller.tableView = headerView\n    controller.formController.form = EventEditForm()\n}\n```\n. I have managed to find a workaround. One issue was that FXFormViewController needed to be an instance variable instead of a local variable. I tried changing FXFormViewController to an instance variable and still didn't work. The controller.tableView property was nil. Not sure why though...\n\nInstead I added a UIView within my tableview in Interface Builder. Then I changed manually its class to UITableView, created an outlet and used the following code which worked:\n\n```\nvar controller : FXFormViewController!\n@IBOutlet weak var headerView: UITableView!\noverride func viewDidLoad() {\n    super.viewDidLoad()\n\n    controller = FXFormViewController()\n    controller.tableView = headerView\n    controller.formController.form = EventEditForm()\n}\n```\n. ",
    "Hatom1K": "Please?\n. Please?\n. ",
    "wm-j-ray": "OK, I'm back...Sorry\nWhen the slider goes off the screen either do to a navController push or pop, or scrolling out of view, the slider value is not maintained.  I did add a property to the slider cell, like so...\n\n```\n @property(nonatomic) float value;\n```\n\nWhat am I missing?  Could this be a cell-reuse issue?  \n\nI've googled around and found a discussion on SO here -> http://stackoverflow.com/questions/21470040/uislider-in-dynamic-uitableview but I'm not sure if this is the correct approach and if it is, I don't know how to wire up indexPath.row using FXForms.\n. Since I'm not subclassing from from FXFormBaseCell or the existing FXFormCell class for the slider, where would this code go and how does it get called?\n\nI tried to actually subclass from FXFormSliderCell previously with no success so I did a one-off implementation as described in my opening comment.\n. Finally, \nGot it working with this:\n\n```\n - (void) didChange {\n     self.field.value = @(self.slider.value);\n } \n\n - (void) setField:(FXFormField *)field\n {\n   _field = field;\n    self.slider.value = [field.value floatValue];\n }\n```\n\nThanks again so much for the help.\n. I had the same issue, so maybe I can help.\n\nYou can handle this using some additions to your form model.  I had certain sections that I wanted to appear or be hidden based on the value of some other field.    What I did was used excludedFields to manage the entire form rather than the Fields array.\n\nAt a high level, I created methods that created the list(s) of fields I wanted to toggle and then some helper methods to manage the form by adjusting the array returned by [form excludedFields].\n\nWhat I did was in the form model I created something like this:\n\n```\n -(NSArray *) characterAttributesFields {\nreturn @[@\"species\",\n         @\"sex\",\n         @\"age\",\n         @\"hair\",\n         @\"eyes\",\n         @\"build\",\n         @\"intelligence\",\n         @\"profession\"\n         ];\n }\n```\n\nI did one of these for each clump of form field/properties I wanted to manage. (As an aside, I used a separate NSDictionary to control the individual stylings of each field.  Just seemed a little easier to maintain).   I created a property for an array of dynamicallyExcludedFields and I'd use methods to adjust the contents of this array. \n\nThen I used these lists and some helper methods to adjust what gets returned by [excludedFields), like so:\n\n```\n - (NSArray *)excludedFields\n {\n\n     NSMutableArray *excluded = [[NSMutableArray alloc] init];\n\n     [excluded addObjectsFromArray:[self alwaysExcludedFields]];\n     if ([_dynamicallyExcludedFields count]) {\n         for (id excludeMeToo in _dynamicallyExcludedFields) {\n             [excluded addObject:excludeMeToo];\n         }\n     }\n     return excluded;\n }\n```\n\nSo the above method just adjusts what is returned. It probably seems a little counter-intuitive that you manage the form contents by the contents of the excludedFields array rather than the Fields array, but that is the only way I could figure out how to do it.\n\nRead a field value filled in by user\nAdjust dynamically excludedFieldsArray\nreload the form\n\nwash, rinse, repeat\n\nI'm sure there is a more clever way of getting the job done, but hey, what do I know?\n\nHope this helps.\n\n//**********\n\nHere are some of the helper methods that may save you a little hassle:\n\n```\n -(NSArray *) alwaysExcludedFields {\n     return @[@\"dynamicallyExcludedFields\",\n         @\"isNewCharacter\"\n         ];\n }\n\n\n\n\n -(void) addToExcludedFields: (NSString *)fieldName {\n     bool alreadyThere = [_dynamicallyExcludedFields containsObject:fieldName];\n     if (!alreadyThere) {\n         [_dynamicallyExcludedFields addObject:fieldName];\n     }\n }\n\n -(void) dropFromExcludedFields: (NSString *)fieldName {\n     bool isThere = [_dynamicallyExcludedFields containsObject:fieldName];\n     if (isThere) {\n         [_dynamicallyExcludedFields removeObject:fieldName];\n     }\n}\n```\n\nAnd finally a cover function or two that will fire based on the value of some other field:\n\n```\n -(void) addCharacterAttributesFieldsToForm {\n     for (id obj in [self characterAttributesFields]) {\n         [self dropFromExcludedFields:obj];\n     }\n}\n\n -(void) dropCharacterAttributesFieldsFromForm {\n     for (id obj in [self characterAttributesFields]) {\n         [self addToExcludedFields:obj];\n     }\n     NSLog(@\"Excluded Fields: %@\",self.excludedFields);  \n}\n```\n. Yay!\n. OK, I'm back...Sorry\nWhen the slider goes off the screen either do to a navController push or pop, or scrolling out of view, the slider value is not maintained.  I did add a property to the slider cell, like so...\n\n```\n @property(nonatomic) float value;\n```\n\nWhat am I missing?  Could this be a cell-reuse issue?  \n\nI've googled around and found a discussion on SO here -> http://stackoverflow.com/questions/21470040/uislider-in-dynamic-uitableview but I'm not sure if this is the correct approach and if it is, I don't know how to wire up indexPath.row using FXForms.\n. Since I'm not subclassing from from FXFormBaseCell or the existing FXFormCell class for the slider, where would this code go and how does it get called?\n\nI tried to actually subclass from FXFormSliderCell previously with no success so I did a one-off implementation as described in my opening comment.\n. Finally, \nGot it working with this:\n\n```\n - (void) didChange {\n     self.field.value = @(self.slider.value);\n } \n\n - (void) setField:(FXFormField *)field\n {\n   _field = field;\n    self.slider.value = [field.value floatValue];\n }\n```\n\nThanks again so much for the help.\n. I had the same issue, so maybe I can help.\n\nYou can handle this using some additions to your form model.  I had certain sections that I wanted to appear or be hidden based on the value of some other field.    What I did was used excludedFields to manage the entire form rather than the Fields array.\n\nAt a high level, I created methods that created the list(s) of fields I wanted to toggle and then some helper methods to manage the form by adjusting the array returned by [form excludedFields].\n\nWhat I did was in the form model I created something like this:\n\n```\n -(NSArray *) characterAttributesFields {\nreturn @[@\"species\",\n         @\"sex\",\n         @\"age\",\n         @\"hair\",\n         @\"eyes\",\n         @\"build\",\n         @\"intelligence\",\n         @\"profession\"\n         ];\n }\n```\n\nI did one of these for each clump of form field/properties I wanted to manage. (As an aside, I used a separate NSDictionary to control the individual stylings of each field.  Just seemed a little easier to maintain).   I created a property for an array of dynamicallyExcludedFields and I'd use methods to adjust the contents of this array. \n\nThen I used these lists and some helper methods to adjust what gets returned by [excludedFields), like so:\n\n```\n - (NSArray *)excludedFields\n {\n\n     NSMutableArray *excluded = [[NSMutableArray alloc] init];\n\n     [excluded addObjectsFromArray:[self alwaysExcludedFields]];\n     if ([_dynamicallyExcludedFields count]) {\n         for (id excludeMeToo in _dynamicallyExcludedFields) {\n             [excluded addObject:excludeMeToo];\n         }\n     }\n     return excluded;\n }\n```\n\nSo the above method just adjusts what is returned. It probably seems a little counter-intuitive that you manage the form contents by the contents of the excludedFields array rather than the Fields array, but that is the only way I could figure out how to do it.\n\nRead a field value filled in by user\nAdjust dynamically excludedFieldsArray\nreload the form\n\nwash, rinse, repeat\n\nI'm sure there is a more clever way of getting the job done, but hey, what do I know?\n\nHope this helps.\n\n//**********\n\nHere are some of the helper methods that may save you a little hassle:\n\n```\n -(NSArray *) alwaysExcludedFields {\n     return @[@\"dynamicallyExcludedFields\",\n         @\"isNewCharacter\"\n         ];\n }\n\n\n\n\n -(void) addToExcludedFields: (NSString *)fieldName {\n     bool alreadyThere = [_dynamicallyExcludedFields containsObject:fieldName];\n     if (!alreadyThere) {\n         [_dynamicallyExcludedFields addObject:fieldName];\n     }\n }\n\n -(void) dropFromExcludedFields: (NSString *)fieldName {\n     bool isThere = [_dynamicallyExcludedFields containsObject:fieldName];\n     if (isThere) {\n         [_dynamicallyExcludedFields removeObject:fieldName];\n     }\n}\n```\n\nAnd finally a cover function or two that will fire based on the value of some other field:\n\n```\n -(void) addCharacterAttributesFieldsToForm {\n     for (id obj in [self characterAttributesFields]) {\n         [self dropFromExcludedFields:obj];\n     }\n}\n\n -(void) dropCharacterAttributesFieldsFromForm {\n     for (id obj in [self characterAttributesFields]) {\n         [self addToExcludedFields:obj];\n     }\n     NSLog(@\"Excluded Fields: %@\",self.excludedFields);  \n}\n```\n. Yay!\n. ",
    "chgandm": "I agree that this is super important (primarily in order to do UI testing in my case) and from my point of view any FXForm component should offer the ability to set the accessibility label (and/or accessibility identifier).\nAny timeline on when this is being merged/expanded on?\n. I agree that this is super important (primarily in order to do UI testing in my case) and from my point of view any FXForm component should offer the ability to set the accessibility label (and/or accessibility identifier).\nAny timeline on when this is being merged/expanded on?\n. ",
    "lomaverde": "+1 need this for UI testing for app that supports muliti languages.. +1 need this for UI testing for app that supports muliti languages.. ",
    "j-dawg": "In Swift `self.tableView.reloadData()` doesn't seem to reset the form.\n. Ah cool. I misunderstood.\n\nExcellent, got it working.\n. Thank you.\n\nI wrote a Swift solution, which is quite different to your suggestion but I thought you might find interesting.\n\nI added a FXFormFieldAction to the switch field, which calls a function containing\n\n```\nself.formController.form = self.formController.form\nself.tableView.reloadData()\n```\n\nThen within the `func fields() -> [AnyObject]! {` function, I create an NSMutableArray to which I can conditionally add fields to before returning.\n\nThis solution works great, the only thing I am lacking is the ability to make the change in fields animated.\n. In Swift `self.tableView.reloadData()` doesn't seem to reset the form.\n. Ah cool. I misunderstood.\n\nExcellent, got it working.\n. Thank you.\n\nI wrote a Swift solution, which is quite different to your suggestion but I thought you might find interesting.\n\nI added a FXFormFieldAction to the switch field, which calls a function containing\n\n```\nself.formController.form = self.formController.form\nself.tableView.reloadData()\n```\n\nThen within the `func fields() -> [AnyObject]! {` function, I create an NSMutableArray to which I can conditionally add fields to before returning.\n\nThis solution works great, the only thing I am lacking is the ability to make the change in fields animated.\n. ",
    "Julioacarrettoni": "Sorry I pushed to the wrong branch, rewritting history seemed WRONG, and reverting just left everything in a \"dirty\" state so I rather close this PR and start a new fresh one.\n\nThank you.\n. Sorry I pushed to the wrong branch, rewritting history seemed WRONG, and reverting just left everything in a \"dirty\" state so I rather close this PR and start a new fresh one.\n\nThank you.\n. ",
    "fabiosoft": "Same issue for me! \nTake a look here to see what i tried to do... #403 \n. Same issue for me! \nTake a look here to see what i tried to do... #403 \n. ",
    "lm2s": "I don't have anything to add, but I'm experiencing the same crash. As a temporary fix I've returned to 1.2 and everything seems to be working fine.\n. This seems to be the same issue as #373 \n. I don't have anything to add, but I'm experiencing the same crash. As a temporary fix I've returned to 1.2 and everything seems to be working fine.\n. This seems to be the same issue as #373 \n. ",
    "csfelipe": "Same here. Will try to get the 1.2\n. Same here. Will try to get the 1.2\n. ",
    "davidrothera": "The basis behind my change was that calling `self.fields` accesses the instance variable which _could_ be nil however using the `[self fields]` method[1] will instantiate a non-existing instance variable.\n\n[1] https://github.com/davidrothera/FXForms/blob/develop/FXForms/FXForms.m#L1732\n. Yeah I think you are right, its strange though as making the change in the PR resolved the clang error and retained all functionality.\n. Yes, the error was on that line and the change I made resolved that one lower down.\n. Quite possibly, clang isn't the smartest ;)\n. The basis behind my change was that calling `self.fields` accesses the instance variable which _could_ be nil however using the `[self fields]` method[1] will instantiate a non-existing instance variable.\n\n[1] https://github.com/davidrothera/FXForms/blob/develop/FXForms/FXForms.m#L1732\n. Yeah I think you are right, its strange though as making the change in the PR resolved the clang error and retained all functionality.\n. Yes, the error was on that line and the change I made resolved that one lower down.\n. Quite possibly, clang isn't the smartest ;)\n. ",
    "alexdd55": ":+1: \n. :+1: \n. ",
    "federico-f": "Thank you for your reply, Nick. I am not talking about the \"main\" form, I am referring to the tableview that gets automatically displayed in a new view controller to pick up one of the options. In the registration form example, in the Country field, imagine having not just a few countries, but all of them... I would like a way to quickly navigate that list, via index sections or a search box. Do you think it's possible? Thank you.\n![ios simulator screen shot 25 giu 2015 07 33 09](https://cloud.githubusercontent.com/assets/13037312/8347963/2d7df1e0-1b0d-11e5-9dd7-e3b0b8ebf9f5.png)\n. Thank you for your reply, Nick. I am not talking about the \"main\" form, I am referring to the tableview that gets automatically displayed in a new view controller to pick up one of the options. In the registration form example, in the Country field, imagine having not just a few countries, but all of them... I would like a way to quickly navigate that list, via index sections or a search box. Do you think it's possible? Thank you.\n![ios simulator screen shot 25 giu 2015 07 33 09](https://cloud.githubusercontent.com/assets/13037312/8347963/2d7df1e0-1b0d-11e5-9dd7-e3b0b8ebf9f5.png)\n. ",
    "neilkimmett": "I'm a bit stumped on this too. I can figure out how to add `FXFormFieldHeader` values to the _fields_ of a form, and thus get the A..Z index on the side of the _form_, but I can't figure out how to add them to the _options_ of a field of a form (that then gets presented as a new controller on the stack). Any further pointers?\n. OK I've done some more digging and I think I need to be poking around in here? https://github.com/nicklockwood/FXForms/blob/master/FXForms/FXForms.m#L1421-L1429\n. Right so I managed to _horribly_ hack in sectioning-by-first-letter in to the above by replacing the lines referenced in my previous comment with\n\n``` objc\nNSString *currentHeader = @\"\";\nfor (NSUInteger i = 0; i < [field.options count]; i++)\n{\n    NSInteger index = i + (field.placeholder? 1: 0);\n    NSString *title = [field optionDescriptionAtIndex:index];\n    NSString *firstChar = [title substringToIndex:1];\n\n    NSMutableDictionary *field = [@{FXFormFieldKey: [@(index) description],\n                                   FXFormFieldTitle: title,\n                                   FXFormFieldType: FXFormFieldTypeOption,\n                                   FXFormFieldAction: action} mutableCopy];\n    if (![currentHeader isEqualToString:firstChar]) {\n        field[FXFormFieldHeader] = firstChar;\n        currentHeader = firstChar;\n    }\n    [fields addObject:field];\n}\n_fields = fields;\n```\n\nBut I still didn't get the A-Z jump bar down the side because `sectionIndexTitlesForTableView:` and `tableView:sectionForSectionIndexTitle:atIndex:` aren't implemented. But hopefully this gives a very vague idea of what I was trying to achieve? Not suggesting the above code is a good idea at all, mostly just recording this here for my own posterity.\n. I'm a bit stumped on this too. I can figure out how to add `FXFormFieldHeader` values to the _fields_ of a form, and thus get the A..Z index on the side of the _form_, but I can't figure out how to add them to the _options_ of a field of a form (that then gets presented as a new controller on the stack). Any further pointers?\n. OK I've done some more digging and I think I need to be poking around in here? https://github.com/nicklockwood/FXForms/blob/master/FXForms/FXForms.m#L1421-L1429\n. Right so I managed to _horribly_ hack in sectioning-by-first-letter in to the above by replacing the lines referenced in my previous comment with\n\n``` objc\nNSString *currentHeader = @\"\";\nfor (NSUInteger i = 0; i < [field.options count]; i++)\n{\n    NSInteger index = i + (field.placeholder? 1: 0);\n    NSString *title = [field optionDescriptionAtIndex:index];\n    NSString *firstChar = [title substringToIndex:1];\n\n    NSMutableDictionary *field = [@{FXFormFieldKey: [@(index) description],\n                                   FXFormFieldTitle: title,\n                                   FXFormFieldType: FXFormFieldTypeOption,\n                                   FXFormFieldAction: action} mutableCopy];\n    if (![currentHeader isEqualToString:firstChar]) {\n        field[FXFormFieldHeader] = firstChar;\n        currentHeader = firstChar;\n    }\n    [fields addObject:field];\n}\n_fields = fields;\n```\n\nBut I still didn't get the A-Z jump bar down the side because `sectionIndexTitlesForTableView:` and `tableView:sectionForSectionIndexTitle:atIndex:` aren't implemented. But hopefully this gives a very vague idea of what I was trying to achieve? Not suggesting the above code is a good idea at all, mostly just recording this here for my own posterity.\n. ",
    "kylebshr": "Please merge this, trying to use nibs in a Swift project right now and it's not working!\n. Please merge this, trying to use nibs in a Swift project right now and it's not working!\n. ",
    "ezwu": "Wrote my own subclass for it\n. Wrote my own subclass for it\n. ",
    "petalvlad": "@nicklockwood what's your point about prototype cells? will it be supported? \n. @nicklockwood what's your point about prototype cells? will it be supported? \n. ",
    "oscarjiv91": "You have to subclass an UITableViewCell and add the IBOutlets. Also the XLFormField *field:\n\n```\n#import \"FXForms.h\"\n\n@interface SubroutineRow : UITableViewCell<FXFormFieldCell, UITextFieldDelegate>\n\n@property (strong, nonatomic) FXFormField *field;\n@property (strong, nonatomic) IBOutlet UITextField *nameTextField;\n@property (strong, nonatomic) IBOutlet UITextField *timeTextField;\n\n\n@end\n```\n\nIf you have two UITextFields, set the delegates and assign them tags to differentiate them. In this code I assigned NAME_TAG and TIME_TAG.\n\nIn your implementation file, set the \"field\" as a dictionary with the two values:\n\n```\n-(BOOL)textField:(UITextField *)textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString *)string{\n    NSString *tempString;\n    tempString = [textField.text stringByReplacingCharactersInRange:range withString:string];\n    switch (textField.tag) {\n        case NAME_TAG:\n            [dictionary setObject:tempString forKey:@\"name\"];\n            break;\n        default:\n            [dictionary setObject:tempString forKey:@\"time\"];\n            break;\n    }\n    self.field.value = dictionary;\n    return YES;\n}\n```\n. You have to subclass an UITableViewCell and add the IBOutlets. Also the XLFormField *field:\n\n```\n#import \"FXForms.h\"\n\n@interface SubroutineRow : UITableViewCell<FXFormFieldCell, UITextFieldDelegate>\n\n@property (strong, nonatomic) FXFormField *field;\n@property (strong, nonatomic) IBOutlet UITextField *nameTextField;\n@property (strong, nonatomic) IBOutlet UITextField *timeTextField;\n\n\n@end\n```\n\nIf you have two UITextFields, set the delegates and assign them tags to differentiate them. In this code I assigned NAME_TAG and TIME_TAG.\n\nIn your implementation file, set the \"field\" as a dictionary with the two values:\n\n```\n-(BOOL)textField:(UITextField *)textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString *)string{\n    NSString *tempString;\n    tempString = [textField.text stringByReplacingCharactersInRange:range withString:string];\n    switch (textField.tag) {\n        case NAME_TAG:\n            [dictionary setObject:tempString forKey:@\"name\"];\n            break;\n        default:\n            [dictionary setObject:tempString forKey:@\"time\"];\n            break;\n    }\n    self.field.value = dictionary;\n    return YES;\n}\n```\n. ",
    "tony98789": "So i figured this one out, if you add the FxFormFieldKey and set the FxFormFieldType to FxFormFieldTypeDefault then it will display the value assigned to that key and still call your Segue correctly.\n. Figured it out, in fxforms the function setOptionSelected you can change the return value to nil which deselects if the option is already selected. Line 1329 as shown below.\n\n<img width=\"604\" alt=\"screen shot 2015-09-24 at 13 35 15\" src=\"https://cloud.githubusercontent.com/assets/13201284/10073478/26eaf610-62c1-11e5-9d6a-15040284a1b6.png\">\n. So i figured this one out, if you add the FxFormFieldKey and set the FxFormFieldType to FxFormFieldTypeDefault then it will display the value assigned to that key and still call your Segue correctly.\n. Figured it out, in fxforms the function setOptionSelected you can change the return value to nil which deselects if the option is already selected. Line 1329 as shown below.\n\n<img width=\"604\" alt=\"screen shot 2015-09-24 at 13 35 15\" src=\"https://cloud.githubusercontent.com/assets/13201284/10073478/26eaf610-62c1-11e5-9d6a-15040284a1b6.png\">\n. ",
    "arkilis": "Thanks for your prompt response!\n. My solution is init a dictionary, when the targeted string is returned, you can use dictionary to give a value. \n. Did you check which headers that you include?\n. Thanks for your prompt response!\n. My solution is init a dictionary, when the targeted string is returned, you can use dictionary to give a value. \n. Did you check which headers that you include?\n. ",
    "gzdgt": "Thank you.\n. Thank you.\n. ",
    "eliotstock": "Having run the examples now, I see that I shouldn't expect the unwinding to happen automatically. The user will just have to click Back above after changing the value. So the only issue is that the checkmark doesn't move.\n. Having run the examples now, I see that I shouldn't expect the unwinding to happen automatically. The user will just have to click Back above after changing the value. So the only issue is that the checkmark doesn't move.\n. ",
    "kevinvanmierlo": "@waterskier2007 Thanks, this fixed my whole app!\n. @waterskier2007 Thanks, this fixed my whole app!\n. ",
    "waterskier2007": "It looks like the CI builds are not using the iOS 9 SDK. Any update on this?\n. It looks like the CI builds are not using the iOS 9 SDK. Any update on this?\n. ",
    "wellu": "Ah, the problem was that my .xib file had regular View as the root item. I recreated it and used UiTableViewCell and it all works now.\n\nHowever, the old code worked on iOS7 and iOS8 but stopped magically working on iOS9.\n\nThis issue can be closed.\n. Ah, the problem was that my .xib file had regular View as the root item. I recreated it and used UiTableViewCell and it all works now.\n\nHowever, the old code worked on iOS7 and iOS8 but stopped magically working on iOS9.\n\nThis issue can be closed.\n. ",
    "bar2": "why not just call indexOfObject on the array?\n. why not just call indexOfObject on the array?\n. ",
    "jatindhawan": "@nicklockwood Do you know what I'm trying to ask, need more details?\n. Yes thats what I am doing, don't know why isnt it working\n\nSent from my iPhone\n\nOn Dec 2, 2015, at 9:21 PM, Nick Lockwood <notifications@github.com<mailto:notifications@github.com>> wrote:\n\nThe FieldSelectorViewController should have a field property of type FXFormField, like this:\n\n@property (nonatomic, strong) FXFormField *field;\n\nThis will be automatically populated by the parent form (your DynamicForm class) when the Reason field is selected.\n\nTo update the value from within the FieldSelectorViewController, just set the value of the field, like this:\n\nself.field.value = @\"New Value\";\n\nAnd that should then update the value of the Reason property in the DynamicForm. To refresh the display of the field in the FieldSelectorViewController you may also need to call\n\n[self.tableView reloadData];\n\n## \n\nReply to this email directly or view it on GitHubhttps://github.com/nicklockwood/FXForms/issues/431#issuecomment-161496123.\n. found the problem, I was supplying options through property FXFormFieldOptions: @[ @\"test\"] and that coupled with FXFormFieldViewController: @\"FieldSelectorViewController\" \n\npresence of both of these was preventing the update of value as I guess it must have been looking for a value from one of the options.\n. @nicklockwood Do you know what I'm trying to ask, need more details?\n. Yes thats what I am doing, don't know why isnt it working\n\nSent from my iPhone\n\nOn Dec 2, 2015, at 9:21 PM, Nick Lockwood <notifications@github.com<mailto:notifications@github.com>> wrote:\n\nThe FieldSelectorViewController should have a field property of type FXFormField, like this:\n\n@property (nonatomic, strong) FXFormField *field;\n\nThis will be automatically populated by the parent form (your DynamicForm class) when the Reason field is selected.\n\nTo update the value from within the FieldSelectorViewController, just set the value of the field, like this:\n\nself.field.value = @\"New Value\";\n\nAnd that should then update the value of the Reason property in the DynamicForm. To refresh the display of the field in the FieldSelectorViewController you may also need to call\n\n[self.tableView reloadData];\n\n## \n\nReply to this email directly or view it on GitHubhttps://github.com/nicklockwood/FXForms/issues/431#issuecomment-161496123.\n. found the problem, I was supplying options through property FXFormFieldOptions: @[ @\"test\"] and that coupled with FXFormFieldViewController: @\"FieldSelectorViewController\" \n\npresence of both of these was preventing the update of value as I guess it must have been looking for a value from one of the options.\n. ",
    "krris": "Thanks!\n. Thanks!\n. ",
    "WA-Will": "Your readme. I'm trying to declare my dateTime object as just a Time.\n. Wow, that was obvious and easy. Thanks! \n\nOne more obvious and easy one. Can I change the display text string to the actual time I chose and just the time?\n. That wasn't quite what I was looking for. I'm trying to format the date string value. I'd like it to show only the time. And the time I've selected. Currently, it's displaying a different time.\n. I'm getting an entire formatted date string when I choose a time. I'm hoping to make the value equal the time chosen.\n. Your readme. I'm trying to declare my dateTime object as just a Time.\n. Wow, that was obvious and easy. Thanks! \n\nOne more obvious and easy one. Can I change the display text string to the actual time I chose and just the time?\n. That wasn't quite what I was looking for. I'm trying to format the date string value. I'd like it to show only the time. And the time I've selected. Currently, it's displaying a different time.\n. I'm getting an entire formatted date string when I choose a time. I'm hoping to make the value equal the time chosen.\n. ",
    "wxhui": "In my case,i use a custom textFiledCell and implement the textfield delegate methods.\n. In my case,i use a custom textFiledCell and implement the textfield delegate methods.\n. ",
    "mrsnow-git": "I solve it for y project in other way:\n\non controller creation after creating the form I add \n\n```\n[[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(textFieldTextDidChange:) name:UITextFieldTextDidChangeNotification object:nil];\n```\n\nand have \n\n```\n- (void)textFieldTextDidChange:(NSNotification *)notification\n{\n    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.01 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{\n        [self updateFormDataState];\n    });\n}\n```\n\nI've added `dispatch_after` to be able to get in `updateFormDataState` the updated values for all fields interested for me.\n\nso now I can control some buttons states corresponding to fields text, for example disable Save button if some field are empty...\n. I solve it for y project in other way:\n\non controller creation after creating the form I add \n\n```\n[[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(textFieldTextDidChange:) name:UITextFieldTextDidChangeNotification object:nil];\n```\n\nand have \n\n```\n- (void)textFieldTextDidChange:(NSNotification *)notification\n{\n    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.01 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{\n        [self updateFormDataState];\n    });\n}\n```\n\nI've added `dispatch_after` to be able to get in `updateFormDataState` the updated values for all fields interested for me.\n\nso now I can control some buttons states corresponding to fields text, for example disable Save button if some field are empty...\n. ",
    "coybit": "I have solved this problem by adding \r\n\r\n`if ([value unsignedIntegerValue] == NSNotFound) return nil;`\r\n\r\n to 'value' getter:\r\n\r\n```\r\n- (id)value\r\n{\r\n    if (FXFormCanGetValueForKey(self.form, self.key))\r\n    {\r\n        id value = [(NSObject *)self.form valueForKey:self.key];\r\n        if (value && self.options)\r\n        {\r\n            if ([self isIndexedType])\r\n            {\r\n                if ([value unsignedIntegerValue] == NSNotFound) return nil;\r\n                if ([value unsignedIntegerValue] >= [self.options count]) value = nil;\r\n            }\r\n            else if (![self isCollectionType] && ![self.type isEqualToString:FXFormFieldTypeBitfield])\r\n            {\r\n                //TODO: should we validate collection types too, or is that overkill?\r\n                if (![self.options containsObject:value]) value = nil;\r\n            }\r\n        }\r\n        if (!value && self.defaultValue)\r\n        {\r\n            self.value = value = self.defaultValue;\r\n        }\r\n        return value;\r\n    }\r\n    return self.defaultValue;\r\n}\r\n```\r\n. I have solved this problem by adding \r\n\r\n`if ([value unsignedIntegerValue] == NSNotFound) return nil;`\r\n\r\n to 'value' getter:\r\n\r\n```\r\n- (id)value\r\n{\r\n    if (FXFormCanGetValueForKey(self.form, self.key))\r\n    {\r\n        id value = [(NSObject *)self.form valueForKey:self.key];\r\n        if (value && self.options)\r\n        {\r\n            if ([self isIndexedType])\r\n            {\r\n                if ([value unsignedIntegerValue] == NSNotFound) return nil;\r\n                if ([value unsignedIntegerValue] >= [self.options count]) value = nil;\r\n            }\r\n            else if (![self isCollectionType] && ![self.type isEqualToString:FXFormFieldTypeBitfield])\r\n            {\r\n                //TODO: should we validate collection types too, or is that overkill?\r\n                if (![self.options containsObject:value]) value = nil;\r\n            }\r\n        }\r\n        if (!value && self.defaultValue)\r\n        {\r\n            self.value = value = self.defaultValue;\r\n        }\r\n        return value;\r\n    }\r\n    return self.defaultValue;\r\n}\r\n```\r\n. ",
    "willzh": "Thanks for your reply. But I mean is presentViewController not push, except use FXFormFieldAction.  \nBTW, FXForms is a awesome. Thanks again.\n\nAt 2016-04-26 16:09:07, \"Nick Lockwood\" notifications@github.com wrote:\n\nYou need to nest your form view controller inside a navigation controller in order to push another controller.\n\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly or view it on GitHub\n. Thanks for your reply. But I mean is presentViewController not push, except use FXFormFieldAction.  \nBTW, FXForms is a awesome. Thanks again.\n\nAt 2016-04-26 16:09:07, \"Nick Lockwood\" notifications@github.com wrote:\n\nYou need to nest your form view controller inside a navigation controller in order to push another controller.\n\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly or view it on GitHub\n. ",
    "chris-martin-tessella": "Set the string for the footer based on the value of the property - the form should **load** with the correct text for the selected option but won't yet update when you change the selection.  Next, in the FormViewController set a key-value observer on the property so that when the value (selected option) changes the form is 'reloaded' (you can use `self.formController.form = self.formController.form;` to cause the form to update).  Changing the option should now redraw the form with the appropriate footer text displayed.\n. Set the string for the footer based on the value of the property - the form should **load** with the correct text for the selected option but won't yet update when you change the selection.  Next, in the FormViewController set a key-value observer on the property so that when the value (selected option) changes the form is 'reloaded' (you can use `self.formController.form = self.formController.form;` to cause the form to update).  Changing the option should now redraw the form with the appropriate footer text displayed.\n. ",
    "stayallive": "This is almost a great solution except that it looks like the footer is not working correctly, see #455.\n. This is almost a great solution except that it looks like the footer is not working correctly, see #455.\n. ",
    "EarthMass": "It's not easy to solve, custom cell and any VC for Data exchange,like my VC have a initWithDate method,how can i to call it.\nIf you have some sugesstion,@me.\nVery happy to receive everything for everyone.\n. It's not easy to solve, custom cell and any VC for Data exchange,like my VC have a initWithDate method,how can i to call it.\nIf you have some sugesstion,@me.\nVery happy to receive everything for everyone.\n. ",
    "ChrislosChen": "the font for gender field\uff0ci found that this cell is kind of FXFormDefaultCell\uff0cand then you can config the cell in the - (NSArray *)fields method like this \uff1a\r\n@{FXFormFieldKey: @\"gender\", FXFormFieldOptions: @[@\"Male\", @\"Female\", @\"It's Complicated\"],\r\n               @\"detailTextLabel.font\": [UIFont systemFontOfSize:12]} . In this way you can change the font and color for the selected gender that is displayed\uff0c@Tim77277. the font for gender field\uff0ci found that this cell is kind of FXFormDefaultCell\uff0cand then you can config the cell in the - (NSArray *)fields method like this \uff1a\r\n@{FXFormFieldKey: @\"gender\", FXFormFieldOptions: @[@\"Male\", @\"Female\", @\"It's Complicated\"],\r\n               @\"detailTextLabel.font\": [UIFont systemFontOfSize:12]} . In this way you can change the font and color for the selected gender that is displayed\uff0c@Tim77277. "
}