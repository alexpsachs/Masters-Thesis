{
    "geeksam": "I have an implementation for (1) only; will submit pull request shortly.\n. Also: ponies.\n. Didn't even remember having any contributions in Prawn.  :+1:\n. I have an implementation for (1) only; will submit pull request shortly.\n. Also: ponies.\n. Didn't even remember having any contributions in Prawn.  :+1:\n. ",
    "practicingruby": "Merged your patch, thanks.\n. all except angle supported now.\n. Pulled in:\n\nhttp://github.com/sandal/prawn/commit/80b10bda08e51acef988cafd20123bc191feb2cf\n. MOVED: http://github.com/sandal/prawn-layout/issues/#issue/14\n. Change text :spacing to :leading, and pay some tech debt w. the way example boilerplate is handled.  (closed by 3f99ef7f2e438bc1103546a7a7a6d10459bb8cc6)\n. Yes, that would address at least some of these issues.  But then maybe prawn-fast-png would need a more general name... prawn-png-improved ? \n\nAnyway, that's a question for Wojtek, not me.   So feel free to contact him if you want to see if he's interested.\n. yeah, right on, a RMagick based Prawn PNG is a good workaround for our bottleneck, but should be done as an extension gem.\n\nLet us know when you have something.\n. no news.  I may get this in for 0.5, if not, definitely 0.6\n. It will be in when it's ready.  Please don't post vacuous comments. \n. Fixed\n. Done, thanks\n. Finally wrestled RubyGems to the ground (closed by 3edee0446667aa06af340ff7b0b6bebcfb81f5a1)\n. This is a prawn-layout issue (maybe), please re-file there.\n. Thanks! \n\n I think this issue may be related to the fact that tables cannot be used in a bounding box without a height, something I hope to fix eventually.   But even if it's not related, its worth knowing about.   I want to keep prawn-core independent of the table code though, which is why I asked you to move it over there.\n. This is in the wrong place.  Please file in prawn-layout's tracker.   I would accept a patch for this feature.\n. Pulled, thanks\n. We really need first order support for this...   its good that this hack works for you, but it isn't a real solution, unfortunately.   When I re-work the way pages are rendered, we can do this in a clean way.   It'll be in 1.0\n. move_cursor_to() allows for moving to a y position relative to the bottom boundary Closed by 56fba5ba666f15efc44544a9469f85bd3c4ddfdf\n. irrelevant at this point\n. yeah, that would be fine.\n. Merged, thanks.\n. Yeah, that looks like it might work, I'll give it a try.  Thanks!\n. But please note that I plan to kill off public access to text_options, so in the future, you'd probably do something like   table data,  :leading => ...\n. This should no longer be technically possible.  We should eventually support non-standard leading in table, via the :leading option.  Closing this for now. \n. The documentation on the website still refers to Prawn 0.4, as Prawn 0.5.0.1 is a pre-release.   In Prawn 0.5, the preferred method will be document.width_of  (though it it is correct that this just calls compute_width_of, you should use the former),  I'll make a note of that.\n. I agree, but it is unlikely that I'll have time to work on this soon.  I need to focus on stabilizing the existing codebase.   I would accept a non-invasive patch for this though, of course.\n. Forgot to close this before.\n. Remove Prawn::Document#text_options feature, as it has made me a very sad panda many times.  (closed by 9ce5b87673e8a5bc19c6f8330b3c19c952298d6a)\n. As the giant warning message upon installing Prawn 0.5.0.1 states, it's a pre-release.  Therefore the documentation is still based on the official stable release of Prawn (0.4)\n\nThere will be no general replacement, though I will add API calls for most of what people will need:\n\nThings like:  Document#wrap_mode= and Document#spacing=\n\nBut those will only spring into existence when I properly code up Prawn's low level functions to account for them.  Right now they don't, and that's why text_options is dangerous.\n. Incase you don't use the gems:\n\n\"  Welcome to Prawn, the best pure-Ruby PDF solution ever!\n  This is version 0.5 RC1\n\n  Please note that you have downloaded a pre-release candidate gem,\n  which has some bugs, ugly spots, other bad things in it.  This gem is also\n  not fully backwards compatible, and may break existing code.\n\n  If you wish to revert until a stable release is ready, uninstall prawn 0.5.0,\n  prawn-core 0.5.0, prawn-layout 0.2.0 and prawn-format 0.2.0\n\n  For details on what has changed, see:\n    http://prawn.majesticseacreature.com/notes/0.5\n\n  If you have questions, contact us at:\n    http://groups.google.com/group/prawn-ruby\n\n  To submit a patch or report a bug: \n    http://github.com/sandal/prawn\n\n  Prawn is meant for experienced Ruby hackers, so if you are new to Ruby, you\n  might want to wait until you've had some practice with the language before\n  expecting Prawn to work for you.  Things may change after 1.0, but for now\n  if you're not ready to read source code and patch bugs or missing features \n  yourself (with our help), Prawn might not be the right fit.\n\n  But if you know what you're getting yourself into, enjoy!\n\"\n. Yeah, sorry... I had merged in to stable branch early because I anticipated 0.5.1 to come much earlier.  Generally, if you track stable moving forward you won't be burned by pre-releases.\n\nFor now, lock to a 0.4 tag until you hear about an official 0.5.1 release if the turbulence is causing problems.\n\nFWIW, with regards to text_options() you should have a suitable replacement for all the functionality it offers by Prawn 0.6, no guarantees about 0.5 though.\n. This was fixed in Prawn 0.5\n. Done\n. Done\n. Closed, this won't be reverted, I don't think.\n. Patches welcome.  This isn't on the critical path but I'd be fine accepting a patch for it as long as it was reasonable.   This won't get done by me though, in the foreseeable future.\n. Great.  If you get something together in the next few weeks, this could make it into 0.6\n. Patches welcome.  Reopen if you come up with something.\n. this is a prawn-format issue.  please re-file there.\n. Closing, because it's not really possible (AFAIK) to make this faster in pure Ruby.  Feel free to re-open w. a patch. Or use prawn-fast-png if you can stomach the RMagick dependency.\n\nhttp://github.com/amberbit/prawn-fast-png/tree/master\n. I don't think we can make an assumption about newlines.\n\nThe documentation in Prawn already states:\n\n\"Text wrap in Prawn does not re-flow linebreaks, so if you want fully automated text wrapping, be sure to remove newlines before attempting to draw your string. \"\n\nI could clarify that a little more, but this basically means it's up to you to remove your newlines.   If font designers include a width for \\n, it's best for us to respect those intentions even if they don't make much sense.\n. pulled into stable and master\n. Ruby 1.8.7 is not supported at all for Prawn.  Officially supported Ruby versions are 1.8.6 and 1.9.1\n\nSince require \"enumerator\" is necessary for backwards compatibility with 1.8.6 and works in a normal environment, you should report this issue to exerb.\n. This is the wrong tracker.   Your changes are to prawn-layout, so this should have been in: http://github.com/sandal/prawn-layout/issues\n\nI will look at your fixes now though, so no need to re-file.\n. Pulled in these fixes.  I'll get out a Prawn 0.5.2 / prawn-layout 0.2.2 in the next couple days.\n\n-greg\n. This is the wrong tracker, please create a new ticket, with a reduced example that reproduces the problem, over in prawn-layout:\n\nhttp://github.com/sandal/prawn-layout/issues\n. @twalpole:  that's not what it is, since Prawn::Format does some heavy extensions to Prawn and doesn't use any of the original functions.   (Unless I missed something)\n. This is the wrong tracker, since it's a prawn-format issue.\n\nI've recreated the ticket here:\nhttp://github.com/sandal/prawn-format/issues/#issue/7\n. Oh, interesting point. I'll look into it.\n. Merged.\n. Definitely will accept a patch for this, but it needs to be on a fork with tests and examples\n. Yeah, good point.   Just write some nice examples, and make sure that the API gets tested, and that if we're moving the pointer, it goes to the right place.\n. Sweet, we'll pull this in for 0.8, then.\n. Merged, thank you.\n. We have no plans to change this behavior but the documentation will be updated.\n. Make it an error to use :at and :align at the same time.  Closed by 9e70d53ce9f1b3fe77a6f58b88de1306f7eead43\n. It could, but normalize_encoding is costly.  Prawn does it for you, but does not make assumptions when you are building low level constructs.  \n\nSo we won't be introducing this change.\n. Good catch, I'll get a fix in for this.\n. You're using an AFM font, so your text needs to be transcoded to WinAnsi (as the documentation for Font::AFM#compute_width_of indicates)\n\nnormalize_encoding() will do this for you.\n\nAlso, you should use Document#width_of() rather than Font#compute_width_of() as the former is the officially supported API for end users.  In either case, transcoding will be necessary here.\n. Also, if you need full UTF-8 support, consider using any TTF font that is Unicode aware and things should 'just work' so long as the text you pass into Prawn is encoded in UTF-8.\n. Patches are welcome for this feature but they need to be well tested and come with examples.\n. Please don't post prawn-format related examples here until prawn-format is maintained.  They are only relevant to Prawn <= 0.6.x\n. Thanks, will-fix.\n. Not a Prawn issue\n. Duplicate, non-issue\n. can we get this in git format-patch format so we can preserve your authorship information?\n(or on a fork)\n. Awesome.  We'll look into it soon, and let you know.\n. That works fine.  I'll try to merge this soon so you don't need to worry about complications with your master branch diverging.\n. I see where you're going with this, but I think it's fighting a symptom rather than the disease.  We need to find a unified API for keeping the y cursor from moving.  Expect to see something for that in a future release.  \n\nThere is also the semi-private mask(:y) { ... } if you need something immediately and are using the standard Prawn builds.\n. Oh, yeah, this is probably something we can fix.  We'll look into it soon.\n. I have confirmed that this issue exists and reduced the example down a bit farther.  Transaction will just 'not work' with TTF fonts, which is a pretty severe issue.  I'll get in touch with Brad and see if there is any easy way around this.  As soon as we have time to hunt down the issue and fix it, this certainly would merit a maintenance release and is probably a 0.7 blocker as well.  We don't want to shortchange our friends who need m17n.\n. This is  a confirmed defect.  We will fix it with an inherited hook, so as to only share extensions downstream.\n. Added an inherited hook so that extensions get properly copied into subclasses.  This should fix the issue with using Prawn::Format in document subclasses.  Closed by 6a1a166b93f7f9784d5bffb7a7e6c89d8e0e304f\n. Oh, great catch.  I thought that perhaps something with annotations was messed up, but had assumed it was an issue on my machine.  \n\n I will apply this, but if you can get it on a fork within the next day or so, that'd be great.   Note that this is our official patch policy, so that while we will often be willing to manually apply bug fix patches for obvious reasons, things move faster and are less likely to be deferred / rejected if you send them to us in the preferred format.\n. Applied, thanks.\n. Oh, at first I thought this was a bug report.  Yes, this would be nice.   Go ahead and code up a patch for it with some tests for it.   Or we'll eventually get to it before 1.0.\n\nThe reason width_of() works for inline styles is because it has to in order for other features to work.   But that doesn't mean it's not a good idea to make this work, too.\n. prawn-format has not ever been offically approved for use with tables.  If you use them both together, you run the risk of things acting very strange.   There are ways to get them behave, but they're hacks, really.   We will update the documentation in Prawn 0.7 to make this clearer.\n\nThis issue is about the interaction of prawn-layout and prawn-format, and definitely isn't anything to do with prawn-core, though.   In the future, file bugs about prawn-format there.\n. Agreed, with the added concern about GIF having some legal issues surrounding it that I'm not well versed in.  Closing, but will consider a patch if it comes up.\n. That's good news.  Then yeah, patches welcome but we have no plans to add this feature ourselves.\n. Hi, it's fine to track the request here, but let's leave the discussion for the mailing list.  Please re-post there for best results.\n. To review: http://github.com/jonsgreen/prawn/commit/80ebf028d616d7e499fee2c1684156d58e51389b\n\nSee also: http://groups.google.com/group/prawn-ruby/browse_thread/thread/f98f975744806423\n. done!\n. This is a feature we want to support, but I doubt it is as simple as String#reverse for many languages.   Patches are welcome, though.\n. I don't have the domain knowledge on this one.. .give it a try and see how it turns out.  We do not have formal support yet, but we still are very interested in this problem and would happily accept patches.\n. @eeabed: A writeup would be great, thanks.\n. This has come up several times before on the mailing list.   We don't want to support this feature as it confuses what it means to absolutely position text.\n. It was asked before and rejected before and will not be supported.\nUse text_box if you want at and align.\n. Can we hunt down a PDF library that does this right and look at how they're doing it?\n. Any next actions here?\n. Can you give me an example that runs standalone outside of rails with no additional external code needed?  If you have a particular font you're using, upload it somewhere so I can run your code.\n\nAlso, use a supported viewer before reporting bugs:\nhttp://wiki.github.com/sandal/prawn/supported-pdf-viewers\n\nNeither KGhost nor Acrobat 8 are supported.\n\nI closed the ticket because right now it's not possible to reproduce the issue given the information you've provided, but once you update it, feel free to re-open.\n. height and width are given in 1/72 in (default point size for PDF), your image size is going to depend on the DPI the image was saved at.   See the Prawn mailing list for extensive discussions on this.\n. Please read the discussions about this on the mailing list.  It's unrelated to your original issue and has come up many times before.    Also, in the future, please use an open zip format, such as .gz or .bz2\n. The issue sounds to be with your image, though.   Please move this discussion to the mailing list so someone can help you.   This isn't a bug until it can be reproduced in one of the supported viewers.\n. We are all volunteers here, keep that in mind.   You can take a few extra minutes to test in a supported viewer and then send us a package we can open without special software (such as a bz2 or gz), or you can post this to the mailing list so that someone can help you with your support request.\n\nWe welcome both kind of discussions, but the bug tracker is for bugs.\n. prawn-format no longer supported at all.  Read the release notes.\n. @eeabed:  please see and follow up on the ticket linked above.\n. We need to move this discussion over to prawn-layout's tracker.\n. Our tests use test/spec, not rspec.\n\nI have considered adding this sort of transactional support, but decided against it because we need a more generic API for this.   What we really need is something like.\n\n<pre>\n  save_styles \n  # ...\n  restore_styles\n</pre>\n\n(and a block form of the above)\n\nI think this would solve 90% of our use cases without having a ton of nested blocks.\n. No.  It'd be neat to see something like that built on top of Prawn, but it's nowhere on our roadmap.   Please only use this bug tracker for bugs and well scoped feature requests, use the mailing list for general discussion.\n. This implementation should do the trick, we might switch it to a hash on merge, and do some other cleanup, but this works.  Thanks.\n. Merged, thank you.\n. Reproducing on both stable and master, I have checked in your error case and will ping Brad about it.\n\nIn the future if you want to save us some time, follow the examples in bugs/ to check in error cases yourself, then just let us know where your fork is when you file a ticket.\n. This behavior was never defined.  So the fact that it worked before wasn't intentional, and so you couldn't rely on it, even if it happened to work for you.   (Remember... we're not at 1.0 yet, so we don't care about your customers, at all :)\n\nThat said, if we want to define this behavior, that's fine.   We can either make it raise a more intelligent error or make it equivalent to text \"\".   Give me a patch for either with specs and I'll pull it in.\n. But keep in mind that this would be an API change, so it will wait until 0.8 to be released.\n. I tried to add your patch, but it broke a lot of stuff.  Looks like these new refactorings rely on the new behavior.   Please bring up a thread on the Prawn mailing list if you want to make a case for this feature.  Daniel can discuss it with you there.   Closing for now.\n. Doing some issue tracker triage. @bradediger is this issue still relevant?\n. Still going to re-open for further investigation. Thanks for the extra context @bradediger!\n. \"My environment is: prawn 0.7.1 (gem) with prawn-format 0.2.3 (plugin).\"\n\nApparently you ignored the release notes.\nhttp://wiki.github.com/sandal/prawn/changelog\n\nDidn't the gem install tell you to read the above link?   Since it's common for people to miss it, I want to know if we could do anything better on our part to make it more visible.\n\nprawn/format no longer supported at all.\n. Prawn 0.6.3 is no longer supported, nor is the HTML markup prawn/format provided.\n. Prawnto should be updated to use our new color settings.\n. I wish folks were more careful about their patches :). Closed by a991ff604cc0ec7d3cd33286df6f22db1e1e963e\n. Should be all set, but your patch created several test failures and other subtle issues.  Did you run them before submitting?\n. I have already fixed this issues.  But there is no possible way that your tests ran properly, considering that you removed @y = ....\n\nAlso, running the example showed that things were skewed.  All set now though.\n. Confirmed and added your bug report to the bugs/ dir.  Investigating now.\n. As a temporary workaround, you can place your code inside a bounding box and it should work as expected:\n\n<pre>\n  bounding_box bounds.top_left, :width => bounds.width, :height => bounds.height do\n     #...\n  end\n</pre>\n\n\nThe issue lies in some margin_box / bounding_box interplay.\n. While your patch does provide a workaround for text-only use of indent, it does not solve the general problem.  We still need to figure out how to keep the margin box indented across a pagebreak.   Do some line drawings to see what I'm talking about.\n. @gregblass: I will merge a patch as soon as you fix it, or when we get around to it.   We are not a vendor.\n. The code here looks fine.  I want to make sure this is of general interest before merging, so I've posted to the Prawn mailing list.  If at least a few people tell me they'd use it, I'll merge.\n. I had polled the mailing list and didn't get many responses indicating a sufficient level of interest in this feature.  I'll close the ticket for now, but if this gets requested in the future, we'll consider pulling it in.\n. @Spiralis: Your sense of entitlement is shocking. This is an open-source project's tracker, not a paid customer support line. Don't be a dick.\n. @krainboltgreene, I removed your comment because it was irrelevant to the issue, and I'm not particularly interested in your opinion on how I use the English language. If you feel it's important to preserve your message for the record, go ahead and repost it, but I did not find it helpful.\n. Many folks have pointed out that whether or not I felt @Spiralis's comment was rude, it does not help to act rudely in response. Those folks are right, and I apologize for what I said. Speaking more calmly, the thing I wanted to express is that there isn't a good reason to express disbelief over a patch not getting merged that I can think of, especially one that didn't have popular support.\n\nThat said, I'm no longer an active maintainer on this project, and it looks like the original patch is stale. If this feature is useful to some folks, they should consider opening a new ticket with a new patch, as this is from over a year ago. The current maintainers could then weigh in on the merits of the feature.\n\nSorry once again for my actions, this is the sort of attitude that caused Prawn's community relations to go south a long time ago, and there's no good reason why we should go back to those dark days.\n. @Spiralis\n\nI did indeed assume the worst. My apologies. This project has a difficult past, and its present is much better than what this single outburst of mine would make it seem. Still, the reason why the feature wasn't added is because no one had an immediate need for it, and every feature means 1) an extra behavior to commit to. 2) extra tests, 3) extra documentation and 4) extra places for things to go wrong.\n\nPrawn has been downloaded something like 150,000 times. If this were as severe of an omission on our part as you make it seem, it would have come up again. But even if that's true, it doesn't mean that I had an excuse to be rude to you just because I assumed you were intending to be rude to us. I should have clarified, without a doubt.\n\nIf this feature still matters to you, consider putting together a fresh pull request, but you may want to ask @bradediger if it's something we'd be open to adding first.\n. @bradediger I wonder if we should bug github to remove whoever is squatting github.com/prawn, and then we'd have github.com/prawn/prawn, github.com/prawn/ttfunk etc. If we were to make that change, good to do it before 1.0\n. @Spiralis: Many folks scale the image outside of Prawn, however, I used to talk about adding some DPI aware scaling features in the past, but can't remember at all what I was talking about.\n. @bradediger, that's a good point.\n. \"Issues\" does not mean issues with your code.  You are not discussing a bug in Prawn, you are asking for support.  What's more, you're asking about tables, which are part of prawn-layout, not prawn-core, so this would be the wrong tracker.  Use the mailing list instead.\n. Not a bug.  Intentional behavior change by Daniel.  See:\nhttp://groups.google.com/group/prawn-ruby/browse_thread/thread/836c1349ec76c720\n. Use non-breaking space: http://en.wikipedia.org/wiki/Non-breaking_space\n. I can confirm this.  For now, the workaround is to use a TTF font with the glyphs you need.\n. While you can't do image(\"foo.pdf\"), you can do both vector import of PDF files and also use a PDF as a template via the code below.  Templates will be merged into a later prawn version.\n\nhttp://github.com/yob/prawn/tree/templates_2010\nhttp://github.com/Bluejade/PrawnVectorImport\n. Resolved in: 2a5a5f\n. Please provide a failing test case.\n. Confirmed.  I will ping Jonathan.\n. We have not yet investigated it.  I wanted to give you a chance to look it over and see if you found any obvious issues.  See if you can get us a failing test and one of us will look into it.\n\nWeird about google groups, not seeing any issues on this end.  Try again later?\n. Hi Jonathan,\n\nAttempted to merge your fix, and ran into two issues. \n\n1) It appears like this was not tested on Ruby 1.9, where we're getting some encoding issues.  I tried to see if there was a quick fix but didn't come across one.\n\n2) I think you have two competing before(:each) blocks in the main test body, and it seems like they only work by coincidence.  Since the only test that relies on the before(:each) you added is the one related to this feature, you can either inline the code into your test case or wrap your tests in a describe block.\n\nOnce we get these two issues taken care of, I can merge this.  I'll look into it if someone else doesn't get to it first, but if you're interested in fixing it, let me know when you have an updated patch.\n. Merged.   Thanks a lot Jonathan.\n. There may have been a regression,  can you build from the stable branch and see if it fixes the problem?\n\n-greg\n. Check to make sure your versions match on your production machine.  Then try the latest stable branch code here on github, then try a different font.   If you still end up with a failure, provide us with a font we can download and test with.\n. Is Outline#insert_section_after() not what you're looking for?\n. Sounds like a reasonable feature.  Please provide a patch with specs and examples.\n\nBut maybe we'll use add_subsection_to('Section') {} to clarify the intention of the feature.\n. repeat() works in a similar way that Prawn::Document.generate() does.  If you provide it with a block argument, it acts as an ordinary closure, allowing you to access the external code.   Otherwise, it instance_evals your block.  See the source at:\n\nhttp://github.com/sandal/prawn/blob/master/lib/prawn/repeater.rb#L122\n\nFor right now, you can make your code work by doing this:\n\n<pre>\n    pdf.repeat(:all, :dynamic => @dynamic) do |doc|\n      doc.text @title[:long], :size => 10\n      doc.move_up(doc.font.height_at(10))\n      doc.text \"Page #{doc.page_number} of #{doc.page_count}\", :align => :right, :size  => 10\n   end\n</pre>\n\n\nBut this API isn't great, as it is redundant with the DSL type semantics that generate() offers.  We should remove the block argument option and make it always work as an ordinary closure.  Then it would work as you expected it to.  \n\nI'll patch this for 0.10\n. Now that I look at this, because repeaters are their own objects, it's a little bit ugly to change the behavior.  Also, until the ordering of when repeaters are run changes, this will have strange results, since it will only repeat whatever the _last_ value of that instance variable is, across all pages.\n\nThe current API discourages from making that accident, somewhat.   It is a bit of a mess, but I'm putting this ticket on hold until I can properly think things through.\n. We do not need \"me toos\" on the issue tracker.  If there is a response from a core developer, the issue is being tracked.  We do not weight ticket importance by anything except for the severity of the issue in regards to our own work.  We do of course, accept patches from those who have an urgent need and fix the problem themselves :)\n. I confirmed this at the head of master, but cannot reproduce at the 0.9.1 tag.  Can you check that out and let me know?  If that's the case, it's likely that the templating code we merged caused this issue.\n. alright, I'll deal with this soon, then.  Thanks for reporting it.\n. Page layout issue fixed. [Closed by f0dd7718f8ed0abb836f723ced468667d3cd816b]\n. Man, commit 717931 from the templates code took me for a ride.   But I think this should fix it.  We can clean up the code a bit later.  @drKreso, @m-ryan: please confirm.\n. I am pretty sure this is fixed in prawn 0.9.1, as I think it was just an issue with ttfunk not being updated to its latest revision.  Please try this from the 0.9.1 tag and if your issue is fixed there, I'll mirror the changes over to 0-8-stable and cut a 0.8.5 release.\n. I looked, and I think I was wrong about ttfunk handling this.  @yob, do you have time to investigate and patch?  (Either in Prawn or ttfunk, latter slightly preferable)\n. @JamesHarrison  -- Have you had a chance to test the patch that @yob merged?\n. Cannot reproduce, even on Prawn 0.8.4 with this font:\nhttp://www.cbrd.co.uk/media/fonts/transportheavy.zip\n\nIf that is not the font that should be used, please include a link to the one that causes the error if you are still seeing this issue on edge.\n\nClosing the ticket for now, you can of course reopen if you still reproduce from master.\n. @yob: I investigated this a bit.  Presently, Prawn will generate the font identifiers by taking @document.font_registry.size + 1.  There are two ways I can see resolving this.  \n\nOne (preferable) would be for the template code to create actual font objects and insert them into the registry, so that they don't get re-embedded if the user happens to use the same font as one in the template file.  But that could be complicated and may require changes to the font code.\n\nA simple dirty hack would be to count the number of fonts used in the template, and then simply use that as an offset on Prawn's font registry.\n\nSo, we'd transition it to:\n\n@document.font_registry.size + offset\n\nwhere offset = total_number_of_fonts_in_template + 1\n\nIf you can show me how to get to that number using PDF::Reader, I can build in the change.  (Or if it's easier, just go ahead and patch it)\n. @toreriklinnerud:  Fix it or shut up and don't use it then.  Don't waste space in our issue tracker expressing angst.  It does no good.\n. @john-griffin:  Have you run the same code side by side in 1.8.7 and 1.9.1?  If you don't mind, I'd like to see an example that breaks on one and not the other.  If my hypothesis is right here, this defect should be present regardless of Ruby version.  If it's not, it'll help me rethink how to approach it.\n. @john-griffin: It's surprising to me, but it might have something to do with fonts being registered in a different order based on hash ordering between Ruby 1.8 and 1.9.   But I need to dig back into this code.\n\nAnyway, I will try to make sure this is resolved before our next snapshot.\n\n-greg\n. Fix margin issue for templates [Closed by 92110ae6aaaccf02c8967de0e3b3c0c4a8947a7d]\n. The workaround is to find a font that has all the glyphs you need :-/.  Please consider patching.\n. Inline format is now enabled in master, as are almost all text options.\n. This patch looks fine, and makes no difference on our end.  Good to be more compatible with other tools.\n\n@costan, don't bother voting on tickets or asking others to vote.  All tickets are reviewed, and we don't give preferential treatment (in one way or another) due to the popularity of issues.  Prawn is nothing close to democracy :)\n. I have merged this patch into stable and master, after a tiny bit of cleanup.  @yob: Feel free to reopen if you find faults.\n. Don't render to a file twice.\n. Just kidding, we'll look into it.\n. Cannot reproduce in Acrobat Reader.  Please provide a minimal example that reproduces the problem in Acrobat Reader or OS X Preview that I can run.   Closing ticket for now, please re-open if you find one.\n. You still have not given us something we can test.  Show us some code that runs and fails to render properly in Acrobat Reader or OS X Preview (there is Acrobat Reader for Linux), as these are the only two viewers we officially support.\n. And you still have not given us two PDFs so we can see what the difference is.\n. This was resolved a long time ago.  Please only report issues in 0.8.x or in the released development snapshots (currently 0.9, soon to be 0.10). We do not support older versions at all, and since Prawn's code changes quickly, it isn't that helpful to know about bugs in very old versions.\n. Good point, we should have a document.default_leading option.\n. Can't this already be done using a Proc?  See the examples.\n. Don't use an instance variable.\n. A local variable.  You know, the thing a closure closes over? :)\n. But nevermind, I'm pretty sure that given the current way that repeaters are implemented, this code will be executed too late, only after you deleted your section.\n\nI need to think of a better way to implement repeaters to give you this sort of control.   Closing this issue for now, please re-open it after I do some refactorings if it still doesn't do what you need.\n. While I may go with vendoring pdf/reader by 1.0, we haven't decided on that yet.  For now, please submit a documentation patch by forking and then leaving a comment here with a link to your commit\n. Ah, this had come up before but I was unable to reproduce.  That sounds likely.  We are changing a lot of Prawn's internal structure, so this issue may go away entirely, but I may roll a fix for this if we don't make it redundant soon enough.\n. Looks like so.  Not reproducing here. Closing ticket for now, will reopen if you can find someone else with the issue.  You may want to try again, and then post to the Prawn mailing list.\n. It isn't clear from this issue what you're looking for, please post to the mailing list with examples before and after your change, and what you're looking to accomplish.   The bug tracker is not a good place for conversation.\n. This was intentional.  Wait for 1.0 for full featured positioning, or build something low level with bounding_box and table.\n. Definitely not true.  Chances are you are not using a font with the right glyphs, or you are not encoding your text as UTF-8.   Read the examples to see Chinese examples :)\n. http://github.com/sandal/prawn/blob/master/examples/m17n/chinese_text_wrapping.rb\n. I'm sorry, I don't think you're providing enough information, and the bug tracker is not the right place for conversation.  What you are experiencing is not a defect in Prawn.  Discuss on the mailing list if you'd like.\n. I'm not sure what the best solution is here.   Personally, I feel like text(\"      \") using ordinary spaces is bad input, since they would be collapsed down anyway.\n\nWhat is your use case for having blank strings in text() calls or table cells?   Is there a reason why they're not being stripped before you call out to Prawn?\n. I agree there are some consistency issues with \"\" vs \" \", but there is a reason why \"\" is acceptable, it's a truly \"empty\" string, and what nil.to_s returns.  That makes it a much more common case.\n\nI know people get used to calling blank? in Rails as a catch-all, but I feel like Prawn lives in a space that is more general than Rails and needs to be more careful about data integrity.\n\nAt the very least, we should consider a much better error message.   I am not ruling out the idea of applying your patch, but I absolutely hate when Rails fails silently about errors it could have helped me find, and I don't really want to play fast and loose like that.\n\nI'll think on this, and we'll try to find a solution that doesn't put a lot of strain on users but preserves the sort of integrity we want.   It may be as simple as applying your patch when Prawn.debug =  false (the default), but raising an error or printing a warning when Prawn.debug = true\n. I don't have a good answer to what users should be expected to know here.  I agree it's ugly to have to write all that code to guard against it, but it's also significantly more robust and predictable.  The web plays fast and loose, but high data volume reporting doesn't, and that's why I need to consider more than just these basic cases.\n\nI'm thinking letting the error (or warning at least) rest on the debug flag might be a good compromise.  Users can write things like your last line, but will have a means to hunt them down if they flip the debug switch.\n. text(\"\") and cell(:content => \"\") are okay presently.\ntext(\" \") and cell(:content => \" \") are not.\n\nThey work the same way, and this is because any special cases in Prawn happen at the higher level.  All text is ultimately rendered either through TextBox or is directly ferried to the draw_text primitive.\n. blank? is not a Ruby method, it's something from activesupport, and I think that is part of the reason why this issue is confusing to new users.   Rails treats nil, \"\", \"    \" equally in a lot of places.  Not so in most of Ruby, especially in those places where precision is actually important.\n\nThat said, the equivalent semantics are indeed what we need to raise an appropriate error.  At the very least, that is what will happen as a result of this discussion.   I know what issues I need to consider here, and we'll put together something better than the present behavior for 1.0\n. Yes, we should add this as well.   Now please let this be the molehill that this is and go on with your day :)\n. Please start using the mailing list for things that require discussion.\n. The error trace doesn't help us here, unfortunately.  Please give us a runnable example that works outside of Rails.\n. Hi,\n\ndid you build a gem from master?  Or did you actually use this before 0.10 was released?   I just noticed we haven't updated the gem version on master.\n\nIf you are using an old build from before the 0.10.2 release, try the 0.10.2 release.   If you built from master recently, let me know, and I'll investigate.\n. We will investigate this issue soon, thanks for reporting it.\n. What version of Prawn are you using?  If you are using Prawn 0.8 or earlier and trying to do inline styling or cell based styling, this has never really worked properly.\n\nPlease build 0.10.2 from git, update your code to use the new table API, and let me know if you can reproduce the problem then.\n. Try it and find out.  I am almost positive that our code is now based on TextBox, which gets the calculations correctly.  If you can reproduce your problem, provide us with an example that we can run which demonstrates it.\n. Also, keep in mind that table has been merged into this repository, it is no longer in prawn-layout.   You may have been looking at the wrong code because the method you mentioned no longer exists.\n. Good call.  Can you send me a doc patch?\n. When wrapping text, Prawn reflows and compresses spaces, much like HTML would.   You can use Unicode non-breaking space characters.\n\nIn the future, please use the mailing list for questions, the bug tracker is for confirmed bugs.\n. It's possible to get the height of a cell now before rendering a table, but there should be some defined behavior for when a row exceeds the size of the page. Re-opening for further investigation / research, although it will be a very long time before I can look into this problem myself.\n. I am closing all issues for Prawn::Table, because it is being extracted into its own gem with its own repository (https://github.com/prawnpdf/prawn-table).\n\nAs I close tickets, I'm marking them with a \"table\" tag, so that @hbrandl can easily find them and optionally move them over to the prawn-table issue tracker. Anything that has the table tag can be assumed to have been unresolved at the time I closed it.\n. Unfortunately, that's not an easy thing to do.  We'd need to contact over 100 contributors to get permission from them to do this.  \n\nBut we are soon going to clarify that Prawn may be used under GPLv2, GPLv3 or Matz's terms.  This will eliminate the GPLv3 compatibility ambiguity without constituting a licensing change.\n. @huerlisi: Thanks, but we're not going to go hunt people down, it's too much work.  We're happy with our licensing as it is, we just don't want to break GPLv3 compatibility.\n. @derek-watson I'm not sure why this issue was closed in the first place, but we can definitely re-open if the issue is still present.\n\nBecause 1.0.0.rc2 is a fairly old release, I'd want to be sure we can reproduce this either in the latest release (0.14.0), or even better, on master. Please confirm that, and I'll re-open. \n\nIf you want to move things along even further, you can try preparing a pull request with the fix and a test. A commit from 3 years ago _might_ merge cleanly, but it's just as likely that it'll need to be changed somewhat if the underlying code has changed.\n\nRight now there are many open issues in Prawn, and I'm currently the only active maintainer. The more you can do to help me prep this fix for release, the sooner it will get taken care of.\n\nThanks! \n. @derek-watson Seems you're already working on a fix! Didn't see that until after I commented. Looking forward to seeing a pull request, then :smile:\n. Updating this ticket with a fresh example and screenshot of current behavior on master:\n\n``` ruby\nrequire_relative \"lib/prawn\"\n\nPrawn::Document.generate('vertical_align.pdf') do\n  text_box \"The rain in spain falls mainly in the plains.\", \n    :at => [100,450], :width => 100, :height => 100, :size => 16\n\n  stroke_rectangle [100, 450], 100, 100\n\n  text_box \"The rain in spain falls mainly in the plains.\", \n    :at => [250,450], :width => 100, :height => 100, \n    :valign => :center, :size => 16\n\n  stroke_rectangle [250, 450], 100, 100\n\n  text_box \"The rain in spain falls mainly in the plains.\", \n    :at => [400,450], :width => 100, :height => 100, \n    :valign => :bottom, :size => 16\n\n  stroke_rectangle [400, 450], 100, 100\nend\n```\n\nProduces:\n\n![](http://i.imgur.com/HIu78oa.png)\n\nI think we can agree that the top align looks correct. It's the centering and bottom align that has some complications to it.\n\n**For center valign**: it looks like we're currently making the gap between the top and the ascender equal to the gap between the bottom and the descender. Looking at how some other software does it, it looks like what we should be doing is keeping the gap between ascender and the top of the box equal to that of the baseline and the bottom of the box. \n\n_I propose that we go ahead and change the behavior to compute the bottom gap based on the baseline_\n\n**For bottom valign:**, it looks like we're including the line gap. Looking for examples elsewhere, some things I found do this, while others do not. Prawn's text box actually has an option for choosing what behavior you want for this (`:final_gap`), but it does not appear to operate on alignment, only the final cursor position.\n\n_I propose we keep behavior as-is when `:final_gap` is set to true (the default), but remove the gap when `:final_gap` is set to false and vertical align is set to bottom._\n\nWill these changes make everyone happy? If not, let me know where the problems are.\n\n/cc @bradediger, who hopefully knows more about this stuff than I do.\n. It occurs to me that for the sake of completeness, we may want to also add an `:initial_gap` option which would insert a bit of line gap in the top-aligned example. Unsure if it should be off or on by default.\n. Anyone else with experience on this topic is welcome to chime in. Otherwise, I will plan to either work on a patch that does what is mentioned above myself, or accept one from anyone who wants to put in the work!\n. @Bluejade your thoughts are also welcome of course... it's just been tough to get in touch with you :frowning:\n. @jessedoyle A pull request would be welcome, thanks!\n. @jessedoyle: Thanks. I think we still need `:initial_gap` though, which would put a bit of space between the top of the box and the text (equal to the `line_gap`). When set to false, the gap would be suppressed.\n\nThe default for `:initial_gap` should be set to match the existing behavior, so as to not break backwards compatibility.\n. It'd apply to both `:top` and `:center`, for sure.\n\n I'm trying to think through how `:bottom` should work. If you align to the bottom and shrink to fit, on overflow the initial line gap should probably be preserved if `:initial_gap` is set to true. So it seems like it applies to all of the cases.\n. @jessedoyle: Think of the initial gap and final gap as simply being a top and bottom margin, and then we're trying to vertically align the whole box.\n\nThe edge case with bottom alignment I'm worried about is this one:\n![](http://i.imgur.com/LDRsHAU.png) \n\nIf we ignore `:initial_gap` in bottom alignment, we can end up in situations where the top line of text touches the top line of the box, which is identical to what would happen if we ignored `:final_gap` in top alignment.\n\nSo when `:initial_gap` is set to true, we need to include it in the height calculations, so that it triggers an overflow and shrinks the text.\n. I'm wondering if we need to think a little more on all of this. I'm having trouble thinking of when you would want to set `:initial_gap` independent of `:final_gap`. If we're only supporting booleans, it seems like you'll want them both on or both off.\n\nBut if we were to offer finer grained control, we might want to implement something like `:padding_top` and `:padding_bottom` instead, which could be given arbitrary values. The default for both would be `font.line_gap`, but setting them to zero would completely suppress the gap. But this opens the door for having uneven spacing on the top and bottom of a block of text, which might be desirable.\n\nWhat do you think?\n. @jessedoyle: Thanks for the work you've done on this so far, it's a huge help.\n\nThe notion that we include a line gap at the bottom of the text box by default but not at the top is almost certainly a historical accident, and so I'm willing to consider this to be a bug, because it's never going to be desirable behavior.\n\nWith that in mind, I think we should figure out what the correct behavior is:\n1. If we include any whitespace at all within text boxes, we should give full control over it. That is to say we probably need to implement all the different padding options (`left`, `right`, `top`, and `bottom`). This is a complicated change, but it can get fairly close to being backwards compatible by setting those values to `0` by default.\n2. The other option I think is viable is to say that text box should be modified to drop all padding entirely, which would lead it up to the user to take care of adding whitespace above and below the box themselves.\n\nI'm in favor of the first approach (supporting all forms of padding) because it's going to be the most natural user experience. Unfortunately, it's also the most complex, and it may mean that I'd need to write this patch myself unless you're up for doing a lot of rework.\n\nThe original suggestions I made about tweaking `:final_gap` behavior were to preserve 100% backwards compatibility, but on closer inspection the default behavior I was trying to preserve is basically broken. So rather than working around the problem, I think we should fix it.\n. @jessedoyle It seems like the work you've done gets us close to option 2. Since it's going to be a pre-requisite for implementing option 1 anyway, maybe you can revise your pull request to simply act as if `:final_gap` is always set to false, then work to remove the option and see what breaks?\n. As far as I know this is still unresolved. Re-opening for further investigation / commentary. Please note that it may be a very long time before I look into this one myself, but a patch or extra research is welcome!\n. I am closing all issues for Prawn::Table, because it is being extracted into its own gem with its own repository (https://github.com/prawnpdf/prawn-table).\n\nAs I close tickets, I'm marking them with a \"table\" tag, so that @hbrandl can easily find them and optionally move them over to the prawn-table issue tracker. Anything that has the table tag can be assumed to have been unresolved at the time I closed it.\n. @yob: I added you as a collaborator.\n. This is a neat idea, but I'm hesitant to try merging a three year old patch thats semi-complex before 1.0, and would prefer if we started fresh with this idea after 1.0.\n\nVery sorry that we never gave a proper response -- the project has been badly understaffed for quite some time now.\n. @packetmonkey: This looks like the kinds of changes you are interested in seeing in Prawn. If you're interested in picking this pull request back up and giving it a closer review, we can reopen.\n. @maedhr: Thanks for the explanation. I've re-opened this to remind me to give it a little bit more thought and a closer review when I get time for it, even if it means rethinking the implementation. \n\n@packetmonkey, you're also welcome to chime in w. ideas if you have any.\n. @maedhr: What do you think of the idea of allowing tables to render arbitrary cell-like objects, as long as they implement a certain protocol?\n\nThat would have enabled you to wrap your booleans in something like a `CheckboxCell` class, and then Prawn's table code would query that for size information and call render() on it, or something like that.\n. There doesn't appear to be a huge demand to move this forward. Although I think it's a good idea, I'm going to close it out until someone volunteers to push it along. My own backlog is too full right now.\n. @piglop: This project is NOT unmaintained. Please work with the core team rather than releasing experimental gems of your own. Bundler solves that problem anyway.\n. @piglop: Please be patient. The team is working on it.\n. If anything, maybe a 1.1 feature? I'd be sad to see integrating new code block the 1.0 release. Ambivalent about whether it ends up in prawn-forms or in core, but I don't think we should bring new slices of functionality into 1.0 at this point.\n. Closing this pull request because it has gone stale. Those looking for this feature can try out @moessimple's solution, though.\n. Done. Feel free to change as you see fit.\n. I don't know what the status is on this bug, but I'm re-opening so that hopefully someone will investigate and try to reproduce on 1.0.0.\n. @stefanneculai: can you try this fix and see if it solves the problem? #743\n. #743 has been merged. Thanks all, and sorry for the long delay.\n. Prawn does not ship with a setup.rb file for a reason, and that reason is that it is distributed as a Ruby gem. Rubygems is the preferred distribution method for absolutely all Ruby software at this point, and is part of the Ruby 1.9 standard library. Installing Prawn by running `gem install prawn` will set up ttfunk for you.\n\nThe message you are seeing is something only developers will see, not users. If you've been routinely installing things via setup.rb that may be the source of lots of future problems for you. Please don't use PDF::Writer, I am its maintainer and I can tell you that this small hiccup you had in setup is tiny by comparison to the frustration you'll have with the completely unsupported and poorly designed PDF::Writer. Also, FPDF is similarly ancient.\n. Sorry for the insanely long response time. We're openly considering new extension points, so if you want to try to put together a pull request for exposing any extension points you are interested in, I'd be happy to see what you come up with!\n. @nathansamson: I'll take a closer look at this today and let you know.\n. @nathansamson Based on the mailing list conversation (particularly the discussion of repeaters towards the end), I think the bug you saw is based on same issue as what is described here.\n\nI don't think I'm going to be able to personally investigate a fix for this very soon, but please do look into it yourself if you're interested in helping out!\n. @bradediger: How terrible of a solution would it be to deep copy the entire page array? Is performance the main implication?\n. Anyone want to volunteer to look into a deep-copy based solution to this issue?\n\n/cc @irongaze, @skandragon, @nathansamson \n. @nathansamson Sounds like an approach worth investigating. Let me know if you can get a green build by doing a selective deep copying, and if so, open a pull request!\n. It would appear that this issue causes all sorts of different problems, so it's probably one of the highest priority bugs to fix. Anyone have time to investigate further?\n. Thanks for taking a closer look. I'll take a closer look at problem when I return from winter break in a few days. Anyone else who wants to give it a shot between now and then is welcome to do so!\n. @cheba: You still thinking about investigating this one? If not I'll try to fit it into my backlog, which already has a few things on it. :frowning: \n. OK. I'll leave it on my own TODO pile for now then, but anyone is welcome to take a shot at it! \n. This is still one of the biggest outstanding bugs we have, and I'd love to see a fix before 1.0. I will comment here if and when I start working on it, but anyone else want to look into it sooner?\n. Closing as no longer relevant, since we've dropped transaction support.\n. Re-opening because the problem does appear to exist. Unsure when I'll find time to investigate, though.\n\nResearch from others is welcome!\n. Sorry for the loooong delay.@alexandergitter or anyone else who has experienced this problem, can you please confirm the fix in #794?\n. @alexandergitter Thanks! I'll try to get #794 merged soon, then.\n. I will do this, assign the ticket to me once 1.0.rc1 drops.\n. Yes, I will try to write this on Sunday.\n. Closing this issue out, will continue discussion on #563 when I have a chance to give it a proper review.\n. This is a neat idea, but I feel like the right solution is for us to come up with a unified API for positioning box-like content, rather than adding new special cases to each component.\n\nSorry we never responded to you about this, the project died down for a while. The good news is that we're now active again, so your contributions would be welcome!\n. I don't think we have support for this now, but a patch would be welcome.  Sorry we never responded to this request.\n. The implementation of group was fundamental unstable and has been removed from Prawn. Sorry about this, we may re-implement group in the future.\n\nUntil then, you can try your luck with https://github.com/ddengler/prawn-grouping -- it does not rely on transactions, so it should prevent document corruption.\n. @AndrewSwerlick There is an effort going on at https://github.com/prawnpdf/prawn-templates to get templates working again as an extension. Please post this over there, and @bvogel will check it out.\n. I think @bvogel can help decide that too. I had removed some (but not all) template-specific functionality from PDF::Core in a somewhat sloppy fashion, and so there may be more that needs to be extracted.\n. Thanks for working on this @fidothe.\n\n I think that the first step is definitely to make sure our current version of the software is clean, then we can worry about older versions later. I feel like thinking through the implications of removing those files is every bit as complicated as wondering whether this might ever lead to legal trouble for us.\n\nOne thing that might work, although I'm not sure it will, is to rewrite history to replace the fonts with alternatives, just using the same filename.  So go back to wherever those files were added and rewrite the commit to use a legal alternative. Do you want to give that a try? (People who know more about Git than me, please comment if that's evil)\n\nAs for the bug you may have found in TTFunk, it's definitely possible and unfortunately TTFunk is very poorly tested. I'm not sure how much I'll be able to help with that in the near term, but hopefully you'll get to the bottom of it.\n. @fidothe Thanks. You should have commit access on TTFunk, so feel free to push branches directly rather than forking.\n\nAlso, any careful approach to rewriting history would be OK by me -- I just want to avoid breaking old release tags and things like that. Since we never supported or encouraged people to use these fonts in their own projects, even a coarse way of removing might not have much real negative impact.\n. Okay, so let's avoid rewriting history then. Once this is fixed in master, I will include some release notes saying that years ago we checked in some font files for testing and for our manual without thinking about licensing issues, and that we should not have done that, and that in the future we will make sure to pay attention to font licensing.\n. <shrugs> I'm less concerned about drawing attention from the wrong people than I am with programmers accidentally using unlicensed fonts because they thought we shipped them for use. But with that in mind, I think a line in the release notes like \"replaced all non-free bundled fonts with free alternatives\" would be sufficient.\n. Then again... people probably should be sued for using Comic Sans... but for poor taste. :grimacing: \n. @fidothe: Where are you at with this? I'd be happy to accept an incremental pull request that addresses some of these issues even if it doesn't hit them all.\n. I've removed all non-free fonts from Prawn and its dependencies, added \"THIS IS FREE SOFTWARE\" notices whenever missing in Prawn's source files, and added a placeholder message to images folder saying \"We believe all these images are compatible with Prawn's licensing, but please file an issue if you have a problem\".\n\nTechnically speaking, there is more we could do to make Prawn's licensing compatibility / compliance even better, but much of what remains to be done is just boilerplate, not issues of actual incompatibility or violations. Patches are welcome wherever there's a loose end to be tucked in, but for now I'm going to close this issue and say we're ready for 1.0 as far as licensing is concerned! \n. stroke_axis is a tool used by the manual only that is in [manual/example_helpers.rb](https://github.com/sandal/prawn/blob/master/manual/example_helper.rb#L223-244), it is not a part of Prawn. Though, because it feels like it's useful and this is a common complaint, perhaps it should be.\n. Hi @mojavelinux,\n\nSorry that this isn't fixed. Unfortunately we're dropping support for templates because we don't have anyone with the experience and time necessary to maintain them.\n\nThis was mentioned in the 0.13 release notes and is also now mentioned in the manual, but the code will be at least disabled in time for the 0.14 release, and removed by 0.15. If I have time to do it, I'll extract the code into an (unsupported) gem extension that hopefully someone will be willing to maintain or improve in time, but for now we need to focus on Prawn as a whole and have very limited time to do so.\n. @mojavelinux There is a [long conversation on the mailing list](https://groups.google.com/forum/#!searchin/prawn-ruby/dropping$20support$20for$20templates/prawn-ruby/S6gXA-i0-do/fe98QFnhXw0J) about this, and although the only thing that might be broken in templates for your use case is compression, other user are having many more issues with them. See the full list here (even though they are closed, they are unresolved):\n\nhttps://github.com/prawnpdf/prawn/issues?direction=desc&labels=templates&page=1&sort=updated&state=closed\n\nI asked for help with addressing those issues in late November, but not one of them has been fixed yet, even though some research effort was put in.\n\nThe good news is that for your particular case, you can probably use the `pdftk` command line tool to join PDFs together. Some examples are here: http://www.pdflabs.com/docs/pdftk-cli-examples/\n\nAlso worth considering is adding this sort of read-only template behavior to Prawn... it's not what everyone wants, but at least a decent number of users will have a similar use case to your own. \n\n@cheba, @yob -- how realistic would it be to add read-only page merging to Prawn, and would it allow us to maintain a high level of stability, or would it still be brittle?\n. Closing this pull request because it has gone stale, but please feel free to re-open if you resolve merge conflicts and address the points @yob mentions above.\n. Re-opening as the issue still exists on 1.0.0. Sorry for the very long delay in response.\n. I am closing all issues for Prawn::Table, because it is being extracted into its own gem with its own repository (https://github.com/prawnpdf/prawn-table).\n\nAs I close tickets, I'm marking them with a \"table\" tag, so that @hbrandl can easily find them and optionally move them over to the prawn-table issue tracker. Anything that has the table tag can be assumed to have been unresolved at the time I closed it.\n. Here's a minimal example to reproduce the problem:\n\n``` ruby\nPrawn::Document.generate(\"corrupted_dests.pdf\") do\n  formatted_text_box([{ :text => \"Google\",\n                       :link => \"http://google.com\" }])\n\n  encrypt_document\nend\n```\n\n@rossdakin: Sorry we took so long to respond. Looking into @cheba's fix now.\n. Merged!\n. @goldfishgrenade: Can you give an example that reproduces the problem?\n. @goldfishgrenade: I opened #683 and added your example there. Feel free to investigate further and even submit a pull request, otherwise I'll get to this whenever I get a chance. \n\nI should be able to do a quick review by Wednesday, but if it's not an easy fix it may be a long time before I get to it. We're fast about merging fixes though! :grin:\n. @goldfishgrenade: Also, your environment looks fine. Ruby 1.9.3 is officially supported, and Prawn 0.15.0 is our latest stable release. I was able to reproduce in OS X Preview, which is a viewer we support. So it's a real bug!\n. I am going to re-open this issue just because I'm interested in whether we're doing this in a way that's well-optimized or not. I don't expect we're going to have great performance or memory efficiency with tweaking (especially compared to C libraries), but I wonder if we can do better than what we're doing now, at least.\n\nMaybe it's worth revisiting ChunkyPNG and seeing what it can offer.\n. @cheba: Yes, we can't avoid splitting out the alpha channels, as @bradediger already mentioned above.\n\nI'm mostly interested in whether our implementation creates some unnecessary intermediate objects that we might be able to eliminate by reading in larger chunks at a time, or doing some other tricks. We may come up empty, but it's worth investigating. When we wrote the PNG code, we weren't necessarily thinking about what would be the optimal way of doing things. \n. @MarkDBlackwell\n\nWe have the constraint of working in pure Ruby. Simply installing `prawn-fast-png` mitigates this problem, but involves pulling in a heavyweight dependency. \n\nThe use cases for Prawn are vast. Someone may be hand generating a single report on a decently powerful machine, once. In that case, memory and speed are not a concern. Anyone who is doing server-side generation of PDFs however will be badly hurt by this issue, and we've been aware of that for a long time.\n\nI think we can possibly add a warning at least, so that this issue will be detected at development time rather than in production. I might even go as far as to have a variable that's off by default, and spit an error until someone sets it otherwise. That would work something like this:\n\n``` ruby\nrequire \"prawn\"\n\nPrawn::Image::PNG.allow_transparency = true\n\n# your code here \n```\n\nWithout that value set, you'd get an error like:\n\n```\nPrawn's support for transparency in PNGs is very processor and memory intensive, \nand is disabled by default. To enable it, set Prawn::Image::PNG.allow_transparency = true. \nAlternatively, consider installing the prawn-fast-png extension\n```\n\nI think either of these options (a warning or off-by-default feature) are worth discussing. But I'm also still interested in verifying how much of the slowness and memory usage is due to inherent problems (of which we know there are some), and how much is due to implementation issues.\n\nBut in any case, I agree we should do _something_ about this before 1.0\n. @cheba: It would raise an exception. We have a very easy place to put this, directly where we split alpha channels.\n\nThe argument @MarkDBlackwell is making is that support for PNG with transparency in Prawn is effectively broken due to its efficiency issues, even if the feature produces technically correct output. I'm not sure that I'd go to that extreme, but I definitely think of it as being a feature that is problematic.\n\nWhat we are trying to figure out is the best possible user experience, while keeping our constraints in mind. In my view, being explicit is better than being implicit, and giving feedback early is better than later. A warning could do this, but forcing to set a variable would allow us to be _certain_ the user understood the potential problems, and also alert them to an alternative solution.\n\nThe thing we need to remember when working on this library is no one is going to care about why there are all the technical reasons for our inefficiency, they're just going to see memory spikes and slowdown and be frustrated by them. We should fix these issues where we can, and do better with communication where we cannot.\n. I would imagine it wouldn't create any support requests at all if we include an explanation and possibly a link in the error message. But it may prevent someone from building an entire project only to realize later that these performance issues were a show-stopper for them.\n\nAgain, the message I would want to show is something like this:\n\n```\nPrawn's support for transparency in PNGs is very processor and memory intensive, \nand is disabled by default. To enable it, set Prawn::Image::PNG.allow_transparency = true. \nAlternatively, consider installing the prawn-fast-png extension\n```\n\nHow would this create problems that would require a support request?\n. @cheba: I would like to see the numbers on the different PNG types, it's my recollection that most of the performance issues we had were with alpha channel splitting, but I could be misremembering. Can you try running some benchmarks?\n. @cheba: Thanks! It'll be great for us to take a more quantitative approach to problems like these, so we can make better informed decisions.\n. @yob: If I were to introduce an exception, I could probably wait until the time of the 1.0 release. Also, I'm not against using a warning rather than exception in theory, except in practice it's very likely the user won't see that and it'll just be ignored.\n\nMy main priority for 1.0 is just to have clear messaging about what is stable and reliable, and what is problematic. I'm open to any possible way of communicating that, as long as its effective.\n\nWhat's more... if I make a change people hate, I won't stubbornly stick to it. But I rather try something out than wonder what the effect will be in theory.\n. @MarkDBlackwell: I totally understand the concern from your perspective, and I feel like there are plenty of users who will end up in similar situations. But I also know that we have a hugely diverse userbase, and so I can't really make claims about what the \"majority\" use case will be.\n\nAnother option we have here is exception raising behavior that is OFF by default. This could be documented in the manual, would address the use case you mentioned (presenting an error to end users rather than hanging for a long time), and would not introduce a behavior change to Prawn's default behavior.\n\nLet's leave all options on the table, start with optimization first, and see where we're at by the next release (not 0.13.0 which will ship Sunday, but 0.14.0 a month from now).\n. @MarkDBlackwell, I'd be OK with a patch for an exception that is raised only when the flag is set, and does nothing by default. I can't promise it will stick around until 1.0, but I'd encourage you to try it out, see if it works for your use case, and if so, submit a pull request.\n. @MarkDBlackwell It's a good suggestion. It definitely will get looked at faster with a patch though, so feel free to send one in if you get a chance.\n\nIn any case, thanks for sharing your experiences with us.\n. @MarkDBlackwell @cheba: Feel free to continue discussing this, but perhaps head to the [Prawn mailing list](https://groups.google.com/forum/#!forum/prawn-ruby) or take the conversation to private email. I want to keep the thread for this ticket focused on the optimization of the PNG stuff.\n. @cheba: Thanks for looking into this! Be sure to try either JRuby 1.7 or MRI 1.9.3+ as well, because those are the Ruby implementations we're targeting. But I think this issue is going to show up in any Ruby implementation, so we can start anywhere and just verify that later.\n. @cheba: Absolutely, we know the problem is in our code. I was actually considering the opposite issue... that RBX generational GC might be a little bit more kind to us than MRI's GC.\n. @cheba: The performance issues are possibly related to excess object creation, and possibly also due to GC of temporary throwaway objects. For example, this code creates two strings for every single pixel. If we assembled all the values in a single array and then ran one pack statement, we'd massively reduce the amount of time spent on temporary object allocation and GC: \n\n``` ruby\n        color_byte_size = self.colors * self.bits / 8\n        alpha_byte_size = alpha_channel_bits / 8\n        pixels.each do |this_row|\n          this_row.each do |pixel|\n            @img_data << pixel[0, color_byte_size].pack(\"C*\")\n            @alpha_channel << pixel[color_byte_size, alpha_byte_size].pack(\"C*\")\n          end\n        end\n      end\n```\n\nhttps://github.com/prawnpdf/prawn/blob/master/lib/prawn/images/png.rb#L358-L366\n\nFor a single 640x480 image, the current implementation is going to create over 300,000 strings in this area of the code. I imagine there are ways to avoid that!\n. It's really just a shot in the dark, but I'd be interested in seeing what kind of results people with the code I just put up on #599. I am seeing minor improvements in memory and speed running our png_type6 benchmark, but I would like to see more realistic tests.\n. @yob Neat stuff.  I ran your allocation script against #599 and got 235900 objects... so about half of our current implementation, but MUCH more than ChunkyPNG. This doesn't surprise me, because ChunkyPNG uses a numeric bitmap to store the data rather than a ton of nested arrays.\n. I committed your objects benchmark to master... may be helpful for you @cheba if you're still looking at this too.\n. @yob: Now down to 5260 objects on #599 (although memory footprint didn't change much)\n. @yob: Very coarsely via OS X activity monitor (though something like top should also work) while running the png_type_6 benchmark. I bumped up the number of iterations on that so you have enough time to watch it.\n\nMaster is showing about 45-50mb, and my branch 25-30mb. Time is 45s vs. 33s on my machine.\n. I've thrown up a test repository for us to try out the different implementations with some giant PNGs:\nhttps://github.com/prawnpdf/png-testing\n\nI've just been running `time ruby png_example.rb` and then changing the branch in the Gemfile whenever I want to  swap between implementations.\n\nHere are the results I got on my machine (Ruby 2.0.0, OS X Snow Leopard). All of them use the 2402 \u00d7 1707 book.png file.\n\n**master:** Runtime ~27 seconds, peak memory ~832 MB\n**png_optimization:** Runtime ~18 seconds, peak memory ~ 325 MB\n**chunky_png:** Runtime ~50s, peak memory ~ 583 MB\n\nSo my results are indicating that my recent set of optimizations are winning out in both memory usage and speed. It's still very slow, but then again, 2402x1707 is a giant file to be processing in Ruby.\n\nI need to clean up the code on #599, but it's basic design might actually be an improvement, in that it extracts the filtering logic into its own class. I need to tweak naming, APIs, and use of variables throughout to make it suitable for merging though.\n\nIf I do that, is anyone opposed to me merging my optimizations as an incremental improvement? I will probably leave this ticket open until we're fairly sure we've exhausted our options, but it would be a step towards making things at least a little better! \n. It's worth noting two other points:\n\n1) prawn-fast-png is currently not compatible with Prawn's master branch. Hopefully someone will fix it, otherwise we should probably offer a patch ourselves.\n\n2) when reverting to Prawn 0.12.0, prawn-fast-png runs in about 1 second, and takes up < 100mb at peak memory in the Ruby process (unsure if ImageMagick ends up kicking other processes under the hood).\n\nMaybe we should be digging into ImageMagick for algorithmic inspiration?\n. Whoa! Using my https://github.com/prawnpdf/png-testing code, @cheba's work on #600 is chewing through the test PNG in 4.7s and using only ~70MB of memory. That's awesome!\n\nCan someone try his code in a real project for a proper smoke test?\n. The output looked correct, also if you run the spec/acceptance/png.rb I checked into master the other day, it appears to be generating good output for all PNG types. I put a bright red background in it to prove transparency is working.\n. Our list is very small and ought to be expanded, but officially it's Adobe Reader on all platforms, and \nPreview on OS X. Rendering looks correct on both of those on OS X for me.\n. We officially target the latest released version for each platform, and do the best we can with older versions. In practice we rarely run into viewer-specific problems with Adober Reader and Preview, as long as we follow the spec.\n\nKeep in mind our support policy is based on our available resources, rather than what we'd _like_ to be \nable to support. We can definitely refine and extend this in time.\n. Also, I am totally okay with shipping something that we may need to revise or revert later. We can learn a lot by releasing code to our actual users, and as long as we act on the feedback we receive, it's okay for us to incrementally improve our stability.\n. With @cheba's patch merged, we have about as decent performance as I'd expect us to be able to get out of Ruby. Additional improvements are welcome, but I think it's OK for us to close this ticket for now.\n\nPlease report back with results, though!\n. There are some issues with this, unfortunately. In particular, our manual automatically pulls its descriptions from its source code, and right now that means that the \"This is free software...\" line is getting repeated on every page of the manual, which isn't what we want. We could update the manual file to filter those out, or not include them in the manual files... either way would be OK with me.\n\nClosing this for now, but if someone wants to resolve the merge conflicts and the manual issue, please re-open!\n. Someone else will look into your main issue, but...\n\n``` ruby\n>> {content: \"blah\", colspan:2}\n=> {:content=>\"blah\", :colspan=>2}\n>> RUBY_VERSION\n=> \"1.9.3\"\n```\n. This feature exists in prawn-table, and in the 1.x versions of Prawn before we extracted the gem.\n. I don't fully understand this issue, but it appears to still exist in 1.0.0 so I'm reopening for further commentary and discussion.\n. @no-dashes: Sure, investigate, add additional research to the ticket, and optionally a patch. We'll be able to help answer questions about the code if you have any.\n. @no-dashes: Can you try the code on #773 and see if it fixes your problem?\n. @no-dashes: Great, hopefully we'll get this merged and released soon, then.\n. I've merged a revised version of @Mario1988's patch in master!\n. @cs: Sorry again that we didn't get to this sooner. The team didn't even have time to address all the pull requests we got for bugs, so features were very much de-prioritized.\n\nI will take a closer look at this as I work through the pull request backlog. Thanks for your patience.\n. @cs: Just a heads up, I've done some light review of this patch and I'm definitely sold on the idea. I want to think more about the interface before merging though, and so this may sit around for a little while until I get a chance to merge some of the other patches that have been piling up in the queue.\n\nBut I'll be sure to get in touch once I have time to take a closer look at this one!\n. @cs: We're going to work on this over at #586. Please do share your thoughts over there as @packetmonkey attempts a slightly revised approach to this problem.\n. @doomkim: This issue is ancient! If you're looking for the entry point into our manual, you can find it here: https://github.com/prawnpdf/prawn/blob/master/manual/contents.rb\n\nThe manual building code has been extracted into its own gem, its repo can be found here: https://github.com/prawnpdf/prawn-manual_builder\n\nAll `rake manual` does is run the above contents.rb file. This is the task in case you're interested though:\n\n``` ruby\ndesc \"Generate the 'Prawn by Example' manual\"\ntask :manual do\n  puts \"Building manual...\"\n  require File.expand_path(File.join(File.dirname(__FILE__),\n    %w[manual contents]))\n  puts \"The Prawn manual is available at manual.pdf. Happy Prawning!\"\nend\n```\n\nHope that helps!\n. Did we ever sort out what this issue was?\n. @robzolkos: If you can restore your bug example repo, we can take a closer look. Just to confirm, you've reproduced the problem on Prawn 1.0.0 (just released last night)?\n. Transactions (and groups) have been removed from Prawn due to fundamental issues that cause instability and corruption. Sorry!\n. This is definitely a bit of a tedious task currently.\n\nI spiked an example to see how you might go about doing this in a document, and came up with code that can produce the following output:\n\n![](http://i.imgur.com/HL0uJ3t.png)\n\nIf you paste the following code into a file and run it against Prawn's master, you'll probably get similar output: https://gist.githubusercontent.com/practicingruby/53a2496dddd8586bf06c/raw/a48af017660bf59a38b405873baadc1273846ab5/x.rb\n\nThe problem is, I just hacked this together. So I have no idea whether the calculations are correct, or what the edge case scenarios are.\n\nBecause we have a lack of capacity to even work through our bug backlog, we don't track feature requests in Prawn. What we do track is _research_, and _feature implementations_ (even if they're incomplete). So if someone wants to put in some research on this (a combination of code and some documentation on how we should go about implementing this feature), we'll re-open a ticket, for sure.\n\nUntil then, it's another feature on the infinitely long \"nice to have\" list. \n. We've made some improvements to spans, but I'm not sure if they resolve this issue or not. If not, please provide a code sample for me to run which illustrates the problem, and I'll re-open.\n. Hi. Please resolve merge conflicts and provide an example that reproduces the problem. I am closing the pull request for now, but feel free to reopen once you have updated your branch.\n. Without a runnable example that reproduces this problem can't look into it further, but it sounds like possible corruption due to using either templates or groups, both of which have been removed in Prawn 1.0.\n. We've dropped support for templates due to a [huge amount of problems](https://github.com/prawnpdf/prawn/issues?direction=desc&labels=templates&page=1&sort=updated&state=closed) that have gone unresolved, with no one on the team able to work on them currently. They are simply not reliable in any reasonably complex use case, and the way we've implemented them makes it very difficult to improve that reliability.\n\nHowever, we will extract the template code into a `prawn-templates` gem soon. If someone picks up maintenance of that gem, you can try submitting a pull request to it at that time.\n. Not within Prawn itself, but you can use pdftk for that purpose:\nhttp://www.pdflabs.com/tools/pdftk-server/\n\nWe've discussed the possibility of adding support for read-only merges of PDF pages, because it could potentially be easier to maintain than our existing templates code, but no one has built a proof-of-concept yet for that. It's not currently being worked on, either. :frowning: \n. Just a heads up: I'm putting in some time over the next couple months and that will hopefully get us to a 1.0 release. Keep an eye on this repository, as well as the [Prawn mailing](https://groups.google.com/forum/#!forum/prawn-ruby) list for activity, and consider lurking in #prawn on Freenode.\n\nI can absolutely use some help, so if you want to pitch in, just let me know!\n. For those interested, we have a 1.0 roadmap now! \n\nhttps://github.com/prawnpdf/prawn/wiki/Development-Roadmap\n. Group has been removed from Prawn temporarily, but you may want to try your luck with https://github.com/ddengler/prawn-grouping -- it uses a sandboxed document so it should not cause this issue.\n. @yob: Can you update this ticket with what idea you had in mind, so that I can consider it when I get around to reviewing this issue?\n. @yob: There are some good examples that may be related on #568.\n. I've got some bad news... we're not in a good position to support the templates feature right now, and we're considering dropping it due to its lack of stability. Please see this [mailing list thread](https://groups.google.com/forum/#!topic/prawn-ruby/S6gXA-i0-do) for details.\n\nI have tagged the ticket as a templates issue, so that it can be found by the folks who have volunteered to help with fixing this area of Prawn. But because it won't see any attention from the core team in the near future, I'm closing the ticket. I will transfer this ticket, re-open it, and CC you if and when we decide to extract templates into their own gem.\n. Thanks for the update @ttantawy \n. Hi, this feature sounds possibly useful, but it looks like there are merge conflicts. Please re-open once those are resolved, and I can give you a review then.\n. Closing this for now. @sigmike: Please try #579 and confirm whether or not it fixes the issues you saw. I will investigate myself soon enough, but knowing that will help!\n. @ksugiarto That's good news. I will work on getting the other small patch from @hbrandl  merged upstream soon, in time for our 1.0.0 RC3 release.\n. @ksugiarto Can you try this and let me know if it fixes your issue?\n\n```\ngem 'prawn', :git => \"https://github.com/hbrandl/prawn.git\", :branch => \"issue_407_2\" \n```\n. @ksugiarto Sorry for not responding I must have missed this. it sounds like you may need to run bundle install.\n. @tfolk: Nice! I will also try to get the other patch from @hbrandl merged in shortly before or after the holidays and then cut a 0.13.1 release with it.\n. @tfolk: This did not make it into 0.13.1, but is now pending review from me and will hopefully be cut it the next release, either in 0.14.0 on January 15 or sooner in a 0.13.2 release.\n. This seems reasonable! If you're still interested in this improvement, consider sending in a pull request for it.\n. @Saidbek Please provide me an image to test this with that reproduces the problem.\n. I've closed this ticket, but also merged #430. Anyone watching this issue... please re-open if you are still experiencing problems!\n. @yob: I'd prefer to see a move to minitest/spec because it's standard library, and it gives some of the most basic niceties that you'd expect from RSpec. But this is not my project anymore, so that's my non-voting opinion only. :sparkling_heart: \n\nUPDATE: To be clear, a move to RSpec is an improvement over sticking with the very much outdated test-spec, but I think MiniTest is more along the goal lines of the original decision.\n. Since the switch to rspec has already been done, just go with it.\n. When we started working on Prawn, dependency management was in a really bad place. I'm not saying its ponies and rainbows right now, but it is definitely much better in the sense that applications can _usually_ cobble together a complicated series of dependencies without it all going to hell.\n\nI think things are different enough now that as long as we're not inheriting dependencies that will cause obvious stability or quality issues for Prawn and its users, it's reasonable to drop our \"Aggressive not-invented-here\" policy :tongue:\n. @juankuquintana: Are you running into this problem when using a template? \n\nIf so, template support was dropped in 0.13.0 and the feature is disabled in 0.14.0. The implementation is very buggy, and so we're no longer supporting it.\n\nIf this problem can still exist in documents _without_ using templates, then I can re-open for further investigation as soon as someone shows an example that reproduces the problem.\n. I _think_ that pdftk can be used for watermarking:\nhttp://www.pdflabs.com/tools/pdftk-server/\n\nI've never tried it though. If you find out how it works let me know, and I can maybe add something to Prawn's README or other docs -- it's a common use case.\n. This pull request seems to be addressing an important issue, but I've been away from the project enough to not feel comfortable merging it myself. @yob or @bradediger, do you think you can take a look at this one issue and see if there is anything blocking a merge? \n\nI can actually do the merge and make sure it runs clean, but I can't do the review.\n. @bradediger: Thanks for reviewing. When I merge I'll look to see how complicated changing the tests would be for me, and if I see a straightforward way of revising them I will.\n\n@kennethkalmer: This is now in my queue for further review. Since defects are being prioritized, it will hopefully be merged soon.\n. @kennethkalmer: it certainly wouldn't hurt for you to give it a try, especially if you could work on it in the next day or two. But it's also a change we can always make later.\n. @kennethkalmer I'm going to go ahead and merge this. Please do submit a pull request for better tests if you get a chance, but I think the value of this patch as it is outweighs the need to get that perfect!\n. This is going to happen for 1.0! Will review the pull request soon. @yob feel free to merge if it's still working against master.\n. Looks like this issue was solved by #446. I've re-enabled compression on the manual, but please re-open this ticket if you experience problems!\n. Patches to improve the way we wrap are welcome, as long as they do not hinder internationalization.\n\nSorry we took so long to respond.\n. Just a quick note... although it probably won't be \"bounding boxes\", I would definitely like to eventually support arbitrary components in Prawn. However, it requires us to implement a proper box model, and we're nowhere near that point now. That said, if anyone wants to work on this I'd love to see a proof of concept!\n. I'm also seeing `CannotFit` errors.\n\n@hbrandl: Is this issue covered by any of the more recent tickets we've already got open?\n. Re-opening for closer investigation. This ticket was only closed because it had gone inactive for a long time.\n. Can someone provide a screenshot of the bad behavior along with the example code that was used to generate it? Right now this ticket pretty much just says \"it doesn't render right\", but tables have many bugs, so I want to narrow down to exactly what the problem is.\n\nWill re-open when a screenshot and a little more detail is given.\n. Looks self contained, could we do it as a (possibly unofficial) extension? I.e. prawn-shading\n. @cheba Nice work!\n. The example does not appear to have a break in the long word in Prawn 1.0.0. Please leave a comment clarifying if things appear to still be broken.\n. How about releasing Prawn 1.0 as 0.13.0 and 1.0 simultaneously? The same codebase, but 1.x would officially drop 1.8 support, and 0.13.x would just be bug fixes and security releases. I think that'd be less confusing than dropping support for 1.9 in a 1.0 -> 1.1 release.\n. I agree, the 1.0 RCs and the 0.12.0 release are so far away from one another it'd be crazy to do that. But that's not what I had in mind. What I was suggesting is that the 1.0 codebase should be released as both 0.13.0 and 1.0 simultaneously, the only difference is that 1.0 will not promise Ruby 1.8 compatibility.\n\nSeeing as our 1.0 RCs run on Ruby 1.8, it'd be a shame _not_ to provide them to people working on legacy code -- I was the one who cut the 0.12.0 release, and it is nearly two years old! But I really dislike the idea of dropping compatibility in a 1.0 -> 1.1 release, because I always had assumed we'd start using semantic versioning after 1.0.\n\nIf we went this direction, backporting bug fixes would initially be easy, and later could be left up to people who care about it -- we don't need to support 0.13.0 forever, but I'm sure the core team wouldn't mind cutting releases from time to time and accepting pull requests for bug fixes.\n. @cheba: The 1.8 related compatibility layer could be removed from 1.0. We have not released it yet, so we can change whatever we'd like before we do.\n\nThanks for sharing your thoughts. I'd like to hear what @bradediger thinks, since he handles our releases these days. If I were still maintaining the project, the 0.13.0 / 1.0 release is what I would do. It's not perfect but it strikes a reasonable balance of concerns, IMO.\n\nKeep in mind that this would _ONLY_ be a concern for those who need 1.8 support, and ONLY if they want to use 1.0-like features. That's an edge case, so it won't be confusing to most.\n. @yob: To me, this is what semantic versioning means: \n- tiny: no visible external changes in behavior -- bug fixes only\n- minor: additions but no breaking changes in existing behavior\n- major: may break existing behavior\n\nIf we begin removing 1.8 compatibility in the internals during the move from 1.0 -> 1.1, for some of our users that will break existing functionality.\n\nAnother alternative is to simply leave 0.12.0 as the last 1.8 compatible release. How many people are running 1.0 release candidates AND 1.8? If not that many, there is no issue with dropping support for 1.8 in all 1.x releases of Prawn\n. Deprecations can be supported in 1.0 by clearly marking the deprecated methods and making it clear they are no longer part of the public API. This gives us the ability to change or remove them later.\n\nAs for the versioning, so far I've seen these suggestions:\n\n1) Drop 1.8 support entirely moving forward (leave 0.12.0 as the last version that supports 1.8)\n2) Release 1.0 and 0.13.0 simultaneously (leaving 0.13.0 as the last supporting 1.8)\n3) Release 1.0 and later release 1.1 (leaving 1.0 as the last supporting 1.8)\n4) Release 1.0 and then later release 2.0 (leaving 1.0 as the last supporting 1.8)\n\nI honestly think these suggestions are listed above in ascending order of confusion! The first confuses no one, the second and third confuse the small subset of people who care about 1.8, and the fourth confuses everyone. But only options 2 and 3 attempt to bring Prawn's 1.0 features to Ruby 1.8 users (a minority) without confusing our Ruby 1.9-2.0 users (the majority).\n\nI'm closing this ticket and leaving this issue up to @bradediger to decide. He's the only other person besides me to ever cut a Prawn release, and I don't think that my coming back to the project to help out is best spent painting bike sheds.\n\nOnce again, thanks for your thoughts @cheba, but we'll take this from here. Other tickets need your love more than this one!\n. @cheba: Understood. Don't break 1.8 support until you hear official word from a core team member that we're dropping it. No matter what we name the releases, I do hope that happens soon so we can remove that cruft and start using some more modern Rubyisms.\n. This needs documentation in order to be merged, but otherwise looks fine. Please re-open when it is documented, and I'll merge it.\n. If this is a feature that is only in PDF 1.6+, I think we'd need a min_version guard in this code. Is that correct @bradediger?\n. Okay... so this patch needs a few things then, IMO.\n- Add a `min_version` call to make sure we're setting the right PDF version.\n- Wrap lines cleanly at 80 chars\n- Use the notes posted above from @jlduran to write appropriate API documentation\n- Fix manual example to actually use the option, and set it to not produce output as we do with some of the\n  other examples.\n- Rewrite manual require to use `require_relative`\n- Resolve merge conflicts\n\nDoes someone want to take this up? If you've already got commit access, pushing this code to a branch on prawnpdf and then opening a fresh pull request is the way to go.\n. I'm closing this out again, but will reopen if someone volunteers to work on the above feedback points.\n. What you did looks OK to me. I will probably rebase down to a single commit before merging, but I think I can take it from here. Thanks!\n. Merged, thank you! \n\nYou've also been given commit access to Prawn. Please see this page for contribution guidelines:\nhttps://github.com/prawnpdf/prawn/wiki/Contributor-welcome-notes\n. Sorry everyone for the delay in response... the entire Prawn core team was busy with other things for the last several months, and so we've not done a good job of reviewing patches lately.\n\nI'm in the process of triaging all the outstanding requests and will review this one as I work through the backlog. Keep in mind I've been away from the project at least two years now, so it's going to take some time for me to dust off the cobwebs.\n. This patch seems fairly straightforward. Except for my question about the error suppression, I think the only other thing it needs is an example in the manual showing how it's meant to be used.\n. Closing for now, but I will be happy to re-open once a manual example is added and when I understand the need for the error surpression. Anyone is welcome to contribute those things!\n. @jcoleman: Are you sure you pushed your changes? I'm not seeing them on your branch.\n. @jcoleman if you need to revise based on my comment above, please push a new commit rather than rewriting history. It will help make the pull request a bit clearer, and we can always rebase during a merge if necessary.\n. yes, I'm aware of what you're _trying_ to do, but that's not how the conditional modifier form of `rescue` works.\n\n``` ruby\n>> class MyError < StandardError; end\n=> nil\n>> (raise StandardError.new) rescue MyError\n=> MyError\n```\n\nAny inline rescue is treated as rescuing _all errors_, and returns whatever follows it. Please revise!\n. Thanks. Now that we're at a point where we can see that the code at least works as you expect it would, we need to consider the implementation details.\n\nI'm very concerned that the current approach may break in the future. Right now the purpose of `CannotFit` is to halt program execution... it's not a safe exception to rescue from by design, and if it happens to be safe it would only be by side-effect of the current implementation. In other words, I have no idea whether future changes will break this code, nor do I know what its side effects will be.\n\nI've dug into the source a bit... unfortunately, you're going to need to work through a massive rats net if you work your way up from where the exception is raised, and I don't know the code enough to tell you where might be the right place to introduce a branching point that would prevent that code from being walked at all.\n\nBut now that we have a working implementation, maybe you or someone else can re-implement a solution that does not depend on internal side effects. Until then, I won't be able to merge this, but others can pull it into their own forks if they'd like.\n. @jcoleman I decided to merge (a squashed version of) this because it's a problem still frequently seen in the wild and the maintainability concerns I had are somewhat isolated anyway. Thanks for working on this patch, and sorry for blocking it for so long!\n. @jcoleman: Because your pull request was accepted, you now have commit access to Prawn. Please see our [contributor guidelines](https://github.com/prawnpdf/prawn/wiki/Contributor-welcome-notes), and happy hacking!\n. Does anyone know if this issue is still present on 1.0.0? I don't have Rubinius set up on my machine, but I think we've done some things to improve compatibility there.\n. Sorry for the long delay in response. Bounding boxes do stretch, but their height is defined as wherever the last drawing position was rather than the max height of its children. This is a bad behavior, and is also described in #487. See the discussion there for more details.\n. Your assumptions sound correct, and I think the core problem is that `float` is very naive in how it works: it keeps track of what page you start on and will rewind back to that page even if you crossed a page boundary, but isn't aware at all of what box you're in.\n\nFor this particular issue, I'd recommend using Unicode bullets in your text because it'll avoid having to hack around with float and indent, but the general problem is interesting enough that I'll re-open for further investigation / commentary.\n. Templates are no longer supported at all.\n\nFrom the 0.13.0 release notes:\n\n> We are having major problems with stabilizing our templates feature, and it should be considered unsupported at this point. The feature will be disabled by the 1.0 release, and possibly extracted into its own gem.\n\nAnd from the 0.14.0 release notes:\n\n> We officially dropped support for templates in Prawn as of 0.13.0, and now work on extracting the template code has begun. Templates are now disabled by default.\n\nAnd as of today, they've been removed from master. They are very buggy, and we're not able to support them, sorry.\n\nSpeaking more generally, always read Prawn's changelog before upgrading. The gem install message tells you to do this, and you can expect things to break if you don't. You can find the CHANGELOG here:\n\nhttps://github.com/prawnpdf/prawn/wiki/CHANGELOG\n. Can someone confirm for me whether this is a purely template related issue, or whether it has uses outside of templates as well?\n. Closing out as a templates-related issue that needs revision. Please re-open if and when revisions are made //cc @cheba\n. This is a good idea! Sorry for taking so long to respond. Re-opening because I feel that the right scoping for the grid system is definitely by the current bounds rather than document-wide.\n. @skandragon: A while back it was impossible to redefine the grid at all, due to a caching bug. Now it's possible to redefine as many times as you'd like, but the problem is that there can only be one active grid at a time in the document.\n\nSo that makes it possible for your example to work, but not for a nested grid structure to work. It's also a little clunky because of the destructive behavior of `define_grid`.\n. Hi, this ticket was closed in November because we had over 100 issues that were many months or years old that had gone inactive. We announced this on the mailing list, along with some instructions on how to get stale tickets reopened:\n\nhttps://groups.google.com/forum/#!searchin/prawn-ruby/stale/prawn-ruby/czGB6L4HZhQ/t2BB51Ki5ZQJ\n\nI've removed the stale tag, since it's clear that people are still interested in this. However, we do not keep open tickets for feature requests unless they contain a significant amount of research, or they represent some show-stopping improvement that we could not live without.\n\nA pull request that implements otf font support is welcome, and so is discussion on the [Prawn mailing list](https://groups.google.com/forum/#!forum/prawn-ruby) if anyone needs help finding their way around Prawn. An extension gem that proves the concept would be even better.\n. @mojavelinux: Just a quick note: Prawn's default behavior is to subset fonts before embedding. No extra pre-processing is needed.\n. @chloerei: I'd suggest converting without attempting to subset, then rely on Prawn to subset for you when you embed the font. We dynamically embed only the glyphs used in your text.\n. @chloerei: I see. Sorry, I'm not familiar w. FontForge. Hopefully @mojavelinux can help.\n. @chloerei: There are no plans to work on OTF support, but a patch would be welcome.\n. @mojavelinux The state of this issue is the same as any other: If you or someone else implement or do useful research, it'll move along. There are many areas we're missing important parts for in Prawn, and the best way to fill them in is to implement yourself when you have a direct need. A patch is certainly welcome!\n. @mojavelinux We don't track requests without significant research attached. If we did (and we have in the past) we'd end up with hundreds of stale tickets with no progress other than the occasional \"when are you going to get around to implementing this\". The answer to that question right now is _never_. But it can change if we find an implementer.\n\nPlease understand that we don't use our tracker for the purpose you have in mind, that this is actually a low priority change from a maintenance perspective (even if its very useful), and that our policy still leans heavily towards assisting implementers rather than maintaining a wish list of things we hope someone will eventually work on.\n\nIf this issue is important to you, the best way to help is to write a blog post, tweet, or otherwise ask around to find someone who is willing to work on this. A clear ticket that outlines implementation details and relevant documentation, or a pull request is what will get this into a work-in-progress / planned development state.\n. Hi @dmarkow, sorry for the confusion on this.\n\nIn November we did a bulk close on any ticket that did not see recent activity, because we had something like 100+ open tickets that had never been properly addressed by our core team or the submitter had gone silent (some as old as 2-3 years!). There's a mailing list post about that here: https://groups.google.com/forum/#!topic/prawn-ruby/czGB6L4HZhQ\n\nThe process for re-opening a ticket was simply leaving a comment and making sure there is a reproducing example, and this ticket meets both of those criteria. I've confirmed the bug still exists in Adobe Reader on master, so we'll look into it eventually. If you want to investigate and contribute a fix or some research, we're actively monitoring the tracker now, and a patch is absolutely welcome!\n. Oh, that makes sense!\n\nIt looks like the colorspace isn't being set for the stroke color when table is used, even though the fill color is being specified. Here's what the code is doing.\n\nSet non-stroke colorspace to RGB\n\n```\n/DeviceRGB cs\n```\n\nSet nonstroke color to black\n\n```\n0.000 0.000 0.000 scn\n```\n\nSet stroke colorspace to RGB\n\n```\n/DeviceRGB CS\n```\n\nSet stroke color to black\n\n```\n0.000 0.000 0.000 SCN\n```\n\nIt makes sense to me that missing the colorspace definition would lead to corruption.\n. And if you look at the `lib/prawn/repeaters.rb` file, it calls `save_graphics_state`. My guess is that some interaction between dynamic repeater manipulation of the graphics state stack and whatever table is doing under the hood with graphics state is to blame. Please do take a closer look!\n. `stroke_color=` is just an alias for `stroke_color(color)` so I don't think that would cause problems. But keep looking! You may want to look at the calls to `set_color_space` (defined in prawn/graphics/color.rb` to see the difference between how it's being called in the different cases.. that's where the colorspace is actually set.\n. Sounds like you nailed it! Next step is to write a test to reproduce the bad behavior.\n\nYou should be able to use the tests in https://github.com/prawnpdf/prawn/blob/master/spec/graphics_spec.rb as a guide.\n. @dmarkow: Here are some specific lines that should be useful for testing examples:\n\nhttps://github.com/prawnpdf/prawn/blob/master/spec/graphics_spec.rb#L233-L281\n. Oh, those are not repeated statements, the capitalization matters. the lowercase ones (`cs`/`scn`) are setting the fill (non-stroke) colorspace + color, the uppercase (`CS`/`SCN`) are setting the stroke colorspace + color.\n\nIf both the fill color and stroke color have been set, I'd expect to see the first example, if only the fill color has been set, I'd expect to see the second example.\n\nFor details on this, see page 240 of the PDF standard:\nhttp://wwwimages.adobe.com/www.adobe.com/content/dam/Adobe/en/devnet/pdf/pdfs/pdf_reference_1-7.pdf\n. It looks like the problem is on page 2, not page 1. Yes, the stroke colorspace is showing up on the first page (it's object 5 0, which uses the stream from object 4 0). But the stream in 4 0 resets the graphics stack to the original state as its last action (see the `Q` `Q` calls at the end)\n\nSo by the time we get to rendering the second page (8 0), the colorspace is NOT set, but there are calls to `SCN` (see stream 7 0). I'm not sure what's causing Prawn to get out of sync with the PDF, but that may be the source of the problem.\n. Note, all of the above are from your original example at the top of this issue.\n. We also have a test that says the colorspace should be set on every page to please fussy readers whenever the colors have been set, but it's clear from the output that's not happening in this case.\n\nHere's the test:\nhttps://github.com/prawnpdf/prawn/blob/master/spec/graphics_spec.rb#L272-L281\n. To clarify a bit, you don't necessarily want to save the graphics state of the first page, what you want to do is create a complete snapshot of the graphics state wherever the repeater is defined, fully restore it before running the repeater code, and then fully revert to whatever the graphics state was on a given page after the repeater code runs.\n\nIn other words, repeaters should not assume anything about the page they're being run on, they should push a new state onto the graphics stack, replay the settings from wherever they were defined, then pop the stack to ensure that none of their settings affect the rest of the page.  Right now I think Prawn is _trying_ to do that, but corrupting things in the process due to a mismatch between Prawn's internal state and what's being written to the PDF.\n\nI'd look at the following methods for further investigate:\n\n`freeze_stamp_graphics`: https://github.com/prawnpdf/prawn/blob/master/lib/prawn/stamp.rb#L125-L131\n`save_graphics_state`: https://github.com/prawnpdf/prawn/blob/master/lib/prawn/document/graphics_state.rb#L42-L49\n`Repeater#run`: https://github.com/prawnpdf/prawn/blob/master/lib/prawn/repeater.rb#L111-L116\n\nSorry for the spaghetti code. Once we narrow down the source of the bug and get a test written, I'll probably refactor this somewhat, because it clearly needs it.\n. @dmarkow For the most part your understanding of what's going on reflects my basic understanding of the code as well. The problem with using whatever the current page's graphic state is would be that you wouldn't have consistent behavior for your stamp across pages. \n\nFor example, if you have a page that sets the fill color to red but does not set it back to black before crossing a page boundary, do you really want your repeated text to be in red on that page, and only on that page? I can't imagine that's what people would want.\n\nIf we wanted to simplify the semantics of the repeaters, the decent way may indeed be to call `save_graphics_state` with no parameter, but before running `block.call`, execute a sort of \"reset\" which would put all the graphics states back to their default, as if you were starting with a fresh document. This would mean that the repeaters would not inherit the graphic state of the page they were defined on, and would essentially have their own graphics state that would be consistent across all the pages.\n\nOnce we are able to implement a clear state, we'd also be able to create a \"restore the graphics state from the page the repeater was defined on\", so it's just a matter of what behavior feels more natural.\n\nBut I definitely think we should avoid having a variable graphics state from page to page... content generated by a repeater is meant to look the same on every page, or at least start from the same base state on every page. That's what omitting the argument to `save_graphic_state` would do unless we also wrote some \"reset\" code to be run before the block was called on each page.\n. Thanks a lot for the further research and pull request, I'll take a closer look at this in the next couple days.\n. Note to self for future investigation: It looks like if we push newly initialized graphics state object rather than the graphics state of whatever page the repeater is defined on, that would give us a blank slate to work with. Unsure whether we cache those values elsewhere in document though.\n. Thanks, please re-open if you run into the issue again.\n. There have been a lot of fixes to tables and column boxes in recent releases -- I'm not sure if they resolve this issue or not.\n\nIf they do not, please submit a runnable code sample that illustrates the problem and we'll take a closer look.\n. Can someone provide an example that demonstrates the problem, and also add tests to verify the new behavior?\n\nClosing for now, but feel free to re-open when that's taken care of.\n. Thanks for updating this @BaylorRae. @celo, @kivanio does `:reflow_margins` take care of your needs?\n. Closing as stale. Please re-open if you have an explanation for why this is needed @tomconroy.\n. The Ruport Logo was made by Daniel Dormann and is licensed under the CC BY-SA 3.0 Unported license, so you're good to go there.\n. Sorry for the very delayed response.\n\nI agree that this is a confusing behavior, and it's something I'm open to change. The bad news is that it's the officially documented behavior.\n\n```\nIf the box is 'stretchy' (unspecified height attribute), height is calculated \nas the distance from the top of the box to the current drawing position.\n```\n\nBecause we've already cut our 1.0 release and marked this behavior as stable, we'd need to add some sort of flag to change its behavior that is off by default.\n\nEven better though would be for us to route around this problem by figuring out how to do this kind of task at a higher level. Bounding boxes are awkward things to work with, and so I'd almost rather invest the time into building better user-level layout tools.\n\nRe-opening this for commentary and further thought.\n. @bradediger: Is there anything that concerns you about merging this patch?\n\nIf not, I'll go ahead and merge it (reformatting the code to fit in 80 char lines)\n. /cc @jonsgreen (If you're still around!)\n. @jonsgreen, if you can confirm that the fix is appropriate for addressing #320, go ahead and hit the merge button on this one. Otherwise, I'll look at it myself early next week and get it merged (if not sooner).\n. Thanks @cheba. I've given you commit access. For our guidelines on contribution, please see: https://groups.google.com/forum/#!topic/prawn-ruby/BKrw67vyEtA\n. Thanks for adding an update here @Yolgie. This is one of the tickets that got bulk-closed for inactivity, so I didn't think to come add something here.\n. @traels:\n\nI am not super familiar with the grid code, but having it be global is definitely weird when most things in Prawn can be nested relative to a bounding box.\n\nIf you want to work on a patch or update the documentation, it'd certainly be welcome. Please submit a pull request, and let me know if you need help figuring out how to implement it!\n. What we have here isn't a patch, it's just showing a line of code we could change if we wanted to prepare a patch. It has no tests or examples, and so it's not in a reviewable state. If we simply changed this line in Prawn, nothing would stop us from breaking it or misunderstanding the intention in a future release.\n\nA pull request with tests and a clear example, and any necessary documentation updates is definitely worth reviewing though!\n. Hi @wrzasa,\n\nSorry for the confusion. There's an explanation in [this announcement](https://groups.google.com/forum/#!topic/prawn-ruby/czGB6L4HZhQ).\n\nI've now re-opened the issue and removed its 'stale' label, and will review it as I work through the issue queue. This may take a while, unfortunately.\n\nIf you want to help move things along, please see if you can confirm that the problem was introduced by the commit mentioned by @jm81 above. If so, that should help me narrow things down a bit.\n. Hi @wrzasa,\n\nI've got some bad news... we're not in a good position to support the templates feature right now, and we're considering dropping it due to its lack of stability. Please see this [mailing list thread](https://groups.google.com/forum/#!topic/prawn-ruby/S6gXA-i0-do) for details.\n\nI have tagged the ticket as a templates issue, so that it can be found by the folks who have volunteered to help with fixing this area of Prawn. But because it won't see any attention from the core team in the near future, I'm closing the ticket. I will transfer this ticket, re-open it, and CC you if and when we decide to extract templates into their own gem.\n. Sorry for the very late response. Did you ever find the source of your problem? What you have here looks OK to me.\n. Can someone post a minimal reproducing example that fails on 0.13.2? Once I have that I can re-open the ticket. A quick attempt to reproduce failed for me.\n. When you write `dash(0)` do you get an error in Adobe? If so we probably should at least raise an exception instead.\n. @McPolemic Thanks for investigating! \n\nStill willing to re-open if others run into this problem on a recent release, the only reason we closed the ticket in the first place was due to inactivity and a lack of a code sample.\n. @rbrancher: Thanks. Time is very limited now so I don't know if/when I'll look into this myself. But if we can get a pull request together I could review that and possibly merge.\n\nUntil that happens, additional research is welcome on this ticket as to figuring out the source of the problem.\n. Seems plausible. See this mailing list thread for additional context:\nhttps://groups.google.com/forum/#!searchin/prawn-ruby/float$20precision$20in$20prawn/prawn-ruby/IWNaWJBo3I0/lNmYLpnRU9IJ\n\nIf you want to try to patch the PdfObject method in PDF::Core, and look for places where we do add_content, we could probably fix this by rounding out to N decimal places (something like 4 places would probably be more than enough)\n. @packetmonkey: PDF points are 1/72 inch. So rounding them to 4 decimal place gives us a precision of `0.0000013889` inches. :grin:\n. Here's what the \"Developing With PDF\" book from O'Reilly has to say on this topic:\n\n> While the term \"real\" is used in PDF to represent the object type, the actual implementation of a given viewer might use _double_, _float_, or even _fixed point_ numbers. Since the implementations may differ, the number of decimal places of precision may also differ. It is therefore recommended for reliability and also for file size considerations to not write more than four decimal places\n\nI looked this up in the [PDF standard](http://www.adobe.com/content/dam/Adobe/en/devnet/acrobat/pdfs/pdf_reference_1-7.pdf) and it too said that it's common for \"real\" numbers to be implemented as fixed point values. In Appendix C, 5 decimal places is recommended as a maximum.\n\nI think we will go with 4 to be a bit more conservative, but if that causes any problems  we can try bumping it up to 5. But it's clear that beyond that we can expect trouble... even the standard tells us that.\n. Upon closer investigation, this issue does not have to do with float rounding (though I'll open a second ticket for that, because it needs to be fixed throughout Prawn)\n\nIt has to do with the difference between `dash(0)` and `undash`.\n\nThis is what `dash(0)` generates at the PDF level:\n\n```\n[0 0] 0 d\n```\n\nAnd this is what `undash` generates:\n\n```\n[ ] 0 d\n```\n\nThe latter is what the standard expects for setting dash to an unbroken line.\n\nWe don't seem to document anywhere the idea that people ought to use `dash(0)` to clear dashes, and we do have an `undash` method, so I think if anything we should cause `dash(0)` to raise an error... it doesn't make sense to have segments of length 0 followed by gaps of 0!\n\nThoughts?\n. See https://github.com/prawnpdf/prawn/issues/780 for updates about the decimal rounding issue.\n. @McPolemic: That's what I'm thinking too. Unless there is a reasonable use case for `dash(0)`, I think we should disallow it to prevent ambiguous results.\n. Disallowed dash(0) in https://github.com/prawnpdf/prawn/commit/e65c24411c451918718a8e8cb35631c98ccc5517\n. @gchan: Looks like so, yep. The ticket was only closed because we did a one-time bulk closure of tickets without recent activity in early November. Since it has a reproducing example and still is broken on master, I've re-opened.\n. Right now my backlog is deep, so anyone who wants to take a crack at solving this issue or at least researching it further is welcome to do so. I wouldn't expect this should need to use `dynamic: true` even if that's a workaround for now.\n. I've confirmed that #801 is a direct reproduction of this problem at the stamp level, so please follow that ticket for future updates.\n. Hi, I have reopened for further investigation. This ticket was only closed due to inactivity before.\n. Those who have seen this issue, is it present using AFM fonts, TTF fonts, or both?\n. The default fonts are all AFM. Please try downloading any TTF font and see if you can reproduce. I will eventually look into this myself but it would help me isolate things.\n. Hi @tintin81,\n\nAlthough your reader may be using those fonts under the hood, any of Prawn's \"built-in\" fonts will be processed through AFM, and that will affect the way we process and position your text in the PDF.\n\nTo use TTF files in Prawn, you need to directly provide a path to them. You can download fonts off the internet and bundle them with your project, or specify a path to system fonts. Since you're using OS X, here's some code which will use Courier directly from your system:\n\n``` ruby\nrequire \"prawn\"\n\nPrawn::Document.generate(\"example.pdf\") do\n  font_families.update(\"Courier System Font\" => \n                       { :normal => \"/Library/Fonts/Courier New.ttf\"})\n\n  font \"Courier System Font\"\n\n  # your code here\nend\n```\n\nCan you try that out and upload a screenshot?\n. I am guessing that we may have introduced some problems when we switched away from our own implementation to use the `afm` gem, but I have not investigated at all yet. One more example of a problem that exists in AFM but not TTF would certainly be desirable -- which is why I'd like to confirm this issue.\n. That's sort of the idea behind AFM fonts (though you are limited to only a very few set of options supported by the PDF spec), but it seems like they're broken for this use case in Prawn right now.\n\nFor any font that you have permissions to use, you can copy the TTF files into your project and reference those, rather than system fonts. Prawn _will_ embed the necessary font information into your PDFs, so the user will not need to have the font installed just to read the PDF.\n\nWe'll look into this, but the recommended workaround is to use TTF fonts and copy them into your project rather than referring to system paths.\n. Hi, can someone please try out the `afm_bugs` branch and see if it resolves the issue for built in fonts? It seems to render Euros correctly for me now.\n. @Tintin81, The code in #607 ought to make it possible for you to switch back to the built-in Courier font and not need to bundle TTF. Can you verify by building from the `afm_bugs` branch?\n. Great! Will merge the fix today and cut a 0.13.1 release Monday.\n. @thaisbione Unfortunately support was dropped in 0.13.0, and we're going to extract the code into its own gem soon.\n\nThere are lots of problems with it, and none of us who are currently active on the project have the time or domain knowledge to fix it.\n. Closing as a possible duplicate of #268\n. Template support has been dropped since November. It was announced as unsupported in release 0.13.0, disabled by default in 0.14.0, and removed from 0.15.0.\n\nThere is an unsupported gem that will give you template support in 0.15+. If anyone wants to attempt a fix to this problem, that's where you should send a pull request: \nhttps://github.com/prawnpdf/prawn-templates\n\nBut it's very important to keep in mind that the reason why we dropped support for templates is because their implementation is fundamentally flawed, and essentially \"unfixable\", the code needs to be rewritten to be reliable. None of us with available time to work on Prawn really know how to do that, so unfortunately I don't expect template support to improve in the near future. :frowning: \n. @JamieAppleseed: Do you have a code sample you can share? This is a really common problem for Prawn users, so if I can make it easier for people who have this problem, I would be happy to at least point them at an example. We can even possibly build a thin wrapper around pdftk and release it as a Prawn extension gem.\n. @anthonycreates: To clarify, PDFTk is not a PDF generator, and so it's not an alternative to Prawn. However, it does allow for adding pages to existing PDFs and doing limited edits like adding watermarks. If your needs are limited to just those things you won't need to use Prawn at all, otherwise you'd be using both.\n. @anthonycreates In that case, definitely look into PDFTk, and if you figure out how to do it, please report back here. We love when people use Prawn, but only when it's going to work better than the other options out there. :grin:\n. Thanks for sharing this example!\n. Sure. I think I'll probably write up a wiki page to link to, so any additional examples are welcome.\n. Hi, sorry for the confusion! There is an explanation in [this announcement](https://groups.google.com/forum/#!topic/prawn-ruby/czGB6L4HZhQ).\n\nI've re-opened your ticket and removed the 'stale' label from it, and it will be reviewed as I work through the queue. Unfortunately, that may take some time, but please feel free to research the issue further between now and then, and keep us updated.\n. Hi @AngelVillanueva \n\nI've got some bad news... we're not in a good position to support the templates feature right now, and we're considering dropping it due to its lack of stability. Please see this [mailing list thread](https://groups.google.com/forum/#!topic/prawn-ruby/S6gXA-i0-do) for details.\n\nI have tagged the ticket as a templates issue, so that it can be found by the folks who have volunteered to help with fixing this area of Prawn. But because it won't see any attention from the core team in the near future, I'm closing the ticket. I will transfer this ticket, re-open it, and CC you if and when we decide to extract templates into their own gem.\n. @hmt: See this: https://github.com/prawnpdf/prawn-table/pull/32  -- the main blockers right now are documentation and maybe some code cleanup, but you can try running from @straydogstudio's fork for the moment... it should work!\n. Hi, sorry for the long delay in response. If this is something you're still interested in working on, please post to the [Prawn mailing list](https://groups.google.com/forum/#!forum/prawn-ruby) and hopefully someone can give you guidance.\n\nI'd certainly be interested in a patch!\n. We've decided to go ahead and drop support for Ruby 1.8 in Prawn 1.0. I'll take a look at merging this patch in the near future, assuming I can replicate the problem.\n. Merged ,thank you! There was a build error on travis that I'm hoping was transient... could not reproduce on 1.9.3 locally, and re-running caused it to pass in travis. But if we keep seeing failures, I'll need to revisit this patch.\n\nCongrats @basvk, you now have commit access! Please see the relevant guidelines here:\nhttps://groups.google.com/forum/#!topic/prawn-ruby/BKrw67vyEtA\n. @cjapes: I agree with @vemv in that I don't expect this would give us any noticeable performance gain. If you actually benchmarked this and found a major improvement, please post your results + update against master, then re-open the pull request.\n. @phurley: Can you post a comment with some example code that demonstrates the use case?\n. Closing, but will re-open once I see an example. (Tagged as needs-revisions so others can find it, too)\n. Hi, I merged a slightly modified version of this patch into master -- it makes sure to use absolute rather than relative coordinates, which will avoid adding extra space on pages with non-zero margins. Please give master a try and see if it works as you'd expect! \n. Commit: https://github.com/prawnpdf/prawn/commit/3610f91c6d99f49ed57d73cb8f631613e61e553b\n. Sorry for the long delay in response.\n\nIt looks like indentation is being added, but on the left side, which is almost certainly the wrong behavior for RTL text. Reopening this for a while to see if anyone wants to investigate further.\n. @simplej  or someone else with this problem, can you confirm the fix on #795 works as you'd want it to?\n. Merged #795 with a test, hope it resolves this issue.\n. The issue here is that for whatever reason (we'd need to investigate), setting the global `text_direction` does not pass `:direction => :rtl` to the `text()` method, so the fixed code never runs, and the `:ltr` indent is used by default.\n\nHere's a code sample which I think works correctly:\n\n``` ruby\nrequire \"bidi\"\n\nrequire_relative \"lib/prawn\"\n\nPrawn::Document.generate(\"hebrew-indent.pdf\") do\n  font(\"#{Prawn::BASEDIR}/data/fonts/DejaVuSans.ttf\")\n\n  bidi = Bidi.new\n  s = bidi.render_visual \"\u05e2\u05d1\u05e8\u05d9\u05ea \u05dc\u05dc\u05d0 \u05d4\u05d6\u05d7\u05d4\"\n  text s, :direction => :rtl\n  s = bidi.render_visual \"\u05e2\u05d1\u05e8\u05d9\u05ea \u05e2\u05dd \u05d4\u05d6\u05d7\u05d4\"\n  text s, :indent_paragraphs => 60, :direction => :rtl\nend\n```\n\n(note I changed the font and require to make it easier for others to test with against master, but your original font will have the same result)\n\n![](http://i.imgur.com/zy7CavZ.png)\n\nSo, a fix for this would involve writing a test similar to the one on #795, but using the global text direction method rather than specifying direction on each text call. Then, figure out how that default gets handled internally, and update accordingly. It may be as simple as assuming that if `:direction` isn't specified that we should use `doc.text_direction`, rather than hardcoding to `:ltr`.\n\nWe should probably fix this before the next release. @elad if you have time to even start on this by writing the test and open a pull request, that'd be helpful. Otherwise I'll take a look when I find time.\n. > I'm not too familiar with the code, but looking at the text method I don't see where options would even inherit anything from the global document settings.\n\nThe relationship is inverted, `:direction` gets passed down into the initializer of a `Formatted::Text::Box`, which will default to `doc.text_direction` if the `:direction` key is not provided. \n\nSo instead of doing `options.fetch(:direction, :ltr)`, we could probably do `options.fetch(:direction, text_direction)` and that would work. `self` is the document object, so you don't need to dig into the options hash.\n\nWith this rewritten method, your original example seems to work correctly for me:\n\n``` ruby\n    def draw_indented_formatted_line(string, options)\n      gap = options.fetch(:direction, text_direction) == :ltr ?\n              [@indent_paragraphs, 0] : [0, @indent_paragraphs]\n\n      indent(*gap) do\n        fill_formatted_text_box(string, options.dup.merge(:single_line => true))\n      end\n    end\n```\n\nThe `indent()` method  is not text-specific, and so you'd need to explicitly use something like this to put the indentation on the right side:\n\n``` ruby\nPrawn::Document.generate(\"hebrew-indent.pdf\") do\n  font(\"#{Prawn::BASEDIR}/data/fonts/DejaVuSans.ttf\")\n\n  self.text_direction = :rtl\n\n  bidi = Bidi.new\n\n  indent(0, 60) do\n    s = bidi.render_visual \"\u05e2\u05d1\u05e8\u05d9\u05ea \u05e2\u05dd \u05d4\u05d6\u05d7\u05d4\"\n    text s\n  end\nend\n```\n\nSo I don't think there's a bug there. Let me know if I misunderstood you, though. Even using `:indent_paragraphs` within an indent block seems to look OK.\n\nIf I got this right, the change should be the one line revision to `options.fetch(:direction, ...)` combined with a test for the global text_direction attribute. If you can do a pull request for that I should be able to merge quickly.\n. @elad: Note I had misunderstood a part of your comment  about indent(), so I updated the above to comment to make it clearer.\n. @elad I guess it wouldn't hurt to test each case, so go for it. Also, thanks for verifying this in general, I had merged with fingers crossed there because I didn't get a response back on this ticket from the original  reporter.\n. @elad, Make a branch off the main repo, this way any contributor could help revise it where needed. Happy to review when you're ready.\n. Sorry that it took us so long to respond. I can see this might be a problem, but I'm unsure how it's solved in other applications, or what the usual use cases are like. The issue actually seems that Prawn does NOT flip these characters, but instead renders them right-to-left character by character, so something like `\"(foo)\"` becomes`\")oof(\"`\n\nI don't know that there is a smart way for us to detect characters that would need to be flipped, and I'd hesitate to do so unless there was a well-defined spec or a common convention used elsewhere. There may well be one, but this is not an area I'm very familiar with.\n\nDoes anyone have insights on this? I will leave this open for a few weeks in the hopes that some extra research gets added to the ticket.\n. Thanks @elad, what you've linked here is already helpful. Strong internationalization support is one of the things we care a lot about, so even if you don't implement this, the research will help me or someone else write a patch.\n. @elad I think we can combine both approaches. We should create a `prawn-bidi` gem that depends on Ruby BiDi (either bundled or as a gem dependency), and then add a note in Prawn's documentation that those who need bidrectional support. Our \"no third party dependencies\" rule only applies to the `prawn` gem, it's OK for extensions to have dependencies.\n\nI almost wonder if we should look towards putting most or all RTL-text related functionality into its own gem, so that people can continue to improve it independently of Prawn's release cycle. But that could be a problem to look into later.\n. @elad: Sounds like you have the first steps sorted out. Work on those and then we can figure out the next steps from there.\n. Sure, a documentation patch would be welcome, though the best bet is to put this code snippet in your repository's README (or some other page) and then just link to it from Prawn, so that it doesn't get out of date on our end.\n\nTo make a `prawn-bidi` gem would be even better. It'd do something like automatically call `bidi.render_visual` on input text whenever `:direction => :rtl` was set. It's something you can work on if you'd like, but what you have already is a good starting point.\n. @simplej: Please give @elad's solution a try. Closing for now, but will re-open if we find this does not solve the problem for most cases.\n. @cielavenir: I just removed the reference to \"License of Ruby\" in the license... you can use GPLv2, GPLv3, or the terms specifically listed in the license file (Which are Matz's terms). I have no plans to add an additional license into the mix, because we'd need to contact every contributor, and the terms we have are permissive enough as it is.\n. Hi, please use the [Prawn mailing list](https://groups.google.com/forum/#!forum/prawn-ruby) for these sorts of discussions. If a specific performance issue is identified, a ticket would be welcome for that, but general support topics are better discussed on the mailing list.\n. Hi, we did a bulk close on issues that did not see activity in the last month or so, because the project has been mostly unmaintained for the last several months.\n\nI made [an announcement](https://groups.google.com/forum/#!topic/prawn-ruby/czGB6L4HZhQ) on the Prawn mailing list about this, with the intention of re-opening any ticket that still had someone interested in it.\n\nI've re-opened this one and removed the 'stale' tag, and will investigate as I work through the review queue. Thanks!\n. I've confirmed that the issue above exists in master, and I agree, it's the wrong behavior. Does someone want to investigate this one?\n. @JacobEvelyn: I think this may actually be a bug in canvas... I'll dig deeper and see what I can find.\n. @JacobEvelyn: Can you try master and see if it fixes your issue?\n. I believe this ought to solve your problem, but please leave a comment if it does not and I will re-open.\n. Closing this pull request because we will be dropping Ruby 1.8 support entirely in Prawn 1.0. Sorry that no one responded to you at the time it was submitted.\n. Hi @ovesh. Sorry for the confusion that caused!\n\nWe needed to do a bulk-closure because the project has been effectively out of maintenance for several months now, and we had a ton of issues that were realistically never going to get reviewed.\n\nI made [an announcement](https://groups.google.com/forum/#!topic/prawn-ruby/czGB6L4HZhQ) about this on the Prawn mailing list, and the basic idea was that if you still were watching your issue we could easily re-open it for further review. I'm watching all comments on all issues :-)\n\nI've dropped the stale tag from your ticket and re-opened it. I'll review it as soon as I get a chance... but it may be a while since we're still very limited in availability.\n. Hi @ovesh\n\nI've got some bad news... we're not in a good position to support the templates feature right now, and we're considering dropping it due to its lack of stability. Please see this [mailing list thread](https://groups.google.com/forum/#!topic/prawn-ruby/S6gXA-i0-do) for details.\n\nI have tagged the ticket as a templates issue, so that it can be found by the folks who have volunteered to help with fixing this area of Prawn. But because it won't see any attention from the core team in the near future, I'm closing the ticket. I will transfer this ticket, re-open it, and CC you if and when we decide to extract templates into their own gem.\n. Sorry, but this isn't an issue we can solve in generality, and I don't want to give the false impression that escaping is not necessary. Please consider pre-processing on your end, @nithinstany.\n. I know this is a very old issue, but if you want to throw together a pull request with the basic idea, I'd be open to considering it!\n. Reopening temporarily to get more of Prawn's unresolved issues looked at!\n. I am closing all issues for Prawn::Table, because it is being extracted into its own gem with its own repository (https://github.com/prawnpdf/prawn-table).\n\nAs I close tickets, I'm marking them with a \"table\" tag, so that @hbrandl can easily find them and optionally move them over to the prawn-table issue tracker. Anything that has the table tag can be assumed to have been unresolved at the time I closed it.\n. @timabdulla: We needed to do a bulk-closure because the project has been effectively out of maintenance for several months now, and we had a ton of issues that were realistically never going to get reviewed.\n\nI made [an announcement](https://groups.google.com/forum/#!topic/prawn-ruby/czGB6L4HZhQ) about this on the Prawn mailing list, and the basic idea was that if you still were watching your issue we could easily re-open it for further review. I'm watching all comments on all issues :-)\n\nI've dropped the stale tag from your ticket and re-opened it. I'll review it as soon as I get a chance... but it may be a while since we're still very limited in availability.\n. I haven't touched this code in a _long_ time, but I think this picture more-or-less explains the current behavior (note I added the arrows by hand so it isn't perfectly precise):\n\n![](http://i.imgur.com/nXkngnM.png)\n\nBasically, our measurements try to maintain equality in the spacing from the ascender to the top of the cell, and from the baseline to the bottom of the cell. If we removed this adjustment, then we'd be aligning things based on equal spacing from ascender to top, and descender to bottom, like this:\n\n![](http://i.imgur.com/d6ooo2X.png)\n\nI can't remember the typographic reason for doing things the way we did, but it does seem to match the semantics of something like an HTML table.\n\nBecause table was originally designed for text only, I think we were far more concerned with getting baselines to line up nicely than we were with top line (ascender) alignment.\n\nSorry, but I don't think we can change this behavior. However, I'm open to ideas that might make your desired use case easier. Got any ideas for how to make things better without changing the existing defaults?\n. @timabdulla: Closing this until I hear back from you, but feel free to re-open a new ticket if you find a way to improve Prawn for your use case while keeping the points I mentioned above in mind, or re-open this one if you suspect that I've somehow messed up my understanding of why we're doing things the way we are (totally possible!)\n. Sorry, this issue got closed in a bulk-update to inactive tickets. For more details on what happened there, see this mailing list post:\n\nhttps://groups.google.com/forum/#!topic/prawn-ruby/czGB6L4HZhQ\n\nWe do not have support for TTC, but I'd be willing to consider a patch that added it to TTFunk / Prawn.\n. There's no need to refile the ticket, because we don't track feature requests -- only bugs and pull requests for current work-in-progress. Discussions about features before any work has begun are welcome on the [Prawn mailing list](https://groups.google.com/forum/#!forum/prawn-ruby), though.\n\nI would definitely like to have some sort of FAQ or guides for Prawn as a whole, but we don't have a dedicated place for them yet. For now, perhaps you can write a short blog post or a mailing list post with instructions on how you got around this problem, and then link it here.\n. @fidothe: I've done a lot with binary file formats in general, so please let me know if you run into questions or problems. Although I may be AFK for the next several days, I'll be happy to help out once I return.\n. This issue appears to be resolved in 1.0.0. Please re-open if it is not.\n\nSorry for the very long delay in response!\n. This is a nice idea. @ciopte7 or anyone else who is interested, please prepare a pull request with a patch.\n\nClosing this ticket, because we can't reasonably track feature requests for anything non-critical with our current backlog. But a patch is welcome!\n. @boutil Good idea. Please submit a pull request.\n. @boutil: Thanks, can you open a pull request for that branch so that we can discuss there?\n. We'd also need some tests to show this works as expected (or at least a clear example to show the problem). Closing for now, please re-open if you find time to address these issues @ciopte7 \n. It's a little hard for me to see what this is meant to fix. Please leave a comment with an example demonstrating the use case, and then I'll re-open for further review. \n. Hi guys, \n\nSorry for the very late reply, but you can probably make use of [formatted_text_box](http://rubydoc.info/gems/prawn/Prawn/Text/Formatted#formatted_text_box-instance_method) for this purpose.\n\nIn the future, please use the Prawn mailing list rather than the issue tracker for support requests. (The issue tracker is meant for bug reports, mostly):\n\nhttps://groups.google.com/forum/#!forum/prawn-ruby\n. /cc @cheba -- this is another templates issue.\n. @letronje: The way we handle templates is very low-level, and so there isn't a direct way to do what you'd like to do without digging down into the PDF document structure. Sorry!\n\nFor future support requests, please use the [Prawn mailing list](https://groups.google.com/forum/#!forum/prawn-ruby) rather than the bug tracker.\n. Hi guys, sorry we've been so bad at responding to tickets lately.\n\nIf one of you can point me at a font that's freely downloadable so that I can try to reproduce the issue, that would help a lot.\n\nEven if this is a JRuby-specific problem, we are planning to officially start supporting JRuby soon, so I'll want to keep tracking it!\n. @astjohn: Thanks, I'll take a closer look at this as I work through the review queue.\n. @tazsingh Thanks, I'll give that a try.\n. It looks like this probably was a JRuby issue. I was able to reproduce the bug by simply running our test suite (doh!) on 1.7.4, but it went away when upgrading to 1.7.8.\n\nI'm closing the ticket for now, but please re-open if you can reproduce on 1.7.8. \n\nOther piece of good news: We officially added JRuby support! That means that we consider our build broken when JRuby breaks, and TravisCI has been updated accordingly. \n. Thanks @hbrandl for trying to reproduce this. Since you weren't able to, I'm going to close the ticket out until @johnnyshields or someone else updates with an example to illustrate the problem.\n. Right now we don't split rows that are greater than an entire page across pages. It's something I'd be willing to consider a patch for, and it also would be better to raise an error than glitch the layout until we fix that behavior. Re-opening to remind me to add an exception.\n. I'd like to defer to whatever people think is best here, and give @hbrandl the final say on it since he's the defacto maintainer of tables right now. So please continue to discuss until you all find a solution you're happy with or you run out of fresh ideas. :grin: \n. I am closing all issues for Prawn::Table, because it is being extracted into its own gem with its own repository (https://github.com/prawnpdf/prawn-table).\n\nAs I close tickets, I'm marking them with a \"table\" tag, so that @hbrandl can easily find them and optionally move them over to the prawn-table issue tracker. Anything that has the table tag can be assumed to have been unresolved at the time I closed it.\n. Hi @gettalong: Can you address the build failure and make sure you've merged our master branch? Closing the pull request for now, but feel free to re-open as soon as you've done that.\n. The failures that are showing are issues on Ruby 1.9.3 and JRuby 1.9 mode. Looks like Ruby 2.0 is passing. I will investigate this further myself. Reopening.\n. @gettalong: Can you push your code that merges our master branch? Our latest commit was 8 days ago.\n. @gettalong It looks like we got a green build when I reopened the pull request. I will test locally when I review this patch, and if it looks OK I won't worry about it.\n. Merged, thank you!\n. Hi @ykessler,\n\nThanks for the detailed bug report. This looks like a possible duplicate of the issue we're tracking in #393. I'll add a comment over there to make sure the examples get seen, and we can always re-open this issue if we find out there are differences between it and #393.\n. @ihatemornings: To enable that behavior, you can explicitly map the `:italic` family for your Japanese font to the normal font.\n\nIf Prawn were in a better state of maintenance I'd recommend putting together a pull request to try out the graceful degradation strategy you suggested, but honestly now is not a good time for that.\n\nPlease consider submitting a patch after 1.0 is released. We don't have a timeline yet but hopefully that will be in the next couple months.\n\nI'm closing this ticket for now, but re-open it if the workaround I mentioned doesn't actually work as you'd expect it to.\n. @fidothe: This introduced a behavior change that broke use with Paperclip (see #585). Although that's not an _officially supported_ use case, it would be nice for us to get back to the original behavior as close as we can.\n\nI reverted the code in the hopes that we can revise the patch and re-apply. Do you think you can open a fresh pull request, or re-open your old one? Keep in mind that now that we've dropped Ruby 1.8 support you can probably simplify a bit.\n. Hi @txwikinger:\n\nI can confirm that except in content streams, Prawn encodes all PDF strings as UTF16. That doesn't cause any problems when we're generating PDFs from scratch, but I can see how it might impact using templates.\n\nI don't remember the specific history here, but maybe @yob or @bradediger can fill you in on it. I'm going to close the ticket because it's more of a conversation point than it is a bug report, but please feel free to continue discussion here. If we find a specific bug to fix or feature to add, we can definitely open up a new ticket for it.\n. Yeah, unfortunately our templates feature is very fragile. It works well in some cases, but breaks in all sorts of crazy ways in others. I know very little about that part of Prawn myself.\n\nThe [Prawn mailing list](https://groups.google.com/forum/#!forum/prawn-ruby) might be a good place to continue this discussion.\n. :+1: I like the idea of letting handlers set their own conditions, but would prefer to avoid the metaprogramming. Looking forward to seeing your revisions!\n. @packetmonkey: This is close to how I'd solve the problem, but not exactly what I had in mind. But because the changes I want to make are tiny, I'll just go ahead and make them when I test and merge the patch.\n\nThanks!\n. I will probably merge this by early next week, but we still don't have a timeline for the next 1.0 RC. So for now, use your fork, and then feel free to switch back to Prawn's master once I've merged. From an interface perspective, the only change will be function names.\n. @packetmonkey: I attempted some revisions. Check out my version of this patch and let me know what you think...\n\nhttps://github.com/prawnpdf/prawn/compare/pluggable-images\n. Merged!\n. Hi, can you add a comment here with a realistic use case for me to confirm the problem with? A table with all empty cells seems like a pathological case to me.\n. @sigmike: that gives me what I need to review further, thanks. Right now there is a massive backlog of pull requests that need to be looked at, but since this addresses a defect hopefully it will be processed soon.\n. Thanks, I will take a closer look at this tomorrow.\n. Merged, thank you!\n\nI've also given you commit access. Please see [this mailing list post](https://groups.google.com/forum/#!topic/prawn-ruby/BKrw67vyEtA) for contribution guidelines.\n\nI'm really sorry we took forever to respond to you. Hopefully we'll be a lot more responsive in the future.\n. @timcraft: I was able to reproduce the problem, so there's definitely something weird going on here.\n\nI am doing a complete pass through the issue tracker to make sure all issues are current and reproducible, so it may take me some time to get back to this for further research + fixing. However, if you want to investigate yourself, a patch (or just some more detailed notes on what you discover) is welcome! \n. Thanks for the extra research, this should help a lot.\n. Use 0.12.0 or attempt to fix on a fork... we haven't had a chance to research this yet.\n. @donv You could also try using a TTF font, since we process those using entirely different code\n. You can use font family mappings to fix that issue:\n\nhttps://github.com/prawnpdf/prawn/blob/master/lib/prawn/font.rb#L156-L181\n\nYou just will need to grab an ArialBold font for bold, etc.\n. Hi, please try the `afm_bugs` branch, I think it resolves this issue. (There are a few other related issues, so if any get confirmed I'll merge)\n. Great! Will merge the fix today and cut a 0.13.1 release Monday.\n. Hi @hbrandl,\n\nThanks for the patch. I've added it to my review queue (which is sadly really long). I'm going to need to compare this to what was attempted by @sigmike in #576, and also read up a bit more on #407 before I can give a proper review.\n. @hbrandl:\n\nThanks again for working on this. I think I'll push this branch upstream and then we can continue to revise it from there... I want to attempt extracting this code into a class, since it seems to all operate on the `cells` collection.\n. The fixes I want to make are structural only, so go ahead and get the tests passing again and I'll make my revisions when I merge, it's trivial stuff.\n. Just a heads up... this won't make the 0.13.0 release but if I find time in the next couple weeks to work on this I can certainly ship it out in a 0.13.x maintenance release.\n. Great, Thanks @hbrandl!\n. @hbrandl Thanks for working on this. We won't ship this in the 0.13.1 release that I'm cutting today, but it sounds like this pull request is ready for me to review now, right? If so, I'll try to get it merged before our next release.\n. @hbrandl I opened a new pull request so that we can do revisions together on the same branch (you have commit access). Please see #620. Only pending feedback I need from you at this point is about that test without assertions, but I will also work on some refactorings of this code on that branch.\n. Thanks!\n. Hi @gthiruva,\n\nCan you try running again while passing `:optimize_objects => true` to generate? That reduced the 500+mb file down to 11mb for me.\n. Closing, but please re-open if `:optimize_objects` doesn't work for you.\n. If you want to work on it, go ahead! There's nothing blocking it except my available time right now, and it should be an easy change to make... just search the project for anything references to `ruby18`, `ruby19` etc.\n. No, please don't. There's no real advantage other than aesthetics, and I personally dislike the new syntax. It is difficult to align hash keys cleanly in the new syntax.\n\nI don't have strong feelings about this, as long as we are consistent within each file. But it wouldn't be a good use of time to go back and convert old files, IMO.\n. So in theory our 1.9 code is better at dealing with encodings than the 1.8 code, but in practice there are extra challenges involved in providing that support, and a bit of cargo-culting going on as well. When I see `force_encoding` I usually try to replace them with `encode`, especially for binary strings.\n\nIf it looks like the wrong functions are being used, first check to see what the tests say. If they say nothing, then add a test with what you think is the right behavior, then change the code. If you run into specific problems, let me know and we can take a closer look at it together.\n. I didn't get the same output as you did, but I did get a messed up PDF. :cry:\n\nOur templating support can sometimes have problems with certain kinds of PDFs, and we've been having some difficulty stabilizing it. I am considering removing it from Prawn entirely, moving it into its own gem. Follow up on [that discussion](https://groups.google.com/forum/#!topic/prawn-ruby/S6gXA-i0-do) on the mailing list.\n\nI'm going to leave your ticket open until a decision is made. Sorry I couldn't be more helpful.\n. @nhimbkno1: Unfortunately, we don't have a good  answer to that. See this [mailing list conversation](https://groups.google.com/forum/#!topic/prawn-ruby/S6gXA-i0-do) -- in short we're considering dropping support for templates due to their lack of stability.\n\n@cheba is one of the people who has volunteered to figure out a better path forward, but I'm unsure if he's planning to investigate this particular issue.\n. Closing this ticket temporarily, because no one on core is presently looking into template issues. Pull requests are welcome though, and I've tagged the ticket with \"templates\" to make it easy to find for those volunteers who are trying to fix template problems.\n. @nhimbkno1 You're writing a binary file using `File.write` rather than `File.binwrite` so what's probably happening is that it's trying to treat the PDF output as UTF-8 text, which will cause encoding errors. Try using `File.binwrite` instead.\n. @cheba: There is clearly a rendering issue in that screenshot, when compared to the source template. This means either that Prawn is corrupting the PDF or that the viewer has a bug.\n\nIt's not a matter of just not being happy with how it looks, it's that it breaks the original formatting.\n. @nhimbkno1: Can you give us the link again to the original template before Prawn has rendered anything on it? I just want to make sure we're using the right input file.\n. The first of those rendered fine for me in PDF.js on Firefox 25.0, did not try the others. I can confirm that your post-template version does not run correctly there, though.\n\n@cheba We need to determine whether this is a corrupted PDF or whether its a bug in PDF.js. It doesn't seem to me like the Firefox nightly builds are clean testing environment to figure that out in. I also saw rendering errors using Ubuntu's document viewer, so I think there may be at least some edge case we're hitting here.\n. I've confirmed the same results in Adobe Reader... original PDF looks fine, template PDF looks corrupted in the screenshot @nhimbkno1 posted. \n\n@cheba: Next step would probably be to look at the graphics states and font operations going on in the PDF and see if we're messing them up anywhere. It's been far too long since I've manually inspected a PDF to give much guidance, but that's where I'd start.\n. Can you post the complete trace please? (or at least the parts that run through the Prawn code)\n. Also, please let me know whether there are errors on the following two commits:\n\n1) 8aec8f8b3618651a093fef8c50296850a30c09c6\n2) 6a05a4ea6e22b43bb0773f7e7b1f7936a6a431b6\n\nWe had two recent changes to the image stuff, and knowing whether you experience failures on those commits or not will help me determine if it was one of those recent changes that caused the problem, or whether we need to dig farther back.\n. @nathany: Please try from master again, I reverted a commit.\n. @nathany: Please keep an eye on #570, because we'll probably re-introduce the patch I reverted at some point, and I want to make sure we don't break your code again!\n. For the argument name, lets use text_formatter. Everything else sounds ok. let me know when you are ready for a review.\n. @packetmonkey: I saw a similar issue with Travis (though a slightly different one) earlier today. We may have some order dependence in our tests, or global state that's causing that. We're going to need to be on the lookout for that, and hopefully we'll isolate it sooner or later.\n\nFor now, let's just make `BasicHTML` an empty subclass of `Parser`, in the same namespace (`Text::Formatted`). This will allow us to use the new name without breaking old behavior temporarily, and we can consider getting rid of the old class after RC3. That's when I'm going to start making some API decisions.\n. @cs: I've merged @packetmonkey's version of your pull request because it addresses the concerns I had about your original patch. I've also given you commit access! For our guidelines on contribution, please see: https://groups.google.com/forum/#!topic/prawn-ruby/BKrw67vyEtA\n\nIf you have concerns about the way we tweaked your pull request, please feel free to open up a fresh one with new ideas. Otherwise, sorry for our very long delay in responding, and thanks for contributing to Prawn!\n. Thanks!\n. Can someone try to replicate this one for me? Just run `rake manual` a few times.\n. Nice! Thank you.\n. After running your script for a littlewhile, I did get the \"Result too large!\" error, but I'm using Ruby 2.0.0-p0. I should upgrade that and try again.\n. Could not reproduce after upgrading to the latest ruby-2.0.0. Closing until we see this one in the wild again.\n. You have a typo in your call to `define_grid` (you wrote `:colums` instead of `:columns`. Prawn is capable of catching these errors if you set `Prawn.debug = true`, so you may want to use it in the future.\n. Here's an example of correct usage, hopefully it will help!\n\n``` ruby\nrequire \"prawn\"\n\nPrawn.debug = true\n\nclass PDFCreate\n\n    def doku\n        pdf = Prawn::Document.new\n        pdf.define_grid(:columns => 1, :rows => 5, :gutter => 10)\n\n        pdf.grid(0,0).bounding_box do\n          pdf.text \"test 0\"\n        end\n\n        pdf.grid(2,0).bounding_box do\n          pdf.text \"test 2\"\n        end\n\n        pdf.grid(4,0).bounding_box do\n          pdf.text \"test 4\"\n        end\n\n        pdf.render_file \"doku.pdf\"\n    end\nend\n\ncpdf = PDFCreate.new\ncpdf.doku\n```\n. @hschraep: Prawn should raise a much more sane error there, which is what `Prawn.debug` will do. Maybe we should turn that behavior on by default.\n. This is an intermediate step towards extracting our core PDF functionality into its own gem... it moves `prawn/core/*` into `pdf/*`. \n\nThere are a couple concerns here:\n- Now we need to write `::Hash` anywhere within the PDF namespace when we want to reference the Ruby core object, because `PDF::Reader` defines `PDF::Hash`\n- There are some circular dependencies in the code. While we'd expect the `Prawn` namespace to freely reference this new `PDF` namespace, we'd want to avoid the other direction if possible. In practice, this probably means either moving some more code down into into `PDF` namespace, injecting dependencies, or otherwise clarifying relationships.\n- Some things probably don't belong in the `PDF` namespace, like our formatted text support. Some things in the `Prawn` namespace probably need to be pushed down as well.\n\nDespite these caveats, I'm considering doing a merge of this code ahead of the RC3 release, so that we can get feedback on it. I think splitting Prawn's concerns between \"manipulating the PDF format\" and \"constructing a PDF document\" would be a very beneficial organizing principle for us, even if our current code isn't cleanly representing those dividing lines.\n\nThoughts? //cc @bradediger @Bluejade @yob @jonsgreen @packetmonkey @fidothe @cheba @gettalong \n. Note to self... we may also want to use the namespace PDF::Core instead of PDF::*, and release a gem called `pdf-core`. \n. @packetmonkey Ordinarily I'd agree about standard namespaces, but in this case I feel like we've earned the place. We've maintained the only major pure-Ruby PDF library in active use for six years now, and I am the (admittedly completely inactive) maintainer of its predecessor (PDF::Writer), of which the original author has labeled Prawn its spiritual successor. We also maintain PDF::Inspector and PDF::Reader (which @yob has maintained for as long as we've been doing Prawn)\n\nThe stuff we're going to do in our low-level PDF library will be directly following the standard, so there is less room for interpretation than some other libraries might have. Obviously the code needs improving, but I want others to help with that!\n. @packetmonkey I forgot to mention that based on what you said, I'd definitely prefer `PDF::Core::*` over `PDF::*`. That allows us to live in the standard namespace, but not completely claim it for our own.\n. I just discussed this in #prawn with @packetmonkey and we agreed that while taking over the whole PDF::\\* namespace is a bad idea, it would be okay to move forward with the plan to create a `pdf-core` gem, if nothing else as an experiment that will help us figure out if it's a good idea or not.\n\nIf anyone else has thoughts on this please do share them, otherwise I'll work on merging this before RC3, then do the gem separation before RC4 after we see what the impact on users is like.\n. Still need to move pdf/text/\\* but that gets us close to having everything under PDF::Core\n. Okay, now I've eliminated references to `Prawn` from within `PDF::Core`, which should get us one step closer to extraction. Remaining steps include a comprehensive documentation sweep, and splitting up the unit tests along the same dividing lines.\n\nBut I would like to merge before then, if only to get a bit of feedback in the next two weeks before the RC3 from those riding master.\n\nIf there are no objections, I'll try a merge early next week, maybe on Monday or Tuesday.\n. The \"Files Changed\" view on this pull request is probably useless, but you can get the rough idea of what this did by looking at the [pdf/core folder](https://github.com/prawnpdf/prawn/tree/4168ba5cf3dc1964a183203e51973d6a92ed0848/lib/pdf/core). \n. This has been merged, but my first step if it causes any major problems would be to revert and fix on the branch. Let's keep our fingers crossed!\n. Although we're probably leaning towards dropping template support and extracting it into a gem, I am happy to accept pull requests improving its stability up until the time that we do that.\n\nThis has tests, seems fairly well constrained, and the only thing I would want to clean up before merging is to wrap all lines at 80 characters (which I could do on merge).\n\n@cheba can you verify the fix? You seem to be the one who's spent the most time with our templates code in the last couple weeks, so I'd be happy to hear your thoughts. :grin:\n. @yob @cheba @bradediger: Anyone have a vote on merge or no-merge on this one? I'm going to be breaking out the template support soon, and if we're going to apply this change I want to do it before I start tearing things apart.\n\nIn other words, even if this isn't a perfect solution, is templates better off with it? If so, I'd say merge.\n. I'm going to close this out then, sorry @krishicks. Hopefully this code is at least fixing the problem for your own needs,\nbut it seems like we just don't have the resources to support templates anymore.\n. Hi Thomas,\n\nCan you please give me an example I can run that shows me what this code is meant to do? (Screenshots would be a bonus!)\n. @ciopte7: Just a reminder, I need a code example to demonstrate this change to me before I can review it.\n. Closing this out because I don't have an example to evaluate it with. Anyone is welcome to request further review on this if an example can be provided!\n. Hi. The TTF fonts that ship with Prawn are for testing and use with the manual... they're not meant for regular use.\nDo a web search for \"Free Japanese TTF font\" and I'm sure you'll probably find something.\n\nPS: Please use the [Prawn mailing list](https://groups.google.com/forum/#!forum/prawn-ruby) rather than the issue tracker for support requests in the future. That may also be a good place to ask for sources of free Japanese fonts that work well with Prawn.\n. Although I imagine there might be ways to make Prawn handle this kind of thing better automatically, it's not an area I'm experienced in. Traditionally, long running processes (such as generating a PDF) ought to be done in a work queue (i.e. resque, sidekiq, delayedjob, etc.) outside of your main Rails process. Is there a reason why you're not doing that?\n. @pandar1 Please try implementing your idea and open a pull request. Then we'll try to find someone to verify \nthe approach, and if it looks good, we'll merge it.\n. @pandar1: Just to clarify, the feedback that others have given you here is what I would have expected you to get on your pull request, I just didn't have the specific knowledge to say it nearly as clearly as others have here. So at this point there is no need to submit a patch!\n\nIt sounds like the only reason `sleep` is helping you at all is that it gets around MRI's global locking. That's a side-effect, and not something I want to put into Prawn.\n\nFYI, JRuby 1.7.8+ is officially supported in the 1.0 RCs. Rubinius still has some failures, and we don't have plans to address them in the immediate future. Please try JRuby and see if it helps, and if not, then run your jobs in a background process and things should work OK for you.\n. Hi: That does look like it could be an issue, though it would help to have a code example or test to demonstrate the failure. It was my intention to allow custom font styles, though I'm unsure what has changed since that documentation was written.\n\nCan you provide a failing example demonstrating the problem? Could be a test or just a script.\n. I think what we have here is just a missed requirement: the documentation was written before we had formatted text support in Prawn, and it probably still works when not using formatted text. But the formatted text stuff never picked up support for it, probably as an oversight.\n\nUnfortunately Prawn has a lot of cobwebs, and we're dusting them off gradually, but its going to be some time before we can remember why various things are the way they are. :cry:\n\nGlad to hear there is a workaround, but I'd also be happy to try to fix this once we have a reproducing example. Thanks for the report!\n. @joshtaylor To clarify, are you expecting that something like the following should work?\n\n``` ruby\nformatted_text [{ :text => \"Hi there\", :styles => [:thin] }]\n```\n\nOr did you have something else in mind?\n. I agree, something like that would be desirable but I need to take a closer look at the implementation details to think through what would work best. I think the only reason why we use an array at all is to facilitate things like nested HTML tags one level up from here, and I haven't looked at how we handle order dependency here, if at all.\n. @joshtaylor Thinking about this a bit more, I decided the right thing to do for now is just to update the documentation to be a bit clearer.\n\nThe feature you're looking for is a welcome addition and I'd be happy to consider a pull request for it, but I don't have  time myself to do the legwork on it right now.\n\nThanks for reporting this issue, and if you find time to work on improving the feature, please do send us a patch!\n. @ayghor: I'm guessing that you may have run into issues that made the image render poorly that are related to the fact that your image is in 300dpi but Prawn's measurements are all in 1/72 inch standard PDF points.\n\nThere is a ]really long thread on the mailing list](https://groups.google.com/forum/#!searchin/prawn-ruby/dpi/prawn-ruby/MbMsCx862iY/GmVqf0mEJjIJ) related to this topic, which may be helpful. I'm leaving this ticket open until you have a chance to let me know if that helps.\n\nI don't remember the details of this issue, but I feel like there may be room for Prawn to help with the conversion between its default units and arbitrary DPI when specifying things like image dimensions.\n. Okay, sounds like you were running up against a renderer error then. Thanks for getting back to me on this, I'll go ahead and close the ticket now.\n. @yob That was the vague idea I was hinting at, and was hoping @ayghor would have a suggestion. \n\nAnyway, it's not like we don't have more pressing issues to deal with, but I'd still be interested in proposals.\n. @packetmonkey Cool! There are some additional stats over on #324.\n. I am going to close out this PR for now, because #600 seems to be much more promising. Will re-open if we discover that there are blockers to that patch.\n. All of this is really exciting, hopefully you can get the tests to go green and figure out why we're slow on JRuby, but otherwise I'm very interested in this approach.\n\nFor the MRI memory variation, this may be due to mark-and-sweep GC running \"whenever it gets around to it\". So although there may be leak, seeing memory spikes in Ruby are not uncommon whenever there a bunch of short-lived objects that haven't been GCed yet.\n. @cheba Which JRuby did you run on? I haven't even run my own optimizations there yet, but I'd like to be consistent. Either 1.7.8 or 1.7.9 would be OK. Earlier than that and we run into JRuby bugs affecting Prawn's font stuff.\n. Still, we are seeing less memory usage overall on JRuby 1.7.9 with this patch than without it. I would be OK with requiring JRuby 1.7.9+ since it's a bug fix release anyway.\n\nPlease work on figuring out the spec failures, and revising test coverage where necessary. This seems more promising than my branch at the moment.\n. I think you're still seeing GC related memory fluctuations: we do care about peak utilization but it may be hard to get a clear sense of how much of this is actual memory used vs. garbage not being collected. \n\nAnyway, I feel like this definitely is an improvement over what we have now, so revise the tests as needed and let's see if we can try to get this merged before 0.14.0 next month.\n. I merged it! In doing so, I squashed everything down into a single commit to make reverting easier if we experience problems.\n\nTwo points:\n1. In the future please use feature branches on prawnpdf rather than your fork, it makes upstream management a little bit easier and allows all Prawn committers to make revisions to the same pull request.\n2. I am considering releasing this code as part of a 0.13.1 maintenance release, because it only touches internal features. Any concerns there?\n. Yes, we want to be able to have all contributors make commits to each other's feature branches. This makes it so that simple changes can be directly applied, speeding up feedback loops. I think it's still safe to rewrite history as needed as long as you only affect the commits on your branch and not master or stable. Also, we can always rebase before we merge, as I did with this branch.\n\nI'm going to merge this into stable now, and it will be included in the 0.13.1 release, whenever that happens. Thanks! \n. @yob: If you have time off and want to help Prawn, this is the issue that I could most use your assistance with. I would like to get templates separated out as much as possible, so that we can turn them into their own gem later. \n\nA fine starting point  would be a lib/prawn/templates.rb that reopens whatever classes are necessary. Better would be to define whatever extension points are necessary to avoid the need to reopen classes.\n. Anyone want to work on this one? If not I'll need to give it a shot some time between the 0.14.0 and 0.15.0 releases.\n. Done!\n. Hi, thanks for the detailed bug report and tests. It looks like you're running into this issue when you use one of the built-in fonts. Have you checked if this error happens when you explicitly use a TTF font for the default font as well as the fallback?\n\nI'll verify that myself when I get around to looking at this issue, but I thought I'd mention it as it might be a workaround.\n. I've been away from the project for a long time so my research lead time is very slow. If you want to put some effort into investigating the issue, please do! Even getting a little bit farther with it will help me resolve it faster once I get around to looking at it.\n. Hi, your test does not fail on master for me right now, so I'm not sure how to investigate further. Can you double check your code to be sure it's failing on current master?\n. Closing but will re-open once you confirm the failure.\n. Thanks, trying the code from your fork did the trick for me, maybe I just messed something up before.\n\nI have not merged the test yet because I want to revise it a little bit, but the bug is confirmed! Feel free to keep researching a fix, otherwise anyone else is welcome to work on this one if I don't get to it first.\n. This is probably not its own distinct bug, but a result of #729 and #779. The (unfortunate) reality at present is that if you want to mix AFM (PDF built-in) fonts and TTF fonts in the same Prawn document, you can expect bugs and bad behaviors.\n\nThe solution is to use TTF throughout your document whenever you need internationalization support. This is going to most likely continue to be the recommendation even after we clarify behaviors, but in the future you'll get better warnings / errors to detect this sort of problem.\n. I've confirmed that not even #793 seems to fix this issue, so reopening.\n. @cheba, just to clarify, the files you added to the Gemfile would only be installed on RBX, right?\n. Merged, thanks!\n. Looks good. Merged, thank you! This will go out in 0.13.1\n. Hi, can you take a look at #268 and confirm whether this ticket is describing the same issue?\n. Okay, closing this one to keep discussion in one place. This is a confirmed bug, and anyone is welcome to research a fix for it.\n. This pull request isn't new code, it's the old code that has worked for us for every Prawn release except the 1.0RCs, where the AFM gem was added. So the only thing I'm doing here is reverting to known-good code rather than patching broken code.\n\nPrawn traditionally had the policy of not using any external dependencies, because we wanted to avoid upstream problems from affecting our ability to serve our users. This is an example of why (although probably a small one).\n\nIf we were to contribute to AFM, I'd need to figure out what's wrong with it, submit a pull request, hope they will release a fix soon, and if they don't, things will remain broken in Prawn until they do.\n\nIf we revert this code, I can cut a 0.13.1 release as soon as I'm ready, as early as today.\n\nThat said, we should definitely contribute a bug report upstream at the minimum, and maybe even a patch. But because I only have five hours a week to work on all Prawn-related tasks, I probably won't be the one to do that.\n. I think that I'd prefer providing AFM parsing as part of PDF::Core when we extract it. This way, PDF::Reader can still reuse the same code as Prawn, as could others who are working on PDF stuff.\n\nI would prefer not to rely on external dependencies that we can't cut gems for ourselves. But I think I'd be more receptive to the idea if you submit a pull request to AFM, see it get accepted, and see a gem cut shortly afterwards. \n\nSo if you want to try that, go for it.  But keep in mind we have many more serious problems to solve with Prawn than which AFM parser we use.\n. @cheba: Another thing to consider is that right now Prawn's test suite isn't very good. If it was, we would have caught these issues by way of failing tests rather than bug reports several months later.\n\nThe best way to change my mind on using external dependencies would be to improve our test coverage to the point where when something breaks due to upstream code, we know about it.\n. Also worth noting: Not one of @yob's accepted pull requests have been released in the gem yet -- the last gem release was in 2010.\n. @yob: None of your changes upstream in AFM have ever been released in gem form. I fully understand Prawn's implementation of the AFM parser as it stands and it hasn't caused us a large maintenance burden over the years. It's also unlikely to change much over the years, and it will be extracted into PDF::Core eventually.\n\nAs I said, I feel there are so many more important issues with Prawn that I'd rather focus on something we can agree is useful rather than something I'm not that interested in.\n\nThat said, if you can ask the maintainer of AFM for commit bit and ability to release gems on RubyGems, I'd be fine switching back to it if we can fix the bugs.\n. I merged this change. If we want to revisit the conversation about the AFM gem, we can do so once a new release is cut that fixes #499 and #578, but I'm still not sold on the possible value to be gained from that.\n. Sounds right to me! Feel free to write a patch for this.\n. Sorry... I may have spoke too soon.\n\nThe initial state of a document is to have a single page created, and to skip page creation you need to pass `:skip_page_creation` on construction. It appears that page count is reporting the correct numbers in this case:\n\n``` ruby\n>> Prawn::Document.new.page_count\n=> 1\n>> Prawn::Document.new(:skip_page_creation => true).page_count\n=> 0\n```\n\nPlease let me know if I've misunderstood your request, but it doesn't sound like a bug after all.\n. It's one of those things where purity collides with practicality: I would like to start from an empty state, but for most people, most of the time it would mean writing the same exact `start_new_page` line as the very first line of their program. Needing to do some work before you create a page is the less common case, so we didn't make it the default.\n. Hi @justbuchanan,\n\nCan you give the code on #512 a try? You'll need to pass `reflow_margins: true` to the column box to get the behavior you're looking for.\n\nIf it works as you'd expect, I can merge it into master and ship this in the 0.14.0 release on January 15.\n. Also, if #512 isn't what you are looking for, feel free to open a different pull request. I don't think we can assume that a column box ought to start at the top of the margin box, but I'd be fine with adding an option to allow that behavior, and maybe down the line enabling it by default.\n. I closed it because it didn't have a clear code example, and then never heard back from its author. But it's re-opened now, so I'll go ahead and resolve the merge conflicts and get this into master. It introduces a new behavior, so I won't be able to put it in the 0.13.1 release that is coming out on Monday, but it will make it into 0.14.0 in a few weeks!\n. @justbuchanan There was a minor problem in that code, in that it used relative coordinates rather than absolute coordinates, which probably only works in documents with a zero margin. Can you try my slightly modified version on master and see if it works as expected?\n. We got lucky with this one, because all I needed to do was fix a few characters of code. Thanks @phurley for implementing it, and @justbuchanan for providing a code sample to help me overcome my own laziness. :grinning: \n. Nice! I'll ship this into 0.13.1. Just for context, what the fuck is up with the old JRuby numbers?\n. Right now transactions seem to only be safe within a single page... if you cross a page boundary the internal state can get corrupted. This is definitely not what we intended, but it's a known issue at the moment. Can you look at #268 and confirm that it's related to your issue?\n. Closing as a possible duplicate of #268. \n\n@justbuchanan: Please keep an eye on that ticket, and leave a comment here to re-open this issue if whatever we do to fix #268 does not also fix this problem, or if you discover that the two issues are unrelated.\n. Ok. This is probably our most significant issue to look at currently, because it has far-reaching effects. Unfortunately I don't think I'll have time to research it before January, but I will definitely look into it if others haven't made progress by then. A minimal reproducing test case, additional investigations, or a fix are all welcome!\n. @bradediger Can you confirm whether or not adding a subtable should expand the with of the enclosing column? What @hbrandl said sounds right, but I'm unsure of what the original intent was.\n. Closing this ticket as stale, but I'll keep the unresolved issue in the test suite. To get this ticket reopened, all anyone needs to do is move the research a little bit further along. Even some additional notes about the problem will do!\n. Reopening temporarily as part of an effort to get more of Prawn's unresolved issues looked at!\n. I am closing all issues for Prawn::Table, because it is being extracted into its own gem with its own repository (https://github.com/prawnpdf/prawn-table).\n\nAs I close tickets, I'm marking them with a \"table\" tag, so that @hbrandl can easily find them and optionally move them over to the prawn-table issue tracker. Anything that has the table tag can be assumed to have been unresolved at the time I closed it.\n. This is not even close to being ready to merge yet, because I did the extraction by literally just dumping lib/pdf/\\* into a gem and updating the requires. However, it is a nice proof of concept, because the tests are passing and the manual is building. We will need to move the PDF::Core specific tests over into that gem, and also add things like licensing info, improvement gemspec info, etc before we can merge this into master.\n. @nathansamson: We have a few reasons, but the most important of which is probably that we want to start offering a stable API in Prawn, but we don't feel the internals are quite ready to stabilize. We could just mark them as part of our private API, but I think that would discourage us from properly solving the problem.\n\nPrawn really is a document authoring system and a PDF format writer glued together in one project. Those two things are vastly different from one another in scope: some of Prawn's features are very high level, others are extremely low level (like performing our own garbage collection routine on PDF objects). This is like having a web server and a web framework implemented in the same project, and it complicates things organizationally.\n\nBecause these gems will change at different times for different reasons, the release coordination isn't that difficult -- it has worked out OK for us with TTFunk and pdf-inspector at least.\n\nThere's some additional discussion on the topic here:\nhttps://groups.google.com/forum/#!topic/prawn-ruby/PwxhCiJgfcI\n. I'm planning to delay this one until after 0.14.0, but hopefully will work on getting it merged as soon as possible after that to give it some time to live on master before we get close to the 0.15.0 release.\n. I moved any test that was easy to move into the PDF::Core repository, and enabled Travis CI for that repo. You can find PDF::Core at: https://github.com/prawnpdf/pdf-core\n\nThere are still a lot of cases where Prawn is reaching into PDF::Core where it shouldn't, and a good portion of PDF::Core's test coverage still comes indirectly via Prawn, which is something we will want to fix in the future.\n\nThere are still some things I need to do to PDF::Core to make it \"release ready\", but I have cut a couple 0.0.x gems that seem to be working OK. Any objections to me merging to master soon as long as I promise to cut a better release of PDF::Core before our next major Prawn release?\n\nUntil I do that, I'm basically needing to maintain a forked codebase, and so I'd rather not keep doing that. I also want to make sure that the PDF::Core gem is used a little bit in master before 0.15.0, because it's a big change.\n. We will begin officially supporting Prawn 2.1.0 starting in Prawn 0.15.0. I'll be running it in development and we're already tracking on CI -- the build will now fail if there is a 2.1.0-related failure.\n. Thanks, but it's not a syntax error, it's using range syntax:\n\n``` ruby\n>> def x; rand(1...10); end\n=> :x\n>> def y; rand(10..20); end\n=> :y\n>> x..y\n=> 3..18\n```\n. I too would like to see performance numbers from real world apps with our latest code. If we are still seeing problems this option would be OK to add, but we may not need it now.\n. Closing this out, but may re-open after hearing back from @MarkDBlackwell about the latest release.\n. Go ahead and write a patch then @MarkDBlackwell. We don't track feature requests here, but even a partially implemented pull request would move this further along.\n. @nathansamson The bad news is prawn-fast-png is broken on 0.13, and probably unmaintained at this point. The good news is that @packetmonkey just built prawn-gmagick, which has similar performance and is a bit easier to get up and running with. (It _only_ works on 0.13+ though)\n. @MarkDBlackwell I should have waited to respond to your comment until I talked to other folks who are interested in this problem. Now that I've discussed it a bit with @cheba and @packetmonkey over IRC, what I'm thinking is that it would be nice for you to have a way to detect and reject alpha channel PNGs, but that it's probably an application concern, as @nathansamson suggests -- I just have no way of guessing how common a use case this is for Prawn's users.\n\nSo the compromise I'm thinking of is this:\n- Amend `Prawn::Document#image` to accept an image object.\n- Use `Prawn::Image::PNG#alpha_channel?` to detect alpha channels.\n\nThe result will end up looking like this:\n\n``` ruby\n  png = Prawn::Image::PNG.new(blob)\n  raise if png.alpha_channel?\n  doc.image(png)\n```\n\nThe reason I like this solution is that it's not adding a special case flag, but instead giving a more general API that can be used for other things as well. So if someone does want to work on a patch for this, I think that's what I'd prefer to see. Unfortunately I won't be working on this myself any time soon, but I'd be happy to review an incoming pull request.\n. @nathansamson: Yes, it worked on one (or maybe even both of the RCs) but there was a lot of code that piled up before the 0.13 release. Because `prawn-gmagick` is using our new (experimental) extension API rather than a monkey patch, it's going to be a more stable solution moving forward. I'd say that `prawn-fast-png` could be updated to use it as well, but a release hasn't been cut in forever for that gem. :frowning: \n. This is fine, we want to switch to using requre_relative throughout the project now that 1.8 is no longer a concern. Will merge next time I'm working on stuff.\n. Thanks again Shane, this has been merged into stable and will go out in a 0.13.2 release next Monday.\n\nYou've also been given commit access to Prawn! Please see [this mailing list post](https://groups.google.com/forum/#!searchin/prawn-ruby/contributors/prawn-ruby/BKrw67vyEtA/Wsik4nXnQiMJ) for contribution guidelines.\n. There were other files that were generating warnings too. Took care of those in https://github.com/prawnpdf/prawn/commit/3f36909f91964151ff7405728e0662cc2e7feff7.\n. Go ahead and remove the RDoc task. This looks fine.\n. @cheba: I cleaned up the leftover RDoc stuff in 7b91580d5140954, please add further revisions if I missed anything\n. @hbrandl Note I've rebased your branch here into a single commit, but it's the same code.\n. @hbrandl Sorry for the crazy rebasing and force-pushing. Check the files changed view now:\nhttps://github.com/prawnpdf/prawn/pull/620/files\n\nI basically only made two changes:\n- Added explicit comments (rather than expect to_not_raise) about CannotFitError\n- Extracted the column width calculations into their own class\n\nThe code in ColumnWidthCalculator is almost identical to what your original patch had, and it would benefit from being refactored further later. I'm also not necessarily committed to the names of anything in there. But I think it's a good idea for us to extract classes whenever a feature can mostly be handled in isolation, just to keep the existing classes from growing infinitely. We can contemplate proper design later.\n\nLet me know if it's looking good to :shipit: now.\n. Talked to @hbrandl over IRC. I'm merging this now, but anyone is welcome to open up another pull request to clean it up further.\n. Hi, it is very likely that this is a JRuby bug. Please try JRuby 1.7.9 and leave a comment if you still experience an error -- as far as I know it should be 100% backwards compatible w. 1.7.5.\n. Also, if you can reproduce on JRuby 1.7.9, please provide a minimal example that I can run that illustrates the error.\n. Thanks for checking that out. Looks like we'll need to take a closer look at this issue. We're seeing a similar issue in #603 but that's reproducing on MRI, and is using `:shrink_to_fit` rather than the default `:truncate` option. In any case both problems seem related to textbox overflow behavior.\n. Sorry but I was unable to reproduce on JRuby 1.7.9 using Prawn 0.14.0. If we can find someone else to reproduce there I'd be happy to re-open.\n\n(NOTE: Edited the example slightly to not use white text on a white background!)\n. Hi @eherz1:\n\nI'm looking into some other issues with JRuby, and seeing to what extent they're related to each other. Can you let me know what OS you're using?\n. Thanks!\n. I added LICENSE to that as well, because it's also one of our licenses.\n. Good call, just renamed to RUBY on master. It's not 100% accurate because license of Ruby has changed over time, but close enough.\n. No, that'd be more confusing. Our license literally is Matz's terms for Ruby, along with the GPLv2 and GPLv3. The only difference is that current Ruby _also_ adds in MIT license, and we do not. \n. I am OK with this change if we can get signoff from all contributors, but we won't be able to make it simply if no one objects... we need an affirmative answer from everyone. So if you agree with the change AND have code in Prawn (i.e. your name is listed above), please :+1: this issue.\n\nEveryone else, please don't make things more noisy by expressing support if you're not a contributor. But anyone is welcome to discuss reasons _against_ the change.\n. @cbartlett None of this will apply retroactively -- it'll start with whatever release we make the change in. \n\nI actually care about keeping our code GPL compatible moving forward, and as long as I am involved in the project we'll avoid dependencies that would make Prawn unusable in GPLed code. For everyone who is interested in closed-source use, Matz's terms are roughly equivalent  (in terms of what they actually allow you to do) to MIT license, so it's not going to affect that either. The only significant change will be an easier to understand licensing scheme for Prawn.\n\nI agree that we may not be able to get everyone to respond, it was the first thing I said to @cheba. But we're trying to adopt the approach of experimentation over prediction with Prawn, and so I'd be hypocritical to not let @cheba give this a try. :grin:\n. @sockmonk: The issue is that we don't use the GPL on its own (if we did, I think it would prevent many commercial uses of Prawn in practice), we use a now-outdated equivalent to the License of Ruby. It is a tri-license between Matz's terms for Ruby (which are liberal, similar to BSD/MIT in practice), and the GPLv2, and GPLv3 (the two versions of the GPL are incompatible with each other, so we can't just pick one or the other without consequence). \nTo make matters more complicated, we can no longer call this the \"License of Ruby\", because since Ruby 1.9.3, Ruby uses Matz's terms + BSD two-clause license.\n\nOur existing license should cause no practical problems for anyone, because it guarantees that a) Prawn is GPL compatible, and b) Prawn does not use any GPLed dependencies, making it safe for proprietary use, too. But it's very confusing! In changing to the MIT license, we will not need to explain any of the above, and people will be able to easily understand our license. I will make sure as long as I'm involved in the project that we neither force copy-left by including GPLed dependencies nor prevent it by including GPL-incompatible dependencies, and that will functionally keep all the rights to the end user the same that they've been for the last five years, but with a much less confusing license for Prawn itself.\n\nThe above just reflects my own understanding of the problem, and I'm neither a lawyer nor a licensing expert. But hopefully it helps explain the reason for the change.\n. @cheba: Enough time has passed where maybe you can reach out to those who haven't responded yet by email or twitter and see if we can get them to take a look at this. I'll be much more comfortable making this change before 1.0 (Mid-march) than after. \n. @kennethkalmer It probably would be a good idea for @cheba to double check, but I believe he compiled the list based on who has code in Prawn currently, rather than anyone who has ever contributed a patch. Since the license change will only apply to future versions, those are the people we need to contact.\n. @mbklein: Yes it is, because we may be getting close to the point where doing so would be feasible. However, we definitely need to track down @Bluejade and @jonsgreen, because they're Prawn core members!\n. The list is currently out of date. We're going to need to do a second pass at it before making this change. But we still need responses from @Bluejade and @jonsgreen and that hasn't happened yet. :frowning: \n. @mbklein: He built the entire formatted text system. I think he may have renamed his Github account, but we've tried to email him and haven't heard back yet.\n. I just realized that the way we created this list is somewhat flawed, because @cheba used git blame to generate it. But for example, if I moved the entire contents of a file or made a trivial whitespace change like removing a level of indentation, we'd lose all authorship information. For that reason, it's likely that the contributor list is smaller than it should be.\n\nUnfortunately, I think the best thing to do right now is to close out the issue until someone revises the list and verifies its accuracy. Anyone is welcome to do that, and once someone does I'll re-open.\n. @mbklein: Thanks. I think we'd just need to go back and look at commits from the people on the Github contributors reports and see what if any of their code is still in Prawn (this can be accomplished by finding their original commits). \n\nI will reopen and do this myself if someone else doesn't get to it first, though it's not a high priority for me until after 1.0 at least.\n. Thanks for the kind words!\n. Thanks!\n. Committed with minor typo fixes along with a change from `and` to `&&` in https://github.com/prawnpdf/prawn/commit/88c69325f63ceb80634eebe94f1190d2ef6fd739. Thanks!\n\nIn the future, please use a feature branch on the prawnpdf repository rather than your own fork, It makes collaboration between other committers easier.\n. It's only a minor detail, so no worries. Thanks a lot for your continued efforts on fixing up the table code!\n. @packetmonkey Can you update the branch with what you feel would be clearer wording?\n. Merged. :heart:\n. That sounds right, although I'm not reproducing an error message in Adobe Reader XI on OS X 10.6. Can someone else try to confirm this one? \n\n@iamkobold: It would also be useful to know what version of Adobe Reader and what OS you're using.\n. Anyone with access to a Windows machine, please try to replicate this error in Adobe Reader. I'd like to see a confirmation before I investigate further, and I don't have easy access to Windows (though I can get around to it eventually).\n. @iamkobold All you would need to do is run the code at the top of the issue and then see if Acrobat raises an error when you open the generated PDF (try using the 0.13.2 gem version of Prawn, it's very close to what's on master). If you don't have Ruby on the VM I can generate the PDF for you and you can just try loading it.\n. @iamkobold Sorry... I didn't realize you're the original poster of this issue! I'm looking for independent confirmation. \n\nWe try to make sure all bugs are replicable by two people when we can, to eliminate possible user error and system setup. So although testing in a VM would help a little bit, I still would like to see someone else report the failure.\n. You reported the issue, so I assume you have a copy of the PDF :grin:\n. Closing, but will re-open as soon as someone else either reproduces, or looks into the PDF spec to confirm the output we're generating is invalid.\n. @iamkobold Are you reproducing this in Adobe Reader as well, or only in Acrobat Pro?\n. OK, thanks. I'm still not 100% sure how to solve this one in Prawn because it's kind of undefined behavior. We probably are producing invalid PDFs currently, but there's no reason in principle why we couldn't make `fill_color` work by waiting until the first page was created to apply it. It's just a question of whether we _should_ do that, and I'm undecided so far.\n\nI also would still like to see independent verification, and it seems like @pparidans couldn't reproduce.\n. @bradediger Is this the intended behavior for subtables? If so, I'll merge.\n. Text box behavior is configurable, allowing for `:truncate`, `:shrink_to_fit`, or `:expand`. The default is to truncate, which returns the remaining text.\n\nNone of those behaviors sound appropriate to me for deciding what to do with a subtable that won't fit in the available horizontal space it is given. Instead this seems like maybe it's a cell behavior concern. For example, if we allowed the option to set wrap by character, maybe this problem could be mitigated?\n. Merging this patch, only because I think it's useful to have a spec for how the code currently works even if we plan to change it in the future.\n\nSuggestions for better behavior (along with patches) are welcome!\n. Thanks! I made the copying a little more thorough ( https://github.com/prawnpdf/prawn/commit/255cc7073c3b6892141077be88aaec8e3e5c8a82 ), but they should still do what you want them to.\n\nYou also now have commit access to Prawn! You can read more about our contribution guidelines here:\nhttps://github.com/prawnpdf/prawn/wiki/Contributor-welcome-notes\n\nThanks again for the patch!\n. You're right, it's probably not necessary to reset those if we were just using this for affecting `dup`. But since we also call it directly, I suppose it's better to be explicit and set all attributes. I think this code is a candidate for refactoring in general, but I'm not sure we need to address that issue right now.\n. Hi, I don't know the status of form gems at all, so maybe someone else can help you with that.\n\nBut for those who are still interested in working on the problem, we're happy to discuss adding stable extension points to prevent the need for monkey patching or digging into private Prawn features. It'd be best to have that conversation BEFORE our 1.0 release on April 16, and ideally even before 0.15.0 on March 16, but we'll do our best to help you after those dates, too.\n. @cpanderson: Because this is a support request rather than a bug report or patch, please post it to the [Prawn mailing list](https://groups.google.com/forum/#!forum/prawn-ruby) instead of here in the issue tracker. You're more likely to get an answer there from users who have worked with forms in Prawn before -- the tracker mostly only reaches folks who are hacking on Prawn itself.\n. @dmwilliamstech Thanks for the screenshot.\n\nWhat I'd like to see though is source code and canned data that illustrates the problem. Preparing that would take some extra time for me, and there are plenty of bugs in Prawn's tracker that need investigation. The less time I need to spend on any one of these issues, the faster we can get fixes and workarounds shipped.\n. Thanks! This should give me what I need to investigate, but it might take me a while to get to it.\n. @bradediger I am curious of your thoughts on the problem and the fix here. @hbrandl and I chatted over IRC about it a bit and both agree it's not ideal.\n\nShould we thinking about using BigDecimal here? Or something else entirely? Or just stick with the fuzzy float comparison?\n. @bradediger OK, Should we decide on a precision and create a constant for it? I feel like 10^-9 is more than enough, but we could use something close to machine precision via `Float::EPSILON`. I just always forget the right way to do those calculations :cry: \n. Okay, so it sounds like we just need to add a test for the uncovered case here, and clean up the checks a little bit. I'm unblocked to work on this, but won't get around to it for at least another week. Anyone who wants to take a stab at this sooner than that is welcome to do so.\n. I can't really think of how to construct the test case the possible rounding error in the natural column widths code, so I think we'll need to build one in response to a regression rather than proactively.\nThat said, if someone has an idea of how to pin this behavior down, please submit a pull request with an updated spec.\n\nI made some minor tweaks, and I'm going to go ahead and squash+merge this now. \n. Closing this pull request, will reopen another for the object_store extractions, now that the squashed patch for the first phase is already in master.\n. I submitted an issue with 1.0 roadmap notes to every tracker listed above, along with a few others. Done!\n. I got the same in Adobe Reader XI on OS X. I think this is probably corruption due to issues with transactions in the group example (a known bug). I will probably remove the example temporarily to prevent the manual for erroring, or at least disable its output.\n. I've disabled the group example for now, and added a note that the feature is broken. A new manual has been uploaded!\n. @hbrandl: have you seen #632? I haven't looked closely, but does it cover the same issue?\n. Thanks @hbrandl and @jlduran for looking into this. I'm unsure when I'll be able to investigate further myself, but I can definitely review pull requests for a fix if/when someone has the time to prepare one.\n. @jlduran I'm going to close this ticket since it doesn't directly describe a bug, it's more like \"undefined behavior\" at this point. If @hbrandl gets more time to continue his investigations, or if you pick up where he left off, we can open a fresh ticket with a more narrowly defined scope in the hopes of figuring out the right behavior here.\n. Sorry, it's not that templates are \"experimental\", it's that they're unstable, unsupported, not understood by the current maintainers, and scheduled to be removed from Prawn entirely. The warning is there for a reason, and if you want to hide it then you'll need either a) run off of your own fork, b) quiet the warning by temporarily redirecting STDERR, or c) use an earlier release of Prawn.\n\nIn other words, if you want to use Prawn in a way that we don't feel like we can support, it's up to you to work around it.\n. To clarify, the \"experimental testing\" is just to see if the _templates extraction_ works, and to make sure that it didn't break the rest of Prawn. We dropped support for the _templates feature_ in 0.13.0, and the gem we do release for them will be 100% unsupported unless a maintainer steps up.\n. Right, the variable is what you can use to change the value, then you can use STDERR to reset `$stderr` after.\n. Thanks for the detailed report. I was able to reproduce the problem.\n\nI have a long backlog of work to do right now so I'm not sure when I'll investigate this further, but feel free to look into it and update this issue with whatever you find out, or submit a pull request!\n\n(anyone else is also welcome to look into this one)\n. @malteschmitz: It looks like this is a bounding box bug rather than something table-specific. The only reason why we don't see the problem when position is not specified is because in that case a bounding box is not created. \n\nI'm working on adding a failing test now to illustrate the problem.\n. Just as a bit of trivia, this six year old comment more or less describes the problem:\n\n```\n# FIXME: This may have a bug where the old margin is restored\n# when the bounding box exits.\n```\n\nSo this may be one of the oldest bugs in Prawn!\n. Merging because I doubt this is controversial, but those who see issues with it are welcome to point them out later and we can consider revising what I've done here.\n. Merged a squashed patch in https://github.com/prawnpdf/prawn/commit/ed19c81cace59e1ea8fad3a2f42549f61ab6ef98\n. Enable `Prawn.debug` and you'll get this behavior. Just put something like `Prawn.debug = true` after you require Prawn.\n. It's not comprehensive, so there are areas where we probably need to add checks. But it covers a lot of the common cases. If you find anything missing please submit a pull request to fix them.\n. Done!\n. Apparently it's not possible to re-open a merged pull request, or at least I can't find a way to do that.\n\nBut comments are still welcome!\n. Doing so opens up a new pull request :frowning: \n. Templates have been disabled in Prawn 0.14.0  and support was dropped in 0.13.0.\n\nPlease make sure to read [release notes](https://github.com/prawnpdf/prawn/wiki/CHANGELOG) whenever you upgrade Prawn!\n. If you're not adding content to the pages but only interleaving them with Prawn-generated PDFs, you can use [pdftk](http://www.pdflabs.com/tools/pdftk-server//). \n\nWe'd love to support this kind of thing in Prawn but our implementation is very buggy and has some fundamental design flaws that would make it hard to stabilize. Our plan is to dump the existing templates code into a prawn-templates gem, and hopefully someone will come along and rewrite/maintain it in the future.\n\nA more general note about gem version locking: after 1.0 it'll be safe to lock with something like \"~> 1.0\", but for now you should always lock to a minor version, i.e. \"~> 0.13.0\" or \"~> 0.14.0\", etc. This will ensure you get bug fixes, but no breaking changes. \n. Done!\n. Done!\n. Hello,\n\nPrawn is distributed via RubyGems, and has only very simple dependencies that do not require special setup. Once you have Ruby 1.9.3 (or later) installed, you simply need to run `gem install prawn` to install the Prawn gem.\n\nYou can then use Prawn in your Ruby scripts by adding `require \"prawn\"` to the top of the file. Hope this helps!\n\nPS: The Prawn issue tracker is for reporting bugs. For support requests, please use our mailing list instead in the future. https://groups.google.com/forum/#!forum/prawn-ruby\n. Please provide a link to the PDF as well as the code you used to generate it. Right now your screenshot is also not working, so try uploading and linking it again. I'll reopen the ticket once you've added those things.\n. Thanks, but there's nothing we can do to help you debug this without both the source code you used to generate the PDF that created this error, and the PDF itself.\n\nPlease let me know when you've added those things.\n. Thanks! Can you add a test to document how this should work?\n. I'm not super familiar with the Text::Box code, but I think it'd be sufficient to assert that the `at` position starts at the right place. Here's what the default behavior looks like:\n\n``` ruby\ndescribe \"Text::Box default at\" do\n  it \"should be the left corner of the bounds, and the current document.y\" do\n    create_pdf\n    target_at = [@pdf.bounds.left, @pdf.y]\n    @text = \"Oh hai text rect. \" * 100\n    @options = { :document => @pdf }\n    text_box = Prawn::Text::Box.new(@text, @options)\n    text_box.render\n    text_box.at.should == target_at\n  end\nend\n```\n\nSo you'd construct similar cases for `:bottom` and `:center`, replacing `target_at` with where the top of the box ought to be. I think that would be a sufficient test. The rest of the text-box specs may also be helpful:\nhttps://github.com/prawnpdf/prawn/blob/master/spec/text_box_spec.rb\n\nI could definitely look further into this (and even write the test myself) if that doesn't give you enough to go on, but it's probably going to be a couple weeks before I can do that. :frowning: \n. Sorry, but this fix does not seem to resolve the bug, using the example shown in #169. I am going to briefly look into an alternative fix and will re-open #169, but we will probably need to make some revisions before this is resolved.\n. Additional commentary and examples have been added to #169. I'd like to get some clarification on desired behavior before we go further on this.\n. Support for templates has been discontinued as of 0.13.0, and the feature is disabled by default in 0.14.0. Please make sure to read release notes each time you upgrade Prawn!\n\nhttps://github.com/prawnpdf/prawn/wiki/CHANGELOG\n. Hi, I think we're seeing a few bugs related to encodings in JRuby, so this may help. I'll take a closer look at it in a few days. Thanks!\n. If you don't mind testing something unrelated and have Adobe Reader XI handy, you could try simply opening the PDF generated by the code in the description of this ticket and see if you get an error: https://github.com/prawnpdf/prawn/issues/631\n\nWe've been unable to reproduce on OS X.\n. No, I doubt #631 has anything to do with this issue. We were just lacking windows testers :grin:\n. I'm going to go ahead and merge this, but I don't have a way to reproduce it myself. If it causes any problems I'll need to revert first and ask questions later.\n. @pparidans: Because your pull request was accepted, you now have commit access to all of prawnpdf's repositories. Please see the link below for contribution guidelines, and thanks again! \n\nhttps://github.com/prawnpdf/prawn/wiki/Contributor-welcome-notes\n. The concept is interesting to me, for sure.\n\nHere are my concerns:\n- I don't want to mix yet another module into Prawn::Document. I think we can define this method in lib/prawn/document.rb which I'm not happy with either, but it'll at least make it clear exactly how much the class is expanding by.\n- I want to see many more examples (I.e. half a dozen or more) to see whether this API will support a wide variety of use cases, and what value it gives us for each of them.\n- I haven't decided whether passing options directly to the component with no opportunity to process them in draw() is the right thing to do, but I think we can discuss that once we see some more examples.\n- Please use parentheses in method definitions when working on Prawn.\n. @packetmonkey:\n\nThese are great use cases. The thing I'm probably missing is what tangible benefit the proposed API has over ordinary object creation.\n\nI.e. what is the tangible gain of the former example over the latter in the code below?\n\n``` ruby\n# Your proposal\n@document.draw(Component, options)\n\n# An alternative that does not require changing Prawn\nComponent.new(options).draw_on(@document) \n```\n\nNote: I'm not saying there aren't benefits to be had here if we develop the idea a little more, just saying we need to figure out what they are.\n. I agree with all the points you mentioned as good design goals, but I feel like (1) is solvable by ordinary object composition, (3) is no longer relevant, and (4) is still hypothetical.\n\nBecause (2) is not a strong enough reason on its own to go with _this particular implementation_, I'd be interested in exploring (4) more. In other words, I want to consider what we could do to make this more than syntactic sugar, so that users have an incentive to model things this way.\n. Thanks @packetmonkey. I'm still mulling this over. Since whatever we do come up with here will probably start out as an experimental API or extension API rather than a stable API, we're not constrained by the stable API freeze coming up in a few days. I think I'll focus on getting the 0.15.0  release out first, then we can continue the conversation from there.\n. The idea of making components sandboxed is definitely what we want, and `preserve_state` is a good proof of concept for the intended behavior, but it's not going to be a sane way of solving the problem due to Prawn's messy design.\n\nHere are just a few pieces of mutable state you missed:\n- Grids: https://github.com/prawnpdf/prawn/blob/master/lib/prawn/layout/grid.rb\n- CapStyle: https://github.com/prawnpdf/prawn/blob/master/lib/prawn/graphics/cap_style.rb\n- JoinStyle: https://github.com/prawnpdf/prawn/blob/master/lib/prawn/graphics/join_style.rb\n- Dash: https://github.com/prawnpdf/prawn/blob/master/lib/prawn/graphics/dash.rb\n- Stroke Color: https://github.com/prawnpdf/prawn/blob/master/lib/prawn/graphics/color.rb\n\nI feel like hunting down all these different bits of state and manually setting them is going to be like playing a game of whack-a-mole: without a centralized control point it will be easy for this method to get out of sync, and corrupt the state of documents.\n\nSo I think the next step involves either a separate pull request that figures out how to unify our state mutations safely, or the creation of a proxy object that whitelists document features to avoid the ones that have global effects, and then create some sort of style object to simplify passing the necessary parameters.\n. We are not giving up on this idea, but we're going to work on it from a different angle. Talked to @packetmonkey in #prawn and our basic plan is to first create a unified drawing API for all of Prawn's current components (text box, table, table cell, image, and maybe a Drawing object for vector graphics), and then figure out how to put a nice harness on top of that which will establish a formal component drawing API for Document.\n. Thanks for the patch. I will take a quick look at this before the 0.15.0 release and give some feedback when I do.\n. The way I understand this is that you want to clear `@boxes` when a grid is redefined, to avoid references to the old grid object.\n\nIf that's the case, why are we clearing the `@boxes` variable each time a grid's data is accessed, rather than each time it gets redefined?\n. Ok, so what this patch needs before it is merged is:\n- move the `@boxes` assignment up into `define_grid`\n- Make sure the tests still pass\n- Add documentation indicating that calling define_grid multiple times will create a completely new grid object, affecting all `grid` calls that follow it. In other words, grids do not nest like bounding boxes.\n. @traels: If you want to work on updating the patch that may help get it merged sooner, otherwise I'll work on this when I get a chance.\n. All of the above you can do directly on this pull request, yeah. Just add some additional commits.\n. I see, you already moved the box clearing code. Yep, all we need is a manual and/or API doc update now!\n. I'll go ahead and try this patch out today and document it if it's working as I'd expect.  I'll be cutting the 0.15.0 release this afternoon and I'd like to include this patch if possible.\n. Merged, thank you!\n. @traels: Because your pull request was accepted, you now have commit access to all of prawnpdf's repositories. Please see the link below for contribution guidelines, and thanks again! \n\nhttps://github.com/prawnpdf/prawn/wiki/Contributor-welcome-notes\n. Sorry, but [support for templates was dropped in mid-December 2013](https://github.com/prawnpdf/prawn/wiki/CHANGELOG#wiki-prawn-0130--20131215) because the feature is not stable and we don't have people available to maintain it. It has been removed from Prawn's master branch, and is disabled in the latest stable release (0.14.0).\n\nYou will need to find another tool to handle merging Prawn output with existing PDFs. For some use cases, [pdftk](http://www.pdflabs.com/tools/pdftk-server/) may work.\n. @nathan-munchery: You won't get any updates to Prawn, and you won't get any fixes to the template feature.\n\nSo if it's working perfectly for you, and you're not going to be using new templates that could potentially break things, then there's nothing wrong with staying on 0.12.0. You can also try the unsupported prawn-templates gem for Prawn 0.15.0+. It will occasionally get new releases if pull requests are submitted to it, but it's last on our priority list unless someone else steps up to maintain it.\n\nBut really, the implementation is such that it's simply not safe to use in the general sense. If you're not seeing corruption issues, it's because the templates you're using combined with your Prawn-related code do not happen to cause problems, but there's no guarantee that future combinations (either new templates or new uses of Prawn) will not break your code in very unexpected ways. This is true for Prawn 0.12.0 and true for any later release, unless prawn-templates gets rewritten.\n\nBefore we disabled the feature, we did an open call for someone to help maintain it. There are dozens of issues with it and not one was fixed.\n\nSorry, but it's a problem that we don't have the resources to solve now, even if the demand for the feature is high. PDF is a complex problem domain.\n. @nathan-munchery: I totally get that you'd just like to generate some PDFs and be done with it. Unfortunately, generating a PDF is not as simple as generating some HTML or CSS, it's more like implementing a browser's DOM. \n\nIn other words, generating PDF is an extremely low-level affair, and the (very terse) specification is over 1300 pages long. If you're not already knee-deep in doing low-level PDF work, this isn't going to be something you're going to be able to help with unless you have a spare hundred hours of free time.\n\nThere are no open tickets in the repository because the feature was dropped in December, and we've done three major releases since then. However, there are many closed tickets that are unresolved:\n\nhttps://github.com/prawnpdf/prawn/issues?direction=desc&labels=templates&page=1&sort=updated&state=closed\n\nIf you would like to attempt fixing them, go ahead and submit pull requests to:\nhttps://github.com/prawnpdf/prawn-templates\n\nYou can also ask for help in understanding anything PDF related on the Prawn mailing list:\nhttps://groups.google.com/forum/#!forum/prawn-ruby\n\nThere is a thread specifically about templates that may be worth reading:\nhttps://groups.google.com/forum/#!searchin/prawn-ruby/templates/prawn-ruby/S6gXA-i0-do/fe98QFnhXw0J\n\nSince the open call, we've had probably half a dozen people attempt to look into solving the issues but so far no progress has been made. Good luck though!\n. @bvogel: If you want to attempt something that doesn't require much understanding of PDF (just a bit of studying Prawn's internals), it would be very useful to figure out what pieces of Prawn / PDF::Core the templates code needs to interact with, so that we can define officially supported extension points.\n\nRight now prawn-templates is a monkey patch, and so it's going to be difficult to prevent it from breaking when we make internal changes to Prawn. This is something I can help with if someone does the initial research on.\n. @nathan-munchery: Are you volunteering to add test cases? To augment the [20+ issues we do have](https://github.com/prawnpdf/prawn/issues?labels=templates&page=1&state=closed) with meaningful research? To look at our current implementation and figure out what its flaws are?\n\nThose would be constructive and useful things to do. Further complaints without any actual contributions from you will be ignored, because we have hundreds of features to maintain and can only afford to help the people who sincerely want to help us.\n. I'm having trouble following this example because it has a lot of moving parts to it. Can you try to reduce it down to as simple of an example as you possibly can make while still reproducing the problem, and then include an imjur link to a screenshot of what you're seeing?\n\nClosing as \"revisions needed\", but I'll re-open once you've done that.\n. (note: anyone else is welcome to provide a simplified example, too)\n. I agree that this is a problem that deserves to be solved. Further research or pull requests by others is welcome, because right now my backlog is fairly long and mostly full of boring but important stabilization work.\n. Another note: I added an \"issue acknowledged\" tag to this ticket. Although we don't track most feature requests in our issue tracker, I think it makes sense to add tickets for things like this that clearly represent a limitation of Prawn that isn't easy to overcome without some rework and design consideration.\n. I am closing all issues for Prawn::Table, because it is being extracted into its own gem with its own repository (https://github.com/prawnpdf/prawn-table).\n\nAs I close tickets, I'm marking them with a \"table\" tag, so that @hbrandl can easily find them and optionally move them over to the prawn-table issue tracker. Anything that has the table tag can be assumed to have been unresolved at the time I closed it.\n. This example does not have sample data I can run it with, so I cannot investigate further. Please supply an example I can run that illustrates the problem.\n. Prawn could do a better job verifying its arguments, but it's a tricky problem to do consistently across the API. Glad you got your issue resolved, though!\n. @tilsammans Thanks, though I think this is something I'd run by myself at least at first.\n\nI'll take a look at Goodbits some time soon, otherwise I'm sure Mailchimp would work.\n. Thanks!\n. @JEG2: I added just a few test cases here that cover bugs related to the root issue #268. We can take a closer look at this when we meet tomorrow, but at least we now have failing tests to work with!\n. (note that to run these, you need to do something like `rspec -t issue:268`, we omit unresolved issues from the full suite run by default.\n. On closer investigation, it's going to be really challenging to make transactions work in a generally safe way. Rather than creating false hope, I'd like to focus on killing that feature off, and implementing an alternative to `Document#group` that does not depend on transactions to work.\n. @tadast: Yeah, it's a very common need. The new implementation will probably either take a list of components, or put a proxy object in front of document that generates components under the hood for all of our groupable constructs (i.e. tables, text, images, etc). Then it will use dry run height calculations to determine whether the content can fit in an area or not.\n\nI have a feeling that I may end up being a little picky about the interface for all of this, but a proof of concept is welcome!\n. @ollym: Prawn does not currently have any funding, so there is no timeline. As far as problem go, this is a reasonably high priority but the list of high priority issues is very long. So it's most likely going to be fixed by way of a contribution rather than by the maintainers if it is fixed in the near future. A patch is certainly welcome!\n\nThere is some discussion about possible workarounds here:\nhttps://groups.google.com/forum/#!topic/prawn-ruby/Y2PyUKOOmGg\n\nAnother option is to not upgrade. Prawn 0.15.0 is reasonably stable and if you're not getting bit by other bugs you can probably still use it indefinitely.\n\nTo clarify, you would possibly run into corruption issues if you crossed a page boundary in your rendering even if you _always_ rollback. These will reveal themselves in weird ways, like colorspace errors in certain PDF viewers, or various other subtle issues that result from producing invalid documents. So it's not just that group was broken, but that transaction was broken at its core. I'd love to see it fixed but it's a hard problem to solve and there's not a lot of time available to run the whole project.\n. @bradediger: I don't think this is a problem that will be solvable before 1.0 or even shortly after, so I think we should kill the feature. I have some ideas in mind for how we can support grouping that I want to experiment with, and if I get lucky maybe we can bring that feature back before 1.0.\n\nOne specific question before I merge: Is `:optimize_objects` only useful for cleaning up after transactions, or does it have other uses as well? If the latter, can you recommend how to rewrite the optimize objects tests to not rely on transactions?\n. @bradediger Thanks! I'll update the PR to drop that too.\n. @bradediger Any idea why we have tests for `:optimize_objects` in soft mask / outline?\nAre these just regression tests?\n\n``` ruby\nit \"should not have objects that are not used for extended graphic state\" do\n    @pdf = Prawn::Document.new(:margin => 0, :optimize_objects => true)\n\n    make_soft_mask do\n      @pdf.fill_color '808080'\n      @pdf.fill_rectangle [100, 100], 200, 200\n    end\n\n    make_soft_mask do\n      @pdf.fill_color '808080'\n      @pdf.fill_rectangle [100, 100], 200, 200\n    end\n\n    reader = PDF::Reader.new(StringIO.open(@pdf.render))\n\n    groups = reader.objects.select { |obj|\n      o = obj[1]\n      o.is_a?(Hash) && o[:Type] == :Group\n    }\n    groups.length.should == 1\n\n    forms = reader.objects.select { |obj|\n      o = obj[1]\n      o.is_a?(PDF::Reader::Stream) && o.hash[:Type] == :XObject && o.hash[:Subtype] == :Form\n    }\n    forms.length.should == 1\n\n    masks = reader.objects.select { |obj|\n      o = obj[1]\n      o.is_a?(Hash) && o[:Type] == :Mask\n    }\n    masks.length.should == 1\n\n    ext_g_states = reader.objects.select { |obj|\n      o = obj[1]\n      o.is_a?(Hash) && o[:Type] == :ExtGState\n    }\n    ext_g_states.length.should == 1\n  end\n```\n\nand \n\n``` ruby\ndescribe \"with optimize_objects option\" do\n  before(:each) do\n    @pdf = Prawn::Document.new(:optimize_objects => true) do\n      outline.define do\n        section 'Chapter 1', :destination => 1, :closed => true do\n          page :destination => 1, :title => 'Page 1'\n        end\n      end\n    end\n    render_and_find_objects\n  end\n\n  it \"should generate an outline\" do\n    @section_1.should_not be_nil\n    @page_1.should_not be_nil\n  end\nend\n```\n. @cheba: Is this something we actually need to implement a mark-and-sweep GC for, or something that can be done another way? \n\nAlso, if we do not optimize objects, what is the consequence here? Just a larger PDF? \n\nSorry I'm not at all familiar w. this area of the code.\n. Ok. Then I think I'm going to go ahead and merge this. Someone who wants to work on optimizing soft masks is welcome to do so if this lost us anything!\n. Done!\n. The difficulty I can see in doing that is making sure that you actually restore the insane amount of state Prawn::Document relies on under the hood (many of the mixed in modules introduce state).\n\nStill, I'd be interested in seeing a pull request with your solution, even if it's only for discussion purposes.\n. Thanks @ddengler! I will keep this ticket open for a while to encourage us to come up with a more robust solution, but your gem should be a great workaround for the time being.\n. @malteschmitz: If you could try this branch out and see if it solves your problem, that'd be very helpful!\n\nOtherwise, I'll probably merge this next time I sit down to work on Prawn, because it does seem to fix the issue we discovered in #679 from what I can tell.\n\nIt's worth mentioning that our implementation of margins is batshit crazy, and that it seems like our whole bounding box system would be vastly simplified if we put together some simple stack of bounding box objects. Not sure if we'll get to that by 1.0, but I'm just throwing the idea out there for those watching our pull requests.\n. This is too hard to do comprehensively before 1.0, but I've at least done a very quick inspection of the areas I expected to find hot spots, and made a couple fixes.\n. @tlynam: It looks like @packetmonkey's comment was written long before we moved the code for manual generation into its own gem, but this is the method he was referring to:\n\nhttps://github.com/prawnpdf/prawn-manual_builder/blob/master/lib/prawn/manual_builder/example.rb#L227\n\nI think adding the `begin/rescue` block with an `exit 1` might work there... although we need to think a little bit about whether that's the behavior we actually want, because it means a single exception in the manual on one page would prevent the whole manual from being generated.\n\nBut in any case, we could probably add a configurable option which gets set by the tests like `Prawn::ManualBuilder..exit_on_exception = true`, or something along those lines.\n\nAlthough I'm offically \"retired\" from Prawn, feel free to follow up from me if you need help with this, and I can perhaps get you set up with a starting point.\n. We cannot diagnose any error you see in Prawn without a code sample that shows how to reproduce the problem and (ideally) all necessary data to run the code. Please update your ticket with a code sample and I'll reopen when you do.\n. Thanks @Siyfion, I've re-opened for investigation.\n. I will need to look at this more closely, but your problem may be because you never set up a font family with bold mapped to a file that implements the bold typeface. If that is the case, it's not a bug.\n\nPlease take a look at how font families work in the manual, and see if that helps.\nhttp://prawnpdf.org/manual.pdf\n\nI am leaving this open until I hear back from you or have a chance to look more closely at it myself.\n. Generally speaking there is a separate font file for each style (Bold, normal, italic) and the \"Font Family\" specifies the group of fonts to use for each style. Fonts can contain multiple different styles, but to do that they need to be wrapped up in something like a dfont suitcase.\n\nBrowsers implement things like faux bold, but Prawn does not. If you want a bold typeface, you need to point it at a TTF file with bold glyphs.\n. Yes, check out this documentation:\nhttp://prawnpdf.org/api-docs/Prawn/Document.html#font_families-instance_method\n\nCreate a family called \"Lato\", and point the styles at the relevant files. Then replace your font call with `font(\"Lato\")` and I think things will work for you. Let me know how it goes.\n. Glad I could help! If there is documentation that could have been improved to have you avoid this problem or clearer error messages that could be introduced, please submit a pull request!\n. I spent a little bit of time on this, and I don't see an obvious fix at the surface level. I originally suspected that maybe the anchors were not being wrapped in a `PDF::Core::LiteralString` which would prevent them from being encrypted, but that's not the case, it's done here:\n\nhttps://github.com/prawnpdf/pdf-core/blob/master/lib/pdf/core/annotations.rb#L52\n\n(worth noting is that we should probably do other times of sanitization down here as well, but that's a separate issue)\n\nI haven't yet read the spec to see how we're supposed to handle encrypted anchors, so that's the next step. If someone wants to look into that and update this ticket with some research, it'll help move it along. Or if @bradediger, @jonsgreen, or @cheba have thoughts, I'd like to hear them!\n\nI'm fairly certain that this isn't a regression, it may have never actually worked right. Does anyone know a known-good version of Prawn where this feature ever worked w. encryption?\n. I'm going to close this out, not because it's invalid, but because the anchor feature itself is really poorly supported in Prawn... it relies on digging deep into our internals, and I think we should fix that before we consider the feature to be officially supported.\n\nA pull request to fix the encryption issues is still welcome, and I will leave a note to re-open this ticket once we have a solution to #684 (adding a high level interface).\n. Sorry, the ticket I meant to link to is #689.\n. This is a work-in-progress and needs tests / documentation if I'm going to merge it.\n\nBut the basic idea is that right now annotations / destinations live in PDF::Core, and so they're officially no longer part of Prawn's API. Those modules are extremely low level, and we should consider finding a way to implement to rethink think them, and probably implement them as standalone objects rather than mixins into Prawn::Document. For those reasons, I want to discourage their use by giving a higher level API.\n\nThis is the first small step in that direction. It gives a way to create an anchor to a page, which would be useful for things like building table-of-contents. It could potentially be extended to support giving a link to specific location, but I haven't thought through the interface to that.\n\nAnyone have thoughts on this feature?\n\nIf I don't merge it by 1.0, I will probably undocument the existing anchor mechanism, which is only partially documented as it is. But we can safely merge this as an \"experimental API\" and change its interface in 1.1, 1.2. etc. if no one has reservations.\n. I think I'll proceed with this work, and mark it as an experimental feature in 1.0. Feedback is still welcome before or after I merge!\n. Sorry to flip flop but I changed my mind: I've decided to cancel this feature for now and instead undocument the anchor functionality in Prawn until we have a proper higher level wrapper around destinations. This is something I'd absolutely like to support, so I'll open a ticket for it. Patches are welcome if I don't get to it first!\n. See also #684.\n. This is not something I really have a good solution for without lots of semi-arbitrary hacking around in YARD. We're going to need to revisit the whole concept of how we document stable/experimental/extension APIs, possibly even adding folders to Prawn like lib/prawn/extensions/\\* and lib/prawn/experimental/*. But I think this should be a post-1.0 problem to solve. :frowning: \n. @mogest: Thanks! We added the extra check because simply looking for `read` was causing `Pathname` objects to be treated as `IO` objects accidentally. The documentation looks correct, thanks for submitting it!\n. @mogest: Because your pull request was accepted, you now have commit access to all of prawnpdf's repositories. Please see the link below for contribution guidelines, and thanks again! \n\nhttps://github.com/prawnpdf/prawn/wiki/Contributor-welcome-notes\n. We don't support earlier versions of TTFunk, so please encourage package maintainers to update the dependencies.\n\nTTFunk does not change frequently so this should not be a major inconvience.\n. @strzibny: I cut the releases for both Prawn and TTFunk, so in the end the responsibility falls on me to decide what I can support. TTFunk is entirely an internal dependency, and it's effectively untested and undocumented outside of Prawn. We will be conservative about our gem constraints until that changes.\n\nPrawn has no third party runtime dependencies at all, every dependency we have is something I'm responsible for cutting releases for. I am not interested in supporting downstream repackaging of Prawn, which is the only place this can cause problems for people. Outside of that use case I don't see how our versioning numbering for our internal dependencies can mean anything to anyone.\n\nBecause I'm not interested in a theoretical discussion on this topic, please give examples of concrete problems you're having as a result of our maintenance policies if you'd like to continue the conversation.\n. To clarify about this particular change (incase anyone was wondering), even though a code change was not required in Prawn, updating TTFunk enabled support for font types that weren't supported before (ones with glyphs in the Unicode astral plane). We want all users of newer versions of Prawn to have this functionality, so that's why we upgraded the dependency.\n\nFor the forseeable future, TTFunk will only ever be updated in Prawn's gemspec if it's to add a new feature to Prawn, or to fix a bug that's visible in Prawn. We wouldn't force a version update for things like internal refactorings or third-party improvements that aren't used by Prawn (though so far the latter don't exist, and until the project is less of a mess I don't expect they will)\n. @voxik: It sounds like Fedora is packaging Prawn and its dependencies without even reading our release notes. [Go read them, please](https://github.com/prawnpdf/prawn/wiki/CHANGELOG).\n\nI am interested only in making life easy for Prawn users. I will not require people to manually update their gem locks on TTFunk, which is part of Prawn's internals, to support imaginary third party use cases that don't exist. I won't pretend as if TTFunk is a well-supported, well-maintained library because it is not -- it's just a bit of internal code that we've separated out to make our own release management processes easier.\n\nIf there are things that Prawn can do better for downstream package maintainers that do not conflict with our own maintenance goals, I'm usually happy to reconsider how we do things. But in this case you're asking us to do something that would inconvenience and mislead our users, just because Fedora is doing a poor job of doing their research about the projects they package.\n\nAs I said before, we are not interested in providing active support for repackaging of Prawn outside of our officially supported channels: RubyGems and Github. If you are unhappy with our policies on this, please remove Prawn from Fedora.\n. Prawn 1.0 final will be released nine days from now. We're not going to cut any more RCs between now and then, but hopefully that will solve the problem.\n. Note that #683 is still a valid issue currently, I've only closed it because until we have a legitimate high level interface to support, it's a bug in the internals rather than in something that is officially part of Prawn's external API. A patch is still welcome, and I will reopen #683 when we find a solution for this ticket.\n. Should also consider adding a higher level interface for making external links to, particularly for use w. images\n. Bumping this just because I've ran into the problem myself several times.\n. @mojavelinux:\n\nHere's how I implemented cross-references in a small project I'm currently working on:\n\n``` ruby\nadd_dest \"LinkedSection\", dest_xyz(bounds.absolute_left, y)\n\n# somewhere else in the document\ntext  '<link anchor=\"LinkedSection\">Click me!</link>', :inline_format => true\n```\n\nSo... we have the raw tools in place, they're just awkward to use. I'll give some thought into how to wrap them nicely, but proposals are welcome.\n. So I think this is probably safer than what we did before, but my main concern is that I simply have no way of answering whether the snapshot is sufficient, or whether shallow copying would be good enough.\n\nThat said, I don't think I'm going to find time before 1.0 to create my dry-run based solution. Could you possibly release this as a prawn-grouping gem extension temporarily? You'd only need to wrap the method in a module, and then mix it in using Document.extensions << PrawnGrouping to enable the functionality.\n\nThis would serve as a stop-gap measure temporarily, and if it proves to be well used and stable we could consider bringing it back into Prawn in the future.\n. Also note that it looks like this code is failing some of group's tests on JRuby. Sometimes this is intermittent, but it'd be worth seeing if you can reproduce.\n. @ddengler Great! Please let me know if you need any help along the way, and also comment on this issue with a link to your gem. I will include a mention of it in the next release notes so others can try it out.\n\nIf it were just this one issue to worry I'd probably have merged this straight into Prawn, but our overall stability isn't great at this point, so starting out as a gem seems like the right way to go.\n. @ddengler: As for the command-pattern style ups and downs, it's going to take a lot to get Prawn in a state where that'd work, or at least it'd take some cleverness of design that I can't think of myself. It's a strongly desirable feature and something we've tried implementing before, but we need to get the internals to stop fighting us first.\n. @boutil  I fixed some minor issues with this code, but I think it still does what you're looking for. Please confirm, and if so I'll merge.\n. Wow, this went totally unnoticed and was accidental, sorry about that!\n\nOut of curiosity, what error were you getting? I was seeing some issues when helping a friend clone Prawn on his windows machine, but at the time I had suspected it was an issue with his git install.\n. I do want to support Windows as best as we can, but I don't have a Windows machine easily accessible myself, and I'm not sure I'd have time to regularly test there even if I did. What I can do though is merge any pull requests that come in. :grinning: \n. This seems like it may be a related issue to #603, captured at a lower level. I'll make a minor tweak and merge.\n. @johnnyshields I added a couple tags to prevent our CI from breaking, but otherwise kept your test as-is.\n\nBecause you've successfully had a pull request accepted to Prawn, you've now been given commit access to all our repositories! Please see the contribution guidelines here: https://github.com/prawnpdf/prawn/wiki/Contributor-welcome-notes\n\nThanks!\n. @nathancolgate: I was able to reproduce this bug, and it looks like it's been around for a while.\n\nIt may be some time before I get to investigate this myself, so anyone is welcome to research further and put together a pull request. If someone else puts a fix together we can probably get it released reasonably quickly.\n. @nathancolgate: If you get a chance, please try the code on #758 and see if it fixes your problem.\n. Thanks @hbrandl, I merged a squashed version of this. In the future please make sure to pull in the latest changes from master before creating a branch... I had to do that and resolve merge conflicts before merging.\n. @jalagrange In addition to what @bvogel has said, you should be sure to check out the CHANGELOG for Prawn each time you attempt to upgrade to newer versions: https://github.com/prawnpdf/prawn/wiki/CHANGELOG\n\nThere are fundamental flaws in templates that can cause document corruption and undefined behavior. Until those are fixed (which requires reimplementing the feature), I don't recommend using them.\n. I don't think our RTL text support is content aware, so it probably just renders the string in reverse order. This is almost certainly not what people want, so what I'd like is a bunch of test-cases that reflect how we want this feature to work, ideally ones that reflect how RTL text works elsewhere.\n. Another thing I would like is a good online resource that describes how RTL text should work. Does anyone have a reference they can share?\n. Thanks @hectorvs-gxg! I don't know when I'll have time to look at this myself, but it does look like it will be helpful, and anyone interested in investing further is welcome do so.\n\nWe do have a policy of not relying on third-party dependencies, but looking at another library for inspiration (or to vendor a bit of code) is welcome!\n. @hectorvs-gx I :heart: proof-of-concept work. Even if it's a hack that won't get merged, please open a pull request when you get something working so we can discuss.\n. @hectorvs-gxg: Thanks for working on this. I'm not super familiar with our RTL text support, so I wouldn't be able to comment further without doing some research, but hopefully someone who does know a bit about this area of Prawn will comment. \n\nIf not, this at least gives me a starting point for whenever I get around to reviewing this ticket.\n. @elad: My extremely limited understanding of the existing behavior is that we reverse the strings to support pure RTL text without any pre-processing. So removing reversal would break that case, or force users to install `ruby-bidi`.\n\nPlease correct me if I'm wrong, this is an area of Prawn that was worked on while I wasn't involved in the project.\n. @elad: That's all fair. What I meant by \"pure RTL text\" is that we don't consider any edge cases at all, which probably does mean we've got a broken implementation.\n\nSo I think this is all the more reason for us to figure out how to extract RTL support into a prawn-bidi extension that marries Prawn and RubyBIDI. We'd replace the existing functionality in Prawn with low level extension points, and then tell those who need support to use the gem.\n\nIf I lay the groundwork for that gem, can you help maintain it? (In particular, be able to answer questions about how it should work, because I don't have any experience here).\n. @elad: I'm not worried about API compatibility right now, we're going to probably have three major releases in the next 12 months, so these changes change happen in any one of those.\n. @elad, yeah we can close this. For now the solution is \"use `ruby-bidi`\", and hopefully in the future a better solution will be \"use `prawn-bidi`\".\n\nI'm not going to re-open a ticket for the latter just yet, because realistically I don't know when I'm going to find time to work on it. (especially because we have a workable alternative for the moment). But feel free to remind me if a long time passes and you haven't seen progress on this.\n. @elad Yes, though the manual tracks released versions of Prawn, and your change to the manual is currently in master. It'll get included when the next release comes out, which will hopefully happen in the next few weeks.\n. Thank you! There are probably a few other places where we've missed PDF::Core stuff in the docs, so please do submit more documentation patches if you find problems elsewhere.\n. It seems like you're mixing an old version of Prawn with a very old version of Prawn. The prawn-layout gem has not been used since 0.8.4, and the 1.0.0 RC2 gem is completely unsupported at this point.\n\nPlease upgrade to Prawn 1.0.0, and delete prawn-layout from your system. It sounds like you would have had to vendor it to run into this problem in the first place, which we don't recommend.\n\nSince your problem is almost certainly a configuration issue and not a bug, please use the [mailing list](https://groups.google.com/forum/#!forum/prawn-ruby) rather than the bug tracker for support requests.\n. Yep, thats fine.\n. I'm not sure if this is actually a safe patch or not... some places we intentionally use ASCII-8BIT as the source encoding because we do NOT want string literals to be interpreted as UTF-8, particularly when dealing with binary data.\n\nIt's been a very long time since I've looked at this, though. Please verify and revert if necessary.\n. We may have gotten rid of direct string comparisons to binary data, and if so this is probably OK.\n. I think we're in good shape then. We may have been cargo culting a bit in the past, or dealing with problems that no longer exist.\n. @nathansamson We still support Ruby 1.9.3 as well as JRuby in 1.9 mode, so we cannot simply assume Ruby 2.0+. But since we test those in CI, if there aren't problems there we should be OK.\n. @nathansamson You're looking at the cases where the encoding was omitted, and for those I think you're absolutely right. \n\nI was concerned about the ones where we explicitly specified `ASCII-8BIT` that were changed to `UTF-8`... there are a handful in this patch. But both @packetmonkey and I have taken a look at those too, and I think we're OK.\n. @cheba Source encoding affects only literal strings (not file/stream operations), and we do no literal string comparisons in those files.\n\nI'd be OK with putting the default source encodings on our binary processing files back to ASCII-8BIT though, if only because we almost certainly will NOT need UTF-8 literals in those files.\n. > ASCII-8BIT is by no means backwards compatible with UTF-8. \"\\xFF\" is a valid string in ASCII-8BIT but is not in UTF-8.\n\nRight... this is the sort of thing we ran into in the past that forced us to set the source encodings explicitly (and what worried me about this patch)\n. @packetmonkey There's no need to make this consistent, because doing so would be artificial. Binary data is not text, so it should not be treated as UTF-8! \n\nConsistency is useful, but clarity is more important. Please go ahead and add another commit to put the ASCII-8BIT encodings back in, as I think that minimizes the risk of problems down the line while still preserving the other work you did.\n. @cheba I'm fairly sure that's incorrect. This is a big source of confusion for people, but here's an example to run as evidence (run it in a file called x.rb):\n\n```\n# coding: ASCII-8BIT\np File.read(\"x.rb\").encoding #=> UTF-8\np __ENCODING__  #=> ASCII-8BIT\n```\n. :+1: go ahead!\n. This seems reasonable. A patch is welcome!\n. thanks!\n. Thanks for the test!\n\nBefore we merge this I'd like to see the `.idea` entry removed from `.gitignore`, because that seems related to your local configuration.\n\nWe also need to add the `:unresolved` and `:issue` tags to the test, to prevent it from breaking CI. Here's an example of what that looks like: https://github.com/prawnpdf/prawn/blob/e35c762765688d1400e09ebfa24ac020de554c4e/spec/table_spec.rb#L67\n. @donv I know it should not be added to the repository, but I feel it'd be a better solution for people who use editors that pollute repositories to set up a [global gitignore](https://help.github.com/articles/ignoring-files#create-a-global-gitignore) rather than asking every project they contribute to to add it to their project-specific gitignore file.\n\nBut because it's relatively harmless for us to just add this line, I'll go ahead and merge as-is.\n. @donv Because your pull request was accepted, you've been given commit access as a contributor to Prawn! Please [see contribution guidelines here](https://github.com/prawnpdf/prawn/wiki/Contributor-welcome-notes), and thanks for your help!\n. @hbrandl ping\n. Thanks @hbrandl. \n\n@skandragon Can you try the code on the `issue_710` branch and see if it fixes your problem?\n. Not reproducing. Will re-open if someone else has issues.\n. You may want to try it again though, we're hosted on Github pages and occasionally they have downtime.\n. I'm open to this behavior change. I would like to figure out why `start_new_page` and `go_to_page` have different behaviors when it comes to setting the bounding box. \n\nRight now it seems like they _should_ be equivalent, and if they're not I would want to look into fixing that problem rather than working around it one level up the stack.\n\nYou might be able to trace the two code paths to see what the difference between them is. If we can get a clear answer to that I can merge quickly, otherwise I'll look into this next time I'm working on Prawn.\n. Just a heads up, this won't make the Prawn 1.1 release, but still is open for consideration for a future release. We're log-jammed right now but this has not been forgotten.\n. The test included on this pull request is not currently failing without the suggested fix, and I'm unable to reproduce the problem via a simplified example, either. Here's what I used, and it seems to produce two columns of text spanning two pages without issues on Prawn 1.1.0:\n\n``` ruby\nPrawn::Document.generate(\"x.pdf\") do \n  bounding_box [0, bounds.top], :width => 200 do\n    text \"The rain in spain falls mainly in the fields. \" * 50\n  end\n\n  go_to_page 1\n\n  bounding_box [300, bounds.top], :width => 200 do\n    text \"The rain in spain falls mainly in the plains. \" * 50\n  end\nend\n```\n\n@tim-vandecasteele: Can you verify the problem still exists on your end? I'll reopen if so, but please provide a reproducible example.\n. I'm fairly sure that this is a bad behavior rather than a bug. The \"built-in\" fonts supported by PDF are only going to work for glyphs in the [Windows 1252](http://en.wikipedia.org/wiki/Windows-1252) character set, which is why we recommend against using them for any internationalized text.\n\nIf you call `font(\"some.font_ttf\")` with a font that supports the glyphs you need, everything should work as expected. There should be no need to use fallback fonts at all... they're really only meant to be used for things like CJK character sets where you want one font for your chinese glyphs and one font for your romanized glyphs.\n\nBut even if you DO use fallback fonts, you can probably avoid this problem by just using a TTF font rather than the built-in fonts for your default.\n\nI haven't had a chance to confirm that, but it's my suspicion. There is probably something weird going on with encodings for the default fonts too, which would cause this problem.\n. It probably wasn't clear from my response, but to clarify I definitely would like to fix this issue, whether it's a bug or just a poorly defined behavior. I don't think the solution is to to transcode missing glyphs as you're doing in this pull request, because it should not be necessary. \n\nIf this fixes the problem, I think it does so at the surface level. I want to either figure out where the root cause of the issue happens, or figure out whether this would actually be a safe way to solve this at the surface level.\n. Here's an example of how to avoid this problem. Fallback fonts can be used if you want to use multiple TTF fonts that each contain different glyphs, but if you're just looking for internationalized text any TTF font that supports the characters you need will work fine:\n\n``` ruby\n@pdf = Prawn::Document.new\n\n@pdf.font_families.update(\"dejavu\" => { :normal => \"path/to/DejaVuSans.ttf\" })\n@pdf.font(\"dejavu\")\n\n@pdf.bounding_box([1, 1], :width => 90, :height => 50) do\n  broken_text = \" Sample Text\\nSAMPLE SAMPLE SAMPLEodd\u011blen\u00ed ZM\u011aN\\nSAMPLE\"\n  @pdf.text broken_text, :overflow => :shrink_to_fit\nend\n```\n. > 1) For international char-based docs, it recommend to set font and to not set fallback_font. Doing so avoids this issue.\n\nIt's not necessary to use `fallback_fonts` for internationalized text, you only need it when you want to use multiple different fonts that have different glyphs in each (i.e. Roman glyphs in one font and Chinese glyphs in another). You can use or not use `fallback_fonts`, as long as you make sure that you're NOT using the PDF built-in fonts, and things will work correctly.\n\nOr to really sum it up: Prawn is meant to be internationalization-friendly by default, you just need to provide UTF-8 aware fonts for it to use. `fallback_fonts` is an advanced, special-case feature. I have a ticket open to document this more clearly, because it's a common misunderstanding.\n\n> 2) fallback_font is only intended in cases where you intend to use the PDF built-in fonts as a primary.\n\n `fallback_font` is probably not safe for use in its current form with PDF built-in fonts, and so no, this is not the recommendation. See above for more detail. But if you do use `fallback_fonts`, you're using it because you need internationalization, and if you need internationalization, always use TTF files you provide rather than relying on Built-in fonts. Windows-1252 _might_ work, but it's severely limited.\n\n> 3) regardless of 1 and 2 we should still fix this issue.\n\nAgree! But the fix may not be \"make the failing code sample work as-is\". The fix will be \"define the correct behavior, and make the APIs work consistently based on that definition\". We need to find the root of the problem before figuring out the answer to that.\n. Closing this PR because I don't think it's going to be directly merged, but #729 references it so that we can come back and read the discussion when we get around to properly defining fallback font behavior.\n. @johnnyshields: Defining the behavior implies documenting it at the API doc / manual level, so yeah, it definitely will be.\n. We need to more comprehensively think about what to allow / not allow before a page is created. But I agree that we should at least be consistent, and for things that aren't specifically \"page related\" it may make sense to allow setting them in advance.\n. @donv: Those look like Rubocop related issues. \n\n@packetmonkey: At this stage I would really like to avoid failing the build for Rubocop-related issues we haven't already cleared out of the codebase. Can you investigate? \n. I think so, you can merge it! Please make sure to at least put a placeholder link back to this pull request in the [MasterChangelog](https://github.com/prawnpdf/prawn/wiki/MasterChangelog)\n. :shipit:\n. This sounds like you've possibly got corrupted data. The stack trace alone won't allow us to debug, please find a string that causes the error and I'll re-open.\n. @hbrandl: Please investigate\n. @hbrandl: Please investigate\n. I am closing all issues for Prawn::Table, because it is being extracted into its own gem with its own repository (https://github.com/prawnpdf/prawn-table).\n\nAs I close tickets, I'm marking them with a \"table\" tag, so that @hbrandl can easily find them and optionally move them over to the prawn-table issue tracker. Anything that has the table tag can be assumed to have been unresolved at the time I closed it.\n. I'm hoping to find some time before the weekend to clear the pull request queue and even possibly get a release cut. If that doesn't happen, feel free to merge these changes yourself @hbrandl, just add placeholder notes in the [master changelog](https://github.com/prawnpdf/prawn/wiki/MasterChangelog)\n. @packetmonkey, @dmeranda: Right now I'm looking to reduce the amount of features we're directly supporting in Prawn itself, so I'd much rather see this supported as a third-party extension rather than consider a pull request.\n\nHappy to consider a discussion around what extension points we'd need to add to the API to facilitate that!\n. Tweaked the wording in a slightly different way here: https://github.com/prawnpdf/prawn/commit/6fc829f2a7e1808a6de1ee8991efdfee1c80b29b\n. Thanks!\n. /cc @hbrandl \n. Just a heads up, this won't make the Prawn 1.1 release, but still is open for consideration for a future release. I need @hbrandl to review it though, as he's the defacto maintainer of the table code.\n. @hbrandl: We'd only experience those errors when this particular option was set, right?\n\nIt'd also be nice to come up with something a bit more natural sounding than `no_breaks_words`, though I don't have an idea on the top of my head.\n\n:+1: for documentation before merging.\n. `break_words: true` as a default seems fine, then to get @piccio's behavior: `break_words: false`\n. I'm closing this pull request because the gem extraction of Prawn::Table will happen soon, but when ready, please submit another request to https://github.com/prawnpdf/prawn-table\n\n(or @hbrandl, feel free to move this over yourself)\n. Squashed and merged in 8b4fbd8db1702e5284d8d9d562d765754104d753\n. I had assumed that what we'd do is this:\n- If `src` is a string, check to see if `options[:format]` is set. If so, use it. Otherwise, use the old way of font detection (look at the extension, if present, default to AFM otherwise)\n- If `src` is anything else, assume it's an I/O like thing, and do `options.fetch(:format, :ttf)`\n\nI think this will prevent the breakage, because it is a proper superset of existing behavior. Give it a try and we'll see what happens.\n. I think it's probably OK to merge, but would like to be the one that merges it, because I need to cut a TTFunk release before this can go into master. That will also give me a chance to kick the tires. I'll do that in time for the 1.1 release.\n. @packetmonkey: I'll work on getting this merged and released this week. To help me out, can you add some notes to the [MasterCHANGELOG](https://github.com/prawnpdf/prawn/wiki/MasterChangelog) about this change? Just add a note that it hasn't been merged yet but will be very soon.\n. Great, thanks. I've not come up with time to cut the release yet, and probably won't until at least next week some time, but there's no blockers for including this in the next release. I'll merge as soon as I get ttfunk out.\n. We need a fully executable example to investigate further (i.e. a runnable with sample data that reproduces the problem). Please update the ticket and let me know when you've done that, and I'll reopen.\n. My guess though, is that this is a result of you using `align: :centre`, rather than `align: :center`. \n. I agree! A pull request would be welcome to add a better error message.\n. We definitely don't do anything with orientation currently. \n\nYou can investigate further and consider preparing a patch if you'd like.\n. It looks like this behavior change is desirable, but I'm not comfortable introducing another instance variable here. Maybe pass an optional value into `process_options` instead?\n. There are many test failures on this pull request... please investigate those and let me know when the build is green again.\n. From the looks of it, this will mutate the input data, meaning you can't safely pass the same array to the method twice (i.e. once for a dry run and then again to actually render).\n\nPlease work on a solution that does not mutate the inputs.\n. I see, we do copy the input arguments. This is surprising because `original_text` is actually a copy, not the original text. :frowning: \n\nI'm still not sure how good I feel about this solution, though. It's extremely implicit behavior, and so I'm worried about breakage in future changes to this code. Really we should be having explicitly defined behavior for dry run vs. actual rendering, and not adding various checks for `if flags[:dry_run]` throughout the code. \n\nThis isn't your fault, because it is how the code is designed currently. But I think we should give this more thought before merging.\n. Sorry for the delay in response. I'd say if this patch is working for you, just use your fork until we get something similar merged upstream.\n. I looked into fixing the underlying design issues for the dry run mechanism, but it's really complicated because the entire formatted text system is pretty tangled up.\n\nSo as an alternative I basically applied your same patch in https://github.com/prawnpdf/prawn/commit/dd92069208d462b716a136da4540e48da6bc45be, but moved the code into a helper method just to make it less likely to be lost or broken during future refactorings.\n. @ingk: Because your pull request was accepted, you now have commit access to Prawn. Please see our [contributor guidelines](https://github.com/prawnpdf/prawn/wiki/Contributor-welcome-notes), and happy hacking!\n. Thanks!\n. Sorry, I have no idea where we originally downloaded these from. Perhaps @boutil or @strzibny can tell you what their status are, since they've already vetted Prawn in linux distro packages.\n. @bitops I believe these are the relevant licenses:\nhttp://dejavu-fonts.org/wiki/index.php?title=License\nhttp://metadata.ftp-master.debian.org/changelogs/main/t/ttf-arphic-gkai00mp/stable_copyright\n\nClosing, but will re-open if you have further questions.\n. Not really. Some basic use cases are covered by pdftk, but right now we're lacking a proper alternative.\n. It's a very difficult problem, and we tried to get people to help with it but haven't had any luck. So I don't expect to see any progress with this in the near future. Sorry.\n. @mockdeep: No, it's that prawn-templates doesn't attempt to make sense of the object trees from the different PDFs, it just merges them together, and so the resulting document ends up being corrupted.\nIf you want to try your luck, you can certainly use an older version of Prawn, but it's unsafe code.\n\nSee the discussion of the challenges here:\nhttps://groups.google.com/forum/#!searchin/prawn-ruby/templates/prawn-ruby/S6gXA-i0-do/fe98QFnhXw0J\n\nLocking the thread, but you're welcome to continue discussion on the Prawn mailing list:\nhttps://groups.google.com/forum/#!forum/prawn-ruby\n. Did we ever get this working? If so, :shipit:. \n. Closing, but please re-open if/when you get a chance to work on this.\n. Fixed! Thank you.\n. Thanks. I'm going to need to do some homework and remind myself of how our fallback font system is supposed to work, but this patch has a reproducible error and a test, so I'll certainly try to review it in time for the next release, if not sooner.\n. Thanks for the patch. Because your pull request was accepted, you now have commit access to Prawn. Please see our [contributor guidelines](https://github.com/prawnpdf/prawn/wiki/Contributor-welcome-notes), and happy hacking!\n. Please see the changelog for the latest release of Prawn, particularly this entry: https://github.com/prawnpdf/prawn/wiki/CHANGELOG#table-support-now-disabled-by-default-moving-to-its-own-gem-soon\n\nAlso, please do not update Prawn without reading the CHANGELOG. Things will break that way.\n. Can you provide a code sample that reproduces the problem? (will re-open when you do)\n. Done, thanks for the suggestion.\n. Thanks, I'll merge this soon and if we cut a 1.1.1 release, this will be in it.\n. I merged a slightly modified version of this into stable, and will rebuild and upload the manual now. Thanks for the patch!\n\n(I didn't merge into master, because we're going to extract the table code there within the next couple days)\n. Thanks for the patch. Because your pull request was accepted, you now have commit access to Prawn. Please see our [contributor guidelines](https://github.com/prawnpdf/prawn/wiki/Contributor-welcome-notes), and happy hacking!\n. I'll leave the PR open until we have a semi-stable build of the `prawn-table` gem. See the repo at http://github.com/prawnpdf/prawn-table for progress.\n. @hbrandl I'm going to merge this patch to remove tables from Prawn master. If using the 0.0.x releases of prawn-table seem to work for a few days, we'll get a Prawn 1.2.0 release out and then update prawn-table to depend on 1.2+\n. Call `String#encoding` to be sure the encodings match. Then finally run `String#codepoints` to see if those are identical, too.\n\n``` ruby\n>> \"Foo\".encoding\n=> #<Encoding:UTF-8>\n>> \"Foo\".codepoints\n=> [70, 111, 111]\n```\n\nIf you paste the output here it may help us debug further.\n. @ferdinandsalis: It seems possible that this may be a font issue then. Can you try using another TTF font and see if you get different results (i.e. maybe something like DejaVu Sans)?\n\nhttp://dejavu-fonts.org/wiki/Main_Page\n. @ferdinandsalis Since it sounds like you have a workaround, I'd just go with that for now. Good luck!\n. Thanks for sharing that. It seems like a reasonable solution.\n. @Siyfion: I've reduced your example down and added it to the ticket description above.\n\nI'm taking a closer look now.\n. It looks like the problem is basically this:\n\nShrink to fit will reduce the font size down until all the text can fit in the box. However, it does this in two dimensions, attempting to fill both vertical and horizontal space, and will resort to breaking words if necessary to do that.\n\nSo it's finding a shrunken size that's small enough to fit the text into the box by breaking the word, and for that reason it won't attempt to shrink any further.\n\nThis isn't exactly a bug, because the `shrink_to_fit` option is more for taking paragraphs of flowing text and downsizing them to fit inside a fixed box, rather than working with individual words. But it is a bad behavior, and it may be a sign of something else broken under the hood.\n\nI'm not sure when I'll find time to investigate further, but I'd welcome more research and even a patch to come up with more favorable behavior here, as long as we can avoid breaking backwards compatibility for the normal use case.\n. @Siyfion: The workaround for this problem would be to disable character-level wrapping of words, but I wasn't able to figure out whether we provide an API to do that. It's been a while since I've worked on this area of Prawn, maybe someone else can offer a suggestion.\n. @Siyfion That's my assumption as well. I think we ended up with this behavior as a result of underspecification rather than a problem with that approach, but I'd want to make sure we confirm that if we prepare a patch.\n\nI'd say it's undefined behavior or a side effect at this point, which unfortunately Prawn has a lot of. But one by one we can fix these problems with the help of use cases like this ticket. :grin:\n. #449 looks like it could possibly solve the problem, though it had code quality / maintainability issues that made me worry we'd accidentally break it in a future change. But it may be a good starting point for thinking through how to fix this.\n. @Siyfion Neat, I always like seeing real uses of Prawn!\n\nI'd suggest forking Prawn and trying to merge #449 into your fork to see if it solves the problem. I think that it might work fine for you, I'm only concerned about its internal implementation details.\n. @Siyfion: Of course. That said, our release cycles are slow lately and time-to-fix is at astronomical timescales on bugs unless someone contributes a patch that solves the problem, has tests, and isn't likely to create maintenance headaches and/or weird behaviors. \n\n#449 gets us part of the way there, and if we find out it does work for you, that may help get a revised version of it merged in a future release.\n. Are you not able to use a git reference in your Gemfile? http://stackoverflow.com/a/11558814\n. It's great news that #449 works. I will _eventually_ get around to revising it so that it can be merged. Anyone is welcome to beat me to it.\n. @Siyfion: I decided to merge #449, because any maintainability issues it might have would be limited to this one option. Can you try running Prawn from our master branch and see if it still works as expected?\n. Great! Unless we have major unexpected issues, we'll release this in Prawn 1.2. Thanks for the detailed bug report and for helping with testing.\n. Do you mean outline functionality? (I.e. a tree list of links to various pages in the document?)\n\nIf so, yes we have support for it, see the Outline section of the manual:\nhttp://prawnpdf.org/manual.pdf\n\n(the manual itself uses outlines for navigation, so it hopefully is an example of what you're looking for)\n. Seems reasonable. I'm going to have to think of what level to support this at the API level, but since prawn-table is semi-officially supported as \"part of Prawn\" we can afford to use internal APIs in it in the near term (with the eventual goal of relying only on stable extension points)\n. @straydogstudio: Thanks for this patch. Because your pull request was accepted, you now have commit access to Prawn. Please see our [contributor guidelines](https://github.com/prawnpdf/prawn/wiki/Contributor-welcome-notes), and happy hacking!\n. @MartinMcDermid: Sorry, I didn't notice in my (now deleted) comment that you are requiring \"prawn/table\". Make sure you also require \"prawn\" first, and that should solve the problem.\n. The PDF built-in fonts only support a very limited subset of internationalized characters, because they only support the WinAnsi character set.\n\nFor full UTF-8 support, don't use the \"built-in\" fonts, but instead use any TTF file that has support for the characters you need. (For example, try [DejaVu](https://www.google.com/webhp?sourceid=chrome-instant&ion=1&espv=2&ie=UTF-8#q=deja+vu+ttf))\n. You can also use a TTF version of any of the default fonts (Courier, Times, etc.) and that will get you the symbols you need. It's only when you use the \"built-in\" version that you're limited to the WinAnsi set.\n. I think `save_as` is a more intuitive name, and `render_file` will still work via delegation.\n\nAs for the `DOCUMENT_CLASS` reference, it's unnecessary. You can write the following safely:\n\n``` ruby\ndef document\n  @document ||= MyProxyDoc.new\nend\n```\n\nThat would be the recommended way of using a custom class.\n. There's something we'll need to fix here... if some internal prawn call raises a NoMethodError, it leads to a weird stack trace. Just need to change our `method_missing` call a little.\n. Merged in c3e6d274 with documentation, tests, + manual entry.\n. PDF itself supports a hash-like dictionary structure, and so equivalent PDFs may not have the same binary representation, because the order of keys don't matter.  Furthermore, the entire object structure is not necessarily going to be identical, but could produce a visually and functionally identically PDF. It's just not a format that can easily be checked via binary comparison.\n\nWith that in mind, there isn't a direct way  to get what you'd want from Prawn.\n\nPossible alternatives are to convert PDF to an image representation and do your checksums on those images, or to use a more direct means of comparison, such as PDF::Reader / PDF::Inspector.\n. @andreashappe: No, I'm not sure that's what's happening, it's just a possibility. To clarify, what I'm saying is that we don't take steps to ensure identical binary output on multiple runs of Prawn, and the underlying format doesn't require us to, so the behavior there is totally undefined.\n\nI would not be opposed to making output consistent, but would have no idea where to even start with that, and if it were a complex change it might not be worth it.\n. @andreashappe: No clue, sorry. If anyone might have an idea, perhaps @cheba would. But I doubt this would be a quick or easy change to make.\n. @cheba: If you have the time to look into it, sure. TTFunk is a big mess... it has very few tests of its own. But the only way we're going to improve it is by making changes to it.\n\nEven if you can just spend a little time coming up with an idea for how you would fix it, that would probably help someone else prepare a patch.\n. Please go ahead and add tests. Even if we need to revise this patch before merging, the tests will be helpful.\n. @emrekutlu Thanks for working on this.\n\nIn reviewing your solution, I see that you're deleting the `:valign` option, and basically implementing alignment logic directly in `formatted_text()`. This bypasses the `process_vertical_alignment` method built into `Prawn::Text::Formatted::Box`.\n\nI'm not very familiar with this code, but it seems like we're duplicating logic here. Can you help me understand why?\n. @emrekutlu: Sorry for the long delay in response.\n\nWe can possibly merge this, even if I wish I knew how to simplify it somehow. Before we do that, can you add detailed code comments explaining the calculations this code is doing, and also any of the hacks that are present (e.g. deleting the `:valign` option rather than relying on text box's built in vertical alignment behavior.)\n\nThese notes will help make sure that accidental changes don't break this code, and also will serve as a guide during refactoring towards a simpler solution. I'd write them myself, but I'm not very familiar with our formatted text system these days.\n. @emrekutlu Sorry, that's not really what I meant at all!\n\nPrawn's text system is enormously complicated, with a high defect density. Hacking around its quirks and  design flaws is to be expected until we can rethink its entire design. I just want to make sure we document any modifications we make so that the system can get better over time.\n\nIf you're not able to work on the documentation, I'm sure someone else will get to it eventually, and either come up w. a new patch or use what you've done here. But it'll certainly get merged sooner if you write them, since you were the one to implement this patch.\n. I think the problem you're seeing is that font sizes are in arbitrary points specified by the font designer, so setting `:size => x.mm` isn't going to work as you expected.\n\nI'm not sure if we have a built in mechanism for setting font size precisely, you may need to do some calculations, like this:\n\n``` ruby\npoint_size = (3.mm / (height_of(\"T\") / font_size))\nfont_size(point_size) # note, this includes descender / line gap\n```\n\nFor your other problem, I think you're assuming that y=0 is at the top of the document. In prawn it is at the bottom.\n\nHope that helps! In the future, please use the Prawn support mailing list for questions like this:\nhttps://groups.google.com/forum/#!pendingmsg/prawn-ruby\n. My understanding of this is roughly as follows:\n1. Setting the margin to 2.cm will effectively set the origin to [2cm, 2cm]\n2. Setting the scale factor to 4 means that whenever we express a coordinate, we need to multiply by 4 to get its scaled factor.\n3. Translating both x and y by 2 causes us to add 2 to both x and y coordinates.\n- By (1): [0,0] becomes [2,2]\n- By (2): [2,2] becomes [8,8]\n- By (3): [8,8] becomes [10,10]\n\nSo that explains the behavior you're seeing. To get the behavior you want, the easiest way is to use the higher level matrix transformation methods in Prawn (`translate` and `scale`):\n\n``` ruby\nPrawn::Document.generate(\"x.pdf\", :margin => 2.cm) do\n  stroke_axis(:step_length => 1.cm.to_i)\n\n  translate(2.cm, 2.cm) do\n    scale(4, :origin => bounds.bottom_left) do\n      draw_text \"my text \", at:[0,0]\n    end\n  end\nend\n```\n\nIf you want to see how the origin offset is calculated for the scale factor so that you can use `transformation_matrix` directly, see the source code for `scale`: \n\nhttps://github.com/prawnpdf/prawn/blob/master/lib/prawn/graphics/transformation.rb#L115-L129\n\nGiven that we have explicit support for origin offsets in `scale`, I don't think this is a bug. That said, we'd benefit from more documentation for sure.\n\nAlso, I don't know enough about vector graphics to know whether this is surprising behavior or not. If we can find some convincing documentation on how this is \"supposed to work\" and find that Prawn isn't following that approach, we can think about a behavior change down the line.\n\nHope that helps!\n. Docs can probably use some love, but at least they're no longer hidden as of https://github.com/prawnpdf/prawn/commit/c2ff01b6e9a03a9228de947487ef6c3c37283db7\n. We should definitely think about giving meaningful return values for methods like this, right now we don't.\n\nThough it involves reaching into the internals a little bit, you can get the behavior you want by building text boxes manually:\n\n``` ruby\nrequire \"prawn\"\n\nPrawn::Document.generate('x.pdf') do\n  box = Prawn::Text::Formatted::Box.new([{:text => \"Yeeeeeeeeeeeeeeeeah\"}],\n                                  :overflow => :shrink_to_fit,\n                                  :width => 50, :height => 20, :document => self)\n\n  box.render(:dry_run => true)\n\n  p box.instance_eval { @font_size } # 8.5\n\n  box.render\nend\n```\n\nIt'd be reasonably safe for you to create a helper method that is based on this.\n\nAs for prawn-table, I think it's not going to work quite as you'd hope. You can pass the shrink to fit option, but it's going to be applied cell by cell, so you won't get uniform text size. @hbrandl can confirm.\n. @Siyfion: I agree, this is an issue that deserves fixing in Prawn, my snippet is just a workaround.\n\nSo here's what I'd recommend for a proper patch, and it's a fairly easy one:\n- Make `Document#text_box` and `Document#formatted_text_box` return the box object after rendering.\n- Add a `:dry_run` option to both `text_box` and `formatted_text_box`, which will be passed along to the `Box#render()` method as in the example above.\n- Give `@font_size` an attr_accessor, along with maybe a few other useful attributes that someone may want to inspect.\n\nIf we had this behavior in place, it'd facilitate this kind of interface:\n\n``` ruby\nbox = formatted_text_box(..., :overflow => :shrink_to_fit, :dry_run => true)\np box.font_size\n\n# optionally...\n# box.font_size = some_other_size \n\nbox.render\n```\n. @Siyfion If you want to attempt a patch along the above lines you're welcome to give it a shot. Let me know if you need help!\n. There's no harm in trying. We regularly clean up or even rewrite patches once the initial pull request is submitted, but initial leg work helps reveal any unexpected complications along the way.\n\nIf you don't work on this, someone will eventually. But if you do, don't worry about submitting something that isn't ready to be merged, it's still helpful!\n. @Pablo-Merino: Overall this looks great, and it's a nice feature addition.\n\nI think I will want a more substantial change before merging, though it's not a complicated one:\nRather than using `text` with inline format, I'd prefer to use `formatted_text`, which takes an array of hashes of text fragments.\n\nThe reason I'd prefer to do it this way is it pushes us one level deeper down the stack, bypassing some levels of complexity and making it more likely that this feature won't break if we ever make major changes to the top-level `text` method.\n\n`formatted_text` is documented in the manual so if you want to switch it up to use it, go for it. Otherwise, I'll make the change when I'm ready to test and merge this code.\n. Almost there, but not quite. The idea is to avoid unnecessary use of HTML tags, because then we bypass that subsystem. Calling `text_formatter.format()` is roughly equivalent to calling `text()` directly, because it's going to walk the same code path.\n\nWhat I'm suggesting is something like this:\n\n``` ruby\nformatted_text([{ :text => link_name, :link => link_url }], options) \n```\n\nYou can update the request if you'd like, but it's a trivial change so I don't mind making it when I pull down the code to test it.\n. This looks good now! We should probably add a manual entry for it, though I'm not sure exactly where the right place is for it, so I'll figure that out when I merge.\n\nThanks a lot @Pablo-Merino, I'll get this into master in time for the 1.3.0 release, which will hopefully happen soonish.\n. I just went back and looked at my comment on #689, and realized it's not really related to the feature on this pull request. What I was talking about in #689 is how it's very difficult to link arbitrary content in the document (such as an image) because it requires using a very low-level interface.\n\nSo the higher level interface I had envisioned for that would have been something like the following method, which would generate a clickable region on the document.\n\n``` ruby\nlink \"http://example.com\", :at => [x,y], :width => w, :height => h\n```\n\nBut the feature implemented on this pull request is just about making standalone text-based links. I'm not really sure how common of a use case that is, because most text links I can think of are embedded inline in paragraphs. For that purpose, we have both the inline styling `<link>` tag, and the `{:text => \"Link Name\", :link => \"http://example.com\"}` option for use with `formatted_text`.\n\nPutting all this together, I'm worried this patch will take up a name we're going to want to use later for a more generic purpose, and that it'll only serve as a convenience method for a small percentage of the use cases for text links.\n\nI should have given this more thought earlier, but the good documentation, tests, and overall friendliness of @Pablo-Merino's pull request made me feel like this was a good addition without considering these deeper issues.\n\nOn closer review I don't think this should be merged. I should have mentioned that much earlier, but I only really thought about these problems now.\n\nSorry for dropping the ball on this one!\n. @Pablo-Merino: Even though we probably won't merge this patch, I've given you commit access to Prawn. You really were amazingly responsive to our requests for revisions on this patch, and we'd absolutely welcome your future contributions. For guidelines, see here:\n\nhttps://github.com/prawnpdf/prawn/wiki/Contributor-welcome-notes\n. @Pablo-Merino: A patch for #689 would be awesome! I agree, it shouldn't be complicated, and if you implement it we'd be helping folks who want to have linkable images.\n. I'm not comfortable with this idea as-is because it moves a text file into the `lib` dir, which currently consists of only Ruby source code.\n\nHowever, I would be OK with the idea of removing the `VERSION` file and replacing it with a `lib/prawn/version.rb` file which would contain the following source:\n\n``` ruby\nmodule Prawn\n  VERSION = \"x.y.z\"\nend\n```\n\nThis would allow us to move the version constant of `lib/prawn.rb` and would make it possible for us to reference the version constant without loading the whole library, and I think would also solve your problem. If so, please submit a pull request.\n. I think that the use of `require_relative` was breaking the 1.9.3 build chain in Travis CI, even though it should have worked in theory. But I rewrote that line to use an explicit require line with a full path, and that seems to work.\n\nMerged (and squashed) in ad11d4a65008ef90efea73c828083ae6a14b6ab2\n. Thanks @boutil! This will be in the 1.3.0 release. I'd suggest also preparing a patch against stable, but at this point I don't think we're going to bother cutting a 1.2.2 release so it's not needed.\n. @packetmonkey: We don't have any restrictions on development dependencies as long as they don't complicate the development workflow, so this is fine. \n\n(note to others: We DO have a policy of no third-party runtime dependencies, which is why @packetmonkey  probably asked :grin:)\n. @ruanwz: Thanks for the patch. Because your pull request was accepted, you now have commit access to Prawn. Please see our [contributor guidelines](https://github.com/prawnpdf/prawn/wiki/Contributor-welcome-notes), and happy hacking!\n. Amazingly, this code passes the test suite and is capable of generating a manual. However, it has some major issues that need to be dealt with before we can consider merging.\n\n1) Right now it's just delegating all method calls to the Renderer object. Ideally we'd want to make direct calls to `renderer.some_method` to reduce the number of internal calls that can be made directly on `Document`.\n\n2) Some methods are monkey-patched. We'll need to audit for a complete listing, but this includes `start_new_page`, `go_to_page`, `finalize_all_page_contents`, and probably a few others. We're going to have to decide whether to wrap-and-extend, or to rethink the APIs entirely.\n\nI am opening up this branch early because I will periodically ask for testers to help out. This is a major gutting of the internals so I'm worried it'll be easy to break something in the process.\n\nThe good news is that once we _DO_ get this stuff extracted, we can move tests over to PDF::Core and improve them over time.\n. I've dealt with some of the issues on this patch and will probably merge into master in the next day or two. We will do further patching to clean things up in the future, and if we encounter any immediate problems I'll revert first and resume work on the branch before attempting to merge again.\n. Squashed and merged! WIll revert if we end up in trouble.\n. Before we troubleshoot further, please try the following things:\n\n1) Try to load your font in a standalone Ruby script, giving an explicit path to the font file.\n2) Try to load another TTF font in the same folder (Grab DejaVu for a known working font: http://dejavu-fonts.org)\n\nLet me know the results of those steps, and then we'll take a closer look.\n. Hi @genreil. I'll try to confirm with the same font once I get  a chance (I'm not on my development machine right now). Is this a freely available font? If so, a download link would be helpful.\n. Do you mean this one?\nhttp://greatersharpstown.com/fonts/fonts/MyriadPro-Regular.otf\n\nIf so, it's in OTF format, and Prawn/TTFunk will not work with it because we only support TTF.\n\nIt looks like there are also TTF files in that listing though:\nhttp://greatersharpstown.com/fonts/fonts/MyriadPro.ttf\n\nWhich one are you using?\n. @genreil: Okay, I'll take a closer look then. I'm a bit worried that it may end up either being a corrupt file or some area of the TTF standard we don't support.\n\nHave you confirmed that this font works elsewhere? I.e. if you install it on your system, can you use it in other applications (like a word processor?)\n. @genreil:\n\nI was able to confirm the error with the MyriadPro.ttf file from the link you provided. But I'm not sure this is a Prawn bug, because it seems just as likely that it can be something wrong with the font file.\n\nThe good news is that it seems like if you convert the MyriadPro-Regular OTF file to TTF, that seems to do the trick. I used a shady. possibly spammy online utility for this purpose: http://everythingfonts.com/otf-to-ttf\n\n(There are probably better OTF to TTF converters out there!)\n\nGive that a try and see if that helps.\n. @genreil Glad you got it resolved! There may still be a bug or bad behavior lurking in TTFunk here, but since this is the first time we've heard of the problem, I'll mark as resolved until we encounter another font that has a similar problem.\n\nThanks for helping with the troubleshooting on this issue!\n. `Text::Box` does not use inline styles, instead it  expects you to use text fragments, i.e. `([{ :text => \"hello\" },   { :text => \"world\",  :size => 24,  :styles => [:bold, :italic] }])`.\n\nGenerally speaking, you should use the high level interface (`text_box`, `formatted_text_box`) if you want inline styles, rather than using the low-level interface. However, you can look at the source for `text_box` if you want to see how we convert inline styles into fragments:\n\nhttps://github.com/prawnpdf/prawn/blob/master/lib/prawn/text/box.rb#L112\n. @packetmonkey: You can do some basic operations via the delegated methods on [Prawn::Document::Internals](https://github.com/prawnpdf/prawn/blob/master/lib/prawn/document/internals.rb) and even more with the methods provided by [PDF::Core::Renderer](https://github.com/prawnpdf/pdf-core/blob/master/lib/pdf/core/renderer.rb) (which is exposed via the `Document#renderer` method.\n\nAll of this is unreleased and will be in Prawn 1.3.0, but It's not really \"safe\" because it's considered part of the internals. There's no guarantee whatsoever that these APIs won't change.\n\nWith that in mind, to support zoom we'd probably need a low-level API in PDF::Core and then a high level wrapper in Prawn. Experimental pull requests are welcome, but since we're not tracking feature requests currently (except in cases where we're correcting broken behavior or missing core features), I'll close this ticket.\n\nPlease feel free to continue discussion here or on the mailing list.\nhttps://groups.google.com/forum/#!forum/prawn-ruby\n. @mojavelinux Thanks! If we could look up the relevant portion of the standard, we can probably find a way to add this feature.\n. Looks like Section 8.1 covers viewer preferences, for those who want to dig deeper.\nhttp://www.adobe.com/content/dam/Adobe/en/devnet/acrobat/pdfs/pdf_reference_1-7.pdf\n. There are also many other mentions of Zoom and Magnification throughout the spec (search the document for them). If someone can narrow them down to the relevant pieces, that'd help!\n. Thanks! I'll take a closer look at this soon, but at a glance it looks like a straightforward patch.\n. Please see #774.\n. On the surface this patch looks a lot uglier than #773 (and it is!), but it prevents us from duplicating the `process_soft_hyphens` method in two different places.\n\nDeeper cleanup is needed down in this code, but I rather make the duplication explicit rather than having two nearly identical methods with slightly different behaviors but no easy way to distinguish between them.\n. Merged a squashed version of this in 143371d\n. @Mario1988: Because your pull request was accepted, you now have commit access to all `prawnpdf` repostories. Please see the [contribution guidelines](https://github.com/prawnpdf/prawn/wiki/Contributor-welcome-notes) here, and thanks for the patch!\n. Thanks. If you have an idea of how we might go about fixing this, a pull request is welcome.\n. @Mario1988: I was able to reproduce. \n\nTo restate what you've said, is the underlying issue that we should be computing `width_of` based on what hyphens will actually appear in the rendered text (if any), but what Prawn currently is doing is computing the width of _all_ soft hyphens in the text, regardless if they are rendered or not?\n. Thanks. At this point `stroke_axis` is part of Prawn's public API, so this description and the link to the file can be removed entirely. The method itself is used throughout the manual, so it may not need its own entry.\n. @turpana: In that case, you're welcome to add a manual entry for it!\n. @turpana: What I'm saying is that the note is no longer up to date. We put that notice there when `stroke_axis` was implemented as a helper for the manual, because people would try to use it in their own code and find it didn't work. But now that `stroke_axis` is part of Prawn's graphics API, it will work as expected when people call it, and they can look it up in the API documentation on prawnpdf.org.\n\nSo the note isn't in the right place. If we want to give `stroke_axis` its own manual entry, it should be done in the same way we've done for any other Prawn feature. Otherwise, we should get rid of this note entirely. :grin:\n. Actually, your updated rewording looks good, I've merged it. Thanks!\n. Because your pull request was accepted, I've given you commit access to all of PrawnPDF's repositories. Please see [contribution guidelines here](https://github.com/prawnpdf/prawn/wiki/Contributor-welcome-notes), and thanks!\n. @airblade Thanks, I'll take a closer look at this in the next few days, hopefully. We have some lingering encoding issues (mainly on Ruby 1.9.3, but some affect all Ruby versions), and I'd like to get those sorted out if we can.\n. @airblade: Would it be possible for you to try to reproduce on Ruby 2.0 or 2.1? Even if it's not feasible for you to upgrade Ruby in your production code, it'll help us narrow this down.\n. @airblade: On closer investigation, behavior isn't exactly a bug, at least in 1.3.0.\n\nHere's the summary of why:\n- You're using built-in PDF fonts, which are NOT generally UTF-8 friendly. They support the Win-1252 format, which is nearly equivalent to ISO-8859-1(Latin-1), which explains why @straydogstudio's workaround might work)\n- When using built-in fonts, Prawn will attempt to convert UTF-8 to Win-1252, a format that Ruby itself doesn't provide an encoding for, so we need to treat it as Ascii-8bit and implement the character map ourselves. So from this perspective, the returned overflow value is \"right\", but it's going to fail to render anything outside of  win-1252's very limited character range.\n- To get around this problem, you can use any TTF font file with Prawn that supports the range of Unicode characters you want: Most common fonts support everything you'd need.\n\nUsing [DejaVuSans](http://dejavu-fonts.org/wiki/Main_Page), I was able to get the following output on both Prawn 1.0 and Prawn 1.3 (I don't think Ruby version matters):\n\n``` ruby\ntext: (UTF-8) \"A quick brown fox jumped over the lazy dog.\"\noverflow: (UTF-8) \"fox jumped over the lazy dog.\"\ntext: (UTF-8) \"A quick brown fox jumped \u00fcber the lazy dog.\"\noverflow: (UTF-8) \"fox jumped \u00fcber the lazy dog.\"      \n```\n\nI think that's what you were looking for, right?\n\nWe need to do a better job of informing people that Prawn's default font selection (and not coincidentally, the PDF format's defaults) are NOT unicode friendly, even though Prawn itself handles UTF-8 text fine given fonts that support it. I think this may involve raising a warning or error when non-compatible glyphs are found, and also probably a guide explaining this. I'll open a ticket for those issues.\n. Note about need for better documentation / warning behavior is in #779.\n. @airblade Upon closer investigation, the plot thickens! Here's a summary of what's going wrong here:\n- Because we're using the built in AFM fonts, Prawn takes the UTF-8 text, converts it to ASCII-8BIT (i.e. just a binary seequence of bytes), and then uses Prawn's WinAnsi lookup table to map the codepoints to their relevant glyphs. So `\u00fc` would be mapped to codepoint `252`, which is actually the same in both UTF-8 and WinAnsi.\n\nIn WinAnsi, the byte value and codepoint are the same (`252`), but in Unicode, they are not:\n\n``` ruby\n>> \"\u00fc\".codepoints\n=> [252]\n>> \"\u00fc\".bytes\n=> [195, 188]\n```\n\nSo when we attempt to convert this text _back into UTF-8_ in various places throughout the text call chain, we're losing information and attempting to treat WinAnsi byte values as if they are equivalent to UTF-8 byte values: They're not!\n\n<sighs> This is going to take further investigation, but it seems like this gets us at least a little closer. Sorry for the long and probably fuzzy explanation above.\n. @airblade: I'm working on a fix that would convert the remaining text back into UTF-8, which I think is a better behavior. But as it turns out, the existing behavior is documented with specs, and there is a way of getting things to work on released versions of Prawn.\n\nBy passing the `:skip_encoding => true` option to `text_box`, WinANSI text will be correctly rendered. This is a clunky interface, so we should think about changing it, and that's why I'm considering always returning UTF-8.\n. @airblade See #793 for a rough proof of concept of how we can improve the API. It's not guaranteed to be stable yet, but should give you an idea of where I'd like to head w. things.\n. Yes, use the `:single_line` option.\n\n``` ruby\nrequire \"prawn\"\n\nPrawn::Document.generate(\"x.pdf\") do\n  stroke_rectangle bounds.top_left, 400, 200\n  text_box \"This is just a simple test\", :width => 400, :height => 200, \n                                        :overflow => :shrink_to_fit,\n                                        :single_line => true,\n                                        :size => 90\nend\n```\n\nIn the future, please don't describe how to build a code example illustrating your question, actually write the code sample instead. Otherwise it just creates extra work (and possible misunderstanding of your intent) upon review.\n\nScreenshots are also helpful!\n. @Siyfion It's definitely worth documenting in the manual, a pull request would be welcome for that.\n\nHowever, since it's not likely that we'll ever be able to document every option in the manual, you should also search the API documentation when working w. Prawn. This feature is documented on the text_box method: http://prawnpdf.org/api-docs/1.3/Prawn/Text.html#text_box-instance_method\n. That said, the API docs could sure use some love too, I can see how you'd miss it! :blush:\n. @Siyfion: Yeah, this is a generally hard problem made worse by the fact that our docs are in a bit of a state of disrepair. Extra efforts into improving them are welcome!\n. See this comment for a further complication:\nhttps://github.com/prawnpdf/prawn/issues/777#issuecomment-57937629\n. Another possible option is that we can consider supporting AFM for US ASCII only, and raise an error if non-ASCII characters are used. The rationale here is that it'll work fine for those who don't need Unicode support, but will force the issue for everyone that does. In practice most people are not going to be happy with a UTF-8 -> Win1252 transcoding anyway, so we wouldn't be breaking a common use case.\n\nIt's a big behavior change though. Thoughts?\n. I've included the full Win1252 char set below to make it clear exactly which glyphs it supports:\n![](http://i.imgur.com/Q2mBmgz.png)\n. #793 is an attempt to address pretty much all of these issues.\n- Text for all Prawn methods is now UTF-8-in, UTF-8-out, so the user does not need to handle Windows-1252 strings.\n- Internally, we're now using Ruby's M17n system to handle the encoding into Windows-1252, so text.encoding will come back as Windows-1252 when `AFM#normalize_encoding` is called, rather than `ASCII-8Bit`\n- When using AFM fonts + ASCII only text, no warning will be seen.\n- When using AFM fonts + non-ASCII characters that are supported in Windows-1252, users will see a warning about the limited internationalization support, along with a recommendation to use a TTF font instead.\n- The warning includes instructions on how to disable it (just set `Prawn::Font::AFM.hide_m17_warning = true`)\n- When using AFM fonts + non-ASCII characters that are NOT supported in WIndows-1252, an exception will be raised rather than replacing w. `_`.\n- None of the above will apply to anyone using TTF fonts with sane UTF-8 support, everything should \"just work\" for those folks.\n\nI _think_ this gets us close to something sane. We also need better documentation, but functionality-wise this seems much better than what we've done in the past.\n\nLet me know if there are any concerns, otherwise I'll close this ticket and open a more focused documentation ticket once #793 is merged.\n. Here's what the warning looks like:\n\n```\n>> Prawn::Document.generate(\"x.pdf\") { |d| d.text \"H\u00e9\" }\nPDF's built-in fonts have very limited support for internationalized text.\nIf you need full UTF-8 support, consider using a TTF font instead.\n\nTo disable this warning, add the following line to your code:\nPrawn::Font::AFM.hide_m17n_warning= true\n```\n. @andreasbeer1981 See https://github.com/prawnpdf/prawn/issues/779#issuecomment-59993949 for what is already implemented. I think it pretty much guarantees that things will either \"just work\" or that an appropriate error/warning will be raised in most cases.\n. Merged #779!\n. Note to self for CHANGELOG: This pull request will not break external behavior, but it will change how PDFs are represented at the binary level. We don't promise binary compatibility between releases, but a note to warn people who do their testing that way is in order.\n. We had decent test coverage on the Prawn side of this, so this patch can probably be merged after prawnpdf/pdf-core#10 has been tidied up.\n\nThat said, it's a scary change with global effects. @packetmonkey can you at least do a non-trivial test rendering using this branch against one of your projects?\n. Hooray! We will merge this week, then.\n. Squashed and merged in 02493169\n. @mfly: Thanks for the detailed bug report!\n\nWe have a policy of no external runtime dependencies, so using a third-party gem dependency is not an option for us.\n\nIt seems like for now we should think about raising a `NotImplementedError` for palleted PNGs w. transparency, and then look towards fixing the problem.\n. @mfly: I forgot to mention that while Prawn itself cannot use external dependencies, that our entire image system is replaceable.  You might give https://github.com/packetmonkey/prawn-gmagick a try and see if it fixes your problem.\n. @mfly: Thanks! It'd certainly be welcome.\n\n@cheba you may also want to take a look at this ticket since you have rummaged around in the PNG code before.\n. @edborden: The `convert` utility is provided by ImageMagick, and is run on the command line. It's not part of Prawn.\n. @Fryie: I agree, and already mentioned this in the current thread.\n\n> It seems like for now we should think about raising a NotImplementedError for palleted PNGs w. transparency, and then look towards fixing the problem.\n. @packetmonkey I marked this as a bug... because as @Fryie said... broken behavior without a warning is pretty much a defect. Consider fixing in a future release. :smile: \n. Because your pull request was accepted, I've given you commit access to all of PrawnPDF's repositories. Please see [contribution guidelines here](https://github.com/prawnpdf/prawn/wiki/Contributor-welcome-notes), and thanks!\n. @Mario1988: Can you look into the test suite failure? It may just be a broken mock object, but we need to sort that out before we can merge.\n. I figured out what was causing the test failure: The width of soft hyphens was being computed whenever _any_ fragment was run in _any_ text call, even if the string had no soft hyphens in it. I moved that check into the `if segment[-1] == soft_hyphen` to solve this problem.\n\nI've merged a squashed version of this patch in 766a53434, thanks!\n\nSome notes for future pull requests:\n- You have commit access to Prawn, so please build your feature branches off of our main repo rather than a fork. If you had done that, I could have added my commits directly to this pull request, making it easier to see what changes I made, and any other PrawnPDF contributor could have helped revise the pull request, too.\n- When you have a refactoring and a fix you want to do, open a separate patch for each. I was confused by the merge conflicts I saw on the changes to the tests for #347, because it's unrelated to #775.\n\nThese are minor issues, but keeping them in mind will help make my job easier. Thanks again for the fix!\n. @jessedoyle: I'm trying to decide whether to add the padding options directly to `text_box` or to provide a higher level layout tool that is capable of doing this sort of thing.\n\nI'm going to think on that for a few days, but if it becomes a big rats nest of a problem, we can think about merging your patch for a temporary solution.\n. @jessedoyle: I decided to merge this, because the concern about \"how do we give better control over padding\" seems to be orthogonal to the question of \"how do we vertically align our text\". Prawn's existing behavior was flawed for the latter, and your patch fixes that.\n\nYou already have commit access to Prawn, so in the future, please use a feature branch off of our main repository rather than your fork. That makes it easier for us to make revisions to a pull request if needed before merging while preserving the full history.\n. @jessedoyle Thanks for this fix!\n. This patch seems straightforward, but can you give me an example of a practical use case for this feature?\n. Yeah, I had guessed that might be the use case. Our API for doing that is a bit awkward, but I guess it gets the job done. Thanks anyway for the pull request!\n. Thanks, I'd definitely like to add this to the manual. Please fix the typo on line 44 and then we'll try to get this merged. You may want to try running `rake manual` locally to ensure the manual entry looks the way you expect it would.\n. It looks like there is a build failure because of trailing whitespace at the end of one of the lines. (This is just a style thing, but we run rubocop as part of our CI process.) I'll fix it and then merge, but in the future please run `rake spec` before submitting pull requests to make sure you have a passing build.\n. Sorry, just running `rake spec` wouldn't cause Rubocop to run, but simply running `rake` runs both the tests and Rubocop.\n. I think we did that around the same time, but a squashed version of your patch has been merged into master!  Because your patch was accepted, you now have commit access to all of PrawnPDF's repositories. [See the guidelines here](https://github.com/prawnpdf/prawn/wiki/Contributor-welcome-notes), and thanks again!\n\n(in particular, giving contributors commit access lets us work on branches off the main repository, which makes it possible for others to easily patch minor issues in pull requests)\n. @jeremyf: Thanks! In the future you can merge trivial patches like this (typos, fixes to clearly incorrect docs, etc.)  without a review. If anything ever gets botched we can always revert.\n. @jeremyf That's probably a useful way of doing things because it makes it easier for us to see when new things merge. I confess I don't always follow that practice myself, but I should probably do so.\n. This patch _almost_ works... we see one test failure and one manual example failure currently. I'm a little nervous about merging this even if we can fix the remaining failure, because it constitutes an API change to the 1.0 stable API. \n\nThat said, we can preserve nearly perfect backwards compatibility _in practice_ by making `:skip_encoding` a no-op. This would make it so that old code which passed remaining text back into `text_box` would still work correctly. The only possible breakage would be if someone was actually doing some of their own processing on the win1252 text to convert it back into UTF-8, but that seems unlikely.\n. In theory, this should be working now! The only thing I haven't _completely_ dealt with yet is making `:skip_encoding` a no-op, or removing it entirely.\n\n@airblade: Can you please try this code in your original use case and see if it solves the problem for you? It implements UTF-8 in, UTF-8 out, so you shouldn't get any encoding surprises anymore.\n. @packetmonkey: This is another \"I'm worried it's going to break stuff\" pull request. Are you using built-in fonts in any of your non-trivial Prawn code? If so, please take this for a spin.\n. Note to all... I am not sure why we were using our own Win1252 implementation... perhaps it wasn't supported in Ruby 1.8 back when we still needed to support 1.8? It's possible to use Ruby's M17N system now for this purpose, so this patch switches to using Ruby's implementation rather than our own under the hood.\n. a68eef6 contains a scary but probably good change: It raises an error if non-Windows-1252 glyphs are attempted to be rendered in AFM fonts. The behavior of existing versions of Prawn is to replace with an underscore, which is pretty much never what users will want, and masks bugs.\n\nThis latest also changes or gets rid of tests that actually only worked _because_ they were exploiting this bad behavior.\n. @packetmonkey: I'm going to merge this, but if anything breaks open up issues and we'll get them sorted out.\n. Merged in adaf18ce14b!\n. @isaiah Do not mix AFM fonts with fallback fonts... use TTF fonts throughout and you'll be fine!\n. Something like this will work, but I don't want to rely on generic APIs like `to_str`, because a meaningful string representation has little to do with a meaningful _color string_ representation.\n\nI think I'd prefer something like `to_rgb` and `to_cmyk`, which would return either some sort of color struct, or an array (can't decide what's better).\n\nFor handling our base case, which is string representation for RGB, and array for CMYK, we'd just check for something like `case color; when String; Prawn::Color::RGB.new(color); ...`\n\nI know this is a rough sketch, but feel free to implement it if it makes sense. If it doesn't, I will work on an alternative patch when I find time, and we can discuss further from there.\n. /cc @packetmonkey since this kind of stuff usually captures your interest.\n. Subclassing Ruby core classes is both bad design and can lead to unexpected internal errors because of optimizations at the language level, so I don't want to encourage it. There's nothing about colors that make them natural to represent as a string or array, it's just an implementation detail.\n\nWith that in mind, a color class is indeed what we'll want here.\n. @packetmonkey This solves a different problem, though. A custom color class would most likely be used for dynamic determination of colors, not color types!\n\nThe change you suggested might be welcome at the PDF::Core level, though.\n. @slabounty: Returning a meaningful value wasn't ever documented anywhere, I don't think. So it's currently undefined behavior, and we can change it.\n. @slabounty For right now it'd probably be OK to convert into whatever PDF::Core wants. A patch to `PDF::Core` would also be alright, but there are many undefined or poorly defined APIs lurking down there.\n. @slabounty This hasn't been forgotten, it's just blocking on me. I think your patch proves the concept, but I'll want to change the interfaces a little bit, and won't know exactly how I want it until I drop down to the code level. I will play around with getting this integrated some time after the next release.\n. @BrentWheeldon:\n\n`on_page_create` is a low-level method that's not part of the public API. (`repeat` or `number_pages` are often used instead). If those support your use case, I'd recommend using them instead. If not, please let me know what you're using `on_page_create` for, so we can think about how to support your use case.\n\nBut an immediate fix for 1.3 would be to call `renderer.on_page_create`, just don't assume it's going to be a stable API.\n. @BrentWheeldon: This may be something we could offer support for (or build a tiny extension for) in the future. See this thread for what I think is a reasonably clean solution: https://groups.google.com/forum/#!topic/prawn-ruby/_KIg4Ih8TdU\n. Here's a direct link to the relevant code sample: https://groups.google.com/d/msg/prawn-ruby/_KIg4Ih8TdU/MaHBtDu2F4sJ\n. @mojavelinux:\n\nMaybe not, because repeaters run _last_, so the z-index is going to be wrong (your background would be rendered on top of the page contents rather than behind them).\n\nI'm convinced that restoring `on_page_create` as a public method on `Prawn::Document` is reasonable. Anyone is welcome to prepare a patch. (It should simply delegate to `renderer.on_page_create`, which is the workaround for 1.3.x)\n. @mojavelinux: Also, we should think about what first-order support for setting background colors might look like, since it's a tedious operation currently. A patch or feature-request ticket for that is welcome!\n. @mikesax. For the short term, I'd definitely like to bring back `on_page_create`. Controlling the order of when `repeat` calls get run is an interesting idea... I'll have to think on that some more.\n. @nathansamson: Yeah, in time for the next release I'm only going to restore the behavior because that's how it's been since basically forever, but that is a good wart to think about dealing with when we produce a better alternative in the future.\n. Merged!\n. I really don't know how much work is involved here, and don't have plans to work on this myself in the near future. You can certainly help move it along through either more notes on this ticket or a pull request, though.\n\nI'm OK with not reversing the string as long as using `bidi` produces a working solution, particularly if we can get kerning to work correctly.\n\nSo it'd be best to start with an example of how this might work, and we could take it from there.\n\nWe don't usually block any releases for any features or fixes, unless it's something we've already merged (like the `:indent_paragraphs` feature). I'm hoping to get a 2.0.0 release out some time in the next few weeks, and if this can be completed before then it might ship by then.\n\nActually, if you can provide me with a summary of everything that's currently broken with RTL and your proposed solutions, that'd be helpful.\n. > That's great! Could you please push a branch without all the relevant string reversals? Or, at least let me know if it's safe to grep for \"reverse\" and remove all such occurrences?\n\nUnfortunately the RTL text support was added after I had stepped away from Prawn for a while, and the original author is no longer active in the project. While I can help you figure out whether your patch breaks stuff, I won't be better than you at figuring out what to change, and you'll need to learn the code anyway to do your work on this. I can definitely help you read through unfamiliar code when you run into it, though.\n\nOtherwise, your general plan seems good! For `width_of`, you can try drawing lines at the baseline of the text with that width, and see if it looks correct or not.\n. You can test this the same way we do... using [pdf-inspector](https://github.com/prawnpdf/pdf-inspector).\n\nPass any PDF string in place of `@document.render` in the following test:\nhttps://github.com/prawnpdf/prawn/blob/master/spec/document_spec.rb#L93-L112\n\n(but remember to use `File.binread` instead of `File.read`, PDF is a binary format!\nHope that helps.\n. It's fine to link to your Github repository, because Github makes it much easier to browse code / documentation than rubygems.org. I don't think people will have trouble finding the gem after they've visited your README, especially if your README includes instructions on how to install the gem!\n. Thank you!\n. Because your pull request was accepted, you've been given commit access to PrawnPDF's repositories. Please see [contribution guidelines](https://github.com/prawnpdf/prawn/wiki/Contributor-welcome-notes) here, and thanks again.\n. @elad: It's been that way for a while. Maybe you had ended up on a different page via web search?\n. I believe this is a duplicate of #498 but actually gets us lower down the stack. Leaving open until we confirm they're related.\n. I've thought about adding some sort of class level `document_options` macro, but for now, two things you can do that are completely safe:\n1. Define a `@document` variable in your`initialize()` method. (or anywhere within your object, really)\n2. Define a `document` method on your class.\n\nThe latter is officially supported, the former is something I think we're going to officially support moving forward, because it's how I've been doing it in my own code.\n\n``` ruby\nclass Calendar\n  include Prawn::View\n\n  def initialize\n    @document = Prawn::Document.new(:page_layout => :landscape)\n    #...\n  end\n\n   # ...\nend\n```\n\nAs a bonus, this approach is also something you can use if you want to build composite views, just replace the call to `Prawn::Document.new` with `YourDocumentClass.new`.\n\nA documentation patch would be welcome to clarify this.\n. This isn't a Prawn issue, though you can try one of the following Rails extensions:\n\nhttps://github.com/Whoops/prawn-rails\nhttps://github.com/bkuhlmann/prawn_plus\n. Private methods used by Prawn are not meant to be used in user code. Can you give an example of a method you're trying to use that's private? \n. There are a handful of weird edge cases that might lead to confusing stack traces due to the method missing delegation, but I'm having trouble remembering a specific example of one.\n\nIf you do run into any, feel free to open an issue or submit another pull request!\n. It does sound like the problem you're having is that Prawn is wrapping text based on the portrait boundaries. I'd have to give this some thought, because I've never tried to do this sort of thing before.\n\nYou may want to see if any of the existing templates in https://github.com/jordanbyron/prawn-labels work for you, and then rotate the text and image on a per-label basis.\n\nI'll leave this open as something that might potentially be a missing feature in Prawn, at least until we explore what options we have. I'm not sure when I'll find time to investigate, but please update if you find a suitable workaround.\n. This isn't a Prawn issue, but an encoding issue with your string. `0xF6` is the codepoint for `\u00f6`, but not the binary representation.\n\n``` ruby\n>> \"\u00f6\".codepoints.map { |x| \"%2x\" % x }\n=> [\"f6\"]\n>> \"\u00f6\".bytes.map { |x| \"%2x\" % x }\n=> [\"c3\", \"b6\"]\n```\n\nSomething like this should work:\n\n``` ruby\n>> \"\\u{f6}\"\n=> \"\u00f6\"\n```\n. Well, we certainly should do something about this, because that's obviously a bad behavior, and an easy mistake to make.\n\nUnsure whether we should support `#` or not though. It is a little confusing that Prawn isn't like HTML here, but I don't know how I feel about supporting two different formats, even if they're nearly identical \nto one another.\n\nI'll give this some thought, thanks for reporting the issue!\n. @packetmonkey: Probably the right thing to do. Since the current behavior is undefined anyway, can you go ahead and write a patch that works as you suggest?\n. @packetmonkey: Do you still want to work on this? Since it's a small patch, I could probably write it myself if you don't plan to do it in the next few days, so that we can include it in the 2.0.0 release.\n. I'll drop a note on this ticket if I start working on this, otherwise go ahead and give it a shot.\n. I realized that this isn't a release blocker because we'd just be turning an undefined behavior into an exception. So rather than rushing to build a fix before the 2.0.0 release (which may happen today or tomorrow), just fix this when you get around to it @packetmonkey.\n. Thanks @shevegen. Prawn is very much the work of dozens of contributors. Most of the good ideas aren't mine. :-P\n. You can use the `indent()` function to get left/right padding.\n. Go for it! Thanks. \n\nOn a tangential note, we may drop 1.9.x support in the Prawn 2.0.0 release (which will hopefully happen in January), since end of life is coming soon for it.\n. Prawn does not alter the image data, but you can have rendering issues in viewers for various reasons, and there can be DPI-related conversion issues. See the discussion on this thread:\n\nhttps://groups.google.com/d/msg/prawn-ruby/MbMsCx862iY/6ImCsvLGfVcJ\n. TODO: Update README To specify supported versions, add changelog entry, update travis.yml where needed.\n. All set. I'm setting the `JRUBY_OPTS=\"--2.0\"` in our travis.yml (see here: https://github.com/prawnpdf/prawn/commit/925a68ff807d8e42fe67e193b0a280d60b56f256) to get JRuby to run in 2.0 mode, and it seems to be working fine.\n. Please provide a runnable example that does not rely on your application code.\n. @OpakAlex You're using single quotes, which means your string contains a slash followed by an n, not a newline character. Try using double quotes instead, i.e. `\"one two \\n one two \\n hello\"`.\n. Sorry, I'm not able to reproduce. Please show your entire script.\n. Not going to go this route, because readthedocs.org has plans (or is already) advertising for their sponsors on built documentation, which is something I'd rather avoid.\n\nThe general idea of having hand-curated documentation is still desireable to me, but we'll seek a different route.\n. Seems OK to me, let's merge it!\n. @sokrate: No, sorry. This is currently an unsolved (and very complicated) problem for Prawn.\n. We actually did show a warning for a while before extracting them. If someone is upgrading from 0.12.0 where templates still worked to 1.3 (or 2.0+ as of the next release) without reading release notes, They Are Going To Have A Bad Time, no matter what.\n. Something that might help the problem indirectly would be to turn `Prawn.debug` on by default in 2.0.0+, which would raise an error if any key Prawn doesn't support is provided, including `:template`.\n. Closing this for now. If we keep seeing confusion around this issue, we can consider re-opening in the future.\n. Thanks! I'm going to reword this before merging, but the basic ideas are right.\n\nThings I plan to change:\n- It's not necessarily _typical_ to need to pass options to `Prawn::Document`, although it will be for any non-US user. The defaults are set to common paper size, orientation, margin in US. But it's going to be common to change them, so we shouldn't make it sound like a special case to override `document`, I agree there.\n- I want to include the mention of setting the `@document` variable, because for simple cases, this is going to make a lot of sense. For example:\n\n``` ruby\nclass MyView\n  include Prawn::View\n\n  def initialize(options)\n     @document = Prawn::Document.new(:margin => 0, :layout => :landscape)\n     # ...  \n  end\nend  \n```\n\nSo... in other words I need to rework this revision to address both of the above points, but I agree the docs can be improved, and I'll check to see what you think once I get this rewritten, @giuseb. Thanks!\n. @giuseb Every use of a module is a shot-gun blast to encapsulation: There's no major difference between overwriting methods or variables, because they're both in a single shared space. \n\nHowever, you should take a look at how Prawn::View is implemented... \n\n``` ruby\n    def document\n      @document ||= Prawn::Document.new\n    end\n```\n\nAs long as we always only refer to `document()` within the mixin and the only reference to `@document` is in this method, we're not going to run into issues. \n\nWe will only use your `@document` variable if you don't define your own `document()` method. Furthermore, we only define `@document` if you don't define it yourself AND you have not defined a `document` method.\n. To expand on this a little further:\n\nSuppose you have code like this:\n\n``` ruby\nclass Foo\n  include Prawn::View\n\n   def initialize\n     @fancy_custom_document = ....\n   end\n\n   def document\n     @fancy_custom_document\n  end\nend\n```\n\nThen the following things are true:\n- `Prawn::View` will use your `document()` method as the ONLY interface to your code.\n- `Prawn::View` will not create a `@document` variable.\n- `Prawn::View` will ignore a `@document` variable if you create one.\n- Everything will work fine, as long as `@fancy_custom_document` points to a Document-like thing.\n\nSo we're not leaking any state-based implementation details, unless you explicitly opt-in to it.\n. I've thought of doing something like that, but that actually introduces more state and a wider interface, giving even more potential for collision. I'm happy with the design as it is.\n. @dsisnero: Consider changing the name in asciidoctor-pdf instead? We're upstream.\n. I didn't know that this validator gem existed! Very interesting, and if the warnings it popped up are due to invalid or bad output from Prawn, we'll definitely be interested in fixing this. Can you re-post this issue over to https://github.com/prawnpdf/pdf-core, which is the underlying PDF library Prawn uses?\n\nAlso, because it'll take me a long time before I can look into this, further research and/or patches are welcome from you or anyone else!\n. Use any UTF-8 compatible TTF font with support for Hindi glyphs, and you should be all set.\n. This looks like a good change. It may take me some time to get around to reviewing, but as long as I don't find any major issues we'll try to get this merged in time for the next release.\n\n(Which is hopefully soon, but truthfully has been delayed for a while)\n. See #827.\n. Please show a full, runnable code sample and then we'll re-open.\n. For right now I'm trying to avoid expanding the API for things that already have an alternative, even if the alternative isn't ideal.\n\nOnce we restore `on_page_create()` (which will be done in 2.0.0, and existed in all releases except 1.3.0), you could use an `image()` call with that to get the same result.\n. Looks good! Now that we have a CHANGELOG.md file in the repository, please try to update it in future pull requests. I can always revise or expand upon notes, but this ensures that we won't entirely miss documenting a change.\n. Can you open a pull request that demonstrates what our CHANGELOG.md file would look like if we followed this convention? That would help me see to what extent it'll be helpful to us.\n. @ernie:\n\nI added a test to make sure that bold differed from plain DejaVuSans to help make sure we're not getting a false positive test result. I also removed what I believe to be an old and unnecessary default value (I can't think of why we'd want to use \"Helvetica\" if the font doesn't exist. It's our default font, but the font object should be present and the family can be read from it.)\n\nPlease test this against your production code and let me know if we're ready to :shipit:.\n. @ernie: I'm not 100% certain it is safe, but the manual and tests pass, and if this breaks something I'd rather fix the root cause than rely on this weird default.\n. Squashed and merged in https://github.com/prawnpdf/prawn/commit/13cd1c427f7ecd775b8244d6395dc814334ea8c3 (there is a little bit of merge noise there, but it should be harmless)\n. @ernie: Because your pull request was accepted, I've given you commit access to all of Prawn's repositories. Please read our [contribution guidelines](https://github.com/prawnpdf/prawn/wiki/Contributor-welcome-notes), and thanks for the patch!\n. Please provide a runnable code sample that illustrates your problem, and then we'll re-open.\n. @bvogel has the right idea. Please see the section on Fallback fonts in Prawn's manual: http://prawnpdf.org/manual.pdf\n. Please provide a runnable code sample (as well as a download link to a TTF font we can use) and we'll re-open for futher investigation.\n. I'm able to reproduce the problem using this code:\n\n``` ruby\nPrawn::Document.generate(\"x.pdf\") do\n  font \"#{Prawn::DATADIR}/fonts/siddhanta.ttf\"\n  text \"\u0936\u0940\u0930\u094d\u0937\u0915\"\nend\n```\n\nUnfortunately, I have no idea where to start with figuring out what's wrong, or how to fix it, because I'm unfamiliar with the correct rules for processing Hindi text.\n\nInitially I thought this might be a problem with \"combining characters\" (for example combining accents and the letter they cover), but I was able to produce the correct output for something like this:\n\n``` ruby\nPrawn::Document.generate(\"x.pdf\") do\n  font \"#{Prawn::DATADIR}/fonts/DejaVuSans.ttf\"\n  text \"re\\u0301sume\\u0301\"\nend\n```\n\nPlease provide additional background information on how Hindi text/font processing is supposed to work, even if it's just links to other resources. Right now I just don't know where to start in the troubleshooting process. \n. Thanks. Because it's unlikely that I'll work on this myself in the near future, please feel free to research further and start working on a patch if you get a chance.\n. I think what you're looking for here is a nice way to float text around an image (or some other box). This is something we should have better support for, although I'm not sure whether it belongs in Prawn or in an extension gem.\n\nThe proposed solution seems too specific though: There's nothing special about the \"first line\" of text that wouldn't also apply to the \"First N lines\" of text. So, while I think there's room for improvement, we might want to come up with a more general solution here.\n. Yes, there is a way to do this:\n\n``` ruby\nPrawn::Document.generate(\"test.pdf\") do\n  box = Prawn::Text::Box.new(\"Truncate this\", :width => 50, :height => 20, :document => self)\n\n  overflow = box.render(:dry_run => true)\n\n  p box.everything_printed?\n  p overflow\n\n  # you can call box.render(), or create a new box here.\nend\n```\n. A documentation patch would be welcome, as this is a common question!\n. I'm fairly sure it's only supported at the `text()` call level (so it doesn't work for `text_box` either). There isn't a philosophical reason why we'd want to prevent indented paragraphs using these lower level calls, so you can look into a patch. If it wasn't too complicated, we'd consider merging a change for this.\n\nThat said, there really needs to be some major rethinking into the text APIs. The fact that we have so many different entry point is a problem that needs solving, and I'm hesitant to introduce too many changes until we do.\n. Hi, \n\nThis seems like something worth adding, but in order to re-open this ticket, we'll need a lot more detail on how the feature should work, as well as some research on how to implement it.\n\nWe try to make sure that unless there's an implementer for an idea, we only keep open tickets for detailed feature requests and bug reports.\n. @kaluznyo: The object returned by `mb_chars` is not a String. Older versions of Prawn may have coincidentally called `to_s` on it, but that was an undefined behavior. If you call `to_s` on your `ActiveSupport::Multibyte::Chars` object, I think you'll get the result you expect.\n. Hi @kaluznyo,\n\nThis is a known issue with PDF::Core, see here for details: https://github.com/prawnpdf/pdf-core/pull/15/\n\nSuggested workarounds are to use `:rotate` with any Prawn text method other than the `draw_text` method (i.e. `text`, `text_box`, `formatted_text`, etc.), because it does not rely on the same code. You can also temporarily build pdf-core from the branch listed in the pull request above.\n\nI will try to cut a Prawn 2.0.1 release later this week which fixes this issue. Until then, hope that helps! \n. Building prawn from `stable` or `master` should fix this issue now. I'll try to get a new release out within the next few days.\n. Prawn 2.0.1 has been released, and it includes this fix!\n. Thank you!\n. @bhicks: Because your pull request has been accepted, you now have commit access to all of prawnpdf's repositories. Please see our [contributor guidelines](https://github.com/prawnpdf/prawn/wiki/Contributor-welcome-notes) for more details, and thanks again!\n. We stopped packaging the TTF files in Prawn's gem several years ago, because they are meant for testing purposes only.\n\nIf you are trying to use Prawn for generating PDFs, you'll need to grab TTF files for whatever custom fonts you're using.\n\nIf you are repackaging Prawn for an OS distribution, please build from our git tags rather than unpacking the gems..\n. @rascal-hats: It does reference `Prawn::DATADIR`, because the manual is generated from the source code in the examples themselves. In other words, the code samples you see in the PDF are actually run to generated the documentation, they're not just snippets.\n\nAdding some clarifying comments might help, though!\n. What practical problem is this causing for you?\n. If you want to patch bounding box to use `0.0` as a literal for the sake of consistency, that's fine... submit a pull request if so.\n\nBut I don't think this will make any functional difference, so it's really just a matter of internal consistency.\n. @elad: That was the plan... yes. The idea would be that whatever low level and general support functions needed for RTL support should be implemented by Prawn/PDF::Core, but then all the specific details could live in an unofficial, semi-official, or official `prawn-rtl` gem (The designation depends on to what extent someone is willing to maintain the gem, and what extent they'll work w. the Prawn core maintainers to coordinate... but is largely unimportant)\n. For now, use the solution recommended by @crazymykl. I'd be open to rethinking this UI, but I'm not sure that a yielding API is the way to go there, and right now we're focused on internal improvements to Prawn rather than API changes.\n\nClosing because we don't track feature requests, but this is something to think about in a (much later) version of PrawnPDF.\n. It'd be nice to support this feature, however the entire architecture of Prawn is based on mutable, write-only, one-way rendering of documents. For this reason, unless we can be absolutely certain that a delete call will remove all traces, it'll likely lead to corruption issues in some form or another.\n\nI wouldn't be completely against a patch for this, but the real fix is to rework our underplumbing, which is a pretty big undertaking.\n. I had a conversation w. @packetmonkey about this and was thinking that although Prawn never needs to think about IDs potentially being non-unique, a future version of PDF::Core may need to. And I was unsure the DI route was needed as it seems like it wouldn't provide an extension point as much as fix a limitation in Prawn.\n\nSo my recommendation (DI or not) was to move this down to the PDF::Core level and get it implemented there. It's a private method on Prawn currently, so that means we can change it whenever we want as long as no client code needs to be changed and no visible changes happen in the PDFs (binary compatibility has never been guaranteed).\n\nSo @packetmonkey... would you be open to a patch from @bvogel  that extracts this into PDF::Core and implements it as-is for now, leaving the DI conversation for later?\n\n(Just throwing this in in hopes that it may help move things along, I defer to @packetmonkey on the decision making!)\n. In my mind this is internal behavior that shouldn't negatively impact users, so :+1: \n. @bvogel Just a heads up... we're planning to cut a release this weekend.\n. @bvogel: I deleted your comment by accident... \n\nHere's what it said, for others:\n\n> @practicingruby, @packetmonkey I'm still amazed at the complexity of prawn - I never figured releasing a new version would take 3 months :) (I'm joking). But in all seriousness we should REALLY cut a release. Is there anything I can do to help in the progress?\n\nRelease schedule is entirely up to @packetmonkey as lead maintainer on this project, and he's busy.\n\nThere's not currently anything anyone else can do to help except be patient. Over the long term, perhaps bringing more maintainers in, as well as simplifying our release process, would be a good thing.\n. @packetmonkey: What if we only return the box when `:dry_run` is set? This is backwards compatible because it'd keep the return value the same for any code following the 2.0 API, but would provide the box object if you use the newly introduced `:dry_run` param\n\nIn Prawn 3.0, we could consider unifying the interface.\n. I'm not sure what the cause of this issue was here, but from the looks of it, it might be a mismatch between Prawn and PDF::Core versions, but if that were the case I'd guess it was a configuration issue on your end, @gillesmathurin.\n\nWe'd need a minimal reproduction that doesn't depend on your application code and includes all necessary code to run in order to investigate further.\n. I discussed with @cheba privately, and I'm actually fairly confident that as long as we have active eyes on the discussion channels, I can help with enforcement and decision making when problems do occur.\n\nSo I'll get the relevant documentation merged, a communication channel set up, and I'll be there to help whenever we have problems. I am counting on others to be on the look out for issues, but as long as we have someone doing that, we'll be able to make this change.\n. @cheba, @packetmonkey: The conduct@prawnpdf.org email is set up, forwarding to all three of us.\n\nCan one of you add the conduct file for contributor covenant + update README?\n. Sorry about that. It should be back up now!\n. To implement this, you could break up your text using your own preprocessor and then call `move_past_bottom`. I wouldn't be against having some higher level way of doing this, but I'd like to see an implementation first.\n. Sorry, I don't even know whether this is feasible and we don't track feature requests, only work-in-progress and bug reports.\n\nIf this _were_ feasible, it'd be something I'd expect to see in an extension rather than in Prawn core.\n. I'm pretty sure that #473 is related to this issue, in particular this comment:\nhttps://github.com/prawnpdf/prawn/issues/473#issuecomment-32369504\n. @twobitfool Thanks so much for an incredibly clear and helpful bug report.\n. The versions of Prawn that work on JRuby 1.7 will continue to work, and if you're unable to move to JRuby 9000, please use those. It's not a great solution, but you may need backport fixes from time to time.\n\nIt has always been my intention to support whatever versions of Ruby are supported by the core Ruby team, for as long as they're supported. That has more-or-less been applied consistently throughout the history of the project, and that's what I'd like to see continued.\n\nSo we will continue to support whatever version of JRuby that overlaps with the the oldest officially supported versions of Ruby provided by ruby-core. If JRuby trails behind, that means you'll need to trail behind on Prawn versions, but that as soon as JRuby \"catches up\", you'll be able to catch up on your Prawn versions too.\n\nSo, that's basically the end of the story. Please adjust expectations accordingly.\n. @pointlessone: Please update this part of the README when you get a chance:\n\n> Because Prawn is pure Ruby and all of its runtime dependencies are maintained by us, it should work pretty much anywhere. We officially support MRI (2.1, 2.2, and 2.3) and JRuby 9000, however we will accept patches to fix problems on other Ruby platforms if they aren't too invasive.\n\nThere was a period in Ruby's history where supporting the lowest core Ruby supported version meant also that things would work on common, stable versions of JRuby and Rubinius. This isn't completely true anymore, so we should make it clear that our support for alternative implementations is limited by their compatibility with officially supported Ruby versions.\n. > The point is that they don't because Prawn forces Ruby 2 at installation time and that breaks JRuby environments using JRuby 1.7. It's just not compatible.\n\nIf you lock to the versions of PrawnPDF that support Ruby 1.9.3, they will not force Ruby 2.0.0 or higher. If you patch those versions and release your own gem, that works, too.\n\n> You've made your position clear, though. We simply have to say that the only way to use Prawn, and hence Asciidoctor PDF, via JRuby/Java is to be at the bleeding edge where things may not work as expected on all platforms.\n\nThe \"bleeding edge\" of JRuby is unfortunately the trailing edge of core Ruby. We support the oldest possible version of Ruby supported by its core team. If the two implementations aren't coordinating to guarantee some overlap, please direct your complaints upstream.\n\n>  I can't stop the support requests from coming in (and believe me, they will keep rushing in), but I can at least say it's out of our control. C'est la vie.\n\nTo clear up any misconceptions, we don't give Asciidoctor or its users special treatment, and we also don't run this project as a democracy. Our very small maintenance team commits to what they can support -- no more and no less -- regardless of demand. You will have the same voice in PrawnPDF with 50 users as you would with 500 or 500,000 or 500,000,000.\n\nI understand that our policies might be incompatible with your goals. If that's the case, please do create your own distribution of PrawnPDF. That would be fine!\n. @headius: Thanks for sharing these details.\n\nIt seems like as long as we continue to support JRuby 9k, these problems will go away for users as soon as they move away from JRuby 1.7, hopefully for good.\n\nAs long as JRuby 9k overlaps with at least one officially supported Ruby version, we'll continue to build against it and report problems upstream when they are reported to us.\n. I reverted this pull request because it wasn't signed off on by a maintainer. \n[Our contribution policies are here](https://github.com/prawnpdf/prawn/wiki/Contributor-welcome-notes).\n\n@crazymykl: Please don't merge into master unless asked to by @packetmonkey or @pointlessone.\n\n@packetmonkey, @pointlessone.... please check this and sign off and/or merge.\n\n(unfortunately Github doesn't give me an easy way to re-open this PR)\n. As this gets worked on, please see this related ticket (especially toward the bottom)\r\n\r\nhttps://github.com/prawnpdf/prawn/issues/497. Merged your patch, thanks.\n. all except angle supported now.\n. Pulled in:\n\nhttp://github.com/sandal/prawn/commit/80b10bda08e51acef988cafd20123bc191feb2cf\n. MOVED: http://github.com/sandal/prawn-layout/issues/#issue/14\n. Change text :spacing to :leading, and pay some tech debt w. the way example boilerplate is handled.  (closed by 3f99ef7f2e438bc1103546a7a7a6d10459bb8cc6)\n. Yes, that would address at least some of these issues.  But then maybe prawn-fast-png would need a more general name... prawn-png-improved ? \n\nAnyway, that's a question for Wojtek, not me.   So feel free to contact him if you want to see if he's interested.\n. yeah, right on, a RMagick based Prawn PNG is a good workaround for our bottleneck, but should be done as an extension gem.\n\nLet us know when you have something.\n. no news.  I may get this in for 0.5, if not, definitely 0.6\n. It will be in when it's ready.  Please don't post vacuous comments. \n. Fixed\n. Done, thanks\n. Finally wrestled RubyGems to the ground (closed by 3edee0446667aa06af340ff7b0b6bebcfb81f5a1)\n. This is a prawn-layout issue (maybe), please re-file there.\n. Thanks! \n\n I think this issue may be related to the fact that tables cannot be used in a bounding box without a height, something I hope to fix eventually.   But even if it's not related, its worth knowing about.   I want to keep prawn-core independent of the table code though, which is why I asked you to move it over there.\n. This is in the wrong place.  Please file in prawn-layout's tracker.   I would accept a patch for this feature.\n. Pulled, thanks\n. We really need first order support for this...   its good that this hack works for you, but it isn't a real solution, unfortunately.   When I re-work the way pages are rendered, we can do this in a clean way.   It'll be in 1.0\n. move_cursor_to() allows for moving to a y position relative to the bottom boundary Closed by 56fba5ba666f15efc44544a9469f85bd3c4ddfdf\n. irrelevant at this point\n. yeah, that would be fine.\n. Merged, thanks.\n. Yeah, that looks like it might work, I'll give it a try.  Thanks!\n. But please note that I plan to kill off public access to text_options, so in the future, you'd probably do something like   table data,  :leading => ...\n. This should no longer be technically possible.  We should eventually support non-standard leading in table, via the :leading option.  Closing this for now. \n. The documentation on the website still refers to Prawn 0.4, as Prawn 0.5.0.1 is a pre-release.   In Prawn 0.5, the preferred method will be document.width_of  (though it it is correct that this just calls compute_width_of, you should use the former),  I'll make a note of that.\n. I agree, but it is unlikely that I'll have time to work on this soon.  I need to focus on stabilizing the existing codebase.   I would accept a non-invasive patch for this though, of course.\n. Forgot to close this before.\n. Remove Prawn::Document#text_options feature, as it has made me a very sad panda many times.  (closed by 9ce5b87673e8a5bc19c6f8330b3c19c952298d6a)\n. As the giant warning message upon installing Prawn 0.5.0.1 states, it's a pre-release.  Therefore the documentation is still based on the official stable release of Prawn (0.4)\n\nThere will be no general replacement, though I will add API calls for most of what people will need:\n\nThings like:  Document#wrap_mode= and Document#spacing=\n\nBut those will only spring into existence when I properly code up Prawn's low level functions to account for them.  Right now they don't, and that's why text_options is dangerous.\n. Incase you don't use the gems:\n\n\"  Welcome to Prawn, the best pure-Ruby PDF solution ever!\n  This is version 0.5 RC1\n\n  Please note that you have downloaded a pre-release candidate gem,\n  which has some bugs, ugly spots, other bad things in it.  This gem is also\n  not fully backwards compatible, and may break existing code.\n\n  If you wish to revert until a stable release is ready, uninstall prawn 0.5.0,\n  prawn-core 0.5.0, prawn-layout 0.2.0 and prawn-format 0.2.0\n\n  For details on what has changed, see:\n    http://prawn.majesticseacreature.com/notes/0.5\n\n  If you have questions, contact us at:\n    http://groups.google.com/group/prawn-ruby\n\n  To submit a patch or report a bug: \n    http://github.com/sandal/prawn\n\n  Prawn is meant for experienced Ruby hackers, so if you are new to Ruby, you\n  might want to wait until you've had some practice with the language before\n  expecting Prawn to work for you.  Things may change after 1.0, but for now\n  if you're not ready to read source code and patch bugs or missing features \n  yourself (with our help), Prawn might not be the right fit.\n\n  But if you know what you're getting yourself into, enjoy!\n\"\n. Yeah, sorry... I had merged in to stable branch early because I anticipated 0.5.1 to come much earlier.  Generally, if you track stable moving forward you won't be burned by pre-releases.\n\nFor now, lock to a 0.4 tag until you hear about an official 0.5.1 release if the turbulence is causing problems.\n\nFWIW, with regards to text_options() you should have a suitable replacement for all the functionality it offers by Prawn 0.6, no guarantees about 0.5 though.\n. This was fixed in Prawn 0.5\n. Done\n. Done\n. Closed, this won't be reverted, I don't think.\n. Patches welcome.  This isn't on the critical path but I'd be fine accepting a patch for it as long as it was reasonable.   This won't get done by me though, in the foreseeable future.\n. Great.  If you get something together in the next few weeks, this could make it into 0.6\n. Patches welcome.  Reopen if you come up with something.\n. this is a prawn-format issue.  please re-file there.\n. Closing, because it's not really possible (AFAIK) to make this faster in pure Ruby.  Feel free to re-open w. a patch. Or use prawn-fast-png if you can stomach the RMagick dependency.\n\nhttp://github.com/amberbit/prawn-fast-png/tree/master\n. I don't think we can make an assumption about newlines.\n\nThe documentation in Prawn already states:\n\n\"Text wrap in Prawn does not re-flow linebreaks, so if you want fully automated text wrapping, be sure to remove newlines before attempting to draw your string. \"\n\nI could clarify that a little more, but this basically means it's up to you to remove your newlines.   If font designers include a width for \\n, it's best for us to respect those intentions even if they don't make much sense.\n. pulled into stable and master\n. Ruby 1.8.7 is not supported at all for Prawn.  Officially supported Ruby versions are 1.8.6 and 1.9.1\n\nSince require \"enumerator\" is necessary for backwards compatibility with 1.8.6 and works in a normal environment, you should report this issue to exerb.\n. This is the wrong tracker.   Your changes are to prawn-layout, so this should have been in: http://github.com/sandal/prawn-layout/issues\n\nI will look at your fixes now though, so no need to re-file.\n. Pulled in these fixes.  I'll get out a Prawn 0.5.2 / prawn-layout 0.2.2 in the next couple days.\n\n-greg\n. This is the wrong tracker, please create a new ticket, with a reduced example that reproduces the problem, over in prawn-layout:\n\nhttp://github.com/sandal/prawn-layout/issues\n. @twalpole:  that's not what it is, since Prawn::Format does some heavy extensions to Prawn and doesn't use any of the original functions.   (Unless I missed something)\n. This is the wrong tracker, since it's a prawn-format issue.\n\nI've recreated the ticket here:\nhttp://github.com/sandal/prawn-format/issues/#issue/7\n. Oh, interesting point. I'll look into it.\n. Merged.\n. Definitely will accept a patch for this, but it needs to be on a fork with tests and examples\n. Yeah, good point.   Just write some nice examples, and make sure that the API gets tested, and that if we're moving the pointer, it goes to the right place.\n. Sweet, we'll pull this in for 0.8, then.\n. Merged, thank you.\n. We have no plans to change this behavior but the documentation will be updated.\n. Make it an error to use :at and :align at the same time.  Closed by 9e70d53ce9f1b3fe77a6f58b88de1306f7eead43\n. It could, but normalize_encoding is costly.  Prawn does it for you, but does not make assumptions when you are building low level constructs.  \n\nSo we won't be introducing this change.\n. Good catch, I'll get a fix in for this.\n. You're using an AFM font, so your text needs to be transcoded to WinAnsi (as the documentation for Font::AFM#compute_width_of indicates)\n\nnormalize_encoding() will do this for you.\n\nAlso, you should use Document#width_of() rather than Font#compute_width_of() as the former is the officially supported API for end users.  In either case, transcoding will be necessary here.\n. Also, if you need full UTF-8 support, consider using any TTF font that is Unicode aware and things should 'just work' so long as the text you pass into Prawn is encoded in UTF-8.\n. Patches are welcome for this feature but they need to be well tested and come with examples.\n. Please don't post prawn-format related examples here until prawn-format is maintained.  They are only relevant to Prawn <= 0.6.x\n. Thanks, will-fix.\n. Not a Prawn issue\n. Duplicate, non-issue\n. can we get this in git format-patch format so we can preserve your authorship information?\n(or on a fork)\n. Awesome.  We'll look into it soon, and let you know.\n. That works fine.  I'll try to merge this soon so you don't need to worry about complications with your master branch diverging.\n. I see where you're going with this, but I think it's fighting a symptom rather than the disease.  We need to find a unified API for keeping the y cursor from moving.  Expect to see something for that in a future release.  \n\nThere is also the semi-private mask(:y) { ... } if you need something immediately and are using the standard Prawn builds.\n. Oh, yeah, this is probably something we can fix.  We'll look into it soon.\n. I have confirmed that this issue exists and reduced the example down a bit farther.  Transaction will just 'not work' with TTF fonts, which is a pretty severe issue.  I'll get in touch with Brad and see if there is any easy way around this.  As soon as we have time to hunt down the issue and fix it, this certainly would merit a maintenance release and is probably a 0.7 blocker as well.  We don't want to shortchange our friends who need m17n.\n. This is  a confirmed defect.  We will fix it with an inherited hook, so as to only share extensions downstream.\n. Added an inherited hook so that extensions get properly copied into subclasses.  This should fix the issue with using Prawn::Format in document subclasses.  Closed by 6a1a166b93f7f9784d5bffb7a7e6c89d8e0e304f\n. Oh, great catch.  I thought that perhaps something with annotations was messed up, but had assumed it was an issue on my machine.  \n\n I will apply this, but if you can get it on a fork within the next day or so, that'd be great.   Note that this is our official patch policy, so that while we will often be willing to manually apply bug fix patches for obvious reasons, things move faster and are less likely to be deferred / rejected if you send them to us in the preferred format.\n. Applied, thanks.\n. Oh, at first I thought this was a bug report.  Yes, this would be nice.   Go ahead and code up a patch for it with some tests for it.   Or we'll eventually get to it before 1.0.\n\nThe reason width_of() works for inline styles is because it has to in order for other features to work.   But that doesn't mean it's not a good idea to make this work, too.\n. prawn-format has not ever been offically approved for use with tables.  If you use them both together, you run the risk of things acting very strange.   There are ways to get them behave, but they're hacks, really.   We will update the documentation in Prawn 0.7 to make this clearer.\n\nThis issue is about the interaction of prawn-layout and prawn-format, and definitely isn't anything to do with prawn-core, though.   In the future, file bugs about prawn-format there.\n. Agreed, with the added concern about GIF having some legal issues surrounding it that I'm not well versed in.  Closing, but will consider a patch if it comes up.\n. That's good news.  Then yeah, patches welcome but we have no plans to add this feature ourselves.\n. Hi, it's fine to track the request here, but let's leave the discussion for the mailing list.  Please re-post there for best results.\n. To review: http://github.com/jonsgreen/prawn/commit/80ebf028d616d7e499fee2c1684156d58e51389b\n\nSee also: http://groups.google.com/group/prawn-ruby/browse_thread/thread/f98f975744806423\n. done!\n. This is a feature we want to support, but I doubt it is as simple as String#reverse for many languages.   Patches are welcome, though.\n. I don't have the domain knowledge on this one.. .give it a try and see how it turns out.  We do not have formal support yet, but we still are very interested in this problem and would happily accept patches.\n. @eeabed: A writeup would be great, thanks.\n. This has come up several times before on the mailing list.   We don't want to support this feature as it confuses what it means to absolutely position text.\n. It was asked before and rejected before and will not be supported.\nUse text_box if you want at and align.\n. Can we hunt down a PDF library that does this right and look at how they're doing it?\n. Any next actions here?\n. Can you give me an example that runs standalone outside of rails with no additional external code needed?  If you have a particular font you're using, upload it somewhere so I can run your code.\n\nAlso, use a supported viewer before reporting bugs:\nhttp://wiki.github.com/sandal/prawn/supported-pdf-viewers\n\nNeither KGhost nor Acrobat 8 are supported.\n\nI closed the ticket because right now it's not possible to reproduce the issue given the information you've provided, but once you update it, feel free to re-open.\n. height and width are given in 1/72 in (default point size for PDF), your image size is going to depend on the DPI the image was saved at.   See the Prawn mailing list for extensive discussions on this.\n. Please read the discussions about this on the mailing list.  It's unrelated to your original issue and has come up many times before.    Also, in the future, please use an open zip format, such as .gz or .bz2\n. The issue sounds to be with your image, though.   Please move this discussion to the mailing list so someone can help you.   This isn't a bug until it can be reproduced in one of the supported viewers.\n. We are all volunteers here, keep that in mind.   You can take a few extra minutes to test in a supported viewer and then send us a package we can open without special software (such as a bz2 or gz), or you can post this to the mailing list so that someone can help you with your support request.\n\nWe welcome both kind of discussions, but the bug tracker is for bugs.\n. prawn-format no longer supported at all.  Read the release notes.\n. @eeabed:  please see and follow up on the ticket linked above.\n. We need to move this discussion over to prawn-layout's tracker.\n. Our tests use test/spec, not rspec.\n\nI have considered adding this sort of transactional support, but decided against it because we need a more generic API for this.   What we really need is something like.\n\n<pre>\n  save_styles \n  # ...\n  restore_styles\n</pre>\n\n(and a block form of the above)\n\nI think this would solve 90% of our use cases without having a ton of nested blocks.\n. No.  It'd be neat to see something like that built on top of Prawn, but it's nowhere on our roadmap.   Please only use this bug tracker for bugs and well scoped feature requests, use the mailing list for general discussion.\n. This implementation should do the trick, we might switch it to a hash on merge, and do some other cleanup, but this works.  Thanks.\n. Merged, thank you.\n. Reproducing on both stable and master, I have checked in your error case and will ping Brad about it.\n\nIn the future if you want to save us some time, follow the examples in bugs/ to check in error cases yourself, then just let us know where your fork is when you file a ticket.\n. This behavior was never defined.  So the fact that it worked before wasn't intentional, and so you couldn't rely on it, even if it happened to work for you.   (Remember... we're not at 1.0 yet, so we don't care about your customers, at all :)\n\nThat said, if we want to define this behavior, that's fine.   We can either make it raise a more intelligent error or make it equivalent to text \"\".   Give me a patch for either with specs and I'll pull it in.\n. But keep in mind that this would be an API change, so it will wait until 0.8 to be released.\n. I tried to add your patch, but it broke a lot of stuff.  Looks like these new refactorings rely on the new behavior.   Please bring up a thread on the Prawn mailing list if you want to make a case for this feature.  Daniel can discuss it with you there.   Closing for now.\n. Doing some issue tracker triage. @bradediger is this issue still relevant?\n. Still going to re-open for further investigation. Thanks for the extra context @bradediger!\n. \"My environment is: prawn 0.7.1 (gem) with prawn-format 0.2.3 (plugin).\"\n\nApparently you ignored the release notes.\nhttp://wiki.github.com/sandal/prawn/changelog\n\nDidn't the gem install tell you to read the above link?   Since it's common for people to miss it, I want to know if we could do anything better on our part to make it more visible.\n\nprawn/format no longer supported at all.\n. Prawn 0.6.3 is no longer supported, nor is the HTML markup prawn/format provided.\n. Prawnto should be updated to use our new color settings.\n. I wish folks were more careful about their patches :). Closed by a991ff604cc0ec7d3cd33286df6f22db1e1e963e\n. Should be all set, but your patch created several test failures and other subtle issues.  Did you run them before submitting?\n. I have already fixed this issues.  But there is no possible way that your tests ran properly, considering that you removed @y = ....\n\nAlso, running the example showed that things were skewed.  All set now though.\n. Confirmed and added your bug report to the bugs/ dir.  Investigating now.\n. As a temporary workaround, you can place your code inside a bounding box and it should work as expected:\n\n<pre>\n  bounding_box bounds.top_left, :width => bounds.width, :height => bounds.height do\n     #...\n  end\n</pre>\n\n\nThe issue lies in some margin_box / bounding_box interplay.\n. While your patch does provide a workaround for text-only use of indent, it does not solve the general problem.  We still need to figure out how to keep the margin box indented across a pagebreak.   Do some line drawings to see what I'm talking about.\n. @gregblass: I will merge a patch as soon as you fix it, or when we get around to it.   We are not a vendor.\n. The code here looks fine.  I want to make sure this is of general interest before merging, so I've posted to the Prawn mailing list.  If at least a few people tell me they'd use it, I'll merge.\n. I had polled the mailing list and didn't get many responses indicating a sufficient level of interest in this feature.  I'll close the ticket for now, but if this gets requested in the future, we'll consider pulling it in.\n. @Spiralis: Your sense of entitlement is shocking. This is an open-source project's tracker, not a paid customer support line. Don't be a dick.\n. @krainboltgreene, I removed your comment because it was irrelevant to the issue, and I'm not particularly interested in your opinion on how I use the English language. If you feel it's important to preserve your message for the record, go ahead and repost it, but I did not find it helpful.\n. Many folks have pointed out that whether or not I felt @Spiralis's comment was rude, it does not help to act rudely in response. Those folks are right, and I apologize for what I said. Speaking more calmly, the thing I wanted to express is that there isn't a good reason to express disbelief over a patch not getting merged that I can think of, especially one that didn't have popular support.\n\nThat said, I'm no longer an active maintainer on this project, and it looks like the original patch is stale. If this feature is useful to some folks, they should consider opening a new ticket with a new patch, as this is from over a year ago. The current maintainers could then weigh in on the merits of the feature.\n\nSorry once again for my actions, this is the sort of attitude that caused Prawn's community relations to go south a long time ago, and there's no good reason why we should go back to those dark days.\n. @Spiralis\n\nI did indeed assume the worst. My apologies. This project has a difficult past, and its present is much better than what this single outburst of mine would make it seem. Still, the reason why the feature wasn't added is because no one had an immediate need for it, and every feature means 1) an extra behavior to commit to. 2) extra tests, 3) extra documentation and 4) extra places for things to go wrong.\n\nPrawn has been downloaded something like 150,000 times. If this were as severe of an omission on our part as you make it seem, it would have come up again. But even if that's true, it doesn't mean that I had an excuse to be rude to you just because I assumed you were intending to be rude to us. I should have clarified, without a doubt.\n\nIf this feature still matters to you, consider putting together a fresh pull request, but you may want to ask @bradediger if it's something we'd be open to adding first.\n. @bradediger I wonder if we should bug github to remove whoever is squatting github.com/prawn, and then we'd have github.com/prawn/prawn, github.com/prawn/ttfunk etc. If we were to make that change, good to do it before 1.0\n. @Spiralis: Many folks scale the image outside of Prawn, however, I used to talk about adding some DPI aware scaling features in the past, but can't remember at all what I was talking about.\n. @bradediger, that's a good point.\n. \"Issues\" does not mean issues with your code.  You are not discussing a bug in Prawn, you are asking for support.  What's more, you're asking about tables, which are part of prawn-layout, not prawn-core, so this would be the wrong tracker.  Use the mailing list instead.\n. Not a bug.  Intentional behavior change by Daniel.  See:\nhttp://groups.google.com/group/prawn-ruby/browse_thread/thread/836c1349ec76c720\n. Use non-breaking space: http://en.wikipedia.org/wiki/Non-breaking_space\n. I can confirm this.  For now, the workaround is to use a TTF font with the glyphs you need.\n. While you can't do image(\"foo.pdf\"), you can do both vector import of PDF files and also use a PDF as a template via the code below.  Templates will be merged into a later prawn version.\n\nhttp://github.com/yob/prawn/tree/templates_2010\nhttp://github.com/Bluejade/PrawnVectorImport\n. Resolved in: 2a5a5f\n. Please provide a failing test case.\n. Confirmed.  I will ping Jonathan.\n. We have not yet investigated it.  I wanted to give you a chance to look it over and see if you found any obvious issues.  See if you can get us a failing test and one of us will look into it.\n\nWeird about google groups, not seeing any issues on this end.  Try again later?\n. Hi Jonathan,\n\nAttempted to merge your fix, and ran into two issues. \n\n1) It appears like this was not tested on Ruby 1.9, where we're getting some encoding issues.  I tried to see if there was a quick fix but didn't come across one.\n\n2) I think you have two competing before(:each) blocks in the main test body, and it seems like they only work by coincidence.  Since the only test that relies on the before(:each) you added is the one related to this feature, you can either inline the code into your test case or wrap your tests in a describe block.\n\nOnce we get these two issues taken care of, I can merge this.  I'll look into it if someone else doesn't get to it first, but if you're interested in fixing it, let me know when you have an updated patch.\n. Merged.   Thanks a lot Jonathan.\n. There may have been a regression,  can you build from the stable branch and see if it fixes the problem?\n\n-greg\n. Check to make sure your versions match on your production machine.  Then try the latest stable branch code here on github, then try a different font.   If you still end up with a failure, provide us with a font we can download and test with.\n. Is Outline#insert_section_after() not what you're looking for?\n. Sounds like a reasonable feature.  Please provide a patch with specs and examples.\n\nBut maybe we'll use add_subsection_to('Section') {} to clarify the intention of the feature.\n. repeat() works in a similar way that Prawn::Document.generate() does.  If you provide it with a block argument, it acts as an ordinary closure, allowing you to access the external code.   Otherwise, it instance_evals your block.  See the source at:\n\nhttp://github.com/sandal/prawn/blob/master/lib/prawn/repeater.rb#L122\n\nFor right now, you can make your code work by doing this:\n\n<pre>\n    pdf.repeat(:all, :dynamic => @dynamic) do |doc|\n      doc.text @title[:long], :size => 10\n      doc.move_up(doc.font.height_at(10))\n      doc.text \"Page #{doc.page_number} of #{doc.page_count}\", :align => :right, :size  => 10\n   end\n</pre>\n\n\nBut this API isn't great, as it is redundant with the DSL type semantics that generate() offers.  We should remove the block argument option and make it always work as an ordinary closure.  Then it would work as you expected it to.  \n\nI'll patch this for 0.10\n. Now that I look at this, because repeaters are their own objects, it's a little bit ugly to change the behavior.  Also, until the ordering of when repeaters are run changes, this will have strange results, since it will only repeat whatever the _last_ value of that instance variable is, across all pages.\n\nThe current API discourages from making that accident, somewhat.   It is a bit of a mess, but I'm putting this ticket on hold until I can properly think things through.\n. We do not need \"me toos\" on the issue tracker.  If there is a response from a core developer, the issue is being tracked.  We do not weight ticket importance by anything except for the severity of the issue in regards to our own work.  We do of course, accept patches from those who have an urgent need and fix the problem themselves :)\n. I confirmed this at the head of master, but cannot reproduce at the 0.9.1 tag.  Can you check that out and let me know?  If that's the case, it's likely that the templating code we merged caused this issue.\n. alright, I'll deal with this soon, then.  Thanks for reporting it.\n. Page layout issue fixed. [Closed by f0dd7718f8ed0abb836f723ced468667d3cd816b]\n. Man, commit 717931 from the templates code took me for a ride.   But I think this should fix it.  We can clean up the code a bit later.  @drKreso, @m-ryan: please confirm.\n. I am pretty sure this is fixed in prawn 0.9.1, as I think it was just an issue with ttfunk not being updated to its latest revision.  Please try this from the 0.9.1 tag and if your issue is fixed there, I'll mirror the changes over to 0-8-stable and cut a 0.8.5 release.\n. I looked, and I think I was wrong about ttfunk handling this.  @yob, do you have time to investigate and patch?  (Either in Prawn or ttfunk, latter slightly preferable)\n. @JamesHarrison  -- Have you had a chance to test the patch that @yob merged?\n. Cannot reproduce, even on Prawn 0.8.4 with this font:\nhttp://www.cbrd.co.uk/media/fonts/transportheavy.zip\n\nIf that is not the font that should be used, please include a link to the one that causes the error if you are still seeing this issue on edge.\n\nClosing the ticket for now, you can of course reopen if you still reproduce from master.\n. @yob: I investigated this a bit.  Presently, Prawn will generate the font identifiers by taking @document.font_registry.size + 1.  There are two ways I can see resolving this.  \n\nOne (preferable) would be for the template code to create actual font objects and insert them into the registry, so that they don't get re-embedded if the user happens to use the same font as one in the template file.  But that could be complicated and may require changes to the font code.\n\nA simple dirty hack would be to count the number of fonts used in the template, and then simply use that as an offset on Prawn's font registry.\n\nSo, we'd transition it to:\n\n@document.font_registry.size + offset\n\nwhere offset = total_number_of_fonts_in_template + 1\n\nIf you can show me how to get to that number using PDF::Reader, I can build in the change.  (Or if it's easier, just go ahead and patch it)\n. @toreriklinnerud:  Fix it or shut up and don't use it then.  Don't waste space in our issue tracker expressing angst.  It does no good.\n. @john-griffin:  Have you run the same code side by side in 1.8.7 and 1.9.1?  If you don't mind, I'd like to see an example that breaks on one and not the other.  If my hypothesis is right here, this defect should be present regardless of Ruby version.  If it's not, it'll help me rethink how to approach it.\n. @john-griffin: It's surprising to me, but it might have something to do with fonts being registered in a different order based on hash ordering between Ruby 1.8 and 1.9.   But I need to dig back into this code.\n\nAnyway, I will try to make sure this is resolved before our next snapshot.\n\n-greg\n. Fix margin issue for templates [Closed by 92110ae6aaaccf02c8967de0e3b3c0c4a8947a7d]\n. The workaround is to find a font that has all the glyphs you need :-/.  Please consider patching.\n. Inline format is now enabled in master, as are almost all text options.\n. This patch looks fine, and makes no difference on our end.  Good to be more compatible with other tools.\n\n@costan, don't bother voting on tickets or asking others to vote.  All tickets are reviewed, and we don't give preferential treatment (in one way or another) due to the popularity of issues.  Prawn is nothing close to democracy :)\n. I have merged this patch into stable and master, after a tiny bit of cleanup.  @yob: Feel free to reopen if you find faults.\n. Don't render to a file twice.\n. Just kidding, we'll look into it.\n. Cannot reproduce in Acrobat Reader.  Please provide a minimal example that reproduces the problem in Acrobat Reader or OS X Preview that I can run.   Closing ticket for now, please re-open if you find one.\n. You still have not given us something we can test.  Show us some code that runs and fails to render properly in Acrobat Reader or OS X Preview (there is Acrobat Reader for Linux), as these are the only two viewers we officially support.\n. And you still have not given us two PDFs so we can see what the difference is.\n. This was resolved a long time ago.  Please only report issues in 0.8.x or in the released development snapshots (currently 0.9, soon to be 0.10). We do not support older versions at all, and since Prawn's code changes quickly, it isn't that helpful to know about bugs in very old versions.\n. Good point, we should have a document.default_leading option.\n. Can't this already be done using a Proc?  See the examples.\n. Don't use an instance variable.\n. A local variable.  You know, the thing a closure closes over? :)\n. But nevermind, I'm pretty sure that given the current way that repeaters are implemented, this code will be executed too late, only after you deleted your section.\n\nI need to think of a better way to implement repeaters to give you this sort of control.   Closing this issue for now, please re-open it after I do some refactorings if it still doesn't do what you need.\n. While I may go with vendoring pdf/reader by 1.0, we haven't decided on that yet.  For now, please submit a documentation patch by forking and then leaving a comment here with a link to your commit\n. Ah, this had come up before but I was unable to reproduce.  That sounds likely.  We are changing a lot of Prawn's internal structure, so this issue may go away entirely, but I may roll a fix for this if we don't make it redundant soon enough.\n. Looks like so.  Not reproducing here. Closing ticket for now, will reopen if you can find someone else with the issue.  You may want to try again, and then post to the Prawn mailing list.\n. It isn't clear from this issue what you're looking for, please post to the mailing list with examples before and after your change, and what you're looking to accomplish.   The bug tracker is not a good place for conversation.\n. This was intentional.  Wait for 1.0 for full featured positioning, or build something low level with bounding_box and table.\n. Definitely not true.  Chances are you are not using a font with the right glyphs, or you are not encoding your text as UTF-8.   Read the examples to see Chinese examples :)\n. http://github.com/sandal/prawn/blob/master/examples/m17n/chinese_text_wrapping.rb\n. I'm sorry, I don't think you're providing enough information, and the bug tracker is not the right place for conversation.  What you are experiencing is not a defect in Prawn.  Discuss on the mailing list if you'd like.\n. I'm not sure what the best solution is here.   Personally, I feel like text(\"      \") using ordinary spaces is bad input, since they would be collapsed down anyway.\n\nWhat is your use case for having blank strings in text() calls or table cells?   Is there a reason why they're not being stripped before you call out to Prawn?\n. I agree there are some consistency issues with \"\" vs \" \", but there is a reason why \"\" is acceptable, it's a truly \"empty\" string, and what nil.to_s returns.  That makes it a much more common case.\n\nI know people get used to calling blank? in Rails as a catch-all, but I feel like Prawn lives in a space that is more general than Rails and needs to be more careful about data integrity.\n\nAt the very least, we should consider a much better error message.   I am not ruling out the idea of applying your patch, but I absolutely hate when Rails fails silently about errors it could have helped me find, and I don't really want to play fast and loose like that.\n\nI'll think on this, and we'll try to find a solution that doesn't put a lot of strain on users but preserves the sort of integrity we want.   It may be as simple as applying your patch when Prawn.debug =  false (the default), but raising an error or printing a warning when Prawn.debug = true\n. I don't have a good answer to what users should be expected to know here.  I agree it's ugly to have to write all that code to guard against it, but it's also significantly more robust and predictable.  The web plays fast and loose, but high data volume reporting doesn't, and that's why I need to consider more than just these basic cases.\n\nI'm thinking letting the error (or warning at least) rest on the debug flag might be a good compromise.  Users can write things like your last line, but will have a means to hunt them down if they flip the debug switch.\n. text(\"\") and cell(:content => \"\") are okay presently.\ntext(\" \") and cell(:content => \" \") are not.\n\nThey work the same way, and this is because any special cases in Prawn happen at the higher level.  All text is ultimately rendered either through TextBox or is directly ferried to the draw_text primitive.\n. blank? is not a Ruby method, it's something from activesupport, and I think that is part of the reason why this issue is confusing to new users.   Rails treats nil, \"\", \"    \" equally in a lot of places.  Not so in most of Ruby, especially in those places where precision is actually important.\n\nThat said, the equivalent semantics are indeed what we need to raise an appropriate error.  At the very least, that is what will happen as a result of this discussion.   I know what issues I need to consider here, and we'll put together something better than the present behavior for 1.0\n. Yes, we should add this as well.   Now please let this be the molehill that this is and go on with your day :)\n. Please start using the mailing list for things that require discussion.\n. The error trace doesn't help us here, unfortunately.  Please give us a runnable example that works outside of Rails.\n. Hi,\n\ndid you build a gem from master?  Or did you actually use this before 0.10 was released?   I just noticed we haven't updated the gem version on master.\n\nIf you are using an old build from before the 0.10.2 release, try the 0.10.2 release.   If you built from master recently, let me know, and I'll investigate.\n. We will investigate this issue soon, thanks for reporting it.\n. What version of Prawn are you using?  If you are using Prawn 0.8 or earlier and trying to do inline styling or cell based styling, this has never really worked properly.\n\nPlease build 0.10.2 from git, update your code to use the new table API, and let me know if you can reproduce the problem then.\n. Try it and find out.  I am almost positive that our code is now based on TextBox, which gets the calculations correctly.  If you can reproduce your problem, provide us with an example that we can run which demonstrates it.\n. Also, keep in mind that table has been merged into this repository, it is no longer in prawn-layout.   You may have been looking at the wrong code because the method you mentioned no longer exists.\n. Good call.  Can you send me a doc patch?\n. When wrapping text, Prawn reflows and compresses spaces, much like HTML would.   You can use Unicode non-breaking space characters.\n\nIn the future, please use the mailing list for questions, the bug tracker is for confirmed bugs.\n. It's possible to get the height of a cell now before rendering a table, but there should be some defined behavior for when a row exceeds the size of the page. Re-opening for further investigation / research, although it will be a very long time before I can look into this problem myself.\n. I am closing all issues for Prawn::Table, because it is being extracted into its own gem with its own repository (https://github.com/prawnpdf/prawn-table).\n\nAs I close tickets, I'm marking them with a \"table\" tag, so that @hbrandl can easily find them and optionally move them over to the prawn-table issue tracker. Anything that has the table tag can be assumed to have been unresolved at the time I closed it.\n. Unfortunately, that's not an easy thing to do.  We'd need to contact over 100 contributors to get permission from them to do this.  \n\nBut we are soon going to clarify that Prawn may be used under GPLv2, GPLv3 or Matz's terms.  This will eliminate the GPLv3 compatibility ambiguity without constituting a licensing change.\n. @huerlisi: Thanks, but we're not going to go hunt people down, it's too much work.  We're happy with our licensing as it is, we just don't want to break GPLv3 compatibility.\n. @derek-watson I'm not sure why this issue was closed in the first place, but we can definitely re-open if the issue is still present.\n\nBecause 1.0.0.rc2 is a fairly old release, I'd want to be sure we can reproduce this either in the latest release (0.14.0), or even better, on master. Please confirm that, and I'll re-open. \n\nIf you want to move things along even further, you can try preparing a pull request with the fix and a test. A commit from 3 years ago _might_ merge cleanly, but it's just as likely that it'll need to be changed somewhat if the underlying code has changed.\n\nRight now there are many open issues in Prawn, and I'm currently the only active maintainer. The more you can do to help me prep this fix for release, the sooner it will get taken care of.\n\nThanks! \n. @derek-watson Seems you're already working on a fix! Didn't see that until after I commented. Looking forward to seeing a pull request, then :smile:\n. Updating this ticket with a fresh example and screenshot of current behavior on master:\n\n``` ruby\nrequire_relative \"lib/prawn\"\n\nPrawn::Document.generate('vertical_align.pdf') do\n  text_box \"The rain in spain falls mainly in the plains.\", \n    :at => [100,450], :width => 100, :height => 100, :size => 16\n\n  stroke_rectangle [100, 450], 100, 100\n\n  text_box \"The rain in spain falls mainly in the plains.\", \n    :at => [250,450], :width => 100, :height => 100, \n    :valign => :center, :size => 16\n\n  stroke_rectangle [250, 450], 100, 100\n\n  text_box \"The rain in spain falls mainly in the plains.\", \n    :at => [400,450], :width => 100, :height => 100, \n    :valign => :bottom, :size => 16\n\n  stroke_rectangle [400, 450], 100, 100\nend\n```\n\nProduces:\n\n![](http://i.imgur.com/HIu78oa.png)\n\nI think we can agree that the top align looks correct. It's the centering and bottom align that has some complications to it.\n\n**For center valign**: it looks like we're currently making the gap between the top and the ascender equal to the gap between the bottom and the descender. Looking at how some other software does it, it looks like what we should be doing is keeping the gap between ascender and the top of the box equal to that of the baseline and the bottom of the box. \n\n_I propose that we go ahead and change the behavior to compute the bottom gap based on the baseline_\n\n**For bottom valign:**, it looks like we're including the line gap. Looking for examples elsewhere, some things I found do this, while others do not. Prawn's text box actually has an option for choosing what behavior you want for this (`:final_gap`), but it does not appear to operate on alignment, only the final cursor position.\n\n_I propose we keep behavior as-is when `:final_gap` is set to true (the default), but remove the gap when `:final_gap` is set to false and vertical align is set to bottom._\n\nWill these changes make everyone happy? If not, let me know where the problems are.\n\n/cc @bradediger, who hopefully knows more about this stuff than I do.\n. It occurs to me that for the sake of completeness, we may want to also add an `:initial_gap` option which would insert a bit of line gap in the top-aligned example. Unsure if it should be off or on by default.\n. Anyone else with experience on this topic is welcome to chime in. Otherwise, I will plan to either work on a patch that does what is mentioned above myself, or accept one from anyone who wants to put in the work!\n. @Bluejade your thoughts are also welcome of course... it's just been tough to get in touch with you :frowning:\n. @jessedoyle A pull request would be welcome, thanks!\n. @jessedoyle: Thanks. I think we still need `:initial_gap` though, which would put a bit of space between the top of the box and the text (equal to the `line_gap`). When set to false, the gap would be suppressed.\n\nThe default for `:initial_gap` should be set to match the existing behavior, so as to not break backwards compatibility.\n. It'd apply to both `:top` and `:center`, for sure.\n\n I'm trying to think through how `:bottom` should work. If you align to the bottom and shrink to fit, on overflow the initial line gap should probably be preserved if `:initial_gap` is set to true. So it seems like it applies to all of the cases.\n. @jessedoyle: Think of the initial gap and final gap as simply being a top and bottom margin, and then we're trying to vertically align the whole box.\n\nThe edge case with bottom alignment I'm worried about is this one:\n![](http://i.imgur.com/LDRsHAU.png) \n\nIf we ignore `:initial_gap` in bottom alignment, we can end up in situations where the top line of text touches the top line of the box, which is identical to what would happen if we ignored `:final_gap` in top alignment.\n\nSo when `:initial_gap` is set to true, we need to include it in the height calculations, so that it triggers an overflow and shrinks the text.\n. I'm wondering if we need to think a little more on all of this. I'm having trouble thinking of when you would want to set `:initial_gap` independent of `:final_gap`. If we're only supporting booleans, it seems like you'll want them both on or both off.\n\nBut if we were to offer finer grained control, we might want to implement something like `:padding_top` and `:padding_bottom` instead, which could be given arbitrary values. The default for both would be `font.line_gap`, but setting them to zero would completely suppress the gap. But this opens the door for having uneven spacing on the top and bottom of a block of text, which might be desirable.\n\nWhat do you think?\n. @jessedoyle: Thanks for the work you've done on this so far, it's a huge help.\n\nThe notion that we include a line gap at the bottom of the text box by default but not at the top is almost certainly a historical accident, and so I'm willing to consider this to be a bug, because it's never going to be desirable behavior.\n\nWith that in mind, I think we should figure out what the correct behavior is:\n1. If we include any whitespace at all within text boxes, we should give full control over it. That is to say we probably need to implement all the different padding options (`left`, `right`, `top`, and `bottom`). This is a complicated change, but it can get fairly close to being backwards compatible by setting those values to `0` by default.\n2. The other option I think is viable is to say that text box should be modified to drop all padding entirely, which would lead it up to the user to take care of adding whitespace above and below the box themselves.\n\nI'm in favor of the first approach (supporting all forms of padding) because it's going to be the most natural user experience. Unfortunately, it's also the most complex, and it may mean that I'd need to write this patch myself unless you're up for doing a lot of rework.\n\nThe original suggestions I made about tweaking `:final_gap` behavior were to preserve 100% backwards compatibility, but on closer inspection the default behavior I was trying to preserve is basically broken. So rather than working around the problem, I think we should fix it.\n. @jessedoyle It seems like the work you've done gets us close to option 2. Since it's going to be a pre-requisite for implementing option 1 anyway, maybe you can revise your pull request to simply act as if `:final_gap` is always set to false, then work to remove the option and see what breaks?\n. As far as I know this is still unresolved. Re-opening for further investigation / commentary. Please note that it may be a very long time before I look into this one myself, but a patch or extra research is welcome!\n. I am closing all issues for Prawn::Table, because it is being extracted into its own gem with its own repository (https://github.com/prawnpdf/prawn-table).\n\nAs I close tickets, I'm marking them with a \"table\" tag, so that @hbrandl can easily find them and optionally move them over to the prawn-table issue tracker. Anything that has the table tag can be assumed to have been unresolved at the time I closed it.\n. @yob: I added you as a collaborator.\n. This is a neat idea, but I'm hesitant to try merging a three year old patch thats semi-complex before 1.0, and would prefer if we started fresh with this idea after 1.0.\n\nVery sorry that we never gave a proper response -- the project has been badly understaffed for quite some time now.\n. @packetmonkey: This looks like the kinds of changes you are interested in seeing in Prawn. If you're interested in picking this pull request back up and giving it a closer review, we can reopen.\n. @maedhr: Thanks for the explanation. I've re-opened this to remind me to give it a little bit more thought and a closer review when I get time for it, even if it means rethinking the implementation. \n\n@packetmonkey, you're also welcome to chime in w. ideas if you have any.\n. @maedhr: What do you think of the idea of allowing tables to render arbitrary cell-like objects, as long as they implement a certain protocol?\n\nThat would have enabled you to wrap your booleans in something like a `CheckboxCell` class, and then Prawn's table code would query that for size information and call render() on it, or something like that.\n. There doesn't appear to be a huge demand to move this forward. Although I think it's a good idea, I'm going to close it out until someone volunteers to push it along. My own backlog is too full right now.\n. @piglop: This project is NOT unmaintained. Please work with the core team rather than releasing experimental gems of your own. Bundler solves that problem anyway.\n. @piglop: Please be patient. The team is working on it.\n. If anything, maybe a 1.1 feature? I'd be sad to see integrating new code block the 1.0 release. Ambivalent about whether it ends up in prawn-forms or in core, but I don't think we should bring new slices of functionality into 1.0 at this point.\n. Closing this pull request because it has gone stale. Those looking for this feature can try out @moessimple's solution, though.\n. Done. Feel free to change as you see fit.\n. I don't know what the status is on this bug, but I'm re-opening so that hopefully someone will investigate and try to reproduce on 1.0.0.\n. @stefanneculai: can you try this fix and see if it solves the problem? #743\n. #743 has been merged. Thanks all, and sorry for the long delay.\n. Prawn does not ship with a setup.rb file for a reason, and that reason is that it is distributed as a Ruby gem. Rubygems is the preferred distribution method for absolutely all Ruby software at this point, and is part of the Ruby 1.9 standard library. Installing Prawn by running `gem install prawn` will set up ttfunk for you.\n\nThe message you are seeing is something only developers will see, not users. If you've been routinely installing things via setup.rb that may be the source of lots of future problems for you. Please don't use PDF::Writer, I am its maintainer and I can tell you that this small hiccup you had in setup is tiny by comparison to the frustration you'll have with the completely unsupported and poorly designed PDF::Writer. Also, FPDF is similarly ancient.\n. Sorry for the insanely long response time. We're openly considering new extension points, so if you want to try to put together a pull request for exposing any extension points you are interested in, I'd be happy to see what you come up with!\n. @nathansamson: I'll take a closer look at this today and let you know.\n. @nathansamson Based on the mailing list conversation (particularly the discussion of repeaters towards the end), I think the bug you saw is based on same issue as what is described here.\n\nI don't think I'm going to be able to personally investigate a fix for this very soon, but please do look into it yourself if you're interested in helping out!\n. @bradediger: How terrible of a solution would it be to deep copy the entire page array? Is performance the main implication?\n. Anyone want to volunteer to look into a deep-copy based solution to this issue?\n\n/cc @irongaze, @skandragon, @nathansamson \n. @nathansamson Sounds like an approach worth investigating. Let me know if you can get a green build by doing a selective deep copying, and if so, open a pull request!\n. It would appear that this issue causes all sorts of different problems, so it's probably one of the highest priority bugs to fix. Anyone have time to investigate further?\n. Thanks for taking a closer look. I'll take a closer look at problem when I return from winter break in a few days. Anyone else who wants to give it a shot between now and then is welcome to do so!\n. @cheba: You still thinking about investigating this one? If not I'll try to fit it into my backlog, which already has a few things on it. :frowning: \n. OK. I'll leave it on my own TODO pile for now then, but anyone is welcome to take a shot at it! \n. This is still one of the biggest outstanding bugs we have, and I'd love to see a fix before 1.0. I will comment here if and when I start working on it, but anyone else want to look into it sooner?\n. Closing as no longer relevant, since we've dropped transaction support.\n. Re-opening because the problem does appear to exist. Unsure when I'll find time to investigate, though.\n\nResearch from others is welcome!\n. Sorry for the loooong delay.@alexandergitter or anyone else who has experienced this problem, can you please confirm the fix in #794?\n. @alexandergitter Thanks! I'll try to get #794 merged soon, then.\n. I will do this, assign the ticket to me once 1.0.rc1 drops.\n. Yes, I will try to write this on Sunday.\n. Closing this issue out, will continue discussion on #563 when I have a chance to give it a proper review.\n. This is a neat idea, but I feel like the right solution is for us to come up with a unified API for positioning box-like content, rather than adding new special cases to each component.\n\nSorry we never responded to you about this, the project died down for a while. The good news is that we're now active again, so your contributions would be welcome!\n. I don't think we have support for this now, but a patch would be welcome.  Sorry we never responded to this request.\n. The implementation of group was fundamental unstable and has been removed from Prawn. Sorry about this, we may re-implement group in the future.\n\nUntil then, you can try your luck with https://github.com/ddengler/prawn-grouping -- it does not rely on transactions, so it should prevent document corruption.\n. @AndrewSwerlick There is an effort going on at https://github.com/prawnpdf/prawn-templates to get templates working again as an extension. Please post this over there, and @bvogel will check it out.\n. I think @bvogel can help decide that too. I had removed some (but not all) template-specific functionality from PDF::Core in a somewhat sloppy fashion, and so there may be more that needs to be extracted.\n. Thanks for working on this @fidothe.\n\n I think that the first step is definitely to make sure our current version of the software is clean, then we can worry about older versions later. I feel like thinking through the implications of removing those files is every bit as complicated as wondering whether this might ever lead to legal trouble for us.\n\nOne thing that might work, although I'm not sure it will, is to rewrite history to replace the fonts with alternatives, just using the same filename.  So go back to wherever those files were added and rewrite the commit to use a legal alternative. Do you want to give that a try? (People who know more about Git than me, please comment if that's evil)\n\nAs for the bug you may have found in TTFunk, it's definitely possible and unfortunately TTFunk is very poorly tested. I'm not sure how much I'll be able to help with that in the near term, but hopefully you'll get to the bottom of it.\n. @fidothe Thanks. You should have commit access on TTFunk, so feel free to push branches directly rather than forking.\n\nAlso, any careful approach to rewriting history would be OK by me -- I just want to avoid breaking old release tags and things like that. Since we never supported or encouraged people to use these fonts in their own projects, even a coarse way of removing might not have much real negative impact.\n. Okay, so let's avoid rewriting history then. Once this is fixed in master, I will include some release notes saying that years ago we checked in some font files for testing and for our manual without thinking about licensing issues, and that we should not have done that, and that in the future we will make sure to pay attention to font licensing.\n. <shrugs> I'm less concerned about drawing attention from the wrong people than I am with programmers accidentally using unlicensed fonts because they thought we shipped them for use. But with that in mind, I think a line in the release notes like \"replaced all non-free bundled fonts with free alternatives\" would be sufficient.\n. Then again... people probably should be sued for using Comic Sans... but for poor taste. :grimacing: \n. @fidothe: Where are you at with this? I'd be happy to accept an incremental pull request that addresses some of these issues even if it doesn't hit them all.\n. I've removed all non-free fonts from Prawn and its dependencies, added \"THIS IS FREE SOFTWARE\" notices whenever missing in Prawn's source files, and added a placeholder message to images folder saying \"We believe all these images are compatible with Prawn's licensing, but please file an issue if you have a problem\".\n\nTechnically speaking, there is more we could do to make Prawn's licensing compatibility / compliance even better, but much of what remains to be done is just boilerplate, not issues of actual incompatibility or violations. Patches are welcome wherever there's a loose end to be tucked in, but for now I'm going to close this issue and say we're ready for 1.0 as far as licensing is concerned! \n. stroke_axis is a tool used by the manual only that is in [manual/example_helpers.rb](https://github.com/sandal/prawn/blob/master/manual/example_helper.rb#L223-244), it is not a part of Prawn. Though, because it feels like it's useful and this is a common complaint, perhaps it should be.\n. Hi @mojavelinux,\n\nSorry that this isn't fixed. Unfortunately we're dropping support for templates because we don't have anyone with the experience and time necessary to maintain them.\n\nThis was mentioned in the 0.13 release notes and is also now mentioned in the manual, but the code will be at least disabled in time for the 0.14 release, and removed by 0.15. If I have time to do it, I'll extract the code into an (unsupported) gem extension that hopefully someone will be willing to maintain or improve in time, but for now we need to focus on Prawn as a whole and have very limited time to do so.\n. @mojavelinux There is a [long conversation on the mailing list](https://groups.google.com/forum/#!searchin/prawn-ruby/dropping$20support$20for$20templates/prawn-ruby/S6gXA-i0-do/fe98QFnhXw0J) about this, and although the only thing that might be broken in templates for your use case is compression, other user are having many more issues with them. See the full list here (even though they are closed, they are unresolved):\n\nhttps://github.com/prawnpdf/prawn/issues?direction=desc&labels=templates&page=1&sort=updated&state=closed\n\nI asked for help with addressing those issues in late November, but not one of them has been fixed yet, even though some research effort was put in.\n\nThe good news is that for your particular case, you can probably use the `pdftk` command line tool to join PDFs together. Some examples are here: http://www.pdflabs.com/docs/pdftk-cli-examples/\n\nAlso worth considering is adding this sort of read-only template behavior to Prawn... it's not what everyone wants, but at least a decent number of users will have a similar use case to your own. \n\n@cheba, @yob -- how realistic would it be to add read-only page merging to Prawn, and would it allow us to maintain a high level of stability, or would it still be brittle?\n. Closing this pull request because it has gone stale, but please feel free to re-open if you resolve merge conflicts and address the points @yob mentions above.\n. Re-opening as the issue still exists on 1.0.0. Sorry for the very long delay in response.\n. I am closing all issues for Prawn::Table, because it is being extracted into its own gem with its own repository (https://github.com/prawnpdf/prawn-table).\n\nAs I close tickets, I'm marking them with a \"table\" tag, so that @hbrandl can easily find them and optionally move them over to the prawn-table issue tracker. Anything that has the table tag can be assumed to have been unresolved at the time I closed it.\n. Here's a minimal example to reproduce the problem:\n\n``` ruby\nPrawn::Document.generate(\"corrupted_dests.pdf\") do\n  formatted_text_box([{ :text => \"Google\",\n                       :link => \"http://google.com\" }])\n\n  encrypt_document\nend\n```\n\n@rossdakin: Sorry we took so long to respond. Looking into @cheba's fix now.\n. Merged!\n. @goldfishgrenade: Can you give an example that reproduces the problem?\n. @goldfishgrenade: I opened #683 and added your example there. Feel free to investigate further and even submit a pull request, otherwise I'll get to this whenever I get a chance. \n\nI should be able to do a quick review by Wednesday, but if it's not an easy fix it may be a long time before I get to it. We're fast about merging fixes though! :grin:\n. @goldfishgrenade: Also, your environment looks fine. Ruby 1.9.3 is officially supported, and Prawn 0.15.0 is our latest stable release. I was able to reproduce in OS X Preview, which is a viewer we support. So it's a real bug!\n. I am going to re-open this issue just because I'm interested in whether we're doing this in a way that's well-optimized or not. I don't expect we're going to have great performance or memory efficiency with tweaking (especially compared to C libraries), but I wonder if we can do better than what we're doing now, at least.\n\nMaybe it's worth revisiting ChunkyPNG and seeing what it can offer.\n. @cheba: Yes, we can't avoid splitting out the alpha channels, as @bradediger already mentioned above.\n\nI'm mostly interested in whether our implementation creates some unnecessary intermediate objects that we might be able to eliminate by reading in larger chunks at a time, or doing some other tricks. We may come up empty, but it's worth investigating. When we wrote the PNG code, we weren't necessarily thinking about what would be the optimal way of doing things. \n. @MarkDBlackwell\n\nWe have the constraint of working in pure Ruby. Simply installing `prawn-fast-png` mitigates this problem, but involves pulling in a heavyweight dependency. \n\nThe use cases for Prawn are vast. Someone may be hand generating a single report on a decently powerful machine, once. In that case, memory and speed are not a concern. Anyone who is doing server-side generation of PDFs however will be badly hurt by this issue, and we've been aware of that for a long time.\n\nI think we can possibly add a warning at least, so that this issue will be detected at development time rather than in production. I might even go as far as to have a variable that's off by default, and spit an error until someone sets it otherwise. That would work something like this:\n\n``` ruby\nrequire \"prawn\"\n\nPrawn::Image::PNG.allow_transparency = true\n\n# your code here \n```\n\nWithout that value set, you'd get an error like:\n\n```\nPrawn's support for transparency in PNGs is very processor and memory intensive, \nand is disabled by default. To enable it, set Prawn::Image::PNG.allow_transparency = true. \nAlternatively, consider installing the prawn-fast-png extension\n```\n\nI think either of these options (a warning or off-by-default feature) are worth discussing. But I'm also still interested in verifying how much of the slowness and memory usage is due to inherent problems (of which we know there are some), and how much is due to implementation issues.\n\nBut in any case, I agree we should do _something_ about this before 1.0\n. @cheba: It would raise an exception. We have a very easy place to put this, directly where we split alpha channels.\n\nThe argument @MarkDBlackwell is making is that support for PNG with transparency in Prawn is effectively broken due to its efficiency issues, even if the feature produces technically correct output. I'm not sure that I'd go to that extreme, but I definitely think of it as being a feature that is problematic.\n\nWhat we are trying to figure out is the best possible user experience, while keeping our constraints in mind. In my view, being explicit is better than being implicit, and giving feedback early is better than later. A warning could do this, but forcing to set a variable would allow us to be _certain_ the user understood the potential problems, and also alert them to an alternative solution.\n\nThe thing we need to remember when working on this library is no one is going to care about why there are all the technical reasons for our inefficiency, they're just going to see memory spikes and slowdown and be frustrated by them. We should fix these issues where we can, and do better with communication where we cannot.\n. I would imagine it wouldn't create any support requests at all if we include an explanation and possibly a link in the error message. But it may prevent someone from building an entire project only to realize later that these performance issues were a show-stopper for them.\n\nAgain, the message I would want to show is something like this:\n\n```\nPrawn's support for transparency in PNGs is very processor and memory intensive, \nand is disabled by default. To enable it, set Prawn::Image::PNG.allow_transparency = true. \nAlternatively, consider installing the prawn-fast-png extension\n```\n\nHow would this create problems that would require a support request?\n. @cheba: I would like to see the numbers on the different PNG types, it's my recollection that most of the performance issues we had were with alpha channel splitting, but I could be misremembering. Can you try running some benchmarks?\n. @cheba: Thanks! It'll be great for us to take a more quantitative approach to problems like these, so we can make better informed decisions.\n. @yob: If I were to introduce an exception, I could probably wait until the time of the 1.0 release. Also, I'm not against using a warning rather than exception in theory, except in practice it's very likely the user won't see that and it'll just be ignored.\n\nMy main priority for 1.0 is just to have clear messaging about what is stable and reliable, and what is problematic. I'm open to any possible way of communicating that, as long as its effective.\n\nWhat's more... if I make a change people hate, I won't stubbornly stick to it. But I rather try something out than wonder what the effect will be in theory.\n. @MarkDBlackwell: I totally understand the concern from your perspective, and I feel like there are plenty of users who will end up in similar situations. But I also know that we have a hugely diverse userbase, and so I can't really make claims about what the \"majority\" use case will be.\n\nAnother option we have here is exception raising behavior that is OFF by default. This could be documented in the manual, would address the use case you mentioned (presenting an error to end users rather than hanging for a long time), and would not introduce a behavior change to Prawn's default behavior.\n\nLet's leave all options on the table, start with optimization first, and see where we're at by the next release (not 0.13.0 which will ship Sunday, but 0.14.0 a month from now).\n. @MarkDBlackwell, I'd be OK with a patch for an exception that is raised only when the flag is set, and does nothing by default. I can't promise it will stick around until 1.0, but I'd encourage you to try it out, see if it works for your use case, and if so, submit a pull request.\n. @MarkDBlackwell It's a good suggestion. It definitely will get looked at faster with a patch though, so feel free to send one in if you get a chance.\n\nIn any case, thanks for sharing your experiences with us.\n. @MarkDBlackwell @cheba: Feel free to continue discussing this, but perhaps head to the [Prawn mailing list](https://groups.google.com/forum/#!forum/prawn-ruby) or take the conversation to private email. I want to keep the thread for this ticket focused on the optimization of the PNG stuff.\n. @cheba: Thanks for looking into this! Be sure to try either JRuby 1.7 or MRI 1.9.3+ as well, because those are the Ruby implementations we're targeting. But I think this issue is going to show up in any Ruby implementation, so we can start anywhere and just verify that later.\n. @cheba: Absolutely, we know the problem is in our code. I was actually considering the opposite issue... that RBX generational GC might be a little bit more kind to us than MRI's GC.\n. @cheba: The performance issues are possibly related to excess object creation, and possibly also due to GC of temporary throwaway objects. For example, this code creates two strings for every single pixel. If we assembled all the values in a single array and then ran one pack statement, we'd massively reduce the amount of time spent on temporary object allocation and GC: \n\n``` ruby\n        color_byte_size = self.colors * self.bits / 8\n        alpha_byte_size = alpha_channel_bits / 8\n        pixels.each do |this_row|\n          this_row.each do |pixel|\n            @img_data << pixel[0, color_byte_size].pack(\"C*\")\n            @alpha_channel << pixel[color_byte_size, alpha_byte_size].pack(\"C*\")\n          end\n        end\n      end\n```\n\nhttps://github.com/prawnpdf/prawn/blob/master/lib/prawn/images/png.rb#L358-L366\n\nFor a single 640x480 image, the current implementation is going to create over 300,000 strings in this area of the code. I imagine there are ways to avoid that!\n. It's really just a shot in the dark, but I'd be interested in seeing what kind of results people with the code I just put up on #599. I am seeing minor improvements in memory and speed running our png_type6 benchmark, but I would like to see more realistic tests.\n. @yob Neat stuff.  I ran your allocation script against #599 and got 235900 objects... so about half of our current implementation, but MUCH more than ChunkyPNG. This doesn't surprise me, because ChunkyPNG uses a numeric bitmap to store the data rather than a ton of nested arrays.\n. I committed your objects benchmark to master... may be helpful for you @cheba if you're still looking at this too.\n. @yob: Now down to 5260 objects on #599 (although memory footprint didn't change much)\n. @yob: Very coarsely via OS X activity monitor (though something like top should also work) while running the png_type_6 benchmark. I bumped up the number of iterations on that so you have enough time to watch it.\n\nMaster is showing about 45-50mb, and my branch 25-30mb. Time is 45s vs. 33s on my machine.\n. I've thrown up a test repository for us to try out the different implementations with some giant PNGs:\nhttps://github.com/prawnpdf/png-testing\n\nI've just been running `time ruby png_example.rb` and then changing the branch in the Gemfile whenever I want to  swap between implementations.\n\nHere are the results I got on my machine (Ruby 2.0.0, OS X Snow Leopard). All of them use the 2402 \u00d7 1707 book.png file.\n\n**master:** Runtime ~27 seconds, peak memory ~832 MB\n**png_optimization:** Runtime ~18 seconds, peak memory ~ 325 MB\n**chunky_png:** Runtime ~50s, peak memory ~ 583 MB\n\nSo my results are indicating that my recent set of optimizations are winning out in both memory usage and speed. It's still very slow, but then again, 2402x1707 is a giant file to be processing in Ruby.\n\nI need to clean up the code on #599, but it's basic design might actually be an improvement, in that it extracts the filtering logic into its own class. I need to tweak naming, APIs, and use of variables throughout to make it suitable for merging though.\n\nIf I do that, is anyone opposed to me merging my optimizations as an incremental improvement? I will probably leave this ticket open until we're fairly sure we've exhausted our options, but it would be a step towards making things at least a little better! \n. It's worth noting two other points:\n\n1) prawn-fast-png is currently not compatible with Prawn's master branch. Hopefully someone will fix it, otherwise we should probably offer a patch ourselves.\n\n2) when reverting to Prawn 0.12.0, prawn-fast-png runs in about 1 second, and takes up < 100mb at peak memory in the Ruby process (unsure if ImageMagick ends up kicking other processes under the hood).\n\nMaybe we should be digging into ImageMagick for algorithmic inspiration?\n. Whoa! Using my https://github.com/prawnpdf/png-testing code, @cheba's work on #600 is chewing through the test PNG in 4.7s and using only ~70MB of memory. That's awesome!\n\nCan someone try his code in a real project for a proper smoke test?\n. The output looked correct, also if you run the spec/acceptance/png.rb I checked into master the other day, it appears to be generating good output for all PNG types. I put a bright red background in it to prove transparency is working.\n. Our list is very small and ought to be expanded, but officially it's Adobe Reader on all platforms, and \nPreview on OS X. Rendering looks correct on both of those on OS X for me.\n. We officially target the latest released version for each platform, and do the best we can with older versions. In practice we rarely run into viewer-specific problems with Adober Reader and Preview, as long as we follow the spec.\n\nKeep in mind our support policy is based on our available resources, rather than what we'd _like_ to be \nable to support. We can definitely refine and extend this in time.\n. Also, I am totally okay with shipping something that we may need to revise or revert later. We can learn a lot by releasing code to our actual users, and as long as we act on the feedback we receive, it's okay for us to incrementally improve our stability.\n. With @cheba's patch merged, we have about as decent performance as I'd expect us to be able to get out of Ruby. Additional improvements are welcome, but I think it's OK for us to close this ticket for now.\n\nPlease report back with results, though!\n. There are some issues with this, unfortunately. In particular, our manual automatically pulls its descriptions from its source code, and right now that means that the \"This is free software...\" line is getting repeated on every page of the manual, which isn't what we want. We could update the manual file to filter those out, or not include them in the manual files... either way would be OK with me.\n\nClosing this for now, but if someone wants to resolve the merge conflicts and the manual issue, please re-open!\n. Someone else will look into your main issue, but...\n\n``` ruby\n>> {content: \"blah\", colspan:2}\n=> {:content=>\"blah\", :colspan=>2}\n>> RUBY_VERSION\n=> \"1.9.3\"\n```\n. This feature exists in prawn-table, and in the 1.x versions of Prawn before we extracted the gem.\n. I don't fully understand this issue, but it appears to still exist in 1.0.0 so I'm reopening for further commentary and discussion.\n. @no-dashes: Sure, investigate, add additional research to the ticket, and optionally a patch. We'll be able to help answer questions about the code if you have any.\n. @no-dashes: Can you try the code on #773 and see if it fixes your problem?\n. @no-dashes: Great, hopefully we'll get this merged and released soon, then.\n. I've merged a revised version of @Mario1988's patch in master!\n. @cs: Sorry again that we didn't get to this sooner. The team didn't even have time to address all the pull requests we got for bugs, so features were very much de-prioritized.\n\nI will take a closer look at this as I work through the pull request backlog. Thanks for your patience.\n. @cs: Just a heads up, I've done some light review of this patch and I'm definitely sold on the idea. I want to think more about the interface before merging though, and so this may sit around for a little while until I get a chance to merge some of the other patches that have been piling up in the queue.\n\nBut I'll be sure to get in touch once I have time to take a closer look at this one!\n. @cs: We're going to work on this over at #586. Please do share your thoughts over there as @packetmonkey attempts a slightly revised approach to this problem.\n. @doomkim: This issue is ancient! If you're looking for the entry point into our manual, you can find it here: https://github.com/prawnpdf/prawn/blob/master/manual/contents.rb\n\nThe manual building code has been extracted into its own gem, its repo can be found here: https://github.com/prawnpdf/prawn-manual_builder\n\nAll `rake manual` does is run the above contents.rb file. This is the task in case you're interested though:\n\n``` ruby\ndesc \"Generate the 'Prawn by Example' manual\"\ntask :manual do\n  puts \"Building manual...\"\n  require File.expand_path(File.join(File.dirname(__FILE__),\n    %w[manual contents]))\n  puts \"The Prawn manual is available at manual.pdf. Happy Prawning!\"\nend\n```\n\nHope that helps!\n. Did we ever sort out what this issue was?\n. @robzolkos: If you can restore your bug example repo, we can take a closer look. Just to confirm, you've reproduced the problem on Prawn 1.0.0 (just released last night)?\n. Transactions (and groups) have been removed from Prawn due to fundamental issues that cause instability and corruption. Sorry!\n. This is definitely a bit of a tedious task currently.\n\nI spiked an example to see how you might go about doing this in a document, and came up with code that can produce the following output:\n\n![](http://i.imgur.com/HL0uJ3t.png)\n\nIf you paste the following code into a file and run it against Prawn's master, you'll probably get similar output: https://gist.githubusercontent.com/practicingruby/53a2496dddd8586bf06c/raw/a48af017660bf59a38b405873baadc1273846ab5/x.rb\n\nThe problem is, I just hacked this together. So I have no idea whether the calculations are correct, or what the edge case scenarios are.\n\nBecause we have a lack of capacity to even work through our bug backlog, we don't track feature requests in Prawn. What we do track is _research_, and _feature implementations_ (even if they're incomplete). So if someone wants to put in some research on this (a combination of code and some documentation on how we should go about implementing this feature), we'll re-open a ticket, for sure.\n\nUntil then, it's another feature on the infinitely long \"nice to have\" list. \n. We've made some improvements to spans, but I'm not sure if they resolve this issue or not. If not, please provide a code sample for me to run which illustrates the problem, and I'll re-open.\n. Hi. Please resolve merge conflicts and provide an example that reproduces the problem. I am closing the pull request for now, but feel free to reopen once you have updated your branch.\n. Without a runnable example that reproduces this problem can't look into it further, but it sounds like possible corruption due to using either templates or groups, both of which have been removed in Prawn 1.0.\n. We've dropped support for templates due to a [huge amount of problems](https://github.com/prawnpdf/prawn/issues?direction=desc&labels=templates&page=1&sort=updated&state=closed) that have gone unresolved, with no one on the team able to work on them currently. They are simply not reliable in any reasonably complex use case, and the way we've implemented them makes it very difficult to improve that reliability.\n\nHowever, we will extract the template code into a `prawn-templates` gem soon. If someone picks up maintenance of that gem, you can try submitting a pull request to it at that time.\n. Not within Prawn itself, but you can use pdftk for that purpose:\nhttp://www.pdflabs.com/tools/pdftk-server/\n\nWe've discussed the possibility of adding support for read-only merges of PDF pages, because it could potentially be easier to maintain than our existing templates code, but no one has built a proof-of-concept yet for that. It's not currently being worked on, either. :frowning: \n. Just a heads up: I'm putting in some time over the next couple months and that will hopefully get us to a 1.0 release. Keep an eye on this repository, as well as the [Prawn mailing](https://groups.google.com/forum/#!forum/prawn-ruby) list for activity, and consider lurking in #prawn on Freenode.\n\nI can absolutely use some help, so if you want to pitch in, just let me know!\n. For those interested, we have a 1.0 roadmap now! \n\nhttps://github.com/prawnpdf/prawn/wiki/Development-Roadmap\n. Group has been removed from Prawn temporarily, but you may want to try your luck with https://github.com/ddengler/prawn-grouping -- it uses a sandboxed document so it should not cause this issue.\n. @yob: Can you update this ticket with what idea you had in mind, so that I can consider it when I get around to reviewing this issue?\n. @yob: There are some good examples that may be related on #568.\n. I've got some bad news... we're not in a good position to support the templates feature right now, and we're considering dropping it due to its lack of stability. Please see this [mailing list thread](https://groups.google.com/forum/#!topic/prawn-ruby/S6gXA-i0-do) for details.\n\nI have tagged the ticket as a templates issue, so that it can be found by the folks who have volunteered to help with fixing this area of Prawn. But because it won't see any attention from the core team in the near future, I'm closing the ticket. I will transfer this ticket, re-open it, and CC you if and when we decide to extract templates into their own gem.\n. Thanks for the update @ttantawy \n. Hi, this feature sounds possibly useful, but it looks like there are merge conflicts. Please re-open once those are resolved, and I can give you a review then.\n. Closing this for now. @sigmike: Please try #579 and confirm whether or not it fixes the issues you saw. I will investigate myself soon enough, but knowing that will help!\n. @ksugiarto That's good news. I will work on getting the other small patch from @hbrandl  merged upstream soon, in time for our 1.0.0 RC3 release.\n. @ksugiarto Can you try this and let me know if it fixes your issue?\n\n```\ngem 'prawn', :git => \"https://github.com/hbrandl/prawn.git\", :branch => \"issue_407_2\" \n```\n. @ksugiarto Sorry for not responding I must have missed this. it sounds like you may need to run bundle install.\n. @tfolk: Nice! I will also try to get the other patch from @hbrandl merged in shortly before or after the holidays and then cut a 0.13.1 release with it.\n. @tfolk: This did not make it into 0.13.1, but is now pending review from me and will hopefully be cut it the next release, either in 0.14.0 on January 15 or sooner in a 0.13.2 release.\n. This seems reasonable! If you're still interested in this improvement, consider sending in a pull request for it.\n. @Saidbek Please provide me an image to test this with that reproduces the problem.\n. I've closed this ticket, but also merged #430. Anyone watching this issue... please re-open if you are still experiencing problems!\n. @yob: I'd prefer to see a move to minitest/spec because it's standard library, and it gives some of the most basic niceties that you'd expect from RSpec. But this is not my project anymore, so that's my non-voting opinion only. :sparkling_heart: \n\nUPDATE: To be clear, a move to RSpec is an improvement over sticking with the very much outdated test-spec, but I think MiniTest is more along the goal lines of the original decision.\n. Since the switch to rspec has already been done, just go with it.\n. When we started working on Prawn, dependency management was in a really bad place. I'm not saying its ponies and rainbows right now, but it is definitely much better in the sense that applications can _usually_ cobble together a complicated series of dependencies without it all going to hell.\n\nI think things are different enough now that as long as we're not inheriting dependencies that will cause obvious stability or quality issues for Prawn and its users, it's reasonable to drop our \"Aggressive not-invented-here\" policy :tongue:\n. @juankuquintana: Are you running into this problem when using a template? \n\nIf so, template support was dropped in 0.13.0 and the feature is disabled in 0.14.0. The implementation is very buggy, and so we're no longer supporting it.\n\nIf this problem can still exist in documents _without_ using templates, then I can re-open for further investigation as soon as someone shows an example that reproduces the problem.\n. I _think_ that pdftk can be used for watermarking:\nhttp://www.pdflabs.com/tools/pdftk-server/\n\nI've never tried it though. If you find out how it works let me know, and I can maybe add something to Prawn's README or other docs -- it's a common use case.\n. This pull request seems to be addressing an important issue, but I've been away from the project enough to not feel comfortable merging it myself. @yob or @bradediger, do you think you can take a look at this one issue and see if there is anything blocking a merge? \n\nI can actually do the merge and make sure it runs clean, but I can't do the review.\n. @bradediger: Thanks for reviewing. When I merge I'll look to see how complicated changing the tests would be for me, and if I see a straightforward way of revising them I will.\n\n@kennethkalmer: This is now in my queue for further review. Since defects are being prioritized, it will hopefully be merged soon.\n. @kennethkalmer: it certainly wouldn't hurt for you to give it a try, especially if you could work on it in the next day or two. But it's also a change we can always make later.\n. @kennethkalmer I'm going to go ahead and merge this. Please do submit a pull request for better tests if you get a chance, but I think the value of this patch as it is outweighs the need to get that perfect!\n. This is going to happen for 1.0! Will review the pull request soon. @yob feel free to merge if it's still working against master.\n. Looks like this issue was solved by #446. I've re-enabled compression on the manual, but please re-open this ticket if you experience problems!\n. Patches to improve the way we wrap are welcome, as long as they do not hinder internationalization.\n\nSorry we took so long to respond.\n. Just a quick note... although it probably won't be \"bounding boxes\", I would definitely like to eventually support arbitrary components in Prawn. However, it requires us to implement a proper box model, and we're nowhere near that point now. That said, if anyone wants to work on this I'd love to see a proof of concept!\n. I'm also seeing `CannotFit` errors.\n\n@hbrandl: Is this issue covered by any of the more recent tickets we've already got open?\n. Re-opening for closer investigation. This ticket was only closed because it had gone inactive for a long time.\n. Can someone provide a screenshot of the bad behavior along with the example code that was used to generate it? Right now this ticket pretty much just says \"it doesn't render right\", but tables have many bugs, so I want to narrow down to exactly what the problem is.\n\nWill re-open when a screenshot and a little more detail is given.\n. Looks self contained, could we do it as a (possibly unofficial) extension? I.e. prawn-shading\n. @cheba Nice work!\n. The example does not appear to have a break in the long word in Prawn 1.0.0. Please leave a comment clarifying if things appear to still be broken.\n. How about releasing Prawn 1.0 as 0.13.0 and 1.0 simultaneously? The same codebase, but 1.x would officially drop 1.8 support, and 0.13.x would just be bug fixes and security releases. I think that'd be less confusing than dropping support for 1.9 in a 1.0 -> 1.1 release.\n. I agree, the 1.0 RCs and the 0.12.0 release are so far away from one another it'd be crazy to do that. But that's not what I had in mind. What I was suggesting is that the 1.0 codebase should be released as both 0.13.0 and 1.0 simultaneously, the only difference is that 1.0 will not promise Ruby 1.8 compatibility.\n\nSeeing as our 1.0 RCs run on Ruby 1.8, it'd be a shame _not_ to provide them to people working on legacy code -- I was the one who cut the 0.12.0 release, and it is nearly two years old! But I really dislike the idea of dropping compatibility in a 1.0 -> 1.1 release, because I always had assumed we'd start using semantic versioning after 1.0.\n\nIf we went this direction, backporting bug fixes would initially be easy, and later could be left up to people who care about it -- we don't need to support 0.13.0 forever, but I'm sure the core team wouldn't mind cutting releases from time to time and accepting pull requests for bug fixes.\n. @cheba: The 1.8 related compatibility layer could be removed from 1.0. We have not released it yet, so we can change whatever we'd like before we do.\n\nThanks for sharing your thoughts. I'd like to hear what @bradediger thinks, since he handles our releases these days. If I were still maintaining the project, the 0.13.0 / 1.0 release is what I would do. It's not perfect but it strikes a reasonable balance of concerns, IMO.\n\nKeep in mind that this would _ONLY_ be a concern for those who need 1.8 support, and ONLY if they want to use 1.0-like features. That's an edge case, so it won't be confusing to most.\n. @yob: To me, this is what semantic versioning means: \n- tiny: no visible external changes in behavior -- bug fixes only\n- minor: additions but no breaking changes in existing behavior\n- major: may break existing behavior\n\nIf we begin removing 1.8 compatibility in the internals during the move from 1.0 -> 1.1, for some of our users that will break existing functionality.\n\nAnother alternative is to simply leave 0.12.0 as the last 1.8 compatible release. How many people are running 1.0 release candidates AND 1.8? If not that many, there is no issue with dropping support for 1.8 in all 1.x releases of Prawn\n. Deprecations can be supported in 1.0 by clearly marking the deprecated methods and making it clear they are no longer part of the public API. This gives us the ability to change or remove them later.\n\nAs for the versioning, so far I've seen these suggestions:\n\n1) Drop 1.8 support entirely moving forward (leave 0.12.0 as the last version that supports 1.8)\n2) Release 1.0 and 0.13.0 simultaneously (leaving 0.13.0 as the last supporting 1.8)\n3) Release 1.0 and later release 1.1 (leaving 1.0 as the last supporting 1.8)\n4) Release 1.0 and then later release 2.0 (leaving 1.0 as the last supporting 1.8)\n\nI honestly think these suggestions are listed above in ascending order of confusion! The first confuses no one, the second and third confuse the small subset of people who care about 1.8, and the fourth confuses everyone. But only options 2 and 3 attempt to bring Prawn's 1.0 features to Ruby 1.8 users (a minority) without confusing our Ruby 1.9-2.0 users (the majority).\n\nI'm closing this ticket and leaving this issue up to @bradediger to decide. He's the only other person besides me to ever cut a Prawn release, and I don't think that my coming back to the project to help out is best spent painting bike sheds.\n\nOnce again, thanks for your thoughts @cheba, but we'll take this from here. Other tickets need your love more than this one!\n. @cheba: Understood. Don't break 1.8 support until you hear official word from a core team member that we're dropping it. No matter what we name the releases, I do hope that happens soon so we can remove that cruft and start using some more modern Rubyisms.\n. This needs documentation in order to be merged, but otherwise looks fine. Please re-open when it is documented, and I'll merge it.\n. If this is a feature that is only in PDF 1.6+, I think we'd need a min_version guard in this code. Is that correct @bradediger?\n. Okay... so this patch needs a few things then, IMO.\n- Add a `min_version` call to make sure we're setting the right PDF version.\n- Wrap lines cleanly at 80 chars\n- Use the notes posted above from @jlduran to write appropriate API documentation\n- Fix manual example to actually use the option, and set it to not produce output as we do with some of the\n  other examples.\n- Rewrite manual require to use `require_relative`\n- Resolve merge conflicts\n\nDoes someone want to take this up? If you've already got commit access, pushing this code to a branch on prawnpdf and then opening a fresh pull request is the way to go.\n. I'm closing this out again, but will reopen if someone volunteers to work on the above feedback points.\n. What you did looks OK to me. I will probably rebase down to a single commit before merging, but I think I can take it from here. Thanks!\n. Merged, thank you! \n\nYou've also been given commit access to Prawn. Please see this page for contribution guidelines:\nhttps://github.com/prawnpdf/prawn/wiki/Contributor-welcome-notes\n. Sorry everyone for the delay in response... the entire Prawn core team was busy with other things for the last several months, and so we've not done a good job of reviewing patches lately.\n\nI'm in the process of triaging all the outstanding requests and will review this one as I work through the backlog. Keep in mind I've been away from the project at least two years now, so it's going to take some time for me to dust off the cobwebs.\n. This patch seems fairly straightforward. Except for my question about the error suppression, I think the only other thing it needs is an example in the manual showing how it's meant to be used.\n. Closing for now, but I will be happy to re-open once a manual example is added and when I understand the need for the error surpression. Anyone is welcome to contribute those things!\n. @jcoleman: Are you sure you pushed your changes? I'm not seeing them on your branch.\n. @jcoleman if you need to revise based on my comment above, please push a new commit rather than rewriting history. It will help make the pull request a bit clearer, and we can always rebase during a merge if necessary.\n. yes, I'm aware of what you're _trying_ to do, but that's not how the conditional modifier form of `rescue` works.\n\n``` ruby\n>> class MyError < StandardError; end\n=> nil\n>> (raise StandardError.new) rescue MyError\n=> MyError\n```\n\nAny inline rescue is treated as rescuing _all errors_, and returns whatever follows it. Please revise!\n. Thanks. Now that we're at a point where we can see that the code at least works as you expect it would, we need to consider the implementation details.\n\nI'm very concerned that the current approach may break in the future. Right now the purpose of `CannotFit` is to halt program execution... it's not a safe exception to rescue from by design, and if it happens to be safe it would only be by side-effect of the current implementation. In other words, I have no idea whether future changes will break this code, nor do I know what its side effects will be.\n\nI've dug into the source a bit... unfortunately, you're going to need to work through a massive rats net if you work your way up from where the exception is raised, and I don't know the code enough to tell you where might be the right place to introduce a branching point that would prevent that code from being walked at all.\n\nBut now that we have a working implementation, maybe you or someone else can re-implement a solution that does not depend on internal side effects. Until then, I won't be able to merge this, but others can pull it into their own forks if they'd like.\n. @jcoleman I decided to merge (a squashed version of) this because it's a problem still frequently seen in the wild and the maintainability concerns I had are somewhat isolated anyway. Thanks for working on this patch, and sorry for blocking it for so long!\n. @jcoleman: Because your pull request was accepted, you now have commit access to Prawn. Please see our [contributor guidelines](https://github.com/prawnpdf/prawn/wiki/Contributor-welcome-notes), and happy hacking!\n. Does anyone know if this issue is still present on 1.0.0? I don't have Rubinius set up on my machine, but I think we've done some things to improve compatibility there.\n. Sorry for the long delay in response. Bounding boxes do stretch, but their height is defined as wherever the last drawing position was rather than the max height of its children. This is a bad behavior, and is also described in #487. See the discussion there for more details.\n. Your assumptions sound correct, and I think the core problem is that `float` is very naive in how it works: it keeps track of what page you start on and will rewind back to that page even if you crossed a page boundary, but isn't aware at all of what box you're in.\n\nFor this particular issue, I'd recommend using Unicode bullets in your text because it'll avoid having to hack around with float and indent, but the general problem is interesting enough that I'll re-open for further investigation / commentary.\n. Templates are no longer supported at all.\n\nFrom the 0.13.0 release notes:\n\n> We are having major problems with stabilizing our templates feature, and it should be considered unsupported at this point. The feature will be disabled by the 1.0 release, and possibly extracted into its own gem.\n\nAnd from the 0.14.0 release notes:\n\n> We officially dropped support for templates in Prawn as of 0.13.0, and now work on extracting the template code has begun. Templates are now disabled by default.\n\nAnd as of today, they've been removed from master. They are very buggy, and we're not able to support them, sorry.\n\nSpeaking more generally, always read Prawn's changelog before upgrading. The gem install message tells you to do this, and you can expect things to break if you don't. You can find the CHANGELOG here:\n\nhttps://github.com/prawnpdf/prawn/wiki/CHANGELOG\n. Can someone confirm for me whether this is a purely template related issue, or whether it has uses outside of templates as well?\n. Closing out as a templates-related issue that needs revision. Please re-open if and when revisions are made //cc @cheba\n. This is a good idea! Sorry for taking so long to respond. Re-opening because I feel that the right scoping for the grid system is definitely by the current bounds rather than document-wide.\n. @skandragon: A while back it was impossible to redefine the grid at all, due to a caching bug. Now it's possible to redefine as many times as you'd like, but the problem is that there can only be one active grid at a time in the document.\n\nSo that makes it possible for your example to work, but not for a nested grid structure to work. It's also a little clunky because of the destructive behavior of `define_grid`.\n. Hi, this ticket was closed in November because we had over 100 issues that were many months or years old that had gone inactive. We announced this on the mailing list, along with some instructions on how to get stale tickets reopened:\n\nhttps://groups.google.com/forum/#!searchin/prawn-ruby/stale/prawn-ruby/czGB6L4HZhQ/t2BB51Ki5ZQJ\n\nI've removed the stale tag, since it's clear that people are still interested in this. However, we do not keep open tickets for feature requests unless they contain a significant amount of research, or they represent some show-stopping improvement that we could not live without.\n\nA pull request that implements otf font support is welcome, and so is discussion on the [Prawn mailing list](https://groups.google.com/forum/#!forum/prawn-ruby) if anyone needs help finding their way around Prawn. An extension gem that proves the concept would be even better.\n. @mojavelinux: Just a quick note: Prawn's default behavior is to subset fonts before embedding. No extra pre-processing is needed.\n. @chloerei: I'd suggest converting without attempting to subset, then rely on Prawn to subset for you when you embed the font. We dynamically embed only the glyphs used in your text.\n. @chloerei: I see. Sorry, I'm not familiar w. FontForge. Hopefully @mojavelinux can help.\n. @chloerei: There are no plans to work on OTF support, but a patch would be welcome.\n. @mojavelinux The state of this issue is the same as any other: If you or someone else implement or do useful research, it'll move along. There are many areas we're missing important parts for in Prawn, and the best way to fill them in is to implement yourself when you have a direct need. A patch is certainly welcome!\n. @mojavelinux We don't track requests without significant research attached. If we did (and we have in the past) we'd end up with hundreds of stale tickets with no progress other than the occasional \"when are you going to get around to implementing this\". The answer to that question right now is _never_. But it can change if we find an implementer.\n\nPlease understand that we don't use our tracker for the purpose you have in mind, that this is actually a low priority change from a maintenance perspective (even if its very useful), and that our policy still leans heavily towards assisting implementers rather than maintaining a wish list of things we hope someone will eventually work on.\n\nIf this issue is important to you, the best way to help is to write a blog post, tweet, or otherwise ask around to find someone who is willing to work on this. A clear ticket that outlines implementation details and relevant documentation, or a pull request is what will get this into a work-in-progress / planned development state.\n. Hi @dmarkow, sorry for the confusion on this.\n\nIn November we did a bulk close on any ticket that did not see recent activity, because we had something like 100+ open tickets that had never been properly addressed by our core team or the submitter had gone silent (some as old as 2-3 years!). There's a mailing list post about that here: https://groups.google.com/forum/#!topic/prawn-ruby/czGB6L4HZhQ\n\nThe process for re-opening a ticket was simply leaving a comment and making sure there is a reproducing example, and this ticket meets both of those criteria. I've confirmed the bug still exists in Adobe Reader on master, so we'll look into it eventually. If you want to investigate and contribute a fix or some research, we're actively monitoring the tracker now, and a patch is absolutely welcome!\n. Oh, that makes sense!\n\nIt looks like the colorspace isn't being set for the stroke color when table is used, even though the fill color is being specified. Here's what the code is doing.\n\nSet non-stroke colorspace to RGB\n\n```\n/DeviceRGB cs\n```\n\nSet nonstroke color to black\n\n```\n0.000 0.000 0.000 scn\n```\n\nSet stroke colorspace to RGB\n\n```\n/DeviceRGB CS\n```\n\nSet stroke color to black\n\n```\n0.000 0.000 0.000 SCN\n```\n\nIt makes sense to me that missing the colorspace definition would lead to corruption.\n. And if you look at the `lib/prawn/repeaters.rb` file, it calls `save_graphics_state`. My guess is that some interaction between dynamic repeater manipulation of the graphics state stack and whatever table is doing under the hood with graphics state is to blame. Please do take a closer look!\n. `stroke_color=` is just an alias for `stroke_color(color)` so I don't think that would cause problems. But keep looking! You may want to look at the calls to `set_color_space` (defined in prawn/graphics/color.rb` to see the difference between how it's being called in the different cases.. that's where the colorspace is actually set.\n. Sounds like you nailed it! Next step is to write a test to reproduce the bad behavior.\n\nYou should be able to use the tests in https://github.com/prawnpdf/prawn/blob/master/spec/graphics_spec.rb as a guide.\n. @dmarkow: Here are some specific lines that should be useful for testing examples:\n\nhttps://github.com/prawnpdf/prawn/blob/master/spec/graphics_spec.rb#L233-L281\n. Oh, those are not repeated statements, the capitalization matters. the lowercase ones (`cs`/`scn`) are setting the fill (non-stroke) colorspace + color, the uppercase (`CS`/`SCN`) are setting the stroke colorspace + color.\n\nIf both the fill color and stroke color have been set, I'd expect to see the first example, if only the fill color has been set, I'd expect to see the second example.\n\nFor details on this, see page 240 of the PDF standard:\nhttp://wwwimages.adobe.com/www.adobe.com/content/dam/Adobe/en/devnet/pdf/pdfs/pdf_reference_1-7.pdf\n. It looks like the problem is on page 2, not page 1. Yes, the stroke colorspace is showing up on the first page (it's object 5 0, which uses the stream from object 4 0). But the stream in 4 0 resets the graphics stack to the original state as its last action (see the `Q` `Q` calls at the end)\n\nSo by the time we get to rendering the second page (8 0), the colorspace is NOT set, but there are calls to `SCN` (see stream 7 0). I'm not sure what's causing Prawn to get out of sync with the PDF, but that may be the source of the problem.\n. Note, all of the above are from your original example at the top of this issue.\n. We also have a test that says the colorspace should be set on every page to please fussy readers whenever the colors have been set, but it's clear from the output that's not happening in this case.\n\nHere's the test:\nhttps://github.com/prawnpdf/prawn/blob/master/spec/graphics_spec.rb#L272-L281\n. To clarify a bit, you don't necessarily want to save the graphics state of the first page, what you want to do is create a complete snapshot of the graphics state wherever the repeater is defined, fully restore it before running the repeater code, and then fully revert to whatever the graphics state was on a given page after the repeater code runs.\n\nIn other words, repeaters should not assume anything about the page they're being run on, they should push a new state onto the graphics stack, replay the settings from wherever they were defined, then pop the stack to ensure that none of their settings affect the rest of the page.  Right now I think Prawn is _trying_ to do that, but corrupting things in the process due to a mismatch between Prawn's internal state and what's being written to the PDF.\n\nI'd look at the following methods for further investigate:\n\n`freeze_stamp_graphics`: https://github.com/prawnpdf/prawn/blob/master/lib/prawn/stamp.rb#L125-L131\n`save_graphics_state`: https://github.com/prawnpdf/prawn/blob/master/lib/prawn/document/graphics_state.rb#L42-L49\n`Repeater#run`: https://github.com/prawnpdf/prawn/blob/master/lib/prawn/repeater.rb#L111-L116\n\nSorry for the spaghetti code. Once we narrow down the source of the bug and get a test written, I'll probably refactor this somewhat, because it clearly needs it.\n. @dmarkow For the most part your understanding of what's going on reflects my basic understanding of the code as well. The problem with using whatever the current page's graphic state is would be that you wouldn't have consistent behavior for your stamp across pages. \n\nFor example, if you have a page that sets the fill color to red but does not set it back to black before crossing a page boundary, do you really want your repeated text to be in red on that page, and only on that page? I can't imagine that's what people would want.\n\nIf we wanted to simplify the semantics of the repeaters, the decent way may indeed be to call `save_graphics_state` with no parameter, but before running `block.call`, execute a sort of \"reset\" which would put all the graphics states back to their default, as if you were starting with a fresh document. This would mean that the repeaters would not inherit the graphic state of the page they were defined on, and would essentially have their own graphics state that would be consistent across all the pages.\n\nOnce we are able to implement a clear state, we'd also be able to create a \"restore the graphics state from the page the repeater was defined on\", so it's just a matter of what behavior feels more natural.\n\nBut I definitely think we should avoid having a variable graphics state from page to page... content generated by a repeater is meant to look the same on every page, or at least start from the same base state on every page. That's what omitting the argument to `save_graphic_state` would do unless we also wrote some \"reset\" code to be run before the block was called on each page.\n. Thanks a lot for the further research and pull request, I'll take a closer look at this in the next couple days.\n. Note to self for future investigation: It looks like if we push newly initialized graphics state object rather than the graphics state of whatever page the repeater is defined on, that would give us a blank slate to work with. Unsure whether we cache those values elsewhere in document though.\n. Thanks, please re-open if you run into the issue again.\n. There have been a lot of fixes to tables and column boxes in recent releases -- I'm not sure if they resolve this issue or not.\n\nIf they do not, please submit a runnable code sample that illustrates the problem and we'll take a closer look.\n. Can someone provide an example that demonstrates the problem, and also add tests to verify the new behavior?\n\nClosing for now, but feel free to re-open when that's taken care of.\n. Thanks for updating this @BaylorRae. @celo, @kivanio does `:reflow_margins` take care of your needs?\n. Closing as stale. Please re-open if you have an explanation for why this is needed @tomconroy.\n. The Ruport Logo was made by Daniel Dormann and is licensed under the CC BY-SA 3.0 Unported license, so you're good to go there.\n. Sorry for the very delayed response.\n\nI agree that this is a confusing behavior, and it's something I'm open to change. The bad news is that it's the officially documented behavior.\n\n```\nIf the box is 'stretchy' (unspecified height attribute), height is calculated \nas the distance from the top of the box to the current drawing position.\n```\n\nBecause we've already cut our 1.0 release and marked this behavior as stable, we'd need to add some sort of flag to change its behavior that is off by default.\n\nEven better though would be for us to route around this problem by figuring out how to do this kind of task at a higher level. Bounding boxes are awkward things to work with, and so I'd almost rather invest the time into building better user-level layout tools.\n\nRe-opening this for commentary and further thought.\n. @bradediger: Is there anything that concerns you about merging this patch?\n\nIf not, I'll go ahead and merge it (reformatting the code to fit in 80 char lines)\n. /cc @jonsgreen (If you're still around!)\n. @jonsgreen, if you can confirm that the fix is appropriate for addressing #320, go ahead and hit the merge button on this one. Otherwise, I'll look at it myself early next week and get it merged (if not sooner).\n. Thanks @cheba. I've given you commit access. For our guidelines on contribution, please see: https://groups.google.com/forum/#!topic/prawn-ruby/BKrw67vyEtA\n. Thanks for adding an update here @Yolgie. This is one of the tickets that got bulk-closed for inactivity, so I didn't think to come add something here.\n. @traels:\n\nI am not super familiar with the grid code, but having it be global is definitely weird when most things in Prawn can be nested relative to a bounding box.\n\nIf you want to work on a patch or update the documentation, it'd certainly be welcome. Please submit a pull request, and let me know if you need help figuring out how to implement it!\n. What we have here isn't a patch, it's just showing a line of code we could change if we wanted to prepare a patch. It has no tests or examples, and so it's not in a reviewable state. If we simply changed this line in Prawn, nothing would stop us from breaking it or misunderstanding the intention in a future release.\n\nA pull request with tests and a clear example, and any necessary documentation updates is definitely worth reviewing though!\n. Hi @wrzasa,\n\nSorry for the confusion. There's an explanation in [this announcement](https://groups.google.com/forum/#!topic/prawn-ruby/czGB6L4HZhQ).\n\nI've now re-opened the issue and removed its 'stale' label, and will review it as I work through the issue queue. This may take a while, unfortunately.\n\nIf you want to help move things along, please see if you can confirm that the problem was introduced by the commit mentioned by @jm81 above. If so, that should help me narrow things down a bit.\n. Hi @wrzasa,\n\nI've got some bad news... we're not in a good position to support the templates feature right now, and we're considering dropping it due to its lack of stability. Please see this [mailing list thread](https://groups.google.com/forum/#!topic/prawn-ruby/S6gXA-i0-do) for details.\n\nI have tagged the ticket as a templates issue, so that it can be found by the folks who have volunteered to help with fixing this area of Prawn. But because it won't see any attention from the core team in the near future, I'm closing the ticket. I will transfer this ticket, re-open it, and CC you if and when we decide to extract templates into their own gem.\n. Sorry for the very late response. Did you ever find the source of your problem? What you have here looks OK to me.\n. Can someone post a minimal reproducing example that fails on 0.13.2? Once I have that I can re-open the ticket. A quick attempt to reproduce failed for me.\n. When you write `dash(0)` do you get an error in Adobe? If so we probably should at least raise an exception instead.\n. @McPolemic Thanks for investigating! \n\nStill willing to re-open if others run into this problem on a recent release, the only reason we closed the ticket in the first place was due to inactivity and a lack of a code sample.\n. @rbrancher: Thanks. Time is very limited now so I don't know if/when I'll look into this myself. But if we can get a pull request together I could review that and possibly merge.\n\nUntil that happens, additional research is welcome on this ticket as to figuring out the source of the problem.\n. Seems plausible. See this mailing list thread for additional context:\nhttps://groups.google.com/forum/#!searchin/prawn-ruby/float$20precision$20in$20prawn/prawn-ruby/IWNaWJBo3I0/lNmYLpnRU9IJ\n\nIf you want to try to patch the PdfObject method in PDF::Core, and look for places where we do add_content, we could probably fix this by rounding out to N decimal places (something like 4 places would probably be more than enough)\n. @packetmonkey: PDF points are 1/72 inch. So rounding them to 4 decimal place gives us a precision of `0.0000013889` inches. :grin:\n. Here's what the \"Developing With PDF\" book from O'Reilly has to say on this topic:\n\n> While the term \"real\" is used in PDF to represent the object type, the actual implementation of a given viewer might use _double_, _float_, or even _fixed point_ numbers. Since the implementations may differ, the number of decimal places of precision may also differ. It is therefore recommended for reliability and also for file size considerations to not write more than four decimal places\n\nI looked this up in the [PDF standard](http://www.adobe.com/content/dam/Adobe/en/devnet/acrobat/pdfs/pdf_reference_1-7.pdf) and it too said that it's common for \"real\" numbers to be implemented as fixed point values. In Appendix C, 5 decimal places is recommended as a maximum.\n\nI think we will go with 4 to be a bit more conservative, but if that causes any problems  we can try bumping it up to 5. But it's clear that beyond that we can expect trouble... even the standard tells us that.\n. Upon closer investigation, this issue does not have to do with float rounding (though I'll open a second ticket for that, because it needs to be fixed throughout Prawn)\n\nIt has to do with the difference between `dash(0)` and `undash`.\n\nThis is what `dash(0)` generates at the PDF level:\n\n```\n[0 0] 0 d\n```\n\nAnd this is what `undash` generates:\n\n```\n[ ] 0 d\n```\n\nThe latter is what the standard expects for setting dash to an unbroken line.\n\nWe don't seem to document anywhere the idea that people ought to use `dash(0)` to clear dashes, and we do have an `undash` method, so I think if anything we should cause `dash(0)` to raise an error... it doesn't make sense to have segments of length 0 followed by gaps of 0!\n\nThoughts?\n. See https://github.com/prawnpdf/prawn/issues/780 for updates about the decimal rounding issue.\n. @McPolemic: That's what I'm thinking too. Unless there is a reasonable use case for `dash(0)`, I think we should disallow it to prevent ambiguous results.\n. Disallowed dash(0) in https://github.com/prawnpdf/prawn/commit/e65c24411c451918718a8e8cb35631c98ccc5517\n. @gchan: Looks like so, yep. The ticket was only closed because we did a one-time bulk closure of tickets without recent activity in early November. Since it has a reproducing example and still is broken on master, I've re-opened.\n. Right now my backlog is deep, so anyone who wants to take a crack at solving this issue or at least researching it further is welcome to do so. I wouldn't expect this should need to use `dynamic: true` even if that's a workaround for now.\n. I've confirmed that #801 is a direct reproduction of this problem at the stamp level, so please follow that ticket for future updates.\n. Hi, I have reopened for further investigation. This ticket was only closed due to inactivity before.\n. Those who have seen this issue, is it present using AFM fonts, TTF fonts, or both?\n. The default fonts are all AFM. Please try downloading any TTF font and see if you can reproduce. I will eventually look into this myself but it would help me isolate things.\n. Hi @tintin81,\n\nAlthough your reader may be using those fonts under the hood, any of Prawn's \"built-in\" fonts will be processed through AFM, and that will affect the way we process and position your text in the PDF.\n\nTo use TTF files in Prawn, you need to directly provide a path to them. You can download fonts off the internet and bundle them with your project, or specify a path to system fonts. Since you're using OS X, here's some code which will use Courier directly from your system:\n\n``` ruby\nrequire \"prawn\"\n\nPrawn::Document.generate(\"example.pdf\") do\n  font_families.update(\"Courier System Font\" => \n                       { :normal => \"/Library/Fonts/Courier New.ttf\"})\n\n  font \"Courier System Font\"\n\n  # your code here\nend\n```\n\nCan you try that out and upload a screenshot?\n. I am guessing that we may have introduced some problems when we switched away from our own implementation to use the `afm` gem, but I have not investigated at all yet. One more example of a problem that exists in AFM but not TTF would certainly be desirable -- which is why I'd like to confirm this issue.\n. That's sort of the idea behind AFM fonts (though you are limited to only a very few set of options supported by the PDF spec), but it seems like they're broken for this use case in Prawn right now.\n\nFor any font that you have permissions to use, you can copy the TTF files into your project and reference those, rather than system fonts. Prawn _will_ embed the necessary font information into your PDFs, so the user will not need to have the font installed just to read the PDF.\n\nWe'll look into this, but the recommended workaround is to use TTF fonts and copy them into your project rather than referring to system paths.\n. Hi, can someone please try out the `afm_bugs` branch and see if it resolves the issue for built in fonts? It seems to render Euros correctly for me now.\n. @Tintin81, The code in #607 ought to make it possible for you to switch back to the built-in Courier font and not need to bundle TTF. Can you verify by building from the `afm_bugs` branch?\n. Great! Will merge the fix today and cut a 0.13.1 release Monday.\n. @thaisbione Unfortunately support was dropped in 0.13.0, and we're going to extract the code into its own gem soon.\n\nThere are lots of problems with it, and none of us who are currently active on the project have the time or domain knowledge to fix it.\n. Closing as a possible duplicate of #268\n. Template support has been dropped since November. It was announced as unsupported in release 0.13.0, disabled by default in 0.14.0, and removed from 0.15.0.\n\nThere is an unsupported gem that will give you template support in 0.15+. If anyone wants to attempt a fix to this problem, that's where you should send a pull request: \nhttps://github.com/prawnpdf/prawn-templates\n\nBut it's very important to keep in mind that the reason why we dropped support for templates is because their implementation is fundamentally flawed, and essentially \"unfixable\", the code needs to be rewritten to be reliable. None of us with available time to work on Prawn really know how to do that, so unfortunately I don't expect template support to improve in the near future. :frowning: \n. @JamieAppleseed: Do you have a code sample you can share? This is a really common problem for Prawn users, so if I can make it easier for people who have this problem, I would be happy to at least point them at an example. We can even possibly build a thin wrapper around pdftk and release it as a Prawn extension gem.\n. @anthonycreates: To clarify, PDFTk is not a PDF generator, and so it's not an alternative to Prawn. However, it does allow for adding pages to existing PDFs and doing limited edits like adding watermarks. If your needs are limited to just those things you won't need to use Prawn at all, otherwise you'd be using both.\n. @anthonycreates In that case, definitely look into PDFTk, and if you figure out how to do it, please report back here. We love when people use Prawn, but only when it's going to work better than the other options out there. :grin:\n. Thanks for sharing this example!\n. Sure. I think I'll probably write up a wiki page to link to, so any additional examples are welcome.\n. Hi, sorry for the confusion! There is an explanation in [this announcement](https://groups.google.com/forum/#!topic/prawn-ruby/czGB6L4HZhQ).\n\nI've re-opened your ticket and removed the 'stale' label from it, and it will be reviewed as I work through the queue. Unfortunately, that may take some time, but please feel free to research the issue further between now and then, and keep us updated.\n. Hi @AngelVillanueva \n\nI've got some bad news... we're not in a good position to support the templates feature right now, and we're considering dropping it due to its lack of stability. Please see this [mailing list thread](https://groups.google.com/forum/#!topic/prawn-ruby/S6gXA-i0-do) for details.\n\nI have tagged the ticket as a templates issue, so that it can be found by the folks who have volunteered to help with fixing this area of Prawn. But because it won't see any attention from the core team in the near future, I'm closing the ticket. I will transfer this ticket, re-open it, and CC you if and when we decide to extract templates into their own gem.\n. @hmt: See this: https://github.com/prawnpdf/prawn-table/pull/32  -- the main blockers right now are documentation and maybe some code cleanup, but you can try running from @straydogstudio's fork for the moment... it should work!\n. Hi, sorry for the long delay in response. If this is something you're still interested in working on, please post to the [Prawn mailing list](https://groups.google.com/forum/#!forum/prawn-ruby) and hopefully someone can give you guidance.\n\nI'd certainly be interested in a patch!\n. We've decided to go ahead and drop support for Ruby 1.8 in Prawn 1.0. I'll take a look at merging this patch in the near future, assuming I can replicate the problem.\n. Merged ,thank you! There was a build error on travis that I'm hoping was transient... could not reproduce on 1.9.3 locally, and re-running caused it to pass in travis. But if we keep seeing failures, I'll need to revisit this patch.\n\nCongrats @basvk, you now have commit access! Please see the relevant guidelines here:\nhttps://groups.google.com/forum/#!topic/prawn-ruby/BKrw67vyEtA\n. @cjapes: I agree with @vemv in that I don't expect this would give us any noticeable performance gain. If you actually benchmarked this and found a major improvement, please post your results + update against master, then re-open the pull request.\n. @phurley: Can you post a comment with some example code that demonstrates the use case?\n. Closing, but will re-open once I see an example. (Tagged as needs-revisions so others can find it, too)\n. Hi, I merged a slightly modified version of this patch into master -- it makes sure to use absolute rather than relative coordinates, which will avoid adding extra space on pages with non-zero margins. Please give master a try and see if it works as you'd expect! \n. Commit: https://github.com/prawnpdf/prawn/commit/3610f91c6d99f49ed57d73cb8f631613e61e553b\n. Sorry for the long delay in response.\n\nIt looks like indentation is being added, but on the left side, which is almost certainly the wrong behavior for RTL text. Reopening this for a while to see if anyone wants to investigate further.\n. @simplej  or someone else with this problem, can you confirm the fix on #795 works as you'd want it to?\n. Merged #795 with a test, hope it resolves this issue.\n. The issue here is that for whatever reason (we'd need to investigate), setting the global `text_direction` does not pass `:direction => :rtl` to the `text()` method, so the fixed code never runs, and the `:ltr` indent is used by default.\n\nHere's a code sample which I think works correctly:\n\n``` ruby\nrequire \"bidi\"\n\nrequire_relative \"lib/prawn\"\n\nPrawn::Document.generate(\"hebrew-indent.pdf\") do\n  font(\"#{Prawn::BASEDIR}/data/fonts/DejaVuSans.ttf\")\n\n  bidi = Bidi.new\n  s = bidi.render_visual \"\u05e2\u05d1\u05e8\u05d9\u05ea \u05dc\u05dc\u05d0 \u05d4\u05d6\u05d7\u05d4\"\n  text s, :direction => :rtl\n  s = bidi.render_visual \"\u05e2\u05d1\u05e8\u05d9\u05ea \u05e2\u05dd \u05d4\u05d6\u05d7\u05d4\"\n  text s, :indent_paragraphs => 60, :direction => :rtl\nend\n```\n\n(note I changed the font and require to make it easier for others to test with against master, but your original font will have the same result)\n\n![](http://i.imgur.com/zy7CavZ.png)\n\nSo, a fix for this would involve writing a test similar to the one on #795, but using the global text direction method rather than specifying direction on each text call. Then, figure out how that default gets handled internally, and update accordingly. It may be as simple as assuming that if `:direction` isn't specified that we should use `doc.text_direction`, rather than hardcoding to `:ltr`.\n\nWe should probably fix this before the next release. @elad if you have time to even start on this by writing the test and open a pull request, that'd be helpful. Otherwise I'll take a look when I find time.\n. > I'm not too familiar with the code, but looking at the text method I don't see where options would even inherit anything from the global document settings.\n\nThe relationship is inverted, `:direction` gets passed down into the initializer of a `Formatted::Text::Box`, which will default to `doc.text_direction` if the `:direction` key is not provided. \n\nSo instead of doing `options.fetch(:direction, :ltr)`, we could probably do `options.fetch(:direction, text_direction)` and that would work. `self` is the document object, so you don't need to dig into the options hash.\n\nWith this rewritten method, your original example seems to work correctly for me:\n\n``` ruby\n    def draw_indented_formatted_line(string, options)\n      gap = options.fetch(:direction, text_direction) == :ltr ?\n              [@indent_paragraphs, 0] : [0, @indent_paragraphs]\n\n      indent(*gap) do\n        fill_formatted_text_box(string, options.dup.merge(:single_line => true))\n      end\n    end\n```\n\nThe `indent()` method  is not text-specific, and so you'd need to explicitly use something like this to put the indentation on the right side:\n\n``` ruby\nPrawn::Document.generate(\"hebrew-indent.pdf\") do\n  font(\"#{Prawn::BASEDIR}/data/fonts/DejaVuSans.ttf\")\n\n  self.text_direction = :rtl\n\n  bidi = Bidi.new\n\n  indent(0, 60) do\n    s = bidi.render_visual \"\u05e2\u05d1\u05e8\u05d9\u05ea \u05e2\u05dd \u05d4\u05d6\u05d7\u05d4\"\n    text s\n  end\nend\n```\n\nSo I don't think there's a bug there. Let me know if I misunderstood you, though. Even using `:indent_paragraphs` within an indent block seems to look OK.\n\nIf I got this right, the change should be the one line revision to `options.fetch(:direction, ...)` combined with a test for the global text_direction attribute. If you can do a pull request for that I should be able to merge quickly.\n. @elad: Note I had misunderstood a part of your comment  about indent(), so I updated the above to comment to make it clearer.\n. @elad I guess it wouldn't hurt to test each case, so go for it. Also, thanks for verifying this in general, I had merged with fingers crossed there because I didn't get a response back on this ticket from the original  reporter.\n. @elad, Make a branch off the main repo, this way any contributor could help revise it where needed. Happy to review when you're ready.\n. Sorry that it took us so long to respond. I can see this might be a problem, but I'm unsure how it's solved in other applications, or what the usual use cases are like. The issue actually seems that Prawn does NOT flip these characters, but instead renders them right-to-left character by character, so something like `\"(foo)\"` becomes`\")oof(\"`\n\nI don't know that there is a smart way for us to detect characters that would need to be flipped, and I'd hesitate to do so unless there was a well-defined spec or a common convention used elsewhere. There may well be one, but this is not an area I'm very familiar with.\n\nDoes anyone have insights on this? I will leave this open for a few weeks in the hopes that some extra research gets added to the ticket.\n. Thanks @elad, what you've linked here is already helpful. Strong internationalization support is one of the things we care a lot about, so even if you don't implement this, the research will help me or someone else write a patch.\n. @elad I think we can combine both approaches. We should create a `prawn-bidi` gem that depends on Ruby BiDi (either bundled or as a gem dependency), and then add a note in Prawn's documentation that those who need bidrectional support. Our \"no third party dependencies\" rule only applies to the `prawn` gem, it's OK for extensions to have dependencies.\n\nI almost wonder if we should look towards putting most or all RTL-text related functionality into its own gem, so that people can continue to improve it independently of Prawn's release cycle. But that could be a problem to look into later.\n. @elad: Sounds like you have the first steps sorted out. Work on those and then we can figure out the next steps from there.\n. Sure, a documentation patch would be welcome, though the best bet is to put this code snippet in your repository's README (or some other page) and then just link to it from Prawn, so that it doesn't get out of date on our end.\n\nTo make a `prawn-bidi` gem would be even better. It'd do something like automatically call `bidi.render_visual` on input text whenever `:direction => :rtl` was set. It's something you can work on if you'd like, but what you have already is a good starting point.\n. @simplej: Please give @elad's solution a try. Closing for now, but will re-open if we find this does not solve the problem for most cases.\n. @cielavenir: I just removed the reference to \"License of Ruby\" in the license... you can use GPLv2, GPLv3, or the terms specifically listed in the license file (Which are Matz's terms). I have no plans to add an additional license into the mix, because we'd need to contact every contributor, and the terms we have are permissive enough as it is.\n. Hi, please use the [Prawn mailing list](https://groups.google.com/forum/#!forum/prawn-ruby) for these sorts of discussions. If a specific performance issue is identified, a ticket would be welcome for that, but general support topics are better discussed on the mailing list.\n. Hi, we did a bulk close on issues that did not see activity in the last month or so, because the project has been mostly unmaintained for the last several months.\n\nI made [an announcement](https://groups.google.com/forum/#!topic/prawn-ruby/czGB6L4HZhQ) on the Prawn mailing list about this, with the intention of re-opening any ticket that still had someone interested in it.\n\nI've re-opened this one and removed the 'stale' tag, and will investigate as I work through the review queue. Thanks!\n. I've confirmed that the issue above exists in master, and I agree, it's the wrong behavior. Does someone want to investigate this one?\n. @JacobEvelyn: I think this may actually be a bug in canvas... I'll dig deeper and see what I can find.\n. @JacobEvelyn: Can you try master and see if it fixes your issue?\n. I believe this ought to solve your problem, but please leave a comment if it does not and I will re-open.\n. Closing this pull request because we will be dropping Ruby 1.8 support entirely in Prawn 1.0. Sorry that no one responded to you at the time it was submitted.\n. Hi @ovesh. Sorry for the confusion that caused!\n\nWe needed to do a bulk-closure because the project has been effectively out of maintenance for several months now, and we had a ton of issues that were realistically never going to get reviewed.\n\nI made [an announcement](https://groups.google.com/forum/#!topic/prawn-ruby/czGB6L4HZhQ) about this on the Prawn mailing list, and the basic idea was that if you still were watching your issue we could easily re-open it for further review. I'm watching all comments on all issues :-)\n\nI've dropped the stale tag from your ticket and re-opened it. I'll review it as soon as I get a chance... but it may be a while since we're still very limited in availability.\n. Hi @ovesh\n\nI've got some bad news... we're not in a good position to support the templates feature right now, and we're considering dropping it due to its lack of stability. Please see this [mailing list thread](https://groups.google.com/forum/#!topic/prawn-ruby/S6gXA-i0-do) for details.\n\nI have tagged the ticket as a templates issue, so that it can be found by the folks who have volunteered to help with fixing this area of Prawn. But because it won't see any attention from the core team in the near future, I'm closing the ticket. I will transfer this ticket, re-open it, and CC you if and when we decide to extract templates into their own gem.\n. Sorry, but this isn't an issue we can solve in generality, and I don't want to give the false impression that escaping is not necessary. Please consider pre-processing on your end, @nithinstany.\n. I know this is a very old issue, but if you want to throw together a pull request with the basic idea, I'd be open to considering it!\n. Reopening temporarily to get more of Prawn's unresolved issues looked at!\n. I am closing all issues for Prawn::Table, because it is being extracted into its own gem with its own repository (https://github.com/prawnpdf/prawn-table).\n\nAs I close tickets, I'm marking them with a \"table\" tag, so that @hbrandl can easily find them and optionally move them over to the prawn-table issue tracker. Anything that has the table tag can be assumed to have been unresolved at the time I closed it.\n. @timabdulla: We needed to do a bulk-closure because the project has been effectively out of maintenance for several months now, and we had a ton of issues that were realistically never going to get reviewed.\n\nI made [an announcement](https://groups.google.com/forum/#!topic/prawn-ruby/czGB6L4HZhQ) about this on the Prawn mailing list, and the basic idea was that if you still were watching your issue we could easily re-open it for further review. I'm watching all comments on all issues :-)\n\nI've dropped the stale tag from your ticket and re-opened it. I'll review it as soon as I get a chance... but it may be a while since we're still very limited in availability.\n. I haven't touched this code in a _long_ time, but I think this picture more-or-less explains the current behavior (note I added the arrows by hand so it isn't perfectly precise):\n\n![](http://i.imgur.com/nXkngnM.png)\n\nBasically, our measurements try to maintain equality in the spacing from the ascender to the top of the cell, and from the baseline to the bottom of the cell. If we removed this adjustment, then we'd be aligning things based on equal spacing from ascender to top, and descender to bottom, like this:\n\n![](http://i.imgur.com/d6ooo2X.png)\n\nI can't remember the typographic reason for doing things the way we did, but it does seem to match the semantics of something like an HTML table.\n\nBecause table was originally designed for text only, I think we were far more concerned with getting baselines to line up nicely than we were with top line (ascender) alignment.\n\nSorry, but I don't think we can change this behavior. However, I'm open to ideas that might make your desired use case easier. Got any ideas for how to make things better without changing the existing defaults?\n. @timabdulla: Closing this until I hear back from you, but feel free to re-open a new ticket if you find a way to improve Prawn for your use case while keeping the points I mentioned above in mind, or re-open this one if you suspect that I've somehow messed up my understanding of why we're doing things the way we are (totally possible!)\n. Sorry, this issue got closed in a bulk-update to inactive tickets. For more details on what happened there, see this mailing list post:\n\nhttps://groups.google.com/forum/#!topic/prawn-ruby/czGB6L4HZhQ\n\nWe do not have support for TTC, but I'd be willing to consider a patch that added it to TTFunk / Prawn.\n. There's no need to refile the ticket, because we don't track feature requests -- only bugs and pull requests for current work-in-progress. Discussions about features before any work has begun are welcome on the [Prawn mailing list](https://groups.google.com/forum/#!forum/prawn-ruby), though.\n\nI would definitely like to have some sort of FAQ or guides for Prawn as a whole, but we don't have a dedicated place for them yet. For now, perhaps you can write a short blog post or a mailing list post with instructions on how you got around this problem, and then link it here.\n. @fidothe: I've done a lot with binary file formats in general, so please let me know if you run into questions or problems. Although I may be AFK for the next several days, I'll be happy to help out once I return.\n. This issue appears to be resolved in 1.0.0. Please re-open if it is not.\n\nSorry for the very long delay in response!\n. This is a nice idea. @ciopte7 or anyone else who is interested, please prepare a pull request with a patch.\n\nClosing this ticket, because we can't reasonably track feature requests for anything non-critical with our current backlog. But a patch is welcome!\n. @boutil Good idea. Please submit a pull request.\n. @boutil: Thanks, can you open a pull request for that branch so that we can discuss there?\n. We'd also need some tests to show this works as expected (or at least a clear example to show the problem). Closing for now, please re-open if you find time to address these issues @ciopte7 \n. It's a little hard for me to see what this is meant to fix. Please leave a comment with an example demonstrating the use case, and then I'll re-open for further review. \n. Hi guys, \n\nSorry for the very late reply, but you can probably make use of [formatted_text_box](http://rubydoc.info/gems/prawn/Prawn/Text/Formatted#formatted_text_box-instance_method) for this purpose.\n\nIn the future, please use the Prawn mailing list rather than the issue tracker for support requests. (The issue tracker is meant for bug reports, mostly):\n\nhttps://groups.google.com/forum/#!forum/prawn-ruby\n. /cc @cheba -- this is another templates issue.\n. @letronje: The way we handle templates is very low-level, and so there isn't a direct way to do what you'd like to do without digging down into the PDF document structure. Sorry!\n\nFor future support requests, please use the [Prawn mailing list](https://groups.google.com/forum/#!forum/prawn-ruby) rather than the bug tracker.\n. Hi guys, sorry we've been so bad at responding to tickets lately.\n\nIf one of you can point me at a font that's freely downloadable so that I can try to reproduce the issue, that would help a lot.\n\nEven if this is a JRuby-specific problem, we are planning to officially start supporting JRuby soon, so I'll want to keep tracking it!\n. @astjohn: Thanks, I'll take a closer look at this as I work through the review queue.\n. @tazsingh Thanks, I'll give that a try.\n. It looks like this probably was a JRuby issue. I was able to reproduce the bug by simply running our test suite (doh!) on 1.7.4, but it went away when upgrading to 1.7.8.\n\nI'm closing the ticket for now, but please re-open if you can reproduce on 1.7.8. \n\nOther piece of good news: We officially added JRuby support! That means that we consider our build broken when JRuby breaks, and TravisCI has been updated accordingly. \n. Thanks @hbrandl for trying to reproduce this. Since you weren't able to, I'm going to close the ticket out until @johnnyshields or someone else updates with an example to illustrate the problem.\n. Right now we don't split rows that are greater than an entire page across pages. It's something I'd be willing to consider a patch for, and it also would be better to raise an error than glitch the layout until we fix that behavior. Re-opening to remind me to add an exception.\n. I'd like to defer to whatever people think is best here, and give @hbrandl the final say on it since he's the defacto maintainer of tables right now. So please continue to discuss until you all find a solution you're happy with or you run out of fresh ideas. :grin: \n. I am closing all issues for Prawn::Table, because it is being extracted into its own gem with its own repository (https://github.com/prawnpdf/prawn-table).\n\nAs I close tickets, I'm marking them with a \"table\" tag, so that @hbrandl can easily find them and optionally move them over to the prawn-table issue tracker. Anything that has the table tag can be assumed to have been unresolved at the time I closed it.\n. Hi @gettalong: Can you address the build failure and make sure you've merged our master branch? Closing the pull request for now, but feel free to re-open as soon as you've done that.\n. The failures that are showing are issues on Ruby 1.9.3 and JRuby 1.9 mode. Looks like Ruby 2.0 is passing. I will investigate this further myself. Reopening.\n. @gettalong: Can you push your code that merges our master branch? Our latest commit was 8 days ago.\n. @gettalong It looks like we got a green build when I reopened the pull request. I will test locally when I review this patch, and if it looks OK I won't worry about it.\n. Merged, thank you!\n. Hi @ykessler,\n\nThanks for the detailed bug report. This looks like a possible duplicate of the issue we're tracking in #393. I'll add a comment over there to make sure the examples get seen, and we can always re-open this issue if we find out there are differences between it and #393.\n. @ihatemornings: To enable that behavior, you can explicitly map the `:italic` family for your Japanese font to the normal font.\n\nIf Prawn were in a better state of maintenance I'd recommend putting together a pull request to try out the graceful degradation strategy you suggested, but honestly now is not a good time for that.\n\nPlease consider submitting a patch after 1.0 is released. We don't have a timeline yet but hopefully that will be in the next couple months.\n\nI'm closing this ticket for now, but re-open it if the workaround I mentioned doesn't actually work as you'd expect it to.\n. @fidothe: This introduced a behavior change that broke use with Paperclip (see #585). Although that's not an _officially supported_ use case, it would be nice for us to get back to the original behavior as close as we can.\n\nI reverted the code in the hopes that we can revise the patch and re-apply. Do you think you can open a fresh pull request, or re-open your old one? Keep in mind that now that we've dropped Ruby 1.8 support you can probably simplify a bit.\n. Hi @txwikinger:\n\nI can confirm that except in content streams, Prawn encodes all PDF strings as UTF16. That doesn't cause any problems when we're generating PDFs from scratch, but I can see how it might impact using templates.\n\nI don't remember the specific history here, but maybe @yob or @bradediger can fill you in on it. I'm going to close the ticket because it's more of a conversation point than it is a bug report, but please feel free to continue discussion here. If we find a specific bug to fix or feature to add, we can definitely open up a new ticket for it.\n. Yeah, unfortunately our templates feature is very fragile. It works well in some cases, but breaks in all sorts of crazy ways in others. I know very little about that part of Prawn myself.\n\nThe [Prawn mailing list](https://groups.google.com/forum/#!forum/prawn-ruby) might be a good place to continue this discussion.\n. :+1: I like the idea of letting handlers set their own conditions, but would prefer to avoid the metaprogramming. Looking forward to seeing your revisions!\n. @packetmonkey: This is close to how I'd solve the problem, but not exactly what I had in mind. But because the changes I want to make are tiny, I'll just go ahead and make them when I test and merge the patch.\n\nThanks!\n. I will probably merge this by early next week, but we still don't have a timeline for the next 1.0 RC. So for now, use your fork, and then feel free to switch back to Prawn's master once I've merged. From an interface perspective, the only change will be function names.\n. @packetmonkey: I attempted some revisions. Check out my version of this patch and let me know what you think...\n\nhttps://github.com/prawnpdf/prawn/compare/pluggable-images\n. Merged!\n. Hi, can you add a comment here with a realistic use case for me to confirm the problem with? A table with all empty cells seems like a pathological case to me.\n. @sigmike: that gives me what I need to review further, thanks. Right now there is a massive backlog of pull requests that need to be looked at, but since this addresses a defect hopefully it will be processed soon.\n. Thanks, I will take a closer look at this tomorrow.\n. Merged, thank you!\n\nI've also given you commit access. Please see [this mailing list post](https://groups.google.com/forum/#!topic/prawn-ruby/BKrw67vyEtA) for contribution guidelines.\n\nI'm really sorry we took forever to respond to you. Hopefully we'll be a lot more responsive in the future.\n. @timcraft: I was able to reproduce the problem, so there's definitely something weird going on here.\n\nI am doing a complete pass through the issue tracker to make sure all issues are current and reproducible, so it may take me some time to get back to this for further research + fixing. However, if you want to investigate yourself, a patch (or just some more detailed notes on what you discover) is welcome! \n. Thanks for the extra research, this should help a lot.\n. Use 0.12.0 or attempt to fix on a fork... we haven't had a chance to research this yet.\n. @donv You could also try using a TTF font, since we process those using entirely different code\n. You can use font family mappings to fix that issue:\n\nhttps://github.com/prawnpdf/prawn/blob/master/lib/prawn/font.rb#L156-L181\n\nYou just will need to grab an ArialBold font for bold, etc.\n. Hi, please try the `afm_bugs` branch, I think it resolves this issue. (There are a few other related issues, so if any get confirmed I'll merge)\n. Great! Will merge the fix today and cut a 0.13.1 release Monday.\n. Hi @hbrandl,\n\nThanks for the patch. I've added it to my review queue (which is sadly really long). I'm going to need to compare this to what was attempted by @sigmike in #576, and also read up a bit more on #407 before I can give a proper review.\n. @hbrandl:\n\nThanks again for working on this. I think I'll push this branch upstream and then we can continue to revise it from there... I want to attempt extracting this code into a class, since it seems to all operate on the `cells` collection.\n. The fixes I want to make are structural only, so go ahead and get the tests passing again and I'll make my revisions when I merge, it's trivial stuff.\n. Just a heads up... this won't make the 0.13.0 release but if I find time in the next couple weeks to work on this I can certainly ship it out in a 0.13.x maintenance release.\n. Great, Thanks @hbrandl!\n. @hbrandl Thanks for working on this. We won't ship this in the 0.13.1 release that I'm cutting today, but it sounds like this pull request is ready for me to review now, right? If so, I'll try to get it merged before our next release.\n. @hbrandl I opened a new pull request so that we can do revisions together on the same branch (you have commit access). Please see #620. Only pending feedback I need from you at this point is about that test without assertions, but I will also work on some refactorings of this code on that branch.\n. Thanks!\n. Hi @gthiruva,\n\nCan you try running again while passing `:optimize_objects => true` to generate? That reduced the 500+mb file down to 11mb for me.\n. Closing, but please re-open if `:optimize_objects` doesn't work for you.\n. If you want to work on it, go ahead! There's nothing blocking it except my available time right now, and it should be an easy change to make... just search the project for anything references to `ruby18`, `ruby19` etc.\n. No, please don't. There's no real advantage other than aesthetics, and I personally dislike the new syntax. It is difficult to align hash keys cleanly in the new syntax.\n\nI don't have strong feelings about this, as long as we are consistent within each file. But it wouldn't be a good use of time to go back and convert old files, IMO.\n. So in theory our 1.9 code is better at dealing with encodings than the 1.8 code, but in practice there are extra challenges involved in providing that support, and a bit of cargo-culting going on as well. When I see `force_encoding` I usually try to replace them with `encode`, especially for binary strings.\n\nIf it looks like the wrong functions are being used, first check to see what the tests say. If they say nothing, then add a test with what you think is the right behavior, then change the code. If you run into specific problems, let me know and we can take a closer look at it together.\n. I didn't get the same output as you did, but I did get a messed up PDF. :cry:\n\nOur templating support can sometimes have problems with certain kinds of PDFs, and we've been having some difficulty stabilizing it. I am considering removing it from Prawn entirely, moving it into its own gem. Follow up on [that discussion](https://groups.google.com/forum/#!topic/prawn-ruby/S6gXA-i0-do) on the mailing list.\n\nI'm going to leave your ticket open until a decision is made. Sorry I couldn't be more helpful.\n. @nhimbkno1: Unfortunately, we don't have a good  answer to that. See this [mailing list conversation](https://groups.google.com/forum/#!topic/prawn-ruby/S6gXA-i0-do) -- in short we're considering dropping support for templates due to their lack of stability.\n\n@cheba is one of the people who has volunteered to figure out a better path forward, but I'm unsure if he's planning to investigate this particular issue.\n. Closing this ticket temporarily, because no one on core is presently looking into template issues. Pull requests are welcome though, and I've tagged the ticket with \"templates\" to make it easy to find for those volunteers who are trying to fix template problems.\n. @nhimbkno1 You're writing a binary file using `File.write` rather than `File.binwrite` so what's probably happening is that it's trying to treat the PDF output as UTF-8 text, which will cause encoding errors. Try using `File.binwrite` instead.\n. @cheba: There is clearly a rendering issue in that screenshot, when compared to the source template. This means either that Prawn is corrupting the PDF or that the viewer has a bug.\n\nIt's not a matter of just not being happy with how it looks, it's that it breaks the original formatting.\n. @nhimbkno1: Can you give us the link again to the original template before Prawn has rendered anything on it? I just want to make sure we're using the right input file.\n. The first of those rendered fine for me in PDF.js on Firefox 25.0, did not try the others. I can confirm that your post-template version does not run correctly there, though.\n\n@cheba We need to determine whether this is a corrupted PDF or whether its a bug in PDF.js. It doesn't seem to me like the Firefox nightly builds are clean testing environment to figure that out in. I also saw rendering errors using Ubuntu's document viewer, so I think there may be at least some edge case we're hitting here.\n. I've confirmed the same results in Adobe Reader... original PDF looks fine, template PDF looks corrupted in the screenshot @nhimbkno1 posted. \n\n@cheba: Next step would probably be to look at the graphics states and font operations going on in the PDF and see if we're messing them up anywhere. It's been far too long since I've manually inspected a PDF to give much guidance, but that's where I'd start.\n. Can you post the complete trace please? (or at least the parts that run through the Prawn code)\n. Also, please let me know whether there are errors on the following two commits:\n\n1) 8aec8f8b3618651a093fef8c50296850a30c09c6\n2) 6a05a4ea6e22b43bb0773f7e7b1f7936a6a431b6\n\nWe had two recent changes to the image stuff, and knowing whether you experience failures on those commits or not will help me determine if it was one of those recent changes that caused the problem, or whether we need to dig farther back.\n. @nathany: Please try from master again, I reverted a commit.\n. @nathany: Please keep an eye on #570, because we'll probably re-introduce the patch I reverted at some point, and I want to make sure we don't break your code again!\n. For the argument name, lets use text_formatter. Everything else sounds ok. let me know when you are ready for a review.\n. @packetmonkey: I saw a similar issue with Travis (though a slightly different one) earlier today. We may have some order dependence in our tests, or global state that's causing that. We're going to need to be on the lookout for that, and hopefully we'll isolate it sooner or later.\n\nFor now, let's just make `BasicHTML` an empty subclass of `Parser`, in the same namespace (`Text::Formatted`). This will allow us to use the new name without breaking old behavior temporarily, and we can consider getting rid of the old class after RC3. That's when I'm going to start making some API decisions.\n. @cs: I've merged @packetmonkey's version of your pull request because it addresses the concerns I had about your original patch. I've also given you commit access! For our guidelines on contribution, please see: https://groups.google.com/forum/#!topic/prawn-ruby/BKrw67vyEtA\n\nIf you have concerns about the way we tweaked your pull request, please feel free to open up a fresh one with new ideas. Otherwise, sorry for our very long delay in responding, and thanks for contributing to Prawn!\n. Thanks!\n. Can someone try to replicate this one for me? Just run `rake manual` a few times.\n. Nice! Thank you.\n. After running your script for a littlewhile, I did get the \"Result too large!\" error, but I'm using Ruby 2.0.0-p0. I should upgrade that and try again.\n. Could not reproduce after upgrading to the latest ruby-2.0.0. Closing until we see this one in the wild again.\n. You have a typo in your call to `define_grid` (you wrote `:colums` instead of `:columns`. Prawn is capable of catching these errors if you set `Prawn.debug = true`, so you may want to use it in the future.\n. Here's an example of correct usage, hopefully it will help!\n\n``` ruby\nrequire \"prawn\"\n\nPrawn.debug = true\n\nclass PDFCreate\n\n    def doku\n        pdf = Prawn::Document.new\n        pdf.define_grid(:columns => 1, :rows => 5, :gutter => 10)\n\n        pdf.grid(0,0).bounding_box do\n          pdf.text \"test 0\"\n        end\n\n        pdf.grid(2,0).bounding_box do\n          pdf.text \"test 2\"\n        end\n\n        pdf.grid(4,0).bounding_box do\n          pdf.text \"test 4\"\n        end\n\n        pdf.render_file \"doku.pdf\"\n    end\nend\n\ncpdf = PDFCreate.new\ncpdf.doku\n```\n. @hschraep: Prawn should raise a much more sane error there, which is what `Prawn.debug` will do. Maybe we should turn that behavior on by default.\n. This is an intermediate step towards extracting our core PDF functionality into its own gem... it moves `prawn/core/*` into `pdf/*`. \n\nThere are a couple concerns here:\n- Now we need to write `::Hash` anywhere within the PDF namespace when we want to reference the Ruby core object, because `PDF::Reader` defines `PDF::Hash`\n- There are some circular dependencies in the code. While we'd expect the `Prawn` namespace to freely reference this new `PDF` namespace, we'd want to avoid the other direction if possible. In practice, this probably means either moving some more code down into into `PDF` namespace, injecting dependencies, or otherwise clarifying relationships.\n- Some things probably don't belong in the `PDF` namespace, like our formatted text support. Some things in the `Prawn` namespace probably need to be pushed down as well.\n\nDespite these caveats, I'm considering doing a merge of this code ahead of the RC3 release, so that we can get feedback on it. I think splitting Prawn's concerns between \"manipulating the PDF format\" and \"constructing a PDF document\" would be a very beneficial organizing principle for us, even if our current code isn't cleanly representing those dividing lines.\n\nThoughts? //cc @bradediger @Bluejade @yob @jonsgreen @packetmonkey @fidothe @cheba @gettalong \n. Note to self... we may also want to use the namespace PDF::Core instead of PDF::*, and release a gem called `pdf-core`. \n. @packetmonkey Ordinarily I'd agree about standard namespaces, but in this case I feel like we've earned the place. We've maintained the only major pure-Ruby PDF library in active use for six years now, and I am the (admittedly completely inactive) maintainer of its predecessor (PDF::Writer), of which the original author has labeled Prawn its spiritual successor. We also maintain PDF::Inspector and PDF::Reader (which @yob has maintained for as long as we've been doing Prawn)\n\nThe stuff we're going to do in our low-level PDF library will be directly following the standard, so there is less room for interpretation than some other libraries might have. Obviously the code needs improving, but I want others to help with that!\n. @packetmonkey I forgot to mention that based on what you said, I'd definitely prefer `PDF::Core::*` over `PDF::*`. That allows us to live in the standard namespace, but not completely claim it for our own.\n. I just discussed this in #prawn with @packetmonkey and we agreed that while taking over the whole PDF::\\* namespace is a bad idea, it would be okay to move forward with the plan to create a `pdf-core` gem, if nothing else as an experiment that will help us figure out if it's a good idea or not.\n\nIf anyone else has thoughts on this please do share them, otherwise I'll work on merging this before RC3, then do the gem separation before RC4 after we see what the impact on users is like.\n. Still need to move pdf/text/\\* but that gets us close to having everything under PDF::Core\n. Okay, now I've eliminated references to `Prawn` from within `PDF::Core`, which should get us one step closer to extraction. Remaining steps include a comprehensive documentation sweep, and splitting up the unit tests along the same dividing lines.\n\nBut I would like to merge before then, if only to get a bit of feedback in the next two weeks before the RC3 from those riding master.\n\nIf there are no objections, I'll try a merge early next week, maybe on Monday or Tuesday.\n. The \"Files Changed\" view on this pull request is probably useless, but you can get the rough idea of what this did by looking at the [pdf/core folder](https://github.com/prawnpdf/prawn/tree/4168ba5cf3dc1964a183203e51973d6a92ed0848/lib/pdf/core). \n. This has been merged, but my first step if it causes any major problems would be to revert and fix on the branch. Let's keep our fingers crossed!\n. Although we're probably leaning towards dropping template support and extracting it into a gem, I am happy to accept pull requests improving its stability up until the time that we do that.\n\nThis has tests, seems fairly well constrained, and the only thing I would want to clean up before merging is to wrap all lines at 80 characters (which I could do on merge).\n\n@cheba can you verify the fix? You seem to be the one who's spent the most time with our templates code in the last couple weeks, so I'd be happy to hear your thoughts. :grin:\n. @yob @cheba @bradediger: Anyone have a vote on merge or no-merge on this one? I'm going to be breaking out the template support soon, and if we're going to apply this change I want to do it before I start tearing things apart.\n\nIn other words, even if this isn't a perfect solution, is templates better off with it? If so, I'd say merge.\n. I'm going to close this out then, sorry @krishicks. Hopefully this code is at least fixing the problem for your own needs,\nbut it seems like we just don't have the resources to support templates anymore.\n. Hi Thomas,\n\nCan you please give me an example I can run that shows me what this code is meant to do? (Screenshots would be a bonus!)\n. @ciopte7: Just a reminder, I need a code example to demonstrate this change to me before I can review it.\n. Closing this out because I don't have an example to evaluate it with. Anyone is welcome to request further review on this if an example can be provided!\n. Hi. The TTF fonts that ship with Prawn are for testing and use with the manual... they're not meant for regular use.\nDo a web search for \"Free Japanese TTF font\" and I'm sure you'll probably find something.\n\nPS: Please use the [Prawn mailing list](https://groups.google.com/forum/#!forum/prawn-ruby) rather than the issue tracker for support requests in the future. That may also be a good place to ask for sources of free Japanese fonts that work well with Prawn.\n. Although I imagine there might be ways to make Prawn handle this kind of thing better automatically, it's not an area I'm experienced in. Traditionally, long running processes (such as generating a PDF) ought to be done in a work queue (i.e. resque, sidekiq, delayedjob, etc.) outside of your main Rails process. Is there a reason why you're not doing that?\n. @pandar1 Please try implementing your idea and open a pull request. Then we'll try to find someone to verify \nthe approach, and if it looks good, we'll merge it.\n. @pandar1: Just to clarify, the feedback that others have given you here is what I would have expected you to get on your pull request, I just didn't have the specific knowledge to say it nearly as clearly as others have here. So at this point there is no need to submit a patch!\n\nIt sounds like the only reason `sleep` is helping you at all is that it gets around MRI's global locking. That's a side-effect, and not something I want to put into Prawn.\n\nFYI, JRuby 1.7.8+ is officially supported in the 1.0 RCs. Rubinius still has some failures, and we don't have plans to address them in the immediate future. Please try JRuby and see if it helps, and if not, then run your jobs in a background process and things should work OK for you.\n. Hi: That does look like it could be an issue, though it would help to have a code example or test to demonstrate the failure. It was my intention to allow custom font styles, though I'm unsure what has changed since that documentation was written.\n\nCan you provide a failing example demonstrating the problem? Could be a test or just a script.\n. I think what we have here is just a missed requirement: the documentation was written before we had formatted text support in Prawn, and it probably still works when not using formatted text. But the formatted text stuff never picked up support for it, probably as an oversight.\n\nUnfortunately Prawn has a lot of cobwebs, and we're dusting them off gradually, but its going to be some time before we can remember why various things are the way they are. :cry:\n\nGlad to hear there is a workaround, but I'd also be happy to try to fix this once we have a reproducing example. Thanks for the report!\n. @joshtaylor To clarify, are you expecting that something like the following should work?\n\n``` ruby\nformatted_text [{ :text => \"Hi there\", :styles => [:thin] }]\n```\n\nOr did you have something else in mind?\n. I agree, something like that would be desirable but I need to take a closer look at the implementation details to think through what would work best. I think the only reason why we use an array at all is to facilitate things like nested HTML tags one level up from here, and I haven't looked at how we handle order dependency here, if at all.\n. @joshtaylor Thinking about this a bit more, I decided the right thing to do for now is just to update the documentation to be a bit clearer.\n\nThe feature you're looking for is a welcome addition and I'd be happy to consider a pull request for it, but I don't have  time myself to do the legwork on it right now.\n\nThanks for reporting this issue, and if you find time to work on improving the feature, please do send us a patch!\n. @ayghor: I'm guessing that you may have run into issues that made the image render poorly that are related to the fact that your image is in 300dpi but Prawn's measurements are all in 1/72 inch standard PDF points.\n\nThere is a ]really long thread on the mailing list](https://groups.google.com/forum/#!searchin/prawn-ruby/dpi/prawn-ruby/MbMsCx862iY/GmVqf0mEJjIJ) related to this topic, which may be helpful. I'm leaving this ticket open until you have a chance to let me know if that helps.\n\nI don't remember the details of this issue, but I feel like there may be room for Prawn to help with the conversion between its default units and arbitrary DPI when specifying things like image dimensions.\n. Okay, sounds like you were running up against a renderer error then. Thanks for getting back to me on this, I'll go ahead and close the ticket now.\n. @yob That was the vague idea I was hinting at, and was hoping @ayghor would have a suggestion. \n\nAnyway, it's not like we don't have more pressing issues to deal with, but I'd still be interested in proposals.\n. @packetmonkey Cool! There are some additional stats over on #324.\n. I am going to close out this PR for now, because #600 seems to be much more promising. Will re-open if we discover that there are blockers to that patch.\n. All of this is really exciting, hopefully you can get the tests to go green and figure out why we're slow on JRuby, but otherwise I'm very interested in this approach.\n\nFor the MRI memory variation, this may be due to mark-and-sweep GC running \"whenever it gets around to it\". So although there may be leak, seeing memory spikes in Ruby are not uncommon whenever there a bunch of short-lived objects that haven't been GCed yet.\n. @cheba Which JRuby did you run on? I haven't even run my own optimizations there yet, but I'd like to be consistent. Either 1.7.8 or 1.7.9 would be OK. Earlier than that and we run into JRuby bugs affecting Prawn's font stuff.\n. Still, we are seeing less memory usage overall on JRuby 1.7.9 with this patch than without it. I would be OK with requiring JRuby 1.7.9+ since it's a bug fix release anyway.\n\nPlease work on figuring out the spec failures, and revising test coverage where necessary. This seems more promising than my branch at the moment.\n. I think you're still seeing GC related memory fluctuations: we do care about peak utilization but it may be hard to get a clear sense of how much of this is actual memory used vs. garbage not being collected. \n\nAnyway, I feel like this definitely is an improvement over what we have now, so revise the tests as needed and let's see if we can try to get this merged before 0.14.0 next month.\n. I merged it! In doing so, I squashed everything down into a single commit to make reverting easier if we experience problems.\n\nTwo points:\n1. In the future please use feature branches on prawnpdf rather than your fork, it makes upstream management a little bit easier and allows all Prawn committers to make revisions to the same pull request.\n2. I am considering releasing this code as part of a 0.13.1 maintenance release, because it only touches internal features. Any concerns there?\n. Yes, we want to be able to have all contributors make commits to each other's feature branches. This makes it so that simple changes can be directly applied, speeding up feedback loops. I think it's still safe to rewrite history as needed as long as you only affect the commits on your branch and not master or stable. Also, we can always rebase before we merge, as I did with this branch.\n\nI'm going to merge this into stable now, and it will be included in the 0.13.1 release, whenever that happens. Thanks! \n. @yob: If you have time off and want to help Prawn, this is the issue that I could most use your assistance with. I would like to get templates separated out as much as possible, so that we can turn them into their own gem later. \n\nA fine starting point  would be a lib/prawn/templates.rb that reopens whatever classes are necessary. Better would be to define whatever extension points are necessary to avoid the need to reopen classes.\n. Anyone want to work on this one? If not I'll need to give it a shot some time between the 0.14.0 and 0.15.0 releases.\n. Done!\n. Hi, thanks for the detailed bug report and tests. It looks like you're running into this issue when you use one of the built-in fonts. Have you checked if this error happens when you explicitly use a TTF font for the default font as well as the fallback?\n\nI'll verify that myself when I get around to looking at this issue, but I thought I'd mention it as it might be a workaround.\n. I've been away from the project for a long time so my research lead time is very slow. If you want to put some effort into investigating the issue, please do! Even getting a little bit farther with it will help me resolve it faster once I get around to looking at it.\n. Hi, your test does not fail on master for me right now, so I'm not sure how to investigate further. Can you double check your code to be sure it's failing on current master?\n. Closing but will re-open once you confirm the failure.\n. Thanks, trying the code from your fork did the trick for me, maybe I just messed something up before.\n\nI have not merged the test yet because I want to revise it a little bit, but the bug is confirmed! Feel free to keep researching a fix, otherwise anyone else is welcome to work on this one if I don't get to it first.\n. This is probably not its own distinct bug, but a result of #729 and #779. The (unfortunate) reality at present is that if you want to mix AFM (PDF built-in) fonts and TTF fonts in the same Prawn document, you can expect bugs and bad behaviors.\n\nThe solution is to use TTF throughout your document whenever you need internationalization support. This is going to most likely continue to be the recommendation even after we clarify behaviors, but in the future you'll get better warnings / errors to detect this sort of problem.\n. I've confirmed that not even #793 seems to fix this issue, so reopening.\n. @cheba, just to clarify, the files you added to the Gemfile would only be installed on RBX, right?\n. Merged, thanks!\n. Looks good. Merged, thank you! This will go out in 0.13.1\n. Hi, can you take a look at #268 and confirm whether this ticket is describing the same issue?\n. Okay, closing this one to keep discussion in one place. This is a confirmed bug, and anyone is welcome to research a fix for it.\n. This pull request isn't new code, it's the old code that has worked for us for every Prawn release except the 1.0RCs, where the AFM gem was added. So the only thing I'm doing here is reverting to known-good code rather than patching broken code.\n\nPrawn traditionally had the policy of not using any external dependencies, because we wanted to avoid upstream problems from affecting our ability to serve our users. This is an example of why (although probably a small one).\n\nIf we were to contribute to AFM, I'd need to figure out what's wrong with it, submit a pull request, hope they will release a fix soon, and if they don't, things will remain broken in Prawn until they do.\n\nIf we revert this code, I can cut a 0.13.1 release as soon as I'm ready, as early as today.\n\nThat said, we should definitely contribute a bug report upstream at the minimum, and maybe even a patch. But because I only have five hours a week to work on all Prawn-related tasks, I probably won't be the one to do that.\n. I think that I'd prefer providing AFM parsing as part of PDF::Core when we extract it. This way, PDF::Reader can still reuse the same code as Prawn, as could others who are working on PDF stuff.\n\nI would prefer not to rely on external dependencies that we can't cut gems for ourselves. But I think I'd be more receptive to the idea if you submit a pull request to AFM, see it get accepted, and see a gem cut shortly afterwards. \n\nSo if you want to try that, go for it.  But keep in mind we have many more serious problems to solve with Prawn than which AFM parser we use.\n. @cheba: Another thing to consider is that right now Prawn's test suite isn't very good. If it was, we would have caught these issues by way of failing tests rather than bug reports several months later.\n\nThe best way to change my mind on using external dependencies would be to improve our test coverage to the point where when something breaks due to upstream code, we know about it.\n. Also worth noting: Not one of @yob's accepted pull requests have been released in the gem yet -- the last gem release was in 2010.\n. @yob: None of your changes upstream in AFM have ever been released in gem form. I fully understand Prawn's implementation of the AFM parser as it stands and it hasn't caused us a large maintenance burden over the years. It's also unlikely to change much over the years, and it will be extracted into PDF::Core eventually.\n\nAs I said, I feel there are so many more important issues with Prawn that I'd rather focus on something we can agree is useful rather than something I'm not that interested in.\n\nThat said, if you can ask the maintainer of AFM for commit bit and ability to release gems on RubyGems, I'd be fine switching back to it if we can fix the bugs.\n. I merged this change. If we want to revisit the conversation about the AFM gem, we can do so once a new release is cut that fixes #499 and #578, but I'm still not sold on the possible value to be gained from that.\n. Sounds right to me! Feel free to write a patch for this.\n. Sorry... I may have spoke too soon.\n\nThe initial state of a document is to have a single page created, and to skip page creation you need to pass `:skip_page_creation` on construction. It appears that page count is reporting the correct numbers in this case:\n\n``` ruby\n>> Prawn::Document.new.page_count\n=> 1\n>> Prawn::Document.new(:skip_page_creation => true).page_count\n=> 0\n```\n\nPlease let me know if I've misunderstood your request, but it doesn't sound like a bug after all.\n. It's one of those things where purity collides with practicality: I would like to start from an empty state, but for most people, most of the time it would mean writing the same exact `start_new_page` line as the very first line of their program. Needing to do some work before you create a page is the less common case, so we didn't make it the default.\n. Hi @justbuchanan,\n\nCan you give the code on #512 a try? You'll need to pass `reflow_margins: true` to the column box to get the behavior you're looking for.\n\nIf it works as you'd expect, I can merge it into master and ship this in the 0.14.0 release on January 15.\n. Also, if #512 isn't what you are looking for, feel free to open a different pull request. I don't think we can assume that a column box ought to start at the top of the margin box, but I'd be fine with adding an option to allow that behavior, and maybe down the line enabling it by default.\n. I closed it because it didn't have a clear code example, and then never heard back from its author. But it's re-opened now, so I'll go ahead and resolve the merge conflicts and get this into master. It introduces a new behavior, so I won't be able to put it in the 0.13.1 release that is coming out on Monday, but it will make it into 0.14.0 in a few weeks!\n. @justbuchanan There was a minor problem in that code, in that it used relative coordinates rather than absolute coordinates, which probably only works in documents with a zero margin. Can you try my slightly modified version on master and see if it works as expected?\n. We got lucky with this one, because all I needed to do was fix a few characters of code. Thanks @phurley for implementing it, and @justbuchanan for providing a code sample to help me overcome my own laziness. :grinning: \n. Nice! I'll ship this into 0.13.1. Just for context, what the fuck is up with the old JRuby numbers?\n. Right now transactions seem to only be safe within a single page... if you cross a page boundary the internal state can get corrupted. This is definitely not what we intended, but it's a known issue at the moment. Can you look at #268 and confirm that it's related to your issue?\n. Closing as a possible duplicate of #268. \n\n@justbuchanan: Please keep an eye on that ticket, and leave a comment here to re-open this issue if whatever we do to fix #268 does not also fix this problem, or if you discover that the two issues are unrelated.\n. Ok. This is probably our most significant issue to look at currently, because it has far-reaching effects. Unfortunately I don't think I'll have time to research it before January, but I will definitely look into it if others haven't made progress by then. A minimal reproducing test case, additional investigations, or a fix are all welcome!\n. @bradediger Can you confirm whether or not adding a subtable should expand the with of the enclosing column? What @hbrandl said sounds right, but I'm unsure of what the original intent was.\n. Closing this ticket as stale, but I'll keep the unresolved issue in the test suite. To get this ticket reopened, all anyone needs to do is move the research a little bit further along. Even some additional notes about the problem will do!\n. Reopening temporarily as part of an effort to get more of Prawn's unresolved issues looked at!\n. I am closing all issues for Prawn::Table, because it is being extracted into its own gem with its own repository (https://github.com/prawnpdf/prawn-table).\n\nAs I close tickets, I'm marking them with a \"table\" tag, so that @hbrandl can easily find them and optionally move them over to the prawn-table issue tracker. Anything that has the table tag can be assumed to have been unresolved at the time I closed it.\n. This is not even close to being ready to merge yet, because I did the extraction by literally just dumping lib/pdf/\\* into a gem and updating the requires. However, it is a nice proof of concept, because the tests are passing and the manual is building. We will need to move the PDF::Core specific tests over into that gem, and also add things like licensing info, improvement gemspec info, etc before we can merge this into master.\n. @nathansamson: We have a few reasons, but the most important of which is probably that we want to start offering a stable API in Prawn, but we don't feel the internals are quite ready to stabilize. We could just mark them as part of our private API, but I think that would discourage us from properly solving the problem.\n\nPrawn really is a document authoring system and a PDF format writer glued together in one project. Those two things are vastly different from one another in scope: some of Prawn's features are very high level, others are extremely low level (like performing our own garbage collection routine on PDF objects). This is like having a web server and a web framework implemented in the same project, and it complicates things organizationally.\n\nBecause these gems will change at different times for different reasons, the release coordination isn't that difficult -- it has worked out OK for us with TTFunk and pdf-inspector at least.\n\nThere's some additional discussion on the topic here:\nhttps://groups.google.com/forum/#!topic/prawn-ruby/PwxhCiJgfcI\n. I'm planning to delay this one until after 0.14.0, but hopefully will work on getting it merged as soon as possible after that to give it some time to live on master before we get close to the 0.15.0 release.\n. I moved any test that was easy to move into the PDF::Core repository, and enabled Travis CI for that repo. You can find PDF::Core at: https://github.com/prawnpdf/pdf-core\n\nThere are still a lot of cases where Prawn is reaching into PDF::Core where it shouldn't, and a good portion of PDF::Core's test coverage still comes indirectly via Prawn, which is something we will want to fix in the future.\n\nThere are still some things I need to do to PDF::Core to make it \"release ready\", but I have cut a couple 0.0.x gems that seem to be working OK. Any objections to me merging to master soon as long as I promise to cut a better release of PDF::Core before our next major Prawn release?\n\nUntil I do that, I'm basically needing to maintain a forked codebase, and so I'd rather not keep doing that. I also want to make sure that the PDF::Core gem is used a little bit in master before 0.15.0, because it's a big change.\n. We will begin officially supporting Prawn 2.1.0 starting in Prawn 0.15.0. I'll be running it in development and we're already tracking on CI -- the build will now fail if there is a 2.1.0-related failure.\n. Thanks, but it's not a syntax error, it's using range syntax:\n\n``` ruby\n>> def x; rand(1...10); end\n=> :x\n>> def y; rand(10..20); end\n=> :y\n>> x..y\n=> 3..18\n```\n. I too would like to see performance numbers from real world apps with our latest code. If we are still seeing problems this option would be OK to add, but we may not need it now.\n. Closing this out, but may re-open after hearing back from @MarkDBlackwell about the latest release.\n. Go ahead and write a patch then @MarkDBlackwell. We don't track feature requests here, but even a partially implemented pull request would move this further along.\n. @nathansamson The bad news is prawn-fast-png is broken on 0.13, and probably unmaintained at this point. The good news is that @packetmonkey just built prawn-gmagick, which has similar performance and is a bit easier to get up and running with. (It _only_ works on 0.13+ though)\n. @MarkDBlackwell I should have waited to respond to your comment until I talked to other folks who are interested in this problem. Now that I've discussed it a bit with @cheba and @packetmonkey over IRC, what I'm thinking is that it would be nice for you to have a way to detect and reject alpha channel PNGs, but that it's probably an application concern, as @nathansamson suggests -- I just have no way of guessing how common a use case this is for Prawn's users.\n\nSo the compromise I'm thinking of is this:\n- Amend `Prawn::Document#image` to accept an image object.\n- Use `Prawn::Image::PNG#alpha_channel?` to detect alpha channels.\n\nThe result will end up looking like this:\n\n``` ruby\n  png = Prawn::Image::PNG.new(blob)\n  raise if png.alpha_channel?\n  doc.image(png)\n```\n\nThe reason I like this solution is that it's not adding a special case flag, but instead giving a more general API that can be used for other things as well. So if someone does want to work on a patch for this, I think that's what I'd prefer to see. Unfortunately I won't be working on this myself any time soon, but I'd be happy to review an incoming pull request.\n. @nathansamson: Yes, it worked on one (or maybe even both of the RCs) but there was a lot of code that piled up before the 0.13 release. Because `prawn-gmagick` is using our new (experimental) extension API rather than a monkey patch, it's going to be a more stable solution moving forward. I'd say that `prawn-fast-png` could be updated to use it as well, but a release hasn't been cut in forever for that gem. :frowning: \n. This is fine, we want to switch to using requre_relative throughout the project now that 1.8 is no longer a concern. Will merge next time I'm working on stuff.\n. Thanks again Shane, this has been merged into stable and will go out in a 0.13.2 release next Monday.\n\nYou've also been given commit access to Prawn! Please see [this mailing list post](https://groups.google.com/forum/#!searchin/prawn-ruby/contributors/prawn-ruby/BKrw67vyEtA/Wsik4nXnQiMJ) for contribution guidelines.\n. There were other files that were generating warnings too. Took care of those in https://github.com/prawnpdf/prawn/commit/3f36909f91964151ff7405728e0662cc2e7feff7.\n. Go ahead and remove the RDoc task. This looks fine.\n. @cheba: I cleaned up the leftover RDoc stuff in 7b91580d5140954, please add further revisions if I missed anything\n. @hbrandl Note I've rebased your branch here into a single commit, but it's the same code.\n. @hbrandl Sorry for the crazy rebasing and force-pushing. Check the files changed view now:\nhttps://github.com/prawnpdf/prawn/pull/620/files\n\nI basically only made two changes:\n- Added explicit comments (rather than expect to_not_raise) about CannotFitError\n- Extracted the column width calculations into their own class\n\nThe code in ColumnWidthCalculator is almost identical to what your original patch had, and it would benefit from being refactored further later. I'm also not necessarily committed to the names of anything in there. But I think it's a good idea for us to extract classes whenever a feature can mostly be handled in isolation, just to keep the existing classes from growing infinitely. We can contemplate proper design later.\n\nLet me know if it's looking good to :shipit: now.\n. Talked to @hbrandl over IRC. I'm merging this now, but anyone is welcome to open up another pull request to clean it up further.\n. Hi, it is very likely that this is a JRuby bug. Please try JRuby 1.7.9 and leave a comment if you still experience an error -- as far as I know it should be 100% backwards compatible w. 1.7.5.\n. Also, if you can reproduce on JRuby 1.7.9, please provide a minimal example that I can run that illustrates the error.\n. Thanks for checking that out. Looks like we'll need to take a closer look at this issue. We're seeing a similar issue in #603 but that's reproducing on MRI, and is using `:shrink_to_fit` rather than the default `:truncate` option. In any case both problems seem related to textbox overflow behavior.\n. Sorry but I was unable to reproduce on JRuby 1.7.9 using Prawn 0.14.0. If we can find someone else to reproduce there I'd be happy to re-open.\n\n(NOTE: Edited the example slightly to not use white text on a white background!)\n. Hi @eherz1:\n\nI'm looking into some other issues with JRuby, and seeing to what extent they're related to each other. Can you let me know what OS you're using?\n. Thanks!\n. I added LICENSE to that as well, because it's also one of our licenses.\n. Good call, just renamed to RUBY on master. It's not 100% accurate because license of Ruby has changed over time, but close enough.\n. No, that'd be more confusing. Our license literally is Matz's terms for Ruby, along with the GPLv2 and GPLv3. The only difference is that current Ruby _also_ adds in MIT license, and we do not. \n. I am OK with this change if we can get signoff from all contributors, but we won't be able to make it simply if no one objects... we need an affirmative answer from everyone. So if you agree with the change AND have code in Prawn (i.e. your name is listed above), please :+1: this issue.\n\nEveryone else, please don't make things more noisy by expressing support if you're not a contributor. But anyone is welcome to discuss reasons _against_ the change.\n. @cbartlett None of this will apply retroactively -- it'll start with whatever release we make the change in. \n\nI actually care about keeping our code GPL compatible moving forward, and as long as I am involved in the project we'll avoid dependencies that would make Prawn unusable in GPLed code. For everyone who is interested in closed-source use, Matz's terms are roughly equivalent  (in terms of what they actually allow you to do) to MIT license, so it's not going to affect that either. The only significant change will be an easier to understand licensing scheme for Prawn.\n\nI agree that we may not be able to get everyone to respond, it was the first thing I said to @cheba. But we're trying to adopt the approach of experimentation over prediction with Prawn, and so I'd be hypocritical to not let @cheba give this a try. :grin:\n. @sockmonk: The issue is that we don't use the GPL on its own (if we did, I think it would prevent many commercial uses of Prawn in practice), we use a now-outdated equivalent to the License of Ruby. It is a tri-license between Matz's terms for Ruby (which are liberal, similar to BSD/MIT in practice), and the GPLv2, and GPLv3 (the two versions of the GPL are incompatible with each other, so we can't just pick one or the other without consequence). \nTo make matters more complicated, we can no longer call this the \"License of Ruby\", because since Ruby 1.9.3, Ruby uses Matz's terms + BSD two-clause license.\n\nOur existing license should cause no practical problems for anyone, because it guarantees that a) Prawn is GPL compatible, and b) Prawn does not use any GPLed dependencies, making it safe for proprietary use, too. But it's very confusing! In changing to the MIT license, we will not need to explain any of the above, and people will be able to easily understand our license. I will make sure as long as I'm involved in the project that we neither force copy-left by including GPLed dependencies nor prevent it by including GPL-incompatible dependencies, and that will functionally keep all the rights to the end user the same that they've been for the last five years, but with a much less confusing license for Prawn itself.\n\nThe above just reflects my own understanding of the problem, and I'm neither a lawyer nor a licensing expert. But hopefully it helps explain the reason for the change.\n. @cheba: Enough time has passed where maybe you can reach out to those who haven't responded yet by email or twitter and see if we can get them to take a look at this. I'll be much more comfortable making this change before 1.0 (Mid-march) than after. \n. @kennethkalmer It probably would be a good idea for @cheba to double check, but I believe he compiled the list based on who has code in Prawn currently, rather than anyone who has ever contributed a patch. Since the license change will only apply to future versions, those are the people we need to contact.\n. @mbklein: Yes it is, because we may be getting close to the point where doing so would be feasible. However, we definitely need to track down @Bluejade and @jonsgreen, because they're Prawn core members!\n. The list is currently out of date. We're going to need to do a second pass at it before making this change. But we still need responses from @Bluejade and @jonsgreen and that hasn't happened yet. :frowning: \n. @mbklein: He built the entire formatted text system. I think he may have renamed his Github account, but we've tried to email him and haven't heard back yet.\n. I just realized that the way we created this list is somewhat flawed, because @cheba used git blame to generate it. But for example, if I moved the entire contents of a file or made a trivial whitespace change like removing a level of indentation, we'd lose all authorship information. For that reason, it's likely that the contributor list is smaller than it should be.\n\nUnfortunately, I think the best thing to do right now is to close out the issue until someone revises the list and verifies its accuracy. Anyone is welcome to do that, and once someone does I'll re-open.\n. @mbklein: Thanks. I think we'd just need to go back and look at commits from the people on the Github contributors reports and see what if any of their code is still in Prawn (this can be accomplished by finding their original commits). \n\nI will reopen and do this myself if someone else doesn't get to it first, though it's not a high priority for me until after 1.0 at least.\n. Thanks for the kind words!\n. Thanks!\n. Committed with minor typo fixes along with a change from `and` to `&&` in https://github.com/prawnpdf/prawn/commit/88c69325f63ceb80634eebe94f1190d2ef6fd739. Thanks!\n\nIn the future, please use a feature branch on the prawnpdf repository rather than your own fork, It makes collaboration between other committers easier.\n. It's only a minor detail, so no worries. Thanks a lot for your continued efforts on fixing up the table code!\n. @packetmonkey Can you update the branch with what you feel would be clearer wording?\n. Merged. :heart:\n. That sounds right, although I'm not reproducing an error message in Adobe Reader XI on OS X 10.6. Can someone else try to confirm this one? \n\n@iamkobold: It would also be useful to know what version of Adobe Reader and what OS you're using.\n. Anyone with access to a Windows machine, please try to replicate this error in Adobe Reader. I'd like to see a confirmation before I investigate further, and I don't have easy access to Windows (though I can get around to it eventually).\n. @iamkobold All you would need to do is run the code at the top of the issue and then see if Acrobat raises an error when you open the generated PDF (try using the 0.13.2 gem version of Prawn, it's very close to what's on master). If you don't have Ruby on the VM I can generate the PDF for you and you can just try loading it.\n. @iamkobold Sorry... I didn't realize you're the original poster of this issue! I'm looking for independent confirmation. \n\nWe try to make sure all bugs are replicable by two people when we can, to eliminate possible user error and system setup. So although testing in a VM would help a little bit, I still would like to see someone else report the failure.\n. You reported the issue, so I assume you have a copy of the PDF :grin:\n. Closing, but will re-open as soon as someone else either reproduces, or looks into the PDF spec to confirm the output we're generating is invalid.\n. @iamkobold Are you reproducing this in Adobe Reader as well, or only in Acrobat Pro?\n. OK, thanks. I'm still not 100% sure how to solve this one in Prawn because it's kind of undefined behavior. We probably are producing invalid PDFs currently, but there's no reason in principle why we couldn't make `fill_color` work by waiting until the first page was created to apply it. It's just a question of whether we _should_ do that, and I'm undecided so far.\n\nI also would still like to see independent verification, and it seems like @pparidans couldn't reproduce.\n. @bradediger Is this the intended behavior for subtables? If so, I'll merge.\n. Text box behavior is configurable, allowing for `:truncate`, `:shrink_to_fit`, or `:expand`. The default is to truncate, which returns the remaining text.\n\nNone of those behaviors sound appropriate to me for deciding what to do with a subtable that won't fit in the available horizontal space it is given. Instead this seems like maybe it's a cell behavior concern. For example, if we allowed the option to set wrap by character, maybe this problem could be mitigated?\n. Merging this patch, only because I think it's useful to have a spec for how the code currently works even if we plan to change it in the future.\n\nSuggestions for better behavior (along with patches) are welcome!\n. Thanks! I made the copying a little more thorough ( https://github.com/prawnpdf/prawn/commit/255cc7073c3b6892141077be88aaec8e3e5c8a82 ), but they should still do what you want them to.\n\nYou also now have commit access to Prawn! You can read more about our contribution guidelines here:\nhttps://github.com/prawnpdf/prawn/wiki/Contributor-welcome-notes\n\nThanks again for the patch!\n. You're right, it's probably not necessary to reset those if we were just using this for affecting `dup`. But since we also call it directly, I suppose it's better to be explicit and set all attributes. I think this code is a candidate for refactoring in general, but I'm not sure we need to address that issue right now.\n. Hi, I don't know the status of form gems at all, so maybe someone else can help you with that.\n\nBut for those who are still interested in working on the problem, we're happy to discuss adding stable extension points to prevent the need for monkey patching or digging into private Prawn features. It'd be best to have that conversation BEFORE our 1.0 release on April 16, and ideally even before 0.15.0 on March 16, but we'll do our best to help you after those dates, too.\n. @cpanderson: Because this is a support request rather than a bug report or patch, please post it to the [Prawn mailing list](https://groups.google.com/forum/#!forum/prawn-ruby) instead of here in the issue tracker. You're more likely to get an answer there from users who have worked with forms in Prawn before -- the tracker mostly only reaches folks who are hacking on Prawn itself.\n. @dmwilliamstech Thanks for the screenshot.\n\nWhat I'd like to see though is source code and canned data that illustrates the problem. Preparing that would take some extra time for me, and there are plenty of bugs in Prawn's tracker that need investigation. The less time I need to spend on any one of these issues, the faster we can get fixes and workarounds shipped.\n. Thanks! This should give me what I need to investigate, but it might take me a while to get to it.\n. @bradediger I am curious of your thoughts on the problem and the fix here. @hbrandl and I chatted over IRC about it a bit and both agree it's not ideal.\n\nShould we thinking about using BigDecimal here? Or something else entirely? Or just stick with the fuzzy float comparison?\n. @bradediger OK, Should we decide on a precision and create a constant for it? I feel like 10^-9 is more than enough, but we could use something close to machine precision via `Float::EPSILON`. I just always forget the right way to do those calculations :cry: \n. Okay, so it sounds like we just need to add a test for the uncovered case here, and clean up the checks a little bit. I'm unblocked to work on this, but won't get around to it for at least another week. Anyone who wants to take a stab at this sooner than that is welcome to do so.\n. I can't really think of how to construct the test case the possible rounding error in the natural column widths code, so I think we'll need to build one in response to a regression rather than proactively.\nThat said, if someone has an idea of how to pin this behavior down, please submit a pull request with an updated spec.\n\nI made some minor tweaks, and I'm going to go ahead and squash+merge this now. \n. Closing this pull request, will reopen another for the object_store extractions, now that the squashed patch for the first phase is already in master.\n. I submitted an issue with 1.0 roadmap notes to every tracker listed above, along with a few others. Done!\n. I got the same in Adobe Reader XI on OS X. I think this is probably corruption due to issues with transactions in the group example (a known bug). I will probably remove the example temporarily to prevent the manual for erroring, or at least disable its output.\n. I've disabled the group example for now, and added a note that the feature is broken. A new manual has been uploaded!\n. @hbrandl: have you seen #632? I haven't looked closely, but does it cover the same issue?\n. Thanks @hbrandl and @jlduran for looking into this. I'm unsure when I'll be able to investigate further myself, but I can definitely review pull requests for a fix if/when someone has the time to prepare one.\n. @jlduran I'm going to close this ticket since it doesn't directly describe a bug, it's more like \"undefined behavior\" at this point. If @hbrandl gets more time to continue his investigations, or if you pick up where he left off, we can open a fresh ticket with a more narrowly defined scope in the hopes of figuring out the right behavior here.\n. Sorry, it's not that templates are \"experimental\", it's that they're unstable, unsupported, not understood by the current maintainers, and scheduled to be removed from Prawn entirely. The warning is there for a reason, and if you want to hide it then you'll need either a) run off of your own fork, b) quiet the warning by temporarily redirecting STDERR, or c) use an earlier release of Prawn.\n\nIn other words, if you want to use Prawn in a way that we don't feel like we can support, it's up to you to work around it.\n. To clarify, the \"experimental testing\" is just to see if the _templates extraction_ works, and to make sure that it didn't break the rest of Prawn. We dropped support for the _templates feature_ in 0.13.0, and the gem we do release for them will be 100% unsupported unless a maintainer steps up.\n. Right, the variable is what you can use to change the value, then you can use STDERR to reset `$stderr` after.\n. Thanks for the detailed report. I was able to reproduce the problem.\n\nI have a long backlog of work to do right now so I'm not sure when I'll investigate this further, but feel free to look into it and update this issue with whatever you find out, or submit a pull request!\n\n(anyone else is also welcome to look into this one)\n. @malteschmitz: It looks like this is a bounding box bug rather than something table-specific. The only reason why we don't see the problem when position is not specified is because in that case a bounding box is not created. \n\nI'm working on adding a failing test now to illustrate the problem.\n. Just as a bit of trivia, this six year old comment more or less describes the problem:\n\n```\n# FIXME: This may have a bug where the old margin is restored\n# when the bounding box exits.\n```\n\nSo this may be one of the oldest bugs in Prawn!\n. Merging because I doubt this is controversial, but those who see issues with it are welcome to point them out later and we can consider revising what I've done here.\n. Merged a squashed patch in https://github.com/prawnpdf/prawn/commit/ed19c81cace59e1ea8fad3a2f42549f61ab6ef98\n. Enable `Prawn.debug` and you'll get this behavior. Just put something like `Prawn.debug = true` after you require Prawn.\n. It's not comprehensive, so there are areas where we probably need to add checks. But it covers a lot of the common cases. If you find anything missing please submit a pull request to fix them.\n. Done!\n. Apparently it's not possible to re-open a merged pull request, or at least I can't find a way to do that.\n\nBut comments are still welcome!\n. Doing so opens up a new pull request :frowning: \n. Templates have been disabled in Prawn 0.14.0  and support was dropped in 0.13.0.\n\nPlease make sure to read [release notes](https://github.com/prawnpdf/prawn/wiki/CHANGELOG) whenever you upgrade Prawn!\n. If you're not adding content to the pages but only interleaving them with Prawn-generated PDFs, you can use [pdftk](http://www.pdflabs.com/tools/pdftk-server//). \n\nWe'd love to support this kind of thing in Prawn but our implementation is very buggy and has some fundamental design flaws that would make it hard to stabilize. Our plan is to dump the existing templates code into a prawn-templates gem, and hopefully someone will come along and rewrite/maintain it in the future.\n\nA more general note about gem version locking: after 1.0 it'll be safe to lock with something like \"~> 1.0\", but for now you should always lock to a minor version, i.e. \"~> 0.13.0\" or \"~> 0.14.0\", etc. This will ensure you get bug fixes, but no breaking changes. \n. Done!\n. Done!\n. Hello,\n\nPrawn is distributed via RubyGems, and has only very simple dependencies that do not require special setup. Once you have Ruby 1.9.3 (or later) installed, you simply need to run `gem install prawn` to install the Prawn gem.\n\nYou can then use Prawn in your Ruby scripts by adding `require \"prawn\"` to the top of the file. Hope this helps!\n\nPS: The Prawn issue tracker is for reporting bugs. For support requests, please use our mailing list instead in the future. https://groups.google.com/forum/#!forum/prawn-ruby\n. Please provide a link to the PDF as well as the code you used to generate it. Right now your screenshot is also not working, so try uploading and linking it again. I'll reopen the ticket once you've added those things.\n. Thanks, but there's nothing we can do to help you debug this without both the source code you used to generate the PDF that created this error, and the PDF itself.\n\nPlease let me know when you've added those things.\n. Thanks! Can you add a test to document how this should work?\n. I'm not super familiar with the Text::Box code, but I think it'd be sufficient to assert that the `at` position starts at the right place. Here's what the default behavior looks like:\n\n``` ruby\ndescribe \"Text::Box default at\" do\n  it \"should be the left corner of the bounds, and the current document.y\" do\n    create_pdf\n    target_at = [@pdf.bounds.left, @pdf.y]\n    @text = \"Oh hai text rect. \" * 100\n    @options = { :document => @pdf }\n    text_box = Prawn::Text::Box.new(@text, @options)\n    text_box.render\n    text_box.at.should == target_at\n  end\nend\n```\n\nSo you'd construct similar cases for `:bottom` and `:center`, replacing `target_at` with where the top of the box ought to be. I think that would be a sufficient test. The rest of the text-box specs may also be helpful:\nhttps://github.com/prawnpdf/prawn/blob/master/spec/text_box_spec.rb\n\nI could definitely look further into this (and even write the test myself) if that doesn't give you enough to go on, but it's probably going to be a couple weeks before I can do that. :frowning: \n. Sorry, but this fix does not seem to resolve the bug, using the example shown in #169. I am going to briefly look into an alternative fix and will re-open #169, but we will probably need to make some revisions before this is resolved.\n. Additional commentary and examples have been added to #169. I'd like to get some clarification on desired behavior before we go further on this.\n. Support for templates has been discontinued as of 0.13.0, and the feature is disabled by default in 0.14.0. Please make sure to read release notes each time you upgrade Prawn!\n\nhttps://github.com/prawnpdf/prawn/wiki/CHANGELOG\n. Hi, I think we're seeing a few bugs related to encodings in JRuby, so this may help. I'll take a closer look at it in a few days. Thanks!\n. If you don't mind testing something unrelated and have Adobe Reader XI handy, you could try simply opening the PDF generated by the code in the description of this ticket and see if you get an error: https://github.com/prawnpdf/prawn/issues/631\n\nWe've been unable to reproduce on OS X.\n. No, I doubt #631 has anything to do with this issue. We were just lacking windows testers :grin:\n. I'm going to go ahead and merge this, but I don't have a way to reproduce it myself. If it causes any problems I'll need to revert first and ask questions later.\n. @pparidans: Because your pull request was accepted, you now have commit access to all of prawnpdf's repositories. Please see the link below for contribution guidelines, and thanks again! \n\nhttps://github.com/prawnpdf/prawn/wiki/Contributor-welcome-notes\n. The concept is interesting to me, for sure.\n\nHere are my concerns:\n- I don't want to mix yet another module into Prawn::Document. I think we can define this method in lib/prawn/document.rb which I'm not happy with either, but it'll at least make it clear exactly how much the class is expanding by.\n- I want to see many more examples (I.e. half a dozen or more) to see whether this API will support a wide variety of use cases, and what value it gives us for each of them.\n- I haven't decided whether passing options directly to the component with no opportunity to process them in draw() is the right thing to do, but I think we can discuss that once we see some more examples.\n- Please use parentheses in method definitions when working on Prawn.\n. @packetmonkey:\n\nThese are great use cases. The thing I'm probably missing is what tangible benefit the proposed API has over ordinary object creation.\n\nI.e. what is the tangible gain of the former example over the latter in the code below?\n\n``` ruby\n# Your proposal\n@document.draw(Component, options)\n\n# An alternative that does not require changing Prawn\nComponent.new(options).draw_on(@document) \n```\n\nNote: I'm not saying there aren't benefits to be had here if we develop the idea a little more, just saying we need to figure out what they are.\n. I agree with all the points you mentioned as good design goals, but I feel like (1) is solvable by ordinary object composition, (3) is no longer relevant, and (4) is still hypothetical.\n\nBecause (2) is not a strong enough reason on its own to go with _this particular implementation_, I'd be interested in exploring (4) more. In other words, I want to consider what we could do to make this more than syntactic sugar, so that users have an incentive to model things this way.\n. Thanks @packetmonkey. I'm still mulling this over. Since whatever we do come up with here will probably start out as an experimental API or extension API rather than a stable API, we're not constrained by the stable API freeze coming up in a few days. I think I'll focus on getting the 0.15.0  release out first, then we can continue the conversation from there.\n. The idea of making components sandboxed is definitely what we want, and `preserve_state` is a good proof of concept for the intended behavior, but it's not going to be a sane way of solving the problem due to Prawn's messy design.\n\nHere are just a few pieces of mutable state you missed:\n- Grids: https://github.com/prawnpdf/prawn/blob/master/lib/prawn/layout/grid.rb\n- CapStyle: https://github.com/prawnpdf/prawn/blob/master/lib/prawn/graphics/cap_style.rb\n- JoinStyle: https://github.com/prawnpdf/prawn/blob/master/lib/prawn/graphics/join_style.rb\n- Dash: https://github.com/prawnpdf/prawn/blob/master/lib/prawn/graphics/dash.rb\n- Stroke Color: https://github.com/prawnpdf/prawn/blob/master/lib/prawn/graphics/color.rb\n\nI feel like hunting down all these different bits of state and manually setting them is going to be like playing a game of whack-a-mole: without a centralized control point it will be easy for this method to get out of sync, and corrupt the state of documents.\n\nSo I think the next step involves either a separate pull request that figures out how to unify our state mutations safely, or the creation of a proxy object that whitelists document features to avoid the ones that have global effects, and then create some sort of style object to simplify passing the necessary parameters.\n. We are not giving up on this idea, but we're going to work on it from a different angle. Talked to @packetmonkey in #prawn and our basic plan is to first create a unified drawing API for all of Prawn's current components (text box, table, table cell, image, and maybe a Drawing object for vector graphics), and then figure out how to put a nice harness on top of that which will establish a formal component drawing API for Document.\n. Thanks for the patch. I will take a quick look at this before the 0.15.0 release and give some feedback when I do.\n. The way I understand this is that you want to clear `@boxes` when a grid is redefined, to avoid references to the old grid object.\n\nIf that's the case, why are we clearing the `@boxes` variable each time a grid's data is accessed, rather than each time it gets redefined?\n. Ok, so what this patch needs before it is merged is:\n- move the `@boxes` assignment up into `define_grid`\n- Make sure the tests still pass\n- Add documentation indicating that calling define_grid multiple times will create a completely new grid object, affecting all `grid` calls that follow it. In other words, grids do not nest like bounding boxes.\n. @traels: If you want to work on updating the patch that may help get it merged sooner, otherwise I'll work on this when I get a chance.\n. All of the above you can do directly on this pull request, yeah. Just add some additional commits.\n. I see, you already moved the box clearing code. Yep, all we need is a manual and/or API doc update now!\n. I'll go ahead and try this patch out today and document it if it's working as I'd expect.  I'll be cutting the 0.15.0 release this afternoon and I'd like to include this patch if possible.\n. Merged, thank you!\n. @traels: Because your pull request was accepted, you now have commit access to all of prawnpdf's repositories. Please see the link below for contribution guidelines, and thanks again! \n\nhttps://github.com/prawnpdf/prawn/wiki/Contributor-welcome-notes\n. Sorry, but [support for templates was dropped in mid-December 2013](https://github.com/prawnpdf/prawn/wiki/CHANGELOG#wiki-prawn-0130--20131215) because the feature is not stable and we don't have people available to maintain it. It has been removed from Prawn's master branch, and is disabled in the latest stable release (0.14.0).\n\nYou will need to find another tool to handle merging Prawn output with existing PDFs. For some use cases, [pdftk](http://www.pdflabs.com/tools/pdftk-server/) may work.\n. @nathan-munchery: You won't get any updates to Prawn, and you won't get any fixes to the template feature.\n\nSo if it's working perfectly for you, and you're not going to be using new templates that could potentially break things, then there's nothing wrong with staying on 0.12.0. You can also try the unsupported prawn-templates gem for Prawn 0.15.0+. It will occasionally get new releases if pull requests are submitted to it, but it's last on our priority list unless someone else steps up to maintain it.\n\nBut really, the implementation is such that it's simply not safe to use in the general sense. If you're not seeing corruption issues, it's because the templates you're using combined with your Prawn-related code do not happen to cause problems, but there's no guarantee that future combinations (either new templates or new uses of Prawn) will not break your code in very unexpected ways. This is true for Prawn 0.12.0 and true for any later release, unless prawn-templates gets rewritten.\n\nBefore we disabled the feature, we did an open call for someone to help maintain it. There are dozens of issues with it and not one was fixed.\n\nSorry, but it's a problem that we don't have the resources to solve now, even if the demand for the feature is high. PDF is a complex problem domain.\n. @nathan-munchery: I totally get that you'd just like to generate some PDFs and be done with it. Unfortunately, generating a PDF is not as simple as generating some HTML or CSS, it's more like implementing a browser's DOM. \n\nIn other words, generating PDF is an extremely low-level affair, and the (very terse) specification is over 1300 pages long. If you're not already knee-deep in doing low-level PDF work, this isn't going to be something you're going to be able to help with unless you have a spare hundred hours of free time.\n\nThere are no open tickets in the repository because the feature was dropped in December, and we've done three major releases since then. However, there are many closed tickets that are unresolved:\n\nhttps://github.com/prawnpdf/prawn/issues?direction=desc&labels=templates&page=1&sort=updated&state=closed\n\nIf you would like to attempt fixing them, go ahead and submit pull requests to:\nhttps://github.com/prawnpdf/prawn-templates\n\nYou can also ask for help in understanding anything PDF related on the Prawn mailing list:\nhttps://groups.google.com/forum/#!forum/prawn-ruby\n\nThere is a thread specifically about templates that may be worth reading:\nhttps://groups.google.com/forum/#!searchin/prawn-ruby/templates/prawn-ruby/S6gXA-i0-do/fe98QFnhXw0J\n\nSince the open call, we've had probably half a dozen people attempt to look into solving the issues but so far no progress has been made. Good luck though!\n. @bvogel: If you want to attempt something that doesn't require much understanding of PDF (just a bit of studying Prawn's internals), it would be very useful to figure out what pieces of Prawn / PDF::Core the templates code needs to interact with, so that we can define officially supported extension points.\n\nRight now prawn-templates is a monkey patch, and so it's going to be difficult to prevent it from breaking when we make internal changes to Prawn. This is something I can help with if someone does the initial research on.\n. @nathan-munchery: Are you volunteering to add test cases? To augment the [20+ issues we do have](https://github.com/prawnpdf/prawn/issues?labels=templates&page=1&state=closed) with meaningful research? To look at our current implementation and figure out what its flaws are?\n\nThose would be constructive and useful things to do. Further complaints without any actual contributions from you will be ignored, because we have hundreds of features to maintain and can only afford to help the people who sincerely want to help us.\n. I'm having trouble following this example because it has a lot of moving parts to it. Can you try to reduce it down to as simple of an example as you possibly can make while still reproducing the problem, and then include an imjur link to a screenshot of what you're seeing?\n\nClosing as \"revisions needed\", but I'll re-open once you've done that.\n. (note: anyone else is welcome to provide a simplified example, too)\n. I agree that this is a problem that deserves to be solved. Further research or pull requests by others is welcome, because right now my backlog is fairly long and mostly full of boring but important stabilization work.\n. Another note: I added an \"issue acknowledged\" tag to this ticket. Although we don't track most feature requests in our issue tracker, I think it makes sense to add tickets for things like this that clearly represent a limitation of Prawn that isn't easy to overcome without some rework and design consideration.\n. I am closing all issues for Prawn::Table, because it is being extracted into its own gem with its own repository (https://github.com/prawnpdf/prawn-table).\n\nAs I close tickets, I'm marking them with a \"table\" tag, so that @hbrandl can easily find them and optionally move them over to the prawn-table issue tracker. Anything that has the table tag can be assumed to have been unresolved at the time I closed it.\n. This example does not have sample data I can run it with, so I cannot investigate further. Please supply an example I can run that illustrates the problem.\n. Prawn could do a better job verifying its arguments, but it's a tricky problem to do consistently across the API. Glad you got your issue resolved, though!\n. @tilsammans Thanks, though I think this is something I'd run by myself at least at first.\n\nI'll take a look at Goodbits some time soon, otherwise I'm sure Mailchimp would work.\n. Thanks!\n. @JEG2: I added just a few test cases here that cover bugs related to the root issue #268. We can take a closer look at this when we meet tomorrow, but at least we now have failing tests to work with!\n. (note that to run these, you need to do something like `rspec -t issue:268`, we omit unresolved issues from the full suite run by default.\n. On closer investigation, it's going to be really challenging to make transactions work in a generally safe way. Rather than creating false hope, I'd like to focus on killing that feature off, and implementing an alternative to `Document#group` that does not depend on transactions to work.\n. @tadast: Yeah, it's a very common need. The new implementation will probably either take a list of components, or put a proxy object in front of document that generates components under the hood for all of our groupable constructs (i.e. tables, text, images, etc). Then it will use dry run height calculations to determine whether the content can fit in an area or not.\n\nI have a feeling that I may end up being a little picky about the interface for all of this, but a proof of concept is welcome!\n. @ollym: Prawn does not currently have any funding, so there is no timeline. As far as problem go, this is a reasonably high priority but the list of high priority issues is very long. So it's most likely going to be fixed by way of a contribution rather than by the maintainers if it is fixed in the near future. A patch is certainly welcome!\n\nThere is some discussion about possible workarounds here:\nhttps://groups.google.com/forum/#!topic/prawn-ruby/Y2PyUKOOmGg\n\nAnother option is to not upgrade. Prawn 0.15.0 is reasonably stable and if you're not getting bit by other bugs you can probably still use it indefinitely.\n\nTo clarify, you would possibly run into corruption issues if you crossed a page boundary in your rendering even if you _always_ rollback. These will reveal themselves in weird ways, like colorspace errors in certain PDF viewers, or various other subtle issues that result from producing invalid documents. So it's not just that group was broken, but that transaction was broken at its core. I'd love to see it fixed but it's a hard problem to solve and there's not a lot of time available to run the whole project.\n. @bradediger: I don't think this is a problem that will be solvable before 1.0 or even shortly after, so I think we should kill the feature. I have some ideas in mind for how we can support grouping that I want to experiment with, and if I get lucky maybe we can bring that feature back before 1.0.\n\nOne specific question before I merge: Is `:optimize_objects` only useful for cleaning up after transactions, or does it have other uses as well? If the latter, can you recommend how to rewrite the optimize objects tests to not rely on transactions?\n. @bradediger Thanks! I'll update the PR to drop that too.\n. @bradediger Any idea why we have tests for `:optimize_objects` in soft mask / outline?\nAre these just regression tests?\n\n``` ruby\nit \"should not have objects that are not used for extended graphic state\" do\n    @pdf = Prawn::Document.new(:margin => 0, :optimize_objects => true)\n\n    make_soft_mask do\n      @pdf.fill_color '808080'\n      @pdf.fill_rectangle [100, 100], 200, 200\n    end\n\n    make_soft_mask do\n      @pdf.fill_color '808080'\n      @pdf.fill_rectangle [100, 100], 200, 200\n    end\n\n    reader = PDF::Reader.new(StringIO.open(@pdf.render))\n\n    groups = reader.objects.select { |obj|\n      o = obj[1]\n      o.is_a?(Hash) && o[:Type] == :Group\n    }\n    groups.length.should == 1\n\n    forms = reader.objects.select { |obj|\n      o = obj[1]\n      o.is_a?(PDF::Reader::Stream) && o.hash[:Type] == :XObject && o.hash[:Subtype] == :Form\n    }\n    forms.length.should == 1\n\n    masks = reader.objects.select { |obj|\n      o = obj[1]\n      o.is_a?(Hash) && o[:Type] == :Mask\n    }\n    masks.length.should == 1\n\n    ext_g_states = reader.objects.select { |obj|\n      o = obj[1]\n      o.is_a?(Hash) && o[:Type] == :ExtGState\n    }\n    ext_g_states.length.should == 1\n  end\n```\n\nand \n\n``` ruby\ndescribe \"with optimize_objects option\" do\n  before(:each) do\n    @pdf = Prawn::Document.new(:optimize_objects => true) do\n      outline.define do\n        section 'Chapter 1', :destination => 1, :closed => true do\n          page :destination => 1, :title => 'Page 1'\n        end\n      end\n    end\n    render_and_find_objects\n  end\n\n  it \"should generate an outline\" do\n    @section_1.should_not be_nil\n    @page_1.should_not be_nil\n  end\nend\n```\n. @cheba: Is this something we actually need to implement a mark-and-sweep GC for, or something that can be done another way? \n\nAlso, if we do not optimize objects, what is the consequence here? Just a larger PDF? \n\nSorry I'm not at all familiar w. this area of the code.\n. Ok. Then I think I'm going to go ahead and merge this. Someone who wants to work on optimizing soft masks is welcome to do so if this lost us anything!\n. Done!\n. The difficulty I can see in doing that is making sure that you actually restore the insane amount of state Prawn::Document relies on under the hood (many of the mixed in modules introduce state).\n\nStill, I'd be interested in seeing a pull request with your solution, even if it's only for discussion purposes.\n. Thanks @ddengler! I will keep this ticket open for a while to encourage us to come up with a more robust solution, but your gem should be a great workaround for the time being.\n. @malteschmitz: If you could try this branch out and see if it solves your problem, that'd be very helpful!\n\nOtherwise, I'll probably merge this next time I sit down to work on Prawn, because it does seem to fix the issue we discovered in #679 from what I can tell.\n\nIt's worth mentioning that our implementation of margins is batshit crazy, and that it seems like our whole bounding box system would be vastly simplified if we put together some simple stack of bounding box objects. Not sure if we'll get to that by 1.0, but I'm just throwing the idea out there for those watching our pull requests.\n. This is too hard to do comprehensively before 1.0, but I've at least done a very quick inspection of the areas I expected to find hot spots, and made a couple fixes.\n. @tlynam: It looks like @packetmonkey's comment was written long before we moved the code for manual generation into its own gem, but this is the method he was referring to:\n\nhttps://github.com/prawnpdf/prawn-manual_builder/blob/master/lib/prawn/manual_builder/example.rb#L227\n\nI think adding the `begin/rescue` block with an `exit 1` might work there... although we need to think a little bit about whether that's the behavior we actually want, because it means a single exception in the manual on one page would prevent the whole manual from being generated.\n\nBut in any case, we could probably add a configurable option which gets set by the tests like `Prawn::ManualBuilder..exit_on_exception = true`, or something along those lines.\n\nAlthough I'm offically \"retired\" from Prawn, feel free to follow up from me if you need help with this, and I can perhaps get you set up with a starting point.\n. We cannot diagnose any error you see in Prawn without a code sample that shows how to reproduce the problem and (ideally) all necessary data to run the code. Please update your ticket with a code sample and I'll reopen when you do.\n. Thanks @Siyfion, I've re-opened for investigation.\n. I will need to look at this more closely, but your problem may be because you never set up a font family with bold mapped to a file that implements the bold typeface. If that is the case, it's not a bug.\n\nPlease take a look at how font families work in the manual, and see if that helps.\nhttp://prawnpdf.org/manual.pdf\n\nI am leaving this open until I hear back from you or have a chance to look more closely at it myself.\n. Generally speaking there is a separate font file for each style (Bold, normal, italic) and the \"Font Family\" specifies the group of fonts to use for each style. Fonts can contain multiple different styles, but to do that they need to be wrapped up in something like a dfont suitcase.\n\nBrowsers implement things like faux bold, but Prawn does not. If you want a bold typeface, you need to point it at a TTF file with bold glyphs.\n. Yes, check out this documentation:\nhttp://prawnpdf.org/api-docs/Prawn/Document.html#font_families-instance_method\n\nCreate a family called \"Lato\", and point the styles at the relevant files. Then replace your font call with `font(\"Lato\")` and I think things will work for you. Let me know how it goes.\n. Glad I could help! If there is documentation that could have been improved to have you avoid this problem or clearer error messages that could be introduced, please submit a pull request!\n. I spent a little bit of time on this, and I don't see an obvious fix at the surface level. I originally suspected that maybe the anchors were not being wrapped in a `PDF::Core::LiteralString` which would prevent them from being encrypted, but that's not the case, it's done here:\n\nhttps://github.com/prawnpdf/pdf-core/blob/master/lib/pdf/core/annotations.rb#L52\n\n(worth noting is that we should probably do other times of sanitization down here as well, but that's a separate issue)\n\nI haven't yet read the spec to see how we're supposed to handle encrypted anchors, so that's the next step. If someone wants to look into that and update this ticket with some research, it'll help move it along. Or if @bradediger, @jonsgreen, or @cheba have thoughts, I'd like to hear them!\n\nI'm fairly certain that this isn't a regression, it may have never actually worked right. Does anyone know a known-good version of Prawn where this feature ever worked w. encryption?\n. I'm going to close this out, not because it's invalid, but because the anchor feature itself is really poorly supported in Prawn... it relies on digging deep into our internals, and I think we should fix that before we consider the feature to be officially supported.\n\nA pull request to fix the encryption issues is still welcome, and I will leave a note to re-open this ticket once we have a solution to #684 (adding a high level interface).\n. Sorry, the ticket I meant to link to is #689.\n. This is a work-in-progress and needs tests / documentation if I'm going to merge it.\n\nBut the basic idea is that right now annotations / destinations live in PDF::Core, and so they're officially no longer part of Prawn's API. Those modules are extremely low level, and we should consider finding a way to implement to rethink think them, and probably implement them as standalone objects rather than mixins into Prawn::Document. For those reasons, I want to discourage their use by giving a higher level API.\n\nThis is the first small step in that direction. It gives a way to create an anchor to a page, which would be useful for things like building table-of-contents. It could potentially be extended to support giving a link to specific location, but I haven't thought through the interface to that.\n\nAnyone have thoughts on this feature?\n\nIf I don't merge it by 1.0, I will probably undocument the existing anchor mechanism, which is only partially documented as it is. But we can safely merge this as an \"experimental API\" and change its interface in 1.1, 1.2. etc. if no one has reservations.\n. I think I'll proceed with this work, and mark it as an experimental feature in 1.0. Feedback is still welcome before or after I merge!\n. Sorry to flip flop but I changed my mind: I've decided to cancel this feature for now and instead undocument the anchor functionality in Prawn until we have a proper higher level wrapper around destinations. This is something I'd absolutely like to support, so I'll open a ticket for it. Patches are welcome if I don't get to it first!\n. See also #684.\n. This is not something I really have a good solution for without lots of semi-arbitrary hacking around in YARD. We're going to need to revisit the whole concept of how we document stable/experimental/extension APIs, possibly even adding folders to Prawn like lib/prawn/extensions/\\* and lib/prawn/experimental/*. But I think this should be a post-1.0 problem to solve. :frowning: \n. @mogest: Thanks! We added the extra check because simply looking for `read` was causing `Pathname` objects to be treated as `IO` objects accidentally. The documentation looks correct, thanks for submitting it!\n. @mogest: Because your pull request was accepted, you now have commit access to all of prawnpdf's repositories. Please see the link below for contribution guidelines, and thanks again! \n\nhttps://github.com/prawnpdf/prawn/wiki/Contributor-welcome-notes\n. We don't support earlier versions of TTFunk, so please encourage package maintainers to update the dependencies.\n\nTTFunk does not change frequently so this should not be a major inconvience.\n. @strzibny: I cut the releases for both Prawn and TTFunk, so in the end the responsibility falls on me to decide what I can support. TTFunk is entirely an internal dependency, and it's effectively untested and undocumented outside of Prawn. We will be conservative about our gem constraints until that changes.\n\nPrawn has no third party runtime dependencies at all, every dependency we have is something I'm responsible for cutting releases for. I am not interested in supporting downstream repackaging of Prawn, which is the only place this can cause problems for people. Outside of that use case I don't see how our versioning numbering for our internal dependencies can mean anything to anyone.\n\nBecause I'm not interested in a theoretical discussion on this topic, please give examples of concrete problems you're having as a result of our maintenance policies if you'd like to continue the conversation.\n. To clarify about this particular change (incase anyone was wondering), even though a code change was not required in Prawn, updating TTFunk enabled support for font types that weren't supported before (ones with glyphs in the Unicode astral plane). We want all users of newer versions of Prawn to have this functionality, so that's why we upgraded the dependency.\n\nFor the forseeable future, TTFunk will only ever be updated in Prawn's gemspec if it's to add a new feature to Prawn, or to fix a bug that's visible in Prawn. We wouldn't force a version update for things like internal refactorings or third-party improvements that aren't used by Prawn (though so far the latter don't exist, and until the project is less of a mess I don't expect they will)\n. @voxik: It sounds like Fedora is packaging Prawn and its dependencies without even reading our release notes. [Go read them, please](https://github.com/prawnpdf/prawn/wiki/CHANGELOG).\n\nI am interested only in making life easy for Prawn users. I will not require people to manually update their gem locks on TTFunk, which is part of Prawn's internals, to support imaginary third party use cases that don't exist. I won't pretend as if TTFunk is a well-supported, well-maintained library because it is not -- it's just a bit of internal code that we've separated out to make our own release management processes easier.\n\nIf there are things that Prawn can do better for downstream package maintainers that do not conflict with our own maintenance goals, I'm usually happy to reconsider how we do things. But in this case you're asking us to do something that would inconvenience and mislead our users, just because Fedora is doing a poor job of doing their research about the projects they package.\n\nAs I said before, we are not interested in providing active support for repackaging of Prawn outside of our officially supported channels: RubyGems and Github. If you are unhappy with our policies on this, please remove Prawn from Fedora.\n. Prawn 1.0 final will be released nine days from now. We're not going to cut any more RCs between now and then, but hopefully that will solve the problem.\n. Note that #683 is still a valid issue currently, I've only closed it because until we have a legitimate high level interface to support, it's a bug in the internals rather than in something that is officially part of Prawn's external API. A patch is still welcome, and I will reopen #683 when we find a solution for this ticket.\n. Should also consider adding a higher level interface for making external links to, particularly for use w. images\n. Bumping this just because I've ran into the problem myself several times.\n. @mojavelinux:\n\nHere's how I implemented cross-references in a small project I'm currently working on:\n\n``` ruby\nadd_dest \"LinkedSection\", dest_xyz(bounds.absolute_left, y)\n\n# somewhere else in the document\ntext  '<link anchor=\"LinkedSection\">Click me!</link>', :inline_format => true\n```\n\nSo... we have the raw tools in place, they're just awkward to use. I'll give some thought into how to wrap them nicely, but proposals are welcome.\n. So I think this is probably safer than what we did before, but my main concern is that I simply have no way of answering whether the snapshot is sufficient, or whether shallow copying would be good enough.\n\nThat said, I don't think I'm going to find time before 1.0 to create my dry-run based solution. Could you possibly release this as a prawn-grouping gem extension temporarily? You'd only need to wrap the method in a module, and then mix it in using Document.extensions << PrawnGrouping to enable the functionality.\n\nThis would serve as a stop-gap measure temporarily, and if it proves to be well used and stable we could consider bringing it back into Prawn in the future.\n. Also note that it looks like this code is failing some of group's tests on JRuby. Sometimes this is intermittent, but it'd be worth seeing if you can reproduce.\n. @ddengler Great! Please let me know if you need any help along the way, and also comment on this issue with a link to your gem. I will include a mention of it in the next release notes so others can try it out.\n\nIf it were just this one issue to worry I'd probably have merged this straight into Prawn, but our overall stability isn't great at this point, so starting out as a gem seems like the right way to go.\n. @ddengler: As for the command-pattern style ups and downs, it's going to take a lot to get Prawn in a state where that'd work, or at least it'd take some cleverness of design that I can't think of myself. It's a strongly desirable feature and something we've tried implementing before, but we need to get the internals to stop fighting us first.\n. @boutil  I fixed some minor issues with this code, but I think it still does what you're looking for. Please confirm, and if so I'll merge.\n. Wow, this went totally unnoticed and was accidental, sorry about that!\n\nOut of curiosity, what error were you getting? I was seeing some issues when helping a friend clone Prawn on his windows machine, but at the time I had suspected it was an issue with his git install.\n. I do want to support Windows as best as we can, but I don't have a Windows machine easily accessible myself, and I'm not sure I'd have time to regularly test there even if I did. What I can do though is merge any pull requests that come in. :grinning: \n. This seems like it may be a related issue to #603, captured at a lower level. I'll make a minor tweak and merge.\n. @johnnyshields I added a couple tags to prevent our CI from breaking, but otherwise kept your test as-is.\n\nBecause you've successfully had a pull request accepted to Prawn, you've now been given commit access to all our repositories! Please see the contribution guidelines here: https://github.com/prawnpdf/prawn/wiki/Contributor-welcome-notes\n\nThanks!\n. @nathancolgate: I was able to reproduce this bug, and it looks like it's been around for a while.\n\nIt may be some time before I get to investigate this myself, so anyone is welcome to research further and put together a pull request. If someone else puts a fix together we can probably get it released reasonably quickly.\n. @nathancolgate: If you get a chance, please try the code on #758 and see if it fixes your problem.\n. Thanks @hbrandl, I merged a squashed version of this. In the future please make sure to pull in the latest changes from master before creating a branch... I had to do that and resolve merge conflicts before merging.\n. @jalagrange In addition to what @bvogel has said, you should be sure to check out the CHANGELOG for Prawn each time you attempt to upgrade to newer versions: https://github.com/prawnpdf/prawn/wiki/CHANGELOG\n\nThere are fundamental flaws in templates that can cause document corruption and undefined behavior. Until those are fixed (which requires reimplementing the feature), I don't recommend using them.\n. I don't think our RTL text support is content aware, so it probably just renders the string in reverse order. This is almost certainly not what people want, so what I'd like is a bunch of test-cases that reflect how we want this feature to work, ideally ones that reflect how RTL text works elsewhere.\n. Another thing I would like is a good online resource that describes how RTL text should work. Does anyone have a reference they can share?\n. Thanks @hectorvs-gxg! I don't know when I'll have time to look at this myself, but it does look like it will be helpful, and anyone interested in investing further is welcome do so.\n\nWe do have a policy of not relying on third-party dependencies, but looking at another library for inspiration (or to vendor a bit of code) is welcome!\n. @hectorvs-gx I :heart: proof-of-concept work. Even if it's a hack that won't get merged, please open a pull request when you get something working so we can discuss.\n. @hectorvs-gxg: Thanks for working on this. I'm not super familiar with our RTL text support, so I wouldn't be able to comment further without doing some research, but hopefully someone who does know a bit about this area of Prawn will comment. \n\nIf not, this at least gives me a starting point for whenever I get around to reviewing this ticket.\n. @elad: My extremely limited understanding of the existing behavior is that we reverse the strings to support pure RTL text without any pre-processing. So removing reversal would break that case, or force users to install `ruby-bidi`.\n\nPlease correct me if I'm wrong, this is an area of Prawn that was worked on while I wasn't involved in the project.\n. @elad: That's all fair. What I meant by \"pure RTL text\" is that we don't consider any edge cases at all, which probably does mean we've got a broken implementation.\n\nSo I think this is all the more reason for us to figure out how to extract RTL support into a prawn-bidi extension that marries Prawn and RubyBIDI. We'd replace the existing functionality in Prawn with low level extension points, and then tell those who need support to use the gem.\n\nIf I lay the groundwork for that gem, can you help maintain it? (In particular, be able to answer questions about how it should work, because I don't have any experience here).\n. @elad: I'm not worried about API compatibility right now, we're going to probably have three major releases in the next 12 months, so these changes change happen in any one of those.\n. @elad, yeah we can close this. For now the solution is \"use `ruby-bidi`\", and hopefully in the future a better solution will be \"use `prawn-bidi`\".\n\nI'm not going to re-open a ticket for the latter just yet, because realistically I don't know when I'm going to find time to work on it. (especially because we have a workable alternative for the moment). But feel free to remind me if a long time passes and you haven't seen progress on this.\n. @elad Yes, though the manual tracks released versions of Prawn, and your change to the manual is currently in master. It'll get included when the next release comes out, which will hopefully happen in the next few weeks.\n. Thank you! There are probably a few other places where we've missed PDF::Core stuff in the docs, so please do submit more documentation patches if you find problems elsewhere.\n. It seems like you're mixing an old version of Prawn with a very old version of Prawn. The prawn-layout gem has not been used since 0.8.4, and the 1.0.0 RC2 gem is completely unsupported at this point.\n\nPlease upgrade to Prawn 1.0.0, and delete prawn-layout from your system. It sounds like you would have had to vendor it to run into this problem in the first place, which we don't recommend.\n\nSince your problem is almost certainly a configuration issue and not a bug, please use the [mailing list](https://groups.google.com/forum/#!forum/prawn-ruby) rather than the bug tracker for support requests.\n. Yep, thats fine.\n. I'm not sure if this is actually a safe patch or not... some places we intentionally use ASCII-8BIT as the source encoding because we do NOT want string literals to be interpreted as UTF-8, particularly when dealing with binary data.\n\nIt's been a very long time since I've looked at this, though. Please verify and revert if necessary.\n. We may have gotten rid of direct string comparisons to binary data, and if so this is probably OK.\n. I think we're in good shape then. We may have been cargo culting a bit in the past, or dealing with problems that no longer exist.\n. @nathansamson We still support Ruby 1.9.3 as well as JRuby in 1.9 mode, so we cannot simply assume Ruby 2.0+. But since we test those in CI, if there aren't problems there we should be OK.\n. @nathansamson You're looking at the cases where the encoding was omitted, and for those I think you're absolutely right. \n\nI was concerned about the ones where we explicitly specified `ASCII-8BIT` that were changed to `UTF-8`... there are a handful in this patch. But both @packetmonkey and I have taken a look at those too, and I think we're OK.\n. @cheba Source encoding affects only literal strings (not file/stream operations), and we do no literal string comparisons in those files.\n\nI'd be OK with putting the default source encodings on our binary processing files back to ASCII-8BIT though, if only because we almost certainly will NOT need UTF-8 literals in those files.\n. > ASCII-8BIT is by no means backwards compatible with UTF-8. \"\\xFF\" is a valid string in ASCII-8BIT but is not in UTF-8.\n\nRight... this is the sort of thing we ran into in the past that forced us to set the source encodings explicitly (and what worried me about this patch)\n. @packetmonkey There's no need to make this consistent, because doing so would be artificial. Binary data is not text, so it should not be treated as UTF-8! \n\nConsistency is useful, but clarity is more important. Please go ahead and add another commit to put the ASCII-8BIT encodings back in, as I think that minimizes the risk of problems down the line while still preserving the other work you did.\n. @cheba I'm fairly sure that's incorrect. This is a big source of confusion for people, but here's an example to run as evidence (run it in a file called x.rb):\n\n```\n# coding: ASCII-8BIT\np File.read(\"x.rb\").encoding #=> UTF-8\np __ENCODING__  #=> ASCII-8BIT\n```\n. :+1: go ahead!\n. This seems reasonable. A patch is welcome!\n. thanks!\n. Thanks for the test!\n\nBefore we merge this I'd like to see the `.idea` entry removed from `.gitignore`, because that seems related to your local configuration.\n\nWe also need to add the `:unresolved` and `:issue` tags to the test, to prevent it from breaking CI. Here's an example of what that looks like: https://github.com/prawnpdf/prawn/blob/e35c762765688d1400e09ebfa24ac020de554c4e/spec/table_spec.rb#L67\n. @donv I know it should not be added to the repository, but I feel it'd be a better solution for people who use editors that pollute repositories to set up a [global gitignore](https://help.github.com/articles/ignoring-files#create-a-global-gitignore) rather than asking every project they contribute to to add it to their project-specific gitignore file.\n\nBut because it's relatively harmless for us to just add this line, I'll go ahead and merge as-is.\n. @donv Because your pull request was accepted, you've been given commit access as a contributor to Prawn! Please [see contribution guidelines here](https://github.com/prawnpdf/prawn/wiki/Contributor-welcome-notes), and thanks for your help!\n. @hbrandl ping\n. Thanks @hbrandl. \n\n@skandragon Can you try the code on the `issue_710` branch and see if it fixes your problem?\n. Not reproducing. Will re-open if someone else has issues.\n. You may want to try it again though, we're hosted on Github pages and occasionally they have downtime.\n. I'm open to this behavior change. I would like to figure out why `start_new_page` and `go_to_page` have different behaviors when it comes to setting the bounding box. \n\nRight now it seems like they _should_ be equivalent, and if they're not I would want to look into fixing that problem rather than working around it one level up the stack.\n\nYou might be able to trace the two code paths to see what the difference between them is. If we can get a clear answer to that I can merge quickly, otherwise I'll look into this next time I'm working on Prawn.\n. Just a heads up, this won't make the Prawn 1.1 release, but still is open for consideration for a future release. We're log-jammed right now but this has not been forgotten.\n. The test included on this pull request is not currently failing without the suggested fix, and I'm unable to reproduce the problem via a simplified example, either. Here's what I used, and it seems to produce two columns of text spanning two pages without issues on Prawn 1.1.0:\n\n``` ruby\nPrawn::Document.generate(\"x.pdf\") do \n  bounding_box [0, bounds.top], :width => 200 do\n    text \"The rain in spain falls mainly in the fields. \" * 50\n  end\n\n  go_to_page 1\n\n  bounding_box [300, bounds.top], :width => 200 do\n    text \"The rain in spain falls mainly in the plains. \" * 50\n  end\nend\n```\n\n@tim-vandecasteele: Can you verify the problem still exists on your end? I'll reopen if so, but please provide a reproducible example.\n. I'm fairly sure that this is a bad behavior rather than a bug. The \"built-in\" fonts supported by PDF are only going to work for glyphs in the [Windows 1252](http://en.wikipedia.org/wiki/Windows-1252) character set, which is why we recommend against using them for any internationalized text.\n\nIf you call `font(\"some.font_ttf\")` with a font that supports the glyphs you need, everything should work as expected. There should be no need to use fallback fonts at all... they're really only meant to be used for things like CJK character sets where you want one font for your chinese glyphs and one font for your romanized glyphs.\n\nBut even if you DO use fallback fonts, you can probably avoid this problem by just using a TTF font rather than the built-in fonts for your default.\n\nI haven't had a chance to confirm that, but it's my suspicion. There is probably something weird going on with encodings for the default fonts too, which would cause this problem.\n. It probably wasn't clear from my response, but to clarify I definitely would like to fix this issue, whether it's a bug or just a poorly defined behavior. I don't think the solution is to to transcode missing glyphs as you're doing in this pull request, because it should not be necessary. \n\nIf this fixes the problem, I think it does so at the surface level. I want to either figure out where the root cause of the issue happens, or figure out whether this would actually be a safe way to solve this at the surface level.\n. Here's an example of how to avoid this problem. Fallback fonts can be used if you want to use multiple TTF fonts that each contain different glyphs, but if you're just looking for internationalized text any TTF font that supports the characters you need will work fine:\n\n``` ruby\n@pdf = Prawn::Document.new\n\n@pdf.font_families.update(\"dejavu\" => { :normal => \"path/to/DejaVuSans.ttf\" })\n@pdf.font(\"dejavu\")\n\n@pdf.bounding_box([1, 1], :width => 90, :height => 50) do\n  broken_text = \" Sample Text\\nSAMPLE SAMPLE SAMPLEodd\u011blen\u00ed ZM\u011aN\\nSAMPLE\"\n  @pdf.text broken_text, :overflow => :shrink_to_fit\nend\n```\n. > 1) For international char-based docs, it recommend to set font and to not set fallback_font. Doing so avoids this issue.\n\nIt's not necessary to use `fallback_fonts` for internationalized text, you only need it when you want to use multiple different fonts that have different glyphs in each (i.e. Roman glyphs in one font and Chinese glyphs in another). You can use or not use `fallback_fonts`, as long as you make sure that you're NOT using the PDF built-in fonts, and things will work correctly.\n\nOr to really sum it up: Prawn is meant to be internationalization-friendly by default, you just need to provide UTF-8 aware fonts for it to use. `fallback_fonts` is an advanced, special-case feature. I have a ticket open to document this more clearly, because it's a common misunderstanding.\n\n> 2) fallback_font is only intended in cases where you intend to use the PDF built-in fonts as a primary.\n\n `fallback_font` is probably not safe for use in its current form with PDF built-in fonts, and so no, this is not the recommendation. See above for more detail. But if you do use `fallback_fonts`, you're using it because you need internationalization, and if you need internationalization, always use TTF files you provide rather than relying on Built-in fonts. Windows-1252 _might_ work, but it's severely limited.\n\n> 3) regardless of 1 and 2 we should still fix this issue.\n\nAgree! But the fix may not be \"make the failing code sample work as-is\". The fix will be \"define the correct behavior, and make the APIs work consistently based on that definition\". We need to find the root of the problem before figuring out the answer to that.\n. Closing this PR because I don't think it's going to be directly merged, but #729 references it so that we can come back and read the discussion when we get around to properly defining fallback font behavior.\n. @johnnyshields: Defining the behavior implies documenting it at the API doc / manual level, so yeah, it definitely will be.\n. We need to more comprehensively think about what to allow / not allow before a page is created. But I agree that we should at least be consistent, and for things that aren't specifically \"page related\" it may make sense to allow setting them in advance.\n. @donv: Those look like Rubocop related issues. \n\n@packetmonkey: At this stage I would really like to avoid failing the build for Rubocop-related issues we haven't already cleared out of the codebase. Can you investigate? \n. I think so, you can merge it! Please make sure to at least put a placeholder link back to this pull request in the [MasterChangelog](https://github.com/prawnpdf/prawn/wiki/MasterChangelog)\n. :shipit:\n. This sounds like you've possibly got corrupted data. The stack trace alone won't allow us to debug, please find a string that causes the error and I'll re-open.\n. @hbrandl: Please investigate\n. @hbrandl: Please investigate\n. I am closing all issues for Prawn::Table, because it is being extracted into its own gem with its own repository (https://github.com/prawnpdf/prawn-table).\n\nAs I close tickets, I'm marking them with a \"table\" tag, so that @hbrandl can easily find them and optionally move them over to the prawn-table issue tracker. Anything that has the table tag can be assumed to have been unresolved at the time I closed it.\n. I'm hoping to find some time before the weekend to clear the pull request queue and even possibly get a release cut. If that doesn't happen, feel free to merge these changes yourself @hbrandl, just add placeholder notes in the [master changelog](https://github.com/prawnpdf/prawn/wiki/MasterChangelog)\n. @packetmonkey, @dmeranda: Right now I'm looking to reduce the amount of features we're directly supporting in Prawn itself, so I'd much rather see this supported as a third-party extension rather than consider a pull request.\n\nHappy to consider a discussion around what extension points we'd need to add to the API to facilitate that!\n. Tweaked the wording in a slightly different way here: https://github.com/prawnpdf/prawn/commit/6fc829f2a7e1808a6de1ee8991efdfee1c80b29b\n. Thanks!\n. /cc @hbrandl \n. Just a heads up, this won't make the Prawn 1.1 release, but still is open for consideration for a future release. I need @hbrandl to review it though, as he's the defacto maintainer of the table code.\n. @hbrandl: We'd only experience those errors when this particular option was set, right?\n\nIt'd also be nice to come up with something a bit more natural sounding than `no_breaks_words`, though I don't have an idea on the top of my head.\n\n:+1: for documentation before merging.\n. `break_words: true` as a default seems fine, then to get @piccio's behavior: `break_words: false`\n. I'm closing this pull request because the gem extraction of Prawn::Table will happen soon, but when ready, please submit another request to https://github.com/prawnpdf/prawn-table\n\n(or @hbrandl, feel free to move this over yourself)\n. Squashed and merged in 8b4fbd8db1702e5284d8d9d562d765754104d753\n. I had assumed that what we'd do is this:\n- If `src` is a string, check to see if `options[:format]` is set. If so, use it. Otherwise, use the old way of font detection (look at the extension, if present, default to AFM otherwise)\n- If `src` is anything else, assume it's an I/O like thing, and do `options.fetch(:format, :ttf)`\n\nI think this will prevent the breakage, because it is a proper superset of existing behavior. Give it a try and we'll see what happens.\n. I think it's probably OK to merge, but would like to be the one that merges it, because I need to cut a TTFunk release before this can go into master. That will also give me a chance to kick the tires. I'll do that in time for the 1.1 release.\n. @packetmonkey: I'll work on getting this merged and released this week. To help me out, can you add some notes to the [MasterCHANGELOG](https://github.com/prawnpdf/prawn/wiki/MasterChangelog) about this change? Just add a note that it hasn't been merged yet but will be very soon.\n. Great, thanks. I've not come up with time to cut the release yet, and probably won't until at least next week some time, but there's no blockers for including this in the next release. I'll merge as soon as I get ttfunk out.\n. We need a fully executable example to investigate further (i.e. a runnable with sample data that reproduces the problem). Please update the ticket and let me know when you've done that, and I'll reopen.\n. My guess though, is that this is a result of you using `align: :centre`, rather than `align: :center`. \n. I agree! A pull request would be welcome to add a better error message.\n. We definitely don't do anything with orientation currently. \n\nYou can investigate further and consider preparing a patch if you'd like.\n. It looks like this behavior change is desirable, but I'm not comfortable introducing another instance variable here. Maybe pass an optional value into `process_options` instead?\n. There are many test failures on this pull request... please investigate those and let me know when the build is green again.\n. From the looks of it, this will mutate the input data, meaning you can't safely pass the same array to the method twice (i.e. once for a dry run and then again to actually render).\n\nPlease work on a solution that does not mutate the inputs.\n. I see, we do copy the input arguments. This is surprising because `original_text` is actually a copy, not the original text. :frowning: \n\nI'm still not sure how good I feel about this solution, though. It's extremely implicit behavior, and so I'm worried about breakage in future changes to this code. Really we should be having explicitly defined behavior for dry run vs. actual rendering, and not adding various checks for `if flags[:dry_run]` throughout the code. \n\nThis isn't your fault, because it is how the code is designed currently. But I think we should give this more thought before merging.\n. Sorry for the delay in response. I'd say if this patch is working for you, just use your fork until we get something similar merged upstream.\n. I looked into fixing the underlying design issues for the dry run mechanism, but it's really complicated because the entire formatted text system is pretty tangled up.\n\nSo as an alternative I basically applied your same patch in https://github.com/prawnpdf/prawn/commit/dd92069208d462b716a136da4540e48da6bc45be, but moved the code into a helper method just to make it less likely to be lost or broken during future refactorings.\n. @ingk: Because your pull request was accepted, you now have commit access to Prawn. Please see our [contributor guidelines](https://github.com/prawnpdf/prawn/wiki/Contributor-welcome-notes), and happy hacking!\n. Thanks!\n. Sorry, I have no idea where we originally downloaded these from. Perhaps @boutil or @strzibny can tell you what their status are, since they've already vetted Prawn in linux distro packages.\n. @bitops I believe these are the relevant licenses:\nhttp://dejavu-fonts.org/wiki/index.php?title=License\nhttp://metadata.ftp-master.debian.org/changelogs/main/t/ttf-arphic-gkai00mp/stable_copyright\n\nClosing, but will re-open if you have further questions.\n. Not really. Some basic use cases are covered by pdftk, but right now we're lacking a proper alternative.\n. It's a very difficult problem, and we tried to get people to help with it but haven't had any luck. So I don't expect to see any progress with this in the near future. Sorry.\n. @mockdeep: No, it's that prawn-templates doesn't attempt to make sense of the object trees from the different PDFs, it just merges them together, and so the resulting document ends up being corrupted.\nIf you want to try your luck, you can certainly use an older version of Prawn, but it's unsafe code.\n\nSee the discussion of the challenges here:\nhttps://groups.google.com/forum/#!searchin/prawn-ruby/templates/prawn-ruby/S6gXA-i0-do/fe98QFnhXw0J\n\nLocking the thread, but you're welcome to continue discussion on the Prawn mailing list:\nhttps://groups.google.com/forum/#!forum/prawn-ruby\n. Did we ever get this working? If so, :shipit:. \n. Closing, but please re-open if/when you get a chance to work on this.\n. Fixed! Thank you.\n. Thanks. I'm going to need to do some homework and remind myself of how our fallback font system is supposed to work, but this patch has a reproducible error and a test, so I'll certainly try to review it in time for the next release, if not sooner.\n. Thanks for the patch. Because your pull request was accepted, you now have commit access to Prawn. Please see our [contributor guidelines](https://github.com/prawnpdf/prawn/wiki/Contributor-welcome-notes), and happy hacking!\n. Please see the changelog for the latest release of Prawn, particularly this entry: https://github.com/prawnpdf/prawn/wiki/CHANGELOG#table-support-now-disabled-by-default-moving-to-its-own-gem-soon\n\nAlso, please do not update Prawn without reading the CHANGELOG. Things will break that way.\n. Can you provide a code sample that reproduces the problem? (will re-open when you do)\n. Done, thanks for the suggestion.\n. Thanks, I'll merge this soon and if we cut a 1.1.1 release, this will be in it.\n. I merged a slightly modified version of this into stable, and will rebuild and upload the manual now. Thanks for the patch!\n\n(I didn't merge into master, because we're going to extract the table code there within the next couple days)\n. Thanks for the patch. Because your pull request was accepted, you now have commit access to Prawn. Please see our [contributor guidelines](https://github.com/prawnpdf/prawn/wiki/Contributor-welcome-notes), and happy hacking!\n. I'll leave the PR open until we have a semi-stable build of the `prawn-table` gem. See the repo at http://github.com/prawnpdf/prawn-table for progress.\n. @hbrandl I'm going to merge this patch to remove tables from Prawn master. If using the 0.0.x releases of prawn-table seem to work for a few days, we'll get a Prawn 1.2.0 release out and then update prawn-table to depend on 1.2+\n. Call `String#encoding` to be sure the encodings match. Then finally run `String#codepoints` to see if those are identical, too.\n\n``` ruby\n>> \"Foo\".encoding\n=> #<Encoding:UTF-8>\n>> \"Foo\".codepoints\n=> [70, 111, 111]\n```\n\nIf you paste the output here it may help us debug further.\n. @ferdinandsalis: It seems possible that this may be a font issue then. Can you try using another TTF font and see if you get different results (i.e. maybe something like DejaVu Sans)?\n\nhttp://dejavu-fonts.org/wiki/Main_Page\n. @ferdinandsalis Since it sounds like you have a workaround, I'd just go with that for now. Good luck!\n. Thanks for sharing that. It seems like a reasonable solution.\n. @Siyfion: I've reduced your example down and added it to the ticket description above.\n\nI'm taking a closer look now.\n. It looks like the problem is basically this:\n\nShrink to fit will reduce the font size down until all the text can fit in the box. However, it does this in two dimensions, attempting to fill both vertical and horizontal space, and will resort to breaking words if necessary to do that.\n\nSo it's finding a shrunken size that's small enough to fit the text into the box by breaking the word, and for that reason it won't attempt to shrink any further.\n\nThis isn't exactly a bug, because the `shrink_to_fit` option is more for taking paragraphs of flowing text and downsizing them to fit inside a fixed box, rather than working with individual words. But it is a bad behavior, and it may be a sign of something else broken under the hood.\n\nI'm not sure when I'll find time to investigate further, but I'd welcome more research and even a patch to come up with more favorable behavior here, as long as we can avoid breaking backwards compatibility for the normal use case.\n. @Siyfion: The workaround for this problem would be to disable character-level wrapping of words, but I wasn't able to figure out whether we provide an API to do that. It's been a while since I've worked on this area of Prawn, maybe someone else can offer a suggestion.\n. @Siyfion That's my assumption as well. I think we ended up with this behavior as a result of underspecification rather than a problem with that approach, but I'd want to make sure we confirm that if we prepare a patch.\n\nI'd say it's undefined behavior or a side effect at this point, which unfortunately Prawn has a lot of. But one by one we can fix these problems with the help of use cases like this ticket. :grin:\n. #449 looks like it could possibly solve the problem, though it had code quality / maintainability issues that made me worry we'd accidentally break it in a future change. But it may be a good starting point for thinking through how to fix this.\n. @Siyfion Neat, I always like seeing real uses of Prawn!\n\nI'd suggest forking Prawn and trying to merge #449 into your fork to see if it solves the problem. I think that it might work fine for you, I'm only concerned about its internal implementation details.\n. @Siyfion: Of course. That said, our release cycles are slow lately and time-to-fix is at astronomical timescales on bugs unless someone contributes a patch that solves the problem, has tests, and isn't likely to create maintenance headaches and/or weird behaviors. \n\n#449 gets us part of the way there, and if we find out it does work for you, that may help get a revised version of it merged in a future release.\n. Are you not able to use a git reference in your Gemfile? http://stackoverflow.com/a/11558814\n. It's great news that #449 works. I will _eventually_ get around to revising it so that it can be merged. Anyone is welcome to beat me to it.\n. @Siyfion: I decided to merge #449, because any maintainability issues it might have would be limited to this one option. Can you try running Prawn from our master branch and see if it still works as expected?\n. Great! Unless we have major unexpected issues, we'll release this in Prawn 1.2. Thanks for the detailed bug report and for helping with testing.\n. Do you mean outline functionality? (I.e. a tree list of links to various pages in the document?)\n\nIf so, yes we have support for it, see the Outline section of the manual:\nhttp://prawnpdf.org/manual.pdf\n\n(the manual itself uses outlines for navigation, so it hopefully is an example of what you're looking for)\n. Seems reasonable. I'm going to have to think of what level to support this at the API level, but since prawn-table is semi-officially supported as \"part of Prawn\" we can afford to use internal APIs in it in the near term (with the eventual goal of relying only on stable extension points)\n. @straydogstudio: Thanks for this patch. Because your pull request was accepted, you now have commit access to Prawn. Please see our [contributor guidelines](https://github.com/prawnpdf/prawn/wiki/Contributor-welcome-notes), and happy hacking!\n. @MartinMcDermid: Sorry, I didn't notice in my (now deleted) comment that you are requiring \"prawn/table\". Make sure you also require \"prawn\" first, and that should solve the problem.\n. The PDF built-in fonts only support a very limited subset of internationalized characters, because they only support the WinAnsi character set.\n\nFor full UTF-8 support, don't use the \"built-in\" fonts, but instead use any TTF file that has support for the characters you need. (For example, try [DejaVu](https://www.google.com/webhp?sourceid=chrome-instant&ion=1&espv=2&ie=UTF-8#q=deja+vu+ttf))\n. You can also use a TTF version of any of the default fonts (Courier, Times, etc.) and that will get you the symbols you need. It's only when you use the \"built-in\" version that you're limited to the WinAnsi set.\n. I think `save_as` is a more intuitive name, and `render_file` will still work via delegation.\n\nAs for the `DOCUMENT_CLASS` reference, it's unnecessary. You can write the following safely:\n\n``` ruby\ndef document\n  @document ||= MyProxyDoc.new\nend\n```\n\nThat would be the recommended way of using a custom class.\n. There's something we'll need to fix here... if some internal prawn call raises a NoMethodError, it leads to a weird stack trace. Just need to change our `method_missing` call a little.\n. Merged in c3e6d274 with documentation, tests, + manual entry.\n. PDF itself supports a hash-like dictionary structure, and so equivalent PDFs may not have the same binary representation, because the order of keys don't matter.  Furthermore, the entire object structure is not necessarily going to be identical, but could produce a visually and functionally identically PDF. It's just not a format that can easily be checked via binary comparison.\n\nWith that in mind, there isn't a direct way  to get what you'd want from Prawn.\n\nPossible alternatives are to convert PDF to an image representation and do your checksums on those images, or to use a more direct means of comparison, such as PDF::Reader / PDF::Inspector.\n. @andreashappe: No, I'm not sure that's what's happening, it's just a possibility. To clarify, what I'm saying is that we don't take steps to ensure identical binary output on multiple runs of Prawn, and the underlying format doesn't require us to, so the behavior there is totally undefined.\n\nI would not be opposed to making output consistent, but would have no idea where to even start with that, and if it were a complex change it might not be worth it.\n. @andreashappe: No clue, sorry. If anyone might have an idea, perhaps @cheba would. But I doubt this would be a quick or easy change to make.\n. @cheba: If you have the time to look into it, sure. TTFunk is a big mess... it has very few tests of its own. But the only way we're going to improve it is by making changes to it.\n\nEven if you can just spend a little time coming up with an idea for how you would fix it, that would probably help someone else prepare a patch.\n. Please go ahead and add tests. Even if we need to revise this patch before merging, the tests will be helpful.\n. @emrekutlu Thanks for working on this.\n\nIn reviewing your solution, I see that you're deleting the `:valign` option, and basically implementing alignment logic directly in `formatted_text()`. This bypasses the `process_vertical_alignment` method built into `Prawn::Text::Formatted::Box`.\n\nI'm not very familiar with this code, but it seems like we're duplicating logic here. Can you help me understand why?\n. @emrekutlu: Sorry for the long delay in response.\n\nWe can possibly merge this, even if I wish I knew how to simplify it somehow. Before we do that, can you add detailed code comments explaining the calculations this code is doing, and also any of the hacks that are present (e.g. deleting the `:valign` option rather than relying on text box's built in vertical alignment behavior.)\n\nThese notes will help make sure that accidental changes don't break this code, and also will serve as a guide during refactoring towards a simpler solution. I'd write them myself, but I'm not very familiar with our formatted text system these days.\n. @emrekutlu Sorry, that's not really what I meant at all!\n\nPrawn's text system is enormously complicated, with a high defect density. Hacking around its quirks and  design flaws is to be expected until we can rethink its entire design. I just want to make sure we document any modifications we make so that the system can get better over time.\n\nIf you're not able to work on the documentation, I'm sure someone else will get to it eventually, and either come up w. a new patch or use what you've done here. But it'll certainly get merged sooner if you write them, since you were the one to implement this patch.\n. I think the problem you're seeing is that font sizes are in arbitrary points specified by the font designer, so setting `:size => x.mm` isn't going to work as you expected.\n\nI'm not sure if we have a built in mechanism for setting font size precisely, you may need to do some calculations, like this:\n\n``` ruby\npoint_size = (3.mm / (height_of(\"T\") / font_size))\nfont_size(point_size) # note, this includes descender / line gap\n```\n\nFor your other problem, I think you're assuming that y=0 is at the top of the document. In prawn it is at the bottom.\n\nHope that helps! In the future, please use the Prawn support mailing list for questions like this:\nhttps://groups.google.com/forum/#!pendingmsg/prawn-ruby\n. My understanding of this is roughly as follows:\n1. Setting the margin to 2.cm will effectively set the origin to [2cm, 2cm]\n2. Setting the scale factor to 4 means that whenever we express a coordinate, we need to multiply by 4 to get its scaled factor.\n3. Translating both x and y by 2 causes us to add 2 to both x and y coordinates.\n- By (1): [0,0] becomes [2,2]\n- By (2): [2,2] becomes [8,8]\n- By (3): [8,8] becomes [10,10]\n\nSo that explains the behavior you're seeing. To get the behavior you want, the easiest way is to use the higher level matrix transformation methods in Prawn (`translate` and `scale`):\n\n``` ruby\nPrawn::Document.generate(\"x.pdf\", :margin => 2.cm) do\n  stroke_axis(:step_length => 1.cm.to_i)\n\n  translate(2.cm, 2.cm) do\n    scale(4, :origin => bounds.bottom_left) do\n      draw_text \"my text \", at:[0,0]\n    end\n  end\nend\n```\n\nIf you want to see how the origin offset is calculated for the scale factor so that you can use `transformation_matrix` directly, see the source code for `scale`: \n\nhttps://github.com/prawnpdf/prawn/blob/master/lib/prawn/graphics/transformation.rb#L115-L129\n\nGiven that we have explicit support for origin offsets in `scale`, I don't think this is a bug. That said, we'd benefit from more documentation for sure.\n\nAlso, I don't know enough about vector graphics to know whether this is surprising behavior or not. If we can find some convincing documentation on how this is \"supposed to work\" and find that Prawn isn't following that approach, we can think about a behavior change down the line.\n\nHope that helps!\n. Docs can probably use some love, but at least they're no longer hidden as of https://github.com/prawnpdf/prawn/commit/c2ff01b6e9a03a9228de947487ef6c3c37283db7\n. We should definitely think about giving meaningful return values for methods like this, right now we don't.\n\nThough it involves reaching into the internals a little bit, you can get the behavior you want by building text boxes manually:\n\n``` ruby\nrequire \"prawn\"\n\nPrawn::Document.generate('x.pdf') do\n  box = Prawn::Text::Formatted::Box.new([{:text => \"Yeeeeeeeeeeeeeeeeah\"}],\n                                  :overflow => :shrink_to_fit,\n                                  :width => 50, :height => 20, :document => self)\n\n  box.render(:dry_run => true)\n\n  p box.instance_eval { @font_size } # 8.5\n\n  box.render\nend\n```\n\nIt'd be reasonably safe for you to create a helper method that is based on this.\n\nAs for prawn-table, I think it's not going to work quite as you'd hope. You can pass the shrink to fit option, but it's going to be applied cell by cell, so you won't get uniform text size. @hbrandl can confirm.\n. @Siyfion: I agree, this is an issue that deserves fixing in Prawn, my snippet is just a workaround.\n\nSo here's what I'd recommend for a proper patch, and it's a fairly easy one:\n- Make `Document#text_box` and `Document#formatted_text_box` return the box object after rendering.\n- Add a `:dry_run` option to both `text_box` and `formatted_text_box`, which will be passed along to the `Box#render()` method as in the example above.\n- Give `@font_size` an attr_accessor, along with maybe a few other useful attributes that someone may want to inspect.\n\nIf we had this behavior in place, it'd facilitate this kind of interface:\n\n``` ruby\nbox = formatted_text_box(..., :overflow => :shrink_to_fit, :dry_run => true)\np box.font_size\n\n# optionally...\n# box.font_size = some_other_size \n\nbox.render\n```\n. @Siyfion If you want to attempt a patch along the above lines you're welcome to give it a shot. Let me know if you need help!\n. There's no harm in trying. We regularly clean up or even rewrite patches once the initial pull request is submitted, but initial leg work helps reveal any unexpected complications along the way.\n\nIf you don't work on this, someone will eventually. But if you do, don't worry about submitting something that isn't ready to be merged, it's still helpful!\n. @Pablo-Merino: Overall this looks great, and it's a nice feature addition.\n\nI think I will want a more substantial change before merging, though it's not a complicated one:\nRather than using `text` with inline format, I'd prefer to use `formatted_text`, which takes an array of hashes of text fragments.\n\nThe reason I'd prefer to do it this way is it pushes us one level deeper down the stack, bypassing some levels of complexity and making it more likely that this feature won't break if we ever make major changes to the top-level `text` method.\n\n`formatted_text` is documented in the manual so if you want to switch it up to use it, go for it. Otherwise, I'll make the change when I'm ready to test and merge this code.\n. Almost there, but not quite. The idea is to avoid unnecessary use of HTML tags, because then we bypass that subsystem. Calling `text_formatter.format()` is roughly equivalent to calling `text()` directly, because it's going to walk the same code path.\n\nWhat I'm suggesting is something like this:\n\n``` ruby\nformatted_text([{ :text => link_name, :link => link_url }], options) \n```\n\nYou can update the request if you'd like, but it's a trivial change so I don't mind making it when I pull down the code to test it.\n. This looks good now! We should probably add a manual entry for it, though I'm not sure exactly where the right place is for it, so I'll figure that out when I merge.\n\nThanks a lot @Pablo-Merino, I'll get this into master in time for the 1.3.0 release, which will hopefully happen soonish.\n. I just went back and looked at my comment on #689, and realized it's not really related to the feature on this pull request. What I was talking about in #689 is how it's very difficult to link arbitrary content in the document (such as an image) because it requires using a very low-level interface.\n\nSo the higher level interface I had envisioned for that would have been something like the following method, which would generate a clickable region on the document.\n\n``` ruby\nlink \"http://example.com\", :at => [x,y], :width => w, :height => h\n```\n\nBut the feature implemented on this pull request is just about making standalone text-based links. I'm not really sure how common of a use case that is, because most text links I can think of are embedded inline in paragraphs. For that purpose, we have both the inline styling `<link>` tag, and the `{:text => \"Link Name\", :link => \"http://example.com\"}` option for use with `formatted_text`.\n\nPutting all this together, I'm worried this patch will take up a name we're going to want to use later for a more generic purpose, and that it'll only serve as a convenience method for a small percentage of the use cases for text links.\n\nI should have given this more thought earlier, but the good documentation, tests, and overall friendliness of @Pablo-Merino's pull request made me feel like this was a good addition without considering these deeper issues.\n\nOn closer review I don't think this should be merged. I should have mentioned that much earlier, but I only really thought about these problems now.\n\nSorry for dropping the ball on this one!\n. @Pablo-Merino: Even though we probably won't merge this patch, I've given you commit access to Prawn. You really were amazingly responsive to our requests for revisions on this patch, and we'd absolutely welcome your future contributions. For guidelines, see here:\n\nhttps://github.com/prawnpdf/prawn/wiki/Contributor-welcome-notes\n. @Pablo-Merino: A patch for #689 would be awesome! I agree, it shouldn't be complicated, and if you implement it we'd be helping folks who want to have linkable images.\n. I'm not comfortable with this idea as-is because it moves a text file into the `lib` dir, which currently consists of only Ruby source code.\n\nHowever, I would be OK with the idea of removing the `VERSION` file and replacing it with a `lib/prawn/version.rb` file which would contain the following source:\n\n``` ruby\nmodule Prawn\n  VERSION = \"x.y.z\"\nend\n```\n\nThis would allow us to move the version constant of `lib/prawn.rb` and would make it possible for us to reference the version constant without loading the whole library, and I think would also solve your problem. If so, please submit a pull request.\n. I think that the use of `require_relative` was breaking the 1.9.3 build chain in Travis CI, even though it should have worked in theory. But I rewrote that line to use an explicit require line with a full path, and that seems to work.\n\nMerged (and squashed) in ad11d4a65008ef90efea73c828083ae6a14b6ab2\n. Thanks @boutil! This will be in the 1.3.0 release. I'd suggest also preparing a patch against stable, but at this point I don't think we're going to bother cutting a 1.2.2 release so it's not needed.\n. @packetmonkey: We don't have any restrictions on development dependencies as long as they don't complicate the development workflow, so this is fine. \n\n(note to others: We DO have a policy of no third-party runtime dependencies, which is why @packetmonkey  probably asked :grin:)\n. @ruanwz: Thanks for the patch. Because your pull request was accepted, you now have commit access to Prawn. Please see our [contributor guidelines](https://github.com/prawnpdf/prawn/wiki/Contributor-welcome-notes), and happy hacking!\n. Amazingly, this code passes the test suite and is capable of generating a manual. However, it has some major issues that need to be dealt with before we can consider merging.\n\n1) Right now it's just delegating all method calls to the Renderer object. Ideally we'd want to make direct calls to `renderer.some_method` to reduce the number of internal calls that can be made directly on `Document`.\n\n2) Some methods are monkey-patched. We'll need to audit for a complete listing, but this includes `start_new_page`, `go_to_page`, `finalize_all_page_contents`, and probably a few others. We're going to have to decide whether to wrap-and-extend, or to rethink the APIs entirely.\n\nI am opening up this branch early because I will periodically ask for testers to help out. This is a major gutting of the internals so I'm worried it'll be easy to break something in the process.\n\nThe good news is that once we _DO_ get this stuff extracted, we can move tests over to PDF::Core and improve them over time.\n. I've dealt with some of the issues on this patch and will probably merge into master in the next day or two. We will do further patching to clean things up in the future, and if we encounter any immediate problems I'll revert first and resume work on the branch before attempting to merge again.\n. Squashed and merged! WIll revert if we end up in trouble.\n. Before we troubleshoot further, please try the following things:\n\n1) Try to load your font in a standalone Ruby script, giving an explicit path to the font file.\n2) Try to load another TTF font in the same folder (Grab DejaVu for a known working font: http://dejavu-fonts.org)\n\nLet me know the results of those steps, and then we'll take a closer look.\n. Hi @genreil. I'll try to confirm with the same font once I get  a chance (I'm not on my development machine right now). Is this a freely available font? If so, a download link would be helpful.\n. Do you mean this one?\nhttp://greatersharpstown.com/fonts/fonts/MyriadPro-Regular.otf\n\nIf so, it's in OTF format, and Prawn/TTFunk will not work with it because we only support TTF.\n\nIt looks like there are also TTF files in that listing though:\nhttp://greatersharpstown.com/fonts/fonts/MyriadPro.ttf\n\nWhich one are you using?\n. @genreil: Okay, I'll take a closer look then. I'm a bit worried that it may end up either being a corrupt file or some area of the TTF standard we don't support.\n\nHave you confirmed that this font works elsewhere? I.e. if you install it on your system, can you use it in other applications (like a word processor?)\n. @genreil:\n\nI was able to confirm the error with the MyriadPro.ttf file from the link you provided. But I'm not sure this is a Prawn bug, because it seems just as likely that it can be something wrong with the font file.\n\nThe good news is that it seems like if you convert the MyriadPro-Regular OTF file to TTF, that seems to do the trick. I used a shady. possibly spammy online utility for this purpose: http://everythingfonts.com/otf-to-ttf\n\n(There are probably better OTF to TTF converters out there!)\n\nGive that a try and see if that helps.\n. @genreil Glad you got it resolved! There may still be a bug or bad behavior lurking in TTFunk here, but since this is the first time we've heard of the problem, I'll mark as resolved until we encounter another font that has a similar problem.\n\nThanks for helping with the troubleshooting on this issue!\n. `Text::Box` does not use inline styles, instead it  expects you to use text fragments, i.e. `([{ :text => \"hello\" },   { :text => \"world\",  :size => 24,  :styles => [:bold, :italic] }])`.\n\nGenerally speaking, you should use the high level interface (`text_box`, `formatted_text_box`) if you want inline styles, rather than using the low-level interface. However, you can look at the source for `text_box` if you want to see how we convert inline styles into fragments:\n\nhttps://github.com/prawnpdf/prawn/blob/master/lib/prawn/text/box.rb#L112\n. @packetmonkey: You can do some basic operations via the delegated methods on [Prawn::Document::Internals](https://github.com/prawnpdf/prawn/blob/master/lib/prawn/document/internals.rb) and even more with the methods provided by [PDF::Core::Renderer](https://github.com/prawnpdf/pdf-core/blob/master/lib/pdf/core/renderer.rb) (which is exposed via the `Document#renderer` method.\n\nAll of this is unreleased and will be in Prawn 1.3.0, but It's not really \"safe\" because it's considered part of the internals. There's no guarantee whatsoever that these APIs won't change.\n\nWith that in mind, to support zoom we'd probably need a low-level API in PDF::Core and then a high level wrapper in Prawn. Experimental pull requests are welcome, but since we're not tracking feature requests currently (except in cases where we're correcting broken behavior or missing core features), I'll close this ticket.\n\nPlease feel free to continue discussion here or on the mailing list.\nhttps://groups.google.com/forum/#!forum/prawn-ruby\n. @mojavelinux Thanks! If we could look up the relevant portion of the standard, we can probably find a way to add this feature.\n. Looks like Section 8.1 covers viewer preferences, for those who want to dig deeper.\nhttp://www.adobe.com/content/dam/Adobe/en/devnet/acrobat/pdfs/pdf_reference_1-7.pdf\n. There are also many other mentions of Zoom and Magnification throughout the spec (search the document for them). If someone can narrow them down to the relevant pieces, that'd help!\n. Thanks! I'll take a closer look at this soon, but at a glance it looks like a straightforward patch.\n. Please see #774.\n. On the surface this patch looks a lot uglier than #773 (and it is!), but it prevents us from duplicating the `process_soft_hyphens` method in two different places.\n\nDeeper cleanup is needed down in this code, but I rather make the duplication explicit rather than having two nearly identical methods with slightly different behaviors but no easy way to distinguish between them.\n. Merged a squashed version of this in 143371d\n. @Mario1988: Because your pull request was accepted, you now have commit access to all `prawnpdf` repostories. Please see the [contribution guidelines](https://github.com/prawnpdf/prawn/wiki/Contributor-welcome-notes) here, and thanks for the patch!\n. Thanks. If you have an idea of how we might go about fixing this, a pull request is welcome.\n. @Mario1988: I was able to reproduce. \n\nTo restate what you've said, is the underlying issue that we should be computing `width_of` based on what hyphens will actually appear in the rendered text (if any), but what Prawn currently is doing is computing the width of _all_ soft hyphens in the text, regardless if they are rendered or not?\n. Thanks. At this point `stroke_axis` is part of Prawn's public API, so this description and the link to the file can be removed entirely. The method itself is used throughout the manual, so it may not need its own entry.\n. @turpana: In that case, you're welcome to add a manual entry for it!\n. @turpana: What I'm saying is that the note is no longer up to date. We put that notice there when `stroke_axis` was implemented as a helper for the manual, because people would try to use it in their own code and find it didn't work. But now that `stroke_axis` is part of Prawn's graphics API, it will work as expected when people call it, and they can look it up in the API documentation on prawnpdf.org.\n\nSo the note isn't in the right place. If we want to give `stroke_axis` its own manual entry, it should be done in the same way we've done for any other Prawn feature. Otherwise, we should get rid of this note entirely. :grin:\n. Actually, your updated rewording looks good, I've merged it. Thanks!\n. Because your pull request was accepted, I've given you commit access to all of PrawnPDF's repositories. Please see [contribution guidelines here](https://github.com/prawnpdf/prawn/wiki/Contributor-welcome-notes), and thanks!\n. @airblade Thanks, I'll take a closer look at this in the next few days, hopefully. We have some lingering encoding issues (mainly on Ruby 1.9.3, but some affect all Ruby versions), and I'd like to get those sorted out if we can.\n. @airblade: Would it be possible for you to try to reproduce on Ruby 2.0 or 2.1? Even if it's not feasible for you to upgrade Ruby in your production code, it'll help us narrow this down.\n. @airblade: On closer investigation, behavior isn't exactly a bug, at least in 1.3.0.\n\nHere's the summary of why:\n- You're using built-in PDF fonts, which are NOT generally UTF-8 friendly. They support the Win-1252 format, which is nearly equivalent to ISO-8859-1(Latin-1), which explains why @straydogstudio's workaround might work)\n- When using built-in fonts, Prawn will attempt to convert UTF-8 to Win-1252, a format that Ruby itself doesn't provide an encoding for, so we need to treat it as Ascii-8bit and implement the character map ourselves. So from this perspective, the returned overflow value is \"right\", but it's going to fail to render anything outside of  win-1252's very limited character range.\n- To get around this problem, you can use any TTF font file with Prawn that supports the range of Unicode characters you want: Most common fonts support everything you'd need.\n\nUsing [DejaVuSans](http://dejavu-fonts.org/wiki/Main_Page), I was able to get the following output on both Prawn 1.0 and Prawn 1.3 (I don't think Ruby version matters):\n\n``` ruby\ntext: (UTF-8) \"A quick brown fox jumped over the lazy dog.\"\noverflow: (UTF-8) \"fox jumped over the lazy dog.\"\ntext: (UTF-8) \"A quick brown fox jumped \u00fcber the lazy dog.\"\noverflow: (UTF-8) \"fox jumped \u00fcber the lazy dog.\"      \n```\n\nI think that's what you were looking for, right?\n\nWe need to do a better job of informing people that Prawn's default font selection (and not coincidentally, the PDF format's defaults) are NOT unicode friendly, even though Prawn itself handles UTF-8 text fine given fonts that support it. I think this may involve raising a warning or error when non-compatible glyphs are found, and also probably a guide explaining this. I'll open a ticket for those issues.\n. Note about need for better documentation / warning behavior is in #779.\n. @airblade Upon closer investigation, the plot thickens! Here's a summary of what's going wrong here:\n- Because we're using the built in AFM fonts, Prawn takes the UTF-8 text, converts it to ASCII-8BIT (i.e. just a binary seequence of bytes), and then uses Prawn's WinAnsi lookup table to map the codepoints to their relevant glyphs. So `\u00fc` would be mapped to codepoint `252`, which is actually the same in both UTF-8 and WinAnsi.\n\nIn WinAnsi, the byte value and codepoint are the same (`252`), but in Unicode, they are not:\n\n``` ruby\n>> \"\u00fc\".codepoints\n=> [252]\n>> \"\u00fc\".bytes\n=> [195, 188]\n```\n\nSo when we attempt to convert this text _back into UTF-8_ in various places throughout the text call chain, we're losing information and attempting to treat WinAnsi byte values as if they are equivalent to UTF-8 byte values: They're not!\n\n<sighs> This is going to take further investigation, but it seems like this gets us at least a little closer. Sorry for the long and probably fuzzy explanation above.\n. @airblade: I'm working on a fix that would convert the remaining text back into UTF-8, which I think is a better behavior. But as it turns out, the existing behavior is documented with specs, and there is a way of getting things to work on released versions of Prawn.\n\nBy passing the `:skip_encoding => true` option to `text_box`, WinANSI text will be correctly rendered. This is a clunky interface, so we should think about changing it, and that's why I'm considering always returning UTF-8.\n. @airblade See #793 for a rough proof of concept of how we can improve the API. It's not guaranteed to be stable yet, but should give you an idea of where I'd like to head w. things.\n. Yes, use the `:single_line` option.\n\n``` ruby\nrequire \"prawn\"\n\nPrawn::Document.generate(\"x.pdf\") do\n  stroke_rectangle bounds.top_left, 400, 200\n  text_box \"This is just a simple test\", :width => 400, :height => 200, \n                                        :overflow => :shrink_to_fit,\n                                        :single_line => true,\n                                        :size => 90\nend\n```\n\nIn the future, please don't describe how to build a code example illustrating your question, actually write the code sample instead. Otherwise it just creates extra work (and possible misunderstanding of your intent) upon review.\n\nScreenshots are also helpful!\n. @Siyfion It's definitely worth documenting in the manual, a pull request would be welcome for that.\n\nHowever, since it's not likely that we'll ever be able to document every option in the manual, you should also search the API documentation when working w. Prawn. This feature is documented on the text_box method: http://prawnpdf.org/api-docs/1.3/Prawn/Text.html#text_box-instance_method\n. That said, the API docs could sure use some love too, I can see how you'd miss it! :blush:\n. @Siyfion: Yeah, this is a generally hard problem made worse by the fact that our docs are in a bit of a state of disrepair. Extra efforts into improving them are welcome!\n. See this comment for a further complication:\nhttps://github.com/prawnpdf/prawn/issues/777#issuecomment-57937629\n. Another possible option is that we can consider supporting AFM for US ASCII only, and raise an error if non-ASCII characters are used. The rationale here is that it'll work fine for those who don't need Unicode support, but will force the issue for everyone that does. In practice most people are not going to be happy with a UTF-8 -> Win1252 transcoding anyway, so we wouldn't be breaking a common use case.\n\nIt's a big behavior change though. Thoughts?\n. I've included the full Win1252 char set below to make it clear exactly which glyphs it supports:\n![](http://i.imgur.com/Q2mBmgz.png)\n. #793 is an attempt to address pretty much all of these issues.\n- Text for all Prawn methods is now UTF-8-in, UTF-8-out, so the user does not need to handle Windows-1252 strings.\n- Internally, we're now using Ruby's M17n system to handle the encoding into Windows-1252, so text.encoding will come back as Windows-1252 when `AFM#normalize_encoding` is called, rather than `ASCII-8Bit`\n- When using AFM fonts + ASCII only text, no warning will be seen.\n- When using AFM fonts + non-ASCII characters that are supported in Windows-1252, users will see a warning about the limited internationalization support, along with a recommendation to use a TTF font instead.\n- The warning includes instructions on how to disable it (just set `Prawn::Font::AFM.hide_m17_warning = true`)\n- When using AFM fonts + non-ASCII characters that are NOT supported in WIndows-1252, an exception will be raised rather than replacing w. `_`.\n- None of the above will apply to anyone using TTF fonts with sane UTF-8 support, everything should \"just work\" for those folks.\n\nI _think_ this gets us close to something sane. We also need better documentation, but functionality-wise this seems much better than what we've done in the past.\n\nLet me know if there are any concerns, otherwise I'll close this ticket and open a more focused documentation ticket once #793 is merged.\n. Here's what the warning looks like:\n\n```\n>> Prawn::Document.generate(\"x.pdf\") { |d| d.text \"H\u00e9\" }\nPDF's built-in fonts have very limited support for internationalized text.\nIf you need full UTF-8 support, consider using a TTF font instead.\n\nTo disable this warning, add the following line to your code:\nPrawn::Font::AFM.hide_m17n_warning= true\n```\n. @andreasbeer1981 See https://github.com/prawnpdf/prawn/issues/779#issuecomment-59993949 for what is already implemented. I think it pretty much guarantees that things will either \"just work\" or that an appropriate error/warning will be raised in most cases.\n. Merged #779!\n. Note to self for CHANGELOG: This pull request will not break external behavior, but it will change how PDFs are represented at the binary level. We don't promise binary compatibility between releases, but a note to warn people who do their testing that way is in order.\n. We had decent test coverage on the Prawn side of this, so this patch can probably be merged after prawnpdf/pdf-core#10 has been tidied up.\n\nThat said, it's a scary change with global effects. @packetmonkey can you at least do a non-trivial test rendering using this branch against one of your projects?\n. Hooray! We will merge this week, then.\n. Squashed and merged in 02493169\n. @mfly: Thanks for the detailed bug report!\n\nWe have a policy of no external runtime dependencies, so using a third-party gem dependency is not an option for us.\n\nIt seems like for now we should think about raising a `NotImplementedError` for palleted PNGs w. transparency, and then look towards fixing the problem.\n. @mfly: I forgot to mention that while Prawn itself cannot use external dependencies, that our entire image system is replaceable.  You might give https://github.com/packetmonkey/prawn-gmagick a try and see if it fixes your problem.\n. @mfly: Thanks! It'd certainly be welcome.\n\n@cheba you may also want to take a look at this ticket since you have rummaged around in the PNG code before.\n. @edborden: The `convert` utility is provided by ImageMagick, and is run on the command line. It's not part of Prawn.\n. @Fryie: I agree, and already mentioned this in the current thread.\n\n> It seems like for now we should think about raising a NotImplementedError for palleted PNGs w. transparency, and then look towards fixing the problem.\n. @packetmonkey I marked this as a bug... because as @Fryie said... broken behavior without a warning is pretty much a defect. Consider fixing in a future release. :smile: \n. Because your pull request was accepted, I've given you commit access to all of PrawnPDF's repositories. Please see [contribution guidelines here](https://github.com/prawnpdf/prawn/wiki/Contributor-welcome-notes), and thanks!\n. @Mario1988: Can you look into the test suite failure? It may just be a broken mock object, but we need to sort that out before we can merge.\n. I figured out what was causing the test failure: The width of soft hyphens was being computed whenever _any_ fragment was run in _any_ text call, even if the string had no soft hyphens in it. I moved that check into the `if segment[-1] == soft_hyphen` to solve this problem.\n\nI've merged a squashed version of this patch in 766a53434, thanks!\n\nSome notes for future pull requests:\n- You have commit access to Prawn, so please build your feature branches off of our main repo rather than a fork. If you had done that, I could have added my commits directly to this pull request, making it easier to see what changes I made, and any other PrawnPDF contributor could have helped revise the pull request, too.\n- When you have a refactoring and a fix you want to do, open a separate patch for each. I was confused by the merge conflicts I saw on the changes to the tests for #347, because it's unrelated to #775.\n\nThese are minor issues, but keeping them in mind will help make my job easier. Thanks again for the fix!\n. @jessedoyle: I'm trying to decide whether to add the padding options directly to `text_box` or to provide a higher level layout tool that is capable of doing this sort of thing.\n\nI'm going to think on that for a few days, but if it becomes a big rats nest of a problem, we can think about merging your patch for a temporary solution.\n. @jessedoyle: I decided to merge this, because the concern about \"how do we give better control over padding\" seems to be orthogonal to the question of \"how do we vertically align our text\". Prawn's existing behavior was flawed for the latter, and your patch fixes that.\n\nYou already have commit access to Prawn, so in the future, please use a feature branch off of our main repository rather than your fork. That makes it easier for us to make revisions to a pull request if needed before merging while preserving the full history.\n. @jessedoyle Thanks for this fix!\n. This patch seems straightforward, but can you give me an example of a practical use case for this feature?\n. Yeah, I had guessed that might be the use case. Our API for doing that is a bit awkward, but I guess it gets the job done. Thanks anyway for the pull request!\n. Thanks, I'd definitely like to add this to the manual. Please fix the typo on line 44 and then we'll try to get this merged. You may want to try running `rake manual` locally to ensure the manual entry looks the way you expect it would.\n. It looks like there is a build failure because of trailing whitespace at the end of one of the lines. (This is just a style thing, but we run rubocop as part of our CI process.) I'll fix it and then merge, but in the future please run `rake spec` before submitting pull requests to make sure you have a passing build.\n. Sorry, just running `rake spec` wouldn't cause Rubocop to run, but simply running `rake` runs both the tests and Rubocop.\n. I think we did that around the same time, but a squashed version of your patch has been merged into master!  Because your patch was accepted, you now have commit access to all of PrawnPDF's repositories. [See the guidelines here](https://github.com/prawnpdf/prawn/wiki/Contributor-welcome-notes), and thanks again!\n\n(in particular, giving contributors commit access lets us work on branches off the main repository, which makes it possible for others to easily patch minor issues in pull requests)\n. @jeremyf: Thanks! In the future you can merge trivial patches like this (typos, fixes to clearly incorrect docs, etc.)  without a review. If anything ever gets botched we can always revert.\n. @jeremyf That's probably a useful way of doing things because it makes it easier for us to see when new things merge. I confess I don't always follow that practice myself, but I should probably do so.\n. This patch _almost_ works... we see one test failure and one manual example failure currently. I'm a little nervous about merging this even if we can fix the remaining failure, because it constitutes an API change to the 1.0 stable API. \n\nThat said, we can preserve nearly perfect backwards compatibility _in practice_ by making `:skip_encoding` a no-op. This would make it so that old code which passed remaining text back into `text_box` would still work correctly. The only possible breakage would be if someone was actually doing some of their own processing on the win1252 text to convert it back into UTF-8, but that seems unlikely.\n. In theory, this should be working now! The only thing I haven't _completely_ dealt with yet is making `:skip_encoding` a no-op, or removing it entirely.\n\n@airblade: Can you please try this code in your original use case and see if it solves the problem for you? It implements UTF-8 in, UTF-8 out, so you shouldn't get any encoding surprises anymore.\n. @packetmonkey: This is another \"I'm worried it's going to break stuff\" pull request. Are you using built-in fonts in any of your non-trivial Prawn code? If so, please take this for a spin.\n. Note to all... I am not sure why we were using our own Win1252 implementation... perhaps it wasn't supported in Ruby 1.8 back when we still needed to support 1.8? It's possible to use Ruby's M17N system now for this purpose, so this patch switches to using Ruby's implementation rather than our own under the hood.\n. a68eef6 contains a scary but probably good change: It raises an error if non-Windows-1252 glyphs are attempted to be rendered in AFM fonts. The behavior of existing versions of Prawn is to replace with an underscore, which is pretty much never what users will want, and masks bugs.\n\nThis latest also changes or gets rid of tests that actually only worked _because_ they were exploiting this bad behavior.\n. @packetmonkey: I'm going to merge this, but if anything breaks open up issues and we'll get them sorted out.\n. Merged in adaf18ce14b!\n. @isaiah Do not mix AFM fonts with fallback fonts... use TTF fonts throughout and you'll be fine!\n. Something like this will work, but I don't want to rely on generic APIs like `to_str`, because a meaningful string representation has little to do with a meaningful _color string_ representation.\n\nI think I'd prefer something like `to_rgb` and `to_cmyk`, which would return either some sort of color struct, or an array (can't decide what's better).\n\nFor handling our base case, which is string representation for RGB, and array for CMYK, we'd just check for something like `case color; when String; Prawn::Color::RGB.new(color); ...`\n\nI know this is a rough sketch, but feel free to implement it if it makes sense. If it doesn't, I will work on an alternative patch when I find time, and we can discuss further from there.\n. /cc @packetmonkey since this kind of stuff usually captures your interest.\n. Subclassing Ruby core classes is both bad design and can lead to unexpected internal errors because of optimizations at the language level, so I don't want to encourage it. There's nothing about colors that make them natural to represent as a string or array, it's just an implementation detail.\n\nWith that in mind, a color class is indeed what we'll want here.\n. @packetmonkey This solves a different problem, though. A custom color class would most likely be used for dynamic determination of colors, not color types!\n\nThe change you suggested might be welcome at the PDF::Core level, though.\n. @slabounty: Returning a meaningful value wasn't ever documented anywhere, I don't think. So it's currently undefined behavior, and we can change it.\n. @slabounty For right now it'd probably be OK to convert into whatever PDF::Core wants. A patch to `PDF::Core` would also be alright, but there are many undefined or poorly defined APIs lurking down there.\n. @slabounty This hasn't been forgotten, it's just blocking on me. I think your patch proves the concept, but I'll want to change the interfaces a little bit, and won't know exactly how I want it until I drop down to the code level. I will play around with getting this integrated some time after the next release.\n. @BrentWheeldon:\n\n`on_page_create` is a low-level method that's not part of the public API. (`repeat` or `number_pages` are often used instead). If those support your use case, I'd recommend using them instead. If not, please let me know what you're using `on_page_create` for, so we can think about how to support your use case.\n\nBut an immediate fix for 1.3 would be to call `renderer.on_page_create`, just don't assume it's going to be a stable API.\n. @BrentWheeldon: This may be something we could offer support for (or build a tiny extension for) in the future. See this thread for what I think is a reasonably clean solution: https://groups.google.com/forum/#!topic/prawn-ruby/_KIg4Ih8TdU\n. Here's a direct link to the relevant code sample: https://groups.google.com/d/msg/prawn-ruby/_KIg4Ih8TdU/MaHBtDu2F4sJ\n. @mojavelinux:\n\nMaybe not, because repeaters run _last_, so the z-index is going to be wrong (your background would be rendered on top of the page contents rather than behind them).\n\nI'm convinced that restoring `on_page_create` as a public method on `Prawn::Document` is reasonable. Anyone is welcome to prepare a patch. (It should simply delegate to `renderer.on_page_create`, which is the workaround for 1.3.x)\n. @mojavelinux: Also, we should think about what first-order support for setting background colors might look like, since it's a tedious operation currently. A patch or feature-request ticket for that is welcome!\n. @mikesax. For the short term, I'd definitely like to bring back `on_page_create`. Controlling the order of when `repeat` calls get run is an interesting idea... I'll have to think on that some more.\n. @nathansamson: Yeah, in time for the next release I'm only going to restore the behavior because that's how it's been since basically forever, but that is a good wart to think about dealing with when we produce a better alternative in the future.\n. Merged!\n. I really don't know how much work is involved here, and don't have plans to work on this myself in the near future. You can certainly help move it along through either more notes on this ticket or a pull request, though.\n\nI'm OK with not reversing the string as long as using `bidi` produces a working solution, particularly if we can get kerning to work correctly.\n\nSo it'd be best to start with an example of how this might work, and we could take it from there.\n\nWe don't usually block any releases for any features or fixes, unless it's something we've already merged (like the `:indent_paragraphs` feature). I'm hoping to get a 2.0.0 release out some time in the next few weeks, and if this can be completed before then it might ship by then.\n\nActually, if you can provide me with a summary of everything that's currently broken with RTL and your proposed solutions, that'd be helpful.\n. > That's great! Could you please push a branch without all the relevant string reversals? Or, at least let me know if it's safe to grep for \"reverse\" and remove all such occurrences?\n\nUnfortunately the RTL text support was added after I had stepped away from Prawn for a while, and the original author is no longer active in the project. While I can help you figure out whether your patch breaks stuff, I won't be better than you at figuring out what to change, and you'll need to learn the code anyway to do your work on this. I can definitely help you read through unfamiliar code when you run into it, though.\n\nOtherwise, your general plan seems good! For `width_of`, you can try drawing lines at the baseline of the text with that width, and see if it looks correct or not.\n. You can test this the same way we do... using [pdf-inspector](https://github.com/prawnpdf/pdf-inspector).\n\nPass any PDF string in place of `@document.render` in the following test:\nhttps://github.com/prawnpdf/prawn/blob/master/spec/document_spec.rb#L93-L112\n\n(but remember to use `File.binread` instead of `File.read`, PDF is a binary format!\nHope that helps.\n. It's fine to link to your Github repository, because Github makes it much easier to browse code / documentation than rubygems.org. I don't think people will have trouble finding the gem after they've visited your README, especially if your README includes instructions on how to install the gem!\n. Thank you!\n. Because your pull request was accepted, you've been given commit access to PrawnPDF's repositories. Please see [contribution guidelines](https://github.com/prawnpdf/prawn/wiki/Contributor-welcome-notes) here, and thanks again.\n. @elad: It's been that way for a while. Maybe you had ended up on a different page via web search?\n. I believe this is a duplicate of #498 but actually gets us lower down the stack. Leaving open until we confirm they're related.\n. I've thought about adding some sort of class level `document_options` macro, but for now, two things you can do that are completely safe:\n1. Define a `@document` variable in your`initialize()` method. (or anywhere within your object, really)\n2. Define a `document` method on your class.\n\nThe latter is officially supported, the former is something I think we're going to officially support moving forward, because it's how I've been doing it in my own code.\n\n``` ruby\nclass Calendar\n  include Prawn::View\n\n  def initialize\n    @document = Prawn::Document.new(:page_layout => :landscape)\n    #...\n  end\n\n   # ...\nend\n```\n\nAs a bonus, this approach is also something you can use if you want to build composite views, just replace the call to `Prawn::Document.new` with `YourDocumentClass.new`.\n\nA documentation patch would be welcome to clarify this.\n. This isn't a Prawn issue, though you can try one of the following Rails extensions:\n\nhttps://github.com/Whoops/prawn-rails\nhttps://github.com/bkuhlmann/prawn_plus\n. Private methods used by Prawn are not meant to be used in user code. Can you give an example of a method you're trying to use that's private? \n. There are a handful of weird edge cases that might lead to confusing stack traces due to the method missing delegation, but I'm having trouble remembering a specific example of one.\n\nIf you do run into any, feel free to open an issue or submit another pull request!\n. It does sound like the problem you're having is that Prawn is wrapping text based on the portrait boundaries. I'd have to give this some thought, because I've never tried to do this sort of thing before.\n\nYou may want to see if any of the existing templates in https://github.com/jordanbyron/prawn-labels work for you, and then rotate the text and image on a per-label basis.\n\nI'll leave this open as something that might potentially be a missing feature in Prawn, at least until we explore what options we have. I'm not sure when I'll find time to investigate, but please update if you find a suitable workaround.\n. This isn't a Prawn issue, but an encoding issue with your string. `0xF6` is the codepoint for `\u00f6`, but not the binary representation.\n\n``` ruby\n>> \"\u00f6\".codepoints.map { |x| \"%2x\" % x }\n=> [\"f6\"]\n>> \"\u00f6\".bytes.map { |x| \"%2x\" % x }\n=> [\"c3\", \"b6\"]\n```\n\nSomething like this should work:\n\n``` ruby\n>> \"\\u{f6}\"\n=> \"\u00f6\"\n```\n. Well, we certainly should do something about this, because that's obviously a bad behavior, and an easy mistake to make.\n\nUnsure whether we should support `#` or not though. It is a little confusing that Prawn isn't like HTML here, but I don't know how I feel about supporting two different formats, even if they're nearly identical \nto one another.\n\nI'll give this some thought, thanks for reporting the issue!\n. @packetmonkey: Probably the right thing to do. Since the current behavior is undefined anyway, can you go ahead and write a patch that works as you suggest?\n. @packetmonkey: Do you still want to work on this? Since it's a small patch, I could probably write it myself if you don't plan to do it in the next few days, so that we can include it in the 2.0.0 release.\n. I'll drop a note on this ticket if I start working on this, otherwise go ahead and give it a shot.\n. I realized that this isn't a release blocker because we'd just be turning an undefined behavior into an exception. So rather than rushing to build a fix before the 2.0.0 release (which may happen today or tomorrow), just fix this when you get around to it @packetmonkey.\n. Thanks @shevegen. Prawn is very much the work of dozens of contributors. Most of the good ideas aren't mine. :-P\n. You can use the `indent()` function to get left/right padding.\n. Go for it! Thanks. \n\nOn a tangential note, we may drop 1.9.x support in the Prawn 2.0.0 release (which will hopefully happen in January), since end of life is coming soon for it.\n. Prawn does not alter the image data, but you can have rendering issues in viewers for various reasons, and there can be DPI-related conversion issues. See the discussion on this thread:\n\nhttps://groups.google.com/d/msg/prawn-ruby/MbMsCx862iY/6ImCsvLGfVcJ\n. TODO: Update README To specify supported versions, add changelog entry, update travis.yml where needed.\n. All set. I'm setting the `JRUBY_OPTS=\"--2.0\"` in our travis.yml (see here: https://github.com/prawnpdf/prawn/commit/925a68ff807d8e42fe67e193b0a280d60b56f256) to get JRuby to run in 2.0 mode, and it seems to be working fine.\n. Please provide a runnable example that does not rely on your application code.\n. @OpakAlex You're using single quotes, which means your string contains a slash followed by an n, not a newline character. Try using double quotes instead, i.e. `\"one two \\n one two \\n hello\"`.\n. Sorry, I'm not able to reproduce. Please show your entire script.\n. Not going to go this route, because readthedocs.org has plans (or is already) advertising for their sponsors on built documentation, which is something I'd rather avoid.\n\nThe general idea of having hand-curated documentation is still desireable to me, but we'll seek a different route.\n. Seems OK to me, let's merge it!\n. @sokrate: No, sorry. This is currently an unsolved (and very complicated) problem for Prawn.\n. We actually did show a warning for a while before extracting them. If someone is upgrading from 0.12.0 where templates still worked to 1.3 (or 2.0+ as of the next release) without reading release notes, They Are Going To Have A Bad Time, no matter what.\n. Something that might help the problem indirectly would be to turn `Prawn.debug` on by default in 2.0.0+, which would raise an error if any key Prawn doesn't support is provided, including `:template`.\n. Closing this for now. If we keep seeing confusion around this issue, we can consider re-opening in the future.\n. Thanks! I'm going to reword this before merging, but the basic ideas are right.\n\nThings I plan to change:\n- It's not necessarily _typical_ to need to pass options to `Prawn::Document`, although it will be for any non-US user. The defaults are set to common paper size, orientation, margin in US. But it's going to be common to change them, so we shouldn't make it sound like a special case to override `document`, I agree there.\n- I want to include the mention of setting the `@document` variable, because for simple cases, this is going to make a lot of sense. For example:\n\n``` ruby\nclass MyView\n  include Prawn::View\n\n  def initialize(options)\n     @document = Prawn::Document.new(:margin => 0, :layout => :landscape)\n     # ...  \n  end\nend  \n```\n\nSo... in other words I need to rework this revision to address both of the above points, but I agree the docs can be improved, and I'll check to see what you think once I get this rewritten, @giuseb. Thanks!\n. @giuseb Every use of a module is a shot-gun blast to encapsulation: There's no major difference between overwriting methods or variables, because they're both in a single shared space. \n\nHowever, you should take a look at how Prawn::View is implemented... \n\n``` ruby\n    def document\n      @document ||= Prawn::Document.new\n    end\n```\n\nAs long as we always only refer to `document()` within the mixin and the only reference to `@document` is in this method, we're not going to run into issues. \n\nWe will only use your `@document` variable if you don't define your own `document()` method. Furthermore, we only define `@document` if you don't define it yourself AND you have not defined a `document` method.\n. To expand on this a little further:\n\nSuppose you have code like this:\n\n``` ruby\nclass Foo\n  include Prawn::View\n\n   def initialize\n     @fancy_custom_document = ....\n   end\n\n   def document\n     @fancy_custom_document\n  end\nend\n```\n\nThen the following things are true:\n- `Prawn::View` will use your `document()` method as the ONLY interface to your code.\n- `Prawn::View` will not create a `@document` variable.\n- `Prawn::View` will ignore a `@document` variable if you create one.\n- Everything will work fine, as long as `@fancy_custom_document` points to a Document-like thing.\n\nSo we're not leaking any state-based implementation details, unless you explicitly opt-in to it.\n. I've thought of doing something like that, but that actually introduces more state and a wider interface, giving even more potential for collision. I'm happy with the design as it is.\n. @dsisnero: Consider changing the name in asciidoctor-pdf instead? We're upstream.\n. I didn't know that this validator gem existed! Very interesting, and if the warnings it popped up are due to invalid or bad output from Prawn, we'll definitely be interested in fixing this. Can you re-post this issue over to https://github.com/prawnpdf/pdf-core, which is the underlying PDF library Prawn uses?\n\nAlso, because it'll take me a long time before I can look into this, further research and/or patches are welcome from you or anyone else!\n. Use any UTF-8 compatible TTF font with support for Hindi glyphs, and you should be all set.\n. This looks like a good change. It may take me some time to get around to reviewing, but as long as I don't find any major issues we'll try to get this merged in time for the next release.\n\n(Which is hopefully soon, but truthfully has been delayed for a while)\n. See #827.\n. Please show a full, runnable code sample and then we'll re-open.\n. For right now I'm trying to avoid expanding the API for things that already have an alternative, even if the alternative isn't ideal.\n\nOnce we restore `on_page_create()` (which will be done in 2.0.0, and existed in all releases except 1.3.0), you could use an `image()` call with that to get the same result.\n. Looks good! Now that we have a CHANGELOG.md file in the repository, please try to update it in future pull requests. I can always revise or expand upon notes, but this ensures that we won't entirely miss documenting a change.\n. Can you open a pull request that demonstrates what our CHANGELOG.md file would look like if we followed this convention? That would help me see to what extent it'll be helpful to us.\n. @ernie:\n\nI added a test to make sure that bold differed from plain DejaVuSans to help make sure we're not getting a false positive test result. I also removed what I believe to be an old and unnecessary default value (I can't think of why we'd want to use \"Helvetica\" if the font doesn't exist. It's our default font, but the font object should be present and the family can be read from it.)\n\nPlease test this against your production code and let me know if we're ready to :shipit:.\n. @ernie: I'm not 100% certain it is safe, but the manual and tests pass, and if this breaks something I'd rather fix the root cause than rely on this weird default.\n. Squashed and merged in https://github.com/prawnpdf/prawn/commit/13cd1c427f7ecd775b8244d6395dc814334ea8c3 (there is a little bit of merge noise there, but it should be harmless)\n. @ernie: Because your pull request was accepted, I've given you commit access to all of Prawn's repositories. Please read our [contribution guidelines](https://github.com/prawnpdf/prawn/wiki/Contributor-welcome-notes), and thanks for the patch!\n. Please provide a runnable code sample that illustrates your problem, and then we'll re-open.\n. @bvogel has the right idea. Please see the section on Fallback fonts in Prawn's manual: http://prawnpdf.org/manual.pdf\n. Please provide a runnable code sample (as well as a download link to a TTF font we can use) and we'll re-open for futher investigation.\n. I'm able to reproduce the problem using this code:\n\n``` ruby\nPrawn::Document.generate(\"x.pdf\") do\n  font \"#{Prawn::DATADIR}/fonts/siddhanta.ttf\"\n  text \"\u0936\u0940\u0930\u094d\u0937\u0915\"\nend\n```\n\nUnfortunately, I have no idea where to start with figuring out what's wrong, or how to fix it, because I'm unfamiliar with the correct rules for processing Hindi text.\n\nInitially I thought this might be a problem with \"combining characters\" (for example combining accents and the letter they cover), but I was able to produce the correct output for something like this:\n\n``` ruby\nPrawn::Document.generate(\"x.pdf\") do\n  font \"#{Prawn::DATADIR}/fonts/DejaVuSans.ttf\"\n  text \"re\\u0301sume\\u0301\"\nend\n```\n\nPlease provide additional background information on how Hindi text/font processing is supposed to work, even if it's just links to other resources. Right now I just don't know where to start in the troubleshooting process. \n. Thanks. Because it's unlikely that I'll work on this myself in the near future, please feel free to research further and start working on a patch if you get a chance.\n. I think what you're looking for here is a nice way to float text around an image (or some other box). This is something we should have better support for, although I'm not sure whether it belongs in Prawn or in an extension gem.\n\nThe proposed solution seems too specific though: There's nothing special about the \"first line\" of text that wouldn't also apply to the \"First N lines\" of text. So, while I think there's room for improvement, we might want to come up with a more general solution here.\n. Yes, there is a way to do this:\n\n``` ruby\nPrawn::Document.generate(\"test.pdf\") do\n  box = Prawn::Text::Box.new(\"Truncate this\", :width => 50, :height => 20, :document => self)\n\n  overflow = box.render(:dry_run => true)\n\n  p box.everything_printed?\n  p overflow\n\n  # you can call box.render(), or create a new box here.\nend\n```\n. A documentation patch would be welcome, as this is a common question!\n. I'm fairly sure it's only supported at the `text()` call level (so it doesn't work for `text_box` either). There isn't a philosophical reason why we'd want to prevent indented paragraphs using these lower level calls, so you can look into a patch. If it wasn't too complicated, we'd consider merging a change for this.\n\nThat said, there really needs to be some major rethinking into the text APIs. The fact that we have so many different entry point is a problem that needs solving, and I'm hesitant to introduce too many changes until we do.\n. Hi, \n\nThis seems like something worth adding, but in order to re-open this ticket, we'll need a lot more detail on how the feature should work, as well as some research on how to implement it.\n\nWe try to make sure that unless there's an implementer for an idea, we only keep open tickets for detailed feature requests and bug reports.\n. @kaluznyo: The object returned by `mb_chars` is not a String. Older versions of Prawn may have coincidentally called `to_s` on it, but that was an undefined behavior. If you call `to_s` on your `ActiveSupport::Multibyte::Chars` object, I think you'll get the result you expect.\n. Hi @kaluznyo,\n\nThis is a known issue with PDF::Core, see here for details: https://github.com/prawnpdf/pdf-core/pull/15/\n\nSuggested workarounds are to use `:rotate` with any Prawn text method other than the `draw_text` method (i.e. `text`, `text_box`, `formatted_text`, etc.), because it does not rely on the same code. You can also temporarily build pdf-core from the branch listed in the pull request above.\n\nI will try to cut a Prawn 2.0.1 release later this week which fixes this issue. Until then, hope that helps! \n. Building prawn from `stable` or `master` should fix this issue now. I'll try to get a new release out within the next few days.\n. Prawn 2.0.1 has been released, and it includes this fix!\n. Thank you!\n. @bhicks: Because your pull request has been accepted, you now have commit access to all of prawnpdf's repositories. Please see our [contributor guidelines](https://github.com/prawnpdf/prawn/wiki/Contributor-welcome-notes) for more details, and thanks again!\n. We stopped packaging the TTF files in Prawn's gem several years ago, because they are meant for testing purposes only.\n\nIf you are trying to use Prawn for generating PDFs, you'll need to grab TTF files for whatever custom fonts you're using.\n\nIf you are repackaging Prawn for an OS distribution, please build from our git tags rather than unpacking the gems..\n. @rascal-hats: It does reference `Prawn::DATADIR`, because the manual is generated from the source code in the examples themselves. In other words, the code samples you see in the PDF are actually run to generated the documentation, they're not just snippets.\n\nAdding some clarifying comments might help, though!\n. What practical problem is this causing for you?\n. If you want to patch bounding box to use `0.0` as a literal for the sake of consistency, that's fine... submit a pull request if so.\n\nBut I don't think this will make any functional difference, so it's really just a matter of internal consistency.\n. @elad: That was the plan... yes. The idea would be that whatever low level and general support functions needed for RTL support should be implemented by Prawn/PDF::Core, but then all the specific details could live in an unofficial, semi-official, or official `prawn-rtl` gem (The designation depends on to what extent someone is willing to maintain the gem, and what extent they'll work w. the Prawn core maintainers to coordinate... but is largely unimportant)\n. For now, use the solution recommended by @crazymykl. I'd be open to rethinking this UI, but I'm not sure that a yielding API is the way to go there, and right now we're focused on internal improvements to Prawn rather than API changes.\n\nClosing because we don't track feature requests, but this is something to think about in a (much later) version of PrawnPDF.\n. It'd be nice to support this feature, however the entire architecture of Prawn is based on mutable, write-only, one-way rendering of documents. For this reason, unless we can be absolutely certain that a delete call will remove all traces, it'll likely lead to corruption issues in some form or another.\n\nI wouldn't be completely against a patch for this, but the real fix is to rework our underplumbing, which is a pretty big undertaking.\n. I had a conversation w. @packetmonkey about this and was thinking that although Prawn never needs to think about IDs potentially being non-unique, a future version of PDF::Core may need to. And I was unsure the DI route was needed as it seems like it wouldn't provide an extension point as much as fix a limitation in Prawn.\n\nSo my recommendation (DI or not) was to move this down to the PDF::Core level and get it implemented there. It's a private method on Prawn currently, so that means we can change it whenever we want as long as no client code needs to be changed and no visible changes happen in the PDFs (binary compatibility has never been guaranteed).\n\nSo @packetmonkey... would you be open to a patch from @bvogel  that extracts this into PDF::Core and implements it as-is for now, leaving the DI conversation for later?\n\n(Just throwing this in in hopes that it may help move things along, I defer to @packetmonkey on the decision making!)\n. In my mind this is internal behavior that shouldn't negatively impact users, so :+1: \n. @bvogel Just a heads up... we're planning to cut a release this weekend.\n. @bvogel: I deleted your comment by accident... \n\nHere's what it said, for others:\n\n> @practicingruby, @packetmonkey I'm still amazed at the complexity of prawn - I never figured releasing a new version would take 3 months :) (I'm joking). But in all seriousness we should REALLY cut a release. Is there anything I can do to help in the progress?\n\nRelease schedule is entirely up to @packetmonkey as lead maintainer on this project, and he's busy.\n\nThere's not currently anything anyone else can do to help except be patient. Over the long term, perhaps bringing more maintainers in, as well as simplifying our release process, would be a good thing.\n. @packetmonkey: What if we only return the box when `:dry_run` is set? This is backwards compatible because it'd keep the return value the same for any code following the 2.0 API, but would provide the box object if you use the newly introduced `:dry_run` param\n\nIn Prawn 3.0, we could consider unifying the interface.\n. I'm not sure what the cause of this issue was here, but from the looks of it, it might be a mismatch between Prawn and PDF::Core versions, but if that were the case I'd guess it was a configuration issue on your end, @gillesmathurin.\n\nWe'd need a minimal reproduction that doesn't depend on your application code and includes all necessary code to run in order to investigate further.\n. I discussed with @cheba privately, and I'm actually fairly confident that as long as we have active eyes on the discussion channels, I can help with enforcement and decision making when problems do occur.\n\nSo I'll get the relevant documentation merged, a communication channel set up, and I'll be there to help whenever we have problems. I am counting on others to be on the look out for issues, but as long as we have someone doing that, we'll be able to make this change.\n. @cheba, @packetmonkey: The conduct@prawnpdf.org email is set up, forwarding to all three of us.\n\nCan one of you add the conduct file for contributor covenant + update README?\n. Sorry about that. It should be back up now!\n. To implement this, you could break up your text using your own preprocessor and then call `move_past_bottom`. I wouldn't be against having some higher level way of doing this, but I'd like to see an implementation first.\n. Sorry, I don't even know whether this is feasible and we don't track feature requests, only work-in-progress and bug reports.\n\nIf this _were_ feasible, it'd be something I'd expect to see in an extension rather than in Prawn core.\n. I'm pretty sure that #473 is related to this issue, in particular this comment:\nhttps://github.com/prawnpdf/prawn/issues/473#issuecomment-32369504\n. @twobitfool Thanks so much for an incredibly clear and helpful bug report.\n. The versions of Prawn that work on JRuby 1.7 will continue to work, and if you're unable to move to JRuby 9000, please use those. It's not a great solution, but you may need backport fixes from time to time.\n\nIt has always been my intention to support whatever versions of Ruby are supported by the core Ruby team, for as long as they're supported. That has more-or-less been applied consistently throughout the history of the project, and that's what I'd like to see continued.\n\nSo we will continue to support whatever version of JRuby that overlaps with the the oldest officially supported versions of Ruby provided by ruby-core. If JRuby trails behind, that means you'll need to trail behind on Prawn versions, but that as soon as JRuby \"catches up\", you'll be able to catch up on your Prawn versions too.\n\nSo, that's basically the end of the story. Please adjust expectations accordingly.\n. @pointlessone: Please update this part of the README when you get a chance:\n\n> Because Prawn is pure Ruby and all of its runtime dependencies are maintained by us, it should work pretty much anywhere. We officially support MRI (2.1, 2.2, and 2.3) and JRuby 9000, however we will accept patches to fix problems on other Ruby platforms if they aren't too invasive.\n\nThere was a period in Ruby's history where supporting the lowest core Ruby supported version meant also that things would work on common, stable versions of JRuby and Rubinius. This isn't completely true anymore, so we should make it clear that our support for alternative implementations is limited by their compatibility with officially supported Ruby versions.\n. > The point is that they don't because Prawn forces Ruby 2 at installation time and that breaks JRuby environments using JRuby 1.7. It's just not compatible.\n\nIf you lock to the versions of PrawnPDF that support Ruby 1.9.3, they will not force Ruby 2.0.0 or higher. If you patch those versions and release your own gem, that works, too.\n\n> You've made your position clear, though. We simply have to say that the only way to use Prawn, and hence Asciidoctor PDF, via JRuby/Java is to be at the bleeding edge where things may not work as expected on all platforms.\n\nThe \"bleeding edge\" of JRuby is unfortunately the trailing edge of core Ruby. We support the oldest possible version of Ruby supported by its core team. If the two implementations aren't coordinating to guarantee some overlap, please direct your complaints upstream.\n\n>  I can't stop the support requests from coming in (and believe me, they will keep rushing in), but I can at least say it's out of our control. C'est la vie.\n\nTo clear up any misconceptions, we don't give Asciidoctor or its users special treatment, and we also don't run this project as a democracy. Our very small maintenance team commits to what they can support -- no more and no less -- regardless of demand. You will have the same voice in PrawnPDF with 50 users as you would with 500 or 500,000 or 500,000,000.\n\nI understand that our policies might be incompatible with your goals. If that's the case, please do create your own distribution of PrawnPDF. That would be fine!\n. @headius: Thanks for sharing these details.\n\nIt seems like as long as we continue to support JRuby 9k, these problems will go away for users as soon as they move away from JRuby 1.7, hopefully for good.\n\nAs long as JRuby 9k overlaps with at least one officially supported Ruby version, we'll continue to build against it and report problems upstream when they are reported to us.\n. I reverted this pull request because it wasn't signed off on by a maintainer. \n[Our contribution policies are here](https://github.com/prawnpdf/prawn/wiki/Contributor-welcome-notes).\n\n@crazymykl: Please don't merge into master unless asked to by @packetmonkey or @pointlessone.\n\n@packetmonkey, @pointlessone.... please check this and sign off and/or merge.\n\n(unfortunately Github doesn't give me an easy way to re-open this PR)\n. As this gets worked on, please see this related ticket (especially toward the bottom)\r\n\r\nhttps://github.com/prawnpdf/prawn/issues/497. ",
    "otaviofcs": "one way to fix this is to extend the scope of prawn-fast-png to handle all png settings, not only the alpha channel extraction.\n. one way to fix this is to extend the scope of prawn-fast-png to handle all png settings, not only the alpha channel extraction.\n. ",
    "yob": "I've fixed this in my png_fixes branch, plus add some new specs\n. I'd imagine replacing Prawn::Images::PNG with a RMagick based version shouldn't be too hard. It's not like it does much.\n\nI'm not sure how Greg feels, but I think that'd be great as an optional prawn plugin. I'd be keen to keep mainline prawn pure ruby if possible. I use c extensions in projects, but sometimes it's nice to be able to weight up the various pros and cons.\n\nie. faster and more format support vs. possible memory issues and reduced platform compatibility.\n. Oh, in that case, sweet! :)\n. Only unfilter PNG files _after_ we check for compatible types (Closed by 1f6b2fee15b88c459b0476ed54b33cdb05ae0b35)\n. Funny timing, just last week I fixed an issue in pdf-reader that allows it to recognise PDF names that have spaces in them.\n\nSpaces are allowed, but they have to be encoded as #20 (hash +ascii hex code). The fix for this should just be a quick spec+patch to PdfObject\n. oh, or a change to ttfunk that strips spaces from the font name would work too.\n. James - I've updated prawns conversion of symbols to PDF names to support white space (and other delimiters) is 4c1d341. I don't have a font file with spaces handy, can you try it out and let me know if there's any difference?\n. avoid clashes in font names when adding fonts to a document using templates\n- when picking an identifier for a font, check if that identifier is\n  already used on the page\n- if it is, increment a counter and try again\n- closed by d6912cd077808e847917c1980ed5fad15557ea76\n. Thanks for the report. A fork is probably best, it ensures credit goes where credit is due.\n\nIf possible, a failing spec in spec/templates_spec.rb would be handy as well.\n. Cheers! Will review it and merge shortly\n. Support for pantone colours has come up before. I'm personally interested in learning how they work, but my colour theory foo is weak. I should also finish the other template related tickets that are outstanding first.\n\nI should be through my current \"no free time\" patch in a month or two. If you still need pantone support then, ping me and I'd be happy to work on it if you can help me understand some of the terminology and such.\n. Fix templating of pages with an inherited MediaBox entry\n- thanks to takahashim for reporting\n- closed by 41b56e8595cf10c7d6c63ce38c7aabfc0aef6942\n. Greg or Brad - can you add me as an admin to the ttfunk repo?\n. This is mostly finished and all tests remain green on 1.8.7 and 1.9.2.\n\nRemaining jobs:\n- polish ttfunk gem (minimum: clean up readme and licensing) and publish to rubygems.org\n- merge my ttfunk fork into sandal/ttfunk\n- polish pdf-inspector gem (minimum: clean up readme and licensing) and publish to rubygems.org\n- remove :git references from Gemfile in prawn\n. I'm off on 4 weeks holiday in about 6 hours, so I'll have to leave completing this ticket for someone else.\n\nI'll have no laptop and sporadic net access until the 28th Feb. Good luck!\n. Only three remaining jobs:\n\n```\n* polish ttfunk gem (minimum: clean up readme and licensing) and publish to rubygems.org\n* polish pdf-inspector gem (minimum: clean up readme and licensing) and publish to rubygems.org\n* remove :git references from Gemfile in prawn\n```\n. Raw image data can be passed in by wrapping the data in a StringIO.\n\nNot very intuitive maybe, but is it enough? Maybe we can improve the doc and/or manual around this?\n. this isn't a prawn related issue, \"view_renderer\" doesn't appear in the prawn codebase.\n. Thanks for the report, I'll close this in favour of #375 as there's more discussion there.\n. I'll look into this. I'm hoping I can transparently refactor pdf-inspector to work with the new pdf-reader API.\n\nRe-writing the prawn specs to use pdf-reader directly will be too much work in the short term.\n. ping @sandal. We're making another attempt to get 1.0 released, do you have time for this or should we just remove the teaser?\n. To help us reproduce the error, can  you try and put together a simple script that exhibits the same issue?\n. As short as it can be whilst still triggering the exception you're seeing. With the level of detail you've provided so far I doubt we'll be able to find and fix the issue.\n. Yep, a stack trace would also help.\n\nOn 3 October 2011 20:42, Gerhardk\nreply@reply.github.com\nwrote:\n\n> Well i'm no good with scripts I ran into this error in the web browser will the stack trace be of any help?\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/sandal/prawn/issues/283#issuecomment-2270370\n. Thanks for the extra info.\n\nOn 24 October 2011 07:35, Brian Maddy\nreply@reply.github.com\nwrote:\n\n> We ran into this issue also, but with jRuby 1.6.1 (ruby 1.9.2) and rails 3.0.9 on osx and Ubuntu.\n> \n> It turns out that Prawn inserts some metadata into the pdf documents--specifically,\n>  the document creator and producer. That looks like it might be what's causing this\n> to crash. The \"Prawn\" string is passed to the Prawn::Core::PdfObject method. Inside\n> this method it converts \"Prawn\" into utf16 with Prawn::Core::utf8_to_utf16 because it's\n> not part of the document's main content. It then concatenates that with a normal ruby\n> string which blows up. It's basically doing this:\n\nWhat version of prawn are you running? Does the exception only happen\nin rails or can you reproduce it in a standalone script?\n\nA short script that reproduces the error would be very very helpful.\n\nJames\n. I'm pretty sure this is a bug in jruby's String#unpack method. It should be fixed on master, thanks for providing the necessary detail to track it down\n. try adding this to your Gemfile:\n\ngem 'prawn', :git => \"https://github.com/sandal/prawn.git\"\n. What do you think @bradediger  ?\n. agreed\n. Thanks for the bug report. A script that reproduces the error would definitely help understand what's causing it. Do you use templates at all? There's a strong chance they could be at fault.\n\nGenerally the Kids array is initialized here: https://github.com/prawnpdf/prawn/blob/master/lib/prawn/core/object_store.rb#L30, although that changes of a template file is used.\n\nIf you grep the code base like so, you can see the 4-5 places the Kids array is mutated.\n\n```\ngit grep :Kids\n```\n. done!\n. Thanks for the detailed report. I've confirmed this is still an issue on master and will try to look into it soon.\n. Thanks for this report, this seems to be fixed on master.\n. 0xAD is a soft hyphen in iso-8859-1. Prawn only supports utf-8, so you will need to convert the string to utf-8 before passing it to prawn.\n. You need to work out how an iso-8859-1 string is ending up in your app and fix that. 'ASCII-8BIT' is not utf-8 compatible, so I'd look for the source of that string. Database drivers as a common culprit.\n\nObviously we don't know what your code looks like, so it's hard to say where to start looking. In any case, this ticket isn't really the place to get support on encoding issues in ruby.\n. Thanks for your work on this, sorry it took us so long to look at it.\n\nIf you'd still like to work on merging this, I've got a few questions about the changes.\n. thanks for the detailed bug report, I've confirmed it still seems to affect master.\n\nWhat do you think @bradediger ?\n. What do you think @bradediger ?\n. Sure, I'll look into how significant the merge conflicts are\n. The only merge conflict was in the manual for tables. Easily fixed!\n. Confirmed this still occurs on master, however the fix is just a small change to the sample script. In the arrow_line function, \"pdf.line\" should be \"pdf.stroke_line\".\n\nThanks for the report!\n. The use of pdf.line is wrong.\n. Thanks for the report, sorry it's taken so long for someone to look at it.\n\nUnfortunately I can think of several ways this can happen and it's hard to diagnose without the template PDF.\n\nI have some ideas for improving the robustness of our template support, so I'll leave this ticket open until I see how my ideas go. \n\nThanks!\n. @jonsgreen Can you help on this issue?\n. I feel that raising an exception if a transparent PNG is provided would be\nan exceedingly poor user experience.\n\nImagine the support requests that will generate on the mailing list.\nOn 14/12/2013 7:28 AM, \"Gregory Brown\" notifications@github.com wrote:\n\n> @cheba https://github.com/cheba: It would raise an exception. We have a\n> very easy place to put this, directly where we split alpha channels.\n> \n> The argument @MarkDBlackwell https://github.com/MarkDBlackwell is\n> making is that support for PNG with transparency in Prawn is effectively\n> broken due to its efficiency issues, even if it is not technically\n> incorrect. I'm not sure that I'd go to that extreme, but I definitely think\n> of it as being a feature that is problematic.\n> \n> What we are trying to figure out is the best possible user experience,\n> while keeping our constraints in mind. In my view, being explicit is better\n> than being implicit, and giving feedback early is better than later. A\n> warning could do this, but forcing to set a variable would allow us to be\n> _certain_ the user understood the potential problems, and also alert them\n> to an alternative solution.\n> \n> The thing we need to remember when working on this library is no one is\n> going to care about why there are all the technical reasons for our\n> inefficiency, they're just going to see memory spikes and slowdown and be\n> frustrated by them. We should fix these issues where we can, and do better\n> with communication where we cannot.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/prawnpdf/prawn/issues/324#issuecomment-30541093\n> .\n. I'll be the first to admit our transparent PNG code isn't ideal.\n\nTo be honest, I think I cargo culted a lot of it in the very early days of\nprawn and there's almost certainly a way to rewrite it to:\n\na) be more readable and maintainable\nb) create less GC pressure\n\nUnfortunately I don't have any spare time at the moment, but I'd much\nprefer optimisations are explored before we start raising exceptions to\nusers.\n\nOn 14 December 2013 08:10, Gregory Brown notifications@github.com wrote:\n\n> @cheba https://github.com/cheba: Thanks! It'll be great for us to take\n> a more quantitative approach to problems like these, so we can make better\n> informed decisions.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/prawnpdf/prawn/issues/324#issuecomment-30543860\n> .\n. The problem with raising an exception is that some users will love it, some\nwill hate it.\n\nWe have a large users base and can't predict what will be best for everyone.\n\nIf raising an exception is the path we take, I'd strongly prefer it to be a\nconfigurable option that is _off_ by default.\n\nA few years back I experimented with using chunky_png. We talked about it\non the mailing list:\n\n```\nhttps://groups.google.com/d/topic/prawn-ruby/uTceW0R1IyA/discussion\n```\n\nUnfortunately at the time I didn't measure changes to object allocations or\nmemory usage, but that work might provide a useful starting point for some\nfurther research.\n\nOn 14 December 2013 08:26, Gregory Brown notifications@github.com wrote:\n\n> @MarkDBlackwell https://github.com/MarkDBlackwell: I totally understand\n> the concern from your perspective, and I feel like there are plenty of\n> users who will end up in similar situations. But I also know that we have a\n> hugely diverse userbase, and so I can't really make claims about what the\n> \"majority\" use case will be.\n> \n> Another option we have here is exception raising behavior that is OFF by\n> default. This could be documented in the manual, would address the use case\n> you mentioned (presenting an error to end users rather than hanging for a\n> long time), and would not introduce a behavior change to Prawn's default\n> behavior.\n> \n> Let's leave all options on the table, start with optimization first, and\n> see where we're at by the next release (not 0.13.0 which will ship Sunday,\n> but 0.14.0 a month from now).\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/prawnpdf/prawn/issues/324#issuecomment-30544858\n> .\n. > For example, this code creates two strings for every single pixel\n\nI think it's actually creating at least 4 strings per pixel. the 2 \"C*\" stings will be re-created on each loop. Thanks past-me.\n. I've just rebased my old chunky_png experiment onto current master. The rebase is a bit rough, I'd want to clean it up before opening a pull request but it's useful as a quick experiment.\n\nHere's the diff: https://github.com/prawnpdf/prawn/compare/master...chunky_png\n\nHere's a script I used to check object allocations on MRI 2.0.0p353\n\n```\n$LOAD_PATH.unshift(File.join(File.dirname(__FILE__), '..', 'lib'))\nrequire \"prawn\"\n\nGC.disable\n\nbefore = GC.stat\n\nPrawn::Document.new do\n  image \"#{Prawn::DATADIR}/images/dice.png\"\nend.render\n\nafter = GC.stat\ntotal = after[:total_allocated_object] - before[:total_allocated_object]\n\nputs \"allocated objects: #{total}\"\n```\n\nHere's the output on master:\n\n```\n\u26a1 ruby bench/png_type_6_objects.rb\nallocated objects: 541656\n```\n\nHere's the output on the chunky_png branch:\n\n```\n\u26a1 ruby bench/png_type_6_objects.rb\nallocated objects: 13853\n```\n\nI haven't benchmarked speed changes. It might be slower on PNGs with no alpha channel.\n\nI used the following script to visually check various PNGs render correctly:\n\n```\n$LOAD_PATH.unshift(File.join(File.dirname(__FILE__), 'lib'))\nrequire \"prawn\"\n\nimages = [\n      [\"Type 0\", \"#{Prawn::BASEDIR}/data/images/web-links.png\"],\n      [\"Type 2\", \"#{Prawn::BASEDIR}/data/images/ruport.png\"],\n      [\"Type 3\", \"#{Prawn::BASEDIR}/data/images/indexed_color.png\"],\n      [\"Type 4\", \"#{Prawn::BASEDIR}/data/images/page_white_text.png\"],\n      [\"Type 6\", \"#{Prawn::BASEDIR}/data/images/dice.png\"],\n]\n\nPrawn::Document.generate(\"png_types.pdf\", :page_size => \"A5\") do\n  images.each do |header, file|\n    start_new_page unless header.include?(\"0\")\n    text header \n    image file, :at => [50,450]\n  end \nend\n```\n. Interesting. How are you tracking peak memory usage?\n. I'm out of my depth on licensing issues. Why can't we all just agree to get along? :)\n\nWhat do you think guys?\n. Thanks for the report.\n\nissue #407 appears to be reporting this same issue and has some discussion. I'll close this issue in favour of that one.\n. Sorry we didn't get a chance to look into this for you. \n\nIf anyone else comes across this issue and can provide a short script that reproduces it, we'll be happy to investigate further. Thanks!\n. I've confirmed this is still happening on master. what do you think @bradediger ?\n. Confirmed this still happens on master. What do you think @bradediger ?\n. Hi, thanks for the report. Can you provide any further details? A short script that demonstrates the issue would be useful.\n. Thanks for contacting us. Please use the prawn google group / mailing list to ask questions, thanks!\n. I've confirmed this is a bug. I have some ideas for improving the robustness of our template support, o I'll leave this issue open until I see if they work.\n. I think this is a horrible thing to do to the user of the generated PDF, but the patch is clean so I have no issue with merging it if the others agree.\n. I'll close this issue for lack of activity. If you can provide a small script that reproduces the issue, please feel free to re-open the report!\n. Thanks for the report, we're slowly working towards another release. I'll close this issue to keep all the discussion on #380\n. Thanks for the report Michael.\n\nJust to clarify - are you saying that the hyphens on the final line of the first column aren't being rendered?\n\nI just tested this against prawn master and I can't reproduce it. I'll close the issue for now, but if you're able to provide more information please feel free to re-open it!\n. Hi,\n\nSorry we never provided feedback on this, our time for prawn has been slim recently. I can't speak for the other prawn maintainers, but my feeling is adding this to the official gem in the near future will slow us down in releasing 1.0. un that's released, our focus is on stablising the API and fixing bugs.\n\nI suggest we leave this issue open as a wishlist though. thanks!\n. Closing this due to a lack of activity. @jcoleman, if you'd like to tweak the patch as suggested by @daniel-nelson then please re-open the pull request.\n. The sample code works fine with MRI 1.9.3p194 on my linux machine.\n\nThe path to your ruby install (/Programs/Ruby/1.9.3p194/lib/ruby/site_ruby/1.9.1/x/STD/CORE/array.rb) looks a little odd. How was your ruby installed?\n. I've had a go at fixing this is 0ceab27.\n\n@bradediger @Bluejade you guys are more familiar with the font related code, is my fix ok?\n. A string with \\216 in it has no business being marked as anything but binary, so the behavior on 1.9.3p0 sounds like a bug in prawn to me. Best to leave the spec failing on 1.9.3p0 for now.\n. Closing this spec, the fix has been on master for a while\n. Hi Rob,\n\nThanks for the report. When I open the sample pdf on my system (in evince and Acrobat X) it has a yellow heading, white type and a black background. Is that correct?\n\nUnfortunately I don't have illustrator handy at the moment, but I'd like to clarify the issue first.\n. Hi Samant,\n\nPrawn has limited support for rtl text. Unfortunately none of the current developers can speak arabic, so it's difficult to work on. We will consider any pull requests that improve the situation and include tests, but otherwise it's beyond our abilities to fix in the short term.\n. Hi Jeff,\n\nSorry for taking so long to look at this. Were you able to solve it? If not, can you provide a short script that reproduces the issue?\n. I agree that this would definitely need to be an addition to the API - not all users want the template to apply to new pages automatically.\n. Thanks for the suggestion. \n\nI suggest we leave this out for now in an effort to stabilise the API and get a 1.0 release out the door, however I'll leave the issue open as a wishlist for post 1.0.\n. I've confirmed this is a bug, here's the stack trace using the provided template PDF\n\n```\n\u26a1 ruby -Ilib manual/templates/full_template.rb\n    /home/jh/git/prawn-rw/lib/prawn/core/page.rb:38:in `layout': undefined method `[]' for nil:NilClass (NoMethodError)\n    from /home/jh/git/prawn-rw/lib/prawn/document.rb:253:in `start_new_page'\n    from manual/templates/full_template.rb:19:in `block in <main>'\n    from /home/jh/git/prawn-rw/lib/prawn/document.rb:215:in `instance_eval'\n    from /home/jh/git/prawn-rw/lib/prawn/document.rb:215:in `initialize'\n    from /home/jh/git/prawn-rw/lib/prawn/document.rb:122:in `new'\n    from /home/jh/git/prawn-rw/lib/prawn/document.rb:122:in `generate'\n    from manual/templates/full_template.rb:16:in `<main>'\n```\n\nThe template PDF defines it's MediaBox in the /Pages tree above the /Page, not on the /Page itself. it's perfectly legal for the PDF to do that, so we need to account for it.\n\nI have an idea that should help and will hopefully be able to look at it soon.\n. Thanks for the report. I just tested with the latest prawn and xpdf 3.03-10 in debian and couldn't reproduce it.\n\nI'll close the issue for now, but please re-open it if you have further information.\n. I think the template must be setting some state in a way prawn doesn't support. I have an idea for how to fix our template code to help and I'll try to look into it.\n\nThanks for the report.\n. My preference is not to depend on RVM or rbenv. I use neither on my systems, and I'd prefer not to add them.\n\nCan we use on travis for testing across multiple VMs? I use it to ensure pdf-reader runs on {MRI/jruby/rubinius} in 1.8 and 1.9 modes.\n. travis does mean that I'm generally runinng the tests locally against MRI 1.9.3 and then only after pushing to github do I find the specs are broken on another VM. In practice I haven't found that to be an issue.\n. I've added prawn to travis-ci as a trial, you can see it at http://travis-ci.org/#!/prawnpdf/prawn\n. +1\n\nI'm on holidays at the moment and have some time up my sleeve. If everyone agrees with the suggestion, I'm happy to complete this.\n. Done. Travis shows us red on rbx 1.9 and jruby 1.9, green on everything else.\n. I've removed rbx1.9 from the travis targets for now as rbx is a moving target.\n\njruby1.9 is still failing with what seem like legitimate encoding failures, although I'm not sure why they don't occur on MRI. A job for another day.\n. Which error are you looking at? I'm looking at the encoding errors at http://travis-ci.org/#!/prawnpdf/prawn/jobs/2551473\n. On 25 September 2012 13:55, Alex Dowad notifications@github.com wrote:\n\n> James, rather than telling Travis to test against \"jruby-19mode\", can we\n> specify a specific version of JRuby? Otherwise, every time they release a\n> new version, it may break the Prawn build. If a specific version of JRuby\n> (and Rubinius, etc) can be specified in .travis.yml, then the Prawn team\n> can decide when to \"bump\" the supported versions of JRuby/rbx/etc.\n\nI'm not 100%, but I think you can only request jruby in \"1.8 mode\" or \"1.9\nmode\", not the specific version.\n\nJames\n. Please use the prawn mailing list for questions on how to solve specific issues like this.\n. .. and pdf-reader depends on Matrix from the standard lib.\n\nJames\nOn 20/09/2012 6:58 PM, \"Brad Ediger\" notifications@github.com wrote:\n\n> Matrix is a class in the Ruby standard library:\n> \n> http://www.ruby-doc.org/stdlib-1.9.3/libdoc/matrix/rdoc/Matrix.html\n> \n> It's probably not a great idea to have an ActiveRecord model with the same\n> name, as this has the potential to cause conflicts with any library that\n> depends on Matrix.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/prawnpdf/prawn/issues/403#issuecomment-8739774.\n. @paulcc that's a nice solution.\n\nI also have a branch [1] that allows PDF pages to be imported via the #image() method (like PNGs and JPGs). I had planned to work on merging it upstream once prawn 1.0 ships.\n\n[1] https://github.com/yob/prawn/tree/pdf_images\n. In general I think we could improve our color support (and CMYK in particular) but since this specific issues seems fixed I'll close it for now.\n\nPlease re-open the issue if it's not resolved.\n. Thanks for the suggestion, but it seems unlikely we'll support this use case. It'd be a significant departure from the current API for Prawn::Document.\n. Thanks for the report. Are you able to provide a short script that demonstrates the issue?\n. I ran some tests on this and seem to observe the leak you do. Unfortunately I'm not that experienced at tracking these things down so I ran into a brick wall.\n\nHopefully I'll get some inspiration after some sleep. @bradediger do you have any thoughts on where I could look?\n. Here's the testing script I was using. I'm far from an expert in the semantics of when ruby will allow an object to be garbage collected, but my theory was by scoping the work to a method then the objects should be free for GC when they go out of scope.\n\n```\n\u26a1 cat foo.rb \nrequire 'prawn'\n\ndef somework\n  pdf = Prawn::Document.new\n  pdf.table([[\"Some text\"]] * 100)\n  pdf.render\nend\n\n5000.times do\n  $stdout.write \".\"\n  GC.start\n  somework\nend\n```\n\nI was running from within the prawn repo with this command on jruby 1.7.1:\n\n```\njruby -Ilib foo.rb\n```\n\n... and here is the heap graph from visualvm\n\n![one.png](https://f.cloud.github.com/assets/8132/4581/7230abb8-4318-11e2-9617-bd6fdb1b1168.png)\n. Here's a slight tweak to the script so it returns nil from the method:\n\n```\n\u26a1 cat foo.rb\nrequire 'prawn'\n\ndef somework\n  pdf = Prawn::Document.new\n  pdf.table([[\"Some text\"]] * 100)\n  pdf.render\n  nil\nend\n\n5000.times do\n  $stdout.write \".\"\n  GC.start\n  somework\nend\n```\n\n.. and the heap graph\n![return_nil_512mb_heap.png](https://f.cloud.github.com/assets/8132/4677/56035784-431c-11e2-8ba0-9a67daf542e3.png)\n. My scripts are using the AFM fonts, so that would seem to rule out TTFunk. Maybe we have multiple leaks?\n. Sorry for the spam. here's another test case. I removed the tables call and just created a document with ~3 pages of AFM text.\n\n```\n\u26a1 cat foo.rb\nrequire 'prawn'\n\ndef somework\n  pdf = Prawn::Document.new\n  pdf.text \"hello world\\n\" * 150\n  pdf.render\n  nil\nend\n\n10000.times do\n  $stdout.write \".\"\n  GC.start\n  somework\nend\n```\n\nThe heap graph is much closer to what we want to see:\n![text_return_nil_512mb_heap.png](https://f.cloud.github.com/assets/8132/4734/8ea9f19e-431f-11e2-93a7-f44eab04d4d7.png)\n. @bradediger can you test this process on your system?\n\n1) create this test script:\n\n```\n\u26a1 cat foo.rb\nrequire 'prawn'\n\ndef somework\n  pdf = Prawn::Document.new\n  pdf.table([[\"Some text\"]] * 20)\n  pdf.render\n  nil\nend\n\n2_000_000.times do\n  $stdout.write \".\"\n  GC.start\n  somework\nend\n```\n\n2) run it with MRI 1.9.1\n\n```\nruby -Ilib foo.rb\n```\n\n3) locate the PID of the ruby process and then use watch to see what happens to the memory. On my system it creeps upwards.\n\n```\nwatch ps -v -PID_GOES_HERE\n```\n\n4) Apply this patch and repeat the process. With the patch applied on my system, the memory usage remains steady.\n\n```\ndiff --git a/lib/prawn/table/cell.rb b/lib/prawn/table/cell.rb\nindex d2ae66f..abc3ddc 100644\n--- a/lib/prawn/table/cell.rb\n+++ b/lib/prawn/table/cell.rb\n@@ -79,6 +79,7 @@ module Prawn\n       # Min-width of the span divided by the number of columns.\n       #\n       def avg_spanned_min_width\n+        return 10\n         min_width.to_f / colspan\n      end\n\n@@ -86,6 +87,7 @@ module Prawn\n       # its column.\n       #\n       def max_width_ignoring_span\n+        return 200\n          set_width_constraints\n         @max_width\n       end\n```\n. fine with me. @bradediger - what do you think?\n. I've merged master into this branch so it's still a clean merge.\n\n@sandal @jonsgreen @Bluejade How do you guys feel about switching to rspec? I'm aware it's not everyone's favourite testing framework (new methods on Object, yah!), however I feel that a green build on jruby and ruby2.0.0 is a big win.\n. Although I'm more familiar with rspec, I'd be happy with a move to minitest other than the significant amount of extra work to prepare the initial transition.\n\nSince there seems to be consensus that rspec is an improvement over test-spec I suggest we switch to rspec for now. We're all pressed for time, so some improvement is better than the current situation.\n. I also like to keep dependencies low, however given the amount of time we\nall have for prawn I felt a reduced code surface might help.\n\nJust an idea I thought I'd float, obviously it's a small commit that didn't\ntake much time :)\nOn 07/12/2012 2:56 PM, \"Brad Ediger\" notifications@github.com wrote:\n\n> [image: :+1:] from me, but I'd like to hear @sandalhttps://github.com/sandal's\n> opinion as well. I wrote the RC4 implementation because he wanted to\n> minimize external dependencies.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/prawnpdf/prawn/pull/426#issuecomment-11130657.\n. OK, I've merged this into master.\n. I've also merged this into master, thanks for the review!\n. I'd like to see the whitespace changes removed from the PR. Generally I'm all for stripping trailing whitespace, but given how much of it is in the prawn code I think it's better the keep this PR focused on the core issue it's addressing.\n. Also, is there a way to just remove the thread local cache all together?\n\nThe Font objects maintain a pointer to the Prawn::Document, so I think by caching them in thread local variables means the Prawn::Document's won't be GC'd.\n. I haven't proven this theory yet, but have I missed anything?\n\n1) When a font is first used in a thread, it will add an entry to cache\n2) The cache key is the font that references a the Prawn::Document\n3) Subsequent documents that use the same font will used the cached values\n4) The first Font and Prawn::Document will never be GCd\n5) Subsequent Fonts and Prawn::Document's will be available for GC when they go out of scope\n\nThis PR fixes #3, so the leak is massively reduced, but #4 means that we will still be creating some objects that never get GCd.\n\nHow bad is the performance hit if we change the cache to by scoped to the Prawn::Document? My strong preference would be to be good citizens and allow all our objects to be GCd when each document is finished, including the first document.\n\nThanks for all your work on this @kennethkalmer !\n. I've added a comment to the gist with benchmark results on my system.\n\nI think caching the width operation is worthwhile, and I like your idea of\nmoving the cache into Prawn::Document#width_of.\n\nCould you try removing the thread local cache from Cell::Text, adding a\nregular instance variable cache to Prawn::Document#width_of and\nbenchmarking how low it takes to render a medium sized table on master vs\nyour branch?\n\nJames\n\nOn 13 December 2012 23:23, Kenneth Kalmer notifications@github.com wrote:\n\n> I think @yob https://github.com/yob nailed it with the plan of action.\n> Digging through the path a bit more it seems that we could possibly\n> implement a caching strategy in Prawn::Document#width_of (\n> https://github.com/prawnpdf/prawn/blob/master/lib/prawn/font.rb#L219)\n> that could benefit the document as a whole.\n> \n> However, I did a simple benchmark (which might be completely wrong), the\n> results are in this gist https://gist.github.com/4281051 and they show\n> almost no benefit. In fact, in jruby going via the cache is slower [image:\n> :question:]\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/prawnpdf/prawn/pull/430#issuecomment-11358415.\n. I'd defer to @bradediger if he has an opinion, however I feel that if we ever want to get 1.0.0 released we need to avoid API changes if possible.\n\nHow about breaking Document#width_of into two private methods with their own caches, and Document#width_of just delegates to them?\n. I say go for (1) and (3) and then lets review what the code looks like. If moving it to another file feels cleaner, we can do it.\n\nI can see how a LRU strategy might be needed, but let's fix the memory leak issue first, merge it, then re-visit LRU if we need to.\n. Looks  great. here's a little hack I used to confirm the leak is fixed:\n\n```\nrequire 'prawn'\n\ndef somework\n  pdf = Prawn::Document.new\n  pdf.table([[\"Some text\"]] * 20)\n  pdf.render\nend\n\ndef count_prawn_docs_in_objectspace\n  count = 0\n  ObjectSpace.each_object(Prawn::Document) { |o| count += 1}\n  count\nend\n\n10.times do\n  GC.start\n  puts count_prawn_docs_in_objectspace\n  somework\nend\n```\n\nOn master, the output is:\n\n```\n\u26a1 ruby -Ilib foo.rb   \n0\n1\n2 \n3\n4\n5\n6\n7\n8\n9\n```\n\n.. and on this PR:\n\n```\n\u26a1 ruby -Ilib foo.rb             \n0\n0\n0\n0\n0\n0  \n0\n0\n0\n0\n```\n\nI'd like to see a few quick specs for the FontCache and Brad's suggestion about not reopening Document, then merge it!\n. The AsciiHex and Ascii85 filter aren't used anywhere in the code base. I'm not keen on adding extra code that isn't used.\n\nI like this change in general and like that we can add the extra filter types if we ever need them. Maybe we should merge this work minus the unused filters?\n. Nope. It looks good to me, but I'll leave it to Brad to merge if he's happy.\n. We already support 1.8, so I'd suggest we try and release 1.0 with MRI1.8 support and then consider supporting >= 1.9 for the following non-bugfix release.\n. I wouldn't have any issue with releasing 1.0 with ruby {1.8,1.9,2.0} support and 1.1 with {1.9,2.0} support. For me, semantic versioning is about managing API stability, not minimum interpreter requirements. As long as we only remove interpreter requirements after a suitable percentage of the community has moved on, I'm happy.\n\nWe could release 1.0, create a 1.0-stable branch and then remove all our hacks for 1.8 support from master.\n. the built in fonts require utf-8 encoded text, however at this stage they only really support the iso-8859-1 character set.\n\nprawn could be improved to support more characters using an encoding difference table, but so far there hasn't been much demand. If you're interested in working on this let me know and I can offer some support.\n. If I'm reading the diff correctly it's just searching for a :MediaBox entry anywhere in the file and using that?\n\nThat will work fine for most PDFs with consistent page sizes, but only through luck. \n\nPage objects are leaf nodes in a tree of Pages objects, and walking up the tree until a MediaBox is found is the correct thing to do.\n. Am I reading the diff wrong? It looks like it replaces the search up the tree with a \"select any MediaBox from the document\" search.\n\nAre you certain the PDF you're trying to use as a template has no MediaBox, even in the parent Pages objects? That's quite rare, but I guess possible.\n. Missing a MediaBox is against the spec, but Adobe Acrobat allows it and assumes the MediaBox is 0,0,612,792  (US Letter).\n\nI think we should keep the inheritance of page attributes as per the spec and assume US Letter in the very rare case that a PDF without a MediaBox is used as a template.\n. I agree with @bradediger - distributing the TTF fonts is probably an artifact of the early days of the project and needing example fonts+code. We can probably find a way to get rid of them safely.\n\nThe AFM metrics are key though and must be kept. On linux system the same data is probably available from another package, but relying on that is too system specific for a pure ruby gem.\n. I like this idea. It'd make my personal fork that implements PDF image support unnecessary.\n\nI'll defer to @bradediger and @sandal on this, but my preference would be for the image handlers to register themselves with prawn rather than have prawn introspect the Prawn::Images namespace. External code that implements a new image format shouldn't have to live in the the Prawn::Image namespace.\n. Yup, prawn never messes with real resolution of the image. We just fit the\npixels into the requested space on the page.\n\nThat does mean it's possible for users to embded an image with a low DPI\nwithout realising it though.\n\nIt'd be nice if we could find a way to tweak the API to guide users that\nneed to embed images with a certain DPI, but I can't think of anything off\nthe top of my head.\n\nOn 14 December 2013 08:08, ayghor notifications@github.com wrote:\n\n> Teh problem was with my pdf reader, xpdf. Firefox's renderer is displaying\n> stuff nicely.\n> \n> After looking at teh horrid output from xpdf, I thought Prawn was\n> resampling my image, like ghostscript, to better fit into a specific\n> medium. I was wrong. I extracted teh jpeg stream from a generated pdf file\n> and diffed with teh original image, and they are equal.\n> \n> As long as it doesn't mess with teh real resolution, teh choice of teh\n> point size is just a matter of taste, and I would go for 1/72 in.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/prawnpdf/prawn/issues/598#issuecomment-30543710\n> .\n. Are you measuring jruby memory usage using activity monitor or similar?\n\nI'm no JVM expert, but I seem to recall it can allocate itself a large heap\nspace and is often reluctant to return memory to the OS. We might need to\nfind a more sophisticated way to measure memory usage on jruby.\nOn 17/12/2013 2:25 AM, \"Alexander Mankuta\" notifications@github.com wrote:\n\n> JRuby 1.7.8 seem to be broken.\n> \n> JRuby 1.7.9 is much faster. On the other hand, 1.7.9 is inconsistent\n> between runs on memory side. Sometimes it's 230MB and sometimes it's over\n> 400MB. It's hard to get any meaningful improvement (or otherwise) ratios.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/prawnpdf/prawn/pull/600#issuecomment-30668729\n> .\n. If possible I'd say it's worth using the AFM gem. Prawn is big enough as it\nis.\n\nI've got 2 weeks holidays staring today, i'm happy to try and get more\nchanges included into AFM upstream.\nOn 20/12/2013 3:17 AM, \"Gregory Brown\" notifications@github.com wrote:\n\n> Also worth noting: Not one of @yob https://github.com/yob's accepted\n> pull requests have been released in the gem yet -- the last gem release was\n> in 2010.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/prawnpdf/prawn/pull/607#issuecomment-30941871\n> .\n. :+1:\nOn 04/01/2014 6:59 PM, \"Micha\u00ebl Witrant\" notifications@github.com wrote:\n\n> [image: :+1:]\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/prawnpdf/prawn/issues/625#issuecomment-31573772\n> .\n. On 14 Oct 2014 20:39, \"Burkhard Vogel\" notifications@github.com wrote:\n\n> It's Adobe that sets the standard - I have no insights how Google\n> interprets it. My suggestion, just try and see whats happening (and maybe\n> report back)\n\nprawn-print is implemented using javascript, which is an official part of\nthe PDF spec. However, other than acrobat, most (all?) PDF renders ignore\nthe js.\n\nIrritating for this use case, but on the bright side there's an entire\nclass of security issues that are bypassed.\n\nJames\n. Couldn't help myself and had to comment on this PR - great research, and awesome PR description \ud83d\ude00\n. I've attempted to answer this on [stack overflow](http://stackoverflow.com/questions/40651362/how-do-i-change-font-in-prawn/40666967)\n. I've fixed this in my png_fixes branch, plus add some new specs\n. I'd imagine replacing Prawn::Images::PNG with a RMagick based version shouldn't be too hard. It's not like it does much.\n\nI'm not sure how Greg feels, but I think that'd be great as an optional prawn plugin. I'd be keen to keep mainline prawn pure ruby if possible. I use c extensions in projects, but sometimes it's nice to be able to weight up the various pros and cons.\n\nie. faster and more format support vs. possible memory issues and reduced platform compatibility.\n. Oh, in that case, sweet! :)\n. Only unfilter PNG files _after_ we check for compatible types (Closed by 1f6b2fee15b88c459b0476ed54b33cdb05ae0b35)\n. Funny timing, just last week I fixed an issue in pdf-reader that allows it to recognise PDF names that have spaces in them.\n\nSpaces are allowed, but they have to be encoded as #20 (hash +ascii hex code). The fix for this should just be a quick spec+patch to PdfObject\n. oh, or a change to ttfunk that strips spaces from the font name would work too.\n. James - I've updated prawns conversion of symbols to PDF names to support white space (and other delimiters) is 4c1d341. I don't have a font file with spaces handy, can you try it out and let me know if there's any difference?\n. avoid clashes in font names when adding fonts to a document using templates\n- when picking an identifier for a font, check if that identifier is\n  already used on the page\n- if it is, increment a counter and try again\n- closed by d6912cd077808e847917c1980ed5fad15557ea76\n. Thanks for the report. A fork is probably best, it ensures credit goes where credit is due.\n\nIf possible, a failing spec in spec/templates_spec.rb would be handy as well.\n. Cheers! Will review it and merge shortly\n. Support for pantone colours has come up before. I'm personally interested in learning how they work, but my colour theory foo is weak. I should also finish the other template related tickets that are outstanding first.\n\nI should be through my current \"no free time\" patch in a month or two. If you still need pantone support then, ping me and I'd be happy to work on it if you can help me understand some of the terminology and such.\n. Fix templating of pages with an inherited MediaBox entry\n- thanks to takahashim for reporting\n- closed by 41b56e8595cf10c7d6c63ce38c7aabfc0aef6942\n. Greg or Brad - can you add me as an admin to the ttfunk repo?\n. This is mostly finished and all tests remain green on 1.8.7 and 1.9.2.\n\nRemaining jobs:\n- polish ttfunk gem (minimum: clean up readme and licensing) and publish to rubygems.org\n- merge my ttfunk fork into sandal/ttfunk\n- polish pdf-inspector gem (minimum: clean up readme and licensing) and publish to rubygems.org\n- remove :git references from Gemfile in prawn\n. I'm off on 4 weeks holiday in about 6 hours, so I'll have to leave completing this ticket for someone else.\n\nI'll have no laptop and sporadic net access until the 28th Feb. Good luck!\n. Only three remaining jobs:\n\n```\n* polish ttfunk gem (minimum: clean up readme and licensing) and publish to rubygems.org\n* polish pdf-inspector gem (minimum: clean up readme and licensing) and publish to rubygems.org\n* remove :git references from Gemfile in prawn\n```\n. Raw image data can be passed in by wrapping the data in a StringIO.\n\nNot very intuitive maybe, but is it enough? Maybe we can improve the doc and/or manual around this?\n. this isn't a prawn related issue, \"view_renderer\" doesn't appear in the prawn codebase.\n. Thanks for the report, I'll close this in favour of #375 as there's more discussion there.\n. I'll look into this. I'm hoping I can transparently refactor pdf-inspector to work with the new pdf-reader API.\n\nRe-writing the prawn specs to use pdf-reader directly will be too much work in the short term.\n. ping @sandal. We're making another attempt to get 1.0 released, do you have time for this or should we just remove the teaser?\n. To help us reproduce the error, can  you try and put together a simple script that exhibits the same issue?\n. As short as it can be whilst still triggering the exception you're seeing. With the level of detail you've provided so far I doubt we'll be able to find and fix the issue.\n. Yep, a stack trace would also help.\n\nOn 3 October 2011 20:42, Gerhardk\nreply@reply.github.com\nwrote:\n\n> Well i'm no good with scripts I ran into this error in the web browser will the stack trace be of any help?\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/sandal/prawn/issues/283#issuecomment-2270370\n. Thanks for the extra info.\n\nOn 24 October 2011 07:35, Brian Maddy\nreply@reply.github.com\nwrote:\n\n> We ran into this issue also, but with jRuby 1.6.1 (ruby 1.9.2) and rails 3.0.9 on osx and Ubuntu.\n> \n> It turns out that Prawn inserts some metadata into the pdf documents--specifically,\n>  the document creator and producer. That looks like it might be what's causing this\n> to crash. The \"Prawn\" string is passed to the Prawn::Core::PdfObject method. Inside\n> this method it converts \"Prawn\" into utf16 with Prawn::Core::utf8_to_utf16 because it's\n> not part of the document's main content. It then concatenates that with a normal ruby\n> string which blows up. It's basically doing this:\n\nWhat version of prawn are you running? Does the exception only happen\nin rails or can you reproduce it in a standalone script?\n\nA short script that reproduces the error would be very very helpful.\n\nJames\n. I'm pretty sure this is a bug in jruby's String#unpack method. It should be fixed on master, thanks for providing the necessary detail to track it down\n. try adding this to your Gemfile:\n\ngem 'prawn', :git => \"https://github.com/sandal/prawn.git\"\n. What do you think @bradediger  ?\n. agreed\n. Thanks for the bug report. A script that reproduces the error would definitely help understand what's causing it. Do you use templates at all? There's a strong chance they could be at fault.\n\nGenerally the Kids array is initialized here: https://github.com/prawnpdf/prawn/blob/master/lib/prawn/core/object_store.rb#L30, although that changes of a template file is used.\n\nIf you grep the code base like so, you can see the 4-5 places the Kids array is mutated.\n\n```\ngit grep :Kids\n```\n. done!\n. Thanks for the detailed report. I've confirmed this is still an issue on master and will try to look into it soon.\n. Thanks for this report, this seems to be fixed on master.\n. 0xAD is a soft hyphen in iso-8859-1. Prawn only supports utf-8, so you will need to convert the string to utf-8 before passing it to prawn.\n. You need to work out how an iso-8859-1 string is ending up in your app and fix that. 'ASCII-8BIT' is not utf-8 compatible, so I'd look for the source of that string. Database drivers as a common culprit.\n\nObviously we don't know what your code looks like, so it's hard to say where to start looking. In any case, this ticket isn't really the place to get support on encoding issues in ruby.\n. Thanks for your work on this, sorry it took us so long to look at it.\n\nIf you'd still like to work on merging this, I've got a few questions about the changes.\n. thanks for the detailed bug report, I've confirmed it still seems to affect master.\n\nWhat do you think @bradediger ?\n. What do you think @bradediger ?\n. Sure, I'll look into how significant the merge conflicts are\n. The only merge conflict was in the manual for tables. Easily fixed!\n. Confirmed this still occurs on master, however the fix is just a small change to the sample script. In the arrow_line function, \"pdf.line\" should be \"pdf.stroke_line\".\n\nThanks for the report!\n. The use of pdf.line is wrong.\n. Thanks for the report, sorry it's taken so long for someone to look at it.\n\nUnfortunately I can think of several ways this can happen and it's hard to diagnose without the template PDF.\n\nI have some ideas for improving the robustness of our template support, so I'll leave this ticket open until I see how my ideas go. \n\nThanks!\n. @jonsgreen Can you help on this issue?\n. I feel that raising an exception if a transparent PNG is provided would be\nan exceedingly poor user experience.\n\nImagine the support requests that will generate on the mailing list.\nOn 14/12/2013 7:28 AM, \"Gregory Brown\" notifications@github.com wrote:\n\n> @cheba https://github.com/cheba: It would raise an exception. We have a\n> very easy place to put this, directly where we split alpha channels.\n> \n> The argument @MarkDBlackwell https://github.com/MarkDBlackwell is\n> making is that support for PNG with transparency in Prawn is effectively\n> broken due to its efficiency issues, even if it is not technically\n> incorrect. I'm not sure that I'd go to that extreme, but I definitely think\n> of it as being a feature that is problematic.\n> \n> What we are trying to figure out is the best possible user experience,\n> while keeping our constraints in mind. In my view, being explicit is better\n> than being implicit, and giving feedback early is better than later. A\n> warning could do this, but forcing to set a variable would allow us to be\n> _certain_ the user understood the potential problems, and also alert them\n> to an alternative solution.\n> \n> The thing we need to remember when working on this library is no one is\n> going to care about why there are all the technical reasons for our\n> inefficiency, they're just going to see memory spikes and slowdown and be\n> frustrated by them. We should fix these issues where we can, and do better\n> with communication where we cannot.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/prawnpdf/prawn/issues/324#issuecomment-30541093\n> .\n. I'll be the first to admit our transparent PNG code isn't ideal.\n\nTo be honest, I think I cargo culted a lot of it in the very early days of\nprawn and there's almost certainly a way to rewrite it to:\n\na) be more readable and maintainable\nb) create less GC pressure\n\nUnfortunately I don't have any spare time at the moment, but I'd much\nprefer optimisations are explored before we start raising exceptions to\nusers.\n\nOn 14 December 2013 08:10, Gregory Brown notifications@github.com wrote:\n\n> @cheba https://github.com/cheba: Thanks! It'll be great for us to take\n> a more quantitative approach to problems like these, so we can make better\n> informed decisions.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/prawnpdf/prawn/issues/324#issuecomment-30543860\n> .\n. The problem with raising an exception is that some users will love it, some\nwill hate it.\n\nWe have a large users base and can't predict what will be best for everyone.\n\nIf raising an exception is the path we take, I'd strongly prefer it to be a\nconfigurable option that is _off_ by default.\n\nA few years back I experimented with using chunky_png. We talked about it\non the mailing list:\n\n```\nhttps://groups.google.com/d/topic/prawn-ruby/uTceW0R1IyA/discussion\n```\n\nUnfortunately at the time I didn't measure changes to object allocations or\nmemory usage, but that work might provide a useful starting point for some\nfurther research.\n\nOn 14 December 2013 08:26, Gregory Brown notifications@github.com wrote:\n\n> @MarkDBlackwell https://github.com/MarkDBlackwell: I totally understand\n> the concern from your perspective, and I feel like there are plenty of\n> users who will end up in similar situations. But I also know that we have a\n> hugely diverse userbase, and so I can't really make claims about what the\n> \"majority\" use case will be.\n> \n> Another option we have here is exception raising behavior that is OFF by\n> default. This could be documented in the manual, would address the use case\n> you mentioned (presenting an error to end users rather than hanging for a\n> long time), and would not introduce a behavior change to Prawn's default\n> behavior.\n> \n> Let's leave all options on the table, start with optimization first, and\n> see where we're at by the next release (not 0.13.0 which will ship Sunday,\n> but 0.14.0 a month from now).\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/prawnpdf/prawn/issues/324#issuecomment-30544858\n> .\n. > For example, this code creates two strings for every single pixel\n\nI think it's actually creating at least 4 strings per pixel. the 2 \"C*\" stings will be re-created on each loop. Thanks past-me.\n. I've just rebased my old chunky_png experiment onto current master. The rebase is a bit rough, I'd want to clean it up before opening a pull request but it's useful as a quick experiment.\n\nHere's the diff: https://github.com/prawnpdf/prawn/compare/master...chunky_png\n\nHere's a script I used to check object allocations on MRI 2.0.0p353\n\n```\n$LOAD_PATH.unshift(File.join(File.dirname(__FILE__), '..', 'lib'))\nrequire \"prawn\"\n\nGC.disable\n\nbefore = GC.stat\n\nPrawn::Document.new do\n  image \"#{Prawn::DATADIR}/images/dice.png\"\nend.render\n\nafter = GC.stat\ntotal = after[:total_allocated_object] - before[:total_allocated_object]\n\nputs \"allocated objects: #{total}\"\n```\n\nHere's the output on master:\n\n```\n\u26a1 ruby bench/png_type_6_objects.rb\nallocated objects: 541656\n```\n\nHere's the output on the chunky_png branch:\n\n```\n\u26a1 ruby bench/png_type_6_objects.rb\nallocated objects: 13853\n```\n\nI haven't benchmarked speed changes. It might be slower on PNGs with no alpha channel.\n\nI used the following script to visually check various PNGs render correctly:\n\n```\n$LOAD_PATH.unshift(File.join(File.dirname(__FILE__), 'lib'))\nrequire \"prawn\"\n\nimages = [\n      [\"Type 0\", \"#{Prawn::BASEDIR}/data/images/web-links.png\"],\n      [\"Type 2\", \"#{Prawn::BASEDIR}/data/images/ruport.png\"],\n      [\"Type 3\", \"#{Prawn::BASEDIR}/data/images/indexed_color.png\"],\n      [\"Type 4\", \"#{Prawn::BASEDIR}/data/images/page_white_text.png\"],\n      [\"Type 6\", \"#{Prawn::BASEDIR}/data/images/dice.png\"],\n]\n\nPrawn::Document.generate(\"png_types.pdf\", :page_size => \"A5\") do\n  images.each do |header, file|\n    start_new_page unless header.include?(\"0\")\n    text header \n    image file, :at => [50,450]\n  end \nend\n```\n. Interesting. How are you tracking peak memory usage?\n. I'm out of my depth on licensing issues. Why can't we all just agree to get along? :)\n\nWhat do you think guys?\n. Thanks for the report.\n\nissue #407 appears to be reporting this same issue and has some discussion. I'll close this issue in favour of that one.\n. Sorry we didn't get a chance to look into this for you. \n\nIf anyone else comes across this issue and can provide a short script that reproduces it, we'll be happy to investigate further. Thanks!\n. I've confirmed this is still happening on master. what do you think @bradediger ?\n. Confirmed this still happens on master. What do you think @bradediger ?\n. Hi, thanks for the report. Can you provide any further details? A short script that demonstrates the issue would be useful.\n. Thanks for contacting us. Please use the prawn google group / mailing list to ask questions, thanks!\n. I've confirmed this is a bug. I have some ideas for improving the robustness of our template support, o I'll leave this issue open until I see if they work.\n. I think this is a horrible thing to do to the user of the generated PDF, but the patch is clean so I have no issue with merging it if the others agree.\n. I'll close this issue for lack of activity. If you can provide a small script that reproduces the issue, please feel free to re-open the report!\n. Thanks for the report, we're slowly working towards another release. I'll close this issue to keep all the discussion on #380\n. Thanks for the report Michael.\n\nJust to clarify - are you saying that the hyphens on the final line of the first column aren't being rendered?\n\nI just tested this against prawn master and I can't reproduce it. I'll close the issue for now, but if you're able to provide more information please feel free to re-open it!\n. Hi,\n\nSorry we never provided feedback on this, our time for prawn has been slim recently. I can't speak for the other prawn maintainers, but my feeling is adding this to the official gem in the near future will slow us down in releasing 1.0. un that's released, our focus is on stablising the API and fixing bugs.\n\nI suggest we leave this issue open as a wishlist though. thanks!\n. Closing this due to a lack of activity. @jcoleman, if you'd like to tweak the patch as suggested by @daniel-nelson then please re-open the pull request.\n. The sample code works fine with MRI 1.9.3p194 on my linux machine.\n\nThe path to your ruby install (/Programs/Ruby/1.9.3p194/lib/ruby/site_ruby/1.9.1/x/STD/CORE/array.rb) looks a little odd. How was your ruby installed?\n. I've had a go at fixing this is 0ceab27.\n\n@bradediger @Bluejade you guys are more familiar with the font related code, is my fix ok?\n. A string with \\216 in it has no business being marked as anything but binary, so the behavior on 1.9.3p0 sounds like a bug in prawn to me. Best to leave the spec failing on 1.9.3p0 for now.\n. Closing this spec, the fix has been on master for a while\n. Hi Rob,\n\nThanks for the report. When I open the sample pdf on my system (in evince and Acrobat X) it has a yellow heading, white type and a black background. Is that correct?\n\nUnfortunately I don't have illustrator handy at the moment, but I'd like to clarify the issue first.\n. Hi Samant,\n\nPrawn has limited support for rtl text. Unfortunately none of the current developers can speak arabic, so it's difficult to work on. We will consider any pull requests that improve the situation and include tests, but otherwise it's beyond our abilities to fix in the short term.\n. Hi Jeff,\n\nSorry for taking so long to look at this. Were you able to solve it? If not, can you provide a short script that reproduces the issue?\n. I agree that this would definitely need to be an addition to the API - not all users want the template to apply to new pages automatically.\n. Thanks for the suggestion. \n\nI suggest we leave this out for now in an effort to stabilise the API and get a 1.0 release out the door, however I'll leave the issue open as a wishlist for post 1.0.\n. I've confirmed this is a bug, here's the stack trace using the provided template PDF\n\n```\n\u26a1 ruby -Ilib manual/templates/full_template.rb\n    /home/jh/git/prawn-rw/lib/prawn/core/page.rb:38:in `layout': undefined method `[]' for nil:NilClass (NoMethodError)\n    from /home/jh/git/prawn-rw/lib/prawn/document.rb:253:in `start_new_page'\n    from manual/templates/full_template.rb:19:in `block in <main>'\n    from /home/jh/git/prawn-rw/lib/prawn/document.rb:215:in `instance_eval'\n    from /home/jh/git/prawn-rw/lib/prawn/document.rb:215:in `initialize'\n    from /home/jh/git/prawn-rw/lib/prawn/document.rb:122:in `new'\n    from /home/jh/git/prawn-rw/lib/prawn/document.rb:122:in `generate'\n    from manual/templates/full_template.rb:16:in `<main>'\n```\n\nThe template PDF defines it's MediaBox in the /Pages tree above the /Page, not on the /Page itself. it's perfectly legal for the PDF to do that, so we need to account for it.\n\nI have an idea that should help and will hopefully be able to look at it soon.\n. Thanks for the report. I just tested with the latest prawn and xpdf 3.03-10 in debian and couldn't reproduce it.\n\nI'll close the issue for now, but please re-open it if you have further information.\n. I think the template must be setting some state in a way prawn doesn't support. I have an idea for how to fix our template code to help and I'll try to look into it.\n\nThanks for the report.\n. My preference is not to depend on RVM or rbenv. I use neither on my systems, and I'd prefer not to add them.\n\nCan we use on travis for testing across multiple VMs? I use it to ensure pdf-reader runs on {MRI/jruby/rubinius} in 1.8 and 1.9 modes.\n. travis does mean that I'm generally runinng the tests locally against MRI 1.9.3 and then only after pushing to github do I find the specs are broken on another VM. In practice I haven't found that to be an issue.\n. I've added prawn to travis-ci as a trial, you can see it at http://travis-ci.org/#!/prawnpdf/prawn\n. +1\n\nI'm on holidays at the moment and have some time up my sleeve. If everyone agrees with the suggestion, I'm happy to complete this.\n. Done. Travis shows us red on rbx 1.9 and jruby 1.9, green on everything else.\n. I've removed rbx1.9 from the travis targets for now as rbx is a moving target.\n\njruby1.9 is still failing with what seem like legitimate encoding failures, although I'm not sure why they don't occur on MRI. A job for another day.\n. Which error are you looking at? I'm looking at the encoding errors at http://travis-ci.org/#!/prawnpdf/prawn/jobs/2551473\n. On 25 September 2012 13:55, Alex Dowad notifications@github.com wrote:\n\n> James, rather than telling Travis to test against \"jruby-19mode\", can we\n> specify a specific version of JRuby? Otherwise, every time they release a\n> new version, it may break the Prawn build. If a specific version of JRuby\n> (and Rubinius, etc) can be specified in .travis.yml, then the Prawn team\n> can decide when to \"bump\" the supported versions of JRuby/rbx/etc.\n\nI'm not 100%, but I think you can only request jruby in \"1.8 mode\" or \"1.9\nmode\", not the specific version.\n\nJames\n. Please use the prawn mailing list for questions on how to solve specific issues like this.\n. .. and pdf-reader depends on Matrix from the standard lib.\n\nJames\nOn 20/09/2012 6:58 PM, \"Brad Ediger\" notifications@github.com wrote:\n\n> Matrix is a class in the Ruby standard library:\n> \n> http://www.ruby-doc.org/stdlib-1.9.3/libdoc/matrix/rdoc/Matrix.html\n> \n> It's probably not a great idea to have an ActiveRecord model with the same\n> name, as this has the potential to cause conflicts with any library that\n> depends on Matrix.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/prawnpdf/prawn/issues/403#issuecomment-8739774.\n. @paulcc that's a nice solution.\n\nI also have a branch [1] that allows PDF pages to be imported via the #image() method (like PNGs and JPGs). I had planned to work on merging it upstream once prawn 1.0 ships.\n\n[1] https://github.com/yob/prawn/tree/pdf_images\n. In general I think we could improve our color support (and CMYK in particular) but since this specific issues seems fixed I'll close it for now.\n\nPlease re-open the issue if it's not resolved.\n. Thanks for the suggestion, but it seems unlikely we'll support this use case. It'd be a significant departure from the current API for Prawn::Document.\n. Thanks for the report. Are you able to provide a short script that demonstrates the issue?\n. I ran some tests on this and seem to observe the leak you do. Unfortunately I'm not that experienced at tracking these things down so I ran into a brick wall.\n\nHopefully I'll get some inspiration after some sleep. @bradediger do you have any thoughts on where I could look?\n. Here's the testing script I was using. I'm far from an expert in the semantics of when ruby will allow an object to be garbage collected, but my theory was by scoping the work to a method then the objects should be free for GC when they go out of scope.\n\n```\n\u26a1 cat foo.rb \nrequire 'prawn'\n\ndef somework\n  pdf = Prawn::Document.new\n  pdf.table([[\"Some text\"]] * 100)\n  pdf.render\nend\n\n5000.times do\n  $stdout.write \".\"\n  GC.start\n  somework\nend\n```\n\nI was running from within the prawn repo with this command on jruby 1.7.1:\n\n```\njruby -Ilib foo.rb\n```\n\n... and here is the heap graph from visualvm\n\n![one.png](https://f.cloud.github.com/assets/8132/4581/7230abb8-4318-11e2-9617-bd6fdb1b1168.png)\n. Here's a slight tweak to the script so it returns nil from the method:\n\n```\n\u26a1 cat foo.rb\nrequire 'prawn'\n\ndef somework\n  pdf = Prawn::Document.new\n  pdf.table([[\"Some text\"]] * 100)\n  pdf.render\n  nil\nend\n\n5000.times do\n  $stdout.write \".\"\n  GC.start\n  somework\nend\n```\n\n.. and the heap graph\n![return_nil_512mb_heap.png](https://f.cloud.github.com/assets/8132/4677/56035784-431c-11e2-8ba0-9a67daf542e3.png)\n. My scripts are using the AFM fonts, so that would seem to rule out TTFunk. Maybe we have multiple leaks?\n. Sorry for the spam. here's another test case. I removed the tables call and just created a document with ~3 pages of AFM text.\n\n```\n\u26a1 cat foo.rb\nrequire 'prawn'\n\ndef somework\n  pdf = Prawn::Document.new\n  pdf.text \"hello world\\n\" * 150\n  pdf.render\n  nil\nend\n\n10000.times do\n  $stdout.write \".\"\n  GC.start\n  somework\nend\n```\n\nThe heap graph is much closer to what we want to see:\n![text_return_nil_512mb_heap.png](https://f.cloud.github.com/assets/8132/4734/8ea9f19e-431f-11e2-93a7-f44eab04d4d7.png)\n. @bradediger can you test this process on your system?\n\n1) create this test script:\n\n```\n\u26a1 cat foo.rb\nrequire 'prawn'\n\ndef somework\n  pdf = Prawn::Document.new\n  pdf.table([[\"Some text\"]] * 20)\n  pdf.render\n  nil\nend\n\n2_000_000.times do\n  $stdout.write \".\"\n  GC.start\n  somework\nend\n```\n\n2) run it with MRI 1.9.1\n\n```\nruby -Ilib foo.rb\n```\n\n3) locate the PID of the ruby process and then use watch to see what happens to the memory. On my system it creeps upwards.\n\n```\nwatch ps -v -PID_GOES_HERE\n```\n\n4) Apply this patch and repeat the process. With the patch applied on my system, the memory usage remains steady.\n\n```\ndiff --git a/lib/prawn/table/cell.rb b/lib/prawn/table/cell.rb\nindex d2ae66f..abc3ddc 100644\n--- a/lib/prawn/table/cell.rb\n+++ b/lib/prawn/table/cell.rb\n@@ -79,6 +79,7 @@ module Prawn\n       # Min-width of the span divided by the number of columns.\n       #\n       def avg_spanned_min_width\n+        return 10\n         min_width.to_f / colspan\n      end\n\n@@ -86,6 +87,7 @@ module Prawn\n       # its column.\n       #\n       def max_width_ignoring_span\n+        return 200\n          set_width_constraints\n         @max_width\n       end\n```\n. fine with me. @bradediger - what do you think?\n. I've merged master into this branch so it's still a clean merge.\n\n@sandal @jonsgreen @Bluejade How do you guys feel about switching to rspec? I'm aware it's not everyone's favourite testing framework (new methods on Object, yah!), however I feel that a green build on jruby and ruby2.0.0 is a big win.\n. Although I'm more familiar with rspec, I'd be happy with a move to minitest other than the significant amount of extra work to prepare the initial transition.\n\nSince there seems to be consensus that rspec is an improvement over test-spec I suggest we switch to rspec for now. We're all pressed for time, so some improvement is better than the current situation.\n. I also like to keep dependencies low, however given the amount of time we\nall have for prawn I felt a reduced code surface might help.\n\nJust an idea I thought I'd float, obviously it's a small commit that didn't\ntake much time :)\nOn 07/12/2012 2:56 PM, \"Brad Ediger\" notifications@github.com wrote:\n\n> [image: :+1:] from me, but I'd like to hear @sandalhttps://github.com/sandal's\n> opinion as well. I wrote the RC4 implementation because he wanted to\n> minimize external dependencies.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/prawnpdf/prawn/pull/426#issuecomment-11130657.\n. OK, I've merged this into master.\n. I've also merged this into master, thanks for the review!\n. I'd like to see the whitespace changes removed from the PR. Generally I'm all for stripping trailing whitespace, but given how much of it is in the prawn code I think it's better the keep this PR focused on the core issue it's addressing.\n. Also, is there a way to just remove the thread local cache all together?\n\nThe Font objects maintain a pointer to the Prawn::Document, so I think by caching them in thread local variables means the Prawn::Document's won't be GC'd.\n. I haven't proven this theory yet, but have I missed anything?\n\n1) When a font is first used in a thread, it will add an entry to cache\n2) The cache key is the font that references a the Prawn::Document\n3) Subsequent documents that use the same font will used the cached values\n4) The first Font and Prawn::Document will never be GCd\n5) Subsequent Fonts and Prawn::Document's will be available for GC when they go out of scope\n\nThis PR fixes #3, so the leak is massively reduced, but #4 means that we will still be creating some objects that never get GCd.\n\nHow bad is the performance hit if we change the cache to by scoped to the Prawn::Document? My strong preference would be to be good citizens and allow all our objects to be GCd when each document is finished, including the first document.\n\nThanks for all your work on this @kennethkalmer !\n. I've added a comment to the gist with benchmark results on my system.\n\nI think caching the width operation is worthwhile, and I like your idea of\nmoving the cache into Prawn::Document#width_of.\n\nCould you try removing the thread local cache from Cell::Text, adding a\nregular instance variable cache to Prawn::Document#width_of and\nbenchmarking how low it takes to render a medium sized table on master vs\nyour branch?\n\nJames\n\nOn 13 December 2012 23:23, Kenneth Kalmer notifications@github.com wrote:\n\n> I think @yob https://github.com/yob nailed it with the plan of action.\n> Digging through the path a bit more it seems that we could possibly\n> implement a caching strategy in Prawn::Document#width_of (\n> https://github.com/prawnpdf/prawn/blob/master/lib/prawn/font.rb#L219)\n> that could benefit the document as a whole.\n> \n> However, I did a simple benchmark (which might be completely wrong), the\n> results are in this gist https://gist.github.com/4281051 and they show\n> almost no benefit. In fact, in jruby going via the cache is slower [image:\n> :question:]\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/prawnpdf/prawn/pull/430#issuecomment-11358415.\n. I'd defer to @bradediger if he has an opinion, however I feel that if we ever want to get 1.0.0 released we need to avoid API changes if possible.\n\nHow about breaking Document#width_of into two private methods with their own caches, and Document#width_of just delegates to them?\n. I say go for (1) and (3) and then lets review what the code looks like. If moving it to another file feels cleaner, we can do it.\n\nI can see how a LRU strategy might be needed, but let's fix the memory leak issue first, merge it, then re-visit LRU if we need to.\n. Looks  great. here's a little hack I used to confirm the leak is fixed:\n\n```\nrequire 'prawn'\n\ndef somework\n  pdf = Prawn::Document.new\n  pdf.table([[\"Some text\"]] * 20)\n  pdf.render\nend\n\ndef count_prawn_docs_in_objectspace\n  count = 0\n  ObjectSpace.each_object(Prawn::Document) { |o| count += 1}\n  count\nend\n\n10.times do\n  GC.start\n  puts count_prawn_docs_in_objectspace\n  somework\nend\n```\n\nOn master, the output is:\n\n```\n\u26a1 ruby -Ilib foo.rb   \n0\n1\n2 \n3\n4\n5\n6\n7\n8\n9\n```\n\n.. and on this PR:\n\n```\n\u26a1 ruby -Ilib foo.rb             \n0\n0\n0\n0\n0\n0  \n0\n0\n0\n0\n```\n\nI'd like to see a few quick specs for the FontCache and Brad's suggestion about not reopening Document, then merge it!\n. The AsciiHex and Ascii85 filter aren't used anywhere in the code base. I'm not keen on adding extra code that isn't used.\n\nI like this change in general and like that we can add the extra filter types if we ever need them. Maybe we should merge this work minus the unused filters?\n. Nope. It looks good to me, but I'll leave it to Brad to merge if he's happy.\n. We already support 1.8, so I'd suggest we try and release 1.0 with MRI1.8 support and then consider supporting >= 1.9 for the following non-bugfix release.\n. I wouldn't have any issue with releasing 1.0 with ruby {1.8,1.9,2.0} support and 1.1 with {1.9,2.0} support. For me, semantic versioning is about managing API stability, not minimum interpreter requirements. As long as we only remove interpreter requirements after a suitable percentage of the community has moved on, I'm happy.\n\nWe could release 1.0, create a 1.0-stable branch and then remove all our hacks for 1.8 support from master.\n. the built in fonts require utf-8 encoded text, however at this stage they only really support the iso-8859-1 character set.\n\nprawn could be improved to support more characters using an encoding difference table, but so far there hasn't been much demand. If you're interested in working on this let me know and I can offer some support.\n. If I'm reading the diff correctly it's just searching for a :MediaBox entry anywhere in the file and using that?\n\nThat will work fine for most PDFs with consistent page sizes, but only through luck. \n\nPage objects are leaf nodes in a tree of Pages objects, and walking up the tree until a MediaBox is found is the correct thing to do.\n. Am I reading the diff wrong? It looks like it replaces the search up the tree with a \"select any MediaBox from the document\" search.\n\nAre you certain the PDF you're trying to use as a template has no MediaBox, even in the parent Pages objects? That's quite rare, but I guess possible.\n. Missing a MediaBox is against the spec, but Adobe Acrobat allows it and assumes the MediaBox is 0,0,612,792  (US Letter).\n\nI think we should keep the inheritance of page attributes as per the spec and assume US Letter in the very rare case that a PDF without a MediaBox is used as a template.\n. I agree with @bradediger - distributing the TTF fonts is probably an artifact of the early days of the project and needing example fonts+code. We can probably find a way to get rid of them safely.\n\nThe AFM metrics are key though and must be kept. On linux system the same data is probably available from another package, but relying on that is too system specific for a pure ruby gem.\n. I like this idea. It'd make my personal fork that implements PDF image support unnecessary.\n\nI'll defer to @bradediger and @sandal on this, but my preference would be for the image handlers to register themselves with prawn rather than have prawn introspect the Prawn::Images namespace. External code that implements a new image format shouldn't have to live in the the Prawn::Image namespace.\n. Yup, prawn never messes with real resolution of the image. We just fit the\npixels into the requested space on the page.\n\nThat does mean it's possible for users to embded an image with a low DPI\nwithout realising it though.\n\nIt'd be nice if we could find a way to tweak the API to guide users that\nneed to embed images with a certain DPI, but I can't think of anything off\nthe top of my head.\n\nOn 14 December 2013 08:08, ayghor notifications@github.com wrote:\n\n> Teh problem was with my pdf reader, xpdf. Firefox's renderer is displaying\n> stuff nicely.\n> \n> After looking at teh horrid output from xpdf, I thought Prawn was\n> resampling my image, like ghostscript, to better fit into a specific\n> medium. I was wrong. I extracted teh jpeg stream from a generated pdf file\n> and diffed with teh original image, and they are equal.\n> \n> As long as it doesn't mess with teh real resolution, teh choice of teh\n> point size is just a matter of taste, and I would go for 1/72 in.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/prawnpdf/prawn/issues/598#issuecomment-30543710\n> .\n. Are you measuring jruby memory usage using activity monitor or similar?\n\nI'm no JVM expert, but I seem to recall it can allocate itself a large heap\nspace and is often reluctant to return memory to the OS. We might need to\nfind a more sophisticated way to measure memory usage on jruby.\nOn 17/12/2013 2:25 AM, \"Alexander Mankuta\" notifications@github.com wrote:\n\n> JRuby 1.7.8 seem to be broken.\n> \n> JRuby 1.7.9 is much faster. On the other hand, 1.7.9 is inconsistent\n> between runs on memory side. Sometimes it's 230MB and sometimes it's over\n> 400MB. It's hard to get any meaningful improvement (or otherwise) ratios.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/prawnpdf/prawn/pull/600#issuecomment-30668729\n> .\n. If possible I'd say it's worth using the AFM gem. Prawn is big enough as it\nis.\n\nI've got 2 weeks holidays staring today, i'm happy to try and get more\nchanges included into AFM upstream.\nOn 20/12/2013 3:17 AM, \"Gregory Brown\" notifications@github.com wrote:\n\n> Also worth noting: Not one of @yob https://github.com/yob's accepted\n> pull requests have been released in the gem yet -- the last gem release was\n> in 2010.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/prawnpdf/prawn/pull/607#issuecomment-30941871\n> .\n. :+1:\nOn 04/01/2014 6:59 PM, \"Micha\u00ebl Witrant\" notifications@github.com wrote:\n\n> [image: :+1:]\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/prawnpdf/prawn/issues/625#issuecomment-31573772\n> .\n. On 14 Oct 2014 20:39, \"Burkhard Vogel\" notifications@github.com wrote:\n\n> It's Adobe that sets the standard - I have no insights how Google\n> interprets it. My suggestion, just try and see whats happening (and maybe\n> report back)\n\nprawn-print is implemented using javascript, which is an official part of\nthe PDF spec. However, other than acrobat, most (all?) PDF renders ignore\nthe js.\n\nIrritating for this use case, but on the bright side there's an entire\nclass of security issues that are bypassed.\n\nJames\n. Couldn't help myself and had to comment on this PR - great research, and awesome PR description \ud83d\ude00\n. I've attempted to answer this on [stack overflow](http://stackoverflow.com/questions/40651362/how-do-i-change-font-in-prawn/40666967)\n. ",
    "wpiekutowski": "I was thinking about delegating all PNG handling to RMagick. That would probably give compatibility with any PNG format out there. In that case a name change may be appropriate somewhere in the future. I think it shouldn't be too complicated to rewrite prawn/images/png.rb with RMagick. Unfortunately I'm kind of busy currently and I can't pursue this on my own. Probably in May I'll have more time to try this approach.\n. By 'rewrite prawn/images/png.rb with RMagick' I meant to monkey patch Prawn::Images::PNG though a separate gem, like now prawn-fast-png deals with alpha channel separation performance.\n. That's true. Much safer would be to set the color space everytime we set the color. It won't increase the filesize significantly.\n\nPatch: http://github.com/wpiekutowski/prawn/commit/3e7577554db81c6e4f52da43ef439bb7ee653866\n\nThe better solution would be to mantain a stack of GraphicsState objects. Current state is the top of the stack. When we save the graphics state, just clone the top state and push it to the stack. When we restore the graphics state, just pop one object.\n. cheba, thanks for improving gradients support. I'm glad Prawn will support more types of gradient. :)\n\nYour change is breaking the existing API. I guess it wasn't the best idea from my side to have fill_gradient and stroke_gradient with a fixed arguments list, but anyway I think it's important to not break the API or at least leave the current methods working for some time with a depreciation warning. Personally I'd stick to fill/stroke_gradient methods with hash options.\n\nI think your LinearGradient class has some resemblance to my gradient code, so it would be nice if you could still mention me in the header. :) This is quite common practice to list all contributors, even if a library was totally refactored. But anyway, that's for the maintainer to decide.\n. Thanks @cheba.\n\nI think you could make all arguments optional, except for the first one. Then class-check the first one to see if it's a Hash or Array (point). In the latter case you could output a warning and validate all other arguments for presence (raise ArgumentError if missing). I wonder what's @bradediger opinion about depreciation warnings vs breaking API changes.\n. +1\n\nOn Saturday, January 4, 2014, Alexander Mankuta wrote:\n\n> Looks like gh notified only linked contributors\u2026\n> \n> @proactive https://github.com/proactive @pwnallhttps://github.com/pwnall\n> @costan https://github.com/costan @ratbeardhttps://github.com/ratbeard\n> @riopro https://github.com/riopro @rivsc https://github.com/rivsc\n> @rubyredrick https://github.com/rubyredrick @scooprhttps://github.com/scoopr\n> @scpike https://github.com/scpike @seebs https://github.com/seebs\n> @sgwanlee https://github.com/sgwanlee @shanebonhamhttps://github.com/shanebonham\n> @sigmike https://github.com/sigmike @sos4nt https://github.com/sos4nt\n> @strzibny https://github.com/strzibny @tim-vandecasteelehttps://github.com/tim-vandecasteele\n> @toretore https://github.com/toretore @torgotonhttps://github.com/torgoton\n> @trym https://github.com/trym @vizjerai https://github.com/vizjerai\n> @vongrippen https://github.com/vongrippen @weimenghttps://github.com/weimeng\n> @wesgarrison https://github.com/wesgarrison @whoopshttps://github.com/whoops\n> @willbryant https://github.com/willbryant @wpiekutowskihttps://github.com/wpiekutowski\n> @yob https://github.com/yob\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/prawnpdf/prawn/issues/625#issuecomment-31565142\n> .\n. I was thinking about delegating all PNG handling to RMagick. That would probably give compatibility with any PNG format out there. In that case a name change may be appropriate somewhere in the future. I think it shouldn't be too complicated to rewrite prawn/images/png.rb with RMagick. Unfortunately I'm kind of busy currently and I can't pursue this on my own. Probably in May I'll have more time to try this approach.\n. By 'rewrite prawn/images/png.rb with RMagick' I meant to monkey patch Prawn::Images::PNG though a separate gem, like now prawn-fast-png deals with alpha channel separation performance.\n. That's true. Much safer would be to set the color space everytime we set the color. It won't increase the filesize significantly.\n\nPatch: http://github.com/wpiekutowski/prawn/commit/3e7577554db81c6e4f52da43ef439bb7ee653866\n\nThe better solution would be to mantain a stack of GraphicsState objects. Current state is the top of the stack. When we save the graphics state, just clone the top state and push it to the stack. When we restore the graphics state, just pop one object.\n. cheba, thanks for improving gradients support. I'm glad Prawn will support more types of gradient. :)\n\nYour change is breaking the existing API. I guess it wasn't the best idea from my side to have fill_gradient and stroke_gradient with a fixed arguments list, but anyway I think it's important to not break the API or at least leave the current methods working for some time with a depreciation warning. Personally I'd stick to fill/stroke_gradient methods with hash options.\n\nI think your LinearGradient class has some resemblance to my gradient code, so it would be nice if you could still mention me in the header. :) This is quite common practice to list all contributors, even if a library was totally refactored. But anyway, that's for the maintainer to decide.\n. Thanks @cheba.\n\nI think you could make all arguments optional, except for the first one. Then class-check the first one to see if it's a Hash or Array (point). In the latter case you could output a warning and validate all other arguments for presence (raise ArgumentError if missing). I wonder what's @bradediger opinion about depreciation warnings vs breaking API changes.\n. +1\n\nOn Saturday, January 4, 2014, Alexander Mankuta wrote:\n\n> Looks like gh notified only linked contributors\u2026\n> \n> @proactive https://github.com/proactive @pwnallhttps://github.com/pwnall\n> @costan https://github.com/costan @ratbeardhttps://github.com/ratbeard\n> @riopro https://github.com/riopro @rivsc https://github.com/rivsc\n> @rubyredrick https://github.com/rubyredrick @scooprhttps://github.com/scoopr\n> @scpike https://github.com/scpike @seebs https://github.com/seebs\n> @sgwanlee https://github.com/sgwanlee @shanebonhamhttps://github.com/shanebonham\n> @sigmike https://github.com/sigmike @sos4nt https://github.com/sos4nt\n> @strzibny https://github.com/strzibny @tim-vandecasteelehttps://github.com/tim-vandecasteele\n> @toretore https://github.com/toretore @torgotonhttps://github.com/torgoton\n> @trym https://github.com/trym @vizjerai https://github.com/vizjerai\n> @vongrippen https://github.com/vongrippen @weimenghttps://github.com/weimeng\n> @wesgarrison https://github.com/wesgarrison @whoopshttps://github.com/whoops\n> @willbryant https://github.com/willbryant @wpiekutowskihttps://github.com/wpiekutowski\n> @yob https://github.com/yob\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/prawnpdf/prawn/issues/625#issuecomment-31565142\n> .\n. ",
    "Swartz": "Any news on this?\nI'm having this same issue, now sure how to fix it for now.\n. I'm sure a lot of people would love to see it sooner of course :)\nThis would include me :)\nIn either case, thanks in advance!\n. Any news on this?\nI'm having this same issue, now sure how to fix it for now.\n. I'm sure a lot of people would love to see it sooner of course :)\nThis would include me :)\nIn either case, thanks in advance!\n. ",
    "rnhurt": "Done.\n\nhttp://github.com/sandal/prawn-layout/issues/#issue/7\n. OK, I didn't see this coming.  Is there a replacement for this functionality?  Also the documentation at http://prawn.majesticseacreature.com/docs/prawn-core/classes/Prawn/Document/Text.html still lists this as a valid public method.\n\nLater...\n  Richard\n. Yup, I don't use the Gems so I completely missed this message.  Thanks for bringing me up to speed.  :)\n. Done.\n\nhttp://github.com/sandal/prawn-layout/issues/#issue/7\n. OK, I didn't see this coming.  Is there a replacement for this functionality?  Also the documentation at http://prawn.majesticseacreature.com/docs/prawn-core/classes/Prawn/Document/Text.html still lists this as a valid public method.\n\nLater...\n  Richard\n. Yup, I don't use the Gems so I completely missed this message.  Thanks for bringing me up to speed.  :)\n. ",
    "bradediger": "Added to wiki at http://wiki.github.com/sandal/prawn/supported-pdf-viewers.\n. For bystanders: This was pulled into master as Document#group_on_page (in b734c03) and is roadmapped for 0.6. It does not group images or other elements that do not trigger a new page by themselves.\n. Update RDoc on Font#normalize_encoding to reflect that it is nondestructive. Closed by d013aaa49bb71f9004104de5833d5a8c1ac1e67f.\n. Fix references to :page_size and :page_layout in README. Closed by e36a8edb987021778dc23c31750929fd22245019.\n. Fixed in 23cafc4. Thanks!\n. This was done a while ago. Closing.\n. Merged, thanks.\n. Defer finalizing the page_content refs until the document is rendered. Closed by 101235225ef27fcdcef60b505e6edecdcdcc714f.\n\nThis is essential for documents that reopen pages in order to:\n- Set the correct stream length in the stream dictionary\n- Make it possible to re-open streams that will be compressed\n- Not draw the header and footer multiple times if the same page is\n  finalized more than once.\n\nThe document compression specs were also broadened so as not to assume\nthe page_content stream will be compressed immediately after leaving a\npage.\n. Merged, thanks.\n. Remove Prawn::Reference on_encode block argument, in favor of a new, more flexible callback system. Closed by 36ef89c2bc21e504df623f61d918c5bfdc1fdab1.\n\nAdded a callback system Prawn::Document::Internals#before_render(&block),\nwhich accepts a Proc to be run after all objects are finalized, but before\nanything is rendered to the output stream. This removes the need for the\non_encode Proc argument to Prawn::Reference, so that argument has been\nremoved.\n\nSince we are no longer storing Procs in references, this closes issue 56.\nAdded a spec to verify.\n. I don't think it's as simple as changing the /Encoding entry. The PDF reference doesn't list /Symbol as a valid value for that key. Unfortunately I don't have any better guesses.\n. This file has ZapfDingbats text, but includes its own font descriptor (with the Flags field of 4 specifying a symbolic font):\n\nhttp://unicode.org/charts/PDF/U2700.pdf\n\nActually, I just compared the 1.4 and 1.7 specs, and came across a wrinkle here. Beginning in PDF 1.5, the special treatment afforded the Base 14 fonts is deprecated; producers are supposed to include full font descriptors for every font used. The lack of a font descriptor might not be our problem, but it should at least be on our radar.\n. 6337329 resolves the original complaint. Will open a new ticket about the font descriptors.\n. Restore page_number on snapshot restore. Closed by 7c62bbf0b9cea166921bd6927e7dbb7188a2a790.\n. atotic: I believe the above commit, on master, should resolve this issue. Please let us know if you have further problems around snapshotting. Thanks for your well-researched bug; it was really easy to narrow down the problem.\n. To my knowledge, we have not fixed this issue. It is somewhat pedantic (I don't believe it was actually causing a visible issue) and didn't appear to be terribly easy to fix last time I looked at it.\n. Acrobat uses a different rendering path when transparency is used on a page than when it is not, so that accounts for this difference. Something having to do with the transparency blend space implicitly created to render transparency groups -- I think Adobe might be converting the image to DeviceCMYK. This is more a color space issue than a Prawn issue; I can reproduce by creating a document in Illustrator CS2 with a #ddddff rectangle and saving as a PDF. That results in a PDF that shows up as #ddddff in OS X Preview but #dddcee in Acrobat.\n\nLeaving this issue open for now in case we can find a workaround.\n. Closing this issue (won't fix). I can't find a single other PDF renderer that does this a different way, so I can't even find an example of how I think it _should_ work. If anyone thinks otherwise and can come up with a difference, feel free to reopen this issue and I'll have a go.\n. From an API perspective, I'd prefer adding a Prawn::Document#background method and deprecating / eventually removing the :background option to Prawn::Document.new, as I outlined in the aforementioned thread from last year:\n\nhttp://groups.google.com/group/prawn-ruby/browse_thread/thread/2aea4e64eae840bd/5c57b6fa7d809210\n\nThat way, we can throw as many options as we like into that method and we don't pollute the constructor. That's my primary concern. If @cassiomarques or anyone else wants to make a clean, well-tested patch that does this, I'll probably merge it.\n. Thanks @Spiralis. To clarify, github.com/sandal/prawn is and will be the official version of Prawn. I'm a maintainer of Prawn, but my version (bradediger/prawn) is just for my own branches and other tweaks prior to being merged into the official version.\n. @sandal Who knows if they're actually squatting? (could be private repos). But I'd try a private message before the Hammer of God.\n. Hey everyone, thanks for your attention. I think this ticket was created before github started sending everything that happened on a project to all contributors, so this is the first time I've seen it. Sorry! I'll take a look at the options soon and decide what sort of API we want to use for text styles.\n. @m-ryan: \"Imho most of the code in Prawn::Table::Cell::Text should go away since it's not DRY with Prawn::Text.\"\n\nI would agree with this now. I wrote Cell::Text a month or two before Daniel wrote the new Text::Box class for Prawn. Daniel and I are making some API changes to Text::Box over the next month or two in preparation for 1.0, so by the time the API settles down, Cell::Text will probably be stripped down to be a small adapter around Text::Box (we need an adapter to conform it to the Cell API that handles sizing and such, but Text::Box provides 90% of the features we need).\n. Refactor Table::Cell::Text to use Text::Box API\n\nMost available options for Text::Box can now be passed into\nPrawn::Table::Cell::Text -- most notably, :align. These attributes may\nbe set using the standard cell attributes API -- see the new code in\nexamples/table/bill.rb for an example of how to use :align.\n\nPlease note:\n- :inline_format is not yet supported.\n- :font_style and :font_size have now become :style and :size,\n  respectively.\n\nClosed by 2a5a5f9c1a52c829ebec17a935798624786b1836.\n. Despite the above comment on that particular commit, :inline_format is now supported on master (dba4581).\n. Dynamic repeaters are simple closures\n\nRemove the instance_eval / block argument stuff from dynamic repeaters,\nso they simply close over their environment. The caller should already\nhave a reference to the Document, so this is more flexible all around.\n\nClosed by 4cc4d2f4e476ce9829c37e64bb023b0b2f7eea09.\n. It's probably a good idea anyway to move our gem specifications out of the Rakefile and into gemspecs. We have much less of a reason _not_ to do so, now that we've merged into one super-project and we don't have to build a meta-gem.\n\nGreg, do you have any objections to this?\n. costan, I don't see any immediate problems with this approach, so I merged your patch. I'll kick this over to sandal to review, as he actually does the release tasks, but it's in master for now.\n\namoeba, thanks for the patch too. I merged costan's version since it preserves all of the features in the Rakefile.\n. For the immediate future, you will need to specify cell heights / widths manually when you are using rotated text. Because we support text wrapping in cells, there is no easy way to tell how high a cell should be unless you specify it. This should work if you specify row heights manually.\n. Take Table#column_widths and Table#row_heights public. Closed by 9eaf37af50b95ea17b8f3ab07b55b87d98775d30.\n. Thanks for pointing this out, Will -- I agree that these methods should be public. Pushed to master.\n. Merged, thanks for taking care of this.\n. Add CSS-like :border_..._width and :border_..._color\n\nTable Border widths and colors can now be independently changed with:\n- border_top_width=\n- border_top_color=\n- border_right_width=\n- border_right_color=, etc.\n\nThere are shortcut accessor methods border_width= and border_color=,\nwhich set all properties at once given the same CSS-style arguments as\npadding=.\n\nClosed by 328730720bd2ce39e3b425167f4f702758f59588.\n. If the Pantone colors you need are in the CMYK gamut and you know their values, you can specify them directly as CMYK values:\n\n```\npdf.fill_color 0, 100, 0, 0 # c, m, y, k in [0,100]\npdf.stroke_color 100, 0, 0, 0\n```\n\nPrawn does not support spot colors, and it is not currently on the roadmap. It would involve the Separation color space (ISO32000:2008 \u00a78.6.6.4) -- if you can figure out what you need in the resulting PDF, we may be able to help you accomplish it in Prawn; just ask on the mailing list.\n\nClosing out this issue as it's not a Prawn bug.\n. edgerunner: That's essentially what I was getting at. I was under the impression that certain Pantone colors (though not all or even many) were actually in the CMYK gamut and could be approximated to arbitrary precision with a CMYK 4-tuple. That would at least give equivalent colors in the resulting PDF, and you could make the approximation arbitrarily close by adjusting the precision of your C, M, Y, and K values.\n\nHowever, that still wouldn't give you proper separations, and it won't work at all for the Pantone colors outside of the CMYK gamut (which by definition can't have arbitrarily close CMYK approximations). What we would really need to do to get this working is to support Separation color spaces, which PDF has explicit support for. I'm almost certain that you can map RGB and process-color CMYK equivalents to each spot color for varying output media, and then pull separations by spot color.\n\nBut this would be a moderately involved project, and there are more pressing issues on the roadmap as we march to Prawn 1.0. It's something I'm personally interested in, and it sounds like James (yob) might be as well, but I can't say I have a ton of time to look into it right now. If you're available when someone gets around to working on spot color support, we may hit you up for some advice and guidance.\n. A point of order: PDF is similar to (and based on) Postscript, but they're different languages. Prawn only deals in PDF.\n. github ate my non-BMP character... text is fixed now.\n. Properly encode text strings with non-BMP Unicode chars\n\nPerform correct UTF-16 encoding, creating surrogate pairs as necessary,\nfor text strings with non-Basic Multilingual Plane characters.\n\nClosed by bc01a7d967433b7df94cc8907872ce2053751f1a.\n. Jonathan is currently working on some graphics state changes that will make this easier to resolve. Here's a spec (currently failing) that will cover this when his work is done:\n\n```\ndescribe \"The render() feature\" do\n  # ...\n  it \"should be idempotent\" do\n    pdf = Prawn::Document.new\n\n    contents  = pdf.render\n    contents2 = pdf.render\n    contents2.should == contents\n  end\nend\n```\n. I've merged the above spec to make sure this problem doesn't trivially recur. Thanks!\n. We haven't worked on it yet. It's something we hope to be able to include for the 1.0 release, but no guarantees.\n. Table image cell support is available starting with commit 7f06e94e.\n. One of your text fields (project.site, project.project_name, project.assigned_to, project.due_date) is likely nil. Prawn doesn't know what sort of cell to make out of nothing. Give it an empty string if you want an empty cell.\n. Ah, that's it. The latest stable version of Prawn doesn't have support for table image cells. Try changing that line in your Gemfile to:\n\n```\ngem 'prawn', '1.0.0.rc1'\n```\n. 100% agreed on modifying $KCODE being bad. Looks like we don't actually depend on it -- our specs are green on 1.8.7 without it. What the heck, I'm diking it out.\n. Remove $KCODE=&quot;U&quot;. Closed by 4e34693120902937a2b1c22da4704b9ef159aca4.\n. This was resolved by 3ecde63.\n. Hi Rick,\nYou might be right that this is the same bug. The fundamental problem, as I see it, is that we don't make a clear distinction between user-requested and auto-sized widths.\n\nIf you have a minimized example of a situation where you're getting CannotFit errors with manually-set widths, that would help me dig into this.\n\nThanks!\n. Hi Rick,\nI think your problem is in this part of the code:\n\n```\ntable.rows(0).width = form_cell.width + umc_cell.width\n```\n\nAdmittedly, this is a bit of a confusing part of the table API. Any cell proxy (such as that returned by table.rows(0)) proxies calls on itself to calls on its constituent cells. So that statement is setting the width of _each_ cell in the first row to the value provided. Thus, the outer table containing this one (left_header) gets a CannotFit error because you are trying to put 540pt of width in a table you have constrained to 270pt.\n\nBrad\n. I've tried, and failed, to reproduce this issue on master. If we come across this problem again, we can re-open the ticket to investigate.\n. Asian languages are supported just fine -- see this:\n\nhttp://github.com/sandal/prawn/blob/master/examples/m17n/chinese_text_wrapping.rb\n\nIf you have further problems, please post a code example that we can try ourselves.\n. Spec text and draw_text for empty strings\n- draw_text should draw exactly the string it is given, even if it is\n  composed entirely of spaces\n- text may collapse empty strings (due to line wrapping), but if it\n  writes anything to the page, it should be blank.\n\nClosed by 3fed181b17f86040c99ef0d7ddfcc828da063553.\n. Thanks for the clean, tested patch. Merged.\n. Refactor CellProxy into Cells; cache for performance. Closed by 7190540434ac7710f5a98147f348506901dcabce.\n- New Cells object subclasses Array; this cleans up the code a bit.\n- Caching is done at the Cells level; Table is no longer responsible for\n  precomputing row / column numbers.\n- We only precompute when it makes sense; the row / column indexing is\n  deferred until it is needed (to avoid GC churn on leaf nodes).\n. Don't propagate RollbackTransaction outside of group(). Closed by bea36f118c3bcac8ca37df10628935d2c18922e0.\n\nBecause of the delegate we set up on @bounding_box, when rescuing a\nCannotGroup error, the bounding_box proxy would still be in place. Fix\nthis by restoring the bounding box upon first failure.\n\nThanks to Mark Bennett for finding and patching the bug.\n. I turned your example into a spec and applied your patch to master. Thanks for the tight report.\n. Documented in the Wiki. Thanks!\n\nhttp://github.com/sandal/prawn/wiki/Using-Prawn-with-Bundler\n. This was resolved by the fix for #153. Tables should now work inside bounding boxes and spans. Thanks for reporting with a minimized test case!\n. Add Cell#style; rename Cell::Text#style to #font_style\n\nThe Cell#style method is useful for uniformity with the Cells API:\n\n```\nrows(3..5).style :padding => 6\ncells[0, 0].style :padding => 6\n```\n\nCell::Text#style (to set the Text::Box's font style) has been renamed to\nfont_style.\n\nClosed by d63f07695ce9bd3f020326429a5bf0adde2ef587.\n. Tables support row/column access by negative indices\n\nYou can now use syntax like table.row(0..-2), which selects all but the\nlast row of your table.\n\nClosed by 91d6efa7ad4d4bd64b5eb33336a2e6fd4d496a9b.\n. Merged, thanks!\n. This problem also prevents subtables from spanning more than one page.\n. It's a bit of a complicated problem. Though this seems to be a common request, we still want to support the current case (where cells are constrained to lie on a single page), and we probably want it to still be the default. Splitting cells across pages can be an opt-in feature.\n\nThe abstract Prawn::Table::Cell API includes the assumption that a cell will be drawn on a single page. Table sets up a bounding box representing the cell's content area and calls `draw_content` on it (see Cell#draw_bounded_content). So that protocol is going to have to change if you want certain cells to span pages. This might not make sense for all cell types (for example, image cells).\n\nI'd start out by defining a method on each subclass of Cell that determines whether it can participate in this new protocol. Image cells wouldn't; text cells would; subtables might (depending on their content). Then, I'd add a method parallel to `draw_content` to draw as much content as possible on the current page. The semantics of this would be something like \"if `spannable?` returns true, then we can call `draw_partial_content` regardless of how much room is available on the page; it then returns the remainder of the content that couldn't be drawn\".\n\nThen you'll have to modify Prawn::Table#draw to participate in this new protocol, only if a user has requested this option.\n\nSome corner cases you'd have to think about:\n- Rows can contain both spannable and non-spannable cells.\n- What happens if a cell spans three or more pages?\n- Should Prawn assume that spannable cells don't have a bottom border on the first page and a top border on the next? (Probably.) Should it override the cell's border styling to do so?\n- Say there's 3pt available at the bottom of the page, and you're about to draw a spannable text cell. The text won't fit in 3pt of vertical space, so `draw_partial_content` will draw nothing and return the entire content of the cell. But you probably don't want to draw a 3pt border on the previous page around an empty cell.\n- We use a method, `Prawn::Table::Cell.draw_cells(cells)`, whenever we're putting a group of cells on the page. This renders all of the given cells in the proper drawing order to ensure that backgrounds show up behind borders and content. When refactoring Table#draw, you must ensure that this drawing order is preserved, otherwise weird rendering bugs can crop up.\n\nGood luck if you'd like to tackle this. I'd love to see it in Prawn; I just haven't had the time to work on it yet. Let us know on the mailing list if you try this out and run into issues.\n\nBrad\n. No updates yet. I've posted a summary of the issues involved above for anyone who wants to take a crack at starting.\n. Finish out table rows before pagebreak\n\nWhen a cell is taller than the margin box of a page, it would cause\nsubsequent columns to be rendered on the next page. This fixes things so\nthat the columns will be rendered next to the overflowing column.\n\nAlso ensure that we only flow to the next page to start a table if we\ncould gain height by doing so (i.e., if we are below the top of the\nbounding box).\n\nThanks to TylerRick on github for the bug report and the patch that\ninspired this fix.\n\nClosed by 405ed3a6df4cef74f6fe1a7c9f9473abcea04202.\n. ahsangill: The question of whether table cells should be split upon pagebreak is a complicated one. Feel free to post on the mailing list and start a discussion around this feature.\n\nTylerRick: Thanks for the clean code demonstrating the problem and for the patch. I've applied your patch, with some specs and a few corner cases cleaned up, to sandal/prawn@master.\n. Duplicate of #148. If you have a problem other than the one described there, please reopen with a code sample.\n. We haven't had a gem release in quite a while, due to limited time on the part of the core team.\n\nThe manual documents Prawn's master branch, not a released gem version.\n. We try to keep master pretty clean, but you can lock to a specific ref with:\n\n```\ngem 'prawn', :git => '...', :ref => 'abc123'\n```\n. @ksugiarto The `prawn-layout` gem is very old and its functionality was merged into core Prawn several versions ago. However, it is still available at the [same git repository](https://github.com/sandal/prawn-layout). Hope this helps!\n. Use standard string for link URI\n\nWhen embedding a hyperlink, use a standard string, not a LiteralString,\nfor the URI. This allows it to be encrypted by encrypt_document.\n\nClosed by f18d1b496e604f91d75b29852e080f7400d5fd22.\n. roody: Thanks for reporting this. I've merged a fix.\n. Only draw table header on 1st page if >=1 body row\n\nCheck, before rendering the table, to be sure that we can draw the first\nbody row (excluding any header). If we can't, start the entire table on\nthe next page.\n\nClosed by fe79c39f3f12f59397e8fb6835f2d1a520d9978d.\n. Draw borders before content\n\nThis reverses 8e0de9a, which I probably had a good reason for at the\ntime but for some reason didn't document. The behavior introduced by\nthat commit broke table cells inside stretchy bounds, because the\nabsolute location of the y-position depends on when the bounds are\nstretched (#153).\n\nIntroduced a spec to cover the new behavior and prevent regressions.\nClosed by c8fbc73f95914d1b64292860aaee3df6afee1363.\n. Fix example_helper.rb require on all examples\n\nSince '.' is no longer in the $LOAD_PATH in Ruby 1.9.2, we have to run\nan expand_path over the resulting path from File.dirname(**FILE**).\n\nClosed by 0e9df5cd022300a50061f3b6382aaa1eb5f9a43e.\n. You need to use a TTF font that has all of the Unicode characters you want to use in your text. Prawn is UTF-8 friendly, so you should have no problem getting this to work once you use a font that has the right characters.\n. This has since been fixed. I can't reproduce this problem on the latest version of Prawn from git.\n. Thanks for the patch, but after thinking about this I don't think this belongs in Prawn. Though \"\".respond_to?(:encoding) isn't a full test for 1.9 encoding support, it should be just fine for software that doesn't monkey with String encoding methods. This needs to be fixed upstream at WriteExcel, which would be a worthy endeavor.\n\nThanks again for your contribution!\n. I'm almost certain we still have this issue... I haven't seen any activity on it and haven't looked into it since I first found the problem. I should warn you, the problem may go deep into the bowels of the TTF format. If you want to track it down, good luck!\n. Can you provide an example of the code and image you are having problems with? Embedding JPG and PNG images is working for me, and our examples and specs currently work fine under 1.9.2. Thanks!\n. This behavior does not exist in the currently-maintained versions of Prawn. Try 0.10.2 or a release from git.\n. Hi Mike,\nThanks for the report. I'm not seeing this problem occur with the following spec on edge Prawn. Can you show me some code that isn't behaving as expected, or correct my spec below so it exhibits your problem? Thanks!\n\n```\nit \"should correctly render empty paragraphs\" do\n  @pdf.text \"text\\n\\ntext\"\n  text = PDF::Inspector::Text.analyze(@pdf.render)\n  @pdf.page_count.should == 1\n  text.strings.should == [\"text\", \"\", \"text\"]\nend\n```\n. FYI, it's not rspec; it's test/spec. You can run the specs with just \"rake\" or \"ruby spec/(something)_spec.rb\".\n\nThanks for clarifying that indent_paragraphs is the problem. I'll update the spec and look into this.\n. Blank paragraphs don&#39;t create new pages anymore with indent_paragraphs\n\nClosed by 8cb267ab02de553cc93b4d7e018b3c52aadcdba7.\n. The latest master should fix this issue -- see #180 and the referenced commit for the cause. We have also added specs on some text()-specific test cases to make sure empty paragraphs are treated correctly.\n. Closing this out as I think ColumnBox does everything we need. Let me know if there's anything you can't currently accomplish with the latest master. Thanks for your contribution!\n. Resolved by the fix for #180. Added a spec for this specific example (in spec/text_spec.rb).\n. The latest master should fix this. We fixed Parser.array_paragraphs to not have this problem in the first place. Please let me know if you still have problems with empty paragraphs after upgrading to the latest development version. Thanks!\n. > /cc @bradediger, who hopefully knows more about this stuff than I do.\n\nUnfortunately not. @Bluejade is the text box expert, and I have only interacted with that code tangentially due to my work on tables. Sorry to pass the buck but I have no direct knowledge here.\n\n@sandal: Your assessment of the problem and proposed solutions seem spot-on to me. The lower alignment example seems to be a defect; the center alignment is potentially debatable in that a different example with heavier descenders on the last line might make the box look more balanced. I don't know of any literature on the topic, but it does make intuitive sense that the eye matches the ascender of the first line with the baseline of the last line, not its descender.\n\nCount me as a :+1: on this general approach.\n. Doc fix: :modify_contents, not :modify_document\n\nThanks to jds13 for pointing this out. Closed by 0c735165c50ff97215e4da1262fb2484a717cc1c.\n. While I appreciate the desire to support a more complete set of Unicode code points out of the box, I think we still want to stick with the AFM fonts by default. These fonts come standard with PDF readers and don't need to be embedded / subsetted in Prawn documents, so we can keep the file size down. If we tried to bundle Unicode fonts out of the box, we would have to decide on a typeface as the default, and we'd still have gaps in our Unicode support, as most fonts only include a small set of code points.\n\nUsers who need Unicode support can easily use their font of choice with a line or two of Ruby code. Users who don't need it can use the default AFM fonts and reap the benefit of small file size and quick rendering. I'd gladly accept documentation patches or wiki updates that clarify how to use Unicode fonts, though.\n\nThanks very much for your input, and happy Prawning!\n. Move new_examples to manual, update path reference, and add rake manual task\n\nClosed by f80c954570f3482f702641a380ac0559078b3a4f.\n. Merged. I removed and ignored the .bundle directory and Gemfile.lock because, while those are helpful for going from development to production environments, I think they'd be more of a hindrance on a library like Prawn where developers might be running against different environments, Ruby VMs, etc.\n\nThanks for your contribution to Prawn!\n. Added specs and merged (fafd0d6). Thanks for your contribution to Prawn!\n. Added specs and merged. Thanks for your contribution to Prawn!\n. Merged. Thanks!\n. Fix problems with blank lines when inline formatting\n\nWhen :inline_format and :indent_paragraphs were both used, blank\nparagraphs would cause array_paragraphs to return nil. Fix thanks to\nsriegel2 at github.\n\nClosed by 3ec7ad195a14a737da82385679d244903778abd3.\n. Added specs and merged. Thanks for your contribution to Prawn!\n. Merged. I added some specs and cleaned up the code a bit to match our style. Thanks for your contribution to Prawn!\n. Looks like this was introduced by the new graphics state stack changes (fe254de). Might be a simple error in setting colors... evince complains about an incorrect number of arguments for the scn and SCN operators. Possibly the color spaces aren't being set on the second page. I'll see if Jonathan has any ideas.\n. Hi glendel,\nThe sorts of calculations we make in autosizing tables and subtables are prone to floating-point precision problems. We actually include a \"fudge factor\" in our internal drawing logic to account for these potential issues.\n\nIn your example, however, I think what's happening is that your internal table (from row_for_lines) is getting an autosized width (of _slightly_ over 540pt), but you specify an explicit width on the outer table. Without seeing your row_for_lines code, I can't tell whether this is the case. But the solution is probably to set an explicit width on the subtables. Here's a simpler example that might make the problem clear:\n\n```\nPrawn::Document.generate \"table.pdf\" do |pdf|\n  subtable = Prawn::Table.new([%w[one two], %w[three four]], pdf,\n    :width => pdf.bounds.width)\n  pdf.table([[subtable]], :width => pdf.bounds.width)\nend\n```\n\nIf you remove the :width argument from the subtable, you get errors, because the autosized subtable becomes only 68pt wide (the minimum space it takes to display \"one\", \"two\", \"three\", \"four\" in that arrangement). When you try to put it in an outer table with an explicit width of 540pt, you get a CannotFit error. But if you size the inner subtable to the same width, the error goes away.\n\nI'm closing out this ticket because I don't _think_ this is a Prawn problem. If you have a reduced example that shows something that should work in Prawn, please let me know and we'll look into it. Thanks!\n. Hi Glendel,\nAlthough your proposition (rounding min_width, max_width, etc.) might fix your immediate problem, it would introduce errors throughout the table drawing code. I understand that dealing with floating-point error propagation in the table code can be frustrating, but rounding the intermediate values is a cure that would be worse than the disease, in my opinion.\n\nI'll be thinking about how to gracefully handle situations like this, but I'm afraid there probably isn't an easy solution.\n\nHave you tried my idea of setting an explicit width on the outer table? That, I think, would solve your problem. If you want to discuss, the Prawn mailing list is just the place:\n\nhttps://groups.google.com/group/prawn-ruby\n\nThanks,\nBrad\n. It's a known issue with how Acrobat handles color spaces. We have a fix we are testing and it will be in master as soon as possible. Thanks for reporting!\n. Hi @tonini,\nCan you post the problematic code to the prawn-ruby mailing list (https://groups.google.com/group/prawn-ruby)? That way we can investigate and figure out if it's the same problem or a different one. Thanks!\n. Closing this for now. We may look into pdftk-like features in the future, but it's not on our immediate roadmap. \n. Thanks piglop; this is helpful. As I mentioned in another pull request, if you could put these all on a separate branch and make sure it merges cleanly against the current master, that will help me out when I get around to removing examples/.\n. I was thinking about this problem this morning... there's one remaining table example that only really exists as a regression test to make sure the corners line up, etc. So I think a visual spec suite is the right answer. As we merge this in, we'll move some of the examples as you suggested.\n\nThese should be a relatively minor component, of course. Anything that can be tested automatically probably should be.\n. Awesome. I just merged your removal of those examples. I'll wait to close this ticket until each example is either a full-blown visual test or merged into the manual. Thanks Micha\u00ebl!\n. Yes, it would probably be good to remove reference_pdfs. I don't much care what we do with \"rake examples\" between now and 1.0, as long as it goes away before then.\n\nAnd yes, please do restore anything that serves as an actual visual test. I didn't look too closely at Micha\u00ebl's commit. I'm fine with restoring anything that you'd prefer to keep around for regression purposes.\n. Hi Daniel,\nThe removal of reference_pdfs is causing some tests to error. Can you take a look and restore what's needed or fix the tests? Thanks!\n. That sounds like the best option. Thanks.\n. As of d9aad040, we now depend on the released pdf-inspector gem, so I'm closing this out.\n\nBOO SUBMODULES, YAY GEMS!\n. Nice work! Thank you. Merged.\n. Thanks for finding the problem and solving it. I've verified that this fixes the bug. I just need to craft a spec to make sure we don't reintroduce the bug later, and then I'll merge it in.\n. Fixed by 2acd109.\n. Awesome. Merged, thanks!\n. Oops, that was me. Logged in under the wrong account.\n. The :inline_format => true on that last line is your problem. The\n:cell_style hash is just a shortcut for styling all cells the same\nway, so that's basically the same as:\n\n cells.each { |c| c.padding = 12; c.inline_format = true }\n\nand you can't inline_format a subtable (the first cell of your second row).\n\nWith Prawn's API as it is, you'll have to set the inline_format\nattribute on only the text cells. There's not an easy way around this\nproblem that heterogeneous tables have to be styled heterogeneously.\nIf you don't need inline formatting on the text cells of the outer\ntable, just remove that entry from the :cell_style hash. If you do\nneed it, set inline_format on only the text cells where it's being\nused.\n\nBrad\n. I've cherry-picked 83393d5 (added rake to the Gemfile) and 891964e (ignored the rdoc directory). Closing this pull request because the original purpose has been merged. Please open new pull requests for your manual improvements and I will likely merge them as well. Having them on separate branches (manual improvements / examples removal) would be helpful, as I prefer merging to cherry-picking and I like to evaluate and deal with one conceptual set of changes at a time.\n\nThanks for your contributions to Prawn!\n. Merged, thanks!\n. Merged, thanks!\n. Prawn has no interaction with Rails. Are you thinking of Prawnto or some other code that bridges Prawn to Rails? Closing since this isn't a bug in Prawn.\n. Table cells get sized and positioned during the table() or make_table() call. If you want to change any of their settings, you have to do it in a block you pass to table() or make_table(). Otherwise you are changing the parameters after the table has been sized. It works as you expect if you move the padding line into a block passed to make_table:\n\n```\npdf = Prawn::Document.generate(\"subtable_padding.pdf\", :margin => [40, 45, 50, 45]) do\n lines = [[make_cell(\"that text is in the first line of cells\")],\n              [make_cell(\"that text should be in the second line of cells on the same page\")]]\n t = make_table([[lines]]) { |table| table.cells.first.padding_bottom = 4 }\n t.draw\nend\n```\n. The reason make_table was added was so that you could have a table that wasn't inked in order to place it in a subtable, not to allow you to tweak things after the table has been positioned. But you have a point. I'll think about what it would take to make the API a bit more friendly. The table does a bit of a complicated dance to make sure the sizing and layout constraints are all honored, so it will take a bit of thought.\n. Hi mat813,\nFYI, I just pushed a commit to master that fixes the issue you saw with text being unbalanced in table cells.\n\nhttps://github.com/sandal/prawn/commit/bc7c3b4b690f6a7468ebb800db1da3a7e8bb2db0\n. It sounds like you're suggesting that we try to do some sort of global optimization and minimize the number of broken words; is that right? I wouldn't consider the current behavior of your example a bug just because words have been broken -- because in order not to break words, you have to sacrifice width in other columns.\n\nIt sounds like what you are suggesting is to have Prawn expand the \"TotalQuantity\", \"Price\", and \"Dealer\" columns, in order not to wrap them. But of course that means we have to sacrifice width from some other column, which might cause words to be broken (repeating the whole process). So there's no easy solution short of global optimization.\n\nWe can definitely consider this as a feature request, but it will require some further discussion and exploration of the corner cases (the mailing list would be best for that). But like I said, I don't think the current behavior is a bug, unless I'm misunderstanding you.\n. Closing this issue as @jonsgreen closed its pull request #216.\n. Closing as dupe of #214. Github's new issue tracker shows pull requests inline with issues now, so we don't need both of them around.\n. Ignore case on font file extensions\n\nThanks to elberskirch for filing the bug. Closed by 01f8c5a02fea48ea6052604fabf279e44b39de3a.\n. Thanks for noticing this, Dominik. I ended up just using case-insensitive regular expressions so that case will be ignored. Thank you for your contribution to Prawn!\n. We're working on a gem release soon. It's in the works, we're all just busy.\n. Hi Jon,\nThanks for your bug report and patch. Once this is tested sufficiently, I'll merge it. I can try to write the tests if you're not sure how to test it, but the basic idea I think I'd use is something like this (off the top of my head):\n\n```\nbounds.indent(...) do\n  3.times do |column|\n    bounds.left_side.should == ... # some expression like: offset + (column * spacer)\n    bounds.right_side.should == ...\n    bounds.move_past_bottom # move to next column\n  end\nend\n```\n\nIf you can make that work, I think it will be ready to merge.\n\n-be\n. Superseded by #303, which also handles right indents. Thanks @joncanady for your work on this.\n. Merged. I cherry-picked these which led to a few merge conflicts, so the pull request didn't get closed properly and I got attributed as the author. Sorry about the mess. Thanks for your contribution, Micha\u00ebl!\n. Reference:\n\nhttps://github.com/sandal/prawn/commit/402913176526c0e0fe5f194ab477d28a8ed57b9d\nhttps://github.com/sandal/prawn/commit/a19ef4c3a771377ba69e105e6b309870b793f152\n. Hi there,\nI used your patch as a starting point and developed a method that still passes our other cell / table specs (and added a few specs for the new behavior). Thanks for the bug report and patch!\n\nI'm going to take a look at your other epsilon patch later and see if it fixes some of the outstanding bugs we have with subtable nesting. It needs to be unified with the other epsilon mechanism we have to fix floating-point problems, though (grep for FPTolerance).\n\n-be\n. Closing; this doesn't look like a Prawn problem. Take a look at the rest of your infrastructure (as Bluejade mentioned, Rails or your background job workers) to see why that file isn't getting reloaded.\n. Merged, thanks for your well-tested patch!\n. Hi joren,\nSorry for the trouble. When we updated the stable branch based on the 0.11 release, we clobbered the old stable branch which had a few extra commits on it. I've pushed cdff170 to a new branch called old-stable, so Bundler should be able to find the commit now.\n\n-be\n. Merged, thanks!\n. Neat! @sandal, what do you think about this? Do you want it in core or should we try to combine this and @yob's prawn-forms as a more full-featured Prawn form plugin?\n. Agreed on 1.0 vs 1.1. I'll tag this as a 1.1 feature and we'll try to merge prawn-forms in as well.\n. Are you sure you're running the same code in both circumstances? I only ask because the text on the \"prawn-bug.pdf\" certificate doesn't match the text in your gist. Can you post the code that is actually generating the bad certificate?\n\nThanks!\n-be\n. If you could post the actual code, it would be helpful. I can't immediately think of anything in Prawn that would cause this behavior, so I'd like to see the actual code that's been giving you trouble so I can rule out some common causes of error (unless you've been having problems while directly running that gist example you posted).\n. Good catch. Fixed here:\n\nhttps://github.com/sandal/prawn/commit/5c2a07e6fcb17cc62e0fb18c06d556977ddfdcf5\n. Hi there,\nI don't think this was overwritten. We still have the merged code on the master branch, for example:\n\nhttps://github.com/sandal/prawn/blob/master/spec/object_store_spec.rb#L161\n\n-be\n. Awesome. Thanks for the fix -- merged.\n. Thanks DefV for reporting the issue. As soon as I can get some time to write a good spec and fix the issue, this will be resolved.\n. Hi DefV,\nSorry it took so long to get a fix in place; things have been quite busy. This should now be resolved on Prawn master. Thanks for your contribution to Prawn!\n\nBrad\n. Merged, and added a note that Bundler should be installed first. Thanks for your patch! -be\n. There is a pretty decent comment to this effect in text/box.rb, where the return value of text_box() is documented:\n\nhttps://github.com/sandal/prawn/blob/master/lib/prawn/text/box.rb#L97\n\nWe can reopen this if we see a need for more detailed documentation, but for now I'm closing.\n. Hi @mbklein, did you mean to close this pull request?\n. I nearly click that button by accident every time.\n\nThanks for the bug report and patch. I'll be looking into it soon.\n. Sorry for the delays; this has now been merged. Thanks for your contribution to Prawn!\n. This should now be fixed in master. Thanks for your patience!\n\n-be\n. Closing this as it's not a defect in Prawn.\n. Can you post a minimized example that we can run to reproduce the problem? That would help us troubleshoot what's going on. Thanks!\n. This code is working fine for me with Prawn master, and generates a document that Acrobat has no trouble reading:\n\n``` ruby\nPrawn::Document.generate(\"243.pdf\", :page_size => \"A4\", :left_margin => 55) do\n  font \"times.ttf\"\n  image \"data/images/prawn.png\", :scale => 0.7, :at => [-85, 820]\n  line_width 10\n  [[-15,713,510,713]].each { |points| stroke_line(*points) }\n\n  move_down 80\n  text \"Hello world!\"\nend\n```\n\nIf you can modify that example to show your problem, please re-open the ticket with the new code and I'll take a look. Thanks!\n. I can't reproduce this problem with Prawn master. The following code gives me three lines of text that are right-aligned with the right edge of the text box:\n\n``` ruby\nPrawn::Document.generate \"245.pdf\" do\n  w = 60\n  bounding_box [0, cursor], :width => w, :height => 200 do\n    stroke_bounds\n    text_box \"line one\\nline two\\nline three\", :width => w, :align => :right\n  end\nend\n```\n\nPlease reopen the issue if you can provide a reduced test case that demonstrates the problem. Thanks!\n. Reopening the issue. Thanks hidakatsuya for the test case.\n. This issue has been fixed. The problem was that some TTF fonts specify a nonzero width for the newline character. I have patched our TTF-level width method to always return zero for newlines. Thanks for helping me track down the problem!\n. @forrest: Can you please give a full example that demonstrates the problem, including the Prawn version you're running?\n. @forrest: That's a different problem. If you don't specify explicit widths, Prawn assigns widths roughly proportionally to the amount of content in each column. That's what you're seeing. If you want a certain width rather than let Prawn guess, you need to set it manually.\n\nAlso, the :position => :right isn't the same thing as the original bug. This bug was about text boxes that were :align => :right (right justified), while :position => :right just puts the table at the right side of the page (leaving the text left-aligned within a cell).\n. Right now, there's not an easy way to do this, because tables use `Prawn::Document#width_of` to calculate the \"natural\" width, and width_of isn't really that smart about multi-line text:\n\n``` ruby\npdf = Prawn::Document.new\npdf.width_of(\"foo\") #=> 16.68\npdf.width_of(\"foo\\n1\") #=> 23.352\n```\n\nYou might be able to do something like the below, if your lines are short. However, this will break if any of your lines are long enough to wrap, because in that case you _don't_ actually want your table width to be the same as your longest line width:\n\n``` ruby\ntext = \"foo\\nbar\\nbaz\"\nwidth = text.split(\"\\n\").map { |line| pdf.width_of(line) }.max\npdf.table([[\"cell 1\", text]]) { |t| t.column(1).width = width }\n```\n\nCheers,\n-be\n. This patch leads to two test failures:\n\n 1) Failure:test_spec {Text::Formatted::Box wrapping} 003 [should wrap between two fragments when the preceding fragment ends with white space](Text::Formatted::Box wrapping)    [spec/formatted_text_box_spec.rb:47:in `block (2 levels) in <top (required)>'     /Volumes/Home/Users/bradediger/.rvm/gems/ruby-1.9.2-p180/gems/mocha-0.9.12/lib/mocha/integration/test_unit/ruby_version_186_and_above.rb:22:in`run']:\n<\"Hello World\\n2\"> expected but was\n<\"Hello World\\n 2\">.\n\n  2) Failure:\ntest_spec {Text::Formatted::Box#render} 003 [should be okay printing a line of whitespace](Text::Formatted::Box#render)\n    [spec/formatted_text_box_spec.rb:331:in `block (2 levels) in <top (required)>'\n     /Volumes/Home/Users/bradediger/.rvm/gems/ruby-1.9.2-p180/gems/mocha-0.9.12/lib/mocha/integration/test_unit/ruby_version_186_and_above.rb:22:in`run']:\n<\"hello\\n\\nworld\"> expected but was\n<\"hello\\nnworld\">.\n\nIf we had a failing test case, we'd be able to figure out what's going on here. The fix may just be as simple as to_s'ing the buffer before munging it.\n. The \"Cannot modify SafeBuffer in place\" error has been removed in recent versions of ActiveSupport. The following commit in Rails made it possible to use bang-methods on SafeBuffers:\n\nhttps://github.com/rails/rails/commit/594603b45f1248380068c4a32ac62283fe061e82\n\nGiven that 1) this should present no problem for users of newer versions of Rails, and 2) there is a workaround for users of affected versions, I'm closing this out. Please let me know if the problem recurs on newer Rails versions. Thanks!\n. Hi i2dave,\nCan you post an example of the documents you're having trouble with? Looks like there's something in the template PDF that Prawn doesn't like, and we'll need the actual file you're trying to import in order to troubleshoot. If you don't want to post the file publicly but you trust me, you can email it to me (firstname dot lastname at madriska dot com).\n\nThanks,\nBrad\n. Hi Dave,\nPrawn is an open-source project driven by members of the community. Features generally get implemented as people feel like working on them. If you'd like to develop a patch to make Prawn support multipage PDFs, feel free to submit a pull request and we'll take it under consideration.\n\nThanks,\nBrad\n. With 16 points of height and the standard 5pt of top / bottom padding, I think you just didn't give yourself enough vertical room to see the valign working. Notice what happens if you change the \"height: 16\" to \"height: 160\" -- for me, it clearly aligns to the vertical center. You can change the default padding with the :padding cell style.\n\n-be\n. Seems to be working fine for me with edge Prawn. Here's the exact code I used:\n\n``` ruby\n$:.unshift 'lib'\nrequire 'prawn'\n\nPrawn::Document.generate 'alignment.pdf' do |pdf|\n  test_items = Array.new\n  test_items << ['Date:', '08/07/2011']\n  test_items << ['Our VAT No:', 'GB1234566']\n  test_items << ['Our Ref:', 'xxx/yyy']\n\n  pdf.table test_items do |t|\n    t.width = 200\n    t.cell_style = {:size => 9, :padding => 2, :borders => []}\n    t.column(0).style(:align => :right)\n    t.column(1).style(:font_style => :bold)\n  end\nend\n```\n\nand the result:\n\nhttp://i.imgur.com/7dRdo.png\n. Looks like the word \"VAT\" isn't getting kerned properly in Prawn::Document#width_of. It would appear that width_of is returning the unkerned width, which is a point or two wider. I'm not sure how far down this rabbit hole goes, but I'm looking into it. Thanks!\n. Got it. The function that computes text width (most noticeably when using non-ragged-right text) was ignoring the kerning status of the text fragment. This has been fixed. Thanks for your sharp eye!\n. Please note that Prawnto was written by a third party against Rails 2. It was never an official project of the Prawn team, and it hasn't seen new development in quite a while. Here's what the Prawn team recommends for using Prawn in Rails:\n\nhttps://github.com/sandal/prawn/wiki/Using-Prawn-in-Rails\n\nI'm closing out this issue because as a segfault, it's not a Prawn issue but sounds like a problem with Ruby, Ubuntu, gcc, or some combination of the above.\n. Thanks @hidakatsuya for reporting this bug. It has been fixed on the master branch.\n\n@Bluejade, can you please review my changes for any adverse impact you might see to the text engine? I assumed that based on the current code, width_of should act as if character spaces were included before and after every character (so a 7-character string with 10pt character spacing would add 70 pt to the string's natural width). But hidakatsuya's code above subtracts 1 from the character length, yielding 60pt in my example. That might be more natural, but I'll leave that up to you.\n\nBrad\n. Thanks for the report, I'll look into it.\n. Hi there,\nIf you check out the latest master, this issue specifically with float() is mostly resolved. However, it was not the most pure solution, and I'm still not quite sure if there's a clean way to solve the general problem. Technical explanation follows.\n\nThe basic problem is that float (before today) just saved and restored your y-position on the page. When you put 52 lines on the page, your y-position is \"at the bottom\". So when you floated another line of text, you were kicked to the next page. When the float block ended, it dutifully restored your y-position... at the _bottom_ of the 2nd page. The next text() call kicked you to the third page, which led to the problem you reported.\n\nI've worked around this with two different changes:\n1. (d307c37) float() is now more intelligent than just saving and restoring your y-position; it now detects whether you have moved to a different page during the block and takes you back where you started from. Alone, this would be no good because you would be left at the bottom of the first page, and overflowing would still start a third page. So...\n2. (2ff910a) The text engine now knows when you are overflowing a page that is not at the end of the document, and moves you to the top of the next page instead of starting a new one at the end of the document. \n\nHopefully these resolve your issue with float(). We can't solve the problem in general if you're just handling your y-positions using the lower-level calls like Document#y=, but I think this should at least solve the float issue.\n\nThanks for your bug report!\n. Fixed at master. Thanks for finding the bug!\n. This error has been fixed. Thanks for finding and reporting it!\n. We don't currently support images or form elements in tables, but it's on the list. See issue #122.\n. Are you using an old version of Bundler? It's arguably a Bundler issue, and I think this problem has been fixed -- see:\n\nhttps://github.com/carlhuda/bundler/issues/497\n. Hey @serussell,\nThis should be fixed now. Give it another try. Note that I fixed the API for destinations to take a Page reference, so you can add a ref to the current page just with:\n\n```\nadd_dest(\"dest1\", dest_fit_horizontally(cursor))\n```\n\nwhich is short for\n\n```\nadd_dest(\"dest1\", dest_fit_horizontally(cursor, page))\n```\n\nLet me know if you have any further trouble. Thanks!\n. I'm pretty sure this commit fixed that error:\n\nhttps://github.com/sandal/prawn/commit/e2ee4e7f\n\nPlease try with a newer version of Prawn (or run from git master) and let us know if the problem recurs. Closing out this ticket for now unless we can reproduce the problem on master. Thanks!\n. It's a known issue with Chrome on Ubuntu. I'm not sure if there's a fix yet, but Chrome on Ubuntu seems to have this bug with any PDF file, not just those generated from Prawn.\n\nSee this ML thread:\nhttps://groups.google.com/group/prawn-ruby/browse_thread/thread/214cdd0b9679e2aa\n. Performance was the reason it hasn't been done that way yet, but I can't prove that it's a terrible idea. From a quick look at the code, we're using transactions a lot less in Prawn's internals than I thought we were. It might be worth some benchmarking to see what breaks with this approach (intellectually impure as it may be).\n. Applied, thanks!\n. I pushed an updated 1.0.0.rc1 manual just before its release. We'll need to push again just before the final 1.0 release because we'll hopefully have a foreword to the manual by then.\n. group() doesn't interact with the text-box system. It's a fairly simple wrapper around transactions:\n\nhttps://github.com/sandal/prawn/blob/master/lib/prawn/document.rb#L513\n\nSo it wouldn't really make sense, from the perspective of Prawn's internals, to add a width to a group.\n. You should probably post to the mailing list with details about what you're trying to accomplish. We can move back to the bug tracker if we identify a bug in Prawn.\n. Hey Greg, we've got a 1.0.0.rc1 out now. Can you write up a foreword before the 1.0 drop? Thanks!\n. Neat idea. This won't make it for 1.0, but it doesn't look terribly hard to add.\n. Released pdf-inspector 1.0.1 and ttfunk 1.0.3. Bumped prawn's dependencies in 50ab731.\n. Merged in pull request #280. Thanks for your contribution to Prawn!\n. Good idea. I've added this via an option to the fill / fill_and_stroke operators: just pass in :fill_rule => :even_odd.\n\nI also added a page to the manual with a visual example of the difference between the two rules.\n\nThanks!\n. @tkuisma @cforce Did you experience the problem on Prawn master or on the RC1 release? I believe the issue has been fixed on the master branch. Please advise if you still have issues there.\n. 0.12.0 is old (yes, I know it's very old but I personally haven't had time to cut another RC). If you use prawn from the master branch, it should be fixed.\n. The branch is `master`. It's the mainline for current development.\n\nThere is no tag because we haven't cut a new release yet.\n\nIf you're using Bundler, you can follow this branch with:\n\n``` ruby\ngem 'prawn', git: 'git://github.com/prawnpdf/prawn', branch: 'master'\n```\n. The header is just the first row, so you can style it with:\n\n```\npdf.table(data) do |t|\n  t.row(0).background_color = 'ff0000'\nend\n```\n. Thanks for the comment. I've added a note to the manual's introduction.\n. The calculations get rather complex when you start looking at optimizing in two dimensions, and we're running into enough problems with width calculations. I'd rather defer this one for now. \n. The :cell_style option unconditionally sets attributes on cells, and thus overrides anything you've already provided. There might be other things that break too if you're passing in already-styled cells. For the moment, in Prawn, cell styling should be done in the :cell_style hash or the block only. The latter code snippet you posted is how I would do it.\n. Merged, thanks. \n. The origin of a bounding box is its top-left corner, which in this example is (100,300). So the code as written is correct.\n\nAs an aside, note that Prawn's manual is self-documenting. The code you see on the manual pages is directly executed in order to generate those manual pages. If you change the bounding box origin to [100, 100] and run `rake manual`, you'll see that the rectangle moves down the page by 200pt.\n. I've added a sentence that clarifies this in the manual. Thanks.\n. There seems to be decent demand for this, so I'll reopen.\n. Sorry for having taken a while to get back to this. This appears to be an instance of a known issue that we're going to try to address after 1.0 is released. See #268.\n. Yeah, it's a bit of a tricky situation since we keep so much information in the page objects. It's a balancing act between catching all of the edge cases (like transactions spanning multiple pages) and keeping the snapshots small. I intend to take a close look at the problem when I can make some time, and hopefully we'll find a good resolution. Thanks for the report!\n. Good catch. Fixed on master.\n. Merged. Thank you for your clean patch. Please let me know if there's anything we can do to make your packaging work easier.\n\nBrad\n. Merged. Thanks for your contribution to Prawn!\n. Do you have a lot of PNG images with alpha channels? That's the usual culprit for slow rendering. The PDF format requires these to be manually split out into an image and a mask, so Prawn has to do that work in Ruby which can be slow. You can use prawn-fast-png to delegate this work to ImageMagick:\n\nhttps://github.com/amberbit/prawn-fast-png\n\nIf it's not that, you'll want to profile your application (using ruby-prof or similar) to find out where the hot spots are. We can help at that point to see if it's something in Prawn that's slower than it needs to be. Tables could be slowing it down, but it's impossible to know without an example.\n\nAs for file size, make sure to pass :compress => true to the Prawn::Document constructor. If you're using Prawn's template, snapshot/rollback, or grouping features, also pass in :optimize_objects => true to GC dead objects out of the document before committing it to a file.\n\nI'm closing this ticket out because there's no evidence that it's a bug in Prawn. Feel free to open a new issue if you have a reproducible test case, or start a discussion on Prawn's mailing list if you want to discuss:\n\nhttps://groups.google.com/group/prawn-ruby\n\nThanks for using Prawn!\nBrad\n. Fixed on master; thanks for pointing this out.\n\nI did not see any indent-based specs break as a result of this change. Let me know if you're getting failures.\n. Merged. Thanks for your contribution to Prawn!\n. Closing this out since this isn't a bug. The mailing list works for these sorts of questions. Thanks!\n. This has been fixed on the master branch and will go out in the next gem release of Prawn. Thanks!\n. This is unlikely to be a Prawn problem. Please use [Prawn's mailing list](https://groups.google.com/group/prawn-ruby) for community support. If you can come up with a test case that we can reproduce, feel free to open another issue. Thanks.\n. Hi there,\nIt looks like you're using an old version of Prawn's API. Colspan / rowspan support was removed in version 0.8. However, I have added back basic colspan / rowspan support today on Prawn's master branch. Try out the master branch from git if you'd like. With Prawn's new API, you'll have to change your :text arguments to :content.\n\nCheers,\nBrad\n. Does this do anything that putting a table in a bounding box with a defined height wouldn't? I don't think we should add this to Prawn::Table unless it can't easily be accomplished otherwise.\n. I actually work on a number of documents like this, where we needed to start a table partway down the first page, and continue on subsequent pages but leaving room for the footer on every page. For example, we have a billing system that prints a large header on the first page (with addressing information), then start a table of account activity that may continue on for several pages. This sounds like it's what you're trying to do.\n\nThe way we solve this is to start a bounding box and then modify the y-position for the first page. It works something like this:\n\n``` ruby\n  # ... draw your first-page header here\n  # Store away the y-position below the header on the first page\n  old_y = y\n  # Start a bounding box the size of the page (excluding the footer)\n  bounding_box([bounds.left, bounds.top],\n      :width => bounds.width, :height => bounds.height - FooterHeight) do\n    # Restore the old y-position for the first page\n    self.y = old_y\n    table(...)\n  end\n```\n. Merged, thanks!\n. Merged. Incidentally, this commit adds our thousandth spec (at least on Ruby 1.9). Congratulations!\n\nThanks for your contribution, Wes.\n-be\n. This is now fixed on the master branch. Thanks for filing the bug!\n. Closing as duplicate of #317. Thanks!\n. Looks good. :+1:  @yob do you have time to merge and sanity check? Looks like it doesn't currently merge cleanly but I have no idea how extensive the issue may be. I don't see anything egregious.\n. What version of Ruby, Rubygems, and Bundler are you using? Can't reproduce the problem on Ruby 1.8.7-p352, Rubygems 1.8.10, and Bundler 1.0.21.\n\nSwitching your application to the [Syck parser](http://stackoverflow.com/a/5107098) may help, but that would just be a workaround as this error probably indicates some invalid YAML somewhere in the process.\n\nBrad\n. 1.0.0.rc1 is a prerelease build (anything with letters in the version string indicates a prerelease). So you're actually getting the latest stable, 0.12.0.\n. Hi Adrian,\nI think you mentioned you got this resolved by upgrading Ruby. Let me know if you have further issues.\n\nThanks,\nBrad\n. It seems to be working for me under Prawn master. You may be using an outdated version of Prawn. If you can provide more information to confirm that this is a bug with a current version, let me know and I'll look into it.\n. This Gemfile works great for me, as a test:\n\n``` ruby\nsource :rubygems\n\ngem 'prawn', '~> 1.0.0.rc1'\n```\n\nMake sure you specified the exact version listed above, i.e., there must be a period between the final 0 and the \"rc1\".\n\nBrad\n. Just pushed a fix to master. Thanks for finding this!\n\nBrad\n. Transparent PNGs have to have their alpha channel split in order to be embedded in PDFs. That's a memory-intensive process in Ruby. The workaround, if you're willing to depend on ImageMagick and RMagick, is to install prawn-fast-png:\n\nhttps://github.com/amberbit/prawn-fast-png\n. @alexdowad: It is mentioned in the documentation and has been for over two years:\n\nhttps://github.com/prawnpdf/prawn/blob/master/lib/prawn/images.rb#L17\n\nAs much as I would like not to have this problem, it's intrinsic to the PDF format, which does not natively support transparency in images. Prawn has to convert the PNG file into an image blob and an SMask for the alpha channel, and the processing has to be done somewhere. Since Prawn by design is a pure-Ruby library, this can be pretty allocation-intensive. I'd definitely accept patches that reduce the number of allocations, but ImageMagick, being written in C, is likely to always be faster and more memory-efficient.\n\n-be\n. @alexdowad, good point. I've added a note about the memory consumption. Thanks!\n. This is probably a decent idea. \n. Merged. Thanks @joneslee85 !\n. Pushed a commit that should fix this for border and padding. \n\n@raskhadafi Sorry for the long wait; if this problem is still relevant to you please let us know if it is resolved on the master branch.\n. As we discussed on the mailing list, @jaybrueder's issue needs more information and @dom1nga's issue is a current limitation of Prawn (doesn't support GIF images). Let's keep this to the mailing list unless we identify an actual bug in Prawn.\n\nThanks!\n-be\n. As @sandal mentioned, that's perfectly valid Ruby 1.9 hash syntax.\n\nAs for your colspan issue, colspan wasn't added on master until after 1.0.0.rc1. You can use Bundler to depend on the git version of Prawn if you want colspan support.\n\n-be\n. Fixed, and updated the reference to point to our new manual (the examples have been removed and replaced with the self-documenting manual).\n\nThanks!\n\nBrad\n. I've seen this happen on Ubuntu, but with all sorts of PDFs from many sources, not just the Prawn manual. I don't think it's a Prawn problem since Acrobat on other platforms seems to read it fine and since I've seen the problem in PDFs from many other places.\n\nBrad\n. Ah, yes, I have definitely seen this with Chromium on Ubuntu.\n\nOn Tue, Apr 10, 2012 at 1:48 PM, Evgeny Neumerzhitskiy\nreply@reply.github.com\nwrote:\n\n> I was wrong. I thought this bug was in Adobe Reader, but in fact, it was in Google Chrome browser. I though Chrome was using Adobe Reader extension to display PDFs, but it actually renders it as HTML. And does it incorrectly.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/prawnpdf/prawn/issues/337#issuecomment-5053288\n. Have you tried this on Prawn'\n. Sorry, hit Submit too soon. Have you tried this on Prawn's master branch? I fixed a TTF font-metrics issue that was causing a problem like this a few months ago.\n\n-be\n. I don't have an ETA on the gem, but I think this is in the 1.0.0.rc1 prerelease gem. (gem install prawn --pre)\n. This is probably more of a question for the mailing list, but I'll take a crack at it here...\n\nI'm guessing the graphics state on those pages that you are trying to draw on is in an unknown / different state. I haven't tried this out, but you could try using Prawn's stamps (which create a self-contained object that is only embedded in the page once), and stamping it on each page. This may give enough of an independent context on each page to make formatting consistent.\n\n-be\n. Looks good to me. @Bluejade, what do you think?\n\n-be\n. Merged. Thanks!\n. Are you sure that the specific TTF font file you're embedding has the exact characters you are trying to embed? Please also note that Prawn's text methods expect all text passed in to be UTF-8 encoded. If you're using ISO-8859-5 or anything else, you'll need to transcode to UTF-8 first.\n\nBrad\n. That's CSS syntax and won't work with Prawn. (Prawn accepts a limited HTML subset via :inline_format, but there's no full HTML parser and no CSS support.)\n\nI'm talking about how you specify the TTF font file for the font you want to embed, like this:\n\nhttps://github.com/prawnpdf/prawn/blob/master/manual/text/utf8.rb#L24\n. Can you give an example of the problem you're trying to solve? Your approach seems pretty brittle as we don't commit to the internal API. Prawn currently expects all widths / heights to be set on table creation time, usually in the block passed to table().\n\nThe Prawn mailing list is probably the best place to have this discussion:\n\nhttps://groups.google.com/forum/?fromgroups#!forum/prawn-ruby\n\nBrad\n. Can you reproduce this error outside of your application? It seems rather odd that it is dependent on store_name's length but also goes away if you remove the unrelated lines 3 or 4. If you can make the problem happen with a fixed set of data (just a script that runs against Prawn outside of your application's environment), it will be a lot easier to determine if it's a bug.\n. Thanks @mkastner. Simpler test case reproducing and clarifying the issue:\n\n``` ruby\nPrawn::Document.generate('test.pdf') do\n  content =  \"blah \" * 20 + \"Hy#{Prawn::Text::SHY}phe#{Prawn::Text::SHY}na#{Prawn::Text::SHY}tion\"\n\n  text(content) # hyphenated correctly\n  text(\"#{content}\\n\") # hyphenated incorrectly\nend\n```\n\nLines ending in `\\n` are triggering hyphenation at every soft-hyphen point, not just the one they are broken on.\n\nFrom reading the code, this appears to be caused by the fact that `:exclude_trailing_white_space` is present in the format hash of the correct example, but not in the incorrect one -- because this is [explicitly disabled when the line ends in a newline](https://github.com/prawnpdf/prawn/blob/master/lib/prawn/core/text/formatted/arranger.rb#L259). This causes Prawn::Text::Formatted::Fragment#process_text [not to remove the soft hyphens](https://github.com/prawnpdf/prawn/blob/master/lib/prawn/text/formatted/fragment.rb#L206), so they are rendered.\n\n@Bluejade, can you clarify the purpose of `:exclude_trailing_white_space`? From my reading, it appears to be used to exclude trailing white space from width calculations. What was the reasoning behind `process_text` skipping soft-hyphen processing on fragments where this option is enabled?\n\nThanks!\n-be\n. It's probably easiest to use something external like pdftk to merge the PDF documents after the fact.\n. You need to make sure you're using a TTF font that has the characters you're trying to use. And make sure that all of your text is UTF-8 encoded before passing it into Prawn.\n\nSorry, Prawn has no native Rails support and thus no integration into the asset pipeline. You are free to use Prawn inside Rails to generate documents using any combination of techniques you'd use in a regular Prawn document, but we don't have any special integration.\n\n-be\n. You can place your fonts anywhere you like, and reference them by absolute path using `font`, something like:\n\n```\npdf.font(Rails.root.join(\"app/fonts/my_font.ttf\"))\n```\n\nI think Prawn::DATADIR was added after our latest gem release, so you can replace that with \"#{Prawn::BASEDIR}/data\" if you need things under Prawn's data directory.\n. That syntax (font_families = ...) is just creating a local variable, not updating Prawn's font registry. Also, you need to follow Prawn's syntax for defining your own fonts. Try something like this:\n\n``` ruby\nfont_families.update(\"GESSTwoMedium\" => {:normal => \"#{Rails.root}/app/assets/fonts/GE_SS_Two_Medium.ttf\"})\nfont \"GESSTwoMedium\"\n```\n. This was fixed in f89cc44b. I don't believe it's in the latest gem release (1.0.0.rc1), but it's on master if you need it.\n\n-be\n. Merged, thank you!\n. Great idea. Done, thanks!\n. We sort-of deliberately keep our distance from HTML, because the closer we get, the more people start to expect this simple parser to become a full HTML parser, and that's not what Prawn is about. I know this creates hassle for some people, but I think it encourages people who have this need (WYSIWYG editing) to think harder about exactly what they need to support.\n\n@Bluejade, what do you think about this?\n. I could get behind this approach. I agree that it wouldn't be part of core Prawn, but it would be great if we extended Prawn's architecture to support pluggable parsers.\n\nAre you volunteering to do this work, or just making the suggestion? I, for one, don't have the time or inclination to actually implement anything along these lines. Thanks!\n. @Bluejade, thoughts?\n. @yob I have only a surface familiarity with the font code, but this looks fine to me.\n. Merged, thank you!\n. The issue with sizing styled text was fixed in 373cc430, which as of now is only available in the RC version of prawn (1.0.0.rc1). See issue #167.\n\n-be\n. I think the more fundamental problem is that Reference#referenced_objects doesn't know about OutlineRoots / OutlineItems. The outline items are reachable from the root (in a sense -- the outline root is stored in root.data[:Outlines]), but the GC marking algorithm doesn't know that OutlineRoots / OutlineItems can have children.\n\nI'd rather teach referenced_objects about OutlineRoot, as it will GC the actual outline objects, which may matter to someone.\n. Forgot to mention: here's the method I'm talking about.\n\nhttps://github.com/prawnpdf/prawn/blob/master/lib/prawn/core/reference.rb#L95\n. Fixed by #362.\n. Merged to master. Thank you for your contribution!\n. Argh, that mathn \"feature\" causes the most unnecessary breakage. Thanks for the report and the patch; merged.\n. You're going to have to provide some more information about what you're trying to do, or a code sample that you don't think is working. You can try the Prawn mailing list for assistance:\n\nhttp://groups.google.com/group/prawn-ruby\n. Sorry, this isn't currently possible in Prawn. If someone wanted to make a well-tested patch to support this feature, I would welcome it.\n. Merged #370.\n. Merged. Thank you!\n. From your example, I'm not sure what the problem is that you're trying to show. Can you explain further?\n\nThere is one slightly non-intuitive behavior of tables in spans that is by design and that we rely on. That is that when tables wrap to a new page, they start at the top of their bounding box (or span) rather than their start position on the first page. We use this, for example, in billing systems to have a longer header on the first page, followed by continuation pages with a shorter header and longer table.\n\nIf that's not the problem you're seeing, post more details and someone may be able to help.\n. A span is basically a bounding box without a height, so it is always \"stretchy\" (will never limit height on its own). If you need to reserve some space for the footer, you should use a bounding box with a height.\n. Merged. Thank you!\n. Have you tried this on master? I believe I fixed this problem in 373cc430.\n\n-be\n. You should try the master branch or at least the 1.0 RC (gem install prawn --pre), as I believe it includes your fix. IIRC, this fix was not included in the latest stable gem, 0.12.\n\n-be\n. ```\ngem 'prawn', '1.0.0.rc1'\n```\n. Nice catch! Merged.\n. Nice! Merged, thank you.\n\nOn the specs, you should note that these aren't RSpec specs, so running them under the `rspec` binary probably won't work. If you haven't tried it, just try running `rake`.\n. Yes, I try to run all of the specs before pushing any merge. Thanks for the double-check.\n\nThe only style note that I have is on your line 104 -- I prefer these parallel assignments to be broken out onto separate lines, as it makes the fact that they are parallel more clear and shortens line length. But that's definitely a personal preference and the only issue I see with that code. Thanks!\n. Sorry everyone, I know lots of you want another release. There are no blockers that I know of for RC2, the big holdup is getting the release together which is a lot of grunt work.\n\nIf someone wanted to write out a changelog for RC1..master based on the format you see here, that would be a great help:\n\nhttps://github.com/prawnpdf/prawn/wiki/CHANGELOG\n. I'd like to get 1.0 out the door as much as we all do, but it brings a whole lot of other things that the team wants to see done before 1.0:\n- license review\n- manual / documentation sweep and cleanup\n- web site refresh\n- any last blockers that we may be OK with for an RC but not for a major version bump\n. OK, I understand the class_eval(string) issue and I'm OK with your solution. I would prefer the approach where all allowed methods are defined in advance; it's a bit obfuscatory, but in my mind a bit better than method_missing. It's a value judgment, I guess.\n\nAs for the \"width of M\" thing, that's my (admittedly hacky) code. As I recall, its sole purpose is working around some pathological edge cases of text sizing. I think the issue was that the previous interaction between the table sizing code and text wrapping would happily create a column of width too small to render even a single character, at which point an infinite loop ensued as the wrapping code created new lines, each too narrow to render any text. Using a minimum width theoretically large enough to ensure that we can at least write one character per line fixed this problem.\n\n(I know that using the width of \"M\" is a terrible, Anglocentric choice, and I'd welcome any fixes that actually use the notion of \"the widest glyph in this font\" or, even better, \"the widest character in this possibly styled string\".)\n. Oh, and if you're asking about naming, I prefer `styled_width_of_single_character`.\n. I can't imagine that they would; it's probably fine to remove the block\nthen.\n\nOn Sun, Aug 12, 2012 at 8:18 PM, Alex Dowad notifications@github.comwrote:\n\n> Brad, I have found that none of the \"shape\" methods in Prawn::Graphics(such as\n> circle, rectangle, etc.) actually use a passed block. Do you think it's\n> possible one of them might make use of blocks in the future?\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/prawnpdf/prawn/pull/381#issuecomment-7681797.\n. Merged. Thanks @alexdowad for your tireless performance work!\n. See #381, which has some performance improvements that involve re-architecting this method_missing code path. We'll revisit this issue once that refactoring is complete -- I've noted your concerns on #381.\n. See #384. The core problem comes from blindly trusting the user's input, not from a bug in Prawn. The ability to include arbitrary fonts or images from disk is a feature in Prawn, not a bug. If you want to allow and end user to specify images or fonts while whitelisting or blacklisting certain ones, you need to implement that sanitize in user code.\n. I don't think this is a Prawn issue. It's akin to saying that Ruby's `File.open` contains a bug because it can overwrite arbitrary files that the user has permission to write. Using Prawn with unvalidated user input is a bug in application code, not in Prawn.\n\nAdditionally, refusing to overwrite existing files wouldn't fix this issue anyway -- you could do the same amount of damage, say, by creating ~/.profile if it didn't exist.\n. See my answer to #384 for general policy. We shouldn't prohibit Javascript link targets in Prawn, because some applications might want them, and whitelisting against them would break that behavior. If you want to allow user-provided links but not allow users to create Javascript links, you should do the whitelisting at the application level.\n. Can you provide either a PDF that triggers the error, or a stacktrace of the error itself? Otherwise we're just guessing as to what happened.\n\nAs for why the rescue doesn't seem to work, my guess is that by the time you hit the NameError, the damage is already done and you can't necessarily just keep on using the document.\n. Confirmed that this is a bug. It occurs because `group` patches up the current bounding box's `move_past_bottom` method, but if a new bounding box is started inside the `group` call, its `move_past_bottom` is unmodified. Thinking through a few ways we might solve this.\n. Merged, thanks for the awesome updates!\n\nI also added f30d8599, which turns on `:optimize_objects` and `:compress`, reducing the manual size to under 800k.\n\nNew manual has been uploaded to http://prawn.majesticseacreature.com/manual.pdf.\n. It's my understanding that xpdf is basically unmaintained at this point. My distribution of choice (Gentoo) doesn't even offer it anymore.\n\nCan you give an example of a file that you're having trouble with? I can't guarantee anything, but I can try to look into it. \n. Merged. Thank you!\n. Thanks @jordanbyron. @agnessa, please let us know if you still have this issue after trying this out on the master branch.\n\n-be\n. Merged, thanks for the performance updates.\n. If you'd like to write a patch for it, it sounds like something that could be useful. \n. Hi @alexdowad,\nThanks for the performance patches! In general, these look great and are much appreciated. One concern is that I'd like to see a more polymorphic approach to running multiple VMs; for example, I don't use rvm, rather rbenv. I'd like not to bake in the rvm assumption if possible.\n. If we're going to bake in support for a Ruby version manager, testing for rvm and rbenv is probably the best approach. It would be nice to have a more abstract interface but I think that's probably a pipe dream.\n. @yob I'd love it if you are able to knock this out. Everything looks good to me.\n. I believe your problem is that you have universally turned off borders with `t.cells.style :borders => []`. Your assignment to `border_bottom_width` has no effect because there are no borders on the cell you are setting the bottom border width of. I got your example to work by changing the third line to:\n\n``` ruby\npage.row(-1).style :borders => [:bottom], :border_bottom_width => 3\n```\n. Merged, thank you.\n. If you're using Rails 3, you should put prawn in your Gemfile (and `bundle install`) rather than just installing it directly. Bundler isolates your gems, so you won't be able to use it from your Rails application if it's not part of your Gemfile.\n. At the moment, I'm fine with small breaking API changes in non-critical\nparts of the code like this.\n\nOn Thu, Sep 27, 2012 at 7:20 AM, Wojciech Piekutowski <\nnotifications@github.com> wrote:\n\n> Thanks @cheba https://github.com/cheba.\n> \n> I think you could make all arguments optional, except for the first one.\n> Then class-check the first one to see if it's a Hash or Array (point). In\n> the latter case you could output a warning and validate all other arguments\n> for presence (raise ArgumentError if missing). I wonder what's @bradedigerhttps://github.com/bradedigeropinion about depreciation warnings vs breaking API changes.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/prawnpdf/prawn/pull/400#issuecomment-8934271.\n. Superseded by #408, closing.\n. This seems to be working fine for me on Prawn master:\n\n``` ruby\nPrawn::Document.generate 'test.pdf' do\n\n  table([[\"foo\"], [\"bar\"], [\"baz\"], [{content: \"baz\", background_color: \"FF0000\"}]]) do\n    row(0).font_style = :bold\n    columns(1..2).align = :left\n    columns(3..5).align = :right\n    self.row_colors = [\"DDDDDD\", \"FFFFFF\"]\n    self.header = true\n    self.cell_style = {size: 12}\n  end\n\nend\n```\n\nGenerates a 4-row table where the first three rows are striped gray/white, and the last row (overridden background color) has a red background.\n. Can you try the master version from git? There have been a lot of changes\nsince 0.12.0.\n\nOn Sat, Sep 8, 2012 at 8:48 AM, M Bougie notifications@github.com wrote:\n\n> I still have this issue with the 0.12.0 version\n> \n> class ExamplePdf < Prawn::Document\n> def initialize\n> super(top_margin: 20\n> my_table\n> end\n> \n> def my_table\n> table([[\"foo\"], [\"bar\"], [\"baz\"], [{content: \"baz\", background_color:\n> \"FF0000\"}]]) do\n> row(0).font_style = :bold\n> columns(1..2).align = :left\n> columns(3..5).align = :right\n> self.row_colors = [\"DDDDDD\", \"FFFFFF\"]\n> self.header = true\n> self.cell_style = {size: 12}\n> end\n> end\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/prawnpdf/prawn/issues/401#issuecomment-8387744.\n. Matrix is a class in the Ruby standard library:\n\nhttp://www.ruby-doc.org/stdlib-1.9.3/libdoc/matrix/rdoc/Matrix.html\n\nIt's probably not a great idea to have an ActiveRecord model with the same name, as this has the potential to cause conflicts with any library that depends on Matrix.\n. So there's a nonzero cost to MD5ing the contents of the template every time it is to be used (of course, it's still better than embedding the thing multiple times!). But is there an advantage over simply indexing by the IO object itself or its `object_id`? Is the concern that the caller might be opening the same file (or other stream) multiple times and acquiring different handles that point to the same content? I may be misunderstanding.\n. @jonsgreen's #418 merged to master. Does this resolve the original issue?\n. Thanks for your contribution @cheba. I'd like to see some good specs around this feature before I merge it, especially because it's an area of the spec that I don't know a lot about.\n\nThanks,\nBrad\n. I'd prefer the method name `soft_mask` over `make_soft_mask`, as the former is more declarative. What do others think?\n. Oops, I missed that. Thanks.\n\nOn Saturday, October 27, 2012, Alexander Mankuta wrote:\n\n> make_soft_mask is just a helper for specs. The API is soft_mask.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/prawnpdf/prawn/pull/406#issuecomment-9833101.\n. Locally, you can specify a ref of pdf-inspector to check out:\n\n  gem 'pdf-inspector', :git => 'git://github.com/prawnpdf/pdf-inspector', :ref => '123abc'\n\nWhen merging, we will have to take this into account, and release a new version of pdf-inspector separately as a first step. Then we can bump the gem dependency version in prawn's Gemfile.\n\nCan you make a pull request to prawnpdf/pdf-inspector when you are ready? Thanks!\n. Manual page looks great! I merged your pdf-inspector pull request and cut a 1.0.2 release, which we are now depending on in Prawn (ef58ce56a2e). Merged.\n. @jonsgreen Yeah, I'm the tables guy. Thanks for the research. I'll look into this and update the ticket when I have a fix.\n. Colspan was not present in 0.12.0. Try 1.0.0.rc2 or master from git.\n\nBrad\n. Yes, Prawn's table auto-sizing support can be a bit lacking and can often get into corners like this where it can't find a solution.\n\nYou can definitely specify manual column widths, and they work just fine with colspan. A spanned cell just uses the combined width of the two or more columns it lies in, so when you define your column widths make sure you include all of your (non-spanned) columns.\n\nBrad\n. @ahacking, thanks for the report. Unfortunately, I don't have the time at present to investigate in detail. I'd be happy to review and merge any pull request that addresses this issue. Sorry and thanks again.\n. Marking as closed.\n. The API and implementation look good, but it would be nice to have a manual page describing and demoing the feature before we merge this. Thanks @cheba!\n. Man page looks good. Merged, thanks @cheba!\n. Thanks @jordanbyron. I ended up just writing this as a single method call because I think using `def_delegator` is a bit heavy-handed here.\n. Hi @ottost,\nI think that the changes in #452 and #459 may have fixed your issue. If you still have problems with the latest master branch, let us know and we'll reopen and investigate further.\n\n-be\n. Agreed with @jonsgreen. When I have to do things like this with Prawn, I typically break my business objects out and delegate to Prawn, rather than trying to create Prawn::Document subclasses. Delegation can be a bit more verbose than inheritance, but it's also more flexible.\n. @jonsgreen I think that we should merge in any :info that was explicitly provided to Document.new. I'm not convinced that we should always override the metadata, for example setting Creator to \"Prawn\".\n. Oh, sorry, I definitely didn't mean to imply that we should prevent people from overriding Prawn as Creator. I was confused and thought the merge would have been happening the other way (merging in the template's information on top of the Prawn document's, which sounds like it is actually the previous behavior).\n\nYour pull request looks good, and I merged it.\n. :+1: Merged.\n. @gasova: #431 was merged today. Can you try the master branch and determine if it fixes your problem? Thanks!\n. Thanks @jordanbyron. Closing.\n. Thanks for fixing that one @jonsgreen. Mind writing a spec or two for this to make sure it stays around? Thanks!\n. Perhaps it has something to do with memoization introduced between 0.12 and master. A git diff may be instructive.\n\nGenerally profiling allocations is the only way really to dig into this if nothing is obvious. I may or may not have time to do that soon.\n. Thanks for the info @kennethkalmer. Poking around the diff between 0.12.0 and 1.0.0.rc1, I didn't see much in table code that could cause this, so I was beginning to suspect the text subsystem. Will be interesting to see where this leads.\n. Can we leave this one open until #430 is confirmed to fix this problem? I want to make sure that's our real fix before filing away all of this great problem-solving data. Thanks.\n. :+1:. I've followed basically the same trajectory on many of my personal and client projects in the past year, and landed on RSpec for most of them. Still like to hear everyone's input but this looks great to me. Thanks @yob!\n. I also very slightly prefer rspec to minitest/spec as a style preference, but understand that it carries a bigger library burden. I'd be happy going with either one; anything would be an improvement.\n. :+1: from me, but I'd like to hear @sandal's opinion as well. I wrote the RC4 implementation because he wanted to minimize external dependencies.\n. Code looks great (to the limits of my minimal AFM knowledge). :+1: \n. :+1: Merged. Thanks @jonsgreen.\n. @jayd189 Can you give an example of exactly what you're trying to do? I'm not quite sure what's triggering the bad behavior here.\n\nIn any case, I'd rather use a combination of current time and a counter, to try to avoid any potential thread-safety issues.\n. Agreed, thanks @kennethkalmer / @yob.\n. The diff is looking good so far. @kennethkalmer, were you going to introduce a metrics cache? If so, please ping when this is ready for review / merge. Thanks.\n. @kennethkalmer The change is shaping up nicely. Can you rebase against master and make sure the specs are green?\n\n@yob Any objections or concerns with merging this?\n. @kennethkalmer Thanks. That spec has been failing intermittently for me on master (could be a spec order issue) and it would be good to track down.\n. I think this is almost ready to merge, but we still want some specs on the FontMetricCache before merging. Thanks!\n. @woodhull Yes, that's what this is waiting on.\n. Thank you, @kennethkalmer, for your code and for your extreme patience waiting for this pull request.\n\nThe code looks good to me. The only thing that I might have done differently would be to try to test FontMetricsCache by its behavior rather than its internals (for example, injecting a mock and verifying that it is only executed once). But that's a minor nitpick and I think this code is fine to merge. /cc @sandal \n\nThanks again for your contribution to the project!\n. Merged. Thanks @sgwanlee !\n. Definitely. :+1: \n. Thanks for the report, @tpbyrne.\n\n@jonsgreen It looks like commit 419eca8a broke the manual build. I haven't looked into this in great detail, but do you have any ideas off the top of your head? Thanks!\n. This would be very nice, but since there's no general way to find the size of an arbitrary bounding box, it's not obvious how table layout should work. I'm open to suggestions.\n. Right, we already have a layout algorithm that works when given minimum / maximum sizes for cells (though it is certainly not optimal!). The hard part is sizing arbitrary content -- Prawn's language is too flexible to allow us to determine the size of arbitrary content, unless we constrain the constructs that can be used.\n. This appears to break the build on 1.9.3: https://travis-ci.org/prawnpdf/prawn/builds/4278449\n. I'm not sure how to rerun the build on Travis either. But the build is green for me locally on 1.9.3 so I merged. Thanks @cheba!\n. Fancy! Code looks good to me, but this is a rather complex and obscure feature. @yob @sandal @Bluejade @jonsgreen what do you think?\n. I would prefer that this be offered as an extension, unless there's significant demand for it in core. It's not something that any of us on the core team (excepting perhaps @yob) have the knowledge to support and maintain.\n. `:header => true` marks the first row of the table as a header. The first row of your data is being repeated on each page as a header. If you don't want that, remove the `:header` option or add a true header to the array you pass into the `table` method.\n. Merged, thanks!\n. This looks good to me. Anyone else want to review or have comments?\n. :+1: Merged. Thanks @cheba, @yob!\n. Just getting to this thread now; leaving for Ruby on Ales soon :-)\n\nThanks for the suggestion @sandal. I agree that the benefit of clarifying our support of different Ruby versions outweighs the potential confusion of similar codebases. There's broad precedent in keeping a maintenance branch for backports of bugfixes only. I would like to proceed under this approach unless anyone has significant objections to voice. Thanks!\n. @sandal Correct. We'd need a `min_version(1.6)`.\n. @straydogstudio, Please try out the master branch and let us know if it resolves your problem.\n\nThanks @jordanbyron for the fix!\n. Fixed in f1efec1. \"its\" is actually correct, but we did have a stray \"the\" in there. Thanks much for pointing this out!\n\n-be\n. Merged. Thanks so much Greg!\n. @ali-bugdayci -- Please test on master and let me know if this fixes the problem for you. Thanks for reporting!\n. :+1: Merged. Thanks @jordanbyron!\n. Sadly, this is not possible to do robustly with Prawn, because the PDF specification operates at a lower level than the level you want to work at. \n\nA bit of a technical background: PDF text is drawn by the use of character codes, which identify glyphs but not necessarily Unicode characters. There is a provision in the PDF spec for fonts to include a mapping from character IDs to Unicode, but it is optional. So even the problem of identifying \"this page contains the text `foo`\" is nontrivial at best and impossible to accomplish for arbitrary compliant PDFs. The rest of the process (replacing text) has similar technical difficulties if we would want to create a completely compliant solution.\n\nSo I think the best solution for you is going to depend on where these template PDFs are going to come from. If they are being generated by Prawn, you may be able to defer the processing until you have the data you need. If they are coming from somewhere else, you'll probably have to measure distances and draw text on top of the template. It's a semi-manual process, but it has worked for me several times in the past. Hope this helps!\n. Fixed in 20ed1310a929f68ceaec9adaeab984908b3d4600. Closing.\n. You'll have to provide some more detail for anyone to be able to help. This sounds like a Rails problem and there are a lot of things that can go wrong depending on how exactly you're trying to use Prawn.\n\nPlease use the [Google group](https://groups.google.com/forum/?fromgroups#!forum/prawn-ruby) for support questions like this -- it reaches a wider audience and we try to limit the bug tracker to confirmed bugs.\n. Odd problem. It's going to be very hard to diagnose without some sample code that demonstrates your problem, though.\n. Yes, streams were merged in after RC2.\n. It would help if you could provide a sample of a file that was causing this problem through Prawn. There are a lot of things that could be going on here.\n\nSpecifically: it's probably not helpful to think of what Prawn does as \"editing\" an existing PDF. What it really does is start a new PDF and suck in content streams of each page from the old one. So it's not a surprise that there are significant differences between the template and the Prawn-generated document; the question is where we might be (subtly or not so subtly) breaking the PDF spec.\n\nThanks!\n-be\n. Awesome, I'm glad the problem is fixed for you. Thanks!\n. The code looks fine to me. @yob any concerns or suggestions?\n. Thanks for catching that, @yob. Yes, upon further inspection, that is my reading of the diff as well, and does not appear to be correct as it could catch the MediaBoxes of siblings (or unrelated branches) in the page tree.\n. > I think we should keep the inheritance of page attributes as per the spec and assume US Letter in the very rare case that a PDF without a MediaBox is used as a template.\n\nYes, I agree. So does that \"very rare case\" cover the issue that this ticket was opened to cover, @krishicks?\n. Hello,\nPlease use the [mailing list](https://groups.google.com/forum/?fromgroups#!forum/prawn-ruby) for Prawn usage questions. We try to keep the issue tracker limited to bugs.\n\nYour problem is probably that the font you have selected does not have glyphs for the character you are trying to use. You can select a font with the `font` method:\n\n``` ruby\nPrawn::Document.generate(\"test.pdf\") do\n  text \"Check mark \\u2714\"\n\n  font \"/Library/Fonts/Arial Unicode.ttf\"\n  text \"Check mark \\u2714\"\nend\n```\n\nResult:\n\n![check](https://f.cloud.github.com/assets/4621/362107/a64eb6da-a1df-11e2-80f3-910b7fd5af12.png)\n\n[Prawn's manual](http://prawn.majesticseacreature.com/manual.pdf) contains more detailed information about how to select and use fonts.\n\nHope this helps!\nBrad\n. Thank you for raising this issue. After investigating, I believe we are in compliance with the license these files are provided under.\n\nIt is necessary to bundle the AFM fonts because they provide font metrics for the \"core 14\" fonts that PDF readers must support. These fonts may be used without embedding the actual font files, but Prawn still needs the metrics in order to lay out text on the page with the same understanding of the font metrics as a PDF reader will use.\n\nThe [license in MustRead.html](https://raw.github.com/prawnpdf/prawn/master/data/fonts/MustRead.html) alongside the AFM files permits redistribution as long as modifications are noted and MustRead.html is included. Thus I believe we are in compliance with the licensing terms as that file is shipped alongside the AFM files with every distribution of Prawn.\n\nBrad\n. I'm not sure about those TTF files. We should definitely investigate. I'm reopening this ticket to keep track of that. Thanks.\n. Yes, I think you are correct that we can do away with these fonts. You are also correct that the AFM fonts are available on any PDF (compatible readers must support those 14 fonts), and the TTF fonts are used only for testing and demonstration.\n\nI agree with you that these files should be removed; the only step remaining is to actually remove them and determine what the impact will be on our testing process. (For example, there is at least one CJKV font that is used for testing internationalized text, and we will need to vet its license or find a replacement).\n\nThank you!\n. I agree that we need to do something about the TTF fonts that we are currently packaging. But there is no need (or indeed desire) to eliminate the \"standard 14\" AFM fonts. Those fonts are the standard provided by any PDF reader without the need for embedding, and there is no interference with system or user fonts. They are quite essential to Prawn and probably to any nontrivial PDF-generation program, and furthermore I don't see any licensing issues with distributing their AFM metrics, as referenced upthread. Note that the AFM files are not actually fonts (the readers have the font software itself), but rather metrics for describing the size of glyphs so that Prawn can lay out text on the page.\n\nWe will address the TTF / DFont issue (yes -- a pull request would be quite helpful on this!), but I still do not think there are any problems with our use and distribution of those AFM files.\n\nThanks,\nBrad\n. That would be a great interim solution, I think. The AFM metrics are key to Prawn's operation, but the TTFs are only used for testing and generating the manual.\n\nThank you!\nBrad\n. Can you provide a self-contained example, including template file? These sorts of issues often come down to very specific details of the file being used as a template, and a proven test case that we can plug away at would be very helpful.\n\nThanks!\n. Can you post code that reproduces the problem? There are only [a handful of commits between rc2 and master](https://github.com/prawnpdf/prawn/compare/1.0.0.rc2...master) so it shouldn't be too hard to track down.\n. @tomconroy Can you give an example of a problem that this patch solves? Thanks!\n. Oh, very good catch. As with #474, we just need to determine whether any part of Prawn is actively using these and whether they can be replaced.\n\nWe will definitely remove the Rails logo. As for the Ruport logo, @sandal probably has rights to it, in which case we may just need to document those rights appropriately. Otherwise we can remove it as well.\n\nThank you!\nBrad\n. Replaced rails.png with a public-domain image that serves the same purpose. Thank you!\n. Looks good to me, merged. Thanks @aayushkhandelwal11!\n. I like the idea, but this needs some specs proving its functionality. It also [breaks some existing specs](https://travis-ci.org/prawnpdf/prawn/jobs/6837082).\n\nThanks for the feature -- let us know if you have time to work on a few specs; if not, I may try to write some when I can scare up some time.\n\nBrad\n. Cool, thanks. I definitely understand having the paying projects drive the bus yet still wanting to get that code out there. I certainly appreciate your contribution and think it will probably be ready to merge once the spec issues are ironed out. Thanks again!\n. This should now be fixed on the `master` branch, thanks to @cheba's work.\n. Merged, thanks! \n. Merged. Thank you @cheba !\n. I haven't verified that this works, but a reading of the spec implies that this patch implements correct behavior. The code looks :+1: to me.\n. Looks good to me. Merged, thanks!\n. As @bvogel suggested, you need to escape the text before passing it to Prawn. \n\nThis could probably be clarified on Prawn's part, but I'm OK with leaving the result of unescaped `<` undefined for `:inline_format`.\n. Well, we could special-case the less-than sign in Prawn, but you'd still have to escape your input text, right? Otherwise if your input text contained, say, `</b>`, it would be parsed as inline formatting by the Prawn parser. I think that's the real issue here.\n. It would definitely be nice to see this work for non-orthogonal angles (such as 45 degrees). How difficult would that be? I know it would cause some issues around the `rotate_around` argument.\n. This code causes errors on Ruby 1.8, because `File#size` (the instance method) did not exist until 1.9.\n\n[Error line](https://github.com/prawnpdf/prawn/blob/master/lib/prawn/core/document_state.rb#L71), [Travis failure](https://travis-ci.org/prawnpdf/prawn/jobs/8479792).\n. @johnnyshields I have pushed 4d41b89, which I think is a more elegant solution to the problem. Rather than have Subtable pretend it knows about overflow, this patches the `style` method to ignore unknown attributes.\n. Merged, thank you!\n. This has since been fixed. From the master branch:\n\n```\n% gem build prawn.gemspec\n  Successfully built RubyGem\n  Name: prawn\n  Version: 1.0.0.rc2\n  File: prawn-1.0.0.rc2.gem\n\n% gem spec prawn-1.0.0.rc2.gem post_install_message\n--- |+\n\n********************************************\n\n\nA lot has changed recently in Prawn.\n\nPlease read the changelog for details:\n\nhttps://github.com/prawnpdf/prawn/wiki/CHANGELOG\n\n\n********************************************\n\n\n```\n. Should be fixed with the merge of #534.\n. Merged. Thank you!\n. Looks good -- merged. Thanks!\n. Thanks for the patch. This branch fails a before_rendering_page header spec -- can you investigate?\n\nThanks!\nBrad\n. Merged with a minor hash syntax fix (we try to keep 1.8 compatibility still!). Thank you!\n. Merged. Thank you!\n. Merged. Thank you!\n. Thank you @gettalong!\n. Those are RSpec assertions in our test suite. It's basically the same as writing: (in Test::Unit style)\n\n``` ruby\nassert_equal 12, contents.font_settings[0][:size]\nassert_equal 24, contents.font_settings[1][:size]\n```\n. Thanks @gettalong. I appreciate the motivation behind this pull request -- this is a very common question about Prawn's inline format. However, I fear that this patch just sweeps the problem under the rug by further complicating the semantics of the parser. As a parallel: the C compiler, when parsing a string, doesn't try to determine from context whether `\\` was supposed to be part of an escape sequence or if the programmer wanted to use a backslash. All literal backslashes must be escaped.\n\nIn HTML, `<` has a special meaning. If you want to use it on its own, you have to escape it. Why should it be different for Prawn's parser?\n\nI ask this in full awareness that this is a stumbling point for many new Prawn users, so if consensus among the core team is that this would be a positive move, I'll go with it.\n. Merged. Thank you!\n. This breaks image cell specs for me. Can you take a look at spec/cell_spec.rb and make sure it's still working?\n. Merged. Thank you!\n. > I'll defer to @bradediger and @sandal on this, but my preference would be for the image handlers to register themselves with prawn rather than have prawn introspect the Prawn::Images namespace. External code that implements a new image format shouldn't have to live in the the Prawn::Image namespace.\n\nI agree with @yob. In addition to the namespace issues he pointed out, this solution would involve less metaprogramming \"magic\".\n\nI like the direction this is going -- thanks @packetmonkey!\n. This whole thing gets a :+1: from me. I agree with the PDF::Core namespace.\n. > I think that it's a bad programming attitude to use 100% cpu until you have the job done\n\nThis is completely wrong. If the CPU is not being used 100%, the system is being used inefficiently.\n\nIt is the OS scheduler's job to allocate time slices to processes fairly, but it's your job to architect your system in a way that makes this possible. If you're running a single-threaded web server where a long-running request blocks the rest of the requests, and you put a long-running task in the middle of a request, don't be surprised when this is the behavior that you get.\n\n@sandal is right -- this should either be offloaded to a background job, or there's something wrong with the web server configuration you're using.\n. > @bradediger my code is already designed to be kind with other tasks, it's prawn that is not\n\n@pandar1 Sleeping as you suggest would do nothing except slow down the process. \n\nModern operating systems no longer use cooperative multitasking (unless you're using an extremely old or misconfigured kernel), so there's no need to yield the CPU to other tasks. The scheduler knows when other processes are ready to run and will preempt your process. Otherwise, multiuser operating systems would be impractical, as an infinite loop in any process would take down the entire system. Unix-based operating systems have not worked like this in decades.\n\nAs I said before, if there are tasks ready to be run and the CPU is not spending all of its time running them, it is quite literally wasting its time. Your proposed solution would make Prawn slower for everyone and would not fix your architecture.\n. @yob is correct. You can measure JRuby memory usage most accurately using a tool like jvisualvm, which will also allow you to take snapshots to look at individual object allocations.\n. @sandal Yes, @hbrandl's test case looks correct.\n\nI have a hunch that in full generality, this problem may require a constraint solver to completely fix. I know that there is a variant of the table layout problem that someone has proven NP-complete. Our approach is currently heuristic, possibly necessarily so.\n. Great. :thumbsup: \n. Subtables (and table width in general) have never had a truly well-defined behavior. While I am not surprised that the above code raises a CannotFit error, I am reluctant to enshrine this behavior with a spec because it seems like an accident at best. \n\nWhat does Text::Box do when presented with `\"foo\"*100` in the same width? Does it wrap silently, raise CannotFit, or something else? While I don't necessarily think Text::Box's behavior should be normative for the subtable implementation, it would certainly be informative.\n. @sandal Yes, I think using a FP epsilon and changing equality tests to closeness tests is the best (least insane) way to go here. BigDecimal is going to be a huge rabbit hole that offers little payoff, IMO.\n. @sandal Errors accumulate during consecutive numerical operations, so we can't necessarily just use the machine epsilon. But I definitely think we could standardize on an epsilon around 1e-9 (give or take a few orders of magnitude) for all FP comparisons.\n. @sandal `:optimize_objects` was specifically written to GC the junk objects that were left after rolled-back transactions. The only other potential use case might have been cleaning up the object graph imported from a template, but now that those are gone I don't know that we have any more need for it.\n. @sandal I think that was just a regression test.\n. Added to wiki at http://wiki.github.com/sandal/prawn/supported-pdf-viewers.\n. For bystanders: This was pulled into master as Document#group_on_page (in b734c03) and is roadmapped for 0.6. It does not group images or other elements that do not trigger a new page by themselves.\n. Update RDoc on Font#normalize_encoding to reflect that it is nondestructive. Closed by d013aaa49bb71f9004104de5833d5a8c1ac1e67f.\n. Fix references to :page_size and :page_layout in README. Closed by e36a8edb987021778dc23c31750929fd22245019.\n. Fixed in 23cafc4. Thanks!\n. This was done a while ago. Closing.\n. Merged, thanks.\n. Defer finalizing the page_content refs until the document is rendered. Closed by 101235225ef27fcdcef60b505e6edecdcdcc714f.\n\nThis is essential for documents that reopen pages in order to:\n- Set the correct stream length in the stream dictionary\n- Make it possible to re-open streams that will be compressed\n- Not draw the header and footer multiple times if the same page is\n  finalized more than once.\n\nThe document compression specs were also broadened so as not to assume\nthe page_content stream will be compressed immediately after leaving a\npage.\n. Merged, thanks.\n. Remove Prawn::Reference on_encode block argument, in favor of a new, more flexible callback system. Closed by 36ef89c2bc21e504df623f61d918c5bfdc1fdab1.\n\nAdded a callback system Prawn::Document::Internals#before_render(&block),\nwhich accepts a Proc to be run after all objects are finalized, but before\nanything is rendered to the output stream. This removes the need for the\non_encode Proc argument to Prawn::Reference, so that argument has been\nremoved.\n\nSince we are no longer storing Procs in references, this closes issue 56.\nAdded a spec to verify.\n. I don't think it's as simple as changing the /Encoding entry. The PDF reference doesn't list /Symbol as a valid value for that key. Unfortunately I don't have any better guesses.\n. This file has ZapfDingbats text, but includes its own font descriptor (with the Flags field of 4 specifying a symbolic font):\n\nhttp://unicode.org/charts/PDF/U2700.pdf\n\nActually, I just compared the 1.4 and 1.7 specs, and came across a wrinkle here. Beginning in PDF 1.5, the special treatment afforded the Base 14 fonts is deprecated; producers are supposed to include full font descriptors for every font used. The lack of a font descriptor might not be our problem, but it should at least be on our radar.\n. 6337329 resolves the original complaint. Will open a new ticket about the font descriptors.\n. Restore page_number on snapshot restore. Closed by 7c62bbf0b9cea166921bd6927e7dbb7188a2a790.\n. atotic: I believe the above commit, on master, should resolve this issue. Please let us know if you have further problems around snapshotting. Thanks for your well-researched bug; it was really easy to narrow down the problem.\n. To my knowledge, we have not fixed this issue. It is somewhat pedantic (I don't believe it was actually causing a visible issue) and didn't appear to be terribly easy to fix last time I looked at it.\n. Acrobat uses a different rendering path when transparency is used on a page than when it is not, so that accounts for this difference. Something having to do with the transparency blend space implicitly created to render transparency groups -- I think Adobe might be converting the image to DeviceCMYK. This is more a color space issue than a Prawn issue; I can reproduce by creating a document in Illustrator CS2 with a #ddddff rectangle and saving as a PDF. That results in a PDF that shows up as #ddddff in OS X Preview but #dddcee in Acrobat.\n\nLeaving this issue open for now in case we can find a workaround.\n. Closing this issue (won't fix). I can't find a single other PDF renderer that does this a different way, so I can't even find an example of how I think it _should_ work. If anyone thinks otherwise and can come up with a difference, feel free to reopen this issue and I'll have a go.\n. From an API perspective, I'd prefer adding a Prawn::Document#background method and deprecating / eventually removing the :background option to Prawn::Document.new, as I outlined in the aforementioned thread from last year:\n\nhttp://groups.google.com/group/prawn-ruby/browse_thread/thread/2aea4e64eae840bd/5c57b6fa7d809210\n\nThat way, we can throw as many options as we like into that method and we don't pollute the constructor. That's my primary concern. If @cassiomarques or anyone else wants to make a clean, well-tested patch that does this, I'll probably merge it.\n. Thanks @Spiralis. To clarify, github.com/sandal/prawn is and will be the official version of Prawn. I'm a maintainer of Prawn, but my version (bradediger/prawn) is just for my own branches and other tweaks prior to being merged into the official version.\n. @sandal Who knows if they're actually squatting? (could be private repos). But I'd try a private message before the Hammer of God.\n. Hey everyone, thanks for your attention. I think this ticket was created before github started sending everything that happened on a project to all contributors, so this is the first time I've seen it. Sorry! I'll take a look at the options soon and decide what sort of API we want to use for text styles.\n. @m-ryan: \"Imho most of the code in Prawn::Table::Cell::Text should go away since it's not DRY with Prawn::Text.\"\n\nI would agree with this now. I wrote Cell::Text a month or two before Daniel wrote the new Text::Box class for Prawn. Daniel and I are making some API changes to Text::Box over the next month or two in preparation for 1.0, so by the time the API settles down, Cell::Text will probably be stripped down to be a small adapter around Text::Box (we need an adapter to conform it to the Cell API that handles sizing and such, but Text::Box provides 90% of the features we need).\n. Refactor Table::Cell::Text to use Text::Box API\n\nMost available options for Text::Box can now be passed into\nPrawn::Table::Cell::Text -- most notably, :align. These attributes may\nbe set using the standard cell attributes API -- see the new code in\nexamples/table/bill.rb for an example of how to use :align.\n\nPlease note:\n- :inline_format is not yet supported.\n- :font_style and :font_size have now become :style and :size,\n  respectively.\n\nClosed by 2a5a5f9c1a52c829ebec17a935798624786b1836.\n. Despite the above comment on that particular commit, :inline_format is now supported on master (dba4581).\n. Dynamic repeaters are simple closures\n\nRemove the instance_eval / block argument stuff from dynamic repeaters,\nso they simply close over their environment. The caller should already\nhave a reference to the Document, so this is more flexible all around.\n\nClosed by 4cc4d2f4e476ce9829c37e64bb023b0b2f7eea09.\n. It's probably a good idea anyway to move our gem specifications out of the Rakefile and into gemspecs. We have much less of a reason _not_ to do so, now that we've merged into one super-project and we don't have to build a meta-gem.\n\nGreg, do you have any objections to this?\n. costan, I don't see any immediate problems with this approach, so I merged your patch. I'll kick this over to sandal to review, as he actually does the release tasks, but it's in master for now.\n\namoeba, thanks for the patch too. I merged costan's version since it preserves all of the features in the Rakefile.\n. For the immediate future, you will need to specify cell heights / widths manually when you are using rotated text. Because we support text wrapping in cells, there is no easy way to tell how high a cell should be unless you specify it. This should work if you specify row heights manually.\n. Take Table#column_widths and Table#row_heights public. Closed by 9eaf37af50b95ea17b8f3ab07b55b87d98775d30.\n. Thanks for pointing this out, Will -- I agree that these methods should be public. Pushed to master.\n. Merged, thanks for taking care of this.\n. Add CSS-like :border_..._width and :border_..._color\n\nTable Border widths and colors can now be independently changed with:\n- border_top_width=\n- border_top_color=\n- border_right_width=\n- border_right_color=, etc.\n\nThere are shortcut accessor methods border_width= and border_color=,\nwhich set all properties at once given the same CSS-style arguments as\npadding=.\n\nClosed by 328730720bd2ce39e3b425167f4f702758f59588.\n. If the Pantone colors you need are in the CMYK gamut and you know their values, you can specify them directly as CMYK values:\n\n```\npdf.fill_color 0, 100, 0, 0 # c, m, y, k in [0,100]\npdf.stroke_color 100, 0, 0, 0\n```\n\nPrawn does not support spot colors, and it is not currently on the roadmap. It would involve the Separation color space (ISO32000:2008 \u00a78.6.6.4) -- if you can figure out what you need in the resulting PDF, we may be able to help you accomplish it in Prawn; just ask on the mailing list.\n\nClosing out this issue as it's not a Prawn bug.\n. edgerunner: That's essentially what I was getting at. I was under the impression that certain Pantone colors (though not all or even many) were actually in the CMYK gamut and could be approximated to arbitrary precision with a CMYK 4-tuple. That would at least give equivalent colors in the resulting PDF, and you could make the approximation arbitrarily close by adjusting the precision of your C, M, Y, and K values.\n\nHowever, that still wouldn't give you proper separations, and it won't work at all for the Pantone colors outside of the CMYK gamut (which by definition can't have arbitrarily close CMYK approximations). What we would really need to do to get this working is to support Separation color spaces, which PDF has explicit support for. I'm almost certain that you can map RGB and process-color CMYK equivalents to each spot color for varying output media, and then pull separations by spot color.\n\nBut this would be a moderately involved project, and there are more pressing issues on the roadmap as we march to Prawn 1.0. It's something I'm personally interested in, and it sounds like James (yob) might be as well, but I can't say I have a ton of time to look into it right now. If you're available when someone gets around to working on spot color support, we may hit you up for some advice and guidance.\n. A point of order: PDF is similar to (and based on) Postscript, but they're different languages. Prawn only deals in PDF.\n. github ate my non-BMP character... text is fixed now.\n. Properly encode text strings with non-BMP Unicode chars\n\nPerform correct UTF-16 encoding, creating surrogate pairs as necessary,\nfor text strings with non-Basic Multilingual Plane characters.\n\nClosed by bc01a7d967433b7df94cc8907872ce2053751f1a.\n. Jonathan is currently working on some graphics state changes that will make this easier to resolve. Here's a spec (currently failing) that will cover this when his work is done:\n\n```\ndescribe \"The render() feature\" do\n  # ...\n  it \"should be idempotent\" do\n    pdf = Prawn::Document.new\n\n    contents  = pdf.render\n    contents2 = pdf.render\n    contents2.should == contents\n  end\nend\n```\n. I've merged the above spec to make sure this problem doesn't trivially recur. Thanks!\n. We haven't worked on it yet. It's something we hope to be able to include for the 1.0 release, but no guarantees.\n. Table image cell support is available starting with commit 7f06e94e.\n. One of your text fields (project.site, project.project_name, project.assigned_to, project.due_date) is likely nil. Prawn doesn't know what sort of cell to make out of nothing. Give it an empty string if you want an empty cell.\n. Ah, that's it. The latest stable version of Prawn doesn't have support for table image cells. Try changing that line in your Gemfile to:\n\n```\ngem 'prawn', '1.0.0.rc1'\n```\n. 100% agreed on modifying $KCODE being bad. Looks like we don't actually depend on it -- our specs are green on 1.8.7 without it. What the heck, I'm diking it out.\n. Remove $KCODE=&quot;U&quot;. Closed by 4e34693120902937a2b1c22da4704b9ef159aca4.\n. This was resolved by 3ecde63.\n. Hi Rick,\nYou might be right that this is the same bug. The fundamental problem, as I see it, is that we don't make a clear distinction between user-requested and auto-sized widths.\n\nIf you have a minimized example of a situation where you're getting CannotFit errors with manually-set widths, that would help me dig into this.\n\nThanks!\n. Hi Rick,\nI think your problem is in this part of the code:\n\n```\ntable.rows(0).width = form_cell.width + umc_cell.width\n```\n\nAdmittedly, this is a bit of a confusing part of the table API. Any cell proxy (such as that returned by table.rows(0)) proxies calls on itself to calls on its constituent cells. So that statement is setting the width of _each_ cell in the first row to the value provided. Thus, the outer table containing this one (left_header) gets a CannotFit error because you are trying to put 540pt of width in a table you have constrained to 270pt.\n\nBrad\n. I've tried, and failed, to reproduce this issue on master. If we come across this problem again, we can re-open the ticket to investigate.\n. Asian languages are supported just fine -- see this:\n\nhttp://github.com/sandal/prawn/blob/master/examples/m17n/chinese_text_wrapping.rb\n\nIf you have further problems, please post a code example that we can try ourselves.\n. Spec text and draw_text for empty strings\n- draw_text should draw exactly the string it is given, even if it is\n  composed entirely of spaces\n- text may collapse empty strings (due to line wrapping), but if it\n  writes anything to the page, it should be blank.\n\nClosed by 3fed181b17f86040c99ef0d7ddfcc828da063553.\n. Thanks for the clean, tested patch. Merged.\n. Refactor CellProxy into Cells; cache for performance. Closed by 7190540434ac7710f5a98147f348506901dcabce.\n- New Cells object subclasses Array; this cleans up the code a bit.\n- Caching is done at the Cells level; Table is no longer responsible for\n  precomputing row / column numbers.\n- We only precompute when it makes sense; the row / column indexing is\n  deferred until it is needed (to avoid GC churn on leaf nodes).\n. Don't propagate RollbackTransaction outside of group(). Closed by bea36f118c3bcac8ca37df10628935d2c18922e0.\n\nBecause of the delegate we set up on @bounding_box, when rescuing a\nCannotGroup error, the bounding_box proxy would still be in place. Fix\nthis by restoring the bounding box upon first failure.\n\nThanks to Mark Bennett for finding and patching the bug.\n. I turned your example into a spec and applied your patch to master. Thanks for the tight report.\n. Documented in the Wiki. Thanks!\n\nhttp://github.com/sandal/prawn/wiki/Using-Prawn-with-Bundler\n. This was resolved by the fix for #153. Tables should now work inside bounding boxes and spans. Thanks for reporting with a minimized test case!\n. Add Cell#style; rename Cell::Text#style to #font_style\n\nThe Cell#style method is useful for uniformity with the Cells API:\n\n```\nrows(3..5).style :padding => 6\ncells[0, 0].style :padding => 6\n```\n\nCell::Text#style (to set the Text::Box's font style) has been renamed to\nfont_style.\n\nClosed by d63f07695ce9bd3f020326429a5bf0adde2ef587.\n. Tables support row/column access by negative indices\n\nYou can now use syntax like table.row(0..-2), which selects all but the\nlast row of your table.\n\nClosed by 91d6efa7ad4d4bd64b5eb33336a2e6fd4d496a9b.\n. Merged, thanks!\n. This problem also prevents subtables from spanning more than one page.\n. It's a bit of a complicated problem. Though this seems to be a common request, we still want to support the current case (where cells are constrained to lie on a single page), and we probably want it to still be the default. Splitting cells across pages can be an opt-in feature.\n\nThe abstract Prawn::Table::Cell API includes the assumption that a cell will be drawn on a single page. Table sets up a bounding box representing the cell's content area and calls `draw_content` on it (see Cell#draw_bounded_content). So that protocol is going to have to change if you want certain cells to span pages. This might not make sense for all cell types (for example, image cells).\n\nI'd start out by defining a method on each subclass of Cell that determines whether it can participate in this new protocol. Image cells wouldn't; text cells would; subtables might (depending on their content). Then, I'd add a method parallel to `draw_content` to draw as much content as possible on the current page. The semantics of this would be something like \"if `spannable?` returns true, then we can call `draw_partial_content` regardless of how much room is available on the page; it then returns the remainder of the content that couldn't be drawn\".\n\nThen you'll have to modify Prawn::Table#draw to participate in this new protocol, only if a user has requested this option.\n\nSome corner cases you'd have to think about:\n- Rows can contain both spannable and non-spannable cells.\n- What happens if a cell spans three or more pages?\n- Should Prawn assume that spannable cells don't have a bottom border on the first page and a top border on the next? (Probably.) Should it override the cell's border styling to do so?\n- Say there's 3pt available at the bottom of the page, and you're about to draw a spannable text cell. The text won't fit in 3pt of vertical space, so `draw_partial_content` will draw nothing and return the entire content of the cell. But you probably don't want to draw a 3pt border on the previous page around an empty cell.\n- We use a method, `Prawn::Table::Cell.draw_cells(cells)`, whenever we're putting a group of cells on the page. This renders all of the given cells in the proper drawing order to ensure that backgrounds show up behind borders and content. When refactoring Table#draw, you must ensure that this drawing order is preserved, otherwise weird rendering bugs can crop up.\n\nGood luck if you'd like to tackle this. I'd love to see it in Prawn; I just haven't had the time to work on it yet. Let us know on the mailing list if you try this out and run into issues.\n\nBrad\n. No updates yet. I've posted a summary of the issues involved above for anyone who wants to take a crack at starting.\n. Finish out table rows before pagebreak\n\nWhen a cell is taller than the margin box of a page, it would cause\nsubsequent columns to be rendered on the next page. This fixes things so\nthat the columns will be rendered next to the overflowing column.\n\nAlso ensure that we only flow to the next page to start a table if we\ncould gain height by doing so (i.e., if we are below the top of the\nbounding box).\n\nThanks to TylerRick on github for the bug report and the patch that\ninspired this fix.\n\nClosed by 405ed3a6df4cef74f6fe1a7c9f9473abcea04202.\n. ahsangill: The question of whether table cells should be split upon pagebreak is a complicated one. Feel free to post on the mailing list and start a discussion around this feature.\n\nTylerRick: Thanks for the clean code demonstrating the problem and for the patch. I've applied your patch, with some specs and a few corner cases cleaned up, to sandal/prawn@master.\n. Duplicate of #148. If you have a problem other than the one described there, please reopen with a code sample.\n. We haven't had a gem release in quite a while, due to limited time on the part of the core team.\n\nThe manual documents Prawn's master branch, not a released gem version.\n. We try to keep master pretty clean, but you can lock to a specific ref with:\n\n```\ngem 'prawn', :git => '...', :ref => 'abc123'\n```\n. @ksugiarto The `prawn-layout` gem is very old and its functionality was merged into core Prawn several versions ago. However, it is still available at the [same git repository](https://github.com/sandal/prawn-layout). Hope this helps!\n. Use standard string for link URI\n\nWhen embedding a hyperlink, use a standard string, not a LiteralString,\nfor the URI. This allows it to be encrypted by encrypt_document.\n\nClosed by f18d1b496e604f91d75b29852e080f7400d5fd22.\n. roody: Thanks for reporting this. I've merged a fix.\n. Only draw table header on 1st page if >=1 body row\n\nCheck, before rendering the table, to be sure that we can draw the first\nbody row (excluding any header). If we can't, start the entire table on\nthe next page.\n\nClosed by fe79c39f3f12f59397e8fb6835f2d1a520d9978d.\n. Draw borders before content\n\nThis reverses 8e0de9a, which I probably had a good reason for at the\ntime but for some reason didn't document. The behavior introduced by\nthat commit broke table cells inside stretchy bounds, because the\nabsolute location of the y-position depends on when the bounds are\nstretched (#153).\n\nIntroduced a spec to cover the new behavior and prevent regressions.\nClosed by c8fbc73f95914d1b64292860aaee3df6afee1363.\n. Fix example_helper.rb require on all examples\n\nSince '.' is no longer in the $LOAD_PATH in Ruby 1.9.2, we have to run\nan expand_path over the resulting path from File.dirname(**FILE**).\n\nClosed by 0e9df5cd022300a50061f3b6382aaa1eb5f9a43e.\n. You need to use a TTF font that has all of the Unicode characters you want to use in your text. Prawn is UTF-8 friendly, so you should have no problem getting this to work once you use a font that has the right characters.\n. This has since been fixed. I can't reproduce this problem on the latest version of Prawn from git.\n. Thanks for the patch, but after thinking about this I don't think this belongs in Prawn. Though \"\".respond_to?(:encoding) isn't a full test for 1.9 encoding support, it should be just fine for software that doesn't monkey with String encoding methods. This needs to be fixed upstream at WriteExcel, which would be a worthy endeavor.\n\nThanks again for your contribution!\n. I'm almost certain we still have this issue... I haven't seen any activity on it and haven't looked into it since I first found the problem. I should warn you, the problem may go deep into the bowels of the TTF format. If you want to track it down, good luck!\n. Can you provide an example of the code and image you are having problems with? Embedding JPG and PNG images is working for me, and our examples and specs currently work fine under 1.9.2. Thanks!\n. This behavior does not exist in the currently-maintained versions of Prawn. Try 0.10.2 or a release from git.\n. Hi Mike,\nThanks for the report. I'm not seeing this problem occur with the following spec on edge Prawn. Can you show me some code that isn't behaving as expected, or correct my spec below so it exhibits your problem? Thanks!\n\n```\nit \"should correctly render empty paragraphs\" do\n  @pdf.text \"text\\n\\ntext\"\n  text = PDF::Inspector::Text.analyze(@pdf.render)\n  @pdf.page_count.should == 1\n  text.strings.should == [\"text\", \"\", \"text\"]\nend\n```\n. FYI, it's not rspec; it's test/spec. You can run the specs with just \"rake\" or \"ruby spec/(something)_spec.rb\".\n\nThanks for clarifying that indent_paragraphs is the problem. I'll update the spec and look into this.\n. Blank paragraphs don&#39;t create new pages anymore with indent_paragraphs\n\nClosed by 8cb267ab02de553cc93b4d7e018b3c52aadcdba7.\n. The latest master should fix this issue -- see #180 and the referenced commit for the cause. We have also added specs on some text()-specific test cases to make sure empty paragraphs are treated correctly.\n. Closing this out as I think ColumnBox does everything we need. Let me know if there's anything you can't currently accomplish with the latest master. Thanks for your contribution!\n. Resolved by the fix for #180. Added a spec for this specific example (in spec/text_spec.rb).\n. The latest master should fix this. We fixed Parser.array_paragraphs to not have this problem in the first place. Please let me know if you still have problems with empty paragraphs after upgrading to the latest development version. Thanks!\n. > /cc @bradediger, who hopefully knows more about this stuff than I do.\n\nUnfortunately not. @Bluejade is the text box expert, and I have only interacted with that code tangentially due to my work on tables. Sorry to pass the buck but I have no direct knowledge here.\n\n@sandal: Your assessment of the problem and proposed solutions seem spot-on to me. The lower alignment example seems to be a defect; the center alignment is potentially debatable in that a different example with heavier descenders on the last line might make the box look more balanced. I don't know of any literature on the topic, but it does make intuitive sense that the eye matches the ascender of the first line with the baseline of the last line, not its descender.\n\nCount me as a :+1: on this general approach.\n. Doc fix: :modify_contents, not :modify_document\n\nThanks to jds13 for pointing this out. Closed by 0c735165c50ff97215e4da1262fb2484a717cc1c.\n. While I appreciate the desire to support a more complete set of Unicode code points out of the box, I think we still want to stick with the AFM fonts by default. These fonts come standard with PDF readers and don't need to be embedded / subsetted in Prawn documents, so we can keep the file size down. If we tried to bundle Unicode fonts out of the box, we would have to decide on a typeface as the default, and we'd still have gaps in our Unicode support, as most fonts only include a small set of code points.\n\nUsers who need Unicode support can easily use their font of choice with a line or two of Ruby code. Users who don't need it can use the default AFM fonts and reap the benefit of small file size and quick rendering. I'd gladly accept documentation patches or wiki updates that clarify how to use Unicode fonts, though.\n\nThanks very much for your input, and happy Prawning!\n. Move new_examples to manual, update path reference, and add rake manual task\n\nClosed by f80c954570f3482f702641a380ac0559078b3a4f.\n. Merged. I removed and ignored the .bundle directory and Gemfile.lock because, while those are helpful for going from development to production environments, I think they'd be more of a hindrance on a library like Prawn where developers might be running against different environments, Ruby VMs, etc.\n\nThanks for your contribution to Prawn!\n. Added specs and merged (fafd0d6). Thanks for your contribution to Prawn!\n. Added specs and merged. Thanks for your contribution to Prawn!\n. Merged. Thanks!\n. Fix problems with blank lines when inline formatting\n\nWhen :inline_format and :indent_paragraphs were both used, blank\nparagraphs would cause array_paragraphs to return nil. Fix thanks to\nsriegel2 at github.\n\nClosed by 3ec7ad195a14a737da82385679d244903778abd3.\n. Added specs and merged. Thanks for your contribution to Prawn!\n. Merged. I added some specs and cleaned up the code a bit to match our style. Thanks for your contribution to Prawn!\n. Looks like this was introduced by the new graphics state stack changes (fe254de). Might be a simple error in setting colors... evince complains about an incorrect number of arguments for the scn and SCN operators. Possibly the color spaces aren't being set on the second page. I'll see if Jonathan has any ideas.\n. Hi glendel,\nThe sorts of calculations we make in autosizing tables and subtables are prone to floating-point precision problems. We actually include a \"fudge factor\" in our internal drawing logic to account for these potential issues.\n\nIn your example, however, I think what's happening is that your internal table (from row_for_lines) is getting an autosized width (of _slightly_ over 540pt), but you specify an explicit width on the outer table. Without seeing your row_for_lines code, I can't tell whether this is the case. But the solution is probably to set an explicit width on the subtables. Here's a simpler example that might make the problem clear:\n\n```\nPrawn::Document.generate \"table.pdf\" do |pdf|\n  subtable = Prawn::Table.new([%w[one two], %w[three four]], pdf,\n    :width => pdf.bounds.width)\n  pdf.table([[subtable]], :width => pdf.bounds.width)\nend\n```\n\nIf you remove the :width argument from the subtable, you get errors, because the autosized subtable becomes only 68pt wide (the minimum space it takes to display \"one\", \"two\", \"three\", \"four\" in that arrangement). When you try to put it in an outer table with an explicit width of 540pt, you get a CannotFit error. But if you size the inner subtable to the same width, the error goes away.\n\nI'm closing out this ticket because I don't _think_ this is a Prawn problem. If you have a reduced example that shows something that should work in Prawn, please let me know and we'll look into it. Thanks!\n. Hi Glendel,\nAlthough your proposition (rounding min_width, max_width, etc.) might fix your immediate problem, it would introduce errors throughout the table drawing code. I understand that dealing with floating-point error propagation in the table code can be frustrating, but rounding the intermediate values is a cure that would be worse than the disease, in my opinion.\n\nI'll be thinking about how to gracefully handle situations like this, but I'm afraid there probably isn't an easy solution.\n\nHave you tried my idea of setting an explicit width on the outer table? That, I think, would solve your problem. If you want to discuss, the Prawn mailing list is just the place:\n\nhttps://groups.google.com/group/prawn-ruby\n\nThanks,\nBrad\n. It's a known issue with how Acrobat handles color spaces. We have a fix we are testing and it will be in master as soon as possible. Thanks for reporting!\n. Hi @tonini,\nCan you post the problematic code to the prawn-ruby mailing list (https://groups.google.com/group/prawn-ruby)? That way we can investigate and figure out if it's the same problem or a different one. Thanks!\n. Closing this for now. We may look into pdftk-like features in the future, but it's not on our immediate roadmap. \n. Thanks piglop; this is helpful. As I mentioned in another pull request, if you could put these all on a separate branch and make sure it merges cleanly against the current master, that will help me out when I get around to removing examples/.\n. I was thinking about this problem this morning... there's one remaining table example that only really exists as a regression test to make sure the corners line up, etc. So I think a visual spec suite is the right answer. As we merge this in, we'll move some of the examples as you suggested.\n\nThese should be a relatively minor component, of course. Anything that can be tested automatically probably should be.\n. Awesome. I just merged your removal of those examples. I'll wait to close this ticket until each example is either a full-blown visual test or merged into the manual. Thanks Micha\u00ebl!\n. Yes, it would probably be good to remove reference_pdfs. I don't much care what we do with \"rake examples\" between now and 1.0, as long as it goes away before then.\n\nAnd yes, please do restore anything that serves as an actual visual test. I didn't look too closely at Micha\u00ebl's commit. I'm fine with restoring anything that you'd prefer to keep around for regression purposes.\n. Hi Daniel,\nThe removal of reference_pdfs is causing some tests to error. Can you take a look and restore what's needed or fix the tests? Thanks!\n. That sounds like the best option. Thanks.\n. As of d9aad040, we now depend on the released pdf-inspector gem, so I'm closing this out.\n\nBOO SUBMODULES, YAY GEMS!\n. Nice work! Thank you. Merged.\n. Thanks for finding the problem and solving it. I've verified that this fixes the bug. I just need to craft a spec to make sure we don't reintroduce the bug later, and then I'll merge it in.\n. Fixed by 2acd109.\n. Awesome. Merged, thanks!\n. Oops, that was me. Logged in under the wrong account.\n. The :inline_format => true on that last line is your problem. The\n:cell_style hash is just a shortcut for styling all cells the same\nway, so that's basically the same as:\n\n cells.each { |c| c.padding = 12; c.inline_format = true }\n\nand you can't inline_format a subtable (the first cell of your second row).\n\nWith Prawn's API as it is, you'll have to set the inline_format\nattribute on only the text cells. There's not an easy way around this\nproblem that heterogeneous tables have to be styled heterogeneously.\nIf you don't need inline formatting on the text cells of the outer\ntable, just remove that entry from the :cell_style hash. If you do\nneed it, set inline_format on only the text cells where it's being\nused.\n\nBrad\n. I've cherry-picked 83393d5 (added rake to the Gemfile) and 891964e (ignored the rdoc directory). Closing this pull request because the original purpose has been merged. Please open new pull requests for your manual improvements and I will likely merge them as well. Having them on separate branches (manual improvements / examples removal) would be helpful, as I prefer merging to cherry-picking and I like to evaluate and deal with one conceptual set of changes at a time.\n\nThanks for your contributions to Prawn!\n. Merged, thanks!\n. Merged, thanks!\n. Prawn has no interaction with Rails. Are you thinking of Prawnto or some other code that bridges Prawn to Rails? Closing since this isn't a bug in Prawn.\n. Table cells get sized and positioned during the table() or make_table() call. If you want to change any of their settings, you have to do it in a block you pass to table() or make_table(). Otherwise you are changing the parameters after the table has been sized. It works as you expect if you move the padding line into a block passed to make_table:\n\n```\npdf = Prawn::Document.generate(\"subtable_padding.pdf\", :margin => [40, 45, 50, 45]) do\n lines = [[make_cell(\"that text is in the first line of cells\")],\n              [make_cell(\"that text should be in the second line of cells on the same page\")]]\n t = make_table([[lines]]) { |table| table.cells.first.padding_bottom = 4 }\n t.draw\nend\n```\n. The reason make_table was added was so that you could have a table that wasn't inked in order to place it in a subtable, not to allow you to tweak things after the table has been positioned. But you have a point. I'll think about what it would take to make the API a bit more friendly. The table does a bit of a complicated dance to make sure the sizing and layout constraints are all honored, so it will take a bit of thought.\n. Hi mat813,\nFYI, I just pushed a commit to master that fixes the issue you saw with text being unbalanced in table cells.\n\nhttps://github.com/sandal/prawn/commit/bc7c3b4b690f6a7468ebb800db1da3a7e8bb2db0\n. It sounds like you're suggesting that we try to do some sort of global optimization and minimize the number of broken words; is that right? I wouldn't consider the current behavior of your example a bug just because words have been broken -- because in order not to break words, you have to sacrifice width in other columns.\n\nIt sounds like what you are suggesting is to have Prawn expand the \"TotalQuantity\", \"Price\", and \"Dealer\" columns, in order not to wrap them. But of course that means we have to sacrifice width from some other column, which might cause words to be broken (repeating the whole process). So there's no easy solution short of global optimization.\n\nWe can definitely consider this as a feature request, but it will require some further discussion and exploration of the corner cases (the mailing list would be best for that). But like I said, I don't think the current behavior is a bug, unless I'm misunderstanding you.\n. Closing this issue as @jonsgreen closed its pull request #216.\n. Closing as dupe of #214. Github's new issue tracker shows pull requests inline with issues now, so we don't need both of them around.\n. Ignore case on font file extensions\n\nThanks to elberskirch for filing the bug. Closed by 01f8c5a02fea48ea6052604fabf279e44b39de3a.\n. Thanks for noticing this, Dominik. I ended up just using case-insensitive regular expressions so that case will be ignored. Thank you for your contribution to Prawn!\n. We're working on a gem release soon. It's in the works, we're all just busy.\n. Hi Jon,\nThanks for your bug report and patch. Once this is tested sufficiently, I'll merge it. I can try to write the tests if you're not sure how to test it, but the basic idea I think I'd use is something like this (off the top of my head):\n\n```\nbounds.indent(...) do\n  3.times do |column|\n    bounds.left_side.should == ... # some expression like: offset + (column * spacer)\n    bounds.right_side.should == ...\n    bounds.move_past_bottom # move to next column\n  end\nend\n```\n\nIf you can make that work, I think it will be ready to merge.\n\n-be\n. Superseded by #303, which also handles right indents. Thanks @joncanady for your work on this.\n. Merged. I cherry-picked these which led to a few merge conflicts, so the pull request didn't get closed properly and I got attributed as the author. Sorry about the mess. Thanks for your contribution, Micha\u00ebl!\n. Reference:\n\nhttps://github.com/sandal/prawn/commit/402913176526c0e0fe5f194ab477d28a8ed57b9d\nhttps://github.com/sandal/prawn/commit/a19ef4c3a771377ba69e105e6b309870b793f152\n. Hi there,\nI used your patch as a starting point and developed a method that still passes our other cell / table specs (and added a few specs for the new behavior). Thanks for the bug report and patch!\n\nI'm going to take a look at your other epsilon patch later and see if it fixes some of the outstanding bugs we have with subtable nesting. It needs to be unified with the other epsilon mechanism we have to fix floating-point problems, though (grep for FPTolerance).\n\n-be\n. Closing; this doesn't look like a Prawn problem. Take a look at the rest of your infrastructure (as Bluejade mentioned, Rails or your background job workers) to see why that file isn't getting reloaded.\n. Merged, thanks for your well-tested patch!\n. Hi joren,\nSorry for the trouble. When we updated the stable branch based on the 0.11 release, we clobbered the old stable branch which had a few extra commits on it. I've pushed cdff170 to a new branch called old-stable, so Bundler should be able to find the commit now.\n\n-be\n. Merged, thanks!\n. Neat! @sandal, what do you think about this? Do you want it in core or should we try to combine this and @yob's prawn-forms as a more full-featured Prawn form plugin?\n. Agreed on 1.0 vs 1.1. I'll tag this as a 1.1 feature and we'll try to merge prawn-forms in as well.\n. Are you sure you're running the same code in both circumstances? I only ask because the text on the \"prawn-bug.pdf\" certificate doesn't match the text in your gist. Can you post the code that is actually generating the bad certificate?\n\nThanks!\n-be\n. If you could post the actual code, it would be helpful. I can't immediately think of anything in Prawn that would cause this behavior, so I'd like to see the actual code that's been giving you trouble so I can rule out some common causes of error (unless you've been having problems while directly running that gist example you posted).\n. Good catch. Fixed here:\n\nhttps://github.com/sandal/prawn/commit/5c2a07e6fcb17cc62e0fb18c06d556977ddfdcf5\n. Hi there,\nI don't think this was overwritten. We still have the merged code on the master branch, for example:\n\nhttps://github.com/sandal/prawn/blob/master/spec/object_store_spec.rb#L161\n\n-be\n. Awesome. Thanks for the fix -- merged.\n. Thanks DefV for reporting the issue. As soon as I can get some time to write a good spec and fix the issue, this will be resolved.\n. Hi DefV,\nSorry it took so long to get a fix in place; things have been quite busy. This should now be resolved on Prawn master. Thanks for your contribution to Prawn!\n\nBrad\n. Merged, and added a note that Bundler should be installed first. Thanks for your patch! -be\n. There is a pretty decent comment to this effect in text/box.rb, where the return value of text_box() is documented:\n\nhttps://github.com/sandal/prawn/blob/master/lib/prawn/text/box.rb#L97\n\nWe can reopen this if we see a need for more detailed documentation, but for now I'm closing.\n. Hi @mbklein, did you mean to close this pull request?\n. I nearly click that button by accident every time.\n\nThanks for the bug report and patch. I'll be looking into it soon.\n. Sorry for the delays; this has now been merged. Thanks for your contribution to Prawn!\n. This should now be fixed in master. Thanks for your patience!\n\n-be\n. Closing this as it's not a defect in Prawn.\n. Can you post a minimized example that we can run to reproduce the problem? That would help us troubleshoot what's going on. Thanks!\n. This code is working fine for me with Prawn master, and generates a document that Acrobat has no trouble reading:\n\n``` ruby\nPrawn::Document.generate(\"243.pdf\", :page_size => \"A4\", :left_margin => 55) do\n  font \"times.ttf\"\n  image \"data/images/prawn.png\", :scale => 0.7, :at => [-85, 820]\n  line_width 10\n  [[-15,713,510,713]].each { |points| stroke_line(*points) }\n\n  move_down 80\n  text \"Hello world!\"\nend\n```\n\nIf you can modify that example to show your problem, please re-open the ticket with the new code and I'll take a look. Thanks!\n. I can't reproduce this problem with Prawn master. The following code gives me three lines of text that are right-aligned with the right edge of the text box:\n\n``` ruby\nPrawn::Document.generate \"245.pdf\" do\n  w = 60\n  bounding_box [0, cursor], :width => w, :height => 200 do\n    stroke_bounds\n    text_box \"line one\\nline two\\nline three\", :width => w, :align => :right\n  end\nend\n```\n\nPlease reopen the issue if you can provide a reduced test case that demonstrates the problem. Thanks!\n. Reopening the issue. Thanks hidakatsuya for the test case.\n. This issue has been fixed. The problem was that some TTF fonts specify a nonzero width for the newline character. I have patched our TTF-level width method to always return zero for newlines. Thanks for helping me track down the problem!\n. @forrest: Can you please give a full example that demonstrates the problem, including the Prawn version you're running?\n. @forrest: That's a different problem. If you don't specify explicit widths, Prawn assigns widths roughly proportionally to the amount of content in each column. That's what you're seeing. If you want a certain width rather than let Prawn guess, you need to set it manually.\n\nAlso, the :position => :right isn't the same thing as the original bug. This bug was about text boxes that were :align => :right (right justified), while :position => :right just puts the table at the right side of the page (leaving the text left-aligned within a cell).\n. Right now, there's not an easy way to do this, because tables use `Prawn::Document#width_of` to calculate the \"natural\" width, and width_of isn't really that smart about multi-line text:\n\n``` ruby\npdf = Prawn::Document.new\npdf.width_of(\"foo\") #=> 16.68\npdf.width_of(\"foo\\n1\") #=> 23.352\n```\n\nYou might be able to do something like the below, if your lines are short. However, this will break if any of your lines are long enough to wrap, because in that case you _don't_ actually want your table width to be the same as your longest line width:\n\n``` ruby\ntext = \"foo\\nbar\\nbaz\"\nwidth = text.split(\"\\n\").map { |line| pdf.width_of(line) }.max\npdf.table([[\"cell 1\", text]]) { |t| t.column(1).width = width }\n```\n\nCheers,\n-be\n. This patch leads to two test failures:\n\n 1) Failure:test_spec {Text::Formatted::Box wrapping} 003 [should wrap between two fragments when the preceding fragment ends with white space](Text::Formatted::Box wrapping)    [spec/formatted_text_box_spec.rb:47:in `block (2 levels) in <top (required)>'     /Volumes/Home/Users/bradediger/.rvm/gems/ruby-1.9.2-p180/gems/mocha-0.9.12/lib/mocha/integration/test_unit/ruby_version_186_and_above.rb:22:in`run']:\n<\"Hello World\\n2\"> expected but was\n<\"Hello World\\n 2\">.\n\n  2) Failure:\ntest_spec {Text::Formatted::Box#render} 003 [should be okay printing a line of whitespace](Text::Formatted::Box#render)\n    [spec/formatted_text_box_spec.rb:331:in `block (2 levels) in <top (required)>'\n     /Volumes/Home/Users/bradediger/.rvm/gems/ruby-1.9.2-p180/gems/mocha-0.9.12/lib/mocha/integration/test_unit/ruby_version_186_and_above.rb:22:in`run']:\n<\"hello\\n\\nworld\"> expected but was\n<\"hello\\nnworld\">.\n\nIf we had a failing test case, we'd be able to figure out what's going on here. The fix may just be as simple as to_s'ing the buffer before munging it.\n. The \"Cannot modify SafeBuffer in place\" error has been removed in recent versions of ActiveSupport. The following commit in Rails made it possible to use bang-methods on SafeBuffers:\n\nhttps://github.com/rails/rails/commit/594603b45f1248380068c4a32ac62283fe061e82\n\nGiven that 1) this should present no problem for users of newer versions of Rails, and 2) there is a workaround for users of affected versions, I'm closing this out. Please let me know if the problem recurs on newer Rails versions. Thanks!\n. Hi i2dave,\nCan you post an example of the documents you're having trouble with? Looks like there's something in the template PDF that Prawn doesn't like, and we'll need the actual file you're trying to import in order to troubleshoot. If you don't want to post the file publicly but you trust me, you can email it to me (firstname dot lastname at madriska dot com).\n\nThanks,\nBrad\n. Hi Dave,\nPrawn is an open-source project driven by members of the community. Features generally get implemented as people feel like working on them. If you'd like to develop a patch to make Prawn support multipage PDFs, feel free to submit a pull request and we'll take it under consideration.\n\nThanks,\nBrad\n. With 16 points of height and the standard 5pt of top / bottom padding, I think you just didn't give yourself enough vertical room to see the valign working. Notice what happens if you change the \"height: 16\" to \"height: 160\" -- for me, it clearly aligns to the vertical center. You can change the default padding with the :padding cell style.\n\n-be\n. Seems to be working fine for me with edge Prawn. Here's the exact code I used:\n\n``` ruby\n$:.unshift 'lib'\nrequire 'prawn'\n\nPrawn::Document.generate 'alignment.pdf' do |pdf|\n  test_items = Array.new\n  test_items << ['Date:', '08/07/2011']\n  test_items << ['Our VAT No:', 'GB1234566']\n  test_items << ['Our Ref:', 'xxx/yyy']\n\n  pdf.table test_items do |t|\n    t.width = 200\n    t.cell_style = {:size => 9, :padding => 2, :borders => []}\n    t.column(0).style(:align => :right)\n    t.column(1).style(:font_style => :bold)\n  end\nend\n```\n\nand the result:\n\nhttp://i.imgur.com/7dRdo.png\n. Looks like the word \"VAT\" isn't getting kerned properly in Prawn::Document#width_of. It would appear that width_of is returning the unkerned width, which is a point or two wider. I'm not sure how far down this rabbit hole goes, but I'm looking into it. Thanks!\n. Got it. The function that computes text width (most noticeably when using non-ragged-right text) was ignoring the kerning status of the text fragment. This has been fixed. Thanks for your sharp eye!\n. Please note that Prawnto was written by a third party against Rails 2. It was never an official project of the Prawn team, and it hasn't seen new development in quite a while. Here's what the Prawn team recommends for using Prawn in Rails:\n\nhttps://github.com/sandal/prawn/wiki/Using-Prawn-in-Rails\n\nI'm closing out this issue because as a segfault, it's not a Prawn issue but sounds like a problem with Ruby, Ubuntu, gcc, or some combination of the above.\n. Thanks @hidakatsuya for reporting this bug. It has been fixed on the master branch.\n\n@Bluejade, can you please review my changes for any adverse impact you might see to the text engine? I assumed that based on the current code, width_of should act as if character spaces were included before and after every character (so a 7-character string with 10pt character spacing would add 70 pt to the string's natural width). But hidakatsuya's code above subtracts 1 from the character length, yielding 60pt in my example. That might be more natural, but I'll leave that up to you.\n\nBrad\n. Thanks for the report, I'll look into it.\n. Hi there,\nIf you check out the latest master, this issue specifically with float() is mostly resolved. However, it was not the most pure solution, and I'm still not quite sure if there's a clean way to solve the general problem. Technical explanation follows.\n\nThe basic problem is that float (before today) just saved and restored your y-position on the page. When you put 52 lines on the page, your y-position is \"at the bottom\". So when you floated another line of text, you were kicked to the next page. When the float block ended, it dutifully restored your y-position... at the _bottom_ of the 2nd page. The next text() call kicked you to the third page, which led to the problem you reported.\n\nI've worked around this with two different changes:\n1. (d307c37) float() is now more intelligent than just saving and restoring your y-position; it now detects whether you have moved to a different page during the block and takes you back where you started from. Alone, this would be no good because you would be left at the bottom of the first page, and overflowing would still start a third page. So...\n2. (2ff910a) The text engine now knows when you are overflowing a page that is not at the end of the document, and moves you to the top of the next page instead of starting a new one at the end of the document. \n\nHopefully these resolve your issue with float(). We can't solve the problem in general if you're just handling your y-positions using the lower-level calls like Document#y=, but I think this should at least solve the float issue.\n\nThanks for your bug report!\n. Fixed at master. Thanks for finding the bug!\n. This error has been fixed. Thanks for finding and reporting it!\n. We don't currently support images or form elements in tables, but it's on the list. See issue #122.\n. Are you using an old version of Bundler? It's arguably a Bundler issue, and I think this problem has been fixed -- see:\n\nhttps://github.com/carlhuda/bundler/issues/497\n. Hey @serussell,\nThis should be fixed now. Give it another try. Note that I fixed the API for destinations to take a Page reference, so you can add a ref to the current page just with:\n\n```\nadd_dest(\"dest1\", dest_fit_horizontally(cursor))\n```\n\nwhich is short for\n\n```\nadd_dest(\"dest1\", dest_fit_horizontally(cursor, page))\n```\n\nLet me know if you have any further trouble. Thanks!\n. I'm pretty sure this commit fixed that error:\n\nhttps://github.com/sandal/prawn/commit/e2ee4e7f\n\nPlease try with a newer version of Prawn (or run from git master) and let us know if the problem recurs. Closing out this ticket for now unless we can reproduce the problem on master. Thanks!\n. It's a known issue with Chrome on Ubuntu. I'm not sure if there's a fix yet, but Chrome on Ubuntu seems to have this bug with any PDF file, not just those generated from Prawn.\n\nSee this ML thread:\nhttps://groups.google.com/group/prawn-ruby/browse_thread/thread/214cdd0b9679e2aa\n. Performance was the reason it hasn't been done that way yet, but I can't prove that it's a terrible idea. From a quick look at the code, we're using transactions a lot less in Prawn's internals than I thought we were. It might be worth some benchmarking to see what breaks with this approach (intellectually impure as it may be).\n. Applied, thanks!\n. I pushed an updated 1.0.0.rc1 manual just before its release. We'll need to push again just before the final 1.0 release because we'll hopefully have a foreword to the manual by then.\n. group() doesn't interact with the text-box system. It's a fairly simple wrapper around transactions:\n\nhttps://github.com/sandal/prawn/blob/master/lib/prawn/document.rb#L513\n\nSo it wouldn't really make sense, from the perspective of Prawn's internals, to add a width to a group.\n. You should probably post to the mailing list with details about what you're trying to accomplish. We can move back to the bug tracker if we identify a bug in Prawn.\n. Hey Greg, we've got a 1.0.0.rc1 out now. Can you write up a foreword before the 1.0 drop? Thanks!\n. Neat idea. This won't make it for 1.0, but it doesn't look terribly hard to add.\n. Released pdf-inspector 1.0.1 and ttfunk 1.0.3. Bumped prawn's dependencies in 50ab731.\n. Merged in pull request #280. Thanks for your contribution to Prawn!\n. Good idea. I've added this via an option to the fill / fill_and_stroke operators: just pass in :fill_rule => :even_odd.\n\nI also added a page to the manual with a visual example of the difference between the two rules.\n\nThanks!\n. @tkuisma @cforce Did you experience the problem on Prawn master or on the RC1 release? I believe the issue has been fixed on the master branch. Please advise if you still have issues there.\n. 0.12.0 is old (yes, I know it's very old but I personally haven't had time to cut another RC). If you use prawn from the master branch, it should be fixed.\n. The branch is `master`. It's the mainline for current development.\n\nThere is no tag because we haven't cut a new release yet.\n\nIf you're using Bundler, you can follow this branch with:\n\n``` ruby\ngem 'prawn', git: 'git://github.com/prawnpdf/prawn', branch: 'master'\n```\n. The header is just the first row, so you can style it with:\n\n```\npdf.table(data) do |t|\n  t.row(0).background_color = 'ff0000'\nend\n```\n. Thanks for the comment. I've added a note to the manual's introduction.\n. The calculations get rather complex when you start looking at optimizing in two dimensions, and we're running into enough problems with width calculations. I'd rather defer this one for now. \n. The :cell_style option unconditionally sets attributes on cells, and thus overrides anything you've already provided. There might be other things that break too if you're passing in already-styled cells. For the moment, in Prawn, cell styling should be done in the :cell_style hash or the block only. The latter code snippet you posted is how I would do it.\n. Merged, thanks. \n. The origin of a bounding box is its top-left corner, which in this example is (100,300). So the code as written is correct.\n\nAs an aside, note that Prawn's manual is self-documenting. The code you see on the manual pages is directly executed in order to generate those manual pages. If you change the bounding box origin to [100, 100] and run `rake manual`, you'll see that the rectangle moves down the page by 200pt.\n. I've added a sentence that clarifies this in the manual. Thanks.\n. There seems to be decent demand for this, so I'll reopen.\n. Sorry for having taken a while to get back to this. This appears to be an instance of a known issue that we're going to try to address after 1.0 is released. See #268.\n. Yeah, it's a bit of a tricky situation since we keep so much information in the page objects. It's a balancing act between catching all of the edge cases (like transactions spanning multiple pages) and keeping the snapshots small. I intend to take a close look at the problem when I can make some time, and hopefully we'll find a good resolution. Thanks for the report!\n. Good catch. Fixed on master.\n. Merged. Thank you for your clean patch. Please let me know if there's anything we can do to make your packaging work easier.\n\nBrad\n. Merged. Thanks for your contribution to Prawn!\n. Do you have a lot of PNG images with alpha channels? That's the usual culprit for slow rendering. The PDF format requires these to be manually split out into an image and a mask, so Prawn has to do that work in Ruby which can be slow. You can use prawn-fast-png to delegate this work to ImageMagick:\n\nhttps://github.com/amberbit/prawn-fast-png\n\nIf it's not that, you'll want to profile your application (using ruby-prof or similar) to find out where the hot spots are. We can help at that point to see if it's something in Prawn that's slower than it needs to be. Tables could be slowing it down, but it's impossible to know without an example.\n\nAs for file size, make sure to pass :compress => true to the Prawn::Document constructor. If you're using Prawn's template, snapshot/rollback, or grouping features, also pass in :optimize_objects => true to GC dead objects out of the document before committing it to a file.\n\nI'm closing this ticket out because there's no evidence that it's a bug in Prawn. Feel free to open a new issue if you have a reproducible test case, or start a discussion on Prawn's mailing list if you want to discuss:\n\nhttps://groups.google.com/group/prawn-ruby\n\nThanks for using Prawn!\nBrad\n. Fixed on master; thanks for pointing this out.\n\nI did not see any indent-based specs break as a result of this change. Let me know if you're getting failures.\n. Merged. Thanks for your contribution to Prawn!\n. Closing this out since this isn't a bug. The mailing list works for these sorts of questions. Thanks!\n. This has been fixed on the master branch and will go out in the next gem release of Prawn. Thanks!\n. This is unlikely to be a Prawn problem. Please use [Prawn's mailing list](https://groups.google.com/group/prawn-ruby) for community support. If you can come up with a test case that we can reproduce, feel free to open another issue. Thanks.\n. Hi there,\nIt looks like you're using an old version of Prawn's API. Colspan / rowspan support was removed in version 0.8. However, I have added back basic colspan / rowspan support today on Prawn's master branch. Try out the master branch from git if you'd like. With Prawn's new API, you'll have to change your :text arguments to :content.\n\nCheers,\nBrad\n. Does this do anything that putting a table in a bounding box with a defined height wouldn't? I don't think we should add this to Prawn::Table unless it can't easily be accomplished otherwise.\n. I actually work on a number of documents like this, where we needed to start a table partway down the first page, and continue on subsequent pages but leaving room for the footer on every page. For example, we have a billing system that prints a large header on the first page (with addressing information), then start a table of account activity that may continue on for several pages. This sounds like it's what you're trying to do.\n\nThe way we solve this is to start a bounding box and then modify the y-position for the first page. It works something like this:\n\n``` ruby\n  # ... draw your first-page header here\n  # Store away the y-position below the header on the first page\n  old_y = y\n  # Start a bounding box the size of the page (excluding the footer)\n  bounding_box([bounds.left, bounds.top],\n      :width => bounds.width, :height => bounds.height - FooterHeight) do\n    # Restore the old y-position for the first page\n    self.y = old_y\n    table(...)\n  end\n```\n. Merged, thanks!\n. Merged. Incidentally, this commit adds our thousandth spec (at least on Ruby 1.9). Congratulations!\n\nThanks for your contribution, Wes.\n-be\n. This is now fixed on the master branch. Thanks for filing the bug!\n. Closing as duplicate of #317. Thanks!\n. Looks good. :+1:  @yob do you have time to merge and sanity check? Looks like it doesn't currently merge cleanly but I have no idea how extensive the issue may be. I don't see anything egregious.\n. What version of Ruby, Rubygems, and Bundler are you using? Can't reproduce the problem on Ruby 1.8.7-p352, Rubygems 1.8.10, and Bundler 1.0.21.\n\nSwitching your application to the [Syck parser](http://stackoverflow.com/a/5107098) may help, but that would just be a workaround as this error probably indicates some invalid YAML somewhere in the process.\n\nBrad\n. 1.0.0.rc1 is a prerelease build (anything with letters in the version string indicates a prerelease). So you're actually getting the latest stable, 0.12.0.\n. Hi Adrian,\nI think you mentioned you got this resolved by upgrading Ruby. Let me know if you have further issues.\n\nThanks,\nBrad\n. It seems to be working for me under Prawn master. You may be using an outdated version of Prawn. If you can provide more information to confirm that this is a bug with a current version, let me know and I'll look into it.\n. This Gemfile works great for me, as a test:\n\n``` ruby\nsource :rubygems\n\ngem 'prawn', '~> 1.0.0.rc1'\n```\n\nMake sure you specified the exact version listed above, i.e., there must be a period between the final 0 and the \"rc1\".\n\nBrad\n. Just pushed a fix to master. Thanks for finding this!\n\nBrad\n. Transparent PNGs have to have their alpha channel split in order to be embedded in PDFs. That's a memory-intensive process in Ruby. The workaround, if you're willing to depend on ImageMagick and RMagick, is to install prawn-fast-png:\n\nhttps://github.com/amberbit/prawn-fast-png\n. @alexdowad: It is mentioned in the documentation and has been for over two years:\n\nhttps://github.com/prawnpdf/prawn/blob/master/lib/prawn/images.rb#L17\n\nAs much as I would like not to have this problem, it's intrinsic to the PDF format, which does not natively support transparency in images. Prawn has to convert the PNG file into an image blob and an SMask for the alpha channel, and the processing has to be done somewhere. Since Prawn by design is a pure-Ruby library, this can be pretty allocation-intensive. I'd definitely accept patches that reduce the number of allocations, but ImageMagick, being written in C, is likely to always be faster and more memory-efficient.\n\n-be\n. @alexdowad, good point. I've added a note about the memory consumption. Thanks!\n. This is probably a decent idea. \n. Merged. Thanks @joneslee85 !\n. Pushed a commit that should fix this for border and padding. \n\n@raskhadafi Sorry for the long wait; if this problem is still relevant to you please let us know if it is resolved on the master branch.\n. As we discussed on the mailing list, @jaybrueder's issue needs more information and @dom1nga's issue is a current limitation of Prawn (doesn't support GIF images). Let's keep this to the mailing list unless we identify an actual bug in Prawn.\n\nThanks!\n-be\n. As @sandal mentioned, that's perfectly valid Ruby 1.9 hash syntax.\n\nAs for your colspan issue, colspan wasn't added on master until after 1.0.0.rc1. You can use Bundler to depend on the git version of Prawn if you want colspan support.\n\n-be\n. Fixed, and updated the reference to point to our new manual (the examples have been removed and replaced with the self-documenting manual).\n\nThanks!\n\nBrad\n. I've seen this happen on Ubuntu, but with all sorts of PDFs from many sources, not just the Prawn manual. I don't think it's a Prawn problem since Acrobat on other platforms seems to read it fine and since I've seen the problem in PDFs from many other places.\n\nBrad\n. Ah, yes, I have definitely seen this with Chromium on Ubuntu.\n\nOn Tue, Apr 10, 2012 at 1:48 PM, Evgeny Neumerzhitskiy\nreply@reply.github.com\nwrote:\n\n> I was wrong. I thought this bug was in Adobe Reader, but in fact, it was in Google Chrome browser. I though Chrome was using Adobe Reader extension to display PDFs, but it actually renders it as HTML. And does it incorrectly.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/prawnpdf/prawn/issues/337#issuecomment-5053288\n. Have you tried this on Prawn'\n. Sorry, hit Submit too soon. Have you tried this on Prawn's master branch? I fixed a TTF font-metrics issue that was causing a problem like this a few months ago.\n\n-be\n. I don't have an ETA on the gem, but I think this is in the 1.0.0.rc1 prerelease gem. (gem install prawn --pre)\n. This is probably more of a question for the mailing list, but I'll take a crack at it here...\n\nI'm guessing the graphics state on those pages that you are trying to draw on is in an unknown / different state. I haven't tried this out, but you could try using Prawn's stamps (which create a self-contained object that is only embedded in the page once), and stamping it on each page. This may give enough of an independent context on each page to make formatting consistent.\n\n-be\n. Looks good to me. @Bluejade, what do you think?\n\n-be\n. Merged. Thanks!\n. Are you sure that the specific TTF font file you're embedding has the exact characters you are trying to embed? Please also note that Prawn's text methods expect all text passed in to be UTF-8 encoded. If you're using ISO-8859-5 or anything else, you'll need to transcode to UTF-8 first.\n\nBrad\n. That's CSS syntax and won't work with Prawn. (Prawn accepts a limited HTML subset via :inline_format, but there's no full HTML parser and no CSS support.)\n\nI'm talking about how you specify the TTF font file for the font you want to embed, like this:\n\nhttps://github.com/prawnpdf/prawn/blob/master/manual/text/utf8.rb#L24\n. Can you give an example of the problem you're trying to solve? Your approach seems pretty brittle as we don't commit to the internal API. Prawn currently expects all widths / heights to be set on table creation time, usually in the block passed to table().\n\nThe Prawn mailing list is probably the best place to have this discussion:\n\nhttps://groups.google.com/forum/?fromgroups#!forum/prawn-ruby\n\nBrad\n. Can you reproduce this error outside of your application? It seems rather odd that it is dependent on store_name's length but also goes away if you remove the unrelated lines 3 or 4. If you can make the problem happen with a fixed set of data (just a script that runs against Prawn outside of your application's environment), it will be a lot easier to determine if it's a bug.\n. Thanks @mkastner. Simpler test case reproducing and clarifying the issue:\n\n``` ruby\nPrawn::Document.generate('test.pdf') do\n  content =  \"blah \" * 20 + \"Hy#{Prawn::Text::SHY}phe#{Prawn::Text::SHY}na#{Prawn::Text::SHY}tion\"\n\n  text(content) # hyphenated correctly\n  text(\"#{content}\\n\") # hyphenated incorrectly\nend\n```\n\nLines ending in `\\n` are triggering hyphenation at every soft-hyphen point, not just the one they are broken on.\n\nFrom reading the code, this appears to be caused by the fact that `:exclude_trailing_white_space` is present in the format hash of the correct example, but not in the incorrect one -- because this is [explicitly disabled when the line ends in a newline](https://github.com/prawnpdf/prawn/blob/master/lib/prawn/core/text/formatted/arranger.rb#L259). This causes Prawn::Text::Formatted::Fragment#process_text [not to remove the soft hyphens](https://github.com/prawnpdf/prawn/blob/master/lib/prawn/text/formatted/fragment.rb#L206), so they are rendered.\n\n@Bluejade, can you clarify the purpose of `:exclude_trailing_white_space`? From my reading, it appears to be used to exclude trailing white space from width calculations. What was the reasoning behind `process_text` skipping soft-hyphen processing on fragments where this option is enabled?\n\nThanks!\n-be\n. It's probably easiest to use something external like pdftk to merge the PDF documents after the fact.\n. You need to make sure you're using a TTF font that has the characters you're trying to use. And make sure that all of your text is UTF-8 encoded before passing it into Prawn.\n\nSorry, Prawn has no native Rails support and thus no integration into the asset pipeline. You are free to use Prawn inside Rails to generate documents using any combination of techniques you'd use in a regular Prawn document, but we don't have any special integration.\n\n-be\n. You can place your fonts anywhere you like, and reference them by absolute path using `font`, something like:\n\n```\npdf.font(Rails.root.join(\"app/fonts/my_font.ttf\"))\n```\n\nI think Prawn::DATADIR was added after our latest gem release, so you can replace that with \"#{Prawn::BASEDIR}/data\" if you need things under Prawn's data directory.\n. That syntax (font_families = ...) is just creating a local variable, not updating Prawn's font registry. Also, you need to follow Prawn's syntax for defining your own fonts. Try something like this:\n\n``` ruby\nfont_families.update(\"GESSTwoMedium\" => {:normal => \"#{Rails.root}/app/assets/fonts/GE_SS_Two_Medium.ttf\"})\nfont \"GESSTwoMedium\"\n```\n. This was fixed in f89cc44b. I don't believe it's in the latest gem release (1.0.0.rc1), but it's on master if you need it.\n\n-be\n. Merged, thank you!\n. Great idea. Done, thanks!\n. We sort-of deliberately keep our distance from HTML, because the closer we get, the more people start to expect this simple parser to become a full HTML parser, and that's not what Prawn is about. I know this creates hassle for some people, but I think it encourages people who have this need (WYSIWYG editing) to think harder about exactly what they need to support.\n\n@Bluejade, what do you think about this?\n. I could get behind this approach. I agree that it wouldn't be part of core Prawn, but it would be great if we extended Prawn's architecture to support pluggable parsers.\n\nAre you volunteering to do this work, or just making the suggestion? I, for one, don't have the time or inclination to actually implement anything along these lines. Thanks!\n. @Bluejade, thoughts?\n. @yob I have only a surface familiarity with the font code, but this looks fine to me.\n. Merged, thank you!\n. The issue with sizing styled text was fixed in 373cc430, which as of now is only available in the RC version of prawn (1.0.0.rc1). See issue #167.\n\n-be\n. I think the more fundamental problem is that Reference#referenced_objects doesn't know about OutlineRoots / OutlineItems. The outline items are reachable from the root (in a sense -- the outline root is stored in root.data[:Outlines]), but the GC marking algorithm doesn't know that OutlineRoots / OutlineItems can have children.\n\nI'd rather teach referenced_objects about OutlineRoot, as it will GC the actual outline objects, which may matter to someone.\n. Forgot to mention: here's the method I'm talking about.\n\nhttps://github.com/prawnpdf/prawn/blob/master/lib/prawn/core/reference.rb#L95\n. Fixed by #362.\n. Merged to master. Thank you for your contribution!\n. Argh, that mathn \"feature\" causes the most unnecessary breakage. Thanks for the report and the patch; merged.\n. You're going to have to provide some more information about what you're trying to do, or a code sample that you don't think is working. You can try the Prawn mailing list for assistance:\n\nhttp://groups.google.com/group/prawn-ruby\n. Sorry, this isn't currently possible in Prawn. If someone wanted to make a well-tested patch to support this feature, I would welcome it.\n. Merged #370.\n. Merged. Thank you!\n. From your example, I'm not sure what the problem is that you're trying to show. Can you explain further?\n\nThere is one slightly non-intuitive behavior of tables in spans that is by design and that we rely on. That is that when tables wrap to a new page, they start at the top of their bounding box (or span) rather than their start position on the first page. We use this, for example, in billing systems to have a longer header on the first page, followed by continuation pages with a shorter header and longer table.\n\nIf that's not the problem you're seeing, post more details and someone may be able to help.\n. A span is basically a bounding box without a height, so it is always \"stretchy\" (will never limit height on its own). If you need to reserve some space for the footer, you should use a bounding box with a height.\n. Merged. Thank you!\n. Have you tried this on master? I believe I fixed this problem in 373cc430.\n\n-be\n. You should try the master branch or at least the 1.0 RC (gem install prawn --pre), as I believe it includes your fix. IIRC, this fix was not included in the latest stable gem, 0.12.\n\n-be\n. ```\ngem 'prawn', '1.0.0.rc1'\n```\n. Nice catch! Merged.\n. Nice! Merged, thank you.\n\nOn the specs, you should note that these aren't RSpec specs, so running them under the `rspec` binary probably won't work. If you haven't tried it, just try running `rake`.\n. Yes, I try to run all of the specs before pushing any merge. Thanks for the double-check.\n\nThe only style note that I have is on your line 104 -- I prefer these parallel assignments to be broken out onto separate lines, as it makes the fact that they are parallel more clear and shortens line length. But that's definitely a personal preference and the only issue I see with that code. Thanks!\n. Sorry everyone, I know lots of you want another release. There are no blockers that I know of for RC2, the big holdup is getting the release together which is a lot of grunt work.\n\nIf someone wanted to write out a changelog for RC1..master based on the format you see here, that would be a great help:\n\nhttps://github.com/prawnpdf/prawn/wiki/CHANGELOG\n. I'd like to get 1.0 out the door as much as we all do, but it brings a whole lot of other things that the team wants to see done before 1.0:\n- license review\n- manual / documentation sweep and cleanup\n- web site refresh\n- any last blockers that we may be OK with for an RC but not for a major version bump\n. OK, I understand the class_eval(string) issue and I'm OK with your solution. I would prefer the approach where all allowed methods are defined in advance; it's a bit obfuscatory, but in my mind a bit better than method_missing. It's a value judgment, I guess.\n\nAs for the \"width of M\" thing, that's my (admittedly hacky) code. As I recall, its sole purpose is working around some pathological edge cases of text sizing. I think the issue was that the previous interaction between the table sizing code and text wrapping would happily create a column of width too small to render even a single character, at which point an infinite loop ensued as the wrapping code created new lines, each too narrow to render any text. Using a minimum width theoretically large enough to ensure that we can at least write one character per line fixed this problem.\n\n(I know that using the width of \"M\" is a terrible, Anglocentric choice, and I'd welcome any fixes that actually use the notion of \"the widest glyph in this font\" or, even better, \"the widest character in this possibly styled string\".)\n. Oh, and if you're asking about naming, I prefer `styled_width_of_single_character`.\n. I can't imagine that they would; it's probably fine to remove the block\nthen.\n\nOn Sun, Aug 12, 2012 at 8:18 PM, Alex Dowad notifications@github.comwrote:\n\n> Brad, I have found that none of the \"shape\" methods in Prawn::Graphics(such as\n> circle, rectangle, etc.) actually use a passed block. Do you think it's\n> possible one of them might make use of blocks in the future?\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/prawnpdf/prawn/pull/381#issuecomment-7681797.\n. Merged. Thanks @alexdowad for your tireless performance work!\n. See #381, which has some performance improvements that involve re-architecting this method_missing code path. We'll revisit this issue once that refactoring is complete -- I've noted your concerns on #381.\n. See #384. The core problem comes from blindly trusting the user's input, not from a bug in Prawn. The ability to include arbitrary fonts or images from disk is a feature in Prawn, not a bug. If you want to allow and end user to specify images or fonts while whitelisting or blacklisting certain ones, you need to implement that sanitize in user code.\n. I don't think this is a Prawn issue. It's akin to saying that Ruby's `File.open` contains a bug because it can overwrite arbitrary files that the user has permission to write. Using Prawn with unvalidated user input is a bug in application code, not in Prawn.\n\nAdditionally, refusing to overwrite existing files wouldn't fix this issue anyway -- you could do the same amount of damage, say, by creating ~/.profile if it didn't exist.\n. See my answer to #384 for general policy. We shouldn't prohibit Javascript link targets in Prawn, because some applications might want them, and whitelisting against them would break that behavior. If you want to allow user-provided links but not allow users to create Javascript links, you should do the whitelisting at the application level.\n. Can you provide either a PDF that triggers the error, or a stacktrace of the error itself? Otherwise we're just guessing as to what happened.\n\nAs for why the rescue doesn't seem to work, my guess is that by the time you hit the NameError, the damage is already done and you can't necessarily just keep on using the document.\n. Confirmed that this is a bug. It occurs because `group` patches up the current bounding box's `move_past_bottom` method, but if a new bounding box is started inside the `group` call, its `move_past_bottom` is unmodified. Thinking through a few ways we might solve this.\n. Merged, thanks for the awesome updates!\n\nI also added f30d8599, which turns on `:optimize_objects` and `:compress`, reducing the manual size to under 800k.\n\nNew manual has been uploaded to http://prawn.majesticseacreature.com/manual.pdf.\n. It's my understanding that xpdf is basically unmaintained at this point. My distribution of choice (Gentoo) doesn't even offer it anymore.\n\nCan you give an example of a file that you're having trouble with? I can't guarantee anything, but I can try to look into it. \n. Merged. Thank you!\n. Thanks @jordanbyron. @agnessa, please let us know if you still have this issue after trying this out on the master branch.\n\n-be\n. Merged, thanks for the performance updates.\n. If you'd like to write a patch for it, it sounds like something that could be useful. \n. Hi @alexdowad,\nThanks for the performance patches! In general, these look great and are much appreciated. One concern is that I'd like to see a more polymorphic approach to running multiple VMs; for example, I don't use rvm, rather rbenv. I'd like not to bake in the rvm assumption if possible.\n. If we're going to bake in support for a Ruby version manager, testing for rvm and rbenv is probably the best approach. It would be nice to have a more abstract interface but I think that's probably a pipe dream.\n. @yob I'd love it if you are able to knock this out. Everything looks good to me.\n. I believe your problem is that you have universally turned off borders with `t.cells.style :borders => []`. Your assignment to `border_bottom_width` has no effect because there are no borders on the cell you are setting the bottom border width of. I got your example to work by changing the third line to:\n\n``` ruby\npage.row(-1).style :borders => [:bottom], :border_bottom_width => 3\n```\n. Merged, thank you.\n. If you're using Rails 3, you should put prawn in your Gemfile (and `bundle install`) rather than just installing it directly. Bundler isolates your gems, so you won't be able to use it from your Rails application if it's not part of your Gemfile.\n. At the moment, I'm fine with small breaking API changes in non-critical\nparts of the code like this.\n\nOn Thu, Sep 27, 2012 at 7:20 AM, Wojciech Piekutowski <\nnotifications@github.com> wrote:\n\n> Thanks @cheba https://github.com/cheba.\n> \n> I think you could make all arguments optional, except for the first one.\n> Then class-check the first one to see if it's a Hash or Array (point). In\n> the latter case you could output a warning and validate all other arguments\n> for presence (raise ArgumentError if missing). I wonder what's @bradedigerhttps://github.com/bradedigeropinion about depreciation warnings vs breaking API changes.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/prawnpdf/prawn/pull/400#issuecomment-8934271.\n. Superseded by #408, closing.\n. This seems to be working fine for me on Prawn master:\n\n``` ruby\nPrawn::Document.generate 'test.pdf' do\n\n  table([[\"foo\"], [\"bar\"], [\"baz\"], [{content: \"baz\", background_color: \"FF0000\"}]]) do\n    row(0).font_style = :bold\n    columns(1..2).align = :left\n    columns(3..5).align = :right\n    self.row_colors = [\"DDDDDD\", \"FFFFFF\"]\n    self.header = true\n    self.cell_style = {size: 12}\n  end\n\nend\n```\n\nGenerates a 4-row table where the first three rows are striped gray/white, and the last row (overridden background color) has a red background.\n. Can you try the master version from git? There have been a lot of changes\nsince 0.12.0.\n\nOn Sat, Sep 8, 2012 at 8:48 AM, M Bougie notifications@github.com wrote:\n\n> I still have this issue with the 0.12.0 version\n> \n> class ExamplePdf < Prawn::Document\n> def initialize\n> super(top_margin: 20\n> my_table\n> end\n> \n> def my_table\n> table([[\"foo\"], [\"bar\"], [\"baz\"], [{content: \"baz\", background_color:\n> \"FF0000\"}]]) do\n> row(0).font_style = :bold\n> columns(1..2).align = :left\n> columns(3..5).align = :right\n> self.row_colors = [\"DDDDDD\", \"FFFFFF\"]\n> self.header = true\n> self.cell_style = {size: 12}\n> end\n> end\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/prawnpdf/prawn/issues/401#issuecomment-8387744.\n. Matrix is a class in the Ruby standard library:\n\nhttp://www.ruby-doc.org/stdlib-1.9.3/libdoc/matrix/rdoc/Matrix.html\n\nIt's probably not a great idea to have an ActiveRecord model with the same name, as this has the potential to cause conflicts with any library that depends on Matrix.\n. So there's a nonzero cost to MD5ing the contents of the template every time it is to be used (of course, it's still better than embedding the thing multiple times!). But is there an advantage over simply indexing by the IO object itself or its `object_id`? Is the concern that the caller might be opening the same file (or other stream) multiple times and acquiring different handles that point to the same content? I may be misunderstanding.\n. @jonsgreen's #418 merged to master. Does this resolve the original issue?\n. Thanks for your contribution @cheba. I'd like to see some good specs around this feature before I merge it, especially because it's an area of the spec that I don't know a lot about.\n\nThanks,\nBrad\n. I'd prefer the method name `soft_mask` over `make_soft_mask`, as the former is more declarative. What do others think?\n. Oops, I missed that. Thanks.\n\nOn Saturday, October 27, 2012, Alexander Mankuta wrote:\n\n> make_soft_mask is just a helper for specs. The API is soft_mask.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/prawnpdf/prawn/pull/406#issuecomment-9833101.\n. Locally, you can specify a ref of pdf-inspector to check out:\n\n  gem 'pdf-inspector', :git => 'git://github.com/prawnpdf/pdf-inspector', :ref => '123abc'\n\nWhen merging, we will have to take this into account, and release a new version of pdf-inspector separately as a first step. Then we can bump the gem dependency version in prawn's Gemfile.\n\nCan you make a pull request to prawnpdf/pdf-inspector when you are ready? Thanks!\n. Manual page looks great! I merged your pdf-inspector pull request and cut a 1.0.2 release, which we are now depending on in Prawn (ef58ce56a2e). Merged.\n. @jonsgreen Yeah, I'm the tables guy. Thanks for the research. I'll look into this and update the ticket when I have a fix.\n. Colspan was not present in 0.12.0. Try 1.0.0.rc2 or master from git.\n\nBrad\n. Yes, Prawn's table auto-sizing support can be a bit lacking and can often get into corners like this where it can't find a solution.\n\nYou can definitely specify manual column widths, and they work just fine with colspan. A spanned cell just uses the combined width of the two or more columns it lies in, so when you define your column widths make sure you include all of your (non-spanned) columns.\n\nBrad\n. @ahacking, thanks for the report. Unfortunately, I don't have the time at present to investigate in detail. I'd be happy to review and merge any pull request that addresses this issue. Sorry and thanks again.\n. Marking as closed.\n. The API and implementation look good, but it would be nice to have a manual page describing and demoing the feature before we merge this. Thanks @cheba!\n. Man page looks good. Merged, thanks @cheba!\n. Thanks @jordanbyron. I ended up just writing this as a single method call because I think using `def_delegator` is a bit heavy-handed here.\n. Hi @ottost,\nI think that the changes in #452 and #459 may have fixed your issue. If you still have problems with the latest master branch, let us know and we'll reopen and investigate further.\n\n-be\n. Agreed with @jonsgreen. When I have to do things like this with Prawn, I typically break my business objects out and delegate to Prawn, rather than trying to create Prawn::Document subclasses. Delegation can be a bit more verbose than inheritance, but it's also more flexible.\n. @jonsgreen I think that we should merge in any :info that was explicitly provided to Document.new. I'm not convinced that we should always override the metadata, for example setting Creator to \"Prawn\".\n. Oh, sorry, I definitely didn't mean to imply that we should prevent people from overriding Prawn as Creator. I was confused and thought the merge would have been happening the other way (merging in the template's information on top of the Prawn document's, which sounds like it is actually the previous behavior).\n\nYour pull request looks good, and I merged it.\n. :+1: Merged.\n. @gasova: #431 was merged today. Can you try the master branch and determine if it fixes your problem? Thanks!\n. Thanks @jordanbyron. Closing.\n. Thanks for fixing that one @jonsgreen. Mind writing a spec or two for this to make sure it stays around? Thanks!\n. Perhaps it has something to do with memoization introduced between 0.12 and master. A git diff may be instructive.\n\nGenerally profiling allocations is the only way really to dig into this if nothing is obvious. I may or may not have time to do that soon.\n. Thanks for the info @kennethkalmer. Poking around the diff between 0.12.0 and 1.0.0.rc1, I didn't see much in table code that could cause this, so I was beginning to suspect the text subsystem. Will be interesting to see where this leads.\n. Can we leave this one open until #430 is confirmed to fix this problem? I want to make sure that's our real fix before filing away all of this great problem-solving data. Thanks.\n. :+1:. I've followed basically the same trajectory on many of my personal and client projects in the past year, and landed on RSpec for most of them. Still like to hear everyone's input but this looks great to me. Thanks @yob!\n. I also very slightly prefer rspec to minitest/spec as a style preference, but understand that it carries a bigger library burden. I'd be happy going with either one; anything would be an improvement.\n. :+1: from me, but I'd like to hear @sandal's opinion as well. I wrote the RC4 implementation because he wanted to minimize external dependencies.\n. Code looks great (to the limits of my minimal AFM knowledge). :+1: \n. :+1: Merged. Thanks @jonsgreen.\n. @jayd189 Can you give an example of exactly what you're trying to do? I'm not quite sure what's triggering the bad behavior here.\n\nIn any case, I'd rather use a combination of current time and a counter, to try to avoid any potential thread-safety issues.\n. Agreed, thanks @kennethkalmer / @yob.\n. The diff is looking good so far. @kennethkalmer, were you going to introduce a metrics cache? If so, please ping when this is ready for review / merge. Thanks.\n. @kennethkalmer The change is shaping up nicely. Can you rebase against master and make sure the specs are green?\n\n@yob Any objections or concerns with merging this?\n. @kennethkalmer Thanks. That spec has been failing intermittently for me on master (could be a spec order issue) and it would be good to track down.\n. I think this is almost ready to merge, but we still want some specs on the FontMetricCache before merging. Thanks!\n. @woodhull Yes, that's what this is waiting on.\n. Thank you, @kennethkalmer, for your code and for your extreme patience waiting for this pull request.\n\nThe code looks good to me. The only thing that I might have done differently would be to try to test FontMetricsCache by its behavior rather than its internals (for example, injecting a mock and verifying that it is only executed once). But that's a minor nitpick and I think this code is fine to merge. /cc @sandal \n\nThanks again for your contribution to the project!\n. Merged. Thanks @sgwanlee !\n. Definitely. :+1: \n. Thanks for the report, @tpbyrne.\n\n@jonsgreen It looks like commit 419eca8a broke the manual build. I haven't looked into this in great detail, but do you have any ideas off the top of your head? Thanks!\n. This would be very nice, but since there's no general way to find the size of an arbitrary bounding box, it's not obvious how table layout should work. I'm open to suggestions.\n. Right, we already have a layout algorithm that works when given minimum / maximum sizes for cells (though it is certainly not optimal!). The hard part is sizing arbitrary content -- Prawn's language is too flexible to allow us to determine the size of arbitrary content, unless we constrain the constructs that can be used.\n. This appears to break the build on 1.9.3: https://travis-ci.org/prawnpdf/prawn/builds/4278449\n. I'm not sure how to rerun the build on Travis either. But the build is green for me locally on 1.9.3 so I merged. Thanks @cheba!\n. Fancy! Code looks good to me, but this is a rather complex and obscure feature. @yob @sandal @Bluejade @jonsgreen what do you think?\n. I would prefer that this be offered as an extension, unless there's significant demand for it in core. It's not something that any of us on the core team (excepting perhaps @yob) have the knowledge to support and maintain.\n. `:header => true` marks the first row of the table as a header. The first row of your data is being repeated on each page as a header. If you don't want that, remove the `:header` option or add a true header to the array you pass into the `table` method.\n. Merged, thanks!\n. This looks good to me. Anyone else want to review or have comments?\n. :+1: Merged. Thanks @cheba, @yob!\n. Just getting to this thread now; leaving for Ruby on Ales soon :-)\n\nThanks for the suggestion @sandal. I agree that the benefit of clarifying our support of different Ruby versions outweighs the potential confusion of similar codebases. There's broad precedent in keeping a maintenance branch for backports of bugfixes only. I would like to proceed under this approach unless anyone has significant objections to voice. Thanks!\n. @sandal Correct. We'd need a `min_version(1.6)`.\n. @straydogstudio, Please try out the master branch and let us know if it resolves your problem.\n\nThanks @jordanbyron for the fix!\n. Fixed in f1efec1. \"its\" is actually correct, but we did have a stray \"the\" in there. Thanks much for pointing this out!\n\n-be\n. Merged. Thanks so much Greg!\n. @ali-bugdayci -- Please test on master and let me know if this fixes the problem for you. Thanks for reporting!\n. :+1: Merged. Thanks @jordanbyron!\n. Sadly, this is not possible to do robustly with Prawn, because the PDF specification operates at a lower level than the level you want to work at. \n\nA bit of a technical background: PDF text is drawn by the use of character codes, which identify glyphs but not necessarily Unicode characters. There is a provision in the PDF spec for fonts to include a mapping from character IDs to Unicode, but it is optional. So even the problem of identifying \"this page contains the text `foo`\" is nontrivial at best and impossible to accomplish for arbitrary compliant PDFs. The rest of the process (replacing text) has similar technical difficulties if we would want to create a completely compliant solution.\n\nSo I think the best solution for you is going to depend on where these template PDFs are going to come from. If they are being generated by Prawn, you may be able to defer the processing until you have the data you need. If they are coming from somewhere else, you'll probably have to measure distances and draw text on top of the template. It's a semi-manual process, but it has worked for me several times in the past. Hope this helps!\n. Fixed in 20ed1310a929f68ceaec9adaeab984908b3d4600. Closing.\n. You'll have to provide some more detail for anyone to be able to help. This sounds like a Rails problem and there are a lot of things that can go wrong depending on how exactly you're trying to use Prawn.\n\nPlease use the [Google group](https://groups.google.com/forum/?fromgroups#!forum/prawn-ruby) for support questions like this -- it reaches a wider audience and we try to limit the bug tracker to confirmed bugs.\n. Odd problem. It's going to be very hard to diagnose without some sample code that demonstrates your problem, though.\n. Yes, streams were merged in after RC2.\n. It would help if you could provide a sample of a file that was causing this problem through Prawn. There are a lot of things that could be going on here.\n\nSpecifically: it's probably not helpful to think of what Prawn does as \"editing\" an existing PDF. What it really does is start a new PDF and suck in content streams of each page from the old one. So it's not a surprise that there are significant differences between the template and the Prawn-generated document; the question is where we might be (subtly or not so subtly) breaking the PDF spec.\n\nThanks!\n-be\n. Awesome, I'm glad the problem is fixed for you. Thanks!\n. The code looks fine to me. @yob any concerns or suggestions?\n. Thanks for catching that, @yob. Yes, upon further inspection, that is my reading of the diff as well, and does not appear to be correct as it could catch the MediaBoxes of siblings (or unrelated branches) in the page tree.\n. > I think we should keep the inheritance of page attributes as per the spec and assume US Letter in the very rare case that a PDF without a MediaBox is used as a template.\n\nYes, I agree. So does that \"very rare case\" cover the issue that this ticket was opened to cover, @krishicks?\n. Hello,\nPlease use the [mailing list](https://groups.google.com/forum/?fromgroups#!forum/prawn-ruby) for Prawn usage questions. We try to keep the issue tracker limited to bugs.\n\nYour problem is probably that the font you have selected does not have glyphs for the character you are trying to use. You can select a font with the `font` method:\n\n``` ruby\nPrawn::Document.generate(\"test.pdf\") do\n  text \"Check mark \\u2714\"\n\n  font \"/Library/Fonts/Arial Unicode.ttf\"\n  text \"Check mark \\u2714\"\nend\n```\n\nResult:\n\n![check](https://f.cloud.github.com/assets/4621/362107/a64eb6da-a1df-11e2-80f3-910b7fd5af12.png)\n\n[Prawn's manual](http://prawn.majesticseacreature.com/manual.pdf) contains more detailed information about how to select and use fonts.\n\nHope this helps!\nBrad\n. Thank you for raising this issue. After investigating, I believe we are in compliance with the license these files are provided under.\n\nIt is necessary to bundle the AFM fonts because they provide font metrics for the \"core 14\" fonts that PDF readers must support. These fonts may be used without embedding the actual font files, but Prawn still needs the metrics in order to lay out text on the page with the same understanding of the font metrics as a PDF reader will use.\n\nThe [license in MustRead.html](https://raw.github.com/prawnpdf/prawn/master/data/fonts/MustRead.html) alongside the AFM files permits redistribution as long as modifications are noted and MustRead.html is included. Thus I believe we are in compliance with the licensing terms as that file is shipped alongside the AFM files with every distribution of Prawn.\n\nBrad\n. I'm not sure about those TTF files. We should definitely investigate. I'm reopening this ticket to keep track of that. Thanks.\n. Yes, I think you are correct that we can do away with these fonts. You are also correct that the AFM fonts are available on any PDF (compatible readers must support those 14 fonts), and the TTF fonts are used only for testing and demonstration.\n\nI agree with you that these files should be removed; the only step remaining is to actually remove them and determine what the impact will be on our testing process. (For example, there is at least one CJKV font that is used for testing internationalized text, and we will need to vet its license or find a replacement).\n\nThank you!\n. I agree that we need to do something about the TTF fonts that we are currently packaging. But there is no need (or indeed desire) to eliminate the \"standard 14\" AFM fonts. Those fonts are the standard provided by any PDF reader without the need for embedding, and there is no interference with system or user fonts. They are quite essential to Prawn and probably to any nontrivial PDF-generation program, and furthermore I don't see any licensing issues with distributing their AFM metrics, as referenced upthread. Note that the AFM files are not actually fonts (the readers have the font software itself), but rather metrics for describing the size of glyphs so that Prawn can lay out text on the page.\n\nWe will address the TTF / DFont issue (yes -- a pull request would be quite helpful on this!), but I still do not think there are any problems with our use and distribution of those AFM files.\n\nThanks,\nBrad\n. That would be a great interim solution, I think. The AFM metrics are key to Prawn's operation, but the TTFs are only used for testing and generating the manual.\n\nThank you!\nBrad\n. Can you provide a self-contained example, including template file? These sorts of issues often come down to very specific details of the file being used as a template, and a proven test case that we can plug away at would be very helpful.\n\nThanks!\n. Can you post code that reproduces the problem? There are only [a handful of commits between rc2 and master](https://github.com/prawnpdf/prawn/compare/1.0.0.rc2...master) so it shouldn't be too hard to track down.\n. @tomconroy Can you give an example of a problem that this patch solves? Thanks!\n. Oh, very good catch. As with #474, we just need to determine whether any part of Prawn is actively using these and whether they can be replaced.\n\nWe will definitely remove the Rails logo. As for the Ruport logo, @sandal probably has rights to it, in which case we may just need to document those rights appropriately. Otherwise we can remove it as well.\n\nThank you!\nBrad\n. Replaced rails.png with a public-domain image that serves the same purpose. Thank you!\n. Looks good to me, merged. Thanks @aayushkhandelwal11!\n. I like the idea, but this needs some specs proving its functionality. It also [breaks some existing specs](https://travis-ci.org/prawnpdf/prawn/jobs/6837082).\n\nThanks for the feature -- let us know if you have time to work on a few specs; if not, I may try to write some when I can scare up some time.\n\nBrad\n. Cool, thanks. I definitely understand having the paying projects drive the bus yet still wanting to get that code out there. I certainly appreciate your contribution and think it will probably be ready to merge once the spec issues are ironed out. Thanks again!\n. This should now be fixed on the `master` branch, thanks to @cheba's work.\n. Merged, thanks! \n. Merged. Thank you @cheba !\n. I haven't verified that this works, but a reading of the spec implies that this patch implements correct behavior. The code looks :+1: to me.\n. Looks good to me. Merged, thanks!\n. As @bvogel suggested, you need to escape the text before passing it to Prawn. \n\nThis could probably be clarified on Prawn's part, but I'm OK with leaving the result of unescaped `<` undefined for `:inline_format`.\n. Well, we could special-case the less-than sign in Prawn, but you'd still have to escape your input text, right? Otherwise if your input text contained, say, `</b>`, it would be parsed as inline formatting by the Prawn parser. I think that's the real issue here.\n. It would definitely be nice to see this work for non-orthogonal angles (such as 45 degrees). How difficult would that be? I know it would cause some issues around the `rotate_around` argument.\n. This code causes errors on Ruby 1.8, because `File#size` (the instance method) did not exist until 1.9.\n\n[Error line](https://github.com/prawnpdf/prawn/blob/master/lib/prawn/core/document_state.rb#L71), [Travis failure](https://travis-ci.org/prawnpdf/prawn/jobs/8479792).\n. @johnnyshields I have pushed 4d41b89, which I think is a more elegant solution to the problem. Rather than have Subtable pretend it knows about overflow, this patches the `style` method to ignore unknown attributes.\n. Merged, thank you!\n. This has since been fixed. From the master branch:\n\n```\n% gem build prawn.gemspec\n  Successfully built RubyGem\n  Name: prawn\n  Version: 1.0.0.rc2\n  File: prawn-1.0.0.rc2.gem\n\n% gem spec prawn-1.0.0.rc2.gem post_install_message\n--- |+\n\n********************************************\n\n\nA lot has changed recently in Prawn.\n\nPlease read the changelog for details:\n\nhttps://github.com/prawnpdf/prawn/wiki/CHANGELOG\n\n\n********************************************\n\n\n```\n. Should be fixed with the merge of #534.\n. Merged. Thank you!\n. Looks good -- merged. Thanks!\n. Thanks for the patch. This branch fails a before_rendering_page header spec -- can you investigate?\n\nThanks!\nBrad\n. Merged with a minor hash syntax fix (we try to keep 1.8 compatibility still!). Thank you!\n. Merged. Thank you!\n. Merged. Thank you!\n. Thank you @gettalong!\n. Those are RSpec assertions in our test suite. It's basically the same as writing: (in Test::Unit style)\n\n``` ruby\nassert_equal 12, contents.font_settings[0][:size]\nassert_equal 24, contents.font_settings[1][:size]\n```\n. Thanks @gettalong. I appreciate the motivation behind this pull request -- this is a very common question about Prawn's inline format. However, I fear that this patch just sweeps the problem under the rug by further complicating the semantics of the parser. As a parallel: the C compiler, when parsing a string, doesn't try to determine from context whether `\\` was supposed to be part of an escape sequence or if the programmer wanted to use a backslash. All literal backslashes must be escaped.\n\nIn HTML, `<` has a special meaning. If you want to use it on its own, you have to escape it. Why should it be different for Prawn's parser?\n\nI ask this in full awareness that this is a stumbling point for many new Prawn users, so if consensus among the core team is that this would be a positive move, I'll go with it.\n. Merged. Thank you!\n. This breaks image cell specs for me. Can you take a look at spec/cell_spec.rb and make sure it's still working?\n. Merged. Thank you!\n. > I'll defer to @bradediger and @sandal on this, but my preference would be for the image handlers to register themselves with prawn rather than have prawn introspect the Prawn::Images namespace. External code that implements a new image format shouldn't have to live in the the Prawn::Image namespace.\n\nI agree with @yob. In addition to the namespace issues he pointed out, this solution would involve less metaprogramming \"magic\".\n\nI like the direction this is going -- thanks @packetmonkey!\n. This whole thing gets a :+1: from me. I agree with the PDF::Core namespace.\n. > I think that it's a bad programming attitude to use 100% cpu until you have the job done\n\nThis is completely wrong. If the CPU is not being used 100%, the system is being used inefficiently.\n\nIt is the OS scheduler's job to allocate time slices to processes fairly, but it's your job to architect your system in a way that makes this possible. If you're running a single-threaded web server where a long-running request blocks the rest of the requests, and you put a long-running task in the middle of a request, don't be surprised when this is the behavior that you get.\n\n@sandal is right -- this should either be offloaded to a background job, or there's something wrong with the web server configuration you're using.\n. > @bradediger my code is already designed to be kind with other tasks, it's prawn that is not\n\n@pandar1 Sleeping as you suggest would do nothing except slow down the process. \n\nModern operating systems no longer use cooperative multitasking (unless you're using an extremely old or misconfigured kernel), so there's no need to yield the CPU to other tasks. The scheduler knows when other processes are ready to run and will preempt your process. Otherwise, multiuser operating systems would be impractical, as an infinite loop in any process would take down the entire system. Unix-based operating systems have not worked like this in decades.\n\nAs I said before, if there are tasks ready to be run and the CPU is not spending all of its time running them, it is quite literally wasting its time. Your proposed solution would make Prawn slower for everyone and would not fix your architecture.\n. @yob is correct. You can measure JRuby memory usage most accurately using a tool like jvisualvm, which will also allow you to take snapshots to look at individual object allocations.\n. @sandal Yes, @hbrandl's test case looks correct.\n\nI have a hunch that in full generality, this problem may require a constraint solver to completely fix. I know that there is a variant of the table layout problem that someone has proven NP-complete. Our approach is currently heuristic, possibly necessarily so.\n. Great. :thumbsup: \n. Subtables (and table width in general) have never had a truly well-defined behavior. While I am not surprised that the above code raises a CannotFit error, I am reluctant to enshrine this behavior with a spec because it seems like an accident at best. \n\nWhat does Text::Box do when presented with `\"foo\"*100` in the same width? Does it wrap silently, raise CannotFit, or something else? While I don't necessarily think Text::Box's behavior should be normative for the subtable implementation, it would certainly be informative.\n. @sandal Yes, I think using a FP epsilon and changing equality tests to closeness tests is the best (least insane) way to go here. BigDecimal is going to be a huge rabbit hole that offers little payoff, IMO.\n. @sandal Errors accumulate during consecutive numerical operations, so we can't necessarily just use the machine epsilon. But I definitely think we could standardize on an epsilon around 1e-9 (give or take a few orders of magnitude) for all FP comparisons.\n. @sandal `:optimize_objects` was specifically written to GC the junk objects that were left after rolled-back transactions. The only other potential use case might have been cleaning up the object graph imported from a template, but now that those are gone I don't know that we have any more need for it.\n. @sandal I think that was just a regression test.\n. ",
    "bensie": "This would be great!\n. This would be great!\n. ",
    "henrik": "Added a :margin option:\nhttp://github.com/henrik/prawn/commit/bdf3e6580288389b7c2404ae040b607b5649b260\n\nI suppose I could add in support for [a,b,c,d]. Is there a conventional order? In CSS it's top, right, bottom, left. Same here?\n. Okay, pushed to my master. Both Document#initialize and Document#start_new_page now support :margin, and it can take anything from a single value to four values:\n\n```\n# The :margin can also be an array much like CSS shorthand:\n#\n#   # Top and bottom are 20, left and right are 100.\n#   :margin => [20, 100]\n#   # Top is 50, left and right are 100, bottom is 20.\n#   :margin => [50, 100, 20]\n#   # Top is 10, right is 20, bottom is 30, left is 40.\n#   :margin => [10, 20, 30, 40]\n```\n\nSo fetch me and e.g.\n\n```\ngit cherry-pick 2bab3fc76ecdadfae1e858d422530aa10f955f4c^^\ngit cherry-pick 2bab3fc76ecdadfae1e858d422530aa10f955f4c^\ngit cherry-pick 2bab3fc76ecdadfae1e858d422530aa10f955f4c\n```\n\nto get the commits. Or just merge. I rebased sandal/master, so my commits are on top of it.\n. I noticed prawn-format has some support for this. You can add something like\n\n```\nif options[:letter_spacing]\n  state[:text].character_space(options[:letter_spacing])\nend\n```\n\nto Line#draw_on and then do something like\n\n```\ntext \"foo\", :letter_spacing => 123\n```\n\n, but this messes up line wrapping and likely a bunch of other things.\n\nMaybe someone can build on it, though.\n. If it helps someone else, I ended up faking it (in Rails, hence the `chars`) like this:\n\n```\nrequire \"prawn/format\"\nmy_string = \"some text\\nsome more\"\nspaced_string = my_string.lines.map {|line| line.chars.split('').join('<space></space>') }.join('<br/>')\ntext spaced_string, :tags => { :space => { :width => '1' } }  # fake letter-spacing\n```\n. GIF is an old format. I'm not aware of any benefits compared to PNG other than browser support, which isn't an issue with Prawn.\n\nThe one argument for it I can think of is when you want to use the same images for web and PDF and you have cross-browser issues with PNG.\n\nI don't see that adding this would be a big gain, and I'm guessing the core developers will not spend time on it, but may accept a patch.\n. The patents are supposedly expired everywhere since 1 October 2006, so I don't think there are legal issues any longer, at least.\n. Simon, could you provide a self-contained runnable example file? Increases the chances of someone fixing this.\n. Been a while since I worked with Prawn, so I don't expect I will be contributing this feature, but I still think it'd be a nice thing to have ;) Maybe next time I do PDF work if no one beats me to it.\n. :+1:\n. Future +1ers: please don't quote the original message when you reply, since\nthat will auto-subscribe everyone it mentioned, even if they unsubscribed\nbefore.\n\nNo hard feelings, of course \u2013 it's not something you'd expect :)\n. @nathansamson Thank you. Yeah, we were just discussing it and realized that the uncompressed bitmap had got to be pretty huge.\n\nOur quickfix was to just scale it down, and I suspect our longer-term fix will be something similar as well.\n. That makes sense. I'll close this issue.\n. @packetmonkey Thank you! We'll have a look.\n. Added a :margin option:\nhttp://github.com/henrik/prawn/commit/bdf3e6580288389b7c2404ae040b607b5649b260\n\nI suppose I could add in support for [a,b,c,d]. Is there a conventional order? In CSS it's top, right, bottom, left. Same here?\n. Okay, pushed to my master. Both Document#initialize and Document#start_new_page now support :margin, and it can take anything from a single value to four values:\n\n```\n# The :margin can also be an array much like CSS shorthand:\n#\n#   # Top and bottom are 20, left and right are 100.\n#   :margin => [20, 100]\n#   # Top is 50, left and right are 100, bottom is 20.\n#   :margin => [50, 100, 20]\n#   # Top is 10, right is 20, bottom is 30, left is 40.\n#   :margin => [10, 20, 30, 40]\n```\n\nSo fetch me and e.g.\n\n```\ngit cherry-pick 2bab3fc76ecdadfae1e858d422530aa10f955f4c^^\ngit cherry-pick 2bab3fc76ecdadfae1e858d422530aa10f955f4c^\ngit cherry-pick 2bab3fc76ecdadfae1e858d422530aa10f955f4c\n```\n\nto get the commits. Or just merge. I rebased sandal/master, so my commits are on top of it.\n. I noticed prawn-format has some support for this. You can add something like\n\n```\nif options[:letter_spacing]\n  state[:text].character_space(options[:letter_spacing])\nend\n```\n\nto Line#draw_on and then do something like\n\n```\ntext \"foo\", :letter_spacing => 123\n```\n\n, but this messes up line wrapping and likely a bunch of other things.\n\nMaybe someone can build on it, though.\n. If it helps someone else, I ended up faking it (in Rails, hence the `chars`) like this:\n\n```\nrequire \"prawn/format\"\nmy_string = \"some text\\nsome more\"\nspaced_string = my_string.lines.map {|line| line.chars.split('').join('<space></space>') }.join('<br/>')\ntext spaced_string, :tags => { :space => { :width => '1' } }  # fake letter-spacing\n```\n. GIF is an old format. I'm not aware of any benefits compared to PNG other than browser support, which isn't an issue with Prawn.\n\nThe one argument for it I can think of is when you want to use the same images for web and PDF and you have cross-browser issues with PNG.\n\nI don't see that adding this would be a big gain, and I'm guessing the core developers will not spend time on it, but may accept a patch.\n. The patents are supposedly expired everywhere since 1 October 2006, so I don't think there are legal issues any longer, at least.\n. Simon, could you provide a self-contained runnable example file? Increases the chances of someone fixing this.\n. Been a while since I worked with Prawn, so I don't expect I will be contributing this feature, but I still think it'd be a nice thing to have ;) Maybe next time I do PDF work if no one beats me to it.\n. :+1:\n. Future +1ers: please don't quote the original message when you reply, since\nthat will auto-subscribe everyone it mentioned, even if they unsubscribed\nbefore.\n\nNo hard feelings, of course \u2013 it's not something you'd expect :)\n. @nathansamson Thank you. Yeah, we were just discussing it and realized that the uncompressed bitmap had got to be pretty huge.\n\nOur quickfix was to just scale it down, and I suspect our longer-term fix will be something similar as well.\n. That makes sense. I'll close this issue.\n. @packetmonkey Thank you! We'll have a look.\n. ",
    "blaines": "I think this important for a pdf library.\n. I think this important for a pdf library.\n. ",
    "expilo": "I'll be happy to cook up something. \n. I'll be happy to cook up something. \n. ",
    "amoeba": "It seems like there's a lot of variation in style but here's an example of Prawn doing this:\n\nhttp://gist.github.com/159366\n. I needed this ability for a project using Bundler so I made a fork:\n\namoeba/prawn@6fcdad510465756215c9cea690b572d58ece8aac\n\nIt didn't exactly take me much time but I thought I'd link it.\n. It seems like there's a lot of variation in style but here's an example of Prawn doing this:\n\nhttp://gist.github.com/159366\n. I needed this ability for a project using Bundler so I made a fork:\n\namoeba/prawn@6fcdad510465756215c9cea690b572d58ece8aac\n\nIt didn't exactly take me much time but I thought I'd link it.\n. ",
    "jerodsanto": "thanks, will do\n. thanks, will do\n. ",
    "fastpencil": "This particular issue is driving me crazy when using the Arial TTF font, which apparently has a width defined for the newline character, although I'm hard-pressed to figure out why anyone would want a newline to have width.\n. This particular issue is driving me crazy when using the Arial TTF font, which apparently has a width defined for the newline character, although I'm hard-pressed to figure out why anyone would want a newline to have width.\n. ",
    "bsdmad": "Thanks for your comment. I'll report it to exerb developers!\n. Thanks for your comment. I'll report it to exerb developers!\n. ",
    "twalpole": "I believe this is caused by not passing all the options through to width_of in Prawn:Document::Text#wrapped_text  so prawn-format doesnt get the :plain option and tries to parse it for tags\n. Actually -- I believe when the :plain option is detected prawn-formats text_with_formatting calls back to the original prawn-core which it has aliased as text_without_formatting.   The original prawn-core text then calls the original wrapped_text  which calls  \"width_of(e, :kerning => options[:kerning])\".   This has been aliased from prawn-layouts width_of_with_formatting BUT since the prawn-core call to width_of has stripped out the :plain option (because it only passes the :kerning option for some reason) - then width_of_with_formatting no longer knows that the :plain option was used and attempts to process the text as if it contains formatting.  Passing all options through to width_of should fix this issue - unless there is a specific reason only :kerning is passed\n. I believe this is caused by not passing all the options through to width_of in Prawn:Document::Text#wrapped_text  so prawn-format doesnt get the :plain option and tries to parse it for tags\n. Actually -- I believe when the :plain option is detected prawn-formats text_with_formatting calls back to the original prawn-core which it has aliased as text_without_formatting.   The original prawn-core text then calls the original wrapped_text  which calls  \"width_of(e, :kerning => options[:kerning])\".   This has been aliased from prawn-layouts width_of_with_formatting BUT since the prawn-core call to width_of has stripped out the :plain option (because it only passes the :kerning option for some reason) - then width_of_with_formatting no longer knows that the :plain option was used and attempts to process the text as if it contains formatting.  Passing all options through to width_of should fix this issue - unless there is a specific reason only :kerning is passed\n. ",
    "dsisnero": "Here is a page that describes several implementations of rounded rectangles for cairo which is a vector library with primitives like pdf\n\nhttp://cairographics.org/cookbook/roundedrectangles/\n. I like this approach of delegating to an internal pdf document.  However, in asciidoctor-pdf the document method is already taken by the internal asciidoctor document.  It would be better if either the name could be supplied or if it could be changed to something not likely to be used. __pdf_document.  \n. Here is a page that describes several implementations of rounded rectangles for cairo which is a vector library with primitives like pdf\n\nhttp://cairographics.org/cookbook/roundedrectangles/\n. I like this approach of delegating to an internal pdf document.  However, in asciidoctor-pdf the document method is already taken by the internal asciidoctor document.  It would be better if either the name could be supplied or if it could be changed to something not likely to be used. __pdf_document.  \n. ",
    "Bluejade": "> Definitely will accept a patch for this, but it needs to be on a fork with tests and examples\n\nQuestion about this:\nWhen I was making my star shape the other day, I wondered how one would write specs for it. The spec for, as an example, ellipse_at in the Prawn spec suite does test that the API hasn't changed, and that the pointer is back at the center of the ellipse, but it doesn't really test that an ellipse has been drawn, just the last point.\n\nI guess one could create an example, render it, go into the resulting PDF and extract the generated points, and then create a regression test spec.\n\nDo you have guidance on this, Greg?\n\nThank You,\n\nDaniel\n. Since I've rewritten text and written formatted text, it would be most straightforward for me to take this on. \n. Pushed to master\nhttp://github.com/sandal/prawn/commit/3d15b75f4d70cc3ee89414854c11942b7c11a42c\nhttp://github.com/sandal/prawn/commit/68513ef76fad352ae362bc00c2578ea5bbd5f269\nhttp://github.com/sandal/prawn/commit/a5a8603d8fa226671f9b9bfda74b5e9cbc2db7a0\nhttp://github.com/sandal/prawn/commit/8b8232c808dd27e7184d6785c06d46b6bf83f455\n. No rush. I need to start using Prawn in a project for a while, rather than extending it. ;-)\n\nThat is good, because it means I can dogfood what I've contributed and see what else I need.\n. https://github.com/sandal/prawn/commit/f5b56eaa8ad629b8ec6f192dab3fde8a9a69f3a3\nhttps://github.com/sandal/prawn/commit/c8138450b2d5c91dd2d71ff36304cef7ce945319\n\nExplained here:\nhttp://groups.google.com/group/prawn-ruby/browse_thread/thread/b1f594b42cc8001b\n. solved by http://github.com/sandal/prawn/commit/d58f7b4f93d9a5f9720afc00520303666b1c3327\n. I read this too quickly. Was looking for an issue related to the Google Group thread about inability to indent text using spaces.\n. Thanks to jaronkk for patching this:\nhttps://github.com/sandal/prawn/pull/218\n. solved: http://github.com/sandal/prawn/commit/1056adacb7c8a4ff4729daa4f699de6ca2037c4c\n. Fallback font support is now implemented. Check out the manual and the developer documentation.\n\nhttps://github.com/sandal/prawn/commit/39e168f8bccc270b3639de8783d762481725f144\nhttps://github.com/sandal/prawn/commit/ceb8c674f2e6f71a362fe9537eec766393b42b7a\nhttps://github.com/sandal/prawn/commit/2a8eddfd78cdbf9da814d9fb33c7afd1f50c7a7a\nhttps://github.com/sandal/prawn/commit/de8564fd256429858193d4dc3b4a68782da49051\n. https://github.com/sandal/prawn/commit/73579093fb018cfdbb47940eb5eb2c70bc96a86e\n. document-wide leading (Closed by 178dfbf1daa570e76d95b87a0137488ddc486960)\n. inline_format isn't intended to work with text_box(). text_box() is just a convenience method for Text::Box#new and Text::Box#render, and I don't want text_box() to have any capacity that breaks this relationship.\n. Use formatted_text_box() with a formatted text array. Or, as you demonstrated above, you can convert \"inline formatted\" text to a formatted text array and back. \n. The idea of Prawn is to be extensible. It's \u00fcber easy to meet your needs by extending it with an inline_formatted_text_box() method. I'm just not convinced that such a method belongs in core. But that's really up to Greg.\n. That means you haven't defined the bold font in the font family. See the inline_format.rb example where it defines font families for \"Action Man\"\n. https://github.com/sandal/prawn/commit/dfc7bd16642305a712c383fb73d66a9f2daf08dc\n. https://github.com/sandal/prawn/commit/f0f16114a7da2cd3cfe3c29c613f503c883489b3\n. Text box is the building block for higher level text layout. New page is not within its scope.\n. In that case, the table should handle the new page, not text box. Again, text box is a layout building block; other elements handle the actual layout.\n\nAs for where to begin to patch this, I'm not familiar with the table code. Brad redesigned tables a few versions ago, so he would have a much better idea of where to start.\n. I'd like to keep the indented_paragraphs example around because it visually covers several edge cases around page breaks, which the manual shouldn't waste space doing. These cases do exist in the spec suite, but I like the visual version as well because it helped me during debugging to be able to see what is happening.\n\nPerhaps we could select those few examples that shouldn't be represented in the manual and rename them to \"visual_tests\", instead of examples.\n. Should we remove the reference_pdfs directory and the examples rake task?\n\nAlso, would it be okay with you if I moved indented_paragraphs.rb back into examples/text? It tests a bunch of edge cases that are indeed captured in the specs, but I found it helpful to be able to see what was happening when I was working on that part of the code.\n. I've removed reference_pdfs and the examples rake task and have restored indented_paragraphs.rb.\n. Hi Brad,\n\nIt didn't even cross my mind that reference_PDFs would be used in the spec suite. Apologies for breaking master.\n\nWhat is the preferred location for data used in tests? My preference would be to include a \"data\" or a \"test_data\" directory within \"specs\" so that it is clear what it is for. Is that okay with you?\n\nThanks,\n\nDaniel\n. Done, running green, and pushed to master.\n. https://github.com/sandal/prawn/commit/1eac72aecf8237ecdf738f6bfbb7f27f9367ac13\nhttps://github.com/sandal/prawn/commit/526cbfccd0f47d63eb088a53ee1c2eb6231aff8d\n. https://github.com/sandal/prawn/commit/c8138450b2d5c91dd2d71ff36304cef7ce945319\n. omit line gap below the last line from Text::Box#height and when determining whether a line will fit. Closed by https://github.com/sandal/prawn/commit/1cab3e6f87529fb7ce05ea7e6e8491c9e6599320\n. The following commit closes this bug:\nhttps://github.com/sandal/prawn/commit/41a04838aabd20cb15b774b8cd399fcc82045f57\n. Please do not open issues without first posting to the Prawn Google Group. This issue you opened is not an issue with Prawn; it is an issue with your unfamiliarity with Rails. \n\nIn any case, read https://github.com/sandal/prawn/wiki/Using-Prawn-in-Rails for instructions on how to use Prawn in Rails. In particular, refer to the note on registering the mime type.\n. Thank you very much! This was one of our 1.0 blockers.\n\nfyi, I did make a couple small changes:\ni. making attr_readers of total_left_padding and total_right_padding, instead of explicit getter methods\nii. should raise_error is valid rspec, but isn't compatible with test/spec, so I changed it to should.raise\n\nThanks again,\n\nDaniel\n. Merged. Thank you for the patch!\n. Thank you Micha\u00ebl! \n. don&#39;t wrap between fragments unless a word break is present. Closed by 24491c35150b78236a472cfa3a988b9c87be0ad1\n. Thank you Micha\u00ebl! Fixed in master and will be part of 0.11.1\n\nhttps://github.com/sandal/prawn/commit/24491c35150b78236a472cfa3a988b9c87be0ad1 \n. Thanks!\n. On 4/12/11, pinscher\nreply@reply.github.com\nwrote:\n\n> after \"bundle install\" my document_pdf.rb with all design for the PDF is\n> totally ignored and a very old version of that file is used instead!   Even\n> if I edit my document_pdf.rb there is no change on the generated PDF.\n\nIf you are using Rails, and document_pdf.rb is in ./lib, then you may\nneed to restart script/server between changes. Or, if you are\ngenerating the PDF in a background job, then you may need to restart\nyour background job worker regardless of where document_pdf.rb is.\n\nRegardless, it isn't a Prawn specific problem.\n- Daniel\n. When calling text_box subsequent times, you need to include the :skip_encoding option. I'm closing this ticket and will open another ticket about updating the manual to mention this and/or improving developer documentation.\n\nIn any case, #encoding is 1.9 only, not 1.8.\n. On Wed, May 18, 2011 at 6:25 AM, chandraj\nreply@reply.github.com\nwrote:\n\n> Hi I am using prawn (0.11.1, 0.11.1.pre) gem\n> while generating pdf few html tags not getting evalte for example\n> \n> p>span style=\"text-decoration: underline;\">hi this is test paragraph and this is required span style=\"background-color:\n> #888888;\">collered in background &nbsp;and now font color is span style=\"color: #ff99cc;\">&nbsp;span style=\"color:\n> #ff0000;\">red/span>/span>/span>/span>/p>\n> \n> is there any way to get html tags work in prawn\n> thanks in advance\n\nRead the documentation on the :inline_format text option. It enables\nyou to do some inline styling. For paragraphs, Prawn accepts newlines.\n\n-Daniel\n. Thank you for pointing this out. Fallback support doesn't take the\nstyle portion of a font family into consideration. A kludgy workaround\nfor now, if you are replacing in solid bold text (this won't work if\nyou are switching between bold and plain within a block of text),\nwould be to set bold-only font families that you use as fallback fonts\nfor bold sections. For example:\n\npdf.font_families.update(\"CalibriBold\" => {\n   :normal => \"/Library/Fonts/Microsoft/Calibri Bold.ttf\"\n})\npdf.fallback_fonts [\"CalibriBold\"]\n\nLike I said, it is a kludge, but it might get you through the immediate problem.\n\nCheers,\n\nDaniel\n. > I'm printing math quizzes, so I need to have support for characters such as \u2075, \u03c0, etc....\n> I print these pdfs without touching fonts, because the prawn default font (Helvetica) is the exact font of these documents.\n> With Helvetica I print some texts in bold, such as the title, the column headers, etc....\n> \n> But Helvetica does not suppor the glyphes I need, so I configured the Calibri fallback font to print them when present in the question content.\n\nWhat happens when you define the fallback font simply as:\npdf.fallback_fonts [\"Calibri\"]\n\nThank You,\n\nDaniel\n. > Nothing changed... The bold text in Helvetica is printed as normal....\n> The problem is:\n> - If I don't set a fallback font, most glyphes are displayed as _ (because the default Helvetica font does not have them);\n> - If I set a fallback font, bold text in Helvetica is printed incorrectly as normal.\n> \n> Thank you for the support! Please tell me if you want some code.\n\nYes please, if you have a minimum case that reproduces the problem,\nthen that will help me look into it.\n\nThank You,\n\nDaniel\n. > Check it out: fork [this repository](https://github.com/oli-g/prawn_issue_263). The app reflect the situation where I am in my real application. I used ruby 1.9.2-p180 and rails 3.0.7.\n> Let me know if you have some problem or if I can help you in some ways...\n> Thank you\n> Giannicola\n\nHello Giannicola,\n\nInstead of relying on the fallback font, you can set font at the\nfragment level (even a single character). Check out Text > Advanced\nStyling > Formatted text (page 50) in the manual:\nhttp://prawn.majesticseacreature.com/manual.pdf\n\nOtherwise, if you can extract the code into a stand-alone example with\nhard-coded data, then that would be more helpful than an entire Rails\napp.\n\nCheers,\n\nDaniel\n. Hello Giannicola,\n\nMy apologies for the delay. How about this?:\nhttps://github.com/Bluejade/prawn_issue_263_bis/commit/f71c7f5d5cb7c364dcd228dae58d7fe9eaba1578\n\nThat is documented on page 84 of the manual:\nhttp://prawn.majesticseacreature.com/manual.pdf\n\nBest Regards,\n\nDaniel\n\nOn Tue, Sep 27, 2011 at 6:57 AM, Giannicola Olivadoti\nreply@reply.github.com\nwrote:\n\n> Hello Daniel, any news? Can I help in some way?\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/sandal/prawn/issues/263#issuecomment-2209894\n. True. Brad is far more familiar with table code than I am...Brad, what do you think about this? (and apologies for passing the buck)\n\nGiannicola's simplified example is helpful:\nhttps://github.com/oli-g/prawn_issue_263_bis\n. Have you looked at formatted_text_box?\n. > @Bluejade, can you clarify the purpose of :exclude_trailing_white_space?\n> From my reading, it appears to be used to exclude trailing white space from\n> width calculations. What was the reasoning behind process_text skipping\n> soft-hyphen processing on fragments where this option is enabled?\n\nHello Brad,\n\nI'll have to re-familiarize myself with that code and get back to you.\n\nBest,\n\nDaniel\n\n> Thanks!\n> -be\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n. > \u00a0kindly, i was looking to print a text of Arabic with the support of RTL ... but noting displayed even in prawn '1.0.0.rc1' version.\n> \u00a0how to display Arabic text in PDF and apply UTF-8 encoding.\n\nAre you certain that you set up the font family correctly?\n\nKind Regards,\n\nDaniel\n. This would cause text with very long words (eg: URLs) to shrink to the minimum allowed size when :shrink_to_fit was active. :shrink_to_fit is more about fitting vertically, rather than horizontally. There is a single line option that will restrict text boxes to a single line and that should enable shrink_to_fit to work horizontally in that use case.\n. Thank you Alex and Brad!\n. > Now I'm having troubles with hyphenizations that should't occur. My algorithm fits a text in a page with a font {max: 240, min: 72} and it is fine with most of my texts, but the following one has a big word that breaks it, while it should not.\n\nThis has been a confusion previously as well. :shrink_to_fit is\ndesigned to shrink text until it fits vertically. It is does not\nhandle long words. One solution would be to add an option to disable\n#wrap_by_char.\n\nBest,\n\nDaniel\n. Inline format recognizes a limited set of markup tags. To support this\nfunctionality, characters such as <, >, and & need to be represented by\ntheir html entity forms of &lt; , &gt; , and &amp; .\n- Daniel\n  On Aug 8, 2013 3:03 AM, \"nithin stany dsouza\" notifications@github.com\n  wrote:\n\n> pdf.text \"< \\* 3000*\", :inline_format => true its only print 3000 is bold\n> < is missing\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/prawnpdf/prawn/issues/527\n> .\n. > Definitely will accept a patch for this, but it needs to be on a fork with tests and examples\n\nQuestion about this:\nWhen I was making my star shape the other day, I wondered how one would write specs for it. The spec for, as an example, ellipse_at in the Prawn spec suite does test that the API hasn't changed, and that the pointer is back at the center of the ellipse, but it doesn't really test that an ellipse has been drawn, just the last point.\n\nI guess one could create an example, render it, go into the resulting PDF and extract the generated points, and then create a regression test spec.\n\nDo you have guidance on this, Greg?\n\nThank You,\n\nDaniel\n. Since I've rewritten text and written formatted text, it would be most straightforward for me to take this on. \n. Pushed to master\nhttp://github.com/sandal/prawn/commit/3d15b75f4d70cc3ee89414854c11942b7c11a42c\nhttp://github.com/sandal/prawn/commit/68513ef76fad352ae362bc00c2578ea5bbd5f269\nhttp://github.com/sandal/prawn/commit/a5a8603d8fa226671f9b9bfda74b5e9cbc2db7a0\nhttp://github.com/sandal/prawn/commit/8b8232c808dd27e7184d6785c06d46b6bf83f455\n. No rush. I need to start using Prawn in a project for a while, rather than extending it. ;-)\n\nThat is good, because it means I can dogfood what I've contributed and see what else I need.\n. https://github.com/sandal/prawn/commit/f5b56eaa8ad629b8ec6f192dab3fde8a9a69f3a3\nhttps://github.com/sandal/prawn/commit/c8138450b2d5c91dd2d71ff36304cef7ce945319\n\nExplained here:\nhttp://groups.google.com/group/prawn-ruby/browse_thread/thread/b1f594b42cc8001b\n. solved by http://github.com/sandal/prawn/commit/d58f7b4f93d9a5f9720afc00520303666b1c3327\n. I read this too quickly. Was looking for an issue related to the Google Group thread about inability to indent text using spaces.\n. Thanks to jaronkk for patching this:\nhttps://github.com/sandal/prawn/pull/218\n. solved: http://github.com/sandal/prawn/commit/1056adacb7c8a4ff4729daa4f699de6ca2037c4c\n. Fallback font support is now implemented. Check out the manual and the developer documentation.\n\nhttps://github.com/sandal/prawn/commit/39e168f8bccc270b3639de8783d762481725f144\nhttps://github.com/sandal/prawn/commit/ceb8c674f2e6f71a362fe9537eec766393b42b7a\nhttps://github.com/sandal/prawn/commit/2a8eddfd78cdbf9da814d9fb33c7afd1f50c7a7a\nhttps://github.com/sandal/prawn/commit/de8564fd256429858193d4dc3b4a68782da49051\n. https://github.com/sandal/prawn/commit/73579093fb018cfdbb47940eb5eb2c70bc96a86e\n. document-wide leading (Closed by 178dfbf1daa570e76d95b87a0137488ddc486960)\n. inline_format isn't intended to work with text_box(). text_box() is just a convenience method for Text::Box#new and Text::Box#render, and I don't want text_box() to have any capacity that breaks this relationship.\n. Use formatted_text_box() with a formatted text array. Or, as you demonstrated above, you can convert \"inline formatted\" text to a formatted text array and back. \n. The idea of Prawn is to be extensible. It's \u00fcber easy to meet your needs by extending it with an inline_formatted_text_box() method. I'm just not convinced that such a method belongs in core. But that's really up to Greg.\n. That means you haven't defined the bold font in the font family. See the inline_format.rb example where it defines font families for \"Action Man\"\n. https://github.com/sandal/prawn/commit/dfc7bd16642305a712c383fb73d66a9f2daf08dc\n. https://github.com/sandal/prawn/commit/f0f16114a7da2cd3cfe3c29c613f503c883489b3\n. Text box is the building block for higher level text layout. New page is not within its scope.\n. In that case, the table should handle the new page, not text box. Again, text box is a layout building block; other elements handle the actual layout.\n\nAs for where to begin to patch this, I'm not familiar with the table code. Brad redesigned tables a few versions ago, so he would have a much better idea of where to start.\n. I'd like to keep the indented_paragraphs example around because it visually covers several edge cases around page breaks, which the manual shouldn't waste space doing. These cases do exist in the spec suite, but I like the visual version as well because it helped me during debugging to be able to see what is happening.\n\nPerhaps we could select those few examples that shouldn't be represented in the manual and rename them to \"visual_tests\", instead of examples.\n. Should we remove the reference_pdfs directory and the examples rake task?\n\nAlso, would it be okay with you if I moved indented_paragraphs.rb back into examples/text? It tests a bunch of edge cases that are indeed captured in the specs, but I found it helpful to be able to see what was happening when I was working on that part of the code.\n. I've removed reference_pdfs and the examples rake task and have restored indented_paragraphs.rb.\n. Hi Brad,\n\nIt didn't even cross my mind that reference_PDFs would be used in the spec suite. Apologies for breaking master.\n\nWhat is the preferred location for data used in tests? My preference would be to include a \"data\" or a \"test_data\" directory within \"specs\" so that it is clear what it is for. Is that okay with you?\n\nThanks,\n\nDaniel\n. Done, running green, and pushed to master.\n. https://github.com/sandal/prawn/commit/1eac72aecf8237ecdf738f6bfbb7f27f9367ac13\nhttps://github.com/sandal/prawn/commit/526cbfccd0f47d63eb088a53ee1c2eb6231aff8d\n. https://github.com/sandal/prawn/commit/c8138450b2d5c91dd2d71ff36304cef7ce945319\n. omit line gap below the last line from Text::Box#height and when determining whether a line will fit. Closed by https://github.com/sandal/prawn/commit/1cab3e6f87529fb7ce05ea7e6e8491c9e6599320\n. The following commit closes this bug:\nhttps://github.com/sandal/prawn/commit/41a04838aabd20cb15b774b8cd399fcc82045f57\n. Please do not open issues without first posting to the Prawn Google Group. This issue you opened is not an issue with Prawn; it is an issue with your unfamiliarity with Rails. \n\nIn any case, read https://github.com/sandal/prawn/wiki/Using-Prawn-in-Rails for instructions on how to use Prawn in Rails. In particular, refer to the note on registering the mime type.\n. Thank you very much! This was one of our 1.0 blockers.\n\nfyi, I did make a couple small changes:\ni. making attr_readers of total_left_padding and total_right_padding, instead of explicit getter methods\nii. should raise_error is valid rspec, but isn't compatible with test/spec, so I changed it to should.raise\n\nThanks again,\n\nDaniel\n. Merged. Thank you for the patch!\n. Thank you Micha\u00ebl! \n. don&#39;t wrap between fragments unless a word break is present. Closed by 24491c35150b78236a472cfa3a988b9c87be0ad1\n. Thank you Micha\u00ebl! Fixed in master and will be part of 0.11.1\n\nhttps://github.com/sandal/prawn/commit/24491c35150b78236a472cfa3a988b9c87be0ad1 \n. Thanks!\n. On 4/12/11, pinscher\nreply@reply.github.com\nwrote:\n\n> after \"bundle install\" my document_pdf.rb with all design for the PDF is\n> totally ignored and a very old version of that file is used instead!   Even\n> if I edit my document_pdf.rb there is no change on the generated PDF.\n\nIf you are using Rails, and document_pdf.rb is in ./lib, then you may\nneed to restart script/server between changes. Or, if you are\ngenerating the PDF in a background job, then you may need to restart\nyour background job worker regardless of where document_pdf.rb is.\n\nRegardless, it isn't a Prawn specific problem.\n- Daniel\n. When calling text_box subsequent times, you need to include the :skip_encoding option. I'm closing this ticket and will open another ticket about updating the manual to mention this and/or improving developer documentation.\n\nIn any case, #encoding is 1.9 only, not 1.8.\n. On Wed, May 18, 2011 at 6:25 AM, chandraj\nreply@reply.github.com\nwrote:\n\n> Hi I am using prawn (0.11.1, 0.11.1.pre) gem\n> while generating pdf few html tags not getting evalte for example\n> \n> p>span style=\"text-decoration: underline;\">hi this is test paragraph and this is required span style=\"background-color:\n> #888888;\">collered in background &nbsp;and now font color is span style=\"color: #ff99cc;\">&nbsp;span style=\"color:\n> #ff0000;\">red/span>/span>/span>/span>/p>\n> \n> is there any way to get html tags work in prawn\n> thanks in advance\n\nRead the documentation on the :inline_format text option. It enables\nyou to do some inline styling. For paragraphs, Prawn accepts newlines.\n\n-Daniel\n. Thank you for pointing this out. Fallback support doesn't take the\nstyle portion of a font family into consideration. A kludgy workaround\nfor now, if you are replacing in solid bold text (this won't work if\nyou are switching between bold and plain within a block of text),\nwould be to set bold-only font families that you use as fallback fonts\nfor bold sections. For example:\n\npdf.font_families.update(\"CalibriBold\" => {\n   :normal => \"/Library/Fonts/Microsoft/Calibri Bold.ttf\"\n})\npdf.fallback_fonts [\"CalibriBold\"]\n\nLike I said, it is a kludge, but it might get you through the immediate problem.\n\nCheers,\n\nDaniel\n. > I'm printing math quizzes, so I need to have support for characters such as \u2075, \u03c0, etc....\n> I print these pdfs without touching fonts, because the prawn default font (Helvetica) is the exact font of these documents.\n> With Helvetica I print some texts in bold, such as the title, the column headers, etc....\n> \n> But Helvetica does not suppor the glyphes I need, so I configured the Calibri fallback font to print them when present in the question content.\n\nWhat happens when you define the fallback font simply as:\npdf.fallback_fonts [\"Calibri\"]\n\nThank You,\n\nDaniel\n. > Nothing changed... The bold text in Helvetica is printed as normal....\n> The problem is:\n> - If I don't set a fallback font, most glyphes are displayed as _ (because the default Helvetica font does not have them);\n> - If I set a fallback font, bold text in Helvetica is printed incorrectly as normal.\n> \n> Thank you for the support! Please tell me if you want some code.\n\nYes please, if you have a minimum case that reproduces the problem,\nthen that will help me look into it.\n\nThank You,\n\nDaniel\n. > Check it out: fork [this repository](https://github.com/oli-g/prawn_issue_263). The app reflect the situation where I am in my real application. I used ruby 1.9.2-p180 and rails 3.0.7.\n> Let me know if you have some problem or if I can help you in some ways...\n> Thank you\n> Giannicola\n\nHello Giannicola,\n\nInstead of relying on the fallback font, you can set font at the\nfragment level (even a single character). Check out Text > Advanced\nStyling > Formatted text (page 50) in the manual:\nhttp://prawn.majesticseacreature.com/manual.pdf\n\nOtherwise, if you can extract the code into a stand-alone example with\nhard-coded data, then that would be more helpful than an entire Rails\napp.\n\nCheers,\n\nDaniel\n. Hello Giannicola,\n\nMy apologies for the delay. How about this?:\nhttps://github.com/Bluejade/prawn_issue_263_bis/commit/f71c7f5d5cb7c364dcd228dae58d7fe9eaba1578\n\nThat is documented on page 84 of the manual:\nhttp://prawn.majesticseacreature.com/manual.pdf\n\nBest Regards,\n\nDaniel\n\nOn Tue, Sep 27, 2011 at 6:57 AM, Giannicola Olivadoti\nreply@reply.github.com\nwrote:\n\n> Hello Daniel, any news? Can I help in some way?\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/sandal/prawn/issues/263#issuecomment-2209894\n. True. Brad is far more familiar with table code than I am...Brad, what do you think about this? (and apologies for passing the buck)\n\nGiannicola's simplified example is helpful:\nhttps://github.com/oli-g/prawn_issue_263_bis\n. Have you looked at formatted_text_box?\n. > @Bluejade, can you clarify the purpose of :exclude_trailing_white_space?\n> From my reading, it appears to be used to exclude trailing white space from\n> width calculations. What was the reasoning behind process_text skipping\n> soft-hyphen processing on fragments where this option is enabled?\n\nHello Brad,\n\nI'll have to re-familiarize myself with that code and get back to you.\n\nBest,\n\nDaniel\n\n> Thanks!\n> -be\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n. > \u00a0kindly, i was looking to print a text of Arabic with the support of RTL ... but noting displayed even in prawn '1.0.0.rc1' version.\n> \u00a0how to display Arabic text in PDF and apply UTF-8 encoding.\n\nAre you certain that you set up the font family correctly?\n\nKind Regards,\n\nDaniel\n. This would cause text with very long words (eg: URLs) to shrink to the minimum allowed size when :shrink_to_fit was active. :shrink_to_fit is more about fitting vertically, rather than horizontally. There is a single line option that will restrict text boxes to a single line and that should enable shrink_to_fit to work horizontally in that use case.\n. Thank you Alex and Brad!\n. > Now I'm having troubles with hyphenizations that should't occur. My algorithm fits a text in a page with a font {max: 240, min: 72} and it is fine with most of my texts, but the following one has a big word that breaks it, while it should not.\n\nThis has been a confusion previously as well. :shrink_to_fit is\ndesigned to shrink text until it fits vertically. It is does not\nhandle long words. One solution would be to add an option to disable\n#wrap_by_char.\n\nBest,\n\nDaniel\n. Inline format recognizes a limited set of markup tags. To support this\nfunctionality, characters such as <, >, and & need to be represented by\ntheir html entity forms of &lt; , &gt; , and &amp; .\n- Daniel\n  On Aug 8, 2013 3:03 AM, \"nithin stany dsouza\" notifications@github.com\n  wrote:\n\n> pdf.text \"< \\* 3000*\", :inline_format => true its only print 3000 is bold\n> < is missing\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/prawnpdf/prawn/issues/527\n> .\n. ",
    "jonsgreen": "Not sure where jontebol got to but I went ahead as suggested by Greg (http://groups.google.com/group/prawn-ruby/browse_frm/thread/791dc2cb72a6ee0f) and took Salamandra's code and fixed it so that it will fill_and_stroke: http://github.com/jonsgreen/prawn/commit/059e035e55a3334d19345db0711a130aae39adeb. My spec is a bit contrived but at least it exercises the code.\n. I have made an improvement by implementing rounded_polygon making rounded_rectangle just a subset example (http://github.com/jonsgreen/prawn/commit/0b55e7da57c0f5da07fedf138ad197ca58072e6d) I did not add any specs for this method so far relying on the rounded_rectangle spec to exercise the polygon code. Let me know how I might improve the spec coverage for this feature if it is accepted. There is also a clever little pentagram in the rounded_polygon example. \n. I have updated my code; latest commit is at: http://github.com/jonsgreen/prawn/commit/38fad7350938a7f04052de04db85f026df7e126c\n. Here is a possible implementation: http://github.com/jonsgreen/prawn/tree/dynamic_repeater. I added to the repeaters example and also threw in a couple of tests.\n\nI went ahead and implemented the :dynamic as a second argument to #repeat as suggested above but part of me was wondering whether a hash option :dynamic => true wouldn't be cleaner. It is simple to change; I will let you all (though Canadian I live in Virginia) decide.\n. I am not clear if this issue is resolved?\n\nI unfortunately do not have much understanding of encoding so I may not be of much help. I know that I am converting the entered title into a LiteralString. I cannot remember exactly how I came to that but I know that this is in the documentation for that class: \n  # Some features of the PDF format appear to require that literal\n  # strings be used. One such feature is the /Dest key of a link\n  # annotation; if a hex encoded string is used there, the links\n  # do not work (as tested in Mac OS X Preview, and Adobe Acrobat\n  # Reader).\n  class LiteralString < String #:nodoc:\n  end\n\nI am willing do dig into this further; perhaps create a failing spec and figure out how to get it to pass. However, I am guessing that someone for the core out there would know exactly what to do. \n\nBy the way. For some reason I found I was not able to respond to the google group thread that linked me here.\n. Sorry for the delay on this. James Healy finally came to my rescue for fixing my spec. He confirmed the solution was to store the title as a String and not a LiteralString. He also improved my specs. Here is the result: http://github.com/jonsgreen/prawn/commit/0c39a9b0d020b24748947247d8d5126a27870a70.\n. Hey Gregory, \n\nThese three commits should finally fix this issue and the failing specs:\n\nhttp://github.com/jonsgreen/prawn/commit/3a0709db35499ed49e3dbae99cea97bde521c996\nhttp://github.com/jonsgreen/prawn/commit/0c39a9b0d020b24748947247d8d5126a27870a70\nhttp://github.com/jonsgreen/prawn/commit/9e02b6326fedaf9057843fea109bdfcde1a5c033\n. This has finally been fully merged into master. Please see documentation and this post for more details of the API changes: http://groups.google.com/group/prawn-ruby/browse_frm/thread/fbe688fdfb14616b\n. A solution for this issue using a stack for maintaining graphic states has now been merged into master.\n. The changes mentioned by Brad have now been merged into master.\n. My apologies for taking so long in submitting a fix to this issue that was introduced with the Graphic State Stack support a few weeks ago. I just pushed a fix and would appreciate any confirmation that this resolves issues for folks. \n. The fix is now merged into master. It would be great to confirm that this resolves your issue. Thanks for your patience.\n. Could you add a code example and pdf templates as well as what version of Prawn you are using. Thanks. \n. It does seem that the page template feature is not working for Adobe Reader altogether. Even my page_template example seems to break if I load the same page twice(though it works fine if each new page uses a different page from the same pdf). However, I cannot use your receipt for a page template at all though it works fine as the initial template. \n\nMy hope is James Healy or some of the other Core developers might have some insight. Does anyone know what are some of the usual culprits when something won't render correctly in Adobe Reader but works fine with Preview?\n. Are you also finding that the pdf works fine if opened with Mac Preview?\n\nI also found that it had something to do with calling the same page of a template which unfortunately is mostly the functionality one is after.\n\nI apologize for having released this feature without it functioning for major readers. I have spent some time trying to debug it but I don't know enough about Adobe Reader to be able to figure out what trips it up. \n\nPlease, if anyone has any ideas pass them along!\n. Brilliant! You have made me and other Prawn users very happy!\n\nI have posted about your fix on the Google Group: http://groups.google.com/group/prawn-ruby/browse_frm/thread/cd96b55aa4a34819. Hopefully this will get merged into master as soon as I get some OKs from others on the core. \n\nThanks again for your excellent sleuthing.\n. Ah yes stamps and repeaters I knew they would kick me in the butt in the end. Thank-you for catching this case that I had overlooked. \n\nI think actually the problem is that the repeater stamp should not be touching the graphic state color space. Ideally stamps might have their own graphic state stack implementation some day.\n\nAnyhow, I think that removing the calls to update_colors goes too far in that you would lose the color context in which the repeater is created. For example, you would get an unexpected color on the text with:\n\n<pre><code>\nPrawn::Document.generate(\"looks_blank.pdf\") do\n  repeat :all do\n    text \"Testing\", :size => 24, :style => :bold\n  end\n  fill_color '662255'\nend\n</code></pre>\n\n\nI ended up adding your bug and writing a spec to capture the problem and here is the fix I just committed: https://github.com/sandal/prawn/commit/11b9b70500eadb1928bee2578dfc1abefbcc4be1.\n\n Hopefully I haven't broken anything else in the process. \n. I am not sure what you are saying. You should be able to change the color inside the stamp. However, I assumed the default behavior should be that the stamp's graphic state is preserved at creation time and not affected by the graphic state on the page (e.g. a header or footer should not change colors just because the text on the page is a different color). \n\nIf you really need the stamp to be influenced by the graphic state of its page environment let me know and I might be able to add an option for that. \n\nThis was something I considered when first implementing this feature but I was not sure there was a use case for it. I would be curious what the rules of your application are that require this. \n. Yes this does seem to be defective. I will need to look into this but won't have time until later tonight. \n. So I think I have a potential immediate fix to the issue here: https://github.com/jonsgreen/prawn/tree/stamp_color_issue_200. If you are savvy enough and willing to try that out to verify that it resolves your issue then I will right some specs around it as well and merge it into master. \n\nAgain the ultimate solution might be to have a separate graphic state stack implementation for stamps but that might require some reworking of Stamps themselves and is a bit more than I want to take on at this time.  \n. That already happens. In fact the whole current graphic state of the page gets transferred to the stamp when created just in case which accounts for sort of verbose output at the beginning of each stamp:\n\n<pre><code>q\n/DeviceRGB cs\n0.000 0.000 0.000 scn\n/DeviceRGB CS\n0.000 0.000 0.000 SCN\n1 w\n0 J\n0 j\n[ ] 0 d\n</pre></code> \n\nThe problem is a bit difficult to explain but basically we added an internal stack that mimics the PDF stack so that we can better determine when to open and close graphic states and generally keep track of the graphic state history like a PDF reader does. \n\nStamps however should not influence the current page stack when created since they really only affect the PDF if and when they are applied.\n\n I think it might make sense for them to have their own stack but then they might need to become first class Prawn objects like Pages so that they can keep track of their eternal state. Currently they seem to piggy back on the Page Object which seems a bit clunky. \nI would be interested in hearing the opinions on this from any of the other Core contributors or folks familiar with Prawn internals.\n\nThe defect you uncovered was because we were using the internal graphic state stack to determine the color to be added to the pdf output but when writing a stamp that does not happen so a new requested color was not being delivered. \n\nI am not sure I have the time and courage at the moment to mess with the code anymore given all the defects I have introduced of late. \n. I finally added a couple specs and merged this fix into master. \n. I am not sure I totally agree. Outline#section has the title as a required first argument so really #page is the oddball right now. We had some debate around the argument signature for #section and #page so I don't really want to go there again. \n\nHowever, if others really feel that the API should be changed for these subsection methods I am willing to merge this in though it means that current Outlines using this feature will need to have their code changed. We would also need to update the Manual. \n. Have you tried pointing to the github repo because this has been worked on recently and has been merged into master. \n\nPlease report here what you find. Thanks. \n. Can you post the template that you are using and some sample code to try out?\n. joshjordan, \n\nI think I see what the problem is and it has to do with incorrect Parent references of object similar to #199; Adobe just doesn't like that. In fact it was my the fix for that issue that has resulted in this one for full templates. \n\nAnyhow if you could try pointing your Gemfile to my fork: git@github.com:jonsgreen/prawn.git to see if my latest fix solves your problem that would be helpful. Thanks. \n. I can imagine having another option for a new document name :page_template that would use that page_template whenever start_new_page is called internally. We would need to store the template reference somewhere (DocumentState?). \n. While I did not test @paulcc's solution I am not seeing how it would avoid the excessive pdf file size since it looks like it would not avoid the calls to load_object_graph. \n\nI have another possible solution implemented here: https://github.com/jonsgreen/prawn/commit/59a521e40edf95519f516f3cf5a8014ff3df4c10. Not the prettiest so I am open to suggestions. \n\nI also want to apologize for having released the page template feature with this gaping issue and for not having given it any attention until now in spite of many complaints about the file size problem. \n\nJonathan. \n. So here is another attempt that indexes both the page template identifiers and the object hash incorporating both ideas: https://github.com/jonsgreen/prawn/commit/bd6c1c3d1ad8dbed4e8d24b16edd30477a53837b.\n\nI am not sure how great it is to be indexing the IO by an md5 hash but it seemed like a cleaner key than the stream itself. I am open to suggestions. \n\nThis gets the same filesize for me as with paulcc's fix for sequential pages but it gets increasingly better results for repeated pages because of the reduced calls to load_object_graph. \n\nI have to confess that I am still puzzled by why it helps to use the same hash when calling load_object_graph for sequential pages; frankly I get a bit lost figuring out what everything is pointing to. I wonder whether there isn't something not quite right with how that is all working but I would need @yob's help in deciphering the intricacies of that method. \n\nWhat do folks think of all this?\n. I had thought of using the #object_id but was not sure about the reliability of that having never really used that fundamental property of an object much. \n\nI will give that a try and see if it simplifies matters and cleans things up. \n. I changed my commit to use object_id and submitted a pull request. Definitely nice to not need to MD5 contents unnecessarily. \n. I am closing this ticket since it should resolve the original issue. \n. I have looked into this quite a bit and the problem has to do with how min_width is miscalculating in the case of a colspan. The calculated width for the first column first row is the average of the total width (i.e 180). Then #min_width for the column takes the maximum width for all rows. Since 180 is greater than 100 that becomes the min width. However now the sum of the min_widths now totals 620 which throws the error. \n\nThe simple fix is to make the following change in cells.rb:\n\n``` ruby\ndef min_width\n    # here is the current implementation:\n    #aggregate_cell_values(:column, :avg_spanned_min_width, :max)\n    # instead aggregate over :min_width_ignoring_span which seems to defer to the other columns without colspans.\n    aggregate_cell_values(:column, :min_width_ignoring_span, :max)\nend\n```\n\nNot surprisingly this breaks a couple unit tests and I don't really know enough about tables to be sure that this fix won't create problems in other more complicated scenarios. \n\nPerhaps someone who has been more involved with the Prawn table feature could weigh in on this matter?\n\nBTW, I believe that issue#326 is essentially a duplicate of this issue. \n. Hmmm. I am guessing that you like the top table if only the cell were not so wide. \n\nI suppose you could draw the table and then position the text explicitly though it would be painstaking or take tricky calculations:\n\n``` ruby\ndraw_text 'Estructuras', at: [15, 630], rotate: 90 \ntable([[{ height: 100, valign: :bottom, align: :center, width: 20, content: '' }]])\n```\n\nI am curious if anyone else knows a proper or better way to do this .\n. I think that this actually is already supported; you just have to know the API and be a bit creative with some things like border_color:\n\n``` ruby\n\ntable([[{content: 'It works', background_color: [ 0, 99, 95, 5.0], border_color: Array.new(4, [0, 99, 95, 0])}]])\n```\n\nLet me know of any specific situations where this does not seem supported to you otherwise we can close this issue. \n\nO\n. You might try this:\n\n``` ruby\nstroke_bounds && start_new_page if index % 13 == 0\n```\n\nI would be curious to know if that gets you anywhere. \n. I took a quick look at this bug and found that a possible simple fix is to have the dummy cell delegate background_color to its master_cell. \n\n``` ruby\nextend Forwardable\ndef_delegator :@master_cell, :background_color\n```\n\nThis doesn't break any specs and I am not sure if this is worthy of a new spec. \n\nI don't know who is the guru on tables these days but it would be great if someone more familiar with this part of the code weighed in on this. \n. I am having trouble seeing the problem from your image and it is difficult to run your code as is. \n\nAre you able to create a better image with more description of where the unwanted line is and ideally post some simpler code that could be run without being dependent on external data? \n. In general Prawn is not really designed for slicing and dicing other pdfs. \n\nHowever, that said, I think that you can do what you are saying by using page templates:\n\n``` ruby\n# note that this is untested code\nfilename = 'some_multipage_pdf'\npages = 5 #however number of pages\ncopies = 3 #number of desired copies\nPrawn::Example.generate('multicopy.pdf', :skip_page_creation => true) do\n   copies.times do \n      (1..pages).each { |p| start_new_page(:template => filename, :page_template => p)}\n   end\nend\n```\n\nHowever, to answer your larger question, Prawn is not being intelligent at the moment about repeated page templates. Some fixes are being proposed here: https://github.com/prawnpdf/prawn/issues/404. \n\nIf you are able to try that out and give your vote based on performance then it is more likely that we could merge something in sooner and close these tickets. \n. A fix for this is now merged into master. I am closing this ticket but it can be reopened if improvements are not noticed. \n. I think that your solution seems very appropriate. Prawn::Document is really designed to create a complete pdf and I don't think you would get anything out of trying to merge pdfs in this case. \n\nUnless I am missing something and you want to clarify what you are wanting as a better option, are you willing to close this issue?\n. Currently Prawn is deferring to the template for info and ignoring anything passed in. \n\nIt would not be difficult and seems appropriate to at least merge the info option from Document#new. \n\nCan anyone think of a reason why we would not want to do this?\n. @bradediger: I have submitted a pull request for this issue.\n\nI think that if we do not want people to be overriding Prawn as Creator then we should make that a separate issue since we currently are allowing that for all documents when we call #normalize_metadata.\n. Not sure where jontebol got to but I went ahead as suggested by Greg (http://groups.google.com/group/prawn-ruby/browse_frm/thread/791dc2cb72a6ee0f) and took Salamandra's code and fixed it so that it will fill_and_stroke: http://github.com/jonsgreen/prawn/commit/059e035e55a3334d19345db0711a130aae39adeb. My spec is a bit contrived but at least it exercises the code.\n. I have made an improvement by implementing rounded_polygon making rounded_rectangle just a subset example (http://github.com/jonsgreen/prawn/commit/0b55e7da57c0f5da07fedf138ad197ca58072e6d) I did not add any specs for this method so far relying on the rounded_rectangle spec to exercise the polygon code. Let me know how I might improve the spec coverage for this feature if it is accepted. There is also a clever little pentagram in the rounded_polygon example. \n. I have updated my code; latest commit is at: http://github.com/jonsgreen/prawn/commit/38fad7350938a7f04052de04db85f026df7e126c\n. Here is a possible implementation: http://github.com/jonsgreen/prawn/tree/dynamic_repeater. I added to the repeaters example and also threw in a couple of tests.\n\nI went ahead and implemented the :dynamic as a second argument to #repeat as suggested above but part of me was wondering whether a hash option :dynamic => true wouldn't be cleaner. It is simple to change; I will let you all (though Canadian I live in Virginia) decide.\n. I am not clear if this issue is resolved?\n\nI unfortunately do not have much understanding of encoding so I may not be of much help. I know that I am converting the entered title into a LiteralString. I cannot remember exactly how I came to that but I know that this is in the documentation for that class: \n  # Some features of the PDF format appear to require that literal\n  # strings be used. One such feature is the /Dest key of a link\n  # annotation; if a hex encoded string is used there, the links\n  # do not work (as tested in Mac OS X Preview, and Adobe Acrobat\n  # Reader).\n  class LiteralString < String #:nodoc:\n  end\n\nI am willing do dig into this further; perhaps create a failing spec and figure out how to get it to pass. However, I am guessing that someone for the core out there would know exactly what to do. \n\nBy the way. For some reason I found I was not able to respond to the google group thread that linked me here.\n. Sorry for the delay on this. James Healy finally came to my rescue for fixing my spec. He confirmed the solution was to store the title as a String and not a LiteralString. He also improved my specs. Here is the result: http://github.com/jonsgreen/prawn/commit/0c39a9b0d020b24748947247d8d5126a27870a70.\n. Hey Gregory, \n\nThese three commits should finally fix this issue and the failing specs:\n\nhttp://github.com/jonsgreen/prawn/commit/3a0709db35499ed49e3dbae99cea97bde521c996\nhttp://github.com/jonsgreen/prawn/commit/0c39a9b0d020b24748947247d8d5126a27870a70\nhttp://github.com/jonsgreen/prawn/commit/9e02b6326fedaf9057843fea109bdfcde1a5c033\n. This has finally been fully merged into master. Please see documentation and this post for more details of the API changes: http://groups.google.com/group/prawn-ruby/browse_frm/thread/fbe688fdfb14616b\n. A solution for this issue using a stack for maintaining graphic states has now been merged into master.\n. The changes mentioned by Brad have now been merged into master.\n. My apologies for taking so long in submitting a fix to this issue that was introduced with the Graphic State Stack support a few weeks ago. I just pushed a fix and would appreciate any confirmation that this resolves issues for folks. \n. The fix is now merged into master. It would be great to confirm that this resolves your issue. Thanks for your patience.\n. Could you add a code example and pdf templates as well as what version of Prawn you are using. Thanks. \n. It does seem that the page template feature is not working for Adobe Reader altogether. Even my page_template example seems to break if I load the same page twice(though it works fine if each new page uses a different page from the same pdf). However, I cannot use your receipt for a page template at all though it works fine as the initial template. \n\nMy hope is James Healy or some of the other Core developers might have some insight. Does anyone know what are some of the usual culprits when something won't render correctly in Adobe Reader but works fine with Preview?\n. Are you also finding that the pdf works fine if opened with Mac Preview?\n\nI also found that it had something to do with calling the same page of a template which unfortunately is mostly the functionality one is after.\n\nI apologize for having released this feature without it functioning for major readers. I have spent some time trying to debug it but I don't know enough about Adobe Reader to be able to figure out what trips it up. \n\nPlease, if anyone has any ideas pass them along!\n. Brilliant! You have made me and other Prawn users very happy!\n\nI have posted about your fix on the Google Group: http://groups.google.com/group/prawn-ruby/browse_frm/thread/cd96b55aa4a34819. Hopefully this will get merged into master as soon as I get some OKs from others on the core. \n\nThanks again for your excellent sleuthing.\n. Ah yes stamps and repeaters I knew they would kick me in the butt in the end. Thank-you for catching this case that I had overlooked. \n\nI think actually the problem is that the repeater stamp should not be touching the graphic state color space. Ideally stamps might have their own graphic state stack implementation some day.\n\nAnyhow, I think that removing the calls to update_colors goes too far in that you would lose the color context in which the repeater is created. For example, you would get an unexpected color on the text with:\n\n<pre><code>\nPrawn::Document.generate(\"looks_blank.pdf\") do\n  repeat :all do\n    text \"Testing\", :size => 24, :style => :bold\n  end\n  fill_color '662255'\nend\n</code></pre>\n\n\nI ended up adding your bug and writing a spec to capture the problem and here is the fix I just committed: https://github.com/sandal/prawn/commit/11b9b70500eadb1928bee2578dfc1abefbcc4be1.\n\n Hopefully I haven't broken anything else in the process. \n. I am not sure what you are saying. You should be able to change the color inside the stamp. However, I assumed the default behavior should be that the stamp's graphic state is preserved at creation time and not affected by the graphic state on the page (e.g. a header or footer should not change colors just because the text on the page is a different color). \n\nIf you really need the stamp to be influenced by the graphic state of its page environment let me know and I might be able to add an option for that. \n\nThis was something I considered when first implementing this feature but I was not sure there was a use case for it. I would be curious what the rules of your application are that require this. \n. Yes this does seem to be defective. I will need to look into this but won't have time until later tonight. \n. So I think I have a potential immediate fix to the issue here: https://github.com/jonsgreen/prawn/tree/stamp_color_issue_200. If you are savvy enough and willing to try that out to verify that it resolves your issue then I will right some specs around it as well and merge it into master. \n\nAgain the ultimate solution might be to have a separate graphic state stack implementation for stamps but that might require some reworking of Stamps themselves and is a bit more than I want to take on at this time.  \n. That already happens. In fact the whole current graphic state of the page gets transferred to the stamp when created just in case which accounts for sort of verbose output at the beginning of each stamp:\n\n<pre><code>q\n/DeviceRGB cs\n0.000 0.000 0.000 scn\n/DeviceRGB CS\n0.000 0.000 0.000 SCN\n1 w\n0 J\n0 j\n[ ] 0 d\n</pre></code> \n\nThe problem is a bit difficult to explain but basically we added an internal stack that mimics the PDF stack so that we can better determine when to open and close graphic states and generally keep track of the graphic state history like a PDF reader does. \n\nStamps however should not influence the current page stack when created since they really only affect the PDF if and when they are applied.\n\n I think it might make sense for them to have their own stack but then they might need to become first class Prawn objects like Pages so that they can keep track of their eternal state. Currently they seem to piggy back on the Page Object which seems a bit clunky. \nI would be interested in hearing the opinions on this from any of the other Core contributors or folks familiar with Prawn internals.\n\nThe defect you uncovered was because we were using the internal graphic state stack to determine the color to be added to the pdf output but when writing a stamp that does not happen so a new requested color was not being delivered. \n\nI am not sure I have the time and courage at the moment to mess with the code anymore given all the defects I have introduced of late. \n. I finally added a couple specs and merged this fix into master. \n. I am not sure I totally agree. Outline#section has the title as a required first argument so really #page is the oddball right now. We had some debate around the argument signature for #section and #page so I don't really want to go there again. \n\nHowever, if others really feel that the API should be changed for these subsection methods I am willing to merge this in though it means that current Outlines using this feature will need to have their code changed. We would also need to update the Manual. \n. Have you tried pointing to the github repo because this has been worked on recently and has been merged into master. \n\nPlease report here what you find. Thanks. \n. Can you post the template that you are using and some sample code to try out?\n. joshjordan, \n\nI think I see what the problem is and it has to do with incorrect Parent references of object similar to #199; Adobe just doesn't like that. In fact it was my the fix for that issue that has resulted in this one for full templates. \n\nAnyhow if you could try pointing your Gemfile to my fork: git@github.com:jonsgreen/prawn.git to see if my latest fix solves your problem that would be helpful. Thanks. \n. I can imagine having another option for a new document name :page_template that would use that page_template whenever start_new_page is called internally. We would need to store the template reference somewhere (DocumentState?). \n. While I did not test @paulcc's solution I am not seeing how it would avoid the excessive pdf file size since it looks like it would not avoid the calls to load_object_graph. \n\nI have another possible solution implemented here: https://github.com/jonsgreen/prawn/commit/59a521e40edf95519f516f3cf5a8014ff3df4c10. Not the prettiest so I am open to suggestions. \n\nI also want to apologize for having released the page template feature with this gaping issue and for not having given it any attention until now in spite of many complaints about the file size problem. \n\nJonathan. \n. So here is another attempt that indexes both the page template identifiers and the object hash incorporating both ideas: https://github.com/jonsgreen/prawn/commit/bd6c1c3d1ad8dbed4e8d24b16edd30477a53837b.\n\nI am not sure how great it is to be indexing the IO by an md5 hash but it seemed like a cleaner key than the stream itself. I am open to suggestions. \n\nThis gets the same filesize for me as with paulcc's fix for sequential pages but it gets increasingly better results for repeated pages because of the reduced calls to load_object_graph. \n\nI have to confess that I am still puzzled by why it helps to use the same hash when calling load_object_graph for sequential pages; frankly I get a bit lost figuring out what everything is pointing to. I wonder whether there isn't something not quite right with how that is all working but I would need @yob's help in deciphering the intricacies of that method. \n\nWhat do folks think of all this?\n. I had thought of using the #object_id but was not sure about the reliability of that having never really used that fundamental property of an object much. \n\nI will give that a try and see if it simplifies matters and cleans things up. \n. I changed my commit to use object_id and submitted a pull request. Definitely nice to not need to MD5 contents unnecessarily. \n. I am closing this ticket since it should resolve the original issue. \n. I have looked into this quite a bit and the problem has to do with how min_width is miscalculating in the case of a colspan. The calculated width for the first column first row is the average of the total width (i.e 180). Then #min_width for the column takes the maximum width for all rows. Since 180 is greater than 100 that becomes the min width. However now the sum of the min_widths now totals 620 which throws the error. \n\nThe simple fix is to make the following change in cells.rb:\n\n``` ruby\ndef min_width\n    # here is the current implementation:\n    #aggregate_cell_values(:column, :avg_spanned_min_width, :max)\n    # instead aggregate over :min_width_ignoring_span which seems to defer to the other columns without colspans.\n    aggregate_cell_values(:column, :min_width_ignoring_span, :max)\nend\n```\n\nNot surprisingly this breaks a couple unit tests and I don't really know enough about tables to be sure that this fix won't create problems in other more complicated scenarios. \n\nPerhaps someone who has been more involved with the Prawn table feature could weigh in on this matter?\n\nBTW, I believe that issue#326 is essentially a duplicate of this issue. \n. Hmmm. I am guessing that you like the top table if only the cell were not so wide. \n\nI suppose you could draw the table and then position the text explicitly though it would be painstaking or take tricky calculations:\n\n``` ruby\ndraw_text 'Estructuras', at: [15, 630], rotate: 90 \ntable([[{ height: 100, valign: :bottom, align: :center, width: 20, content: '' }]])\n```\n\nI am curious if anyone else knows a proper or better way to do this .\n. I think that this actually is already supported; you just have to know the API and be a bit creative with some things like border_color:\n\n``` ruby\n\ntable([[{content: 'It works', background_color: [ 0, 99, 95, 5.0], border_color: Array.new(4, [0, 99, 95, 0])}]])\n```\n\nLet me know of any specific situations where this does not seem supported to you otherwise we can close this issue. \n\nO\n. You might try this:\n\n``` ruby\nstroke_bounds && start_new_page if index % 13 == 0\n```\n\nI would be curious to know if that gets you anywhere. \n. I took a quick look at this bug and found that a possible simple fix is to have the dummy cell delegate background_color to its master_cell. \n\n``` ruby\nextend Forwardable\ndef_delegator :@master_cell, :background_color\n```\n\nThis doesn't break any specs and I am not sure if this is worthy of a new spec. \n\nI don't know who is the guru on tables these days but it would be great if someone more familiar with this part of the code weighed in on this. \n. I am having trouble seeing the problem from your image and it is difficult to run your code as is. \n\nAre you able to create a better image with more description of where the unwanted line is and ideally post some simpler code that could be run without being dependent on external data? \n. In general Prawn is not really designed for slicing and dicing other pdfs. \n\nHowever, that said, I think that you can do what you are saying by using page templates:\n\n``` ruby\n# note that this is untested code\nfilename = 'some_multipage_pdf'\npages = 5 #however number of pages\ncopies = 3 #number of desired copies\nPrawn::Example.generate('multicopy.pdf', :skip_page_creation => true) do\n   copies.times do \n      (1..pages).each { |p| start_new_page(:template => filename, :page_template => p)}\n   end\nend\n```\n\nHowever, to answer your larger question, Prawn is not being intelligent at the moment about repeated page templates. Some fixes are being proposed here: https://github.com/prawnpdf/prawn/issues/404. \n\nIf you are able to try that out and give your vote based on performance then it is more likely that we could merge something in sooner and close these tickets. \n. A fix for this is now merged into master. I am closing this ticket but it can be reopened if improvements are not noticed. \n. I think that your solution seems very appropriate. Prawn::Document is really designed to create a complete pdf and I don't think you would get anything out of trying to merge pdfs in this case. \n\nUnless I am missing something and you want to clarify what you are wanting as a better option, are you willing to close this issue?\n. Currently Prawn is deferring to the template for info and ignoring anything passed in. \n\nIt would not be difficult and seems appropriate to at least merge the info option from Document#new. \n\nCan anyone think of a reason why we would not want to do this?\n. @bradediger: I have submitted a pull request for this issue.\n\nI think that if we do not want people to be overriding Prawn as Creator then we should make that a separate issue since we currently are allowing that for all documents when we call #normalize_metadata.\n. ",
    "jontebol": "I started, but then I had to focus on other things. I was still planning to do this though, possibly within a month or 2, but if you've fixed it already, that's great. :)\n. I started, but then I had to focus on other things. I was still planning to do this though, possibly within a month or 2, but if you've fixed it already, that's great. :)\n. ",
    "tnt": "Oh, sorry. Thank you.\n. Oh, sorry. Thank you.\n. ",
    "pixelvitamina": "Hi, thank you, I have something like the following in my rails/lib now\n\n<pre>\nclass Prawn::Document\n  def text_spaced text, options = {}\n  \n    spaced_string = text.lines.map {|line| line.chars.split('').join('<space></space>') }.join('<br/>')\n    text spaced_string, {:tags => { :space => { :width => (options[:letter_spacing] || 1).to_s } }}.merge(options)  # fake letter-spacing\n  end\nend\n</pre>\n\n\ncheers. Marco\n. Hi, thank you, I have something like the following in my rails/lib now\n\n<pre>\nclass Prawn::Document\n  def text_spaced text, options = {}\n  \n    spaced_string = text.lines.map {|line| line.chars.split('').join('<space></space>') }.join('<br/>')\n    text spaced_string, {:tags => { :space => { :width => (options[:letter_spacing] || 1).to_s } }}.merge(options)  # fake letter-spacing\n  end\nend\n</pre>\n\n\ncheers. Marco\n. ",
    "jlh": "Yes, you can.\nI've now created a fork at http://github.com/jlh/prawn and pushed what i hope is a real fix for a real bug.\n. I've got a fork at http://github.com/jlh/prawn where I've pushed the fix.\n. Yes, you can.\nI've now created a fork at http://github.com/jlh/prawn and pushed what i hope is a real fix for a real bug.\n. I've got a fork at http://github.com/jlh/prawn where I've pushed the fix.\n. ",
    "atotic": "Apologies for crappy formatting, did not know about the markup.\n. Sorry about code formatting, 2 spaces vs 4 spaces.\n. Apologies for crappy formatting, did not know about the markup.\n. Sorry about code formatting, 2 spaces vs 4 spaces.\n. ",
    "haslo": "Nobody uses GIF anyway.\n. On a slightly more constructive note, for all the others finding this issue when they have GIFs that won't process, here's a quick way to get a PNG with GraphicsMagick if you have a GIF image:\n\n``` ruby\nimg = GraphicsMagick::Image.new(gif_path)\npng_path = gif_path.gsub(/\\.gif\\Z/i, '.png')\nimg.write(png_path)\n```\n\nIn our case, the image comes from a user upload and we're using GraphicsMagick already anyway. YMMV.\n. I wanted to highlight inline text in a text box. Because this issue was closed without resolving it, I had to resort to ugly hacks that involve exchanging `styles` in the output from `text_formatter.format` (which gives me fragments without Prawn's styling), then a `draw_text_callback` with manual `fill_polygon` (but at this point, you don't get the style, so the check whether it's one of the to-be-highlighted fragments has to be external).\r\n\r\nIt's all very horrible, but mostly works, so maybe this code is useful for somebody:\r\n\r\n```ruby\r\narray = text_formatter.format(translate('disclaimer').gsub(\"\\n\", ' '), [])\r\narray = array.map do |item|\r\n  item[:styles] = [:highlight] if item[:styles] == [:bold]\r\n  item\r\nend\r\noptions = {\r\n  document: self,\r\n  draw_text_callback: ->(text, options) {\r\n    if do_highlight?(text) #\u00a0do_highlight is custom\r\n      with_color('ffff00') do #\u00a0with_color is custom\r\n        x_left   = options[:at][0] - 2\r\n        x_right  = options[:at][0] + width_of(text)\r\n        y_top    = options[:at][1] - 2\r\n        y_bottom = options[:at][1] + height_of(text) - 2\r\n        fill_polygon([x_left, y_top],\r\n                     [x_right, y_top],\r\n                     [x_right, y_bottom],\r\n                     [x_left, y_bottom])\r\n      end\r\n    end\r\n    draw_text!(text, options)\r\n  },\r\n}\r\nbox = ::Prawn::Text::Formatted::Box.new(array, options)\r\nbox.render\r\n```. Nobody uses GIF anyway.\n. On a slightly more constructive note, for all the others finding this issue when they have GIFs that won't process, here's a quick way to get a PNG with GraphicsMagick if you have a GIF image:\n\n``` ruby\nimg = GraphicsMagick::Image.new(gif_path)\npng_path = gif_path.gsub(/\\.gif\\Z/i, '.png')\nimg.write(png_path)\n```\n\nIn our case, the image comes from a user upload and we're using GraphicsMagick already anyway. YMMV.\n. I wanted to highlight inline text in a text box. Because this issue was closed without resolving it, I had to resort to ugly hacks that involve exchanging `styles` in the output from `text_formatter.format` (which gives me fragments without Prawn's styling), then a `draw_text_callback` with manual `fill_polygon` (but at this point, you don't get the style, so the check whether it's one of the to-be-highlighted fragments has to be external).\r\n\r\nIt's all very horrible, but mostly works, so maybe this code is useful for somebody:\r\n\r\n```ruby\r\narray = text_formatter.format(translate('disclaimer').gsub(\"\\n\", ' '), [])\r\narray = array.map do |item|\r\n  item[:styles] = [:highlight] if item[:styles] == [:bold]\r\n  item\r\nend\r\noptions = {\r\n  document: self,\r\n  draw_text_callback: ->(text, options) {\r\n    if do_highlight?(text) #\u00a0do_highlight is custom\r\n      with_color('ffff00') do #\u00a0with_color is custom\r\n        x_left   = options[:at][0] - 2\r\n        x_right  = options[:at][0] + width_of(text)\r\n        y_top    = options[:at][1] - 2\r\n        y_bottom = options[:at][1] + height_of(text) - 2\r\n        fill_polygon([x_left, y_top],\r\n                     [x_right, y_top],\r\n                     [x_right, y_bottom],\r\n                     [x_left, y_bottom])\r\n      end\r\n    end\r\n    draw_text!(text, options)\r\n  },\r\n}\r\nbox = ::Prawn::Text::Formatted::Box.new(array, options)\r\nbox.render\r\n```. ",
    "eeabed": "This applies for all RTL languages, including Arabic, Hebrew, Farsi ... etc.\n. I wrote a Prawn plugin a couple of months ago that enabled Arabic support in Prawn. I used GNU FriBidi, which is an implementation of the Unicode Bidirectional Algorithm in C language. My solution was an absolute hack (but worked). Ideally, we would need to implement the Unicode Bidirectional Algorithm in pure Ruby, and then implement a line_wrap object for Arabic.\n\nTo answer edgecase's question: no, simply reversing the string doesn't work, it is more complicated than that. Hopefully I'll write something next week that describes the problem in full details, and what needs to be done in order to solve it.\n. This applies for all RTL languages, including Arabic, Hebrew, Farsi ... etc.\n. I wrote a Prawn plugin a couple of months ago that enabled Arabic support in Prawn. I used GNU FriBidi, which is an implementation of the Unicode Bidirectional Algorithm in C language. My solution was an absolute hack (but worked). Ideally, we would need to implement the Unicode Bidirectional Algorithm in pure Ruby, and then implement a line_wrap object for Arabic.\n\nTo answer edgecase's question: no, simply reversing the string doesn't work, it is more complicated than that. Hopefully I'll write something next week that describes the problem in full details, and what needs to be done in order to solve it.\n. ",
    "alexey": "yes it is reverse but just need to know what to reverse, also mixed text can occur..\n\u05e9\u05dc\u05d5\u05dd and \u05de\u05dc\u05d7\u05de\u05d4\n. yes it is reverse but just need to know what to reverse, also mixed text can occur..\n\u05e9\u05dc\u05d5\u05dd and \u05de\u05dc\u05d7\u05de\u05d4\n. ",
    "edgecase": "Any news on this one?  If I have only Arabic in a string, will reversing the string suffice?  Obviously placement should be right justified as well.\n. @eeabed:  A writeup would be great.  We'll start looking into the Unicode Bidirectional Algorithm.\n. Any news on this one?  If I have only Arabic in a string, will reversing the string suffice?  Obviously placement should be right justified as well.\n. @eeabed:  A writeup would be great.  We'll start looking into the Unicode Bidirectional Algorithm.\n. ",
    "lailsonbm": "I imagined it was asking before, since it is a really basic thing. I still think it is very useful thing and many other libraries have it, as SVG and canvas, for instance.\n. I imagined it was asking before, since it is a really basic thing. I still think it is very useful thing and many other libraries have it, as SVG and canvas, for instance.\n. ",
    "swistak": "Okey, I think it has something to do with image, when I opened it in gimp and saved again, it worked fine (it was png image)\n\nI'll try to prepare test pack, right now I've managed to fix it +-, but now image has wrong size (it's bigger then it should be), is :height attribute for #image given in pixels or something else? (image is to big even when no :height or :width is passed)\n. Hmmm this issue tracker doesn't allow attaching files so here : http://rapidshare.com/files/330230482/problematic_image.rar \n\nThis provides 2 images, original one I've tested this on, and one that I've simply opened/saved in gimp. First one fails, second one works, btw, I've saved second one in 72dpi, and it's still displaing to big.\n. I've attached a packet with original image that is causing problem I've described in original ticket. So it's still not resolved. Image size problem is just a side thing.\n. That's why I've attached a package with both images and ruby test case, so you can try and reproduce it. Thanks for your help so far. I'm doing it for free for an OS project, and I guess I'll just leave comment that users that want to put their own logo in will have to check if it displays correctly and if size is okey.\n. sorry :/\n. Okey, I think it has something to do with image, when I opened it in gimp and saved again, it worked fine (it was png image)\n\nI'll try to prepare test pack, right now I've managed to fix it +-, but now image has wrong size (it's bigger then it should be), is :height attribute for #image given in pixels or something else? (image is to big even when no :height or :width is passed)\n. Hmmm this issue tracker doesn't allow attaching files so here : http://rapidshare.com/files/330230482/problematic_image.rar \n\nThis provides 2 images, original one I've tested this on, and one that I've simply opened/saved in gimp. First one fails, second one works, btw, I've saved second one in 72dpi, and it's still displaing to big.\n. I've attached a packet with original image that is causing problem I've described in original ticket. So it's still not resolved. Image size problem is just a side thing.\n. That's why I've attached a package with both images and ruby test case, so you can try and reproduce it. Thanks for your help so far. I'm doing it for free for an OS project, and I guess I'll just leave comment that users that want to put their own logo in will have to check if it displays correctly and if size is okey.\n. sorry :/\n. ",
    "huerlisi": "require 'prawn/core.rb'\nrequire 'prawn/layout.rb'\n\npdf = Prawn::Document.new\npdf.font('Times-Roman')\npdf.table([['Test', 'Val'], ['Test', 'Val']], :vertical_padding => 0)\npdf.render_file('test.pdf')\n. I've implemented this in my fork huerlisi/prawn@a582122ec5ad4c7674c4d9bcb080a6eb60081f1b.\nIncludes some simple rspec tests.\n. Simple patch including spec can be found in my github fork huerlisi/prawn.\n\nWhen the text method is called with nil or an empty string it just returns.\n\nIncludes test/spec assuring that calling text with nil or an empty string adds no string to the output.\n. Just as a note: I've contributed just a tiny amount of code, but here's my permission to relicense to whatever open source license...\n. Here's a small, executable example of the inconsistency between simple values and hashes:\n\nFailing:\n\n``` Ruby\nrequire 'rubygems'\nrequire 'prawn'\n\ncontent = [\n  [{:content => nil}, \"Hashs can't\"], \n  [\"Simple values can be nil\", nil]\n]\n\npdf = Prawn::Document.new\npdf.table content\n```\n\nOutput:\n\n```\nArgumentError: Content type not recognized: nil\n        from /var/lib/gems/1.8/gems/prawn-0.12.0/lib/prawn/table/cell.rb:127:in `make'\n        from /var/lib/gems/1.8/gems/prawn-0.12.0/lib/prawn/table.rb:373:in `make_cells'\n        from (irb):30:in `each_with_index'\n        from /var/lib/gems/1.8/gems/prawn-0.12.0/lib/prawn/table.rb:372:in `each'\n        from /var/lib/gems/1.8/gems/prawn-0.12.0/lib/prawn/table.rb:372:in `each_with_index'\n        from /var/lib/gems/1.8/gems/prawn-0.12.0/lib/prawn/table.rb:372:in `make_cells'\n        from (irb):30:in `each_with_index'\n        from /var/lib/gems/1.8/gems/prawn-0.12.0/lib/prawn/table.rb:371:in `each'\n        from /var/lib/gems/1.8/gems/prawn-0.12.0/lib/prawn/table.rb:371:in `each_with_index'\n        from /var/lib/gems/1.8/gems/prawn-0.12.0/lib/prawn/table.rb:371:in `make_cells'\n        from /var/lib/gems/1.8/gems/prawn-0.12.0/lib/prawn/table.rb:122:in `initialize'\n        from /var/lib/gems/1.8/gems/prawn-0.12.0/lib/prawn/table.rb:25:in `new'\n        from /var/lib/gems/1.8/gems/prawn-0.12.0/lib/prawn/table.rb:25:in `table'\n        from (irb):30\n        from :0\n```\n\nBig thank you for this gem, btw:-)\n. :+1: \n. require 'prawn/core.rb'\nrequire 'prawn/layout.rb'\n\npdf = Prawn::Document.new\npdf.font('Times-Roman')\npdf.table([['Test', 'Val'], ['Test', 'Val']], :vertical_padding => 0)\npdf.render_file('test.pdf')\n. I've implemented this in my fork huerlisi/prawn@a582122ec5ad4c7674c4d9bcb080a6eb60081f1b.\nIncludes some simple rspec tests.\n. Simple patch including spec can be found in my github fork huerlisi/prawn.\n\nWhen the text method is called with nil or an empty string it just returns.\n\nIncludes test/spec assuring that calling text with nil or an empty string adds no string to the output.\n. Just as a note: I've contributed just a tiny amount of code, but here's my permission to relicense to whatever open source license...\n. Here's a small, executable example of the inconsistency between simple values and hashes:\n\nFailing:\n\n``` Ruby\nrequire 'rubygems'\nrequire 'prawn'\n\ncontent = [\n  [{:content => nil}, \"Hashs can't\"], \n  [\"Simple values can be nil\", nil]\n]\n\npdf = Prawn::Document.new\npdf.table content\n```\n\nOutput:\n\n```\nArgumentError: Content type not recognized: nil\n        from /var/lib/gems/1.8/gems/prawn-0.12.0/lib/prawn/table/cell.rb:127:in `make'\n        from /var/lib/gems/1.8/gems/prawn-0.12.0/lib/prawn/table.rb:373:in `make_cells'\n        from (irb):30:in `each_with_index'\n        from /var/lib/gems/1.8/gems/prawn-0.12.0/lib/prawn/table.rb:372:in `each'\n        from /var/lib/gems/1.8/gems/prawn-0.12.0/lib/prawn/table.rb:372:in `each_with_index'\n        from /var/lib/gems/1.8/gems/prawn-0.12.0/lib/prawn/table.rb:372:in `make_cells'\n        from (irb):30:in `each_with_index'\n        from /var/lib/gems/1.8/gems/prawn-0.12.0/lib/prawn/table.rb:371:in `each'\n        from /var/lib/gems/1.8/gems/prawn-0.12.0/lib/prawn/table.rb:371:in `each_with_index'\n        from /var/lib/gems/1.8/gems/prawn-0.12.0/lib/prawn/table.rb:371:in `make_cells'\n        from /var/lib/gems/1.8/gems/prawn-0.12.0/lib/prawn/table.rb:122:in `initialize'\n        from /var/lib/gems/1.8/gems/prawn-0.12.0/lib/prawn/table.rb:25:in `new'\n        from /var/lib/gems/1.8/gems/prawn-0.12.0/lib/prawn/table.rb:25:in `table'\n        from (irb):30\n        from :0\n```\n\nBig thank you for this gem, btw:-)\n. :+1: \n. ",
    "rhyhann": "Ok. Sorry for annoying the bug tracker, I should have used the mailing list.\n. Ok. Sorry for annoying the bug tracker, I should have used the mailing list.\n. ",
    "sindhri": "When :dynamic is given, repeaters should use stored Procs rather than stamps, so they get run live rather than used for stamp creation\n. When :dynamic is given, repeaters should use stored Procs rather than stamps, so they get run live rather than used for stamp creation\n. ",
    "pointlessone": "Adobe doesn't provide any of \"standard PDF fonts\" for free. There are a few  knock-offs on the internet but source of those fonts is unclear and licensing is questionable. Also they all are inferior to Adobe fonts (or paid fonts of other foundries).\r\n\r\nWe can drop special treatment for standard fonts and let users specify fonts they have installed on their system but I don't think it's beneficial for our users. It adds friction and requires more actions to produce a basic document. It somewhat heightens entry barrier.\r\n\r\n---\r\n\r\nI will close this issue now. Feel free to reopen if you have anything to move forward the conversation.. Is there a practical difference since PDF 1.7 is still backwards compatible and renderers are expected to handle default fonts.. This have been fixed in #408.\n. I'm not working on this one. Not in near future.\n. @westonganger `line` only creates an abstract graphical object (a line in this case) but you still have to apply some rendering operation to it (like stroke or fill).\n\n`stroke_line` does that for you. It's essentially a sequence like this:\n\n``` ruby\npdf.line from, to\npdf.stroke\n```\n. @westonganger PDF has a thing called graphics stream. It's essentially a list of commands a renderer must perform to get the image of your document. It's very granular and has a cumulative effect. A command that produces a line doesn't actually draws it. It just say \"a line from here to here\". You have to execute another command to make it actually visible. Like a \"stroke\" command.\n\nLine is a part of Path Construction family of commands. They all get accumulated until a Path Painting command is executed. So when you use `line` you only construct a path. Eventually something else can produce a painting command and that will also paint the lines.\n\nIf you want to know more you can read Graphics Objects section of the latest PDF spec.\n. AFAIK, it's as good as it gets without investing substantial effort into it. Mostly because of how PDF implements transparency. In PDF transparency is supported only via masking. So every transparent PNG has to be decomposed into two different images. Essentially, alpha channel has to be extracted into bw-image. ChunkyPNG has to decompress image to do that.\n\nThe only thing I can think of is checking if decompressed images are getting GC'd ASAP. Not that that would help to avoid high total peak mem usage but at least it can lover average mem usage over time.\n. @sandal What would happen if transparency is disabled but transparent PNG is added to the document?\n\nWould it result in an exception? This would basically break the functionality. Also it still requires at least some checks (meaning, leaking knowledge about PNG into a PDF lib).\n\nWould it simply ignore it and just pass the data into the document? It might be useless in most cases.\n\nPNG has two major advantages: lossless (images not crippled by JPEG compression or GIF reduced palettes) and alpha-channel.\n\nReducing alpha-channel support out of the box might be a major downside.\n\nIt would be hard to reduce CPU/mem usage without really processing PNG like it's done with JPGs. JPGs are basically inscribed inscribed in the PDF format. `JPXDecode` is the one of the supported stream filters. On the other hand PNGs have to be unpacked. It's impossible to just include PNG data as it's done with JPGs.\n\nIt's worth to try and optimize PNG parsing. I wouldn't turn off transparency. It breaks a major feature and still it doesn't eliminate the work required for PNG support at all.\n. @sandal Prawn's PNG support is very processor and memory intensive. Full stop.\n\nThe issue has little to do with the transparency as such. The fact that we have to decode PNGs for any support at all (even non-transparent ones) is why it's not as efficient as JPGs.\n. @sandal I'll try doing something over the weekend.\n. @MarkDBlackwell \n\n> Handling transparency in PNGs isn't such a big need, I would think. After all, as I understand it, the PDF format itself doesn't even include the concept of transparency. Is it true that we can draw anything atop any opaque PNGs we drew (or placed) earlier in a PDF? (Please correct me if I'm wrong.)\n\nTechnically that is not entirely correct. PDF has concept of blending. You can use soft masks (basically alpha-channels) to produce semi-transparent output. All the drawing operations would be preformed in the memory before actually being rendered (to a screen or a printer, or anything else actually). That includes blending too. These masks are the PDF's transparency concept. If you want to go into greater details you can refer to the section _7. Transparency_ of the _PDF Reference v1.7_.\n. > I believe the big problem here is that end users may give us a transparent PNG someday (or soon), intended for placement in a PDF, without any transparency truly, actually being desired. And how do we handle that? (It has already happened to me, out of their graphics shop.)\n\nThis is hardly ever true. It's really hard to predict how it would look like if you just strip alpha-channel. Here's an example:\n\n![key](https://f.cloud.github.com/assets/7405/1746535/027d8398-6443-11e3-9d92-dd41b449f410.png)\n\nThe black rectangle on the right is the same key without the transparency. Many graphic editors do really weird things to the transparent pixels. So it might look like this, or have ugly grey background, or might be full of Satan hailing where original image was transparent.\n\nI can believe that users intend the image have the image blended over some sane background (like white, for instance in case of printing on a white paper) but I don't believe that users really want just transparency removed. Note, that technically these two are not the same and blending in Prawn would be even slower than just extracting alpha-channel as it's done now.\n. @MarkDBlackwell > In other words, after human beings hand-convert the usual web PNG's transparent areas to white, using their visual judgment, everything should be fine whenever their desired PDF is printed on white paper. Don't you think so?\n\nThis is what I was talking about. It's blending transparent PNG over white background, not stripping down alpha-channel.\n\nI just reiterate that PDF doesn't have native PNG support. That means, that Prawn has to decode it and convert to something PDF renderer can understand. That is true for all PNGs, not only the transparent ones.\n. @luckydev @alexdowad Could you please provide the images you've observed abnormal CPU/mem usage with?\n. Alpha decomposition seem to be extremely expensive.\n\nHere's a profile of opaque PNG image:\n\n```\nThread 1: total running time: 0.042860147s\n\n  %   cumulative   self                self     total\n time   seconds   seconds      calls  ms/call  ms/call  name\n------------------------------------------------------------\n  10.50    0.02      0.01         81     0.07     0.25  Prawn::Core.PdfObject\n   7.57    0.00      0.00          1     4.31     4.31  GC.collect_young\n   5.63    0.01      0.00          2     1.60     3.93  Rubinius::Sprinter::Builder#parse\n   5.49    0.00      0.00        288     0.01     0.01  Array#include?\n   5.43    0.01      0.00         47     0.07     0.14  Array#map\n   4.98    0.01      0.00          1     2.84     5.24  Prawn::Images#build_image_object\n   4.78    0.00      0.00          1     2.72     2.72  Prawn::Document#start_new_page\n   4.63    0.00      0.00          4     0.66     0.66  Rubinius::Sprinter::Builder::FloatAtom#bytecode\n   4.30    0.00      0.00        288     0.01     0.02  Prawn::Core::PdfObject<93> {}\n   3.88    0.00      0.00         19     0.12     0.12  String#length\n   3.78    0.00      0.00         47     0.05     0.05  Array::join<849> {}\n   3.44    0.01      0.00          3     0.65     2.09  Encoding::Converter::TranscodingPath.get_converters\n   2.67    0.01      0.00          6     0.25     1.13  Encoding::Converter::TranscodingPath.[]\n   2.64    0.02      0.00         32     0.05     0.62  Prawn::Core::PdfObject<102> {}\n   2.50    0.00      0.00         12     0.12     0.12  Rubinius::Tuple#each\n   2.48    0.03      0.00         25     0.06     1.02  Array#each\n   2.45    0.00      0.00         50     0.03     0.05  Thread.detect_recursion\n   2.09    0.00      0.00         47     0.03     0.06  Array#join\n   2.05    0.02      0.00         10     0.12     1.99  Hash#each\n   2.02    0.01      0.00          2     0.58     4.64  Module#dynamic_method\n   1.99    0.00      0.00          1     1.14     1.14  Prawn::Document::Internals#render_trailer\n   1.61    0.02      0.00          1     0.92    17.64  Prawn::Document#initialize\n   1.45    0.02      0.00          1     0.83    24.58  Prawn::Document#render\n   1.11    0.00      0.00         15     0.04     0.19  StringIO#read\n   1.06    0.01      0.00          1     0.60     8.61  Prawn::Images#embed_image\n   1.05    0.01      0.00          2     0.30     3.95  String#encode!\n   0.87    0.02      0.00          6     0.08     3.27  Prawn::Core::Reference#object\n   0.80    0.00      0.00         14     0.03     0.22  Rubinius::Sprinter::Builder::parse<1190> {}\n   0.78    0.01      0.00          7     0.06     1.44  String#%\n   0.69    0.02      0.00          6     0.07     3.34  Prawn::Core::DocumentState::render_body<70> {}\n   0.58    0.01      0.00          2     0.16     3.65  Encoding::Converter#initialize\n   0.58    0.01      0.00          7     0.05     1.38  Rubinius::Sprinter.get\n   0.52    0.00      0.00         12     0.02     0.15  MatchData#to_a\n   0.43    0.01      0.00          2     0.12     4.05  Rubinius::Sprinter::Builder#build\n   0.42    0.00      0.00         12     0.02     0.13  MatchData#captures\n   0.40    0.01      0.00          2     0.11     4.07  Prawn::Core.utf8_to_utf16\n   0.29    0.00      0.00         12     0.01     0.15  Rubinius::Type.coerce_to_array\n   0.29    0.02      0.00         10     0.02     1.78  Class#new\n   0.27    0.01      0.00          4     0.04     1.44  Encoding::Converter::initialize<154> {}\n   0.24    0.00      0.00          6     0.02     0.37  StringIO#printf\n   0.24    0.02      0.00         12     0.01     1.87  Prawn::Core::ObjectStore::each<73> {}\n   0.15    0.00      0.00         10     0.01     0.12  Prawn::Core::PdfObject<79> {}\n   0.15    0.00      0.00          6     0.01     0.39  Prawn::Document::Internals::render_xref<150> {}\n   0.12    0.01      0.00          1     0.07    13.92  Prawn::Images#image\n   0.12    0.00      0.00          1     0.07     2.50  Prawn::Document::Internals#render_xref\n\n10 methods omitted\n\n55 methods called a total of 1,133 times\n```\n\nAnd here's one with transparent PNG:\n\n```\nThread 1: total running time: 72.057737892s\n\n  %   cumulative   self                self     total\n time   seconds   seconds      calls  ms/call  ms/call  name\n------------------------------------------------------------\n  24.90   20.82     17.94   10678380     0.00     0.00  Array#[]\n  22.10   35.36     15.93    1222400     0.01     0.03  Prawn::Images::PNG::unfilter_image_data<306> {}\n  11.74   64.50      8.46       1730     4.89    37.28  Array#each\n   3.95    7.48      2.85          2  1424.13  3741.28  String#each_byte\n   3.42    3.18      2.47    6242171     0.00     0.00  Array#<<\n   3.00    3.81      2.16    1920000     0.00     0.00  Enumerable::each_slice<400> {}\n   2.79   53.70      2.01    1920600     0.00     0.03  Prawn::Images::PNG::unfilter_image_data<274> {}\n   2.41    6.93      1.74     480000     0.00     0.01  Prawn::Images::PNG::unfilter_image_data<350> {}\n   2.27    1.88      1.63    3667200     0.00     0.00  Numeric#abs\n   2.22   41.27      1.60    1609600     0.00     0.03  Enumerable::each_with_index<200> {}\n   1.75    2.72      1.26     185600     0.01     0.01  Prawn::Images::PNG::unfilter_image_data<297> {}\n   1.68    2.19      1.21    1920600     0.00     0.00  Enumerable::to_a<150> {}\n   1.61    4.39      1.16    1920600     0.00     0.00  Enumerable::Enumerator::each_with_block<70> {}\n   1.58    1.75      1.14   27541261     0.00     0.00  Fixnum#<\n   1.48    1.60      1.07   24124934     0.00     0.00  Fixnum#+\n   1.47    1.31      1.06     960637     0.00     0.00  String#<<\n   1.47    1.22      1.06    2444800     0.00     0.00  Fixnum#zero?\n   1.37    3.20      0.99    1920600     0.00     0.00  Enumerable::Enumerator::each<60> {}\n   1.09    1.13      0.79   15652806     0.00     0.00  Rubinius::Tuple#at\n   0.82    0.61      0.59     960343     0.00     0.00  Array#pack\n   0.80    0.72      0.58    6242171     0.00     0.00  Array#set_index\n   0.66    1.11      0.48     112000     0.00     0.01  Prawn::Images::PNG::unfilter_image_data<291> {}\n   0.66    0.71      0.48   10678512     0.00     0.00  Fixnum#>=\n   0.63    0.68      0.45   10348190     0.00     0.00  Fixnum#-\n   0.63    0.69      0.45   10678383     0.00     0.00  Fixnum.===\n   0.52    0.38      0.38        383     0.99     0.99  GC.collect_young\n   0.42    0.53      0.30     480000     0.00     0.00  Prawn::Images::PNG::unfilter_image_data<338> {}\n   0.41    0.39      0.30    4350472     0.00     0.00  Fixnum#%\n   0.29    0.31      0.21    4666547     0.00     0.00  Fixnum#==\n   0.29    0.41      0.21      89600     0.00     0.00  Prawn::Images::PNG::unfilter_image_data<285> {}\n   0.24    0.19      0.17     960000     0.00     0.00  Array#new_range\n   0.18    0.15      0.13     960637     0.00     0.00  String#append\n   0.16    0.17      0.12    2472984     0.00     0.00  Fixnum#<=\n   0.15    0.15      0.11    1609840     0.00     0.00  Array#[]=\n   0.15    0.15      0.11    1705600     0.00     0.00  Integer#floor\n   0.14    0.14      0.10    1705603     0.00     0.00  Fixnum#/\n   0.14    0.14      0.10    1920600     0.00     0.00  Rubinius::ByteArray#get_byte\n   0.07    0.07      0.05     961043     0.00     0.00  Kernel#kind_of?\n   0.07    0.07      0.05     960752     0.00     0.00  Rubinius::Type.infect\n   0.06    0.04      0.04          2    21.75    21.75  Zlib::Deflate.deflate\n   0.06    0.06      0.04     960848     0.00     0.00  Fixnum#>\n   0.02    0.03      0.02     391382     0.00     0.00  Fixnum#-@\n   0.02    0.02      0.02          1    16.74    16.74  Zlib::Inflate.inflate\n   0.01    6.74      0.01        600     0.01    11.23  Enumerable#each_slice\n   0.01    0.01      0.01        657     0.01     0.01  Array#shift\n\n68 methods omitted\n\n113 methods called a total of 167,634,034 times\n```\n\nThe code:\n\n``` ruby\ndoc = Prawn::Document.new do\n  image png # png = StringIO.new(File.read('image.png'))\nend\ndoc.render\n```\n\nRubinius 2.2.1, Prawn master\n\nThe problem seem to be somewhere in `Prawn::Images::PNG.unfilter_image_data`. I'm trying to pinpoint the exact problem and to find how to fix it.\n. @sandal Sure. Though, I find it highly unlikely that 5 orders of magnitude in method calls number is solely an rbx issue.\n. @sandal I'm currently looking into performance issues.\n. Also please check the output for correctness. I've tried a few images and for all the output was correct.\n\nWhile theory behind the method seem to be pretty solid, I doubt it was intended by the PNG spec authors.\n. Generally, Prawn tries to do as little manipulations to images as possible. Though, there's one exception. When you add a 16bit PNG to a document its alpha channel gets downsampled to 8bits.\n\nThe comment states that Adobe Reader can't handle 16bit PNG channels. But in the code only alpha channel is downsampled.\n\nI tried to use 16bit data for both color and alpha channels and it seem to work just fine in all renderers I have access to (Apple Preview, PDF.js, Adobe Acrobat Pro X, Adobe Reader XI).\n\nCan you please verify that 16bit images are rendered correctly on all renderes that we support (BTW, is there a list?).\n [16bit alpha PDF](http://cl.ly/0r0x0L3J310s/download/16bit-alpha.pdf)\n\nIt should look like this:\n![screen shot 2013-12-17 at 4 58 06 pm](https://f.cloud.github.com/assets/7405/1764758/b9bc8a6e-672b-11e3-94b5-c20c0df95b5e.png)\n. Probably some versions should be specified for those renderers.\n\nSpecifically, in this case the comment was written when the latest version of Adobe Reader was 9. Do we target only Adobe Reader XI now? It's been out for over a year now.\n. I'm glad we could help you Benjamin.\n\n## \n\nRegards,\nAlexander\n. @wpiekutowski I will add your name as the original implementator of gradients in Prawn.\n\nI can add fill/stroke_gradient methods back with deprecation notice and make them work in compatible way. I can't see where hash options can fit here though. All arguments are mandatory and there's no point making it more complicated than needed with hashes.\n\nWhat do you think new API might look like?\n. @bradediger please don't merge this pull request yet. I'll do some changes over the weekend. I will add @wpiekutowski's name to the file. Also I'm trying to come up with more Prawn-ish API (i.e. without additional classes as currently this is the only place you can see them in Prawn API).\n. Are there any other concerns to be addressed or this pull request is OK to be merged?\n. `make_soft_mask` is just a helper for specs. The API is `soft_mask`.\n. I've removed monkey patch for pdf-inspector. Pull request for it in the queue. But now specs are failing. I didn't mess with Gemfile. I assume, new version of pdf-inspector needs to be released to fix this failures. Is this acceptable? Advice what to do if not.\n. @backspace Your code produces seemingly blank document because your mask polygon doesn't intersect your rectangle. Basically, the rectangle is drawn on the area that is outside the mask.\n\nYou can try the following code:\n\n``` ruby\nPrawn::Document.generate('soft_mask.pdf') do |pdf| \n  pdf.save_graphics_state do\n    pdf.soft_mask do\n      pdf.fill_color \"444444\"\n      pdf.fill_polygon [0, 40], [60, 10], [120, 40], [60, 68]\n    end\n    pdf.fill_color '000000'\n    pdf.fill_rectangle [0, 50], 120, 68\n  end\nend\n```\n\nIt will produce Ruby:\n![Screen Shot 2013-02-16 at 11 48 30 PM](https://f.cloud.github.com/assets/7405/164048/f3f1871a-7871-11e2-8759-45380a5854e1.png)\n\nSoft masks are a way to manipulate alpha channel in PDF. PDF doesn't treat alpha channel as a part of a color. Instead you have to think in masks. To achieve any kind of transparency in PDF you need to draw in inside `soft_mask` block. It's converted to greyscale and luminocity of resulting image is treated as an alpha channel for everything you draw after that. Specifically that's why you have to wrap it all in `save_graphic_state` block. In PDF mask is a part of graphic state. So to be able to isolate effect of soft mask you need separate graphic state.\n. Are there any concerns to be addressed or is it OK to be merged? I prefer this one over #400 but I'm OK with #400 too functionality wise.\n. You wanted manual page for gradients. Would you also like one for soft masks?\n. Yes, I've seen. While first breakage (on 34039d1) is the real one. The second one doesn't seem to be directly related. Also I can't reproduce it locally, nor I had it before pushing changes to gh. I'm still trying to find the cause or a way to reproduce it.\n\nIs there a way to rerun build on Travis?\n. @bradediger agree. This is definitely one of the less used features of PDF. I need it for a small project of my own. So I though I could invest a bit of time to help the project and share what I'd done anyway. Granted I don't need all of the shading types but for completeness sake I still implemented all of them. Well, except of Type 1 (function-based shadings). I'm considering implementing that as well. But that's probably after stream filters.\n. This definitely can be done as an extension. Just let me know if this is going to be merged or not.\n. @bradediger Well, as already noted, this is self contained feature. It has almost 100% test coverage. And spec isn't going to change anytime soon. I don't think there will be any noticeable support load. Of course, unless any major refactoring is planned.\n\nSpec itself is not very hard to read and implement. Maybe a bit hard to understand what exactly it does as it's a bit loaded with math. But this math is not related to the PDF itself but rather to the implementation of renderers. Users need to understand this math at least to some extent to use the shadings efficiently but this math is not important to support this feature in Prawn.\n. This is released as a [prawn-shadings](https://rubygems.org/gems/prawn-shadings/) gem.\n. This should fix #434 as well as some other potential problems.\n. @yob Any other comments on this pull request?\n. @sandal I assume it'd be hard to extract only bug fixes from current master. Also by the time of 1.1 release 1.8 will probably be long EOLed.\n. Releasing the same codebase as two different versions is confusing. More so differentiating 0.13 and 1.0 just by _promise_ of 1.8 compatibility. Especially while 1.0 has 1.8 specific code in it.\n. @sandal How about releasing 1.0 as it is now and the next version is going to be not 1.1 but 2.0? We can drop 1.8 compatibility in 2.0 and have semver. At the same time announce that 1.0 is bug fixes only branch and all new features are going only into 2.0. There's no requirement that there must be few years between major versions. :wink:\n\nAlso besides 1.8 support there are a few deprecations that are going to be removed in 1.1 (according to the message). Is it semantic versioning?\n. @sandal I just wanted to know official position of Prawn team regarding 1.8 support. Specifically to know how much effort should I (and everyone else) put into 1.8 support while fixing bugs or adding new features.\n. It works fine on rbx-2.2.3. And I suspect it works on 2.1 and probably even on 2.0 final, too.\n. @ferrio mind extracting minimal failing test case? Does it fail only in Rails?\n. @ferrio Thanks, I'll take a look.\n. @bradediger according to git new streams have been merged after rc2 release. Is gem tagged correctly in git?\n. Well, this is weird\u2026 This bug is definitely in new streams.\n\n@ferrio from the backtrace it looks like you're using released 1.0.0.rc2. But the bug is in the master. Can you please clarify which version you actually use?\n. @bradediger @yob Could someone please close this issue?\n. @brunomeira Could you please clarify what version of gem you use? Also a minimal failing test case or at least a backtrace would be helpful.\n. @boazsegev Could you please provide full backtrace? Also a minimal test case to reproduce this bug would be helpful.\n. @orangethunder You may want to read #447.\n. It's not distributed under the same conditions as Ruby. It uses similar licensing scheme. Please refer to the [LICENSE](https://github.com/prawnpdf/prawn/blob/master/LICENSE) file for exact terms.\n. ``` ruby\nd.text %(<link href=\"http://github.com/\">GitHub</link>), :inline_format => true\n```\n. No, you're not missing anything. Bounding boxes in Prawn work more like coordinate transformation, rather than an actual container. It doesn't cut anything.\n\nIf you want content to be cropped you should take a look at a `soft_mask`. Also it still will move past bottom, so you probably want to put your content into a `float`.\n. @sandal Any details on this one?\n. There are a lot of hashes with symbol keys. Should I change those to 1.9 syntax?\n. Encodings are one of the biggest changes between 1.8 and 1.9. I see a lot of `force_encoding` calls. I'm not sure if they're used correctly in most cases. Do you have any background on that? \n. I'm not sure what I'm doing wrong. The test file renders just fine in Preview, Acrobat Pro, and Firefox.\n. @nhimbkno1 You really should use markup for code. Otherwise it gets garbled and it's hard to reason about it in your comments. \n. @nhimbkno1 Indeed, the output file is broken and the template is (mostly) fine. I'll look into this later today.\n\nThank you for reporting the issue and uploading the files.\n. @nhimbkno1 Sorry, was short on time lately. I'm planning to investigate it tomorrow but I won't give you false hope. It's likely there's no simple fix/workaround for your issue.\n. @nhimbkno1 I'm sorry, but I can't reproduce the problem.\nI tried rbx-2.2.0, MRI 2.0.0 and MRI 1.9.3 with both Prawn 1.0.0.rc2 and current master. Every single time I got good output.\n\nScript:\n\n``` ruby\n#!/usr/buin/env ruby\nrequire 'prawn'\n\npdf = Prawn::Document.new(template: 'error_before.pdf', margin: [0, 0, 0, 0])\npdf.text_box \"test\", at: [10, pdf.bounds.top - 100], size: 20, width: 200, height: 400\nFile.write 'test.pdf', pdf.render\n```\n\nCould you you please provide a simple script that would reproduce the problem? Also tell a bit about your environment.\n\n@sandal Can you please tell what exactly was messed up in the PDF you've got? Or better upload it somewhere?\n. @nhimbkno1 Still works.\n\nPlease try the script I've posted earlier on your machine and see if it works for you.\n. @nhimbkno1 What version of Ruby do you use?\n. @nhimbkno1 I tried the one in the original report. This one works too.\nRuby 1.9.3, Rails 3.2.13, Prawn 1.0.0.rc2. Rails app uses UTF-8 as default encoding. I don't use any gems for encoding conversions. `pdf.render` produces a string with ASCII-8BIT encoding and I'm pretty sure that in this case it's a Rails problem.\n\nCould you please create a new sample Rails app to help me reproduce the problem? Push it to Github so that I could clone it.\n. @sandal That was my fault. The original code uses `send_data`.\n. OK. I've got your code.\n\nNo encoding errors.\n\nGenerated file isn't rendered correctly in Firefox but Preview seem to be more tolerant.\n\n![screen shot 2013-11-26 at 5 23 06 pm](https://f.cloud.github.com/assets/7405/1623060/d19c88b0-56ae-11e3-81b3-e4a0ce2ca7aa.png)\n\nIt looks like PDF.js (used in Firefox for rendering PDF files) doesn't like multiple content streams. I'm looking into it.\n. @nhimbkno1 I'm using your code.\n\nWhat exactly is the error you get? Is it an error message in your PDF reader or an exception in your application?\n\nIt looks like you don't have any errors in your code (no exceptions and backtraces) but rather you're not satisfied with the look of your document in PDF reader. BTW, what do you use to view PDFs?\n. PDF.js is far from complete. It can not render the original template file too. At least on Nightly (`28.0a1 (2013-11-24)`) it fails to render first page of unmodified template. The other two pages look fine.\n\nThe template itself is not the example of a top notch PDF file, either. I will investigate why PDF.js doesn't like the template itself. There's clearly an issue with fonts. Though, I'm not sure why only first page actually fails to be rendered. Other pages seem to look fine on my machine.\n\n![http---lvh me-3000-2](https://f.cloud.github.com/assets/7405/1624345/61633672-56c0-11e3-966a-7c8f749f8d06.png)\n![http---lvh me-3000-3](https://f.cloud.github.com/assets/7405/1624347/66fd1648-56c0-11e3-8f9c-5a1f0acbee3f.png)\n. @nhimbkno1 I use 12.pdf from your sample rails app.\n\nThanks for the link with other templates.\n. @sandal I've found the problem.\n\nTemplate (12.pdf) has a global Resources dictionary with all fonts. It's set on the Page Tree Node. Pages have no Resource dictionaries and so inherit global resources. Once Prawn add some text it adds new font to the page Resources dictionary and thus overrides the global one. After that renderer can not find fonts used on the page.\n\n@nhimbkno1 While technically your template is correct (as far as I can tell), Prawn can not handle it correctly. The \"easiest\" workaround I see right now is to write a script to recreate the template with Prawn. Sorry, but this can not be fixed in Prawn in a timely manner.\n. @luongtran I suggest not converting (taking existing files and modifying them) but rather recreating your templates with Prawn. That means writing scripts that generate your templates only using Prawn.\n\nPDF is a complex format. Currently Prawn doesn't implement the spec completely. For example, in this case Prawn has no idea that Resources can be inherited. It just sees that the page have no resources dictionary and create one when it needs one. Prawn has no clue that it should check first if there are any inherited resources.\n. Here's a diagram of the PDF after it's been processed by Prawn. Specifically, 12.pdf template after adding some text to the first page.\n\n![pdf-12-diagram](https://f.cloud.github.com/assets/7405/1631254/38f33700-5760-11e3-8c8c-a7e45d6abeba.png)\n\n> Now, i think the problem at the Prawn is when it see the new font that not define in template it will create new resource at the top page, right?\n\nThis is exactly what happens. But, it also adds a `Resources` dictionary to the page because there's none in the template. Prawn assumes that page needs one at all times and it doesn't know that resources can be inherited from the Page Tree Node as in the case of 12.pdf file.\n\n> So why we dont define the resource at every pages?\n\nIn this case it's exactly the opposite. It will break every single page because it will override inherited resources. The correct way to do it would be to duplicate Page Tree Node resources into every page but Prawn is not capable of doing that automatically. You can write some code to do that for this specific case but something universally useful and robust would be extremely hard to build if not outright impossible.\n\n> The last node is defined at the top file and the first node is defined at the bottom. Does it problem with Prawn? \n\nNo, it's not a problem. PDF is basically is a big tree structure (a graph actually) and Prawn is capable of working with it on the lowest level.\n. There are a few command line tools that might be useful for you. The more popular ones have Ruby wrappers. For example [PDFKit](https://rubygems.org/gems/pdfkit). Though, I'm not sure if any of them would be a solution for your specific case.\n. @luongtran Technically, once Prawn loads the template document you should have access to all objects in the PDF. You should be able to access and manipulate them directly.\n\nThough, keep in mind that Prawn will create Resources dictionary on pages with the first attempt to add text to that page and it doesn't depend on what font you use for that operation. So the way to go for you in this situation would be first manually copy Resources dictionary from Page Tree Node to every page you want to modify and only then add the text.\n. @luongtran That is the best you can do right now.\n. I'm not sure if this is correct behavior.\n- All pages in the document are meant to be accessible through Page Tree. That means, that reader should be able to walk the tree starting at the root node and eventually get to the page node itself.\n- PDF can contain deleted objects and they should be unchanged. This means that there might be page objects that reference page tree nodes in their Parent field but are not referenced back from that page tree node.\n\nI'm not sure if Prawn loads deleted objects. I need some time to check that but I can't promise anything in coming days.\n\nAlso code looks a bit too defensive. Too much checks for my taste.\n. @sandal I'm against it until someone disproves my last comment.\n. @pandar1 First of all you're mostly talking about MRI. MRI with threaded Rack adapter will result in a sort of behavior you're talking about. For the sake of CPU saturation you should use forking adapter (like Unicorn). On the other hand truly threaded implementations (JRuby, rbx) won't suffer of heavy threads. As @bradediger mentioned, all modern OSes handle thread switching effectively.\n\nArtificially causing thread switch in the code that is not supposed to manage threads is not a good idea. If your requests timeout because of Prawn, you definitely don't want to cause your handlers to give up their time. This thread switch may be the difference between successfully finished pdf generation and the one that had 1ms to few to finish its job.\n\nYou want your computation to finish as fast as possible and for that you want your CPU to be 100% loaded.\nYou can try to paralellize your tasks if you have facilities for that (i.e. multiple cores). But I think, it's not worth to introduce paralellizm into Prawn.\n. This is not how PDF really works.\n\nYou can put in however big image (even 300 DPI ones) and set actual dimensions of it. Renderer (printer) would figure out how to scale it.\n. @sandal jruby 1.7.8 (1.9.3p392) 2013-11-14 0ce429e on Java HotSpot(TM) 64-Bit Server VM 1.6.0_65-b14-462-11M4609 [darwin-x86_64]\n. JRuby 1.7.8 seem to be broken.\n\nJRuby 1.7.9 is much faster. On the other hand, 1.7.9 is inconsistent between runs on memory side. Sometimes it's 230MB and sometimes it's over 400MB. It's hard to get any meaningful improvement (or otherwise) ratios.\n. @yob Yes, I just watch Activity Monitor. Simply to have some consistent numbers between implementations.\n\nThough, it might be useful to have some better numbers to measure the changes. Can anybody share a short HOWTO on how to measure actually used memory on JVM?\n\nIt certainly looks like what you've described. Memory usage doesn't fluctuate much on JRuby.\n. @sandal I consider this pull request to be completed. Please review.\n. 1. \"Make revisions\" means commit to the branch? Otherwise I don't see any advantages. On my fork I can safely rewrite history to organize commits nicely. On the upstream repo that is a bit dangerous.\n2. Apart from supporting 16bit alpha channels it's the same. It may break some tests on user projects if they are trying to do string comparisons of rendered documents as it was done in repo. Otherwise it should be safe.\n. Got it. Will use topic branches.\n\nThanks for merging.\n. That is correct.\n\nTechnically, those gems should be in the gemspec but currently it's impossible to specify platform specific deps ther.\n. The most prominent 1.8 remnants are completely removed. As I've mentioned elsewhere usage of encodings sometime is questionable and should be reviewed separately.\n\nI deem this one complete. Please review.\n. Wouldn't it be better to contribute a fix to AFM gem?\n. This is understandable.\n\nI see that @yob contributed to [the AFM gem](https://github.com/halfbyte/afm). I think we have solid chance for cooperation.\n\nWould you consider reverting back to using AFM gem if it gets fixed or do you prefer sticking with our own code?\n. @sandal I have no idea. Apparently all those reads somehow produce a lot of objects. Also it looks like reads way slower than seeks.\n\nIt also might be some fluke but I'm reluctant to wait for it another 3 hours.\n\nAlso the effect is expected to be much less prominent on a usual image of a few hundreds of KBs. I used rather big image for this benchmark.\n. @MarkDBlackwell Could you please check latest release? It's much less processor intensive now.\n. Is it something custom or is there a name for it?\n. So maybe just \"PRAWN\" would be more accurate?\n. Looks like gh notified only linked contributors\u2026\n\n@proactive @pwnall @costan @ratbeard @riopro @rivsc @rubyredrick @scoopr @scpike @seebs @sgwanlee @shanebonham @sigmike @sos4nt @strzibny @tim-vandecasteele @toretore @torgoton @trym @vizjerai @vongrippen @weimeng @wesgarrison @whoops @willbryant @wpiekutowski @yob\n. @cbartlett We'll never know until we try.\nYou've contributed to Prawn over 5 years ago. Your commits are not even connected to your GitHub account and yet you're here.\n. @cbartlett New license will apply only for new versions of the code.\n\nSay, 0.16\\* will be released under MIT license. Everyone who uses 0.15.x\\* or older would use it under GPL2, GPL3 or RUBY license.\n\nThe change is no big deal for most users as the new license even more permissive than the old one. Only the ones who are Stallman would not be able to upgrade to 0.16*.\n\n\\* All versions mentioned are fictitious. Any resemblance of real version in this text are purely coincidental. \n. @cs Just to make it clear. Are you and @proactive the same person?\n. @cs Thank you.\n. @sandal I think, you still can push to the branch and merge new commits.\n. Extension point will be in another pull-request.\n. I might have misunderstood the option but\u2026 I think the idea was to ensure reuse of mask dictionaries.\n. @sandal It can be done differently and I think it is actually implemented via mask registry.\n\nIn the worst case resulting files are going to have some duplicate objects and consequently a bit larger files.\n. `ASCII-8BIT` is by no means backwards compatible with `UTF-8`. `\"\\xFF\"` is a valid string in `ASCII-8BIT` but is not in `UTF-8`.\n\nAll the images operations should be done with bytes, not character. We have to carefully inspect all the read/write operation before defaulting to multi-byte operations.\n. @nathansamson It's true that Ruby 2.x defaults to UTF-8. Though, this patch changes a few explicit `ASCII-8BIT` to `UTF-8`. That might result in some problems.\n. @sandal I think, magic comments also set external encoding. And we want to avoid that.\n. @sandal You're right. It's messed up. One more reason for inspection.\n. Hi Johnny,\r\n\r\nYes, this issue is still open. Yes, you can work on it. I would appreciate if you submit a proposal first in case a substantial change is required before you issue a PR. Please also note that I'm a bit short on free time at the moment and may not respond in a timely manner. Still, others may give you valuable feedback.. No problem. I'm glad you've found a solution that works for you.. @andreashappe Could you please try and build a minimal example to demonstrate the issue?\n. @andreashappe I didn't ask for your template. I asked for a minimal example demonstrating the problem.\n\nTwo varying PDF can be useful. My email is in the profile.\n\nCall order definitely will produce different documents. There's no doubt about that and there's little we can do to fix that in the Prawn itself. On the other hand different output for the same code probably should produce the same output. This is your case, right? If so, we can try and fix it. Not that this a spec violation but I see how it can help people like you to test produced documents more easily.\n\nAs for how to reproduce it. If you use RSpec try running running your tests with different seeds and see if you can find one seed that makes your test pass and another one that makes it fail.\n\n```\nrspec --seed 1 spec/pdf_spec.rb\n```\n. @sandal The issue comes from TTFunk. It uses class var to generate unique subset font names. Apparently this will produce different results depending on the order of spec execution or to be more precise the order of generating font subsets. Take a look at [the code](https://github.com/prawnpdf/ttfunk/blob/master/lib/ttfunk/table/name.rb#L50).\n\nWe probably can fix this but I'm not sure about that yet and I'm not sure about how much effort it will require. I'm not very familiar with TTFunk internals. Do we want to move forward wit this?\n. @mfly @edborden @Siyfion @danielgrippi @sublimecoder @kriztynna Sorry for addressing so many people but I'm curious what is your use case?\n\nI didn't even think that palette transparency in PNG is used so widely. I though it's just one of those rare edge cases that one or two users stumble upon but apparently many people use those palette PNGs all the time. So could you please share your use case and why you use palette transparency instead of, say, 8-bit alpha channel?\n. @sublimecoder This is interesting. We used to have incomplete support for palette transparency. It only keeps color data but completely loses transparency. It won't complain but the output would be incorrect.\n. @sublimecoder Quick code inspection seem to show that only color would be kept and transparency data would simply be ignored. \n\nIn pseudo code it would look like the following transformation:\n\n``` ruby\ndef pixel_color(r, g, b, a)\n  [r, g, b, 1.0]\nend\n```\n. @giuseb Could you please rebase this PR on master?. @giuseb The pages don't look good. Could you please take a look?\r\n\r\n![page-1](https://cloud.githubusercontent.com/assets/7405/22903140/4894fc42-f240-11e6-94f3-745890659a00.png)\r\n![page-2](https://cloud.githubusercontent.com/assets/7405/22903150/5271dc62-f240-11e6-9cdd-1c8850ad8161.png)\r\n. This a new addition we've been working for a while. Manual reviews historically have been a huge time sink during releases. But not every release actually had manual changes in them. This failure lets us know that we need to review the manual.\r\n\r\nMake sure the manual looks as expected and change the hashes in the failing spec. Also I personally would appreciate if you post screenshots of the changed pages.. Looks good.. I'll handle that.\r\n\r\nThank you for your contribution.. @giuseb I've rebased and merged this PR. I'll close this PR now. Feel free to reopen.. @tomprats If you're steal interested, please address my comment and rebase your branch on master. Thank you.\n. @tomprats Than you for your contribution. I've rebased this PR on master and merged. GitHub didn't pick it up so I will close it now.. It doesn't exist because there's no universal points to pixels conversion. It very much depends on the pixel density of the target medium.\n\nYour code works for CSS pixels. But those are not real pixels. It would be confusing to introduce a unit that has little relevance both to its name and its real counterpart outside of CSS.\n. \"a visible single line\" is still not quite a physical pixel on the screen. Ref: [A Pixel Identity Crisis](http://alistapart.com/article/a-pixel-identity-crisis)\n. @johnnyshields If you're still interested in getting this merge could you please rebase this PR on master?. Could you please clean up history a bit and rebase on master?. The resulting commit message is ugly.. Thank you for your contribution!. @wingfire Thank you for your contribution.\r\n\r\nThis issue has been addressed in master. I will close this PR now. Feel free to reopen if you feel this PR is still relevant.. @mogest Is my understanding correct that the problem is here: https://github.com/prawnpdf/prawn/blob/master/lib/prawn/graphics/patterns.rb#L65-L66 (and the relevant calls in the other branch)?\n. @mogest Please do.\n\nCode seems clean enough but I haven't got to actually try it out yet. Hopefully will have some time this week.\n. I use both prawn-svg and gradients in my documents. But I don't use transformations.\n\nI don't think changing core behaviour in prawn-svg is a nice thing to do. Probably, we can create a new gem for this very specific thing. Warn in Prawn when gradients used with transformations that it's going to change in 3.0 and that there's this one gem you should use to get correct behaviour. prawn-svg can warn users too when incorrect behaviour is evoked (but prawn would probably detect it anyway).\n. +1 on `throw`. +1 on wiki. +1 on docs.\n. :star:\n\n@mogest Well done!\n. Prawn tries to set a minimum version for the document depending on used features. It starts with 1.3. Once a feature that has been introduced in a later version of PDF spec (e.g. 1.4) the version is bumped up accordingly.\n\nYou can bump up the version yourself:\n\n``` ruby\ndocument.renderer.min_version(1.4)\n```\n. @abelsromero We already have some features that bump document version up to `1.6`. Also PDF is backwards compatible format so you can manually bump up to `1.7` even while your document uses only `1.3` or `1.4` features.\n\nDo you have in mind any `1.5` features that Prawn doesn't support yet?\n. Thank you for detailed report. I don't think Prawn would be in a lot of trouble. Here's why.\n\nWe provide commit right to anybody who had their PR merged. This means that there's a lot of people who can continue maintaining the project even after some people stepped down. For example, Gregory was an active maintainer for a while but now he's busy with something else. Evan Sharp does most of the maintenance at the moment and the project is as solid as it ever was. Those two people do not contribute to the project but it's still being maintained and developed.\n\nPS: I guess, this is not an issue. I'll close it. If you still think this is something Prawn community should take an action about feel free to reopen.\n. Just one comment: array of arrays looks a bit awkward. How about a hash? Like `{ position => colour }`?\n. For opacity you still can use the following format:\n\n``` ruby\n{\n  0 => [\"color\", opacity],\n  1 => [\"color\", opacity]\n}\n```\n\nI'm still not convinced about array of arrays. Especially that you can easily convert internally if you need:\n\n``` ruby\n{ a: 1, b: 2 }.to_a # => [[:a, 1], [:b, 2]]\nHash[ *[[:a, 1], [:b, 2]].flatten ] # => {:a=>1, :b=>2}\n```\n. Well\u2026 We only support MRI 2.0+ so we don't expect any compatibility with alternative implementation of lower versions.\n\nThere's a chance our Travis configuration is not quite right. I'll take a look a bit later.\n. @mogest Could you please rebase this PR and take a look at the failing specs?\n. @mogest Is this a known issue with JRuby?\n. @packetmonkey MRI 1.9.3 is not supported (I mean MRI support, not 1.9.3 support in Prawn) for a long time. Only 2.0+ is supported. Shell we probably deprecate JRuby that doesn't support 2.0 mode?\n. That JRuby recommendation is based solely on [performance of JRuby 1.7.18](https://github.com/prawnpdf/prawn/pull/600#issuecomment-30668729).\n\nOur supported Ruby versions policy mostly matched MRI core team. Whatever is supported by them is supported by us in Prawn. It's only logical to match that for alternative implementations.\n\nWe can deprecate pre-9k JRuby support in a patch level release and then drop it completely in a minor release. Especially since we don't need to actually remove or change anything in the already released code. This deprecation would only make it a bit easier to implement new features like this one.\n. Thank you @mogest! Well done!\n. @dsisnero Thank you for your contribution.\r\n\r\nI don't feel like this is a useful addition. It is simple enough to keep it in your document rendering code if you need it.\r\n\r\nI will close this PR now. Feel free to reopen if you have anything to add to the discussion.. It looks good. Spec is pretty simple on this one.\n. @iamjohnford This is great. :star:\n. @packetmonkey My bad. Fixed specs, removed `puts`, and added a Changelog entry.\n. @maerch Thank you for your contribution. I've rebased this PR on master and merged it but GitHub didn't pick it up. I will close this PR now.. @maerch Could you please provide specs for the change?. Bumped JRuby to 1.7.22 (the one before the latest 1.7). It fixed bundler installation.\n\nWe probably should specify versions for all the other implementations, too. Travis updates RVM and rubies once in a while and that changes our build matrix. What was green yesterday may fail today.\n\nPS: JRuby build times are ridiculous. 9m+ vs >1m for other implementations.\n. Also we probably should start testing on JRuby 9k.\n. The problem with Travis is that they don't use the latest stable release of Ruby. Say, 2.2 means 2.2.0p0 while latest would be 2.2.4 (or 2.2.3 as of the time of this PR submission).\n\nWe should test on the oldest supported version of each supported implementation and each latest minor release, and probably ruby-head (or head of each supported implementation).\n\nThis indeed would give us much bigger build matrix but also prevent breakage by Travis env updates.\n. I'll try. Commits here soon.\n. @packetmonkey Updated.\n. Is this good enough?\n. Hello @hoanghiep90 and thank you for contribution.\n\nCould you please provide a spec for this change?\n. @imidsac Could you please expand a bit? What goes wrong? What was you expecting? How can we reproduce the issue?\n. `@option.avatar.path(:original)` must be an `IO` instance or a path to a local file. In your case it seem to be an URL. Prawn doesn't support that. You need to figure out a way to either get an `IO` instance out of your `@options.avatar` object or download and pass a path to the local copy.\n. I'm sorry, I can not. I have no idea what your `@option.avatar` is.\n\nI assume, you're using Rails and some sort of plugin for file uploads. Consult the gem's documentation.\n\nI'm closing this issue as it's not a Prawn error.\n. @cdekker Could you please provide a minimal example that reproduces the issue?\n. @cdekker Thank you. We will look into it a bit later.\n. It looks like it's the same issue as #933. Is this the case?\n. @kriztynna Good. Looking forward to it.\n. Thank you for your contribution. It's much appreciated.\n\nHowever, I think it's not an optimal solution. For instance, In case of indexed PNG without transparency this code would still generate a mask for the image. A completely opaque mask. It's a redundancy that doesn't contribute to appearance of a document, makes a document heavier and rendering more complicated.\n\nI would suggest completely skip mask generation when there's no transparency. I believe this can be achieved by changing `alpha_channel?` method.\n. @kriztynna Thank you. This is pretty much what I had in mind.\n. Hello @softe1988,\n\nCould you please provide a screenshot and sample code? Generated document may help, too.\n. I would advise against subclassing `Prawn::Document`. Instead create your own class that has an instance of `Prawn::Document` as a part of its state.\n\nThe reason for that is that `Prawn::Document` has a rather wide API. There's always a chance of API collision. For instance, in this case you redefine the `state` method which is [essential part of the `Prawn::Document`](https://github.com/prawnpdf/prawn/blob/ba56328a9f02826802941045aea90b12fa545126/lib/prawn/document.rb#L642).\n. @softe1988 @simonetma Is the issue resolved for you?\n. @simonetma No problems. I'll close it now. Feel free to reopen if that doesn't solve your issue.\n. Thank you for your contribution.\n. I'm willing to monitor all our official communication channels for signs of breach.\n. I've fixed gradient name generation. Now it's same on both MRI and JRuby. Though, there are a few more issues with the manual. I suspect rounding errors.\n\nHere's a comparison of manual generated on MRI and JRuby: [manual jruby-mri comparison.pdf](https://github.com/prawnpdf/prawn/files/287773/manual.jruby-mri.comparison.pdf)\n\nAnd here are the manuals if anyone wants to investigate the source:\n- [manual-jruby.pdf](https://github.com/prawnpdf/prawn/files/287774/manual-jruby.pdf)\n- [manual-mri.pdf](https://github.com/prawnpdf/prawn/files/287775/manual-mri.pdf)\n. @jaredbeck That's what I'm spending my limited OSS time next. It's just running a bit short at the moment. Expect it to happen Really Soon\u2122\ufe0f.. Hello @hoanghiep90,\n\nYou're using the latest Prawn version. At the moment there's nothing more recent than that.\n\nWhat you're seeing is the result of Prawn extracting alpha channel from your PNG image. You see, PDF doesn't natively support transparent images. So we have to apply a mask to a solid image in order to make it look as intended. For that we need to split the image into two images: a solid one, and an alpha-channel mask. Since we do it completely in Ruby it may feel slow for big images.\n\nNow, we do it in Ruby because we want Prawn to be as portable as possible. For that we have a policy that we should not have any external dependencies, including binary extensions. There are extensions that use ImageMagick that may or may not be faster. Or you can extract alpha-channel out of your PNGs beforehand and apply the mask yourself bypassing the splitting in Prawn completely. That may be faster than what Prawn can offer right now.\n\nWe certainly care about performance and we always strive to make Prawn as fast as possible but there are limits to what Ruby can do. Yet, I would ask you to submit an example code and PNG image you experience the problem with. Just in case we're hitting some edge case which makes it unusually slow.\n. @mojavelinux I understand your argument. Creating inconvenience for users is a bad thing. I totally agree with you.\n\nYet, I think you're making the issue bigger than it actually is. We officially started supporting JRuby in Prawn 1.0. [[1]](https://groups.google.com/forum/#!searchin/prawn-ruby/jruby/prawn-ruby/8Iv0L_HeHDo/EaxZ1CjkGlYJ) [[2]](https://groups.google.com/forum/#!searchin/prawn-ruby/jruby/prawn-ruby/PwxhCiJgfcI/yWXx0FP7vD4J) At that time it was JRuby 1.7 in 1.9 mode.\n\nIn Prawn 2.0 we dropped 1.9 mode and required JRuby 1.7 2.0 mode. [[3]](https://groups.google.com/forum/#!searchin/prawn-ruby/jruby/prawn-ruby/65_lsabpzbw/qp0zb5Vy5ysJ). Not that that thread has not a single comment on the change. I tried to find evidence of that big outcry caused by JRuby 1.7 1.9 mode but I found nothing. Also note that full 2.0 mode never really come true in JRuby 1.7. Which is shame but is unrelated to this discussion.\n\nNow some stats about JRuby usage. There's no definite data as for how many people actually using Prawn with JRuby and JRuby 1.7 specifically. Though, I gathered some numbers that might give an estimate.\n\nMain (this) Prawn repository has 607 closed, and 44 open issues (651 total). Only 11 of them mention JRuby. That's about 1.7%.\n\nGroups has 1753 threads. Only 27 threads mention JRuby. That's about 1.5%.\n\nHere's [last year stats from Semaphore](https://semaphoreci.com/blog/2015/12/01/ruby-version-usage-in-commercial-projects-2015-edition.html). As you can see they show JRuby (all versions) at around 1%. Morover, that number seem to be constant over last three years. And is applicable to a wider variety of projects. Yet, it's mostly consistent with our numbers.\n\n1% is a small number. Yes, they still are Prawn users and are still valued. But our resources are limited. We are willing to work towards better product for them with them. But we also can not spread the little time we have to support old Ruby versions. If those users stayed with older Ruby for whatever reason they likely understood the trade-offs.\n. @seelensonne Thank you for detailed report. We will take a look as soon as we will have time on our hands.\n. No, in most cases Rails can pick up the MIME-type. However, you may use constructions like this in your controller:\n\n``` ruby\nrespond_to do |format|\n  format.html\nend\n```\n\nIn that case you need to explicitly handle `pdf` format in the controller.\n. `html_safe` is a part of ActionView, not Prawn. You would need to use some other library to clean up your strings. I believe, `html_safe` doesn't remove any markup from string but escapes it on unsafe strings. To achieve similar effect you can use `cgi` library from Ruby stdlib. For instance: `CGI.escape_html(unsafe_string)`.\n\nIf you want to just keep text and remove all markup I don't think there's anything in stdlib for that. You would have to look at gems like [loofah](https://rubygems.org/gems/loofah).\n. #949 has been merged.. @johncip Don't worry about that. We do issue triage once in a while and clean up these resolved issues.\n. To be honest, I'd rather rewrite the whole method.\n\nCurrently there are two loops in it and mutation only happen to carry over \"unrolled\" margins to the second loop. On top of that we now have a `dup`. This is very inefficient.\n\nIf we roll both loops into one we would not need an options dup, we would get rid of extra loop, and we would not need to mutate the options.\n. @johncip Yes, more or less.\n. @johncip Please don't worry. I'll handle it this weekend.\n. I strongly oppose this change. With it you may produce unreadable documents and wouldn't know it.\n\nIf you have troubles with encodings you should handle it in the application.\n\nI will close this PR but I'm open for discussion. You are welcome to present your case with more arguments or use cases.\n. Prawn doesn't come with any fonts because PDF format mandates a few default fonts. Here's a list:\n- Times\u2212Roman\n- Times\u2212Bold\n- Times\u2212Italic\n- Times\u2212BoldItalic\n- Helvetica\n- Helvetica\u2212Bold\n- Helvetica\u2212Oblique\n- Helvetica\u2212BoldOblique\n- Courier\n- Courier\u2212Bold\n- Courier\u2212Oblique\n- Courier\u2212BoldOblique\n- Symbol\n- ZapfDingbats\n\nFor this fonts Prawn has font metrics to properly layout text but the fonts themselves must be available on the target system. That is, they either must be a part of the OS, or must be bundled with a reader.\n\nAs for your question if the exception could be something else. Prawn is designed to work in a \"streaming\" manner. That is, every operation produces some output immediately and there's no way to \"rewind\" and regenerate a part of the document if you encounter any problems. So, there's simply no way to properly handle anything unexpected. In this case, you have no way to undo text rendering done to this point and so you have no way to correct any errors. Because of that there's no way continuing document rendering. That's why throwing an exception is an acceptable solution in the context of Prawn design.\n. Hello @amyxguo,\n\nAs far as I can tell, that flag only disable the warning for built in fonts. Since you are using a custom font that flag doesn't work. Also you are not getting a warning. You are getting an exception which means that your font lacks glyphs for your text.\n\nRecommended solution would be to add another font that definitely contains full set of glyphs you may need and use it as a fallback.\n\nAs for your desired solution, it is against our goals to produce corrupted documents so we are not going to implement it. However, you may monkey-patch prawn to do that.\n\nI will close the issue now but feel free to reopen if you think the issue can be resolved in another way.\n. @amyxguo Try these fonts: http://www.wazu.jp/gallery/Fonts_ChineseTraditional.html\n\nThe characters in your example look Chinese to me but then Kanji is adopted Chinese characters. I'm not sure if Unicode makes distinction between Kanji and Chinese character, though.\n. Hi Adam,\n\nThey are only used for tests. The library does not use any of those fonts. Also there are possible issues with font redistribution according to their license. That has not been properly investigated.\n. @matkoniecz Thank you but no. We do not intent to distribute fonts. Developers are expected to take care of fonts they want to use in their projects themselves.\r\n\r\n---\r\n\r\nThan you everyone for discussion. I hope the issue have been cleared up.\r\n\r\nI will close this issue now. Feel free to reopen if you have anything constructive to add.. @Rodrigora Thank you for the PR.\n\n@packetmonkey Apart form the comment wording all is good.\n. @Rodrigora Thank you for your contribution. This issue has been resolve in master so I will close this PR now. Feel free to reopen if you feel the solution is inadequate.. Prawn does font subsetting as an optimization to keep your documents small. You may want to try and trace if it does it properly with your font. The code is in [TTFunk](https://github.com/prawnpdf/ttfunk) gem. I don't have other ideas at the moment.\n. @Siyfion I'm afraid, no. IIRC, it's not a removal of unused glyphs but rather import of the used ones. You may hack TTF to include all glyphs, or maybe even just use original font file instead of generating a subset. But I don't think there's a way to just turn subsetting off.\n. Technically, PDF has means to reference external resources (including via URL). But I'm not sure if this is applicable specifically to fonts. Check out [PDF Reference](https://www.adobe.com/content/dam/Adobe/en/devnet/acrobat/pdfs/pdf_reference_1-7.pdf).\n. This issue is fixed in TTFunk 1.5.1. I will close it now. Feel free to reopen in case it doesn't work for you and you have new details.\r\n\r\n@gettalong Thank you for the research you did on this issue.. You shouldn't use `number_pages` inside a repeater. It's a handy helper that goes over each page and puts a number on it. You should use it after your document has all pages generated.\r\n\r\nRepeater is a more generic solution. It makes sure your block of code is executed after all pages are generated. It can be used to number pages but also for anything else you want to do on each page.\r\n\r\nYou should use either `repeat :all` or `number_pages` but not `number_pages` inside of `repeat`.\r\n\r\nHope this helps.\r\n\r\n---\r\n\r\nI will close this issue now. Feel free to reopen if you have anything to add.. It would be nice to have that documented. I would welcome a PR. ;). Hi @vonchristian,\n\nI'm afraid there's no way to set 'auto' for a page height. PDF's main use case is a paged documents.\n\nAs a workaround I can suggest you setting a really big height for your page, laying out everything you want to wit in, recording the amount of space it took, manipulate page object to reflect the size. I can't give you the exact instructions for how to do that of top of my head. I just ccan tell you that you probably would need to get pretty deep into `PDF::Core` guts.\n. @gettalong Thanks! It turned out much simpler than I anticipated. \ud83d\ude05 \n. @vonchristian I will close this issue now. Feel free to reopen if you think this issue is not resolved for you.\n. Hello Dan,\n\nCould you please provide a minimal repro for your issue?\n. You are not supposed to manually clean up `Tempfile`s. They remove the file when they're GC'd. Alternatively, you can pass the tempfile itself to `image`. In that case no new IO will be created and you will be able to clean it up yourself if you wish so.\n. We will look into it. Meanwhile as a workaround you can create IO objects (`File.open` does that) and pass those to `image` to avoid locking your files. Or force GC right before you delete those files.\n. Thank you Eito. Your contribution is much appreciated.\n. Hello Richard,\n\nThank you for your contribution. It's much appreciated.\n\nWould you please provide specs for the change?\n\nThanks.\n. No, this is fine. We'll take care of it. Eventually\u2026\n\nOnce again, thank you for your contribution. It is much appreciated.\n. @systemed Thank you for your contribution. As others have pointed out this method is unused and has been removed in master. I will close this PR now.. Thank you @eitoball for your contribution. This issue has been solved in the master so I will close this PR now.. @eitoball This appears to be very similar to #993. Could you please confirm/refute it?. Indeed. Thank you for reminder.. @midpackrunner Thank you for your contribution!. Hello,\n\nPrawn doesn't support interlaced PNGs natively. We'll gladly accept a PR for this functionality.\n\nAlternatively, you can try [prawn-gmagick](https://github.com/packetmonkey/prawn-gmagick) or convert your images to non-interlaced PNGs in any other way.\n\nI will close this issue now. Feel free to reopen if you have anything to add.\n. @yob Anything to make people interested in reviewing it. ;)\n. @malagant Hello,\n\nCould you please provide sample code and a generated PDF for examination?\n. Hello @catalin88,\n\nWhat is the issue you're facing? What is the expected result and how actual is different?\n. @catalin88 Could you please provide a minimal (and complete) snippet of code that demonstrates your issue?\n\nThe one in the first message is incomplete.\n. Hi,\r\n\r\nYou do the same thing you do with other gems: you put it in your Gemfile.\r\n\r\n`Gemfile`:\r\n```ruby\r\ngem 'prawn'\r\n```\r\n\r\n---\r\nI will close this issue now as it's not directly related to Prawn but feel free to reopen if you have any additional information or your issue is not resolved.. Prawn is just a library. It doesn't require any special Rails integration. Because of that Prawn sort of supports every Rails version there ever was and will ever be.\r\n\r\nThere must be a reason why `require` 'prawn'` fails but I'm pretty sure it's not because of Prawn.\r\n\r\nIf you want us to help you please provide a reduced example that helps reproduce your issue. You may also want to read closer our [Contribution guidelines](https://github.com/prawnpdf/prawn#contributing).. Prawn does not treat monospace fonts in any special way. For prawn they just happen to have glyphs of the same widths. Prawn uses whatever glyph metrics are present in the font.\r\n\r\nLikewise, all PDF renderers I'm aware of would do exactly the same thing: they will use font metrics as is.\r\n\r\nTerminals are a bit of a special case. They assume that text is monospace and is layed out on a grid. iTerm, for instance, implements text grid. It renders individual glyphs in grid cells. It can render \"wide\" glyphs in double cells. But otherwise it's all about grid.\r\n\r\nAccording to official site, M<sup>+</sup> MN Type-1 is a \"combination of fixed-fullwidth M+ Type-1 for Japanese and fixed-halfwidth M+ MN Type-1 for alphabets\". So it appears logical that box drawing glyphs are fullwidth and twice as wide as regular latin character glyphs.\r\n\r\n---\r\n\r\nI will close this issue now as this is not a Prawn bug. Feel free to reopen when you have any additional information.. @stormsilver Thank you for your contribution.\r\n\r\nCould you please provide specs for the fixes so that these bugs would never come back?. Hello @anbublacky.\r\n\r\nCursor position gets reset after the block is executed so it will always be `0.0`. Try saving cursor position inside the `column_box` block.\r\n\r\n---\r\n\r\nI will close the issue now. Feel free to reopen.. Hi @imidsac,\r\n\r\nTry putting the `+` on line 74 on the previous line, right after the first array so that it looked like this:\r\n\r\n```ruby\r\n[] +\r\nanother_array\r\n```\r\n\r\n---\r\n\r\nYour issue is not connected to Prawn in any way. While I understand your frustration with the issue please refrain from submitting unrelated issues in the future. There are other places online for general language-related discussions.. The widths depend on the font you use. It is completely possible that the font provides unexpected metrics.\r\n\r\nFor example, here's what Prawn gives me for default font (\"Time New Roman\"):\r\n```ruby\r\nPrawn::Document.new do |pdf|\r\n  puts pdf.width_of(\"1.\") # => 10.008000000000001\r\n  puts pdf.width_of(\"\\u2022\") # => 4.2\r\nend\r\n```\r\n\r\nYou can use any font-editing software to inspect your font. For instance, FontForge is free and while it looks terrible it can help you in this task.\r\n\r\n---\r\n\r\nI will close this issue now. Feel free to reopen if you discover that it's Prawns fault. In that case please submit relevant font metrics or the font file itself if possible.. @jamis I rebased, squashed and merged this PR. I will close it now. Thank you for your contribution.. Thank you for your contribution.. Thank you for your contribution.. Why regular bounding box doesn't work for your use case?. `ColumnBox` exposes `left`. It's the left side of the current column. It's going to be 0 for the first column.\r\n\r\nWould that work for you?. Fixed in 2.2.1. Hello Maricris,\r\n\r\n`prawn-layout` is a very old gem. It's most likely not compatible with the latest Prawn gems. If you need a table try your luck with `prawn-table` gem.\r\n\r\n---\r\n\r\nI will close this issue now as it's related to an unsupported code. Feel free to reopen if you have anything to add to the discussion.. Thank you for contribution but I will decline this PR.\r\n\r\nThere are 2 reasons:\r\n1) Requires are moved around. I'd rather keep them where they are now.\r\n2) This is not a Prawn issue but user's set up. Also the proposed fix introduces other issues.\r\n\r\nLet me expand on the second one.\r\n\r\nRuby doesn't load the same file more than once with `require` (and `require_relative` for that matter). It check if the file is already loaded and skips it if it is. The check is done on a fully expanded file name. `require` and `require_relative` only differ in the way they expand the file name passed to them.\r\n\r\n`require` does it by looking in every directory listed in `$:` (also known as `$LOAD_PATH`). It basically iterates through load paths, adds the argument passed to it, adds an extension (\".rb\", or system's binary library extension such as \".dll\", \".so\", \".dylib\", etc.). When it find one it check if it's already loaded (it's in `$LOADED_FEATURES`) and loads if not.\r\n\r\n`require_relative` only differs in the way it looks for a file. It doesn't look in `$:`. It looks in the current directory. The check and load part is exactly the same.\r\n\r\nSo as you can see, if you have two copies of Prawn (or any other gem) they both are going to be loaded.\r\n\r\nNow, the new issue I mentioned is that with only `require` you can only load files from the gem that comes first in `$:`. So if you manage to load a file from the second instance, it will require files from the first one. This is potentially problematic when you have two different versions vendored.\r\n\r\nBoth approaches have drawbacks. But also both are pathological setups. Ruby (unlike, say, Javascript) has global namespace. It's rather problematic if not downright impossible to have two instances of the same gem loaded at the same time. You should never attempt to do that. If you're working on an app, port your code to a version that is supported by all of your deps. If you're writing a gem, put a proper depspec in your gemspec file.\r\n\r\n---\r\n\r\nOnce again, I really appreciate your time and contribution do not be discouraged by this one time. I will close this PR now. Feel free to reopen if you anything to add to discussion.. Thank you for your contribution.. Prawn doesn't support PDF embedding.\r\n\r\nPDF is not an image format. You can try externally converting your PDF into one of the supported image formats and including that instead.\r\n\r\n---\r\n\r\nI will close this issue now as this is expected behaviour and not a bug. If you feel like Prawn should support this please open a new issue with a feature request containing extended description. We will consider it or maybe you or someone else will submit a PR for it.. There's a [prawn-svg](https://rubygems.org/gems/prawn-svg) gem for embedding vector graphics.. @brendanthomas1  Thank you for your contribution. This PR will be merged a bit later when I have some time to work on Prawn.. Examples in manual are not supposed to be Copy-Paste snippets. They're illustrations of usage. They *are* executable examples but are only meant to run within the repo. We took not a very ergonomic approach but it mostly works well. It lets us be sure that the code in manual is valid and that output is exactly what Prawn would produce.\r\n\r\n> I have no idea whatsoever whatever it is the correct way to use characters beyond ASCII.\r\n\r\nFont files are not expected to provide any particular character set (including ASCII). Technically, font files can include glyphs that are not mapped to any particular character. They also can include no glyphs at all. It's not very useful but spec doesn't prohibit it. So you have to make sure the font you use is suitable for your text. I believe Prawn (or rather TTFunk) would let you know when text contain characters that font have no glyphs for.\r\n\r\n> It would be helpful to include instructions how one should obtain files necessary to enable UTF8 support.\r\n\r\nFonts in Prawn repo are not any special. They're just the ones that let us use them in testing. We are not certain if we can distribute them. So we don't. We intentionally do not package them because of this.\r\n\r\nYou can find a bunch of freely available fonts on the Internet. You should not use fonts from Prawn repo. Most of these fonts have newer versions available. The older versions in the repo are good enough for our purpose \u2014 testing.\r\n\r\nAs for instructions, I doubt their usefulness as they would be very vague: search the web and make sure the font has glyphs you need. That is about as detailed it can get. We don't want to endorse any specific places you can get fonts from. There are a plenty. Chose your favourite.\r\n\r\n---\r\n\r\nI will close this issue now. Feel free to reopen. . > Warnings that are not important should ideally not be shown.\r\n\r\nI wholeheartedly agree.\r\n\r\nThough, I shall repeat myself. Again. This is not a problem with Prawn. It's a result of a pathological environment.. Likewise it can be fixed elsewhere.. @Zyphrax Have you tried master yet? Does it fix this issue?. Hi Fabrizio,\r\n\r\nIt looks like this is not a Prawn issue. It appears the browser requests wrong content type from your app.. Glad I could help you. I will close this issue now. Feel free to reopen if it turns out to be a Prawn issue.. I'm on the fence about `require` vs `require_relative`. I really don't like moving requires up like this.. @fidothe This is actually a reasonable proposal. PDF/Core is supposed to be stand-alone. The problem is that it was extracted from Prawn and the extraction wasn't quite finished. You may still find that PDF/Core actually depends on Prawn. It's also is not used by any other piece of code other than Prawn itself, as far as I know.\r\n\r\nNow, while it's true that `require_relative` is a bit faster it wasn't the main reason to use. It was mostly convenience. You may notice that some parts of Prawn are relativly deeply nested. It resulted in a bit of a repetition. That is it.\r\n\r\nRegarding the whole problem. I'm convinced it's an environment (read \"bundler\") issue. There's some piece of code that adds both symlinked and real paths to `$:`. Moreover, it requires Prawn (and most likely all other gems, too) both before and after adding resolved (or symlinked \u2014 I don't know the order) paths. Basically, deps are loaded twice and that can lead to all sorts of problems much worse than warnings.\r\n\r\nPrawn doesn't do much crazy metaprogramming/init-run stuff. What happens is mostly just consts/methods overwrite. But in Ruby there are definitely much worse things that can go awry with double load.\r\n\r\nAnyway, what I'm trying to say is while we can fix the warnings in Prawn it won't fix the root cause.. Shyouhey (Ruby Core Team) acknowledges this is a bug in Ruby:\r\n\r\n> I believe the reported behaviour is a bug to be fixed.\r\n\r\nMore info on Ruby issue tracker: [issue 10222](https://bugs.ruby-lang.org/issues/10222). I'm afraid, you have to calculate mask size yourself. You'd need to find out image dimensions beforehand using some other library and calculate scaled size also you'd need to position the mask properly to align with the image. . Thank you for your contribution!. Please rebase his branch and let it go through CI.. Thanks. \ud83d\udc4d . @fidothe Can't you merge after approval?. @fidothe Weird. Please contact me over email.. Hello Francisco,\r\n\r\nMake your View PDF button open an iframe with a PDF in it.\r\n\r\n---\r\n\r\nI would like to pint out that this is not related to Prawn in any way. This is not a Prawn bug, nor it is a feature request. We have a mailing list for community discussions with a little less strict topic requirement. Fell free to use it the next time.. Rubygems have long ago abandoned idea of complete distribution. It has removed automatic test running upon gem installation. And it's not recommended to package tests any more. So you should not expect `rake test` to work in the installed gem directory. You need the repo for that. That said, we should package files required at runtime. We should package `.afm` files.. Hello Nathan,\r\n\r\nAs you correctly noted prawn-template is not supported any more. But it's the one responsible for *reading* the template, including all the transformation matrices. Prawn only supports *generation* of new documents or content. Prawn doesn't guess what transformation matrix it needs to apply to your text to make it appear right side up on the page. Unless you explicitly specify it, no matrix is applied. It's assumed you're keeping track of graphic state (and transformation matrices). Prawn also doesn't provide any tools for *modification* of documents. You may try using PDF::Core and manually modify objects but I can't tell if that would result in a well-formed document or a broken one.\r\n\r\nThat said, I don't think it's a bug in Prawn or prawn-template. You just happen to have a weird template. The text inserted withing upside down page appears upside down. This is absolutely reasonable. Since you believe it's a bug you may work on a patch but keep in mind that most of the time applied transformation matrix is intentional. Simply removing it or applying reverse matrix to all text won't be accepted.\r\n\r\n---\r\n\r\nThank you for your contribution. I will close this issue now. Feel free to reopen if you have any further feedback.. @mojavelinux Could you please fix the build?. Default Rake task is running both Rubocop checks and specs. Use bundler to be sure you're running all the right versions.\r\n\r\n```bash\r\nbundle exec rake\r\n```. You should never use a packaged gem for development. Packaged gem used to be a proper distribution mechanism at the very beginning of Ruby gems but since then it has changed (about 14 years ago when RubyForge came about). Nowadays it's actively discouraged to package supporting infrastructure. Packaged gem should only contain files that are required for proper execution and documentation generation.\r\n\r\nAs for your checkout you may have different version of Rubocop installed. Our config inherits from the default one so somewhat version-dependent.. That's interesting. Rubocop does indeed traverse tree to find config but it should not go all the way tho the `/`. I should check the Rubocop code\u2026. @mojavelinux Do you have a merge bit on this repo?. > merging is blocked unless there is one approved review\r\n\r\nIndeed. My bad. \ud83d\ude05 . @mojavelinux Yes, please.. Just in case, unless you explicitly put anything on a particular part of the page it won't be printed white. For example, if you put a black squire in the middle of a page you'll see it on white background on your screen, but if you print it on a red sheet of paper you'll get a black square on red background. In that sense all PDFs are transparent.\r\n\r\nAs Thomas said, background color is not defined in the PDF. Most renderers that output to screen assume white as it's the most common color of paper. If you want to use your document as vector graphics, most image editors (that I used) that understand PDF allow import with transparent background.. @jacksop Thank you for reporting this.\r\n\r\nSorry for the delay. I\u2019m a bit busy right now. \r\n\r\nA quick check in the code indeed reveals shortcomings of key construction. Hashing function is OK. We don\u2019t really need longer keys. The flaw is in the `pack`. Just switching to `join` is enough to eliminate the issue.\r\n\r\nAs I mentioned, I\u2019m a bit busy right now so I wouldn\u2019t be able to fix this fast. I\u2019d gladly accept a PR though. So if you wish to work on this feel free to take it. I can help with an advice.. @jacksop Yes. Try submitting a PR from your fork.. I think, gradient IDs changed with this PR. So the manual has changed as well. Make sure those are the only changes.. All changes to the manual seem to be expected.. Could you please add spec that checks for collision that used to be generated?. Adobe doesn't provide any of \"standard PDF fonts\" for free. There are a few  knock-offs on the internet but source of those fonts is unclear and licensing is questionable. Also they all are inferior to Adobe fonts (or paid fonts of other foundries).\r\n\r\nWe can drop special treatment for standard fonts and let users specify fonts they have installed on their system but I don't think it's beneficial for our users. It adds friction and requires more actions to produce a basic document. It somewhat heightens entry barrier.\r\n\r\n---\r\n\r\nI will close this issue now. Feel free to reopen if you have anything to move forward the conversation.. Is there a practical difference since PDF 1.7 is still backwards compatible and renderers are expected to handle default fonts.. This have been fixed in #408.\n. I'm not working on this one. Not in near future.\n. @westonganger `line` only creates an abstract graphical object (a line in this case) but you still have to apply some rendering operation to it (like stroke or fill).\n\n`stroke_line` does that for you. It's essentially a sequence like this:\n\n``` ruby\npdf.line from, to\npdf.stroke\n```\n. @westonganger PDF has a thing called graphics stream. It's essentially a list of commands a renderer must perform to get the image of your document. It's very granular and has a cumulative effect. A command that produces a line doesn't actually draws it. It just say \"a line from here to here\". You have to execute another command to make it actually visible. Like a \"stroke\" command.\n\nLine is a part of Path Construction family of commands. They all get accumulated until a Path Painting command is executed. So when you use `line` you only construct a path. Eventually something else can produce a painting command and that will also paint the lines.\n\nIf you want to know more you can read Graphics Objects section of the latest PDF spec.\n. AFAIK, it's as good as it gets without investing substantial effort into it. Mostly because of how PDF implements transparency. In PDF transparency is supported only via masking. So every transparent PNG has to be decomposed into two different images. Essentially, alpha channel has to be extracted into bw-image. ChunkyPNG has to decompress image to do that.\n\nThe only thing I can think of is checking if decompressed images are getting GC'd ASAP. Not that that would help to avoid high total peak mem usage but at least it can lover average mem usage over time.\n. @sandal What would happen if transparency is disabled but transparent PNG is added to the document?\n\nWould it result in an exception? This would basically break the functionality. Also it still requires at least some checks (meaning, leaking knowledge about PNG into a PDF lib).\n\nWould it simply ignore it and just pass the data into the document? It might be useless in most cases.\n\nPNG has two major advantages: lossless (images not crippled by JPEG compression or GIF reduced palettes) and alpha-channel.\n\nReducing alpha-channel support out of the box might be a major downside.\n\nIt would be hard to reduce CPU/mem usage without really processing PNG like it's done with JPGs. JPGs are basically inscribed inscribed in the PDF format. `JPXDecode` is the one of the supported stream filters. On the other hand PNGs have to be unpacked. It's impossible to just include PNG data as it's done with JPGs.\n\nIt's worth to try and optimize PNG parsing. I wouldn't turn off transparency. It breaks a major feature and still it doesn't eliminate the work required for PNG support at all.\n. @sandal Prawn's PNG support is very processor and memory intensive. Full stop.\n\nThe issue has little to do with the transparency as such. The fact that we have to decode PNGs for any support at all (even non-transparent ones) is why it's not as efficient as JPGs.\n. @sandal I'll try doing something over the weekend.\n. @MarkDBlackwell \n\n> Handling transparency in PNGs isn't such a big need, I would think. After all, as I understand it, the PDF format itself doesn't even include the concept of transparency. Is it true that we can draw anything atop any opaque PNGs we drew (or placed) earlier in a PDF? (Please correct me if I'm wrong.)\n\nTechnically that is not entirely correct. PDF has concept of blending. You can use soft masks (basically alpha-channels) to produce semi-transparent output. All the drawing operations would be preformed in the memory before actually being rendered (to a screen or a printer, or anything else actually). That includes blending too. These masks are the PDF's transparency concept. If you want to go into greater details you can refer to the section _7. Transparency_ of the _PDF Reference v1.7_.\n. > I believe the big problem here is that end users may give us a transparent PNG someday (or soon), intended for placement in a PDF, without any transparency truly, actually being desired. And how do we handle that? (It has already happened to me, out of their graphics shop.)\n\nThis is hardly ever true. It's really hard to predict how it would look like if you just strip alpha-channel. Here's an example:\n\n![key](https://f.cloud.github.com/assets/7405/1746535/027d8398-6443-11e3-9d92-dd41b449f410.png)\n\nThe black rectangle on the right is the same key without the transparency. Many graphic editors do really weird things to the transparent pixels. So it might look like this, or have ugly grey background, or might be full of Satan hailing where original image was transparent.\n\nI can believe that users intend the image have the image blended over some sane background (like white, for instance in case of printing on a white paper) but I don't believe that users really want just transparency removed. Note, that technically these two are not the same and blending in Prawn would be even slower than just extracting alpha-channel as it's done now.\n. @MarkDBlackwell > In other words, after human beings hand-convert the usual web PNG's transparent areas to white, using their visual judgment, everything should be fine whenever their desired PDF is printed on white paper. Don't you think so?\n\nThis is what I was talking about. It's blending transparent PNG over white background, not stripping down alpha-channel.\n\nI just reiterate that PDF doesn't have native PNG support. That means, that Prawn has to decode it and convert to something PDF renderer can understand. That is true for all PNGs, not only the transparent ones.\n. @luckydev @alexdowad Could you please provide the images you've observed abnormal CPU/mem usage with?\n. Alpha decomposition seem to be extremely expensive.\n\nHere's a profile of opaque PNG image:\n\n```\nThread 1: total running time: 0.042860147s\n\n  %   cumulative   self                self     total\n time   seconds   seconds      calls  ms/call  ms/call  name\n------------------------------------------------------------\n  10.50    0.02      0.01         81     0.07     0.25  Prawn::Core.PdfObject\n   7.57    0.00      0.00          1     4.31     4.31  GC.collect_young\n   5.63    0.01      0.00          2     1.60     3.93  Rubinius::Sprinter::Builder#parse\n   5.49    0.00      0.00        288     0.01     0.01  Array#include?\n   5.43    0.01      0.00         47     0.07     0.14  Array#map\n   4.98    0.01      0.00          1     2.84     5.24  Prawn::Images#build_image_object\n   4.78    0.00      0.00          1     2.72     2.72  Prawn::Document#start_new_page\n   4.63    0.00      0.00          4     0.66     0.66  Rubinius::Sprinter::Builder::FloatAtom#bytecode\n   4.30    0.00      0.00        288     0.01     0.02  Prawn::Core::PdfObject<93> {}\n   3.88    0.00      0.00         19     0.12     0.12  String#length\n   3.78    0.00      0.00         47     0.05     0.05  Array::join<849> {}\n   3.44    0.01      0.00          3     0.65     2.09  Encoding::Converter::TranscodingPath.get_converters\n   2.67    0.01      0.00          6     0.25     1.13  Encoding::Converter::TranscodingPath.[]\n   2.64    0.02      0.00         32     0.05     0.62  Prawn::Core::PdfObject<102> {}\n   2.50    0.00      0.00         12     0.12     0.12  Rubinius::Tuple#each\n   2.48    0.03      0.00         25     0.06     1.02  Array#each\n   2.45    0.00      0.00         50     0.03     0.05  Thread.detect_recursion\n   2.09    0.00      0.00         47     0.03     0.06  Array#join\n   2.05    0.02      0.00         10     0.12     1.99  Hash#each\n   2.02    0.01      0.00          2     0.58     4.64  Module#dynamic_method\n   1.99    0.00      0.00          1     1.14     1.14  Prawn::Document::Internals#render_trailer\n   1.61    0.02      0.00          1     0.92    17.64  Prawn::Document#initialize\n   1.45    0.02      0.00          1     0.83    24.58  Prawn::Document#render\n   1.11    0.00      0.00         15     0.04     0.19  StringIO#read\n   1.06    0.01      0.00          1     0.60     8.61  Prawn::Images#embed_image\n   1.05    0.01      0.00          2     0.30     3.95  String#encode!\n   0.87    0.02      0.00          6     0.08     3.27  Prawn::Core::Reference#object\n   0.80    0.00      0.00         14     0.03     0.22  Rubinius::Sprinter::Builder::parse<1190> {}\n   0.78    0.01      0.00          7     0.06     1.44  String#%\n   0.69    0.02      0.00          6     0.07     3.34  Prawn::Core::DocumentState::render_body<70> {}\n   0.58    0.01      0.00          2     0.16     3.65  Encoding::Converter#initialize\n   0.58    0.01      0.00          7     0.05     1.38  Rubinius::Sprinter.get\n   0.52    0.00      0.00         12     0.02     0.15  MatchData#to_a\n   0.43    0.01      0.00          2     0.12     4.05  Rubinius::Sprinter::Builder#build\n   0.42    0.00      0.00         12     0.02     0.13  MatchData#captures\n   0.40    0.01      0.00          2     0.11     4.07  Prawn::Core.utf8_to_utf16\n   0.29    0.00      0.00         12     0.01     0.15  Rubinius::Type.coerce_to_array\n   0.29    0.02      0.00         10     0.02     1.78  Class#new\n   0.27    0.01      0.00          4     0.04     1.44  Encoding::Converter::initialize<154> {}\n   0.24    0.00      0.00          6     0.02     0.37  StringIO#printf\n   0.24    0.02      0.00         12     0.01     1.87  Prawn::Core::ObjectStore::each<73> {}\n   0.15    0.00      0.00         10     0.01     0.12  Prawn::Core::PdfObject<79> {}\n   0.15    0.00      0.00          6     0.01     0.39  Prawn::Document::Internals::render_xref<150> {}\n   0.12    0.01      0.00          1     0.07    13.92  Prawn::Images#image\n   0.12    0.00      0.00          1     0.07     2.50  Prawn::Document::Internals#render_xref\n\n10 methods omitted\n\n55 methods called a total of 1,133 times\n```\n\nAnd here's one with transparent PNG:\n\n```\nThread 1: total running time: 72.057737892s\n\n  %   cumulative   self                self     total\n time   seconds   seconds      calls  ms/call  ms/call  name\n------------------------------------------------------------\n  24.90   20.82     17.94   10678380     0.00     0.00  Array#[]\n  22.10   35.36     15.93    1222400     0.01     0.03  Prawn::Images::PNG::unfilter_image_data<306> {}\n  11.74   64.50      8.46       1730     4.89    37.28  Array#each\n   3.95    7.48      2.85          2  1424.13  3741.28  String#each_byte\n   3.42    3.18      2.47    6242171     0.00     0.00  Array#<<\n   3.00    3.81      2.16    1920000     0.00     0.00  Enumerable::each_slice<400> {}\n   2.79   53.70      2.01    1920600     0.00     0.03  Prawn::Images::PNG::unfilter_image_data<274> {}\n   2.41    6.93      1.74     480000     0.00     0.01  Prawn::Images::PNG::unfilter_image_data<350> {}\n   2.27    1.88      1.63    3667200     0.00     0.00  Numeric#abs\n   2.22   41.27      1.60    1609600     0.00     0.03  Enumerable::each_with_index<200> {}\n   1.75    2.72      1.26     185600     0.01     0.01  Prawn::Images::PNG::unfilter_image_data<297> {}\n   1.68    2.19      1.21    1920600     0.00     0.00  Enumerable::to_a<150> {}\n   1.61    4.39      1.16    1920600     0.00     0.00  Enumerable::Enumerator::each_with_block<70> {}\n   1.58    1.75      1.14   27541261     0.00     0.00  Fixnum#<\n   1.48    1.60      1.07   24124934     0.00     0.00  Fixnum#+\n   1.47    1.31      1.06     960637     0.00     0.00  String#<<\n   1.47    1.22      1.06    2444800     0.00     0.00  Fixnum#zero?\n   1.37    3.20      0.99    1920600     0.00     0.00  Enumerable::Enumerator::each<60> {}\n   1.09    1.13      0.79   15652806     0.00     0.00  Rubinius::Tuple#at\n   0.82    0.61      0.59     960343     0.00     0.00  Array#pack\n   0.80    0.72      0.58    6242171     0.00     0.00  Array#set_index\n   0.66    1.11      0.48     112000     0.00     0.01  Prawn::Images::PNG::unfilter_image_data<291> {}\n   0.66    0.71      0.48   10678512     0.00     0.00  Fixnum#>=\n   0.63    0.68      0.45   10348190     0.00     0.00  Fixnum#-\n   0.63    0.69      0.45   10678383     0.00     0.00  Fixnum.===\n   0.52    0.38      0.38        383     0.99     0.99  GC.collect_young\n   0.42    0.53      0.30     480000     0.00     0.00  Prawn::Images::PNG::unfilter_image_data<338> {}\n   0.41    0.39      0.30    4350472     0.00     0.00  Fixnum#%\n   0.29    0.31      0.21    4666547     0.00     0.00  Fixnum#==\n   0.29    0.41      0.21      89600     0.00     0.00  Prawn::Images::PNG::unfilter_image_data<285> {}\n   0.24    0.19      0.17     960000     0.00     0.00  Array#new_range\n   0.18    0.15      0.13     960637     0.00     0.00  String#append\n   0.16    0.17      0.12    2472984     0.00     0.00  Fixnum#<=\n   0.15    0.15      0.11    1609840     0.00     0.00  Array#[]=\n   0.15    0.15      0.11    1705600     0.00     0.00  Integer#floor\n   0.14    0.14      0.10    1705603     0.00     0.00  Fixnum#/\n   0.14    0.14      0.10    1920600     0.00     0.00  Rubinius::ByteArray#get_byte\n   0.07    0.07      0.05     961043     0.00     0.00  Kernel#kind_of?\n   0.07    0.07      0.05     960752     0.00     0.00  Rubinius::Type.infect\n   0.06    0.04      0.04          2    21.75    21.75  Zlib::Deflate.deflate\n   0.06    0.06      0.04     960848     0.00     0.00  Fixnum#>\n   0.02    0.03      0.02     391382     0.00     0.00  Fixnum#-@\n   0.02    0.02      0.02          1    16.74    16.74  Zlib::Inflate.inflate\n   0.01    6.74      0.01        600     0.01    11.23  Enumerable#each_slice\n   0.01    0.01      0.01        657     0.01     0.01  Array#shift\n\n68 methods omitted\n\n113 methods called a total of 167,634,034 times\n```\n\nThe code:\n\n``` ruby\ndoc = Prawn::Document.new do\n  image png # png = StringIO.new(File.read('image.png'))\nend\ndoc.render\n```\n\nRubinius 2.2.1, Prawn master\n\nThe problem seem to be somewhere in `Prawn::Images::PNG.unfilter_image_data`. I'm trying to pinpoint the exact problem and to find how to fix it.\n. @sandal Sure. Though, I find it highly unlikely that 5 orders of magnitude in method calls number is solely an rbx issue.\n. @sandal I'm currently looking into performance issues.\n. Also please check the output for correctness. I've tried a few images and for all the output was correct.\n\nWhile theory behind the method seem to be pretty solid, I doubt it was intended by the PNG spec authors.\n. Generally, Prawn tries to do as little manipulations to images as possible. Though, there's one exception. When you add a 16bit PNG to a document its alpha channel gets downsampled to 8bits.\n\nThe comment states that Adobe Reader can't handle 16bit PNG channels. But in the code only alpha channel is downsampled.\n\nI tried to use 16bit data for both color and alpha channels and it seem to work just fine in all renderers I have access to (Apple Preview, PDF.js, Adobe Acrobat Pro X, Adobe Reader XI).\n\nCan you please verify that 16bit images are rendered correctly on all renderes that we support (BTW, is there a list?).\n [16bit alpha PDF](http://cl.ly/0r0x0L3J310s/download/16bit-alpha.pdf)\n\nIt should look like this:\n![screen shot 2013-12-17 at 4 58 06 pm](https://f.cloud.github.com/assets/7405/1764758/b9bc8a6e-672b-11e3-94b5-c20c0df95b5e.png)\n. Probably some versions should be specified for those renderers.\n\nSpecifically, in this case the comment was written when the latest version of Adobe Reader was 9. Do we target only Adobe Reader XI now? It's been out for over a year now.\n. I'm glad we could help you Benjamin.\n\n## \n\nRegards,\nAlexander\n. @wpiekutowski I will add your name as the original implementator of gradients in Prawn.\n\nI can add fill/stroke_gradient methods back with deprecation notice and make them work in compatible way. I can't see where hash options can fit here though. All arguments are mandatory and there's no point making it more complicated than needed with hashes.\n\nWhat do you think new API might look like?\n. @bradediger please don't merge this pull request yet. I'll do some changes over the weekend. I will add @wpiekutowski's name to the file. Also I'm trying to come up with more Prawn-ish API (i.e. without additional classes as currently this is the only place you can see them in Prawn API).\n. Are there any other concerns to be addressed or this pull request is OK to be merged?\n. `make_soft_mask` is just a helper for specs. The API is `soft_mask`.\n. I've removed monkey patch for pdf-inspector. Pull request for it in the queue. But now specs are failing. I didn't mess with Gemfile. I assume, new version of pdf-inspector needs to be released to fix this failures. Is this acceptable? Advice what to do if not.\n. @backspace Your code produces seemingly blank document because your mask polygon doesn't intersect your rectangle. Basically, the rectangle is drawn on the area that is outside the mask.\n\nYou can try the following code:\n\n``` ruby\nPrawn::Document.generate('soft_mask.pdf') do |pdf| \n  pdf.save_graphics_state do\n    pdf.soft_mask do\n      pdf.fill_color \"444444\"\n      pdf.fill_polygon [0, 40], [60, 10], [120, 40], [60, 68]\n    end\n    pdf.fill_color '000000'\n    pdf.fill_rectangle [0, 50], 120, 68\n  end\nend\n```\n\nIt will produce Ruby:\n![Screen Shot 2013-02-16 at 11 48 30 PM](https://f.cloud.github.com/assets/7405/164048/f3f1871a-7871-11e2-8759-45380a5854e1.png)\n\nSoft masks are a way to manipulate alpha channel in PDF. PDF doesn't treat alpha channel as a part of a color. Instead you have to think in masks. To achieve any kind of transparency in PDF you need to draw in inside `soft_mask` block. It's converted to greyscale and luminocity of resulting image is treated as an alpha channel for everything you draw after that. Specifically that's why you have to wrap it all in `save_graphic_state` block. In PDF mask is a part of graphic state. So to be able to isolate effect of soft mask you need separate graphic state.\n. Are there any concerns to be addressed or is it OK to be merged? I prefer this one over #400 but I'm OK with #400 too functionality wise.\n. You wanted manual page for gradients. Would you also like one for soft masks?\n. Yes, I've seen. While first breakage (on 34039d1) is the real one. The second one doesn't seem to be directly related. Also I can't reproduce it locally, nor I had it before pushing changes to gh. I'm still trying to find the cause or a way to reproduce it.\n\nIs there a way to rerun build on Travis?\n. @bradediger agree. This is definitely one of the less used features of PDF. I need it for a small project of my own. So I though I could invest a bit of time to help the project and share what I'd done anyway. Granted I don't need all of the shading types but for completeness sake I still implemented all of them. Well, except of Type 1 (function-based shadings). I'm considering implementing that as well. But that's probably after stream filters.\n. This definitely can be done as an extension. Just let me know if this is going to be merged or not.\n. @bradediger Well, as already noted, this is self contained feature. It has almost 100% test coverage. And spec isn't going to change anytime soon. I don't think there will be any noticeable support load. Of course, unless any major refactoring is planned.\n\nSpec itself is not very hard to read and implement. Maybe a bit hard to understand what exactly it does as it's a bit loaded with math. But this math is not related to the PDF itself but rather to the implementation of renderers. Users need to understand this math at least to some extent to use the shadings efficiently but this math is not important to support this feature in Prawn.\n. This is released as a [prawn-shadings](https://rubygems.org/gems/prawn-shadings/) gem.\n. This should fix #434 as well as some other potential problems.\n. @yob Any other comments on this pull request?\n. @sandal I assume it'd be hard to extract only bug fixes from current master. Also by the time of 1.1 release 1.8 will probably be long EOLed.\n. Releasing the same codebase as two different versions is confusing. More so differentiating 0.13 and 1.0 just by _promise_ of 1.8 compatibility. Especially while 1.0 has 1.8 specific code in it.\n. @sandal How about releasing 1.0 as it is now and the next version is going to be not 1.1 but 2.0? We can drop 1.8 compatibility in 2.0 and have semver. At the same time announce that 1.0 is bug fixes only branch and all new features are going only into 2.0. There's no requirement that there must be few years between major versions. :wink:\n\nAlso besides 1.8 support there are a few deprecations that are going to be removed in 1.1 (according to the message). Is it semantic versioning?\n. @sandal I just wanted to know official position of Prawn team regarding 1.8 support. Specifically to know how much effort should I (and everyone else) put into 1.8 support while fixing bugs or adding new features.\n. It works fine on rbx-2.2.3. And I suspect it works on 2.1 and probably even on 2.0 final, too.\n. @ferrio mind extracting minimal failing test case? Does it fail only in Rails?\n. @ferrio Thanks, I'll take a look.\n. @bradediger according to git new streams have been merged after rc2 release. Is gem tagged correctly in git?\n. Well, this is weird\u2026 This bug is definitely in new streams.\n\n@ferrio from the backtrace it looks like you're using released 1.0.0.rc2. But the bug is in the master. Can you please clarify which version you actually use?\n. @bradediger @yob Could someone please close this issue?\n. @brunomeira Could you please clarify what version of gem you use? Also a minimal failing test case or at least a backtrace would be helpful.\n. @boazsegev Could you please provide full backtrace? Also a minimal test case to reproduce this bug would be helpful.\n. @orangethunder You may want to read #447.\n. It's not distributed under the same conditions as Ruby. It uses similar licensing scheme. Please refer to the [LICENSE](https://github.com/prawnpdf/prawn/blob/master/LICENSE) file for exact terms.\n. ``` ruby\nd.text %(<link href=\"http://github.com/\">GitHub</link>), :inline_format => true\n```\n. No, you're not missing anything. Bounding boxes in Prawn work more like coordinate transformation, rather than an actual container. It doesn't cut anything.\n\nIf you want content to be cropped you should take a look at a `soft_mask`. Also it still will move past bottom, so you probably want to put your content into a `float`.\n. @sandal Any details on this one?\n. There are a lot of hashes with symbol keys. Should I change those to 1.9 syntax?\n. Encodings are one of the biggest changes between 1.8 and 1.9. I see a lot of `force_encoding` calls. I'm not sure if they're used correctly in most cases. Do you have any background on that? \n. I'm not sure what I'm doing wrong. The test file renders just fine in Preview, Acrobat Pro, and Firefox.\n. @nhimbkno1 You really should use markup for code. Otherwise it gets garbled and it's hard to reason about it in your comments. \n. @nhimbkno1 Indeed, the output file is broken and the template is (mostly) fine. I'll look into this later today.\n\nThank you for reporting the issue and uploading the files.\n. @nhimbkno1 Sorry, was short on time lately. I'm planning to investigate it tomorrow but I won't give you false hope. It's likely there's no simple fix/workaround for your issue.\n. @nhimbkno1 I'm sorry, but I can't reproduce the problem.\nI tried rbx-2.2.0, MRI 2.0.0 and MRI 1.9.3 with both Prawn 1.0.0.rc2 and current master. Every single time I got good output.\n\nScript:\n\n``` ruby\n#!/usr/buin/env ruby\nrequire 'prawn'\n\npdf = Prawn::Document.new(template: 'error_before.pdf', margin: [0, 0, 0, 0])\npdf.text_box \"test\", at: [10, pdf.bounds.top - 100], size: 20, width: 200, height: 400\nFile.write 'test.pdf', pdf.render\n```\n\nCould you you please provide a simple script that would reproduce the problem? Also tell a bit about your environment.\n\n@sandal Can you please tell what exactly was messed up in the PDF you've got? Or better upload it somewhere?\n. @nhimbkno1 Still works.\n\nPlease try the script I've posted earlier on your machine and see if it works for you.\n. @nhimbkno1 What version of Ruby do you use?\n. @nhimbkno1 I tried the one in the original report. This one works too.\nRuby 1.9.3, Rails 3.2.13, Prawn 1.0.0.rc2. Rails app uses UTF-8 as default encoding. I don't use any gems for encoding conversions. `pdf.render` produces a string with ASCII-8BIT encoding and I'm pretty sure that in this case it's a Rails problem.\n\nCould you please create a new sample Rails app to help me reproduce the problem? Push it to Github so that I could clone it.\n. @sandal That was my fault. The original code uses `send_data`.\n. OK. I've got your code.\n\nNo encoding errors.\n\nGenerated file isn't rendered correctly in Firefox but Preview seem to be more tolerant.\n\n![screen shot 2013-11-26 at 5 23 06 pm](https://f.cloud.github.com/assets/7405/1623060/d19c88b0-56ae-11e3-81b3-e4a0ce2ca7aa.png)\n\nIt looks like PDF.js (used in Firefox for rendering PDF files) doesn't like multiple content streams. I'm looking into it.\n. @nhimbkno1 I'm using your code.\n\nWhat exactly is the error you get? Is it an error message in your PDF reader or an exception in your application?\n\nIt looks like you don't have any errors in your code (no exceptions and backtraces) but rather you're not satisfied with the look of your document in PDF reader. BTW, what do you use to view PDFs?\n. PDF.js is far from complete. It can not render the original template file too. At least on Nightly (`28.0a1 (2013-11-24)`) it fails to render first page of unmodified template. The other two pages look fine.\n\nThe template itself is not the example of a top notch PDF file, either. I will investigate why PDF.js doesn't like the template itself. There's clearly an issue with fonts. Though, I'm not sure why only first page actually fails to be rendered. Other pages seem to look fine on my machine.\n\n![http---lvh me-3000-2](https://f.cloud.github.com/assets/7405/1624345/61633672-56c0-11e3-966a-7c8f749f8d06.png)\n![http---lvh me-3000-3](https://f.cloud.github.com/assets/7405/1624347/66fd1648-56c0-11e3-8f9c-5a1f0acbee3f.png)\n. @nhimbkno1 I use 12.pdf from your sample rails app.\n\nThanks for the link with other templates.\n. @sandal I've found the problem.\n\nTemplate (12.pdf) has a global Resources dictionary with all fonts. It's set on the Page Tree Node. Pages have no Resource dictionaries and so inherit global resources. Once Prawn add some text it adds new font to the page Resources dictionary and thus overrides the global one. After that renderer can not find fonts used on the page.\n\n@nhimbkno1 While technically your template is correct (as far as I can tell), Prawn can not handle it correctly. The \"easiest\" workaround I see right now is to write a script to recreate the template with Prawn. Sorry, but this can not be fixed in Prawn in a timely manner.\n. @luongtran I suggest not converting (taking existing files and modifying them) but rather recreating your templates with Prawn. That means writing scripts that generate your templates only using Prawn.\n\nPDF is a complex format. Currently Prawn doesn't implement the spec completely. For example, in this case Prawn has no idea that Resources can be inherited. It just sees that the page have no resources dictionary and create one when it needs one. Prawn has no clue that it should check first if there are any inherited resources.\n. Here's a diagram of the PDF after it's been processed by Prawn. Specifically, 12.pdf template after adding some text to the first page.\n\n![pdf-12-diagram](https://f.cloud.github.com/assets/7405/1631254/38f33700-5760-11e3-8c8c-a7e45d6abeba.png)\n\n> Now, i think the problem at the Prawn is when it see the new font that not define in template it will create new resource at the top page, right?\n\nThis is exactly what happens. But, it also adds a `Resources` dictionary to the page because there's none in the template. Prawn assumes that page needs one at all times and it doesn't know that resources can be inherited from the Page Tree Node as in the case of 12.pdf file.\n\n> So why we dont define the resource at every pages?\n\nIn this case it's exactly the opposite. It will break every single page because it will override inherited resources. The correct way to do it would be to duplicate Page Tree Node resources into every page but Prawn is not capable of doing that automatically. You can write some code to do that for this specific case but something universally useful and robust would be extremely hard to build if not outright impossible.\n\n> The last node is defined at the top file and the first node is defined at the bottom. Does it problem with Prawn? \n\nNo, it's not a problem. PDF is basically is a big tree structure (a graph actually) and Prawn is capable of working with it on the lowest level.\n. There are a few command line tools that might be useful for you. The more popular ones have Ruby wrappers. For example [PDFKit](https://rubygems.org/gems/pdfkit). Though, I'm not sure if any of them would be a solution for your specific case.\n. @luongtran Technically, once Prawn loads the template document you should have access to all objects in the PDF. You should be able to access and manipulate them directly.\n\nThough, keep in mind that Prawn will create Resources dictionary on pages with the first attempt to add text to that page and it doesn't depend on what font you use for that operation. So the way to go for you in this situation would be first manually copy Resources dictionary from Page Tree Node to every page you want to modify and only then add the text.\n. @luongtran That is the best you can do right now.\n. I'm not sure if this is correct behavior.\n- All pages in the document are meant to be accessible through Page Tree. That means, that reader should be able to walk the tree starting at the root node and eventually get to the page node itself.\n- PDF can contain deleted objects and they should be unchanged. This means that there might be page objects that reference page tree nodes in their Parent field but are not referenced back from that page tree node.\n\nI'm not sure if Prawn loads deleted objects. I need some time to check that but I can't promise anything in coming days.\n\nAlso code looks a bit too defensive. Too much checks for my taste.\n. @sandal I'm against it until someone disproves my last comment.\n. @pandar1 First of all you're mostly talking about MRI. MRI with threaded Rack adapter will result in a sort of behavior you're talking about. For the sake of CPU saturation you should use forking adapter (like Unicorn). On the other hand truly threaded implementations (JRuby, rbx) won't suffer of heavy threads. As @bradediger mentioned, all modern OSes handle thread switching effectively.\n\nArtificially causing thread switch in the code that is not supposed to manage threads is not a good idea. If your requests timeout because of Prawn, you definitely don't want to cause your handlers to give up their time. This thread switch may be the difference between successfully finished pdf generation and the one that had 1ms to few to finish its job.\n\nYou want your computation to finish as fast as possible and for that you want your CPU to be 100% loaded.\nYou can try to paralellize your tasks if you have facilities for that (i.e. multiple cores). But I think, it's not worth to introduce paralellizm into Prawn.\n. This is not how PDF really works.\n\nYou can put in however big image (even 300 DPI ones) and set actual dimensions of it. Renderer (printer) would figure out how to scale it.\n. @sandal jruby 1.7.8 (1.9.3p392) 2013-11-14 0ce429e on Java HotSpot(TM) 64-Bit Server VM 1.6.0_65-b14-462-11M4609 [darwin-x86_64]\n. JRuby 1.7.8 seem to be broken.\n\nJRuby 1.7.9 is much faster. On the other hand, 1.7.9 is inconsistent between runs on memory side. Sometimes it's 230MB and sometimes it's over 400MB. It's hard to get any meaningful improvement (or otherwise) ratios.\n. @yob Yes, I just watch Activity Monitor. Simply to have some consistent numbers between implementations.\n\nThough, it might be useful to have some better numbers to measure the changes. Can anybody share a short HOWTO on how to measure actually used memory on JVM?\n\nIt certainly looks like what you've described. Memory usage doesn't fluctuate much on JRuby.\n. @sandal I consider this pull request to be completed. Please review.\n. 1. \"Make revisions\" means commit to the branch? Otherwise I don't see any advantages. On my fork I can safely rewrite history to organize commits nicely. On the upstream repo that is a bit dangerous.\n2. Apart from supporting 16bit alpha channels it's the same. It may break some tests on user projects if they are trying to do string comparisons of rendered documents as it was done in repo. Otherwise it should be safe.\n. Got it. Will use topic branches.\n\nThanks for merging.\n. That is correct.\n\nTechnically, those gems should be in the gemspec but currently it's impossible to specify platform specific deps ther.\n. The most prominent 1.8 remnants are completely removed. As I've mentioned elsewhere usage of encodings sometime is questionable and should be reviewed separately.\n\nI deem this one complete. Please review.\n. Wouldn't it be better to contribute a fix to AFM gem?\n. This is understandable.\n\nI see that @yob contributed to [the AFM gem](https://github.com/halfbyte/afm). I think we have solid chance for cooperation.\n\nWould you consider reverting back to using AFM gem if it gets fixed or do you prefer sticking with our own code?\n. @sandal I have no idea. Apparently all those reads somehow produce a lot of objects. Also it looks like reads way slower than seeks.\n\nIt also might be some fluke but I'm reluctant to wait for it another 3 hours.\n\nAlso the effect is expected to be much less prominent on a usual image of a few hundreds of KBs. I used rather big image for this benchmark.\n. @MarkDBlackwell Could you please check latest release? It's much less processor intensive now.\n. Is it something custom or is there a name for it?\n. So maybe just \"PRAWN\" would be more accurate?\n. Looks like gh notified only linked contributors\u2026\n\n@proactive @pwnall @costan @ratbeard @riopro @rivsc @rubyredrick @scoopr @scpike @seebs @sgwanlee @shanebonham @sigmike @sos4nt @strzibny @tim-vandecasteele @toretore @torgoton @trym @vizjerai @vongrippen @weimeng @wesgarrison @whoops @willbryant @wpiekutowski @yob\n. @cbartlett We'll never know until we try.\nYou've contributed to Prawn over 5 years ago. Your commits are not even connected to your GitHub account and yet you're here.\n. @cbartlett New license will apply only for new versions of the code.\n\nSay, 0.16\\* will be released under MIT license. Everyone who uses 0.15.x\\* or older would use it under GPL2, GPL3 or RUBY license.\n\nThe change is no big deal for most users as the new license even more permissive than the old one. Only the ones who are Stallman would not be able to upgrade to 0.16*.\n\n\\* All versions mentioned are fictitious. Any resemblance of real version in this text are purely coincidental. \n. @cs Just to make it clear. Are you and @proactive the same person?\n. @cs Thank you.\n. @sandal I think, you still can push to the branch and merge new commits.\n. Extension point will be in another pull-request.\n. I might have misunderstood the option but\u2026 I think the idea was to ensure reuse of mask dictionaries.\n. @sandal It can be done differently and I think it is actually implemented via mask registry.\n\nIn the worst case resulting files are going to have some duplicate objects and consequently a bit larger files.\n. `ASCII-8BIT` is by no means backwards compatible with `UTF-8`. `\"\\xFF\"` is a valid string in `ASCII-8BIT` but is not in `UTF-8`.\n\nAll the images operations should be done with bytes, not character. We have to carefully inspect all the read/write operation before defaulting to multi-byte operations.\n. @nathansamson It's true that Ruby 2.x defaults to UTF-8. Though, this patch changes a few explicit `ASCII-8BIT` to `UTF-8`. That might result in some problems.\n. @sandal I think, magic comments also set external encoding. And we want to avoid that.\n. @sandal You're right. It's messed up. One more reason for inspection.\n. Hi Johnny,\r\n\r\nYes, this issue is still open. Yes, you can work on it. I would appreciate if you submit a proposal first in case a substantial change is required before you issue a PR. Please also note that I'm a bit short on free time at the moment and may not respond in a timely manner. Still, others may give you valuable feedback.. No problem. I'm glad you've found a solution that works for you.. @andreashappe Could you please try and build a minimal example to demonstrate the issue?\n. @andreashappe I didn't ask for your template. I asked for a minimal example demonstrating the problem.\n\nTwo varying PDF can be useful. My email is in the profile.\n\nCall order definitely will produce different documents. There's no doubt about that and there's little we can do to fix that in the Prawn itself. On the other hand different output for the same code probably should produce the same output. This is your case, right? If so, we can try and fix it. Not that this a spec violation but I see how it can help people like you to test produced documents more easily.\n\nAs for how to reproduce it. If you use RSpec try running running your tests with different seeds and see if you can find one seed that makes your test pass and another one that makes it fail.\n\n```\nrspec --seed 1 spec/pdf_spec.rb\n```\n. @sandal The issue comes from TTFunk. It uses class var to generate unique subset font names. Apparently this will produce different results depending on the order of spec execution or to be more precise the order of generating font subsets. Take a look at [the code](https://github.com/prawnpdf/ttfunk/blob/master/lib/ttfunk/table/name.rb#L50).\n\nWe probably can fix this but I'm not sure about that yet and I'm not sure about how much effort it will require. I'm not very familiar with TTFunk internals. Do we want to move forward wit this?\n. @mfly @edborden @Siyfion @danielgrippi @sublimecoder @kriztynna Sorry for addressing so many people but I'm curious what is your use case?\n\nI didn't even think that palette transparency in PNG is used so widely. I though it's just one of those rare edge cases that one or two users stumble upon but apparently many people use those palette PNGs all the time. So could you please share your use case and why you use palette transparency instead of, say, 8-bit alpha channel?\n. @sublimecoder This is interesting. We used to have incomplete support for palette transparency. It only keeps color data but completely loses transparency. It won't complain but the output would be incorrect.\n. @sublimecoder Quick code inspection seem to show that only color would be kept and transparency data would simply be ignored. \n\nIn pseudo code it would look like the following transformation:\n\n``` ruby\ndef pixel_color(r, g, b, a)\n  [r, g, b, 1.0]\nend\n```\n. @giuseb Could you please rebase this PR on master?. @giuseb The pages don't look good. Could you please take a look?\r\n\r\n![page-1](https://cloud.githubusercontent.com/assets/7405/22903140/4894fc42-f240-11e6-94f3-745890659a00.png)\r\n![page-2](https://cloud.githubusercontent.com/assets/7405/22903150/5271dc62-f240-11e6-9cdd-1c8850ad8161.png)\r\n. This a new addition we've been working for a while. Manual reviews historically have been a huge time sink during releases. But not every release actually had manual changes in them. This failure lets us know that we need to review the manual.\r\n\r\nMake sure the manual looks as expected and change the hashes in the failing spec. Also I personally would appreciate if you post screenshots of the changed pages.. Looks good.. I'll handle that.\r\n\r\nThank you for your contribution.. @giuseb I've rebased and merged this PR. I'll close this PR now. Feel free to reopen.. @tomprats If you're steal interested, please address my comment and rebase your branch on master. Thank you.\n. @tomprats Than you for your contribution. I've rebased this PR on master and merged. GitHub didn't pick it up so I will close it now.. It doesn't exist because there's no universal points to pixels conversion. It very much depends on the pixel density of the target medium.\n\nYour code works for CSS pixels. But those are not real pixels. It would be confusing to introduce a unit that has little relevance both to its name and its real counterpart outside of CSS.\n. \"a visible single line\" is still not quite a physical pixel on the screen. Ref: [A Pixel Identity Crisis](http://alistapart.com/article/a-pixel-identity-crisis)\n. @johnnyshields If you're still interested in getting this merge could you please rebase this PR on master?. Could you please clean up history a bit and rebase on master?. The resulting commit message is ugly.. Thank you for your contribution!. @wingfire Thank you for your contribution.\r\n\r\nThis issue has been addressed in master. I will close this PR now. Feel free to reopen if you feel this PR is still relevant.. @mogest Is my understanding correct that the problem is here: https://github.com/prawnpdf/prawn/blob/master/lib/prawn/graphics/patterns.rb#L65-L66 (and the relevant calls in the other branch)?\n. @mogest Please do.\n\nCode seems clean enough but I haven't got to actually try it out yet. Hopefully will have some time this week.\n. I use both prawn-svg and gradients in my documents. But I don't use transformations.\n\nI don't think changing core behaviour in prawn-svg is a nice thing to do. Probably, we can create a new gem for this very specific thing. Warn in Prawn when gradients used with transformations that it's going to change in 3.0 and that there's this one gem you should use to get correct behaviour. prawn-svg can warn users too when incorrect behaviour is evoked (but prawn would probably detect it anyway).\n. +1 on `throw`. +1 on wiki. +1 on docs.\n. :star:\n\n@mogest Well done!\n. Prawn tries to set a minimum version for the document depending on used features. It starts with 1.3. Once a feature that has been introduced in a later version of PDF spec (e.g. 1.4) the version is bumped up accordingly.\n\nYou can bump up the version yourself:\n\n``` ruby\ndocument.renderer.min_version(1.4)\n```\n. @abelsromero We already have some features that bump document version up to `1.6`. Also PDF is backwards compatible format so you can manually bump up to `1.7` even while your document uses only `1.3` or `1.4` features.\n\nDo you have in mind any `1.5` features that Prawn doesn't support yet?\n. Thank you for detailed report. I don't think Prawn would be in a lot of trouble. Here's why.\n\nWe provide commit right to anybody who had their PR merged. This means that there's a lot of people who can continue maintaining the project even after some people stepped down. For example, Gregory was an active maintainer for a while but now he's busy with something else. Evan Sharp does most of the maintenance at the moment and the project is as solid as it ever was. Those two people do not contribute to the project but it's still being maintained and developed.\n\nPS: I guess, this is not an issue. I'll close it. If you still think this is something Prawn community should take an action about feel free to reopen.\n. Just one comment: array of arrays looks a bit awkward. How about a hash? Like `{ position => colour }`?\n. For opacity you still can use the following format:\n\n``` ruby\n{\n  0 => [\"color\", opacity],\n  1 => [\"color\", opacity]\n}\n```\n\nI'm still not convinced about array of arrays. Especially that you can easily convert internally if you need:\n\n``` ruby\n{ a: 1, b: 2 }.to_a # => [[:a, 1], [:b, 2]]\nHash[ *[[:a, 1], [:b, 2]].flatten ] # => {:a=>1, :b=>2}\n```\n. Well\u2026 We only support MRI 2.0+ so we don't expect any compatibility with alternative implementation of lower versions.\n\nThere's a chance our Travis configuration is not quite right. I'll take a look a bit later.\n. @mogest Could you please rebase this PR and take a look at the failing specs?\n. @mogest Is this a known issue with JRuby?\n. @packetmonkey MRI 1.9.3 is not supported (I mean MRI support, not 1.9.3 support in Prawn) for a long time. Only 2.0+ is supported. Shell we probably deprecate JRuby that doesn't support 2.0 mode?\n. That JRuby recommendation is based solely on [performance of JRuby 1.7.18](https://github.com/prawnpdf/prawn/pull/600#issuecomment-30668729).\n\nOur supported Ruby versions policy mostly matched MRI core team. Whatever is supported by them is supported by us in Prawn. It's only logical to match that for alternative implementations.\n\nWe can deprecate pre-9k JRuby support in a patch level release and then drop it completely in a minor release. Especially since we don't need to actually remove or change anything in the already released code. This deprecation would only make it a bit easier to implement new features like this one.\n. Thank you @mogest! Well done!\n. @dsisnero Thank you for your contribution.\r\n\r\nI don't feel like this is a useful addition. It is simple enough to keep it in your document rendering code if you need it.\r\n\r\nI will close this PR now. Feel free to reopen if you have anything to add to the discussion.. It looks good. Spec is pretty simple on this one.\n. @iamjohnford This is great. :star:\n. @packetmonkey My bad. Fixed specs, removed `puts`, and added a Changelog entry.\n. @maerch Thank you for your contribution. I've rebased this PR on master and merged it but GitHub didn't pick it up. I will close this PR now.. @maerch Could you please provide specs for the change?. Bumped JRuby to 1.7.22 (the one before the latest 1.7). It fixed bundler installation.\n\nWe probably should specify versions for all the other implementations, too. Travis updates RVM and rubies once in a while and that changes our build matrix. What was green yesterday may fail today.\n\nPS: JRuby build times are ridiculous. 9m+ vs >1m for other implementations.\n. Also we probably should start testing on JRuby 9k.\n. The problem with Travis is that they don't use the latest stable release of Ruby. Say, 2.2 means 2.2.0p0 while latest would be 2.2.4 (or 2.2.3 as of the time of this PR submission).\n\nWe should test on the oldest supported version of each supported implementation and each latest minor release, and probably ruby-head (or head of each supported implementation).\n\nThis indeed would give us much bigger build matrix but also prevent breakage by Travis env updates.\n. I'll try. Commits here soon.\n. @packetmonkey Updated.\n. Is this good enough?\n. Hello @hoanghiep90 and thank you for contribution.\n\nCould you please provide a spec for this change?\n. @imidsac Could you please expand a bit? What goes wrong? What was you expecting? How can we reproduce the issue?\n. `@option.avatar.path(:original)` must be an `IO` instance or a path to a local file. In your case it seem to be an URL. Prawn doesn't support that. You need to figure out a way to either get an `IO` instance out of your `@options.avatar` object or download and pass a path to the local copy.\n. I'm sorry, I can not. I have no idea what your `@option.avatar` is.\n\nI assume, you're using Rails and some sort of plugin for file uploads. Consult the gem's documentation.\n\nI'm closing this issue as it's not a Prawn error.\n. @cdekker Could you please provide a minimal example that reproduces the issue?\n. @cdekker Thank you. We will look into it a bit later.\n. It looks like it's the same issue as #933. Is this the case?\n. @kriztynna Good. Looking forward to it.\n. Thank you for your contribution. It's much appreciated.\n\nHowever, I think it's not an optimal solution. For instance, In case of indexed PNG without transparency this code would still generate a mask for the image. A completely opaque mask. It's a redundancy that doesn't contribute to appearance of a document, makes a document heavier and rendering more complicated.\n\nI would suggest completely skip mask generation when there's no transparency. I believe this can be achieved by changing `alpha_channel?` method.\n. @kriztynna Thank you. This is pretty much what I had in mind.\n. Hello @softe1988,\n\nCould you please provide a screenshot and sample code? Generated document may help, too.\n. I would advise against subclassing `Prawn::Document`. Instead create your own class that has an instance of `Prawn::Document` as a part of its state.\n\nThe reason for that is that `Prawn::Document` has a rather wide API. There's always a chance of API collision. For instance, in this case you redefine the `state` method which is [essential part of the `Prawn::Document`](https://github.com/prawnpdf/prawn/blob/ba56328a9f02826802941045aea90b12fa545126/lib/prawn/document.rb#L642).\n. @softe1988 @simonetma Is the issue resolved for you?\n. @simonetma No problems. I'll close it now. Feel free to reopen if that doesn't solve your issue.\n. Thank you for your contribution.\n. I'm willing to monitor all our official communication channels for signs of breach.\n. I've fixed gradient name generation. Now it's same on both MRI and JRuby. Though, there are a few more issues with the manual. I suspect rounding errors.\n\nHere's a comparison of manual generated on MRI and JRuby: [manual jruby-mri comparison.pdf](https://github.com/prawnpdf/prawn/files/287773/manual.jruby-mri.comparison.pdf)\n\nAnd here are the manuals if anyone wants to investigate the source:\n- [manual-jruby.pdf](https://github.com/prawnpdf/prawn/files/287774/manual-jruby.pdf)\n- [manual-mri.pdf](https://github.com/prawnpdf/prawn/files/287775/manual-mri.pdf)\n. @jaredbeck That's what I'm spending my limited OSS time next. It's just running a bit short at the moment. Expect it to happen Really Soon\u2122\ufe0f.. Hello @hoanghiep90,\n\nYou're using the latest Prawn version. At the moment there's nothing more recent than that.\n\nWhat you're seeing is the result of Prawn extracting alpha channel from your PNG image. You see, PDF doesn't natively support transparent images. So we have to apply a mask to a solid image in order to make it look as intended. For that we need to split the image into two images: a solid one, and an alpha-channel mask. Since we do it completely in Ruby it may feel slow for big images.\n\nNow, we do it in Ruby because we want Prawn to be as portable as possible. For that we have a policy that we should not have any external dependencies, including binary extensions. There are extensions that use ImageMagick that may or may not be faster. Or you can extract alpha-channel out of your PNGs beforehand and apply the mask yourself bypassing the splitting in Prawn completely. That may be faster than what Prawn can offer right now.\n\nWe certainly care about performance and we always strive to make Prawn as fast as possible but there are limits to what Ruby can do. Yet, I would ask you to submit an example code and PNG image you experience the problem with. Just in case we're hitting some edge case which makes it unusually slow.\n. @mojavelinux I understand your argument. Creating inconvenience for users is a bad thing. I totally agree with you.\n\nYet, I think you're making the issue bigger than it actually is. We officially started supporting JRuby in Prawn 1.0. [[1]](https://groups.google.com/forum/#!searchin/prawn-ruby/jruby/prawn-ruby/8Iv0L_HeHDo/EaxZ1CjkGlYJ) [[2]](https://groups.google.com/forum/#!searchin/prawn-ruby/jruby/prawn-ruby/PwxhCiJgfcI/yWXx0FP7vD4J) At that time it was JRuby 1.7 in 1.9 mode.\n\nIn Prawn 2.0 we dropped 1.9 mode and required JRuby 1.7 2.0 mode. [[3]](https://groups.google.com/forum/#!searchin/prawn-ruby/jruby/prawn-ruby/65_lsabpzbw/qp0zb5Vy5ysJ). Not that that thread has not a single comment on the change. I tried to find evidence of that big outcry caused by JRuby 1.7 1.9 mode but I found nothing. Also note that full 2.0 mode never really come true in JRuby 1.7. Which is shame but is unrelated to this discussion.\n\nNow some stats about JRuby usage. There's no definite data as for how many people actually using Prawn with JRuby and JRuby 1.7 specifically. Though, I gathered some numbers that might give an estimate.\n\nMain (this) Prawn repository has 607 closed, and 44 open issues (651 total). Only 11 of them mention JRuby. That's about 1.7%.\n\nGroups has 1753 threads. Only 27 threads mention JRuby. That's about 1.5%.\n\nHere's [last year stats from Semaphore](https://semaphoreci.com/blog/2015/12/01/ruby-version-usage-in-commercial-projects-2015-edition.html). As you can see they show JRuby (all versions) at around 1%. Morover, that number seem to be constant over last three years. And is applicable to a wider variety of projects. Yet, it's mostly consistent with our numbers.\n\n1% is a small number. Yes, they still are Prawn users and are still valued. But our resources are limited. We are willing to work towards better product for them with them. But we also can not spread the little time we have to support old Ruby versions. If those users stayed with older Ruby for whatever reason they likely understood the trade-offs.\n. @seelensonne Thank you for detailed report. We will take a look as soon as we will have time on our hands.\n. No, in most cases Rails can pick up the MIME-type. However, you may use constructions like this in your controller:\n\n``` ruby\nrespond_to do |format|\n  format.html\nend\n```\n\nIn that case you need to explicitly handle `pdf` format in the controller.\n. `html_safe` is a part of ActionView, not Prawn. You would need to use some other library to clean up your strings. I believe, `html_safe` doesn't remove any markup from string but escapes it on unsafe strings. To achieve similar effect you can use `cgi` library from Ruby stdlib. For instance: `CGI.escape_html(unsafe_string)`.\n\nIf you want to just keep text and remove all markup I don't think there's anything in stdlib for that. You would have to look at gems like [loofah](https://rubygems.org/gems/loofah).\n. #949 has been merged.. @johncip Don't worry about that. We do issue triage once in a while and clean up these resolved issues.\n. To be honest, I'd rather rewrite the whole method.\n\nCurrently there are two loops in it and mutation only happen to carry over \"unrolled\" margins to the second loop. On top of that we now have a `dup`. This is very inefficient.\n\nIf we roll both loops into one we would not need an options dup, we would get rid of extra loop, and we would not need to mutate the options.\n. @johncip Yes, more or less.\n. @johncip Please don't worry. I'll handle it this weekend.\n. I strongly oppose this change. With it you may produce unreadable documents and wouldn't know it.\n\nIf you have troubles with encodings you should handle it in the application.\n\nI will close this PR but I'm open for discussion. You are welcome to present your case with more arguments or use cases.\n. Prawn doesn't come with any fonts because PDF format mandates a few default fonts. Here's a list:\n- Times\u2212Roman\n- Times\u2212Bold\n- Times\u2212Italic\n- Times\u2212BoldItalic\n- Helvetica\n- Helvetica\u2212Bold\n- Helvetica\u2212Oblique\n- Helvetica\u2212BoldOblique\n- Courier\n- Courier\u2212Bold\n- Courier\u2212Oblique\n- Courier\u2212BoldOblique\n- Symbol\n- ZapfDingbats\n\nFor this fonts Prawn has font metrics to properly layout text but the fonts themselves must be available on the target system. That is, they either must be a part of the OS, or must be bundled with a reader.\n\nAs for your question if the exception could be something else. Prawn is designed to work in a \"streaming\" manner. That is, every operation produces some output immediately and there's no way to \"rewind\" and regenerate a part of the document if you encounter any problems. So, there's simply no way to properly handle anything unexpected. In this case, you have no way to undo text rendering done to this point and so you have no way to correct any errors. Because of that there's no way continuing document rendering. That's why throwing an exception is an acceptable solution in the context of Prawn design.\n. Hello @amyxguo,\n\nAs far as I can tell, that flag only disable the warning for built in fonts. Since you are using a custom font that flag doesn't work. Also you are not getting a warning. You are getting an exception which means that your font lacks glyphs for your text.\n\nRecommended solution would be to add another font that definitely contains full set of glyphs you may need and use it as a fallback.\n\nAs for your desired solution, it is against our goals to produce corrupted documents so we are not going to implement it. However, you may monkey-patch prawn to do that.\n\nI will close the issue now but feel free to reopen if you think the issue can be resolved in another way.\n. @amyxguo Try these fonts: http://www.wazu.jp/gallery/Fonts_ChineseTraditional.html\n\nThe characters in your example look Chinese to me but then Kanji is adopted Chinese characters. I'm not sure if Unicode makes distinction between Kanji and Chinese character, though.\n. Hi Adam,\n\nThey are only used for tests. The library does not use any of those fonts. Also there are possible issues with font redistribution according to their license. That has not been properly investigated.\n. @matkoniecz Thank you but no. We do not intent to distribute fonts. Developers are expected to take care of fonts they want to use in their projects themselves.\r\n\r\n---\r\n\r\nThan you everyone for discussion. I hope the issue have been cleared up.\r\n\r\nI will close this issue now. Feel free to reopen if you have anything constructive to add.. @Rodrigora Thank you for the PR.\n\n@packetmonkey Apart form the comment wording all is good.\n. @Rodrigora Thank you for your contribution. This issue has been resolve in master so I will close this PR now. Feel free to reopen if you feel the solution is inadequate.. Prawn does font subsetting as an optimization to keep your documents small. You may want to try and trace if it does it properly with your font. The code is in [TTFunk](https://github.com/prawnpdf/ttfunk) gem. I don't have other ideas at the moment.\n. @Siyfion I'm afraid, no. IIRC, it's not a removal of unused glyphs but rather import of the used ones. You may hack TTF to include all glyphs, or maybe even just use original font file instead of generating a subset. But I don't think there's a way to just turn subsetting off.\n. Technically, PDF has means to reference external resources (including via URL). But I'm not sure if this is applicable specifically to fonts. Check out [PDF Reference](https://www.adobe.com/content/dam/Adobe/en/devnet/acrobat/pdfs/pdf_reference_1-7.pdf).\n. This issue is fixed in TTFunk 1.5.1. I will close it now. Feel free to reopen in case it doesn't work for you and you have new details.\r\n\r\n@gettalong Thank you for the research you did on this issue.. You shouldn't use `number_pages` inside a repeater. It's a handy helper that goes over each page and puts a number on it. You should use it after your document has all pages generated.\r\n\r\nRepeater is a more generic solution. It makes sure your block of code is executed after all pages are generated. It can be used to number pages but also for anything else you want to do on each page.\r\n\r\nYou should use either `repeat :all` or `number_pages` but not `number_pages` inside of `repeat`.\r\n\r\nHope this helps.\r\n\r\n---\r\n\r\nI will close this issue now. Feel free to reopen if you have anything to add.. It would be nice to have that documented. I would welcome a PR. ;). Hi @vonchristian,\n\nI'm afraid there's no way to set 'auto' for a page height. PDF's main use case is a paged documents.\n\nAs a workaround I can suggest you setting a really big height for your page, laying out everything you want to wit in, recording the amount of space it took, manipulate page object to reflect the size. I can't give you the exact instructions for how to do that of top of my head. I just ccan tell you that you probably would need to get pretty deep into `PDF::Core` guts.\n. @gettalong Thanks! It turned out much simpler than I anticipated. \ud83d\ude05 \n. @vonchristian I will close this issue now. Feel free to reopen if you think this issue is not resolved for you.\n. Hello Dan,\n\nCould you please provide a minimal repro for your issue?\n. You are not supposed to manually clean up `Tempfile`s. They remove the file when they're GC'd. Alternatively, you can pass the tempfile itself to `image`. In that case no new IO will be created and you will be able to clean it up yourself if you wish so.\n. We will look into it. Meanwhile as a workaround you can create IO objects (`File.open` does that) and pass those to `image` to avoid locking your files. Or force GC right before you delete those files.\n. Thank you Eito. Your contribution is much appreciated.\n. Hello Richard,\n\nThank you for your contribution. It's much appreciated.\n\nWould you please provide specs for the change?\n\nThanks.\n. No, this is fine. We'll take care of it. Eventually\u2026\n\nOnce again, thank you for your contribution. It is much appreciated.\n. @systemed Thank you for your contribution. As others have pointed out this method is unused and has been removed in master. I will close this PR now.. Thank you @eitoball for your contribution. This issue has been solved in the master so I will close this PR now.. @eitoball This appears to be very similar to #993. Could you please confirm/refute it?. Indeed. Thank you for reminder.. @midpackrunner Thank you for your contribution!. Hello,\n\nPrawn doesn't support interlaced PNGs natively. We'll gladly accept a PR for this functionality.\n\nAlternatively, you can try [prawn-gmagick](https://github.com/packetmonkey/prawn-gmagick) or convert your images to non-interlaced PNGs in any other way.\n\nI will close this issue now. Feel free to reopen if you have anything to add.\n. @yob Anything to make people interested in reviewing it. ;)\n. @malagant Hello,\n\nCould you please provide sample code and a generated PDF for examination?\n. Hello @catalin88,\n\nWhat is the issue you're facing? What is the expected result and how actual is different?\n. @catalin88 Could you please provide a minimal (and complete) snippet of code that demonstrates your issue?\n\nThe one in the first message is incomplete.\n. Hi,\r\n\r\nYou do the same thing you do with other gems: you put it in your Gemfile.\r\n\r\n`Gemfile`:\r\n```ruby\r\ngem 'prawn'\r\n```\r\n\r\n---\r\nI will close this issue now as it's not directly related to Prawn but feel free to reopen if you have any additional information or your issue is not resolved.. Prawn is just a library. It doesn't require any special Rails integration. Because of that Prawn sort of supports every Rails version there ever was and will ever be.\r\n\r\nThere must be a reason why `require` 'prawn'` fails but I'm pretty sure it's not because of Prawn.\r\n\r\nIf you want us to help you please provide a reduced example that helps reproduce your issue. You may also want to read closer our [Contribution guidelines](https://github.com/prawnpdf/prawn#contributing).. Prawn does not treat monospace fonts in any special way. For prawn they just happen to have glyphs of the same widths. Prawn uses whatever glyph metrics are present in the font.\r\n\r\nLikewise, all PDF renderers I'm aware of would do exactly the same thing: they will use font metrics as is.\r\n\r\nTerminals are a bit of a special case. They assume that text is monospace and is layed out on a grid. iTerm, for instance, implements text grid. It renders individual glyphs in grid cells. It can render \"wide\" glyphs in double cells. But otherwise it's all about grid.\r\n\r\nAccording to official site, M<sup>+</sup> MN Type-1 is a \"combination of fixed-fullwidth M+ Type-1 for Japanese and fixed-halfwidth M+ MN Type-1 for alphabets\". So it appears logical that box drawing glyphs are fullwidth and twice as wide as regular latin character glyphs.\r\n\r\n---\r\n\r\nI will close this issue now as this is not a Prawn bug. Feel free to reopen when you have any additional information.. @stormsilver Thank you for your contribution.\r\n\r\nCould you please provide specs for the fixes so that these bugs would never come back?. Hello @anbublacky.\r\n\r\nCursor position gets reset after the block is executed so it will always be `0.0`. Try saving cursor position inside the `column_box` block.\r\n\r\n---\r\n\r\nI will close the issue now. Feel free to reopen.. Hi @imidsac,\r\n\r\nTry putting the `+` on line 74 on the previous line, right after the first array so that it looked like this:\r\n\r\n```ruby\r\n[] +\r\nanother_array\r\n```\r\n\r\n---\r\n\r\nYour issue is not connected to Prawn in any way. While I understand your frustration with the issue please refrain from submitting unrelated issues in the future. There are other places online for general language-related discussions.. The widths depend on the font you use. It is completely possible that the font provides unexpected metrics.\r\n\r\nFor example, here's what Prawn gives me for default font (\"Time New Roman\"):\r\n```ruby\r\nPrawn::Document.new do |pdf|\r\n  puts pdf.width_of(\"1.\") # => 10.008000000000001\r\n  puts pdf.width_of(\"\\u2022\") # => 4.2\r\nend\r\n```\r\n\r\nYou can use any font-editing software to inspect your font. For instance, FontForge is free and while it looks terrible it can help you in this task.\r\n\r\n---\r\n\r\nI will close this issue now. Feel free to reopen if you discover that it's Prawns fault. In that case please submit relevant font metrics or the font file itself if possible.. @jamis I rebased, squashed and merged this PR. I will close it now. Thank you for your contribution.. Thank you for your contribution.. Thank you for your contribution.. Why regular bounding box doesn't work for your use case?. `ColumnBox` exposes `left`. It's the left side of the current column. It's going to be 0 for the first column.\r\n\r\nWould that work for you?. Fixed in 2.2.1. Hello Maricris,\r\n\r\n`prawn-layout` is a very old gem. It's most likely not compatible with the latest Prawn gems. If you need a table try your luck with `prawn-table` gem.\r\n\r\n---\r\n\r\nI will close this issue now as it's related to an unsupported code. Feel free to reopen if you have anything to add to the discussion.. Thank you for contribution but I will decline this PR.\r\n\r\nThere are 2 reasons:\r\n1) Requires are moved around. I'd rather keep them where they are now.\r\n2) This is not a Prawn issue but user's set up. Also the proposed fix introduces other issues.\r\n\r\nLet me expand on the second one.\r\n\r\nRuby doesn't load the same file more than once with `require` (and `require_relative` for that matter). It check if the file is already loaded and skips it if it is. The check is done on a fully expanded file name. `require` and `require_relative` only differ in the way they expand the file name passed to them.\r\n\r\n`require` does it by looking in every directory listed in `$:` (also known as `$LOAD_PATH`). It basically iterates through load paths, adds the argument passed to it, adds an extension (\".rb\", or system's binary library extension such as \".dll\", \".so\", \".dylib\", etc.). When it find one it check if it's already loaded (it's in `$LOADED_FEATURES`) and loads if not.\r\n\r\n`require_relative` only differs in the way it looks for a file. It doesn't look in `$:`. It looks in the current directory. The check and load part is exactly the same.\r\n\r\nSo as you can see, if you have two copies of Prawn (or any other gem) they both are going to be loaded.\r\n\r\nNow, the new issue I mentioned is that with only `require` you can only load files from the gem that comes first in `$:`. So if you manage to load a file from the second instance, it will require files from the first one. This is potentially problematic when you have two different versions vendored.\r\n\r\nBoth approaches have drawbacks. But also both are pathological setups. Ruby (unlike, say, Javascript) has global namespace. It's rather problematic if not downright impossible to have two instances of the same gem loaded at the same time. You should never attempt to do that. If you're working on an app, port your code to a version that is supported by all of your deps. If you're writing a gem, put a proper depspec in your gemspec file.\r\n\r\n---\r\n\r\nOnce again, I really appreciate your time and contribution do not be discouraged by this one time. I will close this PR now. Feel free to reopen if you anything to add to discussion.. Thank you for your contribution.. Prawn doesn't support PDF embedding.\r\n\r\nPDF is not an image format. You can try externally converting your PDF into one of the supported image formats and including that instead.\r\n\r\n---\r\n\r\nI will close this issue now as this is expected behaviour and not a bug. If you feel like Prawn should support this please open a new issue with a feature request containing extended description. We will consider it or maybe you or someone else will submit a PR for it.. There's a [prawn-svg](https://rubygems.org/gems/prawn-svg) gem for embedding vector graphics.. @brendanthomas1  Thank you for your contribution. This PR will be merged a bit later when I have some time to work on Prawn.. Examples in manual are not supposed to be Copy-Paste snippets. They're illustrations of usage. They *are* executable examples but are only meant to run within the repo. We took not a very ergonomic approach but it mostly works well. It lets us be sure that the code in manual is valid and that output is exactly what Prawn would produce.\r\n\r\n> I have no idea whatsoever whatever it is the correct way to use characters beyond ASCII.\r\n\r\nFont files are not expected to provide any particular character set (including ASCII). Technically, font files can include glyphs that are not mapped to any particular character. They also can include no glyphs at all. It's not very useful but spec doesn't prohibit it. So you have to make sure the font you use is suitable for your text. I believe Prawn (or rather TTFunk) would let you know when text contain characters that font have no glyphs for.\r\n\r\n> It would be helpful to include instructions how one should obtain files necessary to enable UTF8 support.\r\n\r\nFonts in Prawn repo are not any special. They're just the ones that let us use them in testing. We are not certain if we can distribute them. So we don't. We intentionally do not package them because of this.\r\n\r\nYou can find a bunch of freely available fonts on the Internet. You should not use fonts from Prawn repo. Most of these fonts have newer versions available. The older versions in the repo are good enough for our purpose \u2014 testing.\r\n\r\nAs for instructions, I doubt their usefulness as they would be very vague: search the web and make sure the font has glyphs you need. That is about as detailed it can get. We don't want to endorse any specific places you can get fonts from. There are a plenty. Chose your favourite.\r\n\r\n---\r\n\r\nI will close this issue now. Feel free to reopen. . > Warnings that are not important should ideally not be shown.\r\n\r\nI wholeheartedly agree.\r\n\r\nThough, I shall repeat myself. Again. This is not a problem with Prawn. It's a result of a pathological environment.. Likewise it can be fixed elsewhere.. @Zyphrax Have you tried master yet? Does it fix this issue?. Hi Fabrizio,\r\n\r\nIt looks like this is not a Prawn issue. It appears the browser requests wrong content type from your app.. Glad I could help you. I will close this issue now. Feel free to reopen if it turns out to be a Prawn issue.. I'm on the fence about `require` vs `require_relative`. I really don't like moving requires up like this.. @fidothe This is actually a reasonable proposal. PDF/Core is supposed to be stand-alone. The problem is that it was extracted from Prawn and the extraction wasn't quite finished. You may still find that PDF/Core actually depends on Prawn. It's also is not used by any other piece of code other than Prawn itself, as far as I know.\r\n\r\nNow, while it's true that `require_relative` is a bit faster it wasn't the main reason to use. It was mostly convenience. You may notice that some parts of Prawn are relativly deeply nested. It resulted in a bit of a repetition. That is it.\r\n\r\nRegarding the whole problem. I'm convinced it's an environment (read \"bundler\") issue. There's some piece of code that adds both symlinked and real paths to `$:`. Moreover, it requires Prawn (and most likely all other gems, too) both before and after adding resolved (or symlinked \u2014 I don't know the order) paths. Basically, deps are loaded twice and that can lead to all sorts of problems much worse than warnings.\r\n\r\nPrawn doesn't do much crazy metaprogramming/init-run stuff. What happens is mostly just consts/methods overwrite. But in Ruby there are definitely much worse things that can go awry with double load.\r\n\r\nAnyway, what I'm trying to say is while we can fix the warnings in Prawn it won't fix the root cause.. Shyouhey (Ruby Core Team) acknowledges this is a bug in Ruby:\r\n\r\n> I believe the reported behaviour is a bug to be fixed.\r\n\r\nMore info on Ruby issue tracker: [issue 10222](https://bugs.ruby-lang.org/issues/10222). I'm afraid, you have to calculate mask size yourself. You'd need to find out image dimensions beforehand using some other library and calculate scaled size also you'd need to position the mask properly to align with the image. . Thank you for your contribution!. Please rebase his branch and let it go through CI.. Thanks. \ud83d\udc4d . @fidothe Can't you merge after approval?. @fidothe Weird. Please contact me over email.. Hello Francisco,\r\n\r\nMake your View PDF button open an iframe with a PDF in it.\r\n\r\n---\r\n\r\nI would like to pint out that this is not related to Prawn in any way. This is not a Prawn bug, nor it is a feature request. We have a mailing list for community discussions with a little less strict topic requirement. Fell free to use it the next time.. Rubygems have long ago abandoned idea of complete distribution. It has removed automatic test running upon gem installation. And it's not recommended to package tests any more. So you should not expect `rake test` to work in the installed gem directory. You need the repo for that. That said, we should package files required at runtime. We should package `.afm` files.. Hello Nathan,\r\n\r\nAs you correctly noted prawn-template is not supported any more. But it's the one responsible for *reading* the template, including all the transformation matrices. Prawn only supports *generation* of new documents or content. Prawn doesn't guess what transformation matrix it needs to apply to your text to make it appear right side up on the page. Unless you explicitly specify it, no matrix is applied. It's assumed you're keeping track of graphic state (and transformation matrices). Prawn also doesn't provide any tools for *modification* of documents. You may try using PDF::Core and manually modify objects but I can't tell if that would result in a well-formed document or a broken one.\r\n\r\nThat said, I don't think it's a bug in Prawn or prawn-template. You just happen to have a weird template. The text inserted withing upside down page appears upside down. This is absolutely reasonable. Since you believe it's a bug you may work on a patch but keep in mind that most of the time applied transformation matrix is intentional. Simply removing it or applying reverse matrix to all text won't be accepted.\r\n\r\n---\r\n\r\nThank you for your contribution. I will close this issue now. Feel free to reopen if you have any further feedback.. @mojavelinux Could you please fix the build?. Default Rake task is running both Rubocop checks and specs. Use bundler to be sure you're running all the right versions.\r\n\r\n```bash\r\nbundle exec rake\r\n```. You should never use a packaged gem for development. Packaged gem used to be a proper distribution mechanism at the very beginning of Ruby gems but since then it has changed (about 14 years ago when RubyForge came about). Nowadays it's actively discouraged to package supporting infrastructure. Packaged gem should only contain files that are required for proper execution and documentation generation.\r\n\r\nAs for your checkout you may have different version of Rubocop installed. Our config inherits from the default one so somewhat version-dependent.. That's interesting. Rubocop does indeed traverse tree to find config but it should not go all the way tho the `/`. I should check the Rubocop code\u2026. @mojavelinux Do you have a merge bit on this repo?. > merging is blocked unless there is one approved review\r\n\r\nIndeed. My bad. \ud83d\ude05 . @mojavelinux Yes, please.. Just in case, unless you explicitly put anything on a particular part of the page it won't be printed white. For example, if you put a black squire in the middle of a page you'll see it on white background on your screen, but if you print it on a red sheet of paper you'll get a black square on red background. In that sense all PDFs are transparent.\r\n\r\nAs Thomas said, background color is not defined in the PDF. Most renderers that output to screen assume white as it's the most common color of paper. If you want to use your document as vector graphics, most image editors (that I used) that understand PDF allow import with transparent background.. @jacksop Thank you for reporting this.\r\n\r\nSorry for the delay. I\u2019m a bit busy right now. \r\n\r\nA quick check in the code indeed reveals shortcomings of key construction. Hashing function is OK. We don\u2019t really need longer keys. The flaw is in the `pack`. Just switching to `join` is enough to eliminate the issue.\r\n\r\nAs I mentioned, I\u2019m a bit busy right now so I wouldn\u2019t be able to fix this fast. I\u2019d gladly accept a PR though. So if you wish to work on this feel free to take it. I can help with an advice.. @jacksop Yes. Try submitting a PR from your fork.. I think, gradient IDs changed with this PR. So the manual has changed as well. Make sure those are the only changes.. All changes to the manual seem to be expected.. Could you please add spec that checks for collision that used to be generated?. ",
    "gettalong": "@pointlessone You could do something like I do for HexaPDF, see https://github.com/gettalong/hexapdf/blob/master/lib/hexapdf/font/type1_wrapper.rb#L149, i.e. using what's available in the AFM files and providing default values for the rest.. No, I don't think that there is a practical difference. It's just a bit better to follow the spec to be on the safe side.. @bradediger I have implemented this in a backwards-compatible way in #563, should pose no problems when being merged.\n. @sandal: Regarding `git filter-branch` et al - you wouldn't want to do that for a repo with so many forks because it changes the complete history, no commit checksum would be the same. I have done this for one of my projects but that only had a handful of forks and was more dead than alive at that moment...\n\nI think that just removing the fonts from the current repo would be okay since you can't get rid of them in already pushed gems anyway.\n. @sandal I wouldn't even add such a note because it only makes people notice. For example, I never knew that there were these fonts available in the repo or the gem :smile:. I would just remove them and let the commit message speak for itself.\n. @bradediger Please see pull request #553 for an implementation.\n. @bradediger This can be closed now - thanks for merging!\n. :+1: for merging this in\n. @elsurudo Have you tried PDFs generated with other applications if they exhibit the same issue? E.g. creating a PDF from a LibreOffice Writer document that contains a CMYK JPG? @ghinda said that the same problem applies to other libraries too, so maybe it is something on Illustrator's side.... @bradediger This issue can be closed since `rdoc/task` is now required in the `Rakefile` instead of `rake/rdoctask`.\n. I had some problems with the AFM fonts, too (i.e. bad width calculations for non-standard characters like `\u00bb`). They all disappeared when I started using TTF fonts.\n. It would help if you could provide sample code that exhibits the behavior.\n\nJust guessing: Is the dash between the year and month and between the month and day not an ASCII dash but an em-dash or an en-dash? If so, you might need to use a different font to show them correctly.\n. Also see the discussion on issue #496\n. @bradediger Thanks for merging, this issue can be closed then.\n. Or this:\n\n``` ruby\npdf.formatted_text([{:text => 'Github', :link => 'http://github.com/'}])\n```\n\nBoth versions are described in the [manual](http://prawn.majesticseacreature.com/manual.pdf)\n. @vanboom / @bradediger: Can this issue be closed since the question is answered?\n. Thank you!\n. No problem @bradediger :smile:! Thanks for you work on prawn. If I can help out with anything else, contact me!\n. See the `repeatable_content/repeater.rb` example. You would basically need to do something like this:\n\n```\nrepeat(:all, :dynamic => true) do\n  if page_number == 1\n    # do something for the first page\n  else\n    # do something for the rest of the pages\n  end\nend\n```\n\nI use exactly this for not showing a footer on the first page and it works perfectly.\n. @juanfal You can use a PDF as template when starting a new Prawn document or a new page.\n\n@letronje If the creation of the original PDF is under your control, you could just write the coordinates to an additional file and use this when creating the other PDF. Or you could try to use the pdf-reader or pdf-inspector gems for finding the image location.\n. @juanfal That is currently not possible. However, you may use the following branch of prawn which implements this functionality: https://github.com/yob/prawn/tree/pdf_images/\n. @sandal I merged the master branch but can't reproduce the problem... It seems to be some kind of encoding issue that doesn't occur on my system. Any ideas?\n. @sandal Done\n. @sandal FYI: I have tested with Ruby 1.9.3-p448 which exhibits this failure on Travis CI but not on my machine.\n. Thanks @bradediger for your detailed reply! I understand your view point.\n\nOne thing, though: The manual should probably be updated so that the users know that they have to escape `<`, `>` and `&`.\n. 100% agree with @bradediger - especially as this will slow down Prawn for **everyone**!\n\nI have _never_ seen production Ruby code with `sleep(x)` instructions...\n. The tests don't really matter - you don't put a sleep instruction into code for basically nothing. You put code in because the code should do something useful!\n\nIf Prawn would tend to all idiosyncrasies of all other Ruby libraries the code would explode.\n\nWhat you could try: Wrap the generation of the PDF with a Ruby thread that has a low priority (`Thread#priority`) and insert `Thread.pass` statements inside your code that generates the PDF to allow other threads to run.\n. :+1: \n. I don't know how Prawn does this but the thing is this:\n- A page can have zero, one or more content streams. See PDF1.7 s7.8.2. When processing content streams, a PDF reader starts at the first stream and when it is at its end, it continues with the next one **without** resetting the graphics state. So all content streams together act as if they were one.\n- When you create a page based on an existing page, the above has to be accounted for. I don't know how Prawn handles already existing content. However, you can make sure that everything is alright by adding a content stream with just a \"q\" before the content stream of the template and a content stream with just a \"Q\" after it. And the fourth content stream is created by Prawn.\n\nSo the page's /Contents array should look like (I don't use PDF references here) `[before template after prawn]` where 'before' is a stream with contents 'q', 'after' a stream with contents 'Q', 'template' the stream from the template and 'prawn' the stream that Prawn generates.\n\nLong story short: Try finding the place where Prawn generates the /Contents array and fix the problem there.\n. This could also lead to problems. The best way would be to generate the key, check if the `font_registry` has such a key and if it has, modify the key, then check again...\n. The size you are getting is of the A4 format but I can't say why.\n. Just as information for someone wanting to implement this: For this to work the color space of the image has to be set to /ICCBased and the ICC profile extracted from the image and embedded into the PDF as separate object (see PDF1.7 spec chapter 8.6.5.5 for ICCBased color spaces and chapter 8.9.5 for image dictionaries). I don't know if ICC profiles embedded in JPEG files are recognized by conformant PDF readers but I doubt it.\n. @Siyfion It would help if you could provide a small script that reproduces the error. As for external object streams specified via URLs: Yes, this should be possible, see section 7.11.5. However, I doubt that there would be much support for that feature.\n. @Siyfion I'm not _that_ paranoid ;) So thanks for the ZIP-File.\n\nWhat I can confirm right now is that the embedded font is not a valid TrueType font. When extracting the font stream and opening it with FontForge, it throws errors. However, if we replace the font with another one, like `Roboto-Regular.ttf`, everything works flawlessly.\n\nAlso, running `ttfdump -t glyf FILE` on the extracted font stream will give you an error after the second glyph (from 77). I think the problem comes from the Taviraj font using composite glyphs and ttfunk perhaps not properly supporting them but that is only a guess.\n\nWhat you experience with Acrobat may be that Acrobat re-subsets the font on save and therefore everything works correctly.\n. @Siyfion Did you open the original TrueType font or the one embedded into the PDF file? The original one works fine but the embedded one is corrupt.\n. @Siyfion Yes, the original file also works correctly for me but not the embedded subset of the file and, as you said, this means that subsetting does not work for this file.\n. @Siyfion Didn't have to investigate further, but I guess it will be somewhere here: https://github.com/prawnpdf/ttfunk/blob/master/lib/ttfunk/table/glyf.rb\n. @Siyfion No problem, I think I will some time today to have a look.\n. @Siyfion I tracked down the problem after some lengthy investigation (I'm not that familiar with ttfunk myself) and have opened an issue (see https://github.com/prawnpdf/ttfunk/issues/32) where you will also find the fix that you can apply to your ttfunk installation.\n. Just what I wanted to post :smile: - so here it goes:\n\nYou could probably use a a very large height for your document so that prawn doesn't automatically create a new one. And once you are finished with everything, use `Prawn::Document#y` to determine your current vertical position.\n\nThen you can use `Prawn::Document#page` (a `PDF::Core::Page` object) to adjust the MediaBox for the page, something like:\n\n```\nrequire 'prawn'\n\nPrawn::Document.generate(\"test.pdf\", page_size: [100, 2000], margin: 10) do |doc|\n  rand(100).times do\n    doc.text(\"some text\")\n  end\n  doc.page.dictionary.data[:MediaBox] = [0, doc.y - 10, 100, 2000]\nend\n```\n. @pointlessone I looked at it and it seems that `#write_stroke_color` is never used. In `spec/graphics_spec.rb` are tests for fill and stroke color, so that area has already tests and should be fine.\n\nAs a problem in this area would impact _a lot_ of people, I think that `#write_stroke_color` is now probably obsolete.\n. Can you provide a minimal example Ruby script that generates a PDF with the wrong color mode and post it here?\n. Thanks for the script but I don't see any problem in the resulting PDF - Adobe Reader is showing it just fine. Can you also provide your corrected version to find the difference?\n. Since access to proprietary software is limited, please help us out by providing some more information. This could be the resaved PDF file you mentioned initially or what you mean by \"color mode\".\n. Thanks for the color mode explanation!\n\nI have looked at the PDF content stream operators created by your example and they correctly set the /DeviceCMYK color space before setting the color values. I'm not an expert but from what I can see this should be all that needs to be done.\n\nCould you provide a PDF with the color mode changed to CMYK by using Adobe Illustrator? Maybe other values are set within the PDF file to make it appear differently.\n\nAnother question: Is there an actual difference when printing out both color versions of the PDF on the same printer?\n. @activestylus Thanks for the files but they contain vastly different files. To potentially find out the difference I will need the original PDF file and the original file opened in Illustrator and saved with the changed mode.\n\nThe two files RGB.pdf and CMYK.pdf look like the RGB example in the left on your pictures, i.e. no subdued colors, like on the right side. I looked at them using Evince on Linux and Reader on Windows.\n. Thanks for those, they help!\n\nAlas, I don't think that Prawn can do anything like you want.\n\nThe colors used for the CMYK rectangles as well as the RGB rectangles are (in that order):\n- For `rgb.pdf` only /DeviceRGB is used, so all the values below have to be interpreted as `R G B`\n  - `0 0.678 0.933`\n  - `0.922 0 0.545`\n  - `1 0.945 0`\n  - `0.137 0.122 0.125`\n  - `1 0 0`\n  - `0 1 0`\n  - `0 0 1`\n- For `cmyk.pdf` only /DeviceCMYK is used, so all the values below have to be interpreted as `C M Y K`:\n  - `1 0 0 0`\n  - `0 1 0 0`\n  - `0 0 1 0`\n  - `0 0 0 1`\n  - `0 0.988 1 0`\n  - `0.625 0 1 0`\n  - `0.879 0.766 0 0`\n\nAs you can see Adobe Illustrator is changing every /DeviceRGB color into a /DeviceCMYK color, probably using an ICC profile that you configured.\n\nSo it seems that the color mode change in Illustrator just does that: Changing every color either to /DeviceRGB or /DeviceCMYK. I couldn't find anything else that relates to the change.\n\nNote that inside a PDF (even in one content stream) you can _mix_ /DeviceRGB and /DeviceCMYK colors however you want! This is also supported by Prawn. If you specify a CSS color value for a color setter, it is interpreted as a /DeviceRGB color, if you use four values, as a /DeviceCMYK color.\n\nSo I don't think that the PDF files that Prawn generates are incorrect. If you want to use CMYK colors, than use CMYK color values in Prawn.\n\nYou may also read up on the Illustrator setting to see what it is supposed to do.\n. Thanks for the follow up but what you found has nothing to do with PDF itself. For example, the data you show on the right side of the picture concerning `white-rgb.pdf` is inside the PDF object (53,0), referenced from PDF object (52,) via the key AIMetaData.\n\nThese two objects don't belong to PDF itself but to private data embedded by Illustrator. They are useless for any conforming PDF reader because they are not part of the PDF spec. Therefore probably no program except Illustrator will look at the data.\n\nSo if you want that conversion to happen automatically, you will need to find out what _exactly_ Illustrator does with the colors and manually change the color values and color spaces, which will probably not be so easy.\n. @meisterluk If you are using a TTF, `font/afm.rb` should never be used because it is only used for the built-in PDF fonts. The `#normalize_encoding` method of `font/ttf.rb` transcodes the text to UTF-8, so that should be okay.\n\nSo maybe the font fallback facility of Prawn comes into play?\n\nCan you provide a small sample text and instructions on how to reproduce the error?\n. @meisterluk As I said I don't think that soft_hyphen is UTF-8 since you are using TTF and TTF fonts use UTF-8 encoding in Prawn.\n. @meisterluk Btw. I can reproduce the problem using your instructions but haven't had time to look into this further.\n. @meisterluk The part `@soft_hyphen.encoding` is not the critical part but a symptom of another cause, most likely a false font. \n\nWhen I run your MWE the font `Prawn::Font::TTF< /tmp/mwe/fonts/Andada-Regular.ttf: 12 >` is used when no error happens, but `Prawn::Font::AFM< Courier: 12 >` when it does.\n\nAs I  said before AFM fonts in Prawn always use WIN1252 encoding and not UTF-8 which causes this problem. So where does this AFM font come from?\n\nFrom what I found most likely from `asciidoctor-pdf-1.5.0.alpha.12/lib/asciidoctor-pdf/formatted_text/transform.rb:37` but I will need to dig a bit further to confirm this.\n. The problem is not Andada, the problem is the combination of Andada with Courier.\n\n> Small journey into the PDF spec: PDF has different ways to use fonts:\n> - The easiest way is to use the so called \"standard 14 PDF fonts\". These are so called Type 1 fonts and they have to be available on an reader and therefore no font information (i.e. font file) needs to be embedded into the PDF. These fonts are only available as so called simple fonts.\n> - Another way is to use a font file, with or without embedding it. This is done for general Type1 fonts, TrueType fonts and OpenType fonts. There are two ways to embed fonts, as a simple font (this is how Prawn embeds TTF) and as a composite font.\n\nSo, what does this have to do with this problem? Prawn is able to use both kinds of fonts, ie. it can use the standard 14 PDF fonts by using so called AFM files that provided the required information like character code to glyph mapping or with of a glyph. Or it can use TrueType fonts through the `ttfunk` library.\n\nAlas, working with fonts is hard and that is not the whole story. Once you have the font you have to decide on the **encoding** you want to use with the font. The encoding defines either predefined mapping from character codes to glyphs/UTF-8 values or a custom one.\n\nLike there are predefined fonts in PDF, there are predefined encodings, one of them being the WinAnsiEncoding (see http://wwwimages.adobe.com/content/dam/Adobe/en/devnet/pdf/pdfs/PDF32000_2008.pdf, Annex D):\n- Prawn uses this encoding by default for the standard 14 fonts and it is the only encoding when working with the standard 14 fonts in Prawn. As it so happens Ruby supports different _string encodings_, one of them being WINDOWS-1252 which is equivalent to the WinAnsiEncoding of PDF. So by using this encoding directly on strings Prawn doesn't need to transcode things, resulting in better performance.\n- When using TrueType fonts in Prawn, the WinAnsiEncoding is also used by default but in contrast to the standard 14 fonts only internally. On the API side UTF-8 encoding is used throughout for strings and later mapped to the WinAnsiEncoding or a custom encodings so that UTF-8 characters like emoticons can be encoded.\n\nAnd _this_ is the root of the problem, the use of different encodings for different **kinds** of fonts.\n\nSo, back to the issue at hand :wink:\n\nHave a look at https://github.com/asciidoctor/asciidoctor-pdf/blob/master/docs/theming-guide.adoc#fonts - there you will find some more information regarding fonts and encodings in context of Asciidoctor PDF.\n\nWhat you will also find there is the key `literal.font_family`. By using a TrueType font instead of the built-in Type 1 font, you will find **that everything works**!\n\nHere is a changed `mybook-theme.yml` that doesn't generate an error:\n\n``` yaml\nfont:\n  catalog:\n    Andada:\n      normal: fonts/Andada-Regular.ttf\n      bold: fonts/Andada-Bold.ttf\n    DejaVu:\n      normal: /usr/share/fonts/truetype/dejavu/DejaVuSansMono.ttf\n      bold: /usr/share/fonts/truetype/dejavu/DejaVuSansMono-Bold.ttf\n      italic: /usr/share/fonts/truetype/dejavu/DejaVuSansMono-Oblique.ttf\n\npage:\n  margin: [0.75in, 1in, 0.75in, 1in]\nbase:\n  font:\n    color: black\n    family: Andada\n    size: 12\n\nliteral:\n  font_family: DejaVu\n```\n\nSo, there is certainly an issue in Prawn regarding this encodings but it can easily be solved by using TrueType fonts throughout!\n. @meisterluk Hm... I tried your example but it works fine in both cases for me.\n\n```\nAsciidoctor PDF 1.5.0.alpha.12 using Asciidoctor 1.5.4 [http://asciidoctor.org]\nRuntime Environment (ruby 2.3.1p112 (2016-04-26 revision 54768) [x86_64-linux]) (lc:UTF-8 fs:UTF-8 in:- ex:UTF-8)\n```\n\nAs for the word \"solved\": Yes, work around is better but I closed this issue because there is already another open issue for this problem.\n. @meisterluk What is the encoding of the `test.adoc` file? I just copied it from the browser, so the \u00f6 is encoded as UTF-8 in my case. In you case it seems that the UTF-8 sequence of \u00f6 has been interpreted as Windows-1252, as if `\"\u00f6\".force_encoding('Windows-1252')` has been called.\n. @meisterluk I posted that already: `Asciidoctor PDF 1.5.0.alpha.12 using Asciidoctor 1.5.4`, so the same as you.\n. @garrettstott Alas, the PDF provided by @malagant is not a valid PDF (the cross-reference table is invalid) and he provided no useful sample code that can be executed locally (i.e. without rails). If you provide such a sample code (similar to what you already provided but including all resources), it will be easier to see where the problem is.. @DoWhileGeek No, will probably not be fixed in kramdown's PDF converter since it provides only the basics. If you need more than that you need to subclass the PDF converter and provide the additional functionality, like remote images and so on.\n. @DoWhileGeek Sure\n. See pull request #1001 for a fix. @mrj I gather this is still a problem? The image path seems to be invalid, so it is hard to see what's wrong.\r\n\r\nHowever, the problem may be that when you set a font height of 3mm a line of text is larger because Prawn doesn't just use the height of the individual characters but actually the font's ascender and descender. Additionally, fonts *may* contain characters that go beyond the ascender and descender which would also be a problem.. @gioele Using PDFs as image format requires a PDF parser which Prawn doesn't have. However, Prawn can use the `pdf-reader` and `prawn-templates` gems for using PDFs as template for a page. Maybe this functionality could be reused for image support? @bvogel might know more about this.. @fidothe I agree with @pointlessone that this is primarily not Prawn's problem but probably some invalid behaviour on part of bundler or require or require_relative; see this example:\r\n\r\n~~~\r\n/tmp \ue0b0 cat start.rb\r\nrequire 'hallo'\r\np $\".last\r\n\r\n/tmp \ue0b0 ll -d hallo test\r\nlrwxrwxrwx 1 thomas thomas    4 Jun 24 14:43 hallo -> test/\r\ndrwxrwxr-x 2 thomas thomas 4096 Jun 24 15:03 test/\r\n\r\n/tmp \ue0b0 cat test/hallo.rb\r\nputs \"before\"\r\np $\".last\r\nrequire_relative 'test.rb'\r\nputs \"after\"\r\np $\".last\r\n\r\n/tmp \ue0b0 cat test/test.rb\r\nputs \"test.rb\"\r\np $\".last\r\n\r\n/tmp \ue0b0 ruby -Itest start.rb\r\nbefore\r\n\"/home/thomas/.rvm/gems/ruby-2.4.0@global/gems/did_you_mean-1.1.0/lib/did_you_mean.rb\"\r\ntest.rb\r\n\"/home/thomas/.rvm/gems/ruby-2.4.0@global/gems/did_you_mean-1.1.0/lib/did_you_mean.rb\"\r\nafter\r\n\"/tmp/test/test.rb\"\r\n\"/tmp/test/hallo.rb\"\r\n\r\n/tmp \ue0b0 ruby -Ihallo start.rb\r\nbefore\r\n\"/home/thomas/.rvm/gems/ruby-2.4.0@global/gems/did_you_mean-1.1.0/lib/did_you_mean.rb\"\r\ntest.rb\r\n\"/home/thomas/.rvm/gems/ruby-2.4.0@global/gems/did_you_mean-1.1.0/lib/did_you_mean.rb\"\r\nafter\r\n\"/tmp/test/test.rb\"\r\n\"/tmp/hallo/hallo.rb\"\r\n~~~\r\n\r\nThe last two lines of the output should be the same (in my opinion) but differ.. What you can do is try to use ttfunk to get the metrics of the glyphs. Each glyph has a horizontal advancement, i.e. the x-distance from the current origin to the the point of the next placement of the glyph origin.\r\n\r\nHowever, there are additional measurements (also see http://chanae.walon.org/pub/ttf/ttf_glyphs.htm, in roughly the middle of the page), namely xMin and xMax which are, respectively, the left and right side of the bouding of the glyph.\r\n\r\nThose two could be used to do what you want:\r\n\r\n* Paint the 'P' glyph on the canvas\r\n* Move the point of origin `P_horizontal_advancement - P_x_max - i_x_min` to the left\r\n* Paint the 'i' glyph on the canvas. PDF is, more or less, designed to be printed. It didn't have transparency at all until version 1.4. You will find that the background is something the viewer displays, and not something the PDF file itself defines (normally). Therefore no, not possible because it depends on the viewer.. @pointlessone You could do something like I do for HexaPDF, see https://github.com/gettalong/hexapdf/blob/master/lib/hexapdf/font/type1_wrapper.rb#L149, i.e. using what's available in the AFM files and providing default values for the rest.. No, I don't think that there is a practical difference. It's just a bit better to follow the spec to be on the safe side.. @bradediger I have implemented this in a backwards-compatible way in #563, should pose no problems when being merged.\n. @sandal: Regarding `git filter-branch` et al - you wouldn't want to do that for a repo with so many forks because it changes the complete history, no commit checksum would be the same. I have done this for one of my projects but that only had a handful of forks and was more dead than alive at that moment...\n\nI think that just removing the fonts from the current repo would be okay since you can't get rid of them in already pushed gems anyway.\n. @sandal I wouldn't even add such a note because it only makes people notice. For example, I never knew that there were these fonts available in the repo or the gem :smile:. I would just remove them and let the commit message speak for itself.\n. @bradediger Please see pull request #553 for an implementation.\n. @bradediger This can be closed now - thanks for merging!\n. :+1: for merging this in\n. @elsurudo Have you tried PDFs generated with other applications if they exhibit the same issue? E.g. creating a PDF from a LibreOffice Writer document that contains a CMYK JPG? @ghinda said that the same problem applies to other libraries too, so maybe it is something on Illustrator's side.... @bradediger This issue can be closed since `rdoc/task` is now required in the `Rakefile` instead of `rake/rdoctask`.\n. I had some problems with the AFM fonts, too (i.e. bad width calculations for non-standard characters like `\u00bb`). They all disappeared when I started using TTF fonts.\n. It would help if you could provide sample code that exhibits the behavior.\n\nJust guessing: Is the dash between the year and month and between the month and day not an ASCII dash but an em-dash or an en-dash? If so, you might need to use a different font to show them correctly.\n. Also see the discussion on issue #496\n. @bradediger Thanks for merging, this issue can be closed then.\n. Or this:\n\n``` ruby\npdf.formatted_text([{:text => 'Github', :link => 'http://github.com/'}])\n```\n\nBoth versions are described in the [manual](http://prawn.majesticseacreature.com/manual.pdf)\n. @vanboom / @bradediger: Can this issue be closed since the question is answered?\n. Thank you!\n. No problem @bradediger :smile:! Thanks for you work on prawn. If I can help out with anything else, contact me!\n. See the `repeatable_content/repeater.rb` example. You would basically need to do something like this:\n\n```\nrepeat(:all, :dynamic => true) do\n  if page_number == 1\n    # do something for the first page\n  else\n    # do something for the rest of the pages\n  end\nend\n```\n\nI use exactly this for not showing a footer on the first page and it works perfectly.\n. @juanfal You can use a PDF as template when starting a new Prawn document or a new page.\n\n@letronje If the creation of the original PDF is under your control, you could just write the coordinates to an additional file and use this when creating the other PDF. Or you could try to use the pdf-reader or pdf-inspector gems for finding the image location.\n. @juanfal That is currently not possible. However, you may use the following branch of prawn which implements this functionality: https://github.com/yob/prawn/tree/pdf_images/\n. @sandal I merged the master branch but can't reproduce the problem... It seems to be some kind of encoding issue that doesn't occur on my system. Any ideas?\n. @sandal Done\n. @sandal FYI: I have tested with Ruby 1.9.3-p448 which exhibits this failure on Travis CI but not on my machine.\n. Thanks @bradediger for your detailed reply! I understand your view point.\n\nOne thing, though: The manual should probably be updated so that the users know that they have to escape `<`, `>` and `&`.\n. 100% agree with @bradediger - especially as this will slow down Prawn for **everyone**!\n\nI have _never_ seen production Ruby code with `sleep(x)` instructions...\n. The tests don't really matter - you don't put a sleep instruction into code for basically nothing. You put code in because the code should do something useful!\n\nIf Prawn would tend to all idiosyncrasies of all other Ruby libraries the code would explode.\n\nWhat you could try: Wrap the generation of the PDF with a Ruby thread that has a low priority (`Thread#priority`) and insert `Thread.pass` statements inside your code that generates the PDF to allow other threads to run.\n. :+1: \n. I don't know how Prawn does this but the thing is this:\n- A page can have zero, one or more content streams. See PDF1.7 s7.8.2. When processing content streams, a PDF reader starts at the first stream and when it is at its end, it continues with the next one **without** resetting the graphics state. So all content streams together act as if they were one.\n- When you create a page based on an existing page, the above has to be accounted for. I don't know how Prawn handles already existing content. However, you can make sure that everything is alright by adding a content stream with just a \"q\" before the content stream of the template and a content stream with just a \"Q\" after it. And the fourth content stream is created by Prawn.\n\nSo the page's /Contents array should look like (I don't use PDF references here) `[before template after prawn]` where 'before' is a stream with contents 'q', 'after' a stream with contents 'Q', 'template' the stream from the template and 'prawn' the stream that Prawn generates.\n\nLong story short: Try finding the place where Prawn generates the /Contents array and fix the problem there.\n. This could also lead to problems. The best way would be to generate the key, check if the `font_registry` has such a key and if it has, modify the key, then check again...\n. The size you are getting is of the A4 format but I can't say why.\n. Just as information for someone wanting to implement this: For this to work the color space of the image has to be set to /ICCBased and the ICC profile extracted from the image and embedded into the PDF as separate object (see PDF1.7 spec chapter 8.6.5.5 for ICCBased color spaces and chapter 8.9.5 for image dictionaries). I don't know if ICC profiles embedded in JPEG files are recognized by conformant PDF readers but I doubt it.\n. @Siyfion It would help if you could provide a small script that reproduces the error. As for external object streams specified via URLs: Yes, this should be possible, see section 7.11.5. However, I doubt that there would be much support for that feature.\n. @Siyfion I'm not _that_ paranoid ;) So thanks for the ZIP-File.\n\nWhat I can confirm right now is that the embedded font is not a valid TrueType font. When extracting the font stream and opening it with FontForge, it throws errors. However, if we replace the font with another one, like `Roboto-Regular.ttf`, everything works flawlessly.\n\nAlso, running `ttfdump -t glyf FILE` on the extracted font stream will give you an error after the second glyph (from 77). I think the problem comes from the Taviraj font using composite glyphs and ttfunk perhaps not properly supporting them but that is only a guess.\n\nWhat you experience with Acrobat may be that Acrobat re-subsets the font on save and therefore everything works correctly.\n. @Siyfion Did you open the original TrueType font or the one embedded into the PDF file? The original one works fine but the embedded one is corrupt.\n. @Siyfion Yes, the original file also works correctly for me but not the embedded subset of the file and, as you said, this means that subsetting does not work for this file.\n. @Siyfion Didn't have to investigate further, but I guess it will be somewhere here: https://github.com/prawnpdf/ttfunk/blob/master/lib/ttfunk/table/glyf.rb\n. @Siyfion No problem, I think I will some time today to have a look.\n. @Siyfion I tracked down the problem after some lengthy investigation (I'm not that familiar with ttfunk myself) and have opened an issue (see https://github.com/prawnpdf/ttfunk/issues/32) where you will also find the fix that you can apply to your ttfunk installation.\n. Just what I wanted to post :smile: - so here it goes:\n\nYou could probably use a a very large height for your document so that prawn doesn't automatically create a new one. And once you are finished with everything, use `Prawn::Document#y` to determine your current vertical position.\n\nThen you can use `Prawn::Document#page` (a `PDF::Core::Page` object) to adjust the MediaBox for the page, something like:\n\n```\nrequire 'prawn'\n\nPrawn::Document.generate(\"test.pdf\", page_size: [100, 2000], margin: 10) do |doc|\n  rand(100).times do\n    doc.text(\"some text\")\n  end\n  doc.page.dictionary.data[:MediaBox] = [0, doc.y - 10, 100, 2000]\nend\n```\n. @pointlessone I looked at it and it seems that `#write_stroke_color` is never used. In `spec/graphics_spec.rb` are tests for fill and stroke color, so that area has already tests and should be fine.\n\nAs a problem in this area would impact _a lot_ of people, I think that `#write_stroke_color` is now probably obsolete.\n. Can you provide a minimal example Ruby script that generates a PDF with the wrong color mode and post it here?\n. Thanks for the script but I don't see any problem in the resulting PDF - Adobe Reader is showing it just fine. Can you also provide your corrected version to find the difference?\n. Since access to proprietary software is limited, please help us out by providing some more information. This could be the resaved PDF file you mentioned initially or what you mean by \"color mode\".\n. Thanks for the color mode explanation!\n\nI have looked at the PDF content stream operators created by your example and they correctly set the /DeviceCMYK color space before setting the color values. I'm not an expert but from what I can see this should be all that needs to be done.\n\nCould you provide a PDF with the color mode changed to CMYK by using Adobe Illustrator? Maybe other values are set within the PDF file to make it appear differently.\n\nAnother question: Is there an actual difference when printing out both color versions of the PDF on the same printer?\n. @activestylus Thanks for the files but they contain vastly different files. To potentially find out the difference I will need the original PDF file and the original file opened in Illustrator and saved with the changed mode.\n\nThe two files RGB.pdf and CMYK.pdf look like the RGB example in the left on your pictures, i.e. no subdued colors, like on the right side. I looked at them using Evince on Linux and Reader on Windows.\n. Thanks for those, they help!\n\nAlas, I don't think that Prawn can do anything like you want.\n\nThe colors used for the CMYK rectangles as well as the RGB rectangles are (in that order):\n- For `rgb.pdf` only /DeviceRGB is used, so all the values below have to be interpreted as `R G B`\n  - `0 0.678 0.933`\n  - `0.922 0 0.545`\n  - `1 0.945 0`\n  - `0.137 0.122 0.125`\n  - `1 0 0`\n  - `0 1 0`\n  - `0 0 1`\n- For `cmyk.pdf` only /DeviceCMYK is used, so all the values below have to be interpreted as `C M Y K`:\n  - `1 0 0 0`\n  - `0 1 0 0`\n  - `0 0 1 0`\n  - `0 0 0 1`\n  - `0 0.988 1 0`\n  - `0.625 0 1 0`\n  - `0.879 0.766 0 0`\n\nAs you can see Adobe Illustrator is changing every /DeviceRGB color into a /DeviceCMYK color, probably using an ICC profile that you configured.\n\nSo it seems that the color mode change in Illustrator just does that: Changing every color either to /DeviceRGB or /DeviceCMYK. I couldn't find anything else that relates to the change.\n\nNote that inside a PDF (even in one content stream) you can _mix_ /DeviceRGB and /DeviceCMYK colors however you want! This is also supported by Prawn. If you specify a CSS color value for a color setter, it is interpreted as a /DeviceRGB color, if you use four values, as a /DeviceCMYK color.\n\nSo I don't think that the PDF files that Prawn generates are incorrect. If you want to use CMYK colors, than use CMYK color values in Prawn.\n\nYou may also read up on the Illustrator setting to see what it is supposed to do.\n. Thanks for the follow up but what you found has nothing to do with PDF itself. For example, the data you show on the right side of the picture concerning `white-rgb.pdf` is inside the PDF object (53,0), referenced from PDF object (52,) via the key AIMetaData.\n\nThese two objects don't belong to PDF itself but to private data embedded by Illustrator. They are useless for any conforming PDF reader because they are not part of the PDF spec. Therefore probably no program except Illustrator will look at the data.\n\nSo if you want that conversion to happen automatically, you will need to find out what _exactly_ Illustrator does with the colors and manually change the color values and color spaces, which will probably not be so easy.\n. @meisterluk If you are using a TTF, `font/afm.rb` should never be used because it is only used for the built-in PDF fonts. The `#normalize_encoding` method of `font/ttf.rb` transcodes the text to UTF-8, so that should be okay.\n\nSo maybe the font fallback facility of Prawn comes into play?\n\nCan you provide a small sample text and instructions on how to reproduce the error?\n. @meisterluk As I said I don't think that soft_hyphen is UTF-8 since you are using TTF and TTF fonts use UTF-8 encoding in Prawn.\n. @meisterluk Btw. I can reproduce the problem using your instructions but haven't had time to look into this further.\n. @meisterluk The part `@soft_hyphen.encoding` is not the critical part but a symptom of another cause, most likely a false font. \n\nWhen I run your MWE the font `Prawn::Font::TTF< /tmp/mwe/fonts/Andada-Regular.ttf: 12 >` is used when no error happens, but `Prawn::Font::AFM< Courier: 12 >` when it does.\n\nAs I  said before AFM fonts in Prawn always use WIN1252 encoding and not UTF-8 which causes this problem. So where does this AFM font come from?\n\nFrom what I found most likely from `asciidoctor-pdf-1.5.0.alpha.12/lib/asciidoctor-pdf/formatted_text/transform.rb:37` but I will need to dig a bit further to confirm this.\n. The problem is not Andada, the problem is the combination of Andada with Courier.\n\n> Small journey into the PDF spec: PDF has different ways to use fonts:\n> - The easiest way is to use the so called \"standard 14 PDF fonts\". These are so called Type 1 fonts and they have to be available on an reader and therefore no font information (i.e. font file) needs to be embedded into the PDF. These fonts are only available as so called simple fonts.\n> - Another way is to use a font file, with or without embedding it. This is done for general Type1 fonts, TrueType fonts and OpenType fonts. There are two ways to embed fonts, as a simple font (this is how Prawn embeds TTF) and as a composite font.\n\nSo, what does this have to do with this problem? Prawn is able to use both kinds of fonts, ie. it can use the standard 14 PDF fonts by using so called AFM files that provided the required information like character code to glyph mapping or with of a glyph. Or it can use TrueType fonts through the `ttfunk` library.\n\nAlas, working with fonts is hard and that is not the whole story. Once you have the font you have to decide on the **encoding** you want to use with the font. The encoding defines either predefined mapping from character codes to glyphs/UTF-8 values or a custom one.\n\nLike there are predefined fonts in PDF, there are predefined encodings, one of them being the WinAnsiEncoding (see http://wwwimages.adobe.com/content/dam/Adobe/en/devnet/pdf/pdfs/PDF32000_2008.pdf, Annex D):\n- Prawn uses this encoding by default for the standard 14 fonts and it is the only encoding when working with the standard 14 fonts in Prawn. As it so happens Ruby supports different _string encodings_, one of them being WINDOWS-1252 which is equivalent to the WinAnsiEncoding of PDF. So by using this encoding directly on strings Prawn doesn't need to transcode things, resulting in better performance.\n- When using TrueType fonts in Prawn, the WinAnsiEncoding is also used by default but in contrast to the standard 14 fonts only internally. On the API side UTF-8 encoding is used throughout for strings and later mapped to the WinAnsiEncoding or a custom encodings so that UTF-8 characters like emoticons can be encoded.\n\nAnd _this_ is the root of the problem, the use of different encodings for different **kinds** of fonts.\n\nSo, back to the issue at hand :wink:\n\nHave a look at https://github.com/asciidoctor/asciidoctor-pdf/blob/master/docs/theming-guide.adoc#fonts - there you will find some more information regarding fonts and encodings in context of Asciidoctor PDF.\n\nWhat you will also find there is the key `literal.font_family`. By using a TrueType font instead of the built-in Type 1 font, you will find **that everything works**!\n\nHere is a changed `mybook-theme.yml` that doesn't generate an error:\n\n``` yaml\nfont:\n  catalog:\n    Andada:\n      normal: fonts/Andada-Regular.ttf\n      bold: fonts/Andada-Bold.ttf\n    DejaVu:\n      normal: /usr/share/fonts/truetype/dejavu/DejaVuSansMono.ttf\n      bold: /usr/share/fonts/truetype/dejavu/DejaVuSansMono-Bold.ttf\n      italic: /usr/share/fonts/truetype/dejavu/DejaVuSansMono-Oblique.ttf\n\npage:\n  margin: [0.75in, 1in, 0.75in, 1in]\nbase:\n  font:\n    color: black\n    family: Andada\n    size: 12\n\nliteral:\n  font_family: DejaVu\n```\n\nSo, there is certainly an issue in Prawn regarding this encodings but it can easily be solved by using TrueType fonts throughout!\n. @meisterluk Hm... I tried your example but it works fine in both cases for me.\n\n```\nAsciidoctor PDF 1.5.0.alpha.12 using Asciidoctor 1.5.4 [http://asciidoctor.org]\nRuntime Environment (ruby 2.3.1p112 (2016-04-26 revision 54768) [x86_64-linux]) (lc:UTF-8 fs:UTF-8 in:- ex:UTF-8)\n```\n\nAs for the word \"solved\": Yes, work around is better but I closed this issue because there is already another open issue for this problem.\n. @meisterluk What is the encoding of the `test.adoc` file? I just copied it from the browser, so the \u00f6 is encoded as UTF-8 in my case. In you case it seems that the UTF-8 sequence of \u00f6 has been interpreted as Windows-1252, as if `\"\u00f6\".force_encoding('Windows-1252')` has been called.\n. @meisterluk I posted that already: `Asciidoctor PDF 1.5.0.alpha.12 using Asciidoctor 1.5.4`, so the same as you.\n. @garrettstott Alas, the PDF provided by @malagant is not a valid PDF (the cross-reference table is invalid) and he provided no useful sample code that can be executed locally (i.e. without rails). If you provide such a sample code (similar to what you already provided but including all resources), it will be easier to see where the problem is.. @DoWhileGeek No, will probably not be fixed in kramdown's PDF converter since it provides only the basics. If you need more than that you need to subclass the PDF converter and provide the additional functionality, like remote images and so on.\n. @DoWhileGeek Sure\n. See pull request #1001 for a fix. @mrj I gather this is still a problem? The image path seems to be invalid, so it is hard to see what's wrong.\r\n\r\nHowever, the problem may be that when you set a font height of 3mm a line of text is larger because Prawn doesn't just use the height of the individual characters but actually the font's ascender and descender. Additionally, fonts *may* contain characters that go beyond the ascender and descender which would also be a problem.. @gioele Using PDFs as image format requires a PDF parser which Prawn doesn't have. However, Prawn can use the `pdf-reader` and `prawn-templates` gems for using PDFs as template for a page. Maybe this functionality could be reused for image support? @bvogel might know more about this.. @fidothe I agree with @pointlessone that this is primarily not Prawn's problem but probably some invalid behaviour on part of bundler or require or require_relative; see this example:\r\n\r\n~~~\r\n/tmp \ue0b0 cat start.rb\r\nrequire 'hallo'\r\np $\".last\r\n\r\n/tmp \ue0b0 ll -d hallo test\r\nlrwxrwxrwx 1 thomas thomas    4 Jun 24 14:43 hallo -> test/\r\ndrwxrwxr-x 2 thomas thomas 4096 Jun 24 15:03 test/\r\n\r\n/tmp \ue0b0 cat test/hallo.rb\r\nputs \"before\"\r\np $\".last\r\nrequire_relative 'test.rb'\r\nputs \"after\"\r\np $\".last\r\n\r\n/tmp \ue0b0 cat test/test.rb\r\nputs \"test.rb\"\r\np $\".last\r\n\r\n/tmp \ue0b0 ruby -Itest start.rb\r\nbefore\r\n\"/home/thomas/.rvm/gems/ruby-2.4.0@global/gems/did_you_mean-1.1.0/lib/did_you_mean.rb\"\r\ntest.rb\r\n\"/home/thomas/.rvm/gems/ruby-2.4.0@global/gems/did_you_mean-1.1.0/lib/did_you_mean.rb\"\r\nafter\r\n\"/tmp/test/test.rb\"\r\n\"/tmp/test/hallo.rb\"\r\n\r\n/tmp \ue0b0 ruby -Ihallo start.rb\r\nbefore\r\n\"/home/thomas/.rvm/gems/ruby-2.4.0@global/gems/did_you_mean-1.1.0/lib/did_you_mean.rb\"\r\ntest.rb\r\n\"/home/thomas/.rvm/gems/ruby-2.4.0@global/gems/did_you_mean-1.1.0/lib/did_you_mean.rb\"\r\nafter\r\n\"/tmp/test/test.rb\"\r\n\"/tmp/hallo/hallo.rb\"\r\n~~~\r\n\r\nThe last two lines of the output should be the same (in my opinion) but differ.. What you can do is try to use ttfunk to get the metrics of the glyphs. Each glyph has a horizontal advancement, i.e. the x-distance from the current origin to the the point of the next placement of the glyph origin.\r\n\r\nHowever, there are additional measurements (also see http://chanae.walon.org/pub/ttf/ttf_glyphs.htm, in roughly the middle of the page), namely xMin and xMax which are, respectively, the left and right side of the bouding of the glyph.\r\n\r\nThose two could be used to do what you want:\r\n\r\n* Paint the 'P' glyph on the canvas\r\n* Move the point of origin `P_horizontal_advancement - P_x_max - i_x_min` to the left\r\n* Paint the 'i' glyph on the canvas. PDF is, more or less, designed to be printed. It didn't have transparency at all until version 1.4. You will find that the background is something the viewer displays, and not something the PDF file itself defines (normally). Therefore no, not possible because it depends on the viewer.. ",
    "ghost": "Hello Sandal, sorry, my bad. Somehow I didn't connect the dots because I wasn't aware that using html was a function of prawn-format.\nI did read it now. So Prawn 0.7.1 has no more support for HTML tags.\n\nI will be fine with Prawn 0.6.3, but I need text_box to work with html tags. I could not find any information if it is supported.\n. i need this for my own project. thanks to dlitz. my solution is on https://github.com/moessimple/prawn-fillform. perhaps it is helpful. it supports only text fields and images (through buttons).\n. Excuse the issue. Found the previous issue here: https://github.com/sandal/prawn/issues/3\nBeen in Prawn for 2 years? Sorry I didn't realize. Going to try to figure out how it works now.\n. This is happening for, too, on Mac OS X 10.6.8. The app has no problems generating the pdf but db:test:prepare fails.\n\n**Leigh\n\n---\n\n$ rake db:test:prepare\nrake aborted!\nno such file to load -- prawn\n\nTasks: TOP => db:test:prepare => db:abort_if_pending_migrations => environment\n(See full trace by running task with --trace)\n\n---\n\nrails -v\nRails 3.1.0.rc4\n\n---\n\n  ruby:\n    interpreter:  \"ruby\"\n    version:      \"1.9.2p180\"\n    date:         \"2011-02-18\"\n    platform:     \"x86_64-darwin10.7.0\"\n    patchlevel:   \"2011-02-18 revision 30909\"\n    full_version: \"ruby 1.9.2p180 (2011-02-18 revision 30909) [x86_64-darwin10.7.0]\"\n\n---\n\ngem list prawn\n\n**\\* LOCAL GEMS ***\n\nprawn (0.11.1)\nprawnto (0.0.4)\n. I think for me it was an installation issue.\n\nRTFM: Cloning prawnto into vendors/plugins makes the tests work. After doing that, I get:\n\nDEPRECATION WARNING: Inheriting from ActionView::Template::Handler is deprecated. \nSince Rails 3, all the API your template handler needs to implement is to respond to #call. \n(called from module:TemplateHandlers at  \n/Users/leigh/Programming/wapp_dev/cdjobs/vendor/plugins/prawnto/lib/prawnto/template_handlers/base.rb:3) \n\nwhich makes it a prawnto issue.\n\n**Leigh\n. Hi!\n\nThanks.\n\nI now installed ttfunk. But from source. :)\n\nI think this issue here can be closed, prawn recommends to use \"gem\" consistently and does not encourage ways to install without gems, which is totally fine! Many projects do.\n. Hi.\n\nI compiled ruby from source into /Programs/Ruby/1.9.3p194 but now that\nyou mention that, I think that was the problem. \n\nThe array.rb file contained my modifications I used in Ruby 1.8.7 and now\nthat I am on 1.9.3, some things don't need to be used as is there anymore.\n\nI even defined a to_hash method there, which was the culprit. :/\n\nI changed that and now prawn suddenly works fine. The .pdf example\nwas also generated.\n\nSorry for the bother. :)\n\nI will close this issue now.\n. That is not a fix nor an explanation either.\n\nThat would not allow me to make use of prawn in derived classes when I am not allowed to use -W.\n\nHow else could I get warnings displayed in my classes but not in Prawn whenever I tap into the Prawn library?\n. Gregory, it is time to say it - I <3 your work on prawn. :)  (There was an older \"port\", ruby-freepdf (fpdf) loosely based on the php-pdf, but it never was high quality code, very difficult to navigate and modify; prawn is much much better from a technical point of view)\n. I can not speak for the use case of anyone else, but I believe for symmetry, it would be nice to be able to remove pages too, simply because it is also possible to add them.\n\nI have not needed it myself yet, but I am auto-generating documentation from a html page (I handle the HTML generation and parsing on my own; once it is finished, I delegate it to prawn), and perhaps I may decide to add or remove pages lateron; I could probably filter prior to sending to prawn too, fair enough, but I may also just happily get rid of some pages like \"take out page 11-25, but keep the last page, and the first ten\"\n. > I'd also like to see a method to check if a page is blank.\n\nPerhaps a method called .blank? could be added? Unsure whether it conflicts with anything else, I am not very familiar with the prawn codebase (yet).\n. I also needed to remove page and I think the problem I encountered might concern other people :\n\nmy templates consists of blocks that are dynamically generated, but everything must fit in one page.\nHence, I generate the page multiple times and shrink content or expand it if necessary and I end up removing the unnecessary pages.\n\nI'm doing it with combine pdf but I'd rather stay in house with prawn and avoid multiplying the gems.\n\nSummary -> how would one adapt content to fit page size if not by trying to render and removing pages in excess ?\n\npardon my english.\n. I like the way you hacked it, it must be faster than my way, since I try many times until I get the page I want. If you still want to remove a page :\n\n``` ruby\n    require \"prawn\"\n    require \"combine_pdf\"\n\n    def show\n        fiche=Fich.find(params[:id])\n        pages_that_will_be_destroyed=[]\n#Create a new empty pdf with prawn\n#Somwhere I have a Class PdfGenerator< Prawn::Document vv\n        temp_pdf = PdfGenerator.new(:page_size => 'A4',:margin => 20)\n#Get an array of all the pages that need to be destroyed\n#une_fiche is a method that will generate the page using the params fiche\n        pages_that_will_be_destroyed = temp_pdf.une_fiche(fiche)\n#Use combine PDF to remove all the pages I don't need in reverse order\n        pdf = CombinePDF.parse temp_pdf.render\n        pages_that_will_be_destroyed.reverse.each do |numero_page|\n            pdf.remove(numero_page-1)\n        end\n        send_data pdf.to_pdf, filename: fiche.titre+'.pdf', type: 'application/pdf'\n    end\n```\n. I settled for pdftk; its syntax is awful and not a lot of fun...\n\ndfockler on IRC made me aware of the thread here again. :)\n\nTo delete page 12 in pdftk you have to use something WEIRD like:\n\n```\npdftk in.pdf cat 1-11 13-end output output_file.pdf\n```\n\nThankfully I can use ruby to help me delete a specific page\nusing pdftk. So a class I can feed something like \"12\" from\nthe commandline and then it will calculate the rest for me\nand invoke pdftk.\n\nBut it would be so much nicer to have this doable via prawn instead.\n\nClean happy ruby syntax.\n. Since, for my use, the inline format is only in color I've found a workaround\n\n``` ruby\ntemp_content=content.gsub(/<color rgb='[a-f0-9]{6}'>|<\\/color>/i,'')\nwidth_of(temp_content, { :size=>19 })\ntext content,\n :size => 19,\n :inline_format => true\n```\n. Oook. I figured this out, it's because I'm calling \"start_new_page\", which doesn't check if there's already a page ahead of the current page or not - which leads to multiple pages with the same effective page number, which confuses a bunch of stuff in the internals. \"bounds.move_past_bottom\" DOES perform this check though, so using that should solve my issue.\r\n\r\nI can't tell if this is intended or not though, so leaving it open until someone comments. The fact that it leads to a broken PDF means it should possibly at least have some sort of error or warning that what you're doing is not going to work?. Ok no I retract that statement; that fixes my min repro, but it doesn't affect the asciidoctor work for some reason, and I don't know why.... Right, looks like asciidoctor-pdf is calling start_new_page when it should be calling move_past_bottom in places that I haven't touched. Still leaving this open to ask if this is intended or not, but at least I know how to fix it now.... Warnings that are not important should ideally not be shown.\r\n\r\nIn the example above, this tends to happen when there are wrong or flawed require calls being processed. Ideally these constants should be required only once but it appears that some code requires it more than once. I do not know require_relative well enough to comment on it, but in my own ruby code when I use requires, above warnings only happen when I require the .rb files incorrectly, often in improper order.\r\n\r\nIf it helps anyone else, I usually start with important constant definitions first, in a file that is usually, aptly called, constants.rb :D. To be honest, it may be better to actually include it as part of prawn directly, while displaying a warning that it is not recommended to use it perhaps.. Hello Sandal, sorry, my bad. Somehow I didn't connect the dots because I wasn't aware that using html was a function of prawn-format.\nI did read it now. So Prawn 0.7.1 has no more support for HTML tags.\n\nI will be fine with Prawn 0.6.3, but I need text_box to work with html tags. I could not find any information if it is supported.\n. i need this for my own project. thanks to dlitz. my solution is on https://github.com/moessimple/prawn-fillform. perhaps it is helpful. it supports only text fields and images (through buttons).\n. Excuse the issue. Found the previous issue here: https://github.com/sandal/prawn/issues/3\nBeen in Prawn for 2 years? Sorry I didn't realize. Going to try to figure out how it works now.\n. This is happening for, too, on Mac OS X 10.6.8. The app has no problems generating the pdf but db:test:prepare fails.\n\n**Leigh\n\n---\n\n$ rake db:test:prepare\nrake aborted!\nno such file to load -- prawn\n\nTasks: TOP => db:test:prepare => db:abort_if_pending_migrations => environment\n(See full trace by running task with --trace)\n\n---\n\nrails -v\nRails 3.1.0.rc4\n\n---\n\n  ruby:\n    interpreter:  \"ruby\"\n    version:      \"1.9.2p180\"\n    date:         \"2011-02-18\"\n    platform:     \"x86_64-darwin10.7.0\"\n    patchlevel:   \"2011-02-18 revision 30909\"\n    full_version: \"ruby 1.9.2p180 (2011-02-18 revision 30909) [x86_64-darwin10.7.0]\"\n\n---\n\ngem list prawn\n\n**\\* LOCAL GEMS ***\n\nprawn (0.11.1)\nprawnto (0.0.4)\n. I think for me it was an installation issue.\n\nRTFM: Cloning prawnto into vendors/plugins makes the tests work. After doing that, I get:\n\nDEPRECATION WARNING: Inheriting from ActionView::Template::Handler is deprecated. \nSince Rails 3, all the API your template handler needs to implement is to respond to #call. \n(called from module:TemplateHandlers at  \n/Users/leigh/Programming/wapp_dev/cdjobs/vendor/plugins/prawnto/lib/prawnto/template_handlers/base.rb:3) \n\nwhich makes it a prawnto issue.\n\n**Leigh\n. Hi!\n\nThanks.\n\nI now installed ttfunk. But from source. :)\n\nI think this issue here can be closed, prawn recommends to use \"gem\" consistently and does not encourage ways to install without gems, which is totally fine! Many projects do.\n. Hi.\n\nI compiled ruby from source into /Programs/Ruby/1.9.3p194 but now that\nyou mention that, I think that was the problem. \n\nThe array.rb file contained my modifications I used in Ruby 1.8.7 and now\nthat I am on 1.9.3, some things don't need to be used as is there anymore.\n\nI even defined a to_hash method there, which was the culprit. :/\n\nI changed that and now prawn suddenly works fine. The .pdf example\nwas also generated.\n\nSorry for the bother. :)\n\nI will close this issue now.\n. That is not a fix nor an explanation either.\n\nThat would not allow me to make use of prawn in derived classes when I am not allowed to use -W.\n\nHow else could I get warnings displayed in my classes but not in Prawn whenever I tap into the Prawn library?\n. Gregory, it is time to say it - I <3 your work on prawn. :)  (There was an older \"port\", ruby-freepdf (fpdf) loosely based on the php-pdf, but it never was high quality code, very difficult to navigate and modify; prawn is much much better from a technical point of view)\n. I can not speak for the use case of anyone else, but I believe for symmetry, it would be nice to be able to remove pages too, simply because it is also possible to add them.\n\nI have not needed it myself yet, but I am auto-generating documentation from a html page (I handle the HTML generation and parsing on my own; once it is finished, I delegate it to prawn), and perhaps I may decide to add or remove pages lateron; I could probably filter prior to sending to prawn too, fair enough, but I may also just happily get rid of some pages like \"take out page 11-25, but keep the last page, and the first ten\"\n. > I'd also like to see a method to check if a page is blank.\n\nPerhaps a method called .blank? could be added? Unsure whether it conflicts with anything else, I am not very familiar with the prawn codebase (yet).\n. I also needed to remove page and I think the problem I encountered might concern other people :\n\nmy templates consists of blocks that are dynamically generated, but everything must fit in one page.\nHence, I generate the page multiple times and shrink content or expand it if necessary and I end up removing the unnecessary pages.\n\nI'm doing it with combine pdf but I'd rather stay in house with prawn and avoid multiplying the gems.\n\nSummary -> how would one adapt content to fit page size if not by trying to render and removing pages in excess ?\n\npardon my english.\n. I like the way you hacked it, it must be faster than my way, since I try many times until I get the page I want. If you still want to remove a page :\n\n``` ruby\n    require \"prawn\"\n    require \"combine_pdf\"\n\n    def show\n        fiche=Fich.find(params[:id])\n        pages_that_will_be_destroyed=[]\n#Create a new empty pdf with prawn\n#Somwhere I have a Class PdfGenerator< Prawn::Document vv\n        temp_pdf = PdfGenerator.new(:page_size => 'A4',:margin => 20)\n#Get an array of all the pages that need to be destroyed\n#une_fiche is a method that will generate the page using the params fiche\n        pages_that_will_be_destroyed = temp_pdf.une_fiche(fiche)\n#Use combine PDF to remove all the pages I don't need in reverse order\n        pdf = CombinePDF.parse temp_pdf.render\n        pages_that_will_be_destroyed.reverse.each do |numero_page|\n            pdf.remove(numero_page-1)\n        end\n        send_data pdf.to_pdf, filename: fiche.titre+'.pdf', type: 'application/pdf'\n    end\n```\n. I settled for pdftk; its syntax is awful and not a lot of fun...\n\ndfockler on IRC made me aware of the thread here again. :)\n\nTo delete page 12 in pdftk you have to use something WEIRD like:\n\n```\npdftk in.pdf cat 1-11 13-end output output_file.pdf\n```\n\nThankfully I can use ruby to help me delete a specific page\nusing pdftk. So a class I can feed something like \"12\" from\nthe commandline and then it will calculate the rest for me\nand invoke pdftk.\n\nBut it would be so much nicer to have this doable via prawn instead.\n\nClean happy ruby syntax.\n. Since, for my use, the inline format is only in color I've found a workaround\n\n``` ruby\ntemp_content=content.gsub(/<color rgb='[a-f0-9]{6}'>|<\\/color>/i,'')\nwidth_of(temp_content, { :size=>19 })\ntext content,\n :size => 19,\n :inline_format => true\n```\n. Oook. I figured this out, it's because I'm calling \"start_new_page\", which doesn't check if there's already a page ahead of the current page or not - which leads to multiple pages with the same effective page number, which confuses a bunch of stuff in the internals. \"bounds.move_past_bottom\" DOES perform this check though, so using that should solve my issue.\r\n\r\nI can't tell if this is intended or not though, so leaving it open until someone comments. The fact that it leads to a broken PDF means it should possibly at least have some sort of error or warning that what you're doing is not going to work?. Ok no I retract that statement; that fixes my min repro, but it doesn't affect the asciidoctor work for some reason, and I don't know why.... Right, looks like asciidoctor-pdf is calling start_new_page when it should be calling move_past_bottom in places that I haven't touched. Still leaving this open to ask if this is intended or not, but at least I know how to fix it now.... Warnings that are not important should ideally not be shown.\r\n\r\nIn the example above, this tends to happen when there are wrong or flawed require calls being processed. Ideally these constants should be required only once but it appears that some code requires it more than once. I do not know require_relative well enough to comment on it, but in my own ruby code when I use requires, above warnings only happen when I require the .rb files incorrectly, often in improper order.\r\n\r\nIf it helps anyone else, I usually start with important constant definitions first, in a file that is usually, aptly called, constants.rb :D. To be honest, it may be better to actually include it as part of prawn directly, while displaying a warning that it is not recommended to use it perhaps.. ",
    "webwarelab": "Yeah, that is true.\n. Yeah, that is true.\n. ",
    "bjensen": "Yeah I did. Maybe wait with the merge till the errors are fixed? I got a long train ride saturday, I can take a look at them during the trip if you want?\n. I see your point. I remember running the tests and they were sucess, mostlikely before removing the @y assignment :p\n. Yeah I did. Maybe wait with the merge till the errors are fixed? I got a long train ride saturday, I can take a look at them during the trip if you want?\n. I see your point. I remember running the tests and they were sucess, mostlikely before removing the @y assignment :p\n. ",
    "gregblass": "This is causing a problem in our web app. Please address this issue ASAP!\n. Ah, OK. Sorry to be pushy. I understand. We tried to use the bounding box method mentioned above but could not get results. Are you sure that this works?\n. An easy workaround to this is to use groups if you can. Worked great in our case.\n. Also ran into this problem.\n. This is causing a problem in our web app. Please address this issue ASAP!\n. Ah, OK. Sorry to be pushy. I understand. We tried to use the bounding box method mentioned above but could not get results. Are you sure that this works?\n. An easy workaround to this is to use groups if you can. Worked great in our case.\n. Also ran into this problem.\n. ",
    "Spiralis": "I am really, really interested in this feature. I can't believe that this isn't in by default? I created some contracts for a customer of mine and the logo I added is really low quality. I must say I am surprised that this isn't in? What harm could it do? \n. First of all: I am really sorry if this was perceived as being rude. It was not at all meant that way.It was indeed disbelief. I felt strongly for this feature and could not believe why it wasn't included? It was in no way harsh. I am really sorry if that was the way it was received. I am _truly_ happy about prawn existing and those who know me know that I am anything but rude. \n\nAgain, sorry for being perceived that way.\n. I feel I have to follow up this with a second post. When I saw your response shivers went down my spine. I have been working with software and the FOSS community for quite a while, I have never even been close to being called a \"dick\" before. Apology accepted though. I understand how it was misunderstood. Please, next time do ask what the real intention was instead of automatically assuming the worst.\n\nThe disbelief is meant to emphasize **how** nice I believe that feature to be, and that I didn't understand the rationale for why it wasn't accepted, especially since I couldn't see any bad side-effects. \n\nFor the completeness (as you ask for) is @krainboltgreene's reply, which I felt was an appropriate and kind response to your reply:\n\n```\n> The fact of having a right to something\n\n>   - full entitlement to fees and maintenance should be offered\n>   - you should be fully aware of your legal entitlements\n> [source](http://www.google.com/search?hl=en&sa=X&q=entitlement&tbs=dfn:1&tbo=uei=qP8ATr27HZTWtQOTlNyjDQ&ved=0CCIQkQ4)\n\nWhat you attribute to *entitlement*, or *rudeness*, is actually **disbelief**. Here are examples of actual entitlement:\n\n> This feature needs to be added now.\n>\n> Why haven't you added this feature already when I clearly want it?\n>\n> You have to add this feature! I demand it!\n\nI hope this helps.\n```\n. I understand sandal, thanks. And I understand the concerns about extra commitment. I just felt that if there's a support for background, then surely there must be an option to scale the background, as the default dpi really makes the image look bad. But, I understand that not everybody feel that way. I guess I am with @amoeba from the referenced google groups-thread - feeling that this is natural, given that background exist. \n\nThe suggestion @bradediger has is all ok for me. It is not as neat as the constructor one, but still fairly easy to set up. And, digging further into this, I guess the most common use-cases for these are for setting up:\n- header (possibly different first page and/or different odd/even page)\n- footer (same as header)\n- and possibly a title page (first page)\n  All cases above are common, and I guess in most times it will involve an image, but not always. \n\nI guess the repeat could be used to make this somewhat easy to set up?\n\nRight now I have forked sandals repository and monkey-patched @cassiomarques patch into it (since it didn't merge cleanly). I'd love to stop having to update my own fork and get back to using the official version. This probably means that I should be following the fork queue from @bradediger as a starter :)\n\nAs a side-note. I am sorry to hear that Prawn has had such a troublesome past. I love it, and it has served me well for the few weeks i have done work with it.\n\nSo, to those of you who has contributed on this: A sincere thank you for your effort! Ruby needs this, meaning: Ruby needs you :)\n. I am really, really interested in this feature. I can't believe that this isn't in by default? I created some contracts for a customer of mine and the logo I added is really low quality. I must say I am surprised that this isn't in? What harm could it do? \n. First of all: I am really sorry if this was perceived as being rude. It was not at all meant that way.It was indeed disbelief. I felt strongly for this feature and could not believe why it wasn't included? It was in no way harsh. I am really sorry if that was the way it was received. I am _truly_ happy about prawn existing and those who know me know that I am anything but rude. \n\nAgain, sorry for being perceived that way.\n. I feel I have to follow up this with a second post. When I saw your response shivers went down my spine. I have been working with software and the FOSS community for quite a while, I have never even been close to being called a \"dick\" before. Apology accepted though. I understand how it was misunderstood. Please, next time do ask what the real intention was instead of automatically assuming the worst.\n\nThe disbelief is meant to emphasize **how** nice I believe that feature to be, and that I didn't understand the rationale for why it wasn't accepted, especially since I couldn't see any bad side-effects. \n\nFor the completeness (as you ask for) is @krainboltgreene's reply, which I felt was an appropriate and kind response to your reply:\n\n```\n> The fact of having a right to something\n\n>   - full entitlement to fees and maintenance should be offered\n>   - you should be fully aware of your legal entitlements\n> [source](http://www.google.com/search?hl=en&sa=X&q=entitlement&tbs=dfn:1&tbo=uei=qP8ATr27HZTWtQOTlNyjDQ&ved=0CCIQkQ4)\n\nWhat you attribute to *entitlement*, or *rudeness*, is actually **disbelief**. Here are examples of actual entitlement:\n\n> This feature needs to be added now.\n>\n> Why haven't you added this feature already when I clearly want it?\n>\n> You have to add this feature! I demand it!\n\nI hope this helps.\n```\n. I understand sandal, thanks. And I understand the concerns about extra commitment. I just felt that if there's a support for background, then surely there must be an option to scale the background, as the default dpi really makes the image look bad. But, I understand that not everybody feel that way. I guess I am with @amoeba from the referenced google groups-thread - feeling that this is natural, given that background exist. \n\nThe suggestion @bradediger has is all ok for me. It is not as neat as the constructor one, but still fairly easy to set up. And, digging further into this, I guess the most common use-cases for these are for setting up:\n- header (possibly different first page and/or different odd/even page)\n- footer (same as header)\n- and possibly a title page (first page)\n  All cases above are common, and I guess in most times it will involve an image, but not always. \n\nI guess the repeat could be used to make this somewhat easy to set up?\n\nRight now I have forked sandals repository and monkey-patched @cassiomarques patch into it (since it didn't merge cleanly). I'd love to stop having to update my own fork and get back to using the official version. This probably means that I should be following the fork queue from @bradediger as a starter :)\n\nAs a side-note. I am sorry to hear that Prawn has had such a troublesome past. I love it, and it has served me well for the few weeks i have done work with it.\n\nSo, to those of you who has contributed on this: A sincere thank you for your effort! Ruby needs this, meaning: Ruby needs you :)\n. ",
    "cassiomarques": "Spirals, \n\nI'm the guy who sent the pull request with the feature. Back in the day it was discussed here: http://groups.google.com/group/prawn-ruby/browse_thread/thread/2aea4e64eae840bd/5c57b6fa7d809210\n\nBasically, you can do the same thing using some other Prawn features. I think the idea was to not add bloat to Prawn if we could achieve the same thing with the existing code. That was reasonable for me :)\n. Spirals, \n\nI'm the guy who sent the pull request with the feature. Back in the day it was discussed here: http://groups.google.com/group/prawn-ruby/browse_thread/thread/2aea4e64eae840bd/5c57b6fa7d809210\n\nBasically, you can do the same thing using some other Prawn features. I think the idea was to not add bloat to Prawn if we could achieve the same thing with the existing code. That was reasonable for me :)\n. ",
    "dimasivanov": "Ok, but how i can render this indentation:\n\n```\n   Prawn::Document.generate('x.pdf\") do \n   text \"              xxxxxx\n               xxxxxx      \n                   xxxxxxxxxxxxx\"\n   end\n```\n\n:indent_paragraphs property couldn`t help me with this. \n. Ok, but how i can render this indentation:\n\n```\n   Prawn::Document.generate('x.pdf\") do \n   text \"              xxxxxx\n               xxxxxx      \n                   xxxxxxxxxxxxx\"\n   end\n```\n\n:indent_paragraphs property couldn`t help me with this. \n. ",
    "thbar": "Here's an example of how to do this using non-breaking spaces (here to display some code):\n\n```\ncontent = \"def function(param)\\n  puts 'this'\\nend\"\ncontent = content.gsub(/^(\\s+)/m) { |m| \"\\xC2\\xA0\" * m.size }\nfont \"courier\" do\n  text content\nend\n```\n. Here's an example of how to do this using non-breaking spaces (here to display some code):\n\n```\ncontent = \"def function(param)\\n  puts 'this'\\nend\"\ncontent = content.gsub(/^(\\s+)/m) { |m| \"\\xC2\\xA0\" * m.size }\nfont \"courier\" do\n  text content\nend\n```\n. ",
    "ykessler": "@thbar your example breaks if you have multiple newlines. Use this instead:\n\n```\ncontent = content.gsub(/^([^\\S\\r\\n]+)/m) { |m| \"\\xC2\\xA0\" * m.size }\n```\n\nFrom http://stackoverflow.com/a/17752989/165673\n. @sandal No problem- let me know if you need further info/tests. Thanks-\n. @thbar your example breaks if you have multiple newlines. Use this instead:\n\n```\ncontent = content.gsub(/^([^\\S\\r\\n]+)/m) { |m| \"\\xC2\\xA0\" * m.size }\n```\n\nFrom http://stackoverflow.com/a/17752989/165673\n. @sandal No problem- let me know if you need further info/tests. Thanks-\n. ",
    "cthiel": "Thanks for the hint! I'm using DejaVuSans.ttf from http://dejavu-fonts.org/ now to work around this issue.\n. Thanks for the hint! I'm using DejaVuSans.ttf from http://dejavu-fonts.org/ now to work around this issue.\n. ",
    "rolfb": "very cool \u2013 i hacked the font to have extra leading, will change soon\n. very cool \u2013 i hacked the font to have extra leading, will change soon\n. ",
    "kalerzz": "Fixed! :)\n. Outline#insert_section_after() just inserts a new section at the same level.\nWhat I propose is to insert a new subsection given a section...\n. Actually I tried to deep into the outline source code, but I didn't find how to add such a feature...\nMaybe the main author would have a better view of what it is possible and how...\n\nSorry for my incompetence :(\n. Fixed! :)\n. Outline#insert_section_after() just inserts a new section at the same level.\nWhat I propose is to insert a new subsection given a section...\n. Actually I tried to deep into the outline source code, but I didn't find how to add such a feature...\nMaybe the main author would have a better view of what it is possible and how...\n\nSorry for my incompetence :(\n. ",
    "Xac": "You are correct.  This feature works as expected in 0.8.4.  Thanks.\n. Actually, it works in Adobe Reader when generated on my local machine after updating, but when I move it to our production server (Windows) and generate it, even on Prawn 0.8.4 I get the same thing.\n. I can be sure that the versions do match.  The gems are vendored in a Rails project and there is no local installed copy.  I'll give the stable a shot tomorrow along with a different font.\n. Looking at the code for repeaters, this doesn't seem like it would be difficult to add.  Perhaps the ability to name a repeater and remove it by name, or for the repeat method to return an index to pass to a stop_repeater method?\n. I would need to do something like:\n\n```\n@sections.push \"foo\"\nrepeat(lambda { @sections.include? \"foo\" }) do\n  text \"=== In section Foo ===\"\nend\n500.times{ text \"foo content\" }\n@sections.delete_if{|s| s == \"foo\"}\n500.times { text \"non-foo content\" }\n```\n\nBut it doesn't look like this works, scoping issues?\n. How would you suggest doing the above example without using an instance variable?\n. Right, it seemed like it was being executed after the section had been removed.  Thanks, looking forward to the refactorings.\n. You are correct.  This feature works as expected in 0.8.4.  Thanks.\n. Actually, it works in Adobe Reader when generated on my local machine after updating, but when I move it to our production server (Windows) and generate it, even on Prawn 0.8.4 I get the same thing.\n. I can be sure that the versions do match.  The gems are vendored in a Rails project and there is no local installed copy.  I'll give the stable a shot tomorrow along with a different font.\n. Looking at the code for repeaters, this doesn't seem like it would be difficult to add.  Perhaps the ability to name a repeater and remove it by name, or for the repeat method to return an index to pass to a stop_repeater method?\n. I would need to do something like:\n\n```\n@sections.push \"foo\"\nrepeat(lambda { @sections.include? \"foo\" }) do\n  text \"=== In section Foo ===\"\nend\n500.times{ text \"foo content\" }\n@sections.delete_if{|s| s == \"foo\"}\n500.times { text \"non-foo content\" }\n```\n\nBut it doesn't look like this works, scoping issues?\n. How would you suggest doing the above example without using an instance variable?\n. Right, it seemed like it was being executed after the section had been removed.  Thanks, looking forward to the refactorings.\n. ",
    "mryan43": "A more generic way to do it is to allow the user to pass any option to the pdf.text call :\nhere's a quick diff between my branch and edge at time of writing : \n\n<pre>\n--- a/lib/prawn/table/cell/text.rb\n+++ b/lib/prawn/table/cell/text.rb\n@@ -15,10 +15,11 @@ module Prawn\n       class Text < Cell\n \n         attr_reader :font\n-        attr_writer :font_size, :text_color\n+        attr_writer :font_size, :text_color, :style_options\n         \n         def initialize(pdf, point, options={})\n           super\n+          @style_options = {}\n           @font ||= load_font(nil)\n         end\n \n@@ -77,7 +78,7 @@ module Prawn\n             @pdf.move_down((@font.line_gap + @font.descender)/2)\n             old_color = @pdf.fill_color || '000000'\n             @pdf.fill_color(@text_color) if @text_color\n-            @pdf.text(@content)\n+            @pdf.text(@content, @style_options)\n             @pdf.fill_color(old_color)\n           end\n         end\n</pre>\n\n\nthen just do \n\n<pre>\npdf.table data do\n  cells.style :style_options => {:align => :right}\nend\n</pre>\n\n\nImho most of the code in Prawn::Table::Cell::Text should go away since it's not DRY with Prawn::Text. \n\nI wish i had more time to spend on this :-/\n. exactly :) cheers !\n. thanks a lot ! that's perfect !\n. thanks ! I bumped in the very same problem :P\n. yes, after a quick test, 0.9.1 doesn't seem to have this issue.\n. working fine ! thanks !\n. A more generic way to do it is to allow the user to pass any option to the pdf.text call :\nhere's a quick diff between my branch and edge at time of writing : \n\n<pre>\n--- a/lib/prawn/table/cell/text.rb\n+++ b/lib/prawn/table/cell/text.rb\n@@ -15,10 +15,11 @@ module Prawn\n       class Text < Cell\n \n         attr_reader :font\n-        attr_writer :font_size, :text_color\n+        attr_writer :font_size, :text_color, :style_options\n         \n         def initialize(pdf, point, options={})\n           super\n+          @style_options = {}\n           @font ||= load_font(nil)\n         end\n \n@@ -77,7 +78,7 @@ module Prawn\n             @pdf.move_down((@font.line_gap + @font.descender)/2)\n             old_color = @pdf.fill_color || '000000'\n             @pdf.fill_color(@text_color) if @text_color\n-            @pdf.text(@content)\n+            @pdf.text(@content, @style_options)\n             @pdf.fill_color(old_color)\n           end\n         end\n</pre>\n\n\nthen just do \n\n<pre>\npdf.table data do\n  cells.style :style_options => {:align => :right}\nend\n</pre>\n\n\nImho most of the code in Prawn::Table::Cell::Text should go away since it's not DRY with Prawn::Text. \n\nI wish i had more time to spend on this :-/\n. exactly :) cheers !\n. thanks a lot ! that's perfect !\n. thanks ! I bumped in the very same problem :P\n. yes, after a quick test, 0.9.1 doesn't seem to have this issue.\n. working fine ! thanks !\n. ",
    "enricob": "That seems a bit incongruent. With that, alignment would be applied in the `:style_options` hash but font size and text color would still have their own keys. For example, if I wanted to specify a font size with your example:\n\n```\npdf.table data do\n  cells.style :font_size => 10, :style_options => { :align => :right }\nend\n```\n\nThat seems odd. It seems like it's more natural to just let everything be passed in one hash. One thing I thought of though: if alignment is something that could be defined for cells in general, instead of just for text, then `@align` could be defined in `Prawn::Table::Cell` instead.\n\n**EDIT:** Actually, rethinking it, the `:style_options` idea would work really well if it were baked into the rest of the table styling API instead of being passed explicitly as a key. So, for example, instead of style setting individual attributes on the cells, it can pass a hash of options to the cell and let the cell do with that what it will when it draws. I think I'll try this approach in another branch when I have some time to spare.\n. You might want to take a look at #96 as well. This has been discussed in another context.\n. That seems a bit incongruent. With that, alignment would be applied in the `:style_options` hash but font size and text color would still have their own keys. For example, if I wanted to specify a font size with your example:\n\n```\npdf.table data do\n  cells.style :font_size => 10, :style_options => { :align => :right }\nend\n```\n\nThat seems odd. It seems like it's more natural to just let everything be passed in one hash. One thing I thought of though: if alignment is something that could be defined for cells in general, instead of just for text, then `@align` could be defined in `Prawn::Table::Cell` instead.\n\n**EDIT:** Actually, rethinking it, the `:style_options` idea would work really well if it were baked into the rest of the table styling API instead of being passed explicitly as a key. So, for example, instead of style setting individual attributes on the cells, it can pass a hash of options to the cell and let the cell do with that what it will when it draws. I think I'll try this approach in another branch when I have some time to spare.\n. You might want to take a look at #96 as well. This has been discussed in another context.\n. ",
    "pwnall": "So, what would need to happen to get either of the above patches in?\n. Thank you! I just pulled the change to my site.\n. Damn, I just did the same thing:\ncostan/prawn@704e0d75add5d496de71b983c341f3c5b95fe017\n. @amoeba, @bradediger, can you please upvote? \n. @badlediger, @sandal: Thank you so much for accepting my patch! Also, I'm glad to hear you're looking at all tickets! Democracies aren't always good :)\n. :+1: \n. So, what would need to happen to get either of the above patches in?\n. Thank you! I just pulled the change to my site.\n. Damn, I just did the same thing:\ncostan/prawn@704e0d75add5d496de71b983c341f3c5b95fe017\n. @amoeba, @bradediger, can you please upvote? \n. @badlediger, @sandal: Thank you so much for accepting my patch! Also, I'm glad to hear you're looking at all tickets! Democracies aren't always good :)\n. :+1: \n. ",
    "drKreso": "I also confirm this bug\n. It is working now. Thanks.\n. I can confirm the noted behaviour(bradediger) about rows being black after \"start_new_page\" message. If I leave out coloring of header row, table is properly rendered, but text_box that I have above table (no backgroud colors at all) is still black\n. After checkout of 3ec7ad195a14a737da82 - bug is not present\n. I also confirm this bug\n. It is working now. Thanks.\n. I can confirm the noted behaviour(bradediger) about rows being black after \"start_new_page\" message. If I leave out coloring of header row, table is properly rendered, but text_box that I have above table (no backgroud colors at all) is still black\n. After checkout of 3ec7ad195a14a737da82 - bug is not present\n. ",
    "JamesHarrison": "Not yet I'm afraid- mid-exams so spare time is hard to come by. I'll try and give it a quick test this weekend.\n. Eep- sorry, been busy. Working fine with master with a quick test.\n. Not yet I'm afraid- mid-exams so spare time is hard to come by. I'll try and give it a quick test this weekend.\n. Eep- sorry, been busy. Working fine with master with a quick test.\n. ",
    "john-griffin": "We have been getting the same issue here. Ruby 1.9.1 is fine but occurs in 1.8.7.\n. @sandal: Ok just tried your suggestion and took it down to a bare bones example. You're right - I can't reproduce the issues using 1.8.7 with a basic script.\n\nIt does happen when using 1.8.7 + Rails + Prawnto and opening the file in Windows Adobe Reader. If I switch that stack to 1.9.1 it doesn't happen.\n\nThanks for your help!\n. We have been getting the same issue here. Ruby 1.9.1 is fine but occurs in 1.8.7.\n. @sandal: Ok just tried your suggestion and took it down to a bare bones example. You're right - I can't reproduce the issues using 1.8.7 with a basic script.\n\nIt does happen when using 1.8.7 + Rails + Prawnto and opening the file in Windows Adobe Reader. If I switch that stack to 1.9.1 it doesn't happen.\n\nThanks for your help!\n. ",
    "toreriklinnerud": "This issue completely ruins the otherwise killer feature of being able to use templates. \n. I can confirm that adding a fixed number works as a quick workaround for us.\n\n@document.font_registry.size + 50\n\nOf course, I am guessing that it will eventually break once X happens, but it did the trick for now. \n. This issue completely ruins the otherwise killer feature of being able to use templates. \n. I can confirm that adding a fixed number works as a quick workaround for us.\n\n@document.font_registry.size + 50\n\nOf course, I am guessing that it will eventually break once X happens, but it did the trick for now. \n. ",
    "bkaney": "Is there a workaround for this in the near term?  We are running into this now with a Bangali font and text with latin numbers.\n. Is there a workaround for this in the near term?  We are running into this now with a Bangali font and text with latin numbers.\n. ",
    "capps": "Done -- not super facile with this stuff, but I think I did what you requested. Thanks\n. Done -- not super facile with this stuff, but I think I did what you requested. Thanks\n. ",
    "rparker": "This patch fixes a problem I was having with several dozen documents, and does not cause any heartburn with several dozen others that Prawn was previously reading properly.\n. This patch fixes a problem I was having with several dozen documents, and does not cause any heartburn with several dozen others that Prawn was previously reading properly.\n. ",
    "yashke": "I was using Evince and Xpdf (both on Ubuntu). Main case is that first pdf file differ from second one in plain content.\n. it's not about rendering for those 2 programs, it's about two different source code (of rendered PDF), when you render twice to file\n. I was using Evince and Xpdf (both on Ubuntu). Main case is that first pdf file differ from second one in plain content.\n. it's not about rendering for those 2 programs, it's about two different source code (of rendered PDF), when you render twice to file\n. ",
    "MarkBennett": "I'm printing large blocks of code using Document.group() and am also affected by this issue when they do not fit on one page.  After the rollback I am left with blank pages where the grouped content could have been.\n. Here is the commit I created to fix this issue.  Note that the test suite was failing when I checked out master, but that the same test is failing with the same message after my changes.  The bug I added also works properly with this change.\n\nThanks for all the hardwork.  Prawn is one of the cleanest libraries I've used and an example to follow!\n\nhttp://github.com/MarkBennett/prawn/commit/4465466fcef1f2ee3d6e466389640c3d0192a7bc\n. Cool.  Glad the patch was useful.  Keep up the great work on prawn!\n. I'm printing large blocks of code using Document.group() and am also affected by this issue when they do not fit on one page.  After the rollback I am left with blank pages where the grouped content could have been.\n. Here is the commit I created to fix this issue.  Note that the test suite was failing when I checked out master, but that the same test is failing with the same message after my changes.  The bug I added also works properly with this change.\n\nThanks for all the hardwork.  Prawn is one of the cleanest libraries I've used and an example to follow!\n\nhttp://github.com/MarkBennett/prawn/commit/4465466fcef1f2ee3d6e466389640c3d0192a7bc\n. Cool.  Glad the patch was useful.  Keep up the great work on prawn!\n. ",
    "3dd13": "I found the other approach to display correct page number\n\nI saw this \"pdf.number_pages\" method in the example page:\nhttp://github.com/sandal/prawn/blob/master/examples/general/page_numbering.rb\n\n<pre>\npdf.number_pages \"Page <page> of <total>\", [pdf.bounds.right - 50, 0]\n</pre>\n\n\nIt works correctly in my case now.\nand please be reminded that using this method no longer requires you to use\n\n<pre>\npdf.repeat :all do\n  # add_footer\nend\n</pre>\n. so sorry, after few months,\njust found out that there was another closed duplicated issue. issue 79. \nraised in 2010 Jan.\nlooks like fixed on the master branch.\n\nthere is a snippet inside the resolved directory\nhttp://github.com/sandal/prawn/blob/master/bugs/resolved/transaction_page_number_issue_79.rb\n\ncan close this ticket now.\n. if you add the pdf.number_pages before the overflowing elements, the issues still happen even when i use number_pages.\n\nso keep your number_pages as the last thing to add before you render the document\n. I found the other approach to display correct page number\n\nI saw this \"pdf.number_pages\" method in the example page:\nhttp://github.com/sandal/prawn/blob/master/examples/general/page_numbering.rb\n\n<pre>\npdf.number_pages \"Page <page> of <total>\", [pdf.bounds.right - 50, 0]\n</pre>\n\n\nIt works correctly in my case now.\nand please be reminded that using this method no longer requires you to use\n\n<pre>\npdf.repeat :all do\n  # add_footer\nend\n</pre>\n. so sorry, after few months,\njust found out that there was another closed duplicated issue. issue 79. \nraised in 2010 Jan.\nlooks like fixed on the master branch.\n\nthere is a snippet inside the resolved directory\nhttp://github.com/sandal/prawn/blob/master/bugs/resolved/transaction_page_number_issue_79.rb\n\ncan close this ticket now.\n. if you add the pdf.number_pages before the overflowing elements, the issues still happen even when i use number_pages.\n\nso keep your number_pages as the last thing to add before you render the document\n. ",
    "willbryant": "Committed 25485d1 and 8cc1265 to my fork for these.  Also c77c8af to add support for the three-valued form for consistency with CSS.\n. :+1:\n. Committed 25485d1 and 8cc1265 to my fork for these.  Also c77c8af to add support for the three-valued form for consistency with CSS.\n. :+1:\n. ",
    "edgerunner": "yob, I'd be glad to help. I'm a designer by profession and I could say I know about color. The Postscript language spec is beyond me though :)\n\nbradediger, Pantone colors are spot colors, they have RGB and CMYK equivalents but that's what they are, equivalents. What I need is a spot color that displays with a certain RGB, prints a certain CMYK on a process color printer, and yields a separate channel on color separation. It can be defined in Postscript documents but I guess Prawn lacks the functions to do that.\n. Ok, I figured it wouldn't be easy when I tried to look into the Postscript spec to do it myself. Hope I can help you guys get it going once you can find time to work on it.\n. Point taken..\n. yob, I'd be glad to help. I'm a designer by profession and I could say I know about color. The Postscript language spec is beyond me though :)\n\nbradediger, Pantone colors are spot colors, they have RGB and CMYK equivalents but that's what they are, equivalents. What I need is a spot color that displays with a certain RGB, prints a certain CMYK on a process color printer, and yields a separate channel on color separation. It can be defined in Postscript documents but I guess Prawn lacks the functions to do that.\n. Ok, I figured it wouldn't be easy when I tried to look into the Postscript spec to do it myself. Hope I can help you guys get it going once you can find time to work on it.\n. Point taken..\n. ",
    "wesgarrison": "I updated the wiki: http://wiki.github.com/sandal/prawn/using-prawn-in-rails\n\nI didn't see an appropriate place in the project since there isn't anything like an INSTALL file in the root.\n\nPeople going step-by-step should be covered now.\n. @chadmetcalf FYI.\n. :+1:  and thanks @cheba for at-mentioning everyone else.\n. I updated the wiki: http://wiki.github.com/sandal/prawn/using-prawn-in-rails\n\nI didn't see an appropriate place in the project since there isn't anything like an INSTALL file in the root.\n\nPeople going step-by-step should be covered now.\n. @chadmetcalf FYI.\n. :+1:  and thanks @cheba for at-mentioning everyone else.\n. ",
    "sigmike": "Ok. Don't bother fixing that if this process is going to change. The workaround is easy by caching the result.\n. I removed some in https://github.com/piglop/prawn/commit/fe0d48143ed177209f63dd2bd445834337bd2772\n. Here it is: https://github.com/piglop/prawn/tree/examples_removal\n. I finished manual review and removed all examples I think are covered by the manual.\nI rebased the branch on master and squashed the changes to a single commit. Still there: https://github.com/piglop/prawn/tree/examples_removal\n\nOnly a few examples remain. I kept the table/header.rb because it illustrates how styles on the first row will also propagate on the other pages.\n\nI think it may be useful to keep a few examples beginners can directly run and hack. Maybe some basic ones and some \"real world\" ones (like a bill or something).\n\nAnd I agree that visual tests would be useful too, in a different directory. We may even have a spec that runs the visual tests and compare the generated PDF to a saved one. It could prevent regression on these visual tests, but they may be hard to maintain.\n. I made a few other changes. Fell free to pull them.\n. Should I split these changes into specific branches (manual improvements, examples removal and misc changes) ?\n. I suggest moving to 0.12, since 0.11 is 6 months old and was never really released.\n\nIt looks like ttfunk gem is not released because it misses licensing informations. I asked Gregory to clarify that.\n\nAnd I started a 0-12-stable branch : https://github.com/piglop/prawn/tree/0-12-stable\n. I didn't release any gem. Ok, I was not very clear, but I only made the changes I thought was missing to this release.\n\nI'm just trying to make this long-awaited release happen. My primary question is \"what's missing?\". I'd like to help but I can't see anything to do except changing the version number and pushing the gem.\n. Great. Thank you.\n. There still are problems. For exemple this fails:\n\n```\ndata = [['', ''],\n        [{:content => '', :colspan => 2}]\n        ]\npdf = Prawn::Document.new\ntable = Prawn::Table.new data, pdf, :column_widths => [50, 200]\n```\n\nI was able to fix it by removing [this line in `Table::Cell#min_width`](https://github.com/prawnpdf/prawn/blob/master/lib/prawn/table/cell.rb#L75):\n\n```\nmin_widths[column] = [min_widths[column], min_width_ignoring_span].max\n```\n\nBut it's probably not a good solution.\n. @ksugiarto use this in your Gemfile:\n\n```\ngem 'prawn', git: 'https://github.com/prawnpdf/prawn.git'\n```\n. @sandal: yes it solves my issue\n. Here's the code to illustrate the example given above:\n\n```\ntable([\n  [\"a\", \"b\"],\n  [{:content => \"c\", :colspan => 2}],\n], column_widths: [150, 50])\n\nmove_down 10\n\ntable([\n  [\"a\", \"b\"],\n  [\"c\", \"d\"],\n], column_widths: [150, 50])\n```\n\nThe 2 tables will have different widths without the patch.\n. :+1:\n. Ok. Don't bother fixing that if this process is going to change. The workaround is easy by caching the result.\n. I removed some in https://github.com/piglop/prawn/commit/fe0d48143ed177209f63dd2bd445834337bd2772\n. Here it is: https://github.com/piglop/prawn/tree/examples_removal\n. I finished manual review and removed all examples I think are covered by the manual.\nI rebased the branch on master and squashed the changes to a single commit. Still there: https://github.com/piglop/prawn/tree/examples_removal\n\nOnly a few examples remain. I kept the table/header.rb because it illustrates how styles on the first row will also propagate on the other pages.\n\nI think it may be useful to keep a few examples beginners can directly run and hack. Maybe some basic ones and some \"real world\" ones (like a bill or something).\n\nAnd I agree that visual tests would be useful too, in a different directory. We may even have a spec that runs the visual tests and compare the generated PDF to a saved one. It could prevent regression on these visual tests, but they may be hard to maintain.\n. I made a few other changes. Fell free to pull them.\n. Should I split these changes into specific branches (manual improvements, examples removal and misc changes) ?\n. I suggest moving to 0.12, since 0.11 is 6 months old and was never really released.\n\nIt looks like ttfunk gem is not released because it misses licensing informations. I asked Gregory to clarify that.\n\nAnd I started a 0-12-stable branch : https://github.com/piglop/prawn/tree/0-12-stable\n. I didn't release any gem. Ok, I was not very clear, but I only made the changes I thought was missing to this release.\n\nI'm just trying to make this long-awaited release happen. My primary question is \"what's missing?\". I'd like to help but I can't see anything to do except changing the version number and pushing the gem.\n. Great. Thank you.\n. There still are problems. For exemple this fails:\n\n```\ndata = [['', ''],\n        [{:content => '', :colspan => 2}]\n        ]\npdf = Prawn::Document.new\ntable = Prawn::Table.new data, pdf, :column_widths => [50, 200]\n```\n\nI was able to fix it by removing [this line in `Table::Cell#min_width`](https://github.com/prawnpdf/prawn/blob/master/lib/prawn/table/cell.rb#L75):\n\n```\nmin_widths[column] = [min_widths[column], min_width_ignoring_span].max\n```\n\nBut it's probably not a good solution.\n. @ksugiarto use this in your Gemfile:\n\n```\ngem 'prawn', git: 'https://github.com/prawnpdf/prawn.git'\n```\n. @sandal: yes it solves my issue\n. Here's the code to illustrate the example given above:\n\n```\ntable([\n  [\"a\", \"b\"],\n  [{:content => \"c\", :colspan => 2}],\n], column_widths: [150, 50])\n\nmove_down 10\n\ntable([\n  [\"a\", \"b\"],\n  [\"c\", \"d\"],\n], column_widths: [150, 50])\n```\n\nThe 2 tables will have different widths without the patch.\n. :+1:\n. ",
    "jfeust": "Any word of an official release with image cell support?\n. I ended up doing a simple \"mock\" table using nested bounding boxes. See my [gist](https://gist.github.com/973267).  It's working for me.\n. Any word of an official release with image cell support?\n. I ended up doing a simple \"mock\" table using nested bounding boxes. See my [gist](https://gist.github.com/973267).  It's working for me.\n. ",
    "f0086": "Whats the status on this? Is it possible to add this in the near future?\n. Whats the status on this? Is it possible to add this in the near future?\n. ",
    "RostVY": "It would be great to have an ability to put a form elements in a teble cells too (checkbox (checked, unchecked), radio item)\n. It would be great to have an ability to put a form elements in a teble cells too (checkbox (checked, unchecked), radio item)\n. ",
    "klebershimabuku": "+1\n. +1\n. ",
    "modsquad1978": "I am trying to get this to work with a google chart and I keep getting \"Content type not recognized: nil\" when I put the following code in a table.\n\n  def project_item_rows\n    [[\"Site\", \"Project Name\", \"Project Manager\", \"Due Date\", \"Status\" ]] +\n    @projects.map do |project|\n      image = URI.parse(URI.encode(\"http://chart.googleapis.com/chart?cht=bhs&chm=r,FFFFFF,0,-0.01,0.01,1|R,FFFFFF,0,0.9,1.02,1&chs=135x30&chco=FF0000,FFC6A5&chd=t:#{project.percent_complete}|100\"))\n      [project.site, project.project_name, project.assigned_to, project.due_date, {:image => image}]\n    end\n  end\n\n  def project_items\n    move_down 5\n    table project_item_rows do \n      row(0).font_style = :bold\n      columns(3).align = :center\n      columns(0).width = 100\n      columns(1).width = 120\n      columns(2).width = 100\n      columns(3).width = 80\n      columns(4).width = 135\n      self.row_colors = [\"DDDDDD\", \"FFFFFF\"]\n      self.header = true\n    end\n  end\n\nWhen I take the chart code outside the table it works perfectly.  Am I missing something with the {:image => image} according to the Prawn manual?\n. I only have 1 record in the db and nothing is nil.  When I remove {:image => image} the PDF renders fine, save the image cell.  Is there another way to specify that the cell is an image?  I also tried using a local image file instead of the google chart and it returns the same \"Content type not recognized: nil\" error.  I've even copied the code from the manual and get the same error.  \n\nIf I take the same code and put it outside of a table the google charts render perfectly.\n\nI am using Rails 3.2.3 and my gemfile contains ' gem 'prawn' '.  Any help would be greatly appreciated. \n. Awesome.  That did it!\n. I am trying to get this to work with a google chart and I keep getting \"Content type not recognized: nil\" when I put the following code in a table.\n\n  def project_item_rows\n    [[\"Site\", \"Project Name\", \"Project Manager\", \"Due Date\", \"Status\" ]] +\n    @projects.map do |project|\n      image = URI.parse(URI.encode(\"http://chart.googleapis.com/chart?cht=bhs&chm=r,FFFFFF,0,-0.01,0.01,1|R,FFFFFF,0,0.9,1.02,1&chs=135x30&chco=FF0000,FFC6A5&chd=t:#{project.percent_complete}|100\"))\n      [project.site, project.project_name, project.assigned_to, project.due_date, {:image => image}]\n    end\n  end\n\n  def project_items\n    move_down 5\n    table project_item_rows do \n      row(0).font_style = :bold\n      columns(3).align = :center\n      columns(0).width = 100\n      columns(1).width = 120\n      columns(2).width = 100\n      columns(3).width = 80\n      columns(4).width = 135\n      self.row_colors = [\"DDDDDD\", \"FFFFFF\"]\n      self.header = true\n    end\n  end\n\nWhen I take the chart code outside the table it works perfectly.  Am I missing something with the {:image => image} according to the Prawn manual?\n. I only have 1 record in the db and nothing is nil.  When I remove {:image => image} the PDF renders fine, save the image cell.  Is there another way to specify that the cell is an image?  I also tried using a local image file instead of the google chart and it returns the same \"Content type not recognized: nil\" error.  I've even copied the code from the manual and get the same error.  \n\nIf I take the same code and put it outside of a table the google charts render perfectly.\n\nI am using Rails 3.2.3 and my gemfile contains ' gem 'prawn' '.  Any help would be greatly appreciated. \n. Awesome.  That did it!\n. ",
    "ealdent": "Try cloning the repo via git instead of http.  I get this error too because I don't have http fetching set up right or something (and I don't have the inclination to figure it out since cloning via git seems like a thousand times faster anyway).\n. Try cloning the repo via git instead of http.  I get this error too because I don't have http fetching set up right or something (and I don't have the inclination to figure it out since cloning via git seems like a thousand times faster anyway).\n. ",
    "willclark": "ealdent, that worked. Thanks!\n. ealdent, that worked. Thanks!\n. ",
    "paramaw": "I'm also having the same problem, any solution to this?\n. Just found it, http://groups.google.com/group/prawn-ruby/msg/0a2923726a810d9a\n. I'm also having the same problem, any solution to this?\n. Just found it, http://groups.google.com/group/prawn-ruby/msg/0a2923726a810d9a\n. ",
    "jobstar-se": "Here is a fix:\n\n def text_box(string, options)\n-     if options[:inline_format]\n-       options.delete(:inline_format)\n-       array = Text::Formatted::Parser.to_array(string)\n-       formatted_text_box(array, options)\n-       return\n- end \n    Text::Box.new(string, options.merge(:document => self)).render\n  end \n. wow the formatting got really screwed up by github. \n. I forked the fix at git@github.com:pederbl/prawn.git\n. so what should i use if I want text_box with inline format. is there another component for this purpose. otherwise i need my fix which i updated a bit to support excess text as well. \n. i think the idea of prawn is to provide a simple to use api. your suggestion doesn't really match that criteria for me. \n. Here is a fix:\n\n def text_box(string, options)\n-     if options[:inline_format]\n-       options.delete(:inline_format)\n-       array = Text::Formatted::Parser.to_array(string)\n-       formatted_text_box(array, options)\n-       return\n- end \n    Text::Box.new(string, options.merge(:document => self)).render\n  end \n. wow the formatting got really screwed up by github. \n. I forked the fix at git@github.com:pederbl/prawn.git\n. so what should i use if I want text_box with inline format. is there another component for this purpose. otherwise i need my fix which i updated a bit to support excess text as well. \n. i think the idea of prawn is to provide a simple to use api. your suggestion doesn't really match that criteria for me. \n. ",
    "hexawing": "OK, thank you for the useful tool. :)\n. OK, thank you for the useful tool. :)\n. ",
    "rubyredrick": "I think this is the same bug.\n\nsetting column_widths doesn't prevent getting CannotFit errors, although the documentation indicates that it should.\n\nThe problem is that the Prawn::Table#column_width method checks to see if @column_widths is set but the #column_widths = method   never sets that instance variable.\n. It's not 'minimized' since I'm still struggling to understand table\nlayouts, but this fails (Note I've manually changed a few things to\nprotect the client identity, and to isolate the code from the rails\nmodel where it's actually getting some of the data, so this might not\nbe exactly right.:\n\n def header_table\n   left_header_width = bounds.width / 2\n   right_header_width = bounds.width / 2\n   form_id_width = 30\n   umc_width = left_header_width - form_id_width\n   form_cell = make_cell(\"FORM\\nM0902CP\\nREV\\n11/02\", :size => 7,\n:width => form_id_width)\n   umc_cell = make_cell(\n    [\n     \"UNIVERSITY MEDICAL CENTER\",\n     \"DIVISION OF NEUROLOGY\",\n     \"ELECTROMYOGRAPHY LABORATORY\"\n    ].join(\"\\n\"), :size => 10, :width => umc_width)\n   date_cell =   make_cell(\"DATE OF STUDY: #{Date.today}\", :width =>\nleft_header_width)\n   label = make_table([[form_cell, umc_cell]], :column_widths =>\n[form_id_width, umc_width]) do |table|\n     table.rows(0).width = form_cell.width + umc_cell.width\n   end\n   left_header = make_table(\n     [\n       [label],\n       [date_cell]\n     ], :column_widths => [left_header_width]) do |table|\n       table.rows(0..1).width = left_header_width\n     end\n   right_header = make_table(\n      [\n         [\"John Doe],\n         [\"XYZZY123)],\n         [\"AGE: #{29}  HT: #{71} in.\"]\n       ],\n       :column_widths => right_header_width\n     )\n   data = [\n       [left_header, right_header]\n     ]\n     table(data, :column_widths => [left_header.width,\nright_header.width], :cell_style => {:borders => []}) do |table|\n       table.rows(0).width = left_header.width + right_header.width + 10\n     end\n end\n\nI tried everything I could think of to both manual sett the column\nwidths, AND try to make sure things were set up as I understand\nthings, so I still don't understand why I'm getting the CannotFit\nerror even without setting the column widths.\n\nThe doc says that using the :column_widths option (which by convention calls column_widths= should work:\n # +column_widths+:: \n  #   Sets widths for individual columns. Manually setting widths can give\n  #   better results than letting Prawn guess at them, as Prawn's algorithm\n  #   for defaulting widths is currently pretty boneheaded. If you experience\n  #   problems like weird column widths or CannotFit errors, try manually\n  #   setting widths on more columns.\n\nBut it also seems obvious that setting column_widths doesn't prevent\nthe table from trying to recompute the widths and blowing up, and why\nthat is so.\n\nHere's Prawn::Table#column_widths  starting at line  296\n\n   # Calculate and return the constrained column widths, taking into account\n   # each cell's min_width, max_width, and any user-specified constraints on\n   # the table or column size.\n   #\n   # Because the natural widths can be silly, this does not always work so well\n   # at guessing a good size for columns that have vastly different content. If\n   # you see weird problems like CannotFit errors or shockingly bad column\n   # sizes, you should specify more column widths manually.\n   #\n   def column_widths\n     @column_widths ||= begin\n       if width < cells.min_width\n         raise Errors::CannotFit,\n           \"Table's width was set too small to contain its contents\"\n       end\n\n```\n   if width > cells.max_width\n     raise Errors::CannotFit,\n       \"Table's width was set larger than its contents' maximum width\"\n   end\n\n   if width < natural_width\n     # Shrink the table to fit the requested width.\n     f = (width - cells.min_width).to_f / (natural_width - cells.min_width)\n\n     (0...column_length).map do |c|\n       min, nat = column(c).min_width, column(c).width\n       (f * (nat - min)) + min\n     end\n   elsif width > natural_width\n     # Expand the table to fit the requested width.\n     f = (width - cells.width).to_f / (cells.max_width - cells.width)\n\n     (0...column_length).map do |c|\n       nat, max = column(c).width, column(c).max_width\n       (f * (max - nat)) + nat\n     end\n   else\n     natural_column_widths\n   end\n end\n```\n\n   end\n\nAnd here's #column_widths= starting on line 164\n\n   def column_widths=(widths)\n     case widths\n     when Array\n       widths.each_with_index { |w, i| column(i).width = w }\n     when Hash\n       widths.each { |i, w| column(i).width = w }\n     when Numeric\n       columns.width = widths\n     else\n       raise ArgumentError, \"cannot interpret column widths\"\n     end\n   end\n\nNote that the @column_widths instance variable is not set by this\nmethod so the column_widths method will ALWAYS try to calculate the\nwidths even if you try to set them with the :column_widths option when\ninstantiating the table.\n\nIn fact the only reference to @column_widths is that one line.\n\nNow the first idea would be to have the column_widths= method just set @column_widths to the argument, but this probably isn't exactly right.  It probably needs to do something like:\n\n   def column_widths=(widths)\n     case widths\n     when Array\n       widths.each_with_index { |w, i| column(i).width = w }\n       @column_widths = widths\n     when Hash\n      @column_widths = []\n       widths.each { |i, w| \n              @column_widths[i] = w\n              column(i).width = w }\n     when Numeric\n       columns.width = widths\n       @column_widths = [widths] \\* column_length\n     else\n       raise ArgumentError, \"cannot interpret column widths\"\n     end\n   end\n\nBut this leaves some holes:\n\n  if the argument is an array, what if it's a different size than the number of columns in the table?  If it's too short the some columns at the left side won't have 'manually' set widths.  If it's too long then some of the settings will be extraneous.\n\n  if the argument is a hash, what if it doesn't have a key for each column?\n\nSo the column_widths method would need to be able to compute widths for columns not 'manually' set\n\nSome more observations.\n\n1) Raising CannotFit rather than just having the cells either be clipped or overflow makes it very hard to debug this if it's an app error. If I could see an incorrect result I'd be much better equipped to understand what's wrong.\n\n2) There seems to be a bit of confusion in the code WRT methods vs. instance variables.  For example, the table has a make_cells method which is used to initialize the @cells instance variable, the second statement in Prawn::Table#initialize is \n\n```\n@cells = make_cells(data)\n```\n\nand the make_cells method returns a Ruby Array of Cells.  But in cells.rb Prawn::Table gets monkey patched with a cells method\n\n```\n   def cells\n     @cell_proxy ||= Cells.new(@cells)\n   end\n```\n\nThis is really contorted code, why not just have make_cells return an instance of Cells, and do away with @cell_proxy\n. Well, I'll try taking that out, but it was an attempt to solve the problem which existed before I added that.\n. Ok with me\u2014\nSent from Mailbox for iPad\n\nOn Sun, Jan 5, 2014 at 9:01 AM, Matt Patterson notifications@github.com\nwrote:\n\n> ## MIT would be great.\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/prawnpdf/prawn/issues/625#issuecomment-31604804\n. I think this is the same bug.\n\nsetting column_widths doesn't prevent getting CannotFit errors, although the documentation indicates that it should.\n\nThe problem is that the Prawn::Table#column_width method checks to see if @column_widths is set but the #column_widths = method   never sets that instance variable.\n. It's not 'minimized' since I'm still struggling to understand table\nlayouts, but this fails (Note I've manually changed a few things to\nprotect the client identity, and to isolate the code from the rails\nmodel where it's actually getting some of the data, so this might not\nbe exactly right.:\n\n def header_table\n   left_header_width = bounds.width / 2\n   right_header_width = bounds.width / 2\n   form_id_width = 30\n   umc_width = left_header_width - form_id_width\n   form_cell = make_cell(\"FORM\\nM0902CP\\nREV\\n11/02\", :size => 7,\n:width => form_id_width)\n   umc_cell = make_cell(\n    [\n     \"UNIVERSITY MEDICAL CENTER\",\n     \"DIVISION OF NEUROLOGY\",\n     \"ELECTROMYOGRAPHY LABORATORY\"\n    ].join(\"\\n\"), :size => 10, :width => umc_width)\n   date_cell =   make_cell(\"DATE OF STUDY: #{Date.today}\", :width =>\nleft_header_width)\n   label = make_table([[form_cell, umc_cell]], :column_widths =>\n[form_id_width, umc_width]) do |table|\n     table.rows(0).width = form_cell.width + umc_cell.width\n   end\n   left_header = make_table(\n     [\n       [label],\n       [date_cell]\n     ], :column_widths => [left_header_width]) do |table|\n       table.rows(0..1).width = left_header_width\n     end\n   right_header = make_table(\n      [\n         [\"John Doe],\n         [\"XYZZY123)],\n         [\"AGE: #{29}  HT: #{71} in.\"]\n       ],\n       :column_widths => right_header_width\n     )\n   data = [\n       [left_header, right_header]\n     ]\n     table(data, :column_widths => [left_header.width,\nright_header.width], :cell_style => {:borders => []}) do |table|\n       table.rows(0).width = left_header.width + right_header.width + 10\n     end\n end\n\nI tried everything I could think of to both manual sett the column\nwidths, AND try to make sure things were set up as I understand\nthings, so I still don't understand why I'm getting the CannotFit\nerror even without setting the column widths.\n\nThe doc says that using the :column_widths option (which by convention calls column_widths= should work:\n # +column_widths+:: \n  #   Sets widths for individual columns. Manually setting widths can give\n  #   better results than letting Prawn guess at them, as Prawn's algorithm\n  #   for defaulting widths is currently pretty boneheaded. If you experience\n  #   problems like weird column widths or CannotFit errors, try manually\n  #   setting widths on more columns.\n\nBut it also seems obvious that setting column_widths doesn't prevent\nthe table from trying to recompute the widths and blowing up, and why\nthat is so.\n\nHere's Prawn::Table#column_widths  starting at line  296\n\n   # Calculate and return the constrained column widths, taking into account\n   # each cell's min_width, max_width, and any user-specified constraints on\n   # the table or column size.\n   #\n   # Because the natural widths can be silly, this does not always work so well\n   # at guessing a good size for columns that have vastly different content. If\n   # you see weird problems like CannotFit errors or shockingly bad column\n   # sizes, you should specify more column widths manually.\n   #\n   def column_widths\n     @column_widths ||= begin\n       if width < cells.min_width\n         raise Errors::CannotFit,\n           \"Table's width was set too small to contain its contents\"\n       end\n\n```\n   if width > cells.max_width\n     raise Errors::CannotFit,\n       \"Table's width was set larger than its contents' maximum width\"\n   end\n\n   if width < natural_width\n     # Shrink the table to fit the requested width.\n     f = (width - cells.min_width).to_f / (natural_width - cells.min_width)\n\n     (0...column_length).map do |c|\n       min, nat = column(c).min_width, column(c).width\n       (f * (nat - min)) + min\n     end\n   elsif width > natural_width\n     # Expand the table to fit the requested width.\n     f = (width - cells.width).to_f / (cells.max_width - cells.width)\n\n     (0...column_length).map do |c|\n       nat, max = column(c).width, column(c).max_width\n       (f * (max - nat)) + nat\n     end\n   else\n     natural_column_widths\n   end\n end\n```\n\n   end\n\nAnd here's #column_widths= starting on line 164\n\n   def column_widths=(widths)\n     case widths\n     when Array\n       widths.each_with_index { |w, i| column(i).width = w }\n     when Hash\n       widths.each { |i, w| column(i).width = w }\n     when Numeric\n       columns.width = widths\n     else\n       raise ArgumentError, \"cannot interpret column widths\"\n     end\n   end\n\nNote that the @column_widths instance variable is not set by this\nmethod so the column_widths method will ALWAYS try to calculate the\nwidths even if you try to set them with the :column_widths option when\ninstantiating the table.\n\nIn fact the only reference to @column_widths is that one line.\n\nNow the first idea would be to have the column_widths= method just set @column_widths to the argument, but this probably isn't exactly right.  It probably needs to do something like:\n\n   def column_widths=(widths)\n     case widths\n     when Array\n       widths.each_with_index { |w, i| column(i).width = w }\n       @column_widths = widths\n     when Hash\n      @column_widths = []\n       widths.each { |i, w| \n              @column_widths[i] = w\n              column(i).width = w }\n     when Numeric\n       columns.width = widths\n       @column_widths = [widths] \\* column_length\n     else\n       raise ArgumentError, \"cannot interpret column widths\"\n     end\n   end\n\nBut this leaves some holes:\n\n  if the argument is an array, what if it's a different size than the number of columns in the table?  If it's too short the some columns at the left side won't have 'manually' set widths.  If it's too long then some of the settings will be extraneous.\n\n  if the argument is a hash, what if it doesn't have a key for each column?\n\nSo the column_widths method would need to be able to compute widths for columns not 'manually' set\n\nSome more observations.\n\n1) Raising CannotFit rather than just having the cells either be clipped or overflow makes it very hard to debug this if it's an app error. If I could see an incorrect result I'd be much better equipped to understand what's wrong.\n\n2) There seems to be a bit of confusion in the code WRT methods vs. instance variables.  For example, the table has a make_cells method which is used to initialize the @cells instance variable, the second statement in Prawn::Table#initialize is \n\n```\n@cells = make_cells(data)\n```\n\nand the make_cells method returns a Ruby Array of Cells.  But in cells.rb Prawn::Table gets monkey patched with a cells method\n\n```\n   def cells\n     @cell_proxy ||= Cells.new(@cells)\n   end\n```\n\nThis is really contorted code, why not just have make_cells return an instance of Cells, and do away with @cell_proxy\n. Well, I'll try taking that out, but it was an attempt to solve the problem which existed before I added that.\n. Ok with me\u2014\nSent from Mailbox for iPad\n\nOn Sun, Jan 5, 2014 at 9:01 AM, Matt Patterson notifications@github.com\nwrote:\n\n> ## MIT would be great.\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/prawnpdf/prawn/issues/625#issuecomment-31604804\n. ",
    "kunalan": "i tries this.but i couldn't.Where i have to use the above code.please clarify me a little bit.\n. still i'm at the same place no improvement.\n. i tries this.but i couldn't.Where i have to use the above code.please clarify me a little bit.\n. still i'm at the same place no improvement.\n. ",
    "ratbeard": "So this came up because I had a layout like this: \n\n```\nSkills:   [ ] stealth     [ ] strength\n          [ ] smarts     [ ] smile\n```\n\nInitially I made it quick and dirty just with text() and a string with newlines and spaces.  Then I tried converting it to a table format like:\n\ndata = [['Skills:', 'stealth', 'strength'], ['    ', 'smarts', 'smile']]\n\nYou see I had left cell[1,0] with some blank space from my copy/paste.  This caused me to get not too helpful error messages that looked like:\n\n```\n     ./../../lib/prawn/core/text/line_wrap.rb:158:in `+': can't convert nil into String (TypeError)\nfrom ./../../lib/prawn/core/text/line_wrap.rb:158:in `finalize_line'\nfrom ./../../lib/prawn/core/text/line_wrap.rb:86:in `wrap_line'\nfrom ./../../lib/prawn/core/text/wrap.rb:47:in `wrap'\nfrom ./../../lib/prawn/text/box.rb:245:in `render'\nfrom ./../../lib/prawn/font.rb:96:in `font_size'\nfrom ./../../lib/prawn/text/box.rb:238:in `render'\nfrom ./../../lib/prawn/core/text.rb:84:in `character_spacing'\nfrom ./../../lib/prawn/text/box.rb:229:in `render'\n ... 28 levels...\nfrom ./../../lib/prawn/document.rb:208:in `initialize'\nfrom ./../../lib/prawn/document.rb:119:in `new'\nfrom ./../../lib/prawn/document.rb:119:in `generate'\nfrom simple_table.rb:6\n```\n\nChanging cell[1,0] to be \"\" did solve the problem.  However, I had to use insert print and debug statements in prawn to track this down, which wasn't very new-user friendly.\n\nIts not intuitive from my perspective to allow \"\" but not \" \" in a cell, and I don't think throwing a hard error, even with an improved exception message, is the right solution.  I can imagine other ways you could arrive to a cell with just spaces, e.g:\n\n   cell :content => \"#{first_name} #{last_name}\"\n\nIf both variables are nil would result in this error.  This may be exceptional behavior from an application perspective, but not at the pdf library level.\n. Yes, throwing an error if cell contents are blank (\"\" or \"  \") would be an okay solution;  it would be consistent and you'd get a legible error message.   Though it could break existing pdf's.\n\nI don't know prawn internals, and figured there were other entry points to finalize_line. If you make the above change of not allowing blank cell contents could you then _guarantee_ an empty string will never make it in to finalize_line?  Otherwise I think it should contain a check for an empty string and raises a legible error message, so future problems like this are easier to debug.\n\nI disagree though that this is an error, maybe using less serious variable names than first_name would make it more obvious?  Are users expected to know to build cells that can possibly be blank like:\n\n```\nc = tags.join(', ')\nc = nil if tags.empty?\ncell :content => c\n```\n\nOr:\n\n```\nc = [currently_playing, current_mood, ].join(' ')\nc = nil if c.strip.empty?\ncell :content => c\n```\n\nvs\n     cell :content => \"#{currently_playing} #{current_mood}\"\n. I can see your point that there is an advantage of making explicit exactly what should be rendered.  To repeat myself, my perspective is that of a new user, in which case its unexpected that text(\"\") is okay but cell(:content => \"\") would not be.  My mental model is that a cell is just helping to size and draw a border around its text content.  Correcting me early with a nice exception message would help me fix this incorrect(?) assumption, or the debug option would also work and let me get away with it on my path from new to high volume reporting user.\n\nTo my other point above, however this cell-with-blank-content issue is fixed, are you confident there's no other way for an empty string to make its way in to finalize_line?  If not I'd suggest to have a check in there for future debugging problems that might come up:\n    raise \"helpful msg\" if @output.blank?\n. Oh okay, I guess my mental model is correct in that text(\" \") also currently does not work.  This would indicate that the @output.blank? check should be in place to avoid that nasty:\n\n```\n./../../lib/prawn/core/text/line_wrap.rb:158:in `+': can't convert nil into String (TypeError)\n```\n\nThanks\n. And documentation added to Document#text and cell that string must not consist only of spaces.\n. Yep, I'm aware blank? is a rails method, I was using that instead of the more cumbersome \"only spaces\".  Sounds good. \n. YES :older_man: \n. So this came up because I had a layout like this: \n\n```\nSkills:   [ ] stealth     [ ] strength\n          [ ] smarts     [ ] smile\n```\n\nInitially I made it quick and dirty just with text() and a string with newlines and spaces.  Then I tried converting it to a table format like:\n\ndata = [['Skills:', 'stealth', 'strength'], ['    ', 'smarts', 'smile']]\n\nYou see I had left cell[1,0] with some blank space from my copy/paste.  This caused me to get not too helpful error messages that looked like:\n\n```\n     ./../../lib/prawn/core/text/line_wrap.rb:158:in `+': can't convert nil into String (TypeError)\nfrom ./../../lib/prawn/core/text/line_wrap.rb:158:in `finalize_line'\nfrom ./../../lib/prawn/core/text/line_wrap.rb:86:in `wrap_line'\nfrom ./../../lib/prawn/core/text/wrap.rb:47:in `wrap'\nfrom ./../../lib/prawn/text/box.rb:245:in `render'\nfrom ./../../lib/prawn/font.rb:96:in `font_size'\nfrom ./../../lib/prawn/text/box.rb:238:in `render'\nfrom ./../../lib/prawn/core/text.rb:84:in `character_spacing'\nfrom ./../../lib/prawn/text/box.rb:229:in `render'\n ... 28 levels...\nfrom ./../../lib/prawn/document.rb:208:in `initialize'\nfrom ./../../lib/prawn/document.rb:119:in `new'\nfrom ./../../lib/prawn/document.rb:119:in `generate'\nfrom simple_table.rb:6\n```\n\nChanging cell[1,0] to be \"\" did solve the problem.  However, I had to use insert print and debug statements in prawn to track this down, which wasn't very new-user friendly.\n\nIts not intuitive from my perspective to allow \"\" but not \" \" in a cell, and I don't think throwing a hard error, even with an improved exception message, is the right solution.  I can imagine other ways you could arrive to a cell with just spaces, e.g:\n\n   cell :content => \"#{first_name} #{last_name}\"\n\nIf both variables are nil would result in this error.  This may be exceptional behavior from an application perspective, but not at the pdf library level.\n. Yes, throwing an error if cell contents are blank (\"\" or \"  \") would be an okay solution;  it would be consistent and you'd get a legible error message.   Though it could break existing pdf's.\n\nI don't know prawn internals, and figured there were other entry points to finalize_line. If you make the above change of not allowing blank cell contents could you then _guarantee_ an empty string will never make it in to finalize_line?  Otherwise I think it should contain a check for an empty string and raises a legible error message, so future problems like this are easier to debug.\n\nI disagree though that this is an error, maybe using less serious variable names than first_name would make it more obvious?  Are users expected to know to build cells that can possibly be blank like:\n\n```\nc = tags.join(', ')\nc = nil if tags.empty?\ncell :content => c\n```\n\nOr:\n\n```\nc = [currently_playing, current_mood, ].join(' ')\nc = nil if c.strip.empty?\ncell :content => c\n```\n\nvs\n     cell :content => \"#{currently_playing} #{current_mood}\"\n. I can see your point that there is an advantage of making explicit exactly what should be rendered.  To repeat myself, my perspective is that of a new user, in which case its unexpected that text(\"\") is okay but cell(:content => \"\") would not be.  My mental model is that a cell is just helping to size and draw a border around its text content.  Correcting me early with a nice exception message would help me fix this incorrect(?) assumption, or the debug option would also work and let me get away with it on my path from new to high volume reporting user.\n\nTo my other point above, however this cell-with-blank-content issue is fixed, are you confident there's no other way for an empty string to make its way in to finalize_line?  If not I'd suggest to have a check in there for future debugging problems that might come up:\n    raise \"helpful msg\" if @output.blank?\n. Oh okay, I guess my mental model is correct in that text(\" \") also currently does not work.  This would indicate that the @output.blank? check should be in place to avoid that nasty:\n\n```\n./../../lib/prawn/core/text/line_wrap.rb:158:in `+': can't convert nil into String (TypeError)\n```\n\nThanks\n. And documentation added to Document#text and cell that string must not consist only of spaces.\n. Yep, I'm aware blank? is a rails method, I was using that instead of the more cumbersome \"only spaces\".  Sounds good. \n. YES :older_man: \n. ",
    "vohtaski": "I changed utf8.rb to show you my problem, however I can't run it (I installed gem pdf-reader, still no luck)\n\n$ ruby examples/m17n/utf8.rb \n./examples/m17n/../../lib/prawn/core/object_store.rb:9:in `require': no such file to load -- pdf/reader (LoadError)\n        from ./examples/m17n/../../lib/prawn/core/object_store.rb:9\n        from ./examples/m17n/../../lib/prawn/core.rb:82:in`require'\n        from ./examples/m17n/../../lib/prawn/core.rb:82\n        from ./examples/m17n/../../lib/prawn.rb:10:in `require'\n        from ./examples/m17n/../../lib/prawn.rb:10\n        from ./examples/m17n/../example_helper.rb:2:in`require'\n        from ./examples/m17n/../example_helper.rb:2\n        from examples/m17n/utf8.rb:6:in `require'\n        from examples/m17n/utf8.rb:6\n\nThe same happens when I execute \"rake examples\".\nMac OS 10.6.4\nruby 1.8.7 (2009-06-12 patchlevel 174) [universal-darwin10.0]\n. This is the code that gives a problem in rails\n\n```\nfont \"#{Prawn::BASEDIR}/data/fonts/DejaVuSans.ttf\"\ntext \"\u1f55\u03b1\u03bb\u03bf\u03bd \u03d5\u03b1\u03b3\u03b5\u1fd6\u03bd \u03b4\u1f7b\u03bd\u03b1\u03bc\u03b1\u03b9\u0387 \u03c4\u03bf\u1fe6\u03c4\u03bf \u03bf\u1f54 \u03bc\u03b5 \u03b2\u03bb\u1f71\u03c0\u03c4\u03b5\u03b9.\" * 20\n\ntable([[\"\\<b\\>\u041f\u043e\u043d\u0435\u0434\u0435\u043b\u044c\u043d\u0438\u043a\\</b\\>\"],[\"\u0412\u0442\u043e\u0440\u043d\u0438\u043a\"]],:cell_style => { :padding => 3,:inline_format => true}) do \n  cells.borders = [:top,:left,:right,:bottom]\n  cells.border_width = 0.1\nend\n```\n. If \"<b>\" is removed, it works\n. I changed utf8.rb to show you my problem, however I can't run it (I installed gem pdf-reader, still no luck)\n\n$ ruby examples/m17n/utf8.rb \n./examples/m17n/../../lib/prawn/core/object_store.rb:9:in `require': no such file to load -- pdf/reader (LoadError)\n        from ./examples/m17n/../../lib/prawn/core/object_store.rb:9\n        from ./examples/m17n/../../lib/prawn/core.rb:82:in`require'\n        from ./examples/m17n/../../lib/prawn/core.rb:82\n        from ./examples/m17n/../../lib/prawn.rb:10:in `require'\n        from ./examples/m17n/../../lib/prawn.rb:10\n        from ./examples/m17n/../example_helper.rb:2:in`require'\n        from ./examples/m17n/../example_helper.rb:2\n        from examples/m17n/utf8.rb:6:in `require'\n        from examples/m17n/utf8.rb:6\n\nThe same happens when I execute \"rake examples\".\nMac OS 10.6.4\nruby 1.8.7 (2009-06-12 patchlevel 174) [universal-darwin10.0]\n. This is the code that gives a problem in rails\n\n```\nfont \"#{Prawn::BASEDIR}/data/fonts/DejaVuSans.ttf\"\ntext \"\u1f55\u03b1\u03bb\u03bf\u03bd \u03d5\u03b1\u03b3\u03b5\u1fd6\u03bd \u03b4\u1f7b\u03bd\u03b1\u03bc\u03b1\u03b9\u0387 \u03c4\u03bf\u1fe6\u03c4\u03bf \u03bf\u1f54 \u03bc\u03b5 \u03b2\u03bb\u1f71\u03c0\u03c4\u03b5\u03b9.\" * 20\n\ntable([[\"\\<b\\>\u041f\u043e\u043d\u0435\u0434\u0435\u043b\u044c\u043d\u0438\u043a\\</b\\>\"],[\"\u0412\u0442\u043e\u0440\u043d\u0438\u043a\"]],:cell_style => { :padding => 3,:inline_format => true}) do \n  cells.borders = [:top,:left,:right,:bottom]\n  cells.border_width = 0.1\nend\n```\n. If \"<b>\" is removed, it works\n. ",
    "tanelj": "Hi!\n\nI have similar issue with dfont file with latest gem (0.11.1) (and also latest git version).\n\nThe \"Bad font family\" error raises when using :font_style attribute or :inline_format => :true in table :cell_style attributes.\n\nWith default afm Helverica, there isn't any problem.\n\nExample code:\n\n```\nPrawn::Document.generate(\"tmp/test.pdf\") do   \n  DFONT_FILE = File.join(Rails.root, 'tmp', 'Helvetica.dfont')\n  font_families.update(\n    \"Helvetica\" => {\n        :normal => {:file => DFONT_FILE, :font => 'Helvetica'},\n        :bold => {:file => DFONT_FILE, :font => 'Helvetica-Bold'},\n        :italic => {:file => DFONT_FILE, :font => 'Helvetica-Oblique'},\n        :bold_italic => {:file => DFONT_FILE, :font => 'Helvetica-BoldOblique'}\n    }\n  )\n\n  font 'Helvetica'\n\n  # These lines are rendered correctly\n  text 'test plain'\n  text 'test plain bold', :style => :bold\n  text 'test inline plain', :inline_format => true\n  text '<b>test</b> inline plain', :inline_format => true\n\n  table([[\"<b>Test 1</b>\"],[\"Test 2\"]],:cell_style => { :padding => 3 })\n\n  # Using styles in table gives \"Bad font family\" error.\n  table([[\"<b>Test 1</b>\"],[\"Test 2\"]],:cell_style => { :padding => 3, :inline_format => true })\n  table([[\"<b>Test 1</b>\"],[\"Test 2\"]],:cell_style => { :padding => 3, :font_style => :normal })\nend\n```\n. Hi again!\n\nI have fond a work around. Dfont styling in table are working without troubles when param :font is given in :cell_style.\nIt should be more correct when cell accepts default document font family if :font param is not given.\n\nExample:\n\n```\n  # Using in table without :font param gives \"Bad font family\" error.\n  table([[\"<b>Test 1</b>\"],[\"Test 2\"]],:cell_style => { :padding => 3, :inline_format => true })\n  table([[\"<b>Test 1</b>\"],[\"Test 2\"]],:cell_style => { :padding => 3, :font_style => :normal })\n\n  # This lines are rendered correctly:\n  table([[\"<b>Test 1</b>\"],[\"Test 2\"]],:cell_style => { :padding => 3, :font => 'Helvetica', :inline_format => true })\n  table([[\"<b>Test 1</b>\"],[\"Test 2\"]],:cell_style => { :padding => 3, :font => 'Helvetica', :font_style => :normal })\n```\n. Hi!\n\nI have similar issue with dfont file with latest gem (0.11.1) (and also latest git version).\n\nThe \"Bad font family\" error raises when using :font_style attribute or :inline_format => :true in table :cell_style attributes.\n\nWith default afm Helverica, there isn't any problem.\n\nExample code:\n\n```\nPrawn::Document.generate(\"tmp/test.pdf\") do   \n  DFONT_FILE = File.join(Rails.root, 'tmp', 'Helvetica.dfont')\n  font_families.update(\n    \"Helvetica\" => {\n        :normal => {:file => DFONT_FILE, :font => 'Helvetica'},\n        :bold => {:file => DFONT_FILE, :font => 'Helvetica-Bold'},\n        :italic => {:file => DFONT_FILE, :font => 'Helvetica-Oblique'},\n        :bold_italic => {:file => DFONT_FILE, :font => 'Helvetica-BoldOblique'}\n    }\n  )\n\n  font 'Helvetica'\n\n  # These lines are rendered correctly\n  text 'test plain'\n  text 'test plain bold', :style => :bold\n  text 'test inline plain', :inline_format => true\n  text '<b>test</b> inline plain', :inline_format => true\n\n  table([[\"<b>Test 1</b>\"],[\"Test 2\"]],:cell_style => { :padding => 3 })\n\n  # Using styles in table gives \"Bad font family\" error.\n  table([[\"<b>Test 1</b>\"],[\"Test 2\"]],:cell_style => { :padding => 3, :inline_format => true })\n  table([[\"<b>Test 1</b>\"],[\"Test 2\"]],:cell_style => { :padding => 3, :font_style => :normal })\nend\n```\n. Hi again!\n\nI have fond a work around. Dfont styling in table are working without troubles when param :font is given in :cell_style.\nIt should be more correct when cell accepts default document font family if :font param is not given.\n\nExample:\n\n```\n  # Using in table without :font param gives \"Bad font family\" error.\n  table([[\"<b>Test 1</b>\"],[\"Test 2\"]],:cell_style => { :padding => 3, :inline_format => true })\n  table([[\"<b>Test 1</b>\"],[\"Test 2\"]],:cell_style => { :padding => 3, :font_style => :normal })\n\n  # This lines are rendered correctly:\n  table([[\"<b>Test 1</b>\"],[\"Test 2\"]],:cell_style => { :padding => 3, :font => 'Helvetica', :inline_format => true })\n  table([[\"<b>Test 1</b>\"],[\"Test 2\"]],:cell_style => { :padding => 3, :font => 'Helvetica', :font_style => :normal })\n```\n. ",
    "takahashim": "Hi,\n\nI did 'rake gem' from master branch of http://github.com/sandal/prawn.git.\nNow I tried to use 0.10.2 release (tgz) with vendor/ttfunk and vendor/pdf-inspector from master(git), but I got same result.\n\n```\n$ ruby minimal_test.rb\n/opt/local/lib/ruby/gems/1.8/gems/prawn-0.10.2/lib/prawn/document.rb:540:in `generate_margin_box': undefined method `[]' for nil:NilClass (NoMethodError)\n    (snip)\n```\n\nI guess the problem is in Prawn::Core::Page#dimensions. Some PDF Page object has no MediaBox entry(they use inherited value of MediaBox). So dimentions method returns nil.\n\nThanks,\n. I confirmed no error raised. Actually, my script using template generates invalid PDF :-/, but it's another issue.\nAnyway, thanks again for your work!\n. Hi,\n\nI did 'rake gem' from master branch of http://github.com/sandal/prawn.git.\nNow I tried to use 0.10.2 release (tgz) with vendor/ttfunk and vendor/pdf-inspector from master(git), but I got same result.\n\n```\n$ ruby minimal_test.rb\n/opt/local/lib/ruby/gems/1.8/gems/prawn-0.10.2/lib/prawn/document.rb:540:in `generate_margin_box': undefined method `[]' for nil:NilClass (NoMethodError)\n    (snip)\n```\n\nI guess the problem is in Prawn::Core::Page#dimensions. Some PDF Page object has no MediaBox entry(they use inherited value of MediaBox). So dimentions method returns nil.\n\nThanks,\n. I confirmed no error raised. Actually, my script using template generates invalid PDF :-/, but it's another issue.\nAnyway, thanks again for your work!\n. ",
    "yangyanhao": "I am using Prawn gem 0.8.4. But I read the newest code, I think nothing changed about this.\n. There are really some great improvements in the new version. I'd better upgrade it.\nThanks.\n. I am using Prawn gem 0.8.4. But I read the newest code, I think nothing changed about this.\n. There are really some great improvements in the new version. I'd better upgrade it.\nThanks.\n. ",
    "igorbozato": "A code example of this problem with subtables:\n\n```\nPrawn::Document.generate(\"tables.pdf\") do\n  content = []\n  content << [\"test\", \"test\"]\n  subtable = (1..50).map { |i| [\"test\", i.to_s]}\n\n  content << [subtable]\n  content << [\"test\", \"test\"]\n\n  table content\nend\n```\n. :+1: \n. A code example of this problem with subtables:\n\n```\nPrawn::Document.generate(\"tables.pdf\") do\n  content = []\n  content << [\"test\", \"test\"]\n  subtable = (1..50).map { |i| [\"test\", i.to_s]}\n\n  content << [subtable]\n  content << [\"test\", \"test\"]\n\n  table content\nend\n```\n. :+1: \n. ",
    "DefV": "Has anyone started to tackle this problem? I'm having the same issue, and need it fixed so I'm willing to take the time to get my hands dirty. Any plan of approach / pointers?\n. The problem seems to be in Prawn::Table::Cell#draw_bounded_content, which changes @pdf.y. Before, the loop calculated that in and the y to start drawing was recalculated before drawing each cell, so the changed y coordinate was compensated.\n\nI fixed it like this:\n\n``` ruby\ndef draw_bounded_content(pt)\n  original_y = @pdf.y\n  @pdf.bounding_box([pt[0] + padding_left, pt[1] - padding_top], \n      :width  => content_width + FPTolerance,\n      :height => content_height + FPTolerance) do\n         draw_content\n  end\n  @pdf.y = original_y\nend\n```\n\nwhich works, but isn't a clean solution. Any takers? :-)\n. Has anyone started to tackle this problem? I'm having the same issue, and need it fixed so I'm willing to take the time to get my hands dirty. Any plan of approach / pointers?\n. The problem seems to be in Prawn::Table::Cell#draw_bounded_content, which changes @pdf.y. Before, the loop calculated that in and the y to start drawing was recalculated before drawing each cell, so the changed y coordinate was compensated.\n\nI fixed it like this:\n\n``` ruby\ndef draw_bounded_content(pt)\n  original_y = @pdf.y\n  @pdf.bounding_box([pt[0] + padding_left, pt[1] - padding_top], \n      :width  => content_width + FPTolerance,\n      :height => content_height + FPTolerance) do\n         draw_content\n  end\n  @pdf.y = original_y\nend\n```\n\nwhich works, but isn't a clean solution. Any takers? :-)\n. ",
    "royalghost": "Any update on this feature? \n. Any update on this feature? \n. ",
    "jsarma": "\"Though this seems to be a common request, we still want to support the current case (where cells are constrained to lie on a single page), and we probably want it to still be the default. Splitting cells across pages can be an opt-in feature.\"\n\nI can see how this would be a tricky problem to solve. But I don't understand why truncating the page should be the default. Is there any use case where users would want the data in their PDF truncated? This seems like more of a bug than a feature request.\n\nFor anyone else with this problem, I think there's an easy workaround: Just split long rows when you generate your input content.\n. Hi Brad. Do you think there is any way one could determine before drawing the table how big the bounding box of each cell is? \n\nIf so, then a good workaround would be to just split rows that are too long before inputting the data into the table call. I've implemented this sort of solution, but since font characters are all different width, and there are linebreaks, etc..., the number of characters is the box is not a good estimate of whether it will overflow. So I end up splitting the rows too early.\n\nThank you for your feedback on this issue.\n. @fluxsaas Unfortunately, I couldn't find any way to use prawn to estimate the height of the cell for splitting. \n\nInstead, I did some experimenting. In my particular case, 1700 characters turned out to be a pretty safe place to split. But this assumes line breaks aren't used heavily. If you split after too few chars, you occasionally end up with cases where both cells are on the same page, but are split. This doesn't look very professional, but it's not a disaster. If you split after too many characters, you end up with the overflow bug which is really bad. Below is the code I used to implement this total hack. It was hastily thrown together, so don't expect too much from it. It would probably function a bit better if recognized line breaks and counted them as 50 characters or something.\n\n``` ruby\n    def self.find_prev_space(s, index) #find last space before index and return it\n        for i in 0..200\n            return index - i if (s[index-i].chr==' ')\n            break if (index-i<=0)\n        end\n        return index #could not find space, so just break anywhere\n    end\n\n    #if second column has more than max_size characters, split into multiple rows.\n    #Repeat first column, and add cont... to it\n    def self.split_big_row(array, max_size) \n        return [array] if (array[1].size <= max_size)\n        src = array.dup\n        dst = []\n        count = 0\n        while (src[1].size > max_size)\n            i = self.find_prev_space(src[1], max_size)\n            if (count==0)\n                label = src[0]\n            else\n                label = \"#{src[0]} (cont...)\" \n            end\n            dst << [label, src[1][0..i]] \n            src[1] = src[1][i+1..-1]\n            count+=1\n        end\n        if (count==0)\n            label = src[0]\n        else\n            label = \"#{src[0]} (cont...)\" \n        end\n        dst << [label, src[1]]\n        return dst\n    end\n\n```\n. \"Though this seems to be a common request, we still want to support the current case (where cells are constrained to lie on a single page), and we probably want it to still be the default. Splitting cells across pages can be an opt-in feature.\"\n\nI can see how this would be a tricky problem to solve. But I don't understand why truncating the page should be the default. Is there any use case where users would want the data in their PDF truncated? This seems like more of a bug than a feature request.\n\nFor anyone else with this problem, I think there's an easy workaround: Just split long rows when you generate your input content.\n. Hi Brad. Do you think there is any way one could determine before drawing the table how big the bounding box of each cell is? \n\nIf so, then a good workaround would be to just split rows that are too long before inputting the data into the table call. I've implemented this sort of solution, but since font characters are all different width, and there are linebreaks, etc..., the number of characters is the box is not a good estimate of whether it will overflow. So I end up splitting the rows too early.\n\nThank you for your feedback on this issue.\n. @fluxsaas Unfortunately, I couldn't find any way to use prawn to estimate the height of the cell for splitting. \n\nInstead, I did some experimenting. In my particular case, 1700 characters turned out to be a pretty safe place to split. But this assumes line breaks aren't used heavily. If you split after too few chars, you occasionally end up with cases where both cells are on the same page, but are split. This doesn't look very professional, but it's not a disaster. If you split after too many characters, you end up with the overflow bug which is really bad. Below is the code I used to implement this total hack. It was hastily thrown together, so don't expect too much from it. It would probably function a bit better if recognized line breaks and counted them as 50 characters or something.\n\n``` ruby\n    def self.find_prev_space(s, index) #find last space before index and return it\n        for i in 0..200\n            return index - i if (s[index-i].chr==' ')\n            break if (index-i<=0)\n        end\n        return index #could not find space, so just break anywhere\n    end\n\n    #if second column has more than max_size characters, split into multiple rows.\n    #Repeat first column, and add cont... to it\n    def self.split_big_row(array, max_size) \n        return [array] if (array[1].size <= max_size)\n        src = array.dup\n        dst = []\n        count = 0\n        while (src[1].size > max_size)\n            i = self.find_prev_space(src[1], max_size)\n            if (count==0)\n                label = src[0]\n            else\n                label = \"#{src[0]} (cont...)\" \n            end\n            dst << [label, src[1][0..i]] \n            src[1] = src[1][i+1..-1]\n            count+=1\n        end\n        if (count==0)\n            label = src[0]\n        else\n            label = \"#{src[0]} (cont...)\" \n        end\n        dst << [label, src[1]]\n        return dst\n    end\n\n```\n. ",
    "fluxsaas": "@jsarma  do you found a workaround yet for calculating height to split cells? i'm going crazy about this :)\n. @jsarma  do you found a workaround yet for calculating height to split cells? i'm going crazy about this :)\n. ",
    "rusllonrails": "Still getting this error with Rails '4.2.7.1', prawn (1.3.0) and prawn-table (0.2.1).\nAny success on fixing it?\n. @sandal thanks for reviewing.\nOpened issue in https://github.com/prawnpdf/pdf-core/issues/14\n. Still getting this error with Rails '4.2.7.1', prawn (1.3.0) and prawn-table (0.2.1).\nAny success on fixing it?\n. @sandal thanks for reviewing.\nOpened issue in https://github.com/prawnpdf/pdf-core/issues/14\n. ",
    "TylerRick": "This seems to fix the problem:\nhttp://github.com/TylerRick/prawn/commit/91213a82e79f9715276a75c1e13b795a4aac4264\n. It looks like your backtrace is only showing frames from your _application_ files and therefore omits any lines from gem/framework source code. Those omitted lines would be needed to debug this.\n\nIf the error message shows up in your browser, there should be 3 links \"Application Trace | Framework Trace | Full Trace\" and you can see the full trace by clicking Full Trace.\n\nIf the backtrace is only showing in your log file, you might try adding this line to config/initializers/backtrace_silencers.rb:\n\n``` ruby\nRails.backtrace_cleaner.remove_silencers!\n```\n. This seems to fix the problem:\nhttp://github.com/TylerRick/prawn/commit/91213a82e79f9715276a75c1e13b795a4aac4264\n. It looks like your backtrace is only showing frames from your _application_ files and therefore omits any lines from gem/framework source code. Those omitted lines would be needed to debug this.\n\nIf the error message shows up in your browser, there should be 3 links \"Application Trace | Framework Trace | Full Trace\" and you can see the full trace by clicking Full Trace.\n\nIf the backtrace is only showing in your log file, you might try adding this line to config/initializers/backtrace_silencers.rb:\n\n``` ruby\nRails.backtrace_cleaner.remove_silencers!\n```\n. ",
    "ahsangill": "I am having the same problem. After applying your patch, if there are 2 rows in my table. One of them has just one or two lines and the other one has 100+ lines. I only see 1st row in first page and the second row on next page. So the rest of the first page remains blank. Secondly, the row on the next page does not show all the data in that long cell.\nI think instead of going to next page it should fill the page and then continue on the next page.\n. I am having the same problem. After applying your patch, if there are 2 rows in my table. One of them has just one or two lines and the other one has 100+ lines. I only see 1st row in first page and the second row on next page. So the rest of the first page remains blank. Secondly, the row on the next page does not show all the data in that long cell.\nI think instead of going to next page it should fill the page and then continue on the next page.\n. ",
    "gioele": "The code in issue #266 could easily solve this issue.\n. I'm using the following gems:\n- Ascii85 (1.0.1)\n- bundler (1.0.21)\n- pdf-reader (0.10.1)\n- prawn (0.12.0)\n- ttfunk (1.0.3)\n. This bug is still present in Prawn 1.0.0.rc1 (git HEAD 5b034c253dd21ce9a3e75909e3f4a48719ac0026)\n. @yob: so is this still a bug or is the use of `pdf.line` just wrong?\n. @cheba thank you for the explanation.\n. The code in issue #266 could easily solve this issue.\n. I'm using the following gems:\n- Ascii85 (1.0.1)\n- bundler (1.0.21)\n- pdf-reader (0.10.1)\n- prawn (0.12.0)\n- ttfunk (1.0.3)\n. This bug is still present in Prawn 1.0.0.rc1 (git HEAD 5b034c253dd21ce9a3e75909e3f4a48719ac0026)\n. @yob: so is this still a bug or is the use of `pdf.line` just wrong?\n. @cheba thank you for the explanation.\n. ",
    "rafbm": "Why is this not in the current gem release? Still getting `undefined method 'position='` errors.\n\nIf I use `gem 'prawn', :git => \"https://github.com/prawnpdf/prawn.git\"` in my Gemfile, I don\u2019t get the error. And `:position` is documented in the manual.\n. Ok. Then what\u2019s a safe way of pointing to your true \u201ccurrent release\u201d from my Gemfile? If I\u2019m not mistaken, pointing to `gem 'prawn', :git => \"https://github.com/prawnpdf/prawn.git\"` would allow Bundler to install a broken version if I run `bundle install` at a time your master is broken\u2026 ?\n. Why is this not in the current gem release? Still getting `undefined method 'position='` errors.\n\nIf I use `gem 'prawn', :git => \"https://github.com/prawnpdf/prawn.git\"` in my Gemfile, I don\u2019t get the error. And `:position` is documented in the manual.\n. Ok. Then what\u2019s a safe way of pointing to your true \u201ccurrent release\u201d from my Gemfile? If I\u2019m not mistaken, pointing to `gem 'prawn', :git => \"https://github.com/prawnpdf/prawn.git\"` would allow Bundler to install a broken version if I run `bundle install` at a time your master is broken\u2026 ?\n. ",
    "ksugiarto": "Sir, I have an issue also about it, but soon I search and found another solvency which is using **gem 'prawn-layout'** but there is also a problem about it. What I want to ask is, I'm kind of afraid that if I pointing to the git, how if the git was deleted? Thanks\n. Oh I see. So with pointing to the git now is the best achieve? If that's so, I'll pointing my Gem to that git then. Thanks so much! I believe there is some kind of notice if the version will be deprecated right? Sorry, kind of newbie here :)\n. Excuse me, how can I update my prawn to that this table fixed version? Sorry, rails newbie..\n. That really works now! You guys are really rocks! Thank so much.\n. Looks like there is still some messy sir for table with span and self.column_widths. Mine using width 540 usually and now it over the right page boundary. So I try to decrease it to 500 and looks perfect. Then i need to span more on some cell, and it began to over the right boundary again. But it looks so great still!\n\nThen I'll prepare my next project using those 1.0.0 RC3 :D\n. @sandal Done great sir. Thanks\n. @sandal @hbrandl Sir, I'm not trying to rushing you, but it seems using https://github.com/hbrandl/prawn/tree/issue_407_2 not working on my production with error something like `branch not checked out`. Any ideas?\n. Sir, I have an issue also about it, but soon I search and found another solvency which is using **gem 'prawn-layout'** but there is also a problem about it. What I want to ask is, I'm kind of afraid that if I pointing to the git, how if the git was deleted? Thanks\n. Oh I see. So with pointing to the git now is the best achieve? If that's so, I'll pointing my Gem to that git then. Thanks so much! I believe there is some kind of notice if the version will be deprecated right? Sorry, kind of newbie here :)\n. Excuse me, how can I update my prawn to that this table fixed version? Sorry, rails newbie..\n. That really works now! You guys are really rocks! Thank so much.\n. Looks like there is still some messy sir for table with span and self.column_widths. Mine using width 540 usually and now it over the right page boundary. So I try to decrease it to 500 and looks perfect. Then i need to span more on some cell, and it began to over the right boundary again. But it looks so great still!\n\nThen I'll prepare my next project using those 1.0.0 RC3 :D\n. @sandal Done great sir. Thanks\n. @sandal @hbrandl Sir, I'm not trying to rushing you, but it seems using https://github.com/hbrandl/prawn/tree/issue_407_2 not working on my production with error something like `branch not checked out`. Any ideas?\n. ",
    "elm0": "yep, thx just tried it with prawn (0.11.1.pre) and its working fine :-)\n. yep, thx just tried it with prawn (0.11.1.pre) and its working fine :-)\n. ",
    "CootCraig": "Is this still an issue?  If it is I don't know how to recreate it.  If I was able to recreate it, I was going to see if I could fix this.\n\nhttps://gist.github.com/947787\n\nI'm learning Ruby and thought exploring the Prawn source would be educational.\n\n**\\* LOCAL GEMS ***\n\nAscii85 (1.0.0)\nbundler (1.0.0.rc.5)\npdf-reader (0.9.2)\nprawn (0.11.1)\nrake (0.8.7)\nttfunk (1.0.1)\n. Thanks for the reply, I'm certainly in over my head.  At this point I don't understand the problem enough to recreate it.  I did a direct reply to Cheba from the Google Group thread.  I'll let you know if I make any progress.  I do plan to continue some study of Prawn code as part of my learning Ruby.\n. Is this still an issue?  If it is I don't know how to recreate it.  If I was able to recreate it, I was going to see if I could fix this.\n\nhttps://gist.github.com/947787\n\nI'm learning Ruby and thought exploring the Prawn source would be educational.\n\n**\\* LOCAL GEMS ***\n\nAscii85 (1.0.0)\nbundler (1.0.0.rc.5)\npdf-reader (0.9.2)\nprawn (0.11.1)\nrake (0.8.7)\nttfunk (1.0.1)\n. Thanks for the reply, I'm certainly in over my head.  At this point I don't understand the problem enough to recreate it.  I did a direct reply to Cheba from the Google Group thread.  I'll let you know if I make any progress.  I do plan to continue some study of Prawn code as part of my learning Ruby.\n. ",
    "manuelmeurer": "Oops, my bad, I found the error: I referenced the image pathes with Rails.root.join('images', ...), which returns a Pathname object and caused the Prawn::Errors::UnsupportedImageType exception. When I add a to_s, the error disappears.\n. Oops, my bad, I found the error: I referenced the image pathes with Rails.root.join('images', ...), which returns a Pathname object and caused the Prawn::Errors::UnsupportedImageType exception. When I add a to_s, the error disappears.\n. ",
    "MikeBlyth": "Sorry, I'm just learning rspec and haven't even figured out how to run it from prawn. `rspec` and `rake rspec` have not worked for me. The bug occurs in _indented_ paragraphs, which I may not have mentioned before (proving the usefulness of failing tests!).\n\nThe code I used is \n\n```\np = Prawn::Document.new\np.text(\"text\\n\\ntext\", :indent_paragraphs => 13)\np.render_file(\"empty_para_bug.pdf\")\n```\n. Let me check it again. I think that the changes are small but the git diff engine is marking a lot of lines as new that are not ... perhaps my indenting was off and caused the problem though I didn't see that on my source as I was editing it. Also, I fixed a typo in the documentation-comments in box.rb, where Prawn::Text::Core::Wrap should have been Prawn::Core::Text::Wrap.\n. Also, as I said in my comments, I would prefer a repair to the logic that is causing the problem rather than setting a non-breaking-space for a blank line, but I haven't figured out Prawn that deeply.\n. Sorry, it looks like my formatted_columns proposed addition got into the same commit as the fix to the blank line bug, so no wonder it seems like a lot of unrelated code. The bug fix only involves lib/prawn/text.rb and it suppresses blank lines at the top of pages also.\n. Sorry, I'm just learning rspec and haven't even figured out how to run it from prawn. `rspec` and `rake rspec` have not worked for me. The bug occurs in _indented_ paragraphs, which I may not have mentioned before (proving the usefulness of failing tests!).\n\nThe code I used is \n\n```\np = Prawn::Document.new\np.text(\"text\\n\\ntext\", :indent_paragraphs => 13)\np.render_file(\"empty_para_bug.pdf\")\n```\n. Let me check it again. I think that the changes are small but the git diff engine is marking a lot of lines as new that are not ... perhaps my indenting was off and caused the problem though I didn't see that on my source as I was editing it. Also, I fixed a typo in the documentation-comments in box.rb, where Prawn::Text::Core::Wrap should have been Prawn::Core::Text::Wrap.\n. Also, as I said in my comments, I would prefer a repair to the logic that is causing the problem rather than setting a non-breaking-space for a blank line, but I haven't figured out Prawn that deeply.\n. Sorry, it looks like my formatted_columns proposed addition got into the same commit as the fix to the blank line bug, so no wonder it seems like a lot of unrelated code. The bug fix only involves lib/prawn/text.rb and it suppresses blank lines at the top of pages also.\n. ",
    "bcardarella": "I'm seeing this issue as well. However, this bug fix seems to include much more than just the fix mentioned. Any chance we can isolate the code?\n. Mike, check this out: https://github.com/sandal/prawn/pull/166\n\nIf you agree with it please upvote for the pull.\n. I'm seeing this issue as well. However, this bug fix seems to include much more than just the fix mentioned. Any chance we can isolate the code?\n. Mike, check this out: https://github.com/sandal/prawn/pull/166\n\nIf you agree with it please upvote for the pull.\n. ",
    "sriegel2": "I think this solves it: https://github.com/sandal/prawn/issues/issue/180/#issue/180\n. I think this solves https://github.com/sandal/prawn/issues#issue/165\n. I think this solves it: https://github.com/sandal/prawn/issues/issue/180/#issue/180\n. I think this solves https://github.com/sandal/prawn/issues#issue/165\n. ",
    "derek-watson": "This issue should not be closed, it is still a problem in 1.0.0.rc2, the fix suggested by @Bluejade works correctly and should be merged.\n. I'd be happy to. Can you give me a quick high-level on your approach to testing the visual rendering of things? How best can I express in a test that \"the bottom of the rendered text should sit on the bottom of the enclosing text box\"?\n. This issue should not be closed, it is still a problem in 1.0.0.rc2, the fix suggested by @Bluejade works correctly and should be merged.\n. I'd be happy to. Can you give me a quick high-level on your approach to testing the visual rendering of things? How best can I express in a test that \"the bottom of the rendered text should sit on the bottom of the enclosing text box\"?\n. ",
    "jessedoyle": "@sandal There is already a `line_gap` method in `Prawn::Text::Formatted::Box`.\n\nThe final gap can be removed by (in `process_vertical_alignment`):\n\n``` ruby\nwhen :bottom\n  @at[1] = @at[1] - (@height - height) + @descender\n  @at[1] -= line_gap\nend\n```\n\nI was able to implement the fixes to `valign: :center` and `valign: :bottom` that you described above on a local fork. I'd be happy to tackle this issue and submit a pull request.\n. @sandal Here's a few examples of the implemented fixes:\n\nUsing the same code you demonstrated above:\n![valign_fixes_gap](https://cloud.githubusercontent.com/assets/6474230/4638801/98c45d24-5400-11e4-9d40-20de4c903330.png)\n\nNotice here how the center aligned element has top/bottom gaps equal to the distance from the bottom to the baseline.\n\nUsing `:final_gap => false` on the last element:\n\n![valign_fixes_nogap](https://cloud.githubusercontent.com/assets/6474230/4638823/e0d94700-5400-11e4-9bcf-4997349dbe52.png)\n\nHere we can see that the bottom aligned element does not have a final gap between the box bottom and  the descender.\n\nI'll submit a pull request shorty. Let me know what you think!\n. @sandal Adding an `:initial_gap` option should not be difficult.\n\nWould the option only be relevant to `:valign => :center`? Or would it also apply to `:valign => :top` (as this would not be the same as existing behaviour)? \n. @sandal I'm not sure I agree with your last comment.\n\nIf you set `:valign => :bottom`, regardless of what `:initial_gap` would be set to, shouldn't the text render as close to the bottom of the box as possible?\n\nIn this case, there would always be an 'initial gap', which consists of the empty space at the top of the box. \n\nThis seems to be logical to me, even if the font size is reduced due to `:shrink_to_fit`.\n. @sandal: I definitely understand you now.\n\nI agree that there should be some more thought on this.\n\nHonestly, I don't think an `initial_gap` option is necessary. It would have to default to false to match current behaviour, and I don't think that users would find such an option useful. Instead, they would likely call `move_down` elsewhere to achieve similar output.\n\nFurthermore, my efforts to implement the `:initial_gap` option have not yet been successful.\n\nHere's my current code for `process_vertical_alignment`:\n\n``` ruby\ndef process_vertical_alignment(text)\n  return if defined?(@vertical_alignment_processed) && @vertical_alignment_processed\n  @vertical_alignment_processed = true\n\n   return if @vertical_align == :top\n\n   wrap(text)\n\n   case @vertical_align\n   when :center\n     @at[1] -= (@height - height + @descender) * 0.5\n   when :bottom\n     @at[1] -= (@height - height)\n     @at[1] += line_gap if @final_gap\n   end\n\n  @height = height\nend\n```\n\nYou can change the code to:\n\n``` ruby\ndef process_vertical_alignment(text)\n  return if defined?(@vertical_alignment_processed) && @vertical_alignment_processed\n  @vertical_alignment_processed = true\n   wrap(text)\n\n   case @vertical_align\n   when :top\n     # Do something if @inital_gap\n   when :center\n     @at[1] -= (@height - height + @descender) * 0.5\n   when :bottom\n     @at[1] -= (@height - height)\n     @at[1] += line_gap if @final_gap\n   end\n\n  @height = height\nend\n```\n\nBut this causes tests to break, likely due to not returning before the `wrap(text)` call sets various instance variables.\n\nAny ideas?\n. This pull requests adds a `:final_gap` option to `Prawn::Text::Formatted::Box`.\n\nThis option defaults to `true` to match the current existing behaviour.\n\nVertical align centering is also changed slightly to calculate the top/bottom gaps based on the distance between the bottom of the box and the baseline of the text (as opposed to the descender). \n\nHere's some output with the various options:\n![valign](https://cloud.githubusercontent.com/assets/6474230/4653096/d1007628-54aa-11e4-86cf-f5c97f1b38b6.png)\n. @sandal: I removed the `:final_gap` option as you suggested.\n\nThis patch should make all text_boxes with `:valign => :bottom` render correctly without any padding on the bottom of the box.\n\nI agree with your previous comments about fine-grained control over the location of rendered text.\n\nAs a Prawn user, I'd like to see padding options added with a format like:\n\n``` ruby\n ... padding: { top: 10, bottom: 10, left: 5, right: 15 }, ...\n```\n\nOr:\n\n``` ruby\n ... padding: 10, ...\n```\n\nto set the padding equally in all directions.\n\nI would be willing to help implement these features, but I'll likely require assistance from someone more familiar with the codebase to do so.\n. @sandal: I'll do that.\n\nThanks for being awesome and making Prawn!\n. @practicingruby - I submitted PR #825 that delegates the method call to `renderer`. Hopefully we can get this in the 2.0.0 release!\n. I'm a big fan of a stable, predictable release cycle. Furthermore, I think that it is worthwhile to release a new version even if it's a standard code refactor. Simply refactoring code can lead to performance improvements (possibly), plus I know that I've hacked the sources in my ruby gems profile before - better readability is always a good thing!\n. @packetmonkey - I wasn't aware that the warning for private attributes was removed in Ruby trunk.\n\nRegardless, I believe it's going to be some time before 2.2 usage is small enough to be negligible. \n\nMany Prawn users (such as myself) may not be aware of this change in Ruby trunk and see any warnings generated by Prawn as unprofessional. I truly believe the best approach is to write code that doesn't generate warnings on any Ruby interpreter first, then consider personal code style second.\n\nCorrect me if I'm misunderstanding, but you prefer:\n\n``` ruby\nclass Foo\n\n  def some_method(arg)\n    self.bar = arg\n  end\n\n  private\n\n  attr_accessor :bar\nend\n```\n\nover direct modification of instance variables?\n\nWouldn't instance variables be equivalent to private accessors in this case, but be arguably more simple?\n\nPlease don't take this in a negative light, I'm just curious as to your reasoning (or like I said, I may be misunderstanding something) :smiley:.\n. @crazymykl - Thanks that makes sense!\n\nIt may be useful for a massive and complex codebase, but I don't think it's necessary here.\n\nIn this case, classes that were changed were all <= 300 lines of code and the accessors weren't referenced very often. I don't think that this style change is worth the interpreter throwing a warning.\n. Thanks a lot Evan!\n. @sandal There is already a `line_gap` method in `Prawn::Text::Formatted::Box`.\n\nThe final gap can be removed by (in `process_vertical_alignment`):\n\n``` ruby\nwhen :bottom\n  @at[1] = @at[1] - (@height - height) + @descender\n  @at[1] -= line_gap\nend\n```\n\nI was able to implement the fixes to `valign: :center` and `valign: :bottom` that you described above on a local fork. I'd be happy to tackle this issue and submit a pull request.\n. @sandal Here's a few examples of the implemented fixes:\n\nUsing the same code you demonstrated above:\n![valign_fixes_gap](https://cloud.githubusercontent.com/assets/6474230/4638801/98c45d24-5400-11e4-9d40-20de4c903330.png)\n\nNotice here how the center aligned element has top/bottom gaps equal to the distance from the bottom to the baseline.\n\nUsing `:final_gap => false` on the last element:\n\n![valign_fixes_nogap](https://cloud.githubusercontent.com/assets/6474230/4638823/e0d94700-5400-11e4-9bcf-4997349dbe52.png)\n\nHere we can see that the bottom aligned element does not have a final gap between the box bottom and  the descender.\n\nI'll submit a pull request shorty. Let me know what you think!\n. @sandal Adding an `:initial_gap` option should not be difficult.\n\nWould the option only be relevant to `:valign => :center`? Or would it also apply to `:valign => :top` (as this would not be the same as existing behaviour)? \n. @sandal I'm not sure I agree with your last comment.\n\nIf you set `:valign => :bottom`, regardless of what `:initial_gap` would be set to, shouldn't the text render as close to the bottom of the box as possible?\n\nIn this case, there would always be an 'initial gap', which consists of the empty space at the top of the box. \n\nThis seems to be logical to me, even if the font size is reduced due to `:shrink_to_fit`.\n. @sandal: I definitely understand you now.\n\nI agree that there should be some more thought on this.\n\nHonestly, I don't think an `initial_gap` option is necessary. It would have to default to false to match current behaviour, and I don't think that users would find such an option useful. Instead, they would likely call `move_down` elsewhere to achieve similar output.\n\nFurthermore, my efforts to implement the `:initial_gap` option have not yet been successful.\n\nHere's my current code for `process_vertical_alignment`:\n\n``` ruby\ndef process_vertical_alignment(text)\n  return if defined?(@vertical_alignment_processed) && @vertical_alignment_processed\n  @vertical_alignment_processed = true\n\n   return if @vertical_align == :top\n\n   wrap(text)\n\n   case @vertical_align\n   when :center\n     @at[1] -= (@height - height + @descender) * 0.5\n   when :bottom\n     @at[1] -= (@height - height)\n     @at[1] += line_gap if @final_gap\n   end\n\n  @height = height\nend\n```\n\nYou can change the code to:\n\n``` ruby\ndef process_vertical_alignment(text)\n  return if defined?(@vertical_alignment_processed) && @vertical_alignment_processed\n  @vertical_alignment_processed = true\n   wrap(text)\n\n   case @vertical_align\n   when :top\n     # Do something if @inital_gap\n   when :center\n     @at[1] -= (@height - height + @descender) * 0.5\n   when :bottom\n     @at[1] -= (@height - height)\n     @at[1] += line_gap if @final_gap\n   end\n\n  @height = height\nend\n```\n\nBut this causes tests to break, likely due to not returning before the `wrap(text)` call sets various instance variables.\n\nAny ideas?\n. This pull requests adds a `:final_gap` option to `Prawn::Text::Formatted::Box`.\n\nThis option defaults to `true` to match the current existing behaviour.\n\nVertical align centering is also changed slightly to calculate the top/bottom gaps based on the distance between the bottom of the box and the baseline of the text (as opposed to the descender). \n\nHere's some output with the various options:\n![valign](https://cloud.githubusercontent.com/assets/6474230/4653096/d1007628-54aa-11e4-86cf-f5c97f1b38b6.png)\n. @sandal: I removed the `:final_gap` option as you suggested.\n\nThis patch should make all text_boxes with `:valign => :bottom` render correctly without any padding on the bottom of the box.\n\nI agree with your previous comments about fine-grained control over the location of rendered text.\n\nAs a Prawn user, I'd like to see padding options added with a format like:\n\n``` ruby\n ... padding: { top: 10, bottom: 10, left: 5, right: 15 }, ...\n```\n\nOr:\n\n``` ruby\n ... padding: 10, ...\n```\n\nto set the padding equally in all directions.\n\nI would be willing to help implement these features, but I'll likely require assistance from someone more familiar with the codebase to do so.\n. @sandal: I'll do that.\n\nThanks for being awesome and making Prawn!\n. @practicingruby - I submitted PR #825 that delegates the method call to `renderer`. Hopefully we can get this in the 2.0.0 release!\n. I'm a big fan of a stable, predictable release cycle. Furthermore, I think that it is worthwhile to release a new version even if it's a standard code refactor. Simply refactoring code can lead to performance improvements (possibly), plus I know that I've hacked the sources in my ruby gems profile before - better readability is always a good thing!\n. @packetmonkey - I wasn't aware that the warning for private attributes was removed in Ruby trunk.\n\nRegardless, I believe it's going to be some time before 2.2 usage is small enough to be negligible. \n\nMany Prawn users (such as myself) may not be aware of this change in Ruby trunk and see any warnings generated by Prawn as unprofessional. I truly believe the best approach is to write code that doesn't generate warnings on any Ruby interpreter first, then consider personal code style second.\n\nCorrect me if I'm misunderstanding, but you prefer:\n\n``` ruby\nclass Foo\n\n  def some_method(arg)\n    self.bar = arg\n  end\n\n  private\n\n  attr_accessor :bar\nend\n```\n\nover direct modification of instance variables?\n\nWouldn't instance variables be equivalent to private accessors in this case, but be arguably more simple?\n\nPlease don't take this in a negative light, I'm just curious as to your reasoning (or like I said, I may be misunderstanding something) :smiley:.\n. @crazymykl - Thanks that makes sense!\n\nIt may be useful for a massive and complex codebase, but I don't think it's necessary here.\n\nIn this case, classes that were changed were all <= 300 lines of code and the accessors weren't referenced very often. I don't think that this style change is worth the interpreter throwing a warning.\n. Thanks a lot Evan!\n. ",
    "unexist": "Is there any progress regarding this? I still haven't found any hint how to actually rotate a cell even with broken offsets. The version-doc chaos with prawn isn't a big help.\n. Is there any progress regarding this? I still haven't found any hint how to actually rotate a cell even with broken offsets. The version-doc chaos with prawn isn't a big help.\n. ",
    "jpshackelford": "Confirming that this is still an issue in 0.11.1\n. Committers, \n\nWhat is that status of this pull request? I am interested in enhancing table support for cell rotations and merging cells and it would be nice to know if this code is going to be accepted or rejected or if additional work is required for acceptance. \n\nThanks!\n. Confirming that this is still an issue in 0.11.1\n. Committers, \n\nWhat is that status of this pull request? I am interested in enhancing table support for cell rotations and merging cells and it would be nice to know if this code is going to be accepted or rejected or if additional work is required for acceptance. \n\nThanks!\n. ",
    "donv": ":+1:  we need this feature for an immediate project.\n. +1 on an RC2 or 1.0.0 release.  The gem is great!\n. Any progress on this?\n. Thanks!\n. Hi!\n\nAny progress on a stable release?\n. Woohoo!  Awesome!\n. We use prawn with JRuby with great success.  Having official support would make us happy.  We will definitely help with testing.\n. :+1:  We have run into this as well.  Is there any work around available?\n\nIs there a way to check if a row will fit on the current page, so we can start a new table instead?\n. Thanks @Skulli for the link, but the transaction/rollback feature is disabled in prawn 1.0.\n. I my cases, I would expect that all content was rendered and visible.  Content could be split on lines.\n\nTools to get the maximum available row height and needed row height so we can split the content ourselves would be great.  Being able to split the content ourselves is is preferred since we would need to repeat cells with colspan > 1 that lie parallel to the cells that are too large for the remaining space.\n. If we could interact with the table rendering and detect the overflow, and then adjust the content to the rendering conditions, we could do the splitting ourselves.\n. I agree that the other columns should be empty unless they also have very long texts.\n\nRegarding interacting with the table rendering, I'll see if I can present an example for my special use case.\n\nRegarding my comment:  It was late :)  I was tired.  I understand what I wrote, barely :)  but actually I think you got the important part about continuing multi-row cells when clipping cell content and continuing the cell on the next page.\n. :+1:  This is biting me displaying right aligned iso date:  \"2013-11-30\".\n\nAny workaround?  Got a dead line on monday :smile: \n. Thank you for the quick answer!\n\nUsing 0.12.0 gave me an encoding error when calling `render`:\n\n```\nEncoding::CompatibilityError (incompatible character encodings: UTF-8 and UTF-16BE):\n```\n\nI will try using a TTF font.\n. Thanks for tip about the TTF fonts!\n\nUsing \n\n``` ruby\n      font \"/Library/Fonts/Arial.ttf\"\n```\n\nworks for me on OS X.\n\nI have to switch back to \"Helvetica\" font for the **other** text since setting :style => :bold for the Arial.ttf font gives:\n\n```\nRuntimeError (Bad font family):\n```\n\nAnyway, this should see me through til monday :)  Thanks again!\n. Ah!  Thanks! \n. The simple case already has a spec.  I have submitted a PR with a spec for a multi-row case that fails.\n. I added the :unresolved and :issue tags.\n\nThe `.idea` directory is config for the RubyMine IDE and should not be added to the repository.  It has the same role as `nbproject` which is also ignored.\n\nI can of course remove it, but I recommend you to allow it to avoid adding IDE config to the repository and avoid noise in the git status.\n. Thanks!  I have added a global gitignore to my environment now.  Thanks for the tip.\n. Thanks!  I appreciate it :)\n. I see the travis specs fail, but none of the failures are related to this change.\n. There!  It should be OK now.\n. OK to merge?\n. Done.  Are we using milestones?  Should I file this against the next release?  1.1?\n. Displaying a warning if a non-Win1252 is submitted, but still try the UTF-8 => Win1252 transcode would suite me.\n. :+1:  we need this feature for an immediate project.\n. +1 on an RC2 or 1.0.0 release.  The gem is great!\n. Any progress on this?\n. Thanks!\n. Hi!\n\nAny progress on a stable release?\n. Woohoo!  Awesome!\n. We use prawn with JRuby with great success.  Having official support would make us happy.  We will definitely help with testing.\n. :+1:  We have run into this as well.  Is there any work around available?\n\nIs there a way to check if a row will fit on the current page, so we can start a new table instead?\n. Thanks @Skulli for the link, but the transaction/rollback feature is disabled in prawn 1.0.\n. I my cases, I would expect that all content was rendered and visible.  Content could be split on lines.\n\nTools to get the maximum available row height and needed row height so we can split the content ourselves would be great.  Being able to split the content ourselves is is preferred since we would need to repeat cells with colspan > 1 that lie parallel to the cells that are too large for the remaining space.\n. If we could interact with the table rendering and detect the overflow, and then adjust the content to the rendering conditions, we could do the splitting ourselves.\n. I agree that the other columns should be empty unless they also have very long texts.\n\nRegarding interacting with the table rendering, I'll see if I can present an example for my special use case.\n\nRegarding my comment:  It was late :)  I was tired.  I understand what I wrote, barely :)  but actually I think you got the important part about continuing multi-row cells when clipping cell content and continuing the cell on the next page.\n. :+1:  This is biting me displaying right aligned iso date:  \"2013-11-30\".\n\nAny workaround?  Got a dead line on monday :smile: \n. Thank you for the quick answer!\n\nUsing 0.12.0 gave me an encoding error when calling `render`:\n\n```\nEncoding::CompatibilityError (incompatible character encodings: UTF-8 and UTF-16BE):\n```\n\nI will try using a TTF font.\n. Thanks for tip about the TTF fonts!\n\nUsing \n\n``` ruby\n      font \"/Library/Fonts/Arial.ttf\"\n```\n\nworks for me on OS X.\n\nI have to switch back to \"Helvetica\" font for the **other** text since setting :style => :bold for the Arial.ttf font gives:\n\n```\nRuntimeError (Bad font family):\n```\n\nAnyway, this should see me through til monday :)  Thanks again!\n. Ah!  Thanks! \n. The simple case already has a spec.  I have submitted a PR with a spec for a multi-row case that fails.\n. I added the :unresolved and :issue tags.\n\nThe `.idea` directory is config for the RubyMine IDE and should not be added to the repository.  It has the same role as `nbproject` which is also ignored.\n\nI can of course remove it, but I recommend you to allow it to avoid adding IDE config to the repository and avoid noise in the git status.\n. Thanks!  I have added a global gitignore to my environment now.  Thanks for the tip.\n. Thanks!  I appreciate it :)\n. I see the travis specs fail, but none of the failures are related to this change.\n. There!  It should be OK now.\n. OK to merge?\n. Done.  Are we using milestones?  Should I file this against the next release?  1.1?\n. Displaying a warning if a non-Win1252 is submitted, but still try the UTF-8 => Win1252 transcode would suite me.\n. ",
    "Whoops": "allow templates to be Stream-like objects as well as filenames.\n\nClosed by b8cae506d92605867b6f2cf33638d3f0c251c140.\n. MIT is fine with me.\n. allow templates to be Stream-like objects as well as filenames.\n\nClosed by b8cae506d92605867b6f2cf33638d3f0c251c140.\n. MIT is fine with me.\n. ",
    "francocatena": "It seems to me that is a must (for very large rows in a table like the example in the issue 147), I am willing to do a patch for this, but I need a little of guidelines in where to start. Where is the right place for implement this then?\n. OK, that is very helpfull, I will start looking the code, thank you very much.\n. It seems to me that is a must (for very large rows in a table like the example in the issue 147), I am willing to do a patch for this, but I need a little of guidelines in where to start. Where is the right place for implement this then?\n. OK, that is very helpfull, I will start looking the code, thank you very much.\n. ",
    "notrace": "when I open my bill.pdf in windows , the second  & 3th pages is empty , there is nothing without white.\n. when I open my bill.pdf in windows , the second  & 3th pages is empty , there is nothing without white.\n. ",
    "glendel": "It could be a floating point precision error\n. Hello Mr. Ediger, thank you for answer my issue and congrats to you and the team for this great library, it really works like a charm :)\n\nTracking this trouble I found a very simple solution to this, I think that would be great if the team could modify the \"width\", \"min-width\",  \"max-width\", and \"height\" methods in the \"lib/prawn/table/cells.rb\" file to fit to two (2) the decimal positions of the returned values.\n\nI am not sure the best way to do this but could be something like :\n\n```\n# Returns minimum width required to contain cells in the set.\n#\ndef min_width\n  column_min_widths = {}\n  each do |cell| \n    column_min_widths[cell.column] = \n      [column_min_widths[cell.column], cell.min_width].compact.max\n  end\n  the_min_width = column_min_widths.values.inject(0) { |sum, width| sum + width }\n  response = sprintf(\"%.2f\", the_min_width).to_f\n  return(response)\nend\n```\n\nOr in just one (1) line :\n\n```\n# Returns minimum width required to contain cells in the set.\n#\ndef min_width\n  ...........\n  sprintf(\"%.2f\", column_min_widths.values.inject(0) { |sum, width| sum + width }).to_f\nend\n```\n\nThanks for your time and your answer, please let me know where I can send you the reduced example and fonts.\n\nKind regards,\n\nGlendel J. Fyne\n. It could be a floating point precision error\n. Hello Mr. Ediger, thank you for answer my issue and congrats to you and the team for this great library, it really works like a charm :)\n\nTracking this trouble I found a very simple solution to this, I think that would be great if the team could modify the \"width\", \"min-width\",  \"max-width\", and \"height\" methods in the \"lib/prawn/table/cells.rb\" file to fit to two (2) the decimal positions of the returned values.\n\nI am not sure the best way to do this but could be something like :\n\n```\n# Returns minimum width required to contain cells in the set.\n#\ndef min_width\n  column_min_widths = {}\n  each do |cell| \n    column_min_widths[cell.column] = \n      [column_min_widths[cell.column], cell.min_width].compact.max\n  end\n  the_min_width = column_min_widths.values.inject(0) { |sum, width| sum + width }\n  response = sprintf(\"%.2f\", the_min_width).to_f\n  return(response)\nend\n```\n\nOr in just one (1) line :\n\n```\n# Returns minimum width required to contain cells in the set.\n#\ndef min_width\n  ...........\n  sprintf(\"%.2f\", column_min_widths.values.inject(0) { |sum, width| sum + width }).to_f\nend\n```\n\nThanks for your time and your answer, please let me know where I can send you the reduced example and fonts.\n\nKind regards,\n\nGlendel J. Fyne\n. ",
    "lminaudier": "I'm experimenting the same issue right know, when I use latest prawn `0.11.1-pre` and `prawnto` gem in a rails app.\nI will investigate and post here if I found somehing.\n\nAt the moment, the multipage portrait PDF that I generate opens well on mac os, display a blank page after the first one on acrobat reader 9 under ubuntu 11.04 and doesn't seem to have a page > 1 on windows\n. Yep, it seems that it is the same issue than [this one](https://github.com/sandal/prawn/issues#issue/183)\nThank you very much\n. Seems to work pretty well. Thumb up!\n. I'm experimenting the same issue right know, when I use latest prawn `0.11.1-pre` and `prawnto` gem in a rails app.\nI will investigate and post here if I found somehing.\n\nAt the moment, the multipage portrait PDF that I generate opens well on mac os, display a blank page after the first one on acrobat reader 9 under ubuntu 11.04 and doesn't seem to have a page > 1 on windows\n. Yep, it seems that it is the same issue than [this one](https://github.com/sandal/prawn/issues#issue/183)\nThank you very much\n. Seems to work pretty well. Thumb up!\n. ",
    "fbettag": "Thanks for responding that fast!\n. Thank you. i will give you results tomorrow.\n. Thank you. i will give you results tomorrow.\n. I couldn't wait ;) But i am happy to tell that it's working. Thank you so much for this awesome piece of code!\n. Thanks for responding that fast!\n. Thank you. i will give you results tomorrow.\n. Thank you. i will give you results tomorrow.\n. I couldn't wait ;) But i am happy to tell that it's working. Thank you so much for this awesome piece of code!\n. ",
    "tonini": "Hi\n\nIt seems that it's still not working.\n\nI'm using prawn (0.11.1) and run in the same issue with acrobat reader 9 + 10, just showing the first page of a multipage pdf file.\n\nany idea?\n\nthanks\n. Hi @bradediger\n\nAt last i figured it out. The problem was that i used a template pdf which was made with OSX's pages tool. Thanks!\n. Hi\n\nIt seems that it's still not working.\n\nI'm using prawn (0.11.1) and run in the same issue with acrobat reader 9 + 10, just showing the first page of a multipage pdf file.\n\nany idea?\n\nthanks\n. Hi @bradediger\n\nAt last i figured it out. The problem was that i used a template pdf which was made with OSX's pages tool. Thanks!\n. ",
    "danielfarrell": "I was using the latest prawn code from master as of yesterday.\n\nMy code looked as follows:\n\n```\n@blank_pdf_string = \"#{Statements::PDF_PATH}blank.pdf\"\nPrawn::Document.generate(\"#{filename_string}.pdf\", template: @blank_pdf_string) do |pdf|\n  lots of stuff to it...\n  pdf.start_new_page(template: @blank_pdf_string) if page > 1\n  more stuff...\nend\n```\n\nThe template was also generated using prawn and it here:\n\nhttp://dl.dropbox.com/u/21368/blank.pdf\n\nAny help would be appreciated.  Using the template method speeds up the generation process an order of magnitude which is what I'm going for.  Thank.\n. This is still an issue.  Anyone have any other thoughts on making it work?\n. Great work Chase!\n\nJon, any chance we can get a point release that includes this fix?\n. I was using the latest prawn code from master as of yesterday.\n\nMy code looked as follows:\n\n```\n@blank_pdf_string = \"#{Statements::PDF_PATH}blank.pdf\"\nPrawn::Document.generate(\"#{filename_string}.pdf\", template: @blank_pdf_string) do |pdf|\n  lots of stuff to it...\n  pdf.start_new_page(template: @blank_pdf_string) if page > 1\n  more stuff...\nend\n```\n\nThe template was also generated using prawn and it here:\n\nhttp://dl.dropbox.com/u/21368/blank.pdf\n\nAny help would be appreciated.  Using the template method speeds up the generation process an order of magnitude which is what I'm going for.  Thank.\n. This is still an issue.  Anyone have any other thoughts on making it work?\n. Great work Chase!\n\nJon, any chance we can get a point release that includes this fix?\n. ",
    "mikaelprag": "Same issue here. I'm using this function to merge files created earlier into one file, so all the files I have are generated by prawn. I tried with Mac generated ones as well, same issue. Tried most settings I could find for page size and layout etc and no change. Would be a nice fix, or does someone know another way of merging PDF files using prawn (or other library)?\n. I tested this a bit more. I used very simple code to make this reproducable:\n\n``` ruby\nrequire 'rubygems'\nrequire 'prawn'\npdf = Prawn::Document.new(:page_size => 'A4', :skip_page_creation => true) do\n  start_new_page(:template => \"/Users/miccet/Desktop/untitled.pdf\", :template_page => 1)\n  start_new_page(:template => \"/Users/miccet/Desktop/untitled.pdf\", :template_page => 2)\n  start_new_page(:template => \"/Users/miccet/Desktop/untitled.pdf\", :template_page => 2)  \n\n  start_new_page(:template => \"/Users/miccet/Desktop/158.pdf\")\nend\npdf.render_file(\"export.pdf\")\n```\n\nIf you use just one template and iterate over the pages of it, it works. Using a single template starting on template_page 2 and it breaks. If you use the same template_page multiple times, it breaks. If you use a second template file, it breaks at the point of insertion. Please let me know if I can help solving this issue somehow. I have looked at the code, but I don't really have the skills to see what could go wrong.\n. Yes, Mac Preview works fine. I haven't tried with any other Readers, just Adobe Acrobat on Mac and Adobe Reader on Windows where it fails. I tried to look through the code and will try to set up some debugging tomorrow but it's hard to know where to start as I only have limited knowledge of the internals.\n. This worked for me as well, huge thanks to Chase and Jon on this one!\n. Same issue here. I'm using this function to merge files created earlier into one file, so all the files I have are generated by prawn. I tried with Mac generated ones as well, same issue. Tried most settings I could find for page size and layout etc and no change. Would be a nice fix, or does someone know another way of merging PDF files using prawn (or other library)?\n. I tested this a bit more. I used very simple code to make this reproducable:\n\n``` ruby\nrequire 'rubygems'\nrequire 'prawn'\npdf = Prawn::Document.new(:page_size => 'A4', :skip_page_creation => true) do\n  start_new_page(:template => \"/Users/miccet/Desktop/untitled.pdf\", :template_page => 1)\n  start_new_page(:template => \"/Users/miccet/Desktop/untitled.pdf\", :template_page => 2)\n  start_new_page(:template => \"/Users/miccet/Desktop/untitled.pdf\", :template_page => 2)  \n\n  start_new_page(:template => \"/Users/miccet/Desktop/158.pdf\")\nend\npdf.render_file(\"export.pdf\")\n```\n\nIf you use just one template and iterate over the pages of it, it works. Using a single template starting on template_page 2 and it breaks. If you use the same template_page multiple times, it breaks. If you use a second template file, it breaks at the point of insertion. Please let me know if I can help solving this issue somehow. I have looked at the code, but I don't really have the skills to see what could go wrong.\n. Yes, Mac Preview works fine. I haven't tried with any other Readers, just Adobe Acrobat on Mac and Adobe Reader on Windows where it fails. I tried to look through the code and will try to set up some debugging tomorrow but it's hard to know where to start as I only have limited knowledge of the internals.\n. This worked for me as well, huge thanks to Chase and Jon on this one!\n. ",
    "boazsegev": "I have ran into the same issue making a simple enough (although very expensive) file merge.\n\nI add the code here for two resons: 1. To express the need for a solution to this issue; 2. since a Prawn::Document.merge function will be easier then ever once this issue is resolved.\n\n``` ruby\ndef merge_files(file_array, output_file_name)\n    merged_pdf = Prawn::Document.new(:margin => 0, :size => \"A4\", :skip_page_creation => true)\n\n    file_array.sort.each do |file_name|\n        tmp_pdf = Prawn::Document.new(:margin => 0, :template => file_name) #this is the expensive part yet to be resolved\n        tmp_pdf.page_count.times {|i| merged_pdf.start_new_page(:margin => 0, :size => \"A4\", :template => file_name, :template_page => i+1) }\n    end\n\n    merged_pdf.render_file output_file_name\nend\n```\n\nI await an amazing solution - something the Prawn-team has been well known for :-)\n. Test case, involving one document created by printing to PDF on a mac and the following code:\npdf = Prawn::Document.generate( output_filename, :template => template_filename) do\n   encrypt_document owner_password: :random\nend\n\nproduces the following full trace (the admin_controller and bates2 are mine):\n\nruby-rc4 (0.1.5) lib/rc4.rb:33:in `process'\nruby-rc4 (0.1.5) lib/rc4.rb:25:in`encrypt'\n/Users/2Be/.bundler/ruby/1.9.1/prawn-e3dff4c3946c/lib/prawn/security.rb:119:in `encrypt_string'\n/Users/2Be/.bundler/ruby/1.9.1/prawn-e3dff4c3946c/lib/prawn/security.rb:259:in`encrypted_object'\n/Users/2Be/.bundler/ruby/1.9.1/prawn-e3dff4c3946c/lib/prawn/core/document_state.rb:72:in `block in render_body'\n/Users/2Be/.bundler/ruby/1.9.1/prawn-e3dff4c3946c/lib/prawn/core/object_store.rb:74:in`block in each'\n/Users/2Be/.bundler/ruby/1.9.1/prawn-e3dff4c3946c/lib/prawn/core/object_store.rb:73:in `each'\n/Users/2Be/.bundler/ruby/1.9.1/prawn-e3dff4c3946c/lib/prawn/core/object_store.rb:73:in`each'\n/Users/2Be/.bundler/ruby/1.9.1/prawn-e3dff4c3946c/lib/prawn/core/document_state.rb:70:in `render_body'\n/Users/2Be/.bundler/ruby/1.9.1/prawn-e3dff4c3946c/lib/prawn/document/internals.rb:140:in`render_body'\n/Users/2Be/.bundler/ruby/1.9.1/prawn-e3dff4c3946c/lib/prawn/document.rb:364:in `render'\n/Users/2Be/.bundler/ruby/1.9.1/prawn-e3dff4c3946c/lib/prawn/document.rb:378:in`block in render_file'\n/Users/2Be/.bundler/ruby/1.9.1/prawn-e3dff4c3946c/lib/prawn/document.rb:378:in `open'\n/Users/2Be/.bundler/ruby/1.9.1/prawn-e3dff4c3946c/lib/prawn/document.rb:378:in`render_file'\n/Users/2Be/.bundler/ruby/1.9.1/prawn-e3dff4c3946c/lib/prawn/document.rb:123:in `generate'\napp/controllers/admin_controller.rb:125:in`block in bates2'\napp/controllers/admin_controller.rb:98:in `each'\napp/controllers/admin_controller.rb:98:in`bates2'\nactionpack (3.2.8) lib/action_controller/metal/implicit_render.rb:4:in `send_action'\nactionpack (3.2.8) lib/abstract_controller/base.rb:167:in`process_action'\nactionpack (3.2.8) lib/action_controller/metal/rendering.rb:10:in `process_action'\nactionpack (3.2.8) lib/abstract_controller/callbacks.rb:18:in`block in process_action'\nactivesupport (3.2.8) lib/active_support/callbacks.rb:425:in `_run__3080244728061297980__process_action__1161416000968519802__callbacks'\nactivesupport (3.2.8) lib/active_support/callbacks.rb:405:in`__run_callback'\nactivesupport (3.2.8) lib/active_support/callbacks.rb:385:in `_run_process_action_callbacks'\nactivesupport (3.2.8) lib/active_support/callbacks.rb:81:in`run_callbacks'\nactionpack (3.2.8) lib/abstract_controller/callbacks.rb:17:in `process_action'\nactionpack (3.2.8) lib/action_controller/metal/rescue.rb:29:in`process_action'\nactionpack (3.2.8) lib/action_controller/metal/instrumentation.rb:30:in `block in process_action'\nactivesupport (3.2.8) lib/active_support/notifications.rb:123:in`block in instrument'\nactivesupport (3.2.8) lib/active_support/notifications/instrumenter.rb:20:in `instrument'\nactivesupport (3.2.8) lib/active_support/notifications.rb:123:in`instrument'\nactionpack (3.2.8) lib/action_controller/metal/instrumentation.rb:29:in `process_action'\nactionpack (3.2.8) lib/action_controller/metal/params_wrapper.rb:207:in`process_action'\nactiverecord (3.2.8) lib/active_record/railties/controller_runtime.rb:18:in `process_action'\nactionpack (3.2.8) lib/abstract_controller/base.rb:121:in`process'\nactionpack (3.2.8) lib/abstract_controller/rendering.rb:45:in `process'\nactionpack (3.2.8) lib/action_controller/metal.rb:203:in`dispatch'\nactionpack (3.2.8) lib/action_controller/metal/rack_delegation.rb:14:in `dispatch'\nactionpack (3.2.8) lib/action_controller/metal.rb:246:in`block in action'\nactionpack (3.2.8) lib/action_dispatch/routing/route_set.rb:73:in `call'\nactionpack (3.2.8) lib/action_dispatch/routing/route_set.rb:73:in`dispatch'\nactionpack (3.2.8) lib/action_dispatch/routing/route_set.rb:36:in `call'\njourney (1.0.4) lib/journey/router.rb:68:in`block in call'\njourney (1.0.4) lib/journey/router.rb:56:in `each'\njourney (1.0.4) lib/journey/router.rb:56:in`call'\nactionpack (3.2.8) lib/action_dispatch/routing/route_set.rb:600:in `call'\nactionpack (3.2.8) lib/action_dispatch/middleware/best_standards_support.rb:17:in`call'\nrack (1.4.5) lib/rack/etag.rb:23:in `call'\nrack (1.4.5) lib/rack/conditionalget.rb:35:in`call'\nactionpack (3.2.8) lib/action_dispatch/middleware/head.rb:14:in `call'\nactionpack (3.2.8) lib/action_dispatch/middleware/params_parser.rb:21:in`call'\nactionpack (3.2.8) lib/action_dispatch/middleware/flash.rb:242:in `call'\nrack (1.4.5) lib/rack/session/abstract/id.rb:210:in`context'\nrack (1.4.5) lib/rack/session/abstract/id.rb:205:in `call'\nactionpack (3.2.8) lib/action_dispatch/middleware/cookies.rb:339:in`call'\nactiverecord (3.2.8) lib/active_record/query_cache.rb:64:in `call'\nactiverecord (3.2.8) lib/active_record/connection_adapters/abstract/connection_pool.rb:473:in`call'\nactionpack (3.2.8) lib/action_dispatch/middleware/callbacks.rb:28:in `block in call'\nactivesupport (3.2.8) lib/active_support/callbacks.rb:405:in`_run__3242402907004000509__call__2737612079788134271__callbacks'\nactivesupport (3.2.8) lib/active_support/callbacks.rb:405:in `__run_callback'\nactivesupport (3.2.8) lib/active_support/callbacks.rb:385:in`_run_call_callbacks'\nactivesupport (3.2.8) lib/active_support/callbacks.rb:81:in `run_callbacks'\nactionpack (3.2.8) lib/action_dispatch/middleware/callbacks.rb:27:in`call'\nactionpack (3.2.8) lib/action_dispatch/middleware/reloader.rb:65:in `call'\nactionpack (3.2.8) lib/action_dispatch/middleware/remote_ip.rb:31:in`call'\nactionpack (3.2.8) lib/action_dispatch/middleware/debug_exceptions.rb:16:in `call'\nactionpack (3.2.8) lib/action_dispatch/middleware/show_exceptions.rb:56:in`call'\nrailties (3.2.8) lib/rails/rack/logger.rb:26:in `call_app'\nrailties (3.2.8) lib/rails/rack/logger.rb:16:in`call'\nactionpack (3.2.8) lib/action_dispatch/middleware/request_id.rb:22:in `call'\nrack (1.4.5) lib/rack/methodoverride.rb:21:in`call'\nrack (1.4.5) lib/rack/runtime.rb:17:in `call'\nactivesupport (3.2.8) lib/active_support/cache/strategy/local_cache.rb:72:in`call'\nrack (1.4.5) lib/rack/lock.rb:15:in `call'\nactionpack (3.2.8) lib/action_dispatch/middleware/static.rb:62:in`call'\nrailties (3.2.8) lib/rails/engine.rb:479:in `call'\nrailties (3.2.8) lib/rails/application.rb:223:in`call'\nrack (1.4.5) lib/rack/content_length.rb:14:in `call'\nrailties (3.2.8) lib/rails/rack/log_tailer.rb:17:in`call'\nrack (1.4.5) lib/rack/handler/webrick.rb:59:in `service'\n/usr/local/rvm/rubies/ruby-1.9.3-p194/lib/ruby/1.9.1/webrick/httpserver.rb:138:in`service'\n/usr/local/rvm/rubies/ruby-1.9.3-p194/lib/ruby/1.9.1/webrick/httpserver.rb:94:in `run'\n/usr/local/rvm/rubies/ruby-1.9.3-p194/lib/ruby/1.9.1/webrick/server.rb:191:in`block in start_thread'\n. I believe the `:shrink_to_fit` performs a text metrics adjustment that you can do yourself (either before, or after, printing out the text).\n\nSince width is the usual issue, rather then height, let me outline a short solution that might work for you.\n\n``` ruby\nprawn_pdf = Prawn::Document.new #this will contain the PDF object\ntext_box_sizes = [] # this will contain the width and height to be passed to each text box object\ntext_box_positions = [] # this will contain the position for each text box\ntext_array = [] # this will contain the text to be printed out\nsize = 100 # this is the initial size of the font, which will be updated soon\n\n#we will have one for testing\ntext_array << \"Hello\" # the text\ntext_box_sizes << [50,10] # the size [length,height] array\ntext_box_positions << [10,10] #the position for placement\n\n#compute maximum font size for all text boxes\ntext_array.each_index do | i |\n    actual_width = prawn_pdf.width_of text, size: size, margin: 0, left_margin: 0, right_margin: 0\n    wanted_width = text_box_sizes[i][0]\n    #if the size is too big\n    if actual_width > wanted_width\n        # recompute the size so that it will be an exact match\n        # use Float for exact match, or normal Fixnum for rounding it down\n        # I would go with Fixnum, but you can do:\n        # wanted_width = wanted_width.to_f\n        size = size * wanted_width / actual_width\n    end\nend\n\n# and we know the size :)\n\n# since we know the size, me might as well increase performance\n# and avoid the :size_to_fit (which will do the same action again)...\n# so:\n# print text boxes with correct font size\ntext_array.each_index do |i|\n    prawn_pdf.text_box text_array[i], :at => text_box_positions[i], :width => text_box_positions[i][0], :height => text_box_positions[i][1], :align => :center, :valign => :center\nend\n```\n\n**I didn't test the code**, but it looks solid. you might have to tweak it if I made some mistakes.\n\ngood luck.\n. I have ran into the same issue making a simple enough (although very expensive) file merge.\n\nI add the code here for two resons: 1. To express the need for a solution to this issue; 2. since a Prawn::Document.merge function will be easier then ever once this issue is resolved.\n\n``` ruby\ndef merge_files(file_array, output_file_name)\n    merged_pdf = Prawn::Document.new(:margin => 0, :size => \"A4\", :skip_page_creation => true)\n\n    file_array.sort.each do |file_name|\n        tmp_pdf = Prawn::Document.new(:margin => 0, :template => file_name) #this is the expensive part yet to be resolved\n        tmp_pdf.page_count.times {|i| merged_pdf.start_new_page(:margin => 0, :size => \"A4\", :template => file_name, :template_page => i+1) }\n    end\n\n    merged_pdf.render_file output_file_name\nend\n```\n\nI await an amazing solution - something the Prawn-team has been well known for :-)\n. Test case, involving one document created by printing to PDF on a mac and the following code:\npdf = Prawn::Document.generate( output_filename, :template => template_filename) do\n   encrypt_document owner_password: :random\nend\n\nproduces the following full trace (the admin_controller and bates2 are mine):\n\nruby-rc4 (0.1.5) lib/rc4.rb:33:in `process'\nruby-rc4 (0.1.5) lib/rc4.rb:25:in`encrypt'\n/Users/2Be/.bundler/ruby/1.9.1/prawn-e3dff4c3946c/lib/prawn/security.rb:119:in `encrypt_string'\n/Users/2Be/.bundler/ruby/1.9.1/prawn-e3dff4c3946c/lib/prawn/security.rb:259:in`encrypted_object'\n/Users/2Be/.bundler/ruby/1.9.1/prawn-e3dff4c3946c/lib/prawn/core/document_state.rb:72:in `block in render_body'\n/Users/2Be/.bundler/ruby/1.9.1/prawn-e3dff4c3946c/lib/prawn/core/object_store.rb:74:in`block in each'\n/Users/2Be/.bundler/ruby/1.9.1/prawn-e3dff4c3946c/lib/prawn/core/object_store.rb:73:in `each'\n/Users/2Be/.bundler/ruby/1.9.1/prawn-e3dff4c3946c/lib/prawn/core/object_store.rb:73:in`each'\n/Users/2Be/.bundler/ruby/1.9.1/prawn-e3dff4c3946c/lib/prawn/core/document_state.rb:70:in `render_body'\n/Users/2Be/.bundler/ruby/1.9.1/prawn-e3dff4c3946c/lib/prawn/document/internals.rb:140:in`render_body'\n/Users/2Be/.bundler/ruby/1.9.1/prawn-e3dff4c3946c/lib/prawn/document.rb:364:in `render'\n/Users/2Be/.bundler/ruby/1.9.1/prawn-e3dff4c3946c/lib/prawn/document.rb:378:in`block in render_file'\n/Users/2Be/.bundler/ruby/1.9.1/prawn-e3dff4c3946c/lib/prawn/document.rb:378:in `open'\n/Users/2Be/.bundler/ruby/1.9.1/prawn-e3dff4c3946c/lib/prawn/document.rb:378:in`render_file'\n/Users/2Be/.bundler/ruby/1.9.1/prawn-e3dff4c3946c/lib/prawn/document.rb:123:in `generate'\napp/controllers/admin_controller.rb:125:in`block in bates2'\napp/controllers/admin_controller.rb:98:in `each'\napp/controllers/admin_controller.rb:98:in`bates2'\nactionpack (3.2.8) lib/action_controller/metal/implicit_render.rb:4:in `send_action'\nactionpack (3.2.8) lib/abstract_controller/base.rb:167:in`process_action'\nactionpack (3.2.8) lib/action_controller/metal/rendering.rb:10:in `process_action'\nactionpack (3.2.8) lib/abstract_controller/callbacks.rb:18:in`block in process_action'\nactivesupport (3.2.8) lib/active_support/callbacks.rb:425:in `_run__3080244728061297980__process_action__1161416000968519802__callbacks'\nactivesupport (3.2.8) lib/active_support/callbacks.rb:405:in`__run_callback'\nactivesupport (3.2.8) lib/active_support/callbacks.rb:385:in `_run_process_action_callbacks'\nactivesupport (3.2.8) lib/active_support/callbacks.rb:81:in`run_callbacks'\nactionpack (3.2.8) lib/abstract_controller/callbacks.rb:17:in `process_action'\nactionpack (3.2.8) lib/action_controller/metal/rescue.rb:29:in`process_action'\nactionpack (3.2.8) lib/action_controller/metal/instrumentation.rb:30:in `block in process_action'\nactivesupport (3.2.8) lib/active_support/notifications.rb:123:in`block in instrument'\nactivesupport (3.2.8) lib/active_support/notifications/instrumenter.rb:20:in `instrument'\nactivesupport (3.2.8) lib/active_support/notifications.rb:123:in`instrument'\nactionpack (3.2.8) lib/action_controller/metal/instrumentation.rb:29:in `process_action'\nactionpack (3.2.8) lib/action_controller/metal/params_wrapper.rb:207:in`process_action'\nactiverecord (3.2.8) lib/active_record/railties/controller_runtime.rb:18:in `process_action'\nactionpack (3.2.8) lib/abstract_controller/base.rb:121:in`process'\nactionpack (3.2.8) lib/abstract_controller/rendering.rb:45:in `process'\nactionpack (3.2.8) lib/action_controller/metal.rb:203:in`dispatch'\nactionpack (3.2.8) lib/action_controller/metal/rack_delegation.rb:14:in `dispatch'\nactionpack (3.2.8) lib/action_controller/metal.rb:246:in`block in action'\nactionpack (3.2.8) lib/action_dispatch/routing/route_set.rb:73:in `call'\nactionpack (3.2.8) lib/action_dispatch/routing/route_set.rb:73:in`dispatch'\nactionpack (3.2.8) lib/action_dispatch/routing/route_set.rb:36:in `call'\njourney (1.0.4) lib/journey/router.rb:68:in`block in call'\njourney (1.0.4) lib/journey/router.rb:56:in `each'\njourney (1.0.4) lib/journey/router.rb:56:in`call'\nactionpack (3.2.8) lib/action_dispatch/routing/route_set.rb:600:in `call'\nactionpack (3.2.8) lib/action_dispatch/middleware/best_standards_support.rb:17:in`call'\nrack (1.4.5) lib/rack/etag.rb:23:in `call'\nrack (1.4.5) lib/rack/conditionalget.rb:35:in`call'\nactionpack (3.2.8) lib/action_dispatch/middleware/head.rb:14:in `call'\nactionpack (3.2.8) lib/action_dispatch/middleware/params_parser.rb:21:in`call'\nactionpack (3.2.8) lib/action_dispatch/middleware/flash.rb:242:in `call'\nrack (1.4.5) lib/rack/session/abstract/id.rb:210:in`context'\nrack (1.4.5) lib/rack/session/abstract/id.rb:205:in `call'\nactionpack (3.2.8) lib/action_dispatch/middleware/cookies.rb:339:in`call'\nactiverecord (3.2.8) lib/active_record/query_cache.rb:64:in `call'\nactiverecord (3.2.8) lib/active_record/connection_adapters/abstract/connection_pool.rb:473:in`call'\nactionpack (3.2.8) lib/action_dispatch/middleware/callbacks.rb:28:in `block in call'\nactivesupport (3.2.8) lib/active_support/callbacks.rb:405:in`_run__3242402907004000509__call__2737612079788134271__callbacks'\nactivesupport (3.2.8) lib/active_support/callbacks.rb:405:in `__run_callback'\nactivesupport (3.2.8) lib/active_support/callbacks.rb:385:in`_run_call_callbacks'\nactivesupport (3.2.8) lib/active_support/callbacks.rb:81:in `run_callbacks'\nactionpack (3.2.8) lib/action_dispatch/middleware/callbacks.rb:27:in`call'\nactionpack (3.2.8) lib/action_dispatch/middleware/reloader.rb:65:in `call'\nactionpack (3.2.8) lib/action_dispatch/middleware/remote_ip.rb:31:in`call'\nactionpack (3.2.8) lib/action_dispatch/middleware/debug_exceptions.rb:16:in `call'\nactionpack (3.2.8) lib/action_dispatch/middleware/show_exceptions.rb:56:in`call'\nrailties (3.2.8) lib/rails/rack/logger.rb:26:in `call_app'\nrailties (3.2.8) lib/rails/rack/logger.rb:16:in`call'\nactionpack (3.2.8) lib/action_dispatch/middleware/request_id.rb:22:in `call'\nrack (1.4.5) lib/rack/methodoverride.rb:21:in`call'\nrack (1.4.5) lib/rack/runtime.rb:17:in `call'\nactivesupport (3.2.8) lib/active_support/cache/strategy/local_cache.rb:72:in`call'\nrack (1.4.5) lib/rack/lock.rb:15:in `call'\nactionpack (3.2.8) lib/action_dispatch/middleware/static.rb:62:in`call'\nrailties (3.2.8) lib/rails/engine.rb:479:in `call'\nrailties (3.2.8) lib/rails/application.rb:223:in`call'\nrack (1.4.5) lib/rack/content_length.rb:14:in `call'\nrailties (3.2.8) lib/rails/rack/log_tailer.rb:17:in`call'\nrack (1.4.5) lib/rack/handler/webrick.rb:59:in `service'\n/usr/local/rvm/rubies/ruby-1.9.3-p194/lib/ruby/1.9.1/webrick/httpserver.rb:138:in`service'\n/usr/local/rvm/rubies/ruby-1.9.3-p194/lib/ruby/1.9.1/webrick/httpserver.rb:94:in `run'\n/usr/local/rvm/rubies/ruby-1.9.3-p194/lib/ruby/1.9.1/webrick/server.rb:191:in`block in start_thread'\n. I believe the `:shrink_to_fit` performs a text metrics adjustment that you can do yourself (either before, or after, printing out the text).\n\nSince width is the usual issue, rather then height, let me outline a short solution that might work for you.\n\n``` ruby\nprawn_pdf = Prawn::Document.new #this will contain the PDF object\ntext_box_sizes = [] # this will contain the width and height to be passed to each text box object\ntext_box_positions = [] # this will contain the position for each text box\ntext_array = [] # this will contain the text to be printed out\nsize = 100 # this is the initial size of the font, which will be updated soon\n\n#we will have one for testing\ntext_array << \"Hello\" # the text\ntext_box_sizes << [50,10] # the size [length,height] array\ntext_box_positions << [10,10] #the position for placement\n\n#compute maximum font size for all text boxes\ntext_array.each_index do | i |\n    actual_width = prawn_pdf.width_of text, size: size, margin: 0, left_margin: 0, right_margin: 0\n    wanted_width = text_box_sizes[i][0]\n    #if the size is too big\n    if actual_width > wanted_width\n        # recompute the size so that it will be an exact match\n        # use Float for exact match, or normal Fixnum for rounding it down\n        # I would go with Fixnum, but you can do:\n        # wanted_width = wanted_width.to_f\n        size = size * wanted_width / actual_width\n    end\nend\n\n# and we know the size :)\n\n# since we know the size, me might as well increase performance\n# and avoid the :size_to_fit (which will do the same action again)...\n# so:\n# print text boxes with correct font size\ntext_array.each_index do |i|\n    prawn_pdf.text_box text_array[i], :at => text_box_positions[i], :width => text_box_positions[i][0], :height => text_box_positions[i][1], :align => :center, :valign => :center\nend\n```\n\n**I didn't test the code**, but it looks solid. you might have to tweak it if I made some mistakes.\n\ngood luck.\n. ",
    "futura": "For me, both Preview and Acrobat on Mac are displaying blank pages when I use start_new_page with a template option.\n\nI can create a new document with a template, but I can't add pages. This ...\n\n``` ruby\nfilename = \"/Users/me/Sites/mysite/public/documents/floor_plans/kinston.pdf\"\npdf = Prawn::Document.new(:template => filename, :skip_page_creation => true) do\n  start_new_page(:template => filename)\nend\n```\n\n... gets me a correct first page (using the external PDF), but the second page is blank.\n\nThis ...\n\n``` ruby\nfilename = \"/Users/me/Sites/mysite/public/documents/floor_plans/kinston.pdf\"\npdf = Prawn::Document.new(:skip_page_creation => true) do\n  start_new_page(:template => filename)\n  start_new_page(:template => filename)\nend\n```\n\n... gets me two blank pages. The merged_files method by boazsegev above results in the same behavior, as does mikaelprag's example -- always blank pages for start_new_page(:template => anything).\n\nThanks.\n. Update: I was using version 0.10.x. With 0.11, the code by boazsegev works for me.\n. Agreed. This would be very useful.\n. For me, both Preview and Acrobat on Mac are displaying blank pages when I use start_new_page with a template option.\n\nI can create a new document with a template, but I can't add pages. This ...\n\n``` ruby\nfilename = \"/Users/me/Sites/mysite/public/documents/floor_plans/kinston.pdf\"\npdf = Prawn::Document.new(:template => filename, :skip_page_creation => true) do\n  start_new_page(:template => filename)\nend\n```\n\n... gets me a correct first page (using the external PDF), but the second page is blank.\n\nThis ...\n\n``` ruby\nfilename = \"/Users/me/Sites/mysite/public/documents/floor_plans/kinston.pdf\"\npdf = Prawn::Document.new(:skip_page_creation => true) do\n  start_new_page(:template => filename)\n  start_new_page(:template => filename)\nend\n```\n\n... gets me two blank pages. The merged_files method by boazsegev above results in the same behavior, as does mikaelprag's example -- always blank pages for start_new_page(:template => anything).\n\nThanks.\n. Update: I was using version 0.10.x. With 0.11, the code by boazsegev works for me.\n. Agreed. This would be very useful.\n. ",
    "chasemgray": "I also run into the same problem when using multiple templates with the latest version from github and the latest gem version (0.11.1pre).  I have several pdf templates and different combinations need to be combined depending on the user's input.  \n\nDoes anybody have any way around this problem?\n\nThanks.\n. After a full night of comparing the differences in my generated PDFs with and without page templates I found one problem.  For PDFs with page templates, the parent of the 'dictionary' object does not get set properly.  Every page after the first has a parent that doesn't have any other children so it creates some sort of recursive problem.  \n\nI don't know much about PDF generation.  From what I can see, somewhere during the object creation for pages with templates, the parent does not get set properly.  I don't know if this thinking is correct, but I assume that all my pages after the first page should have the same parent dictionary as my first page.  So, I manually set this option before inserting any page after the first page and it solved the problem.  Hopefully someone with a better understanding of PDFs and the Prawn codebase can solve this problem more elegantly.\n\nSo, for anybody else having this problem and needs it solved right now, inside of document.rb in the Prawn code, I changed the following:\nInside the 'start_new_page' method I changed the code where the page is inserted to this:\n\n```\n  unless options[:orphan]\n    state.page.dictionary.data[:Parent] = last_page.dictionary.data[:Parent]\n    state.insert_page(state.page, @page_number)\n    @page_number += 1\n\n    canvas { image(@background, :at => bounds.top_left) } if @background\n    @y = @bounding_box.absolute_top\n\n    float do\n      state.on_page_create_action(self)\n    end\n  end\n```\n. I also run into the same problem when using multiple templates with the latest version from github and the latest gem version (0.11.1pre).  I have several pdf templates and different combinations need to be combined depending on the user's input.  \n\nDoes anybody have any way around this problem?\n\nThanks.\n. After a full night of comparing the differences in my generated PDFs with and without page templates I found one problem.  For PDFs with page templates, the parent of the 'dictionary' object does not get set properly.  Every page after the first has a parent that doesn't have any other children so it creates some sort of recursive problem.  \n\nI don't know much about PDF generation.  From what I can see, somewhere during the object creation for pages with templates, the parent does not get set properly.  I don't know if this thinking is correct, but I assume that all my pages after the first page should have the same parent dictionary as my first page.  So, I manually set this option before inserting any page after the first page and it solved the problem.  Hopefully someone with a better understanding of PDFs and the Prawn codebase can solve this problem more elegantly.\n\nSo, for anybody else having this problem and needs it solved right now, inside of document.rb in the Prawn code, I changed the following:\nInside the 'start_new_page' method I changed the code where the page is inserted to this:\n\n```\n  unless options[:orphan]\n    state.page.dictionary.data[:Parent] = last_page.dictionary.data[:Parent]\n    state.insert_page(state.page, @page_number)\n    @page_number += 1\n\n    canvas { image(@background, :at => bounds.top_left) } if @background\n    @y = @bounding_box.absolute_top\n\n    float do\n      state.on_page_create_action(self)\n    end\n  end\n```\n. ",
    "jkriss": "I'm not certain my assumptions are correct, but this seems to fix the bug: https://github.com/jkriss/prawn/commit/e1af47fd834fdb16d0d9183c9ab0b97d86440b71\n\nMy assumptions may be wrong, though \u2013\u00a0it may break something else. Tests are still passing, at least.\n. Fantastic. I figured I was being a bit heavy handed in my fix. Thanks for getting this straightened out so quickly.\n. I'm not certain my assumptions are correct, but this seems to fix the bug: https://github.com/jkriss/prawn/commit/e1af47fd834fdb16d0d9183c9ab0b97d86440b71\n\nMy assumptions may be wrong, though \u2013\u00a0it may break something else. Tests are still passing, at least.\n. Fantastic. I figured I was being a bit heavy handed in my fix. Thanks for getting this straightened out so quickly.\n. ",
    "cbillen": "The problem still remains if you use repeat(:all, :dynamic => true) as of ca022b699e3c46a9dce9\n\nI do not use fill color in my repeater's code.\n. The problem still remains if you use repeat(:all, :dynamic => true) as of ca022b699e3c46a9dce9\n\nI do not use fill color in my repeater's code.\n. ",
    "mat813": "Hum, I upgraded prawn today, and I do have stamps doing graphic things (logos), and they do need to change the colors otherwise I don't really see what stamps are for.\n. Well, hum, I think that :\n\n```\ndef current_fill_color=(color)\n  return if state.page.in_stamp_stream?\n  graphic_state.fill_color = color\nend\n```\n\nSays that I can't change the color while in a stamp, no ? And anyway, my stamps are all black and white and :\n\n```\nadd_comment(\"  inside\")\nfill_color(100, 100, 20, 0)\nmove_to(75.518, 23.388)\n```\n\ngets translated into :\n\n```\n%  inside\n/DeviceRGB cs\n0.000 0.000 0.000 scn\n120.518 73.388 m\n```\n\nwhich is just plain wrong, I mean, the color and the colorspace are wrong :-)\n. Just mashed up a small example :\n\n```\nrequire 'prawn'\n\npdf = Prawn::Document.new(:margin => [40, 45, 50, 45]) do\n  create_stamp(\"logo\") do\n    fill_color(100, 100, 20, 0)\n    move_to(75.518, 23.388)\n  end\n  stamp_at('logo', [-18, 692])\nend\n\nputs pdf.render\n```\n\nrenders :\n\n```\n...\n[ ] 0 d\n/DeviceRGB cs\n0.000 0.000 0.000 scn\n120.518 73.388 m\nQ\n...\n```\n\nFeels wrong to me, no ?\n. That repaired the stamps in my pdf's :-)\nThough, it seems a bit of a cludge, maybe as you say, a enclosing the stamp in a q/Q would be a good thing.\n. Thanks a lot :-)\n. Well, I can't do that in my code, I create one table per line so that I can go over each line and decide if I need to create a new page (the rules are a bit complicated) and if I'm at the last line, I already do a `this_page.last.cells.each {|c| c.borders << :bottom}` so that I get a border, but I also need to add some more padding, otherwise, the border is too close to the text.\n\nAnyway, I think that the table should recompute it's cells size and position when the cells are modified. (I mean, there's no point of having a make_table to get a table to go and use later if you can't change it ;-) )\n. I'll try to rethink my code a bit in the mean time.\n\nBut, hum, the problem comes because after updating from a157686d (I think, if it's not that one, it's one from something like may last year) to the latest code, the bottom borders are a point or two higher to the included text which make it too close for my taste.\n. Ah, yes, it fixes the problem I was trying to correct, thanks a lot :-)\n. I ran into the same issue on my dev box, where the locale is fr_FR.ISO8859-15, running rake manual with fr_FR.UTF-8 fixed the problem. (Though, there's no reason for the manual to behave differently depending on the locale.)\n. Hum, I upgraded prawn today, and I do have stamps doing graphic things (logos), and they do need to change the colors otherwise I don't really see what stamps are for.\n. Well, hum, I think that :\n\n```\ndef current_fill_color=(color)\n  return if state.page.in_stamp_stream?\n  graphic_state.fill_color = color\nend\n```\n\nSays that I can't change the color while in a stamp, no ? And anyway, my stamps are all black and white and :\n\n```\nadd_comment(\"  inside\")\nfill_color(100, 100, 20, 0)\nmove_to(75.518, 23.388)\n```\n\ngets translated into :\n\n```\n%  inside\n/DeviceRGB cs\n0.000 0.000 0.000 scn\n120.518 73.388 m\n```\n\nwhich is just plain wrong, I mean, the color and the colorspace are wrong :-)\n. Just mashed up a small example :\n\n```\nrequire 'prawn'\n\npdf = Prawn::Document.new(:margin => [40, 45, 50, 45]) do\n  create_stamp(\"logo\") do\n    fill_color(100, 100, 20, 0)\n    move_to(75.518, 23.388)\n  end\n  stamp_at('logo', [-18, 692])\nend\n\nputs pdf.render\n```\n\nrenders :\n\n```\n...\n[ ] 0 d\n/DeviceRGB cs\n0.000 0.000 0.000 scn\n120.518 73.388 m\nQ\n...\n```\n\nFeels wrong to me, no ?\n. That repaired the stamps in my pdf's :-)\nThough, it seems a bit of a cludge, maybe as you say, a enclosing the stamp in a q/Q would be a good thing.\n. Thanks a lot :-)\n. Well, I can't do that in my code, I create one table per line so that I can go over each line and decide if I need to create a new page (the rules are a bit complicated) and if I'm at the last line, I already do a `this_page.last.cells.each {|c| c.borders << :bottom}` so that I get a border, but I also need to add some more padding, otherwise, the border is too close to the text.\n\nAnyway, I think that the table should recompute it's cells size and position when the cells are modified. (I mean, there's no point of having a make_table to get a table to go and use later if you can't change it ;-) )\n. I'll try to rethink my code a bit in the mean time.\n\nBut, hum, the problem comes because after updating from a157686d (I think, if it's not that one, it's one from something like may last year) to the latest code, the bottom borders are a point or two higher to the included text which make it too close for my taste.\n. Ah, yes, it fixes the problem I was trying to correct, thanks a lot :-)\n. I ran into the same issue on my dev box, where the locale is fr_FR.ISO8859-15, running rake manual with fr_FR.UTF-8 fixed the problem. (Though, there's no reason for the manual to behave differently depending on the locale.)\n. ",
    "astjohn": "@jonsgreen,\n\nThanks for your work on this.  My colored stamps were also repaired.\n. I messed up this pull request.  Should have branched it.  I will correct and resubmit.\n. I agree with you that page is the oddball.\n\nLooking back at the original code, I think my confusion arose from the help\nfor these two methods.  Both methods state that the first argument should be\na hash, and not the string for 'title.'\n\nI was passing the hash and it wasn't working so I changed it to such.\n\nMaybe we can stick with a string as the first argument and change the page\nmethod instead?\n\nOn Sun, Mar 13, 2011 at 11:03 PM, jonsgreen <\nreply@reply.github.com>wrote:\n\n> I am not sure I totally agree. Outline#section has the title as a required\n> first argument so really #page is the oddball right now. We had some debate\n> around the argument signature for #section and #page so I don't really want\n> to go there again.\n> \n> However, if others really feel that the API should be changed for these\n> subsection methods I am willing to merge this in though it means that\n> current Outlines using this feature will need to have their code changed. We\n> would also need to update the Manual.\n> \n> https://github.com/sandal/prawn/pull/216#issuecomment-867625\n. @tazsingh, glad to see I'm not the only one with the issue - there isn't much else out there that I could find. I closed it because I wasn't completely sure if this was a Prawn issue or not. I also narrowed it down to our choice of font. Although, the font was completely capable of handling diacritic marks in other situations like within word processing software. Perhaps it's a deadly combination of font, prawn, and jruby?  I'm not sure.\n\n`transliterate` is a nifty, temporary solution. I chose to fall back to the system font for now.\n\nI'll re-open this to get more attention. Hopefully, someone else can weigh in.\n. @sandal Thanks for helping out with this one. I can say that everything has been pretty solid on JRuby for a whiel now. \n\nOpen sans was another one that killed it. Apparently google has this font too. I tried a few different fonts before I had to abandon them all and rely on the system font. \n\nhttp://www.google.com/fonts/specimen/Open+Sans\n. @sandal, Yeah, I'm not sure why I didn't come back here and post about the jruby updates, in which they solved a pile of encoding issues. I had some other weird encoding issues with TorqueBox and making the switch solved them too. Great to hear about JRuby support. Cheers!\n. +1 for MIT\nOn Jan 3, 2014 6:26 PM, \"Alexander Mankuta\" notifications@github.com\nwrote:\n\n> Prawn followed Ruby licensing strategy from the very beginning. The main\n> reason for that was that if people can use Ruby in their project they\n> certainly would be able to use Prawn as well. Ruby gave switched grom\n> GPL2/3 to 2-clause BSD license about three years ago.\n> \n> At this time the most popular license among Ruby projects is MIThttp://choosealicense.com/licenses/mit/\n> .\n> \n> The following people's code is in the master right now.\n> -  @aayushkhandelwal11 https://github.com/aayushkhandelwal11\n> -  @aguids https://github.com/aguids\n> -  @alexdowad https://github.com/alexdowad\n> -  @astjohn https://github.com/astjohn\n> -  @backspace https://github.com/backspace\n> -  @basvk https://github.com/basvk\n> -  @bluejade https://github.com/bluejade\n> -  @boutil https://github.com/boutil\n> -  @bradediger https://github.com/bradediger\n> -  @burisu https://github.com/burisu\n> -  @capps https://github.com/capps\n> -  @cbartlett https://github.com/cbartlett\n> -  @cheba https://github.com/cheba\n> -  @crazymykl https://github.com/crazymykl\n> -  @dougjohnston https://github.com/dougjohnston\n> -  @fidothe https://github.com/fidothe\n> -  @FloWi https://github.com/FloWi\n> -  @fnando https://github.com/fnando\n> -  @geeksam https://github.com/geeksam\n> -  @gettalong https://github.com/gettalong\n> -  @giuseb https://github.com/giuseb\n> -  @hbrandl https://github.com/hbrandl\n> -  @henrik https://github.com/henrik\n> -  @huerlisi https://github.com/huerlisi\n> -  @igorbozato https://github.com/igorbozato\n> -  @ivantsepp https://github.com/ivantsepp\n> -  @jamis https://github.com/jamis\n> -  @JEG2 https://github.com/JEG2\n> -  @jeremyf https://github.com/jeremyf\n> -  @joncanady https://github.com/joncanady\n> -  @joneslee85 https://github.com/joneslee85\n> -  @jonsgreen https://github.com/jonsgreen\n> -  @jonsgreen https://github.com/jonsgreen\n> -  @jordanbyron https://github.com/jordanbyron\n> -  @jweathers777 https://github.com/jweathers777\n> -  @kennethkalmer https://github.com/kennethkalmer\n> -  @koriroys https://github.com/koriroys\n> -  @kuroneko https://github.com/kuroneko\n> -  @lawso017 https://github.com/lawso017\n> -  @lenny https://github.com/lenny\n> -  @luis-ca https://github.com/luis-ca\n> -  @matthewrudy https://github.com/matthewrudy\n> -  @mbklein https://github.com/mbklein\n> -  @mdaines https://github.com/mdaines\n> -  @mikel https://github.com/mikel\n> -  @mrkn https://github.com/mrkn\n> -  @murrekatt https://github.com/murrekatt\n> -  @nathancolgate https://github.com/nathancolgate\n> -  @p8 https://github.com/p8\n> -  @packetmonkey https://github.com/packetmonkey\n> -  @phurley https://github.com/phurley\n> -  @proactive\n> -  @pwnall / @costan\n> -  @ratbeard\n> -  @riopro\n> -  @rivsc\n> -  @rubyredrick\n> -  @sandal\n> -  @scoopr\n> -  @scpike\n> -  @seebs\n> -  @sgwanlee\n> -  @shanebonham\n> -  @sigmike\n> -  @sos4nt\n> -  @strzibny\n> -  @tim-vandecasteele\n> -  @toretore\n> -  @torgoton\n> -  @trym\n> -  @vizjerai\n> -  @vongrippen\n> -  @weimeng\n> -  @wesgarrison\n> -  @whoops\n> -  @willbryant\n> -  @wpiekutowski\n> -  @yob\n> -  Jaron Kennel\n> - ##  otavio\n>   \n>   paul\n>   \n>   Please chime in below if you object to the move.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/prawnpdf/prawn/issues/625\n> .\n. @jonsgreen,\n\nThanks for your work on this.  My colored stamps were also repaired.\n. I messed up this pull request.  Should have branched it.  I will correct and resubmit.\n. I agree with you that page is the oddball.\n\nLooking back at the original code, I think my confusion arose from the help\nfor these two methods.  Both methods state that the first argument should be\na hash, and not the string for 'title.'\n\nI was passing the hash and it wasn't working so I changed it to such.\n\nMaybe we can stick with a string as the first argument and change the page\nmethod instead?\n\nOn Sun, Mar 13, 2011 at 11:03 PM, jonsgreen <\nreply@reply.github.com>wrote:\n\n> I am not sure I totally agree. Outline#section has the title as a required\n> first argument so really #page is the oddball right now. We had some debate\n> around the argument signature for #section and #page so I don't really want\n> to go there again.\n> \n> However, if others really feel that the API should be changed for these\n> subsection methods I am willing to merge this in though it means that\n> current Outlines using this feature will need to have their code changed. We\n> would also need to update the Manual.\n> \n> https://github.com/sandal/prawn/pull/216#issuecomment-867625\n. @tazsingh, glad to see I'm not the only one with the issue - there isn't much else out there that I could find. I closed it because I wasn't completely sure if this was a Prawn issue or not. I also narrowed it down to our choice of font. Although, the font was completely capable of handling diacritic marks in other situations like within word processing software. Perhaps it's a deadly combination of font, prawn, and jruby?  I'm not sure.\n\n`transliterate` is a nifty, temporary solution. I chose to fall back to the system font for now.\n\nI'll re-open this to get more attention. Hopefully, someone else can weigh in.\n. @sandal Thanks for helping out with this one. I can say that everything has been pretty solid on JRuby for a whiel now. \n\nOpen sans was another one that killed it. Apparently google has this font too. I tried a few different fonts before I had to abandon them all and rely on the system font. \n\nhttp://www.google.com/fonts/specimen/Open+Sans\n. @sandal, Yeah, I'm not sure why I didn't come back here and post about the jruby updates, in which they solved a pile of encoding issues. I had some other weird encoding issues with TorqueBox and making the switch solved them too. Great to hear about JRuby support. Cheers!\n. +1 for MIT\nOn Jan 3, 2014 6:26 PM, \"Alexander Mankuta\" notifications@github.com\nwrote:\n\n> Prawn followed Ruby licensing strategy from the very beginning. The main\n> reason for that was that if people can use Ruby in their project they\n> certainly would be able to use Prawn as well. Ruby gave switched grom\n> GPL2/3 to 2-clause BSD license about three years ago.\n> \n> At this time the most popular license among Ruby projects is MIThttp://choosealicense.com/licenses/mit/\n> .\n> \n> The following people's code is in the master right now.\n> -  @aayushkhandelwal11 https://github.com/aayushkhandelwal11\n> -  @aguids https://github.com/aguids\n> -  @alexdowad https://github.com/alexdowad\n> -  @astjohn https://github.com/astjohn\n> -  @backspace https://github.com/backspace\n> -  @basvk https://github.com/basvk\n> -  @bluejade https://github.com/bluejade\n> -  @boutil https://github.com/boutil\n> -  @bradediger https://github.com/bradediger\n> -  @burisu https://github.com/burisu\n> -  @capps https://github.com/capps\n> -  @cbartlett https://github.com/cbartlett\n> -  @cheba https://github.com/cheba\n> -  @crazymykl https://github.com/crazymykl\n> -  @dougjohnston https://github.com/dougjohnston\n> -  @fidothe https://github.com/fidothe\n> -  @FloWi https://github.com/FloWi\n> -  @fnando https://github.com/fnando\n> -  @geeksam https://github.com/geeksam\n> -  @gettalong https://github.com/gettalong\n> -  @giuseb https://github.com/giuseb\n> -  @hbrandl https://github.com/hbrandl\n> -  @henrik https://github.com/henrik\n> -  @huerlisi https://github.com/huerlisi\n> -  @igorbozato https://github.com/igorbozato\n> -  @ivantsepp https://github.com/ivantsepp\n> -  @jamis https://github.com/jamis\n> -  @JEG2 https://github.com/JEG2\n> -  @jeremyf https://github.com/jeremyf\n> -  @joncanady https://github.com/joncanady\n> -  @joneslee85 https://github.com/joneslee85\n> -  @jonsgreen https://github.com/jonsgreen\n> -  @jonsgreen https://github.com/jonsgreen\n> -  @jordanbyron https://github.com/jordanbyron\n> -  @jweathers777 https://github.com/jweathers777\n> -  @kennethkalmer https://github.com/kennethkalmer\n> -  @koriroys https://github.com/koriroys\n> -  @kuroneko https://github.com/kuroneko\n> -  @lawso017 https://github.com/lawso017\n> -  @lenny https://github.com/lenny\n> -  @luis-ca https://github.com/luis-ca\n> -  @matthewrudy https://github.com/matthewrudy\n> -  @mbklein https://github.com/mbklein\n> -  @mdaines https://github.com/mdaines\n> -  @mikel https://github.com/mikel\n> -  @mrkn https://github.com/mrkn\n> -  @murrekatt https://github.com/murrekatt\n> -  @nathancolgate https://github.com/nathancolgate\n> -  @p8 https://github.com/p8\n> -  @packetmonkey https://github.com/packetmonkey\n> -  @phurley https://github.com/phurley\n> -  @proactive\n> -  @pwnall / @costan\n> -  @ratbeard\n> -  @riopro\n> -  @rivsc\n> -  @rubyredrick\n> -  @sandal\n> -  @scoopr\n> -  @scpike\n> -  @seebs\n> -  @sgwanlee\n> -  @shanebonham\n> -  @sigmike\n> -  @sos4nt\n> -  @strzibny\n> -  @tim-vandecasteele\n> -  @toretore\n> -  @torgoton\n> -  @trym\n> -  @vizjerai\n> -  @vongrippen\n> -  @weimeng\n> -  @wesgarrison\n> -  @whoops\n> -  @willbryant\n> -  @wpiekutowski\n> -  @yob\n> -  Jaron Kennel\n> - ##  otavio\n>   \n>   paul\n>   \n>   Please chime in below if you object to the move.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/prawnpdf/prawn/issues/625\n> .\n. ",
    "devmitchell": "Something along those lines. If you get to the point that sacrificing width will end up breaking other words, basically optimizing this to the point that it no longer works, then at that point you'd probably just revert to the minimum width you currently use. \n. Something along those lines. If you get to the point that sacrificing width will end up breaking other words, basically optimizing this to the point that it no longer works, then at that point you'd probably just revert to the minimum width you currently use. \n. ",
    "packetmonkey": "I'm not sure I understand a good use case for this, beyond a more OOP design.\n\nDoes anyone have a good example for me to wrap my head around?\n. Adding myself to the issue\n. Adding myself to the issue\n. I merged master into this branch and pushed a copy of it up to the pluggable-parsers feature branch on the prawn repo. I'll open a PR for that branch so we can work on finishing bringing this in.\n. @akidon templates where removed from Prawn because the implementation could corrupt PDFs. The source code for that has been moved to https://github.com/prawnpdf/prawn-templates It's mostly unsupported but it may help you out if your use case is simple enough.\n. Adding myself to this issue as I'm interested as well.\n. I think we may want to consider a much higher resolution than 4 places, the newer retina displays have 401 pixels per inch making rounding differences possibly more apparent.\n\nI may be just being pedantic.\n. Yep, I forgot we are dealing in PDF points and not directly rendered to screen. It's like we are working on a PDF library or something.\n\nMy bad.\n. Adding myself to this issue as I have an interest in seeing this feature as well.\n. I think a good solution may be to clip the text and make it available. This is similar behavior to `#text_box` and lets the programmer decide what to do if the text didn't all fit.\n\nPossibly something like\n\n``` ruby\ntable = Prawn::Table.new table_data, pdf,:column_widths => column_widths\nif table.clipped_text?\n  fail ArgumentError, \"Couldn't fit '#{table.clipped_text.join(',')}' into the table\"\nend\n```\n\nNot the most thought out API but just my initial idea.\n. My goal for the initial PR was to be minimally invasive. The pattern of injecting yourself into a given namespace is also how [Minitest](https://github.com/seattlerb/minitest) lets you add assertions, so I was comfortable using the pattern.\n\nIf we wanted to register the handlers, is there a particular pattern or interface you would want followed?\n. Sounds good, I'll update the code to register the handlers.\n. I went ahead and added `Prawn::Images.add_image_handler` which accepts the class name for the handler so code can reach out to prawn and tell it where to look for the handlers. I used a class variable so you can require a gem adding support once and it will load into all documents you instantiate instead of also requiring the user to add the handler to every document they try to create. I also add the handlers for JPG and PNG when you create a document so we use the same API internally and maintain backwards compatibility for all existing code.\n\nThanks!\n. Great! Let me know if there is anything I can do to help speed it along, I would like to port some other code to use the finalized interface as soon as possible.\n\nThanks again!\n. @sandal Let me know what you think of this version of the patch. When it's ready to go in would you prefer a squashed commit to merge in?\n. :+1:  Looks good to me.\n. @sandal Should I go ahead and rename the `Prawn::Text::Formatted::Parser` to `Prawn::TextFormatter::BasicHTML` ( and any related file names / require paths )? I know we didn't move around the image handlers in my image support PR so I want to make sure, I think it makes sense in this case to make the transition as it's one class and no namespace being used for just this class.\n\nI'm also concerned by the travis build failure that a) appeared for no known reason and b) fixed itself for no real reason.\n\nOtherwise, any thoughts on what's left to get this merged into master?\n. I'm going to hold off on the name change until after RC3 when API decisions will start to be made. \n\nIn the absence of that everything else should be buttoned up, tested and ready for review.\n. 100% agree with the idea, serializing a data structure to PDF and laying out the document itself are two different concerns. I also agree with getting it out there as soon as possible if the plan is to have this change possibly implemented before we release version 1.0.\n\nMy only real concern (baring any discussion about how the API would be developed) is the using of the PDF namespace. As a general rule I try not to take over 'standard' names for things when writing an implementation. There was a similar discussion a while back about the activerecord gem not following the active record pattern in some significant ways and naming the gem after the pattern can cause confusion in those areas.\n\nNone of this is to say that we aren't going to actually be creating PDF's, but it's a red flag that pops up for me when discussing namespaces. I would personally like to see a  `Prawn::Serializer` instance get passed a `Prawn::Document` instance to render the actual file out. That lets us separate features relating to the PDF spec from the API letting users describe their document and keeps us in our own unambiguous namespace.\n. In which case I would suggest `PDF::Core::Serialize` as the main class the outside world interacts with. I'm also drawn to re-using the `PDF::Writer` namespace ( thinking anyone using the pdf-writer gem wouldn't also be using modern prawn) mostly because I like the symmetry of using both `PDF::Reader` and `PDF::Writer` for those actions.  \n\nI then start wondering about how using the Prawn::Document namespace now looks out of place possibly to be replaced with a PDF::Document, which would make sense in the greater scope of things.\n\nOverall this starts to feel a lot like bike shedding however if we are trying to lock in a long term API plan based around namespaces it is probably worth hashing out the long term discussion, however theoretical they sound, before things get merged into master and tied to version releases.\n\nThat or these are the ramblings of a man still half way though a turkey coma.\n. I ran some tests with large PNG files I'm used to dealing with, the full results are at https://gist.github.com/packetmonkey/52190bf68d0666a05a03 but the TL'DR version is that I'm seeing it shave 8.6 seconds on average off large transparent PNG files with negligible impact on opaque PNG files with a lot fewer ruby objects as well.\n. :+1:\n. I'm not a huge fan of the phrasing on\n\n``` ruby\n  text \"If you want, it allows you to specify non standard properties too.\n```\n\nThis implies there are standard properties, of which there aren't any.\n. I'm good with this, I just wanted to make sure nobody got stuck looking for a list anywhere.\n. Here are a few plugins/projects we may want to keep in mind. I have no idea what API's to help do this may look like or if they are even feasible, but I thought I would throw some examples out there to keep in mind while the discussion happens.\n\n## Image handlers\n\nThese are probably supportable via the existing image_handler API possibly with the exception of prawn-svg\n- [prawn-gmagick](https://github.com/packetmonkey/prawn-gmagick/)\n- [prawn-fast-png](https://github.com/amberbit/prawn-fast-png)\n- [prawn-svg](https://github.com/mogest/prawn-svg)\n\n## Templating\n\nSome system for mapping a layout to content implemented in prawn, this works as a simple solution but internally we have a far more complex one that could benefit from some support.\n- [prawn_cocktail](https://github.com/barsoom/prawn_cocktail)\n\n## Widgets\n\nVarious higher level constructs that could possibly be added in a cleaner way than monkey patching our way into the Prawn namespace\n- [prawn_calendar](https://github.com/bwl21/prawn_calendar)\n- [prawn_charts](https://github.com/MrPowers/prawn_charts/)\n- [prawn-graph](https://github.com/HHRy/prawn-graph)\n- [prawn-shadings](http://rubygems.org/gems/prawn-shadings)\n\nAnd lots of other examples on [rubygems](http://rubygems.org/search?utf8=%E2%9C%93&query=prawn)\n. Here is a half dozen examples that I have pulled from actual projects and reformatted to use this proposed #draw style. Most of these examples fall into either abstracting repeating groups of functionality together or more semantic abstractions of larger components, regardless of reuse.\n\nIt should also be noted that in my particular implementations, I have a `DEFAULT_OPTIONS` hash that the passed options get merged into making these components easier to deal with in the more common cases.\n\n## 1. Bordered Image\n\nThis component takes an image, places it on the document, and uses `Prawn::Document#line` to border it.\n\n``` ruby\n@document.draw BorderedImage, x_pos: x,\n                              y_pos: y,\n                              image: image,\n                              height: height,\n                              color: '000000',\n                              border_width: 1\n```\n\n## 2. Bordered Image  with Text\n\nThis component re-uses the above BorderedImage component but will also allow the user to caption the image with text positioned either above or below the image aligning that text either to the left, center, or right.\n\n``` ruby\n@document.draw BorderedImageWithText, x_pos: x,\n                                      y_pos: x,\n                                      image: image,\n                                      height: height,\n                                      color: '000000',\n                                      border_width: 1,\n                                      text: \"Example Text\",\n                                      text_alignment: :top_left\n```\n\n## 3. Color Box\n\nThis is a fairly simple wrapper to set a colored box in a more concise way by setting the fill color, drawing the rectangle and reverting to the previous fill color, all on one line. This is a pattern I use frequently on some documents.\n\n``` ruby\n@document.draw ColorBox, color: 'FF0000',\n                         width: in2pt(1),\n                         height: in2pt(2),\n                         x_pos: in2pt(5),\n                         y_pos: in2pt(5)\n```\n\n## 4. Side Bar\n\nSeveral of my documents have repeating design elements on a number of pages with slight variations, this side bar is one of them. It is identically positioned and sized with a changing background image or solid background color (which in turn uses ColorBox above)\n\n``` ruby\n@document.draw SideBar, color: '000000'\n\n# or\n\n@document.draw SideBar, image: image\n```\n\n## 5. Calendar\n\nI have an in house version of what is practically the [prawn_calendar gem](https://github.com/bwl21/prawn_calendar). It gets re-used on multiple documents as it takes a defined dimension and dates/text and plots them out using `Prawn::Document#table`\n\n``` ruby\n@document.draw Calendar, width: in2pt(10),\n                         height: in2pt(6),\n                         entries: [\n                           {date: #<Date:0x0000>, text: \"Signed\"},\n                           {date: #<Date:0x0000>, text: \"Sealed\"},\n                           {date: #<Date:0x0000>, text: \"Delivered\"},\n                         ]\n```\n\n## 6. User Chart\n\nI also have a component that will take a user, generate a custom [gruff](https://github.com/topfunky/gruff) chart for that user and insert it into a cover page of a metrics document.\n\n``` ruby\n@document.draw UserChart, x_pos: in2pt(10),\n                          y_pos: in2pt(10),\n                          user: user\n```\n\nMost other examples I have off hand are similar groupings to what I showed above, more reused complex table layouts like the calendar or other repeating patterns like the color box.\n\nThoughts?\n. Normally using an external object that accepts the document is exactly how I accomplish all of these currently. Here are a few thoughts on why `Prawn::Document#draw` may be better.\n1. It allows for consistent external / internal subdivisions. For example Prawn::Document::Table is called very similarly. I like the idea of including external code the same way we could include higher level internal code.\n2. I like the idea of providing an explicit method to to nudge prawn users to break up their more complex documents into sub-components.\n3. I was thinking of levering this to register component code, but we already discussed why that's not a great plan on IRC but it did go into my thinking for this PR.\n4. It does give us an opportunity to do things for the component on it's behalf, like possibly abstracting out positioning, fill colors or other more generic needs. This PR itself doesn't do that but by proxying the call though prawn itself it leaves the possibility open.\n\nAlso, this could totally be implemented using the `Prawn::Document.extension <<` api as it's mostly syntax sugar. I have no problem making a prawn-draw gem and going that route.\n. Looking though my components, I think I have at least two patterns that if we could abstract their solution into this call, would simplify the end code as well.\n\n## Child Views\n\nThis I think would be a huge win if we could sort out a good way to do it. Very often I'm breaking up a page into self contained areas, similar to partials in a rails view. However the component must know how big of an area it has to work with and where it is positioned. In my case I'll pass that information in and the component itself will calculate the correct sizes relative to the whole document. If we could optionally scope the whole call to an area of the page, then that arithmetic would be entirely not needed. For example my Sidebar example knows it's 2.5 inches wide, 8.5 inches tall (landscape PDF) and anchored to the left side. If we could adjust the call such to provide that scoping information to prawn, the component itself doesn't have to track that. It just fills 100% width and height of it's space. This becomes even better when we drill down.\n\nFor example I'll have a category, that has multiple columns, that has multiple items, that has multiple text boxes, each inset within each other. That's passing around a lot of numbers and forcing the components track that. if instead each component could just use the max width afforded to it, \n\nNow, this is of course possible by passing those values down into each component successively, which is what I do, but centralizing that translation into once prawn wrapper and removing it from every component would be a very real simplification and not just a nicer looking method call.\n\n## Rollbacks\n\nMany times I'll copy the existing fill color, set a new fill color, then reset the fill color back to the original setting. In some cases prawn allows block versions of methods that do something similar but I don't believe fill_color is one of them. If we had a generic version of that pattern that would scope all state changes like that, we could wrap wrap #call in that to make the components not have to care about cleaning up after themselves, which could be a real nice bonus.\n\nReally it comes down to isolating the state of the document from the state of the component and the area of the component from the area of the document.\n\nAny thoughts on if these are good ideas or how we could implement them in a generic way? Even if we built into core prawn the ability for those global state wrappers and global positioning code the #draw method that calls it could still be a sugar wrapper that gets coded in an external gem and not included in prawn itself.\n. I just pushed up an extra method that gets called in `#draw` called `#preserve_state` which will save and restore the settable methods on the prawn document. I looked though the prawn API and I think I caught all settings that can get changed but I may have missed some.\n\nFor example it now lets this script\n\n``` ruby\nrequire 'prawn'\n\ndoc = Prawn::Document.new\n\ndoc.text 'foo'\n\ndoc.preserve_state do\n  doc.fill_color = 'FF0000'\n  doc.font 'Courier'\n  doc.font_size 24\n  doc.text 'bar'\nend\n\ndoc.text 'baz'\n\ndoc.render_file 'output.pdf'\n```\n\nrender a document looking like this\n\n![screen shot 2014-02-15 at 10 44 11 pm](https://f.cloud.github.com/assets/4451/2179579/a0d34914-96bc-11e3-8f17-e9490e41a931.png)\n\nThis is the first step in better isolating components. The next step I'll play with is what we discussed in IRC with a proxy object. I didn't test this code as it's more proof of concept at this point for discussion, if we get ready to merge I'll get test written but for now don't merge.\n. This issue was left open to see if there was a better solution for this problem than the prawn-grouping gem. It looks like nobody has come up with one and it's solving real issues so I created a [Related Gems](https://github.com/prawnpdf/prawn/wiki/Related-Gems) wiki page and added it there for people to find it (with some other gems I know about off hand).\n\n@ddengler if there is anything in Prawn we could add to make implementing your gem easier, let us know. Happy to help extend the prawn ecosystem.\n. I took a quick look at this, it is straight forward enough to add to the .travis.yml via\n\n``` yaml\nscript: 'rake manual default'\n```\n\nWhich would run the manual task before the default (rubocop & rspec) task. However on a whim I inserted an uncaught exception into the manual, and I do see the error on the console however the build continues with an example.pdf being generated and the exit status being 0. This is going to make tying it into the build more difficult than a simple chained rake task.\n\nAny ideas on how to handle this? My thought is to modify the [eval_code](https://github.com/prawnpdf/prawn/blob/master/manual/example_helper.rb#L231-L251) method to exit with a status code of 1, in addition to printing the error message as it exists, which would prevent the manual from being generated break the build.\n. Note that as far as #664, I did not do the license reference check when adding rubocop, so we may want to open a new issue for that check specifically if/when this gets merged.\n. The build passes.\n@sandal good to merge and open a license check specific issue?\n. I glanced though it and didn't see anything specifically requiring ascii 8bit, and the tests all passed. I'll double check again.\n. I see nothing encoding in a string in the actual ruby file that isn't read in from a source and utf-8 should be backwards compatible with ascii-8bit. \n\nHowever, looking at the history of images.rb I do see 815320eb6d4fa168924ff6556d45be2596be6602 which is a commit you did ~6 years ago adding the 8bit encoding header (replacing utf-8 in fact) but no explanation as to why.\n. We can revert it for the specific files we are worried about and ignore them in the rubocop configs for as long as we are concerned. It would be worth following up then to make sure we aren't implicitly relying on that encoding and eventually make it consistently UTF8 across the board I think.\n. Interesting it looks like the failures are coming from Rubocop but when I merged that code I disabled all the cops that caused any failures and are slowly turning them on in PR's that enable the cop and fix any problems. \n\nWhen I clone your branch and run the tests I don't see the failures on my end.\n\nThe `UnusedBlockArgument` was included in the repo 16 days ago and 0.21.0 was released 4 days ago. So I badly included the rubocop dep in the gemspec without locking to a version. Then the new cop was added which failed on the current code, which is how your simple PR caused failures where a few weeks ago it would have been fine.\n\nI'll lock the gemspec to the specific version of rubocop I tested against, then you should be able to rebase your PR which should make the tests pass.\n\nI'll update again in a few minutes when I have that sorted out for you.\n. @donv I fixed this in bf8bc54dee3e41d655c4be09fbbdf23e9cf13f25 on master. Lets see if that clears up your PR.\n. I'm just waiting for the Travis CI to pass to 100% make sure I got the fix right\n. So I dropped everything and looked over this PR, loving the idea.\n\nI personally would like to see the various classes defined in their own files to make things easier it find.\n\nIt looks like to me you are using PDFColor as an abstract class ( as commented ), I wonder if instead of returning values that aren't ment to really be used in the system, those methods should raise `NotImplementedError` instead. That's a higher level style decision @sandal should sign off on I imagine.\n\nAlso not sure about presenting CSS color as the 'standard' as inferred in `manual/basic_concepts/css_colors.rb` but for a new user that may make the learning curve easier, and it's not like we dropped support for the other forms.\n\n:+1: from me having not yet pulled the branch down and played with it myself.\n. Also are there specs in this PR for the new code or am I just not seeing them?\n. How does naming the option \"break_words\" defaulting it to true for backwards compatibility sound?. That would make the call look like this\n\n``` ruby\ntable = pdf.table(data, cell_style: { break_words: false })\n```\n\nIn InDesign there is a similar feature for hyphenating words and you can uncheck the hyphenation on a chunk of text, but we don't actually inject a hyphen I believe. Otherwise `{hyphenate: false}` would read well.\n. I tweaked the API so this now works\n\n``` ruby\n    io = File.open \"#{Prawn::DATADIR}/fonts/DejaVuSans.ttf\"\n    @pdf.font_families[\"DejaVu Sans\"] = {\n      normal: Prawn::Font.load(@pdf, io, format: 'ttf')\n    }\n```\n\nI had to leave the default font AFM because changing it to TTF caused a lot of tests to break when it Prawn couldn't find the Helvetica font, but I may have made that change in error.\n\nRegardless this removes the `format` symbol from the font_families hash and will just try to use whatever Prawn::Font instance got passed, which in turns takes an IO object, which in turn uses TTFunk's IO support.\n\nI feel like we are getting fairly close here, any more thoughts about the TTF default breakage or anything else?\n. I also suspect the broken tests is due to an un-locked dependency on rspec, they released version 3 recently and I think it's backwards incompatible.\n. This commit will default any src with a `#read` method to the 'ttf' format. I decided to look for a `#read` method as opposed to a `String` class as according to the spec files we can also pass in a `Pathname` so as a last resort we cast the src to a string and check for a file extension.\n. @sandal are there any other changes you would like to see on this PR? I would love to get this merged before the next release tentatively scheduled for next sunday.\n. Sounds good, I just want to make sure you aren't waiting on anything from me to get it done.\n\nThanks!\n. Done\n. The image code has been updated a lot since 0.12.0, it expects either an IO object or a file path, what is happening is your uploader isn't acting like an IO object so Prawn tries to open the file at a given path, which is when it tries to implicitly convert your uploader to a string.\n\nIn my projects that use Prawn and ActiveRecord + CarrierWave I usually add them like so\n\n``` ruby\nrequire 'open-uri'\ndocument.image open(model.asset.url)\n```\n\nWhich will pass in the open-uri IO object and allow everything to work. Prawn has had this behavior for a while so I would suspect that CarrierWave unloaders may have used to act like IO objects and now don't, but I haven't used CarrierWave for over a year so I'm unfamiliar with the old behavior.\n\nHopefully this helps, if it doesn't please post the full stacktrace of the error because if passing in an actual IO object doesn't work, then it's a bug.\n. No but I'll fiddle with it then get it in master\n. In the past when I have had similar problems with a specific character not displaying correctly, it was because the font being used didn't support the specific character being used. \n\nI would in your rails console do something like\n\n``` ruby\nPainting.find(model_id).name == \"\u00d6l auf Leinwand\" # => true / false\n```\n\nWhere the string comparison is typed out to 100% ensure the string pasted in the db is the same as when you type it out.   Because the font does appear to display the letter I would try to ensure that the original document is in fact an exact duplicate.\n\nShort of that I'm not sure at first blush.\n. This addresses the main reason I never subclassed `Prawn::Document`, I may try to port some documents to this style as a more rounded test.\n\nIs there any concern/possible confusion in providing the `#save_as` method that isn't available in `Prawn::Document` as opposed to just calling `#render_file`?\n\nI would also like to see an dependency injection in `document` like\n\n``` ruby\nmodule Prawn\n  module View\n    DOCUMENT_CLASS=Prawn::Document\n    def document\n      @document ||= DOCUMENT_CLASS.new\n    end\n  end\nend\n```\n\nthat can be called like\n\n``` ruby\nclass MyDoc\n  include Prawn::View\n  DOCUMENT_CLASS=MyProxyDoc\n\n  # Other methods\nend\n```\n\nAs it allows for proxy objects around the document. In the past I have used that pattern for transforming measurements in inches into PDF points and to mock calls for testing. It would be a responsibility of the proxy object to in-turn handle method_missing and do whatever it wants before handing off the calls to a document. (We could be super helpful and provide a `Prawn::DocumentProxy` if we want, I have written that code like 3 times it seems so it may be useful).\n\nHappy to commit this into the branch if you agree, or have other thoughts.\n. Doh, yeah that totally works because it's mixed into the current class so you can just redefine the method.\n\nIt looks good to me, I'll still give it a go on a project here to see how it shakes out for me on a real project but I dig it without any changes now.\n. If you have imagemagick or graphicsmagick installed (with ghost script support sometimes needed) you can convert a pdf into an image. \n\nOn the command line `gm convert input.pdf output.jpg` is usually all you need. (for graphicsmagick)\n\nNote that this syntax will only convert the first page of a pdf, if you want others you can select which page you need.\n\nAnother option is taking the outputted PDF and piping it into pdf-inspector and checking for the existence of text on a given page, depending on specifically what you are trying to test.\n. This looks good to me, @sandal can you :+1: the extra development dependency? \n. Yep, I just wanted to double check as we are more strict with deps than most projects.\n. I know the PDF spec supports zoom levels, but I don't think we have native support for that in Prawn. May be worth adding that to PDF::Core instead of Prawn\n\nI'm also not sure we have a good way to allow end users to hard add PDF statements into a given document, that could possibly be a good stop-gap solution to give a lot of flexibility in using PDF features not implemented in prawn.\n\n@sandal Is there an API I'm missing for modifying pdf structures on the raw level?\n. Sure, I'll try to get that test run today or monday depending on meetings. I have a few fairly complex dynamically calculated products (using a lot of dry runs) that would hopefully ferret out any major problems.\n. I just compared a fairly complex document that uses a lot of dry-runs to calculate heights and dynamically position elements on the page. After eyeballing it and also using xscope to independently check the measurements on screen, everything looks identical to me on the decimal rounding branches. I asked someone else spot check it as well and she found nothing wrong either.\n\nMy tests also continued to pass which includes tests to make sure that the dimensions of various elements are calculated correctly, which shouldn't be (and weren't) impacted by this, but it was comforting to continue to see none the less.\n. I ran this test script with prawn 2.0.2 and we are [now throwing an exception](https://github.com/prawnpdf/prawn/blob/master/lib/prawn/images/png.rb#L70-L73) for transparent palleted PNG files added in 8ebe28228b013627224e69f2133722389bced545\n\n``` console\n ~/Code/prawn-png $ ruby prawn_test.rb\n/Users/evan/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/prawn-2.0.2/lib/prawn/images/png.rb:71:in `block in initialize': Pallete-based transparency in PNG is not currently supported. (Prawn::Errors::UnsupportedImageType)\nSee https://github.com/prawnpdf/prawn/issues/783\n    from /Users/evan/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/prawn-2.0.2/lib/prawn/images/png.rb:45:in `loop'\n    from /Users/evan/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/prawn-2.0.2/lib/prawn/images/png.rb:45:in `initialize'\n    from /Users/evan/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/prawn-2.0.2/lib/prawn/images.rb:87:in `new'\n    from /Users/evan/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/prawn-2.0.2/lib/prawn/images.rb:87:in `build_image_object'\n    from /Users/evan/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/prawn-2.0.2/lib/prawn/images.rb:66:in `image'\n    from prawn_test.rb:4:in `block (2 levels) in <main>'\n    from /Users/evan/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/prawn-2.0.2/lib/prawn/document.rb:225:in `instance_eval'\n    from /Users/evan/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/prawn-2.0.2/lib/prawn/document.rb:225:in `initialize'\n    from /Users/evan/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/prawn-2.0.2/lib/prawn/document.rb:141:in `new'\n    from /Users/evan/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/prawn-2.0.2/lib/prawn/document.rb:141:in `generate'\n    from prawn_test.rb:3:in `block in <main>'\n    from prawn_test.rb:2:in `each'\n    from prawn_test.rb:2:in `<main>'\n ~/Code/prawn-png $\n```\n\nSo we won't kick out known bad PDFs and I'm still open to a PR that will implement native palleted PNG transparency support.\n\nClosing the issue.\n. Thanks!\n. We use both the built in fonts and additional fonts. I have a lot of mock data with letter accents. All of my text gets added via a call to `#formatted_text_box`.\n\nI'll give it a look over and see if I trip into anything.\n. (accidentally submitted incomplete)\n\nIf I where to swing at this problem, I would probably come up with something similar to below\n\n``` ruby\nclass Prawn::RGBColor\n  def initialize(value)\n    @value = value\n  end\n\n  def to_pdf\n    # return PDF serialization\n  end\nend\n\nclass Prawn::CMYKColor\n  def initialize(value)\n    @value = value\n  end\n\n  def to_pdf\n        # return PDF serialization\n  end\nend\n\nmodule Prawn\n  def color(val)\n    case val\n    when Prawn::RGBColor\n    when Prawn::CMYKColor\n      return val\n    when String return Prawn::RGBColor.new(val)\n    when Array return Prawn::CMYKColor.new(val)\n    else\n      raise ArgumentError, \"cannot handle color type #{val.type}\"\n    end\n  end  \nend\n```\n\nThat way you can set up your own PDF Color externally however you like and just pass it in. We could also loosen it up to accept any object that responds to to_pdf so we can accept any pdf serializable object. This solution may take more refactoring than we would like and I think we could solve similar problems to the pull request #724 trying to add additional ways to set colors.\n. I would think simplest to understand solution would be to expect 6 hexadecimal characters, without the leading hash as the only option. If we support the leading # that could let the developer think other things more html-like are available, like the CSS shortcut of using 3 characters if they repeat (like using 'ABC' instead of 'AABBCC').\n\nIt's also really easy to test for and we can raise an error if we get passed an invalid format to help guide the developer.\n. Sure I'll get a PR for this pulled together.\n. This totally dropped off my radar, I'll try to knock it out this weekend but I won't feel hurt if you beat me to it.\n. Going to assign the issue to myself so it shows up on my GH dashboard.\n. Thanks for the fix!\n. @sandal Are we good to officially add 2.2.0 to travis? Once this goes in I'll do a similar PR to pdf-core and ttfunk\n. 1.9.3 is already not receiving maintenance updates and is only getting security patches until Feb 23, 2015, so that is probably a reasonable plan.\n. Support for templates was removed in prawn 0.13.0, the way it was implemented was fundamentally flawed. You can either use an older version of prawn if your use case is simple enough to not run into the myriad of bugs, or you would probably be better suited to use another tool\n\nThe old template code was extracted into the [prawn-templates](https://github.com/prawnpdf/prawn-templates) gem but it's unmaintained.\n. Thanks!\n. @sandal I bundled this branch as the version of Prawn used by my print on demand site and it didn't break any of my tests either.\n. Thanks for the fix!\n. Looks good, thanks for the tweak!\n. Can you please include a runnable script for us to reproduce the issue with?\n. Seems reasonable, thanks!\n. Can you please provide links to both fonts you are having a problem with and a script to reproduce the issue? \n. I don't have access to a windows machine to get a copy of the fonts so I can try to reproduce the problem. \n\nI suspect we will find the problem is rooted in [ttfunk](https://github.com/prawnpdf/ttfunk) which is the library prawn uses to deal with ttf fonts. Can you either help me find where I can get a copy of the fonts or confirm that ttfunk is able/unable to work with these specific fonts?\n. Glad to hear you came up with a solution!\n\nI'll close this issue as it wasn't a prawn bug but ttfunk related. I would be happy to look at a PR to implement that functionality on the ttfunk side so the original font worked out of the box. Without the actual font file and spending some time in the TrueType spec, I won't be able to patch ttfunk myself.\n\nThanks for the update!\n. Hey C\u00e9dric, thanks for the fixes. I would like to see a couple changes though before I'm comfortable pulling this in.\n1. Can you add an entry to the changelog for these changes and include links to the original debian bugs.\n2. Can you include tests for these changes so we don't break them in future updates and know why that code is needed\n3. I'm not super happy with the [logic figuring out the last_update for the cover](https://github.com/prawnpdf/prawn/blob/reproducible_build/manual/cover.rb#L26-L34). I think I would rather like to see something more obviously defaulting to the git repo latest commit, then falling back to Time.now allowing it to be overwritten by the BUILD_EPOCH environment variable.\n\nMaybe something like\n\n``` ruby\nif Dir.exist?(\"#{Prawn::BASEDIR}/.git\")\n  commit = `git show --pretty=%h`\n  git_commit = \"git commit: #{commit.lines.first}\"\n  last_update = Time.at(`git log -1 --pretty='%ct'`.to_i)\nend\n\nunless last_update\n    git_commit = \"\"\n    last_update ||= Time.now\nend\n\nif ENV['BUILD_EPOCH']\n  last_update = Time.at ENV['BUILD_EPOCH'].to_i\nend\n```\n\nThat way the cascade of options is more obvious.\n\nThoughts? \n. This looks good to me and fixes the issue. I'll merge it with the stripped change log.\n\nThanks Jesse!\n. I'm going to leave this open until next wednesday to give anyone else an opportunity to discuss this. As of right now I plan on merging this PR then and beginning the 6 week release cycle.\n\nThanks for the :+1: @jessedoyle \n. I'm going to go ahead and run with this plan. I'll plan to cut the next release in 6 weeks which currently is around June 19th.\n. Good call, I actually have been meaning to check out https://coveralls.io for code coverage as well, but Code Climate could also work.\n\nThere is simplecov usage in the spec_helper, but I always forget it's there, which makes it an ideal thing to tie into CI.\n\nIf you feel up to it give it a shot! This is probably something we should do just to see if there are any more gaps in coverage.\n. Long term I expect a lot of them to go away. \n\nThey seem to break down into 3 main groups\n- 95% Long test names\n- ~10 Long exception messages\n- ~2 Long strings related to formatted text parsing\n\nI expect to refactor the spec suite so we use more context blocks and fewer really-long named tests.\n\nThe text parsing in lib/prawn/text/formatted/line_wrap.rb and lib/prawn/text/formatted/parser.rb I'll probably leave alone until a possible future where we add better support for pluggable text formatters. That leaves roughly 10 the long exception strings which do fall more on the side of documentation and may be worth looking into.\n. I'm going to go ahead and merge this in to keep making progress on the general consistency/cleanup.  Feel free to open an issue or PR to talk about where we could use heredocs to clean things up further!\n. Nice! Thanks for the PR!\n\nFirst off please add an entry to the change log so we can doc the updated behavior.\n\nAlso I'm not sure that checking for the length of the string will be enough, as someone could say pass `EEFFGG`. What do you think about updating the logic to\n\n``` ruby\nwhen String\n  if color =~ /\\A[0-F]{6}\\z/i\n    :RGB\n  else\n    raise ArgumentError, \"Unknown type of color: #{color.inspect}\"\n  end\n```\n\nThanks again!\n. Hey I missed that you updated this branch, if you are still interested in getting it in I'm open to merging.\n\nThanks!\n. I suspect the [ttfunk](https://github.com/prawnpdf/ttfunk) library may be having problems with your font. In order to reproduce and begin trying to fix it, we need a script that reproduces the problem and a copy of the ttf font you are trying to use.\n\nI also don't know Persian so some example of what you expected to see would be helpful.\n\nEven after all that it may be hard to track down, but that should at least give us a chance to sort out what is going on.\n\nOther people with similar problems have converted/imported their font using other TTF tools and that appeared to fix the problem for them, it may work for you as well. Otherwise an update to Prawn/TTFunk may be needed.\n. What kind of API would you expect for this? I'm not opposed to some kind of text filtering API but looking at the readme for persian-bechasboon, it looks like the problem could be solved with that gem.\n\n``` ruby\nrequire 'prawn'\nrequire 'persian-bechasboon'\nPrawn::Document.generate(\"persian.pdf\") do\n    text_direction :rtl\n    font(\"/path/to/persian/font.ttf\") do # For example: B Nazanin\n        text \"\u062f\u0631\u0648\u062f \u062f\u0646\u06cc\u0627\".connect_persian_letters\n    end\nend\n```\n\nDoes that fix the problem for you? If in theory every time `Prawn::Document#text` was called with a string that you called `#connect_persian_letters` would the problem be handled?\n. What API or functionality would you like to see added to prawn to make using your gem with it more seamless?  I would like to avoid building in support for a lot of special cases but am open to adding APIs that let gem authors extend prawn to handle their use case.\n. I can get on board with an api to hook in better text processing for those languages, I completely agree it's a valid use case that can be better handled.\n\nThe short term workaround would be to write code such as\n\n``` ruby\nrequire 'prawn'\n\nPrawn::Document.generate('output.pdf') do |pdf|\n   pdf.text \"\u062f\u0631\u0648\u062f \u062f\u0646\u06cc\u0627\".connect_persian_letters\nend\n```\n\nBut ideally  you would like to see something like\n\n``` ruby\nrequire 'prawn'\nrequire 'prawn-persian-bechasboon'\n\nPrawn::Document.generate('output.pdf') do |pdf|\n   pdf.text \"\u062f\u0631\u0648\u062f \u062f\u0646\u06cc\u0627\"\nend\n```\n\nAm I understanding correctly?\n. I agree, this now sounds like the best long term plan.\n\nFeel free to open any new issues or PRs with specific changes that need to be made in order for PDF::Core/Prawn to use whatever code ends up being written to support those use cases. \n\nI'll close this issue for now as there are no directly actionable things in it. I'm exciting to see what language support we can add.\n. Yep that sure does look like a bug.\n\nAt my initial glance though the code the [#shrink_to_fit](https://github.com/prawnpdf/prawn/blob/master/lib/prawn/text/formatted/box.rb#L499-L519) method is looking to catch a `Prawn::Errors::CannotFit` exception to know that the text isn't fitting. It expects the [wrap](https://github.com/prawnpdf/prawn/blob/master/lib/prawn/text/formatted/wrap.rb#L45-L71) method to throw this exception which internally uses the [line_wrap](https://github.com/prawnpdf/prawn/blob/master/lib/prawn/text/formatted/line_wrap.rb#L38-L55) method which calls eventually [#update_output_based_on_last_fragment](https://github.com/prawnpdf/prawn/blob/master/lib/prawn/text/formatted/line_wrap.rb#L198-L202) to throw the exception if the line does not fit. So my initial thoughts are [this calculation](https://github.com/prawnpdf/prawn/blob/master/lib/prawn/text/formatted/line_wrap.rb#L200) is what is forgetting to take into account the character spacing.\n\nThe logic there is a bit dense but it's as good a place to start as any. I'll try to see what I can sort out but at least I'll start with a failing test case on a PR while we try to sort though it.\n. @iamjohnford I'm not sure if that is the same bug or not, it could be related to something in the text formatter for inline formatting, where @obfuscoder is probably just failing to a account for a variable when calculating the width. I'm unsure for now.\n. Thanks for this! because of how important the spec suite is I'm going to very carefully look over the diff to make sure I don't see anything weird, but in concept I have no problem merging this once I have had a chance to dig though it.\n. Do you think it would be possible to split this up into smaller PRs? That way we could review and merge them into smaller chunks instead of waiting until a giant review is done and possibly increase the risk of missing something.\n. I was thinking per-file maybe, but really the problem is I can't revirew them all at once. but I don't have to.\nI created a list for every file in the PR and as they get reviewed they can be marked off. \n\nI'll keep this list up to date as I go.\n- [x] spec/annotations_spec.rb\n- [x] spec/bounding_box_spec.rb\n- [x] spec/column_box_spec.rb\n- [x] spec/destinations_spec.rb\n- [x] spec/document_spec.rb\n- [x] spec/font_metric_cache_spec.rb\n- [x] spec/font_spec.rb\n- [x] spec/formatted_text_arranger_spec.rb\n- [x] spec/formatted_text_box_spec.rb\n- [x] spec/formatted_text_fragment_spec.rb\n- [x] spec/graphics_spec.rb\n- [x] spec/grid_spec.rb\n- [x] spec/image_handler_spec.rb\n- [x] spec/images_spec.rb\n- [x] spec/inline_formatted_text_parser_spec.rb\n- [x] spec/jpg_spec.rb\n- [x] spec/line_wrap_spec.rb\n- [x] spec/measurement_units_spec.rb\n- [x] spec/outline_spec.rb\n- [x] spec/png_spec.rb\n- [x] spec/reference_spec.rb\n- [x] spec/repeater_spec.rb\n- [x] spec/security_spec.rb\n- [x] spec/soft_mask_spec.rb\n- [x] spec/span_spec.rb\n- [x] spec/stamp_spec.rb\n- [x] spec/stroke_styles_spec.rb\n- [x] spec/text_at_spec.rb\n- [x] spec/text_box_spec.rb\n- [x] spec/text_rendering_mode_spec.rb\n- [x] spec/text_spacing_spec.rb\n- [x] spec/text_spec.rb\n- [x] spec/text_with_inline_formatting_spec.rb\n- [x] spec/transparency_spec.rb\n. I _finally_ managed to get though this PR. Thank you for opening it and I'm ready to merge it. The spec suite is important and it's helpful to keep it up to the current RSpec best practices.\n\nSorry it took so long!\n\nOnce @practicingruby grants me permissions to modify the Contributors group, you will get commit access to prawn because you had a pull request merged. Here are [the details](https://github.com/prawnpdf/prawn/wiki/Contributor-welcome-notes). Thanks again for helping prawn\n. You have been added to the contributors group, thanks again!\n. Prawn doesn't currently support kicking out anything other than a standard PDF. I would be happy to consider a PR to add support  but that's probably a bit ambitious given the current state of the codebase. I don't believe we currently set the trim box or bleed box on our output PDFs nor do we have anything in place to prevent a user from adding an RGB image for example.\n. @fidothe neat! Really looking forward to that Gist. Maybe we can add some API's to make what you had to do more straightforward and possibly documented. I'll re-open this because it looks like there is a chance this can work :)\n. Thanks @fidothe !\n\nI'm going to go ahead and re-close this issue as we don't natively support this still. However I think there is opportunity to implement a lot of what @fidothe did as native API's making doing similar work much easier.\n\nThere are some easier wins such as adding built in support for setting the trim and bleed boxes, OutputIntent's and allowing the overriding of the version strings. \n\nI would be interested to hear from you @fidothe on what would have made this easier. There could possibly be a Prawn::PDFX/PDFA in the future.\n. I agree with @cheba that it doesn't feel right to be in Prawn. One solution may be to use ruby's open classes to define the method yourself and use it such as\n\n``` ruby\nmodule Prawn\n  module Measurements\n    def px2pt(px)\n      return px * 0.75\n    end\n\n    def pt2px(pt)\n      return pt / 1.333333\n    end\n  end\nend\n```\n\nI'm also open to a possible API extension to allow people to add their own measurements for ease of use. This could enable the creation of a prawn-pixelpoint gem (or whatever) that anyone who needs the functionality can require in, which I believe would help your use case @mojavelinux in addition to letting people support whatever they need (my next project is now going to use furlongs just so I can say it in meetings). But I'm not sure what benefit it would provide beyond option 1 other than possible name collisions but I think the developer should be aware of that anyway.\n\nI think option 1 works, can be packaged as a gem and depended on, and it keeps us from becoming a giant warehouse of every possible conversion for every use case.\n\nFull working example\n\n``` ruby\nrequire 'prawn'\n\nmodule Prawn\n  module Measurements\n    def furlong2pt(furlongs)\n      furlongs * 7_920.004 * 72\n    end\n  end\nend\n\n\nPrawn::Document.generate 'output.pdf' do\n  extend Prawn::Measurements\n\n  x       = in2pt 3\n  y       = cm2pt 7.620\n  width   = yd2pt 0.083\n  height  = furlong2pt 0.000379\n\n  stroke do\n    rectangle [x, y], width, height\n  end\nend\n```\n\nThoughts? I'll reopen the PR while we come up with a solution that works for everyone. \n. It sounds like everyone's use case is handled by adding methods to Prawn::Measurements themselves and if it's super useful feel free to create a gem and let the mailing list know to claim your unit conversion helper method glory!\n\nIf someone wants to open a new PR updating the documentation to help make this point clearer, I would be happy to check it out.\n\nThanks for the discussion everyone, re-closing the PR. \n. @henrik @joakimk You may want to check out the prawn-gmagick gem I wrote, it won't avoid loading the image content into memory but I do the pixel extraction in a C ruby extension using graphicsmagick that may help your render execute faster and with less overhead, but still quite a bit at this size.\n\nI use it to load multiple 100+ MB files into PDFs without too much trouble on other projects so it may help you out here.\n. Closing this as I messed up my rebase to try again.\n. Not currently,  [PDF::Core:: DocumentState](https://github.com/prawnpdf/pdf-core/blob/master/lib/pdf/core/document_state.rb) implements [#insert_page](https://github.com/prawnpdf/pdf-core/blob/master/lib/pdf/core/document_state.rb#L49-L53) which is called from [Prawn::Document#start_new_page](https://github.com/prawnpdf/prawn/blob/master/lib/prawn/document.rb#L231-L286) calls but nothing to do the reverse.\n\nI'm curious, what is your use case for removing a page you would have added previously?\n. The release policy was merged in #846 which started the 6 week timer which ends on June 19th so I currently plan on cutting a release that weekend.\n\nHope that helps!\n. I'm good with this change in principal. I do need a few changes to be made first\n- Please fix the failing rubocop test\n- Please add an entry to the change log documenting that we are using the new hash syntax in the manual\n- Currently the `HashSyntax` rubocop cop is disabled. Please configure it to be enabled for the manual directory.\n\nOnce that is done I'll pull down the branch and ensure that the manual still builds and really deep dive on the PR, but that should be all the changes that need to be made.\n. Can you please rebase your branch so that it can merge into master without a conflict? Then we should be able to review this change and get it in.\n. I looked over the PR and it looks good, I also checked it out locally and successfully built the manual. Can you please do a manual comparison between your generated manual and compare it to the [currently public manual](http://prawnpdf.org/manual.pdf) to make sure nothing looks totally off? Normally that is done during the release process and takes about 20 minutes to just compare page by page to make sure nothing looks totally wrong.\n\nOnce that last visual check is done this is good to merge.\n. Thanks for the info @mogest, to be honest I'm not 100% comfortable with that code or that part of the spec so I'll take your word at that it's wrong :)\n\nMy first question is would implementing your change break backwards compatibility? If so we would need to implement your fix in a way that we can enable the new correct behavior while preserving the old behavior until we release Prawn 3.0 and remove the deprecated wrong code.\n\nI would say throw open a PR so we can look over what you have and see what can be done. I'll try to become more knowledgeable about the area as well so we can come up with the right solution.\n. This issue can now be closed after the merging of 894. Thanks!\n. @Superpencil Cool! Prawn currently supports TTF fonts using our ttfunk library, if you develop an OTF library it would be a big win to add support for that into prawn. We probably will want to end up adding some extension points into the prawn font handling code so you (or anyone else in the future) can add the font support needed.\n\nI'm going to go ahead and close this issue. Feel free to open a pull request with any changes you think need to be made to prawn to support your efforts and we can work though it.\n\nGood luck!\n. My main concern with this, beyond trying to find the time to truly understand this change, is any backwards compatibility implications.\n\nFrom my basic understanding, it looks like it a user could be relying on the broken behavior of their gradient's not being rotated, and this change would alter their behavior if they upgraded.\n\nAm I understanding correctly?\n. I was thinking something similar. For that to work we would have to let users opt into the new correct behavior, deprecate the old broken behavior, then when we release prawn 3 at some point in the future we can remove the old code and the logic for handling it's optional use and just use the correct new behavior. \n\nI don't believe Prawn has done something like that before so I want to make sure that a breaking change is transitioned correctly, there are a lot of people possibly using the bad behavior and not knowing it.\n\nThe other option is that merging this PR necessitates the next version of prawn released is 3.0, but I'm not personally comfortable releasing a breaking 3.0 right now so soon after 2.0.\n\nI would love ideas and any discussion on the ramifications of those choices.\n. I think this sounds like the best plan, lets make the new behavior opt-in for now and when we cut prawn v3 we will make it the default behavior and remove the old.\n\nThis also introduces a new question, how do we mark it as deprecated. I'm inclined to throw a `Kernel#warn` call in the legacy code path with a link to a wiki page describing the change and what they should do to enable the new behavior. Normally I would also mark the method as deprecated in the docs but we aren't changing that, so we may want to add a note there as well in case they look at the docs.\n\nThoughts? \n. Alright I took some time to check out the branch and play with it. Everything is looking good in my tests when I used a scale block and a rotate block. \n\nI think this is working as good as it can be.\n\nI went ahead and set up the [wiki page](https://github.com/prawnpdf/prawn/wiki/Gradient-Transformations). I'm open to any feedback / edits on making that easier for developers to understand as this is the first time we are really executing a deprecation migration plan in Prawn, so if there is a precedent we want to set, now is the time.\n\nI'm looking for another :+1: or two but I think this is ready to go in, for sure before the next prawn release.\n\n@cheba Agree? \n\n@mogest Just throwing it out there that you rock :) Thanks a _ton_ for pulling this together.\n. @mogest Also please add an entry to the CHANGELOG for this.\n. Aaannddddd merged :)\n\nAll glory to prawn-svg \n\n![giphy](https://cloud.githubusercontent.com/assets/4451/9204922/1c73f846-402d-11e5-8c8e-205ba496420c.gif)\n\nThanks again!\n. Feel free to open a PR upgrading Prawn to the latest version of RSpec. Assuming that goes well we can look at this PR again.\n. Can you please provide a complete script that reproduces the problem, that's a weird situation and I want to make sure I see the same thing you are.\n. We want to avoid inserting random data into PDFs if at all possible. It means if we run the same PDF generation script twice we will get different files out the other side which leads to other issues with packaging files generated by Prawn.\n\nCould we tweak the key generation to check for existence, and if so increment our counter?\n\nI'm thinking something like this\n\n``` ruby\ndef generate_unique_id\n  init = @document.font_registry.size + 1\n  key = :\"F#{init}\"\n  while @document.state.page.fonts.keys.include?(key) do\n    init += 1\n    key = :\"F#{init}\"\n  end\n  key\nend\n```\n\nThis way it's deterministic. Does that solve the problem?\n\nAlso can we add a spec that would have previously added a duplicate font id so we can ensure that the no-duplicate font key code keeps working?\n\nThanks!\n. I'm not sure I understand why the inclusion in the subset causes a problem with my suggested implementation. I may not be paying close enough attention.\n\nWhat does this proposed diff have that my proposed diff doesn't? \n. I keep going back and fourth on this issue. You totally have a legitimate problem that needs to be resolved in order to provide functionality I want to let you provide, however this is adding complexity and functionality that prawn natively doesn't need to do it's job on it's own.\n\nI think the correct answer here may be dependency injection.\n\nIf Prawn provides a way (as an experimental non-semver binding API while we work though this) to provide your own font ID generator, we can keep the simple use case as our default, but allow you in prawn-templates to set your own more complex generator, do you think that could help?\n\nIt also means as your use case evolves or you find other bugs, you can fix it yourself without worrying about keeping Prawn up to date.\n\nI'm not sure what this would look like yet but I'm throwing the idea out there. I suspect this won't be the only time we need to do this kind of integration, and moving in that direction could allow us to provide similar hooks for other deeply integrated plugins people way want to add to prawn.\n\nThoughts?\n. In thinking about the discussion @practicingruby referenced, I too now think this may be better solved in PDF::Core, for the mentioned reasons. \n\nPart of my thoughts for why this makes sense is like above, you can't really write a test in prawn for the new behavior, but you could totally write the test for PDF::Core for the new behavior, which suggests to me that's the correct spot for this.\n\nIn general I'm also in favor of more substantial plugins like prawn-templates using more of the lower-level PDF::Core methods than trying to thread everything though Prawn which is supposed to be a higher level abstraction over PDF::Core, so this helps keep Prawn in the realm of 'easy to use PDF Generation' and out of the \"Solve everybody's PDF implementation needs\" realm.\n\nSo this plan is currently the top \"Feels good\" option to me at least.\n\nWhat do you think @bvogel ? I also agree lets get this wrapped up before I cut the next release so I don't leave you blocked for a whole new release cycle. \n. I am fairly swamped right now so the best solution probably would be you to take a swing at this.\n\nA good first step may be to define a `PDF::Core::Fonts` module and include it in [core.rb](https://github.com/prawnpdf/pdf-core/blob/master/lib/pdf/core.rb)\n\nFor now PDF::Core is just an internal dependency of Prawn, and no API is guaranteed between releases so we can be a little more flexible getting something going and changing it in the future if we figure out a better way to go about things.\n. I'm going to open with that I'm not 100% comfortable with the font code here, so some of these ideas may turn out to be horrible :)\n\nWhile the majority of the font code probably should move down to PDF::Core, for your specific need do you think we could move down just the font registry?\n\nIf we created a PDF::Core::FontRegistry class, and added a #generate_id method to it, then updated `#find_font` to use a new API instead of a raw internal hash, we can make a small refactoring in the currently thought to be best direction, get your feature added down there in an easy to write unit test, and give you a clean API in prawn-templates to add a font to the registry.\n\nIt may also make sense to move the font_families hash down as well and proxy calls to it. That will be an unfortunate side effect of the official prawn API giving developers access to the internal font_families hash instead of wrapping it in an API, so we will need to preserve that for compatibility for now (maybe another breaking change for Prawn 3).\n\nThen with at least top-level font management happening in PDF::Core, with a real API to add fonts, you can call that from prawn-templates to add the fonts you need, in whatever order/way you need, and we can unit test correct generation of font IDs. And for prawn it's just an implementation detail of PDF::Core so we aren't introducing new complexity to Prawn for a use case it doesn't need to itself support.\n\nThoughts? I tagged this PR as a blocker, I won't cut a new Prawn + PDF::Core release until this is sorted out.\n. If we are going to refactor the font code down to PDF::Core, maybe the fastest way to do this is to accept the complexity into Prawn, knowing it will move to PDF::Core where it will be appropriate, and it just becomes a refactoring we do and when we do that refactor we ensure we preserve the functionality.\n\nThat way we can get this merged, get you working, get prawn-templates back functional, and cut this release and get it out the door.\n\nWhat does everyone thing of that?\n. Nope, I had to take a trip to Texas last week on short notice so I was tied up.\n\nAll you have to do is celebrate :)\n\nNow that this is merged I'll look at another open branch or two to see about getting it merged this week then try to cut a new release this weekend so you can get a new prawn-templates out the door.\n. Yeah, I hope to release prawn one of these weekends, I have said that to myself the last few weekends. The problem is how complex the release process is for Prawn with some measures of manual testing involved.\n\nAt the very least I'll get the process documented and I'll see what I can do to get this going. I would like to make it a more regular process and part of that involves doing it a couple of times then automating what we can.\n\nSorry about the wait\n. I have used http://www.pdf-tools.com/pdf/validate-pdfa-online.aspx in the past to try and work though corrupt PDF problems, it has been able to handle Prawn PDFs before. I haven't paid to much attention to PDF/A incapability as it wasn't my use case, but I am open to fixes to make sure we can generate PDF/A compliant files.\n. I am open to any PRs that would help bring Prawn into PDF/A compliance\n. Hi, I am highly reluctant to overwrite what has been pushed up to github because I don't want to change code out from underneath people without them knowing.\n\nI didn't cut the 2.0.1 gem release but I will try to be very careful moving forward that what is tagged on the stable branch is what exactly is pushed up to ruby gems.\n\nIs there a specific problem this is causing you? I'm not saying it's an issue but I am curious to what workflow it's impacting.\n. Glad to hear it's sorted out. Closing the issue.\n. Sorry about being so slow to get to this, I think we totally want to get this in. I am planing on cutting a new release of prawn later this week / week end and I don't think I'll find time for us to sort this out before then.\n\nSo just know we want to get this in and don't read to much into me cutting a release of prawn without merging this first :)\n. I'm not sure we ever officially posted it anywhere but we only support versions of ruby that the core team supports, from @mogest's post above it looks like the jRuby team isn't supporting anything there than 9000 so tweaking travis and moving forward with that would be in line with that policy.\n\nI however don't know enough about the jRuby ecosystem/use base to know if we would be cutting off a lot of users in a minor release by doing that.\n\nSo unless someone tells me that it would be a serious problem for jRuby users, I'm good with moving to just supporting jRuby 9000, we should also make our policy explicit of supporting the latest version of jRuby and all ruby-core supported versions of MRI.\n. Looking though [the changelog](https://github.com/prawnpdf/prawn/blob/62da6cdb4e384b50a789451c73d72452a2410f23/CHANGELOG.md#prawnpdf-200----2015-02-26) as of v 2.0.0 we recommended using 1.7 in 2.0 mode, but that's all I can find, but we did imply our 'support what ruby core' supports. \n. @mogest @pointlessone or I am going to check this out this week, depending on who gets to it first (I'm dealing with a lot of day job stuff this week), the code looks good.\n\nCan you confirm if there are/are not any breaking API changes in this?\n. Thanks!\n. I think I would prefer to see a new method that called the existing methods twice instead of adding complexity to the existing methods\n\nMaybe something like\n\n``` ruby\ndef pad_vertical(top_padding, bottom_padding)\n   move_down top_padding\n   yield\n   move_down bottom_padding\nend\n```\n\nWhich could possibly be combined with an `#indent` call to give you a padded box somewhere.\n\nWe would also for sure need tests for this, and maybe include it in the manual.\n\nThoughts?\n. Most of those are required for the various features we provide, and I'm not sure how we would get away from them. If you dive into it feel free to make a suggestion we can look over, but at first glance I'm not sure what we could do. \n\nThanks for the comment, and it's no bother :) We want this to be as fast and efficient as possible!\n. Thanks for the comment! Where would you have expected the cursor to end up after having written in the box?\n. So the `#text` method internally ends up creating a Text::Formatted::Box and moving the cursor down, where  calling text_box directly does nothing with the cursor.\n\nGiven how text is supposed to be a higher level convenience method, I think I'm ok with this behavior and if you want more precise control, you can instantiate a text_box yourself, as you already discovered. I would be open to a documentation patch that would explain the behavior so people in the future don't run into the same confusion you did.\n\nThanks!\n. The formatted arranger does [intentionally omit trailing space](https://github.com/prawnpdf/prawn/blob/master/lib/prawn/text/formatted/arranger.rb#L66) when doing it's finalization which is why the string it returns doesn't have trailing space so your line width calculation wouldn't cover it.\n\nFrom my understanding however when you go to print the formatted line with the trailing space it should be stripped out as well.\n\nDo you have a situation where you are using `inline_format: true` for the width_of but not on the final text draw? Or am I misunderstanding?\n. Given how we remove it from the finalized line that is the intention. However ruby normally doesn't consider a non-breaking space as 'whitespace' in the strictest sense so you may be able to append that to your string for spacing and have everything work as you would like.\n\n``` ruby\nirb(main):001:0> \"string \".strip\n=> \"string\"\nirb(main):002:0> \"string\\u00A0\".strip\n=> \"string\u00a0\"\n```\n. @iamjohnford Thanks for the pr!\n\n@mogest @cheba Could I get your input on this? I'm unfamiliar with this part of the spec as well and am currently not in a position to triage this with regard to how correct this solution is.\n\n@iamjohnford Can you also add a spec for this new functionality? I'm up for getting the feature merged in the right way and we need to make sure it will continue to work in the future. It would also be useful to have an example of how to use this code so we can easily see it in action and work though it.\n. :+1: for the separate blend_mode method, and we will want a spec specifically to cover making sure multiple blend modes are applied in the correct order to allow the reader to fallback as 7.5.2 noted.\n\nThanks so much!\n. @iamjohnford Go ahead and rebase to clean up the diff\n\nI missed it when we merged that change into PDF Inspector but can you please open a new PR to that project with an update to the change log so when we release that gem the new functionality is documented? One that release is done we can then update the gem spec in prawn to require it in this PR.\n\nI'm not too concerned about where the page is in the manual, it makes sense to me but we can change it later if something comes up.\n\nOverall I'm pretty stoked about this pr. As far as correctness I'll need to rely on @mogest and @cheba to confirm the correctness of the new functionality, can I please get a review from you two?\n. I just released a new version of the PDF inspector gem and Prawn master now depends on it. Can you rebase on master again which should hopefully make this test suite go green!\n. @iamjohnford I'm slowly burning though my prawn backlog, I'll look at this one next.\n\nThanks again for the help!\n. @iamjohnford You are **AWESOME**\n\nThanks so much for the PR (and the patience waiting for us to get this merged in!!!!)\n\nBecause you got a PR merged, you get commit access to prawn :tada: :fried_shrimp: \n\n[Here are the details](https://github.com/prawnpdf/prawn/wiki/Contributor-welcome-notes) on what that means.\n\nSeriously, thanks again for the PR. Honest real smiles over here :smile:\n\nThanks @mogest and @cheba for the extra :eyes: on this. Internet high fives all around :hand: \n. `Prawn::Document#render` will return the raw PDF stream, `#render_file` just writes that stream to a file on disk.\n\nYou should be abel to take the return value from `#render` and send it to whatever library you are using to writing to S3.\n. @mojavelinux Sure that way we can be super clear about the specific use case you have\n. `Prawn::Document#image` returns the `Prawn::Images::Image` (or an object that inherits from that) that got added, which does have a `#width` and `#height` method on them.\n\nThat API isn't public or really considered stable, but that's one way to get what you want without looking at the file yourself using something like imagemagick.\n. Looking at [#image_position](https://github.com/prawnpdf/prawn/blob/master/lib/prawn/images.rb#L147-L175) you may be able to use the `:position` and `:vposition` options to get the behavior you want.\n\n``` ruby\n  pdf.image 'img', fit: [200, 200], position: :center, position: :center\n```\n. Thanks for the PR! My concern is that this would change the return value for an API that was marked as stable, which would necessitate a major version bump.\n\nI think I get what you are trying to do and agree this result could be more useful. What does everyone think of having  this functionality in a new lower level API call that you could make and get the box return value, and the existing API call calls that lower level value, then returns the render result so we maintain backwards API compatibility?\n\nI'm also concerned with you changed an API return and it didn't look like you had to change an existing test so we probably have at least one missing test that should be written as well.\n. I'm good with the change to `gradient_registry_key` however the warning for `warning: private attribute?` has already been [fixed on ruby trunk](https://bugs.ruby-lang.org/issues/10967). I prefer that style and given the warning will go away, I'm inclined to leave it until 2.3 when it disappears completely.\n. I'll concede it's annoying to throw an unavoidable warning given how we aren't actually injecting any additional functionality here, it's just a style choice with the current code.\n\nI'll merge this in, and once 2.3 is released I'll pick a bigger fight over it :)\n\nThanks for the feedback everyone!\n. Currently Prawn only supports PNG and JPG files natively. We have a general rule for only having pure ruby dependencies we control. If you wanted to implement a tiff handler I would be more than happy to review the PR and get it merged in.\n\nIn the mean time you may want to check out my [prawn-gmagick](https://github.com/packetmonkey/prawn-gmagick) gem which will add support to prawn for whatever formats your install of graphicsmagick has. In my case I use it to load tiff images into PDFs.\n\nHope that helps!\n. I'm not sure if having a bounding box implicitly cross pages feels right. Initially (to me at least) the bounding box is a single 'object' that we would place on a page, but I can probably be convinced otherwise with some good use cases, in which case I would then be open to the PR.\n. If you can please include a fully runnable script with what version of prawn you see it on, we can see what is going on and at lest hopefully provide a more useful error message for people who run into the same issue.\n\nWe can re-open once we have that, thanks!\n. I would be very open to a PR implementing the embedding of ICC profiles, but you are correct our current implementations do not.\n\nIn my [prawn-pdfimage](https://github.com/packetmonkey/prawn-pdfimage) library I will duplicate an ICC profile that exists on an image in another PDF if someone would like to reference that as well for developing this.\n. Nice! In order to get the test suite passing, do we need to just remove the spec that was ensuring we raised an exception for palleted PNG files? Also I think you left a [puts](https://github.com/prawnpdf/prawn/pull/920/files#diff-857d67def6a8ff6448b08d3211b367c0R157) in the specs, we should remove that before merging.\n. @cheba Strangely master is now broken in Travis, I re-ran the build and it looks still broken after merging this and it bundles locally correctly. Can you check this out to see if we broke something with this PR? \n. What glyphs can be shown will be controlled by what the font supports. Short term your best solution might be to inspect the string code points and use that information to determine what font to use\n\n``` ruby\n=> [72, 101, 108, 108, 111, 44, 32, 87, 111, 114, 108, 100, 33]\nirb(main):002:0> \"\u0645\u0631\u062d\u0628\u0627 \u064a\u0627 \u0627\u0644\u0639\u0627\u0644\u0645\".codepoints\n=> [1605, 1585, 1581, 1576, 1575, 32, 1610, 1575, 32, 1575, 1604, 1593, 1575, 1604, 1605]\nirb(main):003:0>\n```\n\nAlso know that you may need to use another library to build up the string and insert it into prawn, we ran into that with Persian support in #871, I apologize if that's not related I don't know much (if anything) about Arabic (or Persian) so the issues related to it may be totally unrelated, but it was another user who was running into problems with rtl text.\n. I'm totally open to a PR for that.  Do you find yourself using custom styles a lot? I was unaware of anyone doing that. How do you go about doing that? \n. Yes, if you can please post a full code snippet to generate the bad PDF we can check it out.\n. I agree we should add 9k to travis, can you do that? Then we can get the rest of the ready PRs merged.\n\nI'm not sure I mind automatically using the latest version of a supported branch in ruby. I think the logical alternative would be to explicitly label every patch release of ruby we support, which would give us a massive build matrix. Plus we would have to remember to update travis every time there is a new release, which means eventually it will get forgotten.\n\nThoughts?\n. Ah! I thought they automatically pointed at the latest version.\n\nI looked at [the travis docs](https://docs.travis-ci.com/user/languages/ruby/#Choosing-Ruby-versions-and-implementations-to-test-against) and they do mention that the aliases change but they don't necessarily guarantee the latest version.\n\nSo I think you are totally right, lets track the oldest and newest of the branch to keep our build count lower but hopefully cover any edge cases in ruby.\n\nCan you get that set up?\n. @kriztynna I hope to get a release cut within the next week or so, by the end of the year certainly.\n. Thanks!\n. Nice catch! Thanks.\n. Nice, Thanks!\n. Huge fan of the new expect rspec syntax.\n\nCan you please update the commit message to include the intention of dropping mocha and conversion to the new syntax? After that Go ahead and merge this in.\n\nThanks @cheba!\n. :+1: :shipit:\n. Thanks!\n. @cheba I'm not as familiar with the png spec as you (or at all really) so once you are good with the branch go ahead and merge it.\n\nThanks for the help @kriztynna! \n. @kriztynna Because you had a pull request merged, you get commit access! :tada:\n\n[Here are the details.](https://github.com/prawnpdf/prawn/wiki/Contributor-welcome-notes)\n\nThanks again for helping prawn!!\n. [Prawn::View](https://github.com/prawnpdf/prawn/blob/master/lib/prawn/view.rb) was made for just this, it's part of the experimental API but it should give you the interface you are looking for.\n\n``` ruby\n     class Greeter\n        include Prawn::View\n\n        def initialize(name)\n          @name = name\n        end\n\n        def say_hello\n          text \"Hello, #{@name}!\"\n        end\n\n        def say_goodbye\n          font(\"Courier\") do\n            text \"Goodbye, #{@name}!\"\n          end\n        end\n     end\n\n     greeter = Greeter.new(\"Gregory\")\n\n     greeter.say_hello\n     greeter.say_goodbye\n\n     greeter.save_as(\"greetings.pdf\")\n```\n. Some code was pulled out of prawn because it was inherently flawed and we couldn't maintain it.\n\nCan you share some code that used to work that no longer does so I can better understand what isn't working for you anymore please? \n\nThanks.\n. All set.\n. There was a [bug](https://github.com/prawnpdf/prawn-table/pull/60) in [prawn-table](https://github.com/prawnpdf/prawn-table) that looks similar to this that got fixed.\n\nPlease check to see if using master of the prawn-table repo (with the latest release of Prawn) fixes your problem, otherwise please open an issue on that repo.\n\nThanks\n. As a side note, I wrote the [prawn-gmagick](https://github.com/packetmonkey/prawn-gmagick) gem to both solve the performance issues of large transparent PNG images and expand support for other image formats. It uses graphicsmagick and is a compiled native gem [for performance](https://github.com/packetmonkey/prawn-gmagick#speed)\n\nHopefully that helps! Otherwise we are very interested in improving the native png handler as well.\n. I'm not currently aware of what would cause the failure, given how [our CI](https://travis-ci.org/prawnpdf/prawn) is currently green, I'm inclined to think it's related to whatever redhat did to package prawn.\n\nI'm going to go ahead and close this issue but feel free to follow-up if you have more information.\n\nThanks for letting us know!\n. Prawn is mostly for the creation of PDFs where signing I believe is a modification so it probably falls out of scope. With that said if there was an API prawn could provide that would allow an external gem to build that functionality, that could be worth looking into..\n\nThanks for thinking of prawn!\n. Thanks for the pr!\n\nFirst I would like to see an additional spec that would return false to ensure we aren't returning true for all methods, This would work\n\n``` ruby\n it \"returns false for methods the view object does not respond to\" do\n    expect(view_object).to_not respond_to(:nonexistant_method)\n end\n```\n\nI would like to see an entry in the CHANGELOG documenting the change.\n\nWhat code do you think this would break? In case someone was relying on `Prawn::View#respond_to?` always returned false?\n. This looks good to me.\n\n@pointlessone Any reason to not merge you can think of?\n. I can get on board with if we open the IO object, we should close the IO object.\n\nIt looks like the IO object returned from [verify_and_open_image](https://github.com/prawnpdf/prawn/blob/master/lib/prawn/images.rb#L128-L145) is only used to call `#read` on it. Instead of returning the io object itself, we could change `verify_and_open_image` to something like `image_content` (a sort of half extract to method refactoring) to just return the image content and then we could close the IO object in that method if we opened it, as currently only the `verify_and_open_image` method knows if we opened the IO object ourself or not.\n\nIf we memoized the io content returned from `verify_and_open_image` we would just have to delete the [image_content = io.read](https://github.com/prawnpdf/prawn/blob/master/lib/prawn/images.rb#L78) line and be done.\n\nThoughts?\n. This looks good to me (and kudos for diving into the word wrapping code).\n\nCan you mention the bug fix in the change log?\n. I'm not sure I understand a good use case for this, beyond a more OOP design.\n\nDoes anyone have a good example for me to wrap my head around?\n. Adding myself to the issue\n. Adding myself to the issue\n. I merged master into this branch and pushed a copy of it up to the pluggable-parsers feature branch on the prawn repo. I'll open a PR for that branch so we can work on finishing bringing this in.\n. @akidon templates where removed from Prawn because the implementation could corrupt PDFs. The source code for that has been moved to https://github.com/prawnpdf/prawn-templates It's mostly unsupported but it may help you out if your use case is simple enough.\n. Adding myself to this issue as I'm interested as well.\n. I think we may want to consider a much higher resolution than 4 places, the newer retina displays have 401 pixels per inch making rounding differences possibly more apparent.\n\nI may be just being pedantic.\n. Yep, I forgot we are dealing in PDF points and not directly rendered to screen. It's like we are working on a PDF library or something.\n\nMy bad.\n. Adding myself to this issue as I have an interest in seeing this feature as well.\n. I think a good solution may be to clip the text and make it available. This is similar behavior to `#text_box` and lets the programmer decide what to do if the text didn't all fit.\n\nPossibly something like\n\n``` ruby\ntable = Prawn::Table.new table_data, pdf,:column_widths => column_widths\nif table.clipped_text?\n  fail ArgumentError, \"Couldn't fit '#{table.clipped_text.join(',')}' into the table\"\nend\n```\n\nNot the most thought out API but just my initial idea.\n. My goal for the initial PR was to be minimally invasive. The pattern of injecting yourself into a given namespace is also how [Minitest](https://github.com/seattlerb/minitest) lets you add assertions, so I was comfortable using the pattern.\n\nIf we wanted to register the handlers, is there a particular pattern or interface you would want followed?\n. Sounds good, I'll update the code to register the handlers.\n. I went ahead and added `Prawn::Images.add_image_handler` which accepts the class name for the handler so code can reach out to prawn and tell it where to look for the handlers. I used a class variable so you can require a gem adding support once and it will load into all documents you instantiate instead of also requiring the user to add the handler to every document they try to create. I also add the handlers for JPG and PNG when you create a document so we use the same API internally and maintain backwards compatibility for all existing code.\n\nThanks!\n. Great! Let me know if there is anything I can do to help speed it along, I would like to port some other code to use the finalized interface as soon as possible.\n\nThanks again!\n. @sandal Let me know what you think of this version of the patch. When it's ready to go in would you prefer a squashed commit to merge in?\n. :+1:  Looks good to me.\n. @sandal Should I go ahead and rename the `Prawn::Text::Formatted::Parser` to `Prawn::TextFormatter::BasicHTML` ( and any related file names / require paths )? I know we didn't move around the image handlers in my image support PR so I want to make sure, I think it makes sense in this case to make the transition as it's one class and no namespace being used for just this class.\n\nI'm also concerned by the travis build failure that a) appeared for no known reason and b) fixed itself for no real reason.\n\nOtherwise, any thoughts on what's left to get this merged into master?\n. I'm going to hold off on the name change until after RC3 when API decisions will start to be made. \n\nIn the absence of that everything else should be buttoned up, tested and ready for review.\n. 100% agree with the idea, serializing a data structure to PDF and laying out the document itself are two different concerns. I also agree with getting it out there as soon as possible if the plan is to have this change possibly implemented before we release version 1.0.\n\nMy only real concern (baring any discussion about how the API would be developed) is the using of the PDF namespace. As a general rule I try not to take over 'standard' names for things when writing an implementation. There was a similar discussion a while back about the activerecord gem not following the active record pattern in some significant ways and naming the gem after the pattern can cause confusion in those areas.\n\nNone of this is to say that we aren't going to actually be creating PDF's, but it's a red flag that pops up for me when discussing namespaces. I would personally like to see a  `Prawn::Serializer` instance get passed a `Prawn::Document` instance to render the actual file out. That lets us separate features relating to the PDF spec from the API letting users describe their document and keeps us in our own unambiguous namespace.\n. In which case I would suggest `PDF::Core::Serialize` as the main class the outside world interacts with. I'm also drawn to re-using the `PDF::Writer` namespace ( thinking anyone using the pdf-writer gem wouldn't also be using modern prawn) mostly because I like the symmetry of using both `PDF::Reader` and `PDF::Writer` for those actions.  \n\nI then start wondering about how using the Prawn::Document namespace now looks out of place possibly to be replaced with a PDF::Document, which would make sense in the greater scope of things.\n\nOverall this starts to feel a lot like bike shedding however if we are trying to lock in a long term API plan based around namespaces it is probably worth hashing out the long term discussion, however theoretical they sound, before things get merged into master and tied to version releases.\n\nThat or these are the ramblings of a man still half way though a turkey coma.\n. I ran some tests with large PNG files I'm used to dealing with, the full results are at https://gist.github.com/packetmonkey/52190bf68d0666a05a03 but the TL'DR version is that I'm seeing it shave 8.6 seconds on average off large transparent PNG files with negligible impact on opaque PNG files with a lot fewer ruby objects as well.\n. :+1:\n. I'm not a huge fan of the phrasing on\n\n``` ruby\n  text \"If you want, it allows you to specify non standard properties too.\n```\n\nThis implies there are standard properties, of which there aren't any.\n. I'm good with this, I just wanted to make sure nobody got stuck looking for a list anywhere.\n. Here are a few plugins/projects we may want to keep in mind. I have no idea what API's to help do this may look like or if they are even feasible, but I thought I would throw some examples out there to keep in mind while the discussion happens.\n\n## Image handlers\n\nThese are probably supportable via the existing image_handler API possibly with the exception of prawn-svg\n- [prawn-gmagick](https://github.com/packetmonkey/prawn-gmagick/)\n- [prawn-fast-png](https://github.com/amberbit/prawn-fast-png)\n- [prawn-svg](https://github.com/mogest/prawn-svg)\n\n## Templating\n\nSome system for mapping a layout to content implemented in prawn, this works as a simple solution but internally we have a far more complex one that could benefit from some support.\n- [prawn_cocktail](https://github.com/barsoom/prawn_cocktail)\n\n## Widgets\n\nVarious higher level constructs that could possibly be added in a cleaner way than monkey patching our way into the Prawn namespace\n- [prawn_calendar](https://github.com/bwl21/prawn_calendar)\n- [prawn_charts](https://github.com/MrPowers/prawn_charts/)\n- [prawn-graph](https://github.com/HHRy/prawn-graph)\n- [prawn-shadings](http://rubygems.org/gems/prawn-shadings)\n\nAnd lots of other examples on [rubygems](http://rubygems.org/search?utf8=%E2%9C%93&query=prawn)\n. Here is a half dozen examples that I have pulled from actual projects and reformatted to use this proposed #draw style. Most of these examples fall into either abstracting repeating groups of functionality together or more semantic abstractions of larger components, regardless of reuse.\n\nIt should also be noted that in my particular implementations, I have a `DEFAULT_OPTIONS` hash that the passed options get merged into making these components easier to deal with in the more common cases.\n\n## 1. Bordered Image\n\nThis component takes an image, places it on the document, and uses `Prawn::Document#line` to border it.\n\n``` ruby\n@document.draw BorderedImage, x_pos: x,\n                              y_pos: y,\n                              image: image,\n                              height: height,\n                              color: '000000',\n                              border_width: 1\n```\n\n## 2. Bordered Image  with Text\n\nThis component re-uses the above BorderedImage component but will also allow the user to caption the image with text positioned either above or below the image aligning that text either to the left, center, or right.\n\n``` ruby\n@document.draw BorderedImageWithText, x_pos: x,\n                                      y_pos: x,\n                                      image: image,\n                                      height: height,\n                                      color: '000000',\n                                      border_width: 1,\n                                      text: \"Example Text\",\n                                      text_alignment: :top_left\n```\n\n## 3. Color Box\n\nThis is a fairly simple wrapper to set a colored box in a more concise way by setting the fill color, drawing the rectangle and reverting to the previous fill color, all on one line. This is a pattern I use frequently on some documents.\n\n``` ruby\n@document.draw ColorBox, color: 'FF0000',\n                         width: in2pt(1),\n                         height: in2pt(2),\n                         x_pos: in2pt(5),\n                         y_pos: in2pt(5)\n```\n\n## 4. Side Bar\n\nSeveral of my documents have repeating design elements on a number of pages with slight variations, this side bar is one of them. It is identically positioned and sized with a changing background image or solid background color (which in turn uses ColorBox above)\n\n``` ruby\n@document.draw SideBar, color: '000000'\n\n# or\n\n@document.draw SideBar, image: image\n```\n\n## 5. Calendar\n\nI have an in house version of what is practically the [prawn_calendar gem](https://github.com/bwl21/prawn_calendar). It gets re-used on multiple documents as it takes a defined dimension and dates/text and plots them out using `Prawn::Document#table`\n\n``` ruby\n@document.draw Calendar, width: in2pt(10),\n                         height: in2pt(6),\n                         entries: [\n                           {date: #<Date:0x0000>, text: \"Signed\"},\n                           {date: #<Date:0x0000>, text: \"Sealed\"},\n                           {date: #<Date:0x0000>, text: \"Delivered\"},\n                         ]\n```\n\n## 6. User Chart\n\nI also have a component that will take a user, generate a custom [gruff](https://github.com/topfunky/gruff) chart for that user and insert it into a cover page of a metrics document.\n\n``` ruby\n@document.draw UserChart, x_pos: in2pt(10),\n                          y_pos: in2pt(10),\n                          user: user\n```\n\nMost other examples I have off hand are similar groupings to what I showed above, more reused complex table layouts like the calendar or other repeating patterns like the color box.\n\nThoughts?\n. Normally using an external object that accepts the document is exactly how I accomplish all of these currently. Here are a few thoughts on why `Prawn::Document#draw` may be better.\n1. It allows for consistent external / internal subdivisions. For example Prawn::Document::Table is called very similarly. I like the idea of including external code the same way we could include higher level internal code.\n2. I like the idea of providing an explicit method to to nudge prawn users to break up their more complex documents into sub-components.\n3. I was thinking of levering this to register component code, but we already discussed why that's not a great plan on IRC but it did go into my thinking for this PR.\n4. It does give us an opportunity to do things for the component on it's behalf, like possibly abstracting out positioning, fill colors or other more generic needs. This PR itself doesn't do that but by proxying the call though prawn itself it leaves the possibility open.\n\nAlso, this could totally be implemented using the `Prawn::Document.extension <<` api as it's mostly syntax sugar. I have no problem making a prawn-draw gem and going that route.\n. Looking though my components, I think I have at least two patterns that if we could abstract their solution into this call, would simplify the end code as well.\n\n## Child Views\n\nThis I think would be a huge win if we could sort out a good way to do it. Very often I'm breaking up a page into self contained areas, similar to partials in a rails view. However the component must know how big of an area it has to work with and where it is positioned. In my case I'll pass that information in and the component itself will calculate the correct sizes relative to the whole document. If we could optionally scope the whole call to an area of the page, then that arithmetic would be entirely not needed. For example my Sidebar example knows it's 2.5 inches wide, 8.5 inches tall (landscape PDF) and anchored to the left side. If we could adjust the call such to provide that scoping information to prawn, the component itself doesn't have to track that. It just fills 100% width and height of it's space. This becomes even better when we drill down.\n\nFor example I'll have a category, that has multiple columns, that has multiple items, that has multiple text boxes, each inset within each other. That's passing around a lot of numbers and forcing the components track that. if instead each component could just use the max width afforded to it, \n\nNow, this is of course possible by passing those values down into each component successively, which is what I do, but centralizing that translation into once prawn wrapper and removing it from every component would be a very real simplification and not just a nicer looking method call.\n\n## Rollbacks\n\nMany times I'll copy the existing fill color, set a new fill color, then reset the fill color back to the original setting. In some cases prawn allows block versions of methods that do something similar but I don't believe fill_color is one of them. If we had a generic version of that pattern that would scope all state changes like that, we could wrap wrap #call in that to make the components not have to care about cleaning up after themselves, which could be a real nice bonus.\n\nReally it comes down to isolating the state of the document from the state of the component and the area of the component from the area of the document.\n\nAny thoughts on if these are good ideas or how we could implement them in a generic way? Even if we built into core prawn the ability for those global state wrappers and global positioning code the #draw method that calls it could still be a sugar wrapper that gets coded in an external gem and not included in prawn itself.\n. I just pushed up an extra method that gets called in `#draw` called `#preserve_state` which will save and restore the settable methods on the prawn document. I looked though the prawn API and I think I caught all settings that can get changed but I may have missed some.\n\nFor example it now lets this script\n\n``` ruby\nrequire 'prawn'\n\ndoc = Prawn::Document.new\n\ndoc.text 'foo'\n\ndoc.preserve_state do\n  doc.fill_color = 'FF0000'\n  doc.font 'Courier'\n  doc.font_size 24\n  doc.text 'bar'\nend\n\ndoc.text 'baz'\n\ndoc.render_file 'output.pdf'\n```\n\nrender a document looking like this\n\n![screen shot 2014-02-15 at 10 44 11 pm](https://f.cloud.github.com/assets/4451/2179579/a0d34914-96bc-11e3-8f17-e9490e41a931.png)\n\nThis is the first step in better isolating components. The next step I'll play with is what we discussed in IRC with a proxy object. I didn't test this code as it's more proof of concept at this point for discussion, if we get ready to merge I'll get test written but for now don't merge.\n. This issue was left open to see if there was a better solution for this problem than the prawn-grouping gem. It looks like nobody has come up with one and it's solving real issues so I created a [Related Gems](https://github.com/prawnpdf/prawn/wiki/Related-Gems) wiki page and added it there for people to find it (with some other gems I know about off hand).\n\n@ddengler if there is anything in Prawn we could add to make implementing your gem easier, let us know. Happy to help extend the prawn ecosystem.\n. I took a quick look at this, it is straight forward enough to add to the .travis.yml via\n\n``` yaml\nscript: 'rake manual default'\n```\n\nWhich would run the manual task before the default (rubocop & rspec) task. However on a whim I inserted an uncaught exception into the manual, and I do see the error on the console however the build continues with an example.pdf being generated and the exit status being 0. This is going to make tying it into the build more difficult than a simple chained rake task.\n\nAny ideas on how to handle this? My thought is to modify the [eval_code](https://github.com/prawnpdf/prawn/blob/master/manual/example_helper.rb#L231-L251) method to exit with a status code of 1, in addition to printing the error message as it exists, which would prevent the manual from being generated break the build.\n. Note that as far as #664, I did not do the license reference check when adding rubocop, so we may want to open a new issue for that check specifically if/when this gets merged.\n. The build passes.\n@sandal good to merge and open a license check specific issue?\n. I glanced though it and didn't see anything specifically requiring ascii 8bit, and the tests all passed. I'll double check again.\n. I see nothing encoding in a string in the actual ruby file that isn't read in from a source and utf-8 should be backwards compatible with ascii-8bit. \n\nHowever, looking at the history of images.rb I do see 815320eb6d4fa168924ff6556d45be2596be6602 which is a commit you did ~6 years ago adding the 8bit encoding header (replacing utf-8 in fact) but no explanation as to why.\n. We can revert it for the specific files we are worried about and ignore them in the rubocop configs for as long as we are concerned. It would be worth following up then to make sure we aren't implicitly relying on that encoding and eventually make it consistently UTF8 across the board I think.\n. Interesting it looks like the failures are coming from Rubocop but when I merged that code I disabled all the cops that caused any failures and are slowly turning them on in PR's that enable the cop and fix any problems. \n\nWhen I clone your branch and run the tests I don't see the failures on my end.\n\nThe `UnusedBlockArgument` was included in the repo 16 days ago and 0.21.0 was released 4 days ago. So I badly included the rubocop dep in the gemspec without locking to a version. Then the new cop was added which failed on the current code, which is how your simple PR caused failures where a few weeks ago it would have been fine.\n\nI'll lock the gemspec to the specific version of rubocop I tested against, then you should be able to rebase your PR which should make the tests pass.\n\nI'll update again in a few minutes when I have that sorted out for you.\n. @donv I fixed this in bf8bc54dee3e41d655c4be09fbbdf23e9cf13f25 on master. Lets see if that clears up your PR.\n. I'm just waiting for the Travis CI to pass to 100% make sure I got the fix right\n. So I dropped everything and looked over this PR, loving the idea.\n\nI personally would like to see the various classes defined in their own files to make things easier it find.\n\nIt looks like to me you are using PDFColor as an abstract class ( as commented ), I wonder if instead of returning values that aren't ment to really be used in the system, those methods should raise `NotImplementedError` instead. That's a higher level style decision @sandal should sign off on I imagine.\n\nAlso not sure about presenting CSS color as the 'standard' as inferred in `manual/basic_concepts/css_colors.rb` but for a new user that may make the learning curve easier, and it's not like we dropped support for the other forms.\n\n:+1: from me having not yet pulled the branch down and played with it myself.\n. Also are there specs in this PR for the new code or am I just not seeing them?\n. How does naming the option \"break_words\" defaulting it to true for backwards compatibility sound?. That would make the call look like this\n\n``` ruby\ntable = pdf.table(data, cell_style: { break_words: false })\n```\n\nIn InDesign there is a similar feature for hyphenating words and you can uncheck the hyphenation on a chunk of text, but we don't actually inject a hyphen I believe. Otherwise `{hyphenate: false}` would read well.\n. I tweaked the API so this now works\n\n``` ruby\n    io = File.open \"#{Prawn::DATADIR}/fonts/DejaVuSans.ttf\"\n    @pdf.font_families[\"DejaVu Sans\"] = {\n      normal: Prawn::Font.load(@pdf, io, format: 'ttf')\n    }\n```\n\nI had to leave the default font AFM because changing it to TTF caused a lot of tests to break when it Prawn couldn't find the Helvetica font, but I may have made that change in error.\n\nRegardless this removes the `format` symbol from the font_families hash and will just try to use whatever Prawn::Font instance got passed, which in turns takes an IO object, which in turn uses TTFunk's IO support.\n\nI feel like we are getting fairly close here, any more thoughts about the TTF default breakage or anything else?\n. I also suspect the broken tests is due to an un-locked dependency on rspec, they released version 3 recently and I think it's backwards incompatible.\n. This commit will default any src with a `#read` method to the 'ttf' format. I decided to look for a `#read` method as opposed to a `String` class as according to the spec files we can also pass in a `Pathname` so as a last resort we cast the src to a string and check for a file extension.\n. @sandal are there any other changes you would like to see on this PR? I would love to get this merged before the next release tentatively scheduled for next sunday.\n. Sounds good, I just want to make sure you aren't waiting on anything from me to get it done.\n\nThanks!\n. Done\n. The image code has been updated a lot since 0.12.0, it expects either an IO object or a file path, what is happening is your uploader isn't acting like an IO object so Prawn tries to open the file at a given path, which is when it tries to implicitly convert your uploader to a string.\n\nIn my projects that use Prawn and ActiveRecord + CarrierWave I usually add them like so\n\n``` ruby\nrequire 'open-uri'\ndocument.image open(model.asset.url)\n```\n\nWhich will pass in the open-uri IO object and allow everything to work. Prawn has had this behavior for a while so I would suspect that CarrierWave unloaders may have used to act like IO objects and now don't, but I haven't used CarrierWave for over a year so I'm unfamiliar with the old behavior.\n\nHopefully this helps, if it doesn't please post the full stacktrace of the error because if passing in an actual IO object doesn't work, then it's a bug.\n. No but I'll fiddle with it then get it in master\n. In the past when I have had similar problems with a specific character not displaying correctly, it was because the font being used didn't support the specific character being used. \n\nI would in your rails console do something like\n\n``` ruby\nPainting.find(model_id).name == \"\u00d6l auf Leinwand\" # => true / false\n```\n\nWhere the string comparison is typed out to 100% ensure the string pasted in the db is the same as when you type it out.   Because the font does appear to display the letter I would try to ensure that the original document is in fact an exact duplicate.\n\nShort of that I'm not sure at first blush.\n. This addresses the main reason I never subclassed `Prawn::Document`, I may try to port some documents to this style as a more rounded test.\n\nIs there any concern/possible confusion in providing the `#save_as` method that isn't available in `Prawn::Document` as opposed to just calling `#render_file`?\n\nI would also like to see an dependency injection in `document` like\n\n``` ruby\nmodule Prawn\n  module View\n    DOCUMENT_CLASS=Prawn::Document\n    def document\n      @document ||= DOCUMENT_CLASS.new\n    end\n  end\nend\n```\n\nthat can be called like\n\n``` ruby\nclass MyDoc\n  include Prawn::View\n  DOCUMENT_CLASS=MyProxyDoc\n\n  # Other methods\nend\n```\n\nAs it allows for proxy objects around the document. In the past I have used that pattern for transforming measurements in inches into PDF points and to mock calls for testing. It would be a responsibility of the proxy object to in-turn handle method_missing and do whatever it wants before handing off the calls to a document. (We could be super helpful and provide a `Prawn::DocumentProxy` if we want, I have written that code like 3 times it seems so it may be useful).\n\nHappy to commit this into the branch if you agree, or have other thoughts.\n. Doh, yeah that totally works because it's mixed into the current class so you can just redefine the method.\n\nIt looks good to me, I'll still give it a go on a project here to see how it shakes out for me on a real project but I dig it without any changes now.\n. If you have imagemagick or graphicsmagick installed (with ghost script support sometimes needed) you can convert a pdf into an image. \n\nOn the command line `gm convert input.pdf output.jpg` is usually all you need. (for graphicsmagick)\n\nNote that this syntax will only convert the first page of a pdf, if you want others you can select which page you need.\n\nAnother option is taking the outputted PDF and piping it into pdf-inspector and checking for the existence of text on a given page, depending on specifically what you are trying to test.\n. This looks good to me, @sandal can you :+1: the extra development dependency? \n. Yep, I just wanted to double check as we are more strict with deps than most projects.\n. I know the PDF spec supports zoom levels, but I don't think we have native support for that in Prawn. May be worth adding that to PDF::Core instead of Prawn\n\nI'm also not sure we have a good way to allow end users to hard add PDF statements into a given document, that could possibly be a good stop-gap solution to give a lot of flexibility in using PDF features not implemented in prawn.\n\n@sandal Is there an API I'm missing for modifying pdf structures on the raw level?\n. Sure, I'll try to get that test run today or monday depending on meetings. I have a few fairly complex dynamically calculated products (using a lot of dry runs) that would hopefully ferret out any major problems.\n. I just compared a fairly complex document that uses a lot of dry-runs to calculate heights and dynamically position elements on the page. After eyeballing it and also using xscope to independently check the measurements on screen, everything looks identical to me on the decimal rounding branches. I asked someone else spot check it as well and she found nothing wrong either.\n\nMy tests also continued to pass which includes tests to make sure that the dimensions of various elements are calculated correctly, which shouldn't be (and weren't) impacted by this, but it was comforting to continue to see none the less.\n. I ran this test script with prawn 2.0.2 and we are [now throwing an exception](https://github.com/prawnpdf/prawn/blob/master/lib/prawn/images/png.rb#L70-L73) for transparent palleted PNG files added in 8ebe28228b013627224e69f2133722389bced545\n\n``` console\n ~/Code/prawn-png $ ruby prawn_test.rb\n/Users/evan/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/prawn-2.0.2/lib/prawn/images/png.rb:71:in `block in initialize': Pallete-based transparency in PNG is not currently supported. (Prawn::Errors::UnsupportedImageType)\nSee https://github.com/prawnpdf/prawn/issues/783\n    from /Users/evan/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/prawn-2.0.2/lib/prawn/images/png.rb:45:in `loop'\n    from /Users/evan/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/prawn-2.0.2/lib/prawn/images/png.rb:45:in `initialize'\n    from /Users/evan/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/prawn-2.0.2/lib/prawn/images.rb:87:in `new'\n    from /Users/evan/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/prawn-2.0.2/lib/prawn/images.rb:87:in `build_image_object'\n    from /Users/evan/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/prawn-2.0.2/lib/prawn/images.rb:66:in `image'\n    from prawn_test.rb:4:in `block (2 levels) in <main>'\n    from /Users/evan/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/prawn-2.0.2/lib/prawn/document.rb:225:in `instance_eval'\n    from /Users/evan/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/prawn-2.0.2/lib/prawn/document.rb:225:in `initialize'\n    from /Users/evan/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/prawn-2.0.2/lib/prawn/document.rb:141:in `new'\n    from /Users/evan/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/prawn-2.0.2/lib/prawn/document.rb:141:in `generate'\n    from prawn_test.rb:3:in `block in <main>'\n    from prawn_test.rb:2:in `each'\n    from prawn_test.rb:2:in `<main>'\n ~/Code/prawn-png $\n```\n\nSo we won't kick out known bad PDFs and I'm still open to a PR that will implement native palleted PNG transparency support.\n\nClosing the issue.\n. Thanks!\n. We use both the built in fonts and additional fonts. I have a lot of mock data with letter accents. All of my text gets added via a call to `#formatted_text_box`.\n\nI'll give it a look over and see if I trip into anything.\n. (accidentally submitted incomplete)\n\nIf I where to swing at this problem, I would probably come up with something similar to below\n\n``` ruby\nclass Prawn::RGBColor\n  def initialize(value)\n    @value = value\n  end\n\n  def to_pdf\n    # return PDF serialization\n  end\nend\n\nclass Prawn::CMYKColor\n  def initialize(value)\n    @value = value\n  end\n\n  def to_pdf\n        # return PDF serialization\n  end\nend\n\nmodule Prawn\n  def color(val)\n    case val\n    when Prawn::RGBColor\n    when Prawn::CMYKColor\n      return val\n    when String return Prawn::RGBColor.new(val)\n    when Array return Prawn::CMYKColor.new(val)\n    else\n      raise ArgumentError, \"cannot handle color type #{val.type}\"\n    end\n  end  \nend\n```\n\nThat way you can set up your own PDF Color externally however you like and just pass it in. We could also loosen it up to accept any object that responds to to_pdf so we can accept any pdf serializable object. This solution may take more refactoring than we would like and I think we could solve similar problems to the pull request #724 trying to add additional ways to set colors.\n. I would think simplest to understand solution would be to expect 6 hexadecimal characters, without the leading hash as the only option. If we support the leading # that could let the developer think other things more html-like are available, like the CSS shortcut of using 3 characters if they repeat (like using 'ABC' instead of 'AABBCC').\n\nIt's also really easy to test for and we can raise an error if we get passed an invalid format to help guide the developer.\n. Sure I'll get a PR for this pulled together.\n. This totally dropped off my radar, I'll try to knock it out this weekend but I won't feel hurt if you beat me to it.\n. Going to assign the issue to myself so it shows up on my GH dashboard.\n. Thanks for the fix!\n. @sandal Are we good to officially add 2.2.0 to travis? Once this goes in I'll do a similar PR to pdf-core and ttfunk\n. 1.9.3 is already not receiving maintenance updates and is only getting security patches until Feb 23, 2015, so that is probably a reasonable plan.\n. Support for templates was removed in prawn 0.13.0, the way it was implemented was fundamentally flawed. You can either use an older version of prawn if your use case is simple enough to not run into the myriad of bugs, or you would probably be better suited to use another tool\n\nThe old template code was extracted into the [prawn-templates](https://github.com/prawnpdf/prawn-templates) gem but it's unmaintained.\n. Thanks!\n. @sandal I bundled this branch as the version of Prawn used by my print on demand site and it didn't break any of my tests either.\n. Thanks for the fix!\n. Looks good, thanks for the tweak!\n. Can you please include a runnable script for us to reproduce the issue with?\n. Seems reasonable, thanks!\n. Can you please provide links to both fonts you are having a problem with and a script to reproduce the issue? \n. I don't have access to a windows machine to get a copy of the fonts so I can try to reproduce the problem. \n\nI suspect we will find the problem is rooted in [ttfunk](https://github.com/prawnpdf/ttfunk) which is the library prawn uses to deal with ttf fonts. Can you either help me find where I can get a copy of the fonts or confirm that ttfunk is able/unable to work with these specific fonts?\n. Glad to hear you came up with a solution!\n\nI'll close this issue as it wasn't a prawn bug but ttfunk related. I would be happy to look at a PR to implement that functionality on the ttfunk side so the original font worked out of the box. Without the actual font file and spending some time in the TrueType spec, I won't be able to patch ttfunk myself.\n\nThanks for the update!\n. Hey C\u00e9dric, thanks for the fixes. I would like to see a couple changes though before I'm comfortable pulling this in.\n1. Can you add an entry to the changelog for these changes and include links to the original debian bugs.\n2. Can you include tests for these changes so we don't break them in future updates and know why that code is needed\n3. I'm not super happy with the [logic figuring out the last_update for the cover](https://github.com/prawnpdf/prawn/blob/reproducible_build/manual/cover.rb#L26-L34). I think I would rather like to see something more obviously defaulting to the git repo latest commit, then falling back to Time.now allowing it to be overwritten by the BUILD_EPOCH environment variable.\n\nMaybe something like\n\n``` ruby\nif Dir.exist?(\"#{Prawn::BASEDIR}/.git\")\n  commit = `git show --pretty=%h`\n  git_commit = \"git commit: #{commit.lines.first}\"\n  last_update = Time.at(`git log -1 --pretty='%ct'`.to_i)\nend\n\nunless last_update\n    git_commit = \"\"\n    last_update ||= Time.now\nend\n\nif ENV['BUILD_EPOCH']\n  last_update = Time.at ENV['BUILD_EPOCH'].to_i\nend\n```\n\nThat way the cascade of options is more obvious.\n\nThoughts? \n. This looks good to me and fixes the issue. I'll merge it with the stripped change log.\n\nThanks Jesse!\n. I'm going to leave this open until next wednesday to give anyone else an opportunity to discuss this. As of right now I plan on merging this PR then and beginning the 6 week release cycle.\n\nThanks for the :+1: @jessedoyle \n. I'm going to go ahead and run with this plan. I'll plan to cut the next release in 6 weeks which currently is around June 19th.\n. Good call, I actually have been meaning to check out https://coveralls.io for code coverage as well, but Code Climate could also work.\n\nThere is simplecov usage in the spec_helper, but I always forget it's there, which makes it an ideal thing to tie into CI.\n\nIf you feel up to it give it a shot! This is probably something we should do just to see if there are any more gaps in coverage.\n. Long term I expect a lot of them to go away. \n\nThey seem to break down into 3 main groups\n- 95% Long test names\n- ~10 Long exception messages\n- ~2 Long strings related to formatted text parsing\n\nI expect to refactor the spec suite so we use more context blocks and fewer really-long named tests.\n\nThe text parsing in lib/prawn/text/formatted/line_wrap.rb and lib/prawn/text/formatted/parser.rb I'll probably leave alone until a possible future where we add better support for pluggable text formatters. That leaves roughly 10 the long exception strings which do fall more on the side of documentation and may be worth looking into.\n. I'm going to go ahead and merge this in to keep making progress on the general consistency/cleanup.  Feel free to open an issue or PR to talk about where we could use heredocs to clean things up further!\n. Nice! Thanks for the PR!\n\nFirst off please add an entry to the change log so we can doc the updated behavior.\n\nAlso I'm not sure that checking for the length of the string will be enough, as someone could say pass `EEFFGG`. What do you think about updating the logic to\n\n``` ruby\nwhen String\n  if color =~ /\\A[0-F]{6}\\z/i\n    :RGB\n  else\n    raise ArgumentError, \"Unknown type of color: #{color.inspect}\"\n  end\n```\n\nThanks again!\n. Hey I missed that you updated this branch, if you are still interested in getting it in I'm open to merging.\n\nThanks!\n. I suspect the [ttfunk](https://github.com/prawnpdf/ttfunk) library may be having problems with your font. In order to reproduce and begin trying to fix it, we need a script that reproduces the problem and a copy of the ttf font you are trying to use.\n\nI also don't know Persian so some example of what you expected to see would be helpful.\n\nEven after all that it may be hard to track down, but that should at least give us a chance to sort out what is going on.\n\nOther people with similar problems have converted/imported their font using other TTF tools and that appeared to fix the problem for them, it may work for you as well. Otherwise an update to Prawn/TTFunk may be needed.\n. What kind of API would you expect for this? I'm not opposed to some kind of text filtering API but looking at the readme for persian-bechasboon, it looks like the problem could be solved with that gem.\n\n``` ruby\nrequire 'prawn'\nrequire 'persian-bechasboon'\nPrawn::Document.generate(\"persian.pdf\") do\n    text_direction :rtl\n    font(\"/path/to/persian/font.ttf\") do # For example: B Nazanin\n        text \"\u062f\u0631\u0648\u062f \u062f\u0646\u06cc\u0627\".connect_persian_letters\n    end\nend\n```\n\nDoes that fix the problem for you? If in theory every time `Prawn::Document#text` was called with a string that you called `#connect_persian_letters` would the problem be handled?\n. What API or functionality would you like to see added to prawn to make using your gem with it more seamless?  I would like to avoid building in support for a lot of special cases but am open to adding APIs that let gem authors extend prawn to handle their use case.\n. I can get on board with an api to hook in better text processing for those languages, I completely agree it's a valid use case that can be better handled.\n\nThe short term workaround would be to write code such as\n\n``` ruby\nrequire 'prawn'\n\nPrawn::Document.generate('output.pdf') do |pdf|\n   pdf.text \"\u062f\u0631\u0648\u062f \u062f\u0646\u06cc\u0627\".connect_persian_letters\nend\n```\n\nBut ideally  you would like to see something like\n\n``` ruby\nrequire 'prawn'\nrequire 'prawn-persian-bechasboon'\n\nPrawn::Document.generate('output.pdf') do |pdf|\n   pdf.text \"\u062f\u0631\u0648\u062f \u062f\u0646\u06cc\u0627\"\nend\n```\n\nAm I understanding correctly?\n. I agree, this now sounds like the best long term plan.\n\nFeel free to open any new issues or PRs with specific changes that need to be made in order for PDF::Core/Prawn to use whatever code ends up being written to support those use cases. \n\nI'll close this issue for now as there are no directly actionable things in it. I'm exciting to see what language support we can add.\n. Yep that sure does look like a bug.\n\nAt my initial glance though the code the [#shrink_to_fit](https://github.com/prawnpdf/prawn/blob/master/lib/prawn/text/formatted/box.rb#L499-L519) method is looking to catch a `Prawn::Errors::CannotFit` exception to know that the text isn't fitting. It expects the [wrap](https://github.com/prawnpdf/prawn/blob/master/lib/prawn/text/formatted/wrap.rb#L45-L71) method to throw this exception which internally uses the [line_wrap](https://github.com/prawnpdf/prawn/blob/master/lib/prawn/text/formatted/line_wrap.rb#L38-L55) method which calls eventually [#update_output_based_on_last_fragment](https://github.com/prawnpdf/prawn/blob/master/lib/prawn/text/formatted/line_wrap.rb#L198-L202) to throw the exception if the line does not fit. So my initial thoughts are [this calculation](https://github.com/prawnpdf/prawn/blob/master/lib/prawn/text/formatted/line_wrap.rb#L200) is what is forgetting to take into account the character spacing.\n\nThe logic there is a bit dense but it's as good a place to start as any. I'll try to see what I can sort out but at least I'll start with a failing test case on a PR while we try to sort though it.\n. @iamjohnford I'm not sure if that is the same bug or not, it could be related to something in the text formatter for inline formatting, where @obfuscoder is probably just failing to a account for a variable when calculating the width. I'm unsure for now.\n. Thanks for this! because of how important the spec suite is I'm going to very carefully look over the diff to make sure I don't see anything weird, but in concept I have no problem merging this once I have had a chance to dig though it.\n. Do you think it would be possible to split this up into smaller PRs? That way we could review and merge them into smaller chunks instead of waiting until a giant review is done and possibly increase the risk of missing something.\n. I was thinking per-file maybe, but really the problem is I can't revirew them all at once. but I don't have to.\nI created a list for every file in the PR and as they get reviewed they can be marked off. \n\nI'll keep this list up to date as I go.\n- [x] spec/annotations_spec.rb\n- [x] spec/bounding_box_spec.rb\n- [x] spec/column_box_spec.rb\n- [x] spec/destinations_spec.rb\n- [x] spec/document_spec.rb\n- [x] spec/font_metric_cache_spec.rb\n- [x] spec/font_spec.rb\n- [x] spec/formatted_text_arranger_spec.rb\n- [x] spec/formatted_text_box_spec.rb\n- [x] spec/formatted_text_fragment_spec.rb\n- [x] spec/graphics_spec.rb\n- [x] spec/grid_spec.rb\n- [x] spec/image_handler_spec.rb\n- [x] spec/images_spec.rb\n- [x] spec/inline_formatted_text_parser_spec.rb\n- [x] spec/jpg_spec.rb\n- [x] spec/line_wrap_spec.rb\n- [x] spec/measurement_units_spec.rb\n- [x] spec/outline_spec.rb\n- [x] spec/png_spec.rb\n- [x] spec/reference_spec.rb\n- [x] spec/repeater_spec.rb\n- [x] spec/security_spec.rb\n- [x] spec/soft_mask_spec.rb\n- [x] spec/span_spec.rb\n- [x] spec/stamp_spec.rb\n- [x] spec/stroke_styles_spec.rb\n- [x] spec/text_at_spec.rb\n- [x] spec/text_box_spec.rb\n- [x] spec/text_rendering_mode_spec.rb\n- [x] spec/text_spacing_spec.rb\n- [x] spec/text_spec.rb\n- [x] spec/text_with_inline_formatting_spec.rb\n- [x] spec/transparency_spec.rb\n. I _finally_ managed to get though this PR. Thank you for opening it and I'm ready to merge it. The spec suite is important and it's helpful to keep it up to the current RSpec best practices.\n\nSorry it took so long!\n\nOnce @practicingruby grants me permissions to modify the Contributors group, you will get commit access to prawn because you had a pull request merged. Here are [the details](https://github.com/prawnpdf/prawn/wiki/Contributor-welcome-notes). Thanks again for helping prawn\n. You have been added to the contributors group, thanks again!\n. Prawn doesn't currently support kicking out anything other than a standard PDF. I would be happy to consider a PR to add support  but that's probably a bit ambitious given the current state of the codebase. I don't believe we currently set the trim box or bleed box on our output PDFs nor do we have anything in place to prevent a user from adding an RGB image for example.\n. @fidothe neat! Really looking forward to that Gist. Maybe we can add some API's to make what you had to do more straightforward and possibly documented. I'll re-open this because it looks like there is a chance this can work :)\n. Thanks @fidothe !\n\nI'm going to go ahead and re-close this issue as we don't natively support this still. However I think there is opportunity to implement a lot of what @fidothe did as native API's making doing similar work much easier.\n\nThere are some easier wins such as adding built in support for setting the trim and bleed boxes, OutputIntent's and allowing the overriding of the version strings. \n\nI would be interested to hear from you @fidothe on what would have made this easier. There could possibly be a Prawn::PDFX/PDFA in the future.\n. I agree with @cheba that it doesn't feel right to be in Prawn. One solution may be to use ruby's open classes to define the method yourself and use it such as\n\n``` ruby\nmodule Prawn\n  module Measurements\n    def px2pt(px)\n      return px * 0.75\n    end\n\n    def pt2px(pt)\n      return pt / 1.333333\n    end\n  end\nend\n```\n\nI'm also open to a possible API extension to allow people to add their own measurements for ease of use. This could enable the creation of a prawn-pixelpoint gem (or whatever) that anyone who needs the functionality can require in, which I believe would help your use case @mojavelinux in addition to letting people support whatever they need (my next project is now going to use furlongs just so I can say it in meetings). But I'm not sure what benefit it would provide beyond option 1 other than possible name collisions but I think the developer should be aware of that anyway.\n\nI think option 1 works, can be packaged as a gem and depended on, and it keeps us from becoming a giant warehouse of every possible conversion for every use case.\n\nFull working example\n\n``` ruby\nrequire 'prawn'\n\nmodule Prawn\n  module Measurements\n    def furlong2pt(furlongs)\n      furlongs * 7_920.004 * 72\n    end\n  end\nend\n\n\nPrawn::Document.generate 'output.pdf' do\n  extend Prawn::Measurements\n\n  x       = in2pt 3\n  y       = cm2pt 7.620\n  width   = yd2pt 0.083\n  height  = furlong2pt 0.000379\n\n  stroke do\n    rectangle [x, y], width, height\n  end\nend\n```\n\nThoughts? I'll reopen the PR while we come up with a solution that works for everyone. \n. It sounds like everyone's use case is handled by adding methods to Prawn::Measurements themselves and if it's super useful feel free to create a gem and let the mailing list know to claim your unit conversion helper method glory!\n\nIf someone wants to open a new PR updating the documentation to help make this point clearer, I would be happy to check it out.\n\nThanks for the discussion everyone, re-closing the PR. \n. @henrik @joakimk You may want to check out the prawn-gmagick gem I wrote, it won't avoid loading the image content into memory but I do the pixel extraction in a C ruby extension using graphicsmagick that may help your render execute faster and with less overhead, but still quite a bit at this size.\n\nI use it to load multiple 100+ MB files into PDFs without too much trouble on other projects so it may help you out here.\n. Closing this as I messed up my rebase to try again.\n. Not currently,  [PDF::Core:: DocumentState](https://github.com/prawnpdf/pdf-core/blob/master/lib/pdf/core/document_state.rb) implements [#insert_page](https://github.com/prawnpdf/pdf-core/blob/master/lib/pdf/core/document_state.rb#L49-L53) which is called from [Prawn::Document#start_new_page](https://github.com/prawnpdf/prawn/blob/master/lib/prawn/document.rb#L231-L286) calls but nothing to do the reverse.\n\nI'm curious, what is your use case for removing a page you would have added previously?\n. The release policy was merged in #846 which started the 6 week timer which ends on June 19th so I currently plan on cutting a release that weekend.\n\nHope that helps!\n. I'm good with this change in principal. I do need a few changes to be made first\n- Please fix the failing rubocop test\n- Please add an entry to the change log documenting that we are using the new hash syntax in the manual\n- Currently the `HashSyntax` rubocop cop is disabled. Please configure it to be enabled for the manual directory.\n\nOnce that is done I'll pull down the branch and ensure that the manual still builds and really deep dive on the PR, but that should be all the changes that need to be made.\n. Can you please rebase your branch so that it can merge into master without a conflict? Then we should be able to review this change and get it in.\n. I looked over the PR and it looks good, I also checked it out locally and successfully built the manual. Can you please do a manual comparison between your generated manual and compare it to the [currently public manual](http://prawnpdf.org/manual.pdf) to make sure nothing looks totally off? Normally that is done during the release process and takes about 20 minutes to just compare page by page to make sure nothing looks totally wrong.\n\nOnce that last visual check is done this is good to merge.\n. Thanks for the info @mogest, to be honest I'm not 100% comfortable with that code or that part of the spec so I'll take your word at that it's wrong :)\n\nMy first question is would implementing your change break backwards compatibility? If so we would need to implement your fix in a way that we can enable the new correct behavior while preserving the old behavior until we release Prawn 3.0 and remove the deprecated wrong code.\n\nI would say throw open a PR so we can look over what you have and see what can be done. I'll try to become more knowledgeable about the area as well so we can come up with the right solution.\n. This issue can now be closed after the merging of 894. Thanks!\n. @Superpencil Cool! Prawn currently supports TTF fonts using our ttfunk library, if you develop an OTF library it would be a big win to add support for that into prawn. We probably will want to end up adding some extension points into the prawn font handling code so you (or anyone else in the future) can add the font support needed.\n\nI'm going to go ahead and close this issue. Feel free to open a pull request with any changes you think need to be made to prawn to support your efforts and we can work though it.\n\nGood luck!\n. My main concern with this, beyond trying to find the time to truly understand this change, is any backwards compatibility implications.\n\nFrom my basic understanding, it looks like it a user could be relying on the broken behavior of their gradient's not being rotated, and this change would alter their behavior if they upgraded.\n\nAm I understanding correctly?\n. I was thinking something similar. For that to work we would have to let users opt into the new correct behavior, deprecate the old broken behavior, then when we release prawn 3 at some point in the future we can remove the old code and the logic for handling it's optional use and just use the correct new behavior. \n\nI don't believe Prawn has done something like that before so I want to make sure that a breaking change is transitioned correctly, there are a lot of people possibly using the bad behavior and not knowing it.\n\nThe other option is that merging this PR necessitates the next version of prawn released is 3.0, but I'm not personally comfortable releasing a breaking 3.0 right now so soon after 2.0.\n\nI would love ideas and any discussion on the ramifications of those choices.\n. I think this sounds like the best plan, lets make the new behavior opt-in for now and when we cut prawn v3 we will make it the default behavior and remove the old.\n\nThis also introduces a new question, how do we mark it as deprecated. I'm inclined to throw a `Kernel#warn` call in the legacy code path with a link to a wiki page describing the change and what they should do to enable the new behavior. Normally I would also mark the method as deprecated in the docs but we aren't changing that, so we may want to add a note there as well in case they look at the docs.\n\nThoughts? \n. Alright I took some time to check out the branch and play with it. Everything is looking good in my tests when I used a scale block and a rotate block. \n\nI think this is working as good as it can be.\n\nI went ahead and set up the [wiki page](https://github.com/prawnpdf/prawn/wiki/Gradient-Transformations). I'm open to any feedback / edits on making that easier for developers to understand as this is the first time we are really executing a deprecation migration plan in Prawn, so if there is a precedent we want to set, now is the time.\n\nI'm looking for another :+1: or two but I think this is ready to go in, for sure before the next prawn release.\n\n@cheba Agree? \n\n@mogest Just throwing it out there that you rock :) Thanks a _ton_ for pulling this together.\n. @mogest Also please add an entry to the CHANGELOG for this.\n. Aaannddddd merged :)\n\nAll glory to prawn-svg \n\n![giphy](https://cloud.githubusercontent.com/assets/4451/9204922/1c73f846-402d-11e5-8c8e-205ba496420c.gif)\n\nThanks again!\n. Feel free to open a PR upgrading Prawn to the latest version of RSpec. Assuming that goes well we can look at this PR again.\n. Can you please provide a complete script that reproduces the problem, that's a weird situation and I want to make sure I see the same thing you are.\n. We want to avoid inserting random data into PDFs if at all possible. It means if we run the same PDF generation script twice we will get different files out the other side which leads to other issues with packaging files generated by Prawn.\n\nCould we tweak the key generation to check for existence, and if so increment our counter?\n\nI'm thinking something like this\n\n``` ruby\ndef generate_unique_id\n  init = @document.font_registry.size + 1\n  key = :\"F#{init}\"\n  while @document.state.page.fonts.keys.include?(key) do\n    init += 1\n    key = :\"F#{init}\"\n  end\n  key\nend\n```\n\nThis way it's deterministic. Does that solve the problem?\n\nAlso can we add a spec that would have previously added a duplicate font id so we can ensure that the no-duplicate font key code keeps working?\n\nThanks!\n. I'm not sure I understand why the inclusion in the subset causes a problem with my suggested implementation. I may not be paying close enough attention.\n\nWhat does this proposed diff have that my proposed diff doesn't? \n. I keep going back and fourth on this issue. You totally have a legitimate problem that needs to be resolved in order to provide functionality I want to let you provide, however this is adding complexity and functionality that prawn natively doesn't need to do it's job on it's own.\n\nI think the correct answer here may be dependency injection.\n\nIf Prawn provides a way (as an experimental non-semver binding API while we work though this) to provide your own font ID generator, we can keep the simple use case as our default, but allow you in prawn-templates to set your own more complex generator, do you think that could help?\n\nIt also means as your use case evolves or you find other bugs, you can fix it yourself without worrying about keeping Prawn up to date.\n\nI'm not sure what this would look like yet but I'm throwing the idea out there. I suspect this won't be the only time we need to do this kind of integration, and moving in that direction could allow us to provide similar hooks for other deeply integrated plugins people way want to add to prawn.\n\nThoughts?\n. In thinking about the discussion @practicingruby referenced, I too now think this may be better solved in PDF::Core, for the mentioned reasons. \n\nPart of my thoughts for why this makes sense is like above, you can't really write a test in prawn for the new behavior, but you could totally write the test for PDF::Core for the new behavior, which suggests to me that's the correct spot for this.\n\nIn general I'm also in favor of more substantial plugins like prawn-templates using more of the lower-level PDF::Core methods than trying to thread everything though Prawn which is supposed to be a higher level abstraction over PDF::Core, so this helps keep Prawn in the realm of 'easy to use PDF Generation' and out of the \"Solve everybody's PDF implementation needs\" realm.\n\nSo this plan is currently the top \"Feels good\" option to me at least.\n\nWhat do you think @bvogel ? I also agree lets get this wrapped up before I cut the next release so I don't leave you blocked for a whole new release cycle. \n. I am fairly swamped right now so the best solution probably would be you to take a swing at this.\n\nA good first step may be to define a `PDF::Core::Fonts` module and include it in [core.rb](https://github.com/prawnpdf/pdf-core/blob/master/lib/pdf/core.rb)\n\nFor now PDF::Core is just an internal dependency of Prawn, and no API is guaranteed between releases so we can be a little more flexible getting something going and changing it in the future if we figure out a better way to go about things.\n. I'm going to open with that I'm not 100% comfortable with the font code here, so some of these ideas may turn out to be horrible :)\n\nWhile the majority of the font code probably should move down to PDF::Core, for your specific need do you think we could move down just the font registry?\n\nIf we created a PDF::Core::FontRegistry class, and added a #generate_id method to it, then updated `#find_font` to use a new API instead of a raw internal hash, we can make a small refactoring in the currently thought to be best direction, get your feature added down there in an easy to write unit test, and give you a clean API in prawn-templates to add a font to the registry.\n\nIt may also make sense to move the font_families hash down as well and proxy calls to it. That will be an unfortunate side effect of the official prawn API giving developers access to the internal font_families hash instead of wrapping it in an API, so we will need to preserve that for compatibility for now (maybe another breaking change for Prawn 3).\n\nThen with at least top-level font management happening in PDF::Core, with a real API to add fonts, you can call that from prawn-templates to add the fonts you need, in whatever order/way you need, and we can unit test correct generation of font IDs. And for prawn it's just an implementation detail of PDF::Core so we aren't introducing new complexity to Prawn for a use case it doesn't need to itself support.\n\nThoughts? I tagged this PR as a blocker, I won't cut a new Prawn + PDF::Core release until this is sorted out.\n. If we are going to refactor the font code down to PDF::Core, maybe the fastest way to do this is to accept the complexity into Prawn, knowing it will move to PDF::Core where it will be appropriate, and it just becomes a refactoring we do and when we do that refactor we ensure we preserve the functionality.\n\nThat way we can get this merged, get you working, get prawn-templates back functional, and cut this release and get it out the door.\n\nWhat does everyone thing of that?\n. Nope, I had to take a trip to Texas last week on short notice so I was tied up.\n\nAll you have to do is celebrate :)\n\nNow that this is merged I'll look at another open branch or two to see about getting it merged this week then try to cut a new release this weekend so you can get a new prawn-templates out the door.\n. Yeah, I hope to release prawn one of these weekends, I have said that to myself the last few weekends. The problem is how complex the release process is for Prawn with some measures of manual testing involved.\n\nAt the very least I'll get the process documented and I'll see what I can do to get this going. I would like to make it a more regular process and part of that involves doing it a couple of times then automating what we can.\n\nSorry about the wait\n. I have used http://www.pdf-tools.com/pdf/validate-pdfa-online.aspx in the past to try and work though corrupt PDF problems, it has been able to handle Prawn PDFs before. I haven't paid to much attention to PDF/A incapability as it wasn't my use case, but I am open to fixes to make sure we can generate PDF/A compliant files.\n. I am open to any PRs that would help bring Prawn into PDF/A compliance\n. Hi, I am highly reluctant to overwrite what has been pushed up to github because I don't want to change code out from underneath people without them knowing.\n\nI didn't cut the 2.0.1 gem release but I will try to be very careful moving forward that what is tagged on the stable branch is what exactly is pushed up to ruby gems.\n\nIs there a specific problem this is causing you? I'm not saying it's an issue but I am curious to what workflow it's impacting.\n. Glad to hear it's sorted out. Closing the issue.\n. Sorry about being so slow to get to this, I think we totally want to get this in. I am planing on cutting a new release of prawn later this week / week end and I don't think I'll find time for us to sort this out before then.\n\nSo just know we want to get this in and don't read to much into me cutting a release of prawn without merging this first :)\n. I'm not sure we ever officially posted it anywhere but we only support versions of ruby that the core team supports, from @mogest's post above it looks like the jRuby team isn't supporting anything there than 9000 so tweaking travis and moving forward with that would be in line with that policy.\n\nI however don't know enough about the jRuby ecosystem/use base to know if we would be cutting off a lot of users in a minor release by doing that.\n\nSo unless someone tells me that it would be a serious problem for jRuby users, I'm good with moving to just supporting jRuby 9000, we should also make our policy explicit of supporting the latest version of jRuby and all ruby-core supported versions of MRI.\n. Looking though [the changelog](https://github.com/prawnpdf/prawn/blob/62da6cdb4e384b50a789451c73d72452a2410f23/CHANGELOG.md#prawnpdf-200----2015-02-26) as of v 2.0.0 we recommended using 1.7 in 2.0 mode, but that's all I can find, but we did imply our 'support what ruby core' supports. \n. @mogest @pointlessone or I am going to check this out this week, depending on who gets to it first (I'm dealing with a lot of day job stuff this week), the code looks good.\n\nCan you confirm if there are/are not any breaking API changes in this?\n. Thanks!\n. I think I would prefer to see a new method that called the existing methods twice instead of adding complexity to the existing methods\n\nMaybe something like\n\n``` ruby\ndef pad_vertical(top_padding, bottom_padding)\n   move_down top_padding\n   yield\n   move_down bottom_padding\nend\n```\n\nWhich could possibly be combined with an `#indent` call to give you a padded box somewhere.\n\nWe would also for sure need tests for this, and maybe include it in the manual.\n\nThoughts?\n. Most of those are required for the various features we provide, and I'm not sure how we would get away from them. If you dive into it feel free to make a suggestion we can look over, but at first glance I'm not sure what we could do. \n\nThanks for the comment, and it's no bother :) We want this to be as fast and efficient as possible!\n. Thanks for the comment! Where would you have expected the cursor to end up after having written in the box?\n. So the `#text` method internally ends up creating a Text::Formatted::Box and moving the cursor down, where  calling text_box directly does nothing with the cursor.\n\nGiven how text is supposed to be a higher level convenience method, I think I'm ok with this behavior and if you want more precise control, you can instantiate a text_box yourself, as you already discovered. I would be open to a documentation patch that would explain the behavior so people in the future don't run into the same confusion you did.\n\nThanks!\n. The formatted arranger does [intentionally omit trailing space](https://github.com/prawnpdf/prawn/blob/master/lib/prawn/text/formatted/arranger.rb#L66) when doing it's finalization which is why the string it returns doesn't have trailing space so your line width calculation wouldn't cover it.\n\nFrom my understanding however when you go to print the formatted line with the trailing space it should be stripped out as well.\n\nDo you have a situation where you are using `inline_format: true` for the width_of but not on the final text draw? Or am I misunderstanding?\n. Given how we remove it from the finalized line that is the intention. However ruby normally doesn't consider a non-breaking space as 'whitespace' in the strictest sense so you may be able to append that to your string for spacing and have everything work as you would like.\n\n``` ruby\nirb(main):001:0> \"string \".strip\n=> \"string\"\nirb(main):002:0> \"string\\u00A0\".strip\n=> \"string\u00a0\"\n```\n. @iamjohnford Thanks for the pr!\n\n@mogest @cheba Could I get your input on this? I'm unfamiliar with this part of the spec as well and am currently not in a position to triage this with regard to how correct this solution is.\n\n@iamjohnford Can you also add a spec for this new functionality? I'm up for getting the feature merged in the right way and we need to make sure it will continue to work in the future. It would also be useful to have an example of how to use this code so we can easily see it in action and work though it.\n. :+1: for the separate blend_mode method, and we will want a spec specifically to cover making sure multiple blend modes are applied in the correct order to allow the reader to fallback as 7.5.2 noted.\n\nThanks so much!\n. @iamjohnford Go ahead and rebase to clean up the diff\n\nI missed it when we merged that change into PDF Inspector but can you please open a new PR to that project with an update to the change log so when we release that gem the new functionality is documented? One that release is done we can then update the gem spec in prawn to require it in this PR.\n\nI'm not too concerned about where the page is in the manual, it makes sense to me but we can change it later if something comes up.\n\nOverall I'm pretty stoked about this pr. As far as correctness I'll need to rely on @mogest and @cheba to confirm the correctness of the new functionality, can I please get a review from you two?\n. I just released a new version of the PDF inspector gem and Prawn master now depends on it. Can you rebase on master again which should hopefully make this test suite go green!\n. @iamjohnford I'm slowly burning though my prawn backlog, I'll look at this one next.\n\nThanks again for the help!\n. @iamjohnford You are **AWESOME**\n\nThanks so much for the PR (and the patience waiting for us to get this merged in!!!!)\n\nBecause you got a PR merged, you get commit access to prawn :tada: :fried_shrimp: \n\n[Here are the details](https://github.com/prawnpdf/prawn/wiki/Contributor-welcome-notes) on what that means.\n\nSeriously, thanks again for the PR. Honest real smiles over here :smile:\n\nThanks @mogest and @cheba for the extra :eyes: on this. Internet high fives all around :hand: \n. `Prawn::Document#render` will return the raw PDF stream, `#render_file` just writes that stream to a file on disk.\n\nYou should be abel to take the return value from `#render` and send it to whatever library you are using to writing to S3.\n. @mojavelinux Sure that way we can be super clear about the specific use case you have\n. `Prawn::Document#image` returns the `Prawn::Images::Image` (or an object that inherits from that) that got added, which does have a `#width` and `#height` method on them.\n\nThat API isn't public or really considered stable, but that's one way to get what you want without looking at the file yourself using something like imagemagick.\n. Looking at [#image_position](https://github.com/prawnpdf/prawn/blob/master/lib/prawn/images.rb#L147-L175) you may be able to use the `:position` and `:vposition` options to get the behavior you want.\n\n``` ruby\n  pdf.image 'img', fit: [200, 200], position: :center, position: :center\n```\n. Thanks for the PR! My concern is that this would change the return value for an API that was marked as stable, which would necessitate a major version bump.\n\nI think I get what you are trying to do and agree this result could be more useful. What does everyone think of having  this functionality in a new lower level API call that you could make and get the box return value, and the existing API call calls that lower level value, then returns the render result so we maintain backwards API compatibility?\n\nI'm also concerned with you changed an API return and it didn't look like you had to change an existing test so we probably have at least one missing test that should be written as well.\n. I'm good with the change to `gradient_registry_key` however the warning for `warning: private attribute?` has already been [fixed on ruby trunk](https://bugs.ruby-lang.org/issues/10967). I prefer that style and given the warning will go away, I'm inclined to leave it until 2.3 when it disappears completely.\n. I'll concede it's annoying to throw an unavoidable warning given how we aren't actually injecting any additional functionality here, it's just a style choice with the current code.\n\nI'll merge this in, and once 2.3 is released I'll pick a bigger fight over it :)\n\nThanks for the feedback everyone!\n. Currently Prawn only supports PNG and JPG files natively. We have a general rule for only having pure ruby dependencies we control. If you wanted to implement a tiff handler I would be more than happy to review the PR and get it merged in.\n\nIn the mean time you may want to check out my [prawn-gmagick](https://github.com/packetmonkey/prawn-gmagick) gem which will add support to prawn for whatever formats your install of graphicsmagick has. In my case I use it to load tiff images into PDFs.\n\nHope that helps!\n. I'm not sure if having a bounding box implicitly cross pages feels right. Initially (to me at least) the bounding box is a single 'object' that we would place on a page, but I can probably be convinced otherwise with some good use cases, in which case I would then be open to the PR.\n. If you can please include a fully runnable script with what version of prawn you see it on, we can see what is going on and at lest hopefully provide a more useful error message for people who run into the same issue.\n\nWe can re-open once we have that, thanks!\n. I would be very open to a PR implementing the embedding of ICC profiles, but you are correct our current implementations do not.\n\nIn my [prawn-pdfimage](https://github.com/packetmonkey/prawn-pdfimage) library I will duplicate an ICC profile that exists on an image in another PDF if someone would like to reference that as well for developing this.\n. Nice! In order to get the test suite passing, do we need to just remove the spec that was ensuring we raised an exception for palleted PNG files? Also I think you left a [puts](https://github.com/prawnpdf/prawn/pull/920/files#diff-857d67def6a8ff6448b08d3211b367c0R157) in the specs, we should remove that before merging.\n. @cheba Strangely master is now broken in Travis, I re-ran the build and it looks still broken after merging this and it bundles locally correctly. Can you check this out to see if we broke something with this PR? \n. What glyphs can be shown will be controlled by what the font supports. Short term your best solution might be to inspect the string code points and use that information to determine what font to use\n\n``` ruby\n=> [72, 101, 108, 108, 111, 44, 32, 87, 111, 114, 108, 100, 33]\nirb(main):002:0> \"\u0645\u0631\u062d\u0628\u0627 \u064a\u0627 \u0627\u0644\u0639\u0627\u0644\u0645\".codepoints\n=> [1605, 1585, 1581, 1576, 1575, 32, 1610, 1575, 32, 1575, 1604, 1593, 1575, 1604, 1605]\nirb(main):003:0>\n```\n\nAlso know that you may need to use another library to build up the string and insert it into prawn, we ran into that with Persian support in #871, I apologize if that's not related I don't know much (if anything) about Arabic (or Persian) so the issues related to it may be totally unrelated, but it was another user who was running into problems with rtl text.\n. I'm totally open to a PR for that.  Do you find yourself using custom styles a lot? I was unaware of anyone doing that. How do you go about doing that? \n. Yes, if you can please post a full code snippet to generate the bad PDF we can check it out.\n. I agree we should add 9k to travis, can you do that? Then we can get the rest of the ready PRs merged.\n\nI'm not sure I mind automatically using the latest version of a supported branch in ruby. I think the logical alternative would be to explicitly label every patch release of ruby we support, which would give us a massive build matrix. Plus we would have to remember to update travis every time there is a new release, which means eventually it will get forgotten.\n\nThoughts?\n. Ah! I thought they automatically pointed at the latest version.\n\nI looked at [the travis docs](https://docs.travis-ci.com/user/languages/ruby/#Choosing-Ruby-versions-and-implementations-to-test-against) and they do mention that the aliases change but they don't necessarily guarantee the latest version.\n\nSo I think you are totally right, lets track the oldest and newest of the branch to keep our build count lower but hopefully cover any edge cases in ruby.\n\nCan you get that set up?\n. @kriztynna I hope to get a release cut within the next week or so, by the end of the year certainly.\n. Thanks!\n. Nice catch! Thanks.\n. Nice, Thanks!\n. Huge fan of the new expect rspec syntax.\n\nCan you please update the commit message to include the intention of dropping mocha and conversion to the new syntax? After that Go ahead and merge this in.\n\nThanks @cheba!\n. :+1: :shipit:\n. Thanks!\n. @cheba I'm not as familiar with the png spec as you (or at all really) so once you are good with the branch go ahead and merge it.\n\nThanks for the help @kriztynna! \n. @kriztynna Because you had a pull request merged, you get commit access! :tada:\n\n[Here are the details.](https://github.com/prawnpdf/prawn/wiki/Contributor-welcome-notes)\n\nThanks again for helping prawn!!\n. [Prawn::View](https://github.com/prawnpdf/prawn/blob/master/lib/prawn/view.rb) was made for just this, it's part of the experimental API but it should give you the interface you are looking for.\n\n``` ruby\n     class Greeter\n        include Prawn::View\n\n        def initialize(name)\n          @name = name\n        end\n\n        def say_hello\n          text \"Hello, #{@name}!\"\n        end\n\n        def say_goodbye\n          font(\"Courier\") do\n            text \"Goodbye, #{@name}!\"\n          end\n        end\n     end\n\n     greeter = Greeter.new(\"Gregory\")\n\n     greeter.say_hello\n     greeter.say_goodbye\n\n     greeter.save_as(\"greetings.pdf\")\n```\n. Some code was pulled out of prawn because it was inherently flawed and we couldn't maintain it.\n\nCan you share some code that used to work that no longer does so I can better understand what isn't working for you anymore please? \n\nThanks.\n. All set.\n. There was a [bug](https://github.com/prawnpdf/prawn-table/pull/60) in [prawn-table](https://github.com/prawnpdf/prawn-table) that looks similar to this that got fixed.\n\nPlease check to see if using master of the prawn-table repo (with the latest release of Prawn) fixes your problem, otherwise please open an issue on that repo.\n\nThanks\n. As a side note, I wrote the [prawn-gmagick](https://github.com/packetmonkey/prawn-gmagick) gem to both solve the performance issues of large transparent PNG images and expand support for other image formats. It uses graphicsmagick and is a compiled native gem [for performance](https://github.com/packetmonkey/prawn-gmagick#speed)\n\nHopefully that helps! Otherwise we are very interested in improving the native png handler as well.\n. I'm not currently aware of what would cause the failure, given how [our CI](https://travis-ci.org/prawnpdf/prawn) is currently green, I'm inclined to think it's related to whatever redhat did to package prawn.\n\nI'm going to go ahead and close this issue but feel free to follow-up if you have more information.\n\nThanks for letting us know!\n. Prawn is mostly for the creation of PDFs where signing I believe is a modification so it probably falls out of scope. With that said if there was an API prawn could provide that would allow an external gem to build that functionality, that could be worth looking into..\n\nThanks for thinking of prawn!\n. Thanks for the pr!\n\nFirst I would like to see an additional spec that would return false to ensure we aren't returning true for all methods, This would work\n\n``` ruby\n it \"returns false for methods the view object does not respond to\" do\n    expect(view_object).to_not respond_to(:nonexistant_method)\n end\n```\n\nI would like to see an entry in the CHANGELOG documenting the change.\n\nWhat code do you think this would break? In case someone was relying on `Prawn::View#respond_to?` always returned false?\n. This looks good to me.\n\n@pointlessone Any reason to not merge you can think of?\n. I can get on board with if we open the IO object, we should close the IO object.\n\nIt looks like the IO object returned from [verify_and_open_image](https://github.com/prawnpdf/prawn/blob/master/lib/prawn/images.rb#L128-L145) is only used to call `#read` on it. Instead of returning the io object itself, we could change `verify_and_open_image` to something like `image_content` (a sort of half extract to method refactoring) to just return the image content and then we could close the IO object in that method if we opened it, as currently only the `verify_and_open_image` method knows if we opened the IO object ourself or not.\n\nIf we memoized the io content returned from `verify_and_open_image` we would just have to delete the [image_content = io.read](https://github.com/prawnpdf/prawn/blob/master/lib/prawn/images.rb#L78) line and be done.\n\nThoughts?\n. This looks good to me (and kudos for diving into the word wrapping code).\n\nCan you mention the bug fix in the change log?\n. ",
    "maedhr": "I had a project that required boolean valued cells to render as a checkbox. Instead of having to create the cell manually I refactored cell creation into a strategy pattern that was a little more extensible.\n\nIn hindsight having the cell renderers auto register and the factory being a singleton proved less malleable than I had intended. I no longer maintain the project I did this for but if there is interest I wouldn't mind lending a hand.\n. I had a project that required boolean valued cells to render as a checkbox. Instead of having to create the cell manually I refactored cell creation into a strategy pattern that was a little more extensible.\n\nIn hindsight having the cell renderers auto register and the factory being a singleton proved less malleable than I had intended. I no longer maintain the project I did this for but if there is interest I wouldn't mind lending a hand.\n. ",
    "elberskirch": "No problem. Thanks for resolving it so fast. And thanks for working on Prawn!\n. No problem. Thanks for resolving it so fast. And thanks for working on Prawn!\n. ",
    "joncanady": "I've had to step away from my project that required prawn, but I'm back into the thick of it now and hoping to get these tests written. I couldn't quite wrap my head around the testing last time, so I may be back for guidance on that front.\n. :+1: \n. I've had to step away from my project that required prawn, but I'm back into the thick of it now and hoping to get these tests written. I couldn't quite wrap my head around the testing last time, so I may be back for guidance on that front.\n. :+1: \n. ",
    "giuseb": "Hi Jon, Brad,\nThe patch seems to work just fine for me (sorry, I am also having a hard time figuring out a proper test to contribute).\nI thought I'd point out, however, that ColumnBox#indent does not allow setting a 'right' indent, as BoundignBox#indent does.\n. Please see this [pull request](https://github.com/sandal/prawn/pull/303), which adds to joncanady's fix by also allowing right indents. Thanks \n. I stumbled into this problem while working on [another issue](https://github.com/sandal/prawn/pull/221), which is probably why I broke other tests. I will start over from master... Cheers\n.  [image: :+1:]\n\nGiuseppe\n\n\n## \n\n---\n\nDr. Giuseppe Bertini, MD, PhD\nSection of Anatomy & Histology\nDepartment of Neurological & Movement Sciences\nUniversity of Verona\n\nStrada Le Grazie, 8\n37134 Verona, ITALY\n\nvoice: +39-045-802-7682\nfax: +39-045-802-7163\n. Thanks!\n\nI actually debated whether to mention the `@document` approach. The reason I did not is that it feels a bit like breaking encapsulation, as in--the user of `Prawn::View` needs to know the name of the specific instance variable, and the maintainer of the library is not free to change it later on. Whereas a method feels more like a deliberate API choice.\n\nBut I am not a sophisticated Ruby programmer, so maybe perusal of an instance variable defined in a mixin is a perfectly good practice...\n. Yes, everything you write makes perfect sense, but still...\n\nAre there many other places in Prawn where the user needs to get somewhat cozy with the underlying implementation?\n\nHow about something like this:\n\n``` ruby\nmodule Prawn\n  module View\n    def document\n      @document ||= Prawn::Document.new(@doc_options || {})\n    end\n\n    def document_options(opts)\n      @doc_options = opts\n    end\n\n    ...\n\n  end\nend\n\nclass Shrimp\n  include Prawn::View\n  def initialize(opts={})\n    document_options opts\n  end\nend\n\nShrimp.new(page_size: 'A4')\n```\n\nWhere you are not telling people _about_ `Prawn::View`. Rather, you are basically saying, if you need to customize the document, call `document_options` before invoking `Prawn::Document` methods.\n\nPeople are still free to read the source and decide that they'd rather override `#document` or define their own `@document`, but from the perspective of the concise API presented in the beautiful manual, something along these lines would seem to me fairly straightforward. Existing code should not be affected by such an addition, right?\n\nMakes sense?\n. Okay, fair enough. Thanks for all the good work, Greg!\n\nGiuseppe\n. My commits DO change the manual, thereby failing the recently added spec (see commit 1444f4). Please advise!. Please let me know if the manual page looks good now. If so, I will update the PR, ok?\r\n\r\n![screen shot 2017-02-21 at 10 41 07](https://cloud.githubusercontent.com/assets/10086/23159234/50a2eb78-f822-11e6-8f04-1328c10c03ec.png)\r\n. I see that travis fails because the jruby-generated hash for the manual is missing.\r\nUnfortunately, I don't have jruby on my machine (can't seem to get the proper JDK installed on macOS 10.12...)\r\n\r\nAny chances someone else might compute that hash?\r\n. Hi Jon, Brad,\nThe patch seems to work just fine for me (sorry, I am also having a hard time figuring out a proper test to contribute).\nI thought I'd point out, however, that ColumnBox#indent does not allow setting a 'right' indent, as BoundignBox#indent does.\n. Please see this [pull request](https://github.com/sandal/prawn/pull/303), which adds to joncanady's fix by also allowing right indents. Thanks \n. I stumbled into this problem while working on [another issue](https://github.com/sandal/prawn/pull/221), which is probably why I broke other tests. I will start over from master... Cheers\n.  [image: :+1:]\n\nGiuseppe\n\n\n## \n\n---\n\nDr. Giuseppe Bertini, MD, PhD\nSection of Anatomy & Histology\nDepartment of Neurological & Movement Sciences\nUniversity of Verona\n\nStrada Le Grazie, 8\n37134 Verona, ITALY\n\nvoice: +39-045-802-7682\nfax: +39-045-802-7163\n. Thanks!\n\nI actually debated whether to mention the `@document` approach. The reason I did not is that it feels a bit like breaking encapsulation, as in--the user of `Prawn::View` needs to know the name of the specific instance variable, and the maintainer of the library is not free to change it later on. Whereas a method feels more like a deliberate API choice.\n\nBut I am not a sophisticated Ruby programmer, so maybe perusal of an instance variable defined in a mixin is a perfectly good practice...\n. Yes, everything you write makes perfect sense, but still...\n\nAre there many other places in Prawn where the user needs to get somewhat cozy with the underlying implementation?\n\nHow about something like this:\n\n``` ruby\nmodule Prawn\n  module View\n    def document\n      @document ||= Prawn::Document.new(@doc_options || {})\n    end\n\n    def document_options(opts)\n      @doc_options = opts\n    end\n\n    ...\n\n  end\nend\n\nclass Shrimp\n  include Prawn::View\n  def initialize(opts={})\n    document_options opts\n  end\nend\n\nShrimp.new(page_size: 'A4')\n```\n\nWhere you are not telling people _about_ `Prawn::View`. Rather, you are basically saying, if you need to customize the document, call `document_options` before invoking `Prawn::Document` methods.\n\nPeople are still free to read the source and decide that they'd rather override `#document` or define their own `@document`, but from the perspective of the concise API presented in the beautiful manual, something along these lines would seem to me fairly straightforward. Existing code should not be affected by such an addition, right?\n\nMakes sense?\n. Okay, fair enough. Thanks for all the good work, Greg!\n\nGiuseppe\n. My commits DO change the manual, thereby failing the recently added spec (see commit 1444f4). Please advise!. Please let me know if the manual page looks good now. If so, I will update the PR, ok?\r\n\r\n![screen shot 2017-02-21 at 10 41 07](https://cloud.githubusercontent.com/assets/10086/23159234/50a2eb78-f822-11e6-8f04-1328c10c03ec.png)\r\n. I see that travis fails because the jruby-generated hash for the manual is missing.\r\nUnfortunately, I don't have jruby on my machine (can't seem to get the proper JDK installed on macOS 10.12...)\r\n\r\nAny chances someone else might compute that hash?\r\n. ",
    "pinscher": "its in app/pdfs/\nmaybe cause of passanger?\n\nVon meinem iPhone gesendet\n\nAm 13.04.2011 um 02:17 schrieb Bluejade\nreply@reply.github.com:\n\n> On 4/12/11, pinscher\n> reply@reply.github.com\n> wrote:\n> \n> > after \"bundle install\" my document_pdf.rb with all design for the PDF is\n> > totally ignored and a very old version of that file is used instead!   Even\n> > if I edit my document_pdf.rb there is no change on the generated PDF.\n> \n> If you are using Rails, and document_pdf.rb is in ./lib, then you may\n> need to restart script/server between changes. Or, if you are\n> generating the PDF in a background job, then you may need to restart\n> your background job worker regardless of where document_pdf.rb is.\n> \n> Regardless, it isn't a Prawn specific problem.\n> - Daniel\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/sandal/prawn/issues/227#comment_992927\n. its in app/pdfs/\nmaybe cause of passanger?\n\nVon meinem iPhone gesendet\n\nAm 13.04.2011 um 02:17 schrieb Bluejade\nreply@reply.github.com:\n\n> On 4/12/11, pinscher\n> reply@reply.github.com\n> wrote:\n> \n> > after \"bundle install\" my document_pdf.rb with all design for the PDF is\n> > totally ignored and a very old version of that file is used instead!   Even\n> > if I edit my document_pdf.rb there is no change on the generated PDF.\n> \n> If you are using Rails, and document_pdf.rb is in ./lib, then you may\n> need to restart script/server between changes. Or, if you are\n> generating the PDF in a background job, then you may need to restart\n> your background job worker regardless of where document_pdf.rb is.\n> \n> Regardless, it isn't a Prawn specific problem.\n> - Daniel\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/sandal/prawn/issues/227#comment_992927\n. ",
    "matthewrudy": "hmm\nthere's a test case specifically testing this is the case...\nis that correct?\n\n```\nit \"must not print the page number without a filter\" do\n  10.times { @pdf.start_new_page }\n  @pdf.expects(:text_box).never\n  @pdf.number_pages \"test\", {:page_filter => nil}\nend\n```\n\nIt seems if you've said\n\n```\npdf.number_pages \"something\"\n```\n\nthen you indeed expect it to output something.\nDefault is nothing.\n. This is my patch\nhttps://github.com/matthewrudy/prawn/commit/055cbf4490e5b0b687ec21a765a8d489bb2303f1\n. :+1:  that's good for me, thanks.\n. hmm\nthere's a test case specifically testing this is the case...\nis that correct?\n\n```\nit \"must not print the page number without a filter\" do\n  10.times { @pdf.start_new_page }\n  @pdf.expects(:text_box).never\n  @pdf.number_pages \"test\", {:page_filter => nil}\nend\n```\n\nIt seems if you've said\n\n```\npdf.number_pages \"something\"\n```\n\nthen you indeed expect it to output something.\nDefault is nothing.\n. This is my patch\nhttps://github.com/matthewrudy/prawn/commit/055cbf4490e5b0b687ec21a765a8d489bb2303f1\n. :+1:  that's good for me, thanks.\n. ",
    "fnando": "Same code. Just put some static code for bug reporting purpose. Text is actually coming from database. I can update the script to include the same text if you want.\n. Long time no see. Just came back to this project again, so I remembered to post the actual code I'm using. Here it is: https://gist.github.com/993249\n. Show no mercy. Just discovered the bug. Prawn actually modifies the options hash, so storing it in constant is not a big idea.\n\nThis is the original hash:\n\n```\n{:page_size=>\"A5\", :page_layout=>:landscape, :margin=>[40, 75]}\n```\n\nAnd this is the one after generating the first PDF:\n\n```\n{:margin=>[40, 75], :info=>{:Creator=>\"Prawn\", :Producer=>\"Prawn\"}, :size=>\"A5\", :layout=>:landscape, :top_margin=>40, :right_margin=>75, :bottom_margin=>40, :left_margin=>75}\n```\n\nMaybe Prawn should duplicate the options itself?\n. Same code. Just put some static code for bug reporting purpose. Text is actually coming from database. I can update the script to include the same text if you want.\n. Long time no see. Just came back to this project again, so I remembered to post the actual code I'm using. Here it is: https://gist.github.com/993249\n. Show no mercy. Just discovered the bug. Prawn actually modifies the options hash, so storing it in constant is not a big idea.\n\nThis is the original hash:\n\n```\n{:page_size=>\"A5\", :page_layout=>:landscape, :margin=>[40, 75]}\n```\n\nAnd this is the one after generating the first PDF:\n\n```\n{:margin=>[40, 75], :info=>{:Creator=>\"Prawn\", :Producer=>\"Prawn\"}, :size=>\"A5\", :layout=>:landscape, :top_margin=>40, :right_margin=>75, :bottom_margin=>40, :left_margin=>75}\n```\n\nMaybe Prawn should duplicate the options itself?\n. ",
    "blackruby": "Thanks for your answer,\n\nThe :skip_encoding option works fine, but I think it's annoying  to have to\ndifferentiate the first call for subsequent.\n\nThanks a lot in any case.\n\n2011/5/5 Bluejade <\nreply@reply.github.com>\n\n> When calling text_box subsequent times, you need to include the\n> :skip_encoding option. I'm closing this ticket and will open another ticket\n> about updating the manual to mention this and/or improving developer\n> documentation.\n> \n> In any case, #encoding is 1.9 only, not 1.8.\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/sandal/prawn/issues/237#comment_1106830\n. Thanks for your answer,\n\nThe :skip_encoding option works fine, but I think it's annoying  to have to\ndifferentiate the first call for subsequent.\n\nThanks a lot in any case.\n\n2011/5/5 Bluejade <\nreply@reply.github.com>\n\n> When calling text_box subsequent times, you need to include the\n> :skip_encoding option. I'm closing this ticket and will open another ticket\n> about updating the manual to mention this and/or improving developer\n> documentation.\n> \n> In any case, #encoding is 1.9 only, not 1.8.\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/sandal/prawn/issues/237#comment_1106830\n. ",
    "mbklein": "Oh, I forgot to mention...Just to make sure, I (temporarily) added `$KCODE='u'` to my local Rakefile and ran the entire test suite to make sure nothing else was failing under Unicode. Looks good.\n. No, I didn't. I have no idea how that happened. I guess I clicked Comment & Close instead of Comment when I added the second comment. \n\nThanks for noticing. \n. \"Cool. Cool cool cool.\" ~ Abed\n\n:+1:\n. Is it worth trying to find the commits from those who have not yet responded and finding out the implications of cherry-picking around them to create an MIT-compatible branch? Their contributions can be picked back in if and when they respond. If so, I'd be happy to take a stab at it in the next couple of weeks.\n. Understood, @sandal. I won't try anything until they've both checked in.\n. I see jonsgreen's [43 commits](https://github.com/prawnpdf/prawn/commits?author=jonsgreen), but I [don't see anything](https://github.com/prawnpdf/prawn/commits?author=Bluejade) from Bluejade. What am I missing?\n. Github's contributor list indicates all the users who have _ever_ had a commit in master, regardless of whether their code was moved or removed later. So it seems to me that the \"safe harbor\" option would be to use Github's own [contributors by number of additions](https://github.com/prawnpdf/prawn/graphs/contributors?from=2008-03-29&to=2014-03-01&type=a) list, which shows 93 contributors.\n\nContributors on @cheba's list who aren't on mine:\nbluejade\ncapps\ncbartlett\nFloWi\nJaron\nKennel\njeremyf\njweathers777\nlenny\notavio\npaul\nproactive\ncostan\nseebs\n\nContributors on my list who aren't on @cheba's:\nalexyoung\nAndrewO\nandrewtimberlake\naugustl\nblaxter\nbragi\nbrandonh\ncaifara\ncassiomarques\nDefV\ndjanowski\ndmarkow\nesb\nhcf\nianterrell\njlh\njohnnyshields\nkoke\nkreynolds\nLanF3usT\nmarnen\npparidans\nptzn\nunreal\nwelfare\n\nI don't know how to verify its accuracy, because I'm not sure what \"accurate\" means in this case. But it's the best I've got.\n. Oh, I forgot to mention...Just to make sure, I (temporarily) added `$KCODE='u'` to my local Rakefile and ran the entire test suite to make sure nothing else was failing under Unicode. Looks good.\n. No, I didn't. I have no idea how that happened. I guess I clicked Comment & Close instead of Comment when I added the second comment. \n\nThanks for noticing. \n. \"Cool. Cool cool cool.\" ~ Abed\n\n:+1:\n. Is it worth trying to find the commits from those who have not yet responded and finding out the implications of cherry-picking around them to create an MIT-compatible branch? Their contributions can be picked back in if and when they respond. If so, I'd be happy to take a stab at it in the next couple of weeks.\n. Understood, @sandal. I won't try anything until they've both checked in.\n. I see jonsgreen's [43 commits](https://github.com/prawnpdf/prawn/commits?author=jonsgreen), but I [don't see anything](https://github.com/prawnpdf/prawn/commits?author=Bluejade) from Bluejade. What am I missing?\n. Github's contributor list indicates all the users who have _ever_ had a commit in master, regardless of whether their code was moved or removed later. So it seems to me that the \"safe harbor\" option would be to use Github's own [contributors by number of additions](https://github.com/prawnpdf/prawn/graphs/contributors?from=2008-03-29&to=2014-03-01&type=a) list, which shows 93 contributors.\n\nContributors on @cheba's list who aren't on mine:\nbluejade\ncapps\ncbartlett\nFloWi\nJaron\nKennel\njeremyf\njweathers777\nlenny\notavio\npaul\nproactive\ncostan\nseebs\n\nContributors on my list who aren't on @cheba's:\nalexyoung\nAndrewO\nandrewtimberlake\naugustl\nblaxter\nbragi\nbrandonh\ncaifara\ncassiomarques\nDefV\ndjanowski\ndmarkow\nesb\nhcf\nianterrell\njlh\njohnnyshields\nkoke\nkreynolds\nLanF3usT\nmarnen\npparidans\nptzn\nunreal\nwelfare\n\nI don't know how to verify its accuracy, because I'm not sure what \"accurate\" means in this case. But it's the best I've got.\n. ",
    "kscollective": "This appears to be working for me so far, although it doesn't take into account nested stretchy bounding boxes.\n\n``` ruby\nmodule Prawn\n  class Document\n\n    def overruns_page?(h)\n      if bounds.stretchy?\n        (self.y - h) < bounds.parent.absolute_bottom \n      else\n        (self.y - h) < bounds.absolute_bottom \n      end\n    end\n\n  end\nend\n```\n. This appears to be working for me so far, although it doesn't take into account nested stretchy bounding boxes.\n\n``` ruby\nmodule Prawn\n  class Document\n\n    def overruns_page?(h)\n      if bounds.stretchy?\n        (self.y - h) < bounds.parent.absolute_bottom \n      else\n        (self.y - h) < bounds.absolute_bottom \n      end\n    end\n\n  end\nend\n```\n. ",
    "aidzas": "pdf = Prawn::Document.new(\n:page_size => \"A4\",\n:left_margin => 55)\npdf.font \"#{RAILS_ROOT}/public/fonts/times.ttf\"\n\n  image = \"#{RAILS_ROOT}/public/images/header.png\"\n  pdf.image image, :scale => 0.7, :at => [-85,820]\npdf.line_width = 10,\n [[-15,713,510,713]].each { |points| pdf.stroke_line(*points) }\n\nafter last line acrobat can't generate pdf document in same page, if there is second page, acrobat is showing it.\n. pdf = Prawn::Document.new(\n:page_size => \"A4\",\n:left_margin => 55)\npdf.font \"#{RAILS_ROOT}/public/fonts/times.ttf\"\n\n  image = \"#{RAILS_ROOT}/public/images/header.png\"\n  pdf.image image, :scale => 0.7, :at => [-85,820]\npdf.line_width = 10,\n [[-15,713,510,713]].each { |points| pdf.stroke_line(*points) }\n\nafter last line acrobat can't generate pdf document in same page, if there is second page, acrobat is showing it.\n. ",
    "daduke": "Hi,\n\nthanks a lot for the test case. You're right, it doesn't exhibit my problem, and I seem to be unable to produce a short example that would. The issue only shows in my real life rails app.\nI'm using a workaround now.\n\nthanks,\n-Christian\n\nOn Wed, Jun 01, 2011 at 10:00:37AM -0700, bradediger wrote:\n\n> I can't reproduce this problem with Prawn master. The following code gives me three lines of text that are right-aligned with the right edge of the text box:\n> \n> ``` ruby\n> Prawn::Document.generate \"245.pdf\" do\n>   w = 60\n>   bounding_box [0, cursor], :width => w, :height => 200 do\n>     stroke_bounds\n>     text_box \"line one\\nline two\\nline three\", :width => w, :align => :right\n>   end\n> end\n> ```\n> \n> Please reopen the issue if you can provide a reduced test case that demonstrates the problem. Thanks!\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/sandal/prawn/issues/245#comment_1275637\n. yup, I can reproduce that. Exactly what I saw in my original scenario. How can I reopen this?\n. Hi,\n\nthanks a lot for the test case. You're right, it doesn't exhibit my problem, and I seem to be unable to produce a short example that would. The issue only shows in my real life rails app.\nI'm using a workaround now.\n\nthanks,\n-Christian\n\nOn Wed, Jun 01, 2011 at 10:00:37AM -0700, bradediger wrote:\n\n> I can't reproduce this problem with Prawn master. The following code gives me three lines of text that are right-aligned with the right edge of the text box:\n> \n> ``` ruby\n> Prawn::Document.generate \"245.pdf\" do\n>   w = 60\n>   bounding_box [0, cursor], :width => w, :height => 200 do\n>     stroke_bounds\n>     text_box \"line one\\nline two\\nline three\", :width => w, :align => :right\n>   end\n> end\n> ```\n> \n> Please reopen the issue if you can provide a reduced test case that demonstrates the problem. Thanks!\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/sandal/prawn/issues/245#comment_1275637\n. yup, I can reproduce that. Exactly what I saw in my original scenario. How can I reopen this?\n. ",
    "hidakatsuya": "Hi. I am Japanese.\nThe following text was translated for Google Translate, may be confusing...\n\nIt seems that this issue is already close, and I also suffer from this problem. Please try the following code.\n\n``` ruby\n# coding: utf-8\nrequire 'prawn'\n\nPrawn::Document.generate \"245.pdf\" do\n  w = 60\n  font 'ipam.ttf'\n  bounding_box [0, cursor], :width => w, :height => 200 do\n    stroke_bounds\n    text_box \"one line\\ntwo line\\nthree line\", :width => w, :align => :right\n  end\nend\n```\n\nResult:\n\n```\n|one line  |\n|two line  |\n|three line|\n```\n\nIn this code, we use a Unicode font that [IPA fonts](http://ossipedia.ipa.go.jp/ipafont/index.html). In this font, setting the right-justified or centered, results in output similar to the one character that contains a space.\n\nNote that the code is tested with the source of the master.\nWe look forward to a solution! Thank you.\n. Thank you for your reply.\n\nAs a solution to this problem, I apply the following patch.\n\n``` ruby\n# Open class\nclass Prawn::Core::Text::Formatted::Arranger\n  alias_method :original_line_width, :line_width\n\n  def line_width\n    w = original_line_width\n    w - @fragments.inject(0) {|diff, fragment|\n       diff + (fragment.text == \"\\n\" ? fragment.width : 0)\n    }\n  end\nend\n```\n\nWorking fine at the moment.\nI hope helpful. Thank you.\n. Hi. I am Japanese.\nThe following text was translated for Google Translate, may be confusing...\n\nIt seems that this issue is already close, and I also suffer from this problem. Please try the following code.\n\n``` ruby\n# coding: utf-8\nrequire 'prawn'\n\nPrawn::Document.generate \"245.pdf\" do\n  w = 60\n  font 'ipam.ttf'\n  bounding_box [0, cursor], :width => w, :height => 200 do\n    stroke_bounds\n    text_box \"one line\\ntwo line\\nthree line\", :width => w, :align => :right\n  end\nend\n```\n\nResult:\n\n```\n|one line  |\n|two line  |\n|three line|\n```\n\nIn this code, we use a Unicode font that [IPA fonts](http://ossipedia.ipa.go.jp/ipafont/index.html). In this font, setting the right-justified or centered, results in output similar to the one character that contains a space.\n\nNote that the code is tested with the source of the master.\nWe look forward to a solution! Thank you.\n. Thank you for your reply.\n\nAs a solution to this problem, I apply the following patch.\n\n``` ruby\n# Open class\nclass Prawn::Core::Text::Formatted::Arranger\n  alias_method :original_line_width, :line_width\n\n  def line_width\n    w = original_line_width\n    w - @fragments.inject(0) {|diff, fragment|\n       diff + (fragment.text == \"\\n\" ? fragment.width : 0)\n    }\n  end\nend\n```\n\nWorking fine at the moment.\nI hope helpful. Thank you.\n. ",
    "forrest": "I'm still having this problem with a right aligned table. It adds right padding for every \\n in the cell. The more lines I add, the wider the cell.\n. Of course, sorry I didn't start with that.\n\nPrawn 1.0.0.rc1\n\n``` ruby\nPrawn::Document.generate(\"test_output.pdf\") do\n  table [[\"row1\", \"row2\"]], :position => :right\n  table [[\"row1\", \"row2\\ntest\"]], :position => :right\n  table [[\"row1\", \"row2\\ntest\\ntest\"]], :position => :right\nend\n```\n. I just want the cell to take up the width of the text and no more. The length of the text can vary. How can I achieve this with a floated table?\n. And I forgot to say thanks for the quick reply to the original query :-)\n. Thanks for the great feedback. I'll see what I can do.\n. Took me a while to find this ticket. It gave me the code I was looking for. Thanks.\n\nAlso, I would +1 adding this to the official API\n. +1 to all the comments above.\n. Having to set bundler to grab the branch from Github instead of using the gem file is resulting in a lot of bloat on our production servers. The .git file alone is quite large.\n\n@yob it looks like you've been performing the last couple commits. Could you atleast indicate which features are preventing the RC2?\n. +1\n. Thanks :-)\n. Any word on how this is coming? We've recently been hit with a few really large memory issues specifically around tables.\n. @kennethkalmer That sounds great. Thanks for the hard work. It's really appreciated.\n. I'm still having this problem with a right aligned table. It adds right padding for every \\n in the cell. The more lines I add, the wider the cell.\n. Of course, sorry I didn't start with that.\n\nPrawn 1.0.0.rc1\n\n``` ruby\nPrawn::Document.generate(\"test_output.pdf\") do\n  table [[\"row1\", \"row2\"]], :position => :right\n  table [[\"row1\", \"row2\\ntest\"]], :position => :right\n  table [[\"row1\", \"row2\\ntest\\ntest\"]], :position => :right\nend\n```\n. I just want the cell to take up the width of the text and no more. The length of the text can vary. How can I achieve this with a floated table?\n. And I forgot to say thanks for the quick reply to the original query :-)\n. Thanks for the great feedback. I'll see what I can do.\n. Took me a while to find this ticket. It gave me the code I was looking for. Thanks.\n\nAlso, I would +1 adding this to the official API\n. +1 to all the comments above.\n. Having to set bundler to grab the branch from Github instead of using the gem file is resulting in a lot of bloat on our production servers. The .git file alone is quite large.\n\n@yob it looks like you've been performing the last couple commits. Could you atleast indicate which features are preventing the RC2?\n. +1\n. Thanks :-)\n. Any word on how this is coming? We've recently been hit with a few really large memory issues specifically around tables.\n. @kennethkalmer That sounds great. Thanks for the hard work. It's really appreciated.\n. ",
    "cs": "all tests are passing now... (at least on my machine).\n\nhowever, my app is broken again:\n\n```\n17: ppdf.table(\n18:   table_data, :header => true, :row_colors => [\"ffffff\", \"dddddd\"],\n19:   :cell_style => {:border_width => 0.5, :border_color => \"000000\", :size => 8, :padding => [4, 6, 4, 6]},\n20:   :column_widths => {0 => 35, 1 => ppdf.bounds.width - 35 - 70 - 70, 2 => 70, 3 => 70}\n\n\n\nactivesupport (3.0.9) lib/active_support/core_ext/string/output_safety.rb:119:in `lstrip!'\nprawn-22772992de1a/lib/prawn/core/text/formatted/line_wrap.rb:42:in `wrap_line'\nprawn-22772992de1a/lib/prawn/core/text/formatted/wrap.rb:44:in `wrap'\nprawn-22772992de1a/lib/prawn/text/formatted/box.rb:258:in `render'\nprawn-22772992de1a/lib/prawn/font.rb:96:in `font_size'\nprawn-22772992de1a/lib/prawn/text/formatted/box.rb:251:in `render'\nprawn-22772992de1a/lib/prawn/core/text.rb:194:in `text_rendering_mode'\nprawn-22772992de1a/lib/prawn/text/formatted/box.rb:242:in `render'\nprawn-22772992de1a/lib/prawn/core/text.rb:212:in `character_spacing'\nprawn-22772992de1a/lib/prawn/text/formatted/box.rb:241:in `render'\nprawn-22772992de1a/lib/prawn/font.rb:116:in `save_font'\nprawn-22772992de1a/lib/prawn/text/formatted/box.rb:240:in `render'\nprawn-22772992de1a/lib/prawn/text/box.rb:124:in `render'\nprawn-22772992de1a/lib/prawn/table/cell/text.rb:59:in `natural_content_height'\nprawn-22772992de1a/lib/prawn/table/cell/text.rb:95:in `with_font'\n...\napp/views/statements/_line_items.pdf.prawn:17:in `_app_views_statements__line_items_pdf_prawn___1356873977_2249619080_4591564'\n```\n\nstrange problem :)\n. @bradediger Interesting... I didn't think about that.\n\nAn HTML compatible parser in Prawn would make my life really immensely easier (am I the only one?). Therefore, I want to suggest an alternative idea. Instead of extending the existing parser, how about adding a second one?\n\nPrawn could support two parsers:\n1. The one already in place without modifications.\n2. A new parser implementation with support for a (valid) subset of CSS/HTML5.\n\nThe user would have the ability to select the appropriate parser as needed:\n\n```\nwithout_formatting = \"Yada Yada\"\ntext(without_formatting) # or :inline_format => false\n\nwith_prawn_formatting = \"<font size='20'>Yada Yada.</font>\"\ntext(with_prawn_formatting, :inline_format => true) # or :default\n\nwith_html5_formatting = \"<span style='font-size:20pt;'>Yada Yada</span>\"\ntext(with_html5_formatting, :inline_format => :html5)\n```\n\nThe new parser could even be implemented in a new Gem. Prawn would only have to add the functionality for the user to select different parsers as illustrated above.\n. @bradediger Yes, I'm volunteering. However, I should probably create a separate pull request for that...\n\nThank you for your support! I'm hoping you will be available to answer occasional questions I might come up with during development :)\n. I moved the code from this pull request to a new branch named [html5-parser](https://github.com/cs/prawn/tree/html5-parser). Sorry for any inconveniences this may cause!\n. One more thing...\n\nFor now, all parsers are required to respond to only one method (that's the interface parsers have to implement):\n\n```\ndef to_array(string, *args)\n   # parse string and produce a prawn compatible array...\n   return [] # stub\nend\n```\n\nThe other methods in `Prawn::Text::Formatted::Parser` still have to be dealt with accordingly.\n. Hi! I realize that you won't merge this pull request in its present form (mainly for the lack of documentation). However, some kind of feedback would be nice nonetheless? \n\nAm I on the right track? Would you prefer some kind of different approach? I would really appreciate getting answers to those questions before investing more work.\n. @yob, thank you for your feedback...\n\nI just wanted to let you know, that I'm still interested in this. Actually, I'm using my pluggable parsers implementation in production at the moment.\n\nThere's an example application available [here](https://github.com/cs/prawn-html5-example), illustrating the possibility of using WYSIWYG editing for prawn PDF documents (enabled by the pluggable parsers extension).\n. :+1: \n. @cheba Exactly. @proactive is my company's account and I am the owner and the CEO...\n. all tests are passing now... (at least on my machine).\n\nhowever, my app is broken again:\n\n```\n17: ppdf.table(\n18:   table_data, :header => true, :row_colors => [\"ffffff\", \"dddddd\"],\n19:   :cell_style => {:border_width => 0.5, :border_color => \"000000\", :size => 8, :padding => [4, 6, 4, 6]},\n20:   :column_widths => {0 => 35, 1 => ppdf.bounds.width - 35 - 70 - 70, 2 => 70, 3 => 70}\n\n\n\nactivesupport (3.0.9) lib/active_support/core_ext/string/output_safety.rb:119:in `lstrip!'\nprawn-22772992de1a/lib/prawn/core/text/formatted/line_wrap.rb:42:in `wrap_line'\nprawn-22772992de1a/lib/prawn/core/text/formatted/wrap.rb:44:in `wrap'\nprawn-22772992de1a/lib/prawn/text/formatted/box.rb:258:in `render'\nprawn-22772992de1a/lib/prawn/font.rb:96:in `font_size'\nprawn-22772992de1a/lib/prawn/text/formatted/box.rb:251:in `render'\nprawn-22772992de1a/lib/prawn/core/text.rb:194:in `text_rendering_mode'\nprawn-22772992de1a/lib/prawn/text/formatted/box.rb:242:in `render'\nprawn-22772992de1a/lib/prawn/core/text.rb:212:in `character_spacing'\nprawn-22772992de1a/lib/prawn/text/formatted/box.rb:241:in `render'\nprawn-22772992de1a/lib/prawn/font.rb:116:in `save_font'\nprawn-22772992de1a/lib/prawn/text/formatted/box.rb:240:in `render'\nprawn-22772992de1a/lib/prawn/text/box.rb:124:in `render'\nprawn-22772992de1a/lib/prawn/table/cell/text.rb:59:in `natural_content_height'\nprawn-22772992de1a/lib/prawn/table/cell/text.rb:95:in `with_font'\n...\napp/views/statements/_line_items.pdf.prawn:17:in `_app_views_statements__line_items_pdf_prawn___1356873977_2249619080_4591564'\n```\n\nstrange problem :)\n. @bradediger Interesting... I didn't think about that.\n\nAn HTML compatible parser in Prawn would make my life really immensely easier (am I the only one?). Therefore, I want to suggest an alternative idea. Instead of extending the existing parser, how about adding a second one?\n\nPrawn could support two parsers:\n1. The one already in place without modifications.\n2. A new parser implementation with support for a (valid) subset of CSS/HTML5.\n\nThe user would have the ability to select the appropriate parser as needed:\n\n```\nwithout_formatting = \"Yada Yada\"\ntext(without_formatting) # or :inline_format => false\n\nwith_prawn_formatting = \"<font size='20'>Yada Yada.</font>\"\ntext(with_prawn_formatting, :inline_format => true) # or :default\n\nwith_html5_formatting = \"<span style='font-size:20pt;'>Yada Yada</span>\"\ntext(with_html5_formatting, :inline_format => :html5)\n```\n\nThe new parser could even be implemented in a new Gem. Prawn would only have to add the functionality for the user to select different parsers as illustrated above.\n. @bradediger Yes, I'm volunteering. However, I should probably create a separate pull request for that...\n\nThank you for your support! I'm hoping you will be available to answer occasional questions I might come up with during development :)\n. I moved the code from this pull request to a new branch named [html5-parser](https://github.com/cs/prawn/tree/html5-parser). Sorry for any inconveniences this may cause!\n. One more thing...\n\nFor now, all parsers are required to respond to only one method (that's the interface parsers have to implement):\n\n```\ndef to_array(string, *args)\n   # parse string and produce a prawn compatible array...\n   return [] # stub\nend\n```\n\nThe other methods in `Prawn::Text::Formatted::Parser` still have to be dealt with accordingly.\n. Hi! I realize that you won't merge this pull request in its present form (mainly for the lack of documentation). However, some kind of feedback would be nice nonetheless? \n\nAm I on the right track? Would you prefer some kind of different approach? I would really appreciate getting answers to those questions before investing more work.\n. @yob, thank you for your feedback...\n\nI just wanted to let you know, that I'm still interested in this. Actually, I'm using my pluggable parsers implementation in production at the moment.\n\nThere's an example application available [here](https://github.com/cs/prawn-html5-example), illustrating the possibility of using WYSIWYG editing for prawn PDF documents (enabled by the pluggable parsers extension).\n. :+1: \n. @cheba Exactly. @proactive is my company's account and I am the owner and the CEO...\n. ",
    "mikezter": "It's not `to_s` which fixes this, but `to_str`. Thats because `ActiveSupport::SafeBuffer` implements `to_s` to return `self`.\n`to_str` returns a copy of the underlying String.\n\nHowever, i think this is ActiveSupports fault. You can also provide only Strings to Prawn, not ActiveSupport::SafeBuffers.\n. It's not `to_s` which fixes this, but `to_str`. Thats because `ActiveSupport::SafeBuffer` implements `to_s` to return `self`.\n`to_str` returns a copy of the underlying String.\n\nHowever, i think this is ActiveSupports fault. You can also provide only Strings to Prawn, not ActiveSupport::SafeBuffers.\n. ",
    "ipd": "I'm  having this problem too!  Why was this issue closed?  \n. I'm  having this problem too!  Why was this issue closed?  \n. ",
    "kellym": "This happens if you `include ActionView::Helpers` in a subclassed `Prawn::Document`. It overrides the default `render` method.\n. :+1: \n. This happens if you `include ActionView::Helpers` in a subclassed `Prawn::Document`. It overrides the default `render` method.\n. :+1: \n. ",
    "i2dave": "Hi Brad:\n\nThanks for getting back to me. My colleague was in touch with someone from Prawn and he was told that Prawn does not support merging multipage PDFs, which is what we need to do on our project. This is a functionality that Prawn needs to implement.\n\nThanks,\nDave.\n. Hi Brad:\n\nThanks for the suggestion. I'm busy with a current project, but I will try to develop a patch after it's done.\n\nThanks,\nDave.\n. Hi Brad:\n\nThanks for getting back to me. My colleague was in touch with someone from Prawn and he was told that Prawn does not support merging multipage PDFs, which is what we need to do on our project. This is a functionality that Prawn needs to implement.\n\nThanks,\nDave.\n. Hi Brad:\n\nThanks for the suggestion. I'm busy with a current project, but I will try to develop a patch after it's done.\n\nThanks,\nDave.\n. ",
    "oli-g": "Thank you! I completely forgot the padding default...\nKeep the good work!\n. Hello Daniel, thank you for the quick response.\nI'm going to tell you my exact situation, hoping that you can provide me a workaround for my problem: thank you for the workaround you provide me, but unfortunately it does not solve my issue.\n\nI'm printing math quizzes, so I need to have support for characters such as \u2075, \u03c0, etc....\nI print these pdfs without touching fonts, because the prawn default font (Helvetica) is the exact font of these documents.\nWith Helvetica I print some texts in bold, such as the title, the column headers, etc....\n\nBut Helvetica does not suppor the glyphes I need, so I configured the Calibri fallback font to print them when present in the question content.\nNow... the problem is that all bold text (in Helvetica) is now printed as normal. Glyphes in questions content are displayed correctly.\n\nSo, in order to let you understand: I don't want to print things in bold with the Calibri fallback font, but I want that the bold text printed in Helvetica stays bold.\n\nI tried to apply the previous workaround you give me, but no way.... bold text keep to be displayed as normal.\nThank you for the feedback.\n\nGiannicola \n. Nothing changed... The bold text in Helvetica is printed as normal....\nThe problem is:\n- If I don't set a fallback font, most glyphes are displayed as _ (because the default Helvetica font does not have them);\n- If I set a fallback font, bold text in Helvetica is printed incorrectly as normal.\n\nThank you for the support! Please tell me if you want some code.\n. Check it out: fork [this repository](https://github.com/oli-g/prawn_issue_263). The app reflects the situation where I am in my real application. I used ruby 1.9.2-p180 and rails 3.0.7.\nLet me know if you have some problem or if I can help you in some ways...\nThank you\n\nGiannicola\n. Unfortunately I can't go that way, because I want to print in Calibri only glyphes: how to tell Prawn to use Calibri only for printing glyphes?\n\nBy the way, [this](https://github.com/oli-g/prawn_issue_263_bis) is a simplier ruby app: just `bundle install` and `ruby prawn_issue_263_bis.rb`\n\nThank you for your support! I really appreciate it.\n. Hello Daniel, any news? Can I help in some way?\n. You're right, now it works. But I think it's a workaround, the problem remains, because `row(0).column(1).font_style = :bold` is correct, and it's even more elegant than writing inline markup in the strings.\nSo I don't know if we can close this issue or not.\nBy the way, I thank you very much for the help!\n. Thank you! I completely forgot the padding default...\nKeep the good work!\n. Hello Daniel, thank you for the quick response.\nI'm going to tell you my exact situation, hoping that you can provide me a workaround for my problem: thank you for the workaround you provide me, but unfortunately it does not solve my issue.\n\nI'm printing math quizzes, so I need to have support for characters such as \u2075, \u03c0, etc....\nI print these pdfs without touching fonts, because the prawn default font (Helvetica) is the exact font of these documents.\nWith Helvetica I print some texts in bold, such as the title, the column headers, etc....\n\nBut Helvetica does not suppor the glyphes I need, so I configured the Calibri fallback font to print them when present in the question content.\nNow... the problem is that all bold text (in Helvetica) is now printed as normal. Glyphes in questions content are displayed correctly.\n\nSo, in order to let you understand: I don't want to print things in bold with the Calibri fallback font, but I want that the bold text printed in Helvetica stays bold.\n\nI tried to apply the previous workaround you give me, but no way.... bold text keep to be displayed as normal.\nThank you for the feedback.\n\nGiannicola \n. Nothing changed... The bold text in Helvetica is printed as normal....\nThe problem is:\n- If I don't set a fallback font, most glyphes are displayed as _ (because the default Helvetica font does not have them);\n- If I set a fallback font, bold text in Helvetica is printed incorrectly as normal.\n\nThank you for the support! Please tell me if you want some code.\n. Check it out: fork [this repository](https://github.com/oli-g/prawn_issue_263). The app reflects the situation where I am in my real application. I used ruby 1.9.2-p180 and rails 3.0.7.\nLet me know if you have some problem or if I can help you in some ways...\nThank you\n\nGiannicola\n. Unfortunately I can't go that way, because I want to print in Calibri only glyphes: how to tell Prawn to use Calibri only for printing glyphes?\n\nBy the way, [this](https://github.com/oli-g/prawn_issue_263_bis) is a simplier ruby app: just `bundle install` and `ruby prawn_issue_263_bis.rb`\n\nThank you for your support! I really appreciate it.\n. Hello Daniel, any news? Can I help in some way?\n. You're right, now it works. But I think it's a workaround, the problem remains, because `row(0).column(1).font_style = :bold` is correct, and it's even more elegant than writing inline markup in the strings.\nSo I don't know if we can close this issue or not.\nBy the way, I thank you very much for the help!\n. ",
    "vspar": "Hi\n\nYour image actually illustrates the problem. It's only slightly off but if you look closely you will see that the middle line is mis-aligned by about 2 points - almost like it's adding some extra padding on that middle line.\n\nThis never happened on version 0.8.4.\n\nI admit it's not a major bug, but it is still a bug that's been introduced since the old version.\n\nThanks\nVic\n. Hi\n\nYour image actually illustrates the problem. It's only slightly off but if you look closely you will see that the middle line is mis-aligned by about 2 points - almost like it's adding some extra padding on that middle line.\n\nThis never happened on version 0.8.4.\n\nI admit it's not a major bug, but it is still a bug that's been introduced since the old version.\n\nThanks\nVic\n. ",
    "sermoa": "Oh, perhaps this helps someone diagnose the problem. This is when using ruby-1.9.2-p180 on ubuntu, with Rails 3.1.0.rc4.\n\n**\\* glibc detected **\\* ruby: free(): invalid next size (fast): 0x0000000005f8f3f0 ***\n======= Backtrace: =========\n/lib/libc.so.6(+0x775b6)[0x7f96ce5455b6]\n/lib/libc.so.6(cfree+0x73)[0x7f96ce54be83]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(+0x7c38e)[0x7f96cf3b238e]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(+0x7cddd)[0x7f96cf3b2ddd]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(rb_str_buf_new+0xc3)[0x7f96cf453bb3]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(rb_enc_vsprintf+0x44)[0x7f96cf449dc4]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(rb_enc_sprintf+0x88)[0x7f96cf449fa8]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(+0x166395)[0x7f96cf49c395]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(+0x1654cf)[0x7f96cf49b4cf]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(rb_make_backtrace+0x42)[0x7f96cf49d712]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(+0x69a05)[0x7f96cf39fa05]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(rb_exc_raise+0x46)[0x7f96cf3a00d6]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(+0x61682)[0x7f96cf397682]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(+0x1788fe)[0x7f96cf4ae8fe]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(+0x17893b)[0x7f96cf4ae93b]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(+0x1763d0)[0x7f96cf4ac3d0]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(+0x169429)[0x7f96cf49f429]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(+0x16fbf9)[0x7f96cf4a5bf9]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(+0x170690)[0x7f96cf4a6690]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(+0x174083)[0x7f96cf4aa083]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(+0x1763d0)[0x7f96cf4ac3d0]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(+0x169429)[0x7f96cf49f429]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(+0x16fbf9)[0x7f96cf4a5bf9]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(rb_yield+0x69)[0x7f96cf4a8f09]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(rb_ary_each+0x45)[0x7f96cf368585]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(+0x1763d0)[0x7f96cf4ac3d0]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(+0x169429)[0x7f96cf49f429]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(+0x16fbf9)[0x7f96cf4a5bf9]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(+0x173a2d)[0x7f96cf4a9a2d]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(+0x173f10)[0x7f96cf4a9f10]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(+0x1763d0)[0x7f96cf4ac3d0]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(+0x169429)[0x7f96cf49f429]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(+0x16fbf9)[0x7f96cf4a5bf9]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(+0x17154c)[0x7f96cf4a754c]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(rb_funcall+0x115)[0x7f96cf4a7f45]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(+0x66cc2)[0x7f96cf39ccc2]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(+0x1763d0)[0x7f96cf4ac3d0]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(+0x169429)[0x7f96cf49f429]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(+0x16fbf9)[0x7f96cf4a5bf9]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(rb_yield+0x69)[0x7f96cf4a8f09]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(rb_ary_each+0x45)[0x7f96cf368585]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(+0x1763d0)[0x7f96cf4ac3d0]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(+0x169429)[0x7f96cf49f429]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(+0x16fbf9)[0x7f96cf4a5bf9]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(+0x17154c)[0x7f96cf4a754c]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(rb_funcall+0x115)[0x7f96cf4a7f45]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(+0x66cc2)[0x7f96cf39ccc2]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(+0x1763d0)[0x7f96cf4ac3d0]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(+0x169429)[0x7f96cf49f429]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(+0x16fbf9)[0x7f96cf4a5bf9]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(rb_yield+0x69)[0x7f96cf4a8f09]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(rb_ary_each+0x45)[0x7f96cf368585]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(+0x1763d0)[0x7f96cf4ac3d0]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(+0x169429)[0x7f96cf49f429]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(+0x16fbf9)[0x7f96cf4a5bf9]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(rb_iseq_eval+0x1f6)[0x7f96cf4a6256]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(+0x6a4f0)[0x7f96cf3a04f0]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(+0x6a64d)[0x7f96cf3a064d]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(+0x1763d0)[0x7f96cf4ac3d0]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(+0x16c3b3)[0x7f96cf4a23b3]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(+0x16fbf9)[0x7f96cf4a5bf9]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(rb_yield+0x69)[0x7f96cf4a8f09]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(+0x395c5)[0x7f96cf36f5c5]\n======= Memory map: ========\n00400000-00401000 r-xp 00000000 08:01 2885489                            /usr/local/rvm/rubies/ruby-1.9.2-p180/bin/ruby\n00600000-00601000 r--p 00000000 08:01 2885489                            /usr/local/rvm/rubies/ruby-1.9.2-p180/bin/ruby\n00601000-00602000 rw-p 00001000 08:01 2885489                            /usr/local/rvm/rubies/ruby-1.9.2-p180/bin/ruby\n01081000-0635d000 rw-p 00000000 00:00 0                                  [heap]\n7f96c0000000-7f96c0021000 rw-p 00000000 00:00 0 \n7f96c0021000-7f96c4000000 ---p 00000000 00:00 0 \n7f96c40a8000-7f96c40b4000 r-xp 00000000 08:01 1837701                    /lib/libnss_files-2.11.1.so\n7f96c40b4000-7f96c42b3000 ---p 0000c000 08:01 1837701                    /lib/libnss_files-2.11.1.so\n7f96c42b3000-7f96c42b4000 r--p 0000b000 08:01 1837701                    /lib/libnss_files-2.11.1.so\n7f96c42b4000-7f96c42b5000 rw-p 0000c000 08:01 1837701                    /lib/libnss_files-2.11.1.so\n7f96c42b5000-7f96c42bf000 r-xp 00000000 08:01 1837703                    /lib/libnss_nis-2.11.1.so\n7f96c42bf000-7f96c44be000 ---p 0000a000 08:01 1837703                    /lib/libnss_nis-2.11.1.so\n7f96c44be000-7f96c44bf000 r--p 00009000 08:01 1837703                    /lib/libnss_nis-2.11.1.so\n7f96c44bf000-7f96c44c0000 rw-p 0000a000 08:01 1837703                    /lib/libnss_nis-2.11.1.so\n7f96c44c0000-7f96c44d7000 r-xp 00000000 08:01 1837698                    /lib/libnsl-2.11.1.so\n7f96c44d7000-7f96c46d6000 ---p 00017000 08:01 1837698                    /lib/libnsl-2.11.1.so\n7f96c46d6000-7f96c46d7000 r--p 00016000 08:01 1837698                    /lib/libnsl-2.11.1.soAborted\n. Oh, perhaps this helps someone diagnose the problem. This is when using ruby-1.9.2-p180 on ubuntu, with Rails 3.1.0.rc4.\n\n**\\* glibc detected **\\* ruby: free(): invalid next size (fast): 0x0000000005f8f3f0 ***\n======= Backtrace: =========\n/lib/libc.so.6(+0x775b6)[0x7f96ce5455b6]\n/lib/libc.so.6(cfree+0x73)[0x7f96ce54be83]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(+0x7c38e)[0x7f96cf3b238e]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(+0x7cddd)[0x7f96cf3b2ddd]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(rb_str_buf_new+0xc3)[0x7f96cf453bb3]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(rb_enc_vsprintf+0x44)[0x7f96cf449dc4]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(rb_enc_sprintf+0x88)[0x7f96cf449fa8]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(+0x166395)[0x7f96cf49c395]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(+0x1654cf)[0x7f96cf49b4cf]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(rb_make_backtrace+0x42)[0x7f96cf49d712]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(+0x69a05)[0x7f96cf39fa05]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(rb_exc_raise+0x46)[0x7f96cf3a00d6]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(+0x61682)[0x7f96cf397682]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(+0x1788fe)[0x7f96cf4ae8fe]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(+0x17893b)[0x7f96cf4ae93b]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(+0x1763d0)[0x7f96cf4ac3d0]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(+0x169429)[0x7f96cf49f429]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(+0x16fbf9)[0x7f96cf4a5bf9]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(+0x170690)[0x7f96cf4a6690]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(+0x174083)[0x7f96cf4aa083]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(+0x1763d0)[0x7f96cf4ac3d0]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(+0x169429)[0x7f96cf49f429]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(+0x16fbf9)[0x7f96cf4a5bf9]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(rb_yield+0x69)[0x7f96cf4a8f09]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(rb_ary_each+0x45)[0x7f96cf368585]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(+0x1763d0)[0x7f96cf4ac3d0]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(+0x169429)[0x7f96cf49f429]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(+0x16fbf9)[0x7f96cf4a5bf9]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(+0x173a2d)[0x7f96cf4a9a2d]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(+0x173f10)[0x7f96cf4a9f10]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(+0x1763d0)[0x7f96cf4ac3d0]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(+0x169429)[0x7f96cf49f429]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(+0x16fbf9)[0x7f96cf4a5bf9]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(+0x17154c)[0x7f96cf4a754c]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(rb_funcall+0x115)[0x7f96cf4a7f45]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(+0x66cc2)[0x7f96cf39ccc2]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(+0x1763d0)[0x7f96cf4ac3d0]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(+0x169429)[0x7f96cf49f429]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(+0x16fbf9)[0x7f96cf4a5bf9]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(rb_yield+0x69)[0x7f96cf4a8f09]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(rb_ary_each+0x45)[0x7f96cf368585]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(+0x1763d0)[0x7f96cf4ac3d0]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(+0x169429)[0x7f96cf49f429]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(+0x16fbf9)[0x7f96cf4a5bf9]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(+0x17154c)[0x7f96cf4a754c]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(rb_funcall+0x115)[0x7f96cf4a7f45]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(+0x66cc2)[0x7f96cf39ccc2]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(+0x1763d0)[0x7f96cf4ac3d0]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(+0x169429)[0x7f96cf49f429]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(+0x16fbf9)[0x7f96cf4a5bf9]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(rb_yield+0x69)[0x7f96cf4a8f09]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(rb_ary_each+0x45)[0x7f96cf368585]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(+0x1763d0)[0x7f96cf4ac3d0]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(+0x169429)[0x7f96cf49f429]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(+0x16fbf9)[0x7f96cf4a5bf9]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(rb_iseq_eval+0x1f6)[0x7f96cf4a6256]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(+0x6a4f0)[0x7f96cf3a04f0]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(+0x6a64d)[0x7f96cf3a064d]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(+0x1763d0)[0x7f96cf4ac3d0]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(+0x16c3b3)[0x7f96cf4a23b3]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(+0x16fbf9)[0x7f96cf4a5bf9]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(rb_yield+0x69)[0x7f96cf4a8f09]\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/libruby.so.1.9(+0x395c5)[0x7f96cf36f5c5]\n======= Memory map: ========\n00400000-00401000 r-xp 00000000 08:01 2885489                            /usr/local/rvm/rubies/ruby-1.9.2-p180/bin/ruby\n00600000-00601000 r--p 00000000 08:01 2885489                            /usr/local/rvm/rubies/ruby-1.9.2-p180/bin/ruby\n00601000-00602000 rw-p 00001000 08:01 2885489                            /usr/local/rvm/rubies/ruby-1.9.2-p180/bin/ruby\n01081000-0635d000 rw-p 00000000 00:00 0                                  [heap]\n7f96c0000000-7f96c0021000 rw-p 00000000 00:00 0 \n7f96c0021000-7f96c4000000 ---p 00000000 00:00 0 \n7f96c40a8000-7f96c40b4000 r-xp 00000000 08:01 1837701                    /lib/libnss_files-2.11.1.so\n7f96c40b4000-7f96c42b3000 ---p 0000c000 08:01 1837701                    /lib/libnss_files-2.11.1.so\n7f96c42b3000-7f96c42b4000 r--p 0000b000 08:01 1837701                    /lib/libnss_files-2.11.1.so\n7f96c42b4000-7f96c42b5000 rw-p 0000c000 08:01 1837701                    /lib/libnss_files-2.11.1.so\n7f96c42b5000-7f96c42bf000 r-xp 00000000 08:01 1837703                    /lib/libnss_nis-2.11.1.so\n7f96c42bf000-7f96c44be000 ---p 0000a000 08:01 1837703                    /lib/libnss_nis-2.11.1.so\n7f96c44be000-7f96c44bf000 r--p 00009000 08:01 1837703                    /lib/libnss_nis-2.11.1.so\n7f96c44bf000-7f96c44c0000 rw-p 0000a000 08:01 1837703                    /lib/libnss_nis-2.11.1.so\n7f96c44c0000-7f96c44d7000 r-xp 00000000 08:01 1837698                    /lib/libnsl-2.11.1.so\n7f96c44d7000-7f96c46d6000 ---p 00017000 08:01 1837698                    /lib/libnsl-2.11.1.so\n7f96c46d6000-7f96c46d7000 r--p 00016000 08:01 1837698                    /lib/libnsl-2.11.1.soAborted\n. ",
    "romuloceccon": "Sorry. e2ee4e7f335e7490fefa26ce2c26acd7b74056d6 already fixes this.\n. Sorry. e2ee4e7f335e7490fefa26ce2c26acd7b74056d6 already fixes this.\n. ",
    "serussell": "That fixes it admirably.  Thanks.\n. Thanks again for another speedy fix!\n. Please see #261, which I believe is related to this ticket.\n. That fixes it admirably.  Thanks.\n. Thanks again for another speedy fix!\n. Please see #261, which I believe is related to this ticket.\n. ",
    "betjaminrichards": "I'm experiencing the same issue. In my Gemfile:\n\n`ruby gem 'prawn', :git => 'https://github.com/sandal/prawn.git', :branch => 'stable', :submodules => true`\n\nOutput:\n\n/Users/tombrammar/.rvm/gems/ruby-1.9.3-p0@corallatest/bundler/gems/prawn-c8218f36d91a/prawn.gemspec:1: warning: already initialized constant PRAWN_VERSION\n\nVersions:\n\nBundler -v = Bundler version 1.0.21\nPrawn = Using prawn (1.0.0.rc1) from https://github.com/sandal/prawn.git (at stable)\ngem -v = 1.8.10\nruby --version = ruby 1.9.3p0 (2011-10-30 revision 33570) [x86_64-darwin11.2.0]\nrails -v = 3.1.1\n. I'm experiencing the same issue. In my Gemfile:\n\n`ruby gem 'prawn', :git => 'https://github.com/sandal/prawn.git', :branch => 'stable', :submodules => true`\n\nOutput:\n\n/Users/tombrammar/.rvm/gems/ruby-1.9.3-p0@corallatest/bundler/gems/prawn-c8218f36d91a/prawn.gemspec:1: warning: already initialized constant PRAWN_VERSION\n\nVersions:\n\nBundler -v = Bundler version 1.0.21\nPrawn = Using prawn (1.0.0.rc1) from https://github.com/sandal/prawn.git (at stable)\ngem -v = 1.8.10\nruby --version = ruby 1.9.3p0 (2011-10-30 revision 33570) [x86_64-darwin11.2.0]\nrails -v = 3.1.1\n. ",
    "guapolo": "Issue fixed using tag 12.0 :) thanks!\n. Issue fixed using tag 12.0 :) thanks!\n. ",
    "kmamykin": "I am also experiencing the issue, and it is not related to tables.\n\nI am using \n    @pdf.text_box \"Some text all ascii\", :fallback_fonts =>['DroidFallback'], :style=>:bold\nWhen fallback font is specified, the text is not bolded.\nUnfortunately I can't use inline_format as #text_box does not accept it as a valid option.\n. I have written small repro code here:\nhttps://github.com/kmamykin/prawn_fallback_fonts_issue\n. Ha, yes, was able to make it work. The https://github.com/kmamykin/prawn_fallback_fonts_issue repo is updated with what I did. \nThanks for pointing the workaround.\n. I am also experiencing the issue, and it is not related to tables.\n\nI am using \n    @pdf.text_box \"Some text all ascii\", :fallback_fonts =>['DroidFallback'], :style=>:bold\nWhen fallback font is specified, the text is not bolded.\nUnfortunately I can't use inline_format as #text_box does not accept it as a valid option.\n. I have written small repro code here:\nhttps://github.com/kmamykin/prawn_fallback_fonts_issue\n. Ha, yes, was able to make it work. The https://github.com/kmamykin/prawn_fallback_fonts_issue repo is updated with what I did. \nThanks for pointing the workaround.\n. ",
    "pbc": "is there any chance for fixing this issue any time soon?\n. +1 RC2 would be great, we also use colspan in tables so we point to a specific commit on master for now\n. RC2 is available since yesterday from what I can see so thx for that :)\n. is there any chance for fixing this issue any time soon?\n. +1 RC2 would be great, we also use colspan in tables so we point to a specific commit on master for now\n. RC2 is available since yesterday from what I can see so thx for that :)\n. ",
    "daniel-nelson": "I've added a to-do for myself to investigate it, but I'm on a couple deadlines that will prevent me from looking into this for a several weeks. If you or anyone else is interested, I think it should be an easy fix. Here are the notes I left for myself in the to-do entry:\n\nPrawn fallback support with font family support: if a particular style has been registered with the font family, then attempt to set that style again when setting the fallback font. Check to see how this behaves when the current style has not been registered with the fallback font family. If it has not been, then fall back to the plain fallback font.\n. Perhaps the least invasive and most general purpose route would be to turn your :disable_wrap_by_char option into an explicit user option, rather than an automatic one. I think this was an option way back when, before I rewrote the text box engine. \n\nIf you update your patch (please include specs) to take this approach, then that would work for me.\n. I've added a to-do for myself to investigate it, but I'm on a couple deadlines that will prevent me from looking into this for a several weeks. If you or anyone else is interested, I think it should be an easy fix. Here are the notes I left for myself in the to-do entry:\n\nPrawn fallback support with font family support: if a particular style has been registered with the font family, then attempt to set that style again when setting the fallback font. Check to see how this behaves when the current style has not been registered with the fallback font family. If it has not been, then fall back to the plain fallback font.\n. Perhaps the least invasive and most general purpose route would be to turn your :disable_wrap_by_char option into an explicit user option, rather than an automatic one. I think this was an option way back when, before I rewrote the text box engine. \n\nIf you update your patch (please include specs) to take this approach, then that would work for me.\n. ",
    "magicmarkker": "I too would like a fix for this, as its currently causing users to complain.\n. I too would like a fix for this, as its currently causing users to complain.\n. ",
    "stefanneculai": "It's still present.\n. #743 fixes it.\n. It's still present.\n. #743 fixes it.\n. ",
    "irongaze": "+1 on this issue - without it, using #group is not feasible for user-generated content.\n. +1 on this issue - without it, using #group is not feasible for user-generated content.\n. ",
    "skandragon": "+1 -- having problems using group as well.\n. I know this is a very old ticket, but it is a showstopper for me currently.  Can someone provide a few hints about what might be needed to fix this, so that I can use group to ensure a block of user-submitted text will fit on a page, using #group?\n. +1\n. I'm not sure if I stumbled on this or not, but I ran this code, and it works as intended -- I end up with a 100 x 100 area with a locally defined grid, and a second area with a 200 x 200 locally defined grid.\n\n``` ruby\n  bounding_box([0, 100], height: 100, width: 100) do\n    line_width 0.5\n    define_grid(columns: 4, rows: 4, gutter: 0)\n\n    grid.show_all\n\n    grid([0, 0], [2, 2]).bounding_box do\n      stroke_bounds\n    end\n  end\n\n  bounding_box([200, 200], height: 200, width: 200) do\n    line_width 0.5\n    define_grid(columns: 8, rows: 8, gutter: 0)\n\n    grid.show_all\n\n    grid([0, 0], [2, 2]).bounding_box do\n      stroke_bounds\n    end\n  end\n```\n. +1 -- having problems using group as well.\n. I know this is a very old ticket, but it is a showstopper for me currently.  Can someone provide a few hints about what might be needed to fix this, so that I can use group to ensure a block of user-submitted text will fit on a page, using #group?\n. +1\n. I'm not sure if I stumbled on this or not, but I ran this code, and it works as intended -- I end up with a 100 x 100 area with a locally defined grid, and a second area with a 200 x 200 locally defined grid.\n\n``` ruby\n  bounding_box([0, 100], height: 100, width: 100) do\n    line_width 0.5\n    define_grid(columns: 4, rows: 4, gutter: 0)\n\n    grid.show_all\n\n    grid([0, 0], [2, 2]).bounding_box do\n      stroke_bounds\n    end\n  end\n\n  bounding_box([200, 200], height: 200, width: 200) do\n    line_width 0.5\n    define_grid(columns: 8, rows: 8, gutter: 0)\n\n    grid.show_all\n\n    grid([0, 0], [2, 2]).bounding_box do\n      stroke_bounds\n    end\n  end\n```\n. ",
    "nathansamson": "Is this bug the cause for  #501 ?\n. I can confirm that taking a deep_copy of @internal_state fixes the problem.\n\nNote that the changes to the code results in 6 other tests failing. (:()\nProblem currently lies in taking the deep_copy. I do this naively with the ruby_deep_copy gem, and I believe it is not able to correcly clone everything (especially Fonts & some other object stuff).\n\nI guess we can take a more conservative approach and not taking a deep_copy of everything but just the fields that are deep_copyable.. (especially not streams, Files, procs & alike).\n. I looked at it again, but I realy don't have the knowledge of the PDF spec (not sure if it is needed), or the Prawn codebase to do this\n\nI still feel the clue lies in correctly deep copying (in a sane way) of the internal_state object. But since it is using things like references and stuff, I am actually not sure what the expectation of the API is, and how safe it is to do..\n\nIf someone else wants to have a look at defining the \"clone\" feature of GraphicsState, or guiding me that would be very helpful.\n. @sandal does it have a testcase so it doesn't regress again magically (since it appears to have been fixed automagically)\n. What is the rationale behind this move? (Just wondering, not complaining - yet).\n\nMoving stuff out to different gems might have both advantages & disadvantages. Obvious disadvantage is more release coordination/maintenance. Obvious advantage is smaller gems, maybe more development attraction on the PDF::Core gem.\nNote that savon (totally unrelated gem) is moving in the opposite direction of what you are doing here\n. @MarkDBlackwell is accepting / rejecting input files not something your application should do instead of a library?\nAlso did you consider using  https://github.com/amberbit/prawn-fast-png (it was discussed before). Pretty sure that library will give you something close to your 130% slowness ratio... (at least closer than what we have now).\n. prawn-fast-png seems to be working fine for me on 1.0.0-rc though (I know this is older than the 0.13.0 release, don't get me started on that).\n\nIf a replacement exists in the form of prawn-gmagick then the main point of my argument still sticks, but thanks for the info!\n. Just tested in Evince (Poppler based) and it is also correctly displaying the text without any errors.\n. as long as the current header doesn't state non-UTF8 directly (and was\nreplaced with UTF8) we should be fairly safe as ruby 2.0 uses UTF8 by\ndefault if I am not mistaken.\n\nSo any encoding related bugs probably would have been found by unittests\nand/or by users (since ruby 2.0 is out for quite some time).\nI use this in a ruby 2 environment and I didn't notice any errouneous\nbehaviour\n\nOn Mon, Apr 7, 2014 at 7:17 PM, Gregory Brown notifications@github.comwrote:\n\n> I think we're in good shape then. We may have been cargo culting a bit in\n> the past, or dealing with problems that no longer exist.\n> \n> ## \n> \n> Reply to this email directly or view it on GitHubhttps://github.com/prawnpdf/prawn/pull/705#issuecomment-39757485\n> .\n. I agree that prawn should continue supporting ruby 1.9.3\n\nI am just saying that this patch (as far as I can see), just declares what\nis the default in ruby 2.0 anyway. This means that any enconding related\nissues should already exist in ruby 2.0 which doesn't seem to be the case\n(looking at absence of  incoming bug reports). The change should be fairly\nsafe in that sense.\n\nOn Mon, Apr 7, 2014 at 7:40 PM, Gregory Brown notifications@github.comwrote:\n\n> @nathansamson https://github.com/nathansamson We support Ruby 1.9.3 as\n> well as JRuby in 1.9 mode, so we cannot simply assume Ruby 2.0+. But since\n> we test those in CI, if there aren't problems there we should be OK.\n> \n> ## \n> \n> Reply to this email directly or view it on GitHubhttps://github.com/prawnpdf/prawn/pull/705#issuecomment-39759982\n> .\n. ```\ndocument.on_page_create do |doc|\n # more stuff\nend\n```\n\nObviously only works for the second page and later, unless you do pass `skip_page_creation: true` on document creation...\n\nSo even if on_page_create is resurected it feels a bit clunky... Repeaters with different z-indexes sounds nice though\n. Unless i miscalculated this image will take 8gb in data (uncompressed,\n32bits per pixel).\n\nSo while i cant explain 20gb usage, and prawn might try to do a better job\nin reading in chunks this sounds like a not so unexpectedly behavior.\n\nMy advise is to scale the image down before it enters prawn. Alternatively\ntry to recreate the image (if it suits it) as vector which also should\nreduce memory consumption (although I am not sure prawn actually supports\nsomething like svg)\n\nNathan\nOp 27 mei 2015 09:35 schreef \"Joakim Kolsj\u00f6\" notifications@github.com:\n\n> This caused our rails processes to grow from about 500mb to 20-30 GB.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/prawnpdf/prawn/issues/880#issuecomment-105800399.\n. Is this bug the cause for  #501 ?\n. I can confirm that taking a deep_copy of @internal_state fixes the problem.\n\nNote that the changes to the code results in 6 other tests failing. (:()\nProblem currently lies in taking the deep_copy. I do this naively with the ruby_deep_copy gem, and I believe it is not able to correcly clone everything (especially Fonts & some other object stuff).\n\nI guess we can take a more conservative approach and not taking a deep_copy of everything but just the fields that are deep_copyable.. (especially not streams, Files, procs & alike).\n. I looked at it again, but I realy don't have the knowledge of the PDF spec (not sure if it is needed), or the Prawn codebase to do this\n\nI still feel the clue lies in correctly deep copying (in a sane way) of the internal_state object. But since it is using things like references and stuff, I am actually not sure what the expectation of the API is, and how safe it is to do..\n\nIf someone else wants to have a look at defining the \"clone\" feature of GraphicsState, or guiding me that would be very helpful.\n. @sandal does it have a testcase so it doesn't regress again magically (since it appears to have been fixed automagically)\n. What is the rationale behind this move? (Just wondering, not complaining - yet).\n\nMoving stuff out to different gems might have both advantages & disadvantages. Obvious disadvantage is more release coordination/maintenance. Obvious advantage is smaller gems, maybe more development attraction on the PDF::Core gem.\nNote that savon (totally unrelated gem) is moving in the opposite direction of what you are doing here\n. @MarkDBlackwell is accepting / rejecting input files not something your application should do instead of a library?\nAlso did you consider using  https://github.com/amberbit/prawn-fast-png (it was discussed before). Pretty sure that library will give you something close to your 130% slowness ratio... (at least closer than what we have now).\n. prawn-fast-png seems to be working fine for me on 1.0.0-rc though (I know this is older than the 0.13.0 release, don't get me started on that).\n\nIf a replacement exists in the form of prawn-gmagick then the main point of my argument still sticks, but thanks for the info!\n. Just tested in Evince (Poppler based) and it is also correctly displaying the text without any errors.\n. as long as the current header doesn't state non-UTF8 directly (and was\nreplaced with UTF8) we should be fairly safe as ruby 2.0 uses UTF8 by\ndefault if I am not mistaken.\n\nSo any encoding related bugs probably would have been found by unittests\nand/or by users (since ruby 2.0 is out for quite some time).\nI use this in a ruby 2 environment and I didn't notice any errouneous\nbehaviour\n\nOn Mon, Apr 7, 2014 at 7:17 PM, Gregory Brown notifications@github.comwrote:\n\n> I think we're in good shape then. We may have been cargo culting a bit in\n> the past, or dealing with problems that no longer exist.\n> \n> ## \n> \n> Reply to this email directly or view it on GitHubhttps://github.com/prawnpdf/prawn/pull/705#issuecomment-39757485\n> .\n. I agree that prawn should continue supporting ruby 1.9.3\n\nI am just saying that this patch (as far as I can see), just declares what\nis the default in ruby 2.0 anyway. This means that any enconding related\nissues should already exist in ruby 2.0 which doesn't seem to be the case\n(looking at absence of  incoming bug reports). The change should be fairly\nsafe in that sense.\n\nOn Mon, Apr 7, 2014 at 7:40 PM, Gregory Brown notifications@github.comwrote:\n\n> @nathansamson https://github.com/nathansamson We support Ruby 1.9.3 as\n> well as JRuby in 1.9 mode, so we cannot simply assume Ruby 2.0+. But since\n> we test those in CI, if there aren't problems there we should be OK.\n> \n> ## \n> \n> Reply to this email directly or view it on GitHubhttps://github.com/prawnpdf/prawn/pull/705#issuecomment-39759982\n> .\n. ```\ndocument.on_page_create do |doc|\n # more stuff\nend\n```\n\nObviously only works for the second page and later, unless you do pass `skip_page_creation: true` on document creation...\n\nSo even if on_page_create is resurected it feels a bit clunky... Repeaters with different z-indexes sounds nice though\n. Unless i miscalculated this image will take 8gb in data (uncompressed,\n32bits per pixel).\n\nSo while i cant explain 20gb usage, and prawn might try to do a better job\nin reading in chunks this sounds like a not so unexpectedly behavior.\n\nMy advise is to scale the image down before it enters prawn. Alternatively\ntry to recreate the image (if it suits it) as vector which also should\nreduce memory consumption (although I am not sure prawn actually supports\nsomething like svg)\n\nNathan\nOp 27 mei 2015 09:35 schreef \"Joakim Kolsj\u00f6\" notifications@github.com:\n\n> This caused our rails processes to grow from about 500mb to 20-30 GB.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/prawnpdf/prawn/issues/880#issuecomment-105800399.\n. ",
    "alexandergitter": "Span looks almost like it does what I need, unfortunately it breaks out of its parent bounding box. So\n\n``` ruby\ngroup do\n  span(4.cm) do\n    ...\n  end\nend\n```\n\nis not quite what I need.\nIs there any way to avoid that behaviour, or is this something that could be implemented?\n. As it turns out my proposed change fixes the problem only partially. The following code still produces a wrong result\n\n``` ruby\nPrawn::Document.generate('margins.pdf', :margin => [200, 200]) do\n  stroke_bounds\n  text \"text on page 1\"\n\n  start_new_page(:margin => [100, 100])\n  stroke_bounds\n\n  bounding_box([0, 500], :width => 300, :height => 300) do\n    stroke_bounds\n    text \"text on page 2\"\n\n    start_new_page  # notice this page-break inside a bounding_box\n    stroke_bounds\n    text \"text on page 3\"\n  end\n\n  go_to_page(1)\n  text \"this text is in a wrong position\"\nend\n```\n\nEdit: Okay I found out how to \"fix\" this. In generate_margin_box replace\n\n``` ruby\n@bounding_box = @margin_box if old_margin_box == @bounding_box\n```\n\nwith\n\n``` ruby\n@bounding_box = @margin_box\n```\n\nNow I'm sure there is a good reason for that if-statement. I just thought this might point someone in the right direction for a real fix.\n. Looks good!\n\nI tried both of my examples and they both work as expected. :+1: from me\n. Span looks almost like it does what I need, unfortunately it breaks out of its parent bounding box. So\n\n``` ruby\ngroup do\n  span(4.cm) do\n    ...\n  end\nend\n```\n\nis not quite what I need.\nIs there any way to avoid that behaviour, or is this something that could be implemented?\n. As it turns out my proposed change fixes the problem only partially. The following code still produces a wrong result\n\n``` ruby\nPrawn::Document.generate('margins.pdf', :margin => [200, 200]) do\n  stroke_bounds\n  text \"text on page 1\"\n\n  start_new_page(:margin => [100, 100])\n  stroke_bounds\n\n  bounding_box([0, 500], :width => 300, :height => 300) do\n    stroke_bounds\n    text \"text on page 2\"\n\n    start_new_page  # notice this page-break inside a bounding_box\n    stroke_bounds\n    text \"text on page 3\"\n  end\n\n  go_to_page(1)\n  text \"this text is in a wrong position\"\nend\n```\n\nEdit: Okay I found out how to \"fix\" this. In generate_margin_box replace\n\n``` ruby\n@bounding_box = @margin_box if old_margin_box == @bounding_box\n```\n\nwith\n\n``` ruby\n@bounding_box = @margin_box\n```\n\nNow I'm sure there is a good reason for that if-statement. I just thought this might point someone in the right direction for a real fix.\n. Looks good!\n\nI tried both of my examples and they both work as expected. :+1: from me\n. ",
    "Gerhardk": "What kind of script?\n\nI run rails server on a ruby 1.9.2 windows xp environment and it worked no encoding errors.\n. Well i'm no good with scripts I ran into this error in the web browser will the stack trace be of any help?\n. Here is the error within the browser:\n\nEncoding::CompatibilityError in Shafts#report\n\nShowing C:/app/views/shafts/report.pdf.prawn where line #3 raised:\n\nincompatible character encodings: UTF-8 and UTF-16BE\n\nExtracted source (around line #3):\n\n1: require \"prawn\"\n2: \n3: prawn_document(:filename=>\"#{name}.pdf\", :force_download=>true, :page_size => \"A4\") do |pdf|\n4:    types = applicable_types\n5:     pdf.fill_color \"B0232A\"\n6:     pdf.text \"Report\", :size => 20,:style => :bold\n\nRails.root: C:/app\nApplication Trace | Framework Trace | Full Trace\n\norg/jruby/RubyString.java:2431:in `concat'\nprawn (0.12.0) lib/prawn/core/pdf_object.rb:74:in`PdfObject'\nprawn (0.12.0) lib/prawn/core/pdf_object.rb:90:in `PdfObject'\norg/jruby/RubyHash.java:1175:in`each'\nprawn (0.12.0) lib/prawn/core/pdf_object.rb:85:in `PdfObject'\nprawn (0.12.0) lib/prawn/core/reference.rb:27:in`object'\nprawn (0.12.0) lib/prawn/core/document_state.rb:71:in `render_body'\nprawn (0.12.0) lib/prawn/core/object_store.rb:74:in`each'\norg/jruby/RubyArray.java:1603:in `each'\nprawn (0.12.0) lib/prawn/core/object_store.rb:73:in`each'\nprawn (0.12.0) lib/prawn/core/document_state.rb:69:in `render_body'\nprawn (0.12.0) lib/prawn/document/internals.rb:140:in`render_body'\nprawn (0.12.0) lib/prawn/document.rb:358:in `render'\nprawn_rails (0.0.7) lib/prawn_rails.rb:21:in`prawn_document'\napp/views/shafts/report.pdf.prawn:3:in `_app_views_shafts_report_pdf_prawn__872937026_13676_0'\norg/jruby/RubyBasicObject.java:1690:in`**send**'\norg/jruby/RubyKernel.java:2117:in `send'\nactionpack (3.0.7) lib/action_view/template.rb:135:in`render'\nactivesupport (3.0.7) lib/active_support/notifications.rb:54:in `instrument'\nactionpack (3.0.7) lib/action_view/template.rb:127:in`render'\nactionpack (3.0.7) lib/action_view/render/rendering.rb:59:in `_render_template'\nactivesupport (3.0.7) lib/active_support/notifications.rb:52:in`instrument'\nactivesupport (3.0.7) lib/active_support/notifications/instrumenter.rb:21:in `instrument'\nactivesupport (3.0.7) lib/active_support/notifications/instrumenter.rb:20:in`instrument'\nactivesupport (3.0.7) lib/active_support/notifications.rb:52:in `instrument'\nactionpack (3.0.7) lib/action_view/render/rendering.rb:56:in`_render_template'\nactionpack (3.0.7) lib/action_view/render/rendering.rb:26:in `render'\nhaml (3.1.2) lib/haml/helpers/action_view_mods.rb:13:in`render_with_haml'\nactionpack (3.0.7) lib/abstract_controller/rendering.rb:115:in `_render_template'\nactionpack (3.0.7) lib/abstract_controller/rendering.rb:109:in`render_to_body'\nactionpack (3.0.7) lib/action_controller/metal/renderers.rb:47:in `render_to_body'\nactionpack (3.0.7) lib/action_controller/metal/compatibility.rb:55:in`render_to_body'\nactionpack (3.0.7) lib/abstract_controller/rendering.rb:102:in `render_to_string'\nactionpack (3.0.7) lib/abstract_controller/rendering.rb:93:in`render'\nactionpack (3.0.7) lib/action_controller/metal/rendering.rb:17:in `render'\nactionpack (3.0.7) lib/action_controller/metal/instrumentation.rb:40:in`render'\nactivesupport (3.0.7) lib/active_support/core_ext/benchmark.rb:5:in `ms'\nc:/jruby-1.6.3/lib/ruby/1.9/benchmark.rb:309:in`realtime'\nactivesupport (3.0.7) lib/active_support/core_ext/benchmark.rb:5:in `ms'\nactionpack (3.0.7) lib/action_controller/metal/instrumentation.rb:40:in`render'\nactionpack (3.0.7) lib/action_controller/metal/instrumentation.rb:78:in `cleanup_view_runtime'\nactiverecord (3.0.7) lib/active_record/railties/controller_runtime.rb:15:in`cleanup_view_runtime'\nactionpack (3.0.7) lib/action_controller/metal/instrumentation.rb:39:in `render'\napp/controllers/shafts_controller.rb:70:in`report'\norg/jruby/RubyProc.java:256:in `call'\nactionpack (3.0.7) lib/action_controller/metal/mime_responds.rb:192:in`respond_to'\napp/controllers/shafts_controller.rb:68:in `report'\norg/jruby/RubyBasicObject.java:1684:in`__send__'\norg/jruby/RubyKernel.java:2113:in `send'\nactionpack (3.0.7) lib/action_controller/metal/implicit_render.rb:5:in`send_action'\nactionpack (3.0.7) lib/abstract_controller/base.rb:150:in `process_action'\nactionpack (3.0.7) lib/action_controller/metal/rendering.rb:11:in`process_action'\nactionpack (3.0.7) lib/abstract_controller/callbacks.rb:18:in `process_action'\nactivesupport (3.0.7) lib/active_support/callbacks.rb:449:in`_run__588507921__process_action__1074514439__callbacks'\norg/jruby/RubyBasicObject.java:1684:in `__send__'\norg/jruby/RubyKernel.java:2113:in `send'\nactivesupport (3.0.7) lib/active_support/callbacks.rb:425:in`_run_process_action_callbacks'\norg/jruby/RubyBasicObject.java:1690:in `__send__'\norg/jruby/RubyKernel.java:2117:in `send'\nactivesupport (3.0.7) lib/active_support/callbacks.rb:94:in`run_callbacks'\nactionpack (3.0.7) lib/abstract_controller/callbacks.rb:17:in `process_action'\nactionpack (3.0.7) lib/action_controller/metal/instrumentation.rb:30:in`process_action'\nactivesupport (3.0.7) lib/active_support/notifications.rb:52:in `instrument'\nactivesupport (3.0.7) lib/active_support/notifications/instrumenter.rb:21:in`instrument'\nactivesupport (3.0.7) lib/active_support/notifications/instrumenter.rb:20:in `instrument'\nactivesupport (3.0.7) lib/active_support/notifications.rb:52:in`instrument'\nactionpack (3.0.7) lib/action_controller/metal/instrumentation.rb:29:in `process_action'\nactionpack (3.0.7) lib/action_controller/metal/rescue.rb:17:in`process_action'\nactionpack (3.0.7) lib/abstract_controller/base.rb:119:in `process'\nactionpack (3.0.7) lib/abstract_controller/rendering.rb:41:in`process'\nactionpack (3.0.7) lib/action_controller/metal.rb:138:in `dispatch'\nactionpack (3.0.7) lib/action_controller/metal/rack_delegation.rb:14:in`dispatch'\nactionpack (3.0.7) lib/action_controller/metal.rb:178:in `action'\norg/jruby/RubyProc.java:256:in`call'\nactionpack (3.0.7) lib/action_dispatch/routing/route_set.rb:62:in `dispatch'\nactionpack (3.0.7) lib/action_dispatch/routing/route_set.rb:27:in`call'\nrack-mount (0.6.14) lib/rack/mount/route_set.rb:148:in `call'\nrack-mount (0.6.14) lib/rack/mount/code_generation.rb:111:in`recognize'\nrack-mount (0.6.14) lib/rack/mount/code_generation.rb:80:in `optimized_each'\nrack-mount (0.6.14) lib/rack/mount/code_generation.rb:110:in`recognize'\nrack-mount (0.6.14) lib/rack/mount/route_set.rb:139:in `call'\nactionpack (3.0.7) lib/action_dispatch/routing/route_set.rb:493:in`call'\nsass (3.1.5) lib/sass/plugin/rack.rb:54:in `call'\nwarden (1.0.5) lib/warden/manager.rb:35:in`call'\norg/jruby/RubyKernel.java:1205:in `catch'\nwarden (1.0.5) lib/warden/manager.rb:34:in`call'\nactionpack (3.0.7) lib/action_dispatch/middleware/best_standards_support.rb:17:in `call'\nactionpack (3.0.7) lib/action_dispatch/middleware/head.rb:14:in`call'\nrack (1.2.3) lib/rack/methodoverride.rb:24:in `call'\nactionpack (3.0.7) lib/action_dispatch/middleware/params_parser.rb:21:in`call'\nactionpack (3.0.7) lib/action_dispatch/middleware/flash.rb:182:in `call'\nactionpack (3.0.7) lib/action_dispatch/middleware/session/abstract_store.rb:149:in`call'\nactionpack (3.0.7) lib/action_dispatch/middleware/cookies.rb:302:in `call'\nactiverecord (3.0.7) lib/active_record/query_cache.rb:32:in`call'\nactiverecord (3.0.7) lib/active_record/connection_adapters/abstract/query_cache.rb:28:in `cache'\nactiverecord (3.0.7) lib/active_record/query_cache.rb:12:in`cache'\nactiverecord (3.0.7) lib/active_record/query_cache.rb:31:in `call'\nactiverecord (3.0.7) lib/active_record/connection_adapters/abstract/connection_pool.rb:354:in`call'\nactionpack (3.0.7) lib/action_dispatch/middleware/callbacks.rb:46:in `call'\nactivesupport (3.0.7) lib/active_support/callbacks.rb:431:in`_run_call_callbacks'\nactionpack (3.0.7) lib/action_dispatch/middleware/callbacks.rb:44:in `call'\nrack (1.2.3) lib/rack/sendfile.rb:107:in`call'\nactionpack (3.0.7) lib/action_dispatch/middleware/remote_ip.rb:48:in `call'\nactionpack (3.0.7) lib/action_dispatch/middleware/show_exceptions.rb:47:in`call'\nrailties (3.0.7) lib/rails/rack/logger.rb:13:in `call'\nrack (1.2.3) lib/rack/runtime.rb:17:in`call'\nactivesupport (3.0.7) lib/active_support/cache/strategy/local_cache.rb:90:in `call'\nrack (1.2.3) lib/rack/lock.rb:11:in`call'\nrack (1.2.3) lib/rack/lock.rb:11:in `call'\nactionpack (3.0.7) lib/action_dispatch/middleware/static.rb:30:in`call'\nrailties (3.0.7) lib/rails/application.rb:168:in `call'\norg/jruby/RubyBasicObject.java:1690:in`__send__'\norg/jruby/RubyKernel.java:2117:in `send'\nrailties (3.0.7) lib/rails/application.rb:77:in`method_missing'\nrailties (3.0.7) lib/rails/rack/log_tailer.rb:14:in `call'\nrack (1.2.3) lib/rack/content_length.rb:13:in`call'\nrack (1.2.3) lib/rack/handler/webrick.rb:52:in `service'\nc:/jruby-1.6.3/lib/ruby/1.9/webrick/httpserver.rb:111:in`service'\nc:/jruby-1.6.3/lib/ruby/1.9/webrick/httpserver.rb:70:in `run'\nc:/jruby-1.6.3/lib/ruby/1.9/webrick/server.rb:183:in`start_thread'\n\nRequest\n\nParameters:\n\n{\"id\"=>\"1\",\n \"format\"=>\"pdf\"}\n\nShow session dump\n\nShow env dump\nResponse\n\nHeaders:\n\nNone\n. Hey yob tried to update my prawn but no changes using it as a gem which version should I use for the fix to work\n. What kind of script?\n\nI run rails server on a ruby 1.9.2 windows xp environment and it worked no encoding errors.\n. Well i'm no good with scripts I ran into this error in the web browser will the stack trace be of any help?\n. Here is the error within the browser:\n\nEncoding::CompatibilityError in Shafts#report\n\nShowing C:/app/views/shafts/report.pdf.prawn where line #3 raised:\n\nincompatible character encodings: UTF-8 and UTF-16BE\n\nExtracted source (around line #3):\n\n1: require \"prawn\"\n2: \n3: prawn_document(:filename=>\"#{name}.pdf\", :force_download=>true, :page_size => \"A4\") do |pdf|\n4:    types = applicable_types\n5:     pdf.fill_color \"B0232A\"\n6:     pdf.text \"Report\", :size => 20,:style => :bold\n\nRails.root: C:/app\nApplication Trace | Framework Trace | Full Trace\n\norg/jruby/RubyString.java:2431:in `concat'\nprawn (0.12.0) lib/prawn/core/pdf_object.rb:74:in`PdfObject'\nprawn (0.12.0) lib/prawn/core/pdf_object.rb:90:in `PdfObject'\norg/jruby/RubyHash.java:1175:in`each'\nprawn (0.12.0) lib/prawn/core/pdf_object.rb:85:in `PdfObject'\nprawn (0.12.0) lib/prawn/core/reference.rb:27:in`object'\nprawn (0.12.0) lib/prawn/core/document_state.rb:71:in `render_body'\nprawn (0.12.0) lib/prawn/core/object_store.rb:74:in`each'\norg/jruby/RubyArray.java:1603:in `each'\nprawn (0.12.0) lib/prawn/core/object_store.rb:73:in`each'\nprawn (0.12.0) lib/prawn/core/document_state.rb:69:in `render_body'\nprawn (0.12.0) lib/prawn/document/internals.rb:140:in`render_body'\nprawn (0.12.0) lib/prawn/document.rb:358:in `render'\nprawn_rails (0.0.7) lib/prawn_rails.rb:21:in`prawn_document'\napp/views/shafts/report.pdf.prawn:3:in `_app_views_shafts_report_pdf_prawn__872937026_13676_0'\norg/jruby/RubyBasicObject.java:1690:in`**send**'\norg/jruby/RubyKernel.java:2117:in `send'\nactionpack (3.0.7) lib/action_view/template.rb:135:in`render'\nactivesupport (3.0.7) lib/active_support/notifications.rb:54:in `instrument'\nactionpack (3.0.7) lib/action_view/template.rb:127:in`render'\nactionpack (3.0.7) lib/action_view/render/rendering.rb:59:in `_render_template'\nactivesupport (3.0.7) lib/active_support/notifications.rb:52:in`instrument'\nactivesupport (3.0.7) lib/active_support/notifications/instrumenter.rb:21:in `instrument'\nactivesupport (3.0.7) lib/active_support/notifications/instrumenter.rb:20:in`instrument'\nactivesupport (3.0.7) lib/active_support/notifications.rb:52:in `instrument'\nactionpack (3.0.7) lib/action_view/render/rendering.rb:56:in`_render_template'\nactionpack (3.0.7) lib/action_view/render/rendering.rb:26:in `render'\nhaml (3.1.2) lib/haml/helpers/action_view_mods.rb:13:in`render_with_haml'\nactionpack (3.0.7) lib/abstract_controller/rendering.rb:115:in `_render_template'\nactionpack (3.0.7) lib/abstract_controller/rendering.rb:109:in`render_to_body'\nactionpack (3.0.7) lib/action_controller/metal/renderers.rb:47:in `render_to_body'\nactionpack (3.0.7) lib/action_controller/metal/compatibility.rb:55:in`render_to_body'\nactionpack (3.0.7) lib/abstract_controller/rendering.rb:102:in `render_to_string'\nactionpack (3.0.7) lib/abstract_controller/rendering.rb:93:in`render'\nactionpack (3.0.7) lib/action_controller/metal/rendering.rb:17:in `render'\nactionpack (3.0.7) lib/action_controller/metal/instrumentation.rb:40:in`render'\nactivesupport (3.0.7) lib/active_support/core_ext/benchmark.rb:5:in `ms'\nc:/jruby-1.6.3/lib/ruby/1.9/benchmark.rb:309:in`realtime'\nactivesupport (3.0.7) lib/active_support/core_ext/benchmark.rb:5:in `ms'\nactionpack (3.0.7) lib/action_controller/metal/instrumentation.rb:40:in`render'\nactionpack (3.0.7) lib/action_controller/metal/instrumentation.rb:78:in `cleanup_view_runtime'\nactiverecord (3.0.7) lib/active_record/railties/controller_runtime.rb:15:in`cleanup_view_runtime'\nactionpack (3.0.7) lib/action_controller/metal/instrumentation.rb:39:in `render'\napp/controllers/shafts_controller.rb:70:in`report'\norg/jruby/RubyProc.java:256:in `call'\nactionpack (3.0.7) lib/action_controller/metal/mime_responds.rb:192:in`respond_to'\napp/controllers/shafts_controller.rb:68:in `report'\norg/jruby/RubyBasicObject.java:1684:in`__send__'\norg/jruby/RubyKernel.java:2113:in `send'\nactionpack (3.0.7) lib/action_controller/metal/implicit_render.rb:5:in`send_action'\nactionpack (3.0.7) lib/abstract_controller/base.rb:150:in `process_action'\nactionpack (3.0.7) lib/action_controller/metal/rendering.rb:11:in`process_action'\nactionpack (3.0.7) lib/abstract_controller/callbacks.rb:18:in `process_action'\nactivesupport (3.0.7) lib/active_support/callbacks.rb:449:in`_run__588507921__process_action__1074514439__callbacks'\norg/jruby/RubyBasicObject.java:1684:in `__send__'\norg/jruby/RubyKernel.java:2113:in `send'\nactivesupport (3.0.7) lib/active_support/callbacks.rb:425:in`_run_process_action_callbacks'\norg/jruby/RubyBasicObject.java:1690:in `__send__'\norg/jruby/RubyKernel.java:2117:in `send'\nactivesupport (3.0.7) lib/active_support/callbacks.rb:94:in`run_callbacks'\nactionpack (3.0.7) lib/abstract_controller/callbacks.rb:17:in `process_action'\nactionpack (3.0.7) lib/action_controller/metal/instrumentation.rb:30:in`process_action'\nactivesupport (3.0.7) lib/active_support/notifications.rb:52:in `instrument'\nactivesupport (3.0.7) lib/active_support/notifications/instrumenter.rb:21:in`instrument'\nactivesupport (3.0.7) lib/active_support/notifications/instrumenter.rb:20:in `instrument'\nactivesupport (3.0.7) lib/active_support/notifications.rb:52:in`instrument'\nactionpack (3.0.7) lib/action_controller/metal/instrumentation.rb:29:in `process_action'\nactionpack (3.0.7) lib/action_controller/metal/rescue.rb:17:in`process_action'\nactionpack (3.0.7) lib/abstract_controller/base.rb:119:in `process'\nactionpack (3.0.7) lib/abstract_controller/rendering.rb:41:in`process'\nactionpack (3.0.7) lib/action_controller/metal.rb:138:in `dispatch'\nactionpack (3.0.7) lib/action_controller/metal/rack_delegation.rb:14:in`dispatch'\nactionpack (3.0.7) lib/action_controller/metal.rb:178:in `action'\norg/jruby/RubyProc.java:256:in`call'\nactionpack (3.0.7) lib/action_dispatch/routing/route_set.rb:62:in `dispatch'\nactionpack (3.0.7) lib/action_dispatch/routing/route_set.rb:27:in`call'\nrack-mount (0.6.14) lib/rack/mount/route_set.rb:148:in `call'\nrack-mount (0.6.14) lib/rack/mount/code_generation.rb:111:in`recognize'\nrack-mount (0.6.14) lib/rack/mount/code_generation.rb:80:in `optimized_each'\nrack-mount (0.6.14) lib/rack/mount/code_generation.rb:110:in`recognize'\nrack-mount (0.6.14) lib/rack/mount/route_set.rb:139:in `call'\nactionpack (3.0.7) lib/action_dispatch/routing/route_set.rb:493:in`call'\nsass (3.1.5) lib/sass/plugin/rack.rb:54:in `call'\nwarden (1.0.5) lib/warden/manager.rb:35:in`call'\norg/jruby/RubyKernel.java:1205:in `catch'\nwarden (1.0.5) lib/warden/manager.rb:34:in`call'\nactionpack (3.0.7) lib/action_dispatch/middleware/best_standards_support.rb:17:in `call'\nactionpack (3.0.7) lib/action_dispatch/middleware/head.rb:14:in`call'\nrack (1.2.3) lib/rack/methodoverride.rb:24:in `call'\nactionpack (3.0.7) lib/action_dispatch/middleware/params_parser.rb:21:in`call'\nactionpack (3.0.7) lib/action_dispatch/middleware/flash.rb:182:in `call'\nactionpack (3.0.7) lib/action_dispatch/middleware/session/abstract_store.rb:149:in`call'\nactionpack (3.0.7) lib/action_dispatch/middleware/cookies.rb:302:in `call'\nactiverecord (3.0.7) lib/active_record/query_cache.rb:32:in`call'\nactiverecord (3.0.7) lib/active_record/connection_adapters/abstract/query_cache.rb:28:in `cache'\nactiverecord (3.0.7) lib/active_record/query_cache.rb:12:in`cache'\nactiverecord (3.0.7) lib/active_record/query_cache.rb:31:in `call'\nactiverecord (3.0.7) lib/active_record/connection_adapters/abstract/connection_pool.rb:354:in`call'\nactionpack (3.0.7) lib/action_dispatch/middleware/callbacks.rb:46:in `call'\nactivesupport (3.0.7) lib/active_support/callbacks.rb:431:in`_run_call_callbacks'\nactionpack (3.0.7) lib/action_dispatch/middleware/callbacks.rb:44:in `call'\nrack (1.2.3) lib/rack/sendfile.rb:107:in`call'\nactionpack (3.0.7) lib/action_dispatch/middleware/remote_ip.rb:48:in `call'\nactionpack (3.0.7) lib/action_dispatch/middleware/show_exceptions.rb:47:in`call'\nrailties (3.0.7) lib/rails/rack/logger.rb:13:in `call'\nrack (1.2.3) lib/rack/runtime.rb:17:in`call'\nactivesupport (3.0.7) lib/active_support/cache/strategy/local_cache.rb:90:in `call'\nrack (1.2.3) lib/rack/lock.rb:11:in`call'\nrack (1.2.3) lib/rack/lock.rb:11:in `call'\nactionpack (3.0.7) lib/action_dispatch/middleware/static.rb:30:in`call'\nrailties (3.0.7) lib/rails/application.rb:168:in `call'\norg/jruby/RubyBasicObject.java:1690:in`__send__'\norg/jruby/RubyKernel.java:2117:in `send'\nrailties (3.0.7) lib/rails/application.rb:77:in`method_missing'\nrailties (3.0.7) lib/rails/rack/log_tailer.rb:14:in `call'\nrack (1.2.3) lib/rack/content_length.rb:13:in`call'\nrack (1.2.3) lib/rack/handler/webrick.rb:52:in `service'\nc:/jruby-1.6.3/lib/ruby/1.9/webrick/httpserver.rb:111:in`service'\nc:/jruby-1.6.3/lib/ruby/1.9/webrick/httpserver.rb:70:in `run'\nc:/jruby-1.6.3/lib/ruby/1.9/webrick/server.rb:183:in`start_thread'\n\nRequest\n\nParameters:\n\n{\"id\"=>\"1\",\n \"format\"=>\"pdf\"}\n\nShow session dump\n\nShow env dump\nResponse\n\nHeaders:\n\nNone\n. Hey yob tried to update my prawn but no changes using it as a gem which version should I use for the fix to work\n. ",
    "bmaddy": "We ran into this issue also, but with jRuby 1.6.1 (ruby 1.9.2) and rails 3.0.9 on osx and Ubuntu.\n\nIt turns out that Prawn inserts some metadata into the pdf documents--specifically, the document creator and producer. That looks like it might be what's causing this to crash. The \"Prawn\" string is passed to the Prawn::Core::PdfObject method. Inside this method it converts \"Prawn\" into utf16 with Prawn::Core::utf8_to_utf16 because it's not part of the document's main content. It then concatenates that with a normal ruby string which blows up. It's basically doing this:\n\n> \"foo\" + \"bar\".encode(\"UTF-16BE\")\n> Encoding::CompatibilityError: incompatible character encodings: UTF-8 and UTF-16BE\n\nWe monkeypatched our app to make it not encode that string ever. Just so we're clear, this is a total hack and there's probably a much better way to fix it. If you have strange characters you're putting in the pdf metadata you'll probably run in to problems with this fix. It does work for what we're doing though:\n\nlib/prawn_monkeypatch.rb:\n\n``` ruby\nrequire 'prawn'\nmodule Prawn\n  module Core\n      def self.utf8_to_utf16(str)\n        str\n      end\n  end\nend\n```\n\nMake sure you include 'prawn_monkeypatch' wherever you are using Prawn.\n\nHope that helps.\n. Prawn version is 0.12.0\n\nHere's a standalone script that reproduces the error:\n\n``` ruby\nrequire 'prawn'\n# require 'lib/prawn_monkeypatch'\n\nPrawn::Document.generate(\"output.pdf\") do\n  draw_text \"Fancy title\", :size => 36, :at => [0,700]\nend\n```\n\nBtw, thanks for looking into this--it is much appreciated!\n. We ran into this issue also, but with jRuby 1.6.1 (ruby 1.9.2) and rails 3.0.9 on osx and Ubuntu.\n\nIt turns out that Prawn inserts some metadata into the pdf documents--specifically, the document creator and producer. That looks like it might be what's causing this to crash. The \"Prawn\" string is passed to the Prawn::Core::PdfObject method. Inside this method it converts \"Prawn\" into utf16 with Prawn::Core::utf8_to_utf16 because it's not part of the document's main content. It then concatenates that with a normal ruby string which blows up. It's basically doing this:\n\n> \"foo\" + \"bar\".encode(\"UTF-16BE\")\n> Encoding::CompatibilityError: incompatible character encodings: UTF-8 and UTF-16BE\n\nWe monkeypatched our app to make it not encode that string ever. Just so we're clear, this is a total hack and there's probably a much better way to fix it. If you have strange characters you're putting in the pdf metadata you'll probably run in to problems with this fix. It does work for what we're doing though:\n\nlib/prawn_monkeypatch.rb:\n\n``` ruby\nrequire 'prawn'\nmodule Prawn\n  module Core\n      def self.utf8_to_utf16(str)\n        str\n      end\n  end\nend\n```\n\nMake sure you include 'prawn_monkeypatch' wherever you are using Prawn.\n\nHope that helps.\n. Prawn version is 0.12.0\n\nHere's a standalone script that reproduces the error:\n\n``` ruby\nrequire 'prawn'\n# require 'lib/prawn_monkeypatch'\n\nPrawn::Document.generate(\"output.pdf\") do\n  draw_text \"Fancy title\", :size => 36, :at => [0,700]\nend\n```\n\nBtw, thanks for looking into this--it is much appreciated!\n. ",
    "jmcnevin": "Is anyone seeing this with Jruby 1.7 and Prawn 1.0 RC1?\n. Is anyone seeing this with Jruby 1.7 and Prawn 1.0 RC1?\n. ",
    "kennethkalmer": "@jmcnevin got the same, this issue has been resolved on master, and there is some begging in #346 that a new RC gets released.\n. I'm tracing something similar using JRuby and if I'm interpreting the results from Eclipse MAT correctly it looks like TTFunk::File references retain the most of the heap size.\n\nStill digging around.\n\nIn my case I'm generating the PDF's in a trinidad background worker using prawn 131082a on JRuby 1.7.0\n\nIf I uncover more I'll add here.\n. @yob I've just tried your patch and I can confirm the memory usage stays nearly constant (increased by a few bytes) under ruby 1.9.3p327 (2012-11-10 revision 37606) [x86_64-darwin12.2.0]\n\nGetting close, will dig in a bit more again later today.\n. Maybe we can close this issue and focus on getting the patch in #430 fleshed out and merged? I'll spend some time later today working in the feedback from @bradediger \n\nwdyt?\n. Thanks @bradediger for the feedback, will give this a bit more polish later today. Any other feedback would be greatly appreciated.\n. Whitespace reverted, was just an unintended side effect of my vim settings, luckily I had the foresight to make it a separate commit ;)\n\nI can remove the thread local variable in favour of a document specific one, but for many documents within the same process there would be some performance knock as it recalcs everything once for each doc. Without any measurement, I cannot say at all what the cost would be, so I'll have to conjure up a gist with something.\n\nEither way I can understand the original intentions behind the cache. Maybe a completely new object can be introduced to handle this case? A singleton-font-metrics-cache? I don't know where else in the code font metrics play a role, if it does we might have an SRP violation going on here...\n\nThoughts?\n. I think @yob nailed it with the plan of action. Digging through the path a bit more it seems that we could possibly implement a caching strategy in Prawn::Document#width_of (https://github.com/prawnpdf/prawn/blob/master/lib/prawn/font.rb#L219) that could benefit the document as a whole.\n\nHowever, I did a simple benchmark (which might be completely wrong), the results are in this gist https://gist.github.com/4281051 and they show almost no benefit. In fact, in jruby going via the cache is slower :question: \n. Sure thing!\n\nBefore I go down that path, I was thinking of extracting the two paths of Prawn::Document#width_of into two separate methods, each with their own caching implementation. This would just make things a bit clearer when reading the code. Does this sound feasible?\n\nJust some feedback, I've pushed 4000 PDF's through my branch on a production deployment with jRuby on Heroku and everything went fine. This was a single thread within one process, no tricks to try and claim back used memory, and no restarting of the process during the PDF generation.\n. That is exactly what I had in mind, apologies if it didn't come out that way. I'm 100% for preserving the API. I'll start chipping away at it then, two private methods, two caches, same public API.\n. Hopefully this is my last RFC iteration, just wanna make sure I don't get ahead of myself.\n\nMy current thoughts are roughly along these lines:\n1. Introduce Prawn::FontMetricCache (lib/prawn/font_metric_cache.rb)\n2. Move the Prawn::Document#width_of (and co) definitions to that file (completely optional)\n3. Implement Prawn::FontMetricCache to do what we need\n4. Possibly add a LRU mechanism to the cache to accomodate for large documents, but this would first require a validation of the hypothesis that a cache on large documents could slow things down or balloon memory usage.\n\n2 & 4 aside, would you guys be happy with me introducing a new class for starters?\n. @bradediger indeed, have a naive implementation at the moment that I'll push (just to give a big picture). Still needs refinements, plenty of it...\n\nThe initial benchmarks are available in https://gist.github.com/4466065 but I need to make a much bigger PDF with more text and more complex tables to see how it pans out.\n. I'm using this branch in production on Heroku with JRuby and it is working\n100%\n\nPlease allow me to finish the benchmarking script so we can compare it\nagainst master, since other character width operations would also be\naffected.\n\nI think I'll also need to update the naive cache to have LRU expiring\nbehavior, then it should be perfect for merging.\n\nWill update over the weekend.\n\nOn Friday, January 25, 2013, Forrest Zeisler wrote:\n\n> Any word on how this is coming? We've recently been hit with a few really\n> large memory issues specifically around tables.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/prawnpdf/prawn/pull/430#issuecomment-12714362.\n\n## \n\nKenneth Kalmer\nkenneth.kalmer@gmail.com\nhttp://opensourcery.co.za\n@kennethkalmer\n. Thanks for the great responses! And apologies for the delays.\n\nI'll make some time to get this wrapped up in the next few days.\n\nSince we have RC3 out, would it be advisable for me to rebase this branch,\nor merge master back into here?\n\nOn Tue, Mar 5, 2013 at 1:30 AM, Nathan Youngman notifications@github.comwrote:\n\n> We've been running this on MRI in production for a few days now (merged to\n> RC2). It would be great to get it wrapped up and included in the next RC.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/prawnpdf/prawn/pull/430#issuecomment-14413950\n> .\n\n## \n\nKenneth Kalmer\nkenneth.kalmer@gmail.com\nhttp://opensourcery.co.za\n@kennethkalmer\n. Have on failing spec that I need to investigate:\n\n```\nFailures:\n\n  1) Core::Text::Formatted::LineWrap#wrap_line should not break after a hard hyphen that follows a soft hyphen andprecedes a word\n     Failure/Error: string.should == \"hello-\"\n       expected: \"hello-\"\n            got: \"hello\u00ad\" (using ==)\n     # ./spec/line_wrap_spec.rb:217:in `block (2 levels) in <top (required)>'\n```\n\nAnd just the missing specs for the FontMetricCache.\n. My apologies, can't believe 10 months went past so quickly.\n\nI've put some very basic specs together for this, which begs the following questions:\n1. Do I expose `@cache` via an attr_reader ? And,\n2. What is required to get this branch to merge ?\n\nThanks for all the positive feedback from folks running this in production, we've also generated several thousand PDF's successfully and without memory leaks.\n. @bradediger thanks for the feedback, @sandal if you need me to to take a stab at behaviour driven specs I most surely can.\n. @sandal I'll do my best, but if I don't get something up by Wednesday 20th I'll do it in a separate pull request at a later stage.\n\nReally looking forward to 1.0 final :)\n. :+1: for MIT from this side\n. Just noticed @andrewtimberlake isn't on the list\n. @jmcnevin got the same, this issue has been resolved on master, and there is some begging in #346 that a new RC gets released.\n. I'm tracing something similar using JRuby and if I'm interpreting the results from Eclipse MAT correctly it looks like TTFunk::File references retain the most of the heap size.\n\nStill digging around.\n\nIn my case I'm generating the PDF's in a trinidad background worker using prawn 131082a on JRuby 1.7.0\n\nIf I uncover more I'll add here.\n. @yob I've just tried your patch and I can confirm the memory usage stays nearly constant (increased by a few bytes) under ruby 1.9.3p327 (2012-11-10 revision 37606) [x86_64-darwin12.2.0]\n\nGetting close, will dig in a bit more again later today.\n. Maybe we can close this issue and focus on getting the patch in #430 fleshed out and merged? I'll spend some time later today working in the feedback from @bradediger \n\nwdyt?\n. Thanks @bradediger for the feedback, will give this a bit more polish later today. Any other feedback would be greatly appreciated.\n. Whitespace reverted, was just an unintended side effect of my vim settings, luckily I had the foresight to make it a separate commit ;)\n\nI can remove the thread local variable in favour of a document specific one, but for many documents within the same process there would be some performance knock as it recalcs everything once for each doc. Without any measurement, I cannot say at all what the cost would be, so I'll have to conjure up a gist with something.\n\nEither way I can understand the original intentions behind the cache. Maybe a completely new object can be introduced to handle this case? A singleton-font-metrics-cache? I don't know where else in the code font metrics play a role, if it does we might have an SRP violation going on here...\n\nThoughts?\n. I think @yob nailed it with the plan of action. Digging through the path a bit more it seems that we could possibly implement a caching strategy in Prawn::Document#width_of (https://github.com/prawnpdf/prawn/blob/master/lib/prawn/font.rb#L219) that could benefit the document as a whole.\n\nHowever, I did a simple benchmark (which might be completely wrong), the results are in this gist https://gist.github.com/4281051 and they show almost no benefit. In fact, in jruby going via the cache is slower :question: \n. Sure thing!\n\nBefore I go down that path, I was thinking of extracting the two paths of Prawn::Document#width_of into two separate methods, each with their own caching implementation. This would just make things a bit clearer when reading the code. Does this sound feasible?\n\nJust some feedback, I've pushed 4000 PDF's through my branch on a production deployment with jRuby on Heroku and everything went fine. This was a single thread within one process, no tricks to try and claim back used memory, and no restarting of the process during the PDF generation.\n. That is exactly what I had in mind, apologies if it didn't come out that way. I'm 100% for preserving the API. I'll start chipping away at it then, two private methods, two caches, same public API.\n. Hopefully this is my last RFC iteration, just wanna make sure I don't get ahead of myself.\n\nMy current thoughts are roughly along these lines:\n1. Introduce Prawn::FontMetricCache (lib/prawn/font_metric_cache.rb)\n2. Move the Prawn::Document#width_of (and co) definitions to that file (completely optional)\n3. Implement Prawn::FontMetricCache to do what we need\n4. Possibly add a LRU mechanism to the cache to accomodate for large documents, but this would first require a validation of the hypothesis that a cache on large documents could slow things down or balloon memory usage.\n\n2 & 4 aside, would you guys be happy with me introducing a new class for starters?\n. @bradediger indeed, have a naive implementation at the moment that I'll push (just to give a big picture). Still needs refinements, plenty of it...\n\nThe initial benchmarks are available in https://gist.github.com/4466065 but I need to make a much bigger PDF with more text and more complex tables to see how it pans out.\n. I'm using this branch in production on Heroku with JRuby and it is working\n100%\n\nPlease allow me to finish the benchmarking script so we can compare it\nagainst master, since other character width operations would also be\naffected.\n\nI think I'll also need to update the naive cache to have LRU expiring\nbehavior, then it should be perfect for merging.\n\nWill update over the weekend.\n\nOn Friday, January 25, 2013, Forrest Zeisler wrote:\n\n> Any word on how this is coming? We've recently been hit with a few really\n> large memory issues specifically around tables.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/prawnpdf/prawn/pull/430#issuecomment-12714362.\n\n## \n\nKenneth Kalmer\nkenneth.kalmer@gmail.com\nhttp://opensourcery.co.za\n@kennethkalmer\n. Thanks for the great responses! And apologies for the delays.\n\nI'll make some time to get this wrapped up in the next few days.\n\nSince we have RC3 out, would it be advisable for me to rebase this branch,\nor merge master back into here?\n\nOn Tue, Mar 5, 2013 at 1:30 AM, Nathan Youngman notifications@github.comwrote:\n\n> We've been running this on MRI in production for a few days now (merged to\n> RC2). It would be great to get it wrapped up and included in the next RC.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/prawnpdf/prawn/pull/430#issuecomment-14413950\n> .\n\n## \n\nKenneth Kalmer\nkenneth.kalmer@gmail.com\nhttp://opensourcery.co.za\n@kennethkalmer\n. Have on failing spec that I need to investigate:\n\n```\nFailures:\n\n  1) Core::Text::Formatted::LineWrap#wrap_line should not break after a hard hyphen that follows a soft hyphen andprecedes a word\n     Failure/Error: string.should == \"hello-\"\n       expected: \"hello-\"\n            got: \"hello\u00ad\" (using ==)\n     # ./spec/line_wrap_spec.rb:217:in `block (2 levels) in <top (required)>'\n```\n\nAnd just the missing specs for the FontMetricCache.\n. My apologies, can't believe 10 months went past so quickly.\n\nI've put some very basic specs together for this, which begs the following questions:\n1. Do I expose `@cache` via an attr_reader ? And,\n2. What is required to get this branch to merge ?\n\nThanks for all the positive feedback from folks running this in production, we've also generated several thousand PDF's successfully and without memory leaks.\n. @bradediger thanks for the feedback, @sandal if you need me to to take a stab at behaviour driven specs I most surely can.\n. @sandal I'll do my best, but if I don't get something up by Wednesday 20th I'll do it in a separate pull request at a later stage.\n\nReally looking forward to 1.0 final :)\n. :+1: for MIT from this side\n. Just noticed @andrewtimberlake isn't on the list\n. ",
    "cforce": "I do, and it crashes similar like described above.\n\nEncoding::CompatibilityError (incompatible character encodings: UTF-8 and UTF-16BE):\n  org/jruby/RubyString.java:2588:in `concat'\n  prawn (0.12.0) lib/prawn/core/pdf_object.rb:74:in`PdfObject'\n  prawn (0.12.0) lib/prawn/core/pdf_object.rb:90:in `PdfObject'\n  org/jruby/RubyHash.java:1192:in`each'\n  prawn (0.12.0) lib/prawn/core/pdf_object.rb:85:in `PdfObject'\n  prawn (0.12.0) lib/prawn/core/reference.rb:27:in`object'\n  prawn (0.12.0) lib/prawn/core/document_state.rb:71:in `render_body'\n  prawn (0.12.0) lib/prawn/core/object_store.rb:74:in`each'\n  org/jruby/RubyArray.java:1612:in `each'\n  prawn (0.12.0) lib/prawn/core/object_store.rb:73:in`each'\n  prawn (0.12.0) lib/prawn/core/document_state.rb:69:in `render_body'\n  prawn (0.12.0) lib/prawn/document/internals.rb:140:in`render_body'\n  prawn (0.12.0) lib/prawn/document.rb:358:in `render'\n. Please upstream/pull and merge patch soon!\n. Using 0.12.0\n. There isn't even a tag or branch?\n. Arg!!, I am hit also by this Bug!\n. I do, and it crashes similar like described above.\n\nEncoding::CompatibilityError (incompatible character encodings: UTF-8 and UTF-16BE):\n  org/jruby/RubyString.java:2588:in `concat'\n  prawn (0.12.0) lib/prawn/core/pdf_object.rb:74:in`PdfObject'\n  prawn (0.12.0) lib/prawn/core/pdf_object.rb:90:in `PdfObject'\n  org/jruby/RubyHash.java:1192:in`each'\n  prawn (0.12.0) lib/prawn/core/pdf_object.rb:85:in `PdfObject'\n  prawn (0.12.0) lib/prawn/core/reference.rb:27:in`object'\n  prawn (0.12.0) lib/prawn/core/document_state.rb:71:in `render_body'\n  prawn (0.12.0) lib/prawn/core/object_store.rb:74:in`each'\n  org/jruby/RubyArray.java:1612:in `each'\n  prawn (0.12.0) lib/prawn/core/object_store.rb:73:in`each'\n  prawn (0.12.0) lib/prawn/core/document_state.rb:69:in `render_body'\n  prawn (0.12.0) lib/prawn/document/internals.rb:140:in`render_body'\n  prawn (0.12.0) lib/prawn/document.rb:358:in `render'\n. Please upstream/pull and merge patch soon!\n. Using 0.12.0\n. There isn't even a tag or branch?\n. Arg!!, I am hit also by this Bug!\n. ",
    "tkuisma": "Just tested the Hello World prawn example and it gives the same encoding error in OS X 10.7.5 with the latest JRuby 1.7.2 version. With bmaddy's monkeypatch there is no error.\n\nEncoding::CompatibilityError: incompatible character encodings: UTF-8 and UTF-16BE\n       concat at org/jruby/RubyString.java:2611\n    PdfObject at /Users/tkuisma/.rvm/gems/jruby-1.7.2@prawn/gems/prawn-0.12.0/lib/prawn/core/pdf_object.rb:74\n    PdfObject at /Users/tkuisma/.rvm/gems/jruby-1.7.2@prawn/gems/prawn-0.12.0/lib/prawn/core/pdf_object.rb:90\n         each at org/jruby/RubyHash.java:1257\n    PdfObject at /Users/tkuisma/.rvm/gems/jruby-1.7.2@prawn/gems/prawn-0.12.0/lib/prawn/core/pdf_object.rb:85\n       object at /Users/tkuisma/.rvm/gems/jruby-1.7.2@prawn/gems/prawn-0.12.0/lib/prawn/core/reference.rb:27\n  render_body at /Users/tkuisma/.rvm/gems/jruby-1.7.2@prawn/gems/prawn-0.12.0/lib/prawn/core/document_state.rb:71\n         each at /Users/tkuisma/.rvm/gems/jruby-1.7.2@prawn/gems/prawn-0.12.0/lib/prawn/core/object_store.rb:74\n         each at org/jruby/RubyArray.java:1613\n         each at /Users/tkuisma/.rvm/gems/jruby-1.7.2@prawn/gems/prawn-0.12.0/lib/prawn/core/object_store.rb:73\n  render_body at /Users/tkuisma/.rvm/gems/jruby-1.7.2@prawn/gems/prawn-0.12.0/lib/prawn/core/document_state.rb:69\n  render_body at /Users/tkuisma/.rvm/gems/jruby-1.7.2@prawn/gems/prawn-0.12.0/lib/prawn/document/internals.rb:140\n       render at /Users/tkuisma/.rvm/gems/jruby-1.7.2@prawn/gems/prawn-0.12.0/lib/prawn/document.rb:358\n  render_file at /Users/tkuisma/.rvm/gems/jruby-1.7.2@prawn/gems/prawn-0.12.0/lib/prawn/document.rb:372\n         open at org/jruby/RubyIO.java:1183\n  render_file at /Users/tkuisma/.rvm/gems/jruby-1.7.2@prawn/gems/prawn-0.12.0/lib/prawn/document.rb:372\n     generate at /Users/tkuisma/.rvm/gems/jruby-1.7.2@prawn/gems/prawn-0.12.0/lib/prawn/document.rb:122\n       (root) at prawn_test.rb:4\n. Just tested the Hello World prawn example and it gives the same encoding error in OS X 10.7.5 with the latest JRuby 1.7.2 version. With bmaddy's monkeypatch there is no error.\n\nEncoding::CompatibilityError: incompatible character encodings: UTF-8 and UTF-16BE\n       concat at org/jruby/RubyString.java:2611\n    PdfObject at /Users/tkuisma/.rvm/gems/jruby-1.7.2@prawn/gems/prawn-0.12.0/lib/prawn/core/pdf_object.rb:74\n    PdfObject at /Users/tkuisma/.rvm/gems/jruby-1.7.2@prawn/gems/prawn-0.12.0/lib/prawn/core/pdf_object.rb:90\n         each at org/jruby/RubyHash.java:1257\n    PdfObject at /Users/tkuisma/.rvm/gems/jruby-1.7.2@prawn/gems/prawn-0.12.0/lib/prawn/core/pdf_object.rb:85\n       object at /Users/tkuisma/.rvm/gems/jruby-1.7.2@prawn/gems/prawn-0.12.0/lib/prawn/core/reference.rb:27\n  render_body at /Users/tkuisma/.rvm/gems/jruby-1.7.2@prawn/gems/prawn-0.12.0/lib/prawn/core/document_state.rb:71\n         each at /Users/tkuisma/.rvm/gems/jruby-1.7.2@prawn/gems/prawn-0.12.0/lib/prawn/core/object_store.rb:74\n         each at org/jruby/RubyArray.java:1613\n         each at /Users/tkuisma/.rvm/gems/jruby-1.7.2@prawn/gems/prawn-0.12.0/lib/prawn/core/object_store.rb:73\n  render_body at /Users/tkuisma/.rvm/gems/jruby-1.7.2@prawn/gems/prawn-0.12.0/lib/prawn/core/document_state.rb:69\n  render_body at /Users/tkuisma/.rvm/gems/jruby-1.7.2@prawn/gems/prawn-0.12.0/lib/prawn/document/internals.rb:140\n       render at /Users/tkuisma/.rvm/gems/jruby-1.7.2@prawn/gems/prawn-0.12.0/lib/prawn/document.rb:358\n  render_file at /Users/tkuisma/.rvm/gems/jruby-1.7.2@prawn/gems/prawn-0.12.0/lib/prawn/document.rb:372\n         open at org/jruby/RubyIO.java:1183\n  render_file at /Users/tkuisma/.rvm/gems/jruby-1.7.2@prawn/gems/prawn-0.12.0/lib/prawn/document.rb:372\n     generate at /Users/tkuisma/.rvm/gems/jruby-1.7.2@prawn/gems/prawn-0.12.0/lib/prawn/document.rb:122\n       (root) at prawn_test.rb:4\n. ",
    "jonah-williams": "I just ran into this bug as well. Glad to see the issue has already been resolved but it would be great to see a gem version released or a tag pushed which includes the fix.\n. I just ran into this bug as well. Glad to see the issue has already been resolved but it would be great to see a gem version released or a tag pushed which includes the fix.\n. ",
    "lightswitch05": "I had this issue today as well, I suggest anyone else update to release candidate 2 until this fix finds its way into a stable release - `gem \"prawn\", \"~> 1.0.0.rc2\"`. \n. I had this issue today as well, I suggest anyone else update to release candidate 2 until this fix finds its way into a stable release - `gem \"prawn\", \"~> 1.0.0.rc2\"`. \n. ",
    "elgalu": "Same issue on JRuby 1.7.6, Ubuntu 13.04, solved with:\n\n`gem 'prawn', '~> 1.0.0.rc2'`\n. Same issue on JRuby 1.7.6, Ubuntu 13.04, solved with:\n\n`gem 'prawn', '~> 1.0.0.rc2'`\n. ",
    "souzanato": "Thank you very much!!!!!\n. Thank you very much!!!!!\n. ",
    "sangram9696": "Thanks. Thanks. ",
    "systemed": "Adding the following code to lib/prawn/images.rb at line 122 works:\n\n```\n    case options[:position]\n    when :center\n      x-=w/2\n    when :right\n      x-=w\n    end\n    case options[:vposition]\n    when :center\n      y+=h/2\n    when :bottom\n      y+=h\n    end\n```\n\n(apologies - haven't got my head around git enough to send a pull request yet but will try for next time :) )\n. Sorry, that's not something I have any experience in. If you like I can close this and open an issue for Prawn not setting the stroke colour correctly.\n. Adding the following code to lib/prawn/images.rb at line 122 works:\n\n```\n    case options[:position]\n    when :center\n      x-=w/2\n    when :right\n      x-=w\n    end\n    case options[:vposition]\n    when :center\n      y+=h/2\n    when :bottom\n      y+=h\n    end\n```\n\n(apologies - haven't got my head around git enough to send a pull request yet but will try for next time :) )\n. Sorry, that's not something I have any experience in. If you like I can close this and open an issue for Prawn not setting the stroke colour correctly.\n. ",
    "mirelon": "I created a fork with your code: https://github.com/mirelon/prawn/tree/patch-1\n. I created a fork with your code: https://github.com/mirelon/prawn/tree/patch-1\n. ",
    "ammar": "I'm seeing the same error with version 0.12.0, but without using a group block.\n\n<pre>\n  undefined method `identifier' for nil:NilClass\n  prawn (0.12.0) lib/prawn/document/snapshot.rb:56:in `take_snapshot'\n</pre>\n\n\nThe error seems intermittent so far and I don't have a simple case that consistently reproduces it. \n. This error does not occur with version 0.11.1.\n. I'm seeing the same error with version 0.12.0, but without using a group block.\n\n<pre>\n  undefined method `identifier' for nil:NilClass\n  prawn (0.12.0) lib/prawn/document/snapshot.rb:56:in `take_snapshot'\n</pre>\n\n\nThe error seems intermittent so far and I don't have a simple case that consistently reproduces it. \n. This error does not occur with version 0.11.1.\n. ",
    "tadast": "I can aslo confirm that error sometimes occurs with version 0.12.0\n. It also does write on the same page twice in some cases when using group, which also raises the rollback exception. \n. So far I have isolated the page overwriting issue to this commit https://github.com/sandal/prawn/commit/2ff910a1379f204f6f95d16a037d166cd0de039f\nReverting it seems to solve this particular problem. I will try to dive in deeper to understand what went wrong.\n\nThe problem with the page numbers does not seem to be related and was introduced the way earlier.\n. Ok, so apparently the commit I mentioned only exposes rather than causes the problem. Snapshot#restore_snapshot does not correctly restore the state of the document. Document page_count, and lots of referenced Reference instances from the old state remain after restoring. I have to go now, but will try to investigate it further some time later. Maybe my poorly structured comments will help someone to understand the problem better :)\n. Oh, how did #268 manage to slip through my eyes? Well, it was a good chance for me to see the guts of Prawn.\n. Issue #297 could be related\n. Being able to group is quite an important feature to me. What would the new implementation be based on if not transactions? I'd be interested to help if I can.\n. I can aslo confirm that error sometimes occurs with version 0.12.0\n. It also does write on the same page twice in some cases when using group, which also raises the rollback exception. \n. So far I have isolated the page overwriting issue to this commit https://github.com/sandal/prawn/commit/2ff910a1379f204f6f95d16a037d166cd0de039f\nReverting it seems to solve this particular problem. I will try to dive in deeper to understand what went wrong.\n\nThe problem with the page numbers does not seem to be related and was introduced the way earlier.\n. Ok, so apparently the commit I mentioned only exposes rather than causes the problem. Snapshot#restore_snapshot does not correctly restore the state of the document. Document page_count, and lots of referenced Reference instances from the old state remain after restoring. I have to go now, but will try to investigate it further some time later. Maybe my poorly structured comments will help someone to understand the problem better :)\n. Oh, how did #268 manage to slip through my eyes? Well, it was a good chance for me to see the guts of Prawn.\n. Issue #297 could be related\n. Being able to group is quite an important feature to me. What would the new implementation be based on if not transactions? I'd be interested to help if I can.\n. ",
    "effkay": "Can reproduce the error with 0.12.0, not with 0.11.1\n. Can reproduce the error with 0.12.0, not with 0.11.1\n. ",
    "nathancolgate": "Here is a code sample from our app:\n\n``` Ruby\npdf = Prawn::Document.new(\n  :background => piece.background_image, \n  :background_scale => (72.0/piece.dpi),\n  :left_margin => 0, \n  :right_margin => 0, \n  :top_margin => 0, \n  :bottom_margin => 0, \n  :page_size => [(piece.width_in_pixels + 2*piece.bleed_in_pixels).to_i,(piece.height_in_pixels + 2*piece.bleed_in_pixels).to_i]\n)\n```\n. Prawn got 3 pull requests merged today but 292 ain't one. :-)\n\nJust kidding. Thanks for all your hard work, bradediger.\n. :+1:\n. It may be safe to assume that using `valign: top` is technically pushing the first line to the top of the text as well, but this just looks as expected so it's not noticeable.\n. @sandal: Absolutely zero worries. To say that this is a fringe use case would be putting it mildly: the type-setters out there aren't really plugging for indented, bottom-aligned layouts.\n\nSome context: I discovered this while building a PDF builder for a client wherein I tried to put all the options Prawn could offer into the system. The client caught this bug and I narrowed it down to a conflict between `indent_paragraphs` and `valign`.\n\nInterim solution: I simply told the client he can't do both at the same time, and then wrote a method to set the indent to nil if it was zero:\n\n``` ruby\n  def pseudo_indent_paragraphs\n    # when indent_paragraphs == 0, and you combine it with non-top valign\n    # things get a little crazy. So for now, let's just set it to nil if it is 0\n    (self.indent_paragraphs == 0) ? nil : self.indent_paragraphs\n  end\n```\n\nThanks again for an amazing gem.\n. Here is a code sample from our app:\n\n``` Ruby\npdf = Prawn::Document.new(\n  :background => piece.background_image, \n  :background_scale => (72.0/piece.dpi),\n  :left_margin => 0, \n  :right_margin => 0, \n  :top_margin => 0, \n  :bottom_margin => 0, \n  :page_size => [(piece.width_in_pixels + 2*piece.bleed_in_pixels).to_i,(piece.height_in_pixels + 2*piece.bleed_in_pixels).to_i]\n)\n```\n. Prawn got 3 pull requests merged today but 292 ain't one. :-)\n\nJust kidding. Thanks for all your hard work, bradediger.\n. :+1:\n. It may be safe to assume that using `valign: top` is technically pushing the first line to the top of the text as well, but this just looks as expected so it's not noticeable.\n. @sandal: Absolutely zero worries. To say that this is a fringe use case would be putting it mildly: the type-setters out there aren't really plugging for indented, bottom-aligned layouts.\n\nSome context: I discovered this while building a PDF builder for a client wherein I tried to put all the options Prawn could offer into the system. The client caught this bug and I narrowed it down to a conflict between `indent_paragraphs` and `valign`.\n\nInterim solution: I simply told the client he can't do both at the same time, and then wrote a method to set the indent to nil if it was zero:\n\n``` ruby\n  def pseudo_indent_paragraphs\n    # when indent_paragraphs == 0, and you combine it with non-top valign\n    # things get a little crazy. So for now, let's just set it to nil if it is 0\n    (self.indent_paragraphs == 0) ? nil : self.indent_paragraphs\n  end\n```\n\nThanks again for an amazing gem.\n. ",
    "A5308Y": "Prawn really needs this!\n. Prawn really needs this!\n. ",
    "swrobel": ":+1: \n. :+1: \n. ",
    "ckhall": "failing test (copy the landscape.pdf from above code to spec/data/ dir)\n\n```\ndescribe \"When creating a pdf from a template\" do\n  it \"new pages should retain the templates layout\" do\n    @pdf = Prawn::Document.new(:template => \"#{Prawn::BASEDIR}/spec/data/landscape.pdf\")\n    @pdf.start_new_page(:trace => true)\n    pages = PDF::Inspector::Page.analyze(@pdf.render).pages\n    pages.each do |page|\n      page[:size].should == Prawn::Document::PageGeometry::SIZES[\"LETTER\"].reverse\n    end\n  end\nend\n```\n. failing test (copy the landscape.pdf from above code to spec/data/ dir)\n\n```\ndescribe \"When creating a pdf from a template\" do\n  it \"new pages should retain the templates layout\" do\n    @pdf = Prawn::Document.new(:template => \"#{Prawn::BASEDIR}/spec/data/landscape.pdf\")\n    @pdf.start_new_page(:trace => true)\n    pages = PDF::Inspector::Page.analyze(@pdf.render).pages\n    pages.each do |page|\n      page[:size].should == Prawn::Document::PageGeometry::SIZES[\"LETTER\"].reverse\n    end\n  end\nend\n```\n. ",
    "stan": "hi, any pointers to what the issue might be? I'm having difficulties figuring out what's going on here..\n. hi, any pointers to what the issue might be? I'm having difficulties figuring out what's going on here..\n. ",
    "dcorlett": "This still happens in rc2. Has anyone found a workaround?\n. This still happens in rc2. Has anyone found a workaround?\n. ",
    "AndrewSwerlick": "Obviously this issue is pretty much dead given templates is no longer supported, but for those stuck on an older release using the templates code, I was able to figure out the cause of this bug and a workaround. For others who stumble across this bug while googling, I solved it by monkey patch PDF::Core::Page like this\n\n```\nmodule PDF\n  module Core\n    class Page\n      def size\n        return @size if defined?(@size) && @size\n\n        case(layout)\n        when :portrait\n           dimensions[2,2]\n        when :landscape\n           dimensions[2,2].reverse\n        end\n      end\n    end\n  end\nend\n```\n\nBasically the problem is that when templates are used, the size instance variable does not get set, so call to page.size just return the dimensions. However, when this value is fed back into Page.new to create a new page, it reverses the coordinates if the layout is landscape. Since page.size already gives you the coordinates in landscape, reversing them makes it portrait. The change to the method ensures that the size method always returns coordinates as if the layout was portrait\n. @practicingruby Thanks. I was also wondering if I should post something in pdf-core. Arguably this is a pdf core bug, since currently if you ever pass :object_id to Page.new, it will fail to set the size instance variable, and as a result, incorrectly report the size for any landscape based layouts. That being said, I don't know if any code path that doesn't use templates would encounter this bug, because I don't know if anything else uses the :object_id option\n. @bvogel I wasn't necessarily proposing to reopen the item, I just wanted to leave the workaround there for posterity's sake. That being said, I think this may be outside of the realm of templates, since it's really tied to the behavior of `PDF::Core::Page`, so long as `PDF::Core::Page` allows you to pass an `:object_id` to the initialize options hash. When you build a page from an object with a landscape orientation, `PDF::Core::Page` will never properly report the size, and this will always screw up how `Prawn::Document#start_new_page` behaves. If the only reason `PDF::Core::Page` accepts `:object_id` is for templates, then probably that should be removed from the core code. If there are other reasons, then I think this is a broader `PDF::Core` bug.\n. Obviously this issue is pretty much dead given templates is no longer supported, but for those stuck on an older release using the templates code, I was able to figure out the cause of this bug and a workaround. For others who stumble across this bug while googling, I solved it by monkey patch PDF::Core::Page like this\n\n```\nmodule PDF\n  module Core\n    class Page\n      def size\n        return @size if defined?(@size) && @size\n\n        case(layout)\n        when :portrait\n           dimensions[2,2]\n        when :landscape\n           dimensions[2,2].reverse\n        end\n      end\n    end\n  end\nend\n```\n\nBasically the problem is that when templates are used, the size instance variable does not get set, so call to page.size just return the dimensions. However, when this value is fed back into Page.new to create a new page, it reverses the coordinates if the layout is landscape. Since page.size already gives you the coordinates in landscape, reversing them makes it portrait. The change to the method ensures that the size method always returns coordinates as if the layout was portrait\n. @practicingruby Thanks. I was also wondering if I should post something in pdf-core. Arguably this is a pdf core bug, since currently if you ever pass :object_id to Page.new, it will fail to set the size instance variable, and as a result, incorrectly report the size for any landscape based layouts. That being said, I don't know if any code path that doesn't use templates would encounter this bug, because I don't know if anything else uses the :object_id option\n. @bvogel I wasn't necessarily proposing to reopen the item, I just wanted to leave the workaround there for posterity's sake. That being said, I think this may be outside of the realm of templates, since it's really tied to the behavior of `PDF::Core::Page`, so long as `PDF::Core::Page` allows you to pass an `:object_id` to the initialize options hash. When you build a page from an object with a landscape orientation, `PDF::Core::Page` will never properly report the size, and this will always screw up how `Prawn::Document#start_new_page` behaves. If the only reason `PDF::Core::Page` accepts `:object_id` is for templates, then probably that should be removed from the core code. If there are other reasons, then I think this is a broader `PDF::Core` bug.\n. ",
    "bvogel": "Hi guys, \nI wouldn't reopen the issue here. As Gregory pointed out, there is no way for this issue to occur outside the realm of templates. My understanding is that prawn-templates should know the page layout and set it accordingly. \n. Andrew, you are correct about the code removal, template is the only use case to use object_ids as base for page objects. \n. Can you try with \n`text \"'&lt;' is the <i>less-than</i> sign\", :inline_format => true`\n. @nathan-munchery I did a patch towards the new prawn-template package to make it work for us with prawn 0.15.x. Give it a try and let us know. I#m willing to do my share towards maintaining the template gem as we depend on it as well. However my knowledge of PDF generation is very basic and my time is limited.\n. Hi, templates have been removed. Up to 0.15.0 you can use the prawn-templates gem with it. For 1.0.0 there exist neither a patch for that gem, not have there been API connection points defined for a necessary re-implementation. \n. If ever there has been a clearer error message - I doubt it. Grouping has been removed since version 1.0.0 and should not be used. \n. don't use `group` or go back to 0.15\n. I think you'll get more chances to someone really looking into this if you reduce your problem to a assertable test case and include the least amount of well formatted code to reproduce the problem. Also you never included an error/stack trace. \n(Did you read the change log note about table being a separate gem now?)\n. have a look into https://github.com/barsoom/prawn-print \n. It's Adobe that sets the standard - I have no insights how Google interprets it. My suggestion, just try and see whats happening (and maybe report back)\n. I'm no expert here, but have you tried adding two fonts, an english true-type font and the nepali font and use the english font for english and the nepali font for nepali text. That should work. see also in the closed issues list - there are at least three similar issues with font rendering. \n. Thanks @gettalong - I will look into that and report back!\n. Hi @gettalong, I managed to fix it, your pointers where helpful. However I would need another bit of help to get everything rounded up. Could you cast your knowing eyes upon said PR and read my last remark.\n\nI will close this issue for now.\n. BTW: the failing spec failed even before this PR...\n. I'm now checking against the `@document.state.page.fonts` hash. font-repository didn't look right.\n. Thanks Evan, I'll look into this tomorrow. \n. @practicingruby, I had to change your suggestion as the key will contain a subset part (see https://github.com/prawnpdf/prawn/blob/master/lib/prawn/font.rb#L370). I think current version should run just fine (specs are passing)\n\nI'm a bit at a loss as I don't know how a existing font should exist within the realm of prawn where no templates exist. Without this code specs of prawn-templates will fail, but I can't devise a form how test this in prawn only.\n. @packetmonkey - if I read the code correctly fonts are added by `add_to_current_page`(L365) to the page's font hash. The key for this hash is created by `identifier_for`(L370) which takes the identifier generated by `generate_unique_id` and adds `.#{subset}`. IMO the first font on the page will result in a key `F1.0`, and `include?` does a full string comparison so `\"F1\" == \"F1.0\"`will always return false. \nAm I making any sense?   \n. Evan, I completely agree with you on this. My first try to fix this issue would have been to add the fonts from the template to the pages font array so that the current id generation would continue to work as expected. Your approach would make this a lot easier. A related issue with the page size/orientation would be easier to treat if some method of injection would be in place. \n. Hi Evan @packetmonkey, I read in another PR that you will cut another release within a couple of days - how do we go about this issue? Implementing some kind of dependency injection seems a larger task, on the other hand I want to get a new version of prawn-templates out of the door to get that (apparently still frequently used feature) up to par with the current prawn release. How about merging this in and creating a separate issue to implement DI? \n. I'm OK with fixing this in PDF:Core. If you move this into Core, I'll prepare a PR against that our you change Core based on this PR, all is fine by me. Even if you are swamped, just point me to where you would see it in Core and I implement it there. \n. Ok, just to be clear: I'd start by moving `prawn/font.rb` and `prawn/font/` to `pdf/core/font.rb` and `pdf/core/font/` (and related specs) and then fix the references in prawn? \n. Hi Evan, I have been out of town so I only could take a look at the code again today: the font-registry isn't affected by this issue. The identifier thats generated is completely font related and has no direct impact on the document. The identifier is only used when adding the font to the directory of the document. As far as I understand it there is no direct reference to this directory key when using the font within the document. So my take is that what I mentioned in the last question (move all of font?).\n. Hi guys, I'll happily accept. I'll try to shell out some time this month and have a go at refactoring. But for the time being priority would be templates. Good news is that some users have been trying the code and it works for them :smile: \n. Hi guys, anything I need to do? Or is this now in hands of Evan?\n. :tada: :fireworks: :balloon: \n. @packetmonkey Hi Evan, I figure you are swamped at the moment, so please don't take this the wrong way just a friendly reminder to probably push a release before the end of the year?\n. Shouldn't this be tested and documented in the manual as well? \n. Please file this in the prawn-template project. The template code has been pulled and is no longer part of prawn. You should use the experimental code of my PR with the current master version of prawn to check wether this issue still applies. I'm waiting for the next prawn release to be able to release a new version of prawn-template.\n. Hi, first of all, you are using templates which isn't part of core prawnpdf. My recommendation would be generating all of the pdf in prawn so positioning will be easy. \nOtherwise there is no way apart from the way you are using. You may print a grid at 5x5 on top of the template to help positioning... \n. breaks my specs in prawn-templates as well. this was introduced by https://github.com/prawnpdf/prawn/pull/963 and would be (partly) fixed with https://github.com/prawnpdf/prawn/pull/1003. @gioele you can still use PDF-Templates via `prawn-templates`, however you are limited to one template per page and if you want to draw on top of the template it is recommended to fit the template size to the required page size. The code basically creates an additional content stream with the help of `pdf-reader` that sits in the background. The overall ramifications of this approach are above my level of understanding of the PDF specifications.. Hi guys, \nI wouldn't reopen the issue here. As Gregory pointed out, there is no way for this issue to occur outside the realm of templates. My understanding is that prawn-templates should know the page layout and set it accordingly. \n. Andrew, you are correct about the code removal, template is the only use case to use object_ids as base for page objects. \n. Can you try with \n`text \"'&lt;' is the <i>less-than</i> sign\", :inline_format => true`\n. @nathan-munchery I did a patch towards the new prawn-template package to make it work for us with prawn 0.15.x. Give it a try and let us know. I#m willing to do my share towards maintaining the template gem as we depend on it as well. However my knowledge of PDF generation is very basic and my time is limited.\n. Hi, templates have been removed. Up to 0.15.0 you can use the prawn-templates gem with it. For 1.0.0 there exist neither a patch for that gem, not have there been API connection points defined for a necessary re-implementation. \n. If ever there has been a clearer error message - I doubt it. Grouping has been removed since version 1.0.0 and should not be used. \n. don't use `group` or go back to 0.15\n. I think you'll get more chances to someone really looking into this if you reduce your problem to a assertable test case and include the least amount of well formatted code to reproduce the problem. Also you never included an error/stack trace. \n(Did you read the change log note about table being a separate gem now?)\n. have a look into https://github.com/barsoom/prawn-print \n. It's Adobe that sets the standard - I have no insights how Google interprets it. My suggestion, just try and see whats happening (and maybe report back)\n. I'm no expert here, but have you tried adding two fonts, an english true-type font and the nepali font and use the english font for english and the nepali font for nepali text. That should work. see also in the closed issues list - there are at least three similar issues with font rendering. \n. Thanks @gettalong - I will look into that and report back!\n. Hi @gettalong, I managed to fix it, your pointers where helpful. However I would need another bit of help to get everything rounded up. Could you cast your knowing eyes upon said PR and read my last remark.\n\nI will close this issue for now.\n. BTW: the failing spec failed even before this PR...\n. I'm now checking against the `@document.state.page.fonts` hash. font-repository didn't look right.\n. Thanks Evan, I'll look into this tomorrow. \n. @practicingruby, I had to change your suggestion as the key will contain a subset part (see https://github.com/prawnpdf/prawn/blob/master/lib/prawn/font.rb#L370). I think current version should run just fine (specs are passing)\n\nI'm a bit at a loss as I don't know how a existing font should exist within the realm of prawn where no templates exist. Without this code specs of prawn-templates will fail, but I can't devise a form how test this in prawn only.\n. @packetmonkey - if I read the code correctly fonts are added by `add_to_current_page`(L365) to the page's font hash. The key for this hash is created by `identifier_for`(L370) which takes the identifier generated by `generate_unique_id` and adds `.#{subset}`. IMO the first font on the page will result in a key `F1.0`, and `include?` does a full string comparison so `\"F1\" == \"F1.0\"`will always return false. \nAm I making any sense?   \n. Evan, I completely agree with you on this. My first try to fix this issue would have been to add the fonts from the template to the pages font array so that the current id generation would continue to work as expected. Your approach would make this a lot easier. A related issue with the page size/orientation would be easier to treat if some method of injection would be in place. \n. Hi Evan @packetmonkey, I read in another PR that you will cut another release within a couple of days - how do we go about this issue? Implementing some kind of dependency injection seems a larger task, on the other hand I want to get a new version of prawn-templates out of the door to get that (apparently still frequently used feature) up to par with the current prawn release. How about merging this in and creating a separate issue to implement DI? \n. I'm OK with fixing this in PDF:Core. If you move this into Core, I'll prepare a PR against that our you change Core based on this PR, all is fine by me. Even if you are swamped, just point me to where you would see it in Core and I implement it there. \n. Ok, just to be clear: I'd start by moving `prawn/font.rb` and `prawn/font/` to `pdf/core/font.rb` and `pdf/core/font/` (and related specs) and then fix the references in prawn? \n. Hi Evan, I have been out of town so I only could take a look at the code again today: the font-registry isn't affected by this issue. The identifier thats generated is completely font related and has no direct impact on the document. The identifier is only used when adding the font to the directory of the document. As far as I understand it there is no direct reference to this directory key when using the font within the document. So my take is that what I mentioned in the last question (move all of font?).\n. Hi guys, I'll happily accept. I'll try to shell out some time this month and have a go at refactoring. But for the time being priority would be templates. Good news is that some users have been trying the code and it works for them :smile: \n. Hi guys, anything I need to do? Or is this now in hands of Evan?\n. :tada: :fireworks: :balloon: \n. @packetmonkey Hi Evan, I figure you are swamped at the moment, so please don't take this the wrong way just a friendly reminder to probably push a release before the end of the year?\n. Shouldn't this be tested and documented in the manual as well? \n. Please file this in the prawn-template project. The template code has been pulled and is no longer part of prawn. You should use the experimental code of my PR with the current master version of prawn to check wether this issue still applies. I'm waiting for the next prawn release to be able to release a new version of prawn-template.\n. Hi, first of all, you are using templates which isn't part of core prawnpdf. My recommendation would be generating all of the pdf in prawn so positioning will be easy. \nOtherwise there is no way apart from the way you are using. You may print a grid at 5x5 on top of the template to help positioning... \n. breaks my specs in prawn-templates as well. this was introduced by https://github.com/prawnpdf/prawn/pull/963 and would be (partly) fixed with https://github.com/prawnpdf/prawn/pull/1003. @gioele you can still use PDF-Templates via `prawn-templates`, however you are limited to one template per page and if you want to draw on top of the template it is recommended to fit the template size to the required page size. The code basically creates an additional content stream with the help of `pdf-reader` that sits in the background. The overall ramifications of this approach are above my level of understanding of the PDF specifications.. ",
    "boutil": "Here are some information about the fonts:\nThe following may not be distributed freely:\n- comicsans.ttf (Microsoft: http://www.microsoft.com/typography/fonts/font.aspx?FMID=35)\n- Chalkboard.ttf (Apple: http://www.apple.com/legal/sla/)\n- Action Man.dfont (from the file: Freeware for non-commercial use)\n- Activa.ttf (has a strange copyright statement \"Converted from D:\\FONTTEMP\\ACTIVA.TF1 by \n  ALLTYPE\", I was unable to trace to a license)\n\nthe following fonts are ok:\n-Dustimo_Roman.ttf is GPL2+\n-the .afm files have a license attached in the MustRead.html\n-DejaVuSans.ttf (http://dejavu-fonts.org/wiki/index.php?title=License)\n-gkai00mp.ttf (http://packages.debian.org/changelogs/pool/main/t/ttf-arphic-gkai00mp/ttf-arphic-gkai00mp_2.11-6.1/ttf-arphic-gkai00mp.copyright).\n. Thanks @yob for this proposition. This is about the same as what I proposed since \"binary\" is synonym of \"ASCII-8BIT\". \nMaking this change makes the tests pass with 1.9.3p194, but fail with 1.9.3p0 (because in that case, the string returned is not \"binary\" but \"us-ascii\". The question is thus what should be the encoding of the string returned by encode_text, and is it ok that it depends on the version of Ruby used?\n. Thanks for the explanation. I used your patch to close the Debian bug.\n. Hi!\nA test for a .git directory should probably added, since this would fail if the source is not obtained from a Git repository (but from the gem or a source package from a Linux distribution)\n. @sandal, I just pushed a proposition to the branch manual-cover-git.\n. @sandal, this is pull request https://github.com/prawnpdf/prawn/pull/691.\n. :+1:\n. Hi!\n\nWhat we use (or more precisely are about to use) in Debian at the moment is a fake version number 1.0.0~rc2+really0.14.0, which is higher than 1.0~rc2. It is a bit ugly, but allows us to continue with continuously increasing version number until 1.0 is released, and the ugliness will disappear at that time. Maybe you can consider doing something similar in Fedora.\n. @sandal I confirm its works great. Thanks for fixing my missing question mark.\n. That would indeed solve my problem. I'll submit a pull request with this\nchange. Thanks for the idea.\n. Hmm... this needs a newer version of RSpec in the gemfile...\n. Here are some information about the fonts:\nThe following may not be distributed freely:\n- comicsans.ttf (Microsoft: http://www.microsoft.com/typography/fonts/font.aspx?FMID=35)\n- Chalkboard.ttf (Apple: http://www.apple.com/legal/sla/)\n- Action Man.dfont (from the file: Freeware for non-commercial use)\n- Activa.ttf (has a strange copyright statement \"Converted from D:\\FONTTEMP\\ACTIVA.TF1 by \n  ALLTYPE\", I was unable to trace to a license)\n\nthe following fonts are ok:\n-Dustimo_Roman.ttf is GPL2+\n-the .afm files have a license attached in the MustRead.html\n-DejaVuSans.ttf (http://dejavu-fonts.org/wiki/index.php?title=License)\n-gkai00mp.ttf (http://packages.debian.org/changelogs/pool/main/t/ttf-arphic-gkai00mp/ttf-arphic-gkai00mp_2.11-6.1/ttf-arphic-gkai00mp.copyright).\n. Thanks @yob for this proposition. This is about the same as what I proposed since \"binary\" is synonym of \"ASCII-8BIT\". \nMaking this change makes the tests pass with 1.9.3p194, but fail with 1.9.3p0 (because in that case, the string returned is not \"binary\" but \"us-ascii\". The question is thus what should be the encoding of the string returned by encode_text, and is it ok that it depends on the version of Ruby used?\n. Thanks for the explanation. I used your patch to close the Debian bug.\n. Hi!\nA test for a .git directory should probably added, since this would fail if the source is not obtained from a Git repository (but from the gem or a source package from a Linux distribution)\n. @sandal, I just pushed a proposition to the branch manual-cover-git.\n. @sandal, this is pull request https://github.com/prawnpdf/prawn/pull/691.\n. :+1:\n. Hi!\n\nWhat we use (or more precisely are about to use) in Debian at the moment is a fake version number 1.0.0~rc2+really0.14.0, which is higher than 1.0~rc2. It is a bit ugly, but allows us to continue with continuously increasing version number until 1.0 is released, and the ugliness will disappear at that time. Maybe you can consider doing something similar in Fedora.\n. @sandal I confirm its works great. Thanks for fixing my missing question mark.\n. That would indeed solve my problem. I'll submit a pull request with this\nchange. Thanks for the idea.\n. Hmm... this needs a newer version of RSpec in the gemfile...\n. ",
    "fidothe": "I'm working through this, replacing problematic fonts with viably licensed ones. There are a couple of issues.\n1. We probably need to purge Comic Sans, Chalkboard, and Activa from the repo - I'm not sure what the legal status of having these available in past versions of the repo is, but I'm betting it's not great. `git filter-branch` is not my idea of fun, but there you go.\n\n(We don't need to purge Action Man, but we should stop using it.)\n1. In generating a viably-licensed `.dfont` I've either a) discovered a bug in TTFunk, b) discovered a bug in Font Forge, or c) been an incompetent user of Font Forge. I'm trying to puzzle that out at the moment. The problem is that creating a `.dfont` suitcase from a family of `.ttf`s is creating a file that, although Font Book and Font Explorer think it's fine, TTFunk fails to extract any named fonts from, causing the style family stuff in Prawn to die horribly with `KeyError`s while here https://github.com/prawnpdf/prawn/blob/master/manual/text/registering_families.rb#L29-L32.\n\nI'll keep plugging away at that as and when I have time. I'm hoping I can figure out whose problem it is imminently. Let's hope it's me being a dumbass.\n. @sandal I was thinking something along the lines of dropping in a named replacement in order to keep any purging tightly contained.\n\nPretty sure it's a TTFunk bug now, but I'm not sure why. I am pretty sure that it would be a problem for any Font Forge-produced `.dfont` though. Digging deeper in order to file bug / fix TTFunk.\n. @sandal yeah. Trying to understand the problem first - generating/finding a `.dfont` whose license we can use and which won't cause every prior commit to have broken tests / manual gets us out of that hole and allows me to investigate TTFunk separately...\n. @gettalong That's a good point, I'd forgotten that all subsequent commits would get rewritten, not just the actually changed revision... :-(\n. I've managed to get a bit sidetracked by the fonts thing. The issue is that I haven't been able to find license-conforming fonts which don't break TTFunk.\n\nI have, however, done enough to research to figure out roughly what I need to do to fix TTFunk, and that, coincidentally, that would also make it pretty easy to implement support for `.ttc` TrueType Container font suitcases once that was done. I'll take another look at the manual this week and see if I can't make a version that temporarily excises the broken bit and leaves the rest.\n. We support `.dfont` collections, which apple have deprecated in favour of `.ttc`. One of my tasks this holiday is to understand TrueType well enough to start digging into TTFunk: `.ttc` is a priority for me, but don't hold your breath: I fear the ramp up in my understanding required will be significant...\n\nSent from my iPhone\n\n> On 23 Dec 2013, at 20:04, Gregory Brown notifications@github.com wrote:\n> \n> There's no need to refile the ticket, because we don't track feature requests -- only bugs and pull requests for current work-in-progress. Discussions about features before any work has begun are welcome on the Prawn mailing list, though.\n> \n> I would definitely like to have some sort of FAQ or guides for Prawn as a whole, but we don't have a dedicated place for them yet. For now, perhaps you can write a short blog post or a mailing list post with instructions on how you got around this problem, and then link it here.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n. Verification wasn't so hard after all, once I realised what PDF::Inspector was for :-)\n. Yeah, I just noticed that. It's already fixed here (I made the stupid assumption that there were no other clients for build_image_object, and pushed the input verification up to where I thought the API boundary was...), so I'll close this pull request and open a new one in a sec\n. Fixes the regression the last PR introduced with Cell::Image. Sorry.\n. Based on the failed run from my botched implementation, I think there will probably be problems with 1.8 and this PR. I'll wait for the test run and see.\n. Yes, fails on 1.8 - have (I think) fixed it, will close this and open a new PR\n. Yeah, this looks like it's actually a nasty case of almost-duck. Paperclip isn't giving you an IO object, it's giving you an adapter object around an IO object. Prawn was relying on IO objects supporting `#binmode` so that we can get proper binary data and not, say, UTF-8... The Paperclip adapter class delegates a load of other methods to the underlying IO object, but not `#binmode`. I need to do a bit of poking around, but this may be a combination of an oversight by the Paperclip team and being too prescriptive in Prawn...\n. I'm going to go ahead and merge this back in - the problem the original caused in #585 is well understood (it was a bug in Paperclip, who were supplying an object which wrapped an `IO`, and delegated a lot of the `IO` methods, but didn't delegate `binmode`) and this tweaked version duck-types `IO`'s using `rewind`, with a guarded call to `binmode`.\n. I'm looking at the manual at the moment. Will have a go tomorrow.\n. So, I ran the manual build task around 100 times with this script, and there were no problems, unfortunately:\n\n``` ruby\nok = true\ncount = 0\nwhile ok\n  count += 1\n  o_r, o_w = IO.pipe\n  e_r, e_w = IO.pipe\n  ok = system(\"rake\", \"manual\", out: o_w, err: e_w)\n  o_w.close\n  e_w.close\n  if !ok\n    puts o_r.read\n    puts e_r.read\n  end\n  print \".\" if ok\nend\n```\n\nI'm on 2.0.0-p247, on Mac OS X 10.7\n. MIT would be great.\n. I think you want to avoid BigDecimal like the plague here. PostScript Points -> any sane measurement system involves lots of silly floating point, BigDecimal assumes something rather saner. I was wondering whether some precision limit was worth enforcing (AFAICT InDesign et al don't output anything like the precision Prawn does, they round out at 3 or 4 places (IIRC)). That might, in turn, make this kind of problem largely go away. [I realise that this is not an entirely helpful comment in this context]\n. I had to write PDF/X PDFs out with Prawn and it was pretty straightforward, as long as you can control any images you're embedding - they need to be CMYK, and Prawn won't police that for you. I'll try and extract an example of that code into a Gist later on. The main differences between PDF/X and normal PDF are the TrimBox and BleedBox settings you need, plus some extra refs (OutputIntent, and embedding an ICC profile). Verbose, but not super tricky.\n. Here you go, everyone: https://gist.github.com/fidothe/32613b44a5b6588531d9\n. and for reference here, a collection of links to resources about pdf/x-the-format: https://pinboard.in/u:fidothe/t:pdfx\n. Having just dug into this, there's a very simple 'fix': simply replace the call to `require 'pdf/core/text'` in `lib/prawn/text.rb` with `require 'pdf/core'`, or remove the call completely.\r\n\r\nThe question I have is: why are things inside `pdf-core` (i.e. not just `pdf-core`) being required? Normally I would assume that such a use is because the thing in question is a stand-alone chunk of functionality (\u00e0 la `active_support/blah` in Rails).\r\n\r\nIf this is the case, then another fix (an actual fix) would be to not `require` or `require_relative` `pdf/core/text` from  `lib/pdf/core.rb` in `pdf-core`.\r\n\r\nThe main use for `require_relative` is that, because it skips the `$LOAD_PATH` lookups, it's much, much, faster than `require`, particularly if you have a lot of gems installed and aren't using Bundler. That seems to argue for keeping `require_relative` in `pdf-core`, but ensuring that things you want to require standalone from `pdf-core` are not required by default.\r\n\r\nIf someone would like, I can prepare a PR tomorrow that removes or alters the requires to `pdf/core` in Prawn to only require `pdf/core` itself.. I'm working up a minimal-test-case to check this out. I don't think (at this point) that there's a bug in Bundler. What I think is happening is that the first thing that requires into `pdf-core` is getting the symlinked dir for `File.expand_path('.')` (which is effectively what `require_relative` uses), and requires from the actual files in `pdf-core` get the original dir (the target of the symlink), which gives two separate absolute paths, hence the double require.. This is definitely the result of `require_relative` and `require` behaving differently with respect to symlinks. I've got a simple example here: https://github.com/fidothe/symlink-require. I've opened a bug on Ruby to see if this is intended behaviour or not. (https://bugs.ruby-lang.org/issues/13695).. We merged a fix for #1024 that avoids the underlying problem. I'm going to close this PR as a result.. #1032 is failing because of the Rubocop warnings this fixes. If this can get merged I can rebase it off master and it'll pass.... @pointlessone no - I don't have write access. I'm working through this, replacing problematic fonts with viably licensed ones. There are a couple of issues.\n1. We probably need to purge Comic Sans, Chalkboard, and Activa from the repo - I'm not sure what the legal status of having these available in past versions of the repo is, but I'm betting it's not great. `git filter-branch` is not my idea of fun, but there you go.\n\n(We don't need to purge Action Man, but we should stop using it.)\n1. In generating a viably-licensed `.dfont` I've either a) discovered a bug in TTFunk, b) discovered a bug in Font Forge, or c) been an incompetent user of Font Forge. I'm trying to puzzle that out at the moment. The problem is that creating a `.dfont` suitcase from a family of `.ttf`s is creating a file that, although Font Book and Font Explorer think it's fine, TTFunk fails to extract any named fonts from, causing the style family stuff in Prawn to die horribly with `KeyError`s while here https://github.com/prawnpdf/prawn/blob/master/manual/text/registering_families.rb#L29-L32.\n\nI'll keep plugging away at that as and when I have time. I'm hoping I can figure out whose problem it is imminently. Let's hope it's me being a dumbass.\n. @sandal I was thinking something along the lines of dropping in a named replacement in order to keep any purging tightly contained.\n\nPretty sure it's a TTFunk bug now, but I'm not sure why. I am pretty sure that it would be a problem for any Font Forge-produced `.dfont` though. Digging deeper in order to file bug / fix TTFunk.\n. @sandal yeah. Trying to understand the problem first - generating/finding a `.dfont` whose license we can use and which won't cause every prior commit to have broken tests / manual gets us out of that hole and allows me to investigate TTFunk separately...\n. @gettalong That's a good point, I'd forgotten that all subsequent commits would get rewritten, not just the actually changed revision... :-(\n. I've managed to get a bit sidetracked by the fonts thing. The issue is that I haven't been able to find license-conforming fonts which don't break TTFunk.\n\nI have, however, done enough to research to figure out roughly what I need to do to fix TTFunk, and that, coincidentally, that would also make it pretty easy to implement support for `.ttc` TrueType Container font suitcases once that was done. I'll take another look at the manual this week and see if I can't make a version that temporarily excises the broken bit and leaves the rest.\n. We support `.dfont` collections, which apple have deprecated in favour of `.ttc`. One of my tasks this holiday is to understand TrueType well enough to start digging into TTFunk: `.ttc` is a priority for me, but don't hold your breath: I fear the ramp up in my understanding required will be significant...\n\nSent from my iPhone\n\n> On 23 Dec 2013, at 20:04, Gregory Brown notifications@github.com wrote:\n> \n> There's no need to refile the ticket, because we don't track feature requests -- only bugs and pull requests for current work-in-progress. Discussions about features before any work has begun are welcome on the Prawn mailing list, though.\n> \n> I would definitely like to have some sort of FAQ or guides for Prawn as a whole, but we don't have a dedicated place for them yet. For now, perhaps you can write a short blog post or a mailing list post with instructions on how you got around this problem, and then link it here.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n. Verification wasn't so hard after all, once I realised what PDF::Inspector was for :-)\n. Yeah, I just noticed that. It's already fixed here (I made the stupid assumption that there were no other clients for build_image_object, and pushed the input verification up to where I thought the API boundary was...), so I'll close this pull request and open a new one in a sec\n. Fixes the regression the last PR introduced with Cell::Image. Sorry.\n. Based on the failed run from my botched implementation, I think there will probably be problems with 1.8 and this PR. I'll wait for the test run and see.\n. Yes, fails on 1.8 - have (I think) fixed it, will close this and open a new PR\n. Yeah, this looks like it's actually a nasty case of almost-duck. Paperclip isn't giving you an IO object, it's giving you an adapter object around an IO object. Prawn was relying on IO objects supporting `#binmode` so that we can get proper binary data and not, say, UTF-8... The Paperclip adapter class delegates a load of other methods to the underlying IO object, but not `#binmode`. I need to do a bit of poking around, but this may be a combination of an oversight by the Paperclip team and being too prescriptive in Prawn...\n. I'm going to go ahead and merge this back in - the problem the original caused in #585 is well understood (it was a bug in Paperclip, who were supplying an object which wrapped an `IO`, and delegated a lot of the `IO` methods, but didn't delegate `binmode`) and this tweaked version duck-types `IO`'s using `rewind`, with a guarded call to `binmode`.\n. I'm looking at the manual at the moment. Will have a go tomorrow.\n. So, I ran the manual build task around 100 times with this script, and there were no problems, unfortunately:\n\n``` ruby\nok = true\ncount = 0\nwhile ok\n  count += 1\n  o_r, o_w = IO.pipe\n  e_r, e_w = IO.pipe\n  ok = system(\"rake\", \"manual\", out: o_w, err: e_w)\n  o_w.close\n  e_w.close\n  if !ok\n    puts o_r.read\n    puts e_r.read\n  end\n  print \".\" if ok\nend\n```\n\nI'm on 2.0.0-p247, on Mac OS X 10.7\n. MIT would be great.\n. I think you want to avoid BigDecimal like the plague here. PostScript Points -> any sane measurement system involves lots of silly floating point, BigDecimal assumes something rather saner. I was wondering whether some precision limit was worth enforcing (AFAICT InDesign et al don't output anything like the precision Prawn does, they round out at 3 or 4 places (IIRC)). That might, in turn, make this kind of problem largely go away. [I realise that this is not an entirely helpful comment in this context]\n. I had to write PDF/X PDFs out with Prawn and it was pretty straightforward, as long as you can control any images you're embedding - they need to be CMYK, and Prawn won't police that for you. I'll try and extract an example of that code into a Gist later on. The main differences between PDF/X and normal PDF are the TrimBox and BleedBox settings you need, plus some extra refs (OutputIntent, and embedding an ICC profile). Verbose, but not super tricky.\n. Here you go, everyone: https://gist.github.com/fidothe/32613b44a5b6588531d9\n. and for reference here, a collection of links to resources about pdf/x-the-format: https://pinboard.in/u:fidothe/t:pdfx\n. Having just dug into this, there's a very simple 'fix': simply replace the call to `require 'pdf/core/text'` in `lib/prawn/text.rb` with `require 'pdf/core'`, or remove the call completely.\r\n\r\nThe question I have is: why are things inside `pdf-core` (i.e. not just `pdf-core`) being required? Normally I would assume that such a use is because the thing in question is a stand-alone chunk of functionality (\u00e0 la `active_support/blah` in Rails).\r\n\r\nIf this is the case, then another fix (an actual fix) would be to not `require` or `require_relative` `pdf/core/text` from  `lib/pdf/core.rb` in `pdf-core`.\r\n\r\nThe main use for `require_relative` is that, because it skips the `$LOAD_PATH` lookups, it's much, much, faster than `require`, particularly if you have a lot of gems installed and aren't using Bundler. That seems to argue for keeping `require_relative` in `pdf-core`, but ensuring that things you want to require standalone from `pdf-core` are not required by default.\r\n\r\nIf someone would like, I can prepare a PR tomorrow that removes or alters the requires to `pdf/core` in Prawn to only require `pdf/core` itself.. I'm working up a minimal-test-case to check this out. I don't think (at this point) that there's a bug in Bundler. What I think is happening is that the first thing that requires into `pdf-core` is getting the symlinked dir for `File.expand_path('.')` (which is effectively what `require_relative` uses), and requires from the actual files in `pdf-core` get the original dir (the target of the symlink), which gives two separate absolute paths, hence the double require.. This is definitely the result of `require_relative` and `require` behaving differently with respect to symlinks. I've got a simple example here: https://github.com/fidothe/symlink-require. I've opened a bug on Ruby to see if this is intended behaviour or not. (https://bugs.ruby-lang.org/issues/13695).. We merged a fix for #1024 that avoids the underlying problem. I'm going to close this PR as a result.. #1032 is failing because of the Rubocop warnings this fixes. If this can get merged I can rebase it off master and it'll pass.... @pointlessone no - I don't have write access. ",
    "dotob": "thanks for the advise. perhaps it would make sense to mention that fact (upper left corner ist starting point for elements) in the dokument. i find it rather disturbing.\n. wow, very cool. keep on the good work.\n. thanks for the advise. perhaps it would make sense to mention that fact (upper left corner ist starting point for elements) in the dokument. i find it rather disturbing.\n. wow, very cool. keep on the good work.\n. ",
    "metacritical": "Thankyou\n. Yes i had 0.12.0, so built it from git thanks.\n. I am having another issue now\n\nThe default gem installed by bundler is \"~> 0.12.0\" how do i install \"~> 1.0.0rc1\" because \n\nPrawn::Document.generate \"implicit.pdf\" do\ntext \"Hello World\" , :color => \"0000FF\"\nend\n\nabove code is working only with 1.0.0 and not 0.12.0, it generates PDF and everything with 0.12.0 which is the stable release but dosen't color my text. The latest 1.0.0rc1 colors perfectly. So How do i make my bundler install 1.0.0rc1.\n\nbudler gives an error if i specify this in gem file : gem \"prawn\", \"~> 1.0.0.rc1\"\n. Thanks, the mistake was `source :rubygems` but now it works.\n\nAlso this also worked too : `gem \"nokogiri\", :git => \"git://github.com/tenderlove/nokogiri.git\"`\n. Thankyou\n. Yes i had 0.12.0, so built it from git thanks.\n. I am having another issue now\n\nThe default gem installed by bundler is \"~> 0.12.0\" how do i install \"~> 1.0.0rc1\" because \n\nPrawn::Document.generate \"implicit.pdf\" do\ntext \"Hello World\" , :color => \"0000FF\"\nend\n\nabove code is working only with 1.0.0 and not 0.12.0, it generates PDF and everything with 0.12.0 which is the stable release but dosen't color my text. The latest 1.0.0rc1 colors perfectly. So How do i make my bundler install 1.0.0rc1.\n\nbudler gives an error if i specify this in gem file : gem \"prawn\", \"~> 1.0.0.rc1\"\n. Thanks, the mistake was `source :rubygems` but now it works.\n\nAlso this also worked too : `gem \"nokogiri\", :git => \"git://github.com/tenderlove/nokogiri.git\"`\n. ",
    "amejiarosario": "Yes, It'd be very helpful for the designing phase!! \n. Yes, It'd be very helpful for the designing phase!! \n. ",
    "AlainPilon": "+1 for putting this in Prawn. Right now my alternative is to put tape marks on my screen... \n. +1 for putting this in Prawn. Right now my alternative is to put tape marks on my screen... \n. ",
    "nmarley": "I agree. What can be done to add this? Is additional discussion needed? Can someone re-open this?\n. I agree. What can be done to add this? Is additional discussion needed? Can someone re-open this?\n. ",
    "pzgz": "+1 for this, very useful during debugging\n. +1 for this, very useful during debugging\n. ",
    "dedan": "+1 for merging this!\n. +1 for merging this!\n. ",
    "dexion": "Thanks. All work great\n. Thanks. All work great\n. ",
    "samitheberber": "I can confirm this issue too\n. I can confirm this issue too\n. ",
    "mojavelinux": "I'm still seeing this problem with 0.13.1 and HEAD if there is an image on the template page.\n. What's the reason support is being dropped? I mean, except for the compress issue, it works. I find it useful for being able to merge PDF documents to weave dynamic pages into a static boilerplate document.\n\nBtw, you can reproduce by adding 'complex_template.rb' to the manual/templates directory with the following code:\n\n``` ruby\nrequire File.expand_path(File.join(File.dirname(__FILE__),\n                                   %w[.. example_helper]))\n\nfilename = \"#{Prawn::DATADIR}/pdfs/complex_template.pdf\"\n\nPrawn::Example.generate(\"complex_template.pdf\", :template => filename, :compress => true) do\n  go_to_page(page_count)\n\n  start_new_page\n\n  text \"Previous pages and content imported.\", :align => :center\n  text \"This page and content is brand new.\",  :align => :center\nend\n```\n. Another way to ask the question, is there an alternative way to use Prawn to weave new pages into an existing PDF? I'm not that interested in modifying the pages I import (otherwise, I would just create them from scratch).\n. Thanks for the reply @sandal. What I ended up doing was using GhostScript 9.10 to optimize the PDF after Prawn generates it. The quality of the optimized PDF is quite acceptable and seems to be the right solution for my needs. Here's the optimize script I wrote:\n\nhttps://github.com/opendevise/asciidoctor-pdf/blob/master/bin/optimize-pdf\n. Although I like pdftk a lot, the reason I can't use it in my case is because I need the imported pages to occupy space when I'm creating the document. Granted, I could leave blank pages and then swap in the real pages in a postprocessing step, but it's much more convenient to do that in the main script. But that might be besides the point.\n. I added a link to a prototype for this in Asciidoctor PDF. Like @sandal's example, the one in the example below is far from complete, but provides some idea of what needs to be done. This is, no doubt, a tricky one to implement. However, once we have a proper component for it, it should just fall into place.\n\nhttps://github.com/asciidoctor/asciidoctor-pdf/issues/9#issuecomment-61224810\n. You should be able to use fontforge to convert the font to TTF. It's a really horrible looking interface, but it gets the job done quite well. I've also written a script that subsets fonts and kicks out TTF. https://github.com/asciidoctor/asciidoctor-epub3/blob/master/scripts/generate-font-subsets.pe (you don't have to subset, I'm just doing that to minimize the font file).\n. @sandal Thanks for reminding me of that. That's definitely a nice feature the have in Prawn (and PDFs in general).\n\nI think the reason I am subsetting is to minimize the size of the distribution of the gem I'm putting it in (Asciidoctor PDF and EPUB3). I'll make sure I note in the Asciidoctor PDF docs that Prawn will subset whatever font is provided.\n. @chloerei We should probably discuss that script on discuss.asciidoctor.org or in the asciidoctor-epub3 repository (where it lives). We don't want to clutter up the Prawn issue tracker with this discussion.\n\nYes, by default it drops the CJK. You need to add \"multilingual\" to the copy_scripts array. In other words, just hack the script. For follow-up, let's discuss in one of the places I mentioned (if it's easiest for you, the asciidoctor-epub3 repo). We might even want to move that script to it's own repo eventually if people find it generally useful.\n. @sandal FontForge is worth knowing. It's amazingly complete when it comes to handling, analyzing, converting and subsetting fonts. It's just a UX nightmare ;)\n. We really need to revisit native OTF support for Prawn, even if ask for community help. It's use is growing, particular for CJK support. Forcing people to convert to TTF or find a TTF version of the font is tedious and lossy. I don't know how you want to handle big roadmap items, but I think it's important to at least communicate that help is needed in this area...esp if we want to get help from font specialists.\n. I have absolutely no time, nor the required experience, to tackle this issue. I am already maxing out my days working on open source documentation tools. I'm merely pointing out that it's going to quickly become a sore spot in Prawn if we, as a community, don't start advocating for / championing interest in solving it. In my opinion, an _open_ issue is what helps communicate that point, not a closed one.\n. Related issue, which includes an open offer to help implement this feature, for reference: #893.\n. This issue was closed, but no reason was given. What's the verdict? Does prawn support TrueType Collection files (ttc) or not? If so, are there instructions for how to load them?\n. Ah. So perhaps this should be refiled in ttfunk or a parallel issue opened there at least?\n. Btw, I successfully split a TTC into multiple TTF files using the following library, which might serve as a useful reference for someone looking to make a patch:\n\nhttp://sourceforge.net/projects/ttf2ttc\n. Even if a patch isn't added, perhaps instructions for how to extract TTF files from a TTC would be useful for Prawn users like myself.\n. I can also add that many users of Asciidoctor PDF are requesting a feature that depends on it. See https://github.com/asciidoctor/asciidoctor-pdf/issues/56. I've hacked in some support for linking to sections, but references are not generally available atm.\n. Great! Thanks!\n\nAs I work on the feature, I'll let you know if any instincts about an API\nemerge.\n. > (There are probably better OTF to TTF converters out there!)\n\nI highly recommend fontforge. Don't let the ugly UI deter you. Underneath that tacky veneer is a very powerful tool that just does the right thing out of the box in most cases. It also has a decent guide.\n\nhttp://fontforge.org/editexample.html\n\nand a nice book\n\nhttp://designwithfontforge.com/en-US/index.html\n\nUnderstanding how fonts are structured is worth the time if you are going to be working with them more than just pulling one off the shelf. I'm very far from an expert, but at least I'm feeling comfortable working with them. I'm hoping that knowledge is going to play into ttfunk's future.\n. Just FYI, I've found at least one way to control the zoom level is to set the FitToWindow flag on ViewPreferences in the catalog.\n\n``` ruby\ncatalog.data[:ViewerPreferences] = [:FitWindow]\n```\n. We also use this method in Asciidoctor PDF to paint the background color of the page.\n\nhttps://github.com/asciidoctor/asciidoctor-pdf/blob/master/lib/asciidoctor-pdf/converter.rb#L96\n\nIs there another way to accomplish this?\n. @sandal Thanks for the clarification / input. I'll give it some thought when I upgrade Asciidoctor PDF to the latest Prawn.\n. @practicingruby is absolutely right. This is not Prawn's conflict to resolve. Asciidoctor PDF needs to be refactored as a Prawn View (see https://github.com/asciidoctor/asciidoctor-pdf/issues/53). When that is done, we can rename the reference to the Asciidoctor document object as needed. Further comment should be directed to the linked issue.\n. I'll add that we're very interested in this feature for users of Asciidoctor PDF (based on Prawn) and would be willing to help implement and/or test. I'll be following the issue.\n. I need this method too. Perhaps we can compromise and call it it csspx2pt. While there is no univeral points to pixels conversion, then there's the real world where this works most of the time. So this is useful.\n. Cool. We'll definitely be using this in Asciidoctor PDF, whether it makes it into Prawn or not.\n. > How Can I help?\n\nAre you asking about Prawn or Asciidoctor PDF?\n. > I guess the best path would be to look at the issues?\n\nIndeed. Many of them relate to Prawn and how we use it. I'm fixing a lot of the little stuff right now.\n\nThe big (but fun and challenging) issue is how we are organizing the code. I didn't know Prawn very well when I started it, so we ended up with a monolithic subclass of Document. We really need to upgrade Prawn and migrate to a Prawn View. The first step is a simple demonstration of how that might look. I have no problem porting the code if we have a clear idea of where we are going. See https://github.com/asciidoctor/asciidoctor-pdf/issues/53\n\nThe other major issue is inline and floated images. I have an idea about how to do it, but I wish it were something that Prawn could handle natively. See https://github.com/asciidoctor/asciidoctor-pdf/issues/9\n\nPrawn is critical to the future of Asciidoctor PDF because, honestly, there is really no other library or tool that produces half-way decent PDFs...nothing that comes close to Prawn. The only other real contender (for our stack) is iText. But we need changes to the Asciidoctor and AsciidoctorJ APIs before we can start that experiment...so we continue to push forward with Prawn.\n. And to clarify, aside from being a converter from AsciiDoc to PDF, the goal of Asciidoctor PDF is to provide the fastest way to create a professional-looking PDF document from scratch. This is particularly value for writers, but I use it for all my business documents (contracts, agreements) as well.\n\n```\necho -e \"= Document Title\nAuthor Name\n\nCreating a PDF doesn't get much easier than this.\" | asciidoctor-pdf -o sample.pdf -\n```\n. > One solution may be to use ruby's open classes to define the method yourself and use it such as\n\nThat's the approach I was planning to take. If you are using Ruby 2+, you also have prepend as a way to do it.\n\n> my next project is now going to use furlongs just so I can say it in meetings\n\nSolid. Bring back the furlong!\n\n> I'll reopen the PR while we come up with a solution that works for everyone.\n\nI think we should either add the methods `css_px2pt` and `pt2ccs_px` or do nothing. I don't really see an API extension point here as these are just utility classes.\n\nWhat is useful is to know about this relationship. It took me over a year to discover it. Having something in the manual would have been a huge help to me in the beginning...even if you say in the manual that it isn't a universal thing, but likely will map in a predictable way in most cases...that would have helped me think about the transition from web to PDF a heck of a lot better. So much stuff makes sense now that made no sense before.\n. According to the CSS3 spec http://www.w3.org/TR/css3-values/, \u201c1px is equal to 1/96th of 1in\u201d and \u201c1pt is equal to 1/72th of 1in\u201d, which is how you get the conversion of 1px = 0.75pt.\n. @klebervirgilio It's also funny that the CSS spec basically says that pixels is a magical unit. It really only means anything for print output, in which case the 1/96th of an inch is required. On a screen, a pixel is \"a visible single line\", whatever that actually means :)\n. I ran into this same problem. When implementing a document generator, sometimes you get into a situation where you advance to the next page in anticipation of more content, but you then reach the end of file. Sometimes you don't have the proper context to check if more content is coming, so you end up with a blank page at the end of the document.\n\nI quickly hacked something together to remove a trailing blank page. It's rather ugly, but it works.\n\n``` ruby\n# if we're at the page top after adding all content, it's a blank page\nif at_page_top?\n# ...or check for the seed value, which is length 2\n#if page.dictionary.data[:Contents].stream.length == 2\n  pdf_store = state.store\n  pdf_objs = pdf_store.instance_variable_get :@objects\n  pdf_ids = pdf_store.instance_variable_get :@identifiers\n  page_id = pdf_store.object_id_for_page page_number\n  contents_id = page.dictionary.data[:Contents].identifier\n  pdf_objs.delete page_id\n  pdf_objs.delete contents_id\n  pdf_ids.delete page_id\n  pdf_ids.delete contents_id\n  pdf_store.pages.data[:Kids].pop\n  pdf_store.pages.data[:Count] -= 1\n  state.pages.pop\nend\n```\n\nI'd love to see a way to do this with a single method call.\n. I'd also like to see a method to check if a page is blank. Basically, did anything get added to it after it was created? As you can see from this code, it's hard to find that out currently.\n\n``` ruby\nputs 'blank' if page.dictionary.data[:Contents].stream.length == 2\n```\n. Btw, the seed value, `q\\n`, is added here:\n\nhttps://github.com/prawnpdf/pdf-core/blob/master/lib/pdf/core/page.rb#L166\n. There's a method on Page from PDF::Core called `imported_page?` to check if the page is was imported from another document. To be parallel, the method for checking for a blank page should be `blank_page?`. Also, it probably belongs in PDF::Core rather than Prawn.\n. > I have not needed it myself yet\n\nFrom my experience with Prawn, I'd wager that you're going to need it sooner rather than later. I keep needing it...hence why I created a (rather ugly) helper to get it done.\n. We have this same challenge in Asciidoctor PDF. What we do is create a scratch document (created by marshaling and unmarshaling the the Prawn::Document), then write into the scratch document to determine the rendered size of a block, then we go back to the main document and write it again knowing how it is going to get laid out.\n\nSee https://github.com/asciidoctor/asciidoctor-pdf/blob/master/lib/asciidoctor-pdf/prawn_ext/extensions.rb#L718-L736.\n. Unfortunately, pdftk isn't being packaged anymore for Fedora/RHEL. As an alternative, you can use python-pyPdf. http://pybrary.net/pyPdf/\n. This is great news! The Asciidoctor community is very interested in OTF support for the exact same reasons. I intend to follow progress on OTF support closely and help out however I can (as time permits).\n\n@Superpencil I'd recommend that you create another repository, something like otfunk or prawn-otf where you publish the early versions and I'll try to get users from the Asciidoctor community to try it out and give feedback. Once it's functional, I'm sure we can sort out what needs to change in Prawn to integrate it. Probably just an extra clause in the case statement in the Font class (e.g., `when 'otf'`).\n. >  is any backwards compatibility implications.\n\nIf that's a major concern, why not just add an option at the top-level to use legacy or compliant gradient logic?\n\nOne thing is for certain. We have to get past this or else gradients in SVGs embedded in PDFs (which is a major use case for a PDF generator) is never going to work correctly.\n. > For that to work we would have to let users opt into the new correct behavior, deprecate the old broken behavior, then when we release prawn 3 at some point in the future we can remove the old code and the logic for handling it's optional use and just use the correct new behavior.\n\nPrecisely how I envisioned it.\n\n>  there are a lot of people possibly using the bad behavior and not knowing it.\n\nDo you really think there are that many people using gradients directly? I've been using Prawn for almost 2 years and I never saw a need for it (the need comes in the form of the infrastructure necessary for libraries like prawn-svg to work).\n\nI tend to agree that it is too soon for Prawn 3, so the best path forward (if the agreement is that this is a critical breaking change) is to allow it to be opt-in. prawn-svg could even cause this switch to be enabled when activated (that's up to prawn-svg).\n. I like that proposal. (I'm not sure where the impression came from of\nadding a separate gem. I wouldn't want it to be solved that way either.)\n. Great job on the wiki page @packetmonkey and another big thumbs up to @mogest for implementing the new behavior. Great teamwork!\n. I believe that question is related to https://github.com/prawnpdf/prawn/issues/877\n. Thanks for providing that detailed information @abelsromero!\n\nAs far as I understand from past conversations, Prawn does not yet generate PDF/A documents. However, #877 (and a few other issues) link to prototypes of code that needs to be added to Prawn to achieve this. I'm in favor of Prawn being able to generate PDF/A documents for the reasons you have cited. This is not a requirement that is going to go away and it should be addressed by the core processor (not necessarily an add-on). I'm confused why the issue keeps getting closed because we should be working towards a solution.\n. Wow this is brilliant.\n. > I'm good with moving to just supporting jRuby 9000\n\n+1\n\n> we recommended using 1.7 in 2.0 mode\n\nThis works until it doesn't. There are numerous problems with 2.0 mode in 1.7, so it's advisable to use with caution and expect strange behavior at times.\n. :+1: \n. You can save the PDF to a stream using the following call:\n\nhttps://github.com/asciidoctor/asciidoctor-pdf/blob/master/lib/asciidoctor-pdf/converter.rb#L2043-L2045\n\nI had to add a small hack to STDOUT since Prawn tries to call the length method. That's what the extra require does.\n. That's true, though I still think we should fix the issue somehow that you can't pass in a STDOUT object because of the call to length. Should we file a separate issue for that?\n. Turns out this is an issue in PDF core (ultimately). I'll file an issue there.\n. Filed as https://github.com/prawnpdf/pdf-core/issues/20\n. I'm inclined to agree that waiting for Ruby 2.3 to fix a warning doesn't\nseem reasonable. I think we should at least be focused on fixing it for\nwhat's already in use (Ruby 2.2)\n. I didn't know about prawn-gmagick either. Thanks for the tip, @packetmonkey!\n. As previously stated, the problem is that certain call sequences can result in the color space not being set for a page. I want to mention that a quick workaround for the sample code above is to explicitly update the colors after a new page is started.\n\n``` ruby\npdf.start_new_page\npdf.send :update_colors\n```\n\nI mentioned that only to show that it confirms where the missing directives are.\n. I'm okay with these decisions, but I would like to ask that Prawn be more sensitive about dropping support for Ruby versions that are still in heavy use. I say that because it put us in a really bad spot when support for Ruby 1.9.3 was dropped _before_ JRuby 9000 was finished (and stable). This ended up being a huge support cost and a lot of extra work to try to get it running under JRuby 1.7 when JRuby 9000 wasn't a drop-in replacement. These users matter and we should be sensitive to their upgrade path. Just because MRI moves forward doesn't mean all the Ruby implementations do.\n. I want to emphasize that I'm looking towards the future, not dwelling on the past. I'm requesting more careful consideration for Ruby version upgrades from this point forward.\n\nYou are right, there wasn't a big outcry when the supported JRuby version was changed. As a result, we ended up in a tight spot in the AsciidoctorJ project where no combination of Ruby/Prawn versions worked. From that experience, we've learned that we need to speak up. And that's exactly what I'm doing here.\n\n> In Prawn 2.0 we dropped 1.9 mode and required JRuby 1.7 2.0 mode.\n\nWhat we subsequently learned is that 2.0 mode in JRuby 1.7 is severally incomplete. It's unfortunate, but the transition from JRuby 1.7 to JRuby 9.0.0.0 was a unique situation and is now behind us. We probably don't have to worry about that kind of colossal leap again now that JRuby is tracking MRI more closely. Still, we should consider when JRuby drops support for a version of Ruby, not just MRI.\n\n> If those users stayed with older Ruby for whatever reason they likely understood the trade-offs.\n\nThe problem is, there was no where for JRuby users to go. JRuby 9.0.0.0 wasn't ready (and is still stabilizing), while 2.0 in JRuby 1.7 wasn't complete. It's very unfair to say that they intentionally stayed on an older Ruby. They were stuck.\n\n> Main (this) Prawn repository has 607 closed, and 44 open issues (651 total). Only 11 of them mention JRuby. That's about 1.7%.\n> Groups has 1753 threads. Only 27 threads mention JRuby. That's about 1.5%.\n\nI think you are grossly underestimating the number of Prawn users you have using JRuby. Most of the big users of Asciidoctor are using Prawn via AsciidoctorJ PDF, and adoption is broadening. That includes all of Pivotal, many divisions of Red Hat, MuleSoft, many Eclipse projects (Groovy, Golo, Scout, etc) and more (see https://github.com/asciidoctor/asciidoctor.org/issues/270).\n\nHowever, you won't see any of those users mentioning JRuby in the Prawn channels. Instead, those issues come in through Asciidoctor (via AsciidoctorJ). My voice represents all those users. And I hope you consider them to be as valuable as any one using Prawn directly.\n. Regarding the numbers, I want to clarify that there is a difference between a) users that choose to use JRuby over other Ruby implementations and b) users that use JRuby indirectly because they are using Prawn via a Java application (or build tool). My point is that you aren't counting the latter group, which I think is a much bigger group than the former. (And, often, they aren't even aware they are using JRuby).\n. > The versions of Prawn that work on JRuby 1.7 will continue to work\n\nThe point is that they don't because Prawn forces Ruby 2 at installation time and that breaks JRuby environments using JRuby 1.7. It's just not compatible.\n\nYou've made your position clear, though. We simply have to say that the only way to use Prawn, and hence Asciidoctor PDF, via JRuby/Java is to be at the bleeding edge where things may not work as expected on all platforms. I can't stop the support requests from coming in (and believe me, they will keep rushing in), but I can at least say it's out of our control. C'est la vie.\n. Here's a test that will fail on Windows.\n\n``` ruby\nrequire 'prawn'\nrequire 'base64'\nrequire 'tempfile'\n\n# a 1x1 PNG of a black dot\nimage_data = 'iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAIAAACQd1PeAAAACXBIWXMAAAsTAAALEwEAmpwYAAAADElEQVQI12NgYGAAAAAEAAEnNCcKAAAAAElFTkSuQmCC'\n\nPrawn::Document.generate 'output.pdf' do\n  tmp_image = Tempfile.new ['image-', '.png']\n  tmp_image.binmode\n  tmp_image.write Base64.decode64 image_data\n  tmp_image_path = tmp_image.path\n  tmp_image.close\n\n  image tmp_image_path\n  # the following line will fail on Windows since the file descriptor is still open\n  ::File.unlink tmp_image_path\nend\n```\n\nIf you add `warn io.closed?` after the line https://github.com/prawnpdf/prawn/blob/2.1.0/lib/prawn/images.rb#L78, you will see that the IO object is still open. This is the last time this object is referenced before going out of scope (and will hence remain open).\n. You could also store the io in an instance variable, then check to see if it is still open at the end of the generate block. You will find that it is.\n. I realize that. This is just meant to be test code that cleans itself up. Ignore how the file is being generated. In the real application, we are working with cache files that are concrete. And when those files can't be removed, the application does not function correctly.\n. I still firmly believe that if the API opens an IO object that is not accessible externally, it needs to close that IO object.\n. > as a workaround you can create IO objects (File.open does that) and pass those to image to avoid locking your files. \n\nThat's exactly what I decided to do in the meantime. It's not as pretty, but it gets the job done for now.\n. I agree, it seems that `write_fill_color` and `write_stroke_color` are both obsolete. Instead, the lower-level method `write_color` is now used, and only by set_color.\n. It's more likely that your cached file is corrupt. I would start by clearing your gem cache.\n\n```\n$ gem install gem-empty\n  gem empty\n```\n\nThen try to install the gem. The gem empty command will clear away all the gems so that you can start from scratch.\n. Can you try manually removing the gem file it claims is corrupt.\n\n/Users/diguage/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/cache/prawn-2.1.0.gem\n\nBefore you do that, though, attach that file here so we can inspect it.\n\nI don't even understand why it's looking there when you are running bundler\nwith a local path. Everything should be in the .bundle directory, not\n~/.rbenv.\n\nThe other thing that looks suspicious is the non-official gem source\nhttps://gems.ruby-china.org. If it really is downloading the gem again,\nmaybe it's a bad file in that proxy.\n. Thanks! I've added an entry to the changelog.\n. I should add that the browser is able to force the glyphs to be a consistent width, as does the terminal.. I stand corrected. The browser also exhibits this behavior. It's just the terminal that seems to be able to correct it. Now I'm even more convinced that the metrics in the font are incorrect (which I can verify by using fontforge to study the font).. Added!. I forgot to run rubocop. I've addressed the violations.\r\n\r\nFor the record, I have no idea how Travis is running rubocop. When I run it locally, I get 13,000 violations. It would be nice to know what the right command is so I can actually test it locally.. Aha, I had the gem extracted under pkg, which was getting caught up in the glob. I think the glob needs to be more specific because it's including stuff it shouldn't.\r\n\r\nI took that away and I still get violations. Here's a partial output using Ruby 2.4.1.\r\n\r\n```\r\nlib/prawn/graphics/patterns.rb:1:1: C: Missing frozen string literal comment.\r\nrequire 'digest/sha1'\r\n^\r\nlib/prawn/image_handler.rb:1:1: C: Missing frozen string literal comment.\r\n# ImageHandler provides a way to register image processors with Prawn\r\n^\r\nlib/prawn/security/arcfour.rb:1:1: C: Missing frozen string literal comment.\r\n# Implementation of the \"ARCFOUR\" algorithm (\"alleged RC4 (tm)\"). Implemented\r\n^\r\nlib/prawn/encoding.rb:1:1: C: Missing frozen string literal comment.\r\n# Copyright September 2008, Gregory Brown, James Healy  All Rights Reserved.\r\n^\r\nlib/prawn/font_metric_cache.rb:1:1: C: Missing frozen string literal comment.\r\n# font_metric_cache.rb : The Prawn font class\r\n```. Strange. I cloned the project again in a fresh space and then the rubocop passed. I have no idea why I'm getting different results.. I've tried everything I can think of. I don't know why this old checkout is giving me errors. There are no additional files reported by git. Whatever, I'll just clone it again.. If I run the tests from /tmp/prawn, I get no violations. If I move the prawn directory into my home directory, then I get violations. So it's clearly looking at parent directories, so it's not really a portable set up.. The problem seems to be that my folder structure is \"projects/prawn/prawn\". If I rename it to \"projects/prawn/prawn-core\" then I get no violations. I don't know what the heck is going on there.. But on a different computer, I don't get that problem. It seems like information has been cached somewhere. I just don't know where that is. I'll keep poking at it to see if I can figure out what is causing the delta.. > Do you have a merge bit on this repo?\r\n\r\nIt appears so, but merging is blocked unless there is one approved review.. > You should never use a packaged gem for development. \r\n\r\nI 100% agree with you. What I meant to say was that I had some junk inside the project left behind when I was looking for something. I should have just said, \"I left behind a temporary directory\".\r\n\r\nBut that's a separate issue from why I get violations when the folder structure is \"projects/prawn/prawn\". But I'm willing to say that it's a dirty cache somewhere.. :+1: . Regarding rubocop, each computer I try I get different results. If I run `bundle exec rake` I get different results than `bundle exec rubocop`.. I added an entry to the changelog. Could you approve again?. @pointlessone Did you want me to merge?. Done!. I'm still seeing this problem with 0.13.1 and HEAD if there is an image on the template page.\n. What's the reason support is being dropped? I mean, except for the compress issue, it works. I find it useful for being able to merge PDF documents to weave dynamic pages into a static boilerplate document.\n\nBtw, you can reproduce by adding 'complex_template.rb' to the manual/templates directory with the following code:\n\n``` ruby\nrequire File.expand_path(File.join(File.dirname(__FILE__),\n                                   %w[.. example_helper]))\n\nfilename = \"#{Prawn::DATADIR}/pdfs/complex_template.pdf\"\n\nPrawn::Example.generate(\"complex_template.pdf\", :template => filename, :compress => true) do\n  go_to_page(page_count)\n\n  start_new_page\n\n  text \"Previous pages and content imported.\", :align => :center\n  text \"This page and content is brand new.\",  :align => :center\nend\n```\n. Another way to ask the question, is there an alternative way to use Prawn to weave new pages into an existing PDF? I'm not that interested in modifying the pages I import (otherwise, I would just create them from scratch).\n. Thanks for the reply @sandal. What I ended up doing was using GhostScript 9.10 to optimize the PDF after Prawn generates it. The quality of the optimized PDF is quite acceptable and seems to be the right solution for my needs. Here's the optimize script I wrote:\n\nhttps://github.com/opendevise/asciidoctor-pdf/blob/master/bin/optimize-pdf\n. Although I like pdftk a lot, the reason I can't use it in my case is because I need the imported pages to occupy space when I'm creating the document. Granted, I could leave blank pages and then swap in the real pages in a postprocessing step, but it's much more convenient to do that in the main script. But that might be besides the point.\n. I added a link to a prototype for this in Asciidoctor PDF. Like @sandal's example, the one in the example below is far from complete, but provides some idea of what needs to be done. This is, no doubt, a tricky one to implement. However, once we have a proper component for it, it should just fall into place.\n\nhttps://github.com/asciidoctor/asciidoctor-pdf/issues/9#issuecomment-61224810\n. You should be able to use fontforge to convert the font to TTF. It's a really horrible looking interface, but it gets the job done quite well. I've also written a script that subsets fonts and kicks out TTF. https://github.com/asciidoctor/asciidoctor-epub3/blob/master/scripts/generate-font-subsets.pe (you don't have to subset, I'm just doing that to minimize the font file).\n. @sandal Thanks for reminding me of that. That's definitely a nice feature the have in Prawn (and PDFs in general).\n\nI think the reason I am subsetting is to minimize the size of the distribution of the gem I'm putting it in (Asciidoctor PDF and EPUB3). I'll make sure I note in the Asciidoctor PDF docs that Prawn will subset whatever font is provided.\n. @chloerei We should probably discuss that script on discuss.asciidoctor.org or in the asciidoctor-epub3 repository (where it lives). We don't want to clutter up the Prawn issue tracker with this discussion.\n\nYes, by default it drops the CJK. You need to add \"multilingual\" to the copy_scripts array. In other words, just hack the script. For follow-up, let's discuss in one of the places I mentioned (if it's easiest for you, the asciidoctor-epub3 repo). We might even want to move that script to it's own repo eventually if people find it generally useful.\n. @sandal FontForge is worth knowing. It's amazingly complete when it comes to handling, analyzing, converting and subsetting fonts. It's just a UX nightmare ;)\n. We really need to revisit native OTF support for Prawn, even if ask for community help. It's use is growing, particular for CJK support. Forcing people to convert to TTF or find a TTF version of the font is tedious and lossy. I don't know how you want to handle big roadmap items, but I think it's important to at least communicate that help is needed in this area...esp if we want to get help from font specialists.\n. I have absolutely no time, nor the required experience, to tackle this issue. I am already maxing out my days working on open source documentation tools. I'm merely pointing out that it's going to quickly become a sore spot in Prawn if we, as a community, don't start advocating for / championing interest in solving it. In my opinion, an _open_ issue is what helps communicate that point, not a closed one.\n. Related issue, which includes an open offer to help implement this feature, for reference: #893.\n. This issue was closed, but no reason was given. What's the verdict? Does prawn support TrueType Collection files (ttc) or not? If so, are there instructions for how to load them?\n. Ah. So perhaps this should be refiled in ttfunk or a parallel issue opened there at least?\n. Btw, I successfully split a TTC into multiple TTF files using the following library, which might serve as a useful reference for someone looking to make a patch:\n\nhttp://sourceforge.net/projects/ttf2ttc\n. Even if a patch isn't added, perhaps instructions for how to extract TTF files from a TTC would be useful for Prawn users like myself.\n. I can also add that many users of Asciidoctor PDF are requesting a feature that depends on it. See https://github.com/asciidoctor/asciidoctor-pdf/issues/56. I've hacked in some support for linking to sections, but references are not generally available atm.\n. Great! Thanks!\n\nAs I work on the feature, I'll let you know if any instincts about an API\nemerge.\n. > (There are probably better OTF to TTF converters out there!)\n\nI highly recommend fontforge. Don't let the ugly UI deter you. Underneath that tacky veneer is a very powerful tool that just does the right thing out of the box in most cases. It also has a decent guide.\n\nhttp://fontforge.org/editexample.html\n\nand a nice book\n\nhttp://designwithfontforge.com/en-US/index.html\n\nUnderstanding how fonts are structured is worth the time if you are going to be working with them more than just pulling one off the shelf. I'm very far from an expert, but at least I'm feeling comfortable working with them. I'm hoping that knowledge is going to play into ttfunk's future.\n. Just FYI, I've found at least one way to control the zoom level is to set the FitToWindow flag on ViewPreferences in the catalog.\n\n``` ruby\ncatalog.data[:ViewerPreferences] = [:FitWindow]\n```\n. We also use this method in Asciidoctor PDF to paint the background color of the page.\n\nhttps://github.com/asciidoctor/asciidoctor-pdf/blob/master/lib/asciidoctor-pdf/converter.rb#L96\n\nIs there another way to accomplish this?\n. @sandal Thanks for the clarification / input. I'll give it some thought when I upgrade Asciidoctor PDF to the latest Prawn.\n. @practicingruby is absolutely right. This is not Prawn's conflict to resolve. Asciidoctor PDF needs to be refactored as a Prawn View (see https://github.com/asciidoctor/asciidoctor-pdf/issues/53). When that is done, we can rename the reference to the Asciidoctor document object as needed. Further comment should be directed to the linked issue.\n. I'll add that we're very interested in this feature for users of Asciidoctor PDF (based on Prawn) and would be willing to help implement and/or test. I'll be following the issue.\n. I need this method too. Perhaps we can compromise and call it it csspx2pt. While there is no univeral points to pixels conversion, then there's the real world where this works most of the time. So this is useful.\n. Cool. We'll definitely be using this in Asciidoctor PDF, whether it makes it into Prawn or not.\n. > How Can I help?\n\nAre you asking about Prawn or Asciidoctor PDF?\n. > I guess the best path would be to look at the issues?\n\nIndeed. Many of them relate to Prawn and how we use it. I'm fixing a lot of the little stuff right now.\n\nThe big (but fun and challenging) issue is how we are organizing the code. I didn't know Prawn very well when I started it, so we ended up with a monolithic subclass of Document. We really need to upgrade Prawn and migrate to a Prawn View. The first step is a simple demonstration of how that might look. I have no problem porting the code if we have a clear idea of where we are going. See https://github.com/asciidoctor/asciidoctor-pdf/issues/53\n\nThe other major issue is inline and floated images. I have an idea about how to do it, but I wish it were something that Prawn could handle natively. See https://github.com/asciidoctor/asciidoctor-pdf/issues/9\n\nPrawn is critical to the future of Asciidoctor PDF because, honestly, there is really no other library or tool that produces half-way decent PDFs...nothing that comes close to Prawn. The only other real contender (for our stack) is iText. But we need changes to the Asciidoctor and AsciidoctorJ APIs before we can start that experiment...so we continue to push forward with Prawn.\n. And to clarify, aside from being a converter from AsciiDoc to PDF, the goal of Asciidoctor PDF is to provide the fastest way to create a professional-looking PDF document from scratch. This is particularly value for writers, but I use it for all my business documents (contracts, agreements) as well.\n\n```\necho -e \"= Document Title\nAuthor Name\n\nCreating a PDF doesn't get much easier than this.\" | asciidoctor-pdf -o sample.pdf -\n```\n. > One solution may be to use ruby's open classes to define the method yourself and use it such as\n\nThat's the approach I was planning to take. If you are using Ruby 2+, you also have prepend as a way to do it.\n\n> my next project is now going to use furlongs just so I can say it in meetings\n\nSolid. Bring back the furlong!\n\n> I'll reopen the PR while we come up with a solution that works for everyone.\n\nI think we should either add the methods `css_px2pt` and `pt2ccs_px` or do nothing. I don't really see an API extension point here as these are just utility classes.\n\nWhat is useful is to know about this relationship. It took me over a year to discover it. Having something in the manual would have been a huge help to me in the beginning...even if you say in the manual that it isn't a universal thing, but likely will map in a predictable way in most cases...that would have helped me think about the transition from web to PDF a heck of a lot better. So much stuff makes sense now that made no sense before.\n. According to the CSS3 spec http://www.w3.org/TR/css3-values/, \u201c1px is equal to 1/96th of 1in\u201d and \u201c1pt is equal to 1/72th of 1in\u201d, which is how you get the conversion of 1px = 0.75pt.\n. @klebervirgilio It's also funny that the CSS spec basically says that pixels is a magical unit. It really only means anything for print output, in which case the 1/96th of an inch is required. On a screen, a pixel is \"a visible single line\", whatever that actually means :)\n. I ran into this same problem. When implementing a document generator, sometimes you get into a situation where you advance to the next page in anticipation of more content, but you then reach the end of file. Sometimes you don't have the proper context to check if more content is coming, so you end up with a blank page at the end of the document.\n\nI quickly hacked something together to remove a trailing blank page. It's rather ugly, but it works.\n\n``` ruby\n# if we're at the page top after adding all content, it's a blank page\nif at_page_top?\n# ...or check for the seed value, which is length 2\n#if page.dictionary.data[:Contents].stream.length == 2\n  pdf_store = state.store\n  pdf_objs = pdf_store.instance_variable_get :@objects\n  pdf_ids = pdf_store.instance_variable_get :@identifiers\n  page_id = pdf_store.object_id_for_page page_number\n  contents_id = page.dictionary.data[:Contents].identifier\n  pdf_objs.delete page_id\n  pdf_objs.delete contents_id\n  pdf_ids.delete page_id\n  pdf_ids.delete contents_id\n  pdf_store.pages.data[:Kids].pop\n  pdf_store.pages.data[:Count] -= 1\n  state.pages.pop\nend\n```\n\nI'd love to see a way to do this with a single method call.\n. I'd also like to see a method to check if a page is blank. Basically, did anything get added to it after it was created? As you can see from this code, it's hard to find that out currently.\n\n``` ruby\nputs 'blank' if page.dictionary.data[:Contents].stream.length == 2\n```\n. Btw, the seed value, `q\\n`, is added here:\n\nhttps://github.com/prawnpdf/pdf-core/blob/master/lib/pdf/core/page.rb#L166\n. There's a method on Page from PDF::Core called `imported_page?` to check if the page is was imported from another document. To be parallel, the method for checking for a blank page should be `blank_page?`. Also, it probably belongs in PDF::Core rather than Prawn.\n. > I have not needed it myself yet\n\nFrom my experience with Prawn, I'd wager that you're going to need it sooner rather than later. I keep needing it...hence why I created a (rather ugly) helper to get it done.\n. We have this same challenge in Asciidoctor PDF. What we do is create a scratch document (created by marshaling and unmarshaling the the Prawn::Document), then write into the scratch document to determine the rendered size of a block, then we go back to the main document and write it again knowing how it is going to get laid out.\n\nSee https://github.com/asciidoctor/asciidoctor-pdf/blob/master/lib/asciidoctor-pdf/prawn_ext/extensions.rb#L718-L736.\n. Unfortunately, pdftk isn't being packaged anymore for Fedora/RHEL. As an alternative, you can use python-pyPdf. http://pybrary.net/pyPdf/\n. This is great news! The Asciidoctor community is very interested in OTF support for the exact same reasons. I intend to follow progress on OTF support closely and help out however I can (as time permits).\n\n@Superpencil I'd recommend that you create another repository, something like otfunk or prawn-otf where you publish the early versions and I'll try to get users from the Asciidoctor community to try it out and give feedback. Once it's functional, I'm sure we can sort out what needs to change in Prawn to integrate it. Probably just an extra clause in the case statement in the Font class (e.g., `when 'otf'`).\n. >  is any backwards compatibility implications.\n\nIf that's a major concern, why not just add an option at the top-level to use legacy or compliant gradient logic?\n\nOne thing is for certain. We have to get past this or else gradients in SVGs embedded in PDFs (which is a major use case for a PDF generator) is never going to work correctly.\n. > For that to work we would have to let users opt into the new correct behavior, deprecate the old broken behavior, then when we release prawn 3 at some point in the future we can remove the old code and the logic for handling it's optional use and just use the correct new behavior.\n\nPrecisely how I envisioned it.\n\n>  there are a lot of people possibly using the bad behavior and not knowing it.\n\nDo you really think there are that many people using gradients directly? I've been using Prawn for almost 2 years and I never saw a need for it (the need comes in the form of the infrastructure necessary for libraries like prawn-svg to work).\n\nI tend to agree that it is too soon for Prawn 3, so the best path forward (if the agreement is that this is a critical breaking change) is to allow it to be opt-in. prawn-svg could even cause this switch to be enabled when activated (that's up to prawn-svg).\n. I like that proposal. (I'm not sure where the impression came from of\nadding a separate gem. I wouldn't want it to be solved that way either.)\n. Great job on the wiki page @packetmonkey and another big thumbs up to @mogest for implementing the new behavior. Great teamwork!\n. I believe that question is related to https://github.com/prawnpdf/prawn/issues/877\n. Thanks for providing that detailed information @abelsromero!\n\nAs far as I understand from past conversations, Prawn does not yet generate PDF/A documents. However, #877 (and a few other issues) link to prototypes of code that needs to be added to Prawn to achieve this. I'm in favor of Prawn being able to generate PDF/A documents for the reasons you have cited. This is not a requirement that is going to go away and it should be addressed by the core processor (not necessarily an add-on). I'm confused why the issue keeps getting closed because we should be working towards a solution.\n. Wow this is brilliant.\n. > I'm good with moving to just supporting jRuby 9000\n\n+1\n\n> we recommended using 1.7 in 2.0 mode\n\nThis works until it doesn't. There are numerous problems with 2.0 mode in 1.7, so it's advisable to use with caution and expect strange behavior at times.\n. :+1: \n. You can save the PDF to a stream using the following call:\n\nhttps://github.com/asciidoctor/asciidoctor-pdf/blob/master/lib/asciidoctor-pdf/converter.rb#L2043-L2045\n\nI had to add a small hack to STDOUT since Prawn tries to call the length method. That's what the extra require does.\n. That's true, though I still think we should fix the issue somehow that you can't pass in a STDOUT object because of the call to length. Should we file a separate issue for that?\n. Turns out this is an issue in PDF core (ultimately). I'll file an issue there.\n. Filed as https://github.com/prawnpdf/pdf-core/issues/20\n. I'm inclined to agree that waiting for Ruby 2.3 to fix a warning doesn't\nseem reasonable. I think we should at least be focused on fixing it for\nwhat's already in use (Ruby 2.2)\n. I didn't know about prawn-gmagick either. Thanks for the tip, @packetmonkey!\n. As previously stated, the problem is that certain call sequences can result in the color space not being set for a page. I want to mention that a quick workaround for the sample code above is to explicitly update the colors after a new page is started.\n\n``` ruby\npdf.start_new_page\npdf.send :update_colors\n```\n\nI mentioned that only to show that it confirms where the missing directives are.\n. I'm okay with these decisions, but I would like to ask that Prawn be more sensitive about dropping support for Ruby versions that are still in heavy use. I say that because it put us in a really bad spot when support for Ruby 1.9.3 was dropped _before_ JRuby 9000 was finished (and stable). This ended up being a huge support cost and a lot of extra work to try to get it running under JRuby 1.7 when JRuby 9000 wasn't a drop-in replacement. These users matter and we should be sensitive to their upgrade path. Just because MRI moves forward doesn't mean all the Ruby implementations do.\n. I want to emphasize that I'm looking towards the future, not dwelling on the past. I'm requesting more careful consideration for Ruby version upgrades from this point forward.\n\nYou are right, there wasn't a big outcry when the supported JRuby version was changed. As a result, we ended up in a tight spot in the AsciidoctorJ project where no combination of Ruby/Prawn versions worked. From that experience, we've learned that we need to speak up. And that's exactly what I'm doing here.\n\n> In Prawn 2.0 we dropped 1.9 mode and required JRuby 1.7 2.0 mode.\n\nWhat we subsequently learned is that 2.0 mode in JRuby 1.7 is severally incomplete. It's unfortunate, but the transition from JRuby 1.7 to JRuby 9.0.0.0 was a unique situation and is now behind us. We probably don't have to worry about that kind of colossal leap again now that JRuby is tracking MRI more closely. Still, we should consider when JRuby drops support for a version of Ruby, not just MRI.\n\n> If those users stayed with older Ruby for whatever reason they likely understood the trade-offs.\n\nThe problem is, there was no where for JRuby users to go. JRuby 9.0.0.0 wasn't ready (and is still stabilizing), while 2.0 in JRuby 1.7 wasn't complete. It's very unfair to say that they intentionally stayed on an older Ruby. They were stuck.\n\n> Main (this) Prawn repository has 607 closed, and 44 open issues (651 total). Only 11 of them mention JRuby. That's about 1.7%.\n> Groups has 1753 threads. Only 27 threads mention JRuby. That's about 1.5%.\n\nI think you are grossly underestimating the number of Prawn users you have using JRuby. Most of the big users of Asciidoctor are using Prawn via AsciidoctorJ PDF, and adoption is broadening. That includes all of Pivotal, many divisions of Red Hat, MuleSoft, many Eclipse projects (Groovy, Golo, Scout, etc) and more (see https://github.com/asciidoctor/asciidoctor.org/issues/270).\n\nHowever, you won't see any of those users mentioning JRuby in the Prawn channels. Instead, those issues come in through Asciidoctor (via AsciidoctorJ). My voice represents all those users. And I hope you consider them to be as valuable as any one using Prawn directly.\n. Regarding the numbers, I want to clarify that there is a difference between a) users that choose to use JRuby over other Ruby implementations and b) users that use JRuby indirectly because they are using Prawn via a Java application (or build tool). My point is that you aren't counting the latter group, which I think is a much bigger group than the former. (And, often, they aren't even aware they are using JRuby).\n. > The versions of Prawn that work on JRuby 1.7 will continue to work\n\nThe point is that they don't because Prawn forces Ruby 2 at installation time and that breaks JRuby environments using JRuby 1.7. It's just not compatible.\n\nYou've made your position clear, though. We simply have to say that the only way to use Prawn, and hence Asciidoctor PDF, via JRuby/Java is to be at the bleeding edge where things may not work as expected on all platforms. I can't stop the support requests from coming in (and believe me, they will keep rushing in), but I can at least say it's out of our control. C'est la vie.\n. Here's a test that will fail on Windows.\n\n``` ruby\nrequire 'prawn'\nrequire 'base64'\nrequire 'tempfile'\n\n# a 1x1 PNG of a black dot\nimage_data = 'iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAIAAACQd1PeAAAACXBIWXMAAAsTAAALEwEAmpwYAAAADElEQVQI12NgYGAAAAAEAAEnNCcKAAAAAElFTkSuQmCC'\n\nPrawn::Document.generate 'output.pdf' do\n  tmp_image = Tempfile.new ['image-', '.png']\n  tmp_image.binmode\n  tmp_image.write Base64.decode64 image_data\n  tmp_image_path = tmp_image.path\n  tmp_image.close\n\n  image tmp_image_path\n  # the following line will fail on Windows since the file descriptor is still open\n  ::File.unlink tmp_image_path\nend\n```\n\nIf you add `warn io.closed?` after the line https://github.com/prawnpdf/prawn/blob/2.1.0/lib/prawn/images.rb#L78, you will see that the IO object is still open. This is the last time this object is referenced before going out of scope (and will hence remain open).\n. You could also store the io in an instance variable, then check to see if it is still open at the end of the generate block. You will find that it is.\n. I realize that. This is just meant to be test code that cleans itself up. Ignore how the file is being generated. In the real application, we are working with cache files that are concrete. And when those files can't be removed, the application does not function correctly.\n. I still firmly believe that if the API opens an IO object that is not accessible externally, it needs to close that IO object.\n. > as a workaround you can create IO objects (File.open does that) and pass those to image to avoid locking your files. \n\nThat's exactly what I decided to do in the meantime. It's not as pretty, but it gets the job done for now.\n. I agree, it seems that `write_fill_color` and `write_stroke_color` are both obsolete. Instead, the lower-level method `write_color` is now used, and only by set_color.\n. It's more likely that your cached file is corrupt. I would start by clearing your gem cache.\n\n```\n$ gem install gem-empty\n  gem empty\n```\n\nThen try to install the gem. The gem empty command will clear away all the gems so that you can start from scratch.\n. Can you try manually removing the gem file it claims is corrupt.\n\n/Users/diguage/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/cache/prawn-2.1.0.gem\n\nBefore you do that, though, attach that file here so we can inspect it.\n\nI don't even understand why it's looking there when you are running bundler\nwith a local path. Everything should be in the .bundle directory, not\n~/.rbenv.\n\nThe other thing that looks suspicious is the non-official gem source\nhttps://gems.ruby-china.org. If it really is downloading the gem again,\nmaybe it's a bad file in that proxy.\n. Thanks! I've added an entry to the changelog.\n. I should add that the browser is able to force the glyphs to be a consistent width, as does the terminal.. I stand corrected. The browser also exhibits this behavior. It's just the terminal that seems to be able to correct it. Now I'm even more convinced that the metrics in the font are incorrect (which I can verify by using fontforge to study the font).. Added!. I forgot to run rubocop. I've addressed the violations.\r\n\r\nFor the record, I have no idea how Travis is running rubocop. When I run it locally, I get 13,000 violations. It would be nice to know what the right command is so I can actually test it locally.. Aha, I had the gem extracted under pkg, which was getting caught up in the glob. I think the glob needs to be more specific because it's including stuff it shouldn't.\r\n\r\nI took that away and I still get violations. Here's a partial output using Ruby 2.4.1.\r\n\r\n```\r\nlib/prawn/graphics/patterns.rb:1:1: C: Missing frozen string literal comment.\r\nrequire 'digest/sha1'\r\n^\r\nlib/prawn/image_handler.rb:1:1: C: Missing frozen string literal comment.\r\n# ImageHandler provides a way to register image processors with Prawn\r\n^\r\nlib/prawn/security/arcfour.rb:1:1: C: Missing frozen string literal comment.\r\n# Implementation of the \"ARCFOUR\" algorithm (\"alleged RC4 (tm)\"). Implemented\r\n^\r\nlib/prawn/encoding.rb:1:1: C: Missing frozen string literal comment.\r\n# Copyright September 2008, Gregory Brown, James Healy  All Rights Reserved.\r\n^\r\nlib/prawn/font_metric_cache.rb:1:1: C: Missing frozen string literal comment.\r\n# font_metric_cache.rb : The Prawn font class\r\n```. Strange. I cloned the project again in a fresh space and then the rubocop passed. I have no idea why I'm getting different results.. I've tried everything I can think of. I don't know why this old checkout is giving me errors. There are no additional files reported by git. Whatever, I'll just clone it again.. If I run the tests from /tmp/prawn, I get no violations. If I move the prawn directory into my home directory, then I get violations. So it's clearly looking at parent directories, so it's not really a portable set up.. The problem seems to be that my folder structure is \"projects/prawn/prawn\". If I rename it to \"projects/prawn/prawn-core\" then I get no violations. I don't know what the heck is going on there.. But on a different computer, I don't get that problem. It seems like information has been cached somewhere. I just don't know where that is. I'll keep poking at it to see if I can figure out what is causing the delta.. > Do you have a merge bit on this repo?\r\n\r\nIt appears so, but merging is blocked unless there is one approved review.. > You should never use a packaged gem for development. \r\n\r\nI 100% agree with you. What I meant to say was that I had some junk inside the project left behind when I was looking for something. I should have just said, \"I left behind a temporary directory\".\r\n\r\nBut that's a separate issue from why I get violations when the folder structure is \"projects/prawn/prawn\". But I'm willing to say that it's a dirty cache somewhere.. :+1: . Regarding rubocop, each computer I try I get different results. If I run `bundle exec rake` I get different results than `bundle exec rubocop`.. I added an entry to the changelog. Could you approve again?. @pointlessone Did you want me to merge?. Done!. ",
    "pepe": "Oh, on second look at it I found vim removed all trailing spaces, which made commit quite big. Should I create new one just with intended changes?\n\nI am sorry for this.\n\npepe\n. I don't think so, cause it's for a table which begins in the center of first page and goes through many pages then (it's the invoice with many items. Actually I think that, there is bug, cause the table like this doesn't respect even page bounds. I will look in the issue at wed and tell you what I found.\n\nThank you for your response!\n. Works like charm! Thank you for your help!\n. Oh, on second look at it I found vim removed all trailing spaces, which made commit quite big. Should I create new one just with intended changes?\n\nI am sorry for this.\n\npepe\n. I don't think so, cause it's for a table which begins in the center of first page and goes through many pages then (it's the invoice with many items. Actually I think that, there is bug, cause the table like this doesn't respect even page bounds. I will look in the issue at wed and tell you what I found.\n\nThank you for your response!\n. Works like charm! Thank you for your help!\n. ",
    "rossdakin": "Thanks Brad!\n. Thanks @sandal!\n. Thanks for the trip down memory lane :smile:\n. Thanks Brad!\n. Thanks @sandal!\n. Thanks for the trip down memory lane :smile:\n. ",
    "vfrride": "I checked the encoding of my string before I submitted the bug.\n\nI replaced fragment.rb line 225 with:\n\n  string[0..-2].gsub(normalized_soft_hyphen.encode(\"UTF-8\"), \"\") + string[-1..-1]\n\nWhich allows me to get by the problem, but does not seem correct.\n. As a follow up the jdbc driver we were using is ancient, updating to the driver seems to have resolved the problem.\n. I checked the encoding of my string before I submitted the bug.\n\nI replaced fragment.rb line 225 with:\n\n  string[0..-2].gsub(normalized_soft_hyphen.encode(\"UTF-8\"), \"\") + string[-1..-1]\n\nWhich allows me to get by the problem, but does not seem correct.\n. As a follow up the jdbc driver we were using is ancient, updating to the driver seems to have resolved the problem.\n. ",
    "crossman": "Thanks boojapathy, this has definitely fixed rollbacks for me. I hope this gets merged in soon.\n. Thanks boojapathy, this has definitely fixed rollbacks for me. I hope this gets merged in soon.\n. ",
    "andyjeffries": "+1 - please merge this!\n. I've been bitten by this too!\n. +1 - please merge this!\n. I've been bitten by this too!\n. ",
    "westonganger": "I am experiencing the issue. @yob can you explain to me when I should use pdf.stroke_line instead of pdf.line. What is the difference between the two?\n. I've only been using `line` and its been rendering fine unless its the odd case.\n. Great I'm glad I got that explained.  Thanks\n. I am experiencing the issue. @yob can you explain to me when I should use pdf.stroke_line instead of pdf.line. What is the difference between the two?\n. I've only been using `line` and its been rendering fine unless its the odd case.\n. Great I'm glad I got that explained.  Thanks\n. ",
    "goldfishgrenade": "I am still seeing this problem, except with anchors. The links are clickable, but seem to be broken.\n. Sure:\n\n```\nPrawn::Document.generate(\"corrupted_dests.pdf\") do\n  text 'Page 1'\n  add_dest 'page1', dest_fit\n  start_new_page\n  formatted_text_box([{ :text => \"Back to Page 1\",\n                       :anchor =>  'page1'}])\n  encrypt_document\nend\n```\n\nCould this be a result from my environment?\nRuby 1.9.3p448\nPrawn 0.15.0\n. I am still seeing this problem, except with anchors. The links are clickable, but seem to be broken.\n. Sure:\n\n```\nPrawn::Document.generate(\"corrupted_dests.pdf\") do\n  text 'Page 1'\n  add_dest 'page1', dest_fit\n  start_new_page\n  formatted_text_box([{ :text => \"Back to Page 1\",\n                       :anchor =>  'page1'}])\n  encrypt_document\nend\n```\n\nCould this be a result from my environment?\nRuby 1.9.3p448\nPrawn 0.15.0\n. ",
    "HuckyDucky": "I'm using ree-1.8.7-2011.03 (via rvm), bundler and gem versions same as yours. Must be an issue with ree.\n\nWhen I just install regular old prawn, (without specifying the git path), am I getting the latest bug fixes, or just the 1.0.0.rc1 build?\n\n## \n\nAdrian Klingel\nChief Technology Officer\nAdrian.Klingel@illumaware.com\n\nIllumaware, LLC \nPO Box 2006\nWake Forest, NC 27588\n919-570-1513 (phone)\n919.882.9447 (fax)\n\nThis transmission is for the sole use of the intended recipient(s) and may contain information that is confidential and/or privileged. If you are not the intended recipient, please delete this transmission and any attachments and notify the sender by return email immediately. Any unauthorized review, use, disclosure or distribution is prohibited.\n\nOn Jan 29, 2012, at 8:45 PM, Brad Ediger wrote:\n\n> would\n. I'm using ree-1.8.7-2011.03 (via rvm), bundler and gem versions same as yours. Must be an issue with ree.\n\nWhen I just install regular old prawn, (without specifying the git path), am I getting the latest bug fixes, or just the 1.0.0.rc1 build?\n\n## \n\nAdrian Klingel\nChief Technology Officer\nAdrian.Klingel@illumaware.com\n\nIllumaware, LLC \nPO Box 2006\nWake Forest, NC 27588\n919-570-1513 (phone)\n919.882.9447 (fax)\n\nThis transmission is for the sole use of the intended recipient(s) and may contain information that is confidential and/or privileged. If you are not the intended recipient, please delete this transmission and any attachments and notify the sender by return email immediately. Any unauthorized review, use, disclosure or distribution is prohibited.\n\nOn Jan 29, 2012, at 8:45 PM, Brad Ediger wrote:\n\n> would\n. ",
    "kazik": "Great! Thank you Brad.\n. Great! Thank you Brad.\n. ",
    "alexdowad": "We encountered the exact same issue and were baffled by why simply adding a PNG to a PDF could use hundreds of megabytes of memory. Using `ObjectSpace.each_object` revealed that Prawn was allocating more than 500,000 Arrays and 80,000 Strings for that operation. This should be mentioned in the documentation for `Prawn::Document#image`!!!\n. @bradediger, thanks for pointing that out. I did see that in the docs, but didn't connect it to the fact that our application was running out of memory. The docs seem to indicate that processing PNGs is CPU-intensive, not memory-intensive. Actually, I thought using `prawn-fast-png` might make the problem worse, because RMagick can be a memory hog itself.\n. Thanks! PRAWN IS AWESOME!\n. I'm using the gem.\n. This is from version 0.12.0 of the gem...\n\n```\n>> doc.width_of(\"text\", :style => :bold)\n=> 19.344\n>> doc.width_of(\"<b>text</b>\", :inline_format => true)\n=> 64.056\n```\n\nShould I upgrade to edge Prawn?\n. The app is deployed on Engine Yard, which uses Bundler for dependency management. How can I specify version 1.0 RC in the Gemfile?\n. I don't have time to test this right now but thanks for your help!!! Looking forward to Prawn 1.0!!!\n. I'm not done yet, not until table layout is so fast it takes your breath away!\n. BTW, I hope my optimizations don't break anything in Prawn! I'll have to check what you have for a test suite and make sure all the tests pass before submitting my next pull request.\n. BTW, I can't seem to run the RSpec tests on my dev machine. It seems like some problem with the Ruby \"require\" path, which is messing up RSpec...\n. Oh, one more thing: with this commit, the time used for table generation appears to be linear... it still had a slight exponential curve before.\n. Awesome, thank you for pointing that out. It looks like all the specs still pass with this commit. BTW, if you have any suggestions on coding style, commenting, etc. I will observe them for future PRs.\n. OK, I'll try to apply the point on parallel assignment.\n. Just added another \"nickel and dime\" optimization which gives ~2% speed boost to table benchmark.\n. I discovered that although the optimizations I have done so far have made a big difference, PDF generation in my app is still shockingly slow, much slower than I expected from the benchmark results. I investigated and found that the app is using the following optional arguments to Prawn::Document#table:\n\n```\n:header => true, :row_colors => ['FFFFFF', 'F0F0FF'], :cell_style => {:inline_format => true, :padding => 3, :size => 9}\n```\n\n:inline_format especially kills performance. I added some tests to the table benchmark to measure performance with these optional arguments, profiled, and found some optimizations which bring the performance with :inline_format close to that without.\n\nIf you can give any suggestions to improve code style, please do so.\n. Thanks for reviewing my code. As far as the issue of `class_eval(\"...\")` vs. `class_eval { ... }`, please note that by its nature, this code inherently treats the names of methods as strings -- it even uses regular expressions to extract a portion of the method name and treats that as the name of another method to call. To achieve the same effect with `class_eval { ... }` would by necessity require using `send`, which would add overhead. With `class_eval(\"...\")`, we can use regular method dispatch, and make the code every bit as fast as if each \"shortcut method\" was individually hard-coded.\n\nI will amend the code to make it respect passed blocks. If we want to \"whitelist\", it would be best to define all the needed \"shortcut methods\" eagerly, probably something like:\n\n```\n# Define shortcut methods for common combinations of graphics primitives\n# Should probably use RDoc directive comments so that all the generated methods are included in RDoc\n%w{foo bar}.product(%w{fill stroke stroke_and_fill}).each do |method1, method2|\n  class_eval \"def #{method1}_and_#{method2}; ...; end\"\nend\n```\n\nThis does not provide any performance advantage over `method_missing` but is more straightforward. If you like this idea, please let me know.\n. BTW, `styled_width_of_M` is partly in jest. It does make a significant improvement to performance when using `:inline_format`, but I'm sure there is a better name. `styled_width_of_single_character` would be clearer, but is very long. On the other hand, I have seen a couple deliberately silly, quirky things in the Prawn source, so maybe `styled_width_of_M` is not out of place.\n. Brad, I have found that none of the \"shape\" methods in `Prawn::Graphics` (such as `circle`, `rectangle`, etc.) actually use a passed block. Do you think it's possible one of them might make use of blocks in the future?\n. I'm about to push a patch for the Graphics method, but am trying to figure out how to document the generated methods in the RDoc. http://stackoverflow.com/questions/11927534/how-to-add-rdoc-documentation-for-a-method-defined-using-class-eval\n. OK, shortcut methods for Prawn::Graphics are defined explicitly now (which should solve the related issue). I also added RDoc for the ones which I think people will actually use. (I omitted RDoc for some generated shortcut methods like `fill_line` -- why would anyone want to fill a line?)\n\nAlthough I am doubtful about the utility of methods like `stroke_line_to` (and didn't include RDoc for it), all the possible shortcuts for all the \"shape\" methods are defined, to avoid breaking client code. `stroke_circle_at`, etc. can be removed when the deprecated `circle_at` is.\n. WAIT! SORRY! Logically, this patch should improve performance, but it seems to make it worse! There may be a performance bug somewhere in here... let me diagnose it before merging, please!\n. OK, forget what I said about performance being worse with this patch. My benchmark was only exercising Prawn::Font::AFM, not Prawn::Font::TTF. Cases where Prawn::Font::TTF is used is where the unpacking/repacking code which I originally questioned is exercised. So there is no measurable performance benefit to this patch when using AFM fonts -- whether it measures as \"faster\" or \"slower\" on any given test run is wholly determined by random fluctuations in the results.\n\nInterestingly, wrapping text with TTF fonts seems to be faster than using AFM fonts.\n. And thanks for reviewing the code... I would really appreciate any specific comments which you (or anyone else) has.\n. Great point. What would you think if the script did something like `rvm -v`\n`rbenv -v` to see which one is installed, and then use one or the other as\nappropriate?\n. If a majority of the Prawn team is interested in running the specs locally\nagainst multiple VMs, I will update the script to work with both rvm and\nrbenv. I don't know anything about Travis but am just looking it up...\n. I'm guessing that the Prawn team is happy using Travis for testing against alternate Ruby implementations. If that is so, perhaps 9282fae, 222d268, and b3b2199 can be cherry-picked from this PR before it is closed?\n. On Tue, Sep 25, 2012 at 1:22 AM, James Healy notifications@github.comwrote:\n\n> I've removed rbx1.9 from the travis targets for now as rbx is a moving\n> target.\n> \n> jruby1.9 is still failing with what seem like legitimate encoding\n> failures, although I'm not sure why they don't occur on MRI. A job for\n> another day.\n> \n> I'll have a look at this today.\n. This is very confusing. Ruby 1.9.3 and JRuby 1.6.7.2 (in 1.8 mode) include\na version of test/unit.rb which define AutoRunner. The version of\ntest/unit.rb included in the libs for JRuby in 1.9 mode DOESN'T define\nAutoRunner, which is causing the error. But then Ruby 1.9.2's test/unit.rb\ndoesn't define AutoRunner either, but the rake specs run under MRI 1.9.2!\n. OK, I've traced it back a bit further. On MRI 1.9.2, it is using the\ntest-unit gem, not test/unit.rb from the stdlibs. On JRuby, for some\nreason, \"bundle install\" does NOT install the test-unit gem (although\nBundler appears to be running successfully), so it is using test/unit.rb\nfrom the stdlibs. The version of test/unit.rb which JRuby uses in 1.8 mode\nis compatible with test-spec, but the version it uses in 1.9 mode is not.\n\n---\n\nOK, I installed test-unit with JRuby using \"gem install\", but it is still\nusing the stdlib! When I do \"Bundler.setup\", it doesn't add the \"test-unit\"\ngem directory to the load path!\n. On Tue, Sep 25, 2012 at 1:56 PM, James Healy notifications@github.comwrote:\n\n> Which error are you looking at? I'm looking at the encoding errors at\n> http://travis-ci.org/#!/prawnpdf/prawn/jobs/2551473\n> \n> I was looking at build #7. I see that the newer one which you linked to is\n> using JRuby 1.6.8 -- I'm just downloading that to see if I can replicate\n> the errors locally.\n\nJames, rather than telling Travis to test against \"jruby-19mode\", can we\nspecify a specific version of JRuby? Otherwise, every time they release a\nnew version, it may break the Prawn build. If a specific version of JRuby\n(and Rubinius, etc) can be specified in .travis.yml, then the Prawn team\ncan decide when to \"bump\" the supported versions of JRuby/rbx/etc.\n. I don't care exactly what the license is, as long as people are free to use it. So if the other contributors say :+1:, then :+1:.\n. We encountered the exact same issue and were baffled by why simply adding a PNG to a PDF could use hundreds of megabytes of memory. Using `ObjectSpace.each_object` revealed that Prawn was allocating more than 500,000 Arrays and 80,000 Strings for that operation. This should be mentioned in the documentation for `Prawn::Document#image`!!!\n. @bradediger, thanks for pointing that out. I did see that in the docs, but didn't connect it to the fact that our application was running out of memory. The docs seem to indicate that processing PNGs is CPU-intensive, not memory-intensive. Actually, I thought using `prawn-fast-png` might make the problem worse, because RMagick can be a memory hog itself.\n. Thanks! PRAWN IS AWESOME!\n. I'm using the gem.\n. This is from version 0.12.0 of the gem...\n\n```\n>> doc.width_of(\"text\", :style => :bold)\n=> 19.344\n>> doc.width_of(\"<b>text</b>\", :inline_format => true)\n=> 64.056\n```\n\nShould I upgrade to edge Prawn?\n. The app is deployed on Engine Yard, which uses Bundler for dependency management. How can I specify version 1.0 RC in the Gemfile?\n. I don't have time to test this right now but thanks for your help!!! Looking forward to Prawn 1.0!!!\n. I'm not done yet, not until table layout is so fast it takes your breath away!\n. BTW, I hope my optimizations don't break anything in Prawn! I'll have to check what you have for a test suite and make sure all the tests pass before submitting my next pull request.\n. BTW, I can't seem to run the RSpec tests on my dev machine. It seems like some problem with the Ruby \"require\" path, which is messing up RSpec...\n. Oh, one more thing: with this commit, the time used for table generation appears to be linear... it still had a slight exponential curve before.\n. Awesome, thank you for pointing that out. It looks like all the specs still pass with this commit. BTW, if you have any suggestions on coding style, commenting, etc. I will observe them for future PRs.\n. OK, I'll try to apply the point on parallel assignment.\n. Just added another \"nickel and dime\" optimization which gives ~2% speed boost to table benchmark.\n. I discovered that although the optimizations I have done so far have made a big difference, PDF generation in my app is still shockingly slow, much slower than I expected from the benchmark results. I investigated and found that the app is using the following optional arguments to Prawn::Document#table:\n\n```\n:header => true, :row_colors => ['FFFFFF', 'F0F0FF'], :cell_style => {:inline_format => true, :padding => 3, :size => 9}\n```\n\n:inline_format especially kills performance. I added some tests to the table benchmark to measure performance with these optional arguments, profiled, and found some optimizations which bring the performance with :inline_format close to that without.\n\nIf you can give any suggestions to improve code style, please do so.\n. Thanks for reviewing my code. As far as the issue of `class_eval(\"...\")` vs. `class_eval { ... }`, please note that by its nature, this code inherently treats the names of methods as strings -- it even uses regular expressions to extract a portion of the method name and treats that as the name of another method to call. To achieve the same effect with `class_eval { ... }` would by necessity require using `send`, which would add overhead. With `class_eval(\"...\")`, we can use regular method dispatch, and make the code every bit as fast as if each \"shortcut method\" was individually hard-coded.\n\nI will amend the code to make it respect passed blocks. If we want to \"whitelist\", it would be best to define all the needed \"shortcut methods\" eagerly, probably something like:\n\n```\n# Define shortcut methods for common combinations of graphics primitives\n# Should probably use RDoc directive comments so that all the generated methods are included in RDoc\n%w{foo bar}.product(%w{fill stroke stroke_and_fill}).each do |method1, method2|\n  class_eval \"def #{method1}_and_#{method2}; ...; end\"\nend\n```\n\nThis does not provide any performance advantage over `method_missing` but is more straightforward. If you like this idea, please let me know.\n. BTW, `styled_width_of_M` is partly in jest. It does make a significant improvement to performance when using `:inline_format`, but I'm sure there is a better name. `styled_width_of_single_character` would be clearer, but is very long. On the other hand, I have seen a couple deliberately silly, quirky things in the Prawn source, so maybe `styled_width_of_M` is not out of place.\n. Brad, I have found that none of the \"shape\" methods in `Prawn::Graphics` (such as `circle`, `rectangle`, etc.) actually use a passed block. Do you think it's possible one of them might make use of blocks in the future?\n. I'm about to push a patch for the Graphics method, but am trying to figure out how to document the generated methods in the RDoc. http://stackoverflow.com/questions/11927534/how-to-add-rdoc-documentation-for-a-method-defined-using-class-eval\n. OK, shortcut methods for Prawn::Graphics are defined explicitly now (which should solve the related issue). I also added RDoc for the ones which I think people will actually use. (I omitted RDoc for some generated shortcut methods like `fill_line` -- why would anyone want to fill a line?)\n\nAlthough I am doubtful about the utility of methods like `stroke_line_to` (and didn't include RDoc for it), all the possible shortcuts for all the \"shape\" methods are defined, to avoid breaking client code. `stroke_circle_at`, etc. can be removed when the deprecated `circle_at` is.\n. WAIT! SORRY! Logically, this patch should improve performance, but it seems to make it worse! There may be a performance bug somewhere in here... let me diagnose it before merging, please!\n. OK, forget what I said about performance being worse with this patch. My benchmark was only exercising Prawn::Font::AFM, not Prawn::Font::TTF. Cases where Prawn::Font::TTF is used is where the unpacking/repacking code which I originally questioned is exercised. So there is no measurable performance benefit to this patch when using AFM fonts -- whether it measures as \"faster\" or \"slower\" on any given test run is wholly determined by random fluctuations in the results.\n\nInterestingly, wrapping text with TTF fonts seems to be faster than using AFM fonts.\n. And thanks for reviewing the code... I would really appreciate any specific comments which you (or anyone else) has.\n. Great point. What would you think if the script did something like `rvm -v`\n`rbenv -v` to see which one is installed, and then use one or the other as\nappropriate?\n. If a majority of the Prawn team is interested in running the specs locally\nagainst multiple VMs, I will update the script to work with both rvm and\nrbenv. I don't know anything about Travis but am just looking it up...\n. I'm guessing that the Prawn team is happy using Travis for testing against alternate Ruby implementations. If that is so, perhaps 9282fae, 222d268, and b3b2199 can be cherry-picked from this PR before it is closed?\n. On Tue, Sep 25, 2012 at 1:22 AM, James Healy notifications@github.comwrote:\n\n> I've removed rbx1.9 from the travis targets for now as rbx is a moving\n> target.\n> \n> jruby1.9 is still failing with what seem like legitimate encoding\n> failures, although I'm not sure why they don't occur on MRI. A job for\n> another day.\n> \n> I'll have a look at this today.\n. This is very confusing. Ruby 1.9.3 and JRuby 1.6.7.2 (in 1.8 mode) include\na version of test/unit.rb which define AutoRunner. The version of\ntest/unit.rb included in the libs for JRuby in 1.9 mode DOESN'T define\nAutoRunner, which is causing the error. But then Ruby 1.9.2's test/unit.rb\ndoesn't define AutoRunner either, but the rake specs run under MRI 1.9.2!\n. OK, I've traced it back a bit further. On MRI 1.9.2, it is using the\ntest-unit gem, not test/unit.rb from the stdlibs. On JRuby, for some\nreason, \"bundle install\" does NOT install the test-unit gem (although\nBundler appears to be running successfully), so it is using test/unit.rb\nfrom the stdlibs. The version of test/unit.rb which JRuby uses in 1.8 mode\nis compatible with test-spec, but the version it uses in 1.9 mode is not.\n\n---\n\nOK, I installed test-unit with JRuby using \"gem install\", but it is still\nusing the stdlib! When I do \"Bundler.setup\", it doesn't add the \"test-unit\"\ngem directory to the load path!\n. On Tue, Sep 25, 2012 at 1:56 PM, James Healy notifications@github.comwrote:\n\n> Which error are you looking at? I'm looking at the encoding errors at\n> http://travis-ci.org/#!/prawnpdf/prawn/jobs/2551473\n> \n> I was looking at build #7. I see that the newer one which you linked to is\n> using JRuby 1.6.8 -- I'm just downloading that to see if I can replicate\n> the errors locally.\n\nJames, rather than telling Travis to test against \"jruby-19mode\", can we\nspecify a specific version of JRuby? Otherwise, every time they release a\nnew version, it may break the Prawn build. If a specific version of JRuby\n(and Rubinius, etc) can be specified in .travis.yml, then the Prawn team\ncan decide when to \"bump\" the supported versions of JRuby/rbx/etc.\n. I don't care exactly what the license is, as long as people are free to use it. So if the other contributors say :+1:, then :+1:.\n. ",
    "luckydev": "If anyone is using paperclip, we can fix this without prawn-fast png. we ask imagemagick directly to save the image with white background. \n\n``` ruby\n has_attached_file :header, :styles => {:std => \"450x50>\"}, :convert_options => {:all => \"-flatten\" } \n```\n. it does like that for any transparent background image.\n\nOn Sat, Dec 14, 2013 at 3:13 PM, Alexander Mankuta <notifications@github.com\n\n> wrote:\n> \n> @luckydev https://github.com/luckydev @alexdowadhttps://github.com/alexdowadCould you please provide the images you've observed abnormal CPU/mem usage\n> with?\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/prawnpdf/prawn/issues/324#issuecomment-30563856\n> .\n. If anyone is using paperclip, we can fix this without prawn-fast png. we ask imagemagick directly to save the image with white background. \n\n``` ruby\n has_attached_file :header, :styles => {:std => \"450x50>\"}, :convert_options => {:all => \"-flatten\" } \n```\n. it does like that for any transparent background image.\n\nOn Sat, Dec 14, 2013 at 3:13 PM, Alexander Mankuta <notifications@github.com\n\n> wrote:\n> \n> @luckydev https://github.com/luckydev @alexdowadhttps://github.com/alexdowadCould you please provide the images you've observed abnormal CPU/mem usage\n> with?\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/prawnpdf/prawn/issues/324#issuecomment-30563856\n> .\n. ",
    "MarkDBlackwell": "In practical terms (unlike, from some perspectives, the 'ideal' world of programming), 'hugely slow' is equivalent to 'unworkable'.\n\nPrawn (in effect) IMHO simply does not support certain kinds of image files (in that important sense).\n\nThe kinds of image files without Prawn support (practically speaking) include at least PNGs with transparency.\n\nBy default, Prawn should reject these files\u2014that is, reject them immediately, rather than in the mathematical sense of rejecting them ultimately, by making their processing practically interminable. ;/\n\nThis would be a service to Prawn's users.\n\nBecause Prawn (I believe) lacks such a configurable option, I needed to write code to prevent passing such alpha transparent PNGs to Prawn. Please let me know if Prawn does have such an option!\n\nTo catch them, I just looked at the 'alpha' bit located in PNG's easily findable IHDR [color type](http://www.libpng.org/pub/png/spec/1.2/PNG-Chunks.html#C.IHDR) byte.\n\nHowever, generally speaking, obviously, Prawn users who use PNGs would find this unattractive. Presumably, they wouldn't wish to write this kind of code!\n\nArguably, Prawn should have a passable (or configurable) setting, allowing it optionally to process PNGs with transparency.\n\nThis setting should be 'reject' by default in order to protect Prawn's reputation for snappiness. Knowledgeable users can set this quite easily to 'accept', after they decide the extreme slowness is warranted in their special cases (perhaps for quite small PNG files).\n\nBTW, relative to this method, ChunkyPNG was extremely slow to load a PNG for this check. And, ChunkyPNG doesn't even provide the color type (I believe).\n. @sandal @cheba @yob It would be wonderful to have such a configurable option as sandal's suggested: `Prawn::Image::PNG.allow_transparency` (even if it defaults to `true`) with sandal's suggested error message, but only if it raises an exception that stops the program when it is set to `false'.\n\nIn my own view, it is fine to default it to `true` to avoid extra support requests on the mailing list. :)\n\nMerely emitting a warning about this issue (when set to `false`) would not help us Prawn users who write programs to deliver to end users. We Prawn users ourselves are well aware\u2014or soon become aware\u2014of Prawn's tendency to hang on transparent PNGs.\n\nHandling transparency in PNGs isn't such a big need, I would think. After all, as I understand it, the PDF format itself doesn't even include the concept of transparency. Is it true that we can draw anything atop any opaque PNGs we drew (or placed) earlier in a PDF? (Please correct me if I'm wrong.)\n\nI believe the big problem here is that end users may give us a transparent PNG someday (or soon), intended for placement in a PDF, without any transparency truly, actually being desired. And how do we handle that? (It has already happened to me, out of their graphics shop.)\n\nAs you know, end users don't much look at the stream of warning messages. But they would look, if an error stopped the program they were running. And, users of Prawn could set that configurable option easily to false: _so_ much more easily than writing code, themselves, to look inside any 'arriving' PNGs, programmatically, for their color type, before passing them on to Prawn!\n\nWith an exception raised, end users would see the exception message immediately and get the point not to use transparent PNGs, rather than just believing that the Prawn user's (that is, my) program is bothersomely slow and hangs too much, and perhaps, then, drawing a mistaken, general conclusion that Prawn, itself, is 'just a bad gem'. ;/\n\nBTW, aren't we Prawn users who write programs\u2014for delivery to end users\u2014a major portion of all Prawn users? Presumably, Prawn intends to help us with our needs, too.\n\nI tend to think that defaulting a configurable option: `allow_transparency` to `false` on balance would evangelize Prawn much better. But, whichever way it defaults doesn't matter to me, for my own purposes. :)\n. @sandal I presume you have good reasons for wanting to wait until the 1.0 release to introduce an exception. :)\n\nHowever, it seems arguably important in pre-1.0 time, when things (API, etc.) can be more fluid, to make changes to solve the known, various problems such as this one, for Prawn users who supply programs to end users.\n\nEspecially in this case, whose solution involves only a non-default configuration, which won't impact the usual mass of users at all!\n. @sandal @yob Agreed it should be OFF by default. :)\n\nI already have my own code written to check the PNG's myself. I raise this recommendation to benefit (I think) Prawn, and the other Prawn users who are like me, in the future. :)\n\nIn other words, I don't foresee my submitting a pull request for this, not that I don't think it's desirable.\n. @cheba Continually, I am greatly impressed by your knowledge!\n\nSo, I take it I can indeed draw something opaque over an earlier-drawn opaque object in a PDF. Perhaps it's obvious.\n\nI take your point that transparent images can contain some hidden things which shouldn't be brought into the light of total opaqueness! ;/\n\nWell, in this particular case, using Photoshop, I flattened the image which I was given and removed its transparency. I don't know if that's the same as merely stripping the alpha channel. Then I verified with my own eyes that it looked the same as the original PNG. Perhaps people (not Prawn) should flatten their PNG images for Prawn's use, and not merely strip their alpha channel\u2014I don't know.\n\nThis particular image was entirely at the 100% level (of opaqueness) except for its surrounding area, which was 100% transparent (or clear), somewhat in the manner of a PNG for a visual object on a web page. I verified this by loading it in a browser and changing the browser's background color.\n\nThe image also included a central, opaque white background. This is perhaps not so good for a web page\u2014unless the intended web page's background happens to be white. So, here, this client's graphics shop didn't do such good work, I would think. Or, which seems more likely, they don't understand PDFs.\n\nAnyway, placed on a white background on a web page, this kind of transparent PNG looks just like its non-transparent, transformed version.\n\nIn cases like these, the alpha channel is totally unneeded. Nevertheless, it included the bothersome alpha channel.\n\nI don't really know whether (coming out of graphics shops) this kind of PNG is common or uncommon. Based on my sample size (of one) and for other reasons, I suspect it might be quite common.\n\nI would inform you, if you didn't know, that end users often don't know much about what they are doing. :) That's a key point, I think. That's why they easily could ask that a PNG with an almost totally useless alpha channel be used for making a PDF.\n\nI suppose transparency isn't usually deeply desired by the end user for PDFs, because usually they can convert their transparent PNG images to a workable, non-transparent form.\n\nIn other words, after human beings hand-convert the _usual_ web PNG's transparent areas to white, using their visual judgment, everything should be fine whenever their desired PDF is printed on white paper. Don't you think so?\n\nI suspect that in practice people present Prawn with an actual business need for PDF soft masks\u2014for a visible element involving PNG transparency\u2014only in rare cases. :)\n\nOn the other hand, if a client were to tell me they want to include soft masks in their PDF output, then I would simply change my Prawn configuration settings to allow PNG alpha transparency\u2014but I can make that change only in those cases, and protect the good Prawn processing speed for my other clients.\n. > @MarkDBlackwell Could you please check latest release? It's much less processor intensive now.\n> I too would like to see performance numbers from real world apps with our latest code.\n\nPresumably #600's code (as eventually merged) performs basically as @cheba reported there.\n\nCertainly @cheba's code gives a wonderful speed increase (from 4.47 to 22.87 times faster on various Rubies excluding JRuby 1.7.8) for all Prawn users with a reasonable use for transparent PNGs!\n\nHowever, for the (maybe large) subset of Prawn users whose business purpose resembles mine, @cheba's benchmark data reveals a processing time difference between opaque PNGs, and those PNGs made transparent for no useful purpose. The data tells us (as a ratio) how much more time Prawn (in its latest release) still takes to process these (presumably) equivalent PNGs. The difference is quite vast.\n\nFrom @cheba's benchmark data, we can construct the ratio of \"real execution time\" (using 3 digits of precision and his modified code) for transparent PNGs versus opaque PNGs.\n\ntransparent / opaque = slowness factor\n\nJRuby 1.7.9\n24.7 / 2.92 = 8.46 = 846 percent\n\nMRI\n51.1 / 1.96 = 26.1 = 2,610 percent\n\nRBX\n72.8 / 1.71 = 42.6 = 4,260 percent\n\nJRuby 1.7.8\n367  / 2.98 = 123  = 12,300 percent\n3610 / 2.50 = 1440 = 144,000 percent\n\nOnly if Prawn brought this slowness ratio down to something like 130 percent would blocking of transparent PNGs (and thus this flag) no longer be worthwhile for the business purpose of my subset of Prawn users. And I don't think @cheba is saying #600's code brings the slowness ratio down to 130 percent.\n\nThis optional flag (documentation, test, and raising the exception) seems far easier to implement than an algorithmic speedup. Quoting @sandal, [\"We have a very easy place to put this, directly where we split alpha channels.](https://github.com/prawnpdf/prawn/issues/324#issuecomment-30541093)\n\nIt's to aid Prawn's reputation that I urge Prawn to add this flag. :)\n\nFor this subset of Prawn users, their business purpose (presumably this is quite common) includes no practical use of PNG transparency. This purpose involves many more (and differing) PDFs than PNGs, so efficiency in repetitively processing each PNG is important. Our end users dynamically supply our PNGs (which are many). But we want (in some automated fashion) to be able to reject those transparent PNGs which (needlessly) are highly inefficient.\n\nOur end users may have exported these PNGs from their graphics programs in versions which include transparency (which is the standard for the web) and then given them to us (to no purpose and erroneously).\n\nWe can advise our end users of this fact (in general) but it seems to be a UI principle that end users will make this mistake (as well as all others), and blame our software (or Prawn). Therefore we want to block transparent PNGs.  And for our business purpose it is sufficient to block them immediately by raising an exception.\n\nIf any Prawn user (not an end user) wishes to handle this exception and process another PNG, they could rescue it. Perhaps therefore the exception should be something like `Prawn::Errors::TransparentPNGBlocked`.\n. @sandal: your fine idea:\n\n``` ruby\npng = Prawn::Images::PNG.new blob\nraise if png.alpha_channel?\n```\n\nlooks like it will work well for me, because it happens before #build_pdf_object!\n\nNow, I regret I didn't investigate the Prawn source earlier, and thus wasted your time. Live and learn, I guess. &lt;crestfallen&gt;\n. I do understand. :)\nThanks for the tip on temporarily redirecting STDERR. (BTW, redirecting $stderr works just fine, here.)\n. In practical terms (unlike, from some perspectives, the 'ideal' world of programming), 'hugely slow' is equivalent to 'unworkable'.\n\nPrawn (in effect) IMHO simply does not support certain kinds of image files (in that important sense).\n\nThe kinds of image files without Prawn support (practically speaking) include at least PNGs with transparency.\n\nBy default, Prawn should reject these files\u2014that is, reject them immediately, rather than in the mathematical sense of rejecting them ultimately, by making their processing practically interminable. ;/\n\nThis would be a service to Prawn's users.\n\nBecause Prawn (I believe) lacks such a configurable option, I needed to write code to prevent passing such alpha transparent PNGs to Prawn. Please let me know if Prawn does have such an option!\n\nTo catch them, I just looked at the 'alpha' bit located in PNG's easily findable IHDR [color type](http://www.libpng.org/pub/png/spec/1.2/PNG-Chunks.html#C.IHDR) byte.\n\nHowever, generally speaking, obviously, Prawn users who use PNGs would find this unattractive. Presumably, they wouldn't wish to write this kind of code!\n\nArguably, Prawn should have a passable (or configurable) setting, allowing it optionally to process PNGs with transparency.\n\nThis setting should be 'reject' by default in order to protect Prawn's reputation for snappiness. Knowledgeable users can set this quite easily to 'accept', after they decide the extreme slowness is warranted in their special cases (perhaps for quite small PNG files).\n\nBTW, relative to this method, ChunkyPNG was extremely slow to load a PNG for this check. And, ChunkyPNG doesn't even provide the color type (I believe).\n. @sandal @cheba @yob It would be wonderful to have such a configurable option as sandal's suggested: `Prawn::Image::PNG.allow_transparency` (even if it defaults to `true`) with sandal's suggested error message, but only if it raises an exception that stops the program when it is set to `false'.\n\nIn my own view, it is fine to default it to `true` to avoid extra support requests on the mailing list. :)\n\nMerely emitting a warning about this issue (when set to `false`) would not help us Prawn users who write programs to deliver to end users. We Prawn users ourselves are well aware\u2014or soon become aware\u2014of Prawn's tendency to hang on transparent PNGs.\n\nHandling transparency in PNGs isn't such a big need, I would think. After all, as I understand it, the PDF format itself doesn't even include the concept of transparency. Is it true that we can draw anything atop any opaque PNGs we drew (or placed) earlier in a PDF? (Please correct me if I'm wrong.)\n\nI believe the big problem here is that end users may give us a transparent PNG someday (or soon), intended for placement in a PDF, without any transparency truly, actually being desired. And how do we handle that? (It has already happened to me, out of their graphics shop.)\n\nAs you know, end users don't much look at the stream of warning messages. But they would look, if an error stopped the program they were running. And, users of Prawn could set that configurable option easily to false: _so_ much more easily than writing code, themselves, to look inside any 'arriving' PNGs, programmatically, for their color type, before passing them on to Prawn!\n\nWith an exception raised, end users would see the exception message immediately and get the point not to use transparent PNGs, rather than just believing that the Prawn user's (that is, my) program is bothersomely slow and hangs too much, and perhaps, then, drawing a mistaken, general conclusion that Prawn, itself, is 'just a bad gem'. ;/\n\nBTW, aren't we Prawn users who write programs\u2014for delivery to end users\u2014a major portion of all Prawn users? Presumably, Prawn intends to help us with our needs, too.\n\nI tend to think that defaulting a configurable option: `allow_transparency` to `false` on balance would evangelize Prawn much better. But, whichever way it defaults doesn't matter to me, for my own purposes. :)\n. @sandal I presume you have good reasons for wanting to wait until the 1.0 release to introduce an exception. :)\n\nHowever, it seems arguably important in pre-1.0 time, when things (API, etc.) can be more fluid, to make changes to solve the known, various problems such as this one, for Prawn users who supply programs to end users.\n\nEspecially in this case, whose solution involves only a non-default configuration, which won't impact the usual mass of users at all!\n. @sandal @yob Agreed it should be OFF by default. :)\n\nI already have my own code written to check the PNG's myself. I raise this recommendation to benefit (I think) Prawn, and the other Prawn users who are like me, in the future. :)\n\nIn other words, I don't foresee my submitting a pull request for this, not that I don't think it's desirable.\n. @cheba Continually, I am greatly impressed by your knowledge!\n\nSo, I take it I can indeed draw something opaque over an earlier-drawn opaque object in a PDF. Perhaps it's obvious.\n\nI take your point that transparent images can contain some hidden things which shouldn't be brought into the light of total opaqueness! ;/\n\nWell, in this particular case, using Photoshop, I flattened the image which I was given and removed its transparency. I don't know if that's the same as merely stripping the alpha channel. Then I verified with my own eyes that it looked the same as the original PNG. Perhaps people (not Prawn) should flatten their PNG images for Prawn's use, and not merely strip their alpha channel\u2014I don't know.\n\nThis particular image was entirely at the 100% level (of opaqueness) except for its surrounding area, which was 100% transparent (or clear), somewhat in the manner of a PNG for a visual object on a web page. I verified this by loading it in a browser and changing the browser's background color.\n\nThe image also included a central, opaque white background. This is perhaps not so good for a web page\u2014unless the intended web page's background happens to be white. So, here, this client's graphics shop didn't do such good work, I would think. Or, which seems more likely, they don't understand PDFs.\n\nAnyway, placed on a white background on a web page, this kind of transparent PNG looks just like its non-transparent, transformed version.\n\nIn cases like these, the alpha channel is totally unneeded. Nevertheless, it included the bothersome alpha channel.\n\nI don't really know whether (coming out of graphics shops) this kind of PNG is common or uncommon. Based on my sample size (of one) and for other reasons, I suspect it might be quite common.\n\nI would inform you, if you didn't know, that end users often don't know much about what they are doing. :) That's a key point, I think. That's why they easily could ask that a PNG with an almost totally useless alpha channel be used for making a PDF.\n\nI suppose transparency isn't usually deeply desired by the end user for PDFs, because usually they can convert their transparent PNG images to a workable, non-transparent form.\n\nIn other words, after human beings hand-convert the _usual_ web PNG's transparent areas to white, using their visual judgment, everything should be fine whenever their desired PDF is printed on white paper. Don't you think so?\n\nI suspect that in practice people present Prawn with an actual business need for PDF soft masks\u2014for a visible element involving PNG transparency\u2014only in rare cases. :)\n\nOn the other hand, if a client were to tell me they want to include soft masks in their PDF output, then I would simply change my Prawn configuration settings to allow PNG alpha transparency\u2014but I can make that change only in those cases, and protect the good Prawn processing speed for my other clients.\n. > @MarkDBlackwell Could you please check latest release? It's much less processor intensive now.\n> I too would like to see performance numbers from real world apps with our latest code.\n\nPresumably #600's code (as eventually merged) performs basically as @cheba reported there.\n\nCertainly @cheba's code gives a wonderful speed increase (from 4.47 to 22.87 times faster on various Rubies excluding JRuby 1.7.8) for all Prawn users with a reasonable use for transparent PNGs!\n\nHowever, for the (maybe large) subset of Prawn users whose business purpose resembles mine, @cheba's benchmark data reveals a processing time difference between opaque PNGs, and those PNGs made transparent for no useful purpose. The data tells us (as a ratio) how much more time Prawn (in its latest release) still takes to process these (presumably) equivalent PNGs. The difference is quite vast.\n\nFrom @cheba's benchmark data, we can construct the ratio of \"real execution time\" (using 3 digits of precision and his modified code) for transparent PNGs versus opaque PNGs.\n\ntransparent / opaque = slowness factor\n\nJRuby 1.7.9\n24.7 / 2.92 = 8.46 = 846 percent\n\nMRI\n51.1 / 1.96 = 26.1 = 2,610 percent\n\nRBX\n72.8 / 1.71 = 42.6 = 4,260 percent\n\nJRuby 1.7.8\n367  / 2.98 = 123  = 12,300 percent\n3610 / 2.50 = 1440 = 144,000 percent\n\nOnly if Prawn brought this slowness ratio down to something like 130 percent would blocking of transparent PNGs (and thus this flag) no longer be worthwhile for the business purpose of my subset of Prawn users. And I don't think @cheba is saying #600's code brings the slowness ratio down to 130 percent.\n\nThis optional flag (documentation, test, and raising the exception) seems far easier to implement than an algorithmic speedup. Quoting @sandal, [\"We have a very easy place to put this, directly where we split alpha channels.](https://github.com/prawnpdf/prawn/issues/324#issuecomment-30541093)\n\nIt's to aid Prawn's reputation that I urge Prawn to add this flag. :)\n\nFor this subset of Prawn users, their business purpose (presumably this is quite common) includes no practical use of PNG transparency. This purpose involves many more (and differing) PDFs than PNGs, so efficiency in repetitively processing each PNG is important. Our end users dynamically supply our PNGs (which are many). But we want (in some automated fashion) to be able to reject those transparent PNGs which (needlessly) are highly inefficient.\n\nOur end users may have exported these PNGs from their graphics programs in versions which include transparency (which is the standard for the web) and then given them to us (to no purpose and erroneously).\n\nWe can advise our end users of this fact (in general) but it seems to be a UI principle that end users will make this mistake (as well as all others), and blame our software (or Prawn). Therefore we want to block transparent PNGs.  And for our business purpose it is sufficient to block them immediately by raising an exception.\n\nIf any Prawn user (not an end user) wishes to handle this exception and process another PNG, they could rescue it. Perhaps therefore the exception should be something like `Prawn::Errors::TransparentPNGBlocked`.\n. @sandal: your fine idea:\n\n``` ruby\npng = Prawn::Images::PNG.new blob\nraise if png.alpha_channel?\n```\n\nlooks like it will work well for me, because it happens before #build_pdf_object!\n\nNow, I regret I didn't investigate the Prawn source earlier, and thus wasted your time. Live and learn, I guess. &lt;crestfallen&gt;\n. I do understand. :)\nThanks for the tip on temporarily redirecting STDERR. (BTW, redirecting $stderr works just fine, here.)\n. ",
    "stympy": "Since you asked for reports, here's one -- This change made a significant difference in an app I'm working on.  Running 0.12 I was hitting memory limits on Heroku, and running 0.14 I'm not.  Awesome work, thanks!\n. Since you asked for reports, here's one -- This change made a significant difference in an app I'm working on.  Running 0.12 I was hitting memory limits on Heroku, and running 0.14 I'm not.  Awesome work, thanks!\n. ",
    "pandar1": "Maybe this\nhttp://www.johnhawthorn.com/2009/10/sanitizing-utf8-in-ruby/\nhas something to do with it?\n. P.S. tried that way, it still crashes\n. Addendum: the problem seems cyrillic related but not specifically tied to the above labels, I tried with other long cyrillic labels and it crashes, while with ascii chars it does not\nMaybe something related to the fact that cyrillic occupies 2 bytes (maybe prawn is confident that 1 char = 1 byte?)\n. I finally found a workaround... ;))))\n\nFirst: the problem occurs when cyrillic (multibyte) chars are in the pdf (more likely if there are long multibyte strings > 20-30 chars)\nSecond: the workaround is to disable ruby garbage collector (GC.disable) before calling prawn and re-enable (GC.enable) after prawn\n\nProblem occurs in ruby (not rails) 1.8.7\n\nThis is the thread who gave me the idea to try to disable GC\n\nhttps://github.com/hpricot/hpricot/issues/32\n. Addendum: well, it seems that disabling GC is not the final cure, while it has indeed some effects I still experience ruby segfaults\n. Hello? is there anybody in there?\n. Yes, it's a ruby problem but it's triggered by prawn... I've switched to fpdf engine and I have no problems... it's more primitive than prawn but it's much faster...\n. I see the indentation across page breaks bug is already known, closing\n. p.s. I have threadsafe on\n. p.s. I was on rails3 now on rails4, prawn 0.12.0\n. Well, it can be done offline but I think that it's a bad programming attitude to use 100% cpu until you have the job done, especially in a multi tasking/multi user environment like rails, which can serve hundreds of users at the same time. The solution is not hard, just insert sleep instructions in tight cycles while rendering tables, to be kind with other processes which runs at the same time. I think many have the same problem...\n. ok, I will try and submit the changes... ;)\n. I think it's not the web server, both puma and thin claims they're multi thread, it's ruby standard distribution that is mono-thread... in the puma documentation they said \"Puma is designed to be used on a Ruby implementation which provides true parallelism, such as Rubinius and JRuby\"\n\nSo if the standard ruby distribution is mono-thread I think it would be nice if prawn could release the cpu during the rendering in order for other users to be served... the offline implementation of pdf rendering is a solution, but it would be nice if the problem did not exists in first place...\n. @bradediger my code is already designed to be kind with other tasks, it's prawn that is not\n. In this case the OS can do nothing because for the OS there is only 1 thread of ruby, so the OS can't switch between nothing. It would be the task of rails and ruby to switch between requests but obviously they aren't doing a good job here. From the tests I made it seems that when there is a I/O operation rails switch to serve other users, but if you run a tight cycle with no I/O ruby do not release the cpu. The only method I found it's to use a sleep instruction in the cycle, and then ruby will switch. The solution of using more that 1 ruby instance it's not conclusive, I noticed that even with 3 rails instances at the same time switched by nginx during long pdf rendering the other users are still hanging. Maybe it's not a prawn fault, and it's ruby to blame, but if it can be fixed without many changes it would be nice. From my tests putting a sleep of 1 hundred of a second do not change execution time at all...\n. @gettalong Ok, tnx for the suggestion, I will try it...\n. @cheba yes, I talk about MRI... I will try to switch to jruby or rubinius and see if this solve this issue...\n. @sandal ok, understood... thanks for your support...\n. Maybe this\nhttp://www.johnhawthorn.com/2009/10/sanitizing-utf8-in-ruby/\nhas something to do with it?\n. P.S. tried that way, it still crashes\n. Addendum: the problem seems cyrillic related but not specifically tied to the above labels, I tried with other long cyrillic labels and it crashes, while with ascii chars it does not\nMaybe something related to the fact that cyrillic occupies 2 bytes (maybe prawn is confident that 1 char = 1 byte?)\n. I finally found a workaround... ;))))\n\nFirst: the problem occurs when cyrillic (multibyte) chars are in the pdf (more likely if there are long multibyte strings > 20-30 chars)\nSecond: the workaround is to disable ruby garbage collector (GC.disable) before calling prawn and re-enable (GC.enable) after prawn\n\nProblem occurs in ruby (not rails) 1.8.7\n\nThis is the thread who gave me the idea to try to disable GC\n\nhttps://github.com/hpricot/hpricot/issues/32\n. Addendum: well, it seems that disabling GC is not the final cure, while it has indeed some effects I still experience ruby segfaults\n. Hello? is there anybody in there?\n. Yes, it's a ruby problem but it's triggered by prawn... I've switched to fpdf engine and I have no problems... it's more primitive than prawn but it's much faster...\n. I see the indentation across page breaks bug is already known, closing\n. p.s. I have threadsafe on\n. p.s. I was on rails3 now on rails4, prawn 0.12.0\n. Well, it can be done offline but I think that it's a bad programming attitude to use 100% cpu until you have the job done, especially in a multi tasking/multi user environment like rails, which can serve hundreds of users at the same time. The solution is not hard, just insert sleep instructions in tight cycles while rendering tables, to be kind with other processes which runs at the same time. I think many have the same problem...\n. ok, I will try and submit the changes... ;)\n. I think it's not the web server, both puma and thin claims they're multi thread, it's ruby standard distribution that is mono-thread... in the puma documentation they said \"Puma is designed to be used on a Ruby implementation which provides true parallelism, such as Rubinius and JRuby\"\n\nSo if the standard ruby distribution is mono-thread I think it would be nice if prawn could release the cpu during the rendering in order for other users to be served... the offline implementation of pdf rendering is a solution, but it would be nice if the problem did not exists in first place...\n. @bradediger my code is already designed to be kind with other tasks, it's prawn that is not\n. In this case the OS can do nothing because for the OS there is only 1 thread of ruby, so the OS can't switch between nothing. It would be the task of rails and ruby to switch between requests but obviously they aren't doing a good job here. From the tests I made it seems that when there is a I/O operation rails switch to serve other users, but if you run a tight cycle with no I/O ruby do not release the cpu. The only method I found it's to use a sleep instruction in the cycle, and then ruby will switch. The solution of using more that 1 ruby instance it's not conclusive, I noticed that even with 3 rails instances at the same time switched by nginx during long pdf rendering the other users are still hanging. Maybe it's not a prawn fault, and it's ruby to blame, but if it can be fixed without many changes it would be nice. From my tests putting a sleep of 1 hundred of a second do not change execution time at all...\n. @gettalong Ok, tnx for the suggestion, I will try it...\n. @cheba yes, I talk about MRI... I will try to switch to jruby or rubinius and see if this solve this issue...\n. @sandal ok, understood... thanks for your support...\n. ",
    "gauravsaini23": "Yup same issue here :(\nerror says some segmentation fault with ruby.\n\nIts a ruby problem..\n. Yup same issue here :(\nerror says some segmentation fault with ruby.\n\nIts a ruby problem..\n. ",
    "dom1nga": "have the same problem. get this error when use transparent gif images.\nexample: http://upload.wikimedia.org/wikipedia/commons/8/8d/Klocka_transparent.GIF\nwill be added support for gif images in future?\nas i see - png and jpg only.\n. have the same problem. get this error when use transparent gif images.\nexample: http://upload.wikimedia.org/wikipedia/commons/8/8d/Klocka_transparent.GIF\nwill be added support for gif images in future?\nas i see - png and jpg only.\n. ",
    "jaybrueder": "There is also a discussion going on in the Prawn Google Group:\nhttps://groups.google.com/forum/?fromgroups#!topic/prawn-ruby/HIWb2TPB0bI\n. I have put an example pdf here: http://juergenbrueder.com/pdfs/vorschau.pdf\n\nThe stack trace when rendering a PDF with the above PDF as template is included below.\nIt is not very informative. All I can say is that base_recipe_export.rb:124 is where the \n\n``` ruby\nstart_new_page(:template => \"#{Rails.root}/public#{upload.document.url}\")\n```\n\nis located.\n\nNoMethodError (undefined method `[]' for nil:NilClass):\n  app/pdfs/base_recipe_export.rb:124:in`rescue in block in recipe_pdf'\n  app/pdfs/base_recipe_export.rb:120:in `block in recipe_pdf'\n  app/pdfs/base_recipe_export.rb:117:in`each'\n  app/pdfs/base_recipe_export.rb:117:in `recipe_pdf'\n  app/pdfs/base_recipe_export.rb:66:in`block (2 levels) in render_recipes'\n  app/pdfs/base_recipe_export.rb:64:in `block in render_recipes'\n  app/pdfs/base_recipe_export.rb:56:in`each'\n  app/pdfs/base_recipe_export.rb:56:in `render_recipes'\n  app/pdfs/base_recipe_export.rb:50:in`render_all_others'\n  app/pdfs/recipes_export_pdf.rb:22:in `initialize'\n  app/controllers/recipes_controller.rb:32:in`new'\n  app/controllers/recipes_controller.rb:32:in `block (2 levels) in pdf_export'\n  app/controllers/recipes_controller.rb:30:in`pdf_export'\n  config/initializers/quiet_assets.rb:7:in `call_with_quiet_assets'\n. There is also a discussion going on in the Prawn Google Group:\nhttps://groups.google.com/forum/?fromgroups#!topic/prawn-ruby/HIWb2TPB0bI\n. I have put an example pdf here: http://juergenbrueder.com/pdfs/vorschau.pdf\n\nThe stack trace when rendering a PDF with the above PDF as template is included below.\nIt is not very informative. All I can say is that base_recipe_export.rb:124 is where the \n\n``` ruby\nstart_new_page(:template => \"#{Rails.root}/public#{upload.document.url}\")\n```\n\nis located.\n\nNoMethodError (undefined method `[]' for nil:NilClass):\n  app/pdfs/base_recipe_export.rb:124:in`rescue in block in recipe_pdf'\n  app/pdfs/base_recipe_export.rb:120:in `block in recipe_pdf'\n  app/pdfs/base_recipe_export.rb:117:in`each'\n  app/pdfs/base_recipe_export.rb:117:in `recipe_pdf'\n  app/pdfs/base_recipe_export.rb:66:in`block (2 levels) in render_recipes'\n  app/pdfs/base_recipe_export.rb:64:in `block in render_recipes'\n  app/pdfs/base_recipe_export.rb:56:in`each'\n  app/pdfs/base_recipe_export.rb:56:in `render_recipes'\n  app/pdfs/base_recipe_export.rb:50:in`render_all_others'\n  app/pdfs/recipes_export_pdf.rb:22:in `initialize'\n  app/controllers/recipes_controller.rb:32:in`new'\n  app/controllers/recipes_controller.rb:32:in `block (2 levels) in pdf_export'\n  app/controllers/recipes_controller.rb:30:in`pdf_export'\n  config/initializers/quiet_assets.rb:7:in `call_with_quiet_assets'\n. ",
    "cpanderson": "Thanks. I will pull the latest version.\n. Thanks. I will pull the latest version.\n. ",
    "joemsak": "e: nvm I'm dumb.\n\n(server restart, durrrr)\n. Actually it appears if the image is wider than 160px or so (or if I set the width larger than that), THEN it adds the 2 pages. But if I hold my image width down to 150 (from its original 200) it looks fine and the 2 blank pages are gone\n. I guess it just gets easily confused about things it can't fit very well, and it's on me to make adjustments by eye?\n. I wanted to share with you what  my current workaround is:\n\nhttps://gist.github.com/e644ea58745bb31d661b\n. e: nvm I'm dumb.\n\n(server restart, durrrr)\n. Actually it appears if the image is wider than 160px or so (or if I set the width larger than that), THEN it adds the 2 pages. But if I hold my image width down to 150 (from its original 200) it looks fine and the 2 blank pages are gone\n. I guess it just gets easily confused about things it can't fit very well, and it's on me to make adjustments by eye?\n. I wanted to share with you what  my current workaround is:\n\nhttps://gist.github.com/e644ea58745bb31d661b\n. ",
    "dallas": "How about releasing a new RC so we don't have to rely on pointing to git for the gem (and I would hope a new RC which includes colspan would be more on track with what you hope to release for 1.0).\n. How about releasing a new RC so we don't have to rely on pointing to git for the gem (and I would hope a new RC which includes colspan would be more on track with what you hope to release for 1.0).\n. ",
    "holgum": "Another vote for a new gem release...\n. Another vote for a new gem release...\n. ",
    "ahfeel": "+1 for the gem :)\n. +1 for the gem :)\n. ",
    "stonehz": "+1 \n. +1 \n. ",
    "ajbraus": "+1\n. +1\n. ",
    "anu-vaid": "+1\n. +1\n. ",
    "johnnyshields": "+1 :+1:\n. :+1: \n. :+1: +1 for improving flexibility of tables (with sensible algorithms)\n. @dmeranda are you suggesting that if a given header cell has a rowspan of 2, it should automatically overlap the cell below it on each page? If so, I'd think that should be a separate feature / PR than this one...\n. I'm using @weimang's fork and functionally it looks good.\n\n@weimeng, its fine to raise a PR for a non-main branch like you did, that sort of implies that you want @vongrippen to review the code. It's also OK to raise a PR to the main branch as long as A) you've included the commits from the initial raiser and B) you make a reference to the original PR in the thread.\n. @bradediger how may I help to get this PR merged?\n. @weimeng I think that makes sense since you have some additional commits.\n. @weimang, great! @bradediger please close this PR and review #566.\n. @hbrandl I've tried your fixes for #502, #533, and #407, however I think I've come across one additional edge case. Please try this code with 3 levels of table nesting:\n\n``` ruby\n    data = [[{content: make_table([[make_table([['foo'*100]])],[make_table([['foo'*100]])]], column_widths: [bounds.width/2] *2), colspan: 12}]]\n    table(data, column_widths: [bounds.width / 12] * 12)\n```\n. @hbrandl try this:\n\n``` ruby\n    it \"should allow long strings in subtables when parent is width-constrained\" do\n      pdf = Prawn::Document.new\n      child_1 = pdf.make_table([['foo'*100]])\n      child_2 = pdf.make_table([['foo']])\n      pdf.table([[child_1], [child_2]], column_widths: [pdf.bounds.width/2]*2)\n    end\n```\n. @aelaa I have the same issue.\n\nIt happens when you have a table inside a table:\n\n``` ruby\nclass MyPdf < Prawn::Document\n  def initialize()\n    super()\n    table([[make_table([['foo']])]], cell_style: {overflow: :shrink_to_fit})\n  end\nend\n```\n\nHere's the stack trace:\n\n```\nblock in Prawn::Table::Cell::Subtable#style  () ruby/lib/ruby/gems/1.9.1/bundler/gems/prawn-d12cc77354ca/lib/prawn/table/cell.rb, line 235\nPrawn::Table::Cell::Subtable#style  () ruby/lib/ruby/gems/1.9.1/bundler/gems/prawn-d12cc77354ca/lib/prawn/table/cell.rb, line 235\nblock in Prawn::Table::Cells#style  () ruby/lib/ruby/gems/1.9.1/bundler/gems/prawn-d12cc77354ca/lib/prawn/table/cells.rb, line 148\nPrawn::Table::Cells#style  () ruby/lib/ruby/gems/1.9.1/bundler/gems/prawn-d12cc77354ca/lib/prawn/table/cells.rb, line 146\nPrawn::Table#cell_style=  () ruby/lib/ruby/gems/1.9.1/bundler/gems/prawn-d12cc77354ca/lib/prawn/table.rb, line 225\nblock in Prawn::Table#initialize  () ruby/lib/ruby/gems/1.9.1/bundler/gems/prawn-d12cc77354ca/lib/prawn/table.rb, line 131\n```\n. Just a note, if you need to sidestep the issue you can define this dummy method in `prawn/table/subtable.rb`:\n\n``` ruby\n        # Dummy method to work around https://github.com/prawnpdf/prawn/issues/515\n        #\n        def overflow=(value)\n        end\n```\n. @bradediger please consider adding my fix above unless there's a more elegant way...\n. @bradediger thanks!\n. Hmmm I've restructured my code so that I don't need this one anymore. Won't be able to raise anything immediately but will keep it in mind next time I'm touching my Prawn-related code.\n. d'oh this is done by the \"position\" attribute. should have RTFM...\n. @hbrandl I second that splitting is best.\n\n(Clipping could be a monkey patch if someone wants to paste it in this thread, but don't think it belongs in the master repo of Prawn)\n. Think we should revisit this logic. Prawn supports only a subset of full HTML so this sort of thing makes a lot of sense to me.\n\nIf not, we should make a clear `Prawn.escape` method which will format non-HTML text for Prawn HTML\n. I've raised PR #889 to expose `escape` and `unescape`\n. +1 for this. Using Prawn in a UTF-8 char environment and this issue is causing random breakage in production. Thank you all!\n. committed workaround here: #714\n. @sandal, that makes sense, was not aware of that option. (It seems slightly counter-intuitive to start with a page created by default given the declarative nature of Prawn, but not a big problem.) Will give it a try!\n\nBy the way, thanks for the recent blog post, glad to hear there's work being done to get Prawn to 1.0\n. Got it, makes sense.\n. Was getting \"git did not exit cleanly (exit code 128)\u201d on Tortoise Git. Thank for merging!\n. In some cases I get the opposite error (UTF-8 regexp with ASCII-8BIT string)\n. @sandal, thank you. Looks like #603 is the main problem I'm having.\n. @sandal to summarize:\n1) For international char-based docs, it recommend to set `font` and to **not** set `fallback_font`. Doing so avoids this issue.\n2) `fallback_font` is only intended in cases where you intend to use the PDF built-in fonts as a primary.\n3) regardless of 1 and 2 we should still fix this issue.\n\ncorrect?\n. I've verified that `pdf.font` fixes the issue\n. No issue since I started using `pdf.font` (thanks for that!) One request--can we make sure that the behavior is documented?\n. @practicingruby I'd like to revisit this issue--is it still open? My app now needs to support Korean, Japanese, and Thai and I'd like to be able to mix different fonts in Prawn for each with fallbacks.\r\n\r\n(An alternative is that I could use a font editor to combine the glyphs from N fonts into one master font, but that's a considerable pain to work with.). @pointlessone ?. Hmm... I've worked around this issue by combining fonts with FontForge, so I don't think I'll be able to work on a fix in Prawn.. FYI here's my code for anyone looking for a similar workaround\r\nhttps://github.com/kkvesper/unicode-font\r\n. Rebase + tests passed, please merge. @pointlessone why not just squash commits with GH?. @pointlessone please merge. +1 :+1:\n. :+1: \n. :+1: +1 for improving flexibility of tables (with sensible algorithms)\n. @dmeranda are you suggesting that if a given header cell has a rowspan of 2, it should automatically overlap the cell below it on each page? If so, I'd think that should be a separate feature / PR than this one...\n. I'm using @weimang's fork and functionally it looks good.\n\n@weimeng, its fine to raise a PR for a non-main branch like you did, that sort of implies that you want @vongrippen to review the code. It's also OK to raise a PR to the main branch as long as A) you've included the commits from the initial raiser and B) you make a reference to the original PR in the thread.\n. @bradediger how may I help to get this PR merged?\n. @weimeng I think that makes sense since you have some additional commits.\n. @weimang, great! @bradediger please close this PR and review #566.\n. @hbrandl I've tried your fixes for #502, #533, and #407, however I think I've come across one additional edge case. Please try this code with 3 levels of table nesting:\n\n``` ruby\n    data = [[{content: make_table([[make_table([['foo'*100]])],[make_table([['foo'*100]])]], column_widths: [bounds.width/2] *2), colspan: 12}]]\n    table(data, column_widths: [bounds.width / 12] * 12)\n```\n. @hbrandl try this:\n\n``` ruby\n    it \"should allow long strings in subtables when parent is width-constrained\" do\n      pdf = Prawn::Document.new\n      child_1 = pdf.make_table([['foo'*100]])\n      child_2 = pdf.make_table([['foo']])\n      pdf.table([[child_1], [child_2]], column_widths: [pdf.bounds.width/2]*2)\n    end\n```\n. @aelaa I have the same issue.\n\nIt happens when you have a table inside a table:\n\n``` ruby\nclass MyPdf < Prawn::Document\n  def initialize()\n    super()\n    table([[make_table([['foo']])]], cell_style: {overflow: :shrink_to_fit})\n  end\nend\n```\n\nHere's the stack trace:\n\n```\nblock in Prawn::Table::Cell::Subtable#style  () ruby/lib/ruby/gems/1.9.1/bundler/gems/prawn-d12cc77354ca/lib/prawn/table/cell.rb, line 235\nPrawn::Table::Cell::Subtable#style  () ruby/lib/ruby/gems/1.9.1/bundler/gems/prawn-d12cc77354ca/lib/prawn/table/cell.rb, line 235\nblock in Prawn::Table::Cells#style  () ruby/lib/ruby/gems/1.9.1/bundler/gems/prawn-d12cc77354ca/lib/prawn/table/cells.rb, line 148\nPrawn::Table::Cells#style  () ruby/lib/ruby/gems/1.9.1/bundler/gems/prawn-d12cc77354ca/lib/prawn/table/cells.rb, line 146\nPrawn::Table#cell_style=  () ruby/lib/ruby/gems/1.9.1/bundler/gems/prawn-d12cc77354ca/lib/prawn/table.rb, line 225\nblock in Prawn::Table#initialize  () ruby/lib/ruby/gems/1.9.1/bundler/gems/prawn-d12cc77354ca/lib/prawn/table.rb, line 131\n```\n. Just a note, if you need to sidestep the issue you can define this dummy method in `prawn/table/subtable.rb`:\n\n``` ruby\n        # Dummy method to work around https://github.com/prawnpdf/prawn/issues/515\n        #\n        def overflow=(value)\n        end\n```\n. @bradediger please consider adding my fix above unless there's a more elegant way...\n. @bradediger thanks!\n. Hmmm I've restructured my code so that I don't need this one anymore. Won't be able to raise anything immediately but will keep it in mind next time I'm touching my Prawn-related code.\n. d'oh this is done by the \"position\" attribute. should have RTFM...\n. @hbrandl I second that splitting is best.\n\n(Clipping could be a monkey patch if someone wants to paste it in this thread, but don't think it belongs in the master repo of Prawn)\n. Think we should revisit this logic. Prawn supports only a subset of full HTML so this sort of thing makes a lot of sense to me.\n\nIf not, we should make a clear `Prawn.escape` method which will format non-HTML text for Prawn HTML\n. I've raised PR #889 to expose `escape` and `unescape`\n. +1 for this. Using Prawn in a UTF-8 char environment and this issue is causing random breakage in production. Thank you all!\n. committed workaround here: #714\n. @sandal, that makes sense, was not aware of that option. (It seems slightly counter-intuitive to start with a page created by default given the declarative nature of Prawn, but not a big problem.) Will give it a try!\n\nBy the way, thanks for the recent blog post, glad to hear there's work being done to get Prawn to 1.0\n. Got it, makes sense.\n. Was getting \"git did not exit cleanly (exit code 128)\u201d on Tortoise Git. Thank for merging!\n. In some cases I get the opposite error (UTF-8 regexp with ASCII-8BIT string)\n. @sandal, thank you. Looks like #603 is the main problem I'm having.\n. @sandal to summarize:\n1) For international char-based docs, it recommend to set `font` and to **not** set `fallback_font`. Doing so avoids this issue.\n2) `fallback_font` is only intended in cases where you intend to use the PDF built-in fonts as a primary.\n3) regardless of 1 and 2 we should still fix this issue.\n\ncorrect?\n. I've verified that `pdf.font` fixes the issue\n. No issue since I started using `pdf.font` (thanks for that!) One request--can we make sure that the behavior is documented?\n. @practicingruby I'd like to revisit this issue--is it still open? My app now needs to support Korean, Japanese, and Thai and I'd like to be able to mix different fonts in Prawn for each with fallbacks.\r\n\r\n(An alternative is that I could use a font editor to combine the glyphs from N fonts into one master font, but that's a considerable pain to work with.). @pointlessone ?. Hmm... I've worked around this issue by combining fonts with FontForge, so I don't think I'll be able to work on a fix in Prawn.. FYI here's my code for anyone looking for a similar workaround\r\nhttps://github.com/kkvesper/unicode-font\r\n. Rebase + tests passed, please merge. @pointlessone why not just squash commits with GH?. @pointlessone please merge. ",
    "farlin": "+1\n. +1\n. ",
    "jo-m": "+1\n. +1\n. ",
    "Cutta": "+1\n. +1\n. ",
    "evgenyneu": "I was wrong. I thought this bug was in Adobe Reader, but in fact, it was in Google Chrome browser. I though Chrome was using Adobe Reader extension to display PDFs, but it actually renders it as HTML. And does it incorrectly. \n. Yes, it is fixed in master. Thank you so much! When do you plan to release the gem?\n. Yes, the 1.0.0.rc1 fixes the issue as well. Thank you, you are so fast and helpful.\n. @mopx that's cool, thank you. The only problem in my case is that I do not deliberately create pages. I just output text and images and pages are added automatically. Is there a way to tell Prawn to use the PDF as a template each time a new page needs to be added?\n. I was wrong. I thought this bug was in Adobe Reader, but in fact, it was in Google Chrome browser. I though Chrome was using Adobe Reader extension to display PDFs, but it actually renders it as HTML. And does it incorrectly. \n. Yes, it is fixed in master. Thank you so much! When do you plan to release the gem?\n. Yes, the 1.0.0.rc1 fixes the issue as well. Thank you, you are so fast and helpful.\n. @mopx that's cool, thank you. The only problem in my case is that I do not deliberately create pages. I just output text and images and pages are added automatically. Is there a way to tell Prawn to use the PDF as a template each time a new page needs to be added?\n. ",
    "e2": "Could you set binmode on the io object for images, like so:\n\n```\nfile.binmode if file.respond_to?(:binmode)\n```\n\nso:\n\n```\nimage open('foo.jpg')\n```\n\nworks?\n\nDetails:\n\n``` ruby\n    def image(file, options={})\n      Prawn.verify_options [:at, :position, :vposition, :height,\n                            :width, :scale, :fit], options\n\n      file.binmode if file.respond_to?(:binmode)\n\n      if file.respond_to?(:read)\n        image_content = file.read\n      else\n        raise ArgumentError, \"#{file} not found\" unless File.file?(file)\n        image_content = File.binread(file)\n      end\n```\n\nThe cause of the problem is that image_content returns the wrong size when file is opened as UTF-8.\nThat size is saved into the PDF and it makes everything else choke on that.\n. Could you set binmode on the io object for images, like so:\n\n```\nfile.binmode if file.respond_to?(:binmode)\n```\n\nso:\n\n```\nimage open('foo.jpg')\n```\n\nworks?\n\nDetails:\n\n``` ruby\n    def image(file, options={})\n      Prawn.verify_options [:at, :position, :vposition, :height,\n                            :width, :scale, :fit], options\n\n      file.binmode if file.respond_to?(:binmode)\n\n      if file.respond_to?(:read)\n        image_content = file.read\n      else\n        raise ArgumentError, \"#{file} not found\" unless File.file?(file)\n        image_content = File.binread(file)\n      end\n```\n\nThe cause of the problem is that image_content returns the wrong size when file is opened as UTF-8.\nThat size is saved into the PDF and it makes everything else choke on that.\n. ",
    "rylwin": "This appears to be fixed by a recent commit: 2d40e4d7\n. Also, if you don't want to run on edge but you need this fixed, I developed this workaround before realizing the new commit fixes this problem. This workaround hasn't been thoroughly tested, but seemed to work for me. You could monkeypatch the finalize method to do this:\n\n``` ruby\n      def finalize\n        if dictionary.data[:Contents].is_a?(Array)\n          # \"flatten\" streams in Contents\n          new_contents = []\n          dictionary.data[:Contents].each do |stream|\n            if stream.stream\n              new_contents << stream\n            else\n              stream.data.each do |sub|\n                new_contents << sub \n              end \n            end \n          end \n\n          dictionary.data[:Contents] = new_contents\n\n          dictionary.data[:Contents].each do |stream|\n            stream.compress_stream if document.compression_enabled?\n            stream.data[:Length] = stream.stream.size\n          end \n        else\n          content.compress_stream if document.compression_enabled?\n          content.data[:Length] = content.stream.size\n        end \n      end \n```\n\nThe issue for me was that one of the streams in [:Contents] did not contain a stream itself, but it's data contained two nested streams. My solution is to \"flatten\" the streams in [:Contents] so that none of the streams contain other streams. Note that I only go one level deep, as that was sufficient for my template. Not sure if it's possible for streams to be nested any deeper.\n. After looking into this a bit more I've noticed a couple of things:\n- 2d40e4d - this commit (perhaps one before it) causes some template pages to be blank when I render the PDF. It gives the same result as when I use the following monkeypatched 0.12.0 #finalize:\n\n``` ruby\n      def finalize\n        if dictionary.data[:Contents].is_a?(Array)\n          dictionary.data[:Contents].each do |stream|\n            stream.compress_stream if document.compression_enabled?\n            stream.data[:Length] = stream.stream.size if stream.stream\n          end \n        else\n          content.compress_stream if document.compression_enabled?\n          content.data[:Length] = content.stream.size\n        end \n      end \n```\n- The monkey patch I provided in my [earlier comment ](https://github.com/prawnpdf/prawn/issues/340#issuecomment-12664555) leads to some strange placement of the text I am overlaying on top of the template\n\nUnfortunately, my knowledge of PDFs is limited. Any ideas what might be going on with these issues / possible avenues to find a solution? Also, should I open another issue related to 2d40e4d or does this issue cover it since it's all about certain templates?\n. I've been spending a bit more time looking into the issue. I guess the root cause is related to ObjectStore.load_object_graph ?\n. YMMV but I've monkeypatched a solution that's working for me:\n\n``` ruby\nmodule Prawn\n  class Table\n    class Cell\n      class Text < Cell\n        def spanned_content_width\n          count = @content.count('-')\n          single_hyphen_adjustment =\n            (styled_width_of_single_character - styled_width_of('-'))/2.0\n          adj = count * single_hyphen_adjustment\n          super + adj\n        end\n      end\n    end\n  end\nend\n```\n\nI'm generating tables with content at 9pt font size. At that font size, this adds 2pts to the cell text width (`spanned_content_width`) for each hyphen. Not sure the calculation I'm using will actually scale well to other font sizes.\n. This appears to be fixed by a recent commit: 2d40e4d7\n. Also, if you don't want to run on edge but you need this fixed, I developed this workaround before realizing the new commit fixes this problem. This workaround hasn't been thoroughly tested, but seemed to work for me. You could monkeypatch the finalize method to do this:\n\n``` ruby\n      def finalize\n        if dictionary.data[:Contents].is_a?(Array)\n          # \"flatten\" streams in Contents\n          new_contents = []\n          dictionary.data[:Contents].each do |stream|\n            if stream.stream\n              new_contents << stream\n            else\n              stream.data.each do |sub|\n                new_contents << sub \n              end \n            end \n          end \n\n          dictionary.data[:Contents] = new_contents\n\n          dictionary.data[:Contents].each do |stream|\n            stream.compress_stream if document.compression_enabled?\n            stream.data[:Length] = stream.stream.size\n          end \n        else\n          content.compress_stream if document.compression_enabled?\n          content.data[:Length] = content.stream.size\n        end \n      end \n```\n\nThe issue for me was that one of the streams in [:Contents] did not contain a stream itself, but it's data contained two nested streams. My solution is to \"flatten\" the streams in [:Contents] so that none of the streams contain other streams. Note that I only go one level deep, as that was sufficient for my template. Not sure if it's possible for streams to be nested any deeper.\n. After looking into this a bit more I've noticed a couple of things:\n- 2d40e4d - this commit (perhaps one before it) causes some template pages to be blank when I render the PDF. It gives the same result as when I use the following monkeypatched 0.12.0 #finalize:\n\n``` ruby\n      def finalize\n        if dictionary.data[:Contents].is_a?(Array)\n          dictionary.data[:Contents].each do |stream|\n            stream.compress_stream if document.compression_enabled?\n            stream.data[:Length] = stream.stream.size if stream.stream\n          end \n        else\n          content.compress_stream if document.compression_enabled?\n          content.data[:Length] = content.stream.size\n        end \n      end \n```\n- The monkey patch I provided in my [earlier comment ](https://github.com/prawnpdf/prawn/issues/340#issuecomment-12664555) leads to some strange placement of the text I am overlaying on top of the template\n\nUnfortunately, my knowledge of PDFs is limited. Any ideas what might be going on with these issues / possible avenues to find a solution? Also, should I open another issue related to 2d40e4d or does this issue cover it since it's all about certain templates?\n. I've been spending a bit more time looking into the issue. I guess the root cause is related to ObjectStore.load_object_graph ?\n. YMMV but I've monkeypatched a solution that's working for me:\n\n``` ruby\nmodule Prawn\n  class Table\n    class Cell\n      class Text < Cell\n        def spanned_content_width\n          count = @content.count('-')\n          single_hyphen_adjustment =\n            (styled_width_of_single_character - styled_width_of('-'))/2.0\n          adj = count * single_hyphen_adjustment\n          super + adj\n        end\n      end\n    end\n  end\nend\n```\n\nI'm generating tables with content at 9pt font size. At that font size, this adds 2pts to the cell text width (`spanned_content_width`) for each hyphen. Not sure the calculation I'm using will actually scale well to other font sizes.\n. ",
    "onknows": "Thanks! Works like a charm!\n. Thanks! Works like a charm!\n. ",
    "crazymykl": "I find this functionality useful, and have code that adds support for this to inline formatting. If this gets merged, I'll open a PR to add the inline support.\n. If you need a use case, this could make generating portfolios much easier,  and if they were linkable a la #342, it would be massively convenient.\n. Erk, those tests weren't there a year ago :tongue: . Will fix.\n. :+1: \n. A lot of these would read better as HEREDOCs.\n. As a workaround, use local variables, which will still be visible in the eval'd scope.\n. @jessedoyle Yes, but if I then change to using an accessor method with more logic in it, I need to find/replace away the `@` all over the file.\n. Fix rubocop offenses, then this LGTM.\n\n(I think the \"spaces around `{` and `}` are good for when they delimit blocks, but not for simple hashes, but the styleguide predates me.)\n. I thought having a commit bit made me a maintainer. I guess I was mistaken.\n. I find this functionality useful, and have code that adds support for this to inline formatting. If this gets merged, I'll open a PR to add the inline support.\n. If you need a use case, this could make generating portfolios much easier,  and if they were linkable a la #342, it would be massively convenient.\n. Erk, those tests weren't there a year ago :tongue: . Will fix.\n. :+1: \n. A lot of these would read better as HEREDOCs.\n. As a workaround, use local variables, which will still be visible in the eval'd scope.\n. @jessedoyle Yes, but if I then change to using an accessor method with more logic in it, I need to find/replace away the `@` all over the file.\n. Fix rubocop offenses, then this LGTM.\n\n(I think the \"spaces around `{` and `}` are good for when they delimit blocks, but not for simple hashes, but the styleguide predates me.)\n. I thought having a commit bit made me a maintainer. I guess I was mistaken.\n. ",
    "kliffy": "will this ever be merged? I would definitely like to make use of it\n. will this ever be merged? I would definitely like to make use of it\n. ",
    "Saidbek": "everything is in UTF-8 encoding, english(latin) works fine, i've got troubles with russian(cyrilic) letters \nwhat do you mean exactly by embedding TTF font style ? \ndo you mean smth like this ? \n\n@font-face {\n    font-family: \"....\";\n    src: url(....ttf);\n}\n. ok, thanks i've resolved that problem, sorry for late response\n. having the same issue, images are shown just on the left side, using\n\n```\ncolumn_box([0, cursor], columns: 2, width: bounds.width, reflow_margins: true) do\n  @conclusion.assets.each do |f|\n    image f.picture.path, width: 260, height: 170\n    move_down 10\n  end\nend\n```\n. everything is in UTF-8 encoding, english(latin) works fine, i've got troubles with russian(cyrilic) letters \nwhat do you mean exactly by embedding TTF font style ? \ndo you mean smth like this ? \n\n@font-face {\n    font-family: \"....\";\n    src: url(....ttf);\n}\n. ok, thanks i've resolved that problem, sorry for late response\n. having the same issue, images are shown just on the left side, using\n\n```\ncolumn_box([0, cursor], columns: 2, width: bounds.width, reflow_margins: true) do\n  @conclusion.assets.each do |f|\n    image f.picture.path, width: 260, height: 170\n    move_down 10\n  end\nend\n```\n. ",
    "mentalbrew": "As someone who is hoping to use Prawn in JRuby on 1.9 I second this. Thanks.\n. As someone who is hoping to use Prawn in JRuby on 1.9 I second this. Thanks.\n. ",
    "fbernier": "Same here ... having an active maintainer would be great since this project is really useful. Not blaming anyone, I totally understand lack of time ad other interests.\n. Same here ... having an active maintainer would be great since this project is really useful. Not blaming anyone, I totally understand lack of time ad other interests.\n. ",
    "mkastner": "Yob,\n\nsorry getting back to your response after such a long time. What I am saying is, that the hyphen character _is_ being rendered, if the hyphenated word is printed in the last line of a column. Obviously, that shouldn't happen.\n\nI've checked on ruby 1.8.7 and 2.0.0 \u2013 with prawn 1.0.0 rc1 and prawn 1.0.0 rc2.\n\nHere's my short code to reproduce the problem:\n\nhyphentest.rb\n\n``` ruby\nrequire 'prawn'\n\nclass Hyphen < Prawn::Document\n\n  def initialize\n    super(:margin => [10,10,10,10], :page_size => 'A4')\n    column_box([0, cursor], columns: 2, width: bounds.width) do\n      text \"This is a test where the very important Hy#{Prawn::Text::SHY}phe#{Prawn::Text::SHY}na#{Prawn::Text::SHY}tion works fine here, but which contains Hy#{Prawn::Text::SHY}phe#{Prawn::Text::SHY}na#{Prawn::Text::SHY}tion\\n in the last line of the paragraph Hy#{Prawn::Text::SHY}phe#{Prawn::Text::SHY}na#{Prawn::Text::SHY}ted\\n\"\n      bounds.move_past_bottom\n      text \"second column\"\n    end\n  end\n\nend\n\nHyphen.new.render_file('hyphentest.pdf')\n```\n\n![hyphentest](https://f.cloud.github.com/assets/287486/236538/e52dc718-87f1-11e2-81de-048a488eb147.png)\n. Yob,\n\nsorry getting back to your response after such a long time. What I am saying is, that the hyphen character _is_ being rendered, if the hyphenated word is printed in the last line of a column. Obviously, that shouldn't happen.\n\nI've checked on ruby 1.8.7 and 2.0.0 \u2013 with prawn 1.0.0 rc1 and prawn 1.0.0 rc2.\n\nHere's my short code to reproduce the problem:\n\nhyphentest.rb\n\n``` ruby\nrequire 'prawn'\n\nclass Hyphen < Prawn::Document\n\n  def initialize\n    super(:margin => [10,10,10,10], :page_size => 'A4')\n    column_box([0, cursor], columns: 2, width: bounds.width) do\n      text \"This is a test where the very important Hy#{Prawn::Text::SHY}phe#{Prawn::Text::SHY}na#{Prawn::Text::SHY}tion works fine here, but which contains Hy#{Prawn::Text::SHY}phe#{Prawn::Text::SHY}na#{Prawn::Text::SHY}tion\\n in the last line of the paragraph Hy#{Prawn::Text::SHY}phe#{Prawn::Text::SHY}na#{Prawn::Text::SHY}ted\\n\"\n      bounds.move_past_bottom\n      text \"second column\"\n    end\n  end\n\nend\n\nHyphen.new.render_file('hyphentest.pdf')\n```\n\n![hyphentest](https://f.cloud.github.com/assets/287486/236538/e52dc718-87f1-11e2-81de-048a488eb147.png)\n. ",
    "benhell": "I don't know if this is a variant of the same problem, but consider the following:  \n\n``` ruby\nclass Hyphen < Prawn::Document\n  def initialize\n    super\n    content =  \"blah \" * 20 + \"Hy#{Prawn::Text::SHY}phe#{Prawn::Text::SHY}na#{Prawn::Text::SHY}tion\"\n    formatted_text([{text: content}, {text: content}])\n  end\nend\n```\n\nIn this one, the word \"Hyphenation\" from the first hash incorrectly shows all hyphens, but \"Hyphenation\" from the second hash does not.  I mention it only because this does not involve a carriage return.  \n. I suspect it is the same issue.  My guess is \"exclude_trailing_white_space? only gets set for the last hash in a formatted_text array (probably because trailing whitespace is only an issue at the end of the paragraph).   No longer skipping soft-hyphen processing when :exclude_trailing_white_space? is false ought to solve this problem too.  \n. I don't know if this is a variant of the same problem, but consider the following:  \n\n``` ruby\nclass Hyphen < Prawn::Document\n  def initialize\n    super\n    content =  \"blah \" * 20 + \"Hy#{Prawn::Text::SHY}phe#{Prawn::Text::SHY}na#{Prawn::Text::SHY}tion\"\n    formatted_text([{text: content}, {text: content}])\n  end\nend\n```\n\nIn this one, the word \"Hyphenation\" from the first hash incorrectly shows all hyphens, but \"Hyphenation\" from the second hash does not.  I mention it only because this does not involve a carriage return.  \n. I suspect it is the same issue.  My guess is \"exclude_trailing_white_space? only gets set for the last hash in a formatted_text array (probably because trailing whitespace is only an issue at the end of the paragraph).   No longer skipping soft-hyphen processing when :exclude_trailing_white_space? is false ought to solve this problem too.  \n. ",
    "no-dashes": "Is there any hope that this issue may be addressed soonish?\n. @sandal: Well... @Mario1988 tried to fix the problem we had with this bug. So yeah, I confirm it fixes the bug for us.\n. Is there any hope that this issue may be addressed soonish?\n. @sandal: Well... @Mario1988 tried to fix the problem we had with this bug. So yeah, I confirm it fixes the bug for us.\n. ",
    "vaixellx": "I'll try it, Very thanks bradediger :)\n. I'll try it, Very thanks bradediger :)\n. ",
    "shenoudab": "kindly, where to place my fonts for prawn use in the rails project.\nas i also try to use Prawn::DATADIR i got exception, and where Prawn::DATADIR points\n\nThanks.\n. i try to set font families as mentioned as below :\n\nfont_families[\"GE_SS_Two_Medium\"] = {\n      :normal => { :file => \"#{Rails.root}/app/assets/fonts/GE_SS_Two_Medium.ttf\", :font => \"GE_SS_Two_Medium\" },\n    }\nfont \"GE_SS_Two_Medium\"\n\nbut i got error \"is not a known font.\"\n. Dears,\n\n i also try to do the following :\n\nfont_families = { :normal => { :file => \"#{Rails.root}/app/assets/fonts/GE_SS_Two_Medium.ttf\", :font => \"GESSTwoMedium\" }}\nfont \"GESSTwoMedium\"\n\nand i got error Prawn::Errors::UnknownFont \"GESSTwoMedium is not a known font.\"\n. I got GE_SS_Two_Medium.otf is not a known font.\nwith the above font families update.\n\nAlso, when specify the font file in the font method ..\ni found the text rendered as boxes\n\nwhen using a font from the already included fonts \"DejaVuSans\".\nthe words rendered as characters .. just separate characters\n\nPlease, help !  \n. kindly, where to place my fonts for prawn use in the rails project.\nas i also try to use Prawn::DATADIR i got exception, and where Prawn::DATADIR points\n\nThanks.\n. i try to set font families as mentioned as below :\n\nfont_families[\"GE_SS_Two_Medium\"] = {\n      :normal => { :file => \"#{Rails.root}/app/assets/fonts/GE_SS_Two_Medium.ttf\", :font => \"GE_SS_Two_Medium\" },\n    }\nfont \"GE_SS_Two_Medium\"\n\nbut i got error \"is not a known font.\"\n. Dears,\n\n i also try to do the following :\n\nfont_families = { :normal => { :file => \"#{Rails.root}/app/assets/fonts/GE_SS_Two_Medium.ttf\", :font => \"GESSTwoMedium\" }}\nfont \"GESSTwoMedium\"\n\nand i got error Prawn::Errors::UnknownFont \"GESSTwoMedium is not a known font.\"\n. I got GE_SS_Two_Medium.otf is not a known font.\nwith the above font families update.\n\nAlso, when specify the font file in the font method ..\ni found the text rendered as boxes\n\nwhen using a font from the already included fonts \"DejaVuSans\".\nthe words rendered as characters .. just separate characters\n\nPlease, help !  \n. ",
    "tayeb83": "Hello guys,\n\ni use prawn to print arabic on pdf, however, arabic letters are seprated in the pdf documents, can you help me ?\n. Hello Path\u00e9,\n\n  I used wisepdf (https://github.com/igor-alexandrov/wisepdf) to generate\narabic pdf on rails, we use it, igor (the developer of the wisepdf) make\nfor me a recent update to print arabic.\n\ntayeb.\n\n2012/12/7 Papa Path\u00e9 SENE notifications@github.com\n\n> Hello guys i had the same issue arabic characters are separated.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/prawnpdf/prawn/issues/349#issuecomment-11114679.\n. Hello guys,\n\ni use prawn to print arabic on pdf, however, arabic letters are seprated in the pdf documents, can you help me ?\n. Hello Path\u00e9,\n\n  I used wisepdf (https://github.com/igor-alexandrov/wisepdf) to generate\narabic pdf on rails, we use it, igor (the developer of the wisepdf) make\nfor me a recent update to print arabic.\n\ntayeb.\n\n2012/12/7 Papa Path\u00e9 SENE notifications@github.com\n\n> Hello guys i had the same issue arabic characters are separated.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/prawnpdf/prawn/issues/349#issuecomment-11114679.\n. ",
    "PapePathe": "Hello guys i had the same issue arabic characters are separated.\n. Thanks @anasser for the contribution.\n. Hello guys i had the same issue arabic characters are separated.\n. Thanks @anasser for the contribution.\n. ",
    "ashrafuzzaman": "I can generate Arabic pdf in prawn (1.0.0.rc2) using the following code,\n\n``` ruby\nif I18n.locale == :ar\n  font_name = 'artro.ttf'\n  self.pdf.font_families.update(\n      \"arabic\" => {:normal => Rails.root.join('app', 'assets', 'fonts', font_name),\n                   :bold => Rails.root.join('app', 'assets', 'fonts', font_name)}\n  )\n  pdf.font \"arabic\"\n  pdf.text_direction = :rtl\nend\n```\n\nBut the issue is that I have to set RTL as the text direction to show proper arabic. And if I have arabic and english mixed up then the english turns rtl as well. Guys do you have a clue how can I fix it?\n. I can generate Arabic pdf in prawn (1.0.0.rc2) using the following code,\n\n``` ruby\nif I18n.locale == :ar\n  font_name = 'artro.ttf'\n  self.pdf.font_families.update(\n      \"arabic\" => {:normal => Rails.root.join('app', 'assets', 'fonts', font_name),\n                   :bold => Rails.root.join('app', 'assets', 'fonts', font_name)}\n  )\n  pdf.font \"arabic\"\n  pdf.text_direction = :rtl\nend\n```\n\nBut the issue is that I have to set RTL as the text direction to show proper arabic. And if I have arabic and english mixed up then the english turns rtl as well. Guys do you have a clue how can I fix it?\n. ",
    "mhmoudgmal": "what if i have to mix between arabic and english in the same pdf table which is generated dynamically and had to put the text direction to  [ :rtl ] so it messed the table contents !\n. what if i have to mix between arabic and english in the same pdf table which is generated dynamically and had to put the text direction to  [ :rtl ] so it messed the table contents !\n. ",
    "anasser": "https://github.com/staii/arabic-letter-connector\n. https://github.com/staii/arabic-letter-connector\n. ",
    "jcoleman": "It'd also be nice to support this on text boxes in general, but I think that that's legitimately a separate feature. This one (at least in my mind) is more obvious as it seems more like a bug (or at least unexpected behavior) than a new feature.\n. Could we perhaps add this as a different option then (like say, `:horizontal_shrink_to_fit`?)\n. @yob: I've updated the patch per @daniel-nelson's suggestion. It doesn't appear that I can re-open the pull request, so I'm going to open a new one and link back to this one.\n. Any update on getting this merged?\n. @sandal Your question about error suppression actually got me thinking: it looks like the original patch was slightly wrong. One of the tests I added didn't actually test correctly, so it was passing incorrectly. I've pushed updated code to resolve this, and I only suppress `CannotFit` errors when necessary (i.e., when we want to keep shrinking the font size.)\n\nThis PR adds documentation to the manual. Are you saying you need the manual to actually demonstrate it visually? It seems like just noting it should be rather explanatory since it's really just an extension to existing options.\n\nI can't reopen the PR, you'll need to do that.\n. @sandal I did a force push along with an amended commit, so the original commit is still the only commit, it's just been modified.\n. @sandal I restored the original commit so that you can see the entire history now as well as adding an additional commit to fix the method call typo.\n\nThe exception rescue should indeed rescue a specific exception class. For example:\n\n```\n 1.9.3-p194 :001 > class MyError < StandardError;end\n => nil \n1.9.3-p194 :002 > def test\n1.9.3-p194 :003?>   begin\n1.9.3-p194 :004 >       raise MyError.new\n1.9.3-p194 :005?>     rescue MyError\n1.9.3-p194 :006?>     5\n1.9.3-p194 :007?>     end\n1.9.3-p194 :008?>   end\n => nil \n1.9.3-p194 :009 > test\n => 5 \n1.9.3-p194 :010 > def test2\n1.9.3-p194 :011?>   begin\n1.9.3-p194 :012 >       raise StandardError.new\n1.9.3-p194 :013?>     rescue MyError\n1.9.3-p194 :014?>     5\n1.9.3-p194 :015?>     end\n1.9.3-p194 :016?>   end\n => nil \n1.9.3-p194 :017 > test2\nStandardError: StandardError\n    from (irb):12:in `test2'\n    from (irb):17\n    from /Users/jcoleman/.rvm/rubies/ruby-1.9.3-p194/bin/irb:16:in `<main>'\n```\n. Ah, I misunderstood what you were saying at first. Fix committed and pushed.\n. Awesome. Thanks!\n. It'd also be nice to support this on text boxes in general, but I think that that's legitimately a separate feature. This one (at least in my mind) is more obvious as it seems more like a bug (or at least unexpected behavior) than a new feature.\n. Could we perhaps add this as a different option then (like say, `:horizontal_shrink_to_fit`?)\n. @yob: I've updated the patch per @daniel-nelson's suggestion. It doesn't appear that I can re-open the pull request, so I'm going to open a new one and link back to this one.\n. Any update on getting this merged?\n. @sandal Your question about error suppression actually got me thinking: it looks like the original patch was slightly wrong. One of the tests I added didn't actually test correctly, so it was passing incorrectly. I've pushed updated code to resolve this, and I only suppress `CannotFit` errors when necessary (i.e., when we want to keep shrinking the font size.)\n\nThis PR adds documentation to the manual. Are you saying you need the manual to actually demonstrate it visually? It seems like just noting it should be rather explanatory since it's really just an extension to existing options.\n\nI can't reopen the PR, you'll need to do that.\n. @sandal I did a force push along with an amended commit, so the original commit is still the only commit, it's just been modified.\n. @sandal I restored the original commit so that you can see the entire history now as well as adding an additional commit to fix the method call typo.\n\nThe exception rescue should indeed rescue a specific exception class. For example:\n\n```\n 1.9.3-p194 :001 > class MyError < StandardError;end\n => nil \n1.9.3-p194 :002 > def test\n1.9.3-p194 :003?>   begin\n1.9.3-p194 :004 >       raise MyError.new\n1.9.3-p194 :005?>     rescue MyError\n1.9.3-p194 :006?>     5\n1.9.3-p194 :007?>     end\n1.9.3-p194 :008?>   end\n => nil \n1.9.3-p194 :009 > test\n => 5 \n1.9.3-p194 :010 > def test2\n1.9.3-p194 :011?>   begin\n1.9.3-p194 :012 >       raise StandardError.new\n1.9.3-p194 :013?>     rescue MyError\n1.9.3-p194 :014?>     5\n1.9.3-p194 :015?>     end\n1.9.3-p194 :016?>   end\n => nil \n1.9.3-p194 :017 > test2\nStandardError: StandardError\n    from (irb):12:in `test2'\n    from (irb):17\n    from /Users/jcoleman/.rvm/rubies/ruby-1.9.3-p194/bin/irb:16:in `<main>'\n```\n. Ah, I misunderstood what you were saying at first. Fix committed and pushed.\n. Awesome. Thanks!\n. ",
    "dookim": "where is  manual/manual/manual.rb?? in window ?\n. where is  manual/manual/manual.rb?? in window ?\n. ",
    "robzolkos": "What you are seeing in evince and Acrobat X is correct.  I have attached a screenshot of what is looks like when opened in Illustrator.   \n\n![Screen Shot 2012-12-11 at 4 34 44 PM](https://f.cloud.github.com/assets/290616/5170/b16eaf3c-4354-11e2-8ce5-07419d371d7b.png)\n. No. And still ocurrs.\n\nOn Tuesday, March 18, 2014, Gregory Brown notifications@github.com wrote:\n\n> Did we ever sort out what this issue was?\n> \n> ## \n> \n> Reply to this email directly or view it on GitHubhttps://github.com/prawnpdf/prawn/issues/359#issuecomment-37871527\n> .\n\n## \n\nthanks,\nRob\n. An example showing the issue is here: https://github.com/robzolkos/prawn-issue\n\nhello.pdf is the generated pdf.   Opening in Illustrator the colors are inverted.\n. What you are seeing in evince and Acrobat X is correct.  I have attached a screenshot of what is looks like when opened in Illustrator.   \n\n![Screen Shot 2012-12-11 at 4 34 44 PM](https://f.cloud.github.com/assets/290616/5170/b16eaf3c-4354-11e2-8ce5-07419d371d7b.png)\n. No. And still ocurrs.\n\nOn Tuesday, March 18, 2014, Gregory Brown notifications@github.com wrote:\n\n> Did we ever sort out what this issue was?\n> \n> ## \n> \n> Reply to this email directly or view it on GitHubhttps://github.com/prawnpdf/prawn/issues/359#issuecomment-37871527\n> .\n\n## \n\nthanks,\nRob\n. An example showing the issue is here: https://github.com/robzolkos/prawn-issue\n\nhello.pdf is the generated pdf.   Opening in Illustrator the colors are inverted.\n. ",
    "ghinda": "I'm seeing the exact same issue, but with completely different tools, so I don't think the issue is specifically related to prawn.\n\nI'm converting a RGB jpg to CMYK using imagemagick, then inserting the image in a PDF using the Node.js [pdfkit](https://github.com/devongovett/pdfkit) library. \n\nJust like on your end, the PDF looks ok in all PDF readers (evice, okular, acrobat, etc.), but the image colors are inverted when opened in Illustrator. \n\nHave you found any work-around?\n. Seems that, at least on my end, I've managed to find a work-around for the issue, by using the `-interlace` flag, when converting the image to CMYK with ImageMagick, making a progressive jpeg. \n. I'm seeing the exact same issue, but with completely different tools, so I don't think the issue is specifically related to prawn.\n\nI'm converting a RGB jpg to CMYK using imagemagick, then inserting the image in a PDF using the Node.js [pdfkit](https://github.com/devongovett/pdfkit) library. \n\nJust like on your end, the PDF looks ok in all PDF readers (evice, okular, acrobat, etc.), but the image colors are inverted when opened in Illustrator. \n\nHave you found any work-around?\n. Seems that, at least on my end, I've managed to find a work-around for the issue, by using the `-interlace` flag, when converting the image to CMYK with ImageMagick, making a progressive jpeg. \n. ",
    "Screwface": "Don't worry people, its simply that your RGB PDF is being automatically converted to CMYK witch creates that bug. Follow those steps and you should be OK.\n1. open your file (just like you did) in illustrator.\n2. delete the artwork (PDF) leaving the artwork size only\n3. File > Document Color Mode > RGB Color       *(remember?... your PDF is in RGB!)\n4. File > Place.... find you file on your computer.\n\nLike magic, your issue is no more !\n. Don't worry people, its simply that your RGB PDF is being automatically converted to CMYK witch creates that bug. Follow those steps and you should be OK.\n1. open your file (just like you did) in illustrator.\n2. delete the artwork (PDF) leaving the artwork size only\n3. File > Document Color Mode > RGB Color       *(remember?... your PDF is in RGB!)\n4. File > Place.... find you file on your computer.\n\nLike magic, your issue is no more !\n. ",
    "elsurudo": "@Screwface What if we want our PDF to be in CMYK, though?. I would propose to re-open this issue. I don't believe it is fixed, and the workaround is not a tenable one.\r\n\r\nIn short: When opening a prawn-generated CMYK PDF in illustrator with embedded JPGs that are also in CMYK, the embedded JPGs colors are inverted.. Ok. In case anyone else is interested, I used Ghostscript as a post-processing step with the following command as a workaround:\n\n`gs -o output.pdf -dNoOutputFonts -sDEVICE=pdfwrite input.pdf`\n\n> On Mar 30, 2016, at 12:34 AM, Gregory Brown notifications@github.com wrote:\n> \n> Sorry, I don't even know whether this is feasible and we don't track feature requests, only work-in-progress and bug reports.\n> \n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly or view it on GitHub https://github.com/prawnpdf/prawn/issues/950#issuecomment-203140352\n. I have two \"parts\" of the text, and two columns.\r\n\r\nIf the first part of the text is shorter than the first column, I want the second part of the text to start at the top of the second column.\r\n\r\nIf the first part of the text is longer than the first column, I want it to wrap to the second column, and I want the second part to start below the end of the first part.\r\n\r\nI wasn't sure how to accomplish this otherwise, but I was able to with the change I made.. @Screwface What if we want our PDF to be in CMYK, though?. I would propose to re-open this issue. I don't believe it is fixed, and the workaround is not a tenable one.\r\n\r\nIn short: When opening a prawn-generated CMYK PDF in illustrator with embedded JPGs that are also in CMYK, the embedded JPGs colors are inverted.. Ok. In case anyone else is interested, I used Ghostscript as a post-processing step with the following command as a workaround:\n\n`gs -o output.pdf -dNoOutputFonts -sDEVICE=pdfwrite input.pdf`\n\n> On Mar 30, 2016, at 12:34 AM, Gregory Brown notifications@github.com wrote:\n> \n> Sorry, I don't even know whether this is feasible and we don't track feature requests, only work-in-progress and bug reports.\n> \n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly or view it on GitHub https://github.com/prawnpdf/prawn/issues/950#issuecomment-203140352\n. I have two \"parts\" of the text, and two columns.\r\n\r\nIf the first part of the text is shorter than the first column, I want the second part of the text to start at the top of the second column.\r\n\r\nIf the first part of the text is longer than the first column, I want it to wrap to the second column, and I want the second part to start below the end of the first part.\r\n\r\nI wasn't sure how to accomplish this otherwise, but I was able to with the change I made.. ",
    "cymen": "I see the comment now at the top of lib/prawn/table.rb to set widths manually if the calculated width fails. So I'll go forward with that.\n. I see the comment now at the top of lib/prawn/table.rb to set widths manually if the calculated width fails. So I'll go forward with that.\n. ",
    "sos4nt": "Here's another one from within `referenced_objects` using the existing methods from `OutlineRoot` and `OutlineItem`:\n\nhttps://github.com/prawnpdf/prawn/pull/362\n. I can confirm this bug in [1.0.0.rc2](https://github.com/prawnpdf/prawn/tree/1.0.0.rc2). Repeated table headers seem to work fine in [1.0.0.rc1](https://github.com/prawnpdf/prawn/tree/1.0.0.rc1).\n. You're right, it seems to only affect `:colspan` headers:\n\n``` ruby\ndata = [[\"foo\",\"bar\"]] * 31\nheaders = [{:content => \"header\", :colspan => 2}]\npdf = Prawn::Document.new\npdf.table([headers] + data, :header => true) do\n  style row(0), :borders => [:bottom],\n    :background_color => \"DDDDDD\", :font_style => :bold\nend\n```\n\n![broken](https://f.cloud.github.com/assets/28232/237602/b10dcbea-8819-11e2-8750-9e7fef66667b.png)\n. :+1: \n. Here's another one from within `referenced_objects` using the existing methods from `OutlineRoot` and `OutlineItem`:\n\nhttps://github.com/prawnpdf/prawn/pull/362\n. I can confirm this bug in [1.0.0.rc2](https://github.com/prawnpdf/prawn/tree/1.0.0.rc2). Repeated table headers seem to work fine in [1.0.0.rc1](https://github.com/prawnpdf/prawn/tree/1.0.0.rc1).\n. You're right, it seems to only affect `:colspan` headers:\n\n``` ruby\ndata = [[\"foo\",\"bar\"]] * 31\nheaders = [{:content => \"header\", :colspan => 2}]\npdf = Prawn::Document.new\npdf.table([headers] + data, :header => true) do\n  style row(0), :borders => [:bottom],\n    :background_color => \"DDDDDD\", :font_style => :bold\nend\n```\n\n![broken](https://f.cloud.github.com/assets/28232/237602/b10dcbea-8819-11e2-8750-9e7fef66667b.png)\n. :+1: \n. ",
    "poori": "A quick update. I took the same pdf file and did the following, which worked without any issues.\n\n``` ruby\nPrawn::Document.generate(\"/Users/myusername/Desktop/test.pdf\", :skip_page_creation => true) do |pdf|\n\n   (1..15).each do |n|\n   #I just happened to know this pdf is 15 pages long...\n   pdf.start_new_page(:template => filename, :template_page => n)                  \n   end\nend\n```\n. A quick update. I took the same pdf file and did the following, which worked without any issues.\n\n``` ruby\nPrawn::Document.generate(\"/Users/myusername/Desktop/test.pdf\", :skip_page_creation => true) do |pdf|\n\n   (1..15).each do |n|\n   #I just happened to know this pdf is 15 pages long...\n   pdf.start_new_page(:template => filename, :template_page => n)                  \n   end\nend\n```\n. ",
    "joshjordan": "I'll second this, as I ran into it was well.\n\nThe workaround @poori posted can be improved  with the advice given by @boazsegev in this thread, wherein he determines the number of pages to loop through rather than hardcoding it: https://github.com/prawnpdf/prawn/issues/199\n\nIn fact, this issue appears to be a continuation of that one, except that it occurs when using `Document.new(template)` as opposed to `start_new_page(template)`\n\nAnother example document you can use for this case is the Prawn manual itself.\n\nI wonder how many people out there are generating documents with this method and are unaware that Adobe Reader users will choke on some of their PDFs.\n. Has anyone thought about the solution to this problem?\n\nWe just found that in our production environment, the workaround can consume over a hundred megabytes of memory for a single document. This is prohibitively expensive for scale.\n. Hi Jon. Thanks so much for your work on this. Unfortunately, I am still seeing \"There was a problem reading this document (14)\" in Acrobat Reader for generated PDFs. Please let me know if there's anything else I can do to help.\n. Sure thing. Unfortunately, most of the documents I work with are proprietary. I used to be able to reproduce this with the Prawn manual itself, but that is now throwing a NilClass error.\n\nI had a hard time finding a document outside my proprietary document store that failed using the gem as well as Prawn directly from the repo (kudos - many are fixed!). However, I did find one: https://www.dropbox.com/s/1qd6xv9htxkhm1b/Rails_for_Designers_-_Slides.pdf\n\nThis is unopenable using Acrobat Reader after generating it like so:\n\n`Prawn::Document.new(template: '/Users/jjordan/Dropbox/Rails_for_Designers_-_Slides.pdf').render_file('test.pdf')`\n. Jon, an early read shows that this is working very nicely and solves the\nproblem for the small set of documents I have on hand. Let me try this out\non a larger set tomorrow and I'll let you know how things go. Great work!\nYour expertise is much appreciated.\n. Jon, I tested this on a large set of documents that previously failed and am happy to report that they are all succeeding with your fix. Thanks again! Let me know if I can be of any assistance getting your work merged into prawn's master branch.\n. I'll second this, as I ran into it was well.\n\nThe workaround @poori posted can be improved  with the advice given by @boazsegev in this thread, wherein he determines the number of pages to loop through rather than hardcoding it: https://github.com/prawnpdf/prawn/issues/199\n\nIn fact, this issue appears to be a continuation of that one, except that it occurs when using `Document.new(template)` as opposed to `start_new_page(template)`\n\nAnother example document you can use for this case is the Prawn manual itself.\n\nI wonder how many people out there are generating documents with this method and are unaware that Adobe Reader users will choke on some of their PDFs.\n. Has anyone thought about the solution to this problem?\n\nWe just found that in our production environment, the workaround can consume over a hundred megabytes of memory for a single document. This is prohibitively expensive for scale.\n. Hi Jon. Thanks so much for your work on this. Unfortunately, I am still seeing \"There was a problem reading this document (14)\" in Acrobat Reader for generated PDFs. Please let me know if there's anything else I can do to help.\n. Sure thing. Unfortunately, most of the documents I work with are proprietary. I used to be able to reproduce this with the Prawn manual itself, but that is now throwing a NilClass error.\n\nI had a hard time finding a document outside my proprietary document store that failed using the gem as well as Prawn directly from the repo (kudos - many are fixed!). However, I did find one: https://www.dropbox.com/s/1qd6xv9htxkhm1b/Rails_for_Designers_-_Slides.pdf\n\nThis is unopenable using Acrobat Reader after generating it like so:\n\n`Prawn::Document.new(template: '/Users/jjordan/Dropbox/Rails_for_Designers_-_Slides.pdf').render_file('test.pdf')`\n. Jon, an early read shows that this is working very nicely and solves the\nproblem for the small set of documents I have on hand. Let me try this out\non a larger set tomorrow and I'll let you know how things go. Great work!\nYour expertise is much appreciated.\n. Jon, I tested this on a large set of documents that previously failed and am happy to report that they are all succeeding with your fix. Thanks again! Let me know if I can be of any assistance getting your work merged into prawn's master branch.\n. ",
    "calicoder": "im facing the same problem.  is there a solution?\n. im facing the same problem.  is there a solution?\n. ",
    "fillman": "Thanks. There's a hacky way, by cutting text with overflow => truncate. Ofcourse if you know the image height.\n. Thanks. There's a hacky way, by cutting text with overflow => truncate. Ofcourse if you know the image height.\n. ",
    "ollin": "We are trying to get images floating and aligning with gradle-asciidoctor using asciidoctor-gradle-plugin with asciidoctor and prawn 1.3.0. After a while sitting and searching we found this issue. We got the image into the pdf file but not the floating part. Could you reconsider this issue for review? cc @mojavelinux\n. Thanks for the quick response and this example. I understand that there is a lot to do. :)\n. We are trying to get images floating and aligning with gradle-asciidoctor using asciidoctor-gradle-plugin with asciidoctor and prawn 1.3.0. After a while sitting and searching we found this issue. We got the image into the pdf file but not the floating part. Could you reconsider this issue for review? cc @mojavelinux\n. Thanks for the quick response and this example. I understand that there is a lot to do. :)\n. ",
    "Yahkal": "you could try this: https://jsfiddle.net/tom613/4o1g03og/\n. you could try this: https://jsfiddle.net/tom613/4o1g03og/\n. ",
    "vizjerai": "See #369 for details\n. I have the same issue. I've got a table that has a lot of data and it'll automatically create a new page. But it'll call start_new_page without any options.\n\nhttps://github.com/prawnpdf/prawn/blob/master/lib/prawn/document/bounding_box.rb#L456-462\n\n``` ruby\ndef move_past_bottom\n  if @document.page_number == @document.page_count\n    @document.start_new_page\n  else\n    @document.go_to_page(@document.page_number + 1)\n  end\nend\n```\n\ndocument/column_box.rb has a similar problem but doesn't affect my issue.\n\nLooks like if this is the same issue that I'm having. this is a duplicate with #273\n. Suggestion by Aristata that I found in the google groups for a work around with a few modifications.\n\nhttps://groups.google.com/d/msg/prawn-ruby/d_h7_vd7Iss/P7lAGQsMwnMJ\n\nDefine a method start_new_page(options)\n\n``` ruby\ndef start_new_page(options={})\n  opts = options.reverse_merge({\n    :template => @path_to_template,\n    :template_page => @template_page\n  })\n super(opts)\nend\n```\n. :+1: \n. See #369 for details\n. I have the same issue. I've got a table that has a lot of data and it'll automatically create a new page. But it'll call start_new_page without any options.\n\nhttps://github.com/prawnpdf/prawn/blob/master/lib/prawn/document/bounding_box.rb#L456-462\n\n``` ruby\ndef move_past_bottom\n  if @document.page_number == @document.page_count\n    @document.start_new_page\n  else\n    @document.go_to_page(@document.page_number + 1)\n  end\nend\n```\n\ndocument/column_box.rb has a similar problem but doesn't affect my issue.\n\nLooks like if this is the same issue that I'm having. this is a duplicate with #273\n. Suggestion by Aristata that I found in the google groups for a work around with a few modifications.\n\nhttps://groups.google.com/d/msg/prawn-ruby/d_h7_vd7Iss/P7lAGQsMwnMJ\n\nDefine a method start_new_page(options)\n\n``` ruby\ndef start_new_page(options={})\n  opts = options.reverse_merge({\n    :template => @path_to_template,\n    :template_page => @template_page\n  })\n super(opts)\nend\n```\n. :+1: \n. ",
    "igor04": "On picrure you can see how \"table in span\" covers footer of the page with orange line. In normal situation last row must be on a new page, because there isn't enough space for row,  but in our case it stays on the same page.\n. Thanks! But i thought that margin in options of document would reserve this space, or was i mistaken? If i am mistaken, what should i do for getting indents on all pages and span doesn't cover it? Also, if text in span works( not cover), why does the table in span go on margins and cover them?\n. On picrure you can see how \"table in span\" covers footer of the page with orange line. In normal situation last row must be on a new page, because there isn't enough space for row,  but in our case it stays on the same page.\n. Thanks! But i thought that margin in options of document would reserve this space, or was i mistaken? If i am mistaken, what should i do for getting indents on all pages and span doesn't cover it? Also, if text in span works( not cover), why does the table in span go on margins and cover them?\n. ",
    "pietere": "Just FYI, we have the same issue in older Acrobat Reader versions on Mac and on Photoshop on Mac. Opens without problems in Preview on Mac.\n. Just FYI, we have the same issue in older Acrobat Reader versions on Mac and on Photoshop on Mac. Opens without problems in Preview on Mac.\n. ",
    "mopx": "you can assign a template when you create a new page\n\n`start_new_page(:template => filename.pdf)`\n. you can assign a template when you create a new page\n\n`start_new_page(:template => filename.pdf)`\n. ",
    "alexmonteiro": "Same problem with template without using start_new_page command, when I print a list of products more than 1 page the template doesn't appear the template on other pages.\n\nIt ill be a good improve if symbol :template works like :top_magin on behavior. The :top_margin on create of pdfs is working on all pages printed.\n. Yeah, that I suppose to be. Will change my model name.\nThanks for replies.\n. Same problem with template without using start_new_page command, when I print a list of products more than 1 page the template doesn't appear the template on other pages.\n\nIt ill be a good improve if symbol :template works like :top_magin on behavior. The :top_margin on create of pdfs is working on all pages printed.\n. Yeah, that I suppose to be. Will change my model name.\nThanks for replies.\n. ",
    "bridgway": "Thanks a lot for this @samant, I too would also support adding merge functionality. Cheers, Ben\n. Thanks a lot for this @samant, I too would also support adding merge functionality. Cheers, Ben\n. ",
    "shaokun": "it works! but there is an issue for the file size, if a pdf_file has 3 pages, and the size is 1m, then after concat, it will be increased to 3m. So looks like the template method make the file all_page_real_size \\* page_num\n. it works! but there is an issue for the file size, if a pdf_file has 3 pages, and the size is 1m, then after concat, it will be increased to 3m. So looks like the template method make the file all_page_real_size \\* page_num\n. ",
    "mmichaa": ":+1: \n. :+1: \n. ",
    "ParsaAkbari": ":+1: \n. :+1: \n. ",
    "jhitze": "I used @samant's code and it worked great. It'd be nice to see this kind of feature in Prawn proper. Thanks!\n. Then I have to ask, is there a proper way to merge an already created PDF into a Prawn PDF programmatically?\n. I used @samant's code and it worked great. It'd be nice to see this kind of feature in Prawn proper. Thanks!\n. Then I have to ask, is there a proper way to merge an already created PDF into a Prawn PDF programmatically?\n. ",
    "walteryu": "Another way would be using the rmagick gem - the link below provides an example of combining images into a single pdf file; however, it also works for combining pdf files:\nhttp://stackoverflow.com/questions/20636576/how-do-i-combine-a-number-of-images-into-a-single-pdf-using-ruby\n\nThe fonts and image come out slightly out of focus but may be worth the trade-off of being able to merge individual files programmatically.\n. Another way would be using the rmagick gem - the link below provides an example of combining images into a single pdf file; however, it also works for combining pdf files:\nhttp://stackoverflow.com/questions/20636576/how-do-i-combine-a-number-of-images-into-a-single-pdf-using-ruby\n\nThe fonts and image come out slightly out of focus but may be worth the trade-off of being able to merge individual files programmatically.\n. ",
    "akidon": "start_new_page with template not working, :( its getting blank PDF page. Maybe its working without template please help me, how does it works :+1: \n. start_new_page with template not working, :( its getting blank PDF page. Maybe its working without template please help me, how does it works :+1: \n. ",
    "szimek": "+1 Currently we're using master branch, because we need colspan support in `Table::Cell`. Would be great to have 1.0 or at least RC2\n. +1 Currently we're using master branch, because we need colspan support in `Table::Cell`. Would be great to have 1.0 or at least RC2\n. ",
    "jherdman": "Definitely RC2 would be great. Eleven months on RC1.\n. Definitely RC2 would be great. Eleven months on RC1.\n. ",
    "welfare": "+1 Would be great to see some plan for 1.0 or even RC2\n. Hey @sandal, I have fixed the following:\n- Added a min_version(1.6) if print_scaling is set to :none\n- Line wrap everywhere I found > 80 chars in my commits\n- Added the notes from @jlduran  to the manual\n- Fixed the manual example to use the option\n- Rebased and resolved conflicts\n\nI pushed the changes to my fork but I'm quite new to github so I have no clue what to do next. Please advise :)\n. +1 Would be great to see some plan for 1.0 or even RC2\n. Hey @sandal, I have fixed the following:\n- Added a min_version(1.6) if print_scaling is set to :none\n- Line wrap everywhere I found > 80 chars in my commits\n- Added the notes from @jlduran  to the manual\n- Fixed the manual example to use the option\n- Rebased and resolved conflicts\n\nI pushed the changes to my fork but I'm quite new to github so I have no clue what to do next. Please advise :)\n. ",
    "asanghi": "@bradediger can you please provide some input/direction? Whats the thought process? Roadmap? I'm only asking you since it seems you have committed the last few times.\n. @bradediger while we have your attention, why just an RC2 and not an actual minor/major release?\n. @bradediger can you please provide some input/direction? Whats the thought process? Roadmap? I'm only asking you since it seems you have committed the last few times.\n. @bradediger while we have your attention, why just an RC2 and not an actual minor/major release?\n. ",
    "felixgr": "``` ruby\n  text  \"<link href='javascript:app.response(\\\"1\\\");'>href</link>\" +\n        \"<link anchor='javascript:app.response(\\\"2\\\");'>anchor</link>\",\n        :inline_format => true\n```\n. ``` ruby\n  text  \"<link href='javascript:app.response(\\\"1\\\");'>href</link>\" +\n        \"<link anchor='javascript:app.response(\\\"2\\\");'>anchor</link>\",\n        :inline_format => true\n```\n. ",
    "krishicks": "I've run into this bug as well. The following tests expose the bug:\n\nModify the existing test for a PDF without a MediaBox entry (spec/template_spec.rb:164) such that it starts a new page after creating the Document:\n\n``` ruby\nit \"should correctly import a template file that is missing a MediaBox entry\" do\n  filename = \"#{Prawn::DATADIR}/pdfs/page_without_mediabox.pdf\"\n\n  @pdf = Prawn::Document.new(:template => filename)\n  @pdf.start_new_page\n  str = @pdf.render\n  str[0,4].should == \"%PDF\"\nend\n```\n\nThis will cause the error that the bug was opened under.\n\nSimilarly, create a new document without a MediaBox-less template, but pass the template to start_new_page:\n\n``` ruby\nit \"should work when the template is missing a MediaBox entry\" do\n  filename = \"#{Prawn::DATADIR}/pdfs/page_without_mediabox.pdf\"\n\n  @pdf = Prawn::Document.new skip_page_creation: true\n  lambda {\n    @pdf.start_new_page(template: filename)\n  }.should_not raise_error\nend\n```\n\nI've looked into this a bit but don't have a good enough understanding of the structure of PDFs to make a good solution. \n\nAdding a breakpoint at lib/prawn/core/page.rb:91 shows the following:\n\np @dictionary\n=> 4\np document.state.store[4].data.keys\n=> [:Type, :Parent, :Resources, :Contents]\n\nPage#layout calls #dictionary expecting an object with data that has :MediaBox as a key, but the result from #dictionary has no such key at that index.\n\nHowever, that key can be found at a different index, if we dig into :Pages:\n\np document.state.store[2].data[:Pages].data.keys\n[:Type, :Kids, :Count, :MediaBox]\n\nThe fix made in 41b56e85 by James Healy seems to do a similar kind of lookup through the parents to find the :MediaBox key, but still fails in the case of the PDF being used as a start_new_page template.\n\nEdited to add pull request: https://github.com/prawnpdf/prawn/pull/468\n. Indeed, it does just search for any MediaBox entry.\n\n@yob: I'm curious to know what a better solution is. Given no MediaBox entry for a PDF, should a proper exception be raised stating that the PDF cannot be used as a template, or is there something else that can be done to work around the fact that it doesn't have one?\n. I'm happy with that result. I wasn't really happy with the fix I proposed, as it still allowed for the case where the method would return nil. The method should never return nil. Making it return [0,0,612,792] as a default sounds fantastic. I'll update the pull request later.\n. This is a templates-only problem as only when a template is used is the MediaBox potentially missing.\n\nI see a few problems:\n- Page#init_from_object throws away options set in start_new_page, such as size, layout, margins. This means that it's not even possible to hint when the size is known but the MediaBox is missing\n- Page#inherited_dictionary_value may return nil, which causes Document#generate_margin_box to explode\n\nAnd a new problem I've discovered with another PDF:\n- The MediaBox returned by PDF::Reader may be a PDF::Reader::Reference which needs to be dereferenced\n. I've run into this bug as well. The following tests expose the bug:\n\nModify the existing test for a PDF without a MediaBox entry (spec/template_spec.rb:164) such that it starts a new page after creating the Document:\n\n``` ruby\nit \"should correctly import a template file that is missing a MediaBox entry\" do\n  filename = \"#{Prawn::DATADIR}/pdfs/page_without_mediabox.pdf\"\n\n  @pdf = Prawn::Document.new(:template => filename)\n  @pdf.start_new_page\n  str = @pdf.render\n  str[0,4].should == \"%PDF\"\nend\n```\n\nThis will cause the error that the bug was opened under.\n\nSimilarly, create a new document without a MediaBox-less template, but pass the template to start_new_page:\n\n``` ruby\nit \"should work when the template is missing a MediaBox entry\" do\n  filename = \"#{Prawn::DATADIR}/pdfs/page_without_mediabox.pdf\"\n\n  @pdf = Prawn::Document.new skip_page_creation: true\n  lambda {\n    @pdf.start_new_page(template: filename)\n  }.should_not raise_error\nend\n```\n\nI've looked into this a bit but don't have a good enough understanding of the structure of PDFs to make a good solution. \n\nAdding a breakpoint at lib/prawn/core/page.rb:91 shows the following:\n\np @dictionary\n=> 4\np document.state.store[4].data.keys\n=> [:Type, :Parent, :Resources, :Contents]\n\nPage#layout calls #dictionary expecting an object with data that has :MediaBox as a key, but the result from #dictionary has no such key at that index.\n\nHowever, that key can be found at a different index, if we dig into :Pages:\n\np document.state.store[2].data[:Pages].data.keys\n[:Type, :Kids, :Count, :MediaBox]\n\nThe fix made in 41b56e85 by James Healy seems to do a similar kind of lookup through the parents to find the :MediaBox key, but still fails in the case of the PDF being used as a start_new_page template.\n\nEdited to add pull request: https://github.com/prawnpdf/prawn/pull/468\n. Indeed, it does just search for any MediaBox entry.\n\n@yob: I'm curious to know what a better solution is. Given no MediaBox entry for a PDF, should a proper exception be raised stating that the PDF cannot be used as a template, or is there something else that can be done to work around the fact that it doesn't have one?\n. I'm happy with that result. I wasn't really happy with the fix I proposed, as it still allowed for the case where the method would return nil. The method should never return nil. Making it return [0,0,612,792] as a default sounds fantastic. I'll update the pull request later.\n. This is a templates-only problem as only when a template is used is the MediaBox potentially missing.\n\nI see a few problems:\n- Page#init_from_object throws away options set in start_new_page, such as size, layout, margins. This means that it's not even possible to hint when the size is known but the MediaBox is missing\n- Page#inherited_dictionary_value may return nil, which causes Document#generate_margin_box to explode\n\nAnd a new problem I've discovered with another PDF:\n- The MediaBox returned by PDF::Reader may be a PDF::Reader::Reference which needs to be dereferenced\n. ",
    "hammackj": "This an example of it. http://hammackj.com/downloads/graphs.pdf\n\nI wasn't aware that xpdf was unmaintained, the pdfs look great in preview/evince/chrome. I just got a complaint that they didn't work in xpdf and wasn't sure why.\n. This an example of it. http://hammackj.com/downloads/graphs.pdf\n\nI wasn't aware that xpdf was unmaintained, the pdfs look great in preview/evince/chrome. I just got a complaint that they didn't work in xpdf and wasn't sure why.\n. ",
    "jordanbyron": "This might be fixed. Here is my test:\n\n``` ruby\ndata = [\"foo \" * 40] * 31\npdf = Prawn::Document.new\n\npdf.column_box([0, pdf.cursor], :columns => 3, :width => pdf.bounds.width) do\n  data.each { |r| pdf.text r, :indent_paragraphs => 20 }\nend\n```\n\nResult:\n\n![Screen Shot 2013-03-08 at 2 02 38 PM](https://f.cloud.github.com/assets/40662/238533/eb368a60-883b-11e2-80d7-2fc2fe8a34e6.png)\n. Seems to be working now. Using a slightly modified version of the example above:\n\n``` ruby\ndata = [[\"foo\",\"bar\"]] * 31\n\npdf = Prawn::Document.new do\n  column_box([0, cursor], :columns => 2, :width => bounds.width) do\n    data.each do |question|\n      text \". \" * 100\n      move_down 20\n\n      image File.join(File.dirname(__FILE__), 'data', 'images', 'arrow.png'),\n        width: 42, position: :center\n      move_down 20\n\n      text \"_ \" * 1000\n      move_down 20\n    end\n  end\nend\n```\n\n![PDF Result](https://f.cloud.github.com/assets/40662/237610/405b10a0-881a-11e2-9f9e-7d9986986097.png)\n. I can't seem to duplicate this problem using the latest version of master. Here is my simplified example:\n\n``` ruby\ndata = [[\"foo\",\"bar\"]] * 31\nheaders = [\"baz\",\"foobar\"]\npdf = Prawn::Document.new\npdf.table([headers] + data, :header => true) do\n  style row(0), :borders => [:bottom],\n    :background_color => \"DDDDDD\", :font_style => :bold\nend\n```\n\n![PDF](https://f.cloud.github.com/assets/40662/237567/db3a6c54-8817-11e2-8b3b-435cca67c1b9.png)\n. @sos4nt awesome. Thanks for the extra info. I'll see if I can hunt down the problem. :smile: \n. Found the offending commit 8df91395b91a285d6f151074074bf70ca8abddba Working on a fix now\n. Thank you @bradediger\n. @bradediger sorry about the build. I got so excited that I fixed the problem I totally forgot about the specs :flushed: Fixing now ...\n. :+1:\n. This might be fixed. Here is my test:\n\n``` ruby\ndata = [\"foo \" * 40] * 31\npdf = Prawn::Document.new\n\npdf.column_box([0, pdf.cursor], :columns => 3, :width => pdf.bounds.width) do\n  data.each { |r| pdf.text r, :indent_paragraphs => 20 }\nend\n```\n\nResult:\n\n![Screen Shot 2013-03-08 at 2 02 38 PM](https://f.cloud.github.com/assets/40662/238533/eb368a60-883b-11e2-80d7-2fc2fe8a34e6.png)\n. Seems to be working now. Using a slightly modified version of the example above:\n\n``` ruby\ndata = [[\"foo\",\"bar\"]] * 31\n\npdf = Prawn::Document.new do\n  column_box([0, cursor], :columns => 2, :width => bounds.width) do\n    data.each do |question|\n      text \". \" * 100\n      move_down 20\n\n      image File.join(File.dirname(__FILE__), 'data', 'images', 'arrow.png'),\n        width: 42, position: :center\n      move_down 20\n\n      text \"_ \" * 1000\n      move_down 20\n    end\n  end\nend\n```\n\n![PDF Result](https://f.cloud.github.com/assets/40662/237610/405b10a0-881a-11e2-9f9e-7d9986986097.png)\n. I can't seem to duplicate this problem using the latest version of master. Here is my simplified example:\n\n``` ruby\ndata = [[\"foo\",\"bar\"]] * 31\nheaders = [\"baz\",\"foobar\"]\npdf = Prawn::Document.new\npdf.table([headers] + data, :header => true) do\n  style row(0), :borders => [:bottom],\n    :background_color => \"DDDDDD\", :font_style => :bold\nend\n```\n\n![PDF](https://f.cloud.github.com/assets/40662/237567/db3a6c54-8817-11e2-8b3b-435cca67c1b9.png)\n. @sos4nt awesome. Thanks for the extra info. I'll see if I can hunt down the problem. :smile: \n. Found the offending commit 8df91395b91a285d6f151074074bf70ca8abddba Working on a fix now\n. Thank you @bradediger\n. @bradediger sorry about the build. I got so excited that I fixed the problem I totally forgot about the specs :flushed: Fixing now ...\n. :+1:\n. ",
    "agnessa": "Just verified - works fine, thanks!\n. Just verified - works fine, thanks!\n. ",
    "sebfie": "Anyone can help me?\n. Anyone can help me?\n. ",
    "ttantawy": "were you able to resolve this? I am having the same problem with an image.\n. I was able to get it to write properly. The problem was with a definition in the PDF document that I was using. Check this out to understand:\n\nhttp://stackoverflow.com/questions/12076299/my-text-is-written-in-a-bad-direction-when-i-use-a-template\n\nWhen I used adobe to render my pdf (from html) instead of other gems and conversion websites, it worked fine.\n. were you able to resolve this? I am having the same problem with an image.\n. I was able to get it to write properly. The problem was with a definition in the PDF document that I was using. Check this out to understand:\n\nhttp://stackoverflow.com/questions/12076299/my-text-is-written-in-a-bad-direction-when-i-use-a-template\n\nWhen I used adobe to render my pdf (from html) instead of other gems and conversion websites, it worked fine.\n. ",
    "batizhevsky": "Oh, I use stable version from gem, but this functional only in master. Sorry. \nBut still the example is not working for me.\n\ntable([[head], *(data.map{|d| [d]})], :header => true, :row_colors => %w[cccccc ffffff]) do |t|\n      t.before_rendering_page do |page|\n        page.row(-1).border_bottom_width = 3\n      end\n      t.row(0).style :background_color => '000000', :text_color => 'ffffff'\n      t.cells.style :borders => []\n    end\n. in Gemfile add:\n gem 'prawn', git: 'git://github.com/prawnpdf/prawn.git'\n. Oh, I use stable version from gem, but this functional only in master. Sorry. \nBut still the example is not working for me.\n\ntable([[head], *(data.map{|d| [d]})], :header => true, :row_colors => %w[cccccc ffffff]) do |t|\n      t.before_rendering_page do |page|\n        page.row(-1).border_bottom_width = 3\n      end\n      t.row(0).style :background_color => '000000', :text_color => 'ffffff'\n      t.cells.style :borders => []\n    end\n. in Gemfile add:\n gem 'prawn', git: 'git://github.com/prawnpdf/prawn.git'\n. ",
    "solisoft": "How to use master version in a Rails app ? \n. How to use master version in a Rails app ? \n. ",
    "xb29": "Understood. Thank you  for the quick answer, it works perfectly now !\n. Understood. Thank you  for the quick answer, it works perfectly now !\n. ",
    "4nkh": "I still have this issue with the 0.12.0 version\n\n```\nclass ExamplePdf < Prawn::Document\n    def initialize\n        super(top_margin: 20)\n        my_table\n    end\n\n    def my_table\n        table([[\"foo\"], [\"bar\"], [\"baz\"], [{content: \"baz\", background_color: \"FF0000\"}]]) do\n            row(0).font_style = :bold\n            columns(1..2).align = :left\n            columns(3..5).align = :right\n            self.row_colors = [\"DDDDDD\", \"FFFFFF\"]\n            self.header = true\n            self.cell_style = {size: 12}\n        end\n    end\nend\n```\n. ok i just tried the stable branch and it work, thanks\n. I still have this issue with the 0.12.0 version\n\n```\nclass ExamplePdf < Prawn::Document\n    def initialize\n        super(top_margin: 20)\n        my_table\n    end\n\n    def my_table\n        table([[\"foo\"], [\"bar\"], [\"baz\"], [{content: \"baz\", background_color: \"FF0000\"}]]) do\n            row(0).font_style = :bold\n            columns(1..2).align = :left\n            columns(3..5).align = :right\n            self.row_colors = [\"DDDDDD\", \"FFFFFF\"]\n            self.header = true\n            self.cell_style = {size: 12}\n        end\n    end\nend\n```\n. ok i just tried the stable branch and it work, thanks\n. ",
    "paulcc": "It's possible to fix this by getting #import_page to accept an already-read PDF::Reader::ObjectHash\n\nA first attempt is below, and it produces viewable pdfs. Needs tests etc. One for ruby-northeast? (-:\n\n``` ruby\nmodule ImportFromHash\n  def import_page(filename_or_hash, page_num)\n    @loaded_objects = {}\n\n    if filename_or_hash.is_a?(PDF::Reader::ObjectHash)\n      hash = filename_or_hash\n    else\n      unless File.file?(filename_or_hash)\n        raise ArgumentError, \"#{filename_or_hash} does not exist\"\n      end\n      hash PDF::Reader::ObjectHash.new(filename_or_hash)\n    end\n    ref  = hash.page_references[page_num - 1]\n\n    ref.nil? ? nil : load_object_graph(hash, ref).identifier\n\n  rescue PDF::Reader::MalformedPDFError, PDF::Reader::InvalidObjectError\n    msg = \"Error reading template file. If you are sure it's a valid PDF, it may be a bug.\"\n    raise Prawn::Errors::TemplateError, msg\n  rescue PDF::Reader::UnsupportedFeatureError\n    msg = \"Template file contains unsupported PDF features\"\n    raise Prawn::Errors::TemplateError, msg\n  end\nend\n```\n. My fix solves magpieuk's issue because it only reads and parses the file once. (We're using the call to embed pdf docs inside a pdf doc, hence reading distinct pages in sequence - plus we're reading the pages from a parsed pdf doc.)\n\nIt won't prevent repeat calls to load_object_graph if the same page is used repeatedly - which jonsgreen's fix will handle - though only if reading from a filename. \n\nOne thought though - why not memoize reads from streams or parsed pdf objects as well? It gives more flexibility and would simplify the code. \n\nPaul\n. Sorry for not replying earlier. We've not had a chance to test the fix in our system, but the code certainly looks ok. \n\nThanks for helping.\n. Hi\n\nSorry, I've still not tested the code that was merged in. I've just re-read the commit, and it all looks sensible still. You could try my original attempt in https://github.com/prawnpdf/prawn/issues/404#issuecomment-9606584(but note a missing '=' in line \"hash PDF::Reader::ObjectHash.new(filename_or_hash)\")\n\nIs the blow-up linear (proportional to the #pages in the original) or is it worse than that? I'm wondering whether there's some sharing of objects in your original files which is being lost when you extract pages, eg if page 1 contained objects [A,B,C] where B and C were used on all pages, then the imported version might have its own duplicated copies of B and C etc. IIRC prawn is not too clever about sharing.\n\nYou might get some clues by counting how many objects and references to them are in the pdfs, eg try these on the original file then the generated file. Let us know what you find!\n\negrep -a '^[0-9]+ 0 obj' foo.pdf | wc -l\negrep -a '[0-9]+ 0 R' foo.pdf | wc -l\n\nPaul\n\n(re-posted - original formatting went awol)\n. did you try the count of objects & references (for original and generated\nfiles)? I'm curious as to what the counts are.\n\nor, are you able to email the before & after files?\n\nOn Fri, May 24, 2013 at 12:24 PM, Leonardo D. Schlossmacher <\nnotifications@github.com> wrote:\n\n> @paulcc https://github.com/paulcc I think the problem is \"simpler\" than\n> that. The final size is proportional to the number of pages in the\n> original. As I said before, it's exactly equal to the number of pages of\n> the original file times the original file size.\n> It's like even though I'm using only the first page of the template the\n> whole template is being attached to the final final but only the selected\n> page is being shown. So I don't think this problem is related to shared\n> objects.\n> \n> Anyway, I have also tried your solution (and I had noticed the missing\n> equals sign [image: :smile:]) but I had no success.\n> \n> Thanks for helping me, by the way.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/prawnpdf/prawn/issues/404#issuecomment-18399542\n> .\n. It's possible to fix this by getting #import_page to accept an already-read PDF::Reader::ObjectHash\n\nA first attempt is below, and it produces viewable pdfs. Needs tests etc. One for ruby-northeast? (-:\n\n``` ruby\nmodule ImportFromHash\n  def import_page(filename_or_hash, page_num)\n    @loaded_objects = {}\n\n    if filename_or_hash.is_a?(PDF::Reader::ObjectHash)\n      hash = filename_or_hash\n    else\n      unless File.file?(filename_or_hash)\n        raise ArgumentError, \"#{filename_or_hash} does not exist\"\n      end\n      hash PDF::Reader::ObjectHash.new(filename_or_hash)\n    end\n    ref  = hash.page_references[page_num - 1]\n\n    ref.nil? ? nil : load_object_graph(hash, ref).identifier\n\n  rescue PDF::Reader::MalformedPDFError, PDF::Reader::InvalidObjectError\n    msg = \"Error reading template file. If you are sure it's a valid PDF, it may be a bug.\"\n    raise Prawn::Errors::TemplateError, msg\n  rescue PDF::Reader::UnsupportedFeatureError\n    msg = \"Template file contains unsupported PDF features\"\n    raise Prawn::Errors::TemplateError, msg\n  end\nend\n```\n. My fix solves magpieuk's issue because it only reads and parses the file once. (We're using the call to embed pdf docs inside a pdf doc, hence reading distinct pages in sequence - plus we're reading the pages from a parsed pdf doc.)\n\nIt won't prevent repeat calls to load_object_graph if the same page is used repeatedly - which jonsgreen's fix will handle - though only if reading from a filename. \n\nOne thought though - why not memoize reads from streams or parsed pdf objects as well? It gives more flexibility and would simplify the code. \n\nPaul\n. Sorry for not replying earlier. We've not had a chance to test the fix in our system, but the code certainly looks ok. \n\nThanks for helping.\n. Hi\n\nSorry, I've still not tested the code that was merged in. I've just re-read the commit, and it all looks sensible still. You could try my original attempt in https://github.com/prawnpdf/prawn/issues/404#issuecomment-9606584(but note a missing '=' in line \"hash PDF::Reader::ObjectHash.new(filename_or_hash)\")\n\nIs the blow-up linear (proportional to the #pages in the original) or is it worse than that? I'm wondering whether there's some sharing of objects in your original files which is being lost when you extract pages, eg if page 1 contained objects [A,B,C] where B and C were used on all pages, then the imported version might have its own duplicated copies of B and C etc. IIRC prawn is not too clever about sharing.\n\nYou might get some clues by counting how many objects and references to them are in the pdfs, eg try these on the original file then the generated file. Let us know what you find!\n\negrep -a '^[0-9]+ 0 obj' foo.pdf | wc -l\negrep -a '[0-9]+ 0 R' foo.pdf | wc -l\n\nPaul\n\n(re-posted - original formatting went awol)\n. did you try the count of objects & references (for original and generated\nfiles)? I'm curious as to what the counts are.\n\nor, are you able to email the before & after files?\n\nOn Fri, May 24, 2013 at 12:24 PM, Leonardo D. Schlossmacher <\nnotifications@github.com> wrote:\n\n> @paulcc https://github.com/paulcc I think the problem is \"simpler\" than\n> that. The final size is proportional to the number of pages in the\n> original. As I said before, it's exactly equal to the number of pages of\n> the original file times the original file size.\n> It's like even though I'm using only the first page of the template the\n> whole template is being attached to the final final but only the selected\n> page is being shown. So I don't think this problem is related to shared\n> objects.\n> \n> Anyway, I have also tried your solution (and I had noticed the missing\n> equals sign [image: :smile:]) but I had no success.\n> \n> Thanks for helping me, by the way.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/prawnpdf/prawn/issues/404#issuecomment-18399542\n> .\n. ",
    "leods92": "Did anyone actually test the proposed solution?\nI'm running 1.0.0.rc2 and I still have the same problem: the whole template size is being added to output file even though only one template page is being used.\n\nThat is not a problem if the template is not that big; however as I'm trying to take advantage of the template feature to do something different, I'm generating HUGE files (e.g. 151MiB) from small ones (e.g. 1.9MiB).\n\nWhat I want is to add a standard header to all pages of any given PDF.\nThe header is being added using Prawn's drawing functions.\n\nSo what I am doing is:\n- loading the existent PDF as a template\n- iterating through each of its pages\n- drawing the header using Prawn's drawing functions\n- generating a new PDF file with headers\n\nIt works, but as I said the output file is huge as it equals to `original_pdf.size*original_pdf.pages.count`.\n\nEven though I'm aware Prawn was not designed to work with existent PDFs I cannot think of another way of doing what I want but by using Prawn.\n\nI'm sorry if I should've found this solution somewhere else but I couldn't find it anywhere; and boy, I looked for it...\n\nAnd here's the code:\n\n``` ruby\noriginal_file_path = \"/path/to/original/file\"\noriginal_file = PDF::Reader::ObjectHash.new original_file_path\npages = original_file.page_references.count\n\nnew_file = Prawn::Document.new skip_page_creation: true do |file|\n  (1..pages).each do |page|\n    file.start_new_page template: original_file_path, template_page: page\n    add_header(file) # draws a header using Prawn drawing functions\n  end\nend\n\nnew_file.render_file \"/path/to/new/file\"\n```\n\nI'd be glad if someone could point what I'm doing wrong out.\nHowever, if this is still a bug is there a way of overcoming it?\n. @paulcc I think the problem is \"simpler\" than that. The final size is proportional to the number of pages in the original. As I said before, it's exactly equal to the number of pages of the original file times the original file size.\nIt's like even though I'm using only the first page of the template the whole template is being attached to the final final but only the selected page is being shown. So I don't think this problem is related to shared objects.\n\nAnyway, I have also tried your solution (and I had noticed the missing equals sign :smile:) but I had no success.\n\nThanks for helping me, by the way.\n. When @paulcc asked me to actually send the files and count their objects I decided to take a smaller PDF and edit it using Prawn. Then I noticed just a couple of bytes were added (due to the edits I had made); so it worked. So I decided to take a 2MiB file and guess what? It worked again.\n\nI'm really not sure what happened; I was using version 0.12.0 and then updated to 1.0.rc2; that's what changed in my code. Before posting here I assured myself I was running it: restarted the server, ran bundle, made some tests and the huge files were still being generated. During this period I had restarted my system so maybe it was a caching issue, I really don't know. Or maybe I was just careless with one of the updating steps. :/\n\nI'm so sorry for wasting your time and at the same time so thankful for your cooperation.\nHave you all a great weekend. :+1: \n. Did anyone actually test the proposed solution?\nI'm running 1.0.0.rc2 and I still have the same problem: the whole template size is being added to output file even though only one template page is being used.\n\nThat is not a problem if the template is not that big; however as I'm trying to take advantage of the template feature to do something different, I'm generating HUGE files (e.g. 151MiB) from small ones (e.g. 1.9MiB).\n\nWhat I want is to add a standard header to all pages of any given PDF.\nThe header is being added using Prawn's drawing functions.\n\nSo what I am doing is:\n- loading the existent PDF as a template\n- iterating through each of its pages\n- drawing the header using Prawn's drawing functions\n- generating a new PDF file with headers\n\nIt works, but as I said the output file is huge as it equals to `original_pdf.size*original_pdf.pages.count`.\n\nEven though I'm aware Prawn was not designed to work with existent PDFs I cannot think of another way of doing what I want but by using Prawn.\n\nI'm sorry if I should've found this solution somewhere else but I couldn't find it anywhere; and boy, I looked for it...\n\nAnd here's the code:\n\n``` ruby\noriginal_file_path = \"/path/to/original/file\"\noriginal_file = PDF::Reader::ObjectHash.new original_file_path\npages = original_file.page_references.count\n\nnew_file = Prawn::Document.new skip_page_creation: true do |file|\n  (1..pages).each do |page|\n    file.start_new_page template: original_file_path, template_page: page\n    add_header(file) # draws a header using Prawn drawing functions\n  end\nend\n\nnew_file.render_file \"/path/to/new/file\"\n```\n\nI'd be glad if someone could point what I'm doing wrong out.\nHowever, if this is still a bug is there a way of overcoming it?\n. @paulcc I think the problem is \"simpler\" than that. The final size is proportional to the number of pages in the original. As I said before, it's exactly equal to the number of pages of the original file times the original file size.\nIt's like even though I'm using only the first page of the template the whole template is being attached to the final final but only the selected page is being shown. So I don't think this problem is related to shared objects.\n\nAnyway, I have also tried your solution (and I had noticed the missing equals sign :smile:) but I had no success.\n\nThanks for helping me, by the way.\n. When @paulcc asked me to actually send the files and count their objects I decided to take a smaller PDF and edit it using Prawn. Then I noticed just a couple of bytes were added (due to the edits I had made); so it worked. So I decided to take a 2MiB file and guess what? It worked again.\n\nI'm really not sure what happened; I was using version 0.12.0 and then updated to 1.0.rc2; that's what changed in my code. Before posting here I assured myself I was running it: restarted the server, ran bundle, made some tests and the huge files were still being generated. During this period I had restarted my system so maybe it was a caching issue, I really don't know. Or maybe I was just careless with one of the updating steps. :/\n\nI'm so sorry for wasting your time and at the same time so thankful for your cooperation.\nHave you all a great weekend. :+1: \n. ",
    "backspace": "I\u2019m not sure exactly what this feature does, so I was trying to test it out, but when I run the example code given in the documentation, all I get is a blank document. Am I missing something obvious?\n\nHere\u2019s the code I\u2019m executing:\n\n```\nPrawn::Document.generate('soft_mask.pdf') do |pdf| \n  pdf.save_graphics_state do\n    pdf.soft_mask do\n      pdf.fill_color \"444444\"\n      pdf.fill_polygon [0, 40], [60, 10], [120, 40], [60, 68]\n    end\n    pdf.fill_color '000000'\n    pdf.fill_rectangle [0, 10], 120, 68\n  end\nend\n```\n\nWhen I open the blank document in Illustrator, there\u2019s only one path, a rectangle near the bottom of the page. It corresponds to the last `fill_rectangle` instruction.\n\nI\u2019ve tried using both the master branch and the [specific commit](https://github.com/cheba/prawn/commit/db32729abd1be55d287996818699dbb31aa0fb4a) by @cheba.\n\nI\u2019m sorry if this is the wrong place to ask. I figured it made sense because this issue already existed, but I could open a new one if that\u2019s better.\n. Ah, of course. Thanks. That\u2019s what I was hoping for but got sidetracked. The code I was using is from the method documentation, so I\u2019ve submitted a pull request to replace it with your working example from above.\n. :+1:\n. I\u2019m not sure exactly what this feature does, so I was trying to test it out, but when I run the example code given in the documentation, all I get is a blank document. Am I missing something obvious?\n\nHere\u2019s the code I\u2019m executing:\n\n```\nPrawn::Document.generate('soft_mask.pdf') do |pdf| \n  pdf.save_graphics_state do\n    pdf.soft_mask do\n      pdf.fill_color \"444444\"\n      pdf.fill_polygon [0, 40], [60, 10], [120, 40], [60, 68]\n    end\n    pdf.fill_color '000000'\n    pdf.fill_rectangle [0, 10], 120, 68\n  end\nend\n```\n\nWhen I open the blank document in Illustrator, there\u2019s only one path, a rectangle near the bottom of the page. It corresponds to the last `fill_rectangle` instruction.\n\nI\u2019ve tried using both the master branch and the [specific commit](https://github.com/cheba/prawn/commit/db32729abd1be55d287996818699dbb31aa0fb4a) by @cheba.\n\nI\u2019m sorry if this is the wrong place to ask. I figured it made sense because this issue already existed, but I could open a new one if that\u2019s better.\n. Ah, of course. Thanks. That\u2019s what I was hoping for but got sidetracked. The code I was using is from the method documentation, so I\u2019ve submitted a pull request to replace it with your working example from above.\n. :+1:\n. ",
    "chrisrichard": "I'm running into the same issue.\n. I'm running into the same issue.\n. ",
    "bjones": "The change @jonsgreen provides makes it so you can actually use column_widths to set every column's width when using colspan.  Without the change, you can only set some of the columns, which can result in tables larger than the containing bounds.  I don't see that colspan should actually matter in calculating min width and thus agree with the change above as better than what is currently in master, at least for me.\n. The change @jonsgreen provides makes it so you can actually use column_widths to set every column's width when using colspan.  Without the change, you can only set some of the columns, which can result in tables larger than the containing bounds.  I don't see that colspan should actually matter in calculating min width and thus agree with the change above as better than what is currently in master, at least for me.\n. ",
    "PeterBloom": "Sorry if this is old news... I am using Prawn 0.12.0.  I am trying to use colspan on a table as shown in the docs. I get a \"undefined method `colspan=' for #<Prawn::Table::Cell::Text:0x000001036cdfc8\" error.  I thought this was resolved way back when (https://github.com/prawnpdf/prawn/issues/335), but maybe not.  What to do?\n. 1.0.0.rc2 made the colspan work for me. Thanks Brad!  \n\nNow I am running into the \"Prawn::Errors::CannotFit... Table's width was set larger than its contents' maximum width...\" problem.\n\nDoes 'column_width' work in 1.0.0.rc2 if I don't call 'colspan'?  If so, I can probably refactor my table headers (where I wanted 'colspan') into another horizontal table, then put the non-header part of the doc in tables below that. I really need 'column_width' for the non-header portion of a complex table I am building to make it all fit nicely.  Any better ideas?\n. Thanks mate!  I need that feature.  Can't wait til its deployed!\n\nPeter Bloom\n650-291-6707 Mobile\npeter@launchcodelabs.com\n\nOn Aug 2, 2013, at 11:36 AM, Hartwig Brandl wrote:\n\n> I was able to fix the issue and expanded the test case to include more variations of the problem. \n> pull request #526\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n. Sorry if this is old news... I am using Prawn 0.12.0.  I am trying to use colspan on a table as shown in the docs. I get a \"undefined method `colspan=' for #<Prawn::Table::Cell::Text:0x000001036cdfc8\" error.  I thought this was resolved way back when (https://github.com/prawnpdf/prawn/issues/335), but maybe not.  What to do?\n. 1.0.0.rc2 made the colspan work for me. Thanks Brad!  \n\nNow I am running into the \"Prawn::Errors::CannotFit... Table's width was set larger than its contents' maximum width...\" problem.\n\nDoes 'column_width' work in 1.0.0.rc2 if I don't call 'colspan'?  If so, I can probably refactor my table headers (where I wanted 'colspan') into another horizontal table, then put the non-header part of the doc in tables below that. I really need 'column_width' for the non-header portion of a complex table I am building to make it all fit nicely.  Any better ideas?\n. Thanks mate!  I need that feature.  Can't wait til its deployed!\n\nPeter Bloom\n650-291-6707 Mobile\npeter@launchcodelabs.com\n\nOn Aug 2, 2013, at 11:36 AM, Hartwig Brandl wrote:\n\n> I was able to fix the issue and expanded the test case to include more variations of the problem. \n> pull request #526\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n. ",
    "ahacking": "@bradediger, I can confirm that this issue still exists in 1.0.0.rc2 using `colspan` with `column_widths`, even when ALL columns have a width specified.\n. @hbrandl Thanks for your effort on tracking this down and fixing. I look forward to giving it a try when I revisit report generation.\n. This sounds like a duplicate of #407, and a similar issue to what I'm having, although I am not specifying any widths in each row, but instead using the `column_widths` option.  Either way it isnt working for me.\n. @bradediger, I can confirm that this issue still exists in 1.0.0.rc2 using `colspan` with `column_widths`, even when ALL columns have a width specified.\n. @hbrandl Thanks for your effort on tracking this down and fixing. I look forward to giving it a try when I revisit report generation.\n. This sounds like a duplicate of #407, and a similar issue to what I'm having, although I am not specifying any widths in each row, but instead using the `column_widths` option.  Either way it isnt working for me.\n. ",
    "hbrandl": "I think I've tracked the bug down, but haven't yet come up with a fix.\n\nFirst of all, here is a test case that you can add to table_spec.rb.\n\n```\ndescribe \"You can explicitly set the column widths and use a colspan > 1\" do\n  it \"should a colspan > 1 with given column_widths (issue #407)\" do\n    data = [ \n      [ { content: \"\", colspan: 3 } ],\n      [ \"\", \"\", \"\" ],\n    ]\n    pdf = Prawn::Document.new\n    table = Prawn::Table.new data, pdf, column_widths: [100 , 200, 240]\n  end\nend\n```\n\nThe problematic code is in the function aggregate_cell_values (lib/prawn/table/cells.rb).\n\n```\n  # Sum up a min/max value over rows or columns in the cells selected.\n  # Takes the min/max (per +aggregate+) of the result of sending +meth+ to\n  # each cell, grouped by +row_or_column+.\n  #\n  def aggregate_cell_values(row_or_column, meth, aggregate)\n    values = {}\n    each do |cell|\n      index = cell.send(row_or_column)\n      values[index] = [values[index], cell.send(meth)].compact.send(aggregate)\n    end\n    values.values.inject(0, &:+)\n  end\n```\n\nIn the given example it will calculate the avg column width (100+200+240)/3=180 and write it to values[0].\nvalues[1] and values[2] will be filled with the \"correct\" values of 200 and 240.\n\n```\nvalues => {0=>180.0, 1=>200.0, 2=>240.0}\n```\n\nThus leading to the error message when you sum it up (180+200+240) = 620.\n\nThe expected sum would be (100+200+240)=540 OR (180+180+180)=540.\n. I was able to fix the issue and expanded the test case to include more variations of the problem. \npull request #526\n. My pull request #526 has been merged into master. I think this issue can thus be marked as closed.\n. Issue reported by @sigmike is fixed in pull request #579 .\n\n@ksugiarto if you want to use the fixed version immediately, you may add the following line to your gemfile\n\n```\ngem 'prawn', :git => \"https://github.com/hbrandl/prawn.git\", :branch => \"issue_407_2\" \n```\n\nBut do use the original git repository once the pull request is merged, since the branch may not live forever in my forked repository.\n. I looked at the original repository created by @tomciopp and created two failing test cases.\nOne is the original, the other is a reduced one for the CannotFit error experienced by @sandal and myself.\n\nI don't think that this issue is related to an other ticket.\nLooking at the error message, the only one that may possibly be related are #643 or #628.\n\nI've added the failing test cases to the new branch issue_438 (https://github.com/prawnpdf/prawn/tree/issue_438) and created pull request #698.\n\nI can't promise any timeframe on when I'll have time to look at it, but I'll put it onto my todo list.\n. Just for reference, here are the test cases\n\n``` ruby\nit \"should render a correct table in a bounding box with given colspans\", :unresolved , :issue => 438 do\n      pdf = Prawn::Document.new\n      data = [  [ {:content => \"1\", :colspan => 8} ],\n                [1,2,3,4,5,6,7,8],\n                [1,2,3,4,5,6,7,8],\n                [1,2,3,4,5,6,7,8],\n                [1,2,3,4,5,6,7,8],\n                [1,2,3,4,5,6,7,8],\n                [1,2,3,4,5,6,7,8]\n      ]\n      pdf.bounding_box [pdf.bounds.left, pdf.cursor], :width => pdf.bounds.width, :height => 250 do\n        pdf.stroke_bounds\n        pdf.table(data, :width => pdf.bounds.width, :column_widths => {0 => 10, 1 => 10, 2 => 40, 3 => 100, 5 => 60, 6 => 40, 7 => 10}) do \n          cells.style height: 20\n        end\n      end\n    end\n\n    it \"should not throw a CannotFit Error\", :unresolved, :issue => 438 do\n      pdf = Prawn::Document.new\n      data = [  [ {:content => \"1\", :colspan => 8} ],\n                [1,2,3,4,5,6,7,8],\n                [1,2,3,4,5,6,7,8],\n                [1,2,3,4,5,6,7,8],\n                [1,2,3,4,5,6,7,8],\n                [1,2,3,4,5,6,7,8],\n                [1,2,3,4,5,6,7,8]\n      ]\n      column_widths = [10,10,40,100,60,40,10]\n      table = Prawn::Table.new data, pdf, :width => 300, :column_widths => column_widths\n    end\n```\n. The test cases and thus the original example have three problems.\n1) The width is only defined for 7 columns instead of 8.\n2) A width of 10 is too small taking into account the default margins of each cell.\n3) The width is set too large.\n\nWhen I fix these three issues, the test cases pass.\n\nI went back to the original code by @tomciopp and after fixing these problems and running \n\n```\nbundle update prawn\n```\n\nThe pdf output of table_width.pdf looks as expected.\nSeems like the problem has been fixed since rc1.\n. Since this bug was referenced in issue #407, I tried to reproduce / fix it.\n\nTo reproduce this bug, I used the following test case\n\n```\ndescribe \"bugreport\" do\n  it \"illustrates issue #502\" do\n    pdf = Prawn::Document.new\n    first = {:content=>\"Foooo fo foooooo\",:width=>50,:align=>:center}\n    second = {:content=>\"Foooo\",:colspan=>2,:width=>70,:align=>:center}\n    third = {:content=>\"fooooooooooo, fooooooooooooo, fooo, foooooo fooooo\",:width=>55,:align=>:center}\n    fourth = {:content=>\"Bar\",:width=>15,:align=>:center}\n\n    table_content = [[\n    first,\n    [[second],[third,fourth]]\n    ]]\n    pdf.move_down(20)\n    pdf.table(table_content)\n\n  end\nend\n```\n\nGoing back to commit 386998effa7ce299c749f47063d7ff426b8f980a, I was able to reproduce this bug.\n\n```\n1) Prawn::Table You can explicitly set the column widths and use a colspan > 1 illustrates issue #502\n Failure/Error: pdf.table(table_content)\n Prawn::Errors::CannotFit:\n   Table's width was set larger than its contents' maximum width (max width 70, requested 90.0)\n # ./lib/prawn/table.rb:372:in `column_widths'\n # ./lib/prawn/table.rb:551:in `set_column_widths'\n # ./lib/prawn/table.rb:137:in `initialize'\n # ./lib/prawn/table/cell.rb:185:in `new'\n # ./lib/prawn/table/cell.rb:185:in `make'\n # ./lib/prawn/table.rb:439:in `block (2 levels) in make_cells'\n # ./lib/prawn/table.rb:433:in `each'\n # ./lib/prawn/table.rb:433:in `block in make_cells'\n # ./lib/prawn/table.rb:431:in `each'\n # ./lib/prawn/table.rb:431:in `make_cells'\n # ./lib/prawn/table.rb:128:in `initialize'\n # ./lib/prawn/table.rb:27:in `new'\n # ./lib/prawn/table.rb:27:in `table'\n # ./spec/table_spec.rb:62:in `block (3 levels) in <top (required)>'\n```\n\nTo reproduce clone repository at https://github.com/hbrandl/prawn/tree/issue_502 and run rspec.\n\nThis test case passes without any problems using my fixes for issue #407 and #533.\n\nAfter pull request #534 is merged, one may add this test case, but I'm not sure if it is necessary.\n. @johnnyshields If you can build a failing test case, I'll look into the issue. Please try to minify the test case as much as possible so I can look at the isolated problem. A sketch of the expected pdf output would also be greatly appreciated. As well as any further info that you can provide.\n\nAnd while I'm not affiliated with prawnpdf, I would guess, that a new issue would be warranted, since this seems like a much more complex bug.\n. @johnnyshields Thank you.\nI'm getting the following output\n\n```\n1) Prawn::Table You can explicitly set the column widths and use a colspan > 1 should allow long strings in subtables when parent is width-constrained\n Failure/Error: pdf.table([[child_1], [child_2]], column_widths: [pdf.bounds.width/2]*2)\n Prawn::Errors::CannotFit:\n   Table's width was set too small to contain its contents (min width 540.0, requested 270.0)\n # ./lib/prawn/table.rb:366:in `column_widths'\n # ./lib/prawn/table.rb:551:in `set_column_widths'\n # ./lib/prawn/table.rb:137:in `initialize'\n # ./lib/prawn/table.rb:27:in `new'\n # ./lib/prawn/table.rb:27:in `table'\n # ./spec/table_spec.rb:94:in `block (3 levels) in <top (required)>'\n```\n\nIt is an error and probably a bug, but at least it's error description fits.\n\nI tried to hunt the bug down, but was not able to find a cause. All I could find is some very strange behaviour of ruby (1.9.3 and 1.8.7) or rpsec (2.14.1) or prawn in the aggregate_cell_value function.\nSome puts are called and some aren't.\nTo illustrate, take the code below and replace the current aggregate_cell_values function (only a few puts should be added)\n\n```\n  def aggregate_cell_values(row_or_column, meth, aggregate)\n    values = {}\n    puts \"entering aggregate_cell_values\"\n    #calculate values for all cells that do not span accross multiple cells\n    #this ensures that we don't have a problem if the first line includes\n    #a cell that spans across multiple cells\n    each do |cell|\n      #don't take spanned cells\n      if cell.colspan == 1 and cell.class != Prawn::Table::Cell::SpanDummy\n        index = cell.send(row_or_column)\n        values[index] = [values[index], cell.send(meth)].compact.send(aggregate)\n      end\n      index = cell.send(row_or_column)\n      puts \"A\"\n      puts \"B values[index]=#{values[index]} cell.send(meth)=#{cell.send(meth)}\"\n      puts \"values=#{values}\"\n    end\n\n    each do |cell|\n      index = cell.send(row_or_column)          \n      if cell.colspan > 1\n        #calculate current (old) return value before we do anything\n        old_sum = 0\n        cell.colspan.times { |i|\n          old_sum += values[index+i] unless values[index+i].nil?\n        }\n\n        #calculate future return value \n        new_sum = cell.send(meth) * cell.colspan\n\n        if new_sum >= old_sum\n          #not entirely sure why we need this line, but with it the tests pass\n          values[index] = [values[index], cell.send(meth)].compact.send(aggregate) \n          #overwrite the old values with the new ones, but only if all entries existed\n          entries_exist = true\n          cell.colspan.times { |i| entries_exist = false if values[index+i].nil? }\n          cell.colspan.times { |i|\n            values[index+i] = cell.send(meth) if entries_exist\n          }\n        end\n      else\n        if cell.class == Prawn::Table::Cell::SpanDummy\n          values[index] = [values[index], cell.send(meth)].compact.send(aggregate) \n        end\n      end\n    end\n    values.values.inject(0, &:+)\n  end\n```\n\nThe expected output would be something along the lines of\nentering aggregate_cell_values\n    A\n    B values[index]=...\n    values=...\n    A\n    B values[index]=...\n    values=...\n\nBut on my system it is\n    A\n    B values[index]=...\n    values=...\n    B values[index]=...\n    values=...\n\nI can't come up with any reason why the puts \"A\" wouldn't execute.\n\nSince I don't feel like chasing a bug in ruby or rspec down and/or since I can't see my mistake. I'm giving up on this bug.\n\nI'd suggest you file a new bug report, since this bug may be related, but is definitely a bug on a deeper level. \n. I'll give this a shot with a testcase\n\n``` ruby\nprawn_document(:page_size => \"A4\", :page_layout => :portrait) do |pdf|\n\n      table_data = Array.new\n      4000.times do table_data.push(['a','b','c']) end\n\n      column_widths = [50, 60, 400]\n      pdf.table(table_data, \n        :column_widths => column_widths\n      )\nend\n```\n\nOn my local machine this code does take ~ 22 seconds to produce a 125 page pdf.\nNot sure if this is too long. But it isn't lightening fast either.\n. pull request #534 fixes this issue\n. I can confirm, that this fails in current master.\nI'll open up a new issue, since this one involves subtables and not just a single table as in the original example.\n. I tried to provide code to reproduce this problem, but failed to do so.\n\nHere is the code I used trying to reproduce the problem. Hopefully this can be of some help to someone.\n\n``` ruby\nprawn_document(:page_size => \"A4\", :page_layout => :portrait) do |pdf|\n\n      table_data = Array.new\n      30.times do table_data.push(['a','b','c']) end\n      table_data.push([{:content => 'some text', :rowspan => 2}, 'b', 'c'])\n      table_data.push(['b','c'])\n      10.times do table_data.push(['a','b','c']) end\n\n      column_widths = [50, 60, 400]\n      pdf.table(table_data, \n        :column_widths => column_widths\n      )\nend\n```\n\nIf I switch 30.times to 31.times both rows will be moved to the second page.\n\nCan you provide a sample code to illustrate the glitched layout?\n. Thanks to the comment by @karpah I was able to create a failing test case. (pull request #708)\n\n``` ruby\ndescribe \"Text may be longer than the available space in a row on a single page\" do \n    it \"should not glitch the layout if there is too much text to fit onto a single row on a single page\", :unresolved, :issue => 562 do \n      pdf = Prawn::Document.new({:page_size => \"A4\", :page_layout => :portrait})\n\n      table_data = Array.new\n      text = \"This will be a very long text. \"\n      4.times do text += text end\n      table_data.push([{:content => text, :rowspan => 2}, 'b', 'c'])\n      table_data.push(['b','c'])\n\n      column_widths = [50, 60, 400]\n\n      table = Prawn::Table.new table_data, pdf,:column_widths => column_widths\n\n      #render the table onto the pdf\n      table.draw\n\n      #expected behavior would be for the long text to be cut off or an exception to be raised\n      #thus we only expect a single page\n      pdf.page_count.should == 1\n    end\n  end\n```\n\n@sandal and everyone else: What would an ideal expected behavior look like?\nPersonally I wouldn't want an exception to be raised, since the text may be user or dynamically generated. I'd prefer it, if would simple be cut off.\nHowever some way to ensure that your text fits would probably make sense. We could add a method that returns the maximum row height. Combined with some method that could calculate the needed row height we could ensure that the text fits in those cases where we don't want text to be cut off.\n. @packetmonkey I don't think this is a viable long term solution, since there may be multiple rows with clipped text. But it would be a good work around if we clip the text as a form of feedback.\n\n@donv I'm not sure if interacting with the table rendering is an easy option to implement. But if you've got an idea on how to go about it, I'm open to discussing it.\n\n@donv Could you elaborate on the last sentence of this comment https://github.com/prawnpdf/prawn/issues/562#issuecomment-39963334 I'm not sure I understand what you mean.\n\n@all\nClipping will probably be the easier option, but I do agree that splitting would be the best.\n\nIf prawn would split the text into multiple rows (first part in the last row on the current page, rest split into one row per page), I would expect the other columns to be empty unless they include a very long text too. Would you agree?\n. Seems like we have an agreement on the way to proceed.\n\nIf anyone wants to beat me on solving this issue, I'd be very happy to review pull requests. Otherwise I should find some time to fix this in the next two or three weeks.\n. I haven't found time yet. But it's on my todo list.\n. @sandal thanks for the quick reply. No worries, I can use my own branch for my production system.\n\nI've described the first bug in detail in this comment\nhttps://github.com/prawnpdf/prawn/issues/407#issuecomment-22005447\n\nHere we ran into the same faulty logic by the original code.\n\nI'll try to give you some quick background:\nAssuming we have a table with a width of 50 for column 1 and 200 for column 2. (Testcase provided by @sigmike.)\nAnd assuming we have a table data as follows\n\n``` ruby\ndata = [['', ''],\n        [{:content => '', :colspan => 2}]\n       ]\n```\n\nThe original code calculated the width as follows\nRow 1: [50,200]\nRow 2: \n(50+200)/2=125; 125 is bigger than 50 but smaller than 200\n=> [125,200]\n\nResulting in an obvious error. (Expected result would be [50,200] OR [125,125]. Either result would result in an end result of 250.)\n\nHope this helps.\n. @sandal I'd be happy to help out, but I'm not entirely sure what you're planning to do. Could you elaborate? Or should we get together on IRC?\n. I found a problem with this pull request (being using it on a project of mine).\n\nAmmending the test that \"illustrates issue #407 - comment 28556698\" to check the final column widths:\n\n``` ruby\n    it \"illustrates issue #407 - comment 28556698\" do\n      data = [['', ''],\n              [{:content => '', :colspan => 2}]\n              ]\n      pdf = Prawn::Document.new\n      table = Prawn::Table.new data, pdf, :column_widths => [50, 200]\n      table.column_widths.should == [50.0, 200.0]\n    end\n```\n\nyields an error:\n\n``` ruby\n  1) Prawn::Table You can explicitly set the column widths and use a colspan > 1 illustrates issue #407 - comment 28556698\n     Failure/Error: table.column_widths.should == [50.0, 200.0]\n       expected: [50.0, 200.0]\n            got: [125.0, 125.0] (using ==)\n     # ./spec/table_spec.rb:111\n```\n\nI'll push a fix to this problem, but this does break one test relating to issue #502 .\n\nI'm pretty sure that the cause is somewhere else. Probably natural_content_height.\nI'll look into this, fix it and then update this pull request again.\n. I'll try to get to this before christmas.\n. I've looked into the issue with the test case for (resolved) bug report #502.\n\nIt seems that - as I expected - the issue is not with the code touched by this commit. However since the code ensures that subtable cell/column widths are now as expected the specified width (15) is simply too small to hold the letter \"B\" (plus default space left & right). Thus the test case fails. \n\nIn the current master branch the subtables cells/columns will be larger than requested, thus the test case works.\n\nI've adapted the testcase (width to 20) see commit c914cf1b8c268472cc426733f3b55dcc38f42404 in pull request.\n\nI've also documented the bug I found in bug report #612 for further investigation by myself of whoever comes first.\n\nOver the course of the next few weeks I'll continue testing the code for bugs related to merged cells. Since that is what I currently need most.\nI don't know when I'll find time to work on issue #612.\n\nP.S.: I noticed that I left some unnecessary code in the mentioned commit, I've corrected this with a new commit. Sorry about that.\n. @sandal Yes, it's ready for review.\n. :+1: \n. @sandal Thanks for the quick response. In the futrure I'll use the prawnpdf repo. Sorry for the inconvenience.\n. I tried a rewording to better reflect that there are no standard attributes, but that they are fairly common (as far as I can tell).\n\nBut I'm fine with any solution.\n. The test case only addresses the change in column_width_calculator.rb.\nI'm pretty sure that the change in cells.rb addresses a bug too. But I don't know how to produce the floating point arithmetic error needed to prove it.\n. @jlduran I'm not sure I understand the expected output of this test case. Specifically these two lines\n\n``` ruby\n colspan = @pdf.make_cell :content => '', :colspan => 3\n    data = [['', '', '', '', colspan]]\n```\n\nIf I change data to\n\n``` ruby\n    data = [['', '', '', '', '']]\n```\n\nthe test case passes.\n\nYour table has 5 columns and in the fifth column you're adding a cell with a colspan of 3.\nWhat am I missing? Could you elaborate on the intended outcome of this test case?\n. Once @jlduran gets back to my question, I'll have a closer look at #632 too.\n. Thank you very much for your detailed description. I took a close look at the issue at hand. But please be adviced that I'm not a maintainer for prawn, just someone who wants to fix the tables and especially colspan issues.\n\n``` ruby\ncolspan = @pdf.make_cell :content => '', :colspan => 3\n    data = [['', '', '', '', colspan]]\n```\n\nis equivalent to\n\n``` ruby\n    data = [['', '', '', '', {:content => '', :colspan => 3}]]\n```\n\nThis line generates a row with 7 cells of which the last three are merged.\n\n``` ruby\n data << ['', '', '', '', sub_table]\n```\n\nThis line adds a row of 5 cells. Thus it is short of two cells to the preceeding row.\n\nFinally you declare column widths for 5 cells.\n\n``` ruby\n    @pdf.table(data) do\n      column(0).width = 140\n      column(1).width = 80\n      column(2).width = 88\n      column(3).width = 40\n      column(4).width = 192\n    end\n```\n\nIf you change the second row to\n\n``` ruby\ndata << ['', '', '', '', sub_table,'','']\n```\n\nthus producing a table with 2 rows of 7 cells, the test passes.\n\nIf you change the first row to\n\n``` ruby\ndata = [['', '', '', '', '']]\n```\n\nthus producing a table with 2 rows of 5 cells, the test passes.\n\nBut back to your test case.\nI've taken a detailed look at the difference in width calculated by  :min_width_ignoring_span and  \n\n``` ruby\n:avg_spanned_min_width\n{0=>140.0, 1=>80.0, 2=>88.0, 3=>40.0, 4=>70.0, 5=>64.0, 6=>64.0}\n\n :min_width_ignoring_span\n{0=>140, 1=>80, 2=>88, 3=>40, 4=>192, 5=>0, 6=>0}\n```\n\nWhile I'm not sure why you need column 5 and 6, but I'm pretty sure that there is a bug related to avg_spanned_min_width. Since the sum of Column 4, 5 and 6 should be equal to 192 and not 198.\n\nInvestigating further I found out that the (wrong) size of column 4 relates to @min_width in Prawn::Table:Cell (cell.rb).\nSeems like this global variable doesn't get reset. The 70 is size of the first column of the subtable (that got build earlier). If you change it to 71 the size of column 4 is 71.\n\nThese are my initial findings. I'm not sure when I'll have more time to investigate this issue.\n. @sandal getting back to your question from above: In my opinion #632 does not seem to cover the same issue.\n. I can confirm the bug report.\n\nTestcase\n\n``` ruby\n    it \"illustrates issue #710\", :unresolved, :issue => 710 do\n      partial_width = 40\n      pdf = Prawn::Document.new({page_size: \"LETTER\", page_layout: :portrait})\n      col_widths = [\n        50,\n        partial_width, partial_width, partial_width, partial_width\n      ]\n\n      day_header = [{\n          content: \"Monday, August 5th, A.S. XLIX\",\n          colspan: 5,\n      }]\n\n      times = [{\n        content: \"Loc\",\n        colspan: 1,\n      }, {\n        content: \"8:00\",\n        colspan: 4,\n      }]\n\n      data = [ day_header ] + [ times ]\n\n      #raises Prawn::Errors::CannotFit:\n      #Table's width was set larger than its contents' maximum width (max width 210, requested 218.0)\n      table = Prawn::Table.new data, pdf, :column_widths => col_widths\n    end\n```\n\nI'll look into it and keep you updated.\n. Fixed with pull request 712.\n\n@sandal please review and merge\n\nThe problem was that only column 0 ever existed by itself. Column 1 to 4 where always merged. While I don't see a use case where this may be necessary, I do think that this error is still raised unexpectedly thus I fixed it.\n. Assigned to myself. I'll look into this issue.\nI'll be a lot faster if anyone can provide a failing test case for it.\n. I was thinking of an rspec test but nevermind, I found the time to create one.\n\n``` ruby\n  describe \"headers should allow for rowspan\" do \n    it \"should remember rowspans accross multiple pages\", :unresolved, :issue => 721 do \n      pdf = Prawn::Document.new({:page_size => \"A4\", :page_layout => :portrait})\n      rows = [ [{:content=>\"The\\nNumber\", :rowspan=>2}, {:content=>\"Prefixed\", :colspan=>2} ],\n           [\"A's\", \"B's\"] ]\n\n      (1..50).each do |n|\n        rows.push( [\"#{n}\", \"A#{n}\", \"B#{n}\"] )\n      end\n\n      pdf.table( rows, :header=>2 ) do\n         row(0..1).style :background_color=>\"FFFFCC\"\n      end\n\n      #ensure that the header on page 1 is identical to the header on page 0\n      output = PDF::Inspector::Page.analyze(pdf.render)\n      output.pages[0][:strings][0..4].should == output.pages[1][:strings][0..4]\n    end\n  end\n```\n\nI'll keep you posted.\n. Fixed in branch issue_721. @dmeranda can you confirm this?\n\n@sandal Once @dmeranda has confirmed the fix, pull request #723 should be ready to merge.\n. Assigned to myself. I'll look into this issue.\nI'll be a lot faster if anyone can provide a failing test case for it.\n. I can confirm the issue and that it is related to multi page tables.\nHere is a test case for this issue\n\n``` ruby\n  describe \"indent blocks should be reset on a new page\" do\n    it \"should reset indent blocks even when a centered table spans accross multiple pages\", :unresolved, :issue => 722 do\n      pdf = Prawn::Document.new\n      pdf.start_new_page margin: [100, 100, 100, 100]\n      pdf.stroke_axis\n      orig_bounds_width = pdf.bounds.width\n      pdf.formatted_text_box [ { :text => \"width: #{pdf.bounds.width}\" } ], :at => [0, 20]\n\n      pdf.indent(100) do\n        pdf.stroke_axis\n        pdf.formatted_text_box [ { :text => \"width: #{pdf.bounds.width}\" } ], :at => [0, 20]\n\n        # Problem only occurs when table too big to fit on one page, and position: :center is used\n        pdf.table([ ['Test'] ]*30, {position: :center})\n      end\n\n      pdf.start_new_page margin: [100, 100, 100, 100]\n      pdf.stroke_axis\n      # Observe: Width is 312.0, but should have been reset to 412.0\n      pdf.bounds.width.should == orig_bounds_width\n    end\n  end\n```\n\nI'll keep you updated.\n. I've further simplified the testcase\n\n``` ruby\n  describe \"indent blocks should be reset on a new page\" do\n    it \"should reset indent blocks even when a centered table spans accross multiple pages\", :unresolved, :issue => 722 do\n      pdf = Prawn::Document.new\n      pdf.start_new_page margin: [100, 100, 100, 100]\n      orig_bounds_width = pdf.bounds.width\n\n      pdf.indent(100) do\n        #bounds should be reduced by a 100\n        pdf.bounds.width.should == orig_bounds_width - 100\n\n        # Problem only occurs when table too big to fit on one page, and position: :center is used\n        pdf.table([ ['Test'] ]*30, {position: :center})\n      end\n\n      pdf.start_new_page margin: [100, 100, 100, 100]\n\n      # Observe: Width is 312.0, but should have been reset to 412.0\n      pdf.bounds.width.should == orig_bounds_width\n    end\n  end\n```\n. I'm unsure if the bug is in the table code or somewhere else. I couldn't figure out why a centered or left table lead to different results. @sandal or someone else, could you check out this bug or give me some pointers?\n\nFor some reason that I couldn't figure out yet, the following code behaves differently when the table in the test case is passed a position of :center or :left.\n\ngenerate_margin_box (document.rb)\n\n``` ruby\n# This check maintains indentation settings across page breaks\n      if old_margin_box\n        @margin_box.add_left_padding(old_margin_box.total_left_padding)\n        @margin_box.add_right_padding(old_margin_box.total_right_padding)\n      end\n```\n\nFor some reason this code thinks that the indentation block is not finished yet when the table was centered, but behaves as expected when the table was positioned to the left.\n. I've looked into this issue again and resolved it a little further.\n\nAfter investigation further my current guess is that the problematic code is located here:\n\n``` ruby\n    # Sets up a bounding box to position the table according to the specified\n    # :position option, and yields.\n    #\n    def with_position\n      x = case defined?(@position) && @position || :left\n          when :left   then return yield\n          when :center then (@pdf.bounds.width - width) / 2.0\n          when :right  then  @pdf.bounds.width - width\n          when Numeric then  @position\n          else raise ArgumentError, \"unknown position #{@position.inspect}\"\n          end\n      dy = @pdf.bounds.absolute_top - @pdf.y\n      final_y = nil\n\n      @pdf.bounding_box([x, @pdf.bounds.top], :width => width) do\n        @pdf.move_down dy\n        yield\n        final_y = @pdf.y\n      end\n\n      @pdf.y = final_y\n    end\n```\n\nThis code isn't very readable. So I'm a little lost. (That's why a lot of the table code should be refactored once I find time for it.)\n\nWhat I can provide you with is a workaround. Adding one line after the indent block solves the problem for me. Can you confirm this?\n\n``` ruby\npdf.margin_box.subtract_left_padding(100)\n```\n\nThe whole block\n\n``` ruby\npdf.indent(100) d\n  # Problem only occurs when table too big to fit on one page, and position: :center is used\n  pdf.table([ ['Test'] ]*30, {position: :center})\nend\npdf.margin_box.subtract_left_padding(100)\n```\n. I'm sorry that I've been unavailable for the last days / weeks.\nI'll look through it tomorrow. I love the feature, but since you're touching very complicated code that is finally bug free I want to make sure we really cover all possible scenarios with the test cases.\n. This will lead to lots of CannotFit errors if the content for the tables is dynamically generated. I do think that this is ok, but we would need to explicitly tell users to catch this error and adjust accordingly (bigger table, bigger columns or breaking words) in the documentation.\n\nI'm missing one test case (sorry if I overlooked it).\nA user specifies a column width that is too small for a word and the new option to not break words is set. This will raise a CannotFit Error (if I read the code correctly).\n\nOnce this is added I'll merge the pull request.\n\nAlso I'd love to document this feature before adding it to the code base. Any chance you'd update the manual too? (not a show stopper)\n. @sandal Yes. \nIf for example a user sets the column width and wants to ensure that the words don't break, this will lead to a CannotFit, or if multiple column widths are set and the remaining space for a longer than expected word won't fit, we're gonna have another CannotFit.\nI do think this is ok, since the only alternative would be to ignore the no_breaks_words option if column_widths don't match. Which seems kind of unexpected to me.\nAnd I wouldn't want to miss out on a good feature just because you have to be a little more careful when using it.\n\nTo ensure we don't get too many bug reports with this feature I do think it's vital to document it and document, that this error must be catched and resolved some how.\n\nI don't like the wording of the feature too. break_words sounds a lot better. If someone has another idea, keep them coming.\n. I think I've tracked the bug down, but haven't yet come up with a fix.\n\nFirst of all, here is a test case that you can add to table_spec.rb.\n\n```\ndescribe \"You can explicitly set the column widths and use a colspan > 1\" do\n  it \"should a colspan > 1 with given column_widths (issue #407)\" do\n    data = [ \n      [ { content: \"\", colspan: 3 } ],\n      [ \"\", \"\", \"\" ],\n    ]\n    pdf = Prawn::Document.new\n    table = Prawn::Table.new data, pdf, column_widths: [100 , 200, 240]\n  end\nend\n```\n\nThe problematic code is in the function aggregate_cell_values (lib/prawn/table/cells.rb).\n\n```\n  # Sum up a min/max value over rows or columns in the cells selected.\n  # Takes the min/max (per +aggregate+) of the result of sending +meth+ to\n  # each cell, grouped by +row_or_column+.\n  #\n  def aggregate_cell_values(row_or_column, meth, aggregate)\n    values = {}\n    each do |cell|\n      index = cell.send(row_or_column)\n      values[index] = [values[index], cell.send(meth)].compact.send(aggregate)\n    end\n    values.values.inject(0, &:+)\n  end\n```\n\nIn the given example it will calculate the avg column width (100+200+240)/3=180 and write it to values[0].\nvalues[1] and values[2] will be filled with the \"correct\" values of 200 and 240.\n\n```\nvalues => {0=>180.0, 1=>200.0, 2=>240.0}\n```\n\nThus leading to the error message when you sum it up (180+200+240) = 620.\n\nThe expected sum would be (100+200+240)=540 OR (180+180+180)=540.\n. I was able to fix the issue and expanded the test case to include more variations of the problem. \npull request #526\n. My pull request #526 has been merged into master. I think this issue can thus be marked as closed.\n. Issue reported by @sigmike is fixed in pull request #579 .\n\n@ksugiarto if you want to use the fixed version immediately, you may add the following line to your gemfile\n\n```\ngem 'prawn', :git => \"https://github.com/hbrandl/prawn.git\", :branch => \"issue_407_2\" \n```\n\nBut do use the original git repository once the pull request is merged, since the branch may not live forever in my forked repository.\n. I looked at the original repository created by @tomciopp and created two failing test cases.\nOne is the original, the other is a reduced one for the CannotFit error experienced by @sandal and myself.\n\nI don't think that this issue is related to an other ticket.\nLooking at the error message, the only one that may possibly be related are #643 or #628.\n\nI've added the failing test cases to the new branch issue_438 (https://github.com/prawnpdf/prawn/tree/issue_438) and created pull request #698.\n\nI can't promise any timeframe on when I'll have time to look at it, but I'll put it onto my todo list.\n. Just for reference, here are the test cases\n\n``` ruby\nit \"should render a correct table in a bounding box with given colspans\", :unresolved , :issue => 438 do\n      pdf = Prawn::Document.new\n      data = [  [ {:content => \"1\", :colspan => 8} ],\n                [1,2,3,4,5,6,7,8],\n                [1,2,3,4,5,6,7,8],\n                [1,2,3,4,5,6,7,8],\n                [1,2,3,4,5,6,7,8],\n                [1,2,3,4,5,6,7,8],\n                [1,2,3,4,5,6,7,8]\n      ]\n      pdf.bounding_box [pdf.bounds.left, pdf.cursor], :width => pdf.bounds.width, :height => 250 do\n        pdf.stroke_bounds\n        pdf.table(data, :width => pdf.bounds.width, :column_widths => {0 => 10, 1 => 10, 2 => 40, 3 => 100, 5 => 60, 6 => 40, 7 => 10}) do \n          cells.style height: 20\n        end\n      end\n    end\n\n    it \"should not throw a CannotFit Error\", :unresolved, :issue => 438 do\n      pdf = Prawn::Document.new\n      data = [  [ {:content => \"1\", :colspan => 8} ],\n                [1,2,3,4,5,6,7,8],\n                [1,2,3,4,5,6,7,8],\n                [1,2,3,4,5,6,7,8],\n                [1,2,3,4,5,6,7,8],\n                [1,2,3,4,5,6,7,8],\n                [1,2,3,4,5,6,7,8]\n      ]\n      column_widths = [10,10,40,100,60,40,10]\n      table = Prawn::Table.new data, pdf, :width => 300, :column_widths => column_widths\n    end\n```\n. The test cases and thus the original example have three problems.\n1) The width is only defined for 7 columns instead of 8.\n2) A width of 10 is too small taking into account the default margins of each cell.\n3) The width is set too large.\n\nWhen I fix these three issues, the test cases pass.\n\nI went back to the original code by @tomciopp and after fixing these problems and running \n\n```\nbundle update prawn\n```\n\nThe pdf output of table_width.pdf looks as expected.\nSeems like the problem has been fixed since rc1.\n. Since this bug was referenced in issue #407, I tried to reproduce / fix it.\n\nTo reproduce this bug, I used the following test case\n\n```\ndescribe \"bugreport\" do\n  it \"illustrates issue #502\" do\n    pdf = Prawn::Document.new\n    first = {:content=>\"Foooo fo foooooo\",:width=>50,:align=>:center}\n    second = {:content=>\"Foooo\",:colspan=>2,:width=>70,:align=>:center}\n    third = {:content=>\"fooooooooooo, fooooooooooooo, fooo, foooooo fooooo\",:width=>55,:align=>:center}\n    fourth = {:content=>\"Bar\",:width=>15,:align=>:center}\n\n    table_content = [[\n    first,\n    [[second],[third,fourth]]\n    ]]\n    pdf.move_down(20)\n    pdf.table(table_content)\n\n  end\nend\n```\n\nGoing back to commit 386998effa7ce299c749f47063d7ff426b8f980a, I was able to reproduce this bug.\n\n```\n1) Prawn::Table You can explicitly set the column widths and use a colspan > 1 illustrates issue #502\n Failure/Error: pdf.table(table_content)\n Prawn::Errors::CannotFit:\n   Table's width was set larger than its contents' maximum width (max width 70, requested 90.0)\n # ./lib/prawn/table.rb:372:in `column_widths'\n # ./lib/prawn/table.rb:551:in `set_column_widths'\n # ./lib/prawn/table.rb:137:in `initialize'\n # ./lib/prawn/table/cell.rb:185:in `new'\n # ./lib/prawn/table/cell.rb:185:in `make'\n # ./lib/prawn/table.rb:439:in `block (2 levels) in make_cells'\n # ./lib/prawn/table.rb:433:in `each'\n # ./lib/prawn/table.rb:433:in `block in make_cells'\n # ./lib/prawn/table.rb:431:in `each'\n # ./lib/prawn/table.rb:431:in `make_cells'\n # ./lib/prawn/table.rb:128:in `initialize'\n # ./lib/prawn/table.rb:27:in `new'\n # ./lib/prawn/table.rb:27:in `table'\n # ./spec/table_spec.rb:62:in `block (3 levels) in <top (required)>'\n```\n\nTo reproduce clone repository at https://github.com/hbrandl/prawn/tree/issue_502 and run rspec.\n\nThis test case passes without any problems using my fixes for issue #407 and #533.\n\nAfter pull request #534 is merged, one may add this test case, but I'm not sure if it is necessary.\n. @johnnyshields If you can build a failing test case, I'll look into the issue. Please try to minify the test case as much as possible so I can look at the isolated problem. A sketch of the expected pdf output would also be greatly appreciated. As well as any further info that you can provide.\n\nAnd while I'm not affiliated with prawnpdf, I would guess, that a new issue would be warranted, since this seems like a much more complex bug.\n. @johnnyshields Thank you.\nI'm getting the following output\n\n```\n1) Prawn::Table You can explicitly set the column widths and use a colspan > 1 should allow long strings in subtables when parent is width-constrained\n Failure/Error: pdf.table([[child_1], [child_2]], column_widths: [pdf.bounds.width/2]*2)\n Prawn::Errors::CannotFit:\n   Table's width was set too small to contain its contents (min width 540.0, requested 270.0)\n # ./lib/prawn/table.rb:366:in `column_widths'\n # ./lib/prawn/table.rb:551:in `set_column_widths'\n # ./lib/prawn/table.rb:137:in `initialize'\n # ./lib/prawn/table.rb:27:in `new'\n # ./lib/prawn/table.rb:27:in `table'\n # ./spec/table_spec.rb:94:in `block (3 levels) in <top (required)>'\n```\n\nIt is an error and probably a bug, but at least it's error description fits.\n\nI tried to hunt the bug down, but was not able to find a cause. All I could find is some very strange behaviour of ruby (1.9.3 and 1.8.7) or rpsec (2.14.1) or prawn in the aggregate_cell_value function.\nSome puts are called and some aren't.\nTo illustrate, take the code below and replace the current aggregate_cell_values function (only a few puts should be added)\n\n```\n  def aggregate_cell_values(row_or_column, meth, aggregate)\n    values = {}\n    puts \"entering aggregate_cell_values\"\n    #calculate values for all cells that do not span accross multiple cells\n    #this ensures that we don't have a problem if the first line includes\n    #a cell that spans across multiple cells\n    each do |cell|\n      #don't take spanned cells\n      if cell.colspan == 1 and cell.class != Prawn::Table::Cell::SpanDummy\n        index = cell.send(row_or_column)\n        values[index] = [values[index], cell.send(meth)].compact.send(aggregate)\n      end\n      index = cell.send(row_or_column)\n      puts \"A\"\n      puts \"B values[index]=#{values[index]} cell.send(meth)=#{cell.send(meth)}\"\n      puts \"values=#{values}\"\n    end\n\n    each do |cell|\n      index = cell.send(row_or_column)          \n      if cell.colspan > 1\n        #calculate current (old) return value before we do anything\n        old_sum = 0\n        cell.colspan.times { |i|\n          old_sum += values[index+i] unless values[index+i].nil?\n        }\n\n        #calculate future return value \n        new_sum = cell.send(meth) * cell.colspan\n\n        if new_sum >= old_sum\n          #not entirely sure why we need this line, but with it the tests pass\n          values[index] = [values[index], cell.send(meth)].compact.send(aggregate) \n          #overwrite the old values with the new ones, but only if all entries existed\n          entries_exist = true\n          cell.colspan.times { |i| entries_exist = false if values[index+i].nil? }\n          cell.colspan.times { |i|\n            values[index+i] = cell.send(meth) if entries_exist\n          }\n        end\n      else\n        if cell.class == Prawn::Table::Cell::SpanDummy\n          values[index] = [values[index], cell.send(meth)].compact.send(aggregate) \n        end\n      end\n    end\n    values.values.inject(0, &:+)\n  end\n```\n\nThe expected output would be something along the lines of\nentering aggregate_cell_values\n    A\n    B values[index]=...\n    values=...\n    A\n    B values[index]=...\n    values=...\n\nBut on my system it is\n    A\n    B values[index]=...\n    values=...\n    B values[index]=...\n    values=...\n\nI can't come up with any reason why the puts \"A\" wouldn't execute.\n\nSince I don't feel like chasing a bug in ruby or rspec down and/or since I can't see my mistake. I'm giving up on this bug.\n\nI'd suggest you file a new bug report, since this bug may be related, but is definitely a bug on a deeper level. \n. I'll give this a shot with a testcase\n\n``` ruby\nprawn_document(:page_size => \"A4\", :page_layout => :portrait) do |pdf|\n\n      table_data = Array.new\n      4000.times do table_data.push(['a','b','c']) end\n\n      column_widths = [50, 60, 400]\n      pdf.table(table_data, \n        :column_widths => column_widths\n      )\nend\n```\n\nOn my local machine this code does take ~ 22 seconds to produce a 125 page pdf.\nNot sure if this is too long. But it isn't lightening fast either.\n. pull request #534 fixes this issue\n. I can confirm, that this fails in current master.\nI'll open up a new issue, since this one involves subtables and not just a single table as in the original example.\n. I tried to provide code to reproduce this problem, but failed to do so.\n\nHere is the code I used trying to reproduce the problem. Hopefully this can be of some help to someone.\n\n``` ruby\nprawn_document(:page_size => \"A4\", :page_layout => :portrait) do |pdf|\n\n      table_data = Array.new\n      30.times do table_data.push(['a','b','c']) end\n      table_data.push([{:content => 'some text', :rowspan => 2}, 'b', 'c'])\n      table_data.push(['b','c'])\n      10.times do table_data.push(['a','b','c']) end\n\n      column_widths = [50, 60, 400]\n      pdf.table(table_data, \n        :column_widths => column_widths\n      )\nend\n```\n\nIf I switch 30.times to 31.times both rows will be moved to the second page.\n\nCan you provide a sample code to illustrate the glitched layout?\n. Thanks to the comment by @karpah I was able to create a failing test case. (pull request #708)\n\n``` ruby\ndescribe \"Text may be longer than the available space in a row on a single page\" do \n    it \"should not glitch the layout if there is too much text to fit onto a single row on a single page\", :unresolved, :issue => 562 do \n      pdf = Prawn::Document.new({:page_size => \"A4\", :page_layout => :portrait})\n\n      table_data = Array.new\n      text = \"This will be a very long text. \"\n      4.times do text += text end\n      table_data.push([{:content => text, :rowspan => 2}, 'b', 'c'])\n      table_data.push(['b','c'])\n\n      column_widths = [50, 60, 400]\n\n      table = Prawn::Table.new table_data, pdf,:column_widths => column_widths\n\n      #render the table onto the pdf\n      table.draw\n\n      #expected behavior would be for the long text to be cut off or an exception to be raised\n      #thus we only expect a single page\n      pdf.page_count.should == 1\n    end\n  end\n```\n\n@sandal and everyone else: What would an ideal expected behavior look like?\nPersonally I wouldn't want an exception to be raised, since the text may be user or dynamically generated. I'd prefer it, if would simple be cut off.\nHowever some way to ensure that your text fits would probably make sense. We could add a method that returns the maximum row height. Combined with some method that could calculate the needed row height we could ensure that the text fits in those cases where we don't want text to be cut off.\n. @packetmonkey I don't think this is a viable long term solution, since there may be multiple rows with clipped text. But it would be a good work around if we clip the text as a form of feedback.\n\n@donv I'm not sure if interacting with the table rendering is an easy option to implement. But if you've got an idea on how to go about it, I'm open to discussing it.\n\n@donv Could you elaborate on the last sentence of this comment https://github.com/prawnpdf/prawn/issues/562#issuecomment-39963334 I'm not sure I understand what you mean.\n\n@all\nClipping will probably be the easier option, but I do agree that splitting would be the best.\n\nIf prawn would split the text into multiple rows (first part in the last row on the current page, rest split into one row per page), I would expect the other columns to be empty unless they include a very long text too. Would you agree?\n. Seems like we have an agreement on the way to proceed.\n\nIf anyone wants to beat me on solving this issue, I'd be very happy to review pull requests. Otherwise I should find some time to fix this in the next two or three weeks.\n. I haven't found time yet. But it's on my todo list.\n. @sandal thanks for the quick reply. No worries, I can use my own branch for my production system.\n\nI've described the first bug in detail in this comment\nhttps://github.com/prawnpdf/prawn/issues/407#issuecomment-22005447\n\nHere we ran into the same faulty logic by the original code.\n\nI'll try to give you some quick background:\nAssuming we have a table with a width of 50 for column 1 and 200 for column 2. (Testcase provided by @sigmike.)\nAnd assuming we have a table data as follows\n\n``` ruby\ndata = [['', ''],\n        [{:content => '', :colspan => 2}]\n       ]\n```\n\nThe original code calculated the width as follows\nRow 1: [50,200]\nRow 2: \n(50+200)/2=125; 125 is bigger than 50 but smaller than 200\n=> [125,200]\n\nResulting in an obvious error. (Expected result would be [50,200] OR [125,125]. Either result would result in an end result of 250.)\n\nHope this helps.\n. @sandal I'd be happy to help out, but I'm not entirely sure what you're planning to do. Could you elaborate? Or should we get together on IRC?\n. I found a problem with this pull request (being using it on a project of mine).\n\nAmmending the test that \"illustrates issue #407 - comment 28556698\" to check the final column widths:\n\n``` ruby\n    it \"illustrates issue #407 - comment 28556698\" do\n      data = [['', ''],\n              [{:content => '', :colspan => 2}]\n              ]\n      pdf = Prawn::Document.new\n      table = Prawn::Table.new data, pdf, :column_widths => [50, 200]\n      table.column_widths.should == [50.0, 200.0]\n    end\n```\n\nyields an error:\n\n``` ruby\n  1) Prawn::Table You can explicitly set the column widths and use a colspan > 1 illustrates issue #407 - comment 28556698\n     Failure/Error: table.column_widths.should == [50.0, 200.0]\n       expected: [50.0, 200.0]\n            got: [125.0, 125.0] (using ==)\n     # ./spec/table_spec.rb:111\n```\n\nI'll push a fix to this problem, but this does break one test relating to issue #502 .\n\nI'm pretty sure that the cause is somewhere else. Probably natural_content_height.\nI'll look into this, fix it and then update this pull request again.\n. I'll try to get to this before christmas.\n. I've looked into the issue with the test case for (resolved) bug report #502.\n\nIt seems that - as I expected - the issue is not with the code touched by this commit. However since the code ensures that subtable cell/column widths are now as expected the specified width (15) is simply too small to hold the letter \"B\" (plus default space left & right). Thus the test case fails. \n\nIn the current master branch the subtables cells/columns will be larger than requested, thus the test case works.\n\nI've adapted the testcase (width to 20) see commit c914cf1b8c268472cc426733f3b55dcc38f42404 in pull request.\n\nI've also documented the bug I found in bug report #612 for further investigation by myself of whoever comes first.\n\nOver the course of the next few weeks I'll continue testing the code for bugs related to merged cells. Since that is what I currently need most.\nI don't know when I'll find time to work on issue #612.\n\nP.S.: I noticed that I left some unnecessary code in the mentioned commit, I've corrected this with a new commit. Sorry about that.\n. @sandal Yes, it's ready for review.\n. :+1: \n. @sandal Thanks for the quick response. In the futrure I'll use the prawnpdf repo. Sorry for the inconvenience.\n. I tried a rewording to better reflect that there are no standard attributes, but that they are fairly common (as far as I can tell).\n\nBut I'm fine with any solution.\n. The test case only addresses the change in column_width_calculator.rb.\nI'm pretty sure that the change in cells.rb addresses a bug too. But I don't know how to produce the floating point arithmetic error needed to prove it.\n. @jlduran I'm not sure I understand the expected output of this test case. Specifically these two lines\n\n``` ruby\n colspan = @pdf.make_cell :content => '', :colspan => 3\n    data = [['', '', '', '', colspan]]\n```\n\nIf I change data to\n\n``` ruby\n    data = [['', '', '', '', '']]\n```\n\nthe test case passes.\n\nYour table has 5 columns and in the fifth column you're adding a cell with a colspan of 3.\nWhat am I missing? Could you elaborate on the intended outcome of this test case?\n. Once @jlduran gets back to my question, I'll have a closer look at #632 too.\n. Thank you very much for your detailed description. I took a close look at the issue at hand. But please be adviced that I'm not a maintainer for prawn, just someone who wants to fix the tables and especially colspan issues.\n\n``` ruby\ncolspan = @pdf.make_cell :content => '', :colspan => 3\n    data = [['', '', '', '', colspan]]\n```\n\nis equivalent to\n\n``` ruby\n    data = [['', '', '', '', {:content => '', :colspan => 3}]]\n```\n\nThis line generates a row with 7 cells of which the last three are merged.\n\n``` ruby\n data << ['', '', '', '', sub_table]\n```\n\nThis line adds a row of 5 cells. Thus it is short of two cells to the preceeding row.\n\nFinally you declare column widths for 5 cells.\n\n``` ruby\n    @pdf.table(data) do\n      column(0).width = 140\n      column(1).width = 80\n      column(2).width = 88\n      column(3).width = 40\n      column(4).width = 192\n    end\n```\n\nIf you change the second row to\n\n``` ruby\ndata << ['', '', '', '', sub_table,'','']\n```\n\nthus producing a table with 2 rows of 7 cells, the test passes.\n\nIf you change the first row to\n\n``` ruby\ndata = [['', '', '', '', '']]\n```\n\nthus producing a table with 2 rows of 5 cells, the test passes.\n\nBut back to your test case.\nI've taken a detailed look at the difference in width calculated by  :min_width_ignoring_span and  \n\n``` ruby\n:avg_spanned_min_width\n{0=>140.0, 1=>80.0, 2=>88.0, 3=>40.0, 4=>70.0, 5=>64.0, 6=>64.0}\n\n :min_width_ignoring_span\n{0=>140, 1=>80, 2=>88, 3=>40, 4=>192, 5=>0, 6=>0}\n```\n\nWhile I'm not sure why you need column 5 and 6, but I'm pretty sure that there is a bug related to avg_spanned_min_width. Since the sum of Column 4, 5 and 6 should be equal to 192 and not 198.\n\nInvestigating further I found out that the (wrong) size of column 4 relates to @min_width in Prawn::Table:Cell (cell.rb).\nSeems like this global variable doesn't get reset. The 70 is size of the first column of the subtable (that got build earlier). If you change it to 71 the size of column 4 is 71.\n\nThese are my initial findings. I'm not sure when I'll have more time to investigate this issue.\n. @sandal getting back to your question from above: In my opinion #632 does not seem to cover the same issue.\n. I can confirm the bug report.\n\nTestcase\n\n``` ruby\n    it \"illustrates issue #710\", :unresolved, :issue => 710 do\n      partial_width = 40\n      pdf = Prawn::Document.new({page_size: \"LETTER\", page_layout: :portrait})\n      col_widths = [\n        50,\n        partial_width, partial_width, partial_width, partial_width\n      ]\n\n      day_header = [{\n          content: \"Monday, August 5th, A.S. XLIX\",\n          colspan: 5,\n      }]\n\n      times = [{\n        content: \"Loc\",\n        colspan: 1,\n      }, {\n        content: \"8:00\",\n        colspan: 4,\n      }]\n\n      data = [ day_header ] + [ times ]\n\n      #raises Prawn::Errors::CannotFit:\n      #Table's width was set larger than its contents' maximum width (max width 210, requested 218.0)\n      table = Prawn::Table.new data, pdf, :column_widths => col_widths\n    end\n```\n\nI'll look into it and keep you updated.\n. Fixed with pull request 712.\n\n@sandal please review and merge\n\nThe problem was that only column 0 ever existed by itself. Column 1 to 4 where always merged. While I don't see a use case where this may be necessary, I do think that this error is still raised unexpectedly thus I fixed it.\n. Assigned to myself. I'll look into this issue.\nI'll be a lot faster if anyone can provide a failing test case for it.\n. I was thinking of an rspec test but nevermind, I found the time to create one.\n\n``` ruby\n  describe \"headers should allow for rowspan\" do \n    it \"should remember rowspans accross multiple pages\", :unresolved, :issue => 721 do \n      pdf = Prawn::Document.new({:page_size => \"A4\", :page_layout => :portrait})\n      rows = [ [{:content=>\"The\\nNumber\", :rowspan=>2}, {:content=>\"Prefixed\", :colspan=>2} ],\n           [\"A's\", \"B's\"] ]\n\n      (1..50).each do |n|\n        rows.push( [\"#{n}\", \"A#{n}\", \"B#{n}\"] )\n      end\n\n      pdf.table( rows, :header=>2 ) do\n         row(0..1).style :background_color=>\"FFFFCC\"\n      end\n\n      #ensure that the header on page 1 is identical to the header on page 0\n      output = PDF::Inspector::Page.analyze(pdf.render)\n      output.pages[0][:strings][0..4].should == output.pages[1][:strings][0..4]\n    end\n  end\n```\n\nI'll keep you posted.\n. Fixed in branch issue_721. @dmeranda can you confirm this?\n\n@sandal Once @dmeranda has confirmed the fix, pull request #723 should be ready to merge.\n. Assigned to myself. I'll look into this issue.\nI'll be a lot faster if anyone can provide a failing test case for it.\n. I can confirm the issue and that it is related to multi page tables.\nHere is a test case for this issue\n\n``` ruby\n  describe \"indent blocks should be reset on a new page\" do\n    it \"should reset indent blocks even when a centered table spans accross multiple pages\", :unresolved, :issue => 722 do\n      pdf = Prawn::Document.new\n      pdf.start_new_page margin: [100, 100, 100, 100]\n      pdf.stroke_axis\n      orig_bounds_width = pdf.bounds.width\n      pdf.formatted_text_box [ { :text => \"width: #{pdf.bounds.width}\" } ], :at => [0, 20]\n\n      pdf.indent(100) do\n        pdf.stroke_axis\n        pdf.formatted_text_box [ { :text => \"width: #{pdf.bounds.width}\" } ], :at => [0, 20]\n\n        # Problem only occurs when table too big to fit on one page, and position: :center is used\n        pdf.table([ ['Test'] ]*30, {position: :center})\n      end\n\n      pdf.start_new_page margin: [100, 100, 100, 100]\n      pdf.stroke_axis\n      # Observe: Width is 312.0, but should have been reset to 412.0\n      pdf.bounds.width.should == orig_bounds_width\n    end\n  end\n```\n\nI'll keep you updated.\n. I've further simplified the testcase\n\n``` ruby\n  describe \"indent blocks should be reset on a new page\" do\n    it \"should reset indent blocks even when a centered table spans accross multiple pages\", :unresolved, :issue => 722 do\n      pdf = Prawn::Document.new\n      pdf.start_new_page margin: [100, 100, 100, 100]\n      orig_bounds_width = pdf.bounds.width\n\n      pdf.indent(100) do\n        #bounds should be reduced by a 100\n        pdf.bounds.width.should == orig_bounds_width - 100\n\n        # Problem only occurs when table too big to fit on one page, and position: :center is used\n        pdf.table([ ['Test'] ]*30, {position: :center})\n      end\n\n      pdf.start_new_page margin: [100, 100, 100, 100]\n\n      # Observe: Width is 312.0, but should have been reset to 412.0\n      pdf.bounds.width.should == orig_bounds_width\n    end\n  end\n```\n. I'm unsure if the bug is in the table code or somewhere else. I couldn't figure out why a centered or left table lead to different results. @sandal or someone else, could you check out this bug or give me some pointers?\n\nFor some reason that I couldn't figure out yet, the following code behaves differently when the table in the test case is passed a position of :center or :left.\n\ngenerate_margin_box (document.rb)\n\n``` ruby\n# This check maintains indentation settings across page breaks\n      if old_margin_box\n        @margin_box.add_left_padding(old_margin_box.total_left_padding)\n        @margin_box.add_right_padding(old_margin_box.total_right_padding)\n      end\n```\n\nFor some reason this code thinks that the indentation block is not finished yet when the table was centered, but behaves as expected when the table was positioned to the left.\n. I've looked into this issue again and resolved it a little further.\n\nAfter investigation further my current guess is that the problematic code is located here:\n\n``` ruby\n    # Sets up a bounding box to position the table according to the specified\n    # :position option, and yields.\n    #\n    def with_position\n      x = case defined?(@position) && @position || :left\n          when :left   then return yield\n          when :center then (@pdf.bounds.width - width) / 2.0\n          when :right  then  @pdf.bounds.width - width\n          when Numeric then  @position\n          else raise ArgumentError, \"unknown position #{@position.inspect}\"\n          end\n      dy = @pdf.bounds.absolute_top - @pdf.y\n      final_y = nil\n\n      @pdf.bounding_box([x, @pdf.bounds.top], :width => width) do\n        @pdf.move_down dy\n        yield\n        final_y = @pdf.y\n      end\n\n      @pdf.y = final_y\n    end\n```\n\nThis code isn't very readable. So I'm a little lost. (That's why a lot of the table code should be refactored once I find time for it.)\n\nWhat I can provide you with is a workaround. Adding one line after the indent block solves the problem for me. Can you confirm this?\n\n``` ruby\npdf.margin_box.subtract_left_padding(100)\n```\n\nThe whole block\n\n``` ruby\npdf.indent(100) d\n  # Problem only occurs when table too big to fit on one page, and position: :center is used\n  pdf.table([ ['Test'] ]*30, {position: :center})\nend\npdf.margin_box.subtract_left_padding(100)\n```\n. I'm sorry that I've been unavailable for the last days / weeks.\nI'll look through it tomorrow. I love the feature, but since you're touching very complicated code that is finally bug free I want to make sure we really cover all possible scenarios with the test cases.\n. This will lead to lots of CannotFit errors if the content for the tables is dynamically generated. I do think that this is ok, but we would need to explicitly tell users to catch this error and adjust accordingly (bigger table, bigger columns or breaking words) in the documentation.\n\nI'm missing one test case (sorry if I overlooked it).\nA user specifies a column width that is too small for a word and the new option to not break words is set. This will raise a CannotFit Error (if I read the code correctly).\n\nOnce this is added I'll merge the pull request.\n\nAlso I'd love to document this feature before adding it to the code base. Any chance you'd update the manual too? (not a show stopper)\n. @sandal Yes. \nIf for example a user sets the column width and wants to ensure that the words don't break, this will lead to a CannotFit, or if multiple column widths are set and the remaining space for a longer than expected word won't fit, we're gonna have another CannotFit.\nI do think this is ok, since the only alternative would be to ignore the no_breaks_words option if column_widths don't match. Which seems kind of unexpected to me.\nAnd I wouldn't want to miss out on a good feature just because you have to be a little more careful when using it.\n\nTo ensure we don't get too many bug reports with this feature I do think it's vital to document it and document, that this error must be catched and resolved some how.\n\nI don't like the wording of the feature too. break_words sounds a lot better. If someone has another idea, keep them coming.\n. ",
    "tfolk": "@sandal Fixes a long-standing issue for me, too. Thanks!\n. Did this go into 0.13.1? It still broken for me there, but\ngem 'prawn', :git => \"https://github.com/hbrandl/prawn.git\", :branch => \"issue_407_2\" \nworks fine.\n. @sandal Fixes a long-standing issue for me, too. Thanks!\n. Did this go into 0.13.1? It still broken for me there, but\ngem 'prawn', :git => \"https://github.com/hbrandl/prawn.git\", :branch => \"issue_407_2\" \nworks fine.\n. ",
    "straydogstudio": "I am facing this same issue. It appears the text is formatted for the cell before it is rotated. So if you have a narrow cell, the text is broken up for the narrow cell before rotation, so after rotation there is no way it can fit. The text_box method behaves the same. \n. Looks like the wrapping with old dimensions happens [here](https://github.com/prawnpdf/prawn/blob/master/lib/prawn/text/formatted/box.rb#L509).\n\nIf Prawn::Text::Formatted::Box#available_width is changed to:\n\n``` ruby\ndef available_width\n  if @rotate != 0\n    @height\n  else\n    @width\n  end\nend\n```\n\nthe wrapping works like it should. But then the rotation is a bit crazy if you specify the height, because the text is near the top of the cell, not the bottom. If I can I'll try to come up with a solution. It looks like cells need to be smarter about rotation (rotating and shifting it into place, either near the top, middle, or bottom.)\n. Actually, now that I look at my pdf closer, I notice the second row on the second page is not actually styled with the background color or bold font, but it does receive the bottom border that should go on the header.\n. Tried it out, and it is fixed. Thanks!\n. I didn't do any documentation or examples. I'll do that before this code is accepted. \n. This isn't ready, and I'm working on some cases that fail. Please do comment on the file structure or if it is desired.\n. I have some ideas for rewriting the wrap method for arbitrary angles. For a plain square it should be moderately straight forward. Given an angle, a cell, and line height, compute the length of text that can fit. Then, depending on if it fits or not, pick the right place of the cell to start with, and rotate/translate/place each line from there. Then you really only have top, bottom, left, right alignment if it is short. The challenge will be to make it simple to compute. I'll have to refresh my math brains!\n\nCan you think of any cases where rotate_around is useful for a table cell? I can't. Given the nature of a table cell, you want the text in the cell, so it should always rotate such that it stays in the cell. If that is the case, then rotate_around doesn't seem to apply, since rotating around any corner moves the text outside the cell. \n\nAngled text could be generalized for other boxes, but then rotate_around loses its meaning. You'd have to distinguish text rotation and box rotation. So I'm not sure if that is useful. \n\nHonestly, I'd love to see arbitrary polygon 'boxes', with text at an arbitrary angle flowing through the shape. Besides the math, that presents an api challenge too. \n\nI'll try to get more time on this next week. \n. I need to restructure my fork into branches, and I was silly enough to do work on master. I'll close this and resubmit it when I have angled cells working. \n. @MrPowers You can use the 'table_cell_rotation' branch on my fork: [prawn](https://github.com/straydogstudio/prawn/tree/table_cell_rotation). Specify the branch in your Gemfile:\n\n``` ruby\ngem 'prawn', git: 'git://github.com/straydogstudio/prawn.git', branch: 'table_cell_rotation'\n```\n\nRight now it only works for 90 degree rotations, left aligned text. (That works for most header applications.) You may still find better results if you specify the width of the cells. Please share data/code if you find problems, but post an issue on my branch.\n. @sandal Thanks! I look forward to helping out.\n\nI keep working on the rotated text code every week. I'm mainly working out edge cases. Sorry it is taking a while; I have a lot on my plate. \n. @airblade @sandal I've had success forcing the overflow encoding as `iso-8859-1` and re-encoding it as `UTF-8`:\n\n``` ruby\noverflow = overflow.force_encoding('iso-8859-1').encode('utf-8')\n```\n\nThis is on Ruby 2.0. Of course, forcing the encoding as `iso-8859-1` may still be incorrect. \n. Prawn does not provide a `.prawn` template handler for Rails, even though the MIME type is registered. That means you can't put the code in a template and have it work. You'd have to do everything in the controller, or in some model.\n\nBut you can look at [prawn-rails](https://github.com/cortiz/prawn-rails).\n. I am facing this same issue. It appears the text is formatted for the cell before it is rotated. So if you have a narrow cell, the text is broken up for the narrow cell before rotation, so after rotation there is no way it can fit. The text_box method behaves the same. \n. Looks like the wrapping with old dimensions happens [here](https://github.com/prawnpdf/prawn/blob/master/lib/prawn/text/formatted/box.rb#L509).\n\nIf Prawn::Text::Formatted::Box#available_width is changed to:\n\n``` ruby\ndef available_width\n  if @rotate != 0\n    @height\n  else\n    @width\n  end\nend\n```\n\nthe wrapping works like it should. But then the rotation is a bit crazy if you specify the height, because the text is near the top of the cell, not the bottom. If I can I'll try to come up with a solution. It looks like cells need to be smarter about rotation (rotating and shifting it into place, either near the top, middle, or bottom.)\n. Actually, now that I look at my pdf closer, I notice the second row on the second page is not actually styled with the background color or bold font, but it does receive the bottom border that should go on the header.\n. Tried it out, and it is fixed. Thanks!\n. I didn't do any documentation or examples. I'll do that before this code is accepted. \n. This isn't ready, and I'm working on some cases that fail. Please do comment on the file structure or if it is desired.\n. I have some ideas for rewriting the wrap method for arbitrary angles. For a plain square it should be moderately straight forward. Given an angle, a cell, and line height, compute the length of text that can fit. Then, depending on if it fits or not, pick the right place of the cell to start with, and rotate/translate/place each line from there. Then you really only have top, bottom, left, right alignment if it is short. The challenge will be to make it simple to compute. I'll have to refresh my math brains!\n\nCan you think of any cases where rotate_around is useful for a table cell? I can't. Given the nature of a table cell, you want the text in the cell, so it should always rotate such that it stays in the cell. If that is the case, then rotate_around doesn't seem to apply, since rotating around any corner moves the text outside the cell. \n\nAngled text could be generalized for other boxes, but then rotate_around loses its meaning. You'd have to distinguish text rotation and box rotation. So I'm not sure if that is useful. \n\nHonestly, I'd love to see arbitrary polygon 'boxes', with text at an arbitrary angle flowing through the shape. Besides the math, that presents an api challenge too. \n\nI'll try to get more time on this next week. \n. I need to restructure my fork into branches, and I was silly enough to do work on master. I'll close this and resubmit it when I have angled cells working. \n. @MrPowers You can use the 'table_cell_rotation' branch on my fork: [prawn](https://github.com/straydogstudio/prawn/tree/table_cell_rotation). Specify the branch in your Gemfile:\n\n``` ruby\ngem 'prawn', git: 'git://github.com/straydogstudio/prawn.git', branch: 'table_cell_rotation'\n```\n\nRight now it only works for 90 degree rotations, left aligned text. (That works for most header applications.) You may still find better results if you specify the width of the cells. Please share data/code if you find problems, but post an issue on my branch.\n. @sandal Thanks! I look forward to helping out.\n\nI keep working on the rotated text code every week. I'm mainly working out edge cases. Sorry it is taking a while; I have a lot on my plate. \n. @airblade @sandal I've had success forcing the overflow encoding as `iso-8859-1` and re-encoding it as `UTF-8`:\n\n``` ruby\noverflow = overflow.force_encoding('iso-8859-1').encode('utf-8')\n```\n\nThis is on Ruby 2.0. Of course, forcing the encoding as `iso-8859-1` may still be incorrect. \n. Prawn does not provide a `.prawn` template handler for Rails, even though the MIME type is registered. That means you can't put the code in a template and have it work. You'd have to do everything in the controller, or in some model.\n\nBut you can look at [prawn-rails](https://github.com/cortiz/prawn-rails).\n. ",
    "jasontduncan": "Same issue here, with text-only content.\n. Same issue here, with text-only content.\n. ",
    "zinkkrysty": "Yes that works. Thanks! \n. Hmm Ok I guess I should have that enabled in my development.rb in Rails\n\nThanks!\n. Yes that works. Thanks! \n. Hmm Ok I guess I should have that enabled in my development.rb in Rails\n\nThanks!\n. ",
    "txt8888": "Thanks for the comment.  Looking forward to the change.\n. Thanks for the comment.  Looking forward to the change.\n. ",
    "gasova": "Sorry for my late answer, as soon as possible I will. \nThanks. \n. yes sure I will be able to do it on this week-end, an let you know. I'm developing the site mgkmedya.com, and used prawn for the posts render\u0131ng to pdf. \n\nK\u0131nd regards. \n\nYour gem is really great.\n\nPS: Sorry if I couldn't give you a ready code on time. thanks to sgwanlee he'd made it.\n. Sorry for my late answer, as soon as possible I will. \nThanks. \n. yes sure I will be able to do it on this week-end, an let you know. I'm developing the site mgkmedya.com, and used prawn for the posts render\u0131ng to pdf. \n\nK\u0131nd regards. \n\nYour gem is really great.\n\nPS: Sorry if I couldn't give you a ready code on time. thanks to sgwanlee he'd made it.\n. ",
    "sgwanlee": "Hi, the same has occurred to me.\nHere's my script\n\n``` ruby\n    def question_img\n        image Rails.root.join(\"app/assets/images/#{@question.img}\"), width: 200, position: :center\n        move_down 20\n        # image \"http://ohdab.dev/assets/#{@question.img}\"\n    end\n\n    column_box([0, cursor], :columns => 2, :width => bounds.width) do\n        @questions.each do |question|\n            @question = question\n\n            text \". \" * 100\n            move_down 20\n\n            question_img\n\n            text \"_ \" * 1000\n            move_down 20\n        end\n    end\n```\n. Hi, the same has occurred to me.\nHere's my script\n\n``` ruby\n    def question_img\n        image Rails.root.join(\"app/assets/images/#{@question.img}\"), width: 200, position: :center\n        move_down 20\n        # image \"http://ohdab.dev/assets/#{@question.img}\"\n    end\n\n    column_box([0, cursor], :columns => 2, :width => bounds.width) do\n        @questions.each do |question|\n            @question = question\n\n            text \". \" * 100\n            move_down 20\n\n            question_img\n\n            text \"_ \" * 1000\n            move_down 20\n        end\n    end\n```\n. ",
    "tomukas": "As far as I tested, memory consumption increases if TTF fonts are loaded using font_families.update.\n\nI would be happy to support you in finding this leak, but my experience is a bit limited in this area.\n. As far as I tested, memory consumption increases if TTF fonts are loaded using font_families.update.\n\nI would be happy to support you in finding this leak, but my experience is a bit limited in this area.\n. ",
    "jayd189": "I have a template pdf that is actually multiple templates.\n\nSo I create my object, add it's image to the pdf and then save both.\nI do this until the page is full.\n\nThe problem is that when the pdf is opened again, the new image gets the same id as the previous image(s).  0\nSo when my pdf is complete, all the added images are the same.\n\nAn alternative solution, not sure how viable it is, could be to check if there are already images in the pdf and start the counter from the last one.\n. I have a template pdf that is actually multiple templates.\n\nSo I create my object, add it's image to the pdf and then save both.\nI do this until the page is full.\n\nThe problem is that when the pdf is opened again, the new image gets the same id as the previous image(s).  0\nSo when my pdf is complete, all the added images are the same.\n\nAn alternative solution, not sure how viable it is, could be to check if there are already images in the pdf and start the counter from the last one.\n. ",
    "willmcclellan": "I can confirm this issue and the fix provided above solves it. See my separate issue #540 for an example.\n\nBasically if you add more than one image to a single page, it only renders the first image multiple times.\n. I can confirm this issue and the fix provided above solves it. See my separate issue #540 for an example.\n\nBasically if you add more than one image to a single page, it only renders the first image multiple times.\n. ",
    "juankuquintana": "is this issue solved? its still happening to me\n. @sandal yes, im using a template, didnt know about dropped support.\n\nAny advice for generating the PDF, save it and add a watermark later? i was using a template for solving it.\n\nThanks \n. For the record, ended up using @jayd189 fork https://github.com/jayd189/prawn.\n\npdftk also does the job.\n. is this issue solved? its still happening to me\n. @sandal yes, im using a template, didnt know about dropped support.\n\nAny advice for generating the PDF, save it and add a watermark later? i was using a template for solving it.\n\nThanks \n. For the record, ended up using @jayd189 fork https://github.com/jayd189/prawn.\n\npdftk also does the job.\n. ",
    "nathany": "Any action on this PR? We were hoping to use FreeSans for additional glyphs, but we saw our memory usage go way up, so we had to revert to the included Helvetica font.\n. We've been running this on MRI in production for a few days now (merged to RC2). It would be great to get it wrapped up and included in the next RC.\n. Fyi, merged @kennethkalmer's branch with master (bd8af853a6f22778b50e68fba2cc75a90d749447) and all specs are passing on Ruby 1.9.3.\n. Fyi, we having be running with this branch in production for 5 months now. \n\nWe still have memory leaks somewhere, but that may not be related to Prawn.\n. @bradediger I'm working on a crude bisect to narrow down the commit, but I'm having to restart Rails between each checkout. I'll get back to you :-)\n\nBoth images use `pdf.image`, but the logo is a path where as the the map is using `open()` with a url, which afaik should be returning an IO object.\n. @bradediger @cheba Commit e3f5b66ba32e7b5b520fcaf889ff20ba1d2c65e3 is working where as commit e3f5b66ba32e7b5b520fcaf889ff20ba1d2c65e3 exhibits this issue. That points to the streams filters in 0e600ac5f1cb23bb8ef1e71274ccddb1f2dad0bc being the cause, which makes some sense. This is the relevant code from our app:\n\n``` rb\nmap_io = open(map_url)\npdf.image(map_io, {position: :center})\n```\n. I'm actually not seeing Prawn itself in the stack trace. Prawn rc2 -> master is the only change on the branch I'm testing, but it may be specific to our use of prawnto.\n\nSpecs pass on 1) but fail on 2) so those changes are definitely related.\n. Thanks. All specs pass. \n. Maybe we can add a spec to ensure that image() can accept an IO object (I believe that's what Paperclip returns). See you next week. Thanks again.\n. Any action on this PR? We were hoping to use FreeSans for additional glyphs, but we saw our memory usage go way up, so we had to revert to the included Helvetica font.\n. We've been running this on MRI in production for a few days now (merged to RC2). It would be great to get it wrapped up and included in the next RC.\n. Fyi, merged @kennethkalmer's branch with master (bd8af853a6f22778b50e68fba2cc75a90d749447) and all specs are passing on Ruby 1.9.3.\n. Fyi, we having be running with this branch in production for 5 months now. \n\nWe still have memory leaks somewhere, but that may not be related to Prawn.\n. @bradediger I'm working on a crude bisect to narrow down the commit, but I'm having to restart Rails between each checkout. I'll get back to you :-)\n\nBoth images use `pdf.image`, but the logo is a path where as the the map is using `open()` with a url, which afaik should be returning an IO object.\n. @bradediger @cheba Commit e3f5b66ba32e7b5b520fcaf889ff20ba1d2c65e3 is working where as commit e3f5b66ba32e7b5b520fcaf889ff20ba1d2c65e3 exhibits this issue. That points to the streams filters in 0e600ac5f1cb23bb8ef1e71274ccddb1f2dad0bc being the cause, which makes some sense. This is the relevant code from our app:\n\n``` rb\nmap_io = open(map_url)\npdf.image(map_io, {position: :center})\n```\n. I'm actually not seeing Prawn itself in the stack trace. Prawn rc2 -> master is the only change on the branch I'm testing, but it may be specific to our use of prawnto.\n\nSpecs pass on 1) but fail on 2) so those changes are definitely related.\n. Thanks. All specs pass. \n. Maybe we can add a spec to ensure that image() can accept an IO object (I believe that's what Paperclip returns). See you next week. Thanks again.\n. ",
    "woodhull": "What's the status on this -- are specs for FontMetricCache still needed before merging?\n. What's the status on this -- are specs for FontMetricCache still needed before merging?\n. ",
    "reggieb": "I'm not convinced its 419eca8 that is the problem. I think it is the line raising the error that is the problem:\n\nlib/prawn/core/reference.rb:36\n\nIf you comment that out, the manual gets built, and all the tests pass.\n\nDo you know what that line is trying to trap?\n. I'm not convinced its 419eca8 that is the problem. I think it is the line raising the error that is the problem:\n\nlib/prawn/core/reference.rb:36\n\nIf you comment that out, the manual gets built, and all the tests pass.\n\nDo you know what that line is trying to trap?\n. ",
    "kranz": "Solved problem even if I still do not understand why current code works on linux and not on windows.\n\nI was calling \"image\" passing a Rails Pathname object, not a string.\n\nSo under windows reading a Pathname ends with a wrong result, while under linux this return a file object correctly.\nSo the workaround is to call\n\n```\nimage Rails.root.join('app','assets','images','logo.png').to_s, :vposition => :top\n```\n. Solved problem even if I still do not understand why current code works on linux and not on windows.\n\nI was calling \"image\" passing a Rails Pathname object, not a string.\n\nSo under windows reading a Pathname ends with a wrong result, while under linux this return a file object correctly.\nSo the workaround is to call\n\n```\nimage Rails.root.join('app','assets','images','logo.png').to_s, :vposition => :top\n```\n. ",
    "J-F-Liu": "Normally box width is determined by column width, then the box height grow with its content.\nTo automatically determine the size of a box will involve a bit complex table layout algorithm, I found one in this page:\nhttp://www.freesoft.org/CIE/RFC/1942/18.htm\nBriefly, it uses two passes through the table data and scales linearly with the size of the table. In the first pass, line wrapping is disabled, and the user agent keeps track of the minimum and maximum width of each cell. The minimum and maximum cell widths are then used to determine the corresponding minimum and maximum widths for the columns. These in turn, are used to find the minimum and maximum width for the table. If the maximum width of the table is greater than the available space, but the minimum table width is smaller, distribute the difference between the available space and the minimum table width to each column in the second pass.\nFrom current source code, this algorithm is already applied to text cells. To cope with arbitary bounding box, the width of nested images and graphs need be taken in account.\n. The font file in the Windows\\Fonts folder, created a script as below:\n\n```\nrequire 'prawn'\n\nPrawn::Document.generate(\"test.pdf\") do\n  font(\"c:/Windows/Fonts/simsunb.ttf\") do\n    text \"\u5b8b\u4f53\uff0c\u662f\u4e3a\u9002\u5e94\u5370\u5237\u672f\u800c\u51fa\u73b0\u7684\u4e00\u79cd\u6c49\u5b57\u5b57\u4f53\u3002\u5e38\u7528\u4e8e\u4e66\u7c4d\u3001\u6742\u5fd7\u3001\u62a5\u7eb8\u5370\u5237\u7684\u6b63\u6587\u6392\u7248\u3002\n    \u4e2d\u56fd\u4e66\u6cd5\u548c\u96d5\u7248\u5370\u5237\u7684\u7ed3\u5408\u4ea7\u751f\u4e86\u5b8b\u4f53\u5b57\uff0c\u56e0\u6b64\uff0c\u5b8b\u4f53\u5b57\u4e0d\u4f46\u6709\u4e2d\u56fd\u4e66\u6cd5\u7684\u9b45\u529b\uff0c\u8fd8\u5177\u6709\u96d5\u7248\u5370\u5237\u53ca\u6728\u7248\u5200\u523b\u7684\u97f5\u5473\u3002\"\n    text \"Windows\u7cfb\u7edf\u7684\u4e2d\u6613\u5b8b\u4f53\uff08\u5b8b\u4f53\u3001\u65b0\u5b8b\u4f53\uff0c\u975e\u7b80\u4f53\u73af\u5883\u4e0b\u663e\u793a\u4e3aSimSun\u3001NSimSun\uff09\n    \u662f\u7531\u5317\u4eac\u4e2d\u6613\u4e2d\u6807\u7535\u5b50\u4fe1\u606f\u6280\u672f\u6709\u9650\u516c\u53f8\u5236\u4f5c\u7684\u7b80\u4f53\u5b57\u5b57\u4f53\uff1b\n    \u7e41\u4f53\u7684\u5b8b\u4f53\u5b57\u4f53\u5219\u662f\u534e\u5eb7\u79d1\u6280\u5236\u4f5c\u7684\u7ec6\u660e\u4f53\uff08\u7ec6\u660e\u4f53\u3001\u65b0\u7ec6\u660e\u4f53\uff0c\u975e\u7e41\u4f53\u73af\u5883\u4e0b\u663e\u793a\u4e3aMingLiU\u3001PMingLiU\uff09\u3002\n    Mac\u4e2d\u7684\u886c\u7ebf\u5b57\u4f53\u6709\u4fea\u5b8b Pro \uff08LiSongPro\uff09\u53ca\u82f9\u679c\u4fea\u7ec6\u5b8b\uff08LiSungLight\uff09\u3002\n    Linux\u53d1\u884c\u7248\u4e2d\u4f7f\u7528\u8f83\u591a\u7684\u6709AR PL \u4e0a\u6d77\u5b8b\uff08AR PL Uming\uff09\u548c\u5b8c\u5168\u6c11\u95f4\u5f00\u53d1\u7684\u6587\u6cc9\u9a7f\u70b9\u9635\u5b8b\u4f53\u3002\n    \u6b64\u5916\u7f51\u7edc\u4e0a\u8fd8\u6709\u6c11\u95f4\u5f00\u53d1\u7684\u201c\u534e\u79c0\u6708\u660e\u201d\u5b57\u4f53\u3002\"\n  end\nend\n```\n. The file size of simsunb.ttf is 16.1MB, I confirmed the issue is in ttfunk when comparing the result of simhei.ttf and simsunb.ttf by running ttfunk/examples/metrics.rb\n\n```\npostscript: SimHei\n-- FONT METRICS ----------------------------\nunits/em  : 256\nascent    : 220\ndescent   : -36\nline gap  : 36\nbbox      : (-3,-40)-(255,220)\n-- SIMPLE CHARACTER -> GLYPH LOOKUP --------\ncharacter     : \u6211\ncharacter code: 25105\nglyph id      : 6215\nglyph type    : simple\nglyph size    : 272b\nglyph bbox    : (14,-28)-(247,206)\n-- COMPOUND CHARACTER -> GLYPH LOOKUP ------\ncharacter     : \u4eec\ncharacter code: 20204\nglyph id      : 1314\nglyph type    : simple\nglyph size    : 168b\nglyph bbox    : (9,-27)-(232,210)\n```\n\n```\npostscript: SimSun-ExtB\n-- FONT METRICS ----------------------------\nunits/em  : 256\nascent    : 220\ndescent   : -36\nline gap  : 36\nbbox      : (0,-41)-(470,220)\n-- SIMPLE CHARACTER -> GLYPH LOOKUP --------\ncharacter     : \u6211\ncharacter code: 25105\nglyph id      : 0\nglyph type    : simple\nglyph size    : 34b\nglyph bbox    : (28,-13)-(224,193)\n-- COMPOUND CHARACTER -> GLYPH LOOKUP ------\ncharacter     : \u4eec\ncharacter code: 20204\nglyph id      : 0\nglyph type    : simple\nglyph size    : 34b\nglyph bbox    : (28,-13)-(224,193)\n```\n\nWith simsunb.ttf glyph id is 0 for all Chinese characters.\n. Well, this issue is not urgent now. I found a tool called [AiFont](http://www.joyiphone.net/AiFont/Index.aspx) and converted c:/Windows/Fonts/**simsun.ttc** to simsun.ttf, then this ttf file can be used to render PDF correctly.\n. Normally box width is determined by column width, then the box height grow with its content.\nTo automatically determine the size of a box will involve a bit complex table layout algorithm, I found one in this page:\nhttp://www.freesoft.org/CIE/RFC/1942/18.htm\nBriefly, it uses two passes through the table data and scales linearly with the size of the table. In the first pass, line wrapping is disabled, and the user agent keeps track of the minimum and maximum width of each cell. The minimum and maximum cell widths are then used to determine the corresponding minimum and maximum widths for the columns. These in turn, are used to find the minimum and maximum width for the table. If the maximum width of the table is greater than the available space, but the minimum table width is smaller, distribute the difference between the available space and the minimum table width to each column in the second pass.\nFrom current source code, this algorithm is already applied to text cells. To cope with arbitary bounding box, the width of nested images and graphs need be taken in account.\n. The font file in the Windows\\Fonts folder, created a script as below:\n\n```\nrequire 'prawn'\n\nPrawn::Document.generate(\"test.pdf\") do\n  font(\"c:/Windows/Fonts/simsunb.ttf\") do\n    text \"\u5b8b\u4f53\uff0c\u662f\u4e3a\u9002\u5e94\u5370\u5237\u672f\u800c\u51fa\u73b0\u7684\u4e00\u79cd\u6c49\u5b57\u5b57\u4f53\u3002\u5e38\u7528\u4e8e\u4e66\u7c4d\u3001\u6742\u5fd7\u3001\u62a5\u7eb8\u5370\u5237\u7684\u6b63\u6587\u6392\u7248\u3002\n    \u4e2d\u56fd\u4e66\u6cd5\u548c\u96d5\u7248\u5370\u5237\u7684\u7ed3\u5408\u4ea7\u751f\u4e86\u5b8b\u4f53\u5b57\uff0c\u56e0\u6b64\uff0c\u5b8b\u4f53\u5b57\u4e0d\u4f46\u6709\u4e2d\u56fd\u4e66\u6cd5\u7684\u9b45\u529b\uff0c\u8fd8\u5177\u6709\u96d5\u7248\u5370\u5237\u53ca\u6728\u7248\u5200\u523b\u7684\u97f5\u5473\u3002\"\n    text \"Windows\u7cfb\u7edf\u7684\u4e2d\u6613\u5b8b\u4f53\uff08\u5b8b\u4f53\u3001\u65b0\u5b8b\u4f53\uff0c\u975e\u7b80\u4f53\u73af\u5883\u4e0b\u663e\u793a\u4e3aSimSun\u3001NSimSun\uff09\n    \u662f\u7531\u5317\u4eac\u4e2d\u6613\u4e2d\u6807\u7535\u5b50\u4fe1\u606f\u6280\u672f\u6709\u9650\u516c\u53f8\u5236\u4f5c\u7684\u7b80\u4f53\u5b57\u5b57\u4f53\uff1b\n    \u7e41\u4f53\u7684\u5b8b\u4f53\u5b57\u4f53\u5219\u662f\u534e\u5eb7\u79d1\u6280\u5236\u4f5c\u7684\u7ec6\u660e\u4f53\uff08\u7ec6\u660e\u4f53\u3001\u65b0\u7ec6\u660e\u4f53\uff0c\u975e\u7e41\u4f53\u73af\u5883\u4e0b\u663e\u793a\u4e3aMingLiU\u3001PMingLiU\uff09\u3002\n    Mac\u4e2d\u7684\u886c\u7ebf\u5b57\u4f53\u6709\u4fea\u5b8b Pro \uff08LiSongPro\uff09\u53ca\u82f9\u679c\u4fea\u7ec6\u5b8b\uff08LiSungLight\uff09\u3002\n    Linux\u53d1\u884c\u7248\u4e2d\u4f7f\u7528\u8f83\u591a\u7684\u6709AR PL \u4e0a\u6d77\u5b8b\uff08AR PL Uming\uff09\u548c\u5b8c\u5168\u6c11\u95f4\u5f00\u53d1\u7684\u6587\u6cc9\u9a7f\u70b9\u9635\u5b8b\u4f53\u3002\n    \u6b64\u5916\u7f51\u7edc\u4e0a\u8fd8\u6709\u6c11\u95f4\u5f00\u53d1\u7684\u201c\u534e\u79c0\u6708\u660e\u201d\u5b57\u4f53\u3002\"\n  end\nend\n```\n. The file size of simsunb.ttf is 16.1MB, I confirmed the issue is in ttfunk when comparing the result of simhei.ttf and simsunb.ttf by running ttfunk/examples/metrics.rb\n\n```\npostscript: SimHei\n-- FONT METRICS ----------------------------\nunits/em  : 256\nascent    : 220\ndescent   : -36\nline gap  : 36\nbbox      : (-3,-40)-(255,220)\n-- SIMPLE CHARACTER -> GLYPH LOOKUP --------\ncharacter     : \u6211\ncharacter code: 25105\nglyph id      : 6215\nglyph type    : simple\nglyph size    : 272b\nglyph bbox    : (14,-28)-(247,206)\n-- COMPOUND CHARACTER -> GLYPH LOOKUP ------\ncharacter     : \u4eec\ncharacter code: 20204\nglyph id      : 1314\nglyph type    : simple\nglyph size    : 168b\nglyph bbox    : (9,-27)-(232,210)\n```\n\n```\npostscript: SimSun-ExtB\n-- FONT METRICS ----------------------------\nunits/em  : 256\nascent    : 220\ndescent   : -36\nline gap  : 36\nbbox      : (0,-41)-(470,220)\n-- SIMPLE CHARACTER -> GLYPH LOOKUP --------\ncharacter     : \u6211\ncharacter code: 25105\nglyph id      : 0\nglyph type    : simple\nglyph size    : 34b\nglyph bbox    : (28,-13)-(224,193)\n-- COMPOUND CHARACTER -> GLYPH LOOKUP ------\ncharacter     : \u4eec\ncharacter code: 20204\nglyph id      : 0\nglyph type    : simple\nglyph size    : 34b\nglyph bbox    : (28,-13)-(224,193)\n```\n\nWith simsunb.ttf glyph id is 0 for all Chinese characters.\n. Well, this issue is not urgent now. I found a tool called [AiFont](http://www.joyiphone.net/AiFont/Index.aspx) and converted c:/Windows/Fonts/**simsun.ttc** to simsun.ttf, then this ttf file can be used to render PDF correctly.\n. ",
    "tomciopp": "I have created a [repo](https://github.com/ciopte7/prawn-examples) with this failing test case:\n\nIf you want to run the examples to see what is breaking clone the repo and run\n`bundle exec ruby create_pdfs.rb`\n\nOr you can just view the broken pdfs in the pdf folder.\n. @yob @Bluejade @bradediger @jonsgreen @sandal If there is anything else I can provide to help clear up these issues please let me know. [Here is a repo with simple examples of the failures I am experiencing](https://github.com/ciopte7/prawn-examples)\n. I have created a [repo](https://github.com/ciopte7/prawn-examples) with this failing test case:\n\nIf you want to run the examples to see what is breaking clone the repo and run\n`bundle exec ruby create_pdfs.rb`\n\nOr you can just view the broken pdfs in the pdf folder.\n. @yob @Bluejade @bradediger @jonsgreen @sandal If there is anything else I can provide to help clear up these issues please let me know. [Here is a repo with simple examples of the failures I am experiencing](https://github.com/ciopte7/prawn-examples)\n. According to the [documentation](http://prawn.majesticseacreature.com/manual.pdf) (command + f `text/color`) and my previous use of prawn, the correct syntax is what I have previously specified. Either way, both expected solutions do not work.\n. Yes, I believe these two tickets describe the same issue. \n. I have created a [repo](https://github.com/ciopte7/prawn-examples) with this failing test case:\n\nIf you want to run the examples to see what is breaking clone the repo and run\n`bundle exec ruby create_pdfs.rb`\n\nOr you can just view the broken pdfs in the pdf folder.\n. @yob @Bluejade @bradediger @jonsgreen @sandal If there is anything else I can provide to help clear up these issues please let me know. [Here is a repo with simple examples of the failures I am experiencing](https://github.com/ciopte7/prawn-examples)\n. I have created a [repo](https://github.com/ciopte7/prawn-examples) with this failing test case:\n\nIf you want to run the examples to see what is breaking clone the repo and run\n`bundle exec ruby create_pdfs.rb`\n\nOr you can just view the broken pdfs in the pdf folder.\n. @yob @Bluejade @bradediger @jonsgreen @sandal If there is anything else I can provide to help clear up these issues please let me know. [Here is a repo with simple examples of the failures I am experiencing](https://github.com/ciopte7/prawn-examples)\n. According to the [documentation](http://prawn.majesticseacreature.com/manual.pdf) (command + f `text/color`) and my previous use of prawn, the correct syntax is what I have previously specified. Either way, both expected solutions do not work.\n. Yes, I believe these two tickets describe the same issue. \n. ",
    "felipeelias": "I have the same issue on 1.0 rc :(\n. I have the same issue on 1.0 rc :(\n. ",
    "sockmonk": "In the forms I use, I have some 'rows' that use full-width bounding boxes and nested bounding boxes, and some rows that just use full-width tables. On the parts of the page that have full-width tables, I didn't see any need for a containing bounding box. Is there any chance that would be a usable workaround in your case?\n. +1 for this suggestion. It might also be nice to have a version for at least the last officially stable release, which at this point I think was 0.12.0, simply because some people like to stick with stable versions. In the meantime, I'd suggest browsing the source of whichever version you're using to see what the actual api looks like for that version.\n. I don't object to the MIT license, but I'm a little curious about the motivation for the change. Has this actually been an issue for people using or considering using Prawn specifically? If the GPL license isn't actually hindering anyone from using it, why not leave it? \n. @sandal thanks for taking the time to explain. No objections at all (not like I've contributed code anyway), and thanks for all your work.\n. In the forms I use, I have some 'rows' that use full-width bounding boxes and nested bounding boxes, and some rows that just use full-width tables. On the parts of the page that have full-width tables, I didn't see any need for a containing bounding box. Is there any chance that would be a usable workaround in your case?\n. +1 for this suggestion. It might also be nice to have a version for at least the last officially stable release, which at this point I think was 0.12.0, simply because some people like to stick with stable versions. In the meantime, I'd suggest browsing the source of whichever version you're using to see what the actual api looks like for that version.\n. I don't object to the MIT license, but I'm a little curious about the motivation for the change. Has this actually been an issue for people using or considering using Prawn specifically? If the GPL license isn't actually hindering anyone from using it, why not leave it? \n. @sandal thanks for taking the time to explain. No objections at all (not like I've contributed code anyway), and thanks for all your work.\n. ",
    "ignasio": "When I trying to create table like this http://rghost.ru/46587227.view with prawn, it cause CannotFit error.Code below\nfirst = {:content=>\"Foooo fo foooooo\",:width=>50,:align=>:center}\nsecond = {:content=>\"Foooo\",:colspan=>2,:width=>70,:align=>:center}\nthird = {:content=>\"fooooooooooo, fooooooooooooo, fooo, foooooo fooooo\",:width=>55,:align=>:center}\nfourth = {:content=>\"Bar\",:width=>20,:align=>:center}\n\ntable_content = [[\n  first,\n  [[second],[third,fourth]]\n]]\npdf.move_down(20)\n  pdf.table(table_content)\n\nand when second width is 100 and third and forth 50 work fine, but this not for me\n. When I trying to create table like this http://rghost.ru/46587227.view with prawn, it cause CannotFit error.Code below\nfirst = {:content=>\"Foooo fo foooooo\",:width=>50,:align=>:center}\nsecond = {:content=>\"Foooo\",:colspan=>2,:width=>70,:align=>:center}\nthird = {:content=>\"fooooooooooo, fooooooooooooo, fooo, foooooo fooooo\",:width=>55,:align=>:center}\nfourth = {:content=>\"Bar\",:width=>20,:align=>:center}\n\ntable_content = [[\n  first,\n  [[second],[third,fourth]]\n]]\npdf.move_down(20)\n  pdf.table(table_content)\n\nand when second width is 100 and third and forth 50 work fine, but this not for me\n. ",
    "tobob": "I have solution\ndon't use Prawn::Table::Cell.new(\"something\", height: 45)\n\nmake table \ncontent = [[\"something\", \"something\"],[\"something\", \"something\"]\n\nand \ntable content,\n  vertical_padding: 8 <--- set correct value\n. I have solution\ndon't use Prawn::Table::Cell.new(\"something\", height: 45)\n\nmake table \ncontent = [[\"something\", \"something\"],[\"something\", \"something\"]\n\nand \ntable content,\n  vertical_padding: 8 <--- set correct value\n. ",
    "cassioalmeidas": "Ok, fixed, thank you !\n. Ok, fixed, thank you !\n. ",
    "hraynaud": "@geeknauta Hey friend reminder to close this issue.\n. Update:  This behavior appears only in production on Heroku. I can't readily reproduce it in my local environment. Is there some prawn specific dependency that works differently on Heroku vs a local OSX machine that might cause this issue?\n. I think I've resolved the issue by applying the **:fit** property to the image in the cell.  I'm closing for now.\n\nThanks\n. @geeknauta Hey friend reminder to close this issue.\n. Update:  This behavior appears only in production on Heroku. I can't readily reproduce it in my local environment. Is there some prawn specific dependency that works differently on Heroku vs a local OSX machine that might cause this issue?\n. I think I've resolved the issue by applying the **:fit** property to the image in the cell.  I'm closing for now.\n\nThanks\n. ",
    "rafapolo": "I get into https://gist.github.com/jlsync/1056925 which changes the :shrink_to_fit like this, \n![change](https://skitch-img.s3.amazonaws.com/20110704-k6qi3uww53uj6r97xta1cm6ba2.png)\n\nThat is it, thanks.\n;)\n. I get into https://gist.github.com/jlsync/1056925 which changes the :shrink_to_fit like this, \n![change](https://skitch-img.s3.amazonaws.com/20110704-k6qi3uww53uj6r97xta1cm6ba2.png)\n\nThat is it, thanks.\n;)\n. ",
    "plehoux": ":+1: \n. :+1: \n. ",
    "jlduran": "##### PrintScaling\n\n_(Optional; PDF 1.6)_ The page scaling option to be selected when a print dialog is displayed for this document. Valid values are `None`, which indicates that the print dialog should reflect no page scaling, and `AppDefault`, which indicates that applications should use the current print scaling. If this entry has an unrecognized value, applications should use the current print scaling. Default value: `AppDefault`.\n\n> **Note:** If the print dialog is suppressed and its parameters are provided directly by the application, the value of this entry should still be used.\n\n@welfare @sandal \n. ``` ruby\nPrawn::Document.generate(\"test.pdf\") do\n  text \"Test\"\n\n  # start_new_page\n  table([['Test', 'Test']])\n\n  start_new_page\n  text \"Test\"\n\n  number_pages \"Page <page>\", size: 24, style: :bold                                             \nend\n```\n. It will work, however in this case, the string is stored with the actual '<' sign.\nIt should not be the normal behavior.\n. @bvogel and @bradediger thank you for the feedback, I will escape it for now, however:\n\n``` ruby\ntext \"Using '>' (<i>greater-than</i>) is, often times, not fair\", :inline_format => true\n```\n\n> Using '>' (<i>greater-than</i>) is, often times, not fair\n. The problem seems to be in the [parser.rb](https://github.com/prawnpdf/prawn/blob/master/lib/prawn/text/formatted/parser.rb#L31) file (line 31), however, if you change it to\n\n``` ruby\n                         \"[^\\n]+\"\n```\n\nthe scan would't match the closing elements separately.\nThe following test illustrates my whole point:\n\n``` ruby\n\nit \"should accept <, >, and & without escaping\" do\n  string = \"hello <b><, >, and &</b>\"\n  array = Prawn::Text::Formatted::Parser.to_array(string)\n  array[1].should == { :text => \"<, >, and &\",\n                       :styles => [:bold],\n                       :color => nil,\n                       :link => nil,\n                       :anchor => nil,\n                       :font => nil,\n                       :size => nil,\n                       :character_spacing => nil }\nend\n```\n. Absolutely! Thanks @bradediger\n. Here is the issue with a simplified version of [regex_string](https://github.com/prawnpdf/prawn/blob/1.0.0.rc2/lib/prawn/text/formatted/parser.rb#L18-L31):\n\n``` ruby\n:001 > regex_string = /<i>|<\\/i>|[^<\\n]+/ # Simplified version\n => /<\\/i>|<i>|[^<\\n]+/\n:002 > \"<i>x > y</i>\".scan(regex_string)\n => [\"<i>\", \"x > y\", \"</i>\"]\n:003 > \"<i>x < y</i>\".scan(regex_string)\n => [\"<i>\", \"x \", \" y\", \"</i>\"]\n```\n. Nice! @gettalong\n. It is _still_ failing with the following test:\n\n``` ruby\ndescribe \"test case for issue 533\" do\n  it \"does no render the table\" do\n    @pdf = Prawn::Document.new\n    colspan = @pdf.make_cell :content => '', :colspan => 3\n    data = [['', '', '', '', colspan]]\n\n    sub_table = @pdf.make_table([[nil]]) do\n      column(0).width = 70\n      column(1).width = 38\n      column(2).width = 6\n      column(3).width = 78\n    end\n\n    data << ['', '', '', '', sub_table]\n\n    @pdf.table(data) do\n      column(0).width = 140\n      column(1).width = 80\n      column(2).width = 88\n      column(3).width = 40\n      column(4).width = 192\n    end\n  end\nend\n```\n\nI use the workaround provided in issue #407 in [this comment](https://github.com/prawnpdf/prawn/issues/407#issuecomment-9913165)\n. The figure illustrates the desired PDF output (obtained by means of the workaround). It ts a sample lab test report.\n\n![colspan-subtable-bug](https://gist.github.com/jlduran/8457978/raw/a60063967790663a1b3fd8c3d6b07a7ff2949682/colspan-subtable-bug.png)\n\nThe first row in the test's table is equivalent to the row containing the section heading in bold on the left (_Immunology/Serology_), and to the right a few details about the test (execution time, etc.). Those details to the right span 3 columns.\n\nThe second row in the test's table is equivalent to the one containig the actual test result (i.e. _FSH_), notice the last column (_Reference Range_) is actually a 4-column sub-table, to allow for proper alignment of the ranges.\n\nThe results cannot be placed in separate tables, as there are usually many test results per section that outgrow to other pages, thus the first row is used as a header/repeater.\n\n> Gist [8457978](https://gist.github.com/jlduran/8457978)\n\nEdit: You can use `:colspan => 4`, yields the same error.\n. Thank you!\n. ##### PrintScaling\n\n_(Optional; PDF 1.6)_ The page scaling option to be selected when a print dialog is displayed for this document. Valid values are `None`, which indicates that the print dialog should reflect no page scaling, and `AppDefault`, which indicates that applications should use the current print scaling. If this entry has an unrecognized value, applications should use the current print scaling. Default value: `AppDefault`.\n\n> **Note:** If the print dialog is suppressed and its parameters are provided directly by the application, the value of this entry should still be used.\n\n@welfare @sandal \n. ``` ruby\nPrawn::Document.generate(\"test.pdf\") do\n  text \"Test\"\n\n  # start_new_page\n  table([['Test', 'Test']])\n\n  start_new_page\n  text \"Test\"\n\n  number_pages \"Page <page>\", size: 24, style: :bold                                             \nend\n```\n. It will work, however in this case, the string is stored with the actual '<' sign.\nIt should not be the normal behavior.\n. @bvogel and @bradediger thank you for the feedback, I will escape it for now, however:\n\n``` ruby\ntext \"Using '>' (<i>greater-than</i>) is, often times, not fair\", :inline_format => true\n```\n\n> Using '>' (<i>greater-than</i>) is, often times, not fair\n. The problem seems to be in the [parser.rb](https://github.com/prawnpdf/prawn/blob/master/lib/prawn/text/formatted/parser.rb#L31) file (line 31), however, if you change it to\n\n``` ruby\n                         \"[^\\n]+\"\n```\n\nthe scan would't match the closing elements separately.\nThe following test illustrates my whole point:\n\n``` ruby\n\nit \"should accept <, >, and & without escaping\" do\n  string = \"hello <b><, >, and &</b>\"\n  array = Prawn::Text::Formatted::Parser.to_array(string)\n  array[1].should == { :text => \"<, >, and &\",\n                       :styles => [:bold],\n                       :color => nil,\n                       :link => nil,\n                       :anchor => nil,\n                       :font => nil,\n                       :size => nil,\n                       :character_spacing => nil }\nend\n```\n. Absolutely! Thanks @bradediger\n. Here is the issue with a simplified version of [regex_string](https://github.com/prawnpdf/prawn/blob/1.0.0.rc2/lib/prawn/text/formatted/parser.rb#L18-L31):\n\n``` ruby\n:001 > regex_string = /<i>|<\\/i>|[^<\\n]+/ # Simplified version\n => /<\\/i>|<i>|[^<\\n]+/\n:002 > \"<i>x > y</i>\".scan(regex_string)\n => [\"<i>\", \"x > y\", \"</i>\"]\n:003 > \"<i>x < y</i>\".scan(regex_string)\n => [\"<i>\", \"x \", \" y\", \"</i>\"]\n```\n. Nice! @gettalong\n. It is _still_ failing with the following test:\n\n``` ruby\ndescribe \"test case for issue 533\" do\n  it \"does no render the table\" do\n    @pdf = Prawn::Document.new\n    colspan = @pdf.make_cell :content => '', :colspan => 3\n    data = [['', '', '', '', colspan]]\n\n    sub_table = @pdf.make_table([[nil]]) do\n      column(0).width = 70\n      column(1).width = 38\n      column(2).width = 6\n      column(3).width = 78\n    end\n\n    data << ['', '', '', '', sub_table]\n\n    @pdf.table(data) do\n      column(0).width = 140\n      column(1).width = 80\n      column(2).width = 88\n      column(3).width = 40\n      column(4).width = 192\n    end\n  end\nend\n```\n\nI use the workaround provided in issue #407 in [this comment](https://github.com/prawnpdf/prawn/issues/407#issuecomment-9913165)\n. The figure illustrates the desired PDF output (obtained by means of the workaround). It ts a sample lab test report.\n\n![colspan-subtable-bug](https://gist.github.com/jlduran/8457978/raw/a60063967790663a1b3fd8c3d6b07a7ff2949682/colspan-subtable-bug.png)\n\nThe first row in the test's table is equivalent to the row containing the section heading in bold on the left (_Immunology/Serology_), and to the right a few details about the test (execution time, etc.). Those details to the right span 3 columns.\n\nThe second row in the test's table is equivalent to the one containig the actual test result (i.e. _FSH_), notice the last column (_Reference Range_) is actually a 4-column sub-table, to allow for proper alignment of the ranges.\n\nThe results cannot be placed in separate tables, as there are usually many test results per section that outgrow to other pages, thus the first row is used as a header/repeater.\n\n> Gist [8457978](https://gist.github.com/jlduran/8457978)\n\nEdit: You can use `:colspan => 4`, yields the same error.\n. Thank you!\n. ",
    "bwalton": "Any thoughts on this merging?\nThanks for your work @jcoleman\n. Any thoughts on this merging?\nThanks for your work @jcoleman\n. ",
    "JacobEvelyn": "Any reason this hasn't been merged yet? Thanks @jcoleman \n. Is this behavior correct?\n. Ah, thanks for the explanation.\n. Any reason this hasn't been merged yet? Thanks @jcoleman \n. Is this behavior correct?\n. Ah, thanks for the explanation.\n. ",
    "kfatehi": "You can also see my gist here that may have some more info: https://gist.github.com/keyvanfatehi/5053935\n\nI did not make an issue on rubinius, since there's already one for this problem: https://github.com/rubinius/rubinius/issues/2163\n. You can also see my gist here that may have some more info: https://gist.github.com/keyvanfatehi/5053935\n\nI did not make an issue on rubinius, since there's already one for this problem: https://github.com/rubinius/rubinius/issues/2163\n. ",
    "shanepinnell": "Oh yeah, oops...\n. Oh yeah, oops...\n. ",
    "ancorcruz": "+1, awesome foreword!\n. +1, awesome foreword!\n. ",
    "segfault88": "Yes, that helps - thanks a lot for the information! A shame this isn't possible, but oh well - I can deal with it another way.\n. Yes, that helps - thanks a lot for the information! A shame this isn't possible, but oh well - I can deal with it another way.\n. ",
    "ferrio": "I take that back.  When I ran the test in ruby I didn't have the rc2 installed.  Built it and reran it in a ruby script.\n\n/home/ferrio/.rvm/gems/ruby-1.9.3-p194/gems/prawn-1.0.0.rc2/lib/prawn/core/stream.rb:85:in `data': undefined local variable or method`f' for #Prawn::Core::Stream:0x00000001c09968 (NameError)\n    from /home/ferrio/.rvm/gems/ruby-1.9.3-p194/gems/prawn-1.0.0.rc2/lib/prawn/core/reference.rb:26:in `object'\n    from /home/ferrio/.rvm/gems/ruby-1.9.3-p194/gems/prawn-1.0.0.rc2/lib/prawn/core/document_state.rb:73:in`block in render_body'\n    from /home/ferrio/.rvm/gems/ruby-1.9.3-p194/gems/prawn-1.0.0.rc2/lib/prawn/core/object_store.rb:74:in `block in each'\n    from /home/ferrio/.rvm/gems/ruby-1.9.3-p194/gems/prawn-1.0.0.rc2/lib/prawn/core/object_store.rb:73:in`each'\n    from /home/ferrio/.rvm/gems/ruby-1.9.3-p194/gems/prawn-1.0.0.rc2/lib/prawn/core/object_store.rb:73:in `each'\n    from /home/ferrio/.rvm/gems/ruby-1.9.3-p194/gems/prawn-1.0.0.rc2/lib/prawn/core/document_state.rb:70:in`render_body'\n    from /home/ferrio/.rvm/gems/ruby-1.9.3-p194/gems/prawn-1.0.0.rc2/lib/prawn/document/internals.rb:140:in `render_body'\n    from /home/ferrio/.rvm/gems/ruby-1.9.3-p194/gems/prawn-1.0.0.rc2/lib/prawn/document.rb:364:in`render'\n    from /home/ferrio/.rvm/gems/ruby-1.9.3-p194/gems/prawn-1.0.0.rc2/lib/prawn/document.rb:378:in `block in render_file'\n    from /home/ferrio/.rvm/gems/ruby-1.9.3-p194/gems/prawn-1.0.0.rc2/lib/prawn/document.rb:378:in`open'\n    from /home/ferrio/.rvm/gems/ruby-1.9.3-p194/gems/prawn-1.0.0.rc2/lib/prawn/document.rb:378:in `render_file'\n    from /home/ferrio/.rvm/gems/ruby-1.9.3-p194/gems/prawn-1.0.0.rc2/lib/prawn/document.rb:123:in`generate'\n    from test.rb:3:in `<main>'\n\nThe ruby file:\n\nrequire 'prawn'\n\nPrawn::Document.generate('hello.pdf') do |pdf|\n  pdf.text(\"Hello Prawn!\")\npdf.image \"/home/ferrio/Rails/account/app/assets/images/logo2.png\", :width => 105, :at=>[0,738]\nend\n\nSo it still errors outside of rails, so the issue isn't with prawnto.  Hopefully this is reopened.\n. @cheba  Crap. You're right, I was running off of master.  Still kinda new to rails/ruby especially running code off of git.  If i pull down the rc2 tag it works fine.  Sorry for that confusion.\n. I take that back.  When I ran the test in ruby I didn't have the rc2 installed.  Built it and reran it in a ruby script.\n\n/home/ferrio/.rvm/gems/ruby-1.9.3-p194/gems/prawn-1.0.0.rc2/lib/prawn/core/stream.rb:85:in `data': undefined local variable or method`f' for #Prawn::Core::Stream:0x00000001c09968 (NameError)\n    from /home/ferrio/.rvm/gems/ruby-1.9.3-p194/gems/prawn-1.0.0.rc2/lib/prawn/core/reference.rb:26:in `object'\n    from /home/ferrio/.rvm/gems/ruby-1.9.3-p194/gems/prawn-1.0.0.rc2/lib/prawn/core/document_state.rb:73:in`block in render_body'\n    from /home/ferrio/.rvm/gems/ruby-1.9.3-p194/gems/prawn-1.0.0.rc2/lib/prawn/core/object_store.rb:74:in `block in each'\n    from /home/ferrio/.rvm/gems/ruby-1.9.3-p194/gems/prawn-1.0.0.rc2/lib/prawn/core/object_store.rb:73:in`each'\n    from /home/ferrio/.rvm/gems/ruby-1.9.3-p194/gems/prawn-1.0.0.rc2/lib/prawn/core/object_store.rb:73:in `each'\n    from /home/ferrio/.rvm/gems/ruby-1.9.3-p194/gems/prawn-1.0.0.rc2/lib/prawn/core/document_state.rb:70:in`render_body'\n    from /home/ferrio/.rvm/gems/ruby-1.9.3-p194/gems/prawn-1.0.0.rc2/lib/prawn/document/internals.rb:140:in `render_body'\n    from /home/ferrio/.rvm/gems/ruby-1.9.3-p194/gems/prawn-1.0.0.rc2/lib/prawn/document.rb:364:in`render'\n    from /home/ferrio/.rvm/gems/ruby-1.9.3-p194/gems/prawn-1.0.0.rc2/lib/prawn/document.rb:378:in `block in render_file'\n    from /home/ferrio/.rvm/gems/ruby-1.9.3-p194/gems/prawn-1.0.0.rc2/lib/prawn/document.rb:378:in`open'\n    from /home/ferrio/.rvm/gems/ruby-1.9.3-p194/gems/prawn-1.0.0.rc2/lib/prawn/document.rb:378:in `render_file'\n    from /home/ferrio/.rvm/gems/ruby-1.9.3-p194/gems/prawn-1.0.0.rc2/lib/prawn/document.rb:123:in`generate'\n    from test.rb:3:in `<main>'\n\nThe ruby file:\n\nrequire 'prawn'\n\nPrawn::Document.generate('hello.pdf') do |pdf|\n  pdf.text(\"Hello Prawn!\")\npdf.image \"/home/ferrio/Rails/account/app/assets/images/logo2.png\", :width => 105, :at=>[0,738]\nend\n\nSo it still errors outside of rails, so the issue isn't with prawnto.  Hopefully this is reopened.\n. @cheba  Crap. You're right, I was running off of master.  Still kinda new to rails/ruby especially running code off of git.  If i pull down the rc2 tag it works fine.  Sorry for that confusion.\n. ",
    "brunomeira": "@cheba Sure,\nI'm using prawn (1.0.0.rc2).\nUnfortunately I can't share the pdf that is throwing this exception. But I will try to find another one. I already forked the project and now I'm trying to see what is causing this exception.\nThe backtrace is(just a quick note, I used to use Aptana. Not anymore :) ) :\n\nNoMethodError - undefined method `identifier' for nil:NilClass:\n  /home/bruno/Aptana Studio 3 Workspace/prawn/lib/prawn/core/page.rb:163:in`init_from_object'\n  /home/bruno/Aptana Studio 3 Workspace/prawn/lib/prawn/core/page.rb:28:in `initialize'\n  /home/bruno/Aptana Studio 3 Workspace/prawn/lib/prawn/core/document_state.rb:37:in`new'\n  /home/bruno/Aptana Studio 3 Workspace/prawn/lib/prawn/core/document_state.rb:37:in `block in populate_pages_from_store'\n  /home/bruno/Aptana Studio 3 Workspace/prawn/lib/prawn/core/document_state.rb:35:in`each'\n  /home/bruno/Aptana Studio 3 Workspace/prawn/lib/prawn/core/document_state.rb:35:in `map'\n  /home/bruno/Aptana Studio 3 Workspace/prawn/lib/prawn/core/document_state.rb:35:in`populate_pages_from_store'\n  /home/bruno/Aptana Studio 3 Workspace/prawn/lib/prawn/document.rb:186:in `initialize'\n  /home/bruno/Aptana Studio 3 Workspace/prawn/lib/prawn/document.rb:122:in`new'\n  /home/bruno/Aptana Studio 3 Workspace/prawn/lib/prawn/document.rb:122:in `generate'\n. @cheba I don't know if this is related or not with the bug. But the pdf has as initial page a blank page and except by the second page all the others are numbered.\nI also debugged the code and found out that options[:object_id] returns 4 and when I check the value of document.data.store[4], it returns. document.state.store[4].data = {:Type=>:Page, :Parent=>3 0 R, :MediaBox=>[0, 0, 612, 792], :Resources=>{:ProcSet=>[:PDF, :Text, :ImageB, :ImageC, :ImageI]}, :Group=>{:Type=>:Group, :S=>:Transparency, :CS=>:DeviceRGB}, :Tabs=>:S}.\n\nHowever when I type document.data.store[5], it returns(:Contents is being displayed):  \n{:Type=>:Page, :Parent=>3 0 R, :Resources=>{:Font=>{:F1=>6 0 R, :F2=>9 0 R, :F3=>17 0 R, :F4=>20 0 R}, :ProcSet=>[:PDF, :Text, :ImageB, :ImageC, :ImageI]}, :MediaBox=>[0, 0, 612, 792], :Contents=>28 0 R, :Group=>{:Type=>:Group, :S=>:Transparency, :CS=>:DeviceRGB}, :Tabs=>:S, :StructParents=>0}\n\nTried here all morning but couldn't solve this problem. Any thought of what might be causing this?\n. @cheba Sure,\nI'm using prawn (1.0.0.rc2).\nUnfortunately I can't share the pdf that is throwing this exception. But I will try to find another one. I already forked the project and now I'm trying to see what is causing this exception.\nThe backtrace is(just a quick note, I used to use Aptana. Not anymore :) ) :\n\nNoMethodError - undefined method `identifier' for nil:NilClass:\n  /home/bruno/Aptana Studio 3 Workspace/prawn/lib/prawn/core/page.rb:163:in`init_from_object'\n  /home/bruno/Aptana Studio 3 Workspace/prawn/lib/prawn/core/page.rb:28:in `initialize'\n  /home/bruno/Aptana Studio 3 Workspace/prawn/lib/prawn/core/document_state.rb:37:in`new'\n  /home/bruno/Aptana Studio 3 Workspace/prawn/lib/prawn/core/document_state.rb:37:in `block in populate_pages_from_store'\n  /home/bruno/Aptana Studio 3 Workspace/prawn/lib/prawn/core/document_state.rb:35:in`each'\n  /home/bruno/Aptana Studio 3 Workspace/prawn/lib/prawn/core/document_state.rb:35:in `map'\n  /home/bruno/Aptana Studio 3 Workspace/prawn/lib/prawn/core/document_state.rb:35:in`populate_pages_from_store'\n  /home/bruno/Aptana Studio 3 Workspace/prawn/lib/prawn/document.rb:186:in `initialize'\n  /home/bruno/Aptana Studio 3 Workspace/prawn/lib/prawn/document.rb:122:in`new'\n  /home/bruno/Aptana Studio 3 Workspace/prawn/lib/prawn/document.rb:122:in `generate'\n. @cheba I don't know if this is related or not with the bug. But the pdf has as initial page a blank page and except by the second page all the others are numbered.\nI also debugged the code and found out that options[:object_id] returns 4 and when I check the value of document.data.store[4], it returns. document.state.store[4].data = {:Type=>:Page, :Parent=>3 0 R, :MediaBox=>[0, 0, 612, 792], :Resources=>{:ProcSet=>[:PDF, :Text, :ImageB, :ImageC, :ImageI]}, :Group=>{:Type=>:Group, :S=>:Transparency, :CS=>:DeviceRGB}, :Tabs=>:S}.\n\nHowever when I type document.data.store[5], it returns(:Contents is being displayed):  \n{:Type=>:Page, :Parent=>3 0 R, :Resources=>{:Font=>{:F1=>6 0 R, :F2=>9 0 R, :F3=>17 0 R, :F4=>20 0 R}, :ProcSet=>[:PDF, :Text, :ImageB, :ImageC, :ImageI]}, :MediaBox=>[0, 0, 612, 792], :Contents=>28 0 R, :Group=>{:Type=>:Group, :S=>:Transparency, :CS=>:DeviceRGB}, :Tabs=>:S, :StructParents=>0}\n\nTried here all morning but couldn't solve this problem. Any thought of what might be causing this?\n. ",
    "fringley": "I get this when attempting to use a template to create the PDF with.  It does work with other PDF templates - so must be down to the template file.  I will be able to supply a copy of the PDF that is causing the issue to help further debug this issue.  Im using Gem version 0.13.0\n. Right OK - Apologies for not seeing that.  Thanks for the information.\n. I get this when attempting to use a template to create the PDF with.  It does work with other PDF templates - so must be down to the template file.  I will be able to supply a copy of the PDF that is causing the issue to help further debug this issue.  Im using Gem version 0.13.0\n. Right OK - Apologies for not seeing that.  Thanks for the information.\n. ",
    "sirMackk": "I'm working on getting a non-confidential PDF that I could upload to here as an example. I've also researched further and found out that PDFs generated on my machine using the software I mentioned earlier work fine so the only difference I can find between the working and non-working documents is that the non-working ones were made on OSX 10.6.x. I'll look more into it and try to get some \"weird\" PDFs as soon as possible.\n\nThanks a lot!\n. Well, shiver me timbers, it appears this issue, whatever it exactly is, is fixed in rc2. I somehow missed the fact that rc2 exists, but when I loaded it up - it got everything working smoothly. \n\nAwesome! Thanks for this great gem and support.\n. I'm working on getting a non-confidential PDF that I could upload to here as an example. I've also researched further and found out that PDFs generated on my machine using the software I mentioned earlier work fine so the only difference I can find between the working and non-working documents is that the non-working ones were made on OSX 10.6.x. I'll look more into it and try to get some \"weird\" PDFs as soon as possible.\n\nThanks a lot!\n. Well, shiver me timbers, it appears this issue, whatever it exactly is, is fixed in rc2. I somehow missed the fact that rc2 exists, but when I loaded it up - it got everything working smoothly. \n\nAwesome! Thanks for this great gem and support.\n. ",
    "thmsmtylr": "+1\n. +1\n. ",
    "barthuttinga": "+1\n. +1\n. ",
    "umito": "I see the item is closed, but is this implemented or will this not be added? It's not really clear.\n. I see the item is closed, but is this implemented or will this not be added? It's not really clear.\n. ",
    "chloerei": "+1\n\nNoto Sans CJK is release as OTF format, is great if add OTF font support.\n\nhttp://www.google.com/get/noto/cjk.html\n. @mojavelinux Thanks a lot!\n. @mojavelinux Have some problem, I try this script:\n\n``` bash\n#!/usr/bin/env fontforge\nOpen($1)\nGenerate($1:r + \".ttf\")\n```\n\nThen:\n\n``` console\n$ chmod +x convert.pe\n$ ./convert.pe NotoSansCJKsc-Regular.otf\nCopyright (c) 2000-2012 by George Williams.\n Executable based on sources from 14:57 GMT 31-Jul-2012-ML.\n Library based on sources from 14:57 GMT 31-Jul-2012.\nThe following table(s) in the font have been ignored by FontForge\n  Ignoring 'DSIG' digital signature table\n  Ignoring 'VORG' vertical origin table\nWarning: Mac string is a subset of the Windows string in the 'name' table\n  for the Designer string in the English (US) language.\nWarning: Mac string is a subset of the Windows string in the 'name' table\n  for the Descriptor string in the English (US) language.\n```\n\nSize of NotoSansCJKsc-Regular.otf is 15.6MB, but the result ttf is 6.3KB. Seems like it lose all CJK fonts. fontforge version is 20120731.b-5 in ubuntu. I do some search but can not solve it, have any idea?\n. @sandal I want to use Noto CJK font in Prawn, but the font is release as OTF format, so I think I should covert it to TTF format. I'm not subset it.\n. @sandal Thanks. I hope prawn will support OTF font, then not need to cover fonts.\n. +1\n\nNoto Sans CJK is release as OTF format, is great if add OTF font support.\n\nhttp://www.google.com/get/noto/cjk.html\n. @mojavelinux Thanks a lot!\n. @mojavelinux Have some problem, I try this script:\n\n``` bash\n#!/usr/bin/env fontforge\nOpen($1)\nGenerate($1:r + \".ttf\")\n```\n\nThen:\n\n``` console\n$ chmod +x convert.pe\n$ ./convert.pe NotoSansCJKsc-Regular.otf\nCopyright (c) 2000-2012 by George Williams.\n Executable based on sources from 14:57 GMT 31-Jul-2012-ML.\n Library based on sources from 14:57 GMT 31-Jul-2012.\nThe following table(s) in the font have been ignored by FontForge\n  Ignoring 'DSIG' digital signature table\n  Ignoring 'VORG' vertical origin table\nWarning: Mac string is a subset of the Windows string in the 'name' table\n  for the Designer string in the English (US) language.\nWarning: Mac string is a subset of the Windows string in the 'name' table\n  for the Descriptor string in the English (US) language.\n```\n\nSize of NotoSansCJKsc-Regular.otf is 15.6MB, but the result ttf is 6.3KB. Seems like it lose all CJK fonts. fontforge version is 20120731.b-5 in ubuntu. I do some search but can not solve it, have any idea?\n. @sandal I want to use Noto CJK font in Prawn, but the font is release as OTF format, so I think I should covert it to TTF format. I'm not subset it.\n. @sandal Thanks. I hope prawn will support OTF font, then not need to cover fonts.\n. ",
    "benhourigan": "+1\n. +1\n. ",
    "benfyvie": "posted to wrong github project...major FAIL on my part\n. posted to wrong github project...major FAIL on my part\n. ",
    "nicdal": "+1\n. +1\n. ",
    "dmarkow": "@jlduran My example is simplified; in my use case, I can't use `number_pages` because I'm doing additional formatting (I'm actually using a table in my repeater) and don't want the number in the exact place `number_pages` will put it.\n. Is there a reason this was closed? It hasn't had any updates, but it is still an issue. (I just tested it on the master branch and it's still exhibiting the same problem).\n. Thanks! I did a comparison with and without the table and looked at the generated PDF files. I then manually removed the chunk relating to the table from the file with a table. After doing so, there was one difference between the files.\n\nWith a table on Page 1, the repeater code looks like this:\n\n```\nq\n/DeviceRGB cs\n0.000 0.000 0.000 scn\n0.000 0.000 0.000 SCN\n1 w\n0 J\n0 j\n[ ] 0 d\n\nBT\n36 127.384 Td\n/F1.0 12 Tf\n[<50> 40 <6167652032>] TJ\nET\n\nQ\n```\n\nAnd without a table, it looks like this:\n\n```\nq\n/DeviceRGB cs\n0.000 0.000 0.000 scn\n/DeviceRGB CS\n0.000 0.000 0.000 SCN\n1 w\n0 J\n0 j\n[ ] 0 d\n\nBT\n36 127.384 Td\n/F1.0 12 Tf\n[<50> 40 <6167652032>] TJ\nET\n\nQ\n```\n\nThe file with a table appears to be missing a `/DeviceRGB CS` near the beginning. When I manually add it, the file shows the table and the repeater perfectly. This is the first time I've ever looked at the source of a PDF file, so I'm not sure exactly what these codes are doing, but I'll try and dig into the prawn source code to see if I can figure it out.\n. Dug in a little more. Part of the table code includes a `draw_borders(pt)` method. If I clear out this method, everything works fine. I started removing a bit of code at a time and it looks like even this super simple code causes the issue:\n\n``` ruby\nclass Table\n  class Cell\n    def draw_borders(pt)\n      @pdf.mask(:line_width, :stroke_color) do\n      end\n    end\n  end\nend\n```\n\nIf I remove `stroke_color` from the list of values to mask, it works fine. Digging into the `mask` method, I threw some debug statements in before/after the yield to see if `stroke_color` is getting properly reset, which it is:\n\n``` ruby\nclass Document\n  def mask(*fields) # :nodoc:\n    # Stores the current state of the named attributes, executes the block, and\n    # then restores the original values after the block has executed.\n    # -- I will remove the nodoc if/when this feature is a little less hacky\n\n    puts \"stroke_color before: #{stroke_color}\" # Outputs 000000\n    stored = {}\n    fields.each { |f| stored[f] = send(f) }\n    yield\n    fields.each { |f| send(\"#{f}=\", stored[f]) }\n    puts \"stroke_color after: #{stroke_color}\" # Outputs 000000\n  end\nend\n```\n\nThe only thing I can think of is that maybe there's something about the way sending `stroke_color=` works that's causing this? I'll keep digging...\n. Ok, so here's the code within `set_color` that is being called.\n\n```\nset_color_space type, color_space(color)\ncolor = color_to_s(color)\nwrite_color(color, operator)\n```\n\nThe problem is within `set_color_space`:\n\n```\nreturn if current_color_space(type) == color_space && !state.page.in_stamp_stream?\n```\n\nThe stroke colorspace for DeviceRGB is already set, so it's not setting it again. However, the `write_color` line still executes anyway. So this is why we have the missing DeviceRGB line, but still have the `0.000 0.000 0.000 SCN` line being written anyway.\n\nComing back to my earlier comparison, the same way adding the `/DeviceRGB CS` line fixed the problem, just removing the `0.000 0.000 0.000 SCN` line also fixes the problem.\n\nSo at this point I'm not sure which is best: Adding a conditional to `write_color` too to make sure it doesn't write the same stroke color that's already set, or removing the conditional from `set_color_space`?\n. Yeah, I can get a spec written up, my only question is: what's the \"correct\" output?\n\n```\n/DeviceRGB cs\n0.000 0.000 0.000 scn\n/DeviceRGB CS\n0.000 0.000 0.000 SCN\n```\n\nor\n\n```\n/DeviceRGB cs\n0.000 0.000 0.000 scn\n```\n\nI would assume it would be best to err on the side of caution and explicitly set the colorspace again even if it's already set, but I'm not super familiar with the inner workings of the PDF format.\n. I understand the case difference. I'm just confused why this (the \"bad\" output from the original issue) doesn't work:\n\n```\n/DeviceRGB cs\n0.000 0.000 0.000 scn\n0.000 0.000 0.000 SCN\n```\n\nCurrently, prawn skips the `/DeviceRGB CS` line because it thinks the current stroke colorspace is already RGB. So shouldn't the `0.000 0.000 0.000 SCN` line, setting the stroke color to black, work fine?\n\nI'm inclined to remove the conditional and allow setting `/DeviceRGB CS` even if it's already set, but I don't know what the side-effects of that would be (I tried removing it and all the specs still pass...)\n. I think this has to do with the way the repeater runs. After all the pages are generated, it goes back and runs the repeater on each page.\n\nI threw a `puts` line in the `run` method for the repeater so we can see what the graphic state is for each page's repeater. When I have a table on the first page, the graphics state already has the stroke color space set to DeviceRGB\n\n```\n#<PDF::Core::GraphicState:0x007f9eef963170 @color_space={:stroke=>:DeviceRGB}, @fill_color=\"000000\", @stroke_color=\"000000\", @dash={:dash=>nil, :space=>nil, :phase=>0}, @cap_style=:butt, @join_style=:miter, @line_width=1>\n#<PDF::Core::GraphicState:0x007f9eeee0ba70 @color_space={:stroke=>:DeviceRGB}, @fill_color=\"000000\", @stroke_color=\"000000\", @dash={:dash=>nil, :space=>nil, :phase=>0}, @cap_style=:butt, @join_style=:miter, @line_width=1>\n```\n\nWhen I add a `start_new_page` to push the table to the second page, though, it clears out the stroke color space, causing it to be re-defined on each page, which is why it displays properly:\n\n```\n#<PDF::Core::GraphicState:0x007fdc1b7202a0 @color_space={}, @fill_color=\"000000\", @stroke_color=\"000000\", @dash={:dash=>nil, :space=>nil, :phase=>0}, @cap_style=:butt, @join_style=:miter, @line_width=1>\n#<PDF::Core::GraphicState:0x007fdc1bf9e008 @color_space={}, @fill_color=\"000000\", @stroke_color=\"000000\", @dash={:dash=>nil, :space=>nil, :phase=>0}, @cap_style=:butt, @join_style=:miter, @line_width=1>\n#<PDF::Core::GraphicState:0x007fdc1bf7a2c0 @color_space={}, @fill_color=\"000000\", @stroke_color=\"000000\", @dash={:dash=>nil, :space=>nil, :phase=>0}, @cap_style=:butt, @join_style=:miter, @line_width=1>\n```\n\nThere must be something telling the repeater to always use the first page's graphic state, even if we're running on a different page?\n. Thanks for pointing me in the right direction. I think (hope) I'm making some progress.\n\nIn my original example, moving the repeater code to the **bottom** of the `generate` block makes it work perfectly fine for both Page 1/2. Looking at `Repeater#initialize`, it looks like `@graphic_state` is set to whatever the current page's graphic state is when the repeater is declared. Since my second page doesn't have a table on it, the repeater state for that page doesn't have the stroke colorspace set. Since that's now the page where I define the repeater, it starts with a \"clean\" graphic state.\n\nIt looks like when the repeater runs, it executes `@document.save_graphics_state(@graphic_state)` for each page. `save_graphics_state(graphic_state)` calls `save_graphic_state(previous_state)`, which then initializes a new GraphicState object based on `previous_state` which is set to that `@graphic_state` variable. So now the new \"clean\" state has inherited the `color_space` parameter from `@graphic_state`.\n\nSo whatever state was used to initialize `@graphic_state` is used for **every** page, rather than the actual current page's state (which is why having a table-free Page 1 allowed for a relatively \"clean\" graphic state for my repeater).\n\nIt looks like, in the `run` method, `@document.graphic_state` does correctly refers to the current page's state for each iteration. So could we possibly avoid using the parameter altogether, causing it to push a new graphic state onto the stack based on the current page's state rather than Page 1's state?\n\n```\n@document.save_graphics_state do\n  @document.send(:freeze_stamp_graphics)\n  @block.call\nend\n```\n. We do have this spec, which says that we should be using the graphic state in place when we created the repeater.\n\n```\n    context \"dynamic repeaters\" do\n      it \"should preserve the graphic state at creation time\" do\n```\n\nLooking at some other specs, I came across _Document with a stamp should save the color space even when same as current page color space_. So it seems that stamps had the same issue with using the stamp on a page with a different color_space, and a solution was added to force the color space to be set if it was being set from a stamp:\n\n```\ndef set_color_space(type, color_space)\n  # don't set the same color space again\n  return if current_color_space(type) == color_space && !state.page.in_stamp_stream?\n```\n\nI think this is why non-dynamic repeaters don't exhibit the same issue: non-dynamic repeaters are just stamps, whereas dynamic repeaters are a little more complex.\n. Now, the expected behavior may be \"the repeater should use the exact state in place when it was defined\", but it actually doesn't appear to be doing that. I'm defining my table **after** defining my repeater, but it's being affected by the stroke color_space set by the table anyway.\n\nI looked at the Repeater class's initializer and noticed that it `dup`'s the current graphic_state, but it does **not** `dup` the `color_space`. Ruby just points the new `@graphic_state` variable's `color_space` to the same hash as the source, so if we change the color_space after defining the repeater, it will actually affect the \"frozen\" repeater. This is why my defining a table added the stroke color_space to my \"frozen\" repeater.\n\nBy utilizing `GraphicState.new`, which properly dups the hashes, my problem is fixed:\n\n``` ruby\nclass Repeater #:nodoc:\n  ...\n  def initialize(document, page_filter, dynamic = false, &block)\n    ...\n    @graphic_state = PDF::Core::GraphicState.new(document.state.page.graphic_state)\n```\n\nI don't know how I feel about that method call, but it works (a better way might be to add a `copy` method to `GraphicState`, or override `initialize_copy` to properly dup the hashes, though that would only be compatible with ruby 1.9 and newer).\n\nThat being said, if made a table and then defined my repeater, I'd still have the same issue all over again, even with the added line above.\n\n---\n\nI agree that repeaters should not use the current page's state. However, I also don't think they should inherit **anything** when they are defined. Rather, they should be completely separate entities, starting with a perfectly clear state (e.g. black fill/stroke, empty color space, etc.). \n\nI think inheriting graphic state attributes that were defined before the repeater is misleading. And by inheriting the current graphic state, moving the repeater code to different parts of the `generate` block can have a huge effect on the appearance of the repeater, whereas I would expect it to look the same regardless of where I defined it.\n\nRight now, the only way to get the repeater to behave completely independent of the rest of the document's graphic state is to define the repeater before you do anything else (at least once the `dup` bug I mentioned above is fixed).\n. Thanks a ton for all your help. No rush, my branch is fixing the problem for me for the time being.\n. It's been a while since I looked at this, but I'm pretty sure it was resolved by #635, so I'm gonna close it. Thanks!\n. I contributed some code after the list was made :+1: \n. Whoops, I completely spaced on the fact that strings are mutable. Duh.\n\nThe immutable objects shouldn't need to be specifically copied within the `initialize_copy` method, since calling something like `@graphic_state.dup` already copies _all_ the attributes. The `initialize_copy` method is only to do something different than the default (in this case, to `dup` the mutable attributes). Or maybe you added them since you're now calling `initialize_copy` directly from the main `initialize` method?\n\nJust want to make sure I'm not missing something. Thanks for merging!\n. I can confirm Adobe Acrobat Pro XI on Mac gives an error for this page:\n\n> There was an error processing a page. There was a problem reading this document (18).\n. @jlduran My example is simplified; in my use case, I can't use `number_pages` because I'm doing additional formatting (I'm actually using a table in my repeater) and don't want the number in the exact place `number_pages` will put it.\n. Is there a reason this was closed? It hasn't had any updates, but it is still an issue. (I just tested it on the master branch and it's still exhibiting the same problem).\n. Thanks! I did a comparison with and without the table and looked at the generated PDF files. I then manually removed the chunk relating to the table from the file with a table. After doing so, there was one difference between the files.\n\nWith a table on Page 1, the repeater code looks like this:\n\n```\nq\n/DeviceRGB cs\n0.000 0.000 0.000 scn\n0.000 0.000 0.000 SCN\n1 w\n0 J\n0 j\n[ ] 0 d\n\nBT\n36 127.384 Td\n/F1.0 12 Tf\n[<50> 40 <6167652032>] TJ\nET\n\nQ\n```\n\nAnd without a table, it looks like this:\n\n```\nq\n/DeviceRGB cs\n0.000 0.000 0.000 scn\n/DeviceRGB CS\n0.000 0.000 0.000 SCN\n1 w\n0 J\n0 j\n[ ] 0 d\n\nBT\n36 127.384 Td\n/F1.0 12 Tf\n[<50> 40 <6167652032>] TJ\nET\n\nQ\n```\n\nThe file with a table appears to be missing a `/DeviceRGB CS` near the beginning. When I manually add it, the file shows the table and the repeater perfectly. This is the first time I've ever looked at the source of a PDF file, so I'm not sure exactly what these codes are doing, but I'll try and dig into the prawn source code to see if I can figure it out.\n. Dug in a little more. Part of the table code includes a `draw_borders(pt)` method. If I clear out this method, everything works fine. I started removing a bit of code at a time and it looks like even this super simple code causes the issue:\n\n``` ruby\nclass Table\n  class Cell\n    def draw_borders(pt)\n      @pdf.mask(:line_width, :stroke_color) do\n      end\n    end\n  end\nend\n```\n\nIf I remove `stroke_color` from the list of values to mask, it works fine. Digging into the `mask` method, I threw some debug statements in before/after the yield to see if `stroke_color` is getting properly reset, which it is:\n\n``` ruby\nclass Document\n  def mask(*fields) # :nodoc:\n    # Stores the current state of the named attributes, executes the block, and\n    # then restores the original values after the block has executed.\n    # -- I will remove the nodoc if/when this feature is a little less hacky\n\n    puts \"stroke_color before: #{stroke_color}\" # Outputs 000000\n    stored = {}\n    fields.each { |f| stored[f] = send(f) }\n    yield\n    fields.each { |f| send(\"#{f}=\", stored[f]) }\n    puts \"stroke_color after: #{stroke_color}\" # Outputs 000000\n  end\nend\n```\n\nThe only thing I can think of is that maybe there's something about the way sending `stroke_color=` works that's causing this? I'll keep digging...\n. Ok, so here's the code within `set_color` that is being called.\n\n```\nset_color_space type, color_space(color)\ncolor = color_to_s(color)\nwrite_color(color, operator)\n```\n\nThe problem is within `set_color_space`:\n\n```\nreturn if current_color_space(type) == color_space && !state.page.in_stamp_stream?\n```\n\nThe stroke colorspace for DeviceRGB is already set, so it's not setting it again. However, the `write_color` line still executes anyway. So this is why we have the missing DeviceRGB line, but still have the `0.000 0.000 0.000 SCN` line being written anyway.\n\nComing back to my earlier comparison, the same way adding the `/DeviceRGB CS` line fixed the problem, just removing the `0.000 0.000 0.000 SCN` line also fixes the problem.\n\nSo at this point I'm not sure which is best: Adding a conditional to `write_color` too to make sure it doesn't write the same stroke color that's already set, or removing the conditional from `set_color_space`?\n. Yeah, I can get a spec written up, my only question is: what's the \"correct\" output?\n\n```\n/DeviceRGB cs\n0.000 0.000 0.000 scn\n/DeviceRGB CS\n0.000 0.000 0.000 SCN\n```\n\nor\n\n```\n/DeviceRGB cs\n0.000 0.000 0.000 scn\n```\n\nI would assume it would be best to err on the side of caution and explicitly set the colorspace again even if it's already set, but I'm not super familiar with the inner workings of the PDF format.\n. I understand the case difference. I'm just confused why this (the \"bad\" output from the original issue) doesn't work:\n\n```\n/DeviceRGB cs\n0.000 0.000 0.000 scn\n0.000 0.000 0.000 SCN\n```\n\nCurrently, prawn skips the `/DeviceRGB CS` line because it thinks the current stroke colorspace is already RGB. So shouldn't the `0.000 0.000 0.000 SCN` line, setting the stroke color to black, work fine?\n\nI'm inclined to remove the conditional and allow setting `/DeviceRGB CS` even if it's already set, but I don't know what the side-effects of that would be (I tried removing it and all the specs still pass...)\n. I think this has to do with the way the repeater runs. After all the pages are generated, it goes back and runs the repeater on each page.\n\nI threw a `puts` line in the `run` method for the repeater so we can see what the graphic state is for each page's repeater. When I have a table on the first page, the graphics state already has the stroke color space set to DeviceRGB\n\n```\n#<PDF::Core::GraphicState:0x007f9eef963170 @color_space={:stroke=>:DeviceRGB}, @fill_color=\"000000\", @stroke_color=\"000000\", @dash={:dash=>nil, :space=>nil, :phase=>0}, @cap_style=:butt, @join_style=:miter, @line_width=1>\n#<PDF::Core::GraphicState:0x007f9eeee0ba70 @color_space={:stroke=>:DeviceRGB}, @fill_color=\"000000\", @stroke_color=\"000000\", @dash={:dash=>nil, :space=>nil, :phase=>0}, @cap_style=:butt, @join_style=:miter, @line_width=1>\n```\n\nWhen I add a `start_new_page` to push the table to the second page, though, it clears out the stroke color space, causing it to be re-defined on each page, which is why it displays properly:\n\n```\n#<PDF::Core::GraphicState:0x007fdc1b7202a0 @color_space={}, @fill_color=\"000000\", @stroke_color=\"000000\", @dash={:dash=>nil, :space=>nil, :phase=>0}, @cap_style=:butt, @join_style=:miter, @line_width=1>\n#<PDF::Core::GraphicState:0x007fdc1bf9e008 @color_space={}, @fill_color=\"000000\", @stroke_color=\"000000\", @dash={:dash=>nil, :space=>nil, :phase=>0}, @cap_style=:butt, @join_style=:miter, @line_width=1>\n#<PDF::Core::GraphicState:0x007fdc1bf7a2c0 @color_space={}, @fill_color=\"000000\", @stroke_color=\"000000\", @dash={:dash=>nil, :space=>nil, :phase=>0}, @cap_style=:butt, @join_style=:miter, @line_width=1>\n```\n\nThere must be something telling the repeater to always use the first page's graphic state, even if we're running on a different page?\n. Thanks for pointing me in the right direction. I think (hope) I'm making some progress.\n\nIn my original example, moving the repeater code to the **bottom** of the `generate` block makes it work perfectly fine for both Page 1/2. Looking at `Repeater#initialize`, it looks like `@graphic_state` is set to whatever the current page's graphic state is when the repeater is declared. Since my second page doesn't have a table on it, the repeater state for that page doesn't have the stroke colorspace set. Since that's now the page where I define the repeater, it starts with a \"clean\" graphic state.\n\nIt looks like when the repeater runs, it executes `@document.save_graphics_state(@graphic_state)` for each page. `save_graphics_state(graphic_state)` calls `save_graphic_state(previous_state)`, which then initializes a new GraphicState object based on `previous_state` which is set to that `@graphic_state` variable. So now the new \"clean\" state has inherited the `color_space` parameter from `@graphic_state`.\n\nSo whatever state was used to initialize `@graphic_state` is used for **every** page, rather than the actual current page's state (which is why having a table-free Page 1 allowed for a relatively \"clean\" graphic state for my repeater).\n\nIt looks like, in the `run` method, `@document.graphic_state` does correctly refers to the current page's state for each iteration. So could we possibly avoid using the parameter altogether, causing it to push a new graphic state onto the stack based on the current page's state rather than Page 1's state?\n\n```\n@document.save_graphics_state do\n  @document.send(:freeze_stamp_graphics)\n  @block.call\nend\n```\n. We do have this spec, which says that we should be using the graphic state in place when we created the repeater.\n\n```\n    context \"dynamic repeaters\" do\n      it \"should preserve the graphic state at creation time\" do\n```\n\nLooking at some other specs, I came across _Document with a stamp should save the color space even when same as current page color space_. So it seems that stamps had the same issue with using the stamp on a page with a different color_space, and a solution was added to force the color space to be set if it was being set from a stamp:\n\n```\ndef set_color_space(type, color_space)\n  # don't set the same color space again\n  return if current_color_space(type) == color_space && !state.page.in_stamp_stream?\n```\n\nI think this is why non-dynamic repeaters don't exhibit the same issue: non-dynamic repeaters are just stamps, whereas dynamic repeaters are a little more complex.\n. Now, the expected behavior may be \"the repeater should use the exact state in place when it was defined\", but it actually doesn't appear to be doing that. I'm defining my table **after** defining my repeater, but it's being affected by the stroke color_space set by the table anyway.\n\nI looked at the Repeater class's initializer and noticed that it `dup`'s the current graphic_state, but it does **not** `dup` the `color_space`. Ruby just points the new `@graphic_state` variable's `color_space` to the same hash as the source, so if we change the color_space after defining the repeater, it will actually affect the \"frozen\" repeater. This is why my defining a table added the stroke color_space to my \"frozen\" repeater.\n\nBy utilizing `GraphicState.new`, which properly dups the hashes, my problem is fixed:\n\n``` ruby\nclass Repeater #:nodoc:\n  ...\n  def initialize(document, page_filter, dynamic = false, &block)\n    ...\n    @graphic_state = PDF::Core::GraphicState.new(document.state.page.graphic_state)\n```\n\nI don't know how I feel about that method call, but it works (a better way might be to add a `copy` method to `GraphicState`, or override `initialize_copy` to properly dup the hashes, though that would only be compatible with ruby 1.9 and newer).\n\nThat being said, if made a table and then defined my repeater, I'd still have the same issue all over again, even with the added line above.\n\n---\n\nI agree that repeaters should not use the current page's state. However, I also don't think they should inherit **anything** when they are defined. Rather, they should be completely separate entities, starting with a perfectly clear state (e.g. black fill/stroke, empty color space, etc.). \n\nI think inheriting graphic state attributes that were defined before the repeater is misleading. And by inheriting the current graphic state, moving the repeater code to different parts of the `generate` block can have a huge effect on the appearance of the repeater, whereas I would expect it to look the same regardless of where I defined it.\n\nRight now, the only way to get the repeater to behave completely independent of the rest of the document's graphic state is to define the repeater before you do anything else (at least once the `dup` bug I mentioned above is fixed).\n. Thanks a ton for all your help. No rush, my branch is fixing the problem for me for the time being.\n. It's been a while since I looked at this, but I'm pretty sure it was resolved by #635, so I'm gonna close it. Thanks!\n. I contributed some code after the list was made :+1: \n. Whoops, I completely spaced on the fact that strings are mutable. Duh.\n\nThe immutable objects shouldn't need to be specifically copied within the `initialize_copy` method, since calling something like `@graphic_state.dup` already copies _all_ the attributes. The `initialize_copy` method is only to do something different than the default (in this case, to `dup` the mutable attributes). Or maybe you added them since you're now calling `initialize_copy` directly from the main `initialize` method?\n\nJust want to make sure I'm not missing something. Thanks for merging!\n. I can confirm Adobe Acrobat Pro XI on Mac gives an error for this page:\n\n> There was an error processing a page. There was a problem reading this document (18).\n. ",
    "strzibny": "Thank you for such a quick response! There are also `.ttf` fonts I am not sure about:\n\nActiva.ttf- ?\nChalkboard.ttf - ? \ncomicsans.ttf - Copyright (c) 1995 Microsoft Corporation. All rights reserved.\nDejaVuSans.ttf - this one is clear, public domain\nDustismo_Roman.ttf - free software\ngkai00mp.ttf - (c) Copyright 1994-1999, Arphic Technology Co., Ltd.\n\nWhat about them?\n. I tried to find out how Prawn really uses these fonts and it seems to me that you can just load the font without giving user-specific or system path to the font file and it's always available after installing Prawn:\n\n``` ruby\nPrawn::Document.generate(\"hello.pdf\") do\n  font \"Courier\"\n  text \"hello\"\nend\n```\n\n_Unlike_ bundled `.ttf` for which I am getting errors:\n\n``` ruby\nPrawn::Errors::UnknownFont: Chalkboard is not a known font.\n```\n\nor\n\n``` ruby\nErrno::ENOENT: No such file or directory - Chalkboard.ttf\n```\n\nI do not believe that users would put there the path from `data/` (like `#{Prawn::BASEDIR}/data/fonts/comicsans.ttf`) when it's not working the same as for `.afm`. (There is `Prawn::Font::AFM::BUILT_INS` but nothing like that for `Prawn::Font::TTF`)\n\nAnd if there are not so easily accessible for users, why to pack them alongside the library? _Especially_ if some of them can cause legal troubles? For instance we definitely have to exclude `comicsans.ttf` in Fedora so it would be also inconsistent for Fedora users if they shall expect it for some reason. \n\nI noticed that 2 bundled `.ttf` fonts replaced original `.afm` fonts [1]. As I understand there might have been troubles with them, I don't think you can just exchange them for `.ttf` and counting on the same license agreement. Also bundling something like font files that should be system-wide available and shared among all applications is a bad practice.\n\nGiven that I suggest to abandon `.ttf` files from Prawn completely (at least from the distributed `.gem` file) or to introduce a sub-package with those files for those who wish to have them. But then again, they should not come with the copyright issues -- you could choose free alternatives, preferably under OFL [2].\n\nIf I am missing something (like their place in Prawn), please correct me and explain.\n\nThank you.\n\n[1] https://github.com/prawnpdf/prawn/commit/4c26cbc465df8731b926ff5024d9e8c4060eace2\n[2] http://www.unifont.org/go_for_ofl/\n. @bradediger The nicest thing would be to make Prawn free from all the font files and rewrite/delete the `Prawn::Font::AFM::BUILT_INS` as well. That way will Prawn stay clean and slim and wouldn't interfere with system and user-installed fonts. It's always better not to bundle anything that should be shared across ecosystem.\n\nIf you prefer for Prawn to have some fonts (like build-ins afm) I really suggest a separate package that we at Fedora don't have to package. This way anybody can package Prawn for any operating system without changing it from the upstream.\n\nIf you need any/welcome any help with this or you would like to see a pull request, I don't mind looking into it, but I just want to make sure that the proposed changes are acceptable.\n\nThank you.\n. Thank you both for your clarification. On Fedora .afm is also not considered a true font file so the guideline regarding the fonts doesn't have to be applied, although seeing a general solution/approach would be nice.\n\nFor now I think I will go with packaging Prawn including .afm and excluding .ttf, if thats okay with you. I can do a pull request that deletes the fonts - but maybe if you want to keep them for testing - just excluding them from final .gem (from gemspec) so they won't appear in current final version.\n\nWhat do you think?\n. Thanks guys, closing.\n. No objections :).\n. I am also surprised by this change since ttfunk is actially part of the prawnpdf project so I believe that if ttfunk would break the API at some point the changes could be easily coordinated with prawn itself. Having more relaxed dependencies means having less dependency issues and better understanding of backwards compatibility. I checked that `master` branch still works against ttfunk 1.0.3. Please let's not change the dependency versions without any issues.\n. Thank you for such a quick response! There are also `.ttf` fonts I am not sure about:\n\nActiva.ttf- ?\nChalkboard.ttf - ? \ncomicsans.ttf - Copyright (c) 1995 Microsoft Corporation. All rights reserved.\nDejaVuSans.ttf - this one is clear, public domain\nDustismo_Roman.ttf - free software\ngkai00mp.ttf - (c) Copyright 1994-1999, Arphic Technology Co., Ltd.\n\nWhat about them?\n. I tried to find out how Prawn really uses these fonts and it seems to me that you can just load the font without giving user-specific or system path to the font file and it's always available after installing Prawn:\n\n``` ruby\nPrawn::Document.generate(\"hello.pdf\") do\n  font \"Courier\"\n  text \"hello\"\nend\n```\n\n_Unlike_ bundled `.ttf` for which I am getting errors:\n\n``` ruby\nPrawn::Errors::UnknownFont: Chalkboard is not a known font.\n```\n\nor\n\n``` ruby\nErrno::ENOENT: No such file or directory - Chalkboard.ttf\n```\n\nI do not believe that users would put there the path from `data/` (like `#{Prawn::BASEDIR}/data/fonts/comicsans.ttf`) when it's not working the same as for `.afm`. (There is `Prawn::Font::AFM::BUILT_INS` but nothing like that for `Prawn::Font::TTF`)\n\nAnd if there are not so easily accessible for users, why to pack them alongside the library? _Especially_ if some of them can cause legal troubles? For instance we definitely have to exclude `comicsans.ttf` in Fedora so it would be also inconsistent for Fedora users if they shall expect it for some reason. \n\nI noticed that 2 bundled `.ttf` fonts replaced original `.afm` fonts [1]. As I understand there might have been troubles with them, I don't think you can just exchange them for `.ttf` and counting on the same license agreement. Also bundling something like font files that should be system-wide available and shared among all applications is a bad practice.\n\nGiven that I suggest to abandon `.ttf` files from Prawn completely (at least from the distributed `.gem` file) or to introduce a sub-package with those files for those who wish to have them. But then again, they should not come with the copyright issues -- you could choose free alternatives, preferably under OFL [2].\n\nIf I am missing something (like their place in Prawn), please correct me and explain.\n\nThank you.\n\n[1] https://github.com/prawnpdf/prawn/commit/4c26cbc465df8731b926ff5024d9e8c4060eace2\n[2] http://www.unifont.org/go_for_ofl/\n. @bradediger The nicest thing would be to make Prawn free from all the font files and rewrite/delete the `Prawn::Font::AFM::BUILT_INS` as well. That way will Prawn stay clean and slim and wouldn't interfere with system and user-installed fonts. It's always better not to bundle anything that should be shared across ecosystem.\n\nIf you prefer for Prawn to have some fonts (like build-ins afm) I really suggest a separate package that we at Fedora don't have to package. This way anybody can package Prawn for any operating system without changing it from the upstream.\n\nIf you need any/welcome any help with this or you would like to see a pull request, I don't mind looking into it, but I just want to make sure that the proposed changes are acceptable.\n\nThank you.\n. Thank you both for your clarification. On Fedora .afm is also not considered a true font file so the guideline regarding the fonts doesn't have to be applied, although seeing a general solution/approach would be nice.\n\nFor now I think I will go with packaging Prawn including .afm and excluding .ttf, if thats okay with you. I can do a pull request that deletes the fonts - but maybe if you want to keep them for testing - just excluding them from final .gem (from gemspec) so they won't appear in current final version.\n\nWhat do you think?\n. Thanks guys, closing.\n. No objections :).\n. I am also surprised by this change since ttfunk is actially part of the prawnpdf project so I believe that if ttfunk would break the API at some point the changes could be easily coordinated with prawn itself. Having more relaxed dependencies means having less dependency issues and better understanding of backwards compatibility. I checked that `master` branch still works against ttfunk 1.0.3. Please let's not change the dependency versions without any issues.\n. ",
    "kivanio": "+1\n. +1\n. ",
    "BaylorRae": "For those that find this issue in the future, this feature has been added in 3610f91c6d99f49ed57d73cb8f631613e61e553b\n\nTo align at the top of new pages, set `reflow_margins` to `true`\n\n``` ruby\ncolumn_box reflow_margins: true\n```\n. For those that find this issue in the future, this feature has been added in 3610f91c6d99f49ed57d73cb8f631613e61e553b\n\nTo align at the top of new pages, set `reflow_margins` to `true`\n\n``` ruby\ncolumn_box reflow_margins: true\n```\n. ",
    "vongrippen": "I'll try to work on some specs, but I'm heavily tied up in a big project right now (that this was put together for) so no guarantees. I knew it wasn't 100% ready for prime-time yet without the specs and without working with the failing specs, but also knew I probably wasn't the only one looking for this so I decided to open the pull request anyways.\n. +1\n. I'll try to work on some specs, but I'm heavily tied up in a big project right now (that this was put together for) so no guarantees. I knew it wasn't 100% ready for prime-time yet without the specs and without working with the failing specs, but also knew I probably wasn't the only one looking for this so I decided to open the pull request anyways.\n. +1\n. ",
    "weimeng": "I've updated the logic somewhat as I found that it was applying an incorrect y-offset for subsequent table header rows.\n\nI've also fixed the failing tests, although I have to say I may not entirely know what I'm doing here. Still fairly new to Ruby and tests.\n\nI actually did a pull request into @vongrippen's branch, is that the \"right\" way to contribute to this pull request?\n. @johnnyshields @bradediger I can do a PR to the main branch if @vongrippen isn't active on this any more.\n. @johnnyshields there we go\n. I'm good with this. :+1:\n. I've updated the logic somewhat as I found that it was applying an incorrect y-offset for subsequent table header rows.\n\nI've also fixed the failing tests, although I have to say I may not entirely know what I'm doing here. Still fairly new to Ruby and tests.\n\nI actually did a pull request into @vongrippen's branch, is that the \"right\" way to contribute to this pull request?\n. @johnnyshields @bradediger I can do a PR to the main branch if @vongrippen isn't active on this any more.\n. @johnnyshields there we go\n. I'm good with this. :+1:\n. ",
    "dmeranda": "I'm not very familiar with the table internals, but could milti-row headers also be set automatically in the case where cells in the first row have rowspans?  If a cell as rowspan = 2, then it would be nice that if you turned on headers (with true, or perhaps a new :auto sentinel) that it could determine it should use the first two rows.\n. The initial bug report contains the complete source to a simple failing test case.\n. @hbrandl Yes, I've verified this patch works in the real application where I had detected this bug, and which is more complicated than the very simple test case I made for this bug report.\n\nThe Prawn manual should probably be updated to note that the :header option to the table can be a number-of-rows, and not just true or false.\n\nAlso, how easy would it be to automatically determine the number of header rows, based on any rowspans within it, if :header is passed as true rather than a specific number?\n. I'm not very familiar with the table internals, but could milti-row headers also be set automatically in the case where cells in the first row have rowspans?  If a cell as rowspan = 2, then it would be nice that if you turned on headers (with true, or perhaps a new :auto sentinel) that it could determine it should use the first two rows.\n. The initial bug report contains the complete source to a simple failing test case.\n. @hbrandl Yes, I've verified this patch works in the real application where I had detected this bug, and which is more complicated than the very simple test case I made for this bug report.\n\nThe Prawn manual should probably be updated to note that the :header option to the table can be a number-of-rows, and not just true or false.\n\nAlso, how easy would it be to automatically determine the number of header rows, based on any rowspans within it, if :header is passed as true rather than a specific number?\n. ",
    "richardvenneman": "Does anyone know of a better approach to solving this problem?\n. Great! Thanks so much.\n. Does anyone know of a better approach to solving this problem?\n. Great! Thanks so much.\n. ",
    "Yolgie": "Issue was resolved with release 0.13.1\nSee Issue https://github.com/prawnpdf/prawn/issues/578\n. Issue was resolved with release 0.13.1\nSee Issue https://github.com/prawnpdf/prawn/issues/578\n. ",
    "traels": "1 vote for merging this into Prawn - or update the manual to tell that grid is per document.\nI wasted 2 hours of my life before finding this - thank you for showing me a fix @bwl21 :)\n. The update bwl21 has posted sort of makes sense - I have just implemented in my app. I can't really see that applying that fix should break anything.\n\nAs far as I can see the problem is somewhere around https://github.com/prawnpdf/prawn/blob/stable/lib/prawn/layout/grid.rb#L20 which could be a performance thing but has the drawback that the boxes are not rewritten when a new grid is defined.\n\nI'll try to update the manual to say that grid is defined per document.\n. You are right, that would make more sense\n. Should i just add manual update to this pull request?\n\n   kh\nSimon Tr\u00e6ls Ravn\nSent from my iPhone\n\n> On 14/02/2014, at 17.24, Gregory Brown notifications@github.com wrote:\n> \n> @traels: If you want to work on updating the patch that may help get it merged sooner, otherwise I'll work on this when I get a chance.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n. 1 vote for merging this into Prawn - or update the manual to tell that grid is per document.\nI wasted 2 hours of my life before finding this - thank you for showing me a fix @bwl21 :)\n. The update bwl21 has posted sort of makes sense - I have just implemented in my app. I can't really see that applying that fix should break anything.\n\nAs far as I can see the problem is somewhere around https://github.com/prawnpdf/prawn/blob/stable/lib/prawn/layout/grid.rb#L20 which could be a performance thing but has the drawback that the boxes are not rewritten when a new grid is defined.\n\nI'll try to update the manual to say that grid is defined per document.\n. You are right, that would make more sense\n. Should i just add manual update to this pull request?\n\n   kh\nSimon Tr\u00e6ls Ravn\nSent from my iPhone\n\n> On 14/02/2014, at 17.24, Gregory Brown notifications@github.com wrote:\n> \n> @traels: If you want to work on updating the patch that may help get it merged sooner, otherwise I'll work on this when I get a chance.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n. ",
    "nir0": "solved using DejaVuSans\n. solved using DejaVuSans\n. ",
    "jm81": "This seems related to caching template objects, in commit 419eca8a. After that commit, PDFs are smaller (which is awesome) but content added to any page with that template is included on all pages in that template. I'm going to try to dig further into it in the next few days and will post more if I figure anything out.\n. This seems related to caching template objects, in commit 419eca8a. After that commit, PDFs are smaller (which is awesome) but content added to any page with that template is included on all pages in that template. I'm going to try to dig further into it in the next few days and will post more if I figure anything out.\n. ",
    "wrzasa": "Was this problem solved, or is it WONTFIX?\n. Was this problem solved, or is it WONTFIX?\n. ",
    "alexksso": "diveboard@dev:~$ pdf2ps logbook.pdf\n   ***\\* Error reading a content stream. The page may be incomplete.\n   ***\\* Error reading a content stream. The page may be incomplete.\n   ***\\* File did not complete the page properly and may be damaged.\n   ***\\* Warning: File has unbalanced q/Q operators (too many q's)\n   ***\\* Error reading a content stream. The page may be incomplete.\n   ***\\* Error reading a content stream. The page may be incomplete.\n   ***\\* File did not complete the page properly and may be damaged.\n   ***\\* Warning: File has unbalanced q/Q operators (too many q's)\n   ***\\* Error reading a content stream. The page may be incomplete.\n   ***\\* Error reading a content stream. The page may be incomplete.\n   ***\\* File did not complete the page properly and may be damaged.\n   ***\\* Warning: File has unbalanced q/Q operators (too many q's)\n   ***\\* Error reading a content stream. The page may be incomplete.\n   ***\\* Error reading a content stream. The page may be incomplete.\n   ***\\* File did not complete the page properly and may be damaged.\n   ***\\* Warning: File has unbalanced q/Q operators (too many q's)\n\n   ***\\* This file had errors that were repaired or ignored.\n   ***\\* The file was produced by: \n   ***\\* >>>> Prawn <<<<\n   ***\\* Please notify the author of the software that produced this\n   ***\\* file that it does not conform to Adobe's published PDF\n   ***\\* specification.\n. diveboard@dev:~$ pdf2ps logbook.pdf\n   ***\\* Error reading a content stream. The page may be incomplete.\n   ***\\* Error reading a content stream. The page may be incomplete.\n   ***\\* File did not complete the page properly and may be damaged.\n   ***\\* Warning: File has unbalanced q/Q operators (too many q's)\n   ***\\* Error reading a content stream. The page may be incomplete.\n   ***\\* Error reading a content stream. The page may be incomplete.\n   ***\\* File did not complete the page properly and may be damaged.\n   ***\\* Warning: File has unbalanced q/Q operators (too many q's)\n   ***\\* Error reading a content stream. The page may be incomplete.\n   ***\\* Error reading a content stream. The page may be incomplete.\n   ***\\* File did not complete the page properly and may be damaged.\n   ***\\* Warning: File has unbalanced q/Q operators (too many q's)\n   ***\\* Error reading a content stream. The page may be incomplete.\n   ***\\* Error reading a content stream. The page may be incomplete.\n   ***\\* File did not complete the page properly and may be damaged.\n   ***\\* Warning: File has unbalanced q/Q operators (too many q's)\n\n   ***\\* This file had errors that were repaired or ignored.\n   ***\\* The file was produced by: \n   ***\\* >>>> Prawn <<<<\n   ***\\* Please notify the author of the software that produced this\n   ***\\* file that it does not conform to Adobe's published PDF\n   ***\\* specification.\n. ",
    "Sonblind": "I have the same issue. I am using prawn(0.12.0) and the rendered document works fine in preview and chrome, but in Acrobat Reader only the first two pages can be viewed with the following pages being all blank. I am not using templates or repeatable images. Acrobat Reader gives me this error: \n\n\"An error exists on this page. Acrobat may not display the page correctly. Please contact the person who created the PDF document to correct the problem.\"\n. I found the solution to my problem. The method dash() breaks the pdf for acrobat reader. I redrew all lines with a solid line instead of dashed lines and all is well... Oh yeah...\n. I have the same issue. I am using prawn(0.12.0) and the rendered document works fine in preview and chrome, but in Acrobat Reader only the first two pages can be viewed with the following pages being all blank. I am not using templates or repeatable images. Acrobat Reader gives me this error: \n\n\"An error exists on this page. Acrobat may not display the page correctly. Please contact the person who created the PDF document to correct the problem.\"\n. I found the solution to my problem. The method dash() breaks the pdf for acrobat reader. I redrew all lines with a solid line instead of dashed lines and all is well... Oh yeah...\n. ",
    "npj": "I had the same issue, and removing dash() solves the problem for me as well.\n. I had the same issue, and removing dash() solves the problem for me as well.\n. ",
    "McPolemic": "I can confirm this is still an issue. Just ran into this today, and removing dash fixes the problem.\n. Whoops, sorry about this. This isn't the same problem, or indeed any problem. I had set `dash(0)` in attempt to clear the dash settings, rather than calling `undash`. `dash(0)` doesn't really make any sense in this context, so not really a bug.\n. Unfortunately, after blowing away gems and updating to 0.13.2 (when trying to make the first example), I can't replicate this bug. I think it was just a matter of an old gem.\n\n`dash(0)` currently doesn't draw a line, and produces no error in Adobe.\n. That sounds good to me. The two options for not creating an erring PDF are to throw an exception on `dash(0)` or run `undash` when someone runs `dash(0)`. Looking back on my code, `dash(0)` doesn't make any sense, so I think it's better to tell people to correct their code rather than just silently fixing it. \n. I can confirm this is still an issue. Just ran into this today, and removing dash fixes the problem.\n. Whoops, sorry about this. This isn't the same problem, or indeed any problem. I had set `dash(0)` in attempt to clear the dash settings, rather than calling `undash`. `dash(0)` doesn't really make any sense in this context, so not really a bug.\n. Unfortunately, after blowing away gems and updating to 0.13.2 (when trying to make the first example), I can't replicate this bug. I think it was just a matter of an old gem.\n\n`dash(0)` currently doesn't draw a line, and produces no error in Adobe.\n. That sounds good to me. The two options for not creating an erring PDF are to throw an exception on `dash(0)` or run `undash` when someone runs `dash(0)`. Looking back on my code, `dash(0)` doesn't make any sense, so I think it's better to tell people to correct their code rather than just silently fixing it. \n. ",
    "rbrancher": "The problem remains:\n\n```\n  def draw_dotted_line(start_point, end_point)\n      @pdf.stroke do\n        @pdf.cap_style :round\n        @pdf.dash [0.35, 1.65]\n        @pdf.stroke_color [0, 0, 0, 30]\n        @pdf.line_width 0.35\n        @pdf.line start_point, end_point\n        @pdf.dash 0\n      end\n    end\n```\n\ncorrupts the file to Photoshop/Acrobat Reader (but not for OSX Preview).\n\nBut:\n\n```\n  def draw_dotted_line(start_point, end_point)\n      @pdf.stroke do\n        @pdf.cap_style :round\n        @pdf.dash [0.35, 1.65]\n        @pdf.stroke_color [0, 0, 0, 30]\n        @pdf.line_width 0.35\n        @pdf.line start_point, end_point\n        @pdf.undash\n      end\n    end\n```\n\nworks just fine. No warning, no exceptions.\nI've reported just to let you know.\n\nPrawn 1.0.0\nRuby 2.1.1-p76\n\nAnd thanks for the awesome work. Prawn kicks ass!\n. The problem remains:\n\n```\n  def draw_dotted_line(start_point, end_point)\n      @pdf.stroke do\n        @pdf.cap_style :round\n        @pdf.dash [0.35, 1.65]\n        @pdf.stroke_color [0, 0, 0, 30]\n        @pdf.line_width 0.35\n        @pdf.line start_point, end_point\n        @pdf.dash 0\n      end\n    end\n```\n\ncorrupts the file to Photoshop/Acrobat Reader (but not for OSX Preview).\n\nBut:\n\n```\n  def draw_dotted_line(start_point, end_point)\n      @pdf.stroke do\n        @pdf.cap_style :round\n        @pdf.dash [0.35, 1.65]\n        @pdf.stroke_color [0, 0, 0, 30]\n        @pdf.line_width 0.35\n        @pdf.line start_point, end_point\n        @pdf.undash\n      end\n    end\n```\n\nworks just fine. No warning, no exceptions.\nI've reported just to let you know.\n\nPrawn 1.0.0\nRuby 2.1.1-p76\n\nAnd thanks for the awesome work. Prawn kicks ass!\n. ",
    "jlsync": "the problem might have something to do with Adobe Reader's float/precision support,  for instance code that effectively looked something like this (using calculated numbers)...\n\n``` ruby\npdf.bounding_box [0, 19.1990551181102352072], width: 280.80000000000004134, height: 19.199055118110239047 do\n  pdf.text \"hello\"\nend\n```\n\nworks fine in Chrome browser pdf reader but fails in Adobe Reader.  Using .round(ndigits) on my values fixes the problem, with .round(20) being the breaking point for Adobe Reader in this example.\n. the problem might have something to do with Adobe Reader's float/precision support,  for instance code that effectively looked something like this (using calculated numbers)...\n\n``` ruby\npdf.bounding_box [0, 19.1990551181102352072], width: 280.80000000000004134, height: 19.199055118110239047 do\n  pdf.text \"hello\"\nend\n```\n\nworks fine in Chrome browser pdf reader but fails in Adobe Reader.  Using .round(ndigits) on my values fixes the problem, with .round(20) being the breaking point for Adobe Reader in this example.\n. ",
    "gchan": "If you pass the option **:dynamic** and set it to true, it should work.\n\n``` ruby\nrepeat :all, dynamic: true do\n  text \"<link href='http://example.com'>external link</link>\", inline_format: true\nend\n```\n\nNot sure if that's the expected behaviour however.\n. @sandal I've updated my comment above with the workaround. Thanks for the prompt response!\n. If you pass the option **:dynamic** and set it to true, it should work.\n\n``` ruby\nrepeat :all, dynamic: true do\n  text \"<link href='http://example.com'>external link</link>\", inline_format: true\nend\n```\n\nNot sure if that's the expected behaviour however.\n. @sandal I've updated my comment above with the workaround. Thanks for the prompt response!\n. ",
    "timokleemann": "I can confirm this bug, but even downgrading to `1.0.0.rc1` didn't fix it for me.\n. ![prawn_1](https://f.cloud.github.com/assets/1327414/1765101/0a6ee880-6731-11e3-81a2-d10567f78ddd.png)\n![prawn_2](https://f.cloud.github.com/assets/1327414/1765102/0a7cd454-6731-11e3-944b-b38a7ec50782.png)\n\nOn the attached screenshots you can see what it looks like when I generate PDFs. Note how the `date`, `description`, `quantity` and `tax` columns are always neatly aligned while all the currency columns are not.\n\nI am using `Courier` as font here which I think is a pre-installed system font on Mac OS X. In my finder it is shown with a `.dfont` extension.\n\nI just tried `Helvetica` instead of `Courier` but it doesn't solve the issue.\n. Wow, yes that worked!\n\n![prawn_3](https://f.cloud.github.com/assets/1327414/1765672/219d4864-6739-11e3-8477-932d749af8e4.png)\n\nI had to define three different styles to get this to work, though:\n\n```\nfont_families.update(\"Courier System Font\" => { \n  :normal => \"/Library/Fonts/Courier New.ttf\",\n  :italic => \"/Library/Fonts/Courier New Italic.ttf\",\n  :bold => \"/Library/Fonts/Courier New Bold.ttf\"\n})\nfont \"Courier System Font\"\n```\n\nBut since I am developing locally here on my Mac: What will happen after I deployed my app?\n\nIt would be nice if I could use the fonts that the user has installed on their machine (a bit like with CSS).\n\nIs that not possible?\n. OK, I think that solves my problem. Thanks a lot for your help.\n. Yes, I can confirm that it works! Everything is neatly aligned now with the built-in Courier font.\n\nWhen will this be merged into the master branch?\n. I can confirm this bug, but even downgrading to `1.0.0.rc1` didn't fix it for me.\n. ![prawn_1](https://f.cloud.github.com/assets/1327414/1765101/0a6ee880-6731-11e3-81a2-d10567f78ddd.png)\n![prawn_2](https://f.cloud.github.com/assets/1327414/1765102/0a7cd454-6731-11e3-944b-b38a7ec50782.png)\n\nOn the attached screenshots you can see what it looks like when I generate PDFs. Note how the `date`, `description`, `quantity` and `tax` columns are always neatly aligned while all the currency columns are not.\n\nI am using `Courier` as font here which I think is a pre-installed system font on Mac OS X. In my finder it is shown with a `.dfont` extension.\n\nI just tried `Helvetica` instead of `Courier` but it doesn't solve the issue.\n. Wow, yes that worked!\n\n![prawn_3](https://f.cloud.github.com/assets/1327414/1765672/219d4864-6739-11e3-8477-932d749af8e4.png)\n\nI had to define three different styles to get this to work, though:\n\n```\nfont_families.update(\"Courier System Font\" => { \n  :normal => \"/Library/Fonts/Courier New.ttf\",\n  :italic => \"/Library/Fonts/Courier New Italic.ttf\",\n  :bold => \"/Library/Fonts/Courier New Bold.ttf\"\n})\nfont \"Courier System Font\"\n```\n\nBut since I am developing locally here on my Mac: What will happen after I deployed my app?\n\nIt would be nice if I could use the fonts that the user has installed on their machine (a bit like with CSS).\n\nIs that not possible?\n. OK, I think that solves my problem. Thanks a lot for your help.\n. Yes, I can confirm that it works! Everything is neatly aligned now with the built-in Courier font.\n\nWhen will this be merged into the master branch?\n. ",
    "johngaitens": "Having the same issue, hopefully there will be a fix soon.  I've got round the issue by adding padding but it's not a solution.\n. Having the same issue, hopefully there will be a fix soon.  I've got round the issue by adding padding but it's not a solution.\n. ",
    "voondo": "I can also confirm this bug (current master)\n. I can also confirm this bug (current master)\n. ",
    "LaurentSHB": "Actually I used the default font so I don't know if the default font is an AFM or TTF font. \n. Actually I used the default font so I don't know if the default font is an AFM or TTF font. \n. ",
    "maxstudener": "it applies margin to page not the template on the page, i need to bump the the template 100 from the page\n. it applies margin to page not the template on the page, i need to bump the the template 100 from the page\n. ",
    "thaisbione": "What is the solution?\nI have the same problem. :(  \nI need put margin at all new pages.\n. @sandal  thank you.\nI solved it using other propriety.\n. What is the solution?\nI have the same problem. :(  \nI need put margin at all new pages.\n. @sandal  thank you.\nI solved it using other propriety.\n. ",
    "JamieAppleseed": "I should note that I've tried this in both Prawn 0.12.0 and 1.0.0.rc2 and both versions generate corrupted links.\n. @anthonycreates Never got it to work I'm afraid. Ended up using PDFtk instead (see http://www.pdflabs.com/tools/pdftk-the-pdf-toolkit/).\n. Well I actually still use Prawn to generate a \"stamp\" file which is then merged onto the main document using PDFtk. The below code should illustrate the basic principle:\n\n```\nstamp = Rails.root.join('some-path-stamp.pdf')\ndoc = Rails.root.join('some-path-doc.pdf')\noutput = Rails.root.join('some-path-output.pdf')\nPrawn::Document.generate(stamp, page_size: 'A4', bottom_margin: 24) do |pdf|\n   # code to generate stamp, for example:\n   pdf.text_box \"Licensed to #{account.name}\", align: :center, valign: :bottom, size: 7\nend\nsystem \"pdftk #{doc} stamp #{stamp} output #{output}\"\nFileUtils.rm_rf stamp\n```\n. I should note that I've tried this in both Prawn 0.12.0 and 1.0.0.rc2 and both versions generate corrupted links.\n. @anthonycreates Never got it to work I'm afraid. Ended up using PDFtk instead (see http://www.pdflabs.com/tools/pdftk-the-pdf-toolkit/).\n. Well I actually still use Prawn to generate a \"stamp\" file which is then merged onto the main document using PDFtk. The below code should illustrate the basic principle:\n\n```\nstamp = Rails.root.join('some-path-stamp.pdf')\ndoc = Rails.root.join('some-path-doc.pdf')\noutput = Rails.root.join('some-path-output.pdf')\nPrawn::Document.generate(stamp, page_size: 'A4', bottom_margin: 24) do |pdf|\n   # code to generate stamp, for example:\n   pdf.text_box \"Licensed to #{account.name}\", align: :center, valign: :bottom, size: 7\nend\nsystem \"pdftk #{doc} stamp #{stamp} output #{output}\"\nFileUtils.rm_rf stamp\n```\n. ",
    "anthonycreates": "I'm seeing this also. @JamieAppleseed did you figure this out?\n\n@sandal did you close this because you want to drop template support?\n. @sandal @JamieAppleseed Thanks for the responses. I'm going to check this out today, but really need to figure this out soon. So may switch to pdftk if I need to. @JamieAppleseed Would appreciate any code samples you have from pdftk or info on how you moved over to that library!\n. @sandal Thanks for clarifying that. I am only using the Prawn gem similarly to @JamieAppleseed for watermarking, so I would only need one library.\n. Yeah, thanks @JamieAppleseed ! I am going to run this in Heroku. Would you want to see the build pack setup for that?\n. I'm seeing this also. @JamieAppleseed did you figure this out?\n\n@sandal did you close this because you want to drop template support?\n. @sandal @JamieAppleseed Thanks for the responses. I'm going to check this out today, but really need to figure this out soon. So may switch to pdftk if I need to. @JamieAppleseed Would appreciate any code samples you have from pdftk or info on how you moved over to that library!\n. @sandal Thanks for clarifying that. I am only using the Prawn gem similarly to @JamieAppleseed for watermarking, so I would only need one library.\n. Yeah, thanks @JamieAppleseed ! I am going to run this in Heroku. Would you want to see the build pack setup for that?\n. ",
    "AngelVillanueva": "Sorry, why did you close the issue?\n. Thanks for the update !\n\nAs a walk around I got it working by parsing the template through RGhost as a previous step; afterwards the template works with prawn.\n\nThanks again\n. Sorry, why did you close the issue?\n. Thanks for the update !\n\nAs a walk around I got it working by parsing the template through RGhost as a previous step; afterwards the template works with prawn.\n\nThanks again\n. ",
    "MrPowers": "@straydogstudio - I am running in to this problem as well, so I hope you can push up your fix.  Thanks!\n. @straydogstudio - I am running in to this problem as well, so I hope you can push up your fix.  Thanks!\n. ",
    "hmt": "Is this still active? I need a working solution for 90 degrees text in my table headers. Would really appreciate any solution. Thank you for your work!\n. @practicingruby oh, I don't know how I could miss that PR. I looked in all the wrong places.\n. Is this still active? I need a working solution for 90 degrees text in my table headers. Would really appreciate any solution. Thank you for your work!\n. @practicingruby oh, I don't know how I could miss that PR. I looked in all the wrong places.\n. ",
    "abhishiv": "If anyone who has any pointers about how I can go about adding this - so I can make a pull request - would be much appreciated as well.\n. If anyone who has any pointers about how I can go about adding this - so I can make a pull request - would be much appreciated as well.\n. ",
    "orangethunder": "I hate to be that guy, who comments on a project that he's contributed very little to, but why do you care about Ruby 1.8?  Surely people who still use 1.8 can use an old version of Prawn?  Would it not help reach the Prawn 1.0.0 milestone faster if 1.8 support was dropped?  \n\nI'm sure some work has gone into 1.8 compatibility already, but that ship has now sailed and it may be best to write it off as a sunk cost.\n. Thanks @cheba, like I said, I have no say in this, was just a random suggestion.  Your link was very useful in understanding the decision making behind this.  While I don't agree with it, I'm in no position to pursue this matter further.  I'm also glad I've never tried to contribute a bug fix - it would have been disheartening to have it delayed due to 1.8 incompatibility.\n. I hate to be that guy, who comments on a project that he's contributed very little to, but why do you care about Ruby 1.8?  Surely people who still use 1.8 can use an old version of Prawn?  Would it not help reach the Prawn 1.0.0 milestone faster if 1.8 support was dropped?  \n\nI'm sure some work has gone into 1.8 compatibility already, but that ship has now sailed and it may be best to write it off as a sunk cost.\n. Thanks @cheba, like I said, I have no say in this, was just a random suggestion.  Your link was very useful in understanding the decision making behind this.  While I don't agree with it, I'm in no position to pursue this matter further.  I'm also glad I've never tried to contribute a bug fix - it would have been disheartening to have it delayed due to 1.8 incompatibility.\n. ",
    "vemv": "Resolving string interpolations is a parse-time operation with negligible overhead.\n. Resolving string interpolations is a parse-time operation with negligible overhead.\n. ",
    "elad": "I have tested both `:indent_paragraphs` and `:indent` blocks and I don't think the issue has been resolved. Here's code and output for English and Hebrew:\n\nEnglish:\n\n``` ruby\nPrawn::Document.generate(\"english-indent.pdf\") do\n  text \"English without indentation\"\n  text \"English with indentation\", :indent_paragraphs => 60\nend\n```\n\n![screen shot 2015-01-19 at 4 35 22 am](https://cloud.githubusercontent.com/assets/3621643/5795269/a6e3f614-9f94-11e4-9f62-1f451f81f94c.png)\n\nHebrew:\n\n``` ruby\nrequire \"prawn\"\nrequire \"bidi\"\n\nPrawn::Document.generate(\"hebrew-indent.pdf\") do\n  font_families.update(\"Arial\" => {\n    :normal => \"Arial.ttf\",\n  });\n  font(\"Arial\")\n\n  self.text_direction = :rtl\n\n  bidi = Bidi.new\n  s = bidi.render_visual \"\u05e2\u05d1\u05e8\u05d9\u05ea \u05dc\u05dc\u05d0 \u05d4\u05d6\u05d7\u05d4\"\n  text s\n  s = bidi.render_visual \"\u05e2\u05d1\u05e8\u05d9\u05ea \u05e2\u05dd \u05d4\u05d6\u05d7\u05d4\"\n  text s, :indent_paragraphs => 60\nend\n```\n\n![screen shot 2015-01-19 at 4 35 35 am](https://cloud.githubusercontent.com/assets/3621643/5795277/e6693718-9f94-11e4-9714-9c3c70bce0e3.png)\n\n(the same applies to `:indent` blocks; I didn't include them for brevity.)\n. > The issue here is that for whatever reason (we'd need to investigate), setting the global `text_direction` does not pass `:direction => :rtl` to the `text()` method, so the fixed code never runs, and the `:ltr` indent is used by default.\n\nI'm not too familiar with the code, but looking at the `text` method I don't see where `options` would even inherit anything from the global document settings. I do see `options[:document] = self` in `inspect_options_for_text`, but not much else. So, again, unless I'm missing something, `options.fetch(:direction, :ltr)` will always return `:ltr` unless `:direction` was set specifically in the options passed to `text`.\n\nUsing this code in `draw_indented_formatted_line` fixes `text` for me:\n\n``` ruby\ndirection = options[:direction] ? options[:direction] : options[:document].text_direction\ngap = direction == :ltr ? [@indent_paragraphs, 0] : [0, @indent_paragraphs]\n```\n\nI can submit it in a pull request,  but it doesn't work for `indent` blocks:\n\n``` ruby\nrequire \"bidi\"\nrequire_relative \"prawn/lib/prawn\"\n\nPrawn::Document.generate(\"hebrew-indent.pdf\") do\n  font(\"#{Prawn::BASEDIR}/data/fonts/DejaVuSans.ttf\")\n\n  self.text_direction = :rtl\n\n  bidi = Bidi.new\n\n  s = bidi.render_visual \"\u05e2\u05d1\u05e8\u05d9\u05ea \u05dc\u05dc\u05d0 \u05d4\u05d6\u05d7\u05d4\"\n  text s\n\n  s = bidi.render_visual \"\u05e2\u05d1\u05e8\u05d9\u05ea \u05e2\u05dd \u05d4\u05d6\u05d7\u05d4 1\"\n  text s, :indent_paragraphs => 60\n\n  self.indent 60 do\n    s = bidi.render_visual \"\u05e2\u05d1\u05e8\u05d9\u05ea \u05e2\u05dd \u05d4\u05d6\u05d7\u05d4 2\"\n    text s\n  end\nend\n```\n\nThe string marked with 1 gets indented properly with the above fix, but the string marked with 2 doesn't. ~~I suspect it's because `self` isn't the document in its context.~~ Looks like it's because `draw_indented_formatted_line` doesn't get called when `text` is called from an `indent` block.\n\nOnce we settle on a fix I can adjust the tests as well. If I understand correctly we want to test for:\n- Direction set globally on the document (above fix)\n- Direction passed to `text` (works)\n- Direction set globally on the document used from `indent` block (unresolved)\n. Thanks for making the fix cleaner! I verified and it works. You're also right about proper usage of `indent` - I was using it wrong, there's no bug there.\n\nI'd like to adjust the tests. Do we want two tests for each (RTL/LTR) case? That is:\n- rtl via document\n- rtl via text\n- ltr via document\n- ltr via text\n\nIf so, I'll add the relevant tests for the LTR case as well.\n. Done, I'd appreciate it if you could review the changes. What's the policy for Prawn? Should I push a branch or use my own fork for the pull request?\n. Hello,\n\nPrawn is the only PDF writer that can deal with RTL so I'll take a look, please keep this issue open but be patient since I'm not familiar with Ruby.\n\nI'm not familiar with the standards but I did find a [Unicode Bidirectional Algorithm](http://www.unicode.org/reports/tr9/) and an [implementation in Ruby](http://sourceforge.net/projects/rubybidi/). I will see if I can use it to make Prawn generate properly formatted RTL text.\n\nI also found [cscott/node-icu-bidi](https://github.com/cscott/node-icu-bidi). Because my project is primarily javascript and I only call Ruby to generate the PDF, I'll try using that _before_ sending the text to Ruby and see if that might be a workaround... (I assume that if it works, another option would be to port that to Ruby if the first option fails.)\n. Sure! It looks like the Ruby bidi code might be useful because all it takes is a string and paragraph direction, both of which are available to us in Prawn. I'll try to test it out as soon as I get a chance. :)\n. It looks like the Ruby BiDi library I linked to above helps solving this problem. I found out that if you use its `to_visual` function and then reverse the text you get properly rendered RTL text.\n\nHere's my code:\n\n``` ruby\nrequire \"prawn\"\nrequire \"./bidi\"\n\ndef render_text(s)\n  return Bidi.new().to_visual(s).reverse!\nend\n\nPrawn::Document.generate(\"hello.pdf\") do\n  font_families.update(\"Arial\" => {\n    :normal => \"Arial.ttf\",\n  });\n  font(\"Arial\")\n\n  self.text_direction = :rtl\n\n  english_and_hebrew = \"\u05de\u05e9\u05e4\u05d8 \u05e2\u05dd \u05e2\u05d1\u05e8\u05d9\u05ea \u05d5-English. \u05de\u05e1\u05e4\u05e8\u05d9\u05dd: 12345 (\u05d5\u05d2\u05dd \u05db\u05dc \u05de\u05d9\u05e0\u05d9 \u05e1\u05d9\u05de\u05e0\u05d9 \u05e4\u05d9\u05e1\u05d5\u05e7) \u05d5\u05d2\u05dd \u05e1\u05d9\u05de\u05df \u05e7\u05e8\u05d9\u05d0\u05d4!\\n\"\n  english_only = \"This is an English-only sentence.\"\n  hebrew_only = \"\u05d6\u05d4\u05d5 \u05de\u05e9\u05e4\u05d8 \u05d1\u05e2\u05d1\u05e8\u05d9\u05ea \u05d1\u05dc\u05d1\u05d3.\"\n\n  text render_text(english_and_hebrew)\n  text render_text(english_only)\n  text render_text(hebrew_only)\nend\n```\n\nNote that GitHub doesn't render the sentence correctly, so here's an image of what it should look like:\n\n![screen shot 2014-11-04 at 3 41 55 pm](https://cloud.githubusercontent.com/assets/3621643/4900545/68ea2434-6428-11e4-9ef5-576cd73a8cca.png)\n\n(it says \"A sentence with Hebrew and English. Numbers: 12345 (and punctuation) and an exclamation mark!\")\n\nHere's a picture of the PDF the code above generated:\n\n![screen shot 2014-11-04 at 3 43 49 pm](https://cloud.githubusercontent.com/assets/3621643/4900556/a0138d60-6428-11e4-996c-8d22f9eb84ec.png)\n\nAs you can see it looks exactly the way it should, and it doesn't affect strings that have no RTL characters in them so there's no need to pass the direction.\n. Following up... I guess the question is how should the integration be done. There are two obvious options:\n- A documentation fix telling people who need BiDi support where and how to get it\n- Bundle the BiDi code with Prawn (it would add <1.5mb, 1.3mb of it is Unicode data) and expose a `render_text` kind function\n\nThoughts?\n. I guess the first step should be to publish Ruby BiDi as a gem, because right now it's only available as a zip from SourceForge... I sent an email to the author and I hope we can get this done soon. I'll also expose a function that reverses the string so developers won't have to wrap it. Once that's done a temporary solution could be a simple documentation note, for example:\n\n> If you plan on writing right-to-left PDFs, consider using `ruby-bidi` and wrapping strings you pass to Prawn's text rendering functions with `render_string`.\n\nSince I'm not a regular contributor and I'm not familiar with the RTL-related code (amount, complexity, maintainers, rate of change, etc.) I don't think my input will be useful to a decision on whether or not it should be factored out as `prawn-bidi`.\n\nI'll follow up once the gem is up. I'll also be more than happy to write any documentation notes on how to use it and provide examples.\n. I have put the Ruby BiDi code in [elad/ruby-bidi](https://github.com/elad/ruby-bidi) and made it into [a gem](https://rubygems.org/gems/bidi) that can be installed with `gem install bidi`. There are still [a few bugs](https://github.com/elad/ruby-bidi/issues/1) but those are related to the packaging, not the code, and are probably just my complete lack of experience writing Ruby. ;)\n\nAfter installing it, I can create a file (say, `hello.rb`) in an empty directory, put this code in it:\n\n``` ruby\nrequire \"prawn\"\nrequire \"bidi\"\n\nPrawn::Document.generate(\"hello.pdf\") do\n  font_families.update(\"Arial\" => {\n    :normal => \"Arial.ttf\",\n  });\n  font(\"Arial\")\n\n  self.text_direction = :rtl\n\n  bidi = Bidi.new\n  text bidi.render_visual \"\u05de\u05e9\u05e4\u05d8 \u05e2\u05dd \u05e2\u05d1\u05e8\u05d9\u05ea \u05d5-English. \u05de\u05e1\u05e4\u05e8\u05d9\u05dd: 12345 (\u05d5\u05d2\u05dd \u05db\u05dc \u05de\u05d9\u05e0\u05d9 \u05e1\u05d9\u05de\u05e0\u05d9 \u05e4\u05d9\u05e1\u05d5\u05e7) \u05d5\u05d2\u05dd \u05e1\u05d9\u05de\u05df \u05e7\u05e8\u05d9\u05d0\u05d4!\\n\"\nend\n```\n\nThrow in the Unicode Arial font, run `ruby hello.rb` and I get `hello.pdf` with properly rendered Hebrew and English text.\n\nShould I write some documentation blurb about this for Prawn?\n. > Sure, a documentation patch would be welcome, though the best best is to put this code snippet in your repository's README (or some other page) and then just link to it from Prawn, so that it doesn't get out of date on our end.\n\nDone.\n\nI'll submit a pull request with a patch for [manual/text/right_to_left_text.rb](https://github.com/prawnpdf/prawn/blob/master/manual/text/right_to_left_text.rb), a very quick glance suggests the text for the manual is constructed from the comments. If that's not the case, please point me in the right direction.\n\n> To make a `prawn-bidi` gem would be even better. It'd do something like automatically call `bidi.render_visual` on input text whenever `:direction => :rtl` was set. It's something you can work on if you'd like, but what you have already is a good starting point.\n\nThat's a great idea, but I don't think I'm the best person to write an official gem for Prawn (see bugs referenced earlier :) but I'll help with anything I can if pinged.\n. Just found this. Please see #514 and [elad/ruby-bidi](https://github.com/elad/ruby-bidi).\n\nI'd close this except that @hectorvs-gxg pointed out Prawn reverses the string, which shouldn't happen if there's proper bidi support. I agree because I specifically added a `render_visual` method to reverse the string in ruby-bidi.\n\n@sandal, I would suggest testing the following:\n- Remove string reversal in Prawn\n- Change recently added documentation about right-to-left text to refer to `to_visual`\n- Remove `render_visual` from ruby-bidi and update README\n\nLess code, less cycles, same results. :)\n. @sandal I understand where you're coming from, but I somewhat disagree with the assertion that simply reversing the strings supports \"pure RTL text.\"\n\nMy reasoning is this: Reversing works as long as your text contains just characters and nothing else. A PDF is a document though, and as soon as you try using richer paragraphs - with punctuation, numbers, mixed languages (especially relevant for technical documents) - things break. At the very least this is broken behavior, and in the worst case scenario this might come as an inconvenient surprise while working in production.\n\nI'd argue that when RTL support is mentioned, the necessity of using a real bidi implementation be underscored so that people who really need RTL text (rather than right-aligned reversed strings ;) know how to make it work from the very beginning.\n\nThat said, you're absolutely right in that someone might be relying on that behavior, which is where your judgment comes into the picture. If you believe that's the case, then I agree it would be surprising to \"unbreak\" it, especially without a major version bump. Personally, as long as there's documentation indicating how to get a solution that works, I'm happy. It just might be the case that if people start relying on `render_visual` then we're only digging a deeper hole. :)\n. @sandal - sure, I'd be happy to help maintain it. Just keep in mind I'm not fluent in Ruby. :)\n. @hectorvs-gxg, if it's not too late, I suggest taking another look at Prawn in combination with ruby-bidi. It very neatly solves exactly the problems you pointed out.\n\n@sandal, are you okay with closing this issue, potentially in favor of opening another one about creating a `prawn-bidi` gem with proper integration?\n. @sandal shouldn't the manual on prawnpdf.org be regenerated to reflect the resolution?\n. Forgot to comment on this issue a long time ago...\n\nAs discussed elsewhere (issue #700), reversing the string order doesn't give you \"true\" RTL in the sense that it's not the way RTL text is visualized. Proper handling requires using the [bidi solution](https://github.com/elad/ruby-bidi), and kerning should probably be applied to that.\n\nThis might be another reason to avoid reversing the string internally, and in any case something that should be handled by any potential future prawn-bidi. :)\n. @sandal, do you want to fix this before the next release? (btw: is there a timeframe for it?)\n. > I really don't know how much work is involved here, and don't have plans to work on this myself in the near future. You can certainly help move it along through either more notes on this ticket or a pull request, though.\n\nI'll definitely help. :)\n\n> I'm OK with not reversing the string as long as using `bidi` produces a working solution, particularly if we can get kerning to work correctly.\n> \n> So it'd be best to start with an example of how this might work, and we could take it from there.\n\nThat's great! Could you please push a branch without all the relevant string reversals? Or, at least let me know if it's safe to grep for \"reverse\" and remove all such occurrences?\n\nHere's what I plan to do, feel free to suggest improvements etc.:\n- Remove string reversing from Prawn and `ruby-bidi` and update relevant documentation\n- Look at how kerning is done for some Hebrew letter combinations (for example, http://www.hafont.com/kerning/ has some good information - but it's in Hebrew!)\n- Using the same font(s), compare kerning achieved through ordinary word processors vs. that produced by Prawn\n\nI also want to compare return values for `width_of` to the expected width. Any ideas how to get the latter?\n. Good thing there are only two places in the code where text get reversed in the RTL case, [text/formatted/fragment.rb:227](https://github.com/prawnpdf/prawn/blob/master/lib/prawn/text/formatted/fragment.rb#L225) and [text/formatted/wrap.rb:94](https://github.com/prawnpdf/prawn/blob/master/lib/prawn/text/formatted/wrap.rb#L94). There are also the tests in [spec/text_spec.rb](https://github.com/prawnpdf/prawn/blob/master/spec/text_spec.rb) that should be adjusted to not reverse the line IIRC.\n\nA quick experiment however shows that this isn't as straightforward as I hoped. Removing all string reversals (from both Prawn and ruby-bidi) results in readable text but sentences in a paragraph appear in reverse order... That is, the opening sentence will be at the bottom and the closing one at the top.\n\nI'll dig more into it when I get some more free time.\n. More testing suggests that at least reversing the string in the caller (that is, using `render_visual` rather than `to_visual`) and in [fragment.rb](https://github.com/prawnpdf/prawn/blob/master/lib/prawn/text/formatted/fragment.rb#L225) results in proper RTL rendering.\n\nThis leads me to believe that at least the first version of `prawn-bidi` (when we finally get to it) should take care to (1) apply the BiDi algorithm on the input string and (2) reverse it for functions like `text`.\n. Makes sense, adjusted the comment to point to the repository which has the README with installation instructions and example usage with Prawn.\n. Oh wow that's very flattering. Thanks for developing such a fantastic tool! :)\n. By the way: the website ([prawnpdf.org](http://prawnpdf.org)) redirects to http://prawnpdf.org/api-docs/1.3/. Just pointing it out in case that's not intentional because I _think_ yesterday it looked different.\n. Could be that yesterday I landed directly in the manual, yeah. Okay then, just making sure! :)\n. Thanks! :)\n. Hello,\n\nThis issue is related to other, more general RTL issues as the RTL visualization in core Prawn is not suitable for actual RTL languages. There are multiple issues on the subject, for example #68, #349, #368, #513, #514, and #700. I took care of part of the issue in the context of Hebrew.\n\nThe consensus, as documented in the [right-to-left text section of the manual](https://github.com/prawnpdf/prawn/blob/master/manual/text/right_to_left_text.rb), is that for now this functionality should be installed from 3rd party gems and hopefully, in the future, there will be a `prawn-rtl` gem that will encapsulate all of this functionality (@practicingruby - please correct me if that's not the case anymore).\n\nThe work @volfgox has done is a huge step in the right direction in the sense that it takes care of Arabic \"cursive\" script (Hebrew, like Latin, doesn't have this issue). When we finally have a `prawn-rtl` package it should definitely be part of it. Maybe that's the tilt we need to actually create it. @volfgox are you up for it? :)\n. I have tested both `:indent_paragraphs` and `:indent` blocks and I don't think the issue has been resolved. Here's code and output for English and Hebrew:\n\nEnglish:\n\n``` ruby\nPrawn::Document.generate(\"english-indent.pdf\") do\n  text \"English without indentation\"\n  text \"English with indentation\", :indent_paragraphs => 60\nend\n```\n\n![screen shot 2015-01-19 at 4 35 22 am](https://cloud.githubusercontent.com/assets/3621643/5795269/a6e3f614-9f94-11e4-9f62-1f451f81f94c.png)\n\nHebrew:\n\n``` ruby\nrequire \"prawn\"\nrequire \"bidi\"\n\nPrawn::Document.generate(\"hebrew-indent.pdf\") do\n  font_families.update(\"Arial\" => {\n    :normal => \"Arial.ttf\",\n  });\n  font(\"Arial\")\n\n  self.text_direction = :rtl\n\n  bidi = Bidi.new\n  s = bidi.render_visual \"\u05e2\u05d1\u05e8\u05d9\u05ea \u05dc\u05dc\u05d0 \u05d4\u05d6\u05d7\u05d4\"\n  text s\n  s = bidi.render_visual \"\u05e2\u05d1\u05e8\u05d9\u05ea \u05e2\u05dd \u05d4\u05d6\u05d7\u05d4\"\n  text s, :indent_paragraphs => 60\nend\n```\n\n![screen shot 2015-01-19 at 4 35 35 am](https://cloud.githubusercontent.com/assets/3621643/5795277/e6693718-9f94-11e4-9714-9c3c70bce0e3.png)\n\n(the same applies to `:indent` blocks; I didn't include them for brevity.)\n. > The issue here is that for whatever reason (we'd need to investigate), setting the global `text_direction` does not pass `:direction => :rtl` to the `text()` method, so the fixed code never runs, and the `:ltr` indent is used by default.\n\nI'm not too familiar with the code, but looking at the `text` method I don't see where `options` would even inherit anything from the global document settings. I do see `options[:document] = self` in `inspect_options_for_text`, but not much else. So, again, unless I'm missing something, `options.fetch(:direction, :ltr)` will always return `:ltr` unless `:direction` was set specifically in the options passed to `text`.\n\nUsing this code in `draw_indented_formatted_line` fixes `text` for me:\n\n``` ruby\ndirection = options[:direction] ? options[:direction] : options[:document].text_direction\ngap = direction == :ltr ? [@indent_paragraphs, 0] : [0, @indent_paragraphs]\n```\n\nI can submit it in a pull request,  but it doesn't work for `indent` blocks:\n\n``` ruby\nrequire \"bidi\"\nrequire_relative \"prawn/lib/prawn\"\n\nPrawn::Document.generate(\"hebrew-indent.pdf\") do\n  font(\"#{Prawn::BASEDIR}/data/fonts/DejaVuSans.ttf\")\n\n  self.text_direction = :rtl\n\n  bidi = Bidi.new\n\n  s = bidi.render_visual \"\u05e2\u05d1\u05e8\u05d9\u05ea \u05dc\u05dc\u05d0 \u05d4\u05d6\u05d7\u05d4\"\n  text s\n\n  s = bidi.render_visual \"\u05e2\u05d1\u05e8\u05d9\u05ea \u05e2\u05dd \u05d4\u05d6\u05d7\u05d4 1\"\n  text s, :indent_paragraphs => 60\n\n  self.indent 60 do\n    s = bidi.render_visual \"\u05e2\u05d1\u05e8\u05d9\u05ea \u05e2\u05dd \u05d4\u05d6\u05d7\u05d4 2\"\n    text s\n  end\nend\n```\n\nThe string marked with 1 gets indented properly with the above fix, but the string marked with 2 doesn't. ~~I suspect it's because `self` isn't the document in its context.~~ Looks like it's because `draw_indented_formatted_line` doesn't get called when `text` is called from an `indent` block.\n\nOnce we settle on a fix I can adjust the tests as well. If I understand correctly we want to test for:\n- Direction set globally on the document (above fix)\n- Direction passed to `text` (works)\n- Direction set globally on the document used from `indent` block (unresolved)\n. Thanks for making the fix cleaner! I verified and it works. You're also right about proper usage of `indent` - I was using it wrong, there's no bug there.\n\nI'd like to adjust the tests. Do we want two tests for each (RTL/LTR) case? That is:\n- rtl via document\n- rtl via text\n- ltr via document\n- ltr via text\n\nIf so, I'll add the relevant tests for the LTR case as well.\n. Done, I'd appreciate it if you could review the changes. What's the policy for Prawn? Should I push a branch or use my own fork for the pull request?\n. Hello,\n\nPrawn is the only PDF writer that can deal with RTL so I'll take a look, please keep this issue open but be patient since I'm not familiar with Ruby.\n\nI'm not familiar with the standards but I did find a [Unicode Bidirectional Algorithm](http://www.unicode.org/reports/tr9/) and an [implementation in Ruby](http://sourceforge.net/projects/rubybidi/). I will see if I can use it to make Prawn generate properly formatted RTL text.\n\nI also found [cscott/node-icu-bidi](https://github.com/cscott/node-icu-bidi). Because my project is primarily javascript and I only call Ruby to generate the PDF, I'll try using that _before_ sending the text to Ruby and see if that might be a workaround... (I assume that if it works, another option would be to port that to Ruby if the first option fails.)\n. Sure! It looks like the Ruby bidi code might be useful because all it takes is a string and paragraph direction, both of which are available to us in Prawn. I'll try to test it out as soon as I get a chance. :)\n. It looks like the Ruby BiDi library I linked to above helps solving this problem. I found out that if you use its `to_visual` function and then reverse the text you get properly rendered RTL text.\n\nHere's my code:\n\n``` ruby\nrequire \"prawn\"\nrequire \"./bidi\"\n\ndef render_text(s)\n  return Bidi.new().to_visual(s).reverse!\nend\n\nPrawn::Document.generate(\"hello.pdf\") do\n  font_families.update(\"Arial\" => {\n    :normal => \"Arial.ttf\",\n  });\n  font(\"Arial\")\n\n  self.text_direction = :rtl\n\n  english_and_hebrew = \"\u05de\u05e9\u05e4\u05d8 \u05e2\u05dd \u05e2\u05d1\u05e8\u05d9\u05ea \u05d5-English. \u05de\u05e1\u05e4\u05e8\u05d9\u05dd: 12345 (\u05d5\u05d2\u05dd \u05db\u05dc \u05de\u05d9\u05e0\u05d9 \u05e1\u05d9\u05de\u05e0\u05d9 \u05e4\u05d9\u05e1\u05d5\u05e7) \u05d5\u05d2\u05dd \u05e1\u05d9\u05de\u05df \u05e7\u05e8\u05d9\u05d0\u05d4!\\n\"\n  english_only = \"This is an English-only sentence.\"\n  hebrew_only = \"\u05d6\u05d4\u05d5 \u05de\u05e9\u05e4\u05d8 \u05d1\u05e2\u05d1\u05e8\u05d9\u05ea \u05d1\u05dc\u05d1\u05d3.\"\n\n  text render_text(english_and_hebrew)\n  text render_text(english_only)\n  text render_text(hebrew_only)\nend\n```\n\nNote that GitHub doesn't render the sentence correctly, so here's an image of what it should look like:\n\n![screen shot 2014-11-04 at 3 41 55 pm](https://cloud.githubusercontent.com/assets/3621643/4900545/68ea2434-6428-11e4-9ef5-576cd73a8cca.png)\n\n(it says \"A sentence with Hebrew and English. Numbers: 12345 (and punctuation) and an exclamation mark!\")\n\nHere's a picture of the PDF the code above generated:\n\n![screen shot 2014-11-04 at 3 43 49 pm](https://cloud.githubusercontent.com/assets/3621643/4900556/a0138d60-6428-11e4-996c-8d22f9eb84ec.png)\n\nAs you can see it looks exactly the way it should, and it doesn't affect strings that have no RTL characters in them so there's no need to pass the direction.\n. Following up... I guess the question is how should the integration be done. There are two obvious options:\n- A documentation fix telling people who need BiDi support where and how to get it\n- Bundle the BiDi code with Prawn (it would add <1.5mb, 1.3mb of it is Unicode data) and expose a `render_text` kind function\n\nThoughts?\n. I guess the first step should be to publish Ruby BiDi as a gem, because right now it's only available as a zip from SourceForge... I sent an email to the author and I hope we can get this done soon. I'll also expose a function that reverses the string so developers won't have to wrap it. Once that's done a temporary solution could be a simple documentation note, for example:\n\n> If you plan on writing right-to-left PDFs, consider using `ruby-bidi` and wrapping strings you pass to Prawn's text rendering functions with `render_string`.\n\nSince I'm not a regular contributor and I'm not familiar with the RTL-related code (amount, complexity, maintainers, rate of change, etc.) I don't think my input will be useful to a decision on whether or not it should be factored out as `prawn-bidi`.\n\nI'll follow up once the gem is up. I'll also be more than happy to write any documentation notes on how to use it and provide examples.\n. I have put the Ruby BiDi code in [elad/ruby-bidi](https://github.com/elad/ruby-bidi) and made it into [a gem](https://rubygems.org/gems/bidi) that can be installed with `gem install bidi`. There are still [a few bugs](https://github.com/elad/ruby-bidi/issues/1) but those are related to the packaging, not the code, and are probably just my complete lack of experience writing Ruby. ;)\n\nAfter installing it, I can create a file (say, `hello.rb`) in an empty directory, put this code in it:\n\n``` ruby\nrequire \"prawn\"\nrequire \"bidi\"\n\nPrawn::Document.generate(\"hello.pdf\") do\n  font_families.update(\"Arial\" => {\n    :normal => \"Arial.ttf\",\n  });\n  font(\"Arial\")\n\n  self.text_direction = :rtl\n\n  bidi = Bidi.new\n  text bidi.render_visual \"\u05de\u05e9\u05e4\u05d8 \u05e2\u05dd \u05e2\u05d1\u05e8\u05d9\u05ea \u05d5-English. \u05de\u05e1\u05e4\u05e8\u05d9\u05dd: 12345 (\u05d5\u05d2\u05dd \u05db\u05dc \u05de\u05d9\u05e0\u05d9 \u05e1\u05d9\u05de\u05e0\u05d9 \u05e4\u05d9\u05e1\u05d5\u05e7) \u05d5\u05d2\u05dd \u05e1\u05d9\u05de\u05df \u05e7\u05e8\u05d9\u05d0\u05d4!\\n\"\nend\n```\n\nThrow in the Unicode Arial font, run `ruby hello.rb` and I get `hello.pdf` with properly rendered Hebrew and English text.\n\nShould I write some documentation blurb about this for Prawn?\n. > Sure, a documentation patch would be welcome, though the best best is to put this code snippet in your repository's README (or some other page) and then just link to it from Prawn, so that it doesn't get out of date on our end.\n\nDone.\n\nI'll submit a pull request with a patch for [manual/text/right_to_left_text.rb](https://github.com/prawnpdf/prawn/blob/master/manual/text/right_to_left_text.rb), a very quick glance suggests the text for the manual is constructed from the comments. If that's not the case, please point me in the right direction.\n\n> To make a `prawn-bidi` gem would be even better. It'd do something like automatically call `bidi.render_visual` on input text whenever `:direction => :rtl` was set. It's something you can work on if you'd like, but what you have already is a good starting point.\n\nThat's a great idea, but I don't think I'm the best person to write an official gem for Prawn (see bugs referenced earlier :) but I'll help with anything I can if pinged.\n. Just found this. Please see #514 and [elad/ruby-bidi](https://github.com/elad/ruby-bidi).\n\nI'd close this except that @hectorvs-gxg pointed out Prawn reverses the string, which shouldn't happen if there's proper bidi support. I agree because I specifically added a `render_visual` method to reverse the string in ruby-bidi.\n\n@sandal, I would suggest testing the following:\n- Remove string reversal in Prawn\n- Change recently added documentation about right-to-left text to refer to `to_visual`\n- Remove `render_visual` from ruby-bidi and update README\n\nLess code, less cycles, same results. :)\n. @sandal I understand where you're coming from, but I somewhat disagree with the assertion that simply reversing the strings supports \"pure RTL text.\"\n\nMy reasoning is this: Reversing works as long as your text contains just characters and nothing else. A PDF is a document though, and as soon as you try using richer paragraphs - with punctuation, numbers, mixed languages (especially relevant for technical documents) - things break. At the very least this is broken behavior, and in the worst case scenario this might come as an inconvenient surprise while working in production.\n\nI'd argue that when RTL support is mentioned, the necessity of using a real bidi implementation be underscored so that people who really need RTL text (rather than right-aligned reversed strings ;) know how to make it work from the very beginning.\n\nThat said, you're absolutely right in that someone might be relying on that behavior, which is where your judgment comes into the picture. If you believe that's the case, then I agree it would be surprising to \"unbreak\" it, especially without a major version bump. Personally, as long as there's documentation indicating how to get a solution that works, I'm happy. It just might be the case that if people start relying on `render_visual` then we're only digging a deeper hole. :)\n. @sandal - sure, I'd be happy to help maintain it. Just keep in mind I'm not fluent in Ruby. :)\n. @hectorvs-gxg, if it's not too late, I suggest taking another look at Prawn in combination with ruby-bidi. It very neatly solves exactly the problems you pointed out.\n\n@sandal, are you okay with closing this issue, potentially in favor of opening another one about creating a `prawn-bidi` gem with proper integration?\n. @sandal shouldn't the manual on prawnpdf.org be regenerated to reflect the resolution?\n. Forgot to comment on this issue a long time ago...\n\nAs discussed elsewhere (issue #700), reversing the string order doesn't give you \"true\" RTL in the sense that it's not the way RTL text is visualized. Proper handling requires using the [bidi solution](https://github.com/elad/ruby-bidi), and kerning should probably be applied to that.\n\nThis might be another reason to avoid reversing the string internally, and in any case something that should be handled by any potential future prawn-bidi. :)\n. @sandal, do you want to fix this before the next release? (btw: is there a timeframe for it?)\n. > I really don't know how much work is involved here, and don't have plans to work on this myself in the near future. You can certainly help move it along through either more notes on this ticket or a pull request, though.\n\nI'll definitely help. :)\n\n> I'm OK with not reversing the string as long as using `bidi` produces a working solution, particularly if we can get kerning to work correctly.\n> \n> So it'd be best to start with an example of how this might work, and we could take it from there.\n\nThat's great! Could you please push a branch without all the relevant string reversals? Or, at least let me know if it's safe to grep for \"reverse\" and remove all such occurrences?\n\nHere's what I plan to do, feel free to suggest improvements etc.:\n- Remove string reversing from Prawn and `ruby-bidi` and update relevant documentation\n- Look at how kerning is done for some Hebrew letter combinations (for example, http://www.hafont.com/kerning/ has some good information - but it's in Hebrew!)\n- Using the same font(s), compare kerning achieved through ordinary word processors vs. that produced by Prawn\n\nI also want to compare return values for `width_of` to the expected width. Any ideas how to get the latter?\n. Good thing there are only two places in the code where text get reversed in the RTL case, [text/formatted/fragment.rb:227](https://github.com/prawnpdf/prawn/blob/master/lib/prawn/text/formatted/fragment.rb#L225) and [text/formatted/wrap.rb:94](https://github.com/prawnpdf/prawn/blob/master/lib/prawn/text/formatted/wrap.rb#L94). There are also the tests in [spec/text_spec.rb](https://github.com/prawnpdf/prawn/blob/master/spec/text_spec.rb) that should be adjusted to not reverse the line IIRC.\n\nA quick experiment however shows that this isn't as straightforward as I hoped. Removing all string reversals (from both Prawn and ruby-bidi) results in readable text but sentences in a paragraph appear in reverse order... That is, the opening sentence will be at the bottom and the closing one at the top.\n\nI'll dig more into it when I get some more free time.\n. More testing suggests that at least reversing the string in the caller (that is, using `render_visual` rather than `to_visual`) and in [fragment.rb](https://github.com/prawnpdf/prawn/blob/master/lib/prawn/text/formatted/fragment.rb#L225) results in proper RTL rendering.\n\nThis leads me to believe that at least the first version of `prawn-bidi` (when we finally get to it) should take care to (1) apply the BiDi algorithm on the input string and (2) reverse it for functions like `text`.\n. Makes sense, adjusted the comment to point to the repository which has the README with installation instructions and example usage with Prawn.\n. Oh wow that's very flattering. Thanks for developing such a fantastic tool! :)\n. By the way: the website ([prawnpdf.org](http://prawnpdf.org)) redirects to http://prawnpdf.org/api-docs/1.3/. Just pointing it out in case that's not intentional because I _think_ yesterday it looked different.\n. Could be that yesterday I landed directly in the manual, yeah. Okay then, just making sure! :)\n. Thanks! :)\n. Hello,\n\nThis issue is related to other, more general RTL issues as the RTL visualization in core Prawn is not suitable for actual RTL languages. There are multiple issues on the subject, for example #68, #349, #368, #513, #514, and #700. I took care of part of the issue in the context of Hebrew.\n\nThe consensus, as documented in the [right-to-left text section of the manual](https://github.com/prawnpdf/prawn/blob/master/manual/text/right_to_left_text.rb), is that for now this functionality should be installed from 3rd party gems and hopefully, in the future, there will be a `prawn-rtl` gem that will encapsulate all of this functionality (@practicingruby - please correct me if that's not the case anymore).\n\nThe work @volfgox has done is a huge step in the right direction in the sense that it takes care of Arabic \"cursive\" script (Hebrew, like Latin, doesn't have this issue). When we finally have a `prawn-rtl` package it should definitely be part of it. Maybe that's the tilt we need to actually create it. @volfgox are you up for it? :)\n. ",
    "aelaa": "@kalashnikovisme can you show more code where you try to run it? This code from manual is working, your code is identical and working too (I had checked it).\n. @kalashnikovisme can you show more code where you try to run it? This code from manual is working, your code is identical and working too (I had checked it).\n. ",
    "kalashnikovisme": "@johnnyshields thanks, it work\n. @johnnyshields thanks, it work\n. ",
    "saihgal": "You can do so currently as follows -\n\n``` ruby\nPrawn::Document.generate(\"test.pdf\") do |pdf|\n  table_data = [[Prawn::Table::Cell::Text.new( pdf, [0,0], :content => \"Red Background\", :inline_format => true, :background_color => \"ff0000\"), \"433\"],\n               [Prawn::Table::Cell::Text.new( pdf, [0,0], :content => \"Green Background\", :inline_format => true, :background_color => \"00ff00\"), \"2343\"],\n               [Prawn::Table::Cell::Text.new( pdf, [0,0], :content => \"Blue Background\", :inline_format => true, :background_color => \"0000ff\"), \"36\"]]\n\n  pdf.table(table_data,:width => 500)\nend\n```\n. I might be able to help but you need to detail the issue. Perhaps post some code of what you're doing\n. You can do so currently as follows -\n\n``` ruby\nPrawn::Document.generate(\"test.pdf\") do |pdf|\n  table_data = [[Prawn::Table::Cell::Text.new( pdf, [0,0], :content => \"Red Background\", :inline_format => true, :background_color => \"ff0000\"), \"433\"],\n               [Prawn::Table::Cell::Text.new( pdf, [0,0], :content => \"Green Background\", :inline_format => true, :background_color => \"00ff00\"), \"2343\"],\n               [Prawn::Table::Cell::Text.new( pdf, [0,0], :content => \"Blue Background\", :inline_format => true, :background_color => \"0000ff\"), \"36\"]]\n\n  pdf.table(table_data,:width => 500)\nend\n```\n. I might be able to help but you need to detail the issue. Perhaps post some code of what you're doing\n. ",
    "andre1810": "I think this is request is still open. I want to highlight characters in a text, not in an inner table.\n. For me it makes sense and I would recommend it.. I think this is request is still open. I want to highlight characters in a text, not in an inner table.\n. For me it makes sense and I would recommend it.. ",
    "cielavenir": "OK, there is an advice.\n\n> Licensing terms follow (License of Ruby):\n\nas I said above, Ruby 1.9.3+ is distributed under different license. So, this line is quite confusing. You should modify the line as:\n\n> Licensing terms follow (License of Ruby 1.9.2 or below):\n. OK, there is an advice.\n\n> Licensing terms follow (License of Ruby):\n\nas I said above, Ruby 1.9.3+ is distributed under different license. So, this line is quite confusing. You should modify the line as:\n\n> Licensing terms follow (License of Ruby 1.9.2 or below):\n. ",
    "ovesh": "Why was this issue closed?\n. Why was this issue closed?\n. ",
    "nithinstany": "Thanks for your replay . But my string contains large number of html tags (< , < b >, < /b > , < i >, < u >) which is entered  by jquery html editor . Its difficult to ESCAPE only \"<\" symbol because it contains other html tags \n. Thanks for your replay . But my string contains large number of html tags (< , < b >, < /b > , < i >, < u >) which is entered  by jquery html editor . Its difficult to ESCAPE only \"<\" symbol because it contains other html tags \n. ",
    "scpike": "I opened up template.pdf and prawnified.pdf in the PDF::Reader library it looks like prawn uses when loading templates. I dumped the value of `raw_content` for each of the pdfs:\n\n```\n\n$ template.pages.first.raw_content\n\n0 g 0 G\n0 g 0 G\n0 g 0 G\nBT\n/F15 9.9626 Tf 139.746 704.136 Td [(Example)-333(\\034eld:)]TJ\n0 g 0 G\n 154.421 -613.698 Td [(1)]TJ\n0 g 0 G\nET\n\n```\n\n```\n$ prawnified.pages.first.raw_content\n\n0 g 0 G\n0 g 0 G\n0 g 0 G\nBT\n/F15 9.9626 Tf 139.746 704.136 Td [(Example)-333(\\034eld:)]TJ\n0 g 0 G\n 154.421 -613.698 Td [(1)]TJ\n0 g 0 G\nET\n q\n/DeviceRGB cs\n0.000 0.000 0.000 scn\n/DeviceRGB CS\n0.000 0.000 0.000 SCN\n1 w\n0 J\n0 j\n[ ] 0 d\nQ\n```\n\nMy naive reading of this is that Prawn isn't touching the internal representation of the text areas, but is adding extra data to the pages. Does this help with the debugging?\n. :+1: awesome\n. I opened up template.pdf and prawnified.pdf in the PDF::Reader library it looks like prawn uses when loading templates. I dumped the value of `raw_content` for each of the pdfs:\n\n```\n\n$ template.pages.first.raw_content\n\n0 g 0 G\n0 g 0 G\n0 g 0 G\nBT\n/F15 9.9626 Tf 139.746 704.136 Td [(Example)-333(\\034eld:)]TJ\n0 g 0 G\n 154.421 -613.698 Td [(1)]TJ\n0 g 0 G\nET\n\n```\n\n```\n$ prawnified.pages.first.raw_content\n\n0 g 0 G\n0 g 0 G\n0 g 0 G\nBT\n/F15 9.9626 Tf 139.746 704.136 Td [(Example)-333(\\034eld:)]TJ\n0 g 0 G\n 154.421 -613.698 Td [(1)]TJ\n0 g 0 G\nET\n q\n/DeviceRGB cs\n0.000 0.000 0.000 scn\n/DeviceRGB CS\n0.000 0.000 0.000 SCN\n1 w\n0 J\n0 j\n[ ] 0 d\nQ\n```\n\nMy naive reading of this is that Prawn isn't touching the internal representation of the text areas, but is adding extra data to the pages. Does this help with the debugging?\n. :+1: awesome\n. ",
    "kuroneko": "Fix now implemented in my fork.\n. :+1: \n. Fix now implemented in my fork.\n. :+1: \n. ",
    "timabdulla": "@sandal why was this issue closed?\n. @sandal: thanks! I can submit a PR to fix what I perceive to be the issue if that will help. \n. @sandal why was this issue closed?\n. @sandal: thanks! I can submit a PR to fix what I perceive to be the issue if that will help. \n. ",
    "jamis": "See https://github.com/prawnpdf/prawn/pull/1007 for a PR that adds TTC support.. :+1: \n. (to be clear -- the CI check is failing because of the dependency on my branch of ttfunk). @juanfal -- it looks like you're using the prawn gem (see the backtrace, it's loading prawn 2.1.0 in the gems directory). This pull request is not yet released (and in fact has not yet been merged or--to my knowledge--reviewed). If you want to test this PR, you'll need to check out the ttc-support branch of my fork of Prawn, as well as my ttc-support branch of my fork of TTFunk.. See https://github.com/prawnpdf/prawn/pull/1007 for a PR that adds TTC support.. :+1: \n. (to be clear -- the CI check is failing because of the dependency on my branch of ttfunk). @juanfal -- it looks like you're using the prawn gem (see the backtrace, it's loading prawn 2.1.0 in the gems directory). This pull request is not yet released (and in fact has not yet been merged or--to my knowledge--reviewed). If you want to test this PR, you'll need to check out the ttc-support branch of my fork of Prawn, as well as my ttc-support branch of my fork of TTFunk.. ",
    "ChandramouliGollapalli": "please give me some suggestions how to do this for right alignment...\n. please give me some suggestions how to do this for right alignment...\n. ",
    "juanfal": "I think it is :text_color => '000000'\nor\n:text_color => [0,0,0,100],\n. ```\nDon't put -W nor in the ruby command line nor in the shebang starting line\u2026\n```\n\nEl 04/09/2013, a las 01:21, Markus Heiler notifications@github.com escribi\u00f3:\n\n> Anyone wants to fix the warnings? I'd wish ruby 1.9.x or higher would not be so noisy, but I always run with warnings enabled and on ruby 1.8.x this was never a problem... things like @text_rendering_mode however could be easily fixed by bundling them into an initializer method and setting them to nil (or whatever other default the prawn authors used for these)\n> \n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/core/page.rb:73: warning: method redefined; discarding old content\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/core/page.rb:92: warning: method redefined; discarding old dictionary\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/core/object_store.rb:232: warning: mismatched indentations at 'end' with 'if' at 226\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/core/document_state.rb:46: warning: assigned but unused variable - info\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/text.rb:321: warning: assigned but unused variable - printed\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/core/text/formatted/wrap.rb:84: warning: shadowing outer local variable - fragment\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/graphics.rb:277: warning: assigned but unused variable - x0\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/graphics.rb:277: warning: assigned but unused variable - y0\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/graphics.rb:277: warning: assigned but unused variable - x1\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/graphics.rb:277: warning: assigned but unused variable - y1\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/graphics.rb:277: warning: assigned but unused variable - x2\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/graphics.rb:277: warning: assigned but unused variable - y2\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/images/jpg.rb:42: warning: assigned but unused variable - buffer\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/document/page_geometry.rb:134: warning: mismatched indentations at 'end' with 'module' at 81\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/document/span.rb:36: warning: `/' after local variable is interpreted as binary operator\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/document/span.rb:36: warning: even though it seems like regexp literal\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/document/snapshot.rb:53: warning: assigned but unused variable - share\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/encoding.rb:114: warning: assigned but unused variable - m\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/font/ttf.rb:319: warning: assigned but unused variable - lines\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/font.rb:326: warning: method redefined; discarding old identifier_for\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/font.rb:281: warning: previous definition of identifier_for was here\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/font.rb:330: warning: method redefined; discarding old inspect\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/font.rb:285: warning: previous definition of inspect was here\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/table/cell.rb:387: warning: method redefined; discarding old border_top_color\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/table/cell.rb:379: warning: previous definition of border_top_color was here\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/table/cell.rb:391: warning: method redefined; discarding old border_top_color=\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/table/cell.rb:383: warning: previous definition of border_top_color= was here\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/core/page.rb:74: warning: instance variable @stamp_stream not initialized\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/core/page.rb:141: warning: instance variable @imported_page not initialized\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/core/page.rb:74: warning: instance variable @stamp_stream not initialized\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/core/page.rb:93: warning: instance variable @stamp_dictionary not initialized\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/core/page.rb:93: warning: instance variable @stamp_dictionary not initialized\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/core/page.rb:141: warning: instance variable @imported_page not initialized\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/core/page.rb:141: warning: instance variable @imported_page not initialized\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/core/page.rb:141: warning: instance variable @imported_page not initialized\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/core/text.rb:115: warning: instance variable @text_direction not initialized\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/core/text.rb:158: warning: instance variable @fallback_fonts not initialized\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/core/text.rb:84: warning: instance variable @default_leading not initialized\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/core/text.rb:209: warning: instance variable @character_spacing not initialized\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/core/text.rb:188: warning: instance variable @text_rendering_mode not initialized\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/core/text.rb:52: warning: instance variable @default_kerning not initialized\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/core/text.rb:209: warning: instance variable @character_spacing not initialized\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/core/text.rb:188: warning: instance variable @text_rendering_mode not initialized\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/core/text.rb:209: warning: instance variable @character_spacing not initialized\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/core/text.rb:209: warning: instance variable @character_spacing not initialized\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/core/text.rb:209: warning: instance variable @character_spacing not initialized\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/core/text.rb:209: warning: instance variable @character_spacing not initialized\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/core/text.rb:209: warning: instance variable @character_spacing not initialized\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/core/text.rb:209: warning: instance variable @character_spacing not initialized\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/core/text.rb:209: warning: instance variable @character_spacing not initialized\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/core/text.rb:209: warning: instance variable @character_spacing not initialized\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/core/text.rb:209: warning: instance variable @character_spacing not initialized\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/core/text.rb:209: warning: instance variable @character_spacing not initialized\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/core/text.rb:227: warning: instance variable @word_spacing not initialized\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/core/page.rb:141: warning: instance variable @imported_page not initialized\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/core/page.rb:141: warning: instance variable @imported_page not initialized\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/core/page.rb:141: warning: instance variable @imported_page not initialized\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n. I didn't know that one could insert a pdf into the current one.  The only formats that my image command recognises are jpg and png.  How can you make prawn reads a pdf \"image\"?\nThanks\n. Ok, I read that\u2026 but it only seems to seek page insertions and that.  What I meant is how to insert a pdf image inside any part of a prawn doc. Tx\n. The answer to this program from ruby\r\n\r\n    mb10:10:57 Desktop $ ruby -v\r\n    ruby 2.4.0p0 (2016-12-24 revision 57164) [x86_64-darwin16]\r\n    mb10:11:01 Desktop $ ruby testPrawn.rb \r\n    /usr/local/lib/ruby/gems/2.4.0/gems/prawn-2.1.0/lib/prawn/font/afm.rb:48:in `initialize': /System/Library/Fonts/LucidaGrande.ttc is not a known font. (Prawn::Errors::UnknownFont)\r\n        from /usr/local/lib/ruby/gems/2.4.0/gems/prawn-2.1.0/lib/prawn/font.rb:289:in `new'\r\n        from /usr/local/lib/ruby/gems/2.4.0/gems/prawn-2.1.0/lib/prawn/font.rb:289:in `load'\r\n        from /usr/local/lib/ruby/gems/2.4.0/gems/prawn-2.1.0/lib/prawn/font.rb:243:in `find_font'\r\n        from /usr/local/lib/ruby/gems/2.4.0/gems/prawn-2.1.0/lib/prawn/font.rb:57:in `font'\r\n        from testPrawn.rb:23:in `block in <main>'\r\n        from /usr/local/lib/ruby/gems/2.4.0/gems/prawn-2.1.0/lib/prawn/document.rb:226:in `initialize'\r\n        from /usr/local/lib/ruby/gems/2.4.0/gems/prawn-2.1.0/lib/prawn/document.rb:142:in `new'\r\n        from /usr/local/lib/ruby/gems/2.4.0/gems/prawn-2.1.0/lib/prawn/document.rb:142:in `generate'\r\n        from testPrawn.rb:20:in `<main>'\r\n. I think it is :text_color => '000000'\nor\n:text_color => [0,0,0,100],\n. ```\nDon't put -W nor in the ruby command line nor in the shebang starting line\u2026\n```\n\nEl 04/09/2013, a las 01:21, Markus Heiler notifications@github.com escribi\u00f3:\n\n> Anyone wants to fix the warnings? I'd wish ruby 1.9.x or higher would not be so noisy, but I always run with warnings enabled and on ruby 1.8.x this was never a problem... things like @text_rendering_mode however could be easily fixed by bundling them into an initializer method and setting them to nil (or whatever other default the prawn authors used for these)\n> \n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/core/page.rb:73: warning: method redefined; discarding old content\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/core/page.rb:92: warning: method redefined; discarding old dictionary\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/core/object_store.rb:232: warning: mismatched indentations at 'end' with 'if' at 226\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/core/document_state.rb:46: warning: assigned but unused variable - info\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/text.rb:321: warning: assigned but unused variable - printed\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/core/text/formatted/wrap.rb:84: warning: shadowing outer local variable - fragment\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/graphics.rb:277: warning: assigned but unused variable - x0\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/graphics.rb:277: warning: assigned but unused variable - y0\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/graphics.rb:277: warning: assigned but unused variable - x1\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/graphics.rb:277: warning: assigned but unused variable - y1\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/graphics.rb:277: warning: assigned but unused variable - x2\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/graphics.rb:277: warning: assigned but unused variable - y2\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/images/jpg.rb:42: warning: assigned but unused variable - buffer\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/document/page_geometry.rb:134: warning: mismatched indentations at 'end' with 'module' at 81\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/document/span.rb:36: warning: `/' after local variable is interpreted as binary operator\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/document/span.rb:36: warning: even though it seems like regexp literal\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/document/snapshot.rb:53: warning: assigned but unused variable - share\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/encoding.rb:114: warning: assigned but unused variable - m\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/font/ttf.rb:319: warning: assigned but unused variable - lines\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/font.rb:326: warning: method redefined; discarding old identifier_for\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/font.rb:281: warning: previous definition of identifier_for was here\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/font.rb:330: warning: method redefined; discarding old inspect\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/font.rb:285: warning: previous definition of inspect was here\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/table/cell.rb:387: warning: method redefined; discarding old border_top_color\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/table/cell.rb:379: warning: previous definition of border_top_color was here\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/table/cell.rb:391: warning: method redefined; discarding old border_top_color=\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/table/cell.rb:383: warning: previous definition of border_top_color= was here\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/core/page.rb:74: warning: instance variable @stamp_stream not initialized\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/core/page.rb:141: warning: instance variable @imported_page not initialized\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/core/page.rb:74: warning: instance variable @stamp_stream not initialized\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/core/page.rb:93: warning: instance variable @stamp_dictionary not initialized\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/core/page.rb:93: warning: instance variable @stamp_dictionary not initialized\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/core/page.rb:141: warning: instance variable @imported_page not initialized\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/core/page.rb:141: warning: instance variable @imported_page not initialized\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/core/page.rb:141: warning: instance variable @imported_page not initialized\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/core/text.rb:115: warning: instance variable @text_direction not initialized\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/core/text.rb:158: warning: instance variable @fallback_fonts not initialized\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/core/text.rb:84: warning: instance variable @default_leading not initialized\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/core/text.rb:209: warning: instance variable @character_spacing not initialized\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/core/text.rb:188: warning: instance variable @text_rendering_mode not initialized\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/core/text.rb:52: warning: instance variable @default_kerning not initialized\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/core/text.rb:209: warning: instance variable @character_spacing not initialized\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/core/text.rb:188: warning: instance variable @text_rendering_mode not initialized\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/core/text.rb:209: warning: instance variable @character_spacing not initialized\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/core/text.rb:209: warning: instance variable @character_spacing not initialized\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/core/text.rb:209: warning: instance variable @character_spacing not initialized\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/core/text.rb:209: warning: instance variable @character_spacing not initialized\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/core/text.rb:209: warning: instance variable @character_spacing not initialized\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/core/text.rb:209: warning: instance variable @character_spacing not initialized\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/core/text.rb:209: warning: instance variable @character_spacing not initialized\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/core/text.rb:209: warning: instance variable @character_spacing not initialized\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/core/text.rb:209: warning: instance variable @character_spacing not initialized\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/core/text.rb:209: warning: instance variable @character_spacing not initialized\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/core/text.rb:227: warning: instance variable @word_spacing not initialized\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/core/page.rb:141: warning: instance variable @imported_page not initialized\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/core/page.rb:141: warning: instance variable @imported_page not initialized\n> /usr/lib/ruby/gems/1.9.1/gems/prawn-0.12.0/lib/prawn/core/page.rb:141: warning: instance variable @imported_page not initialized\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n. I didn't know that one could insert a pdf into the current one.  The only formats that my image command recognises are jpg and png.  How can you make prawn reads a pdf \"image\"?\nThanks\n. Ok, I read that\u2026 but it only seems to seek page insertions and that.  What I meant is how to insert a pdf image inside any part of a prawn doc. Tx\n. The answer to this program from ruby\r\n\r\n    mb10:10:57 Desktop $ ruby -v\r\n    ruby 2.4.0p0 (2016-12-24 revision 57164) [x86_64-darwin16]\r\n    mb10:11:01 Desktop $ ruby testPrawn.rb \r\n    /usr/local/lib/ruby/gems/2.4.0/gems/prawn-2.1.0/lib/prawn/font/afm.rb:48:in `initialize': /System/Library/Fonts/LucidaGrande.ttc is not a known font. (Prawn::Errors::UnknownFont)\r\n        from /usr/local/lib/ruby/gems/2.4.0/gems/prawn-2.1.0/lib/prawn/font.rb:289:in `new'\r\n        from /usr/local/lib/ruby/gems/2.4.0/gems/prawn-2.1.0/lib/prawn/font.rb:289:in `load'\r\n        from /usr/local/lib/ruby/gems/2.4.0/gems/prawn-2.1.0/lib/prawn/font.rb:243:in `find_font'\r\n        from /usr/local/lib/ruby/gems/2.4.0/gems/prawn-2.1.0/lib/prawn/font.rb:57:in `font'\r\n        from testPrawn.rb:23:in `block in <main>'\r\n        from /usr/local/lib/ruby/gems/2.4.0/gems/prawn-2.1.0/lib/prawn/document.rb:226:in `initialize'\r\n        from /usr/local/lib/ruby/gems/2.4.0/gems/prawn-2.1.0/lib/prawn/document.rb:142:in `new'\r\n        from /usr/local/lib/ruby/gems/2.4.0/gems/prawn-2.1.0/lib/prawn/document.rb:142:in `generate'\r\n        from testPrawn.rb:20:in `<main>'\r\n. ",
    "airblade": "So ttfunk seems to be [where the AAAAAA](https://github.com/prawnpdf/ttfunk/blob/master/lib/ttfunk/table/name.rb#L49-L52) is incremented.\n\nPresumably I need a way to get Prawn to reset its ttfunk references.\n. Aha, I achieved this by calling the following before each test:\n\n``` ruby\n::TTFunk::Table::Name.class_variable_set :@@subset_tag, 'AAAAAA'\n```\n\nA bit of hack but it works.\n. It looks like when `text` is UTF-8 and `overflow` contains any non-ASCII characters, e.g. \u00df or \u00fc, `overflow`'s encoding is set to US-ASCII.\n\nThat seems counter-intuitive to me ;)\n\nExample debugging output:\n\n```\ntext: (UTF-8) \"AKKESOIR ~ SS14 / RHINESTONE FINGERTIP RING / Ring klein rund / Strass\"\noverflow: (UTF-8) \"Strass\"\nresult: (UTF-8) \"AKKESOIR ~ SS14 / RHINESTONE FINGERTIP RING / Ring klein rund / \"\n\ntext: (UTF-8) \"AKKESOIR ~ SS14 / BLACK WHITE CHANDELIERS / Ohrring / wei\u00df,schwarz\"\noverflow: (ASCII-8BIT) \"wei\\xDF,schwarz\"\nresult: (UTF-8) \"AKKESOIR ~ SS14 / BLACK WHITE CHANDELIERS / Ohrring / \"\n```\n. Ah, here's an alternative approach which appears to work.\n\nInstead of using `text.sub`, take a substring of `text` whose length is the difference in length between `text` and `overflow`.  The `length` method seems to calculate the length as one would hope regardless of the string's encoding.\n\n``` ruby\ntext = text[0, (text.length - overflow.length - 1)]\ntext = \"#{text}...\"\n```\n\n(The `-1` gets rid of the trailing space or hyphen.)\n\nOf course the dots may still get truncated...but with `:disable_wrap_by_character: true` I think this is the best I can do.\n. This may be related to #603; I'm not sure.\n. @sandal Thanks.  I'm on Ruby 1.9.3p286 and Prawn 1.0.0 \u2013\u00a0let me know if I can provide any further information.\n. @sandal I'll have a go and let you know what I find.\n. Here's a short program that demonstrates the problem.  I ran it on Ruby 1.9.3p286 and Ruby 2.1.3, and Prawn 1.0.0 and Prawn 1.3.0.  The results are below.\n\n``` ruby\n# encoding: utf-8\nrequire 'prawn'\n\n@doc = Prawn::Document.new page_size: 'A4'\n\ndef debug(name, string)\n  puts \"#{name}: (#{string.encoding}) #{string.inspect}\"\nend\n\ndef render_text_box(string)\n  Prawn::Text::Box.new(\n    string,\n    width: 100,\n    height: 20,\n    document: @doc\n  ).render\nend\n\ntext = \"A quick brown fox jumped over the lazy dog.\"\noverflow = render_text_box text\ndebug 'text', text\ndebug 'overflow', overflow\n\ntext = \"A quick brown fox jumped \u00fcber the lazy dog.\"\noverflow = render_text_box text\ndebug 'text', text\ndebug 'overflow', overflow\n```\n\nAnd here are the results:\n\n```\n# Ruby 1.9.3p286, Prawn 1.0.0\ntext: (UTF-8) \"A quick brown fox jumped over the lazy dog.\"\noverflow: (UTF-8) \"jumped over the lazy dog.\"\ntext: (UTF-8) \"A quick brown fox jumped \u00fcber the lazy dog.\"\noverflow: (ASCII-8BIT) \"jumped \\xFCber the lazy dog.\"\n\n# Ruby 1.9.3p286, Prawn 1.3.0\ntext: (UTF-8) \"A quick brown fox jumped over the lazy dog.\"\noverflow: (ASCII-8BIT) \"jumped over the lazy dog.\"\ntext: (UTF-8) \"A quick brown fox jumped \u00fcber the lazy dog.\"\noverflow: (ASCII-8BIT) \"jumped \\xFCber the lazy dog.\"\n\n# Ruby 2.1.3, Prawn 1.0.0\ntext: (UTF-8) \"A quick brown fox jumped over the lazy dog.\"\noverflow: (UTF-8) \"jumped over the lazy dog.\"\ntext: (UTF-8) \"A quick brown fox jumped \u00fcber the lazy dog.\"\noverflow: (ASCII-8BIT) \"jumped \\xFCber the lazy dog.\"\n\n# Ruby 2.1.3, Prawn 1.3.0\ntext: (UTF-8) \"A quick brown fox jumped over the lazy dog.\"\noverflow: (ASCII-8BIT) \"jumped over the lazy dog.\"\ntext: (UTF-8) \"A quick brown fox jumped \u00fcber the lazy dog.\"\noverflow: (ASCII-8BIT) \"jumped \\xFCber the lazy dog.\"\n```\n\nI would expect the overflow to always have the same encoding as the original text, i.e. UTF-8.\n. @sandal Thank you very much for investigating this and for the explanations.\n\nI had no idea that the PDF standard specifies default fonts which only support Win-1252.  That's surprising in this day and age but I suppose it's an antique standard.  I'll leave a comment on #779.\n\nYou're right, using a TTF font solves my immediate problem \u2013\u00a0so thank you.\n\nAs for the thickening plot, I shall follow with interest and try to contribute where I can.\n. @sandal That looks like as simple a solution as can be.\n. I've read the manual several times and I still had no idea the default fonts are Win-1252.\n\nI like the first two options.  I also like the third option because it makes one aware straightaway that a problem could arise later, even if things are currently ok and not triggering the warning or error from option two.\n. @sandal I think that would lead to the least surprise.\n. @sandal This fixes the problem for me.  Thank you!\n. @sandal Great news!\n. Another way of looking at this is I want to create a page in portrait format, but have it actually in landscape.  The motivation is generating labels for a label printer.\n. I believe I've been overthinking this and the solution is trivial.\n\nIn my particular use case I am rendering labels for a label printer.  Unlike printing A4 / Letter sheets of labels, label printers print off a roll so you can say there is one label per \"page\".  To print a label \"sideways\" (a portrait label on its side) one just needs to set the label's dimensions portrait-style (same as the page), then set the layout to landscape in the printer settings when printing.  In other words, let the OS's printing system rotate the label.\n. So ttfunk seems to be [where the AAAAAA](https://github.com/prawnpdf/ttfunk/blob/master/lib/ttfunk/table/name.rb#L49-L52) is incremented.\n\nPresumably I need a way to get Prawn to reset its ttfunk references.\n. Aha, I achieved this by calling the following before each test:\n\n``` ruby\n::TTFunk::Table::Name.class_variable_set :@@subset_tag, 'AAAAAA'\n```\n\nA bit of hack but it works.\n. It looks like when `text` is UTF-8 and `overflow` contains any non-ASCII characters, e.g. \u00df or \u00fc, `overflow`'s encoding is set to US-ASCII.\n\nThat seems counter-intuitive to me ;)\n\nExample debugging output:\n\n```\ntext: (UTF-8) \"AKKESOIR ~ SS14 / RHINESTONE FINGERTIP RING / Ring klein rund / Strass\"\noverflow: (UTF-8) \"Strass\"\nresult: (UTF-8) \"AKKESOIR ~ SS14 / RHINESTONE FINGERTIP RING / Ring klein rund / \"\n\ntext: (UTF-8) \"AKKESOIR ~ SS14 / BLACK WHITE CHANDELIERS / Ohrring / wei\u00df,schwarz\"\noverflow: (ASCII-8BIT) \"wei\\xDF,schwarz\"\nresult: (UTF-8) \"AKKESOIR ~ SS14 / BLACK WHITE CHANDELIERS / Ohrring / \"\n```\n. Ah, here's an alternative approach which appears to work.\n\nInstead of using `text.sub`, take a substring of `text` whose length is the difference in length between `text` and `overflow`.  The `length` method seems to calculate the length as one would hope regardless of the string's encoding.\n\n``` ruby\ntext = text[0, (text.length - overflow.length - 1)]\ntext = \"#{text}...\"\n```\n\n(The `-1` gets rid of the trailing space or hyphen.)\n\nOf course the dots may still get truncated...but with `:disable_wrap_by_character: true` I think this is the best I can do.\n. This may be related to #603; I'm not sure.\n. @sandal Thanks.  I'm on Ruby 1.9.3p286 and Prawn 1.0.0 \u2013\u00a0let me know if I can provide any further information.\n. @sandal I'll have a go and let you know what I find.\n. Here's a short program that demonstrates the problem.  I ran it on Ruby 1.9.3p286 and Ruby 2.1.3, and Prawn 1.0.0 and Prawn 1.3.0.  The results are below.\n\n``` ruby\n# encoding: utf-8\nrequire 'prawn'\n\n@doc = Prawn::Document.new page_size: 'A4'\n\ndef debug(name, string)\n  puts \"#{name}: (#{string.encoding}) #{string.inspect}\"\nend\n\ndef render_text_box(string)\n  Prawn::Text::Box.new(\n    string,\n    width: 100,\n    height: 20,\n    document: @doc\n  ).render\nend\n\ntext = \"A quick brown fox jumped over the lazy dog.\"\noverflow = render_text_box text\ndebug 'text', text\ndebug 'overflow', overflow\n\ntext = \"A quick brown fox jumped \u00fcber the lazy dog.\"\noverflow = render_text_box text\ndebug 'text', text\ndebug 'overflow', overflow\n```\n\nAnd here are the results:\n\n```\n# Ruby 1.9.3p286, Prawn 1.0.0\ntext: (UTF-8) \"A quick brown fox jumped over the lazy dog.\"\noverflow: (UTF-8) \"jumped over the lazy dog.\"\ntext: (UTF-8) \"A quick brown fox jumped \u00fcber the lazy dog.\"\noverflow: (ASCII-8BIT) \"jumped \\xFCber the lazy dog.\"\n\n# Ruby 1.9.3p286, Prawn 1.3.0\ntext: (UTF-8) \"A quick brown fox jumped over the lazy dog.\"\noverflow: (ASCII-8BIT) \"jumped over the lazy dog.\"\ntext: (UTF-8) \"A quick brown fox jumped \u00fcber the lazy dog.\"\noverflow: (ASCII-8BIT) \"jumped \\xFCber the lazy dog.\"\n\n# Ruby 2.1.3, Prawn 1.0.0\ntext: (UTF-8) \"A quick brown fox jumped over the lazy dog.\"\noverflow: (UTF-8) \"jumped over the lazy dog.\"\ntext: (UTF-8) \"A quick brown fox jumped \u00fcber the lazy dog.\"\noverflow: (ASCII-8BIT) \"jumped \\xFCber the lazy dog.\"\n\n# Ruby 2.1.3, Prawn 1.3.0\ntext: (UTF-8) \"A quick brown fox jumped over the lazy dog.\"\noverflow: (ASCII-8BIT) \"jumped over the lazy dog.\"\ntext: (UTF-8) \"A quick brown fox jumped \u00fcber the lazy dog.\"\noverflow: (ASCII-8BIT) \"jumped \\xFCber the lazy dog.\"\n```\n\nI would expect the overflow to always have the same encoding as the original text, i.e. UTF-8.\n. @sandal Thank you very much for investigating this and for the explanations.\n\nI had no idea that the PDF standard specifies default fonts which only support Win-1252.  That's surprising in this day and age but I suppose it's an antique standard.  I'll leave a comment on #779.\n\nYou're right, using a TTF font solves my immediate problem \u2013\u00a0so thank you.\n\nAs for the thickening plot, I shall follow with interest and try to contribute where I can.\n. @sandal That looks like as simple a solution as can be.\n. I've read the manual several times and I still had no idea the default fonts are Win-1252.\n\nI like the first two options.  I also like the third option because it makes one aware straightaway that a problem could arise later, even if things are currently ok and not triggering the warning or error from option two.\n. @sandal I think that would lead to the least surprise.\n. @sandal This fixes the problem for me.  Thank you!\n. @sandal Great news!\n. Another way of looking at this is I want to create a page in portrait format, but have it actually in landscape.  The motivation is generating labels for a label printer.\n. I believe I've been overthinking this and the solution is trivial.\n\nIn my particular use case I am rendering labels for a label printer.  Unlike printing A4 / Letter sheets of labels, label printers print off a roll so you can say there is one label per \"page\".  To print a label \"sideways\" (a portrait label on its side) one just needs to set the label's dimensions portrait-style (same as the page), then set the layout to landscape in the printer settings when printing.  In other words, let the OS's printing system rotate the label.\n. ",
    "jwhawkes": "thanks.. i'll give it a go!!\n. thanks.. i'll give it a go!!\n. ",
    "gugl": "hi. thanks for your help. thats the code for the footer:\n\n```\nbounding_box [bounds.left, bounds.bottom - 10], :width  => bounds.width do\n    float do\n      stroke_horizontal_rule\n      draw_text \"THIS dynamic text should be in bold and THIS dynamic text should have normal style on the same line\", size: 10, at: [48, -23]\n    end\n  end\n```\n\nas far as i know, it's not possible to do inline html styling with draw_text. any ideas?\n. hi. thanks for your help. thats the code for the footer:\n\n```\nbounding_box [bounds.left, bounds.bottom - 10], :width  => bounds.width do\n    float do\n      stroke_horizontal_rule\n      draw_text \"THIS dynamic text should be in bold and THIS dynamic text should have normal style on the same line\", size: 10, at: [48, -23]\n    end\n  end\n```\n\nas far as i know, it's not possible to do inline html styling with draw_text. any ideas?\n. ",
    "kacperk": "More debugging and pdf digging info:\nIt occurs when some of pdfs are in PDF/E format, saving it as PDF/A in Acrobat Pro make the same code working correctly.\n. More debugging and pdf digging info:\nIt occurs when some of pdfs are in PDF/E format, saving it as PDF/A in Acrobat Pro make the same code working correctly.\n. ",
    "tazsingh": "Hey @astjohn, just wondering why you closed this issue? Did you find a solution?\n\nWe ran into the same issue and narrowed it down to the Google Web Font that we were using. If we used a system font, we didn't notice an error. We liked the Google Web Font however and resorted to using ActiveSupport's `transliterate` functionality until we had a proper solution for this problem.\n. I'm using it with Lato from Google Web Fonts. http://www.google.com/fonts/specimen/Lato\n\nIf you use that font with an accented character in the string, you should get the above error.\n\nLet me know if you need anything else!\n. @sandal Ah amazing! I haven't retested under 1.7.8 as I had assumed that it was still broken but that's awesome that it's now fixed on their end.\n\nHappy to see that JRuby is officially supported now as well :)\n. Hey @astjohn, just wondering why you closed this issue? Did you find a solution?\n\nWe ran into the same issue and narrowed it down to the Google Web Font that we were using. If we used a system font, we didn't notice an error. We liked the Google Web Font however and resorted to using ActiveSupport's `transliterate` functionality until we had a proper solution for this problem.\n. I'm using it with Lato from Google Web Fonts. http://www.google.com/fonts/specimen/Lato\n\nIf you use that font with an accented character in the string, you should get the above error.\n\nLet me know if you need anything else!\n. @sandal Ah amazing! I haven't retested under 1.7.8 as I had assumed that it was still broken but that's awesome that it's now fixed on their end.\n\nHappy to see that JRuby is officially supported now as well :)\n. ",
    "sevenseacat": "I've come across this now - it's when you have a single row that needs to span multiple pages.\n\nIn your minimal example, if you replace 'some text' with a lot of text (more than a page worth, to cause that row to wrap over multiple pages), you'll trigger the glitch.\n. I would hope there would be a way of working out how much content could fit on one page, then splitting the rest into a new row on a new page.\n\nHowever, just clipping the text is also a viable (and likely much easier) option.\n. Yep, other columns of the table should be empty (unless they also contain enough text to also wrap to multiple pages).\n. I've come across this now - it's when you have a single row that needs to span multiple pages.\n\nIn your minimal example, if you replace 'some text' with a lot of text (more than a page worth, to cause that row to wrap over multiple pages), you'll trigger the glitch.\n. I would hope there would be a way of working out how much content could fit on one page, then splitting the rest into a new row on a new page.\n\nHowever, just clipping the text is also a viable (and likely much easier) option.\n. Yep, other columns of the table should be empty (unless they also contain enough text to also wrap to multiple pages).\n. ",
    "Skulli": "Just cam across the same problem.\n\n@donv try this here https://gist.github.com/3dd13/833392\n. Ok, found https://github.com/prawnpdf/prawn-templates but somehow it works with 0.14. Even though its stating its been disabled.\n. Just cam across the same problem.\n\n@donv try this here https://gist.github.com/3dd13/833392\n. Ok, found https://github.com/prawnpdf/prawn-templates but somehow it works with 0.14. Even though its stating its been disabled.\n. ",
    "onionpsy": "I am experiencing the same problem here.\nAny solution or workarounds ?\n. I am experiencing the same problem here.\nAny solution or workarounds ?\n. ",
    "txwikinger": "Well, it is a bug in regards of using templates. I have to patch the prawn code to use it at this time, not sure if this is a good permanent solution, especially, since I do not know how to do it specifically for templates.\n\nIs there a more appropriate place for a conversation than here?\n\nThanks\n. Well, it is a bug in regards of using templates. I have to patch the prawn code to use it at this time, not sure if this is a good permanent solution, especially, since I do not know how to do it specifically for templates.\n\nIs there a more appropriate place for a conversation than here?\n\nThanks\n. ",
    "ivantsepp": "Hey, no problem at all! Thanks and I look forward to contributing more to this project.\n. :+1:\n. Hey, no problem at all! Thanks and I look forward to contributing more to this project.\n. :+1:\n. ",
    "timcraft": "@sandal Sure, thanks. Managed to narrow it down a bit...\n\nIt's nothing to do with tables, can reproduce same effect just with right aligned text boxes. It looks like the width of the text is being calculated incorrectly, as evidenced by this:\n\n``` ruby\nrequire 'prawn'\n\nfont = Prawn::Font::AFM.new(Prawn::Document.new, 'Helvetica', {family: 'Helvetica'})\n\np font.compute_width_of('-0.75')\np font.compute_width_of('25.00')\n```\n\nOn version 0.12.0 this prints out 27.348 and 30.024, but on 1.0.0.rc2 I see 30.36 and 30.024. Just from eyeballing it (e.g. the images above), the -0.75 should render narrower than 25.00. Going a bit deeper, the glyph width for that character seems to be incorrect:\n\n``` ruby\nrequire 'prawn'\n\nfont = Prawn::Font::AFM.new(Prawn::Document.new, 'Helvetica', {family: 'Helvetica'})\n\nbyte = '-'.ord\n\nif font.instance_variable_defined?(:@glyph_table) # 1.0.0.rc2\n  p font.instance_variable_get(:@glyph_table)[byte]\nelse # 0.12.0\n  p font.send(:latin_glyphs_table)[byte]\nend\n```\n\nOn 1.0.0.rc2 I get 584 (the width of minus), on 0.12.0 I get 333 (the width of hyphen). This seems to suggest 1.0.0.rc2 is incorrectly treating the hyphen as a minus, but `AFM::Font.new(\"path/to/Helvetica.afm\").metrics_for(45)` returns minus/584 on _both_ versions.\n. @sandal Can confirm afm_bugs branch resolves this issue. Thanks!\n. @sandal Sure, thanks. Managed to narrow it down a bit...\n\nIt's nothing to do with tables, can reproduce same effect just with right aligned text boxes. It looks like the width of the text is being calculated incorrectly, as evidenced by this:\n\n``` ruby\nrequire 'prawn'\n\nfont = Prawn::Font::AFM.new(Prawn::Document.new, 'Helvetica', {family: 'Helvetica'})\n\np font.compute_width_of('-0.75')\np font.compute_width_of('25.00')\n```\n\nOn version 0.12.0 this prints out 27.348 and 30.024, but on 1.0.0.rc2 I see 30.36 and 30.024. Just from eyeballing it (e.g. the images above), the -0.75 should render narrower than 25.00. Going a bit deeper, the glyph width for that character seems to be incorrect:\n\n``` ruby\nrequire 'prawn'\n\nfont = Prawn::Font::AFM.new(Prawn::Document.new, 'Helvetica', {family: 'Helvetica'})\n\nbyte = '-'.ord\n\nif font.instance_variable_defined?(:@glyph_table) # 1.0.0.rc2\n  p font.instance_variable_get(:@glyph_table)[byte]\nelse # 0.12.0\n  p font.send(:latin_glyphs_table)[byte]\nend\n```\n\nOn 1.0.0.rc2 I get 584 (the width of minus), on 0.12.0 I get 333 (the width of hyphen). This seems to suggest 1.0.0.rc2 is incorrectly treating the hyphen as a minus, but `AFM::Font.new(\"path/to/Helvetica.afm\").metrics_for(45)` returns minus/584 on _both_ versions.\n. @sandal Can confirm afm_bugs branch resolves this issue. Thanks!\n. ",
    "thanhquang1988": "The \"test.pdf\" file is a input file.I am getting an error after render text on this file. \nI don't know how to tell you about this problem.I will try to find and repair it. thank you for helping me\n. The cause of the problem is as follow.: \n\nAfter add text & render file like:\n\n```\n\n/Resources 14 0 R\n/Type /Pages\n  >>\nendobj\n5 0 obj\n  << /Contents [6 0 R 7 0 R 43 0 R]\n/MediaBox [0 0 612 792]\n/Parent 4 0 R\n/Type /Page\n/Resources << /Font << /F1.0 46 0 R\n  >>\n  >>\n  >>\nendobj\n```\n\nWhen i use hex edit to change it like :\n\n```\n\n/Resources 14 0 R\n/Type /Pages\n<< /Font << /F1.0 46 0 R >>. >>. >>.\nendobj\n5 0 obj\n << /Contents [6 0 R 7 0 R 43 0 R]\n/MediaBox [0 0 612 792]\n/Parent 4 0 R\n/Type /Page\n.>>\nendobj\n```\n\nThe file has been fixed,\nI am try to look for solutions but i can't find anything. .edited\n. @cheba I have tried to markup for code.\nSorry but my solution is not work, after edit my pdf file can view only Chrome and Foxit reader.\nHere is two file before and after edit :\nhttp://www.mediafire.com/view/4qf2o48bl43psu5/error_before.pdf\nhttp://www.mediafire.com/view/bz4dkeb99ezbe01/error_repair.pdf \n\nPDF.js give some errors : \n``\nError: Invalid XRef stream \nError: Dictionary key must be a name object\n. Who can tell me how to solve the problem. :cry: \n. @cheba The file \"error_before.pdf\" is my output file. and this file has font  error.\ncan you tried again with this file : http://www.mediafire.com/view/vkyboskyywklvc0/12.pdf\n. I tried your script and give that error : at line File.write 'test.pdf', pdf.render\nEncoding::UndefinedConversionError at /testpdf\n\"\\xFF\" from ASCII-8BIT to UTF-8\nAnd backtrace here::\n\n``` ruby\nEncoding::UndefinedConversionError - \"\\xFF\" from ASCII-8BIT to UTF-8:\n  app/controllers/pdf_controller.rb:23:in `index'   => File.write 'test.pdf', pdf.render\n  actionpack (3.2.13) lib/action_controller/metal/implicit_render.rb:4:in `send_\naction'\n  actionpack (3.2.13) lib/abstract_controller/base.rb:167:in `process_action'\n  actionpack (3.2.13) lib/action_controller/metal/rendering.rb:10:in `process_ac\ntion'\n  actionpack (3.2.13) lib/abstract_controller/callbacks.rb:18:in `block in proce\nss_action'\n  activesupport (3.2.13) lib/active_support/callbacks.rb:403:in `_run__438628553\n__process_action__782658454__callbacks'\n  activesupport (3.2.13) lib/active_support/callbacks.rb:405:in `__run_callback'\n\n  activesupport (3.2.13) lib/active_support/callbacks.rb:385:in `_run_process_ac\ntion_callbacks'\n\n```\n. i'm using ruby 1.9.3 and rails 3.2.13. \nI find that line in application.rb::\nconfig.encoding = \"utf-8\"\ni'll try to comment that line and restart my app.\n. Still error about ASCII to UTF-8\n\nDo you checking with this script\n\n``` ruby\n\n    filename = \"#{Prawn::DATADIR}/pdfs/12.pdf\"\n    pdf = Prawn::Document.new(:template => filename) \n    pdf.go_to_page(1)\n    pdf.text_box \"Test\",at: [10,pdf.bounds.top - 100],size: 13,width: 500,height: 600\n    send_data pdf.render, filename: \"test.pdf\", type: 'application/pdf', disposition: 'inline'   \n```\n. @cheba Are you using gem to convert ASCII-8BIT to UTF-8\n. I have just created new app and using prawn gem 1.0.0.rc2. rails 4.0 and ruby 2.0.\nScript: \n\n``` ruby\ndef index\n    #!/usr/bin/env ruby\n    require 'prawn'\n    pdf = Prawn::Document.new(template: '12.pdf', margin: [0, 0, 0, 0])\n    pdf.text_box \"test\", at: [10, pdf.bounds.top - 100], size: 20, width: 200, height: 400\n    send_data pdf.render, filename: \"test.pdf\", type: 'application/pdf', disposition: 'inline'   \n  end\n```\n\nand here is the result file :cry: \n\n```\nhttp://www.mediafire.com/view/zr3rspp5eh9oesv/test.pdf\n\n\nmy repo : https://github.com/nhimbkno1/testprawn\n```\n. That's strange.Why am I receiving an error but you not? :tired_face: \n![error](https://f.cloud.github.com/assets/4501044/1623873/8e9ad458-56b9-11e3-9717-c3f6feca9df2.jpg)\n\n@cheba can you clone and using my code.\n. No exceptions and backtracts but pdf file is not like template. I user PDF.js to view on my pages using canvas.\n. sure @cheba because we only draw_text on page 1, if you draw_text on all pages then this file will be Corrupt file.\n. Yes here is an folder include many templates, all of them give Views error after render text\n\nhttps://www.mediafire.com/folder/05qhs5depwwp4/Error%20Templates\n. It may be caused by your gem is difficultly my gem.Thank you for helping me, though.\nIn my case,when i've saved the output file and open by orther pdf reader software, all give error.(Nitro pdf, Adobe reader,Foxit reader). :zzz: \n. @sandal  @cheba @luongtran  Thanks for everyone.\n. The \"test.pdf\" file is a input file.I am getting an error after render text on this file. \nI don't know how to tell you about this problem.I will try to find and repair it. thank you for helping me\n. The cause of the problem is as follow.: \n\nAfter add text & render file like:\n\n```\n\n/Resources 14 0 R\n/Type /Pages\n  >>\nendobj\n5 0 obj\n  << /Contents [6 0 R 7 0 R 43 0 R]\n/MediaBox [0 0 612 792]\n/Parent 4 0 R\n/Type /Page\n/Resources << /Font << /F1.0 46 0 R\n  >>\n  >>\n  >>\nendobj\n```\n\nWhen i use hex edit to change it like :\n\n```\n\n/Resources 14 0 R\n/Type /Pages\n<< /Font << /F1.0 46 0 R >>. >>. >>.\nendobj\n5 0 obj\n << /Contents [6 0 R 7 0 R 43 0 R]\n/MediaBox [0 0 612 792]\n/Parent 4 0 R\n/Type /Page\n.>>\nendobj\n```\n\nThe file has been fixed,\nI am try to look for solutions but i can't find anything. .edited\n. @cheba I have tried to markup for code.\nSorry but my solution is not work, after edit my pdf file can view only Chrome and Foxit reader.\nHere is two file before and after edit :\nhttp://www.mediafire.com/view/4qf2o48bl43psu5/error_before.pdf\nhttp://www.mediafire.com/view/bz4dkeb99ezbe01/error_repair.pdf \n\nPDF.js give some errors : \n``\nError: Invalid XRef stream \nError: Dictionary key must be a name object\n. Who can tell me how to solve the problem. :cry: \n. @cheba The file \"error_before.pdf\" is my output file. and this file has font  error.\ncan you tried again with this file : http://www.mediafire.com/view/vkyboskyywklvc0/12.pdf\n. I tried your script and give that error : at line File.write 'test.pdf', pdf.render\nEncoding::UndefinedConversionError at /testpdf\n\"\\xFF\" from ASCII-8BIT to UTF-8\nAnd backtrace here::\n\n``` ruby\nEncoding::UndefinedConversionError - \"\\xFF\" from ASCII-8BIT to UTF-8:\n  app/controllers/pdf_controller.rb:23:in `index'   => File.write 'test.pdf', pdf.render\n  actionpack (3.2.13) lib/action_controller/metal/implicit_render.rb:4:in `send_\naction'\n  actionpack (3.2.13) lib/abstract_controller/base.rb:167:in `process_action'\n  actionpack (3.2.13) lib/action_controller/metal/rendering.rb:10:in `process_ac\ntion'\n  actionpack (3.2.13) lib/abstract_controller/callbacks.rb:18:in `block in proce\nss_action'\n  activesupport (3.2.13) lib/active_support/callbacks.rb:403:in `_run__438628553\n__process_action__782658454__callbacks'\n  activesupport (3.2.13) lib/active_support/callbacks.rb:405:in `__run_callback'\n\n  activesupport (3.2.13) lib/active_support/callbacks.rb:385:in `_run_process_ac\ntion_callbacks'\n\n```\n. i'm using ruby 1.9.3 and rails 3.2.13. \nI find that line in application.rb::\nconfig.encoding = \"utf-8\"\ni'll try to comment that line and restart my app.\n. Still error about ASCII to UTF-8\n\nDo you checking with this script\n\n``` ruby\n\n    filename = \"#{Prawn::DATADIR}/pdfs/12.pdf\"\n    pdf = Prawn::Document.new(:template => filename) \n    pdf.go_to_page(1)\n    pdf.text_box \"Test\",at: [10,pdf.bounds.top - 100],size: 13,width: 500,height: 600\n    send_data pdf.render, filename: \"test.pdf\", type: 'application/pdf', disposition: 'inline'   \n```\n. @cheba Are you using gem to convert ASCII-8BIT to UTF-8\n. I have just created new app and using prawn gem 1.0.0.rc2. rails 4.0 and ruby 2.0.\nScript: \n\n``` ruby\ndef index\n    #!/usr/bin/env ruby\n    require 'prawn'\n    pdf = Prawn::Document.new(template: '12.pdf', margin: [0, 0, 0, 0])\n    pdf.text_box \"test\", at: [10, pdf.bounds.top - 100], size: 20, width: 200, height: 400\n    send_data pdf.render, filename: \"test.pdf\", type: 'application/pdf', disposition: 'inline'   \n  end\n```\n\nand here is the result file :cry: \n\n```\nhttp://www.mediafire.com/view/zr3rspp5eh9oesv/test.pdf\n\n\nmy repo : https://github.com/nhimbkno1/testprawn\n```\n. That's strange.Why am I receiving an error but you not? :tired_face: \n![error](https://f.cloud.github.com/assets/4501044/1623873/8e9ad458-56b9-11e3-9717-c3f6feca9df2.jpg)\n\n@cheba can you clone and using my code.\n. No exceptions and backtracts but pdf file is not like template. I user PDF.js to view on my pages using canvas.\n. sure @cheba because we only draw_text on page 1, if you draw_text on all pages then this file will be Corrupt file.\n. Yes here is an folder include many templates, all of them give Views error after render text\n\nhttps://www.mediafire.com/folder/05qhs5depwwp4/Error%20Templates\n. It may be caused by your gem is difficultly my gem.Thank you for helping me, though.\nIn my case,when i've saved the output file and open by orther pdf reader software, all give error.(Nitro pdf, Adobe reader,Foxit reader). :zzz: \n. @sandal  @cheba @luongtran  Thanks for everyone.\n. ",
    "luongtran": "@cheba In this issue, we should write a script to convert template with Prawn - i agree with you. But i just confused with your suggestion. We should add the font define when Prawn add some text which add new fonts? Or we should use default font when it's added?\n. @cheba I think your suggestion is not realistic for the large application. It mean all users have to use our tool to create the pdf template? It will take more time and you cannot gain customer due to some app resolve this problem very well. \nNow, i think the problem at the Prawn is when it see the new font that not define in template it will create new resource at the top page, right?\nSo why we dont define the resource at every pages? In this case i think it will resolve problem\n. @cheba All template files that we're facing issue which have backward definition. The last node is defined at the top file and the first node is defined at the bottom. Does it problem with Prawn? \n. Seem it's difficult for me to use this gem.\nDo you know any other pdf gem that can be resolve this problem and other feature like Prawn?\n. @cheba Can i call Prawn to get font from Page tree node resource of pdf template? So when i insert or draw any text i can define the font that existed in pdf template?\n. @cheba I already fixed this case.\nMy solution: when load template by Prawn, we check if it has pages.data[:Resources] we store it and remove it in pages.data\nThen when populate page we check if page has no definition about Resources we add it.\n. Yes, i think so. Thanks for your help @cheba \n. @cheba In this issue, we should write a script to convert template with Prawn - i agree with you. But i just confused with your suggestion. We should add the font define when Prawn add some text which add new fonts? Or we should use default font when it's added?\n. @cheba I think your suggestion is not realistic for the large application. It mean all users have to use our tool to create the pdf template? It will take more time and you cannot gain customer due to some app resolve this problem very well. \nNow, i think the problem at the Prawn is when it see the new font that not define in template it will create new resource at the top page, right?\nSo why we dont define the resource at every pages? In this case i think it will resolve problem\n. @cheba All template files that we're facing issue which have backward definition. The last node is defined at the top file and the first node is defined at the bottom. Does it problem with Prawn? \n. Seem it's difficult for me to use this gem.\nDo you know any other pdf gem that can be resolve this problem and other feature like Prawn?\n. @cheba Can i call Prawn to get font from Page tree node resource of pdf template? So when i insert or draw any text i can define the font that existed in pdf template?\n. @cheba I already fixed this case.\nMy solution: when load template by Prawn, we check if it has pages.data[:Resources] we store it and remove it in pages.data\nThen when populate page we check if page has no definition about Resources we add it.\n. Yes, i think so. Thanks for your help @cheba \n. ",
    "hschraep": "Thanks  @sandal , i,m blinde :-(\n. Thanks  @sandal , i,m blinde :-(\n. ",
    "tenzan": "@sandal , thanks a lot. It worked. Next time I will post in ML.\n. @sandal , thanks a lot. It worked. Next time I will post in ML.\n. ",
    "joshtaylor": "If its a documentation bug, not a big deal as long as documentation gets updated :) I worked around it by creating a separate font family to handle these weird cases. I'll craft a more specific failing example/test/script as soon as I get a chance.  Thanks!\n. Yes. Thinking outside the box a little, if I had a custom style for `:thin_bold_italic` defined, it would be nice to be able to explicitly pass either `:styles => [:thin, :bold, :italic]` or `:styles => [:thin_bold_italic]`. With the current code, it looks as if bold + italic is the only combination that would work, so if it could be opened up a bit to join the styles passed (`styles.join('_').to_sym`) that might be great!\n. If its a documentation bug, not a big deal as long as documentation gets updated :) I worked around it by creating a separate font family to handle these weird cases. I'll craft a more specific failing example/test/script as soon as I get a chance.  Thanks!\n. Yes. Thinking outside the box a little, if I had a custom style for `:thin_bold_italic` defined, it would be nice to be able to explicitly pass either `:styles => [:thin, :bold, :italic]` or `:styles => [:thin_bold_italic]`. With the current code, it looks as if bold + italic is the only combination that would work, so if it could be opened up a bit to join the styles passed (`styles.join('_').to_sym`) that might be great!\n. ",
    "ayghor": "I thought Prawn was resampling my image, but after inspecting teh pdf with a text editor, I just realized that this is not true.\n. Teh problem was with my pdf reader, xpdf. Firefox's renderer is displaying stuff nicely.\n\nAfter looking at teh horrid output from xpdf, I thought Prawn was resampling my image, like ghostscript, to better fit into a specific medium. I was wrong. I extracted teh jpeg stream from a generated pdf file and diffed with teh original image, and they are equal.\n\nAs long as it doesn't mess with teh real resolution, teh choice of teh point size is just a matter of taste, and I would go for 1/72 in.\n. It would be nice to add something like this to teh docs:\n\nPrawn won't resample or reencode your images. If teh image must be at a certain resolution or quality, it should be resampled or reencoded beforehand.\n. Or even better:\n\nPrawn won't resample or reencode your images. If teh image file size, resolution or quality needs to meet some requirement, it should be resampled or reencoded beforehand.\n. I thought Prawn was resampling my image, but after inspecting teh pdf with a text editor, I just realized that this is not true.\n. Teh problem was with my pdf reader, xpdf. Firefox's renderer is displaying stuff nicely.\n\nAfter looking at teh horrid output from xpdf, I thought Prawn was resampling my image, like ghostscript, to better fit into a specific medium. I was wrong. I extracted teh jpeg stream from a generated pdf file and diffed with teh original image, and they are equal.\n\nAs long as it doesn't mess with teh real resolution, teh choice of teh point size is just a matter of taste, and I would go for 1/72 in.\n. It would be nice to add something like this to teh docs:\n\nPrawn won't resample or reencode your images. If teh image must be at a certain resolution or quality, it should be resampled or reencoded beforehand.\n. Or even better:\n\nPrawn won't resample or reencode your images. If teh image file size, resolution or quality needs to meet some requirement, it should be resampled or reencoded beforehand.\n. ",
    "stayhero": "Hi. \n\nIt does work with the built-in font if it is explicetely specified like this:\n\n``` ruby\n# encoding: utf-8\nrequire File.join(File.expand_path(File.dirname(__FILE__)), \"spec_helper\")\n\ndescribe \"#shrink_to_fit with special utf-8 text\" do\n  it \"Should not throw an exception\" do\n    doc = Prawn::Document.new(page_size: 'A4', margin: [2, 2, 2, 2]) do |pdf|\n      add_unicode_fonts(pdf)\n      pdf.bounding_box([90, 800], :width => 90, :height => 50) do\n        pdf.stroke_bounds\n        broken_text = \" Sample Text\\nSAMPLE SAMPLE SAMPLEodd\u011blen\u00ed ZM\u011aN\\nSAMPLE\"\n        pdf.font 'dejavu'\n        pdf.text broken_text, :overflow => :shrink_to_fit\n      end\n    end\n    file = doc.render\n    File.write(\"/tmp/test.pdf\", file)\n  end\nend\n\n\ndef add_unicode_fonts(pdf)\n  dejavu = \"#{::Prawn::BASEDIR}/data/fonts/DejaVuSans.ttf\"\n  pdf.font_families.update(\"dejavu\" => {\n    :normal      => dejavu,\n    :italic      => dejavu,\n    :bold        => dejavu,\n    :bold_italic => dejavu\n  })\n  pdf.fallback_fonts = [\"dejavu\"]\nend\n```\n\nIf I keep relying on automatic fallback fonts using the not-built-in font DejaVu in crashes the same way. So yes explicetely using the DejaVu font works. \n\nDon't worry about a quick fix but thanks for the hint. ;-) My current workaround was simply catching the exception and use pdf.text with a smaller font without shrink_to_fit option. :) I'm using Prawn (master-branch) in production since a year or so and it never has any problems and this problem seems to be a very rare one.\n\nBTW: Thanks for creating Prawn. It's a very useful piece of software. ;-) I would love to help fixing the bug but I guess for you (or someone familar with the code) it's maybe easier to find the problem than if I would try to fix it by myself. Let me know if you guess that you could fix it relatively easily. If not I would try to take some time and understand your code. ;-)\n. Yes, I'm sure. :-) I forked your repo just yesterday. Did you copy&paste the test from above? Make sure you copy the first pasted version as the second one is the \"fixed\" version. Or checkout from \n\nhttps://github.com/stayhero/prawn/tree/utf8_shrink_to_fit_bug\n\nI just rebased with current master but there were no changes. Maybe I did not correctly add the test to rspec (I'm not familiar with it)... to see the error you need to run\n\n```\nrspec spec/utf8_shrink_to_fit.rb\n```\n\nI don't know why the test is ignored when simply calling \"rspec\" :)\n\nI ran it with MRI 1.9.3-p194 and 2.0.0-p247.  \n\nToday I investigated it a bit more and found out that the error occurs when remember_this_fragment_for_backward_looking_ops is called when @previous_fragment == \"len\u00ed\". The char \u00ed is recognized as ASCII format (which I guess is correct) but somehow the break_char stays encoded in UTF-8 which is why the regex fails. \n. @bpinto Thanks. :-)\n. Hi. \n\nIt does work with the built-in font if it is explicetely specified like this:\n\n``` ruby\n# encoding: utf-8\nrequire File.join(File.expand_path(File.dirname(__FILE__)), \"spec_helper\")\n\ndescribe \"#shrink_to_fit with special utf-8 text\" do\n  it \"Should not throw an exception\" do\n    doc = Prawn::Document.new(page_size: 'A4', margin: [2, 2, 2, 2]) do |pdf|\n      add_unicode_fonts(pdf)\n      pdf.bounding_box([90, 800], :width => 90, :height => 50) do\n        pdf.stroke_bounds\n        broken_text = \" Sample Text\\nSAMPLE SAMPLE SAMPLEodd\u011blen\u00ed ZM\u011aN\\nSAMPLE\"\n        pdf.font 'dejavu'\n        pdf.text broken_text, :overflow => :shrink_to_fit\n      end\n    end\n    file = doc.render\n    File.write(\"/tmp/test.pdf\", file)\n  end\nend\n\n\ndef add_unicode_fonts(pdf)\n  dejavu = \"#{::Prawn::BASEDIR}/data/fonts/DejaVuSans.ttf\"\n  pdf.font_families.update(\"dejavu\" => {\n    :normal      => dejavu,\n    :italic      => dejavu,\n    :bold        => dejavu,\n    :bold_italic => dejavu\n  })\n  pdf.fallback_fonts = [\"dejavu\"]\nend\n```\n\nIf I keep relying on automatic fallback fonts using the not-built-in font DejaVu in crashes the same way. So yes explicetely using the DejaVu font works. \n\nDon't worry about a quick fix but thanks for the hint. ;-) My current workaround was simply catching the exception and use pdf.text with a smaller font without shrink_to_fit option. :) I'm using Prawn (master-branch) in production since a year or so and it never has any problems and this problem seems to be a very rare one.\n\nBTW: Thanks for creating Prawn. It's a very useful piece of software. ;-) I would love to help fixing the bug but I guess for you (or someone familar with the code) it's maybe easier to find the problem than if I would try to fix it by myself. Let me know if you guess that you could fix it relatively easily. If not I would try to take some time and understand your code. ;-)\n. Yes, I'm sure. :-) I forked your repo just yesterday. Did you copy&paste the test from above? Make sure you copy the first pasted version as the second one is the \"fixed\" version. Or checkout from \n\nhttps://github.com/stayhero/prawn/tree/utf8_shrink_to_fit_bug\n\nI just rebased with current master but there were no changes. Maybe I did not correctly add the test to rspec (I'm not familiar with it)... to see the error you need to run\n\n```\nrspec spec/utf8_shrink_to_fit.rb\n```\n\nI don't know why the test is ignored when simply calling \"rspec\" :)\n\nI ran it with MRI 1.9.3-p194 and 2.0.0-p247.  \n\nToday I investigated it a bit more and found out that the error occurs when remember_this_fragment_for_backward_looking_ops is called when @previous_fragment == \"len\u00ed\". The char \u00ed is recognized as ASCII format (which I guess is correct) but somehow the break_char stays encoded in UTF-8 which is why the regex fails. \n. @bpinto Thanks. :-)\n. ",
    "bpinto": "> I don't know why the test is ignored when simply calling \"rspec\" :)\n\n@stayhero You have to append `_spec` to the test filename in order to fix this bug.\n. > I don't know why the test is ignored when simply calling \"rspec\" :)\n\n@stayhero You have to append `_spec` to the test filename in order to fix this bug.\n. ",
    "justbuchanan": "Thanks, I didn't see that other issue/PR before, but it's exactly what I'm looking for!  I tried it on the code I posted above, and it works great.\n. @sandal Now that you mention it, I'm noticing that the original fix did draw the columns a little below the top on all pages except the first one.  Your new fix does correct this and everything looks good.  Thanks a bunch!\n. No problem, thanks again for looking into it :+1: \n. Yeah, I think you're right that this is caused by #268.  It seems like the issue I'm having with the color-swapping only happens on page boundaries.\n. Thanks, I didn't see that other issue/PR before, but it's exactly what I'm looking for!  I tried it on the code I posted above, and it works great.\n. @sandal Now that you mention it, I'm noticing that the original fix did draw the columns a little below the top on all pages except the first one.  Your new fix does correct this and everything looks good.  Thanks a bunch!\n. No problem, thanks again for looking into it :+1: \n. Yeah, I think you're right that this is caused by #268.  It seems like the issue I'm having with the color-swapping only happens on page boundaries.\n. ",
    "onemangrove": "Hi, I had the same thought. I tried on jruby 1.7.9 with a clean rvm gemset and I still see the same issue. Here's a test case:\n\n``` ruby\nPrawn::Document.generate(\"test.pdf\") do |pdf|\n  pdf.formatted_text_box [\n    { text: \"This text should wrap to the next line\", color: \"FF00FF\" }\n  ],\n  at: [ 0, pdf.bounds.top ],\n  width: 20,\n  height: 100\nend\n```\n. Oops, sorry I didn't follow up with this ticket! After the last post I tried it with the latest version of Prawn - for some reason I was on 0.12, and didn't even list prawn version when I opened the bug, which was foolish of me. Anyway, if there was an issue it seems to have been fixed between 0.12 and 0.14. We are now on 0.14 and it works beautifully. This app was being developed on OSX which was when I found the issue - it is now working on both OSX and Ubuntu Linux 12.04 LTS. Thanks\n. Hi, I had the same thought. I tried on jruby 1.7.9 with a clean rvm gemset and I still see the same issue. Here's a test case:\n\n``` ruby\nPrawn::Document.generate(\"test.pdf\") do |pdf|\n  pdf.formatted_text_box [\n    { text: \"This text should wrap to the next line\", color: \"FF00FF\" }\n  ],\n  at: [ 0, pdf.bounds.top ],\n  width: 20,\n  height: 100\nend\n```\n. Oops, sorry I didn't follow up with this ticket! After the last post I tried it with the latest version of Prawn - for some reason I was on 0.12, and didn't even list prawn version when I opened the bug, which was foolish of me. Anyway, if there was an issue it seems to have been fixed between 0.12 and 0.14. We are now on 0.14 and it works beautifully. This app was being developed on OSX which was when I found the issue - it is now working on both OSX and Ubuntu Linux 12.04 LTS. Thanks\n. ",
    "basvk": " :+1:\n.  :+1:\n. ",
    "cbartlett": ":+1:\n. Oh, that explains why I kept getting email notifications again after unsubscribing. Thanks, [redacted].\n\nI personally find this exercise a little silly. All it takes is one of the 80 people to not reply, be unavailable, have left Github, etc. Perhaps I'm just a little skeptical that you'll be able to get a response from every single person, thus making this effort entirely futile.\n. @cheba Nice work tracking me down then! :grin: I'm all for changing the license, who doesn't prefer MIT these days, besides Stallman?\n\nAs an aside: Legally speaking, what happens to people who are already licensing it under GPL? This doesn't change the license out from under them, right?\n. :+1:\n. Oh, that explains why I kept getting email notifications again after unsubscribing. Thanks, [redacted].\n\nI personally find this exercise a little silly. All it takes is one of the 80 people to not reply, be unavailable, have left Github, etc. Perhaps I'm just a little skeptical that you'll be able to get a response from every single person, thus making this effort entirely futile.\n. @cheba Nice work tracking me down then! :grin: I'm all for changing the license, who doesn't prefer MIT these days, besides Stallman?\n\nAs an aside: Legally speaking, what happens to people who are already licensing it under GPL? This doesn't change the license out from under them, right?\n. ",
    "joneslee85": ":+1 I'm okay with this change\n. :+1 I'm okay with this change\n. ",
    "lenny": ":+1:\n. :+1:\n. ",
    "mrkn": ":+1: \n. :+1: \n. ",
    "JEG2": ":+1: \n. :+1: \n. ",
    "FloWi": ":+1: I'm ok\n. :+1: I'm ok\n. ",
    "mikel": ":thumbsup:  Thanks @sandal for making sure everyone was ok with this.\n. :thumbsup:  Thanks @sandal for making sure everyone was ok with this.\n. ",
    "lawso017": "Thanks, MIT fine with me as well.\n\nOn Fri, Jan 3, 2014 at 8:45 PM, Will Bryant notifications@github.comwrote:\n\n> +1 for MIT\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/prawnpdf/prawn/issues/625#issuecomment-31568142\n> .\n\n## \n\nWilliam (B.J.) Lawson, MD\n919.335.3107 (direct)\n. Thanks, MIT fine with me as well.\n\nOn Fri, Jan 3, 2014 at 8:45 PM, Will Bryant notifications@github.comwrote:\n\n> +1 for MIT\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/prawnpdf/prawn/issues/625#issuecomment-31568142\n> .\n\n## \n\nWilliam (B.J.) Lawson, MD\n919.335.3107 (direct)\n. ",
    "torgoton": ":+1: \n. :+1: \n. ",
    "aguids": "[image: :+1:]\n. [image: :+1:]\n. ",
    "jweathers777": ":+1:\n. :+1:\n. ",
    "seebs": "Sounds fine to me.\n. Sounds fine to me.\n. ",
    "scoopr": "OK for me\n. OK for me\n. ",
    "tim-vandecasteele": "+1\n\nOn Sat, Jan 4, 2014 at 8:17 AM, Mikko Lehtonen notifications@github.com\nwrote:\n\n> ## OK for me\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/prawnpdf/prawn/issues/625#issuecomment-31573328\n. +1\n\nOn Sat, Jan 4, 2014 at 8:17 AM, Mikko Lehtonen notifications@github.com\nwrote:\n\n> ## OK for me\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/prawnpdf/prawn/issues/625#issuecomment-31573328\n. ",
    "shanebonham": ":+1:\n\n> On Jan 3, 2014, at 11:31 PM, Tim Vandecasteele notifications@github.com wrote:\n> \n> +1 \n> \n> On Sat, Jan 4, 2014 at 8:17 AM, Mikko Lehtonen notifications@github.com \n> wrote: \n> \n> > ## OK for me \n> > \n> > Reply to this email directly or view it on GitHub: \n> > https://github.com/prawnpdf/prawn/issues/625#issuecomment-31573328\n> > \u2014\n> > Reply to this email directly or view it on GitHub.\n. :+1:\n\n> On Jan 3, 2014, at 11:31 PM, Tim Vandecasteele notifications@github.com wrote:\n> \n> +1 \n> \n> On Sat, Jan 4, 2014 at 8:17 AM, Mikko Lehtonen notifications@github.com \n> wrote: \n> \n> > ## OK for me \n> > \n> > Reply to this email directly or view it on GitHub: \n> > https://github.com/prawnpdf/prawn/issues/625#issuecomment-31573328\n> > \u2014\n> > Reply to this email directly or view it on GitHub.\n. ",
    "aayushkhandelwal11": "+1\n\nOn Saturday, 4 January 2014, Henrik Nyh wrote:\n\n> [image: :+1:]\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/prawnpdf/prawn/issues/625#issuecomment-31574118\n> .\n\n## \n\nThanks & Regards\nAayush Khandelwal\nSoftware Engineer\nVinsol http://www.vinsol.com\n. +1\n\nOn Saturday, 4 January 2014, Henrik Nyh wrote:\n\n> [image: :+1:]\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/prawnpdf/prawn/issues/625#issuecomment-31574118\n> .\n\n## \n\nThanks & Regards\nAayush Khandelwal\nSoftware Engineer\nVinsol http://www.vinsol.com\n. ",
    "burisu": ":+1: \n. :+1: \n. ",
    "phurley": "[image: :+1:]\n\nOn Fri, Jan 3, 2014 at 6:26 PM, Alexander Mankuta\nnotifications@github.comwrote:\n\n> Prawn followed Ruby licensing strategy from the very beginning. The main\n> reason for that was that if people can use Ruby in their project they\n> certainly would be able to use Prawn as well. Ruby gave switched grom\n> GPL2/3 to 2-clause BSD license about three years ago.\n> \n> At this time the most popular license among Ruby projects is MIThttp://choosealicense.com/licenses/mit/\n> .\n> \n> The following people's code is in the master right now.\n> -  @aayushkhandelwal11 https://github.com/aayushkhandelwal11\n> -  @aguids https://github.com/aguids\n> -  @alexdowad https://github.com/alexdowad\n> -  @astjohn https://github.com/astjohn\n> -  @backspace https://github.com/backspace\n> -  @basvk https://github.com/basvk\n> -  @bluejade https://github.com/bluejade\n> -  @boutil https://github.com/boutil\n> -  @bradediger https://github.com/bradediger\n> -  @burisu https://github.com/burisu\n> -  @capps https://github.com/capps\n> -  @cbartlett https://github.com/cbartlett\n> -  @cheba https://github.com/cheba\n> -  @crazymykl https://github.com/crazymykl\n> -  @dougjohnston https://github.com/dougjohnston\n> -  @fidothe https://github.com/fidothe\n> -  @FloWi https://github.com/FloWi\n> -  @fnando https://github.com/fnando\n> -  @geeksam https://github.com/geeksam\n> -  @gettalong https://github.com/gettalong\n> -  @giuseb https://github.com/giuseb\n> -  @hbrandl https://github.com/hbrandl\n> -  @henrik https://github.com/henrik\n> -  @huerlisi https://github.com/huerlisi\n> -  @igorbozato https://github.com/igorbozato\n> -  @ivantsepp https://github.com/ivantsepp\n> -  @jamis https://github.com/jamis\n> -  @JEG2 https://github.com/JEG2\n> -  @jeremyf https://github.com/jeremyf\n> -  @joncanady https://github.com/joncanady\n> -  @joneslee85 https://github.com/joneslee85\n> -  @jonsgreen https://github.com/jonsgreen\n> -  @jonsgreen https://github.com/jonsgreen\n> -  @jordanbyron https://github.com/jordanbyron\n> -  @jweathers777 https://github.com/jweathers777\n> -  @kennethkalmer https://github.com/kennethkalmer\n> -  @koriroys https://github.com/koriroys\n> -  @kuroneko https://github.com/kuroneko\n> -  @lawso017 https://github.com/lawso017\n> -  @lenny https://github.com/lenny\n> -  @luis-ca https://github.com/luis-ca\n> -  @matthewrudy https://github.com/matthewrudy\n> -  @mbklein https://github.com/mbklein\n> -  @mdaines https://github.com/mdaines\n> -  @mikel https://github.com/mikel\n> -  @mrkn https://github.com/mrkn\n> -  @murrekatt https://github.com/murrekatt\n> -  @nathancolgate https://github.com/nathancolgate\n> -  @p8 https://github.com/p8\n> -  @packetmonkey https://github.com/packetmonkey\n> -  @phurley https://github.com/phurley\n> -  @proactive\n> -  @pwnall / @costan\n> -  @ratbeard\n> -  @riopro\n> -  @rivsc\n> -  @rubyredrick\n> -  @sandal\n> -  @scoopr\n> -  @scpike\n> -  @seebs\n> -  @sgwanlee\n> -  @shanebonham\n> -  @sigmike\n> -  @sos4nt\n> -  @strzibny\n> -  @tim-vandecasteele\n> -  @toretore\n> -  @torgoton\n> -  @trym\n> -  @vizjerai\n> -  @vongrippen\n> -  @weimeng\n> -  @wesgarrison\n> -  @whoops\n> -  @willbryant\n> -  @wpiekutowski\n> -  @yob\n> -  Jaron Kennel\n> - ##  otavio\n>   \n>   paul\n>   \n>   Please chime in below if you object to the move.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/prawnpdf/prawn/issues/625\n> .\n. [image: :+1:]\n\nOn Fri, Jan 3, 2014 at 6:26 PM, Alexander Mankuta\nnotifications@github.comwrote:\n\n> Prawn followed Ruby licensing strategy from the very beginning. The main\n> reason for that was that if people can use Ruby in their project they\n> certainly would be able to use Prawn as well. Ruby gave switched grom\n> GPL2/3 to 2-clause BSD license about three years ago.\n> \n> At this time the most popular license among Ruby projects is MIThttp://choosealicense.com/licenses/mit/\n> .\n> \n> The following people's code is in the master right now.\n> -  @aayushkhandelwal11 https://github.com/aayushkhandelwal11\n> -  @aguids https://github.com/aguids\n> -  @alexdowad https://github.com/alexdowad\n> -  @astjohn https://github.com/astjohn\n> -  @backspace https://github.com/backspace\n> -  @basvk https://github.com/basvk\n> -  @bluejade https://github.com/bluejade\n> -  @boutil https://github.com/boutil\n> -  @bradediger https://github.com/bradediger\n> -  @burisu https://github.com/burisu\n> -  @capps https://github.com/capps\n> -  @cbartlett https://github.com/cbartlett\n> -  @cheba https://github.com/cheba\n> -  @crazymykl https://github.com/crazymykl\n> -  @dougjohnston https://github.com/dougjohnston\n> -  @fidothe https://github.com/fidothe\n> -  @FloWi https://github.com/FloWi\n> -  @fnando https://github.com/fnando\n> -  @geeksam https://github.com/geeksam\n> -  @gettalong https://github.com/gettalong\n> -  @giuseb https://github.com/giuseb\n> -  @hbrandl https://github.com/hbrandl\n> -  @henrik https://github.com/henrik\n> -  @huerlisi https://github.com/huerlisi\n> -  @igorbozato https://github.com/igorbozato\n> -  @ivantsepp https://github.com/ivantsepp\n> -  @jamis https://github.com/jamis\n> -  @JEG2 https://github.com/JEG2\n> -  @jeremyf https://github.com/jeremyf\n> -  @joncanady https://github.com/joncanady\n> -  @joneslee85 https://github.com/joneslee85\n> -  @jonsgreen https://github.com/jonsgreen\n> -  @jonsgreen https://github.com/jonsgreen\n> -  @jordanbyron https://github.com/jordanbyron\n> -  @jweathers777 https://github.com/jweathers777\n> -  @kennethkalmer https://github.com/kennethkalmer\n> -  @koriroys https://github.com/koriroys\n> -  @kuroneko https://github.com/kuroneko\n> -  @lawso017 https://github.com/lawso017\n> -  @lenny https://github.com/lenny\n> -  @luis-ca https://github.com/luis-ca\n> -  @matthewrudy https://github.com/matthewrudy\n> -  @mbklein https://github.com/mbklein\n> -  @mdaines https://github.com/mdaines\n> -  @mikel https://github.com/mikel\n> -  @mrkn https://github.com/mrkn\n> -  @murrekatt https://github.com/murrekatt\n> -  @nathancolgate https://github.com/nathancolgate\n> -  @p8 https://github.com/p8\n> -  @packetmonkey https://github.com/packetmonkey\n> -  @phurley https://github.com/phurley\n> -  @proactive\n> -  @pwnall / @costan\n> -  @ratbeard\n> -  @riopro\n> -  @rivsc\n> -  @rubyredrick\n> -  @sandal\n> -  @scoopr\n> -  @scpike\n> -  @seebs\n> -  @sgwanlee\n> -  @shanebonham\n> -  @sigmike\n> -  @sos4nt\n> -  @strzibny\n> -  @tim-vandecasteele\n> -  @toretore\n> -  @torgoton\n> -  @trym\n> -  @vizjerai\n> -  @vongrippen\n> -  @weimeng\n> -  @wesgarrison\n> -  @whoops\n> -  @willbryant\n> -  @wpiekutowski\n> -  @yob\n> -  Jaron Kennel\n> - ##  otavio\n>   \n>   paul\n>   \n>   Please chime in below if you object to the move.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/prawnpdf/prawn/issues/625\n> .\n. ",
    "trym": ":+1: \n. :+1: \n. ",
    "dougjohnston": ":+1:\n. :+1:\n. ",
    "p8": ":+1:\n. :+1:\n. ",
    "jeremyf": ":+1: \n. @packetmonkey Ping!\n. It appears that I can do what I want by using the following:\n\n``` ruby\n    template_for_number_of_pages = \"<page>\"\n    options = { at: [bounds.right - 150, 0], width: 150, align: :right, page_filter: :odd, start_count_at: 1 }\n    number_pages template_for_number_of_pages, options\n\n    options = { at: [0, bounds.left], width: 150, align: :left, page_filter: :even, start_count_at: 2 }\n    number_pages template_for_number_of_pages, options\n```\n\nThis snippet renders the odd page's page number on the right and the even page's on the left. And increments correctly.\n. I updated the manual generation so the documentation that I wrote would be included.\n\nAlso corrected the missing comma. Thank you!\n. @sandal I fixed the request and pushed it up. Thanks for walking me through the process. I like the idea of Rubocop running as part of CI. I'm trying to get my team to follow those guides as well.\n. @sandal Is the merge done via the same pull request mechanism, but I just pull the trigger?\n. :+1: \n. @packetmonkey Ping!\n. It appears that I can do what I want by using the following:\n\n``` ruby\n    template_for_number_of_pages = \"<page>\"\n    options = { at: [bounds.right - 150, 0], width: 150, align: :right, page_filter: :odd, start_count_at: 1 }\n    number_pages template_for_number_of_pages, options\n\n    options = { at: [0, bounds.left], width: 150, align: :left, page_filter: :even, start_count_at: 2 }\n    number_pages template_for_number_of_pages, options\n```\n\nThis snippet renders the odd page's page number on the right and the even page's on the left. And increments correctly.\n. I updated the manual generation so the documentation that I wrote would be included.\n\nAlso corrected the missing comma. Thank you!\n. @sandal I fixed the request and pushed it up. Thanks for walking me through the process. I like the idea of Rubocop running as part of CI. I'm trying to get my team to follow those guides as well.\n. @sandal Is the merge done via the same pull request mechanism, but I just pull the trigger?\n. ",
    "mdaines": "OK\n. OK\n. ",
    "koriroys": "Pretty sure I'm ok with you relicensing my two line grammar fix. :smile_cat: \n\n:+1:\n. Pretty sure I'm ok with you relicensing my two line grammar fix. :smile_cat: \n\n:+1:\n. ",
    "andrewtimberlake": "I'm not sure if any of my code is still in master but :+1: anyway :-)\nThanks @kennethkalmer \n. I'm not sure if any of my code is still in master but :+1: anyway :-)\nThanks @kennethkalmer \n. ",
    "jaronkk": " :+1:\n.  :+1:\n. ",
    "murrekatt": ":+1:\n. :+1:\n. ",
    "rivsc": ":+1: \n. :+1: \n. ",
    "pparidans": "Also :+1: (and not on the list either, I'm still a 'junior' contributor :wink: )\n. @sandal I just tested it on JRuby for Windows and it correctly displayed the text without errors.\n\nEnvironment:\n- Windows 7 x64 SP1\n- JRuby 1.7.10\n- Java 1.7rev51\n- Prawn 0.14.0, 0.13.2\n- Adobe Reader 11.0.06\n. @iamkobold You said you were working on Windows, but which implementation of Ruby are you using? And 32 or 64bits (and yes, I encountered different behaviors in the past with PDFs on those architectures...) ?\n. Actually, I also test it on OS X: all tests are passing (without this modification) for both MRI 2.1.0 and JRuby 1.7.10. Didn't checked yet on Linux.\n\nIf you need more tests from a Win machine, let me know!\n. Done!\n\nBTW, I'm not sure that it would be related to the current issue because `generate` and `render_file` use a `File` object and not a `StringIO`. And I never had any problem when directly generating pdf to file.\n. I still need to run tests for this modification with a MRI implementation on Windows to check that tests are still passing on this configuration.\n\nAnyway, Travis-CI seems to be happy! :sunglasses: \n. Go ahead! If you need more Windows' tests, I would happily help!\n. Thank you @sandal ! :)\n. Actually, I had the same issue (but forgot to create a ticket)! \nThanks A LOT @sandal ! :sunglasses: \n. Also :+1: (and not on the list either, I'm still a 'junior' contributor :wink: )\n. @sandal I just tested it on JRuby for Windows and it correctly displayed the text without errors.\n\nEnvironment:\n- Windows 7 x64 SP1\n- JRuby 1.7.10\n- Java 1.7rev51\n- Prawn 0.14.0, 0.13.2\n- Adobe Reader 11.0.06\n. @iamkobold You said you were working on Windows, but which implementation of Ruby are you using? And 32 or 64bits (and yes, I encountered different behaviors in the past with PDFs on those architectures...) ?\n. Actually, I also test it on OS X: all tests are passing (without this modification) for both MRI 2.1.0 and JRuby 1.7.10. Didn't checked yet on Linux.\n\nIf you need more tests from a Win machine, let me know!\n. Done!\n\nBTW, I'm not sure that it would be related to the current issue because `generate` and `render_file` use a `File` object and not a `StringIO`. And I never had any problem when directly generating pdf to file.\n. I still need to run tests for this modification with a MRI implementation on Windows to check that tests are still passing on this configuration.\n\nAnyway, Travis-CI seems to be happy! :sunglasses: \n. Go ahead! If you need more Windows' tests, I would happily help!\n. Thank you @sandal ! :)\n. Actually, I had the same issue (but forgot to create a ticket)! \nThanks A LOT @sandal ! :sunglasses: \n. ",
    "iamkobold": "Sorry I was using Adobe 11 on windows, Mac Preview and Chrome were not barking about any errors. Also this issue was observed in Prawn 1.0.0.RC2\n. What do you need exactly, i have a Windows VM that with acrobat 11. Let me know how i can help. \n. If you could give me the PDF I can load it in Adobe\n. I saw this behavior on windows 74 64-bit arch with adobe acrobat pro 11 64-bit. Adobe would read the PDF and render 'most' of it usually the first page had things missing in it.\n. Our users observed it in reader, i installed pro to try and figure out what i was doing wrong. It would still pop up that innocuous dialog saying the PDF had errors though in both programs.\n. Sorry I was using Adobe 11 on windows, Mac Preview and Chrome were not barking about any errors. Also this issue was observed in Prawn 1.0.0.RC2\n. What do you need exactly, i have a Windows VM that with acrobat 11. Let me know how i can help. \n. If you could give me the PDF I can load it in Adobe\n. I saw this behavior on windows 74 64-bit arch with adobe acrobat pro 11 64-bit. Adobe would read the PDF and render 'most' of it usually the first page had things missing in it.\n. Our users observed it in reader, i installed pro to try and figure out what i was doing wrong. It would still pop up that innocuous dialog saying the PDF had errors though in both programs.\n. ",
    "dmwilliamstech": "sandal thank you for your help.\nAs you can see the table generated has data running off.\n\n![screen shot 2014-01-22 at 9 49 39 am](https://f.cloud.github.com/assets/5481556/1974800/9bc0c81c-8374-11e3-92f7-afdee1e12e2d.png)\n. Here is sample source code\n\n```\nrequire 'prawn'\nrequire 'date'\nPrawn::Document.generate \"sample.pdf\", :page_layout => :landscape do |pdf|\n        sD = File.open('sampleData.json', \"r\")\n        arr = sD.read \n        vuls = [[\"# Of Vuls\",\"CVE-ID\", \"Score\", \"Severity\", \"Summary\", \"Vulnerable Software\"]]\n        vuls += arr.each_with_index.map do |result, i|\n          if result['obj']['vulnerable_software_list']\n            vsl = result['obj']['vulnerable_software_list']['product']\n          else\n            vsl = \"No software given\"\n          end#end if\n          [\n            i + 1,\n            result['obj']['id'],\n            result['obj']['cvss']['base_metrics']['score'],\n            result['obj']['cvss']['base_metrics']['access_complexity'],\n            result['obj']['summary'],\n            vsl.to_s,\n          ]\n        end #end each_with_index loop\n\n\n        pdf.table vuls, :header => true,\n        :column_widths => { 0 => 50, 1 => 50, 5 => 350}, :row_colors => [\"d2e3ed\", \"FFFFFF\"] do\n          style(columns(3)) {|x| x.align = :right }\n        end\n      end\nend\n```\n. Here is the sample data(json)\n\n```\n[{\"score\":59.34432346109177,\"obj\":{\"_id\":{\"$oid\":\"52d46aa2892bea25f50000e5\"},\"id\":\"CVE-2013-            7260\",\"vulnerable_configuration\":[{\"id\":\"http://www.nist.gov/\",\"logical_test\":    {\"negate\":\"false\",\"operator\":\"OR\",\"fact_ref\":[{\"name\":\"cpe:/a:realnetworks:realplayer:17.0.4.60\"},  {\"name\":\"cpe:/a:realnetworks:realplayer:8\"},{\"name\":\"cpe:/a:realnetworks:realplayer:7\"},{\"name\":\"cpe:/a:realnetworks:realplayer:6\"},{\"name\":\"cpe:/a:realnetworks:realplayer:5\"},{\"name\":\"cpe:/a:realnetworks:realplayer:4\"},{\"name\":\"cpe:/a:realnetworks:realplayer:2.1.4::enterprise\"},{\"name\":\"cpe:/a:realnetworks:realplayer:2.1.3::enterprise\"},{\"name\":\"cpe:/a:realnetworks:realplayer:2.1.2::enterprise\"},{\"name\":\"cpe:/a:realnetworks:realplayer:16.0.3.51\"},{\"name\":\"cpe:/a:realnetworks:realplayer:16.0.2.32\"},{\"name\":\"cpe:/a:realnetworks:realplayer:16.0.1.18\"},{\"name\":\"cpe:/a:realnetworks:realplayer:16.0.0.282\"},{\"name\":\"cpe:/a:realnetworks:realplayer:16.0.0\"},{\"name\":\"cpe:/a:realnetworks:realplayer:15.02.71\"},{\"name\":\"cpe:/a:realnetworks:realplayer:15.0.6.14\"},{\"name\":\"cpe:/a:realnetworks:realplayer:15.0.5.109\"},{\"name\":\"cpe:/a:realnetworks:realplayer:15.0.4.43\"},{\"name\":\"cpe:/a:realnetworks:realplayer:15.0.4\"},{\"name\":\"cpe:/a:realnetworks:realplayer:15.0.0\"},{\"name\":\"cpe:/a:realnetworks:realplayer:14.0.5\"},{\"name\":\"cpe:/a:realnetworks:realplayer:14.0.4\"},{\"name\":\"cpe:/a:realnetworks:realplayer:14.0.3\"},{\"name\":\"cpe:/a:realnetworks:realplayer:14.0.2\"},{\"name\":\"cpe:/a:realnetworks:realplayer:14.0.1.609\"},{\"name\":\"cpe:/a:realnetworks:realplayer:14.0.1\"},{\"name\":\"cpe:/a:realnetworks:realplayer:14.0.0\"},{\"name\":\"cpe:/a:realnetworks:realplayer:12.0.0.1548\"},{\"name\":\"cpe:/a:realnetworks:realplayer:12.0.0.1444\"},{\"name\":\"cpe:/a:realnetworks:realplayer:11_build_6.0.14.748\"},{\"name\":\"cpe:/a:realnetworks:realplayer:11.1.3\"},{\"name\":\"cpe:/a:realnetworks:realplayer:11.1\"},{\"name\":\"cpe:/a:realnetworks:realplayer:11.0.5\"},{\"name\":\"cpe:/a:realnetworks:realplayer:11.0.4\"},{\"name\":\"cpe:/a:realnetworks:realplayer:11.0.3\"},{\"name\":\"cpe:/a:realnetworks:realplayer:11.0.2.2315\"},{\"name\":\"cpe:/a:realnetworks:realplayer:11.0.2.1744\"},{\"name\":\"cpe:/a:realnetworks:realplayer:11.0.2\"},{\"name\":\"cpe:/a:realnetworks:realplayer:11.0.1\"},{\"name\":\"cpe:/a:realnetworks:realplayer:11.0\"},{\"name\":\"cpe:/a:realnetworks:realplayer:10.5\"},{\"name\":\"cpe:/a:realnetworks:realplayer:10.0\"}]}},{\"id\":\"http://www.nist.gov/\",\"logical_test\":{\"negate\":\"false\",\"operator\":\"OR\",\"fact_ref\":[{\"name\":\"cpe:/a:real:realplayer:12.0.1.1737::mac\"},{\"name\":\"cpe:/a:realnetworks:realplayer:10.0:10.0.0.305:mac\"},{\"name\":\"cpe:/a:realnetworks:realplayer:10.0:10.0.0.331:mac\"},{\"name\":\"cpe:/a:realnetworks:realplayer:10.0:10.0.0.352:mac\"},{\"name\":\"cpe:/a:realnetworks:realplayer:10.1:10.0.0._481:mac\"},{\"name\":\"cpe:/a:realnetworks:realplayer:10.1:10.0.0.396:mac\"},{\"name\":\"cpe:/a:realnetworks:realplayer:10.1:10.0.0.412:mac\"},{\"name\":\"cpe:/a:realnetworks:realplayer:12.0.0.1701::mac\"}]}}],\"vulnerable_software_list\":{\"product\":[\"cpe:/a:realnetworks:realplayer:16.0.1.18\",\"cpe:/a:realnetworks:realplayer:12.0.0.1548\",\"cpe:/a:realnetworks:realplayer:10.0:10.0.0.331:mac\",\"cpe:/a:realnetworks:realplayer:11.1\",\"cpe:/a:realnetworks:realplayer:11.0\",\"cpe:/a:realnetworks:realplayer:10.5\",\"cpe:/a:realnetworks:realplayer:10.1:10.0.0._481:mac\",\"cpe:/a:realnetworks:realplayer:12.0.0.1701::mac\",\"cpe:/a:realnetworks:realplayer:11.0.1\",\"cpe:/a:realnetworks:realplayer:11.1.3\",\"cpe:/a:real:realplayer:12.0.1.1737::mac\",\"cpe:/a:realnetworks:realplayer:11.0.2.1744\",\"cpe:/a:realnetworks:realplayer:11.0.2.2315\",\"cpe:/a:realnetworks:realplayer:11.0.5\",\"cpe:/a:realnetworks:realplayer:11.0.4\",\"cpe:/a:realnetworks:realplayer:11.0.3\",\"cpe:/a:realnetworks:realplayer:11.0.2\",\"cpe:/a:realnetworks:realplayer:15.0.5.109\",\"cpe:/a:realnetworks:realplayer:10.0\",\"cpe:/a:realnetworks:realplayer:17.0.4.60\",\"cpe:/a:realnetworks:realplayer:16.0.3.51\",\"cpe:/a:realnetworks:realplayer:11_build_6.0.14.748\",\"cpe:/a:realnetworks:realplayer:15.0.4.43\",\"cpe:/a:realnetworks:realplayer:10.0:10.0.0.352:mac\",\"cpe:/a:realnetworks:realplayer:7\",\"cpe:/a:realnetworks:realplayer:10.1:10.0.0.412:mac\",\"cpe:/a:realnetworks:realplayer:6\",\"cpe:/a:realnetworks:realplayer:8\",\"cpe:/a:realnetworks:realplayer:16.0.0.282\",\"cpe:/a:realnetworks:realplayer:15.0.0\",\"cpe:/a:realnetworks:realplayer:15.0.6.14\",\"cpe:/a:realnetworks:realplayer:10.1:10.0.0.396:mac\",\"cpe:/a:realnetworks:realplayer:15.0.4\",\"cpe:/a:realnetworks:realplayer:14.0.0\",\"cpe:/a:realnetworks:realplayer:14.0.2\",\"cpe:/a:realnetworks:realplayer:14.0.1\",\"cpe:/a:realnetworks:realplayer:14.0.4\",\"cpe:/a:realnetworks:realplayer:2.1.3::enterprise\",\"cpe:/a:realnetworks:realplayer:12.0.0.1444\",\"cpe:/a:realnetworks:realplayer:14.0.3\",\"cpe:/a:realnetworks:realplayer:2.1.4::enterprise\",\"cpe:/a:realnetworks:realplayer:14.0.5\",\"cpe:/a:realnetworks:realplayer:4\",\"cpe:/a:realnetworks:realplayer:5\",\"cpe:/a:realnetworks:realplayer:14.0.1.609\",\"cpe:/a:realnetworks:realplayer:15.02.71\",\"cpe:/a:realnetworks:realplayer:10.0:10.0.0.305:mac\",\"cpe:/a:realnetworks:realplayer:16.0.0\",\"cpe:/a:realnetworks:realplayer:16.0.2.32\",\"cpe:/a:realnetworks:realplayer:2.1.2::enterprise\"]},\"cve_id\":\"CVE-2013-7260\",\"published_datetime\":\"2014-01-03T15:55:06.383-05:00\",\"last_modified_datetime\":\"2014-01-06T22:15:46.863-05:00\",\"cvss\":{\"base_metrics\":{\"score\":\"7.5\",\"access_vector\":\"NETWORK\",\"access_complexity\":\"LOW\",\"authentication\":\"NONE\",\"confidentiality_impact\":\"PARTIAL\",\"integrity_impact\":\"PARTIAL\",\"availability_impact\":\"PARTIAL\",\"source\":\"http://nvd.nist.gov\",\"generated_on_datetime\":\"2014-01-06T22:15:40.363-05:00\"}},\"cwe\":{\"id\":\"CWE-119\"},\"references\":[{\"xml:lang\":\"en\",\"reference_type\":\"UNKNOWN\",\"source\":\"CERT-VN\",\"reference\":\"VU#698278\"},{\"xml:lang\":\"en\",\"reference_type\":\"UNKNOWN\",\"source\":\"EXPLOIT-DB\",\"reference\":\"30468\"},{\"xml:lang\":\"en\",\"reference_type\":\"VENDOR_ADVISORY\",\"source\":\"CONFIRM\",\"reference\":\"http://service.real.com/realplayer/security/12202013_player/en/\"}],\"summary\":\"Multiple stack-based buffer overflows in RealNetworks RealPlayer before 17.0.4.61 on Windows, and Mac RealPlayer before 12.0.1.1738, allow remote attackers to execute arbitrary code via a long (1) version number or (2) encoding declaration in the XML declaration of an RMP file, a different issue than CVE-2013-6877.\"}},{\"score\":4.736525974025974,\"obj\":{\"_id\":{\"$oid\":\"52d46aa2892bea25f50000cb\"},\"id\":\"CVE-2013-6877\",\"vulnerable_configuration\":{\"id\":\"http://www.nist.gov/\",\"logical_test\":{\"negate\":\"false\",\"operator\":\"OR\",\"fact_ref\":[{\"name\":\"cpe:/a:realnetworks:realplayer:16.0.3.51\"},{\"name\":\"cpe:/a:realnetworks:realplayer:16.0.2.32\"}]}},\"vulnerable_software_list\":{\"product\":[\"cpe:/a:realnetworks:realplayer:16.0.2.32\",\"cpe:/a:realnetworks:realplayer:16.0.3.51\"]},\"cve_id\":\"CVE-2013-6877\",\"published_datetime\":\"2013-12-19T17:55:04.460-05:00\",\"last_modified_datetime\":\"2014-01-07T23:42:46.823-05:00\",\"cvss\":{\"base_metrics\":{\"score\":\"9.3\",\"access_vector\":\"NETWORK\",\"access_complexity\":\"MEDIUM\",\"authentication\":\"NONE\",\"confidentiality_impact\":\"COMPLETE\",\"integrity_impact\":\"COMPLETE\",\"availability_impact\":\"COMPLETE\",\"source\":\"http://nvd.nist.gov\",\"generated_on_datetime\":\"2013-12-20T11:04:06.413-05:00\"}},\"cwe\":{\"id\":\"CWE-119\"},\"references\":[{\"xml:lang\":\"en\",\"reference_type\":\"UNKNOWN\",\"source\":\"MISC\",\"reference\":\"http://www.coresecurity.com/advisories/realplayer-heap-based-buffer-overflow-vulnerability\"},{\"xml:lang\":\"en\",\"reference_type\":\"UNKNOWN\",\"source\":\"CONFIRM\",\"reference\":\"http://service.real.com/realplayer/security/12202013_player/en/\"},{\"xml:lang\":\"en\",\"reference_type\":\"UNKNOWN\",\"source\":\"MISC\",\"reference\":\"http://packetstormsecurity.com/files/124535\"},{\"xml:lang\":\"en\",\"reference_type\":\"UNKNOWN\",\"source\":\"BUGTRAQ\",\"reference\":\"20131217 CORE-2013-0903 - RealPlayer Heap-based Buffer Overflow Vulnerability\"}],\"summary\":\"Heap-based buffer overflow in RealNetworks RealPlayer before 17.0.4.61 on Windows, and Mac RealPlayer before 12.0.1.1738, allows remote attackers to execute arbitrary code via a long string in the TRACKID element of an RMP file, a different vulnerability than CVE-2013-7260.\"}}]\n```\n. sandal thank you for your help.\nAs you can see the table generated has data running off.\n\n![screen shot 2014-01-22 at 9 49 39 am](https://f.cloud.github.com/assets/5481556/1974800/9bc0c81c-8374-11e3-92f7-afdee1e12e2d.png)\n. Here is sample source code\n\n```\nrequire 'prawn'\nrequire 'date'\nPrawn::Document.generate \"sample.pdf\", :page_layout => :landscape do |pdf|\n        sD = File.open('sampleData.json', \"r\")\n        arr = sD.read \n        vuls = [[\"# Of Vuls\",\"CVE-ID\", \"Score\", \"Severity\", \"Summary\", \"Vulnerable Software\"]]\n        vuls += arr.each_with_index.map do |result, i|\n          if result['obj']['vulnerable_software_list']\n            vsl = result['obj']['vulnerable_software_list']['product']\n          else\n            vsl = \"No software given\"\n          end#end if\n          [\n            i + 1,\n            result['obj']['id'],\n            result['obj']['cvss']['base_metrics']['score'],\n            result['obj']['cvss']['base_metrics']['access_complexity'],\n            result['obj']['summary'],\n            vsl.to_s,\n          ]\n        end #end each_with_index loop\n\n\n        pdf.table vuls, :header => true,\n        :column_widths => { 0 => 50, 1 => 50, 5 => 350}, :row_colors => [\"d2e3ed\", \"FFFFFF\"] do\n          style(columns(3)) {|x| x.align = :right }\n        end\n      end\nend\n```\n. Here is the sample data(json)\n\n```\n[{\"score\":59.34432346109177,\"obj\":{\"_id\":{\"$oid\":\"52d46aa2892bea25f50000e5\"},\"id\":\"CVE-2013-            7260\",\"vulnerable_configuration\":[{\"id\":\"http://www.nist.gov/\",\"logical_test\":    {\"negate\":\"false\",\"operator\":\"OR\",\"fact_ref\":[{\"name\":\"cpe:/a:realnetworks:realplayer:17.0.4.60\"},  {\"name\":\"cpe:/a:realnetworks:realplayer:8\"},{\"name\":\"cpe:/a:realnetworks:realplayer:7\"},{\"name\":\"cpe:/a:realnetworks:realplayer:6\"},{\"name\":\"cpe:/a:realnetworks:realplayer:5\"},{\"name\":\"cpe:/a:realnetworks:realplayer:4\"},{\"name\":\"cpe:/a:realnetworks:realplayer:2.1.4::enterprise\"},{\"name\":\"cpe:/a:realnetworks:realplayer:2.1.3::enterprise\"},{\"name\":\"cpe:/a:realnetworks:realplayer:2.1.2::enterprise\"},{\"name\":\"cpe:/a:realnetworks:realplayer:16.0.3.51\"},{\"name\":\"cpe:/a:realnetworks:realplayer:16.0.2.32\"},{\"name\":\"cpe:/a:realnetworks:realplayer:16.0.1.18\"},{\"name\":\"cpe:/a:realnetworks:realplayer:16.0.0.282\"},{\"name\":\"cpe:/a:realnetworks:realplayer:16.0.0\"},{\"name\":\"cpe:/a:realnetworks:realplayer:15.02.71\"},{\"name\":\"cpe:/a:realnetworks:realplayer:15.0.6.14\"},{\"name\":\"cpe:/a:realnetworks:realplayer:15.0.5.109\"},{\"name\":\"cpe:/a:realnetworks:realplayer:15.0.4.43\"},{\"name\":\"cpe:/a:realnetworks:realplayer:15.0.4\"},{\"name\":\"cpe:/a:realnetworks:realplayer:15.0.0\"},{\"name\":\"cpe:/a:realnetworks:realplayer:14.0.5\"},{\"name\":\"cpe:/a:realnetworks:realplayer:14.0.4\"},{\"name\":\"cpe:/a:realnetworks:realplayer:14.0.3\"},{\"name\":\"cpe:/a:realnetworks:realplayer:14.0.2\"},{\"name\":\"cpe:/a:realnetworks:realplayer:14.0.1.609\"},{\"name\":\"cpe:/a:realnetworks:realplayer:14.0.1\"},{\"name\":\"cpe:/a:realnetworks:realplayer:14.0.0\"},{\"name\":\"cpe:/a:realnetworks:realplayer:12.0.0.1548\"},{\"name\":\"cpe:/a:realnetworks:realplayer:12.0.0.1444\"},{\"name\":\"cpe:/a:realnetworks:realplayer:11_build_6.0.14.748\"},{\"name\":\"cpe:/a:realnetworks:realplayer:11.1.3\"},{\"name\":\"cpe:/a:realnetworks:realplayer:11.1\"},{\"name\":\"cpe:/a:realnetworks:realplayer:11.0.5\"},{\"name\":\"cpe:/a:realnetworks:realplayer:11.0.4\"},{\"name\":\"cpe:/a:realnetworks:realplayer:11.0.3\"},{\"name\":\"cpe:/a:realnetworks:realplayer:11.0.2.2315\"},{\"name\":\"cpe:/a:realnetworks:realplayer:11.0.2.1744\"},{\"name\":\"cpe:/a:realnetworks:realplayer:11.0.2\"},{\"name\":\"cpe:/a:realnetworks:realplayer:11.0.1\"},{\"name\":\"cpe:/a:realnetworks:realplayer:11.0\"},{\"name\":\"cpe:/a:realnetworks:realplayer:10.5\"},{\"name\":\"cpe:/a:realnetworks:realplayer:10.0\"}]}},{\"id\":\"http://www.nist.gov/\",\"logical_test\":{\"negate\":\"false\",\"operator\":\"OR\",\"fact_ref\":[{\"name\":\"cpe:/a:real:realplayer:12.0.1.1737::mac\"},{\"name\":\"cpe:/a:realnetworks:realplayer:10.0:10.0.0.305:mac\"},{\"name\":\"cpe:/a:realnetworks:realplayer:10.0:10.0.0.331:mac\"},{\"name\":\"cpe:/a:realnetworks:realplayer:10.0:10.0.0.352:mac\"},{\"name\":\"cpe:/a:realnetworks:realplayer:10.1:10.0.0._481:mac\"},{\"name\":\"cpe:/a:realnetworks:realplayer:10.1:10.0.0.396:mac\"},{\"name\":\"cpe:/a:realnetworks:realplayer:10.1:10.0.0.412:mac\"},{\"name\":\"cpe:/a:realnetworks:realplayer:12.0.0.1701::mac\"}]}}],\"vulnerable_software_list\":{\"product\":[\"cpe:/a:realnetworks:realplayer:16.0.1.18\",\"cpe:/a:realnetworks:realplayer:12.0.0.1548\",\"cpe:/a:realnetworks:realplayer:10.0:10.0.0.331:mac\",\"cpe:/a:realnetworks:realplayer:11.1\",\"cpe:/a:realnetworks:realplayer:11.0\",\"cpe:/a:realnetworks:realplayer:10.5\",\"cpe:/a:realnetworks:realplayer:10.1:10.0.0._481:mac\",\"cpe:/a:realnetworks:realplayer:12.0.0.1701::mac\",\"cpe:/a:realnetworks:realplayer:11.0.1\",\"cpe:/a:realnetworks:realplayer:11.1.3\",\"cpe:/a:real:realplayer:12.0.1.1737::mac\",\"cpe:/a:realnetworks:realplayer:11.0.2.1744\",\"cpe:/a:realnetworks:realplayer:11.0.2.2315\",\"cpe:/a:realnetworks:realplayer:11.0.5\",\"cpe:/a:realnetworks:realplayer:11.0.4\",\"cpe:/a:realnetworks:realplayer:11.0.3\",\"cpe:/a:realnetworks:realplayer:11.0.2\",\"cpe:/a:realnetworks:realplayer:15.0.5.109\",\"cpe:/a:realnetworks:realplayer:10.0\",\"cpe:/a:realnetworks:realplayer:17.0.4.60\",\"cpe:/a:realnetworks:realplayer:16.0.3.51\",\"cpe:/a:realnetworks:realplayer:11_build_6.0.14.748\",\"cpe:/a:realnetworks:realplayer:15.0.4.43\",\"cpe:/a:realnetworks:realplayer:10.0:10.0.0.352:mac\",\"cpe:/a:realnetworks:realplayer:7\",\"cpe:/a:realnetworks:realplayer:10.1:10.0.0.412:mac\",\"cpe:/a:realnetworks:realplayer:6\",\"cpe:/a:realnetworks:realplayer:8\",\"cpe:/a:realnetworks:realplayer:16.0.0.282\",\"cpe:/a:realnetworks:realplayer:15.0.0\",\"cpe:/a:realnetworks:realplayer:15.0.6.14\",\"cpe:/a:realnetworks:realplayer:10.1:10.0.0.396:mac\",\"cpe:/a:realnetworks:realplayer:15.0.4\",\"cpe:/a:realnetworks:realplayer:14.0.0\",\"cpe:/a:realnetworks:realplayer:14.0.2\",\"cpe:/a:realnetworks:realplayer:14.0.1\",\"cpe:/a:realnetworks:realplayer:14.0.4\",\"cpe:/a:realnetworks:realplayer:2.1.3::enterprise\",\"cpe:/a:realnetworks:realplayer:12.0.0.1444\",\"cpe:/a:realnetworks:realplayer:14.0.3\",\"cpe:/a:realnetworks:realplayer:2.1.4::enterprise\",\"cpe:/a:realnetworks:realplayer:14.0.5\",\"cpe:/a:realnetworks:realplayer:4\",\"cpe:/a:realnetworks:realplayer:5\",\"cpe:/a:realnetworks:realplayer:14.0.1.609\",\"cpe:/a:realnetworks:realplayer:15.02.71\",\"cpe:/a:realnetworks:realplayer:10.0:10.0.0.305:mac\",\"cpe:/a:realnetworks:realplayer:16.0.0\",\"cpe:/a:realnetworks:realplayer:16.0.2.32\",\"cpe:/a:realnetworks:realplayer:2.1.2::enterprise\"]},\"cve_id\":\"CVE-2013-7260\",\"published_datetime\":\"2014-01-03T15:55:06.383-05:00\",\"last_modified_datetime\":\"2014-01-06T22:15:46.863-05:00\",\"cvss\":{\"base_metrics\":{\"score\":\"7.5\",\"access_vector\":\"NETWORK\",\"access_complexity\":\"LOW\",\"authentication\":\"NONE\",\"confidentiality_impact\":\"PARTIAL\",\"integrity_impact\":\"PARTIAL\",\"availability_impact\":\"PARTIAL\",\"source\":\"http://nvd.nist.gov\",\"generated_on_datetime\":\"2014-01-06T22:15:40.363-05:00\"}},\"cwe\":{\"id\":\"CWE-119\"},\"references\":[{\"xml:lang\":\"en\",\"reference_type\":\"UNKNOWN\",\"source\":\"CERT-VN\",\"reference\":\"VU#698278\"},{\"xml:lang\":\"en\",\"reference_type\":\"UNKNOWN\",\"source\":\"EXPLOIT-DB\",\"reference\":\"30468\"},{\"xml:lang\":\"en\",\"reference_type\":\"VENDOR_ADVISORY\",\"source\":\"CONFIRM\",\"reference\":\"http://service.real.com/realplayer/security/12202013_player/en/\"}],\"summary\":\"Multiple stack-based buffer overflows in RealNetworks RealPlayer before 17.0.4.61 on Windows, and Mac RealPlayer before 12.0.1.1738, allow remote attackers to execute arbitrary code via a long (1) version number or (2) encoding declaration in the XML declaration of an RMP file, a different issue than CVE-2013-6877.\"}},{\"score\":4.736525974025974,\"obj\":{\"_id\":{\"$oid\":\"52d46aa2892bea25f50000cb\"},\"id\":\"CVE-2013-6877\",\"vulnerable_configuration\":{\"id\":\"http://www.nist.gov/\",\"logical_test\":{\"negate\":\"false\",\"operator\":\"OR\",\"fact_ref\":[{\"name\":\"cpe:/a:realnetworks:realplayer:16.0.3.51\"},{\"name\":\"cpe:/a:realnetworks:realplayer:16.0.2.32\"}]}},\"vulnerable_software_list\":{\"product\":[\"cpe:/a:realnetworks:realplayer:16.0.2.32\",\"cpe:/a:realnetworks:realplayer:16.0.3.51\"]},\"cve_id\":\"CVE-2013-6877\",\"published_datetime\":\"2013-12-19T17:55:04.460-05:00\",\"last_modified_datetime\":\"2014-01-07T23:42:46.823-05:00\",\"cvss\":{\"base_metrics\":{\"score\":\"9.3\",\"access_vector\":\"NETWORK\",\"access_complexity\":\"MEDIUM\",\"authentication\":\"NONE\",\"confidentiality_impact\":\"COMPLETE\",\"integrity_impact\":\"COMPLETE\",\"availability_impact\":\"COMPLETE\",\"source\":\"http://nvd.nist.gov\",\"generated_on_datetime\":\"2013-12-20T11:04:06.413-05:00\"}},\"cwe\":{\"id\":\"CWE-119\"},\"references\":[{\"xml:lang\":\"en\",\"reference_type\":\"UNKNOWN\",\"source\":\"MISC\",\"reference\":\"http://www.coresecurity.com/advisories/realplayer-heap-based-buffer-overflow-vulnerability\"},{\"xml:lang\":\"en\",\"reference_type\":\"UNKNOWN\",\"source\":\"CONFIRM\",\"reference\":\"http://service.real.com/realplayer/security/12202013_player/en/\"},{\"xml:lang\":\"en\",\"reference_type\":\"UNKNOWN\",\"source\":\"MISC\",\"reference\":\"http://packetstormsecurity.com/files/124535\"},{\"xml:lang\":\"en\",\"reference_type\":\"UNKNOWN\",\"source\":\"BUGTRAQ\",\"reference\":\"20131217 CORE-2013-0903 - RealPlayer Heap-based Buffer Overflow Vulnerability\"}],\"summary\":\"Heap-based buffer overflow in RealNetworks RealPlayer before 17.0.4.61 on Windows, and Mac RealPlayer before 12.0.1.1738, allows remote attackers to execute arbitrary code via a long string in the TRACKID element of an RMP file, a different vulnerability than CVE-2013-7260.\"}}]\n```\n. ",
    "gosuto": "Gotcha, my bad, I didn't intentionally upgrade . . . bundler did it for me :) I'm using 0.13.2 for now and the templates still work great for us. Is there a new recommended way to create pages from other PDFs? Or is that no longer part of the feature set?\n. Thanks!\n. Gotcha, my bad, I didn't intentionally upgrade . . . bundler did it for me :) I'm using 0.13.2 for now and the templates still work great for us. Is there a new recommended way to create pages from other PDFs? Or is that no longer part of the feature set?\n. Thanks!\n. ",
    "kumaravadivel": "![screenshot at 2014-01-22 15 25 34](https://f.cloud.github.com/assets/5937122/1972769/212fefb8-834e-11e3-992c-4fc0f064e1cd.png)\n. thank u , but how can i resolve this\n. ![screenshot at 2014-01-22 15 25 34](https://f.cloud.github.com/assets/5937122/1972769/212fefb8-834e-11e3-992c-4fc0f064e1cd.png)\n. thank u , but how can i resolve this\n. ",
    "nathan-munchery": "This feature was pretty much the only reason I used Prawn at all, so its removal is, unfortunately, the textbook definition of a dealbreaker for us. What exactly is the nature of the instability we'll face if we continue deploying 0.12.0?\n. Are there open issues for these in the repo? I'm afraid it's just not possible for most people to follow the state of every single dependency they have on a day-to-day basis and still get work done, so I imagine few were ever aware of this open call even happening. If it's anything I have any experience with at all, I'd be happy to at least take a look. \n. Though I've not worked with it closely in a good 15 years, I am familiar with the PDF specification and the various incarnations it has gone through since the dawn of PostScript. If there are no issues and no test cases, I don't imagine it's going to be easy getting other people to fix things they have to guess at causes for. Odds are good you simply need to restrict the source documents to some older standard like PDF/x-1a instead of trying to support everything Adobe comes up with, but again, it's impossible to do anything but guess with that info. \n. This feature was pretty much the only reason I used Prawn at all, so its removal is, unfortunately, the textbook definition of a dealbreaker for us. What exactly is the nature of the instability we'll face if we continue deploying 0.12.0?\n. Are there open issues for these in the repo? I'm afraid it's just not possible for most people to follow the state of every single dependency they have on a day-to-day basis and still get work done, so I imagine few were ever aware of this open call even happening. If it's anything I have any experience with at all, I'd be happy to at least take a look. \n. Though I've not worked with it closely in a good 15 years, I am familiar with the PDF specification and the various incarnations it has gone through since the dawn of PostScript. If there are no issues and no test cases, I don't imagine it's going to be easy getting other people to fix things they have to guess at causes for. Odds are good you simply need to restrict the source documents to some older standard like PDF/x-1a instead of trying to support everything Adobe comes up with, but again, it's impossible to do anything but guess with that info. \n. ",
    "Siyfion": "Ah okay...\n\n```\nclass TextRenderer\n    def self.render_text(pdf)\n        pdf.font(\"Helvetica\", :size => 18) do\n            pdf.text_box \"description\",\n                :at => 10.0, -40.0,\n                :width => 130.0,\n                :height => 60.0,\n                :overflow => :shrink_to_fit,\n                :align => \"right\",\n                :valign => \"top\"\n        end\n    end\nend\n```\n\nAnd in doing this, I believe my issue is with the `:align` and `:valign`, they are strings.. :\\\n. Yup, my bad. Ignore this (although might be useful if someone get's a similar error).\n. Oops. My bad, the error is in:\n\n```\n/home/ec2-user/.rvm/gems/ruby-2.1.0/gems/prawn-0.15.0/lib/prawn/text/formatted/arranger.rb:156:in `block in apply_font_settings': Bad font family (RuntimeError)\nfrom /home/ec2-user/.rvm/gems/ruby-2.1.0/gems/pdf-core-0.1.6/lib/pdf/core/text.rb:220:in `character_spacing'\nfrom /home/ec2-user/.rvm/gems/ruby-2.1.0/gems/prawn-0.15.0/lib/prawn/text/formatted/arranger.rb:154:in `apply_font_settings'\n```\n. Sorry for the delay in getting some sample code to you @sandal, but here you are!\n\nTo get the TTF file, just go to http://www.google.com/fonts and search for \"Lato\", add it to your collection, press the \"use\" button in the bottom right and then the downward arrow on the next screen in the top right, to download the file as a *.zip containing the TTF fonts.\n\n``` ruby\nrequire \"prawn\"\n\nx = 100\ny = -500\nrt = 45\nwidth = 200\nheight = 100\nh_align = :center\nv_align = :center\nfontSize = 12\ntext_to_print = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed feugiat leo nec nibh scelerisque, sed euismod erat tempor.\n  Donec venenatis, neque eget bibendum ornare, mauris magna dictum est, non malesuada dolor sem at turpis. Mauris non ligula libero.\n  Vestibulum hendrerit velit sit amet lorem placerat, vitae imperdiet mi vestibulum. Donec nec nisl metus.\n  Curabitur posuere interdum dui at consequat. Morbi quis placerat odio. Quisque lobortis enim vel nunc iaculis malesuada.\n  Donec porta accumsan velit, sit amet posuere risus. Etiam ultrices ac felis id lacinia. Donec a facilisis libero, a aliquam ante.\n  Nullam sed vestibulum eros, in pulvinar orci. Suspendisse consequat tincidunt augue, nec pellentesque risus.\n  Sed nec elit facilisis eros volutpat dictum quis id est.\"\n\nPrawn::Document.generate(\"hello.pdf\") do\n  rotate(-rt, :origin => [x + (width / 2.0), -(y + (height / 2.0))]) do\n    font('Lato-Regular.ttf', :size => fontSize) do\n      formatted_text_box [{:text => text_to_print, :styles => [:bold]}],\n        :at => [x, -y],\n        :width => width,\n        :height => height,\n        :overflow => :shrink_to_fit,\n        :align => h_align,\n        :valign => v_align,\n        :min_font_size => 1     # Allow the font to go all the way down to the unreadable 1pt setting.\n    end\n  end\nend\n```\n. If you remove the `:styles => [:bold]` parameter from the `formatted_text_box` it works perfectly. So it's obviously related to bold / italic support...?\n. @sandal great, let me know if you have issues reproducing the problem.\n. With a risk to sounding stupid, can any font not be made bold? I thought that specific bold versions of fonts were merely provided as a \"preferred\" method for bolding characters, so that they aren't just stretched in a uniform manner?\n. Ah I see, well that'll be where the problem lies then. Although while the \"Lato\" font that I used in the example does indeed have `Lato-Bold.ttf` and `Lato-Italic.ttf` files, there was no dfont suitcase... It was just bundled in a *.zip (and I assumed that prawn would be able to do a \"faux bold\" effect).\n\nIs there a way to add the un-wrapped *.ttf files directly to a font family spec?\n. Awesome, you were indeed correct!\n\nCorrected version:\n\n``` ruby\nrequire 'prawn'\n\nx = 100\ny = -500\nrt = 45\nwidth = 200\nheight = 100\nh_align = :center\nv_align = :center\nfont_size = 12\ntext_to_print = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n  Sed feugiat leo nec nibh scelerisque, sed euismod erat tempor.\n  Donec venenatis, neque eget bibendum ornare, mauris magna dictum est,\n  non malesuada dolor sem at turpis. Mauris non ligula libero.\n  Vestibulum hendrerit velit sit amet lorem placerat, vitae imperdiet mi\n  vestibulum. Donec nec nisl metus. Curabitur posuere interdum dui at\n  consequat. Morbi quis placerat odio. Quisque lobortis enim vel nunc\n  iaculis malesuada. Donec porta accumsan velit, sit amet posuere risus.\n  Etiam ultrices ac felis id lacinia. Donec a facilisis libero, a aliquam ante.\n  Nullam sed vestibulum eros, in pulvinar orci. Suspendisse consequat\n  tincidunt augue, nec pellentesque risus. Sed nec elit facilisis eros\n  volutpat dictum quis id est.\"\n\nPrawn::Document.generate('hello.pdf') do\n\n  font_families.update(\n    'Lato' => { bold: 'Lato-Bold.ttf',\n                italic: 'Lato-Italic.ttf',\n                bold_italic: 'Lato-BoldItalic.ttf',\n                normal: 'Lato-Regular.ttf' })\n\n\n  rotate(-rt, origin: [x + (width / 2.0), -(y + (height / 2.0))]) do\n    font('Lato', size: font_size) do\n      formatted_text_box(\n        [{ text: text_to_print, styles: [:bold] }],\n        at: [x, -y],\n        width: width,\n        height: height,\n        overflow: :shrink_to_fit,\n        align: h_align,\n        valign: v_align,\n        # Allow the font to go all the way down to the unreadable 1pt setting.\n        min_font_size: 1\n      )\n    end\n  end\nend\n```\n. @sandal Thanks for taking a look; and as for code examples, I'll do that in future if that makes it easier for you :smiley: \n. Okay, surely in this scenario it would make more sense for the attempt order to prioritise resizing over breaking a word?\n1. Split on whitespace\n2. Shrink font size\n3. Break words apart\n. I mean, it's a sort of \"last-resort\" type behavior, especially as it doesn't automatically hyphenate the word break, etc.\n. Oh and @sandal I saw this: #449 but I'm not sure what ever happened with it...?\n. Well so you can feel a bit of sense of achievement, I'm using your library in production as part of a label printing program and I have to say that it works flawlessly apart from this current issue! Excuse the crappy quality and mumbo-jumbo text:\n![2014-07-16 11 18 20](https://cloud.githubusercontent.com/assets/338488/3597512/e730a80c-0cd2-11e4-9857-483e8125a011.jpg)\n. While I don't mind creating my own fork, I'd rather keep using the \"main\" branch long-term to ensure I get all the latest updates / bug-fixes. I'll give it a go though!\n. Okay, I have forked, merged and tested...\n\nBEFORE:\n![screen shot 2014-07-16 at 12 23 19](https://cloud.githubusercontent.com/assets/338488/3598021/b4bcb7ae-0cdb-11e4-97ce-5947688fd76c.png)\nAFTER:\n![screen shot 2014-07-16 at 12 23 34](https://cloud.githubusercontent.com/assets/338488/3598020/b4bc9f6c-0cdb-11e4-9309-427544832b26.png)\n\nSo it does seem to do what it says on the tin. Unfortunately, for me to get this onto our heroku instance running our renderer, I'm going to have to publish the gem as a forked version.. Not ideal, but it'll work.\n. Awesome, I had no idea I could do that!\n. Will do... Give me a few hours to finish what I'm working on atm, and I'll get back to you with results.\n. Updated & tested, looks fine to me!\n. Thanks @boazsegev I'd not thought of doing it that way, although I also just stumbled onto `prawn-table` and was wondering if that might have the functionality I'm looking for already...!?\n. Ah thanks @sandal that's a perfect response, I'll give the method you describe a go and see how I get on. Although I agree that a meaningful return value would be good, I don't imagine I'm the only person who'd like to know the size of the rendered font!\n. Awesome idea and while I feel confident I'll get it working in my code, I'm no-way near good enough at Ruby to attempt a patch, it'll be a mess! lol. :blush: \n. @sandal Ah okay, I never even knew that option existed! (FYI, it's not mentioned _at all_ in the manual)\n\nAnd yeah, sorry for the overly elaborate description.\n. Yeah I did have a bit of a rummage around though the API docs, but like you said, I guess I just missed it.  It's a shame there's seemingly no \"global\" document search, I know you can search for methods, and classes but not through content.\n. @sandal Tell you what, once I've finished my current project, I promise I'll come back and help in any way I can :)\n. I know it's been a while since this was last discussed, but what is the currently recommended work-around for this? Does `prawn-fast-png` fix this issue? or `prawn-gmagick`? Is it ever going to be supported natively in Prawn?\n. Just to chime in, I can confirm that adding the `prawn-gmagick` plugin fixes this issue for me.\n. @bvogel That links seems to suggest that it _only_ supports Adobe Reader? Or is it the underlying same mechanism that Google Chrome uses?\n. @bvogel I can confirm that the `pdf.print` option does exactly what I wanted it to do! Thanks.\n. @yob However it appears that Chrome _does_ actually render the JS.\n. @packetmonkey Is it not possible that a `:center` option could be added, or alignment options to the existing `:fit` code?\n. @packetmonkey I've ended up doing it with a bit of gmagick wizardry, but good to know... I may well give it a go next time I revisit the code.\n. And another odd one for you... Using a Google Font, renders some bits fine, others, not...\n\nIf you highlight the text, copy & paste it's all there, so it's a rendering / PDF issue rather than a data issue.\n\n[pla005_rXard8Sudm56Fwmhh_20161020-151229.pdf](https://github.com/prawnpdf/prawn/files/542125/pla005_rXard8Sudm56Fwmhh_20161020-151229.pdf)\n. @packetmonkey I could really use some help in figuring this out, otherwise I may have to switch away from Prawn, which I _really_ don't want to do! \n. @pointlessone Thanks for the words of wisdom, I'll try to take a look, clearly something's gone nuts.\n. @pointlessone As a quick and dirty fix, is there a way to turn subsetting off?!\n. Damn. Well it's this font: https://fonts.google.com/specimen/Taviraj?selection.family=Taviraj\n\nIs there a way to use font's in a pdf that can be retrieved from a url? Like a CSS import?\n. @pointlessone @gettalong Minimal code reproduction done and attached. It's literally hello-world with a font and different character-set.\n[test.zip](https://github.com/prawnpdf/prawn/files/550405/test.zip)\n. @pointlessone & @gettalong \nOr if people prefer no random zip file:\n\n``` ruby\nrequire \"prawn\"\n\nPrawn::Document.generate(\"hello.pdf\") do\n  font(\"Taviraj/Taviraj-Regular.ttf\") do\n    text \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890-=!@$%^&*()__+}\"\n  end\nend\n```\n\nOutputs the following:\n\n[hello.pdf](https://github.com/prawnpdf/prawn/files/553353/hello.pdf)\n. @gettalong If I open the TTF in FontForge, I don't seem to get anything too out of the ordinary..?\n. The original, surely that means that the font file I'm using is perfectly\nfine and that it's the way it's being embedded that's at fault?\n\n## \n\nSimon Mansfield\n\nOn 28 October 2016 at 17:49:15, Thomas Leitner (notifications@github.com)\nwrote:\n\n> @Siyfion https://github.com/Siyfion Did you open the original TrueType\n> font or the one embedded into the PDF file? The original one works fine but\n> the embedded one is corrupt.\n> \n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> https://github.com/prawnpdf/prawn/issues/972#issuecomment-256970710, or mute\n> the thread\n> https://github.com/notifications/unsubscribe-auth/AAUqOFnjL6rhg8zTibd22qTR63iSKoKPks5q4ieLgaJpZM4Jf_6s\n> .\n. @gettalong So where does the error lie (in what piece of code?) \n. Wow, that's er... waaaay outside my comfort zone to try and debug/fix. Guess I'll have to wait until someone can take a proper look at it.\n. Awesome work! Thank you so much for looking into it!\n\n## \n\nSimon Mansfield\n\nOn 1 November 2016 at 21:27:48, Thomas Leitner (notifications@github.com)\nwrote:\n\n> @Siyfion https://github.com/Siyfion I tracked down the problem after\n> some lengthy investigation (I'm not that familiar with ttfunk myself) and\n> have opened an issue (see prawnpdf/ttfunk#32\n> https://github.com/prawnpdf/ttfunk/issues/32) where you will also find\n> the fix that you can apply to your ttfunk installation.\n> \n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> https://github.com/prawnpdf/prawn/issues/972#issuecomment-257703551, or mute\n> the thread\n> https://github.com/notifications/unsubscribe-auth/AAUqONw7MIBWHHzxB7Ni-HthzePa-PoIks5q567UgaJpZM4Jf_6s\n> .\n. Confirmed that @gettalong's fix does indeed cure this issue. I'd like to get the change merged into the release if possible, as I'm sure this affects more than just one or two fonts!\n. @pointlessone & @gettalong, awesome work both of you. \ud83d\udc4d . Ah okay...\n\n```\nclass TextRenderer\n    def self.render_text(pdf)\n        pdf.font(\"Helvetica\", :size => 18) do\n            pdf.text_box \"description\",\n                :at => 10.0, -40.0,\n                :width => 130.0,\n                :height => 60.0,\n                :overflow => :shrink_to_fit,\n                :align => \"right\",\n                :valign => \"top\"\n        end\n    end\nend\n```\n\nAnd in doing this, I believe my issue is with the `:align` and `:valign`, they are strings.. :\\\n. Yup, my bad. Ignore this (although might be useful if someone get's a similar error).\n. Oops. My bad, the error is in:\n\n```\n/home/ec2-user/.rvm/gems/ruby-2.1.0/gems/prawn-0.15.0/lib/prawn/text/formatted/arranger.rb:156:in `block in apply_font_settings': Bad font family (RuntimeError)\nfrom /home/ec2-user/.rvm/gems/ruby-2.1.0/gems/pdf-core-0.1.6/lib/pdf/core/text.rb:220:in `character_spacing'\nfrom /home/ec2-user/.rvm/gems/ruby-2.1.0/gems/prawn-0.15.0/lib/prawn/text/formatted/arranger.rb:154:in `apply_font_settings'\n```\n. Sorry for the delay in getting some sample code to you @sandal, but here you are!\n\nTo get the TTF file, just go to http://www.google.com/fonts and search for \"Lato\", add it to your collection, press the \"use\" button in the bottom right and then the downward arrow on the next screen in the top right, to download the file as a *.zip containing the TTF fonts.\n\n``` ruby\nrequire \"prawn\"\n\nx = 100\ny = -500\nrt = 45\nwidth = 200\nheight = 100\nh_align = :center\nv_align = :center\nfontSize = 12\ntext_to_print = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed feugiat leo nec nibh scelerisque, sed euismod erat tempor.\n  Donec venenatis, neque eget bibendum ornare, mauris magna dictum est, non malesuada dolor sem at turpis. Mauris non ligula libero.\n  Vestibulum hendrerit velit sit amet lorem placerat, vitae imperdiet mi vestibulum. Donec nec nisl metus.\n  Curabitur posuere interdum dui at consequat. Morbi quis placerat odio. Quisque lobortis enim vel nunc iaculis malesuada.\n  Donec porta accumsan velit, sit amet posuere risus. Etiam ultrices ac felis id lacinia. Donec a facilisis libero, a aliquam ante.\n  Nullam sed vestibulum eros, in pulvinar orci. Suspendisse consequat tincidunt augue, nec pellentesque risus.\n  Sed nec elit facilisis eros volutpat dictum quis id est.\"\n\nPrawn::Document.generate(\"hello.pdf\") do\n  rotate(-rt, :origin => [x + (width / 2.0), -(y + (height / 2.0))]) do\n    font('Lato-Regular.ttf', :size => fontSize) do\n      formatted_text_box [{:text => text_to_print, :styles => [:bold]}],\n        :at => [x, -y],\n        :width => width,\n        :height => height,\n        :overflow => :shrink_to_fit,\n        :align => h_align,\n        :valign => v_align,\n        :min_font_size => 1     # Allow the font to go all the way down to the unreadable 1pt setting.\n    end\n  end\nend\n```\n. If you remove the `:styles => [:bold]` parameter from the `formatted_text_box` it works perfectly. So it's obviously related to bold / italic support...?\n. @sandal great, let me know if you have issues reproducing the problem.\n. With a risk to sounding stupid, can any font not be made bold? I thought that specific bold versions of fonts were merely provided as a \"preferred\" method for bolding characters, so that they aren't just stretched in a uniform manner?\n. Ah I see, well that'll be where the problem lies then. Although while the \"Lato\" font that I used in the example does indeed have `Lato-Bold.ttf` and `Lato-Italic.ttf` files, there was no dfont suitcase... It was just bundled in a *.zip (and I assumed that prawn would be able to do a \"faux bold\" effect).\n\nIs there a way to add the un-wrapped *.ttf files directly to a font family spec?\n. Awesome, you were indeed correct!\n\nCorrected version:\n\n``` ruby\nrequire 'prawn'\n\nx = 100\ny = -500\nrt = 45\nwidth = 200\nheight = 100\nh_align = :center\nv_align = :center\nfont_size = 12\ntext_to_print = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n  Sed feugiat leo nec nibh scelerisque, sed euismod erat tempor.\n  Donec venenatis, neque eget bibendum ornare, mauris magna dictum est,\n  non malesuada dolor sem at turpis. Mauris non ligula libero.\n  Vestibulum hendrerit velit sit amet lorem placerat, vitae imperdiet mi\n  vestibulum. Donec nec nisl metus. Curabitur posuere interdum dui at\n  consequat. Morbi quis placerat odio. Quisque lobortis enim vel nunc\n  iaculis malesuada. Donec porta accumsan velit, sit amet posuere risus.\n  Etiam ultrices ac felis id lacinia. Donec a facilisis libero, a aliquam ante.\n  Nullam sed vestibulum eros, in pulvinar orci. Suspendisse consequat\n  tincidunt augue, nec pellentesque risus. Sed nec elit facilisis eros\n  volutpat dictum quis id est.\"\n\nPrawn::Document.generate('hello.pdf') do\n\n  font_families.update(\n    'Lato' => { bold: 'Lato-Bold.ttf',\n                italic: 'Lato-Italic.ttf',\n                bold_italic: 'Lato-BoldItalic.ttf',\n                normal: 'Lato-Regular.ttf' })\n\n\n  rotate(-rt, origin: [x + (width / 2.0), -(y + (height / 2.0))]) do\n    font('Lato', size: font_size) do\n      formatted_text_box(\n        [{ text: text_to_print, styles: [:bold] }],\n        at: [x, -y],\n        width: width,\n        height: height,\n        overflow: :shrink_to_fit,\n        align: h_align,\n        valign: v_align,\n        # Allow the font to go all the way down to the unreadable 1pt setting.\n        min_font_size: 1\n      )\n    end\n  end\nend\n```\n. @sandal Thanks for taking a look; and as for code examples, I'll do that in future if that makes it easier for you :smiley: \n. Okay, surely in this scenario it would make more sense for the attempt order to prioritise resizing over breaking a word?\n1. Split on whitespace\n2. Shrink font size\n3. Break words apart\n. I mean, it's a sort of \"last-resort\" type behavior, especially as it doesn't automatically hyphenate the word break, etc.\n. Oh and @sandal I saw this: #449 but I'm not sure what ever happened with it...?\n. Well so you can feel a bit of sense of achievement, I'm using your library in production as part of a label printing program and I have to say that it works flawlessly apart from this current issue! Excuse the crappy quality and mumbo-jumbo text:\n![2014-07-16 11 18 20](https://cloud.githubusercontent.com/assets/338488/3597512/e730a80c-0cd2-11e4-9857-483e8125a011.jpg)\n. While I don't mind creating my own fork, I'd rather keep using the \"main\" branch long-term to ensure I get all the latest updates / bug-fixes. I'll give it a go though!\n. Okay, I have forked, merged and tested...\n\nBEFORE:\n![screen shot 2014-07-16 at 12 23 19](https://cloud.githubusercontent.com/assets/338488/3598021/b4bcb7ae-0cdb-11e4-97ce-5947688fd76c.png)\nAFTER:\n![screen shot 2014-07-16 at 12 23 34](https://cloud.githubusercontent.com/assets/338488/3598020/b4bc9f6c-0cdb-11e4-9309-427544832b26.png)\n\nSo it does seem to do what it says on the tin. Unfortunately, for me to get this onto our heroku instance running our renderer, I'm going to have to publish the gem as a forked version.. Not ideal, but it'll work.\n. Awesome, I had no idea I could do that!\n. Will do... Give me a few hours to finish what I'm working on atm, and I'll get back to you with results.\n. Updated & tested, looks fine to me!\n. Thanks @boazsegev I'd not thought of doing it that way, although I also just stumbled onto `prawn-table` and was wondering if that might have the functionality I'm looking for already...!?\n. Ah thanks @sandal that's a perfect response, I'll give the method you describe a go and see how I get on. Although I agree that a meaningful return value would be good, I don't imagine I'm the only person who'd like to know the size of the rendered font!\n. Awesome idea and while I feel confident I'll get it working in my code, I'm no-way near good enough at Ruby to attempt a patch, it'll be a mess! lol. :blush: \n. @sandal Ah okay, I never even knew that option existed! (FYI, it's not mentioned _at all_ in the manual)\n\nAnd yeah, sorry for the overly elaborate description.\n. Yeah I did have a bit of a rummage around though the API docs, but like you said, I guess I just missed it.  It's a shame there's seemingly no \"global\" document search, I know you can search for methods, and classes but not through content.\n. @sandal Tell you what, once I've finished my current project, I promise I'll come back and help in any way I can :)\n. I know it's been a while since this was last discussed, but what is the currently recommended work-around for this? Does `prawn-fast-png` fix this issue? or `prawn-gmagick`? Is it ever going to be supported natively in Prawn?\n. Just to chime in, I can confirm that adding the `prawn-gmagick` plugin fixes this issue for me.\n. @bvogel That links seems to suggest that it _only_ supports Adobe Reader? Or is it the underlying same mechanism that Google Chrome uses?\n. @bvogel I can confirm that the `pdf.print` option does exactly what I wanted it to do! Thanks.\n. @yob However it appears that Chrome _does_ actually render the JS.\n. @packetmonkey Is it not possible that a `:center` option could be added, or alignment options to the existing `:fit` code?\n. @packetmonkey I've ended up doing it with a bit of gmagick wizardry, but good to know... I may well give it a go next time I revisit the code.\n. And another odd one for you... Using a Google Font, renders some bits fine, others, not...\n\nIf you highlight the text, copy & paste it's all there, so it's a rendering / PDF issue rather than a data issue.\n\n[pla005_rXard8Sudm56Fwmhh_20161020-151229.pdf](https://github.com/prawnpdf/prawn/files/542125/pla005_rXard8Sudm56Fwmhh_20161020-151229.pdf)\n. @packetmonkey I could really use some help in figuring this out, otherwise I may have to switch away from Prawn, which I _really_ don't want to do! \n. @pointlessone Thanks for the words of wisdom, I'll try to take a look, clearly something's gone nuts.\n. @pointlessone As a quick and dirty fix, is there a way to turn subsetting off?!\n. Damn. Well it's this font: https://fonts.google.com/specimen/Taviraj?selection.family=Taviraj\n\nIs there a way to use font's in a pdf that can be retrieved from a url? Like a CSS import?\n. @pointlessone @gettalong Minimal code reproduction done and attached. It's literally hello-world with a font and different character-set.\n[test.zip](https://github.com/prawnpdf/prawn/files/550405/test.zip)\n. @pointlessone & @gettalong \nOr if people prefer no random zip file:\n\n``` ruby\nrequire \"prawn\"\n\nPrawn::Document.generate(\"hello.pdf\") do\n  font(\"Taviraj/Taviraj-Regular.ttf\") do\n    text \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890-=!@$%^&*()__+}\"\n  end\nend\n```\n\nOutputs the following:\n\n[hello.pdf](https://github.com/prawnpdf/prawn/files/553353/hello.pdf)\n. @gettalong If I open the TTF in FontForge, I don't seem to get anything too out of the ordinary..?\n. The original, surely that means that the font file I'm using is perfectly\nfine and that it's the way it's being embedded that's at fault?\n\n## \n\nSimon Mansfield\n\nOn 28 October 2016 at 17:49:15, Thomas Leitner (notifications@github.com)\nwrote:\n\n> @Siyfion https://github.com/Siyfion Did you open the original TrueType\n> font or the one embedded into the PDF file? The original one works fine but\n> the embedded one is corrupt.\n> \n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> https://github.com/prawnpdf/prawn/issues/972#issuecomment-256970710, or mute\n> the thread\n> https://github.com/notifications/unsubscribe-auth/AAUqOFnjL6rhg8zTibd22qTR63iSKoKPks5q4ieLgaJpZM4Jf_6s\n> .\n. @gettalong So where does the error lie (in what piece of code?) \n. Wow, that's er... waaaay outside my comfort zone to try and debug/fix. Guess I'll have to wait until someone can take a proper look at it.\n. Awesome work! Thank you so much for looking into it!\n\n## \n\nSimon Mansfield\n\nOn 1 November 2016 at 21:27:48, Thomas Leitner (notifications@github.com)\nwrote:\n\n> @Siyfion https://github.com/Siyfion I tracked down the problem after\n> some lengthy investigation (I'm not that familiar with ttfunk myself) and\n> have opened an issue (see prawnpdf/ttfunk#32\n> https://github.com/prawnpdf/ttfunk/issues/32) where you will also find\n> the fix that you can apply to your ttfunk installation.\n> \n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> https://github.com/prawnpdf/prawn/issues/972#issuecomment-257703551, or mute\n> the thread\n> https://github.com/notifications/unsubscribe-auth/AAUqONw7MIBWHHzxB7Ni-HthzePa-PoIks5q567UgaJpZM4Jf_6s\n> .\n. Confirmed that @gettalong's fix does indeed cure this issue. I'd like to get the change merged into the release if possible, as I'm sure this affects more than just one or two fonts!\n. @pointlessone & @gettalong, awesome work both of you. \ud83d\udc4d . ",
    "tilsammans": "Maybe https://goodbits.io would be a good fit? (Being used by @chancancode for Rails Weekly, it looks nice, and I would be happy to run it). Otherwise MailChimp?\n. Great! Obviously, I can change the wording. Just wanted to create this issue quickly while coding.\n. I would love to bundle a few modern fonts but I feel that's putting on too much weight for too little gain.\n\nI would be for raising an error, i.e. option two, and hinting strongly that an up-to-date TTF font should be used instead. We could link to several good fonts on the Wiki.\n. Maybe https://goodbits.io would be a good fit? (Being used by @chancancode for Rails Weekly, it looks nice, and I would be happy to run it). Otherwise MailChimp?\n. Great! Obviously, I can change the wording. Just wanted to create this issue quickly while coding.\n. I would love to bundle a few modern fonts but I feel that's putting on too much weight for too little gain.\n\nI would be for raising an error, i.e. option two, and hinting strongly that an up-to-date TTF font should be used instead. We could link to several good fonts on the Wiki.\n. ",
    "msenne": "Closing this issue because I found what was wrong. \n\n```\n    pdf.font_families[\"Futuro\"] = {\n      :normal  => { :file => fbo, :font => \"Futuro-Book\" },\n      :black => { :file => fbl, :font => \"Futuro-Black\" },\n      :heavy => { :file => fhe, :font => \"Futuro-Heavy\" },\n      :light => { :file => fli, :font => \"Futuro-Light\" }\n    }\n```\n\nFor formatted_text_box to allow for font selection you must have one variant defined as \":normal\". This is a special key that is expected to be present, even when you are specifying that you want to use different variants.  In other words, even if you specify \n\n```\nfont: \"Futuro\", style: :heavy\n```\n\nIt will still throw an error because :normal hasn't been defined as a style.  \n. Closing this issue because I found what was wrong. \n\n```\n    pdf.font_families[\"Futuro\"] = {\n      :normal  => { :file => fbo, :font => \"Futuro-Book\" },\n      :black => { :file => fbl, :font => \"Futuro-Black\" },\n      :heavy => { :file => fhe, :font => \"Futuro-Heavy\" },\n      :light => { :file => fli, :font => \"Futuro-Light\" }\n    }\n```\n\nFor formatted_text_box to allow for font selection you must have one variant defined as \":normal\". This is a special key that is expected to be present, even when you are specifying that you want to use different variants.  In other words, even if you specify \n\n```\nfont: \"Futuro\", style: :heavy\n```\n\nIt will still throw an error because :normal hasn't been defined as a style.  \n. ",
    "ollym": "@sandal I just woke up this morning to find a:\n\n```\nNotImplementedError: Document#transaction has been disabled because its implementation lead to corrupted documents whenever a page boundary was crossed. We will try to work on reimplementing it in a future release\n```\n\nError message staring at me. I've just unearthed all this mess about how evil transactions can be. I didn't suffer from this problem, because I was dynamically changing the height of the page.\n\nMy use\u2013case was that I was generating a receipt, which can be variable in height but fixed in width. My code looked a bit like this:\n\n``` ruby\nclass ReceiptPdf < Prawn::Document\n  include Prawn::Measurements\n\n  def initialize(order, width = nil)\n    margin = 20\n    super page_size: [mm2pt(width || 80), 10000], margin: margin\n    y_before = self.y\n\n    transaction do\n      draw_content(order)\n      rollback\n    end\n\n    height = (y_before - self.y) + (margin * 2)\n\n    self.page_height = height\n    self.y = height - margin\n    draw_content(order)\n  end\n\n  def page_height=(value)\n    page.dictionary.data[:MediaBox][3] = value.to_f\n  end\n```\n\nWhat is the intended fix for this? And how long away is it?\n. Only just found this issue, should of really commented this here:\nhttps://github.com/prawnpdf/prawn/pull/675#issuecomment-38423926\n. @sandal I just woke up this morning to find a:\n\n```\nNotImplementedError: Document#transaction has been disabled because its implementation lead to corrupted documents whenever a page boundary was crossed. We will try to work on reimplementing it in a future release\n```\n\nError message staring at me. I've just unearthed all this mess about how evil transactions can be. I didn't suffer from this problem, because I was dynamically changing the height of the page.\n\nMy use\u2013case was that I was generating a receipt, which can be variable in height but fixed in width. My code looked a bit like this:\n\n``` ruby\nclass ReceiptPdf < Prawn::Document\n  include Prawn::Measurements\n\n  def initialize(order, width = nil)\n    margin = 20\n    super page_size: [mm2pt(width || 80), 10000], margin: margin\n    y_before = self.y\n\n    transaction do\n      draw_content(order)\n      rollback\n    end\n\n    height = (y_before - self.y) + (margin * 2)\n\n    self.page_height = height\n    self.y = height - margin\n    draw_content(order)\n  end\n\n  def page_height=(value)\n    page.dictionary.data[:MediaBox][3] = value.to_f\n  end\n```\n\nWhat is the intended fix for this? And how long away is it?\n. Only just found this issue, should of really commented this here:\nhttps://github.com/prawnpdf/prawn/pull/675#issuecomment-38423926\n. ",
    "ddengler": "I am currently playing around with this a bit. My current strategy is to create a temporary document with the same settings as the original page, render the group and decide what to do in the original based on the result. Anything special I have to look out for? At least for the few scenarios I already tested, it is looking good. Hope I won't hit any major road blocks.\n. @sandal I created a gem with my experimental implementation as we discussed. It is available at https://github.com/ddengler/prawn-grouping or via rubygems `prawn-grouping`\n. @huwd does my grouping gem https://github.com/ddengler/prawn-grouping solve this for you? If not, please let me know in the projects issue tracker. I did not have the time to update the project recently, but if there are fundamental issues with the approach I will look into it again for you.\n. @packetmonkey thanks for mentioning the project in the wiki and for the offer to open up prawn to the plugin. I will look into the latest prawn version, update the plugin and let you know if I have any API related issues.\n. I agree. Without a real snapshot it is hard to tell if this will work in any possible case \u2013 especially with custom extensions. On the other hand (I also tried deep copy) \u2013 this is a lot faster. I also played with the idea of an undo stack for this, so that every command has a reverse command (like rails migrate down), which would be a lot more flexible for other use cases as well. I have no idea if this would even be possible with the current architecture of the gem.\n\nI will look into the JRuby issue and wrap this up into a gem as you suggested.\n. @sandal Thanks! Will do. I might also be able to look into the command-pattern during the next few months, as I have a project coming up that relies heavily on the grouping behavior and should have some budget for it. Will let you know how it turns out.\n. I am currently playing around with this a bit. My current strategy is to create a temporary document with the same settings as the original page, render the group and decide what to do in the original based on the result. Anything special I have to look out for? At least for the few scenarios I already tested, it is looking good. Hope I won't hit any major road blocks.\n. @sandal I created a gem with my experimental implementation as we discussed. It is available at https://github.com/ddengler/prawn-grouping or via rubygems `prawn-grouping`\n. @huwd does my grouping gem https://github.com/ddengler/prawn-grouping solve this for you? If not, please let me know in the projects issue tracker. I did not have the time to update the project recently, but if there are fundamental issues with the approach I will look into it again for you.\n. @packetmonkey thanks for mentioning the project in the wiki and for the offer to open up prawn to the plugin. I will look into the latest prawn version, update the plugin and let you know if I have any API related issues.\n. I agree. Without a real snapshot it is hard to tell if this will work in any possible case \u2013 especially with custom extensions. On the other hand (I also tried deep copy) \u2013 this is a lot faster. I also played with the idea of an undo stack for this, so that every command has a reverse command (like rails migrate down), which would be a lot more flexible for other use cases as well. I have no idea if this would even be possible with the current architecture of the gem.\n\nI will look into the JRuby issue and wrap this up into a gem as you suggested.\n. @sandal Thanks! Will do. I might also be able to look into the command-pattern during the next few months, as I have a project coming up that relies heavily on the grouping behavior and should have some budget for it. Will let you know how it turns out.\n. ",
    "romand": "here is what I've got, it handles bounding boxes correctly and works for subclasses of `Document`\nhttps://gist.github.com/a0a4c07aac98e28ac634\nbased on @ddengler 's code\n. here is what I've got, it handles bounding boxes correctly and works for subclasses of `Document`\nhttps://gist.github.com/a0a4c07aac98e28ac634\nbased on @ddengler 's code\n. ",
    "huwd": "Hello everyone,\n\nDoes anyone have a running workaround for this, @romand the Gist link above is now dead and it looks like it's been a while since anyone spoke about this - is there currently a way to stop paragraphs breaking across a page/column boundary?\n. :+1: For future finders of this thread, I can confirm the gem @ddengler wrote works beautifully (2016 edition of 'this works') - used in a Rails 5 app with Prawn 1.0.0. :tada: Thank you!\n. Hello everyone,\n\nDoes anyone have a running workaround for this, @romand the Gist link above is now dead and it looks like it's been a while since anyone spoke about this - is there currently a way to stop paragraphs breaking across a page/column boundary?\n. :+1: For future finders of this thread, I can confirm the gem @ddengler wrote works beautifully (2016 edition of 'this works') - used in a Rails 5 app with Prawn 1.0.0. :tada: Thank you!\n. ",
    "malteschmitz": "@sandal: Works like a charm! Many thanks for your support.\n. @sandal: Works like a charm! Many thanks for your support.\n. ",
    "tlynam": "Hi @packetmonkey, I see how we could add the task in travis.yml with `script` or `before_script`\nhttps://docs.travis-ci.com/user/customizing-the-build/#Breaking-the-Build\n\nSorry, can you please explain how you'd use eval?  What if we wrapped the code within the manual task in a begin rescue block and exited with 1?\n. Thanks @practicingruby, I'll play around with it and see\n. Hi @packetmonkey, I see how we could add the task in travis.yml with `script` or `before_script`\nhttps://docs.travis-ci.com/user/customizing-the-build/#Breaking-the-Build\n\nSorry, can you please explain how you'd use eval?  What if we wrapped the code within the manual task in a begin rescue block and exited with 1?\n. Thanks @practicingruby, I'll play around with it and see\n. ",
    "voxik": "The think is, that in Fedora, there is different maintainer of TTFunk then maintainer of Prawn. Maintainer of TTFunk decided to update TTFunk, hence TTFunk is newer then Prawn. There is no reason to expect that newer TTFunk breaks something in Prawn, is there? So why don't you specify just minimal version?\n\nMoreover, there is Prawn 1.0.0.rc2 in Fedora, so there is no Prawn release with higher version we should update to.\n\nOn the other hand, it is good to know that the maintainers of TTFunk and Prawn should better collaborate. So thanks for explanation of your release process.\n. The think is, that in Fedora, there is different maintainer of TTFunk then maintainer of Prawn. Maintainer of TTFunk decided to update TTFunk, hence TTFunk is newer then Prawn. There is no reason to expect that newer TTFunk breaks something in Prawn, is there? So why don't you specify just minimal version?\n\nMoreover, there is Prawn 1.0.0.rc2 in Fedora, so there is no Prawn release with higher version we should update to.\n\nOn the other hand, it is good to know that the maintainers of TTFunk and Prawn should better collaborate. So thanks for explanation of your release process.\n. ",
    "xsuchy": "TTFunk is released together with Prawn, but only 0.1x version.\nWhen we packaged Prawn for Fedora, we decided to use 1.0 RC, because in that time (March 2013) there was only available 0.12, which did not support Ruby 1.9 and was 2 years old. And Prawn 1.0 RC was only way, to make Prawn work on Fedora.\nI think all this can be easily solved if you can cut 1.0 RC3. It use recent ttfunk so dependencies will be automagicaly satisfied.\n. TTFunk is released together with Prawn, but only 0.1x version.\nWhen we packaged Prawn for Fedora, we decided to use 1.0 RC, because in that time (March 2013) there was only available 0.12, which did not support Ruby 1.9 and was 2 years old. And Prawn 1.0 RC was only way, to make Prawn work on Fedora.\nI think all this can be easily solved if you can cut 1.0 RC3. It use recent ttfunk so dependencies will be automagicaly satisfied.\n. ",
    "jalagrange": "Wao, thanxs guys, you really are on top of things! Sorry for reporting this as an issue, I honestly did not look at the changelog. Hope this gets reimplemented in the future, we do a lot of reporting and for us it really is a killer feature. Il downgrade for now.... Thanxs again!!\n. Wao, thanxs guys, you really are on top of things! Sorry for reporting this as an issue, I honestly did not look at the changelog. Hope this gets reimplemented in the future, we do a lot of reporting and for us it really is a killer feature. Il downgrade for now.... Thanxs again!!\n. ",
    "hectorvs-gxg": "I found this: http://unicode.org/reports/tr9/\nit is the unicode bidirectional algorithm\n\nit may help with the BiDi buisiness\n\nAlso this  http://sourceforge.net/projects/rubybidi/\n\nit's an old project, but it may work?\n. I played a bit with the rubybidi library, it seems to do a good job in detecting the text itself and printing out a visual representation of what the text should look like.\n\nI tried massaging the text with the library before sending it over to prawn, but there needs to be some changes for this to work.\n\nBasically, the library removes the need to reverse the text itself when printing in RTL, prawn does this by default when in RTL mode, so first step is to prevent this reversing.\n\nAfter this, the words of the sentence still need to be printed from right to left in order for the word wrapping and alignment to be correct (this means that the last word of an RTL sentence has to be printed first, but the word itself should be printed \"as is\" in LTR mode).\n\nThis may be the wrong approach, but I will try to hack prawn a bit in my own local fork to see if this works. I know this is not a good enough solution, but all means (still needs to handle things like formatting tags and such) but it's a good proof of concept.\n. Ok, so I did some serious code spelunking today trying to get prawn to display the text generated by the rubyBidi library correctly and got mostly there.\n\nto render in prawn I used a simple `text` method with no formatting, and set `text_direction = :rtl` in the prawn document\n\nrubyBidi basically renders a visually correct version of the text in question with the following snippet\n\n```\n    @b = Bidi.new\n    processed_text = @b.to_visual some_text, \"R\"\n\n    text processed_text\n```\n\nI'm attaching a picture of the results:\n\n![screen_shot_2014-06-11_at_5_20_20_pm](https://cloud.githubusercontent.com/assets/6163102/3252268/b61d4c00-f1bd-11e3-943b-bc1df93be5c1.png)\n\nAll I did was comment out the lines of code that reverse the text in prawn, specifically in \n\nhttps://github.com/prawnpdf/prawn/blob/1.0.0/lib/prawn/text/formatted/fragment.rb#L215-220\n\nand\n\nhttps://github.com/prawnpdf/prawn/blob/1.0.0/lib/prawn/text/formatted/wrap.rb#L90\n\nAs you can see from the picture, the text is visually correct on screen, but it's being printed in reverse order.\n\nCould you offer some guidance @sandal? I kinda got the gist of how the line wrapping works, but I couldn't make it so the lines get read in the correct direction.\n\nHere's the html file I used as well\n\n```\n<!DOCTYPE html>\n<head>\n    <meta charset=\"unicode\">\n</head>\n<body>\n  <div dir=\"RTL\" align=\"right\">\u05d1\u05de\u05e2\u05d1\u05d3\u05ea\u05e0\u05d5 \u05d1\u05d5\u05e6\u05e2\u05d4 \u05d1\u05d3\u05d9\u05e7\u05ea \u05e6'\u05d9\u05e4 \u05d2\u05e0\u05d8\u05d9 \u05d4\u05de\u05d0\u05ea\u05e8\u05ea \u05e9\u05d9\u05e0\u05d5\u05d9\u05d9\u05dd \u05db\u05de\u05d5\u05ea\u05d9\u05d9\u05dd \u05d1\u05db\u05e8\u05d5\u05de\u05d5\u05d6\u05d5\u05de\u05d9\u05dd (\u05d7\u05e1\u05e8\u05d9\u05dd \u05d0\u05d5 \u05ea\u05d5\u05e1\u05e4\u05d5\u05ea \u05d1\u05de\u05e1\u05e4\u05e8 \u05e2\u05d5\u05ea\u05e7\u05d9 \u05d4\u05d3\u05e0\"\u05d0). hello tgere \u05d1\u05d1\u05d3\u05d9\u05e7\u05d4 \u05e0\u05d1\u05d7\u05e0\u05d5 716,503 \u05d0\u05ea\u05e8\u05d9\u05dd \u05e2\u05dc \u05e4\u05e0\u05d9 \u05db\u05dc \u05d4\u05d2\u05e0\u05d5\u05dd, \u05db\u05e4\u05d9 \u05e9\u05d4\u05dd \u05de\u05d9\u05d5\u05e6\u05d2\u05d9\u05dd \u05e2\u05dc \u05d2\u05d1\u05d9 \u05e6'\u05d9\u05e4 \u05de\u05e1\u05d5\u05d2 SNP \u05e9\u05dc \u05d7\u05d1\u05e8\u05ea Illumina.</div>\n</body>\n</html>\n```\n\n so you can copy / paste the text if needed.\n\nThanks!\n. FWIW, we ended up going with an html based pdf generation solution. Html implements most of the bidi support necessary for the Hebrew language.\u00a0\n\nI say mostly because there were still problems with punctuation, numbers, and English characters mixed with Hebrew.\n\nBidi support is hard, but the best solution is to implement a known algorithm like Ruby Bidi does.\n. I found this: http://unicode.org/reports/tr9/\nit is the unicode bidirectional algorithm\n\nit may help with the BiDi buisiness\n\nAlso this  http://sourceforge.net/projects/rubybidi/\n\nit's an old project, but it may work?\n. I played a bit with the rubybidi library, it seems to do a good job in detecting the text itself and printing out a visual representation of what the text should look like.\n\nI tried massaging the text with the library before sending it over to prawn, but there needs to be some changes for this to work.\n\nBasically, the library removes the need to reverse the text itself when printing in RTL, prawn does this by default when in RTL mode, so first step is to prevent this reversing.\n\nAfter this, the words of the sentence still need to be printed from right to left in order for the word wrapping and alignment to be correct (this means that the last word of an RTL sentence has to be printed first, but the word itself should be printed \"as is\" in LTR mode).\n\nThis may be the wrong approach, but I will try to hack prawn a bit in my own local fork to see if this works. I know this is not a good enough solution, but all means (still needs to handle things like formatting tags and such) but it's a good proof of concept.\n. Ok, so I did some serious code spelunking today trying to get prawn to display the text generated by the rubyBidi library correctly and got mostly there.\n\nto render in prawn I used a simple `text` method with no formatting, and set `text_direction = :rtl` in the prawn document\n\nrubyBidi basically renders a visually correct version of the text in question with the following snippet\n\n```\n    @b = Bidi.new\n    processed_text = @b.to_visual some_text, \"R\"\n\n    text processed_text\n```\n\nI'm attaching a picture of the results:\n\n![screen_shot_2014-06-11_at_5_20_20_pm](https://cloud.githubusercontent.com/assets/6163102/3252268/b61d4c00-f1bd-11e3-943b-bc1df93be5c1.png)\n\nAll I did was comment out the lines of code that reverse the text in prawn, specifically in \n\nhttps://github.com/prawnpdf/prawn/blob/1.0.0/lib/prawn/text/formatted/fragment.rb#L215-220\n\nand\n\nhttps://github.com/prawnpdf/prawn/blob/1.0.0/lib/prawn/text/formatted/wrap.rb#L90\n\nAs you can see from the picture, the text is visually correct on screen, but it's being printed in reverse order.\n\nCould you offer some guidance @sandal? I kinda got the gist of how the line wrapping works, but I couldn't make it so the lines get read in the correct direction.\n\nHere's the html file I used as well\n\n```\n<!DOCTYPE html>\n<head>\n    <meta charset=\"unicode\">\n</head>\n<body>\n  <div dir=\"RTL\" align=\"right\">\u05d1\u05de\u05e2\u05d1\u05d3\u05ea\u05e0\u05d5 \u05d1\u05d5\u05e6\u05e2\u05d4 \u05d1\u05d3\u05d9\u05e7\u05ea \u05e6'\u05d9\u05e4 \u05d2\u05e0\u05d8\u05d9 \u05d4\u05de\u05d0\u05ea\u05e8\u05ea \u05e9\u05d9\u05e0\u05d5\u05d9\u05d9\u05dd \u05db\u05de\u05d5\u05ea\u05d9\u05d9\u05dd \u05d1\u05db\u05e8\u05d5\u05de\u05d5\u05d6\u05d5\u05de\u05d9\u05dd (\u05d7\u05e1\u05e8\u05d9\u05dd \u05d0\u05d5 \u05ea\u05d5\u05e1\u05e4\u05d5\u05ea \u05d1\u05de\u05e1\u05e4\u05e8 \u05e2\u05d5\u05ea\u05e7\u05d9 \u05d4\u05d3\u05e0\"\u05d0). hello tgere \u05d1\u05d1\u05d3\u05d9\u05e7\u05d4 \u05e0\u05d1\u05d7\u05e0\u05d5 716,503 \u05d0\u05ea\u05e8\u05d9\u05dd \u05e2\u05dc \u05e4\u05e0\u05d9 \u05db\u05dc \u05d4\u05d2\u05e0\u05d5\u05dd, \u05db\u05e4\u05d9 \u05e9\u05d4\u05dd \u05de\u05d9\u05d5\u05e6\u05d2\u05d9\u05dd \u05e2\u05dc \u05d2\u05d1\u05d9 \u05e6'\u05d9\u05e4 \u05de\u05e1\u05d5\u05d2 SNP \u05e9\u05dc \u05d7\u05d1\u05e8\u05ea Illumina.</div>\n</body>\n</html>\n```\n\n so you can copy / paste the text if needed.\n\nThanks!\n. FWIW, we ended up going with an html based pdf generation solution. Html implements most of the bidi support necessary for the Hebrew language.\u00a0\n\nI say mostly because there were still problems with punctuation, numbers, and English characters mixed with Hebrew.\n\nBidi support is hard, but the best solution is to implement a known algorithm like Ruby Bidi does.\n. ",
    "nareshcool97": "thank you sandal, it is helpful.\n. thank you sandal, it is helpful.\n. ",
    "MgFrobozz": "A little additional information: before the loop adding text to the bounding box for the left column, the problem line is ok (\"del se\u00f1or Sterling\"). After that column is done, it's corrupt (\"del se\ufffdor Sterling\"). \n\nThat problem character is 0xf1/241. The utf-8 values corresponding to it are \\303 and \\261. That's 0xc3 and 0xb1, for which the coding point is 0xf1. So apparently formatted_text_box returns a text array in which the utf-8 has been converted to coding points? If that's a case, is there a way to preserve the utf-8 values in the returned text array?\n\nIn the call to preformatted_text_box, if I add as options {:skip_encoding => true}, then the overflow from the bounding box is not corrupted, but any of the utf-8 characters outside the ascii range are corrupted in the rendered document.\n. Resolved ... the work-around is to skip encoding for all but the first call to formatted_text_box, since the overflow material is already re-encoded from utf-8 to whatever format is used internally by pdf in that first call.\n\n```\ntext_box_options = {:skip_encoding => false};\nwhile (text_array.length() > 0)\n    # Left column:\n    pdf.bounding_box([left_pos_x, left_pos_y], :width => left_width, \n        :height => left_height) do\n        text_array = pdf.formatted_text_box(text_array);\n        text_box_options = {:skip_encoding => true};\n    end\n\n    # Right column:\n    pdf.bounding_box([right_pos_x, right_pos_y], :width => right_width, \n        :height => right_height) do\n        text_array = pdf.formatted_text_box(text_array);\n        text_box_options = {:skip_encoding => true};\n    end\n\n    if (text_array.length() > 0)\n        pdf.start_new_page();\n    end\nend\n```\n. A little additional information: before the loop adding text to the bounding box for the left column, the problem line is ok (\"del se\u00f1or Sterling\"). After that column is done, it's corrupt (\"del se\ufffdor Sterling\"). \n\nThat problem character is 0xf1/241. The utf-8 values corresponding to it are \\303 and \\261. That's 0xc3 and 0xb1, for which the coding point is 0xf1. So apparently formatted_text_box returns a text array in which the utf-8 has been converted to coding points? If that's a case, is there a way to preserve the utf-8 values in the returned text array?\n\nIn the call to preformatted_text_box, if I add as options {:skip_encoding => true}, then the overflow from the bounding box is not corrupted, but any of the utf-8 characters outside the ascii range are corrupted in the rendered document.\n. Resolved ... the work-around is to skip encoding for all but the first call to formatted_text_box, since the overflow material is already re-encoded from utf-8 to whatever format is used internally by pdf in that first call.\n\n```\ntext_box_options = {:skip_encoding => false};\nwhile (text_array.length() > 0)\n    # Left column:\n    pdf.bounding_box([left_pos_x, left_pos_y], :width => left_width, \n        :height => left_height) do\n        text_array = pdf.formatted_text_box(text_array);\n        text_box_options = {:skip_encoding => true};\n    end\n\n    # Right column:\n    pdf.bounding_box([right_pos_x, right_pos_y], :width => right_width, \n        :height => right_height) do\n        text_array = pdf.formatted_text_box(text_array);\n        text_box_options = {:skip_encoding => true};\n    end\n\n    if (text_array.length() > 0)\n        pdf.start_new_page();\n    end\nend\n```\n. ",
    "parndt": "Sweet as!\n. Sweet as!\n. ",
    "practicingdev": "I'm no longer involved with the project on a day to day basis, so the person to follow up with on this is @pointlessone.. I'm no longer involved with the project on a day to day basis, so the person to follow up with on this is @pointlessone.. ",
    "gsinclair": "I spotted the error.  I spelled 'center' the Australian way, not the US way.  With that fixed, it's fine.  So, a better error message would be nice.\n. Hah, you beat me to it :)\n. I spotted the error.  I spelled 'center' the Australian way, not the US way.  With that fixed, it's fine.  So, a better error message would be nice.\n. Hah, you beat me to it :)\n. ",
    "nolanamy": "Hmm... it seems I'm looking at a very old version of the Rdoc...\n. Hmm... it seems I'm looking at a very old version of the Rdoc...\n. ",
    "ingk": "You're right. I changed it to an optional parameter.\n. I just updated the pull request and now the build passes without errors.\n. I don't know if I get you right, but the variable `text` gets a copy of the input data.\n\n`\ndef original_text\n  @original_array.collect { |hash| hash.dup }\nend\n`\n\n`normalize_encoding` also relies on `original_text`. So deleting the key `color` shouldn't be a problem, since in the next iteration without the dry_run option we get a fresh copy of the original input data.\n. I get your point. Is there anything I can do here? Unfortunately I'm not that familiar with the codebase to do such a change.\n. You're right. I changed it to an optional parameter.\n. I just updated the pull request and now the build passes without errors.\n. I don't know if I get you right, but the variable `text` gets a copy of the input data.\n\n`\ndef original_text\n  @original_array.collect { |hash| hash.dup }\nend\n`\n\n`normalize_encoding` also relies on `original_text`. So deleting the key `color` shouldn't be a problem, since in the next iteration without the dry_run option we get a fresh copy of the original input data.\n. I get your point. Is there anything I can do here? Unfortunately I'm not that familiar with the codebase to do such a change.\n. ",
    "mockdeep": "Is it something you think might be supported by prawn at some point? Any idea how difficult it would be to make something in plain ruby for it? I was hoping to avoid having to set up a pdftk buildpack on heroku.\n. Hmm, okay. Thanks for the input. We have to manipulate a lot of pre-existing pdfs in our project, so I may end up digging into it. Can you give me a sense of what some of the challenges are? Is it just that pdfs generated by different sources tend to have a lot of invalid formatting and syntax?\n. Is it something you think might be supported by prawn at some point? Any idea how difficult it would be to make something in plain ruby for it? I was hoping to avoid having to set up a pdftk buildpack on heroku.\n. Hmm, okay. Thanks for the input. We have to manipulate a lot of pre-existing pdfs in our project, so I may end up digging into it. Can you give me a sense of what some of the challenges are? Is it just that pdfs generated by different sources tend to have a lot of invalid formatting and syntax?\n. ",
    "petesharum": "Something is goofy in this request. It shouldn't contain so many commits. Will fix & re-submit.\n. Something is goofy in this request. It shouldn't contain so many commits. Will fix & re-submit.\n. ",
    "ferdinandsalis": "@packetmonkey comparing the two strings indeed returns false but how can that be?\n\n```\npry(main)> Item.last.title\nItem Load (0.3ms)  SELECT  \"items\".* FROM \"items\"   ORDER BY \"items\".\"id\" DESC LIMIT 1\n=> \"Les deux jet\u00e9es de Trouville-Deauville\"\n\npry(main)> Item.last.title == \"Les deux jet\u00e9es de Trouville-Deauville\"\n  Item Load (0.3ms)  SELECT  \"items\".* FROM \"items\"   ORDER BY \"items\".\"id\" DESC LIMIT 1\n=> false\n```\n. @sandal both strings are UTF-8 encoded. However the codepoints of the two strings differ. I am not sure, could it be related to multi-byte characters. It seems that the e with accute in the typed in string has one codepoint whereas in the other one it has two codepoints. \n\n```\npry(main)> \"Les deux jet\u00e9es de Trouville-Deauville\".codepoints\n=> [76, 101, 115, 32, 100, 101, 117, 120, 32, 106, 101, 116, 233, 101, 115, 32, 100, 101, 32, 84, 114, 111, 117, 118, 105, 108, 108, 101, 45, 68, 101, 97, 117, 118, 105, 108, 108, 101]\n\npry(main)> Item.last.title.codepoints\n=> [76, 101, 115, 32, 100, 101, 117, 120, 32, 106, 101, 116, 101, 769, 101, 115, 32, 100, 101, 32, 84, 114, 111, 117, 118, 105, 108, 108, 101, 45, 68, 101, 97, 117, 118, 105, 108, 108, 101]\n```\n\nI might also add that when its displayed on webpage the two strings render the same correct result.\n\nThanks for your help.\n. @sandal I have now tried is with dejavu and works as expected. However a different font is not an option.\n\nBut apparently converting the string into an instance of ActiveSupport::Multibyte::Chars instance and then evoking the compose method returns the same codepoints and the pdf displays the characters correctly. Now how would I best integrate that into the application. Any ideas?\n\nAnyway thanks for your help. It wasn\u2019t a Prawn issue after all.\n. Thanks. Thats how I solved it.\n\n```\nbefore_save do\n  self.attributes.map do |column, value|\n    if value.respond_to? :to_str\n      self[column] = ActiveSupport::Multibyte::Chars.new(value).compose\n    end\n  end\nend\n```\n. @packetmonkey comparing the two strings indeed returns false but how can that be?\n\n```\npry(main)> Item.last.title\nItem Load (0.3ms)  SELECT  \"items\".* FROM \"items\"   ORDER BY \"items\".\"id\" DESC LIMIT 1\n=> \"Les deux jet\u00e9es de Trouville-Deauville\"\n\npry(main)> Item.last.title == \"Les deux jet\u00e9es de Trouville-Deauville\"\n  Item Load (0.3ms)  SELECT  \"items\".* FROM \"items\"   ORDER BY \"items\".\"id\" DESC LIMIT 1\n=> false\n```\n. @sandal both strings are UTF-8 encoded. However the codepoints of the two strings differ. I am not sure, could it be related to multi-byte characters. It seems that the e with accute in the typed in string has one codepoint whereas in the other one it has two codepoints. \n\n```\npry(main)> \"Les deux jet\u00e9es de Trouville-Deauville\".codepoints\n=> [76, 101, 115, 32, 100, 101, 117, 120, 32, 106, 101, 116, 233, 101, 115, 32, 100, 101, 32, 84, 114, 111, 117, 118, 105, 108, 108, 101, 45, 68, 101, 97, 117, 118, 105, 108, 108, 101]\n\npry(main)> Item.last.title.codepoints\n=> [76, 101, 115, 32, 100, 101, 117, 120, 32, 106, 101, 116, 101, 769, 101, 115, 32, 100, 101, 32, 84, 114, 111, 117, 118, 105, 108, 108, 101, 45, 68, 101, 97, 117, 118, 105, 108, 108, 101]\n```\n\nI might also add that when its displayed on webpage the two strings render the same correct result.\n\nThanks for your help.\n. @sandal I have now tried is with dejavu and works as expected. However a different font is not an option.\n\nBut apparently converting the string into an instance of ActiveSupport::Multibyte::Chars instance and then evoking the compose method returns the same codepoints and the pdf displays the characters correctly. Now how would I best integrate that into the application. Any ideas?\n\nAnyway thanks for your help. It wasn\u2019t a Prawn issue after all.\n. Thanks. Thats how I solved it.\n\n```\nbefore_save do\n  self.attributes.map do |column, value|\n    if value.respond_to? :to_str\n      self[column] = ActiveSupport::Multibyte::Chars.new(value).compose\n    end\n  end\nend\n```\n. ",
    "MartinMcDermid": "Yeah, I'll rewrite! Thanks.\n. @sandal That's it running great! Yeah quite silly of me to miss that. Appreciate the help! \n. Yeah, I'll rewrite! Thanks.\n. @sandal That's it running great! Yeah quite silly of me to miss that. Appreciate the help! \n. ",
    "wukis": "Thank you for the information!\n. Thank you for the information!\n. ",
    "andreashappe": "thought the same -- but are you sure that this is happening here? I slightly doubt it, because I can run the unit tests (with the same order/seed) for dozens/hundreds of times without any differences in MD5 sums.\n\nI have tagged all pdf test cases and am starting those with a pre-defined seed. Still very ugly, but at least it does not stop all my test cases :-/\n\nDo you have any experience with pdf to image conversion or know a gem that I could use for that?\n\nThank, Andreas\n. @sandal : any pointers where you would start? I've taken a look around the prawn repository but haven't found a good start yet (but have no knowledge of the codebase).\n\nI've flagged all pdf-tests and am calling them with a predefined seed (which makes them reproducible for me). But a more generic solution would be way preferable to that.\n. The template itself might not be possible (as it is not public) -- i should be able to provide the unit test as well as parts of the prawn::document subclass. I need to verify this with my employer.\n\nIt might be possible to give you two generated pdfs that differ -- but i'd rather prefer to give those to you in private. If it helps, i can send you a \"diff\" of those pdfs.\n\nI will check if it's the order between prawn calls or if the order of the other unit tests changes the PDF output too.\n\nTBH this really is a timing-related font map-sort Problem I'm not even sure how to best reproduce it.\n. thought the same -- but are you sure that this is happening here? I slightly doubt it, because I can run the unit tests (with the same order/seed) for dozens/hundreds of times without any differences in MD5 sums.\n\nI have tagged all pdf test cases and am starting those with a pre-defined seed. Still very ugly, but at least it does not stop all my test cases :-/\n\nDo you have any experience with pdf to image conversion or know a gem that I could use for that?\n\nThank, Andreas\n. @sandal : any pointers where you would start? I've taken a look around the prawn repository but haven't found a good start yet (but have no knowledge of the codebase).\n\nI've flagged all pdf-tests and am calling them with a predefined seed (which makes them reproducible for me). But a more generic solution would be way preferable to that.\n. The template itself might not be possible (as it is not public) -- i should be able to provide the unit test as well as parts of the prawn::document subclass. I need to verify this with my employer.\n\nIt might be possible to give you two generated pdfs that differ -- but i'd rather prefer to give those to you in private. If it helps, i can send you a \"diff\" of those pdfs.\n\nI will check if it's the order between prawn calls or if the order of the other unit tests changes the PDF output too.\n\nTBH this really is a timing-related font map-sort Problem I'm not even sure how to best reproduce it.\n. ",
    "emrekutlu": "Tests are added.\n. The problem is creating two <code>Prawn::Text::Formatted::Box</code> when <code>:indent_paragraphs</code> is used. One for the first line and one for the rest of the text. So <code>:valign</code> option is used for both of them and this makes them calculated separately and this causes the problem.\n\nI am aware of the <code>process_vertical_alignment()</code> method. I want to use that in my solution but I couldn't come up with a solution, maybe if I could create nested <code>Prawn::Text::Formatted::Box</code>'es.\n\nAs a solution I added a <code>bounding_box</code> which contains these two boxes and implemented alignment logic for this <code>bounding_box</code>. Because I aligned the <code>bounding_box</code>, the inner boxes should not be aligned. This is why I deleted the <code>:valign</code> option.\n. I am closing this PR. I guess it isn't worth adding the complexity.\n. Tests are added.\n. The problem is creating two <code>Prawn::Text::Formatted::Box</code> when <code>:indent_paragraphs</code> is used. One for the first line and one for the rest of the text. So <code>:valign</code> option is used for both of them and this makes them calculated separately and this causes the problem.\n\nI am aware of the <code>process_vertical_alignment()</code> method. I want to use that in my solution but I couldn't come up with a solution, maybe if I could create nested <code>Prawn::Text::Formatted::Box</code>'es.\n\nAs a solution I added a <code>bounding_box</code> which contains these two boxes and implemented alignment logic for this <code>bounding_box</code>. Because I aligned the <code>bounding_box</code>, the inner boxes should not be aligned. This is why I deleted the <code>:valign</code> option.\n. I am closing this PR. I guess it isn't worth adding the complexity.\n. ",
    "marjinal1st": "Just found it out, using <b> tag. Closing the issue.\n. Just found it out, using <b> tag. Closing the issue.\n. ",
    "emmanuelmillionaer": "Thanks @sandal! I now posted my issue in the google group https://groups.google.com/forum/#!topic/prawn-ruby/mYgIy2Th644 \nas well in stackoverflow:\n http://stackoverflow.com/questions/25426348/generate-prawn-pdf-text-in-corner\n. Thanks @sandal! I now posted my issue in the google group https://groups.google.com/forum/#!topic/prawn-ruby/mYgIy2Th644 \nas well in stackoverflow:\n http://stackoverflow.com/questions/25426348/generate-prawn-pdf-text-in-corner\n. ",
    "artbot1": "thanx, this can also be done this way:\n\n```\n#sx, sy: scale, tx, ty: translate\n#scale with respect to margin with sx, sy and translate then by tx, ty\nmx= @pdf.margin_box.absolute_left\nmy= @pdf.margin_box.absolute_bottom\n@pdf.transformation_matrix(sx, 0, 0, sy, -sx*mx+mx+tx, -sy*my+my+ty) do\n    #stuff to draw\nend \n```\n. thanx, this can also be done this way:\n\n```\n#sx, sy: scale, tx, ty: translate\n#scale with respect to margin with sx, sy and translate then by tx, ty\nmx= @pdf.margin_box.absolute_left\nmy= @pdf.margin_box.absolute_bottom\n@pdf.transformation_matrix(sx, 0, 0, sy, -sx*mx+mx+tx, -sy*my+my+ty) do\n    #stuff to draw\nend \n```\n. ",
    "Pablo-Merino": "Alright, @sandal. Just reverted it with your suggestion :smiley:. Feel free to merge it!\n. @sandal: sure, let me make the change and I'll commit :)\n. Oh, haha I was in a hurry and didn't properly read the docs. I won't be home until a few hours from now, but I can do this change then, but I don't mind if you do it now. \n\n> El 8/9/2014, a las 18:52, Gregory Brown notifications@github.com escribi\u00f3:\n> \n> Almost there, but not quite. The idea is to avoid unnecessary use of HTML tags, because then we bypass that subsystem. Calling text_formatter.format() is roughly equivalent to calling text() directly, because it's going to walk the same code path.\n> \n> What I'm suggesting is something like this:\n> \n> formatted_text([{ :text => link_name, :link => link_url }], options) \n> You can update the request if you'd like, but it's a trivial change so I don't mind making it when I pull down the code to test it.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n. @sandal My bad for not doing it as you said. The latest commit should be good to go now\n. @sandal alright, that's good. You're welcome! :smiley:\n. Alright my bad! I didn't really specify what is this for.\n\nI'll try to get your idea working as soon as I can, I don't think it should be too hard.\n\n> El 10/9/2014, a las 15:24, Gregory Brown notifications@github.com escribi\u00f3:\n> \n> Closed #764.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n. Alright, @sandal. Just reverted it with your suggestion :smiley:. Feel free to merge it!\n. @sandal: sure, let me make the change and I'll commit :)\n. Oh, haha I was in a hurry and didn't properly read the docs. I won't be home until a few hours from now, but I can do this change then, but I don't mind if you do it now. \n\n> El 8/9/2014, a las 18:52, Gregory Brown notifications@github.com escribi\u00f3:\n> \n> Almost there, but not quite. The idea is to avoid unnecessary use of HTML tags, because then we bypass that subsystem. Calling text_formatter.format() is roughly equivalent to calling text() directly, because it's going to walk the same code path.\n> \n> What I'm suggesting is something like this:\n> \n> formatted_text([{ :text => link_name, :link => link_url }], options) \n> You can update the request if you'd like, but it's a trivial change so I don't mind making it when I pull down the code to test it.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n. @sandal My bad for not doing it as you said. The latest commit should be good to go now\n. @sandal alright, that's good. You're welcome! :smiley:\n. Alright my bad! I didn't really specify what is this for.\n\nI'll try to get your idea working as soon as I can, I don't think it should be too hard.\n\n> El 10/9/2014, a las 15:24, Gregory Brown notifications@github.com escribi\u00f3:\n> \n> Closed #764.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n. ",
    "ruanwz": "Thanks! I just tried every rake tasks, and think maybe rake stats is still useful for someone to get an overview of the size of the codebase :smile: \n. Thanks! I just tried every rake tasks, and think maybe rake stats is still useful for someone to get an overview of the size of the codebase :smile: \n. ",
    "genreil": "Hi, Gregory! Thanks a lot for your prompt response.\n\nHere is what you asked. The script:\n\n#!/usr/bin/env ruby\nrequire 'prawn'\n\npdf = Prawn::Document.new\n\npdf.font 'Helvetica'  # works\npdf.text 'Hello, World!'\n\npdf.font '/home/gen/apps/DejaVuSerif.ttf'  # works\npdf.text 'Hello, World!'\n\npdf.font(\"/home/gen/apps/myriad-pro.ttf\")  # fails\npdf.text 'Hello, World!'\n\npdf.render_file('./test.pdf')\n\nThe error:\n\ngen:~/apps  20:22:36\n\ud83d\ude09 \u27a4 ./test.rb\n/home/gen/.rvm/gems/ruby-2.1.2/gems/ttfunk-1.2.2/lib/ttfunk/table/glyf.rb:30:in `for': undefined method`key?' for nil:NilClass (NoMethodError)\n    from /home/gen/.rvm/gems/ruby-2.1.2/gems/ttfunk-1.2.2/lib/ttfunk/subset/base.rb:132:in `block in collect_glyphs'\n    from /home/gen/.rvm/gems/ruby-2.1.2/gems/ttfunk-1.2.2/lib/ttfunk/subset/base.rb:132:in`each'\n    from /home/gen/.rvm/gems/ruby-2.1.2/gems/ttfunk-1.2.2/lib/ttfunk/subset/base.rb:132:in `inject'\n    from /home/gen/.rvm/gems/ruby-2.1.2/gems/ttfunk-1.2.2/lib/ttfunk/subset/base.rb:132:in`collect_glyphs'\n    from /home/gen/.rvm/gems/ruby-2.1.2/gems/ttfunk-1.2.2/lib/ttfunk/subset/base.rb:32:in `encode'\n    from /home/gen/.rvm/gems/ruby-2.1.2/gems/prawn-1.2.1/lib/prawn/font/ttf.rb:254:in`embed'\n    from /home/gen/.rvm/gems/ruby-2.1.2/gems/prawn-1.2.1/lib/prawn/font/ttf.rb:248:in `block in register'\n    from /home/gen/.rvm/gems/ruby-2.1.2/gems/pdf-core-0.2.5/lib/pdf/core/document_state.rb:60:in`call'\n    from /home/gen/.rvm/gems/ruby-2.1.2/gems/pdf-core-0.2.5/lib/pdf/core/document_state.rb:60:in `block in before_render_actions'\n    from /home/gen/.rvm/gems/ruby-2.1.2/gems/pdf-core-0.2.5/lib/pdf/core/document_state.rb:60:in`each'\n    from /home/gen/.rvm/gems/ruby-2.1.2/gems/pdf-core-0.2.5/lib/pdf/core/document_state.rb:60:in `before_render_actions'\n    from /home/gen/.rvm/gems/ruby-2.1.2/gems/prawn-1.2.1/lib/prawn/document/internals.rb:129:in`render_header'\n    from /home/gen/.rvm/gems/ruby-2.1.2/gems/prawn-1.2.1/lib/prawn/document.rb:358:in `render'\n    from /home/gen/.rvm/gems/ruby-2.1.2/gems/prawn-1.2.1/lib/prawn/document.rb:376:in`block in render_file'\n    from /home/gen/.rvm/gems/ruby-2.1.2/gems/prawn-1.2.1/lib/prawn/document.rb:376:in `open'\n    from /home/gen/.rvm/gems/ruby-2.1.2/gems/prawn-1.2.1/lib/prawn/document.rb:376:in`render_file'\n    from ./test.rb:15:in `<main>'\n\nHere is the screenshot when running without the failing lines: \n\n![selection_013](https://cloud.githubusercontent.com/assets/2700053/4264824/ea43b412-3c34-11e4-97f2-b039e3ea5617.png)\n. Hi, Gregory, I am not sure whether it is freely available (I think it is some Adobe font), but I got it from here: http://greatersharpstown.com/fonts/fonts/\nI was using the 'Regular' one, but I guess any will do.\nThanks again for looking into this.\n. Sorry for not mentioning it. I do use the ttf (MyriadPro.ttf) file. I do know that prawn does not work with OTF format, so I had to find that link in order to get the fonts in TTF format.\n. @sandal: I see what you are saying. I did not use it for anything else, and unfortunately I have a little experience with fonts in order to determine whether it is corrupted or not, but I was able to install it through Font Viewer on Ubuntu and use it in LibreOffice.\n. Perfect! Your advice will do. I am sure you are correct. I will try it tomorrow and update you on that. I have the OTF for this font.\n\nThanks a lot for looking into this.\n. @sandal: Hi, Gregory, you were 100% right. I tried the website you gave me and was able to generate ttf out of my original otf file. All works smooth now. Thank a lot for you time and advise. I guess you can mark the issue as resolved now. Too bad that I could not find an answer to the font issue by googling and bothered you with those small things. Thanks again!\n. @mojavelinux: Hi, Dan, thank you for sharing. I might indeed have to dwell into details over time.\n. Hi, Gregory! Thanks a lot for your prompt response.\n\nHere is what you asked. The script:\n\n#!/usr/bin/env ruby\nrequire 'prawn'\n\npdf = Prawn::Document.new\n\npdf.font 'Helvetica'  # works\npdf.text 'Hello, World!'\n\npdf.font '/home/gen/apps/DejaVuSerif.ttf'  # works\npdf.text 'Hello, World!'\n\npdf.font(\"/home/gen/apps/myriad-pro.ttf\")  # fails\npdf.text 'Hello, World!'\n\npdf.render_file('./test.pdf')\n\nThe error:\n\ngen:~/apps  20:22:36\n\ud83d\ude09 \u27a4 ./test.rb\n/home/gen/.rvm/gems/ruby-2.1.2/gems/ttfunk-1.2.2/lib/ttfunk/table/glyf.rb:30:in `for': undefined method`key?' for nil:NilClass (NoMethodError)\n    from /home/gen/.rvm/gems/ruby-2.1.2/gems/ttfunk-1.2.2/lib/ttfunk/subset/base.rb:132:in `block in collect_glyphs'\n    from /home/gen/.rvm/gems/ruby-2.1.2/gems/ttfunk-1.2.2/lib/ttfunk/subset/base.rb:132:in`each'\n    from /home/gen/.rvm/gems/ruby-2.1.2/gems/ttfunk-1.2.2/lib/ttfunk/subset/base.rb:132:in `inject'\n    from /home/gen/.rvm/gems/ruby-2.1.2/gems/ttfunk-1.2.2/lib/ttfunk/subset/base.rb:132:in`collect_glyphs'\n    from /home/gen/.rvm/gems/ruby-2.1.2/gems/ttfunk-1.2.2/lib/ttfunk/subset/base.rb:32:in `encode'\n    from /home/gen/.rvm/gems/ruby-2.1.2/gems/prawn-1.2.1/lib/prawn/font/ttf.rb:254:in`embed'\n    from /home/gen/.rvm/gems/ruby-2.1.2/gems/prawn-1.2.1/lib/prawn/font/ttf.rb:248:in `block in register'\n    from /home/gen/.rvm/gems/ruby-2.1.2/gems/pdf-core-0.2.5/lib/pdf/core/document_state.rb:60:in`call'\n    from /home/gen/.rvm/gems/ruby-2.1.2/gems/pdf-core-0.2.5/lib/pdf/core/document_state.rb:60:in `block in before_render_actions'\n    from /home/gen/.rvm/gems/ruby-2.1.2/gems/pdf-core-0.2.5/lib/pdf/core/document_state.rb:60:in`each'\n    from /home/gen/.rvm/gems/ruby-2.1.2/gems/pdf-core-0.2.5/lib/pdf/core/document_state.rb:60:in `before_render_actions'\n    from /home/gen/.rvm/gems/ruby-2.1.2/gems/prawn-1.2.1/lib/prawn/document/internals.rb:129:in`render_header'\n    from /home/gen/.rvm/gems/ruby-2.1.2/gems/prawn-1.2.1/lib/prawn/document.rb:358:in `render'\n    from /home/gen/.rvm/gems/ruby-2.1.2/gems/prawn-1.2.1/lib/prawn/document.rb:376:in`block in render_file'\n    from /home/gen/.rvm/gems/ruby-2.1.2/gems/prawn-1.2.1/lib/prawn/document.rb:376:in `open'\n    from /home/gen/.rvm/gems/ruby-2.1.2/gems/prawn-1.2.1/lib/prawn/document.rb:376:in`render_file'\n    from ./test.rb:15:in `<main>'\n\nHere is the screenshot when running without the failing lines: \n\n![selection_013](https://cloud.githubusercontent.com/assets/2700053/4264824/ea43b412-3c34-11e4-97f2-b039e3ea5617.png)\n. Hi, Gregory, I am not sure whether it is freely available (I think it is some Adobe font), but I got it from here: http://greatersharpstown.com/fonts/fonts/\nI was using the 'Regular' one, but I guess any will do.\nThanks again for looking into this.\n. Sorry for not mentioning it. I do use the ttf (MyriadPro.ttf) file. I do know that prawn does not work with OTF format, so I had to find that link in order to get the fonts in TTF format.\n. @sandal: I see what you are saying. I did not use it for anything else, and unfortunately I have a little experience with fonts in order to determine whether it is corrupted or not, but I was able to install it through Font Viewer on Ubuntu and use it in LibreOffice.\n. Perfect! Your advice will do. I am sure you are correct. I will try it tomorrow and update you on that. I have the OTF for this font.\n\nThanks a lot for looking into this.\n. @sandal: Hi, Gregory, you were 100% right. I tried the website you gave me and was able to generate ttf out of my original otf file. All works smooth now. Thank a lot for you time and advise. I guess you can mark the issue as resolved now. Too bad that I could not find an answer to the font issue by googling and bothered you with those small things. Thanks again!\n. @mojavelinux: Hi, Dan, thank you for sharing. I might indeed have to dwell into details over time.\n. ",
    "ccanalesb": "I have the same issues with another font, HelveticaNeueLTStd-Bd 97 black condensed, but with HelveticaNeueLTStd-Bd i dont have any problem\n. I have the same issues with another font, HelveticaNeueLTStd-Bd 97 black condensed, but with HelveticaNeueLTStd-Bd i dont have any problem\n. ",
    "netzc": "I had the same problem as OP and used the [subsetting tool](https://everythingfonts.com/subsetter) from the site that @practicingruby mentioned to create a subset of the (corrupt?) ttf file I wanted to use with prawn. \nI can use the subset ttf file without an problems.\nAn on workaround for me, until I get around to diving into how fonts really work, like @mojavelinux suggests.\n. I had the same problem as OP and used the [subsetting tool](https://everythingfonts.com/subsetter) from the site that @practicingruby mentioned to create a subset of the (corrupt?) ttf file I wanted to use with prawn. \nI can use the subset ttf file without an problems.\nAn on workaround for me, until I get around to diving into how fonts really work, like @mojavelinux suggests.\n. ",
    "Mario1988": "Yes, this is correct.\nI am not sure how to fix the bug. \nShould have a soft hyphen a width unequal to zero or not?\nIf not the fix should be more or less easy.\n. Yes, this is correct.\nI am not sure how to fix the bug. \nShould have a soft hyphen a width unequal to zero or not?\nIf not the fix should be more or less easy.\n. ",
    "turpana": "I found it helpful to have the link to the source for this method in the maual. I think it should be mentioned in the manual, since it's presumably where newcomers learn/discover the API.\n. I'm just saying it helps make the manual more approachable, not that it needs to be expanded upon. Maybe it's not what the manual needs though.\n. @sandal, cool :+1:. And thanks for making prawn!\n. I found it helpful to have the link to the source for this method in the maual. I think it should be mentioned in the manual, since it's presumably where newcomers learn/discover the API.\n. I'm just saying it helps make the manual more approachable, not that it needs to be expanded upon. Maybe it's not what the manual needs though.\n. @sandal, cool :+1:. And thanks for making prawn!\n. ",
    "nTraum": "Just stumbled upon this and wanted to say thanks for writing this down, I had issues identifying what exactly the problem is with some characters not being rendered correctly and your little paragraph really helped clearing it up. Rock on. :metal: \n. Just stumbled upon this and wanted to say thanks for writing this down, I had issues identifying what exactly the problem is with some characters not being rendered correctly and your little paragraph really helped clearing it up. Rock on. :metal: \n. ",
    "andreasbeer1981": "+1 for the most radical approach :)\n. +1 for the most radical approach :)\n. ",
    "mfly": "@sandal Thanks for instant reaction :)\nThrowing exception is a good start :+1:. I will definitely give prawn-gmagick a try! Maybe in a week or two I will try to implement the missing feature in prawn's code.\n. Our system uses prawn for PNG to PDF conversion. Images are provided by\nusers and we have little control over what color mode they use. Yet our\ngoal is to support as many formats as possible. Currently I use a simple\nworkaround using convert utility.\nOn Dec 19, 2015 10:12 AM, \"Alexander Mankuta\" notifications@github.com\nwrote:\n\n> @mfly https://github.com/mfly @edborden https://github.com/edborden\n> @Siyfion https://github.com/Siyfion @danielgrippi\n> https://github.com/danielgrippi @sublimecoder\n> https://github.com/sublimecoder @kriztynna\n> https://github.com/kriztynna Sorry for addressing so many people but\n> I'm curious what is your use case?\n> \n> I didn't even think that palette transparency in PNG is used so widely. I\n> though it's just one of those rare edge cases that one or two users stumble\n> upon but apparently many people use those palette PNGs all the time. So\n> could you please share your use case and why you use palette transparency\n> instead of, say, 8-bit alpha channel?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/prawnpdf/prawn/issues/783#issuecomment-165962909.\n. @sandal Thanks for instant reaction :)\nThrowing exception is a good start :+1:. I will definitely give prawn-gmagick a try! Maybe in a week or two I will try to implement the missing feature in prawn's code.\n. Our system uses prawn for PNG to PDF conversion. Images are provided by\nusers and we have little control over what color mode they use. Yet our\ngoal is to support as many formats as possible. Currently I use a simple\nworkaround using convert utility.\nOn Dec 19, 2015 10:12 AM, \"Alexander Mankuta\" notifications@github.com\nwrote:\n\n> @mfly https://github.com/mfly @edborden https://github.com/edborden\n> @Siyfion https://github.com/Siyfion @danielgrippi\n> https://github.com/danielgrippi @sublimecoder\n> https://github.com/sublimecoder @kriztynna\n> https://github.com/kriztynna Sorry for addressing so many people but\n> I'm curious what is your use case?\n> \n> I didn't even think that palette transparency in PNG is used so widely. I\n> though it's just one of those rare edge cases that one or two users stumble\n> upon but apparently many people use those palette PNGs all the time. So\n> could you please share your use case and why you use palette transparency\n> instead of, say, 8-bit alpha channel?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/prawnpdf/prawn/issues/783#issuecomment-165962909.\n. ",
    "edborden": "@mfly What does the `convert` method refer to in your workaround? It doesn't look like it's part of Prawn, or I can't find mention of it.\n. Well, I compensated for the trailing space being stripped out in my width calculation, then put my text into a bounding box with that width, that way on the page the trailing space is there in practice simply as distance between characters.  But it's not ideal for my application, I'd rather have a real width calculation and retain the trailing space.\n\nRegardless, if this was your intention, this issue can at least serve as some additional documentation.\n. @mfly What does the `convert` method refer to in your workaround? It doesn't look like it's part of Prawn, or I can't find mention of it.\n. Well, I compensated for the trailing space being stripped out in my width calculation, then put my text into a bounding box with that width, that way on the page the trailing space is there in practice simply as distance between characters.  But it's not ideal for my application, I'd rather have a real width calculation and retain the trailing space.\n\nRegardless, if this was your intention, this issue can at least serve as some additional documentation.\n. ",
    "Fryie": "While I understand the \"no external runtime dependency\" stance, it makes little sense IMHO to provide a broken image handling implementation instead. Architecturally it would be more sound to either remove the default PNG image handling or to at least raise a warning when using it.\n. Maybe a section in the README explaining that the image engine can be replaced would be helpful too. :)\n. While I understand the \"no external runtime dependency\" stance, it makes little sense IMHO to provide a broken image handling implementation instead. Architecturally it would be more sound to either remove the default PNG image handling or to at least raise a warning when using it.\n. Maybe a section in the README explaining that the image engine can be replaced would be helpful too. :)\n. ",
    "sublimecoder": "Looks like there is a fix for this. Can we get it merged in?\n. We use it in a similar fashion to @mfly. We create PDFs that contain user input and the pngs are not always under our control. The interesting thing is prawn 1.3.0 seems to be able to handle most of these pngs with out issue so we're just using 1.3 until the next release. \n. @cheba hmm interesting so did it just flatten it or did it manipulate the image in another manner to strip the transparency? \n. This would fix and issue I have. When can this be merged?\n. Looks like there is a fix for this. Can we get it merged in?\n. We use it in a similar fashion to @mfly. We create PDFs that contain user input and the pngs are not always under our control. The interesting thing is prawn 1.3.0 seems to be able to handle most of these pngs with out issue so we're just using 1.3 until the next release. \n. @cheba hmm interesting so did it just flatten it or did it manipulate the image in another manner to strip the transparency? \n. This would fix and issue I have. When can this be merged?\n. ",
    "kriztynna": "Similar use case here, working with 3rd party PNGs that happen to use\npalette transparency. @cheba's fix handles the issue perfectly, and was\nalready available by the time I ran into this issue, so I haven't had to\nimplement any workarounds (other than gem installing from the repo rather\nthan rubygems.org).\n\nOn Sat, Dec 19, 2015 at 4:12 AM Alexander Mankuta notifications@github.com\nwrote:\n\n> @mfly https://github.com/mfly @edborden https://github.com/edborden\n> @Siyfion https://github.com/Siyfion @danielgrippi\n> https://github.com/danielgrippi @sublimecoder\n> https://github.com/sublimecoder @kriztynna\n> https://github.com/kriztynna Sorry for addressing so many people but\n> I'm curious what is your use case?\n> \n> I didn't even think that palette transparency in PNG is used so widely. I\n> though it's just one of those rare edge cases that one or two users stumble\n> upon but apparently many people use those palette PNGs all the time. So\n> could you please share your use case and why you use palette transparency\n> instead of, say, 8-bit alpha channel?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/prawnpdf/prawn/issues/783#issuecomment-165962909.\n. @cheba Thanks for the transparency fix and for this one too. @packetmonkey When do you expect these changes will be pushed to rubygems.org? \n. @packetmonkey Thanks for the update! Will keep an eye out for the release. \n. Resolved with #938. \n. @cheba Yes same issue, different PR.\n. Resolved by #938 \n. Thanks @cheba for your prompt and thoughtful response. I've amended the PR per your feedback, almost exactly in the way you suggested. Please check it out when you have a moment. \n. Thanks @cheba. I took a closer look at the output of the amended commit, and actually changed it back to something more like the original pull request. While your concerns about performance and such are justified, I think you'll find the difference in output is well justified. For indexed pngs without a transparency palette, we're still going to need to `generate_alpha_channel`, otherwise the output will be garbled, as the attached example files demonstrate.\n\n[Type 3 with @transparent.any? method.pdf](https://github.com/prawnpdf/prawn/files/90671/Type.3.with.transparent.any.method.pdf)\n[Type 3 with current PR.pdf](https://github.com/prawnpdf/prawn/files/90672/Type.3.with.current.PR.pdf)\n\nI will say this about the original PR: it didn't handle type 3 pngs with transparency correctly (made them opaque, as you might have surmised). This version no longer does; I've manually checked the output of the acceptance specs for each kind of file, and it's the best solution I've been able to come up with that handles both Type 3's (with and without transparency) correctly.\n. Ok, realize I've gone back and forth on this a couple of times, but it's been a learning process. Think I finally understand what you meant about targeting `alpha_channel?` to fix this bug, and amended the commit accordingly.\n\nThe attached pdf shows how the current PR would print indexed pngs. It _now_ matches what prawn would have done before the transparency fix was implemented (the last version of my PR was close, but no cigar). And no unnecessary mask generation to boot.\n\n[Type 3 without generating alpha channel.pdf](https://github.com/prawnpdf/prawn/files/91186/Type.3.without.generating.alpha.channel.pdf)\n\nHope that does the trick.\n. Thanks @packetmonkey, I wasn't expecting that! :dancer: \nAnd thank you to @cheba for reviewing the PR! \n. Resolved #937 \n. Similar use case here, working with 3rd party PNGs that happen to use\npalette transparency. @cheba's fix handles the issue perfectly, and was\nalready available by the time I ran into this issue, so I haven't had to\nimplement any workarounds (other than gem installing from the repo rather\nthan rubygems.org).\n\nOn Sat, Dec 19, 2015 at 4:12 AM Alexander Mankuta notifications@github.com\nwrote:\n\n> @mfly https://github.com/mfly @edborden https://github.com/edborden\n> @Siyfion https://github.com/Siyfion @danielgrippi\n> https://github.com/danielgrippi @sublimecoder\n> https://github.com/sublimecoder @kriztynna\n> https://github.com/kriztynna Sorry for addressing so many people but\n> I'm curious what is your use case?\n> \n> I didn't even think that palette transparency in PNG is used so widely. I\n> though it's just one of those rare edge cases that one or two users stumble\n> upon but apparently many people use those palette PNGs all the time. So\n> could you please share your use case and why you use palette transparency\n> instead of, say, 8-bit alpha channel?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/prawnpdf/prawn/issues/783#issuecomment-165962909.\n. @cheba Thanks for the transparency fix and for this one too. @packetmonkey When do you expect these changes will be pushed to rubygems.org? \n. @packetmonkey Thanks for the update! Will keep an eye out for the release. \n. Resolved with #938. \n. @cheba Yes same issue, different PR.\n. Resolved by #938 \n. Thanks @cheba for your prompt and thoughtful response. I've amended the PR per your feedback, almost exactly in the way you suggested. Please check it out when you have a moment. \n. Thanks @cheba. I took a closer look at the output of the amended commit, and actually changed it back to something more like the original pull request. While your concerns about performance and such are justified, I think you'll find the difference in output is well justified. For indexed pngs without a transparency palette, we're still going to need to `generate_alpha_channel`, otherwise the output will be garbled, as the attached example files demonstrate.\n\n[Type 3 with @transparent.any? method.pdf](https://github.com/prawnpdf/prawn/files/90671/Type.3.with.transparent.any.method.pdf)\n[Type 3 with current PR.pdf](https://github.com/prawnpdf/prawn/files/90672/Type.3.with.current.PR.pdf)\n\nI will say this about the original PR: it didn't handle type 3 pngs with transparency correctly (made them opaque, as you might have surmised). This version no longer does; I've manually checked the output of the acceptance specs for each kind of file, and it's the best solution I've been able to come up with that handles both Type 3's (with and without transparency) correctly.\n. Ok, realize I've gone back and forth on this a couple of times, but it's been a learning process. Think I finally understand what you meant about targeting `alpha_channel?` to fix this bug, and amended the commit accordingly.\n\nThe attached pdf shows how the current PR would print indexed pngs. It _now_ matches what prawn would have done before the transparency fix was implemented (the last version of my PR was close, but no cigar). And no unnecessary mask generation to boot.\n\n[Type 3 without generating alpha channel.pdf](https://github.com/prawnpdf/prawn/files/91186/Type.3.without.generating.alpha.channel.pdf)\n\nHope that does the trick.\n. Thanks @packetmonkey, I wasn't expecting that! :dancer: \nAnd thank you to @cheba for reviewing the PR! \n. Resolved #937 \n. ",
    "isaiah": "> a68eef6 contains a scary but probably good change: It raises an error if non-Windows-1252 glyphs are attempted to be rendered in AFM fonts. The behavior of existing versions of Prawn is to replace with an underscore, which is pretty much never what users will want, and masks bugs.\n\n@practicingruby I think this change makes the fallback_fonts ignored.\nI have a document that contains Cyrillic, CJK, Arabic, Greek or anything, so I cannot really tell the document which font to use, previously I depends on the fallback_fonts feature, the UTF-8 glyphs are rendered correctly, but it's broken since 2.0.0\n. @practicingruby How can I do that? Currently I monkey patched the Prawn::Document#font_families method and #fallback_fonts method, to add my own TTF fonts. Should I disable the original fonts completely?\n. > a68eef6 contains a scary but probably good change: It raises an error if non-Windows-1252 glyphs are attempted to be rendered in AFM fonts. The behavior of existing versions of Prawn is to replace with an underscore, which is pretty much never what users will want, and masks bugs.\n\n@practicingruby I think this change makes the fallback_fonts ignored.\nI have a document that contains Cyrillic, CJK, Arabic, Greek or anything, so I cannot really tell the document which font to use, previously I depends on the fallback_fonts feature, the UTF-8 glyphs are rendered correctly, but it's broken since 2.0.0\n. @practicingruby How can I do that? Currently I monkey patched the Prawn::Document#font_families method and #fallback_fonts method, to add my own TTF fonts. Should I disable the original fonts completely?\n. ",
    "slabounty": "Closing for now due to 1.9.3 issues.\n. OK ... fixed issues with stabby lambda and spaces ... which are apparently different between 1.9.3 and 2.0.0.\n. I'll take a look. My thought for `is_str` and `is_ary` was that these would (probably) be classes derived from String and Array respectively and should probably work as if you'd passed one of them in, but, I'm glad to remove that. \n\nIt looks like you're recommending we go ahead an implement a Color class here (I assume that's what the `Prawn::Color::RGB.new(color)`, so I'll go ahead and take a look at adding one.\n. Fair call on not encouraging bad behavior.\n\nOn question though ... right now (and one thing I kept in my implementation) was that if you did a \n     `pdf.fill_color '00ff00`\n\nfollowed by a ...\n\n```\n pdf.fill_color\n```\n\nyou get back a string. Same with my example MyColor or an array. \nDo we need to keep this or would returning something of a different type be acceptable? In other words, are breaking changes OK?\n. @sandal  - Simplifies things a bit. Seems like this is pretty doable. I'll do some work on it and update the pull request. Thanks for the direction.\n. @sandal  - OK so the renderer PDF::Core::Renderer in pdf-core initializes the fill and stroke colors with \"000000\" (it doesn't look like it actually uses these anywhere, just stores them). Did we want to try to push the new classes down to the pdf-core or handle these initializers a different way. Should we always store the fill/stroke colors in the graphics_state as strings or arrays? I'm not coming up with a clean way to handle the core. \n. @sandal  - OK check this out. It's not perfect (quite possibly not even good), but I think it's the direction you'd wanted to head in. Right now, it's kind of at the same place as when I started (you can't pass in your own classes and have them work), but that'll be easy to address if we get the other pieces right.\n. Closing for now due to 1.9.3 issues.\n. OK ... fixed issues with stabby lambda and spaces ... which are apparently different between 1.9.3 and 2.0.0.\n. I'll take a look. My thought for `is_str` and `is_ary` was that these would (probably) be classes derived from String and Array respectively and should probably work as if you'd passed one of them in, but, I'm glad to remove that. \n\nIt looks like you're recommending we go ahead an implement a Color class here (I assume that's what the `Prawn::Color::RGB.new(color)`, so I'll go ahead and take a look at adding one.\n. Fair call on not encouraging bad behavior.\n\nOn question though ... right now (and one thing I kept in my implementation) was that if you did a \n     `pdf.fill_color '00ff00`\n\nfollowed by a ...\n\n```\n pdf.fill_color\n```\n\nyou get back a string. Same with my example MyColor or an array. \nDo we need to keep this or would returning something of a different type be acceptable? In other words, are breaking changes OK?\n. @sandal  - Simplifies things a bit. Seems like this is pretty doable. I'll do some work on it and update the pull request. Thanks for the direction.\n. @sandal  - OK so the renderer PDF::Core::Renderer in pdf-core initializes the fill and stroke colors with \"000000\" (it doesn't look like it actually uses these anywhere, just stores them). Did we want to try to push the new classes down to the pdf-core or handle these initializers a different way. Should we always store the fill/stroke colors in the graphics_state as strings or arrays? I'm not coming up with a clean way to handle the core. \n. @sandal  - OK check this out. It's not perfect (quite possibly not even good), but I think it's the direction you'd wanted to head in. Right now, it's kind of at the same place as when I started (you can't pass in your own classes and have them work), but that'll be easy to address if we get the other pieces right.\n. ",
    "BrentWheeldon": "Thanks for the quick reply, @sandal!\n\nWe're basically abusing that private API to keep track of which \"section\" we're in inside of a report to render that in a header. This is some inherited code that inherited so I've not dig in too deep. I'll see if we can do this in a supported way.\n. Thanks for the quick reply, @sandal!\n\nWe're basically abusing that private API to keep track of which \"section\" we're in inside of a report to render that in a header. This is some inherited code that inherited so I've not dig in too deep. I'll see if we can do this in a supported way.\n. ",
    "mikesax": "We've also been using on_page_create to prepare a page and create background graphics. It would be nice to either have on_page_create back, or to have a feature that lets repeaters optionally run _before_ the main content is rendered, so the z-order is correct. For example:\n\n``` ruby\npdf.repeat(:all, before: true) do\n   ...\nend\n```\n. We've also been using on_page_create to prepare a page and create background graphics. It would be nice to either have on_page_create back, or to have a feature that lets repeaters optionally run _before_ the main content is rendered, so the z-order is correct. For example:\n\n``` ruby\npdf.repeat(:all, before: true) do\n   ...\nend\n```\n. ",
    "bousquet": ":+1: Thanks.  Used this today in combination with prawn-svg for crisp background image underneath flowing text.\n. :+1: Thanks.  Used this today in combination with prawn-svg for crisp background image underneath flowing text.\n. ",
    "Frank004": "I found a work around. \nCreate the helper inside the prawn.rb and works.\nSample for others\n\n```\n\n  def table_content\n   move_down 30\n    table turnover_rows,:position => :center do\n      row(0).font_style = :bold\n      self.header = true\n      self.row_colors = ['DDDDDD', 'FFFFFF']\n      cells.padding = 8\n    end\n  end\n\n  def turnover_rows\n    [['Fecha','Empleados','Causa']] +\n      @turnovers.map do |turnover|\n    [turnover.date.to_s,turnover.employee.full_info,turnover_type(turnover.turnover_type)]   \n    end\n  end\n\ndef turnover_type(boolean, options={})\n    options[:true_text]  ||= 'Renuncia'\n    options[:false_text] ||= 'Despido'\n    if boolean == true\n      options[:true_text]\n    else\n      options[:false_text]\n    end\n  end \n```\n. ![screen shot 2014-12-29 at 2 32 28 pm](https://cloud.githubusercontent.com/assets/7242689/5571426/98d1b81e-8f67-11e4-9f17-9a9e4e39d565.png)\nI use this for now. Dnt know if is the right way \n\n```\n  bounding_box([0,cursor],:width => 500)  do\n      pad(5){ \n        indent(5){\n        move_down 2\n        text \"#{@incident.comment}\" * 9\n        }\n      }\n        stroke_bounds\n    end\n```\n. Thank you I will. I found a work around. \nCreate the helper inside the prawn.rb and works.\nSample for others\n\n```\n\n  def table_content\n   move_down 30\n    table turnover_rows,:position => :center do\n      row(0).font_style = :bold\n      self.header = true\n      self.row_colors = ['DDDDDD', 'FFFFFF']\n      cells.padding = 8\n    end\n  end\n\n  def turnover_rows\n    [['Fecha','Empleados','Causa']] +\n      @turnovers.map do |turnover|\n    [turnover.date.to_s,turnover.employee.full_info,turnover_type(turnover.turnover_type)]   \n    end\n  end\n\ndef turnover_type(boolean, options={})\n    options[:true_text]  ||= 'Renuncia'\n    options[:false_text] ||= 'Despido'\n    if boolean == true\n      options[:true_text]\n    else\n      options[:false_text]\n    end\n  end \n```\n. ![screen shot 2014-12-29 at 2 32 28 pm](https://cloud.githubusercontent.com/assets/7242689/5571426/98d1b81e-8f67-11e4-9f17-9a9e4e39d565.png)\nI use this for now. Dnt know if is the right way \n\n```\n  bounding_box([0,cursor],:width => 500)  do\n      pad(5){ \n        indent(5){\n        move_down 2\n        text \"#{@incident.comment}\" * 9\n        }\n      }\n        stroke_bounds\n    end\n```\n. Thank you I will. ",
    "mkdynamic": "Total brain fail on my part. Sorry :)\n\n## \n\nFor background, I ran into a problem with code like the following. When calling `#draw_title` was complaining with `NoMethodError`. But clearly this was something else, and nothing to do with the PR I submitted. Derp.\n\n``` ruby\nclass Widget\n  includes Prawn::View\n\n  def add_header\n    draw_title \"Foo\"\n    draw_subtitle \"Bar\"\n  end\n\n  private\n\n  def draw_title(text)\n    text_box text, at: ...\n  end\n\n  def draw_subtitle(text)\n    text_box text, size: 10, at: ...\n  end\nend\n```\n. Yes, it might be a good to idea to implement `#respond_to?`. I beleive that can lead to confusing errors/stack traces: http://robots.thoughtbot.com/always-define-respond-to-missing-when-overriding\n. Total brain fail on my part. Sorry :)\n\n## \n\nFor background, I ran into a problem with code like the following. When calling `#draw_title` was complaining with `NoMethodError`. But clearly this was something else, and nothing to do with the PR I submitted. Derp.\n\n``` ruby\nclass Widget\n  includes Prawn::View\n\n  def add_header\n    draw_title \"Foo\"\n    draw_subtitle \"Bar\"\n  end\n\n  private\n\n  def draw_title(text)\n    text_box text, at: ...\n  end\n\n  def draw_subtitle(text)\n    text_box text, size: 10, at: ...\n  end\nend\n```\n. Yes, it might be a good to idea to implement `#respond_to?`. I beleive that can lead to confusing errors/stack traces: http://robots.thoughtbot.com/always-define-respond-to-missing-when-overriding\n. ",
    "OpakAlex": "http://monosnap.com/image/LGjn9v2prLf8WAlpTzmUyxcMBn6k0H\n. @sandal hi!\n\nwhy i see in pdf '\\n' ?\n\n```\n bounding_box [100, 50], width: 100, height:  80 do\n     text 'one two \\n one two \\n hello'\n     stroke_bounds\n end\n```\n. @sandal, same result, i try(\nIt's very strange(\n. @sandal, yes. \nWorks when use \"\" instead of ''.\n\nThanks!\n. http://monosnap.com/image/LGjn9v2prLf8WAlpTzmUyxcMBn6k0H\n. @sandal hi!\n\nwhy i see in pdf '\\n' ?\n\n```\n bounding_box [100, 50], width: 100, height:  80 do\n     text 'one two \\n one two \\n hello'\n     stroke_bounds\n end\n```\n. @sandal, same result, i try(\nIt's very strange(\n. @sandal, yes. \nWorks when use \"\" instead of ''.\n\nThanks!\n. ",
    "mdarii": "But using last version have any option to add text to existing document?\n. But using last version have any option to add text to existing document?\n. ",
    "matthewford": "@sandal I only created the gem last night, but yes we have a requirement to make the pdfs we generate PDF/A compliant so happy to help get to the bottom of this.\n. @sandal I only created the gem last night, but yes we have a requirement to make the pdfs we generate PDF/A compliant so happy to help get to the bottom of this.\n. ",
    "ernie": "Awesome! Glad I could help out!\n. Thanks! And sorry, didn't realize it was safe to rely on font.family being available based on the previous code! \n. @practicingruby Also, yep, this looks to do the trick. Thanks again!\n. Awesome! Glad I could help out!\n. Thanks! And sorry, didn't realize it was safe to rely on font.family being available based on the previous code! \n. @practicingruby Also, yep, this looks to do the trick. Thanks again!\n. ",
    "HudsonAfonso": "thank you for your help\n. thank you for your help\n. ",
    "adhsharad": "Hi,\n\nWe can reproduce the situation by using fallback_fonts.rb from manual.\n\n``` ruby\nfile = \"#{Prawn::DATADIR}/fonts/siddhanta.ttf\"\nfont_families[\"Siddhanta\"] = {\n :normal => { :file => file, :font => \"Siddhanta\" }\n}\nfile = \"#{Prawn::DATADIR}/fonts/Panic+Sans.dfont\"\nfont_families[\"Panic Sans\"] = {\n :normal => { :file => file, :font => \"PanicSans\" },\n}\nfont(\"Panic Sans\") do\n text(\"When fallback fonts are included, each glyph will be rendered \" +\n \"using the first font that includes the glyph, starting with the \" +\n \"current font and then moving through the fallback fonts from left \" +\n \"to right.\" +\n \"\\n\\n\" +\n \"hello \u0192 \u0939\u0947\u0932\u094d\u0932\u094b\\n \u0926\u0930\u094d\u0936\u0928 \u0192 goodbye\",\n :fallback_fonts => [\"Times-Roman\", \"Siddhanta\"])\nend\nmove_down 20\nformatted_text([ { :text => \"Fallback fonts can even override\" },\n { :text => \"fragment fonts (\u0935\u093f\u0926\u094d\u092f\u093e\u0930\u094d\u0925\u0940\u0939\u0930\u0942\u0915\u094b)\", :font => \"Times-Roman\" },\n ],\n :fallback_fonts => [\"Times-Roman\", \"Siddhanta\"])\n```\n\nYou can download the siddhanta.ttf font from here,\n\nhttp://svayambhava.blogspot.fi/p/siddhanta-devanagariunicode-open-type.html\n\nThe problem is half letters get rendered differently and incorrectly in\nprawn.\n\nBR\nSharad\n\nOn Thu, Feb 26, 2015 at 2:01 PM, Gregory Brown notifications@github.com\nwrote:\n\n> Closed #830 https://github.com/prawnpdf/prawn/issues/830.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/prawnpdf/prawn/issues/830#event-242440701.\n. Hi, \n\nIt might be a help to understand the logic behind Hindi fonts.\n\nhttp://www.microsoft.com/typography/OpenTypeDev/devanagari/intro.htm\n\nBR Sharad\n. Hi,\n\nWe can reproduce the situation by using fallback_fonts.rb from manual.\n\n``` ruby\nfile = \"#{Prawn::DATADIR}/fonts/siddhanta.ttf\"\nfont_families[\"Siddhanta\"] = {\n :normal => { :file => file, :font => \"Siddhanta\" }\n}\nfile = \"#{Prawn::DATADIR}/fonts/Panic+Sans.dfont\"\nfont_families[\"Panic Sans\"] = {\n :normal => { :file => file, :font => \"PanicSans\" },\n}\nfont(\"Panic Sans\") do\n text(\"When fallback fonts are included, each glyph will be rendered \" +\n \"using the first font that includes the glyph, starting with the \" +\n \"current font and then moving through the fallback fonts from left \" +\n \"to right.\" +\n \"\\n\\n\" +\n \"hello \u0192 \u0939\u0947\u0932\u094d\u0932\u094b\\n \u0926\u0930\u094d\u0936\u0928 \u0192 goodbye\",\n :fallback_fonts => [\"Times-Roman\", \"Siddhanta\"])\nend\nmove_down 20\nformatted_text([ { :text => \"Fallback fonts can even override\" },\n { :text => \"fragment fonts (\u0935\u093f\u0926\u094d\u092f\u093e\u0930\u094d\u0925\u0940\u0939\u0930\u0942\u0915\u094b)\", :font => \"Times-Roman\" },\n ],\n :fallback_fonts => [\"Times-Roman\", \"Siddhanta\"])\n```\n\nYou can download the siddhanta.ttf font from here,\n\nhttp://svayambhava.blogspot.fi/p/siddhanta-devanagariunicode-open-type.html\n\nThe problem is half letters get rendered differently and incorrectly in\nprawn.\n\nBR\nSharad\n\nOn Thu, Feb 26, 2015 at 2:01 PM, Gregory Brown notifications@github.com\nwrote:\n\n> Closed #830 https://github.com/prawnpdf/prawn/issues/830.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/prawnpdf/prawn/issues/830#event-242440701.\n. Hi, \n\nIt might be a help to understand the logic behind Hindi fonts.\n\nhttp://www.microsoft.com/typography/OpenTypeDev/devanagari/intro.htm\n\nBR Sharad\n. ",
    "Pomax": "Does Prawn use its own shaping engine?\n. Does Prawn use its own shaping engine?\n. ",
    "Manoj51": "@practicingruby how does prawn handle conjuncts in other languages?. Does prawn process GSUB/GPOS tables to render the font correctly?.. @practicingruby how does prawn handle conjuncts in other languages?. Does prawn process GSUB/GPOS tables to render the font correctly?.. ",
    "sarojkh": "@adhsharad Did you get it work? I too have stumbled on this problem with no apparent solution despite searching around and trying out things.. @adhsharad Did you get it work? I too have stumbled on this problem with no apparent solution despite searching around and trying out things.. ",
    "kaluznyo": "pdf = Prawn::Document.new\npdf.text \"Hello g\u00e9n\u00e9ral World\".mb_chars.upcase\npdf.render_file \"hello.pdf\"\n. pdf = Prawn::Document.new\npdf.text \"Hello g\u00e9n\u00e9ral World\".mb_chars.upcase\npdf.render_file \"hello.pdf\"\n. ",
    "rascal-hats": "Okay, glad I wasn't doing something dumb.\n\nWould you like some help updating the PDF manual? It still refers to .ttf files residing inside Prawn::DATADIR in several locations.\n. Okay, glad I wasn't doing something dumb.\n\nWould you like some help updating the PDF manual? It still refers to .ttf files residing inside Prawn::DATADIR in several locations.\n. ",
    "richardjsimkins": "None.\n\n> On 10 Apr 2015, at 15:26, Gregory Brown notifications@github.com wrote:\n> \n> What practical problem is this causing for you?\n> \n> \u2015\n> Reply to this email directly or view it on GitHub.\n. None.\n\n> On 10 Apr 2015, at 15:26, Gregory Brown notifications@github.com wrote:\n> \n> What practical problem is this causing for you?\n> \n> \u2015\n> Reply to this email directly or view it on GitHub.\n. ",
    "wpolicarpo": "Would not be the case of configuring a coverage tool to help us tracking these situations? Code Climate, perhaps?\n. Take your time @packetmonkey. Especially because I had to fix a lot of rubocop offenses after conversion, it's important to see if I didn't break something up.\n. Any suggestions on how to organize that split? Maybe I can do that.\n. Thanks, @packetmonkey. I hope to contribute more...\n. Would not be the case of configuring a coverage tool to help us tracking these situations? Code Climate, perhaps?\n. Take your time @packetmonkey. Especially because I had to fix a lot of rubocop offenses after conversion, it's important to see if I didn't break something up.\n. Any suggestions on how to organize that split? Maybe I can do that.\n. Thanks, @packetmonkey. I hope to contribute more...\n. ",
    "tomprats": "Good call! I wasn't thinking about the actual string content, I'll update both of those\n. I'm just going to close this because it's probably no longer valid\n. @packetmonkey Thanks! Should be good to go now\n. @pointlessone Thanks! Sorry I never got around to making the extra changes. Good call! I wasn't thinking about the actual string content, I'll update both of those\n. I'm just going to close this because it's probably no longer valid\n. @packetmonkey Thanks! Should be good to go now\n. @pointlessone Thanks! Sorry I never got around to making the extra changes. ",
    "volfgox": "I try to solve the problem by using various fonts. But, the problem still exists there.\nExample:\n\n```\nrequire 'prawn'\n\nPrawn::Document.generate(\"hello.pdf\") do\n    text_direction :rtl\n    font \"BNazanin.ttf\"\n    text \"\u062f\u0631\u0648\u062f \u062f\u0646\u06cc\u0627\"    # Means 'Hello World'\nend\n```\n\nYou can find 'B Nazanin' font [here](http://awebfont.ir/fonts?cat_id=1&file_id=1069&file_type=ttf).\nGenerated pdf file by this code looks like:\n\n![1](https://cloud.githubusercontent.com/assets/2599121/7516802/c9f5a3d0-f4e6-11e4-9c44-22a0518b910c.jpg)\n\nand the correct result should look like:\n\n![2](https://cloud.githubusercontent.com/assets/2599121/7516812/d98f18ee-f4e6-11e4-9625-682c2c85b36f.jpg)\n\nEvery alphabetic characters in middle east languages like Persian, Kurdish and Arabic, have 5 different shapes.  The name of these shapes are, Common, Isolated, Final, Initial and Medial. One of these shapes are selected in typesetting base on the position of the character in the word, in contrast with the Latin languages which characters have only one shape and no dependency on position in the word.\n\nI develop a gem termed [persian-bechasboon](https://github.com/volfgox/persian-bechasboon) which solve this problem by replacement of disconnected letter with its connected counterparts. The main function of this gem will be applied to the string before calling `text` function of prawn.\n\nI think a function like this should be placed in the core of the prawn to support this type of languages.\n. Pardon me. I reopen this issue.\n. When you type persian in well-known text editor like `textedit` or when you use latex to generate PDF with Persian language, OS or application do character exchanging as what I do in `persian-bechasboon`. \nYes, this gem fixed my problem. In that, just every character replaced with its appropriate counterpart in a string. So, using this gem can handle the problem.\n. In my mind this issue isn't special case. There are millions of people speak languages with right to left direction in writing. Persian, Kurdish and Arabic are three sample of such languages.\nAnother issue which I faced it is the problem of using English (or other Latin languages) text inside a Persian (or other right to left languages) text. In this problem the characters in English text are typeseted right to left. For example `prawn` appears as `nwarp`.\nI think `prawn` should go the way which other typesetting tools like `latex` went before. Existence of A module which manage using of right to left languages like Persian in the heart of `prawn`  seems necessary.\n. I try to solve the problem by using various fonts. But, the problem still exists there.\nExample:\n\n```\nrequire 'prawn'\n\nPrawn::Document.generate(\"hello.pdf\") do\n    text_direction :rtl\n    font \"BNazanin.ttf\"\n    text \"\u062f\u0631\u0648\u062f \u062f\u0646\u06cc\u0627\"    # Means 'Hello World'\nend\n```\n\nYou can find 'B Nazanin' font [here](http://awebfont.ir/fonts?cat_id=1&file_id=1069&file_type=ttf).\nGenerated pdf file by this code looks like:\n\n![1](https://cloud.githubusercontent.com/assets/2599121/7516802/c9f5a3d0-f4e6-11e4-9c44-22a0518b910c.jpg)\n\nand the correct result should look like:\n\n![2](https://cloud.githubusercontent.com/assets/2599121/7516812/d98f18ee-f4e6-11e4-9625-682c2c85b36f.jpg)\n\nEvery alphabetic characters in middle east languages like Persian, Kurdish and Arabic, have 5 different shapes.  The name of these shapes are, Common, Isolated, Final, Initial and Medial. One of these shapes are selected in typesetting base on the position of the character in the word, in contrast with the Latin languages which characters have only one shape and no dependency on position in the word.\n\nI develop a gem termed [persian-bechasboon](https://github.com/volfgox/persian-bechasboon) which solve this problem by replacement of disconnected letter with its connected counterparts. The main function of this gem will be applied to the string before calling `text` function of prawn.\n\nI think a function like this should be placed in the core of the prawn to support this type of languages.\n. Pardon me. I reopen this issue.\n. When you type persian in well-known text editor like `textedit` or when you use latex to generate PDF with Persian language, OS or application do character exchanging as what I do in `persian-bechasboon`. \nYes, this gem fixed my problem. In that, just every character replaced with its appropriate counterpart in a string. So, using this gem can handle the problem.\n. In my mind this issue isn't special case. There are millions of people speak languages with right to left direction in writing. Persian, Kurdish and Arabic are three sample of such languages.\nAnother issue which I faced it is the problem of using English (or other Latin languages) text inside a Persian (or other right to left languages) text. In this problem the characters in English text are typeseted right to left. For example `prawn` appears as `nwarp`.\nI think `prawn` should go the way which other typesetting tools like `latex` went before. Existence of A module which manage using of right to left languages like Persian in the heart of `prawn`  seems necessary.\n. ",
    "iamjohnford": "I don't know if this is related to that same code, but shrink_to_fit also doesn't seem to calculate positioning of some inline formatted items.\n\nThis code works correctly:\n\n```\ntext_box \"123*\",\n  :at => [0, bounds.height],\n  :align => :center,\n  :disable_wrap_by_char => true,\n  :inline_format => true,\n  :overflow => :shrink_to_fit,\n  :size => 50,\n  :width => 70\n```\n\nResult:\n<img width=\"129\" alt=\"\" src=\"https://cloud.githubusercontent.com/assets/12647/10123019/1235b0cc-6567-11e5-8f8c-a142928dfde1.png\">\n\nWhen adding &lt;sup>*&lt;/sup> the asterisk gets wrapped and shows up in the middle of the text.\n\n```\ntext_box \"123<sup>*</sup>\",\n  :at => [0, bounds.height],\n  :align => :center,\n  :disable_wrap_by_char => true,\n  :inline_format => true,\n  :overflow => :shrink_to_fit,\n  :size => 50,\n  :width => 70\n```\n\nResult:\n<img width=\"126\" alt=\"\" src=\"https://cloud.githubusercontent.com/assets/12647/10123028/51949512-6567-11e5-92fd-a0bd1b95e728.png\">\n. Thanks! Those tips helped point in the right direction. I've started creating a separate BlendMode module. \n\nShould it pretty much mimic the Transparency code? I have some working code where I basically duplicated the Transparency module and changed the appropriate items to BlendMode. \n\nThe arrays also work (at least I see it when viewing the PDF source) but I haven't found an example that will create a different effect with a combination of two blend modes. I'm still trying to figure out if that's correct.\n. Okay, I need some feedback on the [current commit](https://github.com/iamjohnford/prawn/commit/18b540262271087635a5afe0f468bd980a0477d3). Here are some things that were added:\n- Updated the changelog\n- Added BlendMode#blend_mode which can be called with or without a block\n- Added a page to the manual\n- Added specs\n\nA couple of notes and questions:\n- Specs need to be run with pdf-inspector master since the tests need access to BM in the ExtGState (https://github.com/prawnpdf/pdf-inspector/commit/6f0992d421eb64810347f30436506c8a80613d8c)\n- The manual page for blend_mode seems like it might not be in the right place. It uses a few items, like images, that aren't mentioned in the manual until much later. Where's the best place to put that?\n- Should I rebase the code so changes to transparency.rb don't show up?\n\nThanks!\n. @packetmonkey and @mogest, if one of you get a chance to review the blend_mode addition it would be great. I'm happy to make any updates. Thanks!\n. @packetmonkey, updated the pdf-inspector change log (https://github.com/prawnpdf/pdf-inspector/pull/20) and rebased this pull request.\n. @packetmonkey Updated!\n. I updated the code with the following:\n- Slight change to the way the dictionary name is created when arrays are passed\n- Moved BLEND_MODES into the manual\n- Updated the code and manual example to include :Hue, :Saturation, :Color, and :Luminosity. Acrobat Reader can display these types but OS X Preview doesn't seem to.\n\nI rebased and it's ready for review.\n. @cheba, Thanks! I updated the code based on your feedback.\n. @packetmonkey @cheba Anything else you need me to do for this PR?\n. Thanks so much! \ud83d\ude01\ud83d\udc4d\n. Yeah, I noticed your concern when I was working on the patch. I probably should have asked about that sooner.\n\nOne thing I noticed while testing this was that `height_of` doesn't take into account `:inline_format`. It should, right? So instead of:\n\n``` ruby\ndef height_of(string, options = {})\n  height_of_formatted([{ :text => string }], options)\nend\n```\n\nIt should be something like:\n\n``` ruby\ndef height_of(string, options = {})\n  options = options.dup\n\n  if p = options[:inline_format]\n    p = [] unless p.is_a?(Array)\n    options.delete(:inline_format)\n    array = self.text_formatter.format(string, *p)\n  else\n    array = [{ :text => string }]\n  end\n\n  height_of_formatted(array, options)\nend\n```\n\nThe heights are pretty different between the two as you can see with this example:\n\n``` ruby\nPrawn::Document.generate(\"test-height-of.pdf\") do\n  string = \"Prawn love <sup>superscript</sup> \" * 10\n\n  options = {\n    inline_format: true,\n    size: 20,\n    width: 180\n  }\n\n  height = height_of(string, options)\n  puts \"height_of: #{height}\"\n  bounding_box [0, bounds.height], width: options[:width], height: height do\n    stroke_bounds\n    text string, options\n  end\n\n  array = text_formatter.format(string, options)\n  height = height_of_formatted(array, options)\n  puts \"height_of_formatted: #{height}\"\n  bounding_box [options[:width] + 10, bounds.height], width: options[:width], height: height do\n    stroke_bounds\n    text string, options\n  end\nend\n```\n\nDoes that seem correct? I'm happy to create a pull request with a patch for that.\n. I'm not sure if that's the intended behavior with `bounding_box` but you can use `span` if you want the text to automatically break between pages:\n\n```\nPrawn::Document.generate(\"span.pdf\") do\n  span(bounds.width) do\n    100.times do\n      text 'test'\n    end\n  end\nend\n```\n. Testing that code worked okay on my side as long as you change `txt_content` to `txt`. Is txt_content set somewhere else in your code and causing the issue? You may also want to turn on `Prawn.debug = true` to check the parameters you're using. Some of them are not valid.\n\n``` ruby\nrequire 'prawn'\nPrawn.debug = true\n\nPrawn::Document.generate(\"test.pdf\") do\n  options = {\n    :inline_format => true,\n    :overflow      => :truncate,\n    :height        => 83.1496062992126,\n    :width         => 42.51968503937008,\n    :at            => [119.05511811023625, 547.0866141732284],\n    :align         => :left\n  }\n  txt = 'test tekst'\n  text_box txt, options\nend\n```\n. Which documentation shows `draw_text` accepts the color option? Here's the API documentation: [#draw_text-instance_method](http://prawnpdf.org/api-docs/2.0/Prawn/Text.html#draw_text-instance_method)\n\nMaybe you're thinking of [#text](http://prawnpdf.org/api-docs/2.0/Prawn/Text.html#text-instance_method) which does accept `color` as a parameter?\n\nIf you add `Prawn.debug = true` warnings will appear if you call `draw_text` with unsupported options.\n. What happens when you don't use that gem? Are the glyphs showing up incorrectly?\n. I don't have artro.ttf but I did a test with [KacstOne.ttf](http://sourceforge.net/projects/arabeyes/files/kacst_fonts/kacst_one_5.0.tar.bz2/download) from http://sourceforge.net/projects/arabeyes/files/kacst_fonts/. It rendered the text but I'm not sure if it is correct. Does that font work if you try it? It could still be related to Prawn but maybe that will help narrow things down.\n\nAlso, what version of Ruby and Prawn are you using?\n\nHere's the code I used:\n\n``` ruby\nPrawn::Document.generate('arabic.pdf') do\n  font \"KacstOne.ttf\"\n  font_size 16\n  self.text_direction = :rtl\n  long_text = \"\u0645\u0631\u062d\u0628\u0627 \u064a\u0627 \u0627\u0644\u0639\u0627\u0644\u0645\"\n  text long_text\nend\n```\n\nHere's the output:\n\n<img width=\"222\" alt=\"screen shot 2015-11-25 at 20 19 23\" src=\"https://cloud.githubusercontent.com/assets/12647/11395997/dc91ab64-93b1-11e5-85ae-5c42c52cbf48.png\">\n. You may want to change the font depending if you're using Arabic or English. You can change it back and forth as many times as you want. There are good examples of loading fonts in the [manual](http://prawnpdf.org/manual.pdf).\n. There are some examples out there on how to detect Arabic text: http://stackoverflow.com/questions/7066137/how-to-determine-if-string-contains-arabic-symbols\n. If you provide a full working example it would be easier for other people to test.\n. Here's the grid code I use to help measure and position elements.\n\n``` ruby\nrequire \"prawn\"\n\nmodule Prawn\n  module Graphics\n    def stroke_grid(options = {})\n      options = {\n        :at => [0, 0],\n        :height => bounds.height.to_i - (options[:at] || [0, 0])[1],\n        :width => bounds.width.to_i - (options[:at] || [0, 0])[0],\n        :step_length => 50,\n        :negative_axes_length => 0,\n        :color => \"000000\"\n      }.merge(options)\n\n      Prawn.verify_options([:at, :width, :height, :step_length,\n                            :negative_axes_length, :color], options)\n\n      save_graphics_state do\n        fill_color(options[:color])\n        stroke_color(options[:color])\n\n        stroke_bounds\n\n        fill_circle(options[:at], 1)\n\n        (options[:step_length]..options[:width]).step(options[:step_length]) do |point|\n          fill_circle([options[:at][0] + point, options[:at][1]], 1)\n          draw_text(point, :at => [options[:at][0] + point - 5, options[:at][1] + 10], :size => 7)\n        end\n\n        (options[:step_length]..options[:height]).step(options[:step_length]) do |point|\n          fill_circle([options[:at][0], options[:at][1] + point], 1)\n          draw_text(point, :at => [options[:at][0] + 10, options[:at][1] + point - 2], :size => 7)\n        end\n\n        self.line_width = 0.5\n        (0..options[:height]).step(5) do |point|\n          tp = point % 50 == 0 ? 0.5 : 0.1\n          transparent(tp) do\n            stroke_horizontal_line(options[:at][0],\n                                   options[:at][0] + options[:width], :at => options[:at][1] + point)\n          end\n        end\n\n        (0..options[:width]).step(5) do |point|\n          tp = point % 50 == 0 ? 0.5 : 0.1\n          transparent(tp) do\n            stroke_vertical_line(options[:at][1],\n                                 options[:at][1] + options[:height], :at => options[:at][0] + point)\n          end\n        end\n      end\n    end\n  end\nend\n\nPrawn::Document.generate(\"grid.pdf\") do\n  # Remove canvas to draw grid within current bounds\n  canvas do\n    stroke_grid\n  end\nend\n```\n. I don't know if this is related to that same code, but shrink_to_fit also doesn't seem to calculate positioning of some inline formatted items.\n\nThis code works correctly:\n\n```\ntext_box \"123*\",\n  :at => [0, bounds.height],\n  :align => :center,\n  :disable_wrap_by_char => true,\n  :inline_format => true,\n  :overflow => :shrink_to_fit,\n  :size => 50,\n  :width => 70\n```\n\nResult:\n<img width=\"129\" alt=\"\" src=\"https://cloud.githubusercontent.com/assets/12647/10123019/1235b0cc-6567-11e5-8f8c-a142928dfde1.png\">\n\nWhen adding &lt;sup>*&lt;/sup> the asterisk gets wrapped and shows up in the middle of the text.\n\n```\ntext_box \"123<sup>*</sup>\",\n  :at => [0, bounds.height],\n  :align => :center,\n  :disable_wrap_by_char => true,\n  :inline_format => true,\n  :overflow => :shrink_to_fit,\n  :size => 50,\n  :width => 70\n```\n\nResult:\n<img width=\"126\" alt=\"\" src=\"https://cloud.githubusercontent.com/assets/12647/10123028/51949512-6567-11e5-92fd-a0bd1b95e728.png\">\n. Thanks! Those tips helped point in the right direction. I've started creating a separate BlendMode module. \n\nShould it pretty much mimic the Transparency code? I have some working code where I basically duplicated the Transparency module and changed the appropriate items to BlendMode. \n\nThe arrays also work (at least I see it when viewing the PDF source) but I haven't found an example that will create a different effect with a combination of two blend modes. I'm still trying to figure out if that's correct.\n. Okay, I need some feedback on the [current commit](https://github.com/iamjohnford/prawn/commit/18b540262271087635a5afe0f468bd980a0477d3). Here are some things that were added:\n- Updated the changelog\n- Added BlendMode#blend_mode which can be called with or without a block\n- Added a page to the manual\n- Added specs\n\nA couple of notes and questions:\n- Specs need to be run with pdf-inspector master since the tests need access to BM in the ExtGState (https://github.com/prawnpdf/pdf-inspector/commit/6f0992d421eb64810347f30436506c8a80613d8c)\n- The manual page for blend_mode seems like it might not be in the right place. It uses a few items, like images, that aren't mentioned in the manual until much later. Where's the best place to put that?\n- Should I rebase the code so changes to transparency.rb don't show up?\n\nThanks!\n. @packetmonkey and @mogest, if one of you get a chance to review the blend_mode addition it would be great. I'm happy to make any updates. Thanks!\n. @packetmonkey, updated the pdf-inspector change log (https://github.com/prawnpdf/pdf-inspector/pull/20) and rebased this pull request.\n. @packetmonkey Updated!\n. I updated the code with the following:\n- Slight change to the way the dictionary name is created when arrays are passed\n- Moved BLEND_MODES into the manual\n- Updated the code and manual example to include :Hue, :Saturation, :Color, and :Luminosity. Acrobat Reader can display these types but OS X Preview doesn't seem to.\n\nI rebased and it's ready for review.\n. @cheba, Thanks! I updated the code based on your feedback.\n. @packetmonkey @cheba Anything else you need me to do for this PR?\n. Thanks so much! \ud83d\ude01\ud83d\udc4d\n. Yeah, I noticed your concern when I was working on the patch. I probably should have asked about that sooner.\n\nOne thing I noticed while testing this was that `height_of` doesn't take into account `:inline_format`. It should, right? So instead of:\n\n``` ruby\ndef height_of(string, options = {})\n  height_of_formatted([{ :text => string }], options)\nend\n```\n\nIt should be something like:\n\n``` ruby\ndef height_of(string, options = {})\n  options = options.dup\n\n  if p = options[:inline_format]\n    p = [] unless p.is_a?(Array)\n    options.delete(:inline_format)\n    array = self.text_formatter.format(string, *p)\n  else\n    array = [{ :text => string }]\n  end\n\n  height_of_formatted(array, options)\nend\n```\n\nThe heights are pretty different between the two as you can see with this example:\n\n``` ruby\nPrawn::Document.generate(\"test-height-of.pdf\") do\n  string = \"Prawn love <sup>superscript</sup> \" * 10\n\n  options = {\n    inline_format: true,\n    size: 20,\n    width: 180\n  }\n\n  height = height_of(string, options)\n  puts \"height_of: #{height}\"\n  bounding_box [0, bounds.height], width: options[:width], height: height do\n    stroke_bounds\n    text string, options\n  end\n\n  array = text_formatter.format(string, options)\n  height = height_of_formatted(array, options)\n  puts \"height_of_formatted: #{height}\"\n  bounding_box [options[:width] + 10, bounds.height], width: options[:width], height: height do\n    stroke_bounds\n    text string, options\n  end\nend\n```\n\nDoes that seem correct? I'm happy to create a pull request with a patch for that.\n. I'm not sure if that's the intended behavior with `bounding_box` but you can use `span` if you want the text to automatically break between pages:\n\n```\nPrawn::Document.generate(\"span.pdf\") do\n  span(bounds.width) do\n    100.times do\n      text 'test'\n    end\n  end\nend\n```\n. Testing that code worked okay on my side as long as you change `txt_content` to `txt`. Is txt_content set somewhere else in your code and causing the issue? You may also want to turn on `Prawn.debug = true` to check the parameters you're using. Some of them are not valid.\n\n``` ruby\nrequire 'prawn'\nPrawn.debug = true\n\nPrawn::Document.generate(\"test.pdf\") do\n  options = {\n    :inline_format => true,\n    :overflow      => :truncate,\n    :height        => 83.1496062992126,\n    :width         => 42.51968503937008,\n    :at            => [119.05511811023625, 547.0866141732284],\n    :align         => :left\n  }\n  txt = 'test tekst'\n  text_box txt, options\nend\n```\n. Which documentation shows `draw_text` accepts the color option? Here's the API documentation: [#draw_text-instance_method](http://prawnpdf.org/api-docs/2.0/Prawn/Text.html#draw_text-instance_method)\n\nMaybe you're thinking of [#text](http://prawnpdf.org/api-docs/2.0/Prawn/Text.html#text-instance_method) which does accept `color` as a parameter?\n\nIf you add `Prawn.debug = true` warnings will appear if you call `draw_text` with unsupported options.\n. What happens when you don't use that gem? Are the glyphs showing up incorrectly?\n. I don't have artro.ttf but I did a test with [KacstOne.ttf](http://sourceforge.net/projects/arabeyes/files/kacst_fonts/kacst_one_5.0.tar.bz2/download) from http://sourceforge.net/projects/arabeyes/files/kacst_fonts/. It rendered the text but I'm not sure if it is correct. Does that font work if you try it? It could still be related to Prawn but maybe that will help narrow things down.\n\nAlso, what version of Ruby and Prawn are you using?\n\nHere's the code I used:\n\n``` ruby\nPrawn::Document.generate('arabic.pdf') do\n  font \"KacstOne.ttf\"\n  font_size 16\n  self.text_direction = :rtl\n  long_text = \"\u0645\u0631\u062d\u0628\u0627 \u064a\u0627 \u0627\u0644\u0639\u0627\u0644\u0645\"\n  text long_text\nend\n```\n\nHere's the output:\n\n<img width=\"222\" alt=\"screen shot 2015-11-25 at 20 19 23\" src=\"https://cloud.githubusercontent.com/assets/12647/11395997/dc91ab64-93b1-11e5-85ae-5c42c52cbf48.png\">\n. You may want to change the font depending if you're using Arabic or English. You can change it back and forth as many times as you want. There are good examples of loading fonts in the [manual](http://prawnpdf.org/manual.pdf).\n. There are some examples out there on how to detect Arabic text: http://stackoverflow.com/questions/7066137/how-to-determine-if-string-contains-arabic-symbols\n. If you provide a full working example it would be easier for other people to test.\n. Here's the grid code I use to help measure and position elements.\n\n``` ruby\nrequire \"prawn\"\n\nmodule Prawn\n  module Graphics\n    def stroke_grid(options = {})\n      options = {\n        :at => [0, 0],\n        :height => bounds.height.to_i - (options[:at] || [0, 0])[1],\n        :width => bounds.width.to_i - (options[:at] || [0, 0])[0],\n        :step_length => 50,\n        :negative_axes_length => 0,\n        :color => \"000000\"\n      }.merge(options)\n\n      Prawn.verify_options([:at, :width, :height, :step_length,\n                            :negative_axes_length, :color], options)\n\n      save_graphics_state do\n        fill_color(options[:color])\n        stroke_color(options[:color])\n\n        stroke_bounds\n\n        fill_circle(options[:at], 1)\n\n        (options[:step_length]..options[:width]).step(options[:step_length]) do |point|\n          fill_circle([options[:at][0] + point, options[:at][1]], 1)\n          draw_text(point, :at => [options[:at][0] + point - 5, options[:at][1] + 10], :size => 7)\n        end\n\n        (options[:step_length]..options[:height]).step(options[:step_length]) do |point|\n          fill_circle([options[:at][0], options[:at][1] + point], 1)\n          draw_text(point, :at => [options[:at][0] + 10, options[:at][1] + point - 2], :size => 7)\n        end\n\n        self.line_width = 0.5\n        (0..options[:height]).step(5) do |point|\n          tp = point % 50 == 0 ? 0.5 : 0.1\n          transparent(tp) do\n            stroke_horizontal_line(options[:at][0],\n                                   options[:at][0] + options[:width], :at => options[:at][1] + point)\n          end\n        end\n\n        (0..options[:width]).step(5) do |point|\n          tp = point % 50 == 0 ? 0.5 : 0.1\n          transparent(tp) do\n            stroke_vertical_line(options[:at][1],\n                                 options[:at][1] + options[:height], :at => options[:at][0] + point)\n          end\n        end\n      end\n    end\n  end\nend\n\nPrawn::Document.generate(\"grid.pdf\") do\n  # Remove canvas to draw grid within current bounds\n  canvas do\n    stroke_grid\n  end\nend\n```\n. ",
    "IbnSaeed": "Excellent news, @fidothe You have got us all excited. Can you please provide a detailed procedure for both PDF/X and PDF/A, if possible\n. Is there a reason for this ticket to be closed ?\n. Excellent news, @fidothe You have got us all excited. Can you please provide a detailed procedure for both PDF/X and PDF/A, if possible\n. Is there a reason for this ticket to be closed ?\n. ",
    "klebervirgilio": "Oh! I see, makes sense! Thanks @cheba.\n. @mojavelinux that was what I did on my end. I guess it might help others!\n. Sounds good! How Can I help? Let me know if you guys need anything else.\n. To be honest, till now I didn't even know about Asciidoctor PDF. I guess the best path would be to look at the issues?\n. IMHO, I would say Ruby by itself offers a good API to add dynamic features/methods/... I mean, I don't see a good reason to create an API. \n@mojavelinux nice one! :+1: bringing some facts to the conversation!\n. Oh! I see, makes sense! Thanks @cheba.\n. @mojavelinux that was what I did on my end. I guess it might help others!\n. Sounds good! How Can I help? Let me know if you guys need anything else.\n. To be honest, till now I didn't even know about Asciidoctor PDF. I guess the best path would be to look at the issues?\n. IMHO, I would say Ruby by itself offers a good API to add dynamic features/methods/... I mean, I don't see a good reason to create an API. \n@mojavelinux nice one! :+1: bringing some facts to the conversation!\n. ",
    "joakimk": "This caused our rails processes to grow from about 500mb to 20-30 GB.\n. I guess the 20GB could come from copying the memory at some point, or the way ruby represents the bits in the VM.\n. I don't know if there is anything prawn could do. I guess it could raise an error if it gets passed a very large image, but by then it's already loaded into memory so it probably won't help.\n. This caused our rails processes to grow from about 500mb to 20-30 GB.\n. I guess the 20GB could come from copying the memory at some point, or the way ruby represents the bits in the VM.\n. I don't know if there is anything prawn could do. I guess it could raise an error if it gets passed a very large image, but by then it's already loaded into memory so it probably won't help.\n. ",
    "nielspetersen": "This issue is part of the current issue (13th) of the RubyIssues. https://rubyissues.ongoodbits.com/. :gem:\n. This issue is part of the current issue (13th) of the RubyIssues. https://rubyissues.ongoodbits.com/. :gem:\n. ",
    "claudiofullscreen": "Perfect! Thanks :grin:\n\nOn Wed, Jun 3, 2015 at 11:58 AM, Evan Sharp notifications@github.com\nwrote:\n\n> Closed #888 https://github.com/prawnpdf/prawn/issues/888.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/prawnpdf/prawn/issues/888#event-321697532.\n\n## \n\n Claudio Baccigalupo  | Software Writer  |  Fullscreen, Inc.\nhttp://Fullscreen.net  |  +1.310.202.3333\n. Perfect! Thanks :grin:\n\nOn Wed, Jun 3, 2015 at 11:58 AM, Evan Sharp notifications@github.com\nwrote:\n\n> Closed #888 https://github.com/prawnpdf/prawn/issues/888.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/prawnpdf/prawn/issues/888#event-321697532.\n\n## \n\n Claudio Baccigalupo  | Software Writer  |  Fullscreen, Inc.\nhttp://Fullscreen.net  |  +1.310.202.3333\n. ",
    "wingfire": "Hi, i fixed the rubocop test, enhanced the change log and enabled rubocop HashSyntax tests for manual directory. Anything else i have to do for the pull request?\n. Any thing else i can do?\n. Hi, i fixed the rubocop test, enhanced the change log and enabled rubocop HashSyntax tests for manual directory. Anything else i have to do for the pull request?\n. Any thing else i can do?\n. ",
    "mogest": "@cheba, it's actually the Matrix that's passed on https://github.com/prawnpdf/prawn/blob/master/lib/prawn/graphics/patterns.rb#L124 that's causing the problem.  The matrix has to match the current transformations that have been effected in the document.\n\nI've created a pull request @packetmonkey.  I'd love to hear what everyone thinks, as I feel like it might be a bit of a contentious solution.\n. Rubocop wants <tt>.map(&:to_f)</tt> instead of <tt>.map { |n| n.to_f }</tt>, but I was just following the style of the surrounding code.  Happy to change.\n. I feel like the external gem might be a bit fiddly given the change touches three separate classes.  I'd suggest that we add an option to the fill_gradient/stroke_gradient call, something like <tt>apply_transformations: true</tt>.  It'll initially default to false, and maybe log a warning if you don't explicitly set it false or true.\n\nAs you suggest @packetmonkey, it'd make sense to change the default to true in prawn 3.\n\nDownside to the approach is the <tt>apply_transformations</tt> option hangs around afterwards.  It's a pretty simple switch, so I don't think it'll negatively impact code complexity to keep it there.\n. OK, <tt>:apply_transformations</tt> option added, <tt>warn</tt> displayed if option not explicitly supplied and a transformation was made (no point warning the user if turning on the option wouldn't result in different behaviour, IMO.)  Added some info to the method comments, and a link to a non-existent wiki page!\n. Thanks everyone!  And thanks for the great contributing experience.\n\nWiki page looks great, changelog committed, ready to roll hopefully!\n. @cheba, I was setting it up for my next PR, which will be opacity specified per stop in a [position, color, opacity] tuple.  But I agree, it's not pretty.  I could support all three: `[\"color\", \"color\", \"color\"]`; `{0 => \"color\", 1 => \"color\"}`; `[[0, \"color\"], [1, \"color\"]]`.  Thoughts?\n\nLooks like I'm gonna have to install jruby too and work out why it doesn't like double splatting kwargs.\n. Works for me @cheba.\n\nRe the check fail, gemspec says minimum Ruby version 2.0.0, but travis is running 1.9-series jruby.  Is it really minimum 2.0?\n. @cheba rebased.\n\njruby is failing because its implementation of kwargs is buggy.  A `*args` picks up all the keyword args as well, where it shouldn't.  I guess since it's an officially supported version for prawn I'll have to refactor so I don't trip over that somehow.  Will attempt soon.\n. The issue https://github.com/jruby/jruby/issues/2799 has a similar class of problem, but they stated in there that they weren't going to do any more work on kwargs in the 1.7 versions, instead asking people to move to 9000.  Travis is set up to use 1.7.19.\n\nThe tricky part is I'm trying to support the old arguments, as well as the new keyword args.  I think if we have to support 1.7 I might have to ditch using the keyword arguments, which would be a shame.  Will have a play anyway.\n. Shall we go ahead with deprecating pre-9k JRuby support?  It'd be lovely to see this patch go in.\n. Woohoo, passing build!  Thanks for bumping that along, @pointlessone.\n\nHow does merging sound?\n. Just a ping on this PR.  I've got people still waiting for gradient support in prawn-svg, and I can't deliver it to them until this PR is merged.  I believe it's been reviewed by at least one core member, so should be good to go in as is.  Thanks!\n. Thanks @packetmonkey!  The API changes are non-breaking; the old arguments are still supported, and the behaviour defaults to the old behaviour when you use the old arguments, too.\n. Thanks @pointlessone!\n. Code looks good @iamjohnford.  Checks out with the PDF spec too.\n\nTwo thoughts:\n\nFirst, I feel like it might be nicer to have a separate `blend_mode` method, instead of overloading the `transparent` method. If you want to set the transparency and blend mode, you could just stack them as gs operator calls are cumulative. Just a bit cleaner so you can use blend mode by itself and not change the transparency setting.  What do you think?\n\n```\ntransparent 0.5 do\n  blend_mode :Multiply\n    ... do stuff ...\n  end\nend\n```\n\nSecond, might as well support the array syntax.  You just supply an array of symbols to `ref!` instead of just the one symbol, and it'll take care of it for you.\n\nSpecs would be good, as well as an example in the manual and an entry in the changelog!\n\nYell out if you'd like a hand, I'm happy to help.\n. Yeah, it's gonna be pretty much the same as Transparency.  Most prawn methods wrap the call in `save_graphics_state` and `restore_graphics_state` and yield if they're given a block, and just make the call without saving/restoring if they're not given a block; it might be nice for your code to follow that standard, even though Transparency only handles the block-provided case (from memory.)\n\nRe multiple blend modes, they're not cumulative; here's 7.5.2 in the PDF spec:\n\n> Its value is either a name object, designating one of the standard blend modes listed in Tables 7.2 and 7.3 on pages 520 and 524, or an array of such names. In the latter case, the application should use the first blend mode in the array that it recognizes (or Normal if it recognizes none of them). Therefore, new blend modes can be introduced in the future, and applications that do not recognize them have reasonable fallback behavior. (See implementation note 72 in Appendix H.)\n. Yeah looks great.  @cheba left one comment in the code that could be addressed.  Brilliant work @iamjohnford.\n. @cheba, it's actually the Matrix that's passed on https://github.com/prawnpdf/prawn/blob/master/lib/prawn/graphics/patterns.rb#L124 that's causing the problem.  The matrix has to match the current transformations that have been effected in the document.\n\nI've created a pull request @packetmonkey.  I'd love to hear what everyone thinks, as I feel like it might be a bit of a contentious solution.\n. Rubocop wants <tt>.map(&:to_f)</tt> instead of <tt>.map { |n| n.to_f }</tt>, but I was just following the style of the surrounding code.  Happy to change.\n. I feel like the external gem might be a bit fiddly given the change touches three separate classes.  I'd suggest that we add an option to the fill_gradient/stroke_gradient call, something like <tt>apply_transformations: true</tt>.  It'll initially default to false, and maybe log a warning if you don't explicitly set it false or true.\n\nAs you suggest @packetmonkey, it'd make sense to change the default to true in prawn 3.\n\nDownside to the approach is the <tt>apply_transformations</tt> option hangs around afterwards.  It's a pretty simple switch, so I don't think it'll negatively impact code complexity to keep it there.\n. OK, <tt>:apply_transformations</tt> option added, <tt>warn</tt> displayed if option not explicitly supplied and a transformation was made (no point warning the user if turning on the option wouldn't result in different behaviour, IMO.)  Added some info to the method comments, and a link to a non-existent wiki page!\n. Thanks everyone!  And thanks for the great contributing experience.\n\nWiki page looks great, changelog committed, ready to roll hopefully!\n. @cheba, I was setting it up for my next PR, which will be opacity specified per stop in a [position, color, opacity] tuple.  But I agree, it's not pretty.  I could support all three: `[\"color\", \"color\", \"color\"]`; `{0 => \"color\", 1 => \"color\"}`; `[[0, \"color\"], [1, \"color\"]]`.  Thoughts?\n\nLooks like I'm gonna have to install jruby too and work out why it doesn't like double splatting kwargs.\n. Works for me @cheba.\n\nRe the check fail, gemspec says minimum Ruby version 2.0.0, but travis is running 1.9-series jruby.  Is it really minimum 2.0?\n. @cheba rebased.\n\njruby is failing because its implementation of kwargs is buggy.  A `*args` picks up all the keyword args as well, where it shouldn't.  I guess since it's an officially supported version for prawn I'll have to refactor so I don't trip over that somehow.  Will attempt soon.\n. The issue https://github.com/jruby/jruby/issues/2799 has a similar class of problem, but they stated in there that they weren't going to do any more work on kwargs in the 1.7 versions, instead asking people to move to 9000.  Travis is set up to use 1.7.19.\n\nThe tricky part is I'm trying to support the old arguments, as well as the new keyword args.  I think if we have to support 1.7 I might have to ditch using the keyword arguments, which would be a shame.  Will have a play anyway.\n. Shall we go ahead with deprecating pre-9k JRuby support?  It'd be lovely to see this patch go in.\n. Woohoo, passing build!  Thanks for bumping that along, @pointlessone.\n\nHow does merging sound?\n. Just a ping on this PR.  I've got people still waiting for gradient support in prawn-svg, and I can't deliver it to them until this PR is merged.  I believe it's been reviewed by at least one core member, so should be good to go in as is.  Thanks!\n. Thanks @packetmonkey!  The API changes are non-breaking; the old arguments are still supported, and the behaviour defaults to the old behaviour when you use the old arguments, too.\n. Thanks @pointlessone!\n. Code looks good @iamjohnford.  Checks out with the PDF spec too.\n\nTwo thoughts:\n\nFirst, I feel like it might be nicer to have a separate `blend_mode` method, instead of overloading the `transparent` method. If you want to set the transparency and blend mode, you could just stack them as gs operator calls are cumulative. Just a bit cleaner so you can use blend mode by itself and not change the transparency setting.  What do you think?\n\n```\ntransparent 0.5 do\n  blend_mode :Multiply\n    ... do stuff ...\n  end\nend\n```\n\nSecond, might as well support the array syntax.  You just supply an array of symbols to `ref!` instead of just the one symbol, and it'll take care of it for you.\n\nSpecs would be good, as well as an example in the manual and an entry in the changelog!\n\nYell out if you'd like a hand, I'm happy to help.\n. Yeah, it's gonna be pretty much the same as Transparency.  Most prawn methods wrap the call in `save_graphics_state` and `restore_graphics_state` and yield if they're given a block, and just make the call without saving/restoring if they're not given a block; it might be nice for your code to follow that standard, even though Transparency only handles the block-provided case (from memory.)\n\nRe multiple blend modes, they're not cumulative; here's 7.5.2 in the PDF spec:\n\n> Its value is either a name object, designating one of the standard blend modes listed in Tables 7.2 and 7.3 on pages 520 and 524, or an array of such names. In the latter case, the application should use the first blend mode in the array that it recognizes (or Normal if it recognizes none of them). Therefore, new blend modes can be introduced in the future, and applications that do not recognize them have reasonable fallback behavior. (See implementation note 72 in Appendix H.)\n. Yeah looks great.  @cheba left one comment in the code that could be addressed.  Brilliant work @iamjohnford.\n. ",
    "abelsromero": "Thanks. Perfectly answered.\n. Sorry, one last question, any plans for version 1.5? I guess this is a long shot, but curious if it's being considered.\n. > I believe that question is related to #877\n\nExactly what I was looking for, thanks.\n\n> Do you have in mind any 1.5 features that Prawn doesn't support yet?\n\nNot any in particular, just PDF/A compliance. The basic idea behind PDF/A is creating secure PDF documents that can be read after a long period of time (e.g. 5-10 years) and whose integrity can be certified. Basically, PDF 1.5 is \"supposed\" to be 100% compatible and version 1.4 depends on how you build the document, the first thing you learn is to embed fonts.\nStill, from experience, you must always validate the documents cause you never how it was created.\n\nLet me clarify why I was asking:\nIn my line of work I have to deal with this requeriment from time to time and I have always relied on propietary software for conversion/generation. So, I was interested in knowing if I prawn could be used as a free alterntive for PDF generation, for instance, using Asciidoctor documents as templates.\nFor some organitzation (especially public organism like goverments) it is _absolutely_ mandatory to ensure that documents are PDF/A. If not, as work arround, some particular regulations allow to store PDFs for preservation as long as they're signed digitally. That way you can ensure that no one altered the document.\n\nBtw, I run some tests with [PDFBox](https://pdfbox.apache.org/) and I could validate the following points:\n- I could sign a prawn generated PDF with keys generated with openssl and keytool, which are the de defacto standards. :+1: \n- I could not validate if a generated document was PDF/A. I am concerned about this not because it did not validate, but because PDFBox just crashed with an exception, which may indicate that some part of the document is not well build. I'll try to reach Apache to see if this an issue of the API.\n\nAlso, I found this nice summary of PDF/A features: http://wiki.opf-labs.org/display/REQ/PDF+to+PDF-A+Conversion+Pre-Processor\n. Don't mean to reawaken this thread, just reporting that after 1 week...no answer from the request I send to mailing list of Apache.\n. > Is there a reason for this ticket to be closed ?\n\nBut maybe we should create a new one being more explicit about PDF/A compliance.\n. Thanks. Perfectly answered.\n. Sorry, one last question, any plans for version 1.5? I guess this is a long shot, but curious if it's being considered.\n. > I believe that question is related to #877\n\nExactly what I was looking for, thanks.\n\n> Do you have in mind any 1.5 features that Prawn doesn't support yet?\n\nNot any in particular, just PDF/A compliance. The basic idea behind PDF/A is creating secure PDF documents that can be read after a long period of time (e.g. 5-10 years) and whose integrity can be certified. Basically, PDF 1.5 is \"supposed\" to be 100% compatible and version 1.4 depends on how you build the document, the first thing you learn is to embed fonts.\nStill, from experience, you must always validate the documents cause you never how it was created.\n\nLet me clarify why I was asking:\nIn my line of work I have to deal with this requeriment from time to time and I have always relied on propietary software for conversion/generation. So, I was interested in knowing if I prawn could be used as a free alterntive for PDF generation, for instance, using Asciidoctor documents as templates.\nFor some organitzation (especially public organism like goverments) it is _absolutely_ mandatory to ensure that documents are PDF/A. If not, as work arround, some particular regulations allow to store PDFs for preservation as long as they're signed digitally. That way you can ensure that no one altered the document.\n\nBtw, I run some tests with [PDFBox](https://pdfbox.apache.org/) and I could validate the following points:\n- I could sign a prawn generated PDF with keys generated with openssl and keytool, which are the de defacto standards. :+1: \n- I could not validate if a generated document was PDF/A. I am concerned about this not because it did not validate, but because PDFBox just crashed with an exception, which may indicate that some part of the document is not well build. I'll try to reach Apache to see if this an issue of the API.\n\nAlso, I found this nice summary of PDF/A features: http://wiki.opf-labs.org/display/REQ/PDF+to+PDF-A+Conversion+Pre-Processor\n. Don't mean to reawaken this thread, just reporting that after 1 week...no answer from the request I send to mailing list of Apache.\n. > Is there a reason for this ticket to be closed ?\n\nBut maybe we should create a new one being more explicit about PDF/A compliance.\n. ",
    "liuganggang": "I get this error.\n\n```\nArgumentError: /Users/liugang/.rvm/gems/ruby-2.1.3/gems/prawn-2.0.2/data/fonts/gkai00mp.ttf not found\n```\n\n:)\n. I fix it by download gkai00mp.ttf to public folder.\nenn.\nThank you for your help!\n:)\n. I get this error.\n\n```\nArgumentError: /Users/liugang/.rvm/gems/ruby-2.1.3/gems/prawn-2.0.2/data/fonts/gkai00mp.ttf not found\n```\n\n:)\n. I fix it by download gkai00mp.ttf to public folder.\nenn.\nThank you for your help!\n:)\n. ",
    "tysonmote": "Ah ha \u2014 I was unknowingly using prawn-rails. Passing `:page_size => \"LETTER\"` to `prawn_document` works.\n. Ah ha \u2014 I was unknowingly using prawn-rails. Passing `:page_size => \"LETTER\"` to `prawn_document` works.\n. ",
    "cbuggle": "At `574.152`, i.e. just where it has been before the bounding_box / canvas. \n. At `574.152`, i.e. just where it has been before the bounding_box / canvas. \n. ",
    "mfitzp": "Understood @packetmonkey and thanks for the link to prawn-gmagick will take a look.\n. Understood @packetmonkey and thanks for the link to prawn-gmagick will take a look.\n. ",
    "dnasseri": "@iamjohnford thanks for the help, I ended up going with a different approach but this is very useful knowledge to have. I would be interested in helping to create a PR to have the bounding box auto break to a new page if we decide that is what the behavior should be.\n. Fair enough. I managed to find a cleaner way to implement what I was looking for using prawn-table. Thanks for the help and such a great gem!\n. @iamjohnford thanks for the help, I ended up going with a different approach but this is very useful knowledge to have. I would be interested in helping to create a PR to have the bounding box auto break to a new page if we decide that is what the behavior should be.\n. Fair enough. I managed to find a cleaner way to implement what I was looking for using prawn-table. Thanks for the help and such a great gem!\n. ",
    "escobera": "Thank you very much, you are completely right I thought text/draw_text/text_box accepted color, but I was mistaken. \n. Thank you very much, you are completely right I thought text/draw_text/text_box accepted color, but I was mistaken. \n. ",
    "udipl": "If anyone is interested, I did some work to support embedding ICC Profiles from PNG files. You can review it in [this commit](https://github.com/paperlesspost/prawn/commit/b6a4f8660aa1e06d5f53ed6cc51700dd4bdfbb72). It's mixed up with code to support indexed-color PNG with less than 8 bits per pixel.\nUnfortunately, I had to drop that task for now.\n. If anyone is interested, I did some work to support embedding ICC Profiles from PNG files. You can review it in [this commit](https://github.com/paperlesspost/prawn/commit/b6a4f8660aa1e06d5f53ed6cc51700dd4bdfbb72). It's mixed up with code to support indexed-color PNG with less than 8 bits per pixel.\nUnfortunately, I had to drop that task for now.\n. ",
    "danielgrippi": "this fixes an issue i've been seeing on my end.  when can we expect to see this merged?\n. this fixes an issue i've been seeing on my end.  when can we expect to see this merged?\n. ",
    "ACME-Raafat": "I have same result with or without using Arabic prawn. \n. This is great, thank you so much. But how can I display in both languages: Arabic and English? Because when I used KacstOne font, it caused a problem in the English Text. I used this code:\n\n<code> pdf.font_size 18\n    long_text = \"\u0645\u0631\u062d\u0628\u0627 \u064a\u0627 \u0627\u0644\u0639\u0627\u0644\u0645\"\n   pdf.text long_text.fix_arabic_glyphs.connect_arabic_letters  \n   long_text = \"Hello world\"\n   pdf.text long_text.fix_arabic_glyphs.connect_arabic_letters\n\n</code>\nand this is the output;\n\n![hello_world](https://cloud.githubusercontent.com/assets/11060374/11397806/ea8b62a0-9384-11e5-8686-cb7bb42c30fe.png)\n\nI get the same if I try this instead:\n\nlong_text = \"\u0645\u0631\u062d\u0628\u0627 \u064a\u0627 \u0627\u0644\u0639\u0627\u0644\u0645\"\npdf.text long_text.fix_arabic_glyphs.connect_arabic_letters  \nlong_text = \"Hello world\"\npdf.text long_text\n. I noticed this, but the problem is that the values I need to display are unknowns, and they could be entered by the user in English or Arabic, that's why I need something that works for both. \n. Thank you for your solution. Before trying it, I found something called fallback fonts:\n\n http://cookieshq.co.uk/posts/fallback-fonts-in-prawn/\n\nAs this link mentions, a fallback font is called when a string contains unsupported characters like Arabic. So I will try it maybe it'll work.\n. I have same result with or without using Arabic prawn. \n. This is great, thank you so much. But how can I display in both languages: Arabic and English? Because when I used KacstOne font, it caused a problem in the English Text. I used this code:\n\n<code> pdf.font_size 18\n    long_text = \"\u0645\u0631\u062d\u0628\u0627 \u064a\u0627 \u0627\u0644\u0639\u0627\u0644\u0645\"\n   pdf.text long_text.fix_arabic_glyphs.connect_arabic_letters  \n   long_text = \"Hello world\"\n   pdf.text long_text.fix_arabic_glyphs.connect_arabic_letters\n\n</code>\nand this is the output;\n\n![hello_world](https://cloud.githubusercontent.com/assets/11060374/11397806/ea8b62a0-9384-11e5-8686-cb7bb42c30fe.png)\n\nI get the same if I try this instead:\n\nlong_text = \"\u0645\u0631\u062d\u0628\u0627 \u064a\u0627 \u0627\u0644\u0639\u0627\u0644\u0645\"\npdf.text long_text.fix_arabic_glyphs.connect_arabic_letters  \nlong_text = \"Hello world\"\npdf.text long_text\n. I noticed this, but the problem is that the values I need to display are unknowns, and they could be entered by the user in English or Arabic, that's why I need something that works for both. \n. Thank you for your solution. Before trying it, I found something called fallback fonts:\n\n http://cookieshq.co.uk/posts/fallback-fonts-in-prawn/\n\nAs this link mentions, a fallback font is called when a string contains unsupported characters like Arabic. So I will try it maybe it'll work.\n. ",
    "skalb": "Looks like it's hardcoded to :normal\n\nhttps://github.com/prawnpdf/prawn/blob/master/lib/prawn/text/formatted/arranger.rb#L217\n\nWould you accept a patch to extend that to handle custom styles?\n. Maybe 'custom styles' isn't the right word, but in the PDFs we build, we use a mix of font weights (light, normal, and bold).\n\n```\npdf.font_families.update(\n       \"DejaVu Sans\" => {\n          normal: Rails.root.join('app', 'assets', 'fonts', 'DejaVuSans.ttf'),\n          thin: Rails.root.join('app', 'assets', 'fonts', 'DejaVuSans-ExtraLight.ttf'),\n          bold: Rails.root.join('app', 'assets', 'fonts', 'DejaVuSans-Bold.ttf')\n        }\n      )\npdf.font \"DejaVu Sans\"\n```\n\nSo it would be convenient if something like the following worked:\n\n```\npdf.formatted_text [\n  { text: \"Created: \", size: 10, styles: [ :thin ] }\n  { text: Time.now.strftime(\"%F\"), size: 10 }\n]\n```\n. Looks like it's hardcoded to :normal\n\nhttps://github.com/prawnpdf/prawn/blob/master/lib/prawn/text/formatted/arranger.rb#L217\n\nWould you accept a patch to extend that to handle custom styles?\n. Maybe 'custom styles' isn't the right word, but in the PDFs we build, we use a mix of font weights (light, normal, and bold).\n\n```\npdf.font_families.update(\n       \"DejaVu Sans\" => {\n          normal: Rails.root.join('app', 'assets', 'fonts', 'DejaVuSans.ttf'),\n          thin: Rails.root.join('app', 'assets', 'fonts', 'DejaVuSans-ExtraLight.ttf'),\n          bold: Rails.root.join('app', 'assets', 'fonts', 'DejaVuSans-Bold.ttf')\n        }\n      )\npdf.font \"DejaVu Sans\"\n```\n\nSo it would be convenient if something like the following worked:\n\n```\npdf.formatted_text [\n  { text: \"Created: \", size: 10, styles: [ :thin ] }\n  { text: Time.now.strftime(\"%F\"), size: 10 }\n]\n```\n. ",
    "wynksaiddestroy": "I just ran into this issue as well. To make things even worse I need to combine a custom font weight (semibold) with the italic type:\n\n```\nformatted_text [\n  { text: 'Hello World', font: 'Omnes', styles: [:semibold, :italic] }\n]\n```\n\nHas anybody came up with an idea how to fix this?\n\nThanks in advance\n. I just ran into this issue as well. To make things even worse I need to combine a custom font weight (semibold) with the italic type:\n\n```\nformatted_text [\n  { text: 'Hello World', font: 'Omnes', styles: [:semibold, :italic] }\n]\n```\n\nHas anybody came up with an idea how to fix this?\n\nThanks in advance\n. ",
    "johncip": "I can confirm that this happens in master and that your branch fixes it. Specifically, it happens when the normal variant of the two font families have the same filename.\n\nWhile I can't think of a use case for having two different font families which share a normal font, that doesn't mean that one doesn't exist, and the current behavior is confusing. FWIW I think this is a good change.\n. Hey @crazymykl -- made a PR, if it helps: https://github.com/prawnpdf/prawn/pull/963\n. Hey, when's the appropriate time to close these? After the PR makes it in, or after the next release?\n. Whoops, didn't see the rubocop.yml. Done.\n. Something like this?\n\n``` ruby\ndef apply_margin_options(options)\n  margin = Array(options[:margin])\n  sides = [:top_margin, :right_margin, :bottom_margin, :left_margin]\n\n  # Treat :margin as CSS shorthand with 1-4 values.\n  positions = { 4 => [0, 1, 2, 3], 3 => [0, 1, 2, 1],\n                2 => [0, 1, 0, 1], 1 => [0, 0, 0, 0],\n                0 => [] }[margin.length]\n\n  sides.zip(positions).each do |side, pos|\n    state.page.margins[side] = margin[pos] if pos\n\n    # :<side>_margin options take precedence over :margin\n    state.page.margins[side] = options[side] if options[side]\n  end\nend\n```\n\nDidn't put it through its paces but it should do the same thing.\n\n@crazymykl's  solution also loses the dup: https://github.com/prawnpdf/prawn/commit/2e6e4cf0a767ce91d404e5e1397eb5d964dca91e, but doesn't combine the loop. Honestly, the memory reduction strikes me as more important, anyway.\n\nI'd take the `/modify frozen/` out of your spec, though, Mike -- when you describe the specific error that shouldn't be raised, other kinds get ignored. Seems better to just have it fail on anything.\n. Anyone opposed to a new PR for this, since it can't be re-opened? Would also give me the chance to clean up the commit history a little, if that matters.\n. I can confirm that this happens in master and that your branch fixes it. Specifically, it happens when the normal variant of the two font families have the same filename.\n\nWhile I can't think of a use case for having two different font families which share a normal font, that doesn't mean that one doesn't exist, and the current behavior is confusing. FWIW I think this is a good change.\n. Hey @crazymykl -- made a PR, if it helps: https://github.com/prawnpdf/prawn/pull/963\n. Hey, when's the appropriate time to close these? After the PR makes it in, or after the next release?\n. Whoops, didn't see the rubocop.yml. Done.\n. Something like this?\n\n``` ruby\ndef apply_margin_options(options)\n  margin = Array(options[:margin])\n  sides = [:top_margin, :right_margin, :bottom_margin, :left_margin]\n\n  # Treat :margin as CSS shorthand with 1-4 values.\n  positions = { 4 => [0, 1, 2, 3], 3 => [0, 1, 2, 1],\n                2 => [0, 1, 0, 1], 1 => [0, 0, 0, 0],\n                0 => [] }[margin.length]\n\n  sides.zip(positions).each do |side, pos|\n    state.page.margins[side] = margin[pos] if pos\n\n    # :<side>_margin options take precedence over :margin\n    state.page.margins[side] = options[side] if options[side]\n  end\nend\n```\n\nDidn't put it through its paces but it should do the same thing.\n\n@crazymykl's  solution also loses the dup: https://github.com/prawnpdf/prawn/commit/2e6e4cf0a767ce91d404e5e1397eb5d964dca91e, but doesn't combine the loop. Honestly, the memory reduction strikes me as more important, anyway.\n\nI'd take the `/modify frozen/` out of your spec, though, Mike -- when you describe the specific error that shouldn't be raised, other kinds get ignored. Seems better to just have it fail on anything.\n. Anyone opposed to a new PR for this, since it can't be re-opened? Would also give me the chance to clean up the commit history a little, if that matters.\n. ",
    "imidsac": "I upload a picture on S3. I want to get the pdf file with this image. give this error. \nArgumentError (/app/publichttps://sahel-services.s3.amazonaws.com/options/avatars/1/original/maiga.png not found)\n. ``` ruby\n  def header(title=nil)\n    if @option.avatar?\n      logo = \"#{@option.avatar.path(:original)}\"\n      image logo, width: 520, height: 150, :position => :center #pour portrait A4\n    else\n      logo = \"#{Rails.root}/app/assets/images/malinuse.jpg\"\n      image logo, width: 520, height: 150, :position => :center #pour portrait A4\n    end\n\n    if title\n      text title, size: 14, style: :bold_italic, align: :center\n    end\n  end\n```\n. I'm really beginner, can you just help me?\n. ````\r\nNoMethodError - undefined method `+@' for #<Array:0x007fb8ec15b4c0>\r\nDid you mean?  +:\r\n  app/pdfs/notes.rb:74:in `block in rows_notes'\r\n  activerecord (5.0.1) lib/active_record/relation/delegation.rb:38:in `map'\r\n  app/pdfs/notes.rb:62:in `rows_notes'\r\n  app/pdfs/notes.rb:80:in `header_rows'\r\n  app/pdfs/notes.rb:43:in `table_notes'\r\n  app/pdfs/notes.rb:31:in `initialize'\r\n  app/controllers/admin/notes_controller.rb:30:in `block (2 levels) in index'\r\n  actionpack (5.0.1) lib/action_controller/metal/mime_responds.rb:201:in `respond_to'\r\n  app/controllers/admin/notes_controller.rb:20:in `index'\r\n  actionpack (5.0.1) lib/action_controller/metal/basic_implicit_render.rb:4:in `send_action'\r\n  actionpack (5.0.1) lib/abstract_controller/base.rb:188:in `process_action'\r\n  actionpack (5.0.1) lib/action_controller/metal/rendering.rb:30:in `process_action'\r\n  actionpack (5.0.1) lib/abstract_controller/callbacks.rb:20:in `block in process_action'\r\n  activesupport (5.0.1) lib/active_support/callbacks.rb:126:in `call'\r\n  activesupport (5.0.1) lib/active_support/callbacks.rb:506:in `block (2 levels) in compile'\r\n  activesupport (5.0.1) lib/active_support/callbacks.rb:455:in `call'\r\n  activesupport (5.0.1) lib/active_support/callbacks.rb:101:in `__run_callbacks__'\r\n  activesupport (5.0.1) lib/active_support/callbacks.rb:750:in `_run_process_action_callbacks'\r\n  activesupport (5.0.1) lib/active_support/callbacks.rb:90:in `run_callbacks'\r\n  actionpack (5.0.1) lib/abstract_controller/callbacks.rb:19:in `process_action'\r\n  actionpack (5.0.1) lib/action_controller/metal/rescue.rb:20:in `process_action'\r\n  actionpack (5.0.1) lib/action_controller/metal/instrumentation.rb:32:in `block in process_action'\r\n  activesupport (5.0.1) lib/active_support/notifications.rb:164:in `block in instrument'\r\n  activesupport (5.0.1) lib/active_support/notifications/instrumenter.rb:21:in `instrument'\r\n  activesupport (5.0.1) lib/active_support/notifications.rb:164:in `instrument'\r\n  actionpack (5.0.1) lib/action_controller/metal/instrumentation.rb:30:in `process_action'\r\n  actionpack (5.0.1) lib/action_controller/metal/params_wrapper.rb:248:in `process_action'\r\n  activerecord (5.0.1) lib/active_record/railties/controller_runtime.rb:18:in `process_action'\r\n  actionpack (5.0.1) lib/abstract_controller/base.rb:126:in `process'\r\n  actionview (5.0.1) lib/action_view/rendering.rb:30:in `process'\r\n  actionpack (5.0.1) lib/action_controller/metal.rb:190:in `dispatch'\r\n  actionpack (5.0.1) lib/action_controller/metal.rb:262:in `dispatch'\r\n  actionpack (5.0.1) lib/action_dispatch/routing/route_set.rb:50:in `dispatch'\r\n  actionpack (5.0.1) lib/action_dispatch/routing/route_set.rb:32:in `serve'\r\n  actionpack (5.0.1) lib/action_dispatch/journey/router.rb:39:in `block in serve'\r\n  actionpack (5.0.1) lib/action_dispatch/journey/router.rb:26:in `serve'\r\n  actionpack (5.0.1) lib/action_dispatch/routing/route_set.rb:725:in `call'\r\n  warden (1.2.6) lib/warden/manager.rb:35:in `block in call'\r\n  warden (1.2.6) lib/warden/manager.rb:34:in `call'\r\n  rack (2.0.1) lib/rack/etag.rb:25:in `call'\r\n  rack (2.0.1) lib/rack/conditional_get.rb:25:in `call'\r\n  rack (2.0.1) lib/rack/head.rb:12:in `call'\r\n  rack (2.0.1) lib/rack/session/abstract/id.rb:222:in `context'\r\n  rack (2.0.1) lib/rack/session/abstract/id.rb:216:in `call'\r\n  actionpack (5.0.1) lib/action_dispatch/middleware/cookies.rb:613:in `call'\r\n  activerecord (5.0.1) lib/active_record/migration.rb:553:in `call'\r\n  actionpack (5.0.1) lib/action_dispatch/middleware/callbacks.rb:38:in `block in call'\r\n  activesupport (5.0.1) lib/active_support/callbacks.rb:97:in `__run_callbacks__'\r\n  activesupport (5.0.1) lib/active_support/callbacks.rb:750:in `_run_call_callbacks'\r\n  activesupport (5.0.1) lib/active_support/callbacks.rb:90:in `run_callbacks'\r\n  actionpack (5.0.1) lib/action_dispatch/middleware/callbacks.rb:36:in `call'\r\n  actionpack (5.0.1) lib/action_dispatch/middleware/executor.rb:12:in `call'\r\n  actionpack (5.0.1) lib/action_dispatch/middleware/remote_ip.rb:79:in `call'\r\n  better_errors (2.1.1) lib/better_errors/middleware.rb:84:in `protected_app_call'\r\n  better_errors (2.1.1) lib/better_errors/middleware.rb:79:in `better_errors_call'\r\n  better_errors (2.1.1) lib/better_errors/middleware.rb:57:in `call'\r\n  actionpack (5.0.1) lib/action_dispatch/middleware/debug_exceptions.rb:49:in `call'\r\n  web-console (3.4.0) lib/web_console/middleware.rb:135:in `call_app'\r\n  web-console (3.4.0) lib/web_console/middleware.rb:28:in `block in call'\r\n  web-console (3.4.0) lib/web_console/middleware.rb:18:in `call'\r\n  actionpack (5.0.1) lib/action_dispatch/middleware/show_exceptions.rb:31:in `call'\r\n  railties (5.0.1) lib/rails/rack/logger.rb:36:in `call_app'\r\n  railties (5.0.1) lib/rails/rack/logger.rb:24:in `block in call'\r\n  activesupport (5.0.1) lib/active_support/tagged_logging.rb:69:in `block in tagged'\r\n  activesupport (5.0.1) lib/active_support/tagged_logging.rb:26:in `tagged'\r\n  activesupport (5.0.1) lib/active_support/tagged_logging.rb:69:in `tagged'\r\n  railties (5.0.1) lib/rails/rack/logger.rb:24:in `call'\r\n  sprockets-rails (3.2.0) lib/sprockets/rails/quiet_assets.rb:13:in `call'\r\n  actionpack (5.0.1) lib/action_dispatch/middleware/request_id.rb:24:in `call'\r\n  rack (2.0.1) lib/rack/method_override.rb:22:in `call'\r\n  rack (2.0.1) lib/rack/runtime.rb:22:in `call'\r\n  activesupport (5.0.1) lib/active_support/cache/strategy/local_cache_middleware.rb:28:in `call'\r\n  actionpack (5.0.1) lib/action_dispatch/middleware/executor.rb:12:in `call'\r\n  actionpack (5.0.1) lib/action_dispatch/middleware/static.rb:136:in `call'\r\n  rack (2.0.1) lib/rack/sendfile.rb:111:in `call'\r\n  railties (5.0.1) lib/rails/engine.rb:522:in `call'\r\n  puma (3.6.2) lib/puma/configuration.rb:225:in `call'\r\n  puma (3.6.2) lib/puma/server.rb:578:in `handle_request'\r\n  puma (3.6.2) lib/puma/server.rb:415:in `process_client'\r\n  puma (3.6.2) lib/puma/server.rb:275:in `block in run'\r\n  puma (3.6.2) lib/puma/thread_pool.rb:116:in `block in spawn_thread'\r\n````. Please help.. I upload a picture on S3. I want to get the pdf file with this image. give this error. \nArgumentError (/app/publichttps://sahel-services.s3.amazonaws.com/options/avatars/1/original/maiga.png not found)\n. ``` ruby\n  def header(title=nil)\n    if @option.avatar?\n      logo = \"#{@option.avatar.path(:original)}\"\n      image logo, width: 520, height: 150, :position => :center #pour portrait A4\n    else\n      logo = \"#{Rails.root}/app/assets/images/malinuse.jpg\"\n      image logo, width: 520, height: 150, :position => :center #pour portrait A4\n    end\n\n    if title\n      text title, size: 14, style: :bold_italic, align: :center\n    end\n  end\n```\n. I'm really beginner, can you just help me?\n. ````\r\nNoMethodError - undefined method `+@' for #<Array:0x007fb8ec15b4c0>\r\nDid you mean?  +:\r\n  app/pdfs/notes.rb:74:in `block in rows_notes'\r\n  activerecord (5.0.1) lib/active_record/relation/delegation.rb:38:in `map'\r\n  app/pdfs/notes.rb:62:in `rows_notes'\r\n  app/pdfs/notes.rb:80:in `header_rows'\r\n  app/pdfs/notes.rb:43:in `table_notes'\r\n  app/pdfs/notes.rb:31:in `initialize'\r\n  app/controllers/admin/notes_controller.rb:30:in `block (2 levels) in index'\r\n  actionpack (5.0.1) lib/action_controller/metal/mime_responds.rb:201:in `respond_to'\r\n  app/controllers/admin/notes_controller.rb:20:in `index'\r\n  actionpack (5.0.1) lib/action_controller/metal/basic_implicit_render.rb:4:in `send_action'\r\n  actionpack (5.0.1) lib/abstract_controller/base.rb:188:in `process_action'\r\n  actionpack (5.0.1) lib/action_controller/metal/rendering.rb:30:in `process_action'\r\n  actionpack (5.0.1) lib/abstract_controller/callbacks.rb:20:in `block in process_action'\r\n  activesupport (5.0.1) lib/active_support/callbacks.rb:126:in `call'\r\n  activesupport (5.0.1) lib/active_support/callbacks.rb:506:in `block (2 levels) in compile'\r\n  activesupport (5.0.1) lib/active_support/callbacks.rb:455:in `call'\r\n  activesupport (5.0.1) lib/active_support/callbacks.rb:101:in `__run_callbacks__'\r\n  activesupport (5.0.1) lib/active_support/callbacks.rb:750:in `_run_process_action_callbacks'\r\n  activesupport (5.0.1) lib/active_support/callbacks.rb:90:in `run_callbacks'\r\n  actionpack (5.0.1) lib/abstract_controller/callbacks.rb:19:in `process_action'\r\n  actionpack (5.0.1) lib/action_controller/metal/rescue.rb:20:in `process_action'\r\n  actionpack (5.0.1) lib/action_controller/metal/instrumentation.rb:32:in `block in process_action'\r\n  activesupport (5.0.1) lib/active_support/notifications.rb:164:in `block in instrument'\r\n  activesupport (5.0.1) lib/active_support/notifications/instrumenter.rb:21:in `instrument'\r\n  activesupport (5.0.1) lib/active_support/notifications.rb:164:in `instrument'\r\n  actionpack (5.0.1) lib/action_controller/metal/instrumentation.rb:30:in `process_action'\r\n  actionpack (5.0.1) lib/action_controller/metal/params_wrapper.rb:248:in `process_action'\r\n  activerecord (5.0.1) lib/active_record/railties/controller_runtime.rb:18:in `process_action'\r\n  actionpack (5.0.1) lib/abstract_controller/base.rb:126:in `process'\r\n  actionview (5.0.1) lib/action_view/rendering.rb:30:in `process'\r\n  actionpack (5.0.1) lib/action_controller/metal.rb:190:in `dispatch'\r\n  actionpack (5.0.1) lib/action_controller/metal.rb:262:in `dispatch'\r\n  actionpack (5.0.1) lib/action_dispatch/routing/route_set.rb:50:in `dispatch'\r\n  actionpack (5.0.1) lib/action_dispatch/routing/route_set.rb:32:in `serve'\r\n  actionpack (5.0.1) lib/action_dispatch/journey/router.rb:39:in `block in serve'\r\n  actionpack (5.0.1) lib/action_dispatch/journey/router.rb:26:in `serve'\r\n  actionpack (5.0.1) lib/action_dispatch/routing/route_set.rb:725:in `call'\r\n  warden (1.2.6) lib/warden/manager.rb:35:in `block in call'\r\n  warden (1.2.6) lib/warden/manager.rb:34:in `call'\r\n  rack (2.0.1) lib/rack/etag.rb:25:in `call'\r\n  rack (2.0.1) lib/rack/conditional_get.rb:25:in `call'\r\n  rack (2.0.1) lib/rack/head.rb:12:in `call'\r\n  rack (2.0.1) lib/rack/session/abstract/id.rb:222:in `context'\r\n  rack (2.0.1) lib/rack/session/abstract/id.rb:216:in `call'\r\n  actionpack (5.0.1) lib/action_dispatch/middleware/cookies.rb:613:in `call'\r\n  activerecord (5.0.1) lib/active_record/migration.rb:553:in `call'\r\n  actionpack (5.0.1) lib/action_dispatch/middleware/callbacks.rb:38:in `block in call'\r\n  activesupport (5.0.1) lib/active_support/callbacks.rb:97:in `__run_callbacks__'\r\n  activesupport (5.0.1) lib/active_support/callbacks.rb:750:in `_run_call_callbacks'\r\n  activesupport (5.0.1) lib/active_support/callbacks.rb:90:in `run_callbacks'\r\n  actionpack (5.0.1) lib/action_dispatch/middleware/callbacks.rb:36:in `call'\r\n  actionpack (5.0.1) lib/action_dispatch/middleware/executor.rb:12:in `call'\r\n  actionpack (5.0.1) lib/action_dispatch/middleware/remote_ip.rb:79:in `call'\r\n  better_errors (2.1.1) lib/better_errors/middleware.rb:84:in `protected_app_call'\r\n  better_errors (2.1.1) lib/better_errors/middleware.rb:79:in `better_errors_call'\r\n  better_errors (2.1.1) lib/better_errors/middleware.rb:57:in `call'\r\n  actionpack (5.0.1) lib/action_dispatch/middleware/debug_exceptions.rb:49:in `call'\r\n  web-console (3.4.0) lib/web_console/middleware.rb:135:in `call_app'\r\n  web-console (3.4.0) lib/web_console/middleware.rb:28:in `block in call'\r\n  web-console (3.4.0) lib/web_console/middleware.rb:18:in `call'\r\n  actionpack (5.0.1) lib/action_dispatch/middleware/show_exceptions.rb:31:in `call'\r\n  railties (5.0.1) lib/rails/rack/logger.rb:36:in `call_app'\r\n  railties (5.0.1) lib/rails/rack/logger.rb:24:in `block in call'\r\n  activesupport (5.0.1) lib/active_support/tagged_logging.rb:69:in `block in tagged'\r\n  activesupport (5.0.1) lib/active_support/tagged_logging.rb:26:in `tagged'\r\n  activesupport (5.0.1) lib/active_support/tagged_logging.rb:69:in `tagged'\r\n  railties (5.0.1) lib/rails/rack/logger.rb:24:in `call'\r\n  sprockets-rails (3.2.0) lib/sprockets/rails/quiet_assets.rb:13:in `call'\r\n  actionpack (5.0.1) lib/action_dispatch/middleware/request_id.rb:24:in `call'\r\n  rack (2.0.1) lib/rack/method_override.rb:22:in `call'\r\n  rack (2.0.1) lib/rack/runtime.rb:22:in `call'\r\n  activesupport (5.0.1) lib/active_support/cache/strategy/local_cache_middleware.rb:28:in `call'\r\n  actionpack (5.0.1) lib/action_dispatch/middleware/executor.rb:12:in `call'\r\n  actionpack (5.0.1) lib/action_dispatch/middleware/static.rb:136:in `call'\r\n  rack (2.0.1) lib/rack/sendfile.rb:111:in `call'\r\n  railties (5.0.1) lib/rails/engine.rb:522:in `call'\r\n  puma (3.6.2) lib/puma/configuration.rb:225:in `call'\r\n  puma (3.6.2) lib/puma/server.rb:578:in `handle_request'\r\n  puma (3.6.2) lib/puma/server.rb:415:in `process_client'\r\n  puma (3.6.2) lib/puma/server.rb:275:in `block in run'\r\n  puma (3.6.2) lib/puma/thread_pool.rb:116:in `block in spawn_thread'\r\n````. Please help.. ",
    "cdekker": "Still running into this problem from time to time. Also happens when a bounding box has insufficient size for the content. However, I can't seem to figure out why my exception handling block will not pick it up. Even when I specifically catch the `PDF::Core::Errors::EmptyGraphicStateStack` exception\n. The exception not being handled was an error on my part. It occured in a part that was outside of my block. However, I reproduced the other issue where a CORRECTLY caught exception causes the rest of the document to not be rendered.\n\nQuick example of 3 blocks:\n- first is fine\n- second gives exception\n- third is fine but doesn't get rendered after caught exception\n\n```\n  def test\n    doc = Prawn::Document.new(:page_size => 'A4', :page_layout => :portrait)\n\n    begin\n      # Text wont fit. Pushed to next page\n      doc.bounding_box [50, 50], :width  => 50, :height => 50 do\n        doc.text 'Looooooooooooooooooooooooooong text' * 10\n      end\n    rescue\n    end\n\n    begin\n      # Text wont fit. Repeat every page. EXCEPTION!\n      doc.repeat :all do\n        doc.bounding_box [200, 50], :width  => 50, :height => 50 do\n          doc.text 'Looooooooooooooooooooooooooong text' * 10\n        end\n      end\n    rescue\n    end\n\n    begin\n      # Standard fitting text in box, repeated\n      # WILL NOT BE RENDERED BECAUSE OF PREVIOUS (CAUGHT) EXCEPTION\n      doc.repeat :all do\n        doc.bounding_box [350, 50], :width  => 50, :height => 50 do\n          doc.text 'fitting!'\n        end\n      end\n    rescue\n    end\n\n    send_data doc.render, type: :pdf, disposition: 'inline'\n  end\n```\n. Are TrueTypeFonts still supported? I tested with both\n`font(Rails.root.join('app/assets/fonts/DejaVuSans.ttf').to_s)`\nand the longer `font_families.update()` method, but I always get the 'Bad font family' exception.\n\nThe .ttf file is obviously present at that location, manually downloaded from the git repo.\n. Still running into this problem from time to time. Also happens when a bounding box has insufficient size for the content. However, I can't seem to figure out why my exception handling block will not pick it up. Even when I specifically catch the `PDF::Core::Errors::EmptyGraphicStateStack` exception\n. The exception not being handled was an error on my part. It occured in a part that was outside of my block. However, I reproduced the other issue where a CORRECTLY caught exception causes the rest of the document to not be rendered.\n\nQuick example of 3 blocks:\n- first is fine\n- second gives exception\n- third is fine but doesn't get rendered after caught exception\n\n```\n  def test\n    doc = Prawn::Document.new(:page_size => 'A4', :page_layout => :portrait)\n\n    begin\n      # Text wont fit. Pushed to next page\n      doc.bounding_box [50, 50], :width  => 50, :height => 50 do\n        doc.text 'Looooooooooooooooooooooooooong text' * 10\n      end\n    rescue\n    end\n\n    begin\n      # Text wont fit. Repeat every page. EXCEPTION!\n      doc.repeat :all do\n        doc.bounding_box [200, 50], :width  => 50, :height => 50 do\n          doc.text 'Looooooooooooooooooooooooooong text' * 10\n        end\n      end\n    rescue\n    end\n\n    begin\n      # Standard fitting text in box, repeated\n      # WILL NOT BE RENDERED BECAUSE OF PREVIOUS (CAUGHT) EXCEPTION\n      doc.repeat :all do\n        doc.bounding_box [350, 50], :width  => 50, :height => 50 do\n          doc.text 'fitting!'\n        end\n      end\n    rescue\n    end\n\n    send_data doc.render, type: :pdf, disposition: 'inline'\n  end\n```\n. Are TrueTypeFonts still supported? I tested with both\n`font(Rails.root.join('app/assets/fonts/DejaVuSans.ttf').to_s)`\nand the longer `font_families.update()` method, but I always get the 'Bad font family' exception.\n\nThe .ttf file is obviously present at that location, manually downloaded from the git repo.\n. ",
    "simonetma": "Here is the error i get when I try to generate with the state uncommented. If I comment it out state, the pdf attached is what get's generated. The city and zipcode are fine.\n\ninvoice_pdf.rb\n\n``` ruby\nclass InvoicePdf < Prawn::Document\n\n  def initialize(billing, view)\n    super()\n    @billing = billing\n    @view = view\n    moniker\n    logo\n    due\n    text \n    due\n    client_name\n    address\n    city \n     state\n    zipcode\n    phone\n    services \n    description\n    cost\n    fee\n    total_verbiage\n    total\n    payment\n    thanks\n  end\n\n  def logo\n    logopath =  \"#{Rails.root}/app/assets/images/tree_with_roots.jpg\"\n    image logopath, :width => 75, :height => 55\n    move_down 10\n    draw_text \"Billing Statement For: \", :at => [0, 575], size: 16\n    stroke_color \"0000000\"\n        stroke do\n        move_down 10\n        horizontal_rule\n        end\n    end\n\n    def text\n        draw_text \"Invoice # #{@billing.id}\", :at => [0, 600], size: 12\n    end\n\n    def moniker\n        draw_text \"Natural Roots Entertainment\", :at => [125, 680], size: 24\n    end\n\n    def client_name\n        font \"Times-Roman\" \n        move_down 10\n    draw_text \"#{@billing.client_name} \", :at => [0, 550], size: 16 \n    end\n\n    def address\n        move_down 10\n    text_box \"#{@billing.address} \", :at => [0, 545],:width => 200, :height => 14, size: 14 \n    end\n\n    def city\n        move_down 10\n    draw_text \"#{@billing.city} \", :at => [0, 520],:width => 100, :height => 14, size: 14   \n    end\n\n    def state\n     move_down 10\n   draw_text \"#{@billing.state} \", :at => [110, 530], size: 16  \n    end\n\n    def zipcode\n        move_down 10\n    draw_text \"#{@billing.zipcode} \", :at => [0, 505],:width => 50, :height => 14, size: 14 \n    end\n\n    def phone\n        move_down 10\n    draw_text \"#{@billing.phone} \", :at => [0, 490], size: 14   \n    end\n\n    def due\n        move_down 10\n    draw_text \" Payment Due Date: #{ @billing.payment_due.strftime('%m/%d/%Y')} \", :at => [300, 600], size: 14  \n    end\n\n    def services\n        move_down 10\n    draw_text \" Description of Services: \", :at => [0, 450], size: 14   \n    end\n\n    def description\n        move_down 10\n        text_box \"#{ @billing.description_of_services} \", :at => [3, 430], :height => 200, :width => 250, size: 14  \n    end\n\n    def cost\n        move_down 10\n        draw_text \" Amount Owed \", :at => [300, 450], size: 14  \n    end\n\n    def fee\n        draw_text \"$#{@billing.amount_owed_usd} \", :at => [305, 420], size: 14\n         stroke_color \"0000000\"\n        stroke do\n            move_down 100\n        horizontal_rule\n        end \n    end\n\n    def payment\n        move_down 10\n        draw_text \"Please visit http://www.naturalroots.tv/payments for secure online payment via Stripe.\", :at => [0, 80], size: 14    \n    end \n\n    def thanks\n        move_down 10\n        text_box \"We thank you for choosing Natural Roots Entertainment for your film production needs and we look forward to building a lasting relationship with you.\", :at => [0, 60], size: 12  \n    end\n\n    def total_verbiage\n        draw_text \" Total Balance \", :at => [0, 180], size: 14  \n    end\n    def total\n        move_down 10\n        draw_text \"$#{@billing.amount_owed_usd} \", :at => [300, 180], size: 14\n        stroke_color \"0000000\"\n        stroke do\n        horizontal_line 0, 500, :at => 200\n        end\n    end\nend \n```\n\n<img width=\"1014\" alt=\"screen shot 2016-01-18 at 8 18 10 am\" src=\"https://cloud.githubusercontent.com/assets/15094598/12392341/37085442-bdbc-11e5-878c-47ad9318ceea.png\">\n\n[billings_1 (14).pdf](https://files.zenhub.io/569ce686490c91ab5cb6195c)\nUploaded using [**ZenHub.io**](http://www.zenhub.io)\n. Sorry about that empty message. I haven't had a change to try out the\nsolution, but im pretty sure that's what it is if you want to close the\nissue.\n\nOn Tue, Jan 19, 2016 at 3:04 PM, Simone Battiste-Alleyne <\nsimone.battiste-alleyne@tma1.com> wrote:\n\n> On Tue, Jan 19, 2016 at 3:04 PM, Alexander Mankuta <\n> notifications@github.com> wrote:\n> \n> > @softe1988 https://github.com/softe1988 @simonetma\n> > https://github.com/simonetma Is the issue resolved for you?\n> > \n> > \u2014\n> > Reply to this email directly or view it on GitHub\n> > https://github.com/prawnpdf/prawn/issues/939#issuecomment-172970066.\n> \n> ## \n> \n> Best Regards,\n> Simone Battiste-Alleyne\n> Apprentice Software Developer\n> Tax Management Associates, Inc.\n> 2225 Coronation Blvd.\n> Charlotte, NC 28227\n> simone@tma1.com\n> www.tma1.com\n\n## \n\nBest Regards,\nSimone Battiste-Alleyne\nApprentice Software Developer\nTax Management Associates, Inc.\n2225 Coronation Blvd.\nCharlotte, NC 28227\nsimone@tma1.com\nwww.tma1.com\n. sounds good thanks!\n\nOn Tue, Jan 19, 2016 at 3:07 PM, Alexander Mankuta <notifications@github.com\n\n> wrote:\n> \n> @simonetma https://github.com/simonetma No problems. I'll close it now.\n> Feel free to reopen if that doesn't solve your issue.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/prawnpdf/prawn/issues/939#issuecomment-172970752.\n\n## \n\nBest Regards,\nSimone Battiste-Alleyne\nApprentice Software Developer\nTax Management Associates, Inc.\n2225 Coronation Blvd.\nCharlotte, NC 28227\nsimone@tma1.com\nwww.tma1.com\n. Here is the error i get when I try to generate with the state uncommented. If I comment it out state, the pdf attached is what get's generated. The city and zipcode are fine.\n\ninvoice_pdf.rb\n\n``` ruby\nclass InvoicePdf < Prawn::Document\n\n  def initialize(billing, view)\n    super()\n    @billing = billing\n    @view = view\n    moniker\n    logo\n    due\n    text \n    due\n    client_name\n    address\n    city \n     state\n    zipcode\n    phone\n    services \n    description\n    cost\n    fee\n    total_verbiage\n    total\n    payment\n    thanks\n  end\n\n  def logo\n    logopath =  \"#{Rails.root}/app/assets/images/tree_with_roots.jpg\"\n    image logopath, :width => 75, :height => 55\n    move_down 10\n    draw_text \"Billing Statement For: \", :at => [0, 575], size: 16\n    stroke_color \"0000000\"\n        stroke do\n        move_down 10\n        horizontal_rule\n        end\n    end\n\n    def text\n        draw_text \"Invoice # #{@billing.id}\", :at => [0, 600], size: 12\n    end\n\n    def moniker\n        draw_text \"Natural Roots Entertainment\", :at => [125, 680], size: 24\n    end\n\n    def client_name\n        font \"Times-Roman\" \n        move_down 10\n    draw_text \"#{@billing.client_name} \", :at => [0, 550], size: 16 \n    end\n\n    def address\n        move_down 10\n    text_box \"#{@billing.address} \", :at => [0, 545],:width => 200, :height => 14, size: 14 \n    end\n\n    def city\n        move_down 10\n    draw_text \"#{@billing.city} \", :at => [0, 520],:width => 100, :height => 14, size: 14   \n    end\n\n    def state\n     move_down 10\n   draw_text \"#{@billing.state} \", :at => [110, 530], size: 16  \n    end\n\n    def zipcode\n        move_down 10\n    draw_text \"#{@billing.zipcode} \", :at => [0, 505],:width => 50, :height => 14, size: 14 \n    end\n\n    def phone\n        move_down 10\n    draw_text \"#{@billing.phone} \", :at => [0, 490], size: 14   \n    end\n\n    def due\n        move_down 10\n    draw_text \" Payment Due Date: #{ @billing.payment_due.strftime('%m/%d/%Y')} \", :at => [300, 600], size: 14  \n    end\n\n    def services\n        move_down 10\n    draw_text \" Description of Services: \", :at => [0, 450], size: 14   \n    end\n\n    def description\n        move_down 10\n        text_box \"#{ @billing.description_of_services} \", :at => [3, 430], :height => 200, :width => 250, size: 14  \n    end\n\n    def cost\n        move_down 10\n        draw_text \" Amount Owed \", :at => [300, 450], size: 14  \n    end\n\n    def fee\n        draw_text \"$#{@billing.amount_owed_usd} \", :at => [305, 420], size: 14\n         stroke_color \"0000000\"\n        stroke do\n            move_down 100\n        horizontal_rule\n        end \n    end\n\n    def payment\n        move_down 10\n        draw_text \"Please visit http://www.naturalroots.tv/payments for secure online payment via Stripe.\", :at => [0, 80], size: 14    \n    end \n\n    def thanks\n        move_down 10\n        text_box \"We thank you for choosing Natural Roots Entertainment for your film production needs and we look forward to building a lasting relationship with you.\", :at => [0, 60], size: 12  \n    end\n\n    def total_verbiage\n        draw_text \" Total Balance \", :at => [0, 180], size: 14  \n    end\n    def total\n        move_down 10\n        draw_text \"$#{@billing.amount_owed_usd} \", :at => [300, 180], size: 14\n        stroke_color \"0000000\"\n        stroke do\n        horizontal_line 0, 500, :at => 200\n        end\n    end\nend \n```\n\n<img width=\"1014\" alt=\"screen shot 2016-01-18 at 8 18 10 am\" src=\"https://cloud.githubusercontent.com/assets/15094598/12392341/37085442-bdbc-11e5-878c-47ad9318ceea.png\">\n\n[billings_1 (14).pdf](https://files.zenhub.io/569ce686490c91ab5cb6195c)\nUploaded using [**ZenHub.io**](http://www.zenhub.io)\n. Sorry about that empty message. I haven't had a change to try out the\nsolution, but im pretty sure that's what it is if you want to close the\nissue.\n\nOn Tue, Jan 19, 2016 at 3:04 PM, Simone Battiste-Alleyne <\nsimone.battiste-alleyne@tma1.com> wrote:\n\n> On Tue, Jan 19, 2016 at 3:04 PM, Alexander Mankuta <\n> notifications@github.com> wrote:\n> \n> > @softe1988 https://github.com/softe1988 @simonetma\n> > https://github.com/simonetma Is the issue resolved for you?\n> > \n> > \u2014\n> > Reply to this email directly or view it on GitHub\n> > https://github.com/prawnpdf/prawn/issues/939#issuecomment-172970066.\n> \n> ## \n> \n> Best Regards,\n> Simone Battiste-Alleyne\n> Apprentice Software Developer\n> Tax Management Associates, Inc.\n> 2225 Coronation Blvd.\n> Charlotte, NC 28227\n> simone@tma1.com\n> www.tma1.com\n\n## \n\nBest Regards,\nSimone Battiste-Alleyne\nApprentice Software Developer\nTax Management Associates, Inc.\n2225 Coronation Blvd.\nCharlotte, NC 28227\nsimone@tma1.com\nwww.tma1.com\n. sounds good thanks!\n\nOn Tue, Jan 19, 2016 at 3:07 PM, Alexander Mankuta <notifications@github.com\n\n> wrote:\n> \n> @simonetma https://github.com/simonetma No problems. I'll close it now.\n> Feel free to reopen if that doesn't solve your issue.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/prawnpdf/prawn/issues/939#issuecomment-172970752.\n\n## \n\nBest Regards,\nSimone Battiste-Alleyne\nApprentice Software Developer\nTax Management Associates, Inc.\n2225 Coronation Blvd.\nCharlotte, NC 28227\nsimone@tma1.com\nwww.tma1.com\n. ",
    "jobygoude": "I would extract AcroForm attributes of Pdf-Form to fill with text or image. \n. I would extract AcroForm attributes of Pdf-Form to fill with text or image. \n. ",
    "jackcohen5": "Hey @siannopollo I'm having this issue as well, did you get anywhere with this?\n. Hey @siannopollo I'm having this issue as well, did you get anywhere with this?\n. ",
    "siannopollo": "@jackcohen5 Since there was no answer on this I had to just work-around the problem by cropping the images so they will adhere to our size constraints. So when we create the images from PDF we run those images through ImageMagick (using the `convert` command) so that we get the exact dimensions we want. Our ruby code looks something like this:\n\n```\nio = IO.popen ['convert', path, '-crop', \"#{width}x#{height}+0+0\", new_path]\nProcess.wait io.pid\n```\n\nIt would be nice if Prawn just handled the odd-shaped image properly, but this work-around is pretty easy to manage and ensures we always get the dimensions we want. Hope this helps.\n. @jackcohen5 Since there was no answer on this I had to just work-around the problem by cropping the images so they will adhere to our size constraints. So when we create the images from PDF we run those images through ImageMagick (using the `convert` command) so that we get the exact dimensions we want. Our ruby code looks something like this:\n\n```\nio = IO.popen ['convert', path, '-crop', \"#{width}x#{height}+0+0\", new_path]\nProcess.wait io.pid\n```\n\nIt would be nice if Prawn just handled the odd-shaped image properly, but this work-around is pretty easy to manage and ensures we always get the dimensions we want. Hope this helps.\n. ",
    "jaredbeck": "Hi Alexander, this is obviously not urgent, but could you cut a new release of prawn so that ttfunk disappears from my `bundle outdated` list? Thanks :heart:. Hi Alexander, this is obviously not urgent, but could you cut a new release of prawn so that ttfunk disappears from my `bundle outdated` list? Thanks :heart:. ",
    "xavier": "+1\n. +1\n. ",
    "twobitfool": "@practicingruby -- Thank you for an amazing PDF library :)\n. @practicingruby -- Thank you for an amazing PDF library :)\n. ",
    "robertpanzer": "Hi,\n\nmy 2 cents on this:\n\n> Now some stats about JRuby usage. There's no definite data as for how many people actually using Prawn with JRuby and JRuby 1.7 specifically. Though, I gathered some numbers that might give an estimate.\n> \n> Main (this) Prawn repository has 607 closed, and 44 open issues (651 total). Only 11 of them mention JRuby. That's about 1.7%.\n\nI seriously question these numbers.\nI think the user base of asciidoctorj-pdf is huge!\nEvery project that renders PDF from Asciidoctor using the asciidoctor-maven org asciidoctor-gradle plugin will use the combination of Prawn and JRuby.\nAnd I think that users who have issues file them against asciidoctor-pdf, so that these issues never reach the prawn project.\n\nSwitching to JRuby 9k is a No-No at the moment because JRuby 9K doesn't work reliably on Windows yet and you will always have some guys in a project using Windows. \n(Every version of JRuby 9K has different issues on Windows, but there's no version that runs fine)\n\nOn the other hand using the old version 1.3 of Prawn still has an issue that prevents setting a background image for a title page.\nThis makes asciidoctorj-pdf not being able to provide a professional documentation even though Dan has made such an awesome work on asciidoctor-pdf.\n\nTo sum it up I would really like to see a Prawn version that still runs on JRuby 1.7.\n\n(I hope I didn't sound too complaining, but as one of the devs of AsciidoctorJ-PDF I am really passionate about this:) )\n\nCheers\nRobert\n. Hi,\n\nmy 2 cents on this:\n\n> Now some stats about JRuby usage. There's no definite data as for how many people actually using Prawn with JRuby and JRuby 1.7 specifically. Though, I gathered some numbers that might give an estimate.\n> \n> Main (this) Prawn repository has 607 closed, and 44 open issues (651 total). Only 11 of them mention JRuby. That's about 1.7%.\n\nI seriously question these numbers.\nI think the user base of asciidoctorj-pdf is huge!\nEvery project that renders PDF from Asciidoctor using the asciidoctor-maven org asciidoctor-gradle plugin will use the combination of Prawn and JRuby.\nAnd I think that users who have issues file them against asciidoctor-pdf, so that these issues never reach the prawn project.\n\nSwitching to JRuby 9k is a No-No at the moment because JRuby 9K doesn't work reliably on Windows yet and you will always have some guys in a project using Windows. \n(Every version of JRuby 9K has different issues on Windows, but there's no version that runs fine)\n\nOn the other hand using the old version 1.3 of Prawn still has an issue that prevents setting a background image for a title page.\nThis makes asciidoctorj-pdf not being able to provide a professional documentation even though Dan has made such an awesome work on asciidoctor-pdf.\n\nTo sum it up I would really like to see a Prawn version that still runs on JRuby 1.7.\n\n(I hope I didn't sound too complaining, but as one of the devs of AsciidoctorJ-PDF I am really passionate about this:) )\n\nCheers\nRobert\n. ",
    "headius": "A few clarifications:\n\n> Main (this) Prawn repository has 607 closed, and 44 open issues (651 total). Only 11 of them mention JRuby. That's about 1.7%.\n> \n> Groups has 1753 threads. Only 27 threads mention JRuby. That's about 1.5%.\n\nJRuby almost always hides well as a subset of Ruby users, because most JRuby users don't report they're JRuby users until something is obviously a JRuby issue. I would _expect_ JRuby's mention count to be low in the issue tracker for a pure-Ruby project.\n\nJRuby users also have some very fast, very complete JVM-based PDF libraries available to them, like itext, and obviously those users won't show up here.\n\n> Here's last year stats from Semaphore\n\nThese stats are always a bit questionable coming from one company, since they only reflect apps deployed or connected to that company's systems in some way. Those results will only reflect the composition of a very specific subset of users. In this case, 2014-2015 was obviously a big time for people (using Semaphore) transitioning to 2.x versions of Ruby, which JRuby did not support. That's not the case anymore.\n\n> What we subsequently learned is that 2.0 mode in JRuby 1.7 is severely incomplete.\n\nJRuby 1.7's 2.0 mode was always considered (and declared) experimental and it only implemented a few rudimentary Ruby 2.0 features. It took a while to get JRuby 9k out there, but we're now only a few months behind CRuby. JRuby 9.1 will be out in the next few weeks supporting Ruby 2.3, which was only released a couple months ago.\n\n> Switching to JRuby 9k is a No-No at the moment because JRuby 9K doesn't work reliably on Windows yet and you will always have some guys in a project using Windows.\n\nLet us know what issues are blocking a move to 9k and we'll prioritize them. @enebo has been working on getting Windows compat back where it should be for next releases.\n\n> The \"bleeding edge\" of JRuby is unfortunately the trailing edge of core Ruby.\n\nThis is no longer true at all. The latest released JRuby (9.0.5) supports Ruby 2.2 and we'll have a release of JRuby 9.1 with Ruby 2.3 support shortly.\n\n## \n\nFinally, I just want to reiterate that if any issues keep folks from moving to 9k, we need to know those issues are blockers so we can fix them. We're only planning on supporting the 1.7 line until the end of the year, and 9k+ is the way of the future.\n. A few clarifications:\n\n> Main (this) Prawn repository has 607 closed, and 44 open issues (651 total). Only 11 of them mention JRuby. That's about 1.7%.\n> \n> Groups has 1753 threads. Only 27 threads mention JRuby. That's about 1.5%.\n\nJRuby almost always hides well as a subset of Ruby users, because most JRuby users don't report they're JRuby users until something is obviously a JRuby issue. I would _expect_ JRuby's mention count to be low in the issue tracker for a pure-Ruby project.\n\nJRuby users also have some very fast, very complete JVM-based PDF libraries available to them, like itext, and obviously those users won't show up here.\n\n> Here's last year stats from Semaphore\n\nThese stats are always a bit questionable coming from one company, since they only reflect apps deployed or connected to that company's systems in some way. Those results will only reflect the composition of a very specific subset of users. In this case, 2014-2015 was obviously a big time for people (using Semaphore) transitioning to 2.x versions of Ruby, which JRuby did not support. That's not the case anymore.\n\n> What we subsequently learned is that 2.0 mode in JRuby 1.7 is severely incomplete.\n\nJRuby 1.7's 2.0 mode was always considered (and declared) experimental and it only implemented a few rudimentary Ruby 2.0 features. It took a while to get JRuby 9k out there, but we're now only a few months behind CRuby. JRuby 9.1 will be out in the next few weeks supporting Ruby 2.3, which was only released a couple months ago.\n\n> Switching to JRuby 9k is a No-No at the moment because JRuby 9K doesn't work reliably on Windows yet and you will always have some guys in a project using Windows.\n\nLet us know what issues are blocking a move to 9k and we'll prioritize them. @enebo has been working on getting Windows compat back where it should be for next releases.\n\n> The \"bleeding edge\" of JRuby is unfortunately the trailing edge of core Ruby.\n\nThis is no longer true at all. The latest released JRuby (9.0.5) supports Ruby 2.2 and we'll have a release of JRuby 9.1 with Ruby 2.3 support shortly.\n\n## \n\nFinally, I just want to reiterate that if any issues keep folks from moving to 9k, we need to know those issues are blockers so we can fix them. We're only planning on supporting the 1.7 line until the end of the year, and 9k+ is the way of the future.\n. ",
    "enebo": "@practicingruby we will have a 2.3 compatible release out this month too.  So our overlap window keeps getting smaller wrt C Ruby.  2.0 support itself took longer because we completely replaced our runtime system so it was a big one-off cost which made the 1.7 -> 9k transition much longer than it should have been.  It is unfortunate that cost has caused some friction...\n. @practicingruby we will have a 2.3 compatible release out this month too.  So our overlap window keeps getting smaller wrt C Ruby.  2.0 support itself took longer because we completely replaced our runtime system so it was a big one-off cost which made the 1.7 -> 9k transition much longer than it should have been.  It is unfortunate that cost has caused some friction...\n. ",
    "nynhex": "Oh and I apologize in advance if this should be a stack question, but I figured the folks here would have a  quick answer.  Cheers! \ud83d\udc4d \n. Thanks so much for your answer.  What's the best way to print a grid so I have a guideline? I've read the docs but there's a lot to cover. :)\n. Oh and I apologize in advance if this should be a stack question, but I figured the folks here would have a  quick answer.  Cheers! \ud83d\udc4d \n. Thanks so much for your answer.  What's the best way to print a grid so I have a guideline? I've read the docs but there's a lot to cover. :)\n. ",
    "cgrepo": "first u need to register the mime type in \r\nconfig/initializers/mime_types.rb\r\n  Mime::Type.register \"application/pdf\", :pdf. first u need to register the mime type in \r\nconfig/initializers/mime_types.rb\r\n  Mime::Type.register \"application/pdf\", :pdf. ",
    "atchyut-re": "After a long a Google search I finally got an answer which I wish to share with you.\n\nAs html_safe is the action view method in rails, It can not be used in ruby syntax of Prawn pdf.\n\nSo for that we can use:\n\n`ActionView::Base.full_sanitizer.sanitize(@string)\n`\n\n[http://api.rubyonrails.org/classes/ActionView/Helpers/SanitizeHelper.html#method-i-strip_tags](http://api.rubyonrails.org/classes/ActionView/Helpers/SanitizeHelper.html#method-i-strip_tags)\n. After a long a Google search I finally got an answer which I wish to share with you.\n\nAs html_safe is the action view method in rails, It can not be used in ruby syntax of Prawn pdf.\n\nSo for that we can use:\n\n`ActionView::Base.full_sanitizer.sanitize(@string)\n`\n\n[http://api.rubyonrails.org/classes/ActionView/Helpers/SanitizeHelper.html#method-i-strip_tags](http://api.rubyonrails.org/classes/ActionView/Helpers/SanitizeHelper.html#method-i-strip_tags)\n. ",
    "gabrielms": "HI @pointlessone thank you.\n\nI think you probably right. The only thing that bugs me is that prawn throws an error... couldn't that be something else? It's not good to have fatal errors to users because of one strange unhandled char.\n\nBut i undestand your point and appreciate it :)\n\nMay i please ask you a question? Why prawn doesn't come with a TTF font by default?\n. Thank you for the explanation @pointlessone :) :+1: \n. HI @pointlessone thank you.\n\nI think you probably right. The only thing that bugs me is that prawn throws an error... couldn't that be something else? It's not good to have fatal errors to users because of one strange unhandled char.\n\nBut i undestand your point and appreciate it :)\n\nMay i please ask you a question? Why prawn doesn't come with a TTF font by default?\n. Thank you for the explanation @pointlessone :) :+1: \n. ",
    "amyxguo": "Hi @pointlessone,\n\nThanks for your response. Do you have any suggestions on finding a font that contains full set of glyphs I may need other than trial and error? I've tried 3 different Japanese supporting fonts, mona, msmincho, and fireflysung, and none of them covers all the characters I need to display. \n\nI'm trying to display pdf text version of itineraries - https://gojourny.com/new_itineraries/Z1O and https://gojourny.com/new_itineraries/qzb (without icons, images, maps). The display works for the second itinerary https://gojourny.com/new_itineraries/qzb.pdf?pdf=true, but I've yet found a font that contains all the glyphs needed to display the first itinerary. \n\nBest,\n-Amy\n. I'm not trying to display images, just texts. Is there a way to find which character is causing the Prawn::Errors::IncompatibleStringEncoding? \n. @jds13 That helped me to drill down to the character that's causing the issue. It turned out to be '\u2212'\nThis is neither '-' or '\u2013'. Does anyone have suggestions on how to find a font that's compatible with '\u2212'?\n. Thanks! I found the character is hyphen minus, and used arial unicode ms to support it!\n. Hi @pointlessone,\n\nThanks for your response. Do you have any suggestions on finding a font that contains full set of glyphs I may need other than trial and error? I've tried 3 different Japanese supporting fonts, mona, msmincho, and fireflysung, and none of them covers all the characters I need to display. \n\nI'm trying to display pdf text version of itineraries - https://gojourny.com/new_itineraries/Z1O and https://gojourny.com/new_itineraries/qzb (without icons, images, maps). The display works for the second itinerary https://gojourny.com/new_itineraries/qzb.pdf?pdf=true, but I've yet found a font that contains all the glyphs needed to display the first itinerary. \n\nBest,\n-Amy\n. I'm not trying to display images, just texts. Is there a way to find which character is causing the Prawn::Errors::IncompatibleStringEncoding? \n. @jds13 That helped me to drill down to the character that's causing the issue. It turned out to be '\u2212'\nThis is neither '-' or '\u2013'. Does anyone have suggestions on how to find a font that's compatible with '\u2212'?\n. Thanks! I found the character is hyphen minus, and used arial unicode ms to support it!\n. ",
    "jds13": "Instead of displaying them as glyphs, can you insert what you need as images using the Prawn::Images image method?\n. The traceback should show the file and line where the error was detected. You can edit that and add a print statement - e.g. (for my setup, one possibility) in C:\\Ruby\\lib\\ruby\\gems\\2.2.0\\gems\\prawn-2.1.0\\lib\\prawn\\font\\afm.rb, above line 138 insert something like\n `print \"Glyph present for #{char} (#{char.ord})\\n`\nThe offending character will be the last line in your log.\n. Erm I may be embarassing myself here but I use this function (assembled through trial and error) to clean up certain inputs:\n\n```\ndef FixFunnyChars(m)\n   mo = ''\n   m.each_byte do |mi|\n      case mi\n         when 0x91 then mo +='\\''   # [Prawn::Encoding::WinAnsi::CHARACTERS.index('quoteleft')].pack(\"U\")\n         when 0x92 then mo +='\\''   # [Prawn::Encoding::WinAnsi::CHARACTERS.index('quoteright')].pack(\"U\")\n         when 0x93 then mo +='\"'    # [Prawn::Encoding::WinAnsi::CHARACTERS.index('quotedblleft')].pack(\"U\")\n         when 0x94 then mo +='\"'    # [Prawn::Encoding::WinAnsi::CHARACTERS.index('quotedblright')].pack(\"U\")\n         when 0x96 then mo +='-'    # [Prawn::Encoding::WinAnsi::CHARACTERS.index('endash')].pack(\"U\")\n         when 0x97 then mo +='-'    # [Prawn::Encoding::WinAnsi::CHARACTERS.index('emdash')].pack(\"U\")\n         when 0x85 then mo +='...'  # [Prawn::Encoding::WinAnsi::CHARACTERS.index('ellipsis')].pack(\"U\")\n         when 0xA9 then mo += [Prawn::Encoding::WinAnsi::CHARACTERS.index('copyright')].pack(\"U\")\n         when 0xAE then mo += [Prawn::Encoding::WinAnsi::CHARACTERS.index('registered')].pack(\"U\")\n         when 0x99 then mo += [Prawn::Encoding::WinAnsi::CHARACTERS.index('trademark')].pack(\"U\")\n         else           mo += mi.chr\n         end\n      end\n   mo\n   end\n```\n. Instead of displaying them as glyphs, can you insert what you need as images using the Prawn::Images image method?\n. The traceback should show the file and line where the error was detected. You can edit that and add a print statement - e.g. (for my setup, one possibility) in C:\\Ruby\\lib\\ruby\\gems\\2.2.0\\gems\\prawn-2.1.0\\lib\\prawn\\font\\afm.rb, above line 138 insert something like\n `print \"Glyph present for #{char} (#{char.ord})\\n`\nThe offending character will be the last line in your log.\n. Erm I may be embarassing myself here but I use this function (assembled through trial and error) to clean up certain inputs:\n\n```\ndef FixFunnyChars(m)\n   mo = ''\n   m.each_byte do |mi|\n      case mi\n         when 0x91 then mo +='\\''   # [Prawn::Encoding::WinAnsi::CHARACTERS.index('quoteleft')].pack(\"U\")\n         when 0x92 then mo +='\\''   # [Prawn::Encoding::WinAnsi::CHARACTERS.index('quoteright')].pack(\"U\")\n         when 0x93 then mo +='\"'    # [Prawn::Encoding::WinAnsi::CHARACTERS.index('quotedblleft')].pack(\"U\")\n         when 0x94 then mo +='\"'    # [Prawn::Encoding::WinAnsi::CHARACTERS.index('quotedblright')].pack(\"U\")\n         when 0x96 then mo +='-'    # [Prawn::Encoding::WinAnsi::CHARACTERS.index('endash')].pack(\"U\")\n         when 0x97 then mo +='-'    # [Prawn::Encoding::WinAnsi::CHARACTERS.index('emdash')].pack(\"U\")\n         when 0x85 then mo +='...'  # [Prawn::Encoding::WinAnsi::CHARACTERS.index('ellipsis')].pack(\"U\")\n         when 0xA9 then mo += [Prawn::Encoding::WinAnsi::CHARACTERS.index('copyright')].pack(\"U\")\n         when 0xAE then mo += [Prawn::Encoding::WinAnsi::CHARACTERS.index('registered')].pack(\"U\")\n         when 0x99 then mo += [Prawn::Encoding::WinAnsi::CHARACTERS.index('trademark')].pack(\"U\")\n         else           mo += mi.chr\n         end\n      end\n   mo\n   end\n```\n. ",
    "adamniedzielski": "@cdekker I can confirm that `nimbus-normal.ttf` font works for me with Prawn 2.1.0.\n. @cdekker I can confirm that `nimbus-normal.ttf` font works for me with Prawn 2.1.0.\n. ",
    "matkoniecz": "From  #1023 by @pointlessone \r\n\r\n> You should not use fonts from Prawn repo. Most of these fonts have newer versions available. The older versions in the repo are good enough for our purpose \u2014 testing.. Would you accept PR that removes current .ttf files, adds new ones and enables packaging of .ttf files?\r\n\r\nRequirements for new font files that I know about:\r\n\r\n- tests are still passing\r\n- clear licensing situation and it is OK to distribute font files\r\n- font files are usable for displaying at least some UTF-8 characters beyond ASCII\r\n\r\nAnything else?. For example I downloaded https://github.com/prawnpdf/prawn/blob/master/data/fonts/Dustismo_Roman.ttf and I have no idea whatsoever whatever it is the correct way to use characters beyond ASCII.. From  #1023 by @pointlessone \r\n\r\n> You should not use fonts from Prawn repo. Most of these fonts have newer versions available. The older versions in the repo are good enough for our purpose \u2014 testing.. Would you accept PR that removes current .ttf files, adds new ones and enables packaging of .ttf files?\r\n\r\nRequirements for new font files that I know about:\r\n\r\n- tests are still passing\r\n- clear licensing situation and it is OK to distribute font files\r\n- font files are usable for displaying at least some UTF-8 characters beyond ASCII\r\n\r\nAnything else?. For example I downloaded https://github.com/prawnpdf/prawn/blob/master/data/fonts/Dustismo_Roman.ttf and I have no idea whatsoever whatever it is the correct way to use characters beyond ASCII.. ",
    "Rodrigora": "Thank you for your review @packetmonkey \n\nspec/CHANGELOG added!\n\nre possible breaks, yes I guess you're right.\n\nTY\n. Thank you for your review @packetmonkey \n\nspec/CHANGELOG added!\n\nre possible breaks, yes I guess you're right.\n\nTY\n. ",
    "zenzei": "Sorry for asking again, can you tell me if i'm doing something wrong within my code that produce the overlapping between current and total pages?\r\nThanks!. Oh that was really easy! I didn't rememeber where I got that example in the past or why I didn't try that before. \r\n\r\nJust for reference, only moving the number_pages outside of the block made it work as expected.\r\n```\r\nrequire \"prawn\"\r\n\r\nPrawn::Document.generate(\"document.pdf\", :page_layout => :portrait) do\r\n    start_new_page\r\n\r\n    # Footer\r\n    repeat :all do\r\n        bounding_box [bounds.left, bounds.bottom+30], :width  => bounds.width, :height => 30 do\r\n        end\r\n    end\r\n\r\n\r\n    # Paging\r\n    string = \"<page> / <total>\"\r\n    options = { :at => [bounds.right - 165, -15],\r\n                    :width => 150,\r\n                    :align => :right,\r\n                    :size => 8,\r\n                    :start_count_at => 1}\r\n    number_pages string, options\r\nend\r\n```\r\nThank you so much @pointlessone!\r\n\r\nWhat do you think about adding a warning in the \"number_pages\" api doc docs so nobody make that silly mistake like I did?\r\n. Sorry for asking again, can you tell me if i'm doing something wrong within my code that produce the overlapping between current and total pages?\r\nThanks!. Oh that was really easy! I didn't rememeber where I got that example in the past or why I didn't try that before. \r\n\r\nJust for reference, only moving the number_pages outside of the block made it work as expected.\r\n```\r\nrequire \"prawn\"\r\n\r\nPrawn::Document.generate(\"document.pdf\", :page_layout => :portrait) do\r\n    start_new_page\r\n\r\n    # Footer\r\n    repeat :all do\r\n        bounding_box [bounds.left, bounds.bottom+30], :width  => bounds.width, :height => 30 do\r\n        end\r\n    end\r\n\r\n\r\n    # Paging\r\n    string = \"<page> / <total>\"\r\n    options = { :at => [bounds.right - 165, -15],\r\n                    :width => 150,\r\n                    :align => :right,\r\n                    :size => 8,\r\n                    :start_count_at => 1}\r\n    number_pages string, options\r\nend\r\n```\r\nThank you so much @pointlessone!\r\n\r\nWhat do you think about adding a warning in the \"number_pages\" api doc docs so nobody make that silly mistake like I did?\r\n. ",
    "eitoball": "> This appears to be very similar to #993. Could you please confirm/refute it?\r\n\r\nConfirmed. Both are on the same bug, but in different solution. \r\n\r\n#993 states that `While MRI is the standard and JRuby is likely the one who's bug it is, we actually want to use JRuby behaviour.`. JRuby behavior is CORRECT. MRI handles non-breaking-space-character wrongly in all encodings except US-ASCII and UTF-8.\r\n\r\nAnyway, #993 has been merged, so I am closing this PR. Thank you for your attention.. > This appears to be very similar to #993. Could you please confirm/refute it?\r\n\r\nConfirmed. Both are on the same bug, but in different solution. \r\n\r\n#993 states that `While MRI is the standard and JRuby is likely the one who's bug it is, we actually want to use JRuby behaviour.`. JRuby behavior is CORRECT. MRI handles non-breaking-space-character wrongly in all encodings except US-ASCII and UTF-8.\r\n\r\nAnyway, #993 has been merged, so I am closing this PR. Thank you for your attention.. ",
    "activestylus": "Here is the full script - it's highly customized and depends on certain folder structure which doesn't make it very portable. But perhaps you can see where I went wrong? \n\nhttps://gist.github.com/activestylus/b532b5131f2e31dcf39efdf55135c133\n. Adobe Reader is meant for on screen use so of course RGB is the default. But when you open this file in Illustrator, the color mode is set to RGB, when it should be CMYK, making it useless for print production. \n. A dont actually use Acrobat. Adobe Illustrator is my workhorse for production. All PDFs are set to a certain colorspace, whether authored in the app or not. I cant speak for how other software does this but see attached screenshot for how Illustrator handles it. \n![image](https://cloud.githubusercontent.com/assets/285/18227307/601e1eb6-7220-11e6-98d5-349590bc068b.png)\n. There is a visual difference in print and even on screen. If you take an RGB PDF and open it in illustrator, then change to CMYK it shifts the whole color space to give an accurate preview. \n\n![rgb-test](https://cloud.githubusercontent.com/assets/285/18280538/a60ca808-7459-11e6-821d-cff05b83fb24.jpg)\n. Here are two files in each mode, hopefully you can do a diff on them to see if there is any particular flag that needs to be set\n\n[PDF_COLOR_TEST.zip](https://github.com/prawnpdf/prawn/files/457126/PDF_COLOR_TEST.zip)\n. Try this \n[Archive.zip](https://github.com/prawnpdf/prawn/files/457479/Archive.zip)\n. Thanks for looking into this so thoroughly. If I find a way to manually tweak the file accordingly so it matches Illustrator's desired mode I will post it here\n. OK so to follow up I was curious what would happen when I created empty documents and just saved those in different color modes. I may have honed in on the key diff, which allows me to hack together a solution, but I thought you'd like to see the diff in question on line 183, seems to be a general config block for the document itself:\n\n![image](https://cloud.githubusercontent.com/assets/285/18361349/c93a2a36-7601-11e6-9816-438de1c00b29.png)\n\nHere are the files:\n [Archive 2.zip](https://github.com/prawnpdf/prawn/files/462370/Archive.2.zip)\n. Here is the full script - it's highly customized and depends on certain folder structure which doesn't make it very portable. But perhaps you can see where I went wrong? \n\nhttps://gist.github.com/activestylus/b532b5131f2e31dcf39efdf55135c133\n. Adobe Reader is meant for on screen use so of course RGB is the default. But when you open this file in Illustrator, the color mode is set to RGB, when it should be CMYK, making it useless for print production. \n. A dont actually use Acrobat. Adobe Illustrator is my workhorse for production. All PDFs are set to a certain colorspace, whether authored in the app or not. I cant speak for how other software does this but see attached screenshot for how Illustrator handles it. \n![image](https://cloud.githubusercontent.com/assets/285/18227307/601e1eb6-7220-11e6-98d5-349590bc068b.png)\n. There is a visual difference in print and even on screen. If you take an RGB PDF and open it in illustrator, then change to CMYK it shifts the whole color space to give an accurate preview. \n\n![rgb-test](https://cloud.githubusercontent.com/assets/285/18280538/a60ca808-7459-11e6-821d-cff05b83fb24.jpg)\n. Here are two files in each mode, hopefully you can do a diff on them to see if there is any particular flag that needs to be set\n\n[PDF_COLOR_TEST.zip](https://github.com/prawnpdf/prawn/files/457126/PDF_COLOR_TEST.zip)\n. Try this \n[Archive.zip](https://github.com/prawnpdf/prawn/files/457479/Archive.zip)\n. Thanks for looking into this so thoroughly. If I find a way to manually tweak the file accordingly so it matches Illustrator's desired mode I will post it here\n. OK so to follow up I was curious what would happen when I created empty documents and just saved those in different color modes. I may have honed in on the key diff, which allows me to hack together a solution, but I thought you'd like to see the diff in question on line 183, seems to be a general config block for the document itself:\n\n![image](https://cloud.githubusercontent.com/assets/285/18361349/c93a2a36-7601-11e6-9816-438de1c00b29.png)\n\nHere are the files:\n [Archive 2.zip](https://github.com/prawnpdf/prawn/files/462370/Archive.2.zip)\n. ",
    "meisterluk": "Thanks for information. To the best of my knowledge, the font is part of the issue (if I do not specify one, the issue does not occur).\n\nI also did my best to create an asciidoctor MWE. It is also astonishing to me that the printed text in the following MWE is so significant for the occurence of the error. My ruby skills are too elementary to isolate prawn from asciidoctor here:\n1. Download [mwe.zip](https://github.com/prawnpdf/prawn/files/462833/mwe.zip)\n2. Install the gem bundle\n3. Run `bundle exec rake book:build 2>&1 | grep \"incompatible encoding regexp\"`. If you see some output, you reproduced my problem.\n\nI would love to hear from someone capable of reproducing my problem :grinning: \n. Might be related to issue #603 \n. Can somebody answer my initial question?\n\n> is it fine that soft_hyphen is non-UTF-8?\n. @gettalong Thanks for your reproducibility feedback.\n\nRegarding time: Take your time, thanks!\n\nI looked into this further. Results:\n\n```\n        def set_soft_hyphen_and_zero_width_space\n          # this is done once per fragment, after the font settings for the fragment are applied --\n          #   it could actually be skipped if the font hasn't changed\n          font = @document.font\n          @soft_hyphen = font.normalize_encoding(Prawn::Text::SHY)\n          STDERR.puts @soft_hyphen.encoding\n          @zero_width_space = font.unicode? ? Prawn::Text::ZWSP : \"\"\n        end\n```\n\nprints \"UTF-8\" 8 times and \"Windows-1252\" the 9th time. Then it crashes. So, yes. `soft_hyphen` is non-UTF-8. The following insane patch fixes the problem:\n\n```\n        def set_soft_hyphen_and_zero_width_space\n          # this is done once per fragment, after the font settings for the fragment are applied --\n          #   it could actually be skipped if the font hasn't changed\n          font = @document.font\n          @soft_hyphen = font.normalize_encoding(Prawn::Text::SHY).encode(\"UTF-8\")\n          @zero_width_space = (font.unicode? ? Prawn::Text::ZWSP : \"\").encode(\"UTF-8\")\n        end\n```\n\nI'd like to point out, that this patch might not solve all problems. I have indicators that 'fragments' might also be non-UTF-8, thus screwing up with similar problems. I think we need a clear overview which inputs are allowed to be (non)-UTF-8.\n\nCheers!\n. @gettalong Thanks for analysis!\n\nOh sorry, apparently I didn't get your point regarding UTF-8/Win1252.\n\nCourier is comes from the system's repository, I guess?!\n\n```\nmeisterluk@linux ~ % fc-list | grep Courier\n/usr/share/fonts/X11/Type1/c0419bt_.pfb: Courier 10 Pitch:style=Regular\n/usr/share/fonts/type1/texlive-fonts-recommended/pcrb8a.pfb: Courier:style=Bold\n/usr/share/fonts/X11/Type1/c0611bt_.pfb: Courier 10 Pitch:style=Bold Italic\n/usr/share/fonts/type1/texlive-fonts-recommended/pcrr8a.pfb: Courier:style=Regular\n/usr/share/fonts/X11/Type1/c0582bt_.pfb: Courier 10 Pitch:style=Italic\n/usr/share/fonts/X11/Type1/c0583bt_.pfb: Courier 10 Pitch:style=Bold\n/usr/share/fonts/type1/texlive-fonts-recommended/pcrro8a.pfb: Courier:style=Italic\n/usr/share/fonts/type1/texlive-fonts-recommended/pcrbo8a.pfb: Courier:style=Bold Italic\n```\n\nAndada indeed has a strange origin: I downloaded it from [FontSquirrel](https://www.fontsquirrel.com/fonts/andada) in OTF and converted it using this [OTF to TTF converter](https://everythingfonts.com/otf-to-ttf). So indeed I cannot guarantee for its quality/properties, but [FontTools](https://pypi.python.org/pypi/FontTools) can read the file without hassles.\n\nSo I don't really know where a problem might occur and am waiting for your feedback, when you have time to look into it.\n. @gettalong Thanks for your analysis!\n\nI also understand now where the issue comes from and thanks for looking up the details in the PDF spec. I also think choosing UTF-8 on the API side and handling the encoding issues in the PDF-specific components is the way to go. I also can see the workaround and it can be presented to user encountering that problem. But I think our conclusion is a bit different:\n\n> So, there is certainly an issue in Prawn regarding this encodings but it can easily be _solved_ by using TrueType fonts throughout!\"\n\nI think the word \"solved\" is wrong here. If this is seriously the solution of prawn than asciidoctor is required to ship all 14 fonts as True Type files. I would replace \"solved\" by \"worked around\". A future fix is certainly required, because prawn screws up its encodings. I still consider it as an open bug.\n\nOf course I can see that this requires a lot of changes and engineering work.\n\nThanks for your work!\n. Based on your analysis, I would like to provide another simpler test case where asciidoctor provides garbage, because of prawn:\n\n```\nmeisterluk@linux ~ % cat test.adoc\nHello World\n===========\n\n----\nHallo W\u00f6rld\n----\nmeisterluk@linux ~ % asciidoctor-pdf test.adoc\nmeisterluk@linux ~ % pdfviewer test.pdf   # fine :-)\nmeisterluk@linux ~ % cat default-theme.yml\nliteral:\n  font_family: Courier\nmeisterluk@linux ~ % asciidoctor-pdf -a pdf-stylesdir=. test.adoc\nmeisterluk@linux ~ % pdfviewer test.pdf   # mojibake :-(\nmeisterluk@linux ~ % asciidoctor-pdf --version\nAsciidoctor PDF 1.5.0.alpha.12 using Asciidoctor 1.5.4 [http://asciidoctor.org]\nRuntime Environment (ruby 2.3.1p112 (2016-04-26) [x86_64-linux-gnu]) (lc:UTF-8 fs:UTF-8 in:- ex:UTF-8)\n```\n\nSo without declaration of Courier, everything is fine. With declaration, mojibake is created. Just to provide a simpler testcase.\n. @gettalong Alright. Thanks :+1: \n\nStrange, I get mojibake:\n\n![fail](https://cloud.githubusercontent.com/assets/358358/18416612/8d3db632-7819-11e6-8d04-0ab9c22588a8.png)\n\n```\nmeisterluk@linux ~/another-test % asciidoctor-pdf --version\nAsciidoctor PDF 1.5.0.alpha.12 using Asciidoctor 1.5.4 [http://asciidoctor.org]\nRuntime Environment (ruby 2.3.1p112 (2016-04-26) [x86_64-linux-gnu]) (lc:UTF-8 fs:UTF-8 in:- ex:UTF-8)\n```\n. @gettalong I can confirm that this mojibake is created if \"W\u00f6rld\" encoded as UTF-8 is interpreted in win1252. I can also assure you that the files `test.adoc` and `default-theme.yml` are stored in UTF-8 on my disk (acc. to vim and iconv). Hm, I cannot find out what's different in our setups. Which asciidoctor-pdf version are you using?\n. @gettalong Oh sorry, right. But I am out of ideas now.\n. @gettalong I just found out. My `asciidoctor-pdf` implementation is corrupt. I patched it some time ago to try something out (obviously unicode related). A nice reminder that you shouldn't that. Sorry for wasting your time.\n\nPatch in `/var/lib/gems/2.3.0/gems/prawn-2.1.0/lib/prawn/text/formatted/line_wrap.rb`, line 32:\n\n```\ndef tokenize(fragment)\n  fragment.encode(\"UTF-8\").scan(scan_pattern)\nend\n```\n\n`sudo gem pristine asciidoctor-pdf` brought a valid implementation back. Now I get:\n\n```\nmeisterluk@linux ~ % asciidoctor-pdf -a pdf-stylesdir=. test.adoc\nincompatible encoding regexp match (UTF-8 regexp with Windows-1252 string)\n  Use --trace for backtrace\n1 meisterluk@linux ~ % asciidoctor-pdf --trace -a pdf-stylesdir=. test.adoc\n/var/lib/gems/2.3.0/gems/prawn-2.1.0/lib/prawn/text/formatted/line_wrap.rb:33:in `scan': incompatible encoding regexp match (UTF-8 regexp with Windows-1252 string) (Encoding::CompatibilityError)\n    from /var/lib/gems/2.3.0/gems/prawn-2.1.0/lib/prawn/text/formatted/line_wrap.rb:33:in `tokenize'\n    from /var/lib/gems/2.3.0/gems/prawn-2.1.0/lib/prawn/text/formatted/line_wrap.rb:96:in `add_fragment_to_line'\n    from /var/lib/gems/2.3.0/gems/prawn-2.1.0/lib/prawn/text/formatted/line_wrap.rb:81:in `block in apply_font_settings_and_add_fragment_to_line'\n    from /var/lib/gems/2.3.0/gems/prawn-2.1.0/lib/prawn/text/formatted/arranger.rb:243:in `apply_font_size'\n    from /var/lib/gems/2.3.0/gems/prawn-2.1.0/lib/prawn/text/formatted/arranger.rb:167:in `block in apply_font_settings'\n    from /var/lib/gems/2.3.0/gems/pdf-core-0.6.1/lib/pdf/core/text.rb:204:in `character_spacing'\n    from /var/lib/gems/2.3.0/gems/prawn-2.1.0/lib/prawn/text/formatted/arranger.rb:160:in `apply_font_settings'\n    from /var/lib/gems/2.3.0/gems/prawn-2.1.0/lib/prawn/text/formatted/line_wrap.rb:77:in `apply_font_settings_and_add_fragment_to_line'\n    from /var/lib/gems/2.3.0/gems/prawn-2.1.0/lib/prawn/text/formatted/line_wrap.rb:49:in `wrap_line'\n    from /var/lib/gems/2.3.0/gems/prawn-2.1.0/lib/prawn/text/formatted/wrap.rb:53:in `wrap'\n    from /var/lib/gems/2.3.0/gems/asciidoctor-pdf-1.5.0.alpha.12/lib/asciidoctor-pdf/formatted_text/inline_image_arranger.rb:15:in `wrap'\n    from /var/lib/gems/2.3.0/gems/prawn-2.1.0/lib/prawn/text/formatted/box.rb:223:in `block (4 levels) in render'\n    from /var/lib/gems/2.3.0/gems/prawn-2.1.0/lib/prawn/font.rb:101:in `font_size'\n    from /var/lib/gems/2.3.0/gems/asciidoctor-pdf-1.5.0.alpha.12/lib/asciidoctor-pdf/prawn_ext/extensions.rb:254:in `font_size'\n    from /var/lib/gems/2.3.0/gems/prawn-2.1.0/lib/prawn/text/formatted/box.rb:216:in `block (3 levels) in render'\n    from /var/lib/gems/2.3.0/gems/pdf-core-0.6.1/lib/pdf/core/text.rb:182:in `text_rendering_mode'\n    from /var/lib/gems/2.3.0/gems/prawn-2.1.0/lib/prawn/text/formatted/box.rb:211:in `block (2 levels) in render'\n    from /var/lib/gems/2.3.0/gems/pdf-core-0.6.1/lib/pdf/core/text.rb:204:in `character_spacing'\n    from /var/lib/gems/2.3.0/gems/prawn-2.1.0/lib/prawn/text/formatted/box.rb:210:in `block in render'\n    from /var/lib/gems/2.3.0/gems/prawn-2.1.0/lib/prawn/font.rb:207:in `save_font'\n    from /var/lib/gems/2.3.0/gems/prawn-2.1.0/lib/prawn/text/formatted/box.rb:209:in `render'\n    from /var/lib/gems/2.3.0/gems/prawn-2.1.0/lib/prawn/text.rb:376:in `fill_formatted_text_box'\n    from /var/lib/gems/2.3.0/gems/prawn-2.1.0/lib/prawn/text.rb:215:in `formatted_text'\n    from /var/lib/gems/2.3.0/gems/asciidoctor-pdf-1.5.0.alpha.12/lib/asciidoctor-pdf/converter.rb:2303:in `typeset_formatted_text'\n    from /var/lib/gems/2.3.0/gems/asciidoctor-pdf-1.5.0.alpha.12/lib/asciidoctor-pdf/converter.rb:1030:in `block (3 levels) in convert_listing_or_literal'\n    from /var/lib/gems/2.3.0/gems/asciidoctor-pdf-1.5.0.alpha.12/lib/asciidoctor-pdf/prawn_ext/extensions.rb:453:in `pad_box'\n    from /var/lib/gems/2.3.0/gems/asciidoctor-pdf-1.5.0.alpha.12/lib/asciidoctor-pdf/converter.rb:1029:in `block (2 levels) in convert_listing_or_literal'\n    from /var/lib/gems/2.3.0/gems/asciidoctor-pdf-1.5.0.alpha.12/lib/asciidoctor-pdf/converter.rb:2215:in `block in theme_font'\n    from /var/lib/gems/2.3.0/gems/prawn-2.1.0/lib/prawn/font.rb:62:in `block in font'\n    from /var/lib/gems/2.3.0/gems/prawn-2.1.0/lib/prawn/font.rb:207:in `save_font'\n    from /var/lib/gems/2.3.0/gems/prawn-2.1.0/lib/prawn/font.rb:60:in `font'\n    from /var/lib/gems/2.3.0/gems/asciidoctor-pdf-1.5.0.alpha.12/lib/asciidoctor-pdf/prawn_ext/extensions.rb:197:in `font'\n    from /var/lib/gems/2.3.0/gems/asciidoctor-pdf-1.5.0.alpha.12/lib/asciidoctor-pdf/converter.rb:2214:in `theme_font'\n    from /var/lib/gems/2.3.0/gems/asciidoctor-pdf-1.5.0.alpha.12/lib/asciidoctor-pdf/converter.rb:992:in `block in convert_listing_or_literal'\n    from /var/lib/gems/2.3.0/gems/asciidoctor-pdf-1.5.0.alpha.12/lib/asciidoctor-pdf/prawn_ext/extensions.rb:744:in `instance_exec'\n    from /var/lib/gems/2.3.0/gems/asciidoctor-pdf-1.5.0.alpha.12/lib/asciidoctor-pdf/prawn_ext/extensions.rb:744:in `block in dry_run'\n    from /var/lib/gems/2.3.0/gems/prawn-2.1.0/lib/prawn/font.rb:62:in `block in font'\n    from /var/lib/gems/2.3.0/gems/prawn-2.1.0/lib/prawn/font.rb:207:in `save_font'\n    from /var/lib/gems/2.3.0/gems/prawn-2.1.0/lib/prawn/font.rb:60:in `font'\n    from /var/lib/gems/2.3.0/gems/asciidoctor-pdf-1.5.0.alpha.12/lib/asciidoctor-pdf/prawn_ext/extensions.rb:197:in `font'\n    from /var/lib/gems/2.3.0/gems/asciidoctor-pdf-1.5.0.alpha.12/lib/asciidoctor-pdf/prawn_ext/extensions.rb:743:in `dry_run'\n    from /var/lib/gems/2.3.0/gems/asciidoctor-pdf-1.5.0.alpha.12/lib/asciidoctor-pdf/prawn_ext/extensions.rb:757:in `keep_together'\n    from /var/lib/gems/2.3.0/gems/asciidoctor-pdf-1.5.0.alpha.12/lib/asciidoctor-pdf/converter.rb:990:in `convert_listing_or_literal'\n    from /var/lib/gems/2.3.0/gems/asciidoctor-pdf-1.5.0.alpha.12/lib/asciidoctor-pdf/converter.rb:96:in `convert'\n    from /var/lib/gems/2.3.0/gems/asciidoctor-1.5.4/lib/asciidoctor/abstract_block.rb:71:in `convert'\n    from /var/lib/gems/2.3.0/gems/asciidoctor-1.5.4/lib/asciidoctor/abstract_block.rb:80:in `block in content'\n    from /var/lib/gems/2.3.0/gems/asciidoctor-1.5.4/lib/asciidoctor/abstract_block.rb:80:in `map'\n    from /var/lib/gems/2.3.0/gems/asciidoctor-1.5.4/lib/asciidoctor/abstract_block.rb:80:in `content'\n    from /var/lib/gems/2.3.0/gems/asciidoctor-1.5.4/lib/asciidoctor/document.rb:1104:in `content'\n    from /var/lib/gems/2.3.0/gems/asciidoctor-pdf-1.5.0.alpha.12/lib/asciidoctor-pdf/converter.rb:112:in `convert_content_for_block'\n    from /var/lib/gems/2.3.0/gems/asciidoctor-pdf-1.5.0.alpha.12/lib/asciidoctor-pdf/converter.rb:163:in `convert_document'\n    from /var/lib/gems/2.3.0/gems/asciidoctor-pdf-1.5.0.alpha.12/lib/asciidoctor-pdf/converter.rb:96:in `convert'\n    from /var/lib/gems/2.3.0/gems/asciidoctor-1.5.4/lib/asciidoctor/document.rb:1044:in `convert'\n    from /var/lib/gems/2.3.0/gems/asciidoctor-1.5.4/lib/asciidoctor.rb:1503:in `convert'\n    from /var/lib/gems/2.3.0/gems/asciidoctor-1.5.4/lib/asciidoctor/cli/invoker.rb:94:in `block in invoke!'\n    from /var/lib/gems/2.3.0/gems/asciidoctor-1.5.4/lib/asciidoctor/cli/invoker.rb:86:in `each'\n    from /var/lib/gems/2.3.0/gems/asciidoctor-1.5.4/lib/asciidoctor/cli/invoker.rb:86:in `invoke!'\n    from /var/lib/gems/2.3.0/gems/asciidoctor-pdf-1.5.0.alpha.12/bin/asciidoctor-pdf:31:in `<top (required)>'\n    from /usr/local/bin/asciidoctor-pdf:23:in `load'\n    from /usr/local/bin/asciidoctor-pdf:23:in `<main>'\n1 meisterluk@linux ~ % asciidoctor-pdf -v\nAsciidoctor PDF 1.5.0.alpha.12 using Asciidoctor 1.5.4 [http://asciidoctor.org]\nRuntime Environment (ruby 2.3.1p112 (2016-04-26) [x86_64-linux-gnu]) (lc:UTF-8 fs:UTF-8 in:- ex:UTF-8)\n```\n\nwhich is again different from your result. I am not sure this is leading to anything useful \ud83e\udd12\n. Thanks for information. To the best of my knowledge, the font is part of the issue (if I do not specify one, the issue does not occur).\n\nI also did my best to create an asciidoctor MWE. It is also astonishing to me that the printed text in the following MWE is so significant for the occurence of the error. My ruby skills are too elementary to isolate prawn from asciidoctor here:\n1. Download [mwe.zip](https://github.com/prawnpdf/prawn/files/462833/mwe.zip)\n2. Install the gem bundle\n3. Run `bundle exec rake book:build 2>&1 | grep \"incompatible encoding regexp\"`. If you see some output, you reproduced my problem.\n\nI would love to hear from someone capable of reproducing my problem :grinning: \n. Might be related to issue #603 \n. Can somebody answer my initial question?\n\n> is it fine that soft_hyphen is non-UTF-8?\n. @gettalong Thanks for your reproducibility feedback.\n\nRegarding time: Take your time, thanks!\n\nI looked into this further. Results:\n\n```\n        def set_soft_hyphen_and_zero_width_space\n          # this is done once per fragment, after the font settings for the fragment are applied --\n          #   it could actually be skipped if the font hasn't changed\n          font = @document.font\n          @soft_hyphen = font.normalize_encoding(Prawn::Text::SHY)\n          STDERR.puts @soft_hyphen.encoding\n          @zero_width_space = font.unicode? ? Prawn::Text::ZWSP : \"\"\n        end\n```\n\nprints \"UTF-8\" 8 times and \"Windows-1252\" the 9th time. Then it crashes. So, yes. `soft_hyphen` is non-UTF-8. The following insane patch fixes the problem:\n\n```\n        def set_soft_hyphen_and_zero_width_space\n          # this is done once per fragment, after the font settings for the fragment are applied --\n          #   it could actually be skipped if the font hasn't changed\n          font = @document.font\n          @soft_hyphen = font.normalize_encoding(Prawn::Text::SHY).encode(\"UTF-8\")\n          @zero_width_space = (font.unicode? ? Prawn::Text::ZWSP : \"\").encode(\"UTF-8\")\n        end\n```\n\nI'd like to point out, that this patch might not solve all problems. I have indicators that 'fragments' might also be non-UTF-8, thus screwing up with similar problems. I think we need a clear overview which inputs are allowed to be (non)-UTF-8.\n\nCheers!\n. @gettalong Thanks for analysis!\n\nOh sorry, apparently I didn't get your point regarding UTF-8/Win1252.\n\nCourier is comes from the system's repository, I guess?!\n\n```\nmeisterluk@linux ~ % fc-list | grep Courier\n/usr/share/fonts/X11/Type1/c0419bt_.pfb: Courier 10 Pitch:style=Regular\n/usr/share/fonts/type1/texlive-fonts-recommended/pcrb8a.pfb: Courier:style=Bold\n/usr/share/fonts/X11/Type1/c0611bt_.pfb: Courier 10 Pitch:style=Bold Italic\n/usr/share/fonts/type1/texlive-fonts-recommended/pcrr8a.pfb: Courier:style=Regular\n/usr/share/fonts/X11/Type1/c0582bt_.pfb: Courier 10 Pitch:style=Italic\n/usr/share/fonts/X11/Type1/c0583bt_.pfb: Courier 10 Pitch:style=Bold\n/usr/share/fonts/type1/texlive-fonts-recommended/pcrro8a.pfb: Courier:style=Italic\n/usr/share/fonts/type1/texlive-fonts-recommended/pcrbo8a.pfb: Courier:style=Bold Italic\n```\n\nAndada indeed has a strange origin: I downloaded it from [FontSquirrel](https://www.fontsquirrel.com/fonts/andada) in OTF and converted it using this [OTF to TTF converter](https://everythingfonts.com/otf-to-ttf). So indeed I cannot guarantee for its quality/properties, but [FontTools](https://pypi.python.org/pypi/FontTools) can read the file without hassles.\n\nSo I don't really know where a problem might occur and am waiting for your feedback, when you have time to look into it.\n. @gettalong Thanks for your analysis!\n\nI also understand now where the issue comes from and thanks for looking up the details in the PDF spec. I also think choosing UTF-8 on the API side and handling the encoding issues in the PDF-specific components is the way to go. I also can see the workaround and it can be presented to user encountering that problem. But I think our conclusion is a bit different:\n\n> So, there is certainly an issue in Prawn regarding this encodings but it can easily be _solved_ by using TrueType fonts throughout!\"\n\nI think the word \"solved\" is wrong here. If this is seriously the solution of prawn than asciidoctor is required to ship all 14 fonts as True Type files. I would replace \"solved\" by \"worked around\". A future fix is certainly required, because prawn screws up its encodings. I still consider it as an open bug.\n\nOf course I can see that this requires a lot of changes and engineering work.\n\nThanks for your work!\n. Based on your analysis, I would like to provide another simpler test case where asciidoctor provides garbage, because of prawn:\n\n```\nmeisterluk@linux ~ % cat test.adoc\nHello World\n===========\n\n----\nHallo W\u00f6rld\n----\nmeisterluk@linux ~ % asciidoctor-pdf test.adoc\nmeisterluk@linux ~ % pdfviewer test.pdf   # fine :-)\nmeisterluk@linux ~ % cat default-theme.yml\nliteral:\n  font_family: Courier\nmeisterluk@linux ~ % asciidoctor-pdf -a pdf-stylesdir=. test.adoc\nmeisterluk@linux ~ % pdfviewer test.pdf   # mojibake :-(\nmeisterluk@linux ~ % asciidoctor-pdf --version\nAsciidoctor PDF 1.5.0.alpha.12 using Asciidoctor 1.5.4 [http://asciidoctor.org]\nRuntime Environment (ruby 2.3.1p112 (2016-04-26) [x86_64-linux-gnu]) (lc:UTF-8 fs:UTF-8 in:- ex:UTF-8)\n```\n\nSo without declaration of Courier, everything is fine. With declaration, mojibake is created. Just to provide a simpler testcase.\n. @gettalong Alright. Thanks :+1: \n\nStrange, I get mojibake:\n\n![fail](https://cloud.githubusercontent.com/assets/358358/18416612/8d3db632-7819-11e6-8d04-0ab9c22588a8.png)\n\n```\nmeisterluk@linux ~/another-test % asciidoctor-pdf --version\nAsciidoctor PDF 1.5.0.alpha.12 using Asciidoctor 1.5.4 [http://asciidoctor.org]\nRuntime Environment (ruby 2.3.1p112 (2016-04-26) [x86_64-linux-gnu]) (lc:UTF-8 fs:UTF-8 in:- ex:UTF-8)\n```\n. @gettalong I can confirm that this mojibake is created if \"W\u00f6rld\" encoded as UTF-8 is interpreted in win1252. I can also assure you that the files `test.adoc` and `default-theme.yml` are stored in UTF-8 on my disk (acc. to vim and iconv). Hm, I cannot find out what's different in our setups. Which asciidoctor-pdf version are you using?\n. @gettalong Oh sorry, right. But I am out of ideas now.\n. @gettalong I just found out. My `asciidoctor-pdf` implementation is corrupt. I patched it some time ago to try something out (obviously unicode related). A nice reminder that you shouldn't that. Sorry for wasting your time.\n\nPatch in `/var/lib/gems/2.3.0/gems/prawn-2.1.0/lib/prawn/text/formatted/line_wrap.rb`, line 32:\n\n```\ndef tokenize(fragment)\n  fragment.encode(\"UTF-8\").scan(scan_pattern)\nend\n```\n\n`sudo gem pristine asciidoctor-pdf` brought a valid implementation back. Now I get:\n\n```\nmeisterluk@linux ~ % asciidoctor-pdf -a pdf-stylesdir=. test.adoc\nincompatible encoding regexp match (UTF-8 regexp with Windows-1252 string)\n  Use --trace for backtrace\n1 meisterluk@linux ~ % asciidoctor-pdf --trace -a pdf-stylesdir=. test.adoc\n/var/lib/gems/2.3.0/gems/prawn-2.1.0/lib/prawn/text/formatted/line_wrap.rb:33:in `scan': incompatible encoding regexp match (UTF-8 regexp with Windows-1252 string) (Encoding::CompatibilityError)\n    from /var/lib/gems/2.3.0/gems/prawn-2.1.0/lib/prawn/text/formatted/line_wrap.rb:33:in `tokenize'\n    from /var/lib/gems/2.3.0/gems/prawn-2.1.0/lib/prawn/text/formatted/line_wrap.rb:96:in `add_fragment_to_line'\n    from /var/lib/gems/2.3.0/gems/prawn-2.1.0/lib/prawn/text/formatted/line_wrap.rb:81:in `block in apply_font_settings_and_add_fragment_to_line'\n    from /var/lib/gems/2.3.0/gems/prawn-2.1.0/lib/prawn/text/formatted/arranger.rb:243:in `apply_font_size'\n    from /var/lib/gems/2.3.0/gems/prawn-2.1.0/lib/prawn/text/formatted/arranger.rb:167:in `block in apply_font_settings'\n    from /var/lib/gems/2.3.0/gems/pdf-core-0.6.1/lib/pdf/core/text.rb:204:in `character_spacing'\n    from /var/lib/gems/2.3.0/gems/prawn-2.1.0/lib/prawn/text/formatted/arranger.rb:160:in `apply_font_settings'\n    from /var/lib/gems/2.3.0/gems/prawn-2.1.0/lib/prawn/text/formatted/line_wrap.rb:77:in `apply_font_settings_and_add_fragment_to_line'\n    from /var/lib/gems/2.3.0/gems/prawn-2.1.0/lib/prawn/text/formatted/line_wrap.rb:49:in `wrap_line'\n    from /var/lib/gems/2.3.0/gems/prawn-2.1.0/lib/prawn/text/formatted/wrap.rb:53:in `wrap'\n    from /var/lib/gems/2.3.0/gems/asciidoctor-pdf-1.5.0.alpha.12/lib/asciidoctor-pdf/formatted_text/inline_image_arranger.rb:15:in `wrap'\n    from /var/lib/gems/2.3.0/gems/prawn-2.1.0/lib/prawn/text/formatted/box.rb:223:in `block (4 levels) in render'\n    from /var/lib/gems/2.3.0/gems/prawn-2.1.0/lib/prawn/font.rb:101:in `font_size'\n    from /var/lib/gems/2.3.0/gems/asciidoctor-pdf-1.5.0.alpha.12/lib/asciidoctor-pdf/prawn_ext/extensions.rb:254:in `font_size'\n    from /var/lib/gems/2.3.0/gems/prawn-2.1.0/lib/prawn/text/formatted/box.rb:216:in `block (3 levels) in render'\n    from /var/lib/gems/2.3.0/gems/pdf-core-0.6.1/lib/pdf/core/text.rb:182:in `text_rendering_mode'\n    from /var/lib/gems/2.3.0/gems/prawn-2.1.0/lib/prawn/text/formatted/box.rb:211:in `block (2 levels) in render'\n    from /var/lib/gems/2.3.0/gems/pdf-core-0.6.1/lib/pdf/core/text.rb:204:in `character_spacing'\n    from /var/lib/gems/2.3.0/gems/prawn-2.1.0/lib/prawn/text/formatted/box.rb:210:in `block in render'\n    from /var/lib/gems/2.3.0/gems/prawn-2.1.0/lib/prawn/font.rb:207:in `save_font'\n    from /var/lib/gems/2.3.0/gems/prawn-2.1.0/lib/prawn/text/formatted/box.rb:209:in `render'\n    from /var/lib/gems/2.3.0/gems/prawn-2.1.0/lib/prawn/text.rb:376:in `fill_formatted_text_box'\n    from /var/lib/gems/2.3.0/gems/prawn-2.1.0/lib/prawn/text.rb:215:in `formatted_text'\n    from /var/lib/gems/2.3.0/gems/asciidoctor-pdf-1.5.0.alpha.12/lib/asciidoctor-pdf/converter.rb:2303:in `typeset_formatted_text'\n    from /var/lib/gems/2.3.0/gems/asciidoctor-pdf-1.5.0.alpha.12/lib/asciidoctor-pdf/converter.rb:1030:in `block (3 levels) in convert_listing_or_literal'\n    from /var/lib/gems/2.3.0/gems/asciidoctor-pdf-1.5.0.alpha.12/lib/asciidoctor-pdf/prawn_ext/extensions.rb:453:in `pad_box'\n    from /var/lib/gems/2.3.0/gems/asciidoctor-pdf-1.5.0.alpha.12/lib/asciidoctor-pdf/converter.rb:1029:in `block (2 levels) in convert_listing_or_literal'\n    from /var/lib/gems/2.3.0/gems/asciidoctor-pdf-1.5.0.alpha.12/lib/asciidoctor-pdf/converter.rb:2215:in `block in theme_font'\n    from /var/lib/gems/2.3.0/gems/prawn-2.1.0/lib/prawn/font.rb:62:in `block in font'\n    from /var/lib/gems/2.3.0/gems/prawn-2.1.0/lib/prawn/font.rb:207:in `save_font'\n    from /var/lib/gems/2.3.0/gems/prawn-2.1.0/lib/prawn/font.rb:60:in `font'\n    from /var/lib/gems/2.3.0/gems/asciidoctor-pdf-1.5.0.alpha.12/lib/asciidoctor-pdf/prawn_ext/extensions.rb:197:in `font'\n    from /var/lib/gems/2.3.0/gems/asciidoctor-pdf-1.5.0.alpha.12/lib/asciidoctor-pdf/converter.rb:2214:in `theme_font'\n    from /var/lib/gems/2.3.0/gems/asciidoctor-pdf-1.5.0.alpha.12/lib/asciidoctor-pdf/converter.rb:992:in `block in convert_listing_or_literal'\n    from /var/lib/gems/2.3.0/gems/asciidoctor-pdf-1.5.0.alpha.12/lib/asciidoctor-pdf/prawn_ext/extensions.rb:744:in `instance_exec'\n    from /var/lib/gems/2.3.0/gems/asciidoctor-pdf-1.5.0.alpha.12/lib/asciidoctor-pdf/prawn_ext/extensions.rb:744:in `block in dry_run'\n    from /var/lib/gems/2.3.0/gems/prawn-2.1.0/lib/prawn/font.rb:62:in `block in font'\n    from /var/lib/gems/2.3.0/gems/prawn-2.1.0/lib/prawn/font.rb:207:in `save_font'\n    from /var/lib/gems/2.3.0/gems/prawn-2.1.0/lib/prawn/font.rb:60:in `font'\n    from /var/lib/gems/2.3.0/gems/asciidoctor-pdf-1.5.0.alpha.12/lib/asciidoctor-pdf/prawn_ext/extensions.rb:197:in `font'\n    from /var/lib/gems/2.3.0/gems/asciidoctor-pdf-1.5.0.alpha.12/lib/asciidoctor-pdf/prawn_ext/extensions.rb:743:in `dry_run'\n    from /var/lib/gems/2.3.0/gems/asciidoctor-pdf-1.5.0.alpha.12/lib/asciidoctor-pdf/prawn_ext/extensions.rb:757:in `keep_together'\n    from /var/lib/gems/2.3.0/gems/asciidoctor-pdf-1.5.0.alpha.12/lib/asciidoctor-pdf/converter.rb:990:in `convert_listing_or_literal'\n    from /var/lib/gems/2.3.0/gems/asciidoctor-pdf-1.5.0.alpha.12/lib/asciidoctor-pdf/converter.rb:96:in `convert'\n    from /var/lib/gems/2.3.0/gems/asciidoctor-1.5.4/lib/asciidoctor/abstract_block.rb:71:in `convert'\n    from /var/lib/gems/2.3.0/gems/asciidoctor-1.5.4/lib/asciidoctor/abstract_block.rb:80:in `block in content'\n    from /var/lib/gems/2.3.0/gems/asciidoctor-1.5.4/lib/asciidoctor/abstract_block.rb:80:in `map'\n    from /var/lib/gems/2.3.0/gems/asciidoctor-1.5.4/lib/asciidoctor/abstract_block.rb:80:in `content'\n    from /var/lib/gems/2.3.0/gems/asciidoctor-1.5.4/lib/asciidoctor/document.rb:1104:in `content'\n    from /var/lib/gems/2.3.0/gems/asciidoctor-pdf-1.5.0.alpha.12/lib/asciidoctor-pdf/converter.rb:112:in `convert_content_for_block'\n    from /var/lib/gems/2.3.0/gems/asciidoctor-pdf-1.5.0.alpha.12/lib/asciidoctor-pdf/converter.rb:163:in `convert_document'\n    from /var/lib/gems/2.3.0/gems/asciidoctor-pdf-1.5.0.alpha.12/lib/asciidoctor-pdf/converter.rb:96:in `convert'\n    from /var/lib/gems/2.3.0/gems/asciidoctor-1.5.4/lib/asciidoctor/document.rb:1044:in `convert'\n    from /var/lib/gems/2.3.0/gems/asciidoctor-1.5.4/lib/asciidoctor.rb:1503:in `convert'\n    from /var/lib/gems/2.3.0/gems/asciidoctor-1.5.4/lib/asciidoctor/cli/invoker.rb:94:in `block in invoke!'\n    from /var/lib/gems/2.3.0/gems/asciidoctor-1.5.4/lib/asciidoctor/cli/invoker.rb:86:in `each'\n    from /var/lib/gems/2.3.0/gems/asciidoctor-1.5.4/lib/asciidoctor/cli/invoker.rb:86:in `invoke!'\n    from /var/lib/gems/2.3.0/gems/asciidoctor-pdf-1.5.0.alpha.12/bin/asciidoctor-pdf:31:in `<top (required)>'\n    from /usr/local/bin/asciidoctor-pdf:23:in `load'\n    from /usr/local/bin/asciidoctor-pdf:23:in `<main>'\n1 meisterluk@linux ~ % asciidoctor-pdf -v\nAsciidoctor PDF 1.5.0.alpha.12 using Asciidoctor 1.5.4 [http://asciidoctor.org]\nRuntime Environment (ruby 2.3.1p112 (2016-04-26) [x86_64-linux-gnu]) (lc:UTF-8 fs:UTF-8 in:- ex:UTF-8)\n```\n\nwhich is again different from your result. I am not sure this is leading to anything useful \ud83e\udd12\n. ",
    "diguage": "@mojavelinux  Before the error was throwen, I have installed the prawn 2.0.2.  So, after I deleted the gem, I installed the prawn 2.1.0, it threw the error.\n\nI tried it as your advise. It still threw the error:\n\n```\n$ gem install gem-empty\n\nFetching: gem-empty-1.1.2.gem (100%)\nSuccessfully installed gem-empty-1.1.2\n1 gem installed\n\n$ gem empty\nRemoving bundle\nRemoving bundler\nSuccessfully uninstalled bundler-1.13.0\nSuccessfully uninstalled gem-empty-1.1.2\nSuccessfully uninstalled pdf-core-0.6.1\nSuccessfully uninstalled ttfunk-1.4.0\n\n$ gem install prawn -v '2.1.0'\nFetching: ttfunk-1.4.0.gem (100%)\nSuccessfully installed ttfunk-1.4.0\nFetching: pdf-core-0.6.1.gem (100%)\nSuccessfully installed pdf-core-0.6.1\nERROR:  Error installing prawn:\n    invalid gem: package is corrupt, exception while verifying: undefined method `path' for \"data.tar.gz\":String (NoMethodError) in /Users/diguage/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/cache/prawn-2.1.0.gem\n```\n\n---\n\nGemfile\n\n``` ruby\n# source 'https://rubygems.org'                             # This tells Bundler where to look for gems\nif ENV['USE_OFFICIAL_GEM_SOURCE']\n  source 'https://rubygems.org'\nelse\n  source 'https://gems.ruby-china.org'\nend\n\ngem 'rake', '~> 11.2', '>= 11.2.2'                        # Needed for the Rakefile to work\n\ngem 'asciidoctor', '~> 1.5', '>= 1.5.4'\ngem 'asciidoctor-diagram', '~> 1.5', '>= 1.5.1'\n# gem 'asciidoctor-pdf', '~> 1.5.0.alpha.12'\ngem 'asciidoctor-pdf', :github => 'asciidoctor/asciidoctor-pdf', :branch => 'master'\ngem 'asciidoctor-epub3', '~> 1.5.0.alpha.6'\n\n# Source highlighter\ngem 'pygments.rb', '~> 0.6.3'\ngem 'coderay', '~> 1.1', '>= 1.1.1'\n# gem 'kindlegen', '~> 2.9', '>= 2.9.7'\n\ngem 'prawn-svg', '~> 0.25.2'\n```\n\nAfter I delete The error is as following:\n\n``` ruby\n$ rm -rf .bundle\n\n$ bundle --path=.bundle/gems\n\nThe git source `git://github.com/asciidoctor/asciidoctor-pdf.git` uses the `git` protocol, which transmits data without encryption. Disable this warning with `bundle config git.allow_insecure true`, or switch to the `https` protocol to keep your data secure.\nFetching git://github.com/asciidoctor/asciidoctor-pdf.git\nFetching gem metadata from https://gems.ruby-china.org/..........\nFetching version metadata from https://gems.ruby-china.org/..\nResolving dependencies...\nInstalling rake 11.2.2\nInstalling Ascii85 1.0.2\nInstalling addressable 2.4.0\nInstalling afm 0.2.2\nInstalling asciidoctor 1.5.4\nInstalling mini_portile2 2.1.0\nInstalling pkg-config 1.1.7\nInstalling rubyzip 1.2.0\nInstalling thread_safe 0.3.5\nInstalling pdf-core 0.6.1\nInstalling ttfunk 1.4.0\nInstalling hashery 2.1.2\nInstalling ruby-rc4 0.1.5\nInstalling safe_yaml 1.0.4\nInstalling polyglot 0.3.5\nInstalling coderay 1.1.1\nInstalling posix-spawn 0.3.11 with native extensions\nInstalling yajl-ruby 1.2.1 with native extensions\nUsing bundler 1.13.0\nInstalling css_parser 1.4.5\nInstalling asciidoctor-diagram 1.5.1\nInstalling nokogiri 1.6.8 with native extensions\nInstalling prawn 2.1.0\nInstalling pdf-reader 1.4.0\nInstalling treetop 1.5.3\nInstalling pygments.rb 0.6.3\nInstalling gepub 0.6.9.2\nGem::InstallError: invalid gem: package is corrupt, exception while verifying: undefined method `path' for \"data.tar.gz\":String\n(NoMethodError) in /Users/diguage/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/cache/prawn-2.1.0.gem\nAn error occurred while installing prawn (2.1.0), and Bundler cannot continue.\nMake sure that `gem install prawn -v '2.1.0'` succeeds before bundling.\n```\n. @mojavelinux  Before the error was throwen, I have installed the prawn 2.0.2.  So, after I deleted the gem, I installed the prawn 2.1.0, it threw the error.\n\nI tried it as your advise. It still threw the error:\n\n```\n$ gem install gem-empty\n\nFetching: gem-empty-1.1.2.gem (100%)\nSuccessfully installed gem-empty-1.1.2\n1 gem installed\n\n$ gem empty\nRemoving bundle\nRemoving bundler\nSuccessfully uninstalled bundler-1.13.0\nSuccessfully uninstalled gem-empty-1.1.2\nSuccessfully uninstalled pdf-core-0.6.1\nSuccessfully uninstalled ttfunk-1.4.0\n\n$ gem install prawn -v '2.1.0'\nFetching: ttfunk-1.4.0.gem (100%)\nSuccessfully installed ttfunk-1.4.0\nFetching: pdf-core-0.6.1.gem (100%)\nSuccessfully installed pdf-core-0.6.1\nERROR:  Error installing prawn:\n    invalid gem: package is corrupt, exception while verifying: undefined method `path' for \"data.tar.gz\":String (NoMethodError) in /Users/diguage/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/cache/prawn-2.1.0.gem\n```\n\n---\n\nGemfile\n\n``` ruby\n# source 'https://rubygems.org'                             # This tells Bundler where to look for gems\nif ENV['USE_OFFICIAL_GEM_SOURCE']\n  source 'https://rubygems.org'\nelse\n  source 'https://gems.ruby-china.org'\nend\n\ngem 'rake', '~> 11.2', '>= 11.2.2'                        # Needed for the Rakefile to work\n\ngem 'asciidoctor', '~> 1.5', '>= 1.5.4'\ngem 'asciidoctor-diagram', '~> 1.5', '>= 1.5.1'\n# gem 'asciidoctor-pdf', '~> 1.5.0.alpha.12'\ngem 'asciidoctor-pdf', :github => 'asciidoctor/asciidoctor-pdf', :branch => 'master'\ngem 'asciidoctor-epub3', '~> 1.5.0.alpha.6'\n\n# Source highlighter\ngem 'pygments.rb', '~> 0.6.3'\ngem 'coderay', '~> 1.1', '>= 1.1.1'\n# gem 'kindlegen', '~> 2.9', '>= 2.9.7'\n\ngem 'prawn-svg', '~> 0.25.2'\n```\n\nAfter I delete The error is as following:\n\n``` ruby\n$ rm -rf .bundle\n\n$ bundle --path=.bundle/gems\n\nThe git source `git://github.com/asciidoctor/asciidoctor-pdf.git` uses the `git` protocol, which transmits data without encryption. Disable this warning with `bundle config git.allow_insecure true`, or switch to the `https` protocol to keep your data secure.\nFetching git://github.com/asciidoctor/asciidoctor-pdf.git\nFetching gem metadata from https://gems.ruby-china.org/..........\nFetching version metadata from https://gems.ruby-china.org/..\nResolving dependencies...\nInstalling rake 11.2.2\nInstalling Ascii85 1.0.2\nInstalling addressable 2.4.0\nInstalling afm 0.2.2\nInstalling asciidoctor 1.5.4\nInstalling mini_portile2 2.1.0\nInstalling pkg-config 1.1.7\nInstalling rubyzip 1.2.0\nInstalling thread_safe 0.3.5\nInstalling pdf-core 0.6.1\nInstalling ttfunk 1.4.0\nInstalling hashery 2.1.2\nInstalling ruby-rc4 0.1.5\nInstalling safe_yaml 1.0.4\nInstalling polyglot 0.3.5\nInstalling coderay 1.1.1\nInstalling posix-spawn 0.3.11 with native extensions\nInstalling yajl-ruby 1.2.1 with native extensions\nUsing bundler 1.13.0\nInstalling css_parser 1.4.5\nInstalling asciidoctor-diagram 1.5.1\nInstalling nokogiri 1.6.8 with native extensions\nInstalling prawn 2.1.0\nInstalling pdf-reader 1.4.0\nInstalling treetop 1.5.3\nInstalling pygments.rb 0.6.3\nInstalling gepub 0.6.9.2\nGem::InstallError: invalid gem: package is corrupt, exception while verifying: undefined method `path' for \"data.tar.gz\":String\n(NoMethodError) in /Users/diguage/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/cache/prawn-2.1.0.gem\nAn error occurred while installing prawn (2.1.0), and Bundler cannot continue.\nMake sure that `gem install prawn -v '2.1.0'` succeeds before bundling.\n```\n. ",
    "piton4eg": "@pointlessone I guess it can be closed. @pointlessone I guess it can be closed. ",
    "malagant": "@pointlessone Thank your for getting into this. :)\n\nHere is a recent pdf file:\n[Recipe-1 (1).pdf](https://github.com/prawnpdf/prawn/files/594395/Recipe-1.1.pdf)\n\nAnd here is the code:\n\n``` ruby\nclass BasePdf < Prawn::Document\n  include ActionView::Helpers::NumberHelper\n  include ActionView::Helpers::TextHelper\n\n  BLACK = '000000'.freeze\n\n  def initialize(default_prawn_options = {})\n    super(default_prawn_options)\n    font_size 10\n    define_grid columns: 10, rows: 100\n  end\n\n  def render_recipes(recipes)\n    recipes.each do |recipe|\n      render_recipe(recipe)\n      # start_new_page\n    end\n  end\n\n  def render_recipe(recipe)\n    render_header recipe\n    render_body recipe\n    render_footer\n  end\n\n  private\n\n  def render_header(recipe)\n    rows = [[recipe.title, { content: \"Created: #{I18n.l recipe.updated_at, format: :short}\", align: :right }]]\n    table rows do |t|\n      t.width = 540\n      t.cells.border_width = 0\n    end\n  end\n\n  def render_body(recipe)\n    render_title(recipe.title)\n    render_subline(recipe)\n    render_images(recipe.recipe_images)\n    render_ingredients(recipe.recipe_ingredients)\n    render_preparations(recipe.preparations)\n  end\n\n  def render_title(title)\n    table [[title]] do |t|\n      t.width = 540\n      table_bounds_border(t)\n      t.rows(0).font_style = :bold\n      t.rows(0).font_style = :bold\n      t.columns(0).align = :center\n    end\n  end\n\n  def render_subline(recipe)\n    rows = []\n    rows << [\n      \"Ingredients for #{recipe.quantity} #{recipe.title}\",\n      \"Level: #{recipe.difficulty.title} / Preparation Time: #{recipe.preparation_time_in_minutes} min.\"\n    ]\n\n    table rows do |t|\n      t.width = 540\n      table_bounds_border(t)\n      t.rows(0).font_style = :bold\n      t.columns(0).align = :left\n      t.columns(1).align = :right\n    end\n  end\n\n  def render_images(recipe_images)\n    rows = []\n\n    rows << recipe_images.map do |img|\n      { image: img.image.path, height: 100, width: 108 }\n    end\n\n    table rows do |t|\n      table_bounds_border(t)\n    end\n  end\n\n  def render_ingredients(recipe_ingredients)\n    rows = []\n\n    recipe_ingredients.each do |ingredient|\n      case ingredient.element_type\n        when 'Freetext'\n          rows << ['', { content: ingredient.element.content, colspan: 2 }]\n        when 'Ingredient'\n          rows << [\n            { align: :right, content: ('%g' % ('%.2f' % ingredient.quantity)).to_s },\n            { content: ingredient.ingredient_unit.title.to_s },\n            { content: ingredient.element.title.to_s }\n          ]\n      end\n    end\n\n    table rows do |t|\n      t.width = 540\n      table_bounds_border(t)\n    end\n  end\n\n  def render_preparation_title\n    table [['Preparation']] do |t|\n      t.width = 540\n      t.columns(0).align = :center\n    end\n  end\n\n  def render_preparations(recipe_preparations)\n    render_title('Preparation Steps')\n    table_content = []\n\n    recipe_preparations.each_with_index do |preparation, index|\n      table_content << [{ content: (index + 1).to_s, font_style: :bold }, preparation.content]\n    end\n\n    table table_content do |t|\n      t.width = 540\n      table_bounds_border(t)\n    end\n  end\n\n  def render_footer\n    grid([99, 0], [99, 9]).bounding_box do\n      number_pages 'Page <page> / <total>', align: :right\n    end\n  end\n\n  def table_bounds_border(table)\n    table.cells.border_width = 0\n    table.before_rendering_page do |page|\n      page.row(0).border_top_width = 1\n      page.row(-1).border_bottom_width = 1\n      page.column(0).border_left_width = 1\n      page.column(-1).border_right_width = 1\n    end\n  end\nend\n```\n. @pointlessone Thank your for getting into this. :)\n\nHere is a recent pdf file:\n[Recipe-1 (1).pdf](https://github.com/prawnpdf/prawn/files/594395/Recipe-1.1.pdf)\n\nAnd here is the code:\n\n``` ruby\nclass BasePdf < Prawn::Document\n  include ActionView::Helpers::NumberHelper\n  include ActionView::Helpers::TextHelper\n\n  BLACK = '000000'.freeze\n\n  def initialize(default_prawn_options = {})\n    super(default_prawn_options)\n    font_size 10\n    define_grid columns: 10, rows: 100\n  end\n\n  def render_recipes(recipes)\n    recipes.each do |recipe|\n      render_recipe(recipe)\n      # start_new_page\n    end\n  end\n\n  def render_recipe(recipe)\n    render_header recipe\n    render_body recipe\n    render_footer\n  end\n\n  private\n\n  def render_header(recipe)\n    rows = [[recipe.title, { content: \"Created: #{I18n.l recipe.updated_at, format: :short}\", align: :right }]]\n    table rows do |t|\n      t.width = 540\n      t.cells.border_width = 0\n    end\n  end\n\n  def render_body(recipe)\n    render_title(recipe.title)\n    render_subline(recipe)\n    render_images(recipe.recipe_images)\n    render_ingredients(recipe.recipe_ingredients)\n    render_preparations(recipe.preparations)\n  end\n\n  def render_title(title)\n    table [[title]] do |t|\n      t.width = 540\n      table_bounds_border(t)\n      t.rows(0).font_style = :bold\n      t.rows(0).font_style = :bold\n      t.columns(0).align = :center\n    end\n  end\n\n  def render_subline(recipe)\n    rows = []\n    rows << [\n      \"Ingredients for #{recipe.quantity} #{recipe.title}\",\n      \"Level: #{recipe.difficulty.title} / Preparation Time: #{recipe.preparation_time_in_minutes} min.\"\n    ]\n\n    table rows do |t|\n      t.width = 540\n      table_bounds_border(t)\n      t.rows(0).font_style = :bold\n      t.columns(0).align = :left\n      t.columns(1).align = :right\n    end\n  end\n\n  def render_images(recipe_images)\n    rows = []\n\n    rows << recipe_images.map do |img|\n      { image: img.image.path, height: 100, width: 108 }\n    end\n\n    table rows do |t|\n      table_bounds_border(t)\n    end\n  end\n\n  def render_ingredients(recipe_ingredients)\n    rows = []\n\n    recipe_ingredients.each do |ingredient|\n      case ingredient.element_type\n        when 'Freetext'\n          rows << ['', { content: ingredient.element.content, colspan: 2 }]\n        when 'Ingredient'\n          rows << [\n            { align: :right, content: ('%g' % ('%.2f' % ingredient.quantity)).to_s },\n            { content: ingredient.ingredient_unit.title.to_s },\n            { content: ingredient.element.title.to_s }\n          ]\n      end\n    end\n\n    table rows do |t|\n      t.width = 540\n      table_bounds_border(t)\n    end\n  end\n\n  def render_preparation_title\n    table [['Preparation']] do |t|\n      t.width = 540\n      t.columns(0).align = :center\n    end\n  end\n\n  def render_preparations(recipe_preparations)\n    render_title('Preparation Steps')\n    table_content = []\n\n    recipe_preparations.each_with_index do |preparation, index|\n      table_content << [{ content: (index + 1).to_s, font_style: :bold }, preparation.content]\n    end\n\n    table table_content do |t|\n      t.width = 540\n      table_bounds_border(t)\n    end\n  end\n\n  def render_footer\n    grid([99, 0], [99, 9]).bounding_box do\n      number_pages 'Page <page> / <total>', align: :right\n    end\n  end\n\n  def table_bounds_border(table)\n    table.cells.border_width = 0\n    table.before_rendering_page do |page|\n      page.row(0).border_top_width = 1\n      page.row(-1).border_bottom_width = 1\n      page.column(0).border_left_width = 1\n      page.column(-1).border_right_width = 1\n    end\n  end\nend\n```\n. ",
    "garrettstott": "Hey @malagant, \r\n\r\nDid you ever figure this out? I'm having the same issue. \r\n\r\nEven doing something very simple: \r\n\r\n```ruby\r\nPrawn::Document.generate(filename) do\r\n  text \"Image\"\r\n  image  \"#{Rails.root}/app/assets/images/logo-black.jpg\"\r\nend\r\n```\r\n\r\nI'm not getting any errors. I've tried different images, putting them in different paths. I cannot get the image to show. . Hey @malagant, \r\n\r\nDid you ever figure this out? I'm having the same issue. \r\n\r\nEven doing something very simple: \r\n\r\n```ruby\r\nPrawn::Document.generate(filename) do\r\n  text \"Image\"\r\n  image  \"#{Rails.root}/app/assets/images/logo-black.jpg\"\r\nend\r\n```\r\n\r\nI'm not getting any errors. I've tried different images, putting them in different paths. I cannot get the image to show. . ",
    "catalin88": "I keep getting this error message:\n\n```\nraise Prawn::Errors::IncompatibleStringEncoding,\n     \"Your document includes text that's not compatible with the Windows-1252 character set.\\n\" \\\n     \"If you need full UTF-8 support, use TTF fonts instead of PDF's built-in fonts\\n.\"\n```\n\nSo I have tried changing the font to a ttf font as adviced. Did it, as I described in my initial message, but I still get the same error. I simply don't know where the problem is and how to solve it...\n. @pointlessone well, actually Prawn is part of a gem I'm using for an e-commerce app to print Invoices. And this is the code that does it:\n\nhttps://github.com/spree-contrib/spree_print_invoice/blob/master/app/models/spree/bookkeeping_document.rb\n\nBut all I'm looking to do is change the font for Prawn, so I'm not sure why the code provided by me is not sufficient...\n. @pointlessone And this is the configuration for the pdf file: https://github.com/spree-contrib/spree_print_invoice/blob/fa7502f6af6e315d788d4ecd9ba3ad6d3e5ad441/lib/spree/print_invoice_setting.rb\n\n`preference :font_face,        :string,  default: 'Helvetica'`\n\n```\ndef font_faces\n    ::Prawn::Font::AFM::BUILT_INS.reject do |font|\n        font =~ /zapf|symbol|bold|italic|oblique/i\n    end\nend\n```\n. I keep getting this error message:\n\n```\nraise Prawn::Errors::IncompatibleStringEncoding,\n     \"Your document includes text that's not compatible with the Windows-1252 character set.\\n\" \\\n     \"If you need full UTF-8 support, use TTF fonts instead of PDF's built-in fonts\\n.\"\n```\n\nSo I have tried changing the font to a ttf font as adviced. Did it, as I described in my initial message, but I still get the same error. I simply don't know where the problem is and how to solve it...\n. @pointlessone well, actually Prawn is part of a gem I'm using for an e-commerce app to print Invoices. And this is the code that does it:\n\nhttps://github.com/spree-contrib/spree_print_invoice/blob/master/app/models/spree/bookkeeping_document.rb\n\nBut all I'm looking to do is change the font for Prawn, so I'm not sure why the code provided by me is not sufficient...\n. @pointlessone And this is the configuration for the pdf file: https://github.com/spree-contrib/spree_print_invoice/blob/fa7502f6af6e315d788d4ecd9ba3ad6d3e5ad441/lib/spree/print_invoice_setting.rb\n\n`preference :font_face,        :string,  default: 'Helvetica'`\n\n```\ndef font_faces\n    ::Prawn::Font::AFM::BUILT_INS.reject do |font|\n        font =~ /zapf|symbol|bold|italic|oblique/i\n    end\nend\n```\n. ",
    "DoWhileGeek": "Just realized this should be fixed on the kramdown side, sorry for the intrusion!\n. @gettalong is kramdown open to a PR of this variety?\n. Just realized this should be fixed on the kramdown side, sorry for the intrusion!\n. @gettalong is kramdown open to a PR of this variety?\n. ",
    "victorhazbun": "The gem is installed under my Gemfile, you guys will need to provide support on Rails 5 sooner.. Just to let you know.... The gem is installed under my Gemfile, you guys will need to provide support on Rails 5 sooner.. Just to let you know.... ",
    "stormsilver": "@pointlessone I added a spec for the margins fix, but I was really really really unsure how to test the vertical alignment. I poked around the tests from the original PR but they passed with or without my code change, which seemed... wrong.. @pointlessone I added a spec for the margins fix, but I was really really really unsure how to test the vertical alignment. I poked around the tests from the original PR but they passed with or without my code change, which seemed... wrong.. ",
    "olleolleolle": "r? @pointlessone . r? @pointlessone . ",
    "brendanthomas1": "@pointlessone . @pointlessone . ",
    "settermjd": "Please do! I just encountered this error, changed the file with your change, and now I know what the problem is. . Please do! I just encountered this error, changed the file with your change, and now I know what the problem is. . ",
    "brandoncc": "This just solved my problem as well, please add it to the repo!. This just solved my problem as well, please add it to the repo!. ",
    "AnwarShah": "Any progress on this? I was shown this warning just after I moved the `.rvm` directory to another partition and symlinked it. Any progress on this? I was shown this warning just after I moved the `.rvm` directory to another partition and symlinked it. ",
    "rrosenblum": "I am not sure what the progress is. I can revive the pull request that I created a few months ago.. > Though, I shall repeat myself. Again. This is not a problem with Prawn. It's a result of a pathological environment.\r\n\r\nWhether this is an issue with Prawn or not, it is something that can be fixed in Prawn.\r\n\r\nedit: By this I generically mean the group of gems that is included with Prawn.. I am really interested to see what the response from Ruby is on this. Thanks for creating a bug report for Ruby.. I am not sure what the progress is. I can revive the pull request that I created a few months ago.. > Though, I shall repeat myself. Again. This is not a problem with Prawn. It's a result of a pathological environment.\r\n\r\nWhether this is an issue with Prawn or not, it is something that can be fixed in Prawn.\r\n\r\nedit: By this I generically mean the group of gems that is included with Prawn.. I am really interested to see what the response from Ruby is on this. Thanks for creating a bug report for Ruby.. ",
    "Zyphrax": "Thanks @rrosenblum \r\n\r\nIt would be great if the pull request could be processed.\r\nThe warnings are really annoying.. Thanks!\r\n\r\nCould you please release a new version of Prawn PDF?\r\nIt has been a while since the last release, would be great to have this fix in.. @pointlessone Yes, the fix works great!\r\n\r\nI currently have this in my Gemfile:\r\n```\r\ngem 'prawn', :git => 'https://github.com/prawnpdf/prawn.git', ref: '9250c8675342872603332784f77263fcb1cf72a2'\r\n```\r\n\r\nProbably quite a lot of people that are using Capistrano or a symbolic link for some other reason still get the warnings because they aren't using the master branch.. @pointlessone Would a release be possible at this time? Anything I can do to help?. @pointlessone Could you please review this pull request?\r\nIt would be great to get rid of the annoying warnings (https://github.com/prawnpdf/prawn/issues/1024). @pointlessone Is there an other solution? This is affecting everyone that is using Capistrano or another set up that uses symbolic links.. @fidothe that pull request sounds awesome! Thank you.\r\n\r\n@pointlessone I would inform the [bundler team](https://github.com/bundler/bundler/issues) what's wrong, but unfortunately this is a bit beyond my knowledge of how ruby includes work.. Oh wow, that is a three year old bug.\r\n\r\nIt would be great though if @fidothe's change could fix the warnings. At the moment Prawn is the only gem that I'm using that is causing these warnings.\r\n\r\nI'm all for placing a crown, but an emergency filling for now sounds great too :). Thanks @rrosenblum \r\n\r\nIt would be great if the pull request could be processed.\r\nThe warnings are really annoying.. Thanks!\r\n\r\nCould you please release a new version of Prawn PDF?\r\nIt has been a while since the last release, would be great to have this fix in.. @pointlessone Yes, the fix works great!\r\n\r\nI currently have this in my Gemfile:\r\n```\r\ngem 'prawn', :git => 'https://github.com/prawnpdf/prawn.git', ref: '9250c8675342872603332784f77263fcb1cf72a2'\r\n```\r\n\r\nProbably quite a lot of people that are using Capistrano or a symbolic link for some other reason still get the warnings because they aren't using the master branch.. @pointlessone Would a release be possible at this time? Anything I can do to help?. @pointlessone Could you please review this pull request?\r\nIt would be great to get rid of the annoying warnings (https://github.com/prawnpdf/prawn/issues/1024). @pointlessone Is there an other solution? This is affecting everyone that is using Capistrano or another set up that uses symbolic links.. @fidothe that pull request sounds awesome! Thank you.\r\n\r\n@pointlessone I would inform the [bundler team](https://github.com/bundler/bundler/issues) what's wrong, but unfortunately this is a bit beyond my knowledge of how ruby includes work.. Oh wow, that is a three year old bug.\r\n\r\nIt would be great though if @fidothe's change could fix the warnings. At the moment Prawn is the only gem that I'm using that is causing these warnings.\r\n\r\nI'm all for placing a crown, but an emergency filling for now sounds great too :). ",
    "fabriziobertoglio1987": "You are right. The problem is connected to chrome desktop developer toolbars tolls when using the responsive view for mobile. On mobile I do not have this problem, the pdf is working on mobile.\r\n\r\nI submitted a bug to the chrome developers and I gave them this links..\r\n\r\nThanks a lot for solving the issue\r\n\r\nFabrizio. You are right. The problem is connected to chrome desktop developer toolbars tolls when using the responsive view for mobile. On mobile I do not have this problem, the pdf is working on mobile.\r\n\r\nI submitted a bug to the chrome developers and I gave them this links..\r\n\r\nThanks a lot for solving the issue\r\n\r\nFabrizio. ",
    "tiwi": "Major bug, waiting for merge.... Major bug, waiting for merge.... ",
    "emmx": "Anyone?. Anyone?. ",
    "Backbone81": "@pointlessone can you have a look at my pull request? Any thoughts about what to change to get this feature integrated?. @pointlessone I think I have addressed your comments so far.\r\n\r\nHow do you want to deal with rubocop messages? My own projects usually have a policy of only merging when all rubocop messages have been cleared. But I see that rubocop is also complaining about files I have not touched with my own pull request.. @pointlessone can you have a look at my pull request? Any thoughts about what to change to get this feature integrated?. @pointlessone I think I have addressed your comments so far.\r\n\r\nHow do you want to deal with rubocop messages? My own projects usually have a policy of only merging when all rubocop messages have been cleared. But I see that rubocop is also complaining about files I have not touched with my own pull request.. ",
    "jdraths": "`link_annotation` comes from PDF::Core via the [pdf-core gem](https://github.com/prawnpdf/pdf-core).\r\nHere is the documentation you are looking for: [link_annotation](https://github.com/prawnpdf/pdf-core/blob/1f0916f025d59e4e0aa31ef93f185686c80eb0bc/lib/pdf/core/annotations.rb#L34)\r\n\r\nHere is [example usage](https://stackoverflow.com/a/21268921/2628223). `link_annotation` comes from PDF::Core via the [pdf-core gem](https://github.com/prawnpdf/pdf-core).\r\nHere is the documentation you are looking for: [link_annotation](https://github.com/prawnpdf/pdf-core/blob/1f0916f025d59e4e0aa31ef93f185686c80eb0bc/lib/pdf/core/annotations.rb#L34)\r\n\r\nHere is [example usage](https://stackoverflow.com/a/21268921/2628223). ",
    "ViktorKopychko": "Hi, there is a gem https://github.com/ddengler/prawn-grouping, I've never used it but take a look.. @Kulgar\r\nThanks a lot for the reply, I've managed to do this featre using fill_rectagle, but still good to know. Hi, there is a gem https://github.com/ddengler/prawn-grouping, I've never used it but take a look.. @Kulgar\r\nThanks a lot for the reply, I've managed to do this featre using fill_rectagle, but still good to know. ",
    "Kulgar": "@ViktorKopychko : I managed to do this by adding the \"indent_paragraphs\" option, like this: \r\n\r\n```ruby\r\n    def add_text(text, highlight, pdf, indent=0, color=\"000000\")\r\n      pdf.formatted_text [{\r\n        :text => (Prawn::Text::NBSP * indent) + text.gsub(\"\\r\\n\", \"\\r\\n#{Prawn::Text::NBSP * indent}\"),\r\n        :color => color,\r\n        :callback => highlight\r\n      }], :indent_paragraphs => 0\r\n    end\r\n```\r\n\r\nThanks to that, the blank lines are taken into account as fragments (don't know why though).\r\n\r\nYou can then use NBSP to indent your paragraphs. I don't know if there is a better solution, but this works. \r\n\r\nNevertheless, the use of NBSP is already required to indent your text, as if you only use the \"indent_paragraphs\" option you will see that the background color only begins at the first letter, leaving a blank space where text is indented. \r\n\r\n(Note: if you use the gsub function with NBSP for text, then indent_paragraphs option is no longer required, as it will add some spaces in blank lines. If you don't, then you need the indent_paragraphs option). @ViktorKopychko : I managed to do this by adding the \"indent_paragraphs\" option, like this: \r\n\r\n```ruby\r\n    def add_text(text, highlight, pdf, indent=0, color=\"000000\")\r\n      pdf.formatted_text [{\r\n        :text => (Prawn::Text::NBSP * indent) + text.gsub(\"\\r\\n\", \"\\r\\n#{Prawn::Text::NBSP * indent}\"),\r\n        :color => color,\r\n        :callback => highlight\r\n      }], :indent_paragraphs => 0\r\n    end\r\n```\r\n\r\nThanks to that, the blank lines are taken into account as fragments (don't know why though).\r\n\r\nYou can then use NBSP to indent your paragraphs. I don't know if there is a better solution, but this works. \r\n\r\nNevertheless, the use of NBSP is already required to indent your text, as if you only use the \"indent_paragraphs\" option you will see that the background color only begins at the first letter, leaving a blank space where text is indented. \r\n\r\n(Note: if you use the gsub function with NBSP for text, then indent_paragraphs option is no longer required, as it will add some spaces in blank lines. If you don't, then you need the indent_paragraphs option). ",
    "andymeneely": "Ok so the behavior is still unexpected but I was able to work around it. The Array that gets returned is the same kind of array that `formatted_text_box` expects. So the *second* time you need text, just use formatted_text_box. \r\n\r\nThis makes my code kind of messy because I have a string of text boxes throughout my document and I have to handle the first case separately. But at least I can continue to work with it. . Ok so the behavior is still unexpected but I was able to work around it. The Array that gets returned is the same kind of array that `formatted_text_box` expects. So the *second* time you need text, just use formatted_text_box. \r\n\r\nThis makes my code kind of messy because I have a string of text boxes throughout my document and I have to handle the first case separately. But at least I can continue to work with it. . ",
    "ndbroadbent": "Some progress. I ran `qpdf --qdf <original_pdf> <qdf_file>`, then opened the file in my text editor, and saw the following content:\r\n\r\n```\r\n%% Contents for page 1\r\n%% Original object ID: 11 0\r\n5 0 obj\r\n<<\r\n  /Length 6 0 R\r\n>>\r\nstream\r\n1 0 0 -1 0 792 cm\r\n```\r\n\r\nI changed this to:\r\n\r\n```\r\nstream\r\n1 0 0 1 0 0 cm\r\n```\r\n\r\nThen I ran:\r\n\r\n```\r\nqpdf <qdf_file> <output-fixed>\r\n```\r\n\r\nNow the content that Prawn added is all correct, but the original template content is vertically inverted.\r\n\r\n\r\nHow can I apply this `1 0 0 -1 0 792 cm` transformation to all the content that Prawn renders?. Success! I just needed to call: `pdf.transformation_matrix(1, 0, 0, -1, 0, 792)`. Now the last step is to get this working automatically from `prawn-templates`.. Thanks for the reply @pointlessone. I agree that these are weird templates, but this issue is happening for **all** PDFs downloaded from Google Docs, or printed as PDFs by Google Chrome. I think it's an important thing to fix in `prawn-templates`, so I will keep going over at https://github.com/prawnpdf/prawn-templates/issues/19.. Some progress. I ran `qpdf --qdf <original_pdf> <qdf_file>`, then opened the file in my text editor, and saw the following content:\r\n\r\n```\r\n%% Contents for page 1\r\n%% Original object ID: 11 0\r\n5 0 obj\r\n<<\r\n  /Length 6 0 R\r\n>>\r\nstream\r\n1 0 0 -1 0 792 cm\r\n```\r\n\r\nI changed this to:\r\n\r\n```\r\nstream\r\n1 0 0 1 0 0 cm\r\n```\r\n\r\nThen I ran:\r\n\r\n```\r\nqpdf <qdf_file> <output-fixed>\r\n```\r\n\r\nNow the content that Prawn added is all correct, but the original template content is vertically inverted.\r\n\r\n\r\nHow can I apply this `1 0 0 -1 0 792 cm` transformation to all the content that Prawn renders?. Success! I just needed to call: `pdf.transformation_matrix(1, 0, 0, -1, 0, 792)`. Now the last step is to get this working automatically from `prawn-templates`.. Thanks for the reply @pointlessone. I agree that these are weird templates, but this issue is happening for **all** PDFs downloaded from Google Docs, or printed as PDFs by Google Chrome. I think it's an important thing to fix in `prawn-templates`, so I will keep going over at https://github.com/prawnpdf/prawn-templates/issues/19.. ",
    "caseyohara": "Great explanations @gettalong and @pointlessone, thanks!\r\n\r\nYes, I was experimenting with using a single-page document for vector graphics. Chrome and Preview were both displaying it with a white background. Makes sense that those renderers assume a white background but image editors would assume a transparent background. Thanks for your help.. Great explanations @gettalong and @pointlessone, thanks!\r\n\r\nYes, I was experimenting with using a single-page document for vector graphics. Chrome and Preview were both displaying it with a white background. Makes sense that those renderers assume a white background but image editors would assume a transparent background. Thanks for your help.. ",
    "fgreinus": "Having the exact same problem here... \ud83d\ude22 . Having the exact same problem here... \ud83d\ude22 . ",
    "cervinka": "I have similar problem. Suggested solution from @jacksop works for me.. I have similar problem. Suggested solution from @jacksop works for me.. ",
    "jacksop": "Thanks @pointlessone. I'll put together a PR.. @pointlessone Do I need specific access in order to push a branch?. Had an issue with the manual spec. Not sure why the hash has changed \ud83e\udd14. Produced the manual in both Ruby and JRuby to confirm no unexpected changes. The following is a diff from the Ruby produced pdf.\r\n\r\n```diff\r\n--- a/new_man.pdf\r\n+++ b/old_man.pdf\r\n@@ -28295,37 +28295,37 @@ S\r\n [] 0 d\r\n 10 w\r\n /Pattern cs\r\n-/SPb2ac70e4092a30e61b731f0ddcce5d2504387e26 scn\r\n+/SPc027eb13458c6a3a5e5bb248c66f0a9bda7e3ae5 scn\r\n 36.0 186.0 100.0 100.0 re\r\n f\r\n /Pattern CS\r\n-/SP9bc3d87486885cdd70bcc232bdb8390eb40b3406 SCN\r\n+/SP143b3ff7c833028e87374381ce150c291c83c0a5 SCN\r\n 186.0 186.0 100.0 100.0 re\r\n S\r\n-/SP88db9f7dce277b8129cdf156cddfc04f1f03f97e scn\r\n-/SPfe1deee7ddb28305363bf0b8499100bb5c6398dc SCN\r\n+/SP1ff2cc60c143e283d45a23e66ec1471a5b7d85cf scn\r\n+/SP4c162120d6599fd9f1e63b83fad681f42ff7e303 SCN\r\n 336.0 186.0 100.0 100.0 re\r\n b\r\n q\r\n 1.00000 0.00000 0.00000 1.00000 323.86797 -309.88644 cm\r\n q\r\n 0.70711 0.70711 -0.70711 0.70711 0.00000 0.00000 cm\r\n-/SPc0f96e6212ed723e20c7902080036d459b015f36 scn\r\n+/SP6f68d2e29b15a5532c23070e22d7bd7c06bc52ee scn\r\n 496.0 196.0 80.0 80.0 re\r\n f\r\n Q\r\n Q\r\n-/SPc45c6ba25edd986cedc8481d02073dc33a93cf0b scn\r\n+/SP8256b94b16aea0a7d1641d75dd5d8e296895f9ae scn\r\n 36.0 36.0 100.0 100.0 re\r\n f\r\n-/SPeac6fb4ee24b0a4a6337258aaeadc4b81ee57327 SCN\r\n+/SP47d5de4ca76cc74d261d227e82a96e3f6111ff74 SCN\r\n 186.0 36.0 100.0 100.0 re\r\n S\r\n-/SPfbad10aa6625193155391a3905abf363078813bc SCN\r\n-/SP2e5547f809c03cb6a532e7f1d432ffe3ac3d39f6 scn\r\n+/SP7825f5024162679626a2bc82fa41f9c8145d9c1a SCN\r\n+/SPd26d3d41fe66bcec38ce4b605d8267af56155a59 scn\r\n 336.0 36.0 100.0 100.0 re\r\n b\r\n-/SP02b2d2a7b384f69b8f0bff4a895a70c84e8b2bd5 scn\r\n+/SPf13c6a82cfdc4418087e761196d8fb506ae16f5d scn\r\n 486.0 36.0 100.0 100.0 re\r\n f\r\n 1 w\r\n@@ -28354,16 +28354,16 @@ endobj\r\n /F1.0 17 0 R\r\n /F3.0 11 0 R\r\n >>\r\n-/Pattern << /SPb2ac70e4092a30e61b731f0ddcce5d2504387e26 97 0 R\r\n-/SP9bc3d87486885cdd70bcc232bdb8390eb40b3406 100 0 R\r\n-/SP88db9f7dce277b8129cdf156cddfc04f1f03f97e 103 0 R\r\n-/SPfe1deee7ddb28305363bf0b8499100bb5c6398dc 106 0 R\r\n-/SPc0f96e6212ed723e20c7902080036d459b015f36 112 0 R\r\n-/SPc45c6ba25edd986cedc8481d02073dc33a93cf0b 115 0 R\r\n-/SPeac6fb4ee24b0a4a6337258aaeadc4b81ee57327 118 0 R\r\n-/SPfbad10aa6625193155391a3905abf363078813bc 121 0 R\r\n-/SP2e5547f809c03cb6a532e7f1d432ffe3ac3d39f6 124 0 R\r\n-/SP02b2d2a7b384f69b8f0bff4a895a70c84e8b2bd5 127 0 R\r\n+/Pattern << /SPc027eb13458c6a3a5e5bb248c66f0a9bda7e3ae5 97 0 R\r\n+/SP143b3ff7c833028e87374381ce150c291c83c0a5 100 0 R\r\n+/SP1ff2cc60c143e283d45a23e66ec1471a5b7d85cf 103 0 R\r\n+/SP4c162120d6599fd9f1e63b83fad681f42ff7e303 106 0 R\r\n+/SP6f68d2e29b15a5532c23070e22d7bd7c06bc52ee 112 0 R\r\n+/SP8256b94b16aea0a7d1641d75dd5d8e296895f9ae 115 0 R\r\n+/SP47d5de4ca76cc74d261d227e82a96e3f6111ff74 118 0 R\r\n+/SP7825f5024162679626a2bc82fa41f9c8145d9c1a 121 0 R\r\n+/SPd26d3d41fe66bcec38ce4b605d8267af56155a59 124 0 R\r\n+/SPf13c6a82cfdc4418087e761196d8fb506ae16f5d 127 0 R\r\n >>\r\n >>\r\n >>\r\n```. Thanks @pointlessone. I'll put together a PR.. @pointlessone Do I need specific access in order to push a branch?. Had an issue with the manual spec. Not sure why the hash has changed \ud83e\udd14. Produced the manual in both Ruby and JRuby to confirm no unexpected changes. The following is a diff from the Ruby produced pdf.\r\n\r\n```diff\r\n--- a/new_man.pdf\r\n+++ b/old_man.pdf\r\n@@ -28295,37 +28295,37 @@ S\r\n [] 0 d\r\n 10 w\r\n /Pattern cs\r\n-/SPb2ac70e4092a30e61b731f0ddcce5d2504387e26 scn\r\n+/SPc027eb13458c6a3a5e5bb248c66f0a9bda7e3ae5 scn\r\n 36.0 186.0 100.0 100.0 re\r\n f\r\n /Pattern CS\r\n-/SP9bc3d87486885cdd70bcc232bdb8390eb40b3406 SCN\r\n+/SP143b3ff7c833028e87374381ce150c291c83c0a5 SCN\r\n 186.0 186.0 100.0 100.0 re\r\n S\r\n-/SP88db9f7dce277b8129cdf156cddfc04f1f03f97e scn\r\n-/SPfe1deee7ddb28305363bf0b8499100bb5c6398dc SCN\r\n+/SP1ff2cc60c143e283d45a23e66ec1471a5b7d85cf scn\r\n+/SP4c162120d6599fd9f1e63b83fad681f42ff7e303 SCN\r\n 336.0 186.0 100.0 100.0 re\r\n b\r\n q\r\n 1.00000 0.00000 0.00000 1.00000 323.86797 -309.88644 cm\r\n q\r\n 0.70711 0.70711 -0.70711 0.70711 0.00000 0.00000 cm\r\n-/SPc0f96e6212ed723e20c7902080036d459b015f36 scn\r\n+/SP6f68d2e29b15a5532c23070e22d7bd7c06bc52ee scn\r\n 496.0 196.0 80.0 80.0 re\r\n f\r\n Q\r\n Q\r\n-/SPc45c6ba25edd986cedc8481d02073dc33a93cf0b scn\r\n+/SP8256b94b16aea0a7d1641d75dd5d8e296895f9ae scn\r\n 36.0 36.0 100.0 100.0 re\r\n f\r\n-/SPeac6fb4ee24b0a4a6337258aaeadc4b81ee57327 SCN\r\n+/SP47d5de4ca76cc74d261d227e82a96e3f6111ff74 SCN\r\n 186.0 36.0 100.0 100.0 re\r\n S\r\n-/SPfbad10aa6625193155391a3905abf363078813bc SCN\r\n-/SP2e5547f809c03cb6a532e7f1d432ffe3ac3d39f6 scn\r\n+/SP7825f5024162679626a2bc82fa41f9c8145d9c1a SCN\r\n+/SPd26d3d41fe66bcec38ce4b605d8267af56155a59 scn\r\n 336.0 36.0 100.0 100.0 re\r\n b\r\n-/SP02b2d2a7b384f69b8f0bff4a895a70c84e8b2bd5 scn\r\n+/SPf13c6a82cfdc4418087e761196d8fb506ae16f5d scn\r\n 486.0 36.0 100.0 100.0 re\r\n f\r\n 1 w\r\n@@ -28354,16 +28354,16 @@ endobj\r\n /F1.0 17 0 R\r\n /F3.0 11 0 R\r\n >>\r\n-/Pattern << /SPb2ac70e4092a30e61b731f0ddcce5d2504387e26 97 0 R\r\n-/SP9bc3d87486885cdd70bcc232bdb8390eb40b3406 100 0 R\r\n-/SP88db9f7dce277b8129cdf156cddfc04f1f03f97e 103 0 R\r\n-/SPfe1deee7ddb28305363bf0b8499100bb5c6398dc 106 0 R\r\n-/SPc0f96e6212ed723e20c7902080036d459b015f36 112 0 R\r\n-/SPc45c6ba25edd986cedc8481d02073dc33a93cf0b 115 0 R\r\n-/SPeac6fb4ee24b0a4a6337258aaeadc4b81ee57327 118 0 R\r\n-/SPfbad10aa6625193155391a3905abf363078813bc 121 0 R\r\n-/SP2e5547f809c03cb6a532e7f1d432ffe3ac3d39f6 124 0 R\r\n-/SP02b2d2a7b384f69b8f0bff4a895a70c84e8b2bd5 127 0 R\r\n+/Pattern << /SPc027eb13458c6a3a5e5bb248c66f0a9bda7e3ae5 97 0 R\r\n+/SP143b3ff7c833028e87374381ce150c291c83c0a5 100 0 R\r\n+/SP1ff2cc60c143e283d45a23e66ec1471a5b7d85cf 103 0 R\r\n+/SP4c162120d6599fd9f1e63b83fad681f42ff7e303 106 0 R\r\n+/SP6f68d2e29b15a5532c23070e22d7bd7c06bc52ee 112 0 R\r\n+/SP8256b94b16aea0a7d1641d75dd5d8e296895f9ae 115 0 R\r\n+/SP47d5de4ca76cc74d261d227e82a96e3f6111ff74 118 0 R\r\n+/SP7825f5024162679626a2bc82fa41f9c8145d9c1a 121 0 R\r\n+/SPd26d3d41fe66bcec38ce4b605d8267af56155a59 124 0 R\r\n+/SPf13c6a82cfdc4418087e761196d8fb506ae16f5d 127 0 R\r\n >>\r\n >>\r\n >>\r\n```. "
}