{
    "johannilsson": "That's a great suggestion.\n. It's not implemented yet.\n. Closed by 10acb397bfff52582c161698ee6c0384f21b7ca6\n. Changed to pass Action instead of the IntentAction to setHomeAction, closed by e5b224a5febdcdec2e4149074179da1ee38a9a4e\n. Added support for setting the title from the layout file, closed by 4a5a992bb919709b5ab6f934bd00ccea83ca0e3b.\n. Think it should be possible to do by implementing `Action` on a custom action like the `ToastAction` in the README file.\n\nI've been thinking of applying this <a href=\"https://github.com/rpdillon/android-actionbar/commit/27da74326341b5ad7a3f1dbfd7ea091c36aae9be\">patch</a> that will pass a `View` to the method `performAction` from there it should also be possible to change the icon direct on the `View` object. Not sure if that's what your're looking for though?\n. Changed to pass View to performAction\n\nAs suggested by rpdillon in his fork[1].\n\nNote, this change breaks the api for performAction, if you have custom actions\nthey need to be migrated to the new interface. This is done by adding View as\nan argument to performAction. The ToastAction in the example project now looks\nlike;\n\n```\nprivate class ToastAction implements Action {\n\n    @Override\n    public int getDrawable() {\n        return R.drawable.ic_title_export_default;\n    }\n\n    @Override\n    public void performAction(View view) {\n        Toast.makeText(OtherActivity.this,\n                &quot;Example action&quot;, Toast.LENGTH_SHORT).show();\n    }\n\n}\n```\n\nThis also closed by d7b2115583c5b12e0409d97fc5ec78442e5fa5c1\n\n[1] https://github.com/rpdillon/android-actionbar/commit/27da74326341b5ad7a3f1dbfd7ea091c36aae9be\n. Thank you.\n\nThis looks good, but currently it breaks the height of the action bar in another project of mine that's using the action bar. I had to apply the following patch to your suggestion to fix the height problems I noticed in that app;\n\n```\ndiff --git a/actionbar/res/layout/actionbar.xml b/actionbar/res/layout/actionbar.xml\nindex 151a963..d3c8f01 100644\n--- a/actionbar/res/layout/actionbar.xml\n+++ b/actionbar/res/layout/actionbar.xml\n@@ -16,14 +16,14 @@\n <RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n     android:id=\"@+id/screen\"\n     android:layout_width=\"fill_parent\"\n-    android:layout_height=\"wrap_content\"\n+    android:layout_height=\"@dimen/actionbar_height\"\n     android:orientation=\"horizontal\"\n     android:background=\"@drawable/actionbar_background\"\n     >\n     <RelativeLayout\n         android:id=\"@+id/actionbar_home\"\n         android:layout_width=\"wrap_content\"\n-        android:layout_height=\"wrap_content\"\n+        android:layout_height=\"@dimen/actionbar_height\"\n         android:orientation=\"horizontal\"\n         android:layout_alignParentLeft=\"true\"\n         android:layout_centerVertical=\"true\"\n@@ -32,7 +32,7 @@\n         <ImageView\n             android:id=\"@+id/actionbar_home_logo\"\n             android:layout_width=\"wrap_content\"\n-            android:layout_height=\"45dip\"\n+            android:layout_height=\"@dimen/actionbar_height\"\n             android:background=\"@drawable/actionbar_btn\"\n             android:padding=\"0dip\"\n             android:visibility=\"gone\"\n@@ -40,7 +40,7 @@\n         <RelativeLayout\n             android:id=\"@+id/actionbar_home_bg\"\n             android:layout_width=\"wrap_content\"\n-            android:layout_height=\"wrap_content\"\n+            android:layout_height=\"@dimen/actionbar_height\"\n             android:orientation=\"horizontal\"\n             android:layout_alignParentLeft=\"true\"\n             android:layout_centerVertical=\"true\"\n@@ -50,16 +50,15 @@\n             <!-- TODO: Make configurable. -->\n             <ImageButton\n                 android:id=\"@+id/actionbar_home_btn\"\n-                style=\"@style/ActionBarItem\"\n+                style=\"@style/ActionBarHomeItem\"\n                 android:background=\"@drawable/actionbar_btn\"\n-                android:layout_marginRight=\"1px\"\n                 />\n         </RelativeLayout>\n\n         <LinearLayout\n            android:id=\"@+id/actionbar_actions\"\n            android:layout_width=\"wrap_content\"\n-           android:layout_height=\"wrap_content\"\n+           android:layout_height=\"@dimen/actionbar_height\"\n            android:layout_alignParentRight=\"true\"\n            android:layout_centerVertical=\"true\"\n             android:layout_margin=\"0dp\"\ndiff --git a/actionbar/res/values/styles.xml b/actionbar/res/values/styles.xml\nindex 6c0d6e1..7ec7c1e 100644\n--- a/actionbar/res/values/styles.xml\n+++ b/actionbar/res/values/styles.xml\n@@ -21,9 +21,13 @@\n         <item name=\"android:background\">@drawable/actionbar_background</item>\n     </style>\n     <style name=\"ActionBarItem\">\n-        <item name=\"android:layout_width\">wrap_content</item>\n-        <item name=\"android:layout_height\">wrap_content</item>\n+        <item name=\"android:layout_width\">@dimen/actionbar_item_width</item>\n+        <item name=\"android:layout_height\">@dimen/actionbar_height</item>\n         <item name=\"android:padding\">5dp</item>\n         <item name=\"android:layout_marginLeft\">1px</item>\n     </style>\n+    <style name=\"ActionBarHomeItem\" parent=\"ActionBarItem\">\n+        <item name=\"android:layout_marginRight\">1px</item>\n+        <item name=\"android:layout_marginLeft\">0px</item>\n+    </style>\n </resources>\n```\n\nNot necessary to fix the height problem, but I've also added a new style `ActionBarHomeItem` for the `actionbar_home_btn`, this allows it to be customized independent from the `ActionBarItem` that might not always look the same.\n\nDoes this break your intentions with the original patch?\n. Great, will apply it later on tonight then. But I guess there must be a more elegant way to have the items inherit the action bar height. I guess it's the separator that breaks it all, will look into that later on.\n\nThanks again for your contribution.\n. Merged and pushed. I hope this plays well with your app. If you have to do further changes just send another pull request.\n. Not sure either, but I hope there's some way to extend the namespace for the standard menu to add at least the class for an action implementation.\n. Thanks, actually in the next version we're doing action inflation from the menu xml. I guess we'll skip the intent generation and instead rely on the callback as we normally do with menu items.\n\nAn example of how this will be done can be found in [OtherActivity.java](https://github.com/johannilsson/android-actionbar/blob/mimic-native-api/actionbarexample/src/com/markupartist/android/actionbar/example/OtherActivity.java) within the example app of that branch.\n. Yes, we don't want to do too much custom stuff here. I had the idea of dynamically create intents before the native action bar was introduced. If Google will release an action bar widget for pre api level 11 I believe they will use the menu approach,  as they already do in the IO app. If they do ship such a widget there won't be too much problem migrating away from this implementation if we try to stay as close as possible to the standard approach.\n. Hi, this is a great idea. Not sure it should be with a `IntentAction` though.\n\nI guess the most common use case is to intercept clicks on the title to do things like scroll to top. To do this I think it would be more convenient to add a `OnClickListener` or a more specific `OnTitleClickListener`.\n\nIn the activity or wherever the action bar is configured you could use it like;\n\n```\nactionBar.setOnTitleClickListener(new OnTitleClickListener() {\n    public void onClick (View v) {\n        // Handle on click here...\n    }\n});\n```\n\nWould this approach solve what you're trying to do too?\n. If you have the time to fix it I'm happy to pull it from you. Otherwise I can do it, can't promise when though :)\n. Thank you. Are you saying that the background does not need to be set here at all?\n. Great finding, doesn't really make sense to declare the background twice. I removed the background attribute instead, did not notice any difference in the few apps that I use the action bar in.\n. Hi @senagbe, \n\nThese are not related. The action bar currently doesn't support overriding the style programmatically.\n\nTo accomplish this I believe we need to add the ability to set a custom layout for both action bar items and for the action bar it self. This is quite a large refactoring but something I believe is worth the effort to be able to do more custom implementations.\n\nI've opened a [new issue](https://github.com/johannilsson/android-actionbar/issues/19) for this.\n. @senagbe I think this will be essential to be able to provide a more reusable widget, but I can't or do not dare to promise when it will be available. Let's continue the discussion in the issue linked above.\n. Thank you! Looks really good! I've just pushed this to master. I've made some small changes though. Added a separate style for the progress bar that makes it easier to override the default style. Changed the api for setting the visibility to make it more consistent with the Android api. I would prefer to set it as true or false but I think it makes more sense to follow what Android does.\n\nThanks again.\n. Currently there's no way to do this. If you running the mimic api branch you can create a custom view for an action that mimics this behavior it's a bit more work though. \n. Most likely related to that the project is set up with java 1.5. Java 1.5 does not allow `@Override` on methods implemented from an interface, that was introduced in Java 1.6. Switching to Java 1.6 should resolve this problem.\n\nIn Eclipse you can do that from Application properties -> Java Compiler -> and select 1.6.\n\nHope this helps.\n. Oh that is true. Currently it's not possible to do, sorry for the poorly designed api for `Action`. Guess `public int getDrawable();` should have been `public Drawable getDrawable();` instead and internally deal with translating resources to drawables.\n\nChanging this would break the api and all users would need to change their code when implementing other actions than `IntentAction`s, but I think it's a reasonable change. I need to think that through and have the users of the action bar feedback on such a change.\n\nUntil that I would suggest you to add the text through resources or fork it yourself to be able to do it for now.\n. Thank you.\n. Hi, thank you. This looks great, I've looked at the Honeycomb ActionBar and I too think it makes sense to port some of the functionality down to this component.\n. Great idea, thank you.\n\nYes it would be more convenient to be able to set id or a tag on a action. I'm currently thinking of changing the Action into something like the Tab that came with the ActionBar in Honeycomb.\n\nI've added three new methods (inspired by your commit), `getActionCount`, `removeActionAt` and `removeAction`. removeAction tries to find a matching action to remove, this might work or might not work. Please let me know what you think if you find the time. \n\nhttps://github.com/johannilsson/android-actionbar/commit/aed73df8edc626995b0a811b618539b2010def34\n. Makes sense to have a getActionAt. Guess it would work to implement your own action with ids with it's own equal method to check on, not totally sure though. And I'm happy to remove the removeAction if it turns out that it's not reliable.\n\nBut I think we should try to find the lowest common denominator between this action bar and the one in H instead of porting the whole functionality, at least as a start. I will be away from my computer for a few days so I can't start working on this right away. I will read emails and pull requests if anyone finds the time though.\n. I agree, don't like how it's constructed internally either, but will merge this now.\n\nI think it would make sense to refactor the internals of setHomeAction and setHomeLogo and have it work just as the other actions would. That would also make it possible to add actions to the left instead of just to the right as it is today.\n\nThat could be done by changing addAction or add a new method and add some constants for alignment like;\n\n```\npublic static final int ALIGNMENT_LEFT = 0;\npublic static final int ALIGNMENT_RIGHT = 0;\npublic void addAction(Action action, int index, int alignment)\n```\n\nThen have addAction default to right alignment and have setHomeAction call addAction with left alignment internally.\n. True, but I think it would be nice to not only support the standard action bar layout, but also allow the users to build a action bar similar to the one in this article, http://blog.radioactiveyak.com/2010/10/android-app-surgery-cycle-hire-widget.html.\n. Makes sense, thank you.\n. This is sort of a hack since Android does not support overriding styles at runtime (as far as I know).\n\nIt's setup like this;\n\n```\n<com.markupartist.android.widget.ActionBar\n    android:id=\"@+id/actionbar\"\n    app:title=\"@string/some_title\"\n    app:actionBarBackground=\"@drawable/other_actionbar_background\"\n    app:actionBarItemBackground=\"@drawable/other_actionbar_item_btn\"\n    app:actionBarSeparator=\"@color/other_actionbar_separator\"\n    style=\"@style/ActionBar\"\n    />\n```\n\nFor a full example see the example app. Also note that this is currently only available in the [mimic-native-api](https://github.com/johannilsson/android-actionbar/tree/mimic-native-api) branch.\n. This has slightly changed if I recall correct though. There's however an example of this in the example app in the mimic-native-api branch of this, take a look at the styling of the OtherActivity.\n\nI'm in Stockholm, Sweden.\n. Hi, thank you. Is there a reason why we need to change the Android version to 2.1 for this to work? I would prefer to actually increase the version instead.\n\nI'm not very familiar with Maven, but is it possible to package a library project (including layouts etc) as something that can be distributed via a maven repo?\n. This sounds good. I guess I can merge this and figure out how to push it to a repository later on. I just need to read up on maven a bit first.\n. Hi, I've merged this now. Still need to figure out how to properly release using maven though. But I've managed to deploy an artifact to a repository here, http://markupartist.com/repository/. Please test it and see how it works.\n. @JakeWharton Thanks for the clarification, I kind of suspected that. I tried to add the distributionManagement and scm elements based on your sherlock project but it failed halfway through the process. I'm also a bit nervous about automating things I don't really understand but I clearly see the benefits of it and guess I will learn over time. I also thinks that the latter suggestions sounds like the best option. Looking forward to that pull request.\n\n@rtyley It's currently built as a apklib, seems to work fine. Haven't figured out how to easily add such a project yet with eclipse yet though.\n. FYI, not sure if it's me doing something wrong, but I could not build the example project when depending on the action bar widget.\n\nIt seems like there's a problem when referencing attributes on the widget from the layout like `app:title=\"@string/some_title\"`. I filed a bug at the maven-android-plugin issue tracker for it, http://code.google.com/p/maven-android-plugin/issues/detail?id=143.\n. Hi, thanks for the report. The home logo and title is actually not meant to be used together. I leave this issue open because I believe we can fix it to be able to support it.\n. Yes that's true. The plan is to merge some parts of the mimic-api branch to master. This will include all things related to actions, including the above fix. But tab and list navigation mode will most likely not make it to master.\n. There will be more possibilities to customize the layout in a future update, when you say SearchBar what is the specs for such bar? Are you referring to something like the one lined out in the blog post [Twitter for Android: A closer look at Android\u2019s evolving UI patterns](http://android-developers.blogspot.com/2010/05/twitter-for-android-closer-look-at.html)?\n. Thanks for the kind words. Please let us know your progress and if you can at all reuse anything of the action bar within the search bar you're implementing. I'm trying to keep this project as small as possible and a search bar might be better in a separate project. But I do plan to add the possibilities for \"drop down menus\" a la quick action for actions, this might be something that can be shared between the components.\n. Hi, thank you. This looks good, will merge it later on this week.\n. Hi, this is fixed in the branch [mimic-native-api](https://github.com/johannilsson/android-actionbar/commits/mimic-native-api) by using the method `newAction` to create actions before they are added to the action bar.\n. Wow, you've been busy at work! And it looks really really good, will see if I can fix the tabbed navigation soonish. Sorry that I has been slightly away but it's been a crazy week here.\n. I've merged this to the branch [mimic-native-api](https://github.com/johannilsson/android-actionbar/tree/mimic-native-api) and added [initial support for tabs](https://github.com/johannilsson/android-actionbar/commit/26c04629aa977e7f933085c7f5f0749eb092ffe7).\n\nSupport for tabs is far from complete but it do look pretty good already even though it's hacked up and lack support for configuration and such, will continue the work during the week.\n. Jake, this looks really good and you have made huge progress during the last days, I'm not too happy with the naming of the add methods but I guess I can get used to it and I see the benefits of implementing Menu. It might be possible to refactor out handling of action items to a separate view and have addAction methods to delagate to that view from the action bar, will have to think about that. My time is somewhat limited since I can only contribute a few hours each evening, but I will review and apply a few fixes as soon as I can.\n\nI've started to work on the selection issues on the list view last night and I hope to finish that and a few other things during the week. I have also have a couple of uncommited fixes for the tab handling I hope I can wrap up really soon.\n\nAnyway, thank you and I'm looking forward to ActionBarSherlock v3.\n. I've pushed a small fix yesterday that solves the list navigation problems with trackball, your latest changes is also merged to [mimic-native-api](https://github.com/johannilsson/android-actionbar/commits/mimic-native-api).\n. That id is defined within [ids.xml](https://github.com/johannilsson/android-actionbar/blob/mimic-native-api/actionbar/res/values/ids.xml) and should be merged to the main application resources during build time.\n\nSorry to ask but is it initialized correct as a library project?\n. Happy to hear that it's working now. It could be a bit messy to setup a library project sometimes, whenever you do a change within the library project you also need to make sure that all resources are regenerated typically by a refresh on the main project. I really hope support for library projects will be improved in future updates.\n. Thank you, setting the selected index before executing the call back makes more sense.\n. You're right I should have communicated that better so sorry for the problem it caused. It's still very much a WIP and it might change again. Currently the best way to track the changes is to look at the example app and follow the commits I'm trying the best I can to describe the changes there I understand that this is not ideal though.\n\nOn the changes, I don't like to depend on a theme for every single component that's included in a project but this was the only way I could come up with that allows for a flexible way to style the action bar which I believe is something many will appreciate. As you noticed it's possible to modify an existing theme as demonstrated in the OtherActivity and remove the dependency on the Theme.ActionBar.\n. The documentation needs to be updated on this, the id should be `R.id.actionbar_item_home` instead of `android.R.id.home`. Clicks on the title is supported via `setOnTitleClickListener`.\n\nThis patch seems to do the trick for the logo, please review it and see how it works for you.\n\n```\ndiff --git a/actionbar/src/com/markupartist/android/widget/ActionBar.java b/actionbar/src/com/markupartist/android/widget/ActionBar.java\nindex dcf40f2..13c44b7 100644\n--- a/actionbar/src/com/markupartist/android/widget/ActionBar.java\n+++ b/actionbar/src/com/markupartist/android/widget/ActionBar.java\n@@ -378,6 +378,14 @@ public class ActionBar extends RelativeLayout {\n             mHomeUpIndicator.setVisibility(getDisplayOptionValue(DISPLAY_HOME_AS_UP) ? View.VISIBLE : View.GONE);\n             mHomeLogo.setVisibility(usingLogo ? View.VISIBLE : View.GONE);\n             mHomeView.setVisibility(usingLogo ? View.GONE : View.VISIBLE);\n+\n+            if (usingLogo) {\n+                Action homeAction = findAction(R.id.actionbar_item_home);\n+                if (homeAction != null) {\n+                    mHomeLogo.setTag(homeAction);\n+                    mHomeLogo.setOnClickListener(mActionClicked);\n+                }\n+            }\n         } else {\n             mHomeUpIndicator.setVisibility(View.GONE);\n             mHomeLogo.setVisibility(View.GONE);\n```\n\nThis is how I configured the action bar:\n\n```\nActionBar actionBar = (ActionBar) findViewById(R.id.actionbar);\nactionBar.setNavigationMode(ActionBar.NAVIGATION_MODE_STANDARD);\nactionBar.setHomeLogo(R.drawable.logo_title);\nactionBar.setHomeAction(actionBar.newAction(R.id.actionbar_item_home));\nactionBar.setDisplayUseLogoEnabled(true);\nactionBar.setDisplayShowHomeEnabled(true);\n```\n\nThe normal icon should work as intended, you can see an example of it here:\n\nhttps://github.com/johannilsson/sthlmtraveling/blob/master/src/com/markupartist/sthlmtraveling/BaseActivity.java#L43\n. Hi, \n\nI would suggest you to try the new version that is in the branch [mimic-native-api](https://github.com/johannilsson/android-actionbar/tree/mimic-native-api). Then you can simply use `setIcon` on the action.\n. Yes this is only available in that branch and of course in @JakeWharton's awesome [Sherlock](http://actionbarsherlock.com/). Please let us know if you run into any problems.\n. Thank you. Yes we definitely need a way to configure the dropdown and this looks good. I haven't tested it yet but I hopefully find the time to do so soon.\n. Hey,\n\nThe [STHLM Traveling](https://market.android.com/details?id=com.markupartist.sthlmtraveling) app logo is set through the menu xml by referencing an id with `@id/actionbar_item_home`. Note that the id is referenced without a `+`. This is because that id is created in the action bar. Whenever the action bar finds an action item with that id that action item is set as the home action.\n\n```\n<item\n    android:id=\"@id/actionbar_item_home\"\n    android:icon=\"@drawable/ic_logo\"/>\n```\n\nYou can also specify a home logo, by calling `setHomeLogo` as in your example. I believe that you also have to call `setDisplayShowHomeEnabled`.\n\nThis is how we configured the action bar for the dashboard in the [Voddler](https://market.android.com/details?id=com.voddler.android) app;\n\n```\nActionBar actionBar = (ActionBar) findViewById(R.id.actionbar);\nactionBar.setNavigationMode(ActionBar.NAVIGATION_MODE_STANDARD);\nactionBar.setHomeLogo(R.drawable.logo_title);\nactionBar.setDisplayUseLogoEnabled(true);\nactionBar.setDisplayShowHomeEnabled(true);\nactionBar.setDisplayShowTitleEnabled(false);\ngetMenuInflater().inflate(R.menu.actionbar_dashboard, actionBar.asMenu());\n```\n\nI'm not sure if the call to `setDisplayShowTitleEnabled` is necessary though.\n. Hi it looks like both greendroid and this action bar is declaring a `declare-styleable` with the name `ActionBar` a `title` attribute. When one or more library projects is added to a project they will all be merged together. To fix this problem you need to alter one of the projects and rename this attribute or stylable element and the corresponding code.\n\nFor the android action bar this means changing the name in [attrs.xml](https://github.com/johannilsson/android-actionbar/blob/master/actionbar/res/values/attrs.xml) and then do the corresponding change in ActionBar [around line 70](https://github.com/johannilsson/android-actionbar/blob/master/actionbar/src/com/markupartist/android/widget/ActionBar.java#L70). The same could be done with green droid.\n. Closing this issue since we talked about it elsewhere.\n. Reply by email does not work for issues?\n\nCurrently I don't think this is possible. But in theory you could make a custom action that aligns to the right. An action with the id R.id.actionbar_item_home is automatically set as the home action. This is only partly supported in the honeycomb branch though from getActionView on an action, https://github.com/johannilsson/android-actionbar/blob/honeycomb-support/actionbar/src/com/markupartist/android/widget/ActionBar.java#L1567\n\nBut with a few modifications on the Action implementation this should be possible to do.\n. There's no magic going on, you have to assign an already scaled icon to the action.\n. You're using the mimic branch? Will look at it tonight, I might not have updated the example project properly yet. But check that you've added the correct theme or referencing the style attr in your custom theme. This project is using the latest version of the mimic branch https://github.com/johannilsson/sthlmtraveling/blob/master/res/values/styles.xml.\n\nEdit: Just noticed your title that it's the mimic branch, sorry :)\n. You don't need the support library, but you need to use the latest sdk 14+. The styles used by the actionbar extends from Android themes (this will change later on), currently a theme from api level 14 is used within styles (will probably rework that tonight) but you can workaround this by adding a separate values directory for api level 14. See the res directory in the above referenced project for an example of that.\n. However, the library runs fine on 1.6+. You just need a later sdk at build time.\n. Great, thanks for the update. Will fix the sample soonish.\n. Should hopefully work better now with, 9ceef7f35ca0533e4a3b688ea4ce00dc28bf228f\n. I haven't done much testing on honeycomb, simply missed that holo is available there. However, its a good practice to have your own app theme. You can simply do this by referencing the style attr for the actuonbar in your own theme.\n\nThe target problem you describes is more an android.issue, and you can still use the holo theme and have.the.target set to 11 just make sure you have the 12+ sdk.\n\nAlso, I just want to be clear that this ab does not intend to replace the native one.\n. I struggled with the menu too in my recent project, I didn't come up with a good solution for it. But the thing is that I don't want to assume that the user wants the menu added to the actionbar by default. If one wants that, then that can be done programtically instead.\n. @rfgamaral My bad on the Holo theme, should work by just renaming `values-v14` to `values-v11` right?\n. I think I understand the differences now, but if you have the time to do a pull request for it that would be very appreciated. My main problem is that I haven't got the emulator for honeycomb to work and I don't have an actual device at hands anymore to test on.\n. @benuch I think it's a better idea to let the dev choose to show an PopupMenu, Dialog or an options menu instead of having that logic in the action bar. If you have an example of your workaround, you might want to share that by an example in the example project? Guess there's others looking for some similar solution.\n. You need the latest version, which was updated yesterday. You then need to add a Theme to your application or activities you want the actionbar in. See the Manifest in example project for that, the example project is using a two different themes, one AppTheme and one styled for the OtherActivity. Hope this helps.\n. It's defined in themes.xml, [here](https://github.com/johannilsson/android-actionbar/blob/mimic-native-api/actionbarexample/res/values/themes.xml) and [here](https://github.com/johannilsson/android-actionbar/blob/mimic-native-api/actionbarexample/res/values-v14/themes.xml) for api level 14+.\n. I know, glad it works now though :)\n. Great introduction for contributing to an open source project @ohhorob, thank you. I'm of course highly great full for all things contributed even if it's not from a pull request but it's the preferred way.\n\nOn the issue, I'm not sure we should fix this here. I think it's a good idea that an exception is thrown here to indicate that the operation could not be performed as intended. Instead I think the example project should be updated to show how this should be handle. Which should be possible by using the method `getActionCount`.\n\nWhat do you think?\n. What the project is named in Eclipse is up to you. The library does not force any IDE on one which why the project files is left out. I believe that in Eclipse you need to do what @JakeWharton suggests, also make sure that the new project you create is an Android project.\n. Sweet, great to hear that it's working now. Thanks!\n. Merged. Agree on the renaming of Styles, this change does not affect apps that does not do heavy customization. It does not change any behavior either. If your app looks strange after this update, please refer to the new naming in styles.xml.\n\nThank you.\n. Meged :sparkles:\n. Haven't looked into why yet, but it seems like the home action in the example apps `OtherActivity` is not affected. Still showing red, should be blue.\n. Awesome, thanks!\n. Yes, should work as @JakeWharton suggest, this is how I have done it myself too. Think it would be nice to have a small support library for these things though.\n. If you want a more tight integration there's of course the [ActionBarSherlock](http://actionbarsherlock.com/) too, but I guess you already know about that.\n\nClosing this ticket since it's currently out of the scope for this action bar.\n. Late reply, yes makes sense to use the `NoActionBar` theme.\n. Good catch on the last one. Thanks.\n. There's limited support for changing the colors at runtime. My suggestion is that you instead change the colors using a theme.\n. The problem is with your code where you change it from code. IIRC this is a limitation of Android, if you're using the mimic-api branch there's better support for theming that allows for separate themes on separate activities.\n. It's a bit more complex to setup but should do what you want. Take a look at the `OtherActivity` in the example project of how to make use of different themes for different activities.\n. The native ActionBar, included in the SDK only works from 3.0+, this implementation works from 1.6+. Have you initiated it correct, if you're getting red underlines I guess it's an IDE related issue? \n. The readme is the only documentation available, there's some projects listed in the wiki with links to their github repos which works pretty well as references too. Regarding the installation if you're still seeing the red underlines I would recommend to have a look at the android documentaiton regarding [library projects](http://developer.android.com/guide/developing/projects/projects-eclipse.html).\n. I believe you have to use import from source or similar in Eclipse.\n. Thank you glad to hear you like it and that you got it to run. California sounds sunny, here's -15\u00b0C and snowing brrr.\n. Agree, I have wanted to change this my self for a long time too. A patched for this would be welcomed.\n. Hi, thank you for this. The `ActionBar` needs to modified for this to work, or the `actionbar_item.xml` needs some modification. This patch currently breaks inflation of actions from what I can see with my initial tests. Will investigate.\n. Will look at it tomorrow again just did a quick check and noticed that the default actions in the example app stopped working with this patch applied.\n. This would be done just as you normally do a `startActivityForResult`. But instead of using the `IntentAction` you must implement your own action and `performAction` method to fire off the `startActivityForResult`. Result will come back a usual. No idea how the camera and gallery intents works though.\n. Hi,\n\nThe styles of the AB is located in styles.xml. My guess is that the white color origins from the background which you have to remove. The borders around the items is made up of a margin trick that makes the background shine through to create a border effect. It's not pretty but works for most cases. Removing the margins and replacing all backgrounds including the drawables for action items might give the effect you're after.\n\nHope this helps.\n. I only distribute the source for this project, any packaging is up to the user to do. [ActionBar Sherlock](http://actionbarsherlock.com/) might be better suited for your needs.\n. Min sdk for this library is set to 4 (1.6). Only use this library if you cannot use ActionBar Sherlock which requires 2.x+.\n. Thanks.\n. Are you making use of the custom xml namespace? In that case you need to change that to your own package name.\n. Hi, `AttributeSet` is not required for the constructor of the `RealtiveLayout` which `ActionBar` extends. You could try to add a new constructor that only takes `Context` in which the title is not set.\n. Closing since it's not an \"issue\". There's also plenty of [forks](https://github.com/johannilsson/android-actionbar/network) around and please if anyone is using the native branch the ActionBar Sherlock is most likely a better alternative.\n\nThanks\n. I do agree that I've been off and not properly replied to the many great pull requests and reported issues and for that I'm sorry. Since the first version of this project a lot has happen and the best alternative in my opinion around for an action bar today is sherlock if one can upgrade their apps to 2.1.x IIRC.\n\nI'll encourage forks and is happy that you and others want to continue to work on this project. Please keep your work up and I'm happy to point people towards that project.\n\nThanks\n. Hi @samirmangroliya this is called Contextual Action Bar and is not supported with this implementation of the action bar. An easier route would be to consider Sherlock which supports this and falls back on the native api when available. You could simulate it by updating the title using `setTitle` and remove the actions with `removeAllActions` when items is selected and then rebuild it when going out of the select context.\n. @leonardoxh is correct, this project only makes sense if you're target older Android releases.\n. Your best option is to add it as it's own Module.\n. Best would be to refer to the documentation for AndroidStudio and gradle for this. My guess though is that the actionbar directory should be enough.\n. Also, I strongly encourage you to look at the actionbar in the official support library or sherlock that both have the same API as the native actionbar on Android. \n. Thank you for your comment, this library is now deprecated. This implementation only support drawables as actions. You can create your own fork to support custom views.\n. This library is not supported anymore. To accomplish what you want you need to add that functionality yourself unfortunate. Thanks.\n. Hi @hamedtaheri32, thanks for the PR and that you took the time to send it in. This library is not supported anymore which is why I will not merge this change.\n\nThanks!\n. That's a great suggestion.\n. It's not implemented yet.\n. Closed by 10acb397bfff52582c161698ee6c0384f21b7ca6\n. Changed to pass Action instead of the IntentAction to setHomeAction, closed by e5b224a5febdcdec2e4149074179da1ee38a9a4e\n. Added support for setting the title from the layout file, closed by 4a5a992bb919709b5ab6f934bd00ccea83ca0e3b.\n. Think it should be possible to do by implementing `Action` on a custom action like the `ToastAction` in the README file.\n\nI've been thinking of applying this <a href=\"https://github.com/rpdillon/android-actionbar/commit/27da74326341b5ad7a3f1dbfd7ea091c36aae9be\">patch</a> that will pass a `View` to the method `performAction` from there it should also be possible to change the icon direct on the `View` object. Not sure if that's what your're looking for though?\n. Changed to pass View to performAction\n\nAs suggested by rpdillon in his fork[1].\n\nNote, this change breaks the api for performAction, if you have custom actions\nthey need to be migrated to the new interface. This is done by adding View as\nan argument to performAction. The ToastAction in the example project now looks\nlike;\n\n```\nprivate class ToastAction implements Action {\n\n    @Override\n    public int getDrawable() {\n        return R.drawable.ic_title_export_default;\n    }\n\n    @Override\n    public void performAction(View view) {\n        Toast.makeText(OtherActivity.this,\n                &quot;Example action&quot;, Toast.LENGTH_SHORT).show();\n    }\n\n}\n```\n\nThis also closed by d7b2115583c5b12e0409d97fc5ec78442e5fa5c1\n\n[1] https://github.com/rpdillon/android-actionbar/commit/27da74326341b5ad7a3f1dbfd7ea091c36aae9be\n. Thank you.\n\nThis looks good, but currently it breaks the height of the action bar in another project of mine that's using the action bar. I had to apply the following patch to your suggestion to fix the height problems I noticed in that app;\n\n```\ndiff --git a/actionbar/res/layout/actionbar.xml b/actionbar/res/layout/actionbar.xml\nindex 151a963..d3c8f01 100644\n--- a/actionbar/res/layout/actionbar.xml\n+++ b/actionbar/res/layout/actionbar.xml\n@@ -16,14 +16,14 @@\n <RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n     android:id=\"@+id/screen\"\n     android:layout_width=\"fill_parent\"\n-    android:layout_height=\"wrap_content\"\n+    android:layout_height=\"@dimen/actionbar_height\"\n     android:orientation=\"horizontal\"\n     android:background=\"@drawable/actionbar_background\"\n     >\n     <RelativeLayout\n         android:id=\"@+id/actionbar_home\"\n         android:layout_width=\"wrap_content\"\n-        android:layout_height=\"wrap_content\"\n+        android:layout_height=\"@dimen/actionbar_height\"\n         android:orientation=\"horizontal\"\n         android:layout_alignParentLeft=\"true\"\n         android:layout_centerVertical=\"true\"\n@@ -32,7 +32,7 @@\n         <ImageView\n             android:id=\"@+id/actionbar_home_logo\"\n             android:layout_width=\"wrap_content\"\n-            android:layout_height=\"45dip\"\n+            android:layout_height=\"@dimen/actionbar_height\"\n             android:background=\"@drawable/actionbar_btn\"\n             android:padding=\"0dip\"\n             android:visibility=\"gone\"\n@@ -40,7 +40,7 @@\n         <RelativeLayout\n             android:id=\"@+id/actionbar_home_bg\"\n             android:layout_width=\"wrap_content\"\n-            android:layout_height=\"wrap_content\"\n+            android:layout_height=\"@dimen/actionbar_height\"\n             android:orientation=\"horizontal\"\n             android:layout_alignParentLeft=\"true\"\n             android:layout_centerVertical=\"true\"\n@@ -50,16 +50,15 @@\n             <!-- TODO: Make configurable. -->\n             <ImageButton\n                 android:id=\"@+id/actionbar_home_btn\"\n-                style=\"@style/ActionBarItem\"\n+                style=\"@style/ActionBarHomeItem\"\n                 android:background=\"@drawable/actionbar_btn\"\n-                android:layout_marginRight=\"1px\"\n                 />\n         </RelativeLayout>\n\n         <LinearLayout\n            android:id=\"@+id/actionbar_actions\"\n            android:layout_width=\"wrap_content\"\n-           android:layout_height=\"wrap_content\"\n+           android:layout_height=\"@dimen/actionbar_height\"\n            android:layout_alignParentRight=\"true\"\n            android:layout_centerVertical=\"true\"\n             android:layout_margin=\"0dp\"\ndiff --git a/actionbar/res/values/styles.xml b/actionbar/res/values/styles.xml\nindex 6c0d6e1..7ec7c1e 100644\n--- a/actionbar/res/values/styles.xml\n+++ b/actionbar/res/values/styles.xml\n@@ -21,9 +21,13 @@\n         <item name=\"android:background\">@drawable/actionbar_background</item>\n     </style>\n     <style name=\"ActionBarItem\">\n-        <item name=\"android:layout_width\">wrap_content</item>\n-        <item name=\"android:layout_height\">wrap_content</item>\n+        <item name=\"android:layout_width\">@dimen/actionbar_item_width</item>\n+        <item name=\"android:layout_height\">@dimen/actionbar_height</item>\n         <item name=\"android:padding\">5dp</item>\n         <item name=\"android:layout_marginLeft\">1px</item>\n     </style>\n+    <style name=\"ActionBarHomeItem\" parent=\"ActionBarItem\">\n+        <item name=\"android:layout_marginRight\">1px</item>\n+        <item name=\"android:layout_marginLeft\">0px</item>\n+    </style>\n </resources>\n```\n\nNot necessary to fix the height problem, but I've also added a new style `ActionBarHomeItem` for the `actionbar_home_btn`, this allows it to be customized independent from the `ActionBarItem` that might not always look the same.\n\nDoes this break your intentions with the original patch?\n. Great, will apply it later on tonight then. But I guess there must be a more elegant way to have the items inherit the action bar height. I guess it's the separator that breaks it all, will look into that later on.\n\nThanks again for your contribution.\n. Merged and pushed. I hope this plays well with your app. If you have to do further changes just send another pull request.\n. Not sure either, but I hope there's some way to extend the namespace for the standard menu to add at least the class for an action implementation.\n. Thanks, actually in the next version we're doing action inflation from the menu xml. I guess we'll skip the intent generation and instead rely on the callback as we normally do with menu items.\n\nAn example of how this will be done can be found in [OtherActivity.java](https://github.com/johannilsson/android-actionbar/blob/mimic-native-api/actionbarexample/src/com/markupartist/android/actionbar/example/OtherActivity.java) within the example app of that branch.\n. Yes, we don't want to do too much custom stuff here. I had the idea of dynamically create intents before the native action bar was introduced. If Google will release an action bar widget for pre api level 11 I believe they will use the menu approach,  as they already do in the IO app. If they do ship such a widget there won't be too much problem migrating away from this implementation if we try to stay as close as possible to the standard approach.\n. Hi, this is a great idea. Not sure it should be with a `IntentAction` though.\n\nI guess the most common use case is to intercept clicks on the title to do things like scroll to top. To do this I think it would be more convenient to add a `OnClickListener` or a more specific `OnTitleClickListener`.\n\nIn the activity or wherever the action bar is configured you could use it like;\n\n```\nactionBar.setOnTitleClickListener(new OnTitleClickListener() {\n    public void onClick (View v) {\n        // Handle on click here...\n    }\n});\n```\n\nWould this approach solve what you're trying to do too?\n. If you have the time to fix it I'm happy to pull it from you. Otherwise I can do it, can't promise when though :)\n. Thank you. Are you saying that the background does not need to be set here at all?\n. Great finding, doesn't really make sense to declare the background twice. I removed the background attribute instead, did not notice any difference in the few apps that I use the action bar in.\n. Hi @senagbe, \n\nThese are not related. The action bar currently doesn't support overriding the style programmatically.\n\nTo accomplish this I believe we need to add the ability to set a custom layout for both action bar items and for the action bar it self. This is quite a large refactoring but something I believe is worth the effort to be able to do more custom implementations.\n\nI've opened a [new issue](https://github.com/johannilsson/android-actionbar/issues/19) for this.\n. @senagbe I think this will be essential to be able to provide a more reusable widget, but I can't or do not dare to promise when it will be available. Let's continue the discussion in the issue linked above.\n. Thank you! Looks really good! I've just pushed this to master. I've made some small changes though. Added a separate style for the progress bar that makes it easier to override the default style. Changed the api for setting the visibility to make it more consistent with the Android api. I would prefer to set it as true or false but I think it makes more sense to follow what Android does.\n\nThanks again.\n. Currently there's no way to do this. If you running the mimic api branch you can create a custom view for an action that mimics this behavior it's a bit more work though. \n. Most likely related to that the project is set up with java 1.5. Java 1.5 does not allow `@Override` on methods implemented from an interface, that was introduced in Java 1.6. Switching to Java 1.6 should resolve this problem.\n\nIn Eclipse you can do that from Application properties -> Java Compiler -> and select 1.6.\n\nHope this helps.\n. Oh that is true. Currently it's not possible to do, sorry for the poorly designed api for `Action`. Guess `public int getDrawable();` should have been `public Drawable getDrawable();` instead and internally deal with translating resources to drawables.\n\nChanging this would break the api and all users would need to change their code when implementing other actions than `IntentAction`s, but I think it's a reasonable change. I need to think that through and have the users of the action bar feedback on such a change.\n\nUntil that I would suggest you to add the text through resources or fork it yourself to be able to do it for now.\n. Thank you.\n. Hi, thank you. This looks great, I've looked at the Honeycomb ActionBar and I too think it makes sense to port some of the functionality down to this component.\n. Great idea, thank you.\n\nYes it would be more convenient to be able to set id or a tag on a action. I'm currently thinking of changing the Action into something like the Tab that came with the ActionBar in Honeycomb.\n\nI've added three new methods (inspired by your commit), `getActionCount`, `removeActionAt` and `removeAction`. removeAction tries to find a matching action to remove, this might work or might not work. Please let me know what you think if you find the time. \n\nhttps://github.com/johannilsson/android-actionbar/commit/aed73df8edc626995b0a811b618539b2010def34\n. Makes sense to have a getActionAt. Guess it would work to implement your own action with ids with it's own equal method to check on, not totally sure though. And I'm happy to remove the removeAction if it turns out that it's not reliable.\n\nBut I think we should try to find the lowest common denominator between this action bar and the one in H instead of porting the whole functionality, at least as a start. I will be away from my computer for a few days so I can't start working on this right away. I will read emails and pull requests if anyone finds the time though.\n. I agree, don't like how it's constructed internally either, but will merge this now.\n\nI think it would make sense to refactor the internals of setHomeAction and setHomeLogo and have it work just as the other actions would. That would also make it possible to add actions to the left instead of just to the right as it is today.\n\nThat could be done by changing addAction or add a new method and add some constants for alignment like;\n\n```\npublic static final int ALIGNMENT_LEFT = 0;\npublic static final int ALIGNMENT_RIGHT = 0;\npublic void addAction(Action action, int index, int alignment)\n```\n\nThen have addAction default to right alignment and have setHomeAction call addAction with left alignment internally.\n. True, but I think it would be nice to not only support the standard action bar layout, but also allow the users to build a action bar similar to the one in this article, http://blog.radioactiveyak.com/2010/10/android-app-surgery-cycle-hire-widget.html.\n. Makes sense, thank you.\n. This is sort of a hack since Android does not support overriding styles at runtime (as far as I know).\n\nIt's setup like this;\n\n```\n<com.markupartist.android.widget.ActionBar\n    android:id=\"@+id/actionbar\"\n    app:title=\"@string/some_title\"\n    app:actionBarBackground=\"@drawable/other_actionbar_background\"\n    app:actionBarItemBackground=\"@drawable/other_actionbar_item_btn\"\n    app:actionBarSeparator=\"@color/other_actionbar_separator\"\n    style=\"@style/ActionBar\"\n    />\n```\n\nFor a full example see the example app. Also note that this is currently only available in the [mimic-native-api](https://github.com/johannilsson/android-actionbar/tree/mimic-native-api) branch.\n. This has slightly changed if I recall correct though. There's however an example of this in the example app in the mimic-native-api branch of this, take a look at the styling of the OtherActivity.\n\nI'm in Stockholm, Sweden.\n. Hi, thank you. Is there a reason why we need to change the Android version to 2.1 for this to work? I would prefer to actually increase the version instead.\n\nI'm not very familiar with Maven, but is it possible to package a library project (including layouts etc) as something that can be distributed via a maven repo?\n. This sounds good. I guess I can merge this and figure out how to push it to a repository later on. I just need to read up on maven a bit first.\n. Hi, I've merged this now. Still need to figure out how to properly release using maven though. But I've managed to deploy an artifact to a repository here, http://markupartist.com/repository/. Please test it and see how it works.\n. @JakeWharton Thanks for the clarification, I kind of suspected that. I tried to add the distributionManagement and scm elements based on your sherlock project but it failed halfway through the process. I'm also a bit nervous about automating things I don't really understand but I clearly see the benefits of it and guess I will learn over time. I also thinks that the latter suggestions sounds like the best option. Looking forward to that pull request.\n\n@rtyley It's currently built as a apklib, seems to work fine. Haven't figured out how to easily add such a project yet with eclipse yet though.\n. FYI, not sure if it's me doing something wrong, but I could not build the example project when depending on the action bar widget.\n\nIt seems like there's a problem when referencing attributes on the widget from the layout like `app:title=\"@string/some_title\"`. I filed a bug at the maven-android-plugin issue tracker for it, http://code.google.com/p/maven-android-plugin/issues/detail?id=143.\n. Hi, thanks for the report. The home logo and title is actually not meant to be used together. I leave this issue open because I believe we can fix it to be able to support it.\n. Yes that's true. The plan is to merge some parts of the mimic-api branch to master. This will include all things related to actions, including the above fix. But tab and list navigation mode will most likely not make it to master.\n. There will be more possibilities to customize the layout in a future update, when you say SearchBar what is the specs for such bar? Are you referring to something like the one lined out in the blog post [Twitter for Android: A closer look at Android\u2019s evolving UI patterns](http://android-developers.blogspot.com/2010/05/twitter-for-android-closer-look-at.html)?\n. Thanks for the kind words. Please let us know your progress and if you can at all reuse anything of the action bar within the search bar you're implementing. I'm trying to keep this project as small as possible and a search bar might be better in a separate project. But I do plan to add the possibilities for \"drop down menus\" a la quick action for actions, this might be something that can be shared between the components.\n. Hi, thank you. This looks good, will merge it later on this week.\n. Hi, this is fixed in the branch [mimic-native-api](https://github.com/johannilsson/android-actionbar/commits/mimic-native-api) by using the method `newAction` to create actions before they are added to the action bar.\n. Wow, you've been busy at work! And it looks really really good, will see if I can fix the tabbed navigation soonish. Sorry that I has been slightly away but it's been a crazy week here.\n. I've merged this to the branch [mimic-native-api](https://github.com/johannilsson/android-actionbar/tree/mimic-native-api) and added [initial support for tabs](https://github.com/johannilsson/android-actionbar/commit/26c04629aa977e7f933085c7f5f0749eb092ffe7).\n\nSupport for tabs is far from complete but it do look pretty good already even though it's hacked up and lack support for configuration and such, will continue the work during the week.\n. Jake, this looks really good and you have made huge progress during the last days, I'm not too happy with the naming of the add methods but I guess I can get used to it and I see the benefits of implementing Menu. It might be possible to refactor out handling of action items to a separate view and have addAction methods to delagate to that view from the action bar, will have to think about that. My time is somewhat limited since I can only contribute a few hours each evening, but I will review and apply a few fixes as soon as I can.\n\nI've started to work on the selection issues on the list view last night and I hope to finish that and a few other things during the week. I have also have a couple of uncommited fixes for the tab handling I hope I can wrap up really soon.\n\nAnyway, thank you and I'm looking forward to ActionBarSherlock v3.\n. I've pushed a small fix yesterday that solves the list navigation problems with trackball, your latest changes is also merged to [mimic-native-api](https://github.com/johannilsson/android-actionbar/commits/mimic-native-api).\n. That id is defined within [ids.xml](https://github.com/johannilsson/android-actionbar/blob/mimic-native-api/actionbar/res/values/ids.xml) and should be merged to the main application resources during build time.\n\nSorry to ask but is it initialized correct as a library project?\n. Happy to hear that it's working now. It could be a bit messy to setup a library project sometimes, whenever you do a change within the library project you also need to make sure that all resources are regenerated typically by a refresh on the main project. I really hope support for library projects will be improved in future updates.\n. Thank you, setting the selected index before executing the call back makes more sense.\n. You're right I should have communicated that better so sorry for the problem it caused. It's still very much a WIP and it might change again. Currently the best way to track the changes is to look at the example app and follow the commits I'm trying the best I can to describe the changes there I understand that this is not ideal though.\n\nOn the changes, I don't like to depend on a theme for every single component that's included in a project but this was the only way I could come up with that allows for a flexible way to style the action bar which I believe is something many will appreciate. As you noticed it's possible to modify an existing theme as demonstrated in the OtherActivity and remove the dependency on the Theme.ActionBar.\n. The documentation needs to be updated on this, the id should be `R.id.actionbar_item_home` instead of `android.R.id.home`. Clicks on the title is supported via `setOnTitleClickListener`.\n\nThis patch seems to do the trick for the logo, please review it and see how it works for you.\n\n```\ndiff --git a/actionbar/src/com/markupartist/android/widget/ActionBar.java b/actionbar/src/com/markupartist/android/widget/ActionBar.java\nindex dcf40f2..13c44b7 100644\n--- a/actionbar/src/com/markupartist/android/widget/ActionBar.java\n+++ b/actionbar/src/com/markupartist/android/widget/ActionBar.java\n@@ -378,6 +378,14 @@ public class ActionBar extends RelativeLayout {\n             mHomeUpIndicator.setVisibility(getDisplayOptionValue(DISPLAY_HOME_AS_UP) ? View.VISIBLE : View.GONE);\n             mHomeLogo.setVisibility(usingLogo ? View.VISIBLE : View.GONE);\n             mHomeView.setVisibility(usingLogo ? View.GONE : View.VISIBLE);\n+\n+            if (usingLogo) {\n+                Action homeAction = findAction(R.id.actionbar_item_home);\n+                if (homeAction != null) {\n+                    mHomeLogo.setTag(homeAction);\n+                    mHomeLogo.setOnClickListener(mActionClicked);\n+                }\n+            }\n         } else {\n             mHomeUpIndicator.setVisibility(View.GONE);\n             mHomeLogo.setVisibility(View.GONE);\n```\n\nThis is how I configured the action bar:\n\n```\nActionBar actionBar = (ActionBar) findViewById(R.id.actionbar);\nactionBar.setNavigationMode(ActionBar.NAVIGATION_MODE_STANDARD);\nactionBar.setHomeLogo(R.drawable.logo_title);\nactionBar.setHomeAction(actionBar.newAction(R.id.actionbar_item_home));\nactionBar.setDisplayUseLogoEnabled(true);\nactionBar.setDisplayShowHomeEnabled(true);\n```\n\nThe normal icon should work as intended, you can see an example of it here:\n\nhttps://github.com/johannilsson/sthlmtraveling/blob/master/src/com/markupartist/sthlmtraveling/BaseActivity.java#L43\n. Hi, \n\nI would suggest you to try the new version that is in the branch [mimic-native-api](https://github.com/johannilsson/android-actionbar/tree/mimic-native-api). Then you can simply use `setIcon` on the action.\n. Yes this is only available in that branch and of course in @JakeWharton's awesome [Sherlock](http://actionbarsherlock.com/). Please let us know if you run into any problems.\n. Thank you. Yes we definitely need a way to configure the dropdown and this looks good. I haven't tested it yet but I hopefully find the time to do so soon.\n. Hey,\n\nThe [STHLM Traveling](https://market.android.com/details?id=com.markupartist.sthlmtraveling) app logo is set through the menu xml by referencing an id with `@id/actionbar_item_home`. Note that the id is referenced without a `+`. This is because that id is created in the action bar. Whenever the action bar finds an action item with that id that action item is set as the home action.\n\n```\n<item\n    android:id=\"@id/actionbar_item_home\"\n    android:icon=\"@drawable/ic_logo\"/>\n```\n\nYou can also specify a home logo, by calling `setHomeLogo` as in your example. I believe that you also have to call `setDisplayShowHomeEnabled`.\n\nThis is how we configured the action bar for the dashboard in the [Voddler](https://market.android.com/details?id=com.voddler.android) app;\n\n```\nActionBar actionBar = (ActionBar) findViewById(R.id.actionbar);\nactionBar.setNavigationMode(ActionBar.NAVIGATION_MODE_STANDARD);\nactionBar.setHomeLogo(R.drawable.logo_title);\nactionBar.setDisplayUseLogoEnabled(true);\nactionBar.setDisplayShowHomeEnabled(true);\nactionBar.setDisplayShowTitleEnabled(false);\ngetMenuInflater().inflate(R.menu.actionbar_dashboard, actionBar.asMenu());\n```\n\nI'm not sure if the call to `setDisplayShowTitleEnabled` is necessary though.\n. Hi it looks like both greendroid and this action bar is declaring a `declare-styleable` with the name `ActionBar` a `title` attribute. When one or more library projects is added to a project they will all be merged together. To fix this problem you need to alter one of the projects and rename this attribute or stylable element and the corresponding code.\n\nFor the android action bar this means changing the name in [attrs.xml](https://github.com/johannilsson/android-actionbar/blob/master/actionbar/res/values/attrs.xml) and then do the corresponding change in ActionBar [around line 70](https://github.com/johannilsson/android-actionbar/blob/master/actionbar/src/com/markupartist/android/widget/ActionBar.java#L70). The same could be done with green droid.\n. Closing this issue since we talked about it elsewhere.\n. Reply by email does not work for issues?\n\nCurrently I don't think this is possible. But in theory you could make a custom action that aligns to the right. An action with the id R.id.actionbar_item_home is automatically set as the home action. This is only partly supported in the honeycomb branch though from getActionView on an action, https://github.com/johannilsson/android-actionbar/blob/honeycomb-support/actionbar/src/com/markupartist/android/widget/ActionBar.java#L1567\n\nBut with a few modifications on the Action implementation this should be possible to do.\n. There's no magic going on, you have to assign an already scaled icon to the action.\n. You're using the mimic branch? Will look at it tonight, I might not have updated the example project properly yet. But check that you've added the correct theme or referencing the style attr in your custom theme. This project is using the latest version of the mimic branch https://github.com/johannilsson/sthlmtraveling/blob/master/res/values/styles.xml.\n\nEdit: Just noticed your title that it's the mimic branch, sorry :)\n. You don't need the support library, but you need to use the latest sdk 14+. The styles used by the actionbar extends from Android themes (this will change later on), currently a theme from api level 14 is used within styles (will probably rework that tonight) but you can workaround this by adding a separate values directory for api level 14. See the res directory in the above referenced project for an example of that.\n. However, the library runs fine on 1.6+. You just need a later sdk at build time.\n. Great, thanks for the update. Will fix the sample soonish.\n. Should hopefully work better now with, 9ceef7f35ca0533e4a3b688ea4ce00dc28bf228f\n. I haven't done much testing on honeycomb, simply missed that holo is available there. However, its a good practice to have your own app theme. You can simply do this by referencing the style attr for the actuonbar in your own theme.\n\nThe target problem you describes is more an android.issue, and you can still use the holo theme and have.the.target set to 11 just make sure you have the 12+ sdk.\n\nAlso, I just want to be clear that this ab does not intend to replace the native one.\n. I struggled with the menu too in my recent project, I didn't come up with a good solution for it. But the thing is that I don't want to assume that the user wants the menu added to the actionbar by default. If one wants that, then that can be done programtically instead.\n. @rfgamaral My bad on the Holo theme, should work by just renaming `values-v14` to `values-v11` right?\n. I think I understand the differences now, but if you have the time to do a pull request for it that would be very appreciated. My main problem is that I haven't got the emulator for honeycomb to work and I don't have an actual device at hands anymore to test on.\n. @benuch I think it's a better idea to let the dev choose to show an PopupMenu, Dialog or an options menu instead of having that logic in the action bar. If you have an example of your workaround, you might want to share that by an example in the example project? Guess there's others looking for some similar solution.\n. You need the latest version, which was updated yesterday. You then need to add a Theme to your application or activities you want the actionbar in. See the Manifest in example project for that, the example project is using a two different themes, one AppTheme and one styled for the OtherActivity. Hope this helps.\n. It's defined in themes.xml, [here](https://github.com/johannilsson/android-actionbar/blob/mimic-native-api/actionbarexample/res/values/themes.xml) and [here](https://github.com/johannilsson/android-actionbar/blob/mimic-native-api/actionbarexample/res/values-v14/themes.xml) for api level 14+.\n. I know, glad it works now though :)\n. Great introduction for contributing to an open source project @ohhorob, thank you. I'm of course highly great full for all things contributed even if it's not from a pull request but it's the preferred way.\n\nOn the issue, I'm not sure we should fix this here. I think it's a good idea that an exception is thrown here to indicate that the operation could not be performed as intended. Instead I think the example project should be updated to show how this should be handle. Which should be possible by using the method `getActionCount`.\n\nWhat do you think?\n. What the project is named in Eclipse is up to you. The library does not force any IDE on one which why the project files is left out. I believe that in Eclipse you need to do what @JakeWharton suggests, also make sure that the new project you create is an Android project.\n. Sweet, great to hear that it's working now. Thanks!\n. Merged. Agree on the renaming of Styles, this change does not affect apps that does not do heavy customization. It does not change any behavior either. If your app looks strange after this update, please refer to the new naming in styles.xml.\n\nThank you.\n. Meged :sparkles:\n. Haven't looked into why yet, but it seems like the home action in the example apps `OtherActivity` is not affected. Still showing red, should be blue.\n. Awesome, thanks!\n. Yes, should work as @JakeWharton suggest, this is how I have done it myself too. Think it would be nice to have a small support library for these things though.\n. If you want a more tight integration there's of course the [ActionBarSherlock](http://actionbarsherlock.com/) too, but I guess you already know about that.\n\nClosing this ticket since it's currently out of the scope for this action bar.\n. Late reply, yes makes sense to use the `NoActionBar` theme.\n. Good catch on the last one. Thanks.\n. There's limited support for changing the colors at runtime. My suggestion is that you instead change the colors using a theme.\n. The problem is with your code where you change it from code. IIRC this is a limitation of Android, if you're using the mimic-api branch there's better support for theming that allows for separate themes on separate activities.\n. It's a bit more complex to setup but should do what you want. Take a look at the `OtherActivity` in the example project of how to make use of different themes for different activities.\n. The native ActionBar, included in the SDK only works from 3.0+, this implementation works from 1.6+. Have you initiated it correct, if you're getting red underlines I guess it's an IDE related issue? \n. The readme is the only documentation available, there's some projects listed in the wiki with links to their github repos which works pretty well as references too. Regarding the installation if you're still seeing the red underlines I would recommend to have a look at the android documentaiton regarding [library projects](http://developer.android.com/guide/developing/projects/projects-eclipse.html).\n. I believe you have to use import from source or similar in Eclipse.\n. Thank you glad to hear you like it and that you got it to run. California sounds sunny, here's -15\u00b0C and snowing brrr.\n. Agree, I have wanted to change this my self for a long time too. A patched for this would be welcomed.\n. Hi, thank you for this. The `ActionBar` needs to modified for this to work, or the `actionbar_item.xml` needs some modification. This patch currently breaks inflation of actions from what I can see with my initial tests. Will investigate.\n. Will look at it tomorrow again just did a quick check and noticed that the default actions in the example app stopped working with this patch applied.\n. This would be done just as you normally do a `startActivityForResult`. But instead of using the `IntentAction` you must implement your own action and `performAction` method to fire off the `startActivityForResult`. Result will come back a usual. No idea how the camera and gallery intents works though.\n. Hi,\n\nThe styles of the AB is located in styles.xml. My guess is that the white color origins from the background which you have to remove. The borders around the items is made up of a margin trick that makes the background shine through to create a border effect. It's not pretty but works for most cases. Removing the margins and replacing all backgrounds including the drawables for action items might give the effect you're after.\n\nHope this helps.\n. I only distribute the source for this project, any packaging is up to the user to do. [ActionBar Sherlock](http://actionbarsherlock.com/) might be better suited for your needs.\n. Min sdk for this library is set to 4 (1.6). Only use this library if you cannot use ActionBar Sherlock which requires 2.x+.\n. Thanks.\n. Are you making use of the custom xml namespace? In that case you need to change that to your own package name.\n. Hi, `AttributeSet` is not required for the constructor of the `RealtiveLayout` which `ActionBar` extends. You could try to add a new constructor that only takes `Context` in which the title is not set.\n. Closing since it's not an \"issue\". There's also plenty of [forks](https://github.com/johannilsson/android-actionbar/network) around and please if anyone is using the native branch the ActionBar Sherlock is most likely a better alternative.\n\nThanks\n. I do agree that I've been off and not properly replied to the many great pull requests and reported issues and for that I'm sorry. Since the first version of this project a lot has happen and the best alternative in my opinion around for an action bar today is sherlock if one can upgrade their apps to 2.1.x IIRC.\n\nI'll encourage forks and is happy that you and others want to continue to work on this project. Please keep your work up and I'm happy to point people towards that project.\n\nThanks\n. Hi @samirmangroliya this is called Contextual Action Bar and is not supported with this implementation of the action bar. An easier route would be to consider Sherlock which supports this and falls back on the native api when available. You could simulate it by updating the title using `setTitle` and remove the actions with `removeAllActions` when items is selected and then rebuild it when going out of the select context.\n. @leonardoxh is correct, this project only makes sense if you're target older Android releases.\n. Your best option is to add it as it's own Module.\n. Best would be to refer to the documentation for AndroidStudio and gradle for this. My guess though is that the actionbar directory should be enough.\n. Also, I strongly encourage you to look at the actionbar in the official support library or sherlock that both have the same API as the native actionbar on Android. \n. Thank you for your comment, this library is now deprecated. This implementation only support drawables as actions. You can create your own fork to support custom views.\n. This library is not supported anymore. To accomplish what you want you need to add that functionality yourself unfortunate. Thanks.\n. Hi @hamedtaheri32, thanks for the PR and that you took the time to send it in. This library is not supported anymore which is why I will not merge this change.\n\nThanks!\n. ",
    "JakeWharton": "Is there already a way to add an indeterminate progress indicator? I was not able to see one in the API.\n. This is beyond the scope of just the action bar because it introduces functionality into the xml file that would only work with this specific implementation. So if you wanted to use the same xml with a normal options or context menu, or in the future you changed the action bar library to another implementation that happened to support xml inflation, you would lose the automatic Intents.\n\nIf you want to do this, the best way would be to implement the custom menu inflater yourself. Then you can just use an instance of it rather than calling the activity's `getMenuInflater()` method. You could then use this custom inflater on any interface that supported `Menu`/`MenuItem` and it would always work the same, including options menus and context menus. It would actually be a rather elegant solution.\n. I think you are confusing the versions for the target SDK and the minimum SDK. The `minSdkVersion` already allows use all the way back to Android 1.5. The target should be set to the newest version so you are always compiling against the latest builds.\n\nAlso, as a Maven user and Android developer the inclusion of a pom.xml and the deployment of artifacts to a central repository would be a much welcome change.\n. You are ultimately going to run into problems trying to do automated releases from a Git repository with your `pom.xml` in a subdirectory. During the automated release cycle, Maven re-clones your repository and performs operations on its clone, rather than your current folder. Since it does not know to look into the subdirectory, it will not find a `pom.xml` in the root and fail.\n\nThere are two easy solutions for how to fix this though.\n- Move the library to the root of the repository and keep the example application in an `example` folder. Doing this will obviously give you a `pom.xml` in the root.\n- Create a parent `pom.xml` in the root of the repository with a single submodule for the library. This will allow for operations to be done in the root of the repository and 'trickle down' into the submodule.\n\nI would probably prefer the latter since it then allows you to also add a submodule for the example so it gets versioned along with the library. I'll try to get a pull request in this week for the latter with some simple instructions to go along with it.\n\nMoving to Maven, especially for Android, has a bit of a learning curve but once you have the whole process running smoothly it's quite a time-saver.\n. This is being worked on and is fixed in #25.\n. This is being worked on in #25.\n. Added navigation modes for standard (title only) and list navigation.\n. I believe I have everything except for tabbed navigation implemented. Been a crazy 24 hours of hacking all this support in but I think it turned out pretty well. I still have a few things on my TODO list other than tabbed navigation but they can wait a bit.\n\nCheck out [the example app](http://dl.dropbox.com/u/6602046/Android-ActionBar-Demo-1.apk) for a full demo of the new features.\n\n![QR Code](https://chart.googleapis.com/chart?chs=150x150&cht=qr&chl=http://dl.dropbox.com/u/6602046/Android-ActionBar-Demo-1.apk&choe=UTF-8)\n. Let me know what you think of JakeWharton/android-actionbar@0b3d97218adc265a67d8ecb7896abf5d9ef041d3. I can revert it if it is not the route you want to go in. It fixes #7 and is something I do in the custom version of your library that is used in the yet-unreleased ActionBarSherlock v3.\n. Updated demo apk linked above for those interested.\n\nTwo problems i've noticed:\n- Custom tab views (or at least the simple one I have created) are distorted.\n- List view dropdown doesn't show d-pad selection. The selection with the d-pad works, but there is no state displayed on screen because the list items do not use the normal style.\n. Closing this since you've already merged it into a topic branch and I want to delete my forked repo since a few people started to watch it instead of yours.\n. Switching those two pieces of code will fix both problems.\n\nWhen you call `setSelectedNavigationItem()` within the callback it does update the selected item successfully but the value gets overridden once the callback completes and the original selected item index replaces it.\n. I agree that tracking the previous selection(s) is an exercise best left to the implementer since it is trivial and not likely something that would be used by a lot of users.\n\nGood catch on finding this bug, though.\n. API documentation for the methods whose signatures match the native action bar have been copied verbatim from Android 3.1 so there may be a few differences. It should definitely be given a looking over before merging to master. \n. `setIcon` is part of the `Action` class, an instance of which represents each action item that appears on the action bar. There are two methods to set the icon on these instances. The associated source code is located [here](https://github.com/johannilsson/android-actionbar/blob/mimic-native-api/actionbar/src/com/markupartist/android/widget/ActionBar.java#L1473-1484).\n\n``` Java\nActionBar.Action action = mActionBar.newAction()\n                                    .setIcon(R.drawable.ic_star)\n                                    .setOnMenuItemClickListener(/*...*/);\nmActionBar.addAction(action);\n```\n. You do not need to use Maven in order to utilize this project. Simple create a new Android project, check the existing sources box, and browse to the `actionbar/` folder in your download.\n\nYou can then do the same three steps for the example app as well.\n. Are your developer tools and eclipse plugins up-to-date? Make sure you're using r16 / v16.0.1.\n- http://developer.android.com/sdk/eclipse-adt.html\n- http://developer.android.com/sdk/tools-notes.html\n. You have to compile with Android 4.0 or 4.0.3 in order for that folder to\nbe valid.\nOn Jan 9, 2012 12:13 PM, \"adiktz\" <\nreply@reply.github.com>\nwrote:\n\n> I just deleted the \"gen\" folder from the project folder and also deleted\n> value-v14 folder because that was showing error...!!!\n> After a \"Project >> Clean\" and a refresh, finally R.java file is generated\n> (sigh, such a relief)...!!!\n> \n> When I followed the steps stated by @JakeWharton in his first comment for\n> the example, it was straight forward and all the files were easily copied\n> into the new project folder (Strange)...!!! Again, I had to delete\n> value-v14 folder (don't know why it shows error...)...!!!\n> \n> One more thing :\n> \n> I had to \"import com.markupartist.android.widget.actionbar.R;\" to the\n> ActionBar.java and ListNavigationDropdown.java files of the library...!!! I\n> suppose it is strange ( Or isn't it...??? )...!!!  From the issues I learnt\n> that I would have to set the theme in projects using the widget, Is it also\n> required in example project...???\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> \n> https://github.com/johannilsson/android-actionbar/issues/50#issuecomment-3416414\n. You can control the height of the title bar with the `android:windowTitleSize` theme attribute.\n. I would set it as\n\n``` xml\n<item name=\"android:windowTitleSize\">@dimen/actionbar_height</item>\n```\n\nso it always matches the height of the action bar.\n. Is there already a way to add an indeterminate progress indicator? I was not able to see one in the API.\n. This is beyond the scope of just the action bar because it introduces functionality into the xml file that would only work with this specific implementation. So if you wanted to use the same xml with a normal options or context menu, or in the future you changed the action bar library to another implementation that happened to support xml inflation, you would lose the automatic Intents.\n\nIf you want to do this, the best way would be to implement the custom menu inflater yourself. Then you can just use an instance of it rather than calling the activity's `getMenuInflater()` method. You could then use this custom inflater on any interface that supported `Menu`/`MenuItem` and it would always work the same, including options menus and context menus. It would actually be a rather elegant solution.\n. I think you are confusing the versions for the target SDK and the minimum SDK. The `minSdkVersion` already allows use all the way back to Android 1.5. The target should be set to the newest version so you are always compiling against the latest builds.\n\nAlso, as a Maven user and Android developer the inclusion of a pom.xml and the deployment of artifacts to a central repository would be a much welcome change.\n. You are ultimately going to run into problems trying to do automated releases from a Git repository with your `pom.xml` in a subdirectory. During the automated release cycle, Maven re-clones your repository and performs operations on its clone, rather than your current folder. Since it does not know to look into the subdirectory, it will not find a `pom.xml` in the root and fail.\n\nThere are two easy solutions for how to fix this though.\n- Move the library to the root of the repository and keep the example application in an `example` folder. Doing this will obviously give you a `pom.xml` in the root.\n- Create a parent `pom.xml` in the root of the repository with a single submodule for the library. This will allow for operations to be done in the root of the repository and 'trickle down' into the submodule.\n\nI would probably prefer the latter since it then allows you to also add a submodule for the example so it gets versioned along with the library. I'll try to get a pull request in this week for the latter with some simple instructions to go along with it.\n\nMoving to Maven, especially for Android, has a bit of a learning curve but once you have the whole process running smoothly it's quite a time-saver.\n. This is being worked on and is fixed in #25.\n. This is being worked on in #25.\n. Added navigation modes for standard (title only) and list navigation.\n. I believe I have everything except for tabbed navigation implemented. Been a crazy 24 hours of hacking all this support in but I think it turned out pretty well. I still have a few things on my TODO list other than tabbed navigation but they can wait a bit.\n\nCheck out [the example app](http://dl.dropbox.com/u/6602046/Android-ActionBar-Demo-1.apk) for a full demo of the new features.\n\n![QR Code](https://chart.googleapis.com/chart?chs=150x150&cht=qr&chl=http://dl.dropbox.com/u/6602046/Android-ActionBar-Demo-1.apk&choe=UTF-8)\n. Let me know what you think of JakeWharton/android-actionbar@0b3d97218adc265a67d8ecb7896abf5d9ef041d3. I can revert it if it is not the route you want to go in. It fixes #7 and is something I do in the custom version of your library that is used in the yet-unreleased ActionBarSherlock v3.\n. Updated demo apk linked above for those interested.\n\nTwo problems i've noticed:\n- Custom tab views (or at least the simple one I have created) are distorted.\n- List view dropdown doesn't show d-pad selection. The selection with the d-pad works, but there is no state displayed on screen because the list items do not use the normal style.\n. Closing this since you've already merged it into a topic branch and I want to delete my forked repo since a few people started to watch it instead of yours.\n. Switching those two pieces of code will fix both problems.\n\nWhen you call `setSelectedNavigationItem()` within the callback it does update the selected item successfully but the value gets overridden once the callback completes and the original selected item index replaces it.\n. I agree that tracking the previous selection(s) is an exercise best left to the implementer since it is trivial and not likely something that would be used by a lot of users.\n\nGood catch on finding this bug, though.\n. API documentation for the methods whose signatures match the native action bar have been copied verbatim from Android 3.1 so there may be a few differences. It should definitely be given a looking over before merging to master. \n. `setIcon` is part of the `Action` class, an instance of which represents each action item that appears on the action bar. There are two methods to set the icon on these instances. The associated source code is located [here](https://github.com/johannilsson/android-actionbar/blob/mimic-native-api/actionbar/src/com/markupartist/android/widget/ActionBar.java#L1473-1484).\n\n``` Java\nActionBar.Action action = mActionBar.newAction()\n                                    .setIcon(R.drawable.ic_star)\n                                    .setOnMenuItemClickListener(/*...*/);\nmActionBar.addAction(action);\n```\n. You do not need to use Maven in order to utilize this project. Simple create a new Android project, check the existing sources box, and browse to the `actionbar/` folder in your download.\n\nYou can then do the same three steps for the example app as well.\n. Are your developer tools and eclipse plugins up-to-date? Make sure you're using r16 / v16.0.1.\n- http://developer.android.com/sdk/eclipse-adt.html\n- http://developer.android.com/sdk/tools-notes.html\n. You have to compile with Android 4.0 or 4.0.3 in order for that folder to\nbe valid.\nOn Jan 9, 2012 12:13 PM, \"adiktz\" <\nreply@reply.github.com>\nwrote:\n\n> I just deleted the \"gen\" folder from the project folder and also deleted\n> value-v14 folder because that was showing error...!!!\n> After a \"Project >> Clean\" and a refresh, finally R.java file is generated\n> (sigh, such a relief)...!!!\n> \n> When I followed the steps stated by @JakeWharton in his first comment for\n> the example, it was straight forward and all the files were easily copied\n> into the new project folder (Strange)...!!! Again, I had to delete\n> value-v14 folder (don't know why it shows error...)...!!!\n> \n> One more thing :\n> \n> I had to \"import com.markupartist.android.widget.actionbar.R;\" to the\n> ActionBar.java and ListNavigationDropdown.java files of the library...!!! I\n> suppose it is strange ( Or isn't it...??? )...!!!  From the issues I learnt\n> that I would have to set the theme in projects using the widget, Is it also\n> required in example project...???\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> \n> https://github.com/johannilsson/android-actionbar/issues/50#issuecomment-3416414\n. You can control the height of the title bar with the `android:windowTitleSize` theme attribute.\n. I would set it as\n\n``` xml\n<item name=\"android:windowTitleSize\">@dimen/actionbar_height</item>\n```\n\nso it always matches the height of the action bar.\n. ",
    "caojunvincent": "this \"patch\" is exactly what i want, thanks for your code\n. this \"patch\" is exactly what i want, thanks for your code\n. ",
    "ohhorob": "That looks fine. I'd be happy with those changes.\n. Actually, yes!\n\nUnsetting the background will let the ActionBar style background show. I set it to transparent without remembering that it could just be unspecified.\n. @hashfold firstly, good on you for wanting to provide a fix for a problem you're having. That's a great start.\n\nGitHub is collaborative in the way it allows you to take a \"fork\" of the code you're using, make changes, and then ask the original developer to \"pull\" your changes into the original codebase that everybody uses.\n\nTo contribute your fix, [start with a fork](http://help.github.com/fork-a-repo/). Be sure to fork from the branch & commit of android-actionbar that you have made the fix for. Refer to that [\"Fork A Repo\"](http://help.github.com/fork-a-repo/) guide for how to push your changes up to your GitHub fork.\n\nNow you're ready to make a Pull Request, and that will ask @johannilsson to please incorporate your changes for the benefit of everyone that uses android-actionbar. Here's an example pull request for changes that I made in my fork: [Layout adjustments](https://github.com/johannilsson/android-actionbar/pull/6)\n\nYour pull request might not automatically be accepted! There might be differences of opinion regarding anything from commenting, error handling, code style or even if the fix was made in the correct place. i.e. just because it works for you, doesn't mean it's in everybody's best interest. Work with the developer to reach a point where they're happy to merge the changes. If they don't it's not personal, and all is not lost!\n\nEven if your pull request is not performed, you can still maintain your fork of the code by keeping it up to date the with original code base. Just keep merging in the original repo when you'd like to include the fixes and updates that are happening there.\n\nHope that helps & good luck :)\n. That looks fine. I'd be happy with those changes.\n. Actually, yes!\n\nUnsetting the background will let the ActionBar style background show. I set it to transparent without remembering that it could just be unspecified.\n. @hashfold firstly, good on you for wanting to provide a fix for a problem you're having. That's a great start.\n\nGitHub is collaborative in the way it allows you to take a \"fork\" of the code you're using, make changes, and then ask the original developer to \"pull\" your changes into the original codebase that everybody uses.\n\nTo contribute your fix, [start with a fork](http://help.github.com/fork-a-repo/). Be sure to fork from the branch & commit of android-actionbar that you have made the fix for. Refer to that [\"Fork A Repo\"](http://help.github.com/fork-a-repo/) guide for how to push your changes up to your GitHub fork.\n\nNow you're ready to make a Pull Request, and that will ask @johannilsson to please incorporate your changes for the benefit of everyone that uses android-actionbar. Here's an example pull request for changes that I made in my fork: [Layout adjustments](https://github.com/johannilsson/android-actionbar/pull/6)\n\nYour pull request might not automatically be accepted! There might be differences of opinion regarding anything from commenting, error handling, code style or even if the fix was made in the correct place. i.e. just because it works for you, doesn't mean it's in everybody's best interest. Work with the developer to reach a point where they're happy to merge the changes. If they don't it's not personal, and all is not lost!\n\nEven if your pull request is not performed, you can still maintain your fork of the code by keeping it up to date the with original code base. Just keep merging in the original repo when you'd like to include the fixes and updates that are happening there.\n\nHope that helps & good luck :)\n. ",
    "Esteth": "I'd love this, but I'm not sure it's possible?\n. I'd love this, but I'm not sure it's possible?\n. ",
    "LorneLaliberte": "I'm not sure if it's possible to extend the MenuItem XML to include the class names, etc. but it is definitely possible to dynamically create intents from XML data.\n\nYou simply need to provide the class names in array form, and then use that with Class.forName() to get the Class parameter when creating the intent.\n\nThe names can either be provided using the full declarations, e.g. packagename.classname, or just as class names that you can prepend the current package name to.\n\nSo, for example, you could provide a string array named \"activity_classes\" and use that to provide the class name for the navigation list intents based on array position. (You could also combine the list item text and the class name in an array and access the items via a different adapter.)\n\nThen simply do something like this, for example in onNavigationItemSelected:\n\n```\nString[] classes = getResources().getStringArray(R.array.activity_classes);\n//...\nString className = packageName+\".\"+classes[itemPosition];\nIntent intent = new Intent(Main.this, Class.forName(className));\nintent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);\nstartActivity(intent);\n```\n\nIn the above snippet, packageName could either be specified in the array, replaced by a literal, or calculated earlier in the code like so:\n\n```\nfinal String packageName = this.getPackageName();\n```\n\nSo, it should at least be possible to cross reference menu item ids with a collection of class names (either another array, or a map, or...).\n. Yep, I'm already using the mimic-native-api branch. Unless I'm missing something, though, that example only shows how to inflate the action items from XML...the intents are still created in \"static\" Java code, e.g. after switching on the item id in onOptionsItemSelected.\n\nFor our project I was interested in making the navigation list intents originate \"dynamically\" from XML, and it occurred to me that the same approach could be used for inflated action items.\n\nI'm relatively new at Android development so forgive me if I'm stating something obvious. :)\n. @JakeWharton: Thanks for the tip to use a custom inflater, I might give that a shot.\n\nLuckily that level of elegance isn't a requirement for our project :) so if all else fails I'll be able to get by with something simpler, e.g. multiple string arrays.\n\n@johannilsson: good point about future compatibility, too.\n. Yep, thanks Jake! I just spotted the pull request this morning. I'm really glad I checked before continuing with my own implementation, this will save me a lot of work. :)\n. Thanks, I didn't spot that change...I'll see if I can get it working at my end.\n\nBTW, yes, as far as I can tell it's being used correctly as a library; the method I'm using has worked fine up until the latest pull.\n\nWhenever a new version of the library is available, I pull the changes, and then manually copy the source tree into another repository, delete the .git folder and .gitignore file, and restart eclipse. (I didn't want to mess around with sub-repositories after reading about many problems with them.)\n\nThe project is already configured as a library in Eclipse, and has remained so after every update so far. My own project is still correctly referencing the android-actionbar libary project in its properties as well.\n. Ok, got it to work by forcing com/markupartist/android/widget/actionbar/R.java to reload. (I edited it within eclipse and forced it to regenerate...for some reason I need to do this occasionally to force Eclipse to recognize changes to files in library projects when Refresh doesn't. It seems to work fine until there's a syntax error in a library, then it gets \"stuck\" on the error state for some reason and does not refresh.)\n\nSorry for the false issue report, thanks for the quick response though Johan!\n. Yeah, I've had similar issues with other library projects, including our own internal projects we've had set up. It's somewhat sporadic, and a refresh on either project doesn't do the trick; but I've switched to using \"Project > Clean\" in those cases which seems to work. (Which is another way of forcing the autogeneration to occur.)\n. Yeah, the only downside would be that you couldn't query what the selection was before the onClick. You could easily track it yourself in your OnNavigationListener if you needed to, though.\n. Yep, perusing the commits has definitely been helpful. In this case I didn't spot the manifest change, but I don't blame you...as you said it's still a work in progress, and besides, this library is saving me so much time from building my own action bar that I can afford to lose some time here and there. :)\n. @johannilsson, yep that patch takes care of both issues here (tested in NAVIGATION_MODE_LIST).\n- I actually have no pressing need to use the logo, I was just testing a static helper method.\n\nThanks!\n\n@JakeWharton, yeah I recognized some of that text from http://developer.android.com/guide/topics/ui/actionbar.html. :)\n. Ah -- there's a problem with my suggested fix: in List Navigation mode, the dropdown item background becomes the action bar's background, since it's used for the selected item shown in the spinner.\n\nSo there's the added caveat that you would need to use a SpinnerAdapter that provides a different view for the spinner itself.\n\nHmmm.\n\nYeah, it works if I add layout/actionbar_list_mode_title.xml like so:\n\n``` xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<TextView xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:id=\"@+id/actionbar_list_mode_title\"\n    android:layout_width=\"fill_parent\"\n    android:layout_height=\"@dimen/actionbar_height\"\n    android:gravity=\"center_vertical\"\n    android:paddingLeft=\"10dip\"\n    android:paddingRight=\"10dip\"\n    android:textSize=\"16dip\"\n    android:textStyle=\"bold\"\n    android:textColor=\"@color/actionbar_title\"\n    android:lines=\"1\"\n    android:background=\"@drawable/actionbar_btn\"\n    android:focusable=\"true\"\n    />\n```\n\n...and then create the SpinnerAdapter like this:\n\n``` java\n            ArrayAdapter adapter = ArrayAdapter.createFromResource(context, R.array.activity_titles, R.layout.actionbar_list_mode_title);\n            adapter.setDropDownViewResource(R.layout.actionbar_list_dropdown_item);\n            SpinnerAdapter listAdapter = adapter;\n```\n. I'm not sure if it's possible to extend the MenuItem XML to include the class names, etc. but it is definitely possible to dynamically create intents from XML data.\n\nYou simply need to provide the class names in array form, and then use that with Class.forName() to get the Class parameter when creating the intent.\n\nThe names can either be provided using the full declarations, e.g. packagename.classname, or just as class names that you can prepend the current package name to.\n\nSo, for example, you could provide a string array named \"activity_classes\" and use that to provide the class name for the navigation list intents based on array position. (You could also combine the list item text and the class name in an array and access the items via a different adapter.)\n\nThen simply do something like this, for example in onNavigationItemSelected:\n\n```\nString[] classes = getResources().getStringArray(R.array.activity_classes);\n//...\nString className = packageName+\".\"+classes[itemPosition];\nIntent intent = new Intent(Main.this, Class.forName(className));\nintent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);\nstartActivity(intent);\n```\n\nIn the above snippet, packageName could either be specified in the array, replaced by a literal, or calculated earlier in the code like so:\n\n```\nfinal String packageName = this.getPackageName();\n```\n\nSo, it should at least be possible to cross reference menu item ids with a collection of class names (either another array, or a map, or...).\n. Yep, I'm already using the mimic-native-api branch. Unless I'm missing something, though, that example only shows how to inflate the action items from XML...the intents are still created in \"static\" Java code, e.g. after switching on the item id in onOptionsItemSelected.\n\nFor our project I was interested in making the navigation list intents originate \"dynamically\" from XML, and it occurred to me that the same approach could be used for inflated action items.\n\nI'm relatively new at Android development so forgive me if I'm stating something obvious. :)\n. @JakeWharton: Thanks for the tip to use a custom inflater, I might give that a shot.\n\nLuckily that level of elegance isn't a requirement for our project :) so if all else fails I'll be able to get by with something simpler, e.g. multiple string arrays.\n\n@johannilsson: good point about future compatibility, too.\n. Yep, thanks Jake! I just spotted the pull request this morning. I'm really glad I checked before continuing with my own implementation, this will save me a lot of work. :)\n. Thanks, I didn't spot that change...I'll see if I can get it working at my end.\n\nBTW, yes, as far as I can tell it's being used correctly as a library; the method I'm using has worked fine up until the latest pull.\n\nWhenever a new version of the library is available, I pull the changes, and then manually copy the source tree into another repository, delete the .git folder and .gitignore file, and restart eclipse. (I didn't want to mess around with sub-repositories after reading about many problems with them.)\n\nThe project is already configured as a library in Eclipse, and has remained so after every update so far. My own project is still correctly referencing the android-actionbar libary project in its properties as well.\n. Ok, got it to work by forcing com/markupartist/android/widget/actionbar/R.java to reload. (I edited it within eclipse and forced it to regenerate...for some reason I need to do this occasionally to force Eclipse to recognize changes to files in library projects when Refresh doesn't. It seems to work fine until there's a syntax error in a library, then it gets \"stuck\" on the error state for some reason and does not refresh.)\n\nSorry for the false issue report, thanks for the quick response though Johan!\n. Yeah, I've had similar issues with other library projects, including our own internal projects we've had set up. It's somewhat sporadic, and a refresh on either project doesn't do the trick; but I've switched to using \"Project > Clean\" in those cases which seems to work. (Which is another way of forcing the autogeneration to occur.)\n. Yeah, the only downside would be that you couldn't query what the selection was before the onClick. You could easily track it yourself in your OnNavigationListener if you needed to, though.\n. Yep, perusing the commits has definitely been helpful. In this case I didn't spot the manifest change, but I don't blame you...as you said it's still a work in progress, and besides, this library is saving me so much time from building my own action bar that I can afford to lose some time here and there. :)\n. @johannilsson, yep that patch takes care of both issues here (tested in NAVIGATION_MODE_LIST).\n- I actually have no pressing need to use the logo, I was just testing a static helper method.\n\nThanks!\n\n@JakeWharton, yeah I recognized some of that text from http://developer.android.com/guide/topics/ui/actionbar.html. :)\n. Ah -- there's a problem with my suggested fix: in List Navigation mode, the dropdown item background becomes the action bar's background, since it's used for the selected item shown in the spinner.\n\nSo there's the added caveat that you would need to use a SpinnerAdapter that provides a different view for the spinner itself.\n\nHmmm.\n\nYeah, it works if I add layout/actionbar_list_mode_title.xml like so:\n\n``` xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<TextView xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:id=\"@+id/actionbar_list_mode_title\"\n    android:layout_width=\"fill_parent\"\n    android:layout_height=\"@dimen/actionbar_height\"\n    android:gravity=\"center_vertical\"\n    android:paddingLeft=\"10dip\"\n    android:paddingRight=\"10dip\"\n    android:textSize=\"16dip\"\n    android:textStyle=\"bold\"\n    android:textColor=\"@color/actionbar_title\"\n    android:lines=\"1\"\n    android:background=\"@drawable/actionbar_btn\"\n    android:focusable=\"true\"\n    />\n```\n\n...and then create the SpinnerAdapter like this:\n\n``` java\n            ArrayAdapter adapter = ArrayAdapter.createFromResource(context, R.array.activity_titles, R.layout.actionbar_list_mode_title);\n            adapter.setDropDownViewResource(R.layout.actionbar_list_dropdown_item);\n            SpinnerAdapter listAdapter = adapter;\n```\n. ",
    "RickardPettersson": "Yes it should solve the problem, do you whant to fix it or should i?\n. Yes it should solve the problem, do you whant to fix it or should i?\n. ",
    "senagbe": "Has this been integrated back in? I am still getting the issue where my gradient is beign overwritten by the old gradient.\n\nI am setting the gradient in code.\n\nactionBar.setTitle(intelCategories[getDashboardPosition()].title);\n        ActionBar.IntentAction homeIntentAction = new ActionBar.IntentAction(this, DashboardActivity.createIntent(this), R.drawable.actionbar_home); \n        actionBar.setHomeAction(homeIntentAction);\n        actionBar.setBackgroundResource(intelCategories[getDashboardPosition()].gradient);\n. Cheers,\n\nSo how much would you want to do this right now :)\n\nS\n\n---\n\nSena Gbeckor-Kove\n\nCTO/Founder - imKon \n\nUK : +44 7788 146652 \nsena@imkon.com | www.imkon.com\n\nAsia (Singapore) :\n35 Selegie Road, #09-14/15 Parklane Shopping Mall, 188307 Singapore, Singapore\n\nEurope (London) :\n145-157 St John's St, EC1V 4PY London, UK\n\nOn Tuesday, 29 March 2011 at 18:22, johannilsson wrote:\nHi @senagbe, \n\n> These are not related. The action bar currently doesn't support overriding the style programmatically.\n> \n> To accomplish this I believe we need to add the ability to set a custom layout for both action bar items and for the action bar it self. This is quite a large refactoring but something I believe is worth the effort to be able to do more custom implementations.\n> \n> I've opened a [new issue](https://github.com/johannilsson/android-actionbar/issues/19) for this.\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/johannilsson/android-actionbar/pull/9#issuecomment-932029\n. Indeed, we have been trying to use a single ActionBar which changes colour in the same activity depending on the category of item being manipulated.\n\nUsing setBackgroundResource() doesn't work. Its even more of an issue for us as we wish to change the actionbar style in the same MapActivity (since you can only have one per project).\n. Thanks Johan, where are you based?\n. Has this been integrated back in? I am still getting the issue where my gradient is beign overwritten by the old gradient.\n\nI am setting the gradient in code.\n\nactionBar.setTitle(intelCategories[getDashboardPosition()].title);\n        ActionBar.IntentAction homeIntentAction = new ActionBar.IntentAction(this, DashboardActivity.createIntent(this), R.drawable.actionbar_home); \n        actionBar.setHomeAction(homeIntentAction);\n        actionBar.setBackgroundResource(intelCategories[getDashboardPosition()].gradient);\n. Cheers,\n\nSo how much would you want to do this right now :)\n\nS\n\n---\n\nSena Gbeckor-Kove\n\nCTO/Founder - imKon \n\nUK : +44 7788 146652 \nsena@imkon.com | www.imkon.com\n\nAsia (Singapore) :\n35 Selegie Road, #09-14/15 Parklane Shopping Mall, 188307 Singapore, Singapore\n\nEurope (London) :\n145-157 St John's St, EC1V 4PY London, UK\n\nOn Tuesday, 29 March 2011 at 18:22, johannilsson wrote:\nHi @senagbe, \n\n> These are not related. The action bar currently doesn't support overriding the style programmatically.\n> \n> To accomplish this I believe we need to add the ability to set a custom layout for both action bar items and for the action bar it self. This is quite a large refactoring but something I believe is worth the effort to be able to do more custom implementations.\n> \n> I've opened a [new issue](https://github.com/johannilsson/android-actionbar/issues/19) for this.\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/johannilsson/android-actionbar/pull/9#issuecomment-932029\n. Indeed, we have been trying to use a single ActionBar which changes colour in the same activity depending on the category of item being manipulated.\n\nUsing setBackgroundResource() doesn't work. Its even more of an issue for us as we wish to change the actionbar style in the same MapActivity (since you can only have one per project).\n. Thanks Johan, where are you based?\n. ",
    "necronet": "Is there a way that the progress can appear at the right of the component I mean currently displayed at right but before the items button. Is there a way i can set it up to layout_alignParentRight=\"true\" ?\n. Is there a way that the progress can appear at the right of the component I mean currently displayed at right but before the items button. Is there a way i can set it up to layout_alignParentRight=\"true\" ?\n. ",
    "robisaks": "Once again, you prove your awesomeness! Thank you!\n. Once again, you prove your awesomeness! Thank you!\n. ",
    "obra": "The new methods make sense. I'd be a little nervous about removeAction being to DWIMMY without being able to give the actions names/ids.\n\nMaybe instead have a getActionAt() method that lets you load up a particular action by index and force the user to do the comparison manually?\n\nI'd be totally in favor of revamped functionality to make ActionBar more like honeycomb's.  _Somebody_ has to build an API compatible version of what Google's shipping in H, though it doesn't look like it'll be easy.\n\nOn the upside, we should have Honeycomb source to crib from in a few days.\n. That's not...wrong, but it doesn't really fit with the UI patterns I see implemented with ActionBar. I wouldn't object, though.\n. Sure. That's a perfectly reasonable argument\n. The new methods make sense. I'd be a little nervous about removeAction being to DWIMMY without being able to give the actions names/ids.\n\nMaybe instead have a getActionAt() method that lets you load up a particular action by index and force the user to do the comparison manually?\n\nI'd be totally in favor of revamped functionality to make ActionBar more like honeycomb's.  _Somebody_ has to build an API compatible version of what Google's shipping in H, though it doesn't look like it'll be easy.\n\nOn the upside, we should have Honeycomb source to crib from in a few days.\n. That's not...wrong, but it doesn't really fit with the UI patterns I see implemented with ActionBar. I wouldn't object, though.\n. Sure. That's a perfectly reasonable argument\n. ",
    "lvillani": "Regarding API Level 8 -> 7: there's no real reason other than the fact I am working on a product which is targeted at Android >= 2.1 devices.\n\nAs for Maven: we are using maven-android-plugin (http://code.google.com/p/maven-android-plugin/) which is able to pack a library project into an \"APKLib\" which can be then referenced from an Android project (managed by Maven). \n\nThere are still rough edges in maven-android-plugin but I'm testing some patches which should improve APKLib handling.\n. Regarding API Level 8 -> 7: there's no real reason other than the fact I am working on a product which is targeted at Android >= 2.1 devices.\n\nAs for Maven: we are using maven-android-plugin (http://code.google.com/p/maven-android-plugin/) which is able to pack a library project into an \"APKLib\" which can be then referenced from an Android project (managed by Maven). \n\nThere are still rough edges in maven-android-plugin but I'm testing some patches which should improve APKLib handling.\n. ",
    "rtyley": "I think it's cool to mavenise android-actionbar - also, ultimately, it would be great for the artifacts to be published to Maven Central. The best, easiest way to do this is to use the awesome service provided by Sonatype for open-source projects. See here:\n\nhttps://docs.sonatype.org/display/Repository/Sonatype+OSS+Maven+Repository+Usage+Guide\n\nI've been though this process, there's a few JIRA tickets to open initially, but once you've got yourself setup with a password and a GPG key, you can publish at will to Maven Central using their staging repository at https://oss.sonatype.org/ - it works pretty well, and ultimately will minimize the amount of effort required by people to use your project.\n\nOf course, the amount of effort to use android-actionbar at the moment already _is_ pretty minimal - just copy the single class and some of the resource files over with minor editing - but even then, maven makes some things easier - versioning for instance, so that people can easily upgrade to newer versions by changing a version number in their pom, rather than doing a copy and paste of the entire class file.\n. Incidentally, the maven-android-plugin has added support for Library projects (like what android-actionbar is) in 2.9.0-beta-1 - prob worth incorporating this.\n\nhttp://code.google.com/p/maven-android-plugin/wiki/ApkLib\n. I think it's cool to mavenise android-actionbar - also, ultimately, it would be great for the artifacts to be published to Maven Central. The best, easiest way to do this is to use the awesome service provided by Sonatype for open-source projects. See here:\n\nhttps://docs.sonatype.org/display/Repository/Sonatype+OSS+Maven+Repository+Usage+Guide\n\nI've been though this process, there's a few JIRA tickets to open initially, but once you've got yourself setup with a password and a GPG key, you can publish at will to Maven Central using their staging repository at https://oss.sonatype.org/ - it works pretty well, and ultimately will minimize the amount of effort required by people to use your project.\n\nOf course, the amount of effort to use android-actionbar at the moment already _is_ pretty minimal - just copy the single class and some of the resource files over with minor editing - but even then, maven makes some things easier - versioning for instance, so that people can easily upgrade to newer versions by changing a version number in their pom, rather than doing a copy and paste of the entire class file.\n. Incidentally, the maven-android-plugin has added support for Library projects (like what android-actionbar is) in 2.9.0-beta-1 - prob worth incorporating this.\n\nhttp://code.google.com/p/maven-android-plugin/wiki/ApkLib\n. ",
    "sandrobusonera": "Hi,\n\nIt has been fixed only in \"mimic-native-api\" branch. Have you planned to merge it in the master?\n\nThanks anyway.\n. Hi,\n\nIt has been fixed only in \"mimic-native-api\" branch. Have you planned to merge it in the master?\n\nThanks anyway.\n. ",
    "andreibalmos": "Yes, something like that. Essentially only a edittext and a button is needed. Of course, it could be more complex. I'm using your library and implementing the searchbar on a project. I will post here how things turn out. Anyway thank you for the library. It's lightweight and flexible. I love it\n. Yes, something like that. Essentially only a edittext and a button is needed. Of course, it could be more complex. I'm using your library and implementing the searchbar on a project. I will post here how things turn out. Anyway thank you for the library. It's lightweight and flexible. I love it\n. ",
    "slapperwan": "Checked out the example and really like the navigation mode list :)\n. Checked out the example and really like the navigation mode list :)\n. ",
    "kottkrig": "Amazing! Great work.\n. Amazing! Great work.\n. ",
    "adiktz": "That patch worked...!!! Thanks...!!!\n. One more thing...!!! Can I disable click on the home icon...??? I mean it should not show the changed background when it is pressed...!!! \n. Tried that just now...!!! New project is created automatically with the name \"com_markupartist_android_widget_actionbar\" but the src and all other folders are empty, not even AndroidManifest.xml file is present...!!!  Now what to do...???\n. Yes my art is r16 and eclipse is also upto date...!!!\n\nAnd the new project I'm creating is an Android project...!!!\n\nI named the project ActionBar...!!! Now what i did is I copies sec and Res\nfolder from the download folder to this newly created project folder\n\"ActionBar\"...!!! Also copied the Manifest file...!!! Now after a refresh\nin eclipse everything comes...!!! Now only problem I am having is wherever\nR.something is mentioned, it shows error...!!! On analysis i found that \"R\"\nfile was not generated...!!!\nNow what can i do to let it generate R.Java automatically...??? I tried\ncleaning project...!!!\n. I just deleted the \"gen\" folder from the project folder and also deleted value-v14 folder because that was showing error...!!!\nAfter a \"Project >> Clean\" and a refresh, finally R.java file is generated (sigh, such a relief)...!!!\n\nWhen I followed the steps stated by @JakeWharton in his first comment for the example, it was straight forward and all the files were easily copied into the new project folder (Strange)...!!! Again, I had to delete value-v14 folder (don't know why it shows error...)...!!! \n\nOne more thing :\n\nI had to \"import com.markupartist.android.widget.actionbar.R;\" to the ActionBar.java and ListNavigationDropdown.java files of the library...!!! I suppose it is strange ( Or isn't it...??? )...!!!  From the issues I learnt that I would have to set the theme in projects using the widget, Is it also required in example project...???\n. Okay...!!! Actually I was compiling it against 2.3.3 and targeting 4.0...!!! My requirement is to compile it against 2.3.3...!!!\nAnyways I got it working and successfully run Example project...!!!\n\nThanks for such a beautiful library and thanks all of you for your support...!!!\n. Thank you guys...!!! You guys helped me solve my problem within 2 hours,\nthat's great...!!! Thanks again for such a beautiful library and such a\ngreat support...!!!\n. When I had the code without this library and I had not set the title bar to hide from within my code, then in 4.0, that cut/copy/paste bar used to overlap the title bar...!!! And I guess that title bar in 4.0 is very much called \"Action Bar\"...!!!\nMore over just to have a solution to this problem, I tried replacing the title bar of the application (requestCustomTitle feature) with the \"Action bar\" from this library...!!! Thats works fine in Android 4.0, but in pre 3.0 the height of title bar is too small to be approached by this method...!!! \n\nOne solution would be to have two different codes which would be switched according to the api version available on the phone, but that would be too much for just one editText...!!!\n\nNow what would be an easy solution to this...??? \n. Yes...!!! Lolzzz...!!! I overlooked it...!!! My bad...!!! But I want to know what is the exact size of \"action bar\" from this library...??? does the height change if its on a Tablet...???\n\nOkay, I will use that for now...!!! I think that would solve my problem...!!! I have almost completed my app, with many action bar dynamic codes, will make the changes and see if it behaves in the same way...!!1\n. In which file exactly, I haven't overridden the theme of the action bar...???\n. Of course in my theme file...!!! I get so dumb sometimes...!!1\n. Yes I did in the conventional way so that I could get the split functionality, but I didn't...!!! Now I am writing it to use custom title bar...!!!\n. That patch worked...!!! Thanks...!!!\n. One more thing...!!! Can I disable click on the home icon...??? I mean it should not show the changed background when it is pressed...!!! \n. Tried that just now...!!! New project is created automatically with the name \"com_markupartist_android_widget_actionbar\" but the src and all other folders are empty, not even AndroidManifest.xml file is present...!!!  Now what to do...???\n. Yes my art is r16 and eclipse is also upto date...!!!\n\nAnd the new project I'm creating is an Android project...!!!\n\nI named the project ActionBar...!!! Now what i did is I copies sec and Res\nfolder from the download folder to this newly created project folder\n\"ActionBar\"...!!! Also copied the Manifest file...!!! Now after a refresh\nin eclipse everything comes...!!! Now only problem I am having is wherever\nR.something is mentioned, it shows error...!!! On analysis i found that \"R\"\nfile was not generated...!!!\nNow what can i do to let it generate R.Java automatically...??? I tried\ncleaning project...!!!\n. I just deleted the \"gen\" folder from the project folder and also deleted value-v14 folder because that was showing error...!!!\nAfter a \"Project >> Clean\" and a refresh, finally R.java file is generated (sigh, such a relief)...!!!\n\nWhen I followed the steps stated by @JakeWharton in his first comment for the example, it was straight forward and all the files were easily copied into the new project folder (Strange)...!!! Again, I had to delete value-v14 folder (don't know why it shows error...)...!!! \n\nOne more thing :\n\nI had to \"import com.markupartist.android.widget.actionbar.R;\" to the ActionBar.java and ListNavigationDropdown.java files of the library...!!! I suppose it is strange ( Or isn't it...??? )...!!!  From the issues I learnt that I would have to set the theme in projects using the widget, Is it also required in example project...???\n. Okay...!!! Actually I was compiling it against 2.3.3 and targeting 4.0...!!! My requirement is to compile it against 2.3.3...!!!\nAnyways I got it working and successfully run Example project...!!!\n\nThanks for such a beautiful library and thanks all of you for your support...!!!\n. Thank you guys...!!! You guys helped me solve my problem within 2 hours,\nthat's great...!!! Thanks again for such a beautiful library and such a\ngreat support...!!!\n. When I had the code without this library and I had not set the title bar to hide from within my code, then in 4.0, that cut/copy/paste bar used to overlap the title bar...!!! And I guess that title bar in 4.0 is very much called \"Action Bar\"...!!!\nMore over just to have a solution to this problem, I tried replacing the title bar of the application (requestCustomTitle feature) with the \"Action bar\" from this library...!!! Thats works fine in Android 4.0, but in pre 3.0 the height of title bar is too small to be approached by this method...!!! \n\nOne solution would be to have two different codes which would be switched according to the api version available on the phone, but that would be too much for just one editText...!!!\n\nNow what would be an easy solution to this...??? \n. Yes...!!! Lolzzz...!!! I overlooked it...!!! My bad...!!! But I want to know what is the exact size of \"action bar\" from this library...??? does the height change if its on a Tablet...???\n\nOkay, I will use that for now...!!! I think that would solve my problem...!!! I have almost completed my app, with many action bar dynamic codes, will make the changes and see if it behaves in the same way...!!1\n. In which file exactly, I haven't overridden the theme of the action bar...???\n. Of course in my theme file...!!! I get so dumb sometimes...!!1\n. Yes I did in the conventional way so that I could get the split functionality, but I didn't...!!! Now I am writing it to use custom title bar...!!!\n. ",
    "jadeye": "Hello,\nOn layout when adding: <com.markupartist.android.widget.ActionBar\n            android:id=\"@+id/actionbar\"\n            app:title=\"@string/some_title\"\n            style=\"@style/ActionBar\"\n            />\n\nI get error: Error parsing XML: unbound prefix.\n\nAny suggestions??\n. Hello,\nOn layout when adding: <com.markupartist.android.widget.ActionBar\n            android:id=\"@+id/actionbar\"\n            app:title=\"@string/some_title\"\n            style=\"@style/ActionBar\"\n            />\n\nI get error: Error parsing XML: unbound prefix.\n\nAny suggestions??\n. ",
    "qubz": "Hi Johan,\nI can't find a \"setIcon\" example anywhere in the mimic-native-api source. Would you please provide me with a one line example.\nThank you for this great project.\n. I'm a total GIT noob and I was cloning the android-actionbar master branch not the mimi-native-api code. I've down'ed a .zip of the mimic' repo and will see if I can make it work.\n\nThank you for your help.\n. Hi Johan,\nI can't find a \"setIcon\" example anywhere in the mimic-native-api source. Would you please provide me with a one line example.\nThank you for this great project.\n. I'm a total GIT noob and I was cloning the android-actionbar master branch not the mimi-native-api code. I've down'ed a .zip of the mimic' repo and will see if I can make it work.\n\nThank you for your help.\n. ",
    "duoduoluo": "So\uff0c what's the solution if I use the original library? \n. So\uff0c what's the solution if I use the original library? \n. ",
    "widi": "Hey! Thanks. It works now. I didn't know I have to set both\n\nactionBar.setDisplayUseLogoEnabled(true);\nactionBar.setDisplayShowHomeEnabled(true);\n\nfor the logo to show. Great widget anyways! Thanks!\n. Hey! Thanks. It works now. I didn't know I have to set both\n\nactionBar.setDisplayUseLogoEnabled(true);\nactionBar.setDisplayShowHomeEnabled(true);\n\nfor the logo to show. Great widget anyways! Thanks!\n. ",
    "mahaveer": "hello johannilson i am new in android anvoirnment and i am facing some problems while using your action bar library actually its too good library but i want to make it custom..\ni want to add buttons instead of title of the action bar. can i remove title field from action bar and can i manage spacing (reduce space between two buttons ) in action bar???\n\ni am hoping a good solution from you.\nactually i am new on android so if you provide me solution in details i will be very grateful of you..\n\nThanks \nMahaveer Muttha.\n. Hi Johannilsson,\n\n```\nThanks for a quick reply.\n```\n\nI had changed the themes already. but its not giving me the effect.\nWhen i use a image for the background of AB and try to add images to\nactions it shows white background for images.\nFor your convenience i am sending you some images and screen shots of AB\nafter replacing the BG.\n\nIn above images topbar is the image which i am using for the BG of AB.\nand others are transparent  images. (AB Items).\nI had attached a Screen Shot of my Activity.\nYou can see the white BG on these transparent images which i don't need.\n\nPlease help me to sort this issue.\nThanks.\n\nOn Wed, Sep 5, 2012 at 12:17 PM, Johan Nilsson notifications@github.comwrote:\n\n> Hi,\n> \n> The styles of the AB is located in styles.xml. My guess is that the white\n> color origins from the background which you have to remove. The borders\n> around the items is made up of a margin trick that makes the background\n> shine through to create a border effect. It's not pretty but works for most\n> cases. Removing the margins and replacing all backgrounds including the\n> drawables for action items might give the effect you're after.\n> \n> Hope this helps.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/johannilsson/android-actionbar/issues/71#issuecomment-8289149.\n\n## \n\nThanks and Regards.\n\nMahaveer A Muttha.\nSenior Software Engineer.\nTechHighWaySystems.\nmahaveerm@techhighway.co.inmahaveermuttha@gmail.com\n_skype id - mahaveer.muttha_\n09209205953/9960887653.\n. hello johannilson i am new in android anvoirnment and i am facing some problems while using your action bar library actually its too good library but i want to make it custom..\ni want to add buttons instead of title of the action bar. can i remove title field from action bar and can i manage spacing (reduce space between two buttons ) in action bar???\n\ni am hoping a good solution from you.\nactually i am new on android so if you provide me solution in details i will be very grateful of you..\n\nThanks \nMahaveer Muttha.\n. Hi Johannilsson,\n\n```\nThanks for a quick reply.\n```\n\nI had changed the themes already. but its not giving me the effect.\nWhen i use a image for the background of AB and try to add images to\nactions it shows white background for images.\nFor your convenience i am sending you some images and screen shots of AB\nafter replacing the BG.\n\nIn above images topbar is the image which i am using for the BG of AB.\nand others are transparent  images. (AB Items).\nI had attached a Screen Shot of my Activity.\nYou can see the white BG on these transparent images which i don't need.\n\nPlease help me to sort this issue.\nThanks.\n\nOn Wed, Sep 5, 2012 at 12:17 PM, Johan Nilsson notifications@github.comwrote:\n\n> Hi,\n> \n> The styles of the AB is located in styles.xml. My guess is that the white\n> color origins from the background which you have to remove. The borders\n> around the items is made up of a margin trick that makes the background\n> shine through to create a border effect. It's not pretty but works for most\n> cases. Removing the margins and replacing all backgrounds including the\n> drawables for action items might give the effect you're after.\n> \n> Hope this helps.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/johannilsson/android-actionbar/issues/71#issuecomment-8289149.\n\n## \n\nThanks and Regards.\n\nMahaveer A Muttha.\nSenior Software Engineer.\nTechHighWaySystems.\nmahaveerm@techhighway.co.inmahaveermuttha@gmail.com\n_skype id - mahaveer.muttha_\n09209205953/9960887653.\n. ",
    "rfgamaral": "I just pushed something else into my own fork and didn't know it would be added to this pull request. It should be added too, it's just that the title of this issue only makes half sense now ;)\n. I'm still learning how to use Git properly and because of that this pull request turned into a freaking mess.\n\nPlease ignore it!\n. Why not a single commit? Git would understand the file was basically renamed (even if it has a couple of changes). And technically, the updated files have nothing to do with the SDK, but the ADT tools.\n\nPlease don't take this the wrong way, I agree this should be pushed, I'm just picky that way.\n. Neither am I lol. But what it looks like you did was, deleted the older file and commited, added the new file and commited. What I'm saying is that you could have deleted AND added the new file in a single commit. Since it actually belongs to the same thing, it would make more sense to do it in a single commit.\n\nFor instance, my own commit on the same thing:\nrfgamaral/android-actionbar@7d434b74f6\n\nIf you look at the yellow icon, the title says \"renamed\". Makes more sense to do it this way. But that's ok, I'm just learning Git too...\n. I realized my own fork didn't fix this problem on the \"actionbarexample\" project so I fixed it and pushed a new commit. This was automatically added to my previous pull request johannilsson/android-actionbar#39, with the added benefit of a single commit for less confusion.\n\nMaybe you could close this pull request then? Or maybe just leave it be... I just noticed your pull request was on the \"master\" branch while mine is on the \"mimic-native-api\" branch.\n\nOr leave this to @johannilsson, he'll know what to do...\n. I think you're missing a values-v11 too, not exactly to fix the issue reported here but to make the theme more consistent in all versions, take a look at this: http://www.chainfire.eu/articles/109/Themes_across_Android_versions/\n. I'm not sure this is relevant to this issue but maybe it's helpful in some way...\n\nI too noticed those commits to add compatibility for the Holo theme on V14 but a similar change is missing for Honeycomb. It's an easy fix and maybe it will help with the issue here described. Or maybe not, I don't know. Still, this should be added anyway.\n\nHere's a fairly easy to understand article on the Holo theme support for every Android version:\nhttp://www.chainfire.eu/articles/109/Themes_across_Android_versions/\n. No, not exactly.\n\nYou need both with different content. But the idea is the same, you can read more about it in the official development blog if you missed it: http://android-developers.blogspot.com/2012/01/holo-everywhere.html\n\nI just find the link I posted above a little more helpful on the actual implementation. The one on the Android Developers Blog has more history and justifications on the whole theme thing.\n\nIf you are still confused, I can try and take a look for you... Then push a change to my fork and do a pull request if you're interested.\n\nP.S: This is totally unrelated but it's a minor detail, no need to open a new issue, but the 'default.properties' file is not needed anymore. You removed it from the \"actionbar\" folder but missed it on \"actionbarexample\".\n. Ah, I don't have anything of that either.\n\nI was just going to do it as stated and if it compiles, assume it's working lol... I'll see if I can find the time to install it...\n. Try to restart Eclipse (or even your computer, just in case) and see if the R file now generated, if not, do a Project \u00bb Clean (after the system/Eclipse) reboot of course.\n\nEclipse is a mess and when I have problems with the R file not being generated correctly, I just restart Eclipse and the problem, normally, goes away... Your issue might be a different one though.\n. The thing is, I added the feature and it was working on my own app because I was using it properly, but the example project was not. Actually, the example project was explicitly using the default style, which is red.\n\nI found the issue and it's easy to fix, but it will be easier to merge if I do a new pull request because of changes done on #51.\n. I'm afraid not. But I think that @johannilsson's idea has been all along to do that in the future, but we need to ask him about it... I'm curious about one thing:\n\n_\"I would need that when the native action bar is shown, it shouldn't slide down, but should be replaced by that default one...!!!\"_\n\nIs this what really happens in Android 4.0? If you are using the native ActionBar, does it really get replaced by the cut/copy/paste bar? I'm really curious because I also noticed that behavior you are describing...\n. Can any of you please recap what needs to be done o hide this library's ActionBar when the default system one, by long pressing an EditText with cut/copy/paste options, appears? I assume that's exactly what's the issue is about?\n\nI'm a little confused on what should be done...\n. I just had the confirmation from Adam Powell from Google that the problem I described here with the original theme is a bug and that will be fixed on the next Android update. I think it's safe to use these `.NoActionBar` themes on this specific library. Feel free to merge the pull request whenever you want :)\n. The d1017d7 commit above works around the issue described here:\nhttp://code.google.com/p/android/issues/detail?id=15862\n\nI just noticed this problem while testing my app on every Honeycomb version. The problem exists on 3.0 and 3.1 but not 3.2 (the theme attribute is public on this latest version).\n. The styling is not that complex, the problem is these tiny bugs that Google misses... The default (dark) version on Honeycomb 3.0 has all the Holo styles public, but the light version misses a few, which got fixed on Honeycomb 3.2.\n\nYeah, sorry about the naming, that's my bad. I wasn't sure what to pick and eventually picked one similar to the default name, minus the namespace of course. Maybe I over-thought this, Jake's solution is much cleaner. But since it's already merged, maybe we should just leave it like this for now.\n. Are you not interested in accepting this one?\n. @Raikia He comes here from time to time, I guess... A while a go @johannilsson said to me he was working on a different branch of this library with new features and pull everything (the other branches) together. I don't know what's the status on that.\n. I just pushed something else into my own fork and didn't know it would be added to this pull request. It should be added too, it's just that the title of this issue only makes half sense now ;)\n. I'm still learning how to use Git properly and because of that this pull request turned into a freaking mess.\n\nPlease ignore it!\n. Why not a single commit? Git would understand the file was basically renamed (even if it has a couple of changes). And technically, the updated files have nothing to do with the SDK, but the ADT tools.\n\nPlease don't take this the wrong way, I agree this should be pushed, I'm just picky that way.\n. Neither am I lol. But what it looks like you did was, deleted the older file and commited, added the new file and commited. What I'm saying is that you could have deleted AND added the new file in a single commit. Since it actually belongs to the same thing, it would make more sense to do it in a single commit.\n\nFor instance, my own commit on the same thing:\nrfgamaral/android-actionbar@7d434b74f6\n\nIf you look at the yellow icon, the title says \"renamed\". Makes more sense to do it this way. But that's ok, I'm just learning Git too...\n. I realized my own fork didn't fix this problem on the \"actionbarexample\" project so I fixed it and pushed a new commit. This was automatically added to my previous pull request johannilsson/android-actionbar#39, with the added benefit of a single commit for less confusion.\n\nMaybe you could close this pull request then? Or maybe just leave it be... I just noticed your pull request was on the \"master\" branch while mine is on the \"mimic-native-api\" branch.\n\nOr leave this to @johannilsson, he'll know what to do...\n. I think you're missing a values-v11 too, not exactly to fix the issue reported here but to make the theme more consistent in all versions, take a look at this: http://www.chainfire.eu/articles/109/Themes_across_Android_versions/\n. I'm not sure this is relevant to this issue but maybe it's helpful in some way...\n\nI too noticed those commits to add compatibility for the Holo theme on V14 but a similar change is missing for Honeycomb. It's an easy fix and maybe it will help with the issue here described. Or maybe not, I don't know. Still, this should be added anyway.\n\nHere's a fairly easy to understand article on the Holo theme support for every Android version:\nhttp://www.chainfire.eu/articles/109/Themes_across_Android_versions/\n. No, not exactly.\n\nYou need both with different content. But the idea is the same, you can read more about it in the official development blog if you missed it: http://android-developers.blogspot.com/2012/01/holo-everywhere.html\n\nI just find the link I posted above a little more helpful on the actual implementation. The one on the Android Developers Blog has more history and justifications on the whole theme thing.\n\nIf you are still confused, I can try and take a look for you... Then push a change to my fork and do a pull request if you're interested.\n\nP.S: This is totally unrelated but it's a minor detail, no need to open a new issue, but the 'default.properties' file is not needed anymore. You removed it from the \"actionbar\" folder but missed it on \"actionbarexample\".\n. Ah, I don't have anything of that either.\n\nI was just going to do it as stated and if it compiles, assume it's working lol... I'll see if I can find the time to install it...\n. Try to restart Eclipse (or even your computer, just in case) and see if the R file now generated, if not, do a Project \u00bb Clean (after the system/Eclipse) reboot of course.\n\nEclipse is a mess and when I have problems with the R file not being generated correctly, I just restart Eclipse and the problem, normally, goes away... Your issue might be a different one though.\n. The thing is, I added the feature and it was working on my own app because I was using it properly, but the example project was not. Actually, the example project was explicitly using the default style, which is red.\n\nI found the issue and it's easy to fix, but it will be easier to merge if I do a new pull request because of changes done on #51.\n. I'm afraid not. But I think that @johannilsson's idea has been all along to do that in the future, but we need to ask him about it... I'm curious about one thing:\n\n_\"I would need that when the native action bar is shown, it shouldn't slide down, but should be replaced by that default one...!!!\"_\n\nIs this what really happens in Android 4.0? If you are using the native ActionBar, does it really get replaced by the cut/copy/paste bar? I'm really curious because I also noticed that behavior you are describing...\n. Can any of you please recap what needs to be done o hide this library's ActionBar when the default system one, by long pressing an EditText with cut/copy/paste options, appears? I assume that's exactly what's the issue is about?\n\nI'm a little confused on what should be done...\n. I just had the confirmation from Adam Powell from Google that the problem I described here with the original theme is a bug and that will be fixed on the next Android update. I think it's safe to use these `.NoActionBar` themes on this specific library. Feel free to merge the pull request whenever you want :)\n. The d1017d7 commit above works around the issue described here:\nhttp://code.google.com/p/android/issues/detail?id=15862\n\nI just noticed this problem while testing my app on every Honeycomb version. The problem exists on 3.0 and 3.1 but not 3.2 (the theme attribute is public on this latest version).\n. The styling is not that complex, the problem is these tiny bugs that Google misses... The default (dark) version on Honeycomb 3.0 has all the Holo styles public, but the light version misses a few, which got fixed on Honeycomb 3.2.\n\nYeah, sorry about the naming, that's my bad. I wasn't sure what to pick and eventually picked one similar to the default name, minus the namespace of course. Maybe I over-thought this, Jake's solution is much cleaner. But since it's already merged, maybe we should just leave it like this for now.\n. Are you not interested in accepting this one?\n. @Raikia He comes here from time to time, I guess... A while a go @johannilsson said to me he was working on a different branch of this library with new features and pull everything (the other branches) together. I don't know what's the status on that.\n. ",
    "o2genum": "Oh, sorry. `android` tool renamed files, but `git` din't understand it and continued tracking those files. I'm not a pro in `git`.\n. Oh, sorry. `android` tool renamed files, but `git` din't understand it and continued tracking those files. I'm not a pro in `git`.\n. ",
    "colymore": "Sorry, i want to aling to de left not right. I have \n\n```\n   ActionBar actionBar = (ActionBar) findViewById(R.id.actionbar);\n   actionBar.setHomeLogo(R.drawable.logo);\n   actionBar.setDisplayHomeAsUpEnabled(true);\n   actionBar.setTitle(\"Lugares\");\n```\n\nBut mi action bar puts\n\n  Name    Icon\n\nCan i set the icon first and the name next to de icon?\n. Sorry, i want to aling to de left not right. I have \n\n```\n   ActionBar actionBar = (ActionBar) findViewById(R.id.actionbar);\n   actionBar.setHomeLogo(R.drawable.logo);\n   actionBar.setDisplayHomeAsUpEnabled(true);\n   actionBar.setTitle(\"Lugares\");\n```\n\nBut mi action bar puts\n\n  Name    Icon\n\nCan i set the icon first and the name next to de icon?\n. ",
    "nickdaugherty": "I see, thanks. Would be a nice feature if ActionBar auto scaled drawables to fit nicely.\n. strange...I thought I had it working w/ actions without modifications to the `ActionBar` code...let me know if I can help out.\n. I see, thanks. Would be a nice feature if ActionBar auto scaled drawables to fit nicely.\n. strange...I thought I had it working w/ actions without modifications to the `ActionBar` code...let me know if I can help out.\n. ",
    "GuyWhoCodez": "SOLVED:\n\nGo to ActionBar.java in the library and change the inflateAction function to this:\n\n private View inflateAction(Action action) {\n        View view = mInflater.inflate(R.layout.actionbar_item, mActionsView, false);\n\n```\n    ImageButton labelView =\n        (ImageButton) view.findViewById(R.id.actionbar_item);\n    Drawable dr = getResources().getDrawable(action.getDrawable());\n    dr.setBounds(labelView.getLeft(), labelView.getTop(), labelView.getRight(), labelView.getBottom());\n    labelView.setBackgroundDrawable(dr);\n\n\n    view.setTag(action);\n    view.setOnClickListener(this);\n    return view;\n}\n```\n. hmmm this seems like a really silly issue which should be easily solved. I have been looking for the piece of code that sets it to that red background. I look in everything: styles, layouts, the class files..nothing...please change it to transparent if possible...thanks..\n\nSOLVED::\n\n\"lol this is the second issue I am solving in nearly a few hours...\n\nIf you are getting a color behind your background (most likely red), then to change the color just do something like this in the addAction function in the ActionBar.java file.\n\nmActionsView.setBackgroundColor(Color.TRANSPARENT);\"\n. lol this is the second issue I am solving in nearly a few hours...\n\nIf you are getting a color behind your background (most likely red), then to change the color just do something like this in the addAction function in the ActionBar.java file.\n\n  mActionsView.setBackgroundColor(Color.TRANSPARENT);\n. SOLVED:\n\nGo to ActionBar.java in the library and change the inflateAction function to this:\n\n private View inflateAction(Action action) {\n        View view = mInflater.inflate(R.layout.actionbar_item, mActionsView, false);\n\n```\n    ImageButton labelView =\n        (ImageButton) view.findViewById(R.id.actionbar_item);\n    Drawable dr = getResources().getDrawable(action.getDrawable());\n    dr.setBounds(labelView.getLeft(), labelView.getTop(), labelView.getRight(), labelView.getBottom());\n    labelView.setBackgroundDrawable(dr);\n\n\n    view.setTag(action);\n    view.setOnClickListener(this);\n    return view;\n}\n```\n. hmmm this seems like a really silly issue which should be easily solved. I have been looking for the piece of code that sets it to that red background. I look in everything: styles, layouts, the class files..nothing...please change it to transparent if possible...thanks..\n\nSOLVED::\n\n\"lol this is the second issue I am solving in nearly a few hours...\n\nIf you are getting a color behind your background (most likely red), then to change the color just do something like this in the addAction function in the ActionBar.java file.\n\nmActionsView.setBackgroundColor(Color.TRANSPARENT);\"\n. lol this is the second issue I am solving in nearly a few hours...\n\nIf you are getting a color behind your background (most likely red), then to change the color just do something like this in the addAction function in the ActionBar.java file.\n\n  mActionsView.setBackgroundColor(Color.TRANSPARENT);\n. ",
    "javiermanzano": "Solved. I was not targeting the library project to 2.3.3\n. Solved. I was not targeting the library project to 2.3.3\n. ",
    "rekisum": "Thanks for your quick reply!\nI am using the latest version, cloned two hours ago.\nDo I need to add the android support librarys to the project?\nSo far I was only dealing with 2.3 API ...\n. I'm using Android 4.0.3 API 15 for building\nbecause you use  the Holo theme and ActionProvider class\n\nOk, and the latter pointed me to set sdk to 14 in the manifest.xml\nI used them as they were in your repository.\n\nNow the example runs!\nI'll try to get it work in my app now.\nI switched to mimic because I wanted to change icons dynamically?\n. Had to change targetsdk to 14 or greater.\nThanks!\n. no, not really\nfor the Homeactiviy you only defined AppTheme\nbut what can't be found is style/ActionBar?\nI find something in your styles.xml but it is under OtherTheme\nI added AppTheme to my project but that didn't help\n. arghh!!!\nit had to do with eclipse didn't found the generated R class\nmaybe I had to import actionbar on top\nAnyway, I had to delete the import android.R statement\nnow it seems to work\nsorry,  eclipse sucks sometimes ... ;-)\n. Thanks for your quick reply!\nI am using the latest version, cloned two hours ago.\nDo I need to add the android support librarys to the project?\nSo far I was only dealing with 2.3 API ...\n. I'm using Android 4.0.3 API 15 for building\nbecause you use  the Holo theme and ActionProvider class\n\nOk, and the latter pointed me to set sdk to 14 in the manifest.xml\nI used them as they were in your repository.\n\nNow the example runs!\nI'll try to get it work in my app now.\nI switched to mimic because I wanted to change icons dynamically?\n. Had to change targetsdk to 14 or greater.\nThanks!\n. no, not really\nfor the Homeactiviy you only defined AppTheme\nbut what can't be found is style/ActionBar?\nI find something in your styles.xml but it is under OtherTheme\nI added AppTheme to my project but that didn't help\n. arghh!!!\nit had to do with eclipse didn't found the generated R class\nmaybe I had to import actionbar on top\nAnyway, I had to delete the import android.R statement\nnow it seems to work\nsorry,  eclipse sucks sometimes ... ;-)\n. ",
    "benuch": "Hello,\n\nI use a link to style theme and modify value to actionbar theme derived\nfrom classic or holo theme depend on android version as in your example. (\nWork fine)\n\nFor the  problem of menu on honeycomb, this is not specific to our widget.\nWhen you make target to android 11 or more, and compiled with the same SDK,\nthe menu button disappear from bottom and you could not access to our menu.\nNormally, this menu is present in stock actionbar.\n\nI understand that this widget is not design to replace the original. Just a\nrequest to enhanced integration. I test the actionbar  compatibility from\nGoogle, action bar sherlock and our widget done the Best result for me.\n\nBen\nLe 5 janv. 2012 08:15, \"Johan Nilsson\" <\nreply@reply.github.com>\na crit :\n\n> I haven't done much testing on honeycomb, simply missed that holo is\n> available there. However, its a good practice to have your own app theme.\n> You can simply do this by referencing the style attr for the actuonbar in\n> your own theme.\n> \n> The target problem you describes is more an android.issue, and you can\n> still use the holo theme and have.the.target set to 11 just make sure you\n> have the 12+ sdk.\n> \n> Also, I just want to be clear that this ab does not intend to replace the\n> native one.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> \n> https://github.com/johannilsson/android-actionbar/issues/47#issuecomment-3366461\n. Yes, I understand, but I tried to do it programtically without success. I\ncan add specifically for v11-V13 a button to ActionBar for expand menu, but\nthe classical function on activity (openOptionsMenu ()) seems that work on\nhoneycomb. If you have some better result, I'm interesting. Instead, I'm\ngoing to propose a ListDialog with the menu but I preferred to limited the\nspecific code on class and make compatibility between android version with\nthe resources.\n\nMay be an option to inflate the classical menu on a button of the\nActionBar, which on clic show the menu as a list similarly to the Stock\nActionBar would be interesting? May be we can do it with the actual version\nof your widget?\n\nBen\n\nLe 5 janvier 2012 09:54, Johan Nilsson <\nreply@reply.github.com\n\n> a crit :\n> \n> I struggled with the menu too in my recent project, I didn't come up with\n> a good solution for it. But the thing is that I don't want to assume that\n> the user wants the menu added to the actionbar by default. If one wants\n> that, then that can be done programtically instead.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> \n> https://github.com/johannilsson/android-actionbar/issues/47#issuecomment-3367139\n. For me, HoloTheme work fine either in honeycomb emulator and nexus S on\nICS. And I love to give theme of the plateform for my application.\n\nFor my problem of menu, I workarround by adapt interface of my application.\nOtherwise, you can use PopupMenu for Android >3.0.\n\nThanks for this great widget. I'm really happy with it.\nLe 8 janv. 2012 23:03, \"Ricardo Amaral\" <\nreply@reply.github.com>\na crit :\n\n> Ah, I don't have anything of that either.\n> \n> I was just going to do it as stated and if it compiles, assume it's\n> working lol... I'll see if I can find the time to install it...\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> \n> https://github.com/johannilsson/android-actionbar/issues/47#issuecomment-3405039\n. Hello,\n\nI use a link to style theme and modify value to actionbar theme derived\nfrom classic or holo theme depend on android version as in your example. (\nWork fine)\n\nFor the  problem of menu on honeycomb, this is not specific to our widget.\nWhen you make target to android 11 or more, and compiled with the same SDK,\nthe menu button disappear from bottom and you could not access to our menu.\nNormally, this menu is present in stock actionbar.\n\nI understand that this widget is not design to replace the original. Just a\nrequest to enhanced integration. I test the actionbar  compatibility from\nGoogle, action bar sherlock and our widget done the Best result for me.\n\nBen\nLe 5 janv. 2012 08:15, \"Johan Nilsson\" <\nreply@reply.github.com>\na crit :\n\n> I haven't done much testing on honeycomb, simply missed that holo is\n> available there. However, its a good practice to have your own app theme.\n> You can simply do this by referencing the style attr for the actuonbar in\n> your own theme.\n> \n> The target problem you describes is more an android.issue, and you can\n> still use the holo theme and have.the.target set to 11 just make sure you\n> have the 12+ sdk.\n> \n> Also, I just want to be clear that this ab does not intend to replace the\n> native one.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> \n> https://github.com/johannilsson/android-actionbar/issues/47#issuecomment-3366461\n. Yes, I understand, but I tried to do it programtically without success. I\ncan add specifically for v11-V13 a button to ActionBar for expand menu, but\nthe classical function on activity (openOptionsMenu ()) seems that work on\nhoneycomb. If you have some better result, I'm interesting. Instead, I'm\ngoing to propose a ListDialog with the menu but I preferred to limited the\nspecific code on class and make compatibility between android version with\nthe resources.\n\nMay be an option to inflate the classical menu on a button of the\nActionBar, which on clic show the menu as a list similarly to the Stock\nActionBar would be interesting? May be we can do it with the actual version\nof your widget?\n\nBen\n\nLe 5 janvier 2012 09:54, Johan Nilsson <\nreply@reply.github.com\n\n> a crit :\n> \n> I struggled with the menu too in my recent project, I didn't come up with\n> a good solution for it. But the thing is that I don't want to assume that\n> the user wants the menu added to the actionbar by default. If one wants\n> that, then that can be done programtically instead.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> \n> https://github.com/johannilsson/android-actionbar/issues/47#issuecomment-3367139\n. For me, HoloTheme work fine either in honeycomb emulator and nexus S on\nICS. And I love to give theme of the plateform for my application.\n\nFor my problem of menu, I workarround by adapt interface of my application.\nOtherwise, you can use PopupMenu for Android >3.0.\n\nThanks for this great widget. I'm really happy with it.\nLe 8 janv. 2012 23:03, \"Ricardo Amaral\" <\nreply@reply.github.com>\na crit :\n\n> Ah, I don't have anything of that either.\n> \n> I was just going to do it as stated and if it compiles, assume it's\n> working lol... I'll see if I can find the time to install it...\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> \n> https://github.com/johannilsson/android-actionbar/issues/47#issuecomment-3405039\n. ",
    "ecunal": "I'm already changing the background color through xml file, I use the following style for ActionBar:\n\n`<style name=\"ActionBar\">\n        <item name=\"android:layout_width\">wrap_content</item>\n        <item name=\"android:layout_height\">wrap_content</item>\n        <item name=\"android:paddingLeft\">5dp</item>\n        <item name=\"android:paddingRight\">5dp</item>\n        <item name=\"android:layout_margin\">0px</item>\n        <item name=\"android:background\">@color/titlebackgroundcolor</item>\n    </style>`\n. Alright, I was using master branch but I'll try the mimic-api one now. Thank you.\n. I'm already changing the background color through xml file, I use the following style for ActionBar:\n\n`<style name=\"ActionBar\">\n        <item name=\"android:layout_width\">wrap_content</item>\n        <item name=\"android:layout_height\">wrap_content</item>\n        <item name=\"android:paddingLeft\">5dp</item>\n        <item name=\"android:paddingRight\">5dp</item>\n        <item name=\"android:layout_margin\">0px</item>\n        <item name=\"android:background\">@color/titlebackgroundcolor</item>\n    </style>`\n. Alright, I was using master branch but I'll try the mimic-api one now. Thank you.\n. ",
    "TonyCostanza": "Thanks for your reply, I'm still playing around with it. Is there any other documentation regarding implementing this aside from the README?\n. Do you have skype sir? :)\n. Sorry to bother you, but I'd really like to get this to work I've been at it for quite awhile. I had to remove your code and start all over again, and now i can't seem to import your project. The one question I have: \n\nIn order to use this project as a library, all I have to do is use the \"https://github.com/johannilsson/android-actionbar.git\" and clone your project. Then I should be able to import your project into eclipse right?  What i'm stuck on is that I can't get eclipse to see that your \"https://github.com/johannilsson/android-actionbar.git\" is a project. Do you have any idea what may be screwing me up?  I can't seem to figure out how to get started D:\n. Hey Johannilsson, thanks for your help yesterday. I slept on all the dilemmas I was having, and this morning I found some very obvious errors on my part. I got your project added as a library now, and It's all smooth sailing now. You've done an excellent job on this. I like how you've structured everything. Thanks for the time and effort you put into this project. These kinds of good deeds do not go unnoticed. Cheers from California,         - Tony Costanza\n. Thanks for your reply, I'm still playing around with it. Is there any other documentation regarding implementing this aside from the README?\n. Do you have skype sir? :)\n. Sorry to bother you, but I'd really like to get this to work I've been at it for quite awhile. I had to remove your code and start all over again, and now i can't seem to import your project. The one question I have: \n\nIn order to use this project as a library, all I have to do is use the \"https://github.com/johannilsson/android-actionbar.git\" and clone your project. Then I should be able to import your project into eclipse right?  What i'm stuck on is that I can't get eclipse to see that your \"https://github.com/johannilsson/android-actionbar.git\" is a project. Do you have any idea what may be screwing me up?  I can't seem to figure out how to get started D:\n. Hey Johannilsson, thanks for your help yesterday. I slept on all the dilemmas I was having, and this morning I found some very obvious errors on my part. I got your project added as a library now, and It's all smooth sailing now. You've done an excellent job on this. I like how you've structured everything. Thanks for the time and effort you put into this project. These kinds of good deeds do not go unnoticed. Cheers from California,         - Tony Costanza\n. ",
    "ghost": "I don't think he actively maintains this repo, unfortunately.\n. I don't think he actively maintains this repo, unfortunately.\n. ",
    "xxv": "Try using the full-width numerals \"\uff11\uff12\uff13\" instead. \n. Try using the full-width numerals \"\uff11\uff12\uff13\" instead. \n. ",
    "mfontolan": "Solved.\nFor any reason, even selecting api 15 Eclipse import api 10.\n. Now I believe I found the real problem... and I fell like a stupid for this...\nHow I am new with Android, I use the same I on all actionbar objects...\n. Solved.\nFor any reason, even selecting api 15 Eclipse import api 10.\n. Now I believe I found the real problem... and I fell like a stupid for this...\nHow I am new with Android, I use the same I on all actionbar objects...\n. ",
    "Maspear": "<com.markupartist.android.widget.ActionBar on line #8\n. Oh thanks johannilsson \n. <com.markupartist.android.widget.ActionBar on line #8\n. Oh thanks johannilsson \n. ",
    "Windol": "Thanks for the tip johannilsson, helped a lot!\n. Thanks for the tip johannilsson, helped a lot!\n. ",
    "andrew-boyarshin": "But why are you not accept pull requests with a lot of amazing features?\n. But why are you not accept pull requests with a lot of amazing features?\n. ",
    "leonardoxh": "This project was discontinued... Use ActionBarSherlock or ActionBarCompat instead\n. This project was discontinued... Use ActionBarSherlock or ActionBarCompat instead\n. ",
    "Jad188": "thanks a lot\n. i need to import as module all or only the folder actionbar ?\n. thanks a lot\n. i need to import as module all or only the folder actionbar ?\n. ",
    "sepehr-alipour": "i couldnt understand what you said !\n. ok thanks\n. i couldnt understand what you said !\n. ok thanks\n. "
}