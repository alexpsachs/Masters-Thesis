{
    "mikeash": "This is great! Thanks a bunch. Is there any need for the `_RTComponentsProperty` class, though? Since there's no way to add properties to a class (that I can see), it doesn't seem like it would be useful.\n. Good idea. I'll go ahead and merge this without that class for now, and if Apple ever gets around to adding that function then we can stick it back in. Thanks again!\n\nBy the way, do you have a Twitter handle or such so I can properly credit you in my announcement tweet?\n. Pulled. Thanks, good stuff as always.\n. What's the advantage over simply doing `[[class rt_class] rt_methods]`? I guess it's a bit confusing. Seems to me that the best approach might be to rename `rt_methods` as `rt_instanceMethods`, then make a new `rt_methods` that fetches the methods that the receiver itself responds to.\n. I'm not concerned about breaking backwards compatibility, but I wouldn't want to do so silently, so having a new `rt_methods` that does something different from before wouldn't be ideal. Hmm.....\n. Thanks! Just curious, do you have an actual use case that involves adding properties at runtime, or is this just for completeness?\n. Nifty. Thanks again for the patch, much appreciated. It's great to see people making use of this code.\n. Thanks, and fixed. `-[Protocol isEqual:]` is busted. Fortunately there's a `protocol_isEqual` function that works.\n. On Dec 2, 2011, at 2:43 AM, Vijay Santhanam wrote:\n\n> Just wanted to double check this awesome library is deployable to app store.\n> \n> It's really well written, I use it alot to understand how the runtime works. I didn't realize how dynamic ObjC was until I used your library to runtime inspect how UIAppearance works in iOS5.\n> \n> Nice work!\n\nThank you!\n\nThere should be no problem with the library itself. It only uses public, legal APIs. It is possible to use the library to do things that will get you rejected (like swizzling out private Apple methods), but at that point it's up to you.\n\n## \n\nDue to circumstances beyond your control,\nyou are master of your fate and captain of your soul.\n\nMike Ash - http://www.mikeash.com/, mailto:mike@mikeash.com\n. Works fine for me. Can you show your code?\n. I'm not really sure I follow what you're trying to do. Can you post some more complete code that illustrates the problem?\n. Yes, I think I see. Seems to me like this could be done more cleanly by using KVC. Use `valueForKey:` to get the value, then `setValue:forKey:` to set it. All problems of argument size, primitives, etc. are handled for you by the KVC internals.\n. I should mention for completeness that there's no good way to do this with MAObjCRuntime directly. The method invocation stuff there is only intended for cases where you know the types in advance. You could do it directly with `NSInvocation`, but that would be harder than just using KVC.\n. Right. Primitives get wrapped in NSValue objects, and automatically unwrapped on the other side.\n. Glad I could help!\n. Fine by me! Attribution in the readme would be great, if the amount of code you've used warrants it, but anything which fulfills the terms of the license is ultimately fine by me (or else I wouldn't use that license!). No other comments, except that it's great to see someone building something based on the stuff I've made.\n. Neat idea. Reminds me a little of Google Protobuf, but operating at a somewhat higher level.\n\nThis statement in the readme confuses me a bit: \"Since JAGPropertyConverter uses Key-Value coding to get/set values, it doesn't respect custom getters and setters\" I thought KVC dealt fine with those. Have I misunderstood?\n\nAnyway, cool stuff, and just the sort of thing I hoped to enable with my code.\n. Yep, that was my point of confusion. I don't know whether KVC can handle custom accessor names, wouldn't surprise me if it couldn't. That could lead to some \"interesting\" behavior if your backing ivar _does_ match the pattern that KVC looks for.\n. Can you explain what it's supposed to do? In particular, I don't understand the point of using `dispatch_once` to set an associated object like that.\n. I'm familiar with the pattern, but this isn't a singleton. You're using a global `dispatch_once` to control the adding of an associated object to a single arbitrary instance in your `-[UIView sublayer]`. This doesn't make any sense to me, and providing an API that takes a `dispatch_once_t *` in general does not seem like the right approach.\n. That doesn't really address the overall concern, though. What is the point of using `dispatch_once` to gate access to an associated object like this? `dispatch_once` is generally used for globals, but associated objects are inherently per-instance, so it seems like a complete mismatch.\n. The thing is that I don't see how the GCD solution works. There appear to only be two cases:\n1. There's a single object, ever.\n2. There are multiple objects.\n\nCase 1 is basically the standard singleton pattern and can be solved without associated objects, by just using a global variable. In case 2, `dispatch_once` doesn't work, because you need to run the code more than once (i.e. once for each object). Case 1 can use `dispatch_once` but doesn't need associated objects. Case 2 needs associated objects but can't use `dispatch_once`. So I don't see where it's ever useful to have an API that combines them like this. Can you give an example of where it would be useful?\n. OK, cool, glad we figured out what the disconnect was. I think you'd want to use associated objects still, but I'm not sure if there's a good way to lazily initialize them. You can do a check-and-set, but it's not thread safe without external synchronization....\n. Sorry, I didn't see this for a while.\r\n\r\nFinding performance problems with a snapshot like this is going to be tricky, since you only capture a single moment in time. It should be possible to get some useful information, though, assuming that it's likely to be in the middle of whatever is taking a lot of time when you trigger the stack trace. You'd have to look at every thread and see if any of them is doing something costly. In your first image, for example, the fact that thread 0 is in `cellForRowAtIndexPath` indicates that might be a hot function. (I assume you inserted a sleep just to make it look slow.)\r\n\r\nAny symbolication solution that works on crash reports should also work on these not-quite-crash reports. They still look just like crash reports.\r\n\r\nFeel free to e-mail me directly rather than continuing here, mike@mikeash.com. This is great! Thanks a bunch. Is there any need for the `_RTComponentsProperty` class, though? Since there's no way to add properties to a class (that I can see), it doesn't seem like it would be useful.\n. Good idea. I'll go ahead and merge this without that class for now, and if Apple ever gets around to adding that function then we can stick it back in. Thanks again!\n\nBy the way, do you have a Twitter handle or such so I can properly credit you in my announcement tweet?\n. Pulled. Thanks, good stuff as always.\n. What's the advantage over simply doing `[[class rt_class] rt_methods]`? I guess it's a bit confusing. Seems to me that the best approach might be to rename `rt_methods` as `rt_instanceMethods`, then make a new `rt_methods` that fetches the methods that the receiver itself responds to.\n. I'm not concerned about breaking backwards compatibility, but I wouldn't want to do so silently, so having a new `rt_methods` that does something different from before wouldn't be ideal. Hmm.....\n. Thanks! Just curious, do you have an actual use case that involves adding properties at runtime, or is this just for completeness?\n. Nifty. Thanks again for the patch, much appreciated. It's great to see people making use of this code.\n. Thanks, and fixed. `-[Protocol isEqual:]` is busted. Fortunately there's a `protocol_isEqual` function that works.\n. On Dec 2, 2011, at 2:43 AM, Vijay Santhanam wrote:\n\n> Just wanted to double check this awesome library is deployable to app store.\n> \n> It's really well written, I use it alot to understand how the runtime works. I didn't realize how dynamic ObjC was until I used your library to runtime inspect how UIAppearance works in iOS5.\n> \n> Nice work!\n\nThank you!\n\nThere should be no problem with the library itself. It only uses public, legal APIs. It is possible to use the library to do things that will get you rejected (like swizzling out private Apple methods), but at that point it's up to you.\n\n## \n\nDue to circumstances beyond your control,\nyou are master of your fate and captain of your soul.\n\nMike Ash - http://www.mikeash.com/, mailto:mike@mikeash.com\n. Works fine for me. Can you show your code?\n. I'm not really sure I follow what you're trying to do. Can you post some more complete code that illustrates the problem?\n. Yes, I think I see. Seems to me like this could be done more cleanly by using KVC. Use `valueForKey:` to get the value, then `setValue:forKey:` to set it. All problems of argument size, primitives, etc. are handled for you by the KVC internals.\n. I should mention for completeness that there's no good way to do this with MAObjCRuntime directly. The method invocation stuff there is only intended for cases where you know the types in advance. You could do it directly with `NSInvocation`, but that would be harder than just using KVC.\n. Right. Primitives get wrapped in NSValue objects, and automatically unwrapped on the other side.\n. Glad I could help!\n. Fine by me! Attribution in the readme would be great, if the amount of code you've used warrants it, but anything which fulfills the terms of the license is ultimately fine by me (or else I wouldn't use that license!). No other comments, except that it's great to see someone building something based on the stuff I've made.\n. Neat idea. Reminds me a little of Google Protobuf, but operating at a somewhat higher level.\n\nThis statement in the readme confuses me a bit: \"Since JAGPropertyConverter uses Key-Value coding to get/set values, it doesn't respect custom getters and setters\" I thought KVC dealt fine with those. Have I misunderstood?\n\nAnyway, cool stuff, and just the sort of thing I hoped to enable with my code.\n. Yep, that was my point of confusion. I don't know whether KVC can handle custom accessor names, wouldn't surprise me if it couldn't. That could lead to some \"interesting\" behavior if your backing ivar _does_ match the pattern that KVC looks for.\n. Can you explain what it's supposed to do? In particular, I don't understand the point of using `dispatch_once` to set an associated object like that.\n. I'm familiar with the pattern, but this isn't a singleton. You're using a global `dispatch_once` to control the adding of an associated object to a single arbitrary instance in your `-[UIView sublayer]`. This doesn't make any sense to me, and providing an API that takes a `dispatch_once_t *` in general does not seem like the right approach.\n. That doesn't really address the overall concern, though. What is the point of using `dispatch_once` to gate access to an associated object like this? `dispatch_once` is generally used for globals, but associated objects are inherently per-instance, so it seems like a complete mismatch.\n. The thing is that I don't see how the GCD solution works. There appear to only be two cases:\n1. There's a single object, ever.\n2. There are multiple objects.\n\nCase 1 is basically the standard singleton pattern and can be solved without associated objects, by just using a global variable. In case 2, `dispatch_once` doesn't work, because you need to run the code more than once (i.e. once for each object). Case 1 can use `dispatch_once` but doesn't need associated objects. Case 2 needs associated objects but can't use `dispatch_once`. So I don't see where it's ever useful to have an API that combines them like this. Can you give an example of where it would be useful?\n. OK, cool, glad we figured out what the disconnect was. I think you'd want to use associated objects still, but I'm not sure if there's a good way to lazily initialize them. You can do a check-and-set, but it's not thread safe without external synchronization....\n. Sorry, I didn't see this for a while.\r\n\r\nFinding performance problems with a snapshot like this is going to be tricky, since you only capture a single moment in time. It should be possible to get some useful information, though, assuming that it's likely to be in the middle of whatever is taking a lot of time when you trigger the stack trace. You'd have to look at every thread and see if any of them is doing something costly. In your first image, for example, the fact that thread 0 is in `cellForRowAtIndexPath` indicates that might be a hot function. (I assume you inserted a sleep just to make it look slow.)\r\n\r\nAny symbolication solution that works on crash reports should also work on these not-quite-crash reports. They still look just like crash reports.\r\n\r\nFeel free to e-mail me directly rather than continuing here, mike@mikeash.com. ",
    "lemnar": "No, I suppose there isn't any need for it.  Perhaps I should file a bug requesting a `class_addProperty()` function.  I wonder why it's absent.\n. @Randy_Becker, and thank you!\n. No, I suppose there isn't any need for it.  Perhaps I should file a bug requesting a `class_addProperty()` function.  I wonder why it's absent.\n. @Randy_Becker, and thank you!\n. ",
    "rjregenold": "Ah, I didn't think about doing `[[class rt_class] rt_methods]`. I do like the idea of changing `rt_methods` to `rt_instanceMethods` and having `rt_methods` query the methods of the receiver. Are you concerned about breaking backwards compatibility?\n. Ah, I didn't think about doing `[[class rt_class] rt_methods]`. I do like the idea of changing `rt_methods` to `rt_instanceMethods` and having `rt_methods` query the methods of the receiver. Are you concerned about breaking backwards compatibility?\n. ",
    "franklinwise": "class_copyMethodList seems to only return instance methods no matter what is passed to it??\n. actually... found this to work for getting Class Methods\n\n```\nconst char *className = class_getName(self.class);\nClass myClass = (Class)objc_getMetaClass(className);\nMethod *methods = class_copyMethodList(myClass, &methodCount);\n```\n. class_copyMethodList seems to only return instance methods no matter what is passed to it??\n. actually... found this to work for getting Class Methods\n\n```\nconst char *className = class_getName(self.class);\nClass myClass = (Class)objc_getMetaClass(className);\nMethod *methods = class_copyMethodList(myClass, &methodCount);\n```\n. ",
    "rentzsch": "I indeed have a use-case :)\n\nI have a dependency-injection library that reads @properties to determine dependancies. I'd like for it to work with Nu, with otherwise lacks any support for declaring properties.\n. I indeed have a use-case :)\n\nI have a dependency-injection library that reads @properties to determine dependancies. I'd like for it to work with Nu, with otherwise lacks any support for declaring properties.\n. ",
    "zachhowe": "As stated above, you can use this in an App Store deployed app. Spotify uses it in their iOS app, which is how I found out about this amazing tool. Good work.\n. As stated above, you can use this in an App Store deployed app. Spotify uses it in their iOS app, which is how I found out about this amazing tool. Good work.\n. ",
    "mbrandonw": "Sorry, I just realized I'm doing something stupid. I have a setter selector, I convert it into the corresponding getter, and then try to invoke it to get it's return value:\n\n```\nvoid *value = NULL;\n[self rt_returnValue:&value sendSelector:getterSelector];\n```\n\nSince I don't know the return type I just did a void pointer, so of course 4 bytes. And then later I do:\n\n```\n[target rt_returnValue:NULL sendSelector:method.selector, RTARG(value)];\n```\n\nIs it possible to do what I want?\n. The exact snippet is around line 120: https://github.com/mbrandonw/OPUIKit/blob/master/OPUIKit/Source/OPStyle.m\n\nBasically, an OPStyle instance has a bunch of properties that ultimately get transferred to a target. To do that I loop through the methods in [OPStyleProtocol](https://github.com/mbrandonw/OPUIKit/blob/master/OPUIKit/Source/OPStyleProtocol.h, for each setter I find the corresponding getter, and then do the little snippet I posted above to transfer the property.\n\nDoes that make any more sense?\n. Wow, that is much cleaner. So, even though we cannot do something like `[target setValue:CGRectMake(0,0,100,100) forKey:@\"frame\"]` directly, if we retrieve an value from an object we can set it another object, even if it is a primitive?\n. Terrific, thanks so much for the info.\n. Sorry, I just realized I'm doing something stupid. I have a setter selector, I convert it into the corresponding getter, and then try to invoke it to get it's return value:\n\n```\nvoid *value = NULL;\n[self rt_returnValue:&value sendSelector:getterSelector];\n```\n\nSince I don't know the return type I just did a void pointer, so of course 4 bytes. And then later I do:\n\n```\n[target rt_returnValue:NULL sendSelector:method.selector, RTARG(value)];\n```\n\nIs it possible to do what I want?\n. The exact snippet is around line 120: https://github.com/mbrandonw/OPUIKit/blob/master/OPUIKit/Source/OPStyle.m\n\nBasically, an OPStyle instance has a bunch of properties that ultimately get transferred to a target. To do that I loop through the methods in [OPStyleProtocol](https://github.com/mbrandonw/OPUIKit/blob/master/OPUIKit/Source/OPStyleProtocol.h, for each setter I find the corresponding getter, and then do the little snippet I posted above to transfer the property.\n\nDoes that make any more sense?\n. Wow, that is much cleaner. So, even though we cannot do something like `[target setValue:CGRectMake(0,0,100,100) forKey:@\"frame\"]` directly, if we retrieve an value from an object we can set it another object, even if it is a primitive?\n. Terrific, thanks so much for the info.\n. ",
    "jagill": "Thanks!  If you want to take a look at it, you can find it at\nhttps://github.com/jagill/JAGPropertyConverter\n. My understanding of KVC (largely based on [this doc](https://developer.apple.com/library/ios/#documentation/Cocoa/Conceptual/KeyValueCoding/Articles/SearchImplementation.html) ) is that when getting/setting a property named foo, they look for methods getFoo, foo, isFoo and setFoo:, respectively.  I haven't delved into this too deeply, so if you know of a way that KVC can handle\n`@property (assign, getter = checkIsActive, setter = makeActive:) BOOL active;`\nI'd love to know about it!\n. Oh, I believe you meant custom-implemented setFoo: and foo methods.  Yes, KVC should handle that -- I'll update the documentation.  Thanks!\n. Thanks!  If you want to take a look at it, you can find it at\nhttps://github.com/jagill/JAGPropertyConverter\n. My understanding of KVC (largely based on [this doc](https://developer.apple.com/library/ios/#documentation/Cocoa/Conceptual/KeyValueCoding/Articles/SearchImplementation.html) ) is that when getting/setting a property named foo, they look for methods getFoo, foo, isFoo and setFoo:, respectively.  I haven't delved into this too deeply, so if you know of a way that KVC can handle\n`@property (assign, getter = checkIsActive, setter = makeActive:) BOOL active;`\nI'd love to know about it!\n. Oh, I believe you meant custom-implemented setFoo: and foo methods.  Yes, KVC should handle that -- I'll update the documentation.  Thanks!\n. ",
    "texastoland": "Yeah that pattern was [popularized](http://stackoverflow.com/questions/9119042/why-does-apple-recommend-to-use-dispatch-once-for-implementing-the-singleton-pat) for instantiating singletons instead of checking `nil`. My `FIIcon` category snippet uses it for just that. It shouldn't cost any memory or computation until first access.\n\nMy `UIView` category snippet is part of an API that proxies `UIAppearance` selectors directly to arbitrary [sub]layers for better styling since `CALayer` supports CSS-like method selectors. In this case it facilitates getting arbitrary additional sublayers for fancy filters or whatever. GCD ensures they're only added as desired even if by an `UIAppearance` proxy.\n\nIn practice I typically only instantiate ivars once and modify their state thereafter. But I instantiate them in lifecycle methods that categories shouldn't replace. My Associated Object API provides both storage and lazy instantiation.\n. Ah quite right my sublayer one is messed up. I'll fix it. In essence it needs a unique key per instance.\n. Although it's not a singleton it is truly a multiton. Because categories can't have ivars the only alternative is still a `nil` guard or `+ load()` without lazy instantiation. GCD just \"feels\" better to me. It's funny I ran across your blog googling about it just now. What would you do besides a `nil` guard? PS thx :)\n. Wow what's ridiculous is I'm using a static variable for a singleton dictionary elsewhere in that same class. Guess I had tunnel vision. If I have a reasonable multiton solution I'll share. My use case is implementing category properties like my sublayers without `nil` checks. Closing ticket; great feedback.\n. I tried concocting a strategy to use the pointer storage returned by `objc_getassociatedobject(self, key)` to store a `dispatch_once_t` and failed. I just [wrapped](https://gist.github.com/4389039#file-nsobject-dlassociatedobjects-m-L14) it in `@synchronized` for now.\n. Just wanted to note that anytime I've googled about Obj-C sticking points your blog has unanimously been the authoritative source of documentation. If you had a book I'd read it :neckbeard: \n. Yeah that pattern was [popularized](http://stackoverflow.com/questions/9119042/why-does-apple-recommend-to-use-dispatch-once-for-implementing-the-singleton-pat) for instantiating singletons instead of checking `nil`. My `FIIcon` category snippet uses it for just that. It shouldn't cost any memory or computation until first access.\n\nMy `UIView` category snippet is part of an API that proxies `UIAppearance` selectors directly to arbitrary [sub]layers for better styling since `CALayer` supports CSS-like method selectors. In this case it facilitates getting arbitrary additional sublayers for fancy filters or whatever. GCD ensures they're only added as desired even if by an `UIAppearance` proxy.\n\nIn practice I typically only instantiate ivars once and modify their state thereafter. But I instantiate them in lifecycle methods that categories shouldn't replace. My Associated Object API provides both storage and lazy instantiation.\n. Ah quite right my sublayer one is messed up. I'll fix it. In essence it needs a unique key per instance.\n. Although it's not a singleton it is truly a multiton. Because categories can't have ivars the only alternative is still a `nil` guard or `+ load()` without lazy instantiation. GCD just \"feels\" better to me. It's funny I ran across your blog googling about it just now. What would you do besides a `nil` guard? PS thx :)\n. Wow what's ridiculous is I'm using a static variable for a singleton dictionary elsewhere in that same class. Guess I had tunnel vision. If I have a reasonable multiton solution I'll share. My use case is implementing category properties like my sublayers without `nil` checks. Closing ticket; great feedback.\n. I tried concocting a strategy to use the pointer storage returned by `objc_getassociatedobject(self, key)` to store a `dispatch_once_t` and failed. I just [wrapped](https://gist.github.com/4389039#file-nsobject-dlassociatedobjects-m-L14) it in `@synchronized` for now.\n. Just wanted to note that anytime I've googled about Obj-C sticking points your blog has unanimously been the authoritative source of documentation. If you had a book I'd read it :neckbeard: \n. ",
    "redent": "Hit this issue when trying to compile after updating XCode. Any known workaround?\n. Hit this issue when trying to compile after updating XCode. Any known workaround?\n. ",
    "boscomonkey": "I imported objc/Protocol.h at the top of RTProtocol.m and it now compiles.\n\n```\n#import <objc/Protocol.h>\n```\n. I imported objc/Protocol.h at the top of RTProtocol.m and it now compiles.\n\n```\n#import <objc/Protocol.h>\n```\n. ",
    "diejmon": "No. Use -fno-objc-arc. No. Use -fno-objc-arc. "
}