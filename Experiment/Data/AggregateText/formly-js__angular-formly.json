{
    "kentongray": "I'd vote to keep the lib as light weight as possible and just expose the ability to specify additional styling classes and/or the ability to define custom types for more advanced styling\n. i kinda played with this and just think if you had the ability to specify an attribute \n`additionalTypes=\"[{type:'superdropdown',template:'my-template.html'}]\"` that would be a pretty cool way to do it\n. I'd vote to keep the lib as light weight as possible and just expose the ability to specify additional styling classes and/or the ability to define custom types for more advanced styling\n. i kinda played with this and just think if you had the ability to specify an attribute \n`additionalTypes=\"[{type:'superdropdown',template:'my-template.html'}]\"` that would be a pretty cool way to do it\n. ",
    "GrantCodesCodes": "I like that idea, if you have any specific suggestions on how to go about that let me know. I'll try and write something up soon. I'm thinking something along the lines of a string property in the field definition that allows you to specify a list of additional classes.\n. I like the idea of being able to specify a template, that would allow this directive to stay lean while being extensible with custom form elements.\n. @millette That sounds pretty cool to me. I think its a separate concept, here I'm discussing how to layout the fields displayed, and that would be more like branching sets of logic.\n. Thanks I'll check this out this week.\n. Looks good actually, thanks. I'll tag a release later this week though.\n. Looks good thanks\n. I'll add that soon, hopefully the demo site helps in the mean time. While they're a little complex, the two important files to look at for the demo site are these:\nhttps://github.com/nimbly/angular-formly/blob/master/src/views/home.html\nhttps://github.com/nimbly/angular-formly/blob/master/src/views/home.js\n\nThe options set in the html are defined in the `home` controller.\n\n```\n<formly-form result=\"formData\"\n             fields=\"formFields\"\n             options=\"formOptions\"\n             ng-submit=\"onSubmit()\">\n</formly-form>\n```\n. The example has been expanded quite significantly, and documentation of each feature added. Let me know if you think we need more but I'm going to close for now.\n. This would take the submit button out of the form component which I'm not sure is a great choice. Any ideas on how you would handle this?\n. For the first question, you can add a $watch to the result object you pass in. Once it changes then you'll have your event trigger.\n\nFor the second question there is a [`hideSubmit`](https://github.com/nimbly/angular-formly#hidesubmit-boolean-optional) option which you can pass to the formOptions\n. Thanks, I'll set aside some time tomorrow to check these out.\n. @t8g For both Radio and Select the idea is to only store the data necessary to recreate the values input into the form. For radio inputs the only important data is `value` which is what html(and the AngularJS component) use to display a radio input. For the Select the default AngularJS component uses a object or value inside of an array. \n\nFrom `formly-field-select.html`:\n`ng-options=\"option.name group by option.group for option in options.options\"`\n\nFrom the [AngularJS docs for `select`](https://docs.angularjs.org/api/ng/directive/select)\n\n> value: local variable which will refer to each item in the array or each property value of object during iteration.\n\nAngular uses the object as the value which is selected when you choose an option. In our case, since we're using their component, I'm using their structure. It looks like their component automatically generates values for each select item. However I don't know a way to get that value, nor use it to recreate the state of the form.\n\n``` html\n<select class=\"form-control ng-pristine ng-valid ng-valid-required\" id=\"formlyselect9\" ng-model=\"value\" ng-required=\"options.required\" ng-disabled=\"options.disabled\" ng-init=\"value = options.options[options.default]\" ng-options=\"option.name group by option.group for option in options.options\">\n    <option value=\"?\" selected=\"selected\"></option>\n    <optgroup label=\"inefficiently\">\n        <option value=\"0\">Car</option>\n        <option value=\"1\">Helicopter</option>\n        <option value=\"2\">Sport Utility Vehicle</option>\n    </optgroup>\n    <optgroup label=\"efficiently\">\n        <option value=\"3\">Bicycle</option>\n        <option value=\"4\">Skateboard</option>\n        <option value=\"5\">Walk</option>\n        <option value=\"6\">Bus</option>\n        <option value=\"7\">Scooter</option>\n        <option value=\"8\">Train</option>\n        <option value=\"9\">Hot Air Baloon</option>\n    </optgroup>\n</select>\n```\n\nFor your second question thats now handled and pushed to 0.0.10\n. Good question, you use the index of the element in the list.\n. Looks good, thanks\n. Updated to 0.0.10\n. Looks good, thanks\n. Whats the jshint error?\n. ah I see, yeah I think it would be a good idea to change this.\n. @trunghaiy I tried to reproduce this issue but as far as I can tell newer versions of JSHint have es5 mode turned on by default.\n\n> If you're still seeing this error then you should update your version of JSHint. Since 2.0.0 the es5 option has been enabled by default...\n> http://stackoverflow.com/questions/10936180/suppress-expected-an-identifier-and-instead-saw-default-a-reserved-word-in\n\nYou can read more about that here:\nhttp://jslinterrors.com/expected-an-identifier-and-instead-saw-a-a-reserved-word/\n. Let me know if you really need this to be es3 compatible, as far as I can tell you only need this if you're targeting IE6, which I don't think I'd like to worry about supporting if I can avoid it.\n. This looks great, do you mind updating the newly minted docs as well. Thanks!\n. Hey Kent, The first part of your pull request for hide looks great, but I'm wondering if there is a more efficient way to handle the watches. I'm seeing 6 calls to the watch method in its current implementation no matter what is changed on the scope. I believe its 2 calls per hideExpression, per scope change of any kind to the form scope, not just the results field. I don't think this would be a major bottle neck, but I spent a little time trying a few options to see if we could get it down.\n\nIn addition, the watcher code only runs when the form is instantiated so if you modify the form definition it won't rerun and the functionality is broken. Editing the form definition is an edge case, but I'd like to create some sort of form construction tool in the future using this library, so I see that being an issue as well.\n\nI tried this the code below, it just watched result, deeply, and if there are changes it loops through the fields to see if they have hide expressions. I don't think its the most elegant solution, but it does work around those two problems listed above. What do you think, I'm open for discussion! My only concern with my solution is looping through all the fields every time...\n\n``` javascript\n    //formly-form.js\n    ...\ncontroller: function($scope, $element) {\n            $scope.$watch('result', function(newValue) {\n                console.log('result changed');\n                angular.forEach($scope.fields, function(field, index) {\n                    if (field.hideExpression) {\n                        var getter = $parse(field.hideExpression);\n                        field.hide = getter($scope.result);\n                    }\n                });\n            }, true);\n        },\n    ...\n```\n. I agree with @jhr007, but I think it would be cool to create a set of custom templates that are compatible with the library to enable inline editing. I'd like to keep the library bare bones and then allow you to swap dependencies based on the type of forms you need.\n. @kentcdodds thanks for putting that together, its all pushed up and a new version tagged at 0.0.10\n. Actually the only issue I just realized is we need to update the Readme with documentation on how to use the new feature. If you get a chance to look at that it would be helpful. Otherwise I'll try and get to it later this week.\n\nI haven't done too many pull requests as a repo owner myself, so I think we did ok :smile: \n. Nevermind, I think its all in the readme...\n. This is awesome, I'll try and get this in today.\n. Ok this is merged in, but I think i did it wrong so this PR didn't get registered as merged...\n\nAlso I moved the provider into its own file in a provider folder and with a more descriptive name so its clear when being injected.\n. 0.0.11 btw\n. Hmm, I did a little digging and it looks like its the default, which is why the minifier removes it... As you'll read, people sometimes rely on it to style or for js selectors. I think I'd agree that it should be there, even if it's not technically necessary. Anyone else have an opinion?\n\nIssue calling this out:\nhttps://github.com/kangax/html-minifier/issues/105\n. Fixed in [0.0.12](https://github.com/nimbly/angular-formly/issues?milestone=1)\n. Yeah lets hold off with 1.2 ngMessages for now. We can start on a new branch with 1.3 support if someone would like to take a crack at it.\n. Sorry about the styleguide stuff, I've elaborated in #100 \n. Ha, awesome, thanks!\n. Seems like this would work for number and/or email templates, I've never used it before?\n\nI think this would be a good inclusion either way, can you update the readme and changelog. I can run the build command once we're ready to tag a new release.\n. @inalgnu once you have this ready please change the target branch for this PR to `0.0.12` so I can easily merge this in. Thanks!\nhttps://help.github.com/articles/using-pull-requests#changing-the-branch-range-and-destination-repository\n. Looking forward to getting this in but I'm closing this PR so that you can resubmit.\nBefore resubmitting please submit to branch 0.0.12 and add documentation for the new feature. Thanks!\n. Sounds good\n. This will be in 0.0.12\n. Closed with #39 \n. Hey Kent, I won't be able to get to this till Wed. You might be able to just create a new branch from the current formly master. Unless it builds on this one...\n. I'm seeing an error when I test this:\n- Check the `joe` checkbox\n- start typing in the **This is a special form field** text area\n- error: `TypeError: Cannot set property 'field' of undefined`\n. Looks good I'm ready to merge this but can you change the target branch from `master` to my new `0.0.12` branch.\n\nI can't do it but I think this describes how you can do it:\nhttps://help.github.com/articles/using-pull-requests#changing-the-branch-range-and-destination-repository\n. Closed via #39 \n. Agreed, ok\n. Yeah we have no issues with that, I've never used browserify but I know it's popular. Feel free to submit a PR and we'll drop it in.\n. Fair enough, I'll look into it soon.\n. Its published here: https://www.npmjs.org/package/angular-formly\nThis is my first node package so let me know if there are any problems.\n. `<input type=\"date\">` is unsupported by most browsers at the moment and this library is focused on only using the native and/or vanilla angular components. You can definitely use one of the existing libraries like ui-bootstrap to achieve this with a custom form template.\n\nUI-Bootstrap date picker\nhttp://angular-ui.github.io/bootstrap/#/datepicker\n\nSupport for HTML5 date\nhttp://caniuse.com/input-datetime\nhttp://www.wufoo.com/html5/types/4-date.html\n. I haven't read through this very thoroughly yet but `uniqueFormId` should be present in the form options. Can you try this and see if adding helps resolve any conflicts?\n. @scull7 were you able to figure anything out yet? there is no `safe` variable in our code so I'm not 100% sure this is from our library.\n\nAlso, this looks like minified code, is the issue happening in your unminified code? It would be great to get a stack trace that had the actual file names in it.\n. Ok, going to close this for now...\n. @testuserx I agree that it would be nice to have this functionality. I've proposed it here: https://github.com/nimbly/angular-formly/issues/1\n\nThat being said, I don't really have any good solutions for it. For now this project is best for simple layouts only.\n. I like the idea of using ng-if as an alternative to ng-hide. Is there any reason to keep ng-hide?\n\nIn a future release I'd to move the template back into html, we can achieve the same string replacement effect, if we still need to, by loading via the template cache. We're doing this in formly-field currently. I don't like editing html in strings like this, it's just hard to read and work with imho. I don't mind making this change myself as I'm being the picky one here :)\n\nThis also breaks our ability to customize formly-form.html across builds, not that we were, but I'd like to leave that option open.\n\nI'm going to release it as-is in 0.0.15\n. Sounds good, those can be two separate initiatives. I think I have a good idea on how to separate the html. I'll tackle that in a future release.\n. I just mean for layout purposes, nothing to do with the way its implemented.\n. I see what you mean, but I don't think it needs to be customizable. Just in that column so that its clear its a configuration.\n. Lame, well this works for me thanks!\n. It seems like this might be a step in the direction of ditching the `value` property. Can we just use result.value going forward?\n. ha, good point. I'll create a new issue for that, but I think this is the right direction to move. Unless we have a good reason to keep it around I think it can go in a future release.\n. Agreed those are both solid options. Closing for now\n. Closing for now, please reopen if you continue seeing this issue.\n. Not positive but I think the fix you're looking for is resolved by #44. You can set the `default` value in options using the `name` of the option you pass in.\n. That would be awesome, the templates would be pretty easy to rewrite but I've never used Ionic myself.\n. @cfreyre I just added support in 0.0.14 for additional base templates. There is a little bit of build process customization but I can help with that if you need. Let me know if you plan on working on this. I'm going to reopen this task as I'd like to see it done either way.\n. Sure sounds like a good addition to me, the bootstrap templates are in their own folder. Please add it to the readme as well.\u00a0Let me know of you have any questions!\n\nOn Tue, Jul 29, 2014 at 3:48 AM, Jon Espen Kvisler\nnotifications@github.com wrote:\n\n> Hey, great project!\n> Would have been cool if I could add help text to each field also (including radio/checkbox options), using e.g. `.help-block` (from [bootstrap](http://getbootstrap.com/css/#forms-help-text) anyway). \n> \n> ## What do you think? I can probably have a go at it and submit a PR.\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/nimbly/angular-formly/issues/52\n. Sounds good, I think that would be pretty easy to exclude add to the build process. I do like having the premise templates so that in many cases people can just drop things in and get started but I trust there are plenty of users who just want custom stuff. I'm happy to support both cases, though I think the default should be plain templates.\n\nOn Tue, Jul 29, 2014 at 8:49 AM, Kent C. Dodds notifications@github.com\nwrote:\n\n> ## I think it would be good to actually separate things so much that this project had several builds with and without templates. On most of my projects I override the template types anyway, so I'd prefer to not have the templates in my code. I think this would be a good thing in general, just to separate things out a bit. We should also add a wiki article for how to create a custom template and show how easy it is. I think that would decrease the number of issues asking for changes to templates where a custom template would be better...\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/nimbly/angular-formly/issues/53\n. I actually already did a large amount of that work last release. There was a breaking change which defaulted the templates to plain. I don't use the same -tpls naming convention unfortunately, just .bootstrap I believe. -no-tpls sounds good to me.\n\nOn Tue, Jul 29, 2014 at 9:20 AM, Kent C. Dodds notifications@github.com\nwrote:\n\n> Seems reasonable. I'd say we'd want to have another output file that ended in `no-tpls`, what do you think?\n> \n> ## Eventually, there could be a use case to support templates for more than just bootstrap. We could do style-it-yourself templates where we add some classes to allow customizability, and we could have pure.css templates, and I'm sure there are more. But if we separated these out into their own folders, it would encourage the community to contribute templates for their favorite css libraries. Each of these libraries could have its own build. To do that right, I think that we'd have a breaking change to default to the no templates output and then a `{library}-tpls` file for each template type. What do you think?\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/nimbly/angular-formly/issues/53#issuecomment-50500100\n. This looks awesome @jonespen, I'll make sure it's in the next release, 0.0.15.\n. Reopened as https://github.com/nimbly/angular-formly/pull/56 in the 0.0.15 branch\n. One way to add this could be with a directive that feeds the typeahead data. You could use either formlyTemplateProvider or just override a single field with a template that uses the typeahead/http directive. Would that work in your case?\n. sorry been pretty busy this week. I'll look over this with you guys by Wed I believe\n. Sounds like this would be a separate build of formly dedicated to AngularStrap, at the very least. However since the functionality requested is above and beyond the base functionality of AngularStrap I'm not sure that it belongs anywhere other than a custom form field. Something that is tailored to your project, of course it could always be based on an AngularStrap/Formly build, but as @kentcdodds mentioned it would require custom templates across all fields, which wouldn't even be part of the AngularStrap build. I would see a AngularStrap build focusing on implementing their form related components, Timepicker, Datepicker, Select, and maybe typeahead. Anything beyond that wouldn't make a lot of sense in my opinion.\n. It just seems like excess to me, it certainly isn't an urgent issue but it feels like an extra moving/breakable part that could easily be simplified with direct access to the result or a getter.\n. Ha, absolutely agree. My lack of test writing experience is the major reason we don't have that yet, maybe it's time to learn..\n. You're more than welcome to do so. Let me know if you do get started or want some help writing tests.\n. I'm working on 0.0.15 right now, so today, just going to go through and test everything as thoroughly as i can here. What kind of stuff are you moving?\n. Ok, all yours. 0.0.16 (I messed up 15) is live!\n. Thanks, I'm taking a look as well. I'll let you know if figure anything out.\n. looks like it should go from:\n\n`ng-options=\"option.value as option.name group by option.group for option in options.options\"`\nto\n`ng-options=\"option.name as option.name group by option.group for option in options.options\"`\n\nDoes that work for you?\n. ha, no worries\n\nThe first value, `select`, if set, is the value thats bound. So option.value wasn't a real thing, and wasn't getting bound.\n\nhttps://docs.angularjs.org/api/ng/directive/select\n\n> select: The result of this expression will be bound to the model of the parent <select> element. If not specified, select expression will default to value.\n. Yeah #61 broke it, how did that get past our rigorous test suite! Easy fix at least :)\n. I can push this fix up\n. I could get behind that change\n. Looks like a good setup to me, how do I configure the symlinks, they don't seem to work out-of-the-box? I get 404's for all of the bower_components.\n. Can we change the ignore to the new location? src/bower-components\n\nOn Thu, Aug 21, 2014 at 3:58 PM, Kent C. Dodds notifications@github.com\nwrote:\n\n> Whoops, because the symlink was called `bower_components` it was ignored via the `.gitignore`. I think I'm going to remove that from the git ignore. Another option would be to name the symlink different, but then it's a little confusing. Want to use the symlink so we can symlink the bower_components in the test directory as well...\n> \n> ## Anyway, what do you think about removing `bower_components` from the `.gitignore`?\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/nimbly/angular-formly/pull/72#issuecomment-52996469\n. I'm confused, in this PR they are still located in src, are you saying you want to move them out of there? If we were to just leave them there, and change .gitignore from `bower_components` to `src/bower_components` it would allow the symlink to be wherever, assuming you had it at the top level?\n. Ok sounds good\n. Awesome, I'll take a look\n. looks great, merged\n. Ok, I\u2019ll jump on that shortly\n\nOn Fri, Aug 22, 2014 at 1:25 PM, Kent C. Dodds notifications@github.com\nwrote:\n\n> ## @astrism looks like you have to setup travis-ci on this because I don't have admin access: https://travis-ci.org/profile/nimbly\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/nimbly/angular-formly/issues/73#issuecomment-53115848\n. Ok I enabled Travis CI.\n. Added\n. It's running now actually: https://travis-ci.org/nimbly/angular-formly/builds/33324189\n. Maybe global install? http://badsyntax.co/post/travis-ci-and-bower\n. Yeah i can do that\n. We're officially Passing!\n. I recently setup a custom text field and set the max length using the native `maxlength` attribute. For some reason `ng-maxlength` wasn't working for me at all.\n`maxlength=\"{{options.maxlength}}\"`\nI think this would be a good addition to the templates.\n. Agreed, I never intended for this library to go too far above native Angular support for forms. For that kind of support I like the idea individual library plugins, i.e. UI-Bootstrap or Angular-Strap for their more enhanced UI components. It is my opinion that the base Formly should be UI agnostic if possible.\n. Yep, moving this discussion over there :)\n. I think we'd just be creating several repos which depend on this one. It would be good for this one to mention the others and maybe the demo would use the bootstrap one. The real question is should we do this in 0.1.0 or move it to a future release? I'm going to be out for a couple weeks traveling soon, hopefully none of this requires my urgent help, but I'll try and jump in when I can. @kentcdodds do you have any desire to own those repos, or we could even create a new org i suppose? This is turning out to be quite the project :)\n. Yeah I think I might do that, it'll make it easier to manage contributors and stuff.\n. Hey all, this is finally in progress! Currently the templates are pointing to the latest hash for angular-formly. The template repos as I have them are dependent on angular-formly, unlike the current standalone builds. I think that this structure allows for us to release extended templates like an [angular-bootstrap](https://github.com/angular-ui/bootstrap) template that can live side by side with the base template. I think this is a great setup, the only part I don't like is having to generate this file each time:\n\n```\nangular.module('formly.render').config(function(formlyConfigProvider) {\n    'use strict';\n    var fields = [\n        'textarea', 'radio', 'select', 'number', 'checkbox',\n        'password', 'hidden', 'email', 'text'\n    ];\n    angular.forEach(fields, function(field) {\n        formlyConfigProvider.setTemplateUrl(field, 'fields/formly-field-' + field + '.html');\n    });\n});\n```\n\nI feel like there might be a less verbose way of doing this, but I haven't thought of anything yet.\n\nNext I'll be removing templates from angular-formly, release angular-formly, then update the template repos and release them.\n\nHere are the repos:\nhttps://github.com/formly-js/angular-formly-templates-vanilla\nhttps://github.com/formly-js/angular-formly-templates-bootstrap\n. @kentcdodds sounds good. I'm going to leave it for now.\n\nTemplates are now removed from angular-formly. Final remaining thing is updating the docs in angular-formly to mention the other repos. I won't get to it today so if anyone else has time feel free.\n. All done and released\n. The current structure defined in the docs for defining options is: \n\n```\n {\n  \"name\": \"Walk\",\n  \"group\": \"low emissions\"\n}\n```\n\nWhat you're suggesting wouldn't work with this setup and breaks our current demo page. Are you proposing we change this? I could use a little info as to why and a maybe update the pull request with the full change. I should be able to look at this in more detail on Wed, but thats why I made that change initially, and it worked well for the demo as well as being backwards compatible.\n. Just reread #60 and I see you want both name and value there, I think this makes sense. It's probably ok to break the backwards compatibility, but we'll need to update the docs and demo.\n\n```\n{\n  \"name\": \"Yes, and I love it!\",\n  \"value\": \"yesyes\",\n  \"group\": \"positive vibes\"\n}\n```\n. That works for me, we'll get this update in to 0.1.0, and once the docs and stuff are updated.\n. If you have time to update the Readme and demo that would help.\n. Closing as duplicate of #80 \n. Ah sorry about that, thanks.\n\nOn Wed, Aug 27, 2014 at 8:33 AM, Kent C. Dodds notifications@github.com\nwrote:\n\n> ## Merged #81.\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/nimbly/angular-formly/pull/81#event-157929215\n. Is there any way you could resubmit this without the extra commits. It looks like you ran build, it would help keep our history cleaner. Looks like we only need `a57dce6`\n. Thanks!\n. Good catch!\n. Unlike many simple 3rd party directives, Formly does include it's own templates for the form and form fields. Since you're changing the symbol, those break. Any 3rd party directive you use that has its own templates and uses {{}} is going to break. As Kent mentioned we have a build with no templates at all, use this to get around the issue. You can copy all our templates if needed, but otherwise the templates are provided for convenience.\n. Working on the transfer today to create a dedicated Organization\n. Sure, we'll do the transfer but hold off on releasing a new version till thats ready?\n. We're going to be in limbo for a bit till our registration is transferred. Thankfully the old bower install still seems to work.\n\nSee:\nhttps://github.com/bower/bower/issues/120#issuecomment-57228439\n. thats cool with me\n. Regarding a nimbly page/package, I'll do that asap.\n. I checked and `formly` is already taken, any other ideas?\n. imho opinion the formly code is currently fairly language specific, it's light because we're not doing a whole lot of heavy lifting, just implementing some basic features of angular. For example angular specific directives that we wouldn't want to reimplement so they would all match in every library while cluttering up the angular version. I'd imagine that react doesn't have all the same features as angular and it would be quite a project to reach parody. I'm assuming the same can probably be said in the opposite direction.\n\nThat being said, it would be really cool to make progress on a specification which can be used by any flavor of formly or by others. I think the specification is the main component which would allow people to switch rendering libraries on the fly. Otherwise the code isn't that unique. Does anyone know if there is a json-form specification out there that I should have used already?\n. Jumping back on track here, how does formly-js sound? I think it's available...\n. ok, formly-js it is!\n. Alright we're live on bower using the same `angular-formly` but now pointing to the new org.\n. @quietlyconfident I originally built this app with the desire to use it to make a form building app alongside it. It would be really awesome to see that come to light.\n\nI'm sure that something similar could easily be built with this library or forked from theirs and adapted to our structure.\n. What version of Angular are you using?\n. This package might work with 1.3.0 but it is untested. Try the version specified in the bower dependencies or 1.2.23\n. We have 1.3.0 support in mind, but it probably wont be ready for a little while.\n. Please reopen if that doesn't fix it\n. Makes sense\n. Awesome, thanks\n. @kentcdodds are we skipping this for 1.0.0?\n. Sounds good\n\nOn Thu, Oct 2, 2014 at 6:28 PM, Kent C. Dodds notifications@github.com\nwrote:\n\n> ## @astrism, the entire build will need to change since we're splitting the templates out, so I'd say yes.\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/formly-js/angular-formly/pull/110#issuecomment-57738052\n. Sorry about that, the link was incorrect. We're in the middle of a org transition. It should be fixed now.\n\nhttp://formly-js.github.io/angular-formly/#!/\n. Can you put together a demo that shows what this would look like? I think you're suggesting that you want to group fields by type? I'm having trouble imagining how this would work in a real world scenario.\n. Hey @diegochavez can you please attempt to reproduce this in a plunker. We have a template here:\nhttp://plnkr.co/edit/tpl:1R3t4fvpXcJyiu96ICY5?p=preview\n\nMost likely it's not accessible because $rootScope methods aren't available to directives unless you inject $rootScope.\n. I believe you have 2 options to solve this.\n\nA) If the function can be different for every field, then pass it in as a property in formFields.\nhttp://plnkr.co/edit/giEUOrT5J16wuWcM68I3?p=preview\n\nB) Create a custom directive with it's own controller that can define this function or expose it to the template.\n. I see, those are currently required afaik:\nhttps://github.com/formly-js/angular-formly-templates-bootstrap/blob/master/src/fields/formly-field-select.html\n(See line 15)\n\n@kentcdodds Should we move these template-specific docs to the template repo? Seems they're a little out of date.\n. That being said, I'm fine merging this in, till then. What do you think @kentcdodds?\n. Updated the readme, ngmodules can't handle the youtube link or relative links but I fixed those. I also looked for a way to transfer/share ownership, doesn't seem to be one, but I think I can handle it for now. Alternatively I can delete the module so you can recreate it.\n. Also the repo/docs are looking great :clap: \n. I like that idea, if you have any specific suggestions on how to go about that let me know. I'll try and write something up soon. I'm thinking something along the lines of a string property in the field definition that allows you to specify a list of additional classes.\n. I like the idea of being able to specify a template, that would allow this directive to stay lean while being extensible with custom form elements.\n. @millette That sounds pretty cool to me. I think its a separate concept, here I'm discussing how to layout the fields displayed, and that would be more like branching sets of logic.\n. Thanks I'll check this out this week.\n. Looks good actually, thanks. I'll tag a release later this week though.\n. Looks good thanks\n. I'll add that soon, hopefully the demo site helps in the mean time. While they're a little complex, the two important files to look at for the demo site are these:\nhttps://github.com/nimbly/angular-formly/blob/master/src/views/home.html\nhttps://github.com/nimbly/angular-formly/blob/master/src/views/home.js\n\nThe options set in the html are defined in the `home` controller.\n\n```\n<formly-form result=\"formData\"\n             fields=\"formFields\"\n             options=\"formOptions\"\n             ng-submit=\"onSubmit()\">\n</formly-form>\n```\n. The example has been expanded quite significantly, and documentation of each feature added. Let me know if you think we need more but I'm going to close for now.\n. This would take the submit button out of the form component which I'm not sure is a great choice. Any ideas on how you would handle this?\n. For the first question, you can add a $watch to the result object you pass in. Once it changes then you'll have your event trigger.\n\nFor the second question there is a [`hideSubmit`](https://github.com/nimbly/angular-formly#hidesubmit-boolean-optional) option which you can pass to the formOptions\n. Thanks, I'll set aside some time tomorrow to check these out.\n. @t8g For both Radio and Select the idea is to only store the data necessary to recreate the values input into the form. For radio inputs the only important data is `value` which is what html(and the AngularJS component) use to display a radio input. For the Select the default AngularJS component uses a object or value inside of an array. \n\nFrom `formly-field-select.html`:\n`ng-options=\"option.name group by option.group for option in options.options\"`\n\nFrom the [AngularJS docs for `select`](https://docs.angularjs.org/api/ng/directive/select)\n\n> value: local variable which will refer to each item in the array or each property value of object during iteration.\n\nAngular uses the object as the value which is selected when you choose an option. In our case, since we're using their component, I'm using their structure. It looks like their component automatically generates values for each select item. However I don't know a way to get that value, nor use it to recreate the state of the form.\n\n``` html\n<select class=\"form-control ng-pristine ng-valid ng-valid-required\" id=\"formlyselect9\" ng-model=\"value\" ng-required=\"options.required\" ng-disabled=\"options.disabled\" ng-init=\"value = options.options[options.default]\" ng-options=\"option.name group by option.group for option in options.options\">\n    <option value=\"?\" selected=\"selected\"></option>\n    <optgroup label=\"inefficiently\">\n        <option value=\"0\">Car</option>\n        <option value=\"1\">Helicopter</option>\n        <option value=\"2\">Sport Utility Vehicle</option>\n    </optgroup>\n    <optgroup label=\"efficiently\">\n        <option value=\"3\">Bicycle</option>\n        <option value=\"4\">Skateboard</option>\n        <option value=\"5\">Walk</option>\n        <option value=\"6\">Bus</option>\n        <option value=\"7\">Scooter</option>\n        <option value=\"8\">Train</option>\n        <option value=\"9\">Hot Air Baloon</option>\n    </optgroup>\n</select>\n```\n\nFor your second question thats now handled and pushed to 0.0.10\n. Good question, you use the index of the element in the list.\n. Looks good, thanks\n. Updated to 0.0.10\n. Looks good, thanks\n. Whats the jshint error?\n. ah I see, yeah I think it would be a good idea to change this.\n. @trunghaiy I tried to reproduce this issue but as far as I can tell newer versions of JSHint have es5 mode turned on by default.\n\n> If you're still seeing this error then you should update your version of JSHint. Since 2.0.0 the es5 option has been enabled by default...\n> http://stackoverflow.com/questions/10936180/suppress-expected-an-identifier-and-instead-saw-default-a-reserved-word-in\n\nYou can read more about that here:\nhttp://jslinterrors.com/expected-an-identifier-and-instead-saw-a-a-reserved-word/\n. Let me know if you really need this to be es3 compatible, as far as I can tell you only need this if you're targeting IE6, which I don't think I'd like to worry about supporting if I can avoid it.\n. This looks great, do you mind updating the newly minted docs as well. Thanks!\n. Hey Kent, The first part of your pull request for hide looks great, but I'm wondering if there is a more efficient way to handle the watches. I'm seeing 6 calls to the watch method in its current implementation no matter what is changed on the scope. I believe its 2 calls per hideExpression, per scope change of any kind to the form scope, not just the results field. I don't think this would be a major bottle neck, but I spent a little time trying a few options to see if we could get it down.\n\nIn addition, the watcher code only runs when the form is instantiated so if you modify the form definition it won't rerun and the functionality is broken. Editing the form definition is an edge case, but I'd like to create some sort of form construction tool in the future using this library, so I see that being an issue as well.\n\nI tried this the code below, it just watched result, deeply, and if there are changes it loops through the fields to see if they have hide expressions. I don't think its the most elegant solution, but it does work around those two problems listed above. What do you think, I'm open for discussion! My only concern with my solution is looping through all the fields every time...\n\n``` javascript\n    //formly-form.js\n    ...\ncontroller: function($scope, $element) {\n            $scope.$watch('result', function(newValue) {\n                console.log('result changed');\n                angular.forEach($scope.fields, function(field, index) {\n                    if (field.hideExpression) {\n                        var getter = $parse(field.hideExpression);\n                        field.hide = getter($scope.result);\n                    }\n                });\n            }, true);\n        },\n    ...\n```\n. I agree with @jhr007, but I think it would be cool to create a set of custom templates that are compatible with the library to enable inline editing. I'd like to keep the library bare bones and then allow you to swap dependencies based on the type of forms you need.\n. @kentcdodds thanks for putting that together, its all pushed up and a new version tagged at 0.0.10\n. Actually the only issue I just realized is we need to update the Readme with documentation on how to use the new feature. If you get a chance to look at that it would be helpful. Otherwise I'll try and get to it later this week.\n\nI haven't done too many pull requests as a repo owner myself, so I think we did ok :smile: \n. Nevermind, I think its all in the readme...\n. This is awesome, I'll try and get this in today.\n. Ok this is merged in, but I think i did it wrong so this PR didn't get registered as merged...\n\nAlso I moved the provider into its own file in a provider folder and with a more descriptive name so its clear when being injected.\n. 0.0.11 btw\n. Hmm, I did a little digging and it looks like its the default, which is why the minifier removes it... As you'll read, people sometimes rely on it to style or for js selectors. I think I'd agree that it should be there, even if it's not technically necessary. Anyone else have an opinion?\n\nIssue calling this out:\nhttps://github.com/kangax/html-minifier/issues/105\n. Fixed in [0.0.12](https://github.com/nimbly/angular-formly/issues?milestone=1)\n. Yeah lets hold off with 1.2 ngMessages for now. We can start on a new branch with 1.3 support if someone would like to take a crack at it.\n. Sorry about the styleguide stuff, I've elaborated in #100 \n. Ha, awesome, thanks!\n. Seems like this would work for number and/or email templates, I've never used it before?\n\nI think this would be a good inclusion either way, can you update the readme and changelog. I can run the build command once we're ready to tag a new release.\n. @inalgnu once you have this ready please change the target branch for this PR to `0.0.12` so I can easily merge this in. Thanks!\nhttps://help.github.com/articles/using-pull-requests#changing-the-branch-range-and-destination-repository\n. Looking forward to getting this in but I'm closing this PR so that you can resubmit.\nBefore resubmitting please submit to branch 0.0.12 and add documentation for the new feature. Thanks!\n. Sounds good\n. This will be in 0.0.12\n. Closed with #39 \n. Hey Kent, I won't be able to get to this till Wed. You might be able to just create a new branch from the current formly master. Unless it builds on this one...\n. I'm seeing an error when I test this:\n- Check the `joe` checkbox\n- start typing in the **This is a special form field** text area\n- error: `TypeError: Cannot set property 'field' of undefined`\n. Looks good I'm ready to merge this but can you change the target branch from `master` to my new `0.0.12` branch.\n\nI can't do it but I think this describes how you can do it:\nhttps://help.github.com/articles/using-pull-requests#changing-the-branch-range-and-destination-repository\n. Closed via #39 \n. Agreed, ok\n. Yeah we have no issues with that, I've never used browserify but I know it's popular. Feel free to submit a PR and we'll drop it in.\n. Fair enough, I'll look into it soon.\n. Its published here: https://www.npmjs.org/package/angular-formly\nThis is my first node package so let me know if there are any problems.\n. `<input type=\"date\">` is unsupported by most browsers at the moment and this library is focused on only using the native and/or vanilla angular components. You can definitely use one of the existing libraries like ui-bootstrap to achieve this with a custom form template.\n\nUI-Bootstrap date picker\nhttp://angular-ui.github.io/bootstrap/#/datepicker\n\nSupport for HTML5 date\nhttp://caniuse.com/input-datetime\nhttp://www.wufoo.com/html5/types/4-date.html\n. I haven't read through this very thoroughly yet but `uniqueFormId` should be present in the form options. Can you try this and see if adding helps resolve any conflicts?\n. @scull7 were you able to figure anything out yet? there is no `safe` variable in our code so I'm not 100% sure this is from our library.\n\nAlso, this looks like minified code, is the issue happening in your unminified code? It would be great to get a stack trace that had the actual file names in it.\n. Ok, going to close this for now...\n. @testuserx I agree that it would be nice to have this functionality. I've proposed it here: https://github.com/nimbly/angular-formly/issues/1\n\nThat being said, I don't really have any good solutions for it. For now this project is best for simple layouts only.\n. I like the idea of using ng-if as an alternative to ng-hide. Is there any reason to keep ng-hide?\n\nIn a future release I'd to move the template back into html, we can achieve the same string replacement effect, if we still need to, by loading via the template cache. We're doing this in formly-field currently. I don't like editing html in strings like this, it's just hard to read and work with imho. I don't mind making this change myself as I'm being the picky one here :)\n\nThis also breaks our ability to customize formly-form.html across builds, not that we were, but I'd like to leave that option open.\n\nI'm going to release it as-is in 0.0.15\n. Sounds good, those can be two separate initiatives. I think I have a good idea on how to separate the html. I'll tackle that in a future release.\n. I just mean for layout purposes, nothing to do with the way its implemented.\n. I see what you mean, but I don't think it needs to be customizable. Just in that column so that its clear its a configuration.\n. Lame, well this works for me thanks!\n. It seems like this might be a step in the direction of ditching the `value` property. Can we just use result.value going forward?\n. ha, good point. I'll create a new issue for that, but I think this is the right direction to move. Unless we have a good reason to keep it around I think it can go in a future release.\n. Agreed those are both solid options. Closing for now\n. Closing for now, please reopen if you continue seeing this issue.\n. Not positive but I think the fix you're looking for is resolved by #44. You can set the `default` value in options using the `name` of the option you pass in.\n. That would be awesome, the templates would be pretty easy to rewrite but I've never used Ionic myself.\n. @cfreyre I just added support in 0.0.14 for additional base templates. There is a little bit of build process customization but I can help with that if you need. Let me know if you plan on working on this. I'm going to reopen this task as I'd like to see it done either way.\n. Sure sounds like a good addition to me, the bootstrap templates are in their own folder. Please add it to the readme as well.\u00a0Let me know of you have any questions!\n\nOn Tue, Jul 29, 2014 at 3:48 AM, Jon Espen Kvisler\nnotifications@github.com wrote:\n\n> Hey, great project!\n> Would have been cool if I could add help text to each field also (including radio/checkbox options), using e.g. `.help-block` (from [bootstrap](http://getbootstrap.com/css/#forms-help-text) anyway). \n> \n> ## What do you think? I can probably have a go at it and submit a PR.\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/nimbly/angular-formly/issues/52\n. Sounds good, I think that would be pretty easy to exclude add to the build process. I do like having the premise templates so that in many cases people can just drop things in and get started but I trust there are plenty of users who just want custom stuff. I'm happy to support both cases, though I think the default should be plain templates.\n\nOn Tue, Jul 29, 2014 at 8:49 AM, Kent C. Dodds notifications@github.com\nwrote:\n\n> ## I think it would be good to actually separate things so much that this project had several builds with and without templates. On most of my projects I override the template types anyway, so I'd prefer to not have the templates in my code. I think this would be a good thing in general, just to separate things out a bit. We should also add a wiki article for how to create a custom template and show how easy it is. I think that would decrease the number of issues asking for changes to templates where a custom template would be better...\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/nimbly/angular-formly/issues/53\n. I actually already did a large amount of that work last release. There was a breaking change which defaulted the templates to plain. I don't use the same -tpls naming convention unfortunately, just .bootstrap I believe. -no-tpls sounds good to me.\n\nOn Tue, Jul 29, 2014 at 9:20 AM, Kent C. Dodds notifications@github.com\nwrote:\n\n> Seems reasonable. I'd say we'd want to have another output file that ended in `no-tpls`, what do you think?\n> \n> ## Eventually, there could be a use case to support templates for more than just bootstrap. We could do style-it-yourself templates where we add some classes to allow customizability, and we could have pure.css templates, and I'm sure there are more. But if we separated these out into their own folders, it would encourage the community to contribute templates for their favorite css libraries. Each of these libraries could have its own build. To do that right, I think that we'd have a breaking change to default to the no templates output and then a `{library}-tpls` file for each template type. What do you think?\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/nimbly/angular-formly/issues/53#issuecomment-50500100\n. This looks awesome @jonespen, I'll make sure it's in the next release, 0.0.15.\n. Reopened as https://github.com/nimbly/angular-formly/pull/56 in the 0.0.15 branch\n. One way to add this could be with a directive that feeds the typeahead data. You could use either formlyTemplateProvider or just override a single field with a template that uses the typeahead/http directive. Would that work in your case?\n. sorry been pretty busy this week. I'll look over this with you guys by Wed I believe\n. Sounds like this would be a separate build of formly dedicated to AngularStrap, at the very least. However since the functionality requested is above and beyond the base functionality of AngularStrap I'm not sure that it belongs anywhere other than a custom form field. Something that is tailored to your project, of course it could always be based on an AngularStrap/Formly build, but as @kentcdodds mentioned it would require custom templates across all fields, which wouldn't even be part of the AngularStrap build. I would see a AngularStrap build focusing on implementing their form related components, Timepicker, Datepicker, Select, and maybe typeahead. Anything beyond that wouldn't make a lot of sense in my opinion.\n. It just seems like excess to me, it certainly isn't an urgent issue but it feels like an extra moving/breakable part that could easily be simplified with direct access to the result or a getter.\n. Ha, absolutely agree. My lack of test writing experience is the major reason we don't have that yet, maybe it's time to learn..\n. You're more than welcome to do so. Let me know if you do get started or want some help writing tests.\n. I'm working on 0.0.15 right now, so today, just going to go through and test everything as thoroughly as i can here. What kind of stuff are you moving?\n. Ok, all yours. 0.0.16 (I messed up 15) is live!\n. Thanks, I'm taking a look as well. I'll let you know if figure anything out.\n. looks like it should go from:\n\n`ng-options=\"option.value as option.name group by option.group for option in options.options\"`\nto\n`ng-options=\"option.name as option.name group by option.group for option in options.options\"`\n\nDoes that work for you?\n. ha, no worries\n\nThe first value, `select`, if set, is the value thats bound. So option.value wasn't a real thing, and wasn't getting bound.\n\nhttps://docs.angularjs.org/api/ng/directive/select\n\n> select: The result of this expression will be bound to the model of the parent <select> element. If not specified, select expression will default to value.\n. Yeah #61 broke it, how did that get past our rigorous test suite! Easy fix at least :)\n. I can push this fix up\n. I could get behind that change\n. Looks like a good setup to me, how do I configure the symlinks, they don't seem to work out-of-the-box? I get 404's for all of the bower_components.\n. Can we change the ignore to the new location? src/bower-components\n\nOn Thu, Aug 21, 2014 at 3:58 PM, Kent C. Dodds notifications@github.com\nwrote:\n\n> Whoops, because the symlink was called `bower_components` it was ignored via the `.gitignore`. I think I'm going to remove that from the git ignore. Another option would be to name the symlink different, but then it's a little confusing. Want to use the symlink so we can symlink the bower_components in the test directory as well...\n> \n> ## Anyway, what do you think about removing `bower_components` from the `.gitignore`?\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/nimbly/angular-formly/pull/72#issuecomment-52996469\n. I'm confused, in this PR they are still located in src, are you saying you want to move them out of there? If we were to just leave them there, and change .gitignore from `bower_components` to `src/bower_components` it would allow the symlink to be wherever, assuming you had it at the top level?\n. Ok sounds good\n. Awesome, I'll take a look\n. looks great, merged\n. Ok, I\u2019ll jump on that shortly\n\nOn Fri, Aug 22, 2014 at 1:25 PM, Kent C. Dodds notifications@github.com\nwrote:\n\n> ## @astrism looks like you have to setup travis-ci on this because I don't have admin access: https://travis-ci.org/profile/nimbly\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/nimbly/angular-formly/issues/73#issuecomment-53115848\n. Ok I enabled Travis CI.\n. Added\n. It's running now actually: https://travis-ci.org/nimbly/angular-formly/builds/33324189\n. Maybe global install? http://badsyntax.co/post/travis-ci-and-bower\n. Yeah i can do that\n. We're officially Passing!\n. I recently setup a custom text field and set the max length using the native `maxlength` attribute. For some reason `ng-maxlength` wasn't working for me at all.\n`maxlength=\"{{options.maxlength}}\"`\nI think this would be a good addition to the templates.\n. Agreed, I never intended for this library to go too far above native Angular support for forms. For that kind of support I like the idea individual library plugins, i.e. UI-Bootstrap or Angular-Strap for their more enhanced UI components. It is my opinion that the base Formly should be UI agnostic if possible.\n. Yep, moving this discussion over there :)\n. I think we'd just be creating several repos which depend on this one. It would be good for this one to mention the others and maybe the demo would use the bootstrap one. The real question is should we do this in 0.1.0 or move it to a future release? I'm going to be out for a couple weeks traveling soon, hopefully none of this requires my urgent help, but I'll try and jump in when I can. @kentcdodds do you have any desire to own those repos, or we could even create a new org i suppose? This is turning out to be quite the project :)\n. Yeah I think I might do that, it'll make it easier to manage contributors and stuff.\n. Hey all, this is finally in progress! Currently the templates are pointing to the latest hash for angular-formly. The template repos as I have them are dependent on angular-formly, unlike the current standalone builds. I think that this structure allows for us to release extended templates like an [angular-bootstrap](https://github.com/angular-ui/bootstrap) template that can live side by side with the base template. I think this is a great setup, the only part I don't like is having to generate this file each time:\n\n```\nangular.module('formly.render').config(function(formlyConfigProvider) {\n    'use strict';\n    var fields = [\n        'textarea', 'radio', 'select', 'number', 'checkbox',\n        'password', 'hidden', 'email', 'text'\n    ];\n    angular.forEach(fields, function(field) {\n        formlyConfigProvider.setTemplateUrl(field, 'fields/formly-field-' + field + '.html');\n    });\n});\n```\n\nI feel like there might be a less verbose way of doing this, but I haven't thought of anything yet.\n\nNext I'll be removing templates from angular-formly, release angular-formly, then update the template repos and release them.\n\nHere are the repos:\nhttps://github.com/formly-js/angular-formly-templates-vanilla\nhttps://github.com/formly-js/angular-formly-templates-bootstrap\n. @kentcdodds sounds good. I'm going to leave it for now.\n\nTemplates are now removed from angular-formly. Final remaining thing is updating the docs in angular-formly to mention the other repos. I won't get to it today so if anyone else has time feel free.\n. All done and released\n. The current structure defined in the docs for defining options is: \n\n```\n {\n  \"name\": \"Walk\",\n  \"group\": \"low emissions\"\n}\n```\n\nWhat you're suggesting wouldn't work with this setup and breaks our current demo page. Are you proposing we change this? I could use a little info as to why and a maybe update the pull request with the full change. I should be able to look at this in more detail on Wed, but thats why I made that change initially, and it worked well for the demo as well as being backwards compatible.\n. Just reread #60 and I see you want both name and value there, I think this makes sense. It's probably ok to break the backwards compatibility, but we'll need to update the docs and demo.\n\n```\n{\n  \"name\": \"Yes, and I love it!\",\n  \"value\": \"yesyes\",\n  \"group\": \"positive vibes\"\n}\n```\n. That works for me, we'll get this update in to 0.1.0, and once the docs and stuff are updated.\n. If you have time to update the Readme and demo that would help.\n. Closing as duplicate of #80 \n. Ah sorry about that, thanks.\n\nOn Wed, Aug 27, 2014 at 8:33 AM, Kent C. Dodds notifications@github.com\nwrote:\n\n> ## Merged #81.\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/nimbly/angular-formly/pull/81#event-157929215\n. Is there any way you could resubmit this without the extra commits. It looks like you ran build, it would help keep our history cleaner. Looks like we only need `a57dce6`\n. Thanks!\n. Good catch!\n. Unlike many simple 3rd party directives, Formly does include it's own templates for the form and form fields. Since you're changing the symbol, those break. Any 3rd party directive you use that has its own templates and uses {{}} is going to break. As Kent mentioned we have a build with no templates at all, use this to get around the issue. You can copy all our templates if needed, but otherwise the templates are provided for convenience.\n. Working on the transfer today to create a dedicated Organization\n. Sure, we'll do the transfer but hold off on releasing a new version till thats ready?\n. We're going to be in limbo for a bit till our registration is transferred. Thankfully the old bower install still seems to work.\n\nSee:\nhttps://github.com/bower/bower/issues/120#issuecomment-57228439\n. thats cool with me\n. Regarding a nimbly page/package, I'll do that asap.\n. I checked and `formly` is already taken, any other ideas?\n. imho opinion the formly code is currently fairly language specific, it's light because we're not doing a whole lot of heavy lifting, just implementing some basic features of angular. For example angular specific directives that we wouldn't want to reimplement so they would all match in every library while cluttering up the angular version. I'd imagine that react doesn't have all the same features as angular and it would be quite a project to reach parody. I'm assuming the same can probably be said in the opposite direction.\n\nThat being said, it would be really cool to make progress on a specification which can be used by any flavor of formly or by others. I think the specification is the main component which would allow people to switch rendering libraries on the fly. Otherwise the code isn't that unique. Does anyone know if there is a json-form specification out there that I should have used already?\n. Jumping back on track here, how does formly-js sound? I think it's available...\n. ok, formly-js it is!\n. Alright we're live on bower using the same `angular-formly` but now pointing to the new org.\n. @quietlyconfident I originally built this app with the desire to use it to make a form building app alongside it. It would be really awesome to see that come to light.\n\nI'm sure that something similar could easily be built with this library or forked from theirs and adapted to our structure.\n. What version of Angular are you using?\n. This package might work with 1.3.0 but it is untested. Try the version specified in the bower dependencies or 1.2.23\n. We have 1.3.0 support in mind, but it probably wont be ready for a little while.\n. Please reopen if that doesn't fix it\n. Makes sense\n. Awesome, thanks\n. @kentcdodds are we skipping this for 1.0.0?\n. Sounds good\n\nOn Thu, Oct 2, 2014 at 6:28 PM, Kent C. Dodds notifications@github.com\nwrote:\n\n> ## @astrism, the entire build will need to change since we're splitting the templates out, so I'd say yes.\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/formly-js/angular-formly/pull/110#issuecomment-57738052\n. Sorry about that, the link was incorrect. We're in the middle of a org transition. It should be fixed now.\n\nhttp://formly-js.github.io/angular-formly/#!/\n. Can you put together a demo that shows what this would look like? I think you're suggesting that you want to group fields by type? I'm having trouble imagining how this would work in a real world scenario.\n. Hey @diegochavez can you please attempt to reproduce this in a plunker. We have a template here:\nhttp://plnkr.co/edit/tpl:1R3t4fvpXcJyiu96ICY5?p=preview\n\nMost likely it's not accessible because $rootScope methods aren't available to directives unless you inject $rootScope.\n. I believe you have 2 options to solve this.\n\nA) If the function can be different for every field, then pass it in as a property in formFields.\nhttp://plnkr.co/edit/giEUOrT5J16wuWcM68I3?p=preview\n\nB) Create a custom directive with it's own controller that can define this function or expose it to the template.\n. I see, those are currently required afaik:\nhttps://github.com/formly-js/angular-formly-templates-bootstrap/blob/master/src/fields/formly-field-select.html\n(See line 15)\n\n@kentcdodds Should we move these template-specific docs to the template repo? Seems they're a little out of date.\n. That being said, I'm fine merging this in, till then. What do you think @kentcdodds?\n. Updated the readme, ngmodules can't handle the youtube link or relative links but I fixed those. I also looked for a way to transfer/share ownership, doesn't seem to be one, but I think I can handle it for now. Alternatively I can delete the module so you can recreate it.\n. Also the repo/docs are looking great :clap: \n. ",
    "millette": "What about conditional forms? As if, if this is selected then show these inputs, otherwise show those inputs. Should I open another issue for that?\n. What about conditional forms? As if, if this is selected then show these inputs, otherwise show those inputs. Should I open another issue for that?\n. ",
    "marcusnielsen": "I did this for my own form generator for a pet project of mine: [EMMA Scoresheet](https://github.com/marcusnielsen/Emma.Scoresheet). I was just going to use formy and saw this issue and the original suggestion.\n\nBasically I take an array of inputs and calculate the number of columns they should get with \n\n```\nvar itemCount = formGroup.inputs.length;\nvar colsPerItem = 12 / itemCount;\n     if (colsPerItem < 4) {\n         return 4;\n     }\n return Math.floor(colsPerItem);\n```\n\nThen just use that in the template as following\n\n```\n<div class=\"col-md-{{getInputColWidth($parent.formGroup)}}\" data-ng-repeat=\"input in formGroup.inputs\">\n```\n\nIf we should be able to inject classes in formly, maybe some kind of function can be available for use in custom templates but keep the calculation for getting the column width. \n\nAlso the minimum limit of columns should be configurable with a default not hardcoded.\n\nWhat do you think? \n. Ng-if=\"vm.myObject.state.current === vm.states.VISIBLE\" would work. When\nyou call a trigger function just set the current state to the correct\nstring and it will show. I usually save a set of state constants to avoid\nrepeating strings.\nOn Dec 19, 2014 9:19 PM, \"acondiff\" notifications@github.com wrote:\n\n> Oh very nice! So my project might also require a field to be conditional\n> so that it shows or hides a whole section. Do you think this is even\n> possible?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/1#issuecomment-67691690\n> .\n. I did this for my own form generator for a pet project of mine: [EMMA Scoresheet](https://github.com/marcusnielsen/Emma.Scoresheet). I was just going to use formy and saw this issue and the original suggestion.\n\nBasically I take an array of inputs and calculate the number of columns they should get with \n\n```\nvar itemCount = formGroup.inputs.length;\nvar colsPerItem = 12 / itemCount;\n     if (colsPerItem < 4) {\n         return 4;\n     }\n return Math.floor(colsPerItem);\n```\n\nThen just use that in the template as following\n\n```\n<div class=\"col-md-{{getInputColWidth($parent.formGroup)}}\" data-ng-repeat=\"input in formGroup.inputs\">\n```\n\nIf we should be able to inject classes in formly, maybe some kind of function can be available for use in custom templates but keep the calculation for getting the column width. \n\nAlso the minimum limit of columns should be configurable with a default not hardcoded.\n\nWhat do you think? \n. Ng-if=\"vm.myObject.state.current === vm.states.VISIBLE\" would work. When\nyou call a trigger function just set the current state to the correct\nstring and it will show. I usually save a set of state constants to avoid\nrepeating strings.\nOn Dec 19, 2014 9:19 PM, \"acondiff\" notifications@github.com wrote:\n\n> Oh very nice! So my project might also require a field to be conditional\n> so that it shows or hides a whole section. Do you think this is even\n> possible?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/1#issuecomment-67691690\n> .\n. ",
    "austincondiff": "Has this ever been implemented? I am working on a project that this functionality would be necessary. \n. Oh very nice! So my project might also require a field to be conditional so that it shows or hides a whole section. Do you think this is even possible?\n. Has this ever been implemented? I am working on a project that this functionality would be necessary. \n. Oh very nice! So my project might also require a field to be conditional so that it shows or hides a whole section. Do you think this is even possible?\n. ",
    "kentcdodds": "I have developed a work around for my own project that does this. The basic idea is that you make directives out of all of your templates. Then you have another template that simply uses those directives and has something like this for it's options:\n\n``` javascript\n{\n  type: 'grouped-field',\n  data: {\n    fields: [\n      {\n        type: 'text',\n        label: 'First Name'\n      },\n      {\n        type: 'text',\n        label: 'Last Name'\n      }\n    ]\n  }\n}\n```\n\nThen, in the template for `grouped-field` you simply use the directives for the type you pass in and pass the options specified in `data.fields` Does that make sense?\n. I use a directive for double input:\n\naz-double-input.js\n\n``` javascript\n(function() {\n  'use strict';\n\n  angular.module('atac.common').directive('azDoubleInput', azDoubleInput);\n\n  function azDoubleInput(COMMON_DIRECTIVES) {\n    return {\n      restrict: 'E',\n      templateUrl: COMMON_DIRECTIVES + 'component/az-double-input.html',\n      scope: {\n        options: '=',\n        formId: '=',\n        index: '=',\n        result: '=',\n        form: '='\n      }\n    };\n  }\n})();\n```\n\naz-double-input.html\n\n``` html\n<div class=\"row\">\n  <az-formly-label></az-formly-label>\n  <div class=\"col-md-3\" style=\"padding:0 7px 0 0\">\n    <az-formly-input options=\"options.data.leftField\" result=\"result\" index=\"index\" form-id=\"formId\" form=\"form\"></az-formly-input>\n  </div>\n  <div class=\"col-md-3\" style=\"padding:0 0 0 7px\">\n    <az-formly-input options=\"options.data.rightField\" result=\"result\" index=\"index\" form-id=\"formId\" form=\"form\"></az-formly-input>\n  </div>\n</div>\n```\n\nWhere `az-formly-input` is the label-less directive version of my formly input template\n\nThe config uses `template` instead of type so I can use the directive (could easily turn this into a formly template via `setTemplate(...)`)\n\n``` javascript\n{\n  template: [\n    '<az-double-input options=\"options\" form-id=\"formId\" index=\"index\" result=\"result\" form=\"form\">',\n    '</az-double-input>'\n  ].join('')\n  data: {\n    leftField: {\n      key: 'firstName',\n      placeholder: 'First Name',\n      required: true\n    },\n    rightField: {\n      key: 'firstName',\n      placeholder: 'First Name',\n      required: true\n    }\n  }\n}\n```\n\nNote, some of the stuff you see in there (like `form`) are part of an abstraction I've added on top of formly that make my life easier. I'm hoping to take the work I've done in my own project and integrate it with formly before too long.\n. @vptcnt and @astrism, I'm going to go ahead and close this issue. If you think it's unresolved, please feel free to open it again and we can talk about what we're lacking.\n. In 0.1.0, we've removed the submit button from the form template entirely. This will not be supported.\n. How difficult would it be to add a `template` field as well? So it doesn't have to be in a whole other file?\n. I'm looking into it and I'm not sure of the best approach to take.\n\n~~I'm thinking that it would be best to add an `ng-hide=\"field.hide\"` to the `<formly-field ng-repeat...` in the `formly-form` template. Then, in the `formly-form` controller, when initializing the scope, iterate through the fields and add a `hide` property and add a watcher to the scope for each of the hide expressions. When that watch listener fires, set the `field.hide` property to the value of the expression.~~\n\n~~The trouble I'm having now is: How do we get the scope to evaluate the expression on (watch the expression). I've thought about adding it as another property to the `formField` but passing scopes around just feels wrong.~~\n\nJust came up with a much better simpler implementation. Prepare for a pull request...\n. Will get to this after the weekend. Thanks!\n- Kent C. Dodds\n  Sent from my mobile device, please forgive any errors or brevity. (I may\n  have used speech to text...)\n  On May 31, 2014 11:21 PM, \"Grant Helton\" notifications@github.com wrote:\n\n> This looks great, do you mind updating the newly minted docs as well.\n> Thanks!\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/nimbly/angular-formly/pull/17#issuecomment-44767982.\n. @astrism I need to run the build and commit those files as well correct?\n. Alright my changes are in, complete with updated README, bower version, CHANGELOG, and demo. Thanks!\n\nPerhaps eventually we could make it as simple as what I wanted to do (as illustrated by #16)...\n. I just found a better solution. Let me make another pull request and we can talk about it. It actually enables both options so I'll probably just include it in this PR. Give me just a second...\n. @astrism, let me know if you have any questions. But this seems to work quite nicely\n. Just throwing this out there... Would it be more performant if we put an `ng-change` on the `formly-field` directive? This way the watch listener is only executed when a change occurred and the watch expression is not evaluated.\n\nEither way, I don't see a way of getting around a dynamic form definition without doing things this way. And I imagine if this goes the direction you're wanting it to, you're going to have to loop through each field every time the result changes anyway. I think the solution you have above would work well... Let me know if you want me to change my pull request to reflect this.\n. @astrism, I would really love it if we could figure out what needs to happen for this to get merged today. I have another PR I'm creating in a little bit that I would like in, but I don't want to update the changelog for it because we'd have a merge conflict with this PR. Let me know what I need to do to get this in.\n. Nevermind on the grunt build merge conflict. I just remembered I didn't run grunt build because I didn't want to have merge conflicts :-) asap on these though please :-) Thanks!\n. Whoops. Accidentally closed this.\n\nI rebased master. Not sure if that's how I should have done this, may have been better to merge it. Anyway, if I need to recreate this whole pull request that's fine, let me know what I need to do to get this into the main repo and get the 0.0.10 tag on after this is merged in. Thanks!\n. Thanks @astrism :-)\n\nWould love some feedback from you. I've done a few PRs in the past, but I'd love to know if there's anything I can do to make this process easier for repo owners. Any feedback for me?\n. :+1: \n. :+1:\n. There are a few ways that you could implement it. You wouldn't be able to use any of the built in types. But you could add your own type with the `formlyTemplateProvider`'s [`setTemplateUrl`](https://github.com/nimbly/angular-formly#settemplateurl) function.\n\nHow I have implemented this kind of thing though is using the [`template`](https://github.com/nimbly/angular-formly#template-string) property. You create your own directive with the template of that directive being what you want the field to be. It has access to the options and value properties used in the other templates. And then in the directive's link function you can add functionality (like auto-complete). For example:\n\n``` javascript\nvar formFields = {\n  key: 'something',\n  template: '<some-awesome-directive></some-awesome-directive>'\n};\n\napp.directive('someAwesomeDirective', function() {\n  return {\n    template: '<div><!-- formly templatey stuff --></div>',\n    link: function(scope, el, attrs) {\n      scope.functionality = function() {\n        // do something awesome\n      }\n    }\n  };\n});\n```\n. I agree that getting `ngMessages` in would be cool. But I would be wary about including it because it's only supported in angular 1.3-beta right now (if I'm not mistaken). If support is added, it would probably be good to make it optional...\n. Thanks for the work on it. However I think that you're doing a lot of work unnecessarily. You have access to the `$error` property of the form fields via `options.formField.$error` in the template. Also, we want to make sure this is an opt-in thing because many people wont have the luxury of being on angular 1.3, so we need to make sure that it can work without the messages on the page.\n\nAnd one other thing, please make sure that your whitespace is following our project standard. Please use tabs (I know, I hate tabs too, but we need consistency). Thanks again for taking a stab at this!\n. Looks like you're doing that bit alright, but @astrism also asks that we tab and then space forward on continuation lines. It's @astrism's styleguide, I can't remember when I saw him specify that, but the rest of our project looks like it. If you want a sample, see [this line](https://github.com/idbaigorria/angular-formly/compare/nimbly:master...master#diff-b7832274c0b8f3a3397c1d9d613f1977L7).\n. Try this:\n\n``` javascript\nangular.element(document.getElementById('formlytext0')).scope().options.formField\n```\n\nIt works for me on [the demo](http://nimbly.github.io/angular-formly).\n. Really? Huh... Interested to see your PR! Thanks!\n. @abodacs, we haven't done any work to integrate the `ngMessages` module into formly core. But with where we are now, I don't believe it would make sense for it to go into the core project. It would make more sense for it to go into the template modules.\n\nI think that we're hoping to create a css framework agnostic module that would be for common template utilities and components. Integration with `ngMessages` would likely fit in well with something like that.\n. This is definitely a template-specific item. If you want support for `ngMessages` you'll need to implement templates that make use of them (using the `options.formControl` that formly adds to your template's scope) or submit a PR to the template library that you're using.\n. I'm interested in this as well...\n. +1, I don't have a use case because all of my stuff is custom templates, but I can definitely see people wanting this if they're using Bootstrap.\n. Where do you think this would be best implemented? Should there be another provider called `formlyConfigProvider` and have two providers to configure formly (`formlyTemplateProvider` as well)? Or should we combine these config options into a single `formlyConfigProvider`?\n\nI'm sad that the decision was made to create the `formlyTemplateProvider` instead of having it be more generically `formlyProvider`. Because now if we want to combine them, it's a breaking change... I'm probably the only one using the `formlyTemplateProvider` at this point though so that's probably fine... I'd like to hear your thoughts. I plan on implementing this today...\n. I'm implementing this now with a `formlyOptionsProvider`. It doesn't seem too bad...\n. @astrism, this is now closed, but you need to run the build to get the dist folder up to date...\n. Note: I didn't grunt build, so you'll have to do that yourself before you tag (if you tag at this commit)\n. As I was using this in my project, I noticed that if I didn't provide options, angular got angry at me, but now that I can configure all formly forms to have the options I want I no longer need the options attribute.\n. @astrism any word on this? I have another PR I'm getting ready to do and I want to be able to use master on my fork to do it...\n. Now that I think about it, it doesn't have anything to do with this one, I may submit it before. Thanks.\n. Fixed @astrism. Thanks!\n. +1 to this. Perhaps I'll create a PR (If you don't first @delaman ;D)\n. @astrism, I would recommend closing this issue. It's solved with the [`template` property](https://github.com/nimbly/angular-formly#template-string). Though we could enhance the [`formlyTemplateProvider`](https://github.com/nimbly/angular-formly#formlytemplateprovider) to have a `setTemplate` as well as a `setTemplateUrl`...\n. I've never used browserify, but I'm a node user and I'm curious how to make the library any more \"node friendly\" when everything is just inside an angular call (other than getting it registered in npm). Can't you simply: `require('angular-formly')` and the code would run? We don't have to have a `module.exports` if we're not exporting anything right?\n. Awesome. Well, I think this is one thing that we'll have to leave to the nimbly folks... It's their repo after all... @astrism? :+1: \n. @astrism, I think this is something you'll want to do yourself. You'll want to create the package.json the way you want (authors/desc/etc.) and then you'll want to be the one to publish it so you can be the one to republish it...\n. I think you'd want to just make your own templates for that. I don't think\nit is part of the mission of this library to cover every edge case. Just to\nmake those cases possible...\n- Kent C. Dodds\n  Sent from my mobile device, please forgive any errors or brevity. (I may\n  have used speech to text...)\n  On Jun 22, 2014 10:06 AM, \"testuserx\" notifications@github.com wrote:\n\n> Is there any possibility to style the \"formly\", for example to two columns\n> (each \"formly-field\" into separate \"td\")?\n> \n> This plugin is awesome, thank you!\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/nimbly/angular-formly/issues/36.\n. I'm not certain I understand what you're trying to accomplish...\n- Kent C. Dodds\n  Sent from my mobile device, please forgive any errors or brevity. (I may\n  have used speech to text...)\n  On Jun 22, 2014 11:01 AM, \"testuserx\" notifications@github.com wrote:\n\n> Of course, not :) I am just wondering how to style entire form. There is\n> possibility to style each element, using \"template\" or \"templateUrl\" in\n> JSON data, but no possibility to template entire form.\n> \n> If there are no built-in templating for entire form, how could it be\n> achieved? Thank you!\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/nimbly/angular-formly/issues/36#issuecomment-46786378\n> .\n. You could always make each of those columns it's own form. I've done the\nsame thing.\n- Kent C. Dodds\n  Sent from my mobile device, please forgive any errors or brevity. (I may\n  have used speech to text...)\n  On Jun 22, 2014 12:20 PM, \"testuserx\" notifications@github.com wrote:\n\n> I am creating JSON data with, for example, 10 fields. All these fields is\n> showing correctly one by one. Now I want to style position of these fields.\n> For example, show them in two columns. For example:\n> http://www.wpsnippet.com/wp-content/uploads/2012/02/form-after.png\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/nimbly/angular-formly/issues/36#issuecomment-46788447\n> .\n. With the current implementation this could be difficult. I think the simplest way to do this would be to change the `formly-form` template from an html file to a string returned by the `template` function in the `formly-form` directive. This would allow conditionally setting the attribute ng-hide or ng-if. I think this would be reasonable.\n. @astrism, I like all of the things you said. I'm not certain whether removing ng-hide would cause adverse impacts on people or not... But it seems to work fine in the demo.\n\nI also think we should keep it in an html file. But I don't know how to configure a specific form to have one directive (ng-if) and another to have another (ng-hide) without having two templates that are almost exact duplicates... I'd definitely get behind this effort.\n. What will have to happen for this is we'll have to store the configured default options in local storage like we do the custom templates thing if we want it to be customizable....\n. This would be a breaking change because anyone who uses a custom template would have to update their template's ng-model (for example).\n. Hmmm... Looking at it now I'm not certain of the best way to go about it. I'm thinking that it would be a diversion from how things currently work a little bit. Right now we just have a `result` object with all the values hanging off of it. If we were to do a `valueHolder` then we'd have to keep the `result.value` and the `valueHolder.value` in sync.\n\nOne thing that we could do that may not be a bad way to go about it would be to pass the result itself into the field directive. That may actually be extremely valuable and would be extremely simply to do... I may look into doing that. I'll submit a PR @astrism...\n. Not `result.value` but `result[options.key]` would work.\n. Moved this comment to #68 \n. I don't understand your question....\n. You could always `$watch` properties on the `result` object.\n\nHowever, I would recommend making your own template called `password-match` or something that would have two fields in it and set `value` to the password's value when they match. This way you can have more control over validation etc. Feel free to check out how I do field matching validation: http://kent.doddsfamily.us/kcd-angular/#/kcd-input-match (copied below)\n\n# kcd-input-match directive\n\n## Docs\n\nUseful for password and password confirmation input fields. Use like so:\n\n``` html\n<input ng-model=\"password\" type=\"password\" placeholder=\"Your password\">\n<input pk-input-match=\"{{password}}\" ng-model=\"password2\" type=\"password\" placeholder=\"Your password again (just in case)\">\n```\n\nThis will set the field's $error.match property to whether it matches the given value or not.\n\n## Code\n\n``` javascript\nangular.module('kcd.directives').directive('kcdInputMatch', function() {\n  'use strict';\n  return {\n    require: 'ngModel',\n    restrict: 'A',\n    link: function(scope, elem, attrs, ctrl) {\n      scope.$watch(function() {\n        return attrs.kcdInputMatch === ctrl.$modelValue;\n      }, function(currentValue) {\n        ctrl.$setValidity('match', currentValue);\n      });\n    }\n  };\n});\n```\n. I can't think of a way to make the built in templates generic enough to account for all the different ways to do i18n. I think if you rely on the template to do your i18n for you (through a filter for example) then you'll have to make your own templates. You can easily override the built in templates using the formlyTemplateProvider. See the readme.\n\nNote, another (more performant) option is to use the $filter service to generate your i18n strings and pass the label and placeholder through that when initializing the formly form. You wouldn't need to change the built in templates with this option.\n. It's available on the 0.0.12 branch. It's not yet released and the documentation for it should probably be in the 0.0.12 branch... You can point to [the most recent commit](https://github.com/nimbly/angular-formly/commit/cb3c8fc672b7ac46abc3a28f5dd37836c953f280).\n. @ilyagelman, is this working for you now?\n. :+1: that would be convenient. Would be a pretty simple PR if you want to try to take a whack at it. Just edit this file: `src/directives/formly-field-select.html` and make sure to follow the development [instructions](https://github.com/nimbly/angular-formly#development).\n. @inalgnu, where did you get on this?\n. Closing as it doesn't have anything to do with formly core anymore and I personally would just use `validators` for this anyway :-)\n. I can think of a way to get around this limitation, but I think a more appropriate solution would require a PR.\n\nWhat I'm thinking is in the [formly-field.js](https://github.com/nimbly/angular-formly/blob/master/src/directives/formly-field.js) we add a scope variable called `formResult` and in [formly-form.html](https://github.com/nimbly/angular-formly/blob/master/src/directives/formly-form.html) we pass the `result` object in as an argument. This way, all templates would have access to the whole form via the `formResult` variable on the scope. This would give field templates a lot more power.\n\nWhat do you think @astrism?\n. @gizmoboy this will be possible with #62. I was waiting on @astrism to review it, but I guess that's why he gave me commit privileges. I'll merge it now... merged... but it's still @astrism's responsibility to rebuild the project and publish it to npm and bower. However, you ought to be able to test it out by pointing to [this commit](https://github.com/nimbly/angular-formly/commit/2d8e76ea1636e8f2ff84cea03a9ac662b5a0d0f5) and using the non-built version of the js files. I'll leave this open until @astrism has a chance to rebuild and publish.\n. For some reason I am unable to claim the bounty on the website. Do you need to do something on your end?\n. I have merged this and run the build. Once it's published you can use a version, but until then you can point to [this commit](https://github.com/nimbly/angular-formly/commit/0241d1c13c11b9d723906482d6d7c1c1927c8170) and it should work just fine for you.\n. If I understand your use case correctly, then this is possible if you use the result object in your template. I'll have to play around with it, but we may need to update all templates to bind to the result rather than simply the value. That would be another issue altogether. I'll look into it and let you know...\n. Looking at your question again, I think I misunderstood the use case. Could you give me an example of what you're actually trying to accomplish?\n\nI [updated the demo](https://github.com/nimbly/angular-formly/commit/83474492b1b6569990bdc805210a19633d16d5b5) to use the results of one field in the template of another. You can see how this looks on [the demo](http://nimbly.github.io/angular-formly). Enter anything into the \"first name\" field and see how that is bound to the custom template field below. But, again, I don't think this is what you were going for...\n. So this is something that I did on a personal project. I used the same form for creating a post (for example) as I did for editing one. It's quite simple. Instead of using `default` you simply set the `result` object that you pass into fromly to have the values of your model. The `default` only takes effect when the `result` has no value. So, you probably have something like this:\n\n``` html\n<formly-form result=\"formData\" fields=\"formFields\" options=\"formOptions\" ng-submit=\"onSubmit()\"></formly-form>\n```\n\n``` javascript\n$scope.formData = {};\n$scope.formFields = [\n  {\n    key: 'firstName',\n    default: 'Kent C.',\n    type: 'text'\n  },\n  {\n    key: 'lastName',\n    default: 'Dodds',\n    type: 'text'\n  }\n];\n```\n\nInstead, what you want to do is:\n\n``` javascript\n$scope.formData = {\n  firstName: 'Kent C.',\n  lastName: 'Dodds'\n};\n$scope.formFields = [\n  {\n    key: 'firstName',\n    type: 'text'\n  },\n  {\n    key: 'lastName',\n    type: 'text'\n  }\n];\n```\n\nSo, instead of using the default, set the value of the result you pass in. Does that help?\n. Hmmm... On the top of my head I thought that would do it... Do they not? We may need to have a directive for selects to manage initial values like this then... I've been considering making a place for directive templates like this for use cases like this as well as the button group.\n. Why don't you create a new issue as this is different and this issue is closed. This will take a little work, but I'm pretty sure I know how I would implement it.\n. Why don't you create the issue, put $50 on it, then I'll look into it and suggest more if I feel like it'll take more time...\n. Duplicated here #121 \n. The repo exists. Just need to create the templates, build, and release. Moving discussion to [the repo](https://github.com/formly-js/angular-formly-templates-ionic)\n. Seems reasonable. I'd say we'd want to have another output file that ended in `no-tpls`, what do you think?\n\nEventually, there could be a use case to support templates for more than just bootstrap. We could do style-it-yourself templates where we add some classes to allow customizability, and we could have pure.css templates, and I'm sure there are more. But if we separated these out into their own folders, it would encourage the community to contribute templates for their favorite css libraries. Each of these libraries could have its own build. To do that right, I think that we'd have a breaking change to default to the no templates output and then a `{library}-tpls` file for each template type. What do you think?\n. Oh, that's interesting. Must have missed seeing that release. Cool. I like that even better actually. have formly.js include the templates, then have a formly.none.js, a formly.bootstrap.js, formly.pure.js, etc. etc.\n. Fixed with b962dd26a68c70c8e9d51f1f9a995d84b405e02e\n. Wow, this is awesome a11y for the win! I noticed that the formatting of some of the files is a little off. Could you fix that before it's merged in? Thanks for doing this!\n. Looks perfect. Thanks again for doing this @jonespen. Hopefully someone will merge this soon (I'm just a community contributor, so I can't merge it myself).\n. Could you give more details? What do you do that causes this error?\n. I wrote the code responsible for this bug most likely. I'll try to get to\nit as soon as I am able.\n- Kent C. Dodds\n  Sent from my mobile device, please forgive any errors or brevity. (I may\n  have used speech to text...)\n  On Aug 5, 2014 10:02 PM, \"rajhans84\" notifications@github.com wrote:\n\n> I have just added a form on my page and fields to it. App has following:\n> app =angular.module('myapp', ['ui.bootstrap',\n> 'ui.router','ngDialog','ngSanitize','angular-loading-bar','formly']);\n> $scope.formAddressFields =[{\n> template:\"\n> \n> ## Address +\n> \n> \",\n> key: \"address_begin\",\n> disabled: true\n> },\n> {\n> key: 'addresss-flatnumber',\n> type: 'text',\n> id:\"addresss-flatnumber\",\n> label: 'Flat Number',\n> required: false,\n> disabled: false,\n> hideExpression:'!asid',\n> watch: {\n> expression: function(field){return\n> scope.data.result.account.serviceLocation.streetSuffix;},\n> listener: function(field, _new) {\n> field.default = _new;\n> }\n> }\n> },\n> {\n> key: 'addresss-streetnumber',\n> type: 'text',\n> id:\"addresss-streetnumber\",\n> label: 'Street Number',\n> required: false,\n> disabled: false,\n> watch: {\n> expression: function(field){return\n> scope.data.result.account.serviceLocation.streetNumber;},\n> listener: function(field, _new) {\n> field.default = _new;\n> }\n> }\n> },\n> {\n> key: 'addresss-streetname',\n> type: 'text',\n> label: 'Street Name',\n> required: false,\n> disabled: false,\n> hideExpression:'!service_type',\n> watch: {\n> expression: function(field){return\n> scope.data.result.account.serviceLocation.streetName;},\n> listener: function(field, _new) {\n> field.default = _new;\n> }\n> }\n> },\n> {\n> key: 'addresss-streettype',\n> type: 'text',\n> label: 'Street Type',\n> required: false,\n> disabled: false,\n> \n> ```\n>     watch: {\n>         expression: function(field){return scope.data.result.account.serviceLocation.streetType;},\n>         listener: function(field, _new) {\n>             field.default = _new;\n>         }\n>     }\n> },\n> {\n>     key: 'addresss-leveltype',\n>     type: 'text',\n>     label: 'Level Type',\n>     required: false,\n>     disabled: false,\n>     watch: {\n>         expression: function(field){return scope.data.result.account.serviceLocation.buildingFloor;},\n>         listener: function(field, _new) {\n>             field.default = _new;\n>         }\n>     }\n> },\n> {\n>     key: 'addresss-buildingname',\n>     type: 'text',\n>     label: 'Building Name',\n>     required: false,\n>     disabled: false,\n>     watch: {\n>         expression: function(field){return scope.data.result.account.serviceLocation.buildingName;},\n>         listener: function(field, _new) {\n>             field.default = _new;\n>         }\n>     }\n> },\n> {\n>     key: 'addresss-suburb',\n>     type: 'text',\n>     label: 'Suburb',\n>     required: false,\n>     disabled: false,\n>     watch: {\n>         expression: function(field){return scope.data.result.account.serviceLocation.suburb;},\n>         listener: function(field, _new) {\n>             field.default = _new;\n>         }\n>     }\n> },\n> {\n>     key: 'addresss-city',\n>     type: 'text',\n>     label: 'City',\n>     required: false,\n>     disabled: false,\n>     watch: {\n>         expression: function(field){return scope.data.result.account.serviceLocation.city;},\n>         listener: function(field, _new) {\n>             field.default = _new;\n>         }\n>     }\n> },\n> {\n>     key: 'addresss-sitedirections',\n>     type: 'text',\n>     label: 'Site Directions',\n>     required: false,\n>     disabled: false,\n>     watch: {\n>         expression: function(field){return scope.data.result.account.serviceLocation.direction;},\n>         listener: function(field, _new) {\n>             field.default = _new;\n>         }\n>     }\n> },\n> {\n>     key: 'addresss-siteinstructions',\n>     type: 'text',\n>     label: 'Site Instructions',\n>     required: false,\n>     disabled: false\n> },\n> {\n>     key: 'addresss-sitewarnings',\n>     type: 'text',\n>     label: 'Site Warnings',\n>     required: false,\n>     disabled: false\n> }];\n> ```\n> \n> $scope.AddressOptions = {\n> uniqueFormId: 'address-section',\n> hideSubmit: true,\n> submitCopy: ''\n> };\n> $scope.formData = {};\n> Included file:\n> \n> But I can see the same error is coming on the demo page of the module :\n> http://nimbly.github.io/angular-formly/\n> I am using this form on ngDialog and when the dialog opens and tries to\n> render the form, the error comes.\n> I am doing nothing fancy but the simple stuff to get it working. I am\n> using firefox 31.0 on mac.\n> Let me know if more info is required.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/nimbly/angular-formly/issues/55#issuecomment-51291402\n> .\n. I think I have a solution, but I can't seem to reproduce the problem. But judging from the error message you're getting, I'd say that the issue is somehow a field has a watch object with no listener object. We should check that both an expression and listener are present on the watch object before creating the watch. I should have a fix soon, but I'm not certain how this issue is even happening...\n. Sorry, been off the planet for a day. @Rechtsproducten, what you did is how formly is designed to work actually. If you need functionality for your template beyond basic angular template stuff, then you simply create a directive. I actually generally will just us the `template` property for the formly config, but creating its own type works perfectly well also. Glad you got it working. If you like, I would love it if you could add a wiki article with how you solved the problem. That could help people in the future. Thanks a ton!\n. Interesting... If I go to [the demo](http://nimbly.github.io/angular-formly), it looks like radios are actually working as you expect it should, but the select is not...\n\n![screen shot 2014-08-12 at 11 38 55 am](https://cloud.githubusercontent.com/assets/1500684/3894786/2793d984-2248-11e4-94e2-41893788fa54.png)\n. Looks good to me. Thanks for doing this! @astrism will be in charge of updating the bower/npm packages.\n. Of course. I was worried about this when we broke out the templates, but I don't think there's really anything we can do about that... Thanks!\n. @gizmoboy, I've actually implemented a few of these custom templates for my own projects so I might be able to help with some of this. Some of these would definitely make sense in the library itself. Here's what I would recommend:\n\nCreate an issue for every feature you want in the library (non-proprietary stuff). Then use https://www.bountysource.com/ to place a bounty on the issue. Then anyone in the community can take it up if they want to piecemeal and I imagine you'll get most of the things you want pretty quickly.\n\nWhat do you think?\n. How important is the actual implementation you've described. Because what you've described may not necessarily be the exact best solution for what you're trying to accomplish based on what the library can do currently. Here's what I expect you need (implementation details aside):\n- A way to have a button bar with an option of single and multi-select\n- The value to indicate selection\n\nIs there more than this that you actually need?\n\nHere's my expected implementation:\n\nI'll definitely need to create a directive to handle this. Unfortunately a simple template wont be able to handle this well. Here's the interface for a `buttonbar`.\n\n``` javascript\n{\n    \"key\": \"triedEmber\",\n    \"type\": \"buttonbar\",\n    \"selectStyle\": \"SEE_BELOW\",\n    \"label\": \"Have you tried EmberJs yet?\",\n    \"default\": \"SEE_BELOW\",\n    \"options\": [\n        {\n            \"name\": \"Yes, and I love it!\",\n            \"value\": \"yesyes\"\n        },\n        {\n            \"name\": \"Yes, but I'm not a fan...\",\n            \"value\": \"yesno\"\n        },\n        {\n            \"name\": \"Nope\",\n            \"value\": \"no\"\n        }\n    ]\n}\n```\n\nThe `selectStyle` could be either `'single'` or `'multiple'`. This would determine what would be set as the value: a boolean for multiple with one options, an object for multiple with more than one option (where the keys are the property names and the value is true/false), and a single value for a single (which would be the value property of the option selected).\n\nThe `default` would simply be the initial value and the directive would handle converting that into what the view needs. If the result object provided already has a value, this default will be ignored.\n\nI think what I've described (including the implementation) is actually pretty well what you described, though we're not going to bring in a dependency on AngularStrap (partially because I'm not a fan of that particular library, and partially because I want to keep our dependencies down). Let me know if this isn't what you're looking for asap because I think I'm going to start working on this now...\n. Actually, I'm going to denote the `type` as `'buttongroup'` as this is what bootstrap calls it.\n. @gizmoboy, as this is going to take a little more time than expected and I don't have a use case for it myself, I've upped the bounty to where I think I would personally be sufficiently motivated to add this feature. Let me know if that works for you and I'll get into implementing it.\n. This has been added. You can see it in the demo in the form of a checkbox above the email field: http://nimbly.github.io/angular-formly\n. Would really like to seek out @astrism's guidance on this one. This is not possible without using some javascript whether it be bootstrap, Angular-UI Bootstrap, or AngularStrap.\n\nPersonally, I'd say we'd want to do a pure bootstrap implementation so we don't tie people down to angular-ui bootstrap or AngularStrap. However, in all of my personal projects, I don't even include bootstrap's javascript, I just use Angular-UI Bootstrap...\n\nAnother solution would be to implement it with both Angular-UI Bootstrap and AngularStrap and allow it to be configurable. Unfortunately, the directives for each library are slightly different so we'd have to have an additional template for each small variation... Though we could always try for either an ng-include or a directive for each template where the template property is a function that returns a configured template (between the two I like the later option)...\n\nLet me know what you think @astrism, but either way, without a use case of my own for this, and with the effort it would take to implement (however that's done) I don't think I'd have the time to do it at the current bounty...\n. I'm not certain that it's necessary to remove value entirely. I would recommend that people use the 'result[options.key]' for custom templates just to avoid isolateScope issues, but the templates we have currently work just fine using the value property. Is there a problem I'm unaware of? No reason to change it if it's working fine and logically...\n. :+1: \n. Everything that I've committed is good to go. I haven't noticed anything wrong with the demo. I think we're good to go. One thing I would say we should add to this project is a full test suite... That would be a bit of an effort. But it should be done.\n. I'd be happy to scaffold our test suite. I don't think that I have the time or use case to justify working on this effort a lot, but I could get us off the ground.\n. Hey @astrism, I'm planning on moving things around a little bit. I think it'll be really good. But I don't want to have merge conflicts. Are you planning on making any changes? I'd rather wait until after 0.0.15 and work off of that release to move all this stuff. When is that going to happen?\n. I'm going to create a test directory with a symbiotic link to src. I'm going move all the demo related stuff to a demo folder with a symbiotic to src. Annnnd... Yeah, that's it.\n. I've got a few minutes to look at it now. I'll look into it.\n. Someone recently made a change to that expression... Let me find their PR. I merged it. I guess I didn't test it well enough. Another case for tests ;-)\n. Yeah, it was #61. Is that what broke us?\n. I would say +1 on not using \"default\". May consider removing that @astrism... People should just load the `formlyData` with the default values in my opinion.\n. I was looking into it and found that it was a little simpler than I had originally supposed, so I fixed the demo example and removed the default option. You should be able to setup the form data for a select. Let me know if you have trouble.\n. I'm not sure how that could be happening. If you could make a jsbin to\nreproduce the issue, then I could help more.\n- Kent C. Dodds\n  Sent from my mobile device, please forgive any errors or brevity. (I may\n  have used speech to text...)\n  On Aug 29, 2014 4:00 PM, \"gizmoboy\" notifications@github.com wrote:\n\n> We're seeing some unusual behavior after this fix; we're passing in name\n> and value for our selects, and values seem to be getting replaced with\n> ordinal numbers. Is there a demo of how we should be setting the starting\n> value? Perhaps we're \"holding it wrong.\"\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/nimbly/angular-formly/issues/71#issuecomment-53935006\n> .\n. Whoops, because the symlink was called `bower_components` it was ignored via the `.gitignore`. I think I'm going to remove that from the git ignore. Another option would be to name the symlink different, but then it's a little confusing. Want to use the symlink so we can symlink the bower_components in the test directory as well...\n\nAnyway, what do you think about removing `bower_components` from the `.gitignore`?\n. Actually, I want to keep the `bower_components` out of the `src` directory because they're more like vendor files than part of our source. Let me know if you disagree. But I think what I'll do is I'll change the place bower installs components to `ignored_bower_components` and we'll ignore that directory, then we'll create a symlink in the `demo` folder called `bower_components` that points to `ignored_bower_components`. How does that sound?\n. Sorry, having them in src was a mistake (part of why you were unable to run the demo). I'm about to commit my proposed change, let me know what you think of it...\n. @astrism, I just updated the dependencies. Feel free to check it out and merge it. I'm going to go home and may look at it later tonight. Let me know if you have any problems with what I've done. You may want to look at the build...\n. @astrism looks like you have to setup travis-ci on this because I don't have admin access: https://travis-ci.org/profile/nimbly\n. We should add a build badge to the README\n. Awesome. Now we need to kick off a build. I'm not seeing any options to do that... Do you have that? It should have automatically built when you pushed the README file change....\n. Looks like it errored out on `bower install`...\n. That makes sense. Do you want to work on fixing that?\n. :+1: \n. Awesome! Now all we need are tests that make that build passing actually mean something valuable :-)\n. Thanks for the recommendation @mwawrusch. I've looked into it for other projects but never gotten it setup. I'll create another issue for it.\n. Closing this because we have ok test coverage and we're adding tests all the time. Travis is purring along as well :-)\n. Closed with 4a9df974ed847620b69b6f599c908ae9922c4cad.\n. Perhaps it could fit into the library... What kind of api do you think would make it generic and useful to others?\n. Correct me if I'm wrong, but I don't think @mwawrusch was talking about the length of text in an input but rather having multiples of the same input. Like a contact having multiple phone numbers. I'm thinking this would be difficult to generalize enough to support more than a single use case...\n. Yeah, I definitely believe it belongs in a standalone directive. Whether or not it's included in the library or not is another matter. I'm still on the fence on that one. @astrism?\n. Personally I'd like to see this implemented outside of the library before we think about bringing it in...\n. I like that. So @astrism, do you think that there should be a separate repo for angular-strap and ui-bootstrap templates altogether? I like the idea of having plugins. Thinking a separate repo for these seems appealing... Then you could install formly and the plugin you care about separately...\n. @mwawrusch, any progress on this? Is there any reason to keep this issue open?\n. I implemented something like this at work... Pretty simple. There are several ways to accomplish it based on your use case. I'll see if I can show an example sometime this week.\n. Ok, so I have some wicked abstractions on top of formly that make my life easier (hoping to bring them into some sort of generic formly template library eventually), but here's the meat of my multi-input template:\n\n``` html\n<div class=\"az-formly-multi-input\">\n  <div ng-class=\"{row: !$last}\" ng-repeat=\"item in result[options.key || index] track by $index\">\n    <az-formly-input class=\"no-padding\"\n                     ng-class=\"{'col-md-7': result[options.key || index].length > 1}\"\n                     options=\"options.data.inputOptions\"\n                     result=\"result[options.key || index]\"\n                     form=\"form\"\n                     index=\"$index\">\n    </az-formly-input>\n    <div class=\"col-md-5 plain-text\" ng-if=\"!$first\">\n      <az-action-link action=\"result[options.key || index].splice($index, 1)\">\n        <i class=\"fa fa-times\"></i> Remove Number\n      </az-action-link>\n    </div>\n  </div>\n</div>\n```\n\nWhere the `az-formly-input` directive is simply the directive version of my formly input field. Then, I have a control elsewhere to add a new item (which amounts to just pushing an item to the `result[options.key || index]` array), but it would be pretty simple to place that wherever depending on your use case. I use this template with formly via this config:\n\n``` javascript\n{\n  type: 'multi-input',\n  key: 'numbers',\n  data: {\n    inputOptions: {\n      required: true\n      // this is all the normal options you use for a formly field of type 'input'\n    }\n  }\n}\n```\n\nAs far as having sub-forms, this would actually be relatively simple as well. You'd simply have a formly template that uses a `formly-form` directive and then you'd pass in all the data the formly-form needs.\n\nAlternatively, you would just manage this yourself (which I think would be preferable). It just really depends on your use case. If you think there's a good generic implementation with a good api that you think would provide what most people are looking for out of this then let me know, but I'm thinking that it's definitely a case-by-case situation here.\n. That plunker is using a version of formly that doesn't have `field.runExpressions`, so I'm not sure I understand what you mean.\n\nEither way, I think this is probably not the best way to accomplish what you're trying to do. Perhaps a better approach would be to have something like this:\n\n``` html\n<formly-form ng-repeat=\"user in vm.users\" fields=\"::vm.getUserFields()\" result=\"user\">\n  <button ng-click=\"vm.users.splice($index, 1)\">Remove User</button>\n</formly-form>\n<button ng-click=\"vm.users.push({})\">Add User</button>\n```\n\nAnd then in the controller:\n\n``` javascript\nvar vm = this;\n\nvm.users = [];\nvm.getUserFields = getUserFields;\n\nfunction getUserFields() {\n  return [\n    {\n      key: 'firstName',\n      type: 'text',\n      label: 'First Name'\n    },\n    {\n      key: 'lastName',\n      type: 'text',\n      label: 'Last Name'\n    }\n  ];\n}\n```\n\nI think this approach makes the most sense. What do you think? If you think there's a way that formly could make this process simpler, I'm all ears. I want this to be as good if not better than the `angular-schema-form` module, so please let me know if you feel like it's lacking anything! :D\n. I'm still not certain that I understand the issue you're having. But I think that it may be related to the different contexts that expressions are evaluated under. `watchers` expressions evaluate with the form's scope, while `expressionProperties` and `validators` evaluate with the field's scope. See [this](https://github.com/formly-js/angular-formly#expressions) for more info and reasonings for why.\n\nCould that be the cause problem you're seeing? I've made the remove and add buttons function properly ([here](http://plnkr.co/edit/ZgNiWwAfBhmepkUyEoDk?p=preview)) and everything seems to be functioning as expected. Let me know.\n\nAs for the infinite digest loop, perhaps you could use `ng-init` to set `options.fields`. This would prevent both problems. I understand your desire to keep form fields coupled with the rest of the fields it is supposed to represent. I think the `ng-init` approach in your sub-form template is a good way to go. Perhaps I'll look into that as well. Seems like a pretty reasonable solution.\n\nAs far as an improved API, I looked more closely at the `angular-schema-form` API and I didn't really get much inspiration from it. Their api fairly complex and I see some serious weaknesses with it (there are some obvious strengths as well). Either way, it's wildly different from formly.\n. A hah, it wasn't working as I thought it was. Here is a functioning plunk I think: http://plnkr.co/edit/Tb3zEBkD0keF4YvH203z?p=preview\n\nIt's using `ng-init` and seems to work well. Let me know what you think.\n. I think I finally understand the issue now. I think I have a little more time to spend on this problem tonight. I'll get back to you as soon as I can.\n. Thanks for using formly! I am committed to formly as a vast majority of my projects require forms and formly simplifies my life immensely. I really want to make things even easier for everyone and I believe this sub-form concept is definitely a valuable use case to cover. When we're finished, hopefully we can get this into the template modules as well.\n. @kaylarose, Fixed! :facepunch: I switched over to jsbin because debugging angular in plunker is a bit of a pain. The issue was we actually were overwriting `options.fields` every time because `options` was referencing the upper field's options, not each form's options. Anyway, here's the solution. It's not too bad I think and it doesn't require a `getFields` function:\n\nhttp://jsbin.com/jaloz/2/edit?html,js\n. The :: is for one time binding introduced in angular 1.3. If you could post\nyour findings in the wiki, that would be awesome. Thanks!\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Dec 30, 2014 11:38 PM, \"Kayla Rose Hinz\" notifications@github.com\nwrote:\n\n> Nice find! I was thinking a copy of the whole fields would do it, but I\n> guess that scope inheritance was what was killing me. It's working as\n> expected now. I am going to be implementing a whole bunch of subforms,\n> nested subforms etc. over the next few days so will let you know if I run\n> into any other quirks, and will post any simplifications of the\n> template/example I come up with - in-case it's of use to anyone else.\n> \n> Tangential question: when you use ::foo in your example code - what is\n> that intended for?\n> \n> Thanks again for all your help.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/76#issuecomment-68426496\n> .\n. Closing this as we seem to have a working solution now. If anyone has objections, let me know.\n. This is an interesting idea... What do you think this would do to our development lifecycle? Would it complicate things to have to pull down multiple repos to make sure you didn't break something? Or should we just make sure we have a solid test suite?\n\nOne thing I like about this is that most of the issues reported on this repo are template related. It would be nice to make that clear separation... I'm leaning toward this idea...\n. I think that nimbly should create the bootstrap and vanilla repos. Then other people could create their own template \"plugin\" repos as needed. But we already have the templates for those so we should just keep those with nimbly. I don't think a new org is necessary.\n\nI think we should take the opportunity with 0.1.0 to break as much as we need to get things where we want them to be right now. I'm hoping that the core will change very little after this, which is why I like splitting out the templates. Those repos will likely change a lot more than this one.\n. I'm fine with that. nbd\n. Perhaps we could put that logic in formly-core? In the config provider just have a method called `setupNormalTemplates` or something and the template repos would have a config to do this? Just a thought.\n. Sweet glory! Thanks @astrism!\n. Done and done :+1: Thanks! This will inspire me to increase the coverage of the codebase. I'm sure it's pretty low right now considering I just started writing tests for it a few months ago :-/\n. Yeah, I use coveralls for [api-check](https://github.com/kentcdodds/apiCheck.js) (which fails if it has anything less than 100% code coverage :-D). Thanks for doing this. I think that I'm going to put some time into writing more tests to bring the coverage up before I add the badge to the readme though. It's a little embarrassing... I'll try to get that done asap. Thanks!\n. Closing this in favor of a single issue\n. I think that this library has a good setup for this... https://github.com/alianza-dev/angular-scope-types\n. Finally done!\n. Looks good to me. @astrism was the one who made changes in there recently, so I'll let him review this and verify it was a simple mistake and merge this fix in.\n. @antoinepairet, note, there will be a number of breaking changes in 0.1.0, so just be prepared to upgrade.\n. This wasn't a duplicate. This was the bootstrap version for the fix. Reopening and merging.\n. Looks like your formatting is incorrect there (spaces instead of tabs). I think we need to add jshint to our travis build.\n. :+1: \n. Sorry we sort of missed this one @antoinepairet, but looking at it again this is actually not how templates work. The `template` property is an actual string that is the template. If you want to specify a `templateUrl` then that's another property you can specify and we get that from the template cache.\n. Looks like a better direction to go would be to use [jscs](https://github.com/jscs-dev/node-jscs)\n. I would simply add:\n\n``` javascript\nvar stopWatching = $scope.$watch('formData.language', function(newValue) {\n  if (!newValue) {\n    return;\n  }\n  stopWatching();\n  // Move on\n});\n```\n\nRemember that the `formFields` keys are the values on `formData` so you can do this just fine.\n\nAnother option is to use the [`watch`](https://github.com/nimbly/angular-formly#watchexpression-object) property on fields. It's basically the same concept, except it provides you with the field as the first parameter so you have a little more flexibility if you need it. But I would recommend going the normal watch route first.\n\nAlso, I'm not crazy about the use of `$parent` in your template. Instead of that, you could do what we do in the example in [custom-template](https://github.com/nimbly/angular-formly/blob/master/demo/views/custom-template.html) and do:\n\n``` html\n<li ng-repeat=\"option in options.options\"><a class=\"button expand\" ng-click=\"result[options.key || index] = option.value;\" >{{option.name}}</a></li>\n```\n\nNotice you don't need to invoke `optionsData()` either as formly will take care of setup the `options` object on your scope for you.\n\nPlease close this issue if this resolves your concern.\n. I would say it's probably better to use custom templates. However, I'll\nlook into how difficult it would be to add input masks as a configuration\noption...\n\nKent C. Dodds\nhttps://twitter.com/kentcdodds\nhttps://plus.google.com/114245123507194646768  kent@doddsfamily.us\nhttp://www.linkedin.com/profile/view?id=67772537\nhttp://mormon.org/me/1J5N/Kent\n\nOn Sun, Aug 31, 2014 at 9:31 AM, gizmoboy notifications@github.com wrote:\n\n> We were wondering about fields like phone or currency or social security\n> number where there is a very specific format you want to permit, but\n> otherwise they are just strings.\n> \n> Would it make sense to extend the text field type to support input masks,\n> or is the best practice to create custom templates for each of these?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/nimbly/angular-formly/issues/88.\n. I've investigated this a little bit. Though it would be a nice feature of formly to provide this, I don't have the time to put in the effort it would provide to do it properly. I would really like an api like this:\n\n``` javascript\n{\n  key: 'phone',\n  type: 'text',\n  mask: '(999) 999-9999'\n}\n```\n\nHowever, to implement that and add validation, caret reposition, etc. I expect that would be a pretty significant effort and I don't have time on the side to work on it.\n. [Angular UI-Utils](https://github.com/angular-ui/ui-utils) has this functionality, however, I believe that I speak for @astrism when I say we would like to keep formly as dependency free as possible...\n. This is great! Thanks. I'll give it a look over soon and merge it in.\n- Kent C. Dodds\n  Sent from my mobile device, please forgive any errors or brevity. (I may\n  have used speech to text...)\n  On Sep 1, 2014 11:19 AM, \"gizmoboy\" notifications@github.com wrote:\n\n> An additional watcher on the Edit JSON button now pulls the current value\n> \n> ## of formData back into formDataStr for editing.\n> \n> You can merge this Pull Request by running\n> \n>   git pull https://github.com/gizmoboy/angular-formly master\n> \n> Or view, comment on, or merge it at:\n> \n>   https://github.com/nimbly/angular-formly/pull/90\n> Commit Summary\n> - Fixes #89. Watcher on the Edit JSON button pulls the current value\n>   of formData back into formDataStr for editing.\n> \n> File Changes\n> - _M_ demo/views/home.js\n>   https://github.com/nimbly/angular-formly/pull/90/files#diff-0 (28)\n> \n> Patch Links:\n> - https://github.com/nimbly/angular-formly/pull/90.patch\n> - https://github.com/nimbly/angular-formly/pull/90.diff\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/nimbly/angular-formly/pull/90.\n. This code doesn't follow our spacing style (we use tabs, that was not my decision...). Could you please make the necessary updates to use tabs instead of spaces?\n. Other than that this looks great. Thanks for doing this!\n. Thanks a bunch!\n. You probably have a really hard time with vendor libraries huh? :-/\n\nWe're not going to adjust the templates to support your use case. Here are a couple options you have (in order of recommendation):\n1. Don't render templates with Django. There are many reasons why you should just have your server act as purely a services layer and serve your static files (html, css, js) on a CDN.\n2. Just use `formly.min.js` instead of the templates and make your own templates. That stinks, I know, and I'm sorry that you have to render your stuff server side as well.\n\nGood luck to you!\n. Give me an example of a library that does support this so I can see how they did it.\n. You're right. Angular-UI Bootstrap is using `$interpolate` to [construct](https://github.com/angular-ui/bootstrap/blob/88e7851be705bb7f45fa5ea8107d8ded3b33f97b/ui-bootstrap-0.11.0.js#L2455) some of their templates. Not all of them though, for example, in [this plunker](http://plnkr.co/edit/lq6L1pjuY9aWjY85eKR5?p=preview) I don't know how the alert is working because it uses `{{ }}` in the `alert.html` template...\n\nI've gotten a hack working in [this plunker](http://plnkr.co/edit/ErFMMidyfbSmVop9fDQO?p=preview). If you look at `setElementTemplate` in the `formly-field` directive, around line 140, I've added a check for the start and end symbols and I do a replace for those in the templates.\n\nI think that this is the only reasonable solution. I don't expect this to really cause serious issues. It would not affect those not changing the symbols so I think that I'll put it in. I'll make a PR and I'll let @astrism look at it and merge it.\n\nThanks for not giving up on me @khasinski. Once again I'm reminded that I don't know everything...\n. It will go into master which is a little different from 0.0.16 (which you're likely using. You'll have to point your bower to the hash of the build commit to get the latest stuff. See [CHANGELOG.md](https://github.com/nimbly/angular-formly/blob/master/CHANGELOG.md#breaking-changes) to see the breaking changes. They should have fairly minimal impact on you as I expect you have very little integration with formly as it is.\n\nThe PR is coming in a few minutes, but I want @astrism to have a look at it before it's merged.\n. @khasinski, technically, you should be able to point to this hash and start using the fix right away: 79cdc6d231da0655ba2a29aab3bbcb52d5961431\n\nNote: I noticed that using `[[ ]]` broke one of the demo's custom templates. I didn't look too much into it because using a different start and end symbol fixed the issue just fine and because it's a custom template you'll have total control over it. I just thought you'd like to know you may have to work around some things.\n\nMay the force be with you :-)\n. :+1: @astrism \n. Here are the templates with the appropriate changes:\n- [vanilla](http://cl.ly/XLcu/download/formly-vanilla.zip)\n- [bootstrap](http://cl.ly/XLsB/download/formly-bootstrap.zip)\n. With version 0.0.16, the submit button works just the same as it always has. See [here](https://github.com/nimbly/angular-formly/tree/0.0.16#formlyoptionsprovider) for information on how to configure options for the submit button.\n\nIn master, things have been [changed](https://github.com/nimbly/angular-formly/blob/master/CHANGELOG.md#breaking-changes) around a bit where the formly-form doesn't have a submit button. This is leading up to our 0.1.0 update which will hopefully happen as soon as @astrism returns from his travels.\n\nIf you're running on master, then you'll benefit from looking at how the demo adds a submit button. If you're on 0.0.16 then I'm not certain what your issue is. If your developer made a custom build of formly I would recommend that you don't do that... Just let us know what was lacking from formly and we'll see what we can do to support your use cases...\n. Good plan. If we don't provide the proper apis, please let me know...\n. In 0.0.16, the ability to configure formly to use ng-if instead of ng-hide was implemented and the formly-form.html template was removed. This was an enhancement and not a breaking change.\n\nThe part of the template that checks hideSubmit is [here](https://github.com/nimbly/angular-formly/blob/0.0.16/src/directives/formly-form.js#L23). In the `compile` function below, the template is altered based on whether the form is supposed to use `ng-if`. Let me know if there's a bug in there that needs to be fixed.\n\nYou may also consider updating to master as this is the direction we're heading soon anyway. See [the changelog](https://github.com/nimbly/angular-formly/blob/master/CHANGELOG.md#breaking-changes) for the breaking changes your new developer will need to account for.\n. Hmmm... There may be some changes, but I believe the api should remain pretty stable. If you like, I'll make sure to let you know when there are any breaking changes. Honestly, I would recommend simply using the hash in your bower dependency so you don't get auto-upgraded.\n\nBut I believe the api should be consistent. However, one major change upcoming will be when we break formly away from the templates and break them out into separate repositories. This should be coming pretty soon and the dist folder for this repository will contain only formly.js and formly.min.js. You'll have to add a dependency on the template directory of your choice to get the built-in templates you enjoy now. \n\nI've created an issue (#94) where I'll post when things like this happen if you'd like to stay up to date.\n. I'm going to close this for now as the root issue was resolved.\n. We're still waiting on @astrism to split out the templates into their own repositories and transition this repository to be owned by the angular-formly org... Once that happens, we can probably get this released soon.\n. Before we push 1.0.0, could we implement this suggestion I make in [this comment](https://github.com/angular-formly/angular-formly/pull/110#discussion_r18169365) on #107?\n. Perfect\n- Kent C. Dodds\n  Sent from my mobile device, please forgive any errors or brevity. (I may\n  have used speech to text...)\n  On Sep 29, 2014 2:47 PM, \"Grant Helton\" notifications@github.com wrote:\n\n> Sure, we'll do the transfer but hold off on releasing a new version till\n> thats ready?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/angular-formly/angular-formly/issues/94#issuecomment-57227033\n> .\n. Noticed you got the repo transferred. Awesome. Perhaps you can create an angular-formly shell repo in nimbly for gh-pages. Even though [github.com/nimbly/angular-formly](https://github.com/nimbly/angular-formly) will forward to [github.com/angular-formly/angular-formly](https://github.com/angular-formly/angular-formly), the demo page http://nimbly.github.io/angular-formly/ does not forward.\n. As another note, I'm in the process of developing [react-formly](https://github.com/kentcdodds/react-formly). I'm thinking it may make sense to put it in the same org? Thoughts on this? What if we renamed the org to \"formly\" and the template repos had an `angular` or `react` prefix to the repo name??\n. Awesome, so I suggest the org name should be simply \"formly\" then we'd have:\n\nangular\n- angular-formly\n- angular-formly-templates-bootstrap\n- angular-formly-templates-vanilla\n\nreact\n- react-formly\n- react-formly-templates-bootstrap\n- react-formly-templates-vanilla\n\nYou can feel free to just worry about the angular repos for now I think. I'll create the react ones when they're ready.\n\nAre those names too verbose?\n. Hmmm.... Well, what do you think about the idea of creating a single JSON powered form solution to rule them all that just has adapters for other libraries/frameworks/etc.?\n. I know that Jason is doing that with angular-data right now. He's creating a more generic js-data in vanilla javascript and then creating hooks for angular/ember/backbone/react/etc... What if we did that for forms?\nWhat if we did js-forms?\n. Then we could work on abstracting out the pieces that rely on angular... Perhaps the core would be pretty minimal... This may not be necessary. Because we're pretty reliant on the framework currently. I wonder if it makes sense. But I'm tired of re-implementing things every time a new shiney framework comes along. Would be nice to just have a generic solution that could be adapted to the framework...\n. It would be really awesome if you could have the exact same data structure to control the form elements and swap out the view layer and everything would still work. That would be pretty amazing.\n. Valid point @gizmoboy, but unfortunately, there are compelling reasons to move to something like react. It's not just that it's shiney and new.\n. I'll let you decide what you want to do @astrism. Either way is fine with me.\n. Good point. I don't know what you could abstract. As far as a spec, I highly doubt there's a spec in existence. We could probably make our own...\n\nStarted this, got pulled off...\n\nhttps://github.com/angular-formly/angular-formly/wiki/JSON-Specification\n. That's fine with me.\n. Huzzah!\n\nKent C. Dodds\nhttps://twitter.com/kentcdodds\nhttps://plus.google.com/114245123507194646768  kent@doddsfamily.us\nhttp://www.linkedin.com/profile/view?id=67772537\nhttp://mormon.org/me/1J5N/Kent\n\nOn Thu, Oct 2, 2014 at 5:23 PM, Grant Helton notifications@github.com\nwrote:\n\n> Alright we're live on bower using the same angular-formly but now\n> pointing to the new org.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/94#issuecomment-57725955\n> .\n. Would love to create an alliance between the two libraries. Let's move this discussion to their repo: kelp404/angular-form-builder#50\n. FYI to any interested. Some [major updates](https://github.com/formly-js/angular-formly/compare/1.0.0...master) have been made since 1.0.0 was released. I believe it may be wise to cut a 2.0.0 before too long. @astrism and I plan to meet next month, we will likely be cutting the new version at that time (either that, or we'll release what we have now as 2.0.0 and make additional updates as 3.0.0).\n\nMy current project that relies heavily on formly is pointing to a SHA in it's bower.json for formly. I don't know if I'd necessarily recommend that for anyone else, but if you want to get all the sweet new api changes and improvements I recommend looking at your upgrade path by seeing [the changelog](https://github.com/formly-js/angular-formly/blob/master/CHANGELOG.md).\n. Made some [additional major changes](https://github.com/formly-js/angular-formly/compare/20f4ff7...8e33674) that will require (hopefully minor) find/replace changes in templates. The most notable (since I last mentioned it):\n- `watch` changed to `watcher`\n- `formly-form` attribute `name` changed to `form` to be more clear about what's going on.\n- Removed `options` from `formly-form`. The id of the form is now generated by formly.\n- Renaming `formField` to `formControl` - This will likely require the biggest change for your templates.\n- No longer expecting `options.key` for the `name` attribute of `ng-model` elements. Now expecting `id`. Also, formly will automatically attach the `formControl` to the `form` for each field that doesn't have `noFormControl: true`. A suppressible warning will be logged if the `formControl` cannot be found. This will also require some rework of your custom templates. The master branches of the bootstrap and vanilla templates have this update.\n\nI realize that some of these changes are pretty significant and may require a bit of work on people's part to get things working with the upcoming version of formly. But I believe that the api to formly is improved big time. Still a little more to do (especially with template utilities), but I believe we're headed in the right direction! Please keep feature requests coming!\n. Another big change today. Changing from the name `result` to `model`. This makes the purpose of the attribute more clear. This will be part of the 2.0.0 release coming soon (hopefully).\n. Anyone mind me closing this issue? Let me know and I'll reopen it.\n. Hmmm... I'm not sure I understand the complications you described. To get the most basic thing setup, see [this codepen](http://codepen.io/kentcdodds/pen/pytBf)\n. The \"controller as\" syntax is recommended, but not required. Glad you got it working.\n. I actually saw this bug this morning. I know what it is. It came in when I added validation. You have to give your form a name. I'll fix this bug later, but if you give your form a name that should solve the problem:\n\n``` html\n<formly-form name=\"formName\" result=\"formData\" fields=\"formFields\" options=\"formOptions\" ng-submit=\"onSubmit()\">\n</formly-form>\n```\n. Just realized that I pushed another build which may make this one have a merge issue. I guess this is why you don't build the project in a PR. I'll try to remove that commit from this PR.\n. We're not going to merge this in. If you want to use a different start and end symbol, you'll have to provide your own templates.\n. That's perfect. Thanks!\n. Good to have you back @astrism :-)\n. Looks awesome. I'll merge, then pull, build, and push, and redeploy. Thanks!\n. Awesome, if anyone needs this right now they can point to e3d165a72d6c4a9c56819c4c8d0c885cee34b490 in their bower and get this feature. Hopefully we'll be able to release a new version soon. Thanks for the help @manuelnaranjo!\n. Copied this to [the wki](https://github.com/nimbly/angular-formly/wiki/Code-Styleguide)\n. Yes, simply ensure that the object you pass into the result attribute has\nvalues and those will be the initial values.\n- Kent C. Dodds\n  Sent from my mobile device, please forgive any errors or brevity. (I may\n  have used speech to text...)\n  On Sep 15, 2014 8:15 AM, \"nicole chung\" notifications@github.com wrote:\n\n> Hi, my apologies in advance...not sure where to ask questions (couldn't\n> find an email contact).\n> \n> Is there a way to pre-populate the form with existing data? Wasn't sure\n> how to from reading the README.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/nimbly/angular-formly/issues/101.\n. Coolio. So, you're right, the `$error` property comes from angular's [Form Controller](https://docs.angularjs.org/api/ng/type/form.FormController#$error). You could glean more information using angular's [NgModelController's `$error`](https://docs.angularjs.org/api/ng/type/ngModel.NgModelController#$error). If a field template has an input with an `ng-model` that utilizes the `formly-dynamic-name` directive, then the field will have a `formField` which will have the `$error` populated by the `NgModelController`. You can get more fine grained information using this `formField`. All the built-in templates should have this currently.\nWe definitely appreciate the contributions!\n. Closing this issue for now. If you want to take a whack at it, that'd be awesome. Just trying to clean things up a bit.\n. Hmmm... Good point... I think instead we should use `$timeout`. I'll push a fix soon.\n. Yes, note that we're in the middle of releasing 1.0.0 so master is\ndifferent than what is released to bower. Please see the readme for the tag\nyou have installed.\n- Kent C. Dodds\n  Sent from my mobile device, please forgive any errors or brevity. (I may\n  have used speech to text...)\n  On Sep 16, 2014 1:44 AM, \"Ben Liu\" notifications@github.com wrote:\n\n> After I run commands:\n> bower cache clean\n> bower install angular-formly\n> \n> I haven't got the lastest version of angular-formly.\n> When I use the installed angular-formly in my index page, it shows error:\n> Unknown provider: formlyConfigProvider\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/nimbly/angular-formly/issues/105.\n. Hopefully soon. We're waiting to get the templates moved over to their own repositories and switch this repo to be owned by a [new org](https://github.com/angular-formly). Any progress on this @astrism?\n. Note, you can still use bower to install the latest code if you would like: http://stackoverflow.com/a/16951315/971592\n. You can't have a type and template. You can only have a type, template, _or_ templateUrl.\n\nCould you please fork [this plunker](http://plnkr.co/edit/1R3t4fvpXcJyiu96ICY5?p=preview) to reproduce the issue?\n. I'm not sure what you're trying to accomplish, but you can't put an ng-model on an li element. It simply doesn't work in that context. So this isn't a bug in angular-formly, but maybe I can help you accomplish what you're trying to do... Do you want the value to be an array of the selected checkboxes?\n. [Try this](http://plnkr.co/edit/AHkmbwBidjUbOe7xAClu?p=preview) Will that do what you want?\n. Then at that point you could simply add a watcher in the controller of your directive to watch for changes that would update the value, and manually update the value yourself (ie, not in the template).\n. Nice catch. That needs to be fixed. Thanks...\n\nWith regards to the submit button. This has been a breaking change. You now provide your own submit button via transclusion in the `formly-form` directive.\n. No, the reason for it is on the latest stuff, we created a templateless\nbuild. This became formly.js. On older versions (like what you have), the\nvanilla templates are in formly.js.\n- Kent C. Dodds\n  Sent from my mobile device, please forgive any errors or brevity. (I may\n  have used speech to text...)\n  On Sep 26, 2014 3:16 AM, \"Mikael Couzic\" notifications@github.com wrote:\n\n> I am using the latest version (0.0.16) of Formly with Bower, and I have a\n> problem.\n> \n> When I bower install, the folder angular-formly/dist/ contains :\n> - formly.bootstrap.js\n> - formly.js\n> \n> But it doesn't contain formly.vanilla.js\n> \n> So for the moment I am using this file :\n> https://github.com/nimbly/angular-formly/blob/master/dist/formly.vanilla.js\n> \n> I'm also wondering if it is related with issue #77\n> https://github.com/nimbly/angular-formly/issues/77\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/nimbly/angular-formly/issues/108.\n. Hi @micouz, trying to clean up old issues, is this resolved?\n. Sorry, meant to wait for you to respond before I closed it. Now I'll wait for you to respond before I reopen it :-)\n. The second argument to a `validator.validate` function is the `scope` which has a `result`. You can use that result to determine whether the input is valid based on other fields. https://github.com/nimbly/angular-formly#validators-objectarray\n. There is [an example](https://github.com/nimbly/angular-formly/blob/613995d0a2592df82acdab90d621db6dca56ab43/demo/views/home.js#L10).\n\nYou are correct. All the validators do currently is [add parsers to the ngModelCtrl](https://github.com/nimbly/angular-formly/blob/fae4a154befd1626cac3a13fb0a6a18fd738a551/src/common/directives/formly-custom-validation.js#L17) of a field. They have no concept of error messaging and they shouldn't. It should be the role of the template to display errors to the user.\n\nPerhaps we could add error messages to the templates as you see [here](https://github.com/nimbly/angular-formly/blob/76e31e2f614ebf1619098b25456bcb22da526fa5/demo/views/custom-template.html#L1), but that's definitely a template responsibility, not a formly core resopnsibility.\n. Having a function is not valid json. It becomes an object at that point... If you need valid json then you need to use an expression rather than a function. Something like this should do the same thing you were trying to do:\n\n``` javascript\n[\n    {\n        \"template\": \"<div><h3><b>Simple Title Goes Here</b></h3></div>\"\n    },\n    {\n        \"key\": \"sample\",\n        \"type\": \"text\",\n        \"label\": \"Simple user\",\n        \"validators\": [\n            {\n                \"name\": \"iAmSam\",\n                \"validate\": \"'sam'===value\"\n            }\n        ],\n        \"required\": false\n    }\n]\n```\n\nObviously, this isn't as complicated as what you're trying to accomplish, so your expression will be a little complex... Not sure why you need it to be 100% JSON, but it should be possible regardless, albeit a little ugly and long...\n. Here's an example expression referencing another field's value:\n\n``` javascript\n[\n    {\n        \"template\": \"<div><h3><b>Simple Title Goes Here</b></h3></div>\"\n    },\n    {\n        \"key\": \"otherSample\",\n        \"type\": \"text\"\n    },\n    {\n        \"key\": \"sample\",\n        \"type\": \"text\",\n        \"label\": \"Simple user\",\n        \"someOption\": \"awesomesauce\",\n        \"validators\": [\n            {\n                \"name\": \"iAmSam\",\n                \"validate\": \"results.otherSample === 'sweetness' && options.someOption === 'awesomesauce' && value === 'sam'\"\n            }\n        ],\n        \"required\": false\n    }\n]\n```\n\nDo you have a suggestion of how what you're trying to do could be supported better?\n. I can see how that solution could be done and I don't have a problem using `eval` with an opt-in type behavior on the validator (instead of `validate` it would be `dangerouslyValidate` or something). But just want to make sure that it's going to be useful to someone if we do.\n\nI'd probably make it so whatever is being \"dangerously validated\" would have the `scope` in scope of the function so it could be used. Here's an example of using the api that there could be:\n\n``` javascript\n[\n    {\n        \"template\": \"<div><h3><b>Simple Title Goes Here</b></h3></div>\"\n    },\n    {\n        \"key\": \"otherSample\",\n        \"type\": \"text\"\n    },\n    {\n        \"key\": \"sample\",\n        \"type\": \"text\",\n        \"label\": \"Simple user\",\n        \"someOption\": \"awesomesauce\",\n        \"validators\": [\n            {\n                \"name\": \"iAmSam\",\n                \"dangerouslyValidate\": \"(function() { var someCheck = results.otherSample.match(/^sweet.*ness$/g) && options.someOption.length > 3; if (someCheck) { return value.some(function(x) { return x.charCodeAt(0) > 100; }); } else { return value === 'sam'; } })();\"\n            }\n        ],\n        \"required\": false\n    }\n]\n```\n\nNotice that\n1. you can do more complex stuff (like if statements, regexes, and you could do loops) that you can't do with angular's $parse service.\n2. You have access to results, options, and value.\n3. You provide a self-invoking function\n\nWould this be a reasonable api?\n\nHere's an example implementation that works:\n\n``` javascript\nfunction evaluate(results, options, value, script) {\n  return eval(script);\n}\nvar dangerouslyValidate = \"(function() { var someCheck = results.otherSample.match(/^sweet.*ness$/g) && options.someOption.length > 3; if (someCheck) { return value.some(function(x) { return x.charCodeAt(0) > 100; }); } else { return value === 'sam'; } })();\";\nvar results = { otherSample: 'sweetness' };\nvar options = { someOption: 'lo' };\nvar value = 'sam';\nvar validates = evaluate(results, options, value, dangerouslyValidate);\nconsole.log(validates); // logs true\n```\n\nWould love @astrism to weigh in here.\n. @gizmoboy, sorry this was never implemented. Do you still need this functionality?\n. Closing this for now unless someone asks for this functionality again.\n. @4ware, you don't need to use a function to do that. You can easily do that using the string version of a [Formly Expression](http://docs.angular-formly.com/v6.10.1/docs/formly-expressions)\n. Nothing like this was ever added and I don't expect it ever will be. If you need to do regex that's already possible via a pattern. See the Mac Address configuration in [this example](http://angular-formly.com/#/example/advanced/validators). Also, you can get pretty far with putting complex logic on the client and referencing that logic in your config using [fieldTransforms](http://angular-formly.com/#/example/very-advanced/field-transform).\r\n\r\nGood luck.. Wow @acido69, you've uncovered a very serious issue in our build. Thanks a ton! I'll make a comment or two on some lines in the PR. If you could address those then I think we'll pull this in. Thanks again!\n. That's an awesome refactor. Thanks for doing that. We need to think about this in the context of us breaking out the templates into their own repositories now that the organization has been created and the repo has been moved over... I think we may want to hold on this one :-/\n. @astrism, the entire build will need to change since we're splitting the templates out, so I'd say yes.\n. Thanks for the PR. I believe the original issue has been fixed.\n. Please see the note in the first line under the [Documentation](https://github.com/formly-js/angular-formly#documentation)\n. That's not a valid expression unfortunately. The `$parse` service (used by `$compile` rejects it). You'd have to do something like this:\n\n``` javascript\ntemplate: '<div>Today\\'s date is {{ options.data.now | date:MM/dd/yyyy }}</div>',\ndata: {\n  now: new Date()\n}\n```\n\nAlternatively you could do that logic in a directive controller or something...\n. Please close this issue if this resolves your issue. Thanks!\n. I have no idea what this is all about... What do you want us to do?\n. I see... Sounds useful. I don't know if I have the time to work on it now\nthough...\n- Kent C. Dodds\n  Sent from my mobile device, please forgive any errors or brevity. (I may\n  have used speech to text...)\n  On Oct 6, 2014 2:36 PM, \"Erik Dykema\" notifications@github.com wrote:\n\n> Ha ha, mostly what I want you to do is consider and tell me what you\n> think. This is related to the \"integration with a form-builder\" discussion.\n> \n> To integrate with a form builder program, the form-builder will need to\n> create output in a format that the form-displaying program (angular formly)\n> can understand. Often, when this sort of thing is done, the pattern is to\n> develop a contract (e.g. API, schema, etc.) that both applications / layers\n> / etc. can depend on.\n> \n> I propose that this contract should be a JSON Schema\n> http://json-schema.org/ document, because then you could use an out of\n> the box schema validator on either the client side (e.g. tv4) or the server\n> side (e.g. a python / ruby package) to validate the \"form\" that has been\n> built by the form builder.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/114#issuecomment-58092964\n> .\n. There's the beginnings of a form schema specification [here](https://github.com/formly-js/angular-formly/wiki/JSON-Specification). It's a little difficult to generalize things because different formly components can require such different things, but I think most of the common stuff is there.\n. Could you be more specific of what you're trying to accomplish? I'm not\nsure what you mean. But I'm pretty sure that this module can do what ever\nit is your trying to do.\n- Kent C. Dodds\n  Sent from my mobile device, please forgive any errors or brevity. (I may\n  have used speech to text...)\n\nThanks for nice module!\n\nBut it's almost useless without having an opportunity to customize form's\nmarkup (not a single form field)\n\nFor example, how would one achieve a simple container for in the markup for\nthe fields of the same type?\n\nThanks in advance for you support, maybe i was just not so patient and\nthere is such a possibility.\n\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/formly-js/angular-formly/issues/115.\n. Feel free to use [this template](http://plnkr.co/edit/tpl:1R3t4fvpXcJyiu96ICY5?p=preview) to demonstrate what you're trying to do.\n. People are free to using the formly-field directive if they like. There's nothing stopping them. I still have no idea what you want us to do? What about the current API needs to change to accomplish what you're trying to do?\n. Yes, except it's even simpler:\n\n``` javascript\n{\n  template: '<hr />'\n}\n```\n\nThis \"just works\" because the way things work. It's more of a coincidence, but yeah, you can do that.\n. Going to close this for now, please re-open if it has not been resolved.\n. There is a limitation angular. There's no way to know when something has rendered. If you're trying to do this, there's probably a better way to accomplish what you're actually trying to accomplish. We could add a callback parameter to the link function, but this wouldn't be exactly what you're looking for... What are you trying to do?\n. Way cool. Thanks @nicolechung!\n. I'm fine with it. Personally, I prefer all my templates to be wrapped in a single div for consistency, but if someone wants to do this, that's fine with me.\n. Sounds fine to me!\n. Thanks for letting us know. I'll be able to fix this soon.\n. As in tomorrow probably...\n. @circlingthesun, could you show me where that line exists? I can't seem to find anywhere in the code that has the line `$scope.options.default`...\n\nIn fact, there's nowhere in the code at all that uses the keyword default. I'm guessing that you're using an older version of formly. I would recommend upgrading to the latest version (1.0.0 as of today).\n. There is no tutorial, but you can have Bootstrap as an example. It's actually quite simple. Actually, I just created a new templates repository [angular-formly-templates-foundation](https://github.com/formly-js/angular-formly-templates-foundation) that's basically a copy of the [angular-foundation-templates-bootstrap](https://github.com/formly-js/angular-formly-templates-bootstrap) repo. If you are willing and able, we'd love it if you could submit a PR to that to change the templates from bootstrap to foundation!\n\nThere's an [initial release](https://github.com/formly-js/angular-formly-templates-foundation/milestones/Initial%20Release) milestone on the repo with a few issues in it. You could do everyone a big favor by submitting a PR to close those issues and get that repo out the door if you can!\n. Closing this here to move discussion over to angular-formly-templates-foundation.\n. This is awesome, but it's outside formly's role. You could easily do this yourself just using formly.\n. If I get time @gladson, but I don't think I'll have time to create your app for you...\n. Just as a recommendation of an approach, you'd just have an ng-repeat on the models and pass that in to the result attribute.\n. Good luck! Let us know if you get it working and if there's anything the formly-js core can do to improve the api to make what you're trying to do simpler.\n. @psi-4ward, yes, this is not a problem for the core to solve. I have a project where I do something similar to this and all I do is have a separate form for each subform.\n. Here's an example. Obviously you'd need to style it yourself... http://plnkr.co/edit/fft0F5ZMtY3fOw6Js9hb?p=preview\n. Done :-)\n. Not certain off the top of my head. If you could [reproduce the issue](http://plnkr.co/edit/tpl:1R3t4fvpXcJyiu96ICY5?p=preview) then maybe I can figure out why this is happening. Thanks!\n. I added it. It's been in for a little bit. It should actually work on a formly-form so I'm not sure why it's not working for you. The directive itself is pretty simple (though it could be improved by using the compile function instead of a controller...). If you're using angular 1.3 then the [name attribute is interpolatable](https://github.com/angular/angular.js/commit/729c238e19ab27deff01448d79342ea53721bfed) and you wont need the directive anyway.\n\nThe reason it was added is for field validation. The only way to get validation on an `ng-model` is by putting a name attribute on the same element and for that element to be a child of a named form. Prior to 1.3, the name attribute couldn't be dynamic. So this directive was a work around to that.\n. I'm not sure what you mean by \"also _take_ local values\" can you explain what you mean?\n. I see. I'm thinking we'll want to rework the `formly-dynamic-name` directive a little bit to use the compile function instead of a a controller. I'm pretty busy at work right now but hopefully I will have some time soon to address this.\n. Until I get time to fix the root issue, one way you could work around it is by making sure that the forms on your page exist on separate scopes. That way you can give them each a hard coded name and not worry about collisions. In my project I have a directive that wraps formly so I can abstract away the dependency and have some good defaults. You could do the same. If you need a reference to the form, then you can add that as a doubly bound attribute and \"pass it back\" in that way.\n\nThis is my implementation of this (note, I'm using controller as syntax, if you're not familiar with that then Todd Motto has [a good explanation](http://toddmotto.com/digging-into-angulars-controller-as-syntax/):\n\n``` javascript\n// az-form.js\n\nangular.module('atac.common').directive('azForm', function azFormDirective(COMMON_URL, _) {\n  'use strict';\n  return {\n    restrict: 'E',\n    templateUrl: COMMON_URL + 'directives/components/az-form.html',\n    scope: {\n      form: '=?',\n      result: '=',\n      fields: '=',\n      formId: '@',\n      onSubmit: '&'\n    },\n    transclude: true,\n    bindToController: true,\n    controllerAs: 'vm',\n    controller: function() {\n      var vm = this;\n      vm.id = vm.formId || (vm.result || {}).id || Math.random() * 999999;\n      vm.describedFields = _.filter(vm.fields, function(item) {\n        return item.hasOwnProperty('description');\n      });\n    },\n    link: function(scope, el, attrs) {\n      if (attrs.hasOwnProperty('form')) {\n        var stopWatching = scope.$watch('azForm', function(form) {\n          if (angular.isDefined(form)) {\n            stopWatching();\n            scope.vm.form = form;\n          }\n        });\n      }\n    }\n  };\n});\n```\n\n``` html\n<!-- az-form.html -->\n<formly-form name=\"azForm\"\n             novalidate\n             result=\"vm.result\"\n             fields=\"vm.fields\"\n             options=\"::{uniqueFormId: vm.id}\"\n             class=\"space-inputs\"\n             ng-submit=\"vm.onSubmit(result)\">\n  <div class=\"col-md-9 col-md-offset-3 text-muted margin-top5 margin-bottom15\" ng-if=\"vm.describedFields.length\">\n    <div ng-repeat=\"field in ::vm.describedFields\">{{field.description}}</div>\n  </div>\n  <ng-transclude></ng-transclude>\n</formly-form>\n```\n\nThen I have one place where I use it like so:\n\n``` html\n<az-form result=\"vm.userInfo\"\n         form=\"vm.userFormRef\"\n         fields=\"vm.formFields\"\n         on-submit=\"vm.login(vm.userInfo)\">\n  <div class=\"action-buttons col-md-offset-9 col-md-3\">\n    <button type=\"submit\"\n            ng-disabled=\"vm.userFormRef.$invalid\"\n            class=\"btn btn-primary az-btn\"\n            az-loading-button=\"vm.loggingIn\">\n      Sign In\n    </button>\n  </div>\n</az-form>\n```\n\nI hope this helps.\n. FYI @kbdaitch, the current version of formly in master has a breaking change that may impact you so I thought I'd let you know. Instead of using the `form` tag, formly now uses `ng-form` which doesn't work with `ng-submit` or submit the form with a `button[type=\"submit\"]`. This is truly unfortunate and kinda lame, however it allows you to nest forms properly (as HTML doesn't actually allow you to nest form elements).\n\nIf you really want ng-submit and submit buttons to work for you, I feel you. So much that I made it work anyway. Here's what I did, maybe you can benefit:\n\n``` javascript\n(function() {\n  'use strict';\n\n  angular.module('atac.common').directive('ngForm', ngForm);\n\n  function ngForm(_) {\n    return {\n      restrict: 'E',\n      link: function(scope, element, attrs) {\n        var ngForm = scope.$eval(attrs.name);\n        if (ngForm) {\n          ngForm.azSubmit = function() { // <-- named azSubmit because az is my app's prefix\n            if (ngForm.$invalid) {\n              return;\n            }\n            var context = scope;\n            if (attrs.hasOwnProperty('submitFormOnParent')) {\n              context = scope.$parent;\n            }\n            ngForm.azSubmitting = context.$eval(attrs.ngSubmit);\n            scope.$safeApply(); // <-- you'll need to implement this\n            return ngForm.azSubmitting;\n          };\n          element.on('keyup', function(event) {\n            if (event.which === 13 && attrs.ngSubmit) {\n              ngForm.azSubmit();\n            }\n          });\n          var submitButton = element.find('[type=submit]');\n          if (submitButton.length === 1) {\n            submitButton.on('keyup', function(event) {\n              if (event.which === 32 || event.which === 13) {\n                ngForm.azSubmit();\n              }\n            });\n            submitButton.on('click', function(event) {\n              ngForm.azSubmit();\n            });\n          } else if (!_.isEmpty(submitButton)) {\n            throw new Error('Forms should only have one submit button');\n          }\n        }\n      }\n    };\n  }\n})();\n```\n\nHope that's helpful when you decide to upgrade formly when we cut 2.0.\n. That approach sounds fine to me. @gizmoboy has done some interesting things with dynamic data in formly. Perhaps he has some tips...\n. Coming back through some issues. Reading this again, I think I misunderstood the question. If you want to pre-populate a form with values, you simply need to set values on the model. The form is a reflection of the current state of the model (aka `result`). So, if I had:\n\n``` html\n<formly-form result=\"user\" fields=\"fields\"></formly-form>\n```\n\n``` javascript\n$scope.fields = [\n  { type: 'text', key: 'firstName' }\n];\n```\n\nthen all I would have to do to pre-populate the form with some default value would be\n\n``` javascript\n$scope.user = {\n  firstName: 'Grant'\n};\n```\n\nDoes this make sense/cover your use case?\n. Closing this issue for now because inactivity.\n. Closed via 4b44e60603ef94947ca44dcc8d82094d1981f719\n. See [this plunker](http://plnkr.co/edit/fft0F5ZMtY3fOw6Js9hb?p=preview). It's quite simple.\n\n``` html\n<div>\n  {{options.label}}\n  <input ng-model=\"result[options.key]\" type=\"date\" />\n</div>\n```\n\nThen style it however you wish...\n. The new wrapper functionality makes this a much better experience. I don't know if we can quite get to where I was hoping for this one, but we're in a pretty good place I think!\n. Thank you. This is great news that it'll be fixed (hopefully) in 1.3.4 :-)\n. :clap: \n. Hi @sucheendra, the best way to get help is to follow the instructions here: http://help.angular-formly.com\n\nFor your first question, you'll simply set the `type` property in `templateOptions` to `number` and that should do it for you.\n\nFor your second question, please go to that help link and create an example of what you mean.\n. This can be accomplished by specifying a model for the field like so:\n\n``` js\n$scope.foobar = {\n  foo: {\n    bar: 'hello'\n  }\n};\n$scope.fields = [{\n  model: $scope.foobar.foo,\n  key: 'bar'\n}];\n```\n\n``` html\n<formly-form result=\"foobar\" fields=\"fields\" />\n```\n\nThis is supported as of 9f10f57e99ed5100f49f9eec48e5a051cfe60bfe\n. Done\n. FYI @astrism.\n. Hmmm... I just looked at the demo and it seems to work fine for me... @astrism?\n. Oh, understood. I'd rather just pull the template specific information out of the docs (see #133)\n. We moved all this info to the template docs.\n. Good feedback. I have accomplished this with my own set of field types. It's fairly simple. We have thought about making a repo for generic templates like this one. Stay tuned.\n. Another easy way to do this is to simply have two forms.\n. Totally. I don't know what the process is like, but these variations would be awesome:\n- latest: https://github.com/formly-js/angular-formly/blob/master/dist/formly.js\n- stable: https://github.com/formly-js/angular-formly/blob/1.0.0/dist/formly.js\n\n@astrism will be releasing 2.0.0 soon, would be good to get that on cdnjs as well. At that time, 2.0.0 would be `stable` and 1.0.0 would be `legacy`.\n\nIs it possible to have CDNJS pull from master to get latest anytime there's a commit to latest? If not, then there's no reason to have latest. Thanks.\n. Understood.\n. Hi @snimavat, could you please provide a link to a jsbin that demonstrates the issue (clone [this template](http://jsbin.com/biqesi/edit)). I use controller as in all of my projects and things work just fine for me so if I see what you're doing I'm sure I can identify what the problem is.\n. By putting the `name` attribute on the `formly-form`, the form controller is bound to the isolate scope of the `formly-form` directive. You'll want to place it on the surrounding form element like so:\n\nhttp://jsbin.com/qubozo/1/edit?html,js,output\n. Please close this issue if it is resolved.\n. You're right. I'll take another q look at this when I get the chance.\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Dec 31, 2014 1:17 AM, \"Sudhir Nimavat\" notifications@github.com wrote:\n\n> So, i need a parent form to achieve this,\n> \n> I am surprised, what does this mean in formly-form directive then\n> scope: {\n> formOnParentScope: '=name'\n> }\n> \n> ```\n> compile: function () {\n>     return {\n>         post: function (scope, ele, attr) {\n>             //Post gets called after angular has created the FormController\n>             //Now pass the FormController back up to the parent scope\n>             scope.formOnParentScope = $parse(attr.name)(scope);\n>         }\n>     };\n> },\n> ```\n> \n> Isnt it intended to set form controller on parent scope ?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/139#issuecomment-68429423\n> .\n. Ok, I figured out how I got around this. I believe the issue is how the name property is evaluated on the isolate scope of `formly-form` with controller as and some inheritance issues. Here's the work around:\n\nhttp://jsbin.com/kiwoda/edit\n\nI think we're going to add `form` as an attribute to the `formly-form` directive api so you will be able to avoid this dumb work-around.\n. Verified. If you look at this clone of your original jsbin, it's working as expected. Was a simple fix. Thanks!\n\nhttp://jsbin.com/yunitu/1\n\nNote, we have yet to cut a new version of formly, so to get this fix, you'll have to use master.\n. I believe the new version should work with 1.2.x still. If it doesn't, it's a bug and should be fixed. Let me know. Thanks! Also, I highly recommend you look into upgrading to 1.3. You're missing a lot of really great stuff.\n. I should let you know that I just pushed a breaking change to master. You may want to try pointing to 2c5aa42, or update your stuff to use `form` instead of `name` for that attribute. Good luck!\n. Hi @ShMcK, you've been invited to be a team member on the formly-js templates team. Could you follow [these instructions](https://help.github.com/articles/transferring-a-repository/) on how to make the transfer? Thanks! :D And welcome aboard :D\n. Gave you amin rights. Try again :-)\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Jan 15, 2015 9:06 PM, \"ShMcK\" notifications@github.com wrote:\n\n> Unfortunately, transferring fails with \"You don't have admin rights to\n> formly-js\".\n> \n> Option A is to (temporarily) change group permissions to grant me admin\n> rights for the repo. You can find repo permissions explained here\n> https://help.github.com/articles/permission-levels-for-an-organization-repository/\n> .\n> \n> Option B is to transfer the account to a specific user, in which case:\n> either yourself or astrism.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/140#issuecomment-70205761\n> .\n. Awesome! Thanks again for your awesome work!\n. This is finished. Just need to add more examples.\n. Please be more specific with what you're trying to accomplish. We do [add classes](https://github.com/formly-js/angular-formly#css-classes) to `formly-forms` and `formly-fields`. What do you want to have an `ng-class` on? If you need it on the templates, which template library are you using, bootstrap or vanilla? What version of angular-formly are you using?\n. @rahil471, have you resolved your issue?\n. Yes, angular-fromly adds the name attribute for you and binds a form attribute for you to alleviate confusion. So, you'd do this instead:\n\n``` html\n<formly-form form=\"activateSimForm\" model=\"simModel\" fields=\"simFields\"></formly-form>\n```\n\nIf that doesn't solve your issue, please open a new issue :-)\n. I would recommend doing something like this:\n\n``` html\n<form ng-submit=\"submit()\"\n  <formly-form model=\"vm.user\" fields=\"vm.mainFields\"></formly-form>\n  <div class=\"sub-panel\">\n    <formly-form model=\"vm.user\" fields=\"vm.subFields\"></formly-form>\n  </div>\n  <button type=\"submit\">Submit</button>\n</form>\n```\n\nand then your controller would look like this (using controller as)\n\n``` javascript\nvar vm = this;\n\nvm.user = {};\nvm.mainFields = [ /* your main field config here */ ];\nvm.subFields = [ /* your sub field config here */ ];\n```\n\nDoes that solve your issue?\n. I'm not sure I understand your question. What do you mean?\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Jan 7, 2015 1:14 PM, \"abodacs\" notifications@github.com wrote:\n\n> How to implement multi forms every form with its submit button?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/146.\n. I'm still not certain what your use case is. So, you want to be able to\ncreate/edit using the same form fields? This is easily done by providing\nthe right `model`. For \"create\" just provide an empty model (`{}`), for\n\"edit\" provide the model you're trying to edit.\n\nKent C. Dodds\nhttps://twitter.com/kentcdodds\nhttps://plus.google.com/114245123507194646768  kent@doddsfamily.us\nhttp://www.linkedin.com/profile/view?id=67772537\nhttp://mormon.org/me/1J5N/Kent\n\nOn Wed, Jan 7, 2015 at 1:31 PM, abodacs notifications@github.com wrote:\n\n> first Thanks for this greet work\n> i have use case a user can enter new form or edit previous entered forms\n> in same page.\n> Previous forms loaded as timeline style to edit\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/146#issuecomment-69086867\n> .\n. Yeah, you're going to need custom templates for those. For the multi-small-form stuff, I would recommend what we ended up doing in #76 [here](http://jsbin.com/jaloz/edit). For multi-select, you'll have to come up with something on your own, though I know there are several libraries that claim to do this quite easily. For file upload, you'll need to create your own template to do this. I recommend using a directive similar to the `exampleSubform` in the multi-small-form example so you can add a controller to do the actual upload. Good luck!\n. @abodacs, have you resolved your issue?\n. Thanks! I'm not sure what you're asking about. Are you talking about [json-schema.org](http://json-schema.org/)? I have no experience with that, but you're not the first to ask about this. #114 is about the same thing I believe. Could you explain what benefits we'd get from this. And how do you envision this being included?\n. Just to confirm, by\n\n> You (the Formly maintainer(s)) can use other validators (like TV4) to do the validation and not write/maintain validation related code.\n\nyou're talking about use validating the field configuration to verify that it is correct? So we can warn the developer when they provide a config that is incorrect.\n. I apologize. I've never had any experience with JSON Schemas. So please understand if I just don't get it. But if I understand you correctly, you're saying that the FDD could validate the model which to me doesn't make any sense. The FDD describes the fields that represent the model. They do have a `validators` property, but that's a JavaScript/angular specific thing.\n\nOne thing that might make sense is to add a `schema` property to the field config that allows you to use a JSON Schema validator to validate the model. This would be in lieu of `validators` but would behave just like `validators` in that it would `$setValidity` for the `NgModelController` based on whether the schema validation passed. Would this be a good api to accomplish what you're talking about?\n\nBy the way, sorry I closed #114... I should have pursued it further or at least asked you before closing it.\n. This is very interesting. I think I'm finally getting it :laughing:\n\nSo, I'm thinking to enable this, we'd do something like this:\n\n``` javascript\nangular.module('yourModule').config(function(formlyConfigProvider) {\n  formlyConfigProvider.schemaValidator(function(data, schema) {\n    var invalidValidators = validateSchema(data, schema);\n    return !invalidValidators.length ? true : invalidValidators;\n  });\n});\n```\n\nWhere `invalidValidators` would be something like:\n\n``` json\n[\"required\", \"maxLength\"]\n```\n\nAnd formly would take the `invalidValidators` and apply it to the `NgModelController` via `$setValidity` and you could use it with `ngMessages` like so:\n\n``` html\n<div ng-messages=\"options.formControl.$error\">\n  <div ng-message=\"required\">This field is required</div>\n  <div ng-message=\"maxLength\">Input too long</div>\n</div>\n```\n\nDo you think this would be acceptable? Do you think that I'm missing anything?\n. And of course that `validateSchema` function would likely call into [tv4](https://github.com/geraintluff/tv4) or something similar, but I don't want to include that library in formly. I'd like people to bring in whatever they'd like. Oh, and the `schemaValidator` function would be called anytime a field's model changed (based on a `$watch`). What do you think?\n. Oh, and just to be clear. `schema` is the FDD for the field and data is the model for the field (this would be `field.model` `||` what is passed to `formly-form`). Would that work?\n. That's a significant departure from the current API. It's also a little more complicated api as well. The simplicity of `angular-formly` is one of its strong points. I don't think that we want to change the default api to do this...\n\nHowever, I can definitely see the value. I think we may be able to detect that the given fields are a schema and generate the fields from the schema. So we'd do something like this:\n\n``` js\nvm.model = { /* your model here */ };\nvm.schema = { /* your schema here */ };\nvm.fields = {}; // set just so we have reference to it in our javascript\n```\n\n``` html\n<formly-form model=\"vm.model\" schema=\"vm.schema\" fields=\"vm.fields\"></formly-form>\n```\n\nThen, formly would generate the fields based on the schema and assign it to your `vm.fields` and it would invoke the `schemaValidator` function with the schema as described above any time the model changed.\n\nI believe that the schema you recommended would be converted to something like this:\n\n``` js\n[\n  {\n    key: 'name', // property name\n    hide: false, // !defaultVisible\n    label: 'Name', // title\n    description: 'Your name...' // use placeholder if you want a placeholder\n    required: true // from required array\n    data: {\n      // anything that's not part of the JSON specification will go in here\n      maxLength: 60\n    }\n  },\n  { /* etc. */ }\n]\n```\n\nPlease note, this does not at all change formly's default api. It may also make things a little tricky to do anything creative if you do things this way. I'm also not promising that this would actually be possible. But I believe it should be.\n. Would love help in the branch I started out. I'm not very familiar with this. I've pushed the 2.0.0 release anyway. We'll add this in a future version.\n. I think this should be part of a plugin, so I've created a new repo for that plugin. Anyone is welcome to implement it. https://github.com/formly-js/angular-formly-json-schema/issues/1\n. First of all, you're very welcome :+1: Glad you've found it useful!\n\nI'm not able to reproduce any issue whatsoever. No matter how much I change and move around, the field disappears when `type` is not equal to `1` which is the condition...\n. I'm changing everything I can. Here's what I see: http://cl.ly/3047330u1V19\n. So you're saying that when `form2` is selected, you want `type === 1` to show the text field and when `form1` is selected, you want `type === 2` to show the text field? I'm totally confused... What are you trying to accomplish?\n. Oh, I get what's going on. One gotcha with formly (that should probably be documented) is that you can't re-use the exactly same fields between multiple forms. Another thing that you should avoid doing is using the same form for for multiple models. This is because when angular watchers are run, the model for the field may not be the model that you're expecting. So instead, for this case, where you have the same fields representing multiple models, I recommend each form having it's own copy of the fields and each `formly-form` having one model that doesn't get entirely swapped out (individual properties can be swapped of course, just not the entire object).\n\nHere's an updated (working) plunker: http://plnkr.co/edit/z9SHYESTDGNHCN1bn0AX?p=preview\n. If this resolves your issue, please close it :-)\n. Sure, I copied the formFields upfront because I knew how many I needed, but you could easily copy them later, or create a function that returns a fresh copy of the fields. Like so:\n\n``` js\nfuncton getFields() {\n  return [\n    // your fields\n  ];\n}\n```\n\nthis would also ensure that each instance of the fields is unique. Then just invoke that every time you need a new copy.\n. Well, that all depends on how many forms you've got... Let's move this to [gitter](https://gitter.im/formly-js/angular-formly) so we can chat more quickly.\n. (\u00f3 \u00ec_\u00ed)=\u00f3\u00f2=(\u00ec_\u00ed \u00f2) Good luck!\n. ... Github... Messed up my emoji... `(\u00f3 \u00ec_\u00ed)=\u00f3\u00f2=(\u00ec_\u00ed \u00f2)`\n. I'm not sure I understand your question... It sounds like you know what to do. You have the right idea that you'll want to create a custom template for this functionality. From there you can do whatever you like. See [the wiki](https://github.com/formly-js/angular-formly/wiki/Tips-&-Tricks#custom-templates) on custom templates for what's available.\n. And what I was saying is that the option \"mask\" doesn't have to be implemented in formly for you to use it in a custom template. Either way, we're definitely not going to implement it in formly core as it wouldn't make sense. If you would like it added to one of the template libraries, create an issue there and we can discuss it...\n. What version of angular-formly are you using? The current version of master has significant changes from the released version. I recommend using the latest version in master as we'll be releasing this very soon and it comes with a lot of improvements.\n\nNote, that in the latest (master) version, the attribute has changed from `result` to `model` and the `options` attribute has been removed.\n\nJust by looking at your code, it appears you're doing everything else just fine. If making those changes doesn't fix your issue, could you please provide an example by cloning [this jsbin template](http://jsbin.com/biqesi/edit) (File -> Clone)? Thanks!\n. Great! I'm glad you got it working. Let us know if you need any more help. Thanks!\n. So, just to confirm, you want the user to be able to check multiple of those right? Or are they limited to only one? If they're limited to one, then just use the radio button. If you just want to have one field label associated with multiple checkboxes (each with their own label) then you'll have to make your own template. I would recommend copying the radio button template and changing it to a checkbox. Like so:\n\n``` html\n<div class=\"radio-group\"\n     ng-class=\"{'has-error': options.formControl.$invalid}\">\n    <label class=\"control-label\">\n        {{options.label}}\n        {{options.required ? '*' : ''}}\n    </label>\n    <div class=\"radio\"\n         ng-repeat=\"(key, option) in options.options\">\n        <label>\n            <input type=\"checkbox\"\n                   formly-dynamic-name=\"id + '_'+ $index\"\n                   formly-custom-validation=\"options.validators\"\n                   id=\"{{id + '_'+ $index}}\"\n                   aria-describedby=\"{{id}}_description\"\n                   ng-value=\"option.value\"\n                   ng-required=\"options.required\"\n                   ng-model=\"$parent.model[$parent.options.key || $parent.index]\">\n            {{option.name}}\n        </label>\n        <p id=\"{{id}}_description\"\n           class=\"help-block\"\n           ng-if=\"option.description\">\n            {{option.description}}\n        </p>\n    </div>\n</div>\n```\n. @maryampashmi, it's because you have the `hiddenWhenUnchecked` field as part of the `options` of the `checkbox-template` field. Also, unless your template is doing something interesting/odd, `options` shouldn't have a `key`. Your `hide` `expressionProperty` should reference `Q2` being the value of the `more` option. Try this:\n\n``` json\n{\n    \"key\": \"Q2\",\n    \"type\": \"checkbox-template\",\n    \"label\": \"What are the most important language to learn?\",\n    \"options\": [\n      {\n        \"name\": \"english\",\n        \"value\": \"eng\"\n      },\n      {\n        \"name\": \"spanish\",\n        \"value\": \"spnsh\"\n      },\n      {\n        \"name\": \"french\",\n        \"value\": \"frnch\"\n      },\n      {\n        \"name\": \"more\",\n        \"value\": \"more\"\n      }\n    ]\n  },\n  {\n    \"key\": \"hiddenWhenUnchecked\",\n    \"type\": \"text\",\n    \"line\": 4,\n    \"label\": \"Please write down if you consider another languages\",\n    \"placeholder\": \"chinese\",\n    \"expressionProperties\": {\n      \"hide\": \"model.Q2 !== 'more'\"\n    }\n  }\n```\n\nIf that doesn't work, please provide an example using [this jsbin](http://jsbin.com/biqesi/edit) as a template.\n. @maryampashmi, did this resolve your issue? Please close this issue if so.\n. Good point. I'm actually in the process of creating a series on egghead.io for angular-formly. Stay tuned! :D\n. What you're experiencing is why the pre-built templates don't support ng-pattern already. You have a few options. You can either:\n1. Create a custom template that uses ng-pattern (called `pattern-input` for example) and just use it when you need to supply a pattern\n2. Use a `validator` instead (I recommend this) where you validate it based on regex.\n\nGood luck\n. @rahil471, did this resolve your issue? Please close this issue if so.\n. Closing this. Let me know if your issue was unresolved.\n. Whoops, can't believe we didn't see that earlier. I'm not certain that it's worth fixing at this point. I'll be releasing 2.0.0 in the next week or two anyway. Also, `master` and `1.0.0` have some significant differences. So if you're trying to compare your code with the two, you're going to have a hard time.\n. Good question... Unfortunately, this is not currently possible, though I wanted it to be #132.\n\nHowever! I closed #132 because there's a reasonable workaround. From the #132:\n\n---\n\nThis can be accomplished by specifying a model for the field like so:\n\n``` js\n$scope.foobar = {\n  foo: {\n    bar: 'hello'\n  }\n};\n$scope.fields = [{\n  model: $scope.foobar.foo,\n  key: 'bar'\n}];\n```\n\n``` html\n<formly-form result=\"foobar\" fields=\"fields\" />\n```\n\nThis is supported as of 9f10f57\n\n---\n\nHopefully that's a reasonable workaround for you!\n\nIf you want to take a whack at a PR to support `'name.first'` that would be way awesome because I think it's a much better api. However, there are some issues with using getter/setters with ng-model-options (which I mention in [my egghead lesson](https://egghead.io/lessons/angularjs-new-in-angular-1-3-ng-model-options-getters-and-setters) on it).\n. One thing that we may consider is simply syncing an internal value with an external value using $watch... This would avoid the use of a getter/setter... But that may not be the right approach...\n\nP.S. Thanks for angulartics! :D\n. There were big breaking changes from 1.0 to 2.0. But what's in matter\nshould be compatible with 2.0. See the changelog. :-D\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Jan 25, 2015 4:33 AM, \"ShMcK\" notifications@github.com wrote:\n\n> I recently noticed that the Lumx templates weren\u2019t binding with\n> Angular-Formly 2.0, though working fine on 1.0. Are there breaking changes\n> with 2.0 to update to or are 'things just blowing up but it\u2019s going to be\n> awesome'? Looking forward to progress.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/155.\n. Also, if you've seen [the new site](https://formly-js.github.io/angular-formly), we're using jsbin to do examples now. Would love to see some LumX examples on there :-) https://github.com/formly-js/angular-formly/edit/master/demo/app/states/root/components/data/examples.js\n. Thanks. Maybe you can provide me with some feedback.\n\nI've been thinking about making a change to the field config api to make things more clear what is for templates and what is for formly core. So changing the api to be this:\n\n``` javascript\n{\n  type: 'text', // or template/templateUrl\n  key: 'first',\n  wrapper: 'someWrapper', // new api in master, you'll love this one. You may actually want to build your templates with this and wait for me to release this officially. Should be in the next few days. Also, the api is not finished because I'm planning on being able to specify an array where the first wrapper would be wrapped in the second wrapper and so on :-D\n  model: vm.user.name,\n  expressionProperties: {},\n  data: {}, // reserved for users\n  modelOptions: {}, // currently created in formly core, but I'm thinking that we should pull it out and let this be part of the template\n  watcher: {},\n  validators: {}, // this is technically used only in the template using the formly-custom-validation directive. So perhaps it should go in the templateOptions? But I think that all templates that use ng-model should support validators so it may be better just to keep it here.\n  templateOptions: { // and here's the change. All template-specific options would be moved to here\n    label: 'First Name',\n    placeholder: 'Please be honest',\n    required: true,\n    options: [],\n    description: 'Enter your first name so we can know what it is',\n    // etc...\n  }\n}\n```\n\nWhat do you think? I've presented on formly, and the biggest confusion for people was figuring out what was part of the formly core and what was necessary/supported by the template library. I think this api makes it much more clear. I'm anxious to get your feedback so I can make this change if you think it would be useful. We could then cut a 3.0.0 release. And don't worry, it wont drag on like the 2.0.0 :-) I'm speaking on formly at [ng-nl](http://ng-nl.org) next week, so I'll want to cut a new release before then.\n\nSo, anyway, I really like this new api. I think it's more clear. Let me know what you think :-)\n. Actually @ShMcK, I still want to keep `type`. I was just saying that you can still specify a `type` OR a `template` OR a `templateUrl`. With this new paradigm, you would have a `templateOptions.type` to specify a different type for the `input` template type.\n\nI'm working on documenting the `wrapper` api a little better. It's pretty cool. You can have wrappers in wrappers, which should make ng-messages and labels really handy! It's mostly tested and I'm going to have an example on the site for it as well so you should be able to figure out how to leverage it fairly easily.\n\nI'm going to leave `modelOptions` and `validators` where they are. I think it makes sense to keep them there.\n\nBut be aware that I am going to move all template configuration to `templateOptions` and I'm going to throw an error if anyone specifies a property that does not belong in the main configuration. Users will have free reign over both the `data` and `templateOptions` objects, but the rest of the field api will be limited to what is explicitly allowed.\n\nThanks for working with me on this as I try to make this the best forms abstraction for angular :-)\n. Note, I'm also changing `setTemplate` and `setTemplateUrl` to simply `setType`. Keep an eye on the README for that simpler api.\n. I've been having a lot of fun this evening making a bunch of changes. Most of them will simply require you to change from `options` to `options.templateOptions`. Also, there are several other nice updates as well (including wrapped wrappers). I recommend taking a look at how I altered the other template libraries (like [bootstrap](https://github.com/formly-js/angular-formly-templates-bootstrap) to see what changes you'll need to make. Also check out [the changelog](https://github.com/formly-js/angular-formly/blob/master/CHANGELOG.md).\n. Also, be advised that I've released a beta version of this to npm. You can `npm install angular-formly@3.0.0` to see it.\n. Terrific! I want to wait until your library is up to date before releasing the next version to make sure that you're able to go through and double check the api. I want you to let me know if I was just being crazy or something :-)\n. Hi @ShMcK, I'm actually in Sweden right now, but still suffering from jetlag. So sorry I wasn't available earlier. Here are a few things:\n- Hopefully the wrappers will be sufficient to help you avoid repeating yourself\n- `options: []` for radio buttons are specific to radio buttons and are not needed at all by formly core. That's the basic premise of everything. If it's not common to all templates (ie, used by formly core) then it belongs in either `templateOptions` or in `data` (though `data` is more reserved for users, not template writers).\n- I thought about using `template` instead of the more verbose `templateOptions`. However, `template` is already in use because you can specify a `template` instead of a `type` or `templateUrl`\n- I'm thinking that perhaps it may be nice to have somehow a way that formly would attach the `ng-required`, `ng-disabled`, etc. directives based on the `templateOptions` automatically for you. But that would require a recompilation of the template which would likely lead to a performance issue. And I believe that formly actually already has poor performance sometimes so I'd like to avoid making it worse. But I think I would like to explore this possibility as it would make the templates MUCH easier to write.\n\nThanks for your work on this! Please let me know if there's anything you'd like me to do. I think I'll look into that last point. If there's a way I can do this without hurting performance, I think I will because that would be great!\n. Excellent! :-)\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Feb 5, 2015 12:53 AM, \"ShMcK\" notifications@github.com wrote:\n\n> I see what you mean now about options: [] & templateOptions and I'm happy\n> with that part of the API.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/155#issuecomment-72966392\n> .\n. A couple thoughts:\n- On the fm.formFields preview on the right, I would actually make a copy of the fields in your controller and display those. Formly attaches several things to the fields that are not entirely necessary showing (like model options or the form control)\n- Speaking of the form control, if you open your console, you'll notice some warnings complete with links to explanations. Look into those :-)\n\nIt could be that last one is related to the `select` components not working, but I'm not certain about that...\n. Just playing around with one of those selects, it appeared that it may have just been a css issue. I found the parent element of the dropdown and the opacity was set to 0. I changed it to 1 and everything started working...\n. @abodacs, could you be more specific? They seem to be working for me...\n. Well, I fixed it as much as I could, but the rest is [up to jsbin](https://github.com/jsbin/jsbin/issues/2254)\n. For now, you can click \"load unsafe scripts\" and that'll make things work for mixed https and http.\n\n![screen shot 2015-02-01 at 10 01 10 pm](https://cloud.githubusercontent.com/assets/1500684/5993853/e5b05378-aa5d-11e4-9a63-4613ca2254f8.png)\n. @abodacs, so the \"solution\" is to force non-ssl because the jsbin examples will come from the community and I can't force people to upgrade to jsbin pro (which is how you enable ssl for jsbin) so now if you come to the page with https, it will downgrade you to http... :-(\n. @abodacs, I would, except the original issue is still valid. I still want more examples on the site :D Feel free to submit a PR if you have time to create a specific example! :D\n. Thanks for the tip @JamyDev. I think that's a good idea. I'll try to get it in soon.\n. This is now supported: e29ad3dc37e46b9dbab7b05a77185b6396684e63\n\nNote: This is a breaking change and will result in a 3.0.0 release. I hope this release comes soon. Also note, with this 3.0.0 release comes `templateWrappers` which you're going to love if you use many custom templates :-)\n. To be more clear, it's going to be shipped with other breaking changes. I think the simple errors thrown wouldn't be a problem necessarily since you couldn't do this in 2.0 anyway, but I've got a bunch of other things that are definitely breaking changes that this will ship with. Should be a much easier migration from 2.0 to 3.0 than it was from 1.0 to 2.0.\n. Absolutely. You simply need to [create a custom template](http://formly-js.github.io/angular-formly/#/example/intro/custom-templates) and use those directives in your custom template. I'm actually doing this currently with ui-select.\n\n``` html\n<div class=\"input-group col-md-12\">\n  <div class=\"form-control\"\n       type=\"text\"\n       name=\"{{::id}}\"\n       ng-attr-placeholder=\"{{options.placeholder}}\"\n       ng-required=\"options.required\"\n       formly-custom-validation=\"options.validators\"\n       az-autofocus=\"{{options.focus}}\"\n       ui-select2=\"options.data.select2Options\"\n       ng-model=\"model[options.key || index]\"\n       az-ui-select2-disabled=\"options.disabled\"></div>\n</div>\n```\n\nThere are likely a few things in there that you'd need to change from my example, but the concept is fairly straightforward :-) Good luck!\n. Also, if you do get this implemented, I would love to have an example on [the website](https://formly-js.github.io/angular-formly/). Create an example by following the instructions [here](https://github.com/formly-js/angular-formly/edit/master/demo/app/states/root/components/data/examples.js)\n. @piernik, do we need to keep this issue open?\n. Thanks @metasean! It's been fixed.\n. I've got an idea. What if we gave you something like this:\n\n``` javascript\nformlyConfigProvider.templateManipulators.preWrapper.push(function(template, fieldOptions, scope) {\n  // do whatever you want to here and return the template. You can even return a promise\n  // this will be called before all of the wrappers have have run\n});\n```\n\n``` javascript\nformlyConfigProvider.templateManipulators.postWrapper.push(function(template, fieldOptions, scope) {\n  // this will be called after all of the wrappers have have run\n});\n```\n\nWhat do you think about that? I think I sort of like that. Would allow you to add classes or styles or even wrap it further. AND it would allow you to add all the `ng-` directives we were talking about automagically :-)\n. Saving template code is the main usefulness. But you need to make sure that\nyou're specifying the right types on the wrapper when it's defined or\nspecifying the right wrappers when the type is defined. That may be a bit\nconfusing....\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Feb 5, 2015 3:44 AM, \"ShMcK\" notifications@github.com wrote:\n\n> I just realized formlyConfigProvider.setWrapper({}) forces all of the\n> wrappers on the template. As a result I was getting 3 sets of ngMessages on\n> my text-fields, one for each wrapper. I'm not sure the usefulness of\n> setWrapper other than saving a little template code.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/161#issuecomment-72984833\n> .\n. So, this is amazing. I am seriously considering removing `wrapperOptions` in favor of the new `templateManipulators` pipeline (and therefore only have one pipeline and no longer have a need for the pre and post wrapper ones). Let me know what you think: https://github.com/formly-js/angular-formly#templatemanipulators\n\nI just want to verify with you that it covers all use cases you can think of. If so, I'm going to go through and fix the bootstrap and vanilla templates to support this. Also, formly core has a built-in `templateManipulator` that you may find interesting. It's the reason that `ngModelAttrs` was introduced: https://github.com/formly-js/angular-formly#ngmodelattrs-object\nSee an example of that in code [here](https://github.com/formly-js/angular-formly/blob/d55483204cb41d7196565730517d7cf72f89fbbf/local-examples/components/app.js#L35)\n\nLet me know what you think. I'm planning on removing wrappers on the 6th (tomorrow depending on your timezone) because it's such a cleaner, more reasonable api I think.\n. Yeah, they're way way awesome :-D Not only will it Dave boat in templates,\nbut it saves a ton on unnecessary watchers. Look in the local-examples\ndirectory, in components/app.js\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Feb 6, 2015 8:18 AM, \"ShMcK\" notifications@github.com wrote:\n\n> I hadn't realized the power of ngModelAttrs. They can drastically reduce\n> the bloat on form fields.\n> \n> I think the docs could use an example. I'm not entirely sure how to use\n> them.\n> \n> Are they set by an ngModelAttrs array that can hold multiple ng-directives\n> with values?\n> \n> ```\n> ngModelAttrs = ['ng-required': true, 'ng-pattern': '/[A-Za-z]/', 'ng-disabled': false]\n> ```\n> \n> Or can they only be set and changed in expressionProperties?\n> \n> expressionProperties: {\n>     options.ngModelAttrs[ng-required] = true,\n>     options.ngModelAttrs[ng-pattern] = /[A-Za-z]/\n>     options.ngModelAttrs[ng-disabled] = false\n>     }\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/161#issuecomment-73195213\n> .\n. /Dave/save/s\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Feb 6, 2015 8:23 AM, \"Kent C. Dodds\" kent@doddsfamily.us wrote:\n\n> Yeah, they're way way awesome :-D Not only will it Dave boat in templates,\n> but it saves a ton on unnecessary watchers. Look in the local-examples\n> directory, in components/app.js\n> - Kent C. Dodds\n> \n> (Sent from my mobile device, please forgive typos or brevity)\n> On Feb 6, 2015 8:18 AM, \"ShMcK\" notifications@github.com wrote:\n> \n> > I hadn't realized the power of ngModelAttrs. They can drastically reduce\n> > the bloat on form fields.\n> > \n> > I think the docs could use an example. I'm not entirely sure how to use\n> > them.\n> > \n> > Are they set by an ngModelAttrs array that can hold multiple ng-directives\n> > with values?\n> > \n> > ```\n> > ngModelAttrs = ['ng-required': true, 'ng-pattern': '/[A-Za-z]/', 'ng-disabled': false]\n> > ```\n> > \n> > Or can they only be set and changed in expressionProperties?\n> > \n> > expressionProperties: {\n> >     options.ngModelAttrs[ng-required] = true,\n> >     options.ngModelAttrs[ng-pattern] = /[A-Za-z]/\n> >     options.ngModelAttrs[ng-disabled] = false\n> >     }\n> > \n> > \u2014\n> > Reply to this email directly or view it on GitHub\n> > https://github.com/formly-js/angular-formly/issues/161#issuecomment-73195213\n> > .\n. The fields need to be part of the templateOptions object :-)\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Feb 7, 2015 7:24 AM, \"ShMcK\" notifications@github.com wrote:\n\n> I'm trying to setup flex-box with angular-formly-templates-lumx.\n> Unfortunately, I haven't been able to get it to work based on this jsbin\n> example http://jsbin.com/jaloz/2/edit?html,js,output.\n> \n> Error: `Formly Error: You have specified field properties that are not allowed: \"fields\"`.\n> \n> Questions\n> 1. How could I add a custom field fields: [] to my template?\n> 2. Is it possible to define and add other custom fields? Hmm...\n> \n> ---\n> \n> Current Proposed API lx-wrapper-flex-container API\n> \n> {\n>   'key': 'modelName',/\\* type or wrapper? type is required by formly _/\n>   'type': 'lx-wrapper-flex-container',\n>   'templateOptions': {\n>     'container': 'row', // row | column | row-reverse | column-reverse\n>     'wrap': 'nowrap', // nowrap | wrap | wrap-reverse\n>     'align': 'space-between', // flex-start | flex-end | center | space-between | space-around | stretch\n>     'class': 'bgc-red-500', // ng-class\n>     'style': 'height: 200px'\n>   },/_ as in the jsbin example. _/\n>   'fields': [{\n>     /_ 'lx-wrapper-flex-item' fields here */\n>   }]\n> }\n> \n> lx-wrapper-flex-item API\n> \n> {\n>   'key': 'modelName',\n>   'type': 'lx-whatever-type'\n>   'wrapper': 'lx-wrapper-flex-item', // <- add the wrapper\n>   'templateOptions': {\n>     'flex': {\n>       'item': '1' // flex-value number, higher weights the space ratio more\n>       'order': '1', // value for ordering boxes\n>       'class': 'bgc-red-500' // ng-class\n>     }\n>   }\n> }\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/161#issuecomment-73352297\n> .\n. I would recommend changing the \"class\" property with \"className\" so I don't\nhave to put it in quotes if I don't want to.\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Feb 7, 2015 7:28 AM, \"Kent C. Dodds\" kent@doddsfamily.us wrote:\n\n> The fields need to be part of the templateOptions object :-)\n> - Kent C. Dodds\n> \n> (Sent from my mobile device, please forgive typos or brevity)\n> On Feb 7, 2015 7:24 AM, \"ShMcK\" notifications@github.com wrote:\n> \n> > I'm trying to setup flex-box with angular-formly-templates-lumx.\n> > Unfortunately, I haven't been able to get it to work based on this jsbin\n> > example http://jsbin.com/jaloz/2/edit?html,js,output.\n> > \n> > Error: `Formly Error: You have specified field properties that are not allowed: \"fields\"`.\n> > \n> > Questions\n> > 1. How could I add a custom field fields: [] to my template?\n> > 2. Is it possible to define and add other custom fields? Hmm...\n> > \n> > ---\n> > \n> > Current Proposed API lx-wrapper-flex-container API\n> > \n> > {\n> >   'key': 'modelName',/\\* type or wrapper? type is required by formly _/\n> >   'type': 'lx-wrapper-flex-container',\n> >   'templateOptions': {\n> >     'container': 'row', // row | column | row-reverse | column-reverse\n> >     'wrap': 'nowrap', // nowrap | wrap | wrap-reverse\n> >     'align': 'space-between', // flex-start | flex-end | center | space-between | space-around | stretch\n> >     'class': 'bgc-red-500', // ng-class\n> >     'style': 'height: 200px'\n> >   },/_ as in the jsbin example. _/\n> >   'fields': [{\n> >     /_ 'lx-wrapper-flex-item' fields here */\n> >   }]\n> > }\n> > \n> > lx-wrapper-flex-item API\n> > \n> > {\n> >   'key': 'modelName',\n> >   'type': 'lx-whatever-type'\n> >   'wrapper': 'lx-wrapper-flex-item', // <- add the wrapper\n> >   'templateOptions': {\n> >     'flex': {\n> >       'item': '1' // flex-value number, higher weights the space ratio more\n> >       'order': '1', // value for ordering boxes\n> >       'class': 'bgc-red-500' // ng-class\n> >     }\n> >   }\n> > }\n> > \n> > \u2014\n> > Reply to this email directly or view it on GitHub\n> > https://github.com/formly-js/angular-formly/issues/161#issuecomment-73352297\n> > .\n. Woot! :-)\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Feb 7, 2015 7:32 AM, \"ShMcK\" notifications@github.com wrote:\n\n> My brain just went _click_!\n> \n> Gotcha, I'll just create an ng-repeat inside to handle the inner flex-item's.\n> Easy peezy.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/161#issuecomment-73352492\n> .\n. Oh yeah, I was going to mention that. After looking at it, I think you definitely need to do this because it adds a few things to your fields that are necessary (including the key if one is not specified, and it adds the watchers). Without the formly-form, you'll miss out on a few things that I think are important.\n. I'm not sure I know what you mean by binding to `model[options.key].fields`.... The fields should not be on the `model` at all. I think what you really want is what you have above: `fields=\"options.templateOptions.fields\"`\n. Is there not a link with that error? There should be a url link to a wiki that explains why you're getting that error and how to fix it. I'm guessing this is the error you're seeing: https://github.com/formly-js/angular-formly/wiki/Errors-and-Warnings#couldnt-set-the-formcontrol-after-timems\n. Basically, if that error is what I believe it is, you need to make sure that all of your `ng-model` attributes specify a `name` attribute or that the field config specifies `noFormControl: true`\n. And yes, I need to get some sleep :sleepy: \n. Yep! I appreciate you're help. We're building something awesome :D\n. @ShMcK you'll want to look at this commit: b02d0a652d956895e092125321196c0aca7969ab see the changes to tests, docs, and examples :-D You could also benefit from looking at these changes in templates bootstrap: https://github.com/formly-js/angular-formly-templates-bootstrap/commit/1e7d12876318f9dd4406c6ade77de2f61019102b Your life should be much easier now!\n. @gboersma, I'm glad to see you keeping up with what I'm doing with the latest stuff. It helps me get feedback when people try to use stuff that I'm building :-)\n\nThe reason I've decided to create `templateOptions` (which is such a big breaking change) is because it became confusing to determine what (in the field config object) is used in formly core (ie common regardless of template) and what is used in the template only. By restricting what properties you can put in the field config, it makes formly's api more consistent and easier to use. Also, formly is now able to warn you if you use it incorrectly (currently, it throws an error, but I plan on changing that to a simple warning).\n\n_Please note!_ I have a huge application with a LOT of field configurations. I'm not looking forward to updating all of these. So, to ease things a little bit, I just barely created this tool which I hope should be helpful when updating your form fields :-) cheers! http://jsbin.com/ruwoke\n. Oh, sorry, and to answer your actual question, unfortunately I don't think that I'm going to be able to add a backwards compatible option. Hopefully the little tool I created will suffice. I believe it should be everything you need to update your fields to the new standard. If you're using custom templates, that's a bit of a different story. You'll need to update those manually. Good luck!\n. I will not include this logic in formly core, but it should be very reasonable to do yourself before you pass the options to formly. Depending on how things are set up for you, it may be easiest to use an [http interceptor](https://egghead.io/lessons/angularjs-using-angularjs-interceptors-with-http) and do the conversion there. Obviously, this wouldn't allow you to keep your templates as they are. But it is likely that the template update bit is just a half hour change max.\n\nAs for the actual conversion function, because you're just dealing with json (rather than having to worry about functions) then [something like this](http://jsbin.com/yelodi/edit) should probably do it:\n\n``` javascript\n// test fields using the old method\nvar oldFields = [\n  {\n    label: 'Field 1',\n    required: true,\n    key: 'field1',\n    type: 'text',\n    expressionProperties: {\n      data: {\n        dataProp1: '$viewValue.length > 4'\n      },\n      hide: 'model.field2',\n      disabled: '!model.field3'\n    }\n  },\n  {\n    label: 'Field 2',\n    key: 'field2',\n    type: 'checkbox'\n  },\n  {\n    label: 'Field 3',\n    key: 'field3',\n    type: 'checkbox'\n  }\n];\n\nconsole.log('before', oldFields);\nvar newFields = convert(oldFields);\nconsole.log('after', newFields);\n\n// here's the actual convert function\nfunction convert(fields) {\n  var copy = fields;\n  var allowedProperties = [\n    'type', 'template', 'templateUrl', 'key', 'model',\n    'expressionProperties', 'data', 'templateOptions',\n    'wrapper', 'modelOptions', 'watcher', 'validators',\n    'noFormControl', 'hide'\n  ];\n  angular.forEach(copy, function(field) {\n    angular.forEach(field, function(val, prop) {\n      if (prop === 'expressionProperties') {\n        for (var eProp in val) {\n          if (allowedProperties.indexOf(eProp) === -1) {\n            val['templateOptions.' + eProp] = val[eProp];\n            delete val[eProp];\n          }\n        }\n        if (val.data) {\n          for (var dProp in val.data) {\n            val['data.' + dProp] = val.data[dProp];\n          }\n          delete val.data;\n        }\n      }\n      if (allowedProperties.indexOf(prop) !== -1) {\n        return;\n      }\n      field.templateOptions = field.templateOptions || {};\n      field.templateOptions[prop] = val;\n      delete field[prop];\n    });\n  });\n  return copy;\n}\n```\n. @gboersma, do you think this will be sufficient? Do we need to keep this issue open?\n. Thanks for being flexible. I'm trying to make this project the very best that it can be and that required a few breaking changes. Let me know if there's anything I can do to help.\n. Sorry, I haven't published that yet. Just do this:\n\nnpm install git://\ngithub.com/formly-js/angular-formly#84ba8248efa4fe54ac3d078e37cbf9959acc1bd3\n\n-Kent C. Dodds\n\nOn Fri, Feb 6, 2015 at 9:34 AM, ShMcK notifications@github.com wrote:\n\n> Based on this example from angular-formly/local-examples/components/app.js\n> :\n> \n> {\n>         type: 'input',\n>         key: 'myKey',\n>         ngModelAttrs: {\n>           bound: {\n>             'ng-maxlength': 6,\n>             'ng-disabled': false\n>           },\n>           unbound: {\n>             pattern: '\"^abcd|^qrst\"'\n>           }\n>         },\n>         templateOptions: {\n>           label: 'My Input',\n>           required: true,\n>           description: 'This is an awesome description'\n>         },\n>         expressionProperties: {\n>           'ngModelAttrs.bound[\"ng-disabled\"]': 'model.mine'\n>         }\n>       }\n> \n> I can't get ngModelAttrs to work with angular-formly-templates-lumx.\n> Using angular-formly@3.0.0 from npm.\n> \n> {\n>         key: 'switch1',\n>         type: 'lx-switch',\n>         ngModelAttrs: {\n>          bound: {\n>           'ng-checked': true\n>            }\n>         },\n>         templateOptions: {\n>           label: 'Switched Switch'\n>         }\n>       }\n> \n> The lx-switch template looks like this:\n> \n> <div class=\"switch\">\n>   <input type=\"checkbox\"\n>          id=\"{{::id + '_'+ $index}}\"\n>          class=\"switch__input\"\n>          ng-model=\"model[options.key]\"\n>          formly-dynamic-name=\"::id\"\n>          aria-describedby=\"{{::id}}_switch\"/>\n> </div>\n> \n> Any thoughts why?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/163.\n. Great! Do you think we can remove template wrappers?\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Feb 6, 2015 10:10 AM, \"ShMcK\" notifications@github.com wrote:\n\n> Working. It's a beautiful thing. Thanks!\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/163#issuecomment-73207312\n> .\n. Again, if you're going to use `::` in your templates, then that means you're running angular 1.3, and if you're doing that, then you don't need the `formly-dynamic-name`, simply do: `name=\"{{::id}}\"`. Should be more performant I think.\n. Great!\n\nWhat do you think about removing wrappers?\n\n-Kent C. Dodds\n\nOn Fri, Feb 6, 2015 at 1:30 PM, ShMcK notifications@github.com wrote:\n\n> Thanks! Once I get a full understanding of angular-formly, I'll start\n> contributing the jsbin docs as well.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/163#issuecomment-73229698\n> .\n. Could you jump on [Gitter](https://gitter.im/formly-js/angular-formly) really quick?\n. Do we need to keep this open?\n. Created a repo for this. Closing in favor of that: https://github.com/formly-js/formly-builder/issues/1\n. Formly doesn\u2019t wrap every `formly-field` in an `ng-form`, but it does wrap every `formly-form` in an `ng-form` is that what you\u2019re talking about? If you'd like to skip the `ng-form`, then I think this is doable. Especially because we're using es6 template strings it should be a breeze. I'll just have to move the template from a file to a function and allow you to specify an attribute that says that you don't want it in an `ng-form`. Should be very easy.\n. The api would probably be something like this:\n\n``` html\n<formly-form model=\"vm.model\" fields=\"vm.fields\" form=\"vm.form\" no-ng-form></formly-form>\n```\n\nThough, thinking about it now, I'm not sure why the presence of `ng-form` prevents rows/columns. Can't you just style the `ng-form`? You can add your own classes to the `formly-form` and it will be applied to the `ng-form`.\n. Closed with 3.0.3 208b851ebe886dd61c9311db08244bb330a91ce3\n. This is supported in version 5.2.0-beta.1. Thinking this will likely land. Here's [an example](http://angular-formly.com/#/example/form-options/reset-model)\n. This is supported as of 5.2.0 :-)\n. Thanks @juristr!\n. That's not a common use case, but one way to accomplish this would be via the `watcher`. You might do something like this:\n\n``` javascript\nwatcher: {\n  expression: 'options.hide',\n  listener: function(field, newVal, oldVal, scope) {\n    if (newVal) {\n      scope.fields.splice(scope.fields.indexOf(field), 1); // removes the field itself\n      delete scope.model[field.key]; // removes the field from the model\n    }\n  }\n}\n```\n\nI don't totally understand your use case, but doing this seems very odd to me and I would suggest finding another way to accomplish what you're trying to do.\n. Ah, I see, so you don't actually want to delete the property, you just want to change the value of the model. Well, the best way to accomplish this is likely still with a `watcher` but don't actually remove the field or use `delete`. Just set the value to null or an empty string. This is an edge case because the form's purpose is to represent the current state of the model, not alter it specifically. But if you wish to do this, I'd use `watcher`. Let me know if you have additional questions :-)\n. Oh, and please close this issue if you have it working and you're happy with the solution.\n. I'm not sure what you need more than [this example](http://formly-js.github.io/angular-formly/#/example/advanced/template-wrappers) for the template wrappers. I just added a [new example](http://formly-js.github.io/angular-formly/#/example/advanced/custom-controller-and-link) for custom controller and link functions. Let me know if there's anything else I can help you with!\n. I believe you could specify the name of the controller as a sting as long\nas it's been registered with angular and it should work. Haven't tried that\nmyself. For the link, it must be a function.\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn 13 Feb 2015 20:49, \"gboersma\" notifications@github.com wrote:\n\n> I think the custom controller and link example is what I am looking for.\n> But it is still not clear to me how I can declare my own controller\n> somewhere, and then pass it in (as opposed to declaring methods directly\n> within the setType call). So let's say I declare a module called 'forms'\n> and set the templates there. Can I define a controller for this module and\n> then pass it in when a call setType? Or define a new controller locally\n> within the module and then pass it in through setType?\n> \n> Sorry if some of this is basic angularJS. Still trying to understand how\n> to fit all the pieces together.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/171#issuecomment-74315246\n> .\n. Dear @ShMcK, you rock. Thanks for being an awesome OSS contributor! Or, as @aaronfrost would say: a \"bridge builder\" :-D\n. @stefanzweifel, let me know if there's anything that could be changed about the core library to make this process easier. I agree that this is a common thing many people will want to do, so I want to make it as easy as it can be without complicating the API.\n\nAlso, I would totally love for a team like yours who's doing Foundation work to own the [Foundation Templates](https://github.com/formly-js/angular-formly-templates-foundation) :D\n. So, I've been thinking about this a little bit, what would you think of an api like this:\n\n``` javascript\nvm.formFields = [\n  { /* field config */ },\n  [\n    { /* field config */ },\n    { /* field config */ },\n    { /* field config */ }\n  ],\n  { /* field config */ },\n  { /* field config */ },\n  [\n    { /* field config */ },\n    { /* field config */ }\n  ],\n  { /* field config */ }\n];\n```\n\nAnd then you pass the `vm.formFields` as the `fields` attribute on `formly-form` and `formly-form` would somehow logically group those together for you. I'm not sure how this would best be accomplished. But I like to work \"backward\" and consider the desired api first, then come up with a solution (I guess that's sort of the TDD style). Would this be an acceptable API?\n. I'm wondering what this would actually result in. Right now, `formly-form` just uses `ng-repeat` on the fields so they wind up being siblings of one another. I'm thinking that with this array approach, it might group them into a `div` with a class like `formly-field-group` or something. Do you think this would really solve the problem?\n. > it adds complexity to the implementation. Which is exactly what we are trying to avoid.\n\n:+1: to that @GuilhermeMedeiros. I think I may have misunderstood your other comment. But I think that formly can do a little more work for you and I don't think that adding the ability to specify fields as an array of grouped fields would complicate the implementation too much. But I'm still uncertain of whether this will actually solve the problem. Perhaps the issue in my understanding is that where I'm using formly, the label is on the left rather than on top, so putting fields in a grid layout doesn't make as much sense for me.\n. @GuilhermeMedeiros, I'm not certain that I understand what you're suggesting. If I understand it correctly, it feels like a bit of a more complicated API. Also, what you suggested with the `formly-field` is sort of possible because the `formly-field` directive exists (you simply need to provide the proper attributes). Anyway, I'm sorry if I'm having a hard time understanding what you're suggesting. Thanks for your patience.\n. Thanks @GuilhermeMedeiros! I would really appreciate any help you can give on implementing this functionality. Reach out to me when you think you've got time!\n. @stefanzweifel, perhaps. The thing is that there are a few \"right\" ways to do this I think which makes it difficult to decide which is the real \"right\" way.\n. So, looking for feedback. I'm guessing that the vote right now is to create a separate repository/module for this. There are actual several directives in the angular-formly module that could go into this category I think. Do you think that we should create a new repo called `angular-formly-template-utils` and use that for all of these utility directives? I'm also thinking that it may just be easier to stick in the `formly-area` directive into formly proper. I'm sort of torn and not certain of the best approach for this.\n. I've created an example of how to accomplish this on [the website](http://formly-js.github.io/angular-formly/#/example/other/advanced-layout). I think that will have to be sufficient for now.\n. Here's the bootstrap version:\nhttp://angular-formly.com/#/example/bootstrap-specific/advanced-layout\nHere's the flex version:\nhttp://angular-formly.com/#/example/other/advanced-layout-flex\n\nOn Fri, Sep 18, 2015, 4:54 PM Aubrey Taylor notifications@github.com\nwrote:\n\n> Looking for a solution to this but example link is broken. Can someone\n> restore it? Thanks!\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/173#issuecomment-141588633\n> .\n. Thinking we're going to use readme.io for this. Need #175 to be finished before we can move forward though.\n. Introducing http://docs.angular-formly.com\n. formly-js first. If you want to make an angular specific spin on that later\nthen that's cool to, but the original logo should appeal to regular\nJavaScript I think.\n\nI'm thinking something very simple. Like a few lines in a box or something.\nI dunno... I'm no designer...\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Mar 3, 2015 10:17 PM, \"ShMcK\" notifications@github.com wrote:\n\n> Any specs on the logo?\n> - Is it for Angular-Formly in particular or Formly-JS entirely?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/175#issuecomment-77098734\n> .\n. Closed, thanks to @raibutera!\n. No, you're fine. angular-formly depends on at LEAST Angular 1.2.x, but if you have a newer version that's terrific! You just need to specify a resolution. With npm, I can specify angular 1.2.x as a peer dependency and you don't get this, but with bower, this is the best we can do. Let me know if you need help getting this to work, but you should be able to simply follow the bower cli to specify a resolution for the conflict.\n. I know that it's possible because I've done it. So if you have any trouble, don't hesitate to come back and ask for help :D\n. What I mean is I've gotten angular-formly to work with angular 1.3.x using bower :-)\n. Woot! Let me know if you need any help or if additional [examples](http://formly-js.github.io/angular-formly/#/) would be helpful to you. As always, contributions are welcome (especially examples!)\n. :smile: :+1:\n. Yes, you'll want to use the template cache. I'll give a more complete\nexample later (on mobile now). But look into plugins for build systems to\nautomatically add your templates to the template cache.\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Feb 17, 2015 4:21 PM, \"gboersma\" notifications@github.com wrote:\n\n> When displaying a page with a formly form for the first time, the form\n> takes about 1/2s to display. Initially, I thought it was due to server lag,\n> but after looking at it, the client already has all of the data from the\n> server.\n> \n> To narrow it down, I added some test code to print out the value of the\n> data before displaying the form (using an AngularJS ng-repeat directive).\n> The data is displayed immediately, the form follows about 1/2s later- but\n> only on the initial display of the page.\n> \n> It seems to me that formly is the most likely culprit here. Any\n> suggestions as to how to improve performance? I notice that in the vanilla\n> templates, each template is cached. Could this make a big difference?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/177.\n. Great! I definitely recommend using a build system, but either way works I\nguess. If this solves your issue, please closer this issue. Thanks! Let me\nknow if I can be of any more help! :-)\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Feb 17, 2015 5:07 PM, \"gboersma\" notifications@github.com wrote:\n\n> I think I got it. I created a run method for my module and passed in $http\n> and $templateCache. I then load each of the templates into the cache:\n> \n> $http.get('path/to/template.html', {cache:$templateCache});\n> \n> I guess I could also have each template loaded directly from a string\n> (i.e. from a build system plugin, I'm guessing) and completely avoid the\n> server round-trip, but this is good enough for me.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/177#issuecomment-74783702\n> .\n. What are the actual versions that are downloaded with those definitions? The example in the readme is for the latest version which is version 3.1.6. Please update to the latest version and let me know if that fixes things for you.\n. I'm not certain I understand the problem you're describing. Could you make an example by cloning this [jsbin template](http://jsbin.com/biqesi/edit)\n. The example you provided doesn't work because it doesn't actually create an angular module. You also weren't bootstrapping the module and weren't specifying the controller. Here's a [fixed example](http://jsbin.com/xuboxu/1/edit).\n\nI realize that this is only a small example, but I think the problem in your actual repository is that you're not actually specifying a controller in your state definition. You should add a `controller: 'formController'` to [this line](https://github.com/maryampashmi/Data-Procurement-Repository/blob/master/app.js#L82).\n. It sounds like you're having problems with UI router. I'm not certain how to help you. Let me know if you have specific questions. Good luck!\n. That warning should link you to [this](https://github.com/formly-js/angular-formly/wiki/Errors-and-Warnings#couldnt-set-the-formcontrol-after-timems). If it doesn't, that's a bug and should be fixed. Does it not send you to that link?\n. Regardless, the way you fix it is that for those you specify `noFormControl: true` as property and that will fix it. You could specify it as `defaultOptions` if it's registered for types.\n. Great! :D\n. Oh, ok. Do you need to reopen this issue then?\n. Thanks @jameswyse, I actually video chatted with Victor a little bit to talk about the formly api and I would like to think that had some sway on the decision to include a more imperative approach. Hoping that angular-formly will be rendered useless by Angular 2. However, my plan is to make the port anyway so people can upgrade to Angular 2 without the need to change their form configurations. Then they can migrate from angular-formly to Angular 2's built-in stuff.\n. Created the [formly-js/angular2-formly](http://github.com/formly-js/angular2-formly) repo. It's pretty rough, but I'm closing this issue in favor of that. And by pretty rough, I mean, it's nothing right now...\n. Would love your input @ShMcK and @mhartington\n. I actually created apiCheck.js for this purpose:\nhttps://github.com/kentcdodds/apiCheck.js\n\nI've been planning on bringing apiCheck into formly as a dependency and may\nexpose that to types via the API you described. Just need to work on the\nerror messaging a little better...\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Feb 23, 2015 6:51 PM, \"ShMcK\" notifications@github.com wrote:\n\n> These could be added in the setType stage when creating a template. It\n> would be easy to add:\n> \n> formlyConfigProvider.setType({\n>     name: name,\n>     templateUrl: templateUrl,\n>     optionTypes: optionTypes  /*\\* optionSchema? */\n> })\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/183#issuecomment-75683870\n> .\n. :blush: thanks :-) It's written in vanillajs and works on in node too :-)\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Feb 23, 2015 7:05 PM, \"ShMcK\" notifications@github.com wrote:\n\n> I should keep a better eye on your prolific Github work. There are\n> definitely a lot of great ideas that can be exchanged between React &\n> Angular, great work with apiCheck.js!\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/183#issuecomment-75685234\n> .\n. I think it's good for beta now. It's just the error messaging that I want\nto improve. But everything else works quite well.\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Feb 23, 2015 7:24 PM, \"ShMcK\" notifications@github.com wrote:\n\n> After reading the intro docs, I'm quite happy with apicheck.js. Let me\n> know when it's ready and I'll give it a beta run.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/183#issuecomment-75686968\n> .\n. Not currently. I could pretty easily add an api like this:\n\n``` javascript\nformlyConfig.setType({\n  name: 'input',\n  validateOptions: function(options) {\n    // validate your stuff here, throw your own errors or log your own warnings\n  }\n});\n```\n\nWith that, you could do something like this:\n\n``` javascript\nformlyConfig.setType({\n  name: 'input',\n  validateOptions: function(options) {\n    var templateOptionsCheck = apiCheck.shape({\n      label: apiCheck.string,\n      placeholder: apiCheck\n    });\n    templateOptionsCheck.strict = true; // must have all and no more than specified stuff\n\n    apiCheck.throw(apiCheck.shape({\n      templateOptions: templateOptionsCheck,\n      data: apiCheck.shape({\n        someProperty: apiCheck.any\n      })\n    }, arguments);\n  }\n});\n```\n\nOr you could roll your own api check stuff. What do you think?\n. So, in this scenario, formly doesn't actually care what you do. It simply passes you `options` and allows you to `throw` or `warn` or `alert` or whatever the heck you want. In my example, I'm using `apiCheck.throw` which will throw an error if the checks fail. I'm passing `arguments` because that's the api to `apiCheck` (the first argument is your check function and the second argument expects you to pass `arguments`) so it actually is using `options` though not explicitly as a variable.\n\nI suppose that formly could take a more opinionated approach, but I fear this would reduce flexibility.\n. Ok, the api should be pretty simple to setup. I think I'm going to make apiCheck a dependency of formly, and when that happens, you'll be able to use apiCheck by default because you depend on formly, so you'll get apiCheck. I'll make apiCheck injectable as well so you'll be able to simply inject it and not worry about where it came from :-)\n. Oh, by the way, this is supported as of [3.3.0](https://github.com/formly-js/angular-formly/blob/master/CHANGELOG.md#330) :-)\n. formly uses `apiCheck` internally to validate its own apis (like `setType`). So if you're seeing that it's because you're calling `setType` wrong or there's a problem with the `apiCheck` config for that function. I actually have a bunch of stuff locally around that stuff. If you can hold off for a day or so, I'll get it in and then you can play with it :-)\n. I think it'd be more like this:\n\n``` javascript\nFIELDS.map(function (field) {\n        formlyConfig.setType({\n          name: _prefixer(field.name),\n          templateUrl: _fieldTemplateUrl(field.name),\n          validateOptions: field.validateOptions || function (options) {\n            apiCheck.throw(apiCheck.object, arguments);  // <--- validateOptions key\n          }\n        });\n      });\n```\n. I can see where what you're suggesting would be beneficial. Maybe that can be a feature added a little later down the line. Right now, you're responsible for throwing your own error or logging your own warnings.\n. There's an example for this now: http://formly-js.github.io/angular-formly/#/example/custom-types/validate-options\n. Does this still need to be open?\n. You can add an `expressionProperty` for `validation.show` that returns true when you want it to show and null otherwise.https://github.com/formly-js/angular-formly/blob/master/README.md#validation-object\n. I do this at work. I'll create an example for you and put it on the website\n:-)\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Feb 28, 2015 4:59 AM, \"Adam\" notifications@github.com wrote:\n\n> Hey, thanks for answer. validation.show function as an expressionsPropery\n> did not want to call my custom valdiation function, so I did this:\n> \n> _the concept_:\n> - two fields: name, and nameAgain,\n> - nameAgain has a validator, which check if name === nameAgain,\n> - when we change name, the nameAgain validator function should be\n>   called\n> \n> _code_:\n> \n> vm.model = {};\n> vm.fields = [{\n>     key: 'name',\n>     type: 'input',\n>     watcher: {\n>       expression: 'model.name',\n>       listener: function(field, _new) {\n>         var nameAgainField = vm.fields[1]; //that's pretty weak...\n>         var nameAgainFormControl = nameAgainField.formControl;\n>         nameAgainFormControl && nameAgainFormControl.$validate();\n>       }\n>     },\n>     templateOptions: {\n>       label: 'Enter your name',\n>       required: true\n>     },\n>   }, {\n>     key: 'nameAgain',\n>     type: 'input',\n>     validators: {\n>       nameAgain: {\n>         expression: function(viewValue, modelValue) {\n>           return (viewValue || modelValue) === vm.model.name;\n>         },\n>         message: '$viewValue + \" is not equal to your name!\"'\n>       }\n>     },\n>     templateOptions: {\n>       label: 'Enter your name again',\n>       required: true\n>     }\n>   }\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/185#issuecomment-76523216\n> .\n. Here's the example. Let me know if you need any more direction :-) http://formly-js.github.io/angular-formly/#/example/other/matching-two-fields\n. That's very nice of you to say. Thanks! Please let me know if there's more\nI can do to help. Otherwise, please close this issue\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Feb 28, 2015 4:05 PM, \"Adam\" notifications@github.com wrote:\n\n> The example you've provide is really interesting - I appreciate your work.\n> Thanks.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/185#issuecomment-76555326\n> .\n. The line of code that browserify is looks at  (`dist/formly.js` which is the `main` in the `package.json`) actually looks like this:\n\n``` javascript\nformlyConfig.tests = false ? require('./formlyConfig.test')(ngModule) : null;\n```\n\nThis is because I'm using webpack's [DefinePlugin](http://webpack.github.io/docs/list-of-plugins.html#defineplugin) which will set that value to false when it compiles.\n\nThe error is coming from browserify trying to resolve that require statement, whereas the browser would never run that `require` statement, and when webpack builds, it's smart enough to know to not resolve it.\n\nSo the best solution (IMO) would be to figure out a way to configure browserify to not attempt to resolve that require statement.\n. @sgimeno, could you try this solution to see if it will work for you: https://github.com/zertosh/unreachable-branch-transform\n. Did that solution work for people? Does this still need to be open?\n. Closing this issue as there hasn't been any activity on it for a while. Please reopen if this is an issue in the future.\n. Wow @pmowrer, thanks for putting effort into getting this to work with browserify. I'm sorry that it's such a pain! Do you think you'd have a problem with simply using the minified file? That wont have the line that's causing the root issue here. I don't think you'd get sourcemaps for angular-formly, but hopefully that wont be a problem most of the time.\n. Closing this as it should be fixed in 6.0.0\n. I actually had a conversation with @mzabriskie about this the other day. He informed me that including sourcemaps in your dist is actually a bad idea for this very reason I believe. I think that I'll have to find another way to accomplish the good development experience (perhaps a different distributable file?) For now, you could point to the minified version which doesn't include sourcemaps. Thanks!\n. Yeah, I think that it's because I'm including sourcemaps. I'll try to pull those out in the next version (soon to be released)\n. Might have fixed this. Everyone who's using browserify, please do:\n\n`npm install api-check@7.2.3-beta.0`\n\n`npm install angular-formly@6.4.2-beta.0`\n\nRe-opening until someone tells me this fixes their problem. Please let me know asap :-)\n. Fixed and officially released in 6.4.2 :-) You're welcome :-)\n. Could you verify that this works as well (it should):\n\n``` javascript\nvar angular = require('angular');\nvar app = angular.module('anAppThatCanFinallyUseFormly', [require('angular-formly')]);\n```\n. **Note the edit:** You shouldn't have to even require `api-check` because `angular-formly` will require it itself.\n. Here's the final steps (I'll put into the docs if someone tells me this works):\n1. install api-check and angular-formly via npm (NOT BOWER)\n   - npm install api-check 7.2.3 angular-formly 6.4.2 --save\n   - NB: No browserify shim or dependency listing in your package.json's browserify configuration object is necessary.\n2. in your javascript, require angular-formly in your module's dependencies array\n\n``` javascript\nvar angular = require('angular');\nvar app = angular.module('anAppThatCanFinallyUseFormly', [require('angular-formly')]);\n```\n. My most sincere apologies @jameswyse. I just added apiCheck, so I wonder if you could give me feedback on it. How difficult was it to work with before you realized that you needed to make a bug? The whole purpose of apiCheck is to help you learn how to use the api. Unfortunately, the way I defined the api for this piece was wrong and that's where the bug comes from (I said it was a function, but it is actually an object of functions).\n\nAnyway, I'd love feedback on that. Thanks!\n. Oh, also, `npm|bower install 3.3.2` :-)\n. Thanks @jameswyse. That's very... for lack of a better word... validating :-)\n\nSo, I just updated the [Custom Validators example](http://formly-js.github.io/angular-formly/#/example/advanced/validators) on the website to show an example of how to alter the default message using `validation.messages`. It actually heavily depends on how you implement `ng-messages` in your templates. If you do it like the example demonstrates, then you're invoking the messages.\n\nAlso note, that the example has also been updated to demonstrate the use of the [`formlyValidationMessages`](https://github.com/formly-js/angular-formly#formlyvalidationmessages) factory which may be of use to you as well :-) Let me know if you need any more help.\n. Very interesting. How are you creating your type? Here's the entire `setType` function:\n\n``` javascript\nfunction setType(options) {\n      if (angular.isArray(options)) {\n        angular.forEach(options, setType);\n      } else if (angular.isObject(options)) {\n        checkType(options); // <-- at this point, the options you pass are validated using apiCheck, so the name is definitely defined and a string here.\n        if (options.extends) {\n          extendTypeOptions(options); // <-- if you're extending then options runs through this function, but nothing happens to the `name` property\n        }\n        typeMap[options.name] = options; // <-- we're putting the `options.name` here.\n      } else {\n        throw getError(`You must provide an object or array for setType. You provided: ${JSON.stringify(arguments)}`);\n      }\n    }\n```\n\nThat function should be using apiCheck before long, but anyway, I think you get the idea. My first place to check (and step through the code) would be in the `setType` function.\n. Are you still experiencing this issue?\n. Fantastic! :D\n. Hi @delaman, we actually use swagger at @alianza-dev as well. It's way cool. However, we don't generate forms based on it.\n\nI don't think that this belongs in angular-formly core. This would go very nicely as a formly-js library though. All that you would need is a function that converts the JSON from swagger into properly formatted fields. You could look at [this example](https://github.com/formly-js/angular-formly/issues/162#issuecomment-73124477) of how I did this to help upgrade people from 2.0.0 to 3.0.0 or modify the code of [this tool](http://jsbin.com/ruwoke/edit) to make it work and turn it into a library. It should hopefully be fairly trivial.\n\nHowever, as I said, this is not something that belongs in angular-formly core. If you're interested, I could create a repo in the formly-js organization and give you commit access so you could build and open source such a tool. Let me know.\n. You're right, but you don't have to use ES6 if you don't want to. However\nyou want to code. Formly supports ES5.\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Feb 28, 2015 11:48 AM, \"Pedro de la Cruz Jr.\" notifications@github.com\nwrote:\n\n> @kentcdodds https://github.com/kentcdodds Looks like angular-formly\n> uses ES6 via babel in parts of the library. If I can use babel so that I\n> can use ES6 stuff i'll do angular-formly swagger library.\n> \n> Thanks\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/190#issuecomment-76539581\n> .\n. @delaman, I don't think this is something that I'm going to work on. Are you planning on doing anything with it? If so, I'll leave it open. Otherwise I think I'll close it.\n. No activity for almost two weeks, so I'll go ahead and close this. Please reopen it if you have further needs.\n. Sounds great. Could you submit a PR? I use WebStorm as well. Thanks.\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Mar 1, 2015 2:15 PM, \"rborman\" notifications@github.com wrote:\n\n> This is not really a Formly issue, but imho would benefit Formly. Let me\n> explain...\n> \n> WebStorm has a bug (https://youtrack.jetbrains.com/issue/WEB-14092) which\n> prevents it from recognizing html tags that are backed by an Angular\n> directive, written acccording the 'John Papa style guide' (named functions\n> instead of anonymous functions as a callback). Besides a confusing warning\n> ('unknown html tag') this also short-circuits navigation in WebStorm.\n> \n> A fix will be available only in the next major WebStorm release. There is\n> a workaround, however. You can add a JSDoc comment above the named\n> function, like:\n> /**\n> - @ngdoc directive\n> - @name https://github.com/name formlyForm\n> - @restrict E */ and the tag is recognized. Of course I could do that\n>   myself every time there is a new Formly release, but the pace is quite fast\n>   ;-)\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/191.\n. I'm not sure how I overlooked not restricting these directives. In your PR, feel free to restrict them each. The `formlyCustomValidation` and `formlyFocus` directives must be restricted by `A`. The `formlyField` can be `AE` and the `formlyForm` is an `E`. Let's leave the `formlyFocus` directive as an object so we can specify it's restriction as an attribute. Thanks a lot for your help!\n. Resolved by #205 Thanks!\n. This has been published as 4.0.10 :-) Thanks!\n. Thanks for letting me know. Sorry about that!\n. It's fixed in 4.0.3\n. No quick fixes I'm afraid... I'll have to look into it...\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Mar 3, 2015 10:14 PM, \"ShMcK\" notifications@github.com wrote:\n\n> I noticed Browserify doesn't work, I assume JSPM http://jspm.io/ fails\n> for the same reason: webpack's require.\n> \n> Error: Uncaught TypeError: **webpack_require**(...) is not a function.\n> \n> Any quick fixes?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/194.\n. Looks like another browserify issue consuming webpack generated code. Dah! This is super frustrating. What if you require the minified version? `require('angular-formly/dist/formly.min.js')`\n. I'm not sure how this could happen. Could you look at the source and make sure this line still exists: https://github.com/formly-js/angular-formly/blob/master/dist/formly.js#L18 and make sure that it's passed to all the modules. This is a very odd issue. I feel like if the script runs in the browser but not with your tool, then the bug is with your tool, not the library... But I'd like to do whatever I need to help this work for you guys.\n. I would like you to be able to use angular-formly on your new project too! Let me know what I can do to help.\n. @ShMcK, did you get it working? Does this issue need to remain open?\n. Ok, please let me know if there's anything that I can do on my end to make this work. Good luck!\n. It looks like you're creating the type properly. Could you paste your template?\n. Also, you don't happen to be here at ng-conf right now are you? If so we could meet up and I could help you in person.\n. So, with angular-formly, the template has access to some specific things. The scope of your template is not the same as the scope in your controller. So, anything you want your template to have access to needs to be in your field configuration under `templateOptions`. So you'd want to do something like this:\n\n``` javascript\n$scope.fields = [\n  {\n    type: 'date', // <-- the name of the type you created for the date-picker\n    key: 'selectedDate', // <-- the property on the model to bind to the value of the date-picker\n    templateOptions: {\n      dateOptions: {}, // <-- your date options\n      formate: '', // <-- your format\n      ... // <-- the other things you want to have access to in your template\n    }\n  }\n];\n```\n\nThen you need to reference the `options` object in your template. Most of your stuff will be on `options.templateOptions`, but because this is a lot to type, formly gives you a shortcut called `to`.\n\n``` html\n<input type=\"text\" class=\"form-control\" datepicker-popup=\"{{to.format}}\" ng-model=\"model[options.key]\" is-open=\"opened\" min-date=\"to.minDate\" max-date=\"to.maxDate'\" datepicker-options=\"to.dateOptions\" date-disabled=\"to.disabled(date, mode)\" close-text=\"{{to.closeText || 'Close'}}\" />\n```\n\nNote: You don't need to specify ng-required because angular formly will add that for you automatically if you specify `required` as one of your template options.\n\nIf you need more help, take a look at [this example](http://formly-js.github.io/angular-formly/#/example/custom-types/custom-templates) and [this talk](http://youtu.be/o90TMDL3OYc)\n. You're welcome @abodacs :-)\n. This is how angular treats models that are invalid. If you want to override this behavior then you can use `modelOptions` (only if you're using angular 1.3 or greater). Otherwise you'll have to use the `$viewValue`. Here's an example of using `modelOptions`: http://jsbin.com/zuqojo Let me know if this solves your issue.\n. Hi @paulvanbladel,\nBoth of these would require a custom `type`. There's an example of how to do this on [the website](http://formly-js.github.io/angular-formly/#/example/custom-types/custom-templates). For the custom action, your type could specify a `controller` which would add the custom action to the `$scope` (here's [an example](http://formly-js.github.io/angular-formly/#/example/advanced/custom-controller-and-link) of that).\n. Hi @paulvanbladel! Did you get this working? Does this need to remain open? Or can I help you out with anything?\n. I take it you got this working? Great! :D Let me know if there's anything more I can do!\n. @abodacs, an autocomplete component is pretty complex. There are libraries that allow you to do it pretty easily. Is there a particular library you'd like to see an example of integration with formly?\n. > and it would be great if it was in edit mode.\n\nI'm not sure what you mean by this...\n. Here you go: http://angular-formly.com/#/example/other/ui-bootstrap-typeahead\n. This is possible. Give me a little time to get back to my computer to\ncreate an example\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Mar 10, 2015 7:51 AM, \"paul van bladel\" notifications@github.com wrote:\n\n> Simple case: I have 8 input fields and want to display them in 2 columns.\n> I know that without formly, I would just use layout system of twitter\n> bootstrap to do this, but can this be done also with formly in the\n> definition in the controller?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/198.\n. I made an example. Check this example: http://angular-formly.com/#/example/bootstrap-specific/advanced-layout\n\nI'm going to close this, but if you have trouble, feel free to reopen or just comment.\n. Updated. Thanks! :+1: \n. It has everything to do with what you're setting your `options` to. So your `$scope.organizations` is what formlyBootstrap will use for the options. I don't know how to help you. You just need to make sure that you're setting `options` to the right thing...\n. So, currently formlyBootstrap's select type doesn't support selecting the entire object as the model value. Feel free to submit a PR to support this or simply create your own select type (it's very easy to do).\n\nAs far as that array, I have no idea where that's coming from. If you look at the examples, that's not what is happening. Could you [create a jsbin](http://jsbin.com/biqesi/edit) that reproduces the issue?\n. Everything you have here looks fine (pretty much a copy/paste of my example in many areas which is great). What does the DOM look like where the form should be?\n. Ah, your `KeyRequestController` is defined using `controllerAs` syntax (you're referencing `this`) but in your route, you're not specifying `controllerAs: 'vm'`. Simply add that to the route definition and you should be good :-)\n. What is the value of `vm.locations` after the request finishes? Also, it's best practice to not use `$http` in your controller. You should either use `resolve` in your route definition and/or use a service. If you resolve your dependencies into your controller, then this issue goes away entirely.\n. Hmmm... Could you reproduce this issue in a jsbin?\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Mar 11, 2015 7:14 PM, \"billfranklin\" notifications@github.com wrote:\n\n> vm.locations is fully populated, I actually output it in a\n> <pre>{{vm.locations|json}}</pre> to verify that it is populated.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/202#issuecomment-78406726\n> .\n. Ummm... That appears to be an empty bin:\n\n![screen shot 2015-03-11 at 9 49 28 pm](https://cloud.githubusercontent.com/assets/1500684/6611921/938dc230-c838-11e4-9753-5d49f3740aeb.png)\n. Weird... Still totally empty for me.... I don't think this matters, but do you have an account? Maybe you have to sign up for an account to have it persist...\n. Very odd... @remy, do you know why this might be happening?\n. If I go to the output only view, I see this:\n\n![screen shot 2015-03-11 at 9 57 16 pm](https://cloud.githubusercontent.com/assets/1500684/6611985/a5dc15f8-c839-11e4-9464-e44a2efa7a25.png)\n. Tried in an incognito window and in Firefox / Safari. No dice. I'm thinking that jsbin is experiencing issues right now...\n. This wouldn't be the first time I personally had trouble with jsbin :-( Maybe I use it too much? Could you maybe clone it and send me the cloned URL...\n. Wow, this is really sad... Maybe you could switch to codepen :-( I'm super sorry about that. \n. Ah hah! I know what the problem is! The issue is that you're not reassigning the template's `options` to what comes back from the server, you're actually reassigning your `vm.jsonData` to what comes back from the server which is entirely different. I've made an update to your example that works:\n\nhttp://jsbin.com/qawawe/edit?html,js,output (hopefully jsbin will work for you, I'm not a huge fan of codepen)\n. Great! Is there anything I could do to make the API easier to understand so that would have been easier for you to figure out? I want this to be dead simple\n. Doing that right now :-) Thanks for the help!\n. And it's live! http://angular-formly.com/#/example/other/async-select-options-with-controller\n. My username is: kentcdodds\nStill totally love jsbin. Thanks @remy!\n. Thanks for the update @jesperronn :-) I've updated my comment.\n. Definitely useful. `formlyBootstrap` doesn't support this currently. I definitely recommend that you create your own type for `select` because you obviously have some extra use cases that it's not supporting now. I recommend that everyone create their own types anyway. I've done this and I'll put that below. Maybe it will be instructive (note, it's written in ES6)\n\n``` javascript\nexport default ngModule => {\n  const template =\n    `<select ng-model=\"model[options.key]\" class=\"form-control\">\n      <option ng-if=\"!to.notNull\" value=\"\"></option>\n    </select>`;\n  ngModule.run((formlyConfig) => {\n    formlyConfig.setType({\n      name: 'select',\n      extends: 'azBase',\n      template,\n      defaultOptions(options) {\n        const forWithFilter = `for item in to.options | azDynamicFilter:to.filter:to.orderBy`;\n        let ngOptions = `item[to.valueProp] as item[to.displayProp || 'name'] ${forWithFilter}`;\n        const {valueProp, displayProp, options: items} = options.templateOptions;\n        if (items && typeof items[0] === 'string') {\n          ngOptions = `item for item in to.options | azDynamicFilter:to.filter:'toString()'`;\n        } else if (valueProp === null && displayProp) {\n          ngOptions = `item as item[to.displayProp] ${forWithFilter}`;\n        }\n        return {\n          ngModelAttrs: {\n            [ngOptions]: {\n              value: 'ng-options'\n            }\n          },\n          templateOptions: {\n            filter: 'orderBy',\n            orderBy: 'name',\n            displayProp: 'name',\n            valueProp: 'value'\n          }\n        };\n      }\n    });\n  });\n};\n```\n. If you want to add support for this in `formlyBootstrap`, please feel free to do so! I'm closing this issue though because this is not the formlyBootstrap repo.\n. Here's an example of how to do that :-)\n\nhttp://formly-js.github.io/angular-formly/#/example/other/disable-submit-button\n\nLet me know if you have any other questions :-)\n. Terrific question. The problem is that the `options.formControl` gets set in the controller function which will only run once and then never again. The problem comes with the `ng-if` which rips the input field out of the DOM. If the field starts in the read only state then you'll get this warning because the field is not part of the form's `formControls`. If you set `noFormControl` then that will get rid of the warning, however the `options.formControl` will never be set and you wont be able to show validation errors, etc.\n\nHowever! Angular will watch for when a new form control enters the DOM (when an ng-if evaluates to true and has an ng-model in it for example). So, what we can do is watch the form's property for the form control and add it to the scope/options ourselves! Yay!\n\nHere's an updated working example :-) Let me know if there's anything else I can help you with!\n\nhttp://jsbin.com/tinoxo/edit?html,js,output\n. By the way, I'm going to add this to our examples if that's ok with you. In the middle of making some updates to the website, but once that's done this will be part of the examples :-)\n. Closing this for now. Please feel free to reopen if I didn't answer your question :-)\n. This was just a test of issuetemplate :-)\n. Hi @maryampashmi! You simply need to include the apiCheck script on the page. If you're using script tags, make sure to add the one for apiCheck:\n\n``` html\n<script src=\"bower_components/api-check/dist/apiCheck.min.js\"></script>\n```\n. Make sure that this script tag is BEFORE angular-formly.\n. You're very welcome! Let me know if you have any other questions.\n. Yes, unfortunately this will currently not work. The `watcher` property is unique in that it is utilized in the `formly-form` directive, not the `formly-field` directive. The reason for this is that it allows your watcher to be active even if the field is hidden. However, because the `multiField` is iterating over the nested fields without using the `formly-form` (which it must to accomplish the advanced layout) so it is not able to take advantage of that property (sad day).\n\nHowever, I rarely use the `watcher` property in my own stuff at work because there's normally an easier/better way to accomplish what I'm trying to accomplish. For example, in your `templateOptions` you can specify an `onChange` which will add an `ng-change` to your `ng-model` element. This may work just as well for what you're going for.\n\nIf that doesn't work for you, you can always specify a `controller` or a `link` for the field and do the watch there. Again, this wont be operative when the field is hidden... So you could get creative and make a field that has a template of `template: ''` and _that_ has a `controller` or `link`. But that's a little crazy and I would be surprised if you needed to resort to this...\n\nFinally, there's always just adding the `$scope.$watch` in your own controller. Not awesome from a reusability standpoint, but that's an option.\n\nLet me know if you need any help with your specific use case.\n. You're welcome!\n. angular-formly is built entirely with webpack in mind. It would be significant effort to remove the webpack dependency. I'm curious to know why you have a problem how it's built...\n. I see what you mean. However, I think you've misunderstood. Even though angular-formly is built with Webpack, it's distributed using UMD, which supports AMD, CommonJS, and globals. For example, all the examples on the website are using basic script tags, so angular-formly will expose itself as a global in that case.\n\nPlease do some additional research to let me know why it didn't just work for you and I'll see what I can do to help.\n. I'm going to go ahead and just close this. Let me know if you still have issues with this.\n. Looks good. Thanks for your work on this! The one thing that I'll say is that you'll definitely need polyfills for things like `map`, and `forEach`, etc. But if you say that this is working for you in IE8, then that's awesome. I'll get this merged as soon as I'm able!\n. @koenweyn, you've guessed right :-)\n. @koenweyn, seriously, thank you for working on this. I really appreciate the help! I hope it's worth it for you!\n. Me too! Were you there?! Did I meet you?\n. Thanks for being a good bridge crosser/builder! :D\n. Definitely :D\n. Hey @koenweyn, I'm writing a blogpost that references this PR. Do you mind if I reference you in it? https://medium.com/@kentcdodds/78281ea47455\n. Thanks @rbfinch! Glad that you've found it useful. First, I should say that validators functions can return promises, so you could technically make a call to the server in your validator function. Would that solve your use case?\n. Sorry @rbfinch, I don't have time right now to look into this, and I can't think of anything off the top of my head, but I'll leave this issue open and try to get to looking at a better way later. I think I need a mailing list for people to help each other with stuff like this.\n. Mailing list? Fancy that! https://groups.io/org/groupsio/formly-js :+1:\n. @rbfinch, I do something similar. Do you think that there's something that angular-formly could do to make this easier for you? Seems like a reasonable use case that formly may be able to make easier.\n. @rbfinch, I'm going to go ahead and close this now. If your concern hasn't been resolved, please open it up again and we can chat :-)\n. Looking at that blogpost this is totally possible and would actually be easier with angular-formly. Unfortunately I don't have a lot of time right now to create an example for you. Perhaps someone on the @formly-js/angular-formly-collaborators or @formly-js/angular-formly-collaborators-read teams could help out...\n. Cool! Have you tried just using the built-in [fieldTransform](http://angular-formly.com/#/example/very-advanced/field-transform) feature?\n. Better if it were in a plugin. I won't bring this into formly. But a plugin\ncould add it easily.\n\nOn Thu, Oct 29, 2015, 4:40 PM gentledepp notifications@github.com wrote:\n\n> Hmmm... as I followed your approach I came across the next problem: The\n> serverside error is correctly applied to the formly-form field. (in my\n> sample case this is a \"the field username is required\" error).\n> However as soon as I fill in the \"username\" field, the server-error is not\n> removed and thus I cannot submit the form. So when the model of the field\n> changes, I need to reset the validationerrors. (especially the \"server\"\n> error)\n> Any hints on how you solved this?\n> \n> Also: This is still quite a lot of code to implement. I would really\n> appreciate if this functionality could be pulled into formly. E.g. by\n> allowing to specify a \"externalErrors\" object on the directive which in the\n> end is nothing different than your \"{ errors: [{ message: 'Unknown error'\n> }]};\" object. :-|\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/212#issuecomment-152347864\n> .\n> \n> ## \n> - Kent C. Dodds https://twitter.com/kentcdodds\n. Thanks!\n. Oh man, I'm in love with this. THANK YOU!!!\n. @raibutera, it looks like the shadow got cut off on the top and bottom if these images. Is there any way you could update the logo so the shading isn't cut off?\n\n![screen shot 2015-03-25 at 9 52 25 pm](https://cloud.githubusercontent.com/assets/1500684/6840174/407c0442-d339-11e4-9869-cd96db7a39f5.png)\n. Thanks a ton :D\n. Good point... So there are two options here. You can either setup the watcher yourself, which may not be a bad idea, or you could use `ng-hide` instead of `ng-if`. That comes with its own set of issues. What do you think?\n. @rbfinch, do you think this is acceptable or should we work on researching a better solution?\n. @rbfinch, good news! I totally forgot that I did this, but I changed the way that the `formControl` gets added to the `options` based on this use case. It now uses a `$watch` and will add the `formControl` after the fact. The example has been updated to use the latest version and shows that this works :-) http://jsbin.com/tinoxo/edit\n\nPlease re-open this issue if you still have problems.\n. @koenweyn, you're awesome. This is a terrific PR. One thing that could make it even better is a section about browser support in the README (and a note about the need to include polyfills). Do you think you could add this? Thank you!\n. You just commit and push to your branch. It'll get added automagically :-)\n. @koenweyn, GitHub has been experiencing a DDoS attack for the last day and a half (are people insane?) so I think this is why Travis has been having trouble.\n. Thank you so much!\n. This has been released as part of 4.2.1 (had trouble with 4.2.0) :-) Thanks!\n. Hi @Zjaaspoer! Thank you for your kind words!\n\nThe first thing I would check on is, are you using jQuery? Due to [this bug](https://github.com/angular/angular.js/issues/11038) in jqLite, you'll get this issue. The bug was fixed in [the latest beta version of 1.4](https://github.com/angular/angular.js/blob/master/CHANGELOG.md#140-beta6-cookie-liberation-2015-03-17)\n\nNot sure about any other workaround other than including jQuery :-( If you can find one, then that's awesome. But I think that's the problem you're experiencing. Sorry, debugging angular apps in codepen is a pain, which is why I prefer jsbin :-)\n. I totally agree with you, and think that you should wait for 1.4 to come out, rather than including jQuery (I think I have the same personal opinions). However, the project that I inherited was riddled with jQuery plugins, so I didn't experience this problem until I made [the demo](https://github.com/kentcdodds/angular-formly-convert/blob/master/index.html#L127) that you saw at ng-nl which is when I reported that bug.  :-) enjoy your beverage. I'm going to be sticking with water :-) cheers!\n. Just recorded 4 lessons. Should be up on egghead.io soon! :D\n. You'll see one of the new egghead.io lessons has been published :-) You'll find all (2) of the lessons on the [documentation website](http://docs.angular-formly.com/v6.1.0/docs/learn-angular-formly) enjoy!\n. P.S. More to come :-)\n. Another lesson is up! http://docs.angular-formly.com/v6.1.0/docs/learn-angular-formly\n. Hey everyone! There are now 8 lessons on [the egghead.io playlist](https://egghead.io/playlists/7) and the [Learn angular-formly](http://docs.angular-formly.com/v6.3.2/docs/learn-angular-formly) page. Please let me know if there are specific topics you want to know about. Right now I'm using analytics to know which lessons to record next, but it's starting to get pretty even now. Squeaky wheel gets the grease!\n. Going to go ahead and close this, but feel free to keep asking for lessons on specific subjects. I'm still listening :-)\n. Hi @DevanB, I'm no longer doing anything with angular-formly, so it's very unlikely that I'll make any more egghead.io lessons about it. Good luck.. Thanks! :D\n. If I understand your issue correctly, this is by design. If you wish it to show errors, you can set `validation.show` to true, like so: http://angular-formly.com/#/example/other/force-show-error\n. I'm going to close this now. Please re-open it if this doesn't solve your issue or if you have further questions.\n. I'm sorry @cdbizone. I really have no idea what your issue is... Please be more specific about the issue that you're experiencing. From what I can tell, everything is working as designed...\n. Oh, so if you can hide the iframe based on the `$valid` property of the form. This is similar to how you would [disable a submit button](http://angular-formly.com/#/example/other/disable-submit-button) (except you'd use `ng-if` instead of `ng-disable`). Does that answer your question?\n. Ok, I understand what you're talking about now. So this is what I would do: http://jsbin.com/fivuqa/edit\n. Yeah, just barely noticed this too! I broke this in 5.0.0. Fixing now!\n. Thanks for creating the issue. I was just about to create one so I could reference it in my commit. Should be about 10 minutes or so before I have the fix released. Thanks for your patience!\n. Released! Thanks!\n. It's 5.0.1\n. Uh oh... Yeah, totally still broken\n. Give me a second... My test wasn't correct.\n. @ValentinH, thank you for your patience! This was pretty irresponsible of me. I promise this is not normal :-)\n. Ok, it's fixed for real in 5.0.2. Once rawgit's cache is updated, all the examples should be fixed. You can `npm install angular-formly` or `bower install angular-formly` (you may need to clear your cache)\n. Thank you for YOUR reactiveness in reporting the issue :-) Great! Please let me know if you need any help!\n. Thanks for letting me know. I'm working on a fix. Duplicate of #222.\n. FYI, this is fixed as of 5.0.2. Thanks for your patience!\n. Thanks! Let me know if you need any additional help!\n. Don't have time to explain, but angular-formly doesn't do well when you swap out the `fields` after it has rendered the form. I think that's what you're doing...\n. I'm thinking that #225 is what you're actually interested in doing, so I'm going to close this one.\n. Yeah, because it's invalid, it technically doesn't have a value, so angular wont update the `$viewValue`. This is an angular problem. You may just have to update the `$viewValue` yourself :-(\n. Great question... #168 is wondering about supporting this in the core... I think it may be nice. Basically it would require making a copy of the `model` on first render, then exposing some kind of function (probably on `options`) that could be called to reset the model to its original state. Would have to handle the `model` property of `field`s as well... Do you think that angular-formly is the right place to do that?\n. Alright, I think I've got this fixed. If you could please try this out, that would be great. I've made a beta release that has this feature. Please let me know if this fixes the issue for you. `npm install angular-formly@5.2.0-beta.1`\n. Sorry, should have given an example or docs. Here you go!\nhttp://angular-formly.com/#/example/form-options/reset-model\n. Ok, that's good to know. It shouldn't break if your model is null. I'll fix that. `resetModel` shouldn't impact the actual field itself. That wouldn't make sense in the api. And I was thinking about adding a `resetFields` method, but I don't think that would really make sense either...\n\nLet me fix the null problem and then I think we're good to release this officially. What do you think?\n. There you go. Officially in 5.2.0!\n. Update, use 5.2.1 instead...\n. @SagiMedina, this is being tracked in #246. Unfortunately it's not as easy as you might think...\n. I think that you could very easily combine angular-formly with [angular-wizard](https://github.com/mgonto/angular-wizard). Let me see if I can make an example sometime. Or, if you want to, feel free to [try making one yourself](http://jsbin.com/panovu/edit?html,js,output)\n. Added an example of integrating this with [angular-wizard](https://github.com/mgonto/angular-wizard) by @mgonto: http://angular-formly.com/#/example/other/angular-wizard\n\nI think that's the best we can do right now.\n. This looks awesome! Thanks for the contribution!\n. Still accepting new submissions! But it's on the angular-formly-website repo and I want to clean up these issues.\n. :+1: \n. ping @mikeerickson :-) weekend project? ;-)\n. ping? :-)\n. :P, I'll stop bugging you about it. I appreciate all that you can do!\n. :+1: \n. :+1:\n\n-Kent C. Dodds\n\nOn Tue, May 19, 2015 at 11:50 AM, Mike Erickson notifications@github.com\nwrote:\n\n> @kentcdodds https://github.com/kentcdodds still alive, just wrapping up\n> some client work and then I will move my efforts to formly\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/229#issuecomment-103612975\n> .\n. @mikeerickson maybe this weekend? :-)\n. :+1: would love to get offline docs working. That'd be an awesome addition to the library.\n. Maybe this weekend @mikeerickson? :-)\n. I'm cleaning up issues and it doesn't look like this one's going to happen. Feel free to prove me wrong!\n. angular-formly does a lot of stuff to render your fields and it doesn't to great when you modify the fields after the initial compile (as @ValentinH has discovered as well). I'm starting to think that modifying fields order/entirely after compile may be something I need to look at supporting better.\n\nFor now though, perhaps you could describe what you're trying to accomplish and I can give you a useful work around.\n. That sounds awesome! Would you like to [build this](https://github.com/formly-js/formly-builder/issues/1)? I would totally love that!\n\nFor your case, I think you may just want to recompile things every time you change something. Take a look at [kcd-recompile](http://kent.doddsfamily.us/kcd-angular/#/kcd-recompile)\n. The problem is that some templates use singly bound expressions (like `::to.label`) for example. So with those, you HAVE to recompile the entire template. So kcd-recompile should help you with that.\n. I would do something like:\n\n``` html\n<div kcd-recompile=\"newFormClone\">\n  <formly-form model=\"newFormData\" fields=\"newFormClone\">\n    <button ng-hide=\"newForm.length==0\" type=\"button\" class=\"btn btn-default\" ng-    click=\"onSubmit()\">Submit</button>\n  </formly-form>\n</div>\n```\n\nThen I would alter `kcd-recompile` to use a deep watch.\n\n``` js\nangular.module('kcd.directives').directive('kcdRecompile', function($compile, $parse) {\n  'use strict';\n  return {\n    scope: true, // required to be able to clear watchers safely\n    compile: function(el) {\n      var template = getElementAsHtml(el);\n      return function link(scope, $el, attrs) {\n        var stopWatching = scope.$parent.$watch(attrs.kcdRecompile, function(_new, _old) {\n          var useBoolean = attrs.hasOwnProperty('useBoolean');\n          if ((useBoolean && (!_new || _new === 'false')) || (!useBoolean && (!_new || _new === _old))) {\n            return;\n          }\n          // reset kcdRecompile to false if we're using a boolean\n          if (useBoolean) {\n            $parse(attrs.kcdRecompile).assign(scope.$parent, false);\n          }\n\n          // recompile\n          var newEl = $compile(template)(scope.$parent);\n          $el.replaceWith(newEl);\n\n          // Destroy old scope, reassign new scope.\n          stopWatching();\n          scope.$destroy();\n        }, true); // <-- that\n      };\n    }\n  };\n\n  function getElementAsHtml(el) {\n    return angular.element('<a></a>').append(el.clone()).html();\n  }\n});\n```\n. This worked \"like a charm\" for @joezhouOxford in https://github.com/formly-js/angular-formly/issues/246#issuecomment-95852663 so I'm going to close this issue. Let me know if there are further questions\n. I didn't realize that 1.2 didn't support `$touched`. Nice catch. Thanks! I like the second recommendation. Would love the PR :-)\n. Thanks for the PR, but I neglected to merge it before I made some changes that made it difficult to merge (my bad!). Sorry about that! Thanks for providing the answer! This is now supported in 5.1.1\n. The docs are available for me...\n\n![screen shot 2015-06-09 at 3 28 27 pm](https://cloud.githubusercontent.com/assets/1500684/8070098/334ee9e2-0ebc-11e5-84b1-4320eafe4ec5.png)\n. @pmowrer, thanks for the issue. I had intended on fixing this because I was upgrading my own app to the beta versions, but I forgot. I'll have this fixed shortly.\n. Just ran:\n\n```\n~/Desktop\n\ud83d\ude04  $ npm i api-check\napi-check@6.0.11 node_modules/api-check\n~/Desktop\n\ud83d\ude04  $ npm install angular@1.4.0-beta.6\nangular@1.4.0-beta.6 node_modules/angular\n~/Desktop\n\ud83d\ude04  $ npm install angular-formly\nangular-formly@5.1.2 node_modules/angular-formly\n~/Desktop\n\ud83d\ude04  $ \n```\n\nLet me know if you have problems.\n. Glad it works! Let me know if you have any questions!\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Apr 8, 2015 12:52 PM, \"Patrick Mowrer\" notifications@github.com wrote:\n\n> Wow, thanks for the extremely quick fix @kentcdodds\n> https://github.com/kentcdodds! Verified it works on our end as well.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/235#issuecomment-90972980\n> .\n. You are correct, this would have a huge impact... I'm about to cut a 5.2.0 release. I'll see if I can get this fixed as part of that.\n. You mean, a second one that doesn't do the `|| modelValue`? I'd have to give that some thought... Let me play around with that, this may be worthy of a breaking version change...\n. I thought there was, but now I can't remember why I had it. I'll give it a little thought and testing, then I may release a 6.0.0...\n. If I remember correctly, it was simply intended to be a convenience, but\nnow I realize that it's more of a problem than it is helpful. I'll double\ncheck, and likely push a breaking change version to fix that.\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Apr 9, 2015 10:24 AM, \"Koen Weyn\" notifications@github.com wrote:\n\n> And that would solve this bug.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/236#issuecomment-91246952\n> .\n. Ok, this and several other things (see the changelog) have been changed in angular-formly 6.0.0-beta.2. If you could please try this out, that would be great. Thanks!\n. Thanks! Missed that. Glad I only did this in a beta release :-)\n. It's been updated in 6.0.0-beta.4. Anything else you'd like to see changed in a major version change?\n. Alrighty, officially released in 6.0.0 :-)\n. Thanks for letting me know. apiCheck just had a breaking change and I forgot that all the examples run off of master. I'll go fix those now!\n. Fixed. Thanks again! I really need to develop a better way to keep all of the examples dependencies in one place. It may be nice to have them all run on the latest _stable_ version somehow...\n. :smiley: haha! which talk did you see?\n. Haha! The exercise lives on! Thanks for using angular-formly. Please let me know if you have any other needs!\n. The `expressionProperties` are `formlyExpressions`. See the docs here: http://docs.angular-formly.com/v5.2.1/docs/formly-expressions\n. Let me know if you need more assistance :-)\n. @hmendezm, the best way to get help is to create an example using http://help.angular-formly.com. Just looking at your code, it appears that it should work fine. So an example is more helpful.\n. Wait, so are you trying to do [this](http://jsbin.com/tovevo/edit?js,console,output)?\n. Ah, maybe this will point you in the right direction: http://jsbin.com/yubato/edit?js,output\n. Yes, this is totally possible! And I recommend doing things this way too! :-) Personally, I use the `data` property for the parameters, but you can do it however you like. You'll use [`defaultOptions`](http://docs.angular-formly.com/v5.2.1/docs/custom-templates#formlyconfig-settype-options) which can be an object or function. Here's [an example](http://angular-formly.com/#/example/custom-types/default-options).\n\nPlease reopen this issue if you need more help.\n. It's loading fine for me. But you're not the first one to mention issues today. I wonder if iwantmyname.com is experiencing issues... Can you look at the network tab and see if there are DNS issues?\n. Wait, just to confirm. For you, the site is actually working, but the embedded examples are failing, is that right?\n. Ok, then it sounds like your computer is having difficulty with jsbin... This could be the result of a few issues. Perhaps your IP address has been blacklisted (that's happened to me before). ping @remy\n. Thanks for telling me about the view which excludes whitespace. Otherwise I would have looked at this and just been like: \"dude, there's no way I can review this thing... sorry\" haha.\n\nI actually really like it. Though I really like to require my test inside the file that I'm testing, I think for a small project like this, it's not really that big of a deal. It should also resolve #186 which is a plus.\n\nIf you could make the few updates I mentioned, I'll pull it down and double check everything, then I'll make this part of the official 6.0.0 release. Thanks!\n. Thank you for the PR! I think this is going to be a good change.\n. [I found a few jshint issues](https://github.com/formly-js/angular-formly/commit/a7a5fc1653e13338fbb5b399822ec65d647e414c). Also, when minified, ng-annotate doesn't annotate the functions properly. Could you add the `@ngInject` annotation to the injectable functions please? Then I think we'll be good to merge this in! Thanks!\n. I rebased these changes locally and pushed! These changes are live in 6.0.0-beta.8! Thanks a ton!\n. The problem is that angular-formly does a lot of things to your fields at compile time. If you reassign the fields after the form has been compiled, then that will cause a problem for you (as you can see).\n\nSo, instead of changing the fields, create another `formly-form` that will receive those new fields when they arrive. Put this behind an `ng-if=\"theNewFields.length\"` so it only gets compiled when those fields are assigned.\n. Thanks! Let me know if there's anything I can do to make things easier for you!\n. Love it! Thanks! You've been an awesome contributor ([bridge crosser/builder](https://www.youtube.com/watch?v=dJFV8wFU23A))!\n\nLooking at the commits, it looks like you have a few extra commits in there which are bringing your repo up to date with angular-formly. Would really appreciate this PR to be a single commit to keep the history clean. Could you resubmit a new PR that just has a single commit with the changes? Thanks again!\n. The quick and easy way is to just delete your fork and refork :-)\n. Thanks a ton! This is great :-)\n. I'll have the example on the site next time I update (should be later today)\n. This has been deployed! http://angular-formly.com/#/example/other/toggle-required\nThanks!\n. Thanks for using formly! You're not alone with this issue. Normally I've just explained that formly does some stuff at compile time and you can't just switch out the fields, but now I'm starting to think that this is a pretty common use case and people need this to work more seamlessly. So, I'm going to see how we can make this work with angular-formly without workarounds. I'll keep you informed.\n. Started work on this. Not sure how I'm going to accomplish it. It's in [this branch](https://github.com/formly-js/angular-formly/tree/feature/246-dynamic-fields). Feel free to take a look if you want :-)\n. Unfortunately a workaround like that wouldn't work. The validation issue is a side-effect of the real issue which is that the new fields aren't initialized properly.\n. Another workaround would be something [like this](https://github.com/formly-js/angular-formly/issues/230#issuecomment-90579649). I have a branch (as mentioned above) that I'm working on to make this possible by reinitializing the fields manually. This may be possible. But it will be a little difficult. Still more work to be done there.\n. whoops, this issue is still open and I'm still working on it...\n. @s992, that sounds like a reasonable solution for most use cases. I'll get this in as soon as I am able (probably by tomorrow). Thanks for your patience!\n. Note: master has the unreleased 6.1.1. Please see the [Changelog](https://github.com/formly-js/angular-formly/blob/master/CHANGELOG.md#611). The track by behavior changed (defaults to nothing), and you can also now specify your own track by:\n\n``` html\n<formly-form model=\"model\" fields=\"fields\" track-by=\"$index\"></formly-field>\n```\n\nor \n\n``` html\n<formly-form model=\"model\" fields=\"fields\" track-by=\"field.key\"></formly-field>\n```\n\nor\n\n``` html\n<formly-form model=\"model\" fields=\"fields\" track-by=\"vm.trackWhateverIWant(field)\"></formly-field>\n```\n\nI'm now waiting on @s992 and @n0rb to tell me how this supports your use case before I do an official release. Thanks!\n. If you do break it, feel free to [add a failing test](https://github.com/formly-js/angular-formly/blob/master/src/directives/formly-form.test.js#L212) and I'll take it as a challenge :-)\n. So, I just realized that by adding this new functionality, it actually allows you to totally swap out fields! I had no idea that the `track by $index` was the culprit here! Please still let me know when you've tested it out, but I'm pretty confident that between [this test](https://github.com/formly-js/angular-formly/blob/e2178dccf6f97d2d51febba8cbf453e090d482d4/src/directives/formly-form.test.js#L108) and [these tests](https://github.com/formly-js/angular-formly/blob/e2178dccf6f97d2d51febba8cbf453e090d482d4/src/directives/formly-form.test.js#L221-L274) we should be covered :-D\n. Thanks!\n. I'm guessing that you figured out the issue because you closed it correct?\n. Busy right now. Will probably have to wait until tomorrow to get to this. Thanks a ton!\n. I'm going to close this. Code coverage is now supported. Still working on coveralls integration (travis is having trouble) but you'll be pleased to hear that we're actually pretty well covered.\n. Looking at the report it's actually only reporting on the index.test.js file which contains all of angular, api-check, and angular-mocks, as well as angular-formly... Do you know of any way to make the coverage plugin leverage sourcemaps or something to make sure that 1) we're only reporting coverage for angular-formly files and 2) it reports coverage for the specific files, not just the entry file?\n. Thanks! You're awesome! :-)\n\n-Kent C. Dodds\n\nOn Thu, Apr 16, 2015 at 11:29 PM, Ryan Dunckel notifications@github.com\nwrote:\n\n> I'll take a peek at this and circle back!\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/pull/250#issuecomment-93896209\n> .\n. I think I've figured out a way to get coverage to exclude non-library related files. I tried it out in [angular-scope-types](https://github.com/alianza-dev/angular-scope-types/blob/master/karma.conf.js) (WIP). Just need to take the time to do it in angular-formly.\n. Finally done!\n. Hmmm... Sounds interesting. Do you think that you could provide an example use case for me so I understand what you're trying to accomplish?\n. By the way, I'm thrilled that you're using this feature. I'm pretty sure it's one of the coolest features of angular-formly that few people understand/know how to use. It's pretty dang powerful.\n. Ah, I see what you're saying... One second...\n. Check it out :-) http://jsbin.com/xeguxi/edit\n. Note! For the love of everything good in the world. Don't go deeper than 3 levels of extends :-)\n. Dude, you're awesome. Thanks! This will be in the next beta release of 6.0.0. Thanks!\n. This is a tough one... What version of angular are you running?\n. Ok, this is the best I can do. And it only works in angular 1.3 ... Will that work for you?\n\n``` javascript\nit(`should allow the user to specify their own name for the form`, () => {\n  compileAndDigest(`\n    <form name=\"parent\">\n      <div ng-repeat=\"forms in [1, 2] track by $index\">\n        <formly-form model=\"model\" fields=\"fields\" bind-name=\"$parent.$index + '_in_my_ng_repeat'\"></formly-form>\n      </div>\n    </form>\n  `);\n\n  expect(scope.parent).to.have.property('formly_0_in_my_ng_repeat');\n  expect(scope.parent).to.have.property('formly_1_in_my_ng_repeat');\n});\n```\n. Doing this would be possible with angular 1.2, but it would involve completely recompiling the entire template once the correct ID was generated. This would be enough of a performance hit that it wouldn't make it worth it I think. I'm just hoping that you're using 1.3 right now... :-)\n. Note, the way it works is it sets the `name` attribute of the `ng-form` to `{{::'formly_' + ${attrs.bindName}}}`. The reason this only works in >= 1.3 is in 1.2, the `name` attribute can't be dynamic. :-(\n. Here's the implementation: https://github.com/formly-js/angular-formly/commit/94f82860310c5ae0d3ec17ea0c4427b0d252d6b4\n\nLet me know what you think, or if you think there's another way to accomplish this...\n. Ok great. I'll merge it in then. Thanks for providing a failing test. That was awesome.\n. This is now part of 6.0.0-beta.10. Hoping to get out of beta soon. Still working out a few kinks.\n. This is closed as illustrated in the test! Let me know if you have trouble!\n. Good catch! Thanks @sparty02! You don't think this needs to be officially released do you? It doesn't cause an issue for consumers of the library right?\n. Ah yes, it actually DOES need to be there so it will install (specifically in future versions of npm when npm doesn't auto-install `peerDependencies`). So I'll go ahead and fix it and release a new version for good measure. Thanks!\n. While that's true, the problem with making it a `dependency` is that when I `npm install angular-formly` it will add `api-check` to `node_modules/angular-formly/node_modules/api-check`. But if I want to use `api-check` in my own project as well, then I will run `npm install api-check` which will install it in `node_modules/api-check`. Now I have two versions of `api-check` in my app.\n\nPeer Dependencies was created to solve this problem. Not only does it prevent me from having duplicate dependencies, but it also provides me the freedom of choosing which version of the dependency I want (as long as it satisfies the `peerDependency` which `angular-formly` enforces to ensure it works properly).\n. I'm starting to feel alone in the \"I love peerDeps\" camp... haha, several tweets and rage posts about them. I've never run into the problems that others seem to have run into. Perhaps you're right. I may consider it a bug fix as part of 6.0.0...\n. Re-opening so I keep this on my mind.\n. Max, I'm not sure I understand what you're suggesting. So, are you\nrecommending that we stick to peer dependencies?\n\nI'm leaning toward leaving angular as a peer dependency and moving apiCheck\nto a normal dependency.\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Apr 18, 2015 11:44 AM, \"Max Sysoev\" notifications@github.com wrote:\n\n> @kentcdodds https://github.com/kentcdodds No one refuses to remove this\n> section (peerDependencies). It will remain, but change behaviour. I\n> should notice here that it's more friendly way to conflict resolving. (I\n> faced peerDeps conflict many times. Really frustrating thing)\n> \n> Yes, now we should maintain peerDeps manually, but it's more transparent.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/pull/253#issuecomment-94186919\n> .\n. @linclark, do you mind weighing in here?\n\nJust for background, angular-formly is a forms library for AngularJS. It depends on Angular (obviously) and a Vanilla JS library I wrote called [api-check](https://github.com/kentcdodds/apiCheck.js). So, in a sense, it's an angular \"plugin\" that has an extra dependency.\n\nI'm now thinking that I want to continue to have as loose requirements as possible for `peerDependencies` so I keep the warnings. But I'm thinking that maybe I'll include `dependencies` so the dependencies are installed by default. Then consumers can simply use `npm dedupe` to deal with duplicated dependencies.\n\nI just don't like the idea of forcing people to do something extra to consume my library, but in npm@3 the peerDeps wont be installed by default anymore so they'd have to install those deps themselves anyway. So I'm torn.\n\nAlso, there are several template libraries for angular-formly that depend on angular, angular-formly, and api-check. And the angular-formly-templates-material library will also depend on angular-messages, angular-aria, and angular-material. Should all of those be peerDeps and/or regular deps?\n\nJust want to do the thing that allows the most flexibility and ease-of-use for consumers of the library. I may create a blogpost based on what I decide to do.\n\nThanks for any advice you can give @linclark :-)\n. Awesome. I think that npm is going to with the package management game for all of JavaScript (at least, I really want it to). So this would be awesome.\n\nSo am I safe to say that for now, for frontend modules, dependencies should always be listed as `peerDependencies` with as loose version requirements as possible?\n\nFor now, I think I'll just use `peerDependencies`. I'll also have them as `devDependencies` so I can do my testing during development, but that shouldn't impact users of the module so that's no problem.\n\nThanks for the help @linclark.\n. Going to stick with really loose requirements on the `peerDependencies` and require you to install the dependencies yourself when npm@3.0.0 comes out. #knowyourdependencies :-)\n. Thanks!\n. I can't rebuild the site right now, but it should be up on the site in the\nnext day or so.\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Apr 18, 2015 10:43 AM, \"Hugues Stefanski\" notifications@github.com\nwrote:\n\n> Most welcome!\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/pull/254#issuecomment-94179846\n> .\n. how's this? http://angular-formly.com/#/example/advanced/repeating-section\n\n-Kent C. Dodds\n\nOn Mon, Apr 20, 2015 at 9:57 AM, rama notifications@github.com wrote:\n\n> I would like an example that demostrates: dynamically add remove items,\n> kind of todo model.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/256.\n. Thanks. The example has been updated. Let me know if it is not sufficient.\n. @abodacs That key is specific to that example. But it's because the key for the field, that's why it needs to be on the model.\n. This is a bit of a poor example. But part of the repeatSection type depends on their being a value initially because it copies the previous section to make the next one. It fails when there's not an existing previous value. You could easily alter the type so this doesn't happen.\n. I updated the example. Go ahead and play around with it. Should work now.\n. Migrated: https://github.com/formly-js/angular-formly-website/issues/21\n. Are you loading api-check _before_ you load angular-formly?\n. Thanks for checking on that. Do you think you could create an example of the issue using [this jsbin](http://jsbin.com/biqesi/edit) as a template?\n. Thanks! Thanks for enduring the pains of upgrading. Looking forward to your example.\n. I just noticed this is a small app I was upgrading and it happened because I didn't change the script tag that's loading apiCheck. In apiCheck 7.0.0, the name of the file changed from `apiCheck.js` to `api-check.js`. Make sure that you've updated the file you're loading.\n. Good point. It's likely that most angular-formly users think little to nothing about api-check. Thanks for the feedback.\n. So, I think the better solution would be to make this render faster. If you look at `ng-stats` with `logDigest` turned on, you'll see that when you render a form, there are a TON of digests that run. We need to figure out why that is and see if we can make it so only one digest runs. This is high on my priority list because the initial compile of the form fields is just really terrible and needs improving. I'll keep you informed of my progress.\n. That wont be necessary... I have a pretty good working example locally that I'm working though. I think the main trouble is simply the way angular works... But I'm confident that we can find a work around to make this much faster.\n. First off, I should say that I'm not going to implement the original question. Not only is it the incorrect way to go about solving the problem, it's also pretty much impossible without some bad hackery against angular.\n\nSecondly, if anyone wants to contribute to this at all, see [this branch](https://github.com/formly-js/angular-formly/tree/throw-away/fast) where I've started trying to setup some kind of benchmark to test out how to make it faster. Again, I think that it's just an angular problem... Need to figure out a good workaround...\n. By the way. If you would like to be notified when all fields have finished loading, then you _could_ implement something that would probably work by adding a custom `link` function to all your fields by creating a custom `type` that all of your other field types `extend`. Then in that `link` function, you have access to the field `scope` which has an `options` property for the specific field and a `fields` property for all the fields of the form. Set something on the `options.data` property to say that the specific field has been loaded, then iterate through the `fields` to see if all of the fields have had that property set. If they have, then fire an event.\n\nAs I said, this is a terrible way to go about this. Also, the UI thread is still going to be tied up with angular's digest cycle (so users will likely notice that), but it at least gets you what was originally requested...\n. I'm not sure what you mean by that last bit there...\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Apr 27, 2015 7:33 AM, \"XciD\" notifications@github.com wrote:\n\n> Thanks for your answer.\n> \n> We just found that if we remove template that works with ocLazyLoad\n> https://github.com/ocombe/ocLazyLoad the form render faster and enough\n> quick for us.\n> \n> We had some directive with ocLazyLoad to load dependencies on the fly like\n> select2 or datepicker, and they trigger the link function before rendering\n> on front.\n> \n> We fix this by loading all our component in the resolve of the route...\n> Not the best solution.\n> \n> I think you should consider to implementing a state variable to the Formly\n> directive.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/259#issuecomment-96653263\n> .\n. Changing the name of this to resemble what the solution will be. Also, if anyone wants to take a whack at a solution, I've created [this example](http://jsbin.com/kudixe/edit) which demonstrates where formly falls over (though, to be honest, I think it's more of an angular problem than a formly problem).\n. @pedrocatre, take a look at using [ng-stats](https://github.com/kentcdodds/ng-stats) to do a quick manual benchmark of the performance of your page with > 100 fields. The idea behind formly is that you only pay for watchers that you absolutely need. So, even though it takes angular a while to compile the template in the first place, you should end up with the fastest possible output for forms using angular.\n\nIt is my expectation that you can't build a faster form with angular even if you hard-coded the HTML it produces. I have never tested this though. I do expect that a hard-coded version would be _marginally_ faster, but not enough to justify not using angular-formly. I would love it if someone verified my expectation. If it turned out incorrect, it would give me hope that there's something formly can do to speed things up.\n. Note, you can use `ng-model-options` with formly using the `modelOptions` property.\n. Hoping to work on this soon. I have s lead that looks promising...\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn May 14, 2015 1:51 PM, \"Pedro Catr\u00e9\" notifications@github.com wrote:\n\n> You can use ng-model options so that the value only updates on blur or\n> after several milliseconds.\n> You can also try to remove the number o bindings in your templates (for\n> example: I would have liked to have bindings to change the classes on the\n> form so I can customise it to different uses but I can live without all\n> that. Finally use one time binding for everything that can be one time\n> binded.\n> \n> Additionally you could divide the form into steps (there is an example of\n> using angular form with a multistep wizard) so that you don't have all the\n> watchers for the form active at the same time. The wizard being used in the\n> example uses ng-show and you don't want this though. But it is simple\n> enough to go into the source code and change it to use ng-if. Hope this\n> helps.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/259#issuecomment-102149446\n> .\n. I think that the problem may be the promise chaining in the `link` function of a `formly-field`: https://github.com/formly-js/angular-formly/blob/master/src/directives/formly-field.js#L187\n\nI believe it's because on every `resolve`, there's a `$digest` due to the `$q` library. I reached out [on twitter](https://twitter.com/kentcdodds/status/598924680938921984) and got a few tips that lead me to develop these different examples\n\nCurrent: http://jsbin.com/kudixe/edit \n$$q: http://jsbin.com/fikeku/edit \nNative Promise: http://jsbin.com/pizizi/edit \n\nUnfortunately, I don't think that these are making a difference currently. I welcome anyone to try variations of this and try to figure out how to fix the problem...\n\nTo try something out:\n- Checkout the repo\n- `$ npm install`\n- Make your changes (it's ES6)\n- `$ npm run build` (don't bother with tests, we can fix those later)\n- Create a github gist out of the resulting `dist/formly.js`\n- Use http://rawgit.com/ to get a url to your gist\n- Clone [this template](http://jsbin.com/kudixe/edit)\n- Replace the `formly.js` file with your rawgit URL.\n\nDid it work? I hope so!\n\nIf you want to try a few things out and have a better workflow, try this:\n- `$ npm run watch`\n- `$ http-server dist` [http-server](https://www.npmjs.com/package/http-server)\n- `$ ngrok 8080` [ngrok](https://ngrok.com/)\n- Replace the rawgit URL with your ngrok url\n- Make changes, refresh your jsbin.\n\nI appreciate anyone who wants to help out with this!\n. By the way @cnaccio, that's a LOT of fields... I don't know if you'd get good enough performance doing it by hand with just angular...\n. you might look into the [read-only](http://angular-formly.com/#/example/other/read-only-form) example. Never used x-editable myself...\n. Hmmm, looking at x-editable, I don't think that the read-only example will really do it for you... I would probably just create a directive that integrates with x-editable, then create a custom type with a template that uses this directive.\n. @jvandemo, wow! Thanks for setting up the plunkr and the improved example with a setTimeout/$timeout. Unfortunately, I tried it out in my app and it's hard to describe but the user can visually see things getting rendered which isn't very pretty. Kind of a toss-up which is a better experience.\n. I should also mention, there's one place in particular where performance in my app is not so good due to a lot of fields being rendered. @paulirish helped me interpret some Chrome profiling output for it. Perhaps this will be useful to anyone trying to help speed up angular-formly: https://docs.google.com/document/d/1QSkfqoiZS203BG5hTELTt1GvyD1qc9rDXOpMym9IKlw/edit?usp=sharing\n. Also, I just want to say thank you to anyone helping on behalf of the many developers using angular-formly. Most developers wont come up against these perf issues, but for those of us trying to display many fields, this is definitely a problem. So thanks to anyone who puts time and effort into improving the performance of angular-formly.\n. One thing that I've toyed around with is perhaps compiling everything from the `<formly-form>` element down manually and then inserting it into the DOM after all the field templates have been resolved. I'm a little sceptical that this would really improve performance though. Just a thought.\n. @jvandemo, for the benefit of those watching at home, [this is the code](https://github.com/formly-js/angular-formly/blob/master/src/directives/formly-field.js#L187-L201) that we're talking about. I believe that this is the bottleneck of the render. It's inside of the `formly-field` directive's `link` function.\n\nHere it is with annotations\n\n``` javascript\ngetFieldTemplate(scope.options) // <-- get the template for the field based on it's template/templateUrl or it's type's template/templateUrl\n  .then(runManipulators(formlyConfig.templateManipulators.preWrapper)) // <-- run the preWrapper templateManipulators. This is an array of functions that can return a (modified or unmodified) template string, element, or a promise which resolves to one of these things. We $q.all a $q.when of each of them\n  .then(transcludeInWrappers(scope.options)) // <-- this will \"transclude\" (but not really) the template into any of its own or it's type's wrappers, similar in function to a template manipulator\n  .then(runManipulators(formlyConfig.templateManipulators.postWrapper)) // <-- like the preWrapper manipulators, just another place to put manipulators in the pipeline for maximum flexibility\n  .then(setElementTemplate) // <-- this is where the template is finally $compiled and inserted into the DOM\n  .then(watchFormControl) // <-- this is where we set up a watcher to add the NgModelController to the options. I would be very surprised if this was part of the problem in itself.\n  .then(callLinkFunctions) // <-- this is where we call the field's link function and its type's link function (and any link functions that type extends).\n  .catch(error => {\n    formlyWarn(\n      'there-was-a-problem-setting-the-template-for-this-field',\n      'There was a problem setting the template for this field ',\n      scope.options,\n      error\n    );\n  });\n```\n. Tried commenting out the templateManipulators and wrappers and it made a marginal difference [in the plunk](http://plnkr.co/edit/9hLpoPeKCcEOXUCRtyI1?p=preview) but pretty much no difference in my app...\n. I feel like if there were a way to tell angular to pause digests for just a moment while this thing compiled, that would improve things. But that may just be me misunderstanding how compiling things works. Maybe @teropa could provide some insight there?\n. Yeah, I looked at that too. Unfortunately, you can still see the fields getting rendered one-by-one and suddenly appearing. I really want to find a solution where it's all suddenly rendered immediately. I just hope this is something that's possible with angular... Starting to wonder if perhaps changing this to not use promises would improve the situation... Unfortunately, the async api is one of the things that makes angular-formly so consumable.\n. Toyed around with the idea of having two different link functions and using one or the other based on some pre-configured preference. Most developers wont run into this, but if you do, then you may be willing to give up the niceties of the async api for improved performance (if that's what we'd really get by removing the async api...)\n. I think I understand what we think the problem is. You're suggesting that the problem is that a `$digest` is being called for every promise for every field (which can be huge as a single field could have as many as 10 or more promises). That's what you're suggesting, correct? I think that's what it is as well...\n\nWhat I don't understand is how putting those promises into a queue outside of the link function will prevent a `$digest` from being called after they are each resolved. The only thing I could think of to avoid that was to either use `$$q` or the native `Promise` (or a polyfill) and trying those didn't seem to make a difference.\n\nI think I may just be misunderstanding though.\n. Thanks @kentcooper (awesome name by the way). I've been wanting to benchmark this against doing angular forms by hand (without formly) to see if formly is any worse than regular forms. I always believed strongly that it wasn't much worse, but never had any evidence or tested the theory.\n\nTo be perfectly honest, based on what @kentcooper has said, I'm doubtful that we can improve the performance without doing some serious hackery-trickery with angular... It's not a formly problem, it's an angular problem...\n. Thanks for the help guys! I've spent a little bit of time trying to time things a little better. I'll have time to work on it more later.\n. So I was thinking that maybe the problem is the promise chain. So I created a new feature called `syncMode` which allows you to tell formly that you don't use `templateUrl` or need async support for your template manipulators. It's actually pretty neat. I have [a branch](https://github.com/formly-js/angular-formly/tree/features/syncMode) for it if you're interested in seeing what it takes to support. Wasn't a TON of work... Just a bit of work... Here's [the diff](https://github.com/formly-js/angular-formly/compare/master...features/syncMode?w=1)\n\nUnfortunately... It doesn't make a lick of difference... http://output.jsbin.com/tawaxa/edit\n\nI've all but determined that what's slow here is angular, not angular-formly... Someone please prove me wrong! Many apps need this to be faster...\n. Good point. Hadn't thought about disabling api-check for these perf tests. I'll add that to the most recent plunk...\n. Looks like it speeds it up by 2-3ms per field!\n\nhttp://plnkr.co/edit/SyBNyZjF1XDo6wsDobj4?p=preview\n\nIt's definitely recommended to turn off api-check in production... To do so, see the [api-check docs](https://github.com/kentcdodds/api-check#disable-apicheck)\n. I'm going to go ahead and close this issue. If someone wants to try to figure out how angular-formly could be improved from a performance standpoint on something specific, that would be great, but I don't see this issue going anywhere at this time.\n. Let me know if this one's not enough :-) http://angular-formly.com/#/example/intro/introduction2\n. @wfsm, sorry, I renamed it: http://angular-formly.com/#/example/intro/codementor\n. oh, and here's an example of two fields not matching: http://angular-formly.com/#/example/other/matching-two-fields\n\nFor min/max length, you'd simply use:\n\n``` javascript\n{\n  type: 'input',\n  key: 'whatever',\n  templateOptions: {\n    minlength: 4,\n    maxlength: 10\n  }\n}\n```\n. Thinking this will make formly too complex to make it worth it. So I added the `hide-directive` attribute instead. If you want the `expressionProperties` to work even when the field is hidden with `hide`, then use `hide-directive=\"ng-show\"` on that form.\n. Was actually thinking of doing this already. Will be in 6.1.0 :-) in a few moments. Thanks for the issue!\n. This is now released! `npm install 6.1.0` See the docs:\n\nhttp://docs.angular-formly.com/v6.1.0/docs/formlyconfig#extras\nhttp://docs.angular-formly.com/v6.1.0/docs/formly-form#attributes\n\nThanks again :+1: \n. @gmsewell6, please let me know what you think when you've tried it out. Thanks!\n. so, the placeholder can be whatever. That part isn't dynamic. But you can make it dynamic if you want to. And yes, you could reuse the object above. angular-formly is all about keeping your code DRY, so you could create a custom `type` that defaults the maxlength and minlength values as well. It's extremely powerful. Come at me with a specific use case and I can explain or show how you'd accomplish it with ease :-)\n. Going to go ahead and close this due to lack of activity. Please feel free to open it again if you have further questions/concerns/need help.\n. Make sure that you either include a template library or create your own type.\n\nhttp://docs.angular-formly.com/v6.1.0/docs/custom-templates\n\nOn mobile otherwise I'd be more helpful. Let me know if you need more help and I'll help when I get on later.\n. I'll reopen this to remind me. Thanks!\n. Added. Thanks again!\n. I fixed the template. Could you try it again? Thanks for your patience!\n. Please close this issue if the template works for you :-)\n. Thank _you_ for letting me know it was broken :-)\n. I haven't read through everything yet, but can I just say, this is a terrific bug report. Thank you!\n. Ah! You're right! The docs are out-dated. I'll update that as soon as possible...\n\nSo, angular-formly now comes equipt with a sweet new feature called the [`ngModelAttrsTemplateManipulator`](http://docs.angular-formly.com/v6.1.0/docs/ngmodelattrstemplatemanipulator) which will automagically add a bunch of attributes based on the config for the field. What's cool about this is it makes creating custom templates a breeze and saves on the amount of watchers necessary for a particular field.\n\nOne thing to note about this manipulator is that (with a few exceptions) it will not overwrite attributes that already exist in the template. So, if you specify your own name (for example) then it should not override your own name. I haven't looked at your example yet, but if this behavior is not what you're seeing then that is definitely a bug :-)\n\nI'll look at your example, but let me know if this clears anything up for you.\n. Alright! You found a real bug! I need to do some work to get it fixed. May be a day or two. But here's [a workaround](http://jsbin.com/cejoru/edit) for now :-) Thanks for using angular-formly! I'll let you know when the bug is fixed.\n. The actual solution will be a fix in `formly-field`, not in the template manipulator. The issue is that the `formly-field` is watching the field `id` rather than respecting the possibility that a user could specify a custom name.\n. Alright, updated the docs! Now to fix the bug!\n. I think I've got it! Master has been updated and your bug reproduction is working as expected now. Let me know if I've missed anything. Once I get the ok from you, I'll cut a release! Thanks!\n. There is no solution that I have found in the open source world. But I can tell you that in my app, we actually don't use the pre-built templates and have custom templates. We use bootstrap for our columns and simply have a specified column width for all of our labels and our fields. And labels are a part of the fields via a wrapper. This is the result.\n\n![screen shot 2015-04-27 at 3 13 43 pm](https://cloud.githubusercontent.com/assets/1500684/7358028/0afcedba-ecf0-11e4-89e6-1a5050aed636.png)\n\nI'll make an example for this when I have time. It should be trivial to accomplish using any css grid system (including flexbox).\n. You're very welcome! And thanks! I want formly to be as helpful as possible and it's rewarding to me when I see it being helpful to other developers.\n\nI take it that you don't need the example right away based on you closing this issue?\n. Actually could you move it to the [angular-formly-website](https://github.com/formly-js/angular-formly-website) repo? Thanks!\n. Quick look on mobile looks good, but I'd like to verify before merging. Thanks!\n. Looks good! Thanks. I'm also going to add the ability to return a promise from these functions just to mirror all other apis.\n. Watch the first video on this page:\nhttp://docs.angular-formly.com/v6.2.0/docs/learn-angular-formly\n\nToward the end I talk about this.\n\nLet me know if you have more questions. Please close this issue if this\nsolves your problem :-)\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn May 1, 2015 2:12 PM, \"Sean Walsh\" notifications@github.com wrote:\n\n> Is it possible to set a default value for a field? I've been perusing the\n> code, but I don't see any obvious way to do so. My use case is a form that\n> has values pre-populated (e.g. the user is returning to edit a form that\n> they've already completed).\n> \n> I can manually set the values by storing a value in my field's data\n> object and then iterating over the fields to set the value into the model,\n> but it becomes cumbersome to do so when working with nested fields, like\n> the ones in the Advanced Layout\n> http://angular-formly.com/#/example/other/advanced-layout example.\n> \n> I tried setting initialValue on my field options, but that appears to get\n> overwritten in formly-field.js\n> https://github.com/formly-js/angular-formly/blob/master/src/directives/formly-field.js#L100.\n> The relevant line is:\n> \n> const initialValue = $scope.model && $scope.model[key];\n> \n> This variable is then extended onto the field options, overwriting it. I\n> was able to get the behavior I'm looking for by changing the line to\n> \n> const initialValue = options.initialValue || ( $scope.model &&\n> $scope.model[key] );\n> \n> and then iterating each of my fields to call resetModel(). This is still\n> somewhat cumbersome, but not as bad as setting the model value manually.\n> \n> Would you consider a pull request to set the model automatically if an\n> initialValue exists and the model has not already been set? Probably\n> something like this, executed right after addModelWatcher():\n> \n> function setModelValue() {\n>     $timeout(function() {\n>         var field = $scope.options;\n>         if(!angular.isDefined($scope.model[field.key]) && angular.isDefined(field.initialValue)) {\n>             field.resetModel();\n>         }\n>     });\n> }\n> \n> Alternatively, if I'm missing something and this is already built in,\n> please tell me how to do it! :)\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/269.\n. Actually, I just had a conversation with @ckniffen about this on gitter and I finally understand why people want this feature. It's pretty much what you described. I'll try to get this in a 6.3.0 very soon. Thanks for the issue!\n. can't believe I overlooked that... Thanks\n. I'll answer better later when I get a second, but the problem is with the\nng-if that formly uses on the fields. Look at changing that to ng-show\nusing the hide-directive attribute.\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn May 4, 2015 7:47 AM, \"Pedro Catr\u00e9\" notifications@github.com wrote:\n\n> If I specify the hide property in the field then the expression will not\n> be able to override this afterwards.\n> \n> Example:\n> \n> {\n>         key: 'text2',\n>         type: 'input',\n>         hide: true,\n>         templateOptions: {\n>           label: 'Hey!',\n>           placeholder: 'This one is disabled if there is no text in the other input'\n>         },\n>         expressionProperties: {\n>           hide: '!model.text',\n>           'templateOptions.disabled': '!model.text'\n>         }\n>       }\n> \n> I have hide: true and then an expression property that sets hide if the\n> model has text. But the field will not appear.\n> \n> You can check it out here:\n> http://jsbin.com/yumasegefi/1/edit?html,css,js,output\n> \n> if you remove the hide: true from the example then when you put data on\n> the input box the second one will show up.\n> \n> The reason I need to do something like this is that I have a huge\n> multistep form that is slow to initialize on steps that have many fields,\n> and in one part I have 3 possible headings and only one will remain. The\n> current behaviour is that the 3 headings appear and then 2 of them\n> disappear. I would rather have them all hidden by default and show only one\n> when angular and angular formly finish doing their thing.\n> \n> Thanks! Great library! it is saving me a lot of work and it has an amazing\n> API. Were it not for angular performance issues this would be perfect.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/271.\n. That's fine. Switch from expression properties to watcher.\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn May 4, 2015 8:04 AM, \"Pedro Catr\u00e9\" notifications@github.com wrote:\n\n> Can't :( I really need to use ng-if because there are many dependencies\n> and many fields hidden in the same step of the form. If I use ng-show all\n> their binding will be active if though they are not being displayed.\n> \n> I already have some performance issues (specially with older browsers and\n> weaker machines) so I really can't afford to use ng-show.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/271#issuecomment-98717998\n> .\n. Note, obviously, you've got some serious performance considerations, so you may need to take things at a bit of a different approach. If you have a bunch of fields with their own hide conditions, instead of paying for a watcher for each of those, create your own watcher and respond to model changes yourself (by setting `hide` on the appropriate fields).\n\nIt's not as clean and neat, but that's the reality of the performance situation. :-(\n. So I've now had time to actually read through your issue. For the headings, you might consider not using angular-formly and just coding that up yourself in the HTML. This would allow you to using `ng-if` without a problem.\n. @pedrocatre, yes, I do mean creating watchers outside of the JSON. This is because there's a watcher created for every time you have a `watcher`. And they all watch the same thing. It's just some extra overhead that may not be necessary.\n\nThe hide thing is not a bug. Basically, when the field is hidden behind the ng-if, it never compiles which means the `expressionProperties` never get set up and cannot run.\n\nI may be able to add a `hideExpression` attribute which could make life a little bit easier for you. It would not be a normal formlyExpression though. It could be a function or a string, but it would be evaluated on the `formly-form` not the `formly-field` so you wouldn't have access to the same stuff... But it should be enough for what you want (it'll have the model for example).\n. In the latest beta, I added a hideExpression property. Give that a shot.\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn May 5, 2015 10:38 AM, \"Pedro Catr\u00e9\" notifications@github.com wrote:\n\n> hideExpression attribute would be nice thanks! I'm still going to think\n> how I could do this with the existing mechanisms. One thing that comes to\n> mind would be to have only one header instead of 3 and just change its\n> text. It is less easy to configure and see, but it would probably work and\n> I would have less watchers.\n> \n> Regarding what you said about the watcher instead of expressionProperties\n> it would not help in my case because I'm not using the expressionProperties\n> per field. For the step that can have more than 100 fields I put them\n> inside groups and I only have the expressionProperties per group of fields\n> (8 groups in total each group has many fields inside) not in every field.\n> It is strange that I have performance issues and so many watchers (I used\n> your awesome ng-stats lib to see this!) because I one time bind most things\n> inside the fields. Also I ng-if the groups until they are necessary. Still\n> on that step in the best case scenario I have 513 watchers (before the user\n> starts interacting with the form and causing more fields to show up). Worst\n> case I have more than 3000 watchers. I will have to find time to take a\n> closer look.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/271#issuecomment-99134665\n> .\n. @pedrocatre, have you tried `hideExpression` yet? Here's [an example](http://angular-formly.com/#/example/field-options/hide-fields). I think this will do what you need. Only available in `6.4.0-beta.4` though... Please provide feedback :-)\n. ping @pedrocatre. I would really like to make sure that this solves your use case before I cut an official release. Let me know as soon as you are able please :-)\n. Supported in 6.4.0 :-)\n. Thanks for letting me know. Docs can be hard to keep updated! :-)\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn May 4, 2015 7:53 AM, \"Pedro Catr\u00e9\" notifications@github.com wrote:\n\n> In the documentation http://docs.angular-formly.com/v6.1.0/docs/tips you\n> have this tip:\n> \n> angular.module('yourModule').config(\n>   function(formlyConfigProvider, formlyApiCheck, onProd) {\n>     if (onProd) {\n>       formlyApiCheck.disable();\n>       formlyConfigProvider.disableWarnings = true;\n>     }\n>   }\n> );\n> \n> When I was running version 5 formlyApiCheck.disable() would work. I\n> upgraded to the latest 6.3.2 and now I get TypeError:\n> formlyApiCheck.disable is not a function.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/272.\n. This has been updated. Thank you!\n. @abodacs, this has been done in `6.4.0-beta.1`. If you could try it out, that would be awesome. See [this example](http://angular-formly.com/#/example/other/advanced-layout-flex)\n. @abodacs, have you tried out the new advanced layout stuff? I want to make sure that everything's working before I cut an official release. (By the way, the latest version is `6.4.0-beta.3`\n. @gowram, you mean like the [Multi-input](http://angular-formly.com/#/example/other/multi-input) example? You may be able to use a `fieldGroup` for that. Haven't tried it out, but it may be an easier API. I don't have time to write docs right now, but here's the apiCheck checker for `fieldGroup`: https://github.com/formly-js/angular-formly/blob/master/src/providers/formlyApiCheck.js#L148\n\nYou can now specify a `fieldGroup` or a `field` for the `fields` of a `<formly-form>`.\n. :+1: \n. Supported is 6.4.0\n. If you look at the package.json, there's a very loose peerDependency for angular. Angular-formly strives to support 1.2+ so you should be good. It is noteable that angular-formly does version checking to know what features it can use from 1.3\n. @ckniffen and @Den-dp were having a talk on [the Gitter chat](http://gitter.im/formly-js/angular-formly) today about this same issue. @ckniffen created [an example](http://jsfiddle.net/W99rX/) of a directive that could do this. Thanks!\n. Not sure whether this will require a breaking api change or not. I don't think so, but it looked too difficult to accomplish in the 6.4.0 release so I've pushed it back to 6.5.0\n. Yeah, you know what. I think this issue doesn't really make sense...\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn May 30, 2015 5:11 PM, \"Caleb Kniffen\" notifications@github.com wrote:\n\n> Does it need to make the assumption that all elements with ngModel map to\n> the same value.\n> \n> I ask because of\n> https://github.com/formly-js/angular-formly/blob/573a9b070097f1ccd8f55eada4df2f8be7255e4e/src/directives/formly-field.js#L155\n> .\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/275#issuecomment-107098396\n> .\n. I can't think of other features that use the `formControl` directly. I wonder if there's something we can do in the `ngModelTemplateManipulator` (which is responsible for setting the name) to handle multiple `ng-model` elements by setting a unique name for each.\n. Thinking about it more, I think that we definitely should have that feature in the `ngModelTemplateManipulator`. Do you think you could add that to this PR? You'll know it's working when your tests pass when you omit the `name` on your `ng-model`s. Should probably add a test in `ngModelTemplateManipulator` as well.\n. Also, thanks for taking this one. It's far from a simple feature.\n. Supported in `6.12.0-beta.0`. Anyone watching, please test your stuff to make sure we didn't break anything!\n. Note, all of the examples on the website seem to be working fine :+1: \n. Good request. I can add this to 6.4.0-beta.5. Give me a few minutes :-)\n. ```\n$ npm install angular-formly@6.4.0-beta.5\n```\n\nor\n\n```\n$ bower install angular-formly@6.4.0-beta.5\n```\n\nThanks!\n. Good suggestion. I'll look into it.\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn May 8, 2015 9:16 AM, \"Jordan\" notifications@github.com wrote:\n\n> This looks like a great library! BUT there is a multiverse of libraries\n> out there and I can't read the details about all of them. I think the\n> website would really benefit from having a \"Why Angular-Formly?\" section\n> that's up front and center. IMHO this is more useful than summarizing what\n> the library does - at least for me, I am more interested in the problems a\n> library solves before I want to know how it works.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/277.\n. Migrating this to the website: https://github.com/formly-js/angular-formly-website/issues/20\n. Good point. The reset feature should not only reset the model value, but\nthe NgModelController as well. I'll get this fixed as soon as I am able.\nThanks.\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn May 8, 2015 12:30 PM, \"Chris Boden\" notifications@github.com wrote:\n\n> In resetting a form validation is run, fields are $dirty and marked as\n> invalid if they're required.\n> \n> http://output.jsbin.com/pifericawe\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/278.\n. Note, if you need a workaround immediately, all fields have the controller\nattached to them called formControl. You could reset the dirty and touched\nstate yourself until I can get this fixed (or submit a PR. Should be fairly\nsimple...\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn May 8, 2015 1:18 PM, wrote:\n\n> Good point. The reset feature should not only reset the model value, but\n> the NgModelController as well. I'll get this fixed as soon as I am able.\n> Thanks.\n> - Kent C. Dodds\n> \n> (Sent from my mobile device, please forgive typos or brevity)\n> On May 8, 2015 12:30 PM, \"Chris Boden\" notifications@github.com wrote:\n> \n> > In resetting a form validation is run, fields are $dirty and marked as\n> > invalid if they're required.\n> > \n> > http://output.jsbin.com/pifericawe\n> > \n> > \u2014\n> > Reply to this email directly or view it on GitHub\n> > https://github.com/formly-js/angular-formly/issues/278.\n. If you use anything other than <form> or <ng-form> then there's no form\ncontroller to provide you with. So that simply wouldn't even make sense in\nthat case.\n\nThe solution is to wrap the <formly-form> in an ng-form or form which has a\nname attribute, and pass that same value to the formly-form form attribute.\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn May 8, 2015 12:42 PM, \"Sean Walsh\" notifications@github.com wrote:\n\n> JSBin example: http://jsbin.com/molulomugi/1/edit?html,output\n> \n> I tried to write a failing test for it, but I can't get the tests running\n> on my system.. looks like an issue with the Babel loader. The failing test\n> would probably look like this:\n> \n> it(`should place the form control on the scope property defined by the form attribute when root-el is specified`, () => {\n>   compileAndDigest(`<formly-form root-el=\"div\" form=\"vm.myForm\" model=\"model\" fields=\"fields\"></formly-form>`);\n>   expect(scope.vm).to.have.property('myForm');\n>   expect(scope.vm.myForm).to.have.property('$name');\n> });\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/279.\n. Exactly\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn May 8, 2015 2:53 PM, \"Adam Gordon\" notifications@github.com wrote:\n\n> I'm looking at https://docs.angularjs.org/api/ngMessages and\n> http://angular-formly.com/#/example/advanced/validators and see the\n> template wrapper being configured in the formlyConfigProvider which\n> defines the validation.html ng-message include. My question would be how\n> would we go about overriding the default error messages.\n> \n> Is it as simple as specifying the message field on the validators object?\n> As such:\n> \n> {\n>   key: 'ip',\n>   type: 'input',\n>   validators: {\n>     ipAddress: {\n>       expression: function(viewValue, modelValue) {\n>         var value = modelValue || viewValue;\n>         return /(\\d{1,3}.){3}\\d{1,3}/.test(value);\n>       },\n>     message: '$viewValue + \" is not a valid IP Address\"'\n>   }\n> }\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/280.\n. Did this answer your question? If so, please close this issue :-)\n. Use templateUrl instead of template\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn May 11, 2015 12:50 PM, \"Adam Gordon\" notifications@github.com wrote:\n\n> I suspect this is due to a lack of HTML escaping but I created a wrapper\n> that allegedly didn't include <formly-transclude></formly-transclude> in\n> a template and got the following (confusing) error message:\n> \n> Failed to instantiate module foo due to:\n> Error: Formly Error: Template wrapper templates must use \"\" somewhere in them. This one does not have \"\" in it: static/views/required-label.html\n> Additional information: {\"name\":\"bootstrapLabel\",\"template\":\"static/views/required-label.html\",\"apiCheck\":{},\"types\":[]}.\n> ...\n> \n> Looking at the source (line 414 in version 5.2.1), it looks like it's\n> supposed to inject the string \"<formly-transclude></formly-transclude>\"\n> into the error message, but that's not happening.\n> \n> The cause of this is that I'm trying to override the built-in\n> bootstrapLabel wrapper to make the required \\* character red and the\n> template (which is a near copy of formly's label.html file) DOES have the\n> requisite formly-transclude element. Debugging formly.js reveals that the\n> template field is not getting de-referenced, that is, the template is\n> coming into the checkWrapperTemplate(...) function as the string\n> \"static/views/required-label.html\" and not the actual contents of the\n> template.\n> \n> Here's the relevant portion of my .config(...):\n> \n> .config([\n>   'formlyConfigProvider',\n>   'formlyBootstrapApiCheck',\n>   function(formlyConfigProvider,\n>            formlyBootstrapApiCheck) {\n> \n> ```\n> /* snip */\n> \n> formlyConfigProvider.setWrapper({\n>   name: 'bootstrapLabel',\n>   template: 'static/views/required-label.html',\n>   apiCheck: {\n>     templateOptions: formlyBootstrapApiCheck.shape({\n>       label: formlyBootstrapApiCheck.string,\n>       required: formlyBootstrapApiCheck.bool.optional\n>     })\n>   },\n>   apiCheckInstance: formlyBootstrapApiCheck\n> },\n> { name: 'bootstrapHasError',\n>   template: 'static/views/has-error.html'\n> });\n> \n> /* snip */\n> ```\n> \n> }\n> \n> Thoughts?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/281.\n. No worries :-)\n. I updated the example to use the new `formGroup` and `className` apis. These are only available in the latest (beta) release which should hopefully be released in the next day or two. Let me know what you think.\n. I'm not sure I understand what you mean... `ng-repeat` _is_ working under the hood...\n. I think all you're saying is that you'd like a pre-defined type that does this. You don't want to have to define it yourself. Is that right?\n. I see... Well, types are a template concern. And templates are specific to css frameworks. Are you looking for a bootstrap template then?\n. As a side, I highly recommend that if you're going to be serious about creating forms in your app, you should create your own types. As awesome as the template libraries are, they can't beat the customizability required for a serious application. And types are so easy to create that you shouldn't have a problem with it.\n. I see. I think having that built-into angular-formly could be useful... I'll see if I can think of a good way to include that.\n. @jlowery457, I improved the example: http://angular-formly.com/#/example/advanced/repeating-section\n. If anyone wants to discuss a good API as well as a good implementation, I would love to talk about it. I'd really love to improve support for repeating fields/fieldGroups, but I'm not certain as to the best way to go about implementing it.\n. I recently added the functionality to specify a `fieldTransform` on a global/form level that I think takes care of the json schema issue and may cover this case as well. Have you had a chance to look at that?\n. [Docs](http://docs.angular-formly.com/v6.16.0/docs/formly-form#section-fieldtransform)\n. Yes, this runs as one of the first things in the `formly-form` controller, so you can add/remove/modify any fields. Meaning what you send it can be total nonsense and as long as what you return is an array of valid field configurations, then you're good. I'll try to create an example as soon as I am able.\n. Is anyone still waiting for this feature? I'm sorry I haven't really looked into implementing it. It's not the most straightforward one to implement.\n. I'm going to close this in favor of someone creating [a plugin](http://docs.angular-formly.com/page/plugins).\n. Sorry I haven't responded until now. Been kinda drowning recently. I'm not certain what the problem is. Why don't you have a look at [this example](http://angular-formly.com/#/example/intro/codementor) and see if you can get it working.\n. Ah, the problem is actually a jqLite bug that has been fixed in 1.4.x and I don't expect will be backported to 1.3.x :-( https://github.com/angular/angular.js/issues/11038\n\nThe only way to accomplish the ng-repeat with ng-messages is to use 1.4.x or include jQuery\n. Oh, sorry, I thought you were talking about overriding messages set in the [formlyValidationMessages](http://docs.angular-formly.com/v6.4.0/docs/formlyvalidationmessages) service. Yeah, simply using the template wont work, but that's not a formly thing, that's an ng-messages thing. If you want defaults, use the formlyValidationMessages service. This is why you generally don't want to have any custom `ng-message` directives in there. Just the ones in the `ng-repeat`.\n\nI'll have to look at making sure everything works ok in angular@1.4.x. I was under the impression that it did, but I'll double check that. Thanks!\n. Hmmm.... It really depends on the experience that you want to give your user... I wouldn't say that either of those is necessarily the \"right\" way to tell formly about them...\n. So, what I would recommend is using a router `resolve` feature which allows you to make requests before a controller is loaded and inject the results into the controller. That way you keep your controllers as synchronous as possible. This is just good practice in general in my opinion.\n. Good question, should have specified. For some advanced layout stuff, I want to have a \"field\" in place just to have a node there with a specific class. So something like:\n\n```\n{template: '', className: 'my-class-name'}\n```\n. Right now, I have to do:\n\n```\n{template: 'nbsp;', className: 'my-class-name'}\n```\n\nLess fun...\n. It's actually not a directive, and it's never actually rendered. Do there's\nno need to prefix it with data.\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn May 13, 2015 5:37 PM, \"Adam Gordon\" notifications@github.com wrote:\n\n> The checkWrapperTemplate(...) function only looks for the string\n> <formly-transclude></formly-transclude> and thus, breaks when using\n> <data-formly-transclude></data-formly-transclude> which is valid\n> directive syntax.\n> \n> The work-around is easy, just remove the data- but just wanted to put\n> this on your radar.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/286.\n. This is a good idea. I'll implement it when I get the chance in the next week or so. PRs welcome :-)\n. This has been added as an [`formlyConfig.extra`](http://docs.angular-formly.com/v6.4.0/docs/formlyconfig#extras) in 6.5.0 :-) \n. You have to make sure that the `FormController` that's getting submitted is the one that you pass to angular-formly. As of a few minutes ago, you should be able to do this:\n\n``` html\n<form name=\"vm.theForm\" ng-submit=\"vm.submit()\">\n  <formly-form mode=\"vm.model\" fields=\"vm.fields\" form=\"vm.theForm\"></formly-form>\n</form>\n```\n\nAnd that should work if you're using angular-formly@6.11.2\n. Sorry @Quji, at the time, you would have problems giving them the same name. Now you don't. Or, at least you wont as soon as I fix the bug you just found :-) I'll let you know and have an example for you when I have it fixed!\n. Alrighty, here's a cloned and fixed version of your jsbin: http://jsbin.com/cekepo/1/edit\n\nHad to change two things:\n1. You now need to specify the `name` attribute on your `<form>` that has the `ng-submit` and then pass that same value to the `form` attribute of the `<formly-form>`.\n2. Your `formlyConfig.extras.errorExistsAndShouldBeVisibleExpression` expression was wrong, it's supposed to be `form.$submitted`.\n\nIt's working now with 6.11.4. Enjoy!\n. Awesome! Thanks @ckniffen.\n. My guess is that the field configuration for one of your fields is undefined... But I'll look forward to the jsbin :-)\n. I'm going to go ahead and close this due to lack of activity. Please re-open it if you need further help.\n. Thanks @TheMcMurder!\n. Thanks!\n. @ckniffen, if you're looking for a challenge ;-)\n. Give that a shot in a jsbin and you'll see why that will unfortunately not\nwork.\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn May 15, 2015 9:39 PM, \"Caleb Kniffen\" notifications@github.com wrote:\n\n> I may be missunderstanding the issue but I thought the following would\n> work.\n> \n> {\n>   ngModelAttrs: {\n>     foo: {\n>       attribute: 'foo'\n>     },\n>     bar: {\n>       attribute: 'bar'\n>     }\n>   },\n>   templateOptions: {\n>     foo: true,\n>     bar: true\n>   }\n> }\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/293#issuecomment-102568177\n> .\n. Actually....... Maybe it will... I'll have to give it a look later.\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn May 15, 2015 9:41 PM, \"Kent C. Dodds\" kent@doddsfamily.us wrote:\n\n> Give that a shot in a jsbin and you'll see why that will unfortunately not\n> work.\n> - Kent C. Dodds\n> \n> (Sent from my mobile device, please forgive typos or brevity)\n> On May 15, 2015 9:39 PM, \"Caleb Kniffen\" notifications@github.com wrote:\n> \n> > I may be missunderstanding the issue but I thought the following would\n> > work.\n> > \n> > {\n> >   ngModelAttrs: {\n> >     foo: {\n> >       attribute: 'foo'\n> >     },\n> >     bar: {\n> >       attribute: 'bar'\n> >     }\n> >   },\n> >   templateOptions: {\n> >     foo: true,\n> >     bar: true\n> >   }\n> > }\n> > \n> > \u2014\n> > Reply to this email directly or view it on GitHub\n> > https://github.com/formly-js/angular-formly/issues/293#issuecomment-102568177\n> > .\n. [You're right](http://jsbin.com/hulidu/1/edit?html,js,output) it works just fine. Thanks!\n. You're right.\n. I think that this feature will be even less needed once #378 exists. Closing.\n. Perhaps could temporarily support both.\n. Cool. Perfect PR. I'm assuming the tests will pass. When they do, I'll merge and cut a release. Thanks for the contribution!\n. Officially released as 6.5.1. Thanks!\n. Hey @icfantv. Sorry if `api-check` is hurting your feelings. But it's for the best. Much better than going down a road for a few hours before realizing that you're using angular-formly wrong.\n\nAs for your question. First off, your config is wrong. I'm guessing this was just a copy/paste error or something, but you have `templateOptions` and `expressionProperties` inside the `validators` property... They should all be sibling properties at the root of the config object.\n\nSecondly, angular-formly doesn't support disabling validators. This is the first time I've heard of this use case... Perhaps you could describe what your use-case is and I can give you the right way to do it or we can figure out how angular-formly can cover your use-case better.\n. Yeah, a better way would be to not use `expressionProperties` and actually just set the value based on the state (create/edit). So when you create the field, before you add the validator, check to see if you're in `edit` mode. If you are, don't add the validator. Also, instead of using `expressionProperties` for disabled, just say something like: `disabled: isEditMode` or something like that. That's what I do. It's better for several reasons. Would that work?\n. something like:\n\n``` javascript\n{\n  key: 'foo',\n  type: 'input',\n  validators:  {\n    validateFoo: isEditMode ? undefined : {\n      expression:  vm.someFunc,\n      message: '\\'some message'\\'\n    }\n  },\n  templateOptions: {\n    disabled: isEditMode\n  }\n}\n```\n. I do stuff like that all the time\n. Note, for people who are persisting their config to a database and need it to just work with JSON, then another solution would be to make checking the mode part of the validator.\n. Glad that'll work for you :+1: \n. In all honesty, I haven't done that for validators before. I'm not certain why that is causing you issues, but one thing that you could do is something like this:\n\n``` javascript\nvar myField = {\n  key: 'foo',\n  type: 'input',\n  validators:  {},\n  templateOptions: {\n    disabled: isEditMode\n  }\n};\n\nif (!isEditMode) {\n  myField.validators.fooValidator = {\n    /* snip */\n  };\n}\n```\n. Actually, you know what would be even better:\n\n``` javascript\n{\n  key: 'foo',\n  type: 'input',\n  validators:  {\n    validateFoo: isEditMode ? 'true' : {\n      expression:  vm.someFunc,\n      message: '\\'some message'\\'\n    }\n  },\n  templateOptions: {\n    disabled: isEditMode\n  }\n}\n```\n. Hmmm... That's crazy.... That should totally work... (the `undefined` solution should have worked as well)... Try this:\n\n``` javascript\n{\n  key: 'foo',\n  type: 'input',\n  validators:  {\n    validateFoo: isEditMode ? {expression: 'true'} : {\n      expression:  vm.someFunc,\n      message: '\\'some message'\\'\n    }\n  },\n  templateOptions: {\n    disabled: isEditMode\n  }\n}\n```\n. http://jsbin.com/foramu/1/edit?html,js,output :-)\n. Haha, that's actually a common pitfall. But it's literally an angular expression, so there's really no way to get around it :-( Glad you got it working! :dancer: \n. :+1: \n. I couldn't reproduce this... Am I doing something wrong? http://jsbin.com/sekepu/edit?html,js,console,output\n. I'm going to go ahead and close this for inactivity. Please re-open if you have more information.\n. Thanks @koenweyn!\n. You've got it. Technically, angular-formly doesn't ship with any validators\nat all and only leverages a few of angular built in ones.\n\nI was going to link you to a validation library that you could use, but all\nthe ones I found are too big in scope. If anyone knows of a validation\nlibrary that just ships functions that would work great with formly.\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn May 21, 2015 5:31 AM, \"Matt Miller\" notifications@github.com wrote:\n\n> I'm having trouble finding a clear list of the validation types built into\n> formly.\n> \n> The documentation page\n> http://docs.angular-formly.com/v6.4.0/docs/validation is sparse.\n> \n> The best I could reason is that Angulars standard html5 validations are\n> supported, along with custom expressions your write yourself, ala this\n> page http://docs.angular-formly.com/v6.4.0/docs/formly-expressions.\n> \n> Is there anything more robust I should reference?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/301.\n. I should also point out that angular-formly will never ship with custom\nvalidators. That is outside the scope of the project. It is concerned about\nmaking an easy api for you to add your own business-specific validators.\n\nOn another note, if I can't find a validation library that's just a bunch\nof functions, then I'm going to make one. I can't believe something like\nthat doesn't already exist though...\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn May 21, 2015 5:59 AM, \"Kent C. Dodds\" kent@doddsfamily.us wrote:\n\n> You've got it. Technically, angular-formly doesn't ship with any\n> validators at all and only leverages a few of angular built in ones.\n> \n> I was going to link you to a validation library that you could use, but\n> all the ones I found are too big in scope. If anyone knows of a validation\n> library that just ships functions that would work great with formly.\n> - Kent C. Dodds\n> \n> (Sent from my mobile device, please forgive typos or brevity)\n> On May 21, 2015 5:31 AM, \"Matt Miller\" notifications@github.com wrote:\n> \n> > I'm having trouble finding a clear list of the validation types built\n> > into formly.\n> > \n> > The documentation page\n> > http://docs.angular-formly.com/v6.4.0/docs/validation is sparse.\n> > \n> > The best I could reason is that Angulars standard html5 validations are\n> > supported, along with custom expressions your write yourself, ala this\n> > page http://docs.angular-formly.com/v6.4.0/docs/formly-expressions.\n> > \n> > Is there anything more robust I should reference?\n> > \n> > \u2014\n> > Reply to this email directly or view it on GitHub\n> > https://github.com/formly-js/angular-formly/issues/301.\n. I found a terrific validation library that works great with angular-formly :-)\nis.js: http://is.js.org/\nexample: http://angular-formly.com/#/example/integrations/is-js\n. I improved the docs for [validation](http://docs.angular-formly.com/v6.10.1/docs/validation)\n. Yeah, so if you're loading it from a server then you'll have to use the string version for your [watcher and other expressions](http://docs.angular-formly.com/v6.4.0/docs/formly-expressions). In-lining functions as strings will not work (and would be a very bad idea). Here's an example that may be helpful to you: http://angular-formly.com/#/example/other/json-powered\n\nP.S. I recommend avoiding using `watcher` if you can. It's better to try to use `expressionProperties`. Mostly from a performance standpoint.\n. Let me know if that is enough to get you going.\n. Absolutely. Depending on the dropdown's `templateOptions`, you might do something like this: http://angular-formly.com/#/example/other/filter-select\n. Yes, I totally love js-data from @jmdobry. @jmdobry, would love to collaborate on a library that could convert your schema to mine and then back again so your users can use angular-formly and my users can use js-data. Would be amazingly awesome.\n. angular-formly is pretty versatile, but I made [an example](http://angular-formly.com/#/example/integrations/is-js) using [is.js](http://arasatasaygin.github.io/is.js/) and it was pretty cool.\n. I also [tweeted about it](https://twitter.com/kentcdodds/status/601367918446645248) a few days ago. Found a few libraries there.\n. I actually don't think that I'll ever get to this. If someone else wants to do this, I'd happily help them get started. I'm going to go ahead and close this though as I don't plan on actually implementing it.\n. To, anyone interested in implementing this. I added a new feature in [6.14.0](https://github.com/formly-js/angular-formly/blob/master/CHANGELOG.md#6140) that allows you to specify a `fieldTransform` function to convert a given field configuration into something that angular-formly understands. So accomplishing something like this should be a matter of writing a fieldTransform to convert js-data schema into formly field configurations.\n. This is definitely something that I want to make work. Give me some time to look into it later.\n. I created a jsbin for it to demonstrate the issue: http://jsbin.com/goduno/edit\n. Boy, you've really got me stumped... I don't know how to accomplish that design based on how angular-formly works. Could you describe the UI you're trying to actually build? Maybe I can help you figure out a work-around.\n. That shouldn't be too difficult to add I think... If you think that it would work and you need that functionality, then I may take the time to add it.\n. I don't think any drawbacks of having multiple `formly-form`s would be noticeable. If you wanted to make sure that `formState` was shared between all of the fields (in the different forms) then you'd have to make sure it was initialized prior to the forms rendering. Another thing you'd need to be aware of is that the `fields` property for each of the forms would be different. Not normally a real issue though. I think you've found a good solution. Do you mind [creating an example](https://github.com/formly-js/angular-formly-website/blob/master/CONTRIBUTING.md) for the website?\n. Ah, good catch. I didn't notice that. Basically, the last `formly-form` would overwrite the other ones. So you don't want to do that. Instead, wrap all of them in a single `ng-form` or `form` and specify a `name` on that and don't worry about specifying a `form` attribute on any of the `formly-form`s (unless you're interested in that specific form controller for some reason).\n. I'm going to go ahead and close this issue. An example for the website would be welcome. Thanks @DrDanRyan!\n. I'm not sure I understand the problem you're having. Could you follow the instructions here so we can help you better? http://help.angular-formly.com\n. That issue on npm is the solution. I'll get this implemented soon. Thanks\nfor bringing it up :-)\n\n-Kent C. Dodds\n\nOn Thu, May 21, 2015 at 2:39 PM, Denis Bendrikov notifications@github.com\nwrote:\n\n> Also I found related issue in npm npm/npm#2800\n> https://github.com/npm/npm/issues/2800\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/305#issuecomment-104414347\n> .\n. Tested, doesn't work for me. See PR for more info.\n. This is now fixed :-)\n. Actually this is possible. Simply remove the version altogether and it will add the latest version! For example: http://docs.angular-formly.com/docs/ngmodelattrs NEAT!\n\nHowever, you'll notice that the latest version of angular-formly is 6.6.0 but the latest docs version is 6.4.0. Perhaps @gkoberger or someone he knows can explain why [this regression](https://twitter.com/kentcdodds/status/600275240887799808) has still not been fixed after 4 days...\n. Closed with version 6.7.0\n. Maybe this should be an additional issue, but I think that while we're at it, we should make it work on a per-field/per-type basis as well.\n. Officially released in 6.11.0!\n. The test for it is a little crazy: https://github.com/formly-js/angular-formly/blob/master/src/directives/formly-field.test.js#L975-L1083 :-)\n. Sorry, there was too much going on in this PR. Please keep PRs down to atomic changes, and never commit the `dist`. I'll go ahead and get this done really quick. Thanks!\n. Supported in 6.9.0\n. Thanks for catching that!\n. Released as 6.8.2\n. It's because you did something like this:\n\n``` javascript\n{\n  label: 'some label',\n  placeholder: 'some placeholder'\n  // more configuration options\n}\n```\n\nWhen it should have been something like this:\n\n``` javascript\n{\n  // some configuration options\n  templateOptions: {\n    label: 'some label',\n    placeholder: 'some placeholder'\n  }\n}\n```\n\nChange that and try again. If it doesn't fix the problem. Re-open this issue.\n\nAlso, I highly recommend you go through all the resources available on the [Learn angular-formly](http://docs.angular-formly.com/v6.8.2/docs/learn-angular-formly) page.\n. Please spend some time watching the lessons on the page I linked to you and\nlooking at the examples. They will answer most of your questions.\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn May 24, 2015 6:10 AM, \"maryam\" notifications@github.com wrote:\n\n> We have implemented before this app with angularformly which was working\n> correctly.\n> https://github.com/CA-Labs/fire-survey/blob/master/forms/survey.json\n> \n> Now with your examples i understood i should add \"templateOptions\" for all\n> cases. It seems is working except for custom templates such as \"type\":\n> \"multi-checkbox\", etc.\n> To solve this problem i have added\n> .run(function(formlyConfig) {\n> formlyConfig.setType(\n> {\n> name: 'multi-checkbox',\n> templateUrl: './polls/partials/multi-checkbox-template.html'\n> })})\n> and i have changed Q2 to:\n> {\n> \"key\": \"Q2\",\n> \"templateOptions\": {\n> \"label\": \"In what languages does your firm provide live chat support?\",\n> \"options\": [\n> {\n> \"name\": \"english\",\n> \"value\": \"eng\"\n> },\n> {\n> \"name\": \"french\",\n> \"value\": \"frnch\"\n> },\n> {\n> \"name\": \"more\",\n> \"value\": \"more\"\n> }\n> ]\n> },\n> \"type\": \"multi-checkbox\"\n> }\n> \n> and i don't get any output for that. How i can fix it?\n> Thank you for your reply in advance.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/313#issuecomment-105007463\n> .\n. Sorry, I don't have time to help right now, but I'm sure that if you asked\nthis on stack overflow someone could help you there.\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn May 24, 2015 10:26 AM, \"maryam\" notifications@github.com wrote:\n\n> I've followed your link completely. I listened to your videos as well. I\n> found one simple example for custom template and i tried to generalized\n> that with my example as i presented to you in above.\n> Also i changed it into \"formlyConfigProvider\", in any case with what i\n> presented to you i can not have expected output from custom html. Also i\n> have added wrapper\n> wrapper: ['bootstrapLabel', 'bootstrapHasError'], the only change is\n> showing the question without any options.\n> Moreover i want to emphasize that before we have done this project\n> correctly and it was working. Please give me hint if there is any problem\n> in above comment.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/313#issuecomment-105033729\n> .\n. Looks awesome! On mobile so I'll look more closely later. But one thing for sure I noticed. Could you actually do the package.json script update in a separate PR? There's an issue for it. Thanks!\n. Yeah, 305. Can you make sure it works on Mac too?\n\nI'll have a closer look tomorrow. Thanks!\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn May 24, 2015 6:11 PM, \"Benjamin Orozco\" notifications@github.com wrote:\n\n> Also added support for key property in fieldGroup, but again I'm not\n> totally confident of my patch. I had to comment-out one failing test. I\n> guess I'm setting the model the wrong way.\n> \n> Let me know your thoughts. Regards!\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/pull/314#issuecomment-105080781\n> .\n. Sorry, I decided to go about it a different direction. Thanks though. You definitely helped out!\n. See [the tests](https://github.com/formly-js/angular-formly/blob/master/src/directives/formly-field.test.js#L838-L926) for how to use it.\n. Should be able to do that with the model property...\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn May 25, 2015 9:09 AM, \"Benjamin Orozco\" notifications@github.com wrote:\n\n> It works like a charm, thanks @kentcdodds https://github.com/kentcdodds\n> !\n> \n> BTW, would it be much trouble to support key property in fieldGroup? A\n> use-case would be to support multi-level nested forms:\n> \n> Model:\n> \n> ```\n> vm.formData = {\n>       \"name\": \"John\",\n>       \"address\": {\n>           \"streetnum\": \"145 Elm St.\",\n>           \"place\": {\n>             \"state\": \"GA\",\n>             \"city\": \"Atlanta\"\n>           }\n>       }\n> };\n> ```\n> \n> Fields:\n> \n> ```\n> vm.formFields = [\n>   {\n>     key: 'name',\n>     type: 'input',\n>     templateOptions: {\n>       label: 'Name'\n>     }\n>   },\n>   {\n>     key: 'address',\n>     fieldGroup: [\n>       {\n>         key: 'streetnum',\n>         type: 'input',\n>         templateOptions: {\n>           label: 'Street Num'\n>         }\n>       },\n>       {\n>         key: 'place',\n>         fieldGroup: [\n>             {\n>                 key: 'state',\n>                 type: 'input',\n>                 templateOptions: {\n>                   label: 'State'\n>                 }\n>             },\n>             {\n>                 key: 'city',\n>                 type: 'input',\n>                 templateOptions: {\n>                   label: 'City'\n>                 }\n>             }\n>         ]\n>       }\n>     ]\n>   }\n> ];\n> ```\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/pull/314#issuecomment-105249379\n> .\n. Could you please produce an example of the problem. It's very difficult for me to help without that. Clone [this template](http://jsbin.com/biqesi/edit) to produce the example.\n. This appears to be a problem with how ngf-select deals with the `ng-model` and how angular-formly watches the model (the error is thrown when angular's doing dirty checking). I personally use [angular-upload](https://github.com/leon/angular-upload) and have had great success with it. If you really want to use ng-file-upload, then please help me know what if I need to change anything in angular-formly to make it work. I'm afraid I don't have time right now to figure it out.\n. Hey Michael, glad you found angular-formly and you like it! The best way to get help is by following instructions here: [help.angular-formly.com](http://help.angular-formly.com)\n. [chat.angular-formly.com](http://chat.angular-formly.com) is not a stack overflow room. It just forwards you to a chat room on gitter. It can be helpful for you to ask a stack overflow question with the `angular-formly` tag as well because sometimes the people over there can help answer your questions as well.\n. Hey @benoror, thanks for the help! A few things.\n\nFirst, I don't want to have all of that commit history in the repo when I merge this. Please remove all that history and just have a single commit with your changes.\n\nSecond, I tried your changes locally and it doesn't work on my mac. I definitely want to have a solution that works everywhere. I'm thinking that a good solution would be to have a single script that sets the environment variables for us and invokes the scripts. So it would be something like:\n\n``` json\n\"scripts\": {\n  \"build:dist\": \"node scripts/run-script.js build:dist\",\n  \"build:prod\": \"node scripts/run-script.js build:prod\",\n  \"build\": \"node scripts/run-script.js build\",\n  \"test\": \"node scripts/run-script.js test\",\n  \"test:single\": \"node scripts/run-script.js test:single\",\n  \"test:ci\": \"node scripts/run-script.js test:ci\",\n  \"watch\": \"node scripts/run-script.js watch\",\n  \"start\": \"node scripts/run-script.js start\",\n  \"release\": \"node scripts/run-script.js release\"\n}\n```\n\nAnd the `scripts/run-script.js` would actually set `process.env.NODE_ENV` before invoking the script. Do you think that would work?\n. Absolutely. Thank you for being patient and working at it. Much appreciated! :+1: \n. Closing this PR. I like the middleware approach you mentioned. Feel free to take a stab at a PR for it if you're feeling ambitious :-)\n. Actually, someone ran into this same issue on twitter the other day: https://twitter.com/kentcdodds/status/601765588533317632\n\nHere's an example with an explanation of what the problem is: http://jsbin.com/mepega/edit?html,js,output\n\nTL;DR\n\nDon't specify a `form` attribute on the `formly-form` with the same name. Just leave it off altogether or change the name.\n\nPlease re-open this issue if that doesn't fix your problem :-)\n. You have it, right in your template. It's the `fc` variable (which is a shortcut to the `options.formControl` variable).\n. Ah, I see what you're saying. @ckniffen mentioned [this angular issue](https://github.com/angular/angular.js/issues/10071) on Gitter the other day. The problem is that the `formController`'s parent is `$submitted` but that property doesn't get propagated down to children forms. @ckniffen, do you have a recommendation on how to handle this? One thing I can think of is to `$watch` the `$submitted` state and set it on the child forms manually...\n. Awesome! Feel free to [make a PR](https://github.com/formly-js/angular-formly-website/blob/master/CONTRIBUTING.md#creating-an-example) :+1: \n. What is your reasoning for wanting this? I'm a big fan of controller as, but I don't see a reason for it here.\n. I don't think that there's a way that we could do any better than that. And, as much as I love controller as, I don't see the benefits in this scenario. Closing this unless someone can convince me otherwise.\n. I can see the benefit of making it private (in fact, in my app, I never actually register any of my controllers with angular). But I definitely firmly believe that the benefits of controllerAs cannot be seen in a type's controller. And we're also supporting angular 1.2 still, so we can't switch to use it in our own internal directives.\n. Wish I had metrics on what version of angular people are using with\nformly...\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn May 26, 2015 10:41 AM, \"Caleb Kniffen\" notifications@github.com wrote:\n\n> I personally expose most of mine so that they can be enhanced via\n> delegate. I always forget about angular 1.2 support :)\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/318#issuecomment-105597699\n> .\n. Ah! Thanks for letting me know! I haven't upgraded my app yet, otherwise I would have caught this earlier. #refactorbug\n. Released as 6.10.1. Thanks for the heads up!\n. Also, previous versions with this bug have been deprecated on npm.\n. I'm not familiar with Meteor. I don't know how to help you. Please provide more information and [an example](http://jsbin.com/biqesi/edit) of the problem.\n. Sorry @abcd-ca. What I mean is I need something that actually runs and demonstrates the problem, not just some sample code. Everything you've shown seems like it should work just fine so I can't tell you what the problem is without being able to jump in a debugger. From that error, it appears that somewhere we're calling `Object.keys` on a `null` or `undefined` value.\n. Here are all the places we're doing that: https://github.com/formly-js/angular-formly/search?utf8=%E2%9C%93&q=Object.keys\n. I'm going to go ahead and close this issue. Let me know if there's further help that I can give.\n. Take a look at formlyUtils.reverseDeepMerge\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Sep 5, 2015 6:04 PM, \"Ed Staub\" notifications@github.com wrote:\n\n> I can shed some light, I think. The problem occurs when an\n> AngularMeteorObject http://angular-meteor.com/api/AngularMeteorObject\n> is used as the \"<formly-form model=\" attribute. Angular tries to do an\n> angular.copy on it, I'd guess maybe to create an isolate scope for the\n> formly directive. Even if this worked, it would be a really bad thing to do\n> - AngularMeteorObject is HUGE when all the references are chased - it\n>   wouldn't surprise me if it pulled in all of the relevant bits of the Mongo\n>   collection, connection, etc.\n> \n> The workaround I use is simply the \"Doctor, it hurts when I do that\"\n> solution - don't do that. I don't need live updating from meteor, so I copy\n> the fields from the AngularMeteorObject into a simple formly model object\n> that just contains the fields, and then copy the fields back to do a save.\n> I have a simple utility function to do this that takes an array of field\n> names.\n> \n> If there's anything to do to help this in formly, it might be to provide a\n> copy utility function that traverses the \"<formly-form fields=\" fields\n> object and does a deep copy of all the fields, given a source object and\n> optional destination. This may exist already - I didn't chase it. I may\n> write one later.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/320#issuecomment-138010568\n> .\n. Sounds like a problem with jspm. Angular-formly is using UMD. jspm should\nsupport that. If you have any suggestions for how to fix it for jspm, I'm\nall ears.\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn May 28, 2015 7:08 AM, \"Martin\" notifications@github.com wrote:\n\n> By and large jspm usage of formly works. But I get the message \"WARNING:\n> Tried to load angular more than once\" which is triggered by formly\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/321.\n. Looks like it actually is already available in the jspm registry, but I'm thinking that jspm doesn't deal with peerDependencies correctly. Here's a PR that might fix the problem: https://github.com/jspm/registry/pull/396\n. Deprecated 6.10.1 and created 6.10.2 with this bugfix. Thanks.\n. Sorry @najai, I have no idea what's going on here. I made [a copy](http://jsbin.com/qudugu/edit) of your example and bound the two forms to the same model and still nothing's working. I'll see if I can find time to debug this later, but you might try stack overflow...\n. Don't worry, it's actually not _too_ painful to support Angular 1.2 right now, but I'm curious to hear how many people are using angular-formly with angular 1.2. I will likely eventually drop support, but when I do, it will definitely be a major version change, so you shouldn't be auto-upgraded. And I'll make an announcement (so [follow me on twitter](https://twitter.com/kentcdodds))\n. Closing. I don't think I'll be dropping 1.2 support for a while, it's really not a huge pain to support right now (though I do have some custom code for it that would be nice to get rid of). I'll comment in this issue if I'm thinking about dropping support, and don't worry, as long as you use a `^` or `~` in your dependency listing, I wont push a break to you (because it'll be part of a major version change).\n. Thanks for the input @PascalPrecht!\n\nFor everyone, updating angular-formly to drop support for 1.2 costs me more time than leaving support for 1.2 right now, so I think that I'll leave it as is because it's working well and doesn't hinder the experience of developers using the latest version of angular. _But support for 1.2 will be dropped eventually for sure._ But again, it will be in a major release version so as long as you're using exact versioning or you're using `^` or `~` you should be fine.\n. Yeah, I think that v7 will likely be the last version to support IE. I'll remove support for it in v8 (\ud83d\udc48 not the JS engine...) :-)\n. Nope, I think a normal $scope.$watch in your controller is the best way to\ndo that. You could also look into the watch property on the field, but I'd\nprobably just do a normal watch.\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn May 30, 2015 7:45 AM, \"Sidhartha Chatterjee\" notifications@github.com\nwrote:\n\n> So, in my form currently (snippet below) the value of the link key is\n> supposed to be the result of the Slug .slugify function called on the\n> value of the name key. I could of course do this with a $scope.$watch on\n> the value of model.name but I'm wondering if there's a better way. I\n> can't find anything in the documentation. Any ideas?\n> \n> vm.fields = [{\n>     key: 'name',\n>     type: 'input',\n>     templateOptions: {\n>         label: 'Name',\n>         placeholder: \"John Doe's Party\",\n>         required: true\n>     }\n> }, {\n>     key: 'link',\n>     type: 'input',\n>     // value: Slug.slugify(vm.model.name),\n>     templateOptions: {\n>         label: 'Link',\n>         placeholder: \"john-does-birthday-party\",\n>         required: true\n>     }\n> }, {\n>     key: 'city',\n>     type: 'input',\n>     templateOptions: {\n>         label: 'City',\n>         placeholder: 'Las Vegas',\n>         required: true\n>     }\n> }];\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/326.\n. Closing this for now. Feel free to reopen it if you need.\n. Thanks for working on this. I think I'll make it a part of a beta release once you've adjusted some of the stuff and it's merged (probably Monday). Just because I'm not certain about how it will/should behave... Would like to get some feedback on the API.\n. Hey @ckniffen, so, just to verify, is this PR what you want it to be? I haven't had a chance to pull it down yet, but I want to verify with you that you think this is the best way (rather than the directive approach).\n. Hmmm, yes... Good question... I'm thinking that we do the hacky thing. It's not awesome, but I think it's the best thing to do in this scenario.\n. Awesome! Thanks a ton. This is way cool!\n. By the way, thank you sooooo much for squashing this into a single commit. Makes the git history sooo much cleaner :+1: \n. Fantastic catch @koenweyn. I'll have a fix for this asap. The problem is that because the root el isn't a `form` or `ng-form`, there is no `FormController` but angular-formly overrides it anyway. Actually, the way I'll fix it should resolve some issues that people have had in the past... I'll let you know when this is fixed. Thanks!\n. `$ npm install angular-formly@6.11.1` thanks!\n. Thanks for the test! I pushed it out as 6.11.2\n. Cool! As soon as it builds on travis, I'll merge it. Thanks for figuring that out. It was really bugging me. Haha.\n. Thanks @ckniffen, I was actually just about to say that the solution is either fix the bootstrap template so it handles this scenario or make an example of a custom validator that does require like people expect it should. What approach do you think?\n\nEither way, I'm moving this to the bootstrap templates.\n. Moved: https://github.com/formly-js/angular-formly-templates-bootstrap/issues/26\n. Working on it now. Should be fixed soon. Note, I don't think that I'm going to do this for any of the template libraries. It would be far too much effort.\n. You should be able to get this in `6.11.5` and/or `6.12.0-beta.1`. Enjoy!\n. I would like some feedback on this one from people please!\n. @dwolt, thanks for your perspective! The challenge is that there's [some crazy code](https://github.com/formly-js/angular-formly/blob/master/src/directives/formly-form.js#L276-L313) to make things work the way that people expect it should anyway. It also has been the source of several questions from people who've spent a few hours with issues related to this... Though, thinking about it now, some of those questions and issues would not be solved by this change anyway, so maybe I should keep the old code around...\n. This is significant a change. I'm about to release a few minor breaking changes in 7.0.0. I'm going to push this off to a different breaking release so people can benefit from the 7.0.0 release without having to pay the price for this change.\n. I like your suggestion @koraybalci. We could add a console warning to the `formly-form` directive and then remove it later in a major version. The problem is upgrading all of those examples would be incredibly painful. lol. It's funny that the thing that protects users the most from breaking changes is the effort it takes to upgrade documentation!\n\nWhat if instead we made the form controller optional to start?\n. I highly recommend you use controller as syntax. :-) good luck!\n. This article by @pascalprecht talks about bindToController but it references some benefits of controllerAs as well: http://blog.thoughtram.io/angularjs/2015/01/02/exploring-angular-1.3-bindToController.html\n. :+1: glad to hear it!\n. Could you provide an example of what you're doing? It's easier to help\nidentify what's going wrong when I can see what you're doing.\n\nhttp://help.angular-formly.com\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Jul 3, 2015 11:34 PM, \"mweels\" notifications@github.com wrote:\n\n> I seem to be having the same problem, I have setup my controller as.\n> Anything else that would cause fields not to show up? My controller is\n> wired up fine. I am not using routes (not sure if that is a required).\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/333#issuecomment-118463082\n> .\n. A breaking change would be to make it only accept a function (and not an object of checkers) to force this perf enhancement.\n. Closing this issue. If you want to keep it tracked, please put it on the formly-js/angular-formly-website repo :-)\n\nP.S. Thanks for your help @benoror!\n. You'll have to pass it in somehow so it can be referenced. Here's one way you could accomplish that: http://jsbin.com/wehiro/edit\n. However, this is not the place to ask questions, if you have further questions, I suggest that you checkout http://chat.angular-formly.com, http://mailing-list.angular-formly.com, or post on stackoverflow with the `angular-formly` tag. (Watch [this screencast](https://www.youtube.com/watch?v=NXqFiSeBE-M&list=PLV5CVI1eNcJi7lVVIuNyRhEuck1Z007BH&index=2) for more info)\n. > &lt;canned-message&gt;\n> \n> Thanks for your interest in angular-formly. The issues are for bug reports/feature requests, so I'm going to go ahead and close this issue. If you have a question or need help, please [watch this screencast](https://www.youtube.com/watch?v=NXqFiSeBE-M&list=PLV5CVI1eNcJi7lVVIuNyRhEuck1Z007BH) for an explination of the most effective/proper way to get help using angular-formly.\n> \n> Summarized:\n> 1. [Learn angular-formly basics](http://learn.angular-formly.com)\n> 2. [Check the examples](http://angular-formly.com)\n> 3. [Reproduce the issue](http://new-example.angular-formly.com)\n> 4. [Ask on Stack Overflow](http://stackoverflow.com/questions/tagged/angular-formly)\n> 5. [Ask on the mailing list](http://mailing-list.angular-formly.com)\n> 6. [Ask on Chat](http://chat.angular-formly.com)\n> \n> P.S. sorry for the canned message, this just happens a lot :smile: \n> \n> &lt;/canned message&gt;\n. Looks \"super rad\" :wink: However, it's definitely out of scope for angular-formly. But, I would be happy to create a repo called angular-formly-siren-action and give you permissions to develop a plugin for angular-formly that would convert a siren action into a field configuration that angular-formly can understand. And if angular-formly needed to make a change or two to support that kind of plugin architecture, then I would be happy to make that as well. We're doing the same thing with [json-schema](https://github.com/formly-js/angular-formly-json-schema) (though, nobody's really taken ownership of that yet).\n\nEither way, I'm going to close this issue now because it's out of scope.\n. Sounds perfect. When I get back to the computer, I'll set up a blank repo\nand add you as the contributor so anyone else who's interested can ask you\nabout contributing :-) Thanks for your interest!\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Jun 6, 2015 9:50 AM, \"Vincenzo Chianese\" notifications@github.com\nwrote:\n\n> Hey,\n> generally speaking, all the hypermedia world is very cool, even if still\n> coarse. For example, Siren is actually the only hypermedia format that\n> supports the \"action\" concept. Other ones, like CJ or HAL, stops at link\n> support.\n> \n> Given that, I may be interested in contribution for that, but I have no\n> ETA. I am working on a small project and I definitely will try to use your\n> component. After that, I will try (if I'll have some time left) to extract\n> my work and contribute back to your project.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/338#issuecomment-109606779\n> .\n. Created: https://github.com/formly-js/angular-formly-siren-action/issues/1\n. > &lt;canned-message&gt;\n> \n> Thanks for your interest in angular-formly. The issues are for bug reports/feature requests, so I'm going to go ahead and close this issue. If you have a question or need help, please [watch this screencast](https://www.youtube.com/watch?v=NXqFiSeBE-M&list=PLV5CVI1eNcJi7lVVIuNyRhEuck1Z007BH) for an explination of the most effective/proper way to get help using angular-formly.\n> \n> Summarized:\n> 1. [Learn angular-formly basics](http://learn.angular-formly.com)\n> 2. [Check the examples](http://angular-formly.com)\n> 3. [Reproduce the issue](http://new-example.angular-formly.com)\n> 4. [Ask on Stack Overflow](http://stackoverflow.com/questions/tagged/angular-formly)\n> 5. [Ask on the mailing list](http://mailing-list.angular-formly.com)\n> 6. [Ask on Chat](http://chat.angular-formly.com)\n> \n> P.S. sorry for the canned message, this just happens a lot :smile: \n> \n> &lt;/canned message&gt;\n. Hi @abbish. Excellent question, I'm planning on making an example as soon as I am able. This is being tracked [here](https://github.com/formly-js/angular-formly-website/issues/11) (I recommend you subscribe to that issue).\n\n> &lt;canned-message&gt;\n> \n> Thanks for your interest in angular-formly. The issues are for bug reports/feature requests, so I'm going to go ahead and close this issue. If you have a question or need help, please [watch this screencast](https://www.youtube.com/watch?v=NXqFiSeBE-M&list=PLV5CVI1eNcJi7lVVIuNyRhEuck1Z007BH) for an explination of the most effective/proper way to get help using angular-formly.\n> \n> Summarized:\n> 1. [Learn angular-formly basics](http://learn.angular-formly.com)\n> 2. [Check the examples](http://angular-formly.com)\n> 3. [Reproduce the issue](http://new-example.angular-formly.com)\n> 4. [Ask on Stack Overflow](http://stackoverflow.com/questions/tagged/angular-formly)\n> 5. [Ask on the mailing list](http://mailing-list.angular-formly.com)\n> 6. [Ask on Chat](http://chat.angular-formly.com)\n> \n> P.S. sorry for the canned message, this just happens a lot :smile: \n> \n> &lt;/canned message&gt;\n. Example has been created: http://angular-formly.com/#/example/other/testing\n. Most modern angular applications don't need the `name` to be anything special, just unique. If you have this use case, you have a bunch of different ways you could accomplish it. My recommendation: create your own types, don't use one of the template libraries. I would say that your use case is not common for modern applications. Luckily, angular-formly is pretty darn flexible and creating custom templates is quite easy.\n\nYou could do this using `ngModelAttrs`, however it's a bit of a complicated API and I would actually just advise creating your own template to accomplish what you want in this case. It is intended that the `id` and the `name` are something that you don't need to think about and hence, the template libraries don't come with this capability out of the box.\n\n...\n\nThinking about it further... I think that it wouldn't be unreasonable to bring this functionality into angular-formly. Currently, you can specify your own `id` as part of the field configuration object. This will be propagated to both the field's `id` as well as its `name`. I don't think it's unreasonable to allow you to specify a `name` property as well which would be used for the field's `name` if present, otherwise it would default to the `id`... What do you think?\n. You've convinced me. I'll try to get to this asap.\n\nFor anyone looking to contribute, here's a high-level of what needs to be done:\n1. Write a few tests (probably [here](https://github.com/formly-js/angular-formly/blob/master/src/run/formlyNgModelAttrsManipulator.test.js#L39)):\n   - `name` (on both the `options` object and on the scope) defaults to random thing that's the same as the `id`\n   - `name` is the same as `id` when an `id` is specified\n   - `name` is equal to the `name` property specified on the field options object (and is different than the `id`)\n2. Add `name` to the api-check for a field. Somewhere around [here](https://github.com/formly-js/angular-formly/blob/master/src/providers/formlyApiCheck.js#L92)\n3. Add `setFieldName` logic to the `FormlyFieldController`. Somewhere around [here](https://github.com/formly-js/angular-formly/blob/master/src/directives/formly-field.js#L49) potentially even change `setFieldId` to `setFieldIdAndName`... Do something like `$scope.options.name = $scope.options.name || $scope.options.id` at the end\n4. Update [this](https://github.com/formly-js/angular-formly/blob/master/src/run/formlyNgModelAttrsManipulator.js#L27) line to use `scope.name` rather than `scope.id`.\n\nI'd recommend giving [this](https://www.youtube.com/watch?v=QOchwBm9W-g&index=5&list=PLV5CVI1eNcJi7lVVIuNyRhEuck1Z007BH) a watch if you haven't already.\n\nIf nobody gets to this before I do, then that's fine...\n. Thanks to @benoror, this is now supported in 6.13.0. Thanks!\n. Looks like I've pushed a new version since you opened this. I'll remove it next chance I get :-)\n. Hmmm... Yeah, I suppose that internally we'll do something like this:\n\n``` javascript\nconst fieldTransform = $scope.options.fieldTransform || formlyConfig.extras.fieldTransform;\nif (fieldTransform) {\n  $scope.fields = fieldTransform($scope.fields);\n}\n```\n\nThat way you could either copy them yourself or simply modify them to maintain references to the correct field.\n\nThe reason that I bring this up is that if `formly-field` actually makes a copy for you, then you may be pointing to the field that you create in your controller, but that ends up not being the field that formly actually uses, which could lead to unexpected behavior.\n\nBut I think that kind of an implementation in `formly-form` would be pretty flexible.\n. I have pushed some tests for this feature. I've actually already developed this feature and gotten all the tests passing locally, but I want to give someone the chance to make their first OSS contribution, so here are some instructions (if you have already contributed to open source, please let someone else take this one):\n- [x] Watch [this video](https://www.youtube.com/watch?v=QOchwBm9W-g&index=5&list=PLV5CVI1eNcJi7lVVIuNyRhEuck1Z007BH) to learn what you need to do to get things setup\n- [x] Go to [this line](https://github.com/formly-js/angular-formly/blob/30e87b8db29da8555e3abe51fc4ddb6c5df3b840/src/directives/formly-form.test.js#L595) and change `describe.skip` to `describe.only`\n- [x] Run `$ npm test`\n- [x] Notice that all the tests are failing\n- [x] Update formlyApiCheck.js to allow the `formly-form` `options` to have a `fieldTransform` that's a function (somewhere around [here](https://github.com/formly-js/angular-formly/blob/30e87b8db29da8555e3abe51fc4ddb6c5df3b840/src/providers/formlyApiCheck.js#L153))\n- [x] Add a function call right after [this one](https://github.com/formly-js/angular-formly/blob/30e87b8db29da8555e3abe51fc4ddb6c5df3b840/src/directives/formly-form.js#L104) in `formly-form.js` called `setupFields` and declare it below (probably around [setupOptions](https://github.com/formly-js/angular-formly/blob/30e87b8db29da8555e3abe51fc4ddb6c5df3b840/src/directives/formly-form.js#L130)) where you'll put your logic for initializing the `fields` (which means you could probably move [this](https://github.com/formly-js/angular-formly/blob/30e87b8db29da8555e3abe51fc4ddb6c5df3b840/src/directives/formly-form.js#L106) to that new function).\n- [x] Implement `setupFields` to make the tests pass.\n- [x] Once they're passing, change the `describe.only` to `describe` so all the tests run.\n- [x] Commit your changes to the `src/` directory mentioning issue #343 (notice it runs all the tests... twice)\n- [x] Push your changes to your fork, create a PR, get merged, celebrate \ud83c\udf89\n. Thanks @stevebluck! This has been officially released in `6.14.0`!\n. Released in `6.13.2`\n. Would be a good example I think! Thanks!\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Jun 9, 2015 7:38 PM, \"Benjamin Orozco\" notifications@github.com wrote:\n\n> I just happened to answer that issue a few days ago: #326 (comment)\n> https://github.com/formly-js/angular-formly/issues/326#issuecomment-109312896\n> \n> This has been asked before few times (including me), @kentcdodds\n> https://github.com/kentcdodds shall we add this example to the webpage?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/345#issuecomment-110553966\n> .\n. Agreed! Much appreciated @benoror :-)\n\n-Kent C. Dodds\n\nOn Wed, Jul 8, 2015 at 12:48 PM, Obaid ur Rehman notifications@github.com\nwrote:\n\n> Thanks @benoror https://github.com/benoror. Much appreciated.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/345#issuecomment-119694588\n> .\n. @een54, the problem is that by default we embed the jsbins using SSL, however that requires a pro account. I should probably just remove the SSL default...\n. I'm pushing out an update that will make all of the examples not use SSL. Maybe one day we'll bring that back...\n. This looks awesome! Just that one thing I mentioned, but I don't see any other issues. It looks great!\n. Looks like the build is breaking because `sinon` recently stopped publishing a `pkg` file and `karma-sinon` attempts to add the `sinon` file from `pkg` to the `files` in the karma config. I'll look into that problem, then this will get merged. Thanks!\n. Looks like a lot of people are aware of this issue: https://github.com/cjohansen/Sinon.JS/issues/761\n. They must. If you were able to commit this code, then they passed on your machine :-) I'm pushing up a fix, then I'll merge your stuff.\n. Ah hah! You're right! I need to set `$scope.options.form = $scope.form` somewhere around [here](https://github.com/formly-js/angular-formly/blob/master/src/directives/formly-field.js#L255)\n. I'll get to it as soon as possible, but if you want to jump on it, I'd appreciate it!\n. This has been released in `6.13.1`. Thanks @PhilFlash for reporting it and @benoror for fixing it!\n. Do you think that you could add a test that reproduces the original bug and shows that this fixes that bug? TDD style :-)\n. Test looks solid. Just let me know about what you think about my other comment.\n. Can't believe how long that file's getting. I may consider breaking it up a little bit eventually. Haha.\n. Next time we see each other, allow me to give you a high five!\n\n![highest-of-fives-explosion](https://cloud.githubusercontent.com/assets/1500684/8120395/f70d85c8-105b-11e5-9697-9b9714d8a713.gif)\n. This has been released in `6.13.1`. Thanks again.\n. Never heard of it. Have you seen the docs on supporting IE 8?\nhttp://docs.angular-formly.com/v6.13.0/docs/support-ie-8\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Jun 11, 2015 7:04 PM, \"samuelcoutu\" notifications@github.com wrote:\n\n> In IE9/IE8, in my app, the Form doesn't show or isn't render (I am not\n> sure) until the \"F12 developper tools\" is opened and the page refreshed.\n> After the first time the developer tool is shown, not matter if the\n> developper tools is still open or not, the form will successfully be\n> displayed on the page if I refresh the page.\n> \n> Have you already seen that problem?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/349.\n. > &lt;canned-message&gt;\n> \n> Thanks for your interest in angular-formly. The issues are for bug reports/feature requests, so I'm going to go ahead and close this issue. If you have a question or need help, please [watch this screencast](https://www.youtube.com/watch?v=NXqFiSeBE-M&list=PLV5CVI1eNcJi7lVVIuNyRhEuck1Z007BH) for an explination of the most effective/proper way to get help using angular-formly.\n> \n> Summarized:\n> 1. [Learn angular-formly basics](http://learn.angular-formly.com)\n> 2. [Check the examples](http://angular-formly.com)\n> 3. [Reproduce the issue](http://new-example.angular-formly.com)\n> 4. [Ask on Stack Overflow](http://stackoverflow.com/questions/tagged/angular-formly)\n> 5. [Ask on the mailing list](http://mailing-list.angular-formly.com)\n> 6. [Ask on Chat](http://chat.angular-formly.com)\n> \n> P.S. sorry for the canned message, this just happens a lot :smile: \n> \n> &lt;/canned message&gt;\n. Ah, good point @koenweyn. `angular-formly` does use `console.warn` in several places when you're using its API incorrectly as well. I [recommend](http://docs.angular-formly.com/v6.13.0/docs/tips) disabling `api-check` as well as warnings when you ship to production (leave it on in development though). I will add this recommendation to the docs for supporting IE 8.\n. Yes, angular-formly uses $log\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Jun 12, 2015 7:49 AM, \"Caleb Kniffen\" notifications@github.com wrote:\n\n> If $log.warn was used instead of console.warn would that also resolve\n> this issue? I am speaking exclusively about angular-formly rather than\n> api-check.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/349#issuecomment-111497931\n> .\n. Looks awesome. If the tests pass, I'll pull it down, try it out and let you know. If that works, then you can update the PR to do this for all the scripts. That's awesome!\n. Ah! We're really close. It totally works, but it's a bit annoying. The output looks like this:\n\n`npm test`\n\n![screen shot 2015-06-12 at 1 28 12 pm](https://cloud.githubusercontent.com/assets/1500684/8138317/f26929ae-1106-11e5-869b-15ee9f5834bc.png)\n\n`npm run build`\n\n![screen shot 2015-06-12 at 1 29 03 pm](https://cloud.githubusercontent.com/assets/1500684/8138326/02bb5c00-1107-11e5-8f05-545fc76c5f15.png)\n\nWhen it should look like this:\n\n`npm test`\n\n![screen shot 2015-06-12 at 1 29 49 pm](https://cloud.githubusercontent.com/assets/1500684/8138342/1fc10700-1107-11e5-9f72-fe015a04ca50.png)\n\n`npm run build`\n\n![screen shot 2015-06-12 at 1 30 26 pm](https://cloud.githubusercontent.com/assets/1500684/8138354/35fb7c80-1107-11e5-882c-efc20504bfea.png)\n\nAlso, if we could make a more generic function that would be great. There's a lot of duplicate code in those two script files.\n. This works awesome! I have an idea though... One sec...\n. Why don't we create a library for this? I want to use this in other projects. Here's the API I envision...\n\nI install your library as a dependency. We'll call it `better-npm-run` for now... Then in my `package.json`, I do this:\n\n``` json\n{\n  \"scripts\": {\n    \"build:dist\": \"better-npm-run\",\n    \"test\": \"better-npm-run\"\n  },\n  \"betterScripts\": {\n    \"build:dist\": \"NODE_ENV=development webpack --config $npm_package_webpack --progress --colors\",\n    \"test\": \"NODE_ENV=test karma start\"\n  }\n}\n```\n\nOr something like that? It would just be nice to have all my scripts right in the package.json.\n\nAnd the library would manage ensuring that setting environment variables work cross-platform. What do you think?\n. Hmmm... That is a bit verbose, and it prevents me from doing this: `NODE_ENV=something some-command && NODE_ENV=somethingElse some-other-command` though there's a work-around... Hmmm... Probably would be fine to start with what you have :+1: \n. Sorry, by the way, I just fixed up a thing or two with `package.json` so that's why this can't merge anymore :-(\n. Awesome! I'll take a look at it!\n. Hey man, just tried it out on my [new library](https://github.com/alianza-dev/az-promise-show) and it worked great for me. I didn't even notice a difference. :+1: \n. Thanks for building that! I've implemented it. Please test it out :-) 6fbaea258a1f3c5737f7d4276ad49c2a065988e3\n. Couldn't be more perfect! I'll wait for travis to finish with the build just be sure, then I'll merge this in and release a new version. Then I'll tweet about it :-) Do you have a twitter handle I could @ mention?\n. Linking to #343\n. Hmmm... I think that what you're suggesting is actually not what I thought you were asking. Could you please provide [an example](http://jsbin.com/biqesi/edit) of the problem you're seeing? You should be able to add/remove fields from a formly-form. Though, I've never done it myself, I think it should work (I seem to remember seeing others do it).\n. Good luck!\n. Thanks :+1: \n. Thanks for the bug report. Could you please [provide an example](https://github.com/formly-js/angular-formly/blob/master/CONTRIBUTING.md#reporting-bugs--requesting-features) of the bug?\n. Whoops! Sorry about that! I'll fix the docs now.\n. I changed some of the wording. Thanks! I think I'm going to remove that in a breaking release... No reason you should want that. Does this solve your problem @asadsahi?\n. Thanks for the tip! :disappointed_relieved: \n. No, I think we'll keep it around :-) Looks like you're using it.\n. > &lt;canned-message&gt;\n> \n> Thanks for your interest in angular-formly. The issues are for bug reports/feature requests, so I'm going to go ahead and close this issue. If you have a question or need help, please [watch this screencast](https://www.youtube.com/watch?v=NXqFiSeBE-M&list=PLV5CVI1eNcJi7lVVIuNyRhEuck1Z007BH) for an explination of the most effective/proper way to get help using angular-formly.\n> \n> Summarized:\n> 1. [Learn angular-formly basics](http://learn.angular-formly.com)\n> 2. [Check the examples](http://angular-formly.com)\n> 3. [Reproduce the issue](http://new-example.angular-formly.com)\n> 4. [Ask on Stack Overflow](http://stackoverflow.com/questions/tagged/angular-formly)\n> 5. [Ask on the mailing list](http://mailing-list.angular-formly.com)\n> 6. [Ask on Chat](http://chat.angular-formly.com)\n> \n> P.S. sorry for the canned message, this just happens a lot :smile: \n> \n> &lt;/canned message&gt;\n\nWhat you're looking for is the [`model`](http://docs.angular-formly.com/v6.15.1/docs/field-configuration-object#model-object--string) property. Something like this:\n\n``` javascript\n[\n  {\n    key: 'FirstName',\n    ...\n  },\n  {\n    model: 'model.Address',\n    key: 'Street'\n    ...\n  }\n]\n```\n. This is indeed a bug. `fieldGroup` uses a `formly-form` itself and it copies attributes and their values from the parent formly-form (except for attributes like `model`, and `fields`). The problem is that it should also account for `data-model` and `data-fields` etc. You're welcome to make a PR. Otherwise I'll look at this as soon as I am able...\n\nShould be pretty simple, just need to add the data counterpart to [this array](https://github.com/formly-js/angular-formly/blob/master/src/directives/formly-form.js#L91)\n. I don't think that there would be a problem with adding the attribute style to this directive. It's technically more of a \"component directive\" so it makes more sense as an element, but I'd be find to open it up as an attribute.\n. Thanks for the PR @redhead! This is available in `6.15.2`\n. Very good. I like the suggestion. I'd be happy to pull this concept in. I'll try to get to it as soon as I am able. If you want to try your hand at a PR, see CONTRIBUTING.md and the changes will likely be around here: https://github.com/formly-js/angular-formly/blob/master/src/run/formlyNgModelAttrsManipulator.js#L17\n. Like with #343, I've created tests for this feature and I'm going to give someone a shot at contributing to open source for the first time :-) So I will only accept a PR from someone who's never contributed to open source before.\n\nInstructions:\n- [x] Watch [this video](https://www.youtube.com/watch?v=QOchwBm9W-g&index=5&list=PLV5CVI1eNcJi7lVVIuNyRhEuck1Z007BH) to learn what you need to do to get things setup\n- [x] Go to [these tests](https://github.com/formly-js/angular-formly/blob/master/src/run/formlyNgModelAttrsManipulator.test.js#L30-L76) and change `it.skip` to `it.only`\n- [x] Run `$ npm test`\n- [x] Notice that all the tests are failing\n- [x] Update the [formlyNgModelAttrsManipulator](https://github.com/formly-js/angular-formly/blob/master/src/run/formlyNgModelAttrsManipulator.js) to make the tests pass. (hint, what you'll want to do is construct the query sent into `querySelectorAll` to add `:not` for both the special attribute as well as the specified selector, so you can potentially have two `:not`s in your query.)\n- [x] Once they're passing, change the `it.only`s to `it`s so all the tests run.\n- [x] Commit your changes to the `src/` directory mentioning issue #343 (notice it runs all the tests... twice)\n- [x] Push your changes to your fork, create a PR, get merged, celebrate \ud83c\udf89\n\nI'm happy to hold your hand through this if you need help. [Catch me on gitter](https://gitter.im/kentcdodds).\n. P.S. I've already developed the solution, I just haven't committed it because I want to give someone else a first shot at contributing to open source :+1: \n. @douglas-mason committed this! Thanks!\n. This will be released as soon as I'm able\n. This has been officially released in `6.16.0`. Docs have been [updated](http://docs.angular-formly.com/v6.16.0/docs/ngmodelattrstemplatemanipulator#disabling).\n. > Would you be interested in that PR? Or are you tired of trying to support IE8?\n\nBoth :-) Thanks!\n. I created an example that does this for you :-) http://angular-formly.com/#/example/integrations/angular-material\n\nAs always, help is welcome on the template library :D\n. Released in `6.15.2` Thanks!\n. Internally, angular-formly doesn't use `controller as` because it supports angular 1.2. You do not have access to your controller's scope inside an angular-formly template, you need to pass all the data your template needs via the `templateOptions` or `data` properties.\n\n> &lt;canned-message&gt;\n> \n> Thanks for your interest in angular-formly. The issues are for bug reports/feature requests, so I'm going to go ahead and close this issue. If you have a question or need help, please [watch this screencast](https://www.youtube.com/watch?v=NXqFiSeBE-M&list=PLV5CVI1eNcJi7lVVIuNyRhEuck1Z007BH) for an explination of the most effective/proper way to get help using angular-formly.\n> \n> Summarized:\n> 1. [Learn angular-formly basics](http://learn.angular-formly.com)\n> 2. [Check the examples](http://angular-formly.com)\n> 3. [Reproduce the issue](http://new-example.angular-formly.com)\n> 4. [Ask on Stack Overflow](http://stackoverflow.com/questions/tagged/angular-formly)\n> 5. [Ask on the mailing list](http://mailing-list.angular-formly.com)\n> 6. [Ask on Chat](http://chat.angular-formly.com)\n> \n> P.S. sorry for the canned message, this just happens a lot :smile: \n> \n> &lt;/canned message&gt;\n. I'm sorry, but what's \"not cool\" about this?\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Jun 25, 2015 7:28 AM, \"Alexander\" notifications@github.com wrote:\n\n> Not cool.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/361#issuecomment-115258383\n> .\n. What happened to this? Still working on it?\n. This is exactly what I want. Welcome to open source! :-) Looking forward to\nseeing the PR!\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Jun 25, 2015 12:45 PM, \"Chris Casad\" notifications@github.com wrote:\n\n> Sorry. I had my .gitignore file in with the commit so I was backing it out\n> and going to resubmit. That's what you get for asking newbies to help. =)\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/pull/362#issuecomment-115359510\n> .\n. Awesome @ccasad! Thanks for the PR. Do you mind if we iterate on it a bit? I've updated the tests and I'll add comments in your implementation. If you could pull those changes and give it another shot that'd be awesome. Thanks for working with me on this. I hope it's helpful for you :-)\n. Thanks for working on this! I merged another PR for it, and it has been released in `6.16.0`. You're welcome to try again next time! :dancer: \n. Looks good to me! :-)\n. Hmmmm... Can't be auto merged... I'll have to look at it when I'm at my machine.\n. Awesome! Thanks! I'll release this soon!\n. This has been officially released in `6.16.0`. Thanks again!\n. Hey @douglas-mason, I'm writing a blogpost that references this PR, do you mind if I reference you in it? https://medium.com/@kentcdodds/78281ea47455\n. Linking this to #358\n. I think this is an issue with the template library, not angular-formly.\nCould you move this issue to the template library please?\nhttps://github.com/formly-js/angular-formly-templates-bootstrap\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Jun 25, 2015 2:30 PM, \"Vitaly\" notifications@github.com wrote:\n\n> Working with multiCheckbox I found an issue. As demonstrated in this jsbin\n> http://jsbin.com/janeha/edit?html,js,output. In the first case, I\n> predefine checkbox values in options array, and then I simulate async\n> population of the values and in the UI we can see checked checkbox. In the\n> second case I simulate async loading of the checkbox values and when I\n> populate values, the checkbox is not checked.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/365.\n. Thanks!\n. @ckniffen, not sure I understand what you mean. The `$parsers` and `$formatters` apis are available in angular 1.2\n. Yes, it would be similar to [`formly-custom-validation`](https://github.com/formly-js/angular-formly/blob/master/src/directives/formly-custom-validation.js) except it would do something like: `ctrl.$parsers = ctrl.$parsers.concat(options.parsers)` or `ctrl.$parsers = options.parsers.concat(ctrl.$parsers)` depending on which order we decide to apply the new parsers.\n\nThen there's the decision on how to merge them...\n. @benoror, yes, it will, that's what I'm planning on doing. But we need to consider `defaultOptions` and overriding as well as considering existing $parsers and $formatters.\n. That's mostly what I want feedback on (noted in the numbered list above)\n. Sounds good.\n\nFor your \"as an object\" suggestion, I considered that as well. The problem is then you have to figure out how to determine which to push on the pipeline first. So I think that an `id` would probably be better. But can anyone think of a use case where this would be needed? I think I'll leave it out until someone mentions they need it...\n. Here's my plan for implementation:\n\nWhen merging parsers, they will be concatenated together. Options can be merged in four scenarios. This is the order the parsers will be concatenated (meaning the parsers will run from the top of this list to the bottom):\n1. Extended type\n2. Type\n3. `optionsTypes` (in order specified)\n4. `parsers` specified on the field\n\nFor example:\n\n``` javascript\nformlyConfig.setType({\n  name: 'parent1',\n  defaultOptions: {\n    parsers: [parent1Parser1, parent1Parser2]\n  }\n});\n\nformlyConfig.setType({\n  name: 'parent2',\n  defaultOptions: {\n    parsers: [parent2Parser1, parent2Parser2]\n  }\n});\n\nformlyConfig.setType({\n  name: 'child',\n  extends: 'parent1', // <-- note this!\n  defaultOptions: {\n    parsers: [childParser1, childParser2]\n  }\n});\n\nformlyConfig.setType({\n  name: 'optionType1',\n  extends: 'parent2', // <-- note this!\n  defaultOptions: {\n    parsers: [optionType1Parser1, optionType1Parser2]\n  }\n});\n\nformlyConfig.setType({\n  name: 'optionType2',\n  defaultOptions: {\n    parsers: [optionType2Parser1, optionType2Parser2]\n  }\n});\n\n// parser definitions excluded for brevity...\n\n// elsewhere... in some controller\nvar vm = this;\n\nvm.fields = [\n  {\n    type: 'child',\n    optionsTypes: ['optionType1', 'optionType2'],\n    parsers: [fieldParser1, fieldParser2]\n  }\n];\n```\n\nThe resulting merged array for this field's parser would appear as:\n\n``` javascript\n[\n  parent1Parser1, parent1Parser2,\n  childParser1, childParser2,\n  parent2Parser1, parent2Parser2,\n  optionType1Parser1, optionType1Parser2,\n  optionType2Parser1, optionType2Parser2,\n  fieldParser1, fieldParser2\n]\n```\n\nFormatters will be the exact same.\n\nCould someone sanity check me on this one? It's a little confusing, I don't use parsers/formatters very often, so someone with more experience may be able to help me to determine the most logical solution. I think this is correct though. Just want to make sure that I'm covering my bases!\n\nP.S. Doing something like this with that many parsers would be utter insanity... Just had that thought :-) But this is a very contrived example\n. Note, in the case of formatters, they will be executed in reverse order as indicated by the docs. But I believe this is also desirable behavior...\n. Just got the above example to pass as a test for parsers. I'm going to push this up into master. I would really appreciate if interested parties try it out and ensure that it works as you expect. I'll be working on formatters next. After I get some feedback (and fix anything) then I'll release a beta so more people can try it out. I'm concerned about getting this feature right, so please help by trying it out.\n. Sorry, jumped the gun. I broke several other tests with my implementation. I'll comment when I've actually pushed the parsers stuff.\n. Alright, it's working great! I've decided to make all parsers evaluate as formlyExpressions which means they can be expressed as strings and they also have access to the field's scope (and therefore the field's `options`). Also, I've actually just released a beta version that has parsers support. Again, please test it out and make sure I haven't missed anything important. I'll add formatters once I hear that parsers is working out for people (should reuse much of the same code).\n\n```\nnpm install angular-formly@6.21.0-beta.0\n```\n. Alrighty, `formatters` support is in the next beta version. Please provide feedback:\n\n```\nnpm install angular-formly@6.21.0-beta.1\n```\n. Has anyone had a chance to validate that this works as you'd expect? I don't really have a use case for this in my app, so it's hard for me to know whether it makes sense as implemented.\n. It's out of beta :-) Thanks for the feedback!\n. Thanks for trying it out @koenweyn! I'm sure that we could make it work without trouble. It would amount to adding that logic you have to [this function](https://github.com/formly-js/angular-formly/blob/master/src/directives/formly-field.js#L361). This seems like a good opportunity for a [`first-timers-only`](https://medium.com/@kentcdodds/first-timers-only-78281ea47455) issue. Do you think that you could file a bug separately and I'll prepare the issue for a first timer? (you could even prepare it if you would like).\n. Precisely :-) You can see [the others](https://github.com/formly-js/angular-formly/issues?utf8=%E2%9C%93&q=is%3Aissue+label%3Afirst-timers-only+)\n. @synthecypher, I created an example for the website. It will be live soon. If you can't wait 3 more minutes for it to deploy, [here it is](http://jsbin.com/luwoso/edit?html,js,console,output) :-)\n. You add them as part of the `defaultOptions` :-)\n. The best way to get help is to follow the instructions here: http://help.angular-formly.com\n. Thanks for commenting @a-laughlin. I actually like that idea a lot. Unless someone comes along with a good rebuttal, I think this is what I'll do.\n\nThis can be implemented as a \"smooth\" breaking change, as in, I'll add the `asyncValidators` property, and add a console warning to any non `asyncValidators` validator that returns a promise that this api is being deprecated and they must either return `true` or `false`, or they must use the new `asyncValidators` api.\n\nWould love more input (even if it's a :+1:). I think this is where I'm going.\n. Released as `6.18.0`. Not a breaking change. Simply allows you to add `asyncValidators` explicitly. Also, you can specify `formlyConfig.extras.explicitAsync` which will prevent any of your `validators` from being placed onto the `$asyncValidators` pipeline.\n. Just updated [the example](http://angular-formly.com/#/example/other/unique-value-async-validation)\n. This is definitely possible, but it's not the default behavior in angular and angular-formly doesn't (isn't going to) support this in the core because it's pretty use-case specific. You could use an `onChange` in the `templateOptions` of your checkbox that removes the values you wish. That would likely be a good solution I think.\n\n> &lt;canned-message&gt;\n> \n> Thanks for your interest in angular-formly. The issues are for bug reports/feature requests, so I'm going to go ahead and close this issue. If you have a question or need help, please [watch this screencast](https://www.youtube.com/watch?v=NXqFiSeBE-M&list=PLV5CVI1eNcJi7lVVIuNyRhEuck1Z007BH) for an explination of the most effective/proper way to get help using angular-formly.\n> \n> Summarized:\n> 1. [Learn angular-formly basics](http://learn.angular-formly.com)\n> 2. [Check the examples](http://angular-formly.com)\n> 3. [Reproduce the issue](http://help.angular-formly.com)\n> 4. [Ask on Stack Overflow](http://stackoverflow.com/questions/tagged/angular-formly)\n> 5. [Ask on the mailing list](http://mailing-list.angular-formly.com)\n> 6. [Ask on Chat](http://chat.angular-formly.com)\n> \n> P.S. sorry for the canned message, this just happens a lot :smile: \n> \n> &lt;/canned message&gt;\n. Good question. I believe the docs are unclear. If the type you have specified has wrappers assigned to it, then the only way to get rid of them is to use `null` which will remove all wrappers (as you have pointed out). There is not currently a way in angular-formly to completely override wrappers. So you'll have to create another type that has the wrappers you want. You can use `formlyConfig.getType` to copy properties from an existing type to a new, similar type that you create.\n\nI'm thinking that as a breaking change for the next version, I'll make it so that if `wrapper` are specified on the field, then the `type's` wrappers will not apply. That seems to me to make the most sense. (while I'm at it, I'll change the name from `wrapper` to `wrappers` because most of the time it is specified as an array anyway.\n. Would love feedback from anyone on this breaking change for the next version:\n1. Any problem changing the term `wrapper` to `wrappers` as it's specified as an array most of the time?\n2. Any problem removing the `default` wrapper behavior? Basically, if you specify the name `'default'` then it will wrap all types. This is a little bit too magical I think. And I believe it's undocumented.\n3. Any problem changing behavior so that if you specify a `wrappers` array on a field then rather than joining with the `wrappers` from the type, it entirely overrides them?\n4. I've recently thought that `<formly-transclude></formly-transclude>` is quite long. Any suggestions on whether it should be something else/shorter?\n5. Anything else anyone would like to see change in wrappers?\n. Good comments @redhead. I'll keep the `formly-transclude` then\n\n@pdemilly, I love the idea of it being an object with keys. The problem with that is how to define order. Once you do that you get into an issue with priority... We've talked about this on #368. What we could do though is give a wrapper an ID and you could optionally specify a wrapper as an object with a `name` and an `id`. Something like:\n\n``` javascript\nwrappers: ['foo', {name: 'bar', id: 'barWrapper'}]\n```\n\nThough I still think that this is less simple than just overriding the type's properties altogether. Thoughts?\n. Oh, I like that a lot. And that could be non-breaking as well... Problem is that it's not quite as obvious, so I think I'll still have a breaking change to make it override wrappers when specified, but I think optionally giving it a function opens a lot of flexibility.\n. Definitely not going to get into priority. I would hate to see the day where I see: `priority: Infinity` and `priority: Infinity + 1` :-(\n\nWe need this to be simpler, not more complex.\n. Can you give more info? Give us more of the error message. What version of angular-formly and angular are you using?\n. I'm not sure what's going on. But the problem is that the `formly.js` script is not getting added to your resulting minified script file.\n. > &lt;canned-message&gt;\n> \n> Thanks for your interest in angular-formly. The issues are for bug reports/feature requests, so I'm going to go ahead and close this issue. If you have a question or need help, please [watch this screencast](https://www.youtube.com/watch?v=NXqFiSeBE-M&list=PLV5CVI1eNcJi7lVVIuNyRhEuck1Z007BH) for an explination of the most effective/proper way to get help using angular-formly.\n> \n> Summarized:\n> 1. [Learn angular-formly basics](http://learn.angular-formly.com)\n> 2. [Check the examples](http://angular-formly.com)\n> 3. [Reproduce the issue](http://help.angular-formly.com)\n> 4. [Ask on Stack Overflow](http://stackoverflow.com/questions/tagged/angular-formly)\n> 5. [Ask on the mailing list](http://mailing-list.angular-formly.com)\n> 6. [Ask on Chat](http://chat.angular-formly.com)\n> \n> P.S. sorry for the canned message, this just happens a lot :smile: \n> \n> &lt;/canned message&gt;\n. Good luck! Please reach out to us on the mailing list or chat if you need help. The angular-formly community is happy to help :+1:\n. It's because `expressionProperties` only run when the `formState` or the `model` changes. Doing this saves big time on watchers (two watchers per form rather than two per field). You'll need to either bind the tabs model's to `formState` (probably easier) or you'll have to add a `$watch` to your controller and invoke the `runExpressions` function on the fields yourself. Like this: https://jsbin.com/hijoci/edit?html,js,output\n. Thanks for including a jsbin that reproduces your question. Makes it much easier to help!\n\n> &lt;canned-message&gt;\n> \n> Thanks for your interest in angular-formly. The issues are for bug reports/feature requests, so I'm going to go ahead and close this issue. If you have a question or need help, please [watch this screencast](https://www.youtube.com/watch?v=NXqFiSeBE-M&list=PLV5CVI1eNcJi7lVVIuNyRhEuck1Z007BH) for an explination of the most effective/proper way to get help using angular-formly.\n> \n> Summarized:\n> 1. [Learn angular-formly basics](http://learn.angular-formly.com)\n> 2. [Check the examples](http://angular-formly.com)\n> 3. [Reproduce the issue](http://help.angular-formly.com)\n> 4. [Ask on Stack Overflow](http://stackoverflow.com/questions/tagged/angular-formly)\n> 5. [Ask on the mailing list](http://mailing-list.angular-formly.com)\n> 6. [Ask on Chat](http://chat.angular-formly.com)\n> \n> P.S. sorry for the canned message, this just happens a lot :smile: \n> \n> &lt;/canned message&gt;\n. Thanks @benoror! That's exactly correct @HoplaGeiss :-)\n\n> &lt;canned-message&gt;\n> \n> Thanks for your interest in angular-formly. The issues are for bug reports/feature requests, so I'm going to go ahead and close this issue. If you have a question or need help, please [watch this screencast](https://www.youtube.com/watch?v=NXqFiSeBE-M&list=PLV5CVI1eNcJi7lVVIuNyRhEuck1Z007BH) for an explination of the most effective/proper way to get help using angular-formly.\n> \n> Summarized:\n> 1. [Learn angular-formly basics](http://learn.angular-formly.com)\n> 2. [Check the examples](http://angular-formly.com)\n> 3. [Reproduce the issue](http://help.angular-formly.com)\n> 4. [Ask on Stack Overflow](http://stackoverflow.com/questions/tagged/angular-formly)\n> 5. [Ask on the mailing list](http://mailing-list.angular-formly.com)\n> 6. [Ask on Chat](http://chat.angular-formly.com)\n> \n> P.S. sorry for the canned message, this just happens a lot :smile: \n> \n> &lt;/canned message&gt;\n. Not only that, but the context in which the string version is evaluated doesn't have access to `$scope`.\n. Actually, the way angular works is it only runs validation on the `NgModelController` that actually had a changed value. This was a decision that comes with downsides for sure. The one downside is that you have to tell angular to re-validate the fields yourself. You have a handle on the `NgModelController` via the `options.formControl` property (or the shortcut of `fc` if you have the field's scope). Here's [an example](http://angular-formly.com/#/example/other/matching-two-fields) that may help you. It uses an expressionProperty to accomplish this.\n\n> &lt;canned-message&gt;\n> \n> Thanks for your interest in angular-formly. The issues are for bug reports/feature requests, so I'm going to go ahead and close this issue. If you have a question or need help, please [watch this screencast](https://www.youtube.com/watch?v=NXqFiSeBE-M&list=PLV5CVI1eNcJi7lVVIuNyRhEuck1Z007BH) for an explination of the most effective/proper way to get help using angular-formly.\n> \n> Summarized:\n> 1. [Learn angular-formly basics](http://learn.angular-formly.com)\n> 2. [Check the examples](http://angular-formly.com)\n> 3. [Reproduce the issue](http://help.angular-formly.com)\n> 4. [Ask on Stack Overflow](http://stackoverflow.com/questions/tagged/angular-formly)\n> 5. [Ask on the mailing list](http://mailing-list.angular-formly.com)\n> 6. [Ask on Chat](http://chat.angular-formly.com)\n> \n> P.S. sorry for the canned message, this just happens a lot :smile: \n> \n> &lt;/canned message&gt;\n. Ah, in that case, place a `templateOptions.onChange = function($viewValue, $modelValue, scope) { ... }` and do the logic in there instead. (You have access to the other field via the `scope.fields` property)\n. Note, this wouldn't be without a migration path. Because of the `fieldTransform` functionality, I could provide a workable fieldTransform (with instructions/an example on how to use it) that you could copy to your project and slowly migrate the forms in your project over time. It wouldn't be perfect, but I think it would work well. So don't let that part scare you. I'm more concerned about the idea. Do you think this would make angular-formly more approachable/simple/maintainable/etc.?\n. Hopefully most templates will require very few changes. The idea of most of these attributes is that they would be dynamically added to the `ng-model` element(s) in the template so the templates don't have to concern themselves with them. But I know at least the bootstrap templates' [label](https://github.com/formly-js/angular-formly-templates-bootstrap/blob/master/src/wrappers/label.html#L4) wrapper uses `required` and would require updating. But that would be trivial and I would likely make a shortcut for this new property (like the `to` shortcut for `options.templateOptions`, we'd probably have `ma` for `options.ngModelAttrs` or something like that).\n. Not quite, but from a template author's perspective, you should hopefully have just a few places to update things. Unfortunately, from a user's perspective, many field properties that used to live in `templateOptions` would go to `ngModelAttrs` instead. As I said, I'd make a demonstration of a  `fieldTransform` that would allow you to make that transition over time, but eventually you'd want to rewrite all of your field configuration objects to resemble the new format.\n. I agree @redhead, I don't like the name either (especially since it's already in use and it seems long and ugly to me too). I'd love suggestions on a better one... Perhaps we can consider something that would make sense in both an angular 1 and angular 2 context...\n. Hmmm... I'll have to think on that a little more. I'm trying to think what would be most obvious for a new comer... `ngModelAttrs` is the best name I can think of for someone new to angular-formly but used to angular forms...\n. @dwolt, your perspective as a user is exactly what I'm trying to get, so thanks for sharing!\n\nOriginally, angular-formly didn't have any kind of structure for its options. If you wanted to create a new template, you would just add your own property to the field config object and life was good. Until the angular-formly core library comes around and decides to use a property of the same name for some other purpose and now you're stuck.\n\nFor example, let's imagine that you decide you want to make a special input that allows you to react when when you type into the input. You would probably add an `onKeyup` property to the field config and use that:\n\n``` javascript\n{\n  type: 'datepicker',\n  onKeyup: function(event) {\n    if (event.which === 32) {\n      console.log('space typed!!');\n    }\n  }\n}\n```\n\nThen angular-formly comes along and decides to add this to all fields, but makes the function arguments different. Instead of passing the event, it passes the `$viewValue` or something. Or perhaps angular-formly processes your field differently because that field exists. This would prevent you from upgrading until you refactored all of your fields.\n\nHopefully that makes sense and builds a case for the separation as well as the use of api-check in this project. I force you to place your own stuff in either `data` or `templateOptions` and I let you have full reign over those objects. Except in the case of `templateOptions`, there are properties that angular-formly uses to do some of its magic. Which sort of reintroduces the original issue. Which is why I'm suggesting this change would be worth the migration.\n\nDoes that make sense? Any holes in my logic? Is it not worth it?\n\nAsside from that, the `templateOptions` stuff is a little magical and is something that you must learn. It's not really intuitive. Something like `ngModelAttrs` makes a lot of sense. You just think to yourself: \"What would I normally put alongside the `ng-model` element, there's probably a property for that.\"\n. @rmulder, I cannot express how sorry I am that the change to `hideExpression` didn't work for you. I remember you mentioning having difficulties with it, but I didn't realize how wide sweeping a change that was for you. The reason it didn't result in a breaking change was the old way still works just as it did before, so you can stick with that. And I could add something that allows you to disable the warning formly now gives if you try to use `hide` in an expressionProperty if you want. I'm just so so sorry that this  has caused you grief :-(\n\nI appreciate you voicing your opinion and I will make sure that this upgrade is as painless as possible. I'm confident that a `fieldTransform` could quite easily make this work out of the box (you'd just copy/paste the field transform and it should work for you).\n\nOne thing I wish to clarify is that this library is not \"under development.\" This library works really really well and I could stop working on it and people would benefit from it for as long as angular 1.x is around. It is, however, being developed and improved. I just want to reiterate that angular-formly is no more \"under development\" as angular is. It's solid and it honors semver. I expect this isn't what you meant @rmulder, but I want to make it clear that angular-formly is a production-ready library :+1: :-)\n. Good thoughts everyone. Thanks for providing feedback (keep it coming). I'm going to think on this for a bit and I'll get back to you with what I decide on.\n. @ckniffen, you've convinced me with this line:\n\n> The reason being is that more implementation details now need to be known in order to know which object to place properties.\n\nI want to try really hard to not force people to know implementation details. For that reason, I'm closing this issue.\n\nBig thanks to everyone who dropped their opinion in here. Note, I do intend to implement #378 which should make it easier to add custom attributes to the `ng-model` element. Feel free to read up on that and drop an opinion on there. That will _not_ be a breaking change :-)\n. Also, I intend to implement adding the `extras` property onto the field configuration object. This object would be apiChecked by formly (as opposed to the `templateOptions` and `data` properties) and would be used to configure stuff that's specific to angular-formly core (rather than a template library). (Though, having just written that, it sounds like implementation details, but I think this is one case that we can make an exception due to the fact that these are edge cases).\n. Fantastic. Thank you!\n. This has been released (and tested) in `6.16.1`. Thanks for finding the bug!\n. And thanks even more for fixing it and explaining it so well :-)\n. Awesome. I think that I'm going to implement this one. I think it's a good idea and much simpler than the existing `ngModelAttrs`.\n. The existing `ngModelAttrs` is a highly complicated API because it's highly optimized. This would just make things more straightforward.\n. @sparty02, while your concern is valid, I think that the most straightforward name would be something like: `ngModelElementAttributes`, but that's way too wordy. If we abbreviate the stuff that makes sense, we can do: `ngModelElAttrs` and that's much better. I can't think of any other name that would be more strightforward.\n. This is indeed a bug. I'm on vacation, so I can't look at this now, but a\ntested PR would be welcome.\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Jul 2, 2015 6:12 AM, \"Radek Je\u017ed\u00edk\" notifications@github.com wrote:\n\n> I am not sure if this is correct, but I think hideExpression is not called\n> on model update when the model property in field config is specified\n> (different from the form model).\n> \n> if I use expressionProperties: hide, it works ok.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/380.\n. The bug should probably be fixed in the `formly-form`, so the fix should go in `formly-form.test.js` in a new `describe('hideExpression')` block right above [this line](https://github.com/formly-js/angular-formly/blob/b07e49c0642894bad920bde350adfeb9bd16084c/src/directives/formly-form.test.js#L361).\n. This has been discussed before and angular-formly has decided to not alter the model based on whether a field is hidden. Modifying the model willy-nilly is too much magic and doesn't account for varying use-cases. So yes, you'll have to keep doing that manually if that's what you want.\n. Any progress on this @redhead?\n. I've re-opened this so I don't forget to release it tomorrow.\n. This has been released in `6.22.0`. Thanks again for the PR!\n. Here you go :-) http://docs.angular-formly.com/v6.16.0/docs/gui-form-builders\n. It appears to be working fine for me in 3 different browsers. Seems like it could be an issue with your own settings.\n. @prokilogrammer, I'm sorry, but this is actually how it's supposed to work. The docs aren't very clear, but if you look above the docs for `value`, there's a callout that says:\n\n>  Added Properties\n> The properties listed below are added to your field configuration.\n\nMeaning that you shouldn't override them, but they are actually added. It's purpose is to be used internally to get the current value as well as when you specify `modelOptions` as specified in the docs:\n\nUnder `value`\n\n> Useful when using getterSetter: true in the modelOptions\n\nUnder `modelOptions`\n\n> Note, if you use the getter/setter option, formly's templateManipulator will change the value of ng-model to options.value which is a getterSetter that formly adds to field options\n\nSo I wont be accepting #383. I'm sorry :-/\n\nNow, I think what you're wanting to do (based on your example) is use either parsers of formatters which is on the roadmap in #368.\n. Yeah, without pushing every property down another heading level, I can't do that unfortunately... I'll see if there's a sensible obvious way to do that. Really sorry you took the time to write a PR and everything. I hope it was at least a good learning experience!\n. Curious about what the use case for a custom getterSetter is...\n. Ah, that makes sense. Perhaps I'll accept the pull request after all! :-)\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Jul 8, 2015 9:27 AM, \"Caleb Kniffen\" notifications@github.com wrote:\n\n> I have an internal and an external representation of the input. For\n> example I have ui-select type. ui-select requires an array of objects but\n> the value that gets stored on the formly model is the object's id or an\n> array of ids. The getterSetter handles that mapping for the type.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/383#issuecomment-119625136\n> .\n. Look at `defaultOptions`\n. Yeah, you're not given the `$scope` in that function (and we can't give it to you either because angular calls it, not us). Do you think that you could use `parsers` and `formatters` instead?\n. Yeah, I should just update that page because you're not the first to be confused by it. In the code that you copy/pasted, you'll see this comment:\n\n``` javascript\n// note, these field types will need to be\n// pre-defined. See the pre-built and custom templates\n// http://docs.angular-formly.com/v6.4.0/docs/custom-templates\n```\n\nI have an issue on the website repo to improve the homepage... Maybe I should do that soon... https://github.com/formly-js/angular-formly-website/issues/20\n. Thanks a ton!\n. Released as `6.17.0` Thanks again  \u2728\n. You can specify your own `id` and the name will match that. You can also keep the random `id` and instead specify a custom `name`. https://github.com/formly-js/angular-formly/blob/master/src/providers/formlyApiCheck.js#L92-L93\n. Note: The github issues in this project are not for questions but rather bugs reports or feature requests. Please follow the instructions here instead: http://help.angular-formly.com\n\nThanks for using angular-formly :D\n. Thanks! :+1: \n. Good question. In my app, I have probably 20 different types and a handful\nof template manipulators. Each gets its own file and therefore its own\nconfig function. This makes things quite manageable. Let me know if you\nhave questions :-)\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Jul 11, 2015 8:18 PM, \"Adam Gordon\" notifications@github.com wrote:\n\n> Just a clarification: If I require lots of different custom formly\n> templates, am I just doing it wrong or is it customary to have a .config\n> function where one makes a bunch of calls to formlyConfigProvider to set\n> wrappers and types?\n> \n> I recall you mentioning at ng-conf that you yourself almost always use\n> custom templates. If loads of different types and wrappers are ok, is there\n> a way you would recommending structuring the .config so that it doesn't\n> get out of control?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/387.\n. I'm going to go ahead and close this because it's not a bug out feature request. But feel free to respond if you have further questions.\n. Both separate html files as well as js files and css files and test files.\nI consider each type to be its own unit.\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Jul 11, 2015 9:03 PM, \"Adam Gordon\" notifications@github.com wrote:\n\n> That makes absolute sense. When you say separate file, you mean template\n> HTML file, right? I like the idea of separate .config calls - I'm going\n> to break mine apart. And yes, totally cool closing this. Thanks.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/387#issuecomment-120682169\n> .\n. This is a perfect candidate for http://help.angular-formly.com\n\nPlease keep the issues reserved for bugs and feature requests. There are many other resources for questions and help. Thanks!\n. No worries. http://help.angular-formly.com explains the best ways to get\nhelp. :-)\n\n-Kent C. Dodds\n\nOn Sun, Jul 12, 2015 at 8:27 PM, Adam Gordon notifications@github.com\nwrote:\n\n> Sorry. Not intended. Where would you like me to post the follow up (and\n> future help requests)? I'm working on the JS Bin. Thanks.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/388#issuecomment-120788090\n> .\n. You'll find that it's easier to first try to accomplish something without angular-formly. Then take that solution and accomplish it with angular-formly. Once you have the first solution, if you can't figure out how to integrate it with angular-formly, then create an example and ask for help on the appropriate channels (not in the github issues which are for bugs/feature requests).\n\nHere's something to get you started and point you in the right direction to get help: http://help.angular-formly.com\n. I implemented a deprecation warning. This needs to be released.\n. This was released in `6.23.0`\n. Thanks for working on this. While you're making updates and such, could you make sure that the PR ends up with only a single commit? Let me know if you need help getting that to work.\n. Hi @SagiMedina, it's hard for me to tell without seeing exactly what the issue is. Please create an example and follow the instructions here: http://help.angular-formly.com\n\nI'm going to go ahead and close this issue. There are many ways you can get help, but the issues are reserved for bugs and feature requests.\n. Again, it's hard for me to help without an example following the instructions here: http://help.angular-formly.com\n. @jajourda thanks :blush: that's exactly why I direct people to http://help.angular-formly.com... I simply don't have time to triage issues myself. While doing this may be a little less helpful in the short-term, it does help people figure things out for themselves and they learn how angular-formly works so they have fewer questions in the future and they're able to use angular-formly more productively.\n\nAs a note to your specific example, you could pretty easily extend an existing type to add support for the cc-card attribute :-) I created an example and added it to the website: http://angular-formly.com/#/example/integrations/angular-credit-card\n. Note, there's [a bug](https://github.com/formly-js/angular-formly/issues/523) right now that's making this not work quite right, but hopefully that'll be resolved soon.\n. Could you give me a better example? I (and many others) are shipping projects that use field groups and uglify our code when we ship it. My guess is that your issues are not related to angular-formly, but maybe how you're using it (for example, you may be specifying a custom controller that's not properly annotated).\n. That sounds about right. So that solves your problem right? Please close this issue if so.\n. Closing this issue. The issues are reserved for bug reports and feature requests. If you need help, follow the instructions here: http://help.angular-formly.com\n. Should work just fine. You'd have to define your own templates. See\nhttp://learn.angular-formly.com to find out how to define custom\ntemplates/types\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Jul 19, 2015 6:10 PM, \"Luis Gonzalez\" notifications@github.com wrote:\n\n> Does this package work with Semantic UI? I see Bootstrap mentioned.\n> \n> http://semantic-ui.com/kitchen-sink.html\n> \n> Thanks.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/394.\n. If you're interested in creating [a template library](http://docs.angular-formly.com/docs/custom-templates#prebuilt-templates) let me know and I'll create a shell repo in the formly-js organization for you to build the library with. Let me know if you need any help :-)\n. I believe this is currently supported... http://changelog.angular-formly.com#6150 am I missing something?\n. So much to do, so little time to do it... :-) [For example](https://github.com/alianza-dev/az-dynamic-filter)\n. I like what you're talking about. I still need to consider the api you've suggested further, but at first glance I like it. I think it is simpler. Do you think this is something that could be implemented as a separate library? They should work fine together...\n. I have no problem exposing the methods... I can do that. Would you be\nwilling to contribute to a new formly-js repo I make for this plugin?\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Jul 21, 2015 2:55 PM, \"Adam Laughlin\" notifications@github.com wrote:\n\n> Exposing methods not critical though. Easy to just copy the necessary code.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/396#issuecomment-123474711\n> .\n. [The repo](https://github.com/formly-js/angular-formly-simplified) has been created and you've been invited to the team that collaborates on it. Please let me know if there's anything else that you'd like me to expose from angular-formly to make this easier. I'm eager to see how this library turns out.\n. I'm going to go ahead and close this issue in favor of [this one](https://github.com/formly-js/angular-formly-simplified/issues/1). Perhaps some of the ideas developed there can be incorporated into the core.\n. Hmmm... Not sure why that would happen. It would help to see an example. The best way to get help with angular-formly questions like this is to follow the instructions here: http://help.angular-formly.com.\n\nBecause the github issues of this repo are reserved for bug reports and feature requests, I'm going to go ahead and close this one. Please follow the instructions indicated above and hopefully we can figure out what's going on. Thanks for using angular-formly!\n. Thanks for the FYI @BartVDACodeware!\n. Done\n. You can add a class to the `formly-field` element via the `className` property. I could add the ability to have a custom class to the `ngTransclude` element. That would be quite simple to implement actually if you're interested in making a PR. You'd basically do the same thing [here](https://github.com/formly-js/angular-formly/blob/master/src/directives/formly-form.js#L53) as is done in several other places (like [here](https://github.com/formly-js/angular-formly/blob/master/src/directives/formly-form.js#L38)). The test would look similar to [this one](https://github.com/formly-js/angular-formly/blob/master/src/directives/formly-form.test.js#L32-L38). Should be pretty simple.\n. Also, if you like, I can create a shell repo under the `fromly-js` organization for you to fill out with the library. Or you can just develop it under your own account. Whatever you like :-)\n. @Evanion, do you mind holding off on that PR? I'd like to reserve this one for a new-comer as I've done in the past #343 #358.\n. Like with #343 and #358, I've created tests for this feature and I'm going to give someone a shot at contributing to open source for the first time :-) So I will only accept a PR from someone who's never contributed to open source before.\n\nInstructions:\n- [x] Watch [this video](https://www.youtube.com/watch?v=QOchwBm9W-g&index=5&list=PLV5CVI1eNcJi7lVVIuNyRhEuck1Z007BH) to learn what you need to do to get things setup\n- [x] Go to [these tests](https://github.com/formly-js/angular-formly/blob/master/src/directives/formly-form.test.js#L152-L168) and change `describe.skip` to `describe.only`\n- [x] Run `$ npm test`\n- [x] Notice that some of the tests are failing\n- [x] Update the [formlyFormGetTemplate](https://github.com/formly-js/angular-formly/blob/master/src/directives/formly-form.js#L28-L101) function to add the class if it's specified on the `attrs`. I recommend doing pretty much the same thing that's done for [the form name](https://github.com/formly-js/angular-formly/blob/master/src/directives/formly-form.js#L38) except your function should look more [like this](https://github.com/formly-js/angular-formly/blob/master/src/directives/formly-form.js#L57-L59).\n- [x] Once the tests are  passing, change the `describe.only`s to `describe` so all the tests run.\n- [x] Commit your changes to the `src/` directory mentioning issue #343 (note it may take a second... it runs all the tests...)\n- [x] Push your changes to your fork, create a PR, get merged, celebrate \ud83c\udf89\n\nI'm happy to hold your hand through this if you need help. [Catch me on gitter](https://gitter.im/kentcdodds).\n. This has been released in the official `6.21.0` release.\n. I think I understand the issue. What's the behavior with the model without Angular-formly?\n. Yes, I believe what you're suggesting is the correct fix to the bug. Thanks for spending the time digging into this. I think you have a good idea for the fix. Do you fancy creating some tests for the bug and fixing the issue? Would probably go somewhere [in here](https://github.com/formly-js/angular-formly/blob/master/src/directives/formly-custom-validation.test.js#L19-L23). (Notice that even though the tests are run with angular 1.4, you can force `formly-custom-validation` to use parsers anyway with `use-parsers`).\n. No, that code lives in master so you shouldn't have any merge conflicts. And it was additive so I wouldn't expect any issues with it.\n. Sorry about that, but congrats on the upgrade! There are a lot of really cool features in 1.3 (here are [some](https://egghead.io/search?q=new+in+angular+1.3)) :-)\n\nThanks for the code. I think I may just implement this as a bugfix. Unless you (or anyone watching) can think of a reason it shouldn't be...\n. Good point. A diagram would probably be helpful. I'll give it some thought.\n. I'm going to consider this one a breaking change. Even though it may be easy to think of it as a bugfix, it definitely changes behavior and so I'll include it in the 7.0.0 milestone. I'm hoping to give that milestone an entire day to work on it. I may develop this functionality as a `formlyConfig.extras` property which you can enable and then remove the original functionality when 7.0.0 hits...\n. I'm not 100% certain that this is correct... After looking at it, I think there's a problem. Particularly with this line:\n\n``` javascript\nctrl.$modelValue = viewValue;\n```\n\nand this line:\n\n``` javascript\nreturn ctrl.$modelValue;\n```\n\nI found that the later prevented other async validators from starting which I don't believe is the correct behavior, and the former doesn't take `parsers` into account. I'm going to go ahead and close this because you've moved on to Angular 1.3, nobody else has complained, and I'm dropping 1.2 support in the next major release (not the one I'm doing in a few minutes, but the one after that).\n\nFor anyone else, feel free to resurrect this if need be.\n. Thanks for trying @benoror. @siripimamatha, the github issues are reserved for bug reports and feature requests. If you need help, please follow the instructions here: http://help.angular-formly.com This is the most effective way for us to help you and for you to receive help.\n. Awesome @DevanB. This is basically identical to my solution :-) Do you think you could squash this all into [a single commit](https://git-scm.com/book/en/v2/Git-Tools-Rewriting-History)? I like to keep my git commit history clean. If you need help with that, let me know :-)\n. Looks perfect! Welcome to the wonderful world of open source :-) \ud83d\udc4f\n. This has been released in the official `6.21.0` release. Thanks!\n. Hey @DevanB, I'm writing a blogpost that references this PR, do you mind if I reference you in it? https://medium.com/@kentcdodds/78281ea47455\n. Hi @estaub. Thanks for your interest in angular-formly. The best way to get help is to follow the instructions here: http://help.angular-formly.com\nThe github issues are reserved for bug reports and feature requests, so I'm going to go ahead and close this issue.\n. The core of angular-formly has nothing to do with the templates/types that are used to create the form. For example, angular-formly itself knows nothing about an `input` element. This has been delegated to the end developer to tell formly about the different types that you'll be using in your application. To learn about how to do this, see the \"Custom Templates\" video [here](http://docs.angular-formly.com/docs/learn-angular-formly).\n\nThis, however is out of the scope of the angular-formly core library and therefore cannot be a feature request for this repository. You could however [request an example](https://www.youtube.com/watch?v=lu-c5C1t4Sk&list=PLV5CVI1eNcJi7lVVIuNyRhEuck1Z007BH&index=4) for the website.\n\nGood luck! :+1: \n. I think that I'll start with a deprecation notice for this one. Then in 7.0.0, I'll rip it out altogether.\n. Love this. Would love some feedback from people on this one.\n. You might have to re-open this one... I can't seem to find it... \ud83d\ude1c #seewhatididthere?\n. This comment is no longer relevant.\n. Alright, I think there's enough support for this issue that I've added the `intent to implement` and `up-for-grabs` labels :+1: \n. This has been released in `6.22.0`! Thanks for the suggestion @TheMcMurder :-)\n. @alxvallejo, agreed. Perhaps someone (you) would like to write a plugin to keep all that common code :-)\n. Hi @Astray-git, thanks for using angular-formly. This is actually not a bug, but a performance optimization that angular-formly makes for you. To indicate to angular-formly that you wish to change the property, you need to use [`expressionProperties`](http://docs.angular-formly.com/docs/field-configuration-object#expressionproperties-object). Here's a working example of your issue: https://jsbin.com/qijuwe/edit?html,js,output\n\nGood luck!\n. This may require a breaking change...\n. Just for context... `runExpressions` is a function that's added to all of your fields which is in charge of running all of your `expressionProperties`. You can invoke it yourself, but most of the time it's just invoked by the parent `formlyForm` ([here](https://github.com/formly-js/angular-formly/blob/master/src/directives/formly-form.js#L123)).\n\nBecause `expressionProperties` require the `$viewValue` and the `$modelValue`, I remember having trouble with getting those values at the time I was developing it. Wrapping the function in a `$timeout` seemed to fix the problem. However, things have changed and it may not be necessary to do this anymore. I'm crossing my fingers.\n\nIf it is still necessary to execute `expressionProperties` on the \"next tick\" of the event loop, the next best thing I could do is replace `$timeout` with `setTimeout`. Right now, every one of your `expressionProperties` causes a `$digest` to fire because it's using `$timeout`. This is a major performance drag. However, if I switch to `setTimeout` then I fear that we may have a situation where things don't get updated as you would expect and you'd have to invoke `$digest` yourself (I don't want to force you to do this). This is why I would release this in a beta and ask that a lot of people please upgrade to try it out in your apps.\n\nFeedback is appreciated.\n. Oh! Yeah! Why didn't I think of that earlier. Thanks for the tip. That's probably exactly what I need.\n. Sorry, somehow this slipped through the cracks for me. I want to avoid doing too much different from the angular implementation of how to treat the model. Fewer surprises, more consistency. As a side, I actually disagree with you and I believe that the clearing of the model is appropriate.\n\nOn the subject of `select` `onChange`, I haven't seen what you're experiencing. Could you create an example and file a bug if you feel there is one?\n. Yeah, it didn't really work out well for me either. I'll release a bugfix version with the removed file.\n. The file has been removed in `6.21.1`. Thanks for letting me know.\n. Hi @sharpmachine! Thanks for using angular-formly. The best way for you to get help is to go to http://help.angular-formly.com and follow the instructions there. The github issues are reserved for bug reports and feature requests. So I'm going to go ahead and close this issue.\n. [As before](https://github.com/formly-js/angular-formly/issues?utf8=%E2%9C%93&q=is%3Aissue+label%3Afirst-timers-only+) this one is for first-timers-only. That means that I will only accept a PR for this one from someone who's never contributed to open source before. This one is particularly easy (but don't make that statement make you feel bad if you have a hard time with it, there's more to contributing to open source than changing lines of code, especially if it's your first time). I'll hold your hand through this if you need me to. :-) Here are the steps to get a PR merged here.\n- [x] Watch [this video](https://www.youtube.com/watch?v=QOchwBm9W-g&index=5&list=PLV5CVI1eNcJi7lVVIuNyRhEuck1Z007BH) to learn what you need to do to get things setup\n- [x] Go to [this test](https://github.com/formly-js/angular-formly/blob/master/src/directives/formly-field.test.js#L736-L751) and change `describe.skip` to `describe.only`\n- [x] Run `$ npm test`\n- [x] Notice that it's failing\n- [x] Go to [this line](https://github.com/formly-js/angular-formly/blob/master/src/directives/formly-field.js#L660). This is where formly decides which instance of [apiCheck](https://github.com/kentcdodds/api-check) to use to issue the warning. We need to tell formly to default to the field's instance (the one that's passed in and is called `apiCheckInstance`), then the `formlyConfig.extras.apiCheckInstance`, then the `formlyApiCheck` instance. Right now it's missing the `formlyConfig.extras.apiCheckInstance`. I would just add it as another `||` between the first and second one on the same line.\n- [x] Update the eslint comment [here](https://github.com/formly-js/angular-formly/blob/master/src/directives/formly-field.js#L656) to allow for a complexity of `9` (instead of `8`) because you're adding another branch of complexity. Don't worry, it's covered, and I think that the code is fairly easy to understand. If you want, you could refactor it to make it even better.\n- [x] Once the test is passing, change the `describe.only` to `describe` so all the tests run.\n- [x] Make sure that all the tests pass\n- [x] Commit your changes to the `src/` directory mentioning issue #343 (note it may take a second... it runs all the tests...)\n- [x] Push your changes to your fork, create a PR, get merged, celebrate \ud83c\udf89\n\nI'm happy to hold your hand through this if you need help. [Catch me on gitter](https://gitter.im/kentcdodds).\n. Thanks @bmacheski!\n. This has been released in `angular-formly@6.23.0` :-)\n. Sorry this took so long for me to get back to you. [Work's been crazy](https://twitter.com/kentcdodds/status/627190104637898752). So, I realized late that this would actually break anyone who's using the `formly-field` directly. Even though technically the `formly-field` directive is internal, I know that I'm using it and I'm sure others are as well, so I'd prefer not to break it.\n\nDo you think you'd have time to work in just one more piece to this PR? I'd like a test that's _something like this_ pseudo code to pass:\n\n``` javascript\nit(`should add the model watcher when it's not the direct child of a formly-form`, function() {\n  const someExpressionProperty = sinon.spy();\n  compileAndDigest('<div formly-field class=\"formly-field\" options=\"field\" model=\"field.model\"></div>');\n  scope.field.model.foo = 'hello';\n  scope.$digest();\n  $timeout.flush();\n  expect(someExpressionProperty).to.have.been.calledOnce;\n});\n```\n\nThat's not complete, but hopefully you get the idea. I would expect the implementation of it would simply check the parent element (probably in the link function because I'd prefer to avoid injecting `$element` into the controller) and if it's not a `formly-form`, then add the watch as it was before.\n\nSorry this has been such a long-lived PR. Thanks a ton for your work on it!\n. I could see an edge case where this could be nested inside a formly-form (as a field template) and that would be a problem. But that's definitely an edge case and I don't think we need to consider that. Thanks for working on this!\n. I'll release this tomorrow. I try to limit my coding on Sundays. Thanks!\n. Turns out this is only possible if you specify an ID for all the fields. Most people aren't doing this. If you are doing this, then I recommend that you specify `track-by` as an attribute.\n. Hi @SupriyaVenkatesh, please follow the instructions here: http://help.angular-formly.com\n\nBecause the github issues are for bug reports and feature requests, I'm going to go ahead and close this issue. See you in chat!\n. Awesome! This is perfect. Thanks for working on it! Welcome to the wonderful world of open source :-)\n. Feedback is welcome. How did it go? Were my instructions helpful? How could I have improved on this?\n. Also, what's your twitter handle?\n. Hey @bmacheski, I'm writing a blogpost that references this PR, do you mind if I reference you in it? https://medium.com/@kentcdodds/78281ea47455\n. Linking this to #410\n. Hi @amangupta01 \ud83d\udc4b \r\nWelcome! I'm not maintaining this library anymore, however I do have [this article](http://kcd.im/what-oss) that could help you find a library that you would be interested in contributing to. I also have [a free video course](http://kcd.im/pull-request) that teaches how to contribute to a project once you've found one.\r\n\r\nGood luck!. Ah, well, if you read the article I linked, I give some tips on finding libraries that you could contribute code to :). Hi @GoNode5! Thanks for your interest in angular-formly. I'm sure that angular-formly can do this for you. The best way to get help is by following the instructions here: http://help.angular-formly.com\n\nI'm going to go ahead and close this issue because the github issues for this project are reserved for bug reports and feature requests. See you on chat!\n. Seems good to me. Thanks @benoror. I hope this helps @nomack84. I'm going to go ahead and close this issue because issues are reserved for feature requests and bugs. If you need help, follow the instructions here: http://help.angular-formly.com\n. I think the issue you're seeing isn't an issue with formly, but with the part that displays the model. See [here](https://jsbin.com/liveca/edit?html,js,output).\n. Did this resolve your issue? Please close if so.\n. Here's what I'd recommend: https://jsbin.com/wibado/edit?html,js,console,output\nWill that do it for you?\n\nEither way, this could be helpful. If you want to make a PR, we can take a look at the amount of complexity it adds to angular-formly. I'm fairly confident I'd accept a PR for this though. Thanks!\n. Here's a good workaround: https://jsbin.com/wibado/edit?html,js,console,output\n. :+1: \n. This actually would probably be a good first-timers-only issue. Maybe I'll work on adding some tests sometime. Until then, feel free to submit a PR if you want. Should be pretty simple.\n. Hi @marcoriesco, thanks for using angular-formly. I'm not certain that I understand the problem you're having. If you could be a little more clear that would be helpful. Some reproduction steps in the jsbin you created would be helpful.\n\nEither way, the github issues are reserved for bug reports and feature requests, so I'm going to go ahead and close this issue.\n. Need to add `skipNgModelAttrsManipulator` [here](https://github.com/formly-js/angular-formly/blob/master/src/providers/formlyApiCheck.js#L106)\n. Awesome. Took me a while to figure out what on earth you were doing with the tests. But I think they're good. :+1: Just add that comment and I'll merge this and release it\n. Released as 6.23.2. Thanks a ton @koenweyn :-)\n\n> Our resident IE8 support expert @koenweyn caught it and PRed a fix.\n\nhttps://github.com/formly-js/angular-formly/blob/master/CHANGELOG.md#6232\n. Just found out that these tests are actually failing. For some reason, the SnapCI build is still passing. Not sure what's going on here. If you have any idea, would love help there.\n. Fixed it. Was a simple logic issue. You'll see my commit soon. Thanks.\n. Yeah, it's odd that it didn't... I should probably look into that as well...\n. I'm thinking that @benoror's betterNpmScripts isn't propagating failures for some weird reason... I think I need to come up with an alternative solution or something... Ah well...\n. Thanks for setting this up @koenweyn!\n\nHere's another [`first-timers-only`](https://medium.com/@kentcdodds/first-timers-only-78281ea47455) issue! I will only accept a PR from someone who's never contributed to an open source project before!\n\nI'll hold your hand through this so you can get your first PR into a real open source project! Your goal is to make [this test](https://github.com/formly-js/angular-formly/blob/master/src/directives/formly-field.test.js#L1018-L1029) pass. Here are some steps:\n- [ ] Watch [this video](https://www.youtube.com/watch?v=QOchwBm9W-g&index=5&list=PLV5CVI1eNcJi7lVVIuNyRhEuck1Z007BH) to learn what you need to do to get things setup\n- [ ] Go to [this test](https://github.com/formly-js/angular-formly/blob/master/src/directives/formly-field.test.js#L1018-L1029) and change `it.skip` to `it.only`\n- [ ] Run `$ npm test`\n- [ ] Notice that it's failing\n- [ ] Go to [this function](https://github.com/formly-js/angular-formly/blob/master/src/directives/formly-field.js#L360-L362). This is where angular-formly applies the `formatters` from the field options to the `$formatters` of the [NgModelController](https://docs.angularjs.org/api/ng/type/ngModel.NgModelController#$formatters). Look at the code sample that @koenweyn suggests in the comment above. You'll do something similar. You'll get `ctrl` from `scope.fc`.\n- [ ] Once the test is passing, change the `it.only` to `it` so all the tests run.\n- [ ] Make sure that all the tests pass\n- [ ] Commit your changes to the `src/` directory mentioning issue #423 (this issue) in your commit message (note it may take a second... it runs all the tests...)\n- [ ] Push your changes to your fork, create a PR with the description mentioning issue #423 (this issue), get merged, celebrate \ud83c\udf89\n\nCatch me on [gitter](https://gitter.com/kentcdodds) if you need help!\n. Yeah, that's totally fine. There's been plenty of time for a first timer to grab this if they wanted to. There will other opportunities.\n. Ah! Yes, thank you @redhead, this is indeed implemented.\n. Thanks a ton for doing this @koenweyn! This is super cool! If you could just address the one thing that I mentioned then I think we're good.\n. Thanks a ton!\n. This is definitely possible and many people do it. Here's an example: http://angular-formly.com/#/example/other/json-powered\n\nI'm going to go ahead and close this issue. The github issues are reserved for feature requests and bug reports. If you need help, follow the instructions here: http://help.angular-formly.com\n. Thanks for looking into this. My first impression is that this would add quite a bit of complexity to the codebase. That's fine, but I want to make sure that the complexity is worth it. Do you think you could produce an example that demonstrates the perf bottleneck?\n\nMaybe I'm mistaken and this wont actually make things more complex...\n. I'm still not 100% sure this is good from a simplicity standpoint. Feel free to create a PR. That might help me visualize exactly what the API and the code changes involved would look like. But just know that I'm not certain whether I'd accept it.\n\nI really appreciate your contributions! Thank you for your work!\n. I think that would be better. The thing I don't like about what you were originally suggesting is that we're creating our own magic DSL by having '.something' have special meaning. I would prefer it if there were a little less angular-formly-specific magic going on, and it was easier to understand what's happening. By doing what you've just suggested, I think that would be much better.\n. Here's a solution using `formState`: https://jsbin.com/gokonaq/edit?js,output\n. Hi @setakhero, thanks for using angular-formly! The problem is that you need to define a `datepicker` type yourself. I recommend that you watch the videos here: http://learn.angular-formly.com to familiarize yourself with how angular-formly works.\n\nThe issues on this github repo are reserved for bug reports and feature requests. If you need help, please follow the instructions here: http://help.angular-formly.com. Good luck! I'm going to close this issue. See you in the chat! Thanks again.\n. Note, this doesn't handle the multiple `ng-model` case. If you want to implement that, that would be great.\n. Looks like another case where angular-formly abstracts away complexity/broken parts from angular's built-in forms. Thanks!\n. Hi @SupriyaVenkatesh. Your question is related to how to work with ui date-picker, not angular-formly. I recommend you direct your question to [them](https://github.com/angular-ui/bootstrap/). Also, as I believe you are aware, the github issues are reserved for bug reports and feature requests. If you need help, please follow the instructions here: http://help.angular-formly.com\n. Thanks for letting me know! @TheMcMurder's fix is in release `6.23.5`\n. Turns out that there's still an issue with setting the `form` to `$dirty`. @TheMcMurder is working on a fix now.\n. Ah, now I see. Do we need to consider the common case for `formState` as well? Someone could say the model is `formState.foo` or something and we're already watching `formState`. We could do that in a separate PR or we could add that to this one. Either way, I like this and I think it enhances formly while keeping the external API unchanged. \ud83d\udc4d\n. @redhead, thanks so much for working on this. I really appreciate you taking the time to invest in the project \ud83c\udf1f gold star for you!\n. This is super awesome! The one thing left I just realized is the case for `model['some-crazy-key']`, but I think we can address that later. Thanks for working on this @redhead. I'll get it in and released now!\n. Released as `6.23.7`\n. Will do. Thanks!\n. Hi @irhabi. Please see [this example](http://angular-formly.com/#/example/other/json-powered). Also, from [README](https://github.com/formly-js/angular-formly#getting-help):\n\n> Please don't file an issue unless you feel like you've found a bug or have a feature request. Instead, go to [help.angular-formly.com](http://help.angular-formly.com) and follow the instructions.\n\nSo I'm going to close this issue.\n. This appears to work just fine for me: http://jsbin.com/fowufo/edit?html,js,output\n. I'm not certain I understand what you mean, but if you want to completely workaround the autocomplete by Chrome, take a look at [the extras](http://docs.angular-formly.com/docs/formlyconfig#extras) for `formlyConfig`. Specifically the `removeChromeAutoComplete` property.\n\nIf that's not sufficient, could you please describe exactly what the problem is? Thanks.\n. Yeah, I don't think there's really anything that angular or angular-formly could do for you. If you have any specific ideas or fixes, I'm open to hearing them, but I'm going to go ahead and close this one as out of scope. Good luck!\n. Instead of putting `templateOptions.onChange` in `expressionProperties`, put `onChange` in `templateOptions`. It's similar to [this example](http://angular-formly.com/#/example/field-options/on-keypress)\n\nNote, from [the README](https://github.com/formly-js/angular-formly#getting-help):\n\n> Please don't file an issue unless you feel like you've found a bug or have a feature request. Instead, go to help.angular-formly.com and follow the instructions.\n\nSo I'm going to go ahead and close this. Thanks.\n. Yes, look into ngModelOptions. Sorry, I have a spotty internet connection,\notherwise I'd link you to it in the docs.\n\n-Kent C. Dodds\n\nOn Mon, Aug 24, 2015 at 8:34 AM, Mavrick notifications@github.com wrote:\n\n> Hey dude,\n> \n> I'm just trying to wrap my head around this one. I've read\n> https://code.google.com/p/chromium/issues/detail?id=468153#c14\n> \n> I've set formlyConfig.extras.removeChromeAutoComplete to true so we hit\n> the following code:\n> \n> // \u10da(\u0ca0\u76ca\u0ca0\u10da)   (\u256f\u00b0\u25a1\u00b0)\u256f\ufe35 \u253b\u2501\u253b    (\u25de\u2038\u25df\uff1b)function fixChromeAutocomplete() {\n>   var global = formlyConfig.extras.removeChromeAutoComplete === true;\n>   var offInstance = scope.options && scope.options.removeChromeAutoComplete === false;\n>   var onInstance = scope.options && scope.options.removeChromeAutoComplete === true;\n>   if (global && !offInstance || onInstance) {\n>     var input = document.createElement('input');\n>     input.setAttribute('autocomplete', 'address-level4');\n>     input.setAttribute('hidden', 'true');\n>     el[0].appendChild(input);\n>   }\n> }\n> \n> Looking at comment 41:\n> https://code.google.com/p/chromium/issues/detail?id=468153#c41\n> \n> Once I did this, all of my \"autocomplete=off\" elements were respected by\n> Chrome.\n> \n> Which brings me to my question. How can I set the autocomplete flag on an\n> input element using angular-formly?\n> \n> Should I be overriding the base template for an input or is there a\n> templateOption I can specify to set the autocomplete flag?\n> \n> Cheers\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/440.\n. Neat! Thanks for doing this! Could you follow the steps [here](https://github.com/formly-js/angular-formly-website/blob/master/CONTRIBUTING.md#creating-an-example) to get this added to the website? Thanks again :+1: \n. Sure thing! Thanks!\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Aug 27, 2015 5:14 AM, \"drmikecrowe\" notifications@github.com wrote:\n\n> Kent, will.\n> \n> BTW, Contributing needs to be on the main page under Get Help on the left.\n> I looked everywhere on the website (probably not exhaustively) for the\n> process, but it wasn't immediately obvious for new users of formly. Would\n> you like me to submit a PR for that too?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/441#issuecomment-135388851\n> .\n. That jsbin is out dated so the scripts aren't being loaded properly. Here's the updated version:\n\nhttps://jsbin.com/xuyogoy/edit?html,console,output\n\nI'm also seeing that error. I'm not sure what the problem is. Anyone else?\n. Formly only depends on angular and api-check (see [package.json](https://github.com/formly-js/angular-formly/blob/master/package.json#L53-L56)). You can see the dependencies of that example in the `head` tag:\n\n``` html\n    <!-- Twitter bootstrap -->\n    <link href=\"//maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.css\" rel=\"stylesheet\">\n\n    <!-- apiCheck is used by formly to validate its api -->\n    <script src=\"//npmcdn.com/api-check\"></script>\n    <!-- This is the latest version of angular (at the time this template was created) -->\n    <script src=\"//ajax.googleapis.com/ajax/libs/angularjs/1.4.7/angular.js\"></script>\n\n    <!-- This is the latest version of formly core. -->\n    <script src=\"//npmcdn.com/angular-formly\"></script>\n    <!-- This is the latest version of formly bootstrap templates -->\n    <script src=\"//npmcdn.com/angular-formly-templates-bootstrap\"></script>\n\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/angular-ui-bootstrap/0.13.0/ui-bootstrap-tpls.min.js\"></script>\n\n    <!-- ui-select files -->\n    <script src=\"https://rawgit.com/angular-ui/ui-select/master/dist/select.js\"></script>\n    <link rel=\"stylesheet\" href=\"https://rawgit.com/angular-ui/ui-select/master/dist/select.css\">\n    <script src=\"https://ajax.googleapis.com/ajax/libs/angularjs/1.3.14/angular-sanitize.js\"></script>\n\n    <!-- Select2 theme -->\n    <link rel=\"stylesheet\" href=\"http://cdnjs.cloudflare.com/ajax/libs/select2/3.4.5/select2.css\">\n\n    <!--\nSelectize theme\nLess versions are available at https://github.com/brianreavis/selectize.js/tree/master/dist/less\n-->\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/selectize.js/0.8.5/css/selectize.default.css\">\n    <!-- <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/selectize.js/0.8.5/css/selectize.bootstrap2.css\"> -->\n    <!-- <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/selectize.js/0.8.5/css/selectize.bootstrap3.css\"> -->\n```\n. Hmmm... When in angular 1.2, angular-formly uses the `$parsers` api to do validation (standard way to do validation in 1.2). I think this is happening because angular 1.2 doesn't re-run the parsers when the model is changed programmatically (as it is in your example). So you're going to have to figure out a way to trigger the parsers to re-run whenever you change the model programmatically. You might consider looking into the `watchers` property to do this.\n\nLet me know if you think there's something that we can do in angular-formly core to make this easier for you and we can talk about it. Otherwise I'm going to close this as a `wont-fix`. Good luck!\n. Hmmm... If you can come up with a consistent way to update the validity properly, then perhaps I can find a good way to integrate that solution into formly core (or I'd happily accept a PR).\n. Fantastic! Thanks for writing this up! I hope you don't mind iterating on this a little bit. I have a comment or two. Thanks!\n. Awesome! Thank you so much for working on this :+1: This is definitely needed!\n. Nope! It's perfect! Thanks!\n. Also, this: http://beletsky.net/2015/04/npm-for-everything.html\n. @ckniffen, how does the work-around not work for you?\n. I'm wanting to automate releases using semantic-release. Currently, semantic-release doesn't push the built changes to the git repo (https://github.com/semantic-release/semantic-release/issues/75). I bet I could finagle something to get it to work, but it's just extra complexity and time spent that I'd like to avoid if I can.\n\nThe process of a release before adding semantic-release was to do this basically:\n1. Make and commit the changes\n2. Manually update the changelog (which I've made mistakes on several times)\n3. Decide whether this is a breaking change, new feature, or a bugfix and bump the version accordingly\n4. Run the build, commit changes, tag the commit with the version, push to github, npm publish\n\nLuckily, I was able to make the third item be a single command, but what semantic-release gives me is it removes the last three steps and does all of those automatically. This saves me time and reduces human error.\n\nThat's why I want to use semantic-release. I want to drop bower because semantic-release doesn't work well with bower currently and I also would prefer if we all (as a frontend community) just use `npm` instead.\n. I should mention, I'm just testing the waters. I was at a 30% likelihood of actually going through with this when I filed the feedback issue.\n. This doesn't have to happen! I got it working :-)\n. I'm sorry I've been so silent on this. I haven't had a chance to give it a good look. Sorry! :-/ I'll try to give it a closer look soon!\n. Haha, and I have a day job :P thanks for understanding :-)\n. Finally getting a chance to look into this. And I don't think I'm seeing the problem that you are... Do you mind trimming the example down a little bit and giving step-by-step reproduction instructions?\n. ping?\n. I realized what the problem was when I saw #485. The solution is the same: http://plnkr.co/edit/0roe4DzhhkANhOdJxhoX?p=preview\n. I'm going to close this. Let me know if you need more help\n. Fantastic! Sorry it took so long for me to respond.\n. This is definitely a bug. I may make this a [first-timers-only](https://medium.com/@kentcdodds/first-timers-only-78281ea47455) issue. If someone else would like to write skipped tests to reproduce this issue, that would be awesome :-)\n. Hi @dannycallaghan! Thanks for doing this!\n\nIgnore the snap build. I just deleted it. We're now building with Travis. I need to add a check on travis that your commit message is correct. Now that we're automating our releases with semantic-release, we need to make sure that the commit messages are correct. If you could update your commit message to use [our conventions](https://github.com/ajoslin/conventional-changelog/blob/master/conventions/angular.md), that would be very helpful. Let me know if you have trouble with this.\n. That'll do! Thanks!\n. Why can't you just use it as an element?\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Sep 2, 2015 7:22 AM, \"kavi87\" notifications@github.com wrote:\n\n> I would like to use the directive formlyForm as an attribute instead of a\n> custom element because we use this way accross all of our directives.\n> Currently it is restricted to element only.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/450.\n. Understood. Personally I don't like it, but I would be happy to accept a PR that updates [this](https://github.com/formly-js/angular-formly/blob/master/src/directives/formly-form.js#L14) and [this](https://github.com/formly-js/angular-formly/blob/master/src/directives/formly-form.js#L8) to make that possible :-) Make sure to check [this](https://github.com/formly-js/angular-formly/blob/master/CONTRIBUTING.md#development) to know how to contribute :+1: \n. Note: Commit this one as a `feat` not a `fix`.\n. [As before](https://github.com/formly-js/angular-formly/issues?utf8=%E2%9C%93&q=is%3Aissue+label%3Afirst-timers-only+) this one is for [First Timers Only](https://medium.com/@kentcdodds/first-timers-only-78281ea47455). That means that I will only accept a PR for this one from someone who's never contributed to open source before. This one is particularly easy (but don't make that statement make you feel bad if you have a hard time with it, there's more to contributing to open source than changing lines of code, especially if it's your first time). I'll hold your hand through this if you need me to. :-) Here are the steps to get a PR merged here.\n- [ ] Watch [this video](https://www.youtube.com/watch?v=QOchwBm9W-g&index=5&list=PLV5CVI1eNcJi7lVVIuNyRhEuck1Z007BH) to learn what you need to do to get things setup.\n- [ ] Go to [this test](https://github.com/formly-js/angular-formly/blob/master/src/directives/formly-form.test.js#L24-L30) and change `it.skip` to `it.only`\n- [ ] Run `$ npm test`\n- [ ] Notice that it's failing\n- [ ] Go to [this line](https://github.com/formly-js/angular-formly/blob/master/src/directives/formly-form.js#L14) and make it look like [this line](https://github.com/formly-js/angular-formly/blob/master/src/directives/formly-field.js#L17). Then make sure to update [the comment](https://github.com/formly-js/angular-formly/blob/master/src/directives/formly-form.js#L8) as well.\n- [ ] Once the test is passing, change the `describe.only` to `describe` so all the tests run.\n- [ ] Make sure that all the tests pass\n- [ ] Run `git add src/`\n- [ ] Run `npm run commit` and follow the prompt (In the last question where it asks about referencing issues closed, put `closes #450`).\n- [ ] Push your changes to your fork, create a PR, get merged, celebrate \ud83c\udf89\n\nI'm happy to hold your hand through this if you need help. [Catch me on gitter](https://gitter.im/kentcdodds).\n. Please do!\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Sep 4, 2015 11:43 AM, \"geraldchecka\" notifications@github.com wrote:\n\n> Hello Kent! I've never submitted to any open source projects. Can i do\n> this?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/450#issuecomment-137802697\n> .\n. Good question! I'd probably say it's `formly-form`.\n. Probably in the `formlyApiCheck.test.js`\n. The current example isn't re-parsing at all. If you look, it's only parsed once.\n. But what I'm thinking of wouldn't even require the parse service or a getter setter at all\n. This is now supported in the core. Feel free to test as you will! :-) Version `7.0.0`\n. Fantastic! Thank you for your contribution!\n. Perfect!\n. Hmm... Not sure why github didn't recognize this as merged. I'm using [a new thing](https://github.com/kentcdodds/rebase-and-merge) I developed to keep git commit histories cleaner when merging PRs, but I think that when the branch needs a rebase, github doesn't recognize it as merged, but this has totally been merged and you're definitely still the \"author\" of the commit :-) Thanks again!\n. Hi @xgvargas! Thanks for your interest in angular-formly! I think what you're looking for is something like [this](http://angular-formly.com/#/example/integrations/angular-wizard).\n\nIssues on GitHub are reserved for bug reports and feature requests. So I'm going to close this issue. If you need help, please follow the instructions here: http://help.angular-formly.com\n. You're looking for `resetModel`. I'm going to go ahead and close this issue. The github issues are reserved for bug reports and feature requests. If you need help, please follow the instructions here: http://help.angular-formly.com Good luck!\n. Note, not all projects work the same way. Generally you're fine to use\nissues for questions. But this project gets so many questions I couldn't\nkeep up with them. Generally, check if the project has a CONTRIBUTING.md\nfile. That'll have instructions :-)\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Sep 8, 2015 10:11 PM, \"laurent-thai\" notifications@github.com wrote:\n\n> Hello Thank you so much for your reply and for the advice about the\n> correct usage of github.\n> \n> Have a nice day.\n> \n> Laurent.\n> \n> De : Kent C. Dodds [mailto:notifications@github.com]\n> Envoy\u00e9 : mercredi 9 septembre 2015 11:08\n> \u00c0 : formly-js/angular-formly\n> Cc : laurent-thai\n> Objet : Re: [angular-formly] Refresh form (#457)\n> \n> You're looking for resetModel. I'm going to go ahead and close this issue.\n> The github issues are reserved for bug reports and feature requests. If you\n> need help, please follow the instructions here:\n> http://help.angular-formly.com Good luck!\n> \n> \u2014\n> Reply to this email directly or view it on GitHub <\n> https://github.com/formly-js/angular-formly/issues/457#issuecomment-138774740>\n> . <\n> https://github.com/notifications/beacon/AFn3uD8hhbKD1GuWLDdXKl6nFOMs7uUmks5ov6gvgaJpZM4F5_mX.gif>\n> \n> Aucun virus trouv\u00e9 dans ce message.\n> Analyse effectu\u00e9e par AVG - www.avg.fr\n> Version: 2015.0.6125 / Base de donn\u00e9es virale: 4409/10603 - Date:\n> 09/09/2015\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/457#issuecomment-138775419\n> .\n. Awesome!\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Sep 10, 2015 5:15 PM, \"Jonathan Haines\" notifications@github.com wrote:\n\n> Looks interesting, happy to have a go\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/458#issuecomment-139408905\n> .\n. Is there a reason you created this PR?\n. Awesome! Welcome! :wave:\n\nCheck out the open issues with the `up-for-grabs` label: https://github.com/formly-js/angular-formly/issues?utf8=%E2%9C%93&q=label%3Aup-for-grabs+is%3Aissue+is%3Aopen\n\nAlso, if you're a first timer to open source, then occasionally I add a `first-timers-only` label to issues. For more info on that, see [this](https://medium.com/@kentcdodds/first-timers-only-78281ea47455).\n. I also recommend you follow [@yourfirstpr](https://twitter.com/yourfirstpr) on twitter. And [me too](https://twitter.com/kentcdodds) as I will often tweet when I open a new `first-timers-only` issue.\n. Seems legit. Thanks!\n. Thanks for this. Can't merge now, but will look more closely later. The problem with object is order isn't consistent/garunteed... Though I like the idea, I think we'll wait for someone to have aause case before we implement something like that.\n\nThanks again! I'll look at this later. In the mean time, could I ask for your feedback on ease of contributing?\n. Odd... Travis says that the build passed, but if I look at the output, it shows that two tests failed...\n. I'm happy to have you contribute! Looks like they're failing locally. I'll try to see what's going on. I'll let you know. Thanks for contributing :-)\n. I've found the problem. I'll submit a PR to your branch :-)\n. Perfect! Thank you!\n. :-D thanks for the feedback! I'm glad that overall it was a good\nexperience. Thanks again for contributing. Let's do this again sometime :-D\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Sep 11, 2015 12:25 AM, \"Jonathan Haines\" notifications@github.com\nwrote:\n\n> Thanks for the assistance! I'll try some feedback...\n> \n> I find structure really helpful, code style, contribution guidelines, have\n> always been helpful when I've contributed to projects in the past. Since\n> using formly and seeing first-timers-only gain momentum, it's only recently\n> I've realised how helpful these ideas are for the community.\n> \n> Using ghooks to run linting, tests, etc is really helpful. Saves all the\n> nitpicking 'why did you add that tab/space/symbol/emoji'. Super beneficial.\n> The downside is making it work in everyone's dev environment/setup. How can\n> we improve that experience for people, especially when the node/npm world\n> is so modular and projects have so many dependencies, for example\n> commitizen/cz-cli#10 https://github.com/commitizen/cz-cli/issues/10.\n> \n> How much hand-holding should there be? I think it's enough to reply to\n> people's queries with a quick link or short description of where to find\n> the solution. From what I've seen in Gitter, you do a good job.\n> \n> From this side of the world it looks like you're making good things. Look\n> after yourself\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/pull/461#issuecomment-139471582\n> .\n. [here you go](http://angular-formly.com/#/example/advanced/validation-on-form-submit)\n. The github issues are reserved for Bug Reports and Feature Requests. If you have a question in the future, please follow the instructions here: http://help.angular-formly.com thanks!\n. I'm not sure I understand what you're asking. You should be able to do this already... http://angular-formly.com/#/example/advanced/custom-ids-and-names\n. Ah, I misunderstood your question. My apologies. That's exactly what I do as well. Thanks for your patience.\n. Note, that's not 100% what I do because I have situations where there are two of the same form for two different models in the same page at the same time. So that implementation would result in duplicate ids. So, instead, I simply use the model id as part of the field id.\n. Here's what mine looks like:\n\n``` javascript\nfunction azGetFieldId(options, model, scope) {\n  if (options.id) {\n    return options.id;\n  }\n  const index = getIndexOfIdInFields(options, scope);\n  return ['az-formly', getModelIdentifier(model), options.key, index].join('_');\n}\n\nfunction getModelIdentifier(model) {\n  let identifier = 'no-id';\n  if (model) {\n    const objectType = (model.constructor && model.constructor.name) || 'Object';\n    identifier = `${objectType}_${model.id || 'no-id'}`;\n  }\n  return identifier;\n}\n\n// sometimes you have two fields that use the same key. This ensures they don't have the same ID\nfunction getIndexOfIdInFields(options, scope) {\n  const fieldsWithTheSameKey = _.filter(scope.fields, field => field.key === options.key);\n  return _.indexOf(fieldsWithTheSameKey, options);\n}\n```\n\nResults in something like:\n\n```\naz-formly_${objectType}_${id}_${propertyName}_${index}\n```\n\nExamples:\n\n```\naz-formly_User_123453523_username_0  // existing User\naz-formly_User_no-id_username_0      // new User\naz-formly_Object_no-id_someProp_0    // new Object\n```\n. Looks awesome. Thanks a ton!\n. Man! I love this semantic-release thing. I don't even need to pull this. This fix will be released in a few minutes automagically :+1: \n. This is the problem... https://github.com/angular/angular.js/pull/11023\n\nPerhaps there's something we can do on the angular-formly side to make this easier (particularly for versions of angular where this PR wont make it). What do you think @ckniffen?\n. I feel like I've done that before and it worked out alright. We'd probably\nneed to add a watcher for the parent form's submitted state to call that.\nUnfortunately, there's no way to detect whether this watcher is necessary\n(most of the time it won't be), so we'd want it to be opt-in... The more I\nthink about it, the more I think it should probably be a plugin...\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Sep 14, 2015 10:21 AM, \"Caleb Kniffen\" notifications@github.com wrote:\n\n> @kentcdodds https://github.com/kentcdodds the issue with patching this\n> is that the formController does not expose the array of controls. There is\n> some conventions that can be used to infer if a property on the form\n> controller is a control. ckniffen/angular.js@e549f2d\n> #diff-1838ed9bd28307b6d42de98549826ae5R304\n> https://github.com/ckniffen/angular.js/commit/e549f2d70c93ce402d781bc16b557b5950b2cbb3#diff-1838ed9bd28307b6d42de98549826ae5R304\n> uses controls which is a locally scoped variable.\n> \n> The form could have all of its properties looped through and check every\n> one that doest have a key that starts with $ checked for the some NgModel\n> or FormController properties and then call $setSubmitted.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/465#issuecomment-140131665\n> .\n. No side effects. It will work fine.\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Sep 14, 2015 5:35 PM, \"chen bin\" notifications@github.com wrote:\n\n> what's the side effect if we use $scope instead?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/466.\n. Woah, 45-50 seconds is outrageous. Please make sure that you're following the [tips](http://docs.angular-formly.com/docs/tips) (disable api-check when deploying to production). This will speed things up considerably. How many fields do you have?\n. This is a bug. Thanks for pointing it out. The code that needs to be fixed is [here](https://github.com/formly-js/angular-formly/blob/master/src/directives/formly-field.js#L111-L115). Basically, we should be using the `$parse` service to set the value instead. This could be a pretty good `first-timer-only` issue. Are you up to setting up the tests like @koenweyn did for #423? If you want, you could even do the step-by-step :+1: this would be a huge help for a new comer!\n. Awesome! Thanks for the help @BarryThePenguin. Tweeting now!\n. My apologies @dfromero... I think there was some miscommunication and I didn't check @BarryThePenguin's work. Let me fix it really quick. Thanks.\n. @dfromero, you should be good to go now. Go ahead and pull the latest changes. I apologize for that. Looking forward to your implementation (I've already done it so I know it's possible now!).\n\nGood luck!\n. That's coming from commitizen. Unfortunately if there's a failure, it's not printing out the logs (cc @jimthedev). To see what the problem could be, run `npm run code-checks && npm run test && npm run check-coverage`. If you don't see any problems, then you'll have to craft your commit message by hand (following [the conventions](https://github.com/ajoslin/conventional-changelog/blob/master/conventions/angular.md)) and use `git commit --no-verify`. Let me know.\n. This was fixed by @dfromero. Thank you so much! The new version is being built and automatically released now and should be available soon. Thanks again @dfromero on your first ever PR :-)\n. And that @BarryThePenguin for helping get this set up.\n. You might consider creating a custom directive that wraps this one and uses `ng-model`. The problem is, without `ng-model`, then `formControl` wouldn't really make sense. It would technically not be a `formControl`. One thing you might try is to simply add an `ng-model` on it and see what happens... Either way, this particular directive is doing it wrong. They should use `ng-model`. Sorry, I don't think there's anything that angular-formly can do. If you need additional help, please follow the instructions here: http://help.angular-formly.com\n. Do you mind creating an example of what you're trying to accomplish? Please follow the instructions here: http://help.angular-formly.com\n\nThis will make it easier for you to get help. Because the github issues are reserved for bug reports and feature requests, I'm going to go ahead and close this issue. Thanks!\n. Sorry, life's crazy busy for me right now (new baby in the house). I don't\nhave time to help you right now. Could you please follow the instructions\nhere to get help? http://help.angular-formly.com\n\nGood luck!\n\nOn Fri, Sep 18, 2015, 9:17 AM GianlucaBobbio notifications@github.com\nwrote:\n\n> I think this thread is related:\n> \n> #304 https://github.com/formly-js/angular-formly/issues/304\n> \n> I just didn't want to make it work with HTML like that user did, because\n> I'm working with dinamyc possibles HTML layouts\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/470#issuecomment-141480538\n> .\n. What I meant was where you get help. Not in the GitHub issues. \u263a\n. Hmmm... My first question would be, you don't need the realtime for your field configurations right? Meaning, you're fine if the fields just load and they're not bound to firebase. If that's the case, then I recommend simply getting a snapshot of the data.\n\nShould only be a few lines of code, but once you do that, if you wouldn't mind [creating an example](https://www.youtube.com/watch?v=4dsXXTPET4A) (<-- video) for the website, I'd really appreciate it!\n\nEven better, create [a plugin](http://docs.angular-formly.com/page/plugins). Good luck! Thanks!\n. Thanks!\n. Sorry, life's crazy busy for me right now (new baby in the house). I don't\nhave time to help you right now. Could you please follow the instructions\nhere to get help? http://help.angular-formly.com\n\nGood luck!\n\nOn Fri, Sep 18, 2015, 4:16 PM Luddinus notifications@github.com wrote:\n\n> I need something similar to this:\n> http://angular-formly.com/#/example/advanced/validation-on-form-submit\n> \n> Maybe I'm misunderstanding something but in my case it is the server who\n> returns the error messages.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/473#issuecomment-141581993\n> .\n. Hi @tarkanlar, I'm sorry that I don't have time to help you right this minute (new baby in the house). But if you follow the instructions here you'll get the most help from others: http://help.angular-formly.com (you've already done most of that).\n\nThe github issues are reserved for feature requests and reporting bugs. So I'm going to go ahead and close this.\n. good luck!\n. Fantastic! This is perfect. Thank you very much!\n. I think we should update the example. You should first check if it's empty.\nIf it is, then don't do the validation check for email.\n\nOn Mon, Sep 21, 2015, 8:05 AM TheBekker notifications@github.com wrote:\n\n> Hi\n> \n> Not sure if this is a bug, or if its me doing somthing wrong.\n> I run into an issue when i use is.js for simple email validation, on a\n> field that has required: false set.\n> \n> The form is not valid, even though the field is empty and is not required.\n> \n> Here is a jsbin (just used the is.js integration example and changed)\n> http://jsbin.com/giledaxoji/edit?html,js,output\n> \n> Some way to fix this?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/476.\n> \n> ## \n> - Kent C. Dodds https://twitter.com/kentcdodds\n. Like this: http://jsbin.com/kebucas/edit?html,js,output :-)\n\nOn Mon, Sep 21, 2015 at 8:10 AM TheBekker notifications@github.com wrote:\n\n> That makes sense, but not sure how i would accomplish this?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/476#issuecomment-141994072\n> .\n> \n> ## \n> - Kent C. Dodds https://twitter.com/kentcdodds\n. I recommend that your tabs implementation uses `ng-if` to wait to compile the tab until it's shown. If you need help doing this, please follow the instructions here: http://help.angular-formly.com\n\nBecause this repo's github issues are reserved for bug reports and feature requests, I'm going to close this issue. Good luck!\n. Looks like ui-select isn't ready for angular 1.4.x yet. I've downgraded that example's angular to 1.3.19 and it's working great. Thanks for letting me know!\n. 140-500 fields is not _large-ish_. That's plain **gigantic**. I don't know what kind of user experience you're looking for, but I don't think that formly (or angular for that matter) can help you with the performance in that scenario. Out of curiosity, what version of angular and angular-formly are you using?\n. The problem is that you need all of those event listeners and watchers for your form to work properly.\n\nI would recommend:\n1. Upgrading to the latest angular-formly (there have been some significant performance optimizations made recently)\n2. Upgrading to the latest version of angular (though this can be more difficult if other dependencies you have aren't ready for it).\n3. Make sure you disable `api-check` in production as described in the [tips](http://docs.angular-formly.com/docs/tips)\n4. Try showing only pieces of the form at a time, hide the rest of it behind an `ng-if` which will cause the form to not render until it's shown.\n\nI hope these tips help!\n. Good luck! Sorry the tech doesn't quite do what you were looking for in the first place :-/\n. Thanks @msc654! That is correct. That would be the proper way to do this. Because github issues on this project are reserved for bug reports and feature requests, I'm going to go ahead and close this one. If you need more help, please follow the instructions here: http://help.angular-formly.com\n. Also, if you're already doing several of these things (I know some of you are), please consider volunteering. I really appreciate it!\n. That'd be cool! Thanks @SomeKittens :-)\n. Thanks @gkadillak and @msc654! I'll add you both to a read-only team. This means that you're on the formly-js team (yay! :confetti_ball:) but you wont have push access or issue closing access. You can (of course) submit pull requests and if you feel like you'd like to have push access, we can chat about that :-) Thanks!\n. Awesome @softEngJason! I'll add you to the collaborators. Thanks!\n. Awesome @BarryThePenguin! You're in!\n. @rentius2407, I'll add you as a collaborator. If you could help in the ways that I illustrate in the issue, that'd be awesome. Thanks!\n. Awesome @davincho! I'll add you to the collaborators. Please jump in as asked in the top comment on this issue :-)\n. @formly-js/angular-formly-collaborators and anyone else. I am changing jobs and wont be using angular-formly (or Angular) in my new position. I am therefore not going to be very effective maintaining angular-formly (read: [Open Source Stamina](https://medium.com/@kentcdodds/open-source-stamina-dafd063f9932)).\n\nSo I need someone to spearhead development and maintenance of the angular-formly project. Preferably someone who's using it on a regular basis at work. Maintaining this library should be relatively simple because it's so well tested and processes are so automated.\n\nCould someone please step up to the plate on spearheading this project?\n. @vijquick awesome! I'll add you to the @formly-js/angular-formly-collaborators-read team. If I see that you're helping others and submitting PRs, I'll add you to the @formly-js/angular-formly-collaborators team. Thanks!\n. Awesome @darleys! I'll do the same for you as I did for @vijquick. Thanks!\n. Anyone on the @formly-js/angular-formly-collaborators-read looking for an opportunity to help maintain angular-formly? There are several issues that are open that are simply questions. I generally try to point them in the right direction and then say something like:\n\n> Thanks for your interest in angular-formly. The best way to get help is by following the instructions at [help.angular-formly.com](http://help.angular-formly.com). The GitHub issues on this project are reserved for feature requests and bug reports, so I'm going to close this issue. See you on [chat](http://chat.angular-formly.com) and [Stack Overflow](http://question.angular-formly.com/)!\n. Done. Thanks!\n. Thanks @brutalcrozt! I'll add you to the collaborators-read team!\n. See https://github.com/formly-js/angular-formly/issues/638#issuecomment-209052672\n. @maliknur you got it! Adding you to the collaborators right now.    \n. @AjithJosephThomas, adding you to collaborators right now.\n. You've been invited.\n\nThere are about 15 members of @formly-js/angular-formly-collaborators-read team (with several pending invitations). I think that's plenty for now. If you all could please watch the repo and respond to issues and pull requests that'd be great. Once I find someone being actively and positively involved in these things I'll give you commit access.\n. the link is: http://help.angular-formly.com\n\nOn Tue, Sep 22, 2015 at 2:24 PM astromac notifications@github.com wrote:\n\n> @ckniffen https://github.com/ckniffen Thank you for the reply. I tried\n> the template example you provided to no effect. You mentioned creating an\n> example and referenced instructions. Was there a link that you intended to\n> provide?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/482#issuecomment-142408850\n> .\n> \n> ## \n> - Kent C. Dodds https://twitter.com/kentcdodds\n. And don't forget @ckniffen and @benoror :-)\n. How about October 14th? I could probably have some stuff prepared by then.\n. Ah, of course, that makes much more sense... How about the 10th?\n\nOn Thu, Sep 24, 2015 at 3:47 PM Randall Koutnik notifications@github.com\nwrote:\n\n> 14th's a Wednesday, I thought weekends might be best.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/483#issuecomment-143059376\n> .\n> \n> ## \n> - Kent C. Dodds https://twitter.com/kentcdodds\n. # Attention!\n\nHere are the official instructions and pleas for help :-)\n\nThanks @SomeKittens! That sounds fine. I can't promise that I'll be available _all_ day, but should be able to help most of the day.\n\nI'll get a few issues set up. At a high level, here are some things that I'd like:\n- Investigate an Angular 2 version (for the more ambitious of contributors)\n- Increase Test Coverage (both in the main repo and in the bootstrap templates)\n- Identify performance bottlenecks and optimize for them <-- this one's really needed (and also for the more ambitious contributors)\n- Resolve existing issues\n- Record screencasts of features, write blogposts/tutorials, improve documentation, etc.\n- Write plugins for common use-cases (see below)\n  - ng-messages integration\n  - Repeating sections\n  - Angular Material\n  - JSON Schema support\n  - Additional types for bootstrap that integrates with angular-ui-bootstrap\n  - Other ideas [here](http://docs.angular-formly.com/page/plugins)\n\nIf you're interested in writing a plugin, please see [this spreadsheet](https://docs.google.com/spreadsheets/d/1BU6KMQV2dOojqNxc_tyWGFu2Cf9UrOfOqnT-gk-lYeI/edit?usp=sharing) to look at some of the ideas and sign up for what you're interested in working on.\n\nI've recorded a screencast explaining some of these things a bit if you like to watch, check it out [here](https://www.youtube.com/watch?v=tAMJcOiFRD0&feature=youtu.be).\n\nAlso, if you're just getting started contributing to angular-formly, I just recorded a new screencast with instructions on how to contribute. [Here it is](https://www.youtube.com/watch?v=SXVgP1mt8TU). Note, I'm afraid I'm a bit long-winded in that one. You might also benefit from [the original](https://www.youtube.com/watch?v=QOchwBm9W-g&list=PLV5CVI1eNcJi7lVVIuNyRhEuck1Z007BH&index=5) (albeit a tad out-dated).\n\nAs always, please check the project's [CONTRIBUTING.md](https://github.com/formly-js/angular-formly/blob/master/CONTRIBUTING.md) and make sure to follow the [CODE_OF_CONDUCT.md](https://github.com/formly-js/angular-formly/blob/master/CODE_OF_CONDUCT.md)\n\nThanks for your help!!!\n. Nothing official. Just stuff in the examples page.\n. Hey, I had three family things come up for this weekend so I'm going to have to push this back two weeks. Is it alright if we move it to the 24th?\n. Thanks for letting me know! I've fixed it.\n. I know what the problem is. When the form is rendered, angular-formly will look through the given fields and set up `$watch`ers with them. But angular-formly doesn't watch your fields after that point. So when you change them or anything, that initialization step doesn't run for those new fields.\n\nOne solution to this is to prevent the form from being rendered until the fields are available, like so: http://jsbin.com/fudufaj/edit?html,js,console,output\n. I'm going to go ahead and close this. If you need more help, please follow the instructions here: http://help.angular-formly.com\n\nIf this doesn't actually solve the problem, let me know. Thanks!\n. @benoror, could you fix that example?\n. I agree. Adding `wrappers` support to `fieldGroup` would be a neat feature. I'll add that as a label and add `up-for-grabs` to invite people to contribute :-)\n. Answered [here](http://stackoverflow.com/a/32829953/971592). The GitHub issues in this project are reserved for reporting bugs and feature requests. In the future, please follow the instructions here to get help: http://help.angular-formly.com\n. You're good. You thought it was a feature request. No harm done :-) Good luck!\n. Awe, you're making me :blush: Thanks!\n. Hmmm... Yeah, if it's only happening locally I'm afraid there's not much I can do to help you :-(\n. Neat! Almost perfect. This just needs to be added to `dependencies` rather than `devDependencies` :-)\n. Also, I think there's something wrong with the build. Don't worry about it. I'll give  it a look\n. Be sure to comment when you've finished that. I wont be notified when you push changes.\n. Ah... Hmmm... You know what... I think I'd be alright with that if we could replace some of the other util methods of formly with lodash ones...\n. Hmmm... Yeah, I'm going to say that it's not worth it :-( Thanks anyway!\n. Could you please reproduce this issue here? http://issue.angular-formly.com/\n. Try this instead: http://jsbin.com/bogewe/edit?html,js,output\n\nBecause this is more of a question than a bug or a feature request, I'm going to close the issue. Please take this to [the chat](http://chat.angular-formly.com) or [stack overflow](http://question.angular-formly.com/) if you have further questions. Good luck!\n. Yeah, you definitely want to avoid anything that has to do with `$broadcast` :-)\n. I'm not sure I understand the problems with the current implementation. What do you mean by:\n\n> instead of much much later where we are forced to use setViewValue and setPristine and other workarounds so the formatters work?\n\nI'm not sure what you mean...\n. Oh, I think I see what you're saying. So by adding the `parsers` and `formatters` after the `ng-model` has been initialized, they don't run and we have to manually run them. So what you're suggesting is we have another directive and add them to the `ngModelController` as you would normally. We do this same thing with `validators` with the [`formly-custom-validation`](https://github.com/formly-js/angular-formly/blob/master/src/directives/formly-custom-validation.js) directive. We could do something similar with a `formly-parsers-and-formatters` directive... I think that would make the most sense and clean up some code too...\n. Yes, this is a bug. Feel free to [makeapullrequest.com](http://makeapullrequest.com)\n. You got it :-) https://github.com/formly-js/angular-formly/blob/master/CONTRIBUTING.md#watch-the-videos\n. This isn't an angular-formly issue, it's actually an angular issue. The problem is that without the `name` attribute, there's absolutely no way for me to get access to the `ng-model` controller. One thing you might consider is creating a directive which `require`s the `ngModel` controller and then attaches it to `scope.options`.\n\nGive me a second and I think I could give you a quick example.\n. Here you go! http://jsbin.com/mebiju/edit?html,js,output\n\nBecause this isn't something that we'll be implementing in the core of angular-formly, I'll close this issue. However, if you like to make [a plugin](http://docs.angular-formly.com/page/plugins) for formly, that'd be way cool!\n. Awesome! If you want a good kick-start on building an open source library, I recommend you checkout [my egghead.io series](https://egghead.io/series/how-to-write-an-open-source-javascript-library) :-)\n. :blush: yay!\n. Hi @Rorkal,\nI'm sorry that nobody's gotten to you until now. The github issues are reserved for bug reports and feature requests. If you're still having trouble with this, please follow the instructions here: http://help.angular-formly.com \n. Hi @Nishchit14! Thanks for using angular-formly :-) I've moved discussion for this issue to the bootstrap templates repo.\n. Terrific, did you just stumble upon this or did you find this as an actual bug?\n\nAlso, sorry that travis is breaking. Not sure why but it appears Travis is having a hard time starting up firefox :-(\n. This has been merged with [rebase-and-merge](https://github.com/kentcdodds/rebase-and-merge). Because the PR wasn't rebased to master, github doesn't recognize it as merged. Thanks for adding this!\n. Could you use `formState`? http://kentcdodds.jsbin.com/vowuso/edit?html,js\n\nNote, I changed the template for the `nested` type slightly and bound the checkbox to `formState` and updated the `hideExpression`. I think this is possibly what you're looking for.\n\nEither way, the GitHub issues on this repository are reserved for bug reports or feature requests. If you have further questions, please follow the instructions here: http://chat.angular-formly.com\n. :+1:\n\nOn Sat, Oct 24, 2015, 5:43 PM Caleb Kniffen notifications@github.com\nwrote:\n\n> I feel like maybe this ticket should be moved to the formly website\n> project. As it is an enhancement request for an existing example.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/507#issuecomment-150872510\n> .\n> \n> ## \n> - Kent C. Dodds https://twitter.com/kentcdodds\n. It's not available in the repository. We're using [`publish-latest`](http://npm.im/publish-latest) which pushes the releases to [the `latest` branch](https://github.com/formly-js/angular-formly/tree/latest) ([more info](https://medium.com/@kentcdodds/why-i-don-t-commit-generated-files-to-master-a4d76382564)).\n\nIn any case, `publish-latest` had a problem and that's why the last release didn't work out. This has been resolved and a new release is being published as we speak :-)\n. This should be relatively easy to fix. Mind submitting a PR?\n. Sorry, by PR I meant [Pull Request](https://help.github.com/articles/using-pull-requests/). Occasionally I'll reserve issues for [first timers only](https://medium.com/@kentcdodds/first-timers-only-78281ea47455) would you like me to reserve this one for you and help you know what to do?\n. Awesome! I love the initiative! I'll get a test written for you as soon as possible (probably tomorrow hopefully)\n. Hey @chrisheninger! Have at it! Here are [the tests](https://github.com/formly-js/angular-formly/blob/3bba183835c91866c5a1377f64fe31a3006038bd/src/directives/formly-field.test.js#L1324-L1356).\n\n[This line](https://github.com/formly-js/angular-formly/blob/3bba183835c91866c5a1377f64fe31a3006038bd/src/directives/formly-field.js#L343) and [this line](https://github.com/formly-js/angular-formly/blob/3bba183835c91866c5a1377f64fe31a3006038bd/src/directives/formly-field.js#L351) need to take an array of `scope.fc`s into account. I recommend you utilize the `arrayify` method (which you have access to in the scope of that function) which will take an argument and convert it to an array if it's not already one. Then call something like this on it: `.some(f => f.$invalid);` (or `$touched` for the other case).\n\nOne thing I just realized my test case doesn't cover is [this line](https://github.com/formly-js/angular-formly/blob/3bba183835c91866c5a1377f64fe31a3006038bd/src/directives/formly-field.js#L350) and [this line](https://github.com/formly-js/angular-formly/blob/3bba183835c91866c5a1377f64fe31a3006038bd/src/directives/formly-field.js#L348). If you want to take a whack at writing tests for those scenarios too that'd be cool, otherwise let me know and I'll write up tests for those next time I get a chance. Good luck!!!\n. I've added a few more tests, but it still doesn't cover everything. I'll be honest, this one's a bit more complex. Don't feel bad if you have a hard time with the implementation.\n. Let's hold on the PR  now and get this all done in one. I'll give your commits a closer look tomorrow. I'm glad this is a learning experience for you! That's the point :-)\n. Just looked at your implementation. Do fast, so good :+1:\n. Sorry, autocorrect... I'm meant \"So far, so good\"\n. The tests don't cover everything that needs to be covered. I'll try to get the remaining test or two written. But basically anything in that function that references `scope.fc` needs to handle situations where `scope.fc` is an array.\n. Looks pretty solid. I'll need to get to a computer to work out helping with that last test. Thank you very much!\n. @bjspencer, looking at your solution I think that it's better than what I was planning on. So you'll want to change the test that you have skipped. Instead of\n\n``` javascript\nexpect(spy).to.have.been.calledWith(sinon.match.array, sinon.match.array)\n```\n\nDo:\n\n``` javascript\nexpect(spy).to.have.been.calledTwice // once for each form control.\n```\n\nThat should do it :-) Then make a PR and I'll merge it :D\n. @bjspencer's PR #553 just got merged. A new release will be pushed out automatically in a few moments :+1: \n. Please try it out and report back if it's not behaving as you expect. Until then, I'm closing this. Thanks @bjspencer and @chrisheninger!\n. Have you tried providing a function to `errorExistsAndShouldBeVisibleExpression` rather than simply a string? :-)\n. I think that really depends on your use case. For example, what do you want to have it do when two of the fields have `required` in their `$error`? Show two? Show one? Either way, I think you might be able to have a function you call to get the `$error` object rather than simply referencing it there... Just really depends on your specific use case I think.\n. We could probably cache [this](https://github.com/formly-js/angular-formly/blob/460ead54188c6549b66e07ff5b939a87377d1027/src/directives/formly-field.js#L66). Where did you see that it can take upwards of a couple of seconds?\n. Wow, this is great. Thank you!\n. Thanks for your help and kind words @dannycallaghan :-)\n\nNote, if all you want to do is override the template and add a controller you could define a new type that `extends` the `input` type, like so:\n\n``` javascript\nformlyConfigProvider.setType({\n    extends: 'input',\n    name: 'myInput',\n    template: require('YOUR_INPUT_TEMPLATE.html'),\n    // don't need a wrapper because it will inherit that from the input type \n    controller: ['$scope', function ($scope) {\n        if ($scope.to.type && $scope.to.type === 'date') {\n            /* \n            Do your stuff here, something like:\n\n            var currentModelVal = $scope.model[$scope.options.key];\n            if (typeof (currentModelVal) === 'string'){\n                $scope.model[$scope.options.key] = new Date(currentModelVal);\n            }\n            */\n        }\n    }]\n});\n```\n. Also, I'm going to close this issue and direct you to the instructions at http://help.angular-formly.com\n\nThe github issues are reserved for feature requests and bug reports. We can help you better if you follow those instructions :-) cheers!\n. There are plenty of examples on the website that demonstrate using angular-formly with a custom directive. The best example is probably the [UI-Datepicker](http://angular-formly.com/#/example/integrations/ui-datepicker) one.\n\nI'm going to close this because the github issues are reserved for bug reports and feature requests. If you have further questions or need help, follow the instructions at http://help.angular-formly.com\n. I should note, the implementation of this is quite simple, but if you have a hard time contributing, don't feel bad. Getting into open source is not easy, and setting up someone else's project isn't either if you're not used to the tools it uses. Let me know if you have any trouble! I'm here to help!\n\nAlso, don't feel bad that the issue itself is small. The goal of first-timers-only is more to get you acquainted with the process of contributing than it is to figure out how to implement something cool. The process of getting your first contribution is the hard part. You can figure out implementation details once you've nailed down the contributing piece :-) Good luck!\n. Almost perfect @julianaramburu! The convention requires a `:` between the `scope` and the `subject`. And it also requires blank lines between the subject and the related issues. So yours should be:\n\n```\nfix(extras): Remove explicitAsync property\n\ncloses #516\n```\n\nIf you could kindly fix this, I would appreciate it. If you need help doing that, see [this StackOverflow answer](http://stackoverflow.com/a/179147/971592). Thanks! Sorry that the script isn't working for windows right now :-(\n. If you look at the instructions, you'll want to do a force push.\n\nAnother thing you could do is just close this PR, and try again :-)\n. I think I've fixed the windows issues, if you start over, everything should go much smoother :-)\n. This is perfect! Thank you for your contribution :-) Welcome to the open source community :confetti_ball: I hope this was a positive learning experience for you. What did you think?\n. \ud83d\udc4d that's great!\n. This is perfect! I merged it locally because I wanted to rebase it to the latest of master. Unfortunately because of this, GitHub doesn't recognize it as merged. So I'll close this PR, but never fear! [Your commit](https://github.com/formly-js/angular-formly/commit/b548e56f3801a2e6650c69b01eff930adf321763) is in our repo [git history](https://github.com/formly-js/angular-formly/commits/master)! Welcome to the wonderful world of open source!\n. From the look of that error, is failing because the version of node you\nhave is very very old and can't run even moderately modern JavaScript.\nCould you update to the latest version of node (or even 0.12.x) and try\nagain? I recommend using nvm. Let me know! Thanks!\n\nOn Mon, Oct 19, 2015, 4:40 PM Adam Morgan notifications@github.com wrote:\n\n> I had a brief back and forth with @kentcdodds\n> https://github.com/kentcdodds through Twitter about npm run test or npm\n> start not working after a fresh clone and npm install. Here's what you\n> initially asked for:\n> - System: Mac OSX Yosemite\n> - npm: 3.3.5\n> - node: 0.10.40\n> \n> As I mentioned on Twitter, this is happening when I run npm run test\n> after npm install.\n> \n> Here's the actual error I'm hitting:\n> \n> \u21d2  npm run test\n> \n> > angular-formly@0.0.0-semantically-released.0 test /Users/adammorgan/Desktop/angular-formly\n> > cross-env COVERAGE=true NODE_ENV=test karma start --single-run\n> \n> -- recording coverage --\n> \n> /Users/adammorgan/Desktop/angular-formly/node_modules/deindent/index.js:4\n>   let args = [].slice.call(arguments, 1);\n>   ^^^\n> 16 10 2015 16:28:49.524:ERROR [config]: Invalid config file!\n>   SyntaxError: Unexpected strict mode reserved word\n>     at Module._compile (module.js:439:25)\n>     at Module._extensions..js (module.js:474:10)\n>     at Object.require.extensions.(anonymous function) [as .js](/Users/adammorgan/Desktop/angular-formly/node_modules/babel-core/lib/api/register/node.js:214:7)\n>     at Module.load (module.js:356:32)\n>     at Function.Module._load (module.js:312:12)\n>     at Module.require (module.js:364:17)\n>     at require (module.js:380:17)\n>     at Object.<anonymous> (/Users/adammorgan/Desktop/angular-formly/other/webpack.config.es6.js:7:18)\n>     at Module._compile (module.js:456:26)\n>     at normalLoader (/Users/adammorgan/Desktop/angular-formly/node_modules/babel-core/lib/api/register/node.js:199:5)\n>     at Object.require.extensions.(anonymous function) [as .js](/Users/adammorgan/Desktop/angular-formly/node_modules/babel-core/lib/api/register/node.js:216:7)\n>     at Module.load (module.js:356:32)\n>     at Function.Module._load (module.js:312:12)\n>     at Module.require (module.js:364:17)\n>     at require (module.js:380:17)\n>     at Object.<anonymous> (/Users/adammorgan/Desktop/angular-formly/other/karma.conf.es6.js:12:23)\n> \n> Please let me know if there's anything else I can provide to help. Thanks!\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/522.\n> \n> ## \n> - Kent C. Dodds https://twitter.com/kentcdodds\n. Also, here's a [jsbin](http://jsbin.com/rokoci/edit?html,js) with the working version. Notice that it references v7.1.2 explicitly.\n. I think I'll give this one a look.\n. Here's the original reproduction steps @isaac-l gave the other day\n\n> Is there a known issue with http://angular-formly.com/#/example/other/matching-two-fields ? As far as I can tell, it doesn't work as expected\n> For example:\n> 1. Set email to a@b.c\n> 2. Set confirm to a@b.cd (Causes validation error as expected)\n> 3. Set email to a@b.cd (Should be valid, but still shows a validation error)\n> Likewise, setting valid values then changing Email doesn't cause validation to fail\n. Try this. Add the [`validateOnModelChange` extra](http://docs.angular-formly.com/docs/field-configuration-object#extras-object) to both fields. Then add the [`allowInvalid` ng-model-option](http://docs.angular-formly.com/docs/field-configuration-object#modeloptions) to both as well.\n\nThe issue is that when the value is invalid, the model value will be `undefined`, so by doing `allowInvalid` it will update the model value even when it's invalid. This means that your validator will be able to know what the value of the other field is.\n. Feedback:\n1. Looks good\n2. Don't use `_angularFix2['default']` because that's the transpiled code, just use `angular` and babel will take care of the rest\n\nFeel free to open a PR.\n. :+1: @gillchristian!\n. This should totally work. Could you follow the instructions here to give a reproducible example? http://help.angular-formly.com\n. Hi @iJungleboy, this is totally possible with angular-formly, so I'm going to assume that you just need help getting things set up. Because of this, please follow the instructions at http://help.angular-formly.com and I'll go ahead and close this issue (github issues on this repo are reserved for bug reports and feature requests). See you on chat!\n. If you take a look at how `onChange` is called, you'll see why you're experiencing this. It's called with: `model[options.key], options, this, $event` which is roughly equivalent to: `$modelValue, options, scope, $event`. If you want the `$viewValue`, then you can get it from `scope.fc.$viewValue`.\n\nI'm going to close this issue because issues on this repo are reserved for big reports and feature requests. If you need more help, go to http://help.angular-formly.com\n\nAlso, what language is that code you showed? It's not JavaScript and it looks unlike any CoffeeScript I've ever seen...\n. No, the real solution is to set the value using the $parse service. We do\nthis for default values.\n\nOn Fri, Oct 30, 2015, 6:19 AM MCKRUZ notifications@github.com wrote:\n\n> I believe this is related to the same issue I'm having with model\n> resetting. Here is what I think is happening.\n> \n> function resetModel() {\n> $scope.model[$scope.options.key] = $scope.options.initialValue;\n> if ($scope.options.formControl) {\n> if (_angularFix2['default'].isArray($scope.options.formControl)) {\n> _angularFix2['default'].forEach($scope.options.formControl, function\n> (formControl) {\n> resetFormControl(formControl, true);\n> });\n> } else {\n> resetFormControl($scope.options.formControl);\n> }\n> }\n> }\n> \n> Inside this code block we set $scope.model[$scope.options.key] like so.\n> Unfortunately if you have a key that is dot delimited it doesn't find the\n> value. We should be using some sort of recursive find like this one.\n> \n> function _setNested(path, value, obj) {\n> var schema = obj; // a moving reference to internal objects within obj\n> var pList = path.split('.');\n> var len = pList.length;\n> for (var i = 0; i < len - 1; i++) {\n> var elem = pList[i];\n> if (!schema[elem]) schema[elem] = {}\n> schema = schema[elem];\n> }\n> \n> ```\n>     schema[pList[len - 1]] = value;\n> }\n> ```\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/527#issuecomment-152522247\n> .\n> \n> ## \n> - Kent C. Dodds https://twitter.com/kentcdodds\n. That would do the trick! Do you want to create a PR with a test and\nimplementation? :-) :+1:\n\nOn Fri, Oct 30, 2015, 6:52 AM MCKRUZ notifications@github.com wrote:\n\n> So something like\n> \n> var setter = $parse($scope.options.key).assign;\n> setter($scope.model, $scope.options.initialValue);\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/527#issuecomment-152531451\n> .\n> \n> ## \n> - Kent C. Dodds https://twitter.com/kentcdodds\n. If so, see the CONTRIBUTING.md file\n\nOn Fri, Oct 30, 2015, 6:53 AM Kent C. Dodds kent@doddsfamily.us wrote:\n\n> That would do the trick! Do you want to create a PR with a test and\n> implementation? :-) :+1:\n> \n> On Fri, Oct 30, 2015, 6:52 AM MCKRUZ notifications@github.com wrote:\n> \n> > So something like\n> > \n> > var setter = $parse($scope.options.key).assign;\n> > setter($scope.model, $scope.options.initialValue);\n> > \n> > \u2014\n> > Reply to this email directly or view it on GitHub\n> > https://github.com/formly-js/angular-formly/issues/527#issuecomment-152531451\n> > .\n> > \n> > ## \n> > - Kent C. Dodds https://twitter.com/kentcdodds\n> \n> ## \n> - Kent C. Dodds https://twitter.com/kentcdodds\n. Run `npm run test:debug` and it should open your tests in chrome. Then click the Debug button in that chrome window and it should open a new tab. Then open your developer tools in that tab and refresh the team. It should stop at your breakpoint.\n. Whoops, miss-tapped\n. Maybe check if it's a number first and if it is, then don't use the parse service and do what it used to do.\n. Probably not! @eliagentili, could you verify this with the latest version of angular-formly?\n. cc @benoror. Could you look into this? It may be something we need to work out in formly.\n. I definitely want to see #486 implemented. Happily accepting PRs :-)\n. Fantastic! Perfect. Thanks.\n. Yes, use ng-if to hide your formly-form until your fields are there.\nSomething like: ng-if=\"vm.fields.lenth\" should do the trick.\n\nOn Fri, Oct 30, 2015, 8:57 AM thefrontfactory notifications@github.com\nwrote:\n\n> Hi,\n> It seems that fieldTransform functions are only run once when setupFields\n> is executed.\n> Because I am retrieving fields asynchronously, the transform are done when\n> fields are not yet present.\n> \n> Is there a way or a known workarround to allow transforms to be done when\n> fields are updated?\n> Thanks for your help\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/530.\n> \n> ## \n> - Kent C. Dodds https://twitter.com/kentcdodds\n. I'm afraid that I don't know how to help you without more information. Please follow [these instructions](http://help.angular-formly.com) to get help.\n\nBecause the GitHub issues are reserved for bug reports and feature requests and this is more of a support issue, I'm going to close this one. Good luck! See you on chat!\n. Hi! Thanks for working on this. What you have is great. The reason the build is failing is because your code doesn't pass our linting rules. Could you please run `npm run eslint` and fix all the issues mentioned, then please amend your commit with this changes and force push (so the PR has only one commit). Let me know if you need help with this. Thanks again!\n. Looks pretty good. If you could address my comment that would be great. Also, I prefer to not have multiple commits for a single pull request. If you could make your change (to remove the `if` if necessary), then do this:\n\n```\ngit checkout -b reset-with-parse\ngit reset --soft HEAD^^\nnpm run commit\ngit push -u --force origin reset-with-head\n```\n\nThanks!\n. Alright, what I would recommend is create a new branch based on the formly-js master. Then copy your changes over to that new branch. Do a single commit, and push that branch up. Then create a new pull request for that branch.\n. I'm sorry you're having trouble with this @MCKRUZ :-( Let me know if you need more help!\n. Thanks! Looks perfect. A new release should be out in a minute or two.\n. Hi @yahyaKacem. Sorry I never came to give you some feedback. You might look into [`extras.validateOnModelChange`](http://docs.angular-formly.com/v7.2.3/docs/field-configuration-object#extras-object) on the field you wish to validate rather than that `onChange` function on the field you're changing.\n\nOther than that I think your solution looks pretty good. In the future when you need help, please follow the instructions here: http://help.angular-formly.com. The GitHub issues on this project are reserved for bug reports and feature requests. Have a nice day!\n. :-( your other PR had tests :-( also, your commit message needs to have a scope: `fix(formly-field)` \n. ping?\n. Perfect! Thanks! High five!\n. Should be out now!\n. Yeah, but api-check isn't part of Angular at all. Think of it like jQuery or lodash. Order matters.\n. Thanks for the issue and the diff. I'm mostly concerned with the comment `// Avoid flicker when hideExpression promises resolve to true`... I feel like setting `field.hide = true` would cause a flicker if the field is not hidden and the promise resolves to `false`...\n\nMy inclination is to not do this and instead have you use a work-around for this. Perhaps something like this: https://jsbin.com/pepode/edit?html,js,output\n\nIf this is sufficient for you, please close this issue. If not, maybe there's another way. Thanks!\n. I see, it seems like your use case is quite specific. I would actually recommend that you use a router like `ui-router` or `ng-router` and utilize the `resolve` functionality to resolve that asynchronous logic into your controller (so your controller isn't even loaded until that request has finished) and then you'll be able to simply assign the result to the `hide` property making your controller much easier to understand/maintain/etc.\n\nEither way, the flicker would be a problem for anyone who has the hide property being dynamic as the user interacts with the form and I can't do that to the rest of the users.\n\nSomething else you could do is put this particular field into its own form hidden behind an `ng-if` and do the async stuff outside of formly entirely.\n\nEither way, I don't think we'll be adding this to formly. If you need more help, please follow the instructions here: http://help.angular-formly.com\n. Will do, thanks for the suggestion! And thanks for using formly :-)\n. There is not. This has been asked for quite a bit. My guess is you want to know when it's done rendering because it's taking a long time to render. Please make sure that you're following the [production tips](http://angular-formly.com/#/example/other/production-tips) to make sure that you disable some of the developer related things which should speed things up quite a bit for you. After that, you'll just have to make sure that your design is conducive to a performant form.\n. No plans, sorry\n. Good find. Here's the line of code that causes the problem. What do you think we could/should do about it? https://github.com/formly-js/angular-formly/blob/master/src/directives/formly-form.js#L293\n. I don't know if that would actually work... I don't think you can use `$parse` in a string expression like that.  Honestly, I think this is sort of an edge case and unless we can accomplish a solution that avoids the following two issues, I don't want to worry about it:\n1. It adds complexity to the codebase\n2. It reduces performance for the common case\n\nI don't know if there's a satisfactory way to accomplish both of those for this case.\n. I think that's acceptable. Feel free to submit a PR :-)\n\nOn Mon, Nov 9, 2015, 6:28 AM MCKRUZ notifications@github.com wrote:\n\n> Hey Kent, sorry it looks like I posted the wrong code.\n> \n> This is my fix. I tried it and it works locally\n> \n> var watchExpression = watcher.expression || 'model[\\'' +\n> field.key.split('.').join('\\'][\\'') + '\\']';\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/542#issuecomment-155061290\n> .\n> \n> ## \n> - Kent C. Dodds https://twitter.com/kentcdodds\n. No, in the case of a nested key, angular-formly will actually change `ng-model=\"model[options.key]\"` to `ng-model=\"model.your.nested.key\"`. But only when you specify a nested key.\n. [Here's the function](https://github.com/formly-js/angular-formly/blob/master/src/run/formlyNgModelAttrsManipulator.js#L46-L50) that does it and [here are the tests](https://github.com/formly-js/angular-formly/blob/master/src/run/formlyNgModelAttrsManipulator.test.js#L181-L193)\n. Yes, I think that should work.\n. Yes, that should do it! I triple checked it this time. Thanks!\n. Boom! This is fixed in `7.3.4`. Thanks @MCKRUZ!\n. Thanks for your interest in angular-formly. The best way to get help is by following the instructions at [help.angular-formly.com](http://help.angular-formly.com). The GitHub issues on this project are reserved for feature requests and bug reports, so I'm going to close this issue. See you on [chat](http://chat.angular-formly.com) and [Stack Overflow](http://question.angular-formly.com/)!\n. Thanks for seeing that @pdemilly! @shealan, I highly recommend you look into [ng-annotate](https://github.com/olov/ng-annotate) to avoid problems like this.\n. There are several approaches you could take but probably the most effective would be to do:\n\n``` javascript\n{\n    \"type\": \"input\",\n    \"key\": \"type\",\n    \"defaultValue\": \"Static\",\n    \"templateOptions\": {\n      \"type\": \"hidden\",\n      \"label\": \"Hidden Type\"\n    }\n}\n```\n\nwhich will result in something like:\n\n``` html\n<input type=\"hidden\" ng-model=\"model[options.key]\" />\n```\n\nAnd inputs where the type is hidden will not be shown.\n\nAlternatively, you could use CSS to hide the field:\n\n``` javascript\n{\n    \"type\": \"input\",\n    \"className\": \"display-none\",\n    \"key\": \"type\",\n    \"defaultValue\": \"Static\",\n    \"templateOptions\": {\n      \"type\": \"hidden\",\n      \"label\": \"Hidden Type\"\n    }\n}\n```\n\nwith:\n\n``` css\n.display-none {\n  display: none\n}\n```\n\nI hope this helps.\n\nThanks for your interest in angular-formly. The best way to get help is by following the instructions at [help.angular-formly.com](http://help.angular-formly.com). The GitHub issues on this project are reserved for feature requests and bug reports, so I'm going to close this issue. See you on [chat](http://chat.angular-formly.com) and [Stack Overflow](http://question.angular-formly.com/)!\n. Also, the commit message isn't quite right. Please review [the commit message convention](https://github.com/ajoslin/conventional-changelog/blob/master/conventions/angular.md). Thanks again!\n. Could you produce an example with [issue.angular-formly.com](http://issue.angular-formly.com/). Thanks!\n. Actually, this is a duplicate: https://github.com/formly-js/angular-formly/issues/510\n. Please check out the conversation over there. You'll need to adjust your implementation a bit.\n. Nope, you're good. I think that @chrisheninger could use some help with that actually if you want to collaborate on #510 that'd be cool.\n. Looks like some of the tests are failing. Could you look into that?\n. Looks totally solid! Thanks for doing this :-)\n. A new version should be [released automatically](https://egghead.io/lessons/javascript-how-to-write-a-javascript-library-automatically-releasing-with-travisci?series=how-to-write-an-open-source-javascript-library) in a few minutes :+1: \n. Thanks for the PR! I hate to do this to you but do you think you could submit it one more time? We release angular-formly automatically using semantic-release which requires certain conventions for commit messages. See [Pull Requests](https://github.com/formly-js/angular-formly/blob/master/CONTRIBUTING.md#pull-requests) in CONTRIBUTING.md to learn about that.\n\nFor this change, a good commit message would be:\n\n```\nfix(formlyValidationMessages): handly falsy values\n\nThis should fix setting {min: 0} in field templateOptions to return proper message\n```\n\nThanks for your patience and your contribution! :smile: \n. It's perfect! Thanks for contributing! I'll merge this and it'll be [automagically released](https://egghead.io/series/how-to-write-an-open-source-javascript-library) soon :-)\n. My guess is that this is an odd behavior with how ui-bootstrap deals with focus for modals. Here's a solution that uses `expressionProperties` which will set the focus value after the form is initially digested: https://jsbin.com/qanumi/1/edit?html,js,output\n. This should be possible. But probably not easy. Feel free to submit a PR.\n. Yeah, `parseGet` is to allow for nested keys, like: `name.first`, so it's using the `$parse` service. My guess in the `$parse` service doesn't like a preceding number in a property getter or something. @MCKRUZ, do you think you could look into this?\n. I think that if the model is already an array, then angular will treat it like an array. Otherwise (if it's an object or undefined) angular will make it an object and set the property there. @dannycallaghan can you try initializing your model to an object and seeing if that works?\n. Actually... Yeah, that wont work... Nevermind...\n\n@MCKRUZ, I think that your solution should work pretty well. Just make sure to write/run tests and check the code coverage report generated in the `coverage/lcov-report` folder to make sure you're covering what you think you are :-) Thanks!\n. All the thanks is to @MCKRUZ on this one. I just clicked the merge button.\n. Yep, that's latest. @dannycallaghan, do you fancy making a pull request to add skipped test cases for your keys?\n. What if we changed it to:\n\n``` javascript\nfunction shouldNotUseParse(key) {\n  return angular.isNumber(key) || !containsSelector(string)\n}\n\n// maybe we should put these in formlyUtils...\nfunction containsSelector(string) {\n  return contains(string, '.') || (contains(string, '[') && contains(string, ']'))\n}\n\nfunction contains(a, b) {\n  if (!a || !a.indexOf) {\n    return false\n  }\n  return a.indexOf(b) !== -1\n}\n```\n\nWhat do you think?\n. Guessing it's been resolved.\n. You'll have to write custom code to track whether the current value is equal to the initial value. angular-formly adds an `initialValue` to all of your field's options (angular-formly uses it to reset the form). You could use that to determine the changed state of a given field. A function like this would do it for you:\n\n``` javascript\nfunction fieldHasChanged(field) {\n  return field.formControl.$modelValue !== field.initialValue\n}\n```\n\nThanks for your interest in angular-formly. The best way to get help is by following the instructions at [help.angular-formly.com](http://help.angular-formly.com). The GitHub issues on this project are reserved for feature requests and bug reports, so I'm going to close this issue. See you on [chat](http://chat.angular-formly.com) and [Stack Overflow](http://question.angular-formly.com/)!\n. Thanks @MCKRUZ :-)\n. Fantastic! Thank you!!! \ud83c\udf89 \ud83c\udf8a\n. Hi @david-nelson-moscow, I don't personally have any plans to work on an Angular 2 version of angular-formly. That (of course) does not preclude anyone else from working on it.\n\nOriginally I had planned on making an Angular 2 version of angular-formly. However with so many things competing for my time, I can't justify spending time on it. I was able to justify working on angular-formly before because I was using it at work and I used Angular heavily. But I will soon be changing jobs and will be using React. So I no longer have a use case for angular-formly.\n\nPerhaps someone on the @formly-js/angular-formly-collaborators or @formly-js/angular-formly-collaborators-read team will be up to the challenge.\n\nThanks for asking!\n. Awesome! Thanks!\n. Fantastic. Thanks for working on this! Merging.\n\nAs a friendly reminder, the issue number should be at the bottom of the commit per [our commit convention guidelines](https://github.com/ajoslin/conventional-changelog/blob/master/conventions/angular.md). So this one should be:\n\n```\nfix(formly-field): Add better detection of nested keys\n\nCloses #566\n```\n. Thanks again!\n. `resetModel` should update those values. Could you please reproduce your issue using [issue.angular-formly.com](http://issue.angular-formly.com/)? It will help us determine what exactly the problem is that you're describing and how it could be fixed. Thanks!\n. Looks like after we call `resetModel` on all the individual fields ([right here](https://github.com/formly-js/angular-formly/blob/917ec263ddcc4902fa2cb9dc167da0734f9d5ed6/src/directives/formly-form.js#L207-L215)) we need to set the form's `touched` and `pristine` state like we do with the individual fields ([here](https://github.com/formly-js/angular-formly/blob/8648c16c0a927ccbdf56861280a3680396041402/src/directives/formly-field.js#L202-L215)).\n\nI'm open to a pull request for this! Anyone's welcome to try. Just follow [these instructions](https://github.com/formly-js/angular-formly/blob/master/CONTRIBUTING.md#pull-requests)\n. This issue should be closed I think. Let me know if you experience otherwise!\n. @janneman001 could you provide an example of this behavior?\n. Here you can use [this](http://help.angular-formly.com) as a starter, then just post the link in here :+1: \n. In the last major version `expression` was changed to `statement`. Here's a working example:\n\nhttps://jsbin.com/purobo/edit?js,console,output\n. I've updated the example. Thanks!\n. Thank you! :-) this should be released automatically in a few minutes.\n. Looks like somehow I forgot to add the webpack Uglify plugin to the webpack config when I changed some stuff. If someone would like to PR it I'll merge when I land :airplane: :-)\n. Hi @benoror, the uglify loader actually has some problems with it. We should actually remove it from the devDependencies. We should instead use the [Uglify Plugin](http://webpack.github.io/docs/list-of-plugins.html#uglifyjsplugin)\n. Thanks @benoror! :+1: \n. Actually, sorry, could you make this a `fix` rather than a `chore`? That way we get an automatic release\n. Fantastic. Thank you!\n. Dying is probably the more appropriate term: https://gofore.com/ohjelmistokehitys/stop-using-bower/\n. Actually, you don't need to use `browserify`, `webpack` or any other module packager even if you use `npm`. You can just reference the built files just as you would without those tools. Most packages distribute a stand-alone distributable that works in the browser (like angular-formly).\n\nAs for the location of the installed files, as long as they're listed in your `package.json` `dependencies` then they'll be in the root of `node_modules` (regardless of npm version). And if someone moves where the distributable file goes then that's a breaking change (and would happen with `bower` as well).\n\nSo, for example, for angular-formly, you could use npm by installing it like so:\n\n``` bash\n$ npm i angular-formly --save\n```\n\nThen in an html file you could reference that like so:\n\n``` html\n<script src=\"node_modules/angular-formly/dist/formly.js\"></script>\n```\n\nAnd that'd work just perfectly :-)\n. @dmitriz, I'm not sure I understand what you're describing, but if I had to guess, you're using npm in the wrong way.\n\n> When you say \"as long as they're listed in your package.json dependencies\", do you mean -- before the installation?\n\nNo, they don't need to be there before installation. When you install the module explicitly (either from an `npm install angular-formly` or from having it in your `package.json`), it'll go in the root of your `node_modules` directory. \n\nNot sure what to tell you, but I'm pretty sure that you're not using npm correctly if you're experiencing that.\n. Yeah, generally every project that depends on `npm` or `bower` will have a `package.json` or `bower.json` (respectively) to list dependencies. Then all the dependencies for the project will be added to as a sibling directory to the `package.json` (in the case of `npm`) called `node_modules`. If you're wanting to spread `node_modules` directories all over your project, that's a pretty unconventional way to use `npm`.\n. I'm not sure what the webhook is for. This gulp task will run as part of our automated releases on travis. What's the purpose of the webhook?\n. Merged and webhook created. Let me know if you need anything else!\n. That's one way to do it. I'd welcome a PR to add that :-)\n. Sorry it took so long to get back! It'll be in [attributeOnly](https://github.com/formly-js/angular-formly/blob/master/src/run/formlyNgModelAttrsManipulator.js#L185) because (as @SteveShaffer mentioned) there is no angular equivalent (like `ng-step`).\n. Hi @rayhooker. Thanks for the question. I actually just recently answered this on my [AMA](http://ama.kcd.im) [here](https://github.com/kentcdodds/ama/issues/66#issuecomment-169456411). Let me know if you have further questions :-)\n. New release is out. But I guess it doesn't fix this issue still exists.\n. This looks pretty good. Please just use `extras` as I mention in the inline comment and I'd prefer that this new API is tested. Thanks!\n. P.S. Let me know when you update the PR (github wont notify me).\n. Thanks for doing this. The tests are great. I wonder if it might be easier if  `manualModelWatcher` could be a string or function itself. This way you could have a single watcher that applies to all fields. I feel like this could accomplish the need and we already have an API for specific watchers on fields.\n. With that, do we really need the extras watcher? We already have a mechanism for adding a watcher to a field... I'd rather avoid adding another way to do the same thing.\n. Right. What I'm saying is for that second bullet point, you can use the `watcher` property to add custom watchers. It basically does the same thing as the watch is extras\n. Sorry. I guess I didn't understand your problem well enough. I still think that it would be valuable to be able to disable the deep watch and provide a custom watch function for the whole form.\n. Ah, indeed... Hmmm.... I wonder if there's a way we could enhance the existing API to account for the use case\n. I like your first suggestion. I think that we could implement it in a backward compatible way and I don't think that it is terribly confusing:\n\n``` javascript\n{\n  ...\n  watcher: [{\n    expression: 'model.type',\n    runFieldExpressions: true,\n  }]\n},\n{\n  ...\n  watcher: [{\n    expression: 'model.type',\n    listener: () => {},\n    runFieldExpressions: true,\n  }]\n}\n```\n\nI think that both of those would run the field expressions, but the second field would also run the custom listener.\n\nI really don't see anything bad with this approach. The idea is that it totally separates disabling deep model watching (or specifying custom watcher) from custom field watchers which I think is a good call.\n. That's probably a little bit too magical I think. Maybe if we added another property to `options` that was `watchAllExpressions` in addition to `disableModelWatcher` or something like that. I just want the API to describe what's going on.\n. Haven't looked at the code yet, but I can tell you right now that there's a reason that `hideExpression` isn't evaluated the same as `expressionProperties` and that's because a common scenario for the `hide` property. That is: If a field is initialized as `hide: true`, then it will not be compiled. Therefore there will be no `scope` to evaluated this expression and the field will never be shown (because the expression can't be evaluated).\n\nSo, if you could removed that piece, then I'll give the code a look. Let me know if you have any questions. Thanks a ton!\n. If you wanted to fix the `model` property in those expressions, you could add to [this object](https://github.com/formly-js/angular-formly/blob/master/src/directives/formly-form.js#L333-L338). Would require a breaking change though. Feel free to do that (though make sure your commit message follows [the convention](https://github.com/ajoslin/conventional-changelog/blob/master/conventions/angular.md))\n. This is excellent @kwypchlo. Thank you. If you could address my one comment, I give this a :+1:. I would like someone from @formly-js/angular-formly-collaborators and another person from @formly-js/angular-formly-collaborators-read to also review this PR and give a :+1: or :-1:\n. Thanks @kamilkisiela! I'll go ahead and merge this in then.\n. This will be auto-released in a few minutes. Thanks a bunch @kwypchlo!\n. I'm not sure what's causing your issue. What version of node and npm are you using?\n. I'm sorry, I'm not able to reproduce your issue myself. One thing you might double check is that you've got the `peerDependencies` like `angular` and `api-check` installed before you try to install `angular-formly`.\n. Yes, this is totally possible and the way it should be done is with [plugins](http://docs.angular-formly.com/page/plugins) of which there are several. I'm pretty confident that for the most part angular-formly is \"done.\" Any other functionality needed can/should probably be added via a plugin.\n\nFeel free to create a plugin yourself. It should be quite straightforward. For example, the Matching Two Fields example you reference could be made a plugin with a single file that does this:\n\n``` javascript\nangular\n  .module('angular-formly-match-field', [])\n  .config(function config(formlyConfigProvider) {\n    // set templates here\n    formlyConfigProvider.setType({\n      name: 'matchField',\n      defaultOptions: function matchFieldDefaultOptions(options) {\n        return {\n          extras: {\n            validateOnModelChange: true\n          },\n          expressionProperties: {\n            'templateOptions.disabled': function(viewValue, modelValue, scope) {\n              var matchField = find(scope.fields, 'key', options.data.fieldToMatch);\n              if (!matchField) {\n                throw new Error('Could not find a field for the key ' + options.data.fieldToMatch);\n              }\n              var model = options.data.modelToMatch || scope.model;\n              var originalValue = model[options.data.fieldToMatch];\n              var invalidOriginal = matchField.formControl && matchField.formControl.$invalid;\n              return !originalValue || invalidOriginal;\n            }\n          },\n          validators: {\n            fieldMatch: {\n              expression: function(viewValue, modelValue, fieldScope) {\n                var value = modelValue || viewValue;\n                var model = options.data.modelToMatch || fieldScope.model;\n                return value === model[options.data.fieldToMatch];\n              },\n              message: options.data.matchFieldMessage || '\"Must match\"'\n            }\n          }\n        };\n\n        function find(array, prop, value) {\n          var foundItem;\n          array.some(function(item) {\n            if (item[prop] === value) {\n              foundItem = item;\n            }\n            return !!foundItem;\n          });\n          return foundItem;\n        }\n      }\n    });\n  });\n```\n\nIf you're interested in creating this plugin, I recommend you check out my egghead.io series: [How to Write an Open Source Library](http://kcd.im/write-oss) and look at the recommendations on [the plugins](docs.angular-formly.com/page/plugins) page. Good luck!\n. @slavafomin, why can't you help? You're welcome to make a PR. Just make the test pass :-)\n. If you need help, I'm sure that someone (or I) could help point you in the right direction. You might also check the [CONTRIBUTING.md](https://github.com/formly-js/angular-formly/blob/master/CONTRIBUTING.md) :+1: \n. Just to clarify, this is intended to only run the hide expression right? Other expressionProperties won't work until the field itself is compiled.\n. Based on the test, I'm guessing that is the case. Thanks! \n. Yes, go to the link function where we're chaining the steps of the promises to compile the template and just add another step or add to an existing step\n. I really think that you could find another way to accomplish what you're trying to do. Could you create an example of what you're trying to do following [these instructions](http://help.angular-formly.com)?\n\nEither way, I don't think that we'll be doing anything significant to change the behavior of the `ngModelAttrsTemplateManipulator` and I'm sure that we can figure out another way to do what you're trying to do. So I'll go ahead and close this issue. Good luck!\n. Thanks for your interest in angular-formly. The best way to get help is by following the instructions at [help.angular-formly.com](http://help.angular-formly.com). The GitHub issues on this project are reserved for feature requests and bug reports, so I'm going to close this issue. See you on [chat](http://chat.angular-formly.com) and [Stack Overflow](http://question.angular-formly.com/)!\n. The examples seem to be working fine for me... Could you check them again?\n. Thanks @kamilkisiela! :D\n. @benoror looks like you updated the PR. Looks good to me. Anyone from @formly-js/angular-formly-collaborators or @formly-js/angular-formly-collaborators-read wanna review this and push the merge button?\n. Sorry, I just merged another PR :cry: \n. Sorry about that @benoror.\n. :clap: \n. Ah, yes, probably should.\n. Anyone from @formly-js/angular-formly-collaborators wanna take this one? https://github.com/formly-js/angular-formly-website/tree/master/app/states/root/children/users/components/data\n. :+1: even better! Thanks :D\n. Here are the GUI builders I'm aware of. Built by others: http://docs.angular-formly.com/docs/gui-form-builders\n. That's what they promise. If you have problems with them, contact their respective maintainers.\n. These are great questions for the chat: http://chat.angular-formly.com\n. Thanks for the help @benoror.\n\nHmmm.... Yeah, I feel like this is a bit of an edge case and would prefer that it's handled outside of angular-formly unless I can see a simple, tested implementation. My inclination is to say this is outside of the scope of the project though. Sorry @koraybalci.\n. Thanks for your interest in angular-formly. The best way to get help is by following the instructions at [help.angular-formly.com](http://help.angular-formly.com). The GitHub issues on this project are reserved for feature requests and bug reports, so I'm going to close this issue. See you on [chat](http://chat.angular-formly.com) and [Stack Overflow](http://question.angular-formly.com/)!\n. Technically [this](https://github.com/formly-js/angular-formly/blob/f8bc5479ce2dd66aafe2a513f68c2deb411d8d88/src/directives/formly-form.js#L369-L372) should have almost everything that [this](https://github.com/formly-js/angular-formly/blob/master/src/directives/formly-field.js#L21-L29) has. I think the only thing that's missing is: `originalModel`, and `formOptions`. The other properties are actually properties on the `$scope` of the `formly-form` which is where the expression is evaluated and therefore you should have access to it in your expression.\n\nI'd happily accept a (tested) PR to add these properties. If you're keen on it, that's great. If you need help, maybe someone from @formly-js/angular-formly-collaborators or @formly-js/angular-formly-collaborators-read could give you a little guidance. Thanks everyone!\n. Great, you might take a look at the CONTRIBUTING.md file as well :+1: \n. Yeah, `originalModel` can simply be: `$scope.model` (the form's `$scope`). `formOptions` will need to be `$scope.options` (the form's `$scope`)...\n. Yep! Feel free to close it. Thanks!\n. Feel free to [makeapullrequest.com](http://makeapullrequest.com)\n. Seems to be up for me and isitup.org https://isitup.org/docs.angular-formly.com\n. How's it looking for you now?\n. You're validator needs to check for empty and return valid if it's empty. The examples on the website do this. Thanks!\n. Thanks!\n. That's fine. Thanks!\n. Awesome! Mind adding a test or two that verifies these changes work (and to prevent them from breaking in the future?)\n. Sure! :+1: \n\nI'd probably put it in the section of tests that test `hideExpression` because that's one of the main places that leverages this feature. Find that [here](https://github.com/formly-js/angular-formly/blob/master/src/directives/formly-form.test.js#L535-L560).\n\nI would take the existing `beforeEach` and two `it` blocks and nest them in another describe with a title of something like: `behavior when the model changes`\n\nThen I would create another `describe` block for your tests with the title of something like `as a string`. And then add an `it` with the message: `should have access to almost all the same properties as an expressionProperties string expression`.\n\nThen in your test, you'll want to initialize `scope.fields`, `scope.model`, and `scope.options` (`scope.options` should have a `formState` object). And for `scope.fields` you can use the `getNewField` helper function (see other places for how that's used. It's pretty much just a helper so you can omit the template/type/etc.).\n\nIt may be a bit tricky because you can't really do assertions in string expressions, but the returned value of the string expression is assigned to the field's `hide` property. So you might try something like this:\n\n``` javascript\nscope.model = {}\nscope.options = {formState: {}}\nscope.fields = [getNewField({\n  hideExpression: `\n    options === options.data.field &&\n    index === 0 &&\n    formState === options.data.formOptions.formState &&\n    originalModel === options.data.originalModel &&\n    formOptions === options.data.formOptions\n  `, // can't reliably test `formId` unfortunately\n  data: {\n    originalModel: scope.model,\n    formOptions: scope.options,\n  }\n})]\nscope.fields[0].data.field = scope.fields[0]\n```\n\nThen invoke `compileAndDigest` and assert that the `scopes.fields[0].hide` is true.\n\nLet me know what you think or feel free to change whatever you like. Looking forward to seeing this. Thanks!\n. It's for anything you want. Because angular-formly validates all of the properties you provide, if you have any other things you need to provide, they either go in `templateOptions` (if it's specific for the template or `type` that you're using) or in `data` if it's just general data that you need to get your job done (like in this case).\n. I'm fine with either way. Feel free to add more tests in this pr, feel free to squash if you like.\n. If you could fix that comment and the name of that data property (to `parentScope` maybe), then this is great and I'll merge it. Thanks!\n. Perfect. Thank you!\n. If you're simply using the global, then rather than requiring it, it's available as a global `apiCheck`. Then you disable it the same as in the docs.\n. No, angular-formly uses it heavily. You definitely want to disable it for production. There's an example on the website for production tips that uses globals.\n\nI'm going to let you look at that and consider this issue closed. Check out the chat for more questions.\n. I'm sorry, but as you can see in the comments, I said I don't want to add another error message because it simply doesn't make sense to have two error messages for the same thing. The very next line is the same error. If you want to update that message, we can talk about that, but adding another message is something I simply won't do.\n. You can do it in your submit handler. The submit handler is on the same scope as the form options.\n. The GitHub issues on this repo are reserved for feature requests and bug reports. All questions should follow these instructions: help.angular-formly.com\n\nSo I'm going to go ahead and close this issue.\n. The example is confusing, but it's definitely still working. Read the descriptions carefully. Sorry it's confusing.\n\n![working](https://cloud.githubusercontent.com/assets/1500684/12903586/a37f19ae-ce7d-11e5-9351-1f3328649f81.gif)\n. Good luck! If you wanna create an example of what you're trying to do and share it in the chat or on stack overflow that'd probably help :-) [help.angular-formly.com](http://help.angular-formly.com)\n. I'm not certain I understand what you mean by this. Could you give a more clear explanation of what you mean?\n. Even better, maybe you could go to [the chat](http://chat.angular-formly.com) and describe what you're trying to do. Perhaps someone will be able to help you find another way.\n. Could you please reproduce your issue using [issue.angular-formly.com](http://issue.angular-formly.com/)? It will help us determine what exactly the problem is that you're describing and how it could be fixed. Thanks!\n. > I can make this work with the current form by assigning both the form and the formly-form to the same property\n\nThis is how it's intended to work. You're basically passing the form to `formly-form` telling it what to use for the `NgFormCtrl`. Formly does some [magic under the hood](https://github.com/formly-js/angular-formly/blob/master/src/directives/formly-form.js#L383-L420) to manage the `NgFormCtrl` to make the API more clear. Unfortunately that leads to issues like the one you're seeing, but most of the time it's better than the alternative.\n\nI don't think there's anything I can do to fix this. Just name your form and pass it to `formly-form`.\n. Could you please reproduce your issue using [issue.angular-formly.com](http://issue.angular-formly.com/)? It will help us determine what exactly the problem is that you're describing and how it could be fixed. Thanks!\n. This appears to be a bug. `defaultOptions` should work great as a function. But it appears to not work in this case. However, if we make the `abstractType` an object instead, it seems to work fine ([like so](https://jsbin.com/tureko/edit?html,js,output)).\n\nI doubt that I'll have time to work on this I'm afraid. But feel free to [makeapullrequest.com](http://makeapullrequest.com) :-)\n. Thanks for letting me know! This should be fixed in a few minutes. Sorry about that!\n. Please re-open this if it's not fixed in 30 minutes.\n. Hey @johannesjo,\nI commented on your question on stack overflow.\n\nBecause the github issues on this project are reserved for bug reports and feature requests, I'm going to close this issue. If you have further questions, please take them to [chat.angular-formly.com](http://chat.angular-formly.com)\n. I would personally say that it's out of scope for the core project. It would, however, make a great [plugin](http://docs.angular-formly.com/page/plugins). You might think about giving the [repeating-section](http://angular-formly.com/#/example/advanced/repeating-section) a look.\n. :+1:\n. I should also mention that managing this project is primarily a matter of support at this point. There are definitely some bugs and a few tiny features, but for the most part, this project is done.\n. Thanks for the suggestion @ShashankaNataraj. That currently exists (and invitations are still open #481). I'm looking for someone to hand off account information, passwords, tokens, etc. to.\n. If you're interested, I published a 3 minute podcast about this: https://www.briefs.fm/episodes/570\n. @jorgemarcondes fantastic. I'll add you to the collaborators on the org. Thanks!\n. Sweet @barkoczi, I'll add you to the collaborators.\n. Thanks @agileurbanite! I'll add you to the collaborators as well.\n\nFor everyone on @formly-js/angular-formly-collaborators-read, you could really help out by investigating, reviewing, closing, and making PRs for [the issues](https://github.com/formly-js/angular-formly/issues). Also, make sure to watch the repo, and the various [formly-js](https://github.com/formly-js) repos as well.\n\nIf I see someone really taking initiative on the issues and things then I'll happily hand over write access and eventually publish access. Thanks!\n. @Stwissel, talk with @mohammedzamakhan about how you can help with https://github.com/formly-js/ng2-formly :-)\n. > I would hate to see formly go un-maintained.\n\nLikewise. I've stopped watching the repos because I can't really help out anymore. My plan was to hand over control to anyone making pull requests, but nobody has really done that consistently. This tells me that either nobody's willing to step up to the plate of ownership or angular-formly is done.\n\nI think at this point, @BarryThePenguin is probably the best candidate for ownership. What do you say @BarryThePenguin?\n. @sumitasr, I'll add you to the read-only collaborators. Start making PRs and I'll give you write access :)\n. I'm fairly confident that formly is still a prime solution for building forms with AngularJS. It's been steadily growing in the number of downloads since I posted this almost a year ago. Formly's not dead. But based on the fact that the library has had very little development (and no active maintainers), but still growing in popularity tells me that it's \"done.\"\r\n\r\nFormly is no more dead than AngularJS. It's just done.. Another interesting fact: angular-formly comes up (basically) first in pretty much every search criteria on npm for \"angular forms\": https://www.npmjs.com/search?q=angular%20forms\r\n\r\nI think it's safe to say that angular-formly is still the most popular abstraction for forms with angular.. @LuigiDAmico, from the README badge, you can see there are about 12,000 downloads on npm per month. It's extremely hard to tell from download numbers how many users there are. There are no active contributors or maintainers, so I've kept ownership of the project, but I don't watch the repo so I'm not sure how the community is doing (as far as people helping one another out or people finding the answers they need). If you want to contribute, please start helping out in the community.\r\n\r\nI think that the project is more-or-less \"done\" based on the fact that there are rarely new issues filed on the project and no critical issues and rarely any pull requests. It's helped tens (hundreds) of thousands of developers build better forms with AngularJS :). Hi @kwypchlo!\n\nThanks for making this. I'll review it more closely soon. But if you could double check the commit message conventions, I don't think this follows it. Also, pay close attention to what you need to do in the commit message if you're introducing a breaking change please. Thanks!\n. Awesome. Thanks for doing that! I'll get back to you soon hopefully!\n. I think this PR is great other than the one note that I mentioned. Let me know if you have questions about that.\n. Looks good to me! Thoughts @formly-js/angular-formly-collaborators-read?\n. Hopefully the auto-release works for this one. We've had a bit of trouble with that recently.\n. Nope :-( #643 is tracking issues with the auto-release process...\n. Thanks a ton for the help @gillchristian! @vukan71, because this appears to be more of a matter of help and support than a real bug or feature request, I'm going to close this issue. Feel free to continue discussion or move this to chat.angular-formly.com :+1: \n. Looks good to me. But I would like someone else to merge this: @formly-js/angular-formly-collaborators \n. Anyone in @formly-js/angular-formly-collaborators-read who feels confident they can have commit access, I'll add you to @formly-js/angular-formly-collaborators :-)\n. Unfortunately it looks like it's [not fixed](https://jsbin.com/vilatopuso/edit?html,js,console,output)\n. Actually, it looks like this wasn't auto-released for some reason :-( Filing an issue.\n. Yeah, it hasn't yet been released because there's a problem. So no, there's not really a way... Feel free to help out here: #643\n. If I publish manually, will things go back to normal?\n. Alrighty, released `7.5.1`. I'll merge #639 after I verify [this](https://github.com/formly-js/angular-formly/pull/641#issuecomment-188634110) is fixed with the new release.\n. Looks like bower's broken as well... I'm actually tempted to stop officially supporting bower and direct people to the solution in #589 with npmcdn.com\n. > [imho] What a mess ...\n\nAgreed... :-(\n\n@DrDanRyan, do you have any ideas of how to fix this issue? I'm not sure what's going on with the release, but if you'd like to look into it, please feel free: https://travis-ci.org/formly-js/angular-formly/builds/111880609\n. Good thing you can continue using version 7 and it works just as well as it always has :-)\n. Ah! Neat! Want to add it to the examples site? https://github.com/formly-js/angular-formly-website/blob/master/CONTRIBUTING.md#creating-an-example\n. Hmmm... I'm not seeing it [here](https://github.com/formly-js/angular-formly-website/pulls)...\n. Thank you for the help @BarryThePenguin!\n. Could you check it again. It's working fine for me.\n. Hi @MCKRUZ, please move discussion over to #643 \n. Hi @JessyRiordan, yes, this is being tracked in #643, thank you for your patience (and help!)\n. I would recommend you write your own directive that has default options you can use and passes those to formly-form. It's much better to compose things together than to have global options. Anyone want to provide an example of this?\n. Duplicate of #643\n. A wrapper without defined `name` or `type` will be set as the `default` template. This could probably be made more clear in [the docs](http://docs.angular-formly.com/docs/formlyconfig#setwrapper)\n\n> You can have a default (used by all templates), named template wrappers, and typed template wrappers (used by fields with the specified type)\n\nIf you give the first wrapper a name, or `types`, you'll see this behavior is corrected: https://jsbin.com/tafiwa/edit?html,js,output\n\nIn the future, please ask questions in the chat: http://chat.angular-formly.com thanks!\n. Just realized that perhaps you didn't ask this in the chat because you legitimately thought it was a bug. Thanks for the reproducible example! That made it much easier to help you :sparkles: \n. LGTM, could I have someone else review and merge this? Ping @formly-js/angular-formly-collaborators\n. Thanks @kwypchlo!\n\n![giphy](https://cloud.githubusercontent.com/assets/1500684/13674615/0d155626-e693-11e5-84fe-1b87244a44a7.gif)\n. Have you tried https://www.npmjs.com/package/next-update\n. Any idea why the build is busted? Looks like a shell issue? Maybe related to the quotes you removed? Maybe we should do escaped double quotes?\n. Thanks @BarryThePenguin!\n. Hi @dariusjb and @maxime-beguin,\n\nThanks for reporting this. It needs more investigation and possibly a fix.\n\n> Could anyone provide a fix, please?\n\nThis is a community project, you could [makeapullrequest.com](http://makeapullrequest.com) or [add a bounty](https://www.bountysource.com/) on this issue to motivate someone else to do so.\n. Thanks for your interest in angular-formly. The best way to get help is by following the instructions at [help.angular-formly.com](http://help.angular-formly.com). The GitHub issues on this project are reserved for feature requests and bug reports, so I'm going to close this issue. See you on [chat](http://chat.angular-formly.com) and [Stack Overflow](http://question.angular-formly.com/)!\n. Could you check back in an hour or so? I think [RawGit is having trouble](https://twitter.com/kentcdodds/status/710840929226084352)...\n. [fixed](https://twitter.com/rawgit/status/710855413734854656)\n. This looks good to me. Thanks @tuxtina! Once the build passes, if someone else wants to review and hit the merge button that'd be great.\n. I would prefer to explicitly check for `undefined` as well :+1:\n. LGTM! Would like to get another reviewer on this though.\n. This should probably be updated if we want it merged. Things have changed quite a bit since March 19th, 2016....\n. This looks just fine :+1:\n. I'd still like someone else who actually uses the library still to review and merge this though.\n. I am, but would love to give some other people access.\n. I think this looks good. Could you [update the commit message](https://help.github.com/articles/changing-a-commit-message/) so the subject isn't so long?\n\nI'll let someone else merge this once you've done that. Thanks!\n. LGTM! Thanks!\n. You should hide your form behind  `ng-if=\"vm.fields.length\"` which will prevent Angular from compiling the form until your fields have loaded.\n. Yeah, adding fields dynamically isn't well supported. Best to have them all at compile time and hide the ones that shouldn't be showing.\n. If this is really part of the specification, it's odd and unexpected. In formly we often do things that abstract away the unexpected parts of the specification. So I think a PR to abstract this away would be acceptable. My thinking is to add a hidden field if there's only one field in `fields`. Could easily accomplish this in the `formly-form` template right above [this line](https://github.com/formly-js/angular-formly/blob/3bd8ec0035e05a89cde16ad9493b15b7beb04c18/src/directives/formly-form.js#L54):\n\n``` html\n<input type=\"hidden\" ng-if=\"fields.length === 1\" />\n```\n\nI'm thinking that should do it. Any pull request should accompany tests. [makeapullrequest.com](http://makeapullrequest.com) :-)\n. Hmmm... I suppose that this might be expected behavior on the part of users. Maybe it's better for the developer to be explicit about how they solve this problem rather than just doing it ourselves.\n. Actually, I'm pretty confident that the API for formly is already too big. You could easily accomplish this with a field transform: https://jsbin.com/yinuda/edit?js,output\n\n``` javascript\napp.run(function(formlyConfig) {\n  formlyConfig.extras.fieldTransform.push(fieldTransform)\n\n  function fieldTransform(fields) {\n    return fields.concat({\n      type: 'input',\n      templateOptions: {\n        type: 'hidden'\n      },\n      hideExpression: 'fields.length !== 2' // where 2 === this one plus one another.\n    })\n  }\n})\n```\n. If you'd like, you can create a plugin for this and I'll add it to [the plugins list](http://docs.angular-formly.com/page/plugins)\n. Hi @seibs! Thanks for the PR! This looks great to me, could I have someone from @formly-js/angular-formly-collaborators or @formly-js/angular-formly-collaborators-read review this as well?\n. @immortalcy, actually, if you look at the implementation of the example above, it allows you to specify the `ngOptions` at the field level, and actually you can specify the `ngOptions` attribute for a specific field using `ngModelAttrs` as well. I think that's the generic solution you're looking for...\n. Hi @xphong, I'm not seeing the same thing you are. You can see it working here: https://jsbin.com/bivoxoz/edit?html,js,output\n\nCould you please reproduce your issue using [issue.angular-formly.com](http://issue.angular-formly.com/)? It will help us determine what exactly the problem is that you're describing and how it could be fixed. Thanks!\n. I would not recommend this change be made.\n. This is great. Thanks for working on it. Any other reviewers wanna pitch in here? Should probably get at least one other.\n. :clap:\n. LGTM! I'll let someone from @formly-js/angular-formly-collaborators-read give the thumbs up and someone from @formly-js/angular-formly-collaborators merge the PR.\n. Agreed. We could make that a breaking change in a future release.\n. Could someone from @angular-formly-collaborators review and merge this?. Sorry, bad @ mention. Someone from @formly-js/angular-formly-collaborators please review and merge this. Thanks.. I don't maintain this library anymore, but I should say that you'll definitely want to look at the production tips here: http://docs.angular-formly.com/docs/tips\r\n\r\nIt will definitely be slow if you don't do those things.. Good luck.. I have developed a work around for my own project that does this. The basic idea is that you make directives out of all of your templates. Then you have another template that simply uses those directives and has something like this for it's options:\n\n``` javascript\n{\n  type: 'grouped-field',\n  data: {\n    fields: [\n      {\n        type: 'text',\n        label: 'First Name'\n      },\n      {\n        type: 'text',\n        label: 'Last Name'\n      }\n    ]\n  }\n}\n```\n\nThen, in the template for `grouped-field` you simply use the directives for the type you pass in and pass the options specified in `data.fields` Does that make sense?\n. I use a directive for double input:\n\naz-double-input.js\n\n``` javascript\n(function() {\n  'use strict';\n\n  angular.module('atac.common').directive('azDoubleInput', azDoubleInput);\n\n  function azDoubleInput(COMMON_DIRECTIVES) {\n    return {\n      restrict: 'E',\n      templateUrl: COMMON_DIRECTIVES + 'component/az-double-input.html',\n      scope: {\n        options: '=',\n        formId: '=',\n        index: '=',\n        result: '=',\n        form: '='\n      }\n    };\n  }\n})();\n```\n\naz-double-input.html\n\n``` html\n<div class=\"row\">\n  <az-formly-label></az-formly-label>\n  <div class=\"col-md-3\" style=\"padding:0 7px 0 0\">\n    <az-formly-input options=\"options.data.leftField\" result=\"result\" index=\"index\" form-id=\"formId\" form=\"form\"></az-formly-input>\n  </div>\n  <div class=\"col-md-3\" style=\"padding:0 0 0 7px\">\n    <az-formly-input options=\"options.data.rightField\" result=\"result\" index=\"index\" form-id=\"formId\" form=\"form\"></az-formly-input>\n  </div>\n</div>\n```\n\nWhere `az-formly-input` is the label-less directive version of my formly input template\n\nThe config uses `template` instead of type so I can use the directive (could easily turn this into a formly template via `setTemplate(...)`)\n\n``` javascript\n{\n  template: [\n    '<az-double-input options=\"options\" form-id=\"formId\" index=\"index\" result=\"result\" form=\"form\">',\n    '</az-double-input>'\n  ].join('')\n  data: {\n    leftField: {\n      key: 'firstName',\n      placeholder: 'First Name',\n      required: true\n    },\n    rightField: {\n      key: 'firstName',\n      placeholder: 'First Name',\n      required: true\n    }\n  }\n}\n```\n\nNote, some of the stuff you see in there (like `form`) are part of an abstraction I've added on top of formly that make my life easier. I'm hoping to take the work I've done in my own project and integrate it with formly before too long.\n. @vptcnt and @astrism, I'm going to go ahead and close this issue. If you think it's unresolved, please feel free to open it again and we can talk about what we're lacking.\n. In 0.1.0, we've removed the submit button from the form template entirely. This will not be supported.\n. How difficult would it be to add a `template` field as well? So it doesn't have to be in a whole other file?\n. I'm looking into it and I'm not sure of the best approach to take.\n\n~~I'm thinking that it would be best to add an `ng-hide=\"field.hide\"` to the `<formly-field ng-repeat...` in the `formly-form` template. Then, in the `formly-form` controller, when initializing the scope, iterate through the fields and add a `hide` property and add a watcher to the scope for each of the hide expressions. When that watch listener fires, set the `field.hide` property to the value of the expression.~~\n\n~~The trouble I'm having now is: How do we get the scope to evaluate the expression on (watch the expression). I've thought about adding it as another property to the `formField` but passing scopes around just feels wrong.~~\n\nJust came up with a much better simpler implementation. Prepare for a pull request...\n. Will get to this after the weekend. Thanks!\n- Kent C. Dodds\n  Sent from my mobile device, please forgive any errors or brevity. (I may\n  have used speech to text...)\n  On May 31, 2014 11:21 PM, \"Grant Helton\" notifications@github.com wrote:\n\n> This looks great, do you mind updating the newly minted docs as well.\n> Thanks!\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/nimbly/angular-formly/pull/17#issuecomment-44767982.\n. @astrism I need to run the build and commit those files as well correct?\n. Alright my changes are in, complete with updated README, bower version, CHANGELOG, and demo. Thanks!\n\nPerhaps eventually we could make it as simple as what I wanted to do (as illustrated by #16)...\n. I just found a better solution. Let me make another pull request and we can talk about it. It actually enables both options so I'll probably just include it in this PR. Give me just a second...\n. @astrism, let me know if you have any questions. But this seems to work quite nicely\n. Just throwing this out there... Would it be more performant if we put an `ng-change` on the `formly-field` directive? This way the watch listener is only executed when a change occurred and the watch expression is not evaluated.\n\nEither way, I don't see a way of getting around a dynamic form definition without doing things this way. And I imagine if this goes the direction you're wanting it to, you're going to have to loop through each field every time the result changes anyway. I think the solution you have above would work well... Let me know if you want me to change my pull request to reflect this.\n. @astrism, I would really love it if we could figure out what needs to happen for this to get merged today. I have another PR I'm creating in a little bit that I would like in, but I don't want to update the changelog for it because we'd have a merge conflict with this PR. Let me know what I need to do to get this in.\n. Nevermind on the grunt build merge conflict. I just remembered I didn't run grunt build because I didn't want to have merge conflicts :-) asap on these though please :-) Thanks!\n. Whoops. Accidentally closed this.\n\nI rebased master. Not sure if that's how I should have done this, may have been better to merge it. Anyway, if I need to recreate this whole pull request that's fine, let me know what I need to do to get this into the main repo and get the 0.0.10 tag on after this is merged in. Thanks!\n. Thanks @astrism :-)\n\nWould love some feedback from you. I've done a few PRs in the past, but I'd love to know if there's anything I can do to make this process easier for repo owners. Any feedback for me?\n. :+1: \n. :+1:\n. There are a few ways that you could implement it. You wouldn't be able to use any of the built in types. But you could add your own type with the `formlyTemplateProvider`'s [`setTemplateUrl`](https://github.com/nimbly/angular-formly#settemplateurl) function.\n\nHow I have implemented this kind of thing though is using the [`template`](https://github.com/nimbly/angular-formly#template-string) property. You create your own directive with the template of that directive being what you want the field to be. It has access to the options and value properties used in the other templates. And then in the directive's link function you can add functionality (like auto-complete). For example:\n\n``` javascript\nvar formFields = {\n  key: 'something',\n  template: '<some-awesome-directive></some-awesome-directive>'\n};\n\napp.directive('someAwesomeDirective', function() {\n  return {\n    template: '<div><!-- formly templatey stuff --></div>',\n    link: function(scope, el, attrs) {\n      scope.functionality = function() {\n        // do something awesome\n      }\n    }\n  };\n});\n```\n. I agree that getting `ngMessages` in would be cool. But I would be wary about including it because it's only supported in angular 1.3-beta right now (if I'm not mistaken). If support is added, it would probably be good to make it optional...\n. Thanks for the work on it. However I think that you're doing a lot of work unnecessarily. You have access to the `$error` property of the form fields via `options.formField.$error` in the template. Also, we want to make sure this is an opt-in thing because many people wont have the luxury of being on angular 1.3, so we need to make sure that it can work without the messages on the page.\n\nAnd one other thing, please make sure that your whitespace is following our project standard. Please use tabs (I know, I hate tabs too, but we need consistency). Thanks again for taking a stab at this!\n. Looks like you're doing that bit alright, but @astrism also asks that we tab and then space forward on continuation lines. It's @astrism's styleguide, I can't remember when I saw him specify that, but the rest of our project looks like it. If you want a sample, see [this line](https://github.com/idbaigorria/angular-formly/compare/nimbly:master...master#diff-b7832274c0b8f3a3397c1d9d613f1977L7).\n. Try this:\n\n``` javascript\nangular.element(document.getElementById('formlytext0')).scope().options.formField\n```\n\nIt works for me on [the demo](http://nimbly.github.io/angular-formly).\n. Really? Huh... Interested to see your PR! Thanks!\n. @abodacs, we haven't done any work to integrate the `ngMessages` module into formly core. But with where we are now, I don't believe it would make sense for it to go into the core project. It would make more sense for it to go into the template modules.\n\nI think that we're hoping to create a css framework agnostic module that would be for common template utilities and components. Integration with `ngMessages` would likely fit in well with something like that.\n. This is definitely a template-specific item. If you want support for `ngMessages` you'll need to implement templates that make use of them (using the `options.formControl` that formly adds to your template's scope) or submit a PR to the template library that you're using.\n. I'm interested in this as well...\n. +1, I don't have a use case because all of my stuff is custom templates, but I can definitely see people wanting this if they're using Bootstrap.\n. Where do you think this would be best implemented? Should there be another provider called `formlyConfigProvider` and have two providers to configure formly (`formlyTemplateProvider` as well)? Or should we combine these config options into a single `formlyConfigProvider`?\n\nI'm sad that the decision was made to create the `formlyTemplateProvider` instead of having it be more generically `formlyProvider`. Because now if we want to combine them, it's a breaking change... I'm probably the only one using the `formlyTemplateProvider` at this point though so that's probably fine... I'd like to hear your thoughts. I plan on implementing this today...\n. I'm implementing this now with a `formlyOptionsProvider`. It doesn't seem too bad...\n. @astrism, this is now closed, but you need to run the build to get the dist folder up to date...\n. Note: I didn't grunt build, so you'll have to do that yourself before you tag (if you tag at this commit)\n. As I was using this in my project, I noticed that if I didn't provide options, angular got angry at me, but now that I can configure all formly forms to have the options I want I no longer need the options attribute.\n. @astrism any word on this? I have another PR I'm getting ready to do and I want to be able to use master on my fork to do it...\n. Now that I think about it, it doesn't have anything to do with this one, I may submit it before. Thanks.\n. Fixed @astrism. Thanks!\n. +1 to this. Perhaps I'll create a PR (If you don't first @delaman ;D)\n. @astrism, I would recommend closing this issue. It's solved with the [`template` property](https://github.com/nimbly/angular-formly#template-string). Though we could enhance the [`formlyTemplateProvider`](https://github.com/nimbly/angular-formly#formlytemplateprovider) to have a `setTemplate` as well as a `setTemplateUrl`...\n. I've never used browserify, but I'm a node user and I'm curious how to make the library any more \"node friendly\" when everything is just inside an angular call (other than getting it registered in npm). Can't you simply: `require('angular-formly')` and the code would run? We don't have to have a `module.exports` if we're not exporting anything right?\n. Awesome. Well, I think this is one thing that we'll have to leave to the nimbly folks... It's their repo after all... @astrism? :+1: \n. @astrism, I think this is something you'll want to do yourself. You'll want to create the package.json the way you want (authors/desc/etc.) and then you'll want to be the one to publish it so you can be the one to republish it...\n. I think you'd want to just make your own templates for that. I don't think\nit is part of the mission of this library to cover every edge case. Just to\nmake those cases possible...\n- Kent C. Dodds\n  Sent from my mobile device, please forgive any errors or brevity. (I may\n  have used speech to text...)\n  On Jun 22, 2014 10:06 AM, \"testuserx\" notifications@github.com wrote:\n\n> Is there any possibility to style the \"formly\", for example to two columns\n> (each \"formly-field\" into separate \"td\")?\n> \n> This plugin is awesome, thank you!\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/nimbly/angular-formly/issues/36.\n. I'm not certain I understand what you're trying to accomplish...\n- Kent C. Dodds\n  Sent from my mobile device, please forgive any errors or brevity. (I may\n  have used speech to text...)\n  On Jun 22, 2014 11:01 AM, \"testuserx\" notifications@github.com wrote:\n\n> Of course, not :) I am just wondering how to style entire form. There is\n> possibility to style each element, using \"template\" or \"templateUrl\" in\n> JSON data, but no possibility to template entire form.\n> \n> If there are no built-in templating for entire form, how could it be\n> achieved? Thank you!\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/nimbly/angular-formly/issues/36#issuecomment-46786378\n> .\n. You could always make each of those columns it's own form. I've done the\nsame thing.\n- Kent C. Dodds\n  Sent from my mobile device, please forgive any errors or brevity. (I may\n  have used speech to text...)\n  On Jun 22, 2014 12:20 PM, \"testuserx\" notifications@github.com wrote:\n\n> I am creating JSON data with, for example, 10 fields. All these fields is\n> showing correctly one by one. Now I want to style position of these fields.\n> For example, show them in two columns. For example:\n> http://www.wpsnippet.com/wp-content/uploads/2012/02/form-after.png\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/nimbly/angular-formly/issues/36#issuecomment-46788447\n> .\n. With the current implementation this could be difficult. I think the simplest way to do this would be to change the `formly-form` template from an html file to a string returned by the `template` function in the `formly-form` directive. This would allow conditionally setting the attribute ng-hide or ng-if. I think this would be reasonable.\n. @astrism, I like all of the things you said. I'm not certain whether removing ng-hide would cause adverse impacts on people or not... But it seems to work fine in the demo.\n\nI also think we should keep it in an html file. But I don't know how to configure a specific form to have one directive (ng-if) and another to have another (ng-hide) without having two templates that are almost exact duplicates... I'd definitely get behind this effort.\n. What will have to happen for this is we'll have to store the configured default options in local storage like we do the custom templates thing if we want it to be customizable....\n. This would be a breaking change because anyone who uses a custom template would have to update their template's ng-model (for example).\n. Hmmm... Looking at it now I'm not certain of the best way to go about it. I'm thinking that it would be a diversion from how things currently work a little bit. Right now we just have a `result` object with all the values hanging off of it. If we were to do a `valueHolder` then we'd have to keep the `result.value` and the `valueHolder.value` in sync.\n\nOne thing that we could do that may not be a bad way to go about it would be to pass the result itself into the field directive. That may actually be extremely valuable and would be extremely simply to do... I may look into doing that. I'll submit a PR @astrism...\n. Not `result.value` but `result[options.key]` would work.\n. Moved this comment to #68 \n. I don't understand your question....\n. You could always `$watch` properties on the `result` object.\n\nHowever, I would recommend making your own template called `password-match` or something that would have two fields in it and set `value` to the password's value when they match. This way you can have more control over validation etc. Feel free to check out how I do field matching validation: http://kent.doddsfamily.us/kcd-angular/#/kcd-input-match (copied below)\n\n# kcd-input-match directive\n\n## Docs\n\nUseful for password and password confirmation input fields. Use like so:\n\n``` html\n<input ng-model=\"password\" type=\"password\" placeholder=\"Your password\">\n<input pk-input-match=\"{{password}}\" ng-model=\"password2\" type=\"password\" placeholder=\"Your password again (just in case)\">\n```\n\nThis will set the field's $error.match property to whether it matches the given value or not.\n\n## Code\n\n``` javascript\nangular.module('kcd.directives').directive('kcdInputMatch', function() {\n  'use strict';\n  return {\n    require: 'ngModel',\n    restrict: 'A',\n    link: function(scope, elem, attrs, ctrl) {\n      scope.$watch(function() {\n        return attrs.kcdInputMatch === ctrl.$modelValue;\n      }, function(currentValue) {\n        ctrl.$setValidity('match', currentValue);\n      });\n    }\n  };\n});\n```\n. I can't think of a way to make the built in templates generic enough to account for all the different ways to do i18n. I think if you rely on the template to do your i18n for you (through a filter for example) then you'll have to make your own templates. You can easily override the built in templates using the formlyTemplateProvider. See the readme.\n\nNote, another (more performant) option is to use the $filter service to generate your i18n strings and pass the label and placeholder through that when initializing the formly form. You wouldn't need to change the built in templates with this option.\n. It's available on the 0.0.12 branch. It's not yet released and the documentation for it should probably be in the 0.0.12 branch... You can point to [the most recent commit](https://github.com/nimbly/angular-formly/commit/cb3c8fc672b7ac46abc3a28f5dd37836c953f280).\n. @ilyagelman, is this working for you now?\n. :+1: that would be convenient. Would be a pretty simple PR if you want to try to take a whack at it. Just edit this file: `src/directives/formly-field-select.html` and make sure to follow the development [instructions](https://github.com/nimbly/angular-formly#development).\n. @inalgnu, where did you get on this?\n. Closing as it doesn't have anything to do with formly core anymore and I personally would just use `validators` for this anyway :-)\n. I can think of a way to get around this limitation, but I think a more appropriate solution would require a PR.\n\nWhat I'm thinking is in the [formly-field.js](https://github.com/nimbly/angular-formly/blob/master/src/directives/formly-field.js) we add a scope variable called `formResult` and in [formly-form.html](https://github.com/nimbly/angular-formly/blob/master/src/directives/formly-form.html) we pass the `result` object in as an argument. This way, all templates would have access to the whole form via the `formResult` variable on the scope. This would give field templates a lot more power.\n\nWhat do you think @astrism?\n. @gizmoboy this will be possible with #62. I was waiting on @astrism to review it, but I guess that's why he gave me commit privileges. I'll merge it now... merged... but it's still @astrism's responsibility to rebuild the project and publish it to npm and bower. However, you ought to be able to test it out by pointing to [this commit](https://github.com/nimbly/angular-formly/commit/2d8e76ea1636e8f2ff84cea03a9ac662b5a0d0f5) and using the non-built version of the js files. I'll leave this open until @astrism has a chance to rebuild and publish.\n. For some reason I am unable to claim the bounty on the website. Do you need to do something on your end?\n. I have merged this and run the build. Once it's published you can use a version, but until then you can point to [this commit](https://github.com/nimbly/angular-formly/commit/0241d1c13c11b9d723906482d6d7c1c1927c8170) and it should work just fine for you.\n. If I understand your use case correctly, then this is possible if you use the result object in your template. I'll have to play around with it, but we may need to update all templates to bind to the result rather than simply the value. That would be another issue altogether. I'll look into it and let you know...\n. Looking at your question again, I think I misunderstood the use case. Could you give me an example of what you're actually trying to accomplish?\n\nI [updated the demo](https://github.com/nimbly/angular-formly/commit/83474492b1b6569990bdc805210a19633d16d5b5) to use the results of one field in the template of another. You can see how this looks on [the demo](http://nimbly.github.io/angular-formly). Enter anything into the \"first name\" field and see how that is bound to the custom template field below. But, again, I don't think this is what you were going for...\n. So this is something that I did on a personal project. I used the same form for creating a post (for example) as I did for editing one. It's quite simple. Instead of using `default` you simply set the `result` object that you pass into fromly to have the values of your model. The `default` only takes effect when the `result` has no value. So, you probably have something like this:\n\n``` html\n<formly-form result=\"formData\" fields=\"formFields\" options=\"formOptions\" ng-submit=\"onSubmit()\"></formly-form>\n```\n\n``` javascript\n$scope.formData = {};\n$scope.formFields = [\n  {\n    key: 'firstName',\n    default: 'Kent C.',\n    type: 'text'\n  },\n  {\n    key: 'lastName',\n    default: 'Dodds',\n    type: 'text'\n  }\n];\n```\n\nInstead, what you want to do is:\n\n``` javascript\n$scope.formData = {\n  firstName: 'Kent C.',\n  lastName: 'Dodds'\n};\n$scope.formFields = [\n  {\n    key: 'firstName',\n    type: 'text'\n  },\n  {\n    key: 'lastName',\n    type: 'text'\n  }\n];\n```\n\nSo, instead of using the default, set the value of the result you pass in. Does that help?\n. Hmmm... On the top of my head I thought that would do it... Do they not? We may need to have a directive for selects to manage initial values like this then... I've been considering making a place for directive templates like this for use cases like this as well as the button group.\n. Why don't you create a new issue as this is different and this issue is closed. This will take a little work, but I'm pretty sure I know how I would implement it.\n. Why don't you create the issue, put $50 on it, then I'll look into it and suggest more if I feel like it'll take more time...\n. Duplicated here #121 \n. The repo exists. Just need to create the templates, build, and release. Moving discussion to [the repo](https://github.com/formly-js/angular-formly-templates-ionic)\n. Seems reasonable. I'd say we'd want to have another output file that ended in `no-tpls`, what do you think?\n\nEventually, there could be a use case to support templates for more than just bootstrap. We could do style-it-yourself templates where we add some classes to allow customizability, and we could have pure.css templates, and I'm sure there are more. But if we separated these out into their own folders, it would encourage the community to contribute templates for their favorite css libraries. Each of these libraries could have its own build. To do that right, I think that we'd have a breaking change to default to the no templates output and then a `{library}-tpls` file for each template type. What do you think?\n. Oh, that's interesting. Must have missed seeing that release. Cool. I like that even better actually. have formly.js include the templates, then have a formly.none.js, a formly.bootstrap.js, formly.pure.js, etc. etc.\n. Fixed with b962dd26a68c70c8e9d51f1f9a995d84b405e02e\n. Wow, this is awesome a11y for the win! I noticed that the formatting of some of the files is a little off. Could you fix that before it's merged in? Thanks for doing this!\n. Looks perfect. Thanks again for doing this @jonespen. Hopefully someone will merge this soon (I'm just a community contributor, so I can't merge it myself).\n. Could you give more details? What do you do that causes this error?\n. I wrote the code responsible for this bug most likely. I'll try to get to\nit as soon as I am able.\n- Kent C. Dodds\n  Sent from my mobile device, please forgive any errors or brevity. (I may\n  have used speech to text...)\n  On Aug 5, 2014 10:02 PM, \"rajhans84\" notifications@github.com wrote:\n\n> I have just added a form on my page and fields to it. App has following:\n> app =angular.module('myapp', ['ui.bootstrap',\n> 'ui.router','ngDialog','ngSanitize','angular-loading-bar','formly']);\n> $scope.formAddressFields =[{\n> template:\"\n> \n> ## Address +\n> \n> \",\n> key: \"address_begin\",\n> disabled: true\n> },\n> {\n> key: 'addresss-flatnumber',\n> type: 'text',\n> id:\"addresss-flatnumber\",\n> label: 'Flat Number',\n> required: false,\n> disabled: false,\n> hideExpression:'!asid',\n> watch: {\n> expression: function(field){return\n> scope.data.result.account.serviceLocation.streetSuffix;},\n> listener: function(field, _new) {\n> field.default = _new;\n> }\n> }\n> },\n> {\n> key: 'addresss-streetnumber',\n> type: 'text',\n> id:\"addresss-streetnumber\",\n> label: 'Street Number',\n> required: false,\n> disabled: false,\n> watch: {\n> expression: function(field){return\n> scope.data.result.account.serviceLocation.streetNumber;},\n> listener: function(field, _new) {\n> field.default = _new;\n> }\n> }\n> },\n> {\n> key: 'addresss-streetname',\n> type: 'text',\n> label: 'Street Name',\n> required: false,\n> disabled: false,\n> hideExpression:'!service_type',\n> watch: {\n> expression: function(field){return\n> scope.data.result.account.serviceLocation.streetName;},\n> listener: function(field, _new) {\n> field.default = _new;\n> }\n> }\n> },\n> {\n> key: 'addresss-streettype',\n> type: 'text',\n> label: 'Street Type',\n> required: false,\n> disabled: false,\n> \n> ```\n>     watch: {\n>         expression: function(field){return scope.data.result.account.serviceLocation.streetType;},\n>         listener: function(field, _new) {\n>             field.default = _new;\n>         }\n>     }\n> },\n> {\n>     key: 'addresss-leveltype',\n>     type: 'text',\n>     label: 'Level Type',\n>     required: false,\n>     disabled: false,\n>     watch: {\n>         expression: function(field){return scope.data.result.account.serviceLocation.buildingFloor;},\n>         listener: function(field, _new) {\n>             field.default = _new;\n>         }\n>     }\n> },\n> {\n>     key: 'addresss-buildingname',\n>     type: 'text',\n>     label: 'Building Name',\n>     required: false,\n>     disabled: false,\n>     watch: {\n>         expression: function(field){return scope.data.result.account.serviceLocation.buildingName;},\n>         listener: function(field, _new) {\n>             field.default = _new;\n>         }\n>     }\n> },\n> {\n>     key: 'addresss-suburb',\n>     type: 'text',\n>     label: 'Suburb',\n>     required: false,\n>     disabled: false,\n>     watch: {\n>         expression: function(field){return scope.data.result.account.serviceLocation.suburb;},\n>         listener: function(field, _new) {\n>             field.default = _new;\n>         }\n>     }\n> },\n> {\n>     key: 'addresss-city',\n>     type: 'text',\n>     label: 'City',\n>     required: false,\n>     disabled: false,\n>     watch: {\n>         expression: function(field){return scope.data.result.account.serviceLocation.city;},\n>         listener: function(field, _new) {\n>             field.default = _new;\n>         }\n>     }\n> },\n> {\n>     key: 'addresss-sitedirections',\n>     type: 'text',\n>     label: 'Site Directions',\n>     required: false,\n>     disabled: false,\n>     watch: {\n>         expression: function(field){return scope.data.result.account.serviceLocation.direction;},\n>         listener: function(field, _new) {\n>             field.default = _new;\n>         }\n>     }\n> },\n> {\n>     key: 'addresss-siteinstructions',\n>     type: 'text',\n>     label: 'Site Instructions',\n>     required: false,\n>     disabled: false\n> },\n> {\n>     key: 'addresss-sitewarnings',\n>     type: 'text',\n>     label: 'Site Warnings',\n>     required: false,\n>     disabled: false\n> }];\n> ```\n> \n> $scope.AddressOptions = {\n> uniqueFormId: 'address-section',\n> hideSubmit: true,\n> submitCopy: ''\n> };\n> $scope.formData = {};\n> Included file:\n> \n> But I can see the same error is coming on the demo page of the module :\n> http://nimbly.github.io/angular-formly/\n> I am using this form on ngDialog and when the dialog opens and tries to\n> render the form, the error comes.\n> I am doing nothing fancy but the simple stuff to get it working. I am\n> using firefox 31.0 on mac.\n> Let me know if more info is required.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/nimbly/angular-formly/issues/55#issuecomment-51291402\n> .\n. I think I have a solution, but I can't seem to reproduce the problem. But judging from the error message you're getting, I'd say that the issue is somehow a field has a watch object with no listener object. We should check that both an expression and listener are present on the watch object before creating the watch. I should have a fix soon, but I'm not certain how this issue is even happening...\n. Sorry, been off the planet for a day. @Rechtsproducten, what you did is how formly is designed to work actually. If you need functionality for your template beyond basic angular template stuff, then you simply create a directive. I actually generally will just us the `template` property for the formly config, but creating its own type works perfectly well also. Glad you got it working. If you like, I would love it if you could add a wiki article with how you solved the problem. That could help people in the future. Thanks a ton!\n. Interesting... If I go to [the demo](http://nimbly.github.io/angular-formly), it looks like radios are actually working as you expect it should, but the select is not...\n\n![screen shot 2014-08-12 at 11 38 55 am](https://cloud.githubusercontent.com/assets/1500684/3894786/2793d984-2248-11e4-94e2-41893788fa54.png)\n. Looks good to me. Thanks for doing this! @astrism will be in charge of updating the bower/npm packages.\n. Of course. I was worried about this when we broke out the templates, but I don't think there's really anything we can do about that... Thanks!\n. @gizmoboy, I've actually implemented a few of these custom templates for my own projects so I might be able to help with some of this. Some of these would definitely make sense in the library itself. Here's what I would recommend:\n\nCreate an issue for every feature you want in the library (non-proprietary stuff). Then use https://www.bountysource.com/ to place a bounty on the issue. Then anyone in the community can take it up if they want to piecemeal and I imagine you'll get most of the things you want pretty quickly.\n\nWhat do you think?\n. How important is the actual implementation you've described. Because what you've described may not necessarily be the exact best solution for what you're trying to accomplish based on what the library can do currently. Here's what I expect you need (implementation details aside):\n- A way to have a button bar with an option of single and multi-select\n- The value to indicate selection\n\nIs there more than this that you actually need?\n\nHere's my expected implementation:\n\nI'll definitely need to create a directive to handle this. Unfortunately a simple template wont be able to handle this well. Here's the interface for a `buttonbar`.\n\n``` javascript\n{\n    \"key\": \"triedEmber\",\n    \"type\": \"buttonbar\",\n    \"selectStyle\": \"SEE_BELOW\",\n    \"label\": \"Have you tried EmberJs yet?\",\n    \"default\": \"SEE_BELOW\",\n    \"options\": [\n        {\n            \"name\": \"Yes, and I love it!\",\n            \"value\": \"yesyes\"\n        },\n        {\n            \"name\": \"Yes, but I'm not a fan...\",\n            \"value\": \"yesno\"\n        },\n        {\n            \"name\": \"Nope\",\n            \"value\": \"no\"\n        }\n    ]\n}\n```\n\nThe `selectStyle` could be either `'single'` or `'multiple'`. This would determine what would be set as the value: a boolean for multiple with one options, an object for multiple with more than one option (where the keys are the property names and the value is true/false), and a single value for a single (which would be the value property of the option selected).\n\nThe `default` would simply be the initial value and the directive would handle converting that into what the view needs. If the result object provided already has a value, this default will be ignored.\n\nI think what I've described (including the implementation) is actually pretty well what you described, though we're not going to bring in a dependency on AngularStrap (partially because I'm not a fan of that particular library, and partially because I want to keep our dependencies down). Let me know if this isn't what you're looking for asap because I think I'm going to start working on this now...\n. Actually, I'm going to denote the `type` as `'buttongroup'` as this is what bootstrap calls it.\n. @gizmoboy, as this is going to take a little more time than expected and I don't have a use case for it myself, I've upped the bounty to where I think I would personally be sufficiently motivated to add this feature. Let me know if that works for you and I'll get into implementing it.\n. This has been added. You can see it in the demo in the form of a checkbox above the email field: http://nimbly.github.io/angular-formly\n. Would really like to seek out @astrism's guidance on this one. This is not possible without using some javascript whether it be bootstrap, Angular-UI Bootstrap, or AngularStrap.\n\nPersonally, I'd say we'd want to do a pure bootstrap implementation so we don't tie people down to angular-ui bootstrap or AngularStrap. However, in all of my personal projects, I don't even include bootstrap's javascript, I just use Angular-UI Bootstrap...\n\nAnother solution would be to implement it with both Angular-UI Bootstrap and AngularStrap and allow it to be configurable. Unfortunately, the directives for each library are slightly different so we'd have to have an additional template for each small variation... Though we could always try for either an ng-include or a directive for each template where the template property is a function that returns a configured template (between the two I like the later option)...\n\nLet me know what you think @astrism, but either way, without a use case of my own for this, and with the effort it would take to implement (however that's done) I don't think I'd have the time to do it at the current bounty...\n. I'm not certain that it's necessary to remove value entirely. I would recommend that people use the 'result[options.key]' for custom templates just to avoid isolateScope issues, but the templates we have currently work just fine using the value property. Is there a problem I'm unaware of? No reason to change it if it's working fine and logically...\n. :+1: \n. Everything that I've committed is good to go. I haven't noticed anything wrong with the demo. I think we're good to go. One thing I would say we should add to this project is a full test suite... That would be a bit of an effort. But it should be done.\n. I'd be happy to scaffold our test suite. I don't think that I have the time or use case to justify working on this effort a lot, but I could get us off the ground.\n. Hey @astrism, I'm planning on moving things around a little bit. I think it'll be really good. But I don't want to have merge conflicts. Are you planning on making any changes? I'd rather wait until after 0.0.15 and work off of that release to move all this stuff. When is that going to happen?\n. I'm going to create a test directory with a symbiotic link to src. I'm going move all the demo related stuff to a demo folder with a symbiotic to src. Annnnd... Yeah, that's it.\n. I've got a few minutes to look at it now. I'll look into it.\n. Someone recently made a change to that expression... Let me find their PR. I merged it. I guess I didn't test it well enough. Another case for tests ;-)\n. Yeah, it was #61. Is that what broke us?\n. I would say +1 on not using \"default\". May consider removing that @astrism... People should just load the `formlyData` with the default values in my opinion.\n. I was looking into it and found that it was a little simpler than I had originally supposed, so I fixed the demo example and removed the default option. You should be able to setup the form data for a select. Let me know if you have trouble.\n. I'm not sure how that could be happening. If you could make a jsbin to\nreproduce the issue, then I could help more.\n- Kent C. Dodds\n  Sent from my mobile device, please forgive any errors or brevity. (I may\n  have used speech to text...)\n  On Aug 29, 2014 4:00 PM, \"gizmoboy\" notifications@github.com wrote:\n\n> We're seeing some unusual behavior after this fix; we're passing in name\n> and value for our selects, and values seem to be getting replaced with\n> ordinal numbers. Is there a demo of how we should be setting the starting\n> value? Perhaps we're \"holding it wrong.\"\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/nimbly/angular-formly/issues/71#issuecomment-53935006\n> .\n. Whoops, because the symlink was called `bower_components` it was ignored via the `.gitignore`. I think I'm going to remove that from the git ignore. Another option would be to name the symlink different, but then it's a little confusing. Want to use the symlink so we can symlink the bower_components in the test directory as well...\n\nAnyway, what do you think about removing `bower_components` from the `.gitignore`?\n. Actually, I want to keep the `bower_components` out of the `src` directory because they're more like vendor files than part of our source. Let me know if you disagree. But I think what I'll do is I'll change the place bower installs components to `ignored_bower_components` and we'll ignore that directory, then we'll create a symlink in the `demo` folder called `bower_components` that points to `ignored_bower_components`. How does that sound?\n. Sorry, having them in src was a mistake (part of why you were unable to run the demo). I'm about to commit my proposed change, let me know what you think of it...\n. @astrism, I just updated the dependencies. Feel free to check it out and merge it. I'm going to go home and may look at it later tonight. Let me know if you have any problems with what I've done. You may want to look at the build...\n. @astrism looks like you have to setup travis-ci on this because I don't have admin access: https://travis-ci.org/profile/nimbly\n. We should add a build badge to the README\n. Awesome. Now we need to kick off a build. I'm not seeing any options to do that... Do you have that? It should have automatically built when you pushed the README file change....\n. Looks like it errored out on `bower install`...\n. That makes sense. Do you want to work on fixing that?\n. :+1: \n. Awesome! Now all we need are tests that make that build passing actually mean something valuable :-)\n. Thanks for the recommendation @mwawrusch. I've looked into it for other projects but never gotten it setup. I'll create another issue for it.\n. Closing this because we have ok test coverage and we're adding tests all the time. Travis is purring along as well :-)\n. Closed with 4a9df974ed847620b69b6f599c908ae9922c4cad.\n. Perhaps it could fit into the library... What kind of api do you think would make it generic and useful to others?\n. Correct me if I'm wrong, but I don't think @mwawrusch was talking about the length of text in an input but rather having multiples of the same input. Like a contact having multiple phone numbers. I'm thinking this would be difficult to generalize enough to support more than a single use case...\n. Yeah, I definitely believe it belongs in a standalone directive. Whether or not it's included in the library or not is another matter. I'm still on the fence on that one. @astrism?\n. Personally I'd like to see this implemented outside of the library before we think about bringing it in...\n. I like that. So @astrism, do you think that there should be a separate repo for angular-strap and ui-bootstrap templates altogether? I like the idea of having plugins. Thinking a separate repo for these seems appealing... Then you could install formly and the plugin you care about separately...\n. @mwawrusch, any progress on this? Is there any reason to keep this issue open?\n. I implemented something like this at work... Pretty simple. There are several ways to accomplish it based on your use case. I'll see if I can show an example sometime this week.\n. Ok, so I have some wicked abstractions on top of formly that make my life easier (hoping to bring them into some sort of generic formly template library eventually), but here's the meat of my multi-input template:\n\n``` html\n<div class=\"az-formly-multi-input\">\n  <div ng-class=\"{row: !$last}\" ng-repeat=\"item in result[options.key || index] track by $index\">\n    <az-formly-input class=\"no-padding\"\n                     ng-class=\"{'col-md-7': result[options.key || index].length > 1}\"\n                     options=\"options.data.inputOptions\"\n                     result=\"result[options.key || index]\"\n                     form=\"form\"\n                     index=\"$index\">\n    </az-formly-input>\n    <div class=\"col-md-5 plain-text\" ng-if=\"!$first\">\n      <az-action-link action=\"result[options.key || index].splice($index, 1)\">\n        <i class=\"fa fa-times\"></i> Remove Number\n      </az-action-link>\n    </div>\n  </div>\n</div>\n```\n\nWhere the `az-formly-input` directive is simply the directive version of my formly input field. Then, I have a control elsewhere to add a new item (which amounts to just pushing an item to the `result[options.key || index]` array), but it would be pretty simple to place that wherever depending on your use case. I use this template with formly via this config:\n\n``` javascript\n{\n  type: 'multi-input',\n  key: 'numbers',\n  data: {\n    inputOptions: {\n      required: true\n      // this is all the normal options you use for a formly field of type 'input'\n    }\n  }\n}\n```\n\nAs far as having sub-forms, this would actually be relatively simple as well. You'd simply have a formly template that uses a `formly-form` directive and then you'd pass in all the data the formly-form needs.\n\nAlternatively, you would just manage this yourself (which I think would be preferable). It just really depends on your use case. If you think there's a good generic implementation with a good api that you think would provide what most people are looking for out of this then let me know, but I'm thinking that it's definitely a case-by-case situation here.\n. That plunker is using a version of formly that doesn't have `field.runExpressions`, so I'm not sure I understand what you mean.\n\nEither way, I think this is probably not the best way to accomplish what you're trying to do. Perhaps a better approach would be to have something like this:\n\n``` html\n<formly-form ng-repeat=\"user in vm.users\" fields=\"::vm.getUserFields()\" result=\"user\">\n  <button ng-click=\"vm.users.splice($index, 1)\">Remove User</button>\n</formly-form>\n<button ng-click=\"vm.users.push({})\">Add User</button>\n```\n\nAnd then in the controller:\n\n``` javascript\nvar vm = this;\n\nvm.users = [];\nvm.getUserFields = getUserFields;\n\nfunction getUserFields() {\n  return [\n    {\n      key: 'firstName',\n      type: 'text',\n      label: 'First Name'\n    },\n    {\n      key: 'lastName',\n      type: 'text',\n      label: 'Last Name'\n    }\n  ];\n}\n```\n\nI think this approach makes the most sense. What do you think? If you think there's a way that formly could make this process simpler, I'm all ears. I want this to be as good if not better than the `angular-schema-form` module, so please let me know if you feel like it's lacking anything! :D\n. I'm still not certain that I understand the issue you're having. But I think that it may be related to the different contexts that expressions are evaluated under. `watchers` expressions evaluate with the form's scope, while `expressionProperties` and `validators` evaluate with the field's scope. See [this](https://github.com/formly-js/angular-formly#expressions) for more info and reasonings for why.\n\nCould that be the cause problem you're seeing? I've made the remove and add buttons function properly ([here](http://plnkr.co/edit/ZgNiWwAfBhmepkUyEoDk?p=preview)) and everything seems to be functioning as expected. Let me know.\n\nAs for the infinite digest loop, perhaps you could use `ng-init` to set `options.fields`. This would prevent both problems. I understand your desire to keep form fields coupled with the rest of the fields it is supposed to represent. I think the `ng-init` approach in your sub-form template is a good way to go. Perhaps I'll look into that as well. Seems like a pretty reasonable solution.\n\nAs far as an improved API, I looked more closely at the `angular-schema-form` API and I didn't really get much inspiration from it. Their api fairly complex and I see some serious weaknesses with it (there are some obvious strengths as well). Either way, it's wildly different from formly.\n. A hah, it wasn't working as I thought it was. Here is a functioning plunk I think: http://plnkr.co/edit/Tb3zEBkD0keF4YvH203z?p=preview\n\nIt's using `ng-init` and seems to work well. Let me know what you think.\n. I think I finally understand the issue now. I think I have a little more time to spend on this problem tonight. I'll get back to you as soon as I can.\n. Thanks for using formly! I am committed to formly as a vast majority of my projects require forms and formly simplifies my life immensely. I really want to make things even easier for everyone and I believe this sub-form concept is definitely a valuable use case to cover. When we're finished, hopefully we can get this into the template modules as well.\n. @kaylarose, Fixed! :facepunch: I switched over to jsbin because debugging angular in plunker is a bit of a pain. The issue was we actually were overwriting `options.fields` every time because `options` was referencing the upper field's options, not each form's options. Anyway, here's the solution. It's not too bad I think and it doesn't require a `getFields` function:\n\nhttp://jsbin.com/jaloz/2/edit?html,js\n. The :: is for one time binding introduced in angular 1.3. If you could post\nyour findings in the wiki, that would be awesome. Thanks!\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Dec 30, 2014 11:38 PM, \"Kayla Rose Hinz\" notifications@github.com\nwrote:\n\n> Nice find! I was thinking a copy of the whole fields would do it, but I\n> guess that scope inheritance was what was killing me. It's working as\n> expected now. I am going to be implementing a whole bunch of subforms,\n> nested subforms etc. over the next few days so will let you know if I run\n> into any other quirks, and will post any simplifications of the\n> template/example I come up with - in-case it's of use to anyone else.\n> \n> Tangential question: when you use ::foo in your example code - what is\n> that intended for?\n> \n> Thanks again for all your help.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/76#issuecomment-68426496\n> .\n. Closing this as we seem to have a working solution now. If anyone has objections, let me know.\n. This is an interesting idea... What do you think this would do to our development lifecycle? Would it complicate things to have to pull down multiple repos to make sure you didn't break something? Or should we just make sure we have a solid test suite?\n\nOne thing I like about this is that most of the issues reported on this repo are template related. It would be nice to make that clear separation... I'm leaning toward this idea...\n. I think that nimbly should create the bootstrap and vanilla repos. Then other people could create their own template \"plugin\" repos as needed. But we already have the templates for those so we should just keep those with nimbly. I don't think a new org is necessary.\n\nI think we should take the opportunity with 0.1.0 to break as much as we need to get things where we want them to be right now. I'm hoping that the core will change very little after this, which is why I like splitting out the templates. Those repos will likely change a lot more than this one.\n. I'm fine with that. nbd\n. Perhaps we could put that logic in formly-core? In the config provider just have a method called `setupNormalTemplates` or something and the template repos would have a config to do this? Just a thought.\n. Sweet glory! Thanks @astrism!\n. Done and done :+1: Thanks! This will inspire me to increase the coverage of the codebase. I'm sure it's pretty low right now considering I just started writing tests for it a few months ago :-/\n. Yeah, I use coveralls for [api-check](https://github.com/kentcdodds/apiCheck.js) (which fails if it has anything less than 100% code coverage :-D). Thanks for doing this. I think that I'm going to put some time into writing more tests to bring the coverage up before I add the badge to the readme though. It's a little embarrassing... I'll try to get that done asap. Thanks!\n. Closing this in favor of a single issue\n. I think that this library has a good setup for this... https://github.com/alianza-dev/angular-scope-types\n. Finally done!\n. Looks good to me. @astrism was the one who made changes in there recently, so I'll let him review this and verify it was a simple mistake and merge this fix in.\n. @antoinepairet, note, there will be a number of breaking changes in 0.1.0, so just be prepared to upgrade.\n. This wasn't a duplicate. This was the bootstrap version for the fix. Reopening and merging.\n. Looks like your formatting is incorrect there (spaces instead of tabs). I think we need to add jshint to our travis build.\n. :+1: \n. Sorry we sort of missed this one @antoinepairet, but looking at it again this is actually not how templates work. The `template` property is an actual string that is the template. If you want to specify a `templateUrl` then that's another property you can specify and we get that from the template cache.\n. Looks like a better direction to go would be to use [jscs](https://github.com/jscs-dev/node-jscs)\n. I would simply add:\n\n``` javascript\nvar stopWatching = $scope.$watch('formData.language', function(newValue) {\n  if (!newValue) {\n    return;\n  }\n  stopWatching();\n  // Move on\n});\n```\n\nRemember that the `formFields` keys are the values on `formData` so you can do this just fine.\n\nAnother option is to use the [`watch`](https://github.com/nimbly/angular-formly#watchexpression-object) property on fields. It's basically the same concept, except it provides you with the field as the first parameter so you have a little more flexibility if you need it. But I would recommend going the normal watch route first.\n\nAlso, I'm not crazy about the use of `$parent` in your template. Instead of that, you could do what we do in the example in [custom-template](https://github.com/nimbly/angular-formly/blob/master/demo/views/custom-template.html) and do:\n\n``` html\n<li ng-repeat=\"option in options.options\"><a class=\"button expand\" ng-click=\"result[options.key || index] = option.value;\" >{{option.name}}</a></li>\n```\n\nNotice you don't need to invoke `optionsData()` either as formly will take care of setup the `options` object on your scope for you.\n\nPlease close this issue if this resolves your concern.\n. I would say it's probably better to use custom templates. However, I'll\nlook into how difficult it would be to add input masks as a configuration\noption...\n\nKent C. Dodds\nhttps://twitter.com/kentcdodds\nhttps://plus.google.com/114245123507194646768  kent@doddsfamily.us\nhttp://www.linkedin.com/profile/view?id=67772537\nhttp://mormon.org/me/1J5N/Kent\n\nOn Sun, Aug 31, 2014 at 9:31 AM, gizmoboy notifications@github.com wrote:\n\n> We were wondering about fields like phone or currency or social security\n> number where there is a very specific format you want to permit, but\n> otherwise they are just strings.\n> \n> Would it make sense to extend the text field type to support input masks,\n> or is the best practice to create custom templates for each of these?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/nimbly/angular-formly/issues/88.\n. I've investigated this a little bit. Though it would be a nice feature of formly to provide this, I don't have the time to put in the effort it would provide to do it properly. I would really like an api like this:\n\n``` javascript\n{\n  key: 'phone',\n  type: 'text',\n  mask: '(999) 999-9999'\n}\n```\n\nHowever, to implement that and add validation, caret reposition, etc. I expect that would be a pretty significant effort and I don't have time on the side to work on it.\n. [Angular UI-Utils](https://github.com/angular-ui/ui-utils) has this functionality, however, I believe that I speak for @astrism when I say we would like to keep formly as dependency free as possible...\n. This is great! Thanks. I'll give it a look over soon and merge it in.\n- Kent C. Dodds\n  Sent from my mobile device, please forgive any errors or brevity. (I may\n  have used speech to text...)\n  On Sep 1, 2014 11:19 AM, \"gizmoboy\" notifications@github.com wrote:\n\n> An additional watcher on the Edit JSON button now pulls the current value\n> \n> ## of formData back into formDataStr for editing.\n> \n> You can merge this Pull Request by running\n> \n>   git pull https://github.com/gizmoboy/angular-formly master\n> \n> Or view, comment on, or merge it at:\n> \n>   https://github.com/nimbly/angular-formly/pull/90\n> Commit Summary\n> - Fixes #89. Watcher on the Edit JSON button pulls the current value\n>   of formData back into formDataStr for editing.\n> \n> File Changes\n> - _M_ demo/views/home.js\n>   https://github.com/nimbly/angular-formly/pull/90/files#diff-0 (28)\n> \n> Patch Links:\n> - https://github.com/nimbly/angular-formly/pull/90.patch\n> - https://github.com/nimbly/angular-formly/pull/90.diff\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/nimbly/angular-formly/pull/90.\n. This code doesn't follow our spacing style (we use tabs, that was not my decision...). Could you please make the necessary updates to use tabs instead of spaces?\n. Other than that this looks great. Thanks for doing this!\n. Thanks a bunch!\n. You probably have a really hard time with vendor libraries huh? :-/\n\nWe're not going to adjust the templates to support your use case. Here are a couple options you have (in order of recommendation):\n1. Don't render templates with Django. There are many reasons why you should just have your server act as purely a services layer and serve your static files (html, css, js) on a CDN.\n2. Just use `formly.min.js` instead of the templates and make your own templates. That stinks, I know, and I'm sorry that you have to render your stuff server side as well.\n\nGood luck to you!\n. Give me an example of a library that does support this so I can see how they did it.\n. You're right. Angular-UI Bootstrap is using `$interpolate` to [construct](https://github.com/angular-ui/bootstrap/blob/88e7851be705bb7f45fa5ea8107d8ded3b33f97b/ui-bootstrap-0.11.0.js#L2455) some of their templates. Not all of them though, for example, in [this plunker](http://plnkr.co/edit/lq6L1pjuY9aWjY85eKR5?p=preview) I don't know how the alert is working because it uses `{{ }}` in the `alert.html` template...\n\nI've gotten a hack working in [this plunker](http://plnkr.co/edit/ErFMMidyfbSmVop9fDQO?p=preview). If you look at `setElementTemplate` in the `formly-field` directive, around line 140, I've added a check for the start and end symbols and I do a replace for those in the templates.\n\nI think that this is the only reasonable solution. I don't expect this to really cause serious issues. It would not affect those not changing the symbols so I think that I'll put it in. I'll make a PR and I'll let @astrism look at it and merge it.\n\nThanks for not giving up on me @khasinski. Once again I'm reminded that I don't know everything...\n. It will go into master which is a little different from 0.0.16 (which you're likely using. You'll have to point your bower to the hash of the build commit to get the latest stuff. See [CHANGELOG.md](https://github.com/nimbly/angular-formly/blob/master/CHANGELOG.md#breaking-changes) to see the breaking changes. They should have fairly minimal impact on you as I expect you have very little integration with formly as it is.\n\nThe PR is coming in a few minutes, but I want @astrism to have a look at it before it's merged.\n. @khasinski, technically, you should be able to point to this hash and start using the fix right away: 79cdc6d231da0655ba2a29aab3bbcb52d5961431\n\nNote: I noticed that using `[[ ]]` broke one of the demo's custom templates. I didn't look too much into it because using a different start and end symbol fixed the issue just fine and because it's a custom template you'll have total control over it. I just thought you'd like to know you may have to work around some things.\n\nMay the force be with you :-)\n. :+1: @astrism \n. Here are the templates with the appropriate changes:\n- [vanilla](http://cl.ly/XLcu/download/formly-vanilla.zip)\n- [bootstrap](http://cl.ly/XLsB/download/formly-bootstrap.zip)\n. With version 0.0.16, the submit button works just the same as it always has. See [here](https://github.com/nimbly/angular-formly/tree/0.0.16#formlyoptionsprovider) for information on how to configure options for the submit button.\n\nIn master, things have been [changed](https://github.com/nimbly/angular-formly/blob/master/CHANGELOG.md#breaking-changes) around a bit where the formly-form doesn't have a submit button. This is leading up to our 0.1.0 update which will hopefully happen as soon as @astrism returns from his travels.\n\nIf you're running on master, then you'll benefit from looking at how the demo adds a submit button. If you're on 0.0.16 then I'm not certain what your issue is. If your developer made a custom build of formly I would recommend that you don't do that... Just let us know what was lacking from formly and we'll see what we can do to support your use cases...\n. Good plan. If we don't provide the proper apis, please let me know...\n. In 0.0.16, the ability to configure formly to use ng-if instead of ng-hide was implemented and the formly-form.html template was removed. This was an enhancement and not a breaking change.\n\nThe part of the template that checks hideSubmit is [here](https://github.com/nimbly/angular-formly/blob/0.0.16/src/directives/formly-form.js#L23). In the `compile` function below, the template is altered based on whether the form is supposed to use `ng-if`. Let me know if there's a bug in there that needs to be fixed.\n\nYou may also consider updating to master as this is the direction we're heading soon anyway. See [the changelog](https://github.com/nimbly/angular-formly/blob/master/CHANGELOG.md#breaking-changes) for the breaking changes your new developer will need to account for.\n. Hmmm... There may be some changes, but I believe the api should remain pretty stable. If you like, I'll make sure to let you know when there are any breaking changes. Honestly, I would recommend simply using the hash in your bower dependency so you don't get auto-upgraded.\n\nBut I believe the api should be consistent. However, one major change upcoming will be when we break formly away from the templates and break them out into separate repositories. This should be coming pretty soon and the dist folder for this repository will contain only formly.js and formly.min.js. You'll have to add a dependency on the template directory of your choice to get the built-in templates you enjoy now. \n\nI've created an issue (#94) where I'll post when things like this happen if you'd like to stay up to date.\n. I'm going to close this for now as the root issue was resolved.\n. We're still waiting on @astrism to split out the templates into their own repositories and transition this repository to be owned by the angular-formly org... Once that happens, we can probably get this released soon.\n. Before we push 1.0.0, could we implement this suggestion I make in [this comment](https://github.com/angular-formly/angular-formly/pull/110#discussion_r18169365) on #107?\n. Perfect\n- Kent C. Dodds\n  Sent from my mobile device, please forgive any errors or brevity. (I may\n  have used speech to text...)\n  On Sep 29, 2014 2:47 PM, \"Grant Helton\" notifications@github.com wrote:\n\n> Sure, we'll do the transfer but hold off on releasing a new version till\n> thats ready?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/angular-formly/angular-formly/issues/94#issuecomment-57227033\n> .\n. Noticed you got the repo transferred. Awesome. Perhaps you can create an angular-formly shell repo in nimbly for gh-pages. Even though [github.com/nimbly/angular-formly](https://github.com/nimbly/angular-formly) will forward to [github.com/angular-formly/angular-formly](https://github.com/angular-formly/angular-formly), the demo page http://nimbly.github.io/angular-formly/ does not forward.\n. As another note, I'm in the process of developing [react-formly](https://github.com/kentcdodds/react-formly). I'm thinking it may make sense to put it in the same org? Thoughts on this? What if we renamed the org to \"formly\" and the template repos had an `angular` or `react` prefix to the repo name??\n. Awesome, so I suggest the org name should be simply \"formly\" then we'd have:\n\nangular\n- angular-formly\n- angular-formly-templates-bootstrap\n- angular-formly-templates-vanilla\n\nreact\n- react-formly\n- react-formly-templates-bootstrap\n- react-formly-templates-vanilla\n\nYou can feel free to just worry about the angular repos for now I think. I'll create the react ones when they're ready.\n\nAre those names too verbose?\n. Hmmm.... Well, what do you think about the idea of creating a single JSON powered form solution to rule them all that just has adapters for other libraries/frameworks/etc.?\n. I know that Jason is doing that with angular-data right now. He's creating a more generic js-data in vanilla javascript and then creating hooks for angular/ember/backbone/react/etc... What if we did that for forms?\nWhat if we did js-forms?\n. Then we could work on abstracting out the pieces that rely on angular... Perhaps the core would be pretty minimal... This may not be necessary. Because we're pretty reliant on the framework currently. I wonder if it makes sense. But I'm tired of re-implementing things every time a new shiney framework comes along. Would be nice to just have a generic solution that could be adapted to the framework...\n. It would be really awesome if you could have the exact same data structure to control the form elements and swap out the view layer and everything would still work. That would be pretty amazing.\n. Valid point @gizmoboy, but unfortunately, there are compelling reasons to move to something like react. It's not just that it's shiney and new.\n. I'll let you decide what you want to do @astrism. Either way is fine with me.\n. Good point. I don't know what you could abstract. As far as a spec, I highly doubt there's a spec in existence. We could probably make our own...\n\nStarted this, got pulled off...\n\nhttps://github.com/angular-formly/angular-formly/wiki/JSON-Specification\n. That's fine with me.\n. Huzzah!\n\nKent C. Dodds\nhttps://twitter.com/kentcdodds\nhttps://plus.google.com/114245123507194646768  kent@doddsfamily.us\nhttp://www.linkedin.com/profile/view?id=67772537\nhttp://mormon.org/me/1J5N/Kent\n\nOn Thu, Oct 2, 2014 at 5:23 PM, Grant Helton notifications@github.com\nwrote:\n\n> Alright we're live on bower using the same angular-formly but now\n> pointing to the new org.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/94#issuecomment-57725955\n> .\n. Would love to create an alliance between the two libraries. Let's move this discussion to their repo: kelp404/angular-form-builder#50\n. FYI to any interested. Some [major updates](https://github.com/formly-js/angular-formly/compare/1.0.0...master) have been made since 1.0.0 was released. I believe it may be wise to cut a 2.0.0 before too long. @astrism and I plan to meet next month, we will likely be cutting the new version at that time (either that, or we'll release what we have now as 2.0.0 and make additional updates as 3.0.0).\n\nMy current project that relies heavily on formly is pointing to a SHA in it's bower.json for formly. I don't know if I'd necessarily recommend that for anyone else, but if you want to get all the sweet new api changes and improvements I recommend looking at your upgrade path by seeing [the changelog](https://github.com/formly-js/angular-formly/blob/master/CHANGELOG.md).\n. Made some [additional major changes](https://github.com/formly-js/angular-formly/compare/20f4ff7...8e33674) that will require (hopefully minor) find/replace changes in templates. The most notable (since I last mentioned it):\n- `watch` changed to `watcher`\n- `formly-form` attribute `name` changed to `form` to be more clear about what's going on.\n- Removed `options` from `formly-form`. The id of the form is now generated by formly.\n- Renaming `formField` to `formControl` - This will likely require the biggest change for your templates.\n- No longer expecting `options.key` for the `name` attribute of `ng-model` elements. Now expecting `id`. Also, formly will automatically attach the `formControl` to the `form` for each field that doesn't have `noFormControl: true`. A suppressible warning will be logged if the `formControl` cannot be found. This will also require some rework of your custom templates. The master branches of the bootstrap and vanilla templates have this update.\n\nI realize that some of these changes are pretty significant and may require a bit of work on people's part to get things working with the upcoming version of formly. But I believe that the api to formly is improved big time. Still a little more to do (especially with template utilities), but I believe we're headed in the right direction! Please keep feature requests coming!\n. Another big change today. Changing from the name `result` to `model`. This makes the purpose of the attribute more clear. This will be part of the 2.0.0 release coming soon (hopefully).\n. Anyone mind me closing this issue? Let me know and I'll reopen it.\n. Hmmm... I'm not sure I understand the complications you described. To get the most basic thing setup, see [this codepen](http://codepen.io/kentcdodds/pen/pytBf)\n. The \"controller as\" syntax is recommended, but not required. Glad you got it working.\n. I actually saw this bug this morning. I know what it is. It came in when I added validation. You have to give your form a name. I'll fix this bug later, but if you give your form a name that should solve the problem:\n\n``` html\n<formly-form name=\"formName\" result=\"formData\" fields=\"formFields\" options=\"formOptions\" ng-submit=\"onSubmit()\">\n</formly-form>\n```\n. Just realized that I pushed another build which may make this one have a merge issue. I guess this is why you don't build the project in a PR. I'll try to remove that commit from this PR.\n. We're not going to merge this in. If you want to use a different start and end symbol, you'll have to provide your own templates.\n. That's perfect. Thanks!\n. Good to have you back @astrism :-)\n. Looks awesome. I'll merge, then pull, build, and push, and redeploy. Thanks!\n. Awesome, if anyone needs this right now they can point to e3d165a72d6c4a9c56819c4c8d0c885cee34b490 in their bower and get this feature. Hopefully we'll be able to release a new version soon. Thanks for the help @manuelnaranjo!\n. Copied this to [the wki](https://github.com/nimbly/angular-formly/wiki/Code-Styleguide)\n. Yes, simply ensure that the object you pass into the result attribute has\nvalues and those will be the initial values.\n- Kent C. Dodds\n  Sent from my mobile device, please forgive any errors or brevity. (I may\n  have used speech to text...)\n  On Sep 15, 2014 8:15 AM, \"nicole chung\" notifications@github.com wrote:\n\n> Hi, my apologies in advance...not sure where to ask questions (couldn't\n> find an email contact).\n> \n> Is there a way to pre-populate the form with existing data? Wasn't sure\n> how to from reading the README.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/nimbly/angular-formly/issues/101.\n. Coolio. So, you're right, the `$error` property comes from angular's [Form Controller](https://docs.angularjs.org/api/ng/type/form.FormController#$error). You could glean more information using angular's [NgModelController's `$error`](https://docs.angularjs.org/api/ng/type/ngModel.NgModelController#$error). If a field template has an input with an `ng-model` that utilizes the `formly-dynamic-name` directive, then the field will have a `formField` which will have the `$error` populated by the `NgModelController`. You can get more fine grained information using this `formField`. All the built-in templates should have this currently.\nWe definitely appreciate the contributions!\n. Closing this issue for now. If you want to take a whack at it, that'd be awesome. Just trying to clean things up a bit.\n. Hmmm... Good point... I think instead we should use `$timeout`. I'll push a fix soon.\n. Yes, note that we're in the middle of releasing 1.0.0 so master is\ndifferent than what is released to bower. Please see the readme for the tag\nyou have installed.\n- Kent C. Dodds\n  Sent from my mobile device, please forgive any errors or brevity. (I may\n  have used speech to text...)\n  On Sep 16, 2014 1:44 AM, \"Ben Liu\" notifications@github.com wrote:\n\n> After I run commands:\n> bower cache clean\n> bower install angular-formly\n> \n> I haven't got the lastest version of angular-formly.\n> When I use the installed angular-formly in my index page, it shows error:\n> Unknown provider: formlyConfigProvider\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/nimbly/angular-formly/issues/105.\n. Hopefully soon. We're waiting to get the templates moved over to their own repositories and switch this repo to be owned by a [new org](https://github.com/angular-formly). Any progress on this @astrism?\n. Note, you can still use bower to install the latest code if you would like: http://stackoverflow.com/a/16951315/971592\n. You can't have a type and template. You can only have a type, template, _or_ templateUrl.\n\nCould you please fork [this plunker](http://plnkr.co/edit/1R3t4fvpXcJyiu96ICY5?p=preview) to reproduce the issue?\n. I'm not sure what you're trying to accomplish, but you can't put an ng-model on an li element. It simply doesn't work in that context. So this isn't a bug in angular-formly, but maybe I can help you accomplish what you're trying to do... Do you want the value to be an array of the selected checkboxes?\n. [Try this](http://plnkr.co/edit/AHkmbwBidjUbOe7xAClu?p=preview) Will that do what you want?\n. Then at that point you could simply add a watcher in the controller of your directive to watch for changes that would update the value, and manually update the value yourself (ie, not in the template).\n. Nice catch. That needs to be fixed. Thanks...\n\nWith regards to the submit button. This has been a breaking change. You now provide your own submit button via transclusion in the `formly-form` directive.\n. No, the reason for it is on the latest stuff, we created a templateless\nbuild. This became formly.js. On older versions (like what you have), the\nvanilla templates are in formly.js.\n- Kent C. Dodds\n  Sent from my mobile device, please forgive any errors or brevity. (I may\n  have used speech to text...)\n  On Sep 26, 2014 3:16 AM, \"Mikael Couzic\" notifications@github.com wrote:\n\n> I am using the latest version (0.0.16) of Formly with Bower, and I have a\n> problem.\n> \n> When I bower install, the folder angular-formly/dist/ contains :\n> - formly.bootstrap.js\n> - formly.js\n> \n> But it doesn't contain formly.vanilla.js\n> \n> So for the moment I am using this file :\n> https://github.com/nimbly/angular-formly/blob/master/dist/formly.vanilla.js\n> \n> I'm also wondering if it is related with issue #77\n> https://github.com/nimbly/angular-formly/issues/77\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/nimbly/angular-formly/issues/108.\n. Hi @micouz, trying to clean up old issues, is this resolved?\n. Sorry, meant to wait for you to respond before I closed it. Now I'll wait for you to respond before I reopen it :-)\n. The second argument to a `validator.validate` function is the `scope` which has a `result`. You can use that result to determine whether the input is valid based on other fields. https://github.com/nimbly/angular-formly#validators-objectarray\n. There is [an example](https://github.com/nimbly/angular-formly/blob/613995d0a2592df82acdab90d621db6dca56ab43/demo/views/home.js#L10).\n\nYou are correct. All the validators do currently is [add parsers to the ngModelCtrl](https://github.com/nimbly/angular-formly/blob/fae4a154befd1626cac3a13fb0a6a18fd738a551/src/common/directives/formly-custom-validation.js#L17) of a field. They have no concept of error messaging and they shouldn't. It should be the role of the template to display errors to the user.\n\nPerhaps we could add error messages to the templates as you see [here](https://github.com/nimbly/angular-formly/blob/76e31e2f614ebf1619098b25456bcb22da526fa5/demo/views/custom-template.html#L1), but that's definitely a template responsibility, not a formly core resopnsibility.\n. Having a function is not valid json. It becomes an object at that point... If you need valid json then you need to use an expression rather than a function. Something like this should do the same thing you were trying to do:\n\n``` javascript\n[\n    {\n        \"template\": \"<div><h3><b>Simple Title Goes Here</b></h3></div>\"\n    },\n    {\n        \"key\": \"sample\",\n        \"type\": \"text\",\n        \"label\": \"Simple user\",\n        \"validators\": [\n            {\n                \"name\": \"iAmSam\",\n                \"validate\": \"'sam'===value\"\n            }\n        ],\n        \"required\": false\n    }\n]\n```\n\nObviously, this isn't as complicated as what you're trying to accomplish, so your expression will be a little complex... Not sure why you need it to be 100% JSON, but it should be possible regardless, albeit a little ugly and long...\n. Here's an example expression referencing another field's value:\n\n``` javascript\n[\n    {\n        \"template\": \"<div><h3><b>Simple Title Goes Here</b></h3></div>\"\n    },\n    {\n        \"key\": \"otherSample\",\n        \"type\": \"text\"\n    },\n    {\n        \"key\": \"sample\",\n        \"type\": \"text\",\n        \"label\": \"Simple user\",\n        \"someOption\": \"awesomesauce\",\n        \"validators\": [\n            {\n                \"name\": \"iAmSam\",\n                \"validate\": \"results.otherSample === 'sweetness' && options.someOption === 'awesomesauce' && value === 'sam'\"\n            }\n        ],\n        \"required\": false\n    }\n]\n```\n\nDo you have a suggestion of how what you're trying to do could be supported better?\n. I can see how that solution could be done and I don't have a problem using `eval` with an opt-in type behavior on the validator (instead of `validate` it would be `dangerouslyValidate` or something). But just want to make sure that it's going to be useful to someone if we do.\n\nI'd probably make it so whatever is being \"dangerously validated\" would have the `scope` in scope of the function so it could be used. Here's an example of using the api that there could be:\n\n``` javascript\n[\n    {\n        \"template\": \"<div><h3><b>Simple Title Goes Here</b></h3></div>\"\n    },\n    {\n        \"key\": \"otherSample\",\n        \"type\": \"text\"\n    },\n    {\n        \"key\": \"sample\",\n        \"type\": \"text\",\n        \"label\": \"Simple user\",\n        \"someOption\": \"awesomesauce\",\n        \"validators\": [\n            {\n                \"name\": \"iAmSam\",\n                \"dangerouslyValidate\": \"(function() { var someCheck = results.otherSample.match(/^sweet.*ness$/g) && options.someOption.length > 3; if (someCheck) { return value.some(function(x) { return x.charCodeAt(0) > 100; }); } else { return value === 'sam'; } })();\"\n            }\n        ],\n        \"required\": false\n    }\n]\n```\n\nNotice that\n1. you can do more complex stuff (like if statements, regexes, and you could do loops) that you can't do with angular's $parse service.\n2. You have access to results, options, and value.\n3. You provide a self-invoking function\n\nWould this be a reasonable api?\n\nHere's an example implementation that works:\n\n``` javascript\nfunction evaluate(results, options, value, script) {\n  return eval(script);\n}\nvar dangerouslyValidate = \"(function() { var someCheck = results.otherSample.match(/^sweet.*ness$/g) && options.someOption.length > 3; if (someCheck) { return value.some(function(x) { return x.charCodeAt(0) > 100; }); } else { return value === 'sam'; } })();\";\nvar results = { otherSample: 'sweetness' };\nvar options = { someOption: 'lo' };\nvar value = 'sam';\nvar validates = evaluate(results, options, value, dangerouslyValidate);\nconsole.log(validates); // logs true\n```\n\nWould love @astrism to weigh in here.\n. @gizmoboy, sorry this was never implemented. Do you still need this functionality?\n. Closing this for now unless someone asks for this functionality again.\n. @4ware, you don't need to use a function to do that. You can easily do that using the string version of a [Formly Expression](http://docs.angular-formly.com/v6.10.1/docs/formly-expressions)\n. Nothing like this was ever added and I don't expect it ever will be. If you need to do regex that's already possible via a pattern. See the Mac Address configuration in [this example](http://angular-formly.com/#/example/advanced/validators). Also, you can get pretty far with putting complex logic on the client and referencing that logic in your config using [fieldTransforms](http://angular-formly.com/#/example/very-advanced/field-transform).\r\n\r\nGood luck.. Wow @acido69, you've uncovered a very serious issue in our build. Thanks a ton! I'll make a comment or two on some lines in the PR. If you could address those then I think we'll pull this in. Thanks again!\n. That's an awesome refactor. Thanks for doing that. We need to think about this in the context of us breaking out the templates into their own repositories now that the organization has been created and the repo has been moved over... I think we may want to hold on this one :-/\n. @astrism, the entire build will need to change since we're splitting the templates out, so I'd say yes.\n. Thanks for the PR. I believe the original issue has been fixed.\n. Please see the note in the first line under the [Documentation](https://github.com/formly-js/angular-formly#documentation)\n. That's not a valid expression unfortunately. The `$parse` service (used by `$compile` rejects it). You'd have to do something like this:\n\n``` javascript\ntemplate: '<div>Today\\'s date is {{ options.data.now | date:MM/dd/yyyy }}</div>',\ndata: {\n  now: new Date()\n}\n```\n\nAlternatively you could do that logic in a directive controller or something...\n. Please close this issue if this resolves your issue. Thanks!\n. I have no idea what this is all about... What do you want us to do?\n. I see... Sounds useful. I don't know if I have the time to work on it now\nthough...\n- Kent C. Dodds\n  Sent from my mobile device, please forgive any errors or brevity. (I may\n  have used speech to text...)\n  On Oct 6, 2014 2:36 PM, \"Erik Dykema\" notifications@github.com wrote:\n\n> Ha ha, mostly what I want you to do is consider and tell me what you\n> think. This is related to the \"integration with a form-builder\" discussion.\n> \n> To integrate with a form builder program, the form-builder will need to\n> create output in a format that the form-displaying program (angular formly)\n> can understand. Often, when this sort of thing is done, the pattern is to\n> develop a contract (e.g. API, schema, etc.) that both applications / layers\n> / etc. can depend on.\n> \n> I propose that this contract should be a JSON Schema\n> http://json-schema.org/ document, because then you could use an out of\n> the box schema validator on either the client side (e.g. tv4) or the server\n> side (e.g. a python / ruby package) to validate the \"form\" that has been\n> built by the form builder.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/114#issuecomment-58092964\n> .\n. There's the beginnings of a form schema specification [here](https://github.com/formly-js/angular-formly/wiki/JSON-Specification). It's a little difficult to generalize things because different formly components can require such different things, but I think most of the common stuff is there.\n. Could you be more specific of what you're trying to accomplish? I'm not\nsure what you mean. But I'm pretty sure that this module can do what ever\nit is your trying to do.\n- Kent C. Dodds\n  Sent from my mobile device, please forgive any errors or brevity. (I may\n  have used speech to text...)\n\nThanks for nice module!\n\nBut it's almost useless without having an opportunity to customize form's\nmarkup (not a single form field)\n\nFor example, how would one achieve a simple container for in the markup for\nthe fields of the same type?\n\nThanks in advance for you support, maybe i was just not so patient and\nthere is such a possibility.\n\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/formly-js/angular-formly/issues/115.\n. Feel free to use [this template](http://plnkr.co/edit/tpl:1R3t4fvpXcJyiu96ICY5?p=preview) to demonstrate what you're trying to do.\n. People are free to using the formly-field directive if they like. There's nothing stopping them. I still have no idea what you want us to do? What about the current API needs to change to accomplish what you're trying to do?\n. Yes, except it's even simpler:\n\n``` javascript\n{\n  template: '<hr />'\n}\n```\n\nThis \"just works\" because the way things work. It's more of a coincidence, but yeah, you can do that.\n. Going to close this for now, please re-open if it has not been resolved.\n. There is a limitation angular. There's no way to know when something has rendered. If you're trying to do this, there's probably a better way to accomplish what you're actually trying to accomplish. We could add a callback parameter to the link function, but this wouldn't be exactly what you're looking for... What are you trying to do?\n. Way cool. Thanks @nicolechung!\n. I'm fine with it. Personally, I prefer all my templates to be wrapped in a single div for consistency, but if someone wants to do this, that's fine with me.\n. Sounds fine to me!\n. Thanks for letting us know. I'll be able to fix this soon.\n. As in tomorrow probably...\n. @circlingthesun, could you show me where that line exists? I can't seem to find anywhere in the code that has the line `$scope.options.default`...\n\nIn fact, there's nowhere in the code at all that uses the keyword default. I'm guessing that you're using an older version of formly. I would recommend upgrading to the latest version (1.0.0 as of today).\n. There is no tutorial, but you can have Bootstrap as an example. It's actually quite simple. Actually, I just created a new templates repository [angular-formly-templates-foundation](https://github.com/formly-js/angular-formly-templates-foundation) that's basically a copy of the [angular-foundation-templates-bootstrap](https://github.com/formly-js/angular-formly-templates-bootstrap) repo. If you are willing and able, we'd love it if you could submit a PR to that to change the templates from bootstrap to foundation!\n\nThere's an [initial release](https://github.com/formly-js/angular-formly-templates-foundation/milestones/Initial%20Release) milestone on the repo with a few issues in it. You could do everyone a big favor by submitting a PR to close those issues and get that repo out the door if you can!\n. Closing this here to move discussion over to angular-formly-templates-foundation.\n. This is awesome, but it's outside formly's role. You could easily do this yourself just using formly.\n. If I get time @gladson, but I don't think I'll have time to create your app for you...\n. Just as a recommendation of an approach, you'd just have an ng-repeat on the models and pass that in to the result attribute.\n. Good luck! Let us know if you get it working and if there's anything the formly-js core can do to improve the api to make what you're trying to do simpler.\n. @psi-4ward, yes, this is not a problem for the core to solve. I have a project where I do something similar to this and all I do is have a separate form for each subform.\n. Here's an example. Obviously you'd need to style it yourself... http://plnkr.co/edit/fft0F5ZMtY3fOw6Js9hb?p=preview\n. Done :-)\n. Not certain off the top of my head. If you could [reproduce the issue](http://plnkr.co/edit/tpl:1R3t4fvpXcJyiu96ICY5?p=preview) then maybe I can figure out why this is happening. Thanks!\n. I added it. It's been in for a little bit. It should actually work on a formly-form so I'm not sure why it's not working for you. The directive itself is pretty simple (though it could be improved by using the compile function instead of a controller...). If you're using angular 1.3 then the [name attribute is interpolatable](https://github.com/angular/angular.js/commit/729c238e19ab27deff01448d79342ea53721bfed) and you wont need the directive anyway.\n\nThe reason it was added is for field validation. The only way to get validation on an `ng-model` is by putting a name attribute on the same element and for that element to be a child of a named form. Prior to 1.3, the name attribute couldn't be dynamic. So this directive was a work around to that.\n. I'm not sure what you mean by \"also _take_ local values\" can you explain what you mean?\n. I see. I'm thinking we'll want to rework the `formly-dynamic-name` directive a little bit to use the compile function instead of a a controller. I'm pretty busy at work right now but hopefully I will have some time soon to address this.\n. Until I get time to fix the root issue, one way you could work around it is by making sure that the forms on your page exist on separate scopes. That way you can give them each a hard coded name and not worry about collisions. In my project I have a directive that wraps formly so I can abstract away the dependency and have some good defaults. You could do the same. If you need a reference to the form, then you can add that as a doubly bound attribute and \"pass it back\" in that way.\n\nThis is my implementation of this (note, I'm using controller as syntax, if you're not familiar with that then Todd Motto has [a good explanation](http://toddmotto.com/digging-into-angulars-controller-as-syntax/):\n\n``` javascript\n// az-form.js\n\nangular.module('atac.common').directive('azForm', function azFormDirective(COMMON_URL, _) {\n  'use strict';\n  return {\n    restrict: 'E',\n    templateUrl: COMMON_URL + 'directives/components/az-form.html',\n    scope: {\n      form: '=?',\n      result: '=',\n      fields: '=',\n      formId: '@',\n      onSubmit: '&'\n    },\n    transclude: true,\n    bindToController: true,\n    controllerAs: 'vm',\n    controller: function() {\n      var vm = this;\n      vm.id = vm.formId || (vm.result || {}).id || Math.random() * 999999;\n      vm.describedFields = _.filter(vm.fields, function(item) {\n        return item.hasOwnProperty('description');\n      });\n    },\n    link: function(scope, el, attrs) {\n      if (attrs.hasOwnProperty('form')) {\n        var stopWatching = scope.$watch('azForm', function(form) {\n          if (angular.isDefined(form)) {\n            stopWatching();\n            scope.vm.form = form;\n          }\n        });\n      }\n    }\n  };\n});\n```\n\n``` html\n<!-- az-form.html -->\n<formly-form name=\"azForm\"\n             novalidate\n             result=\"vm.result\"\n             fields=\"vm.fields\"\n             options=\"::{uniqueFormId: vm.id}\"\n             class=\"space-inputs\"\n             ng-submit=\"vm.onSubmit(result)\">\n  <div class=\"col-md-9 col-md-offset-3 text-muted margin-top5 margin-bottom15\" ng-if=\"vm.describedFields.length\">\n    <div ng-repeat=\"field in ::vm.describedFields\">{{field.description}}</div>\n  </div>\n  <ng-transclude></ng-transclude>\n</formly-form>\n```\n\nThen I have one place where I use it like so:\n\n``` html\n<az-form result=\"vm.userInfo\"\n         form=\"vm.userFormRef\"\n         fields=\"vm.formFields\"\n         on-submit=\"vm.login(vm.userInfo)\">\n  <div class=\"action-buttons col-md-offset-9 col-md-3\">\n    <button type=\"submit\"\n            ng-disabled=\"vm.userFormRef.$invalid\"\n            class=\"btn btn-primary az-btn\"\n            az-loading-button=\"vm.loggingIn\">\n      Sign In\n    </button>\n  </div>\n</az-form>\n```\n\nI hope this helps.\n. FYI @kbdaitch, the current version of formly in master has a breaking change that may impact you so I thought I'd let you know. Instead of using the `form` tag, formly now uses `ng-form` which doesn't work with `ng-submit` or submit the form with a `button[type=\"submit\"]`. This is truly unfortunate and kinda lame, however it allows you to nest forms properly (as HTML doesn't actually allow you to nest form elements).\n\nIf you really want ng-submit and submit buttons to work for you, I feel you. So much that I made it work anyway. Here's what I did, maybe you can benefit:\n\n``` javascript\n(function() {\n  'use strict';\n\n  angular.module('atac.common').directive('ngForm', ngForm);\n\n  function ngForm(_) {\n    return {\n      restrict: 'E',\n      link: function(scope, element, attrs) {\n        var ngForm = scope.$eval(attrs.name);\n        if (ngForm) {\n          ngForm.azSubmit = function() { // <-- named azSubmit because az is my app's prefix\n            if (ngForm.$invalid) {\n              return;\n            }\n            var context = scope;\n            if (attrs.hasOwnProperty('submitFormOnParent')) {\n              context = scope.$parent;\n            }\n            ngForm.azSubmitting = context.$eval(attrs.ngSubmit);\n            scope.$safeApply(); // <-- you'll need to implement this\n            return ngForm.azSubmitting;\n          };\n          element.on('keyup', function(event) {\n            if (event.which === 13 && attrs.ngSubmit) {\n              ngForm.azSubmit();\n            }\n          });\n          var submitButton = element.find('[type=submit]');\n          if (submitButton.length === 1) {\n            submitButton.on('keyup', function(event) {\n              if (event.which === 32 || event.which === 13) {\n                ngForm.azSubmit();\n              }\n            });\n            submitButton.on('click', function(event) {\n              ngForm.azSubmit();\n            });\n          } else if (!_.isEmpty(submitButton)) {\n            throw new Error('Forms should only have one submit button');\n          }\n        }\n      }\n    };\n  }\n})();\n```\n\nHope that's helpful when you decide to upgrade formly when we cut 2.0.\n. That approach sounds fine to me. @gizmoboy has done some interesting things with dynamic data in formly. Perhaps he has some tips...\n. Coming back through some issues. Reading this again, I think I misunderstood the question. If you want to pre-populate a form with values, you simply need to set values on the model. The form is a reflection of the current state of the model (aka `result`). So, if I had:\n\n``` html\n<formly-form result=\"user\" fields=\"fields\"></formly-form>\n```\n\n``` javascript\n$scope.fields = [\n  { type: 'text', key: 'firstName' }\n];\n```\n\nthen all I would have to do to pre-populate the form with some default value would be\n\n``` javascript\n$scope.user = {\n  firstName: 'Grant'\n};\n```\n\nDoes this make sense/cover your use case?\n. Closing this issue for now because inactivity.\n. Closed via 4b44e60603ef94947ca44dcc8d82094d1981f719\n. See [this plunker](http://plnkr.co/edit/fft0F5ZMtY3fOw6Js9hb?p=preview). It's quite simple.\n\n``` html\n<div>\n  {{options.label}}\n  <input ng-model=\"result[options.key]\" type=\"date\" />\n</div>\n```\n\nThen style it however you wish...\n. The new wrapper functionality makes this a much better experience. I don't know if we can quite get to where I was hoping for this one, but we're in a pretty good place I think!\n. Thank you. This is great news that it'll be fixed (hopefully) in 1.3.4 :-)\n. :clap: \n. Hi @sucheendra, the best way to get help is to follow the instructions here: http://help.angular-formly.com\n\nFor your first question, you'll simply set the `type` property in `templateOptions` to `number` and that should do it for you.\n\nFor your second question, please go to that help link and create an example of what you mean.\n. This can be accomplished by specifying a model for the field like so:\n\n``` js\n$scope.foobar = {\n  foo: {\n    bar: 'hello'\n  }\n};\n$scope.fields = [{\n  model: $scope.foobar.foo,\n  key: 'bar'\n}];\n```\n\n``` html\n<formly-form result=\"foobar\" fields=\"fields\" />\n```\n\nThis is supported as of 9f10f57e99ed5100f49f9eec48e5a051cfe60bfe\n. Done\n. FYI @astrism.\n. Hmmm... I just looked at the demo and it seems to work fine for me... @astrism?\n. Oh, understood. I'd rather just pull the template specific information out of the docs (see #133)\n. We moved all this info to the template docs.\n. Good feedback. I have accomplished this with my own set of field types. It's fairly simple. We have thought about making a repo for generic templates like this one. Stay tuned.\n. Another easy way to do this is to simply have two forms.\n. Totally. I don't know what the process is like, but these variations would be awesome:\n- latest: https://github.com/formly-js/angular-formly/blob/master/dist/formly.js\n- stable: https://github.com/formly-js/angular-formly/blob/1.0.0/dist/formly.js\n\n@astrism will be releasing 2.0.0 soon, would be good to get that on cdnjs as well. At that time, 2.0.0 would be `stable` and 1.0.0 would be `legacy`.\n\nIs it possible to have CDNJS pull from master to get latest anytime there's a commit to latest? If not, then there's no reason to have latest. Thanks.\n. Understood.\n. Hi @snimavat, could you please provide a link to a jsbin that demonstrates the issue (clone [this template](http://jsbin.com/biqesi/edit)). I use controller as in all of my projects and things work just fine for me so if I see what you're doing I'm sure I can identify what the problem is.\n. By putting the `name` attribute on the `formly-form`, the form controller is bound to the isolate scope of the `formly-form` directive. You'll want to place it on the surrounding form element like so:\n\nhttp://jsbin.com/qubozo/1/edit?html,js,output\n. Please close this issue if it is resolved.\n. You're right. I'll take another q look at this when I get the chance.\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Dec 31, 2014 1:17 AM, \"Sudhir Nimavat\" notifications@github.com wrote:\n\n> So, i need a parent form to achieve this,\n> \n> I am surprised, what does this mean in formly-form directive then\n> scope: {\n> formOnParentScope: '=name'\n> }\n> \n> ```\n> compile: function () {\n>     return {\n>         post: function (scope, ele, attr) {\n>             //Post gets called after angular has created the FormController\n>             //Now pass the FormController back up to the parent scope\n>             scope.formOnParentScope = $parse(attr.name)(scope);\n>         }\n>     };\n> },\n> ```\n> \n> Isnt it intended to set form controller on parent scope ?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/139#issuecomment-68429423\n> .\n. Ok, I figured out how I got around this. I believe the issue is how the name property is evaluated on the isolate scope of `formly-form` with controller as and some inheritance issues. Here's the work around:\n\nhttp://jsbin.com/kiwoda/edit\n\nI think we're going to add `form` as an attribute to the `formly-form` directive api so you will be able to avoid this dumb work-around.\n. Verified. If you look at this clone of your original jsbin, it's working as expected. Was a simple fix. Thanks!\n\nhttp://jsbin.com/yunitu/1\n\nNote, we have yet to cut a new version of formly, so to get this fix, you'll have to use master.\n. I believe the new version should work with 1.2.x still. If it doesn't, it's a bug and should be fixed. Let me know. Thanks! Also, I highly recommend you look into upgrading to 1.3. You're missing a lot of really great stuff.\n. I should let you know that I just pushed a breaking change to master. You may want to try pointing to 2c5aa42, or update your stuff to use `form` instead of `name` for that attribute. Good luck!\n. Hi @ShMcK, you've been invited to be a team member on the formly-js templates team. Could you follow [these instructions](https://help.github.com/articles/transferring-a-repository/) on how to make the transfer? Thanks! :D And welcome aboard :D\n. Gave you amin rights. Try again :-)\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Jan 15, 2015 9:06 PM, \"ShMcK\" notifications@github.com wrote:\n\n> Unfortunately, transferring fails with \"You don't have admin rights to\n> formly-js\".\n> \n> Option A is to (temporarily) change group permissions to grant me admin\n> rights for the repo. You can find repo permissions explained here\n> https://help.github.com/articles/permission-levels-for-an-organization-repository/\n> .\n> \n> Option B is to transfer the account to a specific user, in which case:\n> either yourself or astrism.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/140#issuecomment-70205761\n> .\n. Awesome! Thanks again for your awesome work!\n. This is finished. Just need to add more examples.\n. Please be more specific with what you're trying to accomplish. We do [add classes](https://github.com/formly-js/angular-formly#css-classes) to `formly-forms` and `formly-fields`. What do you want to have an `ng-class` on? If you need it on the templates, which template library are you using, bootstrap or vanilla? What version of angular-formly are you using?\n. @rahil471, have you resolved your issue?\n. Yes, angular-fromly adds the name attribute for you and binds a form attribute for you to alleviate confusion. So, you'd do this instead:\n\n``` html\n<formly-form form=\"activateSimForm\" model=\"simModel\" fields=\"simFields\"></formly-form>\n```\n\nIf that doesn't solve your issue, please open a new issue :-)\n. I would recommend doing something like this:\n\n``` html\n<form ng-submit=\"submit()\"\n  <formly-form model=\"vm.user\" fields=\"vm.mainFields\"></formly-form>\n  <div class=\"sub-panel\">\n    <formly-form model=\"vm.user\" fields=\"vm.subFields\"></formly-form>\n  </div>\n  <button type=\"submit\">Submit</button>\n</form>\n```\n\nand then your controller would look like this (using controller as)\n\n``` javascript\nvar vm = this;\n\nvm.user = {};\nvm.mainFields = [ /* your main field config here */ ];\nvm.subFields = [ /* your sub field config here */ ];\n```\n\nDoes that solve your issue?\n. I'm not sure I understand your question. What do you mean?\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Jan 7, 2015 1:14 PM, \"abodacs\" notifications@github.com wrote:\n\n> How to implement multi forms every form with its submit button?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/146.\n. I'm still not certain what your use case is. So, you want to be able to\ncreate/edit using the same form fields? This is easily done by providing\nthe right `model`. For \"create\" just provide an empty model (`{}`), for\n\"edit\" provide the model you're trying to edit.\n\nKent C. Dodds\nhttps://twitter.com/kentcdodds\nhttps://plus.google.com/114245123507194646768  kent@doddsfamily.us\nhttp://www.linkedin.com/profile/view?id=67772537\nhttp://mormon.org/me/1J5N/Kent\n\nOn Wed, Jan 7, 2015 at 1:31 PM, abodacs notifications@github.com wrote:\n\n> first Thanks for this greet work\n> i have use case a user can enter new form or edit previous entered forms\n> in same page.\n> Previous forms loaded as timeline style to edit\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/146#issuecomment-69086867\n> .\n. Yeah, you're going to need custom templates for those. For the multi-small-form stuff, I would recommend what we ended up doing in #76 [here](http://jsbin.com/jaloz/edit). For multi-select, you'll have to come up with something on your own, though I know there are several libraries that claim to do this quite easily. For file upload, you'll need to create your own template to do this. I recommend using a directive similar to the `exampleSubform` in the multi-small-form example so you can add a controller to do the actual upload. Good luck!\n. @abodacs, have you resolved your issue?\n. Thanks! I'm not sure what you're asking about. Are you talking about [json-schema.org](http://json-schema.org/)? I have no experience with that, but you're not the first to ask about this. #114 is about the same thing I believe. Could you explain what benefits we'd get from this. And how do you envision this being included?\n. Just to confirm, by\n\n> You (the Formly maintainer(s)) can use other validators (like TV4) to do the validation and not write/maintain validation related code.\n\nyou're talking about use validating the field configuration to verify that it is correct? So we can warn the developer when they provide a config that is incorrect.\n. I apologize. I've never had any experience with JSON Schemas. So please understand if I just don't get it. But if I understand you correctly, you're saying that the FDD could validate the model which to me doesn't make any sense. The FDD describes the fields that represent the model. They do have a `validators` property, but that's a JavaScript/angular specific thing.\n\nOne thing that might make sense is to add a `schema` property to the field config that allows you to use a JSON Schema validator to validate the model. This would be in lieu of `validators` but would behave just like `validators` in that it would `$setValidity` for the `NgModelController` based on whether the schema validation passed. Would this be a good api to accomplish what you're talking about?\n\nBy the way, sorry I closed #114... I should have pursued it further or at least asked you before closing it.\n. This is very interesting. I think I'm finally getting it :laughing:\n\nSo, I'm thinking to enable this, we'd do something like this:\n\n``` javascript\nangular.module('yourModule').config(function(formlyConfigProvider) {\n  formlyConfigProvider.schemaValidator(function(data, schema) {\n    var invalidValidators = validateSchema(data, schema);\n    return !invalidValidators.length ? true : invalidValidators;\n  });\n});\n```\n\nWhere `invalidValidators` would be something like:\n\n``` json\n[\"required\", \"maxLength\"]\n```\n\nAnd formly would take the `invalidValidators` and apply it to the `NgModelController` via `$setValidity` and you could use it with `ngMessages` like so:\n\n``` html\n<div ng-messages=\"options.formControl.$error\">\n  <div ng-message=\"required\">This field is required</div>\n  <div ng-message=\"maxLength\">Input too long</div>\n</div>\n```\n\nDo you think this would be acceptable? Do you think that I'm missing anything?\n. And of course that `validateSchema` function would likely call into [tv4](https://github.com/geraintluff/tv4) or something similar, but I don't want to include that library in formly. I'd like people to bring in whatever they'd like. Oh, and the `schemaValidator` function would be called anytime a field's model changed (based on a `$watch`). What do you think?\n. Oh, and just to be clear. `schema` is the FDD for the field and data is the model for the field (this would be `field.model` `||` what is passed to `formly-form`). Would that work?\n. That's a significant departure from the current API. It's also a little more complicated api as well. The simplicity of `angular-formly` is one of its strong points. I don't think that we want to change the default api to do this...\n\nHowever, I can definitely see the value. I think we may be able to detect that the given fields are a schema and generate the fields from the schema. So we'd do something like this:\n\n``` js\nvm.model = { /* your model here */ };\nvm.schema = { /* your schema here */ };\nvm.fields = {}; // set just so we have reference to it in our javascript\n```\n\n``` html\n<formly-form model=\"vm.model\" schema=\"vm.schema\" fields=\"vm.fields\"></formly-form>\n```\n\nThen, formly would generate the fields based on the schema and assign it to your `vm.fields` and it would invoke the `schemaValidator` function with the schema as described above any time the model changed.\n\nI believe that the schema you recommended would be converted to something like this:\n\n``` js\n[\n  {\n    key: 'name', // property name\n    hide: false, // !defaultVisible\n    label: 'Name', // title\n    description: 'Your name...' // use placeholder if you want a placeholder\n    required: true // from required array\n    data: {\n      // anything that's not part of the JSON specification will go in here\n      maxLength: 60\n    }\n  },\n  { /* etc. */ }\n]\n```\n\nPlease note, this does not at all change formly's default api. It may also make things a little tricky to do anything creative if you do things this way. I'm also not promising that this would actually be possible. But I believe it should be.\n. Would love help in the branch I started out. I'm not very familiar with this. I've pushed the 2.0.0 release anyway. We'll add this in a future version.\n. I think this should be part of a plugin, so I've created a new repo for that plugin. Anyone is welcome to implement it. https://github.com/formly-js/angular-formly-json-schema/issues/1\n. First of all, you're very welcome :+1: Glad you've found it useful!\n\nI'm not able to reproduce any issue whatsoever. No matter how much I change and move around, the field disappears when `type` is not equal to `1` which is the condition...\n. I'm changing everything I can. Here's what I see: http://cl.ly/3047330u1V19\n. So you're saying that when `form2` is selected, you want `type === 1` to show the text field and when `form1` is selected, you want `type === 2` to show the text field? I'm totally confused... What are you trying to accomplish?\n. Oh, I get what's going on. One gotcha with formly (that should probably be documented) is that you can't re-use the exactly same fields between multiple forms. Another thing that you should avoid doing is using the same form for for multiple models. This is because when angular watchers are run, the model for the field may not be the model that you're expecting. So instead, for this case, where you have the same fields representing multiple models, I recommend each form having it's own copy of the fields and each `formly-form` having one model that doesn't get entirely swapped out (individual properties can be swapped of course, just not the entire object).\n\nHere's an updated (working) plunker: http://plnkr.co/edit/z9SHYESTDGNHCN1bn0AX?p=preview\n. If this resolves your issue, please close it :-)\n. Sure, I copied the formFields upfront because I knew how many I needed, but you could easily copy them later, or create a function that returns a fresh copy of the fields. Like so:\n\n``` js\nfuncton getFields() {\n  return [\n    // your fields\n  ];\n}\n```\n\nthis would also ensure that each instance of the fields is unique. Then just invoke that every time you need a new copy.\n. Well, that all depends on how many forms you've got... Let's move this to [gitter](https://gitter.im/formly-js/angular-formly) so we can chat more quickly.\n. (\u00f3 \u00ec_\u00ed)=\u00f3\u00f2=(\u00ec_\u00ed \u00f2) Good luck!\n. ... Github... Messed up my emoji... `(\u00f3 \u00ec_\u00ed)=\u00f3\u00f2=(\u00ec_\u00ed \u00f2)`\n. I'm not sure I understand your question... It sounds like you know what to do. You have the right idea that you'll want to create a custom template for this functionality. From there you can do whatever you like. See [the wiki](https://github.com/formly-js/angular-formly/wiki/Tips-&-Tricks#custom-templates) on custom templates for what's available.\n. And what I was saying is that the option \"mask\" doesn't have to be implemented in formly for you to use it in a custom template. Either way, we're definitely not going to implement it in formly core as it wouldn't make sense. If you would like it added to one of the template libraries, create an issue there and we can discuss it...\n. What version of angular-formly are you using? The current version of master has significant changes from the released version. I recommend using the latest version in master as we'll be releasing this very soon and it comes with a lot of improvements.\n\nNote, that in the latest (master) version, the attribute has changed from `result` to `model` and the `options` attribute has been removed.\n\nJust by looking at your code, it appears you're doing everything else just fine. If making those changes doesn't fix your issue, could you please provide an example by cloning [this jsbin template](http://jsbin.com/biqesi/edit) (File -> Clone)? Thanks!\n. Great! I'm glad you got it working. Let us know if you need any more help. Thanks!\n. So, just to confirm, you want the user to be able to check multiple of those right? Or are they limited to only one? If they're limited to one, then just use the radio button. If you just want to have one field label associated with multiple checkboxes (each with their own label) then you'll have to make your own template. I would recommend copying the radio button template and changing it to a checkbox. Like so:\n\n``` html\n<div class=\"radio-group\"\n     ng-class=\"{'has-error': options.formControl.$invalid}\">\n    <label class=\"control-label\">\n        {{options.label}}\n        {{options.required ? '*' : ''}}\n    </label>\n    <div class=\"radio\"\n         ng-repeat=\"(key, option) in options.options\">\n        <label>\n            <input type=\"checkbox\"\n                   formly-dynamic-name=\"id + '_'+ $index\"\n                   formly-custom-validation=\"options.validators\"\n                   id=\"{{id + '_'+ $index}}\"\n                   aria-describedby=\"{{id}}_description\"\n                   ng-value=\"option.value\"\n                   ng-required=\"options.required\"\n                   ng-model=\"$parent.model[$parent.options.key || $parent.index]\">\n            {{option.name}}\n        </label>\n        <p id=\"{{id}}_description\"\n           class=\"help-block\"\n           ng-if=\"option.description\">\n            {{option.description}}\n        </p>\n    </div>\n</div>\n```\n. @maryampashmi, it's because you have the `hiddenWhenUnchecked` field as part of the `options` of the `checkbox-template` field. Also, unless your template is doing something interesting/odd, `options` shouldn't have a `key`. Your `hide` `expressionProperty` should reference `Q2` being the value of the `more` option. Try this:\n\n``` json\n{\n    \"key\": \"Q2\",\n    \"type\": \"checkbox-template\",\n    \"label\": \"What are the most important language to learn?\",\n    \"options\": [\n      {\n        \"name\": \"english\",\n        \"value\": \"eng\"\n      },\n      {\n        \"name\": \"spanish\",\n        \"value\": \"spnsh\"\n      },\n      {\n        \"name\": \"french\",\n        \"value\": \"frnch\"\n      },\n      {\n        \"name\": \"more\",\n        \"value\": \"more\"\n      }\n    ]\n  },\n  {\n    \"key\": \"hiddenWhenUnchecked\",\n    \"type\": \"text\",\n    \"line\": 4,\n    \"label\": \"Please write down if you consider another languages\",\n    \"placeholder\": \"chinese\",\n    \"expressionProperties\": {\n      \"hide\": \"model.Q2 !== 'more'\"\n    }\n  }\n```\n\nIf that doesn't work, please provide an example using [this jsbin](http://jsbin.com/biqesi/edit) as a template.\n. @maryampashmi, did this resolve your issue? Please close this issue if so.\n. Good point. I'm actually in the process of creating a series on egghead.io for angular-formly. Stay tuned! :D\n. What you're experiencing is why the pre-built templates don't support ng-pattern already. You have a few options. You can either:\n1. Create a custom template that uses ng-pattern (called `pattern-input` for example) and just use it when you need to supply a pattern\n2. Use a `validator` instead (I recommend this) where you validate it based on regex.\n\nGood luck\n. @rahil471, did this resolve your issue? Please close this issue if so.\n. Closing this. Let me know if your issue was unresolved.\n. Whoops, can't believe we didn't see that earlier. I'm not certain that it's worth fixing at this point. I'll be releasing 2.0.0 in the next week or two anyway. Also, `master` and `1.0.0` have some significant differences. So if you're trying to compare your code with the two, you're going to have a hard time.\n. Good question... Unfortunately, this is not currently possible, though I wanted it to be #132.\n\nHowever! I closed #132 because there's a reasonable workaround. From the #132:\n\n---\n\nThis can be accomplished by specifying a model for the field like so:\n\n``` js\n$scope.foobar = {\n  foo: {\n    bar: 'hello'\n  }\n};\n$scope.fields = [{\n  model: $scope.foobar.foo,\n  key: 'bar'\n}];\n```\n\n``` html\n<formly-form result=\"foobar\" fields=\"fields\" />\n```\n\nThis is supported as of 9f10f57\n\n---\n\nHopefully that's a reasonable workaround for you!\n\nIf you want to take a whack at a PR to support `'name.first'` that would be way awesome because I think it's a much better api. However, there are some issues with using getter/setters with ng-model-options (which I mention in [my egghead lesson](https://egghead.io/lessons/angularjs-new-in-angular-1-3-ng-model-options-getters-and-setters) on it).\n. One thing that we may consider is simply syncing an internal value with an external value using $watch... This would avoid the use of a getter/setter... But that may not be the right approach...\n\nP.S. Thanks for angulartics! :D\n. There were big breaking changes from 1.0 to 2.0. But what's in matter\nshould be compatible with 2.0. See the changelog. :-D\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Jan 25, 2015 4:33 AM, \"ShMcK\" notifications@github.com wrote:\n\n> I recently noticed that the Lumx templates weren\u2019t binding with\n> Angular-Formly 2.0, though working fine on 1.0. Are there breaking changes\n> with 2.0 to update to or are 'things just blowing up but it\u2019s going to be\n> awesome'? Looking forward to progress.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/155.\n. Also, if you've seen [the new site](https://formly-js.github.io/angular-formly), we're using jsbin to do examples now. Would love to see some LumX examples on there :-) https://github.com/formly-js/angular-formly/edit/master/demo/app/states/root/components/data/examples.js\n. Thanks. Maybe you can provide me with some feedback.\n\nI've been thinking about making a change to the field config api to make things more clear what is for templates and what is for formly core. So changing the api to be this:\n\n``` javascript\n{\n  type: 'text', // or template/templateUrl\n  key: 'first',\n  wrapper: 'someWrapper', // new api in master, you'll love this one. You may actually want to build your templates with this and wait for me to release this officially. Should be in the next few days. Also, the api is not finished because I'm planning on being able to specify an array where the first wrapper would be wrapped in the second wrapper and so on :-D\n  model: vm.user.name,\n  expressionProperties: {},\n  data: {}, // reserved for users\n  modelOptions: {}, // currently created in formly core, but I'm thinking that we should pull it out and let this be part of the template\n  watcher: {},\n  validators: {}, // this is technically used only in the template using the formly-custom-validation directive. So perhaps it should go in the templateOptions? But I think that all templates that use ng-model should support validators so it may be better just to keep it here.\n  templateOptions: { // and here's the change. All template-specific options would be moved to here\n    label: 'First Name',\n    placeholder: 'Please be honest',\n    required: true,\n    options: [],\n    description: 'Enter your first name so we can know what it is',\n    // etc...\n  }\n}\n```\n\nWhat do you think? I've presented on formly, and the biggest confusion for people was figuring out what was part of the formly core and what was necessary/supported by the template library. I think this api makes it much more clear. I'm anxious to get your feedback so I can make this change if you think it would be useful. We could then cut a 3.0.0 release. And don't worry, it wont drag on like the 2.0.0 :-) I'm speaking on formly at [ng-nl](http://ng-nl.org) next week, so I'll want to cut a new release before then.\n\nSo, anyway, I really like this new api. I think it's more clear. Let me know what you think :-)\n. Actually @ShMcK, I still want to keep `type`. I was just saying that you can still specify a `type` OR a `template` OR a `templateUrl`. With this new paradigm, you would have a `templateOptions.type` to specify a different type for the `input` template type.\n\nI'm working on documenting the `wrapper` api a little better. It's pretty cool. You can have wrappers in wrappers, which should make ng-messages and labels really handy! It's mostly tested and I'm going to have an example on the site for it as well so you should be able to figure out how to leverage it fairly easily.\n\nI'm going to leave `modelOptions` and `validators` where they are. I think it makes sense to keep them there.\n\nBut be aware that I am going to move all template configuration to `templateOptions` and I'm going to throw an error if anyone specifies a property that does not belong in the main configuration. Users will have free reign over both the `data` and `templateOptions` objects, but the rest of the field api will be limited to what is explicitly allowed.\n\nThanks for working with me on this as I try to make this the best forms abstraction for angular :-)\n. Note, I'm also changing `setTemplate` and `setTemplateUrl` to simply `setType`. Keep an eye on the README for that simpler api.\n. I've been having a lot of fun this evening making a bunch of changes. Most of them will simply require you to change from `options` to `options.templateOptions`. Also, there are several other nice updates as well (including wrapped wrappers). I recommend taking a look at how I altered the other template libraries (like [bootstrap](https://github.com/formly-js/angular-formly-templates-bootstrap) to see what changes you'll need to make. Also check out [the changelog](https://github.com/formly-js/angular-formly/blob/master/CHANGELOG.md).\n. Also, be advised that I've released a beta version of this to npm. You can `npm install angular-formly@3.0.0` to see it.\n. Terrific! I want to wait until your library is up to date before releasing the next version to make sure that you're able to go through and double check the api. I want you to let me know if I was just being crazy or something :-)\n. Hi @ShMcK, I'm actually in Sweden right now, but still suffering from jetlag. So sorry I wasn't available earlier. Here are a few things:\n- Hopefully the wrappers will be sufficient to help you avoid repeating yourself\n- `options: []` for radio buttons are specific to radio buttons and are not needed at all by formly core. That's the basic premise of everything. If it's not common to all templates (ie, used by formly core) then it belongs in either `templateOptions` or in `data` (though `data` is more reserved for users, not template writers).\n- I thought about using `template` instead of the more verbose `templateOptions`. However, `template` is already in use because you can specify a `template` instead of a `type` or `templateUrl`\n- I'm thinking that perhaps it may be nice to have somehow a way that formly would attach the `ng-required`, `ng-disabled`, etc. directives based on the `templateOptions` automatically for you. But that would require a recompilation of the template which would likely lead to a performance issue. And I believe that formly actually already has poor performance sometimes so I'd like to avoid making it worse. But I think I would like to explore this possibility as it would make the templates MUCH easier to write.\n\nThanks for your work on this! Please let me know if there's anything you'd like me to do. I think I'll look into that last point. If there's a way I can do this without hurting performance, I think I will because that would be great!\n. Excellent! :-)\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Feb 5, 2015 12:53 AM, \"ShMcK\" notifications@github.com wrote:\n\n> I see what you mean now about options: [] & templateOptions and I'm happy\n> with that part of the API.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/155#issuecomment-72966392\n> .\n. A couple thoughts:\n- On the fm.formFields preview on the right, I would actually make a copy of the fields in your controller and display those. Formly attaches several things to the fields that are not entirely necessary showing (like model options or the form control)\n- Speaking of the form control, if you open your console, you'll notice some warnings complete with links to explanations. Look into those :-)\n\nIt could be that last one is related to the `select` components not working, but I'm not certain about that...\n. Just playing around with one of those selects, it appeared that it may have just been a css issue. I found the parent element of the dropdown and the opacity was set to 0. I changed it to 1 and everything started working...\n. @abodacs, could you be more specific? They seem to be working for me...\n. Well, I fixed it as much as I could, but the rest is [up to jsbin](https://github.com/jsbin/jsbin/issues/2254)\n. For now, you can click \"load unsafe scripts\" and that'll make things work for mixed https and http.\n\n![screen shot 2015-02-01 at 10 01 10 pm](https://cloud.githubusercontent.com/assets/1500684/5993853/e5b05378-aa5d-11e4-9a63-4613ca2254f8.png)\n. @abodacs, so the \"solution\" is to force non-ssl because the jsbin examples will come from the community and I can't force people to upgrade to jsbin pro (which is how you enable ssl for jsbin) so now if you come to the page with https, it will downgrade you to http... :-(\n. @abodacs, I would, except the original issue is still valid. I still want more examples on the site :D Feel free to submit a PR if you have time to create a specific example! :D\n. Thanks for the tip @JamyDev. I think that's a good idea. I'll try to get it in soon.\n. This is now supported: e29ad3dc37e46b9dbab7b05a77185b6396684e63\n\nNote: This is a breaking change and will result in a 3.0.0 release. I hope this release comes soon. Also note, with this 3.0.0 release comes `templateWrappers` which you're going to love if you use many custom templates :-)\n. To be more clear, it's going to be shipped with other breaking changes. I think the simple errors thrown wouldn't be a problem necessarily since you couldn't do this in 2.0 anyway, but I've got a bunch of other things that are definitely breaking changes that this will ship with. Should be a much easier migration from 2.0 to 3.0 than it was from 1.0 to 2.0.\n. Absolutely. You simply need to [create a custom template](http://formly-js.github.io/angular-formly/#/example/intro/custom-templates) and use those directives in your custom template. I'm actually doing this currently with ui-select.\n\n``` html\n<div class=\"input-group col-md-12\">\n  <div class=\"form-control\"\n       type=\"text\"\n       name=\"{{::id}}\"\n       ng-attr-placeholder=\"{{options.placeholder}}\"\n       ng-required=\"options.required\"\n       formly-custom-validation=\"options.validators\"\n       az-autofocus=\"{{options.focus}}\"\n       ui-select2=\"options.data.select2Options\"\n       ng-model=\"model[options.key || index]\"\n       az-ui-select2-disabled=\"options.disabled\"></div>\n</div>\n```\n\nThere are likely a few things in there that you'd need to change from my example, but the concept is fairly straightforward :-) Good luck!\n. Also, if you do get this implemented, I would love to have an example on [the website](https://formly-js.github.io/angular-formly/). Create an example by following the instructions [here](https://github.com/formly-js/angular-formly/edit/master/demo/app/states/root/components/data/examples.js)\n. @piernik, do we need to keep this issue open?\n. Thanks @metasean! It's been fixed.\n. I've got an idea. What if we gave you something like this:\n\n``` javascript\nformlyConfigProvider.templateManipulators.preWrapper.push(function(template, fieldOptions, scope) {\n  // do whatever you want to here and return the template. You can even return a promise\n  // this will be called before all of the wrappers have have run\n});\n```\n\n``` javascript\nformlyConfigProvider.templateManipulators.postWrapper.push(function(template, fieldOptions, scope) {\n  // this will be called after all of the wrappers have have run\n});\n```\n\nWhat do you think about that? I think I sort of like that. Would allow you to add classes or styles or even wrap it further. AND it would allow you to add all the `ng-` directives we were talking about automagically :-)\n. Saving template code is the main usefulness. But you need to make sure that\nyou're specifying the right types on the wrapper when it's defined or\nspecifying the right wrappers when the type is defined. That may be a bit\nconfusing....\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Feb 5, 2015 3:44 AM, \"ShMcK\" notifications@github.com wrote:\n\n> I just realized formlyConfigProvider.setWrapper({}) forces all of the\n> wrappers on the template. As a result I was getting 3 sets of ngMessages on\n> my text-fields, one for each wrapper. I'm not sure the usefulness of\n> setWrapper other than saving a little template code.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/161#issuecomment-72984833\n> .\n. So, this is amazing. I am seriously considering removing `wrapperOptions` in favor of the new `templateManipulators` pipeline (and therefore only have one pipeline and no longer have a need for the pre and post wrapper ones). Let me know what you think: https://github.com/formly-js/angular-formly#templatemanipulators\n\nI just want to verify with you that it covers all use cases you can think of. If so, I'm going to go through and fix the bootstrap and vanilla templates to support this. Also, formly core has a built-in `templateManipulator` that you may find interesting. It's the reason that `ngModelAttrs` was introduced: https://github.com/formly-js/angular-formly#ngmodelattrs-object\nSee an example of that in code [here](https://github.com/formly-js/angular-formly/blob/d55483204cb41d7196565730517d7cf72f89fbbf/local-examples/components/app.js#L35)\n\nLet me know what you think. I'm planning on removing wrappers on the 6th (tomorrow depending on your timezone) because it's such a cleaner, more reasonable api I think.\n. Yeah, they're way way awesome :-D Not only will it Dave boat in templates,\nbut it saves a ton on unnecessary watchers. Look in the local-examples\ndirectory, in components/app.js\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Feb 6, 2015 8:18 AM, \"ShMcK\" notifications@github.com wrote:\n\n> I hadn't realized the power of ngModelAttrs. They can drastically reduce\n> the bloat on form fields.\n> \n> I think the docs could use an example. I'm not entirely sure how to use\n> them.\n> \n> Are they set by an ngModelAttrs array that can hold multiple ng-directives\n> with values?\n> \n> ```\n> ngModelAttrs = ['ng-required': true, 'ng-pattern': '/[A-Za-z]/', 'ng-disabled': false]\n> ```\n> \n> Or can they only be set and changed in expressionProperties?\n> \n> expressionProperties: {\n>     options.ngModelAttrs[ng-required] = true,\n>     options.ngModelAttrs[ng-pattern] = /[A-Za-z]/\n>     options.ngModelAttrs[ng-disabled] = false\n>     }\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/161#issuecomment-73195213\n> .\n. /Dave/save/s\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Feb 6, 2015 8:23 AM, \"Kent C. Dodds\" kent@doddsfamily.us wrote:\n\n> Yeah, they're way way awesome :-D Not only will it Dave boat in templates,\n> but it saves a ton on unnecessary watchers. Look in the local-examples\n> directory, in components/app.js\n> - Kent C. Dodds\n> \n> (Sent from my mobile device, please forgive typos or brevity)\n> On Feb 6, 2015 8:18 AM, \"ShMcK\" notifications@github.com wrote:\n> \n> > I hadn't realized the power of ngModelAttrs. They can drastically reduce\n> > the bloat on form fields.\n> > \n> > I think the docs could use an example. I'm not entirely sure how to use\n> > them.\n> > \n> > Are they set by an ngModelAttrs array that can hold multiple ng-directives\n> > with values?\n> > \n> > ```\n> > ngModelAttrs = ['ng-required': true, 'ng-pattern': '/[A-Za-z]/', 'ng-disabled': false]\n> > ```\n> > \n> > Or can they only be set and changed in expressionProperties?\n> > \n> > expressionProperties: {\n> >     options.ngModelAttrs[ng-required] = true,\n> >     options.ngModelAttrs[ng-pattern] = /[A-Za-z]/\n> >     options.ngModelAttrs[ng-disabled] = false\n> >     }\n> > \n> > \u2014\n> > Reply to this email directly or view it on GitHub\n> > https://github.com/formly-js/angular-formly/issues/161#issuecomment-73195213\n> > .\n. The fields need to be part of the templateOptions object :-)\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Feb 7, 2015 7:24 AM, \"ShMcK\" notifications@github.com wrote:\n\n> I'm trying to setup flex-box with angular-formly-templates-lumx.\n> Unfortunately, I haven't been able to get it to work based on this jsbin\n> example http://jsbin.com/jaloz/2/edit?html,js,output.\n> \n> Error: `Formly Error: You have specified field properties that are not allowed: \"fields\"`.\n> \n> Questions\n> 1. How could I add a custom field fields: [] to my template?\n> 2. Is it possible to define and add other custom fields? Hmm...\n> \n> ---\n> \n> Current Proposed API lx-wrapper-flex-container API\n> \n> {\n>   'key': 'modelName',/\\* type or wrapper? type is required by formly _/\n>   'type': 'lx-wrapper-flex-container',\n>   'templateOptions': {\n>     'container': 'row', // row | column | row-reverse | column-reverse\n>     'wrap': 'nowrap', // nowrap | wrap | wrap-reverse\n>     'align': 'space-between', // flex-start | flex-end | center | space-between | space-around | stretch\n>     'class': 'bgc-red-500', // ng-class\n>     'style': 'height: 200px'\n>   },/_ as in the jsbin example. _/\n>   'fields': [{\n>     /_ 'lx-wrapper-flex-item' fields here */\n>   }]\n> }\n> \n> lx-wrapper-flex-item API\n> \n> {\n>   'key': 'modelName',\n>   'type': 'lx-whatever-type'\n>   'wrapper': 'lx-wrapper-flex-item', // <- add the wrapper\n>   'templateOptions': {\n>     'flex': {\n>       'item': '1' // flex-value number, higher weights the space ratio more\n>       'order': '1', // value for ordering boxes\n>       'class': 'bgc-red-500' // ng-class\n>     }\n>   }\n> }\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/161#issuecomment-73352297\n> .\n. I would recommend changing the \"class\" property with \"className\" so I don't\nhave to put it in quotes if I don't want to.\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Feb 7, 2015 7:28 AM, \"Kent C. Dodds\" kent@doddsfamily.us wrote:\n\n> The fields need to be part of the templateOptions object :-)\n> - Kent C. Dodds\n> \n> (Sent from my mobile device, please forgive typos or brevity)\n> On Feb 7, 2015 7:24 AM, \"ShMcK\" notifications@github.com wrote:\n> \n> > I'm trying to setup flex-box with angular-formly-templates-lumx.\n> > Unfortunately, I haven't been able to get it to work based on this jsbin\n> > example http://jsbin.com/jaloz/2/edit?html,js,output.\n> > \n> > Error: `Formly Error: You have specified field properties that are not allowed: \"fields\"`.\n> > \n> > Questions\n> > 1. How could I add a custom field fields: [] to my template?\n> > 2. Is it possible to define and add other custom fields? Hmm...\n> > \n> > ---\n> > \n> > Current Proposed API lx-wrapper-flex-container API\n> > \n> > {\n> >   'key': 'modelName',/\\* type or wrapper? type is required by formly _/\n> >   'type': 'lx-wrapper-flex-container',\n> >   'templateOptions': {\n> >     'container': 'row', // row | column | row-reverse | column-reverse\n> >     'wrap': 'nowrap', // nowrap | wrap | wrap-reverse\n> >     'align': 'space-between', // flex-start | flex-end | center | space-between | space-around | stretch\n> >     'class': 'bgc-red-500', // ng-class\n> >     'style': 'height: 200px'\n> >   },/_ as in the jsbin example. _/\n> >   'fields': [{\n> >     /_ 'lx-wrapper-flex-item' fields here */\n> >   }]\n> > }\n> > \n> > lx-wrapper-flex-item API\n> > \n> > {\n> >   'key': 'modelName',\n> >   'type': 'lx-whatever-type'\n> >   'wrapper': 'lx-wrapper-flex-item', // <- add the wrapper\n> >   'templateOptions': {\n> >     'flex': {\n> >       'item': '1' // flex-value number, higher weights the space ratio more\n> >       'order': '1', // value for ordering boxes\n> >       'class': 'bgc-red-500' // ng-class\n> >     }\n> >   }\n> > }\n> > \n> > \u2014\n> > Reply to this email directly or view it on GitHub\n> > https://github.com/formly-js/angular-formly/issues/161#issuecomment-73352297\n> > .\n. Woot! :-)\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Feb 7, 2015 7:32 AM, \"ShMcK\" notifications@github.com wrote:\n\n> My brain just went _click_!\n> \n> Gotcha, I'll just create an ng-repeat inside to handle the inner flex-item's.\n> Easy peezy.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/161#issuecomment-73352492\n> .\n. Oh yeah, I was going to mention that. After looking at it, I think you definitely need to do this because it adds a few things to your fields that are necessary (including the key if one is not specified, and it adds the watchers). Without the formly-form, you'll miss out on a few things that I think are important.\n. I'm not sure I know what you mean by binding to `model[options.key].fields`.... The fields should not be on the `model` at all. I think what you really want is what you have above: `fields=\"options.templateOptions.fields\"`\n. Is there not a link with that error? There should be a url link to a wiki that explains why you're getting that error and how to fix it. I'm guessing this is the error you're seeing: https://github.com/formly-js/angular-formly/wiki/Errors-and-Warnings#couldnt-set-the-formcontrol-after-timems\n. Basically, if that error is what I believe it is, you need to make sure that all of your `ng-model` attributes specify a `name` attribute or that the field config specifies `noFormControl: true`\n. And yes, I need to get some sleep :sleepy: \n. Yep! I appreciate you're help. We're building something awesome :D\n. @ShMcK you'll want to look at this commit: b02d0a652d956895e092125321196c0aca7969ab see the changes to tests, docs, and examples :-D You could also benefit from looking at these changes in templates bootstrap: https://github.com/formly-js/angular-formly-templates-bootstrap/commit/1e7d12876318f9dd4406c6ade77de2f61019102b Your life should be much easier now!\n. @gboersma, I'm glad to see you keeping up with what I'm doing with the latest stuff. It helps me get feedback when people try to use stuff that I'm building :-)\n\nThe reason I've decided to create `templateOptions` (which is such a big breaking change) is because it became confusing to determine what (in the field config object) is used in formly core (ie common regardless of template) and what is used in the template only. By restricting what properties you can put in the field config, it makes formly's api more consistent and easier to use. Also, formly is now able to warn you if you use it incorrectly (currently, it throws an error, but I plan on changing that to a simple warning).\n\n_Please note!_ I have a huge application with a LOT of field configurations. I'm not looking forward to updating all of these. So, to ease things a little bit, I just barely created this tool which I hope should be helpful when updating your form fields :-) cheers! http://jsbin.com/ruwoke\n. Oh, sorry, and to answer your actual question, unfortunately I don't think that I'm going to be able to add a backwards compatible option. Hopefully the little tool I created will suffice. I believe it should be everything you need to update your fields to the new standard. If you're using custom templates, that's a bit of a different story. You'll need to update those manually. Good luck!\n. I will not include this logic in formly core, but it should be very reasonable to do yourself before you pass the options to formly. Depending on how things are set up for you, it may be easiest to use an [http interceptor](https://egghead.io/lessons/angularjs-using-angularjs-interceptors-with-http) and do the conversion there. Obviously, this wouldn't allow you to keep your templates as they are. But it is likely that the template update bit is just a half hour change max.\n\nAs for the actual conversion function, because you're just dealing with json (rather than having to worry about functions) then [something like this](http://jsbin.com/yelodi/edit) should probably do it:\n\n``` javascript\n// test fields using the old method\nvar oldFields = [\n  {\n    label: 'Field 1',\n    required: true,\n    key: 'field1',\n    type: 'text',\n    expressionProperties: {\n      data: {\n        dataProp1: '$viewValue.length > 4'\n      },\n      hide: 'model.field2',\n      disabled: '!model.field3'\n    }\n  },\n  {\n    label: 'Field 2',\n    key: 'field2',\n    type: 'checkbox'\n  },\n  {\n    label: 'Field 3',\n    key: 'field3',\n    type: 'checkbox'\n  }\n];\n\nconsole.log('before', oldFields);\nvar newFields = convert(oldFields);\nconsole.log('after', newFields);\n\n// here's the actual convert function\nfunction convert(fields) {\n  var copy = fields;\n  var allowedProperties = [\n    'type', 'template', 'templateUrl', 'key', 'model',\n    'expressionProperties', 'data', 'templateOptions',\n    'wrapper', 'modelOptions', 'watcher', 'validators',\n    'noFormControl', 'hide'\n  ];\n  angular.forEach(copy, function(field) {\n    angular.forEach(field, function(val, prop) {\n      if (prop === 'expressionProperties') {\n        for (var eProp in val) {\n          if (allowedProperties.indexOf(eProp) === -1) {\n            val['templateOptions.' + eProp] = val[eProp];\n            delete val[eProp];\n          }\n        }\n        if (val.data) {\n          for (var dProp in val.data) {\n            val['data.' + dProp] = val.data[dProp];\n          }\n          delete val.data;\n        }\n      }\n      if (allowedProperties.indexOf(prop) !== -1) {\n        return;\n      }\n      field.templateOptions = field.templateOptions || {};\n      field.templateOptions[prop] = val;\n      delete field[prop];\n    });\n  });\n  return copy;\n}\n```\n. @gboersma, do you think this will be sufficient? Do we need to keep this issue open?\n. Thanks for being flexible. I'm trying to make this project the very best that it can be and that required a few breaking changes. Let me know if there's anything I can do to help.\n. Sorry, I haven't published that yet. Just do this:\n\nnpm install git://\ngithub.com/formly-js/angular-formly#84ba8248efa4fe54ac3d078e37cbf9959acc1bd3\n\n-Kent C. Dodds\n\nOn Fri, Feb 6, 2015 at 9:34 AM, ShMcK notifications@github.com wrote:\n\n> Based on this example from angular-formly/local-examples/components/app.js\n> :\n> \n> {\n>         type: 'input',\n>         key: 'myKey',\n>         ngModelAttrs: {\n>           bound: {\n>             'ng-maxlength': 6,\n>             'ng-disabled': false\n>           },\n>           unbound: {\n>             pattern: '\"^abcd|^qrst\"'\n>           }\n>         },\n>         templateOptions: {\n>           label: 'My Input',\n>           required: true,\n>           description: 'This is an awesome description'\n>         },\n>         expressionProperties: {\n>           'ngModelAttrs.bound[\"ng-disabled\"]': 'model.mine'\n>         }\n>       }\n> \n> I can't get ngModelAttrs to work with angular-formly-templates-lumx.\n> Using angular-formly@3.0.0 from npm.\n> \n> {\n>         key: 'switch1',\n>         type: 'lx-switch',\n>         ngModelAttrs: {\n>          bound: {\n>           'ng-checked': true\n>            }\n>         },\n>         templateOptions: {\n>           label: 'Switched Switch'\n>         }\n>       }\n> \n> The lx-switch template looks like this:\n> \n> <div class=\"switch\">\n>   <input type=\"checkbox\"\n>          id=\"{{::id + '_'+ $index}}\"\n>          class=\"switch__input\"\n>          ng-model=\"model[options.key]\"\n>          formly-dynamic-name=\"::id\"\n>          aria-describedby=\"{{::id}}_switch\"/>\n> </div>\n> \n> Any thoughts why?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/163.\n. Great! Do you think we can remove template wrappers?\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Feb 6, 2015 10:10 AM, \"ShMcK\" notifications@github.com wrote:\n\n> Working. It's a beautiful thing. Thanks!\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/163#issuecomment-73207312\n> .\n. Again, if you're going to use `::` in your templates, then that means you're running angular 1.3, and if you're doing that, then you don't need the `formly-dynamic-name`, simply do: `name=\"{{::id}}\"`. Should be more performant I think.\n. Great!\n\nWhat do you think about removing wrappers?\n\n-Kent C. Dodds\n\nOn Fri, Feb 6, 2015 at 1:30 PM, ShMcK notifications@github.com wrote:\n\n> Thanks! Once I get a full understanding of angular-formly, I'll start\n> contributing the jsbin docs as well.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/163#issuecomment-73229698\n> .\n. Could you jump on [Gitter](https://gitter.im/formly-js/angular-formly) really quick?\n. Do we need to keep this open?\n. Created a repo for this. Closing in favor of that: https://github.com/formly-js/formly-builder/issues/1\n. Formly doesn\u2019t wrap every `formly-field` in an `ng-form`, but it does wrap every `formly-form` in an `ng-form` is that what you\u2019re talking about? If you'd like to skip the `ng-form`, then I think this is doable. Especially because we're using es6 template strings it should be a breeze. I'll just have to move the template from a file to a function and allow you to specify an attribute that says that you don't want it in an `ng-form`. Should be very easy.\n. The api would probably be something like this:\n\n``` html\n<formly-form model=\"vm.model\" fields=\"vm.fields\" form=\"vm.form\" no-ng-form></formly-form>\n```\n\nThough, thinking about it now, I'm not sure why the presence of `ng-form` prevents rows/columns. Can't you just style the `ng-form`? You can add your own classes to the `formly-form` and it will be applied to the `ng-form`.\n. Closed with 3.0.3 208b851ebe886dd61c9311db08244bb330a91ce3\n. This is supported in version 5.2.0-beta.1. Thinking this will likely land. Here's [an example](http://angular-formly.com/#/example/form-options/reset-model)\n. This is supported as of 5.2.0 :-)\n. Thanks @juristr!\n. That's not a common use case, but one way to accomplish this would be via the `watcher`. You might do something like this:\n\n``` javascript\nwatcher: {\n  expression: 'options.hide',\n  listener: function(field, newVal, oldVal, scope) {\n    if (newVal) {\n      scope.fields.splice(scope.fields.indexOf(field), 1); // removes the field itself\n      delete scope.model[field.key]; // removes the field from the model\n    }\n  }\n}\n```\n\nI don't totally understand your use case, but doing this seems very odd to me and I would suggest finding another way to accomplish what you're trying to do.\n. Ah, I see, so you don't actually want to delete the property, you just want to change the value of the model. Well, the best way to accomplish this is likely still with a `watcher` but don't actually remove the field or use `delete`. Just set the value to null or an empty string. This is an edge case because the form's purpose is to represent the current state of the model, not alter it specifically. But if you wish to do this, I'd use `watcher`. Let me know if you have additional questions :-)\n. Oh, and please close this issue if you have it working and you're happy with the solution.\n. I'm not sure what you need more than [this example](http://formly-js.github.io/angular-formly/#/example/advanced/template-wrappers) for the template wrappers. I just added a [new example](http://formly-js.github.io/angular-formly/#/example/advanced/custom-controller-and-link) for custom controller and link functions. Let me know if there's anything else I can help you with!\n. I believe you could specify the name of the controller as a sting as long\nas it's been registered with angular and it should work. Haven't tried that\nmyself. For the link, it must be a function.\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn 13 Feb 2015 20:49, \"gboersma\" notifications@github.com wrote:\n\n> I think the custom controller and link example is what I am looking for.\n> But it is still not clear to me how I can declare my own controller\n> somewhere, and then pass it in (as opposed to declaring methods directly\n> within the setType call). So let's say I declare a module called 'forms'\n> and set the templates there. Can I define a controller for this module and\n> then pass it in when a call setType? Or define a new controller locally\n> within the module and then pass it in through setType?\n> \n> Sorry if some of this is basic angularJS. Still trying to understand how\n> to fit all the pieces together.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/171#issuecomment-74315246\n> .\n. Dear @ShMcK, you rock. Thanks for being an awesome OSS contributor! Or, as @aaronfrost would say: a \"bridge builder\" :-D\n. @stefanzweifel, let me know if there's anything that could be changed about the core library to make this process easier. I agree that this is a common thing many people will want to do, so I want to make it as easy as it can be without complicating the API.\n\nAlso, I would totally love for a team like yours who's doing Foundation work to own the [Foundation Templates](https://github.com/formly-js/angular-formly-templates-foundation) :D\n. So, I've been thinking about this a little bit, what would you think of an api like this:\n\n``` javascript\nvm.formFields = [\n  { /* field config */ },\n  [\n    { /* field config */ },\n    { /* field config */ },\n    { /* field config */ }\n  ],\n  { /* field config */ },\n  { /* field config */ },\n  [\n    { /* field config */ },\n    { /* field config */ }\n  ],\n  { /* field config */ }\n];\n```\n\nAnd then you pass the `vm.formFields` as the `fields` attribute on `formly-form` and `formly-form` would somehow logically group those together for you. I'm not sure how this would best be accomplished. But I like to work \"backward\" and consider the desired api first, then come up with a solution (I guess that's sort of the TDD style). Would this be an acceptable API?\n. I'm wondering what this would actually result in. Right now, `formly-form` just uses `ng-repeat` on the fields so they wind up being siblings of one another. I'm thinking that with this array approach, it might group them into a `div` with a class like `formly-field-group` or something. Do you think this would really solve the problem?\n. > it adds complexity to the implementation. Which is exactly what we are trying to avoid.\n\n:+1: to that @GuilhermeMedeiros. I think I may have misunderstood your other comment. But I think that formly can do a little more work for you and I don't think that adding the ability to specify fields as an array of grouped fields would complicate the implementation too much. But I'm still uncertain of whether this will actually solve the problem. Perhaps the issue in my understanding is that where I'm using formly, the label is on the left rather than on top, so putting fields in a grid layout doesn't make as much sense for me.\n. @GuilhermeMedeiros, I'm not certain that I understand what you're suggesting. If I understand it correctly, it feels like a bit of a more complicated API. Also, what you suggested with the `formly-field` is sort of possible because the `formly-field` directive exists (you simply need to provide the proper attributes). Anyway, I'm sorry if I'm having a hard time understanding what you're suggesting. Thanks for your patience.\n. Thanks @GuilhermeMedeiros! I would really appreciate any help you can give on implementing this functionality. Reach out to me when you think you've got time!\n. @stefanzweifel, perhaps. The thing is that there are a few \"right\" ways to do this I think which makes it difficult to decide which is the real \"right\" way.\n. So, looking for feedback. I'm guessing that the vote right now is to create a separate repository/module for this. There are actual several directives in the angular-formly module that could go into this category I think. Do you think that we should create a new repo called `angular-formly-template-utils` and use that for all of these utility directives? I'm also thinking that it may just be easier to stick in the `formly-area` directive into formly proper. I'm sort of torn and not certain of the best approach for this.\n. I've created an example of how to accomplish this on [the website](http://formly-js.github.io/angular-formly/#/example/other/advanced-layout). I think that will have to be sufficient for now.\n. Here's the bootstrap version:\nhttp://angular-formly.com/#/example/bootstrap-specific/advanced-layout\nHere's the flex version:\nhttp://angular-formly.com/#/example/other/advanced-layout-flex\n\nOn Fri, Sep 18, 2015, 4:54 PM Aubrey Taylor notifications@github.com\nwrote:\n\n> Looking for a solution to this but example link is broken. Can someone\n> restore it? Thanks!\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/173#issuecomment-141588633\n> .\n. Thinking we're going to use readme.io for this. Need #175 to be finished before we can move forward though.\n. Introducing http://docs.angular-formly.com\n. formly-js first. If you want to make an angular specific spin on that later\nthen that's cool to, but the original logo should appeal to regular\nJavaScript I think.\n\nI'm thinking something very simple. Like a few lines in a box or something.\nI dunno... I'm no designer...\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Mar 3, 2015 10:17 PM, \"ShMcK\" notifications@github.com wrote:\n\n> Any specs on the logo?\n> - Is it for Angular-Formly in particular or Formly-JS entirely?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/175#issuecomment-77098734\n> .\n. Closed, thanks to @raibutera!\n. No, you're fine. angular-formly depends on at LEAST Angular 1.2.x, but if you have a newer version that's terrific! You just need to specify a resolution. With npm, I can specify angular 1.2.x as a peer dependency and you don't get this, but with bower, this is the best we can do. Let me know if you need help getting this to work, but you should be able to simply follow the bower cli to specify a resolution for the conflict.\n. I know that it's possible because I've done it. So if you have any trouble, don't hesitate to come back and ask for help :D\n. What I mean is I've gotten angular-formly to work with angular 1.3.x using bower :-)\n. Woot! Let me know if you need any help or if additional [examples](http://formly-js.github.io/angular-formly/#/) would be helpful to you. As always, contributions are welcome (especially examples!)\n. :smile: :+1:\n. Yes, you'll want to use the template cache. I'll give a more complete\nexample later (on mobile now). But look into plugins for build systems to\nautomatically add your templates to the template cache.\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Feb 17, 2015 4:21 PM, \"gboersma\" notifications@github.com wrote:\n\n> When displaying a page with a formly form for the first time, the form\n> takes about 1/2s to display. Initially, I thought it was due to server lag,\n> but after looking at it, the client already has all of the data from the\n> server.\n> \n> To narrow it down, I added some test code to print out the value of the\n> data before displaying the form (using an AngularJS ng-repeat directive).\n> The data is displayed immediately, the form follows about 1/2s later- but\n> only on the initial display of the page.\n> \n> It seems to me that formly is the most likely culprit here. Any\n> suggestions as to how to improve performance? I notice that in the vanilla\n> templates, each template is cached. Could this make a big difference?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/177.\n. Great! I definitely recommend using a build system, but either way works I\nguess. If this solves your issue, please closer this issue. Thanks! Let me\nknow if I can be of any more help! :-)\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Feb 17, 2015 5:07 PM, \"gboersma\" notifications@github.com wrote:\n\n> I think I got it. I created a run method for my module and passed in $http\n> and $templateCache. I then load each of the templates into the cache:\n> \n> $http.get('path/to/template.html', {cache:$templateCache});\n> \n> I guess I could also have each template loaded directly from a string\n> (i.e. from a build system plugin, I'm guessing) and completely avoid the\n> server round-trip, but this is good enough for me.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/177#issuecomment-74783702\n> .\n. What are the actual versions that are downloaded with those definitions? The example in the readme is for the latest version which is version 3.1.6. Please update to the latest version and let me know if that fixes things for you.\n. I'm not certain I understand the problem you're describing. Could you make an example by cloning this [jsbin template](http://jsbin.com/biqesi/edit)\n. The example you provided doesn't work because it doesn't actually create an angular module. You also weren't bootstrapping the module and weren't specifying the controller. Here's a [fixed example](http://jsbin.com/xuboxu/1/edit).\n\nI realize that this is only a small example, but I think the problem in your actual repository is that you're not actually specifying a controller in your state definition. You should add a `controller: 'formController'` to [this line](https://github.com/maryampashmi/Data-Procurement-Repository/blob/master/app.js#L82).\n. It sounds like you're having problems with UI router. I'm not certain how to help you. Let me know if you have specific questions. Good luck!\n. That warning should link you to [this](https://github.com/formly-js/angular-formly/wiki/Errors-and-Warnings#couldnt-set-the-formcontrol-after-timems). If it doesn't, that's a bug and should be fixed. Does it not send you to that link?\n. Regardless, the way you fix it is that for those you specify `noFormControl: true` as property and that will fix it. You could specify it as `defaultOptions` if it's registered for types.\n. Great! :D\n. Oh, ok. Do you need to reopen this issue then?\n. Thanks @jameswyse, I actually video chatted with Victor a little bit to talk about the formly api and I would like to think that had some sway on the decision to include a more imperative approach. Hoping that angular-formly will be rendered useless by Angular 2. However, my plan is to make the port anyway so people can upgrade to Angular 2 without the need to change their form configurations. Then they can migrate from angular-formly to Angular 2's built-in stuff.\n. Created the [formly-js/angular2-formly](http://github.com/formly-js/angular2-formly) repo. It's pretty rough, but I'm closing this issue in favor of that. And by pretty rough, I mean, it's nothing right now...\n. Would love your input @ShMcK and @mhartington\n. I actually created apiCheck.js for this purpose:\nhttps://github.com/kentcdodds/apiCheck.js\n\nI've been planning on bringing apiCheck into formly as a dependency and may\nexpose that to types via the API you described. Just need to work on the\nerror messaging a little better...\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Feb 23, 2015 6:51 PM, \"ShMcK\" notifications@github.com wrote:\n\n> These could be added in the setType stage when creating a template. It\n> would be easy to add:\n> \n> formlyConfigProvider.setType({\n>     name: name,\n>     templateUrl: templateUrl,\n>     optionTypes: optionTypes  /*\\* optionSchema? */\n> })\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/183#issuecomment-75683870\n> .\n. :blush: thanks :-) It's written in vanillajs and works on in node too :-)\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Feb 23, 2015 7:05 PM, \"ShMcK\" notifications@github.com wrote:\n\n> I should keep a better eye on your prolific Github work. There are\n> definitely a lot of great ideas that can be exchanged between React &\n> Angular, great work with apiCheck.js!\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/183#issuecomment-75685234\n> .\n. I think it's good for beta now. It's just the error messaging that I want\nto improve. But everything else works quite well.\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Feb 23, 2015 7:24 PM, \"ShMcK\" notifications@github.com wrote:\n\n> After reading the intro docs, I'm quite happy with apicheck.js. Let me\n> know when it's ready and I'll give it a beta run.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/183#issuecomment-75686968\n> .\n. Not currently. I could pretty easily add an api like this:\n\n``` javascript\nformlyConfig.setType({\n  name: 'input',\n  validateOptions: function(options) {\n    // validate your stuff here, throw your own errors or log your own warnings\n  }\n});\n```\n\nWith that, you could do something like this:\n\n``` javascript\nformlyConfig.setType({\n  name: 'input',\n  validateOptions: function(options) {\n    var templateOptionsCheck = apiCheck.shape({\n      label: apiCheck.string,\n      placeholder: apiCheck\n    });\n    templateOptionsCheck.strict = true; // must have all and no more than specified stuff\n\n    apiCheck.throw(apiCheck.shape({\n      templateOptions: templateOptionsCheck,\n      data: apiCheck.shape({\n        someProperty: apiCheck.any\n      })\n    }, arguments);\n  }\n});\n```\n\nOr you could roll your own api check stuff. What do you think?\n. So, in this scenario, formly doesn't actually care what you do. It simply passes you `options` and allows you to `throw` or `warn` or `alert` or whatever the heck you want. In my example, I'm using `apiCheck.throw` which will throw an error if the checks fail. I'm passing `arguments` because that's the api to `apiCheck` (the first argument is your check function and the second argument expects you to pass `arguments`) so it actually is using `options` though not explicitly as a variable.\n\nI suppose that formly could take a more opinionated approach, but I fear this would reduce flexibility.\n. Ok, the api should be pretty simple to setup. I think I'm going to make apiCheck a dependency of formly, and when that happens, you'll be able to use apiCheck by default because you depend on formly, so you'll get apiCheck. I'll make apiCheck injectable as well so you'll be able to simply inject it and not worry about where it came from :-)\n. Oh, by the way, this is supported as of [3.3.0](https://github.com/formly-js/angular-formly/blob/master/CHANGELOG.md#330) :-)\n. formly uses `apiCheck` internally to validate its own apis (like `setType`). So if you're seeing that it's because you're calling `setType` wrong or there's a problem with the `apiCheck` config for that function. I actually have a bunch of stuff locally around that stuff. If you can hold off for a day or so, I'll get it in and then you can play with it :-)\n. I think it'd be more like this:\n\n``` javascript\nFIELDS.map(function (field) {\n        formlyConfig.setType({\n          name: _prefixer(field.name),\n          templateUrl: _fieldTemplateUrl(field.name),\n          validateOptions: field.validateOptions || function (options) {\n            apiCheck.throw(apiCheck.object, arguments);  // <--- validateOptions key\n          }\n        });\n      });\n```\n. I can see where what you're suggesting would be beneficial. Maybe that can be a feature added a little later down the line. Right now, you're responsible for throwing your own error or logging your own warnings.\n. There's an example for this now: http://formly-js.github.io/angular-formly/#/example/custom-types/validate-options\n. Does this still need to be open?\n. You can add an `expressionProperty` for `validation.show` that returns true when you want it to show and null otherwise.https://github.com/formly-js/angular-formly/blob/master/README.md#validation-object\n. I do this at work. I'll create an example for you and put it on the website\n:-)\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Feb 28, 2015 4:59 AM, \"Adam\" notifications@github.com wrote:\n\n> Hey, thanks for answer. validation.show function as an expressionsPropery\n> did not want to call my custom valdiation function, so I did this:\n> \n> _the concept_:\n> - two fields: name, and nameAgain,\n> - nameAgain has a validator, which check if name === nameAgain,\n> - when we change name, the nameAgain validator function should be\n>   called\n> \n> _code_:\n> \n> vm.model = {};\n> vm.fields = [{\n>     key: 'name',\n>     type: 'input',\n>     watcher: {\n>       expression: 'model.name',\n>       listener: function(field, _new) {\n>         var nameAgainField = vm.fields[1]; //that's pretty weak...\n>         var nameAgainFormControl = nameAgainField.formControl;\n>         nameAgainFormControl && nameAgainFormControl.$validate();\n>       }\n>     },\n>     templateOptions: {\n>       label: 'Enter your name',\n>       required: true\n>     },\n>   }, {\n>     key: 'nameAgain',\n>     type: 'input',\n>     validators: {\n>       nameAgain: {\n>         expression: function(viewValue, modelValue) {\n>           return (viewValue || modelValue) === vm.model.name;\n>         },\n>         message: '$viewValue + \" is not equal to your name!\"'\n>       }\n>     },\n>     templateOptions: {\n>       label: 'Enter your name again',\n>       required: true\n>     }\n>   }\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/185#issuecomment-76523216\n> .\n. Here's the example. Let me know if you need any more direction :-) http://formly-js.github.io/angular-formly/#/example/other/matching-two-fields\n. That's very nice of you to say. Thanks! Please let me know if there's more\nI can do to help. Otherwise, please close this issue\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Feb 28, 2015 4:05 PM, \"Adam\" notifications@github.com wrote:\n\n> The example you've provide is really interesting - I appreciate your work.\n> Thanks.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/185#issuecomment-76555326\n> .\n. The line of code that browserify is looks at  (`dist/formly.js` which is the `main` in the `package.json`) actually looks like this:\n\n``` javascript\nformlyConfig.tests = false ? require('./formlyConfig.test')(ngModule) : null;\n```\n\nThis is because I'm using webpack's [DefinePlugin](http://webpack.github.io/docs/list-of-plugins.html#defineplugin) which will set that value to false when it compiles.\n\nThe error is coming from browserify trying to resolve that require statement, whereas the browser would never run that `require` statement, and when webpack builds, it's smart enough to know to not resolve it.\n\nSo the best solution (IMO) would be to figure out a way to configure browserify to not attempt to resolve that require statement.\n. @sgimeno, could you try this solution to see if it will work for you: https://github.com/zertosh/unreachable-branch-transform\n. Did that solution work for people? Does this still need to be open?\n. Closing this issue as there hasn't been any activity on it for a while. Please reopen if this is an issue in the future.\n. Wow @pmowrer, thanks for putting effort into getting this to work with browserify. I'm sorry that it's such a pain! Do you think you'd have a problem with simply using the minified file? That wont have the line that's causing the root issue here. I don't think you'd get sourcemaps for angular-formly, but hopefully that wont be a problem most of the time.\n. Closing this as it should be fixed in 6.0.0\n. I actually had a conversation with @mzabriskie about this the other day. He informed me that including sourcemaps in your dist is actually a bad idea for this very reason I believe. I think that I'll have to find another way to accomplish the good development experience (perhaps a different distributable file?) For now, you could point to the minified version which doesn't include sourcemaps. Thanks!\n. Yeah, I think that it's because I'm including sourcemaps. I'll try to pull those out in the next version (soon to be released)\n. Might have fixed this. Everyone who's using browserify, please do:\n\n`npm install api-check@7.2.3-beta.0`\n\n`npm install angular-formly@6.4.2-beta.0`\n\nRe-opening until someone tells me this fixes their problem. Please let me know asap :-)\n. Fixed and officially released in 6.4.2 :-) You're welcome :-)\n. Could you verify that this works as well (it should):\n\n``` javascript\nvar angular = require('angular');\nvar app = angular.module('anAppThatCanFinallyUseFormly', [require('angular-formly')]);\n```\n. **Note the edit:** You shouldn't have to even require `api-check` because `angular-formly` will require it itself.\n. Here's the final steps (I'll put into the docs if someone tells me this works):\n1. install api-check and angular-formly via npm (NOT BOWER)\n   - npm install api-check 7.2.3 angular-formly 6.4.2 --save\n   - NB: No browserify shim or dependency listing in your package.json's browserify configuration object is necessary.\n2. in your javascript, require angular-formly in your module's dependencies array\n\n``` javascript\nvar angular = require('angular');\nvar app = angular.module('anAppThatCanFinallyUseFormly', [require('angular-formly')]);\n```\n. My most sincere apologies @jameswyse. I just added apiCheck, so I wonder if you could give me feedback on it. How difficult was it to work with before you realized that you needed to make a bug? The whole purpose of apiCheck is to help you learn how to use the api. Unfortunately, the way I defined the api for this piece was wrong and that's where the bug comes from (I said it was a function, but it is actually an object of functions).\n\nAnyway, I'd love feedback on that. Thanks!\n. Oh, also, `npm|bower install 3.3.2` :-)\n. Thanks @jameswyse. That's very... for lack of a better word... validating :-)\n\nSo, I just updated the [Custom Validators example](http://formly-js.github.io/angular-formly/#/example/advanced/validators) on the website to show an example of how to alter the default message using `validation.messages`. It actually heavily depends on how you implement `ng-messages` in your templates. If you do it like the example demonstrates, then you're invoking the messages.\n\nAlso note, that the example has also been updated to demonstrate the use of the [`formlyValidationMessages`](https://github.com/formly-js/angular-formly#formlyvalidationmessages) factory which may be of use to you as well :-) Let me know if you need any more help.\n. Very interesting. How are you creating your type? Here's the entire `setType` function:\n\n``` javascript\nfunction setType(options) {\n      if (angular.isArray(options)) {\n        angular.forEach(options, setType);\n      } else if (angular.isObject(options)) {\n        checkType(options); // <-- at this point, the options you pass are validated using apiCheck, so the name is definitely defined and a string here.\n        if (options.extends) {\n          extendTypeOptions(options); // <-- if you're extending then options runs through this function, but nothing happens to the `name` property\n        }\n        typeMap[options.name] = options; // <-- we're putting the `options.name` here.\n      } else {\n        throw getError(`You must provide an object or array for setType. You provided: ${JSON.stringify(arguments)}`);\n      }\n    }\n```\n\nThat function should be using apiCheck before long, but anyway, I think you get the idea. My first place to check (and step through the code) would be in the `setType` function.\n. Are you still experiencing this issue?\n. Fantastic! :D\n. Hi @delaman, we actually use swagger at @alianza-dev as well. It's way cool. However, we don't generate forms based on it.\n\nI don't think that this belongs in angular-formly core. This would go very nicely as a formly-js library though. All that you would need is a function that converts the JSON from swagger into properly formatted fields. You could look at [this example](https://github.com/formly-js/angular-formly/issues/162#issuecomment-73124477) of how I did this to help upgrade people from 2.0.0 to 3.0.0 or modify the code of [this tool](http://jsbin.com/ruwoke/edit) to make it work and turn it into a library. It should hopefully be fairly trivial.\n\nHowever, as I said, this is not something that belongs in angular-formly core. If you're interested, I could create a repo in the formly-js organization and give you commit access so you could build and open source such a tool. Let me know.\n. You're right, but you don't have to use ES6 if you don't want to. However\nyou want to code. Formly supports ES5.\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Feb 28, 2015 11:48 AM, \"Pedro de la Cruz Jr.\" notifications@github.com\nwrote:\n\n> @kentcdodds https://github.com/kentcdodds Looks like angular-formly\n> uses ES6 via babel in parts of the library. If I can use babel so that I\n> can use ES6 stuff i'll do angular-formly swagger library.\n> \n> Thanks\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/190#issuecomment-76539581\n> .\n. @delaman, I don't think this is something that I'm going to work on. Are you planning on doing anything with it? If so, I'll leave it open. Otherwise I think I'll close it.\n. No activity for almost two weeks, so I'll go ahead and close this. Please reopen it if you have further needs.\n. Sounds great. Could you submit a PR? I use WebStorm as well. Thanks.\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Mar 1, 2015 2:15 PM, \"rborman\" notifications@github.com wrote:\n\n> This is not really a Formly issue, but imho would benefit Formly. Let me\n> explain...\n> \n> WebStorm has a bug (https://youtrack.jetbrains.com/issue/WEB-14092) which\n> prevents it from recognizing html tags that are backed by an Angular\n> directive, written acccording the 'John Papa style guide' (named functions\n> instead of anonymous functions as a callback). Besides a confusing warning\n> ('unknown html tag') this also short-circuits navigation in WebStorm.\n> \n> A fix will be available only in the next major WebStorm release. There is\n> a workaround, however. You can add a JSDoc comment above the named\n> function, like:\n> /**\n> - @ngdoc directive\n> - @name https://github.com/name formlyForm\n> - @restrict E */ and the tag is recognized. Of course I could do that\n>   myself every time there is a new Formly release, but the pace is quite fast\n>   ;-)\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/191.\n. I'm not sure how I overlooked not restricting these directives. In your PR, feel free to restrict them each. The `formlyCustomValidation` and `formlyFocus` directives must be restricted by `A`. The `formlyField` can be `AE` and the `formlyForm` is an `E`. Let's leave the `formlyFocus` directive as an object so we can specify it's restriction as an attribute. Thanks a lot for your help!\n. Resolved by #205 Thanks!\n. This has been published as 4.0.10 :-) Thanks!\n. Thanks for letting me know. Sorry about that!\n. It's fixed in 4.0.3\n. No quick fixes I'm afraid... I'll have to look into it...\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Mar 3, 2015 10:14 PM, \"ShMcK\" notifications@github.com wrote:\n\n> I noticed Browserify doesn't work, I assume JSPM http://jspm.io/ fails\n> for the same reason: webpack's require.\n> \n> Error: Uncaught TypeError: **webpack_require**(...) is not a function.\n> \n> Any quick fixes?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/194.\n. Looks like another browserify issue consuming webpack generated code. Dah! This is super frustrating. What if you require the minified version? `require('angular-formly/dist/formly.min.js')`\n. I'm not sure how this could happen. Could you look at the source and make sure this line still exists: https://github.com/formly-js/angular-formly/blob/master/dist/formly.js#L18 and make sure that it's passed to all the modules. This is a very odd issue. I feel like if the script runs in the browser but not with your tool, then the bug is with your tool, not the library... But I'd like to do whatever I need to help this work for you guys.\n. I would like you to be able to use angular-formly on your new project too! Let me know what I can do to help.\n. @ShMcK, did you get it working? Does this issue need to remain open?\n. Ok, please let me know if there's anything that I can do on my end to make this work. Good luck!\n. It looks like you're creating the type properly. Could you paste your template?\n. Also, you don't happen to be here at ng-conf right now are you? If so we could meet up and I could help you in person.\n. So, with angular-formly, the template has access to some specific things. The scope of your template is not the same as the scope in your controller. So, anything you want your template to have access to needs to be in your field configuration under `templateOptions`. So you'd want to do something like this:\n\n``` javascript\n$scope.fields = [\n  {\n    type: 'date', // <-- the name of the type you created for the date-picker\n    key: 'selectedDate', // <-- the property on the model to bind to the value of the date-picker\n    templateOptions: {\n      dateOptions: {}, // <-- your date options\n      formate: '', // <-- your format\n      ... // <-- the other things you want to have access to in your template\n    }\n  }\n];\n```\n\nThen you need to reference the `options` object in your template. Most of your stuff will be on `options.templateOptions`, but because this is a lot to type, formly gives you a shortcut called `to`.\n\n``` html\n<input type=\"text\" class=\"form-control\" datepicker-popup=\"{{to.format}}\" ng-model=\"model[options.key]\" is-open=\"opened\" min-date=\"to.minDate\" max-date=\"to.maxDate'\" datepicker-options=\"to.dateOptions\" date-disabled=\"to.disabled(date, mode)\" close-text=\"{{to.closeText || 'Close'}}\" />\n```\n\nNote: You don't need to specify ng-required because angular formly will add that for you automatically if you specify `required` as one of your template options.\n\nIf you need more help, take a look at [this example](http://formly-js.github.io/angular-formly/#/example/custom-types/custom-templates) and [this talk](http://youtu.be/o90TMDL3OYc)\n. You're welcome @abodacs :-)\n. This is how angular treats models that are invalid. If you want to override this behavior then you can use `modelOptions` (only if you're using angular 1.3 or greater). Otherwise you'll have to use the `$viewValue`. Here's an example of using `modelOptions`: http://jsbin.com/zuqojo Let me know if this solves your issue.\n. Hi @paulvanbladel,\nBoth of these would require a custom `type`. There's an example of how to do this on [the website](http://formly-js.github.io/angular-formly/#/example/custom-types/custom-templates). For the custom action, your type could specify a `controller` which would add the custom action to the `$scope` (here's [an example](http://formly-js.github.io/angular-formly/#/example/advanced/custom-controller-and-link) of that).\n. Hi @paulvanbladel! Did you get this working? Does this need to remain open? Or can I help you out with anything?\n. I take it you got this working? Great! :D Let me know if there's anything more I can do!\n. @abodacs, an autocomplete component is pretty complex. There are libraries that allow you to do it pretty easily. Is there a particular library you'd like to see an example of integration with formly?\n. > and it would be great if it was in edit mode.\n\nI'm not sure what you mean by this...\n. Here you go: http://angular-formly.com/#/example/other/ui-bootstrap-typeahead\n. This is possible. Give me a little time to get back to my computer to\ncreate an example\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Mar 10, 2015 7:51 AM, \"paul van bladel\" notifications@github.com wrote:\n\n> Simple case: I have 8 input fields and want to display them in 2 columns.\n> I know that without formly, I would just use layout system of twitter\n> bootstrap to do this, but can this be done also with formly in the\n> definition in the controller?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/198.\n. I made an example. Check this example: http://angular-formly.com/#/example/bootstrap-specific/advanced-layout\n\nI'm going to close this, but if you have trouble, feel free to reopen or just comment.\n. Updated. Thanks! :+1: \n. It has everything to do with what you're setting your `options` to. So your `$scope.organizations` is what formlyBootstrap will use for the options. I don't know how to help you. You just need to make sure that you're setting `options` to the right thing...\n. So, currently formlyBootstrap's select type doesn't support selecting the entire object as the model value. Feel free to submit a PR to support this or simply create your own select type (it's very easy to do).\n\nAs far as that array, I have no idea where that's coming from. If you look at the examples, that's not what is happening. Could you [create a jsbin](http://jsbin.com/biqesi/edit) that reproduces the issue?\n. Everything you have here looks fine (pretty much a copy/paste of my example in many areas which is great). What does the DOM look like where the form should be?\n. Ah, your `KeyRequestController` is defined using `controllerAs` syntax (you're referencing `this`) but in your route, you're not specifying `controllerAs: 'vm'`. Simply add that to the route definition and you should be good :-)\n. What is the value of `vm.locations` after the request finishes? Also, it's best practice to not use `$http` in your controller. You should either use `resolve` in your route definition and/or use a service. If you resolve your dependencies into your controller, then this issue goes away entirely.\n. Hmmm... Could you reproduce this issue in a jsbin?\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Mar 11, 2015 7:14 PM, \"billfranklin\" notifications@github.com wrote:\n\n> vm.locations is fully populated, I actually output it in a\n> <pre>{{vm.locations|json}}</pre> to verify that it is populated.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/202#issuecomment-78406726\n> .\n. Ummm... That appears to be an empty bin:\n\n![screen shot 2015-03-11 at 9 49 28 pm](https://cloud.githubusercontent.com/assets/1500684/6611921/938dc230-c838-11e4-9753-5d49f3740aeb.png)\n. Weird... Still totally empty for me.... I don't think this matters, but do you have an account? Maybe you have to sign up for an account to have it persist...\n. Very odd... @remy, do you know why this might be happening?\n. If I go to the output only view, I see this:\n\n![screen shot 2015-03-11 at 9 57 16 pm](https://cloud.githubusercontent.com/assets/1500684/6611985/a5dc15f8-c839-11e4-9464-e44a2efa7a25.png)\n. Tried in an incognito window and in Firefox / Safari. No dice. I'm thinking that jsbin is experiencing issues right now...\n. This wouldn't be the first time I personally had trouble with jsbin :-( Maybe I use it too much? Could you maybe clone it and send me the cloned URL...\n. Wow, this is really sad... Maybe you could switch to codepen :-( I'm super sorry about that. \n. Ah hah! I know what the problem is! The issue is that you're not reassigning the template's `options` to what comes back from the server, you're actually reassigning your `vm.jsonData` to what comes back from the server which is entirely different. I've made an update to your example that works:\n\nhttp://jsbin.com/qawawe/edit?html,js,output (hopefully jsbin will work for you, I'm not a huge fan of codepen)\n. Great! Is there anything I could do to make the API easier to understand so that would have been easier for you to figure out? I want this to be dead simple\n. Doing that right now :-) Thanks for the help!\n. And it's live! http://angular-formly.com/#/example/other/async-select-options-with-controller\n. My username is: kentcdodds\nStill totally love jsbin. Thanks @remy!\n. Thanks for the update @jesperronn :-) I've updated my comment.\n. Definitely useful. `formlyBootstrap` doesn't support this currently. I definitely recommend that you create your own type for `select` because you obviously have some extra use cases that it's not supporting now. I recommend that everyone create their own types anyway. I've done this and I'll put that below. Maybe it will be instructive (note, it's written in ES6)\n\n``` javascript\nexport default ngModule => {\n  const template =\n    `<select ng-model=\"model[options.key]\" class=\"form-control\">\n      <option ng-if=\"!to.notNull\" value=\"\"></option>\n    </select>`;\n  ngModule.run((formlyConfig) => {\n    formlyConfig.setType({\n      name: 'select',\n      extends: 'azBase',\n      template,\n      defaultOptions(options) {\n        const forWithFilter = `for item in to.options | azDynamicFilter:to.filter:to.orderBy`;\n        let ngOptions = `item[to.valueProp] as item[to.displayProp || 'name'] ${forWithFilter}`;\n        const {valueProp, displayProp, options: items} = options.templateOptions;\n        if (items && typeof items[0] === 'string') {\n          ngOptions = `item for item in to.options | azDynamicFilter:to.filter:'toString()'`;\n        } else if (valueProp === null && displayProp) {\n          ngOptions = `item as item[to.displayProp] ${forWithFilter}`;\n        }\n        return {\n          ngModelAttrs: {\n            [ngOptions]: {\n              value: 'ng-options'\n            }\n          },\n          templateOptions: {\n            filter: 'orderBy',\n            orderBy: 'name',\n            displayProp: 'name',\n            valueProp: 'value'\n          }\n        };\n      }\n    });\n  });\n};\n```\n. If you want to add support for this in `formlyBootstrap`, please feel free to do so! I'm closing this issue though because this is not the formlyBootstrap repo.\n. Here's an example of how to do that :-)\n\nhttp://formly-js.github.io/angular-formly/#/example/other/disable-submit-button\n\nLet me know if you have any other questions :-)\n. Terrific question. The problem is that the `options.formControl` gets set in the controller function which will only run once and then never again. The problem comes with the `ng-if` which rips the input field out of the DOM. If the field starts in the read only state then you'll get this warning because the field is not part of the form's `formControls`. If you set `noFormControl` then that will get rid of the warning, however the `options.formControl` will never be set and you wont be able to show validation errors, etc.\n\nHowever! Angular will watch for when a new form control enters the DOM (when an ng-if evaluates to true and has an ng-model in it for example). So, what we can do is watch the form's property for the form control and add it to the scope/options ourselves! Yay!\n\nHere's an updated working example :-) Let me know if there's anything else I can help you with!\n\nhttp://jsbin.com/tinoxo/edit?html,js,output\n. By the way, I'm going to add this to our examples if that's ok with you. In the middle of making some updates to the website, but once that's done this will be part of the examples :-)\n. Closing this for now. Please feel free to reopen if I didn't answer your question :-)\n. This was just a test of issuetemplate :-)\n. Hi @maryampashmi! You simply need to include the apiCheck script on the page. If you're using script tags, make sure to add the one for apiCheck:\n\n``` html\n<script src=\"bower_components/api-check/dist/apiCheck.min.js\"></script>\n```\n. Make sure that this script tag is BEFORE angular-formly.\n. You're very welcome! Let me know if you have any other questions.\n. Yes, unfortunately this will currently not work. The `watcher` property is unique in that it is utilized in the `formly-form` directive, not the `formly-field` directive. The reason for this is that it allows your watcher to be active even if the field is hidden. However, because the `multiField` is iterating over the nested fields without using the `formly-form` (which it must to accomplish the advanced layout) so it is not able to take advantage of that property (sad day).\n\nHowever, I rarely use the `watcher` property in my own stuff at work because there's normally an easier/better way to accomplish what I'm trying to accomplish. For example, in your `templateOptions` you can specify an `onChange` which will add an `ng-change` to your `ng-model` element. This may work just as well for what you're going for.\n\nIf that doesn't work for you, you can always specify a `controller` or a `link` for the field and do the watch there. Again, this wont be operative when the field is hidden... So you could get creative and make a field that has a template of `template: ''` and _that_ has a `controller` or `link`. But that's a little crazy and I would be surprised if you needed to resort to this...\n\nFinally, there's always just adding the `$scope.$watch` in your own controller. Not awesome from a reusability standpoint, but that's an option.\n\nLet me know if you need any help with your specific use case.\n. You're welcome!\n. angular-formly is built entirely with webpack in mind. It would be significant effort to remove the webpack dependency. I'm curious to know why you have a problem how it's built...\n. I see what you mean. However, I think you've misunderstood. Even though angular-formly is built with Webpack, it's distributed using UMD, which supports AMD, CommonJS, and globals. For example, all the examples on the website are using basic script tags, so angular-formly will expose itself as a global in that case.\n\nPlease do some additional research to let me know why it didn't just work for you and I'll see what I can do to help.\n. I'm going to go ahead and just close this. Let me know if you still have issues with this.\n. Looks good. Thanks for your work on this! The one thing that I'll say is that you'll definitely need polyfills for things like `map`, and `forEach`, etc. But if you say that this is working for you in IE8, then that's awesome. I'll get this merged as soon as I'm able!\n. @koenweyn, you've guessed right :-)\n. @koenweyn, seriously, thank you for working on this. I really appreciate the help! I hope it's worth it for you!\n. Me too! Were you there?! Did I meet you?\n. Thanks for being a good bridge crosser/builder! :D\n. Definitely :D\n. Hey @koenweyn, I'm writing a blogpost that references this PR. Do you mind if I reference you in it? https://medium.com/@kentcdodds/78281ea47455\n. Thanks @rbfinch! Glad that you've found it useful. First, I should say that validators functions can return promises, so you could technically make a call to the server in your validator function. Would that solve your use case?\n. Sorry @rbfinch, I don't have time right now to look into this, and I can't think of anything off the top of my head, but I'll leave this issue open and try to get to looking at a better way later. I think I need a mailing list for people to help each other with stuff like this.\n. Mailing list? Fancy that! https://groups.io/org/groupsio/formly-js :+1:\n. @rbfinch, I do something similar. Do you think that there's something that angular-formly could do to make this easier for you? Seems like a reasonable use case that formly may be able to make easier.\n. @rbfinch, I'm going to go ahead and close this now. If your concern hasn't been resolved, please open it up again and we can chat :-)\n. Looking at that blogpost this is totally possible and would actually be easier with angular-formly. Unfortunately I don't have a lot of time right now to create an example for you. Perhaps someone on the @formly-js/angular-formly-collaborators or @formly-js/angular-formly-collaborators-read teams could help out...\n. Cool! Have you tried just using the built-in [fieldTransform](http://angular-formly.com/#/example/very-advanced/field-transform) feature?\n. Better if it were in a plugin. I won't bring this into formly. But a plugin\ncould add it easily.\n\nOn Thu, Oct 29, 2015, 4:40 PM gentledepp notifications@github.com wrote:\n\n> Hmmm... as I followed your approach I came across the next problem: The\n> serverside error is correctly applied to the formly-form field. (in my\n> sample case this is a \"the field username is required\" error).\n> However as soon as I fill in the \"username\" field, the server-error is not\n> removed and thus I cannot submit the form. So when the model of the field\n> changes, I need to reset the validationerrors. (especially the \"server\"\n> error)\n> Any hints on how you solved this?\n> \n> Also: This is still quite a lot of code to implement. I would really\n> appreciate if this functionality could be pulled into formly. E.g. by\n> allowing to specify a \"externalErrors\" object on the directive which in the\n> end is nothing different than your \"{ errors: [{ message: 'Unknown error'\n> }]};\" object. :-|\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/212#issuecomment-152347864\n> .\n> \n> ## \n> - Kent C. Dodds https://twitter.com/kentcdodds\n. Thanks!\n. Oh man, I'm in love with this. THANK YOU!!!\n. @raibutera, it looks like the shadow got cut off on the top and bottom if these images. Is there any way you could update the logo so the shading isn't cut off?\n\n![screen shot 2015-03-25 at 9 52 25 pm](https://cloud.githubusercontent.com/assets/1500684/6840174/407c0442-d339-11e4-9869-cd96db7a39f5.png)\n. Thanks a ton :D\n. Good point... So there are two options here. You can either setup the watcher yourself, which may not be a bad idea, or you could use `ng-hide` instead of `ng-if`. That comes with its own set of issues. What do you think?\n. @rbfinch, do you think this is acceptable or should we work on researching a better solution?\n. @rbfinch, good news! I totally forgot that I did this, but I changed the way that the `formControl` gets added to the `options` based on this use case. It now uses a `$watch` and will add the `formControl` after the fact. The example has been updated to use the latest version and shows that this works :-) http://jsbin.com/tinoxo/edit\n\nPlease re-open this issue if you still have problems.\n. @koenweyn, you're awesome. This is a terrific PR. One thing that could make it even better is a section about browser support in the README (and a note about the need to include polyfills). Do you think you could add this? Thank you!\n. You just commit and push to your branch. It'll get added automagically :-)\n. @koenweyn, GitHub has been experiencing a DDoS attack for the last day and a half (are people insane?) so I think this is why Travis has been having trouble.\n. Thank you so much!\n. This has been released as part of 4.2.1 (had trouble with 4.2.0) :-) Thanks!\n. Hi @Zjaaspoer! Thank you for your kind words!\n\nThe first thing I would check on is, are you using jQuery? Due to [this bug](https://github.com/angular/angular.js/issues/11038) in jqLite, you'll get this issue. The bug was fixed in [the latest beta version of 1.4](https://github.com/angular/angular.js/blob/master/CHANGELOG.md#140-beta6-cookie-liberation-2015-03-17)\n\nNot sure about any other workaround other than including jQuery :-( If you can find one, then that's awesome. But I think that's the problem you're experiencing. Sorry, debugging angular apps in codepen is a pain, which is why I prefer jsbin :-)\n. I totally agree with you, and think that you should wait for 1.4 to come out, rather than including jQuery (I think I have the same personal opinions). However, the project that I inherited was riddled with jQuery plugins, so I didn't experience this problem until I made [the demo](https://github.com/kentcdodds/angular-formly-convert/blob/master/index.html#L127) that you saw at ng-nl which is when I reported that bug.  :-) enjoy your beverage. I'm going to be sticking with water :-) cheers!\n. Just recorded 4 lessons. Should be up on egghead.io soon! :D\n. You'll see one of the new egghead.io lessons has been published :-) You'll find all (2) of the lessons on the [documentation website](http://docs.angular-formly.com/v6.1.0/docs/learn-angular-formly) enjoy!\n. P.S. More to come :-)\n. Another lesson is up! http://docs.angular-formly.com/v6.1.0/docs/learn-angular-formly\n. Hey everyone! There are now 8 lessons on [the egghead.io playlist](https://egghead.io/playlists/7) and the [Learn angular-formly](http://docs.angular-formly.com/v6.3.2/docs/learn-angular-formly) page. Please let me know if there are specific topics you want to know about. Right now I'm using analytics to know which lessons to record next, but it's starting to get pretty even now. Squeaky wheel gets the grease!\n. Going to go ahead and close this, but feel free to keep asking for lessons on specific subjects. I'm still listening :-)\n. Hi @DevanB, I'm no longer doing anything with angular-formly, so it's very unlikely that I'll make any more egghead.io lessons about it. Good luck.. Thanks! :D\n. If I understand your issue correctly, this is by design. If you wish it to show errors, you can set `validation.show` to true, like so: http://angular-formly.com/#/example/other/force-show-error\n. I'm going to close this now. Please re-open it if this doesn't solve your issue or if you have further questions.\n. I'm sorry @cdbizone. I really have no idea what your issue is... Please be more specific about the issue that you're experiencing. From what I can tell, everything is working as designed...\n. Oh, so if you can hide the iframe based on the `$valid` property of the form. This is similar to how you would [disable a submit button](http://angular-formly.com/#/example/other/disable-submit-button) (except you'd use `ng-if` instead of `ng-disable`). Does that answer your question?\n. Ok, I understand what you're talking about now. So this is what I would do: http://jsbin.com/fivuqa/edit\n. Yeah, just barely noticed this too! I broke this in 5.0.0. Fixing now!\n. Thanks for creating the issue. I was just about to create one so I could reference it in my commit. Should be about 10 minutes or so before I have the fix released. Thanks for your patience!\n. Released! Thanks!\n. It's 5.0.1\n. Uh oh... Yeah, totally still broken\n. Give me a second... My test wasn't correct.\n. @ValentinH, thank you for your patience! This was pretty irresponsible of me. I promise this is not normal :-)\n. Ok, it's fixed for real in 5.0.2. Once rawgit's cache is updated, all the examples should be fixed. You can `npm install angular-formly` or `bower install angular-formly` (you may need to clear your cache)\n. Thank you for YOUR reactiveness in reporting the issue :-) Great! Please let me know if you need any help!\n. Thanks for letting me know. I'm working on a fix. Duplicate of #222.\n. FYI, this is fixed as of 5.0.2. Thanks for your patience!\n. Thanks! Let me know if you need any additional help!\n. Don't have time to explain, but angular-formly doesn't do well when you swap out the `fields` after it has rendered the form. I think that's what you're doing...\n. I'm thinking that #225 is what you're actually interested in doing, so I'm going to close this one.\n. Yeah, because it's invalid, it technically doesn't have a value, so angular wont update the `$viewValue`. This is an angular problem. You may just have to update the `$viewValue` yourself :-(\n. Great question... #168 is wondering about supporting this in the core... I think it may be nice. Basically it would require making a copy of the `model` on first render, then exposing some kind of function (probably on `options`) that could be called to reset the model to its original state. Would have to handle the `model` property of `field`s as well... Do you think that angular-formly is the right place to do that?\n. Alright, I think I've got this fixed. If you could please try this out, that would be great. I've made a beta release that has this feature. Please let me know if this fixes the issue for you. `npm install angular-formly@5.2.0-beta.1`\n. Sorry, should have given an example or docs. Here you go!\nhttp://angular-formly.com/#/example/form-options/reset-model\n. Ok, that's good to know. It shouldn't break if your model is null. I'll fix that. `resetModel` shouldn't impact the actual field itself. That wouldn't make sense in the api. And I was thinking about adding a `resetFields` method, but I don't think that would really make sense either...\n\nLet me fix the null problem and then I think we're good to release this officially. What do you think?\n. There you go. Officially in 5.2.0!\n. Update, use 5.2.1 instead...\n. @SagiMedina, this is being tracked in #246. Unfortunately it's not as easy as you might think...\n. I think that you could very easily combine angular-formly with [angular-wizard](https://github.com/mgonto/angular-wizard). Let me see if I can make an example sometime. Or, if you want to, feel free to [try making one yourself](http://jsbin.com/panovu/edit?html,js,output)\n. Added an example of integrating this with [angular-wizard](https://github.com/mgonto/angular-wizard) by @mgonto: http://angular-formly.com/#/example/other/angular-wizard\n\nI think that's the best we can do right now.\n. This looks awesome! Thanks for the contribution!\n. Still accepting new submissions! But it's on the angular-formly-website repo and I want to clean up these issues.\n. :+1: \n. ping @mikeerickson :-) weekend project? ;-)\n. ping? :-)\n. :P, I'll stop bugging you about it. I appreciate all that you can do!\n. :+1: \n. :+1:\n\n-Kent C. Dodds\n\nOn Tue, May 19, 2015 at 11:50 AM, Mike Erickson notifications@github.com\nwrote:\n\n> @kentcdodds https://github.com/kentcdodds still alive, just wrapping up\n> some client work and then I will move my efforts to formly\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/229#issuecomment-103612975\n> .\n. @mikeerickson maybe this weekend? :-)\n. :+1: would love to get offline docs working. That'd be an awesome addition to the library.\n. Maybe this weekend @mikeerickson? :-)\n. I'm cleaning up issues and it doesn't look like this one's going to happen. Feel free to prove me wrong!\n. angular-formly does a lot of stuff to render your fields and it doesn't to great when you modify the fields after the initial compile (as @ValentinH has discovered as well). I'm starting to think that modifying fields order/entirely after compile may be something I need to look at supporting better.\n\nFor now though, perhaps you could describe what you're trying to accomplish and I can give you a useful work around.\n. That sounds awesome! Would you like to [build this](https://github.com/formly-js/formly-builder/issues/1)? I would totally love that!\n\nFor your case, I think you may just want to recompile things every time you change something. Take a look at [kcd-recompile](http://kent.doddsfamily.us/kcd-angular/#/kcd-recompile)\n. The problem is that some templates use singly bound expressions (like `::to.label`) for example. So with those, you HAVE to recompile the entire template. So kcd-recompile should help you with that.\n. I would do something like:\n\n``` html\n<div kcd-recompile=\"newFormClone\">\n  <formly-form model=\"newFormData\" fields=\"newFormClone\">\n    <button ng-hide=\"newForm.length==0\" type=\"button\" class=\"btn btn-default\" ng-    click=\"onSubmit()\">Submit</button>\n  </formly-form>\n</div>\n```\n\nThen I would alter `kcd-recompile` to use a deep watch.\n\n``` js\nangular.module('kcd.directives').directive('kcdRecompile', function($compile, $parse) {\n  'use strict';\n  return {\n    scope: true, // required to be able to clear watchers safely\n    compile: function(el) {\n      var template = getElementAsHtml(el);\n      return function link(scope, $el, attrs) {\n        var stopWatching = scope.$parent.$watch(attrs.kcdRecompile, function(_new, _old) {\n          var useBoolean = attrs.hasOwnProperty('useBoolean');\n          if ((useBoolean && (!_new || _new === 'false')) || (!useBoolean && (!_new || _new === _old))) {\n            return;\n          }\n          // reset kcdRecompile to false if we're using a boolean\n          if (useBoolean) {\n            $parse(attrs.kcdRecompile).assign(scope.$parent, false);\n          }\n\n          // recompile\n          var newEl = $compile(template)(scope.$parent);\n          $el.replaceWith(newEl);\n\n          // Destroy old scope, reassign new scope.\n          stopWatching();\n          scope.$destroy();\n        }, true); // <-- that\n      };\n    }\n  };\n\n  function getElementAsHtml(el) {\n    return angular.element('<a></a>').append(el.clone()).html();\n  }\n});\n```\n. This worked \"like a charm\" for @joezhouOxford in https://github.com/formly-js/angular-formly/issues/246#issuecomment-95852663 so I'm going to close this issue. Let me know if there are further questions\n. I didn't realize that 1.2 didn't support `$touched`. Nice catch. Thanks! I like the second recommendation. Would love the PR :-)\n. Thanks for the PR, but I neglected to merge it before I made some changes that made it difficult to merge (my bad!). Sorry about that! Thanks for providing the answer! This is now supported in 5.1.1\n. The docs are available for me...\n\n![screen shot 2015-06-09 at 3 28 27 pm](https://cloud.githubusercontent.com/assets/1500684/8070098/334ee9e2-0ebc-11e5-84b1-4320eafe4ec5.png)\n. @pmowrer, thanks for the issue. I had intended on fixing this because I was upgrading my own app to the beta versions, but I forgot. I'll have this fixed shortly.\n. Just ran:\n\n```\n~/Desktop\n\ud83d\ude04  $ npm i api-check\napi-check@6.0.11 node_modules/api-check\n~/Desktop\n\ud83d\ude04  $ npm install angular@1.4.0-beta.6\nangular@1.4.0-beta.6 node_modules/angular\n~/Desktop\n\ud83d\ude04  $ npm install angular-formly\nangular-formly@5.1.2 node_modules/angular-formly\n~/Desktop\n\ud83d\ude04  $ \n```\n\nLet me know if you have problems.\n. Glad it works! Let me know if you have any questions!\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Apr 8, 2015 12:52 PM, \"Patrick Mowrer\" notifications@github.com wrote:\n\n> Wow, thanks for the extremely quick fix @kentcdodds\n> https://github.com/kentcdodds! Verified it works on our end as well.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/235#issuecomment-90972980\n> .\n. You are correct, this would have a huge impact... I'm about to cut a 5.2.0 release. I'll see if I can get this fixed as part of that.\n. You mean, a second one that doesn't do the `|| modelValue`? I'd have to give that some thought... Let me play around with that, this may be worthy of a breaking version change...\n. I thought there was, but now I can't remember why I had it. I'll give it a little thought and testing, then I may release a 6.0.0...\n. If I remember correctly, it was simply intended to be a convenience, but\nnow I realize that it's more of a problem than it is helpful. I'll double\ncheck, and likely push a breaking change version to fix that.\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Apr 9, 2015 10:24 AM, \"Koen Weyn\" notifications@github.com wrote:\n\n> And that would solve this bug.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/236#issuecomment-91246952\n> .\n. Ok, this and several other things (see the changelog) have been changed in angular-formly 6.0.0-beta.2. If you could please try this out, that would be great. Thanks!\n. Thanks! Missed that. Glad I only did this in a beta release :-)\n. It's been updated in 6.0.0-beta.4. Anything else you'd like to see changed in a major version change?\n. Alrighty, officially released in 6.0.0 :-)\n. Thanks for letting me know. apiCheck just had a breaking change and I forgot that all the examples run off of master. I'll go fix those now!\n. Fixed. Thanks again! I really need to develop a better way to keep all of the examples dependencies in one place. It may be nice to have them all run on the latest _stable_ version somehow...\n. :smiley: haha! which talk did you see?\n. Haha! The exercise lives on! Thanks for using angular-formly. Please let me know if you have any other needs!\n. The `expressionProperties` are `formlyExpressions`. See the docs here: http://docs.angular-formly.com/v5.2.1/docs/formly-expressions\n. Let me know if you need more assistance :-)\n. @hmendezm, the best way to get help is to create an example using http://help.angular-formly.com. Just looking at your code, it appears that it should work fine. So an example is more helpful.\n. Wait, so are you trying to do [this](http://jsbin.com/tovevo/edit?js,console,output)?\n. Ah, maybe this will point you in the right direction: http://jsbin.com/yubato/edit?js,output\n. Yes, this is totally possible! And I recommend doing things this way too! :-) Personally, I use the `data` property for the parameters, but you can do it however you like. You'll use [`defaultOptions`](http://docs.angular-formly.com/v5.2.1/docs/custom-templates#formlyconfig-settype-options) which can be an object or function. Here's [an example](http://angular-formly.com/#/example/custom-types/default-options).\n\nPlease reopen this issue if you need more help.\n. It's loading fine for me. But you're not the first one to mention issues today. I wonder if iwantmyname.com is experiencing issues... Can you look at the network tab and see if there are DNS issues?\n. Wait, just to confirm. For you, the site is actually working, but the embedded examples are failing, is that right?\n. Ok, then it sounds like your computer is having difficulty with jsbin... This could be the result of a few issues. Perhaps your IP address has been blacklisted (that's happened to me before). ping @remy\n. Thanks for telling me about the view which excludes whitespace. Otherwise I would have looked at this and just been like: \"dude, there's no way I can review this thing... sorry\" haha.\n\nI actually really like it. Though I really like to require my test inside the file that I'm testing, I think for a small project like this, it's not really that big of a deal. It should also resolve #186 which is a plus.\n\nIf you could make the few updates I mentioned, I'll pull it down and double check everything, then I'll make this part of the official 6.0.0 release. Thanks!\n. Thank you for the PR! I think this is going to be a good change.\n. [I found a few jshint issues](https://github.com/formly-js/angular-formly/commit/a7a5fc1653e13338fbb5b399822ec65d647e414c). Also, when minified, ng-annotate doesn't annotate the functions properly. Could you add the `@ngInject` annotation to the injectable functions please? Then I think we'll be good to merge this in! Thanks!\n. I rebased these changes locally and pushed! These changes are live in 6.0.0-beta.8! Thanks a ton!\n. The problem is that angular-formly does a lot of things to your fields at compile time. If you reassign the fields after the form has been compiled, then that will cause a problem for you (as you can see).\n\nSo, instead of changing the fields, create another `formly-form` that will receive those new fields when they arrive. Put this behind an `ng-if=\"theNewFields.length\"` so it only gets compiled when those fields are assigned.\n. Thanks! Let me know if there's anything I can do to make things easier for you!\n. Love it! Thanks! You've been an awesome contributor ([bridge crosser/builder](https://www.youtube.com/watch?v=dJFV8wFU23A))!\n\nLooking at the commits, it looks like you have a few extra commits in there which are bringing your repo up to date with angular-formly. Would really appreciate this PR to be a single commit to keep the history clean. Could you resubmit a new PR that just has a single commit with the changes? Thanks again!\n. The quick and easy way is to just delete your fork and refork :-)\n. Thanks a ton! This is great :-)\n. I'll have the example on the site next time I update (should be later today)\n. This has been deployed! http://angular-formly.com/#/example/other/toggle-required\nThanks!\n. Thanks for using formly! You're not alone with this issue. Normally I've just explained that formly does some stuff at compile time and you can't just switch out the fields, but now I'm starting to think that this is a pretty common use case and people need this to work more seamlessly. So, I'm going to see how we can make this work with angular-formly without workarounds. I'll keep you informed.\n. Started work on this. Not sure how I'm going to accomplish it. It's in [this branch](https://github.com/formly-js/angular-formly/tree/feature/246-dynamic-fields). Feel free to take a look if you want :-)\n. Unfortunately a workaround like that wouldn't work. The validation issue is a side-effect of the real issue which is that the new fields aren't initialized properly.\n. Another workaround would be something [like this](https://github.com/formly-js/angular-formly/issues/230#issuecomment-90579649). I have a branch (as mentioned above) that I'm working on to make this possible by reinitializing the fields manually. This may be possible. But it will be a little difficult. Still more work to be done there.\n. whoops, this issue is still open and I'm still working on it...\n. @s992, that sounds like a reasonable solution for most use cases. I'll get this in as soon as I am able (probably by tomorrow). Thanks for your patience!\n. Note: master has the unreleased 6.1.1. Please see the [Changelog](https://github.com/formly-js/angular-formly/blob/master/CHANGELOG.md#611). The track by behavior changed (defaults to nothing), and you can also now specify your own track by:\n\n``` html\n<formly-form model=\"model\" fields=\"fields\" track-by=\"$index\"></formly-field>\n```\n\nor \n\n``` html\n<formly-form model=\"model\" fields=\"fields\" track-by=\"field.key\"></formly-field>\n```\n\nor\n\n``` html\n<formly-form model=\"model\" fields=\"fields\" track-by=\"vm.trackWhateverIWant(field)\"></formly-field>\n```\n\nI'm now waiting on @s992 and @n0rb to tell me how this supports your use case before I do an official release. Thanks!\n. If you do break it, feel free to [add a failing test](https://github.com/formly-js/angular-formly/blob/master/src/directives/formly-form.test.js#L212) and I'll take it as a challenge :-)\n. So, I just realized that by adding this new functionality, it actually allows you to totally swap out fields! I had no idea that the `track by $index` was the culprit here! Please still let me know when you've tested it out, but I'm pretty confident that between [this test](https://github.com/formly-js/angular-formly/blob/e2178dccf6f97d2d51febba8cbf453e090d482d4/src/directives/formly-form.test.js#L108) and [these tests](https://github.com/formly-js/angular-formly/blob/e2178dccf6f97d2d51febba8cbf453e090d482d4/src/directives/formly-form.test.js#L221-L274) we should be covered :-D\n. Thanks!\n. I'm guessing that you figured out the issue because you closed it correct?\n. Busy right now. Will probably have to wait until tomorrow to get to this. Thanks a ton!\n. I'm going to close this. Code coverage is now supported. Still working on coveralls integration (travis is having trouble) but you'll be pleased to hear that we're actually pretty well covered.\n. Looking at the report it's actually only reporting on the index.test.js file which contains all of angular, api-check, and angular-mocks, as well as angular-formly... Do you know of any way to make the coverage plugin leverage sourcemaps or something to make sure that 1) we're only reporting coverage for angular-formly files and 2) it reports coverage for the specific files, not just the entry file?\n. Thanks! You're awesome! :-)\n\n-Kent C. Dodds\n\nOn Thu, Apr 16, 2015 at 11:29 PM, Ryan Dunckel notifications@github.com\nwrote:\n\n> I'll take a peek at this and circle back!\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/pull/250#issuecomment-93896209\n> .\n. I think I've figured out a way to get coverage to exclude non-library related files. I tried it out in [angular-scope-types](https://github.com/alianza-dev/angular-scope-types/blob/master/karma.conf.js) (WIP). Just need to take the time to do it in angular-formly.\n. Finally done!\n. Hmmm... Sounds interesting. Do you think that you could provide an example use case for me so I understand what you're trying to accomplish?\n. By the way, I'm thrilled that you're using this feature. I'm pretty sure it's one of the coolest features of angular-formly that few people understand/know how to use. It's pretty dang powerful.\n. Ah, I see what you're saying... One second...\n. Check it out :-) http://jsbin.com/xeguxi/edit\n. Note! For the love of everything good in the world. Don't go deeper than 3 levels of extends :-)\n. Dude, you're awesome. Thanks! This will be in the next beta release of 6.0.0. Thanks!\n. This is a tough one... What version of angular are you running?\n. Ok, this is the best I can do. And it only works in angular 1.3 ... Will that work for you?\n\n``` javascript\nit(`should allow the user to specify their own name for the form`, () => {\n  compileAndDigest(`\n    <form name=\"parent\">\n      <div ng-repeat=\"forms in [1, 2] track by $index\">\n        <formly-form model=\"model\" fields=\"fields\" bind-name=\"$parent.$index + '_in_my_ng_repeat'\"></formly-form>\n      </div>\n    </form>\n  `);\n\n  expect(scope.parent).to.have.property('formly_0_in_my_ng_repeat');\n  expect(scope.parent).to.have.property('formly_1_in_my_ng_repeat');\n});\n```\n. Doing this would be possible with angular 1.2, but it would involve completely recompiling the entire template once the correct ID was generated. This would be enough of a performance hit that it wouldn't make it worth it I think. I'm just hoping that you're using 1.3 right now... :-)\n. Note, the way it works is it sets the `name` attribute of the `ng-form` to `{{::'formly_' + ${attrs.bindName}}}`. The reason this only works in >= 1.3 is in 1.2, the `name` attribute can't be dynamic. :-(\n. Here's the implementation: https://github.com/formly-js/angular-formly/commit/94f82860310c5ae0d3ec17ea0c4427b0d252d6b4\n\nLet me know what you think, or if you think there's another way to accomplish this...\n. Ok great. I'll merge it in then. Thanks for providing a failing test. That was awesome.\n. This is now part of 6.0.0-beta.10. Hoping to get out of beta soon. Still working out a few kinks.\n. This is closed as illustrated in the test! Let me know if you have trouble!\n. Good catch! Thanks @sparty02! You don't think this needs to be officially released do you? It doesn't cause an issue for consumers of the library right?\n. Ah yes, it actually DOES need to be there so it will install (specifically in future versions of npm when npm doesn't auto-install `peerDependencies`). So I'll go ahead and fix it and release a new version for good measure. Thanks!\n. While that's true, the problem with making it a `dependency` is that when I `npm install angular-formly` it will add `api-check` to `node_modules/angular-formly/node_modules/api-check`. But if I want to use `api-check` in my own project as well, then I will run `npm install api-check` which will install it in `node_modules/api-check`. Now I have two versions of `api-check` in my app.\n\nPeer Dependencies was created to solve this problem. Not only does it prevent me from having duplicate dependencies, but it also provides me the freedom of choosing which version of the dependency I want (as long as it satisfies the `peerDependency` which `angular-formly` enforces to ensure it works properly).\n. I'm starting to feel alone in the \"I love peerDeps\" camp... haha, several tweets and rage posts about them. I've never run into the problems that others seem to have run into. Perhaps you're right. I may consider it a bug fix as part of 6.0.0...\n. Re-opening so I keep this on my mind.\n. Max, I'm not sure I understand what you're suggesting. So, are you\nrecommending that we stick to peer dependencies?\n\nI'm leaning toward leaving angular as a peer dependency and moving apiCheck\nto a normal dependency.\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Apr 18, 2015 11:44 AM, \"Max Sysoev\" notifications@github.com wrote:\n\n> @kentcdodds https://github.com/kentcdodds No one refuses to remove this\n> section (peerDependencies). It will remain, but change behaviour. I\n> should notice here that it's more friendly way to conflict resolving. (I\n> faced peerDeps conflict many times. Really frustrating thing)\n> \n> Yes, now we should maintain peerDeps manually, but it's more transparent.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/pull/253#issuecomment-94186919\n> .\n. @linclark, do you mind weighing in here?\n\nJust for background, angular-formly is a forms library for AngularJS. It depends on Angular (obviously) and a Vanilla JS library I wrote called [api-check](https://github.com/kentcdodds/apiCheck.js). So, in a sense, it's an angular \"plugin\" that has an extra dependency.\n\nI'm now thinking that I want to continue to have as loose requirements as possible for `peerDependencies` so I keep the warnings. But I'm thinking that maybe I'll include `dependencies` so the dependencies are installed by default. Then consumers can simply use `npm dedupe` to deal with duplicated dependencies.\n\nI just don't like the idea of forcing people to do something extra to consume my library, but in npm@3 the peerDeps wont be installed by default anymore so they'd have to install those deps themselves anyway. So I'm torn.\n\nAlso, there are several template libraries for angular-formly that depend on angular, angular-formly, and api-check. And the angular-formly-templates-material library will also depend on angular-messages, angular-aria, and angular-material. Should all of those be peerDeps and/or regular deps?\n\nJust want to do the thing that allows the most flexibility and ease-of-use for consumers of the library. I may create a blogpost based on what I decide to do.\n\nThanks for any advice you can give @linclark :-)\n. Awesome. I think that npm is going to with the package management game for all of JavaScript (at least, I really want it to). So this would be awesome.\n\nSo am I safe to say that for now, for frontend modules, dependencies should always be listed as `peerDependencies` with as loose version requirements as possible?\n\nFor now, I think I'll just use `peerDependencies`. I'll also have them as `devDependencies` so I can do my testing during development, but that shouldn't impact users of the module so that's no problem.\n\nThanks for the help @linclark.\n. Going to stick with really loose requirements on the `peerDependencies` and require you to install the dependencies yourself when npm@3.0.0 comes out. #knowyourdependencies :-)\n. Thanks!\n. I can't rebuild the site right now, but it should be up on the site in the\nnext day or so.\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Apr 18, 2015 10:43 AM, \"Hugues Stefanski\" notifications@github.com\nwrote:\n\n> Most welcome!\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/pull/254#issuecomment-94179846\n> .\n. how's this? http://angular-formly.com/#/example/advanced/repeating-section\n\n-Kent C. Dodds\n\nOn Mon, Apr 20, 2015 at 9:57 AM, rama notifications@github.com wrote:\n\n> I would like an example that demostrates: dynamically add remove items,\n> kind of todo model.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/256.\n. Thanks. The example has been updated. Let me know if it is not sufficient.\n. @abodacs That key is specific to that example. But it's because the key for the field, that's why it needs to be on the model.\n. This is a bit of a poor example. But part of the repeatSection type depends on their being a value initially because it copies the previous section to make the next one. It fails when there's not an existing previous value. You could easily alter the type so this doesn't happen.\n. I updated the example. Go ahead and play around with it. Should work now.\n. Migrated: https://github.com/formly-js/angular-formly-website/issues/21\n. Are you loading api-check _before_ you load angular-formly?\n. Thanks for checking on that. Do you think you could create an example of the issue using [this jsbin](http://jsbin.com/biqesi/edit) as a template?\n. Thanks! Thanks for enduring the pains of upgrading. Looking forward to your example.\n. I just noticed this is a small app I was upgrading and it happened because I didn't change the script tag that's loading apiCheck. In apiCheck 7.0.0, the name of the file changed from `apiCheck.js` to `api-check.js`. Make sure that you've updated the file you're loading.\n. Good point. It's likely that most angular-formly users think little to nothing about api-check. Thanks for the feedback.\n. So, I think the better solution would be to make this render faster. If you look at `ng-stats` with `logDigest` turned on, you'll see that when you render a form, there are a TON of digests that run. We need to figure out why that is and see if we can make it so only one digest runs. This is high on my priority list because the initial compile of the form fields is just really terrible and needs improving. I'll keep you informed of my progress.\n. That wont be necessary... I have a pretty good working example locally that I'm working though. I think the main trouble is simply the way angular works... But I'm confident that we can find a work around to make this much faster.\n. First off, I should say that I'm not going to implement the original question. Not only is it the incorrect way to go about solving the problem, it's also pretty much impossible without some bad hackery against angular.\n\nSecondly, if anyone wants to contribute to this at all, see [this branch](https://github.com/formly-js/angular-formly/tree/throw-away/fast) where I've started trying to setup some kind of benchmark to test out how to make it faster. Again, I think that it's just an angular problem... Need to figure out a good workaround...\n. By the way. If you would like to be notified when all fields have finished loading, then you _could_ implement something that would probably work by adding a custom `link` function to all your fields by creating a custom `type` that all of your other field types `extend`. Then in that `link` function, you have access to the field `scope` which has an `options` property for the specific field and a `fields` property for all the fields of the form. Set something on the `options.data` property to say that the specific field has been loaded, then iterate through the `fields` to see if all of the fields have had that property set. If they have, then fire an event.\n\nAs I said, this is a terrible way to go about this. Also, the UI thread is still going to be tied up with angular's digest cycle (so users will likely notice that), but it at least gets you what was originally requested...\n. I'm not sure what you mean by that last bit there...\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Apr 27, 2015 7:33 AM, \"XciD\" notifications@github.com wrote:\n\n> Thanks for your answer.\n> \n> We just found that if we remove template that works with ocLazyLoad\n> https://github.com/ocombe/ocLazyLoad the form render faster and enough\n> quick for us.\n> \n> We had some directive with ocLazyLoad to load dependencies on the fly like\n> select2 or datepicker, and they trigger the link function before rendering\n> on front.\n> \n> We fix this by loading all our component in the resolve of the route...\n> Not the best solution.\n> \n> I think you should consider to implementing a state variable to the Formly\n> directive.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/259#issuecomment-96653263\n> .\n. Changing the name of this to resemble what the solution will be. Also, if anyone wants to take a whack at a solution, I've created [this example](http://jsbin.com/kudixe/edit) which demonstrates where formly falls over (though, to be honest, I think it's more of an angular problem than a formly problem).\n. @pedrocatre, take a look at using [ng-stats](https://github.com/kentcdodds/ng-stats) to do a quick manual benchmark of the performance of your page with > 100 fields. The idea behind formly is that you only pay for watchers that you absolutely need. So, even though it takes angular a while to compile the template in the first place, you should end up with the fastest possible output for forms using angular.\n\nIt is my expectation that you can't build a faster form with angular even if you hard-coded the HTML it produces. I have never tested this though. I do expect that a hard-coded version would be _marginally_ faster, but not enough to justify not using angular-formly. I would love it if someone verified my expectation. If it turned out incorrect, it would give me hope that there's something formly can do to speed things up.\n. Note, you can use `ng-model-options` with formly using the `modelOptions` property.\n. Hoping to work on this soon. I have s lead that looks promising...\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn May 14, 2015 1:51 PM, \"Pedro Catr\u00e9\" notifications@github.com wrote:\n\n> You can use ng-model options so that the value only updates on blur or\n> after several milliseconds.\n> You can also try to remove the number o bindings in your templates (for\n> example: I would have liked to have bindings to change the classes on the\n> form so I can customise it to different uses but I can live without all\n> that. Finally use one time binding for everything that can be one time\n> binded.\n> \n> Additionally you could divide the form into steps (there is an example of\n> using angular form with a multistep wizard) so that you don't have all the\n> watchers for the form active at the same time. The wizard being used in the\n> example uses ng-show and you don't want this though. But it is simple\n> enough to go into the source code and change it to use ng-if. Hope this\n> helps.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/259#issuecomment-102149446\n> .\n. I think that the problem may be the promise chaining in the `link` function of a `formly-field`: https://github.com/formly-js/angular-formly/blob/master/src/directives/formly-field.js#L187\n\nI believe it's because on every `resolve`, there's a `$digest` due to the `$q` library. I reached out [on twitter](https://twitter.com/kentcdodds/status/598924680938921984) and got a few tips that lead me to develop these different examples\n\nCurrent: http://jsbin.com/kudixe/edit \n$$q: http://jsbin.com/fikeku/edit \nNative Promise: http://jsbin.com/pizizi/edit \n\nUnfortunately, I don't think that these are making a difference currently. I welcome anyone to try variations of this and try to figure out how to fix the problem...\n\nTo try something out:\n- Checkout the repo\n- `$ npm install`\n- Make your changes (it's ES6)\n- `$ npm run build` (don't bother with tests, we can fix those later)\n- Create a github gist out of the resulting `dist/formly.js`\n- Use http://rawgit.com/ to get a url to your gist\n- Clone [this template](http://jsbin.com/kudixe/edit)\n- Replace the `formly.js` file with your rawgit URL.\n\nDid it work? I hope so!\n\nIf you want to try a few things out and have a better workflow, try this:\n- `$ npm run watch`\n- `$ http-server dist` [http-server](https://www.npmjs.com/package/http-server)\n- `$ ngrok 8080` [ngrok](https://ngrok.com/)\n- Replace the rawgit URL with your ngrok url\n- Make changes, refresh your jsbin.\n\nI appreciate anyone who wants to help out with this!\n. By the way @cnaccio, that's a LOT of fields... I don't know if you'd get good enough performance doing it by hand with just angular...\n. you might look into the [read-only](http://angular-formly.com/#/example/other/read-only-form) example. Never used x-editable myself...\n. Hmmm, looking at x-editable, I don't think that the read-only example will really do it for you... I would probably just create a directive that integrates with x-editable, then create a custom type with a template that uses this directive.\n. @jvandemo, wow! Thanks for setting up the plunkr and the improved example with a setTimeout/$timeout. Unfortunately, I tried it out in my app and it's hard to describe but the user can visually see things getting rendered which isn't very pretty. Kind of a toss-up which is a better experience.\n. I should also mention, there's one place in particular where performance in my app is not so good due to a lot of fields being rendered. @paulirish helped me interpret some Chrome profiling output for it. Perhaps this will be useful to anyone trying to help speed up angular-formly: https://docs.google.com/document/d/1QSkfqoiZS203BG5hTELTt1GvyD1qc9rDXOpMym9IKlw/edit?usp=sharing\n. Also, I just want to say thank you to anyone helping on behalf of the many developers using angular-formly. Most developers wont come up against these perf issues, but for those of us trying to display many fields, this is definitely a problem. So thanks to anyone who puts time and effort into improving the performance of angular-formly.\n. One thing that I've toyed around with is perhaps compiling everything from the `<formly-form>` element down manually and then inserting it into the DOM after all the field templates have been resolved. I'm a little sceptical that this would really improve performance though. Just a thought.\n. @jvandemo, for the benefit of those watching at home, [this is the code](https://github.com/formly-js/angular-formly/blob/master/src/directives/formly-field.js#L187-L201) that we're talking about. I believe that this is the bottleneck of the render. It's inside of the `formly-field` directive's `link` function.\n\nHere it is with annotations\n\n``` javascript\ngetFieldTemplate(scope.options) // <-- get the template for the field based on it's template/templateUrl or it's type's template/templateUrl\n  .then(runManipulators(formlyConfig.templateManipulators.preWrapper)) // <-- run the preWrapper templateManipulators. This is an array of functions that can return a (modified or unmodified) template string, element, or a promise which resolves to one of these things. We $q.all a $q.when of each of them\n  .then(transcludeInWrappers(scope.options)) // <-- this will \"transclude\" (but not really) the template into any of its own or it's type's wrappers, similar in function to a template manipulator\n  .then(runManipulators(formlyConfig.templateManipulators.postWrapper)) // <-- like the preWrapper manipulators, just another place to put manipulators in the pipeline for maximum flexibility\n  .then(setElementTemplate) // <-- this is where the template is finally $compiled and inserted into the DOM\n  .then(watchFormControl) // <-- this is where we set up a watcher to add the NgModelController to the options. I would be very surprised if this was part of the problem in itself.\n  .then(callLinkFunctions) // <-- this is where we call the field's link function and its type's link function (and any link functions that type extends).\n  .catch(error => {\n    formlyWarn(\n      'there-was-a-problem-setting-the-template-for-this-field',\n      'There was a problem setting the template for this field ',\n      scope.options,\n      error\n    );\n  });\n```\n. Tried commenting out the templateManipulators and wrappers and it made a marginal difference [in the plunk](http://plnkr.co/edit/9hLpoPeKCcEOXUCRtyI1?p=preview) but pretty much no difference in my app...\n. I feel like if there were a way to tell angular to pause digests for just a moment while this thing compiled, that would improve things. But that may just be me misunderstanding how compiling things works. Maybe @teropa could provide some insight there?\n. Yeah, I looked at that too. Unfortunately, you can still see the fields getting rendered one-by-one and suddenly appearing. I really want to find a solution where it's all suddenly rendered immediately. I just hope this is something that's possible with angular... Starting to wonder if perhaps changing this to not use promises would improve the situation... Unfortunately, the async api is one of the things that makes angular-formly so consumable.\n. Toyed around with the idea of having two different link functions and using one or the other based on some pre-configured preference. Most developers wont run into this, but if you do, then you may be willing to give up the niceties of the async api for improved performance (if that's what we'd really get by removing the async api...)\n. I think I understand what we think the problem is. You're suggesting that the problem is that a `$digest` is being called for every promise for every field (which can be huge as a single field could have as many as 10 or more promises). That's what you're suggesting, correct? I think that's what it is as well...\n\nWhat I don't understand is how putting those promises into a queue outside of the link function will prevent a `$digest` from being called after they are each resolved. The only thing I could think of to avoid that was to either use `$$q` or the native `Promise` (or a polyfill) and trying those didn't seem to make a difference.\n\nI think I may just be misunderstanding though.\n. Thanks @kentcooper (awesome name by the way). I've been wanting to benchmark this against doing angular forms by hand (without formly) to see if formly is any worse than regular forms. I always believed strongly that it wasn't much worse, but never had any evidence or tested the theory.\n\nTo be perfectly honest, based on what @kentcooper has said, I'm doubtful that we can improve the performance without doing some serious hackery-trickery with angular... It's not a formly problem, it's an angular problem...\n. Thanks for the help guys! I've spent a little bit of time trying to time things a little better. I'll have time to work on it more later.\n. So I was thinking that maybe the problem is the promise chain. So I created a new feature called `syncMode` which allows you to tell formly that you don't use `templateUrl` or need async support for your template manipulators. It's actually pretty neat. I have [a branch](https://github.com/formly-js/angular-formly/tree/features/syncMode) for it if you're interested in seeing what it takes to support. Wasn't a TON of work... Just a bit of work... Here's [the diff](https://github.com/formly-js/angular-formly/compare/master...features/syncMode?w=1)\n\nUnfortunately... It doesn't make a lick of difference... http://output.jsbin.com/tawaxa/edit\n\nI've all but determined that what's slow here is angular, not angular-formly... Someone please prove me wrong! Many apps need this to be faster...\n. Good point. Hadn't thought about disabling api-check for these perf tests. I'll add that to the most recent plunk...\n. Looks like it speeds it up by 2-3ms per field!\n\nhttp://plnkr.co/edit/SyBNyZjF1XDo6wsDobj4?p=preview\n\nIt's definitely recommended to turn off api-check in production... To do so, see the [api-check docs](https://github.com/kentcdodds/api-check#disable-apicheck)\n. I'm going to go ahead and close this issue. If someone wants to try to figure out how angular-formly could be improved from a performance standpoint on something specific, that would be great, but I don't see this issue going anywhere at this time.\n. Let me know if this one's not enough :-) http://angular-formly.com/#/example/intro/introduction2\n. @wfsm, sorry, I renamed it: http://angular-formly.com/#/example/intro/codementor\n. oh, and here's an example of two fields not matching: http://angular-formly.com/#/example/other/matching-two-fields\n\nFor min/max length, you'd simply use:\n\n``` javascript\n{\n  type: 'input',\n  key: 'whatever',\n  templateOptions: {\n    minlength: 4,\n    maxlength: 10\n  }\n}\n```\n. Thinking this will make formly too complex to make it worth it. So I added the `hide-directive` attribute instead. If you want the `expressionProperties` to work even when the field is hidden with `hide`, then use `hide-directive=\"ng-show\"` on that form.\n. Was actually thinking of doing this already. Will be in 6.1.0 :-) in a few moments. Thanks for the issue!\n. This is now released! `npm install 6.1.0` See the docs:\n\nhttp://docs.angular-formly.com/v6.1.0/docs/formlyconfig#extras\nhttp://docs.angular-formly.com/v6.1.0/docs/formly-form#attributes\n\nThanks again :+1: \n. @gmsewell6, please let me know what you think when you've tried it out. Thanks!\n. so, the placeholder can be whatever. That part isn't dynamic. But you can make it dynamic if you want to. And yes, you could reuse the object above. angular-formly is all about keeping your code DRY, so you could create a custom `type` that defaults the maxlength and minlength values as well. It's extremely powerful. Come at me with a specific use case and I can explain or show how you'd accomplish it with ease :-)\n. Going to go ahead and close this due to lack of activity. Please feel free to open it again if you have further questions/concerns/need help.\n. Make sure that you either include a template library or create your own type.\n\nhttp://docs.angular-formly.com/v6.1.0/docs/custom-templates\n\nOn mobile otherwise I'd be more helpful. Let me know if you need more help and I'll help when I get on later.\n. I'll reopen this to remind me. Thanks!\n. Added. Thanks again!\n. I fixed the template. Could you try it again? Thanks for your patience!\n. Please close this issue if the template works for you :-)\n. Thank _you_ for letting me know it was broken :-)\n. I haven't read through everything yet, but can I just say, this is a terrific bug report. Thank you!\n. Ah! You're right! The docs are out-dated. I'll update that as soon as possible...\n\nSo, angular-formly now comes equipt with a sweet new feature called the [`ngModelAttrsTemplateManipulator`](http://docs.angular-formly.com/v6.1.0/docs/ngmodelattrstemplatemanipulator) which will automagically add a bunch of attributes based on the config for the field. What's cool about this is it makes creating custom templates a breeze and saves on the amount of watchers necessary for a particular field.\n\nOne thing to note about this manipulator is that (with a few exceptions) it will not overwrite attributes that already exist in the template. So, if you specify your own name (for example) then it should not override your own name. I haven't looked at your example yet, but if this behavior is not what you're seeing then that is definitely a bug :-)\n\nI'll look at your example, but let me know if this clears anything up for you.\n. Alright! You found a real bug! I need to do some work to get it fixed. May be a day or two. But here's [a workaround](http://jsbin.com/cejoru/edit) for now :-) Thanks for using angular-formly! I'll let you know when the bug is fixed.\n. The actual solution will be a fix in `formly-field`, not in the template manipulator. The issue is that the `formly-field` is watching the field `id` rather than respecting the possibility that a user could specify a custom name.\n. Alright, updated the docs! Now to fix the bug!\n. I think I've got it! Master has been updated and your bug reproduction is working as expected now. Let me know if I've missed anything. Once I get the ok from you, I'll cut a release! Thanks!\n. There is no solution that I have found in the open source world. But I can tell you that in my app, we actually don't use the pre-built templates and have custom templates. We use bootstrap for our columns and simply have a specified column width for all of our labels and our fields. And labels are a part of the fields via a wrapper. This is the result.\n\n![screen shot 2015-04-27 at 3 13 43 pm](https://cloud.githubusercontent.com/assets/1500684/7358028/0afcedba-ecf0-11e4-89e6-1a5050aed636.png)\n\nI'll make an example for this when I have time. It should be trivial to accomplish using any css grid system (including flexbox).\n. You're very welcome! And thanks! I want formly to be as helpful as possible and it's rewarding to me when I see it being helpful to other developers.\n\nI take it that you don't need the example right away based on you closing this issue?\n. Actually could you move it to the [angular-formly-website](https://github.com/formly-js/angular-formly-website) repo? Thanks!\n. Quick look on mobile looks good, but I'd like to verify before merging. Thanks!\n. Looks good! Thanks. I'm also going to add the ability to return a promise from these functions just to mirror all other apis.\n. Watch the first video on this page:\nhttp://docs.angular-formly.com/v6.2.0/docs/learn-angular-formly\n\nToward the end I talk about this.\n\nLet me know if you have more questions. Please close this issue if this\nsolves your problem :-)\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn May 1, 2015 2:12 PM, \"Sean Walsh\" notifications@github.com wrote:\n\n> Is it possible to set a default value for a field? I've been perusing the\n> code, but I don't see any obvious way to do so. My use case is a form that\n> has values pre-populated (e.g. the user is returning to edit a form that\n> they've already completed).\n> \n> I can manually set the values by storing a value in my field's data\n> object and then iterating over the fields to set the value into the model,\n> but it becomes cumbersome to do so when working with nested fields, like\n> the ones in the Advanced Layout\n> http://angular-formly.com/#/example/other/advanced-layout example.\n> \n> I tried setting initialValue on my field options, but that appears to get\n> overwritten in formly-field.js\n> https://github.com/formly-js/angular-formly/blob/master/src/directives/formly-field.js#L100.\n> The relevant line is:\n> \n> const initialValue = $scope.model && $scope.model[key];\n> \n> This variable is then extended onto the field options, overwriting it. I\n> was able to get the behavior I'm looking for by changing the line to\n> \n> const initialValue = options.initialValue || ( $scope.model &&\n> $scope.model[key] );\n> \n> and then iterating each of my fields to call resetModel(). This is still\n> somewhat cumbersome, but not as bad as setting the model value manually.\n> \n> Would you consider a pull request to set the model automatically if an\n> initialValue exists and the model has not already been set? Probably\n> something like this, executed right after addModelWatcher():\n> \n> function setModelValue() {\n>     $timeout(function() {\n>         var field = $scope.options;\n>         if(!angular.isDefined($scope.model[field.key]) && angular.isDefined(field.initialValue)) {\n>             field.resetModel();\n>         }\n>     });\n> }\n> \n> Alternatively, if I'm missing something and this is already built in,\n> please tell me how to do it! :)\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/269.\n. Actually, I just had a conversation with @ckniffen about this on gitter and I finally understand why people want this feature. It's pretty much what you described. I'll try to get this in a 6.3.0 very soon. Thanks for the issue!\n. can't believe I overlooked that... Thanks\n. I'll answer better later when I get a second, but the problem is with the\nng-if that formly uses on the fields. Look at changing that to ng-show\nusing the hide-directive attribute.\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn May 4, 2015 7:47 AM, \"Pedro Catr\u00e9\" notifications@github.com wrote:\n\n> If I specify the hide property in the field then the expression will not\n> be able to override this afterwards.\n> \n> Example:\n> \n> {\n>         key: 'text2',\n>         type: 'input',\n>         hide: true,\n>         templateOptions: {\n>           label: 'Hey!',\n>           placeholder: 'This one is disabled if there is no text in the other input'\n>         },\n>         expressionProperties: {\n>           hide: '!model.text',\n>           'templateOptions.disabled': '!model.text'\n>         }\n>       }\n> \n> I have hide: true and then an expression property that sets hide if the\n> model has text. But the field will not appear.\n> \n> You can check it out here:\n> http://jsbin.com/yumasegefi/1/edit?html,css,js,output\n> \n> if you remove the hide: true from the example then when you put data on\n> the input box the second one will show up.\n> \n> The reason I need to do something like this is that I have a huge\n> multistep form that is slow to initialize on steps that have many fields,\n> and in one part I have 3 possible headings and only one will remain. The\n> current behaviour is that the 3 headings appear and then 2 of them\n> disappear. I would rather have them all hidden by default and show only one\n> when angular and angular formly finish doing their thing.\n> \n> Thanks! Great library! it is saving me a lot of work and it has an amazing\n> API. Were it not for angular performance issues this would be perfect.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/271.\n. That's fine. Switch from expression properties to watcher.\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn May 4, 2015 8:04 AM, \"Pedro Catr\u00e9\" notifications@github.com wrote:\n\n> Can't :( I really need to use ng-if because there are many dependencies\n> and many fields hidden in the same step of the form. If I use ng-show all\n> their binding will be active if though they are not being displayed.\n> \n> I already have some performance issues (specially with older browsers and\n> weaker machines) so I really can't afford to use ng-show.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/271#issuecomment-98717998\n> .\n. Note, obviously, you've got some serious performance considerations, so you may need to take things at a bit of a different approach. If you have a bunch of fields with their own hide conditions, instead of paying for a watcher for each of those, create your own watcher and respond to model changes yourself (by setting `hide` on the appropriate fields).\n\nIt's not as clean and neat, but that's the reality of the performance situation. :-(\n. So I've now had time to actually read through your issue. For the headings, you might consider not using angular-formly and just coding that up yourself in the HTML. This would allow you to using `ng-if` without a problem.\n. @pedrocatre, yes, I do mean creating watchers outside of the JSON. This is because there's a watcher created for every time you have a `watcher`. And they all watch the same thing. It's just some extra overhead that may not be necessary.\n\nThe hide thing is not a bug. Basically, when the field is hidden behind the ng-if, it never compiles which means the `expressionProperties` never get set up and cannot run.\n\nI may be able to add a `hideExpression` attribute which could make life a little bit easier for you. It would not be a normal formlyExpression though. It could be a function or a string, but it would be evaluated on the `formly-form` not the `formly-field` so you wouldn't have access to the same stuff... But it should be enough for what you want (it'll have the model for example).\n. In the latest beta, I added a hideExpression property. Give that a shot.\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn May 5, 2015 10:38 AM, \"Pedro Catr\u00e9\" notifications@github.com wrote:\n\n> hideExpression attribute would be nice thanks! I'm still going to think\n> how I could do this with the existing mechanisms. One thing that comes to\n> mind would be to have only one header instead of 3 and just change its\n> text. It is less easy to configure and see, but it would probably work and\n> I would have less watchers.\n> \n> Regarding what you said about the watcher instead of expressionProperties\n> it would not help in my case because I'm not using the expressionProperties\n> per field. For the step that can have more than 100 fields I put them\n> inside groups and I only have the expressionProperties per group of fields\n> (8 groups in total each group has many fields inside) not in every field.\n> It is strange that I have performance issues and so many watchers (I used\n> your awesome ng-stats lib to see this!) because I one time bind most things\n> inside the fields. Also I ng-if the groups until they are necessary. Still\n> on that step in the best case scenario I have 513 watchers (before the user\n> starts interacting with the form and causing more fields to show up). Worst\n> case I have more than 3000 watchers. I will have to find time to take a\n> closer look.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/271#issuecomment-99134665\n> .\n. @pedrocatre, have you tried `hideExpression` yet? Here's [an example](http://angular-formly.com/#/example/field-options/hide-fields). I think this will do what you need. Only available in `6.4.0-beta.4` though... Please provide feedback :-)\n. ping @pedrocatre. I would really like to make sure that this solves your use case before I cut an official release. Let me know as soon as you are able please :-)\n. Supported in 6.4.0 :-)\n. Thanks for letting me know. Docs can be hard to keep updated! :-)\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn May 4, 2015 7:53 AM, \"Pedro Catr\u00e9\" notifications@github.com wrote:\n\n> In the documentation http://docs.angular-formly.com/v6.1.0/docs/tips you\n> have this tip:\n> \n> angular.module('yourModule').config(\n>   function(formlyConfigProvider, formlyApiCheck, onProd) {\n>     if (onProd) {\n>       formlyApiCheck.disable();\n>       formlyConfigProvider.disableWarnings = true;\n>     }\n>   }\n> );\n> \n> When I was running version 5 formlyApiCheck.disable() would work. I\n> upgraded to the latest 6.3.2 and now I get TypeError:\n> formlyApiCheck.disable is not a function.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/272.\n. This has been updated. Thank you!\n. @abodacs, this has been done in `6.4.0-beta.1`. If you could try it out, that would be awesome. See [this example](http://angular-formly.com/#/example/other/advanced-layout-flex)\n. @abodacs, have you tried out the new advanced layout stuff? I want to make sure that everything's working before I cut an official release. (By the way, the latest version is `6.4.0-beta.3`\n. @gowram, you mean like the [Multi-input](http://angular-formly.com/#/example/other/multi-input) example? You may be able to use a `fieldGroup` for that. Haven't tried it out, but it may be an easier API. I don't have time to write docs right now, but here's the apiCheck checker for `fieldGroup`: https://github.com/formly-js/angular-formly/blob/master/src/providers/formlyApiCheck.js#L148\n\nYou can now specify a `fieldGroup` or a `field` for the `fields` of a `<formly-form>`.\n. :+1: \n. Supported is 6.4.0\n. If you look at the package.json, there's a very loose peerDependency for angular. Angular-formly strives to support 1.2+ so you should be good. It is noteable that angular-formly does version checking to know what features it can use from 1.3\n. @ckniffen and @Den-dp were having a talk on [the Gitter chat](http://gitter.im/formly-js/angular-formly) today about this same issue. @ckniffen created [an example](http://jsfiddle.net/W99rX/) of a directive that could do this. Thanks!\n. Not sure whether this will require a breaking api change or not. I don't think so, but it looked too difficult to accomplish in the 6.4.0 release so I've pushed it back to 6.5.0\n. Yeah, you know what. I think this issue doesn't really make sense...\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn May 30, 2015 5:11 PM, \"Caleb Kniffen\" notifications@github.com wrote:\n\n> Does it need to make the assumption that all elements with ngModel map to\n> the same value.\n> \n> I ask because of\n> https://github.com/formly-js/angular-formly/blob/573a9b070097f1ccd8f55eada4df2f8be7255e4e/src/directives/formly-field.js#L155\n> .\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/275#issuecomment-107098396\n> .\n. I can't think of other features that use the `formControl` directly. I wonder if there's something we can do in the `ngModelTemplateManipulator` (which is responsible for setting the name) to handle multiple `ng-model` elements by setting a unique name for each.\n. Thinking about it more, I think that we definitely should have that feature in the `ngModelTemplateManipulator`. Do you think you could add that to this PR? You'll know it's working when your tests pass when you omit the `name` on your `ng-model`s. Should probably add a test in `ngModelTemplateManipulator` as well.\n. Also, thanks for taking this one. It's far from a simple feature.\n. Supported in `6.12.0-beta.0`. Anyone watching, please test your stuff to make sure we didn't break anything!\n. Note, all of the examples on the website seem to be working fine :+1: \n. Good request. I can add this to 6.4.0-beta.5. Give me a few minutes :-)\n. ```\n$ npm install angular-formly@6.4.0-beta.5\n```\n\nor\n\n```\n$ bower install angular-formly@6.4.0-beta.5\n```\n\nThanks!\n. Good suggestion. I'll look into it.\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn May 8, 2015 9:16 AM, \"Jordan\" notifications@github.com wrote:\n\n> This looks like a great library! BUT there is a multiverse of libraries\n> out there and I can't read the details about all of them. I think the\n> website would really benefit from having a \"Why Angular-Formly?\" section\n> that's up front and center. IMHO this is more useful than summarizing what\n> the library does - at least for me, I am more interested in the problems a\n> library solves before I want to know how it works.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/277.\n. Migrating this to the website: https://github.com/formly-js/angular-formly-website/issues/20\n. Good point. The reset feature should not only reset the model value, but\nthe NgModelController as well. I'll get this fixed as soon as I am able.\nThanks.\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn May 8, 2015 12:30 PM, \"Chris Boden\" notifications@github.com wrote:\n\n> In resetting a form validation is run, fields are $dirty and marked as\n> invalid if they're required.\n> \n> http://output.jsbin.com/pifericawe\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/278.\n. Note, if you need a workaround immediately, all fields have the controller\nattached to them called formControl. You could reset the dirty and touched\nstate yourself until I can get this fixed (or submit a PR. Should be fairly\nsimple...\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn May 8, 2015 1:18 PM, wrote:\n\n> Good point. The reset feature should not only reset the model value, but\n> the NgModelController as well. I'll get this fixed as soon as I am able.\n> Thanks.\n> - Kent C. Dodds\n> \n> (Sent from my mobile device, please forgive typos or brevity)\n> On May 8, 2015 12:30 PM, \"Chris Boden\" notifications@github.com wrote:\n> \n> > In resetting a form validation is run, fields are $dirty and marked as\n> > invalid if they're required.\n> > \n> > http://output.jsbin.com/pifericawe\n> > \n> > \u2014\n> > Reply to this email directly or view it on GitHub\n> > https://github.com/formly-js/angular-formly/issues/278.\n. If you use anything other than <form> or <ng-form> then there's no form\ncontroller to provide you with. So that simply wouldn't even make sense in\nthat case.\n\nThe solution is to wrap the <formly-form> in an ng-form or form which has a\nname attribute, and pass that same value to the formly-form form attribute.\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn May 8, 2015 12:42 PM, \"Sean Walsh\" notifications@github.com wrote:\n\n> JSBin example: http://jsbin.com/molulomugi/1/edit?html,output\n> \n> I tried to write a failing test for it, but I can't get the tests running\n> on my system.. looks like an issue with the Babel loader. The failing test\n> would probably look like this:\n> \n> it(`should place the form control on the scope property defined by the form attribute when root-el is specified`, () => {\n>   compileAndDigest(`<formly-form root-el=\"div\" form=\"vm.myForm\" model=\"model\" fields=\"fields\"></formly-form>`);\n>   expect(scope.vm).to.have.property('myForm');\n>   expect(scope.vm.myForm).to.have.property('$name');\n> });\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/279.\n. Exactly\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn May 8, 2015 2:53 PM, \"Adam Gordon\" notifications@github.com wrote:\n\n> I'm looking at https://docs.angularjs.org/api/ngMessages and\n> http://angular-formly.com/#/example/advanced/validators and see the\n> template wrapper being configured in the formlyConfigProvider which\n> defines the validation.html ng-message include. My question would be how\n> would we go about overriding the default error messages.\n> \n> Is it as simple as specifying the message field on the validators object?\n> As such:\n> \n> {\n>   key: 'ip',\n>   type: 'input',\n>   validators: {\n>     ipAddress: {\n>       expression: function(viewValue, modelValue) {\n>         var value = modelValue || viewValue;\n>         return /(\\d{1,3}.){3}\\d{1,3}/.test(value);\n>       },\n>     message: '$viewValue + \" is not a valid IP Address\"'\n>   }\n> }\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/280.\n. Did this answer your question? If so, please close this issue :-)\n. Use templateUrl instead of template\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn May 11, 2015 12:50 PM, \"Adam Gordon\" notifications@github.com wrote:\n\n> I suspect this is due to a lack of HTML escaping but I created a wrapper\n> that allegedly didn't include <formly-transclude></formly-transclude> in\n> a template and got the following (confusing) error message:\n> \n> Failed to instantiate module foo due to:\n> Error: Formly Error: Template wrapper templates must use \"\" somewhere in them. This one does not have \"\" in it: static/views/required-label.html\n> Additional information: {\"name\":\"bootstrapLabel\",\"template\":\"static/views/required-label.html\",\"apiCheck\":{},\"types\":[]}.\n> ...\n> \n> Looking at the source (line 414 in version 5.2.1), it looks like it's\n> supposed to inject the string \"<formly-transclude></formly-transclude>\"\n> into the error message, but that's not happening.\n> \n> The cause of this is that I'm trying to override the built-in\n> bootstrapLabel wrapper to make the required \\* character red and the\n> template (which is a near copy of formly's label.html file) DOES have the\n> requisite formly-transclude element. Debugging formly.js reveals that the\n> template field is not getting de-referenced, that is, the template is\n> coming into the checkWrapperTemplate(...) function as the string\n> \"static/views/required-label.html\" and not the actual contents of the\n> template.\n> \n> Here's the relevant portion of my .config(...):\n> \n> .config([\n>   'formlyConfigProvider',\n>   'formlyBootstrapApiCheck',\n>   function(formlyConfigProvider,\n>            formlyBootstrapApiCheck) {\n> \n> ```\n> /* snip */\n> \n> formlyConfigProvider.setWrapper({\n>   name: 'bootstrapLabel',\n>   template: 'static/views/required-label.html',\n>   apiCheck: {\n>     templateOptions: formlyBootstrapApiCheck.shape({\n>       label: formlyBootstrapApiCheck.string,\n>       required: formlyBootstrapApiCheck.bool.optional\n>     })\n>   },\n>   apiCheckInstance: formlyBootstrapApiCheck\n> },\n> { name: 'bootstrapHasError',\n>   template: 'static/views/has-error.html'\n> });\n> \n> /* snip */\n> ```\n> \n> }\n> \n> Thoughts?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/281.\n. No worries :-)\n. I updated the example to use the new `formGroup` and `className` apis. These are only available in the latest (beta) release which should hopefully be released in the next day or two. Let me know what you think.\n. I'm not sure I understand what you mean... `ng-repeat` _is_ working under the hood...\n. I think all you're saying is that you'd like a pre-defined type that does this. You don't want to have to define it yourself. Is that right?\n. I see... Well, types are a template concern. And templates are specific to css frameworks. Are you looking for a bootstrap template then?\n. As a side, I highly recommend that if you're going to be serious about creating forms in your app, you should create your own types. As awesome as the template libraries are, they can't beat the customizability required for a serious application. And types are so easy to create that you shouldn't have a problem with it.\n. I see. I think having that built-into angular-formly could be useful... I'll see if I can think of a good way to include that.\n. @jlowery457, I improved the example: http://angular-formly.com/#/example/advanced/repeating-section\n. If anyone wants to discuss a good API as well as a good implementation, I would love to talk about it. I'd really love to improve support for repeating fields/fieldGroups, but I'm not certain as to the best way to go about implementing it.\n. I recently added the functionality to specify a `fieldTransform` on a global/form level that I think takes care of the json schema issue and may cover this case as well. Have you had a chance to look at that?\n. [Docs](http://docs.angular-formly.com/v6.16.0/docs/formly-form#section-fieldtransform)\n. Yes, this runs as one of the first things in the `formly-form` controller, so you can add/remove/modify any fields. Meaning what you send it can be total nonsense and as long as what you return is an array of valid field configurations, then you're good. I'll try to create an example as soon as I am able.\n. Is anyone still waiting for this feature? I'm sorry I haven't really looked into implementing it. It's not the most straightforward one to implement.\n. I'm going to close this in favor of someone creating [a plugin](http://docs.angular-formly.com/page/plugins).\n. Sorry I haven't responded until now. Been kinda drowning recently. I'm not certain what the problem is. Why don't you have a look at [this example](http://angular-formly.com/#/example/intro/codementor) and see if you can get it working.\n. Ah, the problem is actually a jqLite bug that has been fixed in 1.4.x and I don't expect will be backported to 1.3.x :-( https://github.com/angular/angular.js/issues/11038\n\nThe only way to accomplish the ng-repeat with ng-messages is to use 1.4.x or include jQuery\n. Oh, sorry, I thought you were talking about overriding messages set in the [formlyValidationMessages](http://docs.angular-formly.com/v6.4.0/docs/formlyvalidationmessages) service. Yeah, simply using the template wont work, but that's not a formly thing, that's an ng-messages thing. If you want defaults, use the formlyValidationMessages service. This is why you generally don't want to have any custom `ng-message` directives in there. Just the ones in the `ng-repeat`.\n\nI'll have to look at making sure everything works ok in angular@1.4.x. I was under the impression that it did, but I'll double check that. Thanks!\n. Hmmm.... It really depends on the experience that you want to give your user... I wouldn't say that either of those is necessarily the \"right\" way to tell formly about them...\n. So, what I would recommend is using a router `resolve` feature which allows you to make requests before a controller is loaded and inject the results into the controller. That way you keep your controllers as synchronous as possible. This is just good practice in general in my opinion.\n. Good question, should have specified. For some advanced layout stuff, I want to have a \"field\" in place just to have a node there with a specific class. So something like:\n\n```\n{template: '', className: 'my-class-name'}\n```\n. Right now, I have to do:\n\n```\n{template: 'nbsp;', className: 'my-class-name'}\n```\n\nLess fun...\n. It's actually not a directive, and it's never actually rendered. Do there's\nno need to prefix it with data.\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn May 13, 2015 5:37 PM, \"Adam Gordon\" notifications@github.com wrote:\n\n> The checkWrapperTemplate(...) function only looks for the string\n> <formly-transclude></formly-transclude> and thus, breaks when using\n> <data-formly-transclude></data-formly-transclude> which is valid\n> directive syntax.\n> \n> The work-around is easy, just remove the data- but just wanted to put\n> this on your radar.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/286.\n. This is a good idea. I'll implement it when I get the chance in the next week or so. PRs welcome :-)\n. This has been added as an [`formlyConfig.extra`](http://docs.angular-formly.com/v6.4.0/docs/formlyconfig#extras) in 6.5.0 :-) \n. You have to make sure that the `FormController` that's getting submitted is the one that you pass to angular-formly. As of a few minutes ago, you should be able to do this:\n\n``` html\n<form name=\"vm.theForm\" ng-submit=\"vm.submit()\">\n  <formly-form mode=\"vm.model\" fields=\"vm.fields\" form=\"vm.theForm\"></formly-form>\n</form>\n```\n\nAnd that should work if you're using angular-formly@6.11.2\n. Sorry @Quji, at the time, you would have problems giving them the same name. Now you don't. Or, at least you wont as soon as I fix the bug you just found :-) I'll let you know and have an example for you when I have it fixed!\n. Alrighty, here's a cloned and fixed version of your jsbin: http://jsbin.com/cekepo/1/edit\n\nHad to change two things:\n1. You now need to specify the `name` attribute on your `<form>` that has the `ng-submit` and then pass that same value to the `form` attribute of the `<formly-form>`.\n2. Your `formlyConfig.extras.errorExistsAndShouldBeVisibleExpression` expression was wrong, it's supposed to be `form.$submitted`.\n\nIt's working now with 6.11.4. Enjoy!\n. Awesome! Thanks @ckniffen.\n. My guess is that the field configuration for one of your fields is undefined... But I'll look forward to the jsbin :-)\n. I'm going to go ahead and close this due to lack of activity. Please re-open it if you need further help.\n. Thanks @TheMcMurder!\n. Thanks!\n. @ckniffen, if you're looking for a challenge ;-)\n. Give that a shot in a jsbin and you'll see why that will unfortunately not\nwork.\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn May 15, 2015 9:39 PM, \"Caleb Kniffen\" notifications@github.com wrote:\n\n> I may be missunderstanding the issue but I thought the following would\n> work.\n> \n> {\n>   ngModelAttrs: {\n>     foo: {\n>       attribute: 'foo'\n>     },\n>     bar: {\n>       attribute: 'bar'\n>     }\n>   },\n>   templateOptions: {\n>     foo: true,\n>     bar: true\n>   }\n> }\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/293#issuecomment-102568177\n> .\n. Actually....... Maybe it will... I'll have to give it a look later.\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn May 15, 2015 9:41 PM, \"Kent C. Dodds\" kent@doddsfamily.us wrote:\n\n> Give that a shot in a jsbin and you'll see why that will unfortunately not\n> work.\n> - Kent C. Dodds\n> \n> (Sent from my mobile device, please forgive typos or brevity)\n> On May 15, 2015 9:39 PM, \"Caleb Kniffen\" notifications@github.com wrote:\n> \n> > I may be missunderstanding the issue but I thought the following would\n> > work.\n> > \n> > {\n> >   ngModelAttrs: {\n> >     foo: {\n> >       attribute: 'foo'\n> >     },\n> >     bar: {\n> >       attribute: 'bar'\n> >     }\n> >   },\n> >   templateOptions: {\n> >     foo: true,\n> >     bar: true\n> >   }\n> > }\n> > \n> > \u2014\n> > Reply to this email directly or view it on GitHub\n> > https://github.com/formly-js/angular-formly/issues/293#issuecomment-102568177\n> > .\n. [You're right](http://jsbin.com/hulidu/1/edit?html,js,output) it works just fine. Thanks!\n. You're right.\n. I think that this feature will be even less needed once #378 exists. Closing.\n. Perhaps could temporarily support both.\n. Cool. Perfect PR. I'm assuming the tests will pass. When they do, I'll merge and cut a release. Thanks for the contribution!\n. Officially released as 6.5.1. Thanks!\n. Hey @icfantv. Sorry if `api-check` is hurting your feelings. But it's for the best. Much better than going down a road for a few hours before realizing that you're using angular-formly wrong.\n\nAs for your question. First off, your config is wrong. I'm guessing this was just a copy/paste error or something, but you have `templateOptions` and `expressionProperties` inside the `validators` property... They should all be sibling properties at the root of the config object.\n\nSecondly, angular-formly doesn't support disabling validators. This is the first time I've heard of this use case... Perhaps you could describe what your use-case is and I can give you the right way to do it or we can figure out how angular-formly can cover your use-case better.\n. Yeah, a better way would be to not use `expressionProperties` and actually just set the value based on the state (create/edit). So when you create the field, before you add the validator, check to see if you're in `edit` mode. If you are, don't add the validator. Also, instead of using `expressionProperties` for disabled, just say something like: `disabled: isEditMode` or something like that. That's what I do. It's better for several reasons. Would that work?\n. something like:\n\n``` javascript\n{\n  key: 'foo',\n  type: 'input',\n  validators:  {\n    validateFoo: isEditMode ? undefined : {\n      expression:  vm.someFunc,\n      message: '\\'some message'\\'\n    }\n  },\n  templateOptions: {\n    disabled: isEditMode\n  }\n}\n```\n. I do stuff like that all the time\n. Note, for people who are persisting their config to a database and need it to just work with JSON, then another solution would be to make checking the mode part of the validator.\n. Glad that'll work for you :+1: \n. In all honesty, I haven't done that for validators before. I'm not certain why that is causing you issues, but one thing that you could do is something like this:\n\n``` javascript\nvar myField = {\n  key: 'foo',\n  type: 'input',\n  validators:  {},\n  templateOptions: {\n    disabled: isEditMode\n  }\n};\n\nif (!isEditMode) {\n  myField.validators.fooValidator = {\n    /* snip */\n  };\n}\n```\n. Actually, you know what would be even better:\n\n``` javascript\n{\n  key: 'foo',\n  type: 'input',\n  validators:  {\n    validateFoo: isEditMode ? 'true' : {\n      expression:  vm.someFunc,\n      message: '\\'some message'\\'\n    }\n  },\n  templateOptions: {\n    disabled: isEditMode\n  }\n}\n```\n. Hmmm... That's crazy.... That should totally work... (the `undefined` solution should have worked as well)... Try this:\n\n``` javascript\n{\n  key: 'foo',\n  type: 'input',\n  validators:  {\n    validateFoo: isEditMode ? {expression: 'true'} : {\n      expression:  vm.someFunc,\n      message: '\\'some message'\\'\n    }\n  },\n  templateOptions: {\n    disabled: isEditMode\n  }\n}\n```\n. http://jsbin.com/foramu/1/edit?html,js,output :-)\n. Haha, that's actually a common pitfall. But it's literally an angular expression, so there's really no way to get around it :-( Glad you got it working! :dancer: \n. :+1: \n. I couldn't reproduce this... Am I doing something wrong? http://jsbin.com/sekepu/edit?html,js,console,output\n. I'm going to go ahead and close this for inactivity. Please re-open if you have more information.\n. Thanks @koenweyn!\n. You've got it. Technically, angular-formly doesn't ship with any validators\nat all and only leverages a few of angular built in ones.\n\nI was going to link you to a validation library that you could use, but all\nthe ones I found are too big in scope. If anyone knows of a validation\nlibrary that just ships functions that would work great with formly.\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn May 21, 2015 5:31 AM, \"Matt Miller\" notifications@github.com wrote:\n\n> I'm having trouble finding a clear list of the validation types built into\n> formly.\n> \n> The documentation page\n> http://docs.angular-formly.com/v6.4.0/docs/validation is sparse.\n> \n> The best I could reason is that Angulars standard html5 validations are\n> supported, along with custom expressions your write yourself, ala this\n> page http://docs.angular-formly.com/v6.4.0/docs/formly-expressions.\n> \n> Is there anything more robust I should reference?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/301.\n. I should also point out that angular-formly will never ship with custom\nvalidators. That is outside the scope of the project. It is concerned about\nmaking an easy api for you to add your own business-specific validators.\n\nOn another note, if I can't find a validation library that's just a bunch\nof functions, then I'm going to make one. I can't believe something like\nthat doesn't already exist though...\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn May 21, 2015 5:59 AM, \"Kent C. Dodds\" kent@doddsfamily.us wrote:\n\n> You've got it. Technically, angular-formly doesn't ship with any\n> validators at all and only leverages a few of angular built in ones.\n> \n> I was going to link you to a validation library that you could use, but\n> all the ones I found are too big in scope. If anyone knows of a validation\n> library that just ships functions that would work great with formly.\n> - Kent C. Dodds\n> \n> (Sent from my mobile device, please forgive typos or brevity)\n> On May 21, 2015 5:31 AM, \"Matt Miller\" notifications@github.com wrote:\n> \n> > I'm having trouble finding a clear list of the validation types built\n> > into formly.\n> > \n> > The documentation page\n> > http://docs.angular-formly.com/v6.4.0/docs/validation is sparse.\n> > \n> > The best I could reason is that Angulars standard html5 validations are\n> > supported, along with custom expressions your write yourself, ala this\n> > page http://docs.angular-formly.com/v6.4.0/docs/formly-expressions.\n> > \n> > Is there anything more robust I should reference?\n> > \n> > \u2014\n> > Reply to this email directly or view it on GitHub\n> > https://github.com/formly-js/angular-formly/issues/301.\n. I found a terrific validation library that works great with angular-formly :-)\nis.js: http://is.js.org/\nexample: http://angular-formly.com/#/example/integrations/is-js\n. I improved the docs for [validation](http://docs.angular-formly.com/v6.10.1/docs/validation)\n. Yeah, so if you're loading it from a server then you'll have to use the string version for your [watcher and other expressions](http://docs.angular-formly.com/v6.4.0/docs/formly-expressions). In-lining functions as strings will not work (and would be a very bad idea). Here's an example that may be helpful to you: http://angular-formly.com/#/example/other/json-powered\n\nP.S. I recommend avoiding using `watcher` if you can. It's better to try to use `expressionProperties`. Mostly from a performance standpoint.\n. Let me know if that is enough to get you going.\n. Absolutely. Depending on the dropdown's `templateOptions`, you might do something like this: http://angular-formly.com/#/example/other/filter-select\n. Yes, I totally love js-data from @jmdobry. @jmdobry, would love to collaborate on a library that could convert your schema to mine and then back again so your users can use angular-formly and my users can use js-data. Would be amazingly awesome.\n. angular-formly is pretty versatile, but I made [an example](http://angular-formly.com/#/example/integrations/is-js) using [is.js](http://arasatasaygin.github.io/is.js/) and it was pretty cool.\n. I also [tweeted about it](https://twitter.com/kentcdodds/status/601367918446645248) a few days ago. Found a few libraries there.\n. I actually don't think that I'll ever get to this. If someone else wants to do this, I'd happily help them get started. I'm going to go ahead and close this though as I don't plan on actually implementing it.\n. To, anyone interested in implementing this. I added a new feature in [6.14.0](https://github.com/formly-js/angular-formly/blob/master/CHANGELOG.md#6140) that allows you to specify a `fieldTransform` function to convert a given field configuration into something that angular-formly understands. So accomplishing something like this should be a matter of writing a fieldTransform to convert js-data schema into formly field configurations.\n. This is definitely something that I want to make work. Give me some time to look into it later.\n. I created a jsbin for it to demonstrate the issue: http://jsbin.com/goduno/edit\n. Boy, you've really got me stumped... I don't know how to accomplish that design based on how angular-formly works. Could you describe the UI you're trying to actually build? Maybe I can help you figure out a work-around.\n. That shouldn't be too difficult to add I think... If you think that it would work and you need that functionality, then I may take the time to add it.\n. I don't think any drawbacks of having multiple `formly-form`s would be noticeable. If you wanted to make sure that `formState` was shared between all of the fields (in the different forms) then you'd have to make sure it was initialized prior to the forms rendering. Another thing you'd need to be aware of is that the `fields` property for each of the forms would be different. Not normally a real issue though. I think you've found a good solution. Do you mind [creating an example](https://github.com/formly-js/angular-formly-website/blob/master/CONTRIBUTING.md) for the website?\n. Ah, good catch. I didn't notice that. Basically, the last `formly-form` would overwrite the other ones. So you don't want to do that. Instead, wrap all of them in a single `ng-form` or `form` and specify a `name` on that and don't worry about specifying a `form` attribute on any of the `formly-form`s (unless you're interested in that specific form controller for some reason).\n. I'm going to go ahead and close this issue. An example for the website would be welcome. Thanks @DrDanRyan!\n. I'm not sure I understand the problem you're having. Could you follow the instructions here so we can help you better? http://help.angular-formly.com\n. That issue on npm is the solution. I'll get this implemented soon. Thanks\nfor bringing it up :-)\n\n-Kent C. Dodds\n\nOn Thu, May 21, 2015 at 2:39 PM, Denis Bendrikov notifications@github.com\nwrote:\n\n> Also I found related issue in npm npm/npm#2800\n> https://github.com/npm/npm/issues/2800\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/305#issuecomment-104414347\n> .\n. Tested, doesn't work for me. See PR for more info.\n. This is now fixed :-)\n. Actually this is possible. Simply remove the version altogether and it will add the latest version! For example: http://docs.angular-formly.com/docs/ngmodelattrs NEAT!\n\nHowever, you'll notice that the latest version of angular-formly is 6.6.0 but the latest docs version is 6.4.0. Perhaps @gkoberger or someone he knows can explain why [this regression](https://twitter.com/kentcdodds/status/600275240887799808) has still not been fixed after 4 days...\n. Closed with version 6.7.0\n. Maybe this should be an additional issue, but I think that while we're at it, we should make it work on a per-field/per-type basis as well.\n. Officially released in 6.11.0!\n. The test for it is a little crazy: https://github.com/formly-js/angular-formly/blob/master/src/directives/formly-field.test.js#L975-L1083 :-)\n. Sorry, there was too much going on in this PR. Please keep PRs down to atomic changes, and never commit the `dist`. I'll go ahead and get this done really quick. Thanks!\n. Supported in 6.9.0\n. Thanks for catching that!\n. Released as 6.8.2\n. It's because you did something like this:\n\n``` javascript\n{\n  label: 'some label',\n  placeholder: 'some placeholder'\n  // more configuration options\n}\n```\n\nWhen it should have been something like this:\n\n``` javascript\n{\n  // some configuration options\n  templateOptions: {\n    label: 'some label',\n    placeholder: 'some placeholder'\n  }\n}\n```\n\nChange that and try again. If it doesn't fix the problem. Re-open this issue.\n\nAlso, I highly recommend you go through all the resources available on the [Learn angular-formly](http://docs.angular-formly.com/v6.8.2/docs/learn-angular-formly) page.\n. Please spend some time watching the lessons on the page I linked to you and\nlooking at the examples. They will answer most of your questions.\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn May 24, 2015 6:10 AM, \"maryam\" notifications@github.com wrote:\n\n> We have implemented before this app with angularformly which was working\n> correctly.\n> https://github.com/CA-Labs/fire-survey/blob/master/forms/survey.json\n> \n> Now with your examples i understood i should add \"templateOptions\" for all\n> cases. It seems is working except for custom templates such as \"type\":\n> \"multi-checkbox\", etc.\n> To solve this problem i have added\n> .run(function(formlyConfig) {\n> formlyConfig.setType(\n> {\n> name: 'multi-checkbox',\n> templateUrl: './polls/partials/multi-checkbox-template.html'\n> })})\n> and i have changed Q2 to:\n> {\n> \"key\": \"Q2\",\n> \"templateOptions\": {\n> \"label\": \"In what languages does your firm provide live chat support?\",\n> \"options\": [\n> {\n> \"name\": \"english\",\n> \"value\": \"eng\"\n> },\n> {\n> \"name\": \"french\",\n> \"value\": \"frnch\"\n> },\n> {\n> \"name\": \"more\",\n> \"value\": \"more\"\n> }\n> ]\n> },\n> \"type\": \"multi-checkbox\"\n> }\n> \n> and i don't get any output for that. How i can fix it?\n> Thank you for your reply in advance.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/313#issuecomment-105007463\n> .\n. Sorry, I don't have time to help right now, but I'm sure that if you asked\nthis on stack overflow someone could help you there.\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn May 24, 2015 10:26 AM, \"maryam\" notifications@github.com wrote:\n\n> I've followed your link completely. I listened to your videos as well. I\n> found one simple example for custom template and i tried to generalized\n> that with my example as i presented to you in above.\n> Also i changed it into \"formlyConfigProvider\", in any case with what i\n> presented to you i can not have expected output from custom html. Also i\n> have added wrapper\n> wrapper: ['bootstrapLabel', 'bootstrapHasError'], the only change is\n> showing the question without any options.\n> Moreover i want to emphasize that before we have done this project\n> correctly and it was working. Please give me hint if there is any problem\n> in above comment.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/313#issuecomment-105033729\n> .\n. Looks awesome! On mobile so I'll look more closely later. But one thing for sure I noticed. Could you actually do the package.json script update in a separate PR? There's an issue for it. Thanks!\n. Yeah, 305. Can you make sure it works on Mac too?\n\nI'll have a closer look tomorrow. Thanks!\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn May 24, 2015 6:11 PM, \"Benjamin Orozco\" notifications@github.com wrote:\n\n> Also added support for key property in fieldGroup, but again I'm not\n> totally confident of my patch. I had to comment-out one failing test. I\n> guess I'm setting the model the wrong way.\n> \n> Let me know your thoughts. Regards!\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/pull/314#issuecomment-105080781\n> .\n. Sorry, I decided to go about it a different direction. Thanks though. You definitely helped out!\n. See [the tests](https://github.com/formly-js/angular-formly/blob/master/src/directives/formly-field.test.js#L838-L926) for how to use it.\n. Should be able to do that with the model property...\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn May 25, 2015 9:09 AM, \"Benjamin Orozco\" notifications@github.com wrote:\n\n> It works like a charm, thanks @kentcdodds https://github.com/kentcdodds\n> !\n> \n> BTW, would it be much trouble to support key property in fieldGroup? A\n> use-case would be to support multi-level nested forms:\n> \n> Model:\n> \n> ```\n> vm.formData = {\n>       \"name\": \"John\",\n>       \"address\": {\n>           \"streetnum\": \"145 Elm St.\",\n>           \"place\": {\n>             \"state\": \"GA\",\n>             \"city\": \"Atlanta\"\n>           }\n>       }\n> };\n> ```\n> \n> Fields:\n> \n> ```\n> vm.formFields = [\n>   {\n>     key: 'name',\n>     type: 'input',\n>     templateOptions: {\n>       label: 'Name'\n>     }\n>   },\n>   {\n>     key: 'address',\n>     fieldGroup: [\n>       {\n>         key: 'streetnum',\n>         type: 'input',\n>         templateOptions: {\n>           label: 'Street Num'\n>         }\n>       },\n>       {\n>         key: 'place',\n>         fieldGroup: [\n>             {\n>                 key: 'state',\n>                 type: 'input',\n>                 templateOptions: {\n>                   label: 'State'\n>                 }\n>             },\n>             {\n>                 key: 'city',\n>                 type: 'input',\n>                 templateOptions: {\n>                   label: 'City'\n>                 }\n>             }\n>         ]\n>       }\n>     ]\n>   }\n> ];\n> ```\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/pull/314#issuecomment-105249379\n> .\n. Could you please produce an example of the problem. It's very difficult for me to help without that. Clone [this template](http://jsbin.com/biqesi/edit) to produce the example.\n. This appears to be a problem with how ngf-select deals with the `ng-model` and how angular-formly watches the model (the error is thrown when angular's doing dirty checking). I personally use [angular-upload](https://github.com/leon/angular-upload) and have had great success with it. If you really want to use ng-file-upload, then please help me know what if I need to change anything in angular-formly to make it work. I'm afraid I don't have time right now to figure it out.\n. Hey Michael, glad you found angular-formly and you like it! The best way to get help is by following instructions here: [help.angular-formly.com](http://help.angular-formly.com)\n. [chat.angular-formly.com](http://chat.angular-formly.com) is not a stack overflow room. It just forwards you to a chat room on gitter. It can be helpful for you to ask a stack overflow question with the `angular-formly` tag as well because sometimes the people over there can help answer your questions as well.\n. Hey @benoror, thanks for the help! A few things.\n\nFirst, I don't want to have all of that commit history in the repo when I merge this. Please remove all that history and just have a single commit with your changes.\n\nSecond, I tried your changes locally and it doesn't work on my mac. I definitely want to have a solution that works everywhere. I'm thinking that a good solution would be to have a single script that sets the environment variables for us and invokes the scripts. So it would be something like:\n\n``` json\n\"scripts\": {\n  \"build:dist\": \"node scripts/run-script.js build:dist\",\n  \"build:prod\": \"node scripts/run-script.js build:prod\",\n  \"build\": \"node scripts/run-script.js build\",\n  \"test\": \"node scripts/run-script.js test\",\n  \"test:single\": \"node scripts/run-script.js test:single\",\n  \"test:ci\": \"node scripts/run-script.js test:ci\",\n  \"watch\": \"node scripts/run-script.js watch\",\n  \"start\": \"node scripts/run-script.js start\",\n  \"release\": \"node scripts/run-script.js release\"\n}\n```\n\nAnd the `scripts/run-script.js` would actually set `process.env.NODE_ENV` before invoking the script. Do you think that would work?\n. Absolutely. Thank you for being patient and working at it. Much appreciated! :+1: \n. Closing this PR. I like the middleware approach you mentioned. Feel free to take a stab at a PR for it if you're feeling ambitious :-)\n. Actually, someone ran into this same issue on twitter the other day: https://twitter.com/kentcdodds/status/601765588533317632\n\nHere's an example with an explanation of what the problem is: http://jsbin.com/mepega/edit?html,js,output\n\nTL;DR\n\nDon't specify a `form` attribute on the `formly-form` with the same name. Just leave it off altogether or change the name.\n\nPlease re-open this issue if that doesn't fix your problem :-)\n. You have it, right in your template. It's the `fc` variable (which is a shortcut to the `options.formControl` variable).\n. Ah, I see what you're saying. @ckniffen mentioned [this angular issue](https://github.com/angular/angular.js/issues/10071) on Gitter the other day. The problem is that the `formController`'s parent is `$submitted` but that property doesn't get propagated down to children forms. @ckniffen, do you have a recommendation on how to handle this? One thing I can think of is to `$watch` the `$submitted` state and set it on the child forms manually...\n. Awesome! Feel free to [make a PR](https://github.com/formly-js/angular-formly-website/blob/master/CONTRIBUTING.md#creating-an-example) :+1: \n. What is your reasoning for wanting this? I'm a big fan of controller as, but I don't see a reason for it here.\n. I don't think that there's a way that we could do any better than that. And, as much as I love controller as, I don't see the benefits in this scenario. Closing this unless someone can convince me otherwise.\n. I can see the benefit of making it private (in fact, in my app, I never actually register any of my controllers with angular). But I definitely firmly believe that the benefits of controllerAs cannot be seen in a type's controller. And we're also supporting angular 1.2 still, so we can't switch to use it in our own internal directives.\n. Wish I had metrics on what version of angular people are using with\nformly...\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn May 26, 2015 10:41 AM, \"Caleb Kniffen\" notifications@github.com wrote:\n\n> I personally expose most of mine so that they can be enhanced via\n> delegate. I always forget about angular 1.2 support :)\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/318#issuecomment-105597699\n> .\n. Ah! Thanks for letting me know! I haven't upgraded my app yet, otherwise I would have caught this earlier. #refactorbug\n. Released as 6.10.1. Thanks for the heads up!\n. Also, previous versions with this bug have been deprecated on npm.\n. I'm not familiar with Meteor. I don't know how to help you. Please provide more information and [an example](http://jsbin.com/biqesi/edit) of the problem.\n. Sorry @abcd-ca. What I mean is I need something that actually runs and demonstrates the problem, not just some sample code. Everything you've shown seems like it should work just fine so I can't tell you what the problem is without being able to jump in a debugger. From that error, it appears that somewhere we're calling `Object.keys` on a `null` or `undefined` value.\n. Here are all the places we're doing that: https://github.com/formly-js/angular-formly/search?utf8=%E2%9C%93&q=Object.keys\n. I'm going to go ahead and close this issue. Let me know if there's further help that I can give.\n. Take a look at formlyUtils.reverseDeepMerge\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Sep 5, 2015 6:04 PM, \"Ed Staub\" notifications@github.com wrote:\n\n> I can shed some light, I think. The problem occurs when an\n> AngularMeteorObject http://angular-meteor.com/api/AngularMeteorObject\n> is used as the \"<formly-form model=\" attribute. Angular tries to do an\n> angular.copy on it, I'd guess maybe to create an isolate scope for the\n> formly directive. Even if this worked, it would be a really bad thing to do\n> - AngularMeteorObject is HUGE when all the references are chased - it\n>   wouldn't surprise me if it pulled in all of the relevant bits of the Mongo\n>   collection, connection, etc.\n> \n> The workaround I use is simply the \"Doctor, it hurts when I do that\"\n> solution - don't do that. I don't need live updating from meteor, so I copy\n> the fields from the AngularMeteorObject into a simple formly model object\n> that just contains the fields, and then copy the fields back to do a save.\n> I have a simple utility function to do this that takes an array of field\n> names.\n> \n> If there's anything to do to help this in formly, it might be to provide a\n> copy utility function that traverses the \"<formly-form fields=\" fields\n> object and does a deep copy of all the fields, given a source object and\n> optional destination. This may exist already - I didn't chase it. I may\n> write one later.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/320#issuecomment-138010568\n> .\n. Sounds like a problem with jspm. Angular-formly is using UMD. jspm should\nsupport that. If you have any suggestions for how to fix it for jspm, I'm\nall ears.\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn May 28, 2015 7:08 AM, \"Martin\" notifications@github.com wrote:\n\n> By and large jspm usage of formly works. But I get the message \"WARNING:\n> Tried to load angular more than once\" which is triggered by formly\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/321.\n. Looks like it actually is already available in the jspm registry, but I'm thinking that jspm doesn't deal with peerDependencies correctly. Here's a PR that might fix the problem: https://github.com/jspm/registry/pull/396\n. Deprecated 6.10.1 and created 6.10.2 with this bugfix. Thanks.\n. Sorry @najai, I have no idea what's going on here. I made [a copy](http://jsbin.com/qudugu/edit) of your example and bound the two forms to the same model and still nothing's working. I'll see if I can find time to debug this later, but you might try stack overflow...\n. Don't worry, it's actually not _too_ painful to support Angular 1.2 right now, but I'm curious to hear how many people are using angular-formly with angular 1.2. I will likely eventually drop support, but when I do, it will definitely be a major version change, so you shouldn't be auto-upgraded. And I'll make an announcement (so [follow me on twitter](https://twitter.com/kentcdodds))\n. Closing. I don't think I'll be dropping 1.2 support for a while, it's really not a huge pain to support right now (though I do have some custom code for it that would be nice to get rid of). I'll comment in this issue if I'm thinking about dropping support, and don't worry, as long as you use a `^` or `~` in your dependency listing, I wont push a break to you (because it'll be part of a major version change).\n. Thanks for the input @PascalPrecht!\n\nFor everyone, updating angular-formly to drop support for 1.2 costs me more time than leaving support for 1.2 right now, so I think that I'll leave it as is because it's working well and doesn't hinder the experience of developers using the latest version of angular. _But support for 1.2 will be dropped eventually for sure._ But again, it will be in a major release version so as long as you're using exact versioning or you're using `^` or `~` you should be fine.\n. Yeah, I think that v7 will likely be the last version to support IE. I'll remove support for it in v8 (\ud83d\udc48 not the JS engine...) :-)\n. Nope, I think a normal $scope.$watch in your controller is the best way to\ndo that. You could also look into the watch property on the field, but I'd\nprobably just do a normal watch.\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn May 30, 2015 7:45 AM, \"Sidhartha Chatterjee\" notifications@github.com\nwrote:\n\n> So, in my form currently (snippet below) the value of the link key is\n> supposed to be the result of the Slug .slugify function called on the\n> value of the name key. I could of course do this with a $scope.$watch on\n> the value of model.name but I'm wondering if there's a better way. I\n> can't find anything in the documentation. Any ideas?\n> \n> vm.fields = [{\n>     key: 'name',\n>     type: 'input',\n>     templateOptions: {\n>         label: 'Name',\n>         placeholder: \"John Doe's Party\",\n>         required: true\n>     }\n> }, {\n>     key: 'link',\n>     type: 'input',\n>     // value: Slug.slugify(vm.model.name),\n>     templateOptions: {\n>         label: 'Link',\n>         placeholder: \"john-does-birthday-party\",\n>         required: true\n>     }\n> }, {\n>     key: 'city',\n>     type: 'input',\n>     templateOptions: {\n>         label: 'City',\n>         placeholder: 'Las Vegas',\n>         required: true\n>     }\n> }];\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/326.\n. Closing this for now. Feel free to reopen it if you need.\n. Thanks for working on this. I think I'll make it a part of a beta release once you've adjusted some of the stuff and it's merged (probably Monday). Just because I'm not certain about how it will/should behave... Would like to get some feedback on the API.\n. Hey @ckniffen, so, just to verify, is this PR what you want it to be? I haven't had a chance to pull it down yet, but I want to verify with you that you think this is the best way (rather than the directive approach).\n. Hmmm, yes... Good question... I'm thinking that we do the hacky thing. It's not awesome, but I think it's the best thing to do in this scenario.\n. Awesome! Thanks a ton. This is way cool!\n. By the way, thank you sooooo much for squashing this into a single commit. Makes the git history sooo much cleaner :+1: \n. Fantastic catch @koenweyn. I'll have a fix for this asap. The problem is that because the root el isn't a `form` or `ng-form`, there is no `FormController` but angular-formly overrides it anyway. Actually, the way I'll fix it should resolve some issues that people have had in the past... I'll let you know when this is fixed. Thanks!\n. `$ npm install angular-formly@6.11.1` thanks!\n. Thanks for the test! I pushed it out as 6.11.2\n. Cool! As soon as it builds on travis, I'll merge it. Thanks for figuring that out. It was really bugging me. Haha.\n. Thanks @ckniffen, I was actually just about to say that the solution is either fix the bootstrap template so it handles this scenario or make an example of a custom validator that does require like people expect it should. What approach do you think?\n\nEither way, I'm moving this to the bootstrap templates.\n. Moved: https://github.com/formly-js/angular-formly-templates-bootstrap/issues/26\n. Working on it now. Should be fixed soon. Note, I don't think that I'm going to do this for any of the template libraries. It would be far too much effort.\n. You should be able to get this in `6.11.5` and/or `6.12.0-beta.1`. Enjoy!\n. I would like some feedback on this one from people please!\n. @dwolt, thanks for your perspective! The challenge is that there's [some crazy code](https://github.com/formly-js/angular-formly/blob/master/src/directives/formly-form.js#L276-L313) to make things work the way that people expect it should anyway. It also has been the source of several questions from people who've spent a few hours with issues related to this... Though, thinking about it now, some of those questions and issues would not be solved by this change anyway, so maybe I should keep the old code around...\n. This is significant a change. I'm about to release a few minor breaking changes in 7.0.0. I'm going to push this off to a different breaking release so people can benefit from the 7.0.0 release without having to pay the price for this change.\n. I like your suggestion @koraybalci. We could add a console warning to the `formly-form` directive and then remove it later in a major version. The problem is upgrading all of those examples would be incredibly painful. lol. It's funny that the thing that protects users the most from breaking changes is the effort it takes to upgrade documentation!\n\nWhat if instead we made the form controller optional to start?\n. I highly recommend you use controller as syntax. :-) good luck!\n. This article by @pascalprecht talks about bindToController but it references some benefits of controllerAs as well: http://blog.thoughtram.io/angularjs/2015/01/02/exploring-angular-1.3-bindToController.html\n. :+1: glad to hear it!\n. Could you provide an example of what you're doing? It's easier to help\nidentify what's going wrong when I can see what you're doing.\n\nhttp://help.angular-formly.com\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Jul 3, 2015 11:34 PM, \"mweels\" notifications@github.com wrote:\n\n> I seem to be having the same problem, I have setup my controller as.\n> Anything else that would cause fields not to show up? My controller is\n> wired up fine. I am not using routes (not sure if that is a required).\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/333#issuecomment-118463082\n> .\n. A breaking change would be to make it only accept a function (and not an object of checkers) to force this perf enhancement.\n. Closing this issue. If you want to keep it tracked, please put it on the formly-js/angular-formly-website repo :-)\n\nP.S. Thanks for your help @benoror!\n. You'll have to pass it in somehow so it can be referenced. Here's one way you could accomplish that: http://jsbin.com/wehiro/edit\n. However, this is not the place to ask questions, if you have further questions, I suggest that you checkout http://chat.angular-formly.com, http://mailing-list.angular-formly.com, or post on stackoverflow with the `angular-formly` tag. (Watch [this screencast](https://www.youtube.com/watch?v=NXqFiSeBE-M&list=PLV5CVI1eNcJi7lVVIuNyRhEuck1Z007BH&index=2) for more info)\n. > &lt;canned-message&gt;\n> \n> Thanks for your interest in angular-formly. The issues are for bug reports/feature requests, so I'm going to go ahead and close this issue. If you have a question or need help, please [watch this screencast](https://www.youtube.com/watch?v=NXqFiSeBE-M&list=PLV5CVI1eNcJi7lVVIuNyRhEuck1Z007BH) for an explination of the most effective/proper way to get help using angular-formly.\n> \n> Summarized:\n> 1. [Learn angular-formly basics](http://learn.angular-formly.com)\n> 2. [Check the examples](http://angular-formly.com)\n> 3. [Reproduce the issue](http://new-example.angular-formly.com)\n> 4. [Ask on Stack Overflow](http://stackoverflow.com/questions/tagged/angular-formly)\n> 5. [Ask on the mailing list](http://mailing-list.angular-formly.com)\n> 6. [Ask on Chat](http://chat.angular-formly.com)\n> \n> P.S. sorry for the canned message, this just happens a lot :smile: \n> \n> &lt;/canned message&gt;\n. Looks \"super rad\" :wink: However, it's definitely out of scope for angular-formly. But, I would be happy to create a repo called angular-formly-siren-action and give you permissions to develop a plugin for angular-formly that would convert a siren action into a field configuration that angular-formly can understand. And if angular-formly needed to make a change or two to support that kind of plugin architecture, then I would be happy to make that as well. We're doing the same thing with [json-schema](https://github.com/formly-js/angular-formly-json-schema) (though, nobody's really taken ownership of that yet).\n\nEither way, I'm going to close this issue now because it's out of scope.\n. Sounds perfect. When I get back to the computer, I'll set up a blank repo\nand add you as the contributor so anyone else who's interested can ask you\nabout contributing :-) Thanks for your interest!\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Jun 6, 2015 9:50 AM, \"Vincenzo Chianese\" notifications@github.com\nwrote:\n\n> Hey,\n> generally speaking, all the hypermedia world is very cool, even if still\n> coarse. For example, Siren is actually the only hypermedia format that\n> supports the \"action\" concept. Other ones, like CJ or HAL, stops at link\n> support.\n> \n> Given that, I may be interested in contribution for that, but I have no\n> ETA. I am working on a small project and I definitely will try to use your\n> component. After that, I will try (if I'll have some time left) to extract\n> my work and contribute back to your project.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/338#issuecomment-109606779\n> .\n. Created: https://github.com/formly-js/angular-formly-siren-action/issues/1\n. > &lt;canned-message&gt;\n> \n> Thanks for your interest in angular-formly. The issues are for bug reports/feature requests, so I'm going to go ahead and close this issue. If you have a question or need help, please [watch this screencast](https://www.youtube.com/watch?v=NXqFiSeBE-M&list=PLV5CVI1eNcJi7lVVIuNyRhEuck1Z007BH) for an explination of the most effective/proper way to get help using angular-formly.\n> \n> Summarized:\n> 1. [Learn angular-formly basics](http://learn.angular-formly.com)\n> 2. [Check the examples](http://angular-formly.com)\n> 3. [Reproduce the issue](http://new-example.angular-formly.com)\n> 4. [Ask on Stack Overflow](http://stackoverflow.com/questions/tagged/angular-formly)\n> 5. [Ask on the mailing list](http://mailing-list.angular-formly.com)\n> 6. [Ask on Chat](http://chat.angular-formly.com)\n> \n> P.S. sorry for the canned message, this just happens a lot :smile: \n> \n> &lt;/canned message&gt;\n. Hi @abbish. Excellent question, I'm planning on making an example as soon as I am able. This is being tracked [here](https://github.com/formly-js/angular-formly-website/issues/11) (I recommend you subscribe to that issue).\n\n> &lt;canned-message&gt;\n> \n> Thanks for your interest in angular-formly. The issues are for bug reports/feature requests, so I'm going to go ahead and close this issue. If you have a question or need help, please [watch this screencast](https://www.youtube.com/watch?v=NXqFiSeBE-M&list=PLV5CVI1eNcJi7lVVIuNyRhEuck1Z007BH) for an explination of the most effective/proper way to get help using angular-formly.\n> \n> Summarized:\n> 1. [Learn angular-formly basics](http://learn.angular-formly.com)\n> 2. [Check the examples](http://angular-formly.com)\n> 3. [Reproduce the issue](http://new-example.angular-formly.com)\n> 4. [Ask on Stack Overflow](http://stackoverflow.com/questions/tagged/angular-formly)\n> 5. [Ask on the mailing list](http://mailing-list.angular-formly.com)\n> 6. [Ask on Chat](http://chat.angular-formly.com)\n> \n> P.S. sorry for the canned message, this just happens a lot :smile: \n> \n> &lt;/canned message&gt;\n. Example has been created: http://angular-formly.com/#/example/other/testing\n. Most modern angular applications don't need the `name` to be anything special, just unique. If you have this use case, you have a bunch of different ways you could accomplish it. My recommendation: create your own types, don't use one of the template libraries. I would say that your use case is not common for modern applications. Luckily, angular-formly is pretty darn flexible and creating custom templates is quite easy.\n\nYou could do this using `ngModelAttrs`, however it's a bit of a complicated API and I would actually just advise creating your own template to accomplish what you want in this case. It is intended that the `id` and the `name` are something that you don't need to think about and hence, the template libraries don't come with this capability out of the box.\n\n...\n\nThinking about it further... I think that it wouldn't be unreasonable to bring this functionality into angular-formly. Currently, you can specify your own `id` as part of the field configuration object. This will be propagated to both the field's `id` as well as its `name`. I don't think it's unreasonable to allow you to specify a `name` property as well which would be used for the field's `name` if present, otherwise it would default to the `id`... What do you think?\n. You've convinced me. I'll try to get to this asap.\n\nFor anyone looking to contribute, here's a high-level of what needs to be done:\n1. Write a few tests (probably [here](https://github.com/formly-js/angular-formly/blob/master/src/run/formlyNgModelAttrsManipulator.test.js#L39)):\n   - `name` (on both the `options` object and on the scope) defaults to random thing that's the same as the `id`\n   - `name` is the same as `id` when an `id` is specified\n   - `name` is equal to the `name` property specified on the field options object (and is different than the `id`)\n2. Add `name` to the api-check for a field. Somewhere around [here](https://github.com/formly-js/angular-formly/blob/master/src/providers/formlyApiCheck.js#L92)\n3. Add `setFieldName` logic to the `FormlyFieldController`. Somewhere around [here](https://github.com/formly-js/angular-formly/blob/master/src/directives/formly-field.js#L49) potentially even change `setFieldId` to `setFieldIdAndName`... Do something like `$scope.options.name = $scope.options.name || $scope.options.id` at the end\n4. Update [this](https://github.com/formly-js/angular-formly/blob/master/src/run/formlyNgModelAttrsManipulator.js#L27) line to use `scope.name` rather than `scope.id`.\n\nI'd recommend giving [this](https://www.youtube.com/watch?v=QOchwBm9W-g&index=5&list=PLV5CVI1eNcJi7lVVIuNyRhEuck1Z007BH) a watch if you haven't already.\n\nIf nobody gets to this before I do, then that's fine...\n. Thanks to @benoror, this is now supported in 6.13.0. Thanks!\n. Looks like I've pushed a new version since you opened this. I'll remove it next chance I get :-)\n. Hmmm... Yeah, I suppose that internally we'll do something like this:\n\n``` javascript\nconst fieldTransform = $scope.options.fieldTransform || formlyConfig.extras.fieldTransform;\nif (fieldTransform) {\n  $scope.fields = fieldTransform($scope.fields);\n}\n```\n\nThat way you could either copy them yourself or simply modify them to maintain references to the correct field.\n\nThe reason that I bring this up is that if `formly-field` actually makes a copy for you, then you may be pointing to the field that you create in your controller, but that ends up not being the field that formly actually uses, which could lead to unexpected behavior.\n\nBut I think that kind of an implementation in `formly-form` would be pretty flexible.\n. I have pushed some tests for this feature. I've actually already developed this feature and gotten all the tests passing locally, but I want to give someone the chance to make their first OSS contribution, so here are some instructions (if you have already contributed to open source, please let someone else take this one):\n- [x] Watch [this video](https://www.youtube.com/watch?v=QOchwBm9W-g&index=5&list=PLV5CVI1eNcJi7lVVIuNyRhEuck1Z007BH) to learn what you need to do to get things setup\n- [x] Go to [this line](https://github.com/formly-js/angular-formly/blob/30e87b8db29da8555e3abe51fc4ddb6c5df3b840/src/directives/formly-form.test.js#L595) and change `describe.skip` to `describe.only`\n- [x] Run `$ npm test`\n- [x] Notice that all the tests are failing\n- [x] Update formlyApiCheck.js to allow the `formly-form` `options` to have a `fieldTransform` that's a function (somewhere around [here](https://github.com/formly-js/angular-formly/blob/30e87b8db29da8555e3abe51fc4ddb6c5df3b840/src/providers/formlyApiCheck.js#L153))\n- [x] Add a function call right after [this one](https://github.com/formly-js/angular-formly/blob/30e87b8db29da8555e3abe51fc4ddb6c5df3b840/src/directives/formly-form.js#L104) in `formly-form.js` called `setupFields` and declare it below (probably around [setupOptions](https://github.com/formly-js/angular-formly/blob/30e87b8db29da8555e3abe51fc4ddb6c5df3b840/src/directives/formly-form.js#L130)) where you'll put your logic for initializing the `fields` (which means you could probably move [this](https://github.com/formly-js/angular-formly/blob/30e87b8db29da8555e3abe51fc4ddb6c5df3b840/src/directives/formly-form.js#L106) to that new function).\n- [x] Implement `setupFields` to make the tests pass.\n- [x] Once they're passing, change the `describe.only` to `describe` so all the tests run.\n- [x] Commit your changes to the `src/` directory mentioning issue #343 (notice it runs all the tests... twice)\n- [x] Push your changes to your fork, create a PR, get merged, celebrate \ud83c\udf89\n. Thanks @stevebluck! This has been officially released in `6.14.0`!\n. Released in `6.13.2`\n. Would be a good example I think! Thanks!\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Jun 9, 2015 7:38 PM, \"Benjamin Orozco\" notifications@github.com wrote:\n\n> I just happened to answer that issue a few days ago: #326 (comment)\n> https://github.com/formly-js/angular-formly/issues/326#issuecomment-109312896\n> \n> This has been asked before few times (including me), @kentcdodds\n> https://github.com/kentcdodds shall we add this example to the webpage?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/345#issuecomment-110553966\n> .\n. Agreed! Much appreciated @benoror :-)\n\n-Kent C. Dodds\n\nOn Wed, Jul 8, 2015 at 12:48 PM, Obaid ur Rehman notifications@github.com\nwrote:\n\n> Thanks @benoror https://github.com/benoror. Much appreciated.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/345#issuecomment-119694588\n> .\n. @een54, the problem is that by default we embed the jsbins using SSL, however that requires a pro account. I should probably just remove the SSL default...\n. I'm pushing out an update that will make all of the examples not use SSL. Maybe one day we'll bring that back...\n. This looks awesome! Just that one thing I mentioned, but I don't see any other issues. It looks great!\n. Looks like the build is breaking because `sinon` recently stopped publishing a `pkg` file and `karma-sinon` attempts to add the `sinon` file from `pkg` to the `files` in the karma config. I'll look into that problem, then this will get merged. Thanks!\n. Looks like a lot of people are aware of this issue: https://github.com/cjohansen/Sinon.JS/issues/761\n. They must. If you were able to commit this code, then they passed on your machine :-) I'm pushing up a fix, then I'll merge your stuff.\n. Ah hah! You're right! I need to set `$scope.options.form = $scope.form` somewhere around [here](https://github.com/formly-js/angular-formly/blob/master/src/directives/formly-field.js#L255)\n. I'll get to it as soon as possible, but if you want to jump on it, I'd appreciate it!\n. This has been released in `6.13.1`. Thanks @PhilFlash for reporting it and @benoror for fixing it!\n. Do you think that you could add a test that reproduces the original bug and shows that this fixes that bug? TDD style :-)\n. Test looks solid. Just let me know about what you think about my other comment.\n. Can't believe how long that file's getting. I may consider breaking it up a little bit eventually. Haha.\n. Next time we see each other, allow me to give you a high five!\n\n![highest-of-fives-explosion](https://cloud.githubusercontent.com/assets/1500684/8120395/f70d85c8-105b-11e5-9697-9b9714d8a713.gif)\n. This has been released in `6.13.1`. Thanks again.\n. Never heard of it. Have you seen the docs on supporting IE 8?\nhttp://docs.angular-formly.com/v6.13.0/docs/support-ie-8\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Jun 11, 2015 7:04 PM, \"samuelcoutu\" notifications@github.com wrote:\n\n> In IE9/IE8, in my app, the Form doesn't show or isn't render (I am not\n> sure) until the \"F12 developper tools\" is opened and the page refreshed.\n> After the first time the developer tool is shown, not matter if the\n> developper tools is still open or not, the form will successfully be\n> displayed on the page if I refresh the page.\n> \n> Have you already seen that problem?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/349.\n. > &lt;canned-message&gt;\n> \n> Thanks for your interest in angular-formly. The issues are for bug reports/feature requests, so I'm going to go ahead and close this issue. If you have a question or need help, please [watch this screencast](https://www.youtube.com/watch?v=NXqFiSeBE-M&list=PLV5CVI1eNcJi7lVVIuNyRhEuck1Z007BH) for an explination of the most effective/proper way to get help using angular-formly.\n> \n> Summarized:\n> 1. [Learn angular-formly basics](http://learn.angular-formly.com)\n> 2. [Check the examples](http://angular-formly.com)\n> 3. [Reproduce the issue](http://new-example.angular-formly.com)\n> 4. [Ask on Stack Overflow](http://stackoverflow.com/questions/tagged/angular-formly)\n> 5. [Ask on the mailing list](http://mailing-list.angular-formly.com)\n> 6. [Ask on Chat](http://chat.angular-formly.com)\n> \n> P.S. sorry for the canned message, this just happens a lot :smile: \n> \n> &lt;/canned message&gt;\n. Ah, good point @koenweyn. `angular-formly` does use `console.warn` in several places when you're using its API incorrectly as well. I [recommend](http://docs.angular-formly.com/v6.13.0/docs/tips) disabling `api-check` as well as warnings when you ship to production (leave it on in development though). I will add this recommendation to the docs for supporting IE 8.\n. Yes, angular-formly uses $log\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Jun 12, 2015 7:49 AM, \"Caleb Kniffen\" notifications@github.com wrote:\n\n> If $log.warn was used instead of console.warn would that also resolve\n> this issue? I am speaking exclusively about angular-formly rather than\n> api-check.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/349#issuecomment-111497931\n> .\n. Looks awesome. If the tests pass, I'll pull it down, try it out and let you know. If that works, then you can update the PR to do this for all the scripts. That's awesome!\n. Ah! We're really close. It totally works, but it's a bit annoying. The output looks like this:\n\n`npm test`\n\n![screen shot 2015-06-12 at 1 28 12 pm](https://cloud.githubusercontent.com/assets/1500684/8138317/f26929ae-1106-11e5-869b-15ee9f5834bc.png)\n\n`npm run build`\n\n![screen shot 2015-06-12 at 1 29 03 pm](https://cloud.githubusercontent.com/assets/1500684/8138326/02bb5c00-1107-11e5-8f05-545fc76c5f15.png)\n\nWhen it should look like this:\n\n`npm test`\n\n![screen shot 2015-06-12 at 1 29 49 pm](https://cloud.githubusercontent.com/assets/1500684/8138342/1fc10700-1107-11e5-9f72-fe015a04ca50.png)\n\n`npm run build`\n\n![screen shot 2015-06-12 at 1 30 26 pm](https://cloud.githubusercontent.com/assets/1500684/8138354/35fb7c80-1107-11e5-882c-efc20504bfea.png)\n\nAlso, if we could make a more generic function that would be great. There's a lot of duplicate code in those two script files.\n. This works awesome! I have an idea though... One sec...\n. Why don't we create a library for this? I want to use this in other projects. Here's the API I envision...\n\nI install your library as a dependency. We'll call it `better-npm-run` for now... Then in my `package.json`, I do this:\n\n``` json\n{\n  \"scripts\": {\n    \"build:dist\": \"better-npm-run\",\n    \"test\": \"better-npm-run\"\n  },\n  \"betterScripts\": {\n    \"build:dist\": \"NODE_ENV=development webpack --config $npm_package_webpack --progress --colors\",\n    \"test\": \"NODE_ENV=test karma start\"\n  }\n}\n```\n\nOr something like that? It would just be nice to have all my scripts right in the package.json.\n\nAnd the library would manage ensuring that setting environment variables work cross-platform. What do you think?\n. Hmmm... That is a bit verbose, and it prevents me from doing this: `NODE_ENV=something some-command && NODE_ENV=somethingElse some-other-command` though there's a work-around... Hmmm... Probably would be fine to start with what you have :+1: \n. Sorry, by the way, I just fixed up a thing or two with `package.json` so that's why this can't merge anymore :-(\n. Awesome! I'll take a look at it!\n. Hey man, just tried it out on my [new library](https://github.com/alianza-dev/az-promise-show) and it worked great for me. I didn't even notice a difference. :+1: \n. Thanks for building that! I've implemented it. Please test it out :-) 6fbaea258a1f3c5737f7d4276ad49c2a065988e3\n. Couldn't be more perfect! I'll wait for travis to finish with the build just be sure, then I'll merge this in and release a new version. Then I'll tweet about it :-) Do you have a twitter handle I could @ mention?\n. Linking to #343\n. Hmmm... I think that what you're suggesting is actually not what I thought you were asking. Could you please provide [an example](http://jsbin.com/biqesi/edit) of the problem you're seeing? You should be able to add/remove fields from a formly-form. Though, I've never done it myself, I think it should work (I seem to remember seeing others do it).\n. Good luck!\n. Thanks :+1: \n. Thanks for the bug report. Could you please [provide an example](https://github.com/formly-js/angular-formly/blob/master/CONTRIBUTING.md#reporting-bugs--requesting-features) of the bug?\n. Whoops! Sorry about that! I'll fix the docs now.\n. I changed some of the wording. Thanks! I think I'm going to remove that in a breaking release... No reason you should want that. Does this solve your problem @asadsahi?\n. Thanks for the tip! :disappointed_relieved: \n. No, I think we'll keep it around :-) Looks like you're using it.\n. > &lt;canned-message&gt;\n> \n> Thanks for your interest in angular-formly. The issues are for bug reports/feature requests, so I'm going to go ahead and close this issue. If you have a question or need help, please [watch this screencast](https://www.youtube.com/watch?v=NXqFiSeBE-M&list=PLV5CVI1eNcJi7lVVIuNyRhEuck1Z007BH) for an explination of the most effective/proper way to get help using angular-formly.\n> \n> Summarized:\n> 1. [Learn angular-formly basics](http://learn.angular-formly.com)\n> 2. [Check the examples](http://angular-formly.com)\n> 3. [Reproduce the issue](http://new-example.angular-formly.com)\n> 4. [Ask on Stack Overflow](http://stackoverflow.com/questions/tagged/angular-formly)\n> 5. [Ask on the mailing list](http://mailing-list.angular-formly.com)\n> 6. [Ask on Chat](http://chat.angular-formly.com)\n> \n> P.S. sorry for the canned message, this just happens a lot :smile: \n> \n> &lt;/canned message&gt;\n\nWhat you're looking for is the [`model`](http://docs.angular-formly.com/v6.15.1/docs/field-configuration-object#model-object--string) property. Something like this:\n\n``` javascript\n[\n  {\n    key: 'FirstName',\n    ...\n  },\n  {\n    model: 'model.Address',\n    key: 'Street'\n    ...\n  }\n]\n```\n. This is indeed a bug. `fieldGroup` uses a `formly-form` itself and it copies attributes and their values from the parent formly-form (except for attributes like `model`, and `fields`). The problem is that it should also account for `data-model` and `data-fields` etc. You're welcome to make a PR. Otherwise I'll look at this as soon as I am able...\n\nShould be pretty simple, just need to add the data counterpart to [this array](https://github.com/formly-js/angular-formly/blob/master/src/directives/formly-form.js#L91)\n. I don't think that there would be a problem with adding the attribute style to this directive. It's technically more of a \"component directive\" so it makes more sense as an element, but I'd be find to open it up as an attribute.\n. Thanks for the PR @redhead! This is available in `6.15.2`\n. Very good. I like the suggestion. I'd be happy to pull this concept in. I'll try to get to it as soon as I am able. If you want to try your hand at a PR, see CONTRIBUTING.md and the changes will likely be around here: https://github.com/formly-js/angular-formly/blob/master/src/run/formlyNgModelAttrsManipulator.js#L17\n. Like with #343, I've created tests for this feature and I'm going to give someone a shot at contributing to open source for the first time :-) So I will only accept a PR from someone who's never contributed to open source before.\n\nInstructions:\n- [x] Watch [this video](https://www.youtube.com/watch?v=QOchwBm9W-g&index=5&list=PLV5CVI1eNcJi7lVVIuNyRhEuck1Z007BH) to learn what you need to do to get things setup\n- [x] Go to [these tests](https://github.com/formly-js/angular-formly/blob/master/src/run/formlyNgModelAttrsManipulator.test.js#L30-L76) and change `it.skip` to `it.only`\n- [x] Run `$ npm test`\n- [x] Notice that all the tests are failing\n- [x] Update the [formlyNgModelAttrsManipulator](https://github.com/formly-js/angular-formly/blob/master/src/run/formlyNgModelAttrsManipulator.js) to make the tests pass. (hint, what you'll want to do is construct the query sent into `querySelectorAll` to add `:not` for both the special attribute as well as the specified selector, so you can potentially have two `:not`s in your query.)\n- [x] Once they're passing, change the `it.only`s to `it`s so all the tests run.\n- [x] Commit your changes to the `src/` directory mentioning issue #343 (notice it runs all the tests... twice)\n- [x] Push your changes to your fork, create a PR, get merged, celebrate \ud83c\udf89\n\nI'm happy to hold your hand through this if you need help. [Catch me on gitter](https://gitter.im/kentcdodds).\n. P.S. I've already developed the solution, I just haven't committed it because I want to give someone else a first shot at contributing to open source :+1: \n. @douglas-mason committed this! Thanks!\n. This will be released as soon as I'm able\n. This has been officially released in `6.16.0`. Docs have been [updated](http://docs.angular-formly.com/v6.16.0/docs/ngmodelattrstemplatemanipulator#disabling).\n. > Would you be interested in that PR? Or are you tired of trying to support IE8?\n\nBoth :-) Thanks!\n. I created an example that does this for you :-) http://angular-formly.com/#/example/integrations/angular-material\n\nAs always, help is welcome on the template library :D\n. Released in `6.15.2` Thanks!\n. Internally, angular-formly doesn't use `controller as` because it supports angular 1.2. You do not have access to your controller's scope inside an angular-formly template, you need to pass all the data your template needs via the `templateOptions` or `data` properties.\n\n> &lt;canned-message&gt;\n> \n> Thanks for your interest in angular-formly. The issues are for bug reports/feature requests, so I'm going to go ahead and close this issue. If you have a question or need help, please [watch this screencast](https://www.youtube.com/watch?v=NXqFiSeBE-M&list=PLV5CVI1eNcJi7lVVIuNyRhEuck1Z007BH) for an explination of the most effective/proper way to get help using angular-formly.\n> \n> Summarized:\n> 1. [Learn angular-formly basics](http://learn.angular-formly.com)\n> 2. [Check the examples](http://angular-formly.com)\n> 3. [Reproduce the issue](http://new-example.angular-formly.com)\n> 4. [Ask on Stack Overflow](http://stackoverflow.com/questions/tagged/angular-formly)\n> 5. [Ask on the mailing list](http://mailing-list.angular-formly.com)\n> 6. [Ask on Chat](http://chat.angular-formly.com)\n> \n> P.S. sorry for the canned message, this just happens a lot :smile: \n> \n> &lt;/canned message&gt;\n. I'm sorry, but what's \"not cool\" about this?\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Jun 25, 2015 7:28 AM, \"Alexander\" notifications@github.com wrote:\n\n> Not cool.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/361#issuecomment-115258383\n> .\n. What happened to this? Still working on it?\n. This is exactly what I want. Welcome to open source! :-) Looking forward to\nseeing the PR!\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Jun 25, 2015 12:45 PM, \"Chris Casad\" notifications@github.com wrote:\n\n> Sorry. I had my .gitignore file in with the commit so I was backing it out\n> and going to resubmit. That's what you get for asking newbies to help. =)\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/pull/362#issuecomment-115359510\n> .\n. Awesome @ccasad! Thanks for the PR. Do you mind if we iterate on it a bit? I've updated the tests and I'll add comments in your implementation. If you could pull those changes and give it another shot that'd be awesome. Thanks for working with me on this. I hope it's helpful for you :-)\n. Thanks for working on this! I merged another PR for it, and it has been released in `6.16.0`. You're welcome to try again next time! :dancer: \n. Looks good to me! :-)\n. Hmmmm... Can't be auto merged... I'll have to look at it when I'm at my machine.\n. Awesome! Thanks! I'll release this soon!\n. This has been officially released in `6.16.0`. Thanks again!\n. Hey @douglas-mason, I'm writing a blogpost that references this PR, do you mind if I reference you in it? https://medium.com/@kentcdodds/78281ea47455\n. Linking this to #358\n. I think this is an issue with the template library, not angular-formly.\nCould you move this issue to the template library please?\nhttps://github.com/formly-js/angular-formly-templates-bootstrap\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Jun 25, 2015 2:30 PM, \"Vitaly\" notifications@github.com wrote:\n\n> Working with multiCheckbox I found an issue. As demonstrated in this jsbin\n> http://jsbin.com/janeha/edit?html,js,output. In the first case, I\n> predefine checkbox values in options array, and then I simulate async\n> population of the values and in the UI we can see checked checkbox. In the\n> second case I simulate async loading of the checkbox values and when I\n> populate values, the checkbox is not checked.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/365.\n. Thanks!\n. @ckniffen, not sure I understand what you mean. The `$parsers` and `$formatters` apis are available in angular 1.2\n. Yes, it would be similar to [`formly-custom-validation`](https://github.com/formly-js/angular-formly/blob/master/src/directives/formly-custom-validation.js) except it would do something like: `ctrl.$parsers = ctrl.$parsers.concat(options.parsers)` or `ctrl.$parsers = options.parsers.concat(ctrl.$parsers)` depending on which order we decide to apply the new parsers.\n\nThen there's the decision on how to merge them...\n. @benoror, yes, it will, that's what I'm planning on doing. But we need to consider `defaultOptions` and overriding as well as considering existing $parsers and $formatters.\n. That's mostly what I want feedback on (noted in the numbered list above)\n. Sounds good.\n\nFor your \"as an object\" suggestion, I considered that as well. The problem is then you have to figure out how to determine which to push on the pipeline first. So I think that an `id` would probably be better. But can anyone think of a use case where this would be needed? I think I'll leave it out until someone mentions they need it...\n. Here's my plan for implementation:\n\nWhen merging parsers, they will be concatenated together. Options can be merged in four scenarios. This is the order the parsers will be concatenated (meaning the parsers will run from the top of this list to the bottom):\n1. Extended type\n2. Type\n3. `optionsTypes` (in order specified)\n4. `parsers` specified on the field\n\nFor example:\n\n``` javascript\nformlyConfig.setType({\n  name: 'parent1',\n  defaultOptions: {\n    parsers: [parent1Parser1, parent1Parser2]\n  }\n});\n\nformlyConfig.setType({\n  name: 'parent2',\n  defaultOptions: {\n    parsers: [parent2Parser1, parent2Parser2]\n  }\n});\n\nformlyConfig.setType({\n  name: 'child',\n  extends: 'parent1', // <-- note this!\n  defaultOptions: {\n    parsers: [childParser1, childParser2]\n  }\n});\n\nformlyConfig.setType({\n  name: 'optionType1',\n  extends: 'parent2', // <-- note this!\n  defaultOptions: {\n    parsers: [optionType1Parser1, optionType1Parser2]\n  }\n});\n\nformlyConfig.setType({\n  name: 'optionType2',\n  defaultOptions: {\n    parsers: [optionType2Parser1, optionType2Parser2]\n  }\n});\n\n// parser definitions excluded for brevity...\n\n// elsewhere... in some controller\nvar vm = this;\n\nvm.fields = [\n  {\n    type: 'child',\n    optionsTypes: ['optionType1', 'optionType2'],\n    parsers: [fieldParser1, fieldParser2]\n  }\n];\n```\n\nThe resulting merged array for this field's parser would appear as:\n\n``` javascript\n[\n  parent1Parser1, parent1Parser2,\n  childParser1, childParser2,\n  parent2Parser1, parent2Parser2,\n  optionType1Parser1, optionType1Parser2,\n  optionType2Parser1, optionType2Parser2,\n  fieldParser1, fieldParser2\n]\n```\n\nFormatters will be the exact same.\n\nCould someone sanity check me on this one? It's a little confusing, I don't use parsers/formatters very often, so someone with more experience may be able to help me to determine the most logical solution. I think this is correct though. Just want to make sure that I'm covering my bases!\n\nP.S. Doing something like this with that many parsers would be utter insanity... Just had that thought :-) But this is a very contrived example\n. Note, in the case of formatters, they will be executed in reverse order as indicated by the docs. But I believe this is also desirable behavior...\n. Just got the above example to pass as a test for parsers. I'm going to push this up into master. I would really appreciate if interested parties try it out and ensure that it works as you expect. I'll be working on formatters next. After I get some feedback (and fix anything) then I'll release a beta so more people can try it out. I'm concerned about getting this feature right, so please help by trying it out.\n. Sorry, jumped the gun. I broke several other tests with my implementation. I'll comment when I've actually pushed the parsers stuff.\n. Alright, it's working great! I've decided to make all parsers evaluate as formlyExpressions which means they can be expressed as strings and they also have access to the field's scope (and therefore the field's `options`). Also, I've actually just released a beta version that has parsers support. Again, please test it out and make sure I haven't missed anything important. I'll add formatters once I hear that parsers is working out for people (should reuse much of the same code).\n\n```\nnpm install angular-formly@6.21.0-beta.0\n```\n. Alrighty, `formatters` support is in the next beta version. Please provide feedback:\n\n```\nnpm install angular-formly@6.21.0-beta.1\n```\n. Has anyone had a chance to validate that this works as you'd expect? I don't really have a use case for this in my app, so it's hard for me to know whether it makes sense as implemented.\n. It's out of beta :-) Thanks for the feedback!\n. Thanks for trying it out @koenweyn! I'm sure that we could make it work without trouble. It would amount to adding that logic you have to [this function](https://github.com/formly-js/angular-formly/blob/master/src/directives/formly-field.js#L361). This seems like a good opportunity for a [`first-timers-only`](https://medium.com/@kentcdodds/first-timers-only-78281ea47455) issue. Do you think that you could file a bug separately and I'll prepare the issue for a first timer? (you could even prepare it if you would like).\n. Precisely :-) You can see [the others](https://github.com/formly-js/angular-formly/issues?utf8=%E2%9C%93&q=is%3Aissue+label%3Afirst-timers-only+)\n. @synthecypher, I created an example for the website. It will be live soon. If you can't wait 3 more minutes for it to deploy, [here it is](http://jsbin.com/luwoso/edit?html,js,console,output) :-)\n. You add them as part of the `defaultOptions` :-)\n. The best way to get help is to follow the instructions here: http://help.angular-formly.com\n. Thanks for commenting @a-laughlin. I actually like that idea a lot. Unless someone comes along with a good rebuttal, I think this is what I'll do.\n\nThis can be implemented as a \"smooth\" breaking change, as in, I'll add the `asyncValidators` property, and add a console warning to any non `asyncValidators` validator that returns a promise that this api is being deprecated and they must either return `true` or `false`, or they must use the new `asyncValidators` api.\n\nWould love more input (even if it's a :+1:). I think this is where I'm going.\n. Released as `6.18.0`. Not a breaking change. Simply allows you to add `asyncValidators` explicitly. Also, you can specify `formlyConfig.extras.explicitAsync` which will prevent any of your `validators` from being placed onto the `$asyncValidators` pipeline.\n. Just updated [the example](http://angular-formly.com/#/example/other/unique-value-async-validation)\n. This is definitely possible, but it's not the default behavior in angular and angular-formly doesn't (isn't going to) support this in the core because it's pretty use-case specific. You could use an `onChange` in the `templateOptions` of your checkbox that removes the values you wish. That would likely be a good solution I think.\n\n> &lt;canned-message&gt;\n> \n> Thanks for your interest in angular-formly. The issues are for bug reports/feature requests, so I'm going to go ahead and close this issue. If you have a question or need help, please [watch this screencast](https://www.youtube.com/watch?v=NXqFiSeBE-M&list=PLV5CVI1eNcJi7lVVIuNyRhEuck1Z007BH) for an explination of the most effective/proper way to get help using angular-formly.\n> \n> Summarized:\n> 1. [Learn angular-formly basics](http://learn.angular-formly.com)\n> 2. [Check the examples](http://angular-formly.com)\n> 3. [Reproduce the issue](http://help.angular-formly.com)\n> 4. [Ask on Stack Overflow](http://stackoverflow.com/questions/tagged/angular-formly)\n> 5. [Ask on the mailing list](http://mailing-list.angular-formly.com)\n> 6. [Ask on Chat](http://chat.angular-formly.com)\n> \n> P.S. sorry for the canned message, this just happens a lot :smile: \n> \n> &lt;/canned message&gt;\n. Good question. I believe the docs are unclear. If the type you have specified has wrappers assigned to it, then the only way to get rid of them is to use `null` which will remove all wrappers (as you have pointed out). There is not currently a way in angular-formly to completely override wrappers. So you'll have to create another type that has the wrappers you want. You can use `formlyConfig.getType` to copy properties from an existing type to a new, similar type that you create.\n\nI'm thinking that as a breaking change for the next version, I'll make it so that if `wrapper` are specified on the field, then the `type's` wrappers will not apply. That seems to me to make the most sense. (while I'm at it, I'll change the name from `wrapper` to `wrappers` because most of the time it is specified as an array anyway.\n. Would love feedback from anyone on this breaking change for the next version:\n1. Any problem changing the term `wrapper` to `wrappers` as it's specified as an array most of the time?\n2. Any problem removing the `default` wrapper behavior? Basically, if you specify the name `'default'` then it will wrap all types. This is a little bit too magical I think. And I believe it's undocumented.\n3. Any problem changing behavior so that if you specify a `wrappers` array on a field then rather than joining with the `wrappers` from the type, it entirely overrides them?\n4. I've recently thought that `<formly-transclude></formly-transclude>` is quite long. Any suggestions on whether it should be something else/shorter?\n5. Anything else anyone would like to see change in wrappers?\n. Good comments @redhead. I'll keep the `formly-transclude` then\n\n@pdemilly, I love the idea of it being an object with keys. The problem with that is how to define order. Once you do that you get into an issue with priority... We've talked about this on #368. What we could do though is give a wrapper an ID and you could optionally specify a wrapper as an object with a `name` and an `id`. Something like:\n\n``` javascript\nwrappers: ['foo', {name: 'bar', id: 'barWrapper'}]\n```\n\nThough I still think that this is less simple than just overriding the type's properties altogether. Thoughts?\n. Oh, I like that a lot. And that could be non-breaking as well... Problem is that it's not quite as obvious, so I think I'll still have a breaking change to make it override wrappers when specified, but I think optionally giving it a function opens a lot of flexibility.\n. Definitely not going to get into priority. I would hate to see the day where I see: `priority: Infinity` and `priority: Infinity + 1` :-(\n\nWe need this to be simpler, not more complex.\n. Can you give more info? Give us more of the error message. What version of angular-formly and angular are you using?\n. I'm not sure what's going on. But the problem is that the `formly.js` script is not getting added to your resulting minified script file.\n. > &lt;canned-message&gt;\n> \n> Thanks for your interest in angular-formly. The issues are for bug reports/feature requests, so I'm going to go ahead and close this issue. If you have a question or need help, please [watch this screencast](https://www.youtube.com/watch?v=NXqFiSeBE-M&list=PLV5CVI1eNcJi7lVVIuNyRhEuck1Z007BH) for an explination of the most effective/proper way to get help using angular-formly.\n> \n> Summarized:\n> 1. [Learn angular-formly basics](http://learn.angular-formly.com)\n> 2. [Check the examples](http://angular-formly.com)\n> 3. [Reproduce the issue](http://help.angular-formly.com)\n> 4. [Ask on Stack Overflow](http://stackoverflow.com/questions/tagged/angular-formly)\n> 5. [Ask on the mailing list](http://mailing-list.angular-formly.com)\n> 6. [Ask on Chat](http://chat.angular-formly.com)\n> \n> P.S. sorry for the canned message, this just happens a lot :smile: \n> \n> &lt;/canned message&gt;\n. Good luck! Please reach out to us on the mailing list or chat if you need help. The angular-formly community is happy to help :+1:\n. It's because `expressionProperties` only run when the `formState` or the `model` changes. Doing this saves big time on watchers (two watchers per form rather than two per field). You'll need to either bind the tabs model's to `formState` (probably easier) or you'll have to add a `$watch` to your controller and invoke the `runExpressions` function on the fields yourself. Like this: https://jsbin.com/hijoci/edit?html,js,output\n. Thanks for including a jsbin that reproduces your question. Makes it much easier to help!\n\n> &lt;canned-message&gt;\n> \n> Thanks for your interest in angular-formly. The issues are for bug reports/feature requests, so I'm going to go ahead and close this issue. If you have a question or need help, please [watch this screencast](https://www.youtube.com/watch?v=NXqFiSeBE-M&list=PLV5CVI1eNcJi7lVVIuNyRhEuck1Z007BH) for an explination of the most effective/proper way to get help using angular-formly.\n> \n> Summarized:\n> 1. [Learn angular-formly basics](http://learn.angular-formly.com)\n> 2. [Check the examples](http://angular-formly.com)\n> 3. [Reproduce the issue](http://help.angular-formly.com)\n> 4. [Ask on Stack Overflow](http://stackoverflow.com/questions/tagged/angular-formly)\n> 5. [Ask on the mailing list](http://mailing-list.angular-formly.com)\n> 6. [Ask on Chat](http://chat.angular-formly.com)\n> \n> P.S. sorry for the canned message, this just happens a lot :smile: \n> \n> &lt;/canned message&gt;\n. Thanks @benoror! That's exactly correct @HoplaGeiss :-)\n\n> &lt;canned-message&gt;\n> \n> Thanks for your interest in angular-formly. The issues are for bug reports/feature requests, so I'm going to go ahead and close this issue. If you have a question or need help, please [watch this screencast](https://www.youtube.com/watch?v=NXqFiSeBE-M&list=PLV5CVI1eNcJi7lVVIuNyRhEuck1Z007BH) for an explination of the most effective/proper way to get help using angular-formly.\n> \n> Summarized:\n> 1. [Learn angular-formly basics](http://learn.angular-formly.com)\n> 2. [Check the examples](http://angular-formly.com)\n> 3. [Reproduce the issue](http://help.angular-formly.com)\n> 4. [Ask on Stack Overflow](http://stackoverflow.com/questions/tagged/angular-formly)\n> 5. [Ask on the mailing list](http://mailing-list.angular-formly.com)\n> 6. [Ask on Chat](http://chat.angular-formly.com)\n> \n> P.S. sorry for the canned message, this just happens a lot :smile: \n> \n> &lt;/canned message&gt;\n. Not only that, but the context in which the string version is evaluated doesn't have access to `$scope`.\n. Actually, the way angular works is it only runs validation on the `NgModelController` that actually had a changed value. This was a decision that comes with downsides for sure. The one downside is that you have to tell angular to re-validate the fields yourself. You have a handle on the `NgModelController` via the `options.formControl` property (or the shortcut of `fc` if you have the field's scope). Here's [an example](http://angular-formly.com/#/example/other/matching-two-fields) that may help you. It uses an expressionProperty to accomplish this.\n\n> &lt;canned-message&gt;\n> \n> Thanks for your interest in angular-formly. The issues are for bug reports/feature requests, so I'm going to go ahead and close this issue. If you have a question or need help, please [watch this screencast](https://www.youtube.com/watch?v=NXqFiSeBE-M&list=PLV5CVI1eNcJi7lVVIuNyRhEuck1Z007BH) for an explination of the most effective/proper way to get help using angular-formly.\n> \n> Summarized:\n> 1. [Learn angular-formly basics](http://learn.angular-formly.com)\n> 2. [Check the examples](http://angular-formly.com)\n> 3. [Reproduce the issue](http://help.angular-formly.com)\n> 4. [Ask on Stack Overflow](http://stackoverflow.com/questions/tagged/angular-formly)\n> 5. [Ask on the mailing list](http://mailing-list.angular-formly.com)\n> 6. [Ask on Chat](http://chat.angular-formly.com)\n> \n> P.S. sorry for the canned message, this just happens a lot :smile: \n> \n> &lt;/canned message&gt;\n. Ah, in that case, place a `templateOptions.onChange = function($viewValue, $modelValue, scope) { ... }` and do the logic in there instead. (You have access to the other field via the `scope.fields` property)\n. Note, this wouldn't be without a migration path. Because of the `fieldTransform` functionality, I could provide a workable fieldTransform (with instructions/an example on how to use it) that you could copy to your project and slowly migrate the forms in your project over time. It wouldn't be perfect, but I think it would work well. So don't let that part scare you. I'm more concerned about the idea. Do you think this would make angular-formly more approachable/simple/maintainable/etc.?\n. Hopefully most templates will require very few changes. The idea of most of these attributes is that they would be dynamically added to the `ng-model` element(s) in the template so the templates don't have to concern themselves with them. But I know at least the bootstrap templates' [label](https://github.com/formly-js/angular-formly-templates-bootstrap/blob/master/src/wrappers/label.html#L4) wrapper uses `required` and would require updating. But that would be trivial and I would likely make a shortcut for this new property (like the `to` shortcut for `options.templateOptions`, we'd probably have `ma` for `options.ngModelAttrs` or something like that).\n. Not quite, but from a template author's perspective, you should hopefully have just a few places to update things. Unfortunately, from a user's perspective, many field properties that used to live in `templateOptions` would go to `ngModelAttrs` instead. As I said, I'd make a demonstration of a  `fieldTransform` that would allow you to make that transition over time, but eventually you'd want to rewrite all of your field configuration objects to resemble the new format.\n. I agree @redhead, I don't like the name either (especially since it's already in use and it seems long and ugly to me too). I'd love suggestions on a better one... Perhaps we can consider something that would make sense in both an angular 1 and angular 2 context...\n. Hmmm... I'll have to think on that a little more. I'm trying to think what would be most obvious for a new comer... `ngModelAttrs` is the best name I can think of for someone new to angular-formly but used to angular forms...\n. @dwolt, your perspective as a user is exactly what I'm trying to get, so thanks for sharing!\n\nOriginally, angular-formly didn't have any kind of structure for its options. If you wanted to create a new template, you would just add your own property to the field config object and life was good. Until the angular-formly core library comes around and decides to use a property of the same name for some other purpose and now you're stuck.\n\nFor example, let's imagine that you decide you want to make a special input that allows you to react when when you type into the input. You would probably add an `onKeyup` property to the field config and use that:\n\n``` javascript\n{\n  type: 'datepicker',\n  onKeyup: function(event) {\n    if (event.which === 32) {\n      console.log('space typed!!');\n    }\n  }\n}\n```\n\nThen angular-formly comes along and decides to add this to all fields, but makes the function arguments different. Instead of passing the event, it passes the `$viewValue` or something. Or perhaps angular-formly processes your field differently because that field exists. This would prevent you from upgrading until you refactored all of your fields.\n\nHopefully that makes sense and builds a case for the separation as well as the use of api-check in this project. I force you to place your own stuff in either `data` or `templateOptions` and I let you have full reign over those objects. Except in the case of `templateOptions`, there are properties that angular-formly uses to do some of its magic. Which sort of reintroduces the original issue. Which is why I'm suggesting this change would be worth the migration.\n\nDoes that make sense? Any holes in my logic? Is it not worth it?\n\nAsside from that, the `templateOptions` stuff is a little magical and is something that you must learn. It's not really intuitive. Something like `ngModelAttrs` makes a lot of sense. You just think to yourself: \"What would I normally put alongside the `ng-model` element, there's probably a property for that.\"\n. @rmulder, I cannot express how sorry I am that the change to `hideExpression` didn't work for you. I remember you mentioning having difficulties with it, but I didn't realize how wide sweeping a change that was for you. The reason it didn't result in a breaking change was the old way still works just as it did before, so you can stick with that. And I could add something that allows you to disable the warning formly now gives if you try to use `hide` in an expressionProperty if you want. I'm just so so sorry that this  has caused you grief :-(\n\nI appreciate you voicing your opinion and I will make sure that this upgrade is as painless as possible. I'm confident that a `fieldTransform` could quite easily make this work out of the box (you'd just copy/paste the field transform and it should work for you).\n\nOne thing I wish to clarify is that this library is not \"under development.\" This library works really really well and I could stop working on it and people would benefit from it for as long as angular 1.x is around. It is, however, being developed and improved. I just want to reiterate that angular-formly is no more \"under development\" as angular is. It's solid and it honors semver. I expect this isn't what you meant @rmulder, but I want to make it clear that angular-formly is a production-ready library :+1: :-)\n. Good thoughts everyone. Thanks for providing feedback (keep it coming). I'm going to think on this for a bit and I'll get back to you with what I decide on.\n. @ckniffen, you've convinced me with this line:\n\n> The reason being is that more implementation details now need to be known in order to know which object to place properties.\n\nI want to try really hard to not force people to know implementation details. For that reason, I'm closing this issue.\n\nBig thanks to everyone who dropped their opinion in here. Note, I do intend to implement #378 which should make it easier to add custom attributes to the `ng-model` element. Feel free to read up on that and drop an opinion on there. That will _not_ be a breaking change :-)\n. Also, I intend to implement adding the `extras` property onto the field configuration object. This object would be apiChecked by formly (as opposed to the `templateOptions` and `data` properties) and would be used to configure stuff that's specific to angular-formly core (rather than a template library). (Though, having just written that, it sounds like implementation details, but I think this is one case that we can make an exception due to the fact that these are edge cases).\n. Fantastic. Thank you!\n. This has been released (and tested) in `6.16.1`. Thanks for finding the bug!\n. And thanks even more for fixing it and explaining it so well :-)\n. Awesome. I think that I'm going to implement this one. I think it's a good idea and much simpler than the existing `ngModelAttrs`.\n. The existing `ngModelAttrs` is a highly complicated API because it's highly optimized. This would just make things more straightforward.\n. @sparty02, while your concern is valid, I think that the most straightforward name would be something like: `ngModelElementAttributes`, but that's way too wordy. If we abbreviate the stuff that makes sense, we can do: `ngModelElAttrs` and that's much better. I can't think of any other name that would be more strightforward.\n. This is indeed a bug. I'm on vacation, so I can't look at this now, but a\ntested PR would be welcome.\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Jul 2, 2015 6:12 AM, \"Radek Je\u017ed\u00edk\" notifications@github.com wrote:\n\n> I am not sure if this is correct, but I think hideExpression is not called\n> on model update when the model property in field config is specified\n> (different from the form model).\n> \n> if I use expressionProperties: hide, it works ok.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/380.\n. The bug should probably be fixed in the `formly-form`, so the fix should go in `formly-form.test.js` in a new `describe('hideExpression')` block right above [this line](https://github.com/formly-js/angular-formly/blob/b07e49c0642894bad920bde350adfeb9bd16084c/src/directives/formly-form.test.js#L361).\n. This has been discussed before and angular-formly has decided to not alter the model based on whether a field is hidden. Modifying the model willy-nilly is too much magic and doesn't account for varying use-cases. So yes, you'll have to keep doing that manually if that's what you want.\n. Any progress on this @redhead?\n. I've re-opened this so I don't forget to release it tomorrow.\n. This has been released in `6.22.0`. Thanks again for the PR!\n. Here you go :-) http://docs.angular-formly.com/v6.16.0/docs/gui-form-builders\n. It appears to be working fine for me in 3 different browsers. Seems like it could be an issue with your own settings.\n. @prokilogrammer, I'm sorry, but this is actually how it's supposed to work. The docs aren't very clear, but if you look above the docs for `value`, there's a callout that says:\n\n>  Added Properties\n> The properties listed below are added to your field configuration.\n\nMeaning that you shouldn't override them, but they are actually added. It's purpose is to be used internally to get the current value as well as when you specify `modelOptions` as specified in the docs:\n\nUnder `value`\n\n> Useful when using getterSetter: true in the modelOptions\n\nUnder `modelOptions`\n\n> Note, if you use the getter/setter option, formly's templateManipulator will change the value of ng-model to options.value which is a getterSetter that formly adds to field options\n\nSo I wont be accepting #383. I'm sorry :-/\n\nNow, I think what you're wanting to do (based on your example) is use either parsers of formatters which is on the roadmap in #368.\n. Yeah, without pushing every property down another heading level, I can't do that unfortunately... I'll see if there's a sensible obvious way to do that. Really sorry you took the time to write a PR and everything. I hope it was at least a good learning experience!\n. Curious about what the use case for a custom getterSetter is...\n. Ah, that makes sense. Perhaps I'll accept the pull request after all! :-)\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Jul 8, 2015 9:27 AM, \"Caleb Kniffen\" notifications@github.com wrote:\n\n> I have an internal and an external representation of the input. For\n> example I have ui-select type. ui-select requires an array of objects but\n> the value that gets stored on the formly model is the object's id or an\n> array of ids. The getterSetter handles that mapping for the type.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/383#issuecomment-119625136\n> .\n. Look at `defaultOptions`\n. Yeah, you're not given the `$scope` in that function (and we can't give it to you either because angular calls it, not us). Do you think that you could use `parsers` and `formatters` instead?\n. Yeah, I should just update that page because you're not the first to be confused by it. In the code that you copy/pasted, you'll see this comment:\n\n``` javascript\n// note, these field types will need to be\n// pre-defined. See the pre-built and custom templates\n// http://docs.angular-formly.com/v6.4.0/docs/custom-templates\n```\n\nI have an issue on the website repo to improve the homepage... Maybe I should do that soon... https://github.com/formly-js/angular-formly-website/issues/20\n. Thanks a ton!\n. Released as `6.17.0` Thanks again  \u2728\n. You can specify your own `id` and the name will match that. You can also keep the random `id` and instead specify a custom `name`. https://github.com/formly-js/angular-formly/blob/master/src/providers/formlyApiCheck.js#L92-L93\n. Note: The github issues in this project are not for questions but rather bugs reports or feature requests. Please follow the instructions here instead: http://help.angular-formly.com\n\nThanks for using angular-formly :D\n. Thanks! :+1: \n. Good question. In my app, I have probably 20 different types and a handful\nof template manipulators. Each gets its own file and therefore its own\nconfig function. This makes things quite manageable. Let me know if you\nhave questions :-)\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Jul 11, 2015 8:18 PM, \"Adam Gordon\" notifications@github.com wrote:\n\n> Just a clarification: If I require lots of different custom formly\n> templates, am I just doing it wrong or is it customary to have a .config\n> function where one makes a bunch of calls to formlyConfigProvider to set\n> wrappers and types?\n> \n> I recall you mentioning at ng-conf that you yourself almost always use\n> custom templates. If loads of different types and wrappers are ok, is there\n> a way you would recommending structuring the .config so that it doesn't\n> get out of control?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/387.\n. I'm going to go ahead and close this because it's not a bug out feature request. But feel free to respond if you have further questions.\n. Both separate html files as well as js files and css files and test files.\nI consider each type to be its own unit.\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Jul 11, 2015 9:03 PM, \"Adam Gordon\" notifications@github.com wrote:\n\n> That makes absolute sense. When you say separate file, you mean template\n> HTML file, right? I like the idea of separate .config calls - I'm going\n> to break mine apart. And yes, totally cool closing this. Thanks.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/387#issuecomment-120682169\n> .\n. This is a perfect candidate for http://help.angular-formly.com\n\nPlease keep the issues reserved for bugs and feature requests. There are many other resources for questions and help. Thanks!\n. No worries. http://help.angular-formly.com explains the best ways to get\nhelp. :-)\n\n-Kent C. Dodds\n\nOn Sun, Jul 12, 2015 at 8:27 PM, Adam Gordon notifications@github.com\nwrote:\n\n> Sorry. Not intended. Where would you like me to post the follow up (and\n> future help requests)? I'm working on the JS Bin. Thanks.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/388#issuecomment-120788090\n> .\n. You'll find that it's easier to first try to accomplish something without angular-formly. Then take that solution and accomplish it with angular-formly. Once you have the first solution, if you can't figure out how to integrate it with angular-formly, then create an example and ask for help on the appropriate channels (not in the github issues which are for bugs/feature requests).\n\nHere's something to get you started and point you in the right direction to get help: http://help.angular-formly.com\n. I implemented a deprecation warning. This needs to be released.\n. This was released in `6.23.0`\n. Thanks for working on this. While you're making updates and such, could you make sure that the PR ends up with only a single commit? Let me know if you need help getting that to work.\n. Hi @SagiMedina, it's hard for me to tell without seeing exactly what the issue is. Please create an example and follow the instructions here: http://help.angular-formly.com\n\nI'm going to go ahead and close this issue. There are many ways you can get help, but the issues are reserved for bugs and feature requests.\n. Again, it's hard for me to help without an example following the instructions here: http://help.angular-formly.com\n. @jajourda thanks :blush: that's exactly why I direct people to http://help.angular-formly.com... I simply don't have time to triage issues myself. While doing this may be a little less helpful in the short-term, it does help people figure things out for themselves and they learn how angular-formly works so they have fewer questions in the future and they're able to use angular-formly more productively.\n\nAs a note to your specific example, you could pretty easily extend an existing type to add support for the cc-card attribute :-) I created an example and added it to the website: http://angular-formly.com/#/example/integrations/angular-credit-card\n. Note, there's [a bug](https://github.com/formly-js/angular-formly/issues/523) right now that's making this not work quite right, but hopefully that'll be resolved soon.\n. Could you give me a better example? I (and many others) are shipping projects that use field groups and uglify our code when we ship it. My guess is that your issues are not related to angular-formly, but maybe how you're using it (for example, you may be specifying a custom controller that's not properly annotated).\n. That sounds about right. So that solves your problem right? Please close this issue if so.\n. Closing this issue. The issues are reserved for bug reports and feature requests. If you need help, follow the instructions here: http://help.angular-formly.com\n. Should work just fine. You'd have to define your own templates. See\nhttp://learn.angular-formly.com to find out how to define custom\ntemplates/types\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Jul 19, 2015 6:10 PM, \"Luis Gonzalez\" notifications@github.com wrote:\n\n> Does this package work with Semantic UI? I see Bootstrap mentioned.\n> \n> http://semantic-ui.com/kitchen-sink.html\n> \n> Thanks.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/394.\n. If you're interested in creating [a template library](http://docs.angular-formly.com/docs/custom-templates#prebuilt-templates) let me know and I'll create a shell repo in the formly-js organization for you to build the library with. Let me know if you need any help :-)\n. I believe this is currently supported... http://changelog.angular-formly.com#6150 am I missing something?\n. So much to do, so little time to do it... :-) [For example](https://github.com/alianza-dev/az-dynamic-filter)\n. I like what you're talking about. I still need to consider the api you've suggested further, but at first glance I like it. I think it is simpler. Do you think this is something that could be implemented as a separate library? They should work fine together...\n. I have no problem exposing the methods... I can do that. Would you be\nwilling to contribute to a new formly-js repo I make for this plugin?\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Jul 21, 2015 2:55 PM, \"Adam Laughlin\" notifications@github.com wrote:\n\n> Exposing methods not critical though. Easy to just copy the necessary code.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/396#issuecomment-123474711\n> .\n. [The repo](https://github.com/formly-js/angular-formly-simplified) has been created and you've been invited to the team that collaborates on it. Please let me know if there's anything else that you'd like me to expose from angular-formly to make this easier. I'm eager to see how this library turns out.\n. I'm going to go ahead and close this issue in favor of [this one](https://github.com/formly-js/angular-formly-simplified/issues/1). Perhaps some of the ideas developed there can be incorporated into the core.\n. Hmmm... Not sure why that would happen. It would help to see an example. The best way to get help with angular-formly questions like this is to follow the instructions here: http://help.angular-formly.com.\n\nBecause the github issues of this repo are reserved for bug reports and feature requests, I'm going to go ahead and close this one. Please follow the instructions indicated above and hopefully we can figure out what's going on. Thanks for using angular-formly!\n. Thanks for the FYI @BartVDACodeware!\n. Done\n. You can add a class to the `formly-field` element via the `className` property. I could add the ability to have a custom class to the `ngTransclude` element. That would be quite simple to implement actually if you're interested in making a PR. You'd basically do the same thing [here](https://github.com/formly-js/angular-formly/blob/master/src/directives/formly-form.js#L53) as is done in several other places (like [here](https://github.com/formly-js/angular-formly/blob/master/src/directives/formly-form.js#L38)). The test would look similar to [this one](https://github.com/formly-js/angular-formly/blob/master/src/directives/formly-form.test.js#L32-L38). Should be pretty simple.\n. Also, if you like, I can create a shell repo under the `fromly-js` organization for you to fill out with the library. Or you can just develop it under your own account. Whatever you like :-)\n. @Evanion, do you mind holding off on that PR? I'd like to reserve this one for a new-comer as I've done in the past #343 #358.\n. Like with #343 and #358, I've created tests for this feature and I'm going to give someone a shot at contributing to open source for the first time :-) So I will only accept a PR from someone who's never contributed to open source before.\n\nInstructions:\n- [x] Watch [this video](https://www.youtube.com/watch?v=QOchwBm9W-g&index=5&list=PLV5CVI1eNcJi7lVVIuNyRhEuck1Z007BH) to learn what you need to do to get things setup\n- [x] Go to [these tests](https://github.com/formly-js/angular-formly/blob/master/src/directives/formly-form.test.js#L152-L168) and change `describe.skip` to `describe.only`\n- [x] Run `$ npm test`\n- [x] Notice that some of the tests are failing\n- [x] Update the [formlyFormGetTemplate](https://github.com/formly-js/angular-formly/blob/master/src/directives/formly-form.js#L28-L101) function to add the class if it's specified on the `attrs`. I recommend doing pretty much the same thing that's done for [the form name](https://github.com/formly-js/angular-formly/blob/master/src/directives/formly-form.js#L38) except your function should look more [like this](https://github.com/formly-js/angular-formly/blob/master/src/directives/formly-form.js#L57-L59).\n- [x] Once the tests are  passing, change the `describe.only`s to `describe` so all the tests run.\n- [x] Commit your changes to the `src/` directory mentioning issue #343 (note it may take a second... it runs all the tests...)\n- [x] Push your changes to your fork, create a PR, get merged, celebrate \ud83c\udf89\n\nI'm happy to hold your hand through this if you need help. [Catch me on gitter](https://gitter.im/kentcdodds).\n. This has been released in the official `6.21.0` release.\n. I think I understand the issue. What's the behavior with the model without Angular-formly?\n. Yes, I believe what you're suggesting is the correct fix to the bug. Thanks for spending the time digging into this. I think you have a good idea for the fix. Do you fancy creating some tests for the bug and fixing the issue? Would probably go somewhere [in here](https://github.com/formly-js/angular-formly/blob/master/src/directives/formly-custom-validation.test.js#L19-L23). (Notice that even though the tests are run with angular 1.4, you can force `formly-custom-validation` to use parsers anyway with `use-parsers`).\n. No, that code lives in master so you shouldn't have any merge conflicts. And it was additive so I wouldn't expect any issues with it.\n. Sorry about that, but congrats on the upgrade! There are a lot of really cool features in 1.3 (here are [some](https://egghead.io/search?q=new+in+angular+1.3)) :-)\n\nThanks for the code. I think I may just implement this as a bugfix. Unless you (or anyone watching) can think of a reason it shouldn't be...\n. Good point. A diagram would probably be helpful. I'll give it some thought.\n. I'm going to consider this one a breaking change. Even though it may be easy to think of it as a bugfix, it definitely changes behavior and so I'll include it in the 7.0.0 milestone. I'm hoping to give that milestone an entire day to work on it. I may develop this functionality as a `formlyConfig.extras` property which you can enable and then remove the original functionality when 7.0.0 hits...\n. I'm not 100% certain that this is correct... After looking at it, I think there's a problem. Particularly with this line:\n\n``` javascript\nctrl.$modelValue = viewValue;\n```\n\nand this line:\n\n``` javascript\nreturn ctrl.$modelValue;\n```\n\nI found that the later prevented other async validators from starting which I don't believe is the correct behavior, and the former doesn't take `parsers` into account. I'm going to go ahead and close this because you've moved on to Angular 1.3, nobody else has complained, and I'm dropping 1.2 support in the next major release (not the one I'm doing in a few minutes, but the one after that).\n\nFor anyone else, feel free to resurrect this if need be.\n. Thanks for trying @benoror. @siripimamatha, the github issues are reserved for bug reports and feature requests. If you need help, please follow the instructions here: http://help.angular-formly.com This is the most effective way for us to help you and for you to receive help.\n. Awesome @DevanB. This is basically identical to my solution :-) Do you think you could squash this all into [a single commit](https://git-scm.com/book/en/v2/Git-Tools-Rewriting-History)? I like to keep my git commit history clean. If you need help with that, let me know :-)\n. Looks perfect! Welcome to the wonderful world of open source :-) \ud83d\udc4f\n. This has been released in the official `6.21.0` release. Thanks!\n. Hey @DevanB, I'm writing a blogpost that references this PR, do you mind if I reference you in it? https://medium.com/@kentcdodds/78281ea47455\n. Hi @estaub. Thanks for your interest in angular-formly. The best way to get help is to follow the instructions here: http://help.angular-formly.com\nThe github issues are reserved for bug reports and feature requests, so I'm going to go ahead and close this issue.\n. The core of angular-formly has nothing to do with the templates/types that are used to create the form. For example, angular-formly itself knows nothing about an `input` element. This has been delegated to the end developer to tell formly about the different types that you'll be using in your application. To learn about how to do this, see the \"Custom Templates\" video [here](http://docs.angular-formly.com/docs/learn-angular-formly).\n\nThis, however is out of the scope of the angular-formly core library and therefore cannot be a feature request for this repository. You could however [request an example](https://www.youtube.com/watch?v=lu-c5C1t4Sk&list=PLV5CVI1eNcJi7lVVIuNyRhEuck1Z007BH&index=4) for the website.\n\nGood luck! :+1: \n. I think that I'll start with a deprecation notice for this one. Then in 7.0.0, I'll rip it out altogether.\n. Love this. Would love some feedback from people on this one.\n. You might have to re-open this one... I can't seem to find it... \ud83d\ude1c #seewhatididthere?\n. This comment is no longer relevant.\n. Alright, I think there's enough support for this issue that I've added the `intent to implement` and `up-for-grabs` labels :+1: \n. This has been released in `6.22.0`! Thanks for the suggestion @TheMcMurder :-)\n. @alxvallejo, agreed. Perhaps someone (you) would like to write a plugin to keep all that common code :-)\n. Hi @Astray-git, thanks for using angular-formly. This is actually not a bug, but a performance optimization that angular-formly makes for you. To indicate to angular-formly that you wish to change the property, you need to use [`expressionProperties`](http://docs.angular-formly.com/docs/field-configuration-object#expressionproperties-object). Here's a working example of your issue: https://jsbin.com/qijuwe/edit?html,js,output\n\nGood luck!\n. This may require a breaking change...\n. Just for context... `runExpressions` is a function that's added to all of your fields which is in charge of running all of your `expressionProperties`. You can invoke it yourself, but most of the time it's just invoked by the parent `formlyForm` ([here](https://github.com/formly-js/angular-formly/blob/master/src/directives/formly-form.js#L123)).\n\nBecause `expressionProperties` require the `$viewValue` and the `$modelValue`, I remember having trouble with getting those values at the time I was developing it. Wrapping the function in a `$timeout` seemed to fix the problem. However, things have changed and it may not be necessary to do this anymore. I'm crossing my fingers.\n\nIf it is still necessary to execute `expressionProperties` on the \"next tick\" of the event loop, the next best thing I could do is replace `$timeout` with `setTimeout`. Right now, every one of your `expressionProperties` causes a `$digest` to fire because it's using `$timeout`. This is a major performance drag. However, if I switch to `setTimeout` then I fear that we may have a situation where things don't get updated as you would expect and you'd have to invoke `$digest` yourself (I don't want to force you to do this). This is why I would release this in a beta and ask that a lot of people please upgrade to try it out in your apps.\n\nFeedback is appreciated.\n. Oh! Yeah! Why didn't I think of that earlier. Thanks for the tip. That's probably exactly what I need.\n. Sorry, somehow this slipped through the cracks for me. I want to avoid doing too much different from the angular implementation of how to treat the model. Fewer surprises, more consistency. As a side, I actually disagree with you and I believe that the clearing of the model is appropriate.\n\nOn the subject of `select` `onChange`, I haven't seen what you're experiencing. Could you create an example and file a bug if you feel there is one?\n. Yeah, it didn't really work out well for me either. I'll release a bugfix version with the removed file.\n. The file has been removed in `6.21.1`. Thanks for letting me know.\n. Hi @sharpmachine! Thanks for using angular-formly. The best way for you to get help is to go to http://help.angular-formly.com and follow the instructions there. The github issues are reserved for bug reports and feature requests. So I'm going to go ahead and close this issue.\n. [As before](https://github.com/formly-js/angular-formly/issues?utf8=%E2%9C%93&q=is%3Aissue+label%3Afirst-timers-only+) this one is for first-timers-only. That means that I will only accept a PR for this one from someone who's never contributed to open source before. This one is particularly easy (but don't make that statement make you feel bad if you have a hard time with it, there's more to contributing to open source than changing lines of code, especially if it's your first time). I'll hold your hand through this if you need me to. :-) Here are the steps to get a PR merged here.\n- [x] Watch [this video](https://www.youtube.com/watch?v=QOchwBm9W-g&index=5&list=PLV5CVI1eNcJi7lVVIuNyRhEuck1Z007BH) to learn what you need to do to get things setup\n- [x] Go to [this test](https://github.com/formly-js/angular-formly/blob/master/src/directives/formly-field.test.js#L736-L751) and change `describe.skip` to `describe.only`\n- [x] Run `$ npm test`\n- [x] Notice that it's failing\n- [x] Go to [this line](https://github.com/formly-js/angular-formly/blob/master/src/directives/formly-field.js#L660). This is where formly decides which instance of [apiCheck](https://github.com/kentcdodds/api-check) to use to issue the warning. We need to tell formly to default to the field's instance (the one that's passed in and is called `apiCheckInstance`), then the `formlyConfig.extras.apiCheckInstance`, then the `formlyApiCheck` instance. Right now it's missing the `formlyConfig.extras.apiCheckInstance`. I would just add it as another `||` between the first and second one on the same line.\n- [x] Update the eslint comment [here](https://github.com/formly-js/angular-formly/blob/master/src/directives/formly-field.js#L656) to allow for a complexity of `9` (instead of `8`) because you're adding another branch of complexity. Don't worry, it's covered, and I think that the code is fairly easy to understand. If you want, you could refactor it to make it even better.\n- [x] Once the test is passing, change the `describe.only` to `describe` so all the tests run.\n- [x] Make sure that all the tests pass\n- [x] Commit your changes to the `src/` directory mentioning issue #343 (note it may take a second... it runs all the tests...)\n- [x] Push your changes to your fork, create a PR, get merged, celebrate \ud83c\udf89\n\nI'm happy to hold your hand through this if you need help. [Catch me on gitter](https://gitter.im/kentcdodds).\n. Thanks @bmacheski!\n. This has been released in `angular-formly@6.23.0` :-)\n. Sorry this took so long for me to get back to you. [Work's been crazy](https://twitter.com/kentcdodds/status/627190104637898752). So, I realized late that this would actually break anyone who's using the `formly-field` directly. Even though technically the `formly-field` directive is internal, I know that I'm using it and I'm sure others are as well, so I'd prefer not to break it.\n\nDo you think you'd have time to work in just one more piece to this PR? I'd like a test that's _something like this_ pseudo code to pass:\n\n``` javascript\nit(`should add the model watcher when it's not the direct child of a formly-form`, function() {\n  const someExpressionProperty = sinon.spy();\n  compileAndDigest('<div formly-field class=\"formly-field\" options=\"field\" model=\"field.model\"></div>');\n  scope.field.model.foo = 'hello';\n  scope.$digest();\n  $timeout.flush();\n  expect(someExpressionProperty).to.have.been.calledOnce;\n});\n```\n\nThat's not complete, but hopefully you get the idea. I would expect the implementation of it would simply check the parent element (probably in the link function because I'd prefer to avoid injecting `$element` into the controller) and if it's not a `formly-form`, then add the watch as it was before.\n\nSorry this has been such a long-lived PR. Thanks a ton for your work on it!\n. I could see an edge case where this could be nested inside a formly-form (as a field template) and that would be a problem. But that's definitely an edge case and I don't think we need to consider that. Thanks for working on this!\n. I'll release this tomorrow. I try to limit my coding on Sundays. Thanks!\n. Turns out this is only possible if you specify an ID for all the fields. Most people aren't doing this. If you are doing this, then I recommend that you specify `track-by` as an attribute.\n. Hi @SupriyaVenkatesh, please follow the instructions here: http://help.angular-formly.com\n\nBecause the github issues are for bug reports and feature requests, I'm going to go ahead and close this issue. See you in chat!\n. Awesome! This is perfect. Thanks for working on it! Welcome to the wonderful world of open source :-)\n. Feedback is welcome. How did it go? Were my instructions helpful? How could I have improved on this?\n. Also, what's your twitter handle?\n. Hey @bmacheski, I'm writing a blogpost that references this PR, do you mind if I reference you in it? https://medium.com/@kentcdodds/78281ea47455\n. Linking this to #410\n. Hi @amangupta01 \ud83d\udc4b \r\nWelcome! I'm not maintaining this library anymore, however I do have [this article](http://kcd.im/what-oss) that could help you find a library that you would be interested in contributing to. I also have [a free video course](http://kcd.im/pull-request) that teaches how to contribute to a project once you've found one.\r\n\r\nGood luck!. Ah, well, if you read the article I linked, I give some tips on finding libraries that you could contribute code to :). Hi @GoNode5! Thanks for your interest in angular-formly. I'm sure that angular-formly can do this for you. The best way to get help is by following the instructions here: http://help.angular-formly.com\n\nI'm going to go ahead and close this issue because the github issues for this project are reserved for bug reports and feature requests. See you on chat!\n. Seems good to me. Thanks @benoror. I hope this helps @nomack84. I'm going to go ahead and close this issue because issues are reserved for feature requests and bugs. If you need help, follow the instructions here: http://help.angular-formly.com\n. I think the issue you're seeing isn't an issue with formly, but with the part that displays the model. See [here](https://jsbin.com/liveca/edit?html,js,output).\n. Did this resolve your issue? Please close if so.\n. Here's what I'd recommend: https://jsbin.com/wibado/edit?html,js,console,output\nWill that do it for you?\n\nEither way, this could be helpful. If you want to make a PR, we can take a look at the amount of complexity it adds to angular-formly. I'm fairly confident I'd accept a PR for this though. Thanks!\n. Here's a good workaround: https://jsbin.com/wibado/edit?html,js,console,output\n. :+1: \n. This actually would probably be a good first-timers-only issue. Maybe I'll work on adding some tests sometime. Until then, feel free to submit a PR if you want. Should be pretty simple.\n. Hi @marcoriesco, thanks for using angular-formly. I'm not certain that I understand the problem you're having. If you could be a little more clear that would be helpful. Some reproduction steps in the jsbin you created would be helpful.\n\nEither way, the github issues are reserved for bug reports and feature requests, so I'm going to go ahead and close this issue.\n. Need to add `skipNgModelAttrsManipulator` [here](https://github.com/formly-js/angular-formly/blob/master/src/providers/formlyApiCheck.js#L106)\n. Awesome. Took me a while to figure out what on earth you were doing with the tests. But I think they're good. :+1: Just add that comment and I'll merge this and release it\n. Released as 6.23.2. Thanks a ton @koenweyn :-)\n\n> Our resident IE8 support expert @koenweyn caught it and PRed a fix.\n\nhttps://github.com/formly-js/angular-formly/blob/master/CHANGELOG.md#6232\n. Just found out that these tests are actually failing. For some reason, the SnapCI build is still passing. Not sure what's going on here. If you have any idea, would love help there.\n. Fixed it. Was a simple logic issue. You'll see my commit soon. Thanks.\n. Yeah, it's odd that it didn't... I should probably look into that as well...\n. I'm thinking that @benoror's betterNpmScripts isn't propagating failures for some weird reason... I think I need to come up with an alternative solution or something... Ah well...\n. Thanks for setting this up @koenweyn!\n\nHere's another [`first-timers-only`](https://medium.com/@kentcdodds/first-timers-only-78281ea47455) issue! I will only accept a PR from someone who's never contributed to an open source project before!\n\nI'll hold your hand through this so you can get your first PR into a real open source project! Your goal is to make [this test](https://github.com/formly-js/angular-formly/blob/master/src/directives/formly-field.test.js#L1018-L1029) pass. Here are some steps:\n- [ ] Watch [this video](https://www.youtube.com/watch?v=QOchwBm9W-g&index=5&list=PLV5CVI1eNcJi7lVVIuNyRhEuck1Z007BH) to learn what you need to do to get things setup\n- [ ] Go to [this test](https://github.com/formly-js/angular-formly/blob/master/src/directives/formly-field.test.js#L1018-L1029) and change `it.skip` to `it.only`\n- [ ] Run `$ npm test`\n- [ ] Notice that it's failing\n- [ ] Go to [this function](https://github.com/formly-js/angular-formly/blob/master/src/directives/formly-field.js#L360-L362). This is where angular-formly applies the `formatters` from the field options to the `$formatters` of the [NgModelController](https://docs.angularjs.org/api/ng/type/ngModel.NgModelController#$formatters). Look at the code sample that @koenweyn suggests in the comment above. You'll do something similar. You'll get `ctrl` from `scope.fc`.\n- [ ] Once the test is passing, change the `it.only` to `it` so all the tests run.\n- [ ] Make sure that all the tests pass\n- [ ] Commit your changes to the `src/` directory mentioning issue #423 (this issue) in your commit message (note it may take a second... it runs all the tests...)\n- [ ] Push your changes to your fork, create a PR with the description mentioning issue #423 (this issue), get merged, celebrate \ud83c\udf89\n\nCatch me on [gitter](https://gitter.com/kentcdodds) if you need help!\n. Yeah, that's totally fine. There's been plenty of time for a first timer to grab this if they wanted to. There will other opportunities.\n. Ah! Yes, thank you @redhead, this is indeed implemented.\n. Thanks a ton for doing this @koenweyn! This is super cool! If you could just address the one thing that I mentioned then I think we're good.\n. Thanks a ton!\n. This is definitely possible and many people do it. Here's an example: http://angular-formly.com/#/example/other/json-powered\n\nI'm going to go ahead and close this issue. The github issues are reserved for feature requests and bug reports. If you need help, follow the instructions here: http://help.angular-formly.com\n. Thanks for looking into this. My first impression is that this would add quite a bit of complexity to the codebase. That's fine, but I want to make sure that the complexity is worth it. Do you think you could produce an example that demonstrates the perf bottleneck?\n\nMaybe I'm mistaken and this wont actually make things more complex...\n. I'm still not 100% sure this is good from a simplicity standpoint. Feel free to create a PR. That might help me visualize exactly what the API and the code changes involved would look like. But just know that I'm not certain whether I'd accept it.\n\nI really appreciate your contributions! Thank you for your work!\n. I think that would be better. The thing I don't like about what you were originally suggesting is that we're creating our own magic DSL by having '.something' have special meaning. I would prefer it if there were a little less angular-formly-specific magic going on, and it was easier to understand what's happening. By doing what you've just suggested, I think that would be much better.\n. Here's a solution using `formState`: https://jsbin.com/gokonaq/edit?js,output\n. Hi @setakhero, thanks for using angular-formly! The problem is that you need to define a `datepicker` type yourself. I recommend that you watch the videos here: http://learn.angular-formly.com to familiarize yourself with how angular-formly works.\n\nThe issues on this github repo are reserved for bug reports and feature requests. If you need help, please follow the instructions here: http://help.angular-formly.com. Good luck! I'm going to close this issue. See you in the chat! Thanks again.\n. Note, this doesn't handle the multiple `ng-model` case. If you want to implement that, that would be great.\n. Looks like another case where angular-formly abstracts away complexity/broken parts from angular's built-in forms. Thanks!\n. Hi @SupriyaVenkatesh. Your question is related to how to work with ui date-picker, not angular-formly. I recommend you direct your question to [them](https://github.com/angular-ui/bootstrap/). Also, as I believe you are aware, the github issues are reserved for bug reports and feature requests. If you need help, please follow the instructions here: http://help.angular-formly.com\n. Thanks for letting me know! @TheMcMurder's fix is in release `6.23.5`\n. Turns out that there's still an issue with setting the `form` to `$dirty`. @TheMcMurder is working on a fix now.\n. Ah, now I see. Do we need to consider the common case for `formState` as well? Someone could say the model is `formState.foo` or something and we're already watching `formState`. We could do that in a separate PR or we could add that to this one. Either way, I like this and I think it enhances formly while keeping the external API unchanged. \ud83d\udc4d\n. @redhead, thanks so much for working on this. I really appreciate you taking the time to invest in the project \ud83c\udf1f gold star for you!\n. This is super awesome! The one thing left I just realized is the case for `model['some-crazy-key']`, but I think we can address that later. Thanks for working on this @redhead. I'll get it in and released now!\n. Released as `6.23.7`\n. Will do. Thanks!\n. Hi @irhabi. Please see [this example](http://angular-formly.com/#/example/other/json-powered). Also, from [README](https://github.com/formly-js/angular-formly#getting-help):\n\n> Please don't file an issue unless you feel like you've found a bug or have a feature request. Instead, go to [help.angular-formly.com](http://help.angular-formly.com) and follow the instructions.\n\nSo I'm going to close this issue.\n. This appears to work just fine for me: http://jsbin.com/fowufo/edit?html,js,output\n. I'm not certain I understand what you mean, but if you want to completely workaround the autocomplete by Chrome, take a look at [the extras](http://docs.angular-formly.com/docs/formlyconfig#extras) for `formlyConfig`. Specifically the `removeChromeAutoComplete` property.\n\nIf that's not sufficient, could you please describe exactly what the problem is? Thanks.\n. Yeah, I don't think there's really anything that angular or angular-formly could do for you. If you have any specific ideas or fixes, I'm open to hearing them, but I'm going to go ahead and close this one as out of scope. Good luck!\n. Instead of putting `templateOptions.onChange` in `expressionProperties`, put `onChange` in `templateOptions`. It's similar to [this example](http://angular-formly.com/#/example/field-options/on-keypress)\n\nNote, from [the README](https://github.com/formly-js/angular-formly#getting-help):\n\n> Please don't file an issue unless you feel like you've found a bug or have a feature request. Instead, go to help.angular-formly.com and follow the instructions.\n\nSo I'm going to go ahead and close this. Thanks.\n. Yes, look into ngModelOptions. Sorry, I have a spotty internet connection,\notherwise I'd link you to it in the docs.\n\n-Kent C. Dodds\n\nOn Mon, Aug 24, 2015 at 8:34 AM, Mavrick notifications@github.com wrote:\n\n> Hey dude,\n> \n> I'm just trying to wrap my head around this one. I've read\n> https://code.google.com/p/chromium/issues/detail?id=468153#c14\n> \n> I've set formlyConfig.extras.removeChromeAutoComplete to true so we hit\n> the following code:\n> \n> // \u10da(\u0ca0\u76ca\u0ca0\u10da)   (\u256f\u00b0\u25a1\u00b0)\u256f\ufe35 \u253b\u2501\u253b    (\u25de\u2038\u25df\uff1b)function fixChromeAutocomplete() {\n>   var global = formlyConfig.extras.removeChromeAutoComplete === true;\n>   var offInstance = scope.options && scope.options.removeChromeAutoComplete === false;\n>   var onInstance = scope.options && scope.options.removeChromeAutoComplete === true;\n>   if (global && !offInstance || onInstance) {\n>     var input = document.createElement('input');\n>     input.setAttribute('autocomplete', 'address-level4');\n>     input.setAttribute('hidden', 'true');\n>     el[0].appendChild(input);\n>   }\n> }\n> \n> Looking at comment 41:\n> https://code.google.com/p/chromium/issues/detail?id=468153#c41\n> \n> Once I did this, all of my \"autocomplete=off\" elements were respected by\n> Chrome.\n> \n> Which brings me to my question. How can I set the autocomplete flag on an\n> input element using angular-formly?\n> \n> Should I be overriding the base template for an input or is there a\n> templateOption I can specify to set the autocomplete flag?\n> \n> Cheers\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/440.\n. Neat! Thanks for doing this! Could you follow the steps [here](https://github.com/formly-js/angular-formly-website/blob/master/CONTRIBUTING.md#creating-an-example) to get this added to the website? Thanks again :+1: \n. Sure thing! Thanks!\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Aug 27, 2015 5:14 AM, \"drmikecrowe\" notifications@github.com wrote:\n\n> Kent, will.\n> \n> BTW, Contributing needs to be on the main page under Get Help on the left.\n> I looked everywhere on the website (probably not exhaustively) for the\n> process, but it wasn't immediately obvious for new users of formly. Would\n> you like me to submit a PR for that too?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/441#issuecomment-135388851\n> .\n. That jsbin is out dated so the scripts aren't being loaded properly. Here's the updated version:\n\nhttps://jsbin.com/xuyogoy/edit?html,console,output\n\nI'm also seeing that error. I'm not sure what the problem is. Anyone else?\n. Formly only depends on angular and api-check (see [package.json](https://github.com/formly-js/angular-formly/blob/master/package.json#L53-L56)). You can see the dependencies of that example in the `head` tag:\n\n``` html\n    <!-- Twitter bootstrap -->\n    <link href=\"//maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.css\" rel=\"stylesheet\">\n\n    <!-- apiCheck is used by formly to validate its api -->\n    <script src=\"//npmcdn.com/api-check\"></script>\n    <!-- This is the latest version of angular (at the time this template was created) -->\n    <script src=\"//ajax.googleapis.com/ajax/libs/angularjs/1.4.7/angular.js\"></script>\n\n    <!-- This is the latest version of formly core. -->\n    <script src=\"//npmcdn.com/angular-formly\"></script>\n    <!-- This is the latest version of formly bootstrap templates -->\n    <script src=\"//npmcdn.com/angular-formly-templates-bootstrap\"></script>\n\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/angular-ui-bootstrap/0.13.0/ui-bootstrap-tpls.min.js\"></script>\n\n    <!-- ui-select files -->\n    <script src=\"https://rawgit.com/angular-ui/ui-select/master/dist/select.js\"></script>\n    <link rel=\"stylesheet\" href=\"https://rawgit.com/angular-ui/ui-select/master/dist/select.css\">\n    <script src=\"https://ajax.googleapis.com/ajax/libs/angularjs/1.3.14/angular-sanitize.js\"></script>\n\n    <!-- Select2 theme -->\n    <link rel=\"stylesheet\" href=\"http://cdnjs.cloudflare.com/ajax/libs/select2/3.4.5/select2.css\">\n\n    <!--\nSelectize theme\nLess versions are available at https://github.com/brianreavis/selectize.js/tree/master/dist/less\n-->\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/selectize.js/0.8.5/css/selectize.default.css\">\n    <!-- <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/selectize.js/0.8.5/css/selectize.bootstrap2.css\"> -->\n    <!-- <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/selectize.js/0.8.5/css/selectize.bootstrap3.css\"> -->\n```\n. Hmmm... When in angular 1.2, angular-formly uses the `$parsers` api to do validation (standard way to do validation in 1.2). I think this is happening because angular 1.2 doesn't re-run the parsers when the model is changed programmatically (as it is in your example). So you're going to have to figure out a way to trigger the parsers to re-run whenever you change the model programmatically. You might consider looking into the `watchers` property to do this.\n\nLet me know if you think there's something that we can do in angular-formly core to make this easier for you and we can talk about it. Otherwise I'm going to close this as a `wont-fix`. Good luck!\n. Hmmm... If you can come up with a consistent way to update the validity properly, then perhaps I can find a good way to integrate that solution into formly core (or I'd happily accept a PR).\n. Fantastic! Thanks for writing this up! I hope you don't mind iterating on this a little bit. I have a comment or two. Thanks!\n. Awesome! Thank you so much for working on this :+1: This is definitely needed!\n. Nope! It's perfect! Thanks!\n. Also, this: http://beletsky.net/2015/04/npm-for-everything.html\n. @ckniffen, how does the work-around not work for you?\n. I'm wanting to automate releases using semantic-release. Currently, semantic-release doesn't push the built changes to the git repo (https://github.com/semantic-release/semantic-release/issues/75). I bet I could finagle something to get it to work, but it's just extra complexity and time spent that I'd like to avoid if I can.\n\nThe process of a release before adding semantic-release was to do this basically:\n1. Make and commit the changes\n2. Manually update the changelog (which I've made mistakes on several times)\n3. Decide whether this is a breaking change, new feature, or a bugfix and bump the version accordingly\n4. Run the build, commit changes, tag the commit with the version, push to github, npm publish\n\nLuckily, I was able to make the third item be a single command, but what semantic-release gives me is it removes the last three steps and does all of those automatically. This saves me time and reduces human error.\n\nThat's why I want to use semantic-release. I want to drop bower because semantic-release doesn't work well with bower currently and I also would prefer if we all (as a frontend community) just use `npm` instead.\n. I should mention, I'm just testing the waters. I was at a 30% likelihood of actually going through with this when I filed the feedback issue.\n. This doesn't have to happen! I got it working :-)\n. I'm sorry I've been so silent on this. I haven't had a chance to give it a good look. Sorry! :-/ I'll try to give it a closer look soon!\n. Haha, and I have a day job :P thanks for understanding :-)\n. Finally getting a chance to look into this. And I don't think I'm seeing the problem that you are... Do you mind trimming the example down a little bit and giving step-by-step reproduction instructions?\n. ping?\n. I realized what the problem was when I saw #485. The solution is the same: http://plnkr.co/edit/0roe4DzhhkANhOdJxhoX?p=preview\n. I'm going to close this. Let me know if you need more help\n. Fantastic! Sorry it took so long for me to respond.\n. This is definitely a bug. I may make this a [first-timers-only](https://medium.com/@kentcdodds/first-timers-only-78281ea47455) issue. If someone else would like to write skipped tests to reproduce this issue, that would be awesome :-)\n. Hi @dannycallaghan! Thanks for doing this!\n\nIgnore the snap build. I just deleted it. We're now building with Travis. I need to add a check on travis that your commit message is correct. Now that we're automating our releases with semantic-release, we need to make sure that the commit messages are correct. If you could update your commit message to use [our conventions](https://github.com/ajoslin/conventional-changelog/blob/master/conventions/angular.md), that would be very helpful. Let me know if you have trouble with this.\n. That'll do! Thanks!\n. Why can't you just use it as an element?\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Sep 2, 2015 7:22 AM, \"kavi87\" notifications@github.com wrote:\n\n> I would like to use the directive formlyForm as an attribute instead of a\n> custom element because we use this way accross all of our directives.\n> Currently it is restricted to element only.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/450.\n. Understood. Personally I don't like it, but I would be happy to accept a PR that updates [this](https://github.com/formly-js/angular-formly/blob/master/src/directives/formly-form.js#L14) and [this](https://github.com/formly-js/angular-formly/blob/master/src/directives/formly-form.js#L8) to make that possible :-) Make sure to check [this](https://github.com/formly-js/angular-formly/blob/master/CONTRIBUTING.md#development) to know how to contribute :+1: \n. Note: Commit this one as a `feat` not a `fix`.\n. [As before](https://github.com/formly-js/angular-formly/issues?utf8=%E2%9C%93&q=is%3Aissue+label%3Afirst-timers-only+) this one is for [First Timers Only](https://medium.com/@kentcdodds/first-timers-only-78281ea47455). That means that I will only accept a PR for this one from someone who's never contributed to open source before. This one is particularly easy (but don't make that statement make you feel bad if you have a hard time with it, there's more to contributing to open source than changing lines of code, especially if it's your first time). I'll hold your hand through this if you need me to. :-) Here are the steps to get a PR merged here.\n- [ ] Watch [this video](https://www.youtube.com/watch?v=QOchwBm9W-g&index=5&list=PLV5CVI1eNcJi7lVVIuNyRhEuck1Z007BH) to learn what you need to do to get things setup.\n- [ ] Go to [this test](https://github.com/formly-js/angular-formly/blob/master/src/directives/formly-form.test.js#L24-L30) and change `it.skip` to `it.only`\n- [ ] Run `$ npm test`\n- [ ] Notice that it's failing\n- [ ] Go to [this line](https://github.com/formly-js/angular-formly/blob/master/src/directives/formly-form.js#L14) and make it look like [this line](https://github.com/formly-js/angular-formly/blob/master/src/directives/formly-field.js#L17). Then make sure to update [the comment](https://github.com/formly-js/angular-formly/blob/master/src/directives/formly-form.js#L8) as well.\n- [ ] Once the test is passing, change the `describe.only` to `describe` so all the tests run.\n- [ ] Make sure that all the tests pass\n- [ ] Run `git add src/`\n- [ ] Run `npm run commit` and follow the prompt (In the last question where it asks about referencing issues closed, put `closes #450`).\n- [ ] Push your changes to your fork, create a PR, get merged, celebrate \ud83c\udf89\n\nI'm happy to hold your hand through this if you need help. [Catch me on gitter](https://gitter.im/kentcdodds).\n. Please do!\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Sep 4, 2015 11:43 AM, \"geraldchecka\" notifications@github.com wrote:\n\n> Hello Kent! I've never submitted to any open source projects. Can i do\n> this?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/450#issuecomment-137802697\n> .\n. Good question! I'd probably say it's `formly-form`.\n. Probably in the `formlyApiCheck.test.js`\n. The current example isn't re-parsing at all. If you look, it's only parsed once.\n. But what I'm thinking of wouldn't even require the parse service or a getter setter at all\n. This is now supported in the core. Feel free to test as you will! :-) Version `7.0.0`\n. Fantastic! Thank you for your contribution!\n. Perfect!\n. Hmm... Not sure why github didn't recognize this as merged. I'm using [a new thing](https://github.com/kentcdodds/rebase-and-merge) I developed to keep git commit histories cleaner when merging PRs, but I think that when the branch needs a rebase, github doesn't recognize it as merged, but this has totally been merged and you're definitely still the \"author\" of the commit :-) Thanks again!\n. Hi @xgvargas! Thanks for your interest in angular-formly! I think what you're looking for is something like [this](http://angular-formly.com/#/example/integrations/angular-wizard).\n\nIssues on GitHub are reserved for bug reports and feature requests. So I'm going to close this issue. If you need help, please follow the instructions here: http://help.angular-formly.com\n. You're looking for `resetModel`. I'm going to go ahead and close this issue. The github issues are reserved for bug reports and feature requests. If you need help, please follow the instructions here: http://help.angular-formly.com Good luck!\n. Note, not all projects work the same way. Generally you're fine to use\nissues for questions. But this project gets so many questions I couldn't\nkeep up with them. Generally, check if the project has a CONTRIBUTING.md\nfile. That'll have instructions :-)\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Sep 8, 2015 10:11 PM, \"laurent-thai\" notifications@github.com wrote:\n\n> Hello Thank you so much for your reply and for the advice about the\n> correct usage of github.\n> \n> Have a nice day.\n> \n> Laurent.\n> \n> De : Kent C. Dodds [mailto:notifications@github.com]\n> Envoy\u00e9 : mercredi 9 septembre 2015 11:08\n> \u00c0 : formly-js/angular-formly\n> Cc : laurent-thai\n> Objet : Re: [angular-formly] Refresh form (#457)\n> \n> You're looking for resetModel. I'm going to go ahead and close this issue.\n> The github issues are reserved for bug reports and feature requests. If you\n> need help, please follow the instructions here:\n> http://help.angular-formly.com Good luck!\n> \n> \u2014\n> Reply to this email directly or view it on GitHub <\n> https://github.com/formly-js/angular-formly/issues/457#issuecomment-138774740>\n> . <\n> https://github.com/notifications/beacon/AFn3uD8hhbKD1GuWLDdXKl6nFOMs7uUmks5ov6gvgaJpZM4F5_mX.gif>\n> \n> Aucun virus trouv\u00e9 dans ce message.\n> Analyse effectu\u00e9e par AVG - www.avg.fr\n> Version: 2015.0.6125 / Base de donn\u00e9es virale: 4409/10603 - Date:\n> 09/09/2015\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/457#issuecomment-138775419\n> .\n. Awesome!\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Sep 10, 2015 5:15 PM, \"Jonathan Haines\" notifications@github.com wrote:\n\n> Looks interesting, happy to have a go\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/458#issuecomment-139408905\n> .\n. Is there a reason you created this PR?\n. Awesome! Welcome! :wave:\n\nCheck out the open issues with the `up-for-grabs` label: https://github.com/formly-js/angular-formly/issues?utf8=%E2%9C%93&q=label%3Aup-for-grabs+is%3Aissue+is%3Aopen\n\nAlso, if you're a first timer to open source, then occasionally I add a `first-timers-only` label to issues. For more info on that, see [this](https://medium.com/@kentcdodds/first-timers-only-78281ea47455).\n. I also recommend you follow [@yourfirstpr](https://twitter.com/yourfirstpr) on twitter. And [me too](https://twitter.com/kentcdodds) as I will often tweet when I open a new `first-timers-only` issue.\n. Seems legit. Thanks!\n. Thanks for this. Can't merge now, but will look more closely later. The problem with object is order isn't consistent/garunteed... Though I like the idea, I think we'll wait for someone to have aause case before we implement something like that.\n\nThanks again! I'll look at this later. In the mean time, could I ask for your feedback on ease of contributing?\n. Odd... Travis says that the build passed, but if I look at the output, it shows that two tests failed...\n. I'm happy to have you contribute! Looks like they're failing locally. I'll try to see what's going on. I'll let you know. Thanks for contributing :-)\n. I've found the problem. I'll submit a PR to your branch :-)\n. Perfect! Thank you!\n. :-D thanks for the feedback! I'm glad that overall it was a good\nexperience. Thanks again for contributing. Let's do this again sometime :-D\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Sep 11, 2015 12:25 AM, \"Jonathan Haines\" notifications@github.com\nwrote:\n\n> Thanks for the assistance! I'll try some feedback...\n> \n> I find structure really helpful, code style, contribution guidelines, have\n> always been helpful when I've contributed to projects in the past. Since\n> using formly and seeing first-timers-only gain momentum, it's only recently\n> I've realised how helpful these ideas are for the community.\n> \n> Using ghooks to run linting, tests, etc is really helpful. Saves all the\n> nitpicking 'why did you add that tab/space/symbol/emoji'. Super beneficial.\n> The downside is making it work in everyone's dev environment/setup. How can\n> we improve that experience for people, especially when the node/npm world\n> is so modular and projects have so many dependencies, for example\n> commitizen/cz-cli#10 https://github.com/commitizen/cz-cli/issues/10.\n> \n> How much hand-holding should there be? I think it's enough to reply to\n> people's queries with a quick link or short description of where to find\n> the solution. From what I've seen in Gitter, you do a good job.\n> \n> From this side of the world it looks like you're making good things. Look\n> after yourself\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/pull/461#issuecomment-139471582\n> .\n. [here you go](http://angular-formly.com/#/example/advanced/validation-on-form-submit)\n. The github issues are reserved for Bug Reports and Feature Requests. If you have a question in the future, please follow the instructions here: http://help.angular-formly.com thanks!\n. I'm not sure I understand what you're asking. You should be able to do this already... http://angular-formly.com/#/example/advanced/custom-ids-and-names\n. Ah, I misunderstood your question. My apologies. That's exactly what I do as well. Thanks for your patience.\n. Note, that's not 100% what I do because I have situations where there are two of the same form for two different models in the same page at the same time. So that implementation would result in duplicate ids. So, instead, I simply use the model id as part of the field id.\n. Here's what mine looks like:\n\n``` javascript\nfunction azGetFieldId(options, model, scope) {\n  if (options.id) {\n    return options.id;\n  }\n  const index = getIndexOfIdInFields(options, scope);\n  return ['az-formly', getModelIdentifier(model), options.key, index].join('_');\n}\n\nfunction getModelIdentifier(model) {\n  let identifier = 'no-id';\n  if (model) {\n    const objectType = (model.constructor && model.constructor.name) || 'Object';\n    identifier = `${objectType}_${model.id || 'no-id'}`;\n  }\n  return identifier;\n}\n\n// sometimes you have two fields that use the same key. This ensures they don't have the same ID\nfunction getIndexOfIdInFields(options, scope) {\n  const fieldsWithTheSameKey = _.filter(scope.fields, field => field.key === options.key);\n  return _.indexOf(fieldsWithTheSameKey, options);\n}\n```\n\nResults in something like:\n\n```\naz-formly_${objectType}_${id}_${propertyName}_${index}\n```\n\nExamples:\n\n```\naz-formly_User_123453523_username_0  // existing User\naz-formly_User_no-id_username_0      // new User\naz-formly_Object_no-id_someProp_0    // new Object\n```\n. Looks awesome. Thanks a ton!\n. Man! I love this semantic-release thing. I don't even need to pull this. This fix will be released in a few minutes automagically :+1: \n. This is the problem... https://github.com/angular/angular.js/pull/11023\n\nPerhaps there's something we can do on the angular-formly side to make this easier (particularly for versions of angular where this PR wont make it). What do you think @ckniffen?\n. I feel like I've done that before and it worked out alright. We'd probably\nneed to add a watcher for the parent form's submitted state to call that.\nUnfortunately, there's no way to detect whether this watcher is necessary\n(most of the time it won't be), so we'd want it to be opt-in... The more I\nthink about it, the more I think it should probably be a plugin...\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Sep 14, 2015 10:21 AM, \"Caleb Kniffen\" notifications@github.com wrote:\n\n> @kentcdodds https://github.com/kentcdodds the issue with patching this\n> is that the formController does not expose the array of controls. There is\n> some conventions that can be used to infer if a property on the form\n> controller is a control. ckniffen/angular.js@e549f2d\n> #diff-1838ed9bd28307b6d42de98549826ae5R304\n> https://github.com/ckniffen/angular.js/commit/e549f2d70c93ce402d781bc16b557b5950b2cbb3#diff-1838ed9bd28307b6d42de98549826ae5R304\n> uses controls which is a locally scoped variable.\n> \n> The form could have all of its properties looped through and check every\n> one that doest have a key that starts with $ checked for the some NgModel\n> or FormController properties and then call $setSubmitted.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/465#issuecomment-140131665\n> .\n. No side effects. It will work fine.\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Sep 14, 2015 5:35 PM, \"chen bin\" notifications@github.com wrote:\n\n> what's the side effect if we use $scope instead?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/466.\n. Woah, 45-50 seconds is outrageous. Please make sure that you're following the [tips](http://docs.angular-formly.com/docs/tips) (disable api-check when deploying to production). This will speed things up considerably. How many fields do you have?\n. This is a bug. Thanks for pointing it out. The code that needs to be fixed is [here](https://github.com/formly-js/angular-formly/blob/master/src/directives/formly-field.js#L111-L115). Basically, we should be using the `$parse` service to set the value instead. This could be a pretty good `first-timer-only` issue. Are you up to setting up the tests like @koenweyn did for #423? If you want, you could even do the step-by-step :+1: this would be a huge help for a new comer!\n. Awesome! Thanks for the help @BarryThePenguin. Tweeting now!\n. My apologies @dfromero... I think there was some miscommunication and I didn't check @BarryThePenguin's work. Let me fix it really quick. Thanks.\n. @dfromero, you should be good to go now. Go ahead and pull the latest changes. I apologize for that. Looking forward to your implementation (I've already done it so I know it's possible now!).\n\nGood luck!\n. That's coming from commitizen. Unfortunately if there's a failure, it's not printing out the logs (cc @jimthedev). To see what the problem could be, run `npm run code-checks && npm run test && npm run check-coverage`. If you don't see any problems, then you'll have to craft your commit message by hand (following [the conventions](https://github.com/ajoslin/conventional-changelog/blob/master/conventions/angular.md)) and use `git commit --no-verify`. Let me know.\n. This was fixed by @dfromero. Thank you so much! The new version is being built and automatically released now and should be available soon. Thanks again @dfromero on your first ever PR :-)\n. And that @BarryThePenguin for helping get this set up.\n. You might consider creating a custom directive that wraps this one and uses `ng-model`. The problem is, without `ng-model`, then `formControl` wouldn't really make sense. It would technically not be a `formControl`. One thing you might try is to simply add an `ng-model` on it and see what happens... Either way, this particular directive is doing it wrong. They should use `ng-model`. Sorry, I don't think there's anything that angular-formly can do. If you need additional help, please follow the instructions here: http://help.angular-formly.com\n. Do you mind creating an example of what you're trying to accomplish? Please follow the instructions here: http://help.angular-formly.com\n\nThis will make it easier for you to get help. Because the github issues are reserved for bug reports and feature requests, I'm going to go ahead and close this issue. Thanks!\n. Sorry, life's crazy busy for me right now (new baby in the house). I don't\nhave time to help you right now. Could you please follow the instructions\nhere to get help? http://help.angular-formly.com\n\nGood luck!\n\nOn Fri, Sep 18, 2015, 9:17 AM GianlucaBobbio notifications@github.com\nwrote:\n\n> I think this thread is related:\n> \n> #304 https://github.com/formly-js/angular-formly/issues/304\n> \n> I just didn't want to make it work with HTML like that user did, because\n> I'm working with dinamyc possibles HTML layouts\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/470#issuecomment-141480538\n> .\n. What I meant was where you get help. Not in the GitHub issues. \u263a\n. Hmmm... My first question would be, you don't need the realtime for your field configurations right? Meaning, you're fine if the fields just load and they're not bound to firebase. If that's the case, then I recommend simply getting a snapshot of the data.\n\nShould only be a few lines of code, but once you do that, if you wouldn't mind [creating an example](https://www.youtube.com/watch?v=4dsXXTPET4A) (<-- video) for the website, I'd really appreciate it!\n\nEven better, create [a plugin](http://docs.angular-formly.com/page/plugins). Good luck! Thanks!\n. Thanks!\n. Sorry, life's crazy busy for me right now (new baby in the house). I don't\nhave time to help you right now. Could you please follow the instructions\nhere to get help? http://help.angular-formly.com\n\nGood luck!\n\nOn Fri, Sep 18, 2015, 4:16 PM Luddinus notifications@github.com wrote:\n\n> I need something similar to this:\n> http://angular-formly.com/#/example/advanced/validation-on-form-submit\n> \n> Maybe I'm misunderstanding something but in my case it is the server who\n> returns the error messages.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/473#issuecomment-141581993\n> .\n. Hi @tarkanlar, I'm sorry that I don't have time to help you right this minute (new baby in the house). But if you follow the instructions here you'll get the most help from others: http://help.angular-formly.com (you've already done most of that).\n\nThe github issues are reserved for feature requests and reporting bugs. So I'm going to go ahead and close this.\n. good luck!\n. Fantastic! This is perfect. Thank you very much!\n. I think we should update the example. You should first check if it's empty.\nIf it is, then don't do the validation check for email.\n\nOn Mon, Sep 21, 2015, 8:05 AM TheBekker notifications@github.com wrote:\n\n> Hi\n> \n> Not sure if this is a bug, or if its me doing somthing wrong.\n> I run into an issue when i use is.js for simple email validation, on a\n> field that has required: false set.\n> \n> The form is not valid, even though the field is empty and is not required.\n> \n> Here is a jsbin (just used the is.js integration example and changed)\n> http://jsbin.com/giledaxoji/edit?html,js,output\n> \n> Some way to fix this?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/476.\n> \n> ## \n> - Kent C. Dodds https://twitter.com/kentcdodds\n. Like this: http://jsbin.com/kebucas/edit?html,js,output :-)\n\nOn Mon, Sep 21, 2015 at 8:10 AM TheBekker notifications@github.com wrote:\n\n> That makes sense, but not sure how i would accomplish this?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/476#issuecomment-141994072\n> .\n> \n> ## \n> - Kent C. Dodds https://twitter.com/kentcdodds\n. I recommend that your tabs implementation uses `ng-if` to wait to compile the tab until it's shown. If you need help doing this, please follow the instructions here: http://help.angular-formly.com\n\nBecause this repo's github issues are reserved for bug reports and feature requests, I'm going to close this issue. Good luck!\n. Looks like ui-select isn't ready for angular 1.4.x yet. I've downgraded that example's angular to 1.3.19 and it's working great. Thanks for letting me know!\n. 140-500 fields is not _large-ish_. That's plain **gigantic**. I don't know what kind of user experience you're looking for, but I don't think that formly (or angular for that matter) can help you with the performance in that scenario. Out of curiosity, what version of angular and angular-formly are you using?\n. The problem is that you need all of those event listeners and watchers for your form to work properly.\n\nI would recommend:\n1. Upgrading to the latest angular-formly (there have been some significant performance optimizations made recently)\n2. Upgrading to the latest version of angular (though this can be more difficult if other dependencies you have aren't ready for it).\n3. Make sure you disable `api-check` in production as described in the [tips](http://docs.angular-formly.com/docs/tips)\n4. Try showing only pieces of the form at a time, hide the rest of it behind an `ng-if` which will cause the form to not render until it's shown.\n\nI hope these tips help!\n. Good luck! Sorry the tech doesn't quite do what you were looking for in the first place :-/\n. Thanks @msc654! That is correct. That would be the proper way to do this. Because github issues on this project are reserved for bug reports and feature requests, I'm going to go ahead and close this one. If you need more help, please follow the instructions here: http://help.angular-formly.com\n. Also, if you're already doing several of these things (I know some of you are), please consider volunteering. I really appreciate it!\n. That'd be cool! Thanks @SomeKittens :-)\n. Thanks @gkadillak and @msc654! I'll add you both to a read-only team. This means that you're on the formly-js team (yay! :confetti_ball:) but you wont have push access or issue closing access. You can (of course) submit pull requests and if you feel like you'd like to have push access, we can chat about that :-) Thanks!\n. Awesome @softEngJason! I'll add you to the collaborators. Thanks!\n. Awesome @BarryThePenguin! You're in!\n. @rentius2407, I'll add you as a collaborator. If you could help in the ways that I illustrate in the issue, that'd be awesome. Thanks!\n. Awesome @davincho! I'll add you to the collaborators. Please jump in as asked in the top comment on this issue :-)\n. @formly-js/angular-formly-collaborators and anyone else. I am changing jobs and wont be using angular-formly (or Angular) in my new position. I am therefore not going to be very effective maintaining angular-formly (read: [Open Source Stamina](https://medium.com/@kentcdodds/open-source-stamina-dafd063f9932)).\n\nSo I need someone to spearhead development and maintenance of the angular-formly project. Preferably someone who's using it on a regular basis at work. Maintaining this library should be relatively simple because it's so well tested and processes are so automated.\n\nCould someone please step up to the plate on spearheading this project?\n. @vijquick awesome! I'll add you to the @formly-js/angular-formly-collaborators-read team. If I see that you're helping others and submitting PRs, I'll add you to the @formly-js/angular-formly-collaborators team. Thanks!\n. Awesome @darleys! I'll do the same for you as I did for @vijquick. Thanks!\n. Anyone on the @formly-js/angular-formly-collaborators-read looking for an opportunity to help maintain angular-formly? There are several issues that are open that are simply questions. I generally try to point them in the right direction and then say something like:\n\n> Thanks for your interest in angular-formly. The best way to get help is by following the instructions at [help.angular-formly.com](http://help.angular-formly.com). The GitHub issues on this project are reserved for feature requests and bug reports, so I'm going to close this issue. See you on [chat](http://chat.angular-formly.com) and [Stack Overflow](http://question.angular-formly.com/)!\n. Done. Thanks!\n. Thanks @brutalcrozt! I'll add you to the collaborators-read team!\n. See https://github.com/formly-js/angular-formly/issues/638#issuecomment-209052672\n. @maliknur you got it! Adding you to the collaborators right now.    \n. @AjithJosephThomas, adding you to collaborators right now.\n. You've been invited.\n\nThere are about 15 members of @formly-js/angular-formly-collaborators-read team (with several pending invitations). I think that's plenty for now. If you all could please watch the repo and respond to issues and pull requests that'd be great. Once I find someone being actively and positively involved in these things I'll give you commit access.\n. the link is: http://help.angular-formly.com\n\nOn Tue, Sep 22, 2015 at 2:24 PM astromac notifications@github.com wrote:\n\n> @ckniffen https://github.com/ckniffen Thank you for the reply. I tried\n> the template example you provided to no effect. You mentioned creating an\n> example and referenced instructions. Was there a link that you intended to\n> provide?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/482#issuecomment-142408850\n> .\n> \n> ## \n> - Kent C. Dodds https://twitter.com/kentcdodds\n. And don't forget @ckniffen and @benoror :-)\n. How about October 14th? I could probably have some stuff prepared by then.\n. Ah, of course, that makes much more sense... How about the 10th?\n\nOn Thu, Sep 24, 2015 at 3:47 PM Randall Koutnik notifications@github.com\nwrote:\n\n> 14th's a Wednesday, I thought weekends might be best.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/483#issuecomment-143059376\n> .\n> \n> ## \n> - Kent C. Dodds https://twitter.com/kentcdodds\n. # Attention!\n\nHere are the official instructions and pleas for help :-)\n\nThanks @SomeKittens! That sounds fine. I can't promise that I'll be available _all_ day, but should be able to help most of the day.\n\nI'll get a few issues set up. At a high level, here are some things that I'd like:\n- Investigate an Angular 2 version (for the more ambitious of contributors)\n- Increase Test Coverage (both in the main repo and in the bootstrap templates)\n- Identify performance bottlenecks and optimize for them <-- this one's really needed (and also for the more ambitious contributors)\n- Resolve existing issues\n- Record screencasts of features, write blogposts/tutorials, improve documentation, etc.\n- Write plugins for common use-cases (see below)\n  - ng-messages integration\n  - Repeating sections\n  - Angular Material\n  - JSON Schema support\n  - Additional types for bootstrap that integrates with angular-ui-bootstrap\n  - Other ideas [here](http://docs.angular-formly.com/page/plugins)\n\nIf you're interested in writing a plugin, please see [this spreadsheet](https://docs.google.com/spreadsheets/d/1BU6KMQV2dOojqNxc_tyWGFu2Cf9UrOfOqnT-gk-lYeI/edit?usp=sharing) to look at some of the ideas and sign up for what you're interested in working on.\n\nI've recorded a screencast explaining some of these things a bit if you like to watch, check it out [here](https://www.youtube.com/watch?v=tAMJcOiFRD0&feature=youtu.be).\n\nAlso, if you're just getting started contributing to angular-formly, I just recorded a new screencast with instructions on how to contribute. [Here it is](https://www.youtube.com/watch?v=SXVgP1mt8TU). Note, I'm afraid I'm a bit long-winded in that one. You might also benefit from [the original](https://www.youtube.com/watch?v=QOchwBm9W-g&list=PLV5CVI1eNcJi7lVVIuNyRhEuck1Z007BH&index=5) (albeit a tad out-dated).\n\nAs always, please check the project's [CONTRIBUTING.md](https://github.com/formly-js/angular-formly/blob/master/CONTRIBUTING.md) and make sure to follow the [CODE_OF_CONDUCT.md](https://github.com/formly-js/angular-formly/blob/master/CODE_OF_CONDUCT.md)\n\nThanks for your help!!!\n. Nothing official. Just stuff in the examples page.\n. Hey, I had three family things come up for this weekend so I'm going to have to push this back two weeks. Is it alright if we move it to the 24th?\n. Thanks for letting me know! I've fixed it.\n. I know what the problem is. When the form is rendered, angular-formly will look through the given fields and set up `$watch`ers with them. But angular-formly doesn't watch your fields after that point. So when you change them or anything, that initialization step doesn't run for those new fields.\n\nOne solution to this is to prevent the form from being rendered until the fields are available, like so: http://jsbin.com/fudufaj/edit?html,js,console,output\n. I'm going to go ahead and close this. If you need more help, please follow the instructions here: http://help.angular-formly.com\n\nIf this doesn't actually solve the problem, let me know. Thanks!\n. @benoror, could you fix that example?\n. I agree. Adding `wrappers` support to `fieldGroup` would be a neat feature. I'll add that as a label and add `up-for-grabs` to invite people to contribute :-)\n. Answered [here](http://stackoverflow.com/a/32829953/971592). The GitHub issues in this project are reserved for reporting bugs and feature requests. In the future, please follow the instructions here to get help: http://help.angular-formly.com\n. You're good. You thought it was a feature request. No harm done :-) Good luck!\n. Awe, you're making me :blush: Thanks!\n. Hmmm... Yeah, if it's only happening locally I'm afraid there's not much I can do to help you :-(\n. Neat! Almost perfect. This just needs to be added to `dependencies` rather than `devDependencies` :-)\n. Also, I think there's something wrong with the build. Don't worry about it. I'll give  it a look\n. Be sure to comment when you've finished that. I wont be notified when you push changes.\n. Ah... Hmmm... You know what... I think I'd be alright with that if we could replace some of the other util methods of formly with lodash ones...\n. Hmmm... Yeah, I'm going to say that it's not worth it :-( Thanks anyway!\n. Could you please reproduce this issue here? http://issue.angular-formly.com/\n. Try this instead: http://jsbin.com/bogewe/edit?html,js,output\n\nBecause this is more of a question than a bug or a feature request, I'm going to close the issue. Please take this to [the chat](http://chat.angular-formly.com) or [stack overflow](http://question.angular-formly.com/) if you have further questions. Good luck!\n. Yeah, you definitely want to avoid anything that has to do with `$broadcast` :-)\n. I'm not sure I understand the problems with the current implementation. What do you mean by:\n\n> instead of much much later where we are forced to use setViewValue and setPristine and other workarounds so the formatters work?\n\nI'm not sure what you mean...\n. Oh, I think I see what you're saying. So by adding the `parsers` and `formatters` after the `ng-model` has been initialized, they don't run and we have to manually run them. So what you're suggesting is we have another directive and add them to the `ngModelController` as you would normally. We do this same thing with `validators` with the [`formly-custom-validation`](https://github.com/formly-js/angular-formly/blob/master/src/directives/formly-custom-validation.js) directive. We could do something similar with a `formly-parsers-and-formatters` directive... I think that would make the most sense and clean up some code too...\n. Yes, this is a bug. Feel free to [makeapullrequest.com](http://makeapullrequest.com)\n. You got it :-) https://github.com/formly-js/angular-formly/blob/master/CONTRIBUTING.md#watch-the-videos\n. This isn't an angular-formly issue, it's actually an angular issue. The problem is that without the `name` attribute, there's absolutely no way for me to get access to the `ng-model` controller. One thing you might consider is creating a directive which `require`s the `ngModel` controller and then attaches it to `scope.options`.\n\nGive me a second and I think I could give you a quick example.\n. Here you go! http://jsbin.com/mebiju/edit?html,js,output\n\nBecause this isn't something that we'll be implementing in the core of angular-formly, I'll close this issue. However, if you like to make [a plugin](http://docs.angular-formly.com/page/plugins) for formly, that'd be way cool!\n. Awesome! If you want a good kick-start on building an open source library, I recommend you checkout [my egghead.io series](https://egghead.io/series/how-to-write-an-open-source-javascript-library) :-)\n. :blush: yay!\n. Hi @Rorkal,\nI'm sorry that nobody's gotten to you until now. The github issues are reserved for bug reports and feature requests. If you're still having trouble with this, please follow the instructions here: http://help.angular-formly.com \n. Hi @Nishchit14! Thanks for using angular-formly :-) I've moved discussion for this issue to the bootstrap templates repo.\n. Terrific, did you just stumble upon this or did you find this as an actual bug?\n\nAlso, sorry that travis is breaking. Not sure why but it appears Travis is having a hard time starting up firefox :-(\n. This has been merged with [rebase-and-merge](https://github.com/kentcdodds/rebase-and-merge). Because the PR wasn't rebased to master, github doesn't recognize it as merged. Thanks for adding this!\n. Could you use `formState`? http://kentcdodds.jsbin.com/vowuso/edit?html,js\n\nNote, I changed the template for the `nested` type slightly and bound the checkbox to `formState` and updated the `hideExpression`. I think this is possibly what you're looking for.\n\nEither way, the GitHub issues on this repository are reserved for bug reports or feature requests. If you have further questions, please follow the instructions here: http://chat.angular-formly.com\n. :+1:\n\nOn Sat, Oct 24, 2015, 5:43 PM Caleb Kniffen notifications@github.com\nwrote:\n\n> I feel like maybe this ticket should be moved to the formly website\n> project. As it is an enhancement request for an existing example.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/507#issuecomment-150872510\n> .\n> \n> ## \n> - Kent C. Dodds https://twitter.com/kentcdodds\n. It's not available in the repository. We're using [`publish-latest`](http://npm.im/publish-latest) which pushes the releases to [the `latest` branch](https://github.com/formly-js/angular-formly/tree/latest) ([more info](https://medium.com/@kentcdodds/why-i-don-t-commit-generated-files-to-master-a4d76382564)).\n\nIn any case, `publish-latest` had a problem and that's why the last release didn't work out. This has been resolved and a new release is being published as we speak :-)\n. This should be relatively easy to fix. Mind submitting a PR?\n. Sorry, by PR I meant [Pull Request](https://help.github.com/articles/using-pull-requests/). Occasionally I'll reserve issues for [first timers only](https://medium.com/@kentcdodds/first-timers-only-78281ea47455) would you like me to reserve this one for you and help you know what to do?\n. Awesome! I love the initiative! I'll get a test written for you as soon as possible (probably tomorrow hopefully)\n. Hey @chrisheninger! Have at it! Here are [the tests](https://github.com/formly-js/angular-formly/blob/3bba183835c91866c5a1377f64fe31a3006038bd/src/directives/formly-field.test.js#L1324-L1356).\n\n[This line](https://github.com/formly-js/angular-formly/blob/3bba183835c91866c5a1377f64fe31a3006038bd/src/directives/formly-field.js#L343) and [this line](https://github.com/formly-js/angular-formly/blob/3bba183835c91866c5a1377f64fe31a3006038bd/src/directives/formly-field.js#L351) need to take an array of `scope.fc`s into account. I recommend you utilize the `arrayify` method (which you have access to in the scope of that function) which will take an argument and convert it to an array if it's not already one. Then call something like this on it: `.some(f => f.$invalid);` (or `$touched` for the other case).\n\nOne thing I just realized my test case doesn't cover is [this line](https://github.com/formly-js/angular-formly/blob/3bba183835c91866c5a1377f64fe31a3006038bd/src/directives/formly-field.js#L350) and [this line](https://github.com/formly-js/angular-formly/blob/3bba183835c91866c5a1377f64fe31a3006038bd/src/directives/formly-field.js#L348). If you want to take a whack at writing tests for those scenarios too that'd be cool, otherwise let me know and I'll write up tests for those next time I get a chance. Good luck!!!\n. I've added a few more tests, but it still doesn't cover everything. I'll be honest, this one's a bit more complex. Don't feel bad if you have a hard time with the implementation.\n. Let's hold on the PR  now and get this all done in one. I'll give your commits a closer look tomorrow. I'm glad this is a learning experience for you! That's the point :-)\n. Just looked at your implementation. Do fast, so good :+1:\n. Sorry, autocorrect... I'm meant \"So far, so good\"\n. The tests don't cover everything that needs to be covered. I'll try to get the remaining test or two written. But basically anything in that function that references `scope.fc` needs to handle situations where `scope.fc` is an array.\n. Looks pretty solid. I'll need to get to a computer to work out helping with that last test. Thank you very much!\n. @bjspencer, looking at your solution I think that it's better than what I was planning on. So you'll want to change the test that you have skipped. Instead of\n\n``` javascript\nexpect(spy).to.have.been.calledWith(sinon.match.array, sinon.match.array)\n```\n\nDo:\n\n``` javascript\nexpect(spy).to.have.been.calledTwice // once for each form control.\n```\n\nThat should do it :-) Then make a PR and I'll merge it :D\n. @bjspencer's PR #553 just got merged. A new release will be pushed out automatically in a few moments :+1: \n. Please try it out and report back if it's not behaving as you expect. Until then, I'm closing this. Thanks @bjspencer and @chrisheninger!\n. Have you tried providing a function to `errorExistsAndShouldBeVisibleExpression` rather than simply a string? :-)\n. I think that really depends on your use case. For example, what do you want to have it do when two of the fields have `required` in their `$error`? Show two? Show one? Either way, I think you might be able to have a function you call to get the `$error` object rather than simply referencing it there... Just really depends on your specific use case I think.\n. We could probably cache [this](https://github.com/formly-js/angular-formly/blob/460ead54188c6549b66e07ff5b939a87377d1027/src/directives/formly-field.js#L66). Where did you see that it can take upwards of a couple of seconds?\n. Wow, this is great. Thank you!\n. Thanks for your help and kind words @dannycallaghan :-)\n\nNote, if all you want to do is override the template and add a controller you could define a new type that `extends` the `input` type, like so:\n\n``` javascript\nformlyConfigProvider.setType({\n    extends: 'input',\n    name: 'myInput',\n    template: require('YOUR_INPUT_TEMPLATE.html'),\n    // don't need a wrapper because it will inherit that from the input type \n    controller: ['$scope', function ($scope) {\n        if ($scope.to.type && $scope.to.type === 'date') {\n            /* \n            Do your stuff here, something like:\n\n            var currentModelVal = $scope.model[$scope.options.key];\n            if (typeof (currentModelVal) === 'string'){\n                $scope.model[$scope.options.key] = new Date(currentModelVal);\n            }\n            */\n        }\n    }]\n});\n```\n. Also, I'm going to close this issue and direct you to the instructions at http://help.angular-formly.com\n\nThe github issues are reserved for feature requests and bug reports. We can help you better if you follow those instructions :-) cheers!\n. There are plenty of examples on the website that demonstrate using angular-formly with a custom directive. The best example is probably the [UI-Datepicker](http://angular-formly.com/#/example/integrations/ui-datepicker) one.\n\nI'm going to close this because the github issues are reserved for bug reports and feature requests. If you have further questions or need help, follow the instructions at http://help.angular-formly.com\n. I should note, the implementation of this is quite simple, but if you have a hard time contributing, don't feel bad. Getting into open source is not easy, and setting up someone else's project isn't either if you're not used to the tools it uses. Let me know if you have any trouble! I'm here to help!\n\nAlso, don't feel bad that the issue itself is small. The goal of first-timers-only is more to get you acquainted with the process of contributing than it is to figure out how to implement something cool. The process of getting your first contribution is the hard part. You can figure out implementation details once you've nailed down the contributing piece :-) Good luck!\n. Almost perfect @julianaramburu! The convention requires a `:` between the `scope` and the `subject`. And it also requires blank lines between the subject and the related issues. So yours should be:\n\n```\nfix(extras): Remove explicitAsync property\n\ncloses #516\n```\n\nIf you could kindly fix this, I would appreciate it. If you need help doing that, see [this StackOverflow answer](http://stackoverflow.com/a/179147/971592). Thanks! Sorry that the script isn't working for windows right now :-(\n. If you look at the instructions, you'll want to do a force push.\n\nAnother thing you could do is just close this PR, and try again :-)\n. I think I've fixed the windows issues, if you start over, everything should go much smoother :-)\n. This is perfect! Thank you for your contribution :-) Welcome to the open source community :confetti_ball: I hope this was a positive learning experience for you. What did you think?\n. \ud83d\udc4d that's great!\n. This is perfect! I merged it locally because I wanted to rebase it to the latest of master. Unfortunately because of this, GitHub doesn't recognize it as merged. So I'll close this PR, but never fear! [Your commit](https://github.com/formly-js/angular-formly/commit/b548e56f3801a2e6650c69b01eff930adf321763) is in our repo [git history](https://github.com/formly-js/angular-formly/commits/master)! Welcome to the wonderful world of open source!\n. From the look of that error, is failing because the version of node you\nhave is very very old and can't run even moderately modern JavaScript.\nCould you update to the latest version of node (or even 0.12.x) and try\nagain? I recommend using nvm. Let me know! Thanks!\n\nOn Mon, Oct 19, 2015, 4:40 PM Adam Morgan notifications@github.com wrote:\n\n> I had a brief back and forth with @kentcdodds\n> https://github.com/kentcdodds through Twitter about npm run test or npm\n> start not working after a fresh clone and npm install. Here's what you\n> initially asked for:\n> - System: Mac OSX Yosemite\n> - npm: 3.3.5\n> - node: 0.10.40\n> \n> As I mentioned on Twitter, this is happening when I run npm run test\n> after npm install.\n> \n> Here's the actual error I'm hitting:\n> \n> \u21d2  npm run test\n> \n> > angular-formly@0.0.0-semantically-released.0 test /Users/adammorgan/Desktop/angular-formly\n> > cross-env COVERAGE=true NODE_ENV=test karma start --single-run\n> \n> -- recording coverage --\n> \n> /Users/adammorgan/Desktop/angular-formly/node_modules/deindent/index.js:4\n>   let args = [].slice.call(arguments, 1);\n>   ^^^\n> 16 10 2015 16:28:49.524:ERROR [config]: Invalid config file!\n>   SyntaxError: Unexpected strict mode reserved word\n>     at Module._compile (module.js:439:25)\n>     at Module._extensions..js (module.js:474:10)\n>     at Object.require.extensions.(anonymous function) [as .js](/Users/adammorgan/Desktop/angular-formly/node_modules/babel-core/lib/api/register/node.js:214:7)\n>     at Module.load (module.js:356:32)\n>     at Function.Module._load (module.js:312:12)\n>     at Module.require (module.js:364:17)\n>     at require (module.js:380:17)\n>     at Object.<anonymous> (/Users/adammorgan/Desktop/angular-formly/other/webpack.config.es6.js:7:18)\n>     at Module._compile (module.js:456:26)\n>     at normalLoader (/Users/adammorgan/Desktop/angular-formly/node_modules/babel-core/lib/api/register/node.js:199:5)\n>     at Object.require.extensions.(anonymous function) [as .js](/Users/adammorgan/Desktop/angular-formly/node_modules/babel-core/lib/api/register/node.js:216:7)\n>     at Module.load (module.js:356:32)\n>     at Function.Module._load (module.js:312:12)\n>     at Module.require (module.js:364:17)\n>     at require (module.js:380:17)\n>     at Object.<anonymous> (/Users/adammorgan/Desktop/angular-formly/other/karma.conf.es6.js:12:23)\n> \n> Please let me know if there's anything else I can provide to help. Thanks!\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/522.\n> \n> ## \n> - Kent C. Dodds https://twitter.com/kentcdodds\n. Also, here's a [jsbin](http://jsbin.com/rokoci/edit?html,js) with the working version. Notice that it references v7.1.2 explicitly.\n. I think I'll give this one a look.\n. Here's the original reproduction steps @isaac-l gave the other day\n\n> Is there a known issue with http://angular-formly.com/#/example/other/matching-two-fields ? As far as I can tell, it doesn't work as expected\n> For example:\n> 1. Set email to a@b.c\n> 2. Set confirm to a@b.cd (Causes validation error as expected)\n> 3. Set email to a@b.cd (Should be valid, but still shows a validation error)\n> Likewise, setting valid values then changing Email doesn't cause validation to fail\n. Try this. Add the [`validateOnModelChange` extra](http://docs.angular-formly.com/docs/field-configuration-object#extras-object) to both fields. Then add the [`allowInvalid` ng-model-option](http://docs.angular-formly.com/docs/field-configuration-object#modeloptions) to both as well.\n\nThe issue is that when the value is invalid, the model value will be `undefined`, so by doing `allowInvalid` it will update the model value even when it's invalid. This means that your validator will be able to know what the value of the other field is.\n. Feedback:\n1. Looks good\n2. Don't use `_angularFix2['default']` because that's the transpiled code, just use `angular` and babel will take care of the rest\n\nFeel free to open a PR.\n. :+1: @gillchristian!\n. This should totally work. Could you follow the instructions here to give a reproducible example? http://help.angular-formly.com\n. Hi @iJungleboy, this is totally possible with angular-formly, so I'm going to assume that you just need help getting things set up. Because of this, please follow the instructions at http://help.angular-formly.com and I'll go ahead and close this issue (github issues on this repo are reserved for bug reports and feature requests). See you on chat!\n. If you take a look at how `onChange` is called, you'll see why you're experiencing this. It's called with: `model[options.key], options, this, $event` which is roughly equivalent to: `$modelValue, options, scope, $event`. If you want the `$viewValue`, then you can get it from `scope.fc.$viewValue`.\n\nI'm going to close this issue because issues on this repo are reserved for big reports and feature requests. If you need more help, go to http://help.angular-formly.com\n\nAlso, what language is that code you showed? It's not JavaScript and it looks unlike any CoffeeScript I've ever seen...\n. No, the real solution is to set the value using the $parse service. We do\nthis for default values.\n\nOn Fri, Oct 30, 2015, 6:19 AM MCKRUZ notifications@github.com wrote:\n\n> I believe this is related to the same issue I'm having with model\n> resetting. Here is what I think is happening.\n> \n> function resetModel() {\n> $scope.model[$scope.options.key] = $scope.options.initialValue;\n> if ($scope.options.formControl) {\n> if (_angularFix2['default'].isArray($scope.options.formControl)) {\n> _angularFix2['default'].forEach($scope.options.formControl, function\n> (formControl) {\n> resetFormControl(formControl, true);\n> });\n> } else {\n> resetFormControl($scope.options.formControl);\n> }\n> }\n> }\n> \n> Inside this code block we set $scope.model[$scope.options.key] like so.\n> Unfortunately if you have a key that is dot delimited it doesn't find the\n> value. We should be using some sort of recursive find like this one.\n> \n> function _setNested(path, value, obj) {\n> var schema = obj; // a moving reference to internal objects within obj\n> var pList = path.split('.');\n> var len = pList.length;\n> for (var i = 0; i < len - 1; i++) {\n> var elem = pList[i];\n> if (!schema[elem]) schema[elem] = {}\n> schema = schema[elem];\n> }\n> \n> ```\n>     schema[pList[len - 1]] = value;\n> }\n> ```\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/527#issuecomment-152522247\n> .\n> \n> ## \n> - Kent C. Dodds https://twitter.com/kentcdodds\n. That would do the trick! Do you want to create a PR with a test and\nimplementation? :-) :+1:\n\nOn Fri, Oct 30, 2015, 6:52 AM MCKRUZ notifications@github.com wrote:\n\n> So something like\n> \n> var setter = $parse($scope.options.key).assign;\n> setter($scope.model, $scope.options.initialValue);\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/527#issuecomment-152531451\n> .\n> \n> ## \n> - Kent C. Dodds https://twitter.com/kentcdodds\n. If so, see the CONTRIBUTING.md file\n\nOn Fri, Oct 30, 2015, 6:53 AM Kent C. Dodds kent@doddsfamily.us wrote:\n\n> That would do the trick! Do you want to create a PR with a test and\n> implementation? :-) :+1:\n> \n> On Fri, Oct 30, 2015, 6:52 AM MCKRUZ notifications@github.com wrote:\n> \n> > So something like\n> > \n> > var setter = $parse($scope.options.key).assign;\n> > setter($scope.model, $scope.options.initialValue);\n> > \n> > \u2014\n> > Reply to this email directly or view it on GitHub\n> > https://github.com/formly-js/angular-formly/issues/527#issuecomment-152531451\n> > .\n> > \n> > ## \n> > - Kent C. Dodds https://twitter.com/kentcdodds\n> \n> ## \n> - Kent C. Dodds https://twitter.com/kentcdodds\n. Run `npm run test:debug` and it should open your tests in chrome. Then click the Debug button in that chrome window and it should open a new tab. Then open your developer tools in that tab and refresh the team. It should stop at your breakpoint.\n. Whoops, miss-tapped\n. Maybe check if it's a number first and if it is, then don't use the parse service and do what it used to do.\n. Probably not! @eliagentili, could you verify this with the latest version of angular-formly?\n. cc @benoror. Could you look into this? It may be something we need to work out in formly.\n. I definitely want to see #486 implemented. Happily accepting PRs :-)\n. Fantastic! Perfect. Thanks.\n. Yes, use ng-if to hide your formly-form until your fields are there.\nSomething like: ng-if=\"vm.fields.lenth\" should do the trick.\n\nOn Fri, Oct 30, 2015, 8:57 AM thefrontfactory notifications@github.com\nwrote:\n\n> Hi,\n> It seems that fieldTransform functions are only run once when setupFields\n> is executed.\n> Because I am retrieving fields asynchronously, the transform are done when\n> fields are not yet present.\n> \n> Is there a way or a known workarround to allow transforms to be done when\n> fields are updated?\n> Thanks for your help\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/530.\n> \n> ## \n> - Kent C. Dodds https://twitter.com/kentcdodds\n. I'm afraid that I don't know how to help you without more information. Please follow [these instructions](http://help.angular-formly.com) to get help.\n\nBecause the GitHub issues are reserved for bug reports and feature requests and this is more of a support issue, I'm going to close this one. Good luck! See you on chat!\n. Hi! Thanks for working on this. What you have is great. The reason the build is failing is because your code doesn't pass our linting rules. Could you please run `npm run eslint` and fix all the issues mentioned, then please amend your commit with this changes and force push (so the PR has only one commit). Let me know if you need help with this. Thanks again!\n. Looks pretty good. If you could address my comment that would be great. Also, I prefer to not have multiple commits for a single pull request. If you could make your change (to remove the `if` if necessary), then do this:\n\n```\ngit checkout -b reset-with-parse\ngit reset --soft HEAD^^\nnpm run commit\ngit push -u --force origin reset-with-head\n```\n\nThanks!\n. Alright, what I would recommend is create a new branch based on the formly-js master. Then copy your changes over to that new branch. Do a single commit, and push that branch up. Then create a new pull request for that branch.\n. I'm sorry you're having trouble with this @MCKRUZ :-( Let me know if you need more help!\n. Thanks! Looks perfect. A new release should be out in a minute or two.\n. Hi @yahyaKacem. Sorry I never came to give you some feedback. You might look into [`extras.validateOnModelChange`](http://docs.angular-formly.com/v7.2.3/docs/field-configuration-object#extras-object) on the field you wish to validate rather than that `onChange` function on the field you're changing.\n\nOther than that I think your solution looks pretty good. In the future when you need help, please follow the instructions here: http://help.angular-formly.com. The GitHub issues on this project are reserved for bug reports and feature requests. Have a nice day!\n. :-( your other PR had tests :-( also, your commit message needs to have a scope: `fix(formly-field)` \n. ping?\n. Perfect! Thanks! High five!\n. Should be out now!\n. Yeah, but api-check isn't part of Angular at all. Think of it like jQuery or lodash. Order matters.\n. Thanks for the issue and the diff. I'm mostly concerned with the comment `// Avoid flicker when hideExpression promises resolve to true`... I feel like setting `field.hide = true` would cause a flicker if the field is not hidden and the promise resolves to `false`...\n\nMy inclination is to not do this and instead have you use a work-around for this. Perhaps something like this: https://jsbin.com/pepode/edit?html,js,output\n\nIf this is sufficient for you, please close this issue. If not, maybe there's another way. Thanks!\n. I see, it seems like your use case is quite specific. I would actually recommend that you use a router like `ui-router` or `ng-router` and utilize the `resolve` functionality to resolve that asynchronous logic into your controller (so your controller isn't even loaded until that request has finished) and then you'll be able to simply assign the result to the `hide` property making your controller much easier to understand/maintain/etc.\n\nEither way, the flicker would be a problem for anyone who has the hide property being dynamic as the user interacts with the form and I can't do that to the rest of the users.\n\nSomething else you could do is put this particular field into its own form hidden behind an `ng-if` and do the async stuff outside of formly entirely.\n\nEither way, I don't think we'll be adding this to formly. If you need more help, please follow the instructions here: http://help.angular-formly.com\n. Will do, thanks for the suggestion! And thanks for using formly :-)\n. There is not. This has been asked for quite a bit. My guess is you want to know when it's done rendering because it's taking a long time to render. Please make sure that you're following the [production tips](http://angular-formly.com/#/example/other/production-tips) to make sure that you disable some of the developer related things which should speed things up quite a bit for you. After that, you'll just have to make sure that your design is conducive to a performant form.\n. No plans, sorry\n. Good find. Here's the line of code that causes the problem. What do you think we could/should do about it? https://github.com/formly-js/angular-formly/blob/master/src/directives/formly-form.js#L293\n. I don't know if that would actually work... I don't think you can use `$parse` in a string expression like that.  Honestly, I think this is sort of an edge case and unless we can accomplish a solution that avoids the following two issues, I don't want to worry about it:\n1. It adds complexity to the codebase\n2. It reduces performance for the common case\n\nI don't know if there's a satisfactory way to accomplish both of those for this case.\n. I think that's acceptable. Feel free to submit a PR :-)\n\nOn Mon, Nov 9, 2015, 6:28 AM MCKRUZ notifications@github.com wrote:\n\n> Hey Kent, sorry it looks like I posted the wrong code.\n> \n> This is my fix. I tried it and it works locally\n> \n> var watchExpression = watcher.expression || 'model[\\'' +\n> field.key.split('.').join('\\'][\\'') + '\\']';\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/542#issuecomment-155061290\n> .\n> \n> ## \n> - Kent C. Dodds https://twitter.com/kentcdodds\n. No, in the case of a nested key, angular-formly will actually change `ng-model=\"model[options.key]\"` to `ng-model=\"model.your.nested.key\"`. But only when you specify a nested key.\n. [Here's the function](https://github.com/formly-js/angular-formly/blob/master/src/run/formlyNgModelAttrsManipulator.js#L46-L50) that does it and [here are the tests](https://github.com/formly-js/angular-formly/blob/master/src/run/formlyNgModelAttrsManipulator.test.js#L181-L193)\n. Yes, I think that should work.\n. Yes, that should do it! I triple checked it this time. Thanks!\n. Boom! This is fixed in `7.3.4`. Thanks @MCKRUZ!\n. Thanks for your interest in angular-formly. The best way to get help is by following the instructions at [help.angular-formly.com](http://help.angular-formly.com). The GitHub issues on this project are reserved for feature requests and bug reports, so I'm going to close this issue. See you on [chat](http://chat.angular-formly.com) and [Stack Overflow](http://question.angular-formly.com/)!\n. Thanks for seeing that @pdemilly! @shealan, I highly recommend you look into [ng-annotate](https://github.com/olov/ng-annotate) to avoid problems like this.\n. There are several approaches you could take but probably the most effective would be to do:\n\n``` javascript\n{\n    \"type\": \"input\",\n    \"key\": \"type\",\n    \"defaultValue\": \"Static\",\n    \"templateOptions\": {\n      \"type\": \"hidden\",\n      \"label\": \"Hidden Type\"\n    }\n}\n```\n\nwhich will result in something like:\n\n``` html\n<input type=\"hidden\" ng-model=\"model[options.key]\" />\n```\n\nAnd inputs where the type is hidden will not be shown.\n\nAlternatively, you could use CSS to hide the field:\n\n``` javascript\n{\n    \"type\": \"input\",\n    \"className\": \"display-none\",\n    \"key\": \"type\",\n    \"defaultValue\": \"Static\",\n    \"templateOptions\": {\n      \"type\": \"hidden\",\n      \"label\": \"Hidden Type\"\n    }\n}\n```\n\nwith:\n\n``` css\n.display-none {\n  display: none\n}\n```\n\nI hope this helps.\n\nThanks for your interest in angular-formly. The best way to get help is by following the instructions at [help.angular-formly.com](http://help.angular-formly.com). The GitHub issues on this project are reserved for feature requests and bug reports, so I'm going to close this issue. See you on [chat](http://chat.angular-formly.com) and [Stack Overflow](http://question.angular-formly.com/)!\n. Also, the commit message isn't quite right. Please review [the commit message convention](https://github.com/ajoslin/conventional-changelog/blob/master/conventions/angular.md). Thanks again!\n. Could you produce an example with [issue.angular-formly.com](http://issue.angular-formly.com/). Thanks!\n. Actually, this is a duplicate: https://github.com/formly-js/angular-formly/issues/510\n. Please check out the conversation over there. You'll need to adjust your implementation a bit.\n. Nope, you're good. I think that @chrisheninger could use some help with that actually if you want to collaborate on #510 that'd be cool.\n. Looks like some of the tests are failing. Could you look into that?\n. Looks totally solid! Thanks for doing this :-)\n. A new version should be [released automatically](https://egghead.io/lessons/javascript-how-to-write-a-javascript-library-automatically-releasing-with-travisci?series=how-to-write-an-open-source-javascript-library) in a few minutes :+1: \n. Thanks for the PR! I hate to do this to you but do you think you could submit it one more time? We release angular-formly automatically using semantic-release which requires certain conventions for commit messages. See [Pull Requests](https://github.com/formly-js/angular-formly/blob/master/CONTRIBUTING.md#pull-requests) in CONTRIBUTING.md to learn about that.\n\nFor this change, a good commit message would be:\n\n```\nfix(formlyValidationMessages): handly falsy values\n\nThis should fix setting {min: 0} in field templateOptions to return proper message\n```\n\nThanks for your patience and your contribution! :smile: \n. It's perfect! Thanks for contributing! I'll merge this and it'll be [automagically released](https://egghead.io/series/how-to-write-an-open-source-javascript-library) soon :-)\n. My guess is that this is an odd behavior with how ui-bootstrap deals with focus for modals. Here's a solution that uses `expressionProperties` which will set the focus value after the form is initially digested: https://jsbin.com/qanumi/1/edit?html,js,output\n. This should be possible. But probably not easy. Feel free to submit a PR.\n. Yeah, `parseGet` is to allow for nested keys, like: `name.first`, so it's using the `$parse` service. My guess in the `$parse` service doesn't like a preceding number in a property getter or something. @MCKRUZ, do you think you could look into this?\n. I think that if the model is already an array, then angular will treat it like an array. Otherwise (if it's an object or undefined) angular will make it an object and set the property there. @dannycallaghan can you try initializing your model to an object and seeing if that works?\n. Actually... Yeah, that wont work... Nevermind...\n\n@MCKRUZ, I think that your solution should work pretty well. Just make sure to write/run tests and check the code coverage report generated in the `coverage/lcov-report` folder to make sure you're covering what you think you are :-) Thanks!\n. All the thanks is to @MCKRUZ on this one. I just clicked the merge button.\n. Yep, that's latest. @dannycallaghan, do you fancy making a pull request to add skipped test cases for your keys?\n. What if we changed it to:\n\n``` javascript\nfunction shouldNotUseParse(key) {\n  return angular.isNumber(key) || !containsSelector(string)\n}\n\n// maybe we should put these in formlyUtils...\nfunction containsSelector(string) {\n  return contains(string, '.') || (contains(string, '[') && contains(string, ']'))\n}\n\nfunction contains(a, b) {\n  if (!a || !a.indexOf) {\n    return false\n  }\n  return a.indexOf(b) !== -1\n}\n```\n\nWhat do you think?\n. Guessing it's been resolved.\n. You'll have to write custom code to track whether the current value is equal to the initial value. angular-formly adds an `initialValue` to all of your field's options (angular-formly uses it to reset the form). You could use that to determine the changed state of a given field. A function like this would do it for you:\n\n``` javascript\nfunction fieldHasChanged(field) {\n  return field.formControl.$modelValue !== field.initialValue\n}\n```\n\nThanks for your interest in angular-formly. The best way to get help is by following the instructions at [help.angular-formly.com](http://help.angular-formly.com). The GitHub issues on this project are reserved for feature requests and bug reports, so I'm going to close this issue. See you on [chat](http://chat.angular-formly.com) and [Stack Overflow](http://question.angular-formly.com/)!\n. Thanks @MCKRUZ :-)\n. Fantastic! Thank you!!! \ud83c\udf89 \ud83c\udf8a\n. Hi @david-nelson-moscow, I don't personally have any plans to work on an Angular 2 version of angular-formly. That (of course) does not preclude anyone else from working on it.\n\nOriginally I had planned on making an Angular 2 version of angular-formly. However with so many things competing for my time, I can't justify spending time on it. I was able to justify working on angular-formly before because I was using it at work and I used Angular heavily. But I will soon be changing jobs and will be using React. So I no longer have a use case for angular-formly.\n\nPerhaps someone on the @formly-js/angular-formly-collaborators or @formly-js/angular-formly-collaborators-read team will be up to the challenge.\n\nThanks for asking!\n. Awesome! Thanks!\n. Fantastic. Thanks for working on this! Merging.\n\nAs a friendly reminder, the issue number should be at the bottom of the commit per [our commit convention guidelines](https://github.com/ajoslin/conventional-changelog/blob/master/conventions/angular.md). So this one should be:\n\n```\nfix(formly-field): Add better detection of nested keys\n\nCloses #566\n```\n. Thanks again!\n. `resetModel` should update those values. Could you please reproduce your issue using [issue.angular-formly.com](http://issue.angular-formly.com/)? It will help us determine what exactly the problem is that you're describing and how it could be fixed. Thanks!\n. Looks like after we call `resetModel` on all the individual fields ([right here](https://github.com/formly-js/angular-formly/blob/917ec263ddcc4902fa2cb9dc167da0734f9d5ed6/src/directives/formly-form.js#L207-L215)) we need to set the form's `touched` and `pristine` state like we do with the individual fields ([here](https://github.com/formly-js/angular-formly/blob/8648c16c0a927ccbdf56861280a3680396041402/src/directives/formly-field.js#L202-L215)).\n\nI'm open to a pull request for this! Anyone's welcome to try. Just follow [these instructions](https://github.com/formly-js/angular-formly/blob/master/CONTRIBUTING.md#pull-requests)\n. This issue should be closed I think. Let me know if you experience otherwise!\n. @janneman001 could you provide an example of this behavior?\n. Here you can use [this](http://help.angular-formly.com) as a starter, then just post the link in here :+1: \n. In the last major version `expression` was changed to `statement`. Here's a working example:\n\nhttps://jsbin.com/purobo/edit?js,console,output\n. I've updated the example. Thanks!\n. Thank you! :-) this should be released automatically in a few minutes.\n. Looks like somehow I forgot to add the webpack Uglify plugin to the webpack config when I changed some stuff. If someone would like to PR it I'll merge when I land :airplane: :-)\n. Hi @benoror, the uglify loader actually has some problems with it. We should actually remove it from the devDependencies. We should instead use the [Uglify Plugin](http://webpack.github.io/docs/list-of-plugins.html#uglifyjsplugin)\n. Thanks @benoror! :+1: \n. Actually, sorry, could you make this a `fix` rather than a `chore`? That way we get an automatic release\n. Fantastic. Thank you!\n. Dying is probably the more appropriate term: https://gofore.com/ohjelmistokehitys/stop-using-bower/\n. Actually, you don't need to use `browserify`, `webpack` or any other module packager even if you use `npm`. You can just reference the built files just as you would without those tools. Most packages distribute a stand-alone distributable that works in the browser (like angular-formly).\n\nAs for the location of the installed files, as long as they're listed in your `package.json` `dependencies` then they'll be in the root of `node_modules` (regardless of npm version). And if someone moves where the distributable file goes then that's a breaking change (and would happen with `bower` as well).\n\nSo, for example, for angular-formly, you could use npm by installing it like so:\n\n``` bash\n$ npm i angular-formly --save\n```\n\nThen in an html file you could reference that like so:\n\n``` html\n<script src=\"node_modules/angular-formly/dist/formly.js\"></script>\n```\n\nAnd that'd work just perfectly :-)\n. @dmitriz, I'm not sure I understand what you're describing, but if I had to guess, you're using npm in the wrong way.\n\n> When you say \"as long as they're listed in your package.json dependencies\", do you mean -- before the installation?\n\nNo, they don't need to be there before installation. When you install the module explicitly (either from an `npm install angular-formly` or from having it in your `package.json`), it'll go in the root of your `node_modules` directory. \n\nNot sure what to tell you, but I'm pretty sure that you're not using npm correctly if you're experiencing that.\n. Yeah, generally every project that depends on `npm` or `bower` will have a `package.json` or `bower.json` (respectively) to list dependencies. Then all the dependencies for the project will be added to as a sibling directory to the `package.json` (in the case of `npm`) called `node_modules`. If you're wanting to spread `node_modules` directories all over your project, that's a pretty unconventional way to use `npm`.\n. I'm not sure what the webhook is for. This gulp task will run as part of our automated releases on travis. What's the purpose of the webhook?\n. Merged and webhook created. Let me know if you need anything else!\n. That's one way to do it. I'd welcome a PR to add that :-)\n. Sorry it took so long to get back! It'll be in [attributeOnly](https://github.com/formly-js/angular-formly/blob/master/src/run/formlyNgModelAttrsManipulator.js#L185) because (as @SteveShaffer mentioned) there is no angular equivalent (like `ng-step`).\n. Hi @rayhooker. Thanks for the question. I actually just recently answered this on my [AMA](http://ama.kcd.im) [here](https://github.com/kentcdodds/ama/issues/66#issuecomment-169456411). Let me know if you have further questions :-)\n. New release is out. But I guess it doesn't fix this issue still exists.\n. This looks pretty good. Please just use `extras` as I mention in the inline comment and I'd prefer that this new API is tested. Thanks!\n. P.S. Let me know when you update the PR (github wont notify me).\n. Thanks for doing this. The tests are great. I wonder if it might be easier if  `manualModelWatcher` could be a string or function itself. This way you could have a single watcher that applies to all fields. I feel like this could accomplish the need and we already have an API for specific watchers on fields.\n. With that, do we really need the extras watcher? We already have a mechanism for adding a watcher to a field... I'd rather avoid adding another way to do the same thing.\n. Right. What I'm saying is for that second bullet point, you can use the `watcher` property to add custom watchers. It basically does the same thing as the watch is extras\n. Sorry. I guess I didn't understand your problem well enough. I still think that it would be valuable to be able to disable the deep watch and provide a custom watch function for the whole form.\n. Ah, indeed... Hmmm.... I wonder if there's a way we could enhance the existing API to account for the use case\n. I like your first suggestion. I think that we could implement it in a backward compatible way and I don't think that it is terribly confusing:\n\n``` javascript\n{\n  ...\n  watcher: [{\n    expression: 'model.type',\n    runFieldExpressions: true,\n  }]\n},\n{\n  ...\n  watcher: [{\n    expression: 'model.type',\n    listener: () => {},\n    runFieldExpressions: true,\n  }]\n}\n```\n\nI think that both of those would run the field expressions, but the second field would also run the custom listener.\n\nI really don't see anything bad with this approach. The idea is that it totally separates disabling deep model watching (or specifying custom watcher) from custom field watchers which I think is a good call.\n. That's probably a little bit too magical I think. Maybe if we added another property to `options` that was `watchAllExpressions` in addition to `disableModelWatcher` or something like that. I just want the API to describe what's going on.\n. Haven't looked at the code yet, but I can tell you right now that there's a reason that `hideExpression` isn't evaluated the same as `expressionProperties` and that's because a common scenario for the `hide` property. That is: If a field is initialized as `hide: true`, then it will not be compiled. Therefore there will be no `scope` to evaluated this expression and the field will never be shown (because the expression can't be evaluated).\n\nSo, if you could removed that piece, then I'll give the code a look. Let me know if you have any questions. Thanks a ton!\n. If you wanted to fix the `model` property in those expressions, you could add to [this object](https://github.com/formly-js/angular-formly/blob/master/src/directives/formly-form.js#L333-L338). Would require a breaking change though. Feel free to do that (though make sure your commit message follows [the convention](https://github.com/ajoslin/conventional-changelog/blob/master/conventions/angular.md))\n. This is excellent @kwypchlo. Thank you. If you could address my one comment, I give this a :+1:. I would like someone from @formly-js/angular-formly-collaborators and another person from @formly-js/angular-formly-collaborators-read to also review this PR and give a :+1: or :-1:\n. Thanks @kamilkisiela! I'll go ahead and merge this in then.\n. This will be auto-released in a few minutes. Thanks a bunch @kwypchlo!\n. I'm not sure what's causing your issue. What version of node and npm are you using?\n. I'm sorry, I'm not able to reproduce your issue myself. One thing you might double check is that you've got the `peerDependencies` like `angular` and `api-check` installed before you try to install `angular-formly`.\n. Yes, this is totally possible and the way it should be done is with [plugins](http://docs.angular-formly.com/page/plugins) of which there are several. I'm pretty confident that for the most part angular-formly is \"done.\" Any other functionality needed can/should probably be added via a plugin.\n\nFeel free to create a plugin yourself. It should be quite straightforward. For example, the Matching Two Fields example you reference could be made a plugin with a single file that does this:\n\n``` javascript\nangular\n  .module('angular-formly-match-field', [])\n  .config(function config(formlyConfigProvider) {\n    // set templates here\n    formlyConfigProvider.setType({\n      name: 'matchField',\n      defaultOptions: function matchFieldDefaultOptions(options) {\n        return {\n          extras: {\n            validateOnModelChange: true\n          },\n          expressionProperties: {\n            'templateOptions.disabled': function(viewValue, modelValue, scope) {\n              var matchField = find(scope.fields, 'key', options.data.fieldToMatch);\n              if (!matchField) {\n                throw new Error('Could not find a field for the key ' + options.data.fieldToMatch);\n              }\n              var model = options.data.modelToMatch || scope.model;\n              var originalValue = model[options.data.fieldToMatch];\n              var invalidOriginal = matchField.formControl && matchField.formControl.$invalid;\n              return !originalValue || invalidOriginal;\n            }\n          },\n          validators: {\n            fieldMatch: {\n              expression: function(viewValue, modelValue, fieldScope) {\n                var value = modelValue || viewValue;\n                var model = options.data.modelToMatch || fieldScope.model;\n                return value === model[options.data.fieldToMatch];\n              },\n              message: options.data.matchFieldMessage || '\"Must match\"'\n            }\n          }\n        };\n\n        function find(array, prop, value) {\n          var foundItem;\n          array.some(function(item) {\n            if (item[prop] === value) {\n              foundItem = item;\n            }\n            return !!foundItem;\n          });\n          return foundItem;\n        }\n      }\n    });\n  });\n```\n\nIf you're interested in creating this plugin, I recommend you check out my egghead.io series: [How to Write an Open Source Library](http://kcd.im/write-oss) and look at the recommendations on [the plugins](docs.angular-formly.com/page/plugins) page. Good luck!\n. @slavafomin, why can't you help? You're welcome to make a PR. Just make the test pass :-)\n. If you need help, I'm sure that someone (or I) could help point you in the right direction. You might also check the [CONTRIBUTING.md](https://github.com/formly-js/angular-formly/blob/master/CONTRIBUTING.md) :+1: \n. Just to clarify, this is intended to only run the hide expression right? Other expressionProperties won't work until the field itself is compiled.\n. Based on the test, I'm guessing that is the case. Thanks! \n. Yes, go to the link function where we're chaining the steps of the promises to compile the template and just add another step or add to an existing step\n. I really think that you could find another way to accomplish what you're trying to do. Could you create an example of what you're trying to do following [these instructions](http://help.angular-formly.com)?\n\nEither way, I don't think that we'll be doing anything significant to change the behavior of the `ngModelAttrsTemplateManipulator` and I'm sure that we can figure out another way to do what you're trying to do. So I'll go ahead and close this issue. Good luck!\n. Thanks for your interest in angular-formly. The best way to get help is by following the instructions at [help.angular-formly.com](http://help.angular-formly.com). The GitHub issues on this project are reserved for feature requests and bug reports, so I'm going to close this issue. See you on [chat](http://chat.angular-formly.com) and [Stack Overflow](http://question.angular-formly.com/)!\n. The examples seem to be working fine for me... Could you check them again?\n. Thanks @kamilkisiela! :D\n. @benoror looks like you updated the PR. Looks good to me. Anyone from @formly-js/angular-formly-collaborators or @formly-js/angular-formly-collaborators-read wanna review this and push the merge button?\n. Sorry, I just merged another PR :cry: \n. Sorry about that @benoror.\n. :clap: \n. Ah, yes, probably should.\n. Anyone from @formly-js/angular-formly-collaborators wanna take this one? https://github.com/formly-js/angular-formly-website/tree/master/app/states/root/children/users/components/data\n. :+1: even better! Thanks :D\n. Here are the GUI builders I'm aware of. Built by others: http://docs.angular-formly.com/docs/gui-form-builders\n. That's what they promise. If you have problems with them, contact their respective maintainers.\n. These are great questions for the chat: http://chat.angular-formly.com\n. Thanks for the help @benoror.\n\nHmmm.... Yeah, I feel like this is a bit of an edge case and would prefer that it's handled outside of angular-formly unless I can see a simple, tested implementation. My inclination is to say this is outside of the scope of the project though. Sorry @koraybalci.\n. Thanks for your interest in angular-formly. The best way to get help is by following the instructions at [help.angular-formly.com](http://help.angular-formly.com). The GitHub issues on this project are reserved for feature requests and bug reports, so I'm going to close this issue. See you on [chat](http://chat.angular-formly.com) and [Stack Overflow](http://question.angular-formly.com/)!\n. Technically [this](https://github.com/formly-js/angular-formly/blob/f8bc5479ce2dd66aafe2a513f68c2deb411d8d88/src/directives/formly-form.js#L369-L372) should have almost everything that [this](https://github.com/formly-js/angular-formly/blob/master/src/directives/formly-field.js#L21-L29) has. I think the only thing that's missing is: `originalModel`, and `formOptions`. The other properties are actually properties on the `$scope` of the `formly-form` which is where the expression is evaluated and therefore you should have access to it in your expression.\n\nI'd happily accept a (tested) PR to add these properties. If you're keen on it, that's great. If you need help, maybe someone from @formly-js/angular-formly-collaborators or @formly-js/angular-formly-collaborators-read could give you a little guidance. Thanks everyone!\n. Great, you might take a look at the CONTRIBUTING.md file as well :+1: \n. Yeah, `originalModel` can simply be: `$scope.model` (the form's `$scope`). `formOptions` will need to be `$scope.options` (the form's `$scope`)...\n. Yep! Feel free to close it. Thanks!\n. Feel free to [makeapullrequest.com](http://makeapullrequest.com)\n. Seems to be up for me and isitup.org https://isitup.org/docs.angular-formly.com\n. How's it looking for you now?\n. You're validator needs to check for empty and return valid if it's empty. The examples on the website do this. Thanks!\n. Thanks!\n. That's fine. Thanks!\n. Awesome! Mind adding a test or two that verifies these changes work (and to prevent them from breaking in the future?)\n. Sure! :+1: \n\nI'd probably put it in the section of tests that test `hideExpression` because that's one of the main places that leverages this feature. Find that [here](https://github.com/formly-js/angular-formly/blob/master/src/directives/formly-form.test.js#L535-L560).\n\nI would take the existing `beforeEach` and two `it` blocks and nest them in another describe with a title of something like: `behavior when the model changes`\n\nThen I would create another `describe` block for your tests with the title of something like `as a string`. And then add an `it` with the message: `should have access to almost all the same properties as an expressionProperties string expression`.\n\nThen in your test, you'll want to initialize `scope.fields`, `scope.model`, and `scope.options` (`scope.options` should have a `formState` object). And for `scope.fields` you can use the `getNewField` helper function (see other places for how that's used. It's pretty much just a helper so you can omit the template/type/etc.).\n\nIt may be a bit tricky because you can't really do assertions in string expressions, but the returned value of the string expression is assigned to the field's `hide` property. So you might try something like this:\n\n``` javascript\nscope.model = {}\nscope.options = {formState: {}}\nscope.fields = [getNewField({\n  hideExpression: `\n    options === options.data.field &&\n    index === 0 &&\n    formState === options.data.formOptions.formState &&\n    originalModel === options.data.originalModel &&\n    formOptions === options.data.formOptions\n  `, // can't reliably test `formId` unfortunately\n  data: {\n    originalModel: scope.model,\n    formOptions: scope.options,\n  }\n})]\nscope.fields[0].data.field = scope.fields[0]\n```\n\nThen invoke `compileAndDigest` and assert that the `scopes.fields[0].hide` is true.\n\nLet me know what you think or feel free to change whatever you like. Looking forward to seeing this. Thanks!\n. It's for anything you want. Because angular-formly validates all of the properties you provide, if you have any other things you need to provide, they either go in `templateOptions` (if it's specific for the template or `type` that you're using) or in `data` if it's just general data that you need to get your job done (like in this case).\n. I'm fine with either way. Feel free to add more tests in this pr, feel free to squash if you like.\n. If you could fix that comment and the name of that data property (to `parentScope` maybe), then this is great and I'll merge it. Thanks!\n. Perfect. Thank you!\n. If you're simply using the global, then rather than requiring it, it's available as a global `apiCheck`. Then you disable it the same as in the docs.\n. No, angular-formly uses it heavily. You definitely want to disable it for production. There's an example on the website for production tips that uses globals.\n\nI'm going to let you look at that and consider this issue closed. Check out the chat for more questions.\n. I'm sorry, but as you can see in the comments, I said I don't want to add another error message because it simply doesn't make sense to have two error messages for the same thing. The very next line is the same error. If you want to update that message, we can talk about that, but adding another message is something I simply won't do.\n. You can do it in your submit handler. The submit handler is on the same scope as the form options.\n. The GitHub issues on this repo are reserved for feature requests and bug reports. All questions should follow these instructions: help.angular-formly.com\n\nSo I'm going to go ahead and close this issue.\n. The example is confusing, but it's definitely still working. Read the descriptions carefully. Sorry it's confusing.\n\n![working](https://cloud.githubusercontent.com/assets/1500684/12903586/a37f19ae-ce7d-11e5-9351-1f3328649f81.gif)\n. Good luck! If you wanna create an example of what you're trying to do and share it in the chat or on stack overflow that'd probably help :-) [help.angular-formly.com](http://help.angular-formly.com)\n. I'm not certain I understand what you mean by this. Could you give a more clear explanation of what you mean?\n. Even better, maybe you could go to [the chat](http://chat.angular-formly.com) and describe what you're trying to do. Perhaps someone will be able to help you find another way.\n. Could you please reproduce your issue using [issue.angular-formly.com](http://issue.angular-formly.com/)? It will help us determine what exactly the problem is that you're describing and how it could be fixed. Thanks!\n. > I can make this work with the current form by assigning both the form and the formly-form to the same property\n\nThis is how it's intended to work. You're basically passing the form to `formly-form` telling it what to use for the `NgFormCtrl`. Formly does some [magic under the hood](https://github.com/formly-js/angular-formly/blob/master/src/directives/formly-form.js#L383-L420) to manage the `NgFormCtrl` to make the API more clear. Unfortunately that leads to issues like the one you're seeing, but most of the time it's better than the alternative.\n\nI don't think there's anything I can do to fix this. Just name your form and pass it to `formly-form`.\n. Could you please reproduce your issue using [issue.angular-formly.com](http://issue.angular-formly.com/)? It will help us determine what exactly the problem is that you're describing and how it could be fixed. Thanks!\n. This appears to be a bug. `defaultOptions` should work great as a function. But it appears to not work in this case. However, if we make the `abstractType` an object instead, it seems to work fine ([like so](https://jsbin.com/tureko/edit?html,js,output)).\n\nI doubt that I'll have time to work on this I'm afraid. But feel free to [makeapullrequest.com](http://makeapullrequest.com) :-)\n. Thanks for letting me know! This should be fixed in a few minutes. Sorry about that!\n. Please re-open this if it's not fixed in 30 minutes.\n. Hey @johannesjo,\nI commented on your question on stack overflow.\n\nBecause the github issues on this project are reserved for bug reports and feature requests, I'm going to close this issue. If you have further questions, please take them to [chat.angular-formly.com](http://chat.angular-formly.com)\n. I would personally say that it's out of scope for the core project. It would, however, make a great [plugin](http://docs.angular-formly.com/page/plugins). You might think about giving the [repeating-section](http://angular-formly.com/#/example/advanced/repeating-section) a look.\n. :+1:\n. I should also mention that managing this project is primarily a matter of support at this point. There are definitely some bugs and a few tiny features, but for the most part, this project is done.\n. Thanks for the suggestion @ShashankaNataraj. That currently exists (and invitations are still open #481). I'm looking for someone to hand off account information, passwords, tokens, etc. to.\n. If you're interested, I published a 3 minute podcast about this: https://www.briefs.fm/episodes/570\n. @jorgemarcondes fantastic. I'll add you to the collaborators on the org. Thanks!\n. Sweet @barkoczi, I'll add you to the collaborators.\n. Thanks @agileurbanite! I'll add you to the collaborators as well.\n\nFor everyone on @formly-js/angular-formly-collaborators-read, you could really help out by investigating, reviewing, closing, and making PRs for [the issues](https://github.com/formly-js/angular-formly/issues). Also, make sure to watch the repo, and the various [formly-js](https://github.com/formly-js) repos as well.\n\nIf I see someone really taking initiative on the issues and things then I'll happily hand over write access and eventually publish access. Thanks!\n. @Stwissel, talk with @mohammedzamakhan about how you can help with https://github.com/formly-js/ng2-formly :-)\n. > I would hate to see formly go un-maintained.\n\nLikewise. I've stopped watching the repos because I can't really help out anymore. My plan was to hand over control to anyone making pull requests, but nobody has really done that consistently. This tells me that either nobody's willing to step up to the plate of ownership or angular-formly is done.\n\nI think at this point, @BarryThePenguin is probably the best candidate for ownership. What do you say @BarryThePenguin?\n. @sumitasr, I'll add you to the read-only collaborators. Start making PRs and I'll give you write access :)\n. I'm fairly confident that formly is still a prime solution for building forms with AngularJS. It's been steadily growing in the number of downloads since I posted this almost a year ago. Formly's not dead. But based on the fact that the library has had very little development (and no active maintainers), but still growing in popularity tells me that it's \"done.\"\r\n\r\nFormly is no more dead than AngularJS. It's just done.. Another interesting fact: angular-formly comes up (basically) first in pretty much every search criteria on npm for \"angular forms\": https://www.npmjs.com/search?q=angular%20forms\r\n\r\nI think it's safe to say that angular-formly is still the most popular abstraction for forms with angular.. @LuigiDAmico, from the README badge, you can see there are about 12,000 downloads on npm per month. It's extremely hard to tell from download numbers how many users there are. There are no active contributors or maintainers, so I've kept ownership of the project, but I don't watch the repo so I'm not sure how the community is doing (as far as people helping one another out or people finding the answers they need). If you want to contribute, please start helping out in the community.\r\n\r\nI think that the project is more-or-less \"done\" based on the fact that there are rarely new issues filed on the project and no critical issues and rarely any pull requests. It's helped tens (hundreds) of thousands of developers build better forms with AngularJS :). Hi @kwypchlo!\n\nThanks for making this. I'll review it more closely soon. But if you could double check the commit message conventions, I don't think this follows it. Also, pay close attention to what you need to do in the commit message if you're introducing a breaking change please. Thanks!\n. Awesome. Thanks for doing that! I'll get back to you soon hopefully!\n. I think this PR is great other than the one note that I mentioned. Let me know if you have questions about that.\n. Looks good to me! Thoughts @formly-js/angular-formly-collaborators-read?\n. Hopefully the auto-release works for this one. We've had a bit of trouble with that recently.\n. Nope :-( #643 is tracking issues with the auto-release process...\n. Thanks a ton for the help @gillchristian! @vukan71, because this appears to be more of a matter of help and support than a real bug or feature request, I'm going to close this issue. Feel free to continue discussion or move this to chat.angular-formly.com :+1: \n. Looks good to me. But I would like someone else to merge this: @formly-js/angular-formly-collaborators \n. Anyone in @formly-js/angular-formly-collaborators-read who feels confident they can have commit access, I'll add you to @formly-js/angular-formly-collaborators :-)\n. Unfortunately it looks like it's [not fixed](https://jsbin.com/vilatopuso/edit?html,js,console,output)\n. Actually, it looks like this wasn't auto-released for some reason :-( Filing an issue.\n. Yeah, it hasn't yet been released because there's a problem. So no, there's not really a way... Feel free to help out here: #643\n. If I publish manually, will things go back to normal?\n. Alrighty, released `7.5.1`. I'll merge #639 after I verify [this](https://github.com/formly-js/angular-formly/pull/641#issuecomment-188634110) is fixed with the new release.\n. Looks like bower's broken as well... I'm actually tempted to stop officially supporting bower and direct people to the solution in #589 with npmcdn.com\n. > [imho] What a mess ...\n\nAgreed... :-(\n\n@DrDanRyan, do you have any ideas of how to fix this issue? I'm not sure what's going on with the release, but if you'd like to look into it, please feel free: https://travis-ci.org/formly-js/angular-formly/builds/111880609\n. Good thing you can continue using version 7 and it works just as well as it always has :-)\n. Ah! Neat! Want to add it to the examples site? https://github.com/formly-js/angular-formly-website/blob/master/CONTRIBUTING.md#creating-an-example\n. Hmmm... I'm not seeing it [here](https://github.com/formly-js/angular-formly-website/pulls)...\n. Thank you for the help @BarryThePenguin!\n. Could you check it again. It's working fine for me.\n. Hi @MCKRUZ, please move discussion over to #643 \n. Hi @JessyRiordan, yes, this is being tracked in #643, thank you for your patience (and help!)\n. I would recommend you write your own directive that has default options you can use and passes those to formly-form. It's much better to compose things together than to have global options. Anyone want to provide an example of this?\n. Duplicate of #643\n. A wrapper without defined `name` or `type` will be set as the `default` template. This could probably be made more clear in [the docs](http://docs.angular-formly.com/docs/formlyconfig#setwrapper)\n\n> You can have a default (used by all templates), named template wrappers, and typed template wrappers (used by fields with the specified type)\n\nIf you give the first wrapper a name, or `types`, you'll see this behavior is corrected: https://jsbin.com/tafiwa/edit?html,js,output\n\nIn the future, please ask questions in the chat: http://chat.angular-formly.com thanks!\n. Just realized that perhaps you didn't ask this in the chat because you legitimately thought it was a bug. Thanks for the reproducible example! That made it much easier to help you :sparkles: \n. LGTM, could I have someone else review and merge this? Ping @formly-js/angular-formly-collaborators\n. Thanks @kwypchlo!\n\n![giphy](https://cloud.githubusercontent.com/assets/1500684/13674615/0d155626-e693-11e5-84fe-1b87244a44a7.gif)\n. Have you tried https://www.npmjs.com/package/next-update\n. Any idea why the build is busted? Looks like a shell issue? Maybe related to the quotes you removed? Maybe we should do escaped double quotes?\n. Thanks @BarryThePenguin!\n. Hi @dariusjb and @maxime-beguin,\n\nThanks for reporting this. It needs more investigation and possibly a fix.\n\n> Could anyone provide a fix, please?\n\nThis is a community project, you could [makeapullrequest.com](http://makeapullrequest.com) or [add a bounty](https://www.bountysource.com/) on this issue to motivate someone else to do so.\n. Thanks for your interest in angular-formly. The best way to get help is by following the instructions at [help.angular-formly.com](http://help.angular-formly.com). The GitHub issues on this project are reserved for feature requests and bug reports, so I'm going to close this issue. See you on [chat](http://chat.angular-formly.com) and [Stack Overflow](http://question.angular-formly.com/)!\n. Could you check back in an hour or so? I think [RawGit is having trouble](https://twitter.com/kentcdodds/status/710840929226084352)...\n. [fixed](https://twitter.com/rawgit/status/710855413734854656)\n. This looks good to me. Thanks @tuxtina! Once the build passes, if someone else wants to review and hit the merge button that'd be great.\n. I would prefer to explicitly check for `undefined` as well :+1:\n. LGTM! Would like to get another reviewer on this though.\n. This should probably be updated if we want it merged. Things have changed quite a bit since March 19th, 2016....\n. This looks just fine :+1:\n. I'd still like someone else who actually uses the library still to review and merge this though.\n. I am, but would love to give some other people access.\n. I think this looks good. Could you [update the commit message](https://help.github.com/articles/changing-a-commit-message/) so the subject isn't so long?\n\nI'll let someone else merge this once you've done that. Thanks!\n. LGTM! Thanks!\n. You should hide your form behind  `ng-if=\"vm.fields.length\"` which will prevent Angular from compiling the form until your fields have loaded.\n. Yeah, adding fields dynamically isn't well supported. Best to have them all at compile time and hide the ones that shouldn't be showing.\n. If this is really part of the specification, it's odd and unexpected. In formly we often do things that abstract away the unexpected parts of the specification. So I think a PR to abstract this away would be acceptable. My thinking is to add a hidden field if there's only one field in `fields`. Could easily accomplish this in the `formly-form` template right above [this line](https://github.com/formly-js/angular-formly/blob/3bd8ec0035e05a89cde16ad9493b15b7beb04c18/src/directives/formly-form.js#L54):\n\n``` html\n<input type=\"hidden\" ng-if=\"fields.length === 1\" />\n```\n\nI'm thinking that should do it. Any pull request should accompany tests. [makeapullrequest.com](http://makeapullrequest.com) :-)\n. Hmmm... I suppose that this might be expected behavior on the part of users. Maybe it's better for the developer to be explicit about how they solve this problem rather than just doing it ourselves.\n. Actually, I'm pretty confident that the API for formly is already too big. You could easily accomplish this with a field transform: https://jsbin.com/yinuda/edit?js,output\n\n``` javascript\napp.run(function(formlyConfig) {\n  formlyConfig.extras.fieldTransform.push(fieldTransform)\n\n  function fieldTransform(fields) {\n    return fields.concat({\n      type: 'input',\n      templateOptions: {\n        type: 'hidden'\n      },\n      hideExpression: 'fields.length !== 2' // where 2 === this one plus one another.\n    })\n  }\n})\n```\n. If you'd like, you can create a plugin for this and I'll add it to [the plugins list](http://docs.angular-formly.com/page/plugins)\n. Hi @seibs! Thanks for the PR! This looks great to me, could I have someone from @formly-js/angular-formly-collaborators or @formly-js/angular-formly-collaborators-read review this as well?\n. @immortalcy, actually, if you look at the implementation of the example above, it allows you to specify the `ngOptions` at the field level, and actually you can specify the `ngOptions` attribute for a specific field using `ngModelAttrs` as well. I think that's the generic solution you're looking for...\n. Hi @xphong, I'm not seeing the same thing you are. You can see it working here: https://jsbin.com/bivoxoz/edit?html,js,output\n\nCould you please reproduce your issue using [issue.angular-formly.com](http://issue.angular-formly.com/)? It will help us determine what exactly the problem is that you're describing and how it could be fixed. Thanks!\n. I would not recommend this change be made.\n. This is great. Thanks for working on it. Any other reviewers wanna pitch in here? Should probably get at least one other.\n. :clap:\n. LGTM! I'll let someone from @formly-js/angular-formly-collaborators-read give the thumbs up and someone from @formly-js/angular-formly-collaborators merge the PR.\n. Agreed. We could make that a breaking change in a future release.\n. Could someone from @angular-formly-collaborators review and merge this?. Sorry, bad @ mention. Someone from @formly-js/angular-formly-collaborators please review and merge this. Thanks.. I don't maintain this library anymore, but I should say that you'll definitely want to look at the production tips here: http://docs.angular-formly.com/docs/tips\r\n\r\nIt will definitely be slow if you don't do those things.. Good luck.. ",
    "vptcnt": "kentcdodds,\n\ncould you please have an example of a template of the type grouped-field ?\n. kentcdodds,\n\ncould you please have an example of a template of the type grouped-field ?\n. ",
    "obenjiro": "tnx a lot! I know how tedious writing documentation may be.\n. tnx a lot! I know how tedious writing documentation may be.\n. ",
    "jhr007": "Now the formly has two-way binding with the result variable. \n. Probably beyond the scope of this library \n\nSearch for: angular inline editing\n\nSent from my iPhone\n\n> On Jun 5, 2014, at 9:06 AM, \"Kent C. Dodds\" notifications@github.com wrote:\n> \n> I don't know if this belongs here or in a separate library, but I thought I'd throw this out there. In my project, I need to have a details page that lists out some properties of a model, and then they can click edit and they can edit those properties. I don't think I want to just make all the fields \"disabled\" to accomplish this, so I'm wondering if perhaps there's space in this library for displaying data in a read-only format. What do you think?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n. Independent of this repo ( not that a PR wouldn't be welcome) it might be doable by creating a custom directive in a custom HTML template that is added to formly. \n\nThe 'multi-phone' directive would handle the add/remove of the phone field (ng repeat over an array that builds the number fields)\n\nYou might be able to treat the formData.multiPhoneList variable received by the directive as an array. In the field  eg. ng-model=\"multiPhoneList[$index].phoneNumber\"\n\nAnd \nng-model=\"multiPhoneList[$index].phoneType\" (work/home/mobile)\n\nWhere $index is from the ng-repeat.\n\nOtherwise you'd have to $watch the fields in the directive and update a hidden field that is bound to formData.\n\nHope this makes sense \n\n/2 cents\n\nSent from my iPhone\n\n> On Aug 22, 2014, at 1:25 PM, Martin Wawrusch notifications@github.com wrote:\n> \n> I would like to have the ability to specify how many items a field can contain. For example, a contact could have more than one phone number. From a UI perspective the apple contact screen works very well.\n> \n> What do you guys think about that, could you see it as part of the library, or as an extra module?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n. I agree it should be separate as such a specific use case, OR included as a magical example after future maintenance concerns are addressed.\n\nTo be included in the library I think the bar should be set high. Eg. It should be able to wrap almost any field. But this would mean as formly loops over the field array it detects a multi-field and treats it accordingly.\n\nSent from my iPhone\n\n> On Aug 22, 2014, at 2:31 PM, \"Kent C. Dodds\" notifications@github.com wrote:\n> \n> Yeah, I definitely believe it belongs in a standalone directive. Whether or not it's included in the library or not is another matter. I'm still on the fence on that one. @astrism?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n. Now the formly has two-way binding with the result variable. \n. Probably beyond the scope of this library \n\nSearch for: angular inline editing\n\nSent from my iPhone\n\n> On Jun 5, 2014, at 9:06 AM, \"Kent C. Dodds\" notifications@github.com wrote:\n> \n> I don't know if this belongs here or in a separate library, but I thought I'd throw this out there. In my project, I need to have a details page that lists out some properties of a model, and then they can click edit and they can edit those properties. I don't think I want to just make all the fields \"disabled\" to accomplish this, so I'm wondering if perhaps there's space in this library for displaying data in a read-only format. What do you think?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n. Independent of this repo ( not that a PR wouldn't be welcome) it might be doable by creating a custom directive in a custom HTML template that is added to formly. \n\nThe 'multi-phone' directive would handle the add/remove of the phone field (ng repeat over an array that builds the number fields)\n\nYou might be able to treat the formData.multiPhoneList variable received by the directive as an array. In the field  eg. ng-model=\"multiPhoneList[$index].phoneNumber\"\n\nAnd \nng-model=\"multiPhoneList[$index].phoneType\" (work/home/mobile)\n\nWhere $index is from the ng-repeat.\n\nOtherwise you'd have to $watch the fields in the directive and update a hidden field that is bound to formData.\n\nHope this makes sense \n\n/2 cents\n\nSent from my iPhone\n\n> On Aug 22, 2014, at 1:25 PM, Martin Wawrusch notifications@github.com wrote:\n> \n> I would like to have the ability to specify how many items a field can contain. For example, a contact could have more than one phone number. From a UI perspective the apple contact screen works very well.\n> \n> What do you guys think about that, could you see it as part of the library, or as an extra module?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n. I agree it should be separate as such a specific use case, OR included as a magical example after future maintenance concerns are addressed.\n\nTo be included in the library I think the bar should be set high. Eg. It should be able to wrap almost any field. But this would mean as formly loops over the field array it detects a multi-field and treats it accordingly.\n\nSent from my iPhone\n\n> On Aug 22, 2014, at 2:31 PM, \"Kent C. Dodds\" notifications@github.com wrote:\n> \n> Yeah, I definitely believe it belongs in a standalone directive. Whether or not it's included in the library or not is another matter. I'm still on the fence on that one. @astrism?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n. ",
    "t8g": "Maybe a option for custom templates ?\nSomething like\n\n``` js\n{\n  key: 'mykey',\n  templateUrl: '/views/my-select-template.html'\n....\n}\n```\n. Maybe a option for custom templates ?\nSomething like\n\n``` js\n{\n  key: 'mykey',\n  templateUrl: '/views/my-select-template.html'\n....\n}\n```\n. ",
    "trunghaiy": "The error is \" W024: Expected an identifier and instead saw 'default' (a reserved word)\"\n. The error is \" W024: Expected an identifier and instead saw 'default' (a reserved word)\"\n. ",
    "steve21124": "thanks\n. thanks\n. ",
    "delaman": "It works with some 1.2 versions on angular. I'm using it with the latest stable version of angular. The offical docs do not document this but it works just not officially. \n. Give me a few minutes.  Let me see if I can do it before I hit the hay.  I'll report back in 20 minutes.\n. meh to tired.  Will do it over the weekend if i find the time.\n. Yes.  It also needs in the package.json to setup the \"main\" parameter.  Havs it something like :\n\n\"main\": \"dist/formly.min.js\"\n. @kentcdodds Looks like angular-formly uses ES6 via babel in parts of the library.  If I can use babel so that I can use ES6 stuff i'll do angular-formly swagger library.\n\nThanks\n. It works with some 1.2 versions on angular. I'm using it with the latest stable version of angular. The offical docs do not document this but it works just not officially. \n. Give me a few minutes.  Let me see if I can do it before I hit the hay.  I'll report back in 20 minutes.\n. meh to tired.  Will do it over the weekend if i find the time.\n. Yes.  It also needs in the package.json to setup the \"main\" parameter.  Havs it something like :\n\n\"main\": \"dist/formly.min.js\"\n. @kentcdodds Looks like angular-formly uses ES6 via babel in parts of the library.  If I can use babel so that I can use ES6 stuff i'll do angular-formly swagger library.\n\nThanks\n. ",
    "manuelnaranjo": "Hello guys I started a simple implementation for this feature, it's available on my fork at https://github.com/idbaigorria/angular-formly I don't think it's the best solution available but it's one that works, there's some DOM manipulation involved I'm not very convinced\n. I tried with multiple options combinations, don't think I tried with options.formField.$error :P though, this is an opt-in because if angular-message is not registered then the message and messages directives shouldn't be abailable.\n\nAbout the tabs I configured emacs on the directory level to match the setup, which files I missed? I didn't noticed, I can fix that.\n. Ohh I see, I though that was a style bug actually as those fields where not tabbed as the rest.\n\nBTW I updated my project, executed npm install && bower install, then opened up the browser, edited the firstName entry to add required: True so I could display the errors, but formField is not part of the options scope variable.\n\nMy tests where:\n\n> angular.element($(\"#formlytext0\")).scope().options.formField\n> undefined\n> angular.element($(\"#formlytext0\")).scope().options\n> Object {key: \"firstName\", type: \"text\", label: \"First Name\", placeholder: \"Jane\", required: true\u2026}\n> angular.element($(\"#formlytext0\")).scope().formField\n> undefined\n\nI even tried with #formlytext0 parent\n. Ok found the issue! broke the behavior of formField and the demo app is not using master, but rather the last built version.\n\nI'm creating a new branch to fix just this issue and doing a pull request.\n. Check https://github.com/nimbly/angular-formly/pull/99\n. Ok nice point, nice you are making it clear now! It wasn't clear to me about the spaces part!, I like tabs, though I rather just use spaces, it's through though that using tabs allows anyone to use what ever 2 or 4 or even 8 (why not 3 or another even number) of spaces per tab, while using spaces from the beginning does not.\n\nWould be nice to have this rules as part of each file so editors can pick it up, not sure how to handle the \"use space\" on this particular cases, but for the rest it would work. I don't know if vim or others is happy with emacs directory based configuration. Never heard of a standard per project way of doing this.\n. Hello guys I started a simple implementation for this feature, it's available on my fork at https://github.com/idbaigorria/angular-formly I don't think it's the best solution available but it's one that works, there's some DOM manipulation involved I'm not very convinced\n. I tried with multiple options combinations, don't think I tried with options.formField.$error :P though, this is an opt-in because if angular-message is not registered then the message and messages directives shouldn't be abailable.\n\nAbout the tabs I configured emacs on the directory level to match the setup, which files I missed? I didn't noticed, I can fix that.\n. Ohh I see, I though that was a style bug actually as those fields where not tabbed as the rest.\n\nBTW I updated my project, executed npm install && bower install, then opened up the browser, edited the firstName entry to add required: True so I could display the errors, but formField is not part of the options scope variable.\n\nMy tests where:\n\n> angular.element($(\"#formlytext0\")).scope().options.formField\n> undefined\n> angular.element($(\"#formlytext0\")).scope().options\n> Object {key: \"firstName\", type: \"text\", label: \"First Name\", placeholder: \"Jane\", required: true\u2026}\n> angular.element($(\"#formlytext0\")).scope().formField\n> undefined\n\nI even tried with #formlytext0 parent\n. Ok found the issue! broke the behavior of formField and the demo app is not using master, but rather the last built version.\n\nI'm creating a new branch to fix just this issue and doing a pull request.\n. Check https://github.com/nimbly/angular-formly/pull/99\n. Ok nice point, nice you are making it clear now! It wasn't clear to me about the spaces part!, I like tabs, though I rather just use spaces, it's through though that using tabs allows anyone to use what ever 2 or 4 or even 8 (why not 3 or another even number) of spaces per tab, while using spaces from the beginning does not.\n\nWould be nice to have this rules as part of each file so editors can pick it up, not sure how to handle the \"use space\" on this particular cases, but for the rest it would work. I don't know if vim or others is happy with emacs directory based configuration. Never heard of a standard per project way of doing this.\n. ",
    "abodacs": "any news about that?\nThanks!\n. @kentcdodds Thanks for this greet work \nThanks @Bill77 \n. first Thanks for this greet work\ni have use case a user can enter new form or edit previous entered forms in same page.\nPrevious forms loaded as timeline style to edit\n. Thanks @kentcdodds  i use your form for building a survey application something like this https://showroom.typeform.com/to/aCZKbD\nI have multi-use cases  ,like multi-select and muti small -form inside one form \"ex, person contacts\"\nand upload-files any suggestions \n. thanks yes\n. examples doesn't work @kentcdodds in demo\n. https://formly-js.github.io/angular-formly/#/example/intro/introduction\nwhen https doesn't work \n. ok thanks\n. ok @kentcdodds  you can close it\n. @kentcdodds  Thanks for your talk very helpful\n. @kentcdodds can you make an example of autocomplete ??\n. @kentcdodds i accept any library :) and it would be great if it was in edit mode.\n. my use case i have form has autocomplete populated from api . i mean by \"edit mode\" how can i populated the autocomplete field again when user want to edit it.\n. @CodeLiftSleep \nhttps://gist.github.com/eyston/5851760 may help\n. +1\n. why 'investments' key must be defined in vm.model to show the form ?\n. @kentcdodds try to change it to vm.model = {};??\n. :+1: \n. i already saw it. normaly i check your awesome formly every day. i  now work with  autocomplete by the way i choose angucomplete-alt hope i got it work \n. yes i tried it and use it with repeatedsection it works have a nice vacation :\\\n. @kurokoda has you get  a solution?\n. @nvdnkpr  any updates for this issue ?? \n. +1 same problem here\n. any news about that?\nThanks!\n. @kentcdodds Thanks for this greet work \nThanks @Bill77 \n. first Thanks for this greet work\ni have use case a user can enter new form or edit previous entered forms in same page.\nPrevious forms loaded as timeline style to edit\n. Thanks @kentcdodds  i use your form for building a survey application something like this https://showroom.typeform.com/to/aCZKbD\nI have multi-use cases  ,like multi-select and muti small -form inside one form \"ex, person contacts\"\nand upload-files any suggestions \n. thanks yes\n. examples doesn't work @kentcdodds in demo\n. https://formly-js.github.io/angular-formly/#/example/intro/introduction\nwhen https doesn't work \n. ok thanks\n. ok @kentcdodds  you can close it\n. @kentcdodds  Thanks for your talk very helpful\n. @kentcdodds can you make an example of autocomplete ??\n. @kentcdodds i accept any library :) and it would be great if it was in edit mode.\n. my use case i have form has autocomplete populated from api . i mean by \"edit mode\" how can i populated the autocomplete field again when user want to edit it.\n. @CodeLiftSleep \nhttps://gist.github.com/eyston/5851760 may help\n. +1\n. why 'investments' key must be defined in vm.model to show the form ?\n. @kentcdodds try to change it to vm.model = {};??\n. :+1: \n. i already saw it. normaly i check your awesome formly every day. i  now work with  autocomplete by the way i choose angucomplete-alt hope i got it work \n. yes i tried it and use it with repeatedsection it works have a nice vacation :\\\n. @kurokoda has you get  a solution?\n. @nvdnkpr  any updates for this issue ?? \n. +1 same problem here\n. ",
    "Bill77": "Hi @abodacs \n\nI did a simple fork on Angular_formly_templates_bootstrap which added validation messages via ng_messages.  It just adds them to each of the input templates.  Nothing fancy, but perhaps a good starting point if you're interested in it. :)\n\nCheers,\nBill\n\nhttps://github.com/Bill77/angular-formly-templates-bootstrap\n. Hey @kentcdodds,\n\nJust wanted to let you know I just tested 1.3.4 and the number and maxlength issue is fixed.\n\nBill\n. Hi @abodacs \n\nI did a simple fork on Angular_formly_templates_bootstrap which added validation messages via ng_messages.  It just adds them to each of the input templates.  Nothing fancy, but perhaps a good starting point if you're interested in it. :)\n\nCheers,\nBill\n\nhttps://github.com/Bill77/angular-formly-templates-bootstrap\n. Hey @kentcdodds,\n\nJust wanted to let you know I just tested 1.3.4 and the number and maxlength issue is fixed.\n\nBill\n. ",
    "florentsuc": "Also interested...\n. Also interested...\n. ",
    "hnordt": "+1\n. +1\n. ",
    "gizmoboy": "Ditto.\n. I have placed a bounty on this feature at BountySource: https://www.bountysource.com/issues/3049791-accessing-form-values-within-other-question-templates?utm_source=3049791&utm_medium=shield&utm_campaign=ISSUE_BADGE\n. You should take the bounty!\n. Is the demo updated to show how to use it? I didn't see a change to the demo code (but may have missed it).\nBest,\n\n## \n\n## -- jas\n\nhttp://www.linkedin.com/in/jeffreysullivan\n\nOn Aug 18, 2014, at 10:41 PM, \"Kent C. Dodds\" notifications@github.com wrote:\n\nI have merged this and run the build. Once it's published you can use a version, but until then you can point to this commit and it should work just fine for you.\n\u2014\nReply to this email directly or view it on GitHub.\n. I needed to approve the change.\nBest,\n\n## \n\n## -- jas\n\nhttp://www.linkedin.com/in/jeffreysullivan\n\nOn Aug 18, 2014, at 10:40 PM, \"Kent C. Dodds\" notifications@github.com wrote:\n\nFor some reason I am unable to claim the bounty on the website. Do you need to do something on your end?\n\u2014\nReply to this email directly or view it on GitHub.\n. Kent,\n\nI have a usage question for you.\n\nCurrently, we're populating a form with default values based on existing data in our database, but we cache it for offline use by our customers.\n\nWhen they edit a form \"in flight\", I'd like them to be able to re-load the form but with the current values in the resultset pre-populated. \u00a0My developer on this says that he doesn't think that's possible, but I'd hope that isn't true. I haven't had a chance to dig into it (not sure when I will), but I was wondering if there is a built-in facility for reloading the data output by formly back into the formly form, or if not, if you think that's a feasible feature to bounty?\nBest,\n\n## \n\n## -- jas\n\nhttp://www.linkedin.com/in/jeffreysullivan\n\nOn Aug 18, 2014, at 10:41 PM, \"Kent C. Dodds\" notifications@github.com wrote:\n\nI have merged this and run the build. Once it's published you can use a version, but until then you can point to this commit and it should work just fine for you.\n\u2014\nReply to this email directly or view it on GitHub.\n. Sure thing. \u00a0Here's the use case:\n1. We present a form to the user with some default values filled in from our database. The default values are injected into the form definition json at initial render time, so they exclusively use the \"default\" property to set initial values.\n2. The user completes the form, filling in missing values and changing defaults provided to their correct values.\n3. User submits the revised results data.\n4. Data is reviewed and, if not accepted by the processor (human judgement), is sent back for further data entry by the user. At this point, we want to reload the form with the values that were last submitted in the result, rather than the initial defaults that were extracted from the database.\n\nPut more simply, what I want is this:\n\nWe need the ability to populate the values in a formly form from the json results of that same form via a mechanism as simple as .loadValues(jsonValues) (or, obviously .loadValues(objectParsedFromJsonValues).\nBest,\n\n## \n\n## -- jas\n\nhttp://www.linkedin.com/in/jeffreysullivan\n\nOn Aug 19, 2014, at 09:55 AM, \"Kent C. Dodds\" notifications@github.com wrote:\n\nLooking at your question again, I think I misunderstood the use case. Could you give me an example of what you're actually trying to accomplish?\nI updated the demo to use the results of one field in the template of another. You can see how this looks on the demo. Enter anything into the \"first name\" field and see how that is bound to the custom template field below. But, again, I don't think this is what you were going for...\n\u2014\nReply to this email directly or view it on GitHub.\n. Kent,\n\nHow do you get select field types to load that way?\n\nOn Aug 19, 2014, at 10:26 AM, Kent C. Dodds notifications@github.com wrote:\n\n> So this is something that I did on a personal project. I used the same form for creating a post (for example) as I did for editing one. It's quite simple. Instead of using default you simply set the result object that you pass into fromly to have the values of your model. The default only takes effect when the result has no value. So, you probably have something like this:\n> \n> <formly-form result=\"formData\" fields=\"formFields\" options=\"formOptions\" ng-submit=\"onSubmit()\"></formly-form>\n> $scope.formData = {};\n> $scope.formFields = [\n>   {\n>     key: 'firstName',\n>     default: 'Kent C.',\n>     type: 'text'\n>   },\n>   {\n>     key: 'lastName',\n>     default: 'Dodds',\n>     type: 'text'\n>   }\n> ];\n> Instead, what you want to do is:\n> \n> $scope.formData = {\n>   firstName: 'Kent C.',\n>   lastName: 'Dodds'\n> };\n> $scope.formFields = [\n>   {\n>     key: 'firstName',\n>     type: 'text'\n>   },\n>   {\n>     key: 'lastName',\n>     type: 'text'\n>   }\n> ];\n> So, instead of using the default, set the value of the result you pass in. Does that help?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n. They do not, unfortunately.  Everything else loads fine with this approach except some custom types we added (like time picker), which is going to be on us to extend.\n\nI\u2019d be happy to place a small bounty on such a feature, though I\u2019m not precisely sure how to write it up.\n\nI had our code refactored to emit to the form data a select option (e.g., \"guardianState\":{\"name\":\"TX\",\"value\":\"15\u201d} ), but it is not selected, and the \u201cdefault\u201d option (which has always been more of a selectedIndex property than a default) don\u2019t of use in this case.\n\nOn Aug 20, 2014, at 5:21 PM, Kent C. Dodds notifications@github.com wrote:\n\n> Hmmm... On the top of my head I thought that would do it... Do they not? We may need to have a directive for selects to manage initial values like this then... I've been considering making a place for directive templates like this for use cases like this as well as the button group.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n. Will do.\n\nSuggested bounty?\n\nOn Aug 19, 2014, at 10:26 AM, Kent C. Dodds notifications@github.com wrote:\n\n> So this is something that I did on a personal project. I used the same form for creating a post (for example) as I did for editing one. It's quite simple. Instead of using default you simply set the result object that you pass into fromly to have the values of your model. The default only takes effect when the result has no value. So, you probably have something like this:\n> \n> <formly-form result=\"formData\" fields=\"formFields\" options=\"formOptions\" ng-submit=\"onSubmit()\"></formly-form>\n> $scope.formData = {};\n> $scope.formFields = [\n>   {\n>     key: 'firstName',\n>     default: 'Kent C.',\n>     type: 'text'\n>   },\n>   {\n>     key: 'lastName',\n>     default: 'Dodds',\n>     type: 'text'\n>   }\n> ];\n> Instead, what you want to do is:\n> \n> $scope.formData = {\n>   firstName: 'Kent C.',\n>   lastName: 'Dodds'\n> };\n> $scope.formFields = [\n>   {\n>     key: 'firstName',\n>     type: 'text'\n>   },\n>   {\n>     key: 'lastName',\n>     type: 'text'\n>   }\n> ];\n> So, instead of using the default, set the value of the result you pass in. Does that help?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n. Done\n\nOn Aug 19, 2014, at 10:26 AM, Kent C. Dodds notifications@github.com wrote:\n\n> So this is something that I did on a personal project. I used the same form for creating a post (for example) as I did for editing one. It's quite simple. Instead of using default you simply set the result object that you pass into fromly to have the values of your model. The default only takes effect when the result has no value. So, you probably have something like this:\n> \n> <formly-form result=\"formData\" fields=\"formFields\" options=\"formOptions\" ng-submit=\"onSubmit()\"></formly-form>\n> $scope.formData = {};\n> $scope.formFields = [\n>   {\n>     key: 'firstName',\n>     default: 'Kent C.',\n>     type: 'text'\n>   },\n>   {\n>     key: 'lastName',\n>     default: 'Dodds',\n>     type: 'text'\n>   }\n> ];\n> Instead, what you want to do is:\n> \n> $scope.formData = {\n>   firstName: 'Kent C.',\n>   lastName: 'Dodds'\n> };\n> $scope.formFields = [\n>   {\n>     key: 'firstName',\n>     type: 'text'\n>   },\n>   {\n>     key: 'lastName',\n>     type: 'text'\n>   }\n> ];\n> So, instead of using the default, set the value of the result you pass in. Does that help?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n. Sounds like a great idea, Kent!\n\nDoing that now...\n\nBest,\n. Yes, that approach works for me (though I'd love to see a sample implementation that allows us to bring in our UI framework of choice on top of the base bootstrap implementation (we've been migrating from Angular-UI to Angustrap because it seems better supported).\n. kenctcdobbs, I think an implementation in AngularStrap and Angular-UI Bootstrap would be great.  Even support for the base bootstrap popover functionality would be great (though it'd need to be angularized anyway, so why reinvent the wheel?). But perhaps the base implementation for purists would also be ideal.\n. Per the discussion in #77, My bounty would be for either plain-vanilla bootstrap or an AngularStrap plugin set that allowed the help popovers to be added.\n. I did this on a separate project. Once the repos get split out, we'll clean it up and contribute an AngularStrap set of templates for Formly.\n. Note: We have abandoned the use of \"default\" properties altogether and just pass in a (sparsely) populated datagram which is fed into formData upon loading; this serves the same function and actually simplifies the formly json considerably.\n. It's still have an issue in that this default-loading doesn't work for \"select\" field types. That's more a bug than a drawback to this approach, however.\n. Would a higher bounty help to get this resolved quicker? It's something holding up a project and my developer is rolling off on friday.\n. We're seeing some unusual behavior after this fix; we're passing in name and value for our selects, and values seem to be getting replaced with ordinal numbers. Is there a demo of how we should be setting the starting value? Perhaps we're \"holding it wrong.\"\n. I guess, strictly speaking, you'd really just need to make Submitted Data editable and two-way bound to formData. But there's probably a little more complexity in pretty-printing the JSON.\n. Awesome!\n. Will do. \n\nBest,\n\n## \n\n## -- jas\n\nhttp://www.linkedin.com/in/jeffreysullivan\n\n**\\* Sent from my mobile device. Please excuse brevity and errors.  ***\n\n> On Sep 1, 2014, at 3:03 PM, \"Kent C. Dodds\" notifications@github.com wrote:\n> \n> This code doesn't follow our spacing style (we use tabs, that was not my decision...). Could you please make the necessary updates to use tabs instead of spaces?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n. I now have a new developer undoing all the customizations and extending formly via directives and custom templates (which is what I thought the former developer was doing).\n. Where does hideSubmit get checked in the 0.16 code? I want to make sure that it's not being changed somewhere after I've inspected it.\n. He did cut us over to using ng-if.  I will dig into this and see if he missed something.\n. He's missing that whole section in the formlyForms directive.\n\nHow stable is master to use?\n. Any thoughts on when 1.0 will be released?\n. Or, you could stop jumping on every shiny new framework that comes along...\n. Also, unless I'm just missing something, there appear to be three identical invocations of storing the template in the cache in the file (build glitch?).\n. So yes, the new version does submit buttons differently.  I guess this question is just about the (possibly) repeated template.\n. I saw that much, but there remain questions:\n1. I'd like to see a working example where the validator field is a function as opposed to an expression.\n2. The validator sets the validity of a specific field, but I don't see any way to indicate what it means. In the example above, I can conceive of creating a custom validator  that would flag the field as invalid when all of the 3 fields are empty, and then applying it to all 3 fields. However, from a UX perspective, this seems like it would be confusing to the user (since they won't necessarily know what it means that all 3 fields are marked as invalid/error). I suppose one could add a template field with additional information which has a hideExpression keyed to the validity of those fields (right?), though that feels like a bit of a hack.\n\nAll that validators can do is mark a field as valid or invalid, right? No way to message to the user when (or how) something is invalid?\n. We load our formly form json from a service, and no permutation that our devs has tried results in valid json when we try to embed a function in the json.  Simple example:\n\n```\n[\n    {\n        \"template\": \"<div><h3><b>Simple Title Goes Here</b></h3></div>\"\n    },\n    {\n        \"key\": \"sample\",\n        \"type\": \"text\",\n        \"label\": \"Simple user\",\n        \"validators\": [\n            {\n                \"name\": \"iAmSam\",\n                \"validate\": function(value) {\n                    console.log(\"name\", value);\n                    return\"sam\"===value;\n                }\n            }\n        ],\n        \"required\": false\n    }\n]\n```\n. We need valid json because the formly data is loaded via service and jsonparsed into an object.\n\nThe example I gave is a simplistic academic example (which it's easy to see how to do with an expression), but the team would like to be able to log values out in a validator and do complex multi-step actions when validating. \n\nIt's also not clear how to reference other formly field values from an expression (is it even possible?)\n\nThe examples with a function all add it directly to the formly formData though the $scope, which is not possible if you're loading your formly data on the fly as we are.\n. Thanks, Kent. I see how they can accomplish what they want to from that. \n\nGiven the value of formly as a declarative way to generate a form, it would be nice if there were some way to use functional validators from a declarative starting point.\n\nThis would entail some way to encode the functions in valid json and then expanding them to first-class functions at runtime.\n\nFirst thoughts would be using eval to create a function object from a string containing its source, which makes me shudder. I'm not sure there's any other way to accomplish it, though.\n. dangerously reasonable.\n. That was the only thing we came up with,but it felt like a kludge.\n\nThanks, Kent.\n. Ditto.\n. I have placed a bounty on this feature at BountySource: https://www.bountysource.com/issues/3049791-accessing-form-values-within-other-question-templates?utm_source=3049791&utm_medium=shield&utm_campaign=ISSUE_BADGE\n. You should take the bounty!\n. Is the demo updated to show how to use it? I didn't see a change to the demo code (but may have missed it).\nBest,\n\n## \n\n## -- jas\n\nhttp://www.linkedin.com/in/jeffreysullivan\n\nOn Aug 18, 2014, at 10:41 PM, \"Kent C. Dodds\" notifications@github.com wrote:\n\nI have merged this and run the build. Once it's published you can use a version, but until then you can point to this commit and it should work just fine for you.\n\u2014\nReply to this email directly or view it on GitHub.\n. I needed to approve the change.\nBest,\n\n## \n\n## -- jas\n\nhttp://www.linkedin.com/in/jeffreysullivan\n\nOn Aug 18, 2014, at 10:40 PM, \"Kent C. Dodds\" notifications@github.com wrote:\n\nFor some reason I am unable to claim the bounty on the website. Do you need to do something on your end?\n\u2014\nReply to this email directly or view it on GitHub.\n. Kent,\n\nI have a usage question for you.\n\nCurrently, we're populating a form with default values based on existing data in our database, but we cache it for offline use by our customers.\n\nWhen they edit a form \"in flight\", I'd like them to be able to re-load the form but with the current values in the resultset pre-populated. \u00a0My developer on this says that he doesn't think that's possible, but I'd hope that isn't true. I haven't had a chance to dig into it (not sure when I will), but I was wondering if there is a built-in facility for reloading the data output by formly back into the formly form, or if not, if you think that's a feasible feature to bounty?\nBest,\n\n## \n\n## -- jas\n\nhttp://www.linkedin.com/in/jeffreysullivan\n\nOn Aug 18, 2014, at 10:41 PM, \"Kent C. Dodds\" notifications@github.com wrote:\n\nI have merged this and run the build. Once it's published you can use a version, but until then you can point to this commit and it should work just fine for you.\n\u2014\nReply to this email directly or view it on GitHub.\n. Sure thing. \u00a0Here's the use case:\n1. We present a form to the user with some default values filled in from our database. The default values are injected into the form definition json at initial render time, so they exclusively use the \"default\" property to set initial values.\n2. The user completes the form, filling in missing values and changing defaults provided to their correct values.\n3. User submits the revised results data.\n4. Data is reviewed and, if not accepted by the processor (human judgement), is sent back for further data entry by the user. At this point, we want to reload the form with the values that were last submitted in the result, rather than the initial defaults that were extracted from the database.\n\nPut more simply, what I want is this:\n\nWe need the ability to populate the values in a formly form from the json results of that same form via a mechanism as simple as .loadValues(jsonValues) (or, obviously .loadValues(objectParsedFromJsonValues).\nBest,\n\n## \n\n## -- jas\n\nhttp://www.linkedin.com/in/jeffreysullivan\n\nOn Aug 19, 2014, at 09:55 AM, \"Kent C. Dodds\" notifications@github.com wrote:\n\nLooking at your question again, I think I misunderstood the use case. Could you give me an example of what you're actually trying to accomplish?\nI updated the demo to use the results of one field in the template of another. You can see how this looks on the demo. Enter anything into the \"first name\" field and see how that is bound to the custom template field below. But, again, I don't think this is what you were going for...\n\u2014\nReply to this email directly or view it on GitHub.\n. Kent,\n\nHow do you get select field types to load that way?\n\nOn Aug 19, 2014, at 10:26 AM, Kent C. Dodds notifications@github.com wrote:\n\n> So this is something that I did on a personal project. I used the same form for creating a post (for example) as I did for editing one. It's quite simple. Instead of using default you simply set the result object that you pass into fromly to have the values of your model. The default only takes effect when the result has no value. So, you probably have something like this:\n> \n> <formly-form result=\"formData\" fields=\"formFields\" options=\"formOptions\" ng-submit=\"onSubmit()\"></formly-form>\n> $scope.formData = {};\n> $scope.formFields = [\n>   {\n>     key: 'firstName',\n>     default: 'Kent C.',\n>     type: 'text'\n>   },\n>   {\n>     key: 'lastName',\n>     default: 'Dodds',\n>     type: 'text'\n>   }\n> ];\n> Instead, what you want to do is:\n> \n> $scope.formData = {\n>   firstName: 'Kent C.',\n>   lastName: 'Dodds'\n> };\n> $scope.formFields = [\n>   {\n>     key: 'firstName',\n>     type: 'text'\n>   },\n>   {\n>     key: 'lastName',\n>     type: 'text'\n>   }\n> ];\n> So, instead of using the default, set the value of the result you pass in. Does that help?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n. They do not, unfortunately.  Everything else loads fine with this approach except some custom types we added (like time picker), which is going to be on us to extend.\n\nI\u2019d be happy to place a small bounty on such a feature, though I\u2019m not precisely sure how to write it up.\n\nI had our code refactored to emit to the form data a select option (e.g., \"guardianState\":{\"name\":\"TX\",\"value\":\"15\u201d} ), but it is not selected, and the \u201cdefault\u201d option (which has always been more of a selectedIndex property than a default) don\u2019t of use in this case.\n\nOn Aug 20, 2014, at 5:21 PM, Kent C. Dodds notifications@github.com wrote:\n\n> Hmmm... On the top of my head I thought that would do it... Do they not? We may need to have a directive for selects to manage initial values like this then... I've been considering making a place for directive templates like this for use cases like this as well as the button group.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n. Will do.\n\nSuggested bounty?\n\nOn Aug 19, 2014, at 10:26 AM, Kent C. Dodds notifications@github.com wrote:\n\n> So this is something that I did on a personal project. I used the same form for creating a post (for example) as I did for editing one. It's quite simple. Instead of using default you simply set the result object that you pass into fromly to have the values of your model. The default only takes effect when the result has no value. So, you probably have something like this:\n> \n> <formly-form result=\"formData\" fields=\"formFields\" options=\"formOptions\" ng-submit=\"onSubmit()\"></formly-form>\n> $scope.formData = {};\n> $scope.formFields = [\n>   {\n>     key: 'firstName',\n>     default: 'Kent C.',\n>     type: 'text'\n>   },\n>   {\n>     key: 'lastName',\n>     default: 'Dodds',\n>     type: 'text'\n>   }\n> ];\n> Instead, what you want to do is:\n> \n> $scope.formData = {\n>   firstName: 'Kent C.',\n>   lastName: 'Dodds'\n> };\n> $scope.formFields = [\n>   {\n>     key: 'firstName',\n>     type: 'text'\n>   },\n>   {\n>     key: 'lastName',\n>     type: 'text'\n>   }\n> ];\n> So, instead of using the default, set the value of the result you pass in. Does that help?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n. Done\n\nOn Aug 19, 2014, at 10:26 AM, Kent C. Dodds notifications@github.com wrote:\n\n> So this is something that I did on a personal project. I used the same form for creating a post (for example) as I did for editing one. It's quite simple. Instead of using default you simply set the result object that you pass into fromly to have the values of your model. The default only takes effect when the result has no value. So, you probably have something like this:\n> \n> <formly-form result=\"formData\" fields=\"formFields\" options=\"formOptions\" ng-submit=\"onSubmit()\"></formly-form>\n> $scope.formData = {};\n> $scope.formFields = [\n>   {\n>     key: 'firstName',\n>     default: 'Kent C.',\n>     type: 'text'\n>   },\n>   {\n>     key: 'lastName',\n>     default: 'Dodds',\n>     type: 'text'\n>   }\n> ];\n> Instead, what you want to do is:\n> \n> $scope.formData = {\n>   firstName: 'Kent C.',\n>   lastName: 'Dodds'\n> };\n> $scope.formFields = [\n>   {\n>     key: 'firstName',\n>     type: 'text'\n>   },\n>   {\n>     key: 'lastName',\n>     type: 'text'\n>   }\n> ];\n> So, instead of using the default, set the value of the result you pass in. Does that help?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n. Sounds like a great idea, Kent!\n\nDoing that now...\n\nBest,\n. Yes, that approach works for me (though I'd love to see a sample implementation that allows us to bring in our UI framework of choice on top of the base bootstrap implementation (we've been migrating from Angular-UI to Angustrap because it seems better supported).\n. kenctcdobbs, I think an implementation in AngularStrap and Angular-UI Bootstrap would be great.  Even support for the base bootstrap popover functionality would be great (though it'd need to be angularized anyway, so why reinvent the wheel?). But perhaps the base implementation for purists would also be ideal.\n. Per the discussion in #77, My bounty would be for either plain-vanilla bootstrap or an AngularStrap plugin set that allowed the help popovers to be added.\n. I did this on a separate project. Once the repos get split out, we'll clean it up and contribute an AngularStrap set of templates for Formly.\n. Note: We have abandoned the use of \"default\" properties altogether and just pass in a (sparsely) populated datagram which is fed into formData upon loading; this serves the same function and actually simplifies the formly json considerably.\n. It's still have an issue in that this default-loading doesn't work for \"select\" field types. That's more a bug than a drawback to this approach, however.\n. Would a higher bounty help to get this resolved quicker? It's something holding up a project and my developer is rolling off on friday.\n. We're seeing some unusual behavior after this fix; we're passing in name and value for our selects, and values seem to be getting replaced with ordinal numbers. Is there a demo of how we should be setting the starting value? Perhaps we're \"holding it wrong.\"\n. I guess, strictly speaking, you'd really just need to make Submitted Data editable and two-way bound to formData. But there's probably a little more complexity in pretty-printing the JSON.\n. Awesome!\n. Will do. \n\nBest,\n\n## \n\n## -- jas\n\nhttp://www.linkedin.com/in/jeffreysullivan\n\n**\\* Sent from my mobile device. Please excuse brevity and errors.  ***\n\n> On Sep 1, 2014, at 3:03 PM, \"Kent C. Dodds\" notifications@github.com wrote:\n> \n> This code doesn't follow our spacing style (we use tabs, that was not my decision...). Could you please make the necessary updates to use tabs instead of spaces?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n. I now have a new developer undoing all the customizations and extending formly via directives and custom templates (which is what I thought the former developer was doing).\n. Where does hideSubmit get checked in the 0.16 code? I want to make sure that it's not being changed somewhere after I've inspected it.\n. He did cut us over to using ng-if.  I will dig into this and see if he missed something.\n. He's missing that whole section in the formlyForms directive.\n\nHow stable is master to use?\n. Any thoughts on when 1.0 will be released?\n. Or, you could stop jumping on every shiny new framework that comes along...\n. Also, unless I'm just missing something, there appear to be three identical invocations of storing the template in the cache in the file (build glitch?).\n. So yes, the new version does submit buttons differently.  I guess this question is just about the (possibly) repeated template.\n. I saw that much, but there remain questions:\n1. I'd like to see a working example where the validator field is a function as opposed to an expression.\n2. The validator sets the validity of a specific field, but I don't see any way to indicate what it means. In the example above, I can conceive of creating a custom validator  that would flag the field as invalid when all of the 3 fields are empty, and then applying it to all 3 fields. However, from a UX perspective, this seems like it would be confusing to the user (since they won't necessarily know what it means that all 3 fields are marked as invalid/error). I suppose one could add a template field with additional information which has a hideExpression keyed to the validity of those fields (right?), though that feels like a bit of a hack.\n\nAll that validators can do is mark a field as valid or invalid, right? No way to message to the user when (or how) something is invalid?\n. We load our formly form json from a service, and no permutation that our devs has tried results in valid json when we try to embed a function in the json.  Simple example:\n\n```\n[\n    {\n        \"template\": \"<div><h3><b>Simple Title Goes Here</b></h3></div>\"\n    },\n    {\n        \"key\": \"sample\",\n        \"type\": \"text\",\n        \"label\": \"Simple user\",\n        \"validators\": [\n            {\n                \"name\": \"iAmSam\",\n                \"validate\": function(value) {\n                    console.log(\"name\", value);\n                    return\"sam\"===value;\n                }\n            }\n        ],\n        \"required\": false\n    }\n]\n```\n. We need valid json because the formly data is loaded via service and jsonparsed into an object.\n\nThe example I gave is a simplistic academic example (which it's easy to see how to do with an expression), but the team would like to be able to log values out in a validator and do complex multi-step actions when validating. \n\nIt's also not clear how to reference other formly field values from an expression (is it even possible?)\n\nThe examples with a function all add it directly to the formly formData though the $scope, which is not possible if you're loading your formly data on the fly as we are.\n. Thanks, Kent. I see how they can accomplish what they want to from that. \n\nGiven the value of formly as a declarative way to generate a form, it would be nice if there were some way to use functional validators from a declarative starting point.\n\nThis would entail some way to encode the functions in valid json and then expanding them to first-class functions at runtime.\n\nFirst thoughts would be using eval to create a function object from a string containing its source, which makes me shudder. I'm not sure there's any other way to accomplish it, though.\n. dangerously reasonable.\n. That was the only thing we came up with,but it felt like a kludge.\n\nThanks, Kent.\n. ",
    "scull7": "Thank you for getting back to me so quickly.  I tried the `uniqueFormId` option, however, the error is still present. See below for the new service I made so that the forms have different IDs.  I also added\n`uniqueFormId: 'schemaForm'` to the original configuration service.\n\n#### Customer Config Service (new one)\n\n``` javascript\n/*global angular*/\n(function (ng) {\n  var module = ng.module('simpleDb.customer.form', [\n      'simpleDb.schema.resources'\n  ]);\n\n  module.factory('CustomerForm', [\n    'Schema',\n\n    function (Schema) {\n      var form = {\n            options: {\n              uniqueFormId: 'customerForm',\n              hideSubmit: true\n            },\n//            fields: Schema.queryAsForm()\n            fields: [\n              {\n                \"type\": \"text\",\n                \"key\": \"test\",\n                \"label\": \"Field 1\",\n                \"required\": true,\n                \"placeholder\": \"Enter field one\\'s data.\"\n              }\n            ]\n          }\n      ;\n      console.log(form);\n      return form;\n    }\n  ]);\n}(angular));\n```\n\n#### Error:\n\n```\nError: safe is undefined Parser.prototype.objectIndex/<.assign@http://localhost:3000/js/vendor.js:10664:9 parentValueWatch@http://localhost:3000/js/vendor.js:6555:23 $RootScopeProvider/this.$get</Scope.prototype.$digest@http://localhost:3000/js/vendor.js:12387:1 $RootScopeProvider/this.$get</Scope.prototype.$apply@http://localhost:3000/js/vendor.js:12660:13 textInputType/listener@http://localhost:3000/js/vendor.js:16855:9 createEventHandler/eventHandler/<@http://localhost:3000/js/vendor.js:2816:7 forEach@http://localhost:3000/js/vendor.js:320:7 createEventHandler/eventHandler@http://localhost:3000/js/vendor.js:2815:5\n\n\nreturn logFn.apply(console, args);\n```\n. I have not been able to re-create the issue, since that day :-1: The `safe` variable was from within angular.  \n. Thank you for getting back to me so quickly.  I tried the `uniqueFormId` option, however, the error is still present. See below for the new service I made so that the forms have different IDs.  I also added\n`uniqueFormId: 'schemaForm'` to the original configuration service.\n\n#### Customer Config Service (new one)\n\n``` javascript\n/*global angular*/\n(function (ng) {\n  var module = ng.module('simpleDb.customer.form', [\n      'simpleDb.schema.resources'\n  ]);\n\n  module.factory('CustomerForm', [\n    'Schema',\n\n    function (Schema) {\n      var form = {\n            options: {\n              uniqueFormId: 'customerForm',\n              hideSubmit: true\n            },\n//            fields: Schema.queryAsForm()\n            fields: [\n              {\n                \"type\": \"text\",\n                \"key\": \"test\",\n                \"label\": \"Field 1\",\n                \"required\": true,\n                \"placeholder\": \"Enter field one\\'s data.\"\n              }\n            ]\n          }\n      ;\n      console.log(form);\n      return form;\n    }\n  ]);\n}(angular));\n```\n\n#### Error:\n\n```\nError: safe is undefined Parser.prototype.objectIndex/<.assign@http://localhost:3000/js/vendor.js:10664:9 parentValueWatch@http://localhost:3000/js/vendor.js:6555:23 $RootScopeProvider/this.$get</Scope.prototype.$digest@http://localhost:3000/js/vendor.js:12387:1 $RootScopeProvider/this.$get</Scope.prototype.$apply@http://localhost:3000/js/vendor.js:12660:13 textInputType/listener@http://localhost:3000/js/vendor.js:16855:9 createEventHandler/eventHandler/<@http://localhost:3000/js/vendor.js:2816:7 forEach@http://localhost:3000/js/vendor.js:320:7 createEventHandler/eventHandler@http://localhost:3000/js/vendor.js:2815:5\n\n\nreturn logFn.apply(console, args);\n```\n. I have not been able to re-create the issue, since that day :-1: The `safe` variable was from within angular.  \n. ",
    "AminRahimi": "define model of schema form in  your scope\nlike this:\n$scope.formModel={};\n. define model of schema form in  your scope\nlike this:\n$scope.formModel={};\n. ",
    "testuserx": "Of course, not :) I am just wondering how to style entire form. There is possibility to style each element, using \"template\" or \"templateUrl\" in JSON data, but no possibility to template entire form.\n\nIf there are no built-in templating for entire form, how could it be achieved? Thank you!\n. I am creating JSON data with, for example, 10 fields. All these fields is showing correctly one by one. Now I want to style position of these fields. For example, show them in two columns. For example: http://www.wpsnippet.com/wp-content/uploads/2012/02/form-after.png\n. Of course, not :) I am just wondering how to style entire form. There is possibility to style each element, using \"template\" or \"templateUrl\" in JSON data, but no possibility to template entire form.\n\nIf there are no built-in templating for entire form, how could it be achieved? Thank you!\n. I am creating JSON data with, for example, 10 fields. All these fields is showing correctly one by one. Now I want to style position of these fields. For example, show them in two columns. For example: http://www.wpsnippet.com/wp-content/uploads/2012/02/form-after.png\n. ",
    "kamul": "Could you elaborate on the object holding the actual value? I mean, what changes would be required?\n\nI am trying to make custom select with the usage of ui-select, but 'clear' button has its own scope which is different from select (I don't understand why...), and assigning 'undefined' to \"value\" makes no effect. When I change ng-model from \"value\" to \"valueHolder.value\", clear button works as expected, but as a side effect formData has no value assigned to the select field. I have looked at the formly directives, but I can't see how the value is assigned to formData...\n\nHelp wiill be highly appreciated.\n. Thanks for fast reaction!\nThose changes were very helpful.\n. Could you elaborate on the object holding the actual value? I mean, what changes would be required?\n\nI am trying to make custom select with the usage of ui-select, but 'clear' button has its own scope which is different from select (I don't understand why...), and assigning 'undefined' to \"value\" makes no effect. When I change ng-model from \"value\" to \"valueHolder.value\", clear button works as expected, but as a side effect formData has no value assigned to the select field. I have looked at the formly directives, but I can't see how the value is assigned to formData...\n\nHelp wiill be highly appreciated.\n. Thanks for fast reaction!\nThose changes were very helpful.\n. ",
    "jmgirao": "I have to compare two fields in the form. The user inserts the password and then the confirmation.\nCan i compare two fields with the formly?\n. I have to compare two fields in the form. The user inserts the password and then the confirmation.\nCan i compare two fields with the formly?\n. ",
    "truffleshuffle": "Sorry, I'm a python guy, when I said list earlier I meant an array.  \n\nHere's the templates I used for single & multiselect.  Both of these can pull data from an array.  \n\n`$templateCache.put('static/partials/forms/formly_select_multi.html', '<div class=\"form-group\"><label for=\"scope\" class=\"control-label\">{{options.label || \\'Select\\'}} {{options.required ? \\'*\\' : \\'\\'}}</label><select multiple class=\"form-control\" id={{id}} ng-model=value ng-required=options.required ng-disabled=options.disabled  ng-init=\"value = options.default\" ng-options=\"option for option in options.options\"></select></div>');`\n\n `$templateCache.put('static/partials/forms/formly_select_single.html', '<div class=\"form-group\"><label for=\"scope\" class=\"control-label\">{{options.label || \\'Select\\'}} {{options.required ? \\'*\\' : \\'\\'}}</label><select class=\"form-control\" id={{id}} ng-model=value ng-required=options.required ng-disabled=options.disabled ng-init=\"value = options.default\" ng-options=\"option for option in options.options\"></select></div>');\n});`\n\nYou can also feed it defaults using an array like so:\n\n`{ key: 'multitest', type: 'select_multi', label: 'multiselect', options: org_types_list, required: true, default:[\"Bank\", \"Other\"]},`\n\n`{ key: 'singletest', type: 'select_single', label: 'singleselect', options: usStates, required: true, default:'Texas'},`\n\nAlso, don't forget if you're going to use the templates above you need to feed them to your formlyTemplateProvider in your apps .config like so:\n\n```\n` formlyTemplateProvider.setTemplateUrl('select_multi', 'static/partials/forms/formly_select_multi.html');\n    formlyTemplateProvider.getTemplateUrl('select_multi') === 'static/partials/forms/formly_select_multi.html';\n    formlyTemplateProvider.setTemplateUrl('select_single', 'static/partials/forms/formly_select_single.html');\n    formlyTemplateProvider.getTemplateUrl('select_single') === 'static/partials/forms/formly_select_single.html';`\n```\n. Sorry, I'm a python guy, when I said list earlier I meant an array.  \n\nHere's the templates I used for single & multiselect.  Both of these can pull data from an array.  \n\n`$templateCache.put('static/partials/forms/formly_select_multi.html', '<div class=\"form-group\"><label for=\"scope\" class=\"control-label\">{{options.label || \\'Select\\'}} {{options.required ? \\'*\\' : \\'\\'}}</label><select multiple class=\"form-control\" id={{id}} ng-model=value ng-required=options.required ng-disabled=options.disabled  ng-init=\"value = options.default\" ng-options=\"option for option in options.options\"></select></div>');`\n\n `$templateCache.put('static/partials/forms/formly_select_single.html', '<div class=\"form-group\"><label for=\"scope\" class=\"control-label\">{{options.label || \\'Select\\'}} {{options.required ? \\'*\\' : \\'\\'}}</label><select class=\"form-control\" id={{id}} ng-model=value ng-required=options.required ng-disabled=options.disabled ng-init=\"value = options.default\" ng-options=\"option for option in options.options\"></select></div>');\n});`\n\nYou can also feed it defaults using an array like so:\n\n`{ key: 'multitest', type: 'select_multi', label: 'multiselect', options: org_types_list, required: true, default:[\"Bank\", \"Other\"]},`\n\n`{ key: 'singletest', type: 'select_single', label: 'singleselect', options: usStates, required: true, default:'Texas'},`\n\nAlso, don't forget if you're going to use the templates above you need to feed them to your formlyTemplateProvider in your apps .config like so:\n\n```\n` formlyTemplateProvider.setTemplateUrl('select_multi', 'static/partials/forms/formly_select_multi.html');\n    formlyTemplateProvider.getTemplateUrl('select_multi') === 'static/partials/forms/formly_select_multi.html';\n    formlyTemplateProvider.setTemplateUrl('select_single', 'static/partials/forms/formly_select_single.html');\n    formlyTemplateProvider.getTemplateUrl('select_single') === 'static/partials/forms/formly_select_single.html';`\n```\n. ",
    "cfreyre": "I highly recommend you give it a chance, with your knowledge of Angularjs is more than enough to dominate IONIC.  I'll start working on this project.... Thanks \n. @astrism \n\nI'm definitely interested in a solution for WEB and Mobile rendering. \n\nI could contribute in the ionicframework part, i will study in detail the code and your solution for the configuration process (and their individual settings for each template) \n\nThank you\n. I highly recommend you give it a chance, with your knowledge of Angularjs is more than enough to dominate IONIC.  I'll start working on this project.... Thanks \n. @astrism \n\nI'm definitely interested in a solution for WEB and Mobile rendering. \n\nI could contribute in the ionicframework part, i will study in detail the code and your solution for the configuration process (and their individual settings for each template) \n\nThank you\n. ",
    "charandas": ":thumbsup:\n. Yes, this did resolve my concern. :thumbsup: \n. I think `formlyDynamicName`  directive was not meant to be used with `formlyForm`. Simple enough.\n\nThe readme trips me up a little bit, as it talks about naming the form, and jumps into specifying form names for custom input fields.\n\nTo layout my problem, I was trying to go with an `ng-include` template that defines `formly-form`s and want to reuse the same template but with different fields, options, data and name. The first three are successfully able to be bound to scope variables, but the name only likes literals. Could we add the ability for dynamic form names? If so, what is `formlyDynamicName` about in the first place?\n. @astrism This was added only recently, correct? Could you provide some insights into the usage of `formlyDynamicName`?\n. Ok. Renaming this issue to angular 1.3 with interpolatable form name not working.\n\nReproduced [here](http://plnkr.co/edit/9ITRera58qzCaaaXsKT0?p=info).\n. [**EDIT**] ~~I did notice that hyphenated form names don't work with angular 1.3. So there is definitely stuff that they need to fix but with base minimal name on scope,~~  angular 1.3 interpolates fine, so hopefully formly can achieve the same.\n\nI couldn't figure where `formlyForm` directive propagates the attributes to the inner `<form>` element, if I could have, could have worked on a PR.\n. Plain forms with 1.3 also take local values such as `{{module + '-threholds'}}` which can't be 2-way bound to. Hopefully, that benefit can remain when going through formly.\n. Thanks @kentcdodds for the question.\n\nAs noted on this angular error [page](https://docs.angularjs.org/error/$compile/nonassign), look for the exact text match `localValue`, that's what I mean by it. Meaning its created on the heap like all JS objects but doesn't necessarily exists on scope, so cannot be written back to.\n\nI don't want to be forced to create scope variables for naming the forms, hopefully it can just take the interpolation of whatever, even if its a `localValue`.\n. This is a great workaround. Cool, I am satisfied. :+1: \n. :thumbsup:\n. Yes, this did resolve my concern. :thumbsup: \n. I think `formlyDynamicName`  directive was not meant to be used with `formlyForm`. Simple enough.\n\nThe readme trips me up a little bit, as it talks about naming the form, and jumps into specifying form names for custom input fields.\n\nTo layout my problem, I was trying to go with an `ng-include` template that defines `formly-form`s and want to reuse the same template but with different fields, options, data and name. The first three are successfully able to be bound to scope variables, but the name only likes literals. Could we add the ability for dynamic form names? If so, what is `formlyDynamicName` about in the first place?\n. @astrism This was added only recently, correct? Could you provide some insights into the usage of `formlyDynamicName`?\n. Ok. Renaming this issue to angular 1.3 with interpolatable form name not working.\n\nReproduced [here](http://plnkr.co/edit/9ITRera58qzCaaaXsKT0?p=info).\n. [**EDIT**] ~~I did notice that hyphenated form names don't work with angular 1.3. So there is definitely stuff that they need to fix but with base minimal name on scope,~~  angular 1.3 interpolates fine, so hopefully formly can achieve the same.\n\nI couldn't figure where `formlyForm` directive propagates the attributes to the inner `<form>` element, if I could have, could have worked on a PR.\n. Plain forms with 1.3 also take local values such as `{{module + '-threholds'}}` which can't be 2-way bound to. Hopefully, that benefit can remain when going through formly.\n. Thanks @kentcdodds for the question.\n\nAs noted on this angular error [page](https://docs.angularjs.org/error/$compile/nonassign), look for the exact text match `localValue`, that's what I mean by it. Meaning its created on the heap like all JS objects but doesn't necessarily exists on scope, so cannot be written back to.\n\nI don't want to be forced to create scope variables for naming the forms, hopefully it can just take the interpolation of whatever, even if its a `localValue`.\n. This is a great workaround. Cool, I am satisfied. :+1: \n. ",
    "jonespen": "Should be fixed now I hope.\n. Should be fixed now I hope.\n. ",
    "rajhans84": "I have just added a form on my page and fields to it.  App has following:\napp =angular.module('myapp', ['ui.bootstrap', 'ui.router','ngDialog','ngSanitize','angular-loading-bar','formly']);\n$scope.formAddressFields =[\n        {\n            key: 'addresss-flatnumber',\n            type: 'text',\n            id:\"addresss-flatnumber\",\n            label: 'Flat Number',\n            required: false,\n            disabled: false,\n            hideExpression:'!asid',\n            watch: {\n                expression: function(field){return scope.data.result.account.serviceLocation.streetSuffix;},\n                listener: function(field, _new) {\n                    field.default = _new;\n                }\n            }\n        },\n        {\n            key: 'addresss-streetnumber',\n            type: 'text',\n            id:\"addresss-streetnumber\",\n            label: 'Street Number',\n            required: false,\n            disabled: false,\n            watch: {\n                expression: function(field){return scope.data.result.account.serviceLocation.streetNumber;},\n                listener: function(field, _new) {\n                    field.default = _new;\n                }\n            }\n        },\n        {\n            key: 'addresss-streetname',\n            type: 'text',\n            label: 'Street Name',\n            required: false,\n            disabled: false,\n            hideExpression:'!service_type',\n            watch: {\n                expression: function(field){return scope.data.result.account.serviceLocation.streetName;},\n                listener: function(field, _new) {\n                    field.default = _new;\n                }\n            }\n        },\n        {\n            key: 'addresss-streettype',\n            type: 'text',\n            label: 'Street Type',\n            required: false,\n            disabled: false,\n\n```\n        watch: {\n            expression: function(field){return scope.data.result.account.serviceLocation.streetType;},\n            listener: function(field, _new) {\n                field.default = _new;\n            }\n        }\n    },\n    {\n        key: 'addresss-leveltype',\n        type: 'text',\n        label: 'Level Type',\n        required: false,\n        disabled: false,\n        watch: {\n            expression: function(field){return scope.data.result.account.serviceLocation.buildingFloor;},\n            listener: function(field, _new) {\n                field.default = _new;\n            }\n        }\n    },\n    {\n        key: 'addresss-buildingname',\n        type: 'text',\n        label: 'Building Name',\n        required: false,\n        disabled: false,\n        watch: {\n            expression: function(field){return scope.data.result.account.serviceLocation.buildingName;},\n            listener: function(field, _new) {\n                field.default = _new;\n            }\n        }\n    },\n    {\n        key: 'addresss-suburb',\n        type: 'text',\n        label: 'Suburb',\n        required: false,\n        disabled: false,\n        watch: {\n            expression: function(field){return scope.data.result.account.serviceLocation.suburb;},\n            listener: function(field, _new) {\n                field.default = _new;\n            }\n        }\n    },\n    {\n        key: 'addresss-city',\n        type: 'text',\n        label: 'City',\n        required: false,\n        disabled: false,\n        watch: {\n            expression: function(field){return scope.data.result.account.serviceLocation.city;},\n            listener: function(field, _new) {\n                field.default = _new;\n            }\n        }\n    },\n    {\n        key: 'addresss-sitedirections',\n        type: 'text',\n        label: 'Site Directions',\n        required: false,\n        disabled: false,\n        watch: {\n            expression: function(field){return scope.data.result.account.serviceLocation.direction;},\n            listener: function(field, _new) {\n                field.default = _new;\n            }\n        }\n    },\n    {\n        key: 'addresss-siteinstructions',\n        type: 'text',\n        label: 'Site Instructions',\n        required: false,\n        disabled: false\n    },\n    {\n        key: 'addresss-sitewarnings',\n        type: 'text',\n        label: 'Site Warnings',\n        required: false,\n        disabled: false\n    }];\n```\n\n$scope.AddressOptions = {\n        uniqueFormId: 'address-section',\n        hideSubmit: true,\n        submitCopy: ''\n    };\n$scope.formData = {};\nIncluded file:\n\n<script src=\"scripts/vendor/formly/formly.bootstrap.js\"></script>\n\nBut I can see the same error is coming on the demo page of the module : \nhttp://nimbly.github.io/angular-formly/\nI am using this form on ngDialog and when the dialog opens and tries to render the form, the error comes.\nI am doing nothing fancy but the simple stuff to get it working. I am using firefox 31.0 on mac. \nLet me know if more info is required.\n. Thanks guys, that fixed the issue. Keep up the good work .. Cheersss :)\n. I have just added a form on my page and fields to it.  App has following:\napp =angular.module('myapp', ['ui.bootstrap', 'ui.router','ngDialog','ngSanitize','angular-loading-bar','formly']);\n$scope.formAddressFields =[\n        {\n            key: 'addresss-flatnumber',\n            type: 'text',\n            id:\"addresss-flatnumber\",\n            label: 'Flat Number',\n            required: false,\n            disabled: false,\n            hideExpression:'!asid',\n            watch: {\n                expression: function(field){return scope.data.result.account.serviceLocation.streetSuffix;},\n                listener: function(field, _new) {\n                    field.default = _new;\n                }\n            }\n        },\n        {\n            key: 'addresss-streetnumber',\n            type: 'text',\n            id:\"addresss-streetnumber\",\n            label: 'Street Number',\n            required: false,\n            disabled: false,\n            watch: {\n                expression: function(field){return scope.data.result.account.serviceLocation.streetNumber;},\n                listener: function(field, _new) {\n                    field.default = _new;\n                }\n            }\n        },\n        {\n            key: 'addresss-streetname',\n            type: 'text',\n            label: 'Street Name',\n            required: false,\n            disabled: false,\n            hideExpression:'!service_type',\n            watch: {\n                expression: function(field){return scope.data.result.account.serviceLocation.streetName;},\n                listener: function(field, _new) {\n                    field.default = _new;\n                }\n            }\n        },\n        {\n            key: 'addresss-streettype',\n            type: 'text',\n            label: 'Street Type',\n            required: false,\n            disabled: false,\n\n```\n        watch: {\n            expression: function(field){return scope.data.result.account.serviceLocation.streetType;},\n            listener: function(field, _new) {\n                field.default = _new;\n            }\n        }\n    },\n    {\n        key: 'addresss-leveltype',\n        type: 'text',\n        label: 'Level Type',\n        required: false,\n        disabled: false,\n        watch: {\n            expression: function(field){return scope.data.result.account.serviceLocation.buildingFloor;},\n            listener: function(field, _new) {\n                field.default = _new;\n            }\n        }\n    },\n    {\n        key: 'addresss-buildingname',\n        type: 'text',\n        label: 'Building Name',\n        required: false,\n        disabled: false,\n        watch: {\n            expression: function(field){return scope.data.result.account.serviceLocation.buildingName;},\n            listener: function(field, _new) {\n                field.default = _new;\n            }\n        }\n    },\n    {\n        key: 'addresss-suburb',\n        type: 'text',\n        label: 'Suburb',\n        required: false,\n        disabled: false,\n        watch: {\n            expression: function(field){return scope.data.result.account.serviceLocation.suburb;},\n            listener: function(field, _new) {\n                field.default = _new;\n            }\n        }\n    },\n    {\n        key: 'addresss-city',\n        type: 'text',\n        label: 'City',\n        required: false,\n        disabled: false,\n        watch: {\n            expression: function(field){return scope.data.result.account.serviceLocation.city;},\n            listener: function(field, _new) {\n                field.default = _new;\n            }\n        }\n    },\n    {\n        key: 'addresss-sitedirections',\n        type: 'text',\n        label: 'Site Directions',\n        required: false,\n        disabled: false,\n        watch: {\n            expression: function(field){return scope.data.result.account.serviceLocation.direction;},\n            listener: function(field, _new) {\n                field.default = _new;\n            }\n        }\n    },\n    {\n        key: 'addresss-siteinstructions',\n        type: 'text',\n        label: 'Site Instructions',\n        required: false,\n        disabled: false\n    },\n    {\n        key: 'addresss-sitewarnings',\n        type: 'text',\n        label: 'Site Warnings',\n        required: false,\n        disabled: false\n    }];\n```\n\n$scope.AddressOptions = {\n        uniqueFormId: 'address-section',\n        hideSubmit: true,\n        submitCopy: ''\n    };\n$scope.formData = {};\nIncluded file:\n\n<script src=\"scripts/vendor/formly/formly.bootstrap.js\"></script>\n\nBut I can see the same error is coming on the demo page of the module : \nhttp://nimbly.github.io/angular-formly/\nI am using this form on ngDialog and when the dialog opens and tries to render the form, the error comes.\nI am doing nothing fancy but the simple stuff to get it working. I am using firefox 31.0 on mac. \nLet me know if more info is required.\n. Thanks guys, that fixed the issue. Keep up the good work .. Cheersss :)\n. ",
    "ghost": "I kind of hacked my way to a solution. What I did was include the non-minified version and added my $HTTP function to the fieldController. This is obviously not very scalable, but it fixed the problem for the time being. Is there any way to define this kind of functionality with the formlyTemplate(Url)Provider?\n. I actually implemented the typeahead that way. I set and get the 'typeahead' with the templateurlprovider from formly. In that template I have a '<\\typeahead options='options'><\\/typeahead>' so I can declare the options in my directive aswell. The typeahead template is fairy standard, and it gets the $http functionality from the assigned (directive-)controller. (I might move this to a service/factory eventually). However, it works! \n\nThanks for the push in the right direction!\n. Did you find a solution?\n. @b-barry I'm sorry I don't understand you...?\n. Ah ok sure. But I feel the issue can be opened because there hasn't been an actual solution to your problem. But reopening this issue would just be noisy so I'll create another issue about this.\n. I kind of hacked my way to a solution. What I did was include the non-minified version and added my $HTTP function to the fieldController. This is obviously not very scalable, but it fixed the problem for the time being. Is there any way to define this kind of functionality with the formlyTemplate(Url)Provider?\n. I actually implemented the typeahead that way. I set and get the 'typeahead' with the templateurlprovider from formly. In that template I have a '<\\typeahead options='options'><\\/typeahead>' so I can declare the options in my directive aswell. The typeahead template is fairy standard, and it gets the $http functionality from the assigned (directive-)controller. (I might move this to a service/factory eventually). However, it works! \n\nThanks for the push in the right direction!\n. Did you find a solution?\n. @b-barry I'm sorry I don't understand you...?\n. Ah ok sure. But I feel the issue can be opened because there hasn't been an actual solution to your problem. But reopening this issue would just be noisy so I'll create another issue about this.\n. ",
    "antoinepairet": "Please see my pull request (#61)\n. Here is a plunker with the fix: http://plnkr.co/edit/gVBqXrBttCAuaXY6w6XY\n. The fix is straightforward. Could you merge this pull request and publish a new version to bower? Thanks in adavance.\n\nFrom [Angular doc](https://docs.angularjs.org/api/ng/directive/select), the patterns for ng-options include:\n`label group by group for value in array`  // current code base\n`select as label group by group for value in array` // my suggested fix\n\nHaving `option.name group by option.group for option in options.options` will save an array element (option) to the model. While having `option.value as option.name group by option.group for option in options.options` will save the value property of array element to the model. There is no change to the UI, the dropdown is populated with `option.name`.\n\nThanks in advance\n. @astrism having the key/value allows to use angular-formly for localised apps. The `name` will be translated into several languages and will depend on the user preferences. The `key` will keep the model and the db safe ;-).\n. Let me know if I can help\nOn 26 Aug 2014 22:51, \"Grant Helton\" notifications@github.com wrote:\n\n> That works for me, we'll get this update in to 0.1.0, and once the docs\n> and stuff are updated.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/nimbly/angular-formly/pull/80#issuecomment-53489672.\n. done, thanks\n. For anyone encountering the issue, the link to the doc is: http://docs.angular-formly.com/docs/tips \n\n``` js\napiCheck.globalConfig.disabled = true;\n```\n. Please see my pull request (#61)\n. Here is a plunker with the fix: http://plnkr.co/edit/gVBqXrBttCAuaXY6w6XY\n. The fix is straightforward. Could you merge this pull request and publish a new version to bower? Thanks in adavance.\n\nFrom [Angular doc](https://docs.angularjs.org/api/ng/directive/select), the patterns for ng-options include:\n`label group by group for value in array`  // current code base\n`select as label group by group for value in array` // my suggested fix\n\nHaving `option.name group by option.group for option in options.options` will save an array element (option) to the model. While having `option.value as option.name group by option.group for option in options.options` will save the value property of array element to the model. There is no change to the UI, the dropdown is populated with `option.name`.\n\nThanks in advance\n. @astrism having the key/value allows to use angular-formly for localised apps. The `name` will be translated into several languages and will depend on the user preferences. The `key` will keep the model and the db safe ;-).\n. Let me know if I can help\nOn 26 Aug 2014 22:51, \"Grant Helton\" notifications@github.com wrote:\n\n> That works for me, we'll get this update in to 0.1.0, and once the docs\n> and stuff are updated.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/nimbly/angular-formly/pull/80#issuecomment-53489672.\n. done, thanks\n. For anyone encountering the issue, the link to the doc is: http://docs.angular-formly.com/docs/tips \n\n``` js\napiCheck.globalConfig.disabled = true;\n```\n. ",
    "mwawrusch": "You might also want to check out coveralls.io , like travis it's free for open source projects and provides code coverage analysis, e.g. how much of the code is actually tested. Haven't used it for angular projects but it should work.\n. Sorry, was offline for a bit.\nI think the easiest api would be to add a min and a max field to each fields definition, defaulting to 0 .. 1. Everything else could be derived from that. For example, 4 .. 4 would expect an array as underlying value field, and renders 4 fields, one for each value. something like 1..5 on the other hand would only present one input field, and once something is entered there, add another input field below.\n\nAs a final remark, the same should work with sub forms as well (think address input on the iphone).\n. Let me see what I can do. \n. Got cought up doing other stuff. Will implement this next week and see how\nit goes.\n\nOn Saturday, August 30, 2014, Kent C. Dodds notifications@github.com\nwrote:\n\n> @mwawrusch https://github.com/mwawrusch, any progress on this? Is there\n> any reason to keep this issue open?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/nimbly/angular-formly/issues/76#issuecomment-53978456\n> .\n\n## \n\nMartin Wawrusch\np: +1 310 404 1698\n\nmodeista.com - Connect With Style\nfanignite.com - ALPHA - Create Your Mobile App In 30 Seconds\nwawrusch.com - Personal Blog\ncodedoctor.co - Professional Blog\n\nFollow me on twitter at @MartinWawrusch http://twitter.com/MartinWawrusch\n. why not do the right thing and create a free angular-formly organization\nand group all products under this?\n\nOn Tue, Aug 26, 2014 at 2:16 PM, Kent C. Dodds notifications@github.com\nwrote:\n\n> I think that nimbly should create the bootstrap and vanilla repos. Then\n> other people could create their own template \"plugin\" repos as needed. But\n> we already have the templates for those so we should just keep those with\n> nimbly. I don't think a new org is necessary.\n> \n> I think we should take the opportunity with 0.1.0 to break as much as we\n> need to get things where we want them to be right now. I'm hoping that the\n> core will change very little after this, which is why I like splitting out\n> the templates. Those repos will likely change a lot more than this one.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/nimbly/angular-formly/issues/77#issuecomment-53493819\n> .\n\n## \n\nMartin Wawrusch\np: +1 310 404 1698\n\nmodeista.com - Connect With Style\nfanignite.com - ALPHA - Create Your Mobile App In 30 Seconds\nwawrusch.com - Personal Blog\ncodedoctor.co - Professional Blog\n\nFollow me on twitter at @MartinWawrusch http://twitter.com/MartinWawrusch\n. You might also want to check out coveralls.io , like travis it's free for open source projects and provides code coverage analysis, e.g. how much of the code is actually tested. Haven't used it for angular projects but it should work.\n. Sorry, was offline for a bit.\nI think the easiest api would be to add a min and a max field to each fields definition, defaulting to 0 .. 1. Everything else could be derived from that. For example, 4 .. 4 would expect an array as underlying value field, and renders 4 fields, one for each value. something like 1..5 on the other hand would only present one input field, and once something is entered there, add another input field below.\n\nAs a final remark, the same should work with sub forms as well (think address input on the iphone).\n. Let me see what I can do. \n. Got cought up doing other stuff. Will implement this next week and see how\nit goes.\n\nOn Saturday, August 30, 2014, Kent C. Dodds notifications@github.com\nwrote:\n\n> @mwawrusch https://github.com/mwawrusch, any progress on this? Is there\n> any reason to keep this issue open?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/nimbly/angular-formly/issues/76#issuecomment-53978456\n> .\n\n## \n\nMartin Wawrusch\np: +1 310 404 1698\n\nmodeista.com - Connect With Style\nfanignite.com - ALPHA - Create Your Mobile App In 30 Seconds\nwawrusch.com - Personal Blog\ncodedoctor.co - Professional Blog\n\nFollow me on twitter at @MartinWawrusch http://twitter.com/MartinWawrusch\n. why not do the right thing and create a free angular-formly organization\nand group all products under this?\n\nOn Tue, Aug 26, 2014 at 2:16 PM, Kent C. Dodds notifications@github.com\nwrote:\n\n> I think that nimbly should create the bootstrap and vanilla repos. Then\n> other people could create their own template \"plugin\" repos as needed. But\n> we already have the templates for those so we should just keep those with\n> nimbly. I don't think a new org is necessary.\n> \n> I think we should take the opportunity with 0.1.0 to break as much as we\n> need to get things where we want them to be right now. I'm hoping that the\n> core will change very little after this, which is why I like splitting out\n> the templates. Those repos will likely change a lot more than this one.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/nimbly/angular-formly/issues/77#issuecomment-53493819\n> .\n\n## \n\nMartin Wawrusch\np: +1 310 404 1698\n\nmodeista.com - Connect With Style\nfanignite.com - ALPHA - Create Your Mobile App In 30 Seconds\nwawrusch.com - Personal Blog\ncodedoctor.co - Professional Blog\n\nFollow me on twitter at @MartinWawrusch http://twitter.com/MartinWawrusch\n. ",
    "kaylarose": "Any progress on array support? Especially the idea of the sub-forms? For instance, a decent example UI-use-case [the syntaxt is not great] is: http://textalk.github.io/angular-schema-form/examples/bootstrap-example.html under the \"Array\" option in the drop down.\n. That would be great, thanks! My preferred scenario is binding subforms/fieldsets to a model's property of type: Array i.e. `user.comments[]`. But even an example of binding a single repeating fieldset to an array of models i.e. `comments[]` would be helpful. \n\nThe ultimate intent is to have a component that can be used to represent an collection of items, which you can Add/Remove/Edit independently.\n\nNormally if binding a form manually, I would use an `ng-repeat` in the template for any `model.property[]`, and do something like this in the controller:\n\n```\n  $scope.add = function(comment) {\n    $scope.post.comments.push(comment)\n    $scope.post.$update.then(function() { \n         // do something else\n    });\n  };\n\n  $scope.remove = function(commentIndex) {\n    $scope.post.comments.splice(commentIndex, -1)\n    $scope.post.$update.then(function() { \n         // do something else\n    });\n  };\n```\n. Thanks for the examples. So I started down the `formly-form` within a template idea yesterday. However - as far as I can tell - there is some `$scope` strangeness going on that I can't quite pin-down. \n\nIn my case, it looks the watcher on the form `result` is firing from the correct field-scope in the correct sub-form. But when it goes to call `field.runExpressions && field.runExpressions(newResult)`, the $scope inside the formlyField directive is always a different field-scope within the last sub-form iteration (instead of the expected sub-form). I have a feeling that it's something with my template logic or mis-groking of directive scopes....\n\nI started a brief example here: \nhttp://plnkr.co/edit/9wT5dt2gq9S2StPavkIU?p=preview\n. Re: Run Expressions, I was referring to the calls here: https://github.com/formly-js/angular-formly/blob/b783902d26e6e8e27010b9792edea89693842582/dist/formly.js#L187 . I orginally traced down the scope issues in my project which links against master from a few days ago. \n\nUpdated to link against master & vanilla tpl master: http://plnkr.co/edit/9wT5dt2gq9S2StPavkIU?p=preview . It should work now and demonstrate the issue. If you look in the console, you can see that after the sub-forms are initted, in the `\"X Watched:\"` scope is correctly bound, but the `\"X Expression Evaled:\"` is not. \n\nI also included an example of using a function-call to provide the fields - which should theoretically fix the issue of the each subform binding to the same set of fields, but actually causes an infinite digest loop in Angular.\n\nWhat you have above is more or less what I am trying to do (the additional iterators were primarily for debugging purposes), but in a generic way, where I can leverage the normal formly JSON \"schema\" for subforms rather than explicitly breaking them out of the schema into their own location, and having to \"know\" about how to assemble them. This will quickly become painful for multiple collections within the same form (i.e. Person form contains: `Person.Phone[]` and `Person.Address[]`) or nested collections (i.e. `Company.Location[].Address[]`).\n. Thanks for that! That seems to work better, and the digest doesn't spin out of control. However, it still has the same issue where after the initial form render, every field that is NOT in the last subform, seems to execute the propertyExpressions in the scope of the last subform. So for instance, when the three subforms render in your plunk above, the first two should have a Subject and Body field, and the last sub-form should only show the Subject Field (as the body field for each has an expression of `hide: '!result.subject'`) - but in reality all three are hiding the Body field, because they are only running the expressions in the scope of the last form/field.\n\nIt's pretty strange. I spent some time digging into it tonight, and regardless of how you prevent the fields from being the actual same array (tried `angular.copy`, the `getFields()` etc.) the run expressions still all end up bound to the same (last) scope.\n. Great, thanks again @kentcdodds . And I agree re: schema-form, and I have really been enjoying the simplicity of formly so far - and it was my main reason for choosing it. This is the only snag I have run into that wasn't easy to solve, and even this I attribute to the fact that it was not accounted for as part of the initial feature set. Major kudos. Thanks again for all your help.\n\nLet me know if you have any questions or I can help test anything out.\n. Nice find! I was thinking a copy of the whole `fields` would do it, but I guess that scope inheritance was what was killing me. It's working as expected now. I am going to be implementing a whole bunch of subforms, nested subforms etc. over the next few days so will let you know if I run into any other quirks, and will post any simplifications of the template/example I come up with - in-case it's of use to anyone else.\n\nTangential question: when you use `::foo` in your example code - what is that intended for?\n\nThanks again for all your help.\n. Any progress on array support? Especially the idea of the sub-forms? For instance, a decent example UI-use-case [the syntaxt is not great] is: http://textalk.github.io/angular-schema-form/examples/bootstrap-example.html under the \"Array\" option in the drop down.\n. That would be great, thanks! My preferred scenario is binding subforms/fieldsets to a model's property of type: Array i.e. `user.comments[]`. But even an example of binding a single repeating fieldset to an array of models i.e. `comments[]` would be helpful. \n\nThe ultimate intent is to have a component that can be used to represent an collection of items, which you can Add/Remove/Edit independently.\n\nNormally if binding a form manually, I would use an `ng-repeat` in the template for any `model.property[]`, and do something like this in the controller:\n\n```\n  $scope.add = function(comment) {\n    $scope.post.comments.push(comment)\n    $scope.post.$update.then(function() { \n         // do something else\n    });\n  };\n\n  $scope.remove = function(commentIndex) {\n    $scope.post.comments.splice(commentIndex, -1)\n    $scope.post.$update.then(function() { \n         // do something else\n    });\n  };\n```\n. Thanks for the examples. So I started down the `formly-form` within a template idea yesterday. However - as far as I can tell - there is some `$scope` strangeness going on that I can't quite pin-down. \n\nIn my case, it looks the watcher on the form `result` is firing from the correct field-scope in the correct sub-form. But when it goes to call `field.runExpressions && field.runExpressions(newResult)`, the $scope inside the formlyField directive is always a different field-scope within the last sub-form iteration (instead of the expected sub-form). I have a feeling that it's something with my template logic or mis-groking of directive scopes....\n\nI started a brief example here: \nhttp://plnkr.co/edit/9wT5dt2gq9S2StPavkIU?p=preview\n. Re: Run Expressions, I was referring to the calls here: https://github.com/formly-js/angular-formly/blob/b783902d26e6e8e27010b9792edea89693842582/dist/formly.js#L187 . I orginally traced down the scope issues in my project which links against master from a few days ago. \n\nUpdated to link against master & vanilla tpl master: http://plnkr.co/edit/9wT5dt2gq9S2StPavkIU?p=preview . It should work now and demonstrate the issue. If you look in the console, you can see that after the sub-forms are initted, in the `\"X Watched:\"` scope is correctly bound, but the `\"X Expression Evaled:\"` is not. \n\nI also included an example of using a function-call to provide the fields - which should theoretically fix the issue of the each subform binding to the same set of fields, but actually causes an infinite digest loop in Angular.\n\nWhat you have above is more or less what I am trying to do (the additional iterators were primarily for debugging purposes), but in a generic way, where I can leverage the normal formly JSON \"schema\" for subforms rather than explicitly breaking them out of the schema into their own location, and having to \"know\" about how to assemble them. This will quickly become painful for multiple collections within the same form (i.e. Person form contains: `Person.Phone[]` and `Person.Address[]`) or nested collections (i.e. `Company.Location[].Address[]`).\n. Thanks for that! That seems to work better, and the digest doesn't spin out of control. However, it still has the same issue where after the initial form render, every field that is NOT in the last subform, seems to execute the propertyExpressions in the scope of the last subform. So for instance, when the three subforms render in your plunk above, the first two should have a Subject and Body field, and the last sub-form should only show the Subject Field (as the body field for each has an expression of `hide: '!result.subject'`) - but in reality all three are hiding the Body field, because they are only running the expressions in the scope of the last form/field.\n\nIt's pretty strange. I spent some time digging into it tonight, and regardless of how you prevent the fields from being the actual same array (tried `angular.copy`, the `getFields()` etc.) the run expressions still all end up bound to the same (last) scope.\n. Great, thanks again @kentcdodds . And I agree re: schema-form, and I have really been enjoying the simplicity of formly so far - and it was my main reason for choosing it. This is the only snag I have run into that wasn't easy to solve, and even this I attribute to the fact that it was not accounted for as part of the initial feature set. Major kudos. Thanks again for all your help.\n\nLet me know if you have any questions or I can help test anything out.\n. Nice find! I was thinking a copy of the whole `fields` would do it, but I guess that scope inheritance was what was killing me. It's working as expected now. I am going to be implementing a whole bunch of subforms, nested subforms etc. over the next few days so will let you know if I run into any other quirks, and will post any simplifications of the template/example I come up with - in-case it's of use to anyone else.\n\nTangential question: when you use `::foo` in your example code - what is that intended for?\n\nThanks again for all your help.\n. ",
    "frantzyy": "Well done! Looking fwd to digging into this!\n. Well done! Looking fwd to digging into this!\n. ",
    "sparty02": "@kentcdodds I need your help on two things to make this happen:\n1. Establish the angular-formly repo at coveralls.io.  When you sign in with your github creds, it'll be obvious what to do.\n2. Add an environment variable in travis called \"COVERALLS_REPO_TOKEN\".  The value for this will be provided after you establish the repo in coveralls.\n. Thanks!  It's actually at 51% so you technically have a majority of the codebase tested....  :wink: \n. P.S.  Coveralls has some cool features, so poke around whenever you get some spare time.  Some interesting ones include notifications (by default it includes comments in PRs regarding coverage, but you can also have it alert you in slack, email, etc) and the ability to fail based on a level of coverage or amount of decreased coverage.  Pretty nifty....\n. @kentcdodds Thanks for the quick feedback!  I'll make the above updates today sometime.\n. Cleaned up, please take a peak and let me know what you think!\n. I'll take a peek at this and circle back!\n. @kentcdodds Arguably, this shouldn't even really be a `devDependency` of formly since it's needed at runtime.  It really should be a 'regular' `dependency` (even over a `peerDependency`).  On a related note, when doing npm install --production, `devDependencies` don't even get installed.  I know it's a bit different since this is a 'client-side' package, but the semantics should still arguably be the same.\n. > Peer Dependencies was created to solve this problem.\n\nI'm sure you've probably read [several](http://blog.nodejs.org/2013/02/07/peer-dependencies/) [posts](https://github.com/npm/npm/issues/6565) about `peerDependencies`, but I'm not sure I'm reading it the same way you are.  It seems like it's more relevant in the 'plugins' world.....for which `angular-formly` having a `peerDependency` on `angular` makes a lot of sense to me.\n\n> Now I have two versions of api-check in my app.\n\nTo me, this is either:\n1. Not a problem if you subscribe to the nested dep-graph philosophy (which obviously produces larger builds than flat dep trees).\n2. Solved other ways such as `npm dedupe` (which I thought I read is becoming standard in `npm3`.  webpack and/or browserify may even optimize this away for you at bundle time as well.\n\nAt any rate, food for thought....\n. It's good for me to hear the other side of the argument too!\n. I like this, but I think a better name would be helpful.  The reference to ngModel (while I get it), is initially confusing as it implies that you are defining something for the model object, when you are really defining attributes for the HTML (generally the input element) that formly is generating for you.  This was/is confusing for ngModelAttrs too.  'ngModelElAttrs' is also pretty wordy.  \n\nMaybe something like 'formElementAttrs' or 'elementAttrs' or 'elemAttrs' (though abbreviations are frustrating at times)\n. May want to check out [evalAsync/applyAsync](http://www.bennadel.com/blog/2751-scope-applyasync-vs-scope-evalasync-in-angularjs-1-3.htm)\n. Thanks for the lightning fast change!\n. @kentcdodds I need your help on two things to make this happen:\n1. Establish the angular-formly repo at coveralls.io.  When you sign in with your github creds, it'll be obvious what to do.\n2. Add an environment variable in travis called \"COVERALLS_REPO_TOKEN\".  The value for this will be provided after you establish the repo in coveralls.\n. Thanks!  It's actually at 51% so you technically have a majority of the codebase tested....  :wink: \n. P.S.  Coveralls has some cool features, so poke around whenever you get some spare time.  Some interesting ones include notifications (by default it includes comments in PRs regarding coverage, but you can also have it alert you in slack, email, etc) and the ability to fail based on a level of coverage or amount of decreased coverage.  Pretty nifty....\n. @kentcdodds Thanks for the quick feedback!  I'll make the above updates today sometime.\n. Cleaned up, please take a peak and let me know what you think!\n. I'll take a peek at this and circle back!\n. @kentcdodds Arguably, this shouldn't even really be a `devDependency` of formly since it's needed at runtime.  It really should be a 'regular' `dependency` (even over a `peerDependency`).  On a related note, when doing npm install --production, `devDependencies` don't even get installed.  I know it's a bit different since this is a 'client-side' package, but the semantics should still arguably be the same.\n. > Peer Dependencies was created to solve this problem.\n\nI'm sure you've probably read [several](http://blog.nodejs.org/2013/02/07/peer-dependencies/) [posts](https://github.com/npm/npm/issues/6565) about `peerDependencies`, but I'm not sure I'm reading it the same way you are.  It seems like it's more relevant in the 'plugins' world.....for which `angular-formly` having a `peerDependency` on `angular` makes a lot of sense to me.\n\n> Now I have two versions of api-check in my app.\n\nTo me, this is either:\n1. Not a problem if you subscribe to the nested dep-graph philosophy (which obviously produces larger builds than flat dep trees).\n2. Solved other ways such as `npm dedupe` (which I thought I read is becoming standard in `npm3`.  webpack and/or browserify may even optimize this away for you at bundle time as well.\n\nAt any rate, food for thought....\n. It's good for me to hear the other side of the argument too!\n. I like this, but I think a better name would be helpful.  The reference to ngModel (while I get it), is initially confusing as it implies that you are defining something for the model object, when you are really defining attributes for the HTML (generally the input element) that formly is generating for you.  This was/is confusing for ngModelAttrs too.  'ngModelElAttrs' is also pretty wordy.  \n\nMaybe something like 'formElementAttrs' or 'elementAttrs' or 'elemAttrs' (though abbreviations are frustrating at times)\n. May want to check out [evalAsync/applyAsync](http://www.bennadel.com/blog/2751-scope-applyasync-vs-scope-evalasync-in-angularjs-1-3.htm)\n. Thanks for the lightning fast change!\n. ",
    "khasinski": "This functionality is supported by almost any other angular directive and is a part of angular itself, so I never had a problem with vendor library before. Therefore I think it's a bug in formly. Think about jQuery plugin that would allow for `noConflict` to be used. \n\nRendering angular 'widgets' embedded into another page is also the basic way of demoing it in jsfiddle, especially now, when angular-router is a separate entity, and you can have another templating engine in use (angular can use react or DOM-based JS templating engines).\n\nI'm not writing a SPA, I'm writing a form-driven application which happens to use testable front-end framework for dynamic functionality, so I don't want to have the server act just as a resource backend.\n\nI propose to reopen this issue.\n. Sure thing, angular-bootstrap works fine in my project, they're using standard angular `{{ }}` in their templates, yet when using their directives it works fine in my code when I'm using `[[ ]]`\n. Thanks for this patch and PR, I hope to use it as soon as it's merged.\n. This functionality is supported by almost any other angular directive and is a part of angular itself, so I never had a problem with vendor library before. Therefore I think it's a bug in formly. Think about jQuery plugin that would allow for `noConflict` to be used. \n\nRendering angular 'widgets' embedded into another page is also the basic way of demoing it in jsfiddle, especially now, when angular-router is a separate entity, and you can have another templating engine in use (angular can use react or DOM-based JS templating engines).\n\nI'm not writing a SPA, I'm writing a form-driven application which happens to use testable front-end framework for dynamic functionality, so I don't want to have the server act just as a resource backend.\n\nI propose to reopen this issue.\n. Sure thing, angular-bootstrap works fine in my project, they're using standard angular `{{ }}` in their templates, yet when using their directives it works fine in my code when I'm using `[[ ]]`\n. Thanks for this patch and PR, I hope to use it as soon as it's merged.\n. ",
    "quietlyconfident": "(Sorry if this is an inappropriate message for the notify-me issue / mailing list.  Happy to move the question(s) elsewhere if so.)\n\nA few questions ( really, one in several parts ):\n\n1 Would there be any interest among the users / developers / maintainers of the app in somehow linking this form-presentation app with a form-building app?  Such as, perhaps, this one: http://kelp404.github.io/angular-form-builder/  \n2 Linking could mean, incorporating that code base into this code base, synchronizing the schemas, and bundling the two apps together.\n3 Linking could also mean, just synchronizing the schemas so that the form-builder outputs JSON that the form-presenter knows what to do with?\n4 Either way, ideally, the the form-presenter and the form-builder would speak the same language.\n5 Interest here could of course range from, \"that sounds like an interesting idea\" to \"would be willing to work on it as a paid project\" to \"would consider accepting suitable pull requests implementing the idea\" to \"would be interested in collaborating on it immediately.\"\n. Cool!  I took the liberty of posting this bounty: https://bountify.co/modify-json-output-of-angular-form-builder-will-tip-50 , which would make that form building app work with this app  Hopefully if that works out, the next step of combining the two would be relatively easy.\n. Looks good to me!\n. There is a specification here: https://github.com/formly-js/angular-formly/wiki/JSON-Specification .  It just isn't a JSON-Schema specification.\n\nThis is hitting below the belt, because the author admitted on posting that it was very beta :)  But nonetheless there _is_ a spec.\n. Slight clarification here; I was not fully educated in how [angular-schema-form](https://github.com/Textalk/angular-schema-form) worked.\n\nIn [angular-schema-form](https://github.com/Textalk/angular-schema-form):\n1. The **Form Schema** _is itself a JSON Schema_, and\n2. There is not (yet) a **Form Schema Specification**.  In other words, you cannot mechanically validate your **Form Schema**.\n\nNonetheless, I think the suggestion / request stands. . . it would be good to have a formal schema specification for against which an individual Form Spec could be validated.\n![Schema / Spec Interaction Diagram](https://cloud.githubusercontent.com/assets/249930/4520718/29e94b9c-4cfa-11e4-93cc-3e6003958169.png)\n. Ha ha, mostly what I want you to do is consider and tell me what you think.  This is related to the \"integration with a form-builder\" discussion.\n\nTo integrate with a form builder program, the form-builder will need to create output in a format that the form-displaying program (angular formly) can understand.  Often, when this sort of thing is done, the pattern is to develop a contract (e.g. API, schema, etc.) that both applications / layers / etc. can depend on.  \n\nI propose that this contract should be a [JSON Schema](http://json-schema.org/) document, because then you could use an out of the box schema validator on either the client side (e.g. tv4) or the server side (e.g. a python / ruby package) to validate the \"form\" that has been built by the form builder.\n. Chiming in on the utility of my (currently closed) feature request. . .\n\nAngular-Formly takes in a JSON document (the Form Description Document or _FDD_) and uses it to render a form.  According to the documentation, validation is accomplished via a combination of Angular's built-in validation and the special validators object which contains validation functions.  Put differently, the \"schema\" for the data in a Formly form consists of the FDD, plus the built-in Angular validation directives, plus optionally the special validation functions in the \"validators\" object.\n\nChanging this so that the FDD is a JSON Schema document has at least two benefits:\n1. You  (the Formly maintainer(s)) can use other validators (like TV4) to do the validation and not write/maintain validation related code.\n2. The JSON Schema document becomes the single-source-of-truth on the schema for the data structure.  The end-user could use the schema to validate the data in other places (e.g. on the server) without having to have a separate schema which is kept in sync with the Formly FDD.\n\nThis is the underlying approach taken by [Angular Schema Form](https://github.com/Textalk/angular-schema-form).\n. No, I think thats a different thing than what k010 is asking about here. (But I've proposed it in another issue.) I apologize, in advance and in a continuing fashion, for sowing confusion.  Discussions about schemas get very meta in a hurry and it is hard to keep track of what we're talking about :)\n\nI think that what k010 is talking about in this thread is, the FDD should be a JSON Schema, so that you can validate the Data Model against it.  To make this more concrete, check out the [Formly Demo](http://formly-js.github.io/angular-formly/#!/).  On the left is the \"Fields\" pane which contains a JSON document which describes the form (i've taken to calling this the form description document or _FDD_ but happy to use some other term if you'd like.)  Then on the right is the \"Data Model\" which is a JSON object.  If _Fields_/FDD was a JSON schema, then you could validate the data model against it with a [JSON Schema validator](https://json-schema-validator.herokuapp.com).  Thus using that JSON schema validator you could copy-and-paste the _Fields_ JSON into the top pane, and the _Data_ JSON into the bottom pane, and click the button, and it would tell you that the model was valid or not.\n\nOr, a more useful real-world scenario. . . Perhaps your server-side application doesn't trust that your client side application will always give it good data.  So you want to validate the data in the browser as you enter it, but then when it hits the server you want to validate it again.  If the Fields/FDD is a JSON schema, then you can do that without having two separate documents which describe the data model (e.g. a server-side validation schema in some standard schema language PLUS the Formly \"Fields\" document on the client side).\n. Ha ha, thats ok.  When wing nuts such as myself from the internet start muddying up your project with crazy issues you're entitled to close them :)\n\nBut yeah, that is exactly right, the FDD _could_ validate the data model and describe the form fields _if_ it was a JSON schema.  Perhaps it would clarify to point out that per the [JSON Schema Spec](http://json-schema.org/latest/json-schema-core.html#anchor5) a JSON Schema may have properties that are not keywords.\n\nRe: your proposal:\n\n> One thing that might make sense is to add a schema property to the field config that allows you to use a JSON Schema validator to validate the model. This would be in lieu of validators but would behave just like validators in that it would $setValidity for the NgModelController based on whether the schema validation passed. Would this be a good api to accomplish what you're talking about?\n\nYes, I think that is a great idea.  If you add a schema property to the FDD, then you could validate the data model against the FDD.\n\nMy next thought is, if you did just that and stopped, there would be some redundancy between the schema property and the remainder of the FDD.  For example, consider just the First Name / Last Name fields of the Formly example.  Both the schema and the FDD would indicate the key, and the type, for example.  What the schema would not necessarily have is 'label', 'placeholder', and 'order'.  \n\nBut, if you added those _form description_ properties to the schema (OK because, a schema may have properties that are not keywords), and we teach Formly how to read it, then rather than having a schema _inside_ the form description, you have a schema which _is_ the form description and also can be used directly to validate the document.\n. (Sorry if this is an inappropriate message for the notify-me issue / mailing list.  Happy to move the question(s) elsewhere if so.)\n\nA few questions ( really, one in several parts ):\n\n1 Would there be any interest among the users / developers / maintainers of the app in somehow linking this form-presentation app with a form-building app?  Such as, perhaps, this one: http://kelp404.github.io/angular-form-builder/  \n2 Linking could mean, incorporating that code base into this code base, synchronizing the schemas, and bundling the two apps together.\n3 Linking could also mean, just synchronizing the schemas so that the form-builder outputs JSON that the form-presenter knows what to do with?\n4 Either way, ideally, the the form-presenter and the form-builder would speak the same language.\n5 Interest here could of course range from, \"that sounds like an interesting idea\" to \"would be willing to work on it as a paid project\" to \"would consider accepting suitable pull requests implementing the idea\" to \"would be interested in collaborating on it immediately.\"\n. Cool!  I took the liberty of posting this bounty: https://bountify.co/modify-json-output-of-angular-form-builder-will-tip-50 , which would make that form building app work with this app  Hopefully if that works out, the next step of combining the two would be relatively easy.\n. Looks good to me!\n. There is a specification here: https://github.com/formly-js/angular-formly/wiki/JSON-Specification .  It just isn't a JSON-Schema specification.\n\nThis is hitting below the belt, because the author admitted on posting that it was very beta :)  But nonetheless there _is_ a spec.\n. Slight clarification here; I was not fully educated in how [angular-schema-form](https://github.com/Textalk/angular-schema-form) worked.\n\nIn [angular-schema-form](https://github.com/Textalk/angular-schema-form):\n1. The **Form Schema** _is itself a JSON Schema_, and\n2. There is not (yet) a **Form Schema Specification**.  In other words, you cannot mechanically validate your **Form Schema**.\n\nNonetheless, I think the suggestion / request stands. . . it would be good to have a formal schema specification for against which an individual Form Spec could be validated.\n![Schema / Spec Interaction Diagram](https://cloud.githubusercontent.com/assets/249930/4520718/29e94b9c-4cfa-11e4-93cc-3e6003958169.png)\n. Ha ha, mostly what I want you to do is consider and tell me what you think.  This is related to the \"integration with a form-builder\" discussion.\n\nTo integrate with a form builder program, the form-builder will need to create output in a format that the form-displaying program (angular formly) can understand.  Often, when this sort of thing is done, the pattern is to develop a contract (e.g. API, schema, etc.) that both applications / layers / etc. can depend on.  \n\nI propose that this contract should be a [JSON Schema](http://json-schema.org/) document, because then you could use an out of the box schema validator on either the client side (e.g. tv4) or the server side (e.g. a python / ruby package) to validate the \"form\" that has been built by the form builder.\n. Chiming in on the utility of my (currently closed) feature request. . .\n\nAngular-Formly takes in a JSON document (the Form Description Document or _FDD_) and uses it to render a form.  According to the documentation, validation is accomplished via a combination of Angular's built-in validation and the special validators object which contains validation functions.  Put differently, the \"schema\" for the data in a Formly form consists of the FDD, plus the built-in Angular validation directives, plus optionally the special validation functions in the \"validators\" object.\n\nChanging this so that the FDD is a JSON Schema document has at least two benefits:\n1. You  (the Formly maintainer(s)) can use other validators (like TV4) to do the validation and not write/maintain validation related code.\n2. The JSON Schema document becomes the single-source-of-truth on the schema for the data structure.  The end-user could use the schema to validate the data in other places (e.g. on the server) without having to have a separate schema which is kept in sync with the Formly FDD.\n\nThis is the underlying approach taken by [Angular Schema Form](https://github.com/Textalk/angular-schema-form).\n. No, I think thats a different thing than what k010 is asking about here. (But I've proposed it in another issue.) I apologize, in advance and in a continuing fashion, for sowing confusion.  Discussions about schemas get very meta in a hurry and it is hard to keep track of what we're talking about :)\n\nI think that what k010 is talking about in this thread is, the FDD should be a JSON Schema, so that you can validate the Data Model against it.  To make this more concrete, check out the [Formly Demo](http://formly-js.github.io/angular-formly/#!/).  On the left is the \"Fields\" pane which contains a JSON document which describes the form (i've taken to calling this the form description document or _FDD_ but happy to use some other term if you'd like.)  Then on the right is the \"Data Model\" which is a JSON object.  If _Fields_/FDD was a JSON schema, then you could validate the data model against it with a [JSON Schema validator](https://json-schema-validator.herokuapp.com).  Thus using that JSON schema validator you could copy-and-paste the _Fields_ JSON into the top pane, and the _Data_ JSON into the bottom pane, and click the button, and it would tell you that the model was valid or not.\n\nOr, a more useful real-world scenario. . . Perhaps your server-side application doesn't trust that your client side application will always give it good data.  So you want to validate the data in the browser as you enter it, but then when it hits the server you want to validate it again.  If the Fields/FDD is a JSON schema, then you can do that without having two separate documents which describe the data model (e.g. a server-side validation schema in some standard schema language PLUS the Formly \"Fields\" document on the client side).\n. Ha ha, thats ok.  When wing nuts such as myself from the internet start muddying up your project with crazy issues you're entitled to close them :)\n\nBut yeah, that is exactly right, the FDD _could_ validate the data model and describe the form fields _if_ it was a JSON schema.  Perhaps it would clarify to point out that per the [JSON Schema Spec](http://json-schema.org/latest/json-schema-core.html#anchor5) a JSON Schema may have properties that are not keywords.\n\nRe: your proposal:\n\n> One thing that might make sense is to add a schema property to the field config that allows you to use a JSON Schema validator to validate the model. This would be in lieu of validators but would behave just like validators in that it would $setValidity for the NgModelController based on whether the schema validation passed. Would this be a good api to accomplish what you're talking about?\n\nYes, I think that is a great idea.  If you add a schema property to the FDD, then you could validate the data model against the FDD.\n\nMy next thought is, if you did just that and stopped, there would be some redundancy between the schema property and the remainder of the FDD.  For example, consider just the First Name / Last Name fields of the Formly example.  Both the schema and the FDD would indicate the key, and the type, for example.  What the schema would not necessarily have is 'label', 'placeholder', and 'order'.  \n\nBut, if you added those _form description_ properties to the schema (OK because, a schema may have properties that are not keywords), and we teach Formly how to read it, then rather than having a schema _inside_ the form description, you have a schema which _is_ the form description and also can be used directly to validate the document.\n. ",
    "shanelaney": "asterism - I am using this version of Angular: //ajax.googleapis.com/ajax/libs/angularjs/1.3.0-beta.11/angular.js\n. Hi, thank you both for your help!!!  I am very new to AngularJS.  The 1.3.0-beta does work with formly, but it Angular worked better when I changed the simple codepen example to use the $scope, like this:\nangular.module('app', ['formly']).controller('MainCtrl', function($scope) {\n\n```\n $scope.formData = {};\n $scope.formFields = [\n```\n\nInstead of the Alias format that it had \"MainContrl as vm\"...\n. I believe the core issue is that the formly .JS files in the .ZIP either are not complete or there are other dependencies when including them.  For example, if I reference the formly.vanilla.js as a local file <script src=\"vendors/formly/formly.vanilla.js\"></script>, I get the exception that is attached.\n![formly_exception](https://cloud.githubusercontent.com/assets/3108209/4134856/7ca1c84e-3370-11e4-9ee6-a56886e89ca4.png)\n\nHowever, when I reference the same JS from the public URL, the application works fine: <script src=\"https://rawgit.com/nimbly/angular-formly/6d366845e6436add4cd5ccf9d2254ce261a61ef7/dist/formly.vanilla.js\"></script>\n. Thank you both for the quick help!!!\n. asterism - I am using this version of Angular: //ajax.googleapis.com/ajax/libs/angularjs/1.3.0-beta.11/angular.js\n. Hi, thank you both for your help!!!  I am very new to AngularJS.  The 1.3.0-beta does work with formly, but it Angular worked better when I changed the simple codepen example to use the $scope, like this:\nangular.module('app', ['formly']).controller('MainCtrl', function($scope) {\n\n```\n $scope.formData = {};\n $scope.formFields = [\n```\n\nInstead of the Alias format that it had \"MainContrl as vm\"...\n. I believe the core issue is that the formly .JS files in the .ZIP either are not complete or there are other dependencies when including them.  For example, if I reference the formly.vanilla.js as a local file <script src=\"vendors/formly/formly.vanilla.js\"></script>, I get the exception that is attached.\n![formly_exception](https://cloud.githubusercontent.com/assets/3108209/4134856/7ca1c84e-3370-11e4-9ee6-a56886e89ca4.png)\n\nHowever, when I reference the same JS from the public URL, the application works fine: <script src=\"https://rawgit.com/nimbly/angular-formly/6d366845e6436add4cd5ccf9d2254ce261a61ef7/dist/formly.vanilla.js\"></script>\n. Thank you both for the quick help!!!\n. ",
    "nicolechung": "Awesome thank you!!\n. Thanks for the quick response.\n\nHere is my plunker:\n\nhttp://plnkr.co/edit/adeXPXk5oA6kHV0u8vkL?p=preview\n\nI really don't think I am doing this right, but I don't know how to associate the ng-model as an array of values (which I need for multiple checkboxes)...please see the attached\n. Thank you for the quick response. I'm going to try to use your index value and see if I can compare that against my array of \"images\" to get the right one.\n\nThe only thing is that I would rather it be from my \"ng-repeat\" (not that it works that way) because I think going forward the array is going to be a bit more complex, like there might be filtering and sorting happening which will make the \"index\" not map to the correct value properly.\n. That would work.\n. I was wondering something similar (I think).\n\nIs there a way to have a \"formField\" that is really just a divider or an 'h2' tag?\n\n```\n{\n          key: 'text',\n          label: 'Text',\n          type: '<hr> or <h2>'\n}\n```\n. That works great. \n. Actually (sorry!) I fixed it. \n\nMy controller was getting called twice and I have a markdown editor attached to the textfields, so multiple markdown editors were being created for each textfield.\n. Awesome thank you!!\n. Thanks for the quick response.\n\nHere is my plunker:\n\nhttp://plnkr.co/edit/adeXPXk5oA6kHV0u8vkL?p=preview\n\nI really don't think I am doing this right, but I don't know how to associate the ng-model as an array of values (which I need for multiple checkboxes)...please see the attached\n. Thank you for the quick response. I'm going to try to use your index value and see if I can compare that against my array of \"images\" to get the right one.\n\nThe only thing is that I would rather it be from my \"ng-repeat\" (not that it works that way) because I think going forward the array is going to be a bit more complex, like there might be filtering and sorting happening which will make the \"index\" not map to the correct value properly.\n. That would work.\n. I was wondering something similar (I think).\n\nIs there a way to have a \"formField\" that is really just a divider or an 'h2' tag?\n\n```\n{\n          key: 'text',\n          label: 'Text',\n          type: '<hr> or <h2>'\n}\n```\n. That works great. \n. Actually (sorry!) I fixed it. \n\nMy controller was getting called twice and I have a markdown editor attached to the textfields, so multiple markdown editors were being created for each textfield.\n. ",
    "benliu723": "Thank you very much. \n. Ok, I got it! \nThanks for your explaination! \n\nWhen will the next version to be released?\nThis is a very important information for us, so that I can communicate with my team member!\n\nOn 2014-9-16, at 19:33, \"Kent C. Dodds\" notifications@github.com wrote:\n\n> Yes, note that we're in the middle of releasing 1.0.0 so master is \n> different than what is released to bower. Please see the readme for the tag \n> you have installed. \n> - Kent C. Dodds \n>   Sent from my mobile device, please forgive any errors or brevity. (I may \n>   have used speech to text...) \n>   On Sep 16, 2014 1:44 AM, \"Ben Liu\" notifications@github.com wrote: \n> \n> > After I run commands: \n> > bower cache clean \n> > bower install angular-formly \n> > \n> > I haven't got the lastest version of angular-formly. \n> > When I use the installed angular-formly in my index page, it shows error: \n> > Unknown provider: formlyConfigProvider \n> > \n> > \u2014 \n> > Reply to this email directly or view it on GitHub \n> > https://github.com/nimbly/angular-formly/issues/105. \n> > \n> > \u2014\n> > Reply to this email directly or view it on GitHub.\n. Thank you very much! \n. Thanks for you sharing, Man.\nIt is very helpful for me.\n. Thank you very much. \n. Ok, I got it! \nThanks for your explaination! \n\nWhen will the next version to be released?\nThis is a very important information for us, so that I can communicate with my team member!\n\nOn 2014-9-16, at 19:33, \"Kent C. Dodds\" notifications@github.com wrote:\n\n> Yes, note that we're in the middle of releasing 1.0.0 so master is \n> different than what is released to bower. Please see the readme for the tag \n> you have installed. \n> - Kent C. Dodds \n>   Sent from my mobile device, please forgive any errors or brevity. (I may \n>   have used speech to text...) \n>   On Sep 16, 2014 1:44 AM, \"Ben Liu\" notifications@github.com wrote: \n> \n> > After I run commands: \n> > bower cache clean \n> > bower install angular-formly \n> > \n> > I haven't got the lastest version of angular-formly. \n> > When I use the installed angular-formly in my index page, it shows error: \n> > Unknown provider: formlyConfigProvider \n> > \n> > \u2014 \n> > Reply to this email directly or view it on GitHub \n> > https://github.com/nimbly/angular-formly/issues/105. \n> > \n> > \u2014\n> > Reply to this email directly or view it on GitHub.\n. Thank you very much! \n. Thanks for you sharing, Man.\nIt is very helpful for me.\n. ",
    "jimmy-collazos": "PR for fix https://github.com/nimbly/angular-formly/pull/110\n. Hi @kentcdodds\n\nI have refactored the job to build the distribution files and reorganize directories of the templates, You can see the changes in:\nhttps://github.com/acido69/angular-formly/tree/task/build-refactor\n\nWith this refactor `Gruntfile.js` in more clean and maintenance is much easy. Now is possible run independent build job:\n\n> grunt build:no-template build:bootstrap build:vanilla\n> # or\n> grunt build\n\nNew organization of directories:\n\n```\n|-template\n|   |--vanilla\n|       |---formly-field-checkbox.html\n|       |---....\n|-src\n    |--directive\n    |--service\n    |--...\n```\n\nI think the template need one own directory because is more clean separate js code of the templates.  Maybe is much better put `template` in `src` but i not sure.\n. I had to try :)\n\nI update Gruntfile with this refactor and  use current directory structure\n. PR for fix https://github.com/nimbly/angular-formly/pull/110\n. Hi @kentcdodds\n\nI have refactored the job to build the distribution files and reorganize directories of the templates, You can see the changes in:\nhttps://github.com/acido69/angular-formly/tree/task/build-refactor\n\nWith this refactor `Gruntfile.js` in more clean and maintenance is much easy. Now is possible run independent build job:\n\n> grunt build:no-template build:bootstrap build:vanilla\n> # or\n> grunt build\n\nNew organization of directories:\n\n```\n|-template\n|   |--vanilla\n|       |---formly-field-checkbox.html\n|       |---....\n|-src\n    |--directive\n    |--service\n    |--...\n```\n\nI think the template need one own directory because is more clean separate js code of the templates.  Maybe is much better put `template` in `src` but i not sure.\n. I had to try :)\n\nI update Gruntfile with this refactor and  use current directory structure\n. ",
    "TTAK": "Sorry for taking so long to respond, I am new on the micouz's project and I didn't know about this ticket.\n\nNow after a bower install, we have formly.vanilla.js inside the angular-formly/dist/ directory so I think it's resolved. (the deployment of our app is working fine now).\n\nThanks for your help.\n. Sorry for taking so long to respond, I am new on the micouz's project and I didn't know about this ticket.\n\nNow after a bower install, we have formly.vanilla.js inside the angular-formly/dist/ directory so I think it's resolved. (the deployment of our app is working fine now).\n\nThanks for your help.\n. ",
    "4ware": "Hi!\n\nI would need this functionality to validate if either one of two inputs is set...\n\nThanks\n. Ah, i see. Thanks a lot!\n. Hi!\n\nI would need this functionality to validate if either one of two inputs is set...\n\nThanks\n. Ah, i see. Thanks a lot!\n. ",
    "kashpatel": "Hi @kentcdodds.\r\n\r\nHave you ever implemented \"dangerouslyValidate\" functionality in formly? \r\n\r\nWe load fields configuration JSON via API server directly and need some complex validations like regex. Because we are trying to keep our code as dry as possible and will be having multiple configuration JSON files based on clients. It is not possible for us to add validation functions in our code.\r\n\r\nI know I can't pass functions via JSON. It would be great if formly itself can do \"eval\" and execute validation functions.\r\n\r\nThank you for great framework and keep up the good work.\r\n\r\nKashyap. Ok. I will try to do that. Thank you for your help.. Hi @kentcdodds.\r\n\r\nHave you ever implemented \"dangerouslyValidate\" functionality in formly? \r\n\r\nWe load fields configuration JSON via API server directly and need some complex validations like regex. Because we are trying to keep our code as dry as possible and will be having multiple configuration JSON files based on clients. It is not possible for us to add validation functions in our code.\r\n\r\nI know I can't pass functions via JSON. It would be great if formly itself can do \"eval\" and execute validation functions.\r\n\r\nThank you for great framework and keep up the good work.\r\n\r\nKashyap. Ok. I will try to do that. Thank you for your help.. ",
    "rootical": "Pretty simple - i want fields with the same type, followed one by one, to have a container.\n\nLike \n.text-fields\n--.text-field\n\n.number-fields\n--.number-field\n--.number-field\n\n.custom-fields\n--.custom-field\n--.custom-field\n\n.number-fields\n--.number-field\n--.number-field\n\n.text-fields\n--.text-field\n. Thank you guys, to have a container a user need to use the formly-field directive. Like this:\nform\n--.custom-fields\n----Custom Fields\n----formly-field(\n----ng-repeat=\"field in formFields.custom_fields\"\n----options=\"field\"\n----form-result=\"formData\"\n----form-id=\"formId\"\n----ng-if=\"!field.hide\"\n----index=\"$index\")\n. Pretty simple - i want fields with the same type, followed one by one, to have a container.\n\nLike \n.text-fields\n--.text-field\n\n.number-fields\n--.number-field\n--.number-field\n\n.custom-fields\n--.custom-field\n--.custom-field\n\n.number-fields\n--.number-field\n--.number-field\n\n.text-fields\n--.text-field\n. Thank you guys, to have a container a user need to use the formly-field directive. Like this:\nform\n--.custom-fields\n----Custom Fields\n----formly-field(\n----ng-repeat=\"field in formFields.custom_fields\"\n----options=\"field\"\n----form-result=\"formData\"\n----form-id=\"formId\"\n----ng-if=\"!field.hide\"\n----index=\"$index\")\n. ",
    "adamalbrecht": "+1\n\nI've had to go back and change up some of my css to account for the extra level of containers. Would be nice to have as few as possible for the sake of simplicity.\n. +1\n\nI've had to go back and change up some of my css to account for the extra level of containers. Would be nice to have as few as possible for the sake of simplicity.\n. ",
    "diegochavez": "Thanks man!.\nTake a look i just added this \nhttp://plnkr.co/edit/NLFXIs4z4WgG5cdjARxK?p=preview\n. Many thanks man, i'll try your suggestions. you made my day! amigo.\n. Updated jsbin https://jsbin.com/mamiyuz/1/edit?html,js,output\n. Thanks man!.\nTake a look i just added this \nhttp://plnkr.co/edit/NLFXIs4z4WgG5cdjARxK?p=preview\n. Many thanks man, i'll try your suggestions. you made my day! amigo.\n. Updated jsbin https://jsbin.com/mamiyuz/1/edit?html,js,output\n. ",
    "circlingthesun": "You are right, the latest version no longer contains those lines. The line was in 'angular-formly/dist/formly.bootstrap.js' and 'angular-formly/src/directives/formly-field.js'. Thanks for looking into this.\n. You are right, the latest version no longer contains those lines. The line was in 'angular-formly/dist/formly.bootstrap.js' and 'angular-formly/src/directives/formly-field.js'. Thanks for looking into this.\n. ",
    "gladson": "Chance would demonstrate an example.\n\nhttp://plnkr.co/\n. Thanks for your help. \nI'll try.\n:+1: \n. Hey thanks @kentcdodds. \nI will do and follow your suggestions. \nI'll be back.\n. Chance would demonstrate an example.\n\nhttp://plnkr.co/\n. Thanks for your help. \nI'll try.\n:+1: \n. Hey thanks @kentcdodds. \nI will do and follow your suggestions. \nI'll be back.\n. ",
    "psi-4ward": "Anything new here? I would need repeated subforms too. Perhaps it could solved with nesting formly and a \"repeat\" type?\n. Could you post a little example?\n. Anything new here? I would need repeated subforms too. Perhaps it could solved with nesting formly and a \"repeat\" type?\n. Could you post a little example?\n. ",
    "eyolas": "+1\n. +1\n. ",
    "sucheendra": "I am new to angular and formly, however I am using heavily angular formly.  I will get stuck in ever new requirement.\n1)  I am having hard time to set input type control  to allow only decimal value how do I achieve this? I don\u2019t want user enter text when it currency field.\n2)  Second I have  dialog opens  from main page where the validator  function triggers however I don\u2019t see any visual indication (Color change in control).\n. your help is much appreciated if these things not get solved I need to write all the page in plain html with angular, which I don't want to do. Please help me.\n. It helped\n\nThank you Kent,\n\nThanks & Regards,\n_Suchi_\n\nOn Mon, Oct 5, 2015 at 11:08 AM, Kent C. Dodds notifications@github.com\nwrote:\n\n> Hi @sucheendra https://github.com/sucheendra, the best way to get help\n> is to follow the instructions here: http://help.angular-formly.com\n> \n> For your first question, you'll simply set the type property in\n> templateOptions to number and that should do it for you.\n> \n> For your second question, please go to that help link and create an\n> example of what you mean.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/130#issuecomment-145563292\n> .\n. I am new to angular and formly, however I am using heavily angular formly.  I will get stuck in ever new requirement.\n1)  I am having hard time to set input type control  to allow only decimal value how do I achieve this? I don\u2019t want user enter text when it currency field.\n2)  Second I have  dialog opens  from main page where the validator  function triggers however I don\u2019t see any visual indication (Color change in control).\n. your help is much appreciated if these things not get solved I need to write all the page in plain html with angular, which I don't want to do. Please help me.\n. It helped\n\nThank you Kent,\n\nThanks & Regards,\n_Suchi_\n\nOn Mon, Oct 5, 2015 at 11:08 AM, Kent C. Dodds notifications@github.com\nwrote:\n\n> Hi @sucheendra https://github.com/sucheendra, the best way to get help\n> is to follow the instructions here: http://help.angular-formly.com\n> \n> For your first question, you'll simply set the type property in\n> templateOptions to number and that should do it for you.\n> \n> For your second question, please go to that help link and create an\n> example of what you mean.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/130#issuecomment-145563292\n> .\n. ",
    "wilsaj": "I think I might not have been clear about what I meant. The default JSON in the demo works because values are set there. Try editing the JSON on the demo and pasting the current select example from the README (without values set).\n. I think I might not have been clear about what I meant. The default JSON in the demo works because values are set there. Try editing the JSON on the demo and pasting the current select example from the README (without values set).\n. ",
    "jasonrichardsmith": "You can disregard.  I found the template option in the forms.  Works great.\n. You can disregard.  I found the template option in the forms.  Works great.\n. ",
    "rporrass": "Hi,\n\nIt's possible, but CDNJS people prefers not to have non closed versions.\n. now we have CDN path\n//cdnjs.cloudflare.com/ajax/libs/angular-formly/1.0.0/formly.min.js\n. Hi,\n\nIt's possible, but CDNJS people prefers not to have non closed versions.\n. now we have CDN path\n//cdnjs.cloudflare.com/ajax/libs/angular-formly/1.0.0/formly.min.js\n. ",
    "snimavat": "Look at http://jsbin.com/waqofedata/1/edit?html,js,output\n\nLook at the end for \"Test form valid\", it should say true / false. but it doesnt, because vm.testForm isnt set on scope\n\nMaking the change as i suggested in the issue above ($parse) would fix this.\n. So, i need a parent form to achieve this,\n\nI am surprised, what does this mean in formly-form directive then\n\n(copied from source)\n\n```\n        scope: {\n          formOnParentScope: '=name'\n         }\n\n    compile: function () {\n        return {\n            post: function (scope, ele, attr) {\n                //Post gets called after angular has created the FormController\n                //Now pass the FormController back up to the parent scope\n                scope.formOnParentScope = scope[attr.name];\n            }\n        };\n    },\n```\n\nIsnt it intended to set form controller on parent scope ? (its bidirectional binding, and comments in source states that explicitely)\n. Right.. You used $eval instead of $parse.. tht too would fix the issue, great.\n\nNew version going to depend on angular 1.3.x ?\nWe are on 1.2.x\n\nThanks.\n. Sure, i'll try when you publish a release. or from master if i get time before tht.\n. Look at http://jsbin.com/waqofedata/1/edit?html,js,output\n\nLook at the end for \"Test form valid\", it should say true / false. but it doesnt, because vm.testForm isnt set on scope\n\nMaking the change as i suggested in the issue above ($parse) would fix this.\n. So, i need a parent form to achieve this,\n\nI am surprised, what does this mean in formly-form directive then\n\n(copied from source)\n\n```\n        scope: {\n          formOnParentScope: '=name'\n         }\n\n    compile: function () {\n        return {\n            post: function (scope, ele, attr) {\n                //Post gets called after angular has created the FormController\n                //Now pass the FormController back up to the parent scope\n                scope.formOnParentScope = scope[attr.name];\n            }\n        };\n    },\n```\n\nIsnt it intended to set form controller on parent scope ? (its bidirectional binding, and comments in source states that explicitely)\n. Right.. You used $eval instead of $parse.. tht too would fix the issue, great.\n\nNew version going to depend on angular 1.3.x ?\nWe are on 1.2.x\n\nThanks.\n. Sure, i'll try when you publish a release. or from master if i get time before tht.\n. ",
    "ShMcK": "Unfortunately, transferring fails with \"You don't have admin rights to formly-js\".\n\nOption A is to (temporarily) change group permissions to grant me admin rights for the repo. You can find repo permissions [explained here](https://help.github.com/articles/permission-levels-for-an-organization-repository/).\n\nOption B is to transfer the account to a specific user, in which case: either yourself or astrism.\n. Excellent! It's done!\n. I have some time this week, I'll see what I can do.\n. Exciting stuff!\n\nI second `type` changing to `template`/`templateUrl`. I found it quite confusing when building `input` templates that use the same attribute name.\n\nLooking forward to the `wrapper`. Actually, I had issues in my current project where it was simpler to avoid using Formly in order to render the inputs on the page properly. I imagine the `wrapper` could even be used to create in-line styled forms, or even drop-down menus. I assume this will grant the ability to finally organize fields on the page by wrapping them in boxes with custom css classes. Great!\n\n`modelOptions` & `validators` is a tough call. Personally, I used both of them in the LumX templates with ng-Messages, but I wouldn't necessarily classify them as `templateOptions`. \n\nI wish I could give you better feedback, but I appreciate the opportunity and the heads up. I'll get prepared with e2e tests for the 3.0.0 drop to catch up to speed. Good luck with the talk next week!\n. Awesome, I'll try to have it all up-to-date by the end of the week.\n. Then I better get on that right away! \n\nI was working on making a simple grunt/gulp tool to compile formly templates to make future updates smoother, but I think I'll just stick to using ng-templates + copy/paste. Ran into a frustrating lack of know-how. If you have an existing solution, let me know!\n. Already loving the wrappers. \n\nBut I'm a little confused about the API. So `templateOptions` refers to template specific parameters. That's clearly needed. At first I thought `required` belonged outside of `templateOptions`, but now I realize it's in the right place. \n\nHowever, I don't understand why `options: []` is under templateOptions. Is it not the basic data options i.e. for radio buttons? \n. As a suggestion, perhaps `options.templateOptions.someName` could be shortened to `templateOptions.someName` (with some difficulty) or `options.template.someName`?\n. Another crazier suggestion, as it's getting late on this side of the world:\n\nA lot of `templateOptions` can be linked to core angular directives: `ng-required`, `ng-disabled`, `ng-checked`, etc. Perhaps these could be differentiated if deemed necessary? On second thought, maybe not.\n. Typo in CHANGELOG 3.0.0 (Unpublished)\n`mode[options.key]` - > model\n. I see what you mean now about `options: []` & `templateOptions` and I'm happy with that part of the API.\n. I fixed up the angular-formly-templates-lumx. There's a demo [here](https://formly-lumx.herokuapp.com/text).\n\nI haven't been able to get any `select`ers to work with 3.0.0, any thoughts? I'll try again later.\n. 99% working. Thanks for the help!\n. The pre/post wrapper can have definite uses. I'll put some thought into it.\n\nHowever, what about changes in context? These should be handled in the JSON for easier usability rather than at the provider level.\n\nI quickly googled \"grid form\" for an [example](http://kumailht.com/gridforms/media/images/form-zoomed-out.png). Formly + any css framework should be able to create complex form grids. \n\nI was thinking adding an optional `wrapperOptions` to the api could handle all of this. It would perform in essentially the same way as `templateOptions`.\n. I just realized `formlyConfigProvider.setWrapper({})` forces all of the wrappers on the template. As a result I was getting 3 sets of ngMessages on my text-fields, one for each wrapper. I'm not sure the usefulness of `setWrapper` other than saving a little template code.\n. I see now that `wrapperOptions` are not needed.  `templateOptions` can already fill them out. Excellent! Issue closed for me.\n. I posted up some examples with docs on the [templates-lumx](https://formly-lumx.herokuapp.com) site, have a look and tell me what you think. So far, I'm loving the flexibility `wrappers` bring. Thanks!\n. One of the new features is using `flexbox` with form fields. :)\n. Sorry, I just checked my email and found I had completely missed that previous message! FYI - I'm in the South Korea time zone (UTC+09:00).\n\nSo far, I think one pipeline is fine. I'll look into the template manipulator ASAP.\n. I hadn't realized the power of `ngModelAttrs`. They can drastically reduce the bloat on form fields.\n\nI think the docs could use an example. I'm not entirely sure how to use them. \n\nAre they set by an `ngModelAttrs` array that can hold multiple `ng`-directives with values? \n\n```\n    ngModelAttrs = ['ng-required': true, 'ng-pattern': '/[A-Za-z]/', 'ng-disabled': false]\n```\n\nOr can they only be set and changed in `expressionProperties`?\n\n```\nexpressionProperties: {\n    options.ngModelAttrs[ng-required] = true,\n    options.ngModelAttrs[ng-pattern] = /[A-Za-z]/\n    options.ngModelAttrs[ng-disabled] = false\n    }\n```\n. I'm trying to setup `flex-box` with `angular-formly-templates-lumx`. Unfortunately, I haven't been able to get it to work based on [this `jsbin` example](http://jsbin.com/jaloz/2/edit?html,js,output).\n\n```\nError: `Formly Error: You have specified field properties that are not allowed: \"fields\"`.\n```\n\n# Questions\n1. How could I add a custom field `fields: []` to my template?\n2. Is it possible to define and add other custom fields? Hmm...\n\n---\n\n# Current Proposed API\n\n### lx-wrapper-flex-container API\n\n``` javascript\n{\n  'key': 'modelName',\n/* type or wrapper? type is required by formly */\n  'type': 'lx-wrapper-flex-container', \n  'templateOptions': {\n    'container': 'row', // row | column | row-reverse | column-reverse\n    'wrap': 'nowrap', // nowrap | wrap | wrap-reverse\n    'align': 'space-between', // flex-start | flex-end | center | space-between | space-around | stretch\n    'class': 'bgc-red-500', // ng-class\n    'style': 'height: 200px'\n  },\n/* as in the jsbin example. */\n  'fields': [{\n    /* 'lx-wrapper-flex-item' fields here */\n  }]\n}\n```\n\n### lx-wrapper-flex-item API\n\n``` javascript\n{\n  'key': 'modelName',\n  'type': 'lx-whatever-type'\n  'wrapper': 'lx-wrapper-flex-item', // <- add the wrapper\n  'templateOptions': {\n    'flex': {\n      'item': '1' // flex-value number, higher weights the space ratio more \n      'order': '1', // value for ordering boxes\n      'class': 'bgc-red-500' // ng-class\n    }\n  }\n}\n```\n. My brain just went _click_! \n\nGotcha, I'll just create an `ng-repeat` inside to handle the inner `flex-item`'s. Easy peezy.\n. `<formly-form>` inside a `<formly-form>`. Good idea, bad idea?\n\n``` html\n<!-- lx-wrapper-flex-container -->\n\n<div ng-class=\"::options.templateOptions.flexContainer.className\"\n     style=\"::options.templateOptions.flexContainer.style\"\n     flex-container=\"{{::options.templateOptions.flexContainer.container}}\"\n     flex-align=\"{{::options.templateOptions.flexContainer.align}}\"\n     flex-gutter=\"{{::options.templateOptions.flexContainer.gutter}}\">\n\n    <formly-form model=\"vm.formData\" fields=\"options.templateOptions.fields\"\n                 ng-class=\"::field.flex.className\"\n                 flex-item=\"{{::field.flex.item || 1}}\"\n                 flex-order=\"{{::field.flex.order || 1}}\">\n</div>\n```\n. Binding the inner form to `model[options.key].fields` may mess up the form data. But should work.\n. I'm a bit worried about your sleep cycle! Take your time.\n\n`Error: Couldn't set the formControl`\n\nAny thoughts? Keep in mind this is a `form` within a `form`...\n\nI think it has something to do with the inner `form`'s model.\n\n``` html\n<!-- outer form field -->\n <formly-form model=\"vm.formData\" fields=\"vm.formFields\"></formly-form>\n```\n\n``` html\n<!-- inner form field -->\n<!-- lx-flex -->\n<div id=\"{{::id_container}}\"\n     ng-class=\"::options.templateOptions.flex.className\"\n     style=\"::options.templateOptions.flexContainer.style\"\n     flex-container=\"{{::options.templateOptions.flex.container}}\"\n     flex-align=\"{{::options.templateOptions.flex.align}}\"\n     flex-gutter=\"{{::options.templateOptions.flex.gutter}}\">\n\n    <formly-form fields=\"options.templateOptions.fields\"\n                 model=\"::$parent.model\">\n</div>\n```\n\n``` javascript\n/* vm.formFields */\n[\n  {\n    \"key\": \"row\",\n    \"type\": \"lx-flex\",\n    \"templateOptions\": {\n      \"flex\": {\n        \"container\": \"row\",\n        \"align\": \"space-between\"\n      },\n      \"fields\": [\n        {\n          \"key\": \"rowItem1\",\n          \"type\": \"lx-text\",\n          \"wrapper\": \"lx-wrapper-flex-item\",\n          \"templateOptions\": {\n            \"flex\": {},\n            \"type\": \"text\",\n            \"fixedLabel\": true,\n            \"label\": \"Item 1\"\n          }\n        },\n        {\n          \"key\": \"rowItem2\",\n          \"type\": \"lx-text\",\n          \"wrapper\": \"lx-wrapper-flex-item\",\n          \"templateOptions\": {\n            \"flex\": {},\n            \"type\": \"text\",\n            \"fixedLabel\": true,\n            \"label\": \"Item 2\"\n          }\n        },\n        {\n          \"key\": \"rowItem3\",\n          \"type\": \"lx-text\",\n          \"wrapper\": \"lx-wrapper-flex-item\",\n          \"templateOptions\": {\n            \"flex\": {},\n            \"type\": \"text\",\n            \"fixedLabel\": true,\n            \"label\": \"Item 3\"\n          }\n        }\n      ]\n    }\n  }\n]\n```\n. That's the one. I'll take a look at it again tomorrow. Also time for a break. Take care of yourself!\n\nAgain, I appreciate the help.\n. Working. It's a beautiful thing. Thanks!\n. Thanks! Once I get a full understanding of `angular-formly`, I'll start contributing the jsbin docs as well.\n. I think `wrappers` have a lot of great benefits. They don't necessarily need their own `formlyConfig.setWrapper` when `formlyConfig.setType` basically does the same thing. \n\nBut I am a big fan of the functionality of `wrappers`.\n. I found a way to do this today using flex-box. There's an [example here](https://formly-lumx.herokuapp.com/#/flex).\n\nThe trick is to create a `type` with another `<formly-form>` inside of it.\n\n```\n<div>\n    <formly-form fields=\"options.templateOptions.fields\"\n                 model=\"$parent.model\" form=\"::id\" root-el=\"div\"\n                 flex-container=\"{{::options.templateOptions.flex.container}}\"\n                 flex-align=\"{{::options.templateOptions.flex.align}}\"\n                 flex-gutter=\"{{::options.templateOptions.flex.gutter}}\">\n    </formly-form>\n</div>\n```\n\nYou don't need all of those attributes, but notice the `model` links to the `$parent.model` and the `fields` link to `options.templateOptions.fields`. In other words, fields sit inside of templateOptions.\n\nStyles can then be applied using a `wrapper`.\n\n```\n<div ng-class=\"'{{::options.templateOptions.flex.className}}'\"\n    flex-item=\"{{::options.templateOptions.flex.item}}\"\n    flex-order=\"{{::options.templateOptions.flex.order}}\">\n    <formly-transclude></formly-transclude>\n</div>\n```\n\nThe end result produces fields that looks like this:\n\n```\n{\n  'key': 'modelName',\n  'type': 'lx-wrapper-flex',\n  'templateOptions': {\n    'container': 'row', // row | column | row-reverse | column-reverse\n    'wrap': 'nowrap', // nowrap | wrap | wrap-reverse\n    'align': 'space-between', // flex-start | flex-end | center | space-between | space-around | stretch\n    'className': 'bgc-red-500', // ng-class\n    'style': 'height: 200px'\n     'fields': [{\n        {\n          'key': 'modelName',\n          'type': 'lx-whatever-type'\n          'wrapper': 'lx-wrapper-flex-item', // <- add the wrapper\n          'templateOptions': {\n            'flex': {\n              'item': '1' // flex-value number, higher weights the space ratio more \n              'order': '1', // value for ordering boxes\n              'className': 'bgc-red-500' // ng-class\n            }\n          }\n        }\n      }]\n  },\n}\n```\n\nIf you have any questions, shoot me an email (me@shmck.com).\n. This could be achieved now by just manipulating classes. However, I totally agree, the current system is for achieving a form grid is kind of a hack and could be improved.\n\nThe outer field could use a `grid` type with an `ng-class`, in this case it'll take `row`.\n\n```\n<div>\n<formly-form fields=\"options.templateOptions.fields\" model=\"$parent.model\"\nng-class=\"options.templateOptions.className\"></formly-form>\n</div>\n```\n\nYour inner fields could be wrapped with, let's say `wrapper-div` for lack of a better name. It also needs an `ng-class`, they'll take a `col-md-6` in our example.\n\n```\n<div ng-class=\"options.templateOptions.div.className\">\n    <formly-transclude></formly-transclude>\n</div>\n```\n\nThen your fields would go inside the grid type.\n\n```\n$scope.formFields = [\n    {\n        key: userGrid,\n        type: grid,\n        templateOptions: {\n                        className: 'row'\n            fields: [{\n                key: 'username',\n                type: 'text',\n                                wrapper: 'wrapper-div'\n                templateOptions: {\n                    div: {\n                        className: 'col-md-6'\n                    },\n                    label: 'Username',\n                    placeholder: 'johndoe',\n                    required: true,\n                    disabled: false, //default: false\n                    description: 'Descriptive text'\n                }, {\n                key: 'password',\n                type: 'password',\n                               wrapper: 'wrapper-div',\n                templateOptions: {\n                    div: {\n                        className: 'col-md-6'\n                    },\n                    label: 'Password',\n                    required: true,\n                    disabled: false, //default: false\n                    expressionProperties: {\n                        hide: '!model.username' // hide when username is blank\n                    }\n                }\n            }]\n        }\n    }];\n```\n\nThat twisted Christmas tree doesn't look pretty, but it may work. Thanks to @kentcdodds for helping figure that pattern out earlier.\n. :+1: Fantastic!\n. Any specs on the logo?\n- Is it for Angular-Formly in particular or Formly-JS entirely?\n. Somehow I hadn't noticed the link, the error/warning docs are great. Issue should be resolved!\n. However, if I set `noFormControl` to true on `lx-flex`, it will remove the needed `formControl` on all inner elements. May need some kind of `grid` based fix.\n. I would consider it a `grid` issue. The solution worked for titles.\n. I like the idea. Lately, I've been playing with React and enjoy their implementation of type validation. It follows as properties on a validation object that can follow a hierarchical order. An (http://developer.fortnox.se/blog/proptypes-in-react-js/)[http://developer.fortnox.se/blog/proptypes-in-react-js/].\n\n``` javascript\ntemplateOptions: {\n   required: Formly.optionsType.boolean,\n   maxlength: Formly.optionsType.number.range(4, 8),\n   type: Formly.optionsType.oneOf('text', 'number', 'url', 'email', 'password').default('text').isRequired\n}\n```\n\nIt could also be written as an object, as in the [react-prop-schema library](https://github.com/killercup/react-prop-schema). Now that I look at it, this method is much more in order with what angular-formly is doing already.\n\n``` javascript\n{\n  \"required\": {\"type\": \"boolean\"},\n  \"maxlength\": {\"type\": \"number\", \n                       \"min\": 4, \"max\": 8},\n  \"type\": {\"oneOf\": [\"text\", \"number\", \"url\", \"email\", \"password\"], \n               \"required\": true, \n               \"default\": \"text\" }\n}\n```\n. These could be added in the `setType` stage when creating a template. It would be easy to add:\n\n``` javascript\nformlyConfigProvider.setType({\n    name: name,\n    templateUrl: templateUrl,\n    optionTypes: optionTypes  /** optionSchema? */\n})\n```\n. I should keep a better eye on your prolific Github work. There are definitely a lot of great ideas that can be exchanged between React & Angular, great work with apiCheck.js!\n. After reading the intro docs, I'm quite happy with apicheck.js. Let me know when it's ready and I'll give it a beta run.\n. Is there an option available for using `apiCheck` with `formlyConfigProvider.setType` ?\n. I think the API could be further simplified, but the functionality is great and necessary.\nIdeas: \n- Smart defaults: like `templateOptionsCheck.strict` set to `true`.\n- I think the validation should try to resemble the current json-like style api as much as possible.\n- Will errors be thrown or logged as warnings? I have a personal preference for warnings.\n\nA few questions about the example:\nIn the example, `validateOptions` takes a function with `options` but doesn't use the parameter.\nI'm also not sure what the `placeholder: apicheck` does.\n. I have to say, it sounds great. If you can post a few good working examples, I'll set it up with LumX and give it a try.\n. :)\n. I figured a way around it. Before I handled `setType` in the config stage, but with 3.3 it results in an error.\n\nI changed it to handle wrappers in `config` and types in `run`, then no problem.\n. I map over the templates to create them. \n\n``` javascript\nFor example: FIELDS = [{ \n    name: 'templateName', \n    template: 'htmlStuffHere'\n}]\n```\n\nWill it be possible to map over the apiCheck validation rules with the new 3.3 API?\n\nExample:\n\n``` javascript\n FIELDS.map(function (field) {\n        formlyConfig.setType({\n          name: _prefixer(field.name),\n          templateUrl: _fieldTemplateUrl(field.name),\n          validateOptions: function (options) {\n            apiCheck.throw(field.validateOptions || apiCheck.object, arguments);  // <--- validateOptions key\n          }\n        });\n      });\n```\n\nI imagine field.validateOptions would be a function or object... But not sure how to set this up. Perhaps some more advanced examples?\n. So far I'm still not quite sure how to use validateOptions as an object in a loop.\n\n``` javascript\n\"validateOptions\": function (options, apiCheck) {\n      apiCheck.warn([\n        apiCheck.shape({\n         templateOptions: {\n                   label: apiCheck.string\n                }\n          })\n      ], arguments);\n    }\n}\n```\n\nOf course, this doesn't work. \n\nWould it be possible to pass in an object that automatically used apiCheck.shape on templateOptions with easy defaults?\n\n``` javascript\n\"validateOptions\": {\n    label: apiCheck.string\n}\n```\n. Actually, ideally it would great if apiCheck could be used with angular-formly in a more succinct manner:\n\nsetType:\n`validateOptions: apiCheck(field.validateOptions)`\n\nFields object:\n\n``` javascript\nvalidateOptions: {\n      label: 'string',\n      required: 'boolean'\n}\n```\n\nForgive me! This is me dreaming of an impractical perfect world after my own failure at applying apiCheck! \n. Could we get a more advanced example of using `apiCheck` with `angular-formly`? I think that would help. \n\n```\n// formlyConfig.setType\nvalidateOptions: function (options) {\n            apiCheck.warn([\n              apiCheck.shape({\n                label: apiCheck.string\n              })], arguments);\n          }\n```\n\nResults in an error: \nangular-formly: apiCheck failed! You passed: `{\"key\":\"String\",\"type\":\"String\",\"templateOptions\":\"{\\\"type\\\":\\\"String\\\",\\\"label\\\":\\\"String\\\"}\",\"data\":\"{}\",\"validation\":\"{}\"}` and should have passed: `shape({\"label\":\"String\"})``\n\nI've struggled and failed at getting a basic example to work.\n. Thanks, I'll give it a try!\n. No longer an issue, closed!\n. I tried JSPM with the minified version. Different error this time:\n`Uncaught TypeError: n(...) is not a function`\n. You're right, there are no references to `webpack` loaded from minified version. When I remove the reference to sourcemaps in `formly.min.js`, the problem persists as well.\n\nIs there a version of formly that doesn't rely on `webpack` module loading? \n\nI prefer JSPM as it is just a simple extension of NPM & Bower, tools most people are already familiar with. The learning curve is minutes. \n\nPerhaps the issue is JSPM providing better webpack support...\n. Significant step forward. Angular-formly@4.0.6 loads, but then, sadly, crashes on api-check@6.0.10.\n\n```\nFailed to load resource: net::ERR_CONNECTION_REFUSED. \nError loading \"bower:api-check@6.0.10\"\n```\n\nI'm not sure why it fails to load as all paths look fine.\n\nThe server fails with: \n\n```\nError: getaddrinfo ENOTFOUND\n    at errnoException (dns.js:37:11)\n    at Object.onanswer [as oncomplete] (dns.js:124:16)\n```\n. It's strange, all the paths are fine but the `es6-module-loader` gives a DSN error.\n\nI'll try updating the es6-module-loader & traceur to see if a fix has been incorporated. \n\nI would really like to use angular-formly on this new project!\n. I think it's fair to assume its a bigger JSPM or ES6ModuleLoader issue, as it works fine with NPM. Not library specific.\n. Unfortunately, transferring fails with \"You don't have admin rights to formly-js\".\n\nOption A is to (temporarily) change group permissions to grant me admin rights for the repo. You can find repo permissions [explained here](https://help.github.com/articles/permission-levels-for-an-organization-repository/).\n\nOption B is to transfer the account to a specific user, in which case: either yourself or astrism.\n. Excellent! It's done!\n. I have some time this week, I'll see what I can do.\n. Exciting stuff!\n\nI second `type` changing to `template`/`templateUrl`. I found it quite confusing when building `input` templates that use the same attribute name.\n\nLooking forward to the `wrapper`. Actually, I had issues in my current project where it was simpler to avoid using Formly in order to render the inputs on the page properly. I imagine the `wrapper` could even be used to create in-line styled forms, or even drop-down menus. I assume this will grant the ability to finally organize fields on the page by wrapping them in boxes with custom css classes. Great!\n\n`modelOptions` & `validators` is a tough call. Personally, I used both of them in the LumX templates with ng-Messages, but I wouldn't necessarily classify them as `templateOptions`. \n\nI wish I could give you better feedback, but I appreciate the opportunity and the heads up. I'll get prepared with e2e tests for the 3.0.0 drop to catch up to speed. Good luck with the talk next week!\n. Awesome, I'll try to have it all up-to-date by the end of the week.\n. Then I better get on that right away! \n\nI was working on making a simple grunt/gulp tool to compile formly templates to make future updates smoother, but I think I'll just stick to using ng-templates + copy/paste. Ran into a frustrating lack of know-how. If you have an existing solution, let me know!\n. Already loving the wrappers. \n\nBut I'm a little confused about the API. So `templateOptions` refers to template specific parameters. That's clearly needed. At first I thought `required` belonged outside of `templateOptions`, but now I realize it's in the right place. \n\nHowever, I don't understand why `options: []` is under templateOptions. Is it not the basic data options i.e. for radio buttons? \n. As a suggestion, perhaps `options.templateOptions.someName` could be shortened to `templateOptions.someName` (with some difficulty) or `options.template.someName`?\n. Another crazier suggestion, as it's getting late on this side of the world:\n\nA lot of `templateOptions` can be linked to core angular directives: `ng-required`, `ng-disabled`, `ng-checked`, etc. Perhaps these could be differentiated if deemed necessary? On second thought, maybe not.\n. Typo in CHANGELOG 3.0.0 (Unpublished)\n`mode[options.key]` - > model\n. I see what you mean now about `options: []` & `templateOptions` and I'm happy with that part of the API.\n. I fixed up the angular-formly-templates-lumx. There's a demo [here](https://formly-lumx.herokuapp.com/text).\n\nI haven't been able to get any `select`ers to work with 3.0.0, any thoughts? I'll try again later.\n. 99% working. Thanks for the help!\n. The pre/post wrapper can have definite uses. I'll put some thought into it.\n\nHowever, what about changes in context? These should be handled in the JSON for easier usability rather than at the provider level.\n\nI quickly googled \"grid form\" for an [example](http://kumailht.com/gridforms/media/images/form-zoomed-out.png). Formly + any css framework should be able to create complex form grids. \n\nI was thinking adding an optional `wrapperOptions` to the api could handle all of this. It would perform in essentially the same way as `templateOptions`.\n. I just realized `formlyConfigProvider.setWrapper({})` forces all of the wrappers on the template. As a result I was getting 3 sets of ngMessages on my text-fields, one for each wrapper. I'm not sure the usefulness of `setWrapper` other than saving a little template code.\n. I see now that `wrapperOptions` are not needed.  `templateOptions` can already fill them out. Excellent! Issue closed for me.\n. I posted up some examples with docs on the [templates-lumx](https://formly-lumx.herokuapp.com) site, have a look and tell me what you think. So far, I'm loving the flexibility `wrappers` bring. Thanks!\n. One of the new features is using `flexbox` with form fields. :)\n. Sorry, I just checked my email and found I had completely missed that previous message! FYI - I'm in the South Korea time zone (UTC+09:00).\n\nSo far, I think one pipeline is fine. I'll look into the template manipulator ASAP.\n. I hadn't realized the power of `ngModelAttrs`. They can drastically reduce the bloat on form fields.\n\nI think the docs could use an example. I'm not entirely sure how to use them. \n\nAre they set by an `ngModelAttrs` array that can hold multiple `ng`-directives with values? \n\n```\n    ngModelAttrs = ['ng-required': true, 'ng-pattern': '/[A-Za-z]/', 'ng-disabled': false]\n```\n\nOr can they only be set and changed in `expressionProperties`?\n\n```\nexpressionProperties: {\n    options.ngModelAttrs[ng-required] = true,\n    options.ngModelAttrs[ng-pattern] = /[A-Za-z]/\n    options.ngModelAttrs[ng-disabled] = false\n    }\n```\n. I'm trying to setup `flex-box` with `angular-formly-templates-lumx`. Unfortunately, I haven't been able to get it to work based on [this `jsbin` example](http://jsbin.com/jaloz/2/edit?html,js,output).\n\n```\nError: `Formly Error: You have specified field properties that are not allowed: \"fields\"`.\n```\n\n# Questions\n1. How could I add a custom field `fields: []` to my template?\n2. Is it possible to define and add other custom fields? Hmm...\n\n---\n\n# Current Proposed API\n\n### lx-wrapper-flex-container API\n\n``` javascript\n{\n  'key': 'modelName',\n/* type or wrapper? type is required by formly */\n  'type': 'lx-wrapper-flex-container', \n  'templateOptions': {\n    'container': 'row', // row | column | row-reverse | column-reverse\n    'wrap': 'nowrap', // nowrap | wrap | wrap-reverse\n    'align': 'space-between', // flex-start | flex-end | center | space-between | space-around | stretch\n    'class': 'bgc-red-500', // ng-class\n    'style': 'height: 200px'\n  },\n/* as in the jsbin example. */\n  'fields': [{\n    /* 'lx-wrapper-flex-item' fields here */\n  }]\n}\n```\n\n### lx-wrapper-flex-item API\n\n``` javascript\n{\n  'key': 'modelName',\n  'type': 'lx-whatever-type'\n  'wrapper': 'lx-wrapper-flex-item', // <- add the wrapper\n  'templateOptions': {\n    'flex': {\n      'item': '1' // flex-value number, higher weights the space ratio more \n      'order': '1', // value for ordering boxes\n      'class': 'bgc-red-500' // ng-class\n    }\n  }\n}\n```\n. My brain just went _click_! \n\nGotcha, I'll just create an `ng-repeat` inside to handle the inner `flex-item`'s. Easy peezy.\n. `<formly-form>` inside a `<formly-form>`. Good idea, bad idea?\n\n``` html\n<!-- lx-wrapper-flex-container -->\n\n<div ng-class=\"::options.templateOptions.flexContainer.className\"\n     style=\"::options.templateOptions.flexContainer.style\"\n     flex-container=\"{{::options.templateOptions.flexContainer.container}}\"\n     flex-align=\"{{::options.templateOptions.flexContainer.align}}\"\n     flex-gutter=\"{{::options.templateOptions.flexContainer.gutter}}\">\n\n    <formly-form model=\"vm.formData\" fields=\"options.templateOptions.fields\"\n                 ng-class=\"::field.flex.className\"\n                 flex-item=\"{{::field.flex.item || 1}}\"\n                 flex-order=\"{{::field.flex.order || 1}}\">\n</div>\n```\n. Binding the inner form to `model[options.key].fields` may mess up the form data. But should work.\n. I'm a bit worried about your sleep cycle! Take your time.\n\n`Error: Couldn't set the formControl`\n\nAny thoughts? Keep in mind this is a `form` within a `form`...\n\nI think it has something to do with the inner `form`'s model.\n\n``` html\n<!-- outer form field -->\n <formly-form model=\"vm.formData\" fields=\"vm.formFields\"></formly-form>\n```\n\n``` html\n<!-- inner form field -->\n<!-- lx-flex -->\n<div id=\"{{::id_container}}\"\n     ng-class=\"::options.templateOptions.flex.className\"\n     style=\"::options.templateOptions.flexContainer.style\"\n     flex-container=\"{{::options.templateOptions.flex.container}}\"\n     flex-align=\"{{::options.templateOptions.flex.align}}\"\n     flex-gutter=\"{{::options.templateOptions.flex.gutter}}\">\n\n    <formly-form fields=\"options.templateOptions.fields\"\n                 model=\"::$parent.model\">\n</div>\n```\n\n``` javascript\n/* vm.formFields */\n[\n  {\n    \"key\": \"row\",\n    \"type\": \"lx-flex\",\n    \"templateOptions\": {\n      \"flex\": {\n        \"container\": \"row\",\n        \"align\": \"space-between\"\n      },\n      \"fields\": [\n        {\n          \"key\": \"rowItem1\",\n          \"type\": \"lx-text\",\n          \"wrapper\": \"lx-wrapper-flex-item\",\n          \"templateOptions\": {\n            \"flex\": {},\n            \"type\": \"text\",\n            \"fixedLabel\": true,\n            \"label\": \"Item 1\"\n          }\n        },\n        {\n          \"key\": \"rowItem2\",\n          \"type\": \"lx-text\",\n          \"wrapper\": \"lx-wrapper-flex-item\",\n          \"templateOptions\": {\n            \"flex\": {},\n            \"type\": \"text\",\n            \"fixedLabel\": true,\n            \"label\": \"Item 2\"\n          }\n        },\n        {\n          \"key\": \"rowItem3\",\n          \"type\": \"lx-text\",\n          \"wrapper\": \"lx-wrapper-flex-item\",\n          \"templateOptions\": {\n            \"flex\": {},\n            \"type\": \"text\",\n            \"fixedLabel\": true,\n            \"label\": \"Item 3\"\n          }\n        }\n      ]\n    }\n  }\n]\n```\n. That's the one. I'll take a look at it again tomorrow. Also time for a break. Take care of yourself!\n\nAgain, I appreciate the help.\n. Working. It's a beautiful thing. Thanks!\n. Thanks! Once I get a full understanding of `angular-formly`, I'll start contributing the jsbin docs as well.\n. I think `wrappers` have a lot of great benefits. They don't necessarily need their own `formlyConfig.setWrapper` when `formlyConfig.setType` basically does the same thing. \n\nBut I am a big fan of the functionality of `wrappers`.\n. I found a way to do this today using flex-box. There's an [example here](https://formly-lumx.herokuapp.com/#/flex).\n\nThe trick is to create a `type` with another `<formly-form>` inside of it.\n\n```\n<div>\n    <formly-form fields=\"options.templateOptions.fields\"\n                 model=\"$parent.model\" form=\"::id\" root-el=\"div\"\n                 flex-container=\"{{::options.templateOptions.flex.container}}\"\n                 flex-align=\"{{::options.templateOptions.flex.align}}\"\n                 flex-gutter=\"{{::options.templateOptions.flex.gutter}}\">\n    </formly-form>\n</div>\n```\n\nYou don't need all of those attributes, but notice the `model` links to the `$parent.model` and the `fields` link to `options.templateOptions.fields`. In other words, fields sit inside of templateOptions.\n\nStyles can then be applied using a `wrapper`.\n\n```\n<div ng-class=\"'{{::options.templateOptions.flex.className}}'\"\n    flex-item=\"{{::options.templateOptions.flex.item}}\"\n    flex-order=\"{{::options.templateOptions.flex.order}}\">\n    <formly-transclude></formly-transclude>\n</div>\n```\n\nThe end result produces fields that looks like this:\n\n```\n{\n  'key': 'modelName',\n  'type': 'lx-wrapper-flex',\n  'templateOptions': {\n    'container': 'row', // row | column | row-reverse | column-reverse\n    'wrap': 'nowrap', // nowrap | wrap | wrap-reverse\n    'align': 'space-between', // flex-start | flex-end | center | space-between | space-around | stretch\n    'className': 'bgc-red-500', // ng-class\n    'style': 'height: 200px'\n     'fields': [{\n        {\n          'key': 'modelName',\n          'type': 'lx-whatever-type'\n          'wrapper': 'lx-wrapper-flex-item', // <- add the wrapper\n          'templateOptions': {\n            'flex': {\n              'item': '1' // flex-value number, higher weights the space ratio more \n              'order': '1', // value for ordering boxes\n              'className': 'bgc-red-500' // ng-class\n            }\n          }\n        }\n      }]\n  },\n}\n```\n\nIf you have any questions, shoot me an email (me@shmck.com).\n. This could be achieved now by just manipulating classes. However, I totally agree, the current system is for achieving a form grid is kind of a hack and could be improved.\n\nThe outer field could use a `grid` type with an `ng-class`, in this case it'll take `row`.\n\n```\n<div>\n<formly-form fields=\"options.templateOptions.fields\" model=\"$parent.model\"\nng-class=\"options.templateOptions.className\"></formly-form>\n</div>\n```\n\nYour inner fields could be wrapped with, let's say `wrapper-div` for lack of a better name. It also needs an `ng-class`, they'll take a `col-md-6` in our example.\n\n```\n<div ng-class=\"options.templateOptions.div.className\">\n    <formly-transclude></formly-transclude>\n</div>\n```\n\nThen your fields would go inside the grid type.\n\n```\n$scope.formFields = [\n    {\n        key: userGrid,\n        type: grid,\n        templateOptions: {\n                        className: 'row'\n            fields: [{\n                key: 'username',\n                type: 'text',\n                                wrapper: 'wrapper-div'\n                templateOptions: {\n                    div: {\n                        className: 'col-md-6'\n                    },\n                    label: 'Username',\n                    placeholder: 'johndoe',\n                    required: true,\n                    disabled: false, //default: false\n                    description: 'Descriptive text'\n                }, {\n                key: 'password',\n                type: 'password',\n                               wrapper: 'wrapper-div',\n                templateOptions: {\n                    div: {\n                        className: 'col-md-6'\n                    },\n                    label: 'Password',\n                    required: true,\n                    disabled: false, //default: false\n                    expressionProperties: {\n                        hide: '!model.username' // hide when username is blank\n                    }\n                }\n            }]\n        }\n    }];\n```\n\nThat twisted Christmas tree doesn't look pretty, but it may work. Thanks to @kentcdodds for helping figure that pattern out earlier.\n. :+1: Fantastic!\n. Any specs on the logo?\n- Is it for Angular-Formly in particular or Formly-JS entirely?\n. Somehow I hadn't noticed the link, the error/warning docs are great. Issue should be resolved!\n. However, if I set `noFormControl` to true on `lx-flex`, it will remove the needed `formControl` on all inner elements. May need some kind of `grid` based fix.\n. I would consider it a `grid` issue. The solution worked for titles.\n. I like the idea. Lately, I've been playing with React and enjoy their implementation of type validation. It follows as properties on a validation object that can follow a hierarchical order. An (http://developer.fortnox.se/blog/proptypes-in-react-js/)[http://developer.fortnox.se/blog/proptypes-in-react-js/].\n\n``` javascript\ntemplateOptions: {\n   required: Formly.optionsType.boolean,\n   maxlength: Formly.optionsType.number.range(4, 8),\n   type: Formly.optionsType.oneOf('text', 'number', 'url', 'email', 'password').default('text').isRequired\n}\n```\n\nIt could also be written as an object, as in the [react-prop-schema library](https://github.com/killercup/react-prop-schema). Now that I look at it, this method is much more in order with what angular-formly is doing already.\n\n``` javascript\n{\n  \"required\": {\"type\": \"boolean\"},\n  \"maxlength\": {\"type\": \"number\", \n                       \"min\": 4, \"max\": 8},\n  \"type\": {\"oneOf\": [\"text\", \"number\", \"url\", \"email\", \"password\"], \n               \"required\": true, \n               \"default\": \"text\" }\n}\n```\n. These could be added in the `setType` stage when creating a template. It would be easy to add:\n\n``` javascript\nformlyConfigProvider.setType({\n    name: name,\n    templateUrl: templateUrl,\n    optionTypes: optionTypes  /** optionSchema? */\n})\n```\n. I should keep a better eye on your prolific Github work. There are definitely a lot of great ideas that can be exchanged between React & Angular, great work with apiCheck.js!\n. After reading the intro docs, I'm quite happy with apicheck.js. Let me know when it's ready and I'll give it a beta run.\n. Is there an option available for using `apiCheck` with `formlyConfigProvider.setType` ?\n. I think the API could be further simplified, but the functionality is great and necessary.\nIdeas: \n- Smart defaults: like `templateOptionsCheck.strict` set to `true`.\n- I think the validation should try to resemble the current json-like style api as much as possible.\n- Will errors be thrown or logged as warnings? I have a personal preference for warnings.\n\nA few questions about the example:\nIn the example, `validateOptions` takes a function with `options` but doesn't use the parameter.\nI'm also not sure what the `placeholder: apicheck` does.\n. I have to say, it sounds great. If you can post a few good working examples, I'll set it up with LumX and give it a try.\n. :)\n. I figured a way around it. Before I handled `setType` in the config stage, but with 3.3 it results in an error.\n\nI changed it to handle wrappers in `config` and types in `run`, then no problem.\n. I map over the templates to create them. \n\n``` javascript\nFor example: FIELDS = [{ \n    name: 'templateName', \n    template: 'htmlStuffHere'\n}]\n```\n\nWill it be possible to map over the apiCheck validation rules with the new 3.3 API?\n\nExample:\n\n``` javascript\n FIELDS.map(function (field) {\n        formlyConfig.setType({\n          name: _prefixer(field.name),\n          templateUrl: _fieldTemplateUrl(field.name),\n          validateOptions: function (options) {\n            apiCheck.throw(field.validateOptions || apiCheck.object, arguments);  // <--- validateOptions key\n          }\n        });\n      });\n```\n\nI imagine field.validateOptions would be a function or object... But not sure how to set this up. Perhaps some more advanced examples?\n. So far I'm still not quite sure how to use validateOptions as an object in a loop.\n\n``` javascript\n\"validateOptions\": function (options, apiCheck) {\n      apiCheck.warn([\n        apiCheck.shape({\n         templateOptions: {\n                   label: apiCheck.string\n                }\n          })\n      ], arguments);\n    }\n}\n```\n\nOf course, this doesn't work. \n\nWould it be possible to pass in an object that automatically used apiCheck.shape on templateOptions with easy defaults?\n\n``` javascript\n\"validateOptions\": {\n    label: apiCheck.string\n}\n```\n. Actually, ideally it would great if apiCheck could be used with angular-formly in a more succinct manner:\n\nsetType:\n`validateOptions: apiCheck(field.validateOptions)`\n\nFields object:\n\n``` javascript\nvalidateOptions: {\n      label: 'string',\n      required: 'boolean'\n}\n```\n\nForgive me! This is me dreaming of an impractical perfect world after my own failure at applying apiCheck! \n. Could we get a more advanced example of using `apiCheck` with `angular-formly`? I think that would help. \n\n```\n// formlyConfig.setType\nvalidateOptions: function (options) {\n            apiCheck.warn([\n              apiCheck.shape({\n                label: apiCheck.string\n              })], arguments);\n          }\n```\n\nResults in an error: \nangular-formly: apiCheck failed! You passed: `{\"key\":\"String\",\"type\":\"String\",\"templateOptions\":\"{\\\"type\\\":\\\"String\\\",\\\"label\\\":\\\"String\\\"}\",\"data\":\"{}\",\"validation\":\"{}\"}` and should have passed: `shape({\"label\":\"String\"})``\n\nI've struggled and failed at getting a basic example to work.\n. Thanks, I'll give it a try!\n. No longer an issue, closed!\n. I tried JSPM with the minified version. Different error this time:\n`Uncaught TypeError: n(...) is not a function`\n. You're right, there are no references to `webpack` loaded from minified version. When I remove the reference to sourcemaps in `formly.min.js`, the problem persists as well.\n\nIs there a version of formly that doesn't rely on `webpack` module loading? \n\nI prefer JSPM as it is just a simple extension of NPM & Bower, tools most people are already familiar with. The learning curve is minutes. \n\nPerhaps the issue is JSPM providing better webpack support...\n. Significant step forward. Angular-formly@4.0.6 loads, but then, sadly, crashes on api-check@6.0.10.\n\n```\nFailed to load resource: net::ERR_CONNECTION_REFUSED. \nError loading \"bower:api-check@6.0.10\"\n```\n\nI'm not sure why it fails to load as all paths look fine.\n\nThe server fails with: \n\n```\nError: getaddrinfo ENOTFOUND\n    at errnoException (dns.js:37:11)\n    at Object.onanswer [as oncomplete] (dns.js:124:16)\n```\n. It's strange, all the paths are fine but the `es6-module-loader` gives a DSN error.\n\nI'll try updating the es6-module-loader & traceur to see if a fix has been incorporated. \n\nI would really like to use angular-formly on this new project!\n. I think it's fair to assume its a bigger JSPM or ES6ModuleLoader issue, as it works fine with NPM. Not library specific.\n. ",
    "rahil471": "Hey Thanks for following up ,  this issue is solved.\nI've another issue , I'll start a new thread if required.\n\nI wanted to ask is that , I'm unable to retrieve form name in my controller, is it because of the `<ng-from />` tag , or may be because the library is adding `form` by it self into the name attribute.\n\nFor eg: If i name the form as `activateSimForm` , the DOM shows it as `name=\"activateSimForm form\"`\n. Hey Thanks man ,\nThat worked.\nI'm enjoying using this.\n. Hey Thanks for following up ,  this issue is solved.\nI've another issue , I'll start a new thread if required.\n\nI wanted to ask is that , I'm unable to retrieve form name in my controller, is it because of the `<ng-from />` tag , or may be because the library is adding `form` by it self into the name attribute.\n\nFor eg: If i name the form as `activateSimForm` , the DOM shows it as `name=\"activateSimForm form\"`\n. Hey Thanks man ,\nThat worked.\nI'm enjoying using this.\n. ",
    "alessandrogurgel": "Thanks. Actually, this was what i done :D. It works. thxs!\n. Ok.\nSorry, I was not clear.  I suggested that this feature (mask) could be implemented to provide native support of formly in future. \nFor instance, I could specify a field as {key: 'start', type: 'text', label: 'start', mask: '23:59:59'} which represent as time whose format is HH:MM:SS. It is a suggestion of a nice and easy-to-implement feature. \nthx\n. Thanks. Actually, this was what i done :D. It works. thxs!\n. Ok.\nSorry, I was not clear.  I suggested that this feature (mask) could be implemented to provide native support of formly in future. \nFor instance, I could specify a field as {key: 'start', type: 'text', label: 'start', mask: '23:59:59'} which represent as time whose format is HH:MM:SS. It is a suggestion of a nice and easy-to-implement feature. \nthx\n. ",
    "k010": "@kentcdodds thanks for response, i found a nice explication in this blog [json-schema-validation](http://www.asbjornenge.com/wwc/json_schema.html). \nBasically my idea is the same that @quietlyconfident In #114 mention. \nDon't worry about right now (i don't read before the #114) this is a suggest, and keep in mind this is a good idea implement in a future version. \n\nNice work !\n. @kentcdodds sorry for late response, i think sounds great for the first step to use a schema validation, then like comment @quietlyconfident, if you wanted, you can build certain properties in the form field, for eg. we get this simple schema: \n\n``` json\n{\n    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n    \"type\": \"object\",\n    \"title\": \"Person\",\n    \"properties\": {\n        \"name\": {\n            \"type\": \"string\",\n            \"displayOrder\": 0,\n            \"maxLength\": 60,\n            \"defaultVisible\": true,\n            \"title\": \"Name\",\n            \"description\": \"Your name...\"\n        },        \n        \"lastname\": {\n            \"type\": \"string\",\n            \"displayOrder\": 1,\n            \"maxLength\": 30,\n            \"defaultVisible\": true,\n            \"title\": \"Lastname\",\n            \"description\": \"Your lastname\"\n        }\n    },\n    \"required\": [\"name\"]\n}\n```\n\nAnd can build input properties base in the schema, you can take **type** and render the input type or get **title** and set the label or **description** and build the placeholder, etc...\n\nThink it's posible implement something like this ?\n. @kentcdodds would be great, add or not this feature thanks for the reply equal !!\n. Thanks, for the reply !! \nam going to try it\n:+1: \n. @kentcdodds thanks for response, i found a nice explication in this blog [json-schema-validation](http://www.asbjornenge.com/wwc/json_schema.html). \nBasically my idea is the same that @quietlyconfident In #114 mention. \nDon't worry about right now (i don't read before the #114) this is a suggest, and keep in mind this is a good idea implement in a future version. \n\nNice work !\n. @kentcdodds sorry for late response, i think sounds great for the first step to use a schema validation, then like comment @quietlyconfident, if you wanted, you can build certain properties in the form field, for eg. we get this simple schema: \n\n``` json\n{\n    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n    \"type\": \"object\",\n    \"title\": \"Person\",\n    \"properties\": {\n        \"name\": {\n            \"type\": \"string\",\n            \"displayOrder\": 0,\n            \"maxLength\": 60,\n            \"defaultVisible\": true,\n            \"title\": \"Name\",\n            \"description\": \"Your name...\"\n        },        \n        \"lastname\": {\n            \"type\": \"string\",\n            \"displayOrder\": 1,\n            \"maxLength\": 30,\n            \"defaultVisible\": true,\n            \"title\": \"Lastname\",\n            \"description\": \"Your lastname\"\n        }\n    },\n    \"required\": [\"name\"]\n}\n```\n\nAnd can build input properties base in the schema, you can take **type** and render the input type or get **title** and set the label or **description** and build the placeholder, etc...\n\nThink it's posible implement something like this ?\n. @kentcdodds would be great, add or not this feature thanks for the reply equal !!\n. Thanks, for the reply !! \nam going to try it\n:+1: \n. ",
    "yieme": "+1\n. +1\n. ",
    "skchi": "Thanks for the quick response, but i assume you are changing the type (select), instead if you change the \"Form\", you see the issue i am talking about.\n. Got what you are doing, but instead of changing the Type, if you just change the \"forms\", thats when i see the issue. I apologize if i am not clear.\n\nIf we select the form and then change the type field it does work.\n\nLet me explain more.\n\nIf i have a form which has model with the data, where type = 1. \neg: name field needs to shown. (I have a condition and it works fine), later i update the model data where type = 2, and the name needs to be hidden, in that scenario i still name field.\n. here is the updated plunker ...\n\nhttp://plnkr.co/edit/t8WcjuajSptQpdY72Rdb?p=preview\n\nif you change the form, which inturn update the model, but doesnt hide the fields ..\n. Thanks.\n\nI am trying to implement the solution you have provided in our use case, but i didn't understand why you are copying formfields upfront. I wouldn't know the formfields as its dynamically generated. Can you provide inputs around that.\n. i was already doing that.. but there is a typo which was causing issue .. now working fine ...\n\nI am just concerned on the performance by storing the formdata and formfields .. for every operation... wouldn't it nice if we could just destroy the earlier data and update with the new data .. \n\ni really appreciate your help and inputs ...  \n. I really appreciate your help .. thanks again .. \n. Thanks for the quick response, but i assume you are changing the type (select), instead if you change the \"Form\", you see the issue i am talking about.\n. Got what you are doing, but instead of changing the Type, if you just change the \"forms\", thats when i see the issue. I apologize if i am not clear.\n\nIf we select the form and then change the type field it does work.\n\nLet me explain more.\n\nIf i have a form which has model with the data, where type = 1. \neg: name field needs to shown. (I have a condition and it works fine), later i update the model data where type = 2, and the name needs to be hidden, in that scenario i still name field.\n. here is the updated plunker ...\n\nhttp://plnkr.co/edit/t8WcjuajSptQpdY72Rdb?p=preview\n\nif you change the form, which inturn update the model, but doesnt hide the fields ..\n. Thanks.\n\nI am trying to implement the solution you have provided in our use case, but i didn't understand why you are copying formfields upfront. I wouldn't know the formfields as its dynamically generated. Can you provide inputs around that.\n. i was already doing that.. but there is a typo which was causing issue .. now working fine ...\n\nI am just concerned on the performance by storing the formdata and formfields .. for every operation... wouldn't it nice if we could just destroy the earlier data and update with the new data .. \n\ni really appreciate your help and inputs ...  \n. I really appreciate your help .. thanks again .. \n. ",
    "brusand": "i use the latest version, change result to model and no change. i try your jsbin ... but you don t use the same var than me. i use $scope.formData and you (vm = this) vm.FormData.\n\ni tried <formly-form model=\"$scope.formActorData\" but failed too.\n  .controller('ActorsCtrl', function($scope, $state, $stateParams, toasty, Actor, SweetAlert) {\n\n  $scope.formActorData = {};\n  $scope.formFields = [{\n    key: 'actorid',\n    type: 'text',\n    label: 'ActorID',\n    required: true\n  }\n   ,{\n    key: 'description',\n    type: 'text',\n    label: 'Description',\n    required: true\n  }];\n\n  $scope.formOptions = {\n      uniqueFormId: 'myFormActorId'\n\n  };\n\n  $scope.onSubmit = function() {\n    console.log(\"Actor create \" + $scope.formActorData.actorid);\n    Actor.upsert($scope.formActorData, function() {\n      toasty.pop.success({title: 'Actor saved', msg: 'Your actor is safe with us!', sound: false});\n      $state.go('^.list');\n    }, function(err) {\n      console.log(err);\n    });\n  };\n\n  });\n. very, very strange, even with this controller, the vm.formData never be updated by the form\n\n  var vm = this;\n\n  vm.formActorData = {};\n  vm.formFields = [{\n    key: 'actorid',\n    type: 'text',\n    label: 'ActorID',\n    required: true\n  }\n   ,{\n    key: 'description',\n    type: 'text',\n    label: 'Description',\n    required: true\n  }];\n\n  $scope.formOptions = {\n      uniqueFormId: 'myFormActorId'\n\n  };\nvm.onSubmit = $scope.onSubmit;\n  $scope.onSubmit = function() {\n    console.log(\"Actor create \" + vm.formActorData.actorid);\n    }, function(err) {\n      console.log(err);\n    });\n  };\n\n  });\n. Hi Kent,\n\nNow it works like a charm, (thanks to your link). The version of Angular is import, it failed under 1.3.8. You must include angular-formly-template too . Here is the minimal one page wich work like a charm \n\n<a class=\"jsbin-embed\" href=\"http://jsbin.com/quvaniyuyi/1/embed\">minimal one page app formly</a><script src=\"http://static.jsbin.com/js/embed.js\"></script>\n\nmy 2 cents\nBruno\n. i use the latest version, change result to model and no change. i try your jsbin ... but you don t use the same var than me. i use $scope.formData and you (vm = this) vm.FormData.\n\ni tried <formly-form model=\"$scope.formActorData\" but failed too.\n  .controller('ActorsCtrl', function($scope, $state, $stateParams, toasty, Actor, SweetAlert) {\n\n  $scope.formActorData = {};\n  $scope.formFields = [{\n    key: 'actorid',\n    type: 'text',\n    label: 'ActorID',\n    required: true\n  }\n   ,{\n    key: 'description',\n    type: 'text',\n    label: 'Description',\n    required: true\n  }];\n\n  $scope.formOptions = {\n      uniqueFormId: 'myFormActorId'\n\n  };\n\n  $scope.onSubmit = function() {\n    console.log(\"Actor create \" + $scope.formActorData.actorid);\n    Actor.upsert($scope.formActorData, function() {\n      toasty.pop.success({title: 'Actor saved', msg: 'Your actor is safe with us!', sound: false});\n      $state.go('^.list');\n    }, function(err) {\n      console.log(err);\n    });\n  };\n\n  });\n. very, very strange, even with this controller, the vm.formData never be updated by the form\n\n  var vm = this;\n\n  vm.formActorData = {};\n  vm.formFields = [{\n    key: 'actorid',\n    type: 'text',\n    label: 'ActorID',\n    required: true\n  }\n   ,{\n    key: 'description',\n    type: 'text',\n    label: 'Description',\n    required: true\n  }];\n\n  $scope.formOptions = {\n      uniqueFormId: 'myFormActorId'\n\n  };\nvm.onSubmit = $scope.onSubmit;\n  $scope.onSubmit = function() {\n    console.log(\"Actor create \" + vm.formActorData.actorid);\n    }, function(err) {\n      console.log(err);\n    });\n  };\n\n  });\n. Hi Kent,\n\nNow it works like a charm, (thanks to your link). The version of Angular is import, it failed under 1.3.8. You must include angular-formly-template too . Here is the minimal one page wich work like a charm \n\n<a class=\"jsbin-embed\" href=\"http://jsbin.com/quvaniyuyi/1/embed\">minimal one page app formly</a><script src=\"http://static.jsbin.com/js/embed.js\"></script>\n\nmy 2 cents\nBruno\n. ",
    "maryampashmi": "In above example which i put yesterday. I did exactly what you wrote. I mean i change radio with check box. but moreover  i need to an extra option when user choose the last check box then should open another hidden text box where ask him to input his / her preferences. It means one hidden text box inside check list . so first i would like you inform that if my above json file is correct or not? then if it is correct what is the next step? because with this json file i didn't get any answer and my survey is seems so messy.\n. there is still my missing part remains which i couldn't solved that.please look at this json file:\n\n``` json\n{\n    \"key\": \"Q2\",\n    \"type\": \"checkbox-template\",\n    \"label\": \"What are the most important language to learn?\",\n    \"options\": [\n      {\n        \"name\": \"english\",\n        \"value\": \"eng\"\n      },\n      {\n        \"name\": \"spanish\",\n        \"value\": \"spnsh\"\n      },\n      {\n        \"name\": \"french\",\n        \"value\": \"frnch\"\n      },\n      {\n        \"name\": \"more\",\n        \"value\": \"more\",\n        \"key\": \"checkThis\"\n      },\n      {\n        \"key\": \"hiddenWhenUnchecked\",\n        \"type\": \"text\",\n        \"line\": 4,\n        \"label\": \"Please write down if you consider another languages\",\n        \"placeholder\": \"chinese\",\n        \"expressionProperties\": {\n          \"hide\": \"!model.checkThis\"\n        }\n      }\n    ]\n  },\n```\n\nThere is still one hidden text box which when i check last option should appear which is not working at all.Please if somebody knows solution let me to know. \nThank you.\n. thank you for your help. It was great and helpful. I only have a suggestion if you provide video tutorial so  it is more easier to learn about building templates especially for beginners.\nThank you.\n. This is  good link ... seems useful to me. ...  :)\n. I still have a problem after 4 times click on my button. More over i can not see this form in my view. here you can see my controller \"https://github.com/maryampashmi/Data-Procurement-Repository/blob/master/controllers/formController.js\" and here is my partial \"https://github.com/maryampashmi/Data-Procurement-Repository/blob/master/partials/poll.legal.html\" .\n\nI also added related script in my index.Can you guide me what is a problem? even i can not see any button in my view.\n\nThank you.\n. Thank you for your following.\nPlease check this example : http://jsbin.com/nowaju/1/edit?html,js,output\nI have 2 app.js in my program which in one i entered dependencies : \nvar myApp= angular.module('myApp', ['ui.router','formly', 'formlyVanilla']);\nAlso i have index.html which i called all these 3 java script with versions you have mentioned. I want to show my form in page while i can see only button in my page.\nthis is a link of my project : https://github.com/maryampashmi/Data-Procurement-Repository\n. I don't know what is going on with my code ;) somethings that i can not guess happened. I have applied all changes as you have mentioned in my repository. this appear new problem beside old one.My ui-router part is not working now ;) moreover i can not see any form in my html..... In addition i don't get any error in inspected element so i can not realize nothing..\n. I have tried a lot , This is all last commit you can see in my repository. There is not any way to run angular formly with ui route.  I really decided to use normal form in angular as i couldn't find any way to solve it.  Please see this command \"https://github.com/maryampashmi/Data-Procurement-Repository/commits/master\"\n\nWe will be really thank you if you can give us any help. It is not possible to shoe any form in html.\n. Thank you so much Kent  for time you have spent ...\n. I have added  before. i forgot to write it.\n <script src=\"bower_components/angular-formly/dist/formly.min.js\"></script>\n    <script src=\"bower_components/api-check/dist/apiCheck.min.js\"></script>\n\nBut i got this problem.\n. yes. ;) that was a problem.\n\nThank you. \n. We have implemented before this app with angularformly which was working correctly.\nhttps://github.com/CA-Labs/fire-survey/blob/master/forms/survey.json\n\nNow with your examples i understood i should add \"templateOptions\" for all cases. It seems is working except for custom templates such as \"type\": \"multi-checkbox\", etc. \nTo solve this problem i have added\n`.run(function(formlyConfig) {\n    formlyConfig.setType(\n     {\n      name: 'multi-checkbox',\n      templateUrl: './polls/partials/multi-checkbox-template.html'\n    })})`\nand i have changed Q2 to:\n`{\n            \"key\": \"Q2\",\n            \"templateOptions\": {\n              \"label\": \"In what languages does your firm provide live chat support?\",\n              \"options\": [\n                {\n                  \"name\": \"english\",\n                  \"value\": \"eng\"\n                },\n                {\n                  \"name\": \"french\",\n                  \"value\": \"frnch\"\n                },\n                {\n                  \"name\": \"more\",\n                  \"value\": \"more\"\n                }\n              ]\n            },\n            \"type\": \"multi-checkbox\"\n          }\n`\nand i don't get any output for that. How i can fix it? \nThank you for your reply in advance.\n. I've followed your link completely. I listened to your videos as well. I found a few example for custom template and i tried to generalized that with my example as i presented to you in above.\nAlso i changed it into \"formlyConfigProvider\", in any case with what i presented to you i can not have expected output from custom html. Also i have added wrapper \nwrapper: ['bootstrapLabel', 'bootstrapHasError'], the only change is showing the question without any options.\n Moreover i want to emphasize that before we have done this project correctly and it was working. Please give me hint if there is any problem in above comment.\n. ok.thx\n. In above example which i put yesterday. I did exactly what you wrote. I mean i change radio with check box. but moreover  i need to an extra option when user choose the last check box then should open another hidden text box where ask him to input his / her preferences. It means one hidden text box inside check list . so first i would like you inform that if my above json file is correct or not? then if it is correct what is the next step? because with this json file i didn't get any answer and my survey is seems so messy.\n. there is still my missing part remains which i couldn't solved that.please look at this json file:\n\n``` json\n{\n    \"key\": \"Q2\",\n    \"type\": \"checkbox-template\",\n    \"label\": \"What are the most important language to learn?\",\n    \"options\": [\n      {\n        \"name\": \"english\",\n        \"value\": \"eng\"\n      },\n      {\n        \"name\": \"spanish\",\n        \"value\": \"spnsh\"\n      },\n      {\n        \"name\": \"french\",\n        \"value\": \"frnch\"\n      },\n      {\n        \"name\": \"more\",\n        \"value\": \"more\",\n        \"key\": \"checkThis\"\n      },\n      {\n        \"key\": \"hiddenWhenUnchecked\",\n        \"type\": \"text\",\n        \"line\": 4,\n        \"label\": \"Please write down if you consider another languages\",\n        \"placeholder\": \"chinese\",\n        \"expressionProperties\": {\n          \"hide\": \"!model.checkThis\"\n        }\n      }\n    ]\n  },\n```\n\nThere is still one hidden text box which when i check last option should appear which is not working at all.Please if somebody knows solution let me to know. \nThank you.\n. thank you for your help. It was great and helpful. I only have a suggestion if you provide video tutorial so  it is more easier to learn about building templates especially for beginners.\nThank you.\n. This is  good link ... seems useful to me. ...  :)\n. I still have a problem after 4 times click on my button. More over i can not see this form in my view. here you can see my controller \"https://github.com/maryampashmi/Data-Procurement-Repository/blob/master/controllers/formController.js\" and here is my partial \"https://github.com/maryampashmi/Data-Procurement-Repository/blob/master/partials/poll.legal.html\" .\n\nI also added related script in my index.Can you guide me what is a problem? even i can not see any button in my view.\n\nThank you.\n. Thank you for your following.\nPlease check this example : http://jsbin.com/nowaju/1/edit?html,js,output\nI have 2 app.js in my program which in one i entered dependencies : \nvar myApp= angular.module('myApp', ['ui.router','formly', 'formlyVanilla']);\nAlso i have index.html which i called all these 3 java script with versions you have mentioned. I want to show my form in page while i can see only button in my page.\nthis is a link of my project : https://github.com/maryampashmi/Data-Procurement-Repository\n. I don't know what is going on with my code ;) somethings that i can not guess happened. I have applied all changes as you have mentioned in my repository. this appear new problem beside old one.My ui-router part is not working now ;) moreover i can not see any form in my html..... In addition i don't get any error in inspected element so i can not realize nothing..\n. I have tried a lot , This is all last commit you can see in my repository. There is not any way to run angular formly with ui route.  I really decided to use normal form in angular as i couldn't find any way to solve it.  Please see this command \"https://github.com/maryampashmi/Data-Procurement-Repository/commits/master\"\n\nWe will be really thank you if you can give us any help. It is not possible to shoe any form in html.\n. Thank you so much Kent  for time you have spent ...\n. I have added  before. i forgot to write it.\n <script src=\"bower_components/angular-formly/dist/formly.min.js\"></script>\n    <script src=\"bower_components/api-check/dist/apiCheck.min.js\"></script>\n\nBut i got this problem.\n. yes. ;) that was a problem.\n\nThank you. \n. We have implemented before this app with angularformly which was working correctly.\nhttps://github.com/CA-Labs/fire-survey/blob/master/forms/survey.json\n\nNow with your examples i understood i should add \"templateOptions\" for all cases. It seems is working except for custom templates such as \"type\": \"multi-checkbox\", etc. \nTo solve this problem i have added\n`.run(function(formlyConfig) {\n    formlyConfig.setType(\n     {\n      name: 'multi-checkbox',\n      templateUrl: './polls/partials/multi-checkbox-template.html'\n    })})`\nand i have changed Q2 to:\n`{\n            \"key\": \"Q2\",\n            \"templateOptions\": {\n              \"label\": \"In what languages does your firm provide live chat support?\",\n              \"options\": [\n                {\n                  \"name\": \"english\",\n                  \"value\": \"eng\"\n                },\n                {\n                  \"name\": \"french\",\n                  \"value\": \"frnch\"\n                },\n                {\n                  \"name\": \"more\",\n                  \"value\": \"more\"\n                }\n              ]\n            },\n            \"type\": \"multi-checkbox\"\n          }\n`\nand i don't get any output for that. How i can fix it? \nThank you for your reply in advance.\n. I've followed your link completely. I listened to your videos as well. I found a few example for custom template and i tried to generalized that with my example as i presented to you in above.\nAlso i changed it into \"formlyConfigProvider\", in any case with what i presented to you i can not have expected output from custom html. Also i have added wrapper \nwrapper: ['bootstrapLabel', 'bootstrapHasError'], the only change is showing the question without any options.\n Moreover i want to emphasize that before we have done this project correctly and it was working. Please give me hint if there is any problem in above comment.\n. ok.thx\n. ",
    "luisfarzati": "Thanks for the prompt response! I think it's a nice workaround, let me close this for now. I'll try it out the way you said and see if maybe I can come up with a better support. \n\nGlad you like angulartics, and thanks for contributing! :)\n. Thanks for the prompt response! I think it's a nice workaround, let me close this for now. I'll try it out the way you said and see if maybe I can come up with a better support. \n\nGlad you like angulartics, and thanks for contributing! :)\n. ",
    "evenicoulddoit": "I tried this with `expressionProperties`, but failed to mutate the model. If like me you've split your form up from your controller/state, I suggest you use a factory to instantiate the form fields with the model exposed:\n\n``` js\n// forms.js\nexport function Forms() {\n  function fieldsFactory(model) {\n    return [\n      {\n        model: model.nested,\n        ....\n      }\n    ];\n  }\n\nreturn {fieldsFactory}\n}\n\n// controller.js\nexport function Ctrl(Forms) {\n  let fields = Forms.fieldsFactory(model);\n}\n```\n. I tried this with `expressionProperties`, but failed to mutate the model. If like me you've split your form up from your controller/state, I suggest you use a factory to instantiate the form fields with the model exposed:\n\n``` js\n// forms.js\nexport function Forms() {\n  function fieldsFactory(model) {\n    return [\n      {\n        model: model.nested,\n        ....\n      }\n    ];\n  }\n\nreturn {fieldsFactory}\n}\n\n// controller.js\nexport function Ctrl(Forms) {\n  let fields = Forms.fieldsFactory(model);\n}\n```\n. ",
    "piernik": "no thanks\n. +1\n. no thanks\n. +1\n. ",
    "djsmith42": "Woot!\n. Woot!\n. ",
    "gboersma": "I like the fact that formly can now catch errors in setting the options. However, for my app, I generate the options dynamically from the server (Java), which maps the JSON objects to / from Java classes. So I either have to rejig the Java implementation, or write some Javascript to munge the JSON into the correct format. Either one is not very pretty. Since the JSON is generated automatically from Java classes, I am not really that concerned about template options getting mixed up with formly options, since I control the naming on both sides (JSON and field templates).\n\nWould it be possible to provide an option to leave it as is? One way to implement it is, if the option is set, to have formly create the templateOptions object automatically by moving properties that are not options from the options map into the templateOptions map. It can be done right before calling each of the form fields, so the core formly call should not have to change. I could take a stab at this, but my JavaScript Fu is probably not up to it at this point.\n. I can live with this. Another option that I may be able to go with is to write a custom Jackson serializer / deserializer on the Java server-side, which will convert the JSON structure to the Java object structure and vice-versa. This will make things more robust for any future naming / structure changes on the JSON.\n. I think the custom controller and link example is what I am looking for. But it is still not clear to me how I can declare my own controller somewhere, and then pass it in (as opposed to declaring methods directly within the setType call). So let's say I declare a module called 'forms' and set the templates there. Can I define a controller for this module and then pass it in when a call setType? Or define a new controller locally within the module and then pass it in through setType?\n\nSorry if some of this is basic angularJS. Still trying to understand how to fit all the pieces together.\n. That worked like a charm. Thanks so much!\n. I think I got it. I created a run method for my module and passed in $http and $templateCache. I then load each of the templates into the cache:\n\n$http.get('path/to/template.html', {cache:$templateCache});\n\nI guess I could also have each template loaded directly from a string (i.e. from a build system plugin, I'm guessing) and completely avoid the server round-trip, but this is good enough for me.\n. Thanks for the pointer. Excellent suggestion. Grunt looks excellent.\n. Works perfectly. Thanks so much!\n. I like the fact that formly can now catch errors in setting the options. However, for my app, I generate the options dynamically from the server (Java), which maps the JSON objects to / from Java classes. So I either have to rejig the Java implementation, or write some Javascript to munge the JSON into the correct format. Either one is not very pretty. Since the JSON is generated automatically from Java classes, I am not really that concerned about template options getting mixed up with formly options, since I control the naming on both sides (JSON and field templates).\n\nWould it be possible to provide an option to leave it as is? One way to implement it is, if the option is set, to have formly create the templateOptions object automatically by moving properties that are not options from the options map into the templateOptions map. It can be done right before calling each of the form fields, so the core formly call should not have to change. I could take a stab at this, but my JavaScript Fu is probably not up to it at this point.\n. I can live with this. Another option that I may be able to go with is to write a custom Jackson serializer / deserializer on the Java server-side, which will convert the JSON structure to the Java object structure and vice-versa. This will make things more robust for any future naming / structure changes on the JSON.\n. I think the custom controller and link example is what I am looking for. But it is still not clear to me how I can declare my own controller somewhere, and then pass it in (as opposed to declaring methods directly within the setType call). So let's say I declare a module called 'forms' and set the templates there. Can I define a controller for this module and then pass it in when a call setType? Or define a new controller locally within the module and then pass it in through setType?\n\nSorry if some of this is basic angularJS. Still trying to understand how to fit all the pieces together.\n. That worked like a charm. Thanks so much!\n. I think I got it. I created a run method for my module and passed in $http and $templateCache. I then load each of the templates into the cache:\n\n$http.get('path/to/template.html', {cache:$templateCache});\n\nI guess I could also have each template loaded directly from a string (i.e. from a build system plugin, I'm guessing) and completely avoid the server round-trip, but this is good enough for me.\n. Thanks for the pointer. Excellent suggestion. Grunt looks excellent.\n. Works perfectly. Thanks so much!\n. ",
    "vigneshkindia": "Hi, \nYour reply helped. Thanks. \n\nThe use case I am referring is explained here: http://jsbin.com/pevegavoli/3/\n\nWhen i choose from yes to no, the reason given for yes, is retained in the form, whereas the field is actually hidden when u choose no. it doesn't make sense to have the hidden field data right?\n\ncorrect me if I am wrong. I am still learning. :) \n. its working fine.. :)\n thanks for the solution.\n. Hi, \nYour reply helped. Thanks. \n\nThe use case I am referring is explained here: http://jsbin.com/pevegavoli/3/\n\nWhen i choose from yes to no, the reason given for yes, is retained in the form, whereas the field is actually hidden when u choose no. it doesn't make sense to have the hidden field data right?\n\ncorrect me if I am wrong. I am still learning. :) \n. its working fine.. :)\n thanks for the solution.\n. ",
    "egucciar": "Hi Kent, I found an issue with this. Unfortunately I must use 1.2.x, and found an issue with the validateModelOnChange property relying on $validate even though it is not available in 1.2.x. I have it fixed on my local and will aim to submit a pull request for your review, but don't need it merged back in immediately since we are currently working on a fork of this. Basically, I poly-fill the $validate function and make a call to $parsers instead. Here is the code snippet:\r\n\r\n```\r\n                function setupWithParsers(validator, name, isAsync) {\r\n                    var inFlightValidator = void 0;\r\n                    ctrl.$parsers.unshift(function evalValidityOfParser(viewValue) {\r\n                        var isValid = nxnpjsonUtils.formlyEval(scope, validator, ctrl.$modelValue, viewValue);\r\n                        if (isAsync) {\r\n                            ctrl.$pending = ctrl.$pending || {};\r\n                            ctrl.$pending[name] = true;\r\n                            inFlightValidator = isValid;\r\n                            isValid.then(function () {\r\n                                if (inFlightValidator === isValid) {\r\n                                    ctrl.$setValidity(name, true);\r\n                                }\r\n                            }).catch(function () {\r\n                                if (inFlightValidator === isValid) {\r\n                                    ctrl.$setValidity(name, false);\r\n                                }\r\n                            }).finally(function () {\r\n                                var $pending = ctrl.$pending || {};\r\n                                if (Object.keys($pending).length === 1) {\r\n                                    delete ctrl.$pending;\r\n                                } else {\r\n                                    delete ctrl.$pending[name];\r\n                                }\r\n                            });\r\n                        } else {\r\n                            ctrl.$setValidity(name, isValid);\r\n                        }\r\n                        return viewValue;\r\n                    });\r\n\r\n                    if(!ctrl.$validate) {\r\n                        // EG: I polyfill the $validate function so thate validateOnModelChange works\r\n                        // why do we need to use 1.2.x :(\r\n                        ctrl.$validate = function () {\r\n                            angular.forEach(ctrl.$parsers, function (parser) {\r\n                                var getType = {},\r\n                                    isFunction = parser && getType.toString.call(parser) === '[object Function]';\r\n                                if (isFunction) {\r\n                                    parser();\r\n                                }\r\n                            })\r\n                        }\r\n                    }\r\n                }\r\n```\r\n\r\nThis works for one validator. I will need to implement a reduce for it to work with multiple and do some extra logic, most likely. I also need to check if the return needs to be adjusted (since right now I'm relying on the parser function internally setting the valid state and not caring about what I am returning from this function.) However my npm install isnt working and my POC with the later version of angular is broken until I can get that back and working. Will update you.\r\n\r\nThanks for having done some ground work on this!. >I might not fully understand here, but if you didn't require the form controller, isn't formly just a templating library at that point? I'm not sure there's that many strong use cases that don't require a form controller (though I'm probably wrong on that).\r\n\r\nit's actually a fairly common use-case to inter-mix forms and interactive, templated components. \r\n\r\nCan I ask what issues came about which caused this? I know it's been a long time since the last update and everyone has moved on from formly, but I am just getting started.. would an option like \"persistModel\" help by merging the data within the initial request?\r\n\r\nI think that either behaviour would be desirable from a JSON model perspective. . Maybe you can wire something up with ng model attributes and expression properties? \r\n\r\nhttp://angular-formly.com/#!/example/very-advanced/ngModelAttrs\r\n. Have you been able to reduce this into a fiddle and reproduce it?. have you tried \"quotationVersion.quotationAttributes.170400000000009.quotAttValue\"?. As I might need this functionality as well, I'll keep this in mind and see if I can come up with a solution . Were you able to make progress on this?. Since I might need this functionality as well, I'll keep this in mind and look for potential solutions. I think this would be better suited for your controller than inside formly conifg. Before setting .fields in your scope, make your ajax call and apply the mutation there.\r\nhttp://jsbin.com/nuyebu/edit?js,output\r\n\r\nI think this makes more sense to do in the controller than within formly transform, . I still wouldn't think it's appropriate for fieldTransforms but that's just me. How about an injectable service that can do the mutation and wrap your calls? That way if in any case you do not not require the mutation it is trivial not to have it.. That doesn't sound like an issue. I also created a form mutator for my project and believe it's a superior approach from an architecture perspective as this can scale to scenarios where a global configuration object would make it more difficult to use straight formly forms with no mutation applied. . Hi, this is angular 1 formly. Please see: https://github.com/formly-js/ng-formly. I think I saw functionality in formly source code to turn off the default handling for ng-model. You could possibly implement your own model watching & update the formy model when KendoUI model changes in a custom type http://docs.telerik.com/kendo-ui/api/javascript/data/model#events-change. This is a common software application pattern so I would recommend to create a jsbin / library for it and we can add it on the website either as an example or feature it on the integrations section.\r\n\r\nThis is as close to official as you'll get :). Can you reproduce this in a fiddle? \r\n\r\nWhat happens to the screen-reader if the CSS is display none or visibility hidden? can we hide it with CSS? I do not know much about the chrome hack , just giving my guess.. i used \r\n\r\nhttps://github.com/markacola/angular-formly-repeating-section\r\n\r\nhttp://angular-formly.com/#!/example/advanced/repeating-section\r\n. Hi Kent, I found an issue with this. Unfortunately I must use 1.2.x, and found an issue with the validateModelOnChange property relying on $validate even though it is not available in 1.2.x. I have it fixed on my local and will aim to submit a pull request for your review, but don't need it merged back in immediately since we are currently working on a fork of this. Basically, I poly-fill the $validate function and make a call to $parsers instead. Here is the code snippet:\r\n\r\n```\r\n                function setupWithParsers(validator, name, isAsync) {\r\n                    var inFlightValidator = void 0;\r\n                    ctrl.$parsers.unshift(function evalValidityOfParser(viewValue) {\r\n                        var isValid = nxnpjsonUtils.formlyEval(scope, validator, ctrl.$modelValue, viewValue);\r\n                        if (isAsync) {\r\n                            ctrl.$pending = ctrl.$pending || {};\r\n                            ctrl.$pending[name] = true;\r\n                            inFlightValidator = isValid;\r\n                            isValid.then(function () {\r\n                                if (inFlightValidator === isValid) {\r\n                                    ctrl.$setValidity(name, true);\r\n                                }\r\n                            }).catch(function () {\r\n                                if (inFlightValidator === isValid) {\r\n                                    ctrl.$setValidity(name, false);\r\n                                }\r\n                            }).finally(function () {\r\n                                var $pending = ctrl.$pending || {};\r\n                                if (Object.keys($pending).length === 1) {\r\n                                    delete ctrl.$pending;\r\n                                } else {\r\n                                    delete ctrl.$pending[name];\r\n                                }\r\n                            });\r\n                        } else {\r\n                            ctrl.$setValidity(name, isValid);\r\n                        }\r\n                        return viewValue;\r\n                    });\r\n\r\n                    if(!ctrl.$validate) {\r\n                        // EG: I polyfill the $validate function so thate validateOnModelChange works\r\n                        // why do we need to use 1.2.x :(\r\n                        ctrl.$validate = function () {\r\n                            angular.forEach(ctrl.$parsers, function (parser) {\r\n                                var getType = {},\r\n                                    isFunction = parser && getType.toString.call(parser) === '[object Function]';\r\n                                if (isFunction) {\r\n                                    parser();\r\n                                }\r\n                            })\r\n                        }\r\n                    }\r\n                }\r\n```\r\n\r\nThis works for one validator. I will need to implement a reduce for it to work with multiple and do some extra logic, most likely. I also need to check if the return needs to be adjusted (since right now I'm relying on the parser function internally setting the valid state and not caring about what I am returning from this function.) However my npm install isnt working and my POC with the later version of angular is broken until I can get that back and working. Will update you.\r\n\r\nThanks for having done some ground work on this!. >I might not fully understand here, but if you didn't require the form controller, isn't formly just a templating library at that point? I'm not sure there's that many strong use cases that don't require a form controller (though I'm probably wrong on that).\r\n\r\nit's actually a fairly common use-case to inter-mix forms and interactive, templated components. \r\n\r\nCan I ask what issues came about which caused this? I know it's been a long time since the last update and everyone has moved on from formly, but I am just getting started.. would an option like \"persistModel\" help by merging the data within the initial request?\r\n\r\nI think that either behaviour would be desirable from a JSON model perspective. . Maybe you can wire something up with ng model attributes and expression properties? \r\n\r\nhttp://angular-formly.com/#!/example/very-advanced/ngModelAttrs\r\n. Have you been able to reduce this into a fiddle and reproduce it?. have you tried \"quotationVersion.quotationAttributes.170400000000009.quotAttValue\"?. As I might need this functionality as well, I'll keep this in mind and see if I can come up with a solution . Were you able to make progress on this?. Since I might need this functionality as well, I'll keep this in mind and look for potential solutions. I think this would be better suited for your controller than inside formly conifg. Before setting .fields in your scope, make your ajax call and apply the mutation there.\r\nhttp://jsbin.com/nuyebu/edit?js,output\r\n\r\nI think this makes more sense to do in the controller than within formly transform, . I still wouldn't think it's appropriate for fieldTransforms but that's just me. How about an injectable service that can do the mutation and wrap your calls? That way if in any case you do not not require the mutation it is trivial not to have it.. That doesn't sound like an issue. I also created a form mutator for my project and believe it's a superior approach from an architecture perspective as this can scale to scenarios where a global configuration object would make it more difficult to use straight formly forms with no mutation applied. . Hi, this is angular 1 formly. Please see: https://github.com/formly-js/ng-formly. I think I saw functionality in formly source code to turn off the default handling for ng-model. You could possibly implement your own model watching & update the formy model when KendoUI model changes in a custom type http://docs.telerik.com/kendo-ui/api/javascript/data/model#events-change. This is a common software application pattern so I would recommend to create a jsbin / library for it and we can add it on the website either as an example or feature it on the integrations section.\r\n\r\nThis is as close to official as you'll get :). Can you reproduce this in a fiddle? \r\n\r\nWhat happens to the screen-reader if the CSS is display none or visibility hidden? can we hide it with CSS? I do not know much about the chrome hack , just giving my guess.. i used \r\n\r\nhttps://github.com/markacola/angular-formly-repeating-section\r\n\r\nhttp://angular-formly.com/#!/example/advanced/repeating-section\r\n. ",
    "stefanzweifel": "Wow! Thanks Shawn. \nLooks like a great solution! Will try this out.\n. @kentcdodds I will try @ShMcK's solution and then we will see how easy it was for me to implement it :smiley: \n\nI'm aware of your Foundation Templates repo. We use formly to render forms which where created with a custom build of [dobtco/formbuilder](https://github.com/dobtco/formbuilder). We added a ton of functionality to this formbuilder and are mirroring those features now to our Foundation template.\n\nI will ask my team mates, if we could support you with the Foundation Template but I can't guarantee it. (But I hope I can do some PR's to improve some stuff)\n. :+1: \n\nI like the approach with the arrays. Keeps the API pretty clean and is easily understandable.\n. Guys. Thank you! Great to see that a simple idea takes shape so quickly.\n\n@ShMcK's [approach](https://github.com/formly-js/angular-formly/issues/173#issuecomment-74660431) worked well for me. I just didn't now I can nest multiple `formly-form` directives.\n\nI also like the idea to split this \"grid-function\" into a separate module. Maybe we should consider to tie those functions to the template system? After all `formly-area` and `formly-field` should be placed in your templates, right?\n. Looks great. Thank you! :sparkles: \n. Formly supports the latest browsers (even IE8). You find more information in the [documentation](http://docs.angular-formly.com/v5.1.1/docs/support-ie-8).\n. Wow! Thanks Shawn. \nLooks like a great solution! Will try this out.\n. @kentcdodds I will try @ShMcK's solution and then we will see how easy it was for me to implement it :smiley: \n\nI'm aware of your Foundation Templates repo. We use formly to render forms which where created with a custom build of [dobtco/formbuilder](https://github.com/dobtco/formbuilder). We added a ton of functionality to this formbuilder and are mirroring those features now to our Foundation template.\n\nI will ask my team mates, if we could support you with the Foundation Template but I can't guarantee it. (But I hope I can do some PR's to improve some stuff)\n. :+1: \n\nI like the approach with the arrays. Keeps the API pretty clean and is easily understandable.\n. Guys. Thank you! Great to see that a simple idea takes shape so quickly.\n\n@ShMcK's [approach](https://github.com/formly-js/angular-formly/issues/173#issuecomment-74660431) worked well for me. I just didn't now I can nest multiple `formly-form` directives.\n\nI also like the idea to split this \"grid-function\" into a separate module. Maybe we should consider to tie those functions to the template system? After all `formly-area` and `formly-field` should be placed in your templates, right?\n. Looks great. Thank you! :sparkles: \n. Formly supports the latest browsers (even IE8). You find more information in the [documentation](http://docs.angular-formly.com/v5.1.1/docs/support-ie-8).\n. ",
    "medeeiros": "In my opinion the problem is bigger than just adding flexbox properties to the form fields. \nToday we have form fields, which is a literal array, but I'd imagine in the future we can write/extract each form fields and add it to a more complex container (layout).\nThat way, we could define named areas to create complex layouts.\n\n``` js\n$scope.formData = {};\n$scope.formFields = [\n    {\n        //the key to be used in the model values {... \"username\": \"johndoe\" ... }\n        key: 'username',\n\n        type: 'text',\n        label: 'Username',\n        placeholder: 'johndoe',\n        required: true,\n        disabled: false, //default: false\n        description: 'Descriptive text'\n    },\n    {\n        key: 'password',\n        type: 'password',\n        label: 'Password',\n        required: true,\n        disabled: false, //default: false\n        expressionProperties: {\n            hide: '!model.username' // hide when username is blank\n        }\n    }\n];\n\n$scope.formAreas = {\n    area1: ['username'],\n    area2: ['password']\n}\n\n$scope.onSubmit = function() {\n    console.log('form submitted:', $scope.formData);\n};\n```\n\n``` html\n<formly-form model=\"formData\" fields=\"formFields\">\n    <div class=\"row\">\n        <div class=\"col-md-6\">\n            <formly-area name=\"area1\"></formly-area>\n        <div>\n        <div class=\"col-md-6\">\n            <formly-area name=\"area2\"></formly-area>\n        <div>\n    </div>\n    <button ng-click=\"onSubmit()\">Hello World</button>\n</formly-form>\n```\n. I wouldn't change the current api. Adding a new directive and a map to the areas wouldn't break any current implementation.\nI even think this could be a different module, because it adds complexity to the implementation. Which is exactly what we are trying to avoid.\n. The templateOptions can customise each field and it's label as a unit. The problem is when you need to place each field in a different place. I imagine also possible to have a directive for single unit fields:\n\n``` html\n<formly-form model=\"formData\" fields=\"formFields\">\n    <div class=\"row\"> <!-- .row is just an example of course, you could have a class that changes the way you present certain fields -->\n        <div class=\"col-md-6\">\n            <formly-field name=\"name\" /> <!-- map to the input with name = name -->\n        <div>\n        <div class=\"col-md-6\">\n            <formly-field name=\"password\" /> <!-- map to the password field -->\n        <div>\n    </div>\n    <button ng-click=\"onSubmit()\">Hello World</button>\n</formly-form>\n```\n. 1. Render all fields on the same element: `fields=\"formFields\"`\n2. Render group of fields: `$scope.formAreas` + `<formly-area />`\n3. Render each field separately: `<formly-field />` \n\n#### Advantages\n- Keep simple api\n- Forms are configurable via javascript without loosing layout flexibility\n- Backwards compatible\n. haha, no worries. I'm being too short.\nSo the idea is to configure your fields via javascript, right? That's beautifully being done already. However, we loose flexibility because we cannot decide where each field is going to be placed.\n\nHaving a configuration of each field like we have today, is perfect. Even if you want to add any class to the wrapper of the field or add any extra configuration to a specific field is ok. The problem is when you want to place those fields in different places.\n\nKeeping a simple API is very important. You can create a basic form without being aware you can place fields in different areas. That's the current implementation.\n\nIf you want to create multi-step forms for instance, or two columns layout, you need to group the fields somehow. So instead of rendering your fields inside of the `formly-form` directive you would do inside of the `formly-area`. With this is already possible to do a lot of things in terms of layout.\n\nBut let's say you don't want to create groups, you want define exactly where you want to \"render\" your field instead. So you need to have a directive which tells what is the name of the field (unique) and replace it with the actual field. This directive shouldn't have any parameters other than an identifier (name).\n\nUsing this approach, you are keeping you current api, and you can add this \"layout\" feature as a separated module. This module will introduce two directives `formly-area` and `formly-field`. Of course you will have to expose the fields somehow to this module, rather then render all the fields straight away.\n\nI hope that was clear, I'm finishing a project by thursday but maybe after that I can help you building this part of the bridge. btw nice talk on NG-NL.\n. In my opinion the problem is bigger than just adding flexbox properties to the form fields. \nToday we have form fields, which is a literal array, but I'd imagine in the future we can write/extract each form fields and add it to a more complex container (layout).\nThat way, we could define named areas to create complex layouts.\n\n``` js\n$scope.formData = {};\n$scope.formFields = [\n    {\n        //the key to be used in the model values {... \"username\": \"johndoe\" ... }\n        key: 'username',\n\n        type: 'text',\n        label: 'Username',\n        placeholder: 'johndoe',\n        required: true,\n        disabled: false, //default: false\n        description: 'Descriptive text'\n    },\n    {\n        key: 'password',\n        type: 'password',\n        label: 'Password',\n        required: true,\n        disabled: false, //default: false\n        expressionProperties: {\n            hide: '!model.username' // hide when username is blank\n        }\n    }\n];\n\n$scope.formAreas = {\n    area1: ['username'],\n    area2: ['password']\n}\n\n$scope.onSubmit = function() {\n    console.log('form submitted:', $scope.formData);\n};\n```\n\n``` html\n<formly-form model=\"formData\" fields=\"formFields\">\n    <div class=\"row\">\n        <div class=\"col-md-6\">\n            <formly-area name=\"area1\"></formly-area>\n        <div>\n        <div class=\"col-md-6\">\n            <formly-area name=\"area2\"></formly-area>\n        <div>\n    </div>\n    <button ng-click=\"onSubmit()\">Hello World</button>\n</formly-form>\n```\n. I wouldn't change the current api. Adding a new directive and a map to the areas wouldn't break any current implementation.\nI even think this could be a different module, because it adds complexity to the implementation. Which is exactly what we are trying to avoid.\n. The templateOptions can customise each field and it's label as a unit. The problem is when you need to place each field in a different place. I imagine also possible to have a directive for single unit fields:\n\n``` html\n<formly-form model=\"formData\" fields=\"formFields\">\n    <div class=\"row\"> <!-- .row is just an example of course, you could have a class that changes the way you present certain fields -->\n        <div class=\"col-md-6\">\n            <formly-field name=\"name\" /> <!-- map to the input with name = name -->\n        <div>\n        <div class=\"col-md-6\">\n            <formly-field name=\"password\" /> <!-- map to the password field -->\n        <div>\n    </div>\n    <button ng-click=\"onSubmit()\">Hello World</button>\n</formly-form>\n```\n. 1. Render all fields on the same element: `fields=\"formFields\"`\n2. Render group of fields: `$scope.formAreas` + `<formly-area />`\n3. Render each field separately: `<formly-field />` \n\n#### Advantages\n- Keep simple api\n- Forms are configurable via javascript without loosing layout flexibility\n- Backwards compatible\n. haha, no worries. I'm being too short.\nSo the idea is to configure your fields via javascript, right? That's beautifully being done already. However, we loose flexibility because we cannot decide where each field is going to be placed.\n\nHaving a configuration of each field like we have today, is perfect. Even if you want to add any class to the wrapper of the field or add any extra configuration to a specific field is ok. The problem is when you want to place those fields in different places.\n\nKeeping a simple API is very important. You can create a basic form without being aware you can place fields in different areas. That's the current implementation.\n\nIf you want to create multi-step forms for instance, or two columns layout, you need to group the fields somehow. So instead of rendering your fields inside of the `formly-form` directive you would do inside of the `formly-area`. With this is already possible to do a lot of things in terms of layout.\n\nBut let's say you don't want to create groups, you want define exactly where you want to \"render\" your field instead. So you need to have a directive which tells what is the name of the field (unique) and replace it with the actual field. This directive shouldn't have any parameters other than an identifier (name).\n\nUsing this approach, you are keeping you current api, and you can add this \"layout\" feature as a separated module. This module will introduce two directives `formly-area` and `formly-field`. Of course you will have to expose the fields somehow to this module, rather then render all the fields straight away.\n\nI hope that was clear, I'm finishing a project by thursday but maybe after that I can help you building this part of the bridge. btw nice talk on NG-NL.\n. ",
    "aubricus": "Looking for a solution to this but example link is broken. Can someone restore it? Thanks!\n. :+1: Thanks @kentcdodds for the fast response!\n. Looking for a solution to this but example link is broken. Can someone restore it? Thanks!\n. :+1: Thanks @kentcdodds for the fast response!\n. ",
    "Luddinus": "I vote for the idea of \"formly-area\", I think that the code in the template look much more clean and easy.\n\nThe current way seems too hackish for me.\n. I need something similar to this: http://angular-formly.com/#/example/advanced/validation-on-form-submit\n\nMaybe I'm misunderstanding something but in my case it is the server who returns the error messages.\n. Ok @kentcdodds I'll figure out, congrats for the baby!\n. @benoror The things is that I'm making a custom component and I'd like to automatize that process always. I'll check that link.\n\nThx!\n. same issue here\n\nIt works if you add 'option[to.valueProp] as option in to.options | filter: $select.search' instead of {{to.ngOptions}}\n. I vote for the idea of \"formly-area\", I think that the code in the template look much more clean and easy.\n\nThe current way seems too hackish for me.\n. I need something similar to this: http://angular-formly.com/#/example/advanced/validation-on-form-submit\n\nMaybe I'm misunderstanding something but in my case it is the server who returns the error messages.\n. Ok @kentcdodds I'll figure out, congrats for the baby!\n. @benoror The things is that I'm making a custom component and I'd like to automatize that process always. I'll check that link.\n\nThx!\n. same issue here\n\nIt works if you add 'option[to.valueProp] as option in to.options | filter: $select.search' instead of {{to.ngOptions}}\n. ",
    "JBusch": "I'm having problems with this solution. If i am wrapping a fieldGroup inside a fieldGroup, the inner fieldGroup has no access to the model of the outer fieldGroup. Is this may be a bug, or am i just too stupid?\n\n```\nformlyConfig.setWrapper({\n            name: 'fields-wrapper',\n            template: '<div class=\"fields-wrapper\"><formly-transclude></formly-transclude></div>'\n        });\n```\n\n```\nfunction ($translate, $FrontendComponentsLists) {\n            function getConfig() {\n                return [\n                    {\n                        key: 'mykey',\n                        wrapper: 'fields-wrapper',\n                        className: 'fields-wrapper-form',\n                        fieldGroup: [\n                            {\n                                key: 'name',\n                                type: 'input',\n                                templateOptions: {\n                                    type: 'text',\n                                    label: $translate.instant('labelxyz')\n                                }\n                            }, {\n                                key: 'dateCombo',\n                                wrapper: 'fields-wrapper',\n                                className: 'fields-wrapper-form-datecombo',\n                                fieldGroup: [\n                                    {\n                                        key: 'fromDate',\n                                        type: 'input',\n                                        templateOptions: {\n                                            type: 'date',\n                                            label: $translate.instant('labelxyz')\n                                        }\n                                    },\n                                    {\n                                        key: 'toDate',\n                                        type: 'input',\n                                        templateOptions: {\n                                            type: 'date',\n                                            label: $translate.instant('labelxyz')\n                                        }\n                                    }\n                                ]\n                            },\n                            {\n                                key: 'currentEmployer',\n                                type: 'checkbox',\n                                templateOptions: {\n                                    label: $translate.instant('labelxyz')\n                                }\n                            }\n                        ]\n                    },\n```\n. I'm having problems with this solution. If i am wrapping a fieldGroup inside a fieldGroup, the inner fieldGroup has no access to the model of the outer fieldGroup. Is this may be a bug, or am i just too stupid?\n\n```\nformlyConfig.setWrapper({\n            name: 'fields-wrapper',\n            template: '<div class=\"fields-wrapper\"><formly-transclude></formly-transclude></div>'\n        });\n```\n\n```\nfunction ($translate, $FrontendComponentsLists) {\n            function getConfig() {\n                return [\n                    {\n                        key: 'mykey',\n                        wrapper: 'fields-wrapper',\n                        className: 'fields-wrapper-form',\n                        fieldGroup: [\n                            {\n                                key: 'name',\n                                type: 'input',\n                                templateOptions: {\n                                    type: 'text',\n                                    label: $translate.instant('labelxyz')\n                                }\n                            }, {\n                                key: 'dateCombo',\n                                wrapper: 'fields-wrapper',\n                                className: 'fields-wrapper-form-datecombo',\n                                fieldGroup: [\n                                    {\n                                        key: 'fromDate',\n                                        type: 'input',\n                                        templateOptions: {\n                                            type: 'date',\n                                            label: $translate.instant('labelxyz')\n                                        }\n                                    },\n                                    {\n                                        key: 'toDate',\n                                        type: 'input',\n                                        templateOptions: {\n                                            type: 'date',\n                                            label: $translate.instant('labelxyz')\n                                        }\n                                    }\n                                ]\n                            },\n                            {\n                                key: 'currentEmployer',\n                                type: 'checkbox',\n                                templateOptions: {\n                                    label: $translate.instant('labelxyz')\n                                }\n                            }\n                        ]\n                    },\n```\n. ",
    "Ledragon": "Thanks for the prompt reply. I will test this as soon as I can and will let you know. I managed to install it, but did not build an example yet. I will let you know as soon as I have something up and running!\n. Well, I saw your demo at NG-NL so I know it should work, but I wanna make sure :-)\n. Okay, I managed to get a formy error message, as I did not set up my model yet. Thanks for your help!\n. I will try to come out with something that can be useful :-)\n. TOTALLY working. It's just freaking awesome!\n. Most welcome!\n. Sweet. Thanks for the feedback\n. Thanks for the prompt reply. I will test this as soon as I can and will let you know. I managed to install it, but did not build an example yet. I will let you know as soon as I have something up and running!\n. Well, I saw your demo at NG-NL so I know it should work, but I wanna make sure :-)\n. Okay, I managed to get a formy error message, as I did not set up my model yet. Thanks for your help!\n. I will try to come out with something that can be useful :-)\n. TOTALLY working. It's just freaking awesome!\n. Most welcome!\n. Sweet. Thanks for the feedback\n. ",
    "jameswyse": "Seen this @kentcdodds? Looks like Angular 2.x will have a new Form API: http://angularjs.blogspot.nl/2015/03/forms-in-angular-2.html\n. That's awesome! :)\n. hehe that's what I figured. My first thought was actually \"Oh, he's changed the api again!\". (not a bad thing - this project is rapidly evolving and i'm really happy about that!) and ApiCheck is already proving to be useful.\n\nI guess I still don't fully understand how to simply change the standard validation messages, (e.g. \"This field is required\") as I was trying to do that with the `validation` object on some other forms. Should the function simply return the message?\n\nThanks for all your hard work!\n. That's awesome, thanks a lot! \n. Ran in to this as well when I upgraded from 3.3 to 4.0.2 via Bower.\n\nMinified has the same problem (except `__webpack_require__` is renamed to `n`)\n\nedit: I'll try the browserify transform linked in #186  \n. Started debugging this today and I'd totally forgotten that I moved all my vendor deps to a simple concat task (after having similar issues with other libraries not working)\n\nIt may have just been that something was wrong with the 4.0.2 build, because I upgraded to 4.0.6 today and it works just fine! (well, after adding `api-check/dist/apiCheck.js` to my vendor.js)\n\n@ShMcK have you tried v4.0.6?\n. I'm not familiar with JSPM, but that error indicates that it tried to connect to a server somewhere and the DNS lookup failed.\n\nI had to install `api-check` manually with bower, so maybe try that? `jspm install bower:api-check`\n. Seen this @kentcdodds? Looks like Angular 2.x will have a new Form API: http://angularjs.blogspot.nl/2015/03/forms-in-angular-2.html\n. That's awesome! :)\n. hehe that's what I figured. My first thought was actually \"Oh, he's changed the api again!\". (not a bad thing - this project is rapidly evolving and i'm really happy about that!) and ApiCheck is already proving to be useful.\n\nI guess I still don't fully understand how to simply change the standard validation messages, (e.g. \"This field is required\") as I was trying to do that with the `validation` object on some other forms. Should the function simply return the message?\n\nThanks for all your hard work!\n. That's awesome, thanks a lot! \n. Ran in to this as well when I upgraded from 3.3 to 4.0.2 via Bower.\n\nMinified has the same problem (except `__webpack_require__` is renamed to `n`)\n\nedit: I'll try the browserify transform linked in #186  \n. Started debugging this today and I'd totally forgotten that I moved all my vendor deps to a simple concat task (after having similar issues with other libraries not working)\n\nIt may have just been that something was wrong with the 4.0.2 build, because I upgraded to 4.0.6 today and it works just fine! (well, after adding `api-check/dist/apiCheck.js` to my vendor.js)\n\n@ShMcK have you tried v4.0.6?\n. I'm not familiar with JSPM, but that error indicates that it tried to connect to a server somewhere and the DNS lookup failed.\n\nI had to install `api-check` manually with bower, so maybe try that? `jspm install bower:api-check`\n. ",
    "adasq": "Hey, thanks for answer.  `validation.show` function as an `expressionsPropery` did not want to call my custom valdiation function, so I did this:\n\n_the concept_:\n- two fields: `name`, and `nameAgain`,\n- `nameAgain` has a validator, which check if `name === nameAgain`,\n- when we change `name`, the `nameAgain` validator function should be called\n\n_code_:\n\n``` javascript\nvm.model = {};\nvm.fields = [{\n    key: 'name',\n    type: 'input',\n    watcher: {\n      expression: 'model.name',\n      listener: function(field, _new) {\n        var nameAgainField = vm.fields[1]; //that's pretty weak...\n        var nameAgainFormControl = nameAgainField.formControl;\n        nameAgainFormControl && nameAgainFormControl.$validate();\n      }\n    },\n    templateOptions: {\n      label: 'Enter your name',\n      required: true\n    },\n  }, {\n    key: 'nameAgain',\n    type: 'input',\n    validators: {\n      nameAgain: {\n        expression: function(viewValue, modelValue) {\n          return (viewValue || modelValue) === vm.model.name;\n        },\n        message: '$viewValue + \" is not equal to your name!\"'\n      }\n    },\n    templateOptions: {\n      label: 'Enter your name again',\n      required: true\n    }\n  }\n```\n. The example you've provide is really interesting - I appreciate your work. Thanks.\n. It seems to be closed already :)\n. Hey, thanks for answer.  `validation.show` function as an `expressionsPropery` did not want to call my custom valdiation function, so I did this:\n\n_the concept_:\n- two fields: `name`, and `nameAgain`,\n- `nameAgain` has a validator, which check if `name === nameAgain`,\n- when we change `name`, the `nameAgain` validator function should be called\n\n_code_:\n\n``` javascript\nvm.model = {};\nvm.fields = [{\n    key: 'name',\n    type: 'input',\n    watcher: {\n      expression: 'model.name',\n      listener: function(field, _new) {\n        var nameAgainField = vm.fields[1]; //that's pretty weak...\n        var nameAgainFormControl = nameAgainField.formControl;\n        nameAgainFormControl && nameAgainFormControl.$validate();\n      }\n    },\n    templateOptions: {\n      label: 'Enter your name',\n      required: true\n    },\n  }, {\n    key: 'nameAgain',\n    type: 'input',\n    validators: {\n      nameAgain: {\n        expression: function(viewValue, modelValue) {\n          return (viewValue || modelValue) === vm.model.name;\n        },\n        message: '$viewValue + \" is not equal to your name!\"'\n      }\n    },\n    templateOptions: {\n      label: 'Enter your name again',\n      required: true\n    }\n  }\n```\n. The example you've provide is really interesting - I appreciate your work. Thanks.\n. It seems to be closed already :)\n. ",
    "fated-x": "The link Kent added on **Feb 28, 2015** no longer shows the example. The currently working link can be found here: http://angular-formly.com/#!/example/other/matching-two-fields.. The link Kent added on **Feb 28, 2015** no longer shows the example. The currently working link can be found here: http://angular-formly.com/#!/example/other/matching-two-fields.. ",
    "pmowrer": "Sorry to come back so quickly, but I ran into this immediately. To follow up where this was left off, `unreachable-branch-transform` would probably work. But, an even easier way is likely to include `angular-formly` in Browserify's `noParse` option since we can safely assume that `angular-formly` is a self-contained bundle. This way it won't be parsed for `require`s.\n\nThat worked. Unfortunately, Browserify still got stuck generating source maps with the following error:\n\n```\nError: Invalid mapping: {\"generated\":{\"line\":9079,\"column\":7},\"source\":\"webpack:///webpack/universalModuleDefinition\",\"original\":{},\"name\":null}\n  at SourceMapGenerator_validateMapping [as _validateMapping] ([...]node_modules/browserify/node_modules/browser-pack/node_modules/combine-source-map/node_modules/inline-source-map/node_modules/source-map/lib/source-map/source-map-generator.js:275:15)\n```\n\nHaven't had time to dig into that yet, but disabling Browserify's source maps (`debug: false`) allows the bundling to complete successfully.\n\nTrying to load `angular-formly` into our Angular app revealed the next problem. Since `angular-formly` wasn't parsed (`noParse`), it needs some help getting its dependencies: `angular` and `api-check`. We can do that using Browserify's `require` option. E.g. something like:\n\n```\n    browserify.require(require.resolve('api-check'), { expose: 'api-check' });\n    browserify.require(require.resolve('angular'), { expose: 'angular' });\n```\n\nThat was enough to get it working in our environment! We'd of course want to turn our source maps back on, but I would imagine it's not an insurmountable problem to solve.\n. @kentcdodds So I'm back to have another look at formly + browserify. The 6.x upgrade to es6 modules solves the original problem! However, the [source map problem](https://github.com/formly-js/angular-formly/issues/186#issuecomment-91008338) is still happening when Browserify source maps are enabled (debug=true). Browserify internally uses https://github.com/thlorenz/combine-source-map to merge source maps from all bundled sources, which in turn uses https://github.com/mozilla/source-map, the eventual source of the error. I'm far from certain what the problem is or who's \"responsible\".\n\nDecoding the inlined sourcemap, you get:\n\n``` json\n{\"version\":3,\"sources\":[\"webpack:///webpack/universalModuleDefinition\",\"webpack:///webpack/bootstrap 0853238e408d60f0f324\",\"webpack:///./index.js\",...\n```\n\nI'm no source map wiz, but the source URIs, `webpack:///...`, look like they're maybe specific to the webpack dev environment? \n\nRemoving the inline source map from the mains, i.e. `angular-formly/dist/formly.js` and `api-check/dist/api-check.js` respectively, predictably solves the problem.\n\nIt makes me wonder, is bundling source maps with unminified source like `angular-formly` and `api-check` is doing typical? Looking through some other libraries (including `angular` itself), I can only see source maps being bundled with minified source (external). Is there a good reason why formly should inline source maps in unminified production builds?\n. Pointing to the minified version isn't super straightforward since Browserify works off of `main` in the `package.json`. It can be shimmed using browserify-shim to point to the minified file, which works, but `api-check.js` also needs to be shimmed. Since `api-check.js` is an internal dependency of `formly.js`, its not easily shimmed (or maybe it is if applied globally).\n\nI found it easier to write a Browserify transform to strip the source maps from `formly.js` and `api-check.js`. Added bonus of not having to use the minified source. Here it is in case someone else finds it useful as a temporary workaround (must be applied globally. lone dependency is [through2](https://github.com/rvagg/through2)):\n\n``` javascript\nfunction(file) {\n    var data = '';\n\n    if (!/((angular-formly)|(api-check))\\/dist\\/((formly)|(api-check)).js$/.test(file)) {\n      return through();\n    }\n\n    return through(write, end);\n\n    function write(chunk, enc, callback) {\n      data += chunk;\n      callback();\n    }\n\n    function end(callback) {\n      data = data.replace(/\\/\\/# sourceMappingURL.*/, '');\n      this.push(data);\n      callback();\n    }\n  }\n```\n. @kentcdodds Verified on our end that it works! Nicely done :)\n. Wow, thanks for the extremely quick fix @kentcdodds! Verified it works on our end as well.\n. Like @jvandemo's said, based on his debugging it looks like significant time is spent in `trasncludeInWrappers`. Drilling into that method, it looks like the `forEach` on the `wrapper` array is the reason that the method is expensive, all of which appears to be validation/apiCheck? \n\n``` javascript\n          formlyUsability.checkWrapper(wrapper, options);\n          wrapper.validateOptions && wrapper.validateOptions(options);\n          runApiCheck(wrapper, options);\n```\n\nIts helpful to have better errors, but probably too expensive to run in a production environment, especially when every bit of performance improvement matters. @kentcdodds, is there an easy way to turn off `apiCheck`? There's a [hint in the docs](http://docs.angular-formly.com/v6.4.0/docs/formlyconfig#disablewarnings) that alludes to the possibility, but I couldn't find an option.\n. Beat me to it! Works perfectly for our purposes. Thanks!\n. Sorry to come back so quickly, but I ran into this immediately. To follow up where this was left off, `unreachable-branch-transform` would probably work. But, an even easier way is likely to include `angular-formly` in Browserify's `noParse` option since we can safely assume that `angular-formly` is a self-contained bundle. This way it won't be parsed for `require`s.\n\nThat worked. Unfortunately, Browserify still got stuck generating source maps with the following error:\n\n```\nError: Invalid mapping: {\"generated\":{\"line\":9079,\"column\":7},\"source\":\"webpack:///webpack/universalModuleDefinition\",\"original\":{},\"name\":null}\n  at SourceMapGenerator_validateMapping [as _validateMapping] ([...]node_modules/browserify/node_modules/browser-pack/node_modules/combine-source-map/node_modules/inline-source-map/node_modules/source-map/lib/source-map/source-map-generator.js:275:15)\n```\n\nHaven't had time to dig into that yet, but disabling Browserify's source maps (`debug: false`) allows the bundling to complete successfully.\n\nTrying to load `angular-formly` into our Angular app revealed the next problem. Since `angular-formly` wasn't parsed (`noParse`), it needs some help getting its dependencies: `angular` and `api-check`. We can do that using Browserify's `require` option. E.g. something like:\n\n```\n    browserify.require(require.resolve('api-check'), { expose: 'api-check' });\n    browserify.require(require.resolve('angular'), { expose: 'angular' });\n```\n\nThat was enough to get it working in our environment! We'd of course want to turn our source maps back on, but I would imagine it's not an insurmountable problem to solve.\n. @kentcdodds So I'm back to have another look at formly + browserify. The 6.x upgrade to es6 modules solves the original problem! However, the [source map problem](https://github.com/formly-js/angular-formly/issues/186#issuecomment-91008338) is still happening when Browserify source maps are enabled (debug=true). Browserify internally uses https://github.com/thlorenz/combine-source-map to merge source maps from all bundled sources, which in turn uses https://github.com/mozilla/source-map, the eventual source of the error. I'm far from certain what the problem is or who's \"responsible\".\n\nDecoding the inlined sourcemap, you get:\n\n``` json\n{\"version\":3,\"sources\":[\"webpack:///webpack/universalModuleDefinition\",\"webpack:///webpack/bootstrap 0853238e408d60f0f324\",\"webpack:///./index.js\",...\n```\n\nI'm no source map wiz, but the source URIs, `webpack:///...`, look like they're maybe specific to the webpack dev environment? \n\nRemoving the inline source map from the mains, i.e. `angular-formly/dist/formly.js` and `api-check/dist/api-check.js` respectively, predictably solves the problem.\n\nIt makes me wonder, is bundling source maps with unminified source like `angular-formly` and `api-check` is doing typical? Looking through some other libraries (including `angular` itself), I can only see source maps being bundled with minified source (external). Is there a good reason why formly should inline source maps in unminified production builds?\n. Pointing to the minified version isn't super straightforward since Browserify works off of `main` in the `package.json`. It can be shimmed using browserify-shim to point to the minified file, which works, but `api-check.js` also needs to be shimmed. Since `api-check.js` is an internal dependency of `formly.js`, its not easily shimmed (or maybe it is if applied globally).\n\nI found it easier to write a Browserify transform to strip the source maps from `formly.js` and `api-check.js`. Added bonus of not having to use the minified source. Here it is in case someone else finds it useful as a temporary workaround (must be applied globally. lone dependency is [through2](https://github.com/rvagg/through2)):\n\n``` javascript\nfunction(file) {\n    var data = '';\n\n    if (!/((angular-formly)|(api-check))\\/dist\\/((formly)|(api-check)).js$/.test(file)) {\n      return through();\n    }\n\n    return through(write, end);\n\n    function write(chunk, enc, callback) {\n      data += chunk;\n      callback();\n    }\n\n    function end(callback) {\n      data = data.replace(/\\/\\/# sourceMappingURL.*/, '');\n      this.push(data);\n      callback();\n    }\n  }\n```\n. @kentcdodds Verified on our end that it works! Nicely done :)\n. Wow, thanks for the extremely quick fix @kentcdodds! Verified it works on our end as well.\n. Like @jvandemo's said, based on his debugging it looks like significant time is spent in `trasncludeInWrappers`. Drilling into that method, it looks like the `forEach` on the `wrapper` array is the reason that the method is expensive, all of which appears to be validation/apiCheck? \n\n``` javascript\n          formlyUsability.checkWrapper(wrapper, options);\n          wrapper.validateOptions && wrapper.validateOptions(options);\n          runApiCheck(wrapper, options);\n```\n\nIts helpful to have better errors, but probably too expensive to run in a production environment, especially when every bit of performance improvement matters. @kentcdodds, is there an easy way to turn off `apiCheck`? There's a [hint in the docs](http://docs.angular-formly.com/v6.4.0/docs/formlyconfig#disablewarnings) that alludes to the possibility, but I couldn't find an option.\n. Beat me to it! Works perfectly for our purposes. Thanks!\n. ",
    "Raigasm": ">  you could point to the minified version which doesn't include sourcemaps. Thanks!\n\nDoesn't quite work, unfortunately, (at least on my end) even when using `browserify-shim`. For some reason, browserify continues to complain about `angular` and `api-check` not being able to be found. \n\nI've used a couple of webpack-built frameworks (like https://github.com/js-data/js-data , which I know you're familiar with @kentcdodds) and they've not required anything more than the usual `browserify-shim` steps.\n. @kentcdodds literally I can't even.\n\nFor anyone who wants canonical browserify instructions that definitely work:\n1. install `api-check` and `angular-formly` via **npm** (NOT BOWER)\n   - `npm install api-check 7.2.3 angular-formly 6.4.2 --save`\n   - **NB:** No browserify shim or dependency listing in your `package.json`'s `browserify` configuration object is necessary.\n2. in your javascript, require `api-check` and `angular-formly`\n3. in your angular module declaration, insert `'formly'` into the dependency array\n\n**example**:\n\n``` javascript\nvar angular = require('angular');\nrequire('api-check');\nrequire('angular-formly');\n\nvar app = angular.module('anAppThatCanFinallyUseFormly', ['formly']);\n```\n. >  you could point to the minified version which doesn't include sourcemaps. Thanks!\n\nDoesn't quite work, unfortunately, (at least on my end) even when using `browserify-shim`. For some reason, browserify continues to complain about `angular` and `api-check` not being able to be found. \n\nI've used a couple of webpack-built frameworks (like https://github.com/js-data/js-data , which I know you're familiar with @kentcdodds) and they've not required anything more than the usual `browserify-shim` steps.\n. @kentcdodds literally I can't even.\n\nFor anyone who wants canonical browserify instructions that definitely work:\n1. install `api-check` and `angular-formly` via **npm** (NOT BOWER)\n   - `npm install api-check 7.2.3 angular-formly 6.4.2 --save`\n   - **NB:** No browserify shim or dependency listing in your `package.json`'s `browserify` configuration object is necessary.\n2. in your javascript, require `api-check` and `angular-formly`\n3. in your angular module declaration, insert `'formly'` into the dependency array\n\n**example**:\n\n``` javascript\nvar angular = require('angular');\nrequire('api-check');\nrequire('angular-formly');\n\nvar app = angular.module('anAppThatCanFinallyUseFormly', ['formly']);\n```\n. ",
    "ronaldborman": "As this was my first encounter with Formly, I'm new to it and I want to be sure before I submit the PR.\n\nAccording to the documentation there are four directives:\n- formlyCustomValidation (an attribute directive although the restrict property is not specified so in theory it depends on the Angular version being used: A for 1.2, AE for 1.3+);\n- formlyField (can be both an element and attribute directive as specified by the restrict property);\n- formlyFocus (an attribute directive that also has no explicit restrict property, but it uses the inline callback notation so is not affected by the bug anyway);\n- formlyForm (an element directive as specified by the restrict property).\n\nFor now I think only formlyField and formlyForm should have the comment.\n\nBTW maybe all directives should have an explicit restrict property and formlyFocus should be transformed into a named callback - I'm not sure about any side effects though.\n\nRegards, Ronald\n. I just submitted the PR. As this is my very first PR, I hope I did everything right. Feel free to suggest changes.\n. Hi Kent! Thanks for the (extremely) quick reply. The way you run Formly is quite impressive.\n. Actually, I could use the example but did not want to pollute issue tracking so I closed the issue and wait for the example to appear on the site. Should this issue remain open?\n. As this was my first encounter with Formly, I'm new to it and I want to be sure before I submit the PR.\n\nAccording to the documentation there are four directives:\n- formlyCustomValidation (an attribute directive although the restrict property is not specified so in theory it depends on the Angular version being used: A for 1.2, AE for 1.3+);\n- formlyField (can be both an element and attribute directive as specified by the restrict property);\n- formlyFocus (an attribute directive that also has no explicit restrict property, but it uses the inline callback notation so is not affected by the bug anyway);\n- formlyForm (an element directive as specified by the restrict property).\n\nFor now I think only formlyField and formlyForm should have the comment.\n\nBTW maybe all directives should have an explicit restrict property and formlyFocus should be transformed into a named callback - I'm not sure about any side effects though.\n\nRegards, Ronald\n. I just submitted the PR. As this is my very first PR, I hope I did everything right. Feel free to suggest changes.\n. Hi Kent! Thanks for the (extremely) quick reply. The way you run Formly is quite impressive.\n. Actually, I could use the example but did not want to pollute issue tracking so I closed the issue and wait for the example to appear on the site. Should this issue remain open?\n. ",
    "Antariano": "Probably related, this happens when using gulp-browserify.\nNot sure if this helps, trying to track down if it's because of gulp-browserify being a deprecated library, but it might help you :)\n\n```\n....redacted....\\node_modules\\gulp-browserify\\node_modules\\browserify\\node_modules\\browser-pack\\node_modules\\combine-source-map\\node_modules\\source-map\\lib\\source-map\\source-map-generator.js:275                                            \n        throw new Error('Invalid mapping: ' + JSON.stringify({                                                                                                                                                                              \n              ^                                                                                                                                                                                                                             \nError: Invalid mapping: {\"generated\":{\"line\":41230,\"column\":7},\"source\":\"webpack:///webpack/universalModuleDefinition\",\"original\":{},\"name\":null}                                                                                           \n    at SourceMapGenerator_validateMapping [as _validateMapping] (....redacted....\\node_modules\\gulp-browserify\\node_modules\\browserify\\node_modules\\browser-pack\\node_modules\\combine-source-map\\node_modules\\source-map\\lib\\source-map\\source\n-map-generator.js:275:15)                                                                                                                                                                                                                   \n    at SourceMapGenerator_addMapping [as addMapping] (....redacted....\\node_modules\\gulp-browserify\\node_modules\\browserify\\node_modules\\browser-pack\\node_modules\\combine-source-map\\node_modules\\source-map\\lib\\source-map\\source-map-genera\ntor.js:105:14)                                                                                                                                                                                                                              \n    at ....redacted....\\node_modules\\gulp-browserify\\node_modules\\browserify\\node_modules\\browser-pack\\node_modules\\combine-source-map\\node_modules\\inline-source-map\\index.js:40:15                                                          \n    at Array.forEach (native)                                                                                                                                                                                                               \n    at Generator.addMappings (....redacted....\\node_modules\\gulp-browserify\\node_modules\\browserify\\node_modules\\browser-pack\\node_modules\\combine-source-map\\node_modules\\inline-source-map\\index.js:38:12)                                  \n    at Combiner._addExistingMap (....redacted....\\node_modules\\gulp-browserify\\node_modules\\browserify\\node_modules\\browser-pack\\node_modules\\combine-source-map\\index.js:33:18)                                                              \n    at Combiner.addFile (....redacted....\\node_modules\\gulp-browserify\\node_modules\\browserify\\node_modules\\browser-pack\\node_modules\\combine-source-map\\index.js:58:12)                                                                      \n    at Stream.write (....redacted....\\node_modules\\gulp-browserify\\node_modules\\browserify\\node_modules\\browser-pack\\index.js:49:23)                                                                                                          \n    at Stream.stream.write (....redacted....\\node_modules\\gulp-browserify\\node_modules\\browserify\\node_modules\\browser-pack\\node_modules\\through\\index.js:26:11)                                                                              \n    at Stream.ondata (stream.js:51:26)                                                                                                                                                                                                      \n```\n. Probably related, this happens when using gulp-browserify.\nNot sure if this helps, trying to track down if it's because of gulp-browserify being a deprecated library, but it might help you :)\n\n```\n....redacted....\\node_modules\\gulp-browserify\\node_modules\\browserify\\node_modules\\browser-pack\\node_modules\\combine-source-map\\node_modules\\source-map\\lib\\source-map\\source-map-generator.js:275                                            \n        throw new Error('Invalid mapping: ' + JSON.stringify({                                                                                                                                                                              \n              ^                                                                                                                                                                                                                             \nError: Invalid mapping: {\"generated\":{\"line\":41230,\"column\":7},\"source\":\"webpack:///webpack/universalModuleDefinition\",\"original\":{},\"name\":null}                                                                                           \n    at SourceMapGenerator_validateMapping [as _validateMapping] (....redacted....\\node_modules\\gulp-browserify\\node_modules\\browserify\\node_modules\\browser-pack\\node_modules\\combine-source-map\\node_modules\\source-map\\lib\\source-map\\source\n-map-generator.js:275:15)                                                                                                                                                                                                                   \n    at SourceMapGenerator_addMapping [as addMapping] (....redacted....\\node_modules\\gulp-browserify\\node_modules\\browserify\\node_modules\\browser-pack\\node_modules\\combine-source-map\\node_modules\\source-map\\lib\\source-map\\source-map-genera\ntor.js:105:14)                                                                                                                                                                                                                              \n    at ....redacted....\\node_modules\\gulp-browserify\\node_modules\\browserify\\node_modules\\browser-pack\\node_modules\\combine-source-map\\node_modules\\inline-source-map\\index.js:40:15                                                          \n    at Array.forEach (native)                                                                                                                                                                                                               \n    at Generator.addMappings (....redacted....\\node_modules\\gulp-browserify\\node_modules\\browserify\\node_modules\\browser-pack\\node_modules\\combine-source-map\\node_modules\\inline-source-map\\index.js:38:12)                                  \n    at Combiner._addExistingMap (....redacted....\\node_modules\\gulp-browserify\\node_modules\\browserify\\node_modules\\browser-pack\\node_modules\\combine-source-map\\index.js:33:18)                                                              \n    at Combiner.addFile (....redacted....\\node_modules\\gulp-browserify\\node_modules\\browserify\\node_modules\\browser-pack\\node_modules\\combine-source-map\\index.js:58:12)                                                                      \n    at Stream.write (....redacted....\\node_modules\\gulp-browserify\\node_modules\\browserify\\node_modules\\browser-pack\\index.js:49:23)                                                                                                          \n    at Stream.stream.write (....redacted....\\node_modules\\gulp-browserify\\node_modules\\browserify\\node_modules\\browser-pack\\node_modules\\through\\index.js:26:11)                                                                              \n    at Stream.ondata (stream.js:51:26)                                                                                                                                                                                                      \n```\n. ",
    "andyfensham": "No..unfortunately not.  The template is : \n\n<h4>Popup</h4>\n\n```\n<div class=\"row\">\n    <div class=\"col-md-6\">\n        <p class=\"input-group\">\n          <input type=\"text\" class=\"form-control\" datepicker-popup=\"{{format}}\" ng-model=\"dt\" is-open=\"opened\" min-date=\"minDate\" max-date=\"'2015-06-22'\" datepicker-options=\"dateOptions\" date-disabled=\"disabled(date, mode)\" ng-required=\"true\" close-text=\"Close\" />\n          <span class=\"input-group-btn\">\n            <button type=\"button\" class=\"btn btn-default\" ng-click=\"open($event)\"><i class=\"glyphicon glyphicon-calendar\"></i></button>\n          </span>\n        </p>\n    </div>\n</div>\n<div class=\"row\">\n    <div class=\"col-md-6\">\n        <label>Format:</label> <select class=\"form-control\" ng-model=\"format\" ng-options=\"f for f in formats\"><option></option></select>\n    </div>\n</div>\n\n<hr />\n<button type=\"button\" class=\"btn btn-sm btn-info\" ng-click=\"today()\">Today</button>\n<button type=\"button\" class=\"btn btn-sm btn-default\" ng-click=\"dt = '2009-08-24'\">2009-08-24</button>\n<button type=\"button\" class=\"btn btn-sm btn-danger\" ng-click=\"clear()\">Clear</button>\n<button type=\"button\" class=\"btn btn-sm btn-default\" ng-click=\"toggleMin()\" tooltip=\"After today restriction\">Min date</button>\n```\n\nIn my controller I set :\n\n$scope.today = function () {\n        $scope.dt = new Date();\n    };\n    $scope.today();\n\n```\n$scope.clear = function () {\n    $scope.dt = null;\n};\n\n// Disable weekend selection\n$scope.disabled = function (date, mode) {\n    return (mode === 'day' && (date.getDay() === 0 || date.getDay() === 6));\n};\n\n$scope.toggleMin = function () {\n    $scope.minDate = $scope.minDate ? null : new Date();\n};\n$scope.toggleMin();\n\n$scope.open = function ($event) {\n    $event.preventDefault();\n    $event.stopPropagation();\n\n    $scope.opened = true;\n};\n\n$scope.dateOptions = {\n    formatYear: 'yy',\n    startingDay: 1\n};\n\n$scope.formats = ['dd-MMMM-yyyy', 'yyyy/MM/dd', 'dd.MM.yyyy', 'shortDate'];\n$scope.format = $scope.formats[0];\n```\n\nSo everything is there inside the controller that points to my <formly-form>\n. Thanks so much for your quick reply. Will try it..\n. Hi Kent,\n\nMaybe you can just supply a parameter on the form that would recompile/refresh.  I am creating a drag-drop form designer where people can change the form on the fly.  They can change the label, placeholder, key, description etc.\n\nThanks\n\nAndy\n. Hi Kent..\n\nHow would I use with formly.  Would I just put \n\n```\n<formly-form kcd-recompile model=\"newFormData\" fields=\"newFormClone\">\n                <button ng-hide=\"newForm.length==0\" type=\"button\" class=\"btn btn-default\" ng-    click=\"onSubmit()\">Submit</button>\n            </formly-form>\n```\n\nThanks\n\nAndy\n. Thanks..Will try it.  I am new to Angular..not sure whether I will be able to build it in.  Will give it a try and ask you if I get stuck.\n\nTnx\n. No..unfortunately not.  The template is : \n\n<h4>Popup</h4>\n\n```\n<div class=\"row\">\n    <div class=\"col-md-6\">\n        <p class=\"input-group\">\n          <input type=\"text\" class=\"form-control\" datepicker-popup=\"{{format}}\" ng-model=\"dt\" is-open=\"opened\" min-date=\"minDate\" max-date=\"'2015-06-22'\" datepicker-options=\"dateOptions\" date-disabled=\"disabled(date, mode)\" ng-required=\"true\" close-text=\"Close\" />\n          <span class=\"input-group-btn\">\n            <button type=\"button\" class=\"btn btn-default\" ng-click=\"open($event)\"><i class=\"glyphicon glyphicon-calendar\"></i></button>\n          </span>\n        </p>\n    </div>\n</div>\n<div class=\"row\">\n    <div class=\"col-md-6\">\n        <label>Format:</label> <select class=\"form-control\" ng-model=\"format\" ng-options=\"f for f in formats\"><option></option></select>\n    </div>\n</div>\n\n<hr />\n<button type=\"button\" class=\"btn btn-sm btn-info\" ng-click=\"today()\">Today</button>\n<button type=\"button\" class=\"btn btn-sm btn-default\" ng-click=\"dt = '2009-08-24'\">2009-08-24</button>\n<button type=\"button\" class=\"btn btn-sm btn-danger\" ng-click=\"clear()\">Clear</button>\n<button type=\"button\" class=\"btn btn-sm btn-default\" ng-click=\"toggleMin()\" tooltip=\"After today restriction\">Min date</button>\n```\n\nIn my controller I set :\n\n$scope.today = function () {\n        $scope.dt = new Date();\n    };\n    $scope.today();\n\n```\n$scope.clear = function () {\n    $scope.dt = null;\n};\n\n// Disable weekend selection\n$scope.disabled = function (date, mode) {\n    return (mode === 'day' && (date.getDay() === 0 || date.getDay() === 6));\n};\n\n$scope.toggleMin = function () {\n    $scope.minDate = $scope.minDate ? null : new Date();\n};\n$scope.toggleMin();\n\n$scope.open = function ($event) {\n    $event.preventDefault();\n    $event.stopPropagation();\n\n    $scope.opened = true;\n};\n\n$scope.dateOptions = {\n    formatYear: 'yy',\n    startingDay: 1\n};\n\n$scope.formats = ['dd-MMMM-yyyy', 'yyyy/MM/dd', 'dd.MM.yyyy', 'shortDate'];\n$scope.format = $scope.formats[0];\n```\n\nSo everything is there inside the controller that points to my <formly-form>\n. Thanks so much for your quick reply. Will try it..\n. Hi Kent,\n\nMaybe you can just supply a parameter on the form that would recompile/refresh.  I am creating a drag-drop form designer where people can change the form on the fly.  They can change the label, placeholder, key, description etc.\n\nThanks\n\nAndy\n. Hi Kent..\n\nHow would I use with formly.  Would I just put \n\n```\n<formly-form kcd-recompile model=\"newFormData\" fields=\"newFormClone\">\n                <button ng-hide=\"newForm.length==0\" type=\"button\" class=\"btn btn-default\" ng-    click=\"onSubmit()\">Submit</button>\n            </formly-form>\n```\n\nThanks\n\nAndy\n. Thanks..Will try it.  I am new to Angular..not sure whether I will be able to build it in.  Will give it a try and ask you if I get stuck.\n\nTnx\n. ",
    "nrice": "Reference from above:  `<input type=\"text\" class=\"form-control\" datepicker-popup=\"{{to.format}}\" ng-model=\"model[options.key]\" is-open=\"opened\" min-date=\"to.minDate\" max-date=\"to.maxDate'\" datepicker-options=\"to.dateOptions\" date-disabled=\"to.disabled(date, mode)\" close-text=\"{{to.closeText || 'Close'}}\" />`  \n\n`date-disabled=\"to.disabled(date, mode)\"` causes the entire datepicker to be disabled.  I changed to \n\n`date-disabled=\"to.datedisabled(date, mode)\"`\n\nIn the controller, example to disable weekends\n\n`{\n                    className: 'col-md-3',\n                    key: 'startDate',\n                    type: 'datepicker',\n                    templateOptions: {\n                        label: 'Start Date',\n                        required: true,\n                        type: 'text',\n                        datepickerPopup: 'dd-MMMM-yyyy',\n                        datedisabled: function (date, mode) {\n                            return (mode === 'day' && (date.getDay() === 0 || date.getDay() === 6));\n                        }\n                    }\n                }`\n. Reference from above:  `<input type=\"text\" class=\"form-control\" datepicker-popup=\"{{to.format}}\" ng-model=\"model[options.key]\" is-open=\"opened\" min-date=\"to.minDate\" max-date=\"to.maxDate'\" datepicker-options=\"to.dateOptions\" date-disabled=\"to.disabled(date, mode)\" close-text=\"{{to.closeText || 'Close'}}\" />`  \n\n`date-disabled=\"to.disabled(date, mode)\"` causes the entire datepicker to be disabled.  I changed to \n\n`date-disabled=\"to.datedisabled(date, mode)\"`\n\nIn the controller, example to disable weekends\n\n`{\n                    className: 'col-md-3',\n                    key: 'startDate',\n                    type: 'datepicker',\n                    templateOptions: {\n                        label: 'Start Date',\n                        required: true,\n                        type: 'text',\n                        datepickerPopup: 'dd-MMMM-yyyy',\n                        datedisabled: function (date, mode) {\n                            return (mode === 'day' && (date.getDay() === 0 || date.getDay() === 6));\n                        }\n                    }\n                }`\n. ",
    "dmatesic": "Wonderful, thank you!\n. Wonderful, thank you!\n. ",
    "paulvanbladel": "Thanks Kent, I'll look into that.\n. Thanks a lot.\n. Thanks Kent, I'll look into that.\n. Thanks a lot.\n. ",
    "CodeLiftSleep": "Can we have an example of how to handle dynamically loaded data into typeahead instead of data that is included?\n. @abodacs  Thanks, but I actually created my own example...I basically merged the example for Async Select and UI-Bootstrap and got it working...\n\nHere is a much better typeahead example with UI BootStrap using dynamic data: http://plnkr.co/IjuJ0HPGCKfZAOrK0u3z?p=preview\n. Is there a way to run multiple async validators on a field?  For instance, I need to make one call to see if an access code is registered more than 5 times, and another call to see if the person is already in the database, and these are two separate calls to two separate Controllers. . use nya-bootstrap-select it works fine. Issue was with the way formly handles RegEx patterns...got it working, the normal Javascript method doesn't work...\n. In case this happens to anyone else---the solution was to change value to ng-value in the template\n. UPDATE:  Found it is happening because other expressions are executing after these and have conflicting settings and some bad logic...glad I found that out...was worried something was broke!!  All is good after I corrected the logic mistake.... Can we have an example of how to handle dynamically loaded data into typeahead instead of data that is included?\n. @abodacs  Thanks, but I actually created my own example...I basically merged the example for Async Select and UI-Bootstrap and got it working...\n\nHere is a much better typeahead example with UI BootStrap using dynamic data: http://plnkr.co/IjuJ0HPGCKfZAOrK0u3z?p=preview\n. Is there a way to run multiple async validators on a field?  For instance, I need to make one call to see if an access code is registered more than 5 times, and another call to see if the person is already in the database, and these are two separate calls to two separate Controllers. . use nya-bootstrap-select it works fine. Issue was with the way formly handles RegEx patterns...got it working, the normal Javascript method doesn't work...\n. In case this happens to anyone else---the solution was to change value to ng-value in the template\n. UPDATE:  Found it is happening because other expressions are executing after these and have conflicting settings and some bad logic...glad I found that out...was worried something was broke!!  All is good after I corrected the logic mistake.... ",
    "josmora": "Thanks, \nonly update the links of that example. :+1: \nhttp://angular-formly.com/#/example/bootstrap-specific/advanced-layout \n. Thanks, \nonly update the links of that example. :+1: \nhttp://angular-formly.com/#/example/bootstrap-specific/advanced-layout \n. ",
    "gowram": "my options is as below...\n\n``` javascript\n$scope.organisations = [\n    {name: 'org1', value: '1'},\n    {name: 'org2', value: '2'},\n    {name: 'org3', value: '3'},\n    {name: 'org4', value: '4'},\n    {name: 'org5', value: '5'}  \n  ];\n```\n\nwhen i choose any one of the i have to get object like \n\n``` javascript\n {'name': 'person1', 'organisationId': '3'}\n```\n\nmy output is not an object, resulting as array as above mentioned...\n. The problem is that angular promises, nothing to do with formly, thanks for your valuable responses. \n. there is an issue with this example, \n http://angular-formly.com/#/example/advanced/repeating-section\n\nif I enter 1st set of investment details, it's value repeated in 2nd set as well.\nbasically, it's using same \"key\" name.\n\nIt's not possible to enter multiple investment plan and when i press submit button it's results wrong json output as well. \n. is this alternative to multifield? \n. my options is as below...\n\n``` javascript\n$scope.organisations = [\n    {name: 'org1', value: '1'},\n    {name: 'org2', value: '2'},\n    {name: 'org3', value: '3'},\n    {name: 'org4', value: '4'},\n    {name: 'org5', value: '5'}  \n  ];\n```\n\nwhen i choose any one of the i have to get object like \n\n``` javascript\n {'name': 'person1', 'organisationId': '3'}\n```\n\nmy output is not an object, resulting as array as above mentioned...\n. The problem is that angular promises, nothing to do with formly, thanks for your valuable responses. \n. there is an issue with this example, \n http://angular-formly.com/#/example/advanced/repeating-section\n\nif I enter 1st set of investment details, it's value repeated in 2nd set as well.\nbasically, it's using same \"key\" name.\n\nIt's not possible to enter multiple investment plan and when i press submit button it's results wrong json output as well. \n. is this alternative to multifield? \n. ",
    "billfranklin": "``` html\n<form class=\"ng-pristine ng-valid ng-submitted\" novalidate=\"\" ng-submit=\"vm.onSubmit()\">\n  <ng-form class=\"formly ng-pristine ng-valid ng-isolate-scope\" role=\"form\" name=\"form\" form=\"vm.form\" fields=\"vm.fields\" model=\"vm.model\">\n    <div ng-transclude=\"\">\n      <button class=\"btn btn-primary submit-button ng-scope\" type=\"submit\">Submit</button>\n    </div>\n  </ng-form>\n</form>\n```\n. Perfect!  Thanks!  :clap:\n. vm.locations is fully populated, I actually output it in a `<pre>{{vm.locations|json}}</pre>` to verify that it is populated.\n. http://jsbin.com/yomowa/7/edit?html,js,console,output\n. not sure why...it is full for me...saved it a couple of times, let's see if it works now..\n\nhttp://jsbin.com/yomowa/9/edit?html,js,output\n. Yes, I do\n\n![untitled](https://cloud.githubusercontent.com/assets/6142870/6611944/6a824b78-c841-11e4-8751-8b3f5746cbf1.png)\n. what's even odder, if I open it in a new browser, that's not logged in to jsbin, I can see the contents from that link.\n. having someone else try the link\n. maybe it is you, because other people are trying it and see it :)\n. http://jsbin.com/deqeta/1/edit?js,output\n. http://codepen.io/billfranklin/pen/vEVJPW\n. aha, that worked, thanks!!!  Was driving me crazy....\n. You could actually make this an example.\n. a use case for disabling an option is selecting your first and second favorite English Monarch in two different selects....the second select would have the same options but the one selected in the first one would be disabled.\n. ``` html\n<form class=\"ng-pristine ng-valid ng-submitted\" novalidate=\"\" ng-submit=\"vm.onSubmit()\">\n  <ng-form class=\"formly ng-pristine ng-valid ng-isolate-scope\" role=\"form\" name=\"form\" form=\"vm.form\" fields=\"vm.fields\" model=\"vm.model\">\n    <div ng-transclude=\"\">\n      <button class=\"btn btn-primary submit-button ng-scope\" type=\"submit\">Submit</button>\n    </div>\n  </ng-form>\n</form>\n```\n. Perfect!  Thanks!  :clap:\n. vm.locations is fully populated, I actually output it in a `<pre>{{vm.locations|json}}</pre>` to verify that it is populated.\n. http://jsbin.com/yomowa/7/edit?html,js,console,output\n. not sure why...it is full for me...saved it a couple of times, let's see if it works now..\n\nhttp://jsbin.com/yomowa/9/edit?html,js,output\n. Yes, I do\n\n![untitled](https://cloud.githubusercontent.com/assets/6142870/6611944/6a824b78-c841-11e4-8751-8b3f5746cbf1.png)\n. what's even odder, if I open it in a new browser, that's not logged in to jsbin, I can see the contents from that link.\n. having someone else try the link\n. maybe it is you, because other people are trying it and see it :)\n. http://jsbin.com/deqeta/1/edit?js,output\n. http://codepen.io/billfranklin/pen/vEVJPW\n. aha, that worked, thanks!!!  Was driving me crazy....\n. You could actually make this an example.\n. a use case for disabling an option is selecting your first and second favorite English Monarch in two different selects....the second select would have the same options but the one selected in the first one would be disabled.\n. ",
    "remy": "Sorry, missed this coming in. A bug landed in jsbin that's been fixed but\nstill affecting some users. If I can get usernames I can correct those\naffected.\nOn 12 Mar 2015 12:50, \"Kent C. Dodds\" notifications@github.com wrote:\n\n> And it's live!\n> http://formly-js.github.io/angular-formly/#/example/other/async-select-options-with-controller\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/202#issuecomment-78473359\n> .\n. Sorry, missed this coming in. A bug landed in jsbin that's been fixed but\nstill affecting some users. If I can get usernames I can correct those\naffected.\nOn 12 Mar 2015 12:50, \"Kent C. Dodds\" notifications@github.com wrote:\n\n> And it's live!\n> http://formly-js.github.io/angular-formly/#/example/other/async-select-options-with-controller\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/202#issuecomment-78473359\n> .\n. ",
    "jesperronn": "@kentcdodds the URL you pasted for example no longer exists. It has changed to http://angular-formly.com/#/example/other/async-select-options-with-controller \n\n(`formly-js.github.io/angular-formly` to `formly.com`)\n. @kentcdodds the URL you pasted for example no longer exists. It has changed to http://angular-formly.com/#/example/other/async-select-options-with-controller \n\n(`formly-js.github.io/angular-formly` to `formly.com`)\n. ",
    "NamPNQ": "@kentcdodds How to use it for case options dependency by parent controller value\n\n```\nparent.$watch('abc', function(){\n  // I want change options in here\n})\n```\n. I had solve this case, I set `parent = $scope` in parent controller, and put watch in field controller\n. @kentcdodds How to use it for case options dependency by parent controller value\n\n```\nparent.$watch('abc', function(){\n  // I want change options in here\n})\n```\n. I had solve this case, I set `parent = $scope` in parent controller, and put watch in field controller\n. ",
    "suny5": "Hi,\r\ni'm using this link \"http://angular-formly.com/#!/example/other/filter-select\" to make a cascading drop-down in ng formly and it bindat first time but when i change value in first drop-down than value of second drop-down is not changing as it changing in link example. can you help me with this or provide me a sample json for Cascaded Select, Thanks.. Hi,\r\ni'am using follwing example \"http://angular-formly.com/#!/example/other/filter-select\" to create a cascaded drop-down in ng-formly and it is binding fine at first time,but when we change the value in first drop-down than value in second drop-down is not changing as it is changing in exmaple, i'm using the same json data can you provide me json data for ng formly cascading which works fine.Any help.. Hi,\r\ni'm using this link \"http://angular-formly.com/#!/example/other/filter-select\" to make a cascading drop-down in ng formly and it bindat first time but when i change value in first drop-down than value of second drop-down is not changing as it changing in link example. can you help me with this or provide me a sample json for Cascaded Select, Thanks.. Hi,\r\ni'am using follwing example \"http://angular-formly.com/#!/example/other/filter-select\" to create a cascaded drop-down in ng-formly and it is binding fine at first time,but when we change the value in first drop-down than value in second drop-down is not changing as it is changing in exmaple, i'm using the same json data can you provide me json data for ng formly cascading which works fine.Any help.. ",
    "ashwini1081": "how do I add ability to filter the options? i.e. option 2 gets filtered based on values from option1?\r\nhttp://jsbin.com/nacazuseka/edit?js,output. how do I add ability to filter the options? i.e. option 2 gets filtered based on values from option1?\r\nhttp://jsbin.com/nacazuseka/edit?js,output. ",
    "zorzysty": "link update: http://angular-formly.com/#/example/other/disable-submit-button\n. +1\n. @benoror \nHow can I be more clear on why I need to set ui-mask to undefined? As I wrote \"This is crucial for setting mask only if some other field has certain value.\"\n\nHere's an example:\nYou've got a postal code input and a country select. And you must display mask in postal code input only when certain country is selected, but no mask whatsoever for others.\n\nAs you can see here: https://htmlpreview.github.io/?https://github.com/angular-ui/ui-mask/master/demo/index.html there is a way to remove ui-mask from a field by setting it to undefined. But in Jsbin I provided you can see that setting it to undefined in expressionProperties breaks the model.\n\nPlease reopen the issue. It is a Formly bug and probably an easy fix.\n. link update: http://angular-formly.com/#/example/other/disable-submit-button\n. +1\n. @benoror \nHow can I be more clear on why I need to set ui-mask to undefined? As I wrote \"This is crucial for setting mask only if some other field has certain value.\"\n\nHere's an example:\nYou've got a postal code input and a country select. And you must display mask in postal code input only when certain country is selected, but no mask whatsoever for others.\n\nAs you can see here: https://htmlpreview.github.io/?https://github.com/angular-ui/ui-mask/master/demo/index.html there is a way to remove ui-mask from a field by setting it to undefined. But in Jsbin I provided you can see that setting it to undefined in expressionProperties breaks the model.\n\nPlease reopen the issue. It is a Formly bug and probably an easy fix.\n. ",
    "jacobsenanaizabel": "Thamks for the link update, zorzysty ! :')\n. Thamks for the link update, zorzysty ! :')\n. ",
    "a01fe": "Awesome, thanks! Feel free to use that as an example.\n. In this case, no.  I'd like to do an atomic server side update in `onSubmit()` that validates and updates.  Doing a server call in my validator function could lead to race conditions where the validator passes but the subsequent update in `onSubmit()` fails due to other transactions. So, I'd still need to handle the possibility of server validation failures in my `onSubmit()`.\n\nI've come up with a way to get the server's message to show by setting the field's `validators.messages.server` to a function that returns the server's message.  It's not very DRY though as I'd have to do that on every field.  Is there a better way to do that?\n. No worries.  Something like a mailing list would be good for things like this that are more \"discussion\" and less \"issue\" :)\n\nSetting `validation.messages.server` on each field works for me. To make things more DRY, I've added a service that can add or modify options on all fields so in my controller I pass fields through that before assigning them to a property on scope.\n. The way I do it doesn't result in duplicate code.  I have a single controller that has this `onSubmit` function:\n\n``` Javascript\n    function traverseFields(fields, fn) {\n        angular.forEach(fields, function (field) {\n            fn(field);\n            if (field.fieldGroup != null) {\n                traverseFields(field.fieldGroup, fn);\n            }\n        });\n    }\n\n    fc.onSubmit = function (model) {\n        fc.errors = { };\n        (isNew ? $http.post(apiPath, model) : $http.put(apiPath, model))\n        .success(function (data, status, headers, config) {\n            dirtyExitCheckService.disable();\n            $state.go(isNew ? '^.^' : '^.show', null, { reload: true });\n        })\n        .error(function (data, status, headers, config) {\n            fc.errors = data || { errors: [{ message: 'Unknown error' }]};\n            angular.forEach(fc.errors.errors, function (error) {\n                error.isFieldError = false;\n                traverseFields(fc.fields, function (field) {\n                    if (field.key != null && error.field === field.key) {\n                        error.isFieldError = true;\n                        field.formControl.$setValidity('server', false);\n                    }\n                });\n            });\n        });\n```\n\nI have a service that adds server validation messages to the field definitions so I don't have to.\n\n``` Javascript\n    module.factory('fieldTransformerService', [function () {\n        var fieldTransformer = {\n            transform: function (model, fields) {\n                var newFields = [ ];\n                traverseFields(fields, function (field) {\n                    var newField = { };\n                    if (field.key != null) {\n                        $.extend(true, newField, {\n                            validation: {\n                                messages: {\n                                    server: function (viewValue, modelValue, scope) {\n                                        var message = \"Unknown server error\";\n                                        angular.forEach(model.errors.errors, function (error) {\n                                            if (error.field === scope.options.key) {\n                                                message = error.message;\n                                            }\n                                        });\n                                        return message;\n                                    }\n                                }\n                            }\n                        });\n                    }\n                    $.extend(true, newField, field);\n                    newFields.push(newField);\n                });\n                return newFields;\n            }\n        };\n        return fieldTransformer;\n    }]);\n```\n\nThen, to define fields, I do something like this:\n\n``` Javascript\nfc.fields = fieldTransformerService.transform(fc, [{\n    key: 'id',\n    type: 'input',\n    hide: true,\n    templateOptions: {\n        type: 'number'\n    }\n}, {\n    key: 'email',\n    type: 'input',\n    templateOptions: {\n        type: 'email',\n        label: 'Email',\n        required: true,\n        focus: true\n    }\n}, {\n    key: 'password',\n    type: 'input',\n    templateOptions: {\n        type: 'password',\n        label: 'Password',\n        requred: true\n    }\n}]);\n```\n. I did this before you added the built-in fieldTransform.  It's on my to-do list to look at replacing my code with it, but I haven't gotten to it yet :)\n. I created a directive that resets the server error on any change:\n\n``` Javascript\n    module.directive('resetServerError', [function () {\n        return {\n            restrict: 'A',\n            require: '?ngModel',\n            link: function (scope, element, attrs, controller) {\n                element.on('input change', function () {\n                    scope.$apply(function () {\n                        controller.$setValidity('server', true);\n                    });\n                });\n            }\n        };\n    }]);\n```\n\nand add the directive to input elements in my formly templates like so:\n\n``` html\n    <input class=\"form-control\" ng-model=\"model[options.key]\" reset-server-error>\n```\n. I did it that way because I'm using my own templates.  You can use `ngModelAttrsTemplateManipulator` to add that directive to ngModel elements.  Just add `ngModelAttrs` in the same field transform you're adding the server validation stuff with.  That way you don't have to change the templates.\n\nhttp://docs.angular-formly.com/v7.2.3/docs/ngmodelattrstemplatemanipulator\n. I can see that setting up the watchers myself would be the most efficient solution, but it feels like I'm duplicating Formly code behind the API's back.  I think for the example, changing the `ng-if`s to `ng-show` and `ng-hide` might be best.  I'm assuming that the issue you're referring to is that you'll have the overhead of the ng-models even when the form is in read only mode.\n\nFor my application, I think i'll take a different approach.  I have read only and editable versions of a form in two different ui router states, so my forms never change between read only and editable on the fly.  I now have a service that extends field objects by adding `noFormControl: true` when its in a read only state.\n. Nice, looks great!\n. Awesome, thanks! Feel free to use that as an example.\n. In this case, no.  I'd like to do an atomic server side update in `onSubmit()` that validates and updates.  Doing a server call in my validator function could lead to race conditions where the validator passes but the subsequent update in `onSubmit()` fails due to other transactions. So, I'd still need to handle the possibility of server validation failures in my `onSubmit()`.\n\nI've come up with a way to get the server's message to show by setting the field's `validators.messages.server` to a function that returns the server's message.  It's not very DRY though as I'd have to do that on every field.  Is there a better way to do that?\n. No worries.  Something like a mailing list would be good for things like this that are more \"discussion\" and less \"issue\" :)\n\nSetting `validation.messages.server` on each field works for me. To make things more DRY, I've added a service that can add or modify options on all fields so in my controller I pass fields through that before assigning them to a property on scope.\n. The way I do it doesn't result in duplicate code.  I have a single controller that has this `onSubmit` function:\n\n``` Javascript\n    function traverseFields(fields, fn) {\n        angular.forEach(fields, function (field) {\n            fn(field);\n            if (field.fieldGroup != null) {\n                traverseFields(field.fieldGroup, fn);\n            }\n        });\n    }\n\n    fc.onSubmit = function (model) {\n        fc.errors = { };\n        (isNew ? $http.post(apiPath, model) : $http.put(apiPath, model))\n        .success(function (data, status, headers, config) {\n            dirtyExitCheckService.disable();\n            $state.go(isNew ? '^.^' : '^.show', null, { reload: true });\n        })\n        .error(function (data, status, headers, config) {\n            fc.errors = data || { errors: [{ message: 'Unknown error' }]};\n            angular.forEach(fc.errors.errors, function (error) {\n                error.isFieldError = false;\n                traverseFields(fc.fields, function (field) {\n                    if (field.key != null && error.field === field.key) {\n                        error.isFieldError = true;\n                        field.formControl.$setValidity('server', false);\n                    }\n                });\n            });\n        });\n```\n\nI have a service that adds server validation messages to the field definitions so I don't have to.\n\n``` Javascript\n    module.factory('fieldTransformerService', [function () {\n        var fieldTransformer = {\n            transform: function (model, fields) {\n                var newFields = [ ];\n                traverseFields(fields, function (field) {\n                    var newField = { };\n                    if (field.key != null) {\n                        $.extend(true, newField, {\n                            validation: {\n                                messages: {\n                                    server: function (viewValue, modelValue, scope) {\n                                        var message = \"Unknown server error\";\n                                        angular.forEach(model.errors.errors, function (error) {\n                                            if (error.field === scope.options.key) {\n                                                message = error.message;\n                                            }\n                                        });\n                                        return message;\n                                    }\n                                }\n                            }\n                        });\n                    }\n                    $.extend(true, newField, field);\n                    newFields.push(newField);\n                });\n                return newFields;\n            }\n        };\n        return fieldTransformer;\n    }]);\n```\n\nThen, to define fields, I do something like this:\n\n``` Javascript\nfc.fields = fieldTransformerService.transform(fc, [{\n    key: 'id',\n    type: 'input',\n    hide: true,\n    templateOptions: {\n        type: 'number'\n    }\n}, {\n    key: 'email',\n    type: 'input',\n    templateOptions: {\n        type: 'email',\n        label: 'Email',\n        required: true,\n        focus: true\n    }\n}, {\n    key: 'password',\n    type: 'input',\n    templateOptions: {\n        type: 'password',\n        label: 'Password',\n        requred: true\n    }\n}]);\n```\n. I did this before you added the built-in fieldTransform.  It's on my to-do list to look at replacing my code with it, but I haven't gotten to it yet :)\n. I created a directive that resets the server error on any change:\n\n``` Javascript\n    module.directive('resetServerError', [function () {\n        return {\n            restrict: 'A',\n            require: '?ngModel',\n            link: function (scope, element, attrs, controller) {\n                element.on('input change', function () {\n                    scope.$apply(function () {\n                        controller.$setValidity('server', true);\n                    });\n                });\n            }\n        };\n    }]);\n```\n\nand add the directive to input elements in my formly templates like so:\n\n``` html\n    <input class=\"form-control\" ng-model=\"model[options.key]\" reset-server-error>\n```\n. I did it that way because I'm using my own templates.  You can use `ngModelAttrsTemplateManipulator` to add that directive to ngModel elements.  Just add `ngModelAttrs` in the same field transform you're adding the server validation stuff with.  That way you don't have to change the templates.\n\nhttp://docs.angular-formly.com/v7.2.3/docs/ngmodelattrstemplatemanipulator\n. I can see that setting up the watchers myself would be the most efficient solution, but it feels like I'm duplicating Formly code behind the API's back.  I think for the example, changing the `ng-if`s to `ng-show` and `ng-hide` might be best.  I'm assuming that the issue you're referring to is that you'll have the overhead of the ng-models even when the form is in read only mode.\n\nFor my application, I think i'll take a different approach.  I have read only and editable versions of a form in two different ui router states, so my forms never change between read only and editable on the fly.  I now have a service that extends field objects by adding `noFormControl: true` when its in a read only state.\n. Nice, looks great!\n. ",
    "bfrijmersum": "Thank you so much for your explanation. I was not aware of the `onChange` and this is exactly what I need :)\n. Thank you so much for your explanation. I was not aware of the `onChange` and this is exactly what I need :)\n. ",
    "dgsmith2": "We were attempting to incorporate angular-formly into our produce.  Currently, we do not use a module-based approach for our dependencies.  Instead we use Bower to install them and our build process concatenates the file indicated to be the distributed. Trying to use angular-formly in that same flow does not work.  Admittedly, I had not done due diligence to debug but instead quickly posted a question based upon an assumption/opinion.\n\nIn my consumption of other tooling I have seen them laid out to support either AMD or CommonJS, but none to be coded up specifically to webpack (which I have no experience with and for which this may be the norm).  I believed that the use of webpack should be left up to the individual developer.  Case in point in terms of Browserify, I've seen the tooling distributed so that it can simply be referenced in a script tag but supplemental JS/config provided should a developer want to use Browserify.\n\nI very well could be missing something and welcome explanation.  Thanks!\n. We were attempting to incorporate angular-formly into our produce.  Currently, we do not use a module-based approach for our dependencies.  Instead we use Bower to install them and our build process concatenates the file indicated to be the distributed. Trying to use angular-formly in that same flow does not work.  Admittedly, I had not done due diligence to debug but instead quickly posted a question based upon an assumption/opinion.\n\nIn my consumption of other tooling I have seen them laid out to support either AMD or CommonJS, but none to be coded up specifically to webpack (which I have no experience with and for which this may be the norm).  I believed that the use of webpack should be left up to the individual developer.  Case in point in terms of Browserify, I've seen the tooling distributed so that it can simply be referenced in a script tag but supplemental JS/config provided should a developer want to use Browserify.\n\nI very well could be missing something and welcome explanation.  Thanks!\n. ",
    "koenweyn": "I did have to add quite a few polyfills (especially for api-check), but I'm guessing you would want to keep those out of both api-check and angular-formly.\n. @kentcdodds, I'm just really keen on successfully completing my first ever github pull request ;-)\n(and I really got inspired to start contributing by Aaron Frost's talk on ng-nl last month)\n. I was there, but we didn't meet, I'll come and say hi next time.\n. Sure, no problem\n\nKoen\n. Looks like Travis CI is having issues connection to github:\n\n```\nnpm ERR! fatal: unable to connect to github.com:\nnpm ERR! github.com[0: 192.30.252.131]: errno=Connection timed out\n```\n. I will, as soon as I find out how to add commits to a PR ;-)\n. The only thing I can come up with is creating a second formlyEval and using that on the validation triggers. If that's something you would do too, I can create a PR to fix this.\n. And that would solve this bug.\n. Confirmed, fixes my problem.\nBut maybe it would be wise to change the 'else' part of `formlyEval` as well\n\n```\n  } else {\n    return scope.$eval(expression, {\n      $viewValue: viewValue || modelValue, //change this to $viewValue: viewValue too\n      $modelValue: modelValue\n    });\n  }\n```\n. Nope, looks perfect now.\n. Sure, if only I knew how to do that ;-)\nI'll try to find out...\n. I did it the hard way: http://stackoverflow.com/questions/5256021/send-a-pull-request-on-github-for-only-latest-commit\n. We're still using 1.2 because we need to support IE8. I wish we didn't, but alas ...\n. @kentcdodds can you confirm that the above code should work? I'll try to implement a unit test and fix if it should.\n. Hi @kentcdodds, the fix doesn't solve my issue.\nWhen I run this testcase\n\n```\n  it(`should assign the scope's \"form\" property to the given FormController if it has a value`, () => {\n    const el = compileAndDigest(`\n      <form name=\"theForm\">\n        <formly-form model=\"model\" fields=\"fields\" form=\"theForm\" id=\"my-formly-form\" root-el=\"div\"></formly-form>\n      </form>\n    `);\n    const isolateScope = angular.element(el[0].querySelector('#my-formly-form')).isolateScope();\n    expect(scope.theForm).to.eq(isolateScope.form);\n    expect(scope.theForm.$name).to.eq('theForm');\n  });\n```\n\nFormly emits this warning: \n\n```\n'Formly Error: A formly-form does not have a `form` property. Many functions of the form (like validation) may not work. https://github.com/formly-js/angular-formly/blob/6.11.1/other/ERRORS_AND_WARNINGS.md#formly-form-has-no-formcontroller'\n```\n\nAnd when running my jsbin above, we can verify that validation is not working in this case.\n. I think this testcase should be green (it's successful when not using root-el)\n\n```\n  it(`should put the formControl on the field's scope when using a different form root element`, () => {\n    formlyConfig.setType({\n      name: 'text',\n      template: '<input name=\"{{id}}\" ng-model=\"model[options.key]\" />'\n    });\n\n    scope.fields = [\n      {\n        type: 'text',\n        key: 'bla'\n      }\n    ];\n    const el = compileAndDigest(`\n      <form name=\"theForm\">\n        <formly-form model=\"model\" fields=\"fields\" form=\"theForm\" id=\"my-formly-form\" root-el=\"div\"></formly-form>\n      </form>\n    `);\n\n    const fieldScope = angular.element(el[0].querySelector('.formly-field')).isolateScope();\n    expect(fieldScope.fc).to.exist;\n  });\n```\n. @samuelcoutu every time I see this, it has to do with using an API that is only available in the developer mode of IE8. And the most likely culprit is `console.log`. Using stuff like `console.log` will crash your page while in normal mode, but it will work fine in developer mode. \n. \ud83d\udc4d\n. Hi @kentcdodds, the fix for this breaks IE8 compatibility.\n`querySelectorAll(':not()')` is not supported, because it is a CSS3 selector: [Can I Use?](http://caniuse.com/#feat=queryselector).\nI have implemented a fix that builds the nodelist in a different way when the current method throws an Exception.\nWould you be interested in that PR? Or are you tired of trying to support IE8? ;-)\n. I would love to be able to use this feature, or alternatively, if formly would provide the ngModelController to the link function, I could add parsers and formatters myself.\n. Hi @kentcdodds, I finally had some time to play around with the new parsers and formatters.\nEverything works as expected, except formatting of the initial model value. When you start up with an already initialised model value, formatting is not applied, because the formatters are only added at a later stage.\nYou can work around this by adding a link function that formats the value as soon as the FC is known to the scope. See the example [here](http://jsbin.com/tiwuha/edit?js,console,output).\nIs there something that can be improved in formly so that the workaround is not needed?\n. Preparing the issue would just mean writing a failing test and marking it as `it.skip`, correct?\n. On it!\n. I had a quick look, and angular-formly seems to be missing from your bower.json.\nCould that be the issue?\n. Yeah, the tests look a bit funky, but I really didn't want to bring down the coverage percentage ;-)\n. Weird! The githook should have caught that, no?\n. This code below demonstrates a possible workaround (if you can get hold of the NgModelCtrl)\n\n``` javascript\nlet value = ctrl.$modelValue;\nctrl.$formatters.forEach((formatter) => {\n  value = formatter(value);\n});\n\nctrl.$setViewValue(value);\nctrl.$render();\n```\n. I did have to add quite a few polyfills (especially for api-check), but I'm guessing you would want to keep those out of both api-check and angular-formly.\n. @kentcdodds, I'm just really keen on successfully completing my first ever github pull request ;-)\n(and I really got inspired to start contributing by Aaron Frost's talk on ng-nl last month)\n. I was there, but we didn't meet, I'll come and say hi next time.\n. Sure, no problem\n\nKoen\n. Looks like Travis CI is having issues connection to github:\n\n```\nnpm ERR! fatal: unable to connect to github.com:\nnpm ERR! github.com[0: 192.30.252.131]: errno=Connection timed out\n```\n. I will, as soon as I find out how to add commits to a PR ;-)\n. The only thing I can come up with is creating a second formlyEval and using that on the validation triggers. If that's something you would do too, I can create a PR to fix this.\n. And that would solve this bug.\n. Confirmed, fixes my problem.\nBut maybe it would be wise to change the 'else' part of `formlyEval` as well\n\n```\n  } else {\n    return scope.$eval(expression, {\n      $viewValue: viewValue || modelValue, //change this to $viewValue: viewValue too\n      $modelValue: modelValue\n    });\n  }\n```\n. Nope, looks perfect now.\n. Sure, if only I knew how to do that ;-)\nI'll try to find out...\n. I did it the hard way: http://stackoverflow.com/questions/5256021/send-a-pull-request-on-github-for-only-latest-commit\n. We're still using 1.2 because we need to support IE8. I wish we didn't, but alas ...\n. @kentcdodds can you confirm that the above code should work? I'll try to implement a unit test and fix if it should.\n. Hi @kentcdodds, the fix doesn't solve my issue.\nWhen I run this testcase\n\n```\n  it(`should assign the scope's \"form\" property to the given FormController if it has a value`, () => {\n    const el = compileAndDigest(`\n      <form name=\"theForm\">\n        <formly-form model=\"model\" fields=\"fields\" form=\"theForm\" id=\"my-formly-form\" root-el=\"div\"></formly-form>\n      </form>\n    `);\n    const isolateScope = angular.element(el[0].querySelector('#my-formly-form')).isolateScope();\n    expect(scope.theForm).to.eq(isolateScope.form);\n    expect(scope.theForm.$name).to.eq('theForm');\n  });\n```\n\nFormly emits this warning: \n\n```\n'Formly Error: A formly-form does not have a `form` property. Many functions of the form (like validation) may not work. https://github.com/formly-js/angular-formly/blob/6.11.1/other/ERRORS_AND_WARNINGS.md#formly-form-has-no-formcontroller'\n```\n\nAnd when running my jsbin above, we can verify that validation is not working in this case.\n. I think this testcase should be green (it's successful when not using root-el)\n\n```\n  it(`should put the formControl on the field's scope when using a different form root element`, () => {\n    formlyConfig.setType({\n      name: 'text',\n      template: '<input name=\"{{id}}\" ng-model=\"model[options.key]\" />'\n    });\n\n    scope.fields = [\n      {\n        type: 'text',\n        key: 'bla'\n      }\n    ];\n    const el = compileAndDigest(`\n      <form name=\"theForm\">\n        <formly-form model=\"model\" fields=\"fields\" form=\"theForm\" id=\"my-formly-form\" root-el=\"div\"></formly-form>\n      </form>\n    `);\n\n    const fieldScope = angular.element(el[0].querySelector('.formly-field')).isolateScope();\n    expect(fieldScope.fc).to.exist;\n  });\n```\n. @samuelcoutu every time I see this, it has to do with using an API that is only available in the developer mode of IE8. And the most likely culprit is `console.log`. Using stuff like `console.log` will crash your page while in normal mode, but it will work fine in developer mode. \n. \ud83d\udc4d\n. Hi @kentcdodds, the fix for this breaks IE8 compatibility.\n`querySelectorAll(':not()')` is not supported, because it is a CSS3 selector: [Can I Use?](http://caniuse.com/#feat=queryselector).\nI have implemented a fix that builds the nodelist in a different way when the current method throws an Exception.\nWould you be interested in that PR? Or are you tired of trying to support IE8? ;-)\n. I would love to be able to use this feature, or alternatively, if formly would provide the ngModelController to the link function, I could add parsers and formatters myself.\n. Hi @kentcdodds, I finally had some time to play around with the new parsers and formatters.\nEverything works as expected, except formatting of the initial model value. When you start up with an already initialised model value, formatting is not applied, because the formatters are only added at a later stage.\nYou can work around this by adding a link function that formats the value as soon as the FC is known to the scope. See the example [here](http://jsbin.com/tiwuha/edit?js,console,output).\nIs there something that can be improved in formly so that the workaround is not needed?\n. Preparing the issue would just mean writing a failing test and marking it as `it.skip`, correct?\n. On it!\n. I had a quick look, and angular-formly seems to be missing from your bower.json.\nCould that be the issue?\n. Yeah, the tests look a bit funky, but I really didn't want to bring down the coverage percentage ;-)\n. Weird! The githook should have caught that, no?\n. This code below demonstrates a possible workaround (if you can get hold of the NgModelCtrl)\n\n``` javascript\nlet value = ctrl.$modelValue;\nctrl.$formatters.forEach((formatter) => {\n  value = formatter(value);\n});\n\nctrl.$setViewValue(value);\nctrl.$render();\n```\n. ",
    "gentledepp": "Hi!\nWhile the workaround seems to be OK for @rbfinch, for me it is not as it requires me to add hooks for the serverside valiadtion logic into every field which bloats my field definition.\nIn my use case (and I bet this problem do have many others as well), I also submit data to the server, but the client-side validation logic might not be in-sync with the server side one.\nThus, the clieht expects the data to be valid, while the server complains and sents an \"error\" object back, that contains a key-value-pair object containing of fieldname->errormessage\nNow I need to hook that information into the form in a way that users see what they-ve been doing wrong and update it accordingly. However, I do not want to write too much extra code... :-/\n\nI tried to use something like described in the following blog post:\nhttp://codetunes.com/2013/server-form-validation-with-angular/\n\nbut my problem is \n- getting the serverside errormessage displayed\n- clearing the serverside error when the field changes (serverError directive). In the blog the author applies his server-error directive to each input. but that requires me to either adapt the template or bloat my fielddefinitions with ngAttrs definitions. :(\n\nIs there any chance this could be implemented? If you point me towards the right direction, maybe I can do it and make a PR?\n. hmmm... klicking on your links leads to a 404.... sorry - I do not seem to be familiar with this group-chat feature. could you please post a link to a tutorial or something?\n. Hey thanks - this actually looks awesome\nI will definetly try it out.\nYou may also want to add this sample to the official docs as I bet there are lots of guys out there struggling with exactly this problem!\n. Hmmm... as I followed your approach I came across the next problem: The serverside error is correctly applied to the formly-form field. (in my sample case this is a \"the field username is required\" error).\nHowever as soon as I fill in the \"username\" field, the server-error is not removed and thus I cannot submit the form.  So when the model of the field changes, I need to reset the validationerrors. (especially the \"server\" error)\nAny hints on how you solved this?\n\nAlso: This is still quite a lot of code to implement. I would really appreciate if this functionality could be pulled into formly. E.g. by allowing to specify a \"externalErrors\" object on the <formly-form> directive which in the end is nothing different than your \"{ errors: [{ message: 'Unknown error' }]};\" object. :-|\n. well ok, so I will have to create all templates myself.\nI just thought I could use the bootstrap templates not have to change them.\nThank you for your help! :)\n. Sorry for not anwering for such a long time.\nI just wanted to say:\nthanks man - works like a charm!\n. Hi! I require the same functionality as I have a datepicker which stores the selected value in the same format as it was displayed. I, however,  need to convert the datetime string to an ISO date.\nI could not find any documentation or samples on this.\nIn the source, the valueGetterSetter function gets the $scope from the FormlyFieldController.\nI, however, would like to specify the conversion in \n        formlyConfig.setType({}) \ncall where there is no $scope yet. Is there any way I can do this? i.e. specifying at \"setType\" level a default conversion of the model value.\n :-/\nValue conversion is a huge benefit!\n. Thanks for the reply.\nI am using defaultOptions all the time, but where do I get the scope from?\nI have:\n\n<pre>\n formlyConfig.setType({\n            name: 'kendo-datetimepicker',\n            templateUrl: '/App/Core/formly-fields/kendo/formly-datetimepicker.cshtml',\n            wrapper: ['bootstrapLabel', 'bootstrapHasError'],\n            defaultOptions: {\n                templateOptions: {\n                    datepickerOptions: {\n                        parseFormats: [\n                            \"yyyy-MM-ddTHH:mm:ss\", // this is the format sent back from JSON.NET enabled web api rest service.\n                            \"yyyy-MM-ddTHH:mm:ss.fffZ\",\n                            \"yyyy-MM-ddTHH:mm:ss.fffzzz\",\n                            \"yyyy-MM-ddTHH:mm:sszzz\",\n                            \"yyyy-MM-ddTHH:mmzzz\",\n                            \"yyyy-MM-ddTHH:mmzz\",\n                            \"yyyy-MM-dd\"\n                        ]\n                    }\n                },\n                // the following was copied from formly-source\n                // here I need\n                // to get a reference to model or $scope\n                // to get a reference to templateOptions as it contais the format string that I can use to parse the date string\n                modelOptions: { getterSetter: true },\n                value: function valueGetterSetter(newVal) {\n                    if (!$scope.model || !$scope.options.key) {\n                        return undefined;\n                    }\n                    if (angular.isDefined(newVal)) {\n                        parseSet($scope.options.key, $scope.model, newVal)\n                    }\n                    return parseGet($scope.options.key, $scope.model)\n                },\n            }\n        });\n</pre>\n\nthe valueGetterSetter function does not work here as I have no reference to $scope.\nAlso I'd need to get a reference to templateOptions as well :-/\n\nso what I would like to do (pseudo code)\n\n<pre>\n               value: function valueGetterSetter(newVal) {\n                    if (!$scope.model || !$scope.options.key) {\n                        return undefined;\n                    }\n                    if (angular.isDefined(newVal)) {\n                        var isoDateFormat = \"yyyy-MM-ddTHH:mm:ss\";\n                        var format = templateOptions.datetimepickerOptions.format;\n                        var formattedDate = kendo.parseDate(newVal, format);\n                        var isoDateString = kendo.toString(formattedDate, isoDateFormat);\n                        parseSet($scope.options.key, $scope.model, isoDateString)\n                    }\n                    return parseGet($scope.options.key, $scope.model)\n                },\n</pre>\n. hmmm... I am not that good in angular, so I do not know how to use parsers and/or formatters.\nI solved it by introducing another directive which encapsulates the kendo-ui datetimepicker widget that causes this issue, because it stores the selected date in the display format (what did they think when programming this....)\n\nHowever, I believe this is a very important aspect of binding. \nSo if there was a way in angular-formly to specify a gettersetter function which gets the current $scope as parameter, that would be a HUGE benefit. ;-)\n\nThanks anyways\n. in what way has this been released? I cannot find any documentation? Do I have to read the source code? :-|\n. Hi!\nWhile the workaround seems to be OK for @rbfinch, for me it is not as it requires me to add hooks for the serverside valiadtion logic into every field which bloats my field definition.\nIn my use case (and I bet this problem do have many others as well), I also submit data to the server, but the client-side validation logic might not be in-sync with the server side one.\nThus, the clieht expects the data to be valid, while the server complains and sents an \"error\" object back, that contains a key-value-pair object containing of fieldname->errormessage\nNow I need to hook that information into the form in a way that users see what they-ve been doing wrong and update it accordingly. However, I do not want to write too much extra code... :-/\n\nI tried to use something like described in the following blog post:\nhttp://codetunes.com/2013/server-form-validation-with-angular/\n\nbut my problem is \n- getting the serverside errormessage displayed\n- clearing the serverside error when the field changes (serverError directive). In the blog the author applies his server-error directive to each input. but that requires me to either adapt the template or bloat my fielddefinitions with ngAttrs definitions. :(\n\nIs there any chance this could be implemented? If you point me towards the right direction, maybe I can do it and make a PR?\n. hmmm... klicking on your links leads to a 404.... sorry - I do not seem to be familiar with this group-chat feature. could you please post a link to a tutorial or something?\n. Hey thanks - this actually looks awesome\nI will definetly try it out.\nYou may also want to add this sample to the official docs as I bet there are lots of guys out there struggling with exactly this problem!\n. Hmmm... as I followed your approach I came across the next problem: The serverside error is correctly applied to the formly-form field. (in my sample case this is a \"the field username is required\" error).\nHowever as soon as I fill in the \"username\" field, the server-error is not removed and thus I cannot submit the form.  So when the model of the field changes, I need to reset the validationerrors. (especially the \"server\" error)\nAny hints on how you solved this?\n\nAlso: This is still quite a lot of code to implement. I would really appreciate if this functionality could be pulled into formly. E.g. by allowing to specify a \"externalErrors\" object on the <formly-form> directive which in the end is nothing different than your \"{ errors: [{ message: 'Unknown error' }]};\" object. :-|\n. well ok, so I will have to create all templates myself.\nI just thought I could use the bootstrap templates not have to change them.\nThank you for your help! :)\n. Sorry for not anwering for such a long time.\nI just wanted to say:\nthanks man - works like a charm!\n. Hi! I require the same functionality as I have a datepicker which stores the selected value in the same format as it was displayed. I, however,  need to convert the datetime string to an ISO date.\nI could not find any documentation or samples on this.\nIn the source, the valueGetterSetter function gets the $scope from the FormlyFieldController.\nI, however, would like to specify the conversion in \n        formlyConfig.setType({}) \ncall where there is no $scope yet. Is there any way I can do this? i.e. specifying at \"setType\" level a default conversion of the model value.\n :-/\nValue conversion is a huge benefit!\n. Thanks for the reply.\nI am using defaultOptions all the time, but where do I get the scope from?\nI have:\n\n<pre>\n formlyConfig.setType({\n            name: 'kendo-datetimepicker',\n            templateUrl: '/App/Core/formly-fields/kendo/formly-datetimepicker.cshtml',\n            wrapper: ['bootstrapLabel', 'bootstrapHasError'],\n            defaultOptions: {\n                templateOptions: {\n                    datepickerOptions: {\n                        parseFormats: [\n                            \"yyyy-MM-ddTHH:mm:ss\", // this is the format sent back from JSON.NET enabled web api rest service.\n                            \"yyyy-MM-ddTHH:mm:ss.fffZ\",\n                            \"yyyy-MM-ddTHH:mm:ss.fffzzz\",\n                            \"yyyy-MM-ddTHH:mm:sszzz\",\n                            \"yyyy-MM-ddTHH:mmzzz\",\n                            \"yyyy-MM-ddTHH:mmzz\",\n                            \"yyyy-MM-dd\"\n                        ]\n                    }\n                },\n                // the following was copied from formly-source\n                // here I need\n                // to get a reference to model or $scope\n                // to get a reference to templateOptions as it contais the format string that I can use to parse the date string\n                modelOptions: { getterSetter: true },\n                value: function valueGetterSetter(newVal) {\n                    if (!$scope.model || !$scope.options.key) {\n                        return undefined;\n                    }\n                    if (angular.isDefined(newVal)) {\n                        parseSet($scope.options.key, $scope.model, newVal)\n                    }\n                    return parseGet($scope.options.key, $scope.model)\n                },\n            }\n        });\n</pre>\n\nthe valueGetterSetter function does not work here as I have no reference to $scope.\nAlso I'd need to get a reference to templateOptions as well :-/\n\nso what I would like to do (pseudo code)\n\n<pre>\n               value: function valueGetterSetter(newVal) {\n                    if (!$scope.model || !$scope.options.key) {\n                        return undefined;\n                    }\n                    if (angular.isDefined(newVal)) {\n                        var isoDateFormat = \"yyyy-MM-ddTHH:mm:ss\";\n                        var format = templateOptions.datetimepickerOptions.format;\n                        var formattedDate = kendo.parseDate(newVal, format);\n                        var isoDateString = kendo.toString(formattedDate, isoDateFormat);\n                        parseSet($scope.options.key, $scope.model, isoDateString)\n                    }\n                    return parseGet($scope.options.key, $scope.model)\n                },\n</pre>\n. hmmm... I am not that good in angular, so I do not know how to use parsers and/or formatters.\nI solved it by introducing another directive which encapsulates the kendo-ui datetimepicker widget that causes this issue, because it stores the selected date in the display format (what did they think when programming this....)\n\nHowever, I believe this is a very important aspect of binding. \nSo if there was a way in angular-formly to specify a gettersetter function which gets the current $scope as parameter, that would be a HUGE benefit. ;-)\n\nThanks anyways\n. in what way has this been released? I cannot find any documentation? Do I have to read the source code? :-|\n. ",
    "mmospanenko": "Is this right solution? I think it is so hard. Server messages is very common problem and absent in formly?)\n. I compiled your messages in one solution:\n\n``` javascript\nformlyConfig.extras.fieldTransform.push(function (fields, model) {\n    return fields.map(function (field) {\n        if (!field.key) return field;\n        field.validation = field.validation || {};\n        field.validation.messages = field.validation.messages || {};\n        field.validation.messages.server = function (\n            viewValue, modelValue, scope) {\n            var message = '';\n            angular.forEach(scope.model.errors, function (err, key) {\n                if (key === scope.options.key) {\n                    message = err[0];\n                }\n            });\n            return message;\n        };\n        return field;\n    });\n});\n```\n\nI have errors from Django Rest Framework like: {field_name: ['err1', 'err2']} (use first one only). Also I don't mark field ass with error so I have not to revert them back in valid state :)\nIn error callback I only store all errors in model's 'errors' attribute.  \n. Is this right solution? I think it is so hard. Server messages is very common problem and absent in formly?)\n. I compiled your messages in one solution:\n\n``` javascript\nformlyConfig.extras.fieldTransform.push(function (fields, model) {\n    return fields.map(function (field) {\n        if (!field.key) return field;\n        field.validation = field.validation || {};\n        field.validation.messages = field.validation.messages || {};\n        field.validation.messages.server = function (\n            viewValue, modelValue, scope) {\n            var message = '';\n            angular.forEach(scope.model.errors, function (err, key) {\n                if (key === scope.options.key) {\n                    message = err[0];\n                }\n            });\n            return message;\n        };\n        return field;\n    });\n});\n```\n\nI have errors from Django Rest Framework like: {field_name: ['err1', 'err2']} (use first one only). Also I don't mark field ass with error so I have not to revert them back in valid state :)\nIn error callback I only store all errors in model's 'errors' attribute.  \n. ",
    "CJBrew": "All: Here's a working example. \n\nhttp://plnkr.co/edit/NdJKtuN0MD2E7jaO3j22?p=preview\n\nI had a lot of trouble figuring out how to access the errors correctly in my OnSubmit` error handler:\n\n``` js\nfunction(field) {\n    if (field.key != null && key === field.key) {     \n        field.formControl.$setValidity('server', false);\n        field.formControl.$error.server = \"Server Error: \" + key + \" \" + errorMessage;      \n    };\n}\n```\n\nNow, using the following in my /transcluded/ message display for the Form, I see the messages popping up as required:\n\n``` html\n  <formly-transclude></formly-transclude>\n      <div ng-messages=\"fc.$error\" ng-if=\"form.$submitted || options.formControl.$touched\" class=\"error-messages\">\n       <div ng-message=\"{{ ::name }}\" \n       ng-repeat=\"(name, message) in ::options.validation.messages\" class=\"message\"\n       ng-bind=\"message(fc.$viewValue, fc.$modelValue, this)\">\n                </div>\n       </div>\n```\n. All: Here's a working example. \n\nhttp://plnkr.co/edit/NdJKtuN0MD2E7jaO3j22?p=preview\n\nI had a lot of trouble figuring out how to access the errors correctly in my OnSubmit` error handler:\n\n``` js\nfunction(field) {\n    if (field.key != null && key === field.key) {     \n        field.formControl.$setValidity('server', false);\n        field.formControl.$error.server = \"Server Error: \" + key + \" \" + errorMessage;      \n    };\n}\n```\n\nNow, using the following in my /transcluded/ message display for the Form, I see the messages popping up as required:\n\n``` html\n  <formly-transclude></formly-transclude>\n      <div ng-messages=\"fc.$error\" ng-if=\"form.$submitted || options.formControl.$touched\" class=\"error-messages\">\n       <div ng-message=\"{{ ::name }}\" \n       ng-repeat=\"(name, message) in ::options.validation.messages\" class=\"message\"\n       ng-bind=\"message(fc.$viewValue, fc.$modelValue, this)\">\n                </div>\n       </div>\n```\n. ",
    "Zjaaspoer": "Ah ok, didn't know about the better debugging in jsbin, I'll try to make any future examples on that site. And I see by now they support jade and scss (the reason I was using codepen), yay!\n\nBut back to business: I tried adding jQuery, and it did indeed solve the problem. So it was indeed that bug (I saw you reported it at the angular repo :)\n\nAs I really want to keep jQuery out of the platform (it's a personal thing...) I'll have to wait for the stable 1.4 release (as the bug is also solved by upgrading to 1.4 beta and not adding jQuery)\n\nThanks for you swift response. Now for beer! (I guess it's still working hours in the states, hehe ;)\n. Haha thanks!\n. Ah ok, didn't know about the better debugging in jsbin, I'll try to make any future examples on that site. And I see by now they support jade and scss (the reason I was using codepen), yay!\n\nBut back to business: I tried adding jQuery, and it did indeed solve the problem. So it was indeed that bug (I saw you reported it at the angular repo :)\n\nAs I really want to keep jQuery out of the platform (it's a personal thing...) I'll have to wait for the stable 1.4 release (as the bug is also solved by upgrading to 1.4 beta and not adding jQuery)\n\nThanks for you swift response. Now for beer! (I guess it's still working hours in the states, hehe ;)\n. Haha thanks!\n. ",
    "rmacteague": "+1\n. +1\n. ",
    "frijswijk": "+1\n. +1\n. ",
    "mtakac2": ":+1: \n. :+1: \n. ",
    "adyba": "+5\n. +5\n. ",
    "akarelas": ":+1: \n. :+1: \n. ",
    "asadsahi": "A full course on pluralsight will do? :) :+1:\n. @kentcdodds first field in this example.....http://jsbin.com/vozucodoba/edit?js,output\n\n@ckniffin yes, tried with both true and false\n\nMan i am lovin formly as much as support from community :).. thanks\n. Hi Kent & @ckniffen Yes, using \n`formlyConfig.extras.ngModelAttrsManipulatorPreferUnbound = true`\n.. has resolved it. Should I keep on using this global setting or keep an eye on breaking change?\n. Thanks :)\n. A full course on pluralsight will do? :) :+1:\n. @kentcdodds first field in this example.....http://jsbin.com/vozucodoba/edit?js,output\n\n@ckniffin yes, tried with both true and false\n\nMan i am lovin formly as much as support from community :).. thanks\n. Hi Kent & @ckniffen Yes, using \n`formlyConfig.extras.ngModelAttrsManipulatorPreferUnbound = true`\n.. has resolved it. Should I keep on using this global setting or keep an eye on breaking change?\n. Thanks :)\n. ",
    "rafaell-lycan": "+1\n. +1\n. ",
    "benoror": "+1 more on custom templates, templateManipulators, wrappers\n. +1 (also for the sake of ping'ing @mikeerickson & trying: https://chrome.google.com/webstore/detail/github-%2B1s/lddfkkebajnpiicnpfamebilmhamkeme :smile: )\n. https://github.com/Thibaut/devdocs/wiki/Adding-documentations-to-DevDocs\n. This is a validation library for JSON-Schema: https://github.com/geraintluff/tv4\n. Wow never heard of that one, looks pretty awesome!\n. @Den-dp could you please test https://github.com/formly-js/angular-formly/pull/316 in an *nix environment since I don't have acces to one ATM\n. Wouldn't `key` property for fieldGroup make more sense?:\n\nJSBin: http://jsbin.com/tusubo/1/\n. Added both: https://github.com/formly-js/angular-formly/pull/314\n. Hi @kentcdodds !\n\nFor https://github.com/benoror/angular-formly/commit/629e758e347631f021e6bdd31919cbae2ec5391a the `local-examples/` demo works, but to be honest I'm not 100% sure my implementation is correct. Please take it with caution\n. Regarding package.json script update, you mean issue https://github.com/formly-js/angular-formly/issues/305?\n. Also,  https://github.com/benoror/angular-formly/commit/d8fd28150633f4eb9bfe36e2dce8d696b097ac2f and https://github.com/benoror/angular-formly/commit/e8a0c6a9da32e7f8b63a887f97de02ee2ecf156b added support for `key` property in fieldGroup, but again I'm not totally confident of my patch.\n\nDemo works but I had to comment-out one failing test. I guess I'm setting the `model` & `key` the wrong way (also considering the case for number-ish (index) keys).\n\nLet me know your thoughts. Regards!\n. It works like a charm, thanks @kentcdodds !\n\nBTW, would it be much trouble to support `key` property in fieldGroup? A use-case would be to support multi-level nested forms:\n\nModel:\n\n```\n    vm.formData = {\n          \"name\": \"John\",\n          \"address\": {\n              \"streetnum\": \"145 Elm St.\",\n              \"place\": {\n                \"state\": \"GA\",\n                \"city\": \"Atlanta\"\n              }\n          }\n    };\n```\n\nFields:\n\n```\n    vm.formFields = [\n      {\n        key: 'name',\n        type: 'input',\n        templateOptions: {\n          label: 'Name'\n        }\n      },\n      {\n        key: 'address',\n        fieldGroup: [\n          {\n            key: 'streetnum',\n            type: 'input',\n            templateOptions: {\n              label: 'Street Num'\n            }\n          },\n          {\n            key: 'place',\n            fieldGroup: [\n                {\n                    key: 'state',\n                    type: 'input',\n                    templateOptions: {\n                      label: 'State'\n                    }\n                },\n                {\n                    key: 'city',\n                    type: 'input',\n                    templateOptions: {\n                      label: 'City'\n                    }\n                }\n            ]\n          }\n        ]\n      }\n    ];\n```\n. Wouldn't that be akward/counterintuitive?\n\n```\n    vm.formFields = [\n      // ...\n      {\n        model: 'model.address',\n        fieldGroup: [\n          // ...\n          {\n            model: 'model.address.place',\n            fieldGroup: [\n                // ...\n            ]\n          }\n        ]\n      }\n    ];\n```\n\n**_Update**_: Another benefit of having a `key` string is that it remains untouched at runtime (as opposed to a `model` string), allowing to retrieve the original structure. Ex. use-case: [getting $dirty fields from nested forms](https://gist.github.com/benoror/d845d5ae16c176e090d8#file-dirty-fields-js-L26)\n. Wow [that was fast](https://github.com/formly-js/angular-formly/commit/67065e9cad7e9d05e38f32014f2688364daa9b17) @kentcdodds ! I was already working on it but was nowhere near, you saved my day!,Thanks!\n. Sorry for the mess @kentcdodds , I'm still struggling to learn OSS collaboration procedures.\n\nI'll try again as soon as I have an Unix environment available, BTW this situation **must** have been faced by many other projects, I'll investigate\n\n**_Update**_: Seems that [using a middleware](http://stackoverflow.com/questions/24636049/npm-make-package-json-work-under-both-unix-mac-osx-and-windows) to handle it may be the most viable option\n. There are a lot of examples in the webpage, you can use a formly watcher:\n\nhttp://angular-formly.com/#/example/field-options/watchers\n\nOr as @siddharthkchatterjee said, you can use `$scope.$watch` in the controller\n\nThere are many alternatives since angular-formly is quite flexible, use the one that suits your needs. :smile: \n. The best way to get help is to **get a failing example in jsbin/jsfiddle/...** and **then** ask in [gitter.im/formly-js/angular-formly](https://gitter.im/formly-js/angular-formly)\n\nAlso take a look at [Questions/Help](https://github.com/formly-js/angular-formly/blob/master/CONTRIBUTING.md#questionshelp) section and the [corresponding video](https://www.youtube.com/watch?v=Kw9fVgc3Tzk&index=6&list=PLV5CVI1eNcJi7lVVIuNyRhEuck1Z007BH)\n. For anyone wondering here's an example: http://jsbin.com/jinaca/1/edit?js,output\n. Agree, this was something I personally faced when learning angular-formly and having used formController before.\n. You might want to take a look at:\n- https://github.com/johnpapa/angular-styleguide#controllers\n- https://github.com/toddmotto/angularjs-styleguide#controllers\n. Hi! I'm a the author of the [original example](angular-formly.com/#/example/integrations/ui-select).\n\nThanks for spotting the issue, it looks like the problem is with [ui-select](https://github.com/angular-ui/ui-select), could you isolate the example without involving angular-formly at all?\n\nMaybe then we can open an issue in ui-select's repo :smile: \n\nThanks!\n. :smile: \n. > <canned-message>\n> \n> Thanks for your interest in angular-formly. The issues are for bug reports/feature requests, so I'm going to go ahead and close this issue. If you have a question or need help, please [watch this screencast](https://www.youtube.com/watch?v=NXqFiSeBE-M&list=PLV5CVI1eNcJi7lVVIuNyRhEuck1Z007BH) for an explination of the most effective/proper way to get help using angular-formly.\n> \n> Summarized:\n> 1. [Learn angular-formly basics](http://learn.angular-formly.com/)\n> 2. [Check the examples](http://angular-formly.com/)\n> 3. [Reproduce the issue](http://new-example.angular-formly.com/)\n> 4. [Ask on Stack Overflow](http://stackoverflow.com/questions/tagged/angular-formly)\n> 5. [Ask on the mailing list](http://mailing-list.angular-formly.com/)\n> 6. [Ask on Chat](http://chat.angular-formly.com/)\n> \n> P.S. sorry for the canned message, this just happens a lot :smile:\n> \n> </canned message>\n\n**Cascaded Select Example**: http://jsbin.com/jinaca/1/edit?js,output\n. I just happen to answer that issue a few days ago: https://github.com/formly-js/angular-formly/issues/326#issuecomment-109312896\n\nThis has been asked before few times (including me), @kentcdodds shall we add this example to [the website examples](https://github.com/formly-js/angular-formly-website)?\n. http://angular-formly.com/#/example/other/cascaded-select\n. Fixed, I had an empty object appended at the end of the dummy DataService. Anyway, it wouldn't matter for a real ajax service.\n. No problemo :smile: \n. Actually many other JSBin examples are throwing the same error\n\nOn Wed, Aug 19, 2015, 06:14 Ian Hitchcox notifications@github.com wrote:\n\n> Can you fix the example? It's complaining about you using https while\n> embedding.\n> \n> I can access it by going to http://jsbin.com/jinaca but there's no\n> explanation or source.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/345#issuecomment-132550230\n> .\n> \n> ## \n\nSent from my phone (sorry for possible typos)\nBenjamin Orozco - benoror.com\n. Cool! I have some doubts regarding the tests, you said `name` could be set both on the **scope** and the **field options object**. I'm not sure that both are correctly tested\n. Oops it seems building failed because of `sinion.js` issues\n. Ok, so the tests look good as well? https://github.com/formly-js/angular-formly/pull/346#issuecomment-110844936\n. I can do that!\n. Done, I'm not sure if that's the proper place to test it\n. Great, let me rewrite it for a better organization\n. ready!\n. no prob, glad to be helpful! :hand: \n. The output looks like that because stdout is streamed directly to `console.log`.\n\nMaybe directly using `process.stdout.write` [can fix it](http://stackoverflow.com/questions/6157497/node-js-printing-to-console-without-a-trailing-newline).\n\nI'll try again tomorrow ASAP, as I will optimize the code for all scripts :)\n. I fixed it accordingly, but the introduction of `--config $npm_package_webpack` breaks the script, how should be handled?\n. Ok, let me know if this works for you, so I can extend it for most scripts :smile: \n. Sounds good! Let me create a repo and a beta version of it :+1: \n. Would this kind arrangement look ok? or is it too verbose?\n\n```\n{\n  \"scripts\": {\n    \"build:dist\": \"better-npm-run\",\n    \"test\": \"better-npm-run\"\n  },\n  \"betterScripts\": {\n    \"build:dist\": {\n        \"command\": \"webpack --config $npm_package_webpack --progress --colors\",\n        \"env\": {\n            \"NODE_ENV\": \"development\"\n        }\n    },\n    \"build:prod\": {\n        \"command\": \"webpack --config $npm_package_webpack --progress --colors\",\n        \"env\": {\n            \"NODE_ENV\": \"production\"\n        }\n    },\n    \"build\": [\n        {\n            \"run\": \"build:dist\"\n        },\n        {\n            \"run\": \"build:prod\"\n        }\n    ],\n    //...\n    \"test\": {\n        \"command\": \"karma start\",\n        \"env\": {\n            \"NODE_ENV\": \"test\"\n        }\n    }\n  }\n}\n```\n. Okey, already created a draft version at [github.com/benoror/better-npm-run](https://github.com/benoror/better-npm-run).\n\nRight now I don't have any project that could use it, but if you think it has potential to be used by angular-formly or anything-else in the future let me know.\n. Hey that's great @kentcdodds! :smile: considering that I wrote the draft on-the-go this afternoon.\n\nAnyway, please let me know if you have a particular use-case or idea for extending its functionality, I opened a general issue for brainstorming: https://github.com/benoror/better-npm-run/issues/1\n\nRegards!\n. Can you provide a JSBin example (as explained in [CONTRIBUTING.md](https://github.com/formly-js/angular-formly/blob/master/CONTRIBUTING.md#reporting-bugs--requesting-features)) using [template-wrappers](http://angular-formly.com/#/example/advanced/template-wrappers) along with [fieldGroups](http://docs.angular-formly.com/v6.4.0/docs/field-groups)?\n. Shouldn't it just rely on NgModelController's `$parsers` & `$formatters` existing functionality?\n\nhttps://docs.angularjs.org/api/ng/type/ngModel.NgModelController#$parsers\n. My toughts:\n1. Since \"_The functions are called in reverse array order_\" I think the ones in `defaultOptions` should have more precedence, therefore should be **pushed _last_**\n2. Since pushing a function with the same name won't override it, I see 2 possible opts:\n   1. A simple mechanism to override `defaultOptions` when specifying the **same name** (acting more like an object)\n   2. Use of ID's to specify overriding\n. Although this is an edge (but maybe not too unrealistic) example, I agree, as this is what I would expect from an execution-order standpoint: the more specific a {parser,formatter} is, the later it should be applied.\n. You shall use **Expression Properties** as explained here:\n\nhttp://angular-formly.com/#/example/field-options/expression-properties\n\nHere's a working example:\n\nhttp://jsbin.com/kigozo/edit?html,js,console,output\n. Because it's async, here's a good article explaining it: http://blog.carbonfive.com/2013/10/27/the-javascript-event-loop-explained/\n. Do you mind creating an example of what you're trying to accomplish? Please follow the instructions here: http://help.angular-formly.com\n\nThis will make it easier for you to get help. Because the github issues are reserved for bug reports and feature requests, I'm going to go ahead and close this issue. See you on chat! Thanks!\n. You're not @kentcdodds, I was deceived by an outdated version of formly and [incomplete documentation](http://docs.angular-formly.com/docs/field-groups).\n\nSorry for the false negative (mondays.. (-, - )\u2026zzzZZZ), you can close the issue now.\n\nBTW, Still looking forward for [that blog post](https://twitter.com/kentcdodds/status/621691930527707136) regarding `npm config set save-exact=true`, `next-update`, etc \n\n# ( \u0361~ \u035c\u0296 \u0361\u00b0)\n. Hey @BartVDACodeware !\n\nWhat happened in the end? Did you find a workaround?\n\nI think I'm having a similar issue with another **Tree** project: https://github.com/ceolter/ag-grid/issues/533\n\nThanks! :smiley_cat: \n. Supposing I succeeded figuring out your cryptic message, I guess what you're looking for is **custom templates**: http://docs.angular-formly.com/docs/custom-templates\n. @estaub angular-formly is **agnostic regarding template/controls/widgets rendering**. You could implement multiselect/tagging by yourself, or **easily adapt an existing solution using custom templates**, [as explained in the documentation](http://docs.angular-formly.com/docs/custom-templates).\n\nFor multiselect/tagging I've seen that [ui-select](https://github.com/angular-ui/ui-select) supports it, and I will implement it eventually for my project (which should be rather easy considering an existing example [like this](http://angular-formly.com/#/example/integrations/ui-select)), but there should be plenty of different alternatives, in the end JavaScript kinda popular these days :smile: \n. @estaub don't worry, a quick search threw me around 3k results:\nhttps://github.com/search?l=JavaScript&q=tagging&ref=searchresults&type=Repositories&utf8=%E2%9C%93\n\nBTW, let me know whenever you've found a good candidate and implemented a custom template!\n\nGood luck!\n. @gentledepp https://github.com/formly-js/angular-formly/commit/2cb7d2e8758a78fd083e257d57ea9dddd588a1ae#diff-4830f282e0aa2d5c786eb691f55beb43R2095\n\nDocs: http://docs.angular-formly.com/docs/field-configuration-object#extras-object\n. Hi @nomack84, warm welcome to Cuba! I recently had a similar requirement, but unfortunately `fieldGroups` doesn't support template wrappers.\n\nBut I achieved the same result making use of the `data` property inside a **custom type called `nested`**, take a look: http://jsbin.com/zaqeke\n\nAlso @kentcdodds came with a slightly different approach, **by using two fields arrays**, take a look: http://jsbin.com/setupi\n\n@kentcdodds shall I submit it as an example for the website?\n. @netowp in the JSBin it's included inside an script tag, since JSBin doesn't support multiple files afaik:\n\n```\n<script type=\"text/ng-template\" id=\"panel.html\">\n...\n</script>\n```\n\nIn your project you'll likely have it in a **separate file**, or if you'd like yo might use ES6 multi-line strings, like this:\n\n```\n    formlyConfigProvider.setWrapper({\n      name: 'panel',\n      template: `\n          ...\n      `\n    });\n```\n. It's almost certainly [better-npm-run](https://github.com/benoror/better-npm-run)'s fault, as it was a quick hack I didn't paid enough attention to the way **stderr** should be handled in the callback.\n\nI opened the following issue, could you elaborate on it?\n\nhttps://github.com/benoror/better-npm-run/issues/6\n\nThanks!\n. As I pm'd you, I don't feel savvy enough with angular-formly codebase/testing.\n\nNevertheless I might be able to help filtering worthy issues, commenting on them & closing the redundat ones.\n\n### **I would like to publicly reiterate my appreciation for your hard work on the project**\n\n## Kudos :+1: and all the best wishes :family:\n. count with me :+1: \n. Unfortunately fieldGroup doesn't support wrappers, and adding them would mean adding complexity to angular-formly.\n\nFortunately there's a simple way to accomplish the same results using custom templates.\n\nDid you take a look at the nested-form example?:\n\nhttp://angular-formly.com/#/example/other/nested-formly-forms\n. Done!\n. @holtjonathan I agree, having wrapper support for fieldgroups would simplify things\n. > @benoror Thanks for sharing the example. I noticed that you have used wrapper as panel.\r\n> Is there a list of possible wrappers that can be used?\r\n\r\n@jayasrinagrale Any template can be used using `setWrapper`, please refer to the stack overflow link and the provided example. Hi @Javammer, Thanks for your interest in angular-formly. Do you mind creating an example of what you're trying to accomplish? The best way to get help is by following the instructions here: http://help.angular-formly.com\n\nI'm going to go ahead and close this issue because the github issues for this project are reserved for bug reports and feature requests. See you on chat! Thanks!\n. Hi @Luddinus ! Thanks for your interest in angular-formly. I'm sure that angular already handle this. The best way to get help is by following the instructions here: http://help.angular-formly.com\n\nI'm going to go ahead and close this issue because the github issues for this project are reserved for bug reports and feature requests. See you on chat! Thanks!\n. @Luddinus you can pass a function to the form with `ng-submit`, and do some pre-processing there (before hitting the backend):\n\n```\n  <form ng-submit=\"vm.onSubmit()\" name=\"vm.form\" novalidate>\n    <formly-form model=\"vm.model\" fields=\"vm.fields\" options=\"vm.options\" form=\"vm.form\">\n      <!-- ... -->\n    </formly-form>\n  </form>\n```\n\nMore info: https://docs.angularjs.org/api/ng/directive/ngSubmit\n. Hi @TheBekker! Thanks for your interest in angular-formly. I'm sure that angular-formly can do this for you. The best way to get help is by following the instructions here: http://help.angular-formly.com\n\nI'm going to go ahead and close this issue because the github issues for this project are reserved for bug reports and feature requests. See you on chat! Thanks!\n. Hi @eliagentili! Thanks for your interest in angular-formly. I'm sure that angular-formly can do this for you. The best way to get help is by following the instructions here: http://help.angular-formly.com\n\nI'm going to go ahead and close this issue because the github issues for this project are reserved for bug reports and feature requests. See you on chat! Thanks!\n. @eliagentili did you try using several `<formly-form>` tags in your template?\n. Done, thanks for letting me know!\n. @brutalcrozt Try with a recent version of Node 4.\\* or even 5.\\* :smile: \n. Calling `vm.options.resetModel()` doesn't seem to propagate to nested `formly-form`'s (However stuff like **`vm.form`** seem to be correctly inherited).\n- http://docs.angular-formly.com/docs/formly-form#section-resetmodel-and-updateinitialvalue\n\nIf I bind the `options` variable to the template now `resetModel()` resets the nested fields, although ignoring the outer scope fields, see example: http://jsbin.com/zaqeke/18/edit?html,js,output\n. @kentcdodds Do you think this can be fixed in angular-formly itself (maybe related to https://github.com/formly-js/angular-formly/issues/465) ?\n\nOr it might be related to the way angular handles nested forms, something along the lines of\nhttps://github.com/angular/angular.js/pull/11023\n\n**Update**: [This seems to work for fieldGroup's](https://github.com/formly-js/angular-formly/blob/34015c79b1229f13bbcc5f53aaa448e4deb6709d/src/directives/formly-form.test.js#L262). I'm going to write some tests \n. Ok I wrote [a failing test for this issue](https://gist.github.com/benoror/92cda91c27d7abcf568d/revisions#diff-265f25365653e7c36b4cc483a5663ce1R231): \n\n```\nexpected { innerField: 'zab' } to deeply equal { innerField: 'bar' }\n```\n\nI suspect this is related to nested keys handling https://github.com/formly-js/angular-formly/issues/426, any hint where should I look at?\n. @MCKRUZ you're right! :smile_cat: \n\nTherefore instead of messing up with `data` a cleaner solution would be to _use a wrapper around a_ **_fieldGroup**_, which is something already **planned to implement in https://github.com/formly-js/angular-formly/issues/486** :tada: (although support for `templateOptions` should be also considered, in order to customize panel's title)\n\nJSBin example: http://jsbin.com/zaqeke/20/edit?html,js,output\n\n@kentcdodds What do you think? Using something already proven (like fieldGroup) sounds better that reinventing the wheel IMHO\n. I believe I managed to fix this, along with #486 \n\ndo you mind checking out a working example at  http://jsbin.com/zaqeke/21/edit?html,js,output\n. Closed via https://github.com/formly-js/angular-formly/pull/529\n. :smile: np\n. Rollback the JSBin revision number\n\nOn Thu, Oct 29, 2015, 12:04 holtjonathan notifications@github.com wrote:\n\n> Odd question, do you happen to have the old example of how your nested\n> form example worked? I am curious to see what all was changed.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/pull/529#issuecomment-152268016\n> .\n> \n> ## \n\nSent from my phone (sorry for possible typos)\nBenjamin Orozco - benoror.com\n. Nice :+1: \n. > Do you mind creating an example of what you're trying to accomplish? Please follow the instructions here: http://help.angular-formly.com\n> \n> This will make it easier for you to get help. Because the github issues are reserved for bug reports and feature requests, I'm going to go ahead and close this issue. See you on chat! Thanks!\n. Don't worry :smile:\n. Do you mind creating an example of what you're trying to accomplish? Please follow the instructions here: http://help.angular-formly.com\n. :+1:\n. Do you mind creating an example of what you're trying to accomplish? Please follow the instructions here: http://help.angular-formly.com\n\nThis will make it easier for you to get help. Because the github issues are reserved for bug reports and feature requests, I'm going to go ahead and close this issue. See you on chat! Thanks!\n. Hi @asaf050! Thanks for your interest in angular-formly. I'm sure that angular-formly can do this for you. The best way to get help is by following the instructions here: http://help.angular-formly.com\n\nI'm going to go ahead and close this issue because the github issues for this project are reserved for bug reports and feature requests. See you on chat! Thanks!\n. Do you mind creating an example of what you're trying to accomplish? Please follow the instructions here: http://help.angular-formly.com\n\nThis will make it easier for you to get help. Because the github issues are reserved for bug reports and feature requests, I'm going to go ahead and close this issue. See you on chat! Thanks!\n. @ValentinH Hi, I just tested http://jsbin.com/zoyiletefa/1/edit?js,output and **Reset** works fine, can you still replicate it?\n\nRegarding @sasikumardr I can confirm both malfunctions. I suspect his might be a **bug related to resetModel() with Array's**\n. I'm going to go ahead and close this issue.\n. I'm sure that angular-formly can do this for you. The best way to get help is by following the instructions here: http://help.angular-formly.com\n\nI'm going to go ahead and close this issue because the github issues for this project are reserved for bug reports and feature requests. See you on chat! Thanks!\n. Do you mind creating an example of what you're trying to accomplish? Please follow the instructions here: http://help.angular-formly.com\n\nThis will make it easier for you to get help. Because the github issues are reserved for bug reports and feature requests, I'm going to go ahead and close this issue. See you on chat! Thanks!\n. Hi @bondarewicz! Thanks for your interest in angular-formly. I'm sure that angular-formly can do this for you. The best way to get help is by following the instructions here: http://help.angular-formly.com\n\nAlso, do you mind creating an example of what you're trying to accomplish? Please follow the instructions here: http://help.angular-formly.com\n\nI'm going to go ahead and close this issue because the github issues for this project are reserved for bug reports and feature requests. See you on chat! Thanks!\n. Hi @tiagocedrim! Thanks for your interest in angular-formly. I'm sure that angular-formly can do this for you. The best way to get help is by following the instructions here: http://help.angular-formly.com\n\nI'm going to go ahead and close this issue because the github issues for this project are reserved for bug reports and feature requests. See you on chat! Thanks!\n. You can set `type` attribute to [default input templates](https://github.com/formly-js/angular-formly-templates-bootstrap/blob/master/src/types/input.js) this way:\n\n```\n    defaultOptions: {\n      templateOptions: {\n        type: 'file'\n      }\n    }\n```\n\n```\n    defaultOptions: {\n      templateOptions: {\n        type: 'color'\n      }\n    }\n```\n\nFor more information on HTML Input Types see: http://www.w3schools.com/htmL/html_form_input_types.asp\n. Hi @tuckerjt07! Thanks for your interest in angular-formly. I'm sure that angular-formly can do this for you. The best way to get help is by following the instructions here: http://help.angular-formly.com\n\nI'm going to go ahead and close this issue because the github issues for this project are reserved for bug reports and feature requests. See you on chat! Thanks!\n. I saw you replaced the model for each key, therefore you never saw the changes.\n\nWhat you need to do is to **match the model in the key itself**.\n\nSee corrected example: http://jsbin.com/pupijoc/1/edit?js,console,output\n. Answered in SO: http://stackoverflow.com/a/34185058/171809\n. Hi @gizburdt!\n\nDo you mind creating an example of what you're trying to accomplish? Please follow the instructions here: http://help.angular-formly.com\n\nThis will make it easier for you to get help. Because the github issues are reserved for bug reports and feature requests, I'm going to go ahead and close this issue. See you on chat! Thanks!\n. @gizburdt Would't something like this be sufficient?\n\n```\nvm.map.addListener('center_changed', function(e){\n    c = vm.map.getCenter()\n    vm.model.latitude = c.latitude\n    vm.model.longitude = c.longitude\n});\n```\n. That's a suggestion, it's hard for me to guess your implementation. \nAn example would be suitable to get help :smile: \n. You are not even loading Angular. Please follow this template: [new-example.angular-formly.com](http://new-example.angular-formly.com/)\n. Sure no problem :smile:, you had many typos and basic mistakes regarding angular itself and angular-formly. I fixed some of them: https://jsbin.com/tuwuyo/1/edit?html,js,console,output\n\nIf you want me to explain them let me know  in Gitter. See you on chat!\n. Np :smile:\n. Hi @austinstudio! Thanks for your interest in angular-formly. I'm sure that angular-formly can do this for you. Also, do you mind **creating an example** of what you're trying to accomplish?. The best way to get help is by following the instructions here: http://help.angular-formly.com\n\nI'm going to go ahead and close this issue because the github issues for this project are reserved for bug reports and feature requests. See you on chat! Thanks!\n. Ok, gonna fix it now\n. done! :clap: \n. Hi @zorzysty! Thanks for your interest in angular-formly. It's not clear why would you need to set the [ui-mask](https://github.com/angular-ui/ui-mask) to `undefined`, so it's hard to identify this as a bug or feature request. The best way to get help is by following the instructions here: http://help.angular-formly.com\n\nThis will make it easier for you to get help. Because the github issues are reserved for bug reports and feature requests, I'm going to go ahead and close this issue. See you on chat! Thanks!\n. Take a look at the example using a `watcher` instead: http://jsbin.com/sukoga/1/edit?js,console,output\n. This looks **related to: https://github.com/formly-js/angular-formly/issues/586**\n\nDo you mind creating an example? Please follow the instructions here: http://help.angular-formly.com\n. This  is weird, feel free to investigate further and submit a PR if you find the issue.\n. This is not handled by angular-formly, but by the 3rd party wizard directive\n\nIn their docs you can read how they handle step validation: https://github.com/mgonto/angular-wizard#wizard-step-validation\n\nFixed example: http://jsbin.com/fexuji/1/edit?html,js,console,output\n. :smile:\n. Do you mind creating an example of what you're trying to accomplish? Please follow the instructions here: http://help.angular-formly.com\n. Hi @estvmachine! Thanks for your interest in angular-formly. I'm sure that this issue is not mcaused by angular-formly.\n\nI'm going to go ahead and close this issue because the github issues for this project are reserved for bug reports and feature requests. See you on chat! Thanks!\n. @estvmachine a google search gave me these related issues:\n- https://github.com/mgcrea/angular-strap/issues/1473\n- https://github.com/tamtakoe/oi.select/issues/10\n\nIndeed downgrading to Angular 1.3 gets rid of the error:\n- http://jsbin.com/nayoquduve/1/edit?html,js,console,output\n\nCheers!\n. Do you mind creating an example of what you're trying to accomplish? Please follow the instructions here: http://help.angular-formly.com\n\nThis will make it easier for you to get help. Because the github issues are reserved for bug reports and feature requests, I'm going to go ahead and close this issue. See you on chat! Thanks!\n. Do you mind creating an example of what you're trying to accomplish? Please follow the instructions here: http://help.angular-formly.com\n\nThis will make it easier for you to get help. Because the github issues are reserved for bug reports and feature requests, I'm going to go ahead and close this issue. See you on chat! Thanks!\n. Hi @hardikkaji! Thanks for your interest in angular-formly. I'm sure that angular-formly can do this for you. The best way to get help is by following the instructions here: http://help.angular-formly.com\n\nI'm going to go ahead and close this issue because the github issues for this project are reserved for bug reports and feature requests. See you on chat! Thanks!\n. @hardikkaji take a look at: http://www.w3schools.com/tags/att_select_disabled.asp\n. Hi @pequenopadre! Thanks for your interest in angular-formly. I'm sure that angular-formly can do this for you. The best way to get help is by following the instructions here: http://help.angular-formly.com\n\nI'm going to go ahead and close this issue because the github issues for this project are reserved for bug reports and feature requests. See you on chat! Thanks!\n. # Simple solution\n\nHTML5 Input Types\n- http://www.w3schools.com/tags/att_input_type.asp\n- http://www.w3schools.com/html/html_form_input_types.asp\n\n# Formly solution\n\nCustom validators\n- https://egghead.io/lessons/angularjs-angular-formly-custom-validation?pl=7\n- http://docs.angular-formly.com/docs/validation\n- http://angular-formly.com/#/example/advanced/validators\n- http://docs.angular-formly.com/docs/formly-custom-validation\n. @kamilkisiela super! :+1: \n. I did, I forgot that github doesn't notify PR updates \n. Np, give me a moment :smile:\n. @kamilkisiela Apparently the last PR changed apiCheck for watchers, among other stuff, thus now I get some unit tests failing.\n\nSorry, this merge is going to take a bit more time, feel free to try it yourself meanwhile\n. @kamilkisiela Great! :smile: \n\nYou reverted some of the changes, for example: [I introduced watcherChecker](https://github.com/formly-js/angular-formly/commit/b2781ef454835268c6c595840243c485ee00e357#diff-07752bb803b21dd1aadc5838eaaf7744R186), then you [reverted it back](https://github.com/formly-js/angular-formly/commit/28c648dc83cb75ded78e5d984a81cfd19c544e1c#diff-07752bb803b21dd1aadc5838eaaf7744R187) :cry: \n\nSince you also introduced several more commits, do you mind cleaning the git history a little bit?\n\nThanks!\n. maybe the new `runFieldExpressions` property should be in both places?\n. @kamilkisiela thanks a lot! :tada: \n. Do you mind creating an example of what you're trying to accomplish? Please follow the instructions here: http://help.angular-formly.com\n\nThis will make it easier for you to get help. Because the github issues are reserved for bug reports and feature requests, I'm going to go ahead and close this issue. See you on chat! Thanks!\n. Do you mind creating an example of what you're trying to accomplish? Please follow the instructions here: http://help.angular-formly.com\n\nThis will make it easier for you to get help. Because the github issues are reserved for bug reports and feature requests, I'm going to go ahead and close this issue. See you on chat! Thanks!\n. Hi @koraybalci , The reason is that it is difficult for maintainers to keep up with issues. Having an example would help us quickly diagnose the problem, which most of the time are not bugs nor features requests, but simply misuse or lack of understanding of the library. Therefore the suggested channels (chat, stack overflow, mailing list) are much better suited for those cases.\n\nAnyway, if you can make an example (new-example.angular-formly.com) to reproduce the issue I can give you some feedback right here :smile: \n. From my understanding a data model with N levels of empty nested models should look like this:\n\n```\nX= {\n  Y: {\n    A: {\n      K: {}\n    },\n    B: {}\n  }\n}\n```\n\nSetting an empty model to `null` wouldn't make sense in this scenario, that's why formly defaults to an empty object `{}`. \n\nMaybe the issue is the way it's handled in your backend, what server technology do you use?\n. Fair enough, you have 2 options:\n1. Test, fix and submit a PR\n   - Unit tests around [here](https://github.com/formly-js/angular-formly/blob/master/src/directives/formly-field.test.js#L1614), [here](https://github.com/formly-js/angular-formly/blob/master/src/directives/formly-field.test.js#L1735), and [even here](https://github.com/formly-js/angular-formly/blob/master/src/directives/formly-form.test.js#L178)\n   - Change de code around [here](https://github.com/formly-js/angular-formly/blob/master/src/directives/formly-field.js#L316) and maybe in [formly-form.js](https://github.com/formly-js/angular-formly/blob/master/src/directives/formly-form.js) as well\n2. Transform your payload before sending it back to the backend. It would be trivial to use Underscore/Lodash for such task, a quick google search spit this out: http://stackoverflow.com/questions/14058193/remove-empty-properties-falsy-values-from-object-with-underscore-js\n. ping @kentcdodds (maybe Kent can provide valuable feedback :smile:)\n. LGTM http://www.downforeveryoneorjustme.com/http://docs.angular-formly.com/\n. Hi @Flascher! Thanks for your interest in angular-formly. I'm sure that angular-formly can do this for you. The best way to get help is by following the instructions here: http://help.angular-formly.com\n\nI'm going to go ahead and close this issue because the github issues for this project are reserved for bug reports and feature requests. See you on chat! Thanks!\n. Hi @Markoo08! Thanks for your interest in angular-formly. I'm sure that angular-formly can do this for you. The best way to get help is by following the instructions here: http://help.angular-formly.com\n\nI'm going to go ahead and close this issue because the github issues for this project are reserved for bug reports and feature requests. See you on chat! Thanks!\n. I want to publicly thank and congratulate @kentcdodds for his amazing work as angular-formly maintainer :clap: :tada: \n\nGood luck with your future projects and good luck with finding the right maintainer that angular-formly deserves :smile: \n\nCheers mate!\n. +1 more on custom templates, templateManipulators, wrappers\n. +1 (also for the sake of ping'ing @mikeerickson & trying: https://chrome.google.com/webstore/detail/github-%2B1s/lddfkkebajnpiicnpfamebilmhamkeme :smile: )\n. https://github.com/Thibaut/devdocs/wiki/Adding-documentations-to-DevDocs\n. This is a validation library for JSON-Schema: https://github.com/geraintluff/tv4\n. Wow never heard of that one, looks pretty awesome!\n. @Den-dp could you please test https://github.com/formly-js/angular-formly/pull/316 in an *nix environment since I don't have acces to one ATM\n. Wouldn't `key` property for fieldGroup make more sense?:\n\nJSBin: http://jsbin.com/tusubo/1/\n. Added both: https://github.com/formly-js/angular-formly/pull/314\n. Hi @kentcdodds !\n\nFor https://github.com/benoror/angular-formly/commit/629e758e347631f021e6bdd31919cbae2ec5391a the `local-examples/` demo works, but to be honest I'm not 100% sure my implementation is correct. Please take it with caution\n. Regarding package.json script update, you mean issue https://github.com/formly-js/angular-formly/issues/305?\n. Also,  https://github.com/benoror/angular-formly/commit/d8fd28150633f4eb9bfe36e2dce8d696b097ac2f and https://github.com/benoror/angular-formly/commit/e8a0c6a9da32e7f8b63a887f97de02ee2ecf156b added support for `key` property in fieldGroup, but again I'm not totally confident of my patch.\n\nDemo works but I had to comment-out one failing test. I guess I'm setting the `model` & `key` the wrong way (also considering the case for number-ish (index) keys).\n\nLet me know your thoughts. Regards!\n. It works like a charm, thanks @kentcdodds !\n\nBTW, would it be much trouble to support `key` property in fieldGroup? A use-case would be to support multi-level nested forms:\n\nModel:\n\n```\n    vm.formData = {\n          \"name\": \"John\",\n          \"address\": {\n              \"streetnum\": \"145 Elm St.\",\n              \"place\": {\n                \"state\": \"GA\",\n                \"city\": \"Atlanta\"\n              }\n          }\n    };\n```\n\nFields:\n\n```\n    vm.formFields = [\n      {\n        key: 'name',\n        type: 'input',\n        templateOptions: {\n          label: 'Name'\n        }\n      },\n      {\n        key: 'address',\n        fieldGroup: [\n          {\n            key: 'streetnum',\n            type: 'input',\n            templateOptions: {\n              label: 'Street Num'\n            }\n          },\n          {\n            key: 'place',\n            fieldGroup: [\n                {\n                    key: 'state',\n                    type: 'input',\n                    templateOptions: {\n                      label: 'State'\n                    }\n                },\n                {\n                    key: 'city',\n                    type: 'input',\n                    templateOptions: {\n                      label: 'City'\n                    }\n                }\n            ]\n          }\n        ]\n      }\n    ];\n```\n. Wouldn't that be akward/counterintuitive?\n\n```\n    vm.formFields = [\n      // ...\n      {\n        model: 'model.address',\n        fieldGroup: [\n          // ...\n          {\n            model: 'model.address.place',\n            fieldGroup: [\n                // ...\n            ]\n          }\n        ]\n      }\n    ];\n```\n\n**_Update**_: Another benefit of having a `key` string is that it remains untouched at runtime (as opposed to a `model` string), allowing to retrieve the original structure. Ex. use-case: [getting $dirty fields from nested forms](https://gist.github.com/benoror/d845d5ae16c176e090d8#file-dirty-fields-js-L26)\n. Wow [that was fast](https://github.com/formly-js/angular-formly/commit/67065e9cad7e9d05e38f32014f2688364daa9b17) @kentcdodds ! I was already working on it but was nowhere near, you saved my day!,Thanks!\n. Sorry for the mess @kentcdodds , I'm still struggling to learn OSS collaboration procedures.\n\nI'll try again as soon as I have an Unix environment available, BTW this situation **must** have been faced by many other projects, I'll investigate\n\n**_Update**_: Seems that [using a middleware](http://stackoverflow.com/questions/24636049/npm-make-package-json-work-under-both-unix-mac-osx-and-windows) to handle it may be the most viable option\n. There are a lot of examples in the webpage, you can use a formly watcher:\n\nhttp://angular-formly.com/#/example/field-options/watchers\n\nOr as @siddharthkchatterjee said, you can use `$scope.$watch` in the controller\n\nThere are many alternatives since angular-formly is quite flexible, use the one that suits your needs. :smile: \n. The best way to get help is to **get a failing example in jsbin/jsfiddle/...** and **then** ask in [gitter.im/formly-js/angular-formly](https://gitter.im/formly-js/angular-formly)\n\nAlso take a look at [Questions/Help](https://github.com/formly-js/angular-formly/blob/master/CONTRIBUTING.md#questionshelp) section and the [corresponding video](https://www.youtube.com/watch?v=Kw9fVgc3Tzk&index=6&list=PLV5CVI1eNcJi7lVVIuNyRhEuck1Z007BH)\n. For anyone wondering here's an example: http://jsbin.com/jinaca/1/edit?js,output\n. Agree, this was something I personally faced when learning angular-formly and having used formController before.\n. You might want to take a look at:\n- https://github.com/johnpapa/angular-styleguide#controllers\n- https://github.com/toddmotto/angularjs-styleguide#controllers\n. Hi! I'm a the author of the [original example](angular-formly.com/#/example/integrations/ui-select).\n\nThanks for spotting the issue, it looks like the problem is with [ui-select](https://github.com/angular-ui/ui-select), could you isolate the example without involving angular-formly at all?\n\nMaybe then we can open an issue in ui-select's repo :smile: \n\nThanks!\n. :smile: \n. > <canned-message>\n> \n> Thanks for your interest in angular-formly. The issues are for bug reports/feature requests, so I'm going to go ahead and close this issue. If you have a question or need help, please [watch this screencast](https://www.youtube.com/watch?v=NXqFiSeBE-M&list=PLV5CVI1eNcJi7lVVIuNyRhEuck1Z007BH) for an explination of the most effective/proper way to get help using angular-formly.\n> \n> Summarized:\n> 1. [Learn angular-formly basics](http://learn.angular-formly.com/)\n> 2. [Check the examples](http://angular-formly.com/)\n> 3. [Reproduce the issue](http://new-example.angular-formly.com/)\n> 4. [Ask on Stack Overflow](http://stackoverflow.com/questions/tagged/angular-formly)\n> 5. [Ask on the mailing list](http://mailing-list.angular-formly.com/)\n> 6. [Ask on Chat](http://chat.angular-formly.com/)\n> \n> P.S. sorry for the canned message, this just happens a lot :smile:\n> \n> </canned message>\n\n**Cascaded Select Example**: http://jsbin.com/jinaca/1/edit?js,output\n. I just happen to answer that issue a few days ago: https://github.com/formly-js/angular-formly/issues/326#issuecomment-109312896\n\nThis has been asked before few times (including me), @kentcdodds shall we add this example to [the website examples](https://github.com/formly-js/angular-formly-website)?\n. http://angular-formly.com/#/example/other/cascaded-select\n. Fixed, I had an empty object appended at the end of the dummy DataService. Anyway, it wouldn't matter for a real ajax service.\n. No problemo :smile: \n. Actually many other JSBin examples are throwing the same error\n\nOn Wed, Aug 19, 2015, 06:14 Ian Hitchcox notifications@github.com wrote:\n\n> Can you fix the example? It's complaining about you using https while\n> embedding.\n> \n> I can access it by going to http://jsbin.com/jinaca but there's no\n> explanation or source.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/345#issuecomment-132550230\n> .\n> \n> ## \n\nSent from my phone (sorry for possible typos)\nBenjamin Orozco - benoror.com\n. Cool! I have some doubts regarding the tests, you said `name` could be set both on the **scope** and the **field options object**. I'm not sure that both are correctly tested\n. Oops it seems building failed because of `sinion.js` issues\n. Ok, so the tests look good as well? https://github.com/formly-js/angular-formly/pull/346#issuecomment-110844936\n. I can do that!\n. Done, I'm not sure if that's the proper place to test it\n. Great, let me rewrite it for a better organization\n. ready!\n. no prob, glad to be helpful! :hand: \n. The output looks like that because stdout is streamed directly to `console.log`.\n\nMaybe directly using `process.stdout.write` [can fix it](http://stackoverflow.com/questions/6157497/node-js-printing-to-console-without-a-trailing-newline).\n\nI'll try again tomorrow ASAP, as I will optimize the code for all scripts :)\n. I fixed it accordingly, but the introduction of `--config $npm_package_webpack` breaks the script, how should be handled?\n. Ok, let me know if this works for you, so I can extend it for most scripts :smile: \n. Sounds good! Let me create a repo and a beta version of it :+1: \n. Would this kind arrangement look ok? or is it too verbose?\n\n```\n{\n  \"scripts\": {\n    \"build:dist\": \"better-npm-run\",\n    \"test\": \"better-npm-run\"\n  },\n  \"betterScripts\": {\n    \"build:dist\": {\n        \"command\": \"webpack --config $npm_package_webpack --progress --colors\",\n        \"env\": {\n            \"NODE_ENV\": \"development\"\n        }\n    },\n    \"build:prod\": {\n        \"command\": \"webpack --config $npm_package_webpack --progress --colors\",\n        \"env\": {\n            \"NODE_ENV\": \"production\"\n        }\n    },\n    \"build\": [\n        {\n            \"run\": \"build:dist\"\n        },\n        {\n            \"run\": \"build:prod\"\n        }\n    ],\n    //...\n    \"test\": {\n        \"command\": \"karma start\",\n        \"env\": {\n            \"NODE_ENV\": \"test\"\n        }\n    }\n  }\n}\n```\n. Okey, already created a draft version at [github.com/benoror/better-npm-run](https://github.com/benoror/better-npm-run).\n\nRight now I don't have any project that could use it, but if you think it has potential to be used by angular-formly or anything-else in the future let me know.\n. Hey that's great @kentcdodds! :smile: considering that I wrote the draft on-the-go this afternoon.\n\nAnyway, please let me know if you have a particular use-case or idea for extending its functionality, I opened a general issue for brainstorming: https://github.com/benoror/better-npm-run/issues/1\n\nRegards!\n. Can you provide a JSBin example (as explained in [CONTRIBUTING.md](https://github.com/formly-js/angular-formly/blob/master/CONTRIBUTING.md#reporting-bugs--requesting-features)) using [template-wrappers](http://angular-formly.com/#/example/advanced/template-wrappers) along with [fieldGroups](http://docs.angular-formly.com/v6.4.0/docs/field-groups)?\n. Shouldn't it just rely on NgModelController's `$parsers` & `$formatters` existing functionality?\n\nhttps://docs.angularjs.org/api/ng/type/ngModel.NgModelController#$parsers\n. My toughts:\n1. Since \"_The functions are called in reverse array order_\" I think the ones in `defaultOptions` should have more precedence, therefore should be **pushed _last_**\n2. Since pushing a function with the same name won't override it, I see 2 possible opts:\n   1. A simple mechanism to override `defaultOptions` when specifying the **same name** (acting more like an object)\n   2. Use of ID's to specify overriding\n. Although this is an edge (but maybe not too unrealistic) example, I agree, as this is what I would expect from an execution-order standpoint: the more specific a {parser,formatter} is, the later it should be applied.\n. You shall use **Expression Properties** as explained here:\n\nhttp://angular-formly.com/#/example/field-options/expression-properties\n\nHere's a working example:\n\nhttp://jsbin.com/kigozo/edit?html,js,console,output\n. Because it's async, here's a good article explaining it: http://blog.carbonfive.com/2013/10/27/the-javascript-event-loop-explained/\n. Do you mind creating an example of what you're trying to accomplish? Please follow the instructions here: http://help.angular-formly.com\n\nThis will make it easier for you to get help. Because the github issues are reserved for bug reports and feature requests, I'm going to go ahead and close this issue. See you on chat! Thanks!\n. You're not @kentcdodds, I was deceived by an outdated version of formly and [incomplete documentation](http://docs.angular-formly.com/docs/field-groups).\n\nSorry for the false negative (mondays.. (-, - )\u2026zzzZZZ), you can close the issue now.\n\nBTW, Still looking forward for [that blog post](https://twitter.com/kentcdodds/status/621691930527707136) regarding `npm config set save-exact=true`, `next-update`, etc \n\n# ( \u0361~ \u035c\u0296 \u0361\u00b0)\n. Hey @BartVDACodeware !\n\nWhat happened in the end? Did you find a workaround?\n\nI think I'm having a similar issue with another **Tree** project: https://github.com/ceolter/ag-grid/issues/533\n\nThanks! :smiley_cat: \n. Supposing I succeeded figuring out your cryptic message, I guess what you're looking for is **custom templates**: http://docs.angular-formly.com/docs/custom-templates\n. @estaub angular-formly is **agnostic regarding template/controls/widgets rendering**. You could implement multiselect/tagging by yourself, or **easily adapt an existing solution using custom templates**, [as explained in the documentation](http://docs.angular-formly.com/docs/custom-templates).\n\nFor multiselect/tagging I've seen that [ui-select](https://github.com/angular-ui/ui-select) supports it, and I will implement it eventually for my project (which should be rather easy considering an existing example [like this](http://angular-formly.com/#/example/integrations/ui-select)), but there should be plenty of different alternatives, in the end JavaScript kinda popular these days :smile: \n. @estaub don't worry, a quick search threw me around 3k results:\nhttps://github.com/search?l=JavaScript&q=tagging&ref=searchresults&type=Repositories&utf8=%E2%9C%93\n\nBTW, let me know whenever you've found a good candidate and implemented a custom template!\n\nGood luck!\n. @gentledepp https://github.com/formly-js/angular-formly/commit/2cb7d2e8758a78fd083e257d57ea9dddd588a1ae#diff-4830f282e0aa2d5c786eb691f55beb43R2095\n\nDocs: http://docs.angular-formly.com/docs/field-configuration-object#extras-object\n. Hi @nomack84, warm welcome to Cuba! I recently had a similar requirement, but unfortunately `fieldGroups` doesn't support template wrappers.\n\nBut I achieved the same result making use of the `data` property inside a **custom type called `nested`**, take a look: http://jsbin.com/zaqeke\n\nAlso @kentcdodds came with a slightly different approach, **by using two fields arrays**, take a look: http://jsbin.com/setupi\n\n@kentcdodds shall I submit it as an example for the website?\n. @netowp in the JSBin it's included inside an script tag, since JSBin doesn't support multiple files afaik:\n\n```\n<script type=\"text/ng-template\" id=\"panel.html\">\n...\n</script>\n```\n\nIn your project you'll likely have it in a **separate file**, or if you'd like yo might use ES6 multi-line strings, like this:\n\n```\n    formlyConfigProvider.setWrapper({\n      name: 'panel',\n      template: `\n          ...\n      `\n    });\n```\n. It's almost certainly [better-npm-run](https://github.com/benoror/better-npm-run)'s fault, as it was a quick hack I didn't paid enough attention to the way **stderr** should be handled in the callback.\n\nI opened the following issue, could you elaborate on it?\n\nhttps://github.com/benoror/better-npm-run/issues/6\n\nThanks!\n. As I pm'd you, I don't feel savvy enough with angular-formly codebase/testing.\n\nNevertheless I might be able to help filtering worthy issues, commenting on them & closing the redundat ones.\n\n### **I would like to publicly reiterate my appreciation for your hard work on the project**\n\n## Kudos :+1: and all the best wishes :family:\n. count with me :+1: \n. Unfortunately fieldGroup doesn't support wrappers, and adding them would mean adding complexity to angular-formly.\n\nFortunately there's a simple way to accomplish the same results using custom templates.\n\nDid you take a look at the nested-form example?:\n\nhttp://angular-formly.com/#/example/other/nested-formly-forms\n. Done!\n. @holtjonathan I agree, having wrapper support for fieldgroups would simplify things\n. > @benoror Thanks for sharing the example. I noticed that you have used wrapper as panel.\r\n> Is there a list of possible wrappers that can be used?\r\n\r\n@jayasrinagrale Any template can be used using `setWrapper`, please refer to the stack overflow link and the provided example. Hi @Javammer, Thanks for your interest in angular-formly. Do you mind creating an example of what you're trying to accomplish? The best way to get help is by following the instructions here: http://help.angular-formly.com\n\nI'm going to go ahead and close this issue because the github issues for this project are reserved for bug reports and feature requests. See you on chat! Thanks!\n. Hi @Luddinus ! Thanks for your interest in angular-formly. I'm sure that angular already handle this. The best way to get help is by following the instructions here: http://help.angular-formly.com\n\nI'm going to go ahead and close this issue because the github issues for this project are reserved for bug reports and feature requests. See you on chat! Thanks!\n. @Luddinus you can pass a function to the form with `ng-submit`, and do some pre-processing there (before hitting the backend):\n\n```\n  <form ng-submit=\"vm.onSubmit()\" name=\"vm.form\" novalidate>\n    <formly-form model=\"vm.model\" fields=\"vm.fields\" options=\"vm.options\" form=\"vm.form\">\n      <!-- ... -->\n    </formly-form>\n  </form>\n```\n\nMore info: https://docs.angularjs.org/api/ng/directive/ngSubmit\n. Hi @TheBekker! Thanks for your interest in angular-formly. I'm sure that angular-formly can do this for you. The best way to get help is by following the instructions here: http://help.angular-formly.com\n\nI'm going to go ahead and close this issue because the github issues for this project are reserved for bug reports and feature requests. See you on chat! Thanks!\n. Hi @eliagentili! Thanks for your interest in angular-formly. I'm sure that angular-formly can do this for you. The best way to get help is by following the instructions here: http://help.angular-formly.com\n\nI'm going to go ahead and close this issue because the github issues for this project are reserved for bug reports and feature requests. See you on chat! Thanks!\n. @eliagentili did you try using several `<formly-form>` tags in your template?\n. Done, thanks for letting me know!\n. @brutalcrozt Try with a recent version of Node 4.\\* or even 5.\\* :smile: \n. Calling `vm.options.resetModel()` doesn't seem to propagate to nested `formly-form`'s (However stuff like **`vm.form`** seem to be correctly inherited).\n- http://docs.angular-formly.com/docs/formly-form#section-resetmodel-and-updateinitialvalue\n\nIf I bind the `options` variable to the template now `resetModel()` resets the nested fields, although ignoring the outer scope fields, see example: http://jsbin.com/zaqeke/18/edit?html,js,output\n. @kentcdodds Do you think this can be fixed in angular-formly itself (maybe related to https://github.com/formly-js/angular-formly/issues/465) ?\n\nOr it might be related to the way angular handles nested forms, something along the lines of\nhttps://github.com/angular/angular.js/pull/11023\n\n**Update**: [This seems to work for fieldGroup's](https://github.com/formly-js/angular-formly/blob/34015c79b1229f13bbcc5f53aaa448e4deb6709d/src/directives/formly-form.test.js#L262). I'm going to write some tests \n. Ok I wrote [a failing test for this issue](https://gist.github.com/benoror/92cda91c27d7abcf568d/revisions#diff-265f25365653e7c36b4cc483a5663ce1R231): \n\n```\nexpected { innerField: 'zab' } to deeply equal { innerField: 'bar' }\n```\n\nI suspect this is related to nested keys handling https://github.com/formly-js/angular-formly/issues/426, any hint where should I look at?\n. @MCKRUZ you're right! :smile_cat: \n\nTherefore instead of messing up with `data` a cleaner solution would be to _use a wrapper around a_ **_fieldGroup**_, which is something already **planned to implement in https://github.com/formly-js/angular-formly/issues/486** :tada: (although support for `templateOptions` should be also considered, in order to customize panel's title)\n\nJSBin example: http://jsbin.com/zaqeke/20/edit?html,js,output\n\n@kentcdodds What do you think? Using something already proven (like fieldGroup) sounds better that reinventing the wheel IMHO\n. I believe I managed to fix this, along with #486 \n\ndo you mind checking out a working example at  http://jsbin.com/zaqeke/21/edit?html,js,output\n. Closed via https://github.com/formly-js/angular-formly/pull/529\n. :smile: np\n. Rollback the JSBin revision number\n\nOn Thu, Oct 29, 2015, 12:04 holtjonathan notifications@github.com wrote:\n\n> Odd question, do you happen to have the old example of how your nested\n> form example worked? I am curious to see what all was changed.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/pull/529#issuecomment-152268016\n> .\n> \n> ## \n\nSent from my phone (sorry for possible typos)\nBenjamin Orozco - benoror.com\n. Nice :+1: \n. > Do you mind creating an example of what you're trying to accomplish? Please follow the instructions here: http://help.angular-formly.com\n> \n> This will make it easier for you to get help. Because the github issues are reserved for bug reports and feature requests, I'm going to go ahead and close this issue. See you on chat! Thanks!\n. Don't worry :smile:\n. Do you mind creating an example of what you're trying to accomplish? Please follow the instructions here: http://help.angular-formly.com\n. :+1:\n. Do you mind creating an example of what you're trying to accomplish? Please follow the instructions here: http://help.angular-formly.com\n\nThis will make it easier for you to get help. Because the github issues are reserved for bug reports and feature requests, I'm going to go ahead and close this issue. See you on chat! Thanks!\n. Hi @asaf050! Thanks for your interest in angular-formly. I'm sure that angular-formly can do this for you. The best way to get help is by following the instructions here: http://help.angular-formly.com\n\nI'm going to go ahead and close this issue because the github issues for this project are reserved for bug reports and feature requests. See you on chat! Thanks!\n. Do you mind creating an example of what you're trying to accomplish? Please follow the instructions here: http://help.angular-formly.com\n\nThis will make it easier for you to get help. Because the github issues are reserved for bug reports and feature requests, I'm going to go ahead and close this issue. See you on chat! Thanks!\n. @ValentinH Hi, I just tested http://jsbin.com/zoyiletefa/1/edit?js,output and **Reset** works fine, can you still replicate it?\n\nRegarding @sasikumardr I can confirm both malfunctions. I suspect his might be a **bug related to resetModel() with Array's**\n. I'm going to go ahead and close this issue.\n. I'm sure that angular-formly can do this for you. The best way to get help is by following the instructions here: http://help.angular-formly.com\n\nI'm going to go ahead and close this issue because the github issues for this project are reserved for bug reports and feature requests. See you on chat! Thanks!\n. Do you mind creating an example of what you're trying to accomplish? Please follow the instructions here: http://help.angular-formly.com\n\nThis will make it easier for you to get help. Because the github issues are reserved for bug reports and feature requests, I'm going to go ahead and close this issue. See you on chat! Thanks!\n. Hi @bondarewicz! Thanks for your interest in angular-formly. I'm sure that angular-formly can do this for you. The best way to get help is by following the instructions here: http://help.angular-formly.com\n\nAlso, do you mind creating an example of what you're trying to accomplish? Please follow the instructions here: http://help.angular-formly.com\n\nI'm going to go ahead and close this issue because the github issues for this project are reserved for bug reports and feature requests. See you on chat! Thanks!\n. Hi @tiagocedrim! Thanks for your interest in angular-formly. I'm sure that angular-formly can do this for you. The best way to get help is by following the instructions here: http://help.angular-formly.com\n\nI'm going to go ahead and close this issue because the github issues for this project are reserved for bug reports and feature requests. See you on chat! Thanks!\n. You can set `type` attribute to [default input templates](https://github.com/formly-js/angular-formly-templates-bootstrap/blob/master/src/types/input.js) this way:\n\n```\n    defaultOptions: {\n      templateOptions: {\n        type: 'file'\n      }\n    }\n```\n\n```\n    defaultOptions: {\n      templateOptions: {\n        type: 'color'\n      }\n    }\n```\n\nFor more information on HTML Input Types see: http://www.w3schools.com/htmL/html_form_input_types.asp\n. Hi @tuckerjt07! Thanks for your interest in angular-formly. I'm sure that angular-formly can do this for you. The best way to get help is by following the instructions here: http://help.angular-formly.com\n\nI'm going to go ahead and close this issue because the github issues for this project are reserved for bug reports and feature requests. See you on chat! Thanks!\n. I saw you replaced the model for each key, therefore you never saw the changes.\n\nWhat you need to do is to **match the model in the key itself**.\n\nSee corrected example: http://jsbin.com/pupijoc/1/edit?js,console,output\n. Answered in SO: http://stackoverflow.com/a/34185058/171809\n. Hi @gizburdt!\n\nDo you mind creating an example of what you're trying to accomplish? Please follow the instructions here: http://help.angular-formly.com\n\nThis will make it easier for you to get help. Because the github issues are reserved for bug reports and feature requests, I'm going to go ahead and close this issue. See you on chat! Thanks!\n. @gizburdt Would't something like this be sufficient?\n\n```\nvm.map.addListener('center_changed', function(e){\n    c = vm.map.getCenter()\n    vm.model.latitude = c.latitude\n    vm.model.longitude = c.longitude\n});\n```\n. That's a suggestion, it's hard for me to guess your implementation. \nAn example would be suitable to get help :smile: \n. You are not even loading Angular. Please follow this template: [new-example.angular-formly.com](http://new-example.angular-formly.com/)\n. Sure no problem :smile:, you had many typos and basic mistakes regarding angular itself and angular-formly. I fixed some of them: https://jsbin.com/tuwuyo/1/edit?html,js,console,output\n\nIf you want me to explain them let me know  in Gitter. See you on chat!\n. Np :smile:\n. Hi @austinstudio! Thanks for your interest in angular-formly. I'm sure that angular-formly can do this for you. Also, do you mind **creating an example** of what you're trying to accomplish?. The best way to get help is by following the instructions here: http://help.angular-formly.com\n\nI'm going to go ahead and close this issue because the github issues for this project are reserved for bug reports and feature requests. See you on chat! Thanks!\n. Ok, gonna fix it now\n. done! :clap: \n. Hi @zorzysty! Thanks for your interest in angular-formly. It's not clear why would you need to set the [ui-mask](https://github.com/angular-ui/ui-mask) to `undefined`, so it's hard to identify this as a bug or feature request. The best way to get help is by following the instructions here: http://help.angular-formly.com\n\nThis will make it easier for you to get help. Because the github issues are reserved for bug reports and feature requests, I'm going to go ahead and close this issue. See you on chat! Thanks!\n. Take a look at the example using a `watcher` instead: http://jsbin.com/sukoga/1/edit?js,console,output\n. This looks **related to: https://github.com/formly-js/angular-formly/issues/586**\n\nDo you mind creating an example? Please follow the instructions here: http://help.angular-formly.com\n. This  is weird, feel free to investigate further and submit a PR if you find the issue.\n. This is not handled by angular-formly, but by the 3rd party wizard directive\n\nIn their docs you can read how they handle step validation: https://github.com/mgonto/angular-wizard#wizard-step-validation\n\nFixed example: http://jsbin.com/fexuji/1/edit?html,js,console,output\n. :smile:\n. Do you mind creating an example of what you're trying to accomplish? Please follow the instructions here: http://help.angular-formly.com\n. Hi @estvmachine! Thanks for your interest in angular-formly. I'm sure that this issue is not mcaused by angular-formly.\n\nI'm going to go ahead and close this issue because the github issues for this project are reserved for bug reports and feature requests. See you on chat! Thanks!\n. @estvmachine a google search gave me these related issues:\n- https://github.com/mgcrea/angular-strap/issues/1473\n- https://github.com/tamtakoe/oi.select/issues/10\n\nIndeed downgrading to Angular 1.3 gets rid of the error:\n- http://jsbin.com/nayoquduve/1/edit?html,js,console,output\n\nCheers!\n. Do you mind creating an example of what you're trying to accomplish? Please follow the instructions here: http://help.angular-formly.com\n\nThis will make it easier for you to get help. Because the github issues are reserved for bug reports and feature requests, I'm going to go ahead and close this issue. See you on chat! Thanks!\n. Do you mind creating an example of what you're trying to accomplish? Please follow the instructions here: http://help.angular-formly.com\n\nThis will make it easier for you to get help. Because the github issues are reserved for bug reports and feature requests, I'm going to go ahead and close this issue. See you on chat! Thanks!\n. Hi @hardikkaji! Thanks for your interest in angular-formly. I'm sure that angular-formly can do this for you. The best way to get help is by following the instructions here: http://help.angular-formly.com\n\nI'm going to go ahead and close this issue because the github issues for this project are reserved for bug reports and feature requests. See you on chat! Thanks!\n. @hardikkaji take a look at: http://www.w3schools.com/tags/att_select_disabled.asp\n. Hi @pequenopadre! Thanks for your interest in angular-formly. I'm sure that angular-formly can do this for you. The best way to get help is by following the instructions here: http://help.angular-formly.com\n\nI'm going to go ahead and close this issue because the github issues for this project are reserved for bug reports and feature requests. See you on chat! Thanks!\n. # Simple solution\n\nHTML5 Input Types\n- http://www.w3schools.com/tags/att_input_type.asp\n- http://www.w3schools.com/html/html_form_input_types.asp\n\n# Formly solution\n\nCustom validators\n- https://egghead.io/lessons/angularjs-angular-formly-custom-validation?pl=7\n- http://docs.angular-formly.com/docs/validation\n- http://angular-formly.com/#/example/advanced/validators\n- http://docs.angular-formly.com/docs/formly-custom-validation\n. @kamilkisiela super! :+1: \n. I did, I forgot that github doesn't notify PR updates \n. Np, give me a moment :smile:\n. @kamilkisiela Apparently the last PR changed apiCheck for watchers, among other stuff, thus now I get some unit tests failing.\n\nSorry, this merge is going to take a bit more time, feel free to try it yourself meanwhile\n. @kamilkisiela Great! :smile: \n\nYou reverted some of the changes, for example: [I introduced watcherChecker](https://github.com/formly-js/angular-formly/commit/b2781ef454835268c6c595840243c485ee00e357#diff-07752bb803b21dd1aadc5838eaaf7744R186), then you [reverted it back](https://github.com/formly-js/angular-formly/commit/28c648dc83cb75ded78e5d984a81cfd19c544e1c#diff-07752bb803b21dd1aadc5838eaaf7744R187) :cry: \n\nSince you also introduced several more commits, do you mind cleaning the git history a little bit?\n\nThanks!\n. maybe the new `runFieldExpressions` property should be in both places?\n. @kamilkisiela thanks a lot! :tada: \n. Do you mind creating an example of what you're trying to accomplish? Please follow the instructions here: http://help.angular-formly.com\n\nThis will make it easier for you to get help. Because the github issues are reserved for bug reports and feature requests, I'm going to go ahead and close this issue. See you on chat! Thanks!\n. Do you mind creating an example of what you're trying to accomplish? Please follow the instructions here: http://help.angular-formly.com\n\nThis will make it easier for you to get help. Because the github issues are reserved for bug reports and feature requests, I'm going to go ahead and close this issue. See you on chat! Thanks!\n. Hi @koraybalci , The reason is that it is difficult for maintainers to keep up with issues. Having an example would help us quickly diagnose the problem, which most of the time are not bugs nor features requests, but simply misuse or lack of understanding of the library. Therefore the suggested channels (chat, stack overflow, mailing list) are much better suited for those cases.\n\nAnyway, if you can make an example (new-example.angular-formly.com) to reproduce the issue I can give you some feedback right here :smile: \n. From my understanding a data model with N levels of empty nested models should look like this:\n\n```\nX= {\n  Y: {\n    A: {\n      K: {}\n    },\n    B: {}\n  }\n}\n```\n\nSetting an empty model to `null` wouldn't make sense in this scenario, that's why formly defaults to an empty object `{}`. \n\nMaybe the issue is the way it's handled in your backend, what server technology do you use?\n. Fair enough, you have 2 options:\n1. Test, fix and submit a PR\n   - Unit tests around [here](https://github.com/formly-js/angular-formly/blob/master/src/directives/formly-field.test.js#L1614), [here](https://github.com/formly-js/angular-formly/blob/master/src/directives/formly-field.test.js#L1735), and [even here](https://github.com/formly-js/angular-formly/blob/master/src/directives/formly-form.test.js#L178)\n   - Change de code around [here](https://github.com/formly-js/angular-formly/blob/master/src/directives/formly-field.js#L316) and maybe in [formly-form.js](https://github.com/formly-js/angular-formly/blob/master/src/directives/formly-form.js) as well\n2. Transform your payload before sending it back to the backend. It would be trivial to use Underscore/Lodash for such task, a quick google search spit this out: http://stackoverflow.com/questions/14058193/remove-empty-properties-falsy-values-from-object-with-underscore-js\n. ping @kentcdodds (maybe Kent can provide valuable feedback :smile:)\n. LGTM http://www.downforeveryoneorjustme.com/http://docs.angular-formly.com/\n. Hi @Flascher! Thanks for your interest in angular-formly. I'm sure that angular-formly can do this for you. The best way to get help is by following the instructions here: http://help.angular-formly.com\n\nI'm going to go ahead and close this issue because the github issues for this project are reserved for bug reports and feature requests. See you on chat! Thanks!\n. Hi @Markoo08! Thanks for your interest in angular-formly. I'm sure that angular-formly can do this for you. The best way to get help is by following the instructions here: http://help.angular-formly.com\n\nI'm going to go ahead and close this issue because the github issues for this project are reserved for bug reports and feature requests. See you on chat! Thanks!\n. I want to publicly thank and congratulate @kentcdodds for his amazing work as angular-formly maintainer :clap: :tada: \n\nGood luck with your future projects and good luck with finding the right maintainer that angular-formly deserves :smile: \n\nCheers mate!\n. ",
    "Olgagr": ":+1: \n. :+1: \n. ",
    "geoervin": "+1 more on custom templates, templateManipulators, wrappers\n. +1 more on custom templates, templateManipulators, wrappers\n. ",
    "timur": "+1\n. +1\n. ",
    "shorstki": "I've watched videos and read expressionProperties doc, also checked ngModelElAttrs but still I'm wondering how to change field value after other field changes without watchers in page controller - which looks dirty.\nI thought that hideExpression will do the job, but it only hides the field and it's value is still in model. It should be removed then (at least in my case). Is there easy way to do that?\n\nSo +1 to any non-trivial (real life) examples\n. I've watched videos and read expressionProperties doc, also checked ngModelElAttrs but still I'm wondering how to change field value after other field changes without watchers in page controller - which looks dirty.\nI thought that hideExpression will do the job, but it only hides the field and it's value is still in model. It should be removed then (at least in my case). Is there easy way to do that?\n\nSo +1 to any non-trivial (real life) examples\n. ",
    "DeveBj": "hey, if you could put a lesson on validating the JSON's in angular formly by angularjs directives mostly a single directive used for checking the 2 fields will be better from my side \n. hello, it got resolved, now am stuck up with the validation part, I have created a jquery Ui datepicker directive which am applying it to the JSON file like this \n\"ngModelAttrs\": {\n                    \"datePicker\": {\n                        \"attribute\": \"date-picker\"\n                    }}\nit's working fine, am using this directive for both From and To date, I need to validate that To date must not be lesser than the From date (ie: To Date must be greater than the From Date ), for this I have created a DIrective and it's working finr in Plain HTML Elements, in the HTML input elements am assigning the To date ng-model to the validation directive in the From date lets say like this: \n\n```\n<input type=\"text\" ng-model=\"fromdate\" valueupdate=\"fromdate\"  datepicker datecheck=\"todate\" />\n  <input type=\"text\" ng-model=\"todate\" datepicker   />\n```\n\nIf you see in the above code of from date am introducing a attribute called valueupdate and my ditrective name for checking the from and to date in datecheck, am assigning the To date ng-model to the from date datecheck directive like this datecheck=\"todate\", I need to do this in the JSON file to apply that datecheck validation directive, Please help me in this regards\n. hey, if you could put a lesson on validating the JSON's in angular formly by angularjs directives mostly a single directive used for checking the 2 fields will be better from my side \n. hello, it got resolved, now am stuck up with the validation part, I have created a jquery Ui datepicker directive which am applying it to the JSON file like this \n\"ngModelAttrs\": {\n                    \"datePicker\": {\n                        \"attribute\": \"date-picker\"\n                    }}\nit's working fine, am using this directive for both From and To date, I need to validate that To date must not be lesser than the From date (ie: To Date must be greater than the From Date ), for this I have created a DIrective and it's working finr in Plain HTML Elements, in the HTML input elements am assigning the To date ng-model to the validation directive in the From date lets say like this: \n\n```\n<input type=\"text\" ng-model=\"fromdate\" valueupdate=\"fromdate\"  datepicker datecheck=\"todate\" />\n  <input type=\"text\" ng-model=\"todate\" datepicker   />\n```\n\nIf you see in the above code of from date am introducing a attribute called valueupdate and my ditrective name for checking the from and to date in datecheck, am assigning the To date ng-model to the from date datecheck directive like this datecheck=\"todate\", I need to do this in the JSON file to apply that datecheck validation directive, Please help me in this regards\n. ",
    "m-esm": "+1 \r\n. +1 \r\n. ",
    "DevanB": "Oops wrong user ;) \r\n\r\n@DeveBj - check out @kentcdodds comment above :). @kentcdodds \n\nOkay. I definitely didn't squash (couldn't get it working). Just reseted, recommitted, and force pushed.\n\nI _think_ it is all correct now.\n. Yeah, go for it! It was a great feeling having accomplished that :)\n\nOn Tue, Aug 4, 2015 at 9:45 AM, Kent C. Dodds notifications@github.com\nwrote:\n\n> Hey @DevanB https://github.com/DevanB, I'm writing a blogpost that\n> references this PR, do you mind if I reference you in it?\n> https://medium.com/@kentcdodds/78281ea47455\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/pull/401#issuecomment-127637843\n> .\n\n## \n\nDevan Beitel\n. Oops wrong user ;) \r\n\r\n@DeveBj - check out @kentcdodds comment above :). @kentcdodds \n\nOkay. I definitely didn't squash (couldn't get it working). Just reseted, recommitted, and force pushed.\n\nI _think_ it is all correct now.\n. Yeah, go for it! It was a great feeling having accomplished that :)\n\nOn Tue, Aug 4, 2015 at 9:45 AM, Kent C. Dodds notifications@github.com\nwrote:\n\n> Hey @DevanB https://github.com/DevanB, I'm writing a blogpost that\n> references this PR, do you mind if I reference you in it?\n> https://medium.com/@kentcdodds/78281ea47455\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/pull/401#issuecomment-127637843\n> .\n\n## \n\nDevan Beitel\n. ",
    "cdbizone": "http://jsbin.com/fohifojoso/2/edit?html,console \n. for example if we have an iframe that should be rendered only if form has valid state and src attr depends on form field values, it starts to load iframe with incorect src (catch this bug in firefox)\n. we need some posibility to find out that all inputs have been added to form\n. we have next workflow: \nangular finds tag form. He said. Ok! I know this directive. there is no input with ng-model attr inside of it so i marked it as valid, than formly-form starts to interact. Hold on man, there are some inputs in this form  , they have some validation that you should know about it. Oh ok, now i see form is invalid.\n\nWith the static form we haven't this issue\n. http://jsbin.com/fohifojoso/2/edit?html,console \n. for example if we have an iframe that should be rendered only if form has valid state and src attr depends on form field values, it starts to load iframe with incorect src (catch this bug in firefox)\n. we need some posibility to find out that all inputs have been added to form\n. we have next workflow: \nangular finds tag form. He said. Ok! I know this directive. there is no input with ng-model attr inside of it so i marked it as valid, than formly-form starts to interact. Hold on man, there are some inputs in this form  , they have some validation that you should know about it. Oh ok, now i see form is invalid.\n\nWith the static form we haven't this issue\n. ",
    "ValentinH": "Awesome! :)\n. Thanks but I don't understand:\n- the doc states that form is `The variable to bind the NgFormController to.` but now  it is only the name of the form. Is it normal?\n. Indeed it works! Thanks for your reactiveness ;)\n. Yes that's what I was doing...\n. OK I understand. What is the best way to reset a form then?\n. I think they are 2 cool options! ;) \n\nHowever, with this beta, my code broke! :D But it was because I was using the forms inside a popup toggled with ng-show, and my model was null at the beginning (I was using the null value to show/hide the popup). So I had the idea to use ng-if instead, and miraculously, my previous problem of models not being reset was gone even without using resetModel()! ^^\n\nThen I am wondering if the resetModel method wouldn't be a good place to reset the validation.show flags if they were set after the form initialization. What do you think?\n. Yeap it is OK for me.\n. @kentcdodds What is the reason behind the `|| modelValue` ?\n. Because if it was to prevent an undefined value, a `angular.isDefined(viewValue) ? viewValue : modelValue` would be safer...\n. Indeed, the example you mentionned works as expected but it required quite a lot of code to display a simple range slider.\n\nThe original example (where reset does not work) is the following: http://jsbin.com/vudameneko/1/edit?js,output .\n. Awesome! :)\n. Thanks but I don't understand:\n- the doc states that form is `The variable to bind the NgFormController to.` but now  it is only the name of the form. Is it normal?\n. Indeed it works! Thanks for your reactiveness ;)\n. Yes that's what I was doing...\n. OK I understand. What is the best way to reset a form then?\n. I think they are 2 cool options! ;) \n\nHowever, with this beta, my code broke! :D But it was because I was using the forms inside a popup toggled with ng-show, and my model was null at the beginning (I was using the null value to show/hide the popup). So I had the idea to use ng-if instead, and miraculously, my previous problem of models not being reset was gone even without using resetModel()! ^^\n\nThen I am wondering if the resetModel method wouldn't be a good place to reset the validation.show flags if they were set after the form initialization. What do you think?\n. Yeap it is OK for me.\n. @kentcdodds What is the reason behind the `|| modelValue` ?\n. Because if it was to prevent an undefined value, a `angular.isDefined(viewValue) ? viewValue : modelValue` would be safer...\n. Indeed, the example you mentionned works as expected but it required quite a lot of code to display a simple range slider.\n\nThe original example (where reset does not work) is the following: http://jsbin.com/vudameneko/1/edit?js,output .\n. ",
    "joezhouOxford": " It is working now. Thank you for the quick response! Great work\n. Hi Kent,\nI encountered the same problem while developing my dynamic form builder. Basically, I want to dynamically switch out/change form field to \"preview\" the draft form on the fly. I got this error \"Cannot read property 'show' of undefined\n    at Object.watchShowValidationChange\" . \nDo you have an workaround such as turn off the validation (which isn't ideal, if preview form can do the validation, it would give an more \"realistic\" preview)? \n\nThanks\n\nJoe\n. Hi Kent\nThanks for the swift response!\nI guess manually initialize the new fields are also not possible? \nIf that is true then I guess the only workaround would be adding those new fields then refresh the page...\n. Fantastic! Works like an charm :-) \nMany thanks\n.  It is working now. Thank you for the quick response! Great work\n. Hi Kent,\nI encountered the same problem while developing my dynamic form builder. Basically, I want to dynamically switch out/change form field to \"preview\" the draft form on the fly. I got this error \"Cannot read property 'show' of undefined\n    at Object.watchShowValidationChange\" . \nDo you have an workaround such as turn off the validation (which isn't ideal, if preview form can do the validation, it would give an more \"realistic\" preview)? \n\nThanks\n\nJoe\n. Hi Kent\nThanks for the swift response!\nI guess manually initialize the new fields are also not possible? \nIf that is true then I guess the only workaround would be adding those new fields then refresh the page...\n. Fantastic! Works like an charm :-) \nMany thanks\n. ",
    "SagiMedina": "Hi @kentcdodds, any news about resetFields method? \nI really need the option to swap my fields... \nThink about it, that would be amazing! we could have 20 dynamics forms and only one html line.\nThe formFields will be update via controller...\n. Thanks a lot for your fast response! \nI'll check...\nbtw thank you for this amazing module!!\n. @kentcdodds great workaround!\nFor those who follow John Papa style guide:\n\n``` javascript\n(function () {\n    'use strict';\n\n    angular\n        .module('kcd.directives') // change or inject it\n        .directive('kcdRecompile', kcdRecompile);\n\n    kcdRecompile.$inject = ['$compile', '$parse'];\n\n    function kcdRecompile($compile, $parse) {\n\n        var directive = {\n            scope: true,\n            compile: compile\n        };\n        return directive;\n\n        function compile(element, attrs) {\n            var template = getElementAsHtml(element);\n\n            return function link(scope, element, attrs) {\n                var stopWatching = scope.$parent.$watch(attrs.kcdRecompile, function(_new, _old) {\n                    var useBoolean = attrs.hasOwnProperty('useBoolean');\n                    if ((useBoolean && (!_new || _new === 'false')) || (!useBoolean && (!_new || _new === _old))) {\n                        return;\n                    }\n                    // reset kcdRecompile to false if we're using a boolean\n                    if (useBoolean) {\n                        $parse(attrs.kcdRecompile).assign(scope.$parent, false);\n                    }\n\n                    // recompile\n                    var newEl = $compile(template)(scope.$parent);\n                    element.replaceWith(newEl);\n\n                    // Destroy old scope, reassign new scope.\n                    stopWatching();\n                    scope.$destroy();\n                }, true); // <-- that\n            }\n        }\n\n        function getElementAsHtml(element) {\n            return angular.element('<a></a>').append(element.clone()).html();\n        }\n    }\n})();\n```\n\nKeep in mind that you need change the html too since you are using controllerAs syntax:\n\n``` html\n<div ng-controller=\"worker as workerCtrl\" kcd-recompile=\"workerCtrl.formFields\">\n   <formly-form model=\"workerCtrl.worker\" fields=\"workerCtrl.formFields\" options=\"workerCtrl.formOptions\">\n   </formly-form>\n</div>\n```\n. Hi @kentcdodds, any news about resetFields method? \nI really need the option to swap my fields... \nThink about it, that would be amazing! we could have 20 dynamics forms and only one html line.\nThe formFields will be update via controller...\n. Thanks a lot for your fast response! \nI'll check...\nbtw thank you for this amazing module!!\n. @kentcdodds great workaround!\nFor those who follow John Papa style guide:\n\n``` javascript\n(function () {\n    'use strict';\n\n    angular\n        .module('kcd.directives') // change or inject it\n        .directive('kcdRecompile', kcdRecompile);\n\n    kcdRecompile.$inject = ['$compile', '$parse'];\n\n    function kcdRecompile($compile, $parse) {\n\n        var directive = {\n            scope: true,\n            compile: compile\n        };\n        return directive;\n\n        function compile(element, attrs) {\n            var template = getElementAsHtml(element);\n\n            return function link(scope, element, attrs) {\n                var stopWatching = scope.$parent.$watch(attrs.kcdRecompile, function(_new, _old) {\n                    var useBoolean = attrs.hasOwnProperty('useBoolean');\n                    if ((useBoolean && (!_new || _new === 'false')) || (!useBoolean && (!_new || _new === _old))) {\n                        return;\n                    }\n                    // reset kcdRecompile to false if we're using a boolean\n                    if (useBoolean) {\n                        $parse(attrs.kcdRecompile).assign(scope.$parent, false);\n                    }\n\n                    // recompile\n                    var newEl = $compile(template)(scope.$parent);\n                    element.replaceWith(newEl);\n\n                    // Destroy old scope, reassign new scope.\n                    stopWatching();\n                    scope.$destroy();\n                }, true); // <-- that\n            }\n        }\n\n        function getElementAsHtml(element) {\n            return angular.element('<a></a>').append(element.clone()).html();\n        }\n    }\n})();\n```\n\nKeep in mind that you need change the html too since you are using controllerAs syntax:\n\n``` html\n<div ng-controller=\"worker as workerCtrl\" kcd-recompile=\"workerCtrl.formFields\">\n   <formly-form model=\"workerCtrl.worker\" fields=\"workerCtrl.formFields\" options=\"workerCtrl.formOptions\">\n   </formly-form>\n</div>\n```\n. ",
    "txa1562": "When you were creating your example, did you run into the issue where the contents of your step arrays was getting wiped out?  When mine loads, the arrays are empty, but when I take the formly-form outside the wizard directive, it loads just fine.  Also, when I hard code form fields into the wizard, it works fine.  It's just when I use formly and wizard in conjunction that it gets wiped clean.. When you were creating your example, did you run into the issue where the contents of your step arrays was getting wiped out?  When mine loads, the arrays are empty, but when I take the formly-form outside the wizard directive, it loads just fine.  Also, when I hard code form fields into the wizard, it works fine.  It's just when I use formly and wizard in conjunction that it gets wiped clean.. ",
    "mikeerickson": "@kentcdodds I am in ;-)  Seeing as I had the request, seems it would benefit me so may as well contribute eh!\n. @kentcdodds In fact I was gonna get going on this tomorrow!  just cleaned a bunch off my plate this past couple weeks so have some time for measly OSS projects ;-)\n. pong!  @kentcdodds thx for the ping though ;-)\n. @kentcdodds Sorry for delay mate, always seem to get bombarded on day I plan to get started on this.   So, I will allocate some good time on Sunday to making this happen :-)\n\nBut you need to quit adding features so fast!\n. @kentcdodds No, keep bugging me, it keeps the pressure on to get this done.  I will get it done! ;-)\n. @kentcdodds I will be doing the side-by-side comparison as well in a separate blog post\n. @kentcdodds still alive, just wrapping up some client work and then I will move my efforts to formly\n. @kentcdodds perhaps, seeing as I will be working on a project which is using formly a lot - I will need fresh docs ;)\n. yeah, >=1.3 is good for me, dont have any 1.2 projects\n. @kentcdodds I am in ;-)  Seeing as I had the request, seems it would benefit me so may as well contribute eh!\n. @kentcdodds In fact I was gonna get going on this tomorrow!  just cleaned a bunch off my plate this past couple weeks so have some time for measly OSS projects ;-)\n. pong!  @kentcdodds thx for the ping though ;-)\n. @kentcdodds Sorry for delay mate, always seem to get bombarded on day I plan to get started on this.   So, I will allocate some good time on Sunday to making this happen :-)\n\nBut you need to quit adding features so fast!\n. @kentcdodds No, keep bugging me, it keeps the pressure on to get this done.  I will get it done! ;-)\n. @kentcdodds I will be doing the side-by-side comparison as well in a separate blog post\n. @kentcdodds still alive, just wrapping up some client work and then I will move my efforts to formly\n. @kentcdodds perhaps, seeing as I will be working on a project which is using formly a lot - I will need fresh docs ;)\n. yeah, >=1.3 is good for me, dont have any 1.2 projects\n. ",
    "brutalcrozt": "@benoror  i had no ruby experience dude, but i maybe i have to learn it?\n@kentcdodds the left pane on angular-formly.com feel confusing for me, really.\nwhat if change the formly doc like angular documentation?\n. i am using  AngularJS v1.4.8 and use  angular-formly v7.3.9\ni am stuck 2 days on showing validation errors, the i see the solution on the [doc](http://docs.angular-formly.com/docs/validation), please update the explanation on jsbin to highlisght on using novalidate attribute. It may help the newcomer and future reader\nin my case the 2nd solution not work as expected, and i am not sure the 3rd.\n. I am trying to get in :smile: \n. @kentcdodds Thanks, i found issue myself, and wanna try to submit PR. But i still confuse with the code base. I want add some check but i did not found appropriate place for it :confused:\n. I am on windows running node 0.12.9.\nany link will help, i will try solve it my own, since i know kent busy enough lately.\n. @benoror he say or even 0.12.x . 4 or 5 ? how fast it's development. It's version confusing :confused: \nDownloading v.4.2.6 and it did the trick , passed running test. Thanks man :+1: \n. since it merged, we should close this one?\n. @kentcdodds maybe i don't get the right? or i missing something. even add label i can't do it. :smile: \n. @kentcdodds as i remember it not give 2 errors dude, but yes it's complicates the codebase.\nnothing to sorry, i just wonder someone lead to same things which i did. Since i know you starting busy after i watch angular air ep 0.\n. hey i try view the plnkr and it just work perfectly :smile: \n. yeah thanks for pointing that, i may take a look later.\ntoo much deadline :cry: \n. yes @ajay2507 , we will be happy if you want take this down :) .\r\nFYI we are building the formly for angular 2 at [ng-formly](https://github.com/formly-js/ng-formly). \r\nYou may submit pr for v.1 or v.2 or both. But i am not sure if the version 2 is aware of this.. Maybe it because fail fetching `api-check.js` and `formly` . Till now idk why i cant access https://npmcdn.com , even i change network.\n\n@Carsyl if i am correct change on html, for api-check.js , formly.js and also angular-formly-templates-bootstrap.js\n\n```\n<script src=\"//rawgit.com/brutalcrozt/web_tech_RnD/master/js/api-check-v7.5.5.min.js\"></script>\n<script src=\"//rawgit.com/brutalcrozt/web_tech_RnD/master/js/formly-v8.0.0.min.js\"></script>\n<script src=\"//rawgit.com/brutalcrozt/web_tech_RnD/master/js/angular-formly-templates-bootstrap.min.js\"></script>\n```\n\nit should work properly, CMIIW :smile: \n. @EmaMatulich what is your need using momentjs? i think it's beyond formly scope, if you just need format date angular already have [date filter](https://github.com/angular/angular.js/blob/v1.5.0/src/ng/filter/filters.js#L454). CMIIW \n. @benoror  i had no ruby experience dude, but i maybe i have to learn it?\n@kentcdodds the left pane on angular-formly.com feel confusing for me, really.\nwhat if change the formly doc like angular documentation?\n. i am using  AngularJS v1.4.8 and use  angular-formly v7.3.9\ni am stuck 2 days on showing validation errors, the i see the solution on the [doc](http://docs.angular-formly.com/docs/validation), please update the explanation on jsbin to highlisght on using novalidate attribute. It may help the newcomer and future reader\nin my case the 2nd solution not work as expected, and i am not sure the 3rd.\n. I am trying to get in :smile: \n. @kentcdodds Thanks, i found issue myself, and wanna try to submit PR. But i still confuse with the code base. I want add some check but i did not found appropriate place for it :confused:\n. I am on windows running node 0.12.9.\nany link will help, i will try solve it my own, since i know kent busy enough lately.\n. @benoror he say or even 0.12.x . 4 or 5 ? how fast it's development. It's version confusing :confused: \nDownloading v.4.2.6 and it did the trick , passed running test. Thanks man :+1: \n. since it merged, we should close this one?\n. @kentcdodds maybe i don't get the right? or i missing something. even add label i can't do it. :smile: \n. @kentcdodds as i remember it not give 2 errors dude, but yes it's complicates the codebase.\nnothing to sorry, i just wonder someone lead to same things which i did. Since i know you starting busy after i watch angular air ep 0.\n. hey i try view the plnkr and it just work perfectly :smile: \n. yeah thanks for pointing that, i may take a look later.\ntoo much deadline :cry: \n. yes @ajay2507 , we will be happy if you want take this down :) .\r\nFYI we are building the formly for angular 2 at [ng-formly](https://github.com/formly-js/ng-formly). \r\nYou may submit pr for v.1 or v.2 or both. But i am not sure if the version 2 is aware of this.. Maybe it because fail fetching `api-check.js` and `formly` . Till now idk why i cant access https://npmcdn.com , even i change network.\n\n@Carsyl if i am correct change on html, for api-check.js , formly.js and also angular-formly-templates-bootstrap.js\n\n```\n<script src=\"//rawgit.com/brutalcrozt/web_tech_RnD/master/js/api-check-v7.5.5.min.js\"></script>\n<script src=\"//rawgit.com/brutalcrozt/web_tech_RnD/master/js/formly-v8.0.0.min.js\"></script>\n<script src=\"//rawgit.com/brutalcrozt/web_tech_RnD/master/js/angular-formly-templates-bootstrap.min.js\"></script>\n```\n\nit should work properly, CMIIW :smile: \n. @EmaMatulich what is your need using momentjs? i think it's beyond formly scope, if you just need format date angular already have [date filter](https://github.com/angular/angular.js/blob/v1.5.0/src/ng/filter/filters.js#L454). CMIIW \n. ",
    "astanciu": "This works great, except that fields with default validations cause a reset. For ex, a type:email field using the boostrap templates, as soon as you blur the field leaving an invalid email, it clears the value (assuming form re-compilation happens)\n. This works great, except that fields with default validations cause a reset. For ex, a type:email field using the boostrap templates, as soon as you blur the field leaving an invalid email, it clears the value (assuming form re-compilation happens)\n. ",
    "v0d1ch": "This causes my chrome to eat a ton of memory :) I have uib-tabs that have a directive inside, that listens to event that updates the data from another directive and too many watchers are taking their toll I guess :(\n**EDIT:**\nI have set the directive to watch simple boolean value and it works \"Like a charm\" :)\n. This causes my chrome to eat a ton of memory :) I have uib-tabs that have a directive inside, that listens to event that updates the data from another directive and too many watchers are taking their toll I guess :(\n**EDIT:**\nI have set the directive to watch simple boolean value and it works \"Like a charm\" :)\n. ",
    "monkeymonk": "I hadn't seen that part in the documentation... my bad! \u03a3(\u00b0\u0414\u00b0 )\n\nThank you @stefanzweifel ! ;-)\n. Ok. So I finally find the answer :\n\n``` javascript\nexport default function FormConfig(formlyConfigProvider) {\n    'ngInject';\n\n    formlyConfigProvider.extras.errorExistsAndShouldBeVisibleExpression = 'fc.$touched || form.$submitted';\n}\n```\n\nI've already tried with this but updating the expression with my namespace... the thing is that `fc` and `form` seems to be internal magic stuff.\n\nThis should be announced in the examples ! ^^'\n. I hadn't seen that part in the documentation... my bad! \u03a3(\u00b0\u0414\u00b0 )\n\nThank you @stefanzweifel ! ;-)\n. Ok. So I finally find the answer :\n\n``` javascript\nexport default function FormConfig(formlyConfigProvider) {\n    'ngInject';\n\n    formlyConfigProvider.extras.errorExistsAndShouldBeVisibleExpression = 'fc.$touched || form.$submitted';\n}\n```\n\nI've already tried with this but updating the expression with my namespace... the thing is that `fc` and `form` seems to be internal magic stuff.\n\nThis should be announced in the examples ! ^^'\n. ",
    "rjacquemin": "Hi all, \n\nI have some troubles with IE8, IE9.\nMoreover  doc is not available \n\nhttp://docs.angular-formly.com/v6.3.2/docs/support-ie-8\nhttp://docs.angular-formly.com/\n\n@stefanzweifel\n\nLet me know if there is something i am missing \n. Hi all, \n\nI have some troubles with IE8, IE9.\nMoreover  doc is not available \n\nhttp://docs.angular-formly.com/v6.3.2/docs/support-ie-8\nhttp://docs.angular-formly.com/\n\n@stefanzweifel\n\nLet me know if there is something i am missing \n. ",
    "tourist": "Thanks to you for ultra quick response and maintaining this nice looking library and all your other Angular activities as well... time for some squats! ;)\n. \"JSON Powered Forms\" from NG-NL 2015 - not live sadly (via YT) but squats are done ;)\n. Thanks to you for ultra quick response and maintaining this nice looking library and all your other Angular activities as well... time for some squats! ;)\n. \"JSON Powered Forms\" from NG-NL 2015 - not live sadly (via YT) but squats are done ;)\n. ",
    "icfantv": "Thanks!  Will give this a go.\n. Worked perfectly (I still don't know why I sometimes am surprised when that happens).  Thanks again.\n. Sorry, was out of pocket all weekend:  Mother's day....kids....you know the drill.  It did answer my question and will put it to good use this morning.  Thanks.\n. Well, that was embarrassing.  Thanks.\n. I just watched the egghead.io video on validation and it does appear that the `validators` object key can be anything.  It doesn't explicitly state it cannot match an existing validator, but given the errors when doing so, seems like a good assumption.\n\nStill trying to nail down the first two issues.\n. No worries.  Will do, thanks.\n. So here's something interesting with that Codementor example and I can reproduce it in a Plunker.  The Chrome console is throwing an error when focus is gained and then lost on the IP Address field.  Text doesn't even have to be entered.\n\nNot sure if this is a bug in Angular or Formly, but Angular is trying to call setAttribute() on a comment tag: `<!-- ngMessage: {{::name}} -->` when focus is lost.  The form and validation still work correctly.  Adding full jQuery as a dependency makes the issue go away but it's not entirely clear why as a breakpoint on line 2887 is no longer hit using the same steps.  Here's the stacktrace:\n\n```\nTypeError: element.setAttribute is not a function\n    at forEach.attr (http://ajax.googleapis.com/ajax/libs/angularjs/1.3.15/angular.js:2887:15)\n    at Object.JQLite.(anonymous function) [as attr] (http://ajax.googleapis.com/ajax/libs/angularjs/1.3.15/angular.js:2986:9)\n    at Object.$get.Attributes.$set (http://ajax.googleapis.com/ajax/libs/angularjs/1.3.15/angular.js:6829:28)\n    at interpolateFnWatchAction (http://ajax.googleapis.com/ajax/libs/angularjs/1.3.15/angular.js:8157:28)\n    at interpolateFnWatcher (http://ajax.googleapis.com/ajax/libs/angularjs/1.3.15/angular.js:10216:26)\n    at Object.watchGroupAction (http://ajax.googleapis.com/ajax/libs/angularjs/1.3.15/angular.js:13980:13)\n    at Object.oneTimeListener [as fn] (http://ajax.googleapis.com/ajax/libs/angularjs/1.3.15/angular.js:12852:20)\n    at Scope.$get.Scope.$digest (http://ajax.googleapis.com/ajax/libs/angularjs/1.3.15/angular.js:14308:29)\n    at Scope.$get.Scope.$apply (http://ajax.googleapis.com/ajax/libs/angularjs/1.3.15/angular.js:14571:24)\n    at HTMLInputElement.<anonymous> (http://ajax.googleapis.com/ajax/libs/angularjs/1.3.15/angular.js:23644:21)\n```\n\nI'll keep moving forward using the Codementor example.\n. Cool, thanks for following up on that.  We're currently using (but probably don't need to be) full jQuery so that alleviates that issue.\n\nI've been working on this problem all morning and it does not appear that, at least in my plunker setup, I can use both default messages in my `validation.html` file and overrides in the `validation.messages` object.  E.g., `<div class=\"some-message\" ng-message=\"required\">This field is required</div>` and\n\n```\nvalidation: {\n  messages: {\n    required: function (viewValue, modelValue, scope) {\n      return scope.to.label + ' is required';\n    }\n  }\n}\n```\n\nIf I get rid of the default messages in `validation.html` the values defined in `validation.messages` are used.\n\nOn a whim, I updated the plunker to angular 1.4 RC1 and I get a different error which actually makes sense:\n\n```\nError: [$compile:nonassign] Expression 'field.model || model' used with directive 'formlyField' is non-assignable!\nhttp://errors.angularjs.org/1.4.0-rc.1/$compile/nonassign?p0=field.model%20%7C%7C%20model&p1=formlyField\n    at REGEX_STRING_REGEXP (angular.js:68)\n    at $get.parentSet (angular.js:8571)\n    at parentValueWatch (angular.js:8584)\n    at Object.regularInterceptedExpression (angular.js:14010)\n    at Scope.$get.Scope.$digest (angular.js:15403)\n    at Scope.$get.Scope.$apply (angular.js:15679)\n    at NgModelController.$$debounceViewValueCommit (angular.js:24748)\n    at NgModelController.$setViewValue (angular.js:24720)\n    at HTMLInputElement.listener (angular.js:21096)\n    at HTMLInputElement.n.event.dispatch (jquery-2.1.4.min.js:3)\n```\n\nIt appears that it's trying to bind the `validation.messages.required` function on my First Name field, which is not allowed per the angular error URL.\n\nI'm ok for now in just using the default values in my `validation.html` file but it would be nice to be able to override them at some point.  As for now, I don't have a use case to do so.\n\nI'll wait for you to respond before closing.  Thanks.\n. Good deal, thanks.\n. I'm open to your suggestions/thoughts on this.\n\nRight now I have it making a service call (the second option) when the controller function is loaded and just pushing a new item into the `fields` array.  I suspect I'll have to wait until we deploy to production to test the full on latency/UX ramifications of this because on my machine and on our QA servers it's loading fine w/ almost no noticeable delay - even using the mobile network throttling feature of the Chrome debuggger - I took it down to 2G and it was still fine.  It's only 848 bytes of uncompressed data and we have compression turned on.\n. I'm already doing that for our $modals.  Never occurred to me to do that for remote data.  I like it, thanks.\n. Oh, ok.  Cool.  Thanks.\n. That was more a tongue-in-cheek comment.  I'm a firm believer in fail early, fail fast.  So keep on api-checkin'.\n\nI fixed the config.  I free typed it in and the default text editor in github is rubbish - I should have typed it a proper text editor (like Notepad) and then pasted it.\n\nHere's the use case:  This is a user admin page and the validator is on the username field.  One of the validators on the username field checks to see if the username is already taken.  This all works great for creating new users.  When I go to edit an existing user, the username field is populated, but disabled (via `expressionProperties['templateOptions.disabled']`) and this `uniqueUsername` validator is still triggered **even if the field is disabled**.  Thus, my `Save` button remains disabled because the form is still being reported as invalid - and indeed if one looks at the `$errors` object on the form, the `uniqueUsername` is present.\n\nSo, I'm thinking either we need a way to disable the validators, or perhaps more appropriately, the validators should not be triggered when a field is disabled - but this could get tricky as it starts to depend on the order in which formly evaluates the formly expressions.\n\nAs I mentioned, I have a temporary workaround in that I've added a conditional to my `vm.someFunc` expression - but I sure would like to do this the correct way.\n. I follow the last bit on `isEditMode` but I don't follow how to NOT add a validator based on that boolean.\n. Ah, got it.  That will work nicely.  Thanks.\n. So api-check doesn't like `undefined` as a value for the validator.  If `isEditMode` is `false`, it's fine, but if not, it yells and says:\n\n``` javascript\nError: angular-formly: formly-field directive apiCheck failed! `validators` at `Argument 1/value` must be `objectOf[oneOfType[oneOfType[String, Function], strict shape]]`  formly-field-directive-validation-failed\n\n/* snip */\n\n\"validators\": {\n  \"__apiCheckData\": {\n    \"optional\": true,\n    \"type\": \"objectOf\",\n    \"error\": \"THIS IS THE PROBLEM: `validators` must be `objectOf[oneOfType[oneOfType[String, Function], strict shape]]`\"\n  },\n/* snip */\n```\n\nThoughts?\n. That would work.  It does change the \"implied paradigm\" (and I use that phrase quite loosely) of defining all the fields in the same array.  But it does only conditionally add the validator - meaning it's simply not at all there if in edit mode.\n\nHere's what I wound up doing:  I was hoping that `angular.noop` would work instead of `undefined` but angular installs an `$inject` property on everything, including `angular.noop`, so that doesn't work because api-check checks for extraneous properties.  And it turns out it wouldn't work anyway because the validator function needs to return either a resolved or rejected $promise, so what I did was create a utility service that had a `noopResolve` function and that works like a charm.\n\nAlthough, it could be argued that at this point, why not just add the conditional to the `vm.someFunc` to make it just return a resolved promise and honestly, I don't have good answer here.\n. I wrote too soon.  Sorry. One sec.\n. Gaaaaaaah.  When am I going to learn that formly expressions need to be quoted.....?  Both `'undefined'` and `'true'` work.  I can't say how many times I've been bitten by that.  Thanks again.\n. I'm sure it is.  It's so easy to do and whether you add them or not, it's valid J/S.  The only difference is when it gets evaluated.\n\nI was thinking about if there was a way to pre-parse it to see if there was potentially an error, but as you said, there's not.\n\nThanks again. :smiley:\n. That makes absolute sense.  When you say separate file, you mean template HTML file, right?  I like the idea of separate `.config` calls - I'm going to break mine apart.  And yes, totally cool closing this.  Thanks.\n. Sorry.  Not intended.  Where would you like me to post the follow up (and future help requests)?  I'm working on the JS Bin.  Thanks.\n. Oy.  Sorry, i should have read the instructions before just starting work on the example.  Thanks for being so patient.\n. Done.\n. Thanks!  Will give this a go.\n. Worked perfectly (I still don't know why I sometimes am surprised when that happens).  Thanks again.\n. Sorry, was out of pocket all weekend:  Mother's day....kids....you know the drill.  It did answer my question and will put it to good use this morning.  Thanks.\n. Well, that was embarrassing.  Thanks.\n. I just watched the egghead.io video on validation and it does appear that the `validators` object key can be anything.  It doesn't explicitly state it cannot match an existing validator, but given the errors when doing so, seems like a good assumption.\n\nStill trying to nail down the first two issues.\n. No worries.  Will do, thanks.\n. So here's something interesting with that Codementor example and I can reproduce it in a Plunker.  The Chrome console is throwing an error when focus is gained and then lost on the IP Address field.  Text doesn't even have to be entered.\n\nNot sure if this is a bug in Angular or Formly, but Angular is trying to call setAttribute() on a comment tag: `<!-- ngMessage: {{::name}} -->` when focus is lost.  The form and validation still work correctly.  Adding full jQuery as a dependency makes the issue go away but it's not entirely clear why as a breakpoint on line 2887 is no longer hit using the same steps.  Here's the stacktrace:\n\n```\nTypeError: element.setAttribute is not a function\n    at forEach.attr (http://ajax.googleapis.com/ajax/libs/angularjs/1.3.15/angular.js:2887:15)\n    at Object.JQLite.(anonymous function) [as attr] (http://ajax.googleapis.com/ajax/libs/angularjs/1.3.15/angular.js:2986:9)\n    at Object.$get.Attributes.$set (http://ajax.googleapis.com/ajax/libs/angularjs/1.3.15/angular.js:6829:28)\n    at interpolateFnWatchAction (http://ajax.googleapis.com/ajax/libs/angularjs/1.3.15/angular.js:8157:28)\n    at interpolateFnWatcher (http://ajax.googleapis.com/ajax/libs/angularjs/1.3.15/angular.js:10216:26)\n    at Object.watchGroupAction (http://ajax.googleapis.com/ajax/libs/angularjs/1.3.15/angular.js:13980:13)\n    at Object.oneTimeListener [as fn] (http://ajax.googleapis.com/ajax/libs/angularjs/1.3.15/angular.js:12852:20)\n    at Scope.$get.Scope.$digest (http://ajax.googleapis.com/ajax/libs/angularjs/1.3.15/angular.js:14308:29)\n    at Scope.$get.Scope.$apply (http://ajax.googleapis.com/ajax/libs/angularjs/1.3.15/angular.js:14571:24)\n    at HTMLInputElement.<anonymous> (http://ajax.googleapis.com/ajax/libs/angularjs/1.3.15/angular.js:23644:21)\n```\n\nI'll keep moving forward using the Codementor example.\n. Cool, thanks for following up on that.  We're currently using (but probably don't need to be) full jQuery so that alleviates that issue.\n\nI've been working on this problem all morning and it does not appear that, at least in my plunker setup, I can use both default messages in my `validation.html` file and overrides in the `validation.messages` object.  E.g., `<div class=\"some-message\" ng-message=\"required\">This field is required</div>` and\n\n```\nvalidation: {\n  messages: {\n    required: function (viewValue, modelValue, scope) {\n      return scope.to.label + ' is required';\n    }\n  }\n}\n```\n\nIf I get rid of the default messages in `validation.html` the values defined in `validation.messages` are used.\n\nOn a whim, I updated the plunker to angular 1.4 RC1 and I get a different error which actually makes sense:\n\n```\nError: [$compile:nonassign] Expression 'field.model || model' used with directive 'formlyField' is non-assignable!\nhttp://errors.angularjs.org/1.4.0-rc.1/$compile/nonassign?p0=field.model%20%7C%7C%20model&p1=formlyField\n    at REGEX_STRING_REGEXP (angular.js:68)\n    at $get.parentSet (angular.js:8571)\n    at parentValueWatch (angular.js:8584)\n    at Object.regularInterceptedExpression (angular.js:14010)\n    at Scope.$get.Scope.$digest (angular.js:15403)\n    at Scope.$get.Scope.$apply (angular.js:15679)\n    at NgModelController.$$debounceViewValueCommit (angular.js:24748)\n    at NgModelController.$setViewValue (angular.js:24720)\n    at HTMLInputElement.listener (angular.js:21096)\n    at HTMLInputElement.n.event.dispatch (jquery-2.1.4.min.js:3)\n```\n\nIt appears that it's trying to bind the `validation.messages.required` function on my First Name field, which is not allowed per the angular error URL.\n\nI'm ok for now in just using the default values in my `validation.html` file but it would be nice to be able to override them at some point.  As for now, I don't have a use case to do so.\n\nI'll wait for you to respond before closing.  Thanks.\n. Good deal, thanks.\n. I'm open to your suggestions/thoughts on this.\n\nRight now I have it making a service call (the second option) when the controller function is loaded and just pushing a new item into the `fields` array.  I suspect I'll have to wait until we deploy to production to test the full on latency/UX ramifications of this because on my machine and on our QA servers it's loading fine w/ almost no noticeable delay - even using the mobile network throttling feature of the Chrome debuggger - I took it down to 2G and it was still fine.  It's only 848 bytes of uncompressed data and we have compression turned on.\n. I'm already doing that for our $modals.  Never occurred to me to do that for remote data.  I like it, thanks.\n. Oh, ok.  Cool.  Thanks.\n. That was more a tongue-in-cheek comment.  I'm a firm believer in fail early, fail fast.  So keep on api-checkin'.\n\nI fixed the config.  I free typed it in and the default text editor in github is rubbish - I should have typed it a proper text editor (like Notepad) and then pasted it.\n\nHere's the use case:  This is a user admin page and the validator is on the username field.  One of the validators on the username field checks to see if the username is already taken.  This all works great for creating new users.  When I go to edit an existing user, the username field is populated, but disabled (via `expressionProperties['templateOptions.disabled']`) and this `uniqueUsername` validator is still triggered **even if the field is disabled**.  Thus, my `Save` button remains disabled because the form is still being reported as invalid - and indeed if one looks at the `$errors` object on the form, the `uniqueUsername` is present.\n\nSo, I'm thinking either we need a way to disable the validators, or perhaps more appropriately, the validators should not be triggered when a field is disabled - but this could get tricky as it starts to depend on the order in which formly evaluates the formly expressions.\n\nAs I mentioned, I have a temporary workaround in that I've added a conditional to my `vm.someFunc` expression - but I sure would like to do this the correct way.\n. I follow the last bit on `isEditMode` but I don't follow how to NOT add a validator based on that boolean.\n. Ah, got it.  That will work nicely.  Thanks.\n. So api-check doesn't like `undefined` as a value for the validator.  If `isEditMode` is `false`, it's fine, but if not, it yells and says:\n\n``` javascript\nError: angular-formly: formly-field directive apiCheck failed! `validators` at `Argument 1/value` must be `objectOf[oneOfType[oneOfType[String, Function], strict shape]]`  formly-field-directive-validation-failed\n\n/* snip */\n\n\"validators\": {\n  \"__apiCheckData\": {\n    \"optional\": true,\n    \"type\": \"objectOf\",\n    \"error\": \"THIS IS THE PROBLEM: `validators` must be `objectOf[oneOfType[oneOfType[String, Function], strict shape]]`\"\n  },\n/* snip */\n```\n\nThoughts?\n. That would work.  It does change the \"implied paradigm\" (and I use that phrase quite loosely) of defining all the fields in the same array.  But it does only conditionally add the validator - meaning it's simply not at all there if in edit mode.\n\nHere's what I wound up doing:  I was hoping that `angular.noop` would work instead of `undefined` but angular installs an `$inject` property on everything, including `angular.noop`, so that doesn't work because api-check checks for extraneous properties.  And it turns out it wouldn't work anyway because the validator function needs to return either a resolved or rejected $promise, so what I did was create a utility service that had a `noopResolve` function and that works like a charm.\n\nAlthough, it could be argued that at this point, why not just add the conditional to the `vm.someFunc` to make it just return a resolved promise and honestly, I don't have good answer here.\n. I wrote too soon.  Sorry. One sec.\n. Gaaaaaaah.  When am I going to learn that formly expressions need to be quoted.....?  Both `'undefined'` and `'true'` work.  I can't say how many times I've been bitten by that.  Thanks again.\n. I'm sure it is.  It's so easy to do and whether you add them or not, it's valid J/S.  The only difference is when it gets evaluated.\n\nI was thinking about if there was a way to pre-parse it to see if there was potentially an error, but as you said, there's not.\n\nThanks again. :smiley:\n. That makes absolute sense.  When you say separate file, you mean template HTML file, right?  I like the idea of separate `.config` calls - I'm going to break mine apart.  And yes, totally cool closing this.  Thanks.\n. Sorry.  Not intended.  Where would you like me to post the follow up (and future help requests)?  I'm working on the JS Bin.  Thanks.\n. Oy.  Sorry, i should have read the instructions before just starting work on the example.  Thanks for being so patient.\n. Done.\n. ",
    "hmendezm": "Hi icfantv,\n\nI am new in formly and I tring to implement multilingual UI so I need to run a function in the 'templateOptions.labelProp' so I have the following \n\n```\n {\n            key: 'country',\n            type: 'select',\n            templateOptions: {\n                label: 'Country of operation',\n\n                options: [],\n                valueProp:'id',\n                labelProp:'code',\n                required: false\n            },\n                expressionProperties: {\n                        'templateOptions.labelProp': function($viewValue, $modelValue, scope) {\n                            return \"_TESTFUNCTION\";\n                        }\n                },\n                controller: function($scope,$log, CountryService) {\n\n                    CountryService.get().then(function (results) \n                        {\n                            if(results)\n                            {\n                             $scope.options.templateOptions.options = results.data;\n                             return results.data;\n                            }\n                        });  \n                }\n        }\n```\n\nI trying to use a function in the expressionProperties and it is not working. Can you help me in giving me a example how you did, please?\n. This is the example. If you see the values are undefine\nhttp://jsbin.com/vocexa/edit?js,output\n\nI do not know what I am doing wrong\n\nbest regards\n. Hi Kent,\nNo, I do not want to change the title of the dropdown. \nI am try to change the label of the items in the dropdown list when user change the language. So my guess was to use a function that allow me to replace the value of the language. let me give you a example:\n\nEnglish                              Spanish\nDominic Republic              Rep\u00fablica Dominicana\n\nIn the dropdown will have english text (eg. Dominic Republic) initially but if user decides to change to Spanish text  the label should be changed  (eg. Republica dominicana) \n\nIn a select what usually I have in the html is the following\n\n```\n <select class=\"form-control\" ng-model=\"assesstment.Country\" ng-options=\"country.id as country.translations[getLanguageID(country.translations,selectedLanguageCode,'language_id')].name for country in countries\" ng-change=\"changedcountry(assesstment.Country)\" >  \n                            </select>  \nThe function getLanguageID will just to return value between 0 to 5 which is the index in the array (country.translations) that is location of the selected language.\n\n```\n\nJSON\n\n```\n[{\"id\":1,\"region_id\":1,\"code\":\"Afghanistan\",\"translations\":[{\"country_id\":1,\"language_id\":1,\"name\":\"Afghanistan\"},{\"country_id\":1,\"language_id\":2,\"name\":\"Afghanistan\"},{\"country_id\":1,\"language_id\":3,\"name\":\"Afganist\u00e1n\"},{\"country_id\":1,\"language_id\":4,\"name\":\"Afghanistan\"},{\"country_id\":1,\"language_id\":5,\"name\":\"Afeganist\u00e3o\"},{\"country_id\":1,\"language_id\":6,\"name\":\"Afghanistan\"}]},\n{\"id\":136,\"region_id\":5,\"code\":\"Albania\",\"translations\":[{\"country_id\":136,\"language_id\":1,\"name\":\"Albania\"},{\"country_id\":136,\"language_id\":2,\"name\":\"Albanie\"},{\"country_id\":136,\"language_id\":3,\"name\":\"Albania\"},{\"country_id\":136,\"language_id\":4,\"name\":\"Albanien\"},{\"country_id\":136,\"language_id\":5,\"name\":\"Alb\u00e2nia\"},{\"country_id\":136,\"language_id\":6,\"name\":\"Albania\"}]},\n{\"id\":48,\"region_id\":2,\"code\":\"Algeria\",\"translations\":[{\"country_id\":48,\"language_id\":1,\"name\":\"Algeria\"},{\"country_id\":48,\"language_id\":2,\"name\":\"Alg\u00e9rie\"},{\"country_id\":48,\"language_id\":3,\"name\":\"Argelia\"},{\"country_id\":48,\"language_id\":4,\"name\":\"Alrgerien\"},{\"country_id\":48,\"language_id\":5,\"name\":\"Arg\u00e9lia\"},{\"country_id\":48,\"language_id\":6,\"name\":\"Algeria\"}]},\n{\"id\":137,\"region_id\":5,\"code\":\"Andorra\",\"translations\":[{\"country_id\":137,\"language_id\":1,\"name\":\"Andorra\"},{\"country_id\":137,\"language_id\":2,\"name\":\"Andorre\"},{\"country_id\":137,\"language_id\":3,\"name\":\"Andorra\"},{\"country_id\":137,\"language_id\":4,\"name\":\"Andorra\"},{\"country_id\":137,\"language_id\":5,\"name\":\"Andorra\"},{\"country_id\":137,\"language_id\":6,\"name\":\"Andorra\"}]}]\n```\n\nI hope this explains my problem/situation.\n\nThank you very much for reply and take time in this\nBest regards\nHenry\n. Thanks Kent, I will check the link and see how I can put translate to work :-) if I am successful I will create an example using formly, so the other developers who need translate can use.\n\nThanks again\nHave a nice day!\nH \n. Hi icfantv,\n\nI am new in formly and I tring to implement multilingual UI so I need to run a function in the 'templateOptions.labelProp' so I have the following \n\n```\n {\n            key: 'country',\n            type: 'select',\n            templateOptions: {\n                label: 'Country of operation',\n\n                options: [],\n                valueProp:'id',\n                labelProp:'code',\n                required: false\n            },\n                expressionProperties: {\n                        'templateOptions.labelProp': function($viewValue, $modelValue, scope) {\n                            return \"_TESTFUNCTION\";\n                        }\n                },\n                controller: function($scope,$log, CountryService) {\n\n                    CountryService.get().then(function (results) \n                        {\n                            if(results)\n                            {\n                             $scope.options.templateOptions.options = results.data;\n                             return results.data;\n                            }\n                        });  \n                }\n        }\n```\n\nI trying to use a function in the expressionProperties and it is not working. Can you help me in giving me a example how you did, please?\n. This is the example. If you see the values are undefine\nhttp://jsbin.com/vocexa/edit?js,output\n\nI do not know what I am doing wrong\n\nbest regards\n. Hi Kent,\nNo, I do not want to change the title of the dropdown. \nI am try to change the label of the items in the dropdown list when user change the language. So my guess was to use a function that allow me to replace the value of the language. let me give you a example:\n\nEnglish                              Spanish\nDominic Republic              Rep\u00fablica Dominicana\n\nIn the dropdown will have english text (eg. Dominic Republic) initially but if user decides to change to Spanish text  the label should be changed  (eg. Republica dominicana) \n\nIn a select what usually I have in the html is the following\n\n```\n <select class=\"form-control\" ng-model=\"assesstment.Country\" ng-options=\"country.id as country.translations[getLanguageID(country.translations,selectedLanguageCode,'language_id')].name for country in countries\" ng-change=\"changedcountry(assesstment.Country)\" >  \n                            </select>  \nThe function getLanguageID will just to return value between 0 to 5 which is the index in the array (country.translations) that is location of the selected language.\n\n```\n\nJSON\n\n```\n[{\"id\":1,\"region_id\":1,\"code\":\"Afghanistan\",\"translations\":[{\"country_id\":1,\"language_id\":1,\"name\":\"Afghanistan\"},{\"country_id\":1,\"language_id\":2,\"name\":\"Afghanistan\"},{\"country_id\":1,\"language_id\":3,\"name\":\"Afganist\u00e1n\"},{\"country_id\":1,\"language_id\":4,\"name\":\"Afghanistan\"},{\"country_id\":1,\"language_id\":5,\"name\":\"Afeganist\u00e3o\"},{\"country_id\":1,\"language_id\":6,\"name\":\"Afghanistan\"}]},\n{\"id\":136,\"region_id\":5,\"code\":\"Albania\",\"translations\":[{\"country_id\":136,\"language_id\":1,\"name\":\"Albania\"},{\"country_id\":136,\"language_id\":2,\"name\":\"Albanie\"},{\"country_id\":136,\"language_id\":3,\"name\":\"Albania\"},{\"country_id\":136,\"language_id\":4,\"name\":\"Albanien\"},{\"country_id\":136,\"language_id\":5,\"name\":\"Alb\u00e2nia\"},{\"country_id\":136,\"language_id\":6,\"name\":\"Albania\"}]},\n{\"id\":48,\"region_id\":2,\"code\":\"Algeria\",\"translations\":[{\"country_id\":48,\"language_id\":1,\"name\":\"Algeria\"},{\"country_id\":48,\"language_id\":2,\"name\":\"Alg\u00e9rie\"},{\"country_id\":48,\"language_id\":3,\"name\":\"Argelia\"},{\"country_id\":48,\"language_id\":4,\"name\":\"Alrgerien\"},{\"country_id\":48,\"language_id\":5,\"name\":\"Arg\u00e9lia\"},{\"country_id\":48,\"language_id\":6,\"name\":\"Algeria\"}]},\n{\"id\":137,\"region_id\":5,\"code\":\"Andorra\",\"translations\":[{\"country_id\":137,\"language_id\":1,\"name\":\"Andorra\"},{\"country_id\":137,\"language_id\":2,\"name\":\"Andorre\"},{\"country_id\":137,\"language_id\":3,\"name\":\"Andorra\"},{\"country_id\":137,\"language_id\":4,\"name\":\"Andorra\"},{\"country_id\":137,\"language_id\":5,\"name\":\"Andorra\"},{\"country_id\":137,\"language_id\":6,\"name\":\"Andorra\"}]}]\n```\n\nI hope this explains my problem/situation.\n\nThank you very much for reply and take time in this\nBest regards\nHenry\n. Thanks Kent, I will check the link and see how I can put translate to work :-) if I am successful I will create an example using formly, so the other developers who need translate can use.\n\nThanks again\nHave a nice day!\nH \n. ",
    "rahulbhaya": "How do you specify which option to disable?\n. How do you specify which option to disable?\n. ",
    "bygiro": "THANK YOU a lot!, I don't know why I didn't pay attention to \"defaultOptions\", it seems so obivous! :-)\nYou are doing a very good job with FORMLY. It's very flexible to any customizations!\nData property would probably be the right place. thanks again!\n. THANK YOU a lot!, I don't know why I didn't pay attention to \"defaultOptions\", it seems so obivous! :-)\nYou are doing a very good job with FORMLY. It's very flexible to any customizations!\nData property would probably be the right place. thanks again!\n. ",
    "amitmawkin": "The error message I am getting is\n\nThe server unexpectedly closed the connection. Looks like it fails at the URL below when seen in Chrome\n\nhttps://jsbin.com/kunaho/embed?output\n\nThanks,\nAmit\n\nFrom: \"Kent C. Dodds\" <notifications@github.com<mailto:notifications@github.com>>\nReply-To: formly-js/angular-formly <reply@reply.github.com<mailto:reply@reply.github.com>>\nDate: Monday, April 13, 2015 at 4:05 PM\nTo: formly-js/angular-formly <angular-formly@noreply.github.com<mailto:angular-formly@noreply.github.com>>\nCc: Amit Mawkin <amit.mawkin@capitalone.com<mailto:amit.mawkin@capitalone.com>>\nSubject: Re: [angular-formly] The example site does not load (#241)\n\nIt's loading fine for me. But you're not the first one to mention issues today. I wonder if iwantmyname.com is experiencing issues... Can you look at the network tab and see if there are DNS issues?\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/formly-js/angular-formly/issues/241#issuecomment-92482002.\n\n---\n\nThe information contained in this e-mail is confidential and/or proprietary to Capital One and/or its affiliates. The information transmitted herewith is intended only for use by the individual or entity to which it is addressed.  If the reader of this message is not the intended recipient, you are hereby notified that any review, retransmission, dissemination, distribution, copying or other use of, or taking of any action in reliance upon this information is strictly prohibited. If you have received this communication in error, please contact the sender and delete the material from your computer.\n. That\u2019s correct.\n\nFrom: \"Kent C. Dodds\" <notifications@github.com<mailto:notifications@github.com>>\nReply-To: formly-js/angular-formly <reply@reply.github.com<mailto:reply@reply.github.com>>\nDate: Monday, April 13, 2015 at 4:13 PM\nTo: formly-js/angular-formly <angular-formly@noreply.github.com<mailto:angular-formly@noreply.github.com>>\nCc: Amit Mawkin <amit.mawkin@capitalone.com<mailto:amit.mawkin@capitalone.com>>\nSubject: Re: [angular-formly] The example site does not load (#241)\n\nWait, just to confirm. For you, the site is actually working, but the embedded examples are failing, is that right?\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/formly-js/angular-formly/issues/241#issuecomment-92484348.\n\n---\n\nThe information contained in this e-mail is confidential and/or proprietary to Capital One and/or its affiliates. The information transmitted herewith is intended only for use by the individual or entity to which it is addressed.  If the reader of this message is not the intended recipient, you are hereby notified that any review, retransmission, dissemination, distribution, copying or other use of, or taking of any action in reliance upon this information is strictly prohibited. If you have received this communication in error, please contact the sender and delete the material from your computer.\n. got it, I think the corp proxy blocked jsbin. You can close the issue as I can see the examples on my personal mac.\n. The error message I am getting is\n\nThe server unexpectedly closed the connection. Looks like it fails at the URL below when seen in Chrome\n\nhttps://jsbin.com/kunaho/embed?output\n\nThanks,\nAmit\n\nFrom: \"Kent C. Dodds\" <notifications@github.com<mailto:notifications@github.com>>\nReply-To: formly-js/angular-formly <reply@reply.github.com<mailto:reply@reply.github.com>>\nDate: Monday, April 13, 2015 at 4:05 PM\nTo: formly-js/angular-formly <angular-formly@noreply.github.com<mailto:angular-formly@noreply.github.com>>\nCc: Amit Mawkin <amit.mawkin@capitalone.com<mailto:amit.mawkin@capitalone.com>>\nSubject: Re: [angular-formly] The example site does not load (#241)\n\nIt's loading fine for me. But you're not the first one to mention issues today. I wonder if iwantmyname.com is experiencing issues... Can you look at the network tab and see if there are DNS issues?\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/formly-js/angular-formly/issues/241#issuecomment-92482002.\n\n---\n\nThe information contained in this e-mail is confidential and/or proprietary to Capital One and/or its affiliates. The information transmitted herewith is intended only for use by the individual or entity to which it is addressed.  If the reader of this message is not the intended recipient, you are hereby notified that any review, retransmission, dissemination, distribution, copying or other use of, or taking of any action in reliance upon this information is strictly prohibited. If you have received this communication in error, please contact the sender and delete the material from your computer.\n. That\u2019s correct.\n\nFrom: \"Kent C. Dodds\" <notifications@github.com<mailto:notifications@github.com>>\nReply-To: formly-js/angular-formly <reply@reply.github.com<mailto:reply@reply.github.com>>\nDate: Monday, April 13, 2015 at 4:13 PM\nTo: formly-js/angular-formly <angular-formly@noreply.github.com<mailto:angular-formly@noreply.github.com>>\nCc: Amit Mawkin <amit.mawkin@capitalone.com<mailto:amit.mawkin@capitalone.com>>\nSubject: Re: [angular-formly] The example site does not load (#241)\n\nWait, just to confirm. For you, the site is actually working, but the embedded examples are failing, is that right?\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/formly-js/angular-formly/issues/241#issuecomment-92484348.\n\n---\n\nThe information contained in this e-mail is confidential and/or proprietary to Capital One and/or its affiliates. The information transmitted herewith is intended only for use by the individual or entity to which it is addressed.  If the reader of this message is not the intended recipient, you are hereby notified that any review, retransmission, dissemination, distribution, copying or other use of, or taking of any action in reliance upon this information is strictly prohibited. If you have received this communication in error, please contact the sender and delete the material from your computer.\n. got it, I think the corp proxy blocked jsbin. You can close the issue as I can see the examples on my personal mac.\n. ",
    "n0rb": "Thanks a lot for your fast response!\nYes, that functionality would be really great to have :+1: \n. @kentcdodds Thanks for the update! and @s992 thanks for your input on this issue!\nI probably won't get to test this thoroughly before next week but a few quick tests look promising :+1: \n. Thanks a lot for your fast response!\nYes, that functionality would be really great to have :+1: \n. @kentcdodds Thanks for the update! and @s992 thanks for your input on this issue!\nI probably won't get to test this thoroughly before next week but a few quick tests look promising :+1: \n. ",
    "s992": "I'm also running into this issue when attempting to unshift or splice fields into my form. Your kcd-recompile workaround from #230 does work, but it introduces a noticeable lag when adding or removing fields.\n\nI noticed that pushing new fields onto the array appears to work properly, but adding a field anywhere other than the end of the array causes Formly to throw errors. My fields have a unique ID stored in the data object, so I updated the formly-form directive to repeat formly-field with the expression `field in fields track by field.data.id` instead of `field in fields track by $index`. In my limited testing, this seems to work fine.\n\nOne issue with this approach is that fields without a key specified will not work properly. Because the model value is set based on the $index, it will assign the same model to multiple fields.\n\nWould it be possible to add a \"track by\" configuration option to formly-form, but require that a key is specified for each field if a custom \"track by\" is used?\n. @kentcdodds Great! Much appreciated.\n. @kentcdodds Tested your changes briefly this morning and it looks like it works for my use case. I'll be working with Formly for most of the day, so I'll update you once I've spent a little more time trying to break it. :)\n. @kentcdodds Seems to be working great for my use case. If any problems do crop up, I'll be sure to let you know.\n\nThanks for such a quick response!\n. The approach you mention in your video (`vm.model.firstName = 'Obi wan'`) is what I'm hoping to avoid. My fields are being retrieved from the server as JSON, so I'd like to specify the value in that JSON and have it set into the model automatically when Formly is building my input. Right now, I have to do something like this:\n\n```\nangular.forEach( fields, function( field ) {\n    model[field.key] = field.data.value;\n});\n```\n\nThis works fine, but it gets difficult to reason about once you start nesting fields to accomplish some of the more advanced layouts. Some of this difficulty can be alleviated by using a recursive function, but it's still not as intuitive (for me, at least) as having Formly set the model value automatically.\n. Great, looking forward to it!\n. Quick note on this - if `defaultValue` is falsy, it will not be set on the model. Use case:\n\n```\n{\n    \"type\": \"radio\",\n    \"key\": \"falseValues\",\n    \"defaultValue\": false,\n    \"templateOptions\": {\n        \"label\": \"Does this work with false values?\",\n        \"options\": [\n            {\n                \"name\": \"Yes\",\n                \"value\": true\n            },\n            {\n                \"name\": \"No\",\n                \"value\": false\n            }\n        ]\n    }\n}\n```\n. D'oh! Makes sense. Thanks :)\n. We're currently using 1.2 for IE8 support. We plan on dropping IE8 at some point (it's being discussed), but I have no idea as far as the timeline goes.  That being said, I am 100% for dropping 1.2 support if it means you can make Formly better - all I ask is that you provide a clear version number cutoff for when support is officially dropped so that we can lock down our dependency to that version.\n. I'm also running into this issue when attempting to unshift or splice fields into my form. Your kcd-recompile workaround from #230 does work, but it introduces a noticeable lag when adding or removing fields.\n\nI noticed that pushing new fields onto the array appears to work properly, but adding a field anywhere other than the end of the array causes Formly to throw errors. My fields have a unique ID stored in the data object, so I updated the formly-form directive to repeat formly-field with the expression `field in fields track by field.data.id` instead of `field in fields track by $index`. In my limited testing, this seems to work fine.\n\nOne issue with this approach is that fields without a key specified will not work properly. Because the model value is set based on the $index, it will assign the same model to multiple fields.\n\nWould it be possible to add a \"track by\" configuration option to formly-form, but require that a key is specified for each field if a custom \"track by\" is used?\n. @kentcdodds Great! Much appreciated.\n. @kentcdodds Tested your changes briefly this morning and it looks like it works for my use case. I'll be working with Formly for most of the day, so I'll update you once I've spent a little more time trying to break it. :)\n. @kentcdodds Seems to be working great for my use case. If any problems do crop up, I'll be sure to let you know.\n\nThanks for such a quick response!\n. The approach you mention in your video (`vm.model.firstName = 'Obi wan'`) is what I'm hoping to avoid. My fields are being retrieved from the server as JSON, so I'd like to specify the value in that JSON and have it set into the model automatically when Formly is building my input. Right now, I have to do something like this:\n\n```\nangular.forEach( fields, function( field ) {\n    model[field.key] = field.data.value;\n});\n```\n\nThis works fine, but it gets difficult to reason about once you start nesting fields to accomplish some of the more advanced layouts. Some of this difficulty can be alleviated by using a recursive function, but it's still not as intuitive (for me, at least) as having Formly set the model value automatically.\n. Great, looking forward to it!\n. Quick note on this - if `defaultValue` is falsy, it will not be set on the model. Use case:\n\n```\n{\n    \"type\": \"radio\",\n    \"key\": \"falseValues\",\n    \"defaultValue\": false,\n    \"templateOptions\": {\n        \"label\": \"Does this work with false values?\",\n        \"options\": [\n            {\n                \"name\": \"Yes\",\n                \"value\": true\n            },\n            {\n                \"name\": \"No\",\n                \"value\": false\n            }\n        ]\n    }\n}\n```\n. D'oh! Makes sense. Thanks :)\n. We're currently using 1.2 for IE8 support. We plan on dropping IE8 at some point (it's being discussed), but I have no idea as far as the timeline goes.  That being said, I am 100% for dropping 1.2 support if it means you can make Formly better - all I ask is that you provide a clear version number cutoff for when support is officially dropped so that we can lock down our dependency to that version.\n. ",
    "ddesign84": "yes, Think you!\n. yes, Think you!\n. ",
    "coveralls": "[![Coverage Status](https://coveralls.io/builds/2358487/badge)](https://coveralls.io/builds/2358487)\n\nChanges Unknown when pulling **6178fadbe8258164c09df419047c6628c780fca6 on sparty02:coveralls** into *\\* on formly-js:master**.\n. [![Coverage Status](https://coveralls.io/builds/2358487/badge)](https://coveralls.io/builds/2358487)\n\nChanges Unknown when pulling **6178fadbe8258164c09df419047c6628c780fca6 on sparty02:coveralls** into *\\* on formly-js:master**.\n. ",
    "ckniffen": "I work on a team that develops tools used by a number of different apps and I have a abstract select type that other teams extend that internally leverages ui-select.  An example of this is we have `user` and `userGroup` types which extend `selectResource`.  All types that extend selectResource need to run through a templateManipulator.  I will work on creating a plnkr of this to better demonstrate the use case.\n. That will work perfect.  I forgot about the getType method on formlyConfig.  Thank you.\n. I am currently using angular 1.3 and we have not encountered this causing issues just yet.  I noticed it while debugging something unrelated and had remembered that during a previous version there was a fix for this and realized this was an uncovered edge case.  Your solution is fine.\n. Does it need to make the assumption that all elements with ngModel map to the same value?\n\nI ask because of https://github.com/formly-js/angular-formly/blob/573a9b070097f1ccd8f55eada4df2f8be7255e4e/src/directives/formly-field.js#L155.\n. I think it is still valid use case.  I have run into myself with a date-picker and time-picker directive in one field template.  I will have a PR sometime tonight.  It will only work if each instance of `ngModel` has a different name though.\n\nThis will not fix the symptoms seen in https://github.com/formly-js/angular-formly-templates-bootstrap/issues/19 though because in that case each element with `ngModel` in that template has the same name.  The following use case is the one that will be covered:\n\n``` html\n<input type=\"input\" name=\"start\" ng-model=\"options.model[options.key].stop\" />\n<input type=\"input\" name=\"stop\" ng-model=\"options.model[options.key].start\" />\n```\n\nThe tests I will be adding cover resetModel and that the formControl is made an array in case of multiple ng-model elements.  Are there any other features that leverage formControl?\n. What is the use case for having falsy templateUrl or template?\n. What are the use cases for 0, false and null? \n. Wrote two failing tests for this issue.  I will have some time tomorrow to do a proper PR with the fix tomorrow.\n\n```\n  it('should use templateUrl if type defines it and its parent has template defined', function(){\n    setterFn([\n      {\n        name,\n        template\n      },\n      {\n        name: 'type2',\n        extends: name,\n        templateUrl\n      }\n    ]);\n\n    expect(getterFn('type2').templateUrl).not.to.be.undefined;\n    expect(getterFn('type2').template).to.be.undefined;\n  });\n\n  it('should use template if type defines it and parent had templateUrl defined', function(){\n    setterFn([\n      {\n        name,\n        templateUrl\n      },\n      {\n        name: 'type2',\n        extends: name,\n        template\n      }\n    ]);\n\n    expect(getterFn('type2').template).not.to.be.undefined;\n    expect(getterFn('type2').templateUrl).to.be.undefined;\n  });\n});\n```\n. I may be missunderstanding the issue but I thought the following would work.\n\n```\n{\n  ngModelAttrs: {\n    foo: {\n      attribute: 'foo'\n    },\n    bar: {\n      attribute: 'bar'\n    }\n  },\n  templateOptions: {\n    foo: true,\n    bar: true\n  }\n}\n```\n. I have a feeling that the use case of an interpolated expression for the value of the dynamically added attribute the issue will still be there but for you example I don't see a problem.\n\nOne solution would be to change ngModelAttrs to be an array instead of an object.\n. I still think it is a valid issue because you cant have the same expression write to two different attributes just much more of an edge case now.\n. I don't know if this is related to the issue, but what I am most concerned about is that the `name` attribute of the fields in the repeat section are not unique.  I spent about an hour trying to figure out the issue is with that but to no avail.  I will revisit it tonight.\n. +1\n. My solution for this is to define the custom field's controller using the angular `Module.controller` method and then in the type definition do:\n\n``` javascript\n{\n  controller: 'CustomTypeController as typeCtrl'\n}\n```\n. The only small benefit I could see and that would be if someone wanted the controller definition to be \"private\" but still use controllerAs.  I don't think the benefit warrants a code change though unless there is a huge demand for it.\n. I personally expose most of mine so that they can be enhanced via delegate.  I always forget about angular 1.2 support :)\n. This is because awesome-bootstrap-checkbox requires you to have slightly different markup than you would typically have with bootstrap.  You need to modify the template that angular-formly-templates-bootstrap uses to reflect the required changes.\n. I think this is still the best way.  The only thing I don't yet know about is how to approach the digest.  Do we make it a breaking change or do the hacky thing of calling digest is one isnt running already?\n. I will make the change.\n. The update is there I think everything is now good to go.\n. @kentcdodds do you want me to take point on this?  It is a recurring problem.  I think this issue should be moved to https://github.com/formly-js/angular-formly-templates-bootstrap.\n. Are you using controllerAs syntax?  If you are not that could cause the issue you are seeing.\n. You don't have to use controllerAs to work with formly.  The examples are just typically written that way.\n. Actually this would be helpful for when using the same fields array multiple times.  Right now I have to clone each copy of the fields config when creating formly-forms in an ng-repeat where each iteration uses the exact same fields array.\n. If `$log.warn` was used instead of `console.warn` would that also resolve this issue?  I am speaking exclusively about angular-formly rather than api-check.\n. @jpuzzo You can achieve the same effect by having a type that has a template that contains a formly-form.  This example shows how to achieve something similar http://angular-formly.com/#/example/advanced/repeating-section.\n. At this moment the feature doesn't exist.  There have been several requests for but it has been put off due to the custom type method working in the interim.  I will try to coming up with something.  Essentially fieldGroup is an api that sits outside of the lifecycle of a field and as such does not have many of the features you would find in the field api.\n\nhttps://github.com/formly-js/angular-formly/blob/0e400b65b86f02840ba045efbe5c21162c6b4c33/src/directives/formly-field.js#L36-L39\n. @jpuzzo Looks great.\n. @asadsahi did you try adding formlyConfig.extras.ngModelAttrsManipulatorPreferBound = false?\n. This seems to be a case of incorrect documentation.  The property should be `formlyConfig.extras.ngModelAttrsManipulatorPreferUnbound = true`.\n. I just submitted a change request on the docs.\n. Still has a typo ...\n\nAlso I think it should still remain as a feature.\n. @estaub check out this example http://angular-formly.com/#/example/advanced/nested-property-keys.  It This feature was added recently.\n. Is this for shiming the features of angular-1.3 with formly?\n. Sorry I was thinking of $validators.  That aside would this leverage $parsers and $formatters?\n. :+1:\n. > Any problem removing the default wrapper behavior? Basically, if you specify the name 'default' then it will wrap all types. This is a little bit too magical I think. And I believe it's undocumented.\n\nI would like that feature to stay.  I find it very useful especially when every field defines its own special things it is an easy way to extend types defined in a third party templates library.\n. I am against the change.  The reason being is that more implementation details now need to be known in order to know which object to place properties.  For example `placeholder` is an attribute normally placed on an element with a `ngModel` but doesn't have to be as is the case with ui-select.  Also you have said that required can be used for both `ngRequired` as well as in wrappers for styling.\n\nThe way my team uses it is we define types and the completely different teams build the forms.  So far the only issues we have run into has been around hide/hideExpression which make sense to be edge cases.\n\nIf this change goes through we will likely use the fieldTransform which is mentioned above.\n. How is this different than just setting ngModelAttrs with the different options?\n\n```\nngModelAttrs: {\n  dateDisplayFormat: {\n    attribute: 'date-format',\n    bound: 'something-date-format'\n  }\n}\n```\n. @prokilogrammer I override the  `$scope.options.value` in my controller or link if I want to define my own getterSetter.\n. I have an internal and an external representation of the input.  For example I have ui-select type.  ui-select requires an array of objects but the value I want stored on the formly model is the object's id or an array of ids.  The getterSetter handles that mapping for the type.\n. Please do not we currently use bower pretty heavily.\n. @kentcdodds we use wiredeps which leverages bower.json for our modules to inject the paths into several of our files.\n. @kentcdodds Where would you like the unit test placed?\n\nThe two places that make sense are formlyApiCheck.test.js  and formlyNgModelAttrsManipulator.test.js\n. @kentcdodds the issue with patching this is that the formController does not expose the array of controls.  There is some conventions that can be used to infer if a property on the form controller is a control.  https://github.com/ckniffen/angular.js/commit/e549f2d70c93ce402d781bc16b557b5950b2cbb3#diff-1838ed9bd28307b6d42de98549826ae5R304 uses `controls` which is a locally scoped variable.\n\nThe form could have all of its properties looped through and check every one that doest have a key that starts with `$` checked for the some NgModel or FormController properties and then call $setSubmitted.\n. I am making some progress at getting my PR in for angular.  In the mean time I think something can be done in https://github.com/formly-js/angular-formly/blob/1edd1058e9a42de912bf3df2f804bb525b61779e/src/directives/formly-form.js#L342\n\nSomething like\n\n``` javascript\nvar originalSetSubmitted = scope.theFormlyForm.$setSubmitted;\nscope.theFormlyForm.$setSubmitted = function(){\n  originalSetSubmitted();\n\n  angular.forEach(parentForm, function(control){\n    if (control.$setSubmitted) {\n      control.$setSubmitted();\n    }\n  });\n}\n```\n. @kentcdodds @Bedo81 This is actually a problem with the example.  ui-select works with angular-1.4 and I currently use it with my project running 1.4.0.  The issue with the example is that the `ui-select` formly type is defined as extending the formly-bootstrap-templates `select` type which defines a mapping for `ngOptions` in `ngModelAttrs`.  `ngOptions` is not a valid directive as of 1.4 on anything other than a `<select>` element.  ui-select does not need that attribute so I just made it not extend `select`.  Only draw back is that it doesn't inherit the apiCheck.\n\nEx. http://jsbin.com/kohowax/2/edit?html,js,output\n. @astromac if you can create an example following the instructions found here.  I can better assist you.\n\nAlso try the following template. That might work because the id will automatically add `id` to the element with the `ngModel` on it in your template which would make the `list` attribute self referential.\n\n```\n'<input class=\"form-control\" type=\"text\" list=\"{{id}}_list\" ng-model=\"model[options.key]\" /><datalist id=\"{{id}}_list\"><option ng-repeat=\"value in to.options\" value=\"{{value.value}}</option></datalist>'\n```\n. This issue is being closed in favor of formly-js/angular-formly-templates-bootstrap#54\n. @kentcdodds I thought there was ng-messages integration.\n. I feel like maybe this ticket should be moved to the formly website project.  As it is an enhancement request for an existing example.\n. I dont know if this fully applies but I wrote a utility to iterate over nested \"fields\".  I think it could be adapted to work with fieldGroups.\n\n```\nfunction iterateFields(fields, fn) {\n  _.each(fields, function(field) {\n    if(field.fields) {\n      iterateFields(field.fields, fn);\n      return;\n    }\n\n    fn(field);\n    if(field.templateOptions && field.templateOptions.fields) {\n      iterateFields(field.templateOptions.fields, fn);\n    }\n  });\n}\n```\n. I work on a team that develops tools used by a number of different apps and I have a abstract select type that other teams extend that internally leverages ui-select.  An example of this is we have `user` and `userGroup` types which extend `selectResource`.  All types that extend selectResource need to run through a templateManipulator.  I will work on creating a plnkr of this to better demonstrate the use case.\n. That will work perfect.  I forgot about the getType method on formlyConfig.  Thank you.\n. I am currently using angular 1.3 and we have not encountered this causing issues just yet.  I noticed it while debugging something unrelated and had remembered that during a previous version there was a fix for this and realized this was an uncovered edge case.  Your solution is fine.\n. Does it need to make the assumption that all elements with ngModel map to the same value?\n\nI ask because of https://github.com/formly-js/angular-formly/blob/573a9b070097f1ccd8f55eada4df2f8be7255e4e/src/directives/formly-field.js#L155.\n. I think it is still valid use case.  I have run into myself with a date-picker and time-picker directive in one field template.  I will have a PR sometime tonight.  It will only work if each instance of `ngModel` has a different name though.\n\nThis will not fix the symptoms seen in https://github.com/formly-js/angular-formly-templates-bootstrap/issues/19 though because in that case each element with `ngModel` in that template has the same name.  The following use case is the one that will be covered:\n\n``` html\n<input type=\"input\" name=\"start\" ng-model=\"options.model[options.key].stop\" />\n<input type=\"input\" name=\"stop\" ng-model=\"options.model[options.key].start\" />\n```\n\nThe tests I will be adding cover resetModel and that the formControl is made an array in case of multiple ng-model elements.  Are there any other features that leverage formControl?\n. What is the use case for having falsy templateUrl or template?\n. What are the use cases for 0, false and null? \n. Wrote two failing tests for this issue.  I will have some time tomorrow to do a proper PR with the fix tomorrow.\n\n```\n  it('should use templateUrl if type defines it and its parent has template defined', function(){\n    setterFn([\n      {\n        name,\n        template\n      },\n      {\n        name: 'type2',\n        extends: name,\n        templateUrl\n      }\n    ]);\n\n    expect(getterFn('type2').templateUrl).not.to.be.undefined;\n    expect(getterFn('type2').template).to.be.undefined;\n  });\n\n  it('should use template if type defines it and parent had templateUrl defined', function(){\n    setterFn([\n      {\n        name,\n        templateUrl\n      },\n      {\n        name: 'type2',\n        extends: name,\n        template\n      }\n    ]);\n\n    expect(getterFn('type2').template).not.to.be.undefined;\n    expect(getterFn('type2').templateUrl).to.be.undefined;\n  });\n});\n```\n. I may be missunderstanding the issue but I thought the following would work.\n\n```\n{\n  ngModelAttrs: {\n    foo: {\n      attribute: 'foo'\n    },\n    bar: {\n      attribute: 'bar'\n    }\n  },\n  templateOptions: {\n    foo: true,\n    bar: true\n  }\n}\n```\n. I have a feeling that the use case of an interpolated expression for the value of the dynamically added attribute the issue will still be there but for you example I don't see a problem.\n\nOne solution would be to change ngModelAttrs to be an array instead of an object.\n. I still think it is a valid issue because you cant have the same expression write to two different attributes just much more of an edge case now.\n. I don't know if this is related to the issue, but what I am most concerned about is that the `name` attribute of the fields in the repeat section are not unique.  I spent about an hour trying to figure out the issue is with that but to no avail.  I will revisit it tonight.\n. +1\n. My solution for this is to define the custom field's controller using the angular `Module.controller` method and then in the type definition do:\n\n``` javascript\n{\n  controller: 'CustomTypeController as typeCtrl'\n}\n```\n. The only small benefit I could see and that would be if someone wanted the controller definition to be \"private\" but still use controllerAs.  I don't think the benefit warrants a code change though unless there is a huge demand for it.\n. I personally expose most of mine so that they can be enhanced via delegate.  I always forget about angular 1.2 support :)\n. This is because awesome-bootstrap-checkbox requires you to have slightly different markup than you would typically have with bootstrap.  You need to modify the template that angular-formly-templates-bootstrap uses to reflect the required changes.\n. I think this is still the best way.  The only thing I don't yet know about is how to approach the digest.  Do we make it a breaking change or do the hacky thing of calling digest is one isnt running already?\n. I will make the change.\n. The update is there I think everything is now good to go.\n. @kentcdodds do you want me to take point on this?  It is a recurring problem.  I think this issue should be moved to https://github.com/formly-js/angular-formly-templates-bootstrap.\n. Are you using controllerAs syntax?  If you are not that could cause the issue you are seeing.\n. You don't have to use controllerAs to work with formly.  The examples are just typically written that way.\n. Actually this would be helpful for when using the same fields array multiple times.  Right now I have to clone each copy of the fields config when creating formly-forms in an ng-repeat where each iteration uses the exact same fields array.\n. If `$log.warn` was used instead of `console.warn` would that also resolve this issue?  I am speaking exclusively about angular-formly rather than api-check.\n. @jpuzzo You can achieve the same effect by having a type that has a template that contains a formly-form.  This example shows how to achieve something similar http://angular-formly.com/#/example/advanced/repeating-section.\n. At this moment the feature doesn't exist.  There have been several requests for but it has been put off due to the custom type method working in the interim.  I will try to coming up with something.  Essentially fieldGroup is an api that sits outside of the lifecycle of a field and as such does not have many of the features you would find in the field api.\n\nhttps://github.com/formly-js/angular-formly/blob/0e400b65b86f02840ba045efbe5c21162c6b4c33/src/directives/formly-field.js#L36-L39\n. @jpuzzo Looks great.\n. @asadsahi did you try adding formlyConfig.extras.ngModelAttrsManipulatorPreferBound = false?\n. This seems to be a case of incorrect documentation.  The property should be `formlyConfig.extras.ngModelAttrsManipulatorPreferUnbound = true`.\n. I just submitted a change request on the docs.\n. Still has a typo ...\n\nAlso I think it should still remain as a feature.\n. @estaub check out this example http://angular-formly.com/#/example/advanced/nested-property-keys.  It This feature was added recently.\n. Is this for shiming the features of angular-1.3 with formly?\n. Sorry I was thinking of $validators.  That aside would this leverage $parsers and $formatters?\n. :+1:\n. > Any problem removing the default wrapper behavior? Basically, if you specify the name 'default' then it will wrap all types. This is a little bit too magical I think. And I believe it's undocumented.\n\nI would like that feature to stay.  I find it very useful especially when every field defines its own special things it is an easy way to extend types defined in a third party templates library.\n. I am against the change.  The reason being is that more implementation details now need to be known in order to know which object to place properties.  For example `placeholder` is an attribute normally placed on an element with a `ngModel` but doesn't have to be as is the case with ui-select.  Also you have said that required can be used for both `ngRequired` as well as in wrappers for styling.\n\nThe way my team uses it is we define types and the completely different teams build the forms.  So far the only issues we have run into has been around hide/hideExpression which make sense to be edge cases.\n\nIf this change goes through we will likely use the fieldTransform which is mentioned above.\n. How is this different than just setting ngModelAttrs with the different options?\n\n```\nngModelAttrs: {\n  dateDisplayFormat: {\n    attribute: 'date-format',\n    bound: 'something-date-format'\n  }\n}\n```\n. @prokilogrammer I override the  `$scope.options.value` in my controller or link if I want to define my own getterSetter.\n. I have an internal and an external representation of the input.  For example I have ui-select type.  ui-select requires an array of objects but the value I want stored on the formly model is the object's id or an array of ids.  The getterSetter handles that mapping for the type.\n. Please do not we currently use bower pretty heavily.\n. @kentcdodds we use wiredeps which leverages bower.json for our modules to inject the paths into several of our files.\n. @kentcdodds Where would you like the unit test placed?\n\nThe two places that make sense are formlyApiCheck.test.js  and formlyNgModelAttrsManipulator.test.js\n. @kentcdodds the issue with patching this is that the formController does not expose the array of controls.  There is some conventions that can be used to infer if a property on the form controller is a control.  https://github.com/ckniffen/angular.js/commit/e549f2d70c93ce402d781bc16b557b5950b2cbb3#diff-1838ed9bd28307b6d42de98549826ae5R304 uses `controls` which is a locally scoped variable.\n\nThe form could have all of its properties looped through and check every one that doest have a key that starts with `$` checked for the some NgModel or FormController properties and then call $setSubmitted.\n. I am making some progress at getting my PR in for angular.  In the mean time I think something can be done in https://github.com/formly-js/angular-formly/blob/1edd1058e9a42de912bf3df2f804bb525b61779e/src/directives/formly-form.js#L342\n\nSomething like\n\n``` javascript\nvar originalSetSubmitted = scope.theFormlyForm.$setSubmitted;\nscope.theFormlyForm.$setSubmitted = function(){\n  originalSetSubmitted();\n\n  angular.forEach(parentForm, function(control){\n    if (control.$setSubmitted) {\n      control.$setSubmitted();\n    }\n  });\n}\n```\n. @kentcdodds @Bedo81 This is actually a problem with the example.  ui-select works with angular-1.4 and I currently use it with my project running 1.4.0.  The issue with the example is that the `ui-select` formly type is defined as extending the formly-bootstrap-templates `select` type which defines a mapping for `ngOptions` in `ngModelAttrs`.  `ngOptions` is not a valid directive as of 1.4 on anything other than a `<select>` element.  ui-select does not need that attribute so I just made it not extend `select`.  Only draw back is that it doesn't inherit the apiCheck.\n\nEx. http://jsbin.com/kohowax/2/edit?html,js,output\n. @astromac if you can create an example following the instructions found here.  I can better assist you.\n\nAlso try the following template. That might work because the id will automatically add `id` to the element with the `ngModel` on it in your template which would make the `list` attribute self referential.\n\n```\n'<input class=\"form-control\" type=\"text\" list=\"{{id}}_list\" ng-model=\"model[options.key]\" /><datalist id=\"{{id}}_list\"><option ng-repeat=\"value in to.options\" value=\"{{value.value}}</option></datalist>'\n```\n. This issue is being closed in favor of formly-js/angular-formly-templates-bootstrap#54\n. @kentcdodds I thought there was ng-messages integration.\n. I feel like maybe this ticket should be moved to the formly website project.  As it is an enhancement request for an existing example.\n. I dont know if this fully applies but I wrote a utility to iterate over nested \"fields\".  I think it could be adapted to work with fieldGroups.\n\n```\nfunction iterateFields(fields, fn) {\n  _.each(fields, function(field) {\n    if(field.fields) {\n      iterateFields(field.fields, fn);\n      return;\n    }\n\n    fn(field);\n    if(field.templateOptions && field.templateOptions.fields) {\n      iterateFields(field.templateOptions.fields, fn);\n    }\n  });\n}\n```\n. ",
    "theotherp": "I still have this problem.\n\nIt even occurs in your example here: http://angular-formly.com/#/example/advanced/repeating-section\n![Screenshot](http://i.imgur.com/uJQ98vS.png)\n. Uhm, I just realized I might've misunderstood something. I read the tips and they said to disable apiCheck.js in production. But I don't even use any custom API checks, so disabling it probably wouldn't do anything, right?\n. I still have this problem.\n\nIt even occurs in your example here: http://angular-formly.com/#/example/advanced/repeating-section\n![Screenshot](http://i.imgur.com/uJQ98vS.png)\n. Uhm, I just realized I might've misunderstood something. I read the tips and they said to disable apiCheck.js in production. But I don't even use any custom API checks, so disabling it probably wouldn't do anything, right?\n. ",
    "ColCh": "@kentcdodds No one refuses to remove this section (`peerDependencies`). It will remain, but change  behaviour. I should notice here that it's more friendly way to conflict resolving. (I faced peerDeps conflict many times. Really frustrating thing)\n\nYes, now we should maintain peerDeps manually, but it's more transparent.\n. I've misunderstood you. I thought you're about to put _angular_ inside of _dependencies_ section. Sorry for breaking into conversation!\n. @kentcdodds No one refuses to remove this section (`peerDependencies`). It will remain, but change  behaviour. I should notice here that it's more friendly way to conflict resolving. (I faced peerDeps conflict many times. Really frustrating thing)\n\nYes, now we should maintain peerDeps manually, but it's more transparent.\n. I've misunderstood you. I thought you're about to put _angular_ inside of _dependencies_ section. Sorry for breaking into conversation!\n. ",
    "linclark": "I checked with one of the CLI engineers. Unfortunately, listing a dependency both in `dependencies` and `peerDependencies` will mean that you won't get the warning if the dependencies conflict. Instead, the dependency will just be installed under your module.\n\n> I just don't like the idea of forcing people to do something extra to consume my library, but in npm@3 the peerDeps wont be installed by default anymore so they'd have to install those deps themselves anyway. So I'm torn.\n\nI just brought this up internally based on this discussion and a few others I've had. We will be focusing a lot more on front-end npm in the near future, so we'll hopefully have a feature which helps with this. It might not be `peerDependencies`, but might be something new.\n. Whether or not to recommend `peerDependencies` is something that we debate at npm. Some people think that they cause more pain than they are worth and recommend simply using dependencies and dedupe. I'd probably go with `peerDeps`, thought.\n. I checked with one of the CLI engineers. Unfortunately, listing a dependency both in `dependencies` and `peerDependencies` will mean that you won't get the warning if the dependencies conflict. Instead, the dependency will just be installed under your module.\n\n> I just don't like the idea of forcing people to do something extra to consume my library, but in npm@3 the peerDeps wont be installed by default anymore so they'd have to install those deps themselves anyway. So I'm torn.\n\nI just brought this up internally based on this discussion and a few others I've had. We will be focusing a lot more on front-end npm in the near future, so we'll hopefully have a feature which helps with this. It might not be `peerDependencies`, but might be something new.\n. Whether or not to recommend `peerDependencies` is something that we debate at npm. Some people think that they cause more pain than they are worth and recommend simply using dependencies and dedupe. I'd probably go with `peerDeps`, thought.\n. ",
    "pauljeter": "Yes. Just like your examples, jQuery => api-check => angular => angular-messages => formly\nAlso, if I revert to 5.2.1, everything works. No changes other than updating formly and api-check\n. Sure. Thanks for the lightning quick response. I am on a deadline, so continuing with 5.2.1 for today. I will create a jsbin example as soon as I can. BTW, attended your workshop at ng-conf. Great work.\n. That did it! Thanks. Any specific reason for changing the file name? Now I see it in the 7.0.0-beta notes in the api-check Changlog, but might want to mention that in the Formly Changlog as well.\n. No prob. Thanks for the great form tool!\n. Yes. Just like your examples, jQuery => api-check => angular => angular-messages => formly\nAlso, if I revert to 5.2.1, everything works. No changes other than updating formly and api-check\n. Sure. Thanks for the lightning quick response. I am on a deadline, so continuing with 5.2.1 for today. I will create a jsbin example as soon as I can. BTW, attended your workshop at ng-conf. Great work.\n. That did it! Thanks. Any specific reason for changing the file name? Now I see it in the 7.0.0-beta notes in the api-check Changlog, but might want to mention that in the Formly Changlog as well.\n. No prob. Thanks for the great form tool!\n. ",
    "XciD": "+1\n. Thanks for you answer. \n\nI can provide you on private a peace of our code where you can see this appending.\n\nWe are also using ocLazyLoad to load template dependency (like select2 or datatable) on the fly so an state variable on each Form could be nice, we can put an loader during the process..\n. I understand perfectly, nevertheless we are quite ready to go live with our product and it's one of our \"biggest\" problem, It's not very \"sexy\" for users when they display the form.\n\nI will try to understand your code in order to implement this temporary fix :)\n. Thanks for your answer.\n\nWe just found that if we remove template that works with [ocLazyLoad](https://github.com/ocombe/ocLazyLoad) the form render faster and enough quick for us.\n\nWe had some directive with ocLazyLoad to load dependencies on the fly like select2 or datepicker, and they trigger the link function before rendering on front. \n\nWe fix this by loading all our component in the resolve of the route... Not the best solution.\n\nI think you should consider to implementing a state variable to the Formly directive.\n. +1\n. Thanks for you answer. \n\nI can provide you on private a peace of our code where you can see this appending.\n\nWe are also using ocLazyLoad to load template dependency (like select2 or datatable) on the fly so an state variable on each Form could be nice, we can put an loader during the process..\n. I understand perfectly, nevertheless we are quite ready to go live with our product and it's one of our \"biggest\" problem, It's not very \"sexy\" for users when they display the form.\n\nI will try to understand your code in order to implement this temporary fix :)\n. Thanks for your answer.\n\nWe just found that if we remove template that works with [ocLazyLoad](https://github.com/ocombe/ocLazyLoad) the form render faster and enough quick for us.\n\nWe had some directive with ocLazyLoad to load dependencies on the fly like select2 or datepicker, and they trigger the link function before rendering on front. \n\nWe fix this by loading all our component in the resolve of the route... Not the best solution.\n\nI think you should consider to implementing a state variable to the Formly directive.\n. ",
    "pedrocatre": "+1\nImprovements on this would be great. I have a form that in the worst case can have over 100 fields on the page. Not only does it look bad because it takes time to show them all, it can also become quite slow.\n. I will check it out. Thanks.\n\nThe thing is it is possible that a \"hard coded\" traditional angular form would still be slow with so many fields being shown. But I do need to investigate this further. When all of the form fields groups are hidden except for one I still get a slow form for safari and ie9.\n\nI basically used ng-options so the models only update on blur and this made things much much better for the worst step of the form. But I did not think I would have to do this.\n. You can use ng-model options so that the value only updates on blur or after several milliseconds.\nYou can also try to remove the number o bindings in your templates (for example: I would have liked to have bindings to change the classes on the form so I can customise it to different uses but I can live without all that. Finally use one time binding for everything that can be one time binded.\n\nAdditionally you could divide the form into steps (there is an example of using angular form with a multistep wizard) so that you don't have all the watchers for the form active at the same time. The wizard being used in the example uses ng-show and you don't want this though. But it is simple enough to go into the source code and change it to use ng-if. Hope this helps.\n. Can't :( I really need to use ng-if because there are many dependencies and many fields hidden in the same step of the form. If I use ng-show all their binding will be active even though they are not being displayed.\n\nI already have some performance issues (specially with older browsers and weaker machines) so I really can't afford to use ng-show.\n\nUnless there is a way to change this per field. Because then I could just say for these 3 fields I would use ng-show (because they are not even form fields, they are headers and they don't have many bindings).\n. These headers can appear in the middle of the form fields, that is one of the reasons I don't hardcode them. The second reason is that it is very appealing to have the entire form described in one JSON. Also because I intend to reuse as much as I can for future forms that are very different but have similar requirements, and I want to be able to build those forms very fast.\n\nBut is this hide thing a bug?\n\nAlso regarding what you said \"Note, obviously, you've got some serious performance considerations, so you may need to take things at a bit of a different approach. If you have a bunch of fields with their own hide conditions, instead of paying for a watcher for each of those, create your own watcher and respond to model changes yourself (by setting hide on the appropriate fields).\" You mean creating watchers outside of the JSON form configuration right?\n. hideExpression attribute would be nice thanks! I'm still going to think how I could do this with the existing mechanisms. One thing that comes to mind would be to have only one header instead of 3 and just change its text. It is less easy to configure and see, but it would probably work and I would have less watchers.\n\nRegarding what you said about the watcher instead of expressionProperties it would not help in my case because I'm not using the expressionProperties per field. For the step that can have more than 100 fields I put them inside groups and I only have the expressionProperties per group of fields (8 groups in total each group has many fields inside) not in every field. It is strange that I have performance issues and so many watchers (I used your awesome ng-stats lib to see this!) because I one time bind most things inside the fields. Also I ng-if the groups until they are necessary. Still on that step in the best case scenario I have 513 watchers (before the user starts interacting with the form and causing more fields to show up). Worst case I have more than 3000 watchers. I will have to find time to take a closer look.\n. Yes, sorry it took my a while to answer. I only had the opportunity to test this today. It solves my use case :) thanks!\n. +1\nImprovements on this would be great. I have a form that in the worst case can have over 100 fields on the page. Not only does it look bad because it takes time to show them all, it can also become quite slow.\n. I will check it out. Thanks.\n\nThe thing is it is possible that a \"hard coded\" traditional angular form would still be slow with so many fields being shown. But I do need to investigate this further. When all of the form fields groups are hidden except for one I still get a slow form for safari and ie9.\n\nI basically used ng-options so the models only update on blur and this made things much much better for the worst step of the form. But I did not think I would have to do this.\n. You can use ng-model options so that the value only updates on blur or after several milliseconds.\nYou can also try to remove the number o bindings in your templates (for example: I would have liked to have bindings to change the classes on the form so I can customise it to different uses but I can live without all that. Finally use one time binding for everything that can be one time binded.\n\nAdditionally you could divide the form into steps (there is an example of using angular form with a multistep wizard) so that you don't have all the watchers for the form active at the same time. The wizard being used in the example uses ng-show and you don't want this though. But it is simple enough to go into the source code and change it to use ng-if. Hope this helps.\n. Can't :( I really need to use ng-if because there are many dependencies and many fields hidden in the same step of the form. If I use ng-show all their binding will be active even though they are not being displayed.\n\nI already have some performance issues (specially with older browsers and weaker machines) so I really can't afford to use ng-show.\n\nUnless there is a way to change this per field. Because then I could just say for these 3 fields I would use ng-show (because they are not even form fields, they are headers and they don't have many bindings).\n. These headers can appear in the middle of the form fields, that is one of the reasons I don't hardcode them. The second reason is that it is very appealing to have the entire form described in one JSON. Also because I intend to reuse as much as I can for future forms that are very different but have similar requirements, and I want to be able to build those forms very fast.\n\nBut is this hide thing a bug?\n\nAlso regarding what you said \"Note, obviously, you've got some serious performance considerations, so you may need to take things at a bit of a different approach. If you have a bunch of fields with their own hide conditions, instead of paying for a watcher for each of those, create your own watcher and respond to model changes yourself (by setting hide on the appropriate fields).\" You mean creating watchers outside of the JSON form configuration right?\n. hideExpression attribute would be nice thanks! I'm still going to think how I could do this with the existing mechanisms. One thing that comes to mind would be to have only one header instead of 3 and just change its text. It is less easy to configure and see, but it would probably work and I would have less watchers.\n\nRegarding what you said about the watcher instead of expressionProperties it would not help in my case because I'm not using the expressionProperties per field. For the step that can have more than 100 fields I put them inside groups and I only have the expressionProperties per group of fields (8 groups in total each group has many fields inside) not in every field. It is strange that I have performance issues and so many watchers (I used your awesome ng-stats lib to see this!) because I one time bind most things inside the fields. Also I ng-if the groups until they are necessary. Still on that step in the best case scenario I have 513 watchers (before the user starts interacting with the form and causing more fields to show up). Worst case I have more than 3000 watchers. I will have to find time to take a closer look.\n. Yes, sorry it took my a while to answer. I only had the opportunity to test this today. It solves my use case :) thanks!\n. ",
    "cnaccio": "I'm currently experiencing a huge performance problem using angular-formly with a form fields array containing 1300 items (form fields, templates, classNames, etc...). My development machine is pretty beefy (32GB memory, SSD, Intel i7 3.5GHz quad core), but when I update the formFields array that the angular-formly directive is configured to use my browser slows to a crawl. What's interesting is that after a couple minutes things are back to normal, and I can scroll through this huge form while performance remains snappy. However if I attempt to edit any of the fields by changing a value to slowness starts again. Any advice would be much appreciated. \n. Here's a jsbin I setup for demonstrate the exact trouble I'm having.\n\nhttp://jsbin.com/yeticelepa/3/edit?html,js,output\n. Lol I figured that much. I'm trying to figure out a better solution... Maybe something like instead of rending a form simply render a view where I can click on a field to make it editable instead of assuming every field needs to be editable. Any advice on using formly with x-editable?\n. I'm currently experiencing a huge performance problem using angular-formly with a form fields array containing 1300 items (form fields, templates, classNames, etc...). My development machine is pretty beefy (32GB memory, SSD, Intel i7 3.5GHz quad core), but when I update the formFields array that the angular-formly directive is configured to use my browser slows to a crawl. What's interesting is that after a couple minutes things are back to normal, and I can scroll through this huge form while performance remains snappy. However if I attempt to edit any of the fields by changing a value to slowness starts again. Any advice would be much appreciated. \n. Here's a jsbin I setup for demonstrate the exact trouble I'm having.\n\nhttp://jsbin.com/yeticelepa/3/edit?html,js,output\n. Lol I figured that much. I'm trying to figure out a better solution... Maybe something like instead of rending a form simply render a view where I can click on a field to make it editable instead of assuming every field needs to be editable. Any advice on using formly with x-editable?\n. ",
    "SomeKittens": "Specifically, `$q` runs `$evalAsync` which means that while it's not a 1:1 $q:$digest, it's about 70-80% when the promises resolve in 0 < x < 1000ms.\n\nJSBin with details: http://jsbin.com/sarabifuni/1/edit?html,js,output\n. Not a long-term solution, but Angular Buddies is looking for a target for our October [FOSS Bash](https://gist.github.com/SomeKittens/bf24e8bd854bf79ea055).  Would you be interested?\n. 14th's a Wednesday, I thought weekends might be best.\n. 10th works for me if it works for you.  We should add it to https://github.com/FOSS-Bash/wobsite/issues/1\n. 10th it is, you're now featured on http://foss-hackday.github.io/\n\nLet's talk goals.  There aren't very many open issues - perhaps you want to increase code coverage & hit 100%?  More examples?  Sky's the limit!\n. Haven't done much promotion so at this stage I think it's ok.\n. Specifically, `$q` runs `$evalAsync` which means that while it's not a 1:1 $q:$digest, it's about 70-80% when the promises resolve in 0 < x < 1000ms.\n\nJSBin with details: http://jsbin.com/sarabifuni/1/edit?html,js,output\n. Not a long-term solution, but Angular Buddies is looking for a target for our October [FOSS Bash](https://gist.github.com/SomeKittens/bf24e8bd854bf79ea055).  Would you be interested?\n. 14th's a Wednesday, I thought weekends might be best.\n. 10th works for me if it works for you.  We should add it to https://github.com/FOSS-Bash/wobsite/issues/1\n. 10th it is, you're now featured on http://foss-hackday.github.io/\n\nLet's talk goals.  There aren't very many open issues - perhaps you want to increase code coverage & hit 100%?  More examples?  Sky's the limit!\n. Haven't done much promotion so at this stage I think it's ok.\n. ",
    "jvandemo": "I have created a plnkr here with the current master version of formly:\n\nhttp://plnkr.co/edit/wPKCKVGiR99wEUZFalp0?p=preview\n\nNow you can edit `formly.js` directly in Plnkr without having to install/build anything locally (for those interested in helping troubleshoot).\n. Update: enabling apply async:\n\n``` javascript\napp.config(function ($httpProvider) {\n  $httpProvider.useApplyAsync(true);\n});\n```\n\ndoes not make a difference in this example, probably because the templates are already loaded in the cache.\n. @kentcdodds &mdash; I have added a `$timeout` around `getFieldTemplate()` on line 1137 of `formly.js` in http://plnkr.co/edit/Ab0A2k1can4fyY4g3b6H?p=preview\n\nThis pushes the logic to the next tick and speeds up rendering a lot. However, my knowledge of formly is not good enough to judge what the impact is on its inner workings.\n\nIf you open up the log, you will see that the fields render quickly and then the promises are resolved in the background while the fields are already displayed.\n. > Thanks for setting up the plunkr and the improved example with a setTimeout/$timeout. Unfortunately, I tried it out in my app and it's hard to describe but the user can visually see things getting rendered which isn't very pretty. Kind of a toss-up which is a better experience.\n\n@kentcdodds &mdash; instead of wrapping the `$timeout` around the entire `getFieldTemplate` call, you can also use it inside one of the chained actions that you think is causing the slowdown. So it would e.g. immediately perform the first 3 actions and then send the last 3 actions to the next tick.\n\nUnfortunately I'm not familiar with the inner workings of formly. I can try a few variations but you may have better insights in which parts of the chain need to be performed immediately to prevent rendering issues.\n\nI will set up a few experiments to see if I can figure it out...\n. Here's a screenshot of a timeline and CPU profile using 1000 fields and the original formly from master:\n\n![timeline](https://cloud.githubusercontent.com/assets/1859381/7647209/12f13816-fad1-11e4-85ca-b624b9e7e9db.png)\n\n![digest](https://cloud.githubusercontent.com/assets/1859381/7647194/bf5dbe36-fad0-11e4-98fa-b123a2e67301.png)\n\nLooks like digest is eating up all CPU and causing the delays, not DOM rendering.\n. @kentcdodds &mdash; I have added some code to hide the field until it the end of the chain has been reached: http://plnkr.co/edit/37gE36pW5PIF6osCUVCB?p=preview (see line 1151 in formly.js).\n\nThis should take care of hiding the field until it's promise has been resolved in the background.\n. > I feel like if there were a way to tell angular to pause digests for just a moment while this thing compiled, that would improve things. But that may just be me misunderstanding how compiling things works. \n\n@kentcdodds &mdash; It's not the compilation causing the problem here. You are resolving promises inside the link function, so you will always have to resolve `n` promises for `n` elements.\n\nWhat you can do is write code to queue promises and then call a digest after a certain timeout. So instead of resolving the promise in the link function, you would then send the promise to the queue.\n\nThe queue could be managed by a service or a controller in a surrounding directive.\n\nThen it would be a bit similar to how `$httpProvider.useApplyAsync()` works.\n. > What I don't understand is how putting those promises into a queue outside of the link function will prevent a $digest from being called after they are each resolved. The only thing I could think of to avoid that was to either use $$q or the native Promise (or a polyfill) and trying those didn't seem to make a difference.\n\nUsing native promises you can prevent Angular from doing a digest for every single promise (since it's happening outside the Angular world) and then perform a manual digest after a set amount of time.\n\nThis reduces the number of digest cycles. However, it will only speed things up if it is the digest cycle that is actually causing the problem since the amount of logic (to resolve the promises) remains the same.\n\nA normal timeline using $q:\n\n```\n- resolve promise\n- digest\n- resolve promise\n- digest\n- resolve promise\n- digest\n- resolve promise\n- digest\n- ...\n```\n\nWhen using a queued approach (using promises that don't trigger digest cycle automatically):\n\n```\n- resolve promise\n- resolve promise\n- resolve promise\n- resolve promise\n- digest\n- ...\n```\n\nSo if the digest cycle is causing the slowness, it will help since there are less digest cycles.\n\nIf it is the logic to resolve the promises, this will not provide any benefits, since there is an equal amount of logic to perform.\n\nHope that helps!\n. Quick update: just noticed that you use `$http.get` in `getTemplate`.\n\nSince `$httpProvider.useApplyAsync(true)` does not cause significant speed improvements, building your own queue will probably not provide any benefits either, unless you could make the interval a bit larger (I believe it is around 10ms with useApplyAsync).\n\nI'll see if I can add some timers to find out if it would help...\n. @gdi2290 &mdash; Sounds awesome! Is it available online?\n. I have created a plnkr that shows the milliseconds for every promise chain: http://plnkr.co/edit/fbbs2aHsPcLof3ENQnml?p=preview\n\n![chains](https://cloud.githubusercontent.com/assets/1859381/7647880/f8f75a7a-fadb-11e4-8431-635ab8fa888c.png)\n- each promise chain takes about 5ms on average on my macbook\n- `useApplyAsync` queues for about 10ms so that explains why it doesn't help much\n. @kentcdodds &mdash; From what I can see so far it takes the promise chain 5ms on average (see screenshot in previous comment) to complete.\n\nSo it will take on average:\n- 100ms to process form with 20 fields\n- 500ms to process form with 100 fields\n- 5000ms to process form with 1000 fields\n\nSo no matter what actions you take outside of the promise chain, these numbers are always going to be the minimum time needed to process the form unless you start changing the promise chain itself.\n\nIf you're interested in optimizing the chain itself, we can add timers for each function in the chain to see what is taking most time.\n. I have added code to see a breakdown of how much milliseconds each step in the chain takes:\nhttp://plnkr.co/edit/fbbs2aHsPcLof3ENQnml?p=preview\n\nIf you open the console, you can now see:\n![breakdown](https://cloud.githubusercontent.com/assets/1859381/7648337/2cab9236-fae2-11e4-8620-710362e5252e.png)\n\nLooks like most of the time is spent on transclusion.\n. I have created a plnkr here with the current master version of formly:\n\nhttp://plnkr.co/edit/wPKCKVGiR99wEUZFalp0?p=preview\n\nNow you can edit `formly.js` directly in Plnkr without having to install/build anything locally (for those interested in helping troubleshoot).\n. Update: enabling apply async:\n\n``` javascript\napp.config(function ($httpProvider) {\n  $httpProvider.useApplyAsync(true);\n});\n```\n\ndoes not make a difference in this example, probably because the templates are already loaded in the cache.\n. @kentcdodds &mdash; I have added a `$timeout` around `getFieldTemplate()` on line 1137 of `formly.js` in http://plnkr.co/edit/Ab0A2k1can4fyY4g3b6H?p=preview\n\nThis pushes the logic to the next tick and speeds up rendering a lot. However, my knowledge of formly is not good enough to judge what the impact is on its inner workings.\n\nIf you open up the log, you will see that the fields render quickly and then the promises are resolved in the background while the fields are already displayed.\n. > Thanks for setting up the plunkr and the improved example with a setTimeout/$timeout. Unfortunately, I tried it out in my app and it's hard to describe but the user can visually see things getting rendered which isn't very pretty. Kind of a toss-up which is a better experience.\n\n@kentcdodds &mdash; instead of wrapping the `$timeout` around the entire `getFieldTemplate` call, you can also use it inside one of the chained actions that you think is causing the slowdown. So it would e.g. immediately perform the first 3 actions and then send the last 3 actions to the next tick.\n\nUnfortunately I'm not familiar with the inner workings of formly. I can try a few variations but you may have better insights in which parts of the chain need to be performed immediately to prevent rendering issues.\n\nI will set up a few experiments to see if I can figure it out...\n. Here's a screenshot of a timeline and CPU profile using 1000 fields and the original formly from master:\n\n![timeline](https://cloud.githubusercontent.com/assets/1859381/7647209/12f13816-fad1-11e4-85ca-b624b9e7e9db.png)\n\n![digest](https://cloud.githubusercontent.com/assets/1859381/7647194/bf5dbe36-fad0-11e4-98fa-b123a2e67301.png)\n\nLooks like digest is eating up all CPU and causing the delays, not DOM rendering.\n. @kentcdodds &mdash; I have added some code to hide the field until it the end of the chain has been reached: http://plnkr.co/edit/37gE36pW5PIF6osCUVCB?p=preview (see line 1151 in formly.js).\n\nThis should take care of hiding the field until it's promise has been resolved in the background.\n. > I feel like if there were a way to tell angular to pause digests for just a moment while this thing compiled, that would improve things. But that may just be me misunderstanding how compiling things works. \n\n@kentcdodds &mdash; It's not the compilation causing the problem here. You are resolving promises inside the link function, so you will always have to resolve `n` promises for `n` elements.\n\nWhat you can do is write code to queue promises and then call a digest after a certain timeout. So instead of resolving the promise in the link function, you would then send the promise to the queue.\n\nThe queue could be managed by a service or a controller in a surrounding directive.\n\nThen it would be a bit similar to how `$httpProvider.useApplyAsync()` works.\n. > What I don't understand is how putting those promises into a queue outside of the link function will prevent a $digest from being called after they are each resolved. The only thing I could think of to avoid that was to either use $$q or the native Promise (or a polyfill) and trying those didn't seem to make a difference.\n\nUsing native promises you can prevent Angular from doing a digest for every single promise (since it's happening outside the Angular world) and then perform a manual digest after a set amount of time.\n\nThis reduces the number of digest cycles. However, it will only speed things up if it is the digest cycle that is actually causing the problem since the amount of logic (to resolve the promises) remains the same.\n\nA normal timeline using $q:\n\n```\n- resolve promise\n- digest\n- resolve promise\n- digest\n- resolve promise\n- digest\n- resolve promise\n- digest\n- ...\n```\n\nWhen using a queued approach (using promises that don't trigger digest cycle automatically):\n\n```\n- resolve promise\n- resolve promise\n- resolve promise\n- resolve promise\n- digest\n- ...\n```\n\nSo if the digest cycle is causing the slowness, it will help since there are less digest cycles.\n\nIf it is the logic to resolve the promises, this will not provide any benefits, since there is an equal amount of logic to perform.\n\nHope that helps!\n. Quick update: just noticed that you use `$http.get` in `getTemplate`.\n\nSince `$httpProvider.useApplyAsync(true)` does not cause significant speed improvements, building your own queue will probably not provide any benefits either, unless you could make the interval a bit larger (I believe it is around 10ms with useApplyAsync).\n\nI'll see if I can add some timers to find out if it would help...\n. @gdi2290 &mdash; Sounds awesome! Is it available online?\n. I have created a plnkr that shows the milliseconds for every promise chain: http://plnkr.co/edit/fbbs2aHsPcLof3ENQnml?p=preview\n\n![chains](https://cloud.githubusercontent.com/assets/1859381/7647880/f8f75a7a-fadb-11e4-8431-635ab8fa888c.png)\n- each promise chain takes about 5ms on average on my macbook\n- `useApplyAsync` queues for about 10ms so that explains why it doesn't help much\n. @kentcdodds &mdash; From what I can see so far it takes the promise chain 5ms on average (see screenshot in previous comment) to complete.\n\nSo it will take on average:\n- 100ms to process form with 20 fields\n- 500ms to process form with 100 fields\n- 5000ms to process form with 1000 fields\n\nSo no matter what actions you take outside of the promise chain, these numbers are always going to be the minimum time needed to process the form unless you start changing the promise chain itself.\n\nIf you're interested in optimizing the chain itself, we can add timers for each function in the chain to see what is taking most time.\n. I have added code to see a breakdown of how much milliseconds each step in the chain takes:\nhttp://plnkr.co/edit/fbbs2aHsPcLof3ENQnml?p=preview\n\nIf you open the console, you can now see:\n![breakdown](https://cloud.githubusercontent.com/assets/1859381/7648337/2cab9236-fae2-11e4-8620-710362e5252e.png)\n\nLooks like most of the time is spent on transclusion.\n. ",
    "kentcooper": "Just to add a different perspective to this. I currently do something similar to formly except I use the server to basically render a raw angular form and past about 200 inputs just compiling the HTML takes a significant amount of time. I did a couple of benchmarks using 200 fields in formly and 200 straight angular fields and the performance difference is not very noticeable. \n. It seemed that way to me. I could try running a different number of fields though. I wasn't sure at what number of fields the slow down was occurring in formly so I just based it on a form I already had created.\n. Just to add a different perspective to this. I currently do something similar to formly except I use the server to basically render a raw angular form and past about 200 inputs just compiling the HTML takes a significant amount of time. I did a couple of benchmarks using 200 fields in formly and 200 straight angular fields and the performance difference is not very noticeable. \n. It seemed that way to me. I could try running a different number of fields though. I wasn't sure at what number of fields the slow down was occurring in formly so I just based it on a form I already had created.\n. ",
    "PatrickJS": "I used $$q and got it working the way that everyone wanted \n. @jvandemo yeah http://plnkr.co/sex06c\n. you can also get some huge perf gains, in terms of dom manipulation, by cloning rather than `.html()`/`.append()`\n. I used $$q and got it working the way that everyone wanted \n. @jvandemo yeah http://plnkr.co/sex06c\n. you can also get some huge perf gains, in terms of dom manipulation, by cloning rather than `.html()`/`.append()`\n. ",
    "eufloyd": "Hi, just as a hint. \r\n\r\nWe were trying to solve a performance issue, and I tried some of the alternatives presented here, so I will tell what we did, it may help someone.\r\n\r\nWe had  performance issues on a form with 340+ fields. We use text input, selects, text areas, etc. The problem was, whenever we changed an input value, or changed a selected option, it took 5 seconds to update the model. During this time, the other select fields went blank and the browser went slow. \r\n\r\nWe show the fields in different tabs, and each tab has it's formly form.\r\n\r\nSolution:\r\nWe had and object called product as our ng-model, something like this:\r\n`{\"product\":{\"many\":\"fields\" }}`\r\n\r\nNow we  converted the object to array, and each array position is a not so big group of fields(object):\r\n`{\"product\":[{\"notSoManyFields\":{\"field:''value\"} }]}`\r\n\r\nNow the update is instantaneous, because not all the fields call digest on each change of value.\r\nWe needed to make the list an object again before persisting it, but it took little effort.\r\n\r\nHope it helps!\r\n\r\n. Hi, just as a hint. \r\n\r\nWe were trying to solve a performance issue, and I tried some of the alternatives presented here, so I will tell what we did, it may help someone.\r\n\r\nWe had  performance issues on a form with 340+ fields. We use text input, selects, text areas, etc. The problem was, whenever we changed an input value, or changed a selected option, it took 5 seconds to update the model. During this time, the other select fields went blank and the browser went slow. \r\n\r\nWe show the fields in different tabs, and each tab has it's formly form.\r\n\r\nSolution:\r\nWe had and object called product as our ng-model, something like this:\r\n`{\"product\":{\"many\":\"fields\" }}`\r\n\r\nNow we  converted the object to array, and each array position is a not so big group of fields(object):\r\n`{\"product\":[{\"notSoManyFields\":{\"field:''value\"} }]}`\r\n\r\nNow the update is instantaneous, because not all the fields call digest on each change of value.\r\nWe needed to make the list an object again before persisting it, but it took little effort.\r\n\r\nHope it helps!\r\n\r\n. ",
    "wfsm": "@kentcdodds This example is no longer exist. Any example for different validation, like required, not match min/max length, two field are not match?\n. @kentcdodds This example is no longer exist. Any example for different validation, like required, not match min/max length, two field are not match?\n. ",
    "jayasrinagrale": "All these links are redirecting back to http://angular-formly.com/#!/. @benoror Thanks for sharing the example. I noticed that you have used wrapper as panel.\r\nIs there a list of possible wrappers that can be used?. All these links are redirecting back to http://angular-formly.com/#!/. @benoror Thanks for sharing the example. I noticed that you have used wrapper as panel.\r\nIs there a list of possible wrappers that can be used?. ",
    "gmsewell6": "awesome! looking forward to trying it out. thanks for the quick response!\n. awesome! looking forward to trying it out. thanks for the quick response!\n. ",
    "jaymorgan": "Great, thanks man. That worked. I would suggest adding that to the \"Getting Started\" explanation. \n. Great, thanks man. That worked. I would suggest adding that to the \"Getting Started\" explanation. \n. ",
    "swifthand": "As for the issue I want to submit in the first place, I will still attempt to reproduce it via JS Bin by stripping out and replacing content from one of the working examples over at [the examples page](http://angular-formly.com/#/).\n. It does work now. Thanks!\n. Thanks so much! I am in the process of trying to work my way through the docs on `ngModelAttrsTemplateManipulator` but will try to apply the workaround first.\n. Installed from master and removed the workarounds. Specifying names now works for all of my custom templates and the input types that I found issues with before (so I've tested pretty much everything besides radio buttons).\n. I'm going to try and throw together a pull request in a few minutes.\n. As for the issue I want to submit in the first place, I will still attempt to reproduce it via JS Bin by stripping out and replacing content from one of the working examples over at [the examples page](http://angular-formly.com/#/).\n. It does work now. Thanks!\n. Thanks so much! I am in the process of trying to work my way through the docs on `ngModelAttrsTemplateManipulator` but will try to apply the workaround first.\n. Installed from master and removed the workarounds. Specifying names now works for all of my custom templates and the input types that I found issues with before (so I've tested pretty much everything besides radio buttons).\n. I'm going to try and throw together a pull request in a few minutes.\n. ",
    "jaxon": "Graceful degradation based on version capability. Nice. ;)\n. Graceful degradation based on version capability. Nice. ;)\n. ",
    "SabariRaja27": "hi all..is this issue got fixed?...I'm also facing the same issue for check boxes.whether i should create a new customised directory.Did any one tried the directory?? \n. hi all..is this issue got fixed?...I'm also facing the same issue for check boxes.whether i should create a new customised directory.Did any one tried the directory?? \n. ",
    "whjvenyl": "Woww.. that was fast! Thanks\n. Woww.. that was fast! Thanks\n. ",
    "cboden": "Ah, thanks @kentcdodds! I was only calling `$setPristine()`. I didn't think of calling `$setUntouched()`. \n. Awesome, thanks @kentcdodds!\n. Ah, thanks @kentcdodds! I was only calling `$setPristine()`. I didn't think of calling `$setUntouched()`. \n. Awesome, thanks @kentcdodds!\n. ",
    "chrismosby": "Hey @kentcdodds it looks great! Thank you for your responsiveness. But to eliminate any kind of manual interaction besides defining types, is it possible to make the \"ng-repeat\" work under the hood ? Thank you\n. ok, basically. See this code ?\n\n```\n<div>\n  <!--loop through each element in model array-->\n  <div class=\"{{hideRepeat}}\">\n    <div ng-repeat=\"element in model[options.key]\">\n      <formly-form\n           fields=\"to.fields\"\n           model=\"element\"\n           form-state=\"formOptions\">\n      </formly-form>\n      <div style=\"margin-bottom:20px;\">\n        <button type=\"button\" class=\"btn btn-sm btn-danger\" ng-click=\"model[options.key].splice($index, 1)\">\n          Remove\n        </button>\n      </div>\n      <hr>\n  </div>\n  <p class=\"AddNewButton\">\n    <button type=\"button\" class=\"btn btn-primary\" ng-click=\"addNew()\" >{{to.btnText}}</button>\n  </p>\n```\n\nI don't think very useful from a user perspective. People would be just using the same code in their app. So why not just create 2 new keys in the configuration object : \"Delete\" and \"Add new\", since it's mostly the only thing that would change from user to user.\n. Yes!\n. I agree. I believed it wasn't necessarily template specific. We've created our custom implementation of recursive forms in my company, and we abstracted repeated sections from templates. So all you do is defining what needs to be repeated and you tell the constructor that it's repeatable and it does the work. \n\nsomething like : \n\n```\nForm({\n    fields: {\n       name: {\n          template: '<input>'\n       },\n    },\n    options: {\n      repeat: true,\n      ...\n    },\n})\n```\n. Awesome! I'll try to see how I can help this weekend.\n. Hey @kentcdodds it looks great! Thank you for your responsiveness. But to eliminate any kind of manual interaction besides defining types, is it possible to make the \"ng-repeat\" work under the hood ? Thank you\n. ok, basically. See this code ?\n\n```\n<div>\n  <!--loop through each element in model array-->\n  <div class=\"{{hideRepeat}}\">\n    <div ng-repeat=\"element in model[options.key]\">\n      <formly-form\n           fields=\"to.fields\"\n           model=\"element\"\n           form-state=\"formOptions\">\n      </formly-form>\n      <div style=\"margin-bottom:20px;\">\n        <button type=\"button\" class=\"btn btn-sm btn-danger\" ng-click=\"model[options.key].splice($index, 1)\">\n          Remove\n        </button>\n      </div>\n      <hr>\n  </div>\n  <p class=\"AddNewButton\">\n    <button type=\"button\" class=\"btn btn-primary\" ng-click=\"addNew()\" >{{to.btnText}}</button>\n  </p>\n```\n\nI don't think very useful from a user perspective. People would be just using the same code in their app. So why not just create 2 new keys in the configuration object : \"Delete\" and \"Add new\", since it's mostly the only thing that would change from user to user.\n. Yes!\n. I agree. I believed it wasn't necessarily template specific. We've created our custom implementation of recursive forms in my company, and we abstracted repeated sections from templates. So all you do is defining what needs to be repeated and you tell the constructor that it's repeatable and it does the work. \n\nsomething like : \n\n```\nForm({\n    fields: {\n       name: {\n          template: '<input>'\n       },\n    },\n    options: {\n      repeat: true,\n      ...\n    },\n})\n```\n. Awesome! I'll try to see how I can help this weekend.\n. ",
    "jlowery457": "What about expressionProperties for the repeating section example?  If I modify the repeating section example to add an expression property for investmentName:\n\n`expressionProperties: {\n                      'templateOptions.disabled': function ($viewValue, $modelValue, scope) {\n                  return scope.model.investmentValue === '';\n                }`\n\nThe investment name field in all sections is disabled even though only one of the investmentValue fields in only one of the sections satisfies the logic check.\n. Thanks @kentcdodds!  That really helps.\n. What about expressionProperties for the repeating section example?  If I modify the repeating section example to add an expression property for investmentName:\n\n`expressionProperties: {\n                      'templateOptions.disabled': function ($viewValue, $modelValue, scope) {\n                  return scope.model.investmentValue === '';\n                }`\n\nThe investment name field in all sections is disabled even though only one of the investmentValue fields in only one of the sections satisfies the logic check.\n. Thanks @kentcdodds!  That really helps.\n. ",
    "a-laughlin": "Recently started looking at formly after it popped up on angular weekly.  Fantastic effort on demos and api docs!\n\nWhat about pipelines to start?  Angular uses them for validators, parsers, formatters, $http, etc.  They could contain functions that transform a presentation schema object into a presentation instance object, enabling custom transformations at any point.\n\nSo in the core, something like:\n\n```\nvar pipelinesToView = {\n  presentationSchema:[],// converts presentation schema (i.e., fields) into a custom object we can compile with the html\n  presentationInstance:[], // operates on the presentation Instance (for one-off change and performance);\n};\n\n// same principle from view to model, including validation, data cleanup, etc.\nvar pipelinesToModel = {}\n```\n\nThat would enable a lot of flexibility with a simple imperative API.  It would be possible to add plugins for things like 'repeat' by adding/removing functions in the pipelines.\n\nfor example:\n\n```\nformly.addPlugin('repeater',function(pipelines){\n  pipelines.presentationSchema.push(\n    function repeater(presentationInstance){\n      // recursively walks over each part of the presentation schema as \"this\"\n      for(var i=0; i < this.repeats; i++){\n        presentationInstance.children.push(clone(this.children[0]))\n      }\n      return this;\n    }\n  );\n});\n```\n\nCould go with html and controller like:\n\n```\n// html\n<formly-form  model=\"model\" presentation-schema=\"presentationSchema\" presentation-instance=\"presentationInstance\">\n</formly-form>\n\n// controller\n$scope.model ={};\n$scope.presentationInstance = {};\n$scope.presentationSchema = {\n  fields:[{\n    key:'customField',\n    type:'text',\n    placeholder:'foo',\n    repeats:2  // <--- repeater would operate on this\n  }]\n};\n```\n\nDynamically appending pipeline functions would enable sophisticated conditions, though managing conflicts would need to be resolved\n\n```\n$scope.presentationSchema = {\n  fields:[{\n    type:'button',\n    events:{\n      click:function(event,presentationInstance,pipelines){\n        if(presentationInstance.children > 2){\n          pipelines.presentationSchema.push(function(){\n            // add some conditional display logic\n          });\n          queuePipelineExecution();\n        }\n      }\n    }\n  }]\n};\n```\n\nThe same architecture would make it possible to implement something like the json schema in #147 by prepending transformations to the pipelines\n\nAnyway.  Getting late.  Thanks again for your work on Formly.  Hopefully this sparks some ideas!\n. It looks like it could potentially address both issues.  Examples would be fantastic.  I'll have more time to experiment with it this week.\n\nOne thing in the docs confuses me.  \"Allows you to modify/convert the fields before angular-formly handles them or validates them.\"  What does \"handles them\" mean?  It sounds like this function would run both pre-formatters and pre-parsers/validators.\n. Yes.  I added basic support for repeating models in a [wrapper directive](https://github.com/formly-js/angular-formly-simplified/blob/master/angular-formly-simplified.js#L269) around formly in the angular-formly-simplified repo (based on your example).  Nested repeating models are more complex, so I didn't implement those.\n\nThe basic premise is that model is always an array, and if it isn't, make it one.  That's easier to reason about than array vs. object.\n\nI also started modifying the getFields function for preFields and postFields arrays, to add buttons that appear before and after the repeating models.  WIP.\n. +1\n. What's the purpose of having a single validators object currently?  If it's to keep things simple, I think the simplicity is lost when needing to add new properties to disambiguate between them.  Using the existing angular syntax seems the simplest and easiest to understand, since there's nothing new to learn:\n\n``` js\nvm.fields = [{\n  validators:{},\n  asyncValidators:{},\n}]\n```\n. :+1:\n. Sure.  I'm already using it as a separate factory.  It's only 60 lines or so, but depends on lodash.  If formly exposed its functions to merge fields/templates/wrappers, etc., that could cut its size significantly and remove the lodash dependency.  I'd need to look more at what they're doing, but reverseDeepMerge sounds like it has potential.\n. Exposing methods not critical though.  Easy to just copy the necessary code.\n. I think that should work.  Let me talk with my team about it and get back with you.\n. Hey Kent.  Sure.  Go ahead and create the repo and I'll put in some initial code.  We can discuss/improve from there.\n\nAlso, formlyUtils already exposes reverseDeepMerge.  That'll help eliminate the lodash dependency.\n. In [this code](https://github.com/angular/angular.js/blob/v1.2.28/src/ng/directive/input.js#L1216) it looks like viewChangeListeners (including ngChange) will not fire if the model value === the parsers pipeline output.  I need to head out, but can run tests tomorrow.\n. And thanks for the quick response.  Definitely was feeling a bit frustrated earlier.  All good.\n\nAlso, trying to get a handle on how formy works internally.  Would I be correct in thinking that this behavior is the result of parser functions always returning the viewValue [here](https://github.com/formly-js/angular-formly/blob/d2bce4bbb6b3f7cd3f220c702ebcd21e592bd199/src/directives/formly-custom-validation.js#L102)?  If so, a fix that supports asynchronous validation seems like it would require setupWithParsers to return different values for sync and async.\n\nIf synchronous and...\n- valid, return viewValue\n- invalid, setValidity false and return undefined\n\nIf async and...\n- promise resolves, setViewValue()\n- promise rejects, setValidity false.\n\nDigest if necessary.\n. Howdy Kent,\n\nNormally, sure.  Since I'm behind on some deliverables due to spending time figuring that bug out, I think a better place to start with tests will be the simplified repo.  I still need to implement the fix for our code though, so I'm happy to implement a patch and post the code for it.\n\nAny conflicts you anticipate with the new parsers/formatters code?\n. After struggling to get setupWithParsers correctly triggering downstream actions this morning, and then spending a while trying to get some of the examples working after changing the script to angular 1.2 in the html, I decided to bite the bullet and go through migrating our codebase to 1.3.17.\n\nNever did get the downstream async actions running correctly.  Unless you know an easy solution for getting 1.2 async working with dependent downstream events, it might be worth re-opening the discussion about dropping 1.2 support.\n\nAnyway, here's the setupWithParsers function working correctly with synchronous validation (at least in my limited tests):\n\n``` js\nfunction setupWithParsers(validator, name, isAsync) {\n    var inFlightValidator = undefined;\n    ctrl.$parsers.unshift(function evalValidityOfParser(viewValue) {\n        var isValid = formlyUtil.formlyEval(scope, validator, ctrl.$modelValue, viewValue);\n        // In the next breaking change, rather than checking for isPromiseLike, it should just check for isAsync.\n        if (isAsync || isPromiseLike(isValid)) {\n            if (!isAsync) {\n                logAsyncValidatorsDeprecationNotice(validator, opts);\n            }\n            ctrl.$pending = ctrl.$pending || {};\n            ctrl.$pending[name] = true;\n            inFlightValidator = isValid;\n            isValid.then(function () {\n                if (inFlightValidator === isValid) {\n                    ctrl.$modelValue = viewValue;\n                    ctrl.$setValidity(name, true);\n                }\n            })['catch'](function () {\n                if (inFlightValidator === isValid) {\n                    ctrl.$setValidity(name, false);\n                }\n            })['finally'](function () {\n                if (Object.keys(ctrl.$pending).length === 1) {\n                    delete ctrl.$pending;\n                } else {\n                    delete ctrl.$pending[name];\n                }\n            });\n            return ctrl.$modelValue;\n        }\n\n        if(isValid){\n            ctrl.$setValidity(name, true);\n            return viewValue;\n        }\n        ctrl.$setValidity(name, false);\n        return ctrl.$modelValue;\n    });\n}\n```\n. Hey Kent.  I deleted the SO question.  I think learning Formly would be faster for me if I understood early where/how Formly intersects forms interaction.  A diagram would be ideal, though I'm debating whether it's worth the effort to create.  Something along the lines of: http://image.slidesharecdn.com/formsinangularjs-130512173919-phpapp01/95/forms-in-angularjs-16-638.jpg?cb=1422097771, or a sequence diagram.\n. And.... that was a great example of why not to read and respond when sleepy.  Not sure what I was thinking last night either.  Removed my comment.  Carry on!\n. Recently started looking at formly after it popped up on angular weekly.  Fantastic effort on demos and api docs!\n\nWhat about pipelines to start?  Angular uses them for validators, parsers, formatters, $http, etc.  They could contain functions that transform a presentation schema object into a presentation instance object, enabling custom transformations at any point.\n\nSo in the core, something like:\n\n```\nvar pipelinesToView = {\n  presentationSchema:[],// converts presentation schema (i.e., fields) into a custom object we can compile with the html\n  presentationInstance:[], // operates on the presentation Instance (for one-off change and performance);\n};\n\n// same principle from view to model, including validation, data cleanup, etc.\nvar pipelinesToModel = {}\n```\n\nThat would enable a lot of flexibility with a simple imperative API.  It would be possible to add plugins for things like 'repeat' by adding/removing functions in the pipelines.\n\nfor example:\n\n```\nformly.addPlugin('repeater',function(pipelines){\n  pipelines.presentationSchema.push(\n    function repeater(presentationInstance){\n      // recursively walks over each part of the presentation schema as \"this\"\n      for(var i=0; i < this.repeats; i++){\n        presentationInstance.children.push(clone(this.children[0]))\n      }\n      return this;\n    }\n  );\n});\n```\n\nCould go with html and controller like:\n\n```\n// html\n<formly-form  model=\"model\" presentation-schema=\"presentationSchema\" presentation-instance=\"presentationInstance\">\n</formly-form>\n\n// controller\n$scope.model ={};\n$scope.presentationInstance = {};\n$scope.presentationSchema = {\n  fields:[{\n    key:'customField',\n    type:'text',\n    placeholder:'foo',\n    repeats:2  // <--- repeater would operate on this\n  }]\n};\n```\n\nDynamically appending pipeline functions would enable sophisticated conditions, though managing conflicts would need to be resolved\n\n```\n$scope.presentationSchema = {\n  fields:[{\n    type:'button',\n    events:{\n      click:function(event,presentationInstance,pipelines){\n        if(presentationInstance.children > 2){\n          pipelines.presentationSchema.push(function(){\n            // add some conditional display logic\n          });\n          queuePipelineExecution();\n        }\n      }\n    }\n  }]\n};\n```\n\nThe same architecture would make it possible to implement something like the json schema in #147 by prepending transformations to the pipelines\n\nAnyway.  Getting late.  Thanks again for your work on Formly.  Hopefully this sparks some ideas!\n. It looks like it could potentially address both issues.  Examples would be fantastic.  I'll have more time to experiment with it this week.\n\nOne thing in the docs confuses me.  \"Allows you to modify/convert the fields before angular-formly handles them or validates them.\"  What does \"handles them\" mean?  It sounds like this function would run both pre-formatters and pre-parsers/validators.\n. Yes.  I added basic support for repeating models in a [wrapper directive](https://github.com/formly-js/angular-formly-simplified/blob/master/angular-formly-simplified.js#L269) around formly in the angular-formly-simplified repo (based on your example).  Nested repeating models are more complex, so I didn't implement those.\n\nThe basic premise is that model is always an array, and if it isn't, make it one.  That's easier to reason about than array vs. object.\n\nI also started modifying the getFields function for preFields and postFields arrays, to add buttons that appear before and after the repeating models.  WIP.\n. +1\n. What's the purpose of having a single validators object currently?  If it's to keep things simple, I think the simplicity is lost when needing to add new properties to disambiguate between them.  Using the existing angular syntax seems the simplest and easiest to understand, since there's nothing new to learn:\n\n``` js\nvm.fields = [{\n  validators:{},\n  asyncValidators:{},\n}]\n```\n. :+1:\n. Sure.  I'm already using it as a separate factory.  It's only 60 lines or so, but depends on lodash.  If formly exposed its functions to merge fields/templates/wrappers, etc., that could cut its size significantly and remove the lodash dependency.  I'd need to look more at what they're doing, but reverseDeepMerge sounds like it has potential.\n. Exposing methods not critical though.  Easy to just copy the necessary code.\n. I think that should work.  Let me talk with my team about it and get back with you.\n. Hey Kent.  Sure.  Go ahead and create the repo and I'll put in some initial code.  We can discuss/improve from there.\n\nAlso, formlyUtils already exposes reverseDeepMerge.  That'll help eliminate the lodash dependency.\n. In [this code](https://github.com/angular/angular.js/blob/v1.2.28/src/ng/directive/input.js#L1216) it looks like viewChangeListeners (including ngChange) will not fire if the model value === the parsers pipeline output.  I need to head out, but can run tests tomorrow.\n. And thanks for the quick response.  Definitely was feeling a bit frustrated earlier.  All good.\n\nAlso, trying to get a handle on how formy works internally.  Would I be correct in thinking that this behavior is the result of parser functions always returning the viewValue [here](https://github.com/formly-js/angular-formly/blob/d2bce4bbb6b3f7cd3f220c702ebcd21e592bd199/src/directives/formly-custom-validation.js#L102)?  If so, a fix that supports asynchronous validation seems like it would require setupWithParsers to return different values for sync and async.\n\nIf synchronous and...\n- valid, return viewValue\n- invalid, setValidity false and return undefined\n\nIf async and...\n- promise resolves, setViewValue()\n- promise rejects, setValidity false.\n\nDigest if necessary.\n. Howdy Kent,\n\nNormally, sure.  Since I'm behind on some deliverables due to spending time figuring that bug out, I think a better place to start with tests will be the simplified repo.  I still need to implement the fix for our code though, so I'm happy to implement a patch and post the code for it.\n\nAny conflicts you anticipate with the new parsers/formatters code?\n. After struggling to get setupWithParsers correctly triggering downstream actions this morning, and then spending a while trying to get some of the examples working after changing the script to angular 1.2 in the html, I decided to bite the bullet and go through migrating our codebase to 1.3.17.\n\nNever did get the downstream async actions running correctly.  Unless you know an easy solution for getting 1.2 async working with dependent downstream events, it might be worth re-opening the discussion about dropping 1.2 support.\n\nAnyway, here's the setupWithParsers function working correctly with synchronous validation (at least in my limited tests):\n\n``` js\nfunction setupWithParsers(validator, name, isAsync) {\n    var inFlightValidator = undefined;\n    ctrl.$parsers.unshift(function evalValidityOfParser(viewValue) {\n        var isValid = formlyUtil.formlyEval(scope, validator, ctrl.$modelValue, viewValue);\n        // In the next breaking change, rather than checking for isPromiseLike, it should just check for isAsync.\n        if (isAsync || isPromiseLike(isValid)) {\n            if (!isAsync) {\n                logAsyncValidatorsDeprecationNotice(validator, opts);\n            }\n            ctrl.$pending = ctrl.$pending || {};\n            ctrl.$pending[name] = true;\n            inFlightValidator = isValid;\n            isValid.then(function () {\n                if (inFlightValidator === isValid) {\n                    ctrl.$modelValue = viewValue;\n                    ctrl.$setValidity(name, true);\n                }\n            })['catch'](function () {\n                if (inFlightValidator === isValid) {\n                    ctrl.$setValidity(name, false);\n                }\n            })['finally'](function () {\n                if (Object.keys(ctrl.$pending).length === 1) {\n                    delete ctrl.$pending;\n                } else {\n                    delete ctrl.$pending[name];\n                }\n            });\n            return ctrl.$modelValue;\n        }\n\n        if(isValid){\n            ctrl.$setValidity(name, true);\n            return viewValue;\n        }\n        ctrl.$setValidity(name, false);\n        return ctrl.$modelValue;\n    });\n}\n```\n. Hey Kent.  I deleted the SO question.  I think learning Formly would be faster for me if I understood early where/how Formly intersects forms interaction.  A diagram would be ideal, though I'm debating whether it's worth the effort to create.  Something along the lines of: http://image.slidesharecdn.com/formsinangularjs-130512173919-phpapp01/95/forms-in-angularjs-16-638.jpg?cb=1422097771, or a sequence diagram.\n. And.... that was a great example of why not to read and respond when sleepy.  Not sure what I was thinking last night either.  Removed my comment.  Carry on!\n. ",
    "kalpitpandit": "Is there any way to call controller method on click of remove or add new button? . Is there any way to call controller method on click of remove or add new button? . ",
    "ppalreddy": "Is there any way to display the remove button on the same line as form fields ?? Right now my form looks like this \r\n![image](https://user-images.githubusercontent.com/10407989/26989278-769d26ce-4d20-11e7-8dc2-6d79b0d94ca4.png)\r\n\r\nI want the remove button to disaply next to registration number text box. I am using formly repeat section code provided above.\r\n\r\n. Is there any way to display the remove button on the same line as form fields ?? Right now my form looks like this \r\n![image](https://user-images.githubusercontent.com/10407989/26989278-769d26ce-4d20-11e7-8dc2-6d79b0d94ca4.png)\r\n\r\nI want the remove button to disaply next to registration number text box. I am using formly repeat section code provided above.\r\n\r\n. ",
    "Quji": "I read #317 and looks like scope.fc.$submitted is not visible inside errorExistsAndShouldBeVisible. Its true?\n. Now I am really confused. I read your comment https://github.com/formly-js/angular-formly/issues/317#issuecomment-105304114 where you said that name=\"vm.theForm\" and form=\"vm.theForm\" should be different.\n\nI have no idea how to make errorExistsAndShouldBeVisible work with \"$submitted\". Can you help me? I created http://jsbin.com/qurejigoni/1/edit?html,js,output from example just with one new line: formlyConfig.extras.errorExistsAndShouldBeVisibleExpression = 'options.formControl.$submitted'; and its not working. 'options.formControl.$dirty' works fine.\n. @kentcdodds Thank you for so quick response and fix!\nYou are awesome ; )\n. I read #317 and looks like scope.fc.$submitted is not visible inside errorExistsAndShouldBeVisible. Its true?\n. Now I am really confused. I read your comment https://github.com/formly-js/angular-formly/issues/317#issuecomment-105304114 where you said that name=\"vm.theForm\" and form=\"vm.theForm\" should be different.\n\nI have no idea how to make errorExistsAndShouldBeVisible work with \"$submitted\". Can you help me? I created http://jsbin.com/qurejigoni/1/edit?html,js,output from example just with one new line: formlyConfig.extras.errorExistsAndShouldBeVisibleExpression = 'options.formControl.$submitted'; and its not working. 'options.formControl.$dirty' works fine.\n. @kentcdodds Thank you for so quick response and fix!\nYou are awesome ; )\n. ",
    "tleruitte": "Thank you!\n. Thank you!\n. ",
    "facultymatt": "https://github.com/chriso/validator.js is a great validator that should work for this use case. \n. I'd love to take a stab at this in the future - currently our jsData + jsFormly (+ Salesforce) integration is complete. For now we have done this with a model and form setup in the controller - nothing fancy. \n\nHowever we have a few projects on the horizon where a more robust integration could be developed. \n\nIf you want to get a rough spec together for how an integration could work it would be a great start! If not I will check back in with something when those projects get closer. \n\n!!!\n. Yes the example is great and that library is amazing! So simple. \n\nI tweeted the other day asking for validation libraries - I swear there were some responses but all I could find was \"native validation\". Do either of you have a list of great solutions like is.js? Not that it matters for this particular integration, but would be useful to know! \n\nTheoretically any validation library should work using [defineRule](http://www.js-data.io/v1.8.0/docs/js-data-schema#schematordefinerulename-rulefunc-async) combined with `optionTypes` and `validators`. \n. Also stumbled across this recently: https://github.com/square/lgtm/wiki\n\nOn Thu, May 28, 2015 at 12:17 AM, Jason Dobry notifications@github.com\nwrote:\n\n> Validate.js http://validatejs.org/ is another good one.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/303#issuecomment-106165716\n> .\n\n## \n\nMatt Miller\n\nWeb Master\n609-335-4417\nmatt@superpedestrian.com\nhttps://www.superpedestrian.com/\nhttps://www.google.com/url?q=https%3A%2F%2Fwww.superpedestrian.com%2F&sa=D&sntz=1&usg=AFQjCNHLEDFaMLgggeXL8rh4gGlNfN0WSA\n\n---\n\nSuperpedestrian Inc.\n84 Hamilton St.\nCambridge, MA 02139\n\n_This message is intended only for the addressee named above.  If you are\nnot the intended recipient of this message, you are hereby notified that\nyou must not use, disseminate, or copy it in any form or take any action in\nreliance upon it.  If you have received this message in error, please\ndelete it and any copies of it from your email system and reply immediately\nto the sender at the address shown above.  This message may contain\nconfidential and/or proprietary information.  Neither confidentiality, nor\nany proprietary rights are intended to be waived or lost by any error in\ntransmission._\n. Thanks for the quick response! In the future I will post questions to the\ndesignated channels, and save github for bugs and features.\n\nOn Fri, Jul 10, 2015 at 11:26 AM, Kent C. Dodds notifications@github.com\nwrote:\n\n> Note: The github issues in this project are not for questions but rather\n> bugs reports or feature requests. Please follow the instructions here\n> instead: http://help.angular-formly.com\n> \n> Thanks for using angular-formly :D\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/386#issuecomment-120436084\n> .\n\n## \n\nMatt Miller\n\nWeb Master\n609-335-4417\nmatt@superpedestrian.com\nhttps://www.superpedestrian.com/\nhttps://www.google.com/url?q=https%3A%2F%2Fwww.superpedestrian.com%2F&sa=D&sntz=1&usg=AFQjCNHLEDFaMLgggeXL8rh4gGlNfN0WSA\n\n---\n\nSuperpedestrian Inc.\n84 Hamilton St.\nCambridge, MA 02139\n\n_This message is intended only for the addressee named above.  If you are\nnot the intended recipient of this message, you are hereby notified that\nyou must not use, disseminate, or copy it in any form or take any action in\nreliance upon it.  If you have received this message in error, please\ndelete it and any copies of it from your email system and reply immediately\nto the sender at the address shown above.  This message may contain\nconfidential and/or proprietary information.  Neither confidentiality, nor\nany proprietary rights are intended to be waived or lost by any error in\ntransmission._\n. https://github.com/chriso/validator.js is a great validator that should work for this use case. \n. I'd love to take a stab at this in the future - currently our jsData + jsFormly (+ Salesforce) integration is complete. For now we have done this with a model and form setup in the controller - nothing fancy. \n\nHowever we have a few projects on the horizon where a more robust integration could be developed. \n\nIf you want to get a rough spec together for how an integration could work it would be a great start! If not I will check back in with something when those projects get closer. \n\n!!!\n. Yes the example is great and that library is amazing! So simple. \n\nI tweeted the other day asking for validation libraries - I swear there were some responses but all I could find was \"native validation\". Do either of you have a list of great solutions like is.js? Not that it matters for this particular integration, but would be useful to know! \n\nTheoretically any validation library should work using [defineRule](http://www.js-data.io/v1.8.0/docs/js-data-schema#schematordefinerulename-rulefunc-async) combined with `optionTypes` and `validators`. \n. Also stumbled across this recently: https://github.com/square/lgtm/wiki\n\nOn Thu, May 28, 2015 at 12:17 AM, Jason Dobry notifications@github.com\nwrote:\n\n> Validate.js http://validatejs.org/ is another good one.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/303#issuecomment-106165716\n> .\n\n## \n\nMatt Miller\n\nWeb Master\n609-335-4417\nmatt@superpedestrian.com\nhttps://www.superpedestrian.com/\nhttps://www.google.com/url?q=https%3A%2F%2Fwww.superpedestrian.com%2F&sa=D&sntz=1&usg=AFQjCNHLEDFaMLgggeXL8rh4gGlNfN0WSA\n\n---\n\nSuperpedestrian Inc.\n84 Hamilton St.\nCambridge, MA 02139\n\n_This message is intended only for the addressee named above.  If you are\nnot the intended recipient of this message, you are hereby notified that\nyou must not use, disseminate, or copy it in any form or take any action in\nreliance upon it.  If you have received this message in error, please\ndelete it and any copies of it from your email system and reply immediately\nto the sender at the address shown above.  This message may contain\nconfidential and/or proprietary information.  Neither confidentiality, nor\nany proprietary rights are intended to be waived or lost by any error in\ntransmission._\n. Thanks for the quick response! In the future I will post questions to the\ndesignated channels, and save github for bugs and features.\n\nOn Fri, Jul 10, 2015 at 11:26 AM, Kent C. Dodds notifications@github.com\nwrote:\n\n> Note: The github issues in this project are not for questions but rather\n> bugs reports or feature requests. Please follow the instructions here\n> instead: http://help.angular-formly.com\n> \n> Thanks for using angular-formly :D\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/386#issuecomment-120436084\n> .\n\n## \n\nMatt Miller\n\nWeb Master\n609-335-4417\nmatt@superpedestrian.com\nhttps://www.superpedestrian.com/\nhttps://www.google.com/url?q=https%3A%2F%2Fwww.superpedestrian.com%2F&sa=D&sntz=1&usg=AFQjCNHLEDFaMLgggeXL8rh4gGlNfN0WSA\n\n---\n\nSuperpedestrian Inc.\n84 Hamilton St.\nCambridge, MA 02139\n\n_This message is intended only for the addressee named above.  If you are\nnot the intended recipient of this message, you are hereby notified that\nyou must not use, disseminate, or copy it in any form or take any action in\nreliance upon it.  If you have received this message in error, please\ndelete it and any copies of it from your email system and reply immediately\nto the sender at the address shown above.  This message may contain\nconfidential and/or proprietary information.  Neither confidentiality, nor\nany proprietary rights are intended to be waived or lost by any error in\ntransmission._\n. ",
    "AyazSardar": "Thank you Kent. Can i use expressionProperties to filter a dropdown depending on what the user types in the FirstName? \n. Perfect, thank you very much.\n. Thank you Kent. Can i use expressionProperties to filter a dropdown depending on what the user types in the FirstName? \n. Perfect, thank you very much.\n. ",
    "jmdobry": "As a note, js-data 2.0 removes the coupling between js-data and js-data-schema, so you're free to use whatever validation library you'd like (just implement the `validate` lifecycle hook). So if there's a validation library that's already compatible with angular-formly, use that.\n. [Validate.js](http://validatejs.org/) is another good one.\n. As a note, js-data 2.0 removes the coupling between js-data and js-data-schema, so you're free to use whatever validation library you'd like (just implement the `validate` lifecycle hook). So if there's a validation library that's already compatible with angular-formly, use that.\n. [Validate.js](http://validatejs.org/) is another good one.\n. ",
    "DrDanRyan": "Honestly, I was just trying to grok how to fully use angular-material's flex layout with formly and was trying some things out. I ended up just setting things up without nesting flex layouts and it all looks nice and works great.\n\nOne thing I thought of to make this nesting work is if there was a property on the field configuration object like `containerAttributes` that only applied when a `fieldGroup` property was also provided. Then the `containerAttributes` are applied to the outer `formly-field` element that wraps the inner `ng-form` created by the fieldGroup. Then, moving the `flex: 25` into `containerAttributes` instead of `elementAttributes` in the second fieldGroup would fix the issue.\n\nI have no clue if this is an easy or hard thing to add though...\n. I think I have figured out a nice way to do this, but there might be a drawback that I am not seeing, please point it out for me if you see one.\n\nInstead of forcing the layout into the javascript, do the flex layout in the html and use multiple `formly-form` elements that share the same model. For example the html `<body>`:\n\n``` html\n  <form>\n    <div layout=\"row\" style=\"height:500px\">\n      <formly-form flex=\"75\" style=\"background-color:blue\" model=\"vm.myModel\" fields=\"vm.blueFields\"></formly-form>\n      <div flex=\"25\" layout=\"column\" style=\"height:500px\">\n        <formly-form flex=\"60\" style=\"background-color:red\" model=\"vm.myModel\" fields=\"vm.redFields\"></formly-form>\n        <formly-form flex=\"40\" style=\"background-color:green\" model=\"vm.myModel\" fields=\"vm.greenFields\"></formly-form>\n      </div>\n    </div>\n  </form>\n```\n\nand the javascript:\n\n``` javascript\nngModule.controller('testController', function() {\n  var vm = this;\n  vm.myModel = {};\n\n  vm.blueFields = [\n    {\n      type: 'input',\n      key: 'blueInput',\n      templateOptions: {\n        label: 'Blue Input'\n      }\n    }\n  ];\n\n  vm.redFields = [\n    {\n      type: 'radio',\n      key: 'redRadio',\n      templateOptions: {\n        label: 'Red Radio',\n        options: [\n          {\n            label: 'Option 1',\n            value: 1\n          },\n          {\n            label: 'Option 2',\n            value: 2\n          }\n        ]\n      }\n    }\n  ];\n\n  vm.greenFields = [\n    {\n      type: 'radio',\n      key: 'greenRadio',\n      templateOptions: {\n        label: 'Green Radio',\n        options: [\n          {\n            label: 'Option 1',\n            value: 1\n          },\n          {\n            label: 'Option 2',\n            value: 2\n          }\n        ]\n      }\n    }\n  ];\n});\n```\n\nYields:\n![screen shot 2015-05-27 at 11 56 02 am](https://cloud.githubusercontent.com/assets/2340323/7840899/6287c562-0467-11e5-94fc-3c63834b4b28.png)\n\nWhat drawbacks are there to having my fields split among separate `formly-form` elements? It would also be easy to put the `redFields` and `greenFields` into a single `formly-form` using `fieldGroup`, but the `fieldGroup` approach has to happen at the last layer of nesting in each case...\n. Sure, I can do that. Also, would there be a point in making the `formly-forms` use the same `form` attribute? I am not entirely clear what impact that would have.\n. jspm is broken as well.  JSPM registry points to the github project but the lack of a dist folder (main is still `dist/formly.js`) results in jspm unable to load it. \n\nIf you tell jspm to install from npm, then it tries to use `npm:angular` as a dependency which causes a console error of `angular tried to load more than once` since the main jspm angular install defaults to `github:angular/bower-angular`.\n. Honestly, I was just trying to grok how to fully use angular-material's flex layout with formly and was trying some things out. I ended up just setting things up without nesting flex layouts and it all looks nice and works great.\n\nOne thing I thought of to make this nesting work is if there was a property on the field configuration object like `containerAttributes` that only applied when a `fieldGroup` property was also provided. Then the `containerAttributes` are applied to the outer `formly-field` element that wraps the inner `ng-form` created by the fieldGroup. Then, moving the `flex: 25` into `containerAttributes` instead of `elementAttributes` in the second fieldGroup would fix the issue.\n\nI have no clue if this is an easy or hard thing to add though...\n. I think I have figured out a nice way to do this, but there might be a drawback that I am not seeing, please point it out for me if you see one.\n\nInstead of forcing the layout into the javascript, do the flex layout in the html and use multiple `formly-form` elements that share the same model. For example the html `<body>`:\n\n``` html\n  <form>\n    <div layout=\"row\" style=\"height:500px\">\n      <formly-form flex=\"75\" style=\"background-color:blue\" model=\"vm.myModel\" fields=\"vm.blueFields\"></formly-form>\n      <div flex=\"25\" layout=\"column\" style=\"height:500px\">\n        <formly-form flex=\"60\" style=\"background-color:red\" model=\"vm.myModel\" fields=\"vm.redFields\"></formly-form>\n        <formly-form flex=\"40\" style=\"background-color:green\" model=\"vm.myModel\" fields=\"vm.greenFields\"></formly-form>\n      </div>\n    </div>\n  </form>\n```\n\nand the javascript:\n\n``` javascript\nngModule.controller('testController', function() {\n  var vm = this;\n  vm.myModel = {};\n\n  vm.blueFields = [\n    {\n      type: 'input',\n      key: 'blueInput',\n      templateOptions: {\n        label: 'Blue Input'\n      }\n    }\n  ];\n\n  vm.redFields = [\n    {\n      type: 'radio',\n      key: 'redRadio',\n      templateOptions: {\n        label: 'Red Radio',\n        options: [\n          {\n            label: 'Option 1',\n            value: 1\n          },\n          {\n            label: 'Option 2',\n            value: 2\n          }\n        ]\n      }\n    }\n  ];\n\n  vm.greenFields = [\n    {\n      type: 'radio',\n      key: 'greenRadio',\n      templateOptions: {\n        label: 'Green Radio',\n        options: [\n          {\n            label: 'Option 1',\n            value: 1\n          },\n          {\n            label: 'Option 2',\n            value: 2\n          }\n        ]\n      }\n    }\n  ];\n});\n```\n\nYields:\n![screen shot 2015-05-27 at 11 56 02 am](https://cloud.githubusercontent.com/assets/2340323/7840899/6287c562-0467-11e5-94fc-3c63834b4b28.png)\n\nWhat drawbacks are there to having my fields split among separate `formly-form` elements? It would also be easy to put the `redFields` and `greenFields` into a single `formly-form` using `fieldGroup`, but the `fieldGroup` approach has to happen at the last layer of nesting in each case...\n. Sure, I can do that. Also, would there be a point in making the `formly-forms` use the same `form` attribute? I am not entirely clear what impact that would have.\n. jspm is broken as well.  JSPM registry points to the github project but the lack of a dist folder (main is still `dist/formly.js`) results in jspm unable to load it. \n\nIf you tell jspm to install from npm, then it tries to use `npm:angular` as a dependency which causes a console error of `angular tried to load more than once` since the main jspm angular install defaults to `github:angular/bower-angular`.\n. ",
    "GianlucaBobbio": "This isn't a good solution if I'm working with multiple possible advanced layouts. I need no HTML layout configuration. (sorry for bad english)\n. Ok, I will leave here an example:\n\nhttp://jsbin.com/gonozubahu/1/edit?html,js,output\n\nYou can see that the second column is a fieldgroup with two checkbox in a column\n\nSo I have 2 problems here. \n\nFirst: The checkboxs aren't in a column, so I had to add to my CSS:\n\n`.layout-column-row{\n    -ms-flex-direction: column;\n    flex-direction: column;\n    -webkit-flex-direction: column;\n}`\n\nI really don't care about this one because I fixed that really easy.\n\nBut...\nSecond one: My second column (the fieldgroup with 2 checkboxes) doesn't use \"flex-25\", no matter where I put the \"className\" because its being applied to the inner element of the fieldgroup. Here is an img:\nhttp://pasteboard.co/JzbVoiy.png\n\nSo, to fix that, I had to create a new param, I called it: \"formlyFieldGroupClass\". And in the src I added (line 1476):\n\n`if(scope.options.elementAttributes.formlyFieldGroupClass){ el.addClass(scope.options.elementAttributes.formlyFieldGroupClass); }`\n\nNow, it's working :)\n\nhttp://jsbin.com/dukibefehu/1/edit?html,js,output\n\nSnatpshot of debugger + result:\n\nhttp://pasteboard.co/JAbE3f1.png\n\nEdit: I thought this was ok here, because it's a feature request, just I found a way to make it work.\n. I think this thread is related:\n\nhttps://github.com/formly-js/angular-formly/issues/304\n\nI just didn't want to make it work with HTML like that user did, because I'm working with dinamyc possibles HTML layouts\n. I did, and I put the jbins in my comment as an example. Congrats for the baby!\n. This isn't a good solution if I'm working with multiple possible advanced layouts. I need no HTML layout configuration. (sorry for bad english)\n. Ok, I will leave here an example:\n\nhttp://jsbin.com/gonozubahu/1/edit?html,js,output\n\nYou can see that the second column is a fieldgroup with two checkbox in a column\n\nSo I have 2 problems here. \n\nFirst: The checkboxs aren't in a column, so I had to add to my CSS:\n\n`.layout-column-row{\n    -ms-flex-direction: column;\n    flex-direction: column;\n    -webkit-flex-direction: column;\n}`\n\nI really don't care about this one because I fixed that really easy.\n\nBut...\nSecond one: My second column (the fieldgroup with 2 checkboxes) doesn't use \"flex-25\", no matter where I put the \"className\" because its being applied to the inner element of the fieldgroup. Here is an img:\nhttp://pasteboard.co/JzbVoiy.png\n\nSo, to fix that, I had to create a new param, I called it: \"formlyFieldGroupClass\". And in the src I added (line 1476):\n\n`if(scope.options.elementAttributes.formlyFieldGroupClass){ el.addClass(scope.options.elementAttributes.formlyFieldGroupClass); }`\n\nNow, it's working :)\n\nhttp://jsbin.com/dukibefehu/1/edit?html,js,output\n\nSnatpshot of debugger + result:\n\nhttp://pasteboard.co/JAbE3f1.png\n\nEdit: I thought this was ok here, because it's a feature request, just I found a way to make it work.\n. I think this thread is related:\n\nhttps://github.com/formly-js/angular-formly/issues/304\n\nI just didn't want to make it work with HTML like that user did, because I'm working with dinamyc possibles HTML layouts\n. I did, and I put the jbins in my comment as an example. Congrats for the baby!\n. ",
    "Den-dp": "Also I found related issue in npm https://github.com/npm/npm/issues/2800\n. Also I found related issue in npm https://github.com/npm/npm/issues/2800\n. ",
    "cdoe0108": "I am facing the same problem. Can u please help me in case u already found the solutions to this @jlowery457 \n. I am facing the same problem. Can u please help me in case u already found the solutions to this @jlowery457 \n. ",
    "sjerman": "Thanks Kent.\nOn Sat, May 23, 2015 at 3:20 PM Kent C. Dodds notifications@github.com\nwrote:\n\n> Released as 6.8.2\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/312#issuecomment-104945274\n> .\n. Thanks Kent.\nOn Sat, May 23, 2015 at 3:20 PM Kent C. Dodds notifications@github.com\nwrote:\n\n> Released as 6.8.2\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/312#issuecomment-104945274\n> .\n. ",
    "dzeroone": "I have created an example. Please take a look.\nhttp://jsbin.com/livasutuna/2/edit?js,console,output\n\nI have noticed that if remove 'ngf-change' directive from the element, it doesn't throw error, But I don't have value of desired field.\n. Thanks for your suggestion. I will try to implement this and find a solution for angular formly.\n. I have created an example. Please take a look.\nhttp://jsbin.com/livasutuna/2/edit?js,console,output\n\nI have noticed that if remove 'ngf-change' directive from the element, it doesn't throw error, But I don't have value of desired field.\n. Thanks for your suggestion. I will try to implement this and find a solution for angular formly.\n. ",
    "mdailous": "Hi Kent,\n\nI found Angular Formly this weekend and WOW... amazing work. Thank you! Today, I ran into the same problem as the other user, using ng-file-upload. I'm trying to use angular-upload per your suggestion above, but I can't get the model to update with the selected value. Can you take a look at my definition and tell me if I'm missing anything?\n\nIn my app.run method, I'm creating my custom object like so:\n\nformlyConfig.setType(\n{\n    name: 'licensefile',\n    extends: 'input',\n    defaultOptions: {\n        ngModelAttrs: {\n            multiple: {\n                bound: 'ng-multiple',\n                attribute: 'multiple'\n            },\n            accept: {\n                bound: 'ng-accept',\n                attribute: 'accept'\n            }\n        },\n        templateOptions: {\n            label: 'License File',\n            type: 'file',\n            required: true,\n            multiple: false,\n            accept: '*.lic'\n        },\n        validation: {\n            messages: {\n                required: function (viewValue, modelValue, scope) {\n                    //return scope.to.label + ' is required '\n                    return 'Please select a license file';\n                }\n            }\n        }\n    }\n});\n\nIn my directive, I have this definition in my fields array:\n{\n   type: 'licensefile',\n   key: 'lfile',\n   templateOptions: {\n      focus: true,\n   }\n},\n\nI'm printing out the value of my model on the page, and I can see when I enter valid values into the other fields, but when I select a file, I get nothing.\n\nThanks for the great tool,\nMichael\n. Posted in the chat.angular-formly.com room. I couldn't find that room in Stackoverflow... should I ask a \"general\" question on stack, or is asking in chat.angular-formly.com enough?\n\nThanks Kent.\n. I'll post the question there, as well. Though I was hoping, since you indicate you use angular-upload, that you'd be able to quickly see what I may have messed up in my code. I didn't have any problem with angular-file-upload uploading the model, but it did have a problem with the angular digest cycle. Now, with angular-upload, the model isn't getting updated, so I'm at a standstill on my project. :(\n. Thanks, I ended up creating a non-formly form for the file upload, but I\u2019d rather keep everything in formly to be consistent. I\u2019ll give this a try and let you know. :)\n\nThanks again,\nMichael\n\n> On Aug 4, 2015, at 3:12 AM, Abdellatif Ait boudad notifications@github.com wrote:\n> \n> seems related to $watch I made a quick fix to make it work see my commit aitboudad@92cb0b5 https://github.com/aitboudad/angular-formly/commit/92cb0b5f91d5cac1c39dfeba55b3517732d428db but not sure if it can be added into angular-formly \\cc @kentcdodds https://github.com/kentcdodds\n. Hi Kent,\n\nI found Angular Formly this weekend and WOW... amazing work. Thank you! Today, I ran into the same problem as the other user, using ng-file-upload. I'm trying to use angular-upload per your suggestion above, but I can't get the model to update with the selected value. Can you take a look at my definition and tell me if I'm missing anything?\n\nIn my app.run method, I'm creating my custom object like so:\n\nformlyConfig.setType(\n{\n    name: 'licensefile',\n    extends: 'input',\n    defaultOptions: {\n        ngModelAttrs: {\n            multiple: {\n                bound: 'ng-multiple',\n                attribute: 'multiple'\n            },\n            accept: {\n                bound: 'ng-accept',\n                attribute: 'accept'\n            }\n        },\n        templateOptions: {\n            label: 'License File',\n            type: 'file',\n            required: true,\n            multiple: false,\n            accept: '*.lic'\n        },\n        validation: {\n            messages: {\n                required: function (viewValue, modelValue, scope) {\n                    //return scope.to.label + ' is required '\n                    return 'Please select a license file';\n                }\n            }\n        }\n    }\n});\n\nIn my directive, I have this definition in my fields array:\n{\n   type: 'licensefile',\n   key: 'lfile',\n   templateOptions: {\n      focus: true,\n   }\n},\n\nI'm printing out the value of my model on the page, and I can see when I enter valid values into the other fields, but when I select a file, I get nothing.\n\nThanks for the great tool,\nMichael\n. Posted in the chat.angular-formly.com room. I couldn't find that room in Stackoverflow... should I ask a \"general\" question on stack, or is asking in chat.angular-formly.com enough?\n\nThanks Kent.\n. I'll post the question there, as well. Though I was hoping, since you indicate you use angular-upload, that you'd be able to quickly see what I may have messed up in my code. I didn't have any problem with angular-file-upload uploading the model, but it did have a problem with the angular digest cycle. Now, with angular-upload, the model isn't getting updated, so I'm at a standstill on my project. :(\n. Thanks, I ended up creating a non-formly form for the file upload, but I\u2019d rather keep everything in formly to be consistent. I\u2019ll give this a try and let you know. :)\n\nThanks again,\nMichael\n\n> On Aug 4, 2015, at 3:12 AM, Abdellatif Ait boudad notifications@github.com wrote:\n> \n> seems related to $watch I made a quick fix to make it work see my commit aitboudad@92cb0b5 https://github.com/aitboudad/angular-formly/commit/92cb0b5f91d5cac1c39dfeba55b3517732d428db but not sure if it can be added into angular-formly \\cc @kentcdodds https://github.com/kentcdodds\n. ",
    "victor-duarte": "Had the `TypeError: Illegal invocation` issue with `ng-file-upload`.\nThe error seems to be related to the `File object` created once a file is selected. It has an attribute `lastModifiedDate` that stores a `Date object` as a string with no quotes. I am guessing that when its evaluated the type is not valid/illegal.\n\nHad to do some workarounds to make formly and ng-fileupload happy, although i am not :P.\nHaving shared this, i am not sure where a fix would go or if it can be fixed, at least it works for me now.\n\ncreated [plnkr](http://plnkr.co/edit/d2ooYR?p=info) with something similar to what was implemented. Hope it is useful to anyone.\n\nRegards,\nVictor\n. Had the `TypeError: Illegal invocation` issue with `ng-file-upload`.\nThe error seems to be related to the `File object` created once a file is selected. It has an attribute `lastModifiedDate` that stores a `Date object` as a string with no quotes. I am guessing that when its evaluated the type is not valid/illegal.\n\nHad to do some workarounds to make formly and ng-fileupload happy, although i am not :P.\nHaving shared this, i am not sure where a fix would go or if it can be fixed, at least it works for me now.\n\ncreated [plnkr](http://plnkr.co/edit/d2ooYR?p=info) with something similar to what was implemented. Hope it is useful to anyone.\n\nRegards,\nVictor\n. ",
    "dorin-niscu": "If I replace \"model[options.key]\" with a string \"files\" for example it works fine.\n. If I replace \"model[options.key]\" with a string \"files\" for example it works fine.\n. ",
    "adamduren": "[Here](http://jsbin.com/vomeqad/1/edit?html,js,console,output) is a jsbin where I created the issue without ng-file-upload and just angular-formly. I have been battling this as well and suspected it could be recreated without ng-file-upload. Any help will be greatly appreciated.\n. I am assuming that when Angular makes a copy of the model it copies the File improperly. You can get the illegal invocation by doing something like this.\n\n``` javascript\nvar file = Object.create(File.prototype)  // Possibly from angular.copy\nfile.name // When comparing the properties of the file\n\n// ERROR!\nVM252:2 Uncaught TypeError: Illegal invocation(\u2026)(anonymous function) @ VM252:2\n```\n. [Here](http://jsbin.com/vomeqad/1/edit?html,js,console,output) is a jsbin where I created the issue without ng-file-upload and just angular-formly. I have been battling this as well and suspected it could be recreated without ng-file-upload. Any help will be greatly appreciated.\n. I am assuming that when Angular makes a copy of the model it copies the File improperly. You can get the illegal invocation by doing something like this.\n\n``` javascript\nvar file = Object.create(File.prototype)  // Possibly from angular.copy\nfile.name // When comparing the properties of the file\n\n// ERROR!\nVM252:2 Uncaught TypeError: Illegal invocation(\u2026)(anonymous function) @ VM252:2\n```\n. ",
    "m0t0r": "@kentcdodds thank you very much for your super quick response but I still have a question. How can I get a reference to the form in ng-messages template ?\n. @kentcdodds thank you for your reply but `fc` variable does not contain `$submitted` property. I still can not find a way to validate form on submit with angular-formly. I can get form state in a controller but I cannot find a way to get a reference for ng-messages. Could you help me further, please ?\n. @papertrailrob Yes, I've created [an example](http://jsbin.com/fabale/edit?html,css,js,output). @kentcdodds may be it is a good idea to post this example in the website as a use case ?\n. Sure, thank you\n. This issue is [moved](https://github.com/formly-js/angular-formly-templates-bootstrap/issues/32) to angular-formly-templates-bootstrap repo.\n. @kentcdodds thank you very much for your super quick response but I still have a question. How can I get a reference to the form in ng-messages template ?\n. @kentcdodds thank you for your reply but `fc` variable does not contain `$submitted` property. I still can not find a way to validate form on submit with angular-formly. I can get form state in a controller but I cannot find a way to get a reference for ng-messages. Could you help me further, please ?\n. @papertrailrob Yes, I've created [an example](http://jsbin.com/fabale/edit?html,css,js,output). @kentcdodds may be it is a good idea to post this example in the website as a use case ?\n. Sure, thank you\n. This issue is [moved](https://github.com/formly-js/angular-formly-templates-bootstrap/issues/32) to angular-formly-templates-bootstrap repo.\n. ",
    "robwalkerco": "@m0t0r Did you get the validate on submit to work in the end? If so, would you mind sharing an example of how, as I'm struggling with the same problem you encountered. Thanks\n. @m0t0r Did you get the validate on submit to work in the end? If so, would you mind sharing an example of how, as I'm struggling with the same problem you encountered. Thanks\n. ",
    "prismsoundzero": "Great, thanks !\n. Great, thanks !\n. ",
    "abcd-ca": "Thanks Kent, I understand. I think we need meteor to make this actually run but this is the distilled code: \nhttp://jsbin.com/feniwagetu/1/edit?html,css,js,output\n\nBasically Meteor gives you objects (bound to mongodb documents) which do work with ng-model on <input> elements. However, formly doesn't seem to like these objects. \n\nIn the console when I print out $scope.expedition it looks like this:\n\n```\nSubObject {_id: \"QcJfgcmmtpMrqoWXj\", owner: \"L8PovFSsDsY9hfrSj\", date: Tue May 26 2015 01:48:49 GMT-0700 (PDT), title: \"ice cream\", $$collection: C\u2026s._\u2026n.ns.Collection\u2026}\n```\n\nYou can see it's some special kind of object but does have the properties I'm trying to bind to like 'title'. It's OK if you can't help but if you're curious, this is an awesome place to start: http://angular-meteor.com/tutorial\n. by the way, this is the top of the error I'm getting:\n\n```\nTypeError: Cannot convert undefined or null to object\n    at Function.keys (native)\n    at _.extend.forEach\n```\n. Thanks for the lead Kent!\n. Thanks Kent, I understand. I think we need meteor to make this actually run but this is the distilled code: \nhttp://jsbin.com/feniwagetu/1/edit?html,css,js,output\n\nBasically Meteor gives you objects (bound to mongodb documents) which do work with ng-model on <input> elements. However, formly doesn't seem to like these objects. \n\nIn the console when I print out $scope.expedition it looks like this:\n\n```\nSubObject {_id: \"QcJfgcmmtpMrqoWXj\", owner: \"L8PovFSsDsY9hfrSj\", date: Tue May 26 2015 01:48:49 GMT-0700 (PDT), title: \"ice cream\", $$collection: C\u2026s._\u2026n.ns.Collection\u2026}\n```\n\nYou can see it's some special kind of object but does have the properties I'm trying to bind to like 'title'. It's OK if you can't help but if you're curious, this is an awesome place to start: http://angular-meteor.com/tutorial\n. by the way, this is the top of the error I'm getting:\n\n```\nTypeError: Cannot convert undefined or null to object\n    at Function.keys (native)\n    at _.extend.forEach\n```\n. Thanks for the lead Kent!\n. ",
    "estaub": "I can shed some light, I think.  The problem occurs when an [AngularMeteorObject](http://angular-meteor.com/api/AngularMeteorObject) is used as the \"<formly-form model=\" attribute.  Angular tries to do an angular.copy on it, I'd guess maybe to create an isolate scope for the formly directive.  Even if this worked, it would be a really bad thing to do - AngularMeteorObject is HUGE when all the references are chased - it wouldn't surprise me if it pulled in all of the relevant bits of the Mongo collection, connection, etc.\n\nThe workaround I use is simply the \"Doctor, it hurts when I do that\" solution - don't do that.  I don't need live updating from meteor, so I copy the fields from the AngularMeteorObject into a simple formly model object that just contains the fields, and then copy the fields back to do a save.  I have a simple utility function to do this that takes an array of field names.  \n\nIf there's anything to do to help this in formly, it might be to provide a copy utility function that traverses the \"<formly-form fields=\" fields object and does a deep copy of all the fields, given a source object and optional destination.  This may exist already - I didn't chase it.  I may write one later.\n. @kentcdodds,   I understand the example http://angular-formly.com/#/example/intro/introduction to imply (search for \"nested.story\") that in the case above a key could be set to \"Address.Street\" without setting \"model\".  But in my experience, a nested key like \"Address.Street\" doesn't work; it doesn't populate the form from the model.  Setting \"model\", as you describe above, works fine.\n\nAm I misunderstanding the example?  Does it work only by virtue of some condition or configuration that I'm overlooking?\n\nWhile this is not currently in the form of a bug report/feature request, I think it's likely to evolve into one (probably a different Issue).\n. @ckniffen Thanks, modifying the example model to include data for the nested field, below, demonstrates correct initialization.  So I'm doing something wrong in my other code (using 7.2.3).\n\n```\n    vm.model = {\n      even: {\n        with: {arrays: []}\n      },\n      some: {\n        nested: {\n          property: { magic: \"shazam!\" }\n        }\n      }\n    };\n```\n. @kentcdodds ,\nThe question isn't of a kind allowed on StackOverflow, and clearly is not of a form suitable for JSBin!  I thought the answer, if any exists, might be of value to others, so I thought it should be Google-searchable (not Gitter).  I've of course searched and found nothing - but \"tag\" is not the easiest thing to search for; I may have missed something.  I'm inferring from your response that there is no such integration, in which case consider it a feature request.  I'll spend some time trying to do it myself and will share if successful, but frankly expect to fail and fall back to a no formly where tags are needed.  \nThanks -Ed\n. @benoror - Thanks!  The \"agnostic\" bit is reassuring - I'll push it harder.  FWIW, I need tags, though, not just multiselect.\n. @kentcdodds - Sorry, I wasn't clear - I meant to request an example.  Let me see what I can do - I'll be back in a few days.\n. I can shed some light, I think.  The problem occurs when an [AngularMeteorObject](http://angular-meteor.com/api/AngularMeteorObject) is used as the \"<formly-form model=\" attribute.  Angular tries to do an angular.copy on it, I'd guess maybe to create an isolate scope for the formly directive.  Even if this worked, it would be a really bad thing to do - AngularMeteorObject is HUGE when all the references are chased - it wouldn't surprise me if it pulled in all of the relevant bits of the Mongo collection, connection, etc.\n\nThe workaround I use is simply the \"Doctor, it hurts when I do that\" solution - don't do that.  I don't need live updating from meteor, so I copy the fields from the AngularMeteorObject into a simple formly model object that just contains the fields, and then copy the fields back to do a save.  I have a simple utility function to do this that takes an array of field names.  \n\nIf there's anything to do to help this in formly, it might be to provide a copy utility function that traverses the \"<formly-form fields=\" fields object and does a deep copy of all the fields, given a source object and optional destination.  This may exist already - I didn't chase it.  I may write one later.\n. @kentcdodds,   I understand the example http://angular-formly.com/#/example/intro/introduction to imply (search for \"nested.story\") that in the case above a key could be set to \"Address.Street\" without setting \"model\".  But in my experience, a nested key like \"Address.Street\" doesn't work; it doesn't populate the form from the model.  Setting \"model\", as you describe above, works fine.\n\nAm I misunderstanding the example?  Does it work only by virtue of some condition or configuration that I'm overlooking?\n\nWhile this is not currently in the form of a bug report/feature request, I think it's likely to evolve into one (probably a different Issue).\n. @ckniffen Thanks, modifying the example model to include data for the nested field, below, demonstrates correct initialization.  So I'm doing something wrong in my other code (using 7.2.3).\n\n```\n    vm.model = {\n      even: {\n        with: {arrays: []}\n      },\n      some: {\n        nested: {\n          property: { magic: \"shazam!\" }\n        }\n      }\n    };\n```\n. @kentcdodds ,\nThe question isn't of a kind allowed on StackOverflow, and clearly is not of a form suitable for JSBin!  I thought the answer, if any exists, might be of value to others, so I thought it should be Google-searchable (not Gitter).  I've of course searched and found nothing - but \"tag\" is not the easiest thing to search for; I may have missed something.  I'm inferring from your response that there is no such integration, in which case consider it a feature request.  I'll spend some time trying to do it myself and will share if successful, but frankly expect to fail and fall back to a no formly where tags are needed.  \nThanks -Ed\n. @benoror - Thanks!  The \"agnostic\" bit is reassuring - I'll push it harder.  FWIW, I need tags, though, not just multiselect.\n. @kentcdodds - Sorry, I wasn't clear - I meant to request an example.  Let me see what I can do - I'll be back in a few days.\n. ",
    "maku": "Of course the best solution would be to provide angular-formly via  jspm registry :-) to be able to \"jspm install angular-formly\" \n\nTo find the reason why the warning occurrs (\"Tried to load angular more than once\") is not that easy. Maybe it is a problem with jspm (as you mentioned)\n. Great, thank you\n. Wow, really cool, thank you....\n. Principally, I find the approach good because it seems more logical to me.\nBecause of I write the JSON not manually (I hide JSON creation behind a formbuilder) - this should not have so much impact for me.\n. Of course the best solution would be to provide angular-formly via  jspm registry :-) to be able to \"jspm install angular-formly\" \n\nTo find the reason why the warning occurrs (\"Tried to load angular more than once\") is not that easy. Maybe it is a problem with jspm (as you mentioned)\n. Great, thank you\n. Wow, really cool, thank you....\n. Principally, I find the approach good because it seems more logical to me.\nBecause of I write the JSON not manually (I hide JSON creation behind a formbuilder) - this should not have so much impact for me.\n. ",
    "Najai": "Thank for your answers! \nAs ckniffen said, the solution was to slighlty modify the template. Indeed for awsome-bootsrap-checkbox to work, the <input> tag should not be nested inside the <label> tag, as it is in the original template.\nSo my template for the checkbox is now : \n\n``` javascript\n <div class=\"checkbox\">\n    <input type=\"checkbox\" class=\"formly-field-checkbox\" ng-model=\"model[options.key]\">\n    <label>\n        {{to.label}}\n        {{to.required ? '*' : ''}}\n    </label>\n</div>\n```\n\nthanks again  :)\n. Thank for your answers! \nAs ckniffen said, the solution was to slighlty modify the template. Indeed for awsome-bootsrap-checkbox to work, the <input> tag should not be nested inside the <label> tag, as it is in the original template.\nSo my template for the checkbox is now : \n\n``` javascript\n <div class=\"checkbox\">\n    <input type=\"checkbox\" class=\"formly-field-checkbox\" ng-model=\"model[options.key]\">\n    <label>\n        {{to.label}}\n        {{to.required ? '*' : ''}}\n    </label>\n</div>\n```\n\nthanks again  :)\n. ",
    "aksinghdce": "I see the issue with radio-group. The option gets selected but it doesn't look selected. \nHow do I fix it as a user?\n. I see the issue with radio-group. The option gets selected but it doesn't look selected. \nHow do I fix it as a user?\n. ",
    "PascalPrecht": "Hey everyone,\n\nI haven't used angular-formly myself yet. Recently it popped up, that angular-formly doesn't support `controllerAs`, as it tries to keep support for Angular 1.2.x. I have a couple of thoughts on this:\n- **controllerAs is part of Angular 1.2.15** maybe even earlier, as we can see here: https://code.angularjs.org/1.2.15/docs/api/ng/directive/ngController. If this is a reason to not drop support for Angular 1.2.x, I think this can be done now. As long as devs upgrade in 1.2.x range, there should be no problems.\n- **Parsers/Formatters/Validators** - Validators have been introduced in Angular 1.3. Before that, we used parsers and formatters to validate input values. Since parsers and formatters still exist in Angular 1.3, because they still doing their job of parsing and formatting, I don't see any reason to drop support for 1.2 that feature. AFAIK this extension opts in anyways, and falls back to parsers and formatters in case no validators are supported. So that's fine.\n\nMaybe support for Angular 1.2 doesn't have to be fully dropped, but angular-formly should move on and use `controllerAs`, since this is one of the very first best practices that Angular devs learn today. They should avoid using `$scope`. Not sure what else keeps you from upgrading, but if it's `controllerAs` I'd recommend making it a requirement that the version of Angular that is used supports it.\n. @sharpmachine `controllerAs` is considered best practice in Angular. It solves basically your `vm = this` problem, since that has been always a work-around.\n\nThanks @kentcdodds for mentioning our article :)\n. Hey everyone,\n\nI haven't used angular-formly myself yet. Recently it popped up, that angular-formly doesn't support `controllerAs`, as it tries to keep support for Angular 1.2.x. I have a couple of thoughts on this:\n- **controllerAs is part of Angular 1.2.15** maybe even earlier, as we can see here: https://code.angularjs.org/1.2.15/docs/api/ng/directive/ngController. If this is a reason to not drop support for Angular 1.2.x, I think this can be done now. As long as devs upgrade in 1.2.x range, there should be no problems.\n- **Parsers/Formatters/Validators** - Validators have been introduced in Angular 1.3. Before that, we used parsers and formatters to validate input values. Since parsers and formatters still exist in Angular 1.3, because they still doing their job of parsing and formatting, I don't see any reason to drop support for 1.2 that feature. AFAIK this extension opts in anyways, and falls back to parsers and formatters in case no validators are supported. So that's fine.\n\nMaybe support for Angular 1.2 doesn't have to be fully dropped, but angular-formly should move on and use `controllerAs`, since this is one of the very first best practices that Angular devs learn today. They should avoid using `$scope`. Not sure what else keeps you from upgrading, but if it's `controllerAs` I'd recommend making it a requirement that the version of Angular that is used supports it.\n. @sharpmachine `controllerAs` is considered best practice in Angular. It solves basically your `vm = this` problem, since that has been always a work-around.\n\nThanks @kentcdodds for mentioning our article :)\n. ",
    "jmls": "I personally think that saying v6/v7 will be the last release that supports 1.2 is just fine. At least that way v7/v8 can be coded with the new stuff in 1.3 (1.4?) in mind rather than be constrained by having to support an older version of angular\n\nie, if you want the new stuff in formly, move to 1.3.\n. oh! oh! +1 ;) How's it going ? /me wants semantic-ui badly ... \n. @funkytaco : why did you choose not to use formly ?\n\nanyone else: anyone worked on semantic-ui templates ? There's a great feature-set for angular-semantic at https://github.com/ClickerMonkey/Semantic-UI-Angular\n. I personally think that saying v6/v7 will be the last release that supports 1.2 is just fine. At least that way v7/v8 can be coded with the new stuff in 1.3 (1.4?) in mind rather than be constrained by having to support an older version of angular\n\nie, if you want the new stuff in formly, move to 1.3.\n. oh! oh! +1 ;) How's it going ? /me wants semantic-ui badly ... \n. @funkytaco : why did you choose not to use formly ?\n\nanyone else: anyone worked on semantic-ui templates ? There's a great feature-set for angular-semantic at https://github.com/ClickerMonkey/Semantic-UI-Angular\n. ",
    "sidharthachatterjee": "Ah, alright. That's fine. Thank you for the quick reply, Kent!\n. You can use use a `$scope.$watch` on the model value of the country and when it changes, get the appropriate states from the API and mutate the options in the states field (within `vm.fields`) in particular.\n. Ah, alright. That's fine. Thank you for the quick reply, Kent!\n. You can use use a `$scope.$watch` on the model value of the country and when it changes, get the appropriate states from the API and mutate the options in the states field (within `vm.fields`) in particular.\n. ",
    "casoetan": "Okay, but how do I implement a scenario where a select box depends on another. For instance, I have a select box for countries, when a user selects his country how can i auto populate a second select box with states from that country. \nNote, country and states will be fed from an external api.\n\nThanks\n. Thanks for the quick response, do you have any sample code for this? \n. Okay, tried $scope.$watch on my model, doesn't get called when I change select options, only does for text fields.\n. thanks for this. Hope someone steps up to maintain this.\n. Okay, but how do I implement a scenario where a select box depends on another. For instance, I have a select box for countries, when a user selects his country how can i auto populate a second select box with states from that country. \nNote, country and states will be fed from an external api.\n\nThanks\n. Thanks for the quick response, do you have any sample code for this? \n. Okay, tried $scope.$watch on my model, doesn't get called when I change select options, only does for text fields.\n. thanks for this. Hope someone steps up to maintain this.\n. ",
    "yushkovskiy": "Great! Thanks!\n. Sorry I'm not sure what you mean by PR. I guess it is problem reproduce or something\nhttp://jsbin.com/leroci/edit?js,output\n. Great! Thanks!\n. Sorry I'm not sure what you mean by PR. I guess it is problem reproduce or something\nhttp://jsbin.com/leroci/edit?js,output\n. ",
    "dwolt": "I'm using the \"after\" version, but why have a breaking change if you don't have to? It is very tempting to tidy things up, but it is a better habit to go out of the way not to have breaking changes. The examples could all look like the \"after\" and I see no problem keeping the \"before\" out of the documentation or indicating the user should consider it deprecated, unless there is a significant cost to keeping the \"before\" option around, why break existing code with the upgrade? \n. I'm curious why it would be better for the user (developer) to have to know\nboth the name of a \"parameter\" and the classification of it. Unless these\ntuples (templateOptions, ngModelAttrs) have optional cardinality > 1, why\nmake the user group them? If there are namespace type issues or the\ninternals need to separate them into groups to pass them to different\nprocessors, then a prefix should suffice. My suggestion would be to put\nthem all just one level deep (unless there are repeating groups). I will\ngrant that I am not giving a second of attention to the coding behind the\nscenes -- I'm just speaking as a user.\n\n--dawn\n\nOn Mon, Jun 29, 2015 at 9:30 PM, Kent C. Dodds notifications@github.com\nwrote:\n\n> Not quite, but from a template author's perspective, you should hopefully\n> have just a few places to update things. Unfortunately, from a user's\n> perspective, many field properties that used to live in templateOptions\n> would go to ngModelAttrs instead. As I said, I'd make a demonstration of\n> a fieldTransform that would allow you to make that transition over time,\n> but eventually you'd want to rewrite all of your field configuration\n> objects to resemble the new format.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/376#issuecomment-116916849\n> .\n\n## \n\nDawn M. Wolthuis\n\nTake and give some delight today\n. Yes, that does make sense. If all of the delivered attributes were \"at the\ntop\" and custom attributes had their own embedded tuple, that would\naccomplish things without the old-fashioned (but tried and true) use of\ndifferent prefixes, either for the delivered code (\"ng\" for example) or for\ncustom additions (I recall prefixes of \"x\" or \"z\").\n\nIf you further want us to grok that there are various types of attributes,\nprefixes can be used for that too. Requiring \"me\" to find not only the name\nof an attribute but the right classification to file it under seems\nunnecessary. I'll give you the name and you can file it in the right spot\nand process as needed.\n\nkey:\ntype:\ntoLabel:\ntoPlaceholder:\ncustomAttrs: {\n  myStuff:\n  namedWhatever:\n  toBecause:\n}\n\nMake the api easy for the developer and cling to backward compatibility and\ndevelopers will appreciate it.  --dawn\n\nOn Tue, Jun 30, 2015 at 10:32 AM, Kent C. Dodds notifications@github.com\nwrote:\n\n> @dwolt https://github.com/dwolt, your perspective as a user is exactly\n> what I'm trying to get, so thanks for sharing!\n> \n> Originally, angular-formly didn't have any kind of structure for its\n> options. If you wanted to create a new template, you would just add your\n> own property to the field config object and life was good. Until the\n> angular-formly core library comes around and decides to use a property of\n> the same name for some other purpose and now you're stuck.\n> \n> For example, let's imagine that you decide you want to make a special\n> input that allows you to react when when you type into the input. You would\n> probably add an onKeyup property to the field config and use that:\n> \n> {\n>   type: 'datepicker',\n>   onKeyup: function(event) {\n>     if (event.which === 32) {\n>       console.log('space typed!!');\n>     }\n>   }\n> }\n> \n> Then angular-formly comes along and decides to add this to all fields, but\n> makes the function arguments different. Instead of passing the event, it\n> passes the $viewValue or something. Or perhaps angular-formly processes\n> your field differently because that field exists. This would prevent you\n> from upgrading until you refactored all of your fields.\n> \n> Hopefully that makes sense and builds a case for the separation as well as\n> the use of api-check in this project. I force you to place your own stuff\n> in either data or templateOptions and I let you have full reign over\n> those objects. Except in the case of templateOptions, there are\n> properties that angular-formly uses to do some of its magic. Which sort of\n> reintroduces the original issue. Which is why I'm suggesting this change\n> would be worth the migration.\n> \n> Does that make sense? Any holes in my logic? Is it not worth it?\n> \n> Asside from that, the templateOptions stuff is a little magical and is\n> something that you must learn. It's not really intuitive. Something like\n> ngModelAttrs makes a lot of sense. You just think to yourself: \"What\n> would I normally put alongside the ng-model element, there's probably a\n> property for that.\"\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/376#issuecomment-117229970\n> .\n\n## \n\nDawn M. Wolthuis\n\nTake and give some delight today\n. I'm using the \"after\" version, but why have a breaking change if you don't have to? It is very tempting to tidy things up, but it is a better habit to go out of the way not to have breaking changes. The examples could all look like the \"after\" and I see no problem keeping the \"before\" out of the documentation or indicating the user should consider it deprecated, unless there is a significant cost to keeping the \"before\" option around, why break existing code with the upgrade? \n. I'm curious why it would be better for the user (developer) to have to know\nboth the name of a \"parameter\" and the classification of it. Unless these\ntuples (templateOptions, ngModelAttrs) have optional cardinality > 1, why\nmake the user group them? If there are namespace type issues or the\ninternals need to separate them into groups to pass them to different\nprocessors, then a prefix should suffice. My suggestion would be to put\nthem all just one level deep (unless there are repeating groups). I will\ngrant that I am not giving a second of attention to the coding behind the\nscenes -- I'm just speaking as a user.\n\n--dawn\n\nOn Mon, Jun 29, 2015 at 9:30 PM, Kent C. Dodds notifications@github.com\nwrote:\n\n> Not quite, but from a template author's perspective, you should hopefully\n> have just a few places to update things. Unfortunately, from a user's\n> perspective, many field properties that used to live in templateOptions\n> would go to ngModelAttrs instead. As I said, I'd make a demonstration of\n> a fieldTransform that would allow you to make that transition over time,\n> but eventually you'd want to rewrite all of your field configuration\n> objects to resemble the new format.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/376#issuecomment-116916849\n> .\n\n## \n\nDawn M. Wolthuis\n\nTake and give some delight today\n. Yes, that does make sense. If all of the delivered attributes were \"at the\ntop\" and custom attributes had their own embedded tuple, that would\naccomplish things without the old-fashioned (but tried and true) use of\ndifferent prefixes, either for the delivered code (\"ng\" for example) or for\ncustom additions (I recall prefixes of \"x\" or \"z\").\n\nIf you further want us to grok that there are various types of attributes,\nprefixes can be used for that too. Requiring \"me\" to find not only the name\nof an attribute but the right classification to file it under seems\nunnecessary. I'll give you the name and you can file it in the right spot\nand process as needed.\n\nkey:\ntype:\ntoLabel:\ntoPlaceholder:\ncustomAttrs: {\n  myStuff:\n  namedWhatever:\n  toBecause:\n}\n\nMake the api easy for the developer and cling to backward compatibility and\ndevelopers will appreciate it.  --dawn\n\nOn Tue, Jun 30, 2015 at 10:32 AM, Kent C. Dodds notifications@github.com\nwrote:\n\n> @dwolt https://github.com/dwolt, your perspective as a user is exactly\n> what I'm trying to get, so thanks for sharing!\n> \n> Originally, angular-formly didn't have any kind of structure for its\n> options. If you wanted to create a new template, you would just add your\n> own property to the field config object and life was good. Until the\n> angular-formly core library comes around and decides to use a property of\n> the same name for some other purpose and now you're stuck.\n> \n> For example, let's imagine that you decide you want to make a special\n> input that allows you to react when when you type into the input. You would\n> probably add an onKeyup property to the field config and use that:\n> \n> {\n>   type: 'datepicker',\n>   onKeyup: function(event) {\n>     if (event.which === 32) {\n>       console.log('space typed!!');\n>     }\n>   }\n> }\n> \n> Then angular-formly comes along and decides to add this to all fields, but\n> makes the function arguments different. Instead of passing the event, it\n> passes the $viewValue or something. Or perhaps angular-formly processes\n> your field differently because that field exists. This would prevent you\n> from upgrading until you refactored all of your fields.\n> \n> Hopefully that makes sense and builds a case for the separation as well as\n> the use of api-check in this project. I force you to place your own stuff\n> in either data or templateOptions and I let you have full reign over\n> those objects. Except in the case of templateOptions, there are\n> properties that angular-formly uses to do some of its magic. Which sort of\n> reintroduces the original issue. Which is why I'm suggesting this change\n> would be worth the migration.\n> \n> Does that make sense? Any holes in my logic? Is it not worth it?\n> \n> Asside from that, the templateOptions stuff is a little magical and is\n> something that you must learn. It's not really intuitive. Something like\n> ngModelAttrs makes a lot of sense. You just think to yourself: \"What\n> would I normally put alongside the ng-model element, there's probably a\n> property for that.\"\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/376#issuecomment-117229970\n> .\n\n## \n\nDawn M. Wolthuis\n\nTake and give some delight today\n. ",
    "jsonRUHLS": "I like the potential new change. It immediately makes things more clear for me.\n. Kent,\n\nI would like to be added to the team.  I am using the heck out of formly, for production development.  As such, I have run into complex issues that aren't necessarily covered in the documentation or examples.  Time permitting, I will answer questions I can and help to mod the repo.  I love Angular and believe that I can love Formly more, with every passing day. \n. I like the potential new change. It immediately makes things more clear for me.\n. Kent,\n\nI would like to be added to the team.  I am using the heck out of formly, for production development.  As such, I have run into complex issues that aren't necessarily covered in the documentation or examples.  Time permitting, I will answer questions I can and help to mod the repo.  I love Angular and believe that I can love Formly more, with every passing day. \n. ",
    "koraybalci": "How about keeping the old one and introducing a brand new formly directive instead? This looks more readable to me with the added benefit of not braking existing code:\n\n```\n<form name=\"vm.form\" ng-submit=\"vm.submit()\">\n  <formly model=\"vm.model\" fields=\"vm.fields\">\n    <button ng-disabled=\"vm.form.$invalid\">Submit</button>\n  </formly>\n</form>\n```\n. I am not against new formly type at all, however, I suspect (gut feeling) that there is a better and simpler way. By the way, I already used ui datepicker example and defined a new type to overcome the problem.\n\nOn a side note, I also tried overriding actual input type and seek for date option set as you suggest but could not manage to work it out. I couldn't really figure out how to add a controller and do this one date fixing task alone.\n\nI am pretty new to formly by the way.. It's great so far though..\n. wow, I feel like an idiot :) Thanks for the fast response..\n\nMeanwhile I was going ahead and overriding some config fields myself, your suggestions are way more simpler :+1: \n. @bialad are you planning to create a pull request for it? I am looking fwd to the step option just as you suggested.\n. I am sorry but I believe this is either bug report or feature request if not both. I will try to provide you with a simple example, however I wish you have at least read it through before closing the issue.\n. Thanks for the explanation, I totally understand the policy, I hope I wasn't rude or sth.\n\nHowever, to reproduce the issue, just open the example http://angular-formly.com/#/example/other/nested-formly-forms and comment out the initialization of address field in vm.model such that:\n\n```\nvm.model = {      \n     // firstName: 'Benjamin',\n     // address: {\n     //   town: 'San Luis Potosi',\n     //  }    \n};\n```\n\nand re-run the example and observe vm.model in output window. You will see that vm.model.address is initialized to empty object {}\n\nMy point/question is, shouldn't it be set to null instead of empty object. I think it's either a bug or wrong implementation because of the side effects I mention in my original post.\n. Well, sorry but I still tend to disagree. I understand how a nested model should look like, but unless there is no actual data, each property can stay null as long as their values (or their children's values) remain untouched. \n\nI am using a standard c# webapi backend with json.net serializer, which converts the mentioned empty js object to an empty (not null but instantiated) c# object. I don't think there is anything special or wrong with my backend, and philosophically (or architecturally speaking) the backend is irrelevant. I may be able to handle it in the backend but it would be patching the client behavior in the server side, which may miserably fail in the future. \n\nTo put it simply, in my understanding and from my perspective (be it client or server side does not matter, I am speculating sort of philosophically here), if there is nothing in the form, there should be no data, and no data means null, not empty object. \n\nI don't know how this case is actually implemented in formly, but I would prefer a lazy initialization scheme if possible. That would be in line with the behavior common to any other model field (simple text input etc) in formly.\n. Thanks, I already took the 2nd route, however because of the recursive nature of the problem (nested stuff), I was hesitant on performance implications and I do believe that kind of patching should be unnecessary. Hence I opened an issue to understand whether it is a fix needed on lib level.\n\nI can try to patch it as you suggest in your option 1, if we both (all) agree it's a lib level fix and no nasty side effects will arise. I am especially worried about other people's client code which rely on existing behavior. I'd appreciate if you can reopen the issue too, if that's the route you'd prefer.\n\nBy the way thanks for the discussion and fast response.\n. Fair enough (although I still tend to disagree :) ). I am closing the issue then.\n. I am totally confused (I can swear it wasn't working, but won't), probably my bad, too worked up with my own formatter issue and probably hoped this would not work as well.. thx for your time.. \n. How about keeping the old one and introducing a brand new formly directive instead? This looks more readable to me with the added benefit of not braking existing code:\n\n```\n<form name=\"vm.form\" ng-submit=\"vm.submit()\">\n  <formly model=\"vm.model\" fields=\"vm.fields\">\n    <button ng-disabled=\"vm.form.$invalid\">Submit</button>\n  </formly>\n</form>\n```\n. I am not against new formly type at all, however, I suspect (gut feeling) that there is a better and simpler way. By the way, I already used ui datepicker example and defined a new type to overcome the problem.\n\nOn a side note, I also tried overriding actual input type and seek for date option set as you suggest but could not manage to work it out. I couldn't really figure out how to add a controller and do this one date fixing task alone.\n\nI am pretty new to formly by the way.. It's great so far though..\n. wow, I feel like an idiot :) Thanks for the fast response..\n\nMeanwhile I was going ahead and overriding some config fields myself, your suggestions are way more simpler :+1: \n. @bialad are you planning to create a pull request for it? I am looking fwd to the step option just as you suggested.\n. I am sorry but I believe this is either bug report or feature request if not both. I will try to provide you with a simple example, however I wish you have at least read it through before closing the issue.\n. Thanks for the explanation, I totally understand the policy, I hope I wasn't rude or sth.\n\nHowever, to reproduce the issue, just open the example http://angular-formly.com/#/example/other/nested-formly-forms and comment out the initialization of address field in vm.model such that:\n\n```\nvm.model = {      \n     // firstName: 'Benjamin',\n     // address: {\n     //   town: 'San Luis Potosi',\n     //  }    \n};\n```\n\nand re-run the example and observe vm.model in output window. You will see that vm.model.address is initialized to empty object {}\n\nMy point/question is, shouldn't it be set to null instead of empty object. I think it's either a bug or wrong implementation because of the side effects I mention in my original post.\n. Well, sorry but I still tend to disagree. I understand how a nested model should look like, but unless there is no actual data, each property can stay null as long as their values (or their children's values) remain untouched. \n\nI am using a standard c# webapi backend with json.net serializer, which converts the mentioned empty js object to an empty (not null but instantiated) c# object. I don't think there is anything special or wrong with my backend, and philosophically (or architecturally speaking) the backend is irrelevant. I may be able to handle it in the backend but it would be patching the client behavior in the server side, which may miserably fail in the future. \n\nTo put it simply, in my understanding and from my perspective (be it client or server side does not matter, I am speculating sort of philosophically here), if there is nothing in the form, there should be no data, and no data means null, not empty object. \n\nI don't know how this case is actually implemented in formly, but I would prefer a lazy initialization scheme if possible. That would be in line with the behavior common to any other model field (simple text input etc) in formly.\n. Thanks, I already took the 2nd route, however because of the recursive nature of the problem (nested stuff), I was hesitant on performance implications and I do believe that kind of patching should be unnecessary. Hence I opened an issue to understand whether it is a fix needed on lib level.\n\nI can try to patch it as you suggest in your option 1, if we both (all) agree it's a lib level fix and no nasty side effects will arise. I am especially worried about other people's client code which rely on existing behavior. I'd appreciate if you can reopen the issue too, if that's the route you'd prefer.\n\nBy the way thanks for the discussion and fast response.\n. Fair enough (although I still tend to disagree :) ). I am closing the issue then.\n. I am totally confused (I can swear it wasn't working, but won't), probably my bad, too worked up with my own formatter issue and probably hoped this would not work as well.. thx for your time.. \n. ",
    "homerjam": "Seems like a pretty trivial thing to fix on upgrading. Simplifying the code would help people contribute too.\n. Seems like a pretty trivial thing to fix on upgrading. Simplifying the code would help people contribute too.\n. ",
    "SteveShaffer": "I'm not against requiring `form`.  I already write it that way and I think it would at least be important to make sure people know that's probably the best way to do it.\n\nI might not fully understand here, but if you didn't require the form controller, isn't formly just a templating library at that point?  I'm not sure there's that many strong use cases that don't require a form controller (though I'm probably wrong on that).\n\nI also like @koraybalci's suggestion for a good strong `<formly>` directive and would be happy to help update docs if that's the blocker (note the word **_help_** though).\n\nOne other thought: if `^form` is required and the main directive no longer _is_ the form, then is there any point to having the transclusion for things like buttons?  With a `<form>` wrapper, it's the same as just including it after the `<formly-form>`, right?  All my stuff already looks like this just for clarity and I believe it works exactly the same as including the buttons as transcluded content:\n\n```\n<form name=\"vm.form\" ng-submit=\"vm.submit()\">\n    <formly-form fields=\"vm.fields\" model=\"vm.model\"></formly-form>\n    <button type=\"submit>Submit</button>\n</form>\n```\n. Throwing my hat in: I also like the function approach.  I'd just note that, especially if you're keeping the string and array options, you'll now have three options.  I think that's mega-cool, but also a little magical and you'd at least want to make sure that sort of expectation is semi-consistent across the library.  Are there other places that accept functions that don't currently boil down to arrays (like functions that return objects or anything)?  I can't think of any but I don't know the whole library.  In general, I think that's a great open, backwards-compatible, extensible general purpose approach to these sorts of override-heavy APIs:\n\nString: 'string' --> ['string']\nArray: ['arr', 'ay']\nFunction: function (existingArray) { /\\* do stuff */ return newArray; }\n. I think it belongs where you have it, in the attributeOnly group since I don't think Angular pays attention to it.  [There's no ng-step specified in the Angular docs](https://docs.angularjs.org/api/ng/input/input%5Bnumber%5D).\n. I'm not against requiring `form`.  I already write it that way and I think it would at least be important to make sure people know that's probably the best way to do it.\n\nI might not fully understand here, but if you didn't require the form controller, isn't formly just a templating library at that point?  I'm not sure there's that many strong use cases that don't require a form controller (though I'm probably wrong on that).\n\nI also like @koraybalci's suggestion for a good strong `<formly>` directive and would be happy to help update docs if that's the blocker (note the word **_help_** though).\n\nOne other thought: if `^form` is required and the main directive no longer _is_ the form, then is there any point to having the transclusion for things like buttons?  With a `<form>` wrapper, it's the same as just including it after the `<formly-form>`, right?  All my stuff already looks like this just for clarity and I believe it works exactly the same as including the buttons as transcluded content:\n\n```\n<form name=\"vm.form\" ng-submit=\"vm.submit()\">\n    <formly-form fields=\"vm.fields\" model=\"vm.model\"></formly-form>\n    <button type=\"submit>Submit</button>\n</form>\n```\n. Throwing my hat in: I also like the function approach.  I'd just note that, especially if you're keeping the string and array options, you'll now have three options.  I think that's mega-cool, but also a little magical and you'd at least want to make sure that sort of expectation is semi-consistent across the library.  Are there other places that accept functions that don't currently boil down to arrays (like functions that return objects or anything)?  I can't think of any but I don't know the whole library.  In general, I think that's a great open, backwards-compatible, extensible general purpose approach to these sorts of override-heavy APIs:\n\nString: 'string' --> ['string']\nArray: ['arr', 'ay']\nFunction: function (existingArray) { /\\* do stuff */ return newArray; }\n. I think it belongs where you have it, in the attributeOnly group since I don't think Angular pays attention to it.  [There's no ng-step specified in the Angular docs](https://docs.angularjs.org/api/ng/input/input%5Bnumber%5D).\n. ",
    "sharpmachine": "No I'm not.  But everything is working as expected so is it an issue?  Am I meant to be using controllerAs syntax?  Or am I good?\n. Okay, just checking.  I'm new to Angular.  Thanks for your help.\n. Thanks @kentcdodds!  Can you explain why controller as syntax is better or point me to a good article that does?  I'd appreciate it.\n. Thanks @kentcdodds.  Much appreciated.  Loving Formly too...great stuff.\n. No I'm not.  But everything is working as expected so is it an issue?  Am I meant to be using controllerAs syntax?  Or am I good?\n. Okay, just checking.  I'm new to Angular.  Thanks for your help.\n. Thanks @kentcdodds!  Can you explain why controller as syntax is better or point me to a good article that does?  I'd appreciate it.\n. Thanks @kentcdodds.  Much appreciated.  Loving Formly too...great stuff.\n. ",
    "mweels": "I seem to be having the same problem, I have setup my controller as.  Anything else that would cause fields not to show up?  My controller is wired up fine.  I am not using routes (not sure if that is a required).\n. I seem to be having the same problem, I have setup my controller as.  Anything else that would cause fields not to show up?  My controller is wired up fine.  I am not using routes (not sure if that is a required).\n. ",
    "austinstudio": "This was huge for me.  Not sure why I should have to do this but I had to do the following in my app where I was using routes.\n\n```\n$routeProvider\n    .when('/home', {\n        templateUrl: 'views/main.html',\n        controllerAs: 'ctrl',\n        controller: 'homeCtrl'\n    })\n```\n\nAnd then on my page I had to use the following:\n\n```\n<form ng-submit=\"ctrl.onSubmit()\" novalidate>\n    <formly-form model=\"ctrl.user\" fields=\"ctrl.userFields\" form=\"ctrl.userForm\">\n        <button class=\"btn btn-primary\" type=\"submit\" ng-disabled=\"ctrl.userForm.$invalid\">Submit</button>\n    </formly-form>\n</form>\n```\n\nNotice the \"ctrl\" stuff I had to add to make my form show up.  Is this the only way to do this?  I tried to follow other examples where people used \"vm.userFields\" directly without the extra controllerAs and extra . syntax.  At least this thread helped me figure this out.  I guess the tutorial I was following was just outdated.\n. This was huge for me.  Not sure why I should have to do this but I had to do the following in my app where I was using routes.\n\n```\n$routeProvider\n    .when('/home', {\n        templateUrl: 'views/main.html',\n        controllerAs: 'ctrl',\n        controller: 'homeCtrl'\n    })\n```\n\nAnd then on my page I had to use the following:\n\n```\n<form ng-submit=\"ctrl.onSubmit()\" novalidate>\n    <formly-form model=\"ctrl.user\" fields=\"ctrl.userFields\" form=\"ctrl.userForm\">\n        <button class=\"btn btn-primary\" type=\"submit\" ng-disabled=\"ctrl.userForm.$invalid\">Submit</button>\n    </formly-form>\n</form>\n```\n\nNotice the \"ctrl\" stuff I had to add to make my form show up.  Is this the only way to do this?  I tried to follow other examples where people used \"vm.userFields\" directly without the extra controllerAs and extra . syntax.  At least this thread helped me figure this out.  I guess the tutorial I was following was just outdated.\n. ",
    "jackboot7": "This should have the \"question\" label.\n. This should have the \"question\" label.\n. ",
    "XVincentX": "Hey,\ngenerally speaking, all the hypermedia world is very cool, even if still coarse. For example, Siren is actually the only hypermedia format that supports the \"action\" concept. Other ones, like CJ or HAL, stops at `link` support.\n\nGiven that, I may be interested in contribution for that, but I have no ETA. I am working on a small project and I definitely will try to use your component. After that, I will try (if I'll have some time left) to extract my work and contribute back to your project.\n. Hey,\ngenerally speaking, all the hypermedia world is very cool, even if still coarse. For example, Siren is actually the only hypermedia format that supports the \"action\" concept. Other ones, like CJ or HAL, stops at `link` support.\n\nGiven that, I may be interested in contribution for that, but I have no ETA. I am working on a small project and I definitely will try to use your component. After that, I will try (if I'll have some time left) to extract my work and contribute back to your project.\n. ",
    "abbish": "Thank u\n. Thank u\n. ",
    "cfv1984": "Hi Kent! Thank you **VERY** much for the prompt response. \n\nI've indeed begun building my own template library, and indeed my names and ids are different in there through the templateOptions hash. \nIn this particular use case, there is a preexisting backend that consumes the form, to which we don't really have frequent access, and it needs its values in the form `name=\"form[nested][0123][key]\"`. This wouldn't necessarily be a problem, but as there is a preexisting frontend too, which in assorted places will look for ids in the form `id=\"form_nested_0123_key\"` that'd mean having to track down and update any and all references to the thing wherever they might occur. \n\nI understand it's indeed the case that for _new_ applications or even preexisting SPAs that the name of an input is not really relevant, but for preexisting apps or even some styles of markup generation it can be a pretty big deal. \n\nThe _meaning_ of an ID vs a name are different, and I'd indeed be very grateful if such a thing could be represented more naturally in formly. \n\nAgain, thank you very much! \n. ```\n    \"angular-formly\": \"6.12.0\",\n    \"angular\": \"1.3.14\",\n```\n\nWould splitting the forms into smaller chunks work? What's the largest amount of inputs we could effectively use on screen?  Our use case essentially demands we show this kind of forms, and even if on a fieldgroup by fieldgroup basis it would probably be some double digits inputs each.\n\nOne thing we thought about  was throttling any keydowns blurs or watches on the inputs, since that's when the issues appear the most. \n\nIs that something we can even do?\n. Hi @kentcdodds! in the end it was decided we'd split the form in a wizard-like fashion, by fieldgroups, and  only render a fieldgroup at a time. \n\n@Werick Did you do something similar to this? \n\n@joshtoo It's client work. I don't get to decide, just juggle the requirements and the capabilities we have. \n. Hi Kent! Thank you **VERY** much for the prompt response. \n\nI've indeed begun building my own template library, and indeed my names and ids are different in there through the templateOptions hash. \nIn this particular use case, there is a preexisting backend that consumes the form, to which we don't really have frequent access, and it needs its values in the form `name=\"form[nested][0123][key]\"`. This wouldn't necessarily be a problem, but as there is a preexisting frontend too, which in assorted places will look for ids in the form `id=\"form_nested_0123_key\"` that'd mean having to track down and update any and all references to the thing wherever they might occur. \n\nI understand it's indeed the case that for _new_ applications or even preexisting SPAs that the name of an input is not really relevant, but for preexisting apps or even some styles of markup generation it can be a pretty big deal. \n\nThe _meaning_ of an ID vs a name are different, and I'd indeed be very grateful if such a thing could be represented more naturally in formly. \n\nAgain, thank you very much! \n. ```\n    \"angular-formly\": \"6.12.0\",\n    \"angular\": \"1.3.14\",\n```\n\nWould splitting the forms into smaller chunks work? What's the largest amount of inputs we could effectively use on screen?  Our use case essentially demands we show this kind of forms, and even if on a fieldgroup by fieldgroup basis it would probably be some double digits inputs each.\n\nOne thing we thought about  was throttling any keydowns blurs or watches on the inputs, since that's when the issues appear the most. \n\nIs that something we can even do?\n. Hi @kentcdodds! in the end it was decided we'd split the form in a wizard-like fashion, by fieldgroups, and  only render a fieldgroup at a time. \n\n@Werick Did you do something similar to this? \n\n@joshtoo It's client work. I don't get to decide, just juggle the requirements and the capabilities we have. \n. ",
    "kkirsche": "Also their maintainer says they probably won't ever use it: http://stackoverflow.com/questions/24844901/bowers-bower-json-file-version-property\n. Also their maintainer says they probably won't ever use it: http://stackoverflow.com/questions/24844901/bowers-bower-json-file-version-property\n. ",
    "Revln9": "awesome ! thanks for the quick reply ! you should put this on top of the examples list  ! a very good one \n. awesome ! thanks for the quick reply ! you should put this on top of the examples list  ! a very good one \n. ",
    "ObaidUrRehman": "It seems to be adding empty items to the State drop down every time I select a different state. Here is how to reproduce it:\n1. Select United States from the country drop down.\n2. Select any state from the state drop down.\n3. Select any other option from the country except United States.\n4. Select United States again from the country drown down.\n\nNotice how the state drop down list now has 2 empty options. It goes away if you select an option. Any idea why this is happening?\n. Thanks @benoror. Much appreciated.\n. It seems to be adding empty items to the State drop down every time I select a different state. Here is how to reproduce it:\n1. Select United States from the country drop down.\n2. Select any state from the state drop down.\n3. Select any other option from the country except United States.\n4. Select United States again from the country drown down.\n\nNotice how the state drop down list now has 2 empty options. It goes away if you select an option. Any idea why this is happening?\n. Thanks @benoror. Much appreciated.\n. ",
    "een54": "Can you fix the example? It's complaining about you using https while embedding.\n\nI can access it by going to http://jsbin.com/jinaca but there's no explanation or source.\n. Isnt it fixed by changing it to http? \n. Can you fix the example? It's complaining about you using https while embedding.\n\nI can access it by going to http://jsbin.com/jinaca but there's no explanation or source.\n. Isnt it fixed by changing it to http? \n. ",
    "PhilFlash": "```\nscope.options.form = scope.form\nif (scope.options.key) {\n        modelValue = `model['${scope.options.key}']`;\n      }\n```\n\nTested and it solves the problem..\nThank you for this quick reply.\n. ```\nscope.options.form = scope.form\nif (scope.options.key) {\n        modelValue = `model['${scope.options.key}']`;\n      }\n```\n\nTested and it solves the problem..\nThank you for this quick reply.\n. ",
    "samuelcoutu": "Thanks a lot for helping. This was causing my issue.\n. Thanks a lot for helping. This was causing my issue.\n. ",
    "ejchet": "Well I guess you can close this, it worked when I put it in jsbin looks like I had a local issue.\n\nhttp://jsbin.com/yepisa/edit?html,output\n. Well I guess you can close this, it worked when I put it in jsbin looks like I had a local issue.\n\nhttp://jsbin.com/yepisa/edit?html,output\n. ",
    "hamidpp": "hi: i want add dynamically field to form \ud83d\udc4d \r\n\r\n<formly-form model=\"model\" fields=\"userFields\" options=\"options\" form=\"form\" track-by=\"$index\">\r\n     <button type=\"submit\" class=\"md-btn md-btn-success md-btn-wave-light waves-effect waves-button waves-light\">Submit</button>\r\n  </formly-form>\r\n\r\n$scope.userFields = [\r\n{\r\n                  // the key to be used in the model values\r\n                  // so this will be bound to vm.user.username\r\n                  key: 'username',\r\n                  type: 'input',\r\n                  templateOptions: {\r\n                      label: '\u0646\u0627\u0645 \u06a9\u0627\u0631\u0628\u0631\u06cc',\r\n                      placeholder: 'user name',\r\n                      required: true,\r\n                      description: 'Descriptive text'\r\n                  }\r\n              },\r\n]\r\n\r\n$scope.addField = function(){\r\n\r\n$scope.userFields.push({\r\n                    key: 'submit',\r\n                    type: 'button',\r\n                    templateOptions: {\r\n                        label: 'label-text'\r\n                    }\r\n                })\r\n\r\n}. hi: i want add dynamically field to form \ud83d\udc4d \r\n\r\n<formly-form model=\"model\" fields=\"userFields\" options=\"options\" form=\"form\" track-by=\"$index\">\r\n     <button type=\"submit\" class=\"md-btn md-btn-success md-btn-wave-light waves-effect waves-button waves-light\">Submit</button>\r\n  </formly-form>\r\n\r\n$scope.userFields = [\r\n{\r\n                  // the key to be used in the model values\r\n                  // so this will be bound to vm.user.username\r\n                  key: 'username',\r\n                  type: 'input',\r\n                  templateOptions: {\r\n                      label: '\u0646\u0627\u0645 \u06a9\u0627\u0631\u0628\u0631\u06cc',\r\n                      placeholder: 'user name',\r\n                      required: true,\r\n                      description: 'Descriptive text'\r\n                  }\r\n              },\r\n]\r\n\r\n$scope.addField = function(){\r\n\r\n$scope.userFields.push({\r\n                    key: 'submit',\r\n                    type: 'button',\r\n                    templateOptions: {\r\n                        label: 'label-text'\r\n                    }\r\n                })\r\n\r\n}. ",
    "jpuzzo": "Here's an example of what I'm trying to accomplish:\nhttp://jsbin.com/gumodedito/1/edit?html,js,output\n\nI apologize for not initially creating one, as jsbin is blocked on my company's network.\n\n@ckniffen After seeing the jsbin above, does making an additional formly-form still make sense?  I am already needing to create several of them for other purposes as it is...so the simpler the better.  If it's the only way to do it at this point, if you could shoot me a quick example of how I'd use accordions per new type (wrapping fields within the type with accordian-group), that would be helpful.\n\nThank you,\nJeff\n. So this is essentially what I was trying to accomplish:\nhttp://jsbin.com/butotacabi/1/edit?html,js,output\n\nThanks @ckniffen for the reference to the 'repeating section' example which allowed me to work backwards to reach the conclusion linked above.  I'm not sure if there was an easier way to apply a unique header title per section, but it's all that came to mind at the time.\n. I would appreciate this enhancement. :+1: \n. I'm currently using bower to update formly but I also have npm so I can switch things up if need be.\n. http://jsbin.com/sotugaxavi/1/edit?html,js,console,output\n\nSorry to exclude it initially. I had made an example in gitter but it was broken when I went back to it.  Should be fixed now.\n\nAlso, if there's a better way to accomplish what I'm trying to do without necessarily addressing the title of the issue, I'd be okay with that too :)\n. I dig it. Exactly what I needed since I had a bunch of hideExpressions already in place that were in string format that I needed to tack onto.\n\nI appreciate the speedy response & thank you :+1: \n. Here's an example of what I'm trying to accomplish:\nhttp://jsbin.com/gumodedito/1/edit?html,js,output\n\nI apologize for not initially creating one, as jsbin is blocked on my company's network.\n\n@ckniffen After seeing the jsbin above, does making an additional formly-form still make sense?  I am already needing to create several of them for other purposes as it is...so the simpler the better.  If it's the only way to do it at this point, if you could shoot me a quick example of how I'd use accordions per new type (wrapping fields within the type with accordian-group), that would be helpful.\n\nThank you,\nJeff\n. So this is essentially what I was trying to accomplish:\nhttp://jsbin.com/butotacabi/1/edit?html,js,output\n\nThanks @ckniffen for the reference to the 'repeating section' example which allowed me to work backwards to reach the conclusion linked above.  I'm not sure if there was an easier way to apply a unique header title per section, but it's all that came to mind at the time.\n. I would appreciate this enhancement. :+1: \n. I'm currently using bower to update formly but I also have npm so I can switch things up if need be.\n. http://jsbin.com/sotugaxavi/1/edit?html,js,console,output\n\nSorry to exclude it initially. I had made an example in gitter but it was broken when I went back to it.  Should be fixed now.\n\nAlso, if there's a better way to accomplish what I'm trying to do without necessarily addressing the title of the issue, I'd be okay with that too :)\n. I dig it. Exactly what I needed since I had a bunch of hideExpressions already in place that were in string format that I needed to tack onto.\n\nI appreciate the speedy response & thank you :+1: \n. ",
    "redhead": "It's not necessarily a blocker for us, if I get a bit of time I will look at it tomorrow (if as you say it's just as easy as extending the array). Thanks.\n\nAs for the attribute style directive restriction, is it possible or do you think it'll breaks something?\n. It should work as expected, I tried it on my form that uses `formGroup`.\n. No problem with any of those. Just 4) is only cosmetic and I think it's not really neccessary to rename that, `formly-` prefix is used in formly everywhere as convention and transclude is just what it is and everyone knows what it does.\n. What about just making it a function then, giving it wrapper array parameter and let the user do whatever he wants with the list - pushing new, remove unwanted, replace, reverse...\u00a0 \n. Agreed, it's not obvious, but good documentation is the core of every project anyway :)\n. Also, it isn't really transparent having numbers and booleans just next to wrapper name. I think that having a function that enables you to do what ever you want with an array of wrapper names is better approach.\n. I hit a wall with this too as for a specific reason I have these two inputs represented by two different models. In that case the expression is not called if the model is different. :(\n. I agree with this change as it is more logical and straightforward. :+1: \nHowever, I really have a problem with the name ngModelAttrs :D Imagining it all over the place in my field configs, it seems ugly, long, and too complicated for me. Although I can't figure out any other name than `attrs` which isn't explaining it well.\n. > ngModelAttrs is the best name I can think of for someone new to angular-formly but used to angular forms...\n\n@kentcdodds What about `controlAttrs`. ngModel is an attribute that specifies the model for the control, but abstracted away it is represented by a \"form control\". FormController in angular also uses the name control in registration functions etc. It is not so obvious, but it still gives a hint that it is related to the control itself and not the wrappers or whatever.\n. Hi, I think I've got the bug sorted out, but I am not orienting myself in tests much here.\n. Ok I will look at it, thanks.\n. Done it, had to send a new pull request for some reason.\n. You're welcome.\n. Please review the code carefully, I am not sure this should be the way to handle this issue.\n. Ok.. got some errors :( I will fix it\n. I see. Ok, that wouldn't be a problem, I guess.\n. This passed.\n. Close?\n. Well, from programming in angular I know that perf bottleneck comes with each deep watcher created. But since I used the use case multiple times already I though this could be addressed and also simplify the model assignment if it is just a nested attribute of a model.\n\nI don't think that the footprint of this would be big. I my eyes (correct me if I am wrong) it would make changes to https://github.com/formly-js/angular-formly/blob/master/src/directives/formly-form.js#L199, where we would check if the model attribute has a dot as the first character. In that case, we would prefix it with `'model'` (making it `model.nestedAttrName`) since we want the nested attribute of \"parent\" model, and the code would continue in the same way as it is now. On top of that, the `initModel` would return `true` if the model is \"new\", otherwise `false`, to the caller function (`setupModels()`), where it would decide to create a watcher based on the return value (true - create a model watcher, false - do not).\n\nIn a sense:\n\n```\nfunction setupModels() {\n  // a set of field models that are already watched (the $scope.model will have its own watcher)\n  const watchedModels = [$scope.model];\n\n  angular.forEach($scope.fields, (field) => {\n    const isNewModel = initModel(field);\n\n    if (field.model && watchedModels.indexOf(field.model) === -1 && isNewModel) {\n      $scope.$watch(() => field.model, onModelOrFormStateChange, true);\n      watchedModels.push(field.model);\n    }\n  });\n}\n\nfunction initModel(field) {\n  if (angular.isString(field.model)) {\n    var isNewModel = true;\n    if (field.model[0] === '.') {\n      field.model = 'model' + field.model;\n      isNewModel = false;\n    }\n    const expression = field.model;\n    const index = $scope.fields.indexOf(field);\n    field.model = evalCloseToFormlyExpression(expression, undefined, field, index);\n    if (!field.model) {\n      throw formlyUsability.getFieldError(\n        'field-model-must-be-initialized',\n        'Field model must be initialized. When specifying a model as a string for a field, the result of the' +\n        ' expression must have been initialized ahead of time.',\n        field);\n    }\n    return isNewModel;\n  }\n  return true;\n}\n```\n\nIs there something I don't see, that would make it bigger issue?\n. What do you think?\n. Maybe you could elaborate a bit more on what troubles you in the suggested idea. But nevertheless, I might do the PR for you to consider.\n\nAnyway, I just came up a with an idea, not to set a watcher if the model attribute starts with `model.` (and is a string). In that case we already watch the (parent) model and we don't have to add a new watcher for the nested attribute. This way the API would not change at all, at the code impact would be minimal.\n. I've read your comment too late, so the pull request I've sent includes both (dot syntax as well as starting with `model.`). Will reworked it tomorrow hopefully.\n. Do you mean that you had a nested model on a field like this?\n\n```\nmodel: 'model.nestedModel'\n```\n\nand you wanted to access the parent `model`? \n\nI think this wasn't possible before either in a string expression. Because `model` expression for this field will resolve to `model.nestedModel` object (I believe). You can do it using function instead, where you would access the parent model using `vm.model` or whatever variable you store the parent model in. Correct me, if I am wrong, @kentcdodds. :)\n\nAnyway, we concluded that the API is not going to change in this issue. In the PR #434 I merely optimized watchers not to be applied on nested properties of an existing model.\n. Ok.. I guess I can do that in this PR, but I will do it tomorrow, I am almost falling asleep on my keyboard.\n. There we go!\n. You're right.. Well, should we create an issue so we don't forget about it later?\n. So I figured out the problem using the input formatter which is provided by the typeahead component itself.\n\nLeaving open for the second suggestion / question.\n. The whole point of the lines I linked is because formly formatters are not called when ngModel is initialized, that's why they are being called manually when formatters are set by formly. I was just thinking the other way - have an ngModel (wrapping) directive that sets those formatters on ngModel controller in the link function, instead of doing it manually in formly field and having calls to setViewValue and setPristine, which can produce unexpected behaviour (just as in case of typeahead, although there it was not a problem in the end since it defines its own formatter attribute).\n. Exactly! :-) Sorry for the confusing description, I was really tired :-D\n. It's not necessarily a blocker for us, if I get a bit of time I will look at it tomorrow (if as you say it's just as easy as extending the array). Thanks.\n\nAs for the attribute style directive restriction, is it possible or do you think it'll breaks something?\n. It should work as expected, I tried it on my form that uses `formGroup`.\n. No problem with any of those. Just 4) is only cosmetic and I think it's not really neccessary to rename that, `formly-` prefix is used in formly everywhere as convention and transclude is just what it is and everyone knows what it does.\n. What about just making it a function then, giving it wrapper array parameter and let the user do whatever he wants with the list - pushing new, remove unwanted, replace, reverse...\u00a0 \n. Agreed, it's not obvious, but good documentation is the core of every project anyway :)\n. Also, it isn't really transparent having numbers and booleans just next to wrapper name. I think that having a function that enables you to do what ever you want with an array of wrapper names is better approach.\n. I hit a wall with this too as for a specific reason I have these two inputs represented by two different models. In that case the expression is not called if the model is different. :(\n. I agree with this change as it is more logical and straightforward. :+1: \nHowever, I really have a problem with the name ngModelAttrs :D Imagining it all over the place in my field configs, it seems ugly, long, and too complicated for me. Although I can't figure out any other name than `attrs` which isn't explaining it well.\n. > ngModelAttrs is the best name I can think of for someone new to angular-formly but used to angular forms...\n\n@kentcdodds What about `controlAttrs`. ngModel is an attribute that specifies the model for the control, but abstracted away it is represented by a \"form control\". FormController in angular also uses the name control in registration functions etc. It is not so obvious, but it still gives a hint that it is related to the control itself and not the wrappers or whatever.\n. Hi, I think I've got the bug sorted out, but I am not orienting myself in tests much here.\n. Ok I will look at it, thanks.\n. Done it, had to send a new pull request for some reason.\n. You're welcome.\n. Please review the code carefully, I am not sure this should be the way to handle this issue.\n. Ok.. got some errors :( I will fix it\n. I see. Ok, that wouldn't be a problem, I guess.\n. This passed.\n. Close?\n. Well, from programming in angular I know that perf bottleneck comes with each deep watcher created. But since I used the use case multiple times already I though this could be addressed and also simplify the model assignment if it is just a nested attribute of a model.\n\nI don't think that the footprint of this would be big. I my eyes (correct me if I am wrong) it would make changes to https://github.com/formly-js/angular-formly/blob/master/src/directives/formly-form.js#L199, where we would check if the model attribute has a dot as the first character. In that case, we would prefix it with `'model'` (making it `model.nestedAttrName`) since we want the nested attribute of \"parent\" model, and the code would continue in the same way as it is now. On top of that, the `initModel` would return `true` if the model is \"new\", otherwise `false`, to the caller function (`setupModels()`), where it would decide to create a watcher based on the return value (true - create a model watcher, false - do not).\n\nIn a sense:\n\n```\nfunction setupModels() {\n  // a set of field models that are already watched (the $scope.model will have its own watcher)\n  const watchedModels = [$scope.model];\n\n  angular.forEach($scope.fields, (field) => {\n    const isNewModel = initModel(field);\n\n    if (field.model && watchedModels.indexOf(field.model) === -1 && isNewModel) {\n      $scope.$watch(() => field.model, onModelOrFormStateChange, true);\n      watchedModels.push(field.model);\n    }\n  });\n}\n\nfunction initModel(field) {\n  if (angular.isString(field.model)) {\n    var isNewModel = true;\n    if (field.model[0] === '.') {\n      field.model = 'model' + field.model;\n      isNewModel = false;\n    }\n    const expression = field.model;\n    const index = $scope.fields.indexOf(field);\n    field.model = evalCloseToFormlyExpression(expression, undefined, field, index);\n    if (!field.model) {\n      throw formlyUsability.getFieldError(\n        'field-model-must-be-initialized',\n        'Field model must be initialized. When specifying a model as a string for a field, the result of the' +\n        ' expression must have been initialized ahead of time.',\n        field);\n    }\n    return isNewModel;\n  }\n  return true;\n}\n```\n\nIs there something I don't see, that would make it bigger issue?\n. What do you think?\n. Maybe you could elaborate a bit more on what troubles you in the suggested idea. But nevertheless, I might do the PR for you to consider.\n\nAnyway, I just came up a with an idea, not to set a watcher if the model attribute starts with `model.` (and is a string). In that case we already watch the (parent) model and we don't have to add a new watcher for the nested attribute. This way the API would not change at all, at the code impact would be minimal.\n. I've read your comment too late, so the pull request I've sent includes both (dot syntax as well as starting with `model.`). Will reworked it tomorrow hopefully.\n. Do you mean that you had a nested model on a field like this?\n\n```\nmodel: 'model.nestedModel'\n```\n\nand you wanted to access the parent `model`? \n\nI think this wasn't possible before either in a string expression. Because `model` expression for this field will resolve to `model.nestedModel` object (I believe). You can do it using function instead, where you would access the parent model using `vm.model` or whatever variable you store the parent model in. Correct me, if I am wrong, @kentcdodds. :)\n\nAnyway, we concluded that the API is not going to change in this issue. In the PR #434 I merely optimized watchers not to be applied on nested properties of an existing model.\n. Ok.. I guess I can do that in this PR, but I will do it tomorrow, I am almost falling asleep on my keyboard.\n. There we go!\n. You're right.. Well, should we create an issue so we don't forget about it later?\n. So I figured out the problem using the input formatter which is provided by the typeahead component itself.\n\nLeaving open for the second suggestion / question.\n. The whole point of the lines I linked is because formly formatters are not called when ngModel is initialized, that's why they are being called manually when formatters are set by formly. I was just thinking the other way - have an ngModel (wrapping) directive that sets those formatters on ngModel controller in the link function, instead of doing it manually in formly field and having calls to setViewValue and setPristine, which can produce unexpected behaviour (just as in case of typeahead, although there it was not a problem in the end since it defines its own formatter attribute).\n. Exactly! :-) Sorry for the confusing description, I was really tired :-D\n. ",
    "AlexanderKozhevin": "Not cool. \n. Not cool. \n. ",
    "ccasad": "Sorry. I had my .gitignore file in with the commit so I was backing it out and going to resubmit. That's what you get for asking newbies to help.  =)\n. Sorry. I had my .gitignore file in with the commit so I was backing it out and going to resubmit. That's what you get for asking newbies to help.  =)\n. ",
    "douglas-mason": "@kentcdodds updated\n. looks like you updated the tests after I forked it, I'll fix my fork\n. @kentcdodds  merge conflict fixed :)\n. awesome!  you're welcome, thanks for accepting\n. Sure , thanks !\n. @kentcdodds updated\n. looks like you updated the tests after I forked it, I'll fix my fork\n. @kentcdodds  merge conflict fixed :)\n. awesome!  you're welcome, thanks for accepting\n. Sure , thanks !\n. ",
    "zeddever": "+1 for this, I was about to open a PR for comments when I saw this one.\n\nWRT a use case, I currently have dates that I push from the server in ISO8601 but allow the users to edit it in a more user friendly format. Ergo I'd need the parser/formatter framework to keep my model consistent. Of course I could go implement a directive but it felt like a better fit for this framework. Model transformation is a pretty common operation hence the support for a MV transformation framework being built as a part of angular core. Formly is essentially presenting a new interface (the old one being declarative HTML through the use of directives) to the form control features that angular supports but Formly doesn't give any interface to the formatters/parsers abstraction, which makes it an incomplete interface.\n\n FYI, atm I have an extra 'Editor' abstraction between my actual model and my formly model and this abstraction allows me to do transformations outside of the parser/formatter framework.\n\nPlease implement this, as I think it would bring your framework full circle wrt interfacing to angular form functionality.\n\nWRT the points you raised:\n1) I also think defaults should take higher precedence, i.e. they should go to the end\n2) I don't think you need to be able override parsers/formatters. It's a chain, and with defaults taking precedence, you can \"override\" by adding a formatter/parser later in the chain that transforms what the default chain segment gives you. If using a particular form custom type, there are certain characteristics that you should expect based on the contract provided by that form type, and it's these abstractions that you should be working with in your code. \nE.G. if your working with a \"date input\" type it might include default parsers and formatters to keep the model consistently a date object and the view consistently a string formatted as a 'fullDatetime'. If you wanted to customize that field type, eg, to change the format of the text rendered to the view, then you look at the interface documentation for the field and you know the new primitives to work with. I.E. to change the format, you need to either do the string munging manually, or better yet parse the new formatter primitive which is a 'fullDatetime' formatted string, then reformat the parsed string to your hearts content. On the other side, if you wanted to change the parsers chain, eg, maybe to add an offset to the date, the new primitive would be the date object that the contract that the \"date input\" field guarantees. If you need something outside of what the contract for the field guarantees, then you should make a new type all together or create a new abstraction where it makes sense. The field type should be immutable wrt it's contracts for the data interfaces.\n\nAnother potentially hairier issue is that if you try to override a part of an existing default chain segment then parts of that default chain segment might break since you might change the interface that a sub segment of that default chain segment expects.\n\nThanks for the great work on this library so far, and I hope you'll roll out this feature\n. WRT my expressed interest, I've already shipped the app with the workaround\nI mentioned and I've already moved on to a new app with a different stack\n(i.e. not a web app) so I don't have a harness or the time to set up a new\none atm so I can't test it atm. Your notes on the implementation are inline\nwith what I was expecting though, so for my 2 cents, it's a go. I do have\nanother app coming up where I might need to use this feature so I'll\ndefinitely be able to check it out then, and I'll submit a PR or two if I\nfind any issues.\n\nThanks for the quick implementation of the feature and I hope it'll come\nout of beta in time for me to use it in a couple months\n\nOn Mon, Jul 27, 2015 at 8:12 AM, Kent C. Dodds notifications@github.com\nwrote:\n\n> Has anyone had a chance to validate that this works as you'd expect? I\n> don't really have a use case for this in my app, so it's hard for me to\n> know whether it makes sense as implemented.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/368#issuecomment-125200472\n> .\n. +1 for this, I was about to open a PR for comments when I saw this one.\n\nWRT a use case, I currently have dates that I push from the server in ISO8601 but allow the users to edit it in a more user friendly format. Ergo I'd need the parser/formatter framework to keep my model consistent. Of course I could go implement a directive but it felt like a better fit for this framework. Model transformation is a pretty common operation hence the support for a MV transformation framework being built as a part of angular core. Formly is essentially presenting a new interface (the old one being declarative HTML through the use of directives) to the form control features that angular supports but Formly doesn't give any interface to the formatters/parsers abstraction, which makes it an incomplete interface.\n\n FYI, atm I have an extra 'Editor' abstraction between my actual model and my formly model and this abstraction allows me to do transformations outside of the parser/formatter framework.\n\nPlease implement this, as I think it would bring your framework full circle wrt interfacing to angular form functionality.\n\nWRT the points you raised:\n1) I also think defaults should take higher precedence, i.e. they should go to the end\n2) I don't think you need to be able override parsers/formatters. It's a chain, and with defaults taking precedence, you can \"override\" by adding a formatter/parser later in the chain that transforms what the default chain segment gives you. If using a particular form custom type, there are certain characteristics that you should expect based on the contract provided by that form type, and it's these abstractions that you should be working with in your code. \nE.G. if your working with a \"date input\" type it might include default parsers and formatters to keep the model consistently a date object and the view consistently a string formatted as a 'fullDatetime'. If you wanted to customize that field type, eg, to change the format of the text rendered to the view, then you look at the interface documentation for the field and you know the new primitives to work with. I.E. to change the format, you need to either do the string munging manually, or better yet parse the new formatter primitive which is a 'fullDatetime' formatted string, then reformat the parsed string to your hearts content. On the other side, if you wanted to change the parsers chain, eg, maybe to add an offset to the date, the new primitive would be the date object that the contract that the \"date input\" field guarantees. If you need something outside of what the contract for the field guarantees, then you should make a new type all together or create a new abstraction where it makes sense. The field type should be immutable wrt it's contracts for the data interfaces.\n\nAnother potentially hairier issue is that if you try to override a part of an existing default chain segment then parts of that default chain segment might break since you might change the interface that a sub segment of that default chain segment expects.\n\nThanks for the great work on this library so far, and I hope you'll roll out this feature\n. WRT my expressed interest, I've already shipped the app with the workaround\nI mentioned and I've already moved on to a new app with a different stack\n(i.e. not a web app) so I don't have a harness or the time to set up a new\none atm so I can't test it atm. Your notes on the implementation are inline\nwith what I was expecting though, so for my 2 cents, it's a go. I do have\nanother app coming up where I might need to use this feature so I'll\ndefinitely be able to check it out then, and I'll submit a PR or two if I\nfind any issues.\n\nThanks for the quick implementation of the feature and I hope it'll come\nout of beta in time for me to use it in a couple months\n\nOn Mon, Jul 27, 2015 at 8:12 AM, Kent C. Dodds notifications@github.com\nwrote:\n\n> Has anyone had a chance to validate that this works as you'd expect? I\n> don't really have a use case for this in my app, so it's hard for me to\n> know whether it makes sense as implemented.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/368#issuecomment-125200472\n> .\n. ",
    "synthecypher": "Can we get some docs and examples for this feature?\n. Can we get some docs and examples for this feature?\n. ",
    "mhawila": "It would be nice if it was possible to use this feature to define default parsers and formatters when creating new types. I have been trying to set this on a new datepicker type without success. I get an error field can not be added with a list of fields I can define. Any comment @kentcdodds ? Thanks.\n. @kentcdodds thanks I realized it didn't work because I was using version 6.x, upgrading to 7.x fixed the issue even though now the model is not updated. I mean the formatters and parsers are called but somehow the model is empty. I don't know if this has anything to do with event chain(?)\n\n[Edit]\nI decided not to use parsers & formatters in the end. I believe there is something I am not doing right in my code but I can't really place it at this point.\n. @kwypchlo thanks for such a nice explanation. One question though, where do I set `watchAllExpressions` to `true` and likewise `manualModelWatcher`\n. It would be nice if it was possible to use this feature to define default parsers and formatters when creating new types. I have been trying to set this on a new datepicker type without success. I get an error field can not be added with a list of fields I can define. Any comment @kentcdodds ? Thanks.\n. @kentcdodds thanks I realized it didn't work because I was using version 6.x, upgrading to 7.x fixed the issue even though now the model is not updated. I mean the formatters and parsers are called but somehow the model is empty. I don't know if this has anything to do with event chain(?)\n\n[Edit]\nI decided not to use parsers & formatters in the end. I believe there is something I am not doing right in my code but I can't really place it at this point.\n. @kwypchlo thanks for such a nice explanation. One question though, where do I set `watchAllExpressions` to `true` and likewise `manualModelWatcher`\n. ",
    "luckyagarwal3247": "Hi Kent,\n\nI am using this async validator as shown in the example, except that I'm not using the loader animation so there is no timeout of 1sec. \n\nI noticed that the error thrown shows up in the browser console as soon as i finish typing an invalid value, but neither the field is set as invalid nor the validation message shows up below the field immediately. I understand its because of the blur model option. How can I modify it to update the field too immediately?\n. Hi Kent,\n\nI am using this async validator as shown in the example, except that I'm not using the loader animation so there is no timeout of 1sec. \n\nI noticed that the error thrown shows up in the browser console as soon as i finish typing an invalid value, but neither the field is set as invalid nor the validation message shows up below the field immediately. I understand its because of the blur model option. How can I modify it to update the field too immediately?\n. ",
    "pdemilly": "Should wrappers be a map then and we could overwrite the key with a new value or a null to remove it. Then you could test if it's an array you keep the old behavior if it's a map you implement the new behavior. The keys of the map could be label and error for example \n. Or give the value function a scope we can work with other that manipulate the value. I do like your new dot notation using a fieldTransform. Dont know the impact on performance. Just an idea maybe if you see a key with a dot notation then you set a getter and setter function using $parse serviceonce in the field definition and use those functions if they are present? so you don't need to reparse everytime you access the model\n. I created a little jsbin that you could hopefully use to test your changes http://jsbin.com/jeqaha/edit?js,output\n\nbasically It shows the use of firebase as a backend with straight ng-model. You can see changes from the backend or the frontend syncing in real time.\n\nnow the goal would be that a form defined with formly does the same. I put a checkbox to turn on or off using firebase model as the model of the formly-form. As you can see with your dot-notation changes when the model is an object it works. But as soon as the model is a $firebaseObject bind to the scope, it fails.\n\nThe goal at least for me would be to have the same behavior. \n. $rootScope is the 4th argument of your configuration function not\nformlyConfigProvider\nOn Nov 8, 2015 4:07 AM, \"Shealan Forshaw\" notifications@github.com wrote:\n\n> Can anyone help? I can't seem to set any custom configs. I'm getting\n> \"Cannot read property 'setType' of undefined\"\n> \n> (function(angular){\n> \n>   'use strict';\n> \n>   var app = angular.module('podlaunch', ['restangular', 'ui.router', 'formly', 'formlyBootstrap']);\n> \n>   app.config(['$stateProvider', '$urlRouterProvider', '$locationProvider', 'formlyConfigProvider', function($stateProvider, $urlRouterProvider, $locationProvider, $rootScope, formlyConfigProvider) {\n> \n> ```\n> $locationProvider.html5Mode(true);\n> \n> $stateProvider.state('podcast-home', {\n>   url: '/admin/podcast',\n>   views: {\n>     'header': {\n>       templateUrl: '/assets/tpl/admin/podcast/header.html',\n>     },\n>     'sidebar': {\n>       templateUrl: '/assets/tpl/admin/podcast/sidebar.html',\n>     },\n>     'content': {\n>       templateUrl: '/assets/tpl/admin/podcast/home.html',\n>       controller: 'PodcastHomeController as home',\n>       resolve: {\n> \n>       },\n>     }\n>   }\n> }).state('podcast-create', {\n>   url: '/admin/podcast/create',\n>   views: {\n>     'header': {\n>       templateUrl: '/assets/tpl/admin/podcast/create/header.html',\n>     },\n>     'sidebar': {\n>       templateUrl: '/assets/tpl/admin/podcast/create/sidebar.html',\n>     },\n>     'content': {\n>       templateUrl: '/assets/tpl/admin/podcast/create/home.html',\n>       controller: 'PodcastCreateController as podcast',\n>       resolve: {\n> \n>       },\n>     }\n>   }\n> });\n> \n> $urlRouterProvider.otherwise('/auth');\n> \n> /* formly custom templates */\n> \n> formlyConfigProvider.setType({\n>   name: 'file',\n>   templateUrl: '/assets/tpl/formly/file.html'\n> });\n> ```\n> \n>   }]);\n> \n> })(window.angular);\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/544.\n. Should wrappers be a map then and we could overwrite the key with a new value or a null to remove it. Then you could test if it's an array you keep the old behavior if it's a map you implement the new behavior. The keys of the map could be label and error for example \n. Or give the value function a scope we can work with other that manipulate the value. I do like your new dot notation using a fieldTransform. Dont know the impact on performance. Just an idea maybe if you see a key with a dot notation then you set a getter and setter function using $parse serviceonce in the field definition and use those functions if they are present? so you don't need to reparse everytime you access the model\n. I created a little jsbin that you could hopefully use to test your changes http://jsbin.com/jeqaha/edit?js,output\n\nbasically It shows the use of firebase as a backend with straight ng-model. You can see changes from the backend or the frontend syncing in real time.\n\nnow the goal would be that a form defined with formly does the same. I put a checkbox to turn on or off using firebase model as the model of the formly-form. As you can see with your dot-notation changes when the model is an object it works. But as soon as the model is a $firebaseObject bind to the scope, it fails.\n\nThe goal at least for me would be to have the same behavior. \n. $rootScope is the 4th argument of your configuration function not\nformlyConfigProvider\nOn Nov 8, 2015 4:07 AM, \"Shealan Forshaw\" notifications@github.com wrote:\n\n> Can anyone help? I can't seem to set any custom configs. I'm getting\n> \"Cannot read property 'setType' of undefined\"\n> \n> (function(angular){\n> \n>   'use strict';\n> \n>   var app = angular.module('podlaunch', ['restangular', 'ui.router', 'formly', 'formlyBootstrap']);\n> \n>   app.config(['$stateProvider', '$urlRouterProvider', '$locationProvider', 'formlyConfigProvider', function($stateProvider, $urlRouterProvider, $locationProvider, $rootScope, formlyConfigProvider) {\n> \n> ```\n> $locationProvider.html5Mode(true);\n> \n> $stateProvider.state('podcast-home', {\n>   url: '/admin/podcast',\n>   views: {\n>     'header': {\n>       templateUrl: '/assets/tpl/admin/podcast/header.html',\n>     },\n>     'sidebar': {\n>       templateUrl: '/assets/tpl/admin/podcast/sidebar.html',\n>     },\n>     'content': {\n>       templateUrl: '/assets/tpl/admin/podcast/home.html',\n>       controller: 'PodcastHomeController as home',\n>       resolve: {\n> \n>       },\n>     }\n>   }\n> }).state('podcast-create', {\n>   url: '/admin/podcast/create',\n>   views: {\n>     'header': {\n>       templateUrl: '/assets/tpl/admin/podcast/create/header.html',\n>     },\n>     'sidebar': {\n>       templateUrl: '/assets/tpl/admin/podcast/create/sidebar.html',\n>     },\n>     'content': {\n>       templateUrl: '/assets/tpl/admin/podcast/create/home.html',\n>       controller: 'PodcastCreateController as podcast',\n>       resolve: {\n> \n>       },\n>     }\n>   }\n> });\n> \n> $urlRouterProvider.otherwise('/auth');\n> \n> /* formly custom templates */\n> \n> formlyConfigProvider.setType({\n>   name: 'file',\n>   templateUrl: '/assets/tpl/formly/file.html'\n> });\n> ```\n> \n>   }]);\n> \n> })(window.angular);\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/544.\n. ",
    "Mig1st4ck": "I would like this feature implemented. \n\nOverride should be the most intended behavior. \n\nUsing an object instead of an array could be cool so we could set it like this: \n\n```\nwrappers: {\n    'override': false, /* a special key could be used to allow not to override */\n    'bootstrapLabel': 10, /* using an int would set the priority of each key map */\n    'bootstrapError': false || 0,\n    // 'bootstrapXPTO': 0 /* any non declared wrappers would be set to false, unless override was set to true */\n    'dynamic': {\n        priority: 15,\n        template: '<div></div>' /* this could even allow a dynamic wrapper on the fly... */\n    }\n}\n```\n\nThis would pretty much give all needed functionality on this subject. \n. I would like this feature implemented. \n\nOverride should be the most intended behavior. \n\nUsing an object instead of an array could be cool so we could set it like this: \n\n```\nwrappers: {\n    'override': false, /* a special key could be used to allow not to override */\n    'bootstrapLabel': 10, /* using an int would set the priority of each key map */\n    'bootstrapError': false || 0,\n    // 'bootstrapXPTO': 0 /* any non declared wrappers would be set to false, unless override was set to true */\n    'dynamic': {\n        priority: 15,\n        template: '<div></div>' /* this could even allow a dynamic wrapper on the fly... */\n    }\n}\n```\n\nThis would pretty much give all needed functionality on this subject. \n. ",
    "cbs-greg": "Ah, I'm not going crazy, good to see confirmation that it doesn't override at the moment, I've spent the last few hours trying to override by specifying this property on a field.\n\nI really like the function option that would allow complete freedom to manipulate the wrapper stack in any way we like. I would love to see that extension.\n\nOne thing to consider, is that you can also specify wrappers on a form, and it would make sense to have consistent behaviour (override or not) when specifying wrappers on forms and fields. So I think that adding wrappers makes sense as the default action (just update the documentation to say so).\n\nYou could add an additional option to both field and form called \"wrapperBehaviour\" with possible values \"override\" and \"concat\" (concat being the default). It's nice and stops it being a breaking change as well.\n\nI'll go with a custom type for now to get around my problem. Thanks, we love formly! :)\n. Ah, I'm not going crazy, good to see confirmation that it doesn't override at the moment, I've spent the last few hours trying to override by specifying this property on a field.\n\nI really like the function option that would allow complete freedom to manipulate the wrapper stack in any way we like. I would love to see that extension.\n\nOne thing to consider, is that you can also specify wrappers on a form, and it would make sense to have consistent behaviour (override or not) when specifying wrappers on forms and fields. So I think that adding wrappers makes sense as the default action (just update the documentation to say so).\n\nYou could add an additional option to both field and form called \"wrapperBehaviour\" with possible values \"override\" and \"concat\" (concat being the default). It's nice and stops it being a breaking change as well.\n\nI'll go with a custom type for now to get around my problem. Thanks, we love formly! :)\n. ",
    "stephenbaidu": "Am using angular-formly 6.16.0  and angular 1.4.1.\nBelow is the error\n\n```\nUncaught Error: [$injector:modulerr] Failed to instantiate module angularApp due to:\nError: [$injector:modulerr] Failed to instantiate module formly due to:\nError: [$injector:nomod] Module 'formly' is not available! You either misspelled the module name or forgot to load it. If registering a module ensure that you specify the dependencies as the second argument.\nhttp://errors.angularjs.org/1.4.1/$injector/nomod?p0=formly\n    at http://example.com/scripts/vendor.bec4f0b1.js:3:20469\n    at http://example.com/scripts/vendor.bec4f0b1.js:3:29788\n    at b (http://example.com/scripts/vendor.bec4f0b1.js:3:29261)\n    at b (http://example.com/scripts/vendor.bec4f0b1.js:3:29573)\n    at http://example.com/scripts/vendor.bec4f0b1.js:4:5885\n    at f (http://example.com/scripts/vendor.bec4f0b1.js:3:20876)\n    at n (http://example.com/scripts/vendor.bec4f0b1.js:4:5663)\n    at http://example.com/scripts/vendor.bec4f0b1.js:4:5832\n    at f (http://example.com/scripts/vendor.bec4f0b1.js:3:20876)\n    at n (http://example.com/scripts/vendor.bec4f0b1.js:4:5663)\nhttp://errors.angularjs.org/1.4.1/$injector/modulerr?p0=formly&p1=Error%3A%\u2026%20(http%3A%2F%2Fexample.com%2Fscripts%2Fvendor.bec4f0b1.js%3A4%3A5663)\n    at http://example.com/scripts/vendor.bec4f0b1.js:3:20469\n    at http://example.com/scripts/vendor.bec4f0b1.js:4:6091\n    at f (http://example.com/scripts/vendor.bec4f0b1.js:3:20876)\n    at n (http://example.com/scripts/vendor.bec4f0b1.js:4:5663)\n    at http://example.com/scripts/vendor.bec4f0b1.js:4:5832\n    at f (http://example.com/scripts/vendor.bec4f0b1.js:3:20876)\n    at n (http://example.com/scripts/vendor.bec4f0b1.js:4:5663)\n    at Zb (http://example.com/scripts/vendor.bec4f0b1.js:4:7353)\n    at h (http://example.com/scripts/vendor.bec4f0b1.js:3:27333)\n    at fb (http://example.com/scripts/vendor.bec4f0b1.js:3:27643)\nhttp://errors.angularjs.org/1.4.1/$injector/modulerr?p0=angularApp&p1=Error\u202620(http%3A%2F%2Fexample.com%2Fscripts%2Fvendor.bec4f0b1.js%3A3%3A27643)\n```\n\nHere is my [Gruntfile](https://github.com/stephenbaidu/exrails/blob/master/angular/Gruntfile.js)\n. @koenweyn Sorry, that is not the project. But the gruntfiles are the same.\n. Thanks. No problem.\n. Am using angular-formly 6.16.0  and angular 1.4.1.\nBelow is the error\n\n```\nUncaught Error: [$injector:modulerr] Failed to instantiate module angularApp due to:\nError: [$injector:modulerr] Failed to instantiate module formly due to:\nError: [$injector:nomod] Module 'formly' is not available! You either misspelled the module name or forgot to load it. If registering a module ensure that you specify the dependencies as the second argument.\nhttp://errors.angularjs.org/1.4.1/$injector/nomod?p0=formly\n    at http://example.com/scripts/vendor.bec4f0b1.js:3:20469\n    at http://example.com/scripts/vendor.bec4f0b1.js:3:29788\n    at b (http://example.com/scripts/vendor.bec4f0b1.js:3:29261)\n    at b (http://example.com/scripts/vendor.bec4f0b1.js:3:29573)\n    at http://example.com/scripts/vendor.bec4f0b1.js:4:5885\n    at f (http://example.com/scripts/vendor.bec4f0b1.js:3:20876)\n    at n (http://example.com/scripts/vendor.bec4f0b1.js:4:5663)\n    at http://example.com/scripts/vendor.bec4f0b1.js:4:5832\n    at f (http://example.com/scripts/vendor.bec4f0b1.js:3:20876)\n    at n (http://example.com/scripts/vendor.bec4f0b1.js:4:5663)\nhttp://errors.angularjs.org/1.4.1/$injector/modulerr?p0=formly&p1=Error%3A%\u2026%20(http%3A%2F%2Fexample.com%2Fscripts%2Fvendor.bec4f0b1.js%3A4%3A5663)\n    at http://example.com/scripts/vendor.bec4f0b1.js:3:20469\n    at http://example.com/scripts/vendor.bec4f0b1.js:4:6091\n    at f (http://example.com/scripts/vendor.bec4f0b1.js:3:20876)\n    at n (http://example.com/scripts/vendor.bec4f0b1.js:4:5663)\n    at http://example.com/scripts/vendor.bec4f0b1.js:4:5832\n    at f (http://example.com/scripts/vendor.bec4f0b1.js:3:20876)\n    at n (http://example.com/scripts/vendor.bec4f0b1.js:4:5663)\n    at Zb (http://example.com/scripts/vendor.bec4f0b1.js:4:7353)\n    at h (http://example.com/scripts/vendor.bec4f0b1.js:3:27333)\n    at fb (http://example.com/scripts/vendor.bec4f0b1.js:3:27643)\nhttp://errors.angularjs.org/1.4.1/$injector/modulerr?p0=angularApp&p1=Error\u202620(http%3A%2F%2Fexample.com%2Fscripts%2Fvendor.bec4f0b1.js%3A3%3A27643)\n```\n\nHere is my [Gruntfile](https://github.com/stephenbaidu/exrails/blob/master/angular/Gruntfile.js)\n. @koenweyn Sorry, that is not the project. But the gruntfiles are the same.\n. Thanks. No problem.\n. ",
    "syzer": ":+1: thanks.\n. :+1: thanks.\n. ",
    "gmanriqueUy": "Why not to listen on the `$translateChangeSuccess` event fired by $translate lib?\n\n```\n$rootScope.$on('$translateChangeSuccess',function(){\n      angular.forEach(vm.fields, function(field) {\n          field.runExpressions && field.runExpressions();\n        });\n    });\n```\n\nLike [this](https://jsbin.com/tuniqe/2/edit?html,js,output).\n. Hi @ashthespy. [Here](https://jsbin.com/pufigen/4/edit?html,js,output) you have a JSbin with a working example of @ewcchan's solution.. @ashthespy, I think I'd do it like [this](https://jsbin.com/qehahuf/1/edit?html,js,output).\r\nNotice the use of the angular constant and the translation made inside of the formlyExpression function.. I think you're looking for something like this http://jsbin.com/zafoyi/2/edit. Glad to help! :wink: . I think it would be possible but maybe you need to define your own types and wrappers.. Hi.\r\n1. There's a property called [`defaultValue`](http://docs.angular-formly.com/v8.0.0/docs/field-configuration-object#defaultvalue-any) that is maybe what you're looking for\r\n\r\n2. Can you elaborate more on this? Not understanding what's your use case.. Ohh, I get it now.\r\n\r\nAccording to [docs](http://docs.angular-formly.com/docs/field-configuration-object), you can use either [`templateOptions`](http://docs.angular-formly.com/docs/field-configuration-object#templateoptions-object) (as you're using right now) or [`data`](http://docs.angular-formly.com/docs/field-configuration-object#data-object).\r\n\r\nFrom docs:\r\n> **data (object)**:  This is reserved for the developer. You have our guarantee to be able to use this and not worry about future versions of formly overriding your usage and preventing you from upgrading :-)\r\n\r\nPersonally, I'd use `data` because, as you said, it's just extra data is not needed to manipulate the form.\r\n\r\nUse `templateOptions` under your own risk; maybe formly adds a `name_type` or `code_type` in future versions and it break your implementation. With `data` that's not going to happen. :smile: \r\n\r\nI hope this helps!. Why not to listen on the `$translateChangeSuccess` event fired by $translate lib?\n\n```\n$rootScope.$on('$translateChangeSuccess',function(){\n      angular.forEach(vm.fields, function(field) {\n          field.runExpressions && field.runExpressions();\n        });\n    });\n```\n\nLike [this](https://jsbin.com/tuniqe/2/edit?html,js,output).\n. Hi @ashthespy. [Here](https://jsbin.com/pufigen/4/edit?html,js,output) you have a JSbin with a working example of @ewcchan's solution.. @ashthespy, I think I'd do it like [this](https://jsbin.com/qehahuf/1/edit?html,js,output).\r\nNotice the use of the angular constant and the translation made inside of the formlyExpression function.. I think you're looking for something like this http://jsbin.com/zafoyi/2/edit. Glad to help! :wink: . I think it would be possible but maybe you need to define your own types and wrappers.. Hi.\r\n1. There's a property called [`defaultValue`](http://docs.angular-formly.com/v8.0.0/docs/field-configuration-object#defaultvalue-any) that is maybe what you're looking for\r\n\r\n2. Can you elaborate more on this? Not understanding what's your use case.. Ohh, I get it now.\r\n\r\nAccording to [docs](http://docs.angular-formly.com/docs/field-configuration-object), you can use either [`templateOptions`](http://docs.angular-formly.com/docs/field-configuration-object#templateoptions-object) (as you're using right now) or [`data`](http://docs.angular-formly.com/docs/field-configuration-object#data-object).\r\n\r\nFrom docs:\r\n> **data (object)**:  This is reserved for the developer. You have our guarantee to be able to use this and not worry about future versions of formly overriding your usage and preventing you from upgrading :-)\r\n\r\nPersonally, I'd use `data` because, as you said, it's just extra data is not needed to manipulate the form.\r\n\r\nUse `templateOptions` under your own risk; maybe formly adds a `name_type` or `code_type` in future versions and it break your implementation. With `data` that's not going to happen. :smile: \r\n\r\nI hope this helps!. ",
    "ewcchan": "I tried to follow the steps above but the translation does not work in fields of type select or radio (as also shown in the jsbin in https://github.com/formly-js/angular-formly/issues/373#issuecomment-250988345), also failing to work with fieldGroup. \r\n\r\nIs there anyway to insert translate directive with the options in expressionProperties?\r\n\r\n[update]\r\nThis seems to resolve the issue of options translation:\r\n\r\n```\r\n 'templateOptions.options': function($viewValue, $modelValue, scope) {\r\n  return [\r\n     {\r\n         name: $translate.instant('LANG_EN'),\r\n          value: 'en'\r\n      },\r\n      {\r\n          name: $translate.instant('LANG_DE'),\r\n          value: 'de'\r\n       }\r\n  ]\r\n}\r\n```\r\n\r\nand  go thru the fieldGroup items in listener\r\n```\r\n$rootScope.$on('$translateChangeSuccess',function(){\r\n      angular.forEach(vm.fields, function(field) {\r\n          field.runExpressions && field.runExpressions();\r\n          if (field.fieldGroup) {\r\n            angular.forEach(field.fieldGroup, function(groupField) {\r\n                groupField.runExpressions && groupField.runExpressions();\r\n            });\r\n          }\r\n        });\r\n    });\r\n```\r\n. I tried to follow the steps above but the translation does not work in fields of type select or radio (as also shown in the jsbin in https://github.com/formly-js/angular-formly/issues/373#issuecomment-250988345), also failing to work with fieldGroup. \r\n\r\nIs there anyway to insert translate directive with the options in expressionProperties?\r\n\r\n[update]\r\nThis seems to resolve the issue of options translation:\r\n\r\n```\r\n 'templateOptions.options': function($viewValue, $modelValue, scope) {\r\n  return [\r\n     {\r\n         name: $translate.instant('LANG_EN'),\r\n          value: 'en'\r\n      },\r\n      {\r\n          name: $translate.instant('LANG_DE'),\r\n          value: 'de'\r\n       }\r\n  ]\r\n}\r\n```\r\n\r\nand  go thru the fieldGroup items in listener\r\n```\r\n$rootScope.$on('$translateChangeSuccess',function(){\r\n      angular.forEach(vm.fields, function(field) {\r\n          field.runExpressions && field.runExpressions();\r\n          if (field.fieldGroup) {\r\n            angular.forEach(field.fieldGroup, function(groupField) {\r\n                groupField.runExpressions && groupField.runExpressions();\r\n            });\r\n          }\r\n        });\r\n    });\r\n```\r\n. ",
    "ashthespy": "@ewcchan I think I am doing something silly here, but I can't get your example to work.\r\nDo you have a JSbin of it by any chance? I am having trouble getting the filed types of radios and checkboxes to translate. Thanks for that @gmanriqueUy! \r\nJust a query, is it possible to predefine the option fields, say like [this](https://jsbin.com/futuheguqo/edit?html,js,output)?\r\nJust a matter of code preference, but I'd like to have all my field options defined in one place rather than sprinkled around the forms.  Or would that not be possible?. @ewcchan I think I am doing something silly here, but I can't get your example to work.\r\nDo you have a JSbin of it by any chance? I am having trouble getting the filed types of radios and checkboxes to translate. Thanks for that @gmanriqueUy! \r\nJust a query, is it possible to predefine the option fields, say like [this](https://jsbin.com/futuheguqo/edit?html,js,output)?\r\nJust a matter of code preference, but I'd like to have all my field options defined in one place rather than sprinkled around the forms.  Or would that not be possible?. ",
    "HoplaGeiss": "Thanks! \n\nHowever I am still a little  confused at why this works: \n\n```\nexpressionProperties: {\n        'templateOptions.placeholder': function(){\n          return $scope.accountName;\n        }\n      }\n```\n\nAnd not this:\n\n```\nexpressionProperties: {\n        'templateOptions.placeholder': '$scope.accountName'\n      }\n```\n. Thanks! \n\nHowever I am still a little  confused at why this works: \n\n```\nexpressionProperties: {\n        'templateOptions.placeholder': function(){\n          return $scope.accountName;\n        }\n      }\n```\n\nAnd not this:\n\n```\nexpressionProperties: {\n        'templateOptions.placeholder': '$scope.accountName'\n      }\n```\n. ",
    "mhartington": "I'm all for it. Makes more sense that putting everything under templateOptions. So how would this effect custom templates? Either way, you get my :+1: \n. So safe to say that this change would be more internal? \n. What about just `modelAttrs` or `formAttrs`? I don't think it needs to have the `ng-` prefix.\n. I'm all for it. Makes more sense that putting everything under templateOptions. So how would this effect custom templates? Either way, you get my :+1: \n. So safe to say that this change would be more internal? \n. What about just `modelAttrs` or `formAttrs`? I don't think it needs to have the `ng-` prefix.\n. ",
    "beazergood": "Thumbs up\n. Thumbs up\n. ",
    "rmulder": "The only comment I have on this Kent - is that we are still working on migrating our code to be able to work on a version of formly beyond 6.13.1. The deprecation of support for 'hide' under expressionProperties and replacing it with hideExpression was _not_ a straight-forward, one-to-one change as suggested (i.e., the function version) - and so has required us to refactor a bunch of code (we use server-side generated JSON), as we had depended heavily on that feature for hiding/showing certain elements based on certain user criteria.\n\nMy only concern with this change proposal is that there truly is a 'migration path' that works out of the box. Otherwise - developers may struggle to get their code updated while 'deadlines' are pressing on them, and therefore might be unable to take advantage of newer features for quite awhile. (Once bitten, twice shy)\n\nThis is truly an awesome library, but as an outsider recently pointed out to us - a library that is still very much 'under development'. While I cannot disagree in principle with the proposed change and the goal it seeks to achieve - I submit that the change itself would need to provide as _painless_ an upgrade path as possible for those who are already heavily entrenched with previous versions of the library. You have 'sculptured' something that is truly a beautiful 'work of art' - and for that, as I'm sure my fellow developers would agree - we are truly grateful.\n\nTherefore I would vote that yes, it's important to get the API 'nailed down' so that the functionality it provides 'makes sense' going forward - but I suggest that it's more important as these types of changes are made, to provide a solid migration path/clear upgrade instructions for those already heavily using older version(s).\n. @kentcdodds No worries Kent. We just have data stored in rows that contain the 'field logic' for the application (i.e., a data-driven application). It just took time to track down all the locations we were using this hideExpression and convert them, as well as the server-side code doing the JSON generation, and then updating the client side/removing that dependency. I _think_ it's pretty much been cleaned up by now, but just have to verify before doing the version upgrade.\n\nI guess I should have used wording other than 'under development'. I only meant that the project has been very actively evolving/changing (i.e., witness all of the version changes made in just the past few months) - not in a bad way per se, but that was just the observation made by an outside party that made my boss a bit 'nervous'. \n\nAs shown by the above rework required in our project, when an API is growing/changing like this, and you want to adopt the 'latest and greatest' - then there usually tends to be a little 'pain' involved in the upgrade process. That's all.\n. The only comment I have on this Kent - is that we are still working on migrating our code to be able to work on a version of formly beyond 6.13.1. The deprecation of support for 'hide' under expressionProperties and replacing it with hideExpression was _not_ a straight-forward, one-to-one change as suggested (i.e., the function version) - and so has required us to refactor a bunch of code (we use server-side generated JSON), as we had depended heavily on that feature for hiding/showing certain elements based on certain user criteria.\n\nMy only concern with this change proposal is that there truly is a 'migration path' that works out of the box. Otherwise - developers may struggle to get their code updated while 'deadlines' are pressing on them, and therefore might be unable to take advantage of newer features for quite awhile. (Once bitten, twice shy)\n\nThis is truly an awesome library, but as an outsider recently pointed out to us - a library that is still very much 'under development'. While I cannot disagree in principle with the proposed change and the goal it seeks to achieve - I submit that the change itself would need to provide as _painless_ an upgrade path as possible for those who are already heavily entrenched with previous versions of the library. You have 'sculptured' something that is truly a beautiful 'work of art' - and for that, as I'm sure my fellow developers would agree - we are truly grateful.\n\nTherefore I would vote that yes, it's important to get the API 'nailed down' so that the functionality it provides 'makes sense' going forward - but I suggest that it's more important as these types of changes are made, to provide a solid migration path/clear upgrade instructions for those already heavily using older version(s).\n. @kentcdodds No worries Kent. We just have data stored in rows that contain the 'field logic' for the application (i.e., a data-driven application). It just took time to track down all the locations we were using this hideExpression and convert them, as well as the server-side code doing the JSON generation, and then updating the client side/removing that dependency. I _think_ it's pretty much been cleaned up by now, but just have to verify before doing the version upgrade.\n\nI guess I should have used wording other than 'under development'. I only meant that the project has been very actively evolving/changing (i.e., witness all of the version changes made in just the past few months) - not in a bad way per se, but that was just the observation made by an outside party that made my boss a bit 'nervous'. \n\nAs shown by the above rework required in our project, when an API is growing/changing like this, and you want to adopt the 'latest and greatest' - then there usually tends to be a little 'pain' involved in the upgrade process. That's all.\n. ",
    "MacKentoch": "I agree with the logic behind `ngModelAttrs`. \n\nTo be honest, when I started using angular formly I did not understand why `required` was defined in `templateOptions` as it is more model orientated.\n\nTo be honest again (I'm very honest you know?! ^^), it will make a bit of change on my side but it is worth the pain so :+1: \n\n**By the way, it gives me the idea to store in database with the models which angular formly it is related.**\n\nExample :\n\n```\n{\n  data_model : {___a data model here___},\n  field_model : {___a field model here___},\n  formlyRangeVersion: '<7.0.0'\n}\n```\n\n> like that even a hard change won't affect my old data, that I would render with a compatible version or give a message to user.\n. As it is just additive, I think it is 100% OK.\n\nI'm sure I may find application later in my form generator.\n. :+1: \n. I agree with the logic behind `ngModelAttrs`. \n\nTo be honest, when I started using angular formly I did not understand why `required` was defined in `templateOptions` as it is more model orientated.\n\nTo be honest again (I'm very honest you know?! ^^), it will make a bit of change on my side but it is worth the pain so :+1: \n\n**By the way, it gives me the idea to store in database with the models which angular formly it is related.**\n\nExample :\n\n```\n{\n  data_model : {___a data model here___},\n  field_model : {___a field model here___},\n  formlyRangeVersion: '<7.0.0'\n}\n```\n\n> like that even a hard change won't affect my old data, that I would render with a compatible version or give a message to user.\n. As it is just additive, I think it is 100% OK.\n\nI'm sure I may find application later in my form generator.\n. :+1: \n. ",
    "b-barry": "No, I don't check It in the end.\nSorry, I would close it\n. For my project,  the requirement was to hide the asterisk at first. But after discussion, we decide to keep It that why I closes the issue.\n\nSorry, I should have been more explicit.\n\nI think that you can check css class of the asterisk and hide It for exemple \n. Ok. Feel free to create a new issue to get a solution\n. No, I don't check It in the end.\nSorry, I would close it\n. For my project,  the requirement was to hide the asterisk at first. But after discussion, we decide to keep It that why I closes the issue.\n\nSorry, I should have been more explicit.\n\nI think that you can check css class of the asterisk and hide It for exemple \n. Ok. Feel free to create a new issue to get a solution\n. ",
    "juanpujol": "A question, does this has anything to do with the fact that if I hide an input using hideExpression the model is not updated? If I remove the `name` input shouldn't that property be removed from the model too? I'm doing it manually using `delete scope.model.name` from hideExpression. But I'm sure must be a better way, right?\n\nThank you.\n. ok, @kentcdodds thank you.\n. A question, does this has anything to do with the fact that if I hide an input using hideExpression the model is not updated? If I remove the `name` input shouldn't that property be removed from the model too? I'm doing it manually using `delete scope.model.name` from hideExpression. But I'm sure must be a better way, right?\n\nThank you.\n. ok, @kentcdodds thank you.\n. ",
    "prokilogrammer": "Interesting. Yes, the callout isn't very clear. It might be useful to format documentation of internal properties differently to show the distinction. \n. Cool, submitted a pull request https://github.com/formly-js/angular-formly/pull/385\n. Interesting. Yes, the callout isn't very clear. It might be useful to format documentation of internal properties differently to show the distinction. \n. Cool, submitted a pull request https://github.com/formly-js/angular-formly/pull/385\n. ",
    "jajourda": "I'm having a similar issue:\n\n```\n<div class=\"input-section\">\n<label for=\"\" class=\"input-section-label\">\n<span ng-bind-html=\"options.data.singleCardInstanceLabel | toTrusted\"></span>\n<span class=\"tip icon-question\" popover-animation=\"true\" popover=\"{{options.data.popover}}\" type=\"button\"></span>\n</label>\n\n<div class=\"input-section-input-wrap\">\n\n<pre>{{[options.key]|json}}</pre>\n\n<input type=\"text\" id=\"{{model[options.key]}}\" ng-model=\"model[options.key]\" cc-number=\"\"></div>\n\n</div>\n```\n\ntrying to us 3rd-party directive cc-number\nhttps://github.com/bendrucker/angular-credit-cards\n. will work on doing that now. thanks.\n. Bro, bro, bro, bro :) I have to say I have really started to admire your work ethic and killer use of github for maintaining not just your codebase but your USERBASE (you're kind of ensuring quality control AND an increased adoption rate of your module). \n\nSo, by sending everyone to http://help.angular-formly.com, you accomplish two things.\n\n1.you make sure real problems get addressed\n2. the flow of directions you offer on the help page makes sure that real problems are real problems (this is where I come in).\n\nMy \"problem\" was in fact not a problem at all, and having to explain it, document it, and reproduce it showed me I was thinking about the issue the wrong way. In case anyone else wants help with integrating ben drucker's super useful credit-cards with angualr-formly check out the following link based on the help form.\nhttp://output.jsbin.com/gifalan\n\nblessings to you and your family bro. thank you for an awesome repository :)\n. I'm having a similar issue:\n\n```\n<div class=\"input-section\">\n<label for=\"\" class=\"input-section-label\">\n<span ng-bind-html=\"options.data.singleCardInstanceLabel | toTrusted\"></span>\n<span class=\"tip icon-question\" popover-animation=\"true\" popover=\"{{options.data.popover}}\" type=\"button\"></span>\n</label>\n\n<div class=\"input-section-input-wrap\">\n\n<pre>{{[options.key]|json}}</pre>\n\n<input type=\"text\" id=\"{{model[options.key]}}\" ng-model=\"model[options.key]\" cc-number=\"\"></div>\n\n</div>\n```\n\ntrying to us 3rd-party directive cc-number\nhttps://github.com/bendrucker/angular-credit-cards\n. will work on doing that now. thanks.\n. Bro, bro, bro, bro :) I have to say I have really started to admire your work ethic and killer use of github for maintaining not just your codebase but your USERBASE (you're kind of ensuring quality control AND an increased adoption rate of your module). \n\nSo, by sending everyone to http://help.angular-formly.com, you accomplish two things.\n\n1.you make sure real problems get addressed\n2. the flow of directions you offer on the help page makes sure that real problems are real problems (this is where I come in).\n\nMy \"problem\" was in fact not a problem at all, and having to explain it, document it, and reproduce it showed me I was thinking about the issue the wrong way. In case anyone else wants help with integrating ben drucker's super useful credit-cards with angualr-formly check out the following link based on the help form.\nhttp://output.jsbin.com/gifalan\n\nblessings to you and your family bro. thank you for an awesome repository :)\n. ",
    "gsimenel": "Thanks for the very quick answer. \nYou got me thinking a bit more, the result is that when I use ngAnnotate, it works, without it it breaks. \n\nI'm using the Introduction example app.js, only adding the fieldgroup : \n\n``` javascript\n/* global angular */\n(function() {\n\n  'use strict';\n\n  var app = angular.module('formlyExample', ['formly', 'formlyBootstrap'], function config(formlyConfigProvider) {\n    // set templates here\n    formlyConfigProvider.setType({\n      name: 'custom',\n      templateUrl: 'custom.html'\n    });\n  });\n\n\n  app.controller('MainCtrl', function MainCtrl(formlyVersion) {\n    var vm = this;\n    // funcation assignment\n    vm.onSubmit = onSubmit;\n\n    // variable assignment\n    vm.author = { // optionally fill in your info below :-)\n      name: 'Kent C. Dodds',\n      url: 'https://twitter.com/kentcdodds' // a link to your twitter/github/blog/whatever\n    };\n    vm.exampleTitle = 'Introduction';\n    vm.env = {\n      angularVersion: angular.version.full,\n      formlyVersion: formlyVersion\n    };\n\n    vm.model = {\n      awesome: true\n    };\n\n    vm.awesomeIsForced = false;\n\n    vm.formFields = [\n      {\n        key: 'text',\n        type: 'input',\n        templateOptions: {\n          label: 'Text',\n          placeholder: 'Formly is terrific!'\n        }\n      },\n        { fieldGroup: [ {\n            \"key\": \"TESTFIELD\",\n            \"type\": \"input\",\n            \"templateOptions\": {\n                \"label\": \"TEST\",\n            }\n        } ] },\n      {\n        key: 'story',\n        type: 'textarea',\n        templateOptions: {\n          label: 'Some sweet story',\n          placeholder: 'It allows you to build and maintain your forms with the ease of JavaScript :-)'\n        }\n      },\n      {\n        key: 'awesome',\n        type: 'checkbox',\n        templateOptions: { label: '' },\n        expressionProperties: {\n          'templateOptions.disabled': function() {\n            return vm.awesomeIsForced;\n          },\n          'templateOptions.label': function() {\n            if (vm.awesomeIsForced) {\n              return 'Too bad, formly is really awesome...';\n            } else {\n              return 'Is formly totally awesome? (uncheck this and see what happens)';\n            }\n          }\n        }\n      },\n      {\n        key: 'whyNot',\n        type: 'textarea',\n        expressionProperties: {\n          'templateOptions.disabled': 'false'\n        },\n        hideExpression: 'model.awesome',\n        templateOptions: {\n          label: 'Why Not?',\n          placeholder: 'Type in here... I dare you'\n        },\n        watcher: {\n          listener: function(field, newValue, oldValue, scope, stopWatching) {\n            if (newValue) {\n              console.log(newValue);\n              stopWatching();\n              scope.model.awesome = true;\n              scope.model.whyNot = undefined;\n              field.expressionProperties.hide = null;\n              field.expressionProperties['templateOptions.disabled'] = 'true';\n              field.templateOptions.placeholder = 'Too bad... It really is awesome!  Wasn\\'t that cool?';\n              vm.awesomeIsForced = true;\n            }\n          }\n        }\n      },\n      {\n        key: 'custom',\n        type: 'custom',\n        templateOptions: {\n          label: 'Custom inlined',\n        }\n      },\n      {\n        key: 'exampleDirective',\n        template: '<div example-directive></div>',\n        templateOptions: {\n          label: 'Example Directive',\n        }\n      }\n    ];\n\n    // function definition\n    function onSubmit() {\n      alert(JSON.stringify(vm.model), null, 2);\n    }\n  });\n\n\n  app.directive('exampleDirective', function() {\n    return {\n      templateUrl: 'example-directive.html'\n    };\n  });\n})();\n```\n\nGruntfile (causes the error at runtime)  : \n\n``` javascript\nmodule.exports = function(grunt) {\n\n    grunt.loadNpmTasks('grunt-contrib-uglify');\n\n// Configuration de Grunt\n  grunt.initConfig({\n\n\n      uglify: {\n        demo: {\n            options: {\n                report: 'min',\n                mangle: true\n            },\n            files: {\n                'app.min.js': [ 'app.js' ]\n            }\n\n\n        }\n      }\n\n\n  })\n\n  grunt.registerTask('demo', [ 'uglify:demo'])\n//\n}\n```\n\nGruntfile (no error at runtime): \n\n``` javascript\nmodule.exports = function(grunt) {\n    grunt.loadNpmTasks('grunt-ng-annotate');\n    grunt.loadNpmTasks('grunt-contrib-uglify');\n\n// Configuration de Grunt\n  grunt.initConfig({\n\n    ngAnnotate: {\n        demo: {\n\n            options: {\n                singleQuotes: true,\n            },\n            files: {\n                'app.annotate.js': [ 'app.js' ]\n            }\n        }\n    },\n\n      uglify: {\n        demo: {\n            options: {\n                report: 'min',\n                mangle: true\n            },\n            files: {\n                'app.min.js': [ 'app.js' ]\n            }\n\n\n        }\n      }\n\n\n  })\n\n  grunt.registerTask('demo', [ 'uglify:demo'])\n//\n}\n```\n. Well it solves the problem in the example I gave, but not my code's\nproblem... Running ngAnnotate, but I keep on getting the same error. Let me\nclose this until I find solution/evidence.\nThanks for the speedy help !\nCheers\nG\n\nLe mer. 15 juil. 2015 \u00e0 21:58, Kent C. Dodds notifications@github.com a\n\u00e9crit :\n\n> That sounds about right. So that solves your problem right? Please close\n> this issue if so.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/393#issuecomment-121728536\n> .\n. Thanks for the very quick answer. \nYou got me thinking a bit more, the result is that when I use ngAnnotate, it works, without it it breaks. \n\nI'm using the Introduction example app.js, only adding the fieldgroup : \n\n``` javascript\n/* global angular */\n(function() {\n\n  'use strict';\n\n  var app = angular.module('formlyExample', ['formly', 'formlyBootstrap'], function config(formlyConfigProvider) {\n    // set templates here\n    formlyConfigProvider.setType({\n      name: 'custom',\n      templateUrl: 'custom.html'\n    });\n  });\n\n\n  app.controller('MainCtrl', function MainCtrl(formlyVersion) {\n    var vm = this;\n    // funcation assignment\n    vm.onSubmit = onSubmit;\n\n    // variable assignment\n    vm.author = { // optionally fill in your info below :-)\n      name: 'Kent C. Dodds',\n      url: 'https://twitter.com/kentcdodds' // a link to your twitter/github/blog/whatever\n    };\n    vm.exampleTitle = 'Introduction';\n    vm.env = {\n      angularVersion: angular.version.full,\n      formlyVersion: formlyVersion\n    };\n\n    vm.model = {\n      awesome: true\n    };\n\n    vm.awesomeIsForced = false;\n\n    vm.formFields = [\n      {\n        key: 'text',\n        type: 'input',\n        templateOptions: {\n          label: 'Text',\n          placeholder: 'Formly is terrific!'\n        }\n      },\n        { fieldGroup: [ {\n            \"key\": \"TESTFIELD\",\n            \"type\": \"input\",\n            \"templateOptions\": {\n                \"label\": \"TEST\",\n            }\n        } ] },\n      {\n        key: 'story',\n        type: 'textarea',\n        templateOptions: {\n          label: 'Some sweet story',\n          placeholder: 'It allows you to build and maintain your forms with the ease of JavaScript :-)'\n        }\n      },\n      {\n        key: 'awesome',\n        type: 'checkbox',\n        templateOptions: { label: '' },\n        expressionProperties: {\n          'templateOptions.disabled': function() {\n            return vm.awesomeIsForced;\n          },\n          'templateOptions.label': function() {\n            if (vm.awesomeIsForced) {\n              return 'Too bad, formly is really awesome...';\n            } else {\n              return 'Is formly totally awesome? (uncheck this and see what happens)';\n            }\n          }\n        }\n      },\n      {\n        key: 'whyNot',\n        type: 'textarea',\n        expressionProperties: {\n          'templateOptions.disabled': 'false'\n        },\n        hideExpression: 'model.awesome',\n        templateOptions: {\n          label: 'Why Not?',\n          placeholder: 'Type in here... I dare you'\n        },\n        watcher: {\n          listener: function(field, newValue, oldValue, scope, stopWatching) {\n            if (newValue) {\n              console.log(newValue);\n              stopWatching();\n              scope.model.awesome = true;\n              scope.model.whyNot = undefined;\n              field.expressionProperties.hide = null;\n              field.expressionProperties['templateOptions.disabled'] = 'true';\n              field.templateOptions.placeholder = 'Too bad... It really is awesome!  Wasn\\'t that cool?';\n              vm.awesomeIsForced = true;\n            }\n          }\n        }\n      },\n      {\n        key: 'custom',\n        type: 'custom',\n        templateOptions: {\n          label: 'Custom inlined',\n        }\n      },\n      {\n        key: 'exampleDirective',\n        template: '<div example-directive></div>',\n        templateOptions: {\n          label: 'Example Directive',\n        }\n      }\n    ];\n\n    // function definition\n    function onSubmit() {\n      alert(JSON.stringify(vm.model), null, 2);\n    }\n  });\n\n\n  app.directive('exampleDirective', function() {\n    return {\n      templateUrl: 'example-directive.html'\n    };\n  });\n})();\n```\n\nGruntfile (causes the error at runtime)  : \n\n``` javascript\nmodule.exports = function(grunt) {\n\n    grunt.loadNpmTasks('grunt-contrib-uglify');\n\n// Configuration de Grunt\n  grunt.initConfig({\n\n\n      uglify: {\n        demo: {\n            options: {\n                report: 'min',\n                mangle: true\n            },\n            files: {\n                'app.min.js': [ 'app.js' ]\n            }\n\n\n        }\n      }\n\n\n  })\n\n  grunt.registerTask('demo', [ 'uglify:demo'])\n//\n}\n```\n\nGruntfile (no error at runtime): \n\n``` javascript\nmodule.exports = function(grunt) {\n    grunt.loadNpmTasks('grunt-ng-annotate');\n    grunt.loadNpmTasks('grunt-contrib-uglify');\n\n// Configuration de Grunt\n  grunt.initConfig({\n\n    ngAnnotate: {\n        demo: {\n\n            options: {\n                singleQuotes: true,\n            },\n            files: {\n                'app.annotate.js': [ 'app.js' ]\n            }\n        }\n    },\n\n      uglify: {\n        demo: {\n            options: {\n                report: 'min',\n                mangle: true\n            },\n            files: {\n                'app.min.js': [ 'app.js' ]\n            }\n\n\n        }\n      }\n\n\n  })\n\n  grunt.registerTask('demo', [ 'uglify:demo'])\n//\n}\n```\n. Well it solves the problem in the example I gave, but not my code's\nproblem... Running ngAnnotate, but I keep on getting the same error. Let me\nclose this until I find solution/evidence.\nThanks for the speedy help !\nCheers\nG\n\nLe mer. 15 juil. 2015 \u00e0 21:58, Kent C. Dodds notifications@github.com a\n\u00e9crit :\n\n> That sounds about right. So that solves your problem right? Please close\n> this issue if so.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/393#issuecomment-121728536\n> .\n. ",
    "funkytaco": "Yeah sure. I'm definitely using Semantic UI since this project is underway.\n. I decided not to use formly for now, so somebody else would need to take this on.\n. Yeah sure. I'm definitely using Semantic UI since this project is underway.\n. I decided not to use formly for now, so somebody else would need to take this on.\n. ",
    "BartNetJS": "This is because of the nature of Breeze.\nBreeze entities has a object 'entityAspect' on every entity.\n'entityAspect' is used to keep track on changes, etc.\nAlso every entityAspect is pointing to his own entity also, causing a circular reference.\nI have added a suggestion to breezejs to change the name entityAspect to $entityAspect.\nthis will skip AngularJS.equal function to compare this property\n\nplease vote here:\nhttps://breezejs.uservoice.com/forums/173093-1-breezejs-feature-suggestions/suggestions/9073255-change-entityaspect-name-to-entityaspect-to-preve\n. @kentcdodds can you have a look at the discussion at breeze (https://breezejs.uservoice.com/forums/173093-1-breezejs-feature-suggestions/suggestions/9073255-change-entityaspect-name-to-entityaspect-to-preve)?\n\nWard is asking why the watch approach is used.\nThanks \n. This is because of the nature of Breeze.\nBreeze entities has a object 'entityAspect' on every entity.\n'entityAspect' is used to keep track on changes, etc.\nAlso every entityAspect is pointing to his own entity also, causing a circular reference.\nI have added a suggestion to breezejs to change the name entityAspect to $entityAspect.\nthis will skip AngularJS.equal function to compare this property\n\nplease vote here:\nhttps://breezejs.uservoice.com/forums/173093-1-breezejs-feature-suggestions/suggestions/9073255-change-entityaspect-name-to-entityaspect-to-preve\n. @kentcdodds can you have a look at the discussion at breeze (https://breezejs.uservoice.com/forums/173093-1-breezejs-feature-suggestions/suggestions/9073255-change-entityaspect-name-to-entityaspect-to-preve)?\n\nWard is asking why the watch approach is used.\nThanks \n. ",
    "DeBiese": "Hey @benoror , we ended up dropping formly for our project. \nNot really a solution, just a decision of what we wanted to keep using the most...\n. Hey @benoror , we ended up dropping formly for our project. \nNot really a solution, just a decision of what we wanted to keep using the most...\n. ",
    "Evanion": "Right now I'm working on this repo: https://github.com/Evanion/angular-formly-templates-uikit\nOnce I get it to a beta stage we can migrate it to an official repo.\nI will take a look at making a PR.\n. Right now I'm working on this repo: https://github.com/Evanion/angular-formly-templates-uikit\nOnce I get it to a beta stage we can migrate it to an official repo.\nI will take a look at making a PR.\n. ",
    "siripimamatha": "please send me one example using this directive( kendo-drop-down-list)\n. please send me one example using this directive( kendo-drop-down-list)\n. please send me one example using this directive( kendo-drop-down-list)\n. please send me one example using this directive( kendo-drop-down-list)\n. ",
    "codecov-io": "## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=8af8d1f77fa810364111366e138dd2787f12ac9d) is `90.99%`\n\n> Merging **#401** into **master** will decrease coverage by **-0.08%** as of [`8af8d1f`](https://codecov.io/github/formly-js/angular-formly/commit/8af8d1f77fa810364111366e138dd2787f12ac9d)\n\n``` diff\n@@            master    #401   diff @@\n======================================\n  Files           16      16       \n  Stmts         1164    1132    -32\n  Branches       258     252     -6\n  Methods        142     142       \n======================================\n- Hit           1060    1030    -30\n+ Partial         25      23     -2\n  Missed          79      79       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/fec4f6edfdfbb3e565dd6304a138359ff3dfe653...8af8d1f77fa810364111366e138dd2787f12ac9d)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=8af8d1f77fa810364111366e138dd2787f12ac9d)\n1. `+0.62%` via [...tives/formly-form.js#243...249](https://codecov.io/github/formly-js/angular-formly/src/directives/formly-form.js?ref=8af8d1f77fa810364111366e138dd2787f12ac9d#243) \n2. `+0.53%` via [.../formlyCustomTags.js#9...14](https://codecov.io/github/formly-js/angular-formly/src/run/formlyCustomTags.js?ref=8af8d1f77fa810364111366e138dd2787f12ac9d#9) \n3. `+0.53%` via [...tives/formly-form.js#208...213](https://codecov.io/github/formly-js/angular-formly/src/directives/formly-form.js?ref=8af8d1f77fa810364111366e138dd2787f12ac9d#208) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=8af8d1f77fa810364111366e138dd2787f12ac9d)_\n\n> Powered by [Codecov](https://codecov.io)\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=a50e8e550557cdddc21c2b86cd65f1ff7888f13a) is `91.01%`\n\n> Merging **#411** into **master** will increase coverage by **+0.02%** as of [`a50e8e5`](https://codecov.io/github/formly-js/angular-formly/commit/a50e8e550557cdddc21c2b86cd65f1ff7888f13a)\n\n``` diff\n@@            master    #411   diff @@\n======================================\n  Files           16      16       \n  Stmts         1132    1135     +3\n  Branches       252     252       \n  Methods        142     142       \n======================================\n+ Hit           1030    1033     +3\n  Partial         23      23       \n  Missed          79      79       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/05a0ffff47522d566490c057488c3701963ad85a...a50e8e550557cdddc21c2b86cd65f1ff7888f13a)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=a50e8e550557cdddc21c2b86cd65f1ff7888f13a)\n1. `+0.71%` via [...tives/formly-form.js#223...230](https://codecov.io/github/formly-js/angular-formly/src/directives/formly-form.js?ref=a50e8e550557cdddc21c2b86cd65f1ff7888f13a#223) \n2. `+0.62%` via [...tives/formly-form.js#258...264](https://codecov.io/github/formly-js/angular-formly/src/directives/formly-form.js?ref=a50e8e550557cdddc21c2b86cd65f1ff7888f13a#258) \n3. `+0.53%` via [.../formlyCustomTags.js#9...14](https://codecov.io/github/formly-js/angular-formly/src/run/formlyCustomTags.js?ref=a50e8e550557cdddc21c2b86cd65f1ff7888f13a#9) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=a50e8e550557cdddc21c2b86cd65f1ff7888f13a)_\n\n> Powered by [Codecov](https://codecov.io)\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=cb0bca3d2bafc5ba96eb52cd0b8d1d98e22e81b8) is `91.07%`\n\n> Merging **#415** into **master** will not affect coverage as of [`cb0bca3`](https://codecov.io/github/formly-js/angular-formly/commit/cb0bca3d2bafc5ba96eb52cd0b8d1d98e22e81b8)\n\n``` diff\n@@            master    #415   diff @@\n======================================\n  Files           16      16       \n  Stmts         1164    1164       \n  Branches       258     258       \n  Methods        142     142       \n======================================\n  Hit           1060    1060       \n  Partial         25      25       \n  Missed          79      79       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/41bd8b4bd87fea880363a7fef59e289f43238e19...cb0bca3d2bafc5ba96eb52cd0b8d1d98e22e81b8)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=cb0bca3d2bafc5ba96eb52cd0b8d1d98e22e81b8)\n1. `+0.68%` via [...tives/formly-form.js#225...232](https://codecov.io/github/formly-js/angular-formly/src/directives/formly-form.js?ref=cb0bca3d2bafc5ba96eb52cd0b8d1d98e22e81b8#225) \n2. `+0.60%` via [...tives/formly-form.js#260...266](https://codecov.io/github/formly-js/angular-formly/src/directives/formly-form.js?ref=cb0bca3d2bafc5ba96eb52cd0b8d1d98e22e81b8#260) \n3. `+0.51%` via [.../formlyCustomTags.js#9...14](https://codecov.io/github/formly-js/angular-formly/src/run/formlyCustomTags.js?ref=cb0bca3d2bafc5ba96eb52cd0b8d1d98e22e81b8#9) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=cb0bca3d2bafc5ba96eb52cd0b8d1d98e22e81b8)_\n\n> Powered by [Codecov](https://codecov.io)\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=9663c70b62828f1984015b14c140c48c0945a2f0) is `91.13%`\n\n> Merging **#422** into **master** will increase coverage by **+0.06%** as of [`9663c70`](https://codecov.io/github/formly-js/angular-formly/commit/9663c70b62828f1984015b14c140c48c0945a2f0)\n\n``` diff\n@@            master    #422   diff @@\n======================================\n  Files           16      16       \n  Stmts         1164    1173     +9\n  Branches       258     259     +1\n  Methods        142     143     +1\n======================================\n+ Hit           1060    1069     +9\n  Partial         25      25       \n  Missed          79      79       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/889694b8c98b527238d0b497abc04b44438d6bae...9663c70b62828f1984015b14c140c48c0945a2f0) as of [`9663c70`](https://codecov.io/github/formly-js/angular-formly/commit/9663c70b62828f1984015b14c140c48c0945a2f0)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=9663c70b62828f1984015b14c140c48c0945a2f0)\n1. `+0.69%` via [...tives/formly-form.js#225...232](https://codecov.io/github/formly-js/angular-formly/src/directives/formly-form.js?ref=9663c70b62828f1984015b14c140c48c0945a2f0#225) \n2. `+0.60%` via [...tives/formly-form.js#260...266](https://codecov.io/github/formly-js/angular-formly/src/directives/formly-form.js?ref=9663c70b62828f1984015b14c140c48c0945a2f0#260) \n3. `+0.52%` via [.../formlyCustomTags.js#9...14](https://codecov.io/github/formly-js/angular-formly/src/run/formlyCustomTags.js?ref=9663c70b62828f1984015b14c140c48c0945a2f0#9) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=9663c70b62828f1984015b14c140c48c0945a2f0)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=41306441501d79269b13fd7c7d4fd90b5bb40372) is `92.85%`\n\n> Merging **#424** into **master** will increase coverage by **+1.72%** as of [`4130644`](https://codecov.io/github/formly-js/angular-formly/commit/41306441501d79269b13fd7c7d4fd90b5bb40372)\n\n``` diff\n@@            master    #424   diff @@\n======================================\n  Files           16      16       \n  Stmts         1173    1077    -96\n  Branches       259       0   -259\n  Methods        143       0   -143\n======================================\n- Hit           1069    1000    -69\n+ Partial         25       0    -25\n+ Missed          79      77     -2\n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/a61de611b09fba115d85a4973900ac2d000d7674...41306441501d79269b13fd7c7d4fd90b5bb40372) as of [`4130644`](https://codecov.io/github/formly-js/angular-formly/commit/41306441501d79269b13fd7c7d4fd90b5bb40372)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=41306441501d79269b13fd7c7d4fd90b5bb40372)\n1. `+0.65%` via [...tives/formly-form.js#245...251](https://codecov.io/github/formly-js/angular-formly/src/directives/formly-form.js?ref=41306441501d79269b13fd7c7d4fd90b5bb40372#245) \n2. `+0.56%` via [.../formlyCustomTags.js#9...14](https://codecov.io/github/formly-js/angular-formly/src/run/formlyCustomTags.js?ref=41306441501d79269b13fd7c7d4fd90b5bb40372#9) \n3. `+0.56%` via [...tives/formly-form.js#264...269](https://codecov.io/github/formly-js/angular-formly/src/directives/formly-form.js?ref=41306441501d79269b13fd7c7d4fd90b5bb40372#264) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=41306441501d79269b13fd7c7d4fd90b5bb40372)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=10ee65fbd1d18fd04099e630ec63fae638e8281d) is `92.90%`\n\n> Merging **#428** into **master** will increase coverage by **+0.05%** as of [`10ee65f`](https://codecov.io/github/formly-js/angular-formly/commit/10ee65fbd1d18fd04099e630ec63fae638e8281d)\n\n``` diff\n@@            master   #428   diff @@\n=====================================\n  Files           16     16       \n  Stmts         1077   1084     +7\n  Branches         0      0       \n  Methods          0      0       \n=====================================\n+ Hit           1000   1007     +7\n  Partial          0      0       \n  Missed          77     77       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/3ff6eadd9913588cfbe7af21d962e4b34b53a340...10ee65fbd1d18fd04099e630ec63fae638e8281d) as of [`10ee65f`](https://codecov.io/github/formly-js/angular-formly/commit/10ee65fbd1d18fd04099e630ec63fae638e8281d)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=10ee65fbd1d18fd04099e630ec63fae638e8281d)\n1. `+0.64%` via [...tives/formly-form.js#245...251](https://codecov.io/github/formly-js/angular-formly//var/snap-ci/repo/src/directives/formly-form.js?ref=10ee65fbd1d18fd04099e630ec63fae638e8281d#245) \n2. `+0.55%` via [.../formlyCustomTags.js#9...14](https://codecov.io/github/formly-js/angular-formly//var/snap-ci/repo/src/run/formlyCustomTags.js?ref=10ee65fbd1d18fd04099e630ec63fae638e8281d#9) \n3. `+0.55%` via [...tives/formly-form.js#264...269](https://codecov.io/github/formly-js/angular-formly//var/snap-ci/repo/src/directives/formly-form.js?ref=10ee65fbd1d18fd04099e630ec63fae638e8281d#264) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=10ee65fbd1d18fd04099e630ec63fae638e8281d)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=6094ee3f57285e3ae3823613f3b940b12135df1c) is `92.90%`\n\n> Merging **#429** into **master** will not affect coverage as of [`6094ee3`](https://codecov.io/github/formly-js/angular-formly/commit/6094ee3f57285e3ae3823613f3b940b12135df1c)\n\n``` diff\n@@            master   #429   diff @@\n=====================================\n  Files           16     16       \n  Stmts         1084   1084       \n  Branches         0      0       \n  Methods          0      0       \n=====================================\n  Hit           1007   1007       \n  Partial          0      0       \n  Missed          77     77       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/f93bf1427578875ab2d1e9acfb7b6f6532f42b69...6094ee3f57285e3ae3823613f3b940b12135df1c) as of [`6094ee3`](https://codecov.io/github/formly-js/angular-formly/commit/6094ee3f57285e3ae3823613f3b940b12135df1c)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=6094ee3f57285e3ae3823613f3b940b12135df1c)\n1. `+0.64%` via [...tives/formly-form.js#245...251](https://codecov.io/github/formly-js/angular-formly//var/snap-ci/repo/src/directives/formly-form.js?ref=6094ee3f57285e3ae3823613f3b940b12135df1c#245) \n2. `+0.55%` via [.../formlyCustomTags.js#9...14](https://codecov.io/github/formly-js/angular-formly//var/snap-ci/repo/src/run/formlyCustomTags.js?ref=6094ee3f57285e3ae3823613f3b940b12135df1c#9) \n3. `+0.55%` via [...tives/formly-form.js#264...269](https://codecov.io/github/formly-js/angular-formly//var/snap-ci/repo/src/directives/formly-form.js?ref=6094ee3f57285e3ae3823613f3b940b12135df1c#264) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=6094ee3f57285e3ae3823613f3b940b12135df1c)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=ab810f3f4cc67b86feb5a2b13bda238ff30ee41a) is `92.90%`\n\n> Merging **#430** into **master** will not affect coverage as of [`ab810f3`](https://codecov.io/github/formly-js/angular-formly/commit/ab810f3f4cc67b86feb5a2b13bda238ff30ee41a)\n\n``` diff\n@@            master   #430   diff @@\n=====================================\n  Files           16     16       \n  Stmts         1084   1085     +1\n  Branches         0      0       \n  Methods          0      0       \n=====================================\n+ Hit           1007   1008     +1\n  Partial          0      0       \n  Missed          77     77       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/cc8d85122c93627106f68d48980e34bdbc42d90d...ab810f3f4cc67b86feb5a2b13bda238ff30ee41a) as of [`ab810f3`](https://codecov.io/github/formly-js/angular-formly/commit/ab810f3f4cc67b86feb5a2b13bda238ff30ee41a)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=ab810f3f4cc67b86feb5a2b13bda238ff30ee41a)\n1. `+0.65%` via [...tives/formly-form.js#245...251](https://codecov.io/github/formly-js/angular-formly//var/snap-ci/repo/src/directives/formly-form.js?ref=ab810f3f4cc67b86feb5a2b13bda238ff30ee41a#245) \n2. `+0.56%` via [.../formlyCustomTags.js#9...14](https://codecov.io/github/formly-js/angular-formly//var/snap-ci/repo/src/run/formlyCustomTags.js?ref=ab810f3f4cc67b86feb5a2b13bda238ff30ee41a#9) \n3. `+0.56%` via [...tives/formly-form.js#264...269](https://codecov.io/github/formly-js/angular-formly//var/snap-ci/repo/src/directives/formly-form.js?ref=ab810f3f4cc67b86feb5a2b13bda238ff30ee41a#264) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=ab810f3f4cc67b86feb5a2b13bda238ff30ee41a)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=cc67dd7fcd1d8f12fd0a618188009ecbd385f973) is `92.92%`\n\n> Merging **#433** into **master** will increase coverage by **+0.02%** as of [`cc67dd7`](https://codecov.io/github/formly-js/angular-formly/commit/cc67dd7fcd1d8f12fd0a618188009ecbd385f973)\n\n``` diff\n@@            master    #433   diff @@\n======================================\n  Files           16      16       \n  Stmts         1085    1088     +3\n  Branches         0       0       \n  Methods          0       0       \n======================================\n+ Hit           1008    1011     +3\n  Partial          0       0       \n  Missed          77      77       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/c5dcb4dd15c13e8adc1a2c568150495fc2c3fabf...cc67dd7fcd1d8f12fd0a618188009ecbd385f973) as of [`cc67dd7`](https://codecov.io/github/formly-js/angular-formly/commit/cc67dd7fcd1d8f12fd0a618188009ecbd385f973)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=cc67dd7fcd1d8f12fd0a618188009ecbd385f973)\n1. `+0.65%` via [...tives/formly-form.js#245...251](https://codecov.io/github/formly-js/angular-formly//var/snap-ci/repo/src/directives/formly-form.js?ref=cc67dd7fcd1d8f12fd0a618188009ecbd385f973#245) \n2. `+0.55%` via [.../formlyCustomTags.js#9...14](https://codecov.io/github/formly-js/angular-formly//var/snap-ci/repo/src/run/formlyCustomTags.js?ref=cc67dd7fcd1d8f12fd0a618188009ecbd385f973#9) \n3. `+0.55%` via [...tives/formly-form.js#264...269](https://codecov.io/github/formly-js/angular-formly//var/snap-ci/repo/src/directives/formly-form.js?ref=cc67dd7fcd1d8f12fd0a618188009ecbd385f973#264) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=cc67dd7fcd1d8f12fd0a618188009ecbd385f973)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=8624f237392a1a55ea4e24061bba4c4ccafcbb79) is `92.99%`\n\n> Merging **#434** into **master** will increase coverage by **+0.07%** as of [`8624f23`](https://codecov.io/github/formly-js/angular-formly/commit/8624f237392a1a55ea4e24061bba4c4ccafcbb79)\n\n``` diff\n@@            master    #434   diff @@\n======================================\n  Files           16      16       \n  Stmts         1088    1098    +10\n  Branches         0       0       \n  Methods          0       0       \n======================================\n+ Hit           1011    1021    +10\n  Partial          0       0       \n  Missed          77      77       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/a60ef3ca9c714721b4a18090ae053124ea88be9d...8624f237392a1a55ea4e24061bba4c4ccafcbb79) as of [`8624f23`](https://codecov.io/github/formly-js/angular-formly/commit/8624f237392a1a55ea4e24061bba4c4ccafcbb79)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=8624f237392a1a55ea4e24061bba4c4ccafcbb79)\n1. `+0.63%` via [...tives/formly-form.js#258...264](https://codecov.io/github/formly-js/angular-formly//var/snap-ci/repo/src/directives/formly-form.js?ref=8624f237392a1a55ea4e24061bba4c4ccafcbb79#258) \n2. `+0.54%` via [.../formlyCustomTags.js#9...14](https://codecov.io/github/formly-js/angular-formly//var/snap-ci/repo/src/run/formlyCustomTags.js?ref=8624f237392a1a55ea4e24061bba4c4ccafcbb79#9) \n3. `+0.54%` via [...tives/formly-form.js#277...282](https://codecov.io/github/formly-js/angular-formly//var/snap-ci/repo/src/directives/formly-form.js?ref=8624f237392a1a55ea4e24061bba4c4ccafcbb79#277) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=8624f237392a1a55ea4e24061bba4c4ccafcbb79)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=2c6693bc164ec941cc8958336a5b2c3e0a769e7d) is `92.98%`\n\n> Merging **#443** into **master** will not affect coverage as of [`2c6693b`](https://codecov.io/github/formly-js/angular-formly/commit/2c6693bc164ec941cc8958336a5b2c3e0a769e7d)\n\n``` diff\n@@            master    #443   diff @@\n======================================\n  Files           16      16       \n  Stmts         1098    1098       \n  Branches         0       0       \n  Methods          0       0       \n======================================\n  Hit           1021    1021       \n  Partial          0       0       \n  Missed          77      77       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/2ee619132dc1569f49cb41a535893d8ec0eb6f03...2c6693bc164ec941cc8958336a5b2c3e0a769e7d) as of [`2c6693b`](https://codecov.io/github/formly-js/angular-formly/commit/2c6693bc164ec941cc8958336a5b2c3e0a769e7d)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=2c6693bc164ec941cc8958336a5b2c3e0a769e7d)\n1. `+0.64%` via [...tives/formly-form.js#259...265](https://codecov.io/github/formly-js/angular-formly/src/directives/formly-form.js?ref=2c6693bc164ec941cc8958336a5b2c3e0a769e7d#259) \n2. `+0.55%` via [.../formlyCustomTags.js#9...14](https://codecov.io/github/formly-js/angular-formly/src/run/formlyCustomTags.js?ref=2c6693bc164ec941cc8958336a5b2c3e0a769e7d#9) \n3. `+0.55%` via [...tives/formly-form.js#278...283](https://codecov.io/github/formly-js/angular-formly/src/directives/formly-form.js?ref=2c6693bc164ec941cc8958336a5b2c3e0a769e7d#278) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=2c6693bc164ec941cc8958336a5b2c3e0a769e7d)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=c3fcc6a63e92b06cdb4e194012ac84d15bb27cd3) is `92.80%`\n\n> Merging **#464** into **master** will not affect coverage as of [`c3fcc6a`](https://codecov.io/github/formly-js/angular-formly/commit/c3fcc6a63e92b06cdb4e194012ac84d15bb27cd3)\n\n``` diff\n@@            master   #464   diff @@\n=====================================\n  Files           16     16       \n  Stmts         1056   1056       \n  Branches         0      0       \n  Methods          0      0       \n=====================================\n  Hit            980    980       \n  Partial          0      0       \n  Missed          76     76       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/b0f0bc4ae9d915644747a9ec29e130b77039f0db...c3fcc6a63e92b06cdb4e194012ac84d15bb27cd3) as of [`c3fcc6a`](https://codecov.io/github/formly-js/angular-formly/commit/c3fcc6a63e92b06cdb4e194012ac84d15bb27cd3)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=c3fcc6a63e92b06cdb4e194012ac84d15bb27cd3)\n1. `+0.66%` via [...tives/formly-form.js#288...294](https://codecov.io/github/formly-js/angular-formly/src/directives/formly-form.js?ref=c3fcc6a63e92b06cdb4e194012ac84d15bb27cd3#288) \n2. `+0.57%` via [.../formlyCustomTags.js#9...14](https://codecov.io/github/formly-js/angular-formly/src/run/formlyCustomTags.js?ref=c3fcc6a63e92b06cdb4e194012ac84d15bb27cd3#9) \n3. `+0.57%` via [...tives/formly-form.js#307...312](https://codecov.io/github/formly-js/angular-formly/src/directives/formly-form.js?ref=c3fcc6a63e92b06cdb4e194012ac84d15bb27cd3#307) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=c3fcc6a63e92b06cdb4e194012ac84d15bb27cd3)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=36b98acee7b34e69931cb6d0c01aca374a5a9f88) is `92.80%`\n\n> Merging **#472** into **master** will not affect coverage as of [`36b98ac`](https://codecov.io/github/formly-js/angular-formly/commit/36b98acee7b34e69931cb6d0c01aca374a5a9f88)\n\n``` diff\n@@            master   #472   diff @@\n=====================================\n  Files           16     16       \n  Stmts         1056   1056       \n  Branches         0      0       \n  Methods          0      0       \n=====================================\n  Hit            980    980       \n  Partial          0      0       \n  Missed          76     76       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/3c45ae558fa37e0b5640aef0f55d8cb5c6226163...36b98acee7b34e69931cb6d0c01aca374a5a9f88) as of [`36b98ac`](https://codecov.io/github/formly-js/angular-formly/commit/36b98acee7b34e69931cb6d0c01aca374a5a9f88)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=36b98acee7b34e69931cb6d0c01aca374a5a9f88)\n1. `+0.66%` via [...tives/formly-form.js#288...294](https://codecov.io/github/formly-js/angular-formly/src/directives/formly-form.js?ref=36b98acee7b34e69931cb6d0c01aca374a5a9f88#288) \n2. `+0.57%` via [.../formlyCustomTags.js#9...14](https://codecov.io/github/formly-js/angular-formly/src/run/formlyCustomTags.js?ref=36b98acee7b34e69931cb6d0c01aca374a5a9f88#9) \n3. `+0.57%` via [...tives/formly-form.js#307...312](https://codecov.io/github/formly-js/angular-formly/src/directives/formly-form.js?ref=36b98acee7b34e69931cb6d0c01aca374a5a9f88#307) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=36b98acee7b34e69931cb6d0c01aca374a5a9f88)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=43f1a080f0940a277a612ef1ac6311eb3e159b21) is `92.80%`\n\n> Merging **#475** into **master** will not affect coverage as of [`43f1a08`](https://codecov.io/github/formly-js/angular-formly/commit/43f1a080f0940a277a612ef1ac6311eb3e159b21)\n\n``` diff\n@@            master   #475   diff @@\n=====================================\n  Files           16     16       \n  Stmts         1056   1057     +1\n  Branches         0      0       \n  Methods          0      0       \n=====================================\n+ Hit            980    981     +1\n  Partial          0      0       \n  Missed          76     76       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/1a2175b0aa186422315863d4d0ff392ef87e9e5c...43f1a080f0940a277a612ef1ac6311eb3e159b21) as of [`43f1a08`](https://codecov.io/github/formly-js/angular-formly/commit/43f1a080f0940a277a612ef1ac6311eb3e159b21)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=43f1a080f0940a277a612ef1ac6311eb3e159b21)\n1. `+0.67%` via [...tives/formly-form.js#288...294](https://codecov.io/github/formly-js/angular-formly/src/directives/formly-form.js?ref=43f1a080f0940a277a612ef1ac6311eb3e159b21#288) \n2. `+0.57%` via [.../formlyCustomTags.js#9...14](https://codecov.io/github/formly-js/angular-formly/src/run/formlyCustomTags.js?ref=43f1a080f0940a277a612ef1ac6311eb3e159b21#9) \n3. `+0.57%` via [...tives/formly-form.js#307...312](https://codecov.io/github/formly-js/angular-formly/src/directives/formly-form.js?ref=43f1a080f0940a277a612ef1ac6311eb3e159b21#307) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=43f1a080f0940a277a612ef1ac6311eb3e159b21)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=210b15e19a3ae4b558685025afbc454dbc4ff048) is `92.80%`\n\n> Merging **#487** into **master** will not affect coverage as of [`210b15e`](https://codecov.io/github/formly-js/angular-formly/commit/210b15e19a3ae4b558685025afbc454dbc4ff048)\n\n``` diff\n@@            master   #487   diff @@\n=====================================\n  Files           16     16       \n  Stmts         1057   1057       \n  Branches         0      0       \n  Methods          0      0       \n=====================================\n  Hit            981    981       \n  Partial          0      0       \n  Missed          76     76       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/d6b0c7426d2ff04addf7c1fa3fea91828b75eee3...210b15e19a3ae4b558685025afbc454dbc4ff048) as of [`210b15e`](https://codecov.io/github/formly-js/angular-formly/commit/210b15e19a3ae4b558685025afbc454dbc4ff048)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=210b15e19a3ae4b558685025afbc454dbc4ff048)\n1. `+0.67%` via [...tives/formly-form.js#288...294](https://codecov.io/github/formly-js/angular-formly/src/directives/formly-form.js?ref=210b15e19a3ae4b558685025afbc454dbc4ff048#288) \n2. `+0.57%` via [.../formlyCustomTags.js#9...14](https://codecov.io/github/formly-js/angular-formly/src/run/formlyCustomTags.js?ref=210b15e19a3ae4b558685025afbc454dbc4ff048#9) \n3. `+0.57%` via [...tives/formly-form.js#307...312](https://codecov.io/github/formly-js/angular-formly/src/directives/formly-form.js?ref=210b15e19a3ae4b558685025afbc454dbc4ff048#307) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=210b15e19a3ae4b558685025afbc454dbc4ff048)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=0f0818d0a325393701f740c27121322f8930aa1e) is `92.80%`\n\n> Merging **#488** into **master** will not affect coverage as of [`0f0818d`](https://codecov.io/github/formly-js/angular-formly/commit/0f0818d0a325393701f740c27121322f8930aa1e)\n\n``` diff\n@@            master   #488   diff @@\n=====================================\n  Files           16     16       \n  Stmts         1057   1057       \n  Branches         0      0       \n  Methods          0      0       \n=====================================\n  Hit            981    981       \n  Partial          0      0       \n  Missed          76     76       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/e8c84066c4ff6e559202f50a7f29681c19fee098...0f0818d0a325393701f740c27121322f8930aa1e) as of [`0f0818d`](https://codecov.io/github/formly-js/angular-formly/commit/0f0818d0a325393701f740c27121322f8930aa1e)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=0f0818d0a325393701f740c27121322f8930aa1e)\n1. `+0.67%` via [...tives/formly-form.js#288...294](https://codecov.io/github/formly-js/angular-formly/src/directives/formly-form.js?ref=0f0818d0a325393701f740c27121322f8930aa1e#288) \n2. `+0.57%` via [.../formlyCustomTags.js#9...14](https://codecov.io/github/formly-js/angular-formly/src/run/formlyCustomTags.js?ref=0f0818d0a325393701f740c27121322f8930aa1e#9) \n3. `+0.57%` via [...tives/formly-form.js#307...312](https://codecov.io/github/formly-js/angular-formly/src/directives/formly-form.js?ref=0f0818d0a325393701f740c27121322f8930aa1e#307) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=0f0818d0a325393701f740c27121322f8930aa1e)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=c24f575017c45036b1c9fb022a6bc8037293ea87) is `92.80%`\n\n> Merging **#489** into **master** will not affect coverage as of [`c24f575`](https://codecov.io/github/formly-js/angular-formly/commit/c24f575017c45036b1c9fb022a6bc8037293ea87)\n\n``` diff\n@@            master   #489   diff @@\n=====================================\n  Files           16     16       \n  Stmts         1057   1057       \n  Branches         0      0       \n  Methods          0      0       \n=====================================\n  Hit            981    981       \n  Partial          0      0       \n  Missed          76     76       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/bf0321d27ff53b4e35ffd1109f17cf59377382c2...c24f575017c45036b1c9fb022a6bc8037293ea87) as of [`c24f575`](https://codecov.io/github/formly-js/angular-formly/commit/c24f575017c45036b1c9fb022a6bc8037293ea87)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=c24f575017c45036b1c9fb022a6bc8037293ea87)\n1. `+0.67%` via [...tives/formly-form.js#288...294](https://codecov.io/github/formly-js/angular-formly/src/directives/formly-form.js?ref=c24f575017c45036b1c9fb022a6bc8037293ea87#288) \n2. `+0.57%` via [.../formlyCustomTags.js#9...14](https://codecov.io/github/formly-js/angular-formly/src/run/formlyCustomTags.js?ref=c24f575017c45036b1c9fb022a6bc8037293ea87#9) \n3. `+0.57%` via [...tives/formly-form.js#307...312](https://codecov.io/github/formly-js/angular-formly/src/directives/formly-form.js?ref=c24f575017c45036b1c9fb022a6bc8037293ea87#307) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=c24f575017c45036b1c9fb022a6bc8037293ea87)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=cb45c00ceb76c46caf9d8cebe3059ddb4c70e6d2) is `92.80%`\n\n> Merging **#490** into **master** will not affect coverage as of [`cb45c00`](https://codecov.io/github/formly-js/angular-formly/commit/cb45c00ceb76c46caf9d8cebe3059ddb4c70e6d2)\n\n``` diff\n@@            master   #490   diff @@\n=====================================\n  Files           16     16       \n  Stmts         1057   1057       \n  Branches         0      0       \n  Methods          0      0       \n=====================================\n  Hit            981    981       \n  Partial          0      0       \n  Missed          76     76       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/b5645ccf9accf729ee9164e8ca29a04bdf30dfe2...cb45c00ceb76c46caf9d8cebe3059ddb4c70e6d2) as of [`cb45c00`](https://codecov.io/github/formly-js/angular-formly/commit/cb45c00ceb76c46caf9d8cebe3059ddb4c70e6d2)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=cb45c00ceb76c46caf9d8cebe3059ddb4c70e6d2)\n1. `+0.67%` via [...tives/formly-form.js#288...294](https://codecov.io/github/formly-js/angular-formly/src/directives/formly-form.js?ref=cb45c00ceb76c46caf9d8cebe3059ddb4c70e6d2#288) \n2. `+0.57%` via [.../formlyCustomTags.js#9...14](https://codecov.io/github/formly-js/angular-formly/src/run/formlyCustomTags.js?ref=cb45c00ceb76c46caf9d8cebe3059ddb4c70e6d2#9) \n3. `+0.57%` via [...tives/formly-form.js#307...312](https://codecov.io/github/formly-js/angular-formly/src/directives/formly-form.js?ref=cb45c00ceb76c46caf9d8cebe3059ddb4c70e6d2#307) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=cb45c00ceb76c46caf9d8cebe3059ddb4c70e6d2)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=1515c49658bee2dd2eb960db3671a309f37c8b80) is `92.80%`\n\n> Merging **#495** into **master** will not affect coverage as of [`1515c49`](https://codecov.io/github/formly-js/angular-formly/commit/1515c49658bee2dd2eb960db3671a309f37c8b80)\n\n``` diff\n@@            master   #495   diff @@\n=====================================\n  Files           16     16       \n  Stmts         1057   1057       \n  Branches         0      0       \n  Methods          0      0       \n=====================================\n  Hit            981    981       \n  Partial          0      0       \n  Missed          76     76       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/a58cc88f1f8f7f0314349fdbefe377412c8b8de1...1515c49658bee2dd2eb960db3671a309f37c8b80) as of [`1515c49`](https://codecov.io/github/formly-js/angular-formly/commit/1515c49658bee2dd2eb960db3671a309f37c8b80)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=1515c49658bee2dd2eb960db3671a309f37c8b80)\n1. `+0.67%` via [...tives/formly-form.js#288...294](https://codecov.io/github/formly-js/angular-formly/src/directives/formly-form.js?ref=1515c49658bee2dd2eb960db3671a309f37c8b80#288) \n2. `+0.57%` via [.../formlyCustomTags.js#9...14](https://codecov.io/github/formly-js/angular-formly/src/run/formlyCustomTags.js?ref=1515c49658bee2dd2eb960db3671a309f37c8b80#9) \n3. `+0.57%` via [...tives/formly-form.js#307...312](https://codecov.io/github/formly-js/angular-formly/src/directives/formly-form.js?ref=1515c49658bee2dd2eb960db3671a309f37c8b80#307) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=1515c49658bee2dd2eb960db3671a309f37c8b80)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=cebd12d9cbac5431591c8da93372a66dae81c868) is `92.80%`\n\n> Merging **#496** into **master** will not affect coverage as of [`cebd12d`](https://codecov.io/github/formly-js/angular-formly/commit/cebd12d9cbac5431591c8da93372a66dae81c868)\n\n``` diff\n@@            master   #496   diff @@\n=====================================\n  Files           16     16       \n  Stmts         1057   1057       \n  Branches         0      0       \n  Methods          0      0       \n=====================================\n  Hit            981    981       \n  Partial          0      0       \n  Missed          76     76       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/a58cc88f1f8f7f0314349fdbefe377412c8b8de1...cebd12d9cbac5431591c8da93372a66dae81c868) as of [`cebd12d`](https://codecov.io/github/formly-js/angular-formly/commit/cebd12d9cbac5431591c8da93372a66dae81c868)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=cebd12d9cbac5431591c8da93372a66dae81c868)\n1. `+0.67%` via [...tives/formly-form.js#288...294](https://codecov.io/github/formly-js/angular-formly/src/directives/formly-form.js?ref=cebd12d9cbac5431591c8da93372a66dae81c868#288) \n2. `+0.57%` via [.../formlyCustomTags.js#9...14](https://codecov.io/github/formly-js/angular-formly/src/run/formlyCustomTags.js?ref=cebd12d9cbac5431591c8da93372a66dae81c868#9) \n3. `+0.57%` via [...tives/formly-form.js#307...312](https://codecov.io/github/formly-js/angular-formly/src/directives/formly-form.js?ref=cebd12d9cbac5431591c8da93372a66dae81c868#307) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=cebd12d9cbac5431591c8da93372a66dae81c868)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=af31e47061b9f4637ca7a94d30766a238d42d1af) is `92.80%`\n\n> Merging **#497** into **master** will not affect coverage as of [`af31e47`](https://codecov.io/github/formly-js/angular-formly/commit/af31e47061b9f4637ca7a94d30766a238d42d1af)\n\n``` diff\n@@            master   #497   diff @@\n=====================================\n  Files           16     16       \n  Stmts         1057   1057       \n  Branches         0      0       \n  Methods          0      0       \n=====================================\n  Hit            981    981       \n  Partial          0      0       \n  Missed          76     76       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/a58cc88f1f8f7f0314349fdbefe377412c8b8de1...af31e47061b9f4637ca7a94d30766a238d42d1af) as of [`af31e47`](https://codecov.io/github/formly-js/angular-formly/commit/af31e47061b9f4637ca7a94d30766a238d42d1af)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=af31e47061b9f4637ca7a94d30766a238d42d1af)\n1. `+0.67%` via [...tives/formly-form.js#288...294](https://codecov.io/github/formly-js/angular-formly/src/directives/formly-form.js?ref=af31e47061b9f4637ca7a94d30766a238d42d1af#288) \n2. `+0.57%` via [.../formlyCustomTags.js#9...14](https://codecov.io/github/formly-js/angular-formly/src/run/formlyCustomTags.js?ref=af31e47061b9f4637ca7a94d30766a238d42d1af#9) \n3. `+0.57%` via [...tives/formly-form.js#307...312](https://codecov.io/github/formly-js/angular-formly/src/directives/formly-form.js?ref=af31e47061b9f4637ca7a94d30766a238d42d1af#307) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=af31e47061b9f4637ca7a94d30766a238d42d1af)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=ee47e53ee3134dd2542c7a16bc6887ff5792f9ac) is `95.88%`\n\n> Merging **#512** into **master** will increase coverage by **+0.73%** as of [`ee47e53`](https://codecov.io/github/formly-js/angular-formly/commit/ee47e53ee3134dd2542c7a16bc6887ff5792f9ac)\n\n``` diff\n@@            master    #512   diff @@\n======================================\n  Files           17      17       \n  Stmts         1093    1093       \n  Branches         0       0       \n  Methods          0       0       \n======================================\n+ Hit           1040    1048     +8\n  Partial          0       0       \n+ Missed          53      45     -8\n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/329711a597130b5fa6f61963160f3da68543d40e...ee47e53ee3134dd2542c7a16bc6887ff5792f9ac) as of [`ee47e53`](https://codecov.io/github/formly-js/angular-formly/commit/ee47e53ee3134dd2542c7a16bc6887ff5792f9ac)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=ee47e53ee3134dd2542c7a16bc6887ff5792f9ac)\n1. `+0.36%` via [...alidationMessages.js#25...28](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyValidationMessages.js?ref=ee47e53ee3134dd2542c7a16bc6887ff5792f9ac#25) \n2. `+0.27%` via [...s/formlyUsability.js#18...20](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyUsability.js?ref=ee47e53ee3134dd2542c7a16bc6887ff5792f9ac#18) \n3. `+0.27%` via [src/test.utils.js#38...40](https://codecov.io/github/formly-js/angular-formly/src/test.utils.js?ref=ee47e53ee3134dd2542c7a16bc6887ff5792f9ac#38) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=ee47e53ee3134dd2542c7a16bc6887ff5792f9ac)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=6aaf3173038f1e23bcfae8eabe918892010676c6) is `95.88%`\n\n> Merging **#518** into **master** will not affect coverage as of [`6aaf317`](https://codecov.io/github/formly-js/angular-formly/commit/6aaf3173038f1e23bcfae8eabe918892010676c6)\n\n``` diff\n@@            master    #518   diff @@\n======================================\n  Files           17      17       \n  Stmts         1093    1093       \n  Branches         0       0       \n  Methods          0       0       \n======================================\n  Hit           1048    1048       \n  Partial          0       0       \n  Missed          45      45       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/d8dcf7c306914f5894976e084e5dfe4747864347...6aaf3173038f1e23bcfae8eabe918892010676c6) as of [`6aaf317`](https://codecov.io/github/formly-js/angular-formly/commit/6aaf3173038f1e23bcfae8eabe918892010676c6)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=6aaf3173038f1e23bcfae8eabe918892010676c6)\n1. `+0.36%` via [...alidationMessages.js#25...28](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyValidationMessages.js?ref=6aaf3173038f1e23bcfae8eabe918892010676c6#25) \n2. `+0.27%` via [...s/formlyUsability.js#18...20](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyUsability.js?ref=6aaf3173038f1e23bcfae8eabe918892010676c6#18) \n3. `+0.27%` via [src/test.utils.js#38...40](https://codecov.io/github/formly-js/angular-formly/src/test.utils.js?ref=6aaf3173038f1e23bcfae8eabe918892010676c6#38) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=6aaf3173038f1e23bcfae8eabe918892010676c6)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=a6bc3969b0773764460d0f94a49d4439ed7ee962) is `95.88%`\n\n> Merging **#519** into **master** will not affect coverage as of [`a6bc396`](https://codecov.io/github/formly-js/angular-formly/commit/a6bc3969b0773764460d0f94a49d4439ed7ee962)\n\n``` diff\n@@            master    #519   diff @@\n======================================\n  Files           17      17       \n  Stmts         1093    1093       \n  Branches         0       0       \n  Methods          0       0       \n======================================\n  Hit           1048    1048       \n  Partial          0       0       \n  Missed          45      45       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/d8dcf7c306914f5894976e084e5dfe4747864347...a6bc3969b0773764460d0f94a49d4439ed7ee962) as of [`a6bc396`](https://codecov.io/github/formly-js/angular-formly/commit/a6bc3969b0773764460d0f94a49d4439ed7ee962)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=a6bc3969b0773764460d0f94a49d4439ed7ee962)\n1. `+0.36%` via [...alidationMessages.js#25...28](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyValidationMessages.js?ref=a6bc3969b0773764460d0f94a49d4439ed7ee962#25) \n2. `+0.27%` via [...s/formlyUsability.js#18...20](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyUsability.js?ref=a6bc3969b0773764460d0f94a49d4439ed7ee962#18) \n3. `+0.27%` via [src/test.utils.js#38...40](https://codecov.io/github/formly-js/angular-formly/src/test.utils.js?ref=a6bc3969b0773764460d0f94a49d4439ed7ee962#38) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=a6bc3969b0773764460d0f94a49d4439ed7ee962)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=397abb2a5920f2736ff59823e447749046c1d336) is `95.88%`\n\n> Merging **#520** into **master** will not affect coverage as of [`397abb2`](https://codecov.io/github/formly-js/angular-formly/commit/397abb2a5920f2736ff59823e447749046c1d336)\n\n``` diff\n@@            master    #520   diff @@\n======================================\n  Files           17      17       \n  Stmts         1093    1093       \n  Branches         0       0       \n  Methods          0       0       \n======================================\n  Hit           1048    1048       \n  Partial          0       0       \n  Missed          45      45       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/cf2ca608a01f19a50fee057e83ef688f1c726391...397abb2a5920f2736ff59823e447749046c1d336) as of [`397abb2`](https://codecov.io/github/formly-js/angular-formly/commit/397abb2a5920f2736ff59823e447749046c1d336)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=397abb2a5920f2736ff59823e447749046c1d336)\n1. `+0.36%` via [...alidationMessages.js#25...28](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyValidationMessages.js?ref=397abb2a5920f2736ff59823e447749046c1d336#25) \n2. `+0.27%` via [src/test.utils.js#38...40](https://codecov.io/github/formly-js/angular-formly/src/test.utils.js?ref=397abb2a5920f2736ff59823e447749046c1d336#38) \n3. `+0.27%` via [...s/formlyUsability.js#18...20](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyUsability.js?ref=397abb2a5920f2736ff59823e447749046c1d336#18) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=397abb2a5920f2736ff59823e447749046c1d336)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=47df77d214077e1f50a5d0462d59bbf04709ca60) is `95.88%`\n\n> Merging **#521** into **master** will not affect coverage as of [`47df77d`](https://codecov.io/github/formly-js/angular-formly/commit/47df77d214077e1f50a5d0462d59bbf04709ca60)\n\n``` diff\n@@            master    #521   diff @@\n======================================\n  Files           17      17       \n  Stmts         1093    1093       \n  Branches         0       0       \n  Methods          0       0       \n======================================\n  Hit           1048    1048       \n  Partial          0       0       \n  Missed          45      45       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/0fc87039f88468a0f3ad4b64301a8593804e7af1...47df77d214077e1f50a5d0462d59bbf04709ca60) as of [`47df77d`](https://codecov.io/github/formly-js/angular-formly/commit/47df77d214077e1f50a5d0462d59bbf04709ca60)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=47df77d214077e1f50a5d0462d59bbf04709ca60)\n1. `+0.36%` via [...alidationMessages.js#25...28](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyValidationMessages.js?ref=47df77d214077e1f50a5d0462d59bbf04709ca60#25) \n2. `+0.27%` via [...s/formlyUsability.js#18...20](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyUsability.js?ref=47df77d214077e1f50a5d0462d59bbf04709ca60#18) \n3. `+0.27%` via [src/test.utils.js#38...40](https://codecov.io/github/formly-js/angular-formly/src/test.utils.js?ref=47df77d214077e1f50a5d0462d59bbf04709ca60#38) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=47df77d214077e1f50a5d0462d59bbf04709ca60)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=4997f9e786255f5031c7d819f255a76fc2ccf5e7) is `95.88%`\n\n> Merging **#525** into **master** will not affect coverage as of [`4997f9e`](https://codecov.io/github/formly-js/angular-formly/commit/4997f9e786255f5031c7d819f255a76fc2ccf5e7)\n\n``` diff\n@@            master    #525   diff @@\n======================================\n  Files           17      17       \n  Stmts         1093    1093       \n  Branches         0       0       \n  Methods          0       0       \n======================================\n  Hit           1048    1048       \n  Partial          0       0       \n  Missed          45      45       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/96c99fec509686903703d3bbb88a995216751e22...4997f9e786255f5031c7d819f255a76fc2ccf5e7) as of [`4997f9e`](https://codecov.io/github/formly-js/angular-formly/commit/4997f9e786255f5031c7d819f255a76fc2ccf5e7)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=4997f9e786255f5031c7d819f255a76fc2ccf5e7)\n1. `+0.36%` via [...alidationMessages.js#25...28](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyValidationMessages.js?ref=4997f9e786255f5031c7d819f255a76fc2ccf5e7#25) \n2. `+0.27%` via [src/test.utils.js#38...40](https://codecov.io/github/formly-js/angular-formly/src/test.utils.js?ref=4997f9e786255f5031c7d819f255a76fc2ccf5e7#38) \n3. `+0.27%` via [...s/formlyUsability.js#18...20](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyUsability.js?ref=4997f9e786255f5031c7d819f255a76fc2ccf5e7#18) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=4997f9e786255f5031c7d819f255a76fc2ccf5e7)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=4c2b87dab468e5369bbc439908559a80c1b0f521) is `95.88%`\n\n> Merging **#529** into **master** will not affect coverage as of [`4c2b87d`](https://codecov.io/github/formly-js/angular-formly/commit/4c2b87dab468e5369bbc439908559a80c1b0f521)\n\n``` diff\n@@            master    #529   diff @@\n======================================\n  Files           17      16     -1\n  Stmts         1093    1093       \n  Branches         0       0       \n  Methods          0       0       \n======================================\n  Hit           1048    1048       \n  Partial          0       0       \n  Missed          45      45       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/34015c79b1229f13bbcc5f53aaa448e4deb6709d...4c2b87dab468e5369bbc439908559a80c1b0f521) as of [`4c2b87d`](https://codecov.io/github/formly-js/angular-formly/commit/4c2b87dab468e5369bbc439908559a80c1b0f521)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=4c2b87dab468e5369bbc439908559a80c1b0f521)\n1. `+0.36%` via [...alidationMessages.js#25...28](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyValidationMessages.js?ref=4c2b87dab468e5369bbc439908559a80c1b0f521#25) \n2. `+0.27%` via [src/test.utils.js#38...40](https://codecov.io/github/formly-js/angular-formly/src/test.utils.js?ref=4c2b87dab468e5369bbc439908559a80c1b0f521#38) \n3. `+0.27%` via [...s/formlyUsability.js#18...20](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyUsability.js?ref=4c2b87dab468e5369bbc439908559a80c1b0f521#18) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=4c2b87dab468e5369bbc439908559a80c1b0f521)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=e34c98404bedc8e085d128886a7800ab3f63d29f) is `95.93%`\n\n> Merging **#531** into **master** will increase coverage by **+0.05%** as of [`e34c984`](https://codecov.io/github/formly-js/angular-formly/commit/e34c98404bedc8e085d128886a7800ab3f63d29f)\n\n``` diff\n@@            master    #531   diff @@\n======================================\n  Files           16      16       \n  Stmts         1094    1107    +13\n  Branches         0       0       \n  Methods          0       0       \n======================================\n+ Hit           1049    1062    +13\n  Partial          0       0       \n  Missed          45      45       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/f229710d861e3276902e48937e6d8f4dd270fc4c...e34c98404bedc8e085d128886a7800ab3f63d29f) as of [`e34c984`](https://codecov.io/github/formly-js/angular-formly/commit/e34c98404bedc8e085d128886a7800ab3f63d29f)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=e34c98404bedc8e085d128886a7800ab3f63d29f)\n1. `+0.36%` via [...alidationMessages.js#25...28](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyValidationMessages.js?ref=e34c98404bedc8e085d128886a7800ab3f63d29f#25) \n2. `+0.27%` via [...s/formlyUsability.js#18...20](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyUsability.js?ref=e34c98404bedc8e085d128886a7800ab3f63d29f#18) \n3. `+0.27%` via [src/test.utils.js#38...40](https://codecov.io/github/formly-js/angular-formly/src/test.utils.js?ref=e34c98404bedc8e085d128886a7800ab3f63d29f#38) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=e34c98404bedc8e085d128886a7800ab3f63d29f)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=4d82a053641f737e75a764ad6cdc2e3edf549896) is `95.88%`\n\n> Merging **#532** into **master** will not affect coverage as of [`4d82a05`](https://codecov.io/github/formly-js/angular-formly/commit/4d82a053641f737e75a764ad6cdc2e3edf549896)\n\n``` diff\n@@            master    #532   diff @@\n======================================\n  Files           16      16       \n  Stmts         1093    1094     +1\n  Branches         0       0       \n  Methods          0       0       \n======================================\n+ Hit           1048    1049     +1\n  Partial          0       0       \n  Missed          45      45       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/8a542d5259e552c68e368ba1ea1ae5752045364c...4d82a053641f737e75a764ad6cdc2e3edf549896) as of [`4d82a05`](https://codecov.io/github/formly-js/angular-formly/commit/4d82a053641f737e75a764ad6cdc2e3edf549896)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=4d82a053641f737e75a764ad6cdc2e3edf549896)\n1. `+0.37%` via [...alidationMessages.js#25...28](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyValidationMessages.js?ref=4d82a053641f737e75a764ad6cdc2e3edf549896#25) \n2. `+0.28%` via [src/test.utils.js#38...40](https://codecov.io/github/formly-js/angular-formly/src/test.utils.js?ref=4d82a053641f737e75a764ad6cdc2e3edf549896#38) \n3. `+0.28%` via [...s/formlyUsability.js#18...20](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyUsability.js?ref=4d82a053641f737e75a764ad6cdc2e3edf549896#18) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=4d82a053641f737e75a764ad6cdc2e3edf549896)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=d64462e362832bafe3437576992ce4564206c7ed) is `95.93%`\n\n> Merging **#534** into **master** will increase coverage by **+0.05%** as of [`d64462e`](https://codecov.io/github/formly-js/angular-formly/commit/d64462e362832bafe3437576992ce4564206c7ed)\n\n``` diff\n@@            master    #534   diff @@\n======================================\n  Files           16      16       \n  Stmts         1094    1107    +13\n  Branches         0       0       \n  Methods          0       0       \n======================================\n+ Hit           1049    1062    +13\n  Partial          0       0       \n  Missed          45      45       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/f229710d861e3276902e48937e6d8f4dd270fc4c...d64462e362832bafe3437576992ce4564206c7ed) as of [`d64462e`](https://codecov.io/github/formly-js/angular-formly/commit/d64462e362832bafe3437576992ce4564206c7ed)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=d64462e362832bafe3437576992ce4564206c7ed)\n1. `+0.36%` via [...alidationMessages.js#25...28](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyValidationMessages.js?ref=d64462e362832bafe3437576992ce4564206c7ed#25) \n2. `+0.27%` via [src/test.utils.js#38...40](https://codecov.io/github/formly-js/angular-formly/src/test.utils.js?ref=d64462e362832bafe3437576992ce4564206c7ed#38) \n3. `+0.27%` via [...s/formlyUsability.js#18...20](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyUsability.js?ref=d64462e362832bafe3437576992ce4564206c7ed#18) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=d64462e362832bafe3437576992ce4564206c7ed)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=8968dfc444e50ce5a667ec84e40b5f5f9b1c10ce) is `95.93%`\n\n> Merging **#535** into **master** will increase coverage by **+0.05%** as of [`8968dfc`](https://codecov.io/github/formly-js/angular-formly/commit/8968dfc444e50ce5a667ec84e40b5f5f9b1c10ce)\n\n``` diff\n@@            master    #535   diff @@\n======================================\n  Files           16      16       \n  Stmts         1094    1107    +13\n  Branches         0       0       \n  Methods          0       0       \n======================================\n+ Hit           1049    1062    +13\n  Partial          0       0       \n  Missed          45      45       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/f229710d861e3276902e48937e6d8f4dd270fc4c...8968dfc444e50ce5a667ec84e40b5f5f9b1c10ce) as of [`8968dfc`](https://codecov.io/github/formly-js/angular-formly/commit/8968dfc444e50ce5a667ec84e40b5f5f9b1c10ce)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=8968dfc444e50ce5a667ec84e40b5f5f9b1c10ce)\n1. `+0.36%` via [...alidationMessages.js#25...28](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyValidationMessages.js?ref=8968dfc444e50ce5a667ec84e40b5f5f9b1c10ce#25) \n2. `+0.27%` via [src/test.utils.js#38...40](https://codecov.io/github/formly-js/angular-formly/src/test.utils.js?ref=8968dfc444e50ce5a667ec84e40b5f5f9b1c10ce#38) \n3. `+0.27%` via [...s/formlyUsability.js#18...20](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyUsability.js?ref=8968dfc444e50ce5a667ec84e40b5f5f9b1c10ce#18) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=8968dfc444e50ce5a667ec84e40b5f5f9b1c10ce)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=e100ac7da91a0f9cb7df663ef6d81e86fbf5a031) is `95.92%`\n\n> Merging **#541** into **master** will decrease coverage by **-0.01%** as of [`e100ac7`](https://codecov.io/github/formly-js/angular-formly/commit/e100ac7da91a0f9cb7df663ef6d81e86fbf5a031)\n\n``` diff\n@@            master    #541   diff @@\n======================================\n  Files           16      16       \n  Stmts         1107    1103     -4\n  Branches         0       0       \n  Methods          0       0       \n======================================\n- Hit           1062    1058     -4\n  Partial          0       0       \n  Missed          45      45       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/54fc0d3b68553e4f11bad7bef3663e6cc14a7698...e100ac7da91a0f9cb7df663ef6d81e86fbf5a031) as of [`e100ac7`](https://codecov.io/github/formly-js/angular-formly/commit/e100ac7da91a0f9cb7df663ef6d81e86fbf5a031)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=e100ac7da91a0f9cb7df663ef6d81e86fbf5a031)\n1. `+0.36%` via [...alidationMessages.js#25...28](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyValidationMessages.js?ref=e100ac7da91a0f9cb7df663ef6d81e86fbf5a031#25) \n2. `+0.27%` via [src/test.utils.js#38...40](https://codecov.io/github/formly-js/angular-formly/src/test.utils.js?ref=e100ac7da91a0f9cb7df663ef6d81e86fbf5a031#38) \n3. `+0.27%` via [...s/formlyUsability.js#18...20](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyUsability.js?ref=e100ac7da91a0f9cb7df663ef6d81e86fbf5a031#18) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=e100ac7da91a0f9cb7df663ef6d81e86fbf5a031)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=ffff26c77213ba357ed0258cce2ac0997357cb8d) is `95.92%`\n\n> Merging **#545** into **master** will not affect coverage as of [`ffff26c`](https://codecov.io/github/formly-js/angular-formly/commit/ffff26c77213ba357ed0258cce2ac0997357cb8d)\n\n``` diff\n@@            master    #545   diff @@\n======================================\n  Files           16      16       \n  Stmts         1103    1103       \n  Branches         0       0       \n  Methods          0       0       \n======================================\n  Hit           1058    1058       \n  Partial          0       0       \n  Missed          45      45       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/c5c826467f87a4ad0e84ce9f8ce88cc93480267f...ffff26c77213ba357ed0258cce2ac0997357cb8d) as of [`ffff26c`](https://codecov.io/github/formly-js/angular-formly/commit/ffff26c77213ba357ed0258cce2ac0997357cb8d)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=ffff26c77213ba357ed0258cce2ac0997357cb8d)\n1. `+0.36%` via [...alidationMessages.js#25...28](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyValidationMessages.js?ref=ffff26c77213ba357ed0258cce2ac0997357cb8d#25) \n2. `+0.27%` via [src/test.utils.js#38...40](https://codecov.io/github/formly-js/angular-formly/src/test.utils.js?ref=ffff26c77213ba357ed0258cce2ac0997357cb8d#38) \n3. `+0.27%` via [...s/formlyUsability.js#18...20](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyUsability.js?ref=ffff26c77213ba357ed0258cce2ac0997357cb8d#18) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=ffff26c77213ba357ed0258cce2ac0997357cb8d)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=fc42b9be2f901fabb78c088a6cd09be5efc0f89c) is `95.92%`\n\n> Merging **#547** into **master** will not affect coverage as of [`fc42b9b`](https://codecov.io/github/formly-js/angular-formly/commit/fc42b9be2f901fabb78c088a6cd09be5efc0f89c)\n\n``` diff\n@@            master    #547   diff @@\n======================================\n  Files           16      16       \n  Stmts         1103    1103       \n  Branches         0       0       \n  Methods          0       0       \n======================================\n  Hit           1058    1058       \n  Partial          0       0       \n  Missed          45      45       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/c5c826467f87a4ad0e84ce9f8ce88cc93480267f...fc42b9be2f901fabb78c088a6cd09be5efc0f89c) as of [`fc42b9b`](https://codecov.io/github/formly-js/angular-formly/commit/fc42b9be2f901fabb78c088a6cd09be5efc0f89c)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=fc42b9be2f901fabb78c088a6cd09be5efc0f89c)\n1. `+0.36%` via [...alidationMessages.js#25...28](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyValidationMessages.js?ref=fc42b9be2f901fabb78c088a6cd09be5efc0f89c#25) \n2. `+0.27%` via [...s/formlyUsability.js#18...20](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyUsability.js?ref=fc42b9be2f901fabb78c088a6cd09be5efc0f89c#18) \n3. `+0.27%` via [src/test.utils.js#38...40](https://codecov.io/github/formly-js/angular-formly/src/test.utils.js?ref=fc42b9be2f901fabb78c088a6cd09be5efc0f89c#38) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=fc42b9be2f901fabb78c088a6cd09be5efc0f89c)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=f27e3b37d93e30ead171ea9de9f0053d3a81a3b7) is `95.93%`\n\n> Merging **#553** into **master** will increase coverage by **+0.01%** as of [`f27e3b3`](https://codecov.io/github/formly-js/angular-formly/commit/f27e3b37d93e30ead171ea9de9f0053d3a81a3b7)\n\n``` diff\n@@            master    #553   diff @@\n======================================\n  Files           16      16       \n  Stmts         1103    1106     +3\n  Branches         0       0       \n  Methods          0       0       \n======================================\n+ Hit           1058    1061     +3\n  Partial          0       0       \n  Missed          45      45       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/46cfa65e20b17aad55cfae869b1e27dd7647ca84...f27e3b37d93e30ead171ea9de9f0053d3a81a3b7) as of [`f27e3b3`](https://codecov.io/github/formly-js/angular-formly/commit/f27e3b37d93e30ead171ea9de9f0053d3a81a3b7)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=f27e3b37d93e30ead171ea9de9f0053d3a81a3b7)\n1. `+0.36%` via [...alidationMessages.js#25...28](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyValidationMessages.js?ref=f27e3b37d93e30ead171ea9de9f0053d3a81a3b7#25) \n2. `+0.27%` via [src/test.utils.js#38...40](https://codecov.io/github/formly-js/angular-formly/src/test.utils.js?ref=f27e3b37d93e30ead171ea9de9f0053d3a81a3b7#38) \n3. `+0.27%` via [...s/formlyUsability.js#18...20](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyUsability.js?ref=f27e3b37d93e30ead171ea9de9f0053d3a81a3b7#18) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=f27e3b37d93e30ead171ea9de9f0053d3a81a3b7)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=a741c8826bb6fad3836502e4e2b94318e2722366) is `95.93%`\n\n> Merging **#557** into **master** will not affect coverage as of [`a741c88`](https://codecov.io/github/formly-js/angular-formly/commit/a741c8826bb6fad3836502e4e2b94318e2722366)\n\n``` diff\n@@            master    #557   diff @@\n======================================\n  Files           16      16       \n  Stmts         1106    1106       \n  Branches         0       0       \n  Methods          0       0       \n======================================\n  Hit           1061    1061       \n  Partial          0       0       \n  Missed          45      45       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/e0a82a216093ff09edf608947ba457e422aca9b0...a741c8826bb6fad3836502e4e2b94318e2722366) as of [`a741c88`](https://codecov.io/github/formly-js/angular-formly/commit/a741c8826bb6fad3836502e4e2b94318e2722366)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=a741c8826bb6fad3836502e4e2b94318e2722366)\n1. `+0.36%` via [...alidationMessages.js#25...28](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyValidationMessages.js?ref=a741c8826bb6fad3836502e4e2b94318e2722366#25) \n2. `+0.27%` via [...s/formlyUsability.js#18...20](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyUsability.js?ref=a741c8826bb6fad3836502e4e2b94318e2722366#18) \n3. `+0.27%` via [src/test.utils.js#38...40](https://codecov.io/github/formly-js/angular-formly/src/test.utils.js?ref=a741c8826bb6fad3836502e4e2b94318e2722366#38) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=a741c8826bb6fad3836502e4e2b94318e2722366)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=7968219cd105a58dd2b889214740adaaca4a26af) is `95.93%`\n\n> Merging **#558** into **master** will not affect coverage as of [`7968219`](https://codecov.io/github/formly-js/angular-formly/commit/7968219cd105a58dd2b889214740adaaca4a26af)\n\n``` diff\n@@            master    #558   diff @@\n======================================\n  Files           16      16       \n  Stmts         1106    1106       \n  Branches         0       0       \n  Methods          0       0       \n======================================\n  Hit           1061    1061       \n  Partial          0       0       \n  Missed          45      45       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/61db46e11a8438d25034d239571436cabf58fbe9...7968219cd105a58dd2b889214740adaaca4a26af) as of [`7968219`](https://codecov.io/github/formly-js/angular-formly/commit/7968219cd105a58dd2b889214740adaaca4a26af)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=7968219cd105a58dd2b889214740adaaca4a26af)\n1. `+0.36%` via [...alidationMessages.js#25...28](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyValidationMessages.js?ref=7968219cd105a58dd2b889214740adaaca4a26af#25) \n2. `+0.27%` via [...s/formlyUsability.js#18...20](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyUsability.js?ref=7968219cd105a58dd2b889214740adaaca4a26af#18) \n3. `+0.27%` via [src/test.utils.js#38...40](https://codecov.io/github/formly-js/angular-formly/src/test.utils.js?ref=7968219cd105a58dd2b889214740adaaca4a26af#38) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=7968219cd105a58dd2b889214740adaaca4a26af)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=60a079a3146538da5694b9426337a958e5c32d09) is `95.93%`\n\n> Merging **#559** into **master** will not affect coverage as of [`60a079a`](https://codecov.io/github/formly-js/angular-formly/commit/60a079a3146538da5694b9426337a958e5c32d09)\n\n``` diff\n@@            master    #559   diff @@\n======================================\n  Files           16      16       \n  Stmts         1106    1106       \n  Branches         0       0       \n  Methods          0       0       \n======================================\n  Hit           1061    1061       \n  Partial          0       0       \n  Missed          45      45       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/61db46e11a8438d25034d239571436cabf58fbe9...60a079a3146538da5694b9426337a958e5c32d09) as of [`60a079a`](https://codecov.io/github/formly-js/angular-formly/commit/60a079a3146538da5694b9426337a958e5c32d09)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=60a079a3146538da5694b9426337a958e5c32d09)\n1. `+0.36%` via [...alidationMessages.js#25...28](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyValidationMessages.js?ref=60a079a3146538da5694b9426337a958e5c32d09#25) \n2. `+0.27%` via [...s/formlyUsability.js#18...20](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyUsability.js?ref=60a079a3146538da5694b9426337a958e5c32d09#18) \n3. `+0.27%` via [src/test.utils.js#38...40](https://codecov.io/github/formly-js/angular-formly/src/test.utils.js?ref=60a079a3146538da5694b9426337a958e5c32d09#38) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=60a079a3146538da5694b9426337a958e5c32d09)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=e9666923e939167d5a8d53c178b6bb30c0ee3131) is `95.93%`\n\n> Merging **#569** into **master** will not affect coverage as of [`e966692`](https://codecov.io/github/formly-js/angular-formly/commit/e9666923e939167d5a8d53c178b6bb30c0ee3131)\n\n``` diff\n@@            master    #569   diff @@\n======================================\n  Files           16      16       \n  Stmts         1106    1106       \n  Branches         0       0       \n  Methods          0       0       \n======================================\n  Hit           1061    1061       \n  Partial          0       0       \n  Missed          45      45       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/61db46e11a8438d25034d239571436cabf58fbe9...e9666923e939167d5a8d53c178b6bb30c0ee3131) as of [`e966692`](https://codecov.io/github/formly-js/angular-formly/commit/e9666923e939167d5a8d53c178b6bb30c0ee3131)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=e9666923e939167d5a8d53c178b6bb30c0ee3131)\n1. `+0.36%` via [...alidationMessages.js#25...28](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyValidationMessages.js?ref=e9666923e939167d5a8d53c178b6bb30c0ee3131#25) \n2. `+0.27%` via [src/test.utils.js#38...40](https://codecov.io/github/formly-js/angular-formly/src/test.utils.js?ref=e9666923e939167d5a8d53c178b6bb30c0ee3131#38) \n3. `+0.27%` via [...s/formlyUsability.js#18...20](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyUsability.js?ref=e9666923e939167d5a8d53c178b6bb30c0ee3131#18) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=e9666923e939167d5a8d53c178b6bb30c0ee3131)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=9129dd2bd4c991f88eecc71fe85eda85dc2a1a77) is `95.93%`\n\n> Merging **#570** into **master** will not affect coverage as of [`9129dd2`](https://codecov.io/github/formly-js/angular-formly/commit/9129dd2bd4c991f88eecc71fe85eda85dc2a1a77)\n\n``` diff\n@@            master    #570   diff @@\n======================================\n  Files           16      16       \n  Stmts         1106    1106       \n  Branches         0       0       \n  Methods          0       0       \n======================================\n  Hit           1061    1061       \n  Partial          0       0       \n  Missed          45      45       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/61db46e11a8438d25034d239571436cabf58fbe9...9129dd2bd4c991f88eecc71fe85eda85dc2a1a77) as of [`9129dd2`](https://codecov.io/github/formly-js/angular-formly/commit/9129dd2bd4c991f88eecc71fe85eda85dc2a1a77)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=9129dd2bd4c991f88eecc71fe85eda85dc2a1a77)\n1. `+0.36%` via [...alidationMessages.js#25...28](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyValidationMessages.js?ref=9129dd2bd4c991f88eecc71fe85eda85dc2a1a77#25) \n2. `+0.27%` via [...s/formlyUsability.js#18...20](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyUsability.js?ref=9129dd2bd4c991f88eecc71fe85eda85dc2a1a77#18) \n3. `+0.27%` via [src/test.utils.js#38...40](https://codecov.io/github/formly-js/angular-formly/src/test.utils.js?ref=9129dd2bd4c991f88eecc71fe85eda85dc2a1a77#38) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=9129dd2bd4c991f88eecc71fe85eda85dc2a1a77)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=07e3ff6588059e0b4936c0e302ed6a8db1cbafd8) is `95.93%`\n\n> Merging **#572** into **master** will not affect coverage as of [`07e3ff6`](https://codecov.io/github/formly-js/angular-formly/commit/07e3ff6588059e0b4936c0e302ed6a8db1cbafd8)\n\n``` diff\n@@            master    #572   diff @@\n======================================\n  Files           16      16       \n  Stmts         1106    1108     +2\n  Branches         0       0       \n  Methods          0       0       \n======================================\n+ Hit           1061    1063     +2\n  Partial          0       0       \n  Missed          45      45       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/917ec263ddcc4902fa2cb9dc167da0734f9d5ed6...07e3ff6588059e0b4936c0e302ed6a8db1cbafd8) as of [`07e3ff6`](https://codecov.io/github/formly-js/angular-formly/commit/07e3ff6588059e0b4936c0e302ed6a8db1cbafd8)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=07e3ff6588059e0b4936c0e302ed6a8db1cbafd8)\n1. `+0.36%` via [...alidationMessages.js#25...28](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyValidationMessages.js?ref=07e3ff6588059e0b4936c0e302ed6a8db1cbafd8#25) \n2. `+0.27%` via [...s/formlyUsability.js#18...20](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyUsability.js?ref=07e3ff6588059e0b4936c0e302ed6a8db1cbafd8#18) \n3. `+0.27%` via [src/test.utils.js#38...40](https://codecov.io/github/formly-js/angular-formly/src/test.utils.js?ref=07e3ff6588059e0b4936c0e302ed6a8db1cbafd8#38) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=07e3ff6588059e0b4936c0e302ed6a8db1cbafd8)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=ccb8f27f962c56e5339a05edd58c8bf2a806e59d) is `95.87%`\n\n> Merging **#573** into **master** will decrease coverage by **-0.06%** as of [`ccb8f27`](https://codecov.io/github/formly-js/angular-formly/commit/ccb8f27f962c56e5339a05edd58c8bf2a806e59d)\n\n``` diff\n@@            master    #573   diff @@\n======================================\n  Files           16      16       \n  Stmts         1108    1114     +6\n  Branches         0       0       \n  Methods          0       0       \n======================================\n+ Hit           1063    1068     +5\n  Partial          0       0       \n- Missed          45      46     +1\n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/55a915aa5dcd3d29762c2b31a7a871cd2ae53621...ccb8f27f962c56e5339a05edd58c8bf2a806e59d) as of [`ccb8f27`](https://codecov.io/github/formly-js/angular-formly/commit/ccb8f27f962c56e5339a05edd58c8bf2a806e59d)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=ccb8f27f962c56e5339a05edd58c8bf2a806e59d)\n1. `+0.35%` via [...alidationMessages.js#25...28](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyValidationMessages.js?ref=ccb8f27f962c56e5339a05edd58c8bf2a806e59d#25) \n2. `+0.27%` via [...s/formlyUsability.js#18...20](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyUsability.js?ref=ccb8f27f962c56e5339a05edd58c8bf2a806e59d#18) \n3. `+0.27%` via [src/test.utils.js#38...40](https://codecov.io/github/formly-js/angular-formly/src/test.utils.js?ref=ccb8f27f962c56e5339a05edd58c8bf2a806e59d#38) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=ccb8f27f962c56e5339a05edd58c8bf2a806e59d)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=848fa675c13cbb03d0065bb30a8feb55d8635424) is `95.88%`\n\n> Merging **#578** into **master** will increase coverage by **+0.01%** as of [`848fa67`](https://codecov.io/github/formly-js/angular-formly/commit/848fa675c13cbb03d0065bb30a8feb55d8635424)\n\n``` diff\n@@            master    #578   diff @@\n======================================\n  Files           16      16       \n  Stmts         1114    1117     +3\n  Branches         0       0       \n  Methods          0       0       \n======================================\n+ Hit           1068    1071     +3\n  Partial          0       0       \n  Missed          46      46       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/8648c16c0a927ccbdf56861280a3680396041402...848fa675c13cbb03d0065bb30a8feb55d8635424) as of [`848fa67`](https://codecov.io/github/formly-js/angular-formly/commit/848fa675c13cbb03d0065bb30a8feb55d8635424)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=848fa675c13cbb03d0065bb30a8feb55d8635424)\n1. `+0.35%` via [...alidationMessages.js#25...28](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyValidationMessages.js?ref=848fa675c13cbb03d0065bb30a8feb55d8635424#25) \n2. `+0.27%` via [...s/formlyUsability.js#18...20](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyUsability.js?ref=848fa675c13cbb03d0065bb30a8feb55d8635424#18) \n3. `+0.27%` via [src/test.utils.js#38...40](https://codecov.io/github/formly-js/angular-formly/src/test.utils.js?ref=848fa675c13cbb03d0065bb30a8feb55d8635424#38) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=848fa675c13cbb03d0065bb30a8feb55d8635424)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=8a510640734e5544cf9dd1a8e9cc34873f131806) is `95.88%`\n\n> Merging **#582** into **master** will not affect coverage as of [`8a51064`](https://codecov.io/github/formly-js/angular-formly/commit/8a510640734e5544cf9dd1a8e9cc34873f131806)\n\n``` diff\n@@            master    #582   diff @@\n======================================\n  Files           16      16       \n  Stmts         1117    1117       \n  Branches         0       0       \n  Methods          0       0       \n======================================\n  Hit           1071    1071       \n  Partial          0       0       \n  Missed          46      46       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/1e22d842e5b38987e6a7cfe49ac31a3b9ee4c1eb...8a510640734e5544cf9dd1a8e9cc34873f131806) as of [`8a51064`](https://codecov.io/github/formly-js/angular-formly/commit/8a510640734e5544cf9dd1a8e9cc34873f131806)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=8a510640734e5544cf9dd1a8e9cc34873f131806)\n1. `+0.35%` via [...alidationMessages.js#25...28](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyValidationMessages.js?ref=8a510640734e5544cf9dd1a8e9cc34873f131806#25) \n2. `+0.27%` via [src/test.utils.js#38...40](https://codecov.io/github/formly-js/angular-formly/src/test.utils.js?ref=8a510640734e5544cf9dd1a8e9cc34873f131806#38) \n3. `+0.27%` via [...s/formlyUsability.js#18...20](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyUsability.js?ref=8a510640734e5544cf9dd1a8e9cc34873f131806#18) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=8a510640734e5544cf9dd1a8e9cc34873f131806)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=e97f157e3ea7a30cccca391038265df821c7fbc1) is `95.88%`\n\n> Merging **#583** into **master** will not affect coverage as of [`e97f157`](https://codecov.io/github/formly-js/angular-formly/commit/e97f157e3ea7a30cccca391038265df821c7fbc1)\n\n``` diff\n@@            master    #583   diff @@\n======================================\n  Files           16      16       \n  Stmts         1117    1117       \n  Branches         0       0       \n  Methods          0       0       \n======================================\n  Hit           1071    1071       \n  Partial          0       0       \n  Missed          46      46       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/1e22d842e5b38987e6a7cfe49ac31a3b9ee4c1eb...e97f157e3ea7a30cccca391038265df821c7fbc1) as of [`e97f157`](https://codecov.io/github/formly-js/angular-formly/commit/e97f157e3ea7a30cccca391038265df821c7fbc1)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=e97f157e3ea7a30cccca391038265df821c7fbc1)\n1. `+0.35%` via [...alidationMessages.js#25...28](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyValidationMessages.js?ref=e97f157e3ea7a30cccca391038265df821c7fbc1#25) \n2. `+0.27%` via [...s/formlyUsability.js#18...20](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyUsability.js?ref=e97f157e3ea7a30cccca391038265df821c7fbc1#18) \n3. `+0.27%` via [src/test.utils.js#38...40](https://codecov.io/github/formly-js/angular-formly/src/test.utils.js?ref=e97f157e3ea7a30cccca391038265df821c7fbc1#38) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=e97f157e3ea7a30cccca391038265df821c7fbc1)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=33e97fc48e003002d448543d6f31e1e277d41b7c) is `95.88%`\n\n> Merging **#591** into **master** will not affect coverage as of [`33e97fc`](https://codecov.io/github/formly-js/angular-formly/commit/33e97fc48e003002d448543d6f31e1e277d41b7c)\n\n``` diff\n@@            master    #591   diff @@\n======================================\n  Files           16      16       \n  Stmts         1117    1117       \n  Branches         0       0       \n  Methods          0       0       \n======================================\n  Hit           1071    1071       \n  Partial          0       0       \n  Missed          46      46       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/d07acb0f5b2b079b3ac89116f6457394af76541c...33e97fc48e003002d448543d6f31e1e277d41b7c) as of [`33e97fc`](https://codecov.io/github/formly-js/angular-formly/commit/33e97fc48e003002d448543d6f31e1e277d41b7c)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=33e97fc48e003002d448543d6f31e1e277d41b7c)\n1. `+0.35%` via [...alidationMessages.js#25...28](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyValidationMessages.js?ref=33e97fc48e003002d448543d6f31e1e277d41b7c#25) \n2. `+0.27%` via [src/test.utils.js#38...40](https://codecov.io/github/formly-js/angular-formly/src/test.utils.js?ref=33e97fc48e003002d448543d6f31e1e277d41b7c#38) \n3. `+0.27%` via [...s/formlyUsability.js#18...20](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyUsability.js?ref=33e97fc48e003002d448543d6f31e1e277d41b7c#18) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=33e97fc48e003002d448543d6f31e1e277d41b7c)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=4dc4c8676f4895450361671b6d94a5811ba24776) is `95.98%`\n\n> Merging **#599** into **master** will increase coverage by **+0.10%** as of [`4dc4c86`](https://codecov.io/github/formly-js/angular-formly/commit/4dc4c8676f4895450361671b6d94a5811ba24776)\n\n``` diff\n@@            master    #599   diff @@\n======================================\n  Files           16      16       \n  Stmts         1117    1145    +28\n  Branches         0       0       \n  Methods          0       0       \n======================================\n+ Hit           1071    1099    +28\n  Partial          0       0       \n  Missed          46      46       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/5aa126e8d5ef92cf6e460eaeb8db219d5c4c0678...4dc4c8676f4895450361671b6d94a5811ba24776) as of [`4dc4c86`](https://codecov.io/github/formly-js/angular-formly/commit/4dc4c8676f4895450361671b6d94a5811ba24776)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=4dc4c8676f4895450361671b6d94a5811ba24776)\n1. `+0.35%` via [...alidationMessages.js#25...28](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyValidationMessages.js?ref=4dc4c8676f4895450361671b6d94a5811ba24776#25) \n2. `+0.26%` via [...s/formlyUsability.js#18...20](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyUsability.js?ref=4dc4c8676f4895450361671b6d94a5811ba24776#18) \n3. `+0.26%` via [src/test.utils.js#38...40](https://codecov.io/github/formly-js/angular-formly/src/test.utils.js?ref=4dc4c8676f4895450361671b6d94a5811ba24776#38) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=4dc4c8676f4895450361671b6d94a5811ba24776)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=991c2fe042b9361615f783adaa34d3722c86fb3a) is `95.88%`\n\n> Merging **#603** into **master** will not affect coverage as of [`991c2fe`](https://codecov.io/github/formly-js/angular-formly/commit/991c2fe042b9361615f783adaa34d3722c86fb3a)\n\n``` diff\n@@            master    #603   diff @@\n======================================\n  Files           16      16       \n  Stmts         1117    1117       \n  Branches         0       0       \n  Methods          0       0       \n======================================\n  Hit           1071    1071       \n  Partial          0       0       \n  Missed          46      46       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/5dbfbb8ecb3018937f42e3c795eb0000cb37e824...991c2fe042b9361615f783adaa34d3722c86fb3a) as of [`991c2fe`](https://codecov.io/github/formly-js/angular-formly/commit/991c2fe042b9361615f783adaa34d3722c86fb3a)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=991c2fe042b9361615f783adaa34d3722c86fb3a)\n1. `+0.35%` via [...alidationMessages.js#25...28](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyValidationMessages.js?ref=991c2fe042b9361615f783adaa34d3722c86fb3a#25) \n2. `+0.27%` via [src/test.utils.js#38...40](https://codecov.io/github/formly-js/angular-formly/src/test.utils.js?ref=991c2fe042b9361615f783adaa34d3722c86fb3a#38) \n3. `+0.27%` via [...s/formlyUsability.js#18...20](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyUsability.js?ref=991c2fe042b9361615f783adaa34d3722c86fb3a#18) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=991c2fe042b9361615f783adaa34d3722c86fb3a)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=80a6bb1300003029be60d80c11bc80a67c5d63f2) is `95.90%`\n\n> Merging **#610** into **master** will increase coverage by **+0.02%** as of [`80a6bb1`](https://codecov.io/github/formly-js/angular-formly/commit/80a6bb1300003029be60d80c11bc80a67c5d63f2)\n\n``` diff\n@@            master   #610   diff @@\n=====================================\n  Files           16     16       \n  Stmts         1117   1122     +5\n  Branches         0      0       \n  Methods          0      0       \n=====================================\n+ Hit           1071   1076     +5\n  Partial          0      0       \n  Missed          46     46       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/5aa126e8d5ef92cf6e460eaeb8db219d5c4c0678...80a6bb1300003029be60d80c11bc80a67c5d63f2) as of [`80a6bb1`](https://codecov.io/github/formly-js/angular-formly/commit/80a6bb1300003029be60d80c11bc80a67c5d63f2)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=80a6bb1300003029be60d80c11bc80a67c5d63f2)\n1. `+0.35%` via [...alidationMessages.js#25...28](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyValidationMessages.js?ref=80a6bb1300003029be60d80c11bc80a67c5d63f2#25) \n2. `+0.26%` via [...s/formlyUsability.js#18...20](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyUsability.js?ref=80a6bb1300003029be60d80c11bc80a67c5d63f2#18) \n3. `+0.26%` via [src/test.utils.js#38...40](https://codecov.io/github/formly-js/angular-formly/src/test.utils.js?ref=80a6bb1300003029be60d80c11bc80a67c5d63f2#38) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=80a6bb1300003029be60d80c11bc80a67c5d63f2)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=e8736a029a1d8f64d9285d0177fba6c9267b5656) is `96.00%`\n\n> Merging **#622** into **master** will not affect coverage as of [`e8736a0`](https://codecov.io/github/formly-js/angular-formly/commit/e8736a029a1d8f64d9285d0177fba6c9267b5656)\n\n``` diff\n@@            master   #622   diff @@\n=====================================\n  Files           16     16       \n  Stmts         1150   1150       \n  Branches         0      0       \n  Methods          0      0       \n=====================================\n  Hit           1104   1104       \n  Partial          0      0       \n  Missed          46     46       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/8042d2ac8ef3f78f473c7504af4456832e5ae221...e8736a029a1d8f64d9285d0177fba6c9267b5656) as of [`e8736a0`](https://codecov.io/github/formly-js/angular-formly/commit/e8736a029a1d8f64d9285d0177fba6c9267b5656)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=e8736a029a1d8f64d9285d0177fba6c9267b5656)\n1. `+0.34%` via [...alidationMessages.js#25...28](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyValidationMessages.js?ref=e8736a029a1d8f64d9285d0177fba6c9267b5656#25) \n2. `+0.26%` via [...s/formlyUsability.js#18...20](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyUsability.js?ref=e8736a029a1d8f64d9285d0177fba6c9267b5656#18) \n3. `+0.26%` via [src/test.utils.js#38...40](https://codecov.io/github/formly-js/angular-formly/src/test.utils.js?ref=e8736a029a1d8f64d9285d0177fba6c9267b5656#38) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=e8736a029a1d8f64d9285d0177fba6c9267b5656)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=92252aa640036e0f32266ff2b8043a1211d657fd) is `96.00%`\n\n> Merging **#624** into **master** will not affect coverage as of [`92252aa`](https://codecov.io/github/formly-js/angular-formly/commit/92252aa640036e0f32266ff2b8043a1211d657fd)\n\n``` diff\n@@            master   #624   diff @@\n=====================================\n  Files           16     16       \n  Stmts         1150   1150       \n  Branches         0      0       \n  Methods          0      0       \n=====================================\n  Hit           1104   1104       \n  Partial          0      0       \n  Missed          46     46       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/8042d2ac8ef3f78f473c7504af4456832e5ae221...92252aa640036e0f32266ff2b8043a1211d657fd) as of [`92252aa`](https://codecov.io/github/formly-js/angular-formly/commit/92252aa640036e0f32266ff2b8043a1211d657fd)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=92252aa640036e0f32266ff2b8043a1211d657fd)\n1. `+0.34%` via [...alidationMessages.js#25...28](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyValidationMessages.js?ref=92252aa640036e0f32266ff2b8043a1211d657fd#25) \n2. `+0.26%` via [src/test.utils.js#38...40](https://codecov.io/github/formly-js/angular-formly/src/test.utils.js?ref=92252aa640036e0f32266ff2b8043a1211d657fd#38) \n3. `+0.26%` via [...s/formlyUsability.js#18...20](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyUsability.js?ref=92252aa640036e0f32266ff2b8043a1211d657fd#18) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=92252aa640036e0f32266ff2b8043a1211d657fd)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=b191382869be272b939066b1c057865bc4ea9dfd) is `96.00%`\n\n> Merging **#625** into **master** will not affect coverage as of [`b191382`](https://codecov.io/github/formly-js/angular-formly/commit/b191382869be272b939066b1c057865bc4ea9dfd)\n\n``` diff\n@@            master   #625   diff @@\n=====================================\n  Files           16     16       \n  Stmts         1150   1150       \n  Branches         0      0       \n  Methods          0      0       \n=====================================\n  Hit           1104   1104       \n  Partial          0      0       \n  Missed          46     46       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/9fabf282dea97b6efc579176348fd8e3f0843d77...b191382869be272b939066b1c057865bc4ea9dfd) as of [`b191382`](https://codecov.io/github/formly-js/angular-formly/commit/b191382869be272b939066b1c057865bc4ea9dfd)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=b191382869be272b939066b1c057865bc4ea9dfd)\n1. `+0.34%` via [...alidationMessages.js#25...28](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyValidationMessages.js?ref=b191382869be272b939066b1c057865bc4ea9dfd#25) \n2. `+0.26%` via [...s/formlyUsability.js#18...20](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyUsability.js?ref=b191382869be272b939066b1c057865bc4ea9dfd#18) \n3. `+0.26%` via [src/test.utils.js#38...40](https://codecov.io/github/formly-js/angular-formly/src/test.utils.js?ref=b191382869be272b939066b1c057865bc4ea9dfd#38) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=b191382869be272b939066b1c057865bc4ea9dfd)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=bdea08d102fd36c9ccabe233c3e12f99d4e1c62d) is `96.00%`\n\n> Merging **#626** into **master** will not affect coverage as of [`bdea08d`](https://codecov.io/github/formly-js/angular-formly/commit/bdea08d102fd36c9ccabe233c3e12f99d4e1c62d)\n\n``` diff\n@@            master   #626   diff @@\n=====================================\n  Files           16     16       \n  Stmts         1150   1150       \n  Branches         0      0       \n  Methods          0      0       \n=====================================\n  Hit           1104   1104       \n  Partial          0      0       \n  Missed          46     46       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/f8c972fcdd919b470e159d7a1c305ecacf6c3f7e...bdea08d102fd36c9ccabe233c3e12f99d4e1c62d) as of [`bdea08d`](https://codecov.io/github/formly-js/angular-formly/commit/bdea08d102fd36c9ccabe233c3e12f99d4e1c62d)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=bdea08d102fd36c9ccabe233c3e12f99d4e1c62d)\n1. `+0.34%` via [...alidationMessages.js#25...28](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyValidationMessages.js?ref=bdea08d102fd36c9ccabe233c3e12f99d4e1c62d#25) \n2. `+0.26%` via [...s/formlyUsability.js#18...20](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyUsability.js?ref=bdea08d102fd36c9ccabe233c3e12f99d4e1c62d#18) \n3. `+0.26%` via [src/test.utils.js#38...40](https://codecov.io/github/formly-js/angular-formly/src/test.utils.js?ref=bdea08d102fd36c9ccabe233c3e12f99d4e1c62d#38) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=bdea08d102fd36c9ccabe233c3e12f99d4e1c62d)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=9d1bbbc885b1a4600b7a89c505e1a3a519dd1bd7) is `96.00%`\n\n> Merging **#628** into **master** will not affect coverage as of [`9d1bbbc`](https://codecov.io/github/formly-js/angular-formly/commit/9d1bbbc885b1a4600b7a89c505e1a3a519dd1bd7)\n\n``` diff\n@@            master   #628   diff @@\n=====================================\n  Files           16     16       \n  Stmts         1150   1152     +2\n  Branches         0      0       \n  Methods          0      0       \n=====================================\n+ Hit           1104   1106     +2\n  Partial          0      0       \n  Missed          46     46       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/f8c972fcdd919b470e159d7a1c305ecacf6c3f7e...9d1bbbc885b1a4600b7a89c505e1a3a519dd1bd7) as of [`9d1bbbc`](https://codecov.io/github/formly-js/angular-formly/commit/9d1bbbc885b1a4600b7a89c505e1a3a519dd1bd7)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=9d1bbbc885b1a4600b7a89c505e1a3a519dd1bd7)\n1. `+0.35%` via [...alidationMessages.js#25...28](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyValidationMessages.js?ref=9d1bbbc885b1a4600b7a89c505e1a3a519dd1bd7#25) \n2. `+0.26%` via [...s/formlyUsability.js#18...20](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyUsability.js?ref=9d1bbbc885b1a4600b7a89c505e1a3a519dd1bd7#18) \n3. `+0.26%` via [src/test.utils.js#38...40](https://codecov.io/github/formly-js/angular-formly/src/test.utils.js?ref=9d1bbbc885b1a4600b7a89c505e1a3a519dd1bd7#38) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=9d1bbbc885b1a4600b7a89c505e1a3a519dd1bd7)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=d1b47ba1e2e57802f527268f2a0d6543c714a5a1) is `96.03%`\n\n> Merging **#639** into **master** will increase coverage by **+0.02%** as of [`d1b47ba`](https://codecov.io/github/formly-js/angular-formly/commit/d1b47ba1e2e57802f527268f2a0d6543c714a5a1)\n\n``` diff\n@@            master    #639   diff @@\n======================================\n  Files           16      16       \n  Stmts         1155    1160     +5\n  Branches         0       0       \n  Methods          0       0       \n======================================\n+ Hit           1109    1114     +5\n  Partial          0       0       \n  Missed          46      46       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/e993e14de8e062f863093d673ee791e33594020b...d1b47ba1e2e57802f527268f2a0d6543c714a5a1) as of [`d1b47ba`](https://codecov.io/github/formly-js/angular-formly/commit/d1b47ba1e2e57802f527268f2a0d6543c714a5a1)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=d1b47ba1e2e57802f527268f2a0d6543c714a5a1)\n1. `+0.34%` via [...alidationMessages.js#25...28](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyValidationMessages.js?ref=d1b47ba1e2e57802f527268f2a0d6543c714a5a1#25) \n2. `+0.26%` via [src/test.utils.js#38...40](https://codecov.io/github/formly-js/angular-formly/src/test.utils.js?ref=d1b47ba1e2e57802f527268f2a0d6543c714a5a1#38) \n3. `+0.26%` via [...s/formlyUsability.js#18...20](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyUsability.js?ref=d1b47ba1e2e57802f527268f2a0d6543c714a5a1#18) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=d1b47ba1e2e57802f527268f2a0d6543c714a5a1)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=505fc8fcd542e24c8486d06c30f7eebf14821843) is `96.01%`\n\n> Merging **#641** into **master** will increase coverage by **+0.01%** as of [`505fc8f`](https://codecov.io/github/formly-js/angular-formly/commit/505fc8fcd542e24c8486d06c30f7eebf14821843)\n\n``` diff\n@@            master    #641   diff @@\n======================================\n  Files           16      16       \n  Stmts         1150    1155     +5\n  Branches         0       0       \n  Methods          0       0       \n======================================\n+ Hit           1104    1109     +5\n  Partial          0       0       \n  Missed          46      46       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/eae422f9e449c7db69fde27e14ba9659e137c392...505fc8fcd542e24c8486d06c30f7eebf14821843) as of [`505fc8f`](https://codecov.io/github/formly-js/angular-formly/commit/505fc8fcd542e24c8486d06c30f7eebf14821843)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=505fc8fcd542e24c8486d06c30f7eebf14821843)\n1. `+0.35%` via [...alidationMessages.js#25...28](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyValidationMessages.js?ref=505fc8fcd542e24c8486d06c30f7eebf14821843#25) \n2. `+0.26%` via [...s/formlyUsability.js#18...20](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyUsability.js?ref=505fc8fcd542e24c8486d06c30f7eebf14821843#18) \n3. `+0.26%` via [src/test.utils.js#38...40](https://codecov.io/github/formly-js/angular-formly/src/test.utils.js?ref=505fc8fcd542e24c8486d06c30f7eebf14821843#38) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=505fc8fcd542e24c8486d06c30f7eebf14821843)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=02806689c07b73bad9120684824fc3bb4fffc8e7) is `96.04%`\n\n> Merging **#653** into **master** will increase coverage by **+0.01%** as of [`0280668`](https://codecov.io/github/formly-js/angular-formly/commit/02806689c07b73bad9120684824fc3bb4fffc8e7)\n\n``` diff\n@@            master    #653   diff @@\n======================================\n  Files           16      16       \n  Stmts         1160    1163     +3\n  Branches         0       0       \n  Methods          0       0       \n======================================\n+ Hit           1114    1117     +3\n  Partial          0       0       \n  Missed          46      46       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/6cd15e1a76905ccb0ca7faf03faa7c7e53b5a070...02806689c07b73bad9120684824fc3bb4fffc8e7) as of [`0280668`](https://codecov.io/github/formly-js/angular-formly/commit/02806689c07b73bad9120684824fc3bb4fffc8e7)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=02806689c07b73bad9120684824fc3bb4fffc8e7)\n1. `+0.34%` via [...alidationMessages.js#25...28](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyValidationMessages.js?ref=02806689c07b73bad9120684824fc3bb4fffc8e7#25) \n2. `+0.26%` via [src/test.utils.js#38...40](https://codecov.io/github/formly-js/angular-formly/src/test.utils.js?ref=02806689c07b73bad9120684824fc3bb4fffc8e7#38) \n3. `+0.26%` via [...s/formlyUsability.js#18...20](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyUsability.js?ref=02806689c07b73bad9120684824fc3bb4fffc8e7#18) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=02806689c07b73bad9120684824fc3bb4fffc8e7)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=84d5d979cb3501dcbf88bd9759e203eee41bffb1) is `96.03%`\n\n> Merging **#657** into **master** will decrease coverage by **-0.01%** as of [`84d5d97`](https://codecov.io/github/formly-js/angular-formly/commit/84d5d979cb3501dcbf88bd9759e203eee41bffb1)\n\n``` diff\n@@            master    #657   diff @@\n======================================\n  Files           16      16       \n  Stmts         1163    1161     -2\n  Branches         0       0       \n  Methods          0       0       \n======================================\n- Hit           1117    1115     -2\n  Partial          0       0       \n  Missed          46      46       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/9413842971094e315eb474d3837bf5664b640eb3...84d5d979cb3501dcbf88bd9759e203eee41bffb1) as of [`84d5d97`](https://codecov.io/github/formly-js/angular-formly/commit/84d5d979cb3501dcbf88bd9759e203eee41bffb1)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=84d5d979cb3501dcbf88bd9759e203eee41bffb1)\n1. `+0.35%` via [...alidationMessages.js#25...28](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyValidationMessages.js?ref=84d5d979cb3501dcbf88bd9759e203eee41bffb1#25) \n2. `+0.26%` via [src/test.utils.js#38...40](https://codecov.io/github/formly-js/angular-formly/src/test.utils.js?ref=84d5d979cb3501dcbf88bd9759e203eee41bffb1#38) \n3. `+0.26%` via [...s/formlyUsability.js#18...20](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyUsability.js?ref=84d5d979cb3501dcbf88bd9759e203eee41bffb1#18) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=84d5d979cb3501dcbf88bd9759e203eee41bffb1)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=89138e84a123191264f794de594324224a45a017) is `96.03%`\n\n> Merging **#661** into **master** will not affect coverage as of [`89138e8`](https://codecov.io/github/formly-js/angular-formly/commit/89138e84a123191264f794de594324224a45a017)\n\n``` diff\n@@            master    #661   diff @@\n======================================\n  Files           16      16       \n  Stmts         1161    1161       \n  Branches         0       0       \n  Methods          0       0       \n======================================\n  Hit           1115    1115       \n  Partial          0       0       \n  Missed          46      46       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/6365ce37db579b7df3b6576f6e8bd52b8778ecca...89138e84a123191264f794de594324224a45a017) as of [`89138e8`](https://codecov.io/github/formly-js/angular-formly/commit/89138e84a123191264f794de594324224a45a017)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=89138e84a123191264f794de594324224a45a017)\n1. `+0.35%` via [...alidationMessages.js#25...28](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyValidationMessages.js?ref=89138e84a123191264f794de594324224a45a017#25) \n2. `+0.26%` via [src/test.utils.js#38...40](https://codecov.io/github/formly-js/angular-formly/src/test.utils.js?ref=89138e84a123191264f794de594324224a45a017#38) \n3. `+0.26%` via [...s/formlyUsability.js#18...20](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyUsability.js?ref=89138e84a123191264f794de594324224a45a017#18) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=89138e84a123191264f794de594324224a45a017)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=7c211b8a389ade1a19923ebeb5115194927febf5) is `95.86%`\n\n> Merging **#667** into **master** will decrease coverage by **-0.17%** as of [`7c211b8`](https://codecov.io/github/formly-js/angular-formly/commit/7c211b8a389ade1a19923ebeb5115194927febf5)\n\n``` diff\n@@            master    #667   diff @@\n======================================\n  Files           16      16       \n  Stmts         1161    1161       \n  Branches         0       0       \n  Methods          0       0       \n======================================\n- Hit           1115    1113     -2\n  Partial          0       0       \n- Missed          46      48     +2\n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/953284554c3487f3c920dc46b1c0f710dc3547f1...7c211b8a389ade1a19923ebeb5115194927febf5) as of [`7c211b8`](https://codecov.io/github/formly-js/angular-formly/commit/7c211b8a389ade1a19923ebeb5115194927febf5)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=7c211b8a389ade1a19923ebeb5115194927febf5)\n1. `+0.35%` via [...alidationMessages.js#25...28](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyValidationMessages.js?ref=7c211b8a389ade1a19923ebeb5115194927febf5#25) \n2. `+0.26%` via [...s/formlyUsability.js#18...20](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyUsability.js?ref=7c211b8a389ade1a19923ebeb5115194927febf5#18) \n3. `+0.26%` via [src/test.utils.js#38...40](https://codecov.io/github/formly-js/angular-formly/src/test.utils.js?ref=7c211b8a389ade1a19923ebeb5115194927febf5#38) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=7c211b8a389ade1a19923ebeb5115194927febf5)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/gh/formly-js/angular-formly/pull/668?src=pr) is **95.86%**\n\n> Merging [#668](https://codecov.io/gh/formly-js/angular-formly/pull/668?src=pr) into [master](https://codecov.io/gh/formly-js/angular-formly/branch/master?src=pr) will decrease coverage by **<.01%**\n1. 2 files in `src` were modified. [more](https://codecov.io/gh/formly-js/angular-formly/commit/c58f4d6130c34f9fc9999cfb11bf2cbfa38dfc9c/changes?src=pr#737263) \n   - Misses `+1` \n   - Hits `+150`\n2. File `src/index.common.js` (not in diff) was modified. [more](https://codecov.io/gh/formly-js/angular-formly/commit/c58f4d6130c34f9fc9999cfb11bf2cbfa38dfc9c/changes?src=pr#7372632F696E6465782E636F6D6D6F6E2E6A73) \n   - Misses `0` \n   - Partials `0` \n   - Hits `-1`\n3. File `...y-form.controller.js` (not in diff) was deleted. [more](https://codecov.io/gh/formly-js/angular-formly/commit/c58f4d6130c34f9fc9999cfb11bf2cbfa38dfc9c/changes?src=pr#7372632F646972656374697665732F666F726D6C792D666F726D2E636F6E74726F6C6C65722E6A73)\n\n``` diff\n@@             master    #668   diff @@\n=======================================\n  Files            17      16     -1   \n  Lines          1164    1161     -3   \n  Methods           0       0          \n  Branches          0       0          \n=======================================\n- Hits           1116    1113     -3   \n  Misses           48      48          \n  Partials          0       0          \n```\n\n[![Sunburst](https://codecov.io/gh/formly-js/angular-formly/pull/668/graphs/sunburst.svg?src=pr&size=150)](https://codecov.io/gh/formly-js/angular-formly/pull/668?src=pr)\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [a4c54bb...c58f4d6](https://codecov.io/gh/formly-js/angular-formly/compare/a4c54bbd5b8a9e44bbbd328e33ce9a46dc05e344...c58f4d6130c34f9fc9999cfb11bf2cbfa38dfc9c)\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=2619e330349396d18d92648ac8481294de9a9fd0) is `95.87%`\n\n> Merging **#669** into **master** will increase coverage by **+0.01%** as of [`2619e33`](https://codecov.io/github/formly-js/angular-formly/commit/2619e330349396d18d92648ac8481294de9a9fd0)\n\n``` diff\n@@            master    #669   diff @@\n======================================\n  Files           16      16       \n  Stmts         1161    1163     +2\n  Branches         0       0       \n  Methods          0       0       \n======================================\n+ Hit           1113    1115     +2\n  Partial          0       0       \n  Missed          48      48       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/4fda1ed67e8c2931b64635cec6112e56432d0081...2619e330349396d18d92648ac8481294de9a9fd0) as of [`2619e33`](https://codecov.io/github/formly-js/angular-formly/commit/2619e330349396d18d92648ac8481294de9a9fd0)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=2619e330349396d18d92648ac8481294de9a9fd0)\n1. `+0.34%` via [...alidationMessages.js#25...28](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyValidationMessages.js?ref=2619e330349396d18d92648ac8481294de9a9fd0#25) \n2. `+0.26%` via [src/test.utils.js#38...40](https://codecov.io/github/formly-js/angular-formly/src/test.utils.js?ref=2619e330349396d18d92648ac8481294de9a9fd0#38) \n3. `+0.26%` via [...s/formlyUsability.js#18...20](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyUsability.js?ref=2619e330349396d18d92648ac8481294de9a9fd0#18) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=2619e330349396d18d92648ac8481294de9a9fd0)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=25c89087c857a458a4782115426020ff727e377e) is `95.87%`\n\n> Merging **#670** into **master** will not affect coverage as of [`25c8908`](https://codecov.io/github/formly-js/angular-formly/commit/25c89087c857a458a4782115426020ff727e377e)\n\n``` diff\n@@            master    #670   diff @@\n======================================\n  Files           16      17     +1\n  Stmts         1163    1164     +1\n  Branches         0       0       \n  Methods          0       0       \n======================================\n+ Hit           1115    1116     +1\n  Partial          0       0       \n  Missed          48      48       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/21e96f1099e8c4bfcd8e8a900cdd2e771018898a...25c89087c857a458a4782115426020ff727e377e) as of [`25c8908`](https://codecov.io/github/formly-js/angular-formly/commit/25c89087c857a458a4782115426020ff727e377e)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=25c89087c857a458a4782115426020ff727e377e)\n1. `+0.34%` via [...alidationMessages.js#25...28](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyValidationMessages.js?ref=25c89087c857a458a4782115426020ff727e377e#25) \n2. `+0.26%` via [...s/formlyUsability.js#18...20](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyUsability.js?ref=25c89087c857a458a4782115426020ff727e377e#18) \n3. `+0.26%` via [src/test.utils.js#38...40](https://codecov.io/github/formly-js/angular-formly/src/test.utils.js?ref=25c89087c857a458a4782115426020ff727e377e#38) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=25c89087c857a458a4782115426020ff727e377e)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/gh/formly-js/angular-formly/pull/699?src=pr) is 95.89% (diff: 100%)\n\n> Merging [#699](https://codecov.io/gh/formly-js/angular-formly/pull/699?src=pr) into [master](https://codecov.io/gh/formly-js/angular-formly/branch/master?src=pr) will increase coverage by **0.01%**\n\n``` diff\n@@             master       #699   diff @@\n==========================================\n  Files            17         17          \n  Lines          1164       1169     +5   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits           1116       1121     +5   \n  Misses           48         48          \n  Partials          0          0          \n```\n\n[![Sunburst](https://codecov.io/gh/formly-js/angular-formly/pull/699/graphs/sunburst.svg?size=150&src=pr)](https://codecov.io/gh/formly-js/angular-formly/pull/699?src=pr)\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [a4c54bb...6260cca](https://codecov.io/gh/formly-js/angular-formly/compare/a4c54bbd5b8a9e44bbbd328e33ce9a46dc05e344...6260cca9e95ad5c29887c4b0adc3a0fe131f3af9?src=pr)\n. ## [Current coverage](https://codecov.io/gh/formly-js/angular-formly/pull/709?src=pr) is 95.93% (diff: 100%)\n\n> Merging [#709](https://codecov.io/gh/formly-js/angular-formly/pull/709?src=pr) into [master](https://codecov.io/gh/formly-js/angular-formly/branch/master?src=pr) will increase coverage by **0.04%**\n\n``` diff\n@@             master       #709   diff @@\n==========================================\n  Files            17         17          \n  Lines          1169       1181    +12   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits           1121       1133    +12   \n  Misses           48         48          \n  Partials          0          0          \n```\n\n![Sunburst](https://codecov.io/gh/formly-js/angular-formly/pull/709/graphs/sunburst.svg?size=150&src=pr)\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [2073a91...7f8601c](https://codecov.io/gh/formly-js/angular-formly/compare/2073a91db8041f91ddc27303e269515881f05d66...7f8601c3d2d9ffb962fda725b0e1ef7f31ceaf73?src=pr)\n. ## [Current coverage](https://codecov.io/gh/formly-js/angular-formly/pull/728?src=pr) is 95.93% (diff: 100%)\n> Merging [#728](https://codecov.io/gh/formly-js/angular-formly/pull/728?src=pr) into [master](https://codecov.io/gh/formly-js/angular-formly/branch/master?src=pr) will not change coverage\n\n```diff\n@@             master       #728   diff @@\n==========================================\n  Files            17         17          \n  Lines          1181       1181          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits           1133       1133          \n  Misses           48         48          \n  Partials          0          0          \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [fc45fb3...ed1fcfc](https://codecov.io/gh/formly-js/angular-formly/compare/fc45fb3541c70d6499351fc158907c14f4632791...ed1fcfcda8017dbcf03a0fd0b56040535b511bec?src=pr). ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=8af8d1f77fa810364111366e138dd2787f12ac9d) is `90.99%`\n\n> Merging **#401** into **master** will decrease coverage by **-0.08%** as of [`8af8d1f`](https://codecov.io/github/formly-js/angular-formly/commit/8af8d1f77fa810364111366e138dd2787f12ac9d)\n\n``` diff\n@@            master    #401   diff @@\n======================================\n  Files           16      16       \n  Stmts         1164    1132    -32\n  Branches       258     252     -6\n  Methods        142     142       \n======================================\n- Hit           1060    1030    -30\n+ Partial         25      23     -2\n  Missed          79      79       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/fec4f6edfdfbb3e565dd6304a138359ff3dfe653...8af8d1f77fa810364111366e138dd2787f12ac9d)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=8af8d1f77fa810364111366e138dd2787f12ac9d)\n1. `+0.62%` via [...tives/formly-form.js#243...249](https://codecov.io/github/formly-js/angular-formly/src/directives/formly-form.js?ref=8af8d1f77fa810364111366e138dd2787f12ac9d#243) \n2. `+0.53%` via [.../formlyCustomTags.js#9...14](https://codecov.io/github/formly-js/angular-formly/src/run/formlyCustomTags.js?ref=8af8d1f77fa810364111366e138dd2787f12ac9d#9) \n3. `+0.53%` via [...tives/formly-form.js#208...213](https://codecov.io/github/formly-js/angular-formly/src/directives/formly-form.js?ref=8af8d1f77fa810364111366e138dd2787f12ac9d#208) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=8af8d1f77fa810364111366e138dd2787f12ac9d)_\n\n> Powered by [Codecov](https://codecov.io)\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=a50e8e550557cdddc21c2b86cd65f1ff7888f13a) is `91.01%`\n\n> Merging **#411** into **master** will increase coverage by **+0.02%** as of [`a50e8e5`](https://codecov.io/github/formly-js/angular-formly/commit/a50e8e550557cdddc21c2b86cd65f1ff7888f13a)\n\n``` diff\n@@            master    #411   diff @@\n======================================\n  Files           16      16       \n  Stmts         1132    1135     +3\n  Branches       252     252       \n  Methods        142     142       \n======================================\n+ Hit           1030    1033     +3\n  Partial         23      23       \n  Missed          79      79       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/05a0ffff47522d566490c057488c3701963ad85a...a50e8e550557cdddc21c2b86cd65f1ff7888f13a)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=a50e8e550557cdddc21c2b86cd65f1ff7888f13a)\n1. `+0.71%` via [...tives/formly-form.js#223...230](https://codecov.io/github/formly-js/angular-formly/src/directives/formly-form.js?ref=a50e8e550557cdddc21c2b86cd65f1ff7888f13a#223) \n2. `+0.62%` via [...tives/formly-form.js#258...264](https://codecov.io/github/formly-js/angular-formly/src/directives/formly-form.js?ref=a50e8e550557cdddc21c2b86cd65f1ff7888f13a#258) \n3. `+0.53%` via [.../formlyCustomTags.js#9...14](https://codecov.io/github/formly-js/angular-formly/src/run/formlyCustomTags.js?ref=a50e8e550557cdddc21c2b86cd65f1ff7888f13a#9) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=a50e8e550557cdddc21c2b86cd65f1ff7888f13a)_\n\n> Powered by [Codecov](https://codecov.io)\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=cb0bca3d2bafc5ba96eb52cd0b8d1d98e22e81b8) is `91.07%`\n\n> Merging **#415** into **master** will not affect coverage as of [`cb0bca3`](https://codecov.io/github/formly-js/angular-formly/commit/cb0bca3d2bafc5ba96eb52cd0b8d1d98e22e81b8)\n\n``` diff\n@@            master    #415   diff @@\n======================================\n  Files           16      16       \n  Stmts         1164    1164       \n  Branches       258     258       \n  Methods        142     142       \n======================================\n  Hit           1060    1060       \n  Partial         25      25       \n  Missed          79      79       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/41bd8b4bd87fea880363a7fef59e289f43238e19...cb0bca3d2bafc5ba96eb52cd0b8d1d98e22e81b8)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=cb0bca3d2bafc5ba96eb52cd0b8d1d98e22e81b8)\n1. `+0.68%` via [...tives/formly-form.js#225...232](https://codecov.io/github/formly-js/angular-formly/src/directives/formly-form.js?ref=cb0bca3d2bafc5ba96eb52cd0b8d1d98e22e81b8#225) \n2. `+0.60%` via [...tives/formly-form.js#260...266](https://codecov.io/github/formly-js/angular-formly/src/directives/formly-form.js?ref=cb0bca3d2bafc5ba96eb52cd0b8d1d98e22e81b8#260) \n3. `+0.51%` via [.../formlyCustomTags.js#9...14](https://codecov.io/github/formly-js/angular-formly/src/run/formlyCustomTags.js?ref=cb0bca3d2bafc5ba96eb52cd0b8d1d98e22e81b8#9) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=cb0bca3d2bafc5ba96eb52cd0b8d1d98e22e81b8)_\n\n> Powered by [Codecov](https://codecov.io)\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=9663c70b62828f1984015b14c140c48c0945a2f0) is `91.13%`\n\n> Merging **#422** into **master** will increase coverage by **+0.06%** as of [`9663c70`](https://codecov.io/github/formly-js/angular-formly/commit/9663c70b62828f1984015b14c140c48c0945a2f0)\n\n``` diff\n@@            master    #422   diff @@\n======================================\n  Files           16      16       \n  Stmts         1164    1173     +9\n  Branches       258     259     +1\n  Methods        142     143     +1\n======================================\n+ Hit           1060    1069     +9\n  Partial         25      25       \n  Missed          79      79       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/889694b8c98b527238d0b497abc04b44438d6bae...9663c70b62828f1984015b14c140c48c0945a2f0) as of [`9663c70`](https://codecov.io/github/formly-js/angular-formly/commit/9663c70b62828f1984015b14c140c48c0945a2f0)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=9663c70b62828f1984015b14c140c48c0945a2f0)\n1. `+0.69%` via [...tives/formly-form.js#225...232](https://codecov.io/github/formly-js/angular-formly/src/directives/formly-form.js?ref=9663c70b62828f1984015b14c140c48c0945a2f0#225) \n2. `+0.60%` via [...tives/formly-form.js#260...266](https://codecov.io/github/formly-js/angular-formly/src/directives/formly-form.js?ref=9663c70b62828f1984015b14c140c48c0945a2f0#260) \n3. `+0.52%` via [.../formlyCustomTags.js#9...14](https://codecov.io/github/formly-js/angular-formly/src/run/formlyCustomTags.js?ref=9663c70b62828f1984015b14c140c48c0945a2f0#9) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=9663c70b62828f1984015b14c140c48c0945a2f0)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=41306441501d79269b13fd7c7d4fd90b5bb40372) is `92.85%`\n\n> Merging **#424** into **master** will increase coverage by **+1.72%** as of [`4130644`](https://codecov.io/github/formly-js/angular-formly/commit/41306441501d79269b13fd7c7d4fd90b5bb40372)\n\n``` diff\n@@            master    #424   diff @@\n======================================\n  Files           16      16       \n  Stmts         1173    1077    -96\n  Branches       259       0   -259\n  Methods        143       0   -143\n======================================\n- Hit           1069    1000    -69\n+ Partial         25       0    -25\n+ Missed          79      77     -2\n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/a61de611b09fba115d85a4973900ac2d000d7674...41306441501d79269b13fd7c7d4fd90b5bb40372) as of [`4130644`](https://codecov.io/github/formly-js/angular-formly/commit/41306441501d79269b13fd7c7d4fd90b5bb40372)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=41306441501d79269b13fd7c7d4fd90b5bb40372)\n1. `+0.65%` via [...tives/formly-form.js#245...251](https://codecov.io/github/formly-js/angular-formly/src/directives/formly-form.js?ref=41306441501d79269b13fd7c7d4fd90b5bb40372#245) \n2. `+0.56%` via [.../formlyCustomTags.js#9...14](https://codecov.io/github/formly-js/angular-formly/src/run/formlyCustomTags.js?ref=41306441501d79269b13fd7c7d4fd90b5bb40372#9) \n3. `+0.56%` via [...tives/formly-form.js#264...269](https://codecov.io/github/formly-js/angular-formly/src/directives/formly-form.js?ref=41306441501d79269b13fd7c7d4fd90b5bb40372#264) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=41306441501d79269b13fd7c7d4fd90b5bb40372)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=10ee65fbd1d18fd04099e630ec63fae638e8281d) is `92.90%`\n\n> Merging **#428** into **master** will increase coverage by **+0.05%** as of [`10ee65f`](https://codecov.io/github/formly-js/angular-formly/commit/10ee65fbd1d18fd04099e630ec63fae638e8281d)\n\n``` diff\n@@            master   #428   diff @@\n=====================================\n  Files           16     16       \n  Stmts         1077   1084     +7\n  Branches         0      0       \n  Methods          0      0       \n=====================================\n+ Hit           1000   1007     +7\n  Partial          0      0       \n  Missed          77     77       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/3ff6eadd9913588cfbe7af21d962e4b34b53a340...10ee65fbd1d18fd04099e630ec63fae638e8281d) as of [`10ee65f`](https://codecov.io/github/formly-js/angular-formly/commit/10ee65fbd1d18fd04099e630ec63fae638e8281d)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=10ee65fbd1d18fd04099e630ec63fae638e8281d)\n1. `+0.64%` via [...tives/formly-form.js#245...251](https://codecov.io/github/formly-js/angular-formly//var/snap-ci/repo/src/directives/formly-form.js?ref=10ee65fbd1d18fd04099e630ec63fae638e8281d#245) \n2. `+0.55%` via [.../formlyCustomTags.js#9...14](https://codecov.io/github/formly-js/angular-formly//var/snap-ci/repo/src/run/formlyCustomTags.js?ref=10ee65fbd1d18fd04099e630ec63fae638e8281d#9) \n3. `+0.55%` via [...tives/formly-form.js#264...269](https://codecov.io/github/formly-js/angular-formly//var/snap-ci/repo/src/directives/formly-form.js?ref=10ee65fbd1d18fd04099e630ec63fae638e8281d#264) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=10ee65fbd1d18fd04099e630ec63fae638e8281d)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=6094ee3f57285e3ae3823613f3b940b12135df1c) is `92.90%`\n\n> Merging **#429** into **master** will not affect coverage as of [`6094ee3`](https://codecov.io/github/formly-js/angular-formly/commit/6094ee3f57285e3ae3823613f3b940b12135df1c)\n\n``` diff\n@@            master   #429   diff @@\n=====================================\n  Files           16     16       \n  Stmts         1084   1084       \n  Branches         0      0       \n  Methods          0      0       \n=====================================\n  Hit           1007   1007       \n  Partial          0      0       \n  Missed          77     77       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/f93bf1427578875ab2d1e9acfb7b6f6532f42b69...6094ee3f57285e3ae3823613f3b940b12135df1c) as of [`6094ee3`](https://codecov.io/github/formly-js/angular-formly/commit/6094ee3f57285e3ae3823613f3b940b12135df1c)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=6094ee3f57285e3ae3823613f3b940b12135df1c)\n1. `+0.64%` via [...tives/formly-form.js#245...251](https://codecov.io/github/formly-js/angular-formly//var/snap-ci/repo/src/directives/formly-form.js?ref=6094ee3f57285e3ae3823613f3b940b12135df1c#245) \n2. `+0.55%` via [.../formlyCustomTags.js#9...14](https://codecov.io/github/formly-js/angular-formly//var/snap-ci/repo/src/run/formlyCustomTags.js?ref=6094ee3f57285e3ae3823613f3b940b12135df1c#9) \n3. `+0.55%` via [...tives/formly-form.js#264...269](https://codecov.io/github/formly-js/angular-formly//var/snap-ci/repo/src/directives/formly-form.js?ref=6094ee3f57285e3ae3823613f3b940b12135df1c#264) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=6094ee3f57285e3ae3823613f3b940b12135df1c)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=ab810f3f4cc67b86feb5a2b13bda238ff30ee41a) is `92.90%`\n\n> Merging **#430** into **master** will not affect coverage as of [`ab810f3`](https://codecov.io/github/formly-js/angular-formly/commit/ab810f3f4cc67b86feb5a2b13bda238ff30ee41a)\n\n``` diff\n@@            master   #430   diff @@\n=====================================\n  Files           16     16       \n  Stmts         1084   1085     +1\n  Branches         0      0       \n  Methods          0      0       \n=====================================\n+ Hit           1007   1008     +1\n  Partial          0      0       \n  Missed          77     77       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/cc8d85122c93627106f68d48980e34bdbc42d90d...ab810f3f4cc67b86feb5a2b13bda238ff30ee41a) as of [`ab810f3`](https://codecov.io/github/formly-js/angular-formly/commit/ab810f3f4cc67b86feb5a2b13bda238ff30ee41a)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=ab810f3f4cc67b86feb5a2b13bda238ff30ee41a)\n1. `+0.65%` via [...tives/formly-form.js#245...251](https://codecov.io/github/formly-js/angular-formly//var/snap-ci/repo/src/directives/formly-form.js?ref=ab810f3f4cc67b86feb5a2b13bda238ff30ee41a#245) \n2. `+0.56%` via [.../formlyCustomTags.js#9...14](https://codecov.io/github/formly-js/angular-formly//var/snap-ci/repo/src/run/formlyCustomTags.js?ref=ab810f3f4cc67b86feb5a2b13bda238ff30ee41a#9) \n3. `+0.56%` via [...tives/formly-form.js#264...269](https://codecov.io/github/formly-js/angular-formly//var/snap-ci/repo/src/directives/formly-form.js?ref=ab810f3f4cc67b86feb5a2b13bda238ff30ee41a#264) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=ab810f3f4cc67b86feb5a2b13bda238ff30ee41a)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=cc67dd7fcd1d8f12fd0a618188009ecbd385f973) is `92.92%`\n\n> Merging **#433** into **master** will increase coverage by **+0.02%** as of [`cc67dd7`](https://codecov.io/github/formly-js/angular-formly/commit/cc67dd7fcd1d8f12fd0a618188009ecbd385f973)\n\n``` diff\n@@            master    #433   diff @@\n======================================\n  Files           16      16       \n  Stmts         1085    1088     +3\n  Branches         0       0       \n  Methods          0       0       \n======================================\n+ Hit           1008    1011     +3\n  Partial          0       0       \n  Missed          77      77       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/c5dcb4dd15c13e8adc1a2c568150495fc2c3fabf...cc67dd7fcd1d8f12fd0a618188009ecbd385f973) as of [`cc67dd7`](https://codecov.io/github/formly-js/angular-formly/commit/cc67dd7fcd1d8f12fd0a618188009ecbd385f973)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=cc67dd7fcd1d8f12fd0a618188009ecbd385f973)\n1. `+0.65%` via [...tives/formly-form.js#245...251](https://codecov.io/github/formly-js/angular-formly//var/snap-ci/repo/src/directives/formly-form.js?ref=cc67dd7fcd1d8f12fd0a618188009ecbd385f973#245) \n2. `+0.55%` via [.../formlyCustomTags.js#9...14](https://codecov.io/github/formly-js/angular-formly//var/snap-ci/repo/src/run/formlyCustomTags.js?ref=cc67dd7fcd1d8f12fd0a618188009ecbd385f973#9) \n3. `+0.55%` via [...tives/formly-form.js#264...269](https://codecov.io/github/formly-js/angular-formly//var/snap-ci/repo/src/directives/formly-form.js?ref=cc67dd7fcd1d8f12fd0a618188009ecbd385f973#264) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=cc67dd7fcd1d8f12fd0a618188009ecbd385f973)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=8624f237392a1a55ea4e24061bba4c4ccafcbb79) is `92.99%`\n\n> Merging **#434** into **master** will increase coverage by **+0.07%** as of [`8624f23`](https://codecov.io/github/formly-js/angular-formly/commit/8624f237392a1a55ea4e24061bba4c4ccafcbb79)\n\n``` diff\n@@            master    #434   diff @@\n======================================\n  Files           16      16       \n  Stmts         1088    1098    +10\n  Branches         0       0       \n  Methods          0       0       \n======================================\n+ Hit           1011    1021    +10\n  Partial          0       0       \n  Missed          77      77       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/a60ef3ca9c714721b4a18090ae053124ea88be9d...8624f237392a1a55ea4e24061bba4c4ccafcbb79) as of [`8624f23`](https://codecov.io/github/formly-js/angular-formly/commit/8624f237392a1a55ea4e24061bba4c4ccafcbb79)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=8624f237392a1a55ea4e24061bba4c4ccafcbb79)\n1. `+0.63%` via [...tives/formly-form.js#258...264](https://codecov.io/github/formly-js/angular-formly//var/snap-ci/repo/src/directives/formly-form.js?ref=8624f237392a1a55ea4e24061bba4c4ccafcbb79#258) \n2. `+0.54%` via [.../formlyCustomTags.js#9...14](https://codecov.io/github/formly-js/angular-formly//var/snap-ci/repo/src/run/formlyCustomTags.js?ref=8624f237392a1a55ea4e24061bba4c4ccafcbb79#9) \n3. `+0.54%` via [...tives/formly-form.js#277...282](https://codecov.io/github/formly-js/angular-formly//var/snap-ci/repo/src/directives/formly-form.js?ref=8624f237392a1a55ea4e24061bba4c4ccafcbb79#277) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=8624f237392a1a55ea4e24061bba4c4ccafcbb79)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=2c6693bc164ec941cc8958336a5b2c3e0a769e7d) is `92.98%`\n\n> Merging **#443** into **master** will not affect coverage as of [`2c6693b`](https://codecov.io/github/formly-js/angular-formly/commit/2c6693bc164ec941cc8958336a5b2c3e0a769e7d)\n\n``` diff\n@@            master    #443   diff @@\n======================================\n  Files           16      16       \n  Stmts         1098    1098       \n  Branches         0       0       \n  Methods          0       0       \n======================================\n  Hit           1021    1021       \n  Partial          0       0       \n  Missed          77      77       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/2ee619132dc1569f49cb41a535893d8ec0eb6f03...2c6693bc164ec941cc8958336a5b2c3e0a769e7d) as of [`2c6693b`](https://codecov.io/github/formly-js/angular-formly/commit/2c6693bc164ec941cc8958336a5b2c3e0a769e7d)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=2c6693bc164ec941cc8958336a5b2c3e0a769e7d)\n1. `+0.64%` via [...tives/formly-form.js#259...265](https://codecov.io/github/formly-js/angular-formly/src/directives/formly-form.js?ref=2c6693bc164ec941cc8958336a5b2c3e0a769e7d#259) \n2. `+0.55%` via [.../formlyCustomTags.js#9...14](https://codecov.io/github/formly-js/angular-formly/src/run/formlyCustomTags.js?ref=2c6693bc164ec941cc8958336a5b2c3e0a769e7d#9) \n3. `+0.55%` via [...tives/formly-form.js#278...283](https://codecov.io/github/formly-js/angular-formly/src/directives/formly-form.js?ref=2c6693bc164ec941cc8958336a5b2c3e0a769e7d#278) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=2c6693bc164ec941cc8958336a5b2c3e0a769e7d)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=c3fcc6a63e92b06cdb4e194012ac84d15bb27cd3) is `92.80%`\n\n> Merging **#464** into **master** will not affect coverage as of [`c3fcc6a`](https://codecov.io/github/formly-js/angular-formly/commit/c3fcc6a63e92b06cdb4e194012ac84d15bb27cd3)\n\n``` diff\n@@            master   #464   diff @@\n=====================================\n  Files           16     16       \n  Stmts         1056   1056       \n  Branches         0      0       \n  Methods          0      0       \n=====================================\n  Hit            980    980       \n  Partial          0      0       \n  Missed          76     76       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/b0f0bc4ae9d915644747a9ec29e130b77039f0db...c3fcc6a63e92b06cdb4e194012ac84d15bb27cd3) as of [`c3fcc6a`](https://codecov.io/github/formly-js/angular-formly/commit/c3fcc6a63e92b06cdb4e194012ac84d15bb27cd3)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=c3fcc6a63e92b06cdb4e194012ac84d15bb27cd3)\n1. `+0.66%` via [...tives/formly-form.js#288...294](https://codecov.io/github/formly-js/angular-formly/src/directives/formly-form.js?ref=c3fcc6a63e92b06cdb4e194012ac84d15bb27cd3#288) \n2. `+0.57%` via [.../formlyCustomTags.js#9...14](https://codecov.io/github/formly-js/angular-formly/src/run/formlyCustomTags.js?ref=c3fcc6a63e92b06cdb4e194012ac84d15bb27cd3#9) \n3. `+0.57%` via [...tives/formly-form.js#307...312](https://codecov.io/github/formly-js/angular-formly/src/directives/formly-form.js?ref=c3fcc6a63e92b06cdb4e194012ac84d15bb27cd3#307) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=c3fcc6a63e92b06cdb4e194012ac84d15bb27cd3)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=36b98acee7b34e69931cb6d0c01aca374a5a9f88) is `92.80%`\n\n> Merging **#472** into **master** will not affect coverage as of [`36b98ac`](https://codecov.io/github/formly-js/angular-formly/commit/36b98acee7b34e69931cb6d0c01aca374a5a9f88)\n\n``` diff\n@@            master   #472   diff @@\n=====================================\n  Files           16     16       \n  Stmts         1056   1056       \n  Branches         0      0       \n  Methods          0      0       \n=====================================\n  Hit            980    980       \n  Partial          0      0       \n  Missed          76     76       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/3c45ae558fa37e0b5640aef0f55d8cb5c6226163...36b98acee7b34e69931cb6d0c01aca374a5a9f88) as of [`36b98ac`](https://codecov.io/github/formly-js/angular-formly/commit/36b98acee7b34e69931cb6d0c01aca374a5a9f88)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=36b98acee7b34e69931cb6d0c01aca374a5a9f88)\n1. `+0.66%` via [...tives/formly-form.js#288...294](https://codecov.io/github/formly-js/angular-formly/src/directives/formly-form.js?ref=36b98acee7b34e69931cb6d0c01aca374a5a9f88#288) \n2. `+0.57%` via [.../formlyCustomTags.js#9...14](https://codecov.io/github/formly-js/angular-formly/src/run/formlyCustomTags.js?ref=36b98acee7b34e69931cb6d0c01aca374a5a9f88#9) \n3. `+0.57%` via [...tives/formly-form.js#307...312](https://codecov.io/github/formly-js/angular-formly/src/directives/formly-form.js?ref=36b98acee7b34e69931cb6d0c01aca374a5a9f88#307) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=36b98acee7b34e69931cb6d0c01aca374a5a9f88)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=43f1a080f0940a277a612ef1ac6311eb3e159b21) is `92.80%`\n\n> Merging **#475** into **master** will not affect coverage as of [`43f1a08`](https://codecov.io/github/formly-js/angular-formly/commit/43f1a080f0940a277a612ef1ac6311eb3e159b21)\n\n``` diff\n@@            master   #475   diff @@\n=====================================\n  Files           16     16       \n  Stmts         1056   1057     +1\n  Branches         0      0       \n  Methods          0      0       \n=====================================\n+ Hit            980    981     +1\n  Partial          0      0       \n  Missed          76     76       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/1a2175b0aa186422315863d4d0ff392ef87e9e5c...43f1a080f0940a277a612ef1ac6311eb3e159b21) as of [`43f1a08`](https://codecov.io/github/formly-js/angular-formly/commit/43f1a080f0940a277a612ef1ac6311eb3e159b21)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=43f1a080f0940a277a612ef1ac6311eb3e159b21)\n1. `+0.67%` via [...tives/formly-form.js#288...294](https://codecov.io/github/formly-js/angular-formly/src/directives/formly-form.js?ref=43f1a080f0940a277a612ef1ac6311eb3e159b21#288) \n2. `+0.57%` via [.../formlyCustomTags.js#9...14](https://codecov.io/github/formly-js/angular-formly/src/run/formlyCustomTags.js?ref=43f1a080f0940a277a612ef1ac6311eb3e159b21#9) \n3. `+0.57%` via [...tives/formly-form.js#307...312](https://codecov.io/github/formly-js/angular-formly/src/directives/formly-form.js?ref=43f1a080f0940a277a612ef1ac6311eb3e159b21#307) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=43f1a080f0940a277a612ef1ac6311eb3e159b21)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=210b15e19a3ae4b558685025afbc454dbc4ff048) is `92.80%`\n\n> Merging **#487** into **master** will not affect coverage as of [`210b15e`](https://codecov.io/github/formly-js/angular-formly/commit/210b15e19a3ae4b558685025afbc454dbc4ff048)\n\n``` diff\n@@            master   #487   diff @@\n=====================================\n  Files           16     16       \n  Stmts         1057   1057       \n  Branches         0      0       \n  Methods          0      0       \n=====================================\n  Hit            981    981       \n  Partial          0      0       \n  Missed          76     76       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/d6b0c7426d2ff04addf7c1fa3fea91828b75eee3...210b15e19a3ae4b558685025afbc454dbc4ff048) as of [`210b15e`](https://codecov.io/github/formly-js/angular-formly/commit/210b15e19a3ae4b558685025afbc454dbc4ff048)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=210b15e19a3ae4b558685025afbc454dbc4ff048)\n1. `+0.67%` via [...tives/formly-form.js#288...294](https://codecov.io/github/formly-js/angular-formly/src/directives/formly-form.js?ref=210b15e19a3ae4b558685025afbc454dbc4ff048#288) \n2. `+0.57%` via [.../formlyCustomTags.js#9...14](https://codecov.io/github/formly-js/angular-formly/src/run/formlyCustomTags.js?ref=210b15e19a3ae4b558685025afbc454dbc4ff048#9) \n3. `+0.57%` via [...tives/formly-form.js#307...312](https://codecov.io/github/formly-js/angular-formly/src/directives/formly-form.js?ref=210b15e19a3ae4b558685025afbc454dbc4ff048#307) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=210b15e19a3ae4b558685025afbc454dbc4ff048)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=0f0818d0a325393701f740c27121322f8930aa1e) is `92.80%`\n\n> Merging **#488** into **master** will not affect coverage as of [`0f0818d`](https://codecov.io/github/formly-js/angular-formly/commit/0f0818d0a325393701f740c27121322f8930aa1e)\n\n``` diff\n@@            master   #488   diff @@\n=====================================\n  Files           16     16       \n  Stmts         1057   1057       \n  Branches         0      0       \n  Methods          0      0       \n=====================================\n  Hit            981    981       \n  Partial          0      0       \n  Missed          76     76       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/e8c84066c4ff6e559202f50a7f29681c19fee098...0f0818d0a325393701f740c27121322f8930aa1e) as of [`0f0818d`](https://codecov.io/github/formly-js/angular-formly/commit/0f0818d0a325393701f740c27121322f8930aa1e)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=0f0818d0a325393701f740c27121322f8930aa1e)\n1. `+0.67%` via [...tives/formly-form.js#288...294](https://codecov.io/github/formly-js/angular-formly/src/directives/formly-form.js?ref=0f0818d0a325393701f740c27121322f8930aa1e#288) \n2. `+0.57%` via [.../formlyCustomTags.js#9...14](https://codecov.io/github/formly-js/angular-formly/src/run/formlyCustomTags.js?ref=0f0818d0a325393701f740c27121322f8930aa1e#9) \n3. `+0.57%` via [...tives/formly-form.js#307...312](https://codecov.io/github/formly-js/angular-formly/src/directives/formly-form.js?ref=0f0818d0a325393701f740c27121322f8930aa1e#307) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=0f0818d0a325393701f740c27121322f8930aa1e)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=c24f575017c45036b1c9fb022a6bc8037293ea87) is `92.80%`\n\n> Merging **#489** into **master** will not affect coverage as of [`c24f575`](https://codecov.io/github/formly-js/angular-formly/commit/c24f575017c45036b1c9fb022a6bc8037293ea87)\n\n``` diff\n@@            master   #489   diff @@\n=====================================\n  Files           16     16       \n  Stmts         1057   1057       \n  Branches         0      0       \n  Methods          0      0       \n=====================================\n  Hit            981    981       \n  Partial          0      0       \n  Missed          76     76       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/bf0321d27ff53b4e35ffd1109f17cf59377382c2...c24f575017c45036b1c9fb022a6bc8037293ea87) as of [`c24f575`](https://codecov.io/github/formly-js/angular-formly/commit/c24f575017c45036b1c9fb022a6bc8037293ea87)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=c24f575017c45036b1c9fb022a6bc8037293ea87)\n1. `+0.67%` via [...tives/formly-form.js#288...294](https://codecov.io/github/formly-js/angular-formly/src/directives/formly-form.js?ref=c24f575017c45036b1c9fb022a6bc8037293ea87#288) \n2. `+0.57%` via [.../formlyCustomTags.js#9...14](https://codecov.io/github/formly-js/angular-formly/src/run/formlyCustomTags.js?ref=c24f575017c45036b1c9fb022a6bc8037293ea87#9) \n3. `+0.57%` via [...tives/formly-form.js#307...312](https://codecov.io/github/formly-js/angular-formly/src/directives/formly-form.js?ref=c24f575017c45036b1c9fb022a6bc8037293ea87#307) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=c24f575017c45036b1c9fb022a6bc8037293ea87)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=cb45c00ceb76c46caf9d8cebe3059ddb4c70e6d2) is `92.80%`\n\n> Merging **#490** into **master** will not affect coverage as of [`cb45c00`](https://codecov.io/github/formly-js/angular-formly/commit/cb45c00ceb76c46caf9d8cebe3059ddb4c70e6d2)\n\n``` diff\n@@            master   #490   diff @@\n=====================================\n  Files           16     16       \n  Stmts         1057   1057       \n  Branches         0      0       \n  Methods          0      0       \n=====================================\n  Hit            981    981       \n  Partial          0      0       \n  Missed          76     76       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/b5645ccf9accf729ee9164e8ca29a04bdf30dfe2...cb45c00ceb76c46caf9d8cebe3059ddb4c70e6d2) as of [`cb45c00`](https://codecov.io/github/formly-js/angular-formly/commit/cb45c00ceb76c46caf9d8cebe3059ddb4c70e6d2)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=cb45c00ceb76c46caf9d8cebe3059ddb4c70e6d2)\n1. `+0.67%` via [...tives/formly-form.js#288...294](https://codecov.io/github/formly-js/angular-formly/src/directives/formly-form.js?ref=cb45c00ceb76c46caf9d8cebe3059ddb4c70e6d2#288) \n2. `+0.57%` via [.../formlyCustomTags.js#9...14](https://codecov.io/github/formly-js/angular-formly/src/run/formlyCustomTags.js?ref=cb45c00ceb76c46caf9d8cebe3059ddb4c70e6d2#9) \n3. `+0.57%` via [...tives/formly-form.js#307...312](https://codecov.io/github/formly-js/angular-formly/src/directives/formly-form.js?ref=cb45c00ceb76c46caf9d8cebe3059ddb4c70e6d2#307) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=cb45c00ceb76c46caf9d8cebe3059ddb4c70e6d2)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=1515c49658bee2dd2eb960db3671a309f37c8b80) is `92.80%`\n\n> Merging **#495** into **master** will not affect coverage as of [`1515c49`](https://codecov.io/github/formly-js/angular-formly/commit/1515c49658bee2dd2eb960db3671a309f37c8b80)\n\n``` diff\n@@            master   #495   diff @@\n=====================================\n  Files           16     16       \n  Stmts         1057   1057       \n  Branches         0      0       \n  Methods          0      0       \n=====================================\n  Hit            981    981       \n  Partial          0      0       \n  Missed          76     76       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/a58cc88f1f8f7f0314349fdbefe377412c8b8de1...1515c49658bee2dd2eb960db3671a309f37c8b80) as of [`1515c49`](https://codecov.io/github/formly-js/angular-formly/commit/1515c49658bee2dd2eb960db3671a309f37c8b80)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=1515c49658bee2dd2eb960db3671a309f37c8b80)\n1. `+0.67%` via [...tives/formly-form.js#288...294](https://codecov.io/github/formly-js/angular-formly/src/directives/formly-form.js?ref=1515c49658bee2dd2eb960db3671a309f37c8b80#288) \n2. `+0.57%` via [.../formlyCustomTags.js#9...14](https://codecov.io/github/formly-js/angular-formly/src/run/formlyCustomTags.js?ref=1515c49658bee2dd2eb960db3671a309f37c8b80#9) \n3. `+0.57%` via [...tives/formly-form.js#307...312](https://codecov.io/github/formly-js/angular-formly/src/directives/formly-form.js?ref=1515c49658bee2dd2eb960db3671a309f37c8b80#307) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=1515c49658bee2dd2eb960db3671a309f37c8b80)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=cebd12d9cbac5431591c8da93372a66dae81c868) is `92.80%`\n\n> Merging **#496** into **master** will not affect coverage as of [`cebd12d`](https://codecov.io/github/formly-js/angular-formly/commit/cebd12d9cbac5431591c8da93372a66dae81c868)\n\n``` diff\n@@            master   #496   diff @@\n=====================================\n  Files           16     16       \n  Stmts         1057   1057       \n  Branches         0      0       \n  Methods          0      0       \n=====================================\n  Hit            981    981       \n  Partial          0      0       \n  Missed          76     76       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/a58cc88f1f8f7f0314349fdbefe377412c8b8de1...cebd12d9cbac5431591c8da93372a66dae81c868) as of [`cebd12d`](https://codecov.io/github/formly-js/angular-formly/commit/cebd12d9cbac5431591c8da93372a66dae81c868)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=cebd12d9cbac5431591c8da93372a66dae81c868)\n1. `+0.67%` via [...tives/formly-form.js#288...294](https://codecov.io/github/formly-js/angular-formly/src/directives/formly-form.js?ref=cebd12d9cbac5431591c8da93372a66dae81c868#288) \n2. `+0.57%` via [.../formlyCustomTags.js#9...14](https://codecov.io/github/formly-js/angular-formly/src/run/formlyCustomTags.js?ref=cebd12d9cbac5431591c8da93372a66dae81c868#9) \n3. `+0.57%` via [...tives/formly-form.js#307...312](https://codecov.io/github/formly-js/angular-formly/src/directives/formly-form.js?ref=cebd12d9cbac5431591c8da93372a66dae81c868#307) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=cebd12d9cbac5431591c8da93372a66dae81c868)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=af31e47061b9f4637ca7a94d30766a238d42d1af) is `92.80%`\n\n> Merging **#497** into **master** will not affect coverage as of [`af31e47`](https://codecov.io/github/formly-js/angular-formly/commit/af31e47061b9f4637ca7a94d30766a238d42d1af)\n\n``` diff\n@@            master   #497   diff @@\n=====================================\n  Files           16     16       \n  Stmts         1057   1057       \n  Branches         0      0       \n  Methods          0      0       \n=====================================\n  Hit            981    981       \n  Partial          0      0       \n  Missed          76     76       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/a58cc88f1f8f7f0314349fdbefe377412c8b8de1...af31e47061b9f4637ca7a94d30766a238d42d1af) as of [`af31e47`](https://codecov.io/github/formly-js/angular-formly/commit/af31e47061b9f4637ca7a94d30766a238d42d1af)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=af31e47061b9f4637ca7a94d30766a238d42d1af)\n1. `+0.67%` via [...tives/formly-form.js#288...294](https://codecov.io/github/formly-js/angular-formly/src/directives/formly-form.js?ref=af31e47061b9f4637ca7a94d30766a238d42d1af#288) \n2. `+0.57%` via [.../formlyCustomTags.js#9...14](https://codecov.io/github/formly-js/angular-formly/src/run/formlyCustomTags.js?ref=af31e47061b9f4637ca7a94d30766a238d42d1af#9) \n3. `+0.57%` via [...tives/formly-form.js#307...312](https://codecov.io/github/formly-js/angular-formly/src/directives/formly-form.js?ref=af31e47061b9f4637ca7a94d30766a238d42d1af#307) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=af31e47061b9f4637ca7a94d30766a238d42d1af)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=ee47e53ee3134dd2542c7a16bc6887ff5792f9ac) is `95.88%`\n\n> Merging **#512** into **master** will increase coverage by **+0.73%** as of [`ee47e53`](https://codecov.io/github/formly-js/angular-formly/commit/ee47e53ee3134dd2542c7a16bc6887ff5792f9ac)\n\n``` diff\n@@            master    #512   diff @@\n======================================\n  Files           17      17       \n  Stmts         1093    1093       \n  Branches         0       0       \n  Methods          0       0       \n======================================\n+ Hit           1040    1048     +8\n  Partial          0       0       \n+ Missed          53      45     -8\n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/329711a597130b5fa6f61963160f3da68543d40e...ee47e53ee3134dd2542c7a16bc6887ff5792f9ac) as of [`ee47e53`](https://codecov.io/github/formly-js/angular-formly/commit/ee47e53ee3134dd2542c7a16bc6887ff5792f9ac)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=ee47e53ee3134dd2542c7a16bc6887ff5792f9ac)\n1. `+0.36%` via [...alidationMessages.js#25...28](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyValidationMessages.js?ref=ee47e53ee3134dd2542c7a16bc6887ff5792f9ac#25) \n2. `+0.27%` via [...s/formlyUsability.js#18...20](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyUsability.js?ref=ee47e53ee3134dd2542c7a16bc6887ff5792f9ac#18) \n3. `+0.27%` via [src/test.utils.js#38...40](https://codecov.io/github/formly-js/angular-formly/src/test.utils.js?ref=ee47e53ee3134dd2542c7a16bc6887ff5792f9ac#38) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=ee47e53ee3134dd2542c7a16bc6887ff5792f9ac)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=6aaf3173038f1e23bcfae8eabe918892010676c6) is `95.88%`\n\n> Merging **#518** into **master** will not affect coverage as of [`6aaf317`](https://codecov.io/github/formly-js/angular-formly/commit/6aaf3173038f1e23bcfae8eabe918892010676c6)\n\n``` diff\n@@            master    #518   diff @@\n======================================\n  Files           17      17       \n  Stmts         1093    1093       \n  Branches         0       0       \n  Methods          0       0       \n======================================\n  Hit           1048    1048       \n  Partial          0       0       \n  Missed          45      45       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/d8dcf7c306914f5894976e084e5dfe4747864347...6aaf3173038f1e23bcfae8eabe918892010676c6) as of [`6aaf317`](https://codecov.io/github/formly-js/angular-formly/commit/6aaf3173038f1e23bcfae8eabe918892010676c6)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=6aaf3173038f1e23bcfae8eabe918892010676c6)\n1. `+0.36%` via [...alidationMessages.js#25...28](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyValidationMessages.js?ref=6aaf3173038f1e23bcfae8eabe918892010676c6#25) \n2. `+0.27%` via [...s/formlyUsability.js#18...20](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyUsability.js?ref=6aaf3173038f1e23bcfae8eabe918892010676c6#18) \n3. `+0.27%` via [src/test.utils.js#38...40](https://codecov.io/github/formly-js/angular-formly/src/test.utils.js?ref=6aaf3173038f1e23bcfae8eabe918892010676c6#38) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=6aaf3173038f1e23bcfae8eabe918892010676c6)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=a6bc3969b0773764460d0f94a49d4439ed7ee962) is `95.88%`\n\n> Merging **#519** into **master** will not affect coverage as of [`a6bc396`](https://codecov.io/github/formly-js/angular-formly/commit/a6bc3969b0773764460d0f94a49d4439ed7ee962)\n\n``` diff\n@@            master    #519   diff @@\n======================================\n  Files           17      17       \n  Stmts         1093    1093       \n  Branches         0       0       \n  Methods          0       0       \n======================================\n  Hit           1048    1048       \n  Partial          0       0       \n  Missed          45      45       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/d8dcf7c306914f5894976e084e5dfe4747864347...a6bc3969b0773764460d0f94a49d4439ed7ee962) as of [`a6bc396`](https://codecov.io/github/formly-js/angular-formly/commit/a6bc3969b0773764460d0f94a49d4439ed7ee962)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=a6bc3969b0773764460d0f94a49d4439ed7ee962)\n1. `+0.36%` via [...alidationMessages.js#25...28](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyValidationMessages.js?ref=a6bc3969b0773764460d0f94a49d4439ed7ee962#25) \n2. `+0.27%` via [...s/formlyUsability.js#18...20](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyUsability.js?ref=a6bc3969b0773764460d0f94a49d4439ed7ee962#18) \n3. `+0.27%` via [src/test.utils.js#38...40](https://codecov.io/github/formly-js/angular-formly/src/test.utils.js?ref=a6bc3969b0773764460d0f94a49d4439ed7ee962#38) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=a6bc3969b0773764460d0f94a49d4439ed7ee962)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=397abb2a5920f2736ff59823e447749046c1d336) is `95.88%`\n\n> Merging **#520** into **master** will not affect coverage as of [`397abb2`](https://codecov.io/github/formly-js/angular-formly/commit/397abb2a5920f2736ff59823e447749046c1d336)\n\n``` diff\n@@            master    #520   diff @@\n======================================\n  Files           17      17       \n  Stmts         1093    1093       \n  Branches         0       0       \n  Methods          0       0       \n======================================\n  Hit           1048    1048       \n  Partial          0       0       \n  Missed          45      45       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/cf2ca608a01f19a50fee057e83ef688f1c726391...397abb2a5920f2736ff59823e447749046c1d336) as of [`397abb2`](https://codecov.io/github/formly-js/angular-formly/commit/397abb2a5920f2736ff59823e447749046c1d336)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=397abb2a5920f2736ff59823e447749046c1d336)\n1. `+0.36%` via [...alidationMessages.js#25...28](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyValidationMessages.js?ref=397abb2a5920f2736ff59823e447749046c1d336#25) \n2. `+0.27%` via [src/test.utils.js#38...40](https://codecov.io/github/formly-js/angular-formly/src/test.utils.js?ref=397abb2a5920f2736ff59823e447749046c1d336#38) \n3. `+0.27%` via [...s/formlyUsability.js#18...20](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyUsability.js?ref=397abb2a5920f2736ff59823e447749046c1d336#18) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=397abb2a5920f2736ff59823e447749046c1d336)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=47df77d214077e1f50a5d0462d59bbf04709ca60) is `95.88%`\n\n> Merging **#521** into **master** will not affect coverage as of [`47df77d`](https://codecov.io/github/formly-js/angular-formly/commit/47df77d214077e1f50a5d0462d59bbf04709ca60)\n\n``` diff\n@@            master    #521   diff @@\n======================================\n  Files           17      17       \n  Stmts         1093    1093       \n  Branches         0       0       \n  Methods          0       0       \n======================================\n  Hit           1048    1048       \n  Partial          0       0       \n  Missed          45      45       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/0fc87039f88468a0f3ad4b64301a8593804e7af1...47df77d214077e1f50a5d0462d59bbf04709ca60) as of [`47df77d`](https://codecov.io/github/formly-js/angular-formly/commit/47df77d214077e1f50a5d0462d59bbf04709ca60)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=47df77d214077e1f50a5d0462d59bbf04709ca60)\n1. `+0.36%` via [...alidationMessages.js#25...28](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyValidationMessages.js?ref=47df77d214077e1f50a5d0462d59bbf04709ca60#25) \n2. `+0.27%` via [...s/formlyUsability.js#18...20](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyUsability.js?ref=47df77d214077e1f50a5d0462d59bbf04709ca60#18) \n3. `+0.27%` via [src/test.utils.js#38...40](https://codecov.io/github/formly-js/angular-formly/src/test.utils.js?ref=47df77d214077e1f50a5d0462d59bbf04709ca60#38) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=47df77d214077e1f50a5d0462d59bbf04709ca60)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=4997f9e786255f5031c7d819f255a76fc2ccf5e7) is `95.88%`\n\n> Merging **#525** into **master** will not affect coverage as of [`4997f9e`](https://codecov.io/github/formly-js/angular-formly/commit/4997f9e786255f5031c7d819f255a76fc2ccf5e7)\n\n``` diff\n@@            master    #525   diff @@\n======================================\n  Files           17      17       \n  Stmts         1093    1093       \n  Branches         0       0       \n  Methods          0       0       \n======================================\n  Hit           1048    1048       \n  Partial          0       0       \n  Missed          45      45       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/96c99fec509686903703d3bbb88a995216751e22...4997f9e786255f5031c7d819f255a76fc2ccf5e7) as of [`4997f9e`](https://codecov.io/github/formly-js/angular-formly/commit/4997f9e786255f5031c7d819f255a76fc2ccf5e7)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=4997f9e786255f5031c7d819f255a76fc2ccf5e7)\n1. `+0.36%` via [...alidationMessages.js#25...28](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyValidationMessages.js?ref=4997f9e786255f5031c7d819f255a76fc2ccf5e7#25) \n2. `+0.27%` via [src/test.utils.js#38...40](https://codecov.io/github/formly-js/angular-formly/src/test.utils.js?ref=4997f9e786255f5031c7d819f255a76fc2ccf5e7#38) \n3. `+0.27%` via [...s/formlyUsability.js#18...20](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyUsability.js?ref=4997f9e786255f5031c7d819f255a76fc2ccf5e7#18) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=4997f9e786255f5031c7d819f255a76fc2ccf5e7)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=4c2b87dab468e5369bbc439908559a80c1b0f521) is `95.88%`\n\n> Merging **#529** into **master** will not affect coverage as of [`4c2b87d`](https://codecov.io/github/formly-js/angular-formly/commit/4c2b87dab468e5369bbc439908559a80c1b0f521)\n\n``` diff\n@@            master    #529   diff @@\n======================================\n  Files           17      16     -1\n  Stmts         1093    1093       \n  Branches         0       0       \n  Methods          0       0       \n======================================\n  Hit           1048    1048       \n  Partial          0       0       \n  Missed          45      45       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/34015c79b1229f13bbcc5f53aaa448e4deb6709d...4c2b87dab468e5369bbc439908559a80c1b0f521) as of [`4c2b87d`](https://codecov.io/github/formly-js/angular-formly/commit/4c2b87dab468e5369bbc439908559a80c1b0f521)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=4c2b87dab468e5369bbc439908559a80c1b0f521)\n1. `+0.36%` via [...alidationMessages.js#25...28](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyValidationMessages.js?ref=4c2b87dab468e5369bbc439908559a80c1b0f521#25) \n2. `+0.27%` via [src/test.utils.js#38...40](https://codecov.io/github/formly-js/angular-formly/src/test.utils.js?ref=4c2b87dab468e5369bbc439908559a80c1b0f521#38) \n3. `+0.27%` via [...s/formlyUsability.js#18...20](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyUsability.js?ref=4c2b87dab468e5369bbc439908559a80c1b0f521#18) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=4c2b87dab468e5369bbc439908559a80c1b0f521)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=e34c98404bedc8e085d128886a7800ab3f63d29f) is `95.93%`\n\n> Merging **#531** into **master** will increase coverage by **+0.05%** as of [`e34c984`](https://codecov.io/github/formly-js/angular-formly/commit/e34c98404bedc8e085d128886a7800ab3f63d29f)\n\n``` diff\n@@            master    #531   diff @@\n======================================\n  Files           16      16       \n  Stmts         1094    1107    +13\n  Branches         0       0       \n  Methods          0       0       \n======================================\n+ Hit           1049    1062    +13\n  Partial          0       0       \n  Missed          45      45       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/f229710d861e3276902e48937e6d8f4dd270fc4c...e34c98404bedc8e085d128886a7800ab3f63d29f) as of [`e34c984`](https://codecov.io/github/formly-js/angular-formly/commit/e34c98404bedc8e085d128886a7800ab3f63d29f)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=e34c98404bedc8e085d128886a7800ab3f63d29f)\n1. `+0.36%` via [...alidationMessages.js#25...28](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyValidationMessages.js?ref=e34c98404bedc8e085d128886a7800ab3f63d29f#25) \n2. `+0.27%` via [...s/formlyUsability.js#18...20](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyUsability.js?ref=e34c98404bedc8e085d128886a7800ab3f63d29f#18) \n3. `+0.27%` via [src/test.utils.js#38...40](https://codecov.io/github/formly-js/angular-formly/src/test.utils.js?ref=e34c98404bedc8e085d128886a7800ab3f63d29f#38) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=e34c98404bedc8e085d128886a7800ab3f63d29f)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=4d82a053641f737e75a764ad6cdc2e3edf549896) is `95.88%`\n\n> Merging **#532** into **master** will not affect coverage as of [`4d82a05`](https://codecov.io/github/formly-js/angular-formly/commit/4d82a053641f737e75a764ad6cdc2e3edf549896)\n\n``` diff\n@@            master    #532   diff @@\n======================================\n  Files           16      16       \n  Stmts         1093    1094     +1\n  Branches         0       0       \n  Methods          0       0       \n======================================\n+ Hit           1048    1049     +1\n  Partial          0       0       \n  Missed          45      45       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/8a542d5259e552c68e368ba1ea1ae5752045364c...4d82a053641f737e75a764ad6cdc2e3edf549896) as of [`4d82a05`](https://codecov.io/github/formly-js/angular-formly/commit/4d82a053641f737e75a764ad6cdc2e3edf549896)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=4d82a053641f737e75a764ad6cdc2e3edf549896)\n1. `+0.37%` via [...alidationMessages.js#25...28](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyValidationMessages.js?ref=4d82a053641f737e75a764ad6cdc2e3edf549896#25) \n2. `+0.28%` via [src/test.utils.js#38...40](https://codecov.io/github/formly-js/angular-formly/src/test.utils.js?ref=4d82a053641f737e75a764ad6cdc2e3edf549896#38) \n3. `+0.28%` via [...s/formlyUsability.js#18...20](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyUsability.js?ref=4d82a053641f737e75a764ad6cdc2e3edf549896#18) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=4d82a053641f737e75a764ad6cdc2e3edf549896)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=d64462e362832bafe3437576992ce4564206c7ed) is `95.93%`\n\n> Merging **#534** into **master** will increase coverage by **+0.05%** as of [`d64462e`](https://codecov.io/github/formly-js/angular-formly/commit/d64462e362832bafe3437576992ce4564206c7ed)\n\n``` diff\n@@            master    #534   diff @@\n======================================\n  Files           16      16       \n  Stmts         1094    1107    +13\n  Branches         0       0       \n  Methods          0       0       \n======================================\n+ Hit           1049    1062    +13\n  Partial          0       0       \n  Missed          45      45       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/f229710d861e3276902e48937e6d8f4dd270fc4c...d64462e362832bafe3437576992ce4564206c7ed) as of [`d64462e`](https://codecov.io/github/formly-js/angular-formly/commit/d64462e362832bafe3437576992ce4564206c7ed)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=d64462e362832bafe3437576992ce4564206c7ed)\n1. `+0.36%` via [...alidationMessages.js#25...28](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyValidationMessages.js?ref=d64462e362832bafe3437576992ce4564206c7ed#25) \n2. `+0.27%` via [src/test.utils.js#38...40](https://codecov.io/github/formly-js/angular-formly/src/test.utils.js?ref=d64462e362832bafe3437576992ce4564206c7ed#38) \n3. `+0.27%` via [...s/formlyUsability.js#18...20](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyUsability.js?ref=d64462e362832bafe3437576992ce4564206c7ed#18) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=d64462e362832bafe3437576992ce4564206c7ed)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=8968dfc444e50ce5a667ec84e40b5f5f9b1c10ce) is `95.93%`\n\n> Merging **#535** into **master** will increase coverage by **+0.05%** as of [`8968dfc`](https://codecov.io/github/formly-js/angular-formly/commit/8968dfc444e50ce5a667ec84e40b5f5f9b1c10ce)\n\n``` diff\n@@            master    #535   diff @@\n======================================\n  Files           16      16       \n  Stmts         1094    1107    +13\n  Branches         0       0       \n  Methods          0       0       \n======================================\n+ Hit           1049    1062    +13\n  Partial          0       0       \n  Missed          45      45       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/f229710d861e3276902e48937e6d8f4dd270fc4c...8968dfc444e50ce5a667ec84e40b5f5f9b1c10ce) as of [`8968dfc`](https://codecov.io/github/formly-js/angular-formly/commit/8968dfc444e50ce5a667ec84e40b5f5f9b1c10ce)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=8968dfc444e50ce5a667ec84e40b5f5f9b1c10ce)\n1. `+0.36%` via [...alidationMessages.js#25...28](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyValidationMessages.js?ref=8968dfc444e50ce5a667ec84e40b5f5f9b1c10ce#25) \n2. `+0.27%` via [src/test.utils.js#38...40](https://codecov.io/github/formly-js/angular-formly/src/test.utils.js?ref=8968dfc444e50ce5a667ec84e40b5f5f9b1c10ce#38) \n3. `+0.27%` via [...s/formlyUsability.js#18...20](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyUsability.js?ref=8968dfc444e50ce5a667ec84e40b5f5f9b1c10ce#18) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=8968dfc444e50ce5a667ec84e40b5f5f9b1c10ce)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=e100ac7da91a0f9cb7df663ef6d81e86fbf5a031) is `95.92%`\n\n> Merging **#541** into **master** will decrease coverage by **-0.01%** as of [`e100ac7`](https://codecov.io/github/formly-js/angular-formly/commit/e100ac7da91a0f9cb7df663ef6d81e86fbf5a031)\n\n``` diff\n@@            master    #541   diff @@\n======================================\n  Files           16      16       \n  Stmts         1107    1103     -4\n  Branches         0       0       \n  Methods          0       0       \n======================================\n- Hit           1062    1058     -4\n  Partial          0       0       \n  Missed          45      45       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/54fc0d3b68553e4f11bad7bef3663e6cc14a7698...e100ac7da91a0f9cb7df663ef6d81e86fbf5a031) as of [`e100ac7`](https://codecov.io/github/formly-js/angular-formly/commit/e100ac7da91a0f9cb7df663ef6d81e86fbf5a031)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=e100ac7da91a0f9cb7df663ef6d81e86fbf5a031)\n1. `+0.36%` via [...alidationMessages.js#25...28](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyValidationMessages.js?ref=e100ac7da91a0f9cb7df663ef6d81e86fbf5a031#25) \n2. `+0.27%` via [src/test.utils.js#38...40](https://codecov.io/github/formly-js/angular-formly/src/test.utils.js?ref=e100ac7da91a0f9cb7df663ef6d81e86fbf5a031#38) \n3. `+0.27%` via [...s/formlyUsability.js#18...20](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyUsability.js?ref=e100ac7da91a0f9cb7df663ef6d81e86fbf5a031#18) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=e100ac7da91a0f9cb7df663ef6d81e86fbf5a031)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=ffff26c77213ba357ed0258cce2ac0997357cb8d) is `95.92%`\n\n> Merging **#545** into **master** will not affect coverage as of [`ffff26c`](https://codecov.io/github/formly-js/angular-formly/commit/ffff26c77213ba357ed0258cce2ac0997357cb8d)\n\n``` diff\n@@            master    #545   diff @@\n======================================\n  Files           16      16       \n  Stmts         1103    1103       \n  Branches         0       0       \n  Methods          0       0       \n======================================\n  Hit           1058    1058       \n  Partial          0       0       \n  Missed          45      45       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/c5c826467f87a4ad0e84ce9f8ce88cc93480267f...ffff26c77213ba357ed0258cce2ac0997357cb8d) as of [`ffff26c`](https://codecov.io/github/formly-js/angular-formly/commit/ffff26c77213ba357ed0258cce2ac0997357cb8d)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=ffff26c77213ba357ed0258cce2ac0997357cb8d)\n1. `+0.36%` via [...alidationMessages.js#25...28](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyValidationMessages.js?ref=ffff26c77213ba357ed0258cce2ac0997357cb8d#25) \n2. `+0.27%` via [src/test.utils.js#38...40](https://codecov.io/github/formly-js/angular-formly/src/test.utils.js?ref=ffff26c77213ba357ed0258cce2ac0997357cb8d#38) \n3. `+0.27%` via [...s/formlyUsability.js#18...20](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyUsability.js?ref=ffff26c77213ba357ed0258cce2ac0997357cb8d#18) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=ffff26c77213ba357ed0258cce2ac0997357cb8d)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=fc42b9be2f901fabb78c088a6cd09be5efc0f89c) is `95.92%`\n\n> Merging **#547** into **master** will not affect coverage as of [`fc42b9b`](https://codecov.io/github/formly-js/angular-formly/commit/fc42b9be2f901fabb78c088a6cd09be5efc0f89c)\n\n``` diff\n@@            master    #547   diff @@\n======================================\n  Files           16      16       \n  Stmts         1103    1103       \n  Branches         0       0       \n  Methods          0       0       \n======================================\n  Hit           1058    1058       \n  Partial          0       0       \n  Missed          45      45       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/c5c826467f87a4ad0e84ce9f8ce88cc93480267f...fc42b9be2f901fabb78c088a6cd09be5efc0f89c) as of [`fc42b9b`](https://codecov.io/github/formly-js/angular-formly/commit/fc42b9be2f901fabb78c088a6cd09be5efc0f89c)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=fc42b9be2f901fabb78c088a6cd09be5efc0f89c)\n1. `+0.36%` via [...alidationMessages.js#25...28](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyValidationMessages.js?ref=fc42b9be2f901fabb78c088a6cd09be5efc0f89c#25) \n2. `+0.27%` via [...s/formlyUsability.js#18...20](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyUsability.js?ref=fc42b9be2f901fabb78c088a6cd09be5efc0f89c#18) \n3. `+0.27%` via [src/test.utils.js#38...40](https://codecov.io/github/formly-js/angular-formly/src/test.utils.js?ref=fc42b9be2f901fabb78c088a6cd09be5efc0f89c#38) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=fc42b9be2f901fabb78c088a6cd09be5efc0f89c)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=f27e3b37d93e30ead171ea9de9f0053d3a81a3b7) is `95.93%`\n\n> Merging **#553** into **master** will increase coverage by **+0.01%** as of [`f27e3b3`](https://codecov.io/github/formly-js/angular-formly/commit/f27e3b37d93e30ead171ea9de9f0053d3a81a3b7)\n\n``` diff\n@@            master    #553   diff @@\n======================================\n  Files           16      16       \n  Stmts         1103    1106     +3\n  Branches         0       0       \n  Methods          0       0       \n======================================\n+ Hit           1058    1061     +3\n  Partial          0       0       \n  Missed          45      45       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/46cfa65e20b17aad55cfae869b1e27dd7647ca84...f27e3b37d93e30ead171ea9de9f0053d3a81a3b7) as of [`f27e3b3`](https://codecov.io/github/formly-js/angular-formly/commit/f27e3b37d93e30ead171ea9de9f0053d3a81a3b7)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=f27e3b37d93e30ead171ea9de9f0053d3a81a3b7)\n1. `+0.36%` via [...alidationMessages.js#25...28](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyValidationMessages.js?ref=f27e3b37d93e30ead171ea9de9f0053d3a81a3b7#25) \n2. `+0.27%` via [src/test.utils.js#38...40](https://codecov.io/github/formly-js/angular-formly/src/test.utils.js?ref=f27e3b37d93e30ead171ea9de9f0053d3a81a3b7#38) \n3. `+0.27%` via [...s/formlyUsability.js#18...20](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyUsability.js?ref=f27e3b37d93e30ead171ea9de9f0053d3a81a3b7#18) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=f27e3b37d93e30ead171ea9de9f0053d3a81a3b7)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=a741c8826bb6fad3836502e4e2b94318e2722366) is `95.93%`\n\n> Merging **#557** into **master** will not affect coverage as of [`a741c88`](https://codecov.io/github/formly-js/angular-formly/commit/a741c8826bb6fad3836502e4e2b94318e2722366)\n\n``` diff\n@@            master    #557   diff @@\n======================================\n  Files           16      16       \n  Stmts         1106    1106       \n  Branches         0       0       \n  Methods          0       0       \n======================================\n  Hit           1061    1061       \n  Partial          0       0       \n  Missed          45      45       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/e0a82a216093ff09edf608947ba457e422aca9b0...a741c8826bb6fad3836502e4e2b94318e2722366) as of [`a741c88`](https://codecov.io/github/formly-js/angular-formly/commit/a741c8826bb6fad3836502e4e2b94318e2722366)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=a741c8826bb6fad3836502e4e2b94318e2722366)\n1. `+0.36%` via [...alidationMessages.js#25...28](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyValidationMessages.js?ref=a741c8826bb6fad3836502e4e2b94318e2722366#25) \n2. `+0.27%` via [...s/formlyUsability.js#18...20](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyUsability.js?ref=a741c8826bb6fad3836502e4e2b94318e2722366#18) \n3. `+0.27%` via [src/test.utils.js#38...40](https://codecov.io/github/formly-js/angular-formly/src/test.utils.js?ref=a741c8826bb6fad3836502e4e2b94318e2722366#38) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=a741c8826bb6fad3836502e4e2b94318e2722366)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=7968219cd105a58dd2b889214740adaaca4a26af) is `95.93%`\n\n> Merging **#558** into **master** will not affect coverage as of [`7968219`](https://codecov.io/github/formly-js/angular-formly/commit/7968219cd105a58dd2b889214740adaaca4a26af)\n\n``` diff\n@@            master    #558   diff @@\n======================================\n  Files           16      16       \n  Stmts         1106    1106       \n  Branches         0       0       \n  Methods          0       0       \n======================================\n  Hit           1061    1061       \n  Partial          0       0       \n  Missed          45      45       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/61db46e11a8438d25034d239571436cabf58fbe9...7968219cd105a58dd2b889214740adaaca4a26af) as of [`7968219`](https://codecov.io/github/formly-js/angular-formly/commit/7968219cd105a58dd2b889214740adaaca4a26af)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=7968219cd105a58dd2b889214740adaaca4a26af)\n1. `+0.36%` via [...alidationMessages.js#25...28](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyValidationMessages.js?ref=7968219cd105a58dd2b889214740adaaca4a26af#25) \n2. `+0.27%` via [...s/formlyUsability.js#18...20](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyUsability.js?ref=7968219cd105a58dd2b889214740adaaca4a26af#18) \n3. `+0.27%` via [src/test.utils.js#38...40](https://codecov.io/github/formly-js/angular-formly/src/test.utils.js?ref=7968219cd105a58dd2b889214740adaaca4a26af#38) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=7968219cd105a58dd2b889214740adaaca4a26af)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=60a079a3146538da5694b9426337a958e5c32d09) is `95.93%`\n\n> Merging **#559** into **master** will not affect coverage as of [`60a079a`](https://codecov.io/github/formly-js/angular-formly/commit/60a079a3146538da5694b9426337a958e5c32d09)\n\n``` diff\n@@            master    #559   diff @@\n======================================\n  Files           16      16       \n  Stmts         1106    1106       \n  Branches         0       0       \n  Methods          0       0       \n======================================\n  Hit           1061    1061       \n  Partial          0       0       \n  Missed          45      45       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/61db46e11a8438d25034d239571436cabf58fbe9...60a079a3146538da5694b9426337a958e5c32d09) as of [`60a079a`](https://codecov.io/github/formly-js/angular-formly/commit/60a079a3146538da5694b9426337a958e5c32d09)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=60a079a3146538da5694b9426337a958e5c32d09)\n1. `+0.36%` via [...alidationMessages.js#25...28](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyValidationMessages.js?ref=60a079a3146538da5694b9426337a958e5c32d09#25) \n2. `+0.27%` via [...s/formlyUsability.js#18...20](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyUsability.js?ref=60a079a3146538da5694b9426337a958e5c32d09#18) \n3. `+0.27%` via [src/test.utils.js#38...40](https://codecov.io/github/formly-js/angular-formly/src/test.utils.js?ref=60a079a3146538da5694b9426337a958e5c32d09#38) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=60a079a3146538da5694b9426337a958e5c32d09)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=e9666923e939167d5a8d53c178b6bb30c0ee3131) is `95.93%`\n\n> Merging **#569** into **master** will not affect coverage as of [`e966692`](https://codecov.io/github/formly-js/angular-formly/commit/e9666923e939167d5a8d53c178b6bb30c0ee3131)\n\n``` diff\n@@            master    #569   diff @@\n======================================\n  Files           16      16       \n  Stmts         1106    1106       \n  Branches         0       0       \n  Methods          0       0       \n======================================\n  Hit           1061    1061       \n  Partial          0       0       \n  Missed          45      45       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/61db46e11a8438d25034d239571436cabf58fbe9...e9666923e939167d5a8d53c178b6bb30c0ee3131) as of [`e966692`](https://codecov.io/github/formly-js/angular-formly/commit/e9666923e939167d5a8d53c178b6bb30c0ee3131)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=e9666923e939167d5a8d53c178b6bb30c0ee3131)\n1. `+0.36%` via [...alidationMessages.js#25...28](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyValidationMessages.js?ref=e9666923e939167d5a8d53c178b6bb30c0ee3131#25) \n2. `+0.27%` via [src/test.utils.js#38...40](https://codecov.io/github/formly-js/angular-formly/src/test.utils.js?ref=e9666923e939167d5a8d53c178b6bb30c0ee3131#38) \n3. `+0.27%` via [...s/formlyUsability.js#18...20](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyUsability.js?ref=e9666923e939167d5a8d53c178b6bb30c0ee3131#18) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=e9666923e939167d5a8d53c178b6bb30c0ee3131)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=9129dd2bd4c991f88eecc71fe85eda85dc2a1a77) is `95.93%`\n\n> Merging **#570** into **master** will not affect coverage as of [`9129dd2`](https://codecov.io/github/formly-js/angular-formly/commit/9129dd2bd4c991f88eecc71fe85eda85dc2a1a77)\n\n``` diff\n@@            master    #570   diff @@\n======================================\n  Files           16      16       \n  Stmts         1106    1106       \n  Branches         0       0       \n  Methods          0       0       \n======================================\n  Hit           1061    1061       \n  Partial          0       0       \n  Missed          45      45       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/61db46e11a8438d25034d239571436cabf58fbe9...9129dd2bd4c991f88eecc71fe85eda85dc2a1a77) as of [`9129dd2`](https://codecov.io/github/formly-js/angular-formly/commit/9129dd2bd4c991f88eecc71fe85eda85dc2a1a77)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=9129dd2bd4c991f88eecc71fe85eda85dc2a1a77)\n1. `+0.36%` via [...alidationMessages.js#25...28](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyValidationMessages.js?ref=9129dd2bd4c991f88eecc71fe85eda85dc2a1a77#25) \n2. `+0.27%` via [...s/formlyUsability.js#18...20](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyUsability.js?ref=9129dd2bd4c991f88eecc71fe85eda85dc2a1a77#18) \n3. `+0.27%` via [src/test.utils.js#38...40](https://codecov.io/github/formly-js/angular-formly/src/test.utils.js?ref=9129dd2bd4c991f88eecc71fe85eda85dc2a1a77#38) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=9129dd2bd4c991f88eecc71fe85eda85dc2a1a77)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=07e3ff6588059e0b4936c0e302ed6a8db1cbafd8) is `95.93%`\n\n> Merging **#572** into **master** will not affect coverage as of [`07e3ff6`](https://codecov.io/github/formly-js/angular-formly/commit/07e3ff6588059e0b4936c0e302ed6a8db1cbafd8)\n\n``` diff\n@@            master    #572   diff @@\n======================================\n  Files           16      16       \n  Stmts         1106    1108     +2\n  Branches         0       0       \n  Methods          0       0       \n======================================\n+ Hit           1061    1063     +2\n  Partial          0       0       \n  Missed          45      45       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/917ec263ddcc4902fa2cb9dc167da0734f9d5ed6...07e3ff6588059e0b4936c0e302ed6a8db1cbafd8) as of [`07e3ff6`](https://codecov.io/github/formly-js/angular-formly/commit/07e3ff6588059e0b4936c0e302ed6a8db1cbafd8)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=07e3ff6588059e0b4936c0e302ed6a8db1cbafd8)\n1. `+0.36%` via [...alidationMessages.js#25...28](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyValidationMessages.js?ref=07e3ff6588059e0b4936c0e302ed6a8db1cbafd8#25) \n2. `+0.27%` via [...s/formlyUsability.js#18...20](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyUsability.js?ref=07e3ff6588059e0b4936c0e302ed6a8db1cbafd8#18) \n3. `+0.27%` via [src/test.utils.js#38...40](https://codecov.io/github/formly-js/angular-formly/src/test.utils.js?ref=07e3ff6588059e0b4936c0e302ed6a8db1cbafd8#38) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=07e3ff6588059e0b4936c0e302ed6a8db1cbafd8)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=ccb8f27f962c56e5339a05edd58c8bf2a806e59d) is `95.87%`\n\n> Merging **#573** into **master** will decrease coverage by **-0.06%** as of [`ccb8f27`](https://codecov.io/github/formly-js/angular-formly/commit/ccb8f27f962c56e5339a05edd58c8bf2a806e59d)\n\n``` diff\n@@            master    #573   diff @@\n======================================\n  Files           16      16       \n  Stmts         1108    1114     +6\n  Branches         0       0       \n  Methods          0       0       \n======================================\n+ Hit           1063    1068     +5\n  Partial          0       0       \n- Missed          45      46     +1\n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/55a915aa5dcd3d29762c2b31a7a871cd2ae53621...ccb8f27f962c56e5339a05edd58c8bf2a806e59d) as of [`ccb8f27`](https://codecov.io/github/formly-js/angular-formly/commit/ccb8f27f962c56e5339a05edd58c8bf2a806e59d)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=ccb8f27f962c56e5339a05edd58c8bf2a806e59d)\n1. `+0.35%` via [...alidationMessages.js#25...28](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyValidationMessages.js?ref=ccb8f27f962c56e5339a05edd58c8bf2a806e59d#25) \n2. `+0.27%` via [...s/formlyUsability.js#18...20](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyUsability.js?ref=ccb8f27f962c56e5339a05edd58c8bf2a806e59d#18) \n3. `+0.27%` via [src/test.utils.js#38...40](https://codecov.io/github/formly-js/angular-formly/src/test.utils.js?ref=ccb8f27f962c56e5339a05edd58c8bf2a806e59d#38) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=ccb8f27f962c56e5339a05edd58c8bf2a806e59d)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=848fa675c13cbb03d0065bb30a8feb55d8635424) is `95.88%`\n\n> Merging **#578** into **master** will increase coverage by **+0.01%** as of [`848fa67`](https://codecov.io/github/formly-js/angular-formly/commit/848fa675c13cbb03d0065bb30a8feb55d8635424)\n\n``` diff\n@@            master    #578   diff @@\n======================================\n  Files           16      16       \n  Stmts         1114    1117     +3\n  Branches         0       0       \n  Methods          0       0       \n======================================\n+ Hit           1068    1071     +3\n  Partial          0       0       \n  Missed          46      46       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/8648c16c0a927ccbdf56861280a3680396041402...848fa675c13cbb03d0065bb30a8feb55d8635424) as of [`848fa67`](https://codecov.io/github/formly-js/angular-formly/commit/848fa675c13cbb03d0065bb30a8feb55d8635424)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=848fa675c13cbb03d0065bb30a8feb55d8635424)\n1. `+0.35%` via [...alidationMessages.js#25...28](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyValidationMessages.js?ref=848fa675c13cbb03d0065bb30a8feb55d8635424#25) \n2. `+0.27%` via [...s/formlyUsability.js#18...20](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyUsability.js?ref=848fa675c13cbb03d0065bb30a8feb55d8635424#18) \n3. `+0.27%` via [src/test.utils.js#38...40](https://codecov.io/github/formly-js/angular-formly/src/test.utils.js?ref=848fa675c13cbb03d0065bb30a8feb55d8635424#38) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=848fa675c13cbb03d0065bb30a8feb55d8635424)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=8a510640734e5544cf9dd1a8e9cc34873f131806) is `95.88%`\n\n> Merging **#582** into **master** will not affect coverage as of [`8a51064`](https://codecov.io/github/formly-js/angular-formly/commit/8a510640734e5544cf9dd1a8e9cc34873f131806)\n\n``` diff\n@@            master    #582   diff @@\n======================================\n  Files           16      16       \n  Stmts         1117    1117       \n  Branches         0       0       \n  Methods          0       0       \n======================================\n  Hit           1071    1071       \n  Partial          0       0       \n  Missed          46      46       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/1e22d842e5b38987e6a7cfe49ac31a3b9ee4c1eb...8a510640734e5544cf9dd1a8e9cc34873f131806) as of [`8a51064`](https://codecov.io/github/formly-js/angular-formly/commit/8a510640734e5544cf9dd1a8e9cc34873f131806)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=8a510640734e5544cf9dd1a8e9cc34873f131806)\n1. `+0.35%` via [...alidationMessages.js#25...28](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyValidationMessages.js?ref=8a510640734e5544cf9dd1a8e9cc34873f131806#25) \n2. `+0.27%` via [src/test.utils.js#38...40](https://codecov.io/github/formly-js/angular-formly/src/test.utils.js?ref=8a510640734e5544cf9dd1a8e9cc34873f131806#38) \n3. `+0.27%` via [...s/formlyUsability.js#18...20](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyUsability.js?ref=8a510640734e5544cf9dd1a8e9cc34873f131806#18) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=8a510640734e5544cf9dd1a8e9cc34873f131806)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=e97f157e3ea7a30cccca391038265df821c7fbc1) is `95.88%`\n\n> Merging **#583** into **master** will not affect coverage as of [`e97f157`](https://codecov.io/github/formly-js/angular-formly/commit/e97f157e3ea7a30cccca391038265df821c7fbc1)\n\n``` diff\n@@            master    #583   diff @@\n======================================\n  Files           16      16       \n  Stmts         1117    1117       \n  Branches         0       0       \n  Methods          0       0       \n======================================\n  Hit           1071    1071       \n  Partial          0       0       \n  Missed          46      46       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/1e22d842e5b38987e6a7cfe49ac31a3b9ee4c1eb...e97f157e3ea7a30cccca391038265df821c7fbc1) as of [`e97f157`](https://codecov.io/github/formly-js/angular-formly/commit/e97f157e3ea7a30cccca391038265df821c7fbc1)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=e97f157e3ea7a30cccca391038265df821c7fbc1)\n1. `+0.35%` via [...alidationMessages.js#25...28](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyValidationMessages.js?ref=e97f157e3ea7a30cccca391038265df821c7fbc1#25) \n2. `+0.27%` via [...s/formlyUsability.js#18...20](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyUsability.js?ref=e97f157e3ea7a30cccca391038265df821c7fbc1#18) \n3. `+0.27%` via [src/test.utils.js#38...40](https://codecov.io/github/formly-js/angular-formly/src/test.utils.js?ref=e97f157e3ea7a30cccca391038265df821c7fbc1#38) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=e97f157e3ea7a30cccca391038265df821c7fbc1)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=33e97fc48e003002d448543d6f31e1e277d41b7c) is `95.88%`\n\n> Merging **#591** into **master** will not affect coverage as of [`33e97fc`](https://codecov.io/github/formly-js/angular-formly/commit/33e97fc48e003002d448543d6f31e1e277d41b7c)\n\n``` diff\n@@            master    #591   diff @@\n======================================\n  Files           16      16       \n  Stmts         1117    1117       \n  Branches         0       0       \n  Methods          0       0       \n======================================\n  Hit           1071    1071       \n  Partial          0       0       \n  Missed          46      46       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/d07acb0f5b2b079b3ac89116f6457394af76541c...33e97fc48e003002d448543d6f31e1e277d41b7c) as of [`33e97fc`](https://codecov.io/github/formly-js/angular-formly/commit/33e97fc48e003002d448543d6f31e1e277d41b7c)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=33e97fc48e003002d448543d6f31e1e277d41b7c)\n1. `+0.35%` via [...alidationMessages.js#25...28](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyValidationMessages.js?ref=33e97fc48e003002d448543d6f31e1e277d41b7c#25) \n2. `+0.27%` via [src/test.utils.js#38...40](https://codecov.io/github/formly-js/angular-formly/src/test.utils.js?ref=33e97fc48e003002d448543d6f31e1e277d41b7c#38) \n3. `+0.27%` via [...s/formlyUsability.js#18...20](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyUsability.js?ref=33e97fc48e003002d448543d6f31e1e277d41b7c#18) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=33e97fc48e003002d448543d6f31e1e277d41b7c)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=4dc4c8676f4895450361671b6d94a5811ba24776) is `95.98%`\n\n> Merging **#599** into **master** will increase coverage by **+0.10%** as of [`4dc4c86`](https://codecov.io/github/formly-js/angular-formly/commit/4dc4c8676f4895450361671b6d94a5811ba24776)\n\n``` diff\n@@            master    #599   diff @@\n======================================\n  Files           16      16       \n  Stmts         1117    1145    +28\n  Branches         0       0       \n  Methods          0       0       \n======================================\n+ Hit           1071    1099    +28\n  Partial          0       0       \n  Missed          46      46       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/5aa126e8d5ef92cf6e460eaeb8db219d5c4c0678...4dc4c8676f4895450361671b6d94a5811ba24776) as of [`4dc4c86`](https://codecov.io/github/formly-js/angular-formly/commit/4dc4c8676f4895450361671b6d94a5811ba24776)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=4dc4c8676f4895450361671b6d94a5811ba24776)\n1. `+0.35%` via [...alidationMessages.js#25...28](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyValidationMessages.js?ref=4dc4c8676f4895450361671b6d94a5811ba24776#25) \n2. `+0.26%` via [...s/formlyUsability.js#18...20](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyUsability.js?ref=4dc4c8676f4895450361671b6d94a5811ba24776#18) \n3. `+0.26%` via [src/test.utils.js#38...40](https://codecov.io/github/formly-js/angular-formly/src/test.utils.js?ref=4dc4c8676f4895450361671b6d94a5811ba24776#38) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=4dc4c8676f4895450361671b6d94a5811ba24776)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=991c2fe042b9361615f783adaa34d3722c86fb3a) is `95.88%`\n\n> Merging **#603** into **master** will not affect coverage as of [`991c2fe`](https://codecov.io/github/formly-js/angular-formly/commit/991c2fe042b9361615f783adaa34d3722c86fb3a)\n\n``` diff\n@@            master    #603   diff @@\n======================================\n  Files           16      16       \n  Stmts         1117    1117       \n  Branches         0       0       \n  Methods          0       0       \n======================================\n  Hit           1071    1071       \n  Partial          0       0       \n  Missed          46      46       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/5dbfbb8ecb3018937f42e3c795eb0000cb37e824...991c2fe042b9361615f783adaa34d3722c86fb3a) as of [`991c2fe`](https://codecov.io/github/formly-js/angular-formly/commit/991c2fe042b9361615f783adaa34d3722c86fb3a)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=991c2fe042b9361615f783adaa34d3722c86fb3a)\n1. `+0.35%` via [...alidationMessages.js#25...28](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyValidationMessages.js?ref=991c2fe042b9361615f783adaa34d3722c86fb3a#25) \n2. `+0.27%` via [src/test.utils.js#38...40](https://codecov.io/github/formly-js/angular-formly/src/test.utils.js?ref=991c2fe042b9361615f783adaa34d3722c86fb3a#38) \n3. `+0.27%` via [...s/formlyUsability.js#18...20](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyUsability.js?ref=991c2fe042b9361615f783adaa34d3722c86fb3a#18) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=991c2fe042b9361615f783adaa34d3722c86fb3a)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=80a6bb1300003029be60d80c11bc80a67c5d63f2) is `95.90%`\n\n> Merging **#610** into **master** will increase coverage by **+0.02%** as of [`80a6bb1`](https://codecov.io/github/formly-js/angular-formly/commit/80a6bb1300003029be60d80c11bc80a67c5d63f2)\n\n``` diff\n@@            master   #610   diff @@\n=====================================\n  Files           16     16       \n  Stmts         1117   1122     +5\n  Branches         0      0       \n  Methods          0      0       \n=====================================\n+ Hit           1071   1076     +5\n  Partial          0      0       \n  Missed          46     46       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/5aa126e8d5ef92cf6e460eaeb8db219d5c4c0678...80a6bb1300003029be60d80c11bc80a67c5d63f2) as of [`80a6bb1`](https://codecov.io/github/formly-js/angular-formly/commit/80a6bb1300003029be60d80c11bc80a67c5d63f2)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=80a6bb1300003029be60d80c11bc80a67c5d63f2)\n1. `+0.35%` via [...alidationMessages.js#25...28](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyValidationMessages.js?ref=80a6bb1300003029be60d80c11bc80a67c5d63f2#25) \n2. `+0.26%` via [...s/formlyUsability.js#18...20](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyUsability.js?ref=80a6bb1300003029be60d80c11bc80a67c5d63f2#18) \n3. `+0.26%` via [src/test.utils.js#38...40](https://codecov.io/github/formly-js/angular-formly/src/test.utils.js?ref=80a6bb1300003029be60d80c11bc80a67c5d63f2#38) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=80a6bb1300003029be60d80c11bc80a67c5d63f2)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=e8736a029a1d8f64d9285d0177fba6c9267b5656) is `96.00%`\n\n> Merging **#622** into **master** will not affect coverage as of [`e8736a0`](https://codecov.io/github/formly-js/angular-formly/commit/e8736a029a1d8f64d9285d0177fba6c9267b5656)\n\n``` diff\n@@            master   #622   diff @@\n=====================================\n  Files           16     16       \n  Stmts         1150   1150       \n  Branches         0      0       \n  Methods          0      0       \n=====================================\n  Hit           1104   1104       \n  Partial          0      0       \n  Missed          46     46       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/8042d2ac8ef3f78f473c7504af4456832e5ae221...e8736a029a1d8f64d9285d0177fba6c9267b5656) as of [`e8736a0`](https://codecov.io/github/formly-js/angular-formly/commit/e8736a029a1d8f64d9285d0177fba6c9267b5656)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=e8736a029a1d8f64d9285d0177fba6c9267b5656)\n1. `+0.34%` via [...alidationMessages.js#25...28](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyValidationMessages.js?ref=e8736a029a1d8f64d9285d0177fba6c9267b5656#25) \n2. `+0.26%` via [...s/formlyUsability.js#18...20](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyUsability.js?ref=e8736a029a1d8f64d9285d0177fba6c9267b5656#18) \n3. `+0.26%` via [src/test.utils.js#38...40](https://codecov.io/github/formly-js/angular-formly/src/test.utils.js?ref=e8736a029a1d8f64d9285d0177fba6c9267b5656#38) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=e8736a029a1d8f64d9285d0177fba6c9267b5656)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=92252aa640036e0f32266ff2b8043a1211d657fd) is `96.00%`\n\n> Merging **#624** into **master** will not affect coverage as of [`92252aa`](https://codecov.io/github/formly-js/angular-formly/commit/92252aa640036e0f32266ff2b8043a1211d657fd)\n\n``` diff\n@@            master   #624   diff @@\n=====================================\n  Files           16     16       \n  Stmts         1150   1150       \n  Branches         0      0       \n  Methods          0      0       \n=====================================\n  Hit           1104   1104       \n  Partial          0      0       \n  Missed          46     46       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/8042d2ac8ef3f78f473c7504af4456832e5ae221...92252aa640036e0f32266ff2b8043a1211d657fd) as of [`92252aa`](https://codecov.io/github/formly-js/angular-formly/commit/92252aa640036e0f32266ff2b8043a1211d657fd)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=92252aa640036e0f32266ff2b8043a1211d657fd)\n1. `+0.34%` via [...alidationMessages.js#25...28](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyValidationMessages.js?ref=92252aa640036e0f32266ff2b8043a1211d657fd#25) \n2. `+0.26%` via [src/test.utils.js#38...40](https://codecov.io/github/formly-js/angular-formly/src/test.utils.js?ref=92252aa640036e0f32266ff2b8043a1211d657fd#38) \n3. `+0.26%` via [...s/formlyUsability.js#18...20](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyUsability.js?ref=92252aa640036e0f32266ff2b8043a1211d657fd#18) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=92252aa640036e0f32266ff2b8043a1211d657fd)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=b191382869be272b939066b1c057865bc4ea9dfd) is `96.00%`\n\n> Merging **#625** into **master** will not affect coverage as of [`b191382`](https://codecov.io/github/formly-js/angular-formly/commit/b191382869be272b939066b1c057865bc4ea9dfd)\n\n``` diff\n@@            master   #625   diff @@\n=====================================\n  Files           16     16       \n  Stmts         1150   1150       \n  Branches         0      0       \n  Methods          0      0       \n=====================================\n  Hit           1104   1104       \n  Partial          0      0       \n  Missed          46     46       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/9fabf282dea97b6efc579176348fd8e3f0843d77...b191382869be272b939066b1c057865bc4ea9dfd) as of [`b191382`](https://codecov.io/github/formly-js/angular-formly/commit/b191382869be272b939066b1c057865bc4ea9dfd)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=b191382869be272b939066b1c057865bc4ea9dfd)\n1. `+0.34%` via [...alidationMessages.js#25...28](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyValidationMessages.js?ref=b191382869be272b939066b1c057865bc4ea9dfd#25) \n2. `+0.26%` via [...s/formlyUsability.js#18...20](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyUsability.js?ref=b191382869be272b939066b1c057865bc4ea9dfd#18) \n3. `+0.26%` via [src/test.utils.js#38...40](https://codecov.io/github/formly-js/angular-formly/src/test.utils.js?ref=b191382869be272b939066b1c057865bc4ea9dfd#38) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=b191382869be272b939066b1c057865bc4ea9dfd)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=bdea08d102fd36c9ccabe233c3e12f99d4e1c62d) is `96.00%`\n\n> Merging **#626** into **master** will not affect coverage as of [`bdea08d`](https://codecov.io/github/formly-js/angular-formly/commit/bdea08d102fd36c9ccabe233c3e12f99d4e1c62d)\n\n``` diff\n@@            master   #626   diff @@\n=====================================\n  Files           16     16       \n  Stmts         1150   1150       \n  Branches         0      0       \n  Methods          0      0       \n=====================================\n  Hit           1104   1104       \n  Partial          0      0       \n  Missed          46     46       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/f8c972fcdd919b470e159d7a1c305ecacf6c3f7e...bdea08d102fd36c9ccabe233c3e12f99d4e1c62d) as of [`bdea08d`](https://codecov.io/github/formly-js/angular-formly/commit/bdea08d102fd36c9ccabe233c3e12f99d4e1c62d)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=bdea08d102fd36c9ccabe233c3e12f99d4e1c62d)\n1. `+0.34%` via [...alidationMessages.js#25...28](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyValidationMessages.js?ref=bdea08d102fd36c9ccabe233c3e12f99d4e1c62d#25) \n2. `+0.26%` via [...s/formlyUsability.js#18...20](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyUsability.js?ref=bdea08d102fd36c9ccabe233c3e12f99d4e1c62d#18) \n3. `+0.26%` via [src/test.utils.js#38...40](https://codecov.io/github/formly-js/angular-formly/src/test.utils.js?ref=bdea08d102fd36c9ccabe233c3e12f99d4e1c62d#38) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=bdea08d102fd36c9ccabe233c3e12f99d4e1c62d)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=9d1bbbc885b1a4600b7a89c505e1a3a519dd1bd7) is `96.00%`\n\n> Merging **#628** into **master** will not affect coverage as of [`9d1bbbc`](https://codecov.io/github/formly-js/angular-formly/commit/9d1bbbc885b1a4600b7a89c505e1a3a519dd1bd7)\n\n``` diff\n@@            master   #628   diff @@\n=====================================\n  Files           16     16       \n  Stmts         1150   1152     +2\n  Branches         0      0       \n  Methods          0      0       \n=====================================\n+ Hit           1104   1106     +2\n  Partial          0      0       \n  Missed          46     46       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/f8c972fcdd919b470e159d7a1c305ecacf6c3f7e...9d1bbbc885b1a4600b7a89c505e1a3a519dd1bd7) as of [`9d1bbbc`](https://codecov.io/github/formly-js/angular-formly/commit/9d1bbbc885b1a4600b7a89c505e1a3a519dd1bd7)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=9d1bbbc885b1a4600b7a89c505e1a3a519dd1bd7)\n1. `+0.35%` via [...alidationMessages.js#25...28](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyValidationMessages.js?ref=9d1bbbc885b1a4600b7a89c505e1a3a519dd1bd7#25) \n2. `+0.26%` via [...s/formlyUsability.js#18...20](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyUsability.js?ref=9d1bbbc885b1a4600b7a89c505e1a3a519dd1bd7#18) \n3. `+0.26%` via [src/test.utils.js#38...40](https://codecov.io/github/formly-js/angular-formly/src/test.utils.js?ref=9d1bbbc885b1a4600b7a89c505e1a3a519dd1bd7#38) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=9d1bbbc885b1a4600b7a89c505e1a3a519dd1bd7)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=d1b47ba1e2e57802f527268f2a0d6543c714a5a1) is `96.03%`\n\n> Merging **#639** into **master** will increase coverage by **+0.02%** as of [`d1b47ba`](https://codecov.io/github/formly-js/angular-formly/commit/d1b47ba1e2e57802f527268f2a0d6543c714a5a1)\n\n``` diff\n@@            master    #639   diff @@\n======================================\n  Files           16      16       \n  Stmts         1155    1160     +5\n  Branches         0       0       \n  Methods          0       0       \n======================================\n+ Hit           1109    1114     +5\n  Partial          0       0       \n  Missed          46      46       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/e993e14de8e062f863093d673ee791e33594020b...d1b47ba1e2e57802f527268f2a0d6543c714a5a1) as of [`d1b47ba`](https://codecov.io/github/formly-js/angular-formly/commit/d1b47ba1e2e57802f527268f2a0d6543c714a5a1)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=d1b47ba1e2e57802f527268f2a0d6543c714a5a1)\n1. `+0.34%` via [...alidationMessages.js#25...28](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyValidationMessages.js?ref=d1b47ba1e2e57802f527268f2a0d6543c714a5a1#25) \n2. `+0.26%` via [src/test.utils.js#38...40](https://codecov.io/github/formly-js/angular-formly/src/test.utils.js?ref=d1b47ba1e2e57802f527268f2a0d6543c714a5a1#38) \n3. `+0.26%` via [...s/formlyUsability.js#18...20](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyUsability.js?ref=d1b47ba1e2e57802f527268f2a0d6543c714a5a1#18) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=d1b47ba1e2e57802f527268f2a0d6543c714a5a1)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=505fc8fcd542e24c8486d06c30f7eebf14821843) is `96.01%`\n\n> Merging **#641** into **master** will increase coverage by **+0.01%** as of [`505fc8f`](https://codecov.io/github/formly-js/angular-formly/commit/505fc8fcd542e24c8486d06c30f7eebf14821843)\n\n``` diff\n@@            master    #641   diff @@\n======================================\n  Files           16      16       \n  Stmts         1150    1155     +5\n  Branches         0       0       \n  Methods          0       0       \n======================================\n+ Hit           1104    1109     +5\n  Partial          0       0       \n  Missed          46      46       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/eae422f9e449c7db69fde27e14ba9659e137c392...505fc8fcd542e24c8486d06c30f7eebf14821843) as of [`505fc8f`](https://codecov.io/github/formly-js/angular-formly/commit/505fc8fcd542e24c8486d06c30f7eebf14821843)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=505fc8fcd542e24c8486d06c30f7eebf14821843)\n1. `+0.35%` via [...alidationMessages.js#25...28](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyValidationMessages.js?ref=505fc8fcd542e24c8486d06c30f7eebf14821843#25) \n2. `+0.26%` via [...s/formlyUsability.js#18...20](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyUsability.js?ref=505fc8fcd542e24c8486d06c30f7eebf14821843#18) \n3. `+0.26%` via [src/test.utils.js#38...40](https://codecov.io/github/formly-js/angular-formly/src/test.utils.js?ref=505fc8fcd542e24c8486d06c30f7eebf14821843#38) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=505fc8fcd542e24c8486d06c30f7eebf14821843)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=02806689c07b73bad9120684824fc3bb4fffc8e7) is `96.04%`\n\n> Merging **#653** into **master** will increase coverage by **+0.01%** as of [`0280668`](https://codecov.io/github/formly-js/angular-formly/commit/02806689c07b73bad9120684824fc3bb4fffc8e7)\n\n``` diff\n@@            master    #653   diff @@\n======================================\n  Files           16      16       \n  Stmts         1160    1163     +3\n  Branches         0       0       \n  Methods          0       0       \n======================================\n+ Hit           1114    1117     +3\n  Partial          0       0       \n  Missed          46      46       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/6cd15e1a76905ccb0ca7faf03faa7c7e53b5a070...02806689c07b73bad9120684824fc3bb4fffc8e7) as of [`0280668`](https://codecov.io/github/formly-js/angular-formly/commit/02806689c07b73bad9120684824fc3bb4fffc8e7)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=02806689c07b73bad9120684824fc3bb4fffc8e7)\n1. `+0.34%` via [...alidationMessages.js#25...28](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyValidationMessages.js?ref=02806689c07b73bad9120684824fc3bb4fffc8e7#25) \n2. `+0.26%` via [src/test.utils.js#38...40](https://codecov.io/github/formly-js/angular-formly/src/test.utils.js?ref=02806689c07b73bad9120684824fc3bb4fffc8e7#38) \n3. `+0.26%` via [...s/formlyUsability.js#18...20](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyUsability.js?ref=02806689c07b73bad9120684824fc3bb4fffc8e7#18) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=02806689c07b73bad9120684824fc3bb4fffc8e7)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=84d5d979cb3501dcbf88bd9759e203eee41bffb1) is `96.03%`\n\n> Merging **#657** into **master** will decrease coverage by **-0.01%** as of [`84d5d97`](https://codecov.io/github/formly-js/angular-formly/commit/84d5d979cb3501dcbf88bd9759e203eee41bffb1)\n\n``` diff\n@@            master    #657   diff @@\n======================================\n  Files           16      16       \n  Stmts         1163    1161     -2\n  Branches         0       0       \n  Methods          0       0       \n======================================\n- Hit           1117    1115     -2\n  Partial          0       0       \n  Missed          46      46       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/9413842971094e315eb474d3837bf5664b640eb3...84d5d979cb3501dcbf88bd9759e203eee41bffb1) as of [`84d5d97`](https://codecov.io/github/formly-js/angular-formly/commit/84d5d979cb3501dcbf88bd9759e203eee41bffb1)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=84d5d979cb3501dcbf88bd9759e203eee41bffb1)\n1. `+0.35%` via [...alidationMessages.js#25...28](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyValidationMessages.js?ref=84d5d979cb3501dcbf88bd9759e203eee41bffb1#25) \n2. `+0.26%` via [src/test.utils.js#38...40](https://codecov.io/github/formly-js/angular-formly/src/test.utils.js?ref=84d5d979cb3501dcbf88bd9759e203eee41bffb1#38) \n3. `+0.26%` via [...s/formlyUsability.js#18...20](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyUsability.js?ref=84d5d979cb3501dcbf88bd9759e203eee41bffb1#18) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=84d5d979cb3501dcbf88bd9759e203eee41bffb1)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=89138e84a123191264f794de594324224a45a017) is `96.03%`\n\n> Merging **#661** into **master** will not affect coverage as of [`89138e8`](https://codecov.io/github/formly-js/angular-formly/commit/89138e84a123191264f794de594324224a45a017)\n\n``` diff\n@@            master    #661   diff @@\n======================================\n  Files           16      16       \n  Stmts         1161    1161       \n  Branches         0       0       \n  Methods          0       0       \n======================================\n  Hit           1115    1115       \n  Partial          0       0       \n  Missed          46      46       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/6365ce37db579b7df3b6576f6e8bd52b8778ecca...89138e84a123191264f794de594324224a45a017) as of [`89138e8`](https://codecov.io/github/formly-js/angular-formly/commit/89138e84a123191264f794de594324224a45a017)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=89138e84a123191264f794de594324224a45a017)\n1. `+0.35%` via [...alidationMessages.js#25...28](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyValidationMessages.js?ref=89138e84a123191264f794de594324224a45a017#25) \n2. `+0.26%` via [src/test.utils.js#38...40](https://codecov.io/github/formly-js/angular-formly/src/test.utils.js?ref=89138e84a123191264f794de594324224a45a017#38) \n3. `+0.26%` via [...s/formlyUsability.js#18...20](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyUsability.js?ref=89138e84a123191264f794de594324224a45a017#18) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=89138e84a123191264f794de594324224a45a017)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=7c211b8a389ade1a19923ebeb5115194927febf5) is `95.86%`\n\n> Merging **#667** into **master** will decrease coverage by **-0.17%** as of [`7c211b8`](https://codecov.io/github/formly-js/angular-formly/commit/7c211b8a389ade1a19923ebeb5115194927febf5)\n\n``` diff\n@@            master    #667   diff @@\n======================================\n  Files           16      16       \n  Stmts         1161    1161       \n  Branches         0       0       \n  Methods          0       0       \n======================================\n- Hit           1115    1113     -2\n  Partial          0       0       \n- Missed          46      48     +2\n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/953284554c3487f3c920dc46b1c0f710dc3547f1...7c211b8a389ade1a19923ebeb5115194927febf5) as of [`7c211b8`](https://codecov.io/github/formly-js/angular-formly/commit/7c211b8a389ade1a19923ebeb5115194927febf5)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=7c211b8a389ade1a19923ebeb5115194927febf5)\n1. `+0.35%` via [...alidationMessages.js#25...28](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyValidationMessages.js?ref=7c211b8a389ade1a19923ebeb5115194927febf5#25) \n2. `+0.26%` via [...s/formlyUsability.js#18...20](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyUsability.js?ref=7c211b8a389ade1a19923ebeb5115194927febf5#18) \n3. `+0.26%` via [src/test.utils.js#38...40](https://codecov.io/github/formly-js/angular-formly/src/test.utils.js?ref=7c211b8a389ade1a19923ebeb5115194927febf5#38) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=7c211b8a389ade1a19923ebeb5115194927febf5)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/gh/formly-js/angular-formly/pull/668?src=pr) is **95.86%**\n\n> Merging [#668](https://codecov.io/gh/formly-js/angular-formly/pull/668?src=pr) into [master](https://codecov.io/gh/formly-js/angular-formly/branch/master?src=pr) will decrease coverage by **<.01%**\n1. 2 files in `src` were modified. [more](https://codecov.io/gh/formly-js/angular-formly/commit/c58f4d6130c34f9fc9999cfb11bf2cbfa38dfc9c/changes?src=pr#737263) \n   - Misses `+1` \n   - Hits `+150`\n2. File `src/index.common.js` (not in diff) was modified. [more](https://codecov.io/gh/formly-js/angular-formly/commit/c58f4d6130c34f9fc9999cfb11bf2cbfa38dfc9c/changes?src=pr#7372632F696E6465782E636F6D6D6F6E2E6A73) \n   - Misses `0` \n   - Partials `0` \n   - Hits `-1`\n3. File `...y-form.controller.js` (not in diff) was deleted. [more](https://codecov.io/gh/formly-js/angular-formly/commit/c58f4d6130c34f9fc9999cfb11bf2cbfa38dfc9c/changes?src=pr#7372632F646972656374697665732F666F726D6C792D666F726D2E636F6E74726F6C6C65722E6A73)\n\n``` diff\n@@             master    #668   diff @@\n=======================================\n  Files            17      16     -1   \n  Lines          1164    1161     -3   \n  Methods           0       0          \n  Branches          0       0          \n=======================================\n- Hits           1116    1113     -3   \n  Misses           48      48          \n  Partials          0       0          \n```\n\n[![Sunburst](https://codecov.io/gh/formly-js/angular-formly/pull/668/graphs/sunburst.svg?src=pr&size=150)](https://codecov.io/gh/formly-js/angular-formly/pull/668?src=pr)\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [a4c54bb...c58f4d6](https://codecov.io/gh/formly-js/angular-formly/compare/a4c54bbd5b8a9e44bbbd328e33ce9a46dc05e344...c58f4d6130c34f9fc9999cfb11bf2cbfa38dfc9c)\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=2619e330349396d18d92648ac8481294de9a9fd0) is `95.87%`\n\n> Merging **#669** into **master** will increase coverage by **+0.01%** as of [`2619e33`](https://codecov.io/github/formly-js/angular-formly/commit/2619e330349396d18d92648ac8481294de9a9fd0)\n\n``` diff\n@@            master    #669   diff @@\n======================================\n  Files           16      16       \n  Stmts         1161    1163     +2\n  Branches         0       0       \n  Methods          0       0       \n======================================\n+ Hit           1113    1115     +2\n  Partial          0       0       \n  Missed          48      48       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/4fda1ed67e8c2931b64635cec6112e56432d0081...2619e330349396d18d92648ac8481294de9a9fd0) as of [`2619e33`](https://codecov.io/github/formly-js/angular-formly/commit/2619e330349396d18d92648ac8481294de9a9fd0)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=2619e330349396d18d92648ac8481294de9a9fd0)\n1. `+0.34%` via [...alidationMessages.js#25...28](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyValidationMessages.js?ref=2619e330349396d18d92648ac8481294de9a9fd0#25) \n2. `+0.26%` via [src/test.utils.js#38...40](https://codecov.io/github/formly-js/angular-formly/src/test.utils.js?ref=2619e330349396d18d92648ac8481294de9a9fd0#38) \n3. `+0.26%` via [...s/formlyUsability.js#18...20](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyUsability.js?ref=2619e330349396d18d92648ac8481294de9a9fd0#18) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=2619e330349396d18d92648ac8481294de9a9fd0)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/github/formly-js/angular-formly?ref=25c89087c857a458a4782115426020ff727e377e) is `95.87%`\n\n> Merging **#670** into **master** will not affect coverage as of [`25c8908`](https://codecov.io/github/formly-js/angular-formly/commit/25c89087c857a458a4782115426020ff727e377e)\n\n``` diff\n@@            master    #670   diff @@\n======================================\n  Files           16      17     +1\n  Stmts         1163    1164     +1\n  Branches         0       0       \n  Methods          0       0       \n======================================\n+ Hit           1115    1116     +1\n  Partial          0       0       \n  Missed          48      48       \n```\n\n> Review entire [Coverage Diff](https://codecov.io/github/formly-js/angular-formly/compare/21e96f1099e8c4bfcd8e8a900cdd2e771018898a...25c89087c857a458a4782115426020ff727e377e) as of [`25c8908`](https://codecov.io/github/formly-js/angular-formly/commit/25c89087c857a458a4782115426020ff727e377e)\n\n---\n\n### [Uncovered Suggestions](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=25c89087c857a458a4782115426020ff727e377e)\n1. `+0.34%` via [...alidationMessages.js#25...28](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyValidationMessages.js?ref=25c89087c857a458a4782115426020ff727e377e#25) \n2. `+0.26%` via [...s/formlyUsability.js#18...20](https://codecov.io/github/formly-js/angular-formly/src/providers/formlyUsability.js?ref=25c89087c857a458a4782115426020ff727e377e#18) \n3. `+0.26%` via [src/test.utils.js#38...40](https://codecov.io/github/formly-js/angular-formly/src/test.utils.js?ref=25c89087c857a458a4782115426020ff727e377e#38) \n4. _[See 7 more...](https://codecov.io/github/formly-js/angular-formly/features/suggestions?ref=25c89087c857a458a4782115426020ff727e377e)_\n\n> Powered by [Codecov](https://codecov.io). Updated on successful CI builds.\n. ## [Current coverage](https://codecov.io/gh/formly-js/angular-formly/pull/699?src=pr) is 95.89% (diff: 100%)\n\n> Merging [#699](https://codecov.io/gh/formly-js/angular-formly/pull/699?src=pr) into [master](https://codecov.io/gh/formly-js/angular-formly/branch/master?src=pr) will increase coverage by **0.01%**\n\n``` diff\n@@             master       #699   diff @@\n==========================================\n  Files            17         17          \n  Lines          1164       1169     +5   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits           1116       1121     +5   \n  Misses           48         48          \n  Partials          0          0          \n```\n\n[![Sunburst](https://codecov.io/gh/formly-js/angular-formly/pull/699/graphs/sunburst.svg?size=150&src=pr)](https://codecov.io/gh/formly-js/angular-formly/pull/699?src=pr)\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [a4c54bb...6260cca](https://codecov.io/gh/formly-js/angular-formly/compare/a4c54bbd5b8a9e44bbbd328e33ce9a46dc05e344...6260cca9e95ad5c29887c4b0adc3a0fe131f3af9?src=pr)\n. ## [Current coverage](https://codecov.io/gh/formly-js/angular-formly/pull/709?src=pr) is 95.93% (diff: 100%)\n\n> Merging [#709](https://codecov.io/gh/formly-js/angular-formly/pull/709?src=pr) into [master](https://codecov.io/gh/formly-js/angular-formly/branch/master?src=pr) will increase coverage by **0.04%**\n\n``` diff\n@@             master       #709   diff @@\n==========================================\n  Files            17         17          \n  Lines          1169       1181    +12   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits           1121       1133    +12   \n  Misses           48         48          \n  Partials          0          0          \n```\n\n![Sunburst](https://codecov.io/gh/formly-js/angular-formly/pull/709/graphs/sunburst.svg?size=150&src=pr)\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [2073a91...7f8601c](https://codecov.io/gh/formly-js/angular-formly/compare/2073a91db8041f91ddc27303e269515881f05d66...7f8601c3d2d9ffb962fda725b0e1ef7f31ceaf73?src=pr)\n. ## [Current coverage](https://codecov.io/gh/formly-js/angular-formly/pull/728?src=pr) is 95.93% (diff: 100%)\n> Merging [#728](https://codecov.io/gh/formly-js/angular-formly/pull/728?src=pr) into [master](https://codecov.io/gh/formly-js/angular-formly/branch/master?src=pr) will not change coverage\n\n```diff\n@@             master       #728   diff @@\n==========================================\n  Files            17         17          \n  Lines          1181       1181          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits           1133       1133          \n  Misses           48         48          \n  Partials          0          0          \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [fc45fb3...ed1fcfc](https://codecov.io/gh/formly-js/angular-formly/compare/fc45fb3541c70d6499351fc158907c14f4632791...ed1fcfcda8017dbcf03a0fd0b56040535b511bec?src=pr). ",
    "SchizoDuckie": "I'm not quite certain yet, but I think this would be super handy for me. \nI'm doing some revalidation operations directly on the model right now because I have the need to trigger specific revalidations when (loosely) linked properties change. Currently i'm doing that like this. \n\n``` javascript\nrevalidateRowSelectors = function() {\n    self.fields.map(function(field) {\n        if(someConditionThatMatches50PercentOfMyForm) {\n            field.fieldGroup[0].formControl.$validate();\n        }\n    });\n};\n```\n\nMaybe we can have some sort of revalidation expression on top of this?\n\n[edit] Also, I think i've found what you were looking for ;-)\n[![image](https://cloud.githubusercontent.com/assets/111710/8915095/3c95d4e0-34a3-11e5-917b-ac51aac3dcaf.png)](https://www.youtube.com/watch?v=dQw4w9WgXcQ)\n. update on this: I have found out that [when I define the model at the same time as the fields promise returns](http://plnkr.co/edit/ou2sn4gI7bOoXa07a5lD?p=preview), the first part of this problem is mitigated. The only thing that doesn't fire now are the watchersthat are defined via expressionProperties.\n\n@kentcdodds any ideas?\n. Not a problem man, you're busy juggling 2 frameworks, 3 personal projects and then doing all the videos. And I thought _I_ was busy :shipit: \n. Same here :+1: plus, this is probably not a fun one to investigate.\n\nIf I can do anything to help clarify the problem, just shout.\n. Oh hey, completely missed this notification. I will try to give you a more detailed example tonight! \n. So, some more detailed reproduce steps, I hope this clarifies some things. I didn't have time tonight to further trim the example, sorry for that, if you still need me to just shout.\n- load http://plnkr.co/edit/ou2sn4gI7bOoXa07a5lD?p=preview\n- uncheck the 'awesome' checkbox\n- Type in the textarea\n- observe that the watcher is not firing, not triggering the default behavior of blocking the typing into 'whyNot'.\n- expresionProperties _are_ firing (see console.log) because I define both vm.model and vm.fields at the same time (see script.js line 64), after the JSON is loaded and pre-parsed. When vm.model is defined first and vm.fields is loaded async, expressionProperties do not work.\n. Thanks man! I've fixed this indeed by defining both my model and fields only after my JSON loader has finished loading and preparsing the JSON, ergo, in the .then() for the .load() :shipit: \n\nSo Instead of:\n\n**define early**\n\n```\nself.model = data.engine;\nself.fields = null;\nFormlyLoader.load('CustomSearchEngine').then(function(fields) {\n    self.fields = fields;\n});\n```\n\n**define late**\n\n```\nFormlyLoader.load('CustomSearchEngine').then(function(fields) {\n    self.model = data.engine;\n    self.fields = fields;\n});\n```\n\n*\\* Async loaded form with asyncValidators, hideExpressions and reused model properties: **\n\n![image](https://cloud.githubusercontent.com/assets/111710/10260182/5c2b290a-6972-11e5-97f4-3c9cfe378ad9.png)\n[source json](https://github.com/SchizoDuckie/DuckieTV/blob/angular/templates/formly-forms/CustomSearchEngine.json)\nSmall downside of this is that now I need a loading spinner to show before the form has loaded, but that's easy!\n. No sweat! You have a new baby and I've been swamped myself too!\n. I'm not quite certain yet, but I think this would be super handy for me. \nI'm doing some revalidation operations directly on the model right now because I have the need to trigger specific revalidations when (loosely) linked properties change. Currently i'm doing that like this. \n\n``` javascript\nrevalidateRowSelectors = function() {\n    self.fields.map(function(field) {\n        if(someConditionThatMatches50PercentOfMyForm) {\n            field.fieldGroup[0].formControl.$validate();\n        }\n    });\n};\n```\n\nMaybe we can have some sort of revalidation expression on top of this?\n\n[edit] Also, I think i've found what you were looking for ;-)\n[![image](https://cloud.githubusercontent.com/assets/111710/8915095/3c95d4e0-34a3-11e5-917b-ac51aac3dcaf.png)](https://www.youtube.com/watch?v=dQw4w9WgXcQ)\n. update on this: I have found out that [when I define the model at the same time as the fields promise returns](http://plnkr.co/edit/ou2sn4gI7bOoXa07a5lD?p=preview), the first part of this problem is mitigated. The only thing that doesn't fire now are the watchersthat are defined via expressionProperties.\n\n@kentcdodds any ideas?\n. Not a problem man, you're busy juggling 2 frameworks, 3 personal projects and then doing all the videos. And I thought _I_ was busy :shipit: \n. Same here :+1: plus, this is probably not a fun one to investigate.\n\nIf I can do anything to help clarify the problem, just shout.\n. Oh hey, completely missed this notification. I will try to give you a more detailed example tonight! \n. So, some more detailed reproduce steps, I hope this clarifies some things. I didn't have time tonight to further trim the example, sorry for that, if you still need me to just shout.\n- load http://plnkr.co/edit/ou2sn4gI7bOoXa07a5lD?p=preview\n- uncheck the 'awesome' checkbox\n- Type in the textarea\n- observe that the watcher is not firing, not triggering the default behavior of blocking the typing into 'whyNot'.\n- expresionProperties _are_ firing (see console.log) because I define both vm.model and vm.fields at the same time (see script.js line 64), after the JSON is loaded and pre-parsed. When vm.model is defined first and vm.fields is loaded async, expressionProperties do not work.\n. Thanks man! I've fixed this indeed by defining both my model and fields only after my JSON loader has finished loading and preparsing the JSON, ergo, in the .then() for the .load() :shipit: \n\nSo Instead of:\n\n**define early**\n\n```\nself.model = data.engine;\nself.fields = null;\nFormlyLoader.load('CustomSearchEngine').then(function(fields) {\n    self.fields = fields;\n});\n```\n\n**define late**\n\n```\nFormlyLoader.load('CustomSearchEngine').then(function(fields) {\n    self.model = data.engine;\n    self.fields = fields;\n});\n```\n\n*\\* Async loaded form with asyncValidators, hideExpressions and reused model properties: **\n\n![image](https://cloud.githubusercontent.com/assets/111710/10260182/5c2b290a-6972-11e5-97f4-3c9cfe378ad9.png)\n[source json](https://github.com/SchizoDuckie/DuckieTV/blob/angular/templates/formly-forms/CustomSearchEngine.json)\nSmall downside of this is that now I need a loading spinner to show before the form has loaded, but that's easy!\n. No sweat! You have a new baby and I've been swamped myself too!\n. ",
    "alxvallejo": "I'm confused, does this mean you need to set a optionsTypes, like from the example? That's a lot of code for a simple comparison validator.\nhttp://angular-formly.com/#/example/other/matching-two-fields\n. I'm confused, does this mean you need to set a optionsTypes, like from the example? That's a lot of code for a simple comparison validator.\nhttp://angular-formly.com/#/example/other/matching-two-fields\n. ",
    "mota57": "thank you soo much guys it helps me a lot.. thank you soo much guys it helps me a lot.. ",
    "andreystehno": "But this is bug. . But this is bug. . ",
    "david-dlc-cerezo": "https://github.com/formly-js/angular-formly/issues/741. I was getting the same error, and in my case it happened because in `<formly-form form=\"foo\"></formly-form>`, `foo` wasn't undefined. Check the parameter on you are passing as `form`, this might be the problem.. https://github.com/formly-js/angular-formly/issues/741. I was getting the same error, and in my case it happened because in `<formly-form form=\"foo\"></formly-form>`, `foo` wasn't undefined. Check the parameter on you are passing as `form`, this might be the problem.. ",
    "bmacheski": "10/10 :+1: \n. Sure. I don't mind at all.\n. 10/10 :+1: \n. Sure. I don't mind at all.\n. ",
    "amangupta01": "Hey @kentcdodds, I'm beginner in opensource. Can you please give me some instructions to make some meaningful changes in code.. Thanks @kentcdodds, but I know how to contribute and creating pull requests stuff and I have tried many projects but I can't find bugs and thus still haven't changed any code a bit.. Hey @kentcdodds, I'm beginner in opensource. Can you please give me some instructions to make some meaningful changes in code.. Thanks @kentcdodds, but I know how to contribute and creating pull requests stuff and I have tried many projects but I can't find bugs and thus still haven't changed any code a bit.. ",
    "alvarezmario": "@benoror @kentcdodds Thanks for your help. I've found that what I needed is to add display block the the `ng-form`. Now is working fine.\n. @benoror @kentcdodds Thanks for your help. I've found that what I needed is to add display block the the `ng-form`. Now is working fine.\n. ",
    "netowp": "@benoror Ben, where is this `panel.html` file?\n\n```\n    formlyConfigProvider.setWrapper({\n      name: 'panel',\n      templateUrl: 'panel.html'\n    });\n```\n. Thanks, @benoror! I was so confused about that, since JSBin doesn't support multiple files. :)\n. @benoror Ben, where is this `panel.html` file?\n\n```\n    formlyConfigProvider.setWrapper({\n      name: 'panel',\n      templateUrl: 'panel.html'\n    });\n```\n. Thanks, @benoror! I was so confused about that, since JSBin doesn't support multiple files. :)\n. ",
    "kwypchlo": "Thanks @kentcdodds for the idea however I cannot use `data: {originalModel: vm.model}` because I have my formly directive inside `ng-repeat` so my `vm.model` is array of models, not the exact model that I want.\n\nI will try to compose PR this week, however if you have other workaround I will gladly check if it could work for my case :)\n. This looks good and legit workaround :) It will definately work in my case. I will try to come up with PR anyway as keeping original model reference might be a good feature anyway.\n. @psuedoSudo if you return `$q.all(promises)` at the moment of the return, `promises` variable will be equal to empty array thus anything that attaches itself with `.then` to the result of this function will be resolved at the moment of declaration with empty argument. This is because `$timeout` will wait for the next event loop to be executed and by then, `$q.all([])` will already be resolved and anything you push to the `promises` array will be ignored. Correct me if I'm wrong please :)\n. /me pokes @kentcdodds \nI've added tests and refactored my code a bit to work with fields with custom model or relative model defined by string. How does it look now? I may add some docs as a cherry on top if you want to accept this feature.\n. I'm just not sure about my 'watcher grouping' magic. It seems to be working fine but I was wondering if it was so easy to implement why angular team didn't implement it globally in the core...\n. @kentcdodds it seems like a valid case, I have updated the PR to incorporate your suggestion\n. > We already have a mechanism for adding a watcher to a field\n\n@kentcdodds we don't, that's why I wanted to be able to add watchers through `extras.watch`.\n\nScenarios:\n- if you do not turn `manualModelWatcher` on you will end up with a deep model watcher.\n- if you switch 'manualModelWatcher' to true, the deep model watcher will not get created and you will be able to define number of custom watchers like `[model.type, () => model.type, 'model.collection']`. This way you do not have the overhead of watching whole model if you know that your form field should only react to couple of changes\n- if you define 'manualModelWatcher' as a function you can have additional form watcher that is not dependant on any field, for example `manualModelWatcher: () => ctrl.loading` but you still would like to define small watches on your fields just like on the second scenario\n. @kentcdodds ok this is a gamechanger... why did I even work on this if this was already available :ghost: \n. @kentcdodds OH WAIT! You have to manually define listener for each of these expressions in your implementation of `watcher` property. What I propose is that you just define expressions that should be checked to run the internal functions in formly. I do not need any callback for that. \n\nThese two seem to be similar but in fact do 2 different things.\n. @kentcdodds well, I might try but it will be more complicated. I however agree that adding `extras.watch` when we already have `watcher` property will be confusing for developers - 'which one should I use?' Worst case scenario we could rename `extras.watch` to `extras.manualModelWatcher` to make these two functionalities separate but that's a cheap trick :palm_tree: \n\nBtw your api is broken for a field with custom model and string expression in watcher. `model` in the expression will be referenced by the global model, not the one from your field. I fixed this case in my PR for my watchers by using `$parse`. \n. We could consider doing 2 things:\n- add `watcher.runFieldExpressions` property to single watcher from `watcher` array\n- empty listener watcher would not throw error if `runFieldExpressions` is set to true and `expression` is defined\n\nThis would mean that instead of:\n\n```\n{\n  ...\n  extras: {\n    watch: ['model.type']\n  }\n}\n```\n\nwe would have:\n\n```\n{\n  ...\n  watcher: [{\n    expression: 'model.type',\n    runFieldExpressions: true\n  }]\n}\n```\n\n---\n\nThat said, this can be done but it may seem a bit confusing. It could be less confusing if `runFieldExpressions` would be `true` by default but this would mean that all the people that used watch expressions with listeners and did not expect them to run the field expressions will get field expressions running (this adds a bit of performance overhead but well... it isn't that bad of idea to run the field expressions on custom watchers).\nWIth that in mind we would end up with:\n\n```\n{\n  ...\n  watcher: [{expression: 'model.type'}]\n}\n```\n\n---\n\nHOWEVER this still doesn't look right. For me, this `watcher` feature would seem to be overloaded with second functionality that doesn't quite fit in there. I'm wondering if mixing these two is a good idea and I'm even closer to saying that we should rename `extras.watch` to `extras.manualModelWatcher` and it will seem like a valid feature.\n\n@kentcdodds what do you think? I'm torn apart :) One way or the other, I'd like this feature pushed as soon as possible because it gives enormous boost to me app at work.\n. @kentcdodds ok, sounds fine however I talked with @skosno at work and he came up with other suggestion. He suggested that we could switch to watching just the expressions rather than specifying additional watcher. In that case simple field like\n\n```\n{\n  key: 'type',\n  hideExpression: 'model.type === \"some-type\"'\n}\n```\n\nwould require no additional work done if you disable the deep model watcher because it would watch the expression itself.\n\nOn the other hand, there are cases where specifying single watcher for all expression properties would be beneficial ie:\n\n```\n{\n  key: 'type',\n  expressionProperties: {\n    'templateOptions.label': 'model.type + \" label\"',\n    'templateOptions.additionalOptions': 'data.getOptionsForType(model.type)',\n  },\n  hideExpression: 'model.type === data.someHeavyMethod()',\n  extras: {\n    manualModelWatcher: true\n  },\n  watcher: [{\n    expression: 'model.type',\n    runFieldExpressions: true\n  }]\n}\n```\n\nIn this example we would disable expressions watchers for this field and just enable custom watchers that have `runFieldExpressions: true`.\n\nHow does it sound?\n. @kentcdodds that sounds fine, I will let you know when I'm ready\n. Ok @kentcdodds, I think I did it. However I went a little overboard so we might consider reverting one functionality but more on it later. Basically I did:\n- add optional `manualModelWatcher` to form config - it can be function or boolean - it disables global model watchers for that form\n- add optional `watchAllExpressions` to form config - when turned on, formly will add a deep watcher for each expression (`templateExpressions` and `hideExpression`). This option really makes sense only when `manualModelWatcher` is enabled but I didn't know how to validate it in apiCheck so we may let it be just optional or you may help me out with this conditional apiCheck validation\n- add optional `runFieldExpressions` to existing watcher functionality. If `runFieldExpressions` is enabled, it will run all field expressions after the watcher listener is finished. Also, now the `listener` property is optional due to fact that it can be omitted when `runFieldExpressions` is turned on. It could be validated in apiCheck but again, I didn't know how to do that.\n- renamed internal function `refrencesCurrentlyWatchedModel` to `referencesCurrentlyWatchedModel` - it had typeo\n- fixed `hideExpression` to be evaluated in the same model context that `templateProperties` are. This is breaking change but if you had nested or custom model on a field you had different evaluation context for basic `expressionProperties` (`model` referenced correct field model) and for `hideExpression` (`model` referenced always the model that was passed into form, not the one that the field defines). That being said, I can revert this if this is \"too much\" :)\n\nI have written some tests and smoke tested these features on my work project and it works fine.\nOn very complex page with numerous forms, it turned out I have 2 hideExpressions and 1 expressionProperty which takes around 0.05ms in total for each digest cycle :) Not bad I'd say.\n. @kentcdodds I know about that reason (however this is valid only when you `ng-if` the field when `hide: true`, it could work fine if you use `ng-hide` for that) but it's not about the scope, it's just about what the `model` property is referring to (idea seems simple enough and works fine). If you could take a look at this anyway and worst case scenario I change it back to what it was.\n\nexample:\n\n```\nour model: {\n  game: 'scrabbles',\n  player: {\n    name: 'Karol',\n    type: 'casual'\n  }\n}\n```\n\nThis is how it works in the current latest formly release:\n\n```\n{\n  key: 'name',\n  model: 'model.player',\n  expressionProperties: {\n    'templateOptions.label': 'model.type + \" player name\"'\n  },\n  hideExpression: 'model.player.type === \"casual\"'\n}\n```\n\nThis is how it works with my PR (notice `model` in `hideExpression` refers to `model.player`)\n\n```\n{\n  key: 'name',\n  model: 'model.player',\n  expressionProperties: {\n    'templateOptions.label': 'model.type + \" player name\"'\n  },\n  hideExpression: 'model.type === \"casual\"'\n}\n```\n. @kentcdodds the problem is that this object is used to evaluate the `field.model` itself so if I do:\n\n```\nreturn {\n  model: field.model || $scope.model,\n  options: field,\n  index,\n  formState: $scope.options.formState,\n  formId: $scope.formId,\n}\n```\n\nIt will evaluate the model the wrong way in `initModel` when `field.model` is a string. It seems that if I do:\n\n```\nreturn {\n  model: angular.isObject(field.model) ? field.model : $scope.model,\n  options: field,\n  index,\n  formState: $scope.options.formState,\n  formId: $scope.formId,\n}\n```\n\nit all works fine but it seems a little bit hacky to me... it would take `$scope.model` as a model until the `field.model` is initialized (if it is defined as a string). What do you think?\n\nAnyway, I will revert the fix for `model` property for now and I will leave this PR just with the watcher stuff and push the `model` fix in another PR when this gets accepted.\nHow does the code look to you besides of that issue?\n. @kentcdodds cool! When this is accepted I could prepare the fix for the `model` reference in hide expression and watchers.\n. Cool! :)\n. Hey @slavafomin, check out this thread to get the idea how to get around your issue https://github.com/formly-js/angular-formly/issues/672\n\nYou can define custom watcher on a `form` that will evaluate `expressionProperties` or if you dont have model, then even better just set `watchAllExpressions` on form options to `true` and be done with it :)\n. Yeah @kentcdodds I've just edited the message :) it took me a while to prepare this PR and I noticed I didn't conform with commit message standard just after I pushed the PR.\n. @kentcdodds yeah sorry I'm just super busy right now :) You are right, I will refactor this piece of code when I get a chance and ping you afterwards\n. @kentcdodds I've updated this PR with some refactoring. Now `field.model` will always be initialized on `initModel` so we'll always have good model reference through `field.model` in form context.\n. cool, thanks @kentcdodds \nbtw any idea why the changelog is not getting automatically updated with new releases? https://github.com/formly-js/angular-formly/releases\nis there new changelog where such breaking change as the one here would be documented?\n. please provide some description next time :)\n. I prepared pull request #657 that fixes that issue, sorry for the inconvenience.\n@BarryThePenguin could you take a look?\n. LGTM if you have use case for it\n. @pcardune could you provide some short docs on your feature here? http://docs.angular-formly.com/docs/formlyconfig (use suggest edit button in top right corner).\n\nAre you still maintaining these docs @kentcdodds? I should write some docs to the stuffed I pushed too I guess...\n. Well as to my knowledge, there are 2 separate watchers set up for `hideExpressions` - one on the global model, the one that you have `firstName` defined on and other for the subform and it watches only `vm.model.address` object. That said, only that second watcher fires hideExpressions on it's form so when you modify `firstName` the child form is not aware of that and does not fire any expressions.\n\nYou kind of hacked the hideExpression to use `vm.model` from the closure but you should probably only use arguments that hideExpression provides - then you would see that you cannot access `firstName` anyhow because your model is only `vm.model.address`.\n\nYou can however set up manual watcher on the child form and it will run the expressions when it changes:\n\n```\n{\n  watcher: {\n    expression: function() {\n      return vm.model.firstName;\n    },\n    runFieldExpressions: true\n  }\n}\n```\n. Yes, other than that you can specify not to use model watcher (which is expensive if your models weight a lot) and use form option `watchAllExpressions` and set it to `true` which will evaluate all expressions on each digest cycle. If you chose that, you can also try to disable the automatic model watcher which would be most likely redundant (set form option `manualModelWatcher` to `true`). That should do the trick also :)\n. @mhawila use `options` parameter documented in here http://docs.angular-formly.com/docs/formly-form\n. Hello, can you provide a fiddle for your case? There is only one place in the whole code where expression `field.model || model` is used and it never caused any troubles (so far).\n. Why would you want to set your model to null in any case? Model needs to be an object, it can be empty object like `{}` or `Object.create(null)` but never null because if you decide to put some property on it, you will not be able to because you cannot store any property on null. If you want to clear the model completely, use an empty object as replacement `{}`.\n. Well I'm not a fan of allowing `null` as a model - this will only cause hard to catch errors on any taken action. Putting `null` as a model and observing if errors are thrown is not a good way of debugging your code :) That said, your patch seems simple enough so I don't see a reason not to include it.\nI think we could use a second opinion here, anyone?\n. @formly-js/angular-formly-collaborators second opinion anyone please?\n. LGTM\n. Looks good. I would even suggest to include this as default behavior.\n. I believe your plunker works properly. Parser will store the value as uppercase in the model. If you add another field to your html ex. `<input ng-model=\"model.lastName\">` and try to write something there, you will see that your field in formly will receive uppercase value due to a formatter. \r\nYou probably expect the text to be uppercased in the formly field \"live\" when you write something but this is not the case here, parsers work on model when user enters some value through the input and formatters work when the model value changes. To achieve visually uppercase letters in the input use css text transform.. Thanks @kentcdodds for the idea however I cannot use `data: {originalModel: vm.model}` because I have my formly directive inside `ng-repeat` so my `vm.model` is array of models, not the exact model that I want.\n\nI will try to compose PR this week, however if you have other workaround I will gladly check if it could work for my case :)\n. This looks good and legit workaround :) It will definately work in my case. I will try to come up with PR anyway as keeping original model reference might be a good feature anyway.\n. @psuedoSudo if you return `$q.all(promises)` at the moment of the return, `promises` variable will be equal to empty array thus anything that attaches itself with `.then` to the result of this function will be resolved at the moment of declaration with empty argument. This is because `$timeout` will wait for the next event loop to be executed and by then, `$q.all([])` will already be resolved and anything you push to the `promises` array will be ignored. Correct me if I'm wrong please :)\n. /me pokes @kentcdodds \nI've added tests and refactored my code a bit to work with fields with custom model or relative model defined by string. How does it look now? I may add some docs as a cherry on top if you want to accept this feature.\n. I'm just not sure about my 'watcher grouping' magic. It seems to be working fine but I was wondering if it was so easy to implement why angular team didn't implement it globally in the core...\n. @kentcdodds it seems like a valid case, I have updated the PR to incorporate your suggestion\n. > We already have a mechanism for adding a watcher to a field\n\n@kentcdodds we don't, that's why I wanted to be able to add watchers through `extras.watch`.\n\nScenarios:\n- if you do not turn `manualModelWatcher` on you will end up with a deep model watcher.\n- if you switch 'manualModelWatcher' to true, the deep model watcher will not get created and you will be able to define number of custom watchers like `[model.type, () => model.type, 'model.collection']`. This way you do not have the overhead of watching whole model if you know that your form field should only react to couple of changes\n- if you define 'manualModelWatcher' as a function you can have additional form watcher that is not dependant on any field, for example `manualModelWatcher: () => ctrl.loading` but you still would like to define small watches on your fields just like on the second scenario\n. @kentcdodds ok this is a gamechanger... why did I even work on this if this was already available :ghost: \n. @kentcdodds OH WAIT! You have to manually define listener for each of these expressions in your implementation of `watcher` property. What I propose is that you just define expressions that should be checked to run the internal functions in formly. I do not need any callback for that. \n\nThese two seem to be similar but in fact do 2 different things.\n. @kentcdodds well, I might try but it will be more complicated. I however agree that adding `extras.watch` when we already have `watcher` property will be confusing for developers - 'which one should I use?' Worst case scenario we could rename `extras.watch` to `extras.manualModelWatcher` to make these two functionalities separate but that's a cheap trick :palm_tree: \n\nBtw your api is broken for a field with custom model and string expression in watcher. `model` in the expression will be referenced by the global model, not the one from your field. I fixed this case in my PR for my watchers by using `$parse`. \n. We could consider doing 2 things:\n- add `watcher.runFieldExpressions` property to single watcher from `watcher` array\n- empty listener watcher would not throw error if `runFieldExpressions` is set to true and `expression` is defined\n\nThis would mean that instead of:\n\n```\n{\n  ...\n  extras: {\n    watch: ['model.type']\n  }\n}\n```\n\nwe would have:\n\n```\n{\n  ...\n  watcher: [{\n    expression: 'model.type',\n    runFieldExpressions: true\n  }]\n}\n```\n\n---\n\nThat said, this can be done but it may seem a bit confusing. It could be less confusing if `runFieldExpressions` would be `true` by default but this would mean that all the people that used watch expressions with listeners and did not expect them to run the field expressions will get field expressions running (this adds a bit of performance overhead but well... it isn't that bad of idea to run the field expressions on custom watchers).\nWIth that in mind we would end up with:\n\n```\n{\n  ...\n  watcher: [{expression: 'model.type'}]\n}\n```\n\n---\n\nHOWEVER this still doesn't look right. For me, this `watcher` feature would seem to be overloaded with second functionality that doesn't quite fit in there. I'm wondering if mixing these two is a good idea and I'm even closer to saying that we should rename `extras.watch` to `extras.manualModelWatcher` and it will seem like a valid feature.\n\n@kentcdodds what do you think? I'm torn apart :) One way or the other, I'd like this feature pushed as soon as possible because it gives enormous boost to me app at work.\n. @kentcdodds ok, sounds fine however I talked with @skosno at work and he came up with other suggestion. He suggested that we could switch to watching just the expressions rather than specifying additional watcher. In that case simple field like\n\n```\n{\n  key: 'type',\n  hideExpression: 'model.type === \"some-type\"'\n}\n```\n\nwould require no additional work done if you disable the deep model watcher because it would watch the expression itself.\n\nOn the other hand, there are cases where specifying single watcher for all expression properties would be beneficial ie:\n\n```\n{\n  key: 'type',\n  expressionProperties: {\n    'templateOptions.label': 'model.type + \" label\"',\n    'templateOptions.additionalOptions': 'data.getOptionsForType(model.type)',\n  },\n  hideExpression: 'model.type === data.someHeavyMethod()',\n  extras: {\n    manualModelWatcher: true\n  },\n  watcher: [{\n    expression: 'model.type',\n    runFieldExpressions: true\n  }]\n}\n```\n\nIn this example we would disable expressions watchers for this field and just enable custom watchers that have `runFieldExpressions: true`.\n\nHow does it sound?\n. @kentcdodds that sounds fine, I will let you know when I'm ready\n. Ok @kentcdodds, I think I did it. However I went a little overboard so we might consider reverting one functionality but more on it later. Basically I did:\n- add optional `manualModelWatcher` to form config - it can be function or boolean - it disables global model watchers for that form\n- add optional `watchAllExpressions` to form config - when turned on, formly will add a deep watcher for each expression (`templateExpressions` and `hideExpression`). This option really makes sense only when `manualModelWatcher` is enabled but I didn't know how to validate it in apiCheck so we may let it be just optional or you may help me out with this conditional apiCheck validation\n- add optional `runFieldExpressions` to existing watcher functionality. If `runFieldExpressions` is enabled, it will run all field expressions after the watcher listener is finished. Also, now the `listener` property is optional due to fact that it can be omitted when `runFieldExpressions` is turned on. It could be validated in apiCheck but again, I didn't know how to do that.\n- renamed internal function `refrencesCurrentlyWatchedModel` to `referencesCurrentlyWatchedModel` - it had typeo\n- fixed `hideExpression` to be evaluated in the same model context that `templateProperties` are. This is breaking change but if you had nested or custom model on a field you had different evaluation context for basic `expressionProperties` (`model` referenced correct field model) and for `hideExpression` (`model` referenced always the model that was passed into form, not the one that the field defines). That being said, I can revert this if this is \"too much\" :)\n\nI have written some tests and smoke tested these features on my work project and it works fine.\nOn very complex page with numerous forms, it turned out I have 2 hideExpressions and 1 expressionProperty which takes around 0.05ms in total for each digest cycle :) Not bad I'd say.\n. @kentcdodds I know about that reason (however this is valid only when you `ng-if` the field when `hide: true`, it could work fine if you use `ng-hide` for that) but it's not about the scope, it's just about what the `model` property is referring to (idea seems simple enough and works fine). If you could take a look at this anyway and worst case scenario I change it back to what it was.\n\nexample:\n\n```\nour model: {\n  game: 'scrabbles',\n  player: {\n    name: 'Karol',\n    type: 'casual'\n  }\n}\n```\n\nThis is how it works in the current latest formly release:\n\n```\n{\n  key: 'name',\n  model: 'model.player',\n  expressionProperties: {\n    'templateOptions.label': 'model.type + \" player name\"'\n  },\n  hideExpression: 'model.player.type === \"casual\"'\n}\n```\n\nThis is how it works with my PR (notice `model` in `hideExpression` refers to `model.player`)\n\n```\n{\n  key: 'name',\n  model: 'model.player',\n  expressionProperties: {\n    'templateOptions.label': 'model.type + \" player name\"'\n  },\n  hideExpression: 'model.type === \"casual\"'\n}\n```\n. @kentcdodds the problem is that this object is used to evaluate the `field.model` itself so if I do:\n\n```\nreturn {\n  model: field.model || $scope.model,\n  options: field,\n  index,\n  formState: $scope.options.formState,\n  formId: $scope.formId,\n}\n```\n\nIt will evaluate the model the wrong way in `initModel` when `field.model` is a string. It seems that if I do:\n\n```\nreturn {\n  model: angular.isObject(field.model) ? field.model : $scope.model,\n  options: field,\n  index,\n  formState: $scope.options.formState,\n  formId: $scope.formId,\n}\n```\n\nit all works fine but it seems a little bit hacky to me... it would take `$scope.model` as a model until the `field.model` is initialized (if it is defined as a string). What do you think?\n\nAnyway, I will revert the fix for `model` property for now and I will leave this PR just with the watcher stuff and push the `model` fix in another PR when this gets accepted.\nHow does the code look to you besides of that issue?\n. @kentcdodds cool! When this is accepted I could prepare the fix for the `model` reference in hide expression and watchers.\n. Cool! :)\n. Hey @slavafomin, check out this thread to get the idea how to get around your issue https://github.com/formly-js/angular-formly/issues/672\n\nYou can define custom watcher on a `form` that will evaluate `expressionProperties` or if you dont have model, then even better just set `watchAllExpressions` on form options to `true` and be done with it :)\n. Yeah @kentcdodds I've just edited the message :) it took me a while to prepare this PR and I noticed I didn't conform with commit message standard just after I pushed the PR.\n. @kentcdodds yeah sorry I'm just super busy right now :) You are right, I will refactor this piece of code when I get a chance and ping you afterwards\n. @kentcdodds I've updated this PR with some refactoring. Now `field.model` will always be initialized on `initModel` so we'll always have good model reference through `field.model` in form context.\n. cool, thanks @kentcdodds \nbtw any idea why the changelog is not getting automatically updated with new releases? https://github.com/formly-js/angular-formly/releases\nis there new changelog where such breaking change as the one here would be documented?\n. please provide some description next time :)\n. I prepared pull request #657 that fixes that issue, sorry for the inconvenience.\n@BarryThePenguin could you take a look?\n. LGTM if you have use case for it\n. @pcardune could you provide some short docs on your feature here? http://docs.angular-formly.com/docs/formlyconfig (use suggest edit button in top right corner).\n\nAre you still maintaining these docs @kentcdodds? I should write some docs to the stuffed I pushed too I guess...\n. Well as to my knowledge, there are 2 separate watchers set up for `hideExpressions` - one on the global model, the one that you have `firstName` defined on and other for the subform and it watches only `vm.model.address` object. That said, only that second watcher fires hideExpressions on it's form so when you modify `firstName` the child form is not aware of that and does not fire any expressions.\n\nYou kind of hacked the hideExpression to use `vm.model` from the closure but you should probably only use arguments that hideExpression provides - then you would see that you cannot access `firstName` anyhow because your model is only `vm.model.address`.\n\nYou can however set up manual watcher on the child form and it will run the expressions when it changes:\n\n```\n{\n  watcher: {\n    expression: function() {\n      return vm.model.firstName;\n    },\n    runFieldExpressions: true\n  }\n}\n```\n. Yes, other than that you can specify not to use model watcher (which is expensive if your models weight a lot) and use form option `watchAllExpressions` and set it to `true` which will evaluate all expressions on each digest cycle. If you chose that, you can also try to disable the automatic model watcher which would be most likely redundant (set form option `manualModelWatcher` to `true`). That should do the trick also :)\n. @mhawila use `options` parameter documented in here http://docs.angular-formly.com/docs/formly-form\n. Hello, can you provide a fiddle for your case? There is only one place in the whole code where expression `field.model || model` is used and it never caused any troubles (so far).\n. Why would you want to set your model to null in any case? Model needs to be an object, it can be empty object like `{}` or `Object.create(null)` but never null because if you decide to put some property on it, you will not be able to because you cannot store any property on null. If you want to clear the model completely, use an empty object as replacement `{}`.\n. Well I'm not a fan of allowing `null` as a model - this will only cause hard to catch errors on any taken action. Putting `null` as a model and observing if errors are thrown is not a good way of debugging your code :) That said, your patch seems simple enough so I don't see a reason not to include it.\nI think we could use a second opinion here, anyone?\n. @formly-js/angular-formly-collaborators second opinion anyone please?\n. LGTM\n. Looks good. I would even suggest to include this as default behavior.\n. I believe your plunker works properly. Parser will store the value as uppercase in the model. If you add another field to your html ex. `<input ng-model=\"model.lastName\">` and try to write something there, you will see that your field in formly will receive uppercase value due to a formatter. \r\nYou probably expect the text to be uppercased in the formly field \"live\" when you write something but this is not the case here, parsers work on model when user enters some value through the input and formatters work when the model value changes. To achieve visually uppercase letters in the input use css text transform.. ",
    "TheMcMurder": "I actually need this functionality now, I'm not a first-timer, can I still work on this bug?\n. Just adding some backup from the Angular Docs: \"$formatters: Array of functions to execute, as a pipeline, whenever the model value changes.\" (https://docs.angularjs.org/api/ng/type/ngModel.NgModelController)\n. I actually need this functionality now, I'm not a first-timer, can I still work on this bug?\n. Just adding some backup from the Angular Docs: \"$formatters: Array of functions to execute, as a pipeline, whenever the model value changes.\" (https://docs.angularjs.org/api/ng/type/ngModel.NgModelController)\n. ",
    "wowczarczyk": "Is there any way to access the parent model now in an expression? I have a field that has a model overwritten and I would like to disable it based on a property from the original model.\n. Yep, exactly that was my case. Ok, I'll work on the variable outside the formly config then.\n. Is there any way to access the parent model now in an expression? I have a field that has a model overwritten and I would like to disable it based on a property from the original model.\n. Yep, exactly that was my case. Ok, I'll work on the variable outside the formly config then.\n. ",
    "ankitprahladsoni": "Hi,\n\nI have used fieldGroup to make nested forms, and I want to display inner field based on the value of an outer field. Going through this issue, I guess this is not possible for now in angular-formly.\nPlease let me know if there's any workaround for this issue.\nI can go with a flat structure and provide a full key to each field(for example `'person.name'`, `'person.address.city'`, `'person.address.state'`), but I want to avoid such as I have a lot of nested fields. \n\nExample of my issue: http://jsbin.com/jikajomike/edit?js,output\n. Hi,\n\nI have used fieldGroup to make nested forms, and I want to display inner field based on the value of an outer field. Going through this issue, I guess this is not possible for now in angular-formly.\nPlease let me know if there's any workaround for this issue.\nI can go with a flat structure and provide a full key to each field(for example `'person.name'`, `'person.address.city'`, `'person.address.state'`), but I want to avoid such as I have a lot of nested fields. \n\nExample of my issue: http://jsbin.com/jikajomike/edit?js,output\n. ",
    "mavrick": "Hey dude,\n\nCheers for the reply. The issue I am having is around form validation with input fields\n\nI've got the `removeChromeAutoComplete`\n\n``` javascript\napp.run(['formlyConfig', 'formlyApiCheck', function(formlyConfig, formlyApiCheck) \n{\n  formlyConfig.disableWarnings = _config.env == \"prod\" ? true : false;\n  formlyConfig.extras.removeChromeAutoComplete = true;\n  formlyConfig.setWrapper({\n    templateUrl: '/tpl/validators.html',\n    types: ['input','checkbox','select','textarea','radio']\n  });\n}]);\n```\n\n``` html\n<form name=\"loginForm\" ng-submit=\"handleLoginSubmit(model)\">\n  <formly-form model=\"model\" fields=\"loginFields\" options=\"options\">\n    <button type=\"submit\" ng-disabled=\"loginForm.$invalid\" class=\"btn btn-success btn-block text-uppercase\">Sign In</button>\n  </formly-form>\n</form>\n```\n\n`loginForm.$invalid` is set to true on page refresh but the form is filled out by chrome:\n\n![Sign In Button Disabled on page refresh](http://imgur.com/2oPAOOy.png)\n\nMy input fields are built with:\n\n``` javascript\n$scope.loginFields = [\n  {\n    id: \"dfragUsername\",\n    key: \"username\",\n    type: \"input\",\n    templateOptions: {\n      required: true,\n      focus: true,\n      label: \"\",\n      placeholder: \"Username or Email Address\"\n    }\n  },\n  {\n    id: \"dfragPassword\",\n    key: \"password\",\n    type: \"input\",\n    templateOptions: {\n      required: true,\n      type: \"password\",\n      label: \"\",\n      placeholder: \"Password\"\n    }\n  }\n];\n```\n\nLogging out the `loginForm` it is in an errored state until I focus on one of the fields or the signin button\n\n_loginForm dump on page refresh:_\n\n``` json\n{\n  \"$error\": {\n    \"required\": [\n      {\n        \"$error\": {\n          \"required\": [\n            {\n              \"$validators\": {},\n              \"$asyncValidators\": {},\n              \"$parsers\": [],\n              \"$formatters\": [\n                null\n              ],\n              \"$viewChangeListeners\": [],\n              \"$untouched\": true,\n              \"$touched\": false,\n              \"$pristine\": true,\n              \"$dirty\": false,\n              \"$valid\": false,\n              \"$invalid\": true,\n              \"$error\": {\n                \"required\": true\n              },\n              \"$name\": \"dfragPassword\",\n              \"$options\": null\n            }\n          ]\n        },\n        \"$name\": \"formly_1\",\n        \"$dirty\": true,\n        \"$pristine\": false,\n        \"$valid\": false,\n        \"$invalid\": true,\n        \"$submitted\": false,\n        \"dfragUsername\": {\n          \"$viewValue\": \"mavrick\",\n          \"$modelValue\": \"mavrick\",\n          \"$validators\": {},\n          \"$asyncValidators\": {},\n          \"$parsers\": [],\n          \"$formatters\": [\n            null\n          ],\n          \"$viewChangeListeners\": [],\n          \"$untouched\": false,\n          \"$touched\": true,\n          \"$pristine\": false,\n          \"$dirty\": true,\n          \"$valid\": true,\n          \"$invalid\": false,\n          \"$error\": {},\n          \"$name\": \"dfragUsername\",\n          \"$options\": null\n        },\n        \"dfragPassword\": {\n          \"$validators\": {},\n          \"$asyncValidators\": {},\n          \"$parsers\": [],\n          \"$formatters\": [\n            null\n          ],\n          \"$viewChangeListeners\": [],\n          \"$untouched\": true,\n          \"$touched\": false,\n          \"$pristine\": true,\n          \"$dirty\": false,\n          \"$valid\": false,\n          \"$invalid\": true,\n          \"$error\": {\n            \"required\": true\n          },\n          \"$name\": \"dfragPassword\",\n          \"$options\": null\n        }\n      }\n    ]\n  },\n  \"$name\": \"loginForm\",\n  \"$dirty\": true,\n  \"$pristine\": false,\n  \"$valid\": false,\n  \"$invalid\": true,\n  \"$submitted\": false,\n  \"formly_1\": {\n    \"$error\": {\n      \"required\": [\n        {\n          \"$validators\": {},\n          \"$asyncValidators\": {},\n          \"$parsers\": [],\n          \"$formatters\": [\n            null\n          ],\n          \"$viewChangeListeners\": [],\n          \"$untouched\": true,\n          \"$touched\": false,\n          \"$pristine\": true,\n          \"$dirty\": false,\n          \"$valid\": false,\n          \"$invalid\": true,\n          \"$error\": {\n            \"required\": true\n          },\n          \"$name\": \"dfragPassword\",\n          \"$options\": null\n        }\n      ]\n    },\n    \"$name\": \"formly_1\",\n    \"$dirty\": true,\n    \"$pristine\": false,\n    \"$valid\": false,\n    \"$invalid\": true,\n    \"$submitted\": false,\n    \"dfragUsername\": {\n      \"$viewValue\": \"mavrick\",\n      \"$modelValue\": \"mavrick\",\n      \"$validators\": {},\n      \"$asyncValidators\": {},\n      \"$parsers\": [],\n      \"$formatters\": [\n        null\n      ],\n      \"$viewChangeListeners\": [],\n      \"$untouched\": false,\n      \"$touched\": true,\n      \"$pristine\": false,\n      \"$dirty\": true,\n      \"$valid\": true,\n      \"$invalid\": false,\n      \"$error\": {},\n      \"$name\": \"dfragUsername\",\n      \"$options\": null\n    },\n    \"dfragPassword\": {\n      \"$validators\": {},\n      \"$asyncValidators\": {},\n      \"$parsers\": [],\n      \"$formatters\": [\n        null\n      ],\n      \"$viewChangeListeners\": [],\n      \"$untouched\": true,\n      \"$touched\": false,\n      \"$pristine\": true,\n      \"$dirty\": false,\n      \"$valid\": false,\n      \"$invalid\": true,\n      \"$error\": {\n        \"required\": true\n      },\n      \"$name\": \"dfragPassword\",\n      \"$options\": null\n    }\n  }\n}\n```\n\n_Focus on any field or button:_\n\n``` json\n{\n  \"$error\": {},\n  \"$name\": \"loginForm\",\n  \"$dirty\": true,\n  \"$pristine\": false,\n  \"$valid\": true,\n  \"$invalid\": false,\n  \"$submitted\": false,\n  \"formly_1\": {\n    \"$error\": {},\n    \"$name\": \"formly_1\",\n    \"$dirty\": true,\n    \"$pristine\": false,\n    \"$valid\": true,\n    \"$invalid\": false,\n    \"$submitted\": false,\n    \"dfragUsername\": {\n      \"$viewValue\": \"mavrick\",\n      \"$modelValue\": \"mavrick\",\n      \"$validators\": {},\n      \"$asyncValidators\": {},\n      \"$parsers\": [],\n      \"$formatters\": [\n        null\n      ],\n      \"$viewChangeListeners\": [],\n      \"$untouched\": false,\n      \"$touched\": true,\n      \"$pristine\": false,\n      \"$dirty\": true,\n      \"$valid\": true,\n      \"$invalid\": false,\n      \"$error\": {},\n      \"$name\": \"dfragUsername\",\n      \"$options\": null\n    },\n    \"dfragPassword\": {\n      \"$viewValue\": \"mavrick\",\n      \"$modelValue\": \"mavrick\",\n      \"$validators\": {},\n      \"$asyncValidators\": {},\n      \"$parsers\": [],\n      \"$formatters\": [\n        null\n      ],\n      \"$viewChangeListeners\": [],\n      \"$untouched\": true,\n      \"$touched\": false,\n      \"$pristine\": false,\n      \"$dirty\": true,\n      \"$valid\": true,\n      \"$invalid\": false,\n      \"$error\": {},\n      \"$name\": \"dfragPassword\",\n      \"$options\": null\n    }\n  }\n}\n```\n. Thanks for the reply mate, will check it out.\n\nCheers\n. Hey dude,\n\nCheers for the reply. The issue I am having is around form validation with input fields\n\nI've got the `removeChromeAutoComplete`\n\n``` javascript\napp.run(['formlyConfig', 'formlyApiCheck', function(formlyConfig, formlyApiCheck) \n{\n  formlyConfig.disableWarnings = _config.env == \"prod\" ? true : false;\n  formlyConfig.extras.removeChromeAutoComplete = true;\n  formlyConfig.setWrapper({\n    templateUrl: '/tpl/validators.html',\n    types: ['input','checkbox','select','textarea','radio']\n  });\n}]);\n```\n\n``` html\n<form name=\"loginForm\" ng-submit=\"handleLoginSubmit(model)\">\n  <formly-form model=\"model\" fields=\"loginFields\" options=\"options\">\n    <button type=\"submit\" ng-disabled=\"loginForm.$invalid\" class=\"btn btn-success btn-block text-uppercase\">Sign In</button>\n  </formly-form>\n</form>\n```\n\n`loginForm.$invalid` is set to true on page refresh but the form is filled out by chrome:\n\n![Sign In Button Disabled on page refresh](http://imgur.com/2oPAOOy.png)\n\nMy input fields are built with:\n\n``` javascript\n$scope.loginFields = [\n  {\n    id: \"dfragUsername\",\n    key: \"username\",\n    type: \"input\",\n    templateOptions: {\n      required: true,\n      focus: true,\n      label: \"\",\n      placeholder: \"Username or Email Address\"\n    }\n  },\n  {\n    id: \"dfragPassword\",\n    key: \"password\",\n    type: \"input\",\n    templateOptions: {\n      required: true,\n      type: \"password\",\n      label: \"\",\n      placeholder: \"Password\"\n    }\n  }\n];\n```\n\nLogging out the `loginForm` it is in an errored state until I focus on one of the fields or the signin button\n\n_loginForm dump on page refresh:_\n\n``` json\n{\n  \"$error\": {\n    \"required\": [\n      {\n        \"$error\": {\n          \"required\": [\n            {\n              \"$validators\": {},\n              \"$asyncValidators\": {},\n              \"$parsers\": [],\n              \"$formatters\": [\n                null\n              ],\n              \"$viewChangeListeners\": [],\n              \"$untouched\": true,\n              \"$touched\": false,\n              \"$pristine\": true,\n              \"$dirty\": false,\n              \"$valid\": false,\n              \"$invalid\": true,\n              \"$error\": {\n                \"required\": true\n              },\n              \"$name\": \"dfragPassword\",\n              \"$options\": null\n            }\n          ]\n        },\n        \"$name\": \"formly_1\",\n        \"$dirty\": true,\n        \"$pristine\": false,\n        \"$valid\": false,\n        \"$invalid\": true,\n        \"$submitted\": false,\n        \"dfragUsername\": {\n          \"$viewValue\": \"mavrick\",\n          \"$modelValue\": \"mavrick\",\n          \"$validators\": {},\n          \"$asyncValidators\": {},\n          \"$parsers\": [],\n          \"$formatters\": [\n            null\n          ],\n          \"$viewChangeListeners\": [],\n          \"$untouched\": false,\n          \"$touched\": true,\n          \"$pristine\": false,\n          \"$dirty\": true,\n          \"$valid\": true,\n          \"$invalid\": false,\n          \"$error\": {},\n          \"$name\": \"dfragUsername\",\n          \"$options\": null\n        },\n        \"dfragPassword\": {\n          \"$validators\": {},\n          \"$asyncValidators\": {},\n          \"$parsers\": [],\n          \"$formatters\": [\n            null\n          ],\n          \"$viewChangeListeners\": [],\n          \"$untouched\": true,\n          \"$touched\": false,\n          \"$pristine\": true,\n          \"$dirty\": false,\n          \"$valid\": false,\n          \"$invalid\": true,\n          \"$error\": {\n            \"required\": true\n          },\n          \"$name\": \"dfragPassword\",\n          \"$options\": null\n        }\n      }\n    ]\n  },\n  \"$name\": \"loginForm\",\n  \"$dirty\": true,\n  \"$pristine\": false,\n  \"$valid\": false,\n  \"$invalid\": true,\n  \"$submitted\": false,\n  \"formly_1\": {\n    \"$error\": {\n      \"required\": [\n        {\n          \"$validators\": {},\n          \"$asyncValidators\": {},\n          \"$parsers\": [],\n          \"$formatters\": [\n            null\n          ],\n          \"$viewChangeListeners\": [],\n          \"$untouched\": true,\n          \"$touched\": false,\n          \"$pristine\": true,\n          \"$dirty\": false,\n          \"$valid\": false,\n          \"$invalid\": true,\n          \"$error\": {\n            \"required\": true\n          },\n          \"$name\": \"dfragPassword\",\n          \"$options\": null\n        }\n      ]\n    },\n    \"$name\": \"formly_1\",\n    \"$dirty\": true,\n    \"$pristine\": false,\n    \"$valid\": false,\n    \"$invalid\": true,\n    \"$submitted\": false,\n    \"dfragUsername\": {\n      \"$viewValue\": \"mavrick\",\n      \"$modelValue\": \"mavrick\",\n      \"$validators\": {},\n      \"$asyncValidators\": {},\n      \"$parsers\": [],\n      \"$formatters\": [\n        null\n      ],\n      \"$viewChangeListeners\": [],\n      \"$untouched\": false,\n      \"$touched\": true,\n      \"$pristine\": false,\n      \"$dirty\": true,\n      \"$valid\": true,\n      \"$invalid\": false,\n      \"$error\": {},\n      \"$name\": \"dfragUsername\",\n      \"$options\": null\n    },\n    \"dfragPassword\": {\n      \"$validators\": {},\n      \"$asyncValidators\": {},\n      \"$parsers\": [],\n      \"$formatters\": [\n        null\n      ],\n      \"$viewChangeListeners\": [],\n      \"$untouched\": true,\n      \"$touched\": false,\n      \"$pristine\": true,\n      \"$dirty\": false,\n      \"$valid\": false,\n      \"$invalid\": true,\n      \"$error\": {\n        \"required\": true\n      },\n      \"$name\": \"dfragPassword\",\n      \"$options\": null\n    }\n  }\n}\n```\n\n_Focus on any field or button:_\n\n``` json\n{\n  \"$error\": {},\n  \"$name\": \"loginForm\",\n  \"$dirty\": true,\n  \"$pristine\": false,\n  \"$valid\": true,\n  \"$invalid\": false,\n  \"$submitted\": false,\n  \"formly_1\": {\n    \"$error\": {},\n    \"$name\": \"formly_1\",\n    \"$dirty\": true,\n    \"$pristine\": false,\n    \"$valid\": true,\n    \"$invalid\": false,\n    \"$submitted\": false,\n    \"dfragUsername\": {\n      \"$viewValue\": \"mavrick\",\n      \"$modelValue\": \"mavrick\",\n      \"$validators\": {},\n      \"$asyncValidators\": {},\n      \"$parsers\": [],\n      \"$formatters\": [\n        null\n      ],\n      \"$viewChangeListeners\": [],\n      \"$untouched\": false,\n      \"$touched\": true,\n      \"$pristine\": false,\n      \"$dirty\": true,\n      \"$valid\": true,\n      \"$invalid\": false,\n      \"$error\": {},\n      \"$name\": \"dfragUsername\",\n      \"$options\": null\n    },\n    \"dfragPassword\": {\n      \"$viewValue\": \"mavrick\",\n      \"$modelValue\": \"mavrick\",\n      \"$validators\": {},\n      \"$asyncValidators\": {},\n      \"$parsers\": [],\n      \"$formatters\": [\n        null\n      ],\n      \"$viewChangeListeners\": [],\n      \"$untouched\": true,\n      \"$touched\": false,\n      \"$pristine\": false,\n      \"$dirty\": true,\n      \"$valid\": true,\n      \"$invalid\": false,\n      \"$error\": {},\n      \"$name\": \"dfragPassword\",\n      \"$options\": null\n    }\n  }\n}\n```\n. Thanks for the reply mate, will check it out.\n\nCheers\n. ",
    "drmikecrowe": "Kent, will.\n\nBTW, Contributing needs to be on the main page under Get Help on the left.  I looked everywhere on the website (probably not exhaustively) for the process, but it wasn't immediately obvious for new users of formly.  Would you like me to submit a PR for that too?\n. node_modules is outside our static routes.  I'd have to redo my build scripts (we use grunt), and change how components are integrated.  \n\nRight now, grunt reads bower.json and integrated the appropriate css/js into our html template automatically.\n\nI understand the simplification desire.  However, how difficult is maintaining both?  From my viewpoint, dropping npm would work great for me :-)\n. Kent, will.\n\nBTW, Contributing needs to be on the main page under Get Help on the left.  I looked everywhere on the website (probably not exhaustively) for the process, but it wasn't immediately obvious for new users of formly.  Would you like me to submit a PR for that too?\n. node_modules is outside our static routes.  I'd have to redo my build scripts (we use grunt), and change how components are integrated.  \n\nRight now, grunt reads bower.json and integrated the appropriate css/js into our html template automatically.\n\nI understand the simplification desire.  However, how difficult is maintaining both?  From my viewpoint, dropping npm would work great for me :-)\n. ",
    "rosscdh": "Hey guys, there appears to be something broken with the example since angular 1.4.\n\nhttp://jsbin.com/nihiza/3/edit?html,output <-- broken\n\nIm getting the following in my codebase..\n\n```\n Error: [$compile:ctreq] Controller 'select', required by directive 'ngOptions', can't be found!\n```\n\nAny thoughts would be appreciated.\n. Legendary thank you :)\n\nOn Wed, Jan 13, 2016 at 2:29 PM, Kent C. Dodds notifications@github.com\nwrote:\n\n> That jsbin is out dated so the scripts aren't being loaded properly.\n> Here's the updated version:\n> \n> https://jsbin.com/xuyogoy/edit?html,console,output\n> \n> I'm also seeing that error. I'm not sure what the problem is. Anyone else?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/441#issuecomment-171289913\n> .\n. PS. found the issue was I was using angular#1.4.9 but the example only works ~= 1.4.7\n. So just to confirm.. formly is still using the now depreciated\nangular-select2 lib? and not https://github.com/angular-ui/ui-select\n\nOn Wed, Jan 13, 2016 at 2:30 PM, Ross sendrossemail@gmail.com wrote:\n\n> Legendary thank you :)\n> \n> On Wed, Jan 13, 2016 at 2:29 PM, Kent C. Dodds notifications@github.com\n> wrote:\n> \n> > That jsbin is out dated so the scripts aren't being loaded properly.\n> > Here's the updated version:\n> > \n> > https://jsbin.com/xuyogoy/edit?html,console,output\n> > \n> > I'm also seeing that error. I'm not sure what the problem is. Anyone else?\n> > \n> > \u2014\n> > Reply to this email directly or view it on GitHub\n> > https://github.com/formly-js/angular-formly/issues/441#issuecomment-171289913\n> > .\n. Hey guys, there appears to be something broken with the example since angular 1.4.\n\nhttp://jsbin.com/nihiza/3/edit?html,output <-- broken\n\nIm getting the following in my codebase..\n\n```\n Error: [$compile:ctreq] Controller 'select', required by directive 'ngOptions', can't be found!\n```\n\nAny thoughts would be appreciated.\n. Legendary thank you :)\n\nOn Wed, Jan 13, 2016 at 2:29 PM, Kent C. Dodds notifications@github.com\nwrote:\n\n> That jsbin is out dated so the scripts aren't being loaded properly.\n> Here's the updated version:\n> \n> https://jsbin.com/xuyogoy/edit?html,console,output\n> \n> I'm also seeing that error. I'm not sure what the problem is. Anyone else?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/441#issuecomment-171289913\n> .\n. PS. found the issue was I was using angular#1.4.9 but the example only works ~= 1.4.7\n. So just to confirm.. formly is still using the now depreciated\nangular-select2 lib? and not https://github.com/angular-ui/ui-select\n\nOn Wed, Jan 13, 2016 at 2:30 PM, Ross sendrossemail@gmail.com wrote:\n\n> Legendary thank you :)\n> \n> On Wed, Jan 13, 2016 at 2:29 PM, Kent C. Dodds notifications@github.com\n> wrote:\n> \n> > That jsbin is out dated so the scripts aren't being loaded properly.\n> > Here's the updated version:\n> > \n> > https://jsbin.com/xuyogoy/edit?html,console,output\n> > \n> > I'm also seeing that error. I'm not sure what the problem is. Anyone else?\n> > \n> > \u2014\n> > Reply to this email directly or view it on GitHub\n> > https://github.com/formly-js/angular-formly/issues/441#issuecomment-171289913\n> > .\n. ",
    "blowsie": "Latest versions of angular select throw an error.\n\n```\nError: [ui.select:iexp] Expected expression in form of '_item_ in _collection_[ track by _id_]' but got '{{to.ngOptions}}'.\n```\n\nTrying to figure out how to resolve this, does anyone else already have a solution?\n. I think this is a problem in other places, such as the documentation.\n![image](https://cloud.githubusercontent.com/assets/308572/11066333/b130851a-87bf-11e5-890f-55139e97c291.png)\n\nAnd alot of the formly bootstrap templates.\n\nHow can we approach this?\n`model[options.key]`\n. Thanks for the information.\nIndeed it does, very smart.\n\nMy problem was that I was using `formly-skip-ng-model-attrs-manipulator` along with `ng-model=\"model[options.key]\"` and it was of course breaking.\n. I'm struggling to find how / where formly does this.\n\nI keep finding lots of the examples, like the repeater which do not support `$scope.model[options.key]` when it is a nested key e.g. `key: 'user.name'`\nhttp://angular-formly.com/#/example/advanced/repeating-section\n\nCould you point me in the right direction as to how can I get this example to work?\nI would be happy to update the examples If I could figure out how this works :)\n. The issue here is that the string is not a type of date,\nTo fix this I implemented a helper inside the link function to create a date from the model provided.\n\n```\n  link: function(scope){\n      var model = scope.model[scope.options.key]\n      var isDate = (model instanceof Date)\n      if(!isDate){\n        scope.model[scope.options.key] = new Date(model);\n      }\n    },\n```\n\nhttp://jsbin.com/figofapana/1/edit?js,output\n. @Luddinus's solution doesn't work for me with the latest version. Its also worth considering that you might want to apply other filters like orderBy\n. https://github.com/formly-js/angular-formly/issues/441. Id suggest you create a plunkr so people can help.\n. I removed the minified lib and fixed a few issues. But you are right, there does seem to be an issue after a certain depth.\n\nhttps://plnkr.co/edit/pyyXEAJ76bRRmOrjKQNW?p=preview\n. https://github.com/formly-js/angular-formly/issues/441. Latest versions of angular select throw an error.\n\n```\nError: [ui.select:iexp] Expected expression in form of '_item_ in _collection_[ track by _id_]' but got '{{to.ngOptions}}'.\n```\n\nTrying to figure out how to resolve this, does anyone else already have a solution?\n. I think this is a problem in other places, such as the documentation.\n![image](https://cloud.githubusercontent.com/assets/308572/11066333/b130851a-87bf-11e5-890f-55139e97c291.png)\n\nAnd alot of the formly bootstrap templates.\n\nHow can we approach this?\n`model[options.key]`\n. Thanks for the information.\nIndeed it does, very smart.\n\nMy problem was that I was using `formly-skip-ng-model-attrs-manipulator` along with `ng-model=\"model[options.key]\"` and it was of course breaking.\n. I'm struggling to find how / where formly does this.\n\nI keep finding lots of the examples, like the repeater which do not support `$scope.model[options.key]` when it is a nested key e.g. `key: 'user.name'`\nhttp://angular-formly.com/#/example/advanced/repeating-section\n\nCould you point me in the right direction as to how can I get this example to work?\nI would be happy to update the examples If I could figure out how this works :)\n. The issue here is that the string is not a type of date,\nTo fix this I implemented a helper inside the link function to create a date from the model provided.\n\n```\n  link: function(scope){\n      var model = scope.model[scope.options.key]\n      var isDate = (model instanceof Date)\n      if(!isDate){\n        scope.model[scope.options.key] = new Date(model);\n      }\n    },\n```\n\nhttp://jsbin.com/figofapana/1/edit?js,output\n. @Luddinus's solution doesn't work for me with the latest version. Its also worth considering that you might want to apply other filters like orderBy\n. https://github.com/formly-js/angular-formly/issues/441. Id suggest you create a plunkr so people can help.\n. I removed the minified lib and fixed a few issues. But you are right, there does seem to be an issue after a certain depth.\n\nhttps://plnkr.co/edit/pyyXEAJ76bRRmOrjKQNW?p=preview\n. https://github.com/formly-js/angular-formly/issues/441. ",
    "janjonas": "I can re-run the parser by calling\n\n``` javascript\nvm.editForm.formly_1_input_Name_0.$parsers[0](vm.editForm.formly_1_input_Name_0.$modelValue);\n```\n\nbut this does not change the form's validation status. Maybe this SO question is related http://stackoverflow.com/questions/17621171/angularjs-custom-validation-not-firing-when-changing-the-model-programatically?\nI'm wondering why there isn't a simple API an the formly form that takes care of the re-validation based on the current model.\n. I can re-run the parser by calling\n\n``` javascript\nvm.editForm.formly_1_input_Name_0.$parsers[0](vm.editForm.formly_1_input_Name_0.$modelValue);\n```\n\nbut this does not change the form's validation status. Maybe this SO question is related http://stackoverflow.com/questions/17621171/angularjs-custom-validation-not-firing-when-changing-the-model-programatically?\nI'm wondering why there isn't a simple API an the formly form that takes care of the re-validation based on the current model.\n. ",
    "davincho": "OK no worries. I am going to update my pull request this evening.\n. @kentcdodds anything else you would like to include in this PR?\n. I use angular-formly at work (recently in a project which uses forms intensively) and I am happy to help!\n. Okay it is because angular-fomly is included via `<script src=\"//rawgit.com/formly-js/angular-formly/master/dist/formly.js\">` instead of `<script src=\"//rawgit.com/formly-js/angular-formly/latest/dist/formly.js\"></script>`\n. OK no worries. I am going to update my pull request this evening.\n. @kentcdodds anything else you would like to include in this PR?\n. I use angular-formly at work (recently in a project which uses forms intensively) and I am happy to help!\n. Okay it is because angular-fomly is included via `<script src=\"//rawgit.com/formly-js/angular-formly/master/dist/formly.js\">` instead of `<script src=\"//rawgit.com/formly-js/angular-formly/latest/dist/formly.js\"></script>`\n. ",
    "dannycallaghan": "Hey @kentcdodds \n\nI've updated the commit message. Hope that's satisfactory. Let me know if it's not (or if I messed up with amending the commit).\n. I don't really understand why you're against defining a new formly type. For me, that's one of the (many) fantastically powerful parts of formly. But...\n\nThen why not add a controller to your existing 'input' type, then within that controller look for the existence of the templateOptions.type - if it's 'date' then perform the string to date conversion? That way, you're not adding a new formly type, and you're only affecting your existing input type if it's a date element.\n. Yeah, it is great isn't it? @kentcdodds has done / is doing an amazing job.\n\nSo I've not tested this, but adding a controller to the input type for your scenario would look something like this:\n\n``` javascript\nformlyConfigProvider.setType({\n    overwriteOk: true,\n    name: 'input',\n    template: require('YOUR_INPUT_TEMPLATE.html'),\n    wrapper: ['label', 'bootstrapHasError'], // for example\n    controller: ['$scope', function ($scope) {\n        if ($scope.to.type && $scope.to.type === 'date') {\n            /* \n            Do your stuff here, something like:\n\n            var currentModelVal = $scope.model[$scope.options.key];\n            if (typeof (currentModelVal) === 'string'){\n                $scope.model[$scope.options.key] = new Date(currentModelVal);\n            }\n            */\n        }\n    }]\n});\n```\n\nNote: 'to' is a shortcut made available to us, by formly, for templateOptions.\n. I can't pretend that I get what's going on with parseGet, but it seems that if it's changed to:\n\n``` javascript\nfunction parseGet(key, model) {\n  // If either of these are null/undefined then just return undefined\n  if (!key || !model) {\n    return undefined;\n  }\n  return model[key];\n}\n```\n\n... then all of the following keys are valid:\n\n``` javascript\n// ...\n'key' : 100,\n// ...\n'key' : 'onehundred',\n// ...\n'key' : '1hundred',\n```\n\nObviously, I suspect that parseGet is doing something that I'm missing. Can you shed any light?\n. Wow, incredible stuff. Thank you @MCKRUZ and @kentcdodds. \n\nSome open source projects are run badly, some are run really well, and then there is angular-formly. :)\n. Really sorry, but I don't think your tests covered all scenarios, in particular using GUIDs as keys. Using the test examples from my first post, most are now fixed, some are not:\n\n``` javascript\n// ...\n'key' : 'A1', // no error\n// ...\n'key' : '1A', // no error\n// ...\n'key' : 'A1A', // no error\n// ...\n'key' : '1A1A', // no error\n// ...\n'key' : 'first-line-of-address', // no error\n// ...\n'key' : '1st-line-of-address', // no error\n// ...\n'key' : 'address-1st-line', // ERROR\n// ...\n'key' : 'b141c66a-2857-4196-847b-b2096fa6170d' // ERROR\n```\n\nhttp://jsbin.com/sutuni/edit?html,js,console,output\n\nPretty certain that this bin is using the very latest.\n. By the second one, do you mean the GUID? It works in production now, on 6.26.9. We have clients using forms with those keys. \n. Thanks again @MCKRUZ, I really appreciate it. Will confirm it works with our forms as soon as I can.\n. Apologies, @kentcdodds. Yes, it's perfect, thank you and @MCKRUZ.\n. Hey @kentcdodds \n\nI've updated the commit message. Hope that's satisfactory. Let me know if it's not (or if I messed up with amending the commit).\n. I don't really understand why you're against defining a new formly type. For me, that's one of the (many) fantastically powerful parts of formly. But...\n\nThen why not add a controller to your existing 'input' type, then within that controller look for the existence of the templateOptions.type - if it's 'date' then perform the string to date conversion? That way, you're not adding a new formly type, and you're only affecting your existing input type if it's a date element.\n. Yeah, it is great isn't it? @kentcdodds has done / is doing an amazing job.\n\nSo I've not tested this, but adding a controller to the input type for your scenario would look something like this:\n\n``` javascript\nformlyConfigProvider.setType({\n    overwriteOk: true,\n    name: 'input',\n    template: require('YOUR_INPUT_TEMPLATE.html'),\n    wrapper: ['label', 'bootstrapHasError'], // for example\n    controller: ['$scope', function ($scope) {\n        if ($scope.to.type && $scope.to.type === 'date') {\n            /* \n            Do your stuff here, something like:\n\n            var currentModelVal = $scope.model[$scope.options.key];\n            if (typeof (currentModelVal) === 'string'){\n                $scope.model[$scope.options.key] = new Date(currentModelVal);\n            }\n            */\n        }\n    }]\n});\n```\n\nNote: 'to' is a shortcut made available to us, by formly, for templateOptions.\n. I can't pretend that I get what's going on with parseGet, but it seems that if it's changed to:\n\n``` javascript\nfunction parseGet(key, model) {\n  // If either of these are null/undefined then just return undefined\n  if (!key || !model) {\n    return undefined;\n  }\n  return model[key];\n}\n```\n\n... then all of the following keys are valid:\n\n``` javascript\n// ...\n'key' : 100,\n// ...\n'key' : 'onehundred',\n// ...\n'key' : '1hundred',\n```\n\nObviously, I suspect that parseGet is doing something that I'm missing. Can you shed any light?\n. Wow, incredible stuff. Thank you @MCKRUZ and @kentcdodds. \n\nSome open source projects are run badly, some are run really well, and then there is angular-formly. :)\n. Really sorry, but I don't think your tests covered all scenarios, in particular using GUIDs as keys. Using the test examples from my first post, most are now fixed, some are not:\n\n``` javascript\n// ...\n'key' : 'A1', // no error\n// ...\n'key' : '1A', // no error\n// ...\n'key' : 'A1A', // no error\n// ...\n'key' : '1A1A', // no error\n// ...\n'key' : 'first-line-of-address', // no error\n// ...\n'key' : '1st-line-of-address', // no error\n// ...\n'key' : 'address-1st-line', // ERROR\n// ...\n'key' : 'b141c66a-2857-4196-847b-b2096fa6170d' // ERROR\n```\n\nhttp://jsbin.com/sutuni/edit?html,js,console,output\n\nPretty certain that this bin is using the very latest.\n. By the second one, do you mean the GUID? It works in production now, on 6.26.9. We have clients using forms with those keys. \n. Thanks again @MCKRUZ, I really appreciate it. Will confirm it works with our forms as soon as I can.\n. Apologies, @kentcdodds. Yes, it's perfect, thank you and @MCKRUZ.\n. ",
    "kavi87": "We use an html validator and all of our directives are written with an attribute. So it is mainly for consistency. Our users are used to attribute instead of custom element. Btw nice work for this lib.\n. We use an html validator and all of our directives are written with an attribute. So it is mainly for consistency. Our users are used to attribute instead of custom element. Btw nice work for this lib.\n. ",
    "geraldchecka": "Hello Kent! I've never submitted to any open source projects. Will you accept it?\n. Hello Kent! I've never submitted to any open source projects. Will you accept it?\n. ",
    "CrockAgile": "How do you define the \"scope of this change\"? Would it be $compile or should it be more specific like the formly-form directive?\n. How do you define the \"scope of this change\"? Would it be $compile or should it be more specific like the formly-form directive?\n. ",
    "Werick": "Hi xgvargas ,\nNot sure if this may be helpful, we have similar long forms and we are using angular bootstrap tabs here is the link to an example http://angular-formly.com/#/example/integrations/ui-bootstrap-tabs.\n\nThanks\n. Here is an example that looks similar to what I have http://angular-formly.com/#/example/other/nested-formly-forms\n. We are also experiencing this issue and we have decided load and display\ntab when the user clicks/selects the tab. The the forms loads the first tab\nand the other tabs are loaded when the clicks on a given tab. This trick\nimproves the speed. We have also noticed that we need to reduce the number\nof questions on each tab.\n\nHope this is helpful.\n\nErick\nOn Sep 22, 2015 7:23 PM, \"Kent C. Dodds\" notifications@github.com wrote:\n\n> The problem is that you need all of those event listeners and watchers for\n> your form to work properly.\n> \n> I would recommend:\n> 1. Upgrading to the latest angular-formly (there have been some\n>    significant performance optimizations made recently)\n> 2. Upgrading to the latest version of angular (though this can be more\n>    difficult if other dependencies you have aren't ready for it).\n> 3. Make sure you disable api-check in production as described in the\n>    tips http://docs.angular-formly.com/docs/tips\n> 4. Try showing only pieces of the form at a time, hide the rest of it\n>    behind an ng-if which will cause the form to not render until it's\n>    shown.\n> \n> I hope these tips help!\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/479#issuecomment-142339799\n> .\n. No, we opted for tabs that load/render lazily. Only the first tab is\nrendered. All others are rendered when the user clicks on the tab.\nOn Sep 23, 2015 4:46 PM, \"CFV\" notifications@github.com wrote:\n\n> Hi @kentcdodds https://github.com/kentcdodds! in the end it was decided\n> we'd split the form in a wizard-like fashion, by fieldgroups, and only\n> render a fieldgroup at a time.\n> \n> @Werick https://github.com/Werick Did you do something similar to this?\n> \n> @joshtoo https://github.com/joshtoo It's client work. I don't get to\n> decide, just juggle the requirements and the capabilities we have.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/479#issuecomment-142606249\n> .\n. Hi xgvargas ,\nNot sure if this may be helpful, we have similar long forms and we are using angular bootstrap tabs here is the link to an example http://angular-formly.com/#/example/integrations/ui-bootstrap-tabs.\n\nThanks\n. Here is an example that looks similar to what I have http://angular-formly.com/#/example/other/nested-formly-forms\n. We are also experiencing this issue and we have decided load and display\ntab when the user clicks/selects the tab. The the forms loads the first tab\nand the other tabs are loaded when the clicks on a given tab. This trick\nimproves the speed. We have also noticed that we need to reduce the number\nof questions on each tab.\n\nHope this is helpful.\n\nErick\nOn Sep 22, 2015 7:23 PM, \"Kent C. Dodds\" notifications@github.com wrote:\n\n> The problem is that you need all of those event listeners and watchers for\n> your form to work properly.\n> \n> I would recommend:\n> 1. Upgrading to the latest angular-formly (there have been some\n>    significant performance optimizations made recently)\n> 2. Upgrading to the latest version of angular (though this can be more\n>    difficult if other dependencies you have aren't ready for it).\n> 3. Make sure you disable api-check in production as described in the\n>    tips http://docs.angular-formly.com/docs/tips\n> 4. Try showing only pieces of the form at a time, hide the rest of it\n>    behind an ng-if which will cause the form to not render until it's\n>    shown.\n> \n> I hope these tips help!\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/479#issuecomment-142339799\n> .\n. No, we opted for tabs that load/render lazily. Only the first tab is\nrendered. All others are rendered when the user clicks on the tab.\nOn Sep 23, 2015 4:46 PM, \"CFV\" notifications@github.com wrote:\n\n> Hi @kentcdodds https://github.com/kentcdodds! in the end it was decided\n> we'd split the form in a wizard-like fashion, by fieldgroups, and only\n> render a fieldgroup at a time.\n> \n> @Werick https://github.com/Werick Did you do something similar to this?\n> \n> @joshtoo https://github.com/joshtoo It's client work. I don't get to\n> decide, just juggle the requirements and the capabilities we have.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/479#issuecomment-142606249\n> .\n. ",
    "laurent-thai": "Hello Thank you so much for your reply and for the advice about the correct usage of github.\n\nHave a nice day.\n\nLaurent.\n\nDe : Kent C. Dodds [mailto:notifications@github.com] \nEnvoy\u00e9 : mercredi 9 septembre 2015 11:08\n\u00c0 : formly-js/angular-formly\nCc : laurent-thai\nObjet : Re: [angular-formly] Refresh form (#457)\n\nYou're looking for resetModel. I'm going to go ahead and close this issue. The github issues are reserved for bug reports and feature requests. If you need help, please follow the instructions here: http://help.angular-formly.com Good luck!\n\n\u2014\nReply to this email directly or view it on GitHub https://github.com/formly-js/angular-formly/issues/457#issuecomment-138774740 .  https://github.com/notifications/beacon/AFn3uD8hhbKD1GuWLDdXKl6nFOMs7uUmks5ov6gvgaJpZM4F5_mX.gif \n\nAucun virus trouv\u00e9 dans ce message.\nAnalyse effectu\u00e9e par AVG - www.avg.fr\nVersion: 2015.0.6125 / Base de donn\u00e9es virale: 4409/10603 - Date: 09/09/2015\n. Hello Thank you so much for your reply and for the advice about the correct usage of github.\n\nHave a nice day.\n\nLaurent.\n\nDe : Kent C. Dodds [mailto:notifications@github.com] \nEnvoy\u00e9 : mercredi 9 septembre 2015 11:08\n\u00c0 : formly-js/angular-formly\nCc : laurent-thai\nObjet : Re: [angular-formly] Refresh form (#457)\n\nYou're looking for resetModel. I'm going to go ahead and close this issue. The github issues are reserved for bug reports and feature requests. If you need help, please follow the instructions here: http://help.angular-formly.com Good luck!\n\n\u2014\nReply to this email directly or view it on GitHub https://github.com/formly-js/angular-formly/issues/457#issuecomment-138774740 .  https://github.com/notifications/beacon/AFn3uD8hhbKD1GuWLDdXKl6nFOMs7uUmks5ov6gvgaJpZM4F5_mX.gif \n\nAucun virus trouv\u00e9 dans ce message.\nAnalyse effectu\u00e9e par AVG - www.avg.fr\nVersion: 2015.0.6125 / Base de donn\u00e9es virale: 4409/10603 - Date: 09/09/2015\n. ",
    "BarryThePenguin": "Looks interesting, happy to have a go\n. I might add some more tests when I get time\n\nAnother thought I had was specifying fieldTransforms as a keyed object, that way you can have specific transforms applied to different fields...\n\n``` js\nformConfig.extras.fieldTransforms = {\n    transformOne: () => { },\n    transformTwo: () => { },\n};\n\n...\n\nfields = [{\n    name: 'one',\n    fieldTransforms: ['transformOne']\n}, {\n    name: 'two',\n    fieldTransforms: ['transformTwo']\n}]\n```\n. Hmm... I do have ghooks disabled (on Windows). Will look at it later. I'm in no hurry to get this merged, just happy to contribute\n. Thanks for the assistance! I'll try some feedback...\n\nI find structure really helpful, code style, contribution guidelines, have always been helpful when I've contributed to projects in the past. Since using formly and seeing first-timers-only gain momentum, it's only recently I've realised how helpful these ideas are for the community.\n\nUsing ghooks to run linting, tests, etc is really helpful. Saves all the nitpicking 'why did you add that tab/space/symbol/emoji'. Super beneficial. The downside is making it work in everyone's dev environment/setup. How can we improve that experience for people, especially when the node/npm world is so modular and projects have so many dependencies, for example commitizen/cz-cli#10.\n\nHow much hand-holding should there be? I think it's enough to reply to people's queries with a quick link or short description of where to find the solution. From what I've seen in Gitter, you do a good job.\n\nFrom this side of the world it looks like you're making good things. Look after yourself\n. - [x]  Go to [this](https://github.com/formly-js/angular-formly/blob/af99394d519e6330d40b4f615211f069dac81ce7/src/directives/formly-field.test.js#L506-L512) test and change `it.skip` to `it.only`\n- [x] Run $ npm test\n- [x] Notice that it's failing\n- [x] Go to [this](https://github.com/formly-js/angular-formly/blob/3c45ae558fa37e0b5640aef0f55d8cb5c6226163/src/directives/formly-field.js#L111-L115) function, like Kent mentions above we should be using the `$parse` service to set the value.\n- [x] Once the test is passing, change the `it.only` to `it` so all the tests run.\n- [x] Make sure that all the tests pass\n- [x] Commit your changes to the src/ directory mentioning issue #468 (this issue) in your commit message (note it may take a second... it runs all the tests...)\n- [x] Push your changes to your fork, create a PR with the description mentioning issue #468 (this issue), get merged, celebrate :tada: \n. TIL `it.skip` and `it.only`\n. Sorry! I've corrected that...\n. The plunker works now! Looks great @dfromero \n\nProof: http://output.jsbin.com/zejuhe \n. @kentcdodds happy to put my :hand::up: to contribute\n. 0.07% coverage increase!\n. The downside is:\n- formly.js increases 94KB :arrow_right: 103KB\n- formly.min.js increases 20KB :arrow_right: 38KB\n\n[My local build of formly.js](https://github.com/formly-js/angular-formly/files/4090/formly.txt)\n. - coverage 92.80% :arrow_right: 93.01%\n- formly.js increases 94KB :arrow_right: 159KB\n- formly.min.js increases 20KB :arrow_right: 32KB\n\n+0.21% coverage increase for a +60% increase in file size...  :-1: \n. I stumbled across it after playing around with validateOnModelChange. I noticed $timeout was being used so I returned the promise. I'll have a look today to see if there's any other similar cases.\n. Cheers, it was just a cheap attempt to increase code coverage. But it gives us a place to put more tests in the future\n. Need to update api-check from `master` to `latest`\n\n`//rawgit.com/kentcdodds/apiCheck.js/latest/dist/api-check.min.js`\n. Apologies I never responded, haven't had a chance to look into it. Happy to leave this assigned to @kentcdodds \n. This is still occurring, even in `8.0.0`\n. Thanks @psuedoSudo, that definitely gets us closer to a solution!\n\nI'm a little worried about modifying that `promises` array inside the `forEach` loop. Maybe we need to return a promise that is resolved after the `$timeout` and each of the fields have been set?\n. @psuedoSudo, if you put together a pull request we can get it reviewed and merged. If you need any help please let me know. If you @ me on [gitter](https://gitter.im/formly-js/angular-formly) I can help out.\n\nI'm going to put together a solution too, just so I know what works \ud83d\udc4d \n. :clap: :tada: :balloon: \n. :+1: \n. It looks like this is a result of the validation being run before the fields are fully initialised.\n\nI'm looking through tests now and the field validation is being run before the formControl is added to the field. This prevents validateOnModelChange from running and validating the form on first render.\n. Hi! No, not yet. I managed to create a failing test for this scenario. Kent left some feedback on #603 but the solution hasn't been incorporated in a PR yet\n. This is just for hide expression yeah...\n\nWould it be possible to run expressionProperties after the field is compiled? That's what I'm trying to figure out\n. The problematic commit 28c648dc83cb75ded78e5d984a81cfd19c544e1c\n\nNow just trying to figure out what went wrong/how to restore it...\n. @kamilkisiela do you still have reference to 28c648dc83cb75ded78e5d984a81cfd19c544e1c, it looks like the branch referencing the commit was deleted, or was overwritten by a force push. Are you able to restore it?\n\nInstructions: https://help.github.com/articles/commit-exists-on-github-but-not-in-my-local-clone/\n. Either that or @kentcdodds will need to publish manually...\n. Sounds like it. The latest release on npm (7.5.0) has a gitHead of 28c648dc83cb75ded78e5d984a81cfd19c544e1c. That no longer exists in git history for some reason. So `semantic-release` falls over when it tries to compare all commits since that specific commit\n. Took a bit of messing around. But I think this is fixed now. Some release notes have gone missing. Anyway to build those manually? Anyone want to give it a go?\n. Looks like we got this sorted\n. It looks like this is an issue with [formly-js/angular-formly-templates-bootstrap](https://github.com/formly-js/angular-formly-templates-bootstrap/blob/bf39c6fc1eac9181c269c45861164140dedb91bd/src/run/description.js)\n\nSpecifically where the first item from the template is appended to the description manipulator.\n\n``` js\nvar el = document.createElement('div');\nel.appendChild(angular.element(template)[0]);\n```\n. Hi @JessyRiordan, can you see if this is fixed in the latest version?\n. Hi @k1ng440, is this fixed in the latest version?\n. I guess the only performance hit we're going to see is for people using nested objects. Looks fine, LGTM\n. @kwypchlo, are you able to look into this? I'm assuming it's related to the breaking change that was introduced in #639. It may be that it just needs to be documented a little more.\n. @melnac until this get's sorted you'll have to use a version before 8.0.0\n. According to @TheMcMurder jsbin above, it's available at https://npmcdn.com/angular-formly@7.5.2\n. This looks good now in 8.0.4. Thanks for your quick assistance @kwypchlo :runner: :dash: \n. Ok, looks good\n. Additionally if you have a field config like\n\n``` js\nreturn [{\n    key: 1,\n    type: 'input',\n    defaultValue: 'Hello!',\n  },\n  {\n    key: 0,\n    type: 'input',\n  }];\n```\n\nBoth fields get updated, likewise if you change `0` to `false`\n. I'm guessing this was closed by #667 \n. Ah! Yeah. I think it's the glob argument in eslint, changing it to `{test|mock}` fixes the issue. Got dragged away last minute\n. Good job investigating. I'm thinking, is it worth having explicit type checking here? The problem isn't really `key === 0`, the problem is we aren't explicitly checking for `undefined`\n. Sorry, I'm on my phone so it's difficult to add detail :P\n\nI think the reason this issue exists is because we were checking implicitly for falsy values. Instead, I think the check should be more explicit, maybe checking for typeof undefined ~~and false~~.\n\nI don't think that checking explicitly for 0 makes our intentions clear.\n\nHope that makes sense. Though I'm happy to see this merged this either way. \n. Ignore false, that was a mistake. All that should be happening is an explicit check for undefined. In both cases the bellow should be suitable\n\n``` js\nif (angular.isUndefined(key) || angular.isUndefined(model)) {\n  return\n}\n```\n\nThe original issue was an implicit check for `key`. What you have found and fixed is the fact that `0` was included in this implicit check. By explicitly checking for `undefined`, the issue is resolved _and_ the code clearly explains what is happening.\n\nThis is a separate issue though... Thank you for your contribution!\n\nLGTM!\n. Awesome! I've been thinking of doing the same thing for a while now... If there's any tests in `formly-form.test.js` that don't have a `compileAndDigest` in them, would be good to seperate them into a different file too\n. Maybe even just a controller test file that is empty for now?\n. Depends what template you're using. Either way, you can specify your own template in your formly config. This is detailed in [the documentation](http://docs.angular-formly.com/docs/custom-templates)  \n. This is normal behaviour for forms with a single field. It's detailed in the html specifications. Google will return quite a few people asking a similar question, along with a few different solutions. \n\nOne possible solution is to add a second, hidden, input field. \n\nAs this isn't specifically a formly issue, I'm going to close this. If you have any more questions, someone should be able to help out\n. Sure. I use `form.$valid` before submit.\n\nEither in the controller\n\n``` js\nvm.doSubmit = function() {\n    if (vm.form.$valid) {\n        alert('Submit');\n    }\n};\n```\n\nor in the template\n\n``` html\n<formly-form ng-submit=\"vm.form.$valid && vm.doSubmit()\"></formly-form>\n```\n. Might be worth pointing out what the specification says about [implicit form submission](https://www.w3.org/TR/html5/forms.html#implicit-submission).\n\nThe angular docs also talk a bit about [form submission and the HTML specification](https://docs.angularjs.org/api/ng/directive/form#submitting-a-form-and-preventing-the-default-action).\n. I just a had a quick search through the angular github and found angular/angular.js#3205\n\nI'm not sure of an alternative to what I've already suggested sorry...\n. Do you know if this change solves either of the skipped tests in [`formly-field.test.js`](https://github.com/formly-js/angular-formly/blob/master/src/directives/formly-field.test.js)\n. Mocha uses `test.skip`\n. Hmm... ok, I just thought they would solve those skipped tests. Sounds like it's a little more involved then\n. Looks good. My only concern is there aren't any tests relying directly on this change. Should this be something to worry about?\n. Fantastic! That test fails before this PR and passes after, looks good to me\n\n/cc @formly-js/angular-formly-collaborators got any input?\n. Thanks again for your help @psuedoSudo\n. Looks interesting, happy to have a go\n. I might add some more tests when I get time\n\nAnother thought I had was specifying fieldTransforms as a keyed object, that way you can have specific transforms applied to different fields...\n\n``` js\nformConfig.extras.fieldTransforms = {\n    transformOne: () => { },\n    transformTwo: () => { },\n};\n\n...\n\nfields = [{\n    name: 'one',\n    fieldTransforms: ['transformOne']\n}, {\n    name: 'two',\n    fieldTransforms: ['transformTwo']\n}]\n```\n. Hmm... I do have ghooks disabled (on Windows). Will look at it later. I'm in no hurry to get this merged, just happy to contribute\n. Thanks for the assistance! I'll try some feedback...\n\nI find structure really helpful, code style, contribution guidelines, have always been helpful when I've contributed to projects in the past. Since using formly and seeing first-timers-only gain momentum, it's only recently I've realised how helpful these ideas are for the community.\n\nUsing ghooks to run linting, tests, etc is really helpful. Saves all the nitpicking 'why did you add that tab/space/symbol/emoji'. Super beneficial. The downside is making it work in everyone's dev environment/setup. How can we improve that experience for people, especially when the node/npm world is so modular and projects have so many dependencies, for example commitizen/cz-cli#10.\n\nHow much hand-holding should there be? I think it's enough to reply to people's queries with a quick link or short description of where to find the solution. From what I've seen in Gitter, you do a good job.\n\nFrom this side of the world it looks like you're making good things. Look after yourself\n. - [x]  Go to [this](https://github.com/formly-js/angular-formly/blob/af99394d519e6330d40b4f615211f069dac81ce7/src/directives/formly-field.test.js#L506-L512) test and change `it.skip` to `it.only`\n- [x] Run $ npm test\n- [x] Notice that it's failing\n- [x] Go to [this](https://github.com/formly-js/angular-formly/blob/3c45ae558fa37e0b5640aef0f55d8cb5c6226163/src/directives/formly-field.js#L111-L115) function, like Kent mentions above we should be using the `$parse` service to set the value.\n- [x] Once the test is passing, change the `it.only` to `it` so all the tests run.\n- [x] Make sure that all the tests pass\n- [x] Commit your changes to the src/ directory mentioning issue #468 (this issue) in your commit message (note it may take a second... it runs all the tests...)\n- [x] Push your changes to your fork, create a PR with the description mentioning issue #468 (this issue), get merged, celebrate :tada: \n. TIL `it.skip` and `it.only`\n. Sorry! I've corrected that...\n. The plunker works now! Looks great @dfromero \n\nProof: http://output.jsbin.com/zejuhe \n. @kentcdodds happy to put my :hand::up: to contribute\n. 0.07% coverage increase!\n. The downside is:\n- formly.js increases 94KB :arrow_right: 103KB\n- formly.min.js increases 20KB :arrow_right: 38KB\n\n[My local build of formly.js](https://github.com/formly-js/angular-formly/files/4090/formly.txt)\n. - coverage 92.80% :arrow_right: 93.01%\n- formly.js increases 94KB :arrow_right: 159KB\n- formly.min.js increases 20KB :arrow_right: 32KB\n\n+0.21% coverage increase for a +60% increase in file size...  :-1: \n. I stumbled across it after playing around with validateOnModelChange. I noticed $timeout was being used so I returned the promise. I'll have a look today to see if there's any other similar cases.\n. Cheers, it was just a cheap attempt to increase code coverage. But it gives us a place to put more tests in the future\n. Need to update api-check from `master` to `latest`\n\n`//rawgit.com/kentcdodds/apiCheck.js/latest/dist/api-check.min.js`\n. Apologies I never responded, haven't had a chance to look into it. Happy to leave this assigned to @kentcdodds \n. This is still occurring, even in `8.0.0`\n. Thanks @psuedoSudo, that definitely gets us closer to a solution!\n\nI'm a little worried about modifying that `promises` array inside the `forEach` loop. Maybe we need to return a promise that is resolved after the `$timeout` and each of the fields have been set?\n. @psuedoSudo, if you put together a pull request we can get it reviewed and merged. If you need any help please let me know. If you @ me on [gitter](https://gitter.im/formly-js/angular-formly) I can help out.\n\nI'm going to put together a solution too, just so I know what works \ud83d\udc4d \n. :clap: :tada: :balloon: \n. :+1: \n. It looks like this is a result of the validation being run before the fields are fully initialised.\n\nI'm looking through tests now and the field validation is being run before the formControl is added to the field. This prevents validateOnModelChange from running and validating the form on first render.\n. Hi! No, not yet. I managed to create a failing test for this scenario. Kent left some feedback on #603 but the solution hasn't been incorporated in a PR yet\n. This is just for hide expression yeah...\n\nWould it be possible to run expressionProperties after the field is compiled? That's what I'm trying to figure out\n. The problematic commit 28c648dc83cb75ded78e5d984a81cfd19c544e1c\n\nNow just trying to figure out what went wrong/how to restore it...\n. @kamilkisiela do you still have reference to 28c648dc83cb75ded78e5d984a81cfd19c544e1c, it looks like the branch referencing the commit was deleted, or was overwritten by a force push. Are you able to restore it?\n\nInstructions: https://help.github.com/articles/commit-exists-on-github-but-not-in-my-local-clone/\n. Either that or @kentcdodds will need to publish manually...\n. Sounds like it. The latest release on npm (7.5.0) has a gitHead of 28c648dc83cb75ded78e5d984a81cfd19c544e1c. That no longer exists in git history for some reason. So `semantic-release` falls over when it tries to compare all commits since that specific commit\n. Took a bit of messing around. But I think this is fixed now. Some release notes have gone missing. Anyway to build those manually? Anyone want to give it a go?\n. Looks like we got this sorted\n. It looks like this is an issue with [formly-js/angular-formly-templates-bootstrap](https://github.com/formly-js/angular-formly-templates-bootstrap/blob/bf39c6fc1eac9181c269c45861164140dedb91bd/src/run/description.js)\n\nSpecifically where the first item from the template is appended to the description manipulator.\n\n``` js\nvar el = document.createElement('div');\nel.appendChild(angular.element(template)[0]);\n```\n. Hi @JessyRiordan, can you see if this is fixed in the latest version?\n. Hi @k1ng440, is this fixed in the latest version?\n. I guess the only performance hit we're going to see is for people using nested objects. Looks fine, LGTM\n. @kwypchlo, are you able to look into this? I'm assuming it's related to the breaking change that was introduced in #639. It may be that it just needs to be documented a little more.\n. @melnac until this get's sorted you'll have to use a version before 8.0.0\n. According to @TheMcMurder jsbin above, it's available at https://npmcdn.com/angular-formly@7.5.2\n. This looks good now in 8.0.4. Thanks for your quick assistance @kwypchlo :runner: :dash: \n. Ok, looks good\n. Additionally if you have a field config like\n\n``` js\nreturn [{\n    key: 1,\n    type: 'input',\n    defaultValue: 'Hello!',\n  },\n  {\n    key: 0,\n    type: 'input',\n  }];\n```\n\nBoth fields get updated, likewise if you change `0` to `false`\n. I'm guessing this was closed by #667 \n. Ah! Yeah. I think it's the glob argument in eslint, changing it to `{test|mock}` fixes the issue. Got dragged away last minute\n. Good job investigating. I'm thinking, is it worth having explicit type checking here? The problem isn't really `key === 0`, the problem is we aren't explicitly checking for `undefined`\n. Sorry, I'm on my phone so it's difficult to add detail :P\n\nI think the reason this issue exists is because we were checking implicitly for falsy values. Instead, I think the check should be more explicit, maybe checking for typeof undefined ~~and false~~.\n\nI don't think that checking explicitly for 0 makes our intentions clear.\n\nHope that makes sense. Though I'm happy to see this merged this either way. \n. Ignore false, that was a mistake. All that should be happening is an explicit check for undefined. In both cases the bellow should be suitable\n\n``` js\nif (angular.isUndefined(key) || angular.isUndefined(model)) {\n  return\n}\n```\n\nThe original issue was an implicit check for `key`. What you have found and fixed is the fact that `0` was included in this implicit check. By explicitly checking for `undefined`, the issue is resolved _and_ the code clearly explains what is happening.\n\nThis is a separate issue though... Thank you for your contribution!\n\nLGTM!\n. Awesome! I've been thinking of doing the same thing for a while now... If there's any tests in `formly-form.test.js` that don't have a `compileAndDigest` in them, would be good to seperate them into a different file too\n. Maybe even just a controller test file that is empty for now?\n. Depends what template you're using. Either way, you can specify your own template in your formly config. This is detailed in [the documentation](http://docs.angular-formly.com/docs/custom-templates)  \n. This is normal behaviour for forms with a single field. It's detailed in the html specifications. Google will return quite a few people asking a similar question, along with a few different solutions. \n\nOne possible solution is to add a second, hidden, input field. \n\nAs this isn't specifically a formly issue, I'm going to close this. If you have any more questions, someone should be able to help out\n. Sure. I use `form.$valid` before submit.\n\nEither in the controller\n\n``` js\nvm.doSubmit = function() {\n    if (vm.form.$valid) {\n        alert('Submit');\n    }\n};\n```\n\nor in the template\n\n``` html\n<formly-form ng-submit=\"vm.form.$valid && vm.doSubmit()\"></formly-form>\n```\n. Might be worth pointing out what the specification says about [implicit form submission](https://www.w3.org/TR/html5/forms.html#implicit-submission).\n\nThe angular docs also talk a bit about [form submission and the HTML specification](https://docs.angularjs.org/api/ng/directive/form#submitting-a-form-and-preventing-the-default-action).\n. I just a had a quick search through the angular github and found angular/angular.js#3205\n\nI'm not sure of an alternative to what I've already suggested sorry...\n. Do you know if this change solves either of the skipped tests in [`formly-field.test.js`](https://github.com/formly-js/angular-formly/blob/master/src/directives/formly-field.test.js)\n. Mocha uses `test.skip`\n. Hmm... ok, I just thought they would solve those skipped tests. Sounds like it's a little more involved then\n. Looks good. My only concern is there aren't any tests relying directly on this change. Should this be something to worry about?\n. Fantastic! That test fails before this PR and passes after, looks good to me\n\n/cc @formly-js/angular-formly-collaborators got any input?\n. Thanks again for your help @psuedoSudo\n. ",
    "shanaithal": "I wanted to start contributing to Open Source Projects.\n. Thank you\nYes I'm a first timer....\n. I wanted to start contributing to Open Source Projects.\n. Thank you\nYes I'm a first timer....\n. ",
    "tb": "I will use `extras.getFieldId`:\n\n```\nformlyConfigProvider.extras.getFieldId = function(options, model, scope) {\n  if (options.id) {\n    return options.id;\n  }\n\n  return options.key;\n};\n```\n\nThank you!\n. The main issue is that when router opens component a couple of times (like you navigate out of page and navigate back), fields get different `formId`. For now I dont see any problem with the `return options.key` in our app. I also tried to pass id to formly-form, but it did not work (I considered using model id as part of form id).\n. I will use `extras.getFieldId`:\n\n```\nformlyConfigProvider.extras.getFieldId = function(options, model, scope) {\n  if (options.id) {\n    return options.id;\n  }\n\n  return options.key;\n};\n```\n\nThank you!\n. The main issue is that when router opens component a couple of times (like you navigate out of page and navigate back), fields get different `formId`. For now I dont see any problem with the `return options.key` in our app. I also tried to pass id to formly-form, but it did not work (I considered using model id as part of form id).\n. ",
    "msc654": "Can you accomplish the same look with separate form elements instead of nesting? I've done this with tab based forms and formly. So each tab is form and can be validated either separately or in master check of all the forms.\n. @holtjonathan try this example based off of yours. http://jsbin.com/xecucenevu/3/edit?js,console,output\n. Kent, \n\nAs time allows I will do what I can to help. I have gotten great value from this library and have a complex dynamic build in development with it for a client.\n. Can you accomplish the same look with separate form elements instead of nesting? I've done this with tab based forms and formly. So each tab is form and can be validated either separately or in master check of all the forms.\n. @holtjonathan try this example based off of yours. http://jsbin.com/xecucenevu/3/edit?js,console,output\n. Kent, \n\nAs time allows I will do what I can to help. I have gotten great value from this library and have a complex dynamic build in development with it for a client.\n. ",
    "redguardtoo": "cool, thanks\n. cool, thanks\n. ",
    "dfromero": "would like to contribute but not sure what  `it.skip` and `it.only` mean\n. Not sure, but $parse lexxer keeps throwing an error for the emoji test key.\n. @kentcdodds I'm trying to commit using npm run commit , but at the end i get \u2717 Commit failed. Did you forget to 'git add' your files?, even though I already added src/ (note there are some other files not commited, ie. .idea folder). PS: I'm using windows.\n. cheers, thanks for the help\n. yea, it's just sort of a custom form builder, where i push config objects, it would have been awesome to have it sync'ing automatically, but its not that critical. \n. Nice initiative, I will try to contribute, even if not part of the team (still reading through the codebase) (y) Im currently using formly to build a survey buiilder of some sort. Great job.\n. @yahyaKacem btw your video is private, can't your capture.\n. would like to contribute but not sure what  `it.skip` and `it.only` mean\n. Not sure, but $parse lexxer keeps throwing an error for the emoji test key.\n. @kentcdodds I'm trying to commit using npm run commit , but at the end i get \u2717 Commit failed. Did you forget to 'git add' your files?, even though I already added src/ (note there are some other files not commited, ie. .idea folder). PS: I'm using windows.\n. cheers, thanks for the help\n. yea, it's just sort of a custom form builder, where i push config objects, it would have been awesome to have it sync'ing automatically, but its not that critical. \n. Nice initiative, I will try to contribute, even if not part of the team (still reading through the codebase) (y) Im currently using formly to build a survey buiilder of some sort. Great job.\n. @yahyaKacem btw your video is private, can't your capture.\n. ",
    "gjcarrow": "@dfromero your confusion might be because the links in the checklist that @BarryThePenguin made are just reversed. The list item \"Go to this function...\" is actually the link to the formly-field.test.js file. If you go to line 506 of that file, you will see the it.only method. Changing it from that to it.skip will skip that test when you run npm test. At that point all the tests should pass. When you fix the function in the formly-field.js file at line 111, you can go back and change the test back to it.only. Then run the npm test command again. If your fix worked, then all the tests will pass. I was going to take a shot at this for my first pull request, but I saw that you wanted to contribute first, so have at it. Good luck. Hope this helped.\n. @dfromero your confusion might be because the links in the checklist that @BarryThePenguin made are just reversed. The list item \"Go to this function...\" is actually the link to the formly-field.test.js file. If you go to line 506 of that file, you will see the it.only method. Changing it from that to it.skip will skip that test when you run npm test. At that point all the tests should pass. When you fix the function in the formly-field.js file at line 111, you can go back and change the test back to it.only. Then run the npm test command again. If your fix worked, then all the tests will pass. I was going to take a shot at this for my first pull request, but I saw that you wanted to contribute first, so have at it. Good luck. Hope this helped.\n. ",
    "tarkanlar": "Thanks @kentcdodds Congratulations on your new bundle of joy! Say \"Hi\" to the new member of the family! :+1: \n. Thanks @kentcdodds Congratulations on your new bundle of joy! Say \"Hi\" to the new member of the family! :+1: \n. ",
    "TheBekker": "That makes sense, but not sure how i would accomplish this?\n. Ahh didnt know that was possible, thanks!\n. That makes sense, but not sure how i would accomplish this?\n. Ahh didnt know that was possible, thanks!\n. ",
    "d3viant0ne": "@cfv1984 - I have to agree with @kentcdodds here. From a UX perspective, nobody wants to try and absorb hundreds of fields on a form at once much less edit them.\n\nEven if you used something besides Angular for this, you are still going to have some degree of degraded performance.\n\nIMHO - You really need to reassess your requirements and design, this isn't a performance issue with formly. Personally I would probably go with something workflow driven and then break the fields up into stages but that solution is making assumptions on your requirements.\n. @cfv1984 - I have to agree with @kentcdodds here. From a UX perspective, nobody wants to try and absorb hundreds of fields on a form at once much less edit them.\n\nEven if you used something besides Angular for this, you are still going to have some degree of degraded performance.\n\nIMHO - You really need to reassess your requirements and design, this isn't a performance issue with formly. Personally I would probably go with something workflow driven and then break the fields up into stages but that solution is making assumptions on your requirements.\n. ",
    "gkadillak": "Kent,\n\nDefinitely interested as I'm looking to improve my angular skills. However, I've never used formly. \n. Kent,\n\nDefinitely interested as I'm looking to improve my angular skills. However, I've never used formly. \n. ",
    "rentius2407": "Hi Kent\n\nI have worked on 3 projects using Angular and in 2 of those I used formly. Haven't contributed to any open source projects before. So in short I'm a intermediate in Angular and would consider myself a beginner in using formly. That said I would like to help in some sort of way and try to contribute.\n. Hi Kent\n\nI have worked on 3 projects using Angular and in 2 of those I used formly. Haven't contributed to any open source projects before. So in short I'm a intermediate in Angular and would consider myself a beginner in using formly. That said I would like to help in some sort of way and try to contribute.\n. ",
    "vijquick": "@kentcdodds we are about to start using **angular-formly** in our project, we would be pleased to contribute to this repo.\n. Thanks Kent\n\nOn Tue, Dec 1, 2015 at 9:41 PM, Kent C. Dodds notifications@github.com\nwrote:\n\n> @vijquick https://github.com/vijquick awesome! I'll add you to the\n> @formly-js/angular-formly-collaborators-read\n> https://github.com/orgs/formly-js/teams/angular-formly-collaborators-read\n> team. If I see that you're helping others and submitting PRs, I'll add you\n> to the @formly-js/angular-formly-collaborators\n> https://github.com/orgs/formly-js/teams/angular-formly-collaborators\n> team. Thanks!\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/481#issuecomment-161015798\n> .\n. @kentcdodds we are about to start using **angular-formly** in our project, we would be pleased to contribute to this repo.\n. Thanks Kent\n\nOn Tue, Dec 1, 2015 at 9:41 PM, Kent C. Dodds notifications@github.com\nwrote:\n\n> @vijquick https://github.com/vijquick awesome! I'll add you to the\n> @formly-js/angular-formly-collaborators-read\n> https://github.com/orgs/formly-js/teams/angular-formly-collaborators-read\n> team. If I see that you're helping others and submitting PRs, I'll add you\n> to the @formly-js/angular-formly-collaborators\n> https://github.com/orgs/formly-js/teams/angular-formly-collaborators\n> team. Thanks!\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/481#issuecomment-161015798\n> .\n. ",
    "darleys": "Hi I'm using formly and would be please be contribute.\n. Thanks!\n. Hi I'm using formly and would be please be contribute.\n. Thanks!\n. ",
    "tuckerjt07": "Kent, I have started using this as part of a major project and would be pleased to contribute back as well.\n. Can we reopen this? This is either a bug or a feature request as we discussed at the end of the SO conversation. It's not really been answered in line with how the formly documentation reads.\n. @benoror @kentcdodds and I discussed this and I had a disconnect where I did not realize that model was creating an isolated instance when used. Sorry, this can be closed.\n. You're welcome, glad to help.\n. To me that behaves as I would expect. That's doing a complete reset on the form, ie a clear, not a reset back to default.\n. Thanks for letting us know. You can copy Kent's JSBins and make the necessary changes then create a pull request on the examples.json file here: https://github.com/formly-js/angular-formly-website/\n. Kent, I have started using this as part of a major project and would be pleased to contribute back as well.\n. Can we reopen this? This is either a bug or a feature request as we discussed at the end of the SO conversation. It's not really been answered in line with how the formly documentation reads.\n. @benoror @kentcdodds and I discussed this and I had a disconnect where I did not realize that model was creating an isolated instance when used. Sorry, this can be closed.\n. You're welcome, glad to help.\n. To me that behaves as I would expect. That's doing a complete reset on the form, ie a clear, not a reset back to default.\n. Thanks for letting us know. You can copy Kent's JSBins and make the necessary changes then create a pull request on the examples.json file here: https://github.com/formly-js/angular-formly-website/\n. ",
    "cudasteve": "@kentcdodds Please add me to the collaborators-read list if you've got room.  We're using formly and I'd be happy to help maintain to the extent I'm able.\n. @kentcdodds Please add me to the collaborators-read list if you've got room.  We're using formly and I'd be happy to help maintain to the extent I'm able.\n. ",
    "vltr": "@kentcdodds hello! I've been using formly in my project and it's simply fantastic. I've struggled yesterday to make a good file input to upload files, so I ended up making a bin (which works quite well):\n\nhttp://output.jsbin.com/fepilo\n\nI can help out in other things, I'm seeing some bugs but, as a contractor, I don't have much time to look into it (at least, not now). I'll add an example using Leaflet with formly in the next week, because the result was awesome! Anyway, thanks for this lib :+1: \n. Hi! Is this related to the fact that the 8.0.0 of the bower package doesn't comes with the generated dist files while npm package does?\n. Wow. Good article referenced in #589. I think I might migrate all my dependencies to npm as well :smile: \n. [imho] What a mess ...\n. @kentcdodds almost forgot! Made this example some days ago: http://jsbin.com/fepilo/7 :smiley: \n\nAnd I'm already using version 8 from npm :wink: \n. @kentcdodds yeah, I'll love to. I also made an integration with Leaflet, but I'll create an example later (time!) :smiley: \n. PR waiting :wink: \n. Damn, I always forget the last step!\n. @kentcdodds hello! I've been using formly in my project and it's simply fantastic. I've struggled yesterday to make a good file input to upload files, so I ended up making a bin (which works quite well):\n\nhttp://output.jsbin.com/fepilo\n\nI can help out in other things, I'm seeing some bugs but, as a contractor, I don't have much time to look into it (at least, not now). I'll add an example using Leaflet with formly in the next week, because the result was awesome! Anyway, thanks for this lib :+1: \n. Hi! Is this related to the fact that the 8.0.0 of the bower package doesn't comes with the generated dist files while npm package does?\n. Wow. Good article referenced in #589. I think I might migrate all my dependencies to npm as well :smile: \n. [imho] What a mess ...\n. @kentcdodds almost forgot! Made this example some days ago: http://jsbin.com/fepilo/7 :smiley: \n\nAnd I'm already using version 8 from npm :wink: \n. @kentcdodds yeah, I'll love to. I also made an integration with Leaflet, but I'll create an example later (time!) :smiley: \n. PR waiting :wink: \n. Damn, I always forget the last step!\n. ",
    "agileurbanite": "@kentcdodds would love to help maintain this as well.\n. I'd love to help contribute to this project as well.\n. @kentcdodds would love to help maintain this as well.\n. I'd love to help contribute to this project as well.\n. ",
    "maliknur": "I'm Angular Developer and using angular-formly actively at work and I am happy to help with contributions and resolving issues!\n. Seems to be more angular-datetimepicker issue.\n. I'm Angular Developer and using angular-formly actively at work and I am happy to help with contributions and resolving issues!\n. Seems to be more angular-datetimepicker issue.\n. ",
    "AjithJosephThomas": "@kentcdodds :We have been using angular-formly in one of our projects. Would love to contribute.Requesting to count me in too.\n. @kentcdodds :thank you Kent\n. @kentcdodds: I have not made much contributions in github. Angular-formly is a great directive and our team using it in a project. Please count me in, too.\n. @kentcdodds :We have been using angular-formly in one of our projects. Would love to contribute.Requesting to count me in too.\n. @kentcdodds :thank you Kent\n. @kentcdodds: I have not made much contributions in github. Angular-formly is a great directive and our team using it in a project. Please count me in, too.\n. ",
    "guiassemany": "@kentcdodds I would like to help! Can you please add me to Collaborators?\n. @kentcdodds I would like to help! Can you please add me to Collaborators?\n. ",
    "astromac": "@ckniffen Thank you for the reply. I tried the template example you provided to no effect. You mentioned creating an example and referenced instructions. Was there a link that you intended to provide?\n. Done and thank you.\n[JS Bin](http://jsbin.com/vamalasiru/edit?html,js,output)\n[StackOverflow](http://stackoverflow.com/questions/32727263/is-it-possible-to-render-a-datalist-using-angular-formly)\n. @ckniffen Thank you for the reply. I tried the template example you provided to no effect. You mentioned creating an example and referenced instructions. Was there a link that you intended to provide?\n. Done and thank you.\n[JS Bin](http://jsbin.com/vamalasiru/edit?html,js,output)\n[StackOverflow](http://stackoverflow.com/questions/32727263/is-it-possible-to-render-a-datalist-using-angular-formly)\n. ",
    "BobbieBarker": "Once you join our slack @  [angularBuddies](http://angularbuddies.com) type:\n\n```\n/join foss-hackday \n```\n\nto join us in our channel!\n. Once you join our slack @  [angularBuddies](http://angularbuddies.com) type:\n\n```\n/join foss-hackday \n```\n\nto join us in our channel!\n. ",
    "holtjonathan": "Sorry guys, I had a busy weekend.  @benoror, forgive my follow up question but why does adding wrappers around `fieldGroups` add complexity to Formly?  Obviously, `wrappers` already exist for individual fields.  I just want to wrap multiple fields at one time.  The logic is basically the same.\n. FYI, this technically is a valid work around.  But I don't see how creating several new field types just to wrap something is 'less complex' than adding a simple wrapper attribute to my field in the first place.\n\nI still think it is a valid request to have wrappers on field groups.  Just my personal opinion.\n. My bad man.  I literally thought that this was an issue.  Thanks for the example!\n. FYI...you are a wizard.  Just putting that out there.\n. One last question...I modifed your example to pass hard coded data: http://jsbin.com/juqihizefo/edit?js,output\n\nThis works totally fine on the jsbin but locally, only your way works (checking the formState.changed).  If I set `'templateOptions.min': 'formState.min'` then to.min is ALWAYS blank.\n\nI feel like I am missing something obvious.  I can't recreate this issue on jsbin because it works there but not local.  :(\n. Woohoo!  Thanks @benoror!!\n. Odd question, do you happen to have the old example of how your nested form example worked?  I am curious to see what all was changed.\n. Sorry guys, I had a busy weekend.  @benoror, forgive my follow up question but why does adding wrappers around `fieldGroups` add complexity to Formly?  Obviously, `wrappers` already exist for individual fields.  I just want to wrap multiple fields at one time.  The logic is basically the same.\n. FYI, this technically is a valid work around.  But I don't see how creating several new field types just to wrap something is 'less complex' than adding a simple wrapper attribute to my field in the first place.\n\nI still think it is a valid request to have wrappers on field groups.  Just my personal opinion.\n. My bad man.  I literally thought that this was an issue.  Thanks for the example!\n. FYI...you are a wizard.  Just putting that out there.\n. One last question...I modifed your example to pass hard coded data: http://jsbin.com/juqihizefo/edit?js,output\n\nThis works totally fine on the jsbin but locally, only your way works (checking the formState.changed).  If I set `'templateOptions.min': 'formState.min'` then to.min is ALWAYS blank.\n\nI feel like I am missing something obvious.  I can't recreate this issue on jsbin because it works there but not local.  :(\n. Woohoo!  Thanks @benoror!!\n. Odd question, do you happen to have the old example of how your nested form example worked?  I am curious to see what all was changed.\n. ",
    "b3nl": "+1 Would be a good feature!\n. +1 Would be a good feature!\n. ",
    "marcelinojorgeromero": "Hi there i was reading your posts because are related to my problem. I think formatters are not called correctly and as redhead points out they called manually, as what i suspected. Please take a look at my  [stackoverflow post](http://stackoverflow.com/questions/35351761/how-to-format-input-text-value-while-user-is-typing-using-angular-formly) where i have a demo example.\n. Kent thanks for your reply, i would love to contribute to the project but i have hard time understanding the bigger picture and generally how angular-formly is made. Is there a possibility to create some instructions or diagrams or even a video (whatever) explaining how stuff glue together? I mean only the big picture of the source code... Thanks\n. Hi there i was reading your posts because are related to my problem. I think formatters are not called correctly and as redhead points out they called manually, as what i suspected. Please take a look at my  [stackoverflow post](http://stackoverflow.com/questions/35351761/how-to-format-input-text-value-while-user-is-typing-using-angular-formly) where i have a demo example.\n. Kent thanks for your reply, i would love to contribute to the project but i have hard time understanding the bigger picture and generally how angular-formly is made. Is there a possibility to create some instructions or diagrams or even a video (whatever) explaining how stuff glue together? I mean only the big picture of the source code... Thanks\n. ",
    "j--w": "It completely makes sense that it's an angular thing now that you mention it. Thanks for the JSBin, very helpful. I'll have a look at turning it into a plugin as I'll be neck deep in formly stuff at work for the next week or 2 i think.\n. Oh I had actually just sent that link out to my team at work a couple of days ago, I didn't connect the dots that it was you who made them! I'll definitely be watching them, thanks for all your hard work!\n. It completely makes sense that it's an angular thing now that you mention it. Thanks for the JSBin, very helpful. I'll have a look at turning it into a plugin as I'll be neck deep in formly stuff at work for the next week or 2 i think.\n. Oh I had actually just sent that link out to my team at work a couple of days ago, I didn't connect the dots that it was you who made them! I'll definitely be watching them, thanks for all your hard work!\n. ",
    "Rorkal": "Hi.\nI wasn't sure if it was a bug or not. I will look into it. \nThanks!\n. Hi.\nI wasn't sure if it was a bug or not. I will look into it. \nThanks!\n. ",
    "joshuarh": "Works great now @kentcdodds, thanks!\n. Works great now @kentcdodds, thanks!\n. ",
    "chrisheninger": "Hi @kentcdodds,\n\nI\u2019ve been keeping an eye out for an issue that is first-timer compatible\u2013 if this is up-for-grabs I\u2019d love to take a shot!\n\nI watched the Submitting a Pull Request video, set up the codebase, and read through formly-field.js. I don\u2019t fully understand what is happening in yushkovskiy\u2019s example, but I do think I understand the premise of the bug.\n\nCould you help me write the proper tests and point me in the correct direction for implementing a fix? Thanks!\n. Thanks @kentcdodds! I think I figured out the initial solution. If I did the first part correctly, I\u2019d like to take a look into figuring out the next two pieces\u2013 I do however need assistance writing the tests!\n\n[First line change](https://github.com/chrisheninger/angular-formly/blob/master/src/directives/formly-field.js#L343)\n[Second line change](https://github.com/chrisheninger/angular-formly/blob/master/src/directives/formly-field.js#L351)\n\nThat was my first time using the `some` method as well as an arrow function\u2026 quite the learning experience!\n\nA couple of questions: \nOn the second line, we were using `scope.fc` previously and I changed it to use `fc` for consistency with the pieces above. Those are referencing the same object, correct?\n\nI messed up my commit and had to commit twice (first time I forgot to uncomment the .skip on the test)\u2026 doesn\u2019t that affect anything on your end negatively? I was also a bit unsure about the commit message/title for this issue, would appreciate input. I can easily fork and commit again!\n\nWould it be best to submit a PR now, or should I wait until we take a look at the next part?\n\nThanks again! Learning immensely from seeing the process and tinkering through all the code. \ud83d\ude00\n. Hey Kent, I noticed you had updated the tests. Do those cover the next two lines you had referenced in your previous message? I noticed there's a special event happening today/tomorrow, would be glad to give this a whirl during the bash! Any advice you have to point me in the right direction would help!\n. @bjspencer awesome, I'm excited to see the implementation!\n\nI made a minor mistake in the way I merged from upstream into my fork\u2013 after chatting @kentcdodds I learned\u00a0it should've been executed using rebase. I'd recommend grabbing a clean fork so you don't have all my ugly commits in your PR... I won't be offended!\n. Hi @kentcdodds,\n\nI\u2019ve been keeping an eye out for an issue that is first-timer compatible\u2013 if this is up-for-grabs I\u2019d love to take a shot!\n\nI watched the Submitting a Pull Request video, set up the codebase, and read through formly-field.js. I don\u2019t fully understand what is happening in yushkovskiy\u2019s example, but I do think I understand the premise of the bug.\n\nCould you help me write the proper tests and point me in the correct direction for implementing a fix? Thanks!\n. Thanks @kentcdodds! I think I figured out the initial solution. If I did the first part correctly, I\u2019d like to take a look into figuring out the next two pieces\u2013 I do however need assistance writing the tests!\n\n[First line change](https://github.com/chrisheninger/angular-formly/blob/master/src/directives/formly-field.js#L343)\n[Second line change](https://github.com/chrisheninger/angular-formly/blob/master/src/directives/formly-field.js#L351)\n\nThat was my first time using the `some` method as well as an arrow function\u2026 quite the learning experience!\n\nA couple of questions: \nOn the second line, we were using `scope.fc` previously and I changed it to use `fc` for consistency with the pieces above. Those are referencing the same object, correct?\n\nI messed up my commit and had to commit twice (first time I forgot to uncomment the .skip on the test)\u2026 doesn\u2019t that affect anything on your end negatively? I was also a bit unsure about the commit message/title for this issue, would appreciate input. I can easily fork and commit again!\n\nWould it be best to submit a PR now, or should I wait until we take a look at the next part?\n\nThanks again! Learning immensely from seeing the process and tinkering through all the code. \ud83d\ude00\n. Hey Kent, I noticed you had updated the tests. Do those cover the next two lines you had referenced in your previous message? I noticed there's a special event happening today/tomorrow, would be glad to give this a whirl during the bash! Any advice you have to point me in the right direction would help!\n. @bjspencer awesome, I'm excited to see the implementation!\n\nI made a minor mistake in the way I merged from upstream into my fork\u2013 after chatting @kentcdodds I learned\u00a0it should've been executed using rebase. I'd recommend grabbing a clean fork so you don't have all my ugly commits in your PR... I won't be offended!\n. ",
    "interrobrian": "Hey @chrisheninger, nice work finding this and working on it. I ran into this same issue, so I picked up your fork and tied off a few loose ends. I've got a pull request in right now that I think should be good.\n. Alright, I had some difficulties getting the tests to run on my machine locally, but I've gotten that all straightened out. I'm pretty sure that the implementation is good, but the formerly skipped test on formly-src/directives/field.tests.js:1393 fails. Unfortunately, I don't understand the tests very well, and I'm at my limit on how much time I can spend on this right now, so I'll need some additional help.\n\nThat being said, I was able to enable the test at src/directives/formly-field.test.js:1369 and it runs successfully, and the method works for the cases that I ran into where it was problematic. Per recommendation by @chrisheninger, I made my own fork directly off of angular-formly at https://github.com/bjspencer/angular-formly.\n. Okay, I'll change my PR to reference the other issue\n. Ah, looks like that other implementation is better anyway, so I'll hold off. Sorry for jumping the gun!\n\nDate: Wed, 11 Nov 2015 11:05:52 -0800\nFrom: notifications@github.com\nTo: angular-formly@noreply.github.com\nCC: brianspencer@outlook.com\nSubject: Re: [angular-formly] showError variable not correct for control types with multiple inputs (#548)\n\nPlease check out the conversation over there. You'll need to adjust your implementation a bit.\n\n\u2014\nReply to this email directly or view it on GitHub.\n. Hey @chrisheninger, nice work finding this and working on it. I ran into this same issue, so I picked up your fork and tied off a few loose ends. I've got a pull request in right now that I think should be good.\n. Alright, I had some difficulties getting the tests to run on my machine locally, but I've gotten that all straightened out. I'm pretty sure that the implementation is good, but the formerly skipped test on formly-src/directives/field.tests.js:1393 fails. Unfortunately, I don't understand the tests very well, and I'm at my limit on how much time I can spend on this right now, so I'll need some additional help.\n\nThat being said, I was able to enable the test at src/directives/formly-field.test.js:1369 and it runs successfully, and the method works for the cases that I ran into where it was problematic. Per recommendation by @chrisheninger, I made my own fork directly off of angular-formly at https://github.com/bjspencer/angular-formly.\n. Okay, I'll change my PR to reference the other issue\n. Ah, looks like that other implementation is better anyway, so I'll hold off. Sorry for jumping the gun!\n\nDate: Wed, 11 Nov 2015 11:05:52 -0800\nFrom: notifications@github.com\nTo: angular-formly@noreply.github.com\nCC: brianspencer@outlook.com\nSubject: Re: [angular-formly] showError variable not correct for control types with multiple inputs (#548)\n\nPlease check out the conversation over there. You'll need to adjust your implementation a bit.\n\n\u2014\nReply to this email directly or view it on GitHub.\n. ",
    "hrgui": "@kentcdodds @bjspencer @chrisheninger \n\nAny suggestions on how `formlyConfig.extras.errorExistsAndShouldBeVisibleExpression` should work? Now that fc could be an array, doing the following expression won't work:\n\n`fc.$error && (fc.$dirty || form.$submitted);`\n\nIt's because fc is an array, and fc will never have $error and $dirty. The work around I have is currently the following:\n\n`(fc.$error || fc[0].$error) && (fc.$dirty || fc[0].$dirty || form.$submitted);`\n\nOne potential solution that I could think of is we could potentially gather all the variables of fc and join them to 1 single variable to designate whether the error should show or not.\n. Just found that out right now. :+1: That's much better than a string.\n. @kentcdodds , that did work but now I run to another problem: \n\n``` html\n<div ng-messages ng-if=\"options.validation.errorExistsAndShouldBeVisible\"\n                               ng-messages=\"options.formControl.$error\">\n    <div ng-message-exp=\"::name\"\n            ng-repeat=\"(name, message) in ::options.validation.messages\">\n      {{message(options.formControl.$viewValue, options.formControl.$modelValue, this)}}\n    </div>\n  </div>\n```\n\nThe problem lies within here: `ng-messages=\"options.formControl.$error\"`.\n\nOne current workaround I have is: `ng-messages=\"fc.$error || fc[0].$error` , but that's probably not going to work so well. Any ideas? \n. No problem. :+1: \n. @kentcdodds @bjspencer @chrisheninger \n\nAny suggestions on how `formlyConfig.extras.errorExistsAndShouldBeVisibleExpression` should work? Now that fc could be an array, doing the following expression won't work:\n\n`fc.$error && (fc.$dirty || form.$submitted);`\n\nIt's because fc is an array, and fc will never have $error and $dirty. The work around I have is currently the following:\n\n`(fc.$error || fc[0].$error) && (fc.$dirty || fc[0].$dirty || form.$submitted);`\n\nOne potential solution that I could think of is we could potentially gather all the variables of fc and join them to 1 single variable to designate whether the error should show or not.\n. Just found that out right now. :+1: That's much better than a string.\n. @kentcdodds , that did work but now I run to another problem: \n\n``` html\n<div ng-messages ng-if=\"options.validation.errorExistsAndShouldBeVisible\"\n                               ng-messages=\"options.formControl.$error\">\n    <div ng-message-exp=\"::name\"\n            ng-repeat=\"(name, message) in ::options.validation.messages\">\n      {{message(options.formControl.$viewValue, options.formControl.$modelValue, this)}}\n    </div>\n  </div>\n```\n\nThe problem lies within here: `ng-messages=\"options.formControl.$error\"`.\n\nOne current workaround I have is: `ng-messages=\"fc.$error || fc[0].$error` , but that's probably not going to work so well. Any ideas? \n. No problem. :+1: \n. ",
    "julianaramburu": "All right! Let me check this and I will fix that asap! Thanks for let me\nhelp and start contributing! Even if it's just a small tiny bit D:!\n\n_Juli\u00e1n Aramburu._\n\n2015-10-16 17:53 GMT-03:00 Kent C. Dodds notifications@github.com:\n\n> Almost perfect @julianaramburu https://github.com/julianaramburu! The\n> convention requires a : between the scope and the subject. And it also\n> requires blank lines between the subject and the related issues. So yours\n> should be:\n> \n> fix(extras): Remove explicitAsync property\n> \n> closes #516\n> \n> If you could kindly fix this, I would appreciate it. If you need help\n> doing that, see this StackOverflow answer\n> http://stackoverflow.com/a/179147/971592. Thanks! Sorry that the script\n> isn't working for windows right now :-(\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/pull/518#issuecomment-148833678\n> .\n. I think I'm failin' hard trying to edit the commit message lol \n. Let's try then :D\n\n_Juli\u00e1n Aramburu._\n\n2015-10-17 10:12 GMT-03:00 Kent C. Dodds notifications@github.com:\n\n> I think I've fixed the windows issues, if you start over, everything\n> should go much smoother :-)\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/pull/518#issuecomment-148915507\n> .\n. All right! Let me check this and I will fix that asap! Thanks for let me\nhelp and start contributing! Even if it's just a small tiny bit D:!\n\n_Juli\u00e1n Aramburu._\n\n2015-10-16 17:53 GMT-03:00 Kent C. Dodds notifications@github.com:\n\n> Almost perfect @julianaramburu https://github.com/julianaramburu! The\n> convention requires a : between the scope and the subject. And it also\n> requires blank lines between the subject and the related issues. So yours\n> should be:\n> \n> fix(extras): Remove explicitAsync property\n> \n> closes #516\n> \n> If you could kindly fix this, I would appreciate it. If you need help\n> doing that, see this StackOverflow answer\n> http://stackoverflow.com/a/179147/971592. Thanks! Sorry that the script\n> isn't working for windows right now :-(\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/pull/518#issuecomment-148833678\n> .\n. I think I'm failin' hard trying to edit the commit message lol \n. Let's try then :D\n\n_Juli\u00e1n Aramburu._\n\n2015-10-17 10:12 GMT-03:00 Kent C. Dodds notifications@github.com:\n\n> I think I've fixed the windows issues, if you start over, everything\n> should go much smoother :-)\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/pull/518#issuecomment-148915507\n> .\n. ",
    "benhalverson": "Thanks Kent. It helps that I already watched your egghead videos on creating an open source lib.\n. Thanks Kent. It helps that I already watched your egghead videos on creating an open source lib.\n. ",
    "atom-morgan": "Gotcha. That's the default on my system right now due to other work I'm doing. I updated to the latest version and it works. Thanks again for all of your help!\n. Gotcha. That's the default on my system right now due to other work I'm doing. I updated to the latest version and it works. Thanks again for all of your help!\n. ",
    "immortalcy": "While this is working with version 7.1.2 I tried making the changes @BarryThePenguin made to the current version of formly and test it against repeatedSection. It still seems that on repeatedSection version 7.1.2 is not working. So the issue must be something else as well and not only what Barry changed. I am trying to find a work around on this one and keep you posted. @kentcdodds\n. @nipuna777 Yes I noticed that as well. Strange behavior but I am not quite sure if this happens because the model is not updated onPress or something. The sure thing is that this \"thing\" does not apply on repeatedSection at all.\n. @kentcdodds That is really nice to know. However I have updated my non working [JSbin](https://jsbin.com/mekeca/8/edit?js,output) and it still doesn't work! FYI here is my [stackoverflow](http://stackoverflow.com/questions/34284333/angular-formly-custom-validation-on-multiple-fields-on-a-repeat-section) question as well.\n. @schempy I made that change as well.. however that will not fix the problem for a repeatedSection.\n. I have already created one.. the non working example is on the stackoverflow question. here is the link here as well: https://jsbin.com/mekeca/edit?js,output\n. @kentcdodds @ckniffen Is there a way to check if bug #594 still happens? It was a similar bug that happened with repeat sections.. If a release was out we could check it on this [bin](https://jsbin.com/mekeca/edit?html,js,output).\n. That's the reason I asked if there is a way to check the updates on that version.. sorry for not being clear on my previous message.\n. It would be nice if we could have a more generic solution instead of changing the template to only support that, since that means that in any case where you would like to have other data-repeat value you wouldn't be able to. You would be 'forced' to create a new template and that is something angular-formly doesn't intent to do.\n. Yes but with Luddinus solution you won't be able to use to.ngOptions, am I missing something here?\n. While this is working with version 7.1.2 I tried making the changes @BarryThePenguin made to the current version of formly and test it against repeatedSection. It still seems that on repeatedSection version 7.1.2 is not working. So the issue must be something else as well and not only what Barry changed. I am trying to find a work around on this one and keep you posted. @kentcdodds\n. @nipuna777 Yes I noticed that as well. Strange behavior but I am not quite sure if this happens because the model is not updated onPress or something. The sure thing is that this \"thing\" does not apply on repeatedSection at all.\n. @kentcdodds That is really nice to know. However I have updated my non working [JSbin](https://jsbin.com/mekeca/8/edit?js,output) and it still doesn't work! FYI here is my [stackoverflow](http://stackoverflow.com/questions/34284333/angular-formly-custom-validation-on-multiple-fields-on-a-repeat-section) question as well.\n. @schempy I made that change as well.. however that will not fix the problem for a repeatedSection.\n. I have already created one.. the non working example is on the stackoverflow question. here is the link here as well: https://jsbin.com/mekeca/edit?js,output\n. @kentcdodds @ckniffen Is there a way to check if bug #594 still happens? It was a similar bug that happened with repeat sections.. If a release was out we could check it on this [bin](https://jsbin.com/mekeca/edit?html,js,output).\n. That's the reason I asked if there is a way to check the updates on that version.. sorry for not being clear on my previous message.\n. It would be nice if we could have a more generic solution instead of changing the template to only support that, since that means that in any case where you would like to have other data-repeat value you wouldn't be able to. You would be 'forced' to create a new template and that is something angular-formly doesn't intent to do.\n. Yes but with Luddinus solution you won't be able to use to.ngOptions, am I missing something here?\n. ",
    "nipuna777": "@immortalcy @kentcdodds \n\nA small thing that I've noted,\nThe example does validate the field when you enter an extra character(Or delete one)\n\nTo reproduce this you can, \n1. Set email to a@b.c\n2. Set confirm to a@b.cd (Causes validation error as expected)\n3. Set email to a@b.cd (Should be valid, but still shows a validation error)\n4. Set email to a@b.cdd (Should be invalid, but not shows as now shown as valid) \n\nI faced a similar issue when writing a custom validator. It was due to the model being checked 'before' the key up event occurred (Validation is done before the model is changed). \n\nUnfortunately I'm not at all familiar with the Formly core code base to find the bug. \n. @immortalcy @kentcdodds \n\nA small thing that I've noted,\nThe example does validate the field when you enter an extra character(Or delete one)\n\nTo reproduce this you can, \n1. Set email to a@b.c\n2. Set confirm to a@b.cd (Causes validation error as expected)\n3. Set email to a@b.cd (Should be valid, but still shows a validation error)\n4. Set email to a@b.cdd (Should be invalid, but not shows as now shown as valid) \n\nI faced a similar issue when writing a custom validator. It was due to the model being checked 'before' the key up event occurred (Validation is done before the model is changed). \n\nUnfortunately I'm not at all familiar with the Formly core code base to find the bug. \n. ",
    "schempy": "I made a change to [formly-form.js](https://github.com/formly-js/angular-formly/blob/master/src/directives/formly-form.js) that got things working for me. In the function [onModelOrFormStateChange](https://github.com/formly-js/angular-formly/blob/master/src/directives/formly-form.js#L131) I added parenthesis to validate for a promise:\n\n``` js\nif ( promise ) {\n  promise.then( validate() ) //added parenthesis\n} else {\n  validate()\n}\n```\n\nI'm new to the source code for formly so not sure if this is the correct solution.\n. I made a change to [formly-form.js](https://github.com/formly-js/angular-formly/blob/master/src/directives/formly-form.js) that got things working for me. In the function [onModelOrFormStateChange](https://github.com/formly-js/angular-formly/blob/master/src/directives/formly-form.js#L131) I added parenthesis to validate for a promise:\n\n``` js\nif ( promise ) {\n  promise.then( validate() ) //added parenthesis\n} else {\n  validate()\n}\n```\n\nI'm new to the source code for formly so not sure if this is the correct solution.\n. ",
    "dickp": "I'm using formly v7.3.9\n\nThe problem I had with validateOnModelChange is that field.formControl is an array, but the code only considered the plain type version (apiCheck looks for typeOrArrayOf here.)\n\nHere's a proof-of-concept diff:\n\n``` javascript\n--- formly.js.orig  2016-02-23 13:15:14.795752158 +0000\n+++ formly.js   2016-02-23 13:21:50.467835899 +0000\n@@ -2106,11 +2106,21 @@\n              field.hide = evalCloseToFormlyExpression(field.hideExpression, val, field, index);\n            }\n            if (field.extras && field.extras.validateOnModelChange && field.formControl) {\n-             var validate = field.formControl.$validate;\n-             if (promise) {\n-               promise.then(validate);\n+            function validateFormControl (formControl) {\n+               var validate = formControl.$validate;\n+               if (promise) {\n+                 promise.then(validate);\n+               } else {\n+                 validate();\n+               }\n+            }\n+\n+             if (_angularFix2['default'].isArray(field.formControl)) {\n+               _angularFix2['default'].forEach(field.formControl, function (formControl) {\n+                 validateFormControl(formControl);\n+               });\n              } else {\n-               validate();\n+               validateFormControl(field.formControl);\n              }\n            }\n          });\n```\n. I've opened a PR.  It fixes my problem, hopefully it helps for the others watching this issue.\n. I'm using formly v7.3.9\n\nThe problem I had with validateOnModelChange is that field.formControl is an array, but the code only considered the plain type version (apiCheck looks for typeOrArrayOf here.)\n\nHere's a proof-of-concept diff:\n\n``` javascript\n--- formly.js.orig  2016-02-23 13:15:14.795752158 +0000\n+++ formly.js   2016-02-23 13:21:50.467835899 +0000\n@@ -2106,11 +2106,21 @@\n              field.hide = evalCloseToFormlyExpression(field.hideExpression, val, field, index);\n            }\n            if (field.extras && field.extras.validateOnModelChange && field.formControl) {\n-             var validate = field.formControl.$validate;\n-             if (promise) {\n-               promise.then(validate);\n+            function validateFormControl (formControl) {\n+               var validate = formControl.$validate;\n+               if (promise) {\n+                 promise.then(validate);\n+               } else {\n+                 validate();\n+               }\n+            }\n+\n+             if (_angularFix2['default'].isArray(field.formControl)) {\n+               _angularFix2['default'].forEach(field.formControl, function (formControl) {\n+                 validateFormControl(formControl);\n+               });\n              } else {\n-               validate();\n+               validateFormControl(field.formControl);\n              }\n            }\n          });\n```\n. I've opened a PR.  It fixes my problem, hopefully it helps for the others watching this issue.\n. ",
    "gillchristian": "Since #641 was merged, this issue could be closed.\n. Could you please reproduce your issue with [issue.angular-formly.com](http://jsbin.com/zinewe/edit?html,js,output)? \n\nIt will help us determine what exactly the problem is that you're describing and how it could be fixed. Thanks!\n. I changed a some things on your pastebin, and now [it is working](http://jsbin.com/jikequ/edit?js,output).\n\nA few things to note:\n- You missed to inject `$timeout` into the controller.\n- You had the `templateOptions` nested inside `templateOptions`\n- I might be missing something here, but I think `ui-select-multiple` is not a supported type by [formly-bootstrap](https://github.com/formly-js/angular-formly-templates-bootstrap#form-fields), so I used [`type: 'select'`](https://github.com/formly-js/angular-formly-templates-bootstrap#select-form-field) instead.\n- When you use `ngOptions` is not necessary to use the other options, you are in full control of the render of the select.\n- I did not use the `optionsAttr` since I was using the normal select, it points to `ng-options` by default.\n- Check the Angular docs for [`ngOptions`](https://docs.angularjs.org/api/ng/directive/ngOptions). It will help you understand how the Angular renders the select and its options.\n. Ohh sorry I totally missed that.\n\nThere should not be problems with multiple select + async, you were missing the `setType` definition, as well as the template for it and to reference `ui-bootstrap` and `ui-select` on the HTML file.\n\nIt [works now](http://jsbin.com/jikequ/edit?html,js,output).\n\nNote that I am setting the default value after the `options` get returned, else there are some problems due to the way angular watches the ngOptions collection, read [Complex Models (objects or collections)](https://docs.angularjs.org/api/ng/directive/ngOptions) on the ngOptions docs.\n. No problem, I hope you got it to work!\n. Can you give more information? How did you try to use it? Some examples of what you are doing, and what is not working could be very help full. Create an example at [help.angular-formly.com](http://help.angular-formly.com/).\n\nAlso, ask questions on [StackOverflow](http://stackoverflow.com/) using the [angular-formly](http://stackoverflow.com/tags/angular-formly/info) tag.\n. It should be possible yes!\n\nPlease post questions to [StackOverflow](http://stackoverflow.com/) using the [angular-formly tag](http://stackoverflow.com/tags/angular-formly/info). Also you can ask on the [gitter](https://gitter.im/formly-js/angular-formly) channel.\n\nTry to keep issues for _reporting bugs_, _requesting features_ or maybe discuss possible _pull requests_.\n. My suggestion would be to go for the step 2. Having _plato-form_ as optional [plugin](http://docs.angular-formly.com/page/plugins) would be great!\n. I think this issue could be closed since the PRs are merged already! @kentcdodds \n. LGTM :)\n. @david-potgieter thank you for sharing!\n\n@Blaze34 this is an open source project, people dedicate their free time to contribute. You can always solve the bug yourself and [submit a PR](https://github.com/formly-js/angular-formly/blob/master/CONTRIBUTING.md#pull-requests), that'd be much appreciated. Thanks!\n. LGTM :+1: \n. We keep issues [only for bugs and feature requests](https://github.com/formly-js/angular-formly#getting-help), since the question is on SO I will close it for now.\n\nIf you find out it is an issue feel free to re-open it with the relevant information.\n. Since #641 was merged, this issue could be closed.\n. Could you please reproduce your issue with [issue.angular-formly.com](http://jsbin.com/zinewe/edit?html,js,output)? \n\nIt will help us determine what exactly the problem is that you're describing and how it could be fixed. Thanks!\n. I changed a some things on your pastebin, and now [it is working](http://jsbin.com/jikequ/edit?js,output).\n\nA few things to note:\n- You missed to inject `$timeout` into the controller.\n- You had the `templateOptions` nested inside `templateOptions`\n- I might be missing something here, but I think `ui-select-multiple` is not a supported type by [formly-bootstrap](https://github.com/formly-js/angular-formly-templates-bootstrap#form-fields), so I used [`type: 'select'`](https://github.com/formly-js/angular-formly-templates-bootstrap#select-form-field) instead.\n- When you use `ngOptions` is not necessary to use the other options, you are in full control of the render of the select.\n- I did not use the `optionsAttr` since I was using the normal select, it points to `ng-options` by default.\n- Check the Angular docs for [`ngOptions`](https://docs.angularjs.org/api/ng/directive/ngOptions). It will help you understand how the Angular renders the select and its options.\n. Ohh sorry I totally missed that.\n\nThere should not be problems with multiple select + async, you were missing the `setType` definition, as well as the template for it and to reference `ui-bootstrap` and `ui-select` on the HTML file.\n\nIt [works now](http://jsbin.com/jikequ/edit?html,js,output).\n\nNote that I am setting the default value after the `options` get returned, else there are some problems due to the way angular watches the ngOptions collection, read [Complex Models (objects or collections)](https://docs.angularjs.org/api/ng/directive/ngOptions) on the ngOptions docs.\n. No problem, I hope you got it to work!\n. Can you give more information? How did you try to use it? Some examples of what you are doing, and what is not working could be very help full. Create an example at [help.angular-formly.com](http://help.angular-formly.com/).\n\nAlso, ask questions on [StackOverflow](http://stackoverflow.com/) using the [angular-formly](http://stackoverflow.com/tags/angular-formly/info) tag.\n. It should be possible yes!\n\nPlease post questions to [StackOverflow](http://stackoverflow.com/) using the [angular-formly tag](http://stackoverflow.com/tags/angular-formly/info). Also you can ask on the [gitter](https://gitter.im/formly-js/angular-formly) channel.\n\nTry to keep issues for _reporting bugs_, _requesting features_ or maybe discuss possible _pull requests_.\n. My suggestion would be to go for the step 2. Having _plato-form_ as optional [plugin](http://docs.angular-formly.com/page/plugins) would be great!\n. I think this issue could be closed since the PRs are merged already! @kentcdodds \n. LGTM :)\n. @david-potgieter thank you for sharing!\n\n@Blaze34 this is an open source project, people dedicate their free time to contribute. You can always solve the bug yourself and [submit a PR](https://github.com/formly-js/angular-formly/blob/master/CONTRIBUTING.md#pull-requests), that'd be much appreciated. Thanks!\n. LGTM :+1: \n. We keep issues [only for bugs and feature requests](https://github.com/formly-js/angular-formly#getting-help), since the question is on SO I will close it for now.\n\nIf you find out it is an issue feel free to re-open it with the relevant information.\n. ",
    "pseudo-su": "The problem I have is that formlyField.runExpressions returns the $timeout promise but it should be resolving after all the field values are set.\n\n[here's](https://github.com/formly-js/angular-formly/compare/master...psuedoSudo:master) what I did to fix.\n. Completely correct @kwypchlo, bit of a brain fart. The issue should still be that the $timeout promise resolves before all the fields are set. I'll update it now\n. It's an issue with MIME types which is stopping the ui-tinymce script from running, switching to using [rawgit.com](http://rawgit.com/) fixes it.\n\n``` html\n     <script src=\"//rawgit.com/angular-ui/ui-tinymce/master/src/tinymce.js\"></script>\n```\n. @BarryThePenguin can't find any xit or xdescribe tests in the formly-field.test.js, am I missing something?\n. \"validateOnModelChange should run field expressions when form is initialised\" test is possibly relevant but the test at the moment seems to be for non-promise situations. before it gets to the relevant part in FormlyFormController.runFieldExpressionProperties the field.runExpressions is undefined.\n\n``` javascript\nfunction runFieldExpressionProperties(field, index) {\n    const model = field.model || $scope.model\n    const promise = field.runExpressions && field.runExpressions()\n    // field.runExpressions === undefined\n```\n\nDo you know when exactly there will be a promise and when there won't?\n\nI'm not actually sure about the specifics which makes it difficult to write/adapt a test case without me spending some more time on it.\n. The relevant code in [formly-field](https://codecov.io/gh/formly-js/angular-formly/src/b3d301bbeda5e8f8fc78b49e44bfef6225847c51/src/directives/formly-field.js#L61) and [formly-form controller](https://codecov.io/gh/formly-js/angular-formly/src/b3d301bbeda5e8f8fc78b49e44bfef6225847c51/src/directives/formly-form.controller.js#L30) do seem to be covered by some tests at least. Ideally there would be a test for making sure that expressions complete before validation, I'll look into it.\n. Glad I could help \ud83d\ude03 \n. The problem I have is that formlyField.runExpressions returns the $timeout promise but it should be resolving after all the field values are set.\n\n[here's](https://github.com/formly-js/angular-formly/compare/master...psuedoSudo:master) what I did to fix.\n. Completely correct @kwypchlo, bit of a brain fart. The issue should still be that the $timeout promise resolves before all the fields are set. I'll update it now\n. It's an issue with MIME types which is stopping the ui-tinymce script from running, switching to using [rawgit.com](http://rawgit.com/) fixes it.\n\n``` html\n     <script src=\"//rawgit.com/angular-ui/ui-tinymce/master/src/tinymce.js\"></script>\n```\n. @BarryThePenguin can't find any xit or xdescribe tests in the formly-field.test.js, am I missing something?\n. \"validateOnModelChange should run field expressions when form is initialised\" test is possibly relevant but the test at the moment seems to be for non-promise situations. before it gets to the relevant part in FormlyFormController.runFieldExpressionProperties the field.runExpressions is undefined.\n\n``` javascript\nfunction runFieldExpressionProperties(field, index) {\n    const model = field.model || $scope.model\n    const promise = field.runExpressions && field.runExpressions()\n    // field.runExpressions === undefined\n```\n\nDo you know when exactly there will be a promise and when there won't?\n\nI'm not actually sure about the specifics which makes it difficult to write/adapt a test case without me spending some more time on it.\n. The relevant code in [formly-field](https://codecov.io/gh/formly-js/angular-formly/src/b3d301bbeda5e8f8fc78b49e44bfef6225847c51/src/directives/formly-field.js#L61) and [formly-form controller](https://codecov.io/gh/formly-js/angular-formly/src/b3d301bbeda5e8f8fc78b49e44bfef6225847c51/src/directives/formly-form.controller.js#L30) do seem to be covered by some tests at least. Ideally there would be a test for making sure that expressions complete before validation, I'll look into it.\n. Glad I could help \ud83d\ude03 \n. ",
    "Rybbow": "I submitted a pull-request #728, that I guess fixes the bug mentioned in this issue. Let me know what you think.. I submitted a pull-request #728, that I guess fixes the bug mentioned in this issue. Let me know what you think.. ",
    "iJungleboy": "I'll try...thanks...\n. ok, thanks!\n. @kentcdodds thanks, I got it to work. Core problem was late dependency injection, which I could solve using ocLazyLoad. \n. I'll try...thanks...\n. ok, thanks!\n. @kentcdodds thanks, I got it to work. Core problem was late dependency injection, which I could solve using ocLazyLoad. \n. ",
    "Darex1991": "It's coffee, but I pasted it with tabs. Tnx for help\n. It's coffee, but I pasted it with tabs. Tnx for help\n. ",
    "MCKRUZ": "I believe this is related to the same issue I'm having with model resetting.  Here is what I think is happening.\n<code>\nfunction resetModel() {\n          $scope.model[$scope.options.key] = $scope.options.initialValue;\n          if ($scope.options.formControl) {\n            if (_angularFix2['default'].isArray($scope.options.formControl)) {\n              _angularFix2['default'].forEach($scope.options.formControl, function (formControl) {\n                resetFormControl(formControl, true);\n              });\n            } else {\n              resetFormControl($scope.options.formControl);\n            }\n          }\n        }\n</code>\n\nInside this code block we set $scope.model[$scope.options.key] like so.  Unfortunately if you have a key that is dot delimited it doesn't find the value.  We should be using some sort of recursive find like this one.\n\nfunction _setNested(path, value, obj) {\n            var schema = obj;  // a moving reference to internal objects within obj\n            var pList = path.split('.');\n            var len = pList.length;\n            for (var i = 0; i < len - 1; i++) {\n                var elem = pList[i];\n                if (!schema[elem]) schema[elem] = {}\n                schema = schema[elem];\n            }\n\n```\n        schema[pList[len - 1]] = value;\n    }\n```\n. So something like\n\nvar setter = $parse($scope.options.key).assign;\n            setter($scope.model, $scope.options.initialValue);\n. Sure Give me a few\n. Kent, how do I debug through the unit test.  I tossed a debugger command inside but it doesn't break for me.\n. ok so $parse($scope.options.key)($scope.model)  does not work with $scope.options.key is a number.  \n\nAny ideas?\n. ok I fixed it but now I'm getting this when trying to commit\n\ngit -c diff.mnemonicprefix=false -c core.quotepath=false -c credential.helper=sourcetree commit -q -F /var/folders/xq/b_llhsj1735gqlr3sh99cpbm0000gp/T/SourceTreeTemp.QHb7lk -a \nenv: node: No such file or directory\nCompleted with errors, see above\n. npm ERR! Tell the author that this fails on your system:\nnpm ERR!     npm run eslint:test -s && npm run eslint:src -s\n. nm I got it.  Pushed\n. Kent, is this still a bug with my fix?\n. Not sure who you're asking but I think the issue is that in \n<code>\nfunction resetModel() \n</code>\n\nYour looping over all the $scope.fields\n<code>\n_angularFix2['default'].forEach($scope.fields, function (field) \n</code>\n\nThe problem is that the \"fields\" object that your looping over isn't the same bound object that you bind here\n\n\"formly-form model=\"model[options.key]\" fields=\"options.data.fields\"\"\n\nIt's just an arbitrary object that looks at \"fields\", whereas for this perticular wrapper it's in options.data.fields, not options.fields.\n. Hey Kent, I could have sword I fixed everything, can you check again?\n. Honestly, I'm still having issues after re-forking and copying over my changes.  I can't spend any more time on this for a while (have to get back to work!) I'll try updating at a later date.\n. Ok I think I got it.\n. Bah!!!  I forgot to include the tests!  Le sigh\u2026.ok  I\u2019ll try again later.\n\nFrom:  \"Kent C. Dodds\" notifications@github.com\nReply-To:  formly-js/angular-formly reply@reply.github.com\nDate:  Monday, November 2, 2015 at 3:17 PM\nTo:  formly-js/angular-formly angular-formly@noreply.github.com\nCc:  Matt Kruczek kruz79@gmail.com\nSubject:  Re: [angular-formly] fix(): added  functionality for issue number 531 (#534)\n\n:-( your other PR had tests :-( also, your commit message needs to have a scope: fix(formly-field) \n\n\u2014\nReply to this email directly or view it on GitHub.\n. Yay!  Nice.  Quick question...when do you think there will be an official release with this improvement?  I'm having to hack my build right now to get it to work.\n. Nice!  Thanks Kent!  I enjoyed contributing!  Hopefully I can continue to do so on a regular basis.\n\nFrom:  \"Kent C. Dodds\" notifications@github.com\nReply-To:  formly-js/angular-formly reply@reply.github.com\nDate:  Monday, November 2, 2015 at 6:53 PM\nTo:  formly-js/angular-formly angular-formly@noreply.github.com\nCc:  Matt Kruczek kruz79@gmail.com\nSubject:  Re: [angular-formly] fix(formly-field): Added fix for nested object properties - issue num\u2026 (#535)\n\nShould be out now!\n\n\u2014\nReply to this email directly or view it on GitHub.\n. Yes...but it's a touch hokey\n\nchange this\n<code>var watchExpression = watcher.expression || '$parse(\\'' + field.key + '\\')(model)';</code>\n\nto this\n<code>var watchExpression = watcher.expression || '$parse(\\'' + field.key.split('.').join('\\'][\\'') + '\\')(model)';</code>\n. Hey Kent, sorry it looks like I posted the wrong code.\n\nThis is my fix.  I tried it and it works locally\n\nvar watchExpression = watcher.expression || 'model[\\'' + field.key.split('.').join('\\'][\\'') + '\\']';\n. Done and Done.\n. Kent, can you verify that this is the test you want.\n\n```\nit(`should add watches on deep dive fields`, () => {\n  const formWithOptions = '<formly-form model=\"model\" fields=\"fields\" options=\"options\"></formly-form>'\n  scope.model = {}\n  scope.options = {}\n\n  const deepLinkField = getNewField()\n  deepLinkField.key = 'foo.bar'\n  deepLinkField.watcher = {\n    listener: sinon.spy(),\n  }\n\n  scope.fields = [deepLinkField]\n  compileAndDigest(formWithOptions)\n  expect(compileAndDigest).to.not.throw()\n  expect(deepLinkField.watcher.listener).to.have.been.called\n  scope.model[deepLinkField.key] = 'brown'\n  scope.$digest()\n  expect(compileAndDigest).to.not.throw()\n  expect(deepLinkField.watcher.listener).to.have.been.called\n})\n```\n. Kent, can you verify this is what you want?  I can't get to your other comment about this and I want to put this issue to b\n\n``` javascript\n  it(`should add watches on deep dive fields`, () => {\n      const formWithOptions = '<formly-form model=\"model\" fields=\"fields\" options=\"options\"></formly-form>'\n      scope.model = {}\n      scope.options = {}\n\n      const deepLinkField = getNewField()\n      deepLinkField.key = 'foo.bar'\n      deepLinkField.watcher = {\n        listener: sinon.spy(),\n      }\n\n      scope.fields = [deepLinkField]\n      compileAndDigest(formWithOptions)\n      expect(deepLinkField.watcher.listener).to.have.been.called\n      scope.model.foo = {\n        bar: 'brown',\n      }\n      scope.$digest()\n      expect(deepLinkField.watcher.listener).to.have.been.called\n    })\n```\n. Ok hopefully this is good now\n. Did this go live yet?\n. I didn\u2019t commit anything though\u2026I was waiting on your assessment of the test stuff I sent you.\n\nFrom:  \"Kent C. Dodds\" notifications@github.com\nReply-To:  formly-js/angular-formly reply@reply.github.com\nDate:  Friday, November 20, 2015 at 9:08 PM\nTo:  formly-js/angular-formly angular-formly@noreply.github.com\nCc:  Matt Kruczek kruz79@gmail.com\nSubject:  Re: [angular-formly] fix(formly-form): Issue number 542 (#547)\n\nAlso, the commit message isn't quite right. Please review the commit message convention. Thanks again!\n\n\u2014\nReply to this email directly or view it on GitHub.\n. Yeah, I think I have an easy fix solution\n. So this is actually more complex then it seems.\n\nThe test 'nested keys' is actually passing for the wrong reasons\n\nWhen this gets called\n\n`const secondField = {template: input, key: nestedArray, defaultValue}\n        scope.fields.push(secondField)`\n\nthe nestedArray value is baz[0] which actually makes it so the model looks like this\n\nscope.model.baz.0 = value\n\nnot like this\n\nscope.model.baz[0] = value\n\nSo we need to figure out a way to dynamically set up a nested array.\n. Ok so I can fix the crash by putting this in\n\n`if (/\\d/.test(key) && key.indexOf('[') !== -1) {\n        return model[key]\n      } else {\n        return $parse(key)(model)\n      }` \n\nbut it wont fix the array issue.\n\nKent is this sufficient?\n. Ok just checked in a fix.\n. Thanks!\n\nAnd um...thanks to the second too, I think lol.\n. I have to admit I'm a little stumped on this one\n\nIf I do this..\n\n`function shouldNotUseParseKey(key) {\n      return angular.isNumber(key) || (/^\\d/.test(key) && key.indexOf('[') === -1) || (key.indexOf('-') !== -1)\n    }`\n\nThen this works\naddress-1st-line\nbut this doesn't\nb141c66a-2857-4196-847b-b2096fa6170d\n\nKent any ideas?\n. I don't think the second one ever worked.  Even with the original code\n. Danny sorry I stand corrected.  I pushed a change, that should fix it.\n. I think this is just an old merge.  If you check the code the fix should be in there.\n. Sure no problem, will be in the future\n. I believe this is related to the same issue I'm having with model resetting.  Here is what I think is happening.\n<code>\nfunction resetModel() {\n          $scope.model[$scope.options.key] = $scope.options.initialValue;\n          if ($scope.options.formControl) {\n            if (_angularFix2['default'].isArray($scope.options.formControl)) {\n              _angularFix2['default'].forEach($scope.options.formControl, function (formControl) {\n                resetFormControl(formControl, true);\n              });\n            } else {\n              resetFormControl($scope.options.formControl);\n            }\n          }\n        }\n</code>\n\nInside this code block we set $scope.model[$scope.options.key] like so.  Unfortunately if you have a key that is dot delimited it doesn't find the value.  We should be using some sort of recursive find like this one.\n\nfunction _setNested(path, value, obj) {\n            var schema = obj;  // a moving reference to internal objects within obj\n            var pList = path.split('.');\n            var len = pList.length;\n            for (var i = 0; i < len - 1; i++) {\n                var elem = pList[i];\n                if (!schema[elem]) schema[elem] = {}\n                schema = schema[elem];\n            }\n\n```\n        schema[pList[len - 1]] = value;\n    }\n```\n. So something like\n\nvar setter = $parse($scope.options.key).assign;\n            setter($scope.model, $scope.options.initialValue);\n. Sure Give me a few\n. Kent, how do I debug through the unit test.  I tossed a debugger command inside but it doesn't break for me.\n. ok so $parse($scope.options.key)($scope.model)  does not work with $scope.options.key is a number.  \n\nAny ideas?\n. ok I fixed it but now I'm getting this when trying to commit\n\ngit -c diff.mnemonicprefix=false -c core.quotepath=false -c credential.helper=sourcetree commit -q -F /var/folders/xq/b_llhsj1735gqlr3sh99cpbm0000gp/T/SourceTreeTemp.QHb7lk -a \nenv: node: No such file or directory\nCompleted with errors, see above\n. npm ERR! Tell the author that this fails on your system:\nnpm ERR!     npm run eslint:test -s && npm run eslint:src -s\n. nm I got it.  Pushed\n. Kent, is this still a bug with my fix?\n. Not sure who you're asking but I think the issue is that in \n<code>\nfunction resetModel() \n</code>\n\nYour looping over all the $scope.fields\n<code>\n_angularFix2['default'].forEach($scope.fields, function (field) \n</code>\n\nThe problem is that the \"fields\" object that your looping over isn't the same bound object that you bind here\n\n\"formly-form model=\"model[options.key]\" fields=\"options.data.fields\"\"\n\nIt's just an arbitrary object that looks at \"fields\", whereas for this perticular wrapper it's in options.data.fields, not options.fields.\n. Hey Kent, I could have sword I fixed everything, can you check again?\n. Honestly, I'm still having issues after re-forking and copying over my changes.  I can't spend any more time on this for a while (have to get back to work!) I'll try updating at a later date.\n. Ok I think I got it.\n. Bah!!!  I forgot to include the tests!  Le sigh\u2026.ok  I\u2019ll try again later.\n\nFrom:  \"Kent C. Dodds\" notifications@github.com\nReply-To:  formly-js/angular-formly reply@reply.github.com\nDate:  Monday, November 2, 2015 at 3:17 PM\nTo:  formly-js/angular-formly angular-formly@noreply.github.com\nCc:  Matt Kruczek kruz79@gmail.com\nSubject:  Re: [angular-formly] fix(): added  functionality for issue number 531 (#534)\n\n:-( your other PR had tests :-( also, your commit message needs to have a scope: fix(formly-field) \n\n\u2014\nReply to this email directly or view it on GitHub.\n. Yay!  Nice.  Quick question...when do you think there will be an official release with this improvement?  I'm having to hack my build right now to get it to work.\n. Nice!  Thanks Kent!  I enjoyed contributing!  Hopefully I can continue to do so on a regular basis.\n\nFrom:  \"Kent C. Dodds\" notifications@github.com\nReply-To:  formly-js/angular-formly reply@reply.github.com\nDate:  Monday, November 2, 2015 at 6:53 PM\nTo:  formly-js/angular-formly angular-formly@noreply.github.com\nCc:  Matt Kruczek kruz79@gmail.com\nSubject:  Re: [angular-formly] fix(formly-field): Added fix for nested object properties - issue num\u2026 (#535)\n\nShould be out now!\n\n\u2014\nReply to this email directly or view it on GitHub.\n. Yes...but it's a touch hokey\n\nchange this\n<code>var watchExpression = watcher.expression || '$parse(\\'' + field.key + '\\')(model)';</code>\n\nto this\n<code>var watchExpression = watcher.expression || '$parse(\\'' + field.key.split('.').join('\\'][\\'') + '\\')(model)';</code>\n. Hey Kent, sorry it looks like I posted the wrong code.\n\nThis is my fix.  I tried it and it works locally\n\nvar watchExpression = watcher.expression || 'model[\\'' + field.key.split('.').join('\\'][\\'') + '\\']';\n. Done and Done.\n. Kent, can you verify that this is the test you want.\n\n```\nit(`should add watches on deep dive fields`, () => {\n  const formWithOptions = '<formly-form model=\"model\" fields=\"fields\" options=\"options\"></formly-form>'\n  scope.model = {}\n  scope.options = {}\n\n  const deepLinkField = getNewField()\n  deepLinkField.key = 'foo.bar'\n  deepLinkField.watcher = {\n    listener: sinon.spy(),\n  }\n\n  scope.fields = [deepLinkField]\n  compileAndDigest(formWithOptions)\n  expect(compileAndDigest).to.not.throw()\n  expect(deepLinkField.watcher.listener).to.have.been.called\n  scope.model[deepLinkField.key] = 'brown'\n  scope.$digest()\n  expect(compileAndDigest).to.not.throw()\n  expect(deepLinkField.watcher.listener).to.have.been.called\n})\n```\n. Kent, can you verify this is what you want?  I can't get to your other comment about this and I want to put this issue to b\n\n``` javascript\n  it(`should add watches on deep dive fields`, () => {\n      const formWithOptions = '<formly-form model=\"model\" fields=\"fields\" options=\"options\"></formly-form>'\n      scope.model = {}\n      scope.options = {}\n\n      const deepLinkField = getNewField()\n      deepLinkField.key = 'foo.bar'\n      deepLinkField.watcher = {\n        listener: sinon.spy(),\n      }\n\n      scope.fields = [deepLinkField]\n      compileAndDigest(formWithOptions)\n      expect(deepLinkField.watcher.listener).to.have.been.called\n      scope.model.foo = {\n        bar: 'brown',\n      }\n      scope.$digest()\n      expect(deepLinkField.watcher.listener).to.have.been.called\n    })\n```\n. Ok hopefully this is good now\n. Did this go live yet?\n. I didn\u2019t commit anything though\u2026I was waiting on your assessment of the test stuff I sent you.\n\nFrom:  \"Kent C. Dodds\" notifications@github.com\nReply-To:  formly-js/angular-formly reply@reply.github.com\nDate:  Friday, November 20, 2015 at 9:08 PM\nTo:  formly-js/angular-formly angular-formly@noreply.github.com\nCc:  Matt Kruczek kruz79@gmail.com\nSubject:  Re: [angular-formly] fix(formly-form): Issue number 542 (#547)\n\nAlso, the commit message isn't quite right. Please review the commit message convention. Thanks again!\n\n\u2014\nReply to this email directly or view it on GitHub.\n. Yeah, I think I have an easy fix solution\n. So this is actually more complex then it seems.\n\nThe test 'nested keys' is actually passing for the wrong reasons\n\nWhen this gets called\n\n`const secondField = {template: input, key: nestedArray, defaultValue}\n        scope.fields.push(secondField)`\n\nthe nestedArray value is baz[0] which actually makes it so the model looks like this\n\nscope.model.baz.0 = value\n\nnot like this\n\nscope.model.baz[0] = value\n\nSo we need to figure out a way to dynamically set up a nested array.\n. Ok so I can fix the crash by putting this in\n\n`if (/\\d/.test(key) && key.indexOf('[') !== -1) {\n        return model[key]\n      } else {\n        return $parse(key)(model)\n      }` \n\nbut it wont fix the array issue.\n\nKent is this sufficient?\n. Ok just checked in a fix.\n. Thanks!\n\nAnd um...thanks to the second too, I think lol.\n. I have to admit I'm a little stumped on this one\n\nIf I do this..\n\n`function shouldNotUseParseKey(key) {\n      return angular.isNumber(key) || (/^\\d/.test(key) && key.indexOf('[') === -1) || (key.indexOf('-') !== -1)\n    }`\n\nThen this works\naddress-1st-line\nbut this doesn't\nb141c66a-2857-4196-847b-b2096fa6170d\n\nKent any ideas?\n. I don't think the second one ever worked.  Even with the original code\n. Danny sorry I stand corrected.  I pushed a change, that should fix it.\n. I think this is just an old merge.  If you check the code the fix should be in there.\n. Sure no problem, will be in the future\n. ",
    "thefrontfactory": "Hi,\nI have an issue with the ng-if and fieldGroup, if I use an ng-if, groups are not displaying because somehow the ng-if is propagating.\nMy main form is going to be displayed, but then the subforms created by fieldGroup are not displayed because it fails the ng-if condition.\nThanks for your help\n. Hi,\nI have an issue with the ng-if and fieldGroup, if I use an ng-if, groups are not displaying because somehow the ng-if is propagating.\nMy main form is going to be displayed, but then the subforms created by fieldGroup are not displayed because it fails the ng-if condition.\nThanks for your help\n. ",
    "yahyaKacem": "@dfromero sorry, first video on Youtube, it's public now.\n. OK, I'v done some work on this, first I was going to take Google's approach on this and deleting the confirm password field whenever the password field changed, that was easy to implement but, it's annoying to have to retype the confirm password field from the start just because you added one character to the password field, so I did this:\n first have a data.fieldToMatch in both fields to have a reference in the password onChange method to what field I need to trigger the validation for, and to have another reference in the confirm password field to what field to match to, then whenever the password field changes select the field name to match from the scope.fields (I'm using lodash for this) and trigger it's validation, [example code](http://plnkr.co/edit/Y8Z07x?p=preview):\n\n```\nAuth.formFields = [\n  {\n    type: \"input\",\n    key:  \"password\",\n    model: Auth.user,\n    templateOptions: {\n      type:        \"password\",\n      label:       \"Password\",\n      placeholder: \"Password\",\n      onChange: function onChangeF(viewValue, modelValue, fieldScope) {\n        var fieldToMatch = lodash.find(fieldScope.fields, {key: fieldScope.options.data.fieldToMatch}).name;\n        fieldScope.form[fieldToMatch].$validate();\n      }\n    },\n    data: {\n      fieldToMatch: \"confirm_password\"\n    }\n  },\n  {\n    type:            \"input\",\n    model:           Auth.user,\n    key:             \"confirm_password\",\n    templateOptions: {\n      type:        \"password\",\n      label:       \"Confirm Password\",\n      placeholder: \"Confirm Password\"\n    },\n    validators: {\n      fieldMatch: {\n        expression: function fieldMatchExpression(viewValue, modelValue, fieldScope) {\n          return (modelValue || viewValue) === Auth.user[fieldScope.options.data.fieldToMatch];\n        }\n      }\n    },\n    data: {\n      fieldToMatch: \"password\"\n    }\n  }\n];\n```\n\nthis is just a simple example on how this could be approached maybe someone that have more knowledge of this plugin could enhance this solution.\n. @dfromero sorry, first video on Youtube, it's public now.\n. OK, I'v done some work on this, first I was going to take Google's approach on this and deleting the confirm password field whenever the password field changed, that was easy to implement but, it's annoying to have to retype the confirm password field from the start just because you added one character to the password field, so I did this:\n first have a data.fieldToMatch in both fields to have a reference in the password onChange method to what field I need to trigger the validation for, and to have another reference in the confirm password field to what field to match to, then whenever the password field changes select the field name to match from the scope.fields (I'm using lodash for this) and trigger it's validation, [example code](http://plnkr.co/edit/Y8Z07x?p=preview):\n\n```\nAuth.formFields = [\n  {\n    type: \"input\",\n    key:  \"password\",\n    model: Auth.user,\n    templateOptions: {\n      type:        \"password\",\n      label:       \"Password\",\n      placeholder: \"Password\",\n      onChange: function onChangeF(viewValue, modelValue, fieldScope) {\n        var fieldToMatch = lodash.find(fieldScope.fields, {key: fieldScope.options.data.fieldToMatch}).name;\n        fieldScope.form[fieldToMatch].$validate();\n      }\n    },\n    data: {\n      fieldToMatch: \"confirm_password\"\n    }\n  },\n  {\n    type:            \"input\",\n    model:           Auth.user,\n    key:             \"confirm_password\",\n    templateOptions: {\n      type:        \"password\",\n      label:       \"Confirm Password\",\n      placeholder: \"Confirm Password\"\n    },\n    validators: {\n      fieldMatch: {\n        expression: function fieldMatchExpression(viewValue, modelValue, fieldScope) {\n          return (modelValue || viewValue) === Auth.user[fieldScope.options.data.fieldToMatch];\n        }\n      }\n    },\n    data: {\n      fieldToMatch: \"password\"\n    }\n  }\n];\n```\n\nthis is just a simple example on how this could be approached maybe someone that have more knowledge of this plugin could enhance this solution.\n. ",
    "JiaJian": "Sorry! Accidentally hit some keys which submitted my issue without having typed anything.\n. Ah got it, I missed out on including api-check.js. Thanks!\n. Sorry! Accidentally hit some keys which submitted my issue without having typed anything.\n. Ah got it, I missed out on including api-check.js. Thanks!\n. ",
    "cmwilhelm": "I had a follow up to this issue actually, having run into it today. Should formly's dependencies on the api-check module be affected by javascript inclusion order in the document?\n\nI'm not using CommonJS or AMD for this application, and simply installed formly via bower. I received the same error as @JiaJian , and was only able to resolve it by doing a `script` tag for the api check file before the formly file. This was a bit surprising given Angular's ability to resolve dependencies?\n. I had a follow up to this issue actually, having run into it today. Should formly's dependencies on the api-check module be affected by javascript inclusion order in the document?\n\nI'm not using CommonJS or AMD for this application, and simply installed formly via bower. I received the same error as @JiaJian , and was only able to resolve it by doing a `script` tag for the api check file before the formly file. This was a bit surprising given Angular's ability to resolve dependencies?\n. ",
    "ecgtheow": "The 'avoid flicker' part isn't a show-stopper for me - I just think it's better if a field uncloaks after a potential short delay rather than displaying in a half-configured state then vanishing.\n\nNot sure if the workaround is usable for me: my real use-case is hideExpression querying the server to see if the current user has permission to view or edit a field, so the hidden state is external and not just dependent on other form fields.  I can certainly try to adapt that though if you don't like the rest of the suggested fix.\n. Using a sub-form might work for me, I'll give that a try.  Thanks.\n\nI do suggest though that the documentation be updated to state clearly that promises are not supported with hideExpression.\n. Actually, there won't be any flicker for anyone else :)\n\nWe know that no-one else is returning promises from hideExpression functions, for the simple reason that it doesn't work.  And $q.when () resolves immediately when given non-promise arguments.\n\nI'm still going to try the sub-form workaround, just thought I'd point that out.\n. The 'avoid flicker' part isn't a show-stopper for me - I just think it's better if a field uncloaks after a potential short delay rather than displaying in a half-configured state then vanishing.\n\nNot sure if the workaround is usable for me: my real use-case is hideExpression querying the server to see if the current user has permission to view or edit a field, so the hidden state is external and not just dependent on other form fields.  I can certainly try to adapt that though if you don't like the rest of the suggested fix.\n. Using a sub-form might work for me, I'll give that a try.  Thanks.\n\nI do suggest though that the documentation be updated to state clearly that promises are not supported with hideExpression.\n. Actually, there won't be any flicker for anyone else :)\n\nWe know that no-one else is returning promises from hideExpression functions, for the simple reason that it doesn't work.  And $q.when () resolves immediately when given non-promise arguments.\n\nI'm still going to try the sub-form workaround, just thought I'd point that out.\n. ",
    "mickomicko5573": "Thanks.\n. Thanks.\n. ",
    "computerex": "We need this callback because we need to initialize some state after the DOM is rendered. Currently we have to resort to using $timeout hack. Any plans to add this in the future? \n. We need this callback because we need to initialize some state after the DOM is rendered. Currently we have to resort to using $timeout hack. Any plans to add this in the future? \n. ",
    "shealan": "Thanks guys, not sure if that fixed it. I had to throw all my code out and start again from scratch - but from now on I'm going to run everything through ng-annotate to avoid issues like this in the future.\n. Thanks guys, not sure if that fixed it. I had to throw all my code out and start again from scratch - but from now on I'm going to run everything through ng-annotate to avoid issues like this in the future.\n. ",
    "brabeji": "Sure, no problem! I love formly and I am glad to contribute. I've force-pushed a fix. Was the commit message the only issue?\n. Sure, no problem! I love formly and I am glad to contribute. I've force-pushed a fix. Was the commit message the only issue?\n. ",
    "sasikumardr": "anothe example with ui-select. If we add any value in multi-select field, resetModel() does not clear model value (can verify this on model value json displayed below). Clicking reset again will only make model value null.\n\nhttp://jsbin.com/tesagi/2/edit?html,js,output\n\nAnother example with ng-tags-input. Here I have configured initial value. In this case, resetModel will not have any effect on field, how many times we click it.\n\nhttp://jsbin.com/naciqe/edit?html,css,js,output\n. anothe example with ui-select. If we add any value in multi-select field, resetModel() does not clear model value (can verify this on model value json displayed below). Clicking reset again will only make model value null.\n\nhttp://jsbin.com/tesagi/2/edit?html,js,output\n\nAnother example with ng-tags-input. Here I have configured initial value. In this case, resetModel will not have any effect on field, how many times we click it.\n\nhttp://jsbin.com/naciqe/edit?html,css,js,output\n. ",
    "epnikolop": "Not an issue please try that\n\n``` javascript\n    vm.model = {\n      even: {\n        with:{}\n      }\n    };\n```\n\nand\n\n``` javascript\n{\n        key: 'arrays',\n        type: 'multiCheckbox',\n        model: vm.model.even.with,\n        templateOptions: {\n          label: 'Array property',\n          options:[{value:'test',name:'test'},{value:'test1',name:'test1'}]\n       }\n}\n```\n. This should be reopened as i typed incorrectly above that is not an issue i'm new in formly and I wasn't aware of the nested functionality that other type of field types correctly support, my comment above it's just a by-pass of the issue. \n. Not an issue please try that\n\n``` javascript\n    vm.model = {\n      even: {\n        with:{}\n      }\n    };\n```\n\nand\n\n``` javascript\n{\n        key: 'arrays',\n        type: 'multiCheckbox',\n        model: vm.model.even.with,\n        templateOptions: {\n          label: 'Array property',\n          options:[{value:'test',name:'test'},{value:'test1',name:'test1'}]\n       }\n}\n```\n. This should be reopened as i typed incorrectly above that is not an issue i'm new in formly and I wasn't aware of the nested functionality that other type of field types correctly support, my comment above it's just a by-pass of the issue. \n. ",
    "juwul": "@kentcdodds I have the same problem with Angular Material v1.0.1\n\nMy problem is that only first time the modals first input is triggered. Next time it is not autofocused but the focus is kept on the main view behind the modal.\n\nThis is how I use autofocus in my modals; \n\n```\nvm.fields = [\n        {\n            \"elementAttributes\": {\n                layout: \"row\",\n                \"layout-sm\": \"column\"\n            },\n            \"fieldGroup\": [\n                {\n\n                    key: 'name',\n                    className: \"flex-100 layout-column\",\n                    type: 'input',\n                    templateOptions: {\n                        type: 'text',\n                        label: 'Kundenavn',\n                        required: true,\n                        focus: true\n                    }\n                },\n................................................................................\n```\n. @kentcdodds I have the same problem with Angular Material v1.0.1\n\nMy problem is that only first time the modals first input is triggered. Next time it is not autofocused but the focus is kept on the main view behind the modal.\n\nThis is how I use autofocus in my modals; \n\n```\nvm.fields = [\n        {\n            \"elementAttributes\": {\n                layout: \"row\",\n                \"layout-sm\": \"column\"\n            },\n            \"fieldGroup\": [\n                {\n\n                    key: 'name',\n                    className: \"flex-100 layout-column\",\n                    type: 'input',\n                    templateOptions: {\n                        type: 'text',\n                        label: 'Kundenavn',\n                        required: true,\n                        focus: true\n                    }\n                },\n................................................................................\n```\n. ",
    "aluanhaddad": "@kentcdodds Any chance this will be merged soon?\n. Awesome. Thanks.\n. @kentcdodds Any chance this will be merged soon?\n. Awesome. Thanks.\n. ",
    "abhisheksaraiya": "Here are the steps to reproduce the issue:\nhttp://jsbin.com/jonocawunu/edit?html,js,output\n\n1) In the beginging when the page is loaded in jsbin, please note the values $pristine and $dirty for FORM with name : \"vm.form\". \nThey would be \nValues for FORM:\n    \"$dirty\": false,\n    \"$pristine\": true,\nValues for input field:\n    \"$dirty\": false,\n    \"$pristine\": true,\n\n2) Now if you write anything in the input box in the form the values will change to \nValues for FORM:\n    \"$dirty\": true,\n    \"$pristine\": false,\nValues for input field:\n    \"$dirty\": true,\n    \"$pristine\": false,\n\n This is OK!\n\n3) Now when you click on reset button (thus calling resetModel()), the values change to:\nValues for FORM:\n     \"$dirty\": true,\n     \"$pristine\": false,\nValues for input field:\n    \"$dirty\": false,\n    \"$pristine\": true,\n\n The issue is that after resetModel is called, the values for the input field are reset as expected but for the form ($pristine,$dirty) are not reset!\n. Here are the steps to reproduce the issue:\nhttp://jsbin.com/jonocawunu/edit?html,js,output\n\n1) In the beginging when the page is loaded in jsbin, please note the values $pristine and $dirty for FORM with name : \"vm.form\". \nThey would be \nValues for FORM:\n    \"$dirty\": false,\n    \"$pristine\": true,\nValues for input field:\n    \"$dirty\": false,\n    \"$pristine\": true,\n\n2) Now if you write anything in the input box in the form the values will change to \nValues for FORM:\n    \"$dirty\": true,\n    \"$pristine\": false,\nValues for input field:\n    \"$dirty\": true,\n    \"$pristine\": false,\n\n This is OK!\n\n3) Now when you click on reset button (thus calling resetModel()), the values change to:\nValues for FORM:\n     \"$dirty\": true,\n     \"$pristine\": false,\nValues for input field:\n    \"$dirty\": false,\n    \"$pristine\": true,\n\n The issue is that after resetModel is called, the values for the input field are reset as expected but for the form ($pristine,$dirty) are not reset!\n. ",
    "tgrecojs": "@kentcdodds is this issue still open? I checked it out the other day but i'm just seeing that I misread the comments :hear_no_evil: \n. @kentcdodds is this issue still open? I checked it out the other day but i'm just seeing that I misread the comments :hear_no_evil: \n. ",
    "janneman001": "I still see this in formly 7.2.3.  after resetModel  vm.form.$pristine equals false and vm.form.$dirty equals true. They should represent a propagated calculation from the fields $pristine and $dirty.\n. I retested with latest 7.3.9. Same behaviour.\nI have no experience with js bin. But i will try. I experienced the issue in a form with mysql backend code. I will try to make a smaller reproduction example if time permits.\n. My bad. I was fighting with an incorrect datepicker type field.  I re-verified with 7.3.9 it is alright in 7.3.9. \n. I still see this in formly 7.2.3.  after resetModel  vm.form.$pristine equals false and vm.form.$dirty equals true. They should represent a propagated calculation from the fields $pristine and $dirty.\n. I retested with latest 7.3.9. Same behaviour.\nI have no experience with js bin. But i will try. I experienced the issue in a form with mysql backend code. I will try to make a smaller reproduction example if time permits.\n. My bad. I was fighting with an incorrect datepicker type field.  I re-verified with 7.3.9 it is alright in 7.3.9. \n. ",
    "gizburdt": "Thanks for the reply, will have a look at the instructions. I tries your example. vm.model is `undefined`\n. Here is a stripped version (only relevant code) of my application: https://jsbin.com/rucifufotu/edit?html,js,output\n\nThanks :)\n. Here is my the working example: https://jsbin.com/kanuhu/21/edit?console,output\n\nSo the thing I would like to achieve is when the center of the map changes, the input gets filled with the latitude/longitude.\n\nThanks :)\n. Hi, thnx for the help! I'm new to angular (& formly), so I try to learn as much as possible. Also new to Gitter, how can we start a chat?\n. Got it working in my own app. And I understand what you did, so Gitter isn't necessary anymore :). I understand the $scope.$apply(), and I made a typo in my model=\"\", I had `spot`, had to be `vm.spot`, or `vm.model` (add vm). Thanks again! :)\n. Thanks for the reply, will have a look at the instructions. I tries your example. vm.model is `undefined`\n. Here is a stripped version (only relevant code) of my application: https://jsbin.com/rucifufotu/edit?html,js,output\n\nThanks :)\n. Here is my the working example: https://jsbin.com/kanuhu/21/edit?console,output\n\nSo the thing I would like to achieve is when the center of the map changes, the input gets filled with the latitude/longitude.\n\nThanks :)\n. Hi, thnx for the help! I'm new to angular (& formly), so I try to learn as much as possible. Also new to Gitter, how can we start a chat?\n. Got it working in my own app. And I understand what you did, so Gitter isn't necessary anymore :). I understand the $scope.$apply(), and I made a typo in my model=\"\", I had `spot`, had to be `vm.spot`, or `vm.model` (add vm). Thanks again! :)\n. ",
    "funktioneer": "With the given selector \"#cs.form_qrinput_facebook_url_2\" jQuery is looking for this:\n`<div id=\"cs\" class=\".form_qrinput_facebook_url_2\">`\n\nIt's possible to get a workarround using $(\"[name='cs.form_qrinput_facebook_url_2'\"); but I think it is an improvement to fix this issue by replacing the \".\" with \"_\"\n\nBest,Nils\n. Got fixed it, the issue was to name the form like in the examples with name=\"cs.form\" this is added during the dynamic id creation. \n\nBest,Nils \n. With the given selector \"#cs.form_qrinput_facebook_url_2\" jQuery is looking for this:\n`<div id=\"cs\" class=\".form_qrinput_facebook_url_2\">`\n\nIt's possible to get a workarround using $(\"[name='cs.form_qrinput_facebook_url_2'\"); but I think it is an improvement to fix this issue by replacing the \".\" with \"_\"\n\nBest,Nils\n. Got fixed it, the issue was to name the form like in the examples with name=\"cs.form\" this is added during the dynamic id creation. \n\nBest,Nils \n. ",
    "Bedo81": "It works differently on other controls. It doesn't remove the attribute.\n\nhttp://jsbin.com/qatiwafaxo/1/edit?js,output\n. It works differently on other controls. It doesn't remove the attribute.\n\nhttp://jsbin.com/qatiwafaxo/1/edit?js,output\n. ",
    "admwx7": "Turns out it's actually the maxlength field that's causing this issue, not type: 'number'\n\nhttp://jsbin.com/cukerebuni/edit?html,js,output\n. Turns out it's actually the maxlength field that's causing this issue, not type: 'number'\n\nhttp://jsbin.com/cukerebuni/edit?html,js,output\n. ",
    "nextglory": "I found that when enter key is fired, the form $valid state is true, this is whird.\n. benoror, awesome, I checked your code and amazingly cool.....\n. I found that when enter key is fired, the form $valid state is true, this is whird.\n. benoror, awesome, I checked your code and amazingly cool.....\n. ",
    "dmitriz": "Is bower a dead technology?\n. Thanks, I see it is recommended to use `npm` instead. \n\nThe only advantage of `bower` I would have been that you don't need to use `browserify` (or another module packager)  to access your modules, but maybe you actually should use it. ;)\n\nI'm somewhat worried though the location where `npm` modules install is unpredictable, which becomes a problem when I want to copy files up to the user directory. Right now I'm copying naively to `../../`, which is [sadly the only way I could find for now](http://stackoverflow.com/questions/34781630/how-to-automatically-copy-files-from-package-to-local-directory-via-postinstall).\n. It is possible that I misunderstand how `npm` works, but I don't see any easy way to guarantee that the package lands in your project root directory, from where you run\n\n``` sh\n$ npm i angular-formly --save\n```\n\nWhen you say \"as long as they're listed in your package.json dependencies\", do you mean -- before the installation? Usually they are not.\n\nI have a Sandbox directory with many modules that I frequently need, in the hope not to download them again. Unfortunately, it is resulting in all sort of weird and unexpected behaviour. One of which is -- I can never successfully run a yeoman generator in any of the subdirectories, which always result in errors and leaving empty directory even after 10 minutes of intensive downloads :(  The same generator would run quickly and successfully in another remote directory.\n\nI might be missing something but that behaviour makes me somewhat uneasy. `bower` has indeed this annoying version conflict menus, but other than that it is more predictable.\n. Hm... I wonder what could be my mistake...\n\nI find the behaviour unpredictable if you don't have `package.json` files.\n\nFor instance, if you have `node_modules` inside your `root`,\nand empty subdirectory `root/subdir`,\nthen running `npm install package` inside `root/subdir`\nleads to the `package` appearing in `root/node_modules`.\n\nThe same happens if `root` has `package.json` but `root/subdir` is empty.\n\nHowever, if `root` has neither `node_modules` nor `package.json`, then the new `package` will appear in `root/subdir/node_modules`.\n\nSo when you are inside `root/subdir`, the behaviour depends the contents of `root`, which can be a problem, if you forget to do `npm init` and run the installation. Then the package will end up higher in the tree and your link will be broken. \n\nHowever, you can still resolve it with `browserify` as far as I understand, so I guess this is a better way to stay out of troubles.\n. ``` sh\n\u25cb \u2192 node -v\nv4.2.3\n\u25cb \u2192 npm -v\n3.5.2\n```\n. Have found the problem - there was\n\n```\n\"name\": \"angular-formly\"\n```\n\n inside my `package.json`, this answer helped me:\nhttp://stackoverflow.com/questions/27267707/npm-warn-install-refusing-to-install-hapi-as-a-dependency-of-itself\n\nAs usual, the `npm` error clarity has room for improvement :)\n. Sorry about the confusion!\n. Is bower a dead technology?\n. Thanks, I see it is recommended to use `npm` instead. \n\nThe only advantage of `bower` I would have been that you don't need to use `browserify` (or another module packager)  to access your modules, but maybe you actually should use it. ;)\n\nI'm somewhat worried though the location where `npm` modules install is unpredictable, which becomes a problem when I want to copy files up to the user directory. Right now I'm copying naively to `../../`, which is [sadly the only way I could find for now](http://stackoverflow.com/questions/34781630/how-to-automatically-copy-files-from-package-to-local-directory-via-postinstall).\n. It is possible that I misunderstand how `npm` works, but I don't see any easy way to guarantee that the package lands in your project root directory, from where you run\n\n``` sh\n$ npm i angular-formly --save\n```\n\nWhen you say \"as long as they're listed in your package.json dependencies\", do you mean -- before the installation? Usually they are not.\n\nI have a Sandbox directory with many modules that I frequently need, in the hope not to download them again. Unfortunately, it is resulting in all sort of weird and unexpected behaviour. One of which is -- I can never successfully run a yeoman generator in any of the subdirectories, which always result in errors and leaving empty directory even after 10 minutes of intensive downloads :(  The same generator would run quickly and successfully in another remote directory.\n\nI might be missing something but that behaviour makes me somewhat uneasy. `bower` has indeed this annoying version conflict menus, but other than that it is more predictable.\n. Hm... I wonder what could be my mistake...\n\nI find the behaviour unpredictable if you don't have `package.json` files.\n\nFor instance, if you have `node_modules` inside your `root`,\nand empty subdirectory `root/subdir`,\nthen running `npm install package` inside `root/subdir`\nleads to the `package` appearing in `root/node_modules`.\n\nThe same happens if `root` has `package.json` but `root/subdir` is empty.\n\nHowever, if `root` has neither `node_modules` nor `package.json`, then the new `package` will appear in `root/subdir/node_modules`.\n\nSo when you are inside `root/subdir`, the behaviour depends the contents of `root`, which can be a problem, if you forget to do `npm init` and run the installation. Then the package will end up higher in the tree and your link will be broken. \n\nHowever, you can still resolve it with `browserify` as far as I understand, so I guess this is a better way to stay out of troubles.\n. ``` sh\n\u25cb \u2192 node -v\nv4.2.3\n\u25cb \u2192 npm -v\n3.5.2\n```\n. Have found the problem - there was\n\n```\n\"name\": \"angular-formly\"\n```\n\n inside my `package.json`, this answer helped me:\nhttp://stackoverflow.com/questions/27267707/npm-warn-install-refusing-to-install-hapi-as-a-dependency-of-itself\n\nAs usual, the `npm` error clarity has room for improvement :)\n. Sorry about the confusion!\n. ",
    "kamilkisiela": "We cannot use some sort of command like \"npm publish\" on meteor so webhook is to trigger the publish process provided by autopublish.meteor.com.\n\nThis is the only automatic way.\n\n@kentcdodds Is it a problem?\n. @kwypchlo Great job!\n\n@kentcdodds :+1:\n. @jacobharasimo It seems like it is a [formlyBootstrap](https://github.com/formly-js/angular-formly-templates-bootstrap) issue.\n\n`$touched` property of `radio` is incorrect (`false`) and radio stays untouched so  `options.validation.errorExistsAndShouldBeVisible` is false ([see docs](http://docs.angular-formly.com/docs/field-configuration-object#section-validation-errorexistsandshouldbevisible)).\n\nThe rule of that longCamelCasedProperty by default is: `field invalid && (field touched || validation.show)`.\n\nAs you can see it is `true && (false || false)` so it equals `false`.\n\nIt happens because of duplication of names. According to https://github.com/angular/angular.js/issues/3345#issuecomment-21816304 this is a bad idea.\n\n---\n\nSo you should **post an issue** on formlyBootstrap.\n. As I wrote in formly-js/angular-formly-website#93\n\nangular-ui-bootstrap v1.0.0 has a breaking change.\n. @kentcdodds I fixed that in few others examples.\n\nhttps://github.com/formly-js/angular-formly-website/compare/ebd26ff...c1c2577\n\nSo if any other example uses angular-ui-bootstrap it should be fixed immediately\n. @benoror Are you going to resolve conflicts or should I look it up?\n. @benoror Saw that too. Ok :)\n. Ok, done. \n\nI also fixed one error caused by one of dependencies in karma cfaa247\n. @benoror I just merged your branch and then fix conflicts.\n\n`watcherChecker` is great but it will work only with [`fieldGroup`'s apiChecking](https://github.com/formly-js/angular-formly/blob/c7d8343348a18407b966d9b696bee87150926514/src/providers/formlyApiCheck.js#L187).\n\n[`fieldOptionsApiShape`](https://github.com/formly-js/angular-formly/blob/c7d8343348a18407b966d9b696bee87150926514/src/providers/formlyApiCheck.js#L116) has one more option `runFieldExpressions`. \n\nI think that ApiCheck has no \"extending\" function so this `watcherChecker` would be used only in one place.\n\nCorrect me if I'm wrong.\n\nAbout mess in git history :) I'm going to work on it tomorrow.\n. @kentcdodds What do you think?\n. @benoror Done :)\n. http://www.downforeveryoneorjustme.com/http://docs.angular-formly.com/\n\nOh, I see I'm not the only one speedy gonzales here :)\n. I'm ofline for few days. Is it working now? Do you need any help?\n\nAbout commit, I don't have that commit in my local branch.\n. We cannot use some sort of command like \"npm publish\" on meteor so webhook is to trigger the publish process provided by autopublish.meteor.com.\n\nThis is the only automatic way.\n\n@kentcdodds Is it a problem?\n. @kwypchlo Great job!\n\n@kentcdodds :+1:\n. @jacobharasimo It seems like it is a [formlyBootstrap](https://github.com/formly-js/angular-formly-templates-bootstrap) issue.\n\n`$touched` property of `radio` is incorrect (`false`) and radio stays untouched so  `options.validation.errorExistsAndShouldBeVisible` is false ([see docs](http://docs.angular-formly.com/docs/field-configuration-object#section-validation-errorexistsandshouldbevisible)).\n\nThe rule of that longCamelCasedProperty by default is: `field invalid && (field touched || validation.show)`.\n\nAs you can see it is `true && (false || false)` so it equals `false`.\n\nIt happens because of duplication of names. According to https://github.com/angular/angular.js/issues/3345#issuecomment-21816304 this is a bad idea.\n\n---\n\nSo you should **post an issue** on formlyBootstrap.\n. As I wrote in formly-js/angular-formly-website#93\n\nangular-ui-bootstrap v1.0.0 has a breaking change.\n. @kentcdodds I fixed that in few others examples.\n\nhttps://github.com/formly-js/angular-formly-website/compare/ebd26ff...c1c2577\n\nSo if any other example uses angular-ui-bootstrap it should be fixed immediately\n. @benoror Are you going to resolve conflicts or should I look it up?\n. @benoror Saw that too. Ok :)\n. Ok, done. \n\nI also fixed one error caused by one of dependencies in karma cfaa247\n. @benoror I just merged your branch and then fix conflicts.\n\n`watcherChecker` is great but it will work only with [`fieldGroup`'s apiChecking](https://github.com/formly-js/angular-formly/blob/c7d8343348a18407b966d9b696bee87150926514/src/providers/formlyApiCheck.js#L187).\n\n[`fieldOptionsApiShape`](https://github.com/formly-js/angular-formly/blob/c7d8343348a18407b966d9b696bee87150926514/src/providers/formlyApiCheck.js#L116) has one more option `runFieldExpressions`. \n\nI think that ApiCheck has no \"extending\" function so this `watcherChecker` would be used only in one place.\n\nCorrect me if I'm wrong.\n\nAbout mess in git history :) I'm going to work on it tomorrow.\n. @kentcdodds What do you think?\n. @benoror Done :)\n. http://www.downforeveryoneorjustme.com/http://docs.angular-formly.com/\n\nOh, I see I'm not the only one speedy gonzales here :)\n. I'm ofline for few days. Is it working now? Do you need any help?\n\nAbout commit, I don't have that commit in my local branch.\n. ",
    "bialad": "Nice, happy to contribute. :)\n\nI however have some thought about what's best here... Since I think the step-attribute is included in the html 5 validation, the best must be to add this to the correct property. And this is where my knowledge falters.\n\nI tried adding it to the bothAttributeAndBound-property, but can't see any difference.\n. Hi\n\nI haven't done this before, and don't have time to get into it at the\nmoment. (I'm on a skiing holiday) You're welcome to make the change if you\nwant to.\n\nTobias\n\n2016-01-15 4:34 GMT+01:00 Koray Balc\u0131 notifications@github.com:\n\n> @bialad https://github.com/bialad are you planning to create a pull\n> request for it? I am looking fwd to the step option just as you suggested.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/592#issuecomment-171864079\n> .\n. Nice, happy to contribute. :)\n\nI however have some thought about what's best here... Since I think the step-attribute is included in the html 5 validation, the best must be to add this to the correct property. And this is where my knowledge falters.\n\nI tried adding it to the bothAttributeAndBound-property, but can't see any difference.\n. Hi\n\nI haven't done this before, and don't have time to get into it at the\nmoment. (I'm on a skiing holiday) You're welcome to make the change if you\nwant to.\n\nTobias\n\n2016-01-15 4:34 GMT+01:00 Koray Balc\u0131 notifications@github.com:\n\n> @bialad https://github.com/bialad are you planning to create a pull\n> request for it? I am looking fwd to the step option just as you suggested.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/formly-js/angular-formly/issues/592#issuecomment-171864079\n> .\n. ",
    "LeonSkrilec": "Actually i got this error when placing ng-options on a non select DOM element. Might be helpful to someone debugging.\n. Actually i got this error when placing ng-options on a non select DOM element. Might be helpful to someone debugging.\n. ",
    "hustshawn": "Can someone tell how to fix it in using angular-formly?\n. @Luddinus Works well. 'Formly' officially correct this here?\n http://angular-formly.com/#/example/integrations/ui-select-angular-1-4\n. Can someone tell how to fix it in using angular-formly?\n. @Luddinus Works well. 'Formly' officially correct this here?\n http://angular-formly.com/#/example/integrations/ui-select-angular-1-4\n. ",
    "vamsikrishnamannem": "I am also getting the same error.. I am also getting the same error.. ",
    "ViCe2099": "When you are setting the field type you should not extend 'select', if you do so you will have this error.. When you are setting the field type you should not extend 'select', if you do so you will have this error.. ",
    "skosno": ":+1: This is a major problem for me, deep watchers are too greedy and we have BIG models in API that we consume. From my perspective small watchers on needed fields are much better than one big deep watch. \nIn fact even if you do not need expressions, you still get deep watcher running with every digest.\n. :+1: This is a major problem for me, deep watchers are too greedy and we have BIG models in API that we consume. From my perspective small watchers on needed fields are much better than one big deep watch. \nIn fact even if you do not need expressions, you still get deep watcher running with every digest.\n. ",
    "slavafomin": "Hello! Are there any news on this issue? = )\n. Ok, thanks )\nToo bad I can't help = /\n. I'm afraid I'm still struggling to just use Formly, more so to develop it )\nMaybe a couple of implemented projects will change this )\n. Hey!\n\nI'm using something like this:\n\n``` javascript\n$scope.formState = {\n  formInvalid: null\n};\n// @todo: remove this ugly hack! (https://github.com/formly-js/angular-formly/issues/602)\n$scope.$watch('forms.form.$invalid', function (value) {\n  $scope.formState.formInvalid = value;\n});\n```\n\nAnd then add `formState.formInvalid` to your `hideExpression`.\n. Update.\n\nI've added `model: 'form'` property to the specific field and it helped.\n\nIt looks like expressions properties are updated when model changes and in my case I don't have a model, cause it's just a button. So when I passed `form` controller instead of the `model` it began to see the changes.\n\nI've tried to put this property on the form type level, e.g. inside of `defaultOptions` object, but it's not working that way.\n\nIs there a way to fix this on a global level, i.e. in entire library or at least in form type? Maybe we should implement a property for the form type configuration, e.g. `watchFormChanges: true` or something?\n\nThanks!\n. Hello @kwypchlo , thank you for the suggestion. I will try it in the future, if I will stumble upon this issue again.\n. Hello! Are there any news on this issue? = )\n. Ok, thanks )\nToo bad I can't help = /\n. I'm afraid I'm still struggling to just use Formly, more so to develop it )\nMaybe a couple of implemented projects will change this )\n. Hey!\n\nI'm using something like this:\n\n``` javascript\n$scope.formState = {\n  formInvalid: null\n};\n// @todo: remove this ugly hack! (https://github.com/formly-js/angular-formly/issues/602)\n$scope.$watch('forms.form.$invalid', function (value) {\n  $scope.formState.formInvalid = value;\n});\n```\n\nAnd then add `formState.formInvalid` to your `hideExpression`.\n. Update.\n\nI've added `model: 'form'` property to the specific field and it helped.\n\nIt looks like expressions properties are updated when model changes and in my case I don't have a model, cause it's just a button. So when I passed `form` controller instead of the `model` it began to see the changes.\n\nI've tried to put this property on the form type level, e.g. inside of `defaultOptions` object, but it's not working that way.\n\nIs there a way to fix this on a global level, i.e. in entire library or at least in form type? Maybe we should implement a property for the form type configuration, e.g. `watchFormChanges: true` or something?\n\nThanks!\n. Hello @kwypchlo , thank you for the suggestion. I will try it in the future, if I will stumble upon this issue again.\n. ",
    "pos1tron": "Any suggestions on a temporary work around? \n. In my case, I was loading my fields via an ajax call, so on the initial compile of the angular-formly directive, my model was set to an empty object, and the fields were an empty array. After retrieving my fields, angular-formly would draw them out, but not run hideExpressions. I found that if I leave my model as undefined until after the fields have been defined, that the hideExpressions will run. \n. So if your html looks like this:\n\n```\n<formly-form model=\"vm.user\" fields=\"vm.userFields\">\n  <button type=\"submit\" class=\"btn btn-default\" ng-click=\"vm.submit(vm.user)\">Submit</button>\n</formly-form>\n```\n\nOn the initial compile of your view, `$scope.user` needs to be undefined (meaning you haven't defined `$scope.user`, or you have assigned it a value of `undefined`. Then in some async call where you are getting your field definitions:\n\n```\n$http.get('/my/fields/endpoint')\n  .then(function(response) {\n    $scope.userFields = response.data;\n    // Now you can give vm.user a value\n    $scope.user = {};\n  });\n```\n\nMy code had a bit more complexity to it, but i'm pretty sure this is what worked for me. The only difference could be that you need to wrap `$scope.user = {}` with a `$timeout`.\n. Any suggestions on a temporary work around? \n. In my case, I was loading my fields via an ajax call, so on the initial compile of the angular-formly directive, my model was set to an empty object, and the fields were an empty array. After retrieving my fields, angular-formly would draw them out, but not run hideExpressions. I found that if I leave my model as undefined until after the fields have been defined, that the hideExpressions will run. \n. So if your html looks like this:\n\n```\n<formly-form model=\"vm.user\" fields=\"vm.userFields\">\n  <button type=\"submit\" class=\"btn btn-default\" ng-click=\"vm.submit(vm.user)\">Submit</button>\n</formly-form>\n```\n\nOn the initial compile of your view, `$scope.user` needs to be undefined (meaning you haven't defined `$scope.user`, or you have assigned it a value of `undefined`. Then in some async call where you are getting your field definitions:\n\n```\n$http.get('/my/fields/endpoint')\n  .then(function(response) {\n    $scope.userFields = response.data;\n    // Now you can give vm.user a value\n    $scope.user = {};\n  });\n```\n\nMy code had a bit more complexity to it, but i'm pretty sure this is what worked for me. The only difference could be that you need to wrap `$scope.user = {}` with a `$timeout`.\n. ",
    "misterwise": "@pos1tron I'm experiencing a similar issue, how exactly do you leave the model as undefined until after the fields are defined?  I have looked through the source code to try to fix this bug myself, but am also new to Formly so I was unable to find a way to change Formly so that hideExpressions gets run as expected.\n. As I'm loading my data through an asynchronous call, and displaying fields based on that information, what worked for me was wrapping the form in an ng-if watching the field that gets populated on return from the server, ensuring all of my model data is populated before the form gets generated.\n. @pos1tron I'm experiencing a similar issue, how exactly do you leave the model as undefined until after the fields are defined?  I have looked through the source code to try to fix this bug myself, but am also new to Formly so I was unable to find a way to change Formly so that hideExpressions gets run as expected.\n. As I'm loading my data through an asynchronous call, and displaying fields based on that information, what worked for me was wrapping the form in an ng-if watching the field that gets populated on return from the server, ensuring all of my model data is populated before the form gets generated.\n. ",
    "quintenvk": "Issue can be closed. The error was as follows:\n\nI had a JSON file that had an array of objects in it (to configure my inputs). That json file was imported by webpack as follows: \n`import * as fields from './form-fields.json';`\nI then assigned the fields as `$scope.fields = fields;`\n\nThis assigned a `fields` object, so the fix was \n`$scope.fields = fields.default;` \nin order to access the array as intended.\n. Issue can be closed. The error was as follows:\n\nI had a JSON file that had an array of objects in it (to configure my inputs). That json file was imported by webpack as follows: \n`import * as fields from './form-fields.json';`\nI then assigned the fields as `$scope.fields = fields;`\n\nThis assigned a `fields` object, so the fix was \n`$scope.fields = fields.default;` \nin order to access the array as intended.\n. ",
    "sandip-wane": "Thanks for the fix and sorry for posting issue in wrong place :disappointed:  \n. Thanks for the fix and sorry for posting issue in wrong place :disappointed:  \n. ",
    "rameshpalipi": "so,can I use the schema generated by these tools in \"angular-formly\"?\n. Kent,\n\nI have following questions:\n1. Is there any working example of angular-formly getting and setting data from database ?\n1. In Fields definition, for a control like drop-down if we need to have the data be populated \n   from database?\n   how to accomplish this?\n   {\n   \"key\": \"default-select-6347\",\n   \"templateOptions\": {\n     \"label\": \"Select\",\n     \"placeholder\": \"placeholder\",\n     \"options\": [\n       {\n         \"name\": \"value one\",\n         \"value\": \"value one\"\n       },\n       {\n         \"name\": \"value two\",\n         \"value\": \"value two\"\n       }\n     ]\n   },\n\nHow to make the options values as database driven as we don't want to hard coded\nas part of fields definition? \n1. What are the advantages and dis-advantages of using anular-formly ?\n   Are there any limitations in terms of complexity , flexibility and learning?\n2. Are there enterprise applications being built on top of this anular-formly ?\n\nThanks\nRam\n. so,can I use the schema generated by these tools in \"angular-formly\"?\n. Kent,\n\nI have following questions:\n1. Is there any working example of angular-formly getting and setting data from database ?\n1. In Fields definition, for a control like drop-down if we need to have the data be populated \n   from database?\n   how to accomplish this?\n   {\n   \"key\": \"default-select-6347\",\n   \"templateOptions\": {\n     \"label\": \"Select\",\n     \"placeholder\": \"placeholder\",\n     \"options\": [\n       {\n         \"name\": \"value one\",\n         \"value\": \"value one\"\n       },\n       {\n         \"name\": \"value two\",\n         \"value\": \"value two\"\n       }\n     ]\n   },\n\nHow to make the options values as database driven as we don't want to hard coded\nas part of fields definition? \n1. What are the advantages and dis-advantages of using anular-formly ?\n   Are there any limitations in terms of complexity , flexibility and learning?\n2. Are there enterprise applications being built on top of this anular-formly ?\n\nThanks\nRam\n. ",
    "cynicaldevil": "I would like to create a PR for this bug. I am new to this project and have browsed through the formly docs a bit, and I have a basic understanding about this project now.\n. Ok, I dug into the docs and found that adding `formOptions: $scope.options` probably won't work because `hideExpression` is evaluated against the `form` scope instead of the `field` scope. I will have to try to find if the `field` scope has been initialized or not and then obtain it's scope via its index.( Or at least, this is how I think it should be :P ).\n      As for the `originalModel` property, I am assuming that it will contain the field's model.\n. Ok, got it. Will submit a PR soon.\n. Sure, why not? Some tips on how to go about it would be useful :)\n. Awesome! I will get cracking on the tests right away :+1: \n. What is the field's `data` property actually used for? The documentation is a bit vague about it...\n. Thanks. Just a couple more questions: \n1. We can also pass a function to `hideExpression` to evaluate it, but there are no tests for it. Should I add another test for it?\n2. Should I commit these tests to a separate commit or should I squash it with the previous commit into a single one?\n. I have updated the PR with the changes you requested.\n. I would like to create a PR for this bug. I am new to this project and have browsed through the formly docs a bit, and I have a basic understanding about this project now.\n. Ok, I dug into the docs and found that adding `formOptions: $scope.options` probably won't work because `hideExpression` is evaluated against the `form` scope instead of the `field` scope. I will have to try to find if the `field` scope has been initialized or not and then obtain it's scope via its index.( Or at least, this is how I think it should be :P ).\n      As for the `originalModel` property, I am assuming that it will contain the field's model.\n. Ok, got it. Will submit a PR soon.\n. Sure, why not? Some tips on how to go about it would be useful :)\n. Awesome! I will get cracking on the tests right away :+1: \n. What is the field's `data` property actually used for? The documentation is a bit vague about it...\n. Thanks. Just a couple more questions: \n1. We can also pass a function to `hideExpression` to evaluate it, but there are no tests for it. Should I add another test for it?\n2. Should I commit these tests to a separate commit or should I squash it with the previous commit into a single one?\n. I have updated the PR with the changes you requested.\n. ",
    "timelf123": "Back up, thanks you speedy people\n. Back up, thanks you speedy people\n. ",
    "nvdnkpr": "not yet @abodacs\n. not yet @abodacs\n. ",
    "gatspy": "api-check.js after loading is complete, use `apiCheck.globalConfig.disabled=true`.\r\nformly version:8.4.0. api-check.js after loading is complete, use `apiCheck.globalConfig.disabled=true`.\r\nformly version:8.4.0. ",
    "mikefisher84": "I can confirm I'm having this exact same issue with this version of formly when running my tests via karma I get this error hundreds of times. Similar to this stack overflow issue: \r\nhttp://stackoverflow.com/questions/42844904/get-rid-of-formly-warnings-in-karma-output\r\n. I can confirm I'm having this exact same issue with this version of formly when running my tests via karma I get this error hundreds of times. Similar to this stack overflow issue: \r\nhttp://stackoverflow.com/questions/42844904/get-rid-of-formly-warnings-in-karma-output\r\n. ",
    "chilversc": "You sure? You have to toggle busy on and off again. You'll note how in the after, although the form is visible the form does not contain any of the form fields and is listed as being valid despite the required field being blank.\n\n# Before\n\n\"Invalid\"\n\n``` json\n{\n  \"$error\": {\n    \"required\": [\n      {\n        \"$validators\": {},\n        \"$asyncValidators\": {},\n        \"$parsers\": [],\n        \"$formatters\": [\n          null\n        ],\n        \"$viewChangeListeners\": [],\n        \"$untouched\": true,\n        \"$touched\": false,\n        \"$pristine\": true,\n        \"$dirty\": false,\n        \"$valid\": false,\n        \"$invalid\": true,\n        \"$error\": {\n          \"required\": true\n        },\n        \"$name\": \"formly_1_input_name_0\",\n        \"$options\": null\n      }\n    ]\n  },\n  \"$name\": \"formly_1\",\n  \"$dirty\": false,\n  \"$pristine\": true,\n  \"$valid\": false,\n  \"$invalid\": true,\n  \"$submitted\": false,\n  \"formly_1_input_name_0\": {\n    \"$validators\": {},\n    \"$asyncValidators\": {},\n    \"$parsers\": [],\n    \"$formatters\": [\n      null\n    ],\n    \"$viewChangeListeners\": [],\n    \"$untouched\": true,\n    \"$touched\": false,\n    \"$pristine\": true,\n    \"$dirty\": false,\n    \"$valid\": false,\n    \"$invalid\": true,\n    \"$error\": {\n      \"required\": true\n    },\n    \"$name\": \"formly_1_input_name_0\",\n    \"$options\": null\n  }\n}\n```\n\n# After\n\n\"Valid\"\n\n``` json\n{\n  \"$error\": {},\n  \"$name\": \"formly_1\",\n  \"$dirty\": false,\n  \"$pristine\": true,\n  \"$valid\": true,\n  \"$invalid\": false,\n  \"$submitted\": false\n}\n```\n. This does not occur if you use:\n\n``` html\n<form name=\"vm.form\">\n    <formly-form model=\"vm.model\" fields=\"vm.fields\"></formly-form>\n</form>\n```\n\nSo perhaps this should be a documented limitation if the goal is to move away from using `<formly-form>` without an outer `<form>` element.\n\nNote that the problem still exists if you use `<formly-form form=\"vm.form\" root-el=\"form\">`.\n. Although, it could still be a problem even when using `<form>` if you want to reference different sections of a formly form. http://embed.plnkr.co/tmoPJtWvVOZ3eK0XbzHu/\n. I can make this work with the current form by assigning both the `form` and the `formly-form` to the same property:\n\n``` html\n<form name=\"vm.form\">\n    <formly-form form=\"vm.form\" model=\"vm.model\" fields=\"vm.fields\"></formly-form>\n</form>\n```\n\nAlthough it works, something about it just feels wrong. Though it does now update the form variable correctly and works with the standard method of setting `$submitted` to show field errors.\n\nhttp://embed.plnkr.co/ycI1HbkLRR1o8i3CNzmW/\n. You sure? You have to toggle busy on and off again. You'll note how in the after, although the form is visible the form does not contain any of the form fields and is listed as being valid despite the required field being blank.\n\n# Before\n\n\"Invalid\"\n\n``` json\n{\n  \"$error\": {\n    \"required\": [\n      {\n        \"$validators\": {},\n        \"$asyncValidators\": {},\n        \"$parsers\": [],\n        \"$formatters\": [\n          null\n        ],\n        \"$viewChangeListeners\": [],\n        \"$untouched\": true,\n        \"$touched\": false,\n        \"$pristine\": true,\n        \"$dirty\": false,\n        \"$valid\": false,\n        \"$invalid\": true,\n        \"$error\": {\n          \"required\": true\n        },\n        \"$name\": \"formly_1_input_name_0\",\n        \"$options\": null\n      }\n    ]\n  },\n  \"$name\": \"formly_1\",\n  \"$dirty\": false,\n  \"$pristine\": true,\n  \"$valid\": false,\n  \"$invalid\": true,\n  \"$submitted\": false,\n  \"formly_1_input_name_0\": {\n    \"$validators\": {},\n    \"$asyncValidators\": {},\n    \"$parsers\": [],\n    \"$formatters\": [\n      null\n    ],\n    \"$viewChangeListeners\": [],\n    \"$untouched\": true,\n    \"$touched\": false,\n    \"$pristine\": true,\n    \"$dirty\": false,\n    \"$valid\": false,\n    \"$invalid\": true,\n    \"$error\": {\n      \"required\": true\n    },\n    \"$name\": \"formly_1_input_name_0\",\n    \"$options\": null\n  }\n}\n```\n\n# After\n\n\"Valid\"\n\n``` json\n{\n  \"$error\": {},\n  \"$name\": \"formly_1\",\n  \"$dirty\": false,\n  \"$pristine\": true,\n  \"$valid\": true,\n  \"$invalid\": false,\n  \"$submitted\": false\n}\n```\n. This does not occur if you use:\n\n``` html\n<form name=\"vm.form\">\n    <formly-form model=\"vm.model\" fields=\"vm.fields\"></formly-form>\n</form>\n```\n\nSo perhaps this should be a documented limitation if the goal is to move away from using `<formly-form>` without an outer `<form>` element.\n\nNote that the problem still exists if you use `<formly-form form=\"vm.form\" root-el=\"form\">`.\n. Although, it could still be a problem even when using `<form>` if you want to reference different sections of a formly form. http://embed.plnkr.co/tmoPJtWvVOZ3eK0XbzHu/\n. I can make this work with the current form by assigning both the `form` and the `formly-form` to the same property:\n\n``` html\n<form name=\"vm.form\">\n    <formly-form form=\"vm.form\" model=\"vm.model\" fields=\"vm.fields\"></formly-form>\n</form>\n```\n\nAlthough it works, something about it just feels wrong. Though it does now update the form variable correctly and works with the standard method of setting `$submitted` to show field errors.\n\nhttp://embed.plnkr.co/ycI1HbkLRR1o8i3CNzmW/\n. ",
    "johannesjo": "Well if it is not really possible with formly I consider this a feature request :) \n\nJSON schema forms does the same thing out of the box and I think angular formly should too! I use formly because I want to handle flexible data structures and this is a must have feature for that. \n. @kentcdodds Thank you very much for the the hint. I'll stick with the json-schema-forms for now, as they're much closer to what I actually need.\n. Well if it is not really possible with formly I consider this a feature request :) \n\nJSON schema forms does the same thing out of the box and I think angular formly should too! I use formly because I want to handle flexible data structures and this is a must have feature for that. \n. @kentcdodds Thank you very much for the the hint. I'll stick with the json-schema-forms for now, as they're much closer to what I actually need.\n. ",
    "formly-bot": ":wave: who wants to be my friend?\n. :wave: who wants to be my friend?\n. ",
    "ShashankaNataraj": "@kentcdodds I use this library at work. One suggestion, instead of handing this off to one person, why not create an angular-formly org and assign people to it?\n. @kentcdodds I use this library at work. One suggestion, instead of handing this off to one person, why not create an angular-formly org and assign people to it?\n. ",
    "jorgemarcondes": "Hi, \nIm interested.\nI am using the project and want to help to keep it updated.\n. @kentcdodds awesome. Formly is a great tool! I will help as I can!\n. Hi, \nIm interested.\nI am using the project and want to help to keep it updated.\n. @kentcdodds awesome. Formly is a great tool! I will help as I can!\n. ",
    "barkoczi": "I would join as maintainer.\n. I would join as maintainer.\n. ",
    "mohammedzamakhan": "I would love be join the team as maintainer\n. I would love be join the team as maintainer\n. ",
    "Stwissel": "I would be interested to help including an Angular2 TS port\n. I would be interested to help including an Angular2 TS port\n. ",
    "Doug-Shannon": "@kentcdodds do you have an update about the status of the maintainers for angular-formly and some of the other angular-formly related repositories like the bootstrap types?  Commits have pretty much died since April and I would hate to see formly go un-maintained.\n. This is in the wrong repo, should be in angular-formly-templates-bootstrap.  Will close and move\n. @kentcdodds do you have an update about the status of the maintainers for angular-formly and some of the other angular-formly related repositories like the bootstrap types?  Commits have pretty much died since April and I would hate to see formly go un-maintained.\n. This is in the wrong repo, should be in angular-formly-templates-bootstrap.  Will close and move\n. ",
    "sumitasr": "@kentcdodds I use angular-formly in one of my dashboard application's production code and would love to help as a contributor.\n. @pavithra-r Which version of formly are you using ? And can you share your code with something like http://jsbin.com/ ?\n. @kentcdodds I use angular-formly in one of my dashboard application's production code and would love to help as a contributor.\n. @pavithra-r Which version of formly are you using ? And can you share your code with something like http://jsbin.com/ ?\n. ",
    "nbfontana": "Hello @kentcdodds , I would like to use angular-formly on mine [app-quickstart](https://github.com/GoHD/app-quickstart) Application that's based in Angular on the Front-end and Java at the Back-end. Could you add me as a read-only collaborator?\n. Hello @kentcdodds , I would like to use angular-formly on mine [app-quickstart](https://github.com/GoHD/app-quickstart) Application that's based in Angular on the Front-end and Java at the Back-end. Could you add me as a read-only collaborator?\n. ",
    "TeChn4K": "Is Formly dead ?? :'(. Is Formly dead ?? :'(. ",
    "LuigiDAmico": "Hi Team AngularFormly,\r\n\r\nSome quick questions:\r\n- What are the number of user downloads in the last month?\r\n- Do we have active owner(s) / contributors of this project? (i see pushes are very scarce at the moment)\r\n\r\n@kentcdodds \ud83e\udd47 Massive up to you for this project!\r\n\r\n. Hi Team AngularFormly,\r\n\r\nSome quick questions:\r\n- What are the number of user downloads in the last month?\r\n- Do we have active owner(s) / contributors of this project? (i see pushes are very scarce at the moment)\r\n\r\n@kentcdodds \ud83e\udd47 Massive up to you for this project!\r\n\r\n. ",
    "vukan71": "I tried to reproduce  it: http://jsbin.com/rayipi/1/edit?html,js,output , but when I put:\n \"type\": 'ui-select-multiple', I don't see form, I can see it locally, and it works ?\n\nI just tried to add on  issue.angular-formly.com in controller: \n\nreturn $timeout(function(){\n    $scope.options.templateOptions.options = allData;\n}, 2000 );\n\ninstead of calling service, but again I can't see dropdown here? \nI use formlyBootstrap,  formly 7.3.7,  angular 1.4.8 \n. Thank you, I assumed that I missed something while coping to jsbin. \n\nI tried to use http://angular-formly.com/#/example/integrations/ui-select-angular-1-4\n\nMultiple Select + Async, both are on that same page. Both functionalities works perfectly when I use them separately,  but not together.\n. Thank you a lot @gillchristian :))))\n. I tried to reproduce  it: http://jsbin.com/rayipi/1/edit?html,js,output , but when I put:\n \"type\": 'ui-select-multiple', I don't see form, I can see it locally, and it works ?\n\nI just tried to add on  issue.angular-formly.com in controller: \n\nreturn $timeout(function(){\n    $scope.options.templateOptions.options = allData;\n}, 2000 );\n\ninstead of calling service, but again I can't see dropdown here? \nI use formlyBootstrap,  formly 7.3.7,  angular 1.4.8 \n. Thank you, I assumed that I missed something while coping to jsbin. \n\nI tried to use http://angular-formly.com/#/example/integrations/ui-select-angular-1-4\n\nMultiple Select + Async, both are on that same page. Both functionalities works perfectly when I use them separately,  but not together.\n. Thank you a lot @gillchristian :))))\n. ",
    "JordanBelford": "`jspm install angular-formly` installs 7.5.2, which is broken because there is no dist directory.\n\nFor now I am just installing 7.3.9 with `jspm install angular-formly=github:formly-js/angular-formly@7.3.9`\n\nInstalling from npm grabs 8.0.0, but I there is no 8.0.0 release or tag on github, as far as I can tell. What's that about?\n. Are there any other breaking changes with 8.0?\n. `jspm install angular-formly` installs 7.5.2, which is broken because there is no dist directory.\n\nFor now I am just installing 7.3.9 with `jspm install angular-formly=github:formly-js/angular-formly@7.3.9`\n\nInstalling from npm grabs 8.0.0, but I there is no 8.0.0 release or tag on github, as far as I can tell. What's that about?\n. Are there any other breaking changes with 8.0?\n. ",
    "ajay2507": "Is this still open?. Can I take this issue?. Is this still open?. Can I take this issue?. ",
    "JessyRiordan": "Awesome thanks! :smile: \n. @BarryThePenguin \n\nIt is fixed! :smile_cat: \n. Awesome thanks! :smile: \n. @BarryThePenguin \n\nIt is fixed! :smile_cat: \n. ",
    "JacoBezuidenhout": "+1 same problem here\n. Ah great!! Thanks guys!! \n. +1 same problem here\n. Ah great!! Thanks guys!! \n. ",
    "melnac": "I have the same problem. What can i do to resolve or workaround the problem ? I am using v8.0.3 and all my application is now broken. Resolution is very urgent. Thanks in advance.\n. thanks for reply. Where i can get a version before 8.0.0. I use formly via cdn...\n. many thanks, i will try\n. I have the same problem. What can i do to resolve or workaround the problem ? I am using v8.0.3 and all my application is now broken. Resolution is very urgent. Thanks in advance.\n. thanks for reply. Where i can get a version before 8.0.0. I use formly via cdn...\n. many thanks, i will try\n. ",
    "okelepko": "http://jsbin.com/pesupobona/1/edit?html,js,output <- with issue number.\n. http://jsbin.com/pesupobona/1/edit?html,js,output <- with issue number.\n. ",
    "tuxtina": "**No key**: Default values get put in the model. If no key is specified, there is nowhere to put the default value. The `parseSet()` function, which takes care of setting values in the model, will bail out instantly.\n\nI suppose this is the correct behavior, though it might make sense to add a check that warns if defaultValue is used in a field that has no key?\n\n**Numbers as keys**: Looking at `parseSet()`/`parseGet()`, the intended behavior seems to be that numeric keys mean array indexes. However, the same check that correctly exits `parseSet()` for the non-existing key, will also exit the function if a `0` key is used.\n\nThis check should probably be modified to permit `0` keys. I'll make a pull request for that...\n. @BarryThePenguin I assumed not checking explicitly for `undefined` keys was intentional, as I see little use for falsy keys other than `0`. Do you see a use case for these? Or am I misunderstanding your comment?\n. For `0`, the rest of the code made it pretty clear that it was caught unintentionally by the check for `!key`. @BarryThePenguin, you mention also checking for `false`? What about `null`, `''`, and `NaN`? Which falsy keys _should_ work? \n. **No key**: Default values get put in the model. If no key is specified, there is nowhere to put the default value. The `parseSet()` function, which takes care of setting values in the model, will bail out instantly.\n\nI suppose this is the correct behavior, though it might make sense to add a check that warns if defaultValue is used in a field that has no key?\n\n**Numbers as keys**: Looking at `parseSet()`/`parseGet()`, the intended behavior seems to be that numeric keys mean array indexes. However, the same check that correctly exits `parseSet()` for the non-existing key, will also exit the function if a `0` key is used.\n\nThis check should probably be modified to permit `0` keys. I'll make a pull request for that...\n. @BarryThePenguin I assumed not checking explicitly for `undefined` keys was intentional, as I see little use for falsy keys other than `0`. Do you see a use case for these? Or am I misunderstanding your comment?\n. For `0`, the rest of the code made it pretty clear that it was caught unintentionally by the check for `!key`. @BarryThePenguin, you mention also checking for `false`? What about `null`, `''`, and `NaN`? Which falsy keys _should_ work? \n. ",
    "dariusjb": "Hi,\nI have the same exact issue.\nformly code does the routine of calling the updateInitialValue on all fields, but if by default the field was disabled (using the hideExpression), that routine will go into exception since disabled fields are not properly initialized by formely, it did not wrap them with these formly functions.\n\nCould anyone provide a fix, please?\n. Hi,\nI have the same exact issue.\nformly code does the routine of calling the updateInitialValue on all fields, but if by default the field was disabled (using the hideExpression), that routine will go into exception since disabled fields are not properly initialized by formely, it did not wrap them with these formly functions.\n\nCould anyone provide a fix, please?\n. ",
    "pcardune": "Thanks for the merges everyone! Very much appreciated!\n. I managed to extract out the tests for the fieldTransform config option. A lot of the other tests look a bit more tricky to extract.\n. Thanks for the merges everyone! Very much appreciated!\n. I managed to extract out the tests for the fieldTransform config option. A lot of the other tests look a bit more tricky to extract.\n. ",
    "GitCop": "There were the following issues with your Pull Request\n- Commit: 57742fdd9c6fdddbe731f37a35671a01716fdfe2\n  - Your subject line is longer than 72 characters\n\nGuidelines are available at https://github.com/formly-js/angular-formly/blob/master/CONTRIBUTING.md\n\n---\n\nThis message was auto-generated by https://gitcop.com\n. There were the following issues with your Pull Request\n- Commit: 0da9118de99164f5843000badc1efded69399d75\n  - Your subject line is longer than 72 characters\n\nGuidelines are available at https://github.com/formly-js/angular-formly/blob/master/CONTRIBUTING.md\n\n---\n\nThis message was auto-generated by https://gitcop.com\n. There were the following issues with your Pull Request\n\n * Commit: ed1fcfcda8017dbcf03a0fd0b56040535b511bec\n  * Your subject line is longer than 72 characters\n\nGuidelines are available at https://github.com/formly-js/angular-formly/blob/master/CONTRIBUTING.md\n\n---\nThis message was auto-generated by https://gitcop.com\n. There were the following issues with your Pull Request\n- Commit: 57742fdd9c6fdddbe731f37a35671a01716fdfe2\n  - Your subject line is longer than 72 characters\n\nGuidelines are available at https://github.com/formly-js/angular-formly/blob/master/CONTRIBUTING.md\n\n---\n\nThis message was auto-generated by https://gitcop.com\n. There were the following issues with your Pull Request\n- Commit: 0da9118de99164f5843000badc1efded69399d75\n  - Your subject line is longer than 72 characters\n\nGuidelines are available at https://github.com/formly-js/angular-formly/blob/master/CONTRIBUTING.md\n\n---\n\nThis message was auto-generated by https://gitcop.com\n. There were the following issues with your Pull Request\n\n * Commit: ed1fcfcda8017dbcf03a0fd0b56040535b511bec\n  * Your subject line is longer than 72 characters\n\nGuidelines are available at https://github.com/formly-js/angular-formly/blob/master/CONTRIBUTING.md\n\n---\nThis message was auto-generated by https://gitcop.com\n. ",
    "tilwinjoy": "Yea that'd do it. But what if I'm pushing fields dynamically..? I'm not sure if that is supported, so to be on the safer side for now I added the transformation logic in the service that fetches data.\n. Yea that'd do it. But what if I'm pushing fields dynamically..? I'm not sure if that is supported, so to be on the safer side for now I added the transformation logic in the service that fetches data.\n. ",
    "nkimaina": "Thanks so much for the response. So if a field needs to know when several fields outside its form changes, then I have to set-up watchers for each of the other fields similar to your example? \n. Thanks so much for the response. So if a field needs to know when several fields outside its form changes, then I have to set-up watchers for each of the other fields similar to your example? \n. ",
    "saravanan77": "I agree .. Form submit trigger even on disabled submit button is part of html specification.  \n\nIs that possible for formly to catch that submit event and evaluate all the formly fields are valid or not before triggering associated submit function.\n\nIn my example, i have attached length validation to first name field.\n\n> ```\n>                 lengthValidation: function($viewValue, $modelValue, scope) {\n>                   if ($viewValue.length > 3) {\n>                     return true ;\n>                   }\n> \n>                   return false;\n>                 }\n> ```\n. Is this not a good feature to have in Formly instead of adding $valid check or adding hidden field manually ?\n. As you said \"In formly we often do things that abstract away the unexpected parts of the specification\", i think its worth putting it as part of formly form options.\n\n> preventSingleFieldInvalidFormSubmit=true or false(default...normal behavior)\n. Neat generic solution.  :clap: :clap: :clap:\n\nBut adding hidden field is not solving this problem in Safari 9x.\nhttp://plnkr.co/edit/x7scTQuTz4Qu0iwCgCn7?p=preview\n\nI know this is nothing to do with Formly anyway.\n. I agree .. Form submit trigger even on disabled submit button is part of html specification.  \n\nIs that possible for formly to catch that submit event and evaluate all the formly fields are valid or not before triggering associated submit function.\n\nIn my example, i have attached length validation to first name field.\n\n> ```\n>                 lengthValidation: function($viewValue, $modelValue, scope) {\n>                   if ($viewValue.length > 3) {\n>                     return true ;\n>                   }\n> \n>                   return false;\n>                 }\n> ```\n. Is this not a good feature to have in Formly instead of adding $valid check or adding hidden field manually ?\n. As you said \"In formly we often do things that abstract away the unexpected parts of the specification\", i think its worth putting it as part of formly form options.\n\n> preventSingleFieldInvalidFormSubmit=true or false(default...normal behavior)\n. Neat generic solution.  :clap: :clap: :clap:\n\nBut adding hidden field is not solving this problem in Safari 9x.\nhttp://plnkr.co/edit/x7scTQuTz4Qu0iwCgCn7?p=preview\n\nI know this is nothing to do with Formly anyway.\n. ",
    "thachp": "I am experiencing similar issue.  I'm getting this error...\n\n```\nError: [ui.select:iexp] Expected expression in form of '_item_ in _collection_[ track by _id_]' but got '{{to.ngOptions}}'.\n```\n\nMy temp solution is to use v0.17.0.\n\n```\nnpm install ui-select@0.17.0 --save-dev\n```\n. I am experiencing similar issue.  I'm getting this error...\n\n```\nError: [ui.select:iexp] Expected expression in form of '_item_ in _collection_[ track by _id_]' but got '{{to.ngOptions}}'.\n```\n\nMy temp solution is to use v0.17.0.\n\n```\nnpm install ui-select@0.17.0 --save-dev\n```\n. ",
    "vmartinetti": "+1 same problem and same workaround of @Luddinus \n. +1 same problem and same workaround of @Luddinus \n. ",
    "mohanskumar": "+1 Same issue here, I need to dynamically build the repeat string and bind it. falling back to 0.17.0\n. +1 Same issue here, I need to dynamically build the repeat string and bind it. falling back to 0.17.0\n. ",
    "arickampschaefer": "+1 same issue, and @Luddinus's solution doesn't work for me, so I've also fallen back to 0.17.0\n. +1 same issue, and @Luddinus's solution doesn't work for me, so I've also fallen back to 0.17.0\n. ",
    "oscar-b": "Also see https://github.com/angular-ui/ui-select/issues/1640\n. Also see https://github.com/angular-ui/ui-select/issues/1640\n. ",
    "JR-Utily": "+1 (still happening with ui-select v0.19.x and angular-formly v8.4.x)\r\n@hustshawn \r\nno, there is no correction, you can see in the html they included v0.16 of ui-select and the regression was introduced in v0.17.1\r\n`<script src=\"https://cdn.rawgit.com/angular-ui/ui-select/v0.16.0/dist/select.js\"></script>`\r\n. +1 (still happening with ui-select v0.19.x and angular-formly v8.4.x)\r\n@hustshawn \r\nno, there is no correction, you can see in the html they included v0.16 of ui-select and the regression was introduced in v0.17.1\r\n`<script src=\"https://cdn.rawgit.com/angular-ui/ui-select/v0.16.0/dist/select.js\"></script>`\r\n. ",
    "Blaze34": "Somebody fix it? I published this issue a week ago and no activity yet!\n. Two weeks...\nNobody care?\n. Month... Support are worse that I ever met!\nGood idea, but bad implementation.\n. Bug with datepicker: the reason in order of formatters.\nDatepicker from angular-ui add own formatter (which parse date).\nAngular-formly formatters add after that and get value already formatted by datepicker's formatter.\n\nMy solution is remove formatter/parser from formly and do transformation in controller\nI hope this will help somebody.\n. What do You mean \"complete field\"?\nMaybe You have some [live](http://jsbin.com/) example?\n. I don't know any callbacks.\nAs an option You can use\n\n```\ntemplateOptions: {\n  callback: () => { ... }\n}\n```\n\nand in template add `ng-init=\"to.callback()\"`\n\nIt's just idea =)\n. Somebody fix it? I published this issue a week ago and no activity yet!\n. Two weeks...\nNobody care?\n. Month... Support are worse that I ever met!\nGood idea, but bad implementation.\n. Bug with datepicker: the reason in order of formatters.\nDatepicker from angular-ui add own formatter (which parse date).\nAngular-formly formatters add after that and get value already formatted by datepicker's formatter.\n\nMy solution is remove formatter/parser from formly and do transformation in controller\nI hope this will help somebody.\n. What do You mean \"complete field\"?\nMaybe You have some [live](http://jsbin.com/) example?\n. I don't know any callbacks.\nAs an option You can use\n\n```\ntemplateOptions: {\n  callback: () => { ... }\n}\n```\n\nand in template add `ng-init=\"to.callback()\"`\n\nIt's just idea =)\n. ",
    "david-potgieter": "@Blaze34 - sorry for being late to the party. I have written a provider and use that to do my parsing. In the provider I do date validation and formatting with MomentJS.\n\nIn my formly field setup:\n\n```\nparsers: [(value) => { return this.regexProvider.formatDate(value) }]\n\n```\n\nand then in the provider:\n\n```\nformatDate(value) {\n        // validation checks etc...\n        return this.moment(value).format('DD/MM/YYYY');\n}\n```\n. @Blaze34 - sorry for being late to the party. I have written a provider and use that to do my parsing. In the provider I do date validation and formatting with MomentJS.\n\nIn my formly field setup:\n\n```\nparsers: [(value) => { return this.regexProvider.formatDate(value) }]\n\n```\n\nand then in the provider:\n\n```\nformatDate(value) {\n        // validation checks etc...\n        return this.moment(value).format('DD/MM/YYYY');\n}\n```\n. ",
    "pichlou": "when dynamic field is completed,call a function,i.e:when complete creating select or input element,i'm calling my custom javascript function in my controller,element is not exist with access it by selector,but it is available in my page elements with specific class,this mean element in controller not create completely\nis there a function that i call my custom javascript function after complete assign element specification? :( \n. thanks for your answer,my format is json,and problem really is this,in json format i cant use function in callback or link function :))\n. when dynamic field is completed,call a function,i.e:when complete creating select or input element,i'm calling my custom javascript function in my controller,element is not exist with access it by selector,but it is available in my page elements with specific class,this mean element in controller not create completely\nis there a function that i call my custom javascript function after complete assign element specification? :( \n. thanks for your answer,my format is json,and problem really is this,in json format i cant use function in callback or link function :))\n. ",
    "xphong": "Thanks for the quick reponse @kentcdodds .\n\nI found out that the defaultValue wasn't working because of my custom template that uses Angular Material.\n\nI had to add \n\n`ng-class=\"{ 'md-checked': model[options.key] }\"`\n\nto\n\n```\n    <md-checkbox ng-model=\"model[options.key]\" ng-class=\"{ 'md-checked': model[options.key] }\" class=\"md-primary dh-md-checkbox\">\n        {{to.label}}\n    </md-checkbox>\n```\n. Thanks for the quick reponse @kentcdodds .\n\nI found out that the defaultValue wasn't working because of my custom template that uses Angular Material.\n\nI had to add \n\n`ng-class=\"{ 'md-checked': model[options.key] }\"`\n\nto\n\n```\n    <md-checkbox ng-model=\"model[options.key]\" ng-class=\"{ 'md-checked': model[options.key] }\" class=\"md-primary dh-md-checkbox\">\n        {{to.label}}\n    </md-checkbox>\n```\n. ",
    "Jan539": "Ok nvm i figured I can use options.fieldGroup[0].id for this.\n. Ok nvm i figured I can use options.fieldGroup[0].id for this.\n. ",
    "shailendramonu": "##### Bug description:\n\nInitial value is not populating when load by modal (ng-model=\"model[options.key]\")\n\n##### Link to minimally-working plunker that reproduces the issue:\n\nhttp://jsbin.com/yesayiwowi/edit?html,js,output\n\nTry giving initial value to model e.g. \n`vm.model = {\"datetime\": \"2016-07-04T14:00:00.000Z\"};`\n\n##### Fix (ui.bootstrap.datetimepicker) datetimepicker.js -> template -> controller after line 178\n\n```\nif ($scope.ngModel) {\n // convert from ISO format to Date\n  if (!($scope.ngModel instanceof Date)) $scope.ngModel = new Date($scope.ngModel);\n}\n```\n. ##### Bug description:\n\nInitial value is not populating when load by modal (ng-model=\"model[options.key]\")\n\n##### Link to minimally-working plunker that reproduces the issue:\n\nhttp://jsbin.com/yesayiwowi/edit?html,js,output\n\nTry giving initial value to model e.g. \n`vm.model = {\"datetime\": \"2016-07-04T14:00:00.000Z\"};`\n\n##### Fix (ui.bootstrap.datetimepicker) datetimepicker.js -> template -> controller after line 178\n\n```\nif ($scope.ngModel) {\n // convert from ISO format to Date\n  if (!($scope.ngModel instanceof Date)) $scope.ngModel = new Date($scope.ngModel);\n}\n```\n. ",
    "osdevisnot": "Never mind saw you comment on #593\n. Never mind saw you comment on #593\n. ",
    "vanthanh": "My example here: https://plnkr.co/edit/S8LSDcnw7z1Rv5pkcuOa?p=preview\nI hope everyone to help me\n. My example here: https://plnkr.co/edit/S8LSDcnw7z1Rv5pkcuOa?p=preview\nI hope everyone to help me\n. ",
    "DanishIqbal111": "This has been done\n. This has been done\n. ",
    "Omsad": "I \u2018ve highlighted the problem line of code below from the FormlyFormController:\n\n  function runFieldExpressionProperties(field, index) {\n    const model = field.model || $scope.model\n    const promise = field.runExpressions && field.runExpressions()\n    if (field.hideExpression) { // can't use hide with expressionProperties reliably\n      const val = model[field.key] <- This is the problem.\n      field.hide = evalCloseToFormlyExpression(field.hideExpression, val, field, index, {model})\n    }\n    if (field.extras && field.extras.validateOnModelChange && field.formControl) {\n      if (angular.isArray(field.formControl)) {\n        angular.forEach(field.formControl, function(formControl) {\n          validateFormControl(formControl, promise)\n        })\n      } else {\n        validateFormControl(field.formControl, promise)\n      }\n    }\n  }\n\nAs you can see the issue isn\u2019t with a property of the model being null but the model itself being null. The code makes the assumption that the model is always going to have a value which isn\u2019t true in my case. Changing the line to \u201cconst val = model == null ? undefined : model[field.key]\u201d keeps the behaviour consistent as far as I can see and allows for a null model.\n\nOmsad\n\nFrom: franzeal [mailto:notifications@github.com] \nSent: 22 July 2016 18:09\nTo: formly-js/angular-formly\nCc: Omsad; Author\nSubject: Re: [formly-js/angular-formly] hideExpression exception when model null. (#698)\n\nIs there some reason you don't just use the function form http://docs.angular-formly.com/docs/formly-expressions#expressionproperties-validators--messages  and safely resolve your model property from there e.g.:\n\nhideExpression: function($viewValue, $modelValue, scope) {\nreturn scope.model && scope.model.baz === 'foobar';\n}\n. I use null as a representation of an unassigned object, e.g. it should never have properties set on it. By the time any properties on it are assigned, the model will have been changed to a real object so there will be no issue. \n\nIf at any point a property of the model is assigned and the model is null I would want an error to occur as that would mean there is a bug in my logic controlling that particular model.\n\nIf I was to use an empty object everything which was bound to it would have to check to see if the object was \"empty\" or \"real\", as different logic occurs depending upon the current value.\n\nFrom a readability and code maintenance point of view having the extra logic to calculate the above is a pain because I would have to have it in multiple locations as I use multiple templates either bound directly to the \"model\", bound to the parent of the model through a property, or bound to a child property of the model.\n\nThese templates would then need to know the context of what was being bound to them as for some of the templates an empty object is a perfectly valid model to bind. This would introduce a dependence into the controller using them which could be forgotten / misconfigured.\n. I \u2018ve highlighted the problem line of code below from the FormlyFormController:\n\n  function runFieldExpressionProperties(field, index) {\n    const model = field.model || $scope.model\n    const promise = field.runExpressions && field.runExpressions()\n    if (field.hideExpression) { // can't use hide with expressionProperties reliably\n      const val = model[field.key] <- This is the problem.\n      field.hide = evalCloseToFormlyExpression(field.hideExpression, val, field, index, {model})\n    }\n    if (field.extras && field.extras.validateOnModelChange && field.formControl) {\n      if (angular.isArray(field.formControl)) {\n        angular.forEach(field.formControl, function(formControl) {\n          validateFormControl(formControl, promise)\n        })\n      } else {\n        validateFormControl(field.formControl, promise)\n      }\n    }\n  }\n\nAs you can see the issue isn\u2019t with a property of the model being null but the model itself being null. The code makes the assumption that the model is always going to have a value which isn\u2019t true in my case. Changing the line to \u201cconst val = model == null ? undefined : model[field.key]\u201d keeps the behaviour consistent as far as I can see and allows for a null model.\n\nOmsad\n\nFrom: franzeal [mailto:notifications@github.com] \nSent: 22 July 2016 18:09\nTo: formly-js/angular-formly\nCc: Omsad; Author\nSubject: Re: [formly-js/angular-formly] hideExpression exception when model null. (#698)\n\nIs there some reason you don't just use the function form http://docs.angular-formly.com/docs/formly-expressions#expressionproperties-validators--messages  and safely resolve your model property from there e.g.:\n\nhideExpression: function($viewValue, $modelValue, scope) {\nreturn scope.model && scope.model.baz === 'foobar';\n}\n. I use null as a representation of an unassigned object, e.g. it should never have properties set on it. By the time any properties on it are assigned, the model will have been changed to a real object so there will be no issue. \n\nIf at any point a property of the model is assigned and the model is null I would want an error to occur as that would mean there is a bug in my logic controlling that particular model.\n\nIf I was to use an empty object everything which was bound to it would have to check to see if the object was \"empty\" or \"real\", as different logic occurs depending upon the current value.\n\nFrom a readability and code maintenance point of view having the extra logic to calculate the above is a pain because I would have to have it in multiple locations as I use multiple templates either bound directly to the \"model\", bound to the parent of the model through a property, or bound to a child property of the model.\n\nThese templates would then need to know the context of what was being bound to them as for some of the templates an empty object is a perfectly valid model to bind. This would introduce a dependence into the controller using them which could be forgotten / misconfigured.\n. ",
    "pavithra-r": "Hi sumitasr,\n thank you so much for your response.\n\nFormly version that i have used in my project:\n    \"angular-formly\": \"^8.2.1\",\n    \"angular-formly-templates-bootstrap\": \"^6.3.2\",\n    \"api-check\": \"^7.5.5\"\n    \"angular\": \"~1.3.8\"\n\nhttp://jsbin.com/tapuha/9/edit?html,js,output\nThe similar code only am following in my project but we are using bower components not a cdn link.\n\nThen our project structure and coding style also little different so in jsbin i cant able to put my code properly.sorry for that.\nThe code that i used inside my project ,\nhttps://jsbin.com/dukeva/3/edit?html,js,output\n\nThen in one more js file i have added this code,\n\n(function() {\n   'use strict';\n   //Angular Formly \n    var app = angular.module('app.formly', ['formly', 'formlyBootstrap','ngAnimate'])\n})();\n\nIn Google Chrome am getting the output like this,\n![image](https://cloud.githubusercontent.com/assets/18478881/17240680/89adb410-558a-11e6-8db6-ef95690f0da2.png)\n\nIn Mozila Firefox,\n\n![image](https://cloud.githubusercontent.com/assets/18478881/17240716/b566b0fc-558a-11e6-97cd-a3fe6c145472.png)\n\nAm fresher and am new to this technology. Am not getting how its working fine in google chrome,android mobile and not displaying in mozile,safari,iphone.\n\nOnce Again thanks for your help.\n. @icruces Form is generated but that paramaters(input textbox,textarea) are not repeating in firefox.( not generated from controllers)\n\n**In Firefox:**\n![image](https://cloud.githubusercontent.com/assets/18478881/17246118/aee831fc-55a7-11e6-82d4-a5ceb516e6ca.png)\n\n**In GoogleChrome:**\n![image](https://cloud.githubusercontent.com/assets/18478881/17246280/a25151f2-55a8-11e6-9ad2-5228167007b0.png)\n\n![image](https://cloud.githubusercontent.com/assets/18478881/17246291/aebf02fe-55a8-11e6-95de-0714ff56e703.png)\n\n![image](https://cloud.githubusercontent.com/assets/18478881/17246297/b869cf28-55a8-11e6-821e-56dc9fb88695.png)\n. Hi ,\n I had figured out that issue, it is due webcomponents.js.For map I had  installed the google map bower component in that webcomponent.js having some issue.\nOnce I comment this script, I'm able to the see angular form in all the browser. \n. Hi sumitasr,\n thank you so much for your response.\n\nFormly version that i have used in my project:\n    \"angular-formly\": \"^8.2.1\",\n    \"angular-formly-templates-bootstrap\": \"^6.3.2\",\n    \"api-check\": \"^7.5.5\"\n    \"angular\": \"~1.3.8\"\n\nhttp://jsbin.com/tapuha/9/edit?html,js,output\nThe similar code only am following in my project but we are using bower components not a cdn link.\n\nThen our project structure and coding style also little different so in jsbin i cant able to put my code properly.sorry for that.\nThe code that i used inside my project ,\nhttps://jsbin.com/dukeva/3/edit?html,js,output\n\nThen in one more js file i have added this code,\n\n(function() {\n   'use strict';\n   //Angular Formly \n    var app = angular.module('app.formly', ['formly', 'formlyBootstrap','ngAnimate'])\n})();\n\nIn Google Chrome am getting the output like this,\n![image](https://cloud.githubusercontent.com/assets/18478881/17240680/89adb410-558a-11e6-8db6-ef95690f0da2.png)\n\nIn Mozila Firefox,\n\n![image](https://cloud.githubusercontent.com/assets/18478881/17240716/b566b0fc-558a-11e6-97cd-a3fe6c145472.png)\n\nAm fresher and am new to this technology. Am not getting how its working fine in google chrome,android mobile and not displaying in mozile,safari,iphone.\n\nOnce Again thanks for your help.\n. @icruces Form is generated but that paramaters(input textbox,textarea) are not repeating in firefox.( not generated from controllers)\n\n**In Firefox:**\n![image](https://cloud.githubusercontent.com/assets/18478881/17246118/aee831fc-55a7-11e6-82d4-a5ceb516e6ca.png)\n\n**In GoogleChrome:**\n![image](https://cloud.githubusercontent.com/assets/18478881/17246280/a25151f2-55a8-11e6-9ad2-5228167007b0.png)\n\n![image](https://cloud.githubusercontent.com/assets/18478881/17246291/aebf02fe-55a8-11e6-95de-0714ff56e703.png)\n\n![image](https://cloud.githubusercontent.com/assets/18478881/17246297/b869cf28-55a8-11e6-821e-56dc9fb88695.png)\n. Hi ,\n I had figured out that issue, it is due webcomponents.js.For map I had  installed the google map bower component in that webcomponent.js having some issue.\nOnce I comment this script, I'm able to the see angular form in all the browser. \n. ",
    "icruces": "@pavithra-r Have you checked with the Firefox debugger if the form is generated in the DOM? I would review the css of the form or its container.\n. @pavithra-r Have you checked with the Firefox debugger if the form is generated in the DOM? I would review the css of the form or its container.\n. ",
    "kiran8143": "Formly has this issues in safari ,IE and mobile browsers also.\nSome time's the validation messages over lap. I have give up using angular formly for client projects\n. Formly has this issues in safari ,IE and mobile browsers also.\nSome time's the validation messages over lap. I have give up using angular formly for client projects\n. ",
    "pjlnmix": "~~Well nevermind... as I started picking through the code to see if I could find a fix I realized its an issue with angular.$parse and they wont fix it... https://github.com/angular/angular.js/pull/9850 closing in frustration~~ Reopened issue to follow guidelines for a forthcoming PR\n. ~~Well nevermind... as I started picking through the code to see if I could find a fix I realized its an issue with angular.$parse and they wont fix it... https://github.com/angular/angular.js/pull/9850 closing in frustration~~ Reopened issue to follow guidelines for a forthcoming PR\n. ",
    "alindberg": "Updating the demo code to use 0.16.0 for ui-select fixed the issue running Angular 1.5.x\n. Updating the demo code to use 0.16.0 for ui-select fixed the issue running Angular 1.5.x\n. ",
    "mail2vinay": "Do we have any workaround to make it work in Angular 1.5x\nhow to customize the theme of select-ui.\n\nThank you,\nVinay\n. Do we have any workaround to make it work in Angular 1.5x\nhow to customize the theme of select-ui.\n\nThank you,\nVinay\n. ",
    "mikaelcom": "Any hope that this issue would be analyzed and fixed?\r\n\r\nThanks. Any hope that this issue would be analyzed and fixed?\r\n\r\nThanks. ",
    "Jefiozie": "Please follow the instructions of the issue template. this will help people in contributing and reproducing the issue.\n. Please follow the instructions of the issue template. this will help people in contributing and reproducing the issue.\n. ",
    "vipin1770": "i have correct your code please follow the link:\r\nhttps://plnkr.co/edit/Tav7PVk6RVD4PtdanQWz?p=preview\r\n. i have correct your code please follow the link:\r\nhttps://plnkr.co/edit/Tav7PVk6RVD4PtdanQWz?p=preview\r\n. ",
    "smajl": "You are right, it is related to one-way and two-way binding. You are using one-way binding in your component, so things are going one way, right? Just use `=`. Nobody said you have to use `<` only in components...\n. You are right, it is related to one-way and two-way binding. You are using one-way binding in your component, so things are going one way, right? Just use `=`. Nobody said you have to use `<` only in components...\n. ",
    "ivanvoznyakovsky": "@smajl you're right. I was trying to follow angular's docs saying `Inputs should be using < and @ bindings.`, but this does not work in this case.\nclosing as not related to formly\n. @smajl you're right. I was trying to follow angular's docs saying `Inputs should be using < and @ bindings.`, but this does not work in this case.\nclosing as not related to formly\n. ",
    "teland94": "I have the same issue. I have the same issue. ",
    "Jaygiri": "As per your bin, there is an error on Gender service. You are using \"description\" instead of \"name\".\r\n\r\nHere is corrected bin: http://jsbin.com/bejazidaqe/edit?js,output\r\n\r\n. @mcassani sorry I miss-understood the issue. Here is the solution http://jsbin.com/kibaboluhi/2/edit?js,output\r\n\r\nLooks like extend is failing for select defaultOptions \r\n\r\n@kentongray it would be good learning if you explain what is the actual issue here with extend.. @mcassani I have found more appropriate solution, using angular.extend \r\n\r\n```\r\napp.run(function(formlyConfig) {\r\n    var selectType = formlyConfig.getType('select');\r\n    formlyConfig.setType(angular.extend({}, selectType, {\r\n      name: 'horizontalSelect',\r\n      wrapper: ['horizontalBootstrapLabel', 'bootstrapHasError']\r\n    }));\r\n  });\r\n```\r\n\r\nhttp://jsbin.com/nuguzeqozi/1/edit?js,console,output. As per your bin, there is an error on Gender service. You are using \"description\" instead of \"name\".\r\n\r\nHere is corrected bin: http://jsbin.com/bejazidaqe/edit?js,output\r\n\r\n. @mcassani sorry I miss-understood the issue. Here is the solution http://jsbin.com/kibaboluhi/2/edit?js,output\r\n\r\nLooks like extend is failing for select defaultOptions \r\n\r\n@kentongray it would be good learning if you explain what is the actual issue here with extend.. @mcassani I have found more appropriate solution, using angular.extend \r\n\r\n```\r\napp.run(function(formlyConfig) {\r\n    var selectType = formlyConfig.getType('select');\r\n    formlyConfig.setType(angular.extend({}, selectType, {\r\n      name: 'horizontalSelect',\r\n      wrapper: ['horizontalBootstrapLabel', 'bootstrapHasError']\r\n    }));\r\n  });\r\n```\r\n\r\nhttp://jsbin.com/nuguzeqozi/1/edit?js,console,output. ",
    "mcassani": "@Jaygiri thank you for your answer but is the problem.. I need to use \"description\" instead of \"name\". If I use \"name\" in the first combobox yes or yes I have to use \"name\" property in the rest and I need use different.. @Jaygiri thank you so much! I'm using it and it works perfectly. @Jaygiri thank you for your answer but is the problem.. I need to use \"description\" instead of \"name\". If I use \"name\" in the first combobox yes or yes I have to use \"name\" property in the rest and I need use different.. @Jaygiri thank you so much! I'm using it and it works perfectly. ",
    "harm-less": "That seems to do exactly what I need. Thank you so much for explaining this to me!. That seems to do exactly what I need. Thank you so much for explaining this to me!. ",
    "laterbreh": "I was able to resolve this thanks to the example that was posted in #533 \r\n\r\nFor the life of me I couldn't get it to work with the documentations example. But using @yahyaKacem 's example that he posted I was able to get it working without issue. \r\n\r\nSorry for polluting the issues here on GH. \r\n\r\nThanks you for this wonderful plugin. . I was able to resolve this thanks to the example that was posted in #533 \r\n\r\nFor the life of me I couldn't get it to work with the documentations example. But using @yahyaKacem 's example that he posted I was able to get it working without issue. \r\n\r\nSorry for polluting the issues here on GH. \r\n\r\nThanks you for this wonderful plugin. . ",
    "random-one": "@marksq I had similar issue trying to override exactly the select template just to put a custom class on it, which was wrong because there is a thing called `ngModelAttrs`, but however I noticed that this error does not happen when I didn't override the template. Other template overrides as I saw in examples also include the `<formly-transclude></formly-transclude>` tag, which I assume is the one to blame to see this error because I think it has something to do with the scope.\r\n\r\nI don't think I answered your question but I am sure I gave you a hint. Explore the `formlyConfig` and I am sure you will find how to add an empty element without overriding the `<select>` template.\r\n. @marksq I had similar issue trying to override exactly the select template just to put a custom class on it, which was wrong because there is a thing called `ngModelAttrs`, but however I noticed that this error does not happen when I didn't override the template. Other template overrides as I saw in examples also include the `<formly-transclude></formly-transclude>` tag, which I assume is the one to blame to see this error because I think it has something to do with the scope.\r\n\r\nI don't think I answered your question but I am sure I gave you a hint. Explore the `formlyConfig` and I am sure you will find how to add an empty element without overriding the `<select>` template.\r\n. ",
    "gayanprasanna": "@egucciar Yes i have tried it before that.And it threw an error of ng-model.Probably because of having a number in the ng-model.. Yeah sure thanks\n\nOn Wed, Sep 20, 2017 at 3:29 PM, Erica Gucciardo <notifications@github.com>\nwrote:\n\n> As I might need this functionality as well, I'll keep this in mind and see\n> if I can come up with a solution\n>\n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/formly-js/angular-formly/issues/742#issuecomment-330805306>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/ASyhIT-WHarJGXbw3nSWfJFV0wCBHY49ks5skOHngaJpZM4OZ4RI>\n> .\n>\n. @egucciar Yes i have tried it before that.And it threw an error of ng-model.Probably because of having a number in the ng-model.. Yeah sure thanks\n\nOn Wed, Sep 20, 2017 at 3:29 PM, Erica Gucciardo <notifications@github.com>\nwrote:\n\n> As I might need this functionality as well, I'll keep this in mind and see\n> if I can come up with a solution\n>\n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/formly-js/angular-formly/issues/742#issuecomment-330805306>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/ASyhIT-WHarJGXbw3nSWfJFV0wCBHY49ks5skOHngaJpZM4OZ4RI>\n> .\n>\n. ",
    "usmandap": "If you mean initialize for preselected value in your select option then may be your model will going to work for it. Set your model value to any value in your controller and it will preselect the option. I haven't tried but it should work.. If you mean initialize for preselected value in your select option then may be your model will going to work for it. Set your model value to any value in your controller and it will preselect the option. I haven't tried but it should work.. ",
    "AmirDev": "Thank you for your answer\r\n I Know that how the form is initialized and your solution just works for non asynchronous like 'ui-select'. when we use a async-ui-select we don't have any option in client side. if you see 'async-ui-select' in this address: http://angular-formly.com/#/example/integrations/ui-select and how it works you would understand better my problem. Thank you for your answer\r\n I Know that how the form is initialized and your solution just works for non asynchronous like 'ui-select'. when we use a async-ui-select we don't have any option in client side. if you see 'async-ui-select' in this address: http://angular-formly.com/#/example/integrations/ui-select and how it works you would understand better my problem. ",
    "Vinoth18": "Hi @looser,\r\n\r\nI can access the site via http://docs.angular-formly.com/\r\n\r\nRegards,\r\nVinoth. Hi @looser,\r\n\r\nI can access the site via http://docs.angular-formly.com/\r\n\r\nRegards,\r\nVinoth. ",
    "philipp-serfling": "Alright! Who knows which server had a little issue.\r\n\r\nCan be closed!. Alright! Who knows which server had a little issue.\r\n\r\nCan be closed!. ",
    "lexhartman": "Unfortunately no. I put it aside for the time being while i'm focussing on other things in my 'project'.. I found a solution, but it's totally different approach but maybe you can use it for your own:\r\nhttp://plnkr.co/edit/3HWxKCswZVtvbV0Ucr6r?p=preview\r\n(works only with the options 'function' and 'department'). Unfortunately no. I put it aside for the time being while i'm focussing on other things in my 'project'.. I found a solution, but it's totally different approach but maybe you can use it for your own:\r\nhttp://plnkr.co/edit/3HWxKCswZVtvbV0Ucr6r?p=preview\r\n(works only with the options 'function' and 'department'). ",
    "Devqon": "@egucciar  I'd agree with that if we had one form, but we have multiple formly-forms in multiple applications, where they all need to have this intercepted functionality.. Another issue is the nesting of fields/fieldgroups. If I am using a service to do the manipulation myself, I'll have to do a recursive check on all sub-fields and -groups.. @egucciar  I'd agree with that if we had one form, but we have multiple formly-forms in multiple applications, where they all need to have this intercepted functionality.. Another issue is the nesting of fields/fieldgroups. If I am using a service to do the manipulation myself, I'll have to do a recursive check on all sub-fields and -groups.. ",
    "Gildissimo": "Thanks a lot, I've implemented exactly this solution, but I'm looking for an \"official\" answer , particularly to adopt a best practice. Thanks a lot for your answer. Thanks a lot, I've implemented exactly this solution, but I'm looking for an \"official\" answer , particularly to adopt a best practice. Thanks a lot for your answer. ",
    "falinsin": "Thank you very much for your help.\r\n\r\n1) your answer is very helpful and made my day\r\n\r\n2) For every field I need to  collect several extra data i can use in the server side or server can send me in the  listfield JSON. For example \r\n\r\n```\r\n{\r\n                    key: \"textarea\",\r\n                    type: \"textarea\",\r\n                    className: \"col-xs-12\",\r\n                    templateOptions: {\r\n                        name_type:\"Textarea field\",\r\n                        code_type:\"textarea\",\r\n                        label: \"\",\r\n                        placeholder: \"\",\r\n                        required: false\r\n                    }\r\n                }\r\n```\r\nFor example you can see properties     name_type and code_type are extra data for my own use. \r\n\r\nI insert  all these new data inside **templateOptions** propertie and it is working. \r\n\r\nIt does not intercept with the generation of the form because it formly ignores them.\r\n\r\nMy question is :\r\n\r\nIs there a specific or more appropriate variable in formly to insert this type of custom variables or is it correct as I am doing?  I ask it just in case\r\n\r\nThan you very much\r\n\r\n\r\n. Thank you very much for your help.\r\n\r\n1) your answer is very helpful and made my day\r\n\r\n2) For every field I need to  collect several extra data i can use in the server side or server can send me in the  listfield JSON. For example \r\n\r\n```\r\n{\r\n                    key: \"textarea\",\r\n                    type: \"textarea\",\r\n                    className: \"col-xs-12\",\r\n                    templateOptions: {\r\n                        name_type:\"Textarea field\",\r\n                        code_type:\"textarea\",\r\n                        label: \"\",\r\n                        placeholder: \"\",\r\n                        required: false\r\n                    }\r\n                }\r\n```\r\nFor example you can see properties     name_type and code_type are extra data for my own use. \r\n\r\nI insert  all these new data inside **templateOptions** propertie and it is working. \r\n\r\nIt does not intercept with the generation of the form because it formly ignores them.\r\n\r\nMy question is :\r\n\r\nIs there a specific or more appropriate variable in formly to insert this type of custom variables or is it correct as I am doing?  I ask it just in case\r\n\r\nThan you very much\r\n\r\n\r\n. ",
    "minasvisual": "+1. +1. "
}