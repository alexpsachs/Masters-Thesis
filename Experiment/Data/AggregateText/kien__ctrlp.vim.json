{
    "kien": "OK, I added this to the dev branch, check it out: https://github.com/kien/ctrlp.vim/tree/develop\n\nLet me know if you find any problem.\n. Sorry, I don't think I understand what you're trying to say here. `<up>` and `<down>` should move the selection up and down in the match window. Does `<down>` behave differently for you?\n. Yes, I got it  (Github removed the `<up>` and `<down>` in your comment). As for the bug, the `<up>` and `<down>` mappings are basically just this:\n\n``` vim\nnnoremap <buffer> <silent> <up> k\nnnoremap <buffer> <silent> <down> j\n```\n\nI'm guessing something in your setup changes this. You might be able to track it down with `maparg()` and `mapcheck()`, but if you just want to avoid `<up>` and `<down>` you can add this to your .vimrc, and ctrlp won't touch these 2 keys:\n\n``` vim\nlet g:ctrlp_prompt_mappings = {\n    \\ 'PrtSelectMove(\"j\")': ['<c-n>', '<c-j>'],\n    \\ 'PrtSelectMove(\"k\")': ['<c-p>', '<c-k>'],\n    \\ }\n```\n. Thanks Juan, looks like this is a problem with ncurses on OSX 10.6.3:\n\n> Instead of their proper action, they all quit the program and printed -respectively- \u201cOA\u201d, \u201cOB\u201d, \u201cOC\u201d and \u201cOD\u201d on the stdout.\n> http://www.uponmyshoulder.com/blog/2010/os-x-10-6-3-broke-ncurses/\n\nAnd using those keys in Vim will just enter insert mode and insert A, B, C, D.\n\nSo I'm not sure if I should try to find a work-around for that and include it in the plugin.\n. Nope, not hardcoded.\n\nPlease try this if you guys have time and let me know if it solves the problem for you:\n\n``` vim\nif has('mac') || has('macunix')\n    nmap <esc>[A <up>\n    nmap <esc>[B <down>\n    nmap <esc>[C <right>\n    nmap <esc>[D <left>\nendif\n```\n\nAlso, here's a possible external fix:\n\n> Go to your home directory, mine is at /Users/myname/\n> Open your .profile and add TERM=linux at the first line of the file.\n> Save and quit\n> Type source .profile and enter\n\nAnd from the comment:\n\n> For the record, if you find that your .profile file does not exist then just go ahead and create it and it should work fine (it did for me)\n\nSource: http://www.techiecorner.com/140/arrow-key-not-working-in-vi-vim-mac-os/\n. OK, I've pushed a fix to the dev branch: https://github.com/kien/ctrlp.vim/tree/develop\n\nLet me know if it works.\n\nThanks!\n. You mean using `nnoremap` instead of `nmap`? If it works I'll change it to `nnoremap` or `nn` for short.\n\nUnfortunately, there isn't any other way to fix this except disabling the `<esc>` key (buffer local) when in terminal.\n. OK I've pushed the latest changes to github, here's the relevant line with `nn` or `nnoremap`:\nhttps://github.com/kien/ctrlp.vim/blob/develop/autoload/ctrlp.vim#L673\n. Alright, I think this is a good enough workaround for this problem with ncurses, aside from doing it outside of Vim, or just not mapping `<esc>`. I'll go ahead and push this to master.\n\nIf anyone has any suggestion, feel free to comment.\n\nThanks everyone!\n. Also, I just want to clear this up, since @sorin-ionescu hinted toward it: this wasn't an issue caused by mapping keys with `nmap`, all the mappings in this plugin use `nnoremap` or `nn` from the get-go.\n. How do you think that? Can you explain how something like this can assume everyone uses a VT term? Honest question because I don't really see why:\n\n``` vim\nnn <buffer> <silent> <down> j\n```\n\nIt's just like your typical vimrc line. And it's basically what this plugin uses for every key.\n\nAlso, the workaround is this, which applies to both xterm\\* _and_ VT\\* terminals:\n\n``` vim\n    let lcmap = 'nn <buffer> <silent>'\n    if &term =~? 'xterm' || &term =~? '^vt'\n        for each in ['\\A <up>','\\B <down>','\\C <right>','\\D <left>']\n            exe lcmap.' <esc>['.each\n        endfor\n    endif\n```\n. I'm sorry but that doesn't even make sense, detect what automatically?\n\nAnd it's really not up to me, this is a known problem with Vim in terminal, and ncurses, a lot of results on Google. Yes, other people have run into it when using arrow keys, and the oldest mention of this I could find was from 2003.\n\nAlso, as I posted above, I didn't come up with the workaround myself either. This workaround and similar ones, have been around for as long as this issue has existed, many years.\n. After changing wildignore or any setting that can potentially filter the results, you'll need to clear the cache by running `:ClearAllCtrlPCaches`, or pressing `<F5>` if you already have ctrp-p opened.\n\nIf that doesn't work, let me know.\n. OK, this looks like it's because of the glob I use to search for dotfiles which is `.*`, it seems to ignore wildignore for these directories and files. I don't see a way to fix this without removing the dotfiles search functionality altogether.\n\nSo for now you'll have to use this instead:\n\n``` vim\nset wildignore+=*/.git/objects/*\n```\n\nI'll make some changes to the docs.\n. Also, thank you for reporting this. I've always had the `*/` for wildignore in my vimrc and just assumed that it'd work without it.\n. Good idea, thank you! I might as well make this an option for the user to change.\n. This has been added: https://github.com/kien/ctrlp.vim/blob/master/doc/ctrlp.txt#L210\n. Hi,\n\nCan you record the error messages next time this happens? And the task you're doing with it at the time, and let me know your Vim version, which OS etc...\n\nAlso, not sure if this helps, but you can try reducing the value of `g:ctrlp_max_files`, the default is 20000. Then use it like that for a while and see how it goes.\n\nThanks!\n. Closing this for now as too-vague and possibly-unrelated. Please feel free to reopen if you get more infos on this, and if anyone else has this problem as well.\n\nThanks!\n. You're right. But so far on Twitter I found only 1 segfault tweet by SteveLosh... and then in a reply someone else said this worked fine for him, assuming both people are on OSX.\n\nWell, since I can't reproduce this, I doubt I can do much about it. I'll try to reduce the plugin's footprint as much as possible, but that's pretty much it. Just use what you like and what works for you.\n. That's great. Thank you! This just prompted me to check all the type() instances.\n. That sounds like something I might use myself, too. So yes, I'll consider adding it once I have some more free time.\n\nThanks for the suggestion!\n. This has been added and is on the dev branch: https://github.com/kien/ctrlp.vim/tree/develop\n\nLet me know what you think.\n. Yep, I thought about clearing the cache automatically as well, but if the parent directory is large this might take too long, and if the user wants to force an update they can just use `<F5>`. I'll look into adding the new entry to the cache.\n\nPartial matching of dir names is problematic, I think. e.g. a dir name like `data` can be matched against existing `data`, `database`, `mydata` or `death_note_abc` etc... and they all can be anywhere in the dir tree or all at the root, with no way to tell which is the one the user really wants. So if you have an idea for this, let me know.\n. Pushed to master. New entry's added to the cache on-the-fly.\n\nThank you for the suggestions! Closing for now.\n. It's working for me. It doesn't work if you just execute that in the command line, though. So you'll need to put that into your .vimrc and restart Vim.\n\nAlso, with the current version, you can now use `:ResetCtrlP` after changing the options (from the command line) to update them without restarting Vim. You still need to put them into .vimrc if you want to keep them permanently, though.\n. Hi,\n\nCan you rephrase that? I'm not sure I understand what you mean. But if I get it right, then you need to change the `g:ctrlp_persistent_input` option. Set it to 0 to clear the value in the input field each time CtrlP is called.\n\ne.g. add this line to your .vimrc:\n\n``` vim\nlet g:ctrlp_persistent_input = 0\n```\n. I'm sorry, I still don't understand what the problem is.\n\n> So, if I press ctrlp (ctrlp is still active) instead to activate the old one try (giving some errors) to open a new instance.\n\nCtrlP is supposed to close each time you open a file from it, or simply move away from the CtrlP window will trigger it to close. \nDoes it do that for you?\n. That sounds like `<esc>` isn't working. Can you use `<c-c>` or `<c-g>` (CTRL-C or CTRL-G) to close CtrlP?\n\nAlso, are you using Vim in terminal or are you using gVim/MacVim?\n. What does it show when you run `:echo &term` from Vim's command line? And what OS are you on?\n. This is a really odd behavior and most likely has something to do with the [control sequences](http://www.xfree86.org/current/ctlseqs.html) in terminal (again). So maybe I'll install iTerm and try something out. But for the mean time, I guess you'll just have to use `<c-c>` or `<c-g>` to exit CtrlP.\n. OK, I tried to reproduce this with iTerm 1.0 and Vim 7.2 on Snow Leopard but couldn't; `<esc>` seemed to work fine in both situations, matches and no matches. I guess there's something else in your setup interfering with the `<esc>` key.\n\nSo if you don't mind, can you capture the error message like this?\n1. Run `:redir @a` (redirect to register `a`)\n2. Call CtrlP and try to reproduce the error with `<esc>` and \"no matches\".\n3. Exit CtrlP with `<c-c>` or `<c-g>`\n4. Run `:redir END`\n5. Get the content from register `a` with `\"ap` and post it here.\n. Closing this for now as `unreproducible` and since it's a minor issue.\n. Does BundleInstall work if you set it to `set wildignore+=.git/*,.hg/*,.svn/*`? (without the preceding `*/`)\n. You mean a history of the strings entered in the prompt?\n. Hmm... I usually only type a few characters (4- 5) to find what I want. So I'm not sure a history of these short strings would be really beneficial. Besides, there's already the `g:ctrlp_persistent_input` (remember the last string) option.\n. Come to think about it, Vim's command line also has a history which I use quite often. So maybe I'll add this (as a history of accepted input strings) and reassign `<c-n>` and `<c-p>` to it, just like the default mappings in the command line.\n. This has been [added](https://github.com/kien/ctrlp.vim/commit/0158e6406a3c40bdf512473d621465408b3fbfd7#L1R260). Thanks!\n. Hi,\n\nDoes the problem occur if you don't use symbolic link for `dir`? Also, can you force close ctrlp using `<c-c>` or `<c-g>` when the problem happens?\n\nAnyway, I'll track this down and try to fix it once I'm little less busy. Thank you for reporting this and providing the infos!\n. Yes, you're correct, I did some tests earlier and noticed that as well. For some reason `bufwinnr()` returns -1 after using `..`. The weird thing's that it only does that in Vim 7.2, but not in 7.3 and 7.0.\n. That's awesome! Thank you!\n\nA simple fix is this, since we kind of need that `chdir` line now for the `..` cmd. Let me know if it works for you:\n\n``` vim\nif exists('a:2') || ( bufnum > 0 && bufwinnr(buf) > 0 )\n```\n. Oh I already fixed that in my working version. This should do the trick:\n\n``` vim\ntry\n    bun!\ncatch\n    winc c\nendtry\n```\n\nAnyway, I think there should be a better way to solve the problem with `bufwinnr()`, since we need that `bufwinnr()` check to close CtrlP in case an user calls another instance of it while still inside the prompt. I'll try to come up with something once I'm done with some works here.\n. I've pushed a fix to the dev branch: https://github.com/kien/ctrlp.vim/tree/develop\n\nLet me know how that works for you.\n. Pushed to master. Thank you again for all the help!\n. Looks like the # and % need to be escaped since they are special chars. I've pushed a fix to the dev branch:\nhttps://github.com/kien/ctrlp.vim/tree/develop\n\nLet me know if it works for you.\n. This has been pushed to master.\n\nThank you for reporting!\n. This sounds interesting. I'm not sure how marking the files would work, though. Also, because the listed files are matches of the same pattern, it might not be very useful.\n. I got a few ideas of how this could work but so far all seem pretty clunky. I'll definitely give this a shot, though.\n. Added to the [dev branch](https://github.com/kien/ctrlp.vim/tree/develop). Let me know what you think.\n\nUsage: `<c-z>` to mark/unmark files, `<c-o>` to open them.\n. I just went ahead and pushed this to master. Thank you for suggesting this feature!\n. Awesome, thank you for donating time! I'll check it out and see what's best (probably will just integrate it instead of merging).\n. OK, looks like adding a new option for this is a little unnecessary. Also, `hg locate` returns the paths of the files relative to the repo's root, this will make opening files fail when user is in a subdir of the repo and `g:ctrlp_working_path_mode` is set to 1. `git ls-files` seems to work perfectly everywhere.\n\nI think I'll just add a few lines in the doc for these commands and how to set them up correctly.\n\nThanks!\n. Using `--fullpath` with `hg locate` will return paths with mixed `\\` and `/` on Windows and makes opening files fail. I see your point, though, so I'll definitely try to find a fix for this and make it work.\n. [Let me know how this works](https://github.com/kien/ctrlp.vim/commit/000742dc0fb7f15e3cbfb62b13852a13b2b35966). Instead of hardcoding the commands, this will allow people to use something other than just hg, git or svn.\n. Sorry about that, I forgot to do a check for a:1 after removing another FindRoot call. Just pushed a fix.\n\nThank you for reporting!\n. Thank you! I'll add a note to the doc about this.\n. You can put either `set autowriteall` or `set hidden` in your vimrc to avoid this issue. There's some more info at `:help edit_f`. I'll add a warning to ctrlp. Thanks for the heads up!\n. Nope, I just use `:hide` when opening a file in the same window. The effect is the same as having `set hidden`.\n. This is actually a feature to prevent opening the same file twice by mistake. I'll add an option to toggle it. Thanks for the heads up!\n. It's `g:ctrlp_switch_buffer`.\n. That map will clear all caches every time CtrlP starts. If you want that behavior, you can simply put this into your vimrc:\n\n``` vim\nlet g:ctrlp_use_caching = 0\n```\n\nIt's practically the same.\n. You can use `<F5>` inside CtrlP to clear the cache at anytime, so I think having an extra mapping to do basically the same thing is not necessary. Thanks for the suggestion, though!\n. Sounds like globpath() chokes on these volumes. So I think your best bet would be using `g:ctrlp_user_command` and set an external tool to use for listing files.\n\nYou can check `:help g:ctrlp_user_command` for the syntax.\n. It's because ctrlp currently prepends the opening cmds with `:botright`. There's no special reason to it, just my personal preference (it helps breaking the new window out of special buffers and narrow windows). I'll remove it and let the user decides. Thanks!\n. Thanks! But when searching for a keyword I often use something like `/bo\\>`. So it's not really a problem.\n. This has been resolved since v1.5.4. If `hidden` and `autowriteall` are off, Vim will show a Yes/No/Cancel prompt asking to save the buffer. Let me know if it still doesn't do that for you. Thanks!\n. Just added a save dialog. If Yes: save the buffer and open the new file in current window, if No: open in a new split, If Cancel: do nothing.\n\nLet me know how that works.\nThanks!\n. Just pushed a fix, let me know how that works. I think I explicitly tested this but a few versions back. Thanks for the heads up!\n. Yup, I've made it very simple to add extensions to ctrlp. Everything you need to know is [here](https://github.com/kien/ctrlp.vim/blob/extensions/autoload/ctrlp/sample.vim).\n\nBut I guess it's unlikely that someone will do this, so I'll give it a shot once I have some more free time.\n\nThanks for the suggestion!\n. Added along with another extension for quickfix. You can enable it with:\n\n``` vim\nlet g:ctrlp_extensions = ['tag']\n```\n\nStart in tag mode with `:CtrlPTag`.\n\nIf you find any problem or see anything that can be improved, let me know.\n\nThanks!\n. c3b316a should take care of the updatetime complaint from easytags.\n\nThis tag extension only looks for tags files defined with the Vim's `tags` option. So you'll need to include the name and location of the tags file generated by easytags in this option. Try something like this for your vimrc:\n\n``` vim\nlet &tags .= ','.vim_tmp.'/easytags'\n```\n. Assuming that the `tags` option is changed each time you switch to a different filetype, then I think pressing `<F5>` will update the results. Can you test that and let me know if it helps at all?\n. Let know me know how a4b8d4c works?\n\nThanks!\n. Do `:echo tagfiles()` and `:echo taglist('.*')` return anything before and\nafter running `:CtrlPTag`? What's the output of `:echo tagfiles()`?\n. I was able to reproduce this by setting path_mode to 0. However, it should\nstill work with absolute path like\n/tmp/.graudeejs/.vim/easytags/vim but somehow doesn't in your case.\n\nI'll investigate further and try to find a fix soon.\n\nOn Tue, Nov 29, 2011 at 2:14 AM, Aldis Berjoza <\nreply@reply.github.com\n\n> wrote:\n> \n> On Mon, 28 Nov 2011 10:42:27 -0800\n> kien\n> reply@reply.github.com\n> wrote:\n> \n> > Do `:echo tagfiles()` and `:echo taglist('.*')` return anything\n> > before and after running `:CtrlPTag`? What's the output of `:echo\n> > tagfiles()`?\n> > \n> > ---\n> > \n> > Reply to this email directly or view it on GitHub:\n> > https://github.com/kien/ctrlp.vim/issues/27#issuecomment-2904997\n> \n> `:echo tagfiles()` returns `['/tmp/.graudeejs/.vim/easytags/vim']`\n> Which is correct. After running `:CtrlPTag` output is the same.\n> \n> `:echo taglist('.*')` before and after return massive array of\n> dictionaries with tags\n> \n> ```\n> [{'cmd': '/^map ,$ <plug>NERDCommenterToEOL$/', 'static': 0, 'name':\n> ',$', 'language': 'Vim', 'kind': 'm', 'filename': '/home/graudeejs/\n> .vim/vimrc'},...\n> ```\n> \n> ## \n> \n> Aldis Berjoza\n>  http://www.bsdroot.lv/\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/kien/ctrlp.vim/issues/27#issuecomment-2905536\n. Let me know how the new commit works. Thanks!\n\nAs for filtering duplicates, the :tag command already kind of does this, it\njumps to the first matching tag if there are several ones. Manually\nfiltering the tags list can be costly, and probably too much for the few\ntimes it actually catches something.\n\nKien\n\nOn Tue, Nov 29, 2011 at 2:35 AM, Aldis Berjoza <\nreply@reply.github.com\n\n> wrote:\n> \n> I disabled EasyTags (removed plugin) and manyally set tags path to\n> /tmp/.graudeejs/.vim/easytags/vim with\n> \n> ```\n> :set tags+=/tmp/.graudeejs/.vim/easytags/vim\n> ```\n> \n> and CtrlPTag works.\n> \n> Btw, I have suggestion:\n> tagfile might contain duplicates, so you should (somehow) filter these out\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/kien/ctrlp.vim/issues/27#issuecomment-2905920\n. That'll require some non-trivial changes in how ctrlp does the whole pattern matching. Sounds really cool though, so I'll definitely look into it. As for seaching tags in current buffer, it's much more complicated, and I think tagbar and taglist already do it and do it better, so I probably won't make this.\n\n@claytron: Can you let me know how it works for you now?\n\nThanks!\n. Can you provide steps to reproduce the \"Tag not found\" error?\n\nFor the caching, I'll use something other than just checking for filenames.\n. Good idea, I'll try that.\n\nMy guess is that easytags changes the results returned by `tagfiles()` when\nswitching to a new buffer, hence the tags files are not found when CtrlPTag\ntrying to run `:tag`. So there's an option to not create a new buffer/split\nor tab (i.e how fuzzyfinder does it).\n\nAnyway, thanks for your time!\n\nOn Tue, Nov 29, 2011 at 2:42 PM, Aldis Berjoza <\nreply@reply.github.com\n\n> wrote:\n> \n> For sake of environment differences I suggest you take my vim config\n> (clone, cd ~/.vim && make)\n> \n> ```\n> rm -f ~/tmp/.vim/eazytags/*\n>  cd ~/.vim\n> vim vimrc\n> ```\n> \n> Wait 4-5 seconds for EasyTags to generate tags\n> now when you open CtrlPTag select tag and press Enter it will show \"Tag\n> not found\" error.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/kien/ctrlp.vim/issues/27#issuecomment-2919943\n. I see. Well, give me a couple of days I'll try adding persistent caching to\nthis and see if it helps, since the taglist() function seems to be much\nslower than readfile().\n\nOn Tue, Nov 29, 2011 at 8:00 PM, Clayton Parker <\nreply@reply.github.com\n\n> wrote:\n> \n> @kien I don't think it can handle the size of my tags file:\n> \n>    $ wc -l tags\n>      144321 tags\n> \n> I can let it run for a while to see how long it takes to complete. But\n> right now it isn't usable for that many tags.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/kien/ctrlp.vim/issues/27#issuecomment-2929461\n. Sure, I'm listening!\n\nOn Tue, Nov 29, 2011 at 9:09 PM, Aldis Berjoza <\nreply@reply.github.com\n\n> wrote:\n> \n> @kied..... CtrlPTag really needs to show tags of current file by default.\n> \n> I don't think it would be hard to implement (want me to give some ideas?)\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/kien/ctrlp.vim/issues/27#issuecomment-2930218\n. @claytron: How does it work for you now? In addition to adding persistent caching, I also remove `taglist()` altogether and use `readfile()` for everything.\n\n@graudeejs: That could potentially lead to listing the wrong tags from the wrong file, and would be much slower than using ctags, for example. As for the problem with multiple tags with the same name, tag.vim now uses the tag-matchlist commands as a workaround.\n. It only does that if there's at least one other tag with the same name (there are 2 'index' in your case).\n\nThis should be good enough for now, as using the filename to identify the tag isn't reliable.\n. For people who don't use easytags and have more than one tag file, the filenames can also be the same, as their locations are relative to the tags files.\n\nIt's like this:\n\n```\ndir_a\n|- file.ext\n`- tags (path to file is 'file.ext')\n\ndir_b\n|- file.ext\n`- tags (path to file is also 'file.ext')\n```\n\nAnd the tags option:\n\n``` vim\nset tags+=./dir_a/tags,./dir_b/tags\n```\n\nThe listing would look like this:\n\n```\n'mytag'    file.ext\n'mytag'    file.ext\n```\n\nSo unless I'm missing something, there's no easy way out but using tag-matchlist.\n. It should be much faster now. I did a few tests with a tags file that has 200000 tags and it seemed to work reasonably well. There are probably a few ugly trade-offs, but at least it loads up in this extreme case.\n\nI also added a tag-count finder, with it you only get the matchlist prompt when the tags are actually identical.\n. Closing this as it's gotten really long and the main issues have been resolved.\n\nThanks everyone for the feedbacks!\n\nLastly, just to clarify, you also get the matchlist prompt (see in @graudeejs' [screenshot](http://failiem.lv/thumb_show.php?i=svvoeax&n=not_so_good.jpg)) with `:FufTag` when jumping to a tag that has duplications. This is the default behavior of `:tjump` and `:stjump`. `:FufTag` just hides the duplications so that you don't know they are there, but if you select one, it'll show that prompt.\n\nSo what the tag-count finder does here is it helps switching to the `:tag` command when possible (differences in path/filename), since the `:tag` command accepts a count argument. And with this, the prompt only shows up in the rare cases where the duplicate tags have the same filename.\n. The `s:normcmd()` is there to do exactly that, preventing the new buffer being opened in windows created by plugins. These windows are often small or very small (NERDTree, Gundo, MiniBufExpl ...) and user obviously doesn't want them to be replaced by mistake.\n\nBut it looks like netrw is an exception, so I think I'll add an option to force `:e` for some plugins.\n. Just added an option for this. You can use this to add some exceptions to `s:normcmd()`:\n\n``` vim\nlet g:ctrlp_dont_split = ['Netrw']\n```\n\nLet me know how that works for you.\n. I extended the option to include filetype as well. Let me know how this works:\n\n``` vim\nlet g:ctrlp_dont_split = 'netrw'\n```\n. The parent directory is the directory where an object is located, or that's how it's generally understood.\n\nSo for most people, `/some/path/to` is the parent directory and `/some/path` is the nearest ancestor.\n. Thank you! This has been added. The only difference is `/` and `\\` work like `..` instead of updating on-the-fly.\n. Added. Thank you!\n. `/` or `\\` can be used to search in subdirs. Also, `/` or `\\`  may be accidentally hit and if the project root's large and not yet scanned, it'll result in a long wait.\n. If you type a continuous part of the filename like that then quickly pressing `<c-r>` and/or `<c-d>` will help bringing up more accurate results.\n\nI can make it work better by default but the performance impact will be too big on large projects. Vim's very slow when it comes to searching in large lists, a few thousand items and it starts getting noticeable.\n. Thanks! But I don't think this should be a default behavior. `s:maxfiles` is the max number of files to scan for initially, the default is 20000. It can also be set to 0 for no-limit.\n\nIf you want to see more results, simply changing maxheight will be best. There's really no differences between that and limiting the maxheight yet showing more results (which you have to scroll to see them).\n\n**Edit:** Actually, using `s:maxfiles` also causes the startup time to skyrocket if the root dir is large, so it's probably not a good idea.\n. I think that's exactly the idea, if there are more results than needed to display then the extras should be removed.\n. I think I had this same idea when writing prompt.vim (which eventually evolved into ctrlp.vim). There was also a partial implementation as the now removed `ctrlp_live_update` option and the `<c-^>` mapping. I thought it was a little bit inconvenient to have to wait or hit something for the list to update.\n\nBut I see your point, so I'll definitely give this another try.\n\nThanks!\n. Added. You can enable/disable it or set the delay time with this option:\n\n``` vim\nlet  g:ctrlp_lazy_update = 0\n```\n\nThe default delay time is 250ms.\n. The tricky part with using the previous result for subsequent filtering, is that the input string can be edited in different ways that make the previous result irrelevant. For example when using`<del>` `<bs>` `<c-w>`... in the middle of the previous string. So after a number of searches, there'll be nothing left to search.\n. Closing this as the logic has actually already been used (although differently) and only triggered when the number of items found is less than max_height.\n\nBut regardless, thank you for suggesting!\n. I don't think there's a good enough reason to have a new option for this. The only difference with using a larger max_height is that with this you don't see everything printed in the ctrlp buffer and need to scroll. Also, ctrlp restores the view after closing and you can't do anything else while it's open anyway (else it closes), so there's very little point in saving screen real-estate.\n. It's kind of a limitation. The larger the project the less accurate this\ngets.\n\nAs to how to remedy it, you can enter regex mode with <c-r> and search for\nthe literal user.rb using user.rb as the input.\n\nOn Wed, Nov 30, 2011 at 12:46 AM, Ben Mills <\nreply@reply.github.com\n\n> wrote:\n> \n> I've been trying to use ctrlp at work and on our main large project (a\n> rails project) I try to find \"user.rb\" and it matches things like\n> \"app/controllers/status_controller.rb\".\n> \n> Is this a config issue on my end or an actual bug?\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/kien/ctrlp.vim/issues/40\n. Pulled.\n\nThank you!\n. Added in my local version and will be available in the next commit.\n\nThanks!\n. I can't reproduce this. I tested in both gVim and terminal Vim on Linux and Windows, the content of `\"` stays the same before and after opening a file.\n\nThis is rather odd because the only register that CtrlP touches is `v` and it gets restored after `gv\"vy`. There's nothing that does anything with the `\"` register.\n\nCan you consistently reproduce this? Does it happens if you comment out the `gv\"vy` line?\n\nAlso, try loading a minimal vimrc with no other plugin and see if it still happens:\n\n``` vim\nvim --noplugin -u {path/to/a/simple/.vimrc}\n```\n\nAnd have only this line in the above vimrc:\n\n``` vim\nse nocp\nruntime! plugin/ctrlp.vim\n```\n\nJust make sure the parent directory of `plugin/` is in your runtimepath, for example ~/.vim or $HOME/vimfiles.\n. No, you're correct. I didn't know it does that. I'll push a fix soon.\n\nThanks for reporting this!\n. `<bs>` should delete the character. Are you using console Vim on Windows?\n. It happens with console Vim on Windows for me but works fine on Linux and OSX. Also, mapping delete to a different key works, so it's probably something with the `<bs>` key.\n. Looks like this is because `<c-h>` is mapped for moving `left`, while `<c-h>` is the Vim's keystroke for `<bs>` (like `<c-m>` for `<cr>`). The odd thing is that this seems to behave inconsistently between different Vim builds.\n\nSo the workaround is to not map `<c-h>` to left movement but instead to backspace. You can add something like this to your vimrc:\n\n``` vim\nlet g:ctrlp_prompt_mappings = {\n    \\ 'PrtBS()': ['<c-h>'],\n    \\ 'PrtCurLeft()': ['<left>'],\n    \\ }\n```\n\nIf you don't want to use `<left>`, just choose something else.\n. Nope, it loads instantly for me. There hasn't been any report of slow startup time either.\n\nCan you reproduce it with minimal configuration? Try starting vim with this:\n\n```\nvim --noplugin -u path/to/a/simple/.vimrc\n```\n\nAnd this as the content of the above .vimrc:\n\n``` vim\nset nocp\nruntime! plugin/ctrlp.vim\n```\n\nJust make sure the parent dir of `plugin` is in your runtimepath, for example ~/.vim or $HOME\\vimfiles.\n\nIf it doesn't happen in this case, then maybe you can help me tracking down whatever is interfering with ctrlp by commenting out parts of your .vimrc. It might be an autocmd or something that does stuff when a new buffer/window is opened/created.\n. Pulled.\n\nThank you!\n. Nope, it's hard to tell which directory is \"troublesome\" without indexing it first.\n\nYou'll just have to wait for it to finish while having this in your .vimrc:\n\n``` vim\nlet g:ctrlp_clear_cache_on_exit = 0\n```\n\nThis will tell ctrlp to keep the cache when exiting Vim.\n. Not sure if I want to have yet another option. Since enabling cross-sessions caching already solves this problem. And using the global `wildignore` for this is probably out of the question.\n. Works fine for me on Linux and Windows, haven't tried OSX yet:\n\n![accented](http://i.imgur.com/vSIze.png)\n\nWhat Vim version are you using? If it's 7.0 or 7.1 then you'll just need to upgrade Vim.\n. Does it work if you have this in your .vimrc?\n\n``` vim\nset termencoding=utf-8\nset encoding=utf-8\n```\n\nIt works for me on OSX (oddly only after a system restart):\n\n![OSX](http://i.imgur.com/aVg93.png)\n. It looks like the problem is with Vim's `globpath()` not expanding the path correctly when the path has one of those characters. I'm not 100% sure, though.\n\nI think you'll have to use the `g:ctrlp_user_command` option to get the list of files instead. You can add this to your .vimrc:\n\n``` vim\nlet g:ctrlp_user_command = 'find %s -type f'\n```\n\nOr this to filter files that you don't want to be listed:\n\n``` vim\nlet g:ctrlp_user_command = \"find %s -type f | egrep -v '\\.(swp|swo|log|gitkep|keepme|so|o)$'\"\n```\n\nLet me know how that works.\n. @marttt: that's a different issue and it's a known limitation of the ctrlp prompt. But if you update ctrlp to the latest, you can set the `g:ctrlp_key_loop` option to allow typing of accented characters. See `:help g:ctrlp_key_loop` for more details.\n. You can enable tag search with this option:\n\n``` vim\nlet g:ctrlp_extensions = ['tag']\n```\n\nThen use `:CtrlPTag` to open ctrlp in tag mode.\n. Filtering those will slow CtrlPTag down when the tag file's large. It was what this extension did in an earlier version.\n\nI'll see if I can add the filter back without slowing it down too much.\n. Let me know how [the latest commit](https://github.com/kien/ctrlp.vim/commit/bf03741650aae253b9fbfdb5526d6a7b818a060d) works for you.\n\nNo idea if there's an option for ctags, but I think it shouldn't matter. Some users might actually want to have those tags in their tag files.\n. It's because of the `globpath()` function. No way to work around I'm afraid.\n\nIf you run `:echo globpath(getcwd(), '*/')` for example, it always shows the directory if using the `wildignore+=cache/*` format.\n. I already have a gitignore file locally. I'll add this to it myself and commit later.\n\nThanks!\n. Same questions as for your other issue. There hasn't been any such report of this. The mappings are very straight forward, it only adds `:` if you (or something in your configuration) type `:`. Do you map anything to `:` globally?\n\nAlso, let me know your Vim version and OS.\n\nThanks!\n. I see. Then please provide some details for your other issue. I'm closing\nthis one now as it's related to the other.\n\nThanks!\n\nOn Sat, Dec 17, 2011 at 1:26 AM, gjunkie <\nreply@reply.github.com\n\n> wrote:\n> \n> I don't map anything to it globally. I've tried to reproduce the issue and\n> have been unable to, so this may have been an offshoot. Though I can say\n> that it happened while the other issue was happening as well with slow\n> performance.\n> \n> VIM: 7.3.87\n> Mac OS X 10.7.2\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/kien/ctrlp.vim/issues/54#issuecomment-3180782\n. This sounds like a problem with Vim & your configuration. In any case, please provide some details: What type of file do you have in the other buffer? How do you invoke ctrlp? Does it happen consistently? Does it happen with minimal configuration?\n\nYou can try starting Vim with this:\n\n```\nvim --noplugin -u path/to/a/simple/.vimrc\n```\n\nUse this as the content of the above .vimrc:\n\n``` vim\nse nocp\nruntime! plugin/ctrlp.vim\n```\n\nMake sure the parent dir of `plugin` is in your runtimepath, for example ~/.vim or $HOME\\vimfiles.\n\nThen try to reproduce the problem.\n. Temporarily closing this one now for lack of information, and because it's probably unfixable within the plugin.\n. Thank you! But this makes `<c-t>` work exactly like `<cr>` when jump_to_buffer = 2, is that what you want? And when jump_to_buffer = 1, `<c-t>` just opens a new tab as usual.\n\nAlso, I actually mean to have the `&& md == 'e'` condition there to limit it to just `<cr>` and not any other mapping. When users use `<c-x>, <c-v>, <c-t>`, they might really want to open the file in a new tab or new split, regardless of the current value of jump_to_buffer.\n. Pulled. And I took the opportunity to make this feature a little more robust. Let me know if you find any problem.\n. Added. The new option is `g:ctrlp_cmd`.\n\nThanks for the suggestion!\n. Also added. Thanks for the suggestion!\n\nThe new option is `g:ctrlp_custom_ignore`. Let me know how it works for you.\n. @fourcolors I'll need some details. What mode are you trying to use the custom ignore for (I suppose Files) and what exactly are you trying to ignore? Have you cleared the cache or restarted Vim? Delete the cache directory if you aren't sure.\n. Did you press `<F5>` in CtrlP or run `:CtrlPClearAllCaches` to clear the cache? If you want to be sure, delete the `.cache/ctrlp` dir in your home dir.\n. Pulled to my local repo. I'll push it out with the next batch of changes.\n\nThank you!\n. Thank you! I'm aware of this. It's mentioned in the docs [here](https://github.com/kien/ctrlp.vim/blob/7ccb62b28b02d63feb37b763e0c25e915b0dd10d/doc/ctrlp.txt#L160) in response to issue #45.\n\nI think what I'm going to do now is just add the workaround to the script and get rid of that note altogether.\n. Hi Paul,\n\nThere's a custom ignore option you can use: [g:ctrlp_custom_ignore](https://github.com/kien/ctrlp.vim/blob/7ccb62b28b02d63feb37b763e0c25e915b0dd10d/doc/ctrlp.txt#L213)\n\nRegarding the wildignore issue, some people may have `.git` in their wildignore and not just for ctrlp. In that case, it still breaks fugitive and there's nothing I can do to help it.\n. Yes, certainly.\n\nThanks!\n. Thank you! This should be fixed now.\n. Should be fixed now. Thanks!\n. The current implementation of the MRU list is similar to that of desktop applications. Changing it to recently-entered is simple, having this in your .vimrc will do:\n\n``` vim\nau BufEnter * cal ctrlp#mrufiles#list(expand('<abuf>', 1))\n```\n\nI'll keep it in mine for a bit and see if it should be the default.\n. Oh I see. But the buffer list actually isn't fixed, it's sorted according to multiple criteria (not the first opened time). I won't change this as it would overlap the MRU list's functionality.\n. Thanks, guys! I appreciate it more than you know.\n. Reopening this so more people will see it. Also, thank you again for helping to track down the bugs in this feature!\n. Nope, it only accepts `t`, `h` or `v` and `<c-o>` only reuses a window if it's empty and is the only one in a tab.\n\nI'll see if I can rewrite the open function to allow a new option value.\n. `<c-o>` should be a bit smarter now. No new tab will be created unless `t` is used. For `h` and `v`, if the active buffer belongs to a plugin or is a help or quickfix window, `<c-o>` will try to find a normal buffer and split it, unless there's an empty window then it'll be used instead.\n\nThe new values for ctrlp_open_multi are `tr`, `hr`, `vr`. They work just like `t`, `h`, `v` with the exception of the first selected file replacing the active buffer in the current window. The logic above also applies.\n. OK, you can now do that by using `tr`, `hr` or `vr` without giving a number. `t`, `h` and `v` without a number work, too, but the first file will be opened in a new split or new tab (then the rest hidden).\n\nSo this will do what you want:\n\n``` vim\nlet g:ctrlp_open_multi = 'vr'\n```\n. OK, this looks serious. But I doubt using pathogen would cause any problem. Almost everyone uses some sort of plugin/runtimepath manager nowaday, and this is the first report of these errors.\n\nDo you mind posting the output of `:version`?\n. Ok, could you try starting Vim with this?\n\n```\nmvim --noplugin -u ~/simple_vimrc\n```\n\nAnd this for the simple_vimrc, make sure plugin/ctrlp.vim is in your runtimepath:\n\n``` vim\nset nocp\nruntime! plugin/ctrlp.vim\n```\n\nThen activate ctrlp with `:CtrlP`, `:CtrlPBuffer` and `:CtrlPMRU`.\n- If all of them works, try disabling parts of your Vim configuration (plugins, .vimrcs) to isolate the problem.\n- If it only happens with the `:CtrlP` command, then put this into the simple_vimrc and try again:\n  \n  ``` vim\n  let g:ctrlp_user_command = 'find %s -type f'\n  ```\n- But if none of the above helps, then I guess I'll just have to live with this. Can't fix if I can't reproduce it. It also seems to be a long standing problem with MacVim that happens seemingly out of nowhere:\n  http://vim.1045645.n5.nabble.com/MacVim-app-snapshot-22-td1215494i20.html\n\nAlso, sorry for the late reply! I wanted to wait a bit and see if there was anyone else with the same problem that could provide a solution or informations.\n. Yep, the counter isn't real time so when hitting a large directory, it stops at the last number. It looks like it hangs, but if you can use `<c-c>` to stop it, then it's probably still scanning.\n\nAs for speeding up this initial build, you can try disabling dotfiles scanning `g:ctrlp_dotfiles = 0`, enable cross-session caching `g:ctrlp_clear_cache_on_exit = 0`, and add some ignore rules to ignore the generated files.\nNote that using wildignore is faster than using the [custom_ignore](https://github.com/kien/ctrlp.vim/blob/93cb20dbfbab723e1557801469ae70f4f46499da/doc/ctrlp.txt#L232) option, since this option can only be applied _after_ the scan is finished.\n\nI'm going to close this now. If you encounter the crash again, try using OSX's `find` to get the list of files through the [user_command](https://github.com/kien/ctrlp.vim/blob/93cb20dbfbab723e1557801469ae70f4f46499da/doc/ctrlp.txt#L263) option. And please feel free to reopen/comment on this.\n. I don't know what's going on in the background but from this old conversation, it might have something to do with MacVim itself and OSX: http://vim.1045645.n5.nabble.com/MacVim-app-snapshot-22-td1215494i20.html\n\nBut you can always try disabling your plugins to see if the error is plugin related.\n. This is because the ctags plugin changes Vim's  `laststatus` option upon `BufEnter` and `BufLeave`, while you have `set laststatus=0` somewhere in your .vimrc. Changing the value of `laststatus` to 2 will fix this.\n\nI won't try to make a workaround for this in ctrlp as it'll lead to a slippery slope of never-ending workarounds.\n. Sorry, my mistake, `set laststatus=1` also makes the problem appear. And `=1` is Vim's default. I tested earlier with 2 splits so `=1` was the same as `=2` (both worked fine).\n\nAlso, the source of this incompatibility is from using `winrestcmd()` to restore the window layout.\n. 34aa84e should solve this problem by using `:noautocmd` to open the ctrlp buffer. I hesitated to use it until now because using this command will make it not possible for users to interact with the ctrlp buffer via autocmds. For example, after this commit, the vim-powerline plugin won't be able to apply a custom statusline to ctrlp via BufEnter.\n\nAlso, speaking of statusline, this should also fix the incompatibility between ctags.vim and ctrlp (issue #73).\n. There's a hard limit for matching only tag names. But this was unintentional. It should be fixed now.\n\nThanks for reporting!\n. @claytron: I just removed the hard limit for partial matching. It should work for you now as well.\n. Nope, not yet. But it sounds like it could be a nice improvement to `<c-y>`, so I'll definitely look into it.\n\nThanks!\n. With the recent changes, there are now 2 ways of doing this. Number 2's more in line with what you want, but 1's faster with deep directories:\n\n**1)** Using `<c-z>` to mark a file and use its path as the base dir:\n\n```\n<c-p><c-d>filetxt<c-z><c-u>New Article/article.txt<c-y>\n|    |    |      |    |    |\n|    |    |      |    |    `- start creating the new dir and file\n|    |    |      |    `- clear the prompt\n|    |    |      `- mark it to get its parent dirs: content/articles\n|    |    `- find a file in content/articles/\n|    `- switch to matching only filename\n`- start ctrlp\n```\n\n**2)** Using `<tab>` to auto-complete each directory:\n\n```\n<c-p>co<tab>ar<tab>New Article/article.txt<c-y>\n|    | |    | |    |\n|    | |    | |    `- start creating the new dir and file\n|    | |    | `- auto-complete it to articles/ if possible\n|    | |    `- type the first chars of articles/\n|    | `- auto-complete it to content/ if possible\n|    `- type the first chars of content/\n`- start ctrlp\n```\n\nThat is it, for now. If you find any problem or have any quesion, let me know.\n\nThanks!\n. Fixed. Broken in e42bb4c.\n. Yes, this is a feature and there's [an option to override it](https://github.com/kien/ctrlp.vim/blob/420174fc537ba986a716964db7af0bd189252944/doc/ctrlp.txt#L328).\n\nSo for nerdtree you can use this:\n\n``` vim\nlet g:ctrlp_dont_split = 'nerdtree'\n```\n. It works fine for me on Windows and Linux. Not sure if anything could interfere with this.\n\nDoes anything in `.git` show? How about without the dollar signs? Or just using a forward slash at the end like this: `'\\.yardoc/'`?\n. You could try starting Vim with only ctrlp and nothing else. So start Vim with something like this:\n\n``` vim\nvim --noplugin -u path/to/a/simple/.vimrc\n```\n\nAnd inside that .vimrc:\n\n``` vim\nset nocp\nruntime! plugin/ctrlp.vim\nlet g:ctrlp_custom_ignore = {\n  \\ 'dir':  '\\.git$\\|\\.hg$\\|\\.svn$\\|\\.yardoc$',\n  \\ 'file': '\\.exe$\\|\\.so$\\|\\.dat$'\n  \\ }\n```\n\nJust make sure `plugin/` is in your runtimepath, for example in `~/.vim`.\n\nIf it works in this case, then you could try commenting out parts of your .vimrc, disabling plugins etc...\n\nAlso, this ctrlp_custom_ignore option doesn't work with the ctrlp_user_command option.\n. Does `wildignore` work for you then? The option would look like this:\n\n``` vim\nset wildignore+=*/.git/*,*/.hg/*,*/.svn/*,*/.yardoc/*,*.exe,*.so,*.dat\n```\n\nAlso, could you try these out, just in case the returned directories end with a `/`?\n\n``` vim\nlet g:ctrlp_custom_ignore = {\n  \\ 'dir':  '\\.yardoc/',\n  \\ }\n\n\" Or this:\nlet g:ctrlp_custom_ignore = {\n  \\ 'dir':  '\\.yardoc',\n  \\ }\n```\n\nAnd before starting up ctrlp, run `:echo g:ctrlp_custom_ignore` to see if it's there.\n. Press `<F5>` in ctrlp to clear the cache. If you switch branches a lot and don't mind the scanning, just disable caching with `let g:ctrlp_use_caching = 0`.\n. @wmayner this wasn't actually an issue. The custom_ignore option has been pretty much bug-free since introduced. So I suggest double checking everything. Making sure the cache files are deleted, you're not using the default user_command, and node_modules isn't symlinked.\n\nThe 'dir', 'file', etc. are very specific. So if all else false or you don't want to dig further, just use the string format which applies to everything, instead of the dictionary format.\n. ctrlp has 2 different statuslines. The main one is the one you see most of the time, created with `ctrlp#statusline()`. The other one you only see briefly when scanning for files, created with `ctrlp#progress(len)`.\n\nI can make them check for an option to use first.\n\n**Edit:** Removed the `printf()` example because it can't be used for the statusline.\n. Added a new option on the custom_statusline branch. See eae302f8.\n\nHere's a working example that recreates the default statuslines: https://gist.github.com/1610859\n\nLet me know if that's good enough.\n. Added. You can enable it with:\n\n``` vim\nlet g:ctrlp_mruf_relative = 1\n```\n\nThanks for the suggestion!\n. Hmm, I'm pretty sure it still works. Can you describe exactly what doesn't work as you expect? Or do you still see some files outside the current working directory?\n\nAlso, the code is here, it's just a simple filter to remove files outside the cwd:\nhttps://github.com/kien/ctrlp.vim/blob/master/autoload/ctrlp/mrufiles.vim#L41-44\n. > And btw, g:ctrlp_mruf_relative could be removed from help file as it's not used anywhere in the code now.\n\nNo, it's in the code AND it's working fine. Did you check the link in my previous comment? `{s:re}` is `g:ctrlp_mruf_relative`.\n\nAlso, it would help if you provide a test case where it doesn't work, just open a new issue. Include in it the current working directory, the files you expect to not be included, and the exact steps to reproduce the problem.\n\nEdit: Oh ok, I see that you're using CtrlPMixed. The reason it doesn't apply to Mixed mode because it would nullify having MRU files in the mix in the first place. MRU files in the cwd are already covered by \"Files\".\n. You can use `let g:ctrlp_match_window_bottom = 0`. You might also want `let g:ctrlp_match_window_reversed = 0` to show the results from top to bottom.\n. Nope, that's Vim's command line. We can't move it.\n. Yes, it's a feature. You can disable it with:\n\n``` vim\nlet g:ctrlp_jump_to_buffer = 0\n```\n. `1` is the default. So if you want the opposite, set it to `0`.\n. ctrlp uses the default `CursorLine` highlight group from your colorscheme. So if you want a different color, either edit your colorscheme or have a different `CursorLine` line in your .vimrc.\n. Could you help me test this patch, see if it works for you?\n\nhttps://gist.github.com/1624947\n\nSaving and restoring &l:tags was a fix for a compatibility issue with the easytags.vim plugin, which aggressively set &l:tags when a new buffer is created or opened. I can't reproduce this problem with the latest easytags.vim, however.\n. Great, thank you!\n. Yes, the order's straight out of Vim buffer list, so it's buffer-number. This is also the second time someone asks for this so maybe I'll look into adding it next. In the mean time, you can use the MRU list `:CtrlPMRU` while having this autocmd in your vimrc. It should provide what you need:\n\n``` vim\nautocmd BufEnter,BufUnload * call ctrlp#mrufiles#list(expand('<abuf>', 1))\n```\n\nAlso, outside of ctrlp, you can use the Vim's `<c-^>` mapping to switch between the current buffer and the previous buffer.\n. OK, I decided to not add this, since the MRU file list already contains all the buffers. Instead, I've added an option to sort the MRU file list in most-recently-entered order:\n\n``` vim\nlet g:ctrlp_mruf_last_entered = 1\n```\n\nIt'll do what you want originally but with `:CtrlPMRU`.\n. Should be fixed now. Thanks!\n. Yes, use `let g:ctrlp_by_filename = 1`.\n. We can't map `<cr>` and `<c-m>` differently, since `<c-m>` has the same keycode as `<cr>` (13) in Vim. The same goes for `<esc>` and `<c-[>`, among others. You'll have to choose other key for \"e\" if you want to use `<cr>` for \"t\".\n. Should be fixed now. Thanks!\n. Not sure if this should be bundled into ctrlp as I think most people don't need it. And you can probably do it with an autocmd:\n\n``` vim\nau BufReadPost * norm! zvzz\n```\n. Right, I just assumed you only wanted to do that with new files. BufWinEnter will probably be better for opened files.\n**Edit:** Also, thanks for pointing out that BufReadPost doesn't work for those cmds. Closing this one now.\n. Probably won't be adding this. Too much for one plugin. There also isn't any useful `<c-...>` mapping left to use.\n. @d11wtq: For (1), there's the `g:ctrlp_buffer_func` option. See `:help g:ctrlp_buffer_func`. Just define some buffer local mappings with `nnoremap <buffer> <silent> ...` in the function.\n\nFor (2), there isn't a built-in function, but you can use something like `fnamemodify(getline('.')[2:], ':p')`. And this can only get the filename in filename related modes (files, buffers, mru etc...).\n. You can set the maximum number of files to scan with the `g:ctrlp_max_files` option. The default's 20000.\n\nTo stop a scan midway, press `<c-c>` (it should stop everything vimscript) then press `<esc>` to exit as usual.\n. That'd be too low. Personally, I haven't had any problem with 20000, no one else complains about it either. But I think cmd-t has this at 10000, so I might lower ctrlp's to that if there are more requests.\n. The counter isn't real time. So when reaching a large directory it stops until `globpath()` finishes the scan in that directory.\n. `<c-c>` pauses everything including the counter, so it might look like it's frozen, but you can still press `<esc>` or `<c-c>` again to close the prompt.\n\nHowever if it actually freezes Vim then there's really nothing I can do to address that. It'll be an issue between Vimscript and Vim, i.e. running globpath() in a large directory tree sometimes freezes Vim.\n\nAs for an alternative to using globpath(), check out `:help g:ctrlp_user_command`.\n. Let me know if this patch works for you:\n\n``` diff\n+++ b/autoload/ctrlp.vim\n@@ -155,7 +155,7 @@ fu! s:Open()\n endf\n\n fu! s:Close()\n-   try | noa bun! | cat | noa clo! | endt\n+   try | bun! | cat | clo! | endt\n    cal s:unmarksigns()\n    for key in keys(s:glbs)\n        sil! exe 'let &'.key.' = s:glb_'.key\n```\n. Could you provide steps to reproduce this then? Filetype of the file. It's already opened or new. Also if the current buffer has been changed.\n\nWhen opening a file, ctrlp also uses a simple `:e` command (for `<cr>`).\n. Looks like the problem's with the filetype detection script for `clj` files. I don't get any highlighting at all when I just do `:e project.clj` without using ctrlp.\n\n**Edit:** I probably don't have the syntax file for clj which isn't shipped with Vim. Which one do you use?\n. Ok, I tried with this script: http://www.vim.org/scripts/script.php?script_id=2501\n\nThe syntax works with both `:e` and ctrlp in vim and mvim on OSX for me. I didn't try the latest mvim, though, since I'm still on Snow Leopard.\n. Alright, finally installed janus and was able to reproduce this. Apparently, the problem comes from some mapping conflicts between janus (or a plugin inside janus) and VimClojure. In my test case they are the `\\rt` and `\\et` mappings. When I disable all the mappings of VimClojure, the syntax loads without any issue.\n\nAnd so the fix, at least in my case, is have this in `.vimrc.before` for janus:\n\n``` vim\nlet maplocalleader = ','\n```\n\nLet me know how that works for you.\n. The files can be from any directory, not just the cwd. So removing the leading part for only a few then adding them again will be problematic.\n\nAlso, you can switch to matching only filename by pressing `<c-d>`, this should help if the paths are too long.\n. Please try this and let me know if you find any problem:\n\n``` diff\n+++ b/autoload/ctrlp.vim\n@@ -276,7 +276,7 @@ fu! s:Buffers() \"{{{1\n        if getbufvar(each, '&bl') && each != s:crbufnr\n            let bufname = bufname(each)\n            if strlen(bufname) && getbufvar(each, '&ma') && bufname != 'ControlP'\n-               cal add(allbufs, fnamemodify(bufname, ':p'))\n+               cal add(allbufs, bufname)\n            en\n        en\n    endfo\n@@ -717,7 +717,8 @@ endf\n fu! ctrlp#acceptfile(mode, matchstr, ...)\n    let [md, matchstr] = [a:mode, a:matchstr]\n    \" Get the full path\n-   let filpath = s:nocwd() ? getcwd().s:lash().matchstr : matchstr\n+   let filpath = s:nocwd() ? getcwd().s:lash().matchstr :\n+       \\ s:itemtype == 1 ? fnamemodify(matchstr, ':p') : matchstr\n    cal s:PrtExit()\n    let bufnum = bufnr(filpath)\n    if s:jmptobuf && bufnum > 0 && md =~ 'e\\|t'\n```\n. The buffer names are taken as-is from Vim in this case. I can use only the filename part, but it'll still be a full path for files with the same names (in different dirs).\n. Does it happen if you comment out line 731 and 735 in the autoload/ctrlp.vim file? Also try with line 1362, separately.\n. Yep, I also get this just using `:bnext`, `:bprev` or `<c-^>` with files that have folds defined in modeline. So it's not a problem with ctrlp. It's just Vim.\n. Weird, I definitely get it with this modeline for my plugin files:\n\n``` vim\n\" vim:fen:fdm=marker:fmr={{{,}}}:fdl=0:fdc=1:ts=2:sw=2:sts=2\n```\n\nAnd this in vimrc:\n\n``` vim\nse foldmethod=marker\nse foldlevel=1\nse foldnestmax=10\nse nofoldenable\n```\n\nIf I'm _outside_ a fold, `<c-^>` away and back will close all folds.\n. OK, I tried again with --noplugin, `<c-^>` definitely closes all the folds, even if the cursor's in a fold when switching away:\n\n``` vim\nvim --noplugin -u .vimrc\n```\n\n.vimrc\n\n``` vim\nse nocp\n\"runtime! plugin/ctrlp.vim\n```\n\nWith 2 buffers: buffertag.vim and dir.vim from `autoload/ctrlp/`.\n\nVim 7.3.401\n. Alright, I searched around a bit to make sure I wasn't crazy or missed something. Someone had the same question on StackOverflow with using NERDTree: all folds close when switching to a different file and back\n\nhttp://stackoverflow.com/questions/7221318/vim-nerdtree-folding-can-it-remember-the-state-of-folds\n\nSo if your tests are correct, cmd-t and bufexplorer probably do something to override this default behaviour of Vim.\n. > I don't see it when I switch with `<c-^>`\n\nAnd as you said later:\n\n> uses :edit command to switch to a buffer, which makes Vim to reevaluate modeline\n\nBut from the description in Vim's help:\n\n```\nCTRL-^         edit Nth alternate file (equivalent to \":e #N\")\n```\n\nSeems like there's something else in your config that changes the behavior of `<c-^>` or `:edit #N`.\n\nBut `set hidden` does help when using the `:buffer` commands. So there's our use case. However, this patch doesn't account for commands after `:` (fail to open the buf), so I'll need to work it into the code and will commit later along with the others.\n\nThanks for the help!\n. This has been added. The new command is `:CtrlPMixed`.\n\nAs for mixing random extensions, it isn't feasible since there are too many differences.\n. Nope, because the opening commands, highlighting, matching etc are all different.\n. Probably won't add this. I tried having the `+`'s at the start of each line but I think they make the list feel a bit confusing and busy. Here's the diff against master in case anyone wants to take a look later:\n\n``` diff\n+++ b/autoload/ctrlp.vim\n@@ -375,7 +375,9 @@ fu! s:Render(lines, pat, bfn)\n    en\n    if s:mwreverse | cal reverse(lines) | en\n    let s:matched = copy(lines)\n-   cal map(lines, '\"> \".v:val')\n+   let eval = s:itemtype =~ '^[12]$'\n+       \\ ? '\">\".(getbufvar(v:val, \"&mod\") ? \"+\" : \" \").v:val' : '\"> \".v:val'\n+   cal map(lines, eval)\n    cal setline(1, lines)\n    exe 'keepj norm!' s:mwreverse ? 'G' : 'gg'\n    keepj norm! 1|\n@@ -779,7 +776,7 @@ fu! s:AcceptSelection(mode)\n        \\ && str !~ '\\v^(\\.\\.|/|\\\\|\\?)$'\n        cal s:CreateNewFile(a:mode) | retu\n    en\n-   let matchstr = matchstr(line, '^> \\zs.\\+\\ze\\t*$')\n+   let matchstr = matchstr(line, '^>[ +]\\zs.\\+\\ze\\t*$')\n    if empty(matchstr) | retu | en\n    \" Do something with it\n    let actfunc = s:itemtype < 3 ? 'ctrlp#acceptfile'\n@@ -831,7 +820,7 @@ fu! s:MarkToOpen()\n        \\ || ( s:itemtype > g:ctrlp_builtins && s:type() !~ 'rts' )\n        retu\n    en\n-   let matchstr = matchstr(getline('.'), '^> \\zs.\\+\\ze\\t*$')\n+   let matchstr = matchstr(getline('.'), '^>[ +]\\zs.\\+\\ze\\t*$')\n    if empty(matchstr) | retu | en\n    let filpath = fnamemodify(matchstr, ':p')\n    if exists('s:marked') && s:dictindex(s:marked, filpath) > 0\n```\n. You can try setting the `g:ctrlp_cmd` option to the cmd that you use, i.e. `CtrlPCurWD`\n\n``` vim\nlet g:ctrlp_cmd = 'CtrlPCurWD'\n```\n. The mapping to `:CtrlP` exists because it's a restored session. But the lazy-load method you use doesn't load ctrlp along with it. So the best option's for you to use something different, because many plugins have default mappings as well, and this method wouldn't work well with them. But regardless, I'll make disabling the ctrlp's default mapping an option, maybe by leaving g:ctrlp_map empty.\n. It's not a completion menu. The prompt's created in  Vim's command-line and works as such. `<c-p>` and `<c-n>` are used for browsing the command history in the command line. They do the same job in ctrlp's prompt, browsing the input history.\n\nYou can remap the keys if you don't like the default. For example, this is probably close to what you want:\n\n``` vim\nlet g:ctrlp_prompt_mappings = {\n    \\ 'PrtSelectMove(\"j\")':   ['<c-j>', '<c-n>'],\n    \\ 'PrtSelectMove(\"k\")':   ['<c-k>', '<c-p>'],\n    \\ 'PrtHistory(-1)':       ['<down>'],\n    \\ 'PrtHistory(1)':        ['<up>'],\n    \\ }\n```\n. This doesn't work well on Windows because `mkdir()` can't create subdirs. But making it work on Windows breaks it for everyone else. Removed to re-implement it later.\n. Hmm, apparently I missed this part, it can create subdirs:\n\n```\nmkdir({name} [, {path} [, {prot}]])\n        If {path} is \"p\" then intermediate directories are created as\n        necessary.  Otherwise it must be \"\".\n```\n. There's no built-in way to do this. Not sure if I want to add it either. But you can write a function like this to do it:\n\n``` vim\nfu! s:call_ctrlp_extension(ext)\n    if !exists('g:ctrlp_builtins')\n        ru autoload/ctrlp.vim\n    en\n    cal ctrlp#init(ctrlp#{a:ext}#id())\nendf\n\n\" Then create some mappings:\nnn <silent> <leader><space>l :cal <SID>call_ctrlp_extension('line')<cr>\nnn <silent> <leader><space>s :cal <SID>call_ctrlp_extension('rtscript')<cr>\n```\n. Reproducible but the problem seems to be originated from either netrw or Vim. Here's the test case:\n- Run `vim ~/test/sym3/*` where sym3 is linked to another directory.\n- Vim starts with the netrw buffer. Immediately run `:ls` from Vim's command-line.\n  In the list, `~/test/sym3` is listed as a buffer number 2.\n- Run `:CtrlPBuffer`. `test/sym3` is also listed as a buffer, since the buffer list's taken from Vim.\n\nRepeat step 1 and 2 then do this:\n- Run `:b2`. Vim returns `\"~/test/sym3\" is a directory`.  \n  Run `:ls` again, the sym3 buffer is gone.  \n  Run `:CtrlPBuffer`, `test/sym3` also gone.\n\n**Edit:** `~/test/sym3` is still listed in the output of `:ls` when ctrlp isn't installed.\n\nScreenshot:\n\n![sym3](http://i.imgur.com/fXrOb.png)\n. Vim 7.3.0 on Ubuntu 10.10, netrw `Last change: 2010 Jul 28`.\n. > Used :CtrlPBuffer to go to some buffer.\n\nDoes it happen if you use `:buffer [buffer-number]`? Try `:edit [filename]` as well, where filename's the filename of the buffer. Also, try starting Vim with `vim --noplugin -u .empty_vimrc ~/.vim/snippets/*` where the vimrc only has `set nocp`, then browse through the buffers with `:bn` or `:bp`.\n. Let me know if e7b08a3 changes anything.\n. Let me know how 6fe1e50 works. Thanks!\n. Should be fixed now. Sorry about the hiccup!\n. Hmm, so are you suggesting that the default fuzzy mode should work like regexp mode at first? I think I already tried to implement that once, but couldn't use it because of a problem with filtering the results (it was very slow), hence the current implementation separating fuzzy and literal strings.\n. Oh I see. But that'll have the same performance problem, I think. For example, the pattern with the smallest substrings and lowest priority, `c.*o.*v.*e.*r.*\\..*e.*r.*l` will match entries already matched by `co.*ver.*\\.erl`. So in one way or another, these entries will have to be filtered. And filtering in vimscript is really slow, any operation with large lists, large dictionaries is. The only way I see that can really improve this part is by doing it with a better language then send the results back to be displayed.\n\nBut to stay pure vimscript and portable, this is kind of it. Separate fuzzy and literal string modes where people can use `co.*ver.*\\.erl` or `cover\\.erl` when they need to.\n. OK, matching the whole string first is on the 1.7.0 branch. This is a near complete rewrite of the old algorithm. It gives better results by default but is noticeably slower when searching in large directories. I'm still undecided as to merge it or not. Let me know what you guys think.\n. @DelvarWorld: Yep, I think I'll just keep it as a separate branch, as I'd rather have the speed myself. And if not being fully fuzzy stops people from using the plugin, that's fine by me. I understand that you mean to encourage making the plugin better, but I'm pretty much done with this.\n. ``` vim\nlet g:ctrlp_use_caching = 0\nlet g:ctrlp_clear_cache_on_exit = 1\n```\n. This is expected and it's a limitation, I'm afraid. If the search string's long, it'll take more time to find the matches. As the string gets longer, the delay starts getting more noticeable. It also seems to be highly dependent on people's computers.\n\nSo you'll want to keep the string short and unique. If you want to match only filenames, you can press `<c-d>` to toggle filename-only mode, instead of typing out the letters and the `/`'s in the path. Another option's to use the lazy update option which tells ctrlp to only update the match window when typing has stopped:\n\n``` vim\nlet g:ctrlp_lazy_update = 1\n```\n. I get an `E420: BG color unknown` error in gVim on Windows. I think a better solution would be using separate rules for GUI and non-GUI:\n\n``` vim\nexe 'hi CtrlPLineMarker '.( has('gui_running') ? 'gui' : 'cterm' ).'fg=bg'\n```\n\nAlso, not sure if I want the prefix optional. Implementing's simple but unicode symbols don't seem to work very well on Windows, and it might cause problems on others where people can't open files.\n. Hmm, it'd still generate issues here from people who had problems using it, and I'd have to deal with those issues. Besides, after this change, there will be only one `>` for the selected entry. So it's probably not worth it for an extra option.\n. Looks like the colorscheme you're using doesn't set the Normal highlight group or does but ctermbg isn't defined.\n6a9f1e3 should workaround this.\n. Thanks! You can use the option `shellslash` to have `/` as path separator on Windows:\n\n``` vim\nset shellslash\n```\n\nHowever, changing the code to silently treat `\\` as `/` is a no-go at this point. There are too many things to consider.\n. I don't have access to Win7 at the moment but 1.6.9 works perfectly fine for me on WinXP. I'll try to setup a Win7 machine and test this once I have some free time.\n\nFor now, I think you should just use 1.6.3. There's very little difference between it and 1.6.9, except for new extensions and some new features. Most of the bugfixes are for the new stuff, too.\n. Could you guys help me test this patch? Kind of a shot in the dark, but these are the few changes in 1.6.9 vs 1.6.3 that can affect performance when typing.\n\nIt's against master. Save it and run `git apply filename`, revert with `git apply -R filename` when done:\n\n``` diff\ndiff --git a/autoload/ctrlp.vim b/autoload/ctrlp.vim\nindex 9b5f04a..28dbaaa 100644\n--- a/autoload/ctrlp.vim\n+++ b/autoload/ctrlp.vim\n@@ -291,7 +291,7 @@ fu! s:MatchIt(items, pat, limit, mfunc)\n    retu newitems\n endf\n\n-fu! s:MatchedItems(items, pats, limit, bfn)\n+fu! s:MatchedItems(items, pats, limit)\n    let [items, pats, limit] = [a:items, a:pats, a:limit]\n    \" If items is longer than s:mltipats_lim, use only the last pattern\n    if len(items) >= s:mltipats_lim || ( exists('s:height') && s:height > 20 )\n@@ -300,7 +300,7 @@ fu! s:MatchedItems(items, pats, limit, bfn)\n    cal map(pats, 'substitute(v:val, \"\\\\\\~\", \"\\\\\\\\\\\\~\", \"g\")')\n    if !s:regexp | cal map(pats, 'escape(v:val, \".\")') | en\n    let [type, ipt, mfunc] = [s:type(1), s:ispathitem(), 'match']\n-   if s:byfname && ipt && a:bfn\n+   if s:byfname && ipt\n        let mfunc = 's:matchfname'\n    elsei s:itemtype > 2\n        let types = { 'tabs': 's:matchtabs', 'tabe': 's:matchtabe' }\n@@ -354,7 +354,7 @@ fu! s:SplitPattern(str, ...) \"{{{1\n    retu newpats\n endf\n \" * BuildPrompt() {{{1\n-fu! s:Render(lines, pat, bfn)\n+fu! s:Render(lines, pat)\n    let lines = a:lines\n    \" Setup the match window\n    let s:height = min([len(lines), s:mxheight])\n@@ -388,7 +388,7 @@ fu! s:Render(lines, pat, bfn)\n    en\n    \" Highlighting\n    if s:dohighlight()\n-       cal s:highlight(a:pat, s:mathi[1] == '' ? 'Identifier' : s:mathi[1], a:bfn)\n+       cal s:highlight(a:pat, s:mathi[1] == '' ? 'Identifier' : s:mathi[1])\n    en\n endf\n\n@@ -404,13 +404,9 @@ fu! s:Update(str)\n    if notail == oldstr && !empty(notail) && !exists('s:force')\n        retu\n    en\n-   let bfn = s:byfname && notail != '' && match(notail, '\\v/|\\\\:@!') < 0\n-   if s:byfname && s:regexp && match(notail, '\\\\:\\@!') >= 0\n-       let bfn = s:byfname\n-   en\n    let lines = exists('g:ctrlp_nolimit') && empty(notail) ? copy(g:ctrlp_lines)\n-       \\ : s:MatchedItems(g:ctrlp_lines, copy(pats), s:mxheight, bfn)\n-   cal s:Render(lines, pats[-1], bfn)\n+       \\ : s:MatchedItems(g:ctrlp_lines, copy(pats), s:mxheight)\n+   cal s:Render(lines, pats[-1])\n endf\n\n fu! s:ForceUpdate()\n@@ -907,7 +903,7 @@ endf\n fu! s:comparent(s1, s2)\n    \" By same parent dir\n    if match(s:crfpath, escape(getcwd(), '.^$*\\')) >= 0\n-       let [as1, as2] = [fnamemodify(a:s1, ':p'), fnamemodify(a:s2, ':p')]\n+       let [as1, as2] = [getcwd().s:lash().a:s1, getcwd().s:lash().a:s2]\n        let [loc1, loc2] = [s:getparent(as1), s:getparent(as2)]\n        if loc1 == s:crfpath && loc2 != s:crfpath | retu -1 | en\n        if loc2 == s:crfpath && loc1 != s:crfpath | retu 1  | en\n@@ -1131,7 +1127,7 @@ fu! s:syntax()\n    en\n endf\n\n-fu! s:highlight(pat, grp, bfn)\n+fu! s:highlight(pat, grp)\n    cal clearmatches()\n    if !empty(a:pat) && s:ispathitem()\n        let pat = substitute(a:pat, '\\~', '\\\\~', 'g')\n@@ -1139,7 +1135,7 @@ fu! s:highlight(pat, grp, bfn)\n            \\ ? substitute(pat, '\\\\\\@<!\\^', '^> \\\\zs', 'g')\n            \\ : escape(pat, '.')\n        \" Match only filename\n-       if s:byfname && a:bfn\n+       if s:byfname\n            let pat = substitute(pat, '\\[\\^\\(.\\{-}\\)\\]\\\\{-}', '[^\\\\/\\1]\\\\{-}', 'g')\n            let pat = substitute(pat, '$', '\\\\ze[^\\\\/]*$', 'g')\n        en\n```\n. @jonathanfilip: Great, thanks! I went ahead and committed this. If you find any problem later, let me know.\n@beaugunderson: I think that actually isn't this bug. ctrlp's just slow when there are a lot of files. You can find some related explanations/solutions [here](https://github.com/kien/ctrlp.vim/issues/112).\n. Thanks! But there's already an option you can use to set it:\n\n``` vim\nlet g:ctrlp_root_markers = ['.lvimrc']\n```\n\nWith this, ctrlp will look for `.lvimrc` first and zoom to the first parent directory that has it.\n. They are all used. If the first one isn't found anywhere, ctrlp will then look for the next one. This option simply puts `.lvimrc` at the top of the queue.\n. Nope, it's not possible to set multiple user commands. Also, with what you're using, the second line just redefines the g:ctrlp_user_command variable and overwrites the value set by the first line. That wouldn't work in any case.\n. You'll have to change the `AcceptSelection(\"e\")` as well since `<cr>` is already used for it.\n\nSo this will do what you want:\n\n``` vim\nlet g:ctrlp_prompt_mappings = {\n  \\ 'AcceptSelection(\"e\")': [],\n  \\ 'AcceptSelection(\"t\")': ['<cr>', '<c-m>'],\n  \\ }\n```\n. @jonasdiemer: The functionality is still there, the above config only disables the `<cr>` key. So just use something for `AcceptSelection(\"e\")` and use that key to submit the `..`.\n. The results are already weighted based on the length of the match, the length of the path and filename, the last modified time, the parent directory... But because of the constraint of vimscript, all of these can't be done for the entire directory tree but only for the first few matches found. Hence it's inaccurate in large directories but accurate in a smaller test case. And theoretically speaking, it could be much more accurate in the large directories, too. But the performance would be so low that it'd render the plugin unusable. There are some further explanations in issue #110. I'm closing this now as duplicate, or just cantfix since it's not really a bug.\n. Make sure to set that option before plugin/ctrlp.vim is sourced. Either put it in your vimrc, or execute it before sourcing the plugin if you're doing this manually.\n\nIf you've already done all that and it still happens then please provide steps to reproduce the bug.\n. Hmm, I think you should open an issue on the janus repo then. Maybe someone over there will be able to help. This option works fine for everyone else, and here it sounds like it doesn't get set before the plugin is loaded.\n\nWish I could be more helpful but I have no clue where to even start to look into this in janus.\n. OK, I just installed janus and put `let g:ctrlp_extensions = ['tag']` in .vimrc.before. The command CtrlPTag is available right from the start. So it looks like something else in your janus config is the culprit. You can try disabling plugins, commenting out parts of the .vimrcs etc... to isolate it.\n. If I understand it correctly, you want ctrlp to not pick up the langmap option? This means reseting the user's langmap option when entering the ctrlp buffer. If that's what you need, let me know how this works for you:\n\n``` diff\ndiff --git a/autoload/ctrlp.vim b/autoload/ctrlp.vim\nindex 128a818..996d7d3 100644\n--- a/autoload/ctrlp.vim\n+++ b/autoload/ctrlp.vim\n@@ -116,7 +116,7 @@ fu! s:opts()\n    \" Global options\n    let s:glbs = { 'magic': 1, 'to': 1, 'tm': 0, 'sb': 1, 'hls': 0, 'im': 0,\n        \\ 'report': 9999, 'sc': 0, 'ss': 0, 'siso': 0, 'mfd': 200, 'mouse': 'n',\n-       \\ 'gcr': 'a:blinkon0', 'ic': 1, 'scs': 1 }\n+       \\ 'gcr': 'a:blinkon0', 'ic': 1, 'scs': 1, 'lmap': '' }\n    if s:lazy\n        cal extend(s:glbs, { 'ut': ( s:lazy > 1 ? s:lazy : 250 ) })\n    en\n```\n. The function's been changed to script-local and the customization was [removed](https://github.com/kien/ctrlp.vim/blob/5e04bfaeede4488205e0dffda018af4f32dc3940/doc/ctrlp.txt#L766). There's no alternative. But here's something you can use in your .vimrc. It works the same but without any backward compatibility:\n\n``` vim\nfunc! s:etwd()\n    let cph = expand('%:p:h', 1)\n    if match(cph, '\\v^<.+>://') >= 0 | retu | en\n    for mkr in ['.git/', '.hg/', '.vimprojects']\n        let wd = call('find'.(mkr =~ '/$' ? 'dir' : 'file'), [mkr, cph.';'])\n        if wd != '' | let &acd = 0 | brea | en\n    endfo\n    exe 'lc!' fnameescape(wd == '' ? cph : substitute(wd, mkr.'$', '.', ''))\nendfunc\n\nau BufEnter * cal s:etwd()\n```\n\nGist: https://gist.github.com/1737475\n. Here's the list:\n\n```\nFor the statuslines:\nCharacter\nLineNr\nFunction\n\nFor the buffer:\nCtrlPNoEntries (link to Error)\nCtrlPLinePre (link to Normal's guibg and ctermbg)\nIdentifier\n\nIn extensions:\nCtrlPTabExtra (link to Comment)\nCtrlPqfLineCol (link to Search)\nCtrlPUndoT (link to Directory)\nCtrlPUndoBr (link to Comment)\nCtrlPUndoNr (link to String)\n```\n\nRight now, it's difficult to customize the statuslines because the highlight groups are used directly. There's the option `g:ctrlp_status_func` but it requires rebuilding the entire statuslines.\n\nI think I'll change these groups to groups specific to ctrlp, perhaps like this:\n\n```\nCtrlPMode1 (link to Character)\nCtrlPMode2 (link to LineNr)\nCtrlPStats (link to Function)\nCtrlPMatch (link to Identifier)\n```\n. It should be possible to override the default highlighting after 75e31e9. I also added some descriptions at `:h ctrlp-customization`.\n. Yes, it's expected. And it's slow because it has to do the matching/comparing for a lot of files with 999 being the upper limit. If you want the window to fit the screen, use something like this instead:\n\n``` vim\nau VimEnter,VimResized * let g:ctrlp_max_height = &lines\n```\n. You can use `<c-^>` (outside of ctrlp) to switch to the previous file. Or set this option and use `:CtrlPMRU` in place of `:CtrlPBuffer`:\n\n``` vim\nlet g:ctrlp_mruf_last_entered = 1\n```\n. Make sure you clear the cache after setting the option. Run `:ClearAllCtrlPCaches` from the command-line or press `<F5>` in ctrlp.\n. I already made some changes that should (unintentionally) fix this, I think. Let me know if this doesn't return either `-1` or an empty string:\n\n```\n:echo synIDattr(synIDtrans(hlID('Normal')), 'bg')\n```\n. Because not every colorscheme uses guifg=bg or ctermfg=bg for Ignore (molokai for example, uses a [visible color](https://github.com/tomasr/molokai/blob/1d5a25926834b5decf5f760151737282852395af/colors/molokai.vim#L54) for this group's foreground). So it's better using the Normal's bg directly.\n. This should be fixed in 75e31e9.\n\nIt's also now possible to change the default highlighting for every part of the prompt.\n. This has been brought up before. The consensus was that the matching couldn't be improved without decreasing performance.\n\nAs for a solution, you can type `gemfile$` and switch to regexp mode by pressing `<c-r>`. This will bring up every file that ends with `gemfile`.\n. It only accepts the letters on the standard US-International keyboard layout, i.e. letters in the Latin alphabet, from a to z. I have no plan to support more.\n. I see, but my point's that it only accepts the standard letters. What _can_ be typed with the keyboard (damn near everything) is irrelevant. If you have to type (pressed-then-released style) 2 or more keys to get 1 accented letter, it won't work even if the letter's supported. Also, the currently supported range's ASCII 32 to 126. This includes a-z, A-Z, 0-9 and the standard symbols and punctuations.\n\nI'll gladly accept something like [this](https://github.com/kien/ctrlp.vim/pull/41) for accented letters, though.\n. I haven't tried them either but it seems all of these have been written by others. Although the yankring one doesn't seem to depend on YankRing.vim, but less dependencies is a plus, IMO.\n\nSo maybe it's time to close this, and let people who want to request new extensions to just open new issues.\n. Added. You can use `<F5>` to reformat the old MRU list.\n. Fixed in 93cb20d. Didn't pull your commit because `tail` is also used for commands, not just for line numbers.\n\nThanks!\n. Looks like you're using an older version of the plugin, namely v1.6.9. This has already been fixed in the latest version on github. You can get the latest zipball or tarball [here](https://github.com/kien/ctrlp.vim/downloads).\n\nBut for v1.6.9, you just need to set a colorscheme that defines a background color and the error will go away.\n. The current version is 1.7.1 with this particular issue fixed in 75e31e9. And yes, vividchalk has ctermbg=none.\n. 1.6.9 was the only version that had this error. Make sure you update to the latest version on github (currently 1.7.3).\n. [Mentioned in the docs](https://github.com/kien/ctrlp.vim/blob/93cb20dbfbab723e1557801469ae70f4f46499da/doc/ctrlp.txt#L166).\n. Probably won't be adding this myself since I'm not familiar with cscope. Pull requests are most welcome, though. You can checkout the [extensions](https://github.com/kien/ctrlp.vim/tree/extensions) branch for how to create an extension.\n. BTW, an extension for ctags had already been added long before this request. I still don't see me adding one for cscope, but if anyone wants to give it a shot, take a look at the ctags one, I imagine it'd be somewhat similar.\n. You just need to be more specific with the search string. It also helps to use filename mode (toggle with `<c-d>`), regex mode (toggle with `<c-r>`), or both at the same time. And make sure the cache for the current directory is up-to-date (press `<F5>` in ctrlp to update).\n. I'd just type something like `contacts` then toggle filename mode with `<c-d>`. If that wasn't enough, I'd then toggle regex mode with `<c-r>`, since `contacts` is a literal part of the filename.\n. This belongs in a user's .vimrc, I think. The default `<c-p>` mapping and the command used for it are already configurable. Adding this on top of that, and allowing the whole thing to be configurable as well will be a little over complicated, especially for something you can do with a mapping:\n\n``` vim\nlet g:ctrlp_map = ''\nnn <silent> <c-p> :sil! exe 'CtrlP'.['', 'CurWD', 'Dir'][v:count]<cr>\n```\n. You want to match the last part of a path. Try `[\\/]\\.[^\\/]\\+$`.\n\nAlternatively, you can disable dotfiles searching with this:\n\n``` vim\nlet g:ctrlp_dotfiles = 0\n```\n. This is most likely because Gemfile.lock is newer (in last modified time) than Gemfile, assuming they are in the same directory, with \"gemfile\" as the search string. Please see #132.\n. This isn't possible to implement with the current matching method. To get more accurate results you'll just have to switch to filename mode or regexp mode when searching. You can toggle filename mode with `<c-d>` and regexp mode with `<c-r>`. So for example, type foo.rb then press `<c-d>`, or type user.rb then press `<c-r>`.\n\nAlso, [this](https://github.com/skwp/dotfiles/blob/2e9fc1da721f04716c634e23e31d9a84eab3fb55/vim/plugin/settings/ctrlp.vim#L22-34) may be useful for you.\n. Yes, people have been using those types of mapping long before ctrlp came into the picture. As for toggling modes with `<c-d>` `<c-r>`, it's not intuitive and needs some get-used-to, but nothing can be done about this, unfortunately. It's not that I haven't tried to improve it.\n. That's because ctrlp sets its local working directory each time it's invoked. You'll need to disable this with the g:ctrlp_working_path_mode option:\n\n``` vim\nlet g:ctrlp_working_path_mode = 0\n```\n. Make sure you set that in vimrc and use `<c-x>` in `:CtrlPDir`.\n\nAlso, if you only want to change the working directory to ~/another_workspace then just use `:cd ~/another_workspace`. I don't see a point in opening it with CtrlPDir just to `<c-x>` and exit right away.\n\nAnd if you want to search in ~/another_workspace, then just use `:CtrlP ~/another_workspace`.\n. Thank you! I'm keeping the old commands for now and will remove them after a while, so that it doesn't break people's setups.\n. Yes, this behavior is expected. The custom_ignore and wildignore options only take effect when globpath() is used. And since you haven't defined a secondary command with g:ctrlp_user_command, globpath() is used when searching outside a repo.\n\n> The files matching the custom_ignore regex are actually ignored if I'm not in a git project. Otherwise they are shown. \n> Is there any chance that the plugin doesn't use the custom_ignore while using a user_custom_command?\n\nDo you mean \"does\"? It already doesn't use the custom_ignore while a user_command is in use.\n\nBut if you want to ignore stuff while using a user_command, you'll need to include the ignore patterns in the command somehow. For some examples, checkout the s:wig2cmd() function at `:help ctrlp-misc`.\n. Exactly because of this:\n\n> I really like the idea of using a custom command for git repos it is really useful because it makes the search very fast with big projects.\n\nI don't want to slow that down too much and lose that speed. So for git for example, I think it's faster to use the `--exclude-from` option of the `git ls-files` command. Here's what works for me:\n\n``` ssh\ngit ls-files --exclude-from=ignoredfile -i\n```\n\nWhere the `ignoredfile` contains this:\n\n```\n*\n!*.log\n!*.png\n!*.jpg\n```\n. > when I want to switch back and forth between them.\n\nWouldn't it be more appropriate to use buffer or MRU mode for that? In buffer mode and in MRU mode, the current file is excluded from the listing. If it's also excluded in find file mode, there won't be any way to select it again. But aside from that, it does kind of get in the way sometimes. So I'll see if I should factor the whole thing into an option for the 3 main modes.\n. Changed in 0b3173e because of this:\n\n> If a newer file does match 'coffee', regardless of it being the file you want or not, or of it being the worst match in the list, relying on MRU order alone will always make it the top choice simply because it's the newest.\n\nKind of forgot about this when I made that change. Sorry!\n. That's expected and simply can't be fixed. When the list gets really large, it all comes down to Vimscript's performance.\n. The list isn't unsorted. It's sorted according to the full path's length, the filename's length, the match's length, the last modified time, and the parent directory. So I don't think sorting alphabetically is going to improve it much. But in any case, if anyone wants to pick them apart and improve them, all the functions can be found in the Sorting section in autoload/ctrlp.vim.\n\nThanks!\n. > When try to access file xxx/color_variation, I thought cv is a good key to search it.\n\nSomeone else might use `cv` to search for user.csv, thinking it'd be a good search term. And if the first letter of a word had higher priority, the user.csv file might still win over the color_variation file because its path, filename, and match's length were shorter. Plus, to be honest, I haven't got any idea how to translate this to Vimscript. Doesn't look like it's worth the extra effort either.\n\nYou just need to be more specific with the search term, for example `cova` would probably do the job here.\n. You can just remap the keys.\n\nThis is the default:\n\n``` vim\n    \\ 'AcceptSelection(\"e\")': ['<cr>', '<2-LeftMouse>'],\n    \\ 'AcceptSelection(\"h\")': ['<c-x>', '<c-cr>', '<c-s>'],\n    \\ 'AcceptSelection(\"t\")': ['<c-t>'],\n    \\ 'AcceptSelection(\"v\")': ['<c-v>', '<RightMouse>'],\n```\n\nJust switch `<c-t>` and `<cr>` and you're done:\n\n``` vim\nlet g:ctrlp_prompt_mappings = {\n    \\ 'AcceptSelection(\"e\")': ['<c-t>'],\n    \\ 'AcceptSelection(\"t\")': ['<cr>', '<2-LeftMouse>'],\n    \\ }\n```\n. Here's something I modified from dir.vim:\n\nhttps://gist.github.com/2170481\n\nIt requires af2847a which adds a new function. Place the file in an `autoload/ctrlp/` dir in your runtimepath (not necessary inside the plugin's bundle, anywhere will work). Use the g:ctrlp_vcsdir option to change the VCS marker, the default is `.git/`.\n\nThis likely won't be bundled with ctrlp so feel free to modify it however you like.\n. Thank you! I updated the gist. It actually wasn't working at all because the cwd was never changed.\n. The plugin doesn't set this option, the user does. So check your configuration. Looks like you set g:ctrlp_custom_ignore twice in different types.\n. It's either the max_files limit (10000), or the max_depth limit (40) has been reached. You can change these limits with the g:ctrlp_max_files and g:ctrlp_max_depth options, respectively.\n\nIt's most likely max_files, since the `views` folder is only a few folders deep from the working directory. Assuming you haven't changed the default settings.\n. It works fine for me. Where do you put the `let g:ctrlp_working_path_mode = 0`? Make sure you put it in your .vimrc (~/.vimrc.before if you're using janus), and then either restart Vim or run :CtrlPReload.\n\nAlso, before starting ctrlp, run `:echo g:ctrlp_working_path_mode` to see if the setting has actually been set.\n. Nope, it's because you're using this to call ctrlp:\n\n``` vim\nmap <leader>f :CtrlP %:p:h<cr>\n```\n\nThe path_mode option doesn't take effect when you call ctrlp like this. And `%:p:h` expands to the parent directory of the current file.\n. Hmm, the 1.7.0 branch is an experimental branch, it's buggy and slower than master. You shouldn't use it. It also doesn't have any change related to the invocation mapping (no changes in plugin/ctrlp.vim). And this option has been pretty much the same since 1.0. So just make sure you put the `let g:ctrlp_map = '<c-;>'` in your .vimrc and restart Vim.\n\nAlso, `<c-p>` is only used for completion in Insert mode. In Normal mode, `<c-p>` is just a duplicate of `k`.\n. If `<F9>` works fine then the plugin's mapping mechanism is working fine in your setup. There's a `<c-p>` mapping or not doesn't matter because it isn't used.\n\nSo the question is with the `<c-;>` key. I simply can't map it at all. For example, pressing `<c-;>` does nothing with this mapping:\n\n``` vim\nnnoremap <c-;> :echo 12345<cr>\n```\n\nVim started with `--noplugin -u blank.txt` where blank.txt only has `set nocp` .\n`:nmap` shows `n <C-;> * :echo 12345<CR>`.\n\nI guess you'll just have to choose a different key to map. No idea how the 1.7.0 branch could possibly make the key work for you, though (it doesn't for me). In any case, I don't think this is a bug to be fixed.\n. You can use g:ctrlp_root_markers to set it:\n\n``` vim\nlet g:ctrlp_root_markers = ['.git']\n```\n\n`.git` will be put in front of the queue and searched for before the defaults.\n. Seems to work fine for me. Please provide steps to reproduce and your configuration for both plugins.\n\nThanks!\n. Closing this now for lack of information. Plus ctrlp and minibufexpl work perfectly fine together in my normal environment and also when running Vim in default with just the 2 plugins. And since no one else has complained about this, I think it's probably something else on your end.\n. This has already been worked around with this commit cbbf039 in response to another issue. Next time, please update the plugin before filling bug reports.\n. A cache system already exists. Please read `:help g:ctrlp_use_caching` and the nearby options.\n. It's not possible, yet. But I'm going to add it, perhaps with a new key `{ 'sort': 0 }`. For now, if you need to do some testing, try commenting out the `cal sort(lines, 's:mixedsort')` line in the Render() function.\n. 1. You can specify 1 directory: `:CtrlP /var/www/some-site/some/path/inside`. Can't do multiple directories and it's a little too late to implement that.\n2. You should do this with your vimrc. Just add some mappings for the commands.\n3. This can already be done with:\n   1. Run `:CtrlP ~/dir-with-session-files/`\n   2. Select a session file.\n   3. Type `:so\\ %` in the ctrlp prompt.\n   4. Press `<cr>`.\n   \n   But the feature is too specific, I'm not going to write an extension for it or add it to ctrlp.\n. You can do completion like this `ap<tab>as<tab>sty<tab>`. Or if `app/assets/stylesheets/` is the selected match, you can press `<c-z>` then type `my_new_file.css` and `<c-y>`. The second method is described in more details at `:help ctrlp-input-formats|/f)`.\n\nHowever, expanding from `ap/as/sty` to `app/assets/stylesheets/` with a single keypress is very problematic. I won't add it.\n. You can disable zooming to a project's root by setting `g:ctrlp_working_path_mode` to 0. This can't be changed if you're already inside the prompt.\n\n> How can I order CtrlP to search files only in current directory on demand?\n\nTry mapping something to `:CtrlP .` or `:CtrlPCurWD` and use that when you need to search in the current directory.\n\nAs for the `/` or `\\`, you have to submit them, not just type them out. They are also only of use when the path_mode option is 1 (in any other case they do nothing when submitted).\n. I have no idea. But it maybe that the cache just wasn't cleared and you were seeing an older index. You can use `<F5>` inside the prompt to refresh it.\n. This sounds great but it's very difficult to make it reliable enough to be worthwhile. I definitely won't add it. Besides, you can already list untracked files with git ls-files:\n\n```\ngit ls-files . --cached --exclude-standard --others\n```\n\nThis should work the same everywhere provided that you have Git installed, including on Windows.\n. ctrlp only looks for first matches. If report.cs isn't in the result list it won't get sorted. But the files in the result list do get sorted according to filename's length.\n\nThis is by design and can't be fixed.\n\nFor a solution, you can type `report.cs<c-r>` which should bring up every file ends with report.cs.\n. I suppose you have a lot of report.cs in paths as well (when in regex mode, `report.cs` is searched for literally, except the `.`). So try `<c-d>`, it should limit to matching only filenames.\n. Yes, I get that. ctrlp already does compare filename's length AND the length of the matched part, but this simply can't be done on the whole list.\n\nThe regex mode and filename mode are usually enough to workaround that. But in your case, you'll have be more specific with the search string. Since you have too many `report.cs`'s, don't use just it. Try something like `^report.cs` or `^report.cs$` in regex + filename mode.\n. Nope, it isn't supposed to work. The prompt is a pseudo-prompt and only the mappings that have been defined work.\n\nThere are a few built-in pasting actions you can use, however:\n- Paste the word under the cursor in the current buffer: `<insert>` or `<F2>`\n- Paste from search register: `<F3>`\n- Paste the content of the last visual selection: `<F4>`\n- Paste from clipboard: `<F6>`\n\n**Update:** As of v1.7.6, these mappings have been replaced with the `<c-\\>` mapping, with the exceptions of `<Insert>` and `<MiddleMouse>` now mapped to paste-from-clipboard.\n. It doesn't sort when the prompt is empty. But after you start typing, the results are sorted like in other file modes (shortest match, etc). I'll see if I should change it to 'never' sort.\n. > I would have thought the 'obvious' solution would be to show matches sorted by MRU. Is that possible?\n\nIn MRU mode, no sorting means the order is defaulted to MRU, but only MRU.\n. So I choose a middleground instead of relying solely on MRU order. Let me know how it works for you.\n. > if I type 'coffee' at the CtrlP prompt, the first choice will be the most recently used file that matches.\n\nIdeally, but it's really not that simple. If a newer file does match 'coffee', regardless of it being the file you want or not, or of it being the worst match in the list, relying on MRU order alone will always make it the top choice simply because it's the newest.\n. > I'm looking for the most recent match - period. If I have to type some more characters to get to my file, that's OK - because in most cases, I won't have to.\n\nThat settles it, I guess. I've added an option to disable sorting. But personally, I've always run into the problem in my previous comment (for a while, ctrlp used to not sorting files in MRU mode). It was why I changed this in the first place, since I use MRU a lot myself.\n. It's to keep the matching simple and relatively fast. There's really nothing else.\n\nAnd as I said before, I'm pretty much done with this part (won't be improving it, at least not significantly). If you want to take a stab at something different, check out the `g:ctrlp_match_func` option.\n. Thanks for the suggestion! I've added some default ignores. But if the max_files limit is lowered, more people will have issues like #163.\n. This would be too far away from what ctrlp does and how it works, it\nwouldn't even fit as an extension. You should just use grep.vim or ack.vim\netc. Also, this isn't the first time this has been suggested, but thanks\nnonetheless!\n\n2012/4/26 Enrique Garc\u00eda <\nreply@reply.github.com\n\n> Would it be possible to make a ctrlp extension that allowed \"finding _in_\n> files\" instead of just finding files by path? I'm thinking about typing\n> stuff and having the equivalent of a \"grep -r stuff .\" happening on the\n> ctrlp buffer.\n> \n> That's what I'm missing the most in my vim these days.\n> \n> I'd give this a try myself, but I know null vimscript.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/kien/ctrlp.vim/issues/180\n. That's kind of how it works. `.git` has a higher priority than `.bzr`, and in this case `.git` is found first, at \"parent\". So parent is identified as the true root of the project. If you want it to look for .bzr first, use this:\n\n``` vim\nlet g:ctrlp_root_markers = ['.bzr/']\n```\n. OK, I'm closing this as the behavior is intended. For a while, ctrlp used to look for all markers in a directory then if nothing was found, moved up to the parent dir. But this allowed the user less control over which should be the root. It always zoomed to the first .git or .bzr no matter what.\n\nCurrently, if you want \"parent\" to be the absolute root, you can create a marker file `parent/.root` then put it in the option `let g:ctrlp_root_markers = ['.root']` (add .root to .gitignore, too if you don't want it to be committed).\n\nAnd if you don't want that but the opposite, then use `let g:ctrlp_root_markers = ['.bzr/', ...]`, where `...` can be any VCS type you have under \"parent\". Place the ... type before .bzr/ if you have it under .bzr as well.\n. I solve this in some of the extensions by converting `{\"title\": \"foo\", \"value\": 1 }` to a string like `foo<tab>|1|` where `<tab>` is a tab character. Then in ctrlp#xxx#accept, parse the `foo<tab>|1|` string and get back the title `foo` and value `1`. Also in ext_var, use `{ 'type': 'tabe' }` so that the matching is only against the `foo` part.\n\nAn example of this is the [line.vim](https://github.com/kien/ctrlp.vim/blob/master/autoload/ctrlp/line.vim) extension.\n\nBut accepting a different type of variable for ctrlp#xxx#init will require a lot of code changes. Not sure if I want to do that.\n. Then add an id to each candidate, like so:\n\n``` vim\nlet s:list = [\n\\ { \"id\": 1, \"title\": \"foo\", \"value\": {...nested datas...} },\n\\ { \"id\": 2, \"title\": \"foo\", \"value\": {...nested datas...} },\n\\ { \"id\": 3, \"title\": \"foo\", \"value\": {...nested datas...} },\n\\ ]\nreturn map(copy(s:list), 'v:val.title   |v:val.id|')\n```\n\nWhere the returned list looks like this:\n\n``` vim\nreturn [\n\\ \"foo  |1|\",\n\\ \"foo  |2|\",\n\\ \"foo  |3|\",\n\\ ]\n```\n. Yes, it's not elegant to use s:list, but the alternative means a lot of code changes in the main script. Also, in newer Vim, you can use v:key instead of adding an id to each candidate.\n\nAnd if you want to ignore the `|1|`, `|2|`, `|3|` part when searching, then use `{ 'type': 'tabe' }`.\n. OK, closing as I've decided against adding support for different var types. The entries have to be reformatted anyhow, let's just do it in the extensions. And s:vars are already used for caching in some extensions, it's really not a big deal to use more.\n. Thanks! I'll try to include this in filename mode instead of introducing a new mode. Will probably go with using `;`.\n. I've added those to the readme on the [extensions branch](https://github.com/kien/ctrlp.vim/tree/extensions). There aren't enough for a separate page, I think.\n. It's molokai: https://github.com/tomasr/molokai\n. You can just remap the keys:\n\n``` vim\nlet g:ctrlp_prompt_mappings = {\n    \\ 'AcceptSelection(\"e\")': ['<c-v>', '<2-LeftMouse>'],\n    \\ 'AcceptSelection(\"v\")': ['<cr>', '<RightMouse>'],\n    \\ }\n```\n\nThe defaults are at `:help g:ctrlp_prompt_mappings`.\n. Please read `:help g:ctrlp_max_height`.\n. To be fair, vimscript itself is kind of hacked together. But anyway, thanks!\n. This has been asked and explained many times. The matching is as good as it gets. Please look into the old issues if you want to find out the reasons.\n. You can use `wildignore` and `g:ctrlp_custom_ignore` to filter stuff. Please read:\n\n``` vim\n:help wildignore\n:help g:ctrlp_custom_ignore\n:help g:ctrlp_dotfiles\n```\n. Oh I see. Well, unless Vim provides MIME types recognition by default which it doesn't, this will have to be done manually (either in a plugin or in a vimrc file). But I don't think I want to do this in ctrlp, sorry!\n. > pretty useless for ctrlp to show files that Vim cannot even edit\n\nIt's not just for ctrlp but that's exactly what `wildignore` is there for. Every file listing plugin and many of Vim's commands and functions rely on this option. What you want is more than any existing plugin or Vim can provide, so by all means, write a new plugin. I'm pretty sure there is no MIME type detection plugin out there, yet, so it might be something worth making.\n. Hmm, it's a suggested solution to always enable the highlighting. If you have/want this highlighting disabled in a few buffers then maybe you shouldn't use these autocmds in the first place?\n\n> Can you open the issue tracker on the repo?\n\nIt's closed because I don't want to provide support for it. The script's simply a rewrite of the older scripts with a few things added on top. If anyone wants to improve it, please send a pull request instead.\n\nThanks!\n. Pulled.\n\nThanks!\n. You can either use `<tab>` to auto-complete the directories in `foo/bar/` (type `f<tab>b<tab>`). Or mark the `foo/bar/baz.txt` file with `<c-z>` then simply type `bazooo.txt` and press `<c-y>`.\n\nSince it can already be done, I won't merge this. Thanks for making it, though.\n. Then use the second method. It requires even less keystrokes: `<c-z>bazooo.txt` vs. `<c-\\>D/bazooo.txt`.\n\nThe description is at `:help ctrlp-input-formats|/f)`.\n. Yes, all the parent directories will be created if not yet exist. So if you use `baz/baz2/bazooo.txt` then `baz/` and `baz2/` will be created under `foo/bar/`.\n\nAnd again, all of this can be found at `:help ctrlp-input-formats|/f)`.\n. It's kind of too late for that. I've coded everything around the fact that the 3 default modes are permanent and the others are optional. It's not only the part in ctrlp#setlines().\n\nFor your problem, you can just map these 3 modes to a few mappings. And maybe reserve the `<c-f>` `<c-b>` for the extensions if you don't want to map them as well.\n. Thanks mattn!\n. ctrlp provides an option to rebuild its statuslines, `g:ctrlp_status_func`, which powerline uses. By the look of it, something triggers fugitive (script 128) to break, leading to its statusline feature breaking, which in turn breaks powerline and then finally ctrlp (script 187).\n\nSo before starting ctrlp with `:CtrlP [dir]`, run `:let g:ctrlp_status_func = {}` and let me know if it fixes the problem. Also, run `:echo g:ctrlp_status_func` after you exit ctrlp and post the output here.\n\nAfter the above, restart Vim, this time run `:let g:ctrlp_log = 1` and then proceed to reproduce the problem. After creating a few error msgs, exit ctrlp and go to the cache directory (should be $HOME/.cache/ctrlp), open the ctrlp.log file and post its content here.\n. OK, I can't reproduce this with the combo conqueterm + ctrlp + powerline + fugitive. I use the settings for conqueterm and powerline found [here](https://github.com/skwp/dotfiles/tree/master/vim/plugin/settings).\n\nGuess this will depend on you to track it down, then. The `:CtrlP [dir]` is handled with the SetWD function. With a [dir] argument, it should return at Line 4: `cal ctrlp#setdir(a:1) | retu`. It's odd though, because ctrlp#setdir is called later on anyway if you just use `:CtrlP`. Why doesn't it break then?\n\nIn any case, it's important to get all the error messages, especially the first ones that create the \"Press ENTER or type command\" prompt.\n. Just a guess, so let me know if this changes anything. For autoload/ctrlp.vim:\n\n``` diff\n@@ -1115,16 +1115,19 @@ fu! ctrlp#statusline()\n        \\ exists('s:marked') ? ' <'.s:dismrk().'>' : ' <->' : ''\n    if s:status != {}\n        let args = [focus, byfname, s:regexp, prv, item, nxt, marked]\n-       let &l:stl = call(s:status['main'], args)\n-   el\n-       let item    = '%#CtrlPMode1# '.item.' %*'\n-       let focus   = '%#CtrlPMode2# '.focus.' %*'\n-       let byfname = '%#CtrlPMode1# '.byfname.' %*'\n-       let regex   = s:regexp  ? '%#CtrlPMode2# regex %*' : ''\n-       let slider  = ' <'.prv.'>={'.item.'}=<'.nxt.'>'\n-       let dir     = ' %=%<%#CtrlPMode2# '.s:dyncwd.' %*'\n-       let &l:stl  = focus.byfname.regex.slider.marked.dir\n+       try\n+           let &l:stl = call(s:status['main'], args)\n+           retu\n+       cat\n+       endt\n    en\n+   let item    = '%#CtrlPMode1# '.item.' %*'\n+   let focus   = '%#CtrlPMode2# '.focus.' %*'\n+   let byfname = '%#CtrlPMode1# '.byfname.' %*'\n+   let regex   = s:regexp  ? '%#CtrlPMode2# regex %*' : ''\n+   let slider  = ' <'.prv.'>={'.item.'}=<'.nxt.'>'\n+   let dir     = ' %=%<%#CtrlPMode2# '.s:dyncwd.' %*'\n+   let &l:stl  = focus.byfname.regex.slider.marked.dir\n endf\n\n fu! s:dismrk()\n@@ -1134,11 +1137,22 @@ endf\n  fu! ctrlp#progress(enum, ...)\n    if has('macunix') || has('mac') | sl 1m | en\n-   let txt = a:0 ? '(press ctrl-c to abort)' : ''\n-   let &l:stl = s:status != {} ? call(s:status['prog'], [a:enum])\n-       \\ : '%#CtrlPStats# '.a:enum.' %* '.txt.'%=%<%#CtrlPMode2# '.s:dyncwd.' %*'\n+   if s:status != {}\n+       try\n+           let &l:stl = call(s:status['prog'], [a:enum])\n+           redraws | retu\n+       cat\n+       endt\n+   en\n+   cal s:progstl(a:enum, a:0)\n    redraws\n endf\n+\n+fu! s:progstl(enum, txt)\n+   let txt = a:txt ? '(press ctrl-c to abort)' : ''\n+   let &l:stl =\n+       \\ '%#CtrlPStats# '.a:enum.' %* '.txt.'%=%<%#CtrlPMode2# '.s:dyncwd.' %*'\n+endf\n \" Paths {{{2\n fu! s:formatline(str)\n    let cond = s:ispath && ( s:winw - 4 ) < s:strwidth(a:str)\n```\n\nIf that doesn't work then try this and see if it makes any differences. Also for autoload/ctrlp.vim:\n\n``` diff\n-   sil! exe 'noa keepa' ( s:mwbottom ? 'bo' : 'to' ) '1new ControlP'\n+   sil! exe 'keepa' ( s:mwbottom ? 'bo' : 'to' ) '1new ControlP'\n```\n\n``` diff\n-   try | noa bun!\n-   cat | noa clo! | endt\n+   try | bun!\n+   cat | clo! | endt\n```\n. Done, both are on the test branch.\n. Can you help me run one last test? Instead of opening ctrlp, run each of these in the same conditions that cause the error if you run `:CtrlP app/models`:\n\n``` vim\n:vnew | lcd /absolute/path/to/app/models | redraw\n:noa vnew | lcd /absolute/path/to/app/models | redraw\n```\n. > the current directory path is overwritten so that the fugitive integration craps out\n\nKind of, but also not exactly (check out `:help :lcd`). And as the small test with :vnew shows, this happens when you use :lcd and :redraw in the same window, you don't even need ctrlp.\n\nAnyway, I think I'll close this as a `wontfix` because:\n- `:redraw` is much needed to properly display the prompt. Can't stop using it just to workaround this. \n  The same goes for `:lcd`, it's needed to make sure no working directory is clobbered.\n- It's an edge case compatibility issue, specifically with skwp/vim-ruby-conque, and the error actually comes from fugitive (which uses a naked `readfile()`).\n\nFor the error in the GUI, I noticed it when working on preserving v:errmsg so it should already be fixed in 80bc9cea8c.\n. Did you press `<cr>` after `..`? You're supposed to submit it, not just typing in the `..`.\n. Please read my answer in #190. You're free to do whatever you want with the script. If you have a working solution for your problem then just use it. There's no need to report it or contact me.\n. Implementing this in ctrlp would be a bit needlessly complicated, I think. You can easily solve your problem with a couple of mappings that map to `:CtrlP %:h` and `:CtrlP` without a `<cr>` (you can expand the path after `:CtrlP` with `<tab>`). So instead of cd'ing inside ctrlp, do it when starting ctrlp.\n\nAlso, you can use `b:ctrlp_working_path_mode` to set this option per buffer, and use the directory mode to change the working directory inside ctrlp.\n. Shouldn't that be `let g:ctrlp_working_path_mode = 1`?\n. OK, just for completeness, guess it's actually what you meant but you should use double quotes instead of single quotes for the part after `-c`, otherwise `'let` is interpreted as a mark `:'l`.\n. Please update the plugin, this has already been fixed for a while. s:clrex has been removed completely.\n. The file in the current window where you invoke ctrlp is excluded from the result. This is intended. Unless there's a missing step here you didn't mention:\n\n> the file opens in a new buffer, but when pressing ctrlp -> buffers\n\nDid you or didn't you move away from the ch3.tex window before opening ctrlp? Moving away as in opening a new tab or a new split with a different file in it, then open ctrlp there.\n. > I want to be in a window, press ctrlp and switch to another buffer.\n\nThen explain to me why would you want to do this?\n1. Open ch3.tex in the current window.\n2. Open ctrlp.\n3. Select ch3.tex from the result list.\n\nch3.tex isn't another buffer. That's why it's excluded.\n. Searching \"murrine_style_draw_box\" on Google gave me these:\n\nhttp://vim.1045645.n5.nabble.com/gvim-CRITICAL-error-td4402467.html\nhttp://thehacklist.blogspot.com/2010/06/resolving-murrinestyledrawbox-assertion.html\nhttp://jpablobr.com/past/resolving-murrine_style_draw_box-error\n\nDoesn't look like there's anything I can do with ctrlp to address this, though.\n. Is the directory on a network share of some kind?\n. OK, since it only happens on one of your machines, it's either an environment thing or there's something wrong with your Vim's configuration. Either way, I'm going to leave this to you to track it down.\n\nIf your Vim's config is different on this new machine, you can try to isolate the problem by following the steps in my post here #46.\n. See `:help g:ctrlp_open_multiple_files` and `:help g:ctrlp_arg_map`.\n. If you don't mind I'd like to see your MyPathFilter function, and MyPathShorten as well if you have one.\n. It looks great but it's a bit too much, I think. And by default, it doesn't actually solve the initial problem.\n\nI've added a custom pathshorten function, hope it's enough. I'm not pulling this because there isn't a good reason to have the option. Those lines are only for visually identifying the entries and aren't used for matching or much else. So there's little point in allowing users to reformat them.\n. Pulled to my local repo for future reference. Closing for now.\n. There isn't a way in ctrlp, plus I think this is something that you should do in your own Vim configuration. Try looking into local .vimrc files (people usually name them `.lvimrc` or `.vimrc.local`), also check out `:help 'exrc'`.\n. Can you let me know your OS, Vim version and most importantly the output of `:echo &term`?\n\nThis is related to how the arrow keys are handled by your terminal. Pressing the keys usually emits `^[` or `<esc>` followed by a sequence of characters: http://www.termsys.demon.co.uk/vtansi.htm#cursor\n\nThere isn't much that can be done to workaround this, but I can try including your &term on [this line](https://github.com/kien/ctrlp.vim/blob/96bd4b37f4459f30cc6963142aff6697e42bf69e/autoload/ctrlp.vim#L757). If you're comfortable with editing the script, put your `&term` value on that line and let me know if it works.\n\nIf it doesn't work, then use `<c-j>` and `<c-k>` to move the selection instead of using the arrow keys.\n. Not sure if I want to change that since we can use the root_markers option for it. See my answer in issue #166.\n. Have you installed any Vim plugin before? Don't drop the entire CtrlP.vim folder into `~/.vim/plugin`. The content of each of the plugin/, doc/, autoload/ folder is supposed to go into the corresponding folder under `~/.vim`.\n\nAlso, I recommend looking into using a plugin manager early on. For example, [vundle](https://github.com/gmarik/vundle) is a good one.\n. I see your point, but the text is actually a bit longer than that:\n\n> Extract the archive to ~/.vim on Linux/MacOSX or $HOME\\vimfiles on Windows.\n\nIt's the little instruction that you see everywhere for extracting stuff. And it really means what it says, that is extracting the content of the archive into the ~/.vim directory. Just follow it to the letter.\n. Yes, it's because ctrlp only started to have extensions after 1.6.1. But again, for the love of everything, **DO NOT** unpack the entire directory structure (autoload, doc, etc) into the `~/.vim/plugin` directory.\n\nI've made sure the ctrlp.zip archive doesn't have a subdir holding everything, so that you can do something like this `unzip ctrlp.zip -d ~/.vim`.\n. Have you done the following things?\n- Update the plugin.\n- Refresh the cache (`<F5>` while in the ctrlp window) after you've added the option. Restart Vim if you want to be sure.\n. OK, this works:\n\n``` vim\nlet g:ctrlp_custom_ignore = 'vendor/bundles/\\(DontIgnore\\)\\@!.\\+$'\n```\n\nAnd this doesn't:\n\n``` vim\nlet g:ctrlp_custom_ignore = 'vendor/\\(bundles/DontIgnore\\)\\@!.\\+$'\n```\n\nThe reason is because `vendor/bundles` also matches `vendor/\\(bundles/DontIgnore\\)\\@!.\\+$`.\n\nBasically, the second pattern means matching any \"vendor/\" not followed by \"bundles/DontIgnore\". A `vendor/bundles` alone fits this description, thus the entire `vendor/bundles` directory tree is removed when the scanner's scanning the `vendor` directory.\n\nSo the first pattern is the one you want.\n. How about you just try the thing out?\n\n> There are in fact, many folders in vendor/ to ignore, MyBundle is the only one to not ignore.\n\nDoesn't `vendor/bundles/\\(DontIgnore\\)\\@!.\\+$` fit that perfectly? It matches **any** \"vendor/bundles/\" not followed by \"MyBundle\".\n\nHow do you think path matching is?\n. Oh, right, I missed this part: `many folders in vendor/ to ignore`.\n\nHow about `vendor/\\(bundles\\)\\@!.\\+$\\|vendor/bundles/\\(MyBundle\\)\\@!.\\+$` then?\n. @balta2ar: Try `\\v(\\.cpp|\\.h|\\.hh|\\.cxx)@<!$`.\n. @balta2ar: Yeah, I missed a `<`. Already edited my comment right after but was a little too slow :)\n. @balta2ar: OK, it's a bit trickier than I thought. This should work, tested and all that:\n\n``` vim\nlet g:ctrlp_custom_ignore = { 'file': '\\v(\\.cpp|\\.h|\\.hh|\\.cxx)@<!$' }\n```\n\nRestart Vim or run `:unlet g:ctrlp_custom_ignore` if you get the \"E706: Variable type mismatch\" error.\n\nBTW, not sure what's going on with github, I keep not getting any notifications for new comments, even for yours that mention my username.\n. @balta2ar: The notifications appear in my github inbox, there's just no orange boxes. I only saw your 3 days old comment when I checked the inbox for someone's comment that I also didn't see.\n. Please read `:help ctrlp-mappings`.\n. You should type `templateemail` without that whitespace in the middle. If you type it without the whitespace but still get the literal string behavior, then make sure you aren't in regexp mode (use `<c-r>` to toggle).\n. OK, I'm going to assume it was the whitespace. Either way, I'm closing this because the fuzzy has been working fine. The plugin has been around for almost a year, people would have flipped if something so basic wasn't working as advertised, don't you think?\n\nAlso, about the `g:ctrlp_match_func` option, it's meant to be used to employ an external matcher, something more powerful than the internal Vimscript one which is the major bottleneck in ctrlp. It's not meant to be a cop-out for the slightest of things, nor for the basic functionalities.\n\nOne of the little things that convinced me to expose the option was the Windows-only search tool \"Everything\", which can search in _millions_ of files and directories, i.e. entire hard drives, extremely fast. Although I don't think Everything can be used with ctrlp, I still want to make it possible to use the power of such tools when the time comes and more of them are around.\n. They link to files in the same working directory, there will be duplicates\nif they are included. Why do you want to include them?\n\nI suppose you mean symlinks in the working directory but they link to files\noutside, in that case take a look at the g:ctrlp_follow_symlinks option.\n\nOn Thu, Jun 14, 2012 at 4:23 PM, georgexsh <\nreply@reply.github.com\n\n> wrote:\n> \n> Currently all same-root symlinks are excluded, ref b22ebbe\n> I don't get reasons behind this behavior, though I'd link those symlinks\n> to be included.\n> Maybe addming another option to control it?\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/kien/ctrlp.vim/issues/215\n. OK, I can always let the follow_symlinks option take another value, say 2, to follow all symlinks indiscriminately. I just want to understand the reasons.\n\nCan you explain why you would want to include both of these?\n\n```\n/root/working-directory/symlink\n/root/working-directory/mytextfile\n```\n\nWhere `/root/working-directory/symlink` pointed to `/root/working-directory/mytextfile`.\n\nThey would appear like this in ctrlp, and select any of the files would open mytextfile:\n\n```\nsymlink\nmytextfile\n```\n. I see. Thanks! I'll add the value soon.\n. Actually, the counter isn't real time, it only gets updated when the scanning of a directory depth is finished. When it hangs like that it basically means it's still scanning, and that directory depth just has a lot of files.\n\nSo yeah, no way to workaround because that's just how the counter works.\n\nAs for speeding this whole process up, take a look at the `g:ctrlp_user_command` option. Also, after the first scan of a directory tree, the refresh will be much faster because the OS caches the results.\n. Thanks! Glad you like it!\n\nAlso, since you restart Vim often, check out the clear_cache_on_exit option, see if setting it to 0 helps.\n. It is not yet possible to do this with the default_input option, I'll enable it regardless but would it be simple enough? It would work with every command, including `:CtrlP` and those that already accept a directory or a buffer name:\n\n``` vim\nnn <silent> ,d :let g:ctrlp_default_input = expand('<cword>')<cr>:CtrlPBufTag<cr>\n```\n\nUsing a command argument would be heavy on the coding side, but the mappings would look like these:\n\n``` vim\nnn <silent> ,d :exe \"CtrlPBufTag \".expand('<cword>')<cr>\nnn <silent> ,d :exe \"CtrlPBufTag -default-text=\".expand('<cword>')<cr>\n```\n\nAlso, currently you can insert `<cword>` through using the `<c-\\>` mapping inside the prompt.\n. Thanks for the pull request! But this is kind of pointless. `en` and `fini` are the short forms of `endif` and `finish`, and they are just as valid, see `:help :en` and `:help :fini`. And being listed as a valid command in Vim's help is safe enough, I think.\n. Have you cleared the cache after setting the options? Try pressing `<F5>` inside the prompt or restart Vim, just to be sure.\n\n> I thought these settings were supposed to help eliminate unwanted files from showing up in the results.\n\nThey are, and they have been working perfectly fine pretty much since introduction. The only problem people have had is not knowing about clearing the cache.\n. I also have had image files ignored with `wildignore` for a really long time now because I do web works, this line among others has worked without any problem in ctrlp and everywhere else:\n\n``` vim\nset wildignore+=*.zip,*.rar,*.gz,*.png,*.gif,*.jpg\n```\n\nPlease try the following:\n- Update the plugin to the current HEAD of master.\n- Clear the cache with `:CtrlPClearAllCaches`.\n- Start Vim with minimal configuration like this:\n  \n  ```\n  vim --noplugin -u path/to/a/simple/.vimrc\n  ```\n  \n  Use this as the content of the above .vimrc:\n  \n  ``` vim\n  set nocp\n  set runtimepath^=~/.vim/bundle/ctrlp.vim\n  runtime! plugin/ctrlp.vim\n  \n  set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.jpg,*.gif,*.png,*.pdf\n  let g:ctrlp_custom_ignore = {\n    \\ 'dir':  '\\.git$\\|\\.hg$\\|\\.svn$',\n    \\ 'file': '\\.png$\\|\\.gif$\\|\\.jpg$',\n    \\ }\n  ```\n  \n  Then try to reproduce the problem.\n\nAlso, try this both before and while using Vim in minimal configuration:\n1. cd into the `app/assets/images/` directory.\n2. Try using tab completion: type `:edit grid.p<tab>` where `<tab>` is the `<tab>` key.  \n   In both times, see if `grid.p` is auto-completed to `grid.png` or not.\n. Thanks! I'm going to go ahead and close this one now. For one, whatever the external source that causes `globpath()` to fail to obey `wildignore` probably isn't something I can address in ctrlp anyway. I mean if calling `globpath(path, expr)` suddenly isn't enough to apply `wildignore` then what is there to do?\n\nHowever, if you manage to track down the plugin or config that causes this, then please do leave a comment.\n. Ah, I thought of this before, but unfortunately Vimscript can't be run asynchronously. So no, it's not possible to build or rebuild cache in the background, or doing anything in the background for that matter.\n\nI think my closest attempt at this was to run the needed commands in another Vim instance through the client/server interface. I abandoned the idea because it was difficult to reliably implement for everyone. But if I remember correctly, it kind of worked.\n\nIf anyone wants to try, check `:help remote_send`. Basically, you just need to send the `:CtrlP /path/to/build/cache<cr>` string to the other Vim instance.\n. Alright, closing.\n\nAlso, as an addendum, to clear cache and rebuild, you can send `:CtrlPClearCache<cr>:CtrlP /path/to/rebuild/cache<cr>`. And to close the match window after the rebuild, send `:winc c<cr>`.\n. Close to a million entries is simply too many. ctrlp or vimscript can't handle that, at least with our current hardware. And I don't think there is any way to use vim's native tag jump in ctrlp.\n\nSo I suppose you just don't do it, don't use it for large tag files.\n. That'd require a pretty big code change, I think. Plus I don't really like making more special cases for the input.\n\nFor an alternative solution, you can use something like this:\n\n``` vim\nlet g:ctrlp_cmd = 'exe \"CtrlP\".get([\"\", \"Tag\", \"BufTag\"], v:count)'\n```\n\nThen pressing `<c-p>` will run `:CtrlP`, `1<c-p>` will run `:CtrlPTag` and `2<c-p>` will run `:CtrlPBufTag`. So technically it's still 1 mapping, and for example, instead of typing `<c-p>t anystring`, type `1<c-p>anystring`.\n. OK, closing. This won't be added. There's nothing in the current code that can support or extend into it. I probably won't accept a patch for something like `f anystring` or `#f anystring` either. It's a big code change for a rather small convenience.\n\nBut in any case, there'll need to be new unique and memorable identifiers for all the extensions, user made ones as well, i.e. the `t`, `f`, `bt`... that you suggest. This isn't much difference from predefining a bunch of mappings, in the sense that you have to memorize something. And if you have to memorize something anyway, then just memorize your mappings instead of the identifiers. And I hope that doesn't affect your workflow negatively.\n. Those are just the first files found in the directory. There's nothing special whatsoever. What you want is MRU mode, or Buffer mode would be suffice. Also, for that exact use case you have, you can just use Vim's `<c-w>T`, this will move the mistakenly opened split to a new tabpage instead.\n. No, they are just the ones that happen to be on the top of the returned list. And thanks for the idea, I'll think about it.\n. Thank you! I've made the current behavior optional instead. The new option is `g:ctrlp_tabpage_position`.\n. The basic usage on the homepage and in the readme should be enough, I think. All the pages link to each other anyway.\n\nFor your problem, please see #220. Most likely it's the cache. If it isn't then if you can, do some tests and help me track down the culprit.\n\nThanks!\n. You're correct, it's capped at the max height. That's pretty much how it works. The match window simply shows a few of the matches. To show more you can just change the max height option. I don't think I want to change this behavior now and make the window scrollable, mainly for performance reasons.\n. When `g:ctrlp_dotfiles` is disabled, all dotdirs under the working directory are ignored, no exception. The current file you are editing is in a dotdir or not doesn't matter. So basically what you want here is for ctrlp to make an exception for the directory of the current file being edited, and to disregard the `g:ctrlp_dotfiles` option in that case.\n\n> I would expect that when g:ctrlp_dotfiles is disabled, ctrlp wouldn't look past a dotfolder for a root marker.\n\nOK, why would it do that? What if people genuinely want to root to .git? What you expect is for the finding root feature to unexpectedly break when the current file you're editing happens to be in a dotdir.\n\nIf you often have files you want to search for inside dotdirs, then just don't reset `g:ctrlp_dotfiles`. But if you insist on setting it to 0, then use something like `:CtrlP %:h` to start ctrlp in those special cases.\n\nThis isn't a bug as the ignoring works exactly as it should. And I don't think want to add an option for this because it's simple to workaround.\n. Latex isn't a default filetype so you'll have to set the arguments to use to call ctags as well. You can set them with the `g:ctrlp_buftag_types` option.\n. Duplicate of #196. You're supposed press Enter (`<cr>`) to submit the dots.\n. No worries! At least searching is a bit easier now thanks to this :)\n. I'm still undecided, but I might look into adding options for defining custom opening functions so that this can be configured.\n\nHowever, if I decide not to add any option, this can still be done within an [extension](https://github.com/kien/ctrlp.vim/tree/extensions). One that only shows files it has a special opening command available for.\n. I've added an option. This is probably as far as I'm going to go with this feature.\n\nHere's an example function to open HTML files in the default web browser from the `<c-o>` prompt:\n\n``` vim\nfunction! HTMLOpenFunc(action, line)\n    if a:action == 'x'\n\n        if fnamemodify(a:line, ':e') =~? '^html\\?$'\n            \" Get the filename\n            let filename = fnameescape(fnamemodify(a:line, ':p'))\n\n            \" Close CtrlP\n            call ctrlp#exit()\n\n            \" Open the file\n            silent! execute '!xdg-open' filename\n        else\n            \" Not a HTML file, simulate pressing <c-o> again\n            call feedkeys(\"\\<c-o>\")\n        endif\n\n    else\n\n        \" Use CtrlP's default file opening function\n        call call('ctrlp#acceptfile', [a:action, a:line])\n\n    endif\nendfunction\n\nlet g:ctrlp_open_func = { 'files': 'HTMLOpenFunc' }\n```\n. @mMontu: no, the MRU list only records buffers that you open in Vim. But I'll see if it makes sense to allow adding items manually, since this probably won't be used for anything else.\n. @mMontu: I've added a new function: `ctrlp#mrufiles#add()`. You can call it, for example, after the file opening line in the `HTMLOpenFunc` function above. Use `call ctrlp#mrufiles#add(filename)`.\n. @mMontu: Sorry to disappoint you, but those are only visual cues :) For example, the top level folds with `*` have multiple functions, and the ones with `-` only have one function. The foldmethod is just `marker` with the default markers `{{{,}}}`, enforced by the modeline.\n. Did you test with the same buffer in the first window and in the current window? Does it make any difference if you set   `g:ctrlp_switch_buffer` to 0?\n\nEither way, can you provide steps to reproduce and the window layout (the positions and the file/buffer of each window) you have when opening the entries? Take a couple of screenshots if you can.\n. I see. With the `switch_buffer` option on, the cursor will be moved to the first window that has the buffer when an opening command is issued. It's very similar to running `:sb` when Vim's `switchbuf` has `useopen`.\n\nThis is still kind of counter intuitive with `:e`, though. I'll change it.\n. > I can open the file manually and then use the :CtrlPMixed command to find the file like normal.\n\nHave you cleared the cache after setting the options? You can either press `<F5>` in the match window or run `:CtrlPClearAllCaches` from Vim's command line.\n. Yes, definitely. Now I just have to decide which other items should be on it.\n. @timc3 @screwzm Have you guys increased the max_file limit before clearing the cache? That's pretty important.\n. @screwzm by default, ctrlp also set its own local working directory. Take a look at `g:ctrlp_working_path_mode` and `g:ctrlp_root_markers`.\n. @screwzm a blank window containing a unnamed buffer including the first one when you start Vim normally, is always reusable by default.\n. @screwzm then it's probably not a normal blank window. CtrlP only avoids replacing a buffer if it's a special buffer (unlisted with a non-empty buftype other than \"help\"), or has unsaved changes without hidden or autowrite set.\n. That dialog is a Vim's built-in feature that's triggered automatically. See `:help tag-matchlist` and check the example output under `:tselect`. And because these commands only accept the tag name, it's really hard to differentiate 2 tags with the same name in different files.\n\nThe tag extension has a workaround for this, but apparently it doesn't always work.\n\nCan you provide a test case including the tag names, the filenames, the tag files and their locations?\n. Let me know if this patch fixes it:\n\n``` diff\ndiff --git a/autoload/ctrlp/tag.vim b/autoload/ctrlp/tag.vim\nindex c54d5ad..f3efbb8 100644\n--- a/autoload/ctrlp/tag.vim\n+++ b/autoload/ctrlp/tag.vim\n@@ -23,8 +23,9 @@ let s:id = g:ctrlp_builtins + len(g:ctrlp_ext_vars)\n \" Utilities {{{1\n fu! s:findcount(str)\n    let [tg, fname] = split(a:str, '\\t\\+\\ze[^\\t]\\+$')\n-   let [fname, tgs] = [expand(fname, 1), taglist('^'.tg.'$')]\n-   if empty(tgs) | retu [1, 1] | en\n+   let tgs = taglist('^'.tg.'$')\n+   if tgs == [] | retu [1, 1] | en\n+   let fname = fnamemodify(simplify(fname), ':s?^[.\\/]\\+??:p:.')\n    let [fnd, ct, pos] = [0, 0, 0]\n    for each in tgs\n        let ct += 1\n```\n. OK, I was able to reproduce the switching problem. This fixes it for me:\n\n``` diff\ndiff --git a/autoload/ctrlp/tag.vim b/autoload/ctrlp/tag.vim\nindex c54d5ad..34d5043 100644\n--- a/autoload/ctrlp/tag.vim\n+++ b/autoload/ctrlp/tag.vim\n@@ -23,9 +23,20 @@ let s:id = g:ctrlp_builtins + len(g:ctrlp_ext_vars)\n \" Utilities {{{1\n fu! s:findcount(str)\n    let [tg, fname] = split(a:str, '\\t\\+\\ze[^\\t]\\+$')\n-   let [fname, tgs] = [expand(fname, 1), taglist('^'.tg.'$')]\n-   if empty(tgs) | retu [1, 1] | en\n-   let [fnd, ct, pos] = [0, 0, 0]\n+   let tgs = taglist('^'.tg.'$')\n+   if tgs == []\n+       retu [1, 1]\n+   en\n+   let bname = fnamemodify(bufname('%'), ':p')\n+   let fname = expand(fnamemodify(simplify(fname), ':s?^[.\\/]\\+??:p:.'), 1)\n+   let [fnd, ct, pos, idx] = [0, 0, 0, 0]\n+   wh idx < len(tgs)\n+       if bname == fnamemodify(tgs[idx][\"filename\"], ':p')\n+           cal insert(tgs, remove(tgs, idx))\n+           brea\n+       en\n+       let idx += 1\n+   endw\n    for each in tgs\n        let ct += 1\n        let fulname = fnamemodify(each[\"filename\"], ':p')\n```\n\nThe patch was created with `$ git format-patch -1 > test.patch` and works fine when applying. But I haven't updated my git installation for more than a year, so maybe that's the reason.\n. Great, thanks! I'll push this to master soon once I'm sure there isn't any side effect.\n. @jszakmeister can you provide a test case like Jeroen did in the 3rd comment?\n. Looks like you're using [an older commit without the above fix](https://github.com/jszakmeister/vimfiles/blob/41533f89a3b25a0f9eb4ca20878fdd01ce167d51/bundle/ctrlp.vim/autoload/ctrlp/tag.vim#L26-L28). Make sure to update to HEAD of `master`, and let me know if you still see the issue.\n. I still can't reproduce it by following the steps in your test. And oddly enough, the old version can also get the tag count from your tags file (meaning no Vim's tag-matchlist dialog).\n\nWhat's the full path to file1.py and file2.py? And what does `:pwd` return after you open gVim?\n. Please try starting gvim with this:\n\n```\ngvim --noplugin -u path/to/a/simple/.vimrc\n```\n\nUse this as the content of the above .vimrc:\n\n``` vim\nset nocp\nruntime! plugin/ctrlp.vim\n```\n\nJust make sure the parent directory of `plugin` is in your runtimepath, for example ~/.vim.\n\nSee if you still get the tag-matchlist.\n. It might be something that changes the `tags` option (see `:help 'tags'`), or the working directory. I'm honestly not sure.\n. Ah I see. Thanks! When `cst` is set, `:tag` uses `:cstag` which in turn performs `:tjump`. And `:tjump` always shows tag-matchlist when there are 2 or more similarly named tags.\n\nSince tag.vim only works with tags files, it might be a good idea to reset that option when using `:tag`.\n. You can by pressing `<F5>` in MRU mode. A bit hidden but this is mentioned in the doc at `:help ctrlp-mappings`.\n. In answer to your initial question, no, it's not possible. The `prompt_mappings` option is only meant for the mappings you see in the `ctrlp-mappings` section in the doc. You also shouldn't remap `<space>` because it's one of the keys used for inputting, and there isn't a way to map it only in one mode.\n\nYou may, however, use the followings which work in all modes, but be warned that you're not supposed to do this:\n\n``` vim\nlet g:ctrlp_prompt_mappings = { 'PrtAdd(\".*\")': ['<space>'] }\n\" or\nlet g:ctrlp_prompt_mappings = { 'PrtAdd(\".*\")': ['<c-@>'] }\n```\n\nOtherwise, just type `.*` directly.\n. This actually isn't a typo as I purposely changed it pretty early on. You can see this in the doc [here](https://github.com/kien/ctrlp.vim/blob/4d5b39c0cf005bc48e6d5916e631c0b444ebc419/doc/ctrlp.txt#L564), and [here](https://github.com/kien/ctrlp.vim/blob/4d5b39c0cf005bc48e6d5916e631c0b444ebc419/doc/ctrlp.txt#L1183). The long form's kept in the code because I don't want to break people's mappings.\n. Yes, there isn't a way to change the autocomplete, otherwise I'd have done it as well. And technically you were right, there isn't a `:CtrlPMRU` defined, it's just an abbreviation of `:CtrlPMRUFiles` which I think is slightly more difficult to remember.\n. Those autocmds work fine for me. I also use some autocmds to restore cursor position and folds and never had a problem.\n\nCan you consistently reproduce this? If you can, please provide a test case including the buffers you have open, how you move away and reopen them with ctrlp.\n. If I understand your situation correctly, you have a `.git` directory at your home directory? And the svn project is in a subdirectory also under your home directory? If that's correct, just put `.svn` in the root_markers option:\n\n``` vim\nlet g:ctrlp_root_markers = ['.svn']\n```\n\nAs for why, see my answers in issue #181. But now I think I might need to change this a bit. It seems like a lot of people expect it to work without the priority thing.\n. No, there's no other way with the plugin. But if you can, update your project and SVN install. From SVN 1.7, there's only one `.svn` directory at the root of the project: http://subversion.apache.org/docs/release-notes/1.7.html#single-db\n\nAnyway, I'll be making some changes to remove markers' priority so that people using multiple VCS'es won't have to put `.svn`, `.bzr`, ... in the root_markers option. This option will be reserved for the `.root` type of markers.\n. @danielb2: The number on the left is the total number of files found until the last directory depth.\n\nHow do you tell ctrlp to only search for .php files?\n\nAlso, the root_markers option is only for determining the local working directory inside ctrlp, it has no impact on the indexing. Unless of course the new root (with root_markers) is a parent directory of the old root (without root_markers), then the indexing being slower is simply because the parent directory has more files.\n\nP.S. I wasn't ignoring this, btw. For some reason I didn't get any notification for your comment, so I only saw it just now.\n. @prezjordan: It's an optional feature which you can disable. See `:help g:ctrlp_working_path_mode`.\n. No, it's not possible. This is pretty much what regexp mode is meant for: giving users control over the exact search patterns. You can just type `app.*a\\.xml`.\n. This simply can't be done. Vim is single threaded. Things can't be run in the background because there isn't a background to begin with. Everything happens in Vim happens in the same thread as your text editing actions.\n. Hmm, sounds like you have a different definition of \"background threads\". Things that you don't see running are not things running in a background thread. And I'm pretty sure the linters are simply fast enough so you don't notice the delay most of the times.\n. Oh I see. But it's simply impossible with Vimscript because Vim itself is single threaded.\n. AsyncCommand uses `--remote`. Basically, it runs the needed commands in another Vim instance. This also requires Vim built with `+clientserver`.\n\nThe top answer in the stackoverflow quesion also offers the same thing: `:!gvim -c 'MyMake'`, this starts another Vim instance.\n. Well, I just don't think it's reliable enough to implement within the plugin. But yeah, try it in your own configuration if you want, see if it works for you.\n. Yes. But I'm not completely against the idea. It's just not on a todo list.\n. I can't reproduce and there has not been any issue related to ctrlp's buffer local options. Please test with a clean environment to make sure this is a ctrlp's problem.\n. Did you also test with a minimal .vimrc? Or with simply using `:edit` to open the files?\n\nMake sure you don't have a `set number` line somewhere in your .vimrc before the `set rnu` line.\n\nIt still looks to me like it has something to do with your configuration. A single `set rnu` in .vimrc works for me (like it does for someone else [here](http://superuser.com/questions/259408/vims-relativenumber-setting-and-multiple-buffers)). And given how often this option is highlighted as a cool feature of Vim 7.3, a lot more people would have reported this if it came from having `set rnu` alone.\n. No, there isn't a way. Spaces are a part of the search pattern because they can be in a filename.\n. I see. I did study fuzzyfinder while writing ctrlp, many of ctrlp's features are my own interpretations of fuzzyfinder's. So for the most part, I'm sure you won't miss much.\n\nCheers!\n. > Maybe mention in the doc that custom_ignore is ignored if user_command is used?\n\nIt's mentioned, or implied, in the doc under [`g:ctrlp_custom_ignore`](https://github.com/kien/ctrlp.vim/blob/4d5b39c0cf005bc48e6d5916e631c0b444ebc419/doc/ctrlp.txt#L228) and under [`g:ctrlp_user_command`](https://github.com/kien/ctrlp.vim/blob/4d5b39c0cf005bc48e6d5916e631c0b444ebc419/doc/ctrlp.txt#L242-243).\n\n> Variable type mismatch for: g:ctrlp_custom_ignore\n\nThe options are for users to set. This error can only happen if _you_ set the option twice in one Vim session in different types. The plugin itself does not create `g:ctrlp_custom_ignore`.\n\nEdit: OK, I guess you probably don't even know that in Vim we can't set a variable in a different type without `:unlet` it first, otherwise you wouldn't have associated this error with the plugin as it is completely outside of the plugin's control. See `:help E706`, and think of the options as simple variables that you need to set.\n. Merged.\n\nCheers!\n. Can you share your full Vim configuration? Also, let me know the exact steps to reproduce these beginning from starting up Vim.\n\nLine 17 of BuildPrompt is a `redraw` command and E68 is related to syntax highlighting so the first problem might have something to do with the other buffers you have open (since `redraw` affects the whole screen). You can test this by opening ctrlp right after starting up Vim, and try to reproduce the error.\n\nFor the second problem, does the entire Vim window become jumpy or just the content of the non-ctrlp buffer(s) become jumpy?\n. What OS are you using on this computer? Do you have any customizations for amix's config?\n\nAlso, from the error msgs, it looks like this starts right from the init step to every action that calls BuildPrompt, including adding and deleting characters.\n\nI doubt this has anything to do with the cache, but you can try deleting the ctrlp.vim bundle and the cache directory, then clone the plugin again from here.\n. OK, I see. I'm going to need you to help me test these:\n- Instead of using amix's config, start gVim with minimal configuration like this:\n  \n  ```\n  gvim.exe --noplugin -u path/to/a/simple/_vimrc\n  ```\n  \n  You can add the extra arguments to the gVim shortcut, it works the same as running from a command line.\n  \n  Use this as the content of the `path/to/a/simple/_vimrc` file:\n  \n  ``` vim\n  set nocp\n  set runtimepath^=path/to/ctrlp/directory\n  runtime! plugin/ctrlp.vim\n  ```\n  \n  Change the `path/to/ctrlp/directory` to the location of ctrlp on your system.\n  \n  After starting gVim, press `<c-p>` to open ctrlp, then try to reproduce the problem.\n- Instead of the above test, apply this patch and start gVim in your normal configuration, then try to reproduce the problem:\n  \n  ``` diff\n  diff --git a/autoload/ctrlp.vim b/autoload/ctrlp.vim\n  index b27380d..7bb0627 100644\n  --- a/autoload/ctrlp.vim\n  +++ b/autoload/ctrlp.vim\n  @@ -529,7 +529,7 @@ fu! s:BuildPrompt(upd, ...)\n          \\ : ['CtrlPPrtText', 'CtrlPPrtCursor', base]\n      let hibase = 'CtrlPPrtBase'\n      \" Build it\n  -   redr\n  +   norm! :\n      exe 'echoh' hibase '| echon \"'.base.'\"\n          \\ | echoh' hiactive '| echon \"'.prt[0].'\"\n          \\ | echoh' hicursor '| echon \"'.prt[1].'\"\n  @@ -1597,7 +1597,8 @@ fu! s:insertstr()\n   endf\n  \n   fu! s:textdialog(str)\n  -   redr | echoh MoreMsg | echon a:str | echoh None\n  +   norm! :\n  +   echoh MoreMsg | echon a:str | echoh None\n      retu nr2char(getchar())\n   endf\n  ```\n\nAlso, make absolutely sure you're using the latest version of ctrlp by cloning it directly from here (the ctrlp's commit that amix's config points to is 3 months old).\n\nLet me know how it goes in each case.\n\nThanks!\n. I think the problem with the patch is the whitespaces (tabs vs. spaces, it happened before).\n\nAs for the errors, if ctrlp works in the first test, then something in your normal configuration is definitely conflicting with ctrlp.\n\nIf you're interested in tracking it down, you can try disabling each of the plugins and remove parts of your _vimrc and other configs etc... until you find the culprit. If you do find it, then please leave a comment or just open a new issue. If I can, I'll try to find a workaround for it regardless if it's a ctrlp's problem.\n. Hmm, sounds like it might be related to this powerline issue: https://github.com/Lokaltog/vim-powerline/issues/161\nI can't reproduce that, though so I'm not sure if it has something to do with the errors here.\n\nAs for the coloring issue, I think you should open a new issue with powerline since it is what powerline does. Other than calling a specified function, ctrlp doesn't have much say in how the custom statusline works or looks like.\n. It works fine for me and the code checks out, too. What mapping or command do you use to open ctrlp?\n. I can't reproduce this and I don't see how this part of the code can go wrong. It would be a much more widespread issue if it was straight up broken.\n\nCan you try deleting and cloning the repo again? And if that doesn't help, please do the following:\n1. Set `let g:ctrlp_log = 1` in your .vimrc.\n2. Restart Vim and start ctrlp to try to reproduce the error.\n3. Exit ctrlp and go find the `~/.cache/ctrlp/ctrlp.log` file.\n4. Post the content of the ctrlp.log file here.\n\nThanks!\n. Ping.\n\nI just need the error log because the E731 doesn't look like it's the only error message. It makes no sense to have this particular error with the current `SetWD()` function.\n\nAlso, just to avoid any interference, try starting Vim in minimal configuration like this when getting the error log:\n\n```\nvim --noplugin -u path/to/a/simple/.vimrc\n```\n\nUse this as the content of the path/to/a/simple/.vimrc file:\n\n``` vim\nset nocp\nset runtimepath^=path/to/ctrlp/directory\nruntime! plugin/ctrlp.vim\n\nlet g:ctrlp_lazy_update = 1\nlet g:ctrlp_max_files = 30000\n```\n. OK, I'm closing this for now due to lack of information. I can only see the E731 error happens there if somehow you use the older `autoload/ctrlp.vim` file with the newer `plugin/ctrlp.vim` file, thus passing a Dictionary from `:CtrlP` to be used as a String with the older `SetWD()` (line 3 of it had a `strlen()` call).\n\nBut it makes no sense with the newer `autoload/ctrlp.vim` because the newer `SetWD()` always treats its main argument as a Dictionary. There's just no way to create an E731 there, even if trying.\n\nSo as I see it, it's either an old Vim 7.0 bug which I can't reproduce, or something is getting mixed up in your configuration. If you manage to grab the error log or find out something new or how to consistently reproduce this, please leave a comment and reopen the issue.\n. Hmm, I don't see a point in adding that one pair of movement mappings. The other mappings get a mention because they are somewhat unique to ctrlp, people don't expect and don't look for them.\n. Maybe because they are guessable (`hjkl`)? But if someone doesn't figure it out, they can always read the mapping help at `:help ctrlp-mappings`, which is what I prefer people to do.\n. Yes, you can. Check the bundled extensions for examples. Here's the syntax highlighting in bookmarkdir.vim:\n\nhttps://github.com/kien/ctrlp.vim/blob/master/autoload/ctrlp/bookmarkdir.vim#L86-99\n. Oh, I see. That's currently only possible with filename related modes (files, buffers, mru etc). It's a bit complicated to highlight matches in other modes because of overlapped highlightings so I just disable it.\n\nI don't have any plan to enable it any time soon.\n. Yes, that's the spot. But just enabling it like that won't work well in many cases (e.g. it highlights the wrong strings).\n. Well, it's kind of too late for such a big change, or inclusion. Besides, I prefer using a buffer from the very beginning, it's basically the reason ctrlp exists and is what it is. But using a menu to display the results is how fuzzyfinder does it, so if that makes or breaks it for you then you might want to give fuzzyfinder a try.\n. See `:help g:ctrlp_prompt_mappings`, and also read the note under it regarding `<c-h>` and `<bs>`.\n. `:CtrlP .`, or turn off the root finder with `g:ctrlp_working_path_mode`.\n. Actually, this is quite a bit different from 159 and is simpler to implement. I can just compare a filename with the patterns in the option and push it down the results list if it matches them.\n\nBut I really don't want to complicate the matching even more now. In one way or another, this option will have to be checked and compared with on every single change in the search string (i.e. on almost every keystroke).\n. > If 'undordir' is set, the files are created with the same extension as the original file, so wildignore can't be used.\n\nYou can ignore directories with `wildignore`, not only files. Try `set wig+=*/undo/*` (or when `ssl` exists and is off: `set wig+=*\\\\undo\\\\*`).\n\nAs for custom_ignore, because the rtscript extension looks directly for files under `&rtp`, ignoring directories alone (e.g. with `{ 'dir': '/undo/' }`) won't work. You need something like `let g:ctrlp_custom_ignore = '/undo/'` which applies to everything (note that `set wig+=*/undo/*` does, too).\n. Merged. Thank you!\n. I suppose you use `g:ctrlp_user_command`?\n. What do you mean by \"won't search inside directories\"? Does setting `let g:ctrlp_custom_ignore = ''` change anything? What's the working directory inside ctrlp when you open it?\n\nI don't think this has anything to do with 258. He uses `g:ctrlp_user_command` to get the index from `git ls-files`.\n. It was because of a change I made to the default ignore rules that covered too much stuff. This should be properly fixed now in b7cb2f5.\n. `:CtrlP app/decorators` should open ctrlp in app/decorators and `:CtrlP app/models` should open it in app/models. This is the default behavior.\n\nYou probably have `set autochdir` somewhere in your config or a plugin or function that changes the working directory (outside of ctrlp) after opening a file.\n. Thanks! :)\n\nIf you want to use that autocmd or `set autochdir` later on, just use an absolute path with the `:CtrlP` command (since `:CtrlP directory` is basically `:lcd directory`). This probably applies to `:CommandT`, too.\n. It's the root finding feature. You can turn it off with the `g:ctrlp_working_path_mode` option.\n. This is a known limitation (of this type of prompt). I have to create a mapping for each and every key while the `timeoutlen` has to be set to 0. Because of these reasons it's not possible to type accented or multibyte chars that require multiple keypresses.\n. @lucapette: No, it's fine. I do take note of everything even if I don't post a reply :) Thank you!\n\nBut I'm still a bit undecided about the FAQ, actually. Right now, other than the issues with people not knowing about the cache, the other issues only ever show up once or twice, and they are pretty much \"how it is\" kind of things (either something with no workaround or a feature mentioned in the readme and in the help). If they keep showing up more, though, I'll probably put a few into a separate FAQ.md or a wiki page and put a link in the readme.\n. > Expected:\n> Vim opens with the CtrlP prompt open (vim -s enters the keys in the given file after the vimrc has been loaded)\n\nHmm, `vim -s file` is basically `:source! file` (note the `!`), so if you put `:CtrlPMixed` in that file, Vim will open with `:CtrlPMixed` in the command line, ready for you to press `<cr>` (this isn't your expected behavior). So unless every other terminals you've tested for some reason output the `/tmp/ctrlp` file with Windows' line ending (CR+LF), `vim -s file` won't ever work the way you expect it to work.\n\nIn any case, try just typing `vim -c \"CtrlPMixed\"`, or without typing the `-c` part, just `vim` and then press `<c-p>`, instead of going through the extra step of putting the command into a file, which shouldn't work in the first place.\n\nClosing this because the expected behavior is an incorrect behavior.\n. No, the new line only works if it has a CR character in it like a Windows' line ending, with CR+LF (`\\r\\n`). The carriage return (CR) will be read as a `<cr>` in Vim. That's the only way `vim -s file` is going to do what you're expecting it to do. But on Ubuntu, the new line is only comprised of a LF (`\\n`).\n\nI think what you actually meant to use is `vim -S file`. There's a big difference between `-s` and `-S`. And `-S` does exactly the behavior that you're expecting `-s` to do here.\n\nBut anyway, it's up to each person to choose what to use, making sense be damned... old habits die hard and all that. If you choose to keep trying to use `vim -s file` then who am I to say otherwise?\n. What do you see in Vim when using `-S`? Also, try `vim -c \"CtrlPMixed\"`.\n\n> If the CR character is not interpreted in the same way as \\n by vim -s.\n\nThat wasn't what I meant. What I meant was that a new line on Ubuntu only has a LF, so `vim -s file` should never work like you say.\n. Nope, that doesn't ring any bell. I'm sorry but I've no idea what's wrong with your environment at this point. None of the behaviors makes sense. I guess you'll have to settle with not being able to open ctrlp this way.\n. So far it's just yours. And that just adds to the mystery. Since first you said `vim -s file` worked fine (including with ctrlp) in all other terminals that you'd tested, while it should not. Now both `-c` and `-S` don't even work where `-s` worked. So everything is basically working backward on your set of terminals. And that's what I mean by \"your environment\".\n. Yes, `-c` and `-S` work fine for me on multiple OS'es including Ubuntu. Never had a problem.\n. Hmm, why? The tab completion inside the prompt isn't meant to be a replication of `:e`'s. The resulting string is simply used as a search string to search for files and directories _under_ ctrlp's current working directory, that's why it's relative.\n. > if you want to open ANY file you no longer have to think \"Is the file in my current directory or not?\".\n\nThat's not what ctrlp sets out to do. It doesn't and can't care about files outside of the working directory. Also, CtrlPMixed doesn't include CtrlPDir.\n. This is an intended behavior (done with the `:hide` command). When the changed buffer is hidden, the changes are not saved and also won't get lost.\n\nSo why do you want the confirmation dialog? I don't see any reason to have it at all.\n. I've changed this behavior a bit. Now instead of hiding the modified buffer and reusing the window, ctrlp opens a new split for the new buffer when `hidden`, `confirm`, `autowriteall`... are off.\n\nIf you find any problem with this change, let me know.\n. It's the root finding feature controlled by `g:ctrlp_working_path_mode`. Without setting it, it's defaulted to `'rc'`. The behavior you're seeing is the `'c'`.\n\nYou can use `let g:ctrlp_working_path_mode = 0` to disable this feature.\n\nYour other projects probably have a root marker (`.git`, `.hg`, etc) at `~/code/project`.\n. I'm not sure myself. The original screenshot was taken sometime last year. But it was likely one of the Proggy fonts or the ProFont at a larger size. If not, then I might have uninstalled it at some point.\n. It was definitely a pixel font, though. I was trying a lot of pixel and bitmap fonts at the time. I think I stopped using this one because of the small line space which made reading difficult.\n. Yes, I'm back to Consolas and Monaco now.\n\nAlso, thanks for the tip!\n. Added. You can check `:help g:ctrlp_switch_buffer` for details.\n. What tags file do you mean? And how exactly can scrapping a file list from a tags file be faster than say `git ls-files`?\n. Hmm, I guess you mean ctags-generated tags files, or similar... Well, the file list that can be scrapped from a tags file will be most definitely not the same as the index returned from `globpath()`, `find`, `dir` or `git ls-files`. So it simply can not be used as a direct replacement for those. Furthermore, I don't think scrapping and filtering a massive tags file for only a few files can be faster or more effective.\n. And not just filtering, whenever you wanted to update the file list, you would first have to run ctags on the entire code base to update the tags file...\n. Yeah, it's not really a bad idea, I just think it isn't very practical.\n. Thanks! But this is a user option. The most I can do with this type of information is adding new examples in the docs.\n. `mdfind` hardly fits the bill. It doesn't list hidden files by default, and the syntax you use only lists files that have `file` in their metadata (most likely in the filename). It only shows about 250 files in ~5000 total in my home directory.\n. Closing. This isn't exactly necessary and `mdfind` also doesn't work for what we need.\n. Added. Thank you!\n. Thanks! Just pushed a fix. Let me know if you find any other problem.\n. Hmm, can you be more specific? What exactly do you want to implement and how do you plan to implement it in Fugitive? I'm curious as to how something can possibly clobber the option, or more importantly, _why_ does it even have to do that? Since ctrlp runs in its own buffer and has its own local working directory, pretty much having its own world.\n\nI'll certainly consider this but to have that particular `ctrlp#custom()`, there'll need to be a lot of changes. So what _exactly_ do you want it for? Something to use in Fugitive to get the user_command feature for `:Gstatus`? I don't think I follow...\n\nAlso, `<c-p>` in Normal mode is a duplicate of `k`, so it's not hard to see why nobody has complained about that default (which can be very easily changed anyway, and the option to do this is plastered everywhere).\n. Oh I see. I thought you were talking about ctrlp's `<c-p>` mapping. I didn't know `:Gstatus`'s `<c-p>` clobbered ctrlp's. But I still don't get exactly what this will be used for, and in which situation... I'm down with allowing more control, in any case.\n\nSo what if you could use a `b:var` which could be modified freely, with the `git ls-files` command that would be used in `let files = split(system(...), \"\\n\")`?\n\n``` vim\nlet b:ctrlp_user_command = ['.git', 'git --git-dir=/tmp/repo/.git/modules/submodule ls-files -oc --exclude-standard']\n```\n\nAnd instead of using `call ctrlp#custom({ 'root': '/tmp/repo/submodule', ... })` to open up ctrlp, just use `:CtrlP /tmp/repo/submodule`, since this only matters for find file mode. \nAn alternative to this is `let b:ctrlp_working_path_mode = 0`, `lcd /tmp/repo/submodule`, then `:CtrlP`.\n\nWould that work/be enough?\n. Well, fugitive would have to mess around with `let files` and `call ctrlp#custom()` otherwise, right? With a `b:var`, it wouldn't have to run another `system()`, while the `git ls-files` command would still be needed in any case.\n\nThe `:CtrlP` command started to take a path very early on, about a year ago today I think... Also, the fact that I mainly use git from console probably contributes to me not getting this. I don't have a clear idea of what `:Gedit` does, for example.\n. Then just do the usual saving & restoring for `g:ctrlp_user_command`, like this for example:\n\n``` vim\nfunc! CustomUserCmd()\n    if exists('g:ctrlp_user_command')\n        let saved_user_command = g:ctrlp_user_command\n    en\n\n    unl! g:ctrlp_user_command\n\n    let g:ctrlp_user_command = ['.git', '...']\n    CtrlP /tmp/repo/submodule\n\n    unl! g:ctrlp_user_command\n\n    if exists('saved_user_command')\n        let g:ctrlp_user_command = saved_user_command\n    en\nendfunc\n\n\" Mapping for the status window\nnn <buffer> <silent> <c-p> :call CustomUserCmd()<cr>\n```\n\nWhat do you think? It beats me having to modify ctrlp so that it takes options' values via function arguments, which I suspect very few people (if not nobody else) will probably ever need.\n\nI'll still proceed with adding support for using `b:var`, though, since among other things, it'll allow people to (more easily) overrule the above behavior should they want to.\n. Yeah, it's very often used to workaround problematic Vim's options or to create a more suitable enviroment. Like this particular one, for example:\n\n``` vim\nlet s:keepcpo = &cpo\nset cpo&vim\n\n...\n\nlet &cpo = s:keepcpo\nunlet s:keepcpo\n```\n\nFor the `b:var` change, I'll push it out soon after I can do some testing.\n. So I decided to bite the bullet and add support for overriding some options when calling ctrlp. Here's what the function call should look like:\n\n``` vim\ncall ctrlp#init(0, { 'dir': '...', 'opts': { 'user_command': ['.git', '...'] } })\n```\n\nIf you find any problem with these changes, let me know. Thanks!\n. Thanks! But this should be done by the external matcher instead. There's no need to create a new option.\n\nHijacking the `s:highlight()` function like this also doesn't work well because the pattern sent to it is already reformatted, it isn't the same one sent to the external matcher.\n. I suppose you've solved your problem?\n\nAnyway, there's so much confusion regarding this option, and so many false bug reports, from both people who do and do not know of its existent. I'm really tempted to just disable or remove the feature altogether.\n. The `path_mode = 'r'` setting for ctrlp is only effective when a root (which should have a root marker) is actually found. If there's no root, ctrlp will use the current working directory, and I guess in your case it's set to the directory of the current file by the `autochdir` option.\n\nSo instead of a combination of `autochdir` and `:e`, you should use `:e %:h/new_file`.\n. OK, since I can't really test this, I'll trust you on it. I'll merge and push it out soon.\n. That's awesome. Thanks, @d11wtq!\n\nI encountered a few problems with the control mappings. For example, pressing `<tab>` (9)  throws an E471, and pressing `<c-\\>` (28) or `<c-o>` (15) does nothing.\n. Yep, that seems to fix it. But I just noticed, this stops working after toggling the focus with `<s-tab>` then back again. I tried adding another `s:KeyLoop()` call after toggling but this in turn causes errors when closing ctrlp. Any idea?\n. This solves the above problem for me, not sure if there's any side effect yet:\n\n``` diff\n+++ b/autoload/ctrlp.vim\n@@ -561,7 +561,7 @@ fu! s:BuildPrompt(upd)\n endf\n\n fu! s:KeyLoop()\n-   wh exists('s:focus') && s:focus\n+   wh exists('s:init')\n        redr\n        let n = getchar()\n        let c = type(n) == 0 ? nr2char(n) : n\n@@ -739,7 +739,7 @@ fu! s:PrtSelectJump(char)\n            let npos = match(lines, smartcs.'^'.chr, s:jmpchr[1] + 1)\n            let [jmpln, s:jmpchr] = [npos == -1 ? pos : npos, [chr, npos]]\n        en\n-       keepj exe jmpln + 1\n+       exe 'keepj norm!' ( jmpln + 1 ).'G'\n        if s:nolim != 1 | let s:cline = line('.') | en\n        if line('$') > winheight(0) | cal s:BuildPrompt(0) | en\n    en\n```\n. Merged. Thanks, @mattn! This is a very nice addition.\n. Would the `g:ctrlp_match_func` option work for what you need? Here's an example from a different script:\n\n``` vim\nlet g:ctrlp_match_func = { 'match': 'MatchFunc' }\nlet g:path_to_binary = \"/path/to/binary\"\n\nfunction! MatchFunc(items, str, limit, mmode, ispath, crfile, regex)\n  \" Create a cache file\n  let cachefile = ctrlp#utils#cachedir().'/custom.cache'\n  if !( filereadable(cachefile) && a:items == readfile(cachefile) )\n    call writefile(a:items, cachefile)\n  endif\n  if !filereadable(cachefile)\n    return []\n  endif\n\n  let cmd = g:path_to_binary.' --limit '.a:limit.' --manifest '.cachefile.' '.a:str\n  return split(system(cmd), \"\\n\")\nendfunction\n```\n\nYou can check the help for the details on the arguments.\n. Yeah, it's an option to replace the built-in matching function.\n\nSo this isn't possible, yet, I think. With an extension, ctrlp still does all the matching and filtering. I might do something about this in the future, but it probably won't be anytime soon.\n. With how ctrlp does the matching, adding this will impact performance. So I'm not going to add it. It's a good idea otherwise, though.\n. ``` vim\nlet g:ctrlp_show_hidden = 1\n```\n\nIt's `0` by default now. I switched it off because people keep complaining about indexing time. Plus, ctrlp was one of the few finders (if not the only one) that showed hidden files by default.\n. There's a short changelog in the help file. But yeah, I guess I could be a bit more explicit with it.\n. ctrlp doesn't have this built-in. I'm not going to add it because it's not essential, and you can just be creative with the options. Use something like this in your vimrc, for example:\n\n``` vim\nlet g:ctrlp_buffer_func = { 'enter': 'MyCtrlPMappings' }\n\nfunc! MyCtrlPMappings()\n    nnoremap <buffer> <silent> <c-@> :call <sid>DeleteBuffer()<cr>\nendfunc\n\nfunc! s:DeleteBuffer()\n    let line = getline('.')\n    let bufid = line =~ '\\[\\d\\+\\*No Name\\]$' ? str2nr(matchstr(line, '\\d\\+'))\n        \\ : fnamemodify(line[2:], ':p')\n    exec \"bd\" bufid\n    exec \"norm \\<F5>\"\nendfunc\n```\n\nThen pressing `<c-@>` in Buffer mode will delete the selected buffer.\n. It's partly because there aren't many usable mappings left to use. I'd also have to make something to allow changing the deletion command between `:bd`, `:bw`, `:bun`, otherwise people would be requesting it. Lastly, I think people should be using plugins dedicated to buffer management instead.\n. @amadeus Yeah, the snippet was written before the addition of No Name buffers. I've updated it a bit.\n. Does this happen everywhere or only in some directories? Does it happen with other commands like `:CtrlPBuffer`?\n\nWithout more information, it looks like it has something to do with the directory you are currently in. Line 1 of GlobPath is just a call to Vim's `globpath()`. The `E16: Invalid range` error otherwise makes no sense in the context of this function.\n\nYou can test by running `:CtrlP path/to/an/empty/directory`, where `path/to/an/empty/directory` is the path to any directory with no files and no sub directories.\n. Let me know if 10bbbfa changes anything.\n. Hmm, there's no `h` in `spec/requests/static_pages_spec.rb`, so wouldn't typing `static_h` or just `h` be enough to find the second file? If there are other files interfering then that's a bad example, I think.\n\nAnyway, I really don't want to make the matching more complex as it will impact performance. As for interpreting spaces as either underscores or spaces, take a look at the `g:ctrlp_abbrev` option.\n. It's a new option, so just update your copy.\n\nAnd yes, with the abbrev option you can replace the space entirely with the underscore. Example:\n\n``` vim\nlet g:ctrlp_abbrev = {\n    \\ 'gmode': 't',\n    \\ 'abbrevs': [\n        \\ {\n        \\ 'pattern': '\\(^@.\\+\\|\\\\\\@<!:.\\+\\)\\@<! ',\n        \\ 'expanded': '_',\n        \\ 'mode': 'pfrz',\n        \\ },\n        \\ ]\n    \\ }\n```\n\nThe `\\(^@.\\+\\|\\\\\\@<!:.\\+\\)\\@<!` part is for keeping the space in some special cases.\n. Those indicators interfere with the matching. They also mess up the opening of the buffers because they are added at the source and become a part of the buffer names.\n\nPersonally, I'd just use `:ls` to get a more informative buffer list.\n. Just one small (negligible) issue. When in regexp mode, the indicators break the highlighting of the matched string:\n\n```\n> doc/ctrlp.txt [+]\n[===statusline===]\nr>> txt$\n```\n\nNormally `txt` should be highlighted.\n. Thank you! This is good enough for now. I'll try to fix the issue with the highlighting later.\n\nBTW, I've changed the format of the indicators to resemble the output of `:ls`.\n. There are 2 limits: max number of files `g:ctrlp_max_files`, and max directory depth `g:ctrlp_max_depth`. Try increasing them. Also, check your wildignore option and make sure `temp*` (or something along that line), isn't in it.\n. See `:help g:ctrlp_prompt_mappings`. But `<c-x>` can't be changed to just `i` because `i` is used for inputting the letter `i` literally. If you want to change `<c-x>` to `<c-i>`, then you'll also need to replace `<tab>` (also with the option) because `<tab>` and `<c-i>` have the same keycode.\n. It can be used to autocomplete directory names for `@cd directory<cr>` (change ctrlp's working directory), or for `directory/filename<c-y>` (create a new file).\n. You can rebuild the statuslines with the `g:ctrlp_status_func` option and change or move the parts however you like. See `:help g:ctrlp_status_func` for details.\n. They are indeed swapped. I'll correct it. Thanks!\n. It's regexp matched against directories and filenames literally when scanning. I suppose you've figured this out with the other issue (#290).\n. That's because the option is applied after `globpath()` returns the results. The cache won't contain the ignored files. So it's close but isn't exactly \"when scanning\" (as is normally understood).\n\nTo apply some ignore rules when `globpath()` is running, you should use Vim's `wildignore`.\n. What do you mean by \"not showing any option\"? Does ctrlp not start? Or ctrlp starts but there's no result?\n\nHow many files are in the same directory as the file you just open?\n. Set `g:ctrlp_working_path_mode` to `0` or an empty string. Or if you pull in the recent commits, you won't have to because ctrlp now uses a different default behavior.\n. How about `let g:ctrlp_custom_ignore = $HOME.'/\\(Library\\|Music\\)$'`?\n. It already is, the BufLeave event is included along with BufAdd, BufEnter etc. So just update your copy. I added this a long time ago, but if you haven't updated for a while, you might not have it yet.\n\nAlso, if you want to keep the last access order when typing the search string, then set `g:ctrlp_mruf_default_order` to 1. Otherwise the list will be sorted just like in the other modes.\n. You can use `:CtrlP /var/www/myproject/bla/bla/theme`.\n. The root_markers option must be a List: `let g:ctrlp_root_markers = ['pom.xml']`.\n. The default value is a List in the help file. The option's name is also plural. But yes, if issues like this keep coming up, I'll explicitly mention the var type, at least for some options.\n. Doesn't happen to me (but I'm not using Janus), and so far no one else has had this problem nor there has been any similar issue. So it's likely caused by something else in your Vim config.\n\nYou can try starting Vim in minimal configuration (without Janus) with just the 2 plugins. If it doesn't happen then try disabling the plugins or any configurations you have in Janus one by one, until you find the culprit.\n\nIn any case, can you provide more details and steps to reproduce? Does it happen all the time or only with some specific window layouts? From which window do you invoke ctrlp (nerdtree or an existing vertical split)? ... Take some screenshots if you can.\n. OK, this is almost definitely because (at least) one of the existing windows next to nerdtree has `set winfixwidth`. That's the only way I see running `:vnew` can crush every other window including nerdtree. There's nothing special about how ctrlp opens a vertical split (just a plain `:vnew filename`).\n\nClosing since this isn't a ctrlp's problem.\n\nYou can find out what set `winfixwidth` for your windows by grepping your Vim config for `winfixwidth` or `wfw`.\n. Both of the commands already include named, unsaved buffers. I'll see what can be done about unnamed buffers.\n. You can use the `g:ctrlp_user_command` option for this. For example, if you have the `cscope.files` file at a directory where you normally want ctrlp to start scanning from:\n\n``` vim\nlet g:ctrlp_user_command = ['cscope.files', 'cat %s/cscope.files']\n```\n\nOn Windows, use `type` instead of `cat`.\n\nIf you want ctrlp to zoom onto the parent directory of `cscope.files` automatically:\n\n``` vim\nlet g:ctrlp_root_markers = ['cscope.files']\n```\n\nFor using several files, you can use autocmds to change the options based on the current buffer:\n\n``` vim\nau BufEnter *.py\n    \\ let g:ctrlp_user_command = ['py.files', 'cat %s/py.files'] |\n    \\ let g:ctrlp_root_markers = ['py.files']\n```\n\nIf I add a new option specifically for using file list files, it'll be very similar to `g:ctrlp_user_command` in this case and will require the same configurations. So I probably won't, to avoid redundancy.\n. All the past attempts to improve or make complicated the internal matching algo have resulted in lower performance. And performance is what Vimscript already severely lacks. Real improvements can only be done by using a different language. It's the main reason the `g:ctrlp_match_func` option was added.\n\nSo my answer to your question is I have no interest in improving the internal algorithm. And `g:ctrlp_match_func` will remain a user option.\n. See `:help g:ctrlp_open_multiple_files`.\n. Are you sure about that behavior? If you read taglist's help, `Tlist_Auto_Open` is only for automatically open the taglist window _when opening Vim_. If you check the code, this is the only place it is used:\n\n``` vim\n    if g:Tlist_Auto_Open\n        autocmd VimEnter * nested call s:Tlist_Window_Check_Auto_Open()\n    endif\n```\n\nThis won't automatically open the taglist window when you open a file after Vim is already open.\n\nEdit: I didn't see your second comment when I started investigating.  Well, it isn't a bug in taglist, either, since it isn't a bug to begin with. It seems you're just expecting the option to work differently than its defined behavior.\n. No problem. Also, taglist hasn't been updated for 5 years now, I'd just leave those changes in the plugin or branch it, just to be safe.\n. `<c-s>` is reserved for terminal control flow. You should use `<c-x>` to split horizontally instead.\n. It's a known limitation of the ctrlp prompt. Try setting `g:ctrlp_key_loop` and see if you can type those letters. Check out `:help g:ctrlp_key_loop` for the details. There's currently no other workaround.\n. Update to the version on github. The last version is 1.78.\n. I can't reproduce this. I tried with having a few horizontal splits and a quickfix window at the bottom. The present of the quickfix window doesn't seem to make any difference.\n\nCan you provide the reduced .vimrc and take some screenshots before and after opening ctrlp?\n. Thank you! It seems that the problem lies with Vim being unable to correctly restore the window layout from the output of `winrestcmd()`, in the case where there's a window with `set winfixheight` and it's crushed by a `:resize` command run on a new window.\n\nI've pushed a workaround. Let me know if you find any problem.\n. You can do that in ctrlp but only in filename-only mode, which can be toggled on/off with `<c-d>`.\n. It definitely works for me. Are you using the latest version on github?\n. My email can be found in the repo with `git log`. There's no need for a personal email but thank you for the intention! I appreciate it.\n. However it would work, it would require rebuilding of the cache in the background. This can't be done with Vimscript in a single Vim session.\n. Would moving the match window to the top of the screen work for you? The top hit won't jump around if the match window is at the top. You can have this by setting `g:ctrlp_match_window_bottom` to `0`.\n. Use `g:ctrlp_mruf_exclude` instead. `g:ctrlp_custom_ignore` and `wildignore` are only for ignoring files from `globpath()`. You should also check out `:help ctrlp-options`.\n\nBTW, instead of forcing ctrlp to ignore .vimrc, I'd investigate to find out why the file was always the most recent file because that's not normal. On ctrlp's side, a file's only added to the MRU list if it's opened as a buffer.\n. Looks like you're using this config line which is for Windows:\n\n``` vim\nlet g:ctrlp_user_command = 'dir %s /-n /b /s /a-d'\n```\n\nJust switch to the one for Linux. But unless you want a different list, or want to do something special with it, you don't need to use `g:ctrlp_user_command` to get the files.\n\nAlso, check out `:help ctrlp.txt`, there are a lot more stuff and more details than in the readme.\n. It's because a lot of the times the tag file can be pretty big, reformatting the tag lines will take a long time. So I want to keep it simple and fast. There's no other reason.\n. Good idea, but aside from the highlighting, there's still the problem with the matching. Matching a filename including path is different from matching a tag or a line entry.\n\nYour proof works because coincidently the tag's and the line's lines have very similar formats. But if you throw files or buffers into the mix then filename-only mode won't work, and the entire tag line (the tagname and the extra infos) will be included when matching.\n\nOriginally, I also wanted the mixed mode to work with a command like this:\n\n```\nCtrlPMixed --mode=files,buffers,tags,...\n```\n\nBut I didn't and still don't think it's worth making, at least until I can figure out how to solve all the major problems.\n. Actually, ctrlp is more like a search interface than a command mode auto completion system, so I'm not sure it fits what you're looking for. But basically, it uses the user input as a search string on a predefined list of items and then returns the results.\n\nThe buffer is a just normal buffer with a few settings like `buftype=nofile`, `nobuflisted`... It's not a preview nor a quickfix buffer/window. There's no cmap because the mappings are Normal mode mappings, which you can find in the Mappings section.\n\nBut in case you want to create a simplified version of ctrlp so that you can (basically) have an extension without the core, you might want to read the Mappings section for getting user input, the MatchedItems section for searching, and the BuildPrompt section for displaying everything in `autoload/ctrlp.vim`.\n. There are already mappings to open entries in vertical or horizontal splits. Please read `:help ctrlp-mappings`.\n. You probably hit the max_files limit which is set to 10000 files. Try increasing it with the `g:ctrlp_max_files` option.\n. There's no other condition. So naturally files that are in deeper directories have higher chance of being excluded.\n. Press `<F5>` when ctrlp's open or use the commands (see `:help ctrlp-commands`).\n. Merged. Thank you!\n. Duplicate of #280. You can start with the .vimrc snippet in that issue.\n. Can you help me test to see if read/write when receiving `SIGTERM` is actually working for you?\n\nFrom outside Vim, create a text file `/home/user/test/readwrite.txt` containing only one line: `read`. Then put this into your .vimrc and restart Vim:\n\n``` vim\nlet g:rwtestfile = '/home/user/test/readwrite.txt'\nau VimLeavePre * cal writefile(readfile(g:rwtestfile) + ['write'], g:rwtestfile)\n```\n\nAfter you run `shutdown` or kill the gVim process, check if the `readwrite.txt` file has this:\n\n```\nread\nwrite\n```\n\nBoth this and the MRU saving work fine for me with a `kill pID`, which also sends `SIGTERM`.\n. That's interesting. Thank you! I also just tried `shutdown`, and apparently the `readwrite.txt` file above isn't changed (`write` isn't appended) when using `shutdown`. So in any case, I'll need to find a workaround for this, possibly by saving the MRU list more frequently instead of only when exiting Vim.\n. I've added a new option: `g:ctrlp_mruf_save_on_update`, defaults to `1`. If you find any problem with it, let me know.\n\nI don't like it but there's really no other way. Saving on exit doesn't work when using `shutdown`, even when the autocmd consists of only `readfile()` and `writefile()`. Also, saving on every update is what mru.vim and others do (e.g. fuzzyfinder), ctrlp also did it by default in the beginning. It's not out of the norm.\n. I've made some new changes. Now saving only happens when a new entry is added. Changing of order won't be saved until exit or when another entry is added. This will be just enough to prevent completely losing the new entries in case Vim isn't closed normally.\n\nAlso, this was before adding the option, but in your test script, if I add another `sleep` instance after `killall` in the inner loop, then in both cases all of the 5 files are always shown.\n. Thank you! But this feature already exists. You can remove non-existing entries by pressing `<F5>` in MRU mode.\n. Merged. Thanks @mattn!\n. Yes, the window isn't supposed to be scrollable except for a few extensions. The number of results is limited at the max height. This is intended for performance reason.\n. Fixed. Sorry about that!\n. Thank you! But you can already do this with the `g:ctrlp_buftag_types` option. No need to change the code to get it.\n. Fixed. Thank you for reporting! This bug had been there pretty much since the beginning I think. It happened when `:cd` into an empty directory then open ctrlp and use `<c-y>` to create a new file (or some sub dirs and a new file).\n. There's already an option to keep the cache:\n\n``` vim\nlet g:ctrlp_clear_cache_on_exit = 0\n```\n. Just make sure the options are actually set. You can run `:echo g:ctrlp_clear_cache_on_exit` to check. The deletion happens at only one place, and it's just a simple `if` check for `g:ctrlp_clear_cache_on_exit` before running the clearing function.\n\nIn any case, try starting Vim in a clean environment like the following and see if it changes anything. From the console, run `vim --noplugin -u path/to/a/simple/.vimrc` and use this as the content of the .vimrc:\n\n``` vim\nset nocp\nset runtimepath^=~/.vim/bundle/ctrlp.vim\nruntime! plugin/ctrlp.vim\n\nlet g:ctrlp_use_caching = 1\nlet g:ctrlp_clear_cache_on_exit = 0\n```\n\nChange the runtimepath location accordingly.\n. Duplicate of #313. But good idea about adding an indicator for hitting max_files. I'll see what I can do.\n. Update to the latest version on github, currently 1.78. This has already been fixed.\n. There's an option for this. What you want is the second example at `:help g:ctrlp_abbrev`. Update the plugin before checking it out since it's a fairly new option.\n. That will replace all spaces with `.*`. You won't want that if you use special inputs like `@cd path/`. If you use those, start with the pattern from the help: `'\\(^@.\\+\\|\\\\\\@<!:.\\+\\)\\@<! '`.\n. Yes, it's intended, or was intended. If the option does take effect in Mixed mode then in most cases, it'll effectively remove all MRU files in the mix. But now that I see some people might actually want that, I think I'll enable it.\n. Files is the default mode because it's what the majority of people use ctrlp for. If Files isn't the default you want, you can easily change it with the `g:ctrlp_cmd` option:\n\n``` vim\nlet g:ctrlp_cmd = 'CtrlPMRU'\n```\n. The last mode isn't saved cross session. It's only stored in a script local variable. There isn't a way to save then initialize it yourself. But you can use something like this to start LastMode with something other than Files:\n\n``` vim\nlet g:ctrlp_cmd = 'call CallCtrlP()'\n\nfunc! CallCtrlP()\n    if exists('s:called_ctrlp')\n        CtrlPLastMode\n    else\n        let s:called_ctrlp = 1\n        CtrlPMRU\n    endif\nendfunc\n```\n. Which closed issue do you refer to? But this slowness is typically because ctrlp can't handle the large file list. This is slightly more apparent on Windows. There's really nothing I can do about it other than to tell you to try limiting the number of files with the `g:ctrlp_max_files` option, and updating ctrlp and gVim.\n. Have you read them or just put up everything you could find after I asked?\n\n#46 wasn't a bug. It was a delay when starting up caused by the user having similar mappings.\n#55 I even asked the person in another issue but he never provided the file that caused it.\n#116 was fixed. It was `fnamemodify()` being slow, the same reason I've always tried to avoid using this function.\n#331 is this issue.\n\nAlso, I want to add that I see every issue as something that I need to deal with, to be done. I will close and ignore the ones that I deem not worth following up, they may or may not be actual fixable bugs. But if there's a valid bug or a common problem I can identify, I always try to fix it or at least provide a solution for it as soon as I see the report.\n. CtrlP has a documentation which you can access by running `:help ctrlp.txt`. All the available options are documented in there.\n. You can use the `CtrlPLinePre` highlight group to change the color of the `>` marker.\n\nAlso, check out `:help ctrlp-customization` for the available hl groups.\n. An index from the results is worthless in term of identifying a string. There also isn't any way to get the actual index of the string in the initial list since the results are usually sorted. I think your best bet would be to add an identifier to the strings like this:\n\n```\nfoo\n  bar1 (1)\nbar\n  bar1 (2)\n  baz\n```\n. I suppose it is. You can just put them in a `s:syntax()` function in the extension. Also, use `'type': 'tabe'` for the `s:foo_var` variable, then add the identifiers like this:\n\n```\nbar1<tab><conceal_id_begin_char>1</conceal_id_end_char>\n```\n. Yes, some of the sorting functions are disabled for other types. So use `'type': 'path'` and make sure the conceal chars are unique then, maybe something like `+++ 1 +++`.\n. Well, it does match if you use `'type': 'path'` because this tells ctrlp to treat the entries as directories and files. So you'll want to make sure the conceal_id chars are unique and unlikely to be searched for.\n. Ok, I'm going to close this. I won't be adding it.\n. I can't reproduce it. Can you try reproducing it in a clean environment? If not then can you narrow it down and find out what might be interfering?\n. Can you rephrase that? Not sure if I understand what you mean.\n\nAlso, this would have been a major problem for a lot of people if it was easy to reproduce. I think something else in your Vim setup is probably interfering. It might be an autocmd, or something custom.\n. It's because of the `'exit': 'ctrlp#exit()'` key:value pair in `s:git_files_var`. You don't need that if you use the builtin `ctrlp#acceptfile()`.\n. Looks like you're using an older `plugin/ctrlp.vim` file with a newer `autoload/ctrlp/` directory. This might happen if you have multiple installations of ctrlp in different places.\n\nSo first remove anything you can find, then follow [this guide](http://kien.github.com/ctrlp.vim/#installation) to make a clean install.\n. OK, I'm going to close this. `g:ctrlp_buftags` and `CtrlPBufTag` are defined in the open and in the same file as the `CtrlP` command. The only way they don't exist while `CtrlP` does is if you're somehow using a really old `plugin/ctrlp.vim` file from before BuffterTag mode was added.\n. It's just the standard cursorline, you can change it by changing the CursorLine highlight group of your colorscheme.\n. Check out the `g:ctrlp_buffer_func` option then. You can put the `:highlight` commands in a pair of functions, and call one on `enter` and another on `exit`.\n. See `:help g:ctrlp_prompt_mappings`. Also, check out `:help ctrlp-options` and `:help ctrlp-mappings` while you're at it.\n. Thanks! But tag.vim doesn't have it because the `:tag`, `:tjump`... commands don't always jump to the tag's position (because of an outdated tags file, for example). I suggest you create a mapping for `zvzz`, like `,z`, which can be used elsewhere.\n. If `:tag` fails, running `zvzz` blindly will open the folds and change the view of the current buffer.\n. Vim has the `'foldopen'` option, but it only applies when the command is typed directly in the command line. I'll see if using `feedkeys()` can get around this.\n. Done. Let me know if you find any problem with this.\n. The reason for using `feedkeys()` is so that `'foldopen'` will take effect automatically. There's nothing for `zz`. If `:tag` fails, running `zz` will still change the view of the current buffer regardless. So no, it's not safe. You'll just have to type `zz` manually.\n. Actually no, unless in a `:try` `:catch`, Vim will continue with the next command, in this case with `zz` whether it's in `feedkeys()` or not.\n. The problem with that is without `:catch`, the commands after `:endtry` won't be executed. I also don't like using `:try` with commands that involve opening of files because `:try` can stop an autocmd from firing if an error happens before it.\n. Can you describe it a bit more? What exactly are you trying to do for your plugin? You want to create some mappings with `<leader>`?\n. So you want to be able to literally type `<leader>[c]`, for example, and it would take you to a file with `c` highlighted without having to press `<cr>`?\n. OK, so that'd be `searchstring<leader>c` or `<leader>c` to select an entry. That'd be very different but would it really be much better than say `searchstring[c]<cr>`? Or just `[c]<cr>`? Since you'd want the hotkeys to be unique anyway.\n. Still, it seems like a big change for speeding up a small task, that is selecting an entry already in the match window. You can also already press `<s-tab>` and type the first letter of the entries to jump to them, or just type a few more characters to narrow down the results. So I don't think I'm going to add support for this feature.\n\nTo simulate a keypress in general, try `feedkeys()` instead of `normal!`.\n. Oh I see. I just always consider adding things so that people don't have to modify the core to get what they want.\n. There's no option to hide specific buffers. If the netrw buffer shows up when you run `:ls` (it doesn't for me) and its `buftype` is empty, then `CtrlPBuffer` will list it.\n\nIn general, you can force a buffer from showing up by setting its `'buflisted'` option to 0.\n. Then you can get that resultant file list and feed it to ctrlp through an extension. It should be simple. But I don't think I'm going to add such an extension to ctrlp. It isn't really that useful since a file list from grep is usually quite short.\n. Have you typed the name of a file you want to create into the prompt first?\n\nJust in case, check out `:help ctrlp-input-formats`, section `f)` for the details on how to use `<c-y>`.\n. `<c-y>` basically just does a `:edit newfile` for you. If `:edit` does throw an error, you'll see it.\n. Make sure you update to HEAD of `master`. There used to be stricter rules of when ctrlp reuses the current window.\n\nWith the current version, ctrlp will still open a new split (when using the default `<cr>`) if the current buffer is either having a non-empty `buftype`, is help or quickfix.\n\nYou can add exceptions to this with the `g:ctrlp_reuse_window` option.\n. Usually `SYSTEM\\Rank.cpp` will be at the bottom (or at the top, if you've changed the default listing order), unless the other found files are much newer since this matters more in MRU mode. And regexp mode simply eliminates all the other files that aren't `Rank.cpp`.\n\nAlso, in case it isn't obvious enough, by default ctrlp shows results from best to worst from bottom to top (of the match window) and highlights the best one at the bottom.\n\nBut in any case, I won't be making any more changes to the sorting algo, at least in the foreseeable future. So that's as good as it gets.\n. You can use `<tab>` to autocomplete the directory names under the cwd. Try it and see if it's what you're looking for.\n\nFor example, type `@cd subd<tab>` where `subd` is from `subdirectory`.\n. Actually, ctrlp isn't a word-completion plugin, it's a finder. I'll have to recreate the e-like or cd-like completion inside the prompt in some way. The basic completion with `<tab>` is meant for directories under the cwd, which is ctrlp's main concern.\n\nWith that said, I'll still look into implementing this and will add it if it's simple enough. But if it turns out to be more trouble than it's worth, then I'll probably drop it.\n\nFor the time being, you can do a `@cd ~`, `@cd $HOME`, or `@cd /` before doing the `@cd subd<tab>`.\n. Well, the difficult part here is ctrlp operates in Normal mode. The prompt isn't actually the command line nor it's in Insert mode where word-completion is readily available.\n. You just need to clear the old file cache. Check the document (or the readme) for the mapping and commands. If you like, you can also disable caching permanently or partially with the `g:ctrlp_use_caching` option.\n. It's limited that way so that searching doesn't become too slow too quickly. You can search the old issues if you want to find out more about this.\n\nIf trying different search strings bothers you too much, you can either set a bigger `g:ctrlp_max_height` which may help, or use `g:ctrlp_match_func` to setup a custom matching function.\n. The highlighting of the selected line is just the default cursorline. If Vim's cursorline is somehow not visible with your colorscheme/setup then there's nothing I can do to change that. It's entirely up to you to configure it.\n. The initial order doesn't make much difference since the results are sorted and mixed up when you search anyway. There's no way to tell whether a result is file, buffer or mru unless we do a check for each which can be expensive. Also, the current initial order isn't always file + buffer + mru, it's just shorter list goes first.\n. Well, mru usually already contains buffers, exceptions like unsaved buffers are rare. So a mixed mode for only buffer + mru wouldn't be much different from mru mode.\n. What do you mean by \"all have working directory as 'src'\"? What does `:pwd` return after you `:cd` into those repos? \n\nThe name of the cache file is based on the return value of `getcwd()`, so it should already be the full path. Your patch also doesn't actually change anything since `dir` is always `getcwd()` (a case where `a:0 == 2` hasn't been used anywhere in ctrlp).\n. I believe this is an old issue of vim-powerline on Windows, the report used to be at Lokaltog/vim-powerline#161.\n\nThe vim-powerline issue tracker has been disabled and I don't remember the exact conditions, but it had something to do with the highlighting or folding in the current buffer, then simply echoing/redrawing would trigger error messages. The BuildPrompt() function just inevitably trips on the errors although none of the conditions was originated from ctrlp (so they couldn't be worked around).\n\nIt might help if you manage to fix that broken character in the font you're using that appears on the statuslines.\n. Makes me kind of wonder if it's a good idea to use `:silent!` when calling BuildPrompt() again to suppress the error msgs (harmless in this case), but that'll also make it more difficult to track down actual bugs in the future.\n. Vim has those options, `splitright` and `splitbelow`.\n. How often does it happen? When do you usually notice it after closing/starting Vim? Do you change your user account (thus change the home dir)? I'm going to need at least something.\n\nCtrlP itself only ever clear MRU if you press `<F7>` while in MRU mode, and there's a confirmation dialog. The caching has been unchanged for the last year and there hasn't been any related issue. You should check for external sources that can delete those cache files, starting with your Vim config.\n. Closing due to lack of information, plus I don't see any conceivable way ctrlp can mistakenly delete the cache file.\n. That's strange that it didn't happen in your last time exiting Vim. Can you post the output of `:ver` and any setting you have for ctrlp? Also, make sure your ctrlp bundle is up to date.\n\nI don't notice anything on the list, and ctrlp recreates the folders whenever something needs to be saved. Currently, this happens when pressing `<F5>` in ctrlp or exiting Vim.\n. That's normal. By default, any file that isn't a log file or cache.txt will be deleted upon exiting Vim. And `.DS_Store` is hidden.\n\nIf this starts happening again, you can try setting `g:ctrlp_clear_cache_on_exit` to 0, the clearing function simply won't be called.\n. @mMontu You can still avoid requesting cache updates by hand by having `let g:ctrlp_use_caching = 0`.\n\nBut in case you want to investigate at code-level, the main (and only) deletion function in ctrlp is `ctrlp#clra()`. It's called when exiting Vim if the clear_cache_on_exit option is set, running `:CtrlPClearAllCaches` calls it directly.\n. @whimdump I've pushed a change a couple of months ago that should prevent this kind of problem for good. Are you using HEAD of master of the ctrlp repo on github?\n. This can't be done with Vimscript because it's single threaded. It's not possible to do the loading while running something else to intercept the keystrokes. I'm unsure what we see when scanning the first time is either provided by Vim or by the OS, but it can't be replicated with scripting.\n. Yes, see `:help g:ctrlp_mruf_exclude`. You can use a pattern like this `\\v\\.git/(COMMIT_EDITMSG|index)`.\n. These are left out because I want to list only the more unique mappings that people don't look for if they don't know the features exist.\n. It's because `<c-s>` and `<c-q>` are used for control flow in terminal. They can't be mapped. If you really want to use `<c-s>`, you'll have to configure your terminal to pass it to Vim. Otherwise, just use `<c-x>` everywhere.\n. Is there any reason for the `s:MatchItPy()` function to be in `autoload/ctrlp.vim`? You can just as well define it as a global function and put it elsewhere. This is basically what the `g:ctrlp_match_func` option is there for, it's so that you don't have to make change to the core.\n. Yes, you can use `ctrlp#call(name[, args])` to call a function in the scope of `autoload/ctrlp.vim`.\n. If you're using `g:ctrlp_user_command` with a version control listing command then you'll have to commit the new files first or use a command that lists untracked files. If you aren't using this option, then make sure the new files aren't in an ignore list or are hidden files. Check `wildignore` and `g:ctrlp_custom_ignore` if you have them.\n\nNext time, if you think something is a bug, please provide details like steps to reproduce and your configurations. Don't use the tracker like a support forum when you run into a problem.\n. Don't change the help file, that does nothing. You're supposed to put the `let g:ctrlp_max_height = 40` line into your `.vimrc` file. It's the same file that you put the line to load up pathogen.\n. Just use anything that's present in the paths you want to be ignored but not in the others. Use the whole paths if need be.\n. The problem with staying pure Vimscript and in a single Vim instance is that there's no way to avoid the waiting part, so auto-updating with CursorHold (forcing a wait) is out of the question. The modification time of a directory also isn't reliable for detecting changes.\n\nBut to minimize or eliminate manual updates, you can use the `g:ctrlp_use_caching` option. For example, use `let g:ctrlp_use_caching = 200` to disable caching for directories that have fewer than 200 files.\n. You can remap the keys. See `:help g:ctrlp_prompt_mappings`.\n. If you don't select anything, you can close the ctrlp window by pressing either `<esc>` or `<c-c>`. If you want to close it from a script, `ctrlp#exit()` already calls `s:Close()` so there's no point for another function.\n. I see. Can you checkout commit 675faa7 and see if it still works for you? If it does work, then look into the change in 6c49f2a and let me know if you figure out something (try removing the bufnr or bufname or both) that works for you.\n\nThanks!\n. It's so that the closing function is called only once and it's through a `BufLeave` autocmd. It looks like this autocmd is never triggered for you. You can try to track down the cause, but if it's too much trouble, use this for now:\n\n``` vim\nlet g:ctrlp_prompt_mappings = { 'Close()': ['<esc>', '<c-c>'] }\n```\n. Duplicate of #368.\n. You probably have a new repo dir, like `.git`, in your home dir. Try `let g:ctrlp_working_path_mode = 0`, this will tell ctrlp to not try to find a root and just use the cwd.\n. It isn't there because I want to keep the readme brief, and there are a lot more at the suggested `:h ctrlp-mappings`.\n. No, both should work and they do for me. Where's the `/tmp` directory in relative to the directory you're indexing? Do you change any other option? What ctrlp version are you using? If you can consistently reproduce this, let me know how.\n. Oh I see. That's a known issue. It's because dirs and files are filtered separately with each pattern. Can't really avoid this unless I use the `dir` pattern to filter files as well, but this will make having different types redundant.\n\nSo it may seem inconsistent and odd when you notice it, but I think I'll just leave it that way. At least people will still have the option to ignore only dirs.\n\nAs for converting custom_ignore to `wildignore`, you can already use both, and for custom_ignore you can write complex regex while you can't for `wildignore`. A conversion will likely break it for a lot of people.\n. This isn't exactly a new idea, but understandably, everyone wants it. The problem is that there's no background thread in Vim and Vimscript. I'll have to either use a different language or start a new Vim just for the indexing.\n. That's partly by design. The height is to help speeding up the indexing and the searching. As a result, it becomes more difficult finding files further down the file list. This is usually fine since files further down usually have long paths and need more specific search patterns anyway. But with `git ls-files`, the files under `config` are returned after all the subdirs, so the `config/routes.php` is being placed closer to the bottom.\n\nThat's where you have your problem. I won't be making any change to the internal indexing and searching, so this won't ever really be fixed. But since you're already using `g:ctrlp_user_command`, you might want to look into using `g:ctrlp_match_func` as well.\n. I'm going to need a little more details. Which of the ignored files still show up? Can you post your full vimrc? Do you use `g:ctrlp_user_command`? What ctrlp version are you using? Post a step by step from when you save these options to when you open ctrlp. Also, try running `:CtrlPClearAllCaches` before opening ctrlp and see if it changes anything.\n. The OS shouldn't matter. So first, make sure you're actually rerunning ctrlp for the same directory, then find and check if any new cache file is written. The cache location is set by `g:ctrlp_cache_dir`, make sure this location is writable from Vim.\n\nIn any case, please post your full vim config and a step by step from when you open ctrlp the first time to the second time, and the location where you open it.\n. So it's the default value which is `$HOME.'/.cache/ctrlp'` on both. Check for the cache there.\n. Just press `<cr>`, or whatever key you have set to `AcceptSelection(\"e\")` with the `g:ctrlp_prompt_mappings` option. Provided that you're using a recent version, ctrlp won't avoid the current window unless the buffer in it has a non-empty `buftype`.\n\nThe `<c-o>` then `r` combo which works for you, does the same things that `<cr>` by default does.\n. OK, it looks like I might be too quick to assume you just didn't try `<cr>` but used `<c-x>`, or `<c-v>`, etc. instead (kind of made sense to me since you said `<c-o>r` worked). I took the liberty to look into your vimrc and found this line:\n\n``` vim\nlet g:ctrlp_split_window = 1 \" <CR> = New Tab\n```\n\nSo there you have it. It's an old option that allows you to change how `<cr>` opens a file. Either comment it out, switch to `g:ctrlp_prompt_mappings` completely, or keep using `<c-o>r`.\n\nAnyway, if you've been aware of the config line and actually didn't try `<cr>`, then my apologies for the redundant post.\n. You can do this with the `g:ctrlp_buftag_types` option. There's no need to make changes to the code.\n. The other ctrlp mappings, specifically the `<c-...>` mappings, do they work? Can I take a look at your full Vim configuration? What happens if you open ctrlp immediately after starting up Vim? What happens if you comment out your mappings? What happens if you start Vim in minimal configuration with only ctrlp?\n. Having a higher priority only means that the marker is closer to the beginning of the List. So you can solve your problem with git and perforce by placing `.git` before `.p4config` like the following, no need to change the code:\n\n``` vim\nlet g:ctrlp_root_markers = ['.git', '.p4config']\n```\n. It's not that simple. Using the formatted (i.e. the non-raw) list will leave behind duplicate entries which are MRU files in the cwd.\n. I've applied the option to the raw MRU list intead. Thank you for looking into this, anyhow!\n. This should be fixed now. Thank you for reporting!\n. The prompt and the match window are handled completely different in ctrlp. For one thing, you type everything in Normal mode instead of in Insert mode. It'll require a massive rewrite to allow for something like this, so no.\n. Either remove `--exclude-standard` or don't use `g:ctrlp_user_command` and hide unwanted files with the ignore options. But if you still want to use user_command, and removing `--exclude-standard` doesn't exactly do what you want, then read `git ls-files --help` and find out yourself whether or not you can get it to do what you want.\n\nOnce you use `g:ctrlp_user_command`, it's up to you to feed ctrlp the file list.\n. There's the `g:ctrlp_default_input` option with which you can create a command like this:\n\n``` vim\ncom! -n=? CtrlPDefInput let g:ctrlp_default_input = <q-args> | CtrlP\n```\n\nThen just use `:CtrlPDefInput profile`.\n\nIt's an option because allowing `:CtrlP search-string` while already having `:CtrlP path/` can complicate things quite a bit.\n. Other than in a few modes (Mixed, RTScript), I don't see how anything in ctrlp can create duplicates. All the internal actions are either removing or sorting.\n\nThe `git ls-files -moc` command you use, however, does create duplicates. It lists both modified files and cached files. You can test this by modifying a tracked file, then before adding the changes, run `git ls-files -mc`, you'll see the file showing up twice.\n. `git ls-files -moc | uniq` can still list duplicated files. Try it with a small repo so you can spot them more easily.\n. Well, `uniq` only removes successive identical lines, so it'll fail to remove duplicates if the lines simply aren't next to each other. But that aside, you can avoid the dupes by just not including `-m`, `-oc` already shows all the files, modified or not.\n. It's firstly because you've switched `<cr>` and `<c-t>`, and secondly because switch_buffer only applies for modes that handle files or buffers directly (the idea is from Vim's `switchbuf`).\n\nApplying this option to other modes will really complicate things. In Tag mode, for example, the commands for opening are just the `:tag` series of commands. I'd have to create something to replace them in order to apply switch_buffer.\n\nIf you only call the modes directly, you can probably use something like this:\n\n``` vim\nfunc! MyPrtMappings()\n    let g:ctrlp_prompt_mappings = {\n        \\ 'AcceptSelection(\"e\")': ['<c-t>'],\n        \\ 'AcceptSelection(\"t\")': ['<cr>', '<2-LeftMouse>'],\n        \\ }\nendfunc\n\nfunc! MyCtrlPTag()\n    let g:ctrlp_prompt_mappings = {\n        \\ 'AcceptSelection(\"e\")': ['<cr>', '<2-LeftMouse>'],\n        \\ 'AcceptSelection(\"t\")': ['<c-t>'],\n        \\ }\n    CtrlPTag\nendfunc\n\nlet g:ctrlp_buffer_func = { 'exit': 'MyPrtMappings' }\n\ncom! MyCtrlPTag call MyCtrlPTag()\n```\n\nThen use `:MyCtrlPTag` instead of `:CtrlPTag`.\n. Is there any reason to use `git ls-tree -r HEAD | grep -v -e \"^\\d\\+\\scommit\" | cut -f 2` instead of `git ls-tree --name-only -r HEAD`, or just `git ls-files`?\n\nTo list files not yet committed with `git ls-files` you can use `git ls-files . -co --exclude-standard`.\n\nBut to call the fallback command directly, use this instead:\n\n``` vim\ncom! -n=? -com=dir MyCtrlPFallback\n    \\ cal ctrlp#init(0, { 'dir': <q-args>, 'opts': { 'user_command': 'find %s -type f' } })\n```\n. Yes, ctrlp has some default ignore rules. If you want it to ignore something specific, you can use `wildignore` or `g:ctrlp_custom_ignore` or both.\n. ctrlp supports user-created extensions, so anyone knowing a bit of Vimscript will be able to write this. Take a look at the [extensions](//github.com/kien/ctrlp.vim/tree/extensions) branch and also `:help ctrlp-extensions`.\n. You can mark the bookmarks with `<c-z>` then press `<F7>` to delete them. This is mentioned twice in the docs, once in the `ctrlp-mappings` section, and once in the `ctrlp-extensions` section.\n. It may be that the cache location isn't writable in your new setup. By default, it's set at `$HOME/.cache/ctrlp`, you may have changed it with the `g:ctrlp_cache_dir` option. In either case, check this location and make sure you're the owner and have read/write permission to it.\n. What does `:echo $XDG_CACHE_HOME` return for you? There's no hardcoded base dir, but `$XDG_CACHE_HOME` is the other default and it's used if it exists.\n. Vim's `/pattern` has always done the job just fine for me. I'm not sure if a slight improvement will be worth adding this.\n. Neither. I simply want to avoid it being redundant. I'll look into this regardless.\n. @dusans `expand(\"%\")` is a function call. So the correct syntax is `:execute \"CtrlPLine \".expand(\"%\")`. But in this case, you can just use `:CtrlPLine %`.\n. You have to read that description in the context of the whole option. It means ctrlp's local directory is set to the directory of the current file, unless the current file is somewhere inside the current working directory.\n\nSo which parts do you think are difficult to understand? What do you suggest to make the description clearer?\n. I'm going to leave it as-is. It's not that difficult to understand once you know what each term means by reading the other settings. You need to do that anyway to know what `c` does, for example.\n. Yes, \"its local working directory\" means ctrlp has its own cwd. This is mentioned right at the top. And \"outside of ctrlp\" doesn't mean \"outside of vim\", it means exactly \"outside of ctrlp\". So the cwd used here is the non-ctrlp cwd.\n. I'd love to. I just honestly don't see how I can make this part any clearer. As in I don't know how. And since no one else has complaint in the past one year and a half, I'm inclined to believe that the majority of people understand it just fine.\n. My English isn't very good. If anyone cares enough to make any part of the help better, no matter how little, please go ahead and do so. Pull requests are always most welcome.\n. This will create a `<c-@>` mapping which you can use to toggle `mruf_relative` while in the prompt:\n\n``` vim\nlet g:ctrlp_buffer_func = {\n    \\ 'enter': 'PrtEnFunc',\n    \\ }\n\nfunc! PrtEnFunc()\n    nnoremap <buffer> <silent> <c-@> :call ToggleMRURelative()<cr>\nendfunc\n\nfunc! ToggleMRURelative()\n    let g:ctrlp_mruf_relative = !g:ctrlp_mruf_relative\n    call ctrlp#call('s:Reset', {})\n    call ctrlp#call('s:PrtClearCache')\nendfunc\n```\n\nI'm still undecided about adding this in, and the most I'll probably add is the `ToggleMRURelative` function.\n. I've already made the change, just haven't merged it. Also, that snippet is supposed to go into .vimrc, so you can choose the key and use it in any case.\n. Crashes like that are usually caused by problems in the environment or bugs in Vim itself. Your best bet is to keep updating Vim and avoid using this setup. `:Ggrep` is also a third party command. Plus, see tpope/vim-fugitive#306.\n. That already exists. You can use `;` in filename mode to filter the directories in front of the filename.\n. Oh I'm sorry, what you're proposing is a bit different. It's indeed nice to have. I'll look into improving the existing `;`.\n. > maybe we can mark this somewhere in the help file.\n\nIt's mentioned in the help file, actually, under the `ctrlp-input-formats` section.\n. They are actually pretty much self-explanatory and extremely obvious once you do something that changes them. You don't really need to care what they indicate from the start (or at all) so I don't think documentation is necessary.\n. Yes, that's correct. The \"ring\" rotates when you use `<c-f>` or `<c-b>`. And `prt` changes when you use `<s-tab>`. It might be nice to have all these explained throughout but it's really not necessary. You don't need to understand them to use anything, and your first guesses are most probably correct.\n. Nothing unless you know what you're using `<s-tab>` for.\n. I can see that there's always someone who finds it confusing, at least at first.\n\nBut I also don't think it's worth documented. You don't need to understand the statusline to do anything. Plus the help is already long as it is, people barely read it.\n\n@jsit they aren't tabs because there are more than 3 extensions. And you'll see what `<->` is once you use the feature that changes it.\n\n> Is there an option to define the separator characters? I looked but didn't see one\n\nWell, you can create your own statusline with `g:ctrlp_status_func`. Change everything if you feel like doing so.\n. @lsiden using an option (g:ctrlp_status_func) to customize the statusline is a bit different from forking and making change directly to the code. The former is what I am saying and mean.\n\nWhy do you think there's an option in the first place? Why don't I just not add it and tell everyone to fork the project, like you're saying? The option is there precisely because I figured some people would want to change the statusline, that whatever I chose wouldn't satisfy everyone.\n\n@jsit is for aesthetic good enough a reason? Because that was the reason the `<prev>={current}=<next>` was chosen.\n. @lsiden I don't think I'm being sarcastic(?). I always try to be matter of fact with my responses. I don't speak English natively, nor as a secondary language, so I'm sorry if somehow I gave off the wrong tone.\n. Not exactly what this option is for, but you can use `g:ctrlp_abbrev` to make hyphens be read as underscores:\n\n``` vim\nlet g:ctrlp_abbrev = {\n    \\ 'abbrevs': [\n        \\ {\n        \\ 'pattern': '-',\n        \\ 'expanded': '_',\n        \\ 'mode': 'pfrz',\n        \\ },\n        \\ ]\n    \\ }\n```\n\nCheck the docs if you want to know more about this option.\n. Have you looked into the options? What do you think of `g:ctrlp_use_caching` and `g:ctrlp_clear_cache_on_exit`?\n. Ok, closing. It seems you primarily just want to keep the cache file after exiting Vim. You can already tell ctrlp to do that, and you can also delete/update the cache whenever you like from both outside and inside of ctrlp.\n. No, it's not possible with ctrlp, but you can tell Vim to delete (or delist) a buffer when it's hidden:\n\n``` vim\nau BufRead * setl bufhidden=delete\n```\n\nThose buffers will then only show up when you run `:ls!`.\n\nOtherwise, what do you think about tagging the active buffers (probably with an `a` like `:ls` does)?\n. You can remove all MRU files outside the project with `g:ctrlp_mruf_relative`. Mixed mode will then effectively only show files and buffers.\n. Well, there are good, full featured plugins for managing buffers, so why build it into ctrlp? But people keep requesting this from time to time, I think I may just add it. There's also a .vimrc snippet which you can use right now, in #280.\n. Mixed mode basically loads all three File, Buffer, and MRU modes and the mixing also takes some more time. So naturally, it's slower than each of the modes.\n\nAnyway, buffer deletion may take a while since there are a few things I want to do first. I've also been a bit busy lately. If you don't want to wait, you can just create a mapping to delete a buffer in Buffer mode. All you have to do is grabbing the buffer name from the current line.\n. You can mark multiple files with `<c-z>`. So instead of opening each file, mark them both then press `<c-v>`.\n\nOtherwise, I think it's best to do this outside of ctrlp. Try creating an autocmd or a mapping that opens the spec file of the current file in a new vsplit.\n. No, it'd require reformatting the tag lines or at least the results. Tags files are sometimes quite large so the matching is slow already. I don't really want to bog it down by unnecessary reformatting.\n. This isn't a problem with CamelCase. It's because of ctrlp limiting the number of matches (which is exactly the max_height). This is something I can't fix without further slowing down the internal matching.\n\nSo if it annoys you too much, you should look into using `g:ctrlp_match_func`. Otherwise, try toggling regex or filename mode when the file you're looking for doesn't appear.\n. Yes, and there are already a few scripts/extensions written for match_func by other people. [burke/matcher](//github.com/burke/matcher) in C and at least 2 others in Python if I remember correctly.\n. Those don't mean much without the circumstances of how you get them or at least the Line numbers. I also can't reproduce it. So if it happens consistently, please narrow it down and provide steps to reproduce.\n. That's because you don't escape `~` in [the pattern you use](https://github.com/rainytooo/vimrc/blob/84c97089c3f04c06c9ae247038bc76525e0be2b7/vincent_base_vimrc#L389) for ctrlp_custom_ignore. In Vim, when used in a pattern, `~` matches the last given substitute string.\n. Using ctrlp just for that is kind of inefficient, but if you insist, try something like this:\n\n``` vim\nlet g:ctrlp_regexp = 1\nlet g:ctrlp_by_filename = 1\n\ncom! A cal feedkeys(\":CtrlP .\\<cr>\".expand('%:t:r').\"\\.\".( expand('%:e') == 'h' ? 'cc' : 'h' ).\"\\<cr>\", \"t\")\n```\n. It really won't be simple. Everything is centered around the prompt since it was the first piece that I started writing ctrlp on. And what you're looking for is basically a way to bypass this prompt.\n\nAnyway, how about saving the two variables (if they exist) and then reset them to their previous values after the feedkeys call? You can put all this into a function and call it with `:A` instead of calling feedkeys.\n. See `:h laststatus`.\n. You can use `g:ctrlp_buffer_func` to set `laststatus` locally to the ctrlp buffer. Just set it to 0 when entering and back to your default when exiting.\n. Did you use something like this?\n\n``` vim\nlet g:ctrlp_buffer_func = {\n    \\ 'enter': 'Function_Name_1',\n    \\ 'exit':  'Function_Name_2',\n    \\ }\n\nfunc! Function_Name_1()\n    set laststatus=0\nendfunc\n\nfunc! Function_Name_2()\n    set laststatus=2\nendfunc\n```\n. Then there's no other way. `laststatus` is the only option.\n. A few problems I can see now:\n1. Migrating/Invalidating the old cache files after changing the setting.\n2. Appending the file's path when putting the parts together. E.g. `subdir/file` -> `path/to/subdir/file`.\n. You'll need to have ctags installed and then set the location of the binary with `g:ctrlp_buftag_ctags_bin`. After that, you can run `:CtrlPBufTag` from Vim's command line to start ctrlp in buffer-tag mode. If you don't know how to do these things, just search around the web and do some reading until you do.\n. No, it's not possible. Also, the cache dir is used for not only File mode but other things as well, like MRU, prompt history, logs, other extensions... Separating these will require some pretty big changes. So what's your standard situation? And how would this help?\n. Yes, you can refresh cache for each project or directory by simply pressing `<F5>` in ctrlp when searching in that project. `:CtrlPClearCache` does something similar. You don't have to, and shouldn't use `:CtrlPClearAllCaches` all the time.\n. That means you already set it before somewhere and in a different var type. Just `:unlet` it before setting it again.\n. It's a limitation of the internal matching written in Vimscript. There's an old discussion about this exact issue in #110. Filename and regex modes can be used as quick workarounds, otherwise you can try `g:ctrlp_match_func`.\n. You're not supposed to be able to do that. When you paste that way, the text goes directly into the buffer making up the match window, which is non-modifiable. The prompt (where you want to paste into) is a pseudo prompt and you can only enter input into it through designated mappings. You can find the mappings for pasting at `:h ctrlp-pasting`.\n. It's because `\\` is mapped to inputting `\\` into the prompt. If you want to map something in ctrlp, use one starting with a modifier key (ctrl, shift, etc).\n. Mixed mode starts up slower. Changing a default also potentially forces a lot people to have to adjust their config. I generally only consider a change if it helps speed things up, avoid confusions, or is otherwise really necessary.\n. I'm aware of this but have always thought it's only a minor inconvenient, since you can quickly toggle `by_filename` with `<c-d>`. `by_filename` also dictates quite a few things, so I'll have to see if I can reasonably separate it.\n. Yes, it's like Shougo said, ctrlp only operates in Normal mode and `j`, `k` are already used for inputting `j` `k`.\n. Depending on where you place a mapping, it may be overwritten by another mapping or sometimes re-encoded, thus is lost. In this case, it's because Vim can't tell `<c-s-...>` and `<c-...>` apart, so they overwrite each other whenever one is defined. `<c-p>` is already used by ctrlp as the default mapping and loaded after .vimrc.\n. See `:h g:ctrlp_prompt_mappings`.\n. There should be documentation on how to write the custom glob function. But mostly this doesn't seem to fit in with the other `g:ctrlp_user_command` settings, replacing a function as opposed to running a command with `system()`.\n. It's because Vim's new regexp engine is still being worked on.\n\nIf you search for `new regexp engine:` in this file: ftp://ftp.vim.org/pub/vim/patches/7.3/README , you'll find entries for bugs like `only accepts up to \\{,10}` `Attempts to match \"^\" at every character`, and a lot of `{expression} not supported`.\n\nIt's unreasonable to try to account for all of those bugs. You should use a slightly older version (~ 7.3.900) and wait until the new engine is stable to update Vim.\n. Reported to the dev mailing list: https://groups.google.com/forum/?fromgroups#!topic/vim_dev/4L7p28MYIX0\n. @rene-aguirre what particular error did you run into? I haven't noticed anything else since 7.3.1223.\n. That sounds like it's the same error in OP.\n. @zdm that's an unrelated error that I don't think has much to do with ctrlp, or with the new regexp engine. See #248. Line 15 of `BuildPrompt()` is a `:redraw` command. So it's just as likely to occur at any random time you use `:redraw` anywhere.\n. Fixed in 53f3b2b.\n. It can't work with that. For example, with these entries:\n\n```\nparent/submodule\nparent/submodule/.git\nparent/submodule/subdir\n```\n\nThe pattern only matches the entry that has `.git`, so only the `.git` dir itself and everything under it are ignored.\n. Closing. This is impossible without specifying the submodule dirs.\n. Change it to a key that you know works to make sure `PrtClearCache()` is actually called. Also, you don't need to edit autoload/ctrlp.vim, there's an option for changing the mappings.\n\nSo try this, for example:\n\n``` vim\n  let g:ctrlp_prompt_mappings = {\n    \\ 'ToggleRegex()':        ['<F5>'],\n    \\ 'PrtClearCache()':      ['<c-r>'],\n    \\ }\n```\n. From what you describe, it looks like `<F5>` is being intercepted before Vim and Vim is interpreting an escape sequence as multiple keypresses.\n. Closing. This is almost definitely an issue with your term config, and not anything vimscript.\n\nEven when you don't map `<F5>` (ctrlp was the last place), pressing `<F5>` still does just about the same thing, and which is distinctive to an escape sequence: ctrlp is closed and then a seemingly random action is performed.\n. So I completely forgot about `<esc>` being mapped can cause this. See #432. Also, since `<F5>` has never been reported before, it looks like your terminal may be doing something unusual, e.g. sending extra escape sequences.\n. Duplicate of this request #350.\n. If using mappings isn't ideal for you, you can try using local .vimrc, or .lvimrc as some people call it. But for setting a one-time value, you need to call the init function directly:\n\n``` vim\ncall ctrlp#init(0, { 'mode': 'ra' })\n```\n. Closing. Specifying it when calling init() gives enough flexibility, I think.\n. It's because it's rather complicated to make the highlighting always work perfectly for the non-path types. So for now only 'path' is supported.\n. Yes, it's on my todo list for ctrlp. I'll definitely implement it, once things are figured out.\n. Yes, it's like Shougo said. And it only happens in the ctrlp buffer because the `<esc>` mapping is buffer local. To solve your problem, you can either try a different `&term`, or remove the `<esc>` mapping with the following setting, there's no other way:\n\n``` vim\n  let g:ctrlp_prompt_mappings = {\n    \\ 'PrtExit()': ['<c-c>', '<c-g>'],\n    \\ }\n```\n\nOtherwise, don't use arrow keys but `<c-j>` `<c-k>` to move the selection.\n. See also #209.\n. Then maybe it's because `timeoutlen` is set to 0 by default. But this is required for the inputting to work. In any case, there's no other options. You can try remapping the moving selection functions to some other keys you can use if using `<c-j>` `<c-k>` is somehow not an option.\n\nAlso, the ctrlp plugin itself doesn't load with `compatible` set, so the problem shouldn't be reproducible in that setting.\n. Just a thought, but if you can, try setting `ttimeoutlen` to a non-negative number (e.g. 100) so that you'll have different delays for key codes (100) and mappings (0).\n. Reproducible. I'll push a fix out soon.\n. That's impossible. The prompt is created with command line's output and Vim's command line can't be moved.\n. In a larger sense, yes, anything is possible. What I mean is that it's impossible with the way ctrlp operates now which is only in Normal mode. I'd have to change to a completely different inputting method, and rewrite much of ctrlp's core, just so the input prompt could be moved to the top along with the match window.\n\nAlso, ctrlp's interface is directly based on cmd-t's and lusty explorer's, in both of these you can't move the input prompt. Only in plugins that use Insert mode for inputting, the input prompt can be moved. Again, I mean among the plugins that I know of.\n. It is possible. See `:h ctrlp-input-formats`.\n. No, there isn't since ctrlp isn't based on fuzzyfinder. Recursive is more desirable than single directory search which isn't much better than `<tab>` completion with `:e`, which in turn is similar to how filename completion works in the shell.\n. Since you mention it, if I was happy with unite back then, ctrlp would have never been released or even started. It's a good thing that unite has improved a lot and now has many features ctrlp has. And I mean that. I'll switch to a different plugin or a different editor myself, if it better suits my needs.\n. That's a custom statusline created by powerline (a Vim plugin), not ctrlp's default statusline. You'll have to look into powerline's documentation and themes if you want to change those colors.\n. By default, `g:ctrlp_custom_ignore` doesn't get applied when you use `g:ctrlp_user_command`. You can check the notes under `:h g:ctrlp_user_command` for more details.\n. There's an option for this: `g:ctrlp_buftag_types`.\n. I see. I didn't realize it's supported by ctags.\n. See #443.\n. That doesn't have anything to do with ctrlp or the ctrlp repo. Check your local setup, you're referring to a nonexistent commit.\n. @aufula You can try turning on `g:ctrlp_key_loop` and see if it works with your input method. If it doesn't then there's no other way, since each character need to be mapped in Normal mode.\n. You can try setting a bigger max height for the match window to get more results, and/or toggle regexp mode for exact matching. As long as the some_file.ext is found, it's placed first.\n. It's intended. You're not supposed to be able to scroll pass what is on the list. You can increase the max height of the match window if you want more results.\n. Because it's faster to list exactly the number of results needed to fill the window, than list more but they aren't visible and you have to scroll to see them.\n. Then just increase the max height. There's little difference, I'm not sure it's worth a new setting.\n. I can't see the images. Can you re-upload them somewhere else?\n. Also, running `:syntax on` doesn't change anything for me.\n. I see. It's still not reproducible. Can you simplify your config and find whatever that contributes to this? Also, what ctrlp version are you using? What's your Vim version? Does it happen when you run `:syntax enable`? What happens if you have this in your .vimrc?\n\n``` vim\nhi CtrlPLinePre guifg=red ctermfg=red\n```\n\nThe highlight group for the `>` char is CtrlPLinePre, which by default uses your colorscheme's Normal group's background color as its foreground color.\n. OK, I think I found the cause. It's the `:hi clear` line that many colorschemes have. I use a modified, stripped down version of molokai which doesn't have that line, so even in minimum config, the issue didn't manifest.\n. It's not easy to avoid Vim's `:tselect` menu when using `:tjump`, since it's the default and the only behavior.\n\nI'm going to need you to provide a test case including the tag names, the filenames corresponding to the tags. Also, the 3 tags files and their relative locations.\n\nWhat do you mean by \"set currently searched string\"? Replacing `:tjump` would be even more complicated than avoiding `:tselect`.\n. The `feedkeys()` is only run once when you're done searching and are jumping to the tag. It's needed for respecting fold options. But what does it have anything to do with replacing `:tj`? And what do you consider smarter?\n. Oh I see. You can pass whole strings into the prompt with `g:ctrlp_default_input`.\n. It looks like there's no way to get the correct counts for use in `:[count]tag`. They desync with the counts on the menu as soon as there are 2 duplicates of the same tag in the active buffer. No way to recalculate and Vim doesn't provide any kind of reference.\n\nThis means using the `:tselect` menu in this case is unavoidable, but it's possible to enter the number for this menu automatically.\n. It's already doing that. But as I said, those numbers easily become unusable for `:[count]tag`.\n. That still has the desyncing problem, I think.\n. You mean you want it to highlight only the individual characters, not the entire matched string? This won't be simple since the matching is done with `match()` which only returns the first position.\n. It certainly does. Please go ahead with the pull request.\nThanks!\n. @aaronjensen some main functions in ctrlp are called with `sil!` to make it a bit more invisible/unobtrusive. So you may have to track down and remove a few of those instances for the messages to appear.\n. No, don't worry about that just yet.\n. There isn't such a function built in. But you can modify [this](https://gist.github.com/kien/1737475). Just replace the `exe 'lc!'` with a `return`.\n. By default, buffers with `buftype=nofile` are avoided because they are often used by plugins to display information. You can control this behavior with `g:ctrlp_reuse_window`.\n. @Wolfy87 That option doesn't work like that. See `:h g:ctrlp_reuse_window`.\n. Yes, just enable `g:ctrlp_mruf_relative`.\n. Looks like you have `data` ignored with custom_ignore in your [.vimrc here](https://github.com/Peregrinati/dot_files/blob/c066d43632c0b2d006f96da30609aca7913d9d17/vimrc#L95). If you want to keep that ignore rule, try something like `\\(mnt/\\)\\@<!data`.\n. That can potentially increase startup time exponentially with the number of buffers. Each buffer has to be compared with the others every time Buffer mode is used and the buffer list has been changed.\n. That will just add the extra step of generating the hash keys on top of everything. The comparison can simply be done directly with the tail.\nThe small number of non-uniques also isn't the issue. It's having to walk through the list to compare and find them, especially on the first time Buffer mode is open (all buffers are new), or on a subsequent opening when any number of buffers might have been added/removed/renamed.\n. I wrote [this](https://gist.github.com/kien/3748204) in my last attempt at shortening bufnames, which should explain my reluctance. It's basically something like that versus looping through the list once with `fnamemodify()`.\n. No, ctrlp is a finder, there's no option to show all files. You have to search and narrow down the results.\n. If you don't want to touch the options, just create a mapping for `:CtrlP .`.\n. No, it's not possible because of the way the prompt is built.\n. This is intentional. Unlisted buffers and buffers with non-empty buftype (`help`, `quickfix`, etc) aren't included in the listing to reduce cluster. Not sure if I want to change that.\n. ctrlp has its own buffer-local mappings. Take a look at `g:ctrlp_prompt_mappings` if you want to change them.\n. Changing an option name will break people's config. I try to avoid it unless it's really necessary. This seems too arbitrary to warrant a change. Besides, it's not going to work anyway since the var type is not supported. It's a List, while session can only store String and Number types.\n. `wildignore` does get applied unless you're using `g:ctrlp_user_command` without setting the `ignore` key to 1.\n. That's really odd. `wildignore` only gets applied when indexing a directory. If the files are listed in the cache file then they can definitely be found in vim. Also, try this syntax for ignoring a directory `set wildignore+=*/build/*`.\n. Yes, you can change them with `g:ctrlp_prompt_mappings`.\n. I'm going to need more details. What's your config for ctrlp? What happens if you set `g:ctrlp_max_files` to 0, then run ctrlp and clear the cache with `<F5>`? What happens if you reset wildignore with `:set wildignore&`? Does this problem happen with any directory other than your project?\n. Without more informations, it seems to be because you've reached the max_files limit (default is 10000). You can try either setting it to a bigger number, or to 0 which means no limit. There are maybe too many files in the first few levels of directories in your project.\n. That's definitely max_files. It's ignored when the commands in `user_command` are being used. So if you want to make sure this problem doesn't happen when you aren't in a git repo, just set `g:ctrlp_max_files` to a bigger number or to 0.\n. `g:ctrlp_prompt_mappings` is the option for that. If you search for mappings in the help, you should find it mentioned quite a few times.\n. Does (or did) airline detect the present of ctrlp? If the ctrlp.vim script wasn't even loaded, then it probably wasn't its fault if something in airline didn't load as a result. Also, the welcome info can be cleared by changes to the statusline.\n. Removing on demand is currently not possible. But if the current buffer isn't supported, you can simply leave the result list empty. I don't see why the extension has to be removed. Take buffertag.vim for an example, there's no harm leaving it there when the buffer has a FileType not supported by ctags.\n. I think so, yes. And you can change the labels right from your extension's init function. They aren't used until after the result list has been populated. So first find the Dictionary defining the extension in `g:ctrlp_ext_vars`, then change the values of the naming keys.\n. 10 is just the default number of results in the match window. It'll show you different files once you start searching. So just type in a few characters of the file you want to search for.\n. This isn't what it is for, but yes, you can get that by setting `g:ctrlp_mruf_relative` to 1.\n. No, there isn't such a shortcut. If you really want that, try using `feedkeys()` in a mapping to do the `<c-z>` and `<c-o>` steps automatically. Check out `g:ctrlp_buffer_func`.\n. No, when you use user_command, wildignore and custom_ignore are not applied by default.\n\nCan you explain what you mean by \"assign some directories to index directory\"? Currently, you can only specify one directory tree with `:CtrlP`. There's not yet a way to specify multiple directory trees.\n. Well, for now, you can either use some clever ignore rules (try negative-lookahead) to ignore everything else, or setup some mappings that each open ctrlp for a specific subdir.\n\nThere's already a feature request for supporting multiple starting directories, so I'm going to close this.\n. I think I prefer to keep ctrlp as a finder. If you want to use only the opening mechanism, try using Vim's `feedkeys()`. Also, take a look [here](https://github.com/kien/ctrlp.vim/issues/412).\n. Yes, this is simply because `<esc>` is mapped, so it can't really be fixed. But there are some ways to workaround, you can check #432 and #209.\n\nAlternatively, don't use arrow keys to navigate but `<c-j>`, `<c-k>`, etc.\n. This is because ctrlp only lists the first results found. That is if the foo.file is indexed and cached. You can solve this by toggling either filename or regexp modes with `<c-d>` `<c-r>`, or increase the max result or max height values.\n. Make sure the file is indexed. Set [max_files](https://github.com/kien/ctrlp.vim/issues/325) to 0. Also toggle both filename and regexp modes, use something like `^foo.file`. If the file is indexed, then it can be found.\n\nBTW, max result doesn't work like max_files. Setting max result to 0 only sets it to 1.\n. The selection is a cursorline. So it's Solarized that has a cursorline color too similar to the background color. You'll have to redefine the CursorLine color group, either in .vimrc or in the colorscheme.\n. For the first question, use `:CtrlP path` where you can only specify one directory path at a time. For the second question, there's a Most Recently Used (MRU) mode that remembers the files you've opened. For more details, check out `:h :CtrlP`, `:h ctrlp_working_path`, `:h :CtrlPMRU`, and `:h ctrlp_mruf`.\n. If you use vim-airline, you'll have to change the statusline colors through the plugin somehow. For the non-statusline colors, then use .vimrc and/or the colorscheme.\n. That's one of the main purposes of the feature. It wouldn't be useful if the command wasn't used as soon as the user `:cd`s into a subdir of their project because they had path_mode disabled for different reasons.\n\nSince you have a .git repo you want to be treated differently, I suggest putting a local .vimrc there to disable the user_command option.\n. Put it once, in the same directory as the `.git` dir. Just have a check for the cwd. If the cwd is a subdir, disable the option. An autocmd works, too, if you want this for every project.\n\nWhat you favor against is one of the things that make this feature worthwhile. Since the feature is basically \"using this custom listing command in this particular directory\".\n. Thank you! I'll check it out as soon as I can. It may be in a while, though, since I've been incredibly busy lately.\n. @kdurant I haven't been able to check it out yet. Plus it's still a work-in-progress.\n. It's already possible. Check out `g:ctrlp_abbrev`. Just expand `_` or `\\` to an empty string.\n. No, it's not always needed. You can prevent it from being called by setting `g:ctrlp_clear_cache_on_exit` to 0.\n. Can you provide steps to reproduce the error? Does updating Vim help? It looks like the parser confuses the colons in the Dictionary with operators.\n. Thanks! I can't reproduce it in Vim 7.1.0 to 7.4.0, but in 7.0.0. Looks like it's an old bug with the parser when Dictionary was new. I use ternary operators often, however, so I may have to change a few other places as well.\n. Natively, you can try `g:ctrlp_lazy_update` which should alleviate it somewhat. Otherwise, you'll want to look into using external, non-vimscript matchers through `g:ctrlp_match_func`. There are a few around.\n. That'd be the proper way, I think.\n. You can set either `hidden`, `autowrite`, `autowriteall`, or `confirm`. If none of these options is set, commands that replace the current unsaved buffer will fail with an error. To avoid this, ctrlp opens a new split.\n. Can you get the full error message, especially the error code, and provide steps to reproduce? Include details like which mode you're in, the filename you're trying to open, the current working directory, etc. Also, try starting Vim with as less configuration as possible, ideally with only ctrlp.\n. Thanks! You get those errors because you've either set `debug=msg` or `debug=throw` somewhere in your Vim config. When not set, bufnr() returns `-1` when no such buffer exists, and the error is omitted. Similarly with expand().\n. Yes, creating a new file in a vertical split is the default. You can change it with `g:ctrlp_open_new_file`.\n. Yes, matching is plugin-wide so you can't define a matcher for a specific mode or extension. But it does sound like something good to have.\n. No, highlighting of match is only supported in extensions that list filenames. I may try to extend it after #488.\nThis is the same request/issue as #431.\n. Do the splits have open files? What are their filetypes? If possible, can you provide those files as well?\n\nIt may have something to do with syntax highlighting being slow in Vim in general, and BuildPrompt() running redraw.\n. Glad you've solved it. Also, it's worth noting that syntax highlighting performance can otherwise be improved by setting a small synmaxcol, and small minlines maxlines for :syntax sync.\n. Yes, there is, by setting `g:ctrlp_mruf_relative`. For more MRU options, you can search for ctrlp_mruf in the docs.\n. I think I'll prefer keeping the cursor visible, since the cursorline by itself is sometimes pretty hard to see.\n. Actually, ctrlp's cursorline is Vim's default, enabled by `set cursorline` in the ctrlp window. And I still think the default cursor being visible is generally a good thing.\n. Yes, I understand you mean that cursor. What I'm trying to say is that it helps seeing the selected entry when the cursorline is hard to see. But hiding it when keyloop = 1 is fine.\n. Yes, when in the ctrlp prompt, you can press `<c-\\>` then press `f` to choose `c[f]ile`.\n. It's an intended behavior of Mixed mode. All mru files and buffers that are in the cwd as the regular files are filtered out to avoid duplicates. So if that mru file also shows up in Files mode, it'll show up in Mixed mode.\n\nThe reason the buffer and mru filter isn't run against the full files list from Files mode is because the list is often big enough to significantly slow down the mixing.\n. 1) It's in a hidden directory (.config), so for it to show up in Files mode, you need to at least set ctrlp_show_hidden.\n2) It's the step that determines whether or not a file has duplicates that is slow, i.e. comparing the buffer, mru and file lists.\n. By default, hidden files and hidden dirs (dotfiles and dotdirs) aren't listed. So if it shows up on your other laptop then there's something different. Also, in a subdir or not, it's still under the cwd.\n. Doing it the expected way isn't any more complicated, but as usual I have to choose between that and speed with some rough edges. If I have time, though, I'll probably rewrite Mixed mode and make it more flexible.\n. This is great. Thank you!\n\nAs for the filename, I'm not sure what the language code for Chinese is. If it's \"cn\" then the filename should be ctrlp.cnx.\n. You can set either `hidden`, `autowrite`, `autowriteall`, or `confirm`. But I think I should also try making this part a bit smarter. Those options shouldn't have to be set when working with the current buffer.\n. CtrlP has a feature that by default will zoom into the directory of the current file if the cwd is different. When you open `file1_dir1.txt` in `links/dir1/`, Vim will instead load the `file1_dir1.txt` file in `nolinks/dir1/`. The directory of the current file will then be `nolinks/dir1/`, while the cwd is still `links`.\n\nSo disabling the aforementioned feature with `g:ctrlp_working_path_mode` will solve your issue.\n. May I ask you to provide steps to reproduce? Also, what's your Vim version? Have you tried with minimal configuration (i.e. only CtrlP installed)? There's no freezing nor even any delay for me when I try opening a file this way.\n. Does it happen consistently?\n\nAs for starting Vim with minimal config, run:\n\n```\nvim --noplugin -u path/to/a/.vimrc\n```\n\nContent of this .vimrc:\n\n``` vim\nset nocp\nset runtimepath^=~/.vim/bundle/ctrlp.vim\nruntime! plugin/ctrlp.vim\n```\n\nWith `~/.vim/bundle/ctrlp.vim` a clone of the ctrlp.vim repo.\n. I still can't reproduce it, with or without tmux. And I doubt there's much I can do anyway with ctrlp being a vim script bound to Vim. The search window is basically a buffer named ControlP in a horizontal split with a few local mappings.\n\nI think I'm going to close this as it doesn't seem to worth the effort tracking down. With only 2-3 times, it's simpler to just avoid triggering it.\n. `<c-c>` is one of the default mappings to close ctrlp. To create new file, use `<c-y>`.\n\nYou might want to check out `:h ctrlp-mappings` as well, for the other available mappings.\n. You're not supposed to touch `g:syntax_on`, it's Vim's job to set/unset it whenever you run `:syntax on/off/enable`. Forcing the variable on while syntax is actually off will throw syntax highlighting detection off, and likely cause unexpected behaviors. So try removing the second line.\n. CtrlP doesn't do anything font-related. But those lines look like the cursorline, just multiple of it. You can test by setting cursorline in the other buffer.\n\nThe only thing I can think of here is to try changing Vim's `linespace` option, or terminal.app's equivalent. And if nothing else works, I guess you might just have to use a different font.\n. Ok I'm closing this. I doubt there's anything reasonable that I can do from CtrlP here, since this is font and term specific.\n. I believe this feature already exists. You can press `<c-o>a` to mark all files in the match window.\n. Yes, `<c-o>c`.\n. Sorry I forgot, `g:ctrlp_arg_map` needs to be set as well to enable the additional choices.\n. Can you clarify point 1? What seems to be a bug? Toggle the marking is what `<c-z>` is supposed to do.\n\nAs for point 2, it's a good point. I'll look into adding it. I didn't think anyone would use `<c-o>a` all that much so it's still rather basic.\n. 2.1 doesn't happen to me. The markings are just Vim's signs.\n. This looks great. But how does it interact with CtrlP's existing tab-completion? Also, since they are closely resemble, is merging them feasible?\n. @axelson see `:h ctrlp-autocompletion`. You need to type something first.\n. It's not supposed to. CtrlPLine helps you jump to a line in a file you're actively working on, not to a line anywhere. This also provides a mean to exclude some buffers, and is similar to Vim's `:bufdo` in that it only works on listed buffers.\n. You're misinterpreting the log. The clock column (first column) is recorded when the operations finish. You should look at the second column if you want to know how long each operation takes. So utils.vim's load time is only 0.433 ms. It's the \"BufEnter autocommands\" that is taking close to 1s (878.612 ms).\n. The `a`, `d`, and `x` choices are already mentioned under the mapping help section. The `x` again under its option. I just don't feel like they are practical enough to be shown in the inline help, which I want to keep a little less busy.\n. What does this have to do with ignoring results from submodules with custom_ignore? s:findroot() is only for finding a cwd. So if this change works, it'll only prevent submodules from being used as a cwd. Is that what you want?\n\nBut I don't think this is something that should be enforced and hard-coded in. If you want the superproject to always be the root, just use the .gitmodules or any other file as the root marker. Check out `g:ctrlp_root_markers`.\n. After a closer look, I think this not only won't work (aren't folder and directory the same thing?), and won't \"fix\" #427 (which doesn't need fixing), but will also break root finding for people who want to use a file as the root marker.\n. MiddleMouse is mapped to pasting from the clipboard register `+` by default. Not sure if I want to change it to `*`. See `:h quoteplus` and `:h 'clipboard'`.\n\nThat aside, PrtInsert() only accepts few certain arguments, not just any random string. And `'MiddleMouse'` should be `'<MiddleMouse>'`.\n\nBut being able to specify the register there with PrtInsert() would be nice. I think I might add it.\n. The command is run with Vim's `system()`. Your user_command also works fine for me on Windows. If it only just stopped working, then it's probably something in your environment that changed.\n\nClosing this as I don't think it is something I can fix from CtrlP.\n. The only difference in CtrlP is the argument for --git-dir being passed through `shellescape()` first with `&ssl` off. But even with shellescape() removed and `&ssl` on, just the system() call it still works fine for me.\n\nYou can try testing with a clean Vim configuration, different paths and cwds. And if nothing else works, try specifying the full path to git.exe like this: `'\"C:\\Program Files (x86)\\Git\\bin\\git.exe\" --git-dir=%s/.git ls-files'`.\n. I can't reproduce this. The file count goes down when I add more entries into either wildignore or custom_ignore.\n\nDoes turning off follow_symlinks change anything for you? You can do a simple test to see if those extra files are from `vendor` by temporarily moving `vendor` out of `zeus`.\n\nAnyway, CtrlP relies completely on Vim's globpath() for the indexing. You have `vendor` in wildignore, so globpath() should ignore it entirely. However, custom_ignore can only be applied after globpath() has finished indexing. So if globpath() is already slowed down by indexing all those files, there's no helping it.\n. There's probably a symlink pointing to directory outside.\n. If you're already in the home directory, typing the extra `~/` will show you a `NO ENTRIES` message, because `~/~/.vimrc` doesn't exist. And if you keep trying to open it, CtrlP will attempt to create the file including the path to it.\n\nI guess the same thing happens with those symbols, there are no files with them in their names.\n\nI don't think I should add workarounds to prevent cases like this. The `NO ENTRIES` is very apparent. Someone could make a typo, or type `<c-y>` by mistake, or any other things. I don't think they should or could be prevented.\n. Does setting `g:ctrlp_key_loop` change anything? It sounds like tilde and grave are used as \"dead key\" modifiers on your Linux setup, to produce characters like `\u00e0` `\u00e3`.\n. It's because you're using CtrlPMixed which includes files, buffers, and MRU files. The `/etc/hosts` entry you see is a MRU entry.\n. No, :CtrlP only shows files.\n\nTo clear MRUs, press `<F7>` while in MRU mode.\n. How exactly did you do those? Checking if there's only one file then call the accept function right from the init function should do it. If you want to send `<cr>`, try using feedkey().\n. Actually, I don't think this is possible, at least not yet. The init function is called before the prompt is rendered to properly close it. And there's no other point to accept the file until a selection is made by the user.\n. And if you don't want the file list cached, you can turn that off as well with `g:ctrlp_use_caching`.\n. You'll probably have more freedom using a local .vimrc for the project, and put the settings there. If you don't want to do that, a simple mapping to `:CtrlP ../` should be suffice, I think.\n. There isn't. But this does sound useful. Thanks for the suggestion!\n. BufferTag relies entirely on ctags for the results and hasn't been changed in a while. So check if ctags is installed and working properly on your system.\n. It's just Vimscript being slow when the list is too large. You'll have to employ an external matcher with `g:ctrlp_match_func`, preferably written in a faster language. Nothing else really helps.\n. The longer the search string is, the further down the file list the matcher has to dig for results. Over 100k entries is a lot for a List. As said in the other issue, you'll have to use an external matcher written in a more suitable language. There are at least a few of these matchers around, last time I looked.\n. It's probably the root finding feature. You can try turning it off with `g:ctrlp_working_path_mode`.\n. The root finding/zooming feature is the only thing that interacts with the file system when starting in Buffer mode. In File mode, the sorting compares modified times, so it also interacts with the file system regardless of the file list being cached.\n. You can call `s:PrtClearCache()` with `ctrlp#call({name} [, {args}])`. Or just simulate `<F5>` with Vim's `feedkeys()`. The extension's init will be called again.\n. It's preserved by default, unless `nolim` is set to 1 in the extension.\n. You can get it by setting `g:ctrlp_by_filename` to 1.\n. You've probably reached the max_files limit. The default value is 15000.\n. It's because the CtrlP buffer is opened with `:noautocmd`, mostly to avoid issues with plugins that do things when autocmds are triggered.\n\nI also use UltiSnips frequently but haven't run into that. I use an older copy from last year, not sure which revision or version.\n. There were actually some old issues with plugins changing things expecting the match window to be a regular buffer. It's why I want it to be more invisible.\n\nHow about adding a check for the correct buffer before running the iunmap's? Someone may use `:noautocmd` or `eventignore` anytime and change to a different buffer, which will raise the same errors from UltiSnips.\n. It's because you're setting prompt_mappings in buffer_func, and for when CtrlP is about to close.\n\nJust move the first prompt_mappings setting out of MyPrtMappings() and remove the buffer_func line. Or if you use MyPrtMappings() elsewhere, then just call MyPrtMappings() directly.\n. OK, I added this to the dev branch, check it out: https://github.com/kien/ctrlp.vim/tree/develop\n\nLet me know if you find any problem.\n. Sorry, I don't think I understand what you're trying to say here. `<up>` and `<down>` should move the selection up and down in the match window. Does `<down>` behave differently for you?\n. Yes, I got it  (Github removed the `<up>` and `<down>` in your comment). As for the bug, the `<up>` and `<down>` mappings are basically just this:\n\n``` vim\nnnoremap <buffer> <silent> <up> k\nnnoremap <buffer> <silent> <down> j\n```\n\nI'm guessing something in your setup changes this. You might be able to track it down with `maparg()` and `mapcheck()`, but if you just want to avoid `<up>` and `<down>` you can add this to your .vimrc, and ctrlp won't touch these 2 keys:\n\n``` vim\nlet g:ctrlp_prompt_mappings = {\n    \\ 'PrtSelectMove(\"j\")': ['<c-n>', '<c-j>'],\n    \\ 'PrtSelectMove(\"k\")': ['<c-p>', '<c-k>'],\n    \\ }\n```\n. Thanks Juan, looks like this is a problem with ncurses on OSX 10.6.3:\n\n> Instead of their proper action, they all quit the program and printed -respectively- \u201cOA\u201d, \u201cOB\u201d, \u201cOC\u201d and \u201cOD\u201d on the stdout.\n> http://www.uponmyshoulder.com/blog/2010/os-x-10-6-3-broke-ncurses/\n\nAnd using those keys in Vim will just enter insert mode and insert A, B, C, D.\n\nSo I'm not sure if I should try to find a work-around for that and include it in the plugin.\n. Nope, not hardcoded.\n\nPlease try this if you guys have time and let me know if it solves the problem for you:\n\n``` vim\nif has('mac') || has('macunix')\n    nmap <esc>[A <up>\n    nmap <esc>[B <down>\n    nmap <esc>[C <right>\n    nmap <esc>[D <left>\nendif\n```\n\nAlso, here's a possible external fix:\n\n> Go to your home directory, mine is at /Users/myname/\n> Open your .profile and add TERM=linux at the first line of the file.\n> Save and quit\n> Type source .profile and enter\n\nAnd from the comment:\n\n> For the record, if you find that your .profile file does not exist then just go ahead and create it and it should work fine (it did for me)\n\nSource: http://www.techiecorner.com/140/arrow-key-not-working-in-vi-vim-mac-os/\n. OK, I've pushed a fix to the dev branch: https://github.com/kien/ctrlp.vim/tree/develop\n\nLet me know if it works.\n\nThanks!\n. You mean using `nnoremap` instead of `nmap`? If it works I'll change it to `nnoremap` or `nn` for short.\n\nUnfortunately, there isn't any other way to fix this except disabling the `<esc>` key (buffer local) when in terminal.\n. OK I've pushed the latest changes to github, here's the relevant line with `nn` or `nnoremap`:\nhttps://github.com/kien/ctrlp.vim/blob/develop/autoload/ctrlp.vim#L673\n. Alright, I think this is a good enough workaround for this problem with ncurses, aside from doing it outside of Vim, or just not mapping `<esc>`. I'll go ahead and push this to master.\n\nIf anyone has any suggestion, feel free to comment.\n\nThanks everyone!\n. Also, I just want to clear this up, since @sorin-ionescu hinted toward it: this wasn't an issue caused by mapping keys with `nmap`, all the mappings in this plugin use `nnoremap` or `nn` from the get-go.\n. How do you think that? Can you explain how something like this can assume everyone uses a VT term? Honest question because I don't really see why:\n\n``` vim\nnn <buffer> <silent> <down> j\n```\n\nIt's just like your typical vimrc line. And it's basically what this plugin uses for every key.\n\nAlso, the workaround is this, which applies to both xterm\\* _and_ VT\\* terminals:\n\n``` vim\n    let lcmap = 'nn <buffer> <silent>'\n    if &term =~? 'xterm' || &term =~? '^vt'\n        for each in ['\\A <up>','\\B <down>','\\C <right>','\\D <left>']\n            exe lcmap.' <esc>['.each\n        endfor\n    endif\n```\n. I'm sorry but that doesn't even make sense, detect what automatically?\n\nAnd it's really not up to me, this is a known problem with Vim in terminal, and ncurses, a lot of results on Google. Yes, other people have run into it when using arrow keys, and the oldest mention of this I could find was from 2003.\n\nAlso, as I posted above, I didn't come up with the workaround myself either. This workaround and similar ones, have been around for as long as this issue has existed, many years.\n. After changing wildignore or any setting that can potentially filter the results, you'll need to clear the cache by running `:ClearAllCtrlPCaches`, or pressing `<F5>` if you already have ctrp-p opened.\n\nIf that doesn't work, let me know.\n. OK, this looks like it's because of the glob I use to search for dotfiles which is `.*`, it seems to ignore wildignore for these directories and files. I don't see a way to fix this without removing the dotfiles search functionality altogether.\n\nSo for now you'll have to use this instead:\n\n``` vim\nset wildignore+=*/.git/objects/*\n```\n\nI'll make some changes to the docs.\n. Also, thank you for reporting this. I've always had the `*/` for wildignore in my vimrc and just assumed that it'd work without it.\n. Good idea, thank you! I might as well make this an option for the user to change.\n. This has been added: https://github.com/kien/ctrlp.vim/blob/master/doc/ctrlp.txt#L210\n. Hi,\n\nCan you record the error messages next time this happens? And the task you're doing with it at the time, and let me know your Vim version, which OS etc...\n\nAlso, not sure if this helps, but you can try reducing the value of `g:ctrlp_max_files`, the default is 20000. Then use it like that for a while and see how it goes.\n\nThanks!\n. Closing this for now as too-vague and possibly-unrelated. Please feel free to reopen if you get more infos on this, and if anyone else has this problem as well.\n\nThanks!\n. You're right. But so far on Twitter I found only 1 segfault tweet by SteveLosh... and then in a reply someone else said this worked fine for him, assuming both people are on OSX.\n\nWell, since I can't reproduce this, I doubt I can do much about it. I'll try to reduce the plugin's footprint as much as possible, but that's pretty much it. Just use what you like and what works for you.\n. That's great. Thank you! This just prompted me to check all the type() instances.\n. That sounds like something I might use myself, too. So yes, I'll consider adding it once I have some more free time.\n\nThanks for the suggestion!\n. This has been added and is on the dev branch: https://github.com/kien/ctrlp.vim/tree/develop\n\nLet me know what you think.\n. Yep, I thought about clearing the cache automatically as well, but if the parent directory is large this might take too long, and if the user wants to force an update they can just use `<F5>`. I'll look into adding the new entry to the cache.\n\nPartial matching of dir names is problematic, I think. e.g. a dir name like `data` can be matched against existing `data`, `database`, `mydata` or `death_note_abc` etc... and they all can be anywhere in the dir tree or all at the root, with no way to tell which is the one the user really wants. So if you have an idea for this, let me know.\n. Pushed to master. New entry's added to the cache on-the-fly.\n\nThank you for the suggestions! Closing for now.\n. It's working for me. It doesn't work if you just execute that in the command line, though. So you'll need to put that into your .vimrc and restart Vim.\n\nAlso, with the current version, you can now use `:ResetCtrlP` after changing the options (from the command line) to update them without restarting Vim. You still need to put them into .vimrc if you want to keep them permanently, though.\n. Hi,\n\nCan you rephrase that? I'm not sure I understand what you mean. But if I get it right, then you need to change the `g:ctrlp_persistent_input` option. Set it to 0 to clear the value in the input field each time CtrlP is called.\n\ne.g. add this line to your .vimrc:\n\n``` vim\nlet g:ctrlp_persistent_input = 0\n```\n. I'm sorry, I still don't understand what the problem is.\n\n> So, if I press ctrlp (ctrlp is still active) instead to activate the old one try (giving some errors) to open a new instance.\n\nCtrlP is supposed to close each time you open a file from it, or simply move away from the CtrlP window will trigger it to close. \nDoes it do that for you?\n. That sounds like `<esc>` isn't working. Can you use `<c-c>` or `<c-g>` (CTRL-C or CTRL-G) to close CtrlP?\n\nAlso, are you using Vim in terminal or are you using gVim/MacVim?\n. What does it show when you run `:echo &term` from Vim's command line? And what OS are you on?\n. This is a really odd behavior and most likely has something to do with the [control sequences](http://www.xfree86.org/current/ctlseqs.html) in terminal (again). So maybe I'll install iTerm and try something out. But for the mean time, I guess you'll just have to use `<c-c>` or `<c-g>` to exit CtrlP.\n. OK, I tried to reproduce this with iTerm 1.0 and Vim 7.2 on Snow Leopard but couldn't; `<esc>` seemed to work fine in both situations, matches and no matches. I guess there's something else in your setup interfering with the `<esc>` key.\n\nSo if you don't mind, can you capture the error message like this?\n1. Run `:redir @a` (redirect to register `a`)\n2. Call CtrlP and try to reproduce the error with `<esc>` and \"no matches\".\n3. Exit CtrlP with `<c-c>` or `<c-g>`\n4. Run `:redir END`\n5. Get the content from register `a` with `\"ap` and post it here.\n. Closing this for now as `unreproducible` and since it's a minor issue.\n. Does BundleInstall work if you set it to `set wildignore+=.git/*,.hg/*,.svn/*`? (without the preceding `*/`)\n. You mean a history of the strings entered in the prompt?\n. Hmm... I usually only type a few characters (4- 5) to find what I want. So I'm not sure a history of these short strings would be really beneficial. Besides, there's already the `g:ctrlp_persistent_input` (remember the last string) option.\n. Come to think about it, Vim's command line also has a history which I use quite often. So maybe I'll add this (as a history of accepted input strings) and reassign `<c-n>` and `<c-p>` to it, just like the default mappings in the command line.\n. This has been [added](https://github.com/kien/ctrlp.vim/commit/0158e6406a3c40bdf512473d621465408b3fbfd7#L1R260). Thanks!\n. Hi,\n\nDoes the problem occur if you don't use symbolic link for `dir`? Also, can you force close ctrlp using `<c-c>` or `<c-g>` when the problem happens?\n\nAnyway, I'll track this down and try to fix it once I'm little less busy. Thank you for reporting this and providing the infos!\n. Yes, you're correct, I did some tests earlier and noticed that as well. For some reason `bufwinnr()` returns -1 after using `..`. The weird thing's that it only does that in Vim 7.2, but not in 7.3 and 7.0.\n. That's awesome! Thank you!\n\nA simple fix is this, since we kind of need that `chdir` line now for the `..` cmd. Let me know if it works for you:\n\n``` vim\nif exists('a:2') || ( bufnum > 0 && bufwinnr(buf) > 0 )\n```\n. Oh I already fixed that in my working version. This should do the trick:\n\n``` vim\ntry\n    bun!\ncatch\n    winc c\nendtry\n```\n\nAnyway, I think there should be a better way to solve the problem with `bufwinnr()`, since we need that `bufwinnr()` check to close CtrlP in case an user calls another instance of it while still inside the prompt. I'll try to come up with something once I'm done with some works here.\n. I've pushed a fix to the dev branch: https://github.com/kien/ctrlp.vim/tree/develop\n\nLet me know how that works for you.\n. Pushed to master. Thank you again for all the help!\n. Looks like the # and % need to be escaped since they are special chars. I've pushed a fix to the dev branch:\nhttps://github.com/kien/ctrlp.vim/tree/develop\n\nLet me know if it works for you.\n. This has been pushed to master.\n\nThank you for reporting!\n. This sounds interesting. I'm not sure how marking the files would work, though. Also, because the listed files are matches of the same pattern, it might not be very useful.\n. I got a few ideas of how this could work but so far all seem pretty clunky. I'll definitely give this a shot, though.\n. Added to the [dev branch](https://github.com/kien/ctrlp.vim/tree/develop). Let me know what you think.\n\nUsage: `<c-z>` to mark/unmark files, `<c-o>` to open them.\n. I just went ahead and pushed this to master. Thank you for suggesting this feature!\n. Awesome, thank you for donating time! I'll check it out and see what's best (probably will just integrate it instead of merging).\n. OK, looks like adding a new option for this is a little unnecessary. Also, `hg locate` returns the paths of the files relative to the repo's root, this will make opening files fail when user is in a subdir of the repo and `g:ctrlp_working_path_mode` is set to 1. `git ls-files` seems to work perfectly everywhere.\n\nI think I'll just add a few lines in the doc for these commands and how to set them up correctly.\n\nThanks!\n. Using `--fullpath` with `hg locate` will return paths with mixed `\\` and `/` on Windows and makes opening files fail. I see your point, though, so I'll definitely try to find a fix for this and make it work.\n. [Let me know how this works](https://github.com/kien/ctrlp.vim/commit/000742dc0fb7f15e3cbfb62b13852a13b2b35966). Instead of hardcoding the commands, this will allow people to use something other than just hg, git or svn.\n. Sorry about that, I forgot to do a check for a:1 after removing another FindRoot call. Just pushed a fix.\n\nThank you for reporting!\n. Thank you! I'll add a note to the doc about this.\n. You can put either `set autowriteall` or `set hidden` in your vimrc to avoid this issue. There's some more info at `:help edit_f`. I'll add a warning to ctrlp. Thanks for the heads up!\n. Nope, I just use `:hide` when opening a file in the same window. The effect is the same as having `set hidden`.\n. This is actually a feature to prevent opening the same file twice by mistake. I'll add an option to toggle it. Thanks for the heads up!\n. It's `g:ctrlp_switch_buffer`.\n. That map will clear all caches every time CtrlP starts. If you want that behavior, you can simply put this into your vimrc:\n\n``` vim\nlet g:ctrlp_use_caching = 0\n```\n\nIt's practically the same.\n. You can use `<F5>` inside CtrlP to clear the cache at anytime, so I think having an extra mapping to do basically the same thing is not necessary. Thanks for the suggestion, though!\n. Sounds like globpath() chokes on these volumes. So I think your best bet would be using `g:ctrlp_user_command` and set an external tool to use for listing files.\n\nYou can check `:help g:ctrlp_user_command` for the syntax.\n. It's because ctrlp currently prepends the opening cmds with `:botright`. There's no special reason to it, just my personal preference (it helps breaking the new window out of special buffers and narrow windows). I'll remove it and let the user decides. Thanks!\n. Thanks! But when searching for a keyword I often use something like `/bo\\>`. So it's not really a problem.\n. This has been resolved since v1.5.4. If `hidden` and `autowriteall` are off, Vim will show a Yes/No/Cancel prompt asking to save the buffer. Let me know if it still doesn't do that for you. Thanks!\n. Just added a save dialog. If Yes: save the buffer and open the new file in current window, if No: open in a new split, If Cancel: do nothing.\n\nLet me know how that works.\nThanks!\n. Just pushed a fix, let me know how that works. I think I explicitly tested this but a few versions back. Thanks for the heads up!\n. Yup, I've made it very simple to add extensions to ctrlp. Everything you need to know is [here](https://github.com/kien/ctrlp.vim/blob/extensions/autoload/ctrlp/sample.vim).\n\nBut I guess it's unlikely that someone will do this, so I'll give it a shot once I have some more free time.\n\nThanks for the suggestion!\n. Added along with another extension for quickfix. You can enable it with:\n\n``` vim\nlet g:ctrlp_extensions = ['tag']\n```\n\nStart in tag mode with `:CtrlPTag`.\n\nIf you find any problem or see anything that can be improved, let me know.\n\nThanks!\n. c3b316a should take care of the updatetime complaint from easytags.\n\nThis tag extension only looks for tags files defined with the Vim's `tags` option. So you'll need to include the name and location of the tags file generated by easytags in this option. Try something like this for your vimrc:\n\n``` vim\nlet &tags .= ','.vim_tmp.'/easytags'\n```\n. Assuming that the `tags` option is changed each time you switch to a different filetype, then I think pressing `<F5>` will update the results. Can you test that and let me know if it helps at all?\n. Let know me know how a4b8d4c works?\n\nThanks!\n. Do `:echo tagfiles()` and `:echo taglist('.*')` return anything before and\nafter running `:CtrlPTag`? What's the output of `:echo tagfiles()`?\n. I was able to reproduce this by setting path_mode to 0. However, it should\nstill work with absolute path like\n/tmp/.graudeejs/.vim/easytags/vim but somehow doesn't in your case.\n\nI'll investigate further and try to find a fix soon.\n\nOn Tue, Nov 29, 2011 at 2:14 AM, Aldis Berjoza <\nreply@reply.github.com\n\n> wrote:\n> \n> On Mon, 28 Nov 2011 10:42:27 -0800\n> kien\n> reply@reply.github.com\n> wrote:\n> \n> > Do `:echo tagfiles()` and `:echo taglist('.*')` return anything\n> > before and after running `:CtrlPTag`? What's the output of `:echo\n> > tagfiles()`?\n> > \n> > ---\n> > \n> > Reply to this email directly or view it on GitHub:\n> > https://github.com/kien/ctrlp.vim/issues/27#issuecomment-2904997\n> \n> `:echo tagfiles()` returns `['/tmp/.graudeejs/.vim/easytags/vim']`\n> Which is correct. After running `:CtrlPTag` output is the same.\n> \n> `:echo taglist('.*')` before and after return massive array of\n> dictionaries with tags\n> \n> ```\n> [{'cmd': '/^map ,$ <plug>NERDCommenterToEOL$/', 'static': 0, 'name':\n> ',$', 'language': 'Vim', 'kind': 'm', 'filename': '/home/graudeejs/\n> .vim/vimrc'},...\n> ```\n> \n> ## \n> \n> Aldis Berjoza\n>  http://www.bsdroot.lv/\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/kien/ctrlp.vim/issues/27#issuecomment-2905536\n. Let me know how the new commit works. Thanks!\n\nAs for filtering duplicates, the :tag command already kind of does this, it\njumps to the first matching tag if there are several ones. Manually\nfiltering the tags list can be costly, and probably too much for the few\ntimes it actually catches something.\n\nKien\n\nOn Tue, Nov 29, 2011 at 2:35 AM, Aldis Berjoza <\nreply@reply.github.com\n\n> wrote:\n> \n> I disabled EasyTags (removed plugin) and manyally set tags path to\n> /tmp/.graudeejs/.vim/easytags/vim with\n> \n> ```\n> :set tags+=/tmp/.graudeejs/.vim/easytags/vim\n> ```\n> \n> and CtrlPTag works.\n> \n> Btw, I have suggestion:\n> tagfile might contain duplicates, so you should (somehow) filter these out\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/kien/ctrlp.vim/issues/27#issuecomment-2905920\n. That'll require some non-trivial changes in how ctrlp does the whole pattern matching. Sounds really cool though, so I'll definitely look into it. As for seaching tags in current buffer, it's much more complicated, and I think tagbar and taglist already do it and do it better, so I probably won't make this.\n\n@claytron: Can you let me know how it works for you now?\n\nThanks!\n. Can you provide steps to reproduce the \"Tag not found\" error?\n\nFor the caching, I'll use something other than just checking for filenames.\n. Good idea, I'll try that.\n\nMy guess is that easytags changes the results returned by `tagfiles()` when\nswitching to a new buffer, hence the tags files are not found when CtrlPTag\ntrying to run `:tag`. So there's an option to not create a new buffer/split\nor tab (i.e how fuzzyfinder does it).\n\nAnyway, thanks for your time!\n\nOn Tue, Nov 29, 2011 at 2:42 PM, Aldis Berjoza <\nreply@reply.github.com\n\n> wrote:\n> \n> For sake of environment differences I suggest you take my vim config\n> (clone, cd ~/.vim && make)\n> \n> ```\n> rm -f ~/tmp/.vim/eazytags/*\n>  cd ~/.vim\n> vim vimrc\n> ```\n> \n> Wait 4-5 seconds for EasyTags to generate tags\n> now when you open CtrlPTag select tag and press Enter it will show \"Tag\n> not found\" error.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/kien/ctrlp.vim/issues/27#issuecomment-2919943\n. I see. Well, give me a couple of days I'll try adding persistent caching to\nthis and see if it helps, since the taglist() function seems to be much\nslower than readfile().\n\nOn Tue, Nov 29, 2011 at 8:00 PM, Clayton Parker <\nreply@reply.github.com\n\n> wrote:\n> \n> @kien I don't think it can handle the size of my tags file:\n> \n>    $ wc -l tags\n>      144321 tags\n> \n> I can let it run for a while to see how long it takes to complete. But\n> right now it isn't usable for that many tags.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/kien/ctrlp.vim/issues/27#issuecomment-2929461\n. Sure, I'm listening!\n\nOn Tue, Nov 29, 2011 at 9:09 PM, Aldis Berjoza <\nreply@reply.github.com\n\n> wrote:\n> \n> @kied..... CtrlPTag really needs to show tags of current file by default.\n> \n> I don't think it would be hard to implement (want me to give some ideas?)\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/kien/ctrlp.vim/issues/27#issuecomment-2930218\n. @claytron: How does it work for you now? In addition to adding persistent caching, I also remove `taglist()` altogether and use `readfile()` for everything.\n\n@graudeejs: That could potentially lead to listing the wrong tags from the wrong file, and would be much slower than using ctags, for example. As for the problem with multiple tags with the same name, tag.vim now uses the tag-matchlist commands as a workaround.\n. It only does that if there's at least one other tag with the same name (there are 2 'index' in your case).\n\nThis should be good enough for now, as using the filename to identify the tag isn't reliable.\n. For people who don't use easytags and have more than one tag file, the filenames can also be the same, as their locations are relative to the tags files.\n\nIt's like this:\n\n```\ndir_a\n|- file.ext\n`- tags (path to file is 'file.ext')\n\ndir_b\n|- file.ext\n`- tags (path to file is also 'file.ext')\n```\n\nAnd the tags option:\n\n``` vim\nset tags+=./dir_a/tags,./dir_b/tags\n```\n\nThe listing would look like this:\n\n```\n'mytag'    file.ext\n'mytag'    file.ext\n```\n\nSo unless I'm missing something, there's no easy way out but using tag-matchlist.\n. It should be much faster now. I did a few tests with a tags file that has 200000 tags and it seemed to work reasonably well. There are probably a few ugly trade-offs, but at least it loads up in this extreme case.\n\nI also added a tag-count finder, with it you only get the matchlist prompt when the tags are actually identical.\n. Closing this as it's gotten really long and the main issues have been resolved.\n\nThanks everyone for the feedbacks!\n\nLastly, just to clarify, you also get the matchlist prompt (see in @graudeejs' [screenshot](http://failiem.lv/thumb_show.php?i=svvoeax&n=not_so_good.jpg)) with `:FufTag` when jumping to a tag that has duplications. This is the default behavior of `:tjump` and `:stjump`. `:FufTag` just hides the duplications so that you don't know they are there, but if you select one, it'll show that prompt.\n\nSo what the tag-count finder does here is it helps switching to the `:tag` command when possible (differences in path/filename), since the `:tag` command accepts a count argument. And with this, the prompt only shows up in the rare cases where the duplicate tags have the same filename.\n. The `s:normcmd()` is there to do exactly that, preventing the new buffer being opened in windows created by plugins. These windows are often small or very small (NERDTree, Gundo, MiniBufExpl ...) and user obviously doesn't want them to be replaced by mistake.\n\nBut it looks like netrw is an exception, so I think I'll add an option to force `:e` for some plugins.\n. Just added an option for this. You can use this to add some exceptions to `s:normcmd()`:\n\n``` vim\nlet g:ctrlp_dont_split = ['Netrw']\n```\n\nLet me know how that works for you.\n. I extended the option to include filetype as well. Let me know how this works:\n\n``` vim\nlet g:ctrlp_dont_split = 'netrw'\n```\n. The parent directory is the directory where an object is located, or that's how it's generally understood.\n\nSo for most people, `/some/path/to` is the parent directory and `/some/path` is the nearest ancestor.\n. Thank you! This has been added. The only difference is `/` and `\\` work like `..` instead of updating on-the-fly.\n. Added. Thank you!\n. `/` or `\\` can be used to search in subdirs. Also, `/` or `\\`  may be accidentally hit and if the project root's large and not yet scanned, it'll result in a long wait.\n. If you type a continuous part of the filename like that then quickly pressing `<c-r>` and/or `<c-d>` will help bringing up more accurate results.\n\nI can make it work better by default but the performance impact will be too big on large projects. Vim's very slow when it comes to searching in large lists, a few thousand items and it starts getting noticeable.\n. Thanks! But I don't think this should be a default behavior. `s:maxfiles` is the max number of files to scan for initially, the default is 20000. It can also be set to 0 for no-limit.\n\nIf you want to see more results, simply changing maxheight will be best. There's really no differences between that and limiting the maxheight yet showing more results (which you have to scroll to see them).\n\n**Edit:** Actually, using `s:maxfiles` also causes the startup time to skyrocket if the root dir is large, so it's probably not a good idea.\n. I think that's exactly the idea, if there are more results than needed to display then the extras should be removed.\n. I think I had this same idea when writing prompt.vim (which eventually evolved into ctrlp.vim). There was also a partial implementation as the now removed `ctrlp_live_update` option and the `<c-^>` mapping. I thought it was a little bit inconvenient to have to wait or hit something for the list to update.\n\nBut I see your point, so I'll definitely give this another try.\n\nThanks!\n. Added. You can enable/disable it or set the delay time with this option:\n\n``` vim\nlet  g:ctrlp_lazy_update = 0\n```\n\nThe default delay time is 250ms.\n. The tricky part with using the previous result for subsequent filtering, is that the input string can be edited in different ways that make the previous result irrelevant. For example when using`<del>` `<bs>` `<c-w>`... in the middle of the previous string. So after a number of searches, there'll be nothing left to search.\n. Closing this as the logic has actually already been used (although differently) and only triggered when the number of items found is less than max_height.\n\nBut regardless, thank you for suggesting!\n. I don't think there's a good enough reason to have a new option for this. The only difference with using a larger max_height is that with this you don't see everything printed in the ctrlp buffer and need to scroll. Also, ctrlp restores the view after closing and you can't do anything else while it's open anyway (else it closes), so there's very little point in saving screen real-estate.\n. It's kind of a limitation. The larger the project the less accurate this\ngets.\n\nAs to how to remedy it, you can enter regex mode with <c-r> and search for\nthe literal user.rb using user.rb as the input.\n\nOn Wed, Nov 30, 2011 at 12:46 AM, Ben Mills <\nreply@reply.github.com\n\n> wrote:\n> \n> I've been trying to use ctrlp at work and on our main large project (a\n> rails project) I try to find \"user.rb\" and it matches things like\n> \"app/controllers/status_controller.rb\".\n> \n> Is this a config issue on my end or an actual bug?\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/kien/ctrlp.vim/issues/40\n. Pulled.\n\nThank you!\n. Added in my local version and will be available in the next commit.\n\nThanks!\n. I can't reproduce this. I tested in both gVim and terminal Vim on Linux and Windows, the content of `\"` stays the same before and after opening a file.\n\nThis is rather odd because the only register that CtrlP touches is `v` and it gets restored after `gv\"vy`. There's nothing that does anything with the `\"` register.\n\nCan you consistently reproduce this? Does it happens if you comment out the `gv\"vy` line?\n\nAlso, try loading a minimal vimrc with no other plugin and see if it still happens:\n\n``` vim\nvim --noplugin -u {path/to/a/simple/.vimrc}\n```\n\nAnd have only this line in the above vimrc:\n\n``` vim\nse nocp\nruntime! plugin/ctrlp.vim\n```\n\nJust make sure the parent directory of `plugin/` is in your runtimepath, for example ~/.vim or $HOME/vimfiles.\n. No, you're correct. I didn't know it does that. I'll push a fix soon.\n\nThanks for reporting this!\n. `<bs>` should delete the character. Are you using console Vim on Windows?\n. It happens with console Vim on Windows for me but works fine on Linux and OSX. Also, mapping delete to a different key works, so it's probably something with the `<bs>` key.\n. Looks like this is because `<c-h>` is mapped for moving `left`, while `<c-h>` is the Vim's keystroke for `<bs>` (like `<c-m>` for `<cr>`). The odd thing is that this seems to behave inconsistently between different Vim builds.\n\nSo the workaround is to not map `<c-h>` to left movement but instead to backspace. You can add something like this to your vimrc:\n\n``` vim\nlet g:ctrlp_prompt_mappings = {\n    \\ 'PrtBS()': ['<c-h>'],\n    \\ 'PrtCurLeft()': ['<left>'],\n    \\ }\n```\n\nIf you don't want to use `<left>`, just choose something else.\n. Nope, it loads instantly for me. There hasn't been any report of slow startup time either.\n\nCan you reproduce it with minimal configuration? Try starting vim with this:\n\n```\nvim --noplugin -u path/to/a/simple/.vimrc\n```\n\nAnd this as the content of the above .vimrc:\n\n``` vim\nset nocp\nruntime! plugin/ctrlp.vim\n```\n\nJust make sure the parent dir of `plugin` is in your runtimepath, for example ~/.vim or $HOME\\vimfiles.\n\nIf it doesn't happen in this case, then maybe you can help me tracking down whatever is interfering with ctrlp by commenting out parts of your .vimrc. It might be an autocmd or something that does stuff when a new buffer/window is opened/created.\n. Pulled.\n\nThank you!\n. Nope, it's hard to tell which directory is \"troublesome\" without indexing it first.\n\nYou'll just have to wait for it to finish while having this in your .vimrc:\n\n``` vim\nlet g:ctrlp_clear_cache_on_exit = 0\n```\n\nThis will tell ctrlp to keep the cache when exiting Vim.\n. Not sure if I want to have yet another option. Since enabling cross-sessions caching already solves this problem. And using the global `wildignore` for this is probably out of the question.\n. Works fine for me on Linux and Windows, haven't tried OSX yet:\n\n![accented](http://i.imgur.com/vSIze.png)\n\nWhat Vim version are you using? If it's 7.0 or 7.1 then you'll just need to upgrade Vim.\n. Does it work if you have this in your .vimrc?\n\n``` vim\nset termencoding=utf-8\nset encoding=utf-8\n```\n\nIt works for me on OSX (oddly only after a system restart):\n\n![OSX](http://i.imgur.com/aVg93.png)\n. It looks like the problem is with Vim's `globpath()` not expanding the path correctly when the path has one of those characters. I'm not 100% sure, though.\n\nI think you'll have to use the `g:ctrlp_user_command` option to get the list of files instead. You can add this to your .vimrc:\n\n``` vim\nlet g:ctrlp_user_command = 'find %s -type f'\n```\n\nOr this to filter files that you don't want to be listed:\n\n``` vim\nlet g:ctrlp_user_command = \"find %s -type f | egrep -v '\\.(swp|swo|log|gitkep|keepme|so|o)$'\"\n```\n\nLet me know how that works.\n. @marttt: that's a different issue and it's a known limitation of the ctrlp prompt. But if you update ctrlp to the latest, you can set the `g:ctrlp_key_loop` option to allow typing of accented characters. See `:help g:ctrlp_key_loop` for more details.\n. You can enable tag search with this option:\n\n``` vim\nlet g:ctrlp_extensions = ['tag']\n```\n\nThen use `:CtrlPTag` to open ctrlp in tag mode.\n. Filtering those will slow CtrlPTag down when the tag file's large. It was what this extension did in an earlier version.\n\nI'll see if I can add the filter back without slowing it down too much.\n. Let me know how [the latest commit](https://github.com/kien/ctrlp.vim/commit/bf03741650aae253b9fbfdb5526d6a7b818a060d) works for you.\n\nNo idea if there's an option for ctags, but I think it shouldn't matter. Some users might actually want to have those tags in their tag files.\n. It's because of the `globpath()` function. No way to work around I'm afraid.\n\nIf you run `:echo globpath(getcwd(), '*/')` for example, it always shows the directory if using the `wildignore+=cache/*` format.\n. I already have a gitignore file locally. I'll add this to it myself and commit later.\n\nThanks!\n. Same questions as for your other issue. There hasn't been any such report of this. The mappings are very straight forward, it only adds `:` if you (or something in your configuration) type `:`. Do you map anything to `:` globally?\n\nAlso, let me know your Vim version and OS.\n\nThanks!\n. I see. Then please provide some details for your other issue. I'm closing\nthis one now as it's related to the other.\n\nThanks!\n\nOn Sat, Dec 17, 2011 at 1:26 AM, gjunkie <\nreply@reply.github.com\n\n> wrote:\n> \n> I don't map anything to it globally. I've tried to reproduce the issue and\n> have been unable to, so this may have been an offshoot. Though I can say\n> that it happened while the other issue was happening as well with slow\n> performance.\n> \n> VIM: 7.3.87\n> Mac OS X 10.7.2\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/kien/ctrlp.vim/issues/54#issuecomment-3180782\n. This sounds like a problem with Vim & your configuration. In any case, please provide some details: What type of file do you have in the other buffer? How do you invoke ctrlp? Does it happen consistently? Does it happen with minimal configuration?\n\nYou can try starting Vim with this:\n\n```\nvim --noplugin -u path/to/a/simple/.vimrc\n```\n\nUse this as the content of the above .vimrc:\n\n``` vim\nse nocp\nruntime! plugin/ctrlp.vim\n```\n\nMake sure the parent dir of `plugin` is in your runtimepath, for example ~/.vim or $HOME\\vimfiles.\n\nThen try to reproduce the problem.\n. Temporarily closing this one now for lack of information, and because it's probably unfixable within the plugin.\n. Thank you! But this makes `<c-t>` work exactly like `<cr>` when jump_to_buffer = 2, is that what you want? And when jump_to_buffer = 1, `<c-t>` just opens a new tab as usual.\n\nAlso, I actually mean to have the `&& md == 'e'` condition there to limit it to just `<cr>` and not any other mapping. When users use `<c-x>, <c-v>, <c-t>`, they might really want to open the file in a new tab or new split, regardless of the current value of jump_to_buffer.\n. Pulled. And I took the opportunity to make this feature a little more robust. Let me know if you find any problem.\n. Added. The new option is `g:ctrlp_cmd`.\n\nThanks for the suggestion!\n. Also added. Thanks for the suggestion!\n\nThe new option is `g:ctrlp_custom_ignore`. Let me know how it works for you.\n. @fourcolors I'll need some details. What mode are you trying to use the custom ignore for (I suppose Files) and what exactly are you trying to ignore? Have you cleared the cache or restarted Vim? Delete the cache directory if you aren't sure.\n. Did you press `<F5>` in CtrlP or run `:CtrlPClearAllCaches` to clear the cache? If you want to be sure, delete the `.cache/ctrlp` dir in your home dir.\n. Pulled to my local repo. I'll push it out with the next batch of changes.\n\nThank you!\n. Thank you! I'm aware of this. It's mentioned in the docs [here](https://github.com/kien/ctrlp.vim/blob/7ccb62b28b02d63feb37b763e0c25e915b0dd10d/doc/ctrlp.txt#L160) in response to issue #45.\n\nI think what I'm going to do now is just add the workaround to the script and get rid of that note altogether.\n. Hi Paul,\n\nThere's a custom ignore option you can use: [g:ctrlp_custom_ignore](https://github.com/kien/ctrlp.vim/blob/7ccb62b28b02d63feb37b763e0c25e915b0dd10d/doc/ctrlp.txt#L213)\n\nRegarding the wildignore issue, some people may have `.git` in their wildignore and not just for ctrlp. In that case, it still breaks fugitive and there's nothing I can do to help it.\n. Yes, certainly.\n\nThanks!\n. Thank you! This should be fixed now.\n. Should be fixed now. Thanks!\n. The current implementation of the MRU list is similar to that of desktop applications. Changing it to recently-entered is simple, having this in your .vimrc will do:\n\n``` vim\nau BufEnter * cal ctrlp#mrufiles#list(expand('<abuf>', 1))\n```\n\nI'll keep it in mine for a bit and see if it should be the default.\n. Oh I see. But the buffer list actually isn't fixed, it's sorted according to multiple criteria (not the first opened time). I won't change this as it would overlap the MRU list's functionality.\n. Thanks, guys! I appreciate it more than you know.\n. Reopening this so more people will see it. Also, thank you again for helping to track down the bugs in this feature!\n. Nope, it only accepts `t`, `h` or `v` and `<c-o>` only reuses a window if it's empty and is the only one in a tab.\n\nI'll see if I can rewrite the open function to allow a new option value.\n. `<c-o>` should be a bit smarter now. No new tab will be created unless `t` is used. For `h` and `v`, if the active buffer belongs to a plugin or is a help or quickfix window, `<c-o>` will try to find a normal buffer and split it, unless there's an empty window then it'll be used instead.\n\nThe new values for ctrlp_open_multi are `tr`, `hr`, `vr`. They work just like `t`, `h`, `v` with the exception of the first selected file replacing the active buffer in the current window. The logic above also applies.\n. OK, you can now do that by using `tr`, `hr` or `vr` without giving a number. `t`, `h` and `v` without a number work, too, but the first file will be opened in a new split or new tab (then the rest hidden).\n\nSo this will do what you want:\n\n``` vim\nlet g:ctrlp_open_multi = 'vr'\n```\n. OK, this looks serious. But I doubt using pathogen would cause any problem. Almost everyone uses some sort of plugin/runtimepath manager nowaday, and this is the first report of these errors.\n\nDo you mind posting the output of `:version`?\n. Ok, could you try starting Vim with this?\n\n```\nmvim --noplugin -u ~/simple_vimrc\n```\n\nAnd this for the simple_vimrc, make sure plugin/ctrlp.vim is in your runtimepath:\n\n``` vim\nset nocp\nruntime! plugin/ctrlp.vim\n```\n\nThen activate ctrlp with `:CtrlP`, `:CtrlPBuffer` and `:CtrlPMRU`.\n- If all of them works, try disabling parts of your Vim configuration (plugins, .vimrcs) to isolate the problem.\n- If it only happens with the `:CtrlP` command, then put this into the simple_vimrc and try again:\n  \n  ``` vim\n  let g:ctrlp_user_command = 'find %s -type f'\n  ```\n- But if none of the above helps, then I guess I'll just have to live with this. Can't fix if I can't reproduce it. It also seems to be a long standing problem with MacVim that happens seemingly out of nowhere:\n  http://vim.1045645.n5.nabble.com/MacVim-app-snapshot-22-td1215494i20.html\n\nAlso, sorry for the late reply! I wanted to wait a bit and see if there was anyone else with the same problem that could provide a solution or informations.\n. Yep, the counter isn't real time so when hitting a large directory, it stops at the last number. It looks like it hangs, but if you can use `<c-c>` to stop it, then it's probably still scanning.\n\nAs for speeding up this initial build, you can try disabling dotfiles scanning `g:ctrlp_dotfiles = 0`, enable cross-session caching `g:ctrlp_clear_cache_on_exit = 0`, and add some ignore rules to ignore the generated files.\nNote that using wildignore is faster than using the [custom_ignore](https://github.com/kien/ctrlp.vim/blob/93cb20dbfbab723e1557801469ae70f4f46499da/doc/ctrlp.txt#L232) option, since this option can only be applied _after_ the scan is finished.\n\nI'm going to close this now. If you encounter the crash again, try using OSX's `find` to get the list of files through the [user_command](https://github.com/kien/ctrlp.vim/blob/93cb20dbfbab723e1557801469ae70f4f46499da/doc/ctrlp.txt#L263) option. And please feel free to reopen/comment on this.\n. I don't know what's going on in the background but from this old conversation, it might have something to do with MacVim itself and OSX: http://vim.1045645.n5.nabble.com/MacVim-app-snapshot-22-td1215494i20.html\n\nBut you can always try disabling your plugins to see if the error is plugin related.\n. This is because the ctags plugin changes Vim's  `laststatus` option upon `BufEnter` and `BufLeave`, while you have `set laststatus=0` somewhere in your .vimrc. Changing the value of `laststatus` to 2 will fix this.\n\nI won't try to make a workaround for this in ctrlp as it'll lead to a slippery slope of never-ending workarounds.\n. Sorry, my mistake, `set laststatus=1` also makes the problem appear. And `=1` is Vim's default. I tested earlier with 2 splits so `=1` was the same as `=2` (both worked fine).\n\nAlso, the source of this incompatibility is from using `winrestcmd()` to restore the window layout.\n. 34aa84e should solve this problem by using `:noautocmd` to open the ctrlp buffer. I hesitated to use it until now because using this command will make it not possible for users to interact with the ctrlp buffer via autocmds. For example, after this commit, the vim-powerline plugin won't be able to apply a custom statusline to ctrlp via BufEnter.\n\nAlso, speaking of statusline, this should also fix the incompatibility between ctags.vim and ctrlp (issue #73).\n. There's a hard limit for matching only tag names. But this was unintentional. It should be fixed now.\n\nThanks for reporting!\n. @claytron: I just removed the hard limit for partial matching. It should work for you now as well.\n. Nope, not yet. But it sounds like it could be a nice improvement to `<c-y>`, so I'll definitely look into it.\n\nThanks!\n. With the recent changes, there are now 2 ways of doing this. Number 2's more in line with what you want, but 1's faster with deep directories:\n\n**1)** Using `<c-z>` to mark a file and use its path as the base dir:\n\n```\n<c-p><c-d>filetxt<c-z><c-u>New Article/article.txt<c-y>\n|    |    |      |    |    |\n|    |    |      |    |    `- start creating the new dir and file\n|    |    |      |    `- clear the prompt\n|    |    |      `- mark it to get its parent dirs: content/articles\n|    |    `- find a file in content/articles/\n|    `- switch to matching only filename\n`- start ctrlp\n```\n\n**2)** Using `<tab>` to auto-complete each directory:\n\n```\n<c-p>co<tab>ar<tab>New Article/article.txt<c-y>\n|    | |    | |    |\n|    | |    | |    `- start creating the new dir and file\n|    | |    | `- auto-complete it to articles/ if possible\n|    | |    `- type the first chars of articles/\n|    | `- auto-complete it to content/ if possible\n|    `- type the first chars of content/\n`- start ctrlp\n```\n\nThat is it, for now. If you find any problem or have any quesion, let me know.\n\nThanks!\n. Fixed. Broken in e42bb4c.\n. Yes, this is a feature and there's [an option to override it](https://github.com/kien/ctrlp.vim/blob/420174fc537ba986a716964db7af0bd189252944/doc/ctrlp.txt#L328).\n\nSo for nerdtree you can use this:\n\n``` vim\nlet g:ctrlp_dont_split = 'nerdtree'\n```\n. It works fine for me on Windows and Linux. Not sure if anything could interfere with this.\n\nDoes anything in `.git` show? How about without the dollar signs? Or just using a forward slash at the end like this: `'\\.yardoc/'`?\n. You could try starting Vim with only ctrlp and nothing else. So start Vim with something like this:\n\n``` vim\nvim --noplugin -u path/to/a/simple/.vimrc\n```\n\nAnd inside that .vimrc:\n\n``` vim\nset nocp\nruntime! plugin/ctrlp.vim\nlet g:ctrlp_custom_ignore = {\n  \\ 'dir':  '\\.git$\\|\\.hg$\\|\\.svn$\\|\\.yardoc$',\n  \\ 'file': '\\.exe$\\|\\.so$\\|\\.dat$'\n  \\ }\n```\n\nJust make sure `plugin/` is in your runtimepath, for example in `~/.vim`.\n\nIf it works in this case, then you could try commenting out parts of your .vimrc, disabling plugins etc...\n\nAlso, this ctrlp_custom_ignore option doesn't work with the ctrlp_user_command option.\n. Does `wildignore` work for you then? The option would look like this:\n\n``` vim\nset wildignore+=*/.git/*,*/.hg/*,*/.svn/*,*/.yardoc/*,*.exe,*.so,*.dat\n```\n\nAlso, could you try these out, just in case the returned directories end with a `/`?\n\n``` vim\nlet g:ctrlp_custom_ignore = {\n  \\ 'dir':  '\\.yardoc/',\n  \\ }\n\n\" Or this:\nlet g:ctrlp_custom_ignore = {\n  \\ 'dir':  '\\.yardoc',\n  \\ }\n```\n\nAnd before starting up ctrlp, run `:echo g:ctrlp_custom_ignore` to see if it's there.\n. Press `<F5>` in ctrlp to clear the cache. If you switch branches a lot and don't mind the scanning, just disable caching with `let g:ctrlp_use_caching = 0`.\n. @wmayner this wasn't actually an issue. The custom_ignore option has been pretty much bug-free since introduced. So I suggest double checking everything. Making sure the cache files are deleted, you're not using the default user_command, and node_modules isn't symlinked.\n\nThe 'dir', 'file', etc. are very specific. So if all else false or you don't want to dig further, just use the string format which applies to everything, instead of the dictionary format.\n. ctrlp has 2 different statuslines. The main one is the one you see most of the time, created with `ctrlp#statusline()`. The other one you only see briefly when scanning for files, created with `ctrlp#progress(len)`.\n\nI can make them check for an option to use first.\n\n**Edit:** Removed the `printf()` example because it can't be used for the statusline.\n. Added a new option on the custom_statusline branch. See eae302f8.\n\nHere's a working example that recreates the default statuslines: https://gist.github.com/1610859\n\nLet me know if that's good enough.\n. Added. You can enable it with:\n\n``` vim\nlet g:ctrlp_mruf_relative = 1\n```\n\nThanks for the suggestion!\n. Hmm, I'm pretty sure it still works. Can you describe exactly what doesn't work as you expect? Or do you still see some files outside the current working directory?\n\nAlso, the code is here, it's just a simple filter to remove files outside the cwd:\nhttps://github.com/kien/ctrlp.vim/blob/master/autoload/ctrlp/mrufiles.vim#L41-44\n. > And btw, g:ctrlp_mruf_relative could be removed from help file as it's not used anywhere in the code now.\n\nNo, it's in the code AND it's working fine. Did you check the link in my previous comment? `{s:re}` is `g:ctrlp_mruf_relative`.\n\nAlso, it would help if you provide a test case where it doesn't work, just open a new issue. Include in it the current working directory, the files you expect to not be included, and the exact steps to reproduce the problem.\n\nEdit: Oh ok, I see that you're using CtrlPMixed. The reason it doesn't apply to Mixed mode because it would nullify having MRU files in the mix in the first place. MRU files in the cwd are already covered by \"Files\".\n. You can use `let g:ctrlp_match_window_bottom = 0`. You might also want `let g:ctrlp_match_window_reversed = 0` to show the results from top to bottom.\n. Nope, that's Vim's command line. We can't move it.\n. Yes, it's a feature. You can disable it with:\n\n``` vim\nlet g:ctrlp_jump_to_buffer = 0\n```\n. `1` is the default. So if you want the opposite, set it to `0`.\n. ctrlp uses the default `CursorLine` highlight group from your colorscheme. So if you want a different color, either edit your colorscheme or have a different `CursorLine` line in your .vimrc.\n. Could you help me test this patch, see if it works for you?\n\nhttps://gist.github.com/1624947\n\nSaving and restoring &l:tags was a fix for a compatibility issue with the easytags.vim plugin, which aggressively set &l:tags when a new buffer is created or opened. I can't reproduce this problem with the latest easytags.vim, however.\n. Great, thank you!\n. Yes, the order's straight out of Vim buffer list, so it's buffer-number. This is also the second time someone asks for this so maybe I'll look into adding it next. In the mean time, you can use the MRU list `:CtrlPMRU` while having this autocmd in your vimrc. It should provide what you need:\n\n``` vim\nautocmd BufEnter,BufUnload * call ctrlp#mrufiles#list(expand('<abuf>', 1))\n```\n\nAlso, outside of ctrlp, you can use the Vim's `<c-^>` mapping to switch between the current buffer and the previous buffer.\n. OK, I decided to not add this, since the MRU file list already contains all the buffers. Instead, I've added an option to sort the MRU file list in most-recently-entered order:\n\n``` vim\nlet g:ctrlp_mruf_last_entered = 1\n```\n\nIt'll do what you want originally but with `:CtrlPMRU`.\n. Should be fixed now. Thanks!\n. Yes, use `let g:ctrlp_by_filename = 1`.\n. We can't map `<cr>` and `<c-m>` differently, since `<c-m>` has the same keycode as `<cr>` (13) in Vim. The same goes for `<esc>` and `<c-[>`, among others. You'll have to choose other key for \"e\" if you want to use `<cr>` for \"t\".\n. Should be fixed now. Thanks!\n. Not sure if this should be bundled into ctrlp as I think most people don't need it. And you can probably do it with an autocmd:\n\n``` vim\nau BufReadPost * norm! zvzz\n```\n. Right, I just assumed you only wanted to do that with new files. BufWinEnter will probably be better for opened files.\n**Edit:** Also, thanks for pointing out that BufReadPost doesn't work for those cmds. Closing this one now.\n. Probably won't be adding this. Too much for one plugin. There also isn't any useful `<c-...>` mapping left to use.\n. @d11wtq: For (1), there's the `g:ctrlp_buffer_func` option. See `:help g:ctrlp_buffer_func`. Just define some buffer local mappings with `nnoremap <buffer> <silent> ...` in the function.\n\nFor (2), there isn't a built-in function, but you can use something like `fnamemodify(getline('.')[2:], ':p')`. And this can only get the filename in filename related modes (files, buffers, mru etc...).\n. You can set the maximum number of files to scan with the `g:ctrlp_max_files` option. The default's 20000.\n\nTo stop a scan midway, press `<c-c>` (it should stop everything vimscript) then press `<esc>` to exit as usual.\n. That'd be too low. Personally, I haven't had any problem with 20000, no one else complains about it either. But I think cmd-t has this at 10000, so I might lower ctrlp's to that if there are more requests.\n. The counter isn't real time. So when reaching a large directory it stops until `globpath()` finishes the scan in that directory.\n. `<c-c>` pauses everything including the counter, so it might look like it's frozen, but you can still press `<esc>` or `<c-c>` again to close the prompt.\n\nHowever if it actually freezes Vim then there's really nothing I can do to address that. It'll be an issue between Vimscript and Vim, i.e. running globpath() in a large directory tree sometimes freezes Vim.\n\nAs for an alternative to using globpath(), check out `:help g:ctrlp_user_command`.\n. Let me know if this patch works for you:\n\n``` diff\n+++ b/autoload/ctrlp.vim\n@@ -155,7 +155,7 @@ fu! s:Open()\n endf\n\n fu! s:Close()\n-   try | noa bun! | cat | noa clo! | endt\n+   try | bun! | cat | clo! | endt\n    cal s:unmarksigns()\n    for key in keys(s:glbs)\n        sil! exe 'let &'.key.' = s:glb_'.key\n```\n. Could you provide steps to reproduce this then? Filetype of the file. It's already opened or new. Also if the current buffer has been changed.\n\nWhen opening a file, ctrlp also uses a simple `:e` command (for `<cr>`).\n. Looks like the problem's with the filetype detection script for `clj` files. I don't get any highlighting at all when I just do `:e project.clj` without using ctrlp.\n\n**Edit:** I probably don't have the syntax file for clj which isn't shipped with Vim. Which one do you use?\n. Ok, I tried with this script: http://www.vim.org/scripts/script.php?script_id=2501\n\nThe syntax works with both `:e` and ctrlp in vim and mvim on OSX for me. I didn't try the latest mvim, though, since I'm still on Snow Leopard.\n. Alright, finally installed janus and was able to reproduce this. Apparently, the problem comes from some mapping conflicts between janus (or a plugin inside janus) and VimClojure. In my test case they are the `\\rt` and `\\et` mappings. When I disable all the mappings of VimClojure, the syntax loads without any issue.\n\nAnd so the fix, at least in my case, is have this in `.vimrc.before` for janus:\n\n``` vim\nlet maplocalleader = ','\n```\n\nLet me know how that works for you.\n. The files can be from any directory, not just the cwd. So removing the leading part for only a few then adding them again will be problematic.\n\nAlso, you can switch to matching only filename by pressing `<c-d>`, this should help if the paths are too long.\n. Please try this and let me know if you find any problem:\n\n``` diff\n+++ b/autoload/ctrlp.vim\n@@ -276,7 +276,7 @@ fu! s:Buffers() \"{{{1\n        if getbufvar(each, '&bl') && each != s:crbufnr\n            let bufname = bufname(each)\n            if strlen(bufname) && getbufvar(each, '&ma') && bufname != 'ControlP'\n-               cal add(allbufs, fnamemodify(bufname, ':p'))\n+               cal add(allbufs, bufname)\n            en\n        en\n    endfo\n@@ -717,7 +717,8 @@ endf\n fu! ctrlp#acceptfile(mode, matchstr, ...)\n    let [md, matchstr] = [a:mode, a:matchstr]\n    \" Get the full path\n-   let filpath = s:nocwd() ? getcwd().s:lash().matchstr : matchstr\n+   let filpath = s:nocwd() ? getcwd().s:lash().matchstr :\n+       \\ s:itemtype == 1 ? fnamemodify(matchstr, ':p') : matchstr\n    cal s:PrtExit()\n    let bufnum = bufnr(filpath)\n    if s:jmptobuf && bufnum > 0 && md =~ 'e\\|t'\n```\n. The buffer names are taken as-is from Vim in this case. I can use only the filename part, but it'll still be a full path for files with the same names (in different dirs).\n. Does it happen if you comment out line 731 and 735 in the autoload/ctrlp.vim file? Also try with line 1362, separately.\n. Yep, I also get this just using `:bnext`, `:bprev` or `<c-^>` with files that have folds defined in modeline. So it's not a problem with ctrlp. It's just Vim.\n. Weird, I definitely get it with this modeline for my plugin files:\n\n``` vim\n\" vim:fen:fdm=marker:fmr={{{,}}}:fdl=0:fdc=1:ts=2:sw=2:sts=2\n```\n\nAnd this in vimrc:\n\n``` vim\nse foldmethod=marker\nse foldlevel=1\nse foldnestmax=10\nse nofoldenable\n```\n\nIf I'm _outside_ a fold, `<c-^>` away and back will close all folds.\n. OK, I tried again with --noplugin, `<c-^>` definitely closes all the folds, even if the cursor's in a fold when switching away:\n\n``` vim\nvim --noplugin -u .vimrc\n```\n\n.vimrc\n\n``` vim\nse nocp\n\"runtime! plugin/ctrlp.vim\n```\n\nWith 2 buffers: buffertag.vim and dir.vim from `autoload/ctrlp/`.\n\nVim 7.3.401\n. Alright, I searched around a bit to make sure I wasn't crazy or missed something. Someone had the same question on StackOverflow with using NERDTree: all folds close when switching to a different file and back\n\nhttp://stackoverflow.com/questions/7221318/vim-nerdtree-folding-can-it-remember-the-state-of-folds\n\nSo if your tests are correct, cmd-t and bufexplorer probably do something to override this default behaviour of Vim.\n. > I don't see it when I switch with `<c-^>`\n\nAnd as you said later:\n\n> uses :edit command to switch to a buffer, which makes Vim to reevaluate modeline\n\nBut from the description in Vim's help:\n\n```\nCTRL-^         edit Nth alternate file (equivalent to \":e #N\")\n```\n\nSeems like there's something else in your config that changes the behavior of `<c-^>` or `:edit #N`.\n\nBut `set hidden` does help when using the `:buffer` commands. So there's our use case. However, this patch doesn't account for commands after `:` (fail to open the buf), so I'll need to work it into the code and will commit later along with the others.\n\nThanks for the help!\n. This has been added. The new command is `:CtrlPMixed`.\n\nAs for mixing random extensions, it isn't feasible since there are too many differences.\n. Nope, because the opening commands, highlighting, matching etc are all different.\n. Probably won't add this. I tried having the `+`'s at the start of each line but I think they make the list feel a bit confusing and busy. Here's the diff against master in case anyone wants to take a look later:\n\n``` diff\n+++ b/autoload/ctrlp.vim\n@@ -375,7 +375,9 @@ fu! s:Render(lines, pat, bfn)\n    en\n    if s:mwreverse | cal reverse(lines) | en\n    let s:matched = copy(lines)\n-   cal map(lines, '\"> \".v:val')\n+   let eval = s:itemtype =~ '^[12]$'\n+       \\ ? '\">\".(getbufvar(v:val, \"&mod\") ? \"+\" : \" \").v:val' : '\"> \".v:val'\n+   cal map(lines, eval)\n    cal setline(1, lines)\n    exe 'keepj norm!' s:mwreverse ? 'G' : 'gg'\n    keepj norm! 1|\n@@ -779,7 +776,7 @@ fu! s:AcceptSelection(mode)\n        \\ && str !~ '\\v^(\\.\\.|/|\\\\|\\?)$'\n        cal s:CreateNewFile(a:mode) | retu\n    en\n-   let matchstr = matchstr(line, '^> \\zs.\\+\\ze\\t*$')\n+   let matchstr = matchstr(line, '^>[ +]\\zs.\\+\\ze\\t*$')\n    if empty(matchstr) | retu | en\n    \" Do something with it\n    let actfunc = s:itemtype < 3 ? 'ctrlp#acceptfile'\n@@ -831,7 +820,7 @@ fu! s:MarkToOpen()\n        \\ || ( s:itemtype > g:ctrlp_builtins && s:type() !~ 'rts' )\n        retu\n    en\n-   let matchstr = matchstr(getline('.'), '^> \\zs.\\+\\ze\\t*$')\n+   let matchstr = matchstr(getline('.'), '^>[ +]\\zs.\\+\\ze\\t*$')\n    if empty(matchstr) | retu | en\n    let filpath = fnamemodify(matchstr, ':p')\n    if exists('s:marked') && s:dictindex(s:marked, filpath) > 0\n```\n. You can try setting the `g:ctrlp_cmd` option to the cmd that you use, i.e. `CtrlPCurWD`\n\n``` vim\nlet g:ctrlp_cmd = 'CtrlPCurWD'\n```\n. The mapping to `:CtrlP` exists because it's a restored session. But the lazy-load method you use doesn't load ctrlp along with it. So the best option's for you to use something different, because many plugins have default mappings as well, and this method wouldn't work well with them. But regardless, I'll make disabling the ctrlp's default mapping an option, maybe by leaving g:ctrlp_map empty.\n. It's not a completion menu. The prompt's created in  Vim's command-line and works as such. `<c-p>` and `<c-n>` are used for browsing the command history in the command line. They do the same job in ctrlp's prompt, browsing the input history.\n\nYou can remap the keys if you don't like the default. For example, this is probably close to what you want:\n\n``` vim\nlet g:ctrlp_prompt_mappings = {\n    \\ 'PrtSelectMove(\"j\")':   ['<c-j>', '<c-n>'],\n    \\ 'PrtSelectMove(\"k\")':   ['<c-k>', '<c-p>'],\n    \\ 'PrtHistory(-1)':       ['<down>'],\n    \\ 'PrtHistory(1)':        ['<up>'],\n    \\ }\n```\n. This doesn't work well on Windows because `mkdir()` can't create subdirs. But making it work on Windows breaks it for everyone else. Removed to re-implement it later.\n. Hmm, apparently I missed this part, it can create subdirs:\n\n```\nmkdir({name} [, {path} [, {prot}]])\n        If {path} is \"p\" then intermediate directories are created as\n        necessary.  Otherwise it must be \"\".\n```\n. There's no built-in way to do this. Not sure if I want to add it either. But you can write a function like this to do it:\n\n``` vim\nfu! s:call_ctrlp_extension(ext)\n    if !exists('g:ctrlp_builtins')\n        ru autoload/ctrlp.vim\n    en\n    cal ctrlp#init(ctrlp#{a:ext}#id())\nendf\n\n\" Then create some mappings:\nnn <silent> <leader><space>l :cal <SID>call_ctrlp_extension('line')<cr>\nnn <silent> <leader><space>s :cal <SID>call_ctrlp_extension('rtscript')<cr>\n```\n. Reproducible but the problem seems to be originated from either netrw or Vim. Here's the test case:\n- Run `vim ~/test/sym3/*` where sym3 is linked to another directory.\n- Vim starts with the netrw buffer. Immediately run `:ls` from Vim's command-line.\n  In the list, `~/test/sym3` is listed as a buffer number 2.\n- Run `:CtrlPBuffer`. `test/sym3` is also listed as a buffer, since the buffer list's taken from Vim.\n\nRepeat step 1 and 2 then do this:\n- Run `:b2`. Vim returns `\"~/test/sym3\" is a directory`.  \n  Run `:ls` again, the sym3 buffer is gone.  \n  Run `:CtrlPBuffer`, `test/sym3` also gone.\n\n**Edit:** `~/test/sym3` is still listed in the output of `:ls` when ctrlp isn't installed.\n\nScreenshot:\n\n![sym3](http://i.imgur.com/fXrOb.png)\n. Vim 7.3.0 on Ubuntu 10.10, netrw `Last change: 2010 Jul 28`.\n. > Used :CtrlPBuffer to go to some buffer.\n\nDoes it happen if you use `:buffer [buffer-number]`? Try `:edit [filename]` as well, where filename's the filename of the buffer. Also, try starting Vim with `vim --noplugin -u .empty_vimrc ~/.vim/snippets/*` where the vimrc only has `set nocp`, then browse through the buffers with `:bn` or `:bp`.\n. Let me know if e7b08a3 changes anything.\n. Let me know how 6fe1e50 works. Thanks!\n. Should be fixed now. Sorry about the hiccup!\n. Hmm, so are you suggesting that the default fuzzy mode should work like regexp mode at first? I think I already tried to implement that once, but couldn't use it because of a problem with filtering the results (it was very slow), hence the current implementation separating fuzzy and literal strings.\n. Oh I see. But that'll have the same performance problem, I think. For example, the pattern with the smallest substrings and lowest priority, `c.*o.*v.*e.*r.*\\..*e.*r.*l` will match entries already matched by `co.*ver.*\\.erl`. So in one way or another, these entries will have to be filtered. And filtering in vimscript is really slow, any operation with large lists, large dictionaries is. The only way I see that can really improve this part is by doing it with a better language then send the results back to be displayed.\n\nBut to stay pure vimscript and portable, this is kind of it. Separate fuzzy and literal string modes where people can use `co.*ver.*\\.erl` or `cover\\.erl` when they need to.\n. OK, matching the whole string first is on the 1.7.0 branch. This is a near complete rewrite of the old algorithm. It gives better results by default but is noticeably slower when searching in large directories. I'm still undecided as to merge it or not. Let me know what you guys think.\n. @DelvarWorld: Yep, I think I'll just keep it as a separate branch, as I'd rather have the speed myself. And if not being fully fuzzy stops people from using the plugin, that's fine by me. I understand that you mean to encourage making the plugin better, but I'm pretty much done with this.\n. ``` vim\nlet g:ctrlp_use_caching = 0\nlet g:ctrlp_clear_cache_on_exit = 1\n```\n. This is expected and it's a limitation, I'm afraid. If the search string's long, it'll take more time to find the matches. As the string gets longer, the delay starts getting more noticeable. It also seems to be highly dependent on people's computers.\n\nSo you'll want to keep the string short and unique. If you want to match only filenames, you can press `<c-d>` to toggle filename-only mode, instead of typing out the letters and the `/`'s in the path. Another option's to use the lazy update option which tells ctrlp to only update the match window when typing has stopped:\n\n``` vim\nlet g:ctrlp_lazy_update = 1\n```\n. I get an `E420: BG color unknown` error in gVim on Windows. I think a better solution would be using separate rules for GUI and non-GUI:\n\n``` vim\nexe 'hi CtrlPLineMarker '.( has('gui_running') ? 'gui' : 'cterm' ).'fg=bg'\n```\n\nAlso, not sure if I want the prefix optional. Implementing's simple but unicode symbols don't seem to work very well on Windows, and it might cause problems on others where people can't open files.\n. Hmm, it'd still generate issues here from people who had problems using it, and I'd have to deal with those issues. Besides, after this change, there will be only one `>` for the selected entry. So it's probably not worth it for an extra option.\n. Looks like the colorscheme you're using doesn't set the Normal highlight group or does but ctermbg isn't defined.\n6a9f1e3 should workaround this.\n. Thanks! You can use the option `shellslash` to have `/` as path separator on Windows:\n\n``` vim\nset shellslash\n```\n\nHowever, changing the code to silently treat `\\` as `/` is a no-go at this point. There are too many things to consider.\n. I don't have access to Win7 at the moment but 1.6.9 works perfectly fine for me on WinXP. I'll try to setup a Win7 machine and test this once I have some free time.\n\nFor now, I think you should just use 1.6.3. There's very little difference between it and 1.6.9, except for new extensions and some new features. Most of the bugfixes are for the new stuff, too.\n. Could you guys help me test this patch? Kind of a shot in the dark, but these are the few changes in 1.6.9 vs 1.6.3 that can affect performance when typing.\n\nIt's against master. Save it and run `git apply filename`, revert with `git apply -R filename` when done:\n\n``` diff\ndiff --git a/autoload/ctrlp.vim b/autoload/ctrlp.vim\nindex 9b5f04a..28dbaaa 100644\n--- a/autoload/ctrlp.vim\n+++ b/autoload/ctrlp.vim\n@@ -291,7 +291,7 @@ fu! s:MatchIt(items, pat, limit, mfunc)\n    retu newitems\n endf\n\n-fu! s:MatchedItems(items, pats, limit, bfn)\n+fu! s:MatchedItems(items, pats, limit)\n    let [items, pats, limit] = [a:items, a:pats, a:limit]\n    \" If items is longer than s:mltipats_lim, use only the last pattern\n    if len(items) >= s:mltipats_lim || ( exists('s:height') && s:height > 20 )\n@@ -300,7 +300,7 @@ fu! s:MatchedItems(items, pats, limit, bfn)\n    cal map(pats, 'substitute(v:val, \"\\\\\\~\", \"\\\\\\\\\\\\~\", \"g\")')\n    if !s:regexp | cal map(pats, 'escape(v:val, \".\")') | en\n    let [type, ipt, mfunc] = [s:type(1), s:ispathitem(), 'match']\n-   if s:byfname && ipt && a:bfn\n+   if s:byfname && ipt\n        let mfunc = 's:matchfname'\n    elsei s:itemtype > 2\n        let types = { 'tabs': 's:matchtabs', 'tabe': 's:matchtabe' }\n@@ -354,7 +354,7 @@ fu! s:SplitPattern(str, ...) \"{{{1\n    retu newpats\n endf\n \" * BuildPrompt() {{{1\n-fu! s:Render(lines, pat, bfn)\n+fu! s:Render(lines, pat)\n    let lines = a:lines\n    \" Setup the match window\n    let s:height = min([len(lines), s:mxheight])\n@@ -388,7 +388,7 @@ fu! s:Render(lines, pat, bfn)\n    en\n    \" Highlighting\n    if s:dohighlight()\n-       cal s:highlight(a:pat, s:mathi[1] == '' ? 'Identifier' : s:mathi[1], a:bfn)\n+       cal s:highlight(a:pat, s:mathi[1] == '' ? 'Identifier' : s:mathi[1])\n    en\n endf\n\n@@ -404,13 +404,9 @@ fu! s:Update(str)\n    if notail == oldstr && !empty(notail) && !exists('s:force')\n        retu\n    en\n-   let bfn = s:byfname && notail != '' && match(notail, '\\v/|\\\\:@!') < 0\n-   if s:byfname && s:regexp && match(notail, '\\\\:\\@!') >= 0\n-       let bfn = s:byfname\n-   en\n    let lines = exists('g:ctrlp_nolimit') && empty(notail) ? copy(g:ctrlp_lines)\n-       \\ : s:MatchedItems(g:ctrlp_lines, copy(pats), s:mxheight, bfn)\n-   cal s:Render(lines, pats[-1], bfn)\n+       \\ : s:MatchedItems(g:ctrlp_lines, copy(pats), s:mxheight)\n+   cal s:Render(lines, pats[-1])\n endf\n\n fu! s:ForceUpdate()\n@@ -907,7 +903,7 @@ endf\n fu! s:comparent(s1, s2)\n    \" By same parent dir\n    if match(s:crfpath, escape(getcwd(), '.^$*\\')) >= 0\n-       let [as1, as2] = [fnamemodify(a:s1, ':p'), fnamemodify(a:s2, ':p')]\n+       let [as1, as2] = [getcwd().s:lash().a:s1, getcwd().s:lash().a:s2]\n        let [loc1, loc2] = [s:getparent(as1), s:getparent(as2)]\n        if loc1 == s:crfpath && loc2 != s:crfpath | retu -1 | en\n        if loc2 == s:crfpath && loc1 != s:crfpath | retu 1  | en\n@@ -1131,7 +1127,7 @@ fu! s:syntax()\n    en\n endf\n\n-fu! s:highlight(pat, grp, bfn)\n+fu! s:highlight(pat, grp)\n    cal clearmatches()\n    if !empty(a:pat) && s:ispathitem()\n        let pat = substitute(a:pat, '\\~', '\\\\~', 'g')\n@@ -1139,7 +1135,7 @@ fu! s:highlight(pat, grp, bfn)\n            \\ ? substitute(pat, '\\\\\\@<!\\^', '^> \\\\zs', 'g')\n            \\ : escape(pat, '.')\n        \" Match only filename\n-       if s:byfname && a:bfn\n+       if s:byfname\n            let pat = substitute(pat, '\\[\\^\\(.\\{-}\\)\\]\\\\{-}', '[^\\\\/\\1]\\\\{-}', 'g')\n            let pat = substitute(pat, '$', '\\\\ze[^\\\\/]*$', 'g')\n        en\n```\n. @jonathanfilip: Great, thanks! I went ahead and committed this. If you find any problem later, let me know.\n@beaugunderson: I think that actually isn't this bug. ctrlp's just slow when there are a lot of files. You can find some related explanations/solutions [here](https://github.com/kien/ctrlp.vim/issues/112).\n. Thanks! But there's already an option you can use to set it:\n\n``` vim\nlet g:ctrlp_root_markers = ['.lvimrc']\n```\n\nWith this, ctrlp will look for `.lvimrc` first and zoom to the first parent directory that has it.\n. They are all used. If the first one isn't found anywhere, ctrlp will then look for the next one. This option simply puts `.lvimrc` at the top of the queue.\n. Nope, it's not possible to set multiple user commands. Also, with what you're using, the second line just redefines the g:ctrlp_user_command variable and overwrites the value set by the first line. That wouldn't work in any case.\n. You'll have to change the `AcceptSelection(\"e\")` as well since `<cr>` is already used for it.\n\nSo this will do what you want:\n\n``` vim\nlet g:ctrlp_prompt_mappings = {\n  \\ 'AcceptSelection(\"e\")': [],\n  \\ 'AcceptSelection(\"t\")': ['<cr>', '<c-m>'],\n  \\ }\n```\n. @jonasdiemer: The functionality is still there, the above config only disables the `<cr>` key. So just use something for `AcceptSelection(\"e\")` and use that key to submit the `..`.\n. The results are already weighted based on the length of the match, the length of the path and filename, the last modified time, the parent directory... But because of the constraint of vimscript, all of these can't be done for the entire directory tree but only for the first few matches found. Hence it's inaccurate in large directories but accurate in a smaller test case. And theoretically speaking, it could be much more accurate in the large directories, too. But the performance would be so low that it'd render the plugin unusable. There are some further explanations in issue #110. I'm closing this now as duplicate, or just cantfix since it's not really a bug.\n. Make sure to set that option before plugin/ctrlp.vim is sourced. Either put it in your vimrc, or execute it before sourcing the plugin if you're doing this manually.\n\nIf you've already done all that and it still happens then please provide steps to reproduce the bug.\n. Hmm, I think you should open an issue on the janus repo then. Maybe someone over there will be able to help. This option works fine for everyone else, and here it sounds like it doesn't get set before the plugin is loaded.\n\nWish I could be more helpful but I have no clue where to even start to look into this in janus.\n. OK, I just installed janus and put `let g:ctrlp_extensions = ['tag']` in .vimrc.before. The command CtrlPTag is available right from the start. So it looks like something else in your janus config is the culprit. You can try disabling plugins, commenting out parts of the .vimrcs etc... to isolate it.\n. If I understand it correctly, you want ctrlp to not pick up the langmap option? This means reseting the user's langmap option when entering the ctrlp buffer. If that's what you need, let me know how this works for you:\n\n``` diff\ndiff --git a/autoload/ctrlp.vim b/autoload/ctrlp.vim\nindex 128a818..996d7d3 100644\n--- a/autoload/ctrlp.vim\n+++ b/autoload/ctrlp.vim\n@@ -116,7 +116,7 @@ fu! s:opts()\n    \" Global options\n    let s:glbs = { 'magic': 1, 'to': 1, 'tm': 0, 'sb': 1, 'hls': 0, 'im': 0,\n        \\ 'report': 9999, 'sc': 0, 'ss': 0, 'siso': 0, 'mfd': 200, 'mouse': 'n',\n-       \\ 'gcr': 'a:blinkon0', 'ic': 1, 'scs': 1 }\n+       \\ 'gcr': 'a:blinkon0', 'ic': 1, 'scs': 1, 'lmap': '' }\n    if s:lazy\n        cal extend(s:glbs, { 'ut': ( s:lazy > 1 ? s:lazy : 250 ) })\n    en\n```\n. The function's been changed to script-local and the customization was [removed](https://github.com/kien/ctrlp.vim/blob/5e04bfaeede4488205e0dffda018af4f32dc3940/doc/ctrlp.txt#L766). There's no alternative. But here's something you can use in your .vimrc. It works the same but without any backward compatibility:\n\n``` vim\nfunc! s:etwd()\n    let cph = expand('%:p:h', 1)\n    if match(cph, '\\v^<.+>://') >= 0 | retu | en\n    for mkr in ['.git/', '.hg/', '.vimprojects']\n        let wd = call('find'.(mkr =~ '/$' ? 'dir' : 'file'), [mkr, cph.';'])\n        if wd != '' | let &acd = 0 | brea | en\n    endfo\n    exe 'lc!' fnameescape(wd == '' ? cph : substitute(wd, mkr.'$', '.', ''))\nendfunc\n\nau BufEnter * cal s:etwd()\n```\n\nGist: https://gist.github.com/1737475\n. Here's the list:\n\n```\nFor the statuslines:\nCharacter\nLineNr\nFunction\n\nFor the buffer:\nCtrlPNoEntries (link to Error)\nCtrlPLinePre (link to Normal's guibg and ctermbg)\nIdentifier\n\nIn extensions:\nCtrlPTabExtra (link to Comment)\nCtrlPqfLineCol (link to Search)\nCtrlPUndoT (link to Directory)\nCtrlPUndoBr (link to Comment)\nCtrlPUndoNr (link to String)\n```\n\nRight now, it's difficult to customize the statuslines because the highlight groups are used directly. There's the option `g:ctrlp_status_func` but it requires rebuilding the entire statuslines.\n\nI think I'll change these groups to groups specific to ctrlp, perhaps like this:\n\n```\nCtrlPMode1 (link to Character)\nCtrlPMode2 (link to LineNr)\nCtrlPStats (link to Function)\nCtrlPMatch (link to Identifier)\n```\n. It should be possible to override the default highlighting after 75e31e9. I also added some descriptions at `:h ctrlp-customization`.\n. Yes, it's expected. And it's slow because it has to do the matching/comparing for a lot of files with 999 being the upper limit. If you want the window to fit the screen, use something like this instead:\n\n``` vim\nau VimEnter,VimResized * let g:ctrlp_max_height = &lines\n```\n. You can use `<c-^>` (outside of ctrlp) to switch to the previous file. Or set this option and use `:CtrlPMRU` in place of `:CtrlPBuffer`:\n\n``` vim\nlet g:ctrlp_mruf_last_entered = 1\n```\n. Make sure you clear the cache after setting the option. Run `:ClearAllCtrlPCaches` from the command-line or press `<F5>` in ctrlp.\n. I already made some changes that should (unintentionally) fix this, I think. Let me know if this doesn't return either `-1` or an empty string:\n\n```\n:echo synIDattr(synIDtrans(hlID('Normal')), 'bg')\n```\n. Because not every colorscheme uses guifg=bg or ctermfg=bg for Ignore (molokai for example, uses a [visible color](https://github.com/tomasr/molokai/blob/1d5a25926834b5decf5f760151737282852395af/colors/molokai.vim#L54) for this group's foreground). So it's better using the Normal's bg directly.\n. This should be fixed in 75e31e9.\n\nIt's also now possible to change the default highlighting for every part of the prompt.\n. This has been brought up before. The consensus was that the matching couldn't be improved without decreasing performance.\n\nAs for a solution, you can type `gemfile$` and switch to regexp mode by pressing `<c-r>`. This will bring up every file that ends with `gemfile`.\n. It only accepts the letters on the standard US-International keyboard layout, i.e. letters in the Latin alphabet, from a to z. I have no plan to support more.\n. I see, but my point's that it only accepts the standard letters. What _can_ be typed with the keyboard (damn near everything) is irrelevant. If you have to type (pressed-then-released style) 2 or more keys to get 1 accented letter, it won't work even if the letter's supported. Also, the currently supported range's ASCII 32 to 126. This includes a-z, A-Z, 0-9 and the standard symbols and punctuations.\n\nI'll gladly accept something like [this](https://github.com/kien/ctrlp.vim/pull/41) for accented letters, though.\n. I haven't tried them either but it seems all of these have been written by others. Although the yankring one doesn't seem to depend on YankRing.vim, but less dependencies is a plus, IMO.\n\nSo maybe it's time to close this, and let people who want to request new extensions to just open new issues.\n. Added. You can use `<F5>` to reformat the old MRU list.\n. Fixed in 93cb20d. Didn't pull your commit because `tail` is also used for commands, not just for line numbers.\n\nThanks!\n. Looks like you're using an older version of the plugin, namely v1.6.9. This has already been fixed in the latest version on github. You can get the latest zipball or tarball [here](https://github.com/kien/ctrlp.vim/downloads).\n\nBut for v1.6.9, you just need to set a colorscheme that defines a background color and the error will go away.\n. The current version is 1.7.1 with this particular issue fixed in 75e31e9. And yes, vividchalk has ctermbg=none.\n. 1.6.9 was the only version that had this error. Make sure you update to the latest version on github (currently 1.7.3).\n. [Mentioned in the docs](https://github.com/kien/ctrlp.vim/blob/93cb20dbfbab723e1557801469ae70f4f46499da/doc/ctrlp.txt#L166).\n. Probably won't be adding this myself since I'm not familiar with cscope. Pull requests are most welcome, though. You can checkout the [extensions](https://github.com/kien/ctrlp.vim/tree/extensions) branch for how to create an extension.\n. BTW, an extension for ctags had already been added long before this request. I still don't see me adding one for cscope, but if anyone wants to give it a shot, take a look at the ctags one, I imagine it'd be somewhat similar.\n. You just need to be more specific with the search string. It also helps to use filename mode (toggle with `<c-d>`), regex mode (toggle with `<c-r>`), or both at the same time. And make sure the cache for the current directory is up-to-date (press `<F5>` in ctrlp to update).\n. I'd just type something like `contacts` then toggle filename mode with `<c-d>`. If that wasn't enough, I'd then toggle regex mode with `<c-r>`, since `contacts` is a literal part of the filename.\n. This belongs in a user's .vimrc, I think. The default `<c-p>` mapping and the command used for it are already configurable. Adding this on top of that, and allowing the whole thing to be configurable as well will be a little over complicated, especially for something you can do with a mapping:\n\n``` vim\nlet g:ctrlp_map = ''\nnn <silent> <c-p> :sil! exe 'CtrlP'.['', 'CurWD', 'Dir'][v:count]<cr>\n```\n. You want to match the last part of a path. Try `[\\/]\\.[^\\/]\\+$`.\n\nAlternatively, you can disable dotfiles searching with this:\n\n``` vim\nlet g:ctrlp_dotfiles = 0\n```\n. This is most likely because Gemfile.lock is newer (in last modified time) than Gemfile, assuming they are in the same directory, with \"gemfile\" as the search string. Please see #132.\n. This isn't possible to implement with the current matching method. To get more accurate results you'll just have to switch to filename mode or regexp mode when searching. You can toggle filename mode with `<c-d>` and regexp mode with `<c-r>`. So for example, type foo.rb then press `<c-d>`, or type user.rb then press `<c-r>`.\n\nAlso, [this](https://github.com/skwp/dotfiles/blob/2e9fc1da721f04716c634e23e31d9a84eab3fb55/vim/plugin/settings/ctrlp.vim#L22-34) may be useful for you.\n. Yes, people have been using those types of mapping long before ctrlp came into the picture. As for toggling modes with `<c-d>` `<c-r>`, it's not intuitive and needs some get-used-to, but nothing can be done about this, unfortunately. It's not that I haven't tried to improve it.\n. That's because ctrlp sets its local working directory each time it's invoked. You'll need to disable this with the g:ctrlp_working_path_mode option:\n\n``` vim\nlet g:ctrlp_working_path_mode = 0\n```\n. Make sure you set that in vimrc and use `<c-x>` in `:CtrlPDir`.\n\nAlso, if you only want to change the working directory to ~/another_workspace then just use `:cd ~/another_workspace`. I don't see a point in opening it with CtrlPDir just to `<c-x>` and exit right away.\n\nAnd if you want to search in ~/another_workspace, then just use `:CtrlP ~/another_workspace`.\n. Thank you! I'm keeping the old commands for now and will remove them after a while, so that it doesn't break people's setups.\n. Yes, this behavior is expected. The custom_ignore and wildignore options only take effect when globpath() is used. And since you haven't defined a secondary command with g:ctrlp_user_command, globpath() is used when searching outside a repo.\n\n> The files matching the custom_ignore regex are actually ignored if I'm not in a git project. Otherwise they are shown. \n> Is there any chance that the plugin doesn't use the custom_ignore while using a user_custom_command?\n\nDo you mean \"does\"? It already doesn't use the custom_ignore while a user_command is in use.\n\nBut if you want to ignore stuff while using a user_command, you'll need to include the ignore patterns in the command somehow. For some examples, checkout the s:wig2cmd() function at `:help ctrlp-misc`.\n. Exactly because of this:\n\n> I really like the idea of using a custom command for git repos it is really useful because it makes the search very fast with big projects.\n\nI don't want to slow that down too much and lose that speed. So for git for example, I think it's faster to use the `--exclude-from` option of the `git ls-files` command. Here's what works for me:\n\n``` ssh\ngit ls-files --exclude-from=ignoredfile -i\n```\n\nWhere the `ignoredfile` contains this:\n\n```\n*\n!*.log\n!*.png\n!*.jpg\n```\n. > when I want to switch back and forth between them.\n\nWouldn't it be more appropriate to use buffer or MRU mode for that? In buffer mode and in MRU mode, the current file is excluded from the listing. If it's also excluded in find file mode, there won't be any way to select it again. But aside from that, it does kind of get in the way sometimes. So I'll see if I should factor the whole thing into an option for the 3 main modes.\n. Changed in 0b3173e because of this:\n\n> If a newer file does match 'coffee', regardless of it being the file you want or not, or of it being the worst match in the list, relying on MRU order alone will always make it the top choice simply because it's the newest.\n\nKind of forgot about this when I made that change. Sorry!\n. That's expected and simply can't be fixed. When the list gets really large, it all comes down to Vimscript's performance.\n. The list isn't unsorted. It's sorted according to the full path's length, the filename's length, the match's length, the last modified time, and the parent directory. So I don't think sorting alphabetically is going to improve it much. But in any case, if anyone wants to pick them apart and improve them, all the functions can be found in the Sorting section in autoload/ctrlp.vim.\n\nThanks!\n. > When try to access file xxx/color_variation, I thought cv is a good key to search it.\n\nSomeone else might use `cv` to search for user.csv, thinking it'd be a good search term. And if the first letter of a word had higher priority, the user.csv file might still win over the color_variation file because its path, filename, and match's length were shorter. Plus, to be honest, I haven't got any idea how to translate this to Vimscript. Doesn't look like it's worth the extra effort either.\n\nYou just need to be more specific with the search term, for example `cova` would probably do the job here.\n. You can just remap the keys.\n\nThis is the default:\n\n``` vim\n    \\ 'AcceptSelection(\"e\")': ['<cr>', '<2-LeftMouse>'],\n    \\ 'AcceptSelection(\"h\")': ['<c-x>', '<c-cr>', '<c-s>'],\n    \\ 'AcceptSelection(\"t\")': ['<c-t>'],\n    \\ 'AcceptSelection(\"v\")': ['<c-v>', '<RightMouse>'],\n```\n\nJust switch `<c-t>` and `<cr>` and you're done:\n\n``` vim\nlet g:ctrlp_prompt_mappings = {\n    \\ 'AcceptSelection(\"e\")': ['<c-t>'],\n    \\ 'AcceptSelection(\"t\")': ['<cr>', '<2-LeftMouse>'],\n    \\ }\n```\n. Here's something I modified from dir.vim:\n\nhttps://gist.github.com/2170481\n\nIt requires af2847a which adds a new function. Place the file in an `autoload/ctrlp/` dir in your runtimepath (not necessary inside the plugin's bundle, anywhere will work). Use the g:ctrlp_vcsdir option to change the VCS marker, the default is `.git/`.\n\nThis likely won't be bundled with ctrlp so feel free to modify it however you like.\n. Thank you! I updated the gist. It actually wasn't working at all because the cwd was never changed.\n. The plugin doesn't set this option, the user does. So check your configuration. Looks like you set g:ctrlp_custom_ignore twice in different types.\n. It's either the max_files limit (10000), or the max_depth limit (40) has been reached. You can change these limits with the g:ctrlp_max_files and g:ctrlp_max_depth options, respectively.\n\nIt's most likely max_files, since the `views` folder is only a few folders deep from the working directory. Assuming you haven't changed the default settings.\n. It works fine for me. Where do you put the `let g:ctrlp_working_path_mode = 0`? Make sure you put it in your .vimrc (~/.vimrc.before if you're using janus), and then either restart Vim or run :CtrlPReload.\n\nAlso, before starting ctrlp, run `:echo g:ctrlp_working_path_mode` to see if the setting has actually been set.\n. Nope, it's because you're using this to call ctrlp:\n\n``` vim\nmap <leader>f :CtrlP %:p:h<cr>\n```\n\nThe path_mode option doesn't take effect when you call ctrlp like this. And `%:p:h` expands to the parent directory of the current file.\n. Hmm, the 1.7.0 branch is an experimental branch, it's buggy and slower than master. You shouldn't use it. It also doesn't have any change related to the invocation mapping (no changes in plugin/ctrlp.vim). And this option has been pretty much the same since 1.0. So just make sure you put the `let g:ctrlp_map = '<c-;>'` in your .vimrc and restart Vim.\n\nAlso, `<c-p>` is only used for completion in Insert mode. In Normal mode, `<c-p>` is just a duplicate of `k`.\n. If `<F9>` works fine then the plugin's mapping mechanism is working fine in your setup. There's a `<c-p>` mapping or not doesn't matter because it isn't used.\n\nSo the question is with the `<c-;>` key. I simply can't map it at all. For example, pressing `<c-;>` does nothing with this mapping:\n\n``` vim\nnnoremap <c-;> :echo 12345<cr>\n```\n\nVim started with `--noplugin -u blank.txt` where blank.txt only has `set nocp` .\n`:nmap` shows `n <C-;> * :echo 12345<CR>`.\n\nI guess you'll just have to choose a different key to map. No idea how the 1.7.0 branch could possibly make the key work for you, though (it doesn't for me). In any case, I don't think this is a bug to be fixed.\n. You can use g:ctrlp_root_markers to set it:\n\n``` vim\nlet g:ctrlp_root_markers = ['.git']\n```\n\n`.git` will be put in front of the queue and searched for before the defaults.\n. Seems to work fine for me. Please provide steps to reproduce and your configuration for both plugins.\n\nThanks!\n. Closing this now for lack of information. Plus ctrlp and minibufexpl work perfectly fine together in my normal environment and also when running Vim in default with just the 2 plugins. And since no one else has complained about this, I think it's probably something else on your end.\n. This has already been worked around with this commit cbbf039 in response to another issue. Next time, please update the plugin before filling bug reports.\n. A cache system already exists. Please read `:help g:ctrlp_use_caching` and the nearby options.\n. It's not possible, yet. But I'm going to add it, perhaps with a new key `{ 'sort': 0 }`. For now, if you need to do some testing, try commenting out the `cal sort(lines, 's:mixedsort')` line in the Render() function.\n. 1. You can specify 1 directory: `:CtrlP /var/www/some-site/some/path/inside`. Can't do multiple directories and it's a little too late to implement that.\n2. You should do this with your vimrc. Just add some mappings for the commands.\n3. This can already be done with:\n   1. Run `:CtrlP ~/dir-with-session-files/`\n   2. Select a session file.\n   3. Type `:so\\ %` in the ctrlp prompt.\n   4. Press `<cr>`.\n   \n   But the feature is too specific, I'm not going to write an extension for it or add it to ctrlp.\n. You can do completion like this `ap<tab>as<tab>sty<tab>`. Or if `app/assets/stylesheets/` is the selected match, you can press `<c-z>` then type `my_new_file.css` and `<c-y>`. The second method is described in more details at `:help ctrlp-input-formats|/f)`.\n\nHowever, expanding from `ap/as/sty` to `app/assets/stylesheets/` with a single keypress is very problematic. I won't add it.\n. You can disable zooming to a project's root by setting `g:ctrlp_working_path_mode` to 0. This can't be changed if you're already inside the prompt.\n\n> How can I order CtrlP to search files only in current directory on demand?\n\nTry mapping something to `:CtrlP .` or `:CtrlPCurWD` and use that when you need to search in the current directory.\n\nAs for the `/` or `\\`, you have to submit them, not just type them out. They are also only of use when the path_mode option is 1 (in any other case they do nothing when submitted).\n. I have no idea. But it maybe that the cache just wasn't cleared and you were seeing an older index. You can use `<F5>` inside the prompt to refresh it.\n. This sounds great but it's very difficult to make it reliable enough to be worthwhile. I definitely won't add it. Besides, you can already list untracked files with git ls-files:\n\n```\ngit ls-files . --cached --exclude-standard --others\n```\n\nThis should work the same everywhere provided that you have Git installed, including on Windows.\n. ctrlp only looks for first matches. If report.cs isn't in the result list it won't get sorted. But the files in the result list do get sorted according to filename's length.\n\nThis is by design and can't be fixed.\n\nFor a solution, you can type `report.cs<c-r>` which should bring up every file ends with report.cs.\n. I suppose you have a lot of report.cs in paths as well (when in regex mode, `report.cs` is searched for literally, except the `.`). So try `<c-d>`, it should limit to matching only filenames.\n. Yes, I get that. ctrlp already does compare filename's length AND the length of the matched part, but this simply can't be done on the whole list.\n\nThe regex mode and filename mode are usually enough to workaround that. But in your case, you'll have be more specific with the search string. Since you have too many `report.cs`'s, don't use just it. Try something like `^report.cs` or `^report.cs$` in regex + filename mode.\n. Nope, it isn't supposed to work. The prompt is a pseudo-prompt and only the mappings that have been defined work.\n\nThere are a few built-in pasting actions you can use, however:\n- Paste the word under the cursor in the current buffer: `<insert>` or `<F2>`\n- Paste from search register: `<F3>`\n- Paste the content of the last visual selection: `<F4>`\n- Paste from clipboard: `<F6>`\n\n**Update:** As of v1.7.6, these mappings have been replaced with the `<c-\\>` mapping, with the exceptions of `<Insert>` and `<MiddleMouse>` now mapped to paste-from-clipboard.\n. It doesn't sort when the prompt is empty. But after you start typing, the results are sorted like in other file modes (shortest match, etc). I'll see if I should change it to 'never' sort.\n. > I would have thought the 'obvious' solution would be to show matches sorted by MRU. Is that possible?\n\nIn MRU mode, no sorting means the order is defaulted to MRU, but only MRU.\n. So I choose a middleground instead of relying solely on MRU order. Let me know how it works for you.\n. > if I type 'coffee' at the CtrlP prompt, the first choice will be the most recently used file that matches.\n\nIdeally, but it's really not that simple. If a newer file does match 'coffee', regardless of it being the file you want or not, or of it being the worst match in the list, relying on MRU order alone will always make it the top choice simply because it's the newest.\n. > I'm looking for the most recent match - period. If I have to type some more characters to get to my file, that's OK - because in most cases, I won't have to.\n\nThat settles it, I guess. I've added an option to disable sorting. But personally, I've always run into the problem in my previous comment (for a while, ctrlp used to not sorting files in MRU mode). It was why I changed this in the first place, since I use MRU a lot myself.\n. It's to keep the matching simple and relatively fast. There's really nothing else.\n\nAnd as I said before, I'm pretty much done with this part (won't be improving it, at least not significantly). If you want to take a stab at something different, check out the `g:ctrlp_match_func` option.\n. Thanks for the suggestion! I've added some default ignores. But if the max_files limit is lowered, more people will have issues like #163.\n. This would be too far away from what ctrlp does and how it works, it\nwouldn't even fit as an extension. You should just use grep.vim or ack.vim\netc. Also, this isn't the first time this has been suggested, but thanks\nnonetheless!\n\n2012/4/26 Enrique Garc\u00eda <\nreply@reply.github.com\n\n> Would it be possible to make a ctrlp extension that allowed \"finding _in_\n> files\" instead of just finding files by path? I'm thinking about typing\n> stuff and having the equivalent of a \"grep -r stuff .\" happening on the\n> ctrlp buffer.\n> \n> That's what I'm missing the most in my vim these days.\n> \n> I'd give this a try myself, but I know null vimscript.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/kien/ctrlp.vim/issues/180\n. That's kind of how it works. `.git` has a higher priority than `.bzr`, and in this case `.git` is found first, at \"parent\". So parent is identified as the true root of the project. If you want it to look for .bzr first, use this:\n\n``` vim\nlet g:ctrlp_root_markers = ['.bzr/']\n```\n. OK, I'm closing this as the behavior is intended. For a while, ctrlp used to look for all markers in a directory then if nothing was found, moved up to the parent dir. But this allowed the user less control over which should be the root. It always zoomed to the first .git or .bzr no matter what.\n\nCurrently, if you want \"parent\" to be the absolute root, you can create a marker file `parent/.root` then put it in the option `let g:ctrlp_root_markers = ['.root']` (add .root to .gitignore, too if you don't want it to be committed).\n\nAnd if you don't want that but the opposite, then use `let g:ctrlp_root_markers = ['.bzr/', ...]`, where `...` can be any VCS type you have under \"parent\". Place the ... type before .bzr/ if you have it under .bzr as well.\n. I solve this in some of the extensions by converting `{\"title\": \"foo\", \"value\": 1 }` to a string like `foo<tab>|1|` where `<tab>` is a tab character. Then in ctrlp#xxx#accept, parse the `foo<tab>|1|` string and get back the title `foo` and value `1`. Also in ext_var, use `{ 'type': 'tabe' }` so that the matching is only against the `foo` part.\n\nAn example of this is the [line.vim](https://github.com/kien/ctrlp.vim/blob/master/autoload/ctrlp/line.vim) extension.\n\nBut accepting a different type of variable for ctrlp#xxx#init will require a lot of code changes. Not sure if I want to do that.\n. Then add an id to each candidate, like so:\n\n``` vim\nlet s:list = [\n\\ { \"id\": 1, \"title\": \"foo\", \"value\": {...nested datas...} },\n\\ { \"id\": 2, \"title\": \"foo\", \"value\": {...nested datas...} },\n\\ { \"id\": 3, \"title\": \"foo\", \"value\": {...nested datas...} },\n\\ ]\nreturn map(copy(s:list), 'v:val.title   |v:val.id|')\n```\n\nWhere the returned list looks like this:\n\n``` vim\nreturn [\n\\ \"foo  |1|\",\n\\ \"foo  |2|\",\n\\ \"foo  |3|\",\n\\ ]\n```\n. Yes, it's not elegant to use s:list, but the alternative means a lot of code changes in the main script. Also, in newer Vim, you can use v:key instead of adding an id to each candidate.\n\nAnd if you want to ignore the `|1|`, `|2|`, `|3|` part when searching, then use `{ 'type': 'tabe' }`.\n. OK, closing as I've decided against adding support for different var types. The entries have to be reformatted anyhow, let's just do it in the extensions. And s:vars are already used for caching in some extensions, it's really not a big deal to use more.\n. Thanks! I'll try to include this in filename mode instead of introducing a new mode. Will probably go with using `;`.\n. I've added those to the readme on the [extensions branch](https://github.com/kien/ctrlp.vim/tree/extensions). There aren't enough for a separate page, I think.\n. It's molokai: https://github.com/tomasr/molokai\n. You can just remap the keys:\n\n``` vim\nlet g:ctrlp_prompt_mappings = {\n    \\ 'AcceptSelection(\"e\")': ['<c-v>', '<2-LeftMouse>'],\n    \\ 'AcceptSelection(\"v\")': ['<cr>', '<RightMouse>'],\n    \\ }\n```\n\nThe defaults are at `:help g:ctrlp_prompt_mappings`.\n. Please read `:help g:ctrlp_max_height`.\n. To be fair, vimscript itself is kind of hacked together. But anyway, thanks!\n. This has been asked and explained many times. The matching is as good as it gets. Please look into the old issues if you want to find out the reasons.\n. You can use `wildignore` and `g:ctrlp_custom_ignore` to filter stuff. Please read:\n\n``` vim\n:help wildignore\n:help g:ctrlp_custom_ignore\n:help g:ctrlp_dotfiles\n```\n. Oh I see. Well, unless Vim provides MIME types recognition by default which it doesn't, this will have to be done manually (either in a plugin or in a vimrc file). But I don't think I want to do this in ctrlp, sorry!\n. > pretty useless for ctrlp to show files that Vim cannot even edit\n\nIt's not just for ctrlp but that's exactly what `wildignore` is there for. Every file listing plugin and many of Vim's commands and functions rely on this option. What you want is more than any existing plugin or Vim can provide, so by all means, write a new plugin. I'm pretty sure there is no MIME type detection plugin out there, yet, so it might be something worth making.\n. Hmm, it's a suggested solution to always enable the highlighting. If you have/want this highlighting disabled in a few buffers then maybe you shouldn't use these autocmds in the first place?\n\n> Can you open the issue tracker on the repo?\n\nIt's closed because I don't want to provide support for it. The script's simply a rewrite of the older scripts with a few things added on top. If anyone wants to improve it, please send a pull request instead.\n\nThanks!\n. Pulled.\n\nThanks!\n. You can either use `<tab>` to auto-complete the directories in `foo/bar/` (type `f<tab>b<tab>`). Or mark the `foo/bar/baz.txt` file with `<c-z>` then simply type `bazooo.txt` and press `<c-y>`.\n\nSince it can already be done, I won't merge this. Thanks for making it, though.\n. Then use the second method. It requires even less keystrokes: `<c-z>bazooo.txt` vs. `<c-\\>D/bazooo.txt`.\n\nThe description is at `:help ctrlp-input-formats|/f)`.\n. Yes, all the parent directories will be created if not yet exist. So if you use `baz/baz2/bazooo.txt` then `baz/` and `baz2/` will be created under `foo/bar/`.\n\nAnd again, all of this can be found at `:help ctrlp-input-formats|/f)`.\n. It's kind of too late for that. I've coded everything around the fact that the 3 default modes are permanent and the others are optional. It's not only the part in ctrlp#setlines().\n\nFor your problem, you can just map these 3 modes to a few mappings. And maybe reserve the `<c-f>` `<c-b>` for the extensions if you don't want to map them as well.\n. Thanks mattn!\n. ctrlp provides an option to rebuild its statuslines, `g:ctrlp_status_func`, which powerline uses. By the look of it, something triggers fugitive (script 128) to break, leading to its statusline feature breaking, which in turn breaks powerline and then finally ctrlp (script 187).\n\nSo before starting ctrlp with `:CtrlP [dir]`, run `:let g:ctrlp_status_func = {}` and let me know if it fixes the problem. Also, run `:echo g:ctrlp_status_func` after you exit ctrlp and post the output here.\n\nAfter the above, restart Vim, this time run `:let g:ctrlp_log = 1` and then proceed to reproduce the problem. After creating a few error msgs, exit ctrlp and go to the cache directory (should be $HOME/.cache/ctrlp), open the ctrlp.log file and post its content here.\n. OK, I can't reproduce this with the combo conqueterm + ctrlp + powerline + fugitive. I use the settings for conqueterm and powerline found [here](https://github.com/skwp/dotfiles/tree/master/vim/plugin/settings).\n\nGuess this will depend on you to track it down, then. The `:CtrlP [dir]` is handled with the SetWD function. With a [dir] argument, it should return at Line 4: `cal ctrlp#setdir(a:1) | retu`. It's odd though, because ctrlp#setdir is called later on anyway if you just use `:CtrlP`. Why doesn't it break then?\n\nIn any case, it's important to get all the error messages, especially the first ones that create the \"Press ENTER or type command\" prompt.\n. Just a guess, so let me know if this changes anything. For autoload/ctrlp.vim:\n\n``` diff\n@@ -1115,16 +1115,19 @@ fu! ctrlp#statusline()\n        \\ exists('s:marked') ? ' <'.s:dismrk().'>' : ' <->' : ''\n    if s:status != {}\n        let args = [focus, byfname, s:regexp, prv, item, nxt, marked]\n-       let &l:stl = call(s:status['main'], args)\n-   el\n-       let item    = '%#CtrlPMode1# '.item.' %*'\n-       let focus   = '%#CtrlPMode2# '.focus.' %*'\n-       let byfname = '%#CtrlPMode1# '.byfname.' %*'\n-       let regex   = s:regexp  ? '%#CtrlPMode2# regex %*' : ''\n-       let slider  = ' <'.prv.'>={'.item.'}=<'.nxt.'>'\n-       let dir     = ' %=%<%#CtrlPMode2# '.s:dyncwd.' %*'\n-       let &l:stl  = focus.byfname.regex.slider.marked.dir\n+       try\n+           let &l:stl = call(s:status['main'], args)\n+           retu\n+       cat\n+       endt\n    en\n+   let item    = '%#CtrlPMode1# '.item.' %*'\n+   let focus   = '%#CtrlPMode2# '.focus.' %*'\n+   let byfname = '%#CtrlPMode1# '.byfname.' %*'\n+   let regex   = s:regexp  ? '%#CtrlPMode2# regex %*' : ''\n+   let slider  = ' <'.prv.'>={'.item.'}=<'.nxt.'>'\n+   let dir     = ' %=%<%#CtrlPMode2# '.s:dyncwd.' %*'\n+   let &l:stl  = focus.byfname.regex.slider.marked.dir\n endf\n\n fu! s:dismrk()\n@@ -1134,11 +1137,22 @@ endf\n  fu! ctrlp#progress(enum, ...)\n    if has('macunix') || has('mac') | sl 1m | en\n-   let txt = a:0 ? '(press ctrl-c to abort)' : ''\n-   let &l:stl = s:status != {} ? call(s:status['prog'], [a:enum])\n-       \\ : '%#CtrlPStats# '.a:enum.' %* '.txt.'%=%<%#CtrlPMode2# '.s:dyncwd.' %*'\n+   if s:status != {}\n+       try\n+           let &l:stl = call(s:status['prog'], [a:enum])\n+           redraws | retu\n+       cat\n+       endt\n+   en\n+   cal s:progstl(a:enum, a:0)\n    redraws\n endf\n+\n+fu! s:progstl(enum, txt)\n+   let txt = a:txt ? '(press ctrl-c to abort)' : ''\n+   let &l:stl =\n+       \\ '%#CtrlPStats# '.a:enum.' %* '.txt.'%=%<%#CtrlPMode2# '.s:dyncwd.' %*'\n+endf\n \" Paths {{{2\n fu! s:formatline(str)\n    let cond = s:ispath && ( s:winw - 4 ) < s:strwidth(a:str)\n```\n\nIf that doesn't work then try this and see if it makes any differences. Also for autoload/ctrlp.vim:\n\n``` diff\n-   sil! exe 'noa keepa' ( s:mwbottom ? 'bo' : 'to' ) '1new ControlP'\n+   sil! exe 'keepa' ( s:mwbottom ? 'bo' : 'to' ) '1new ControlP'\n```\n\n``` diff\n-   try | noa bun!\n-   cat | noa clo! | endt\n+   try | bun!\n+   cat | clo! | endt\n```\n. Done, both are on the test branch.\n. Can you help me run one last test? Instead of opening ctrlp, run each of these in the same conditions that cause the error if you run `:CtrlP app/models`:\n\n``` vim\n:vnew | lcd /absolute/path/to/app/models | redraw\n:noa vnew | lcd /absolute/path/to/app/models | redraw\n```\n. > the current directory path is overwritten so that the fugitive integration craps out\n\nKind of, but also not exactly (check out `:help :lcd`). And as the small test with :vnew shows, this happens when you use :lcd and :redraw in the same window, you don't even need ctrlp.\n\nAnyway, I think I'll close this as a `wontfix` because:\n- `:redraw` is much needed to properly display the prompt. Can't stop using it just to workaround this. \n  The same goes for `:lcd`, it's needed to make sure no working directory is clobbered.\n- It's an edge case compatibility issue, specifically with skwp/vim-ruby-conque, and the error actually comes from fugitive (which uses a naked `readfile()`).\n\nFor the error in the GUI, I noticed it when working on preserving v:errmsg so it should already be fixed in 80bc9cea8c.\n. Did you press `<cr>` after `..`? You're supposed to submit it, not just typing in the `..`.\n. Please read my answer in #190. You're free to do whatever you want with the script. If you have a working solution for your problem then just use it. There's no need to report it or contact me.\n. Implementing this in ctrlp would be a bit needlessly complicated, I think. You can easily solve your problem with a couple of mappings that map to `:CtrlP %:h` and `:CtrlP` without a `<cr>` (you can expand the path after `:CtrlP` with `<tab>`). So instead of cd'ing inside ctrlp, do it when starting ctrlp.\n\nAlso, you can use `b:ctrlp_working_path_mode` to set this option per buffer, and use the directory mode to change the working directory inside ctrlp.\n. Shouldn't that be `let g:ctrlp_working_path_mode = 1`?\n. OK, just for completeness, guess it's actually what you meant but you should use double quotes instead of single quotes for the part after `-c`, otherwise `'let` is interpreted as a mark `:'l`.\n. Please update the plugin, this has already been fixed for a while. s:clrex has been removed completely.\n. The file in the current window where you invoke ctrlp is excluded from the result. This is intended. Unless there's a missing step here you didn't mention:\n\n> the file opens in a new buffer, but when pressing ctrlp -> buffers\n\nDid you or didn't you move away from the ch3.tex window before opening ctrlp? Moving away as in opening a new tab or a new split with a different file in it, then open ctrlp there.\n. > I want to be in a window, press ctrlp and switch to another buffer.\n\nThen explain to me why would you want to do this?\n1. Open ch3.tex in the current window.\n2. Open ctrlp.\n3. Select ch3.tex from the result list.\n\nch3.tex isn't another buffer. That's why it's excluded.\n. Searching \"murrine_style_draw_box\" on Google gave me these:\n\nhttp://vim.1045645.n5.nabble.com/gvim-CRITICAL-error-td4402467.html\nhttp://thehacklist.blogspot.com/2010/06/resolving-murrinestyledrawbox-assertion.html\nhttp://jpablobr.com/past/resolving-murrine_style_draw_box-error\n\nDoesn't look like there's anything I can do with ctrlp to address this, though.\n. Is the directory on a network share of some kind?\n. OK, since it only happens on one of your machines, it's either an environment thing or there's something wrong with your Vim's configuration. Either way, I'm going to leave this to you to track it down.\n\nIf your Vim's config is different on this new machine, you can try to isolate the problem by following the steps in my post here #46.\n. See `:help g:ctrlp_open_multiple_files` and `:help g:ctrlp_arg_map`.\n. If you don't mind I'd like to see your MyPathFilter function, and MyPathShorten as well if you have one.\n. It looks great but it's a bit too much, I think. And by default, it doesn't actually solve the initial problem.\n\nI've added a custom pathshorten function, hope it's enough. I'm not pulling this because there isn't a good reason to have the option. Those lines are only for visually identifying the entries and aren't used for matching or much else. So there's little point in allowing users to reformat them.\n. Pulled to my local repo for future reference. Closing for now.\n. There isn't a way in ctrlp, plus I think this is something that you should do in your own Vim configuration. Try looking into local .vimrc files (people usually name them `.lvimrc` or `.vimrc.local`), also check out `:help 'exrc'`.\n. Can you let me know your OS, Vim version and most importantly the output of `:echo &term`?\n\nThis is related to how the arrow keys are handled by your terminal. Pressing the keys usually emits `^[` or `<esc>` followed by a sequence of characters: http://www.termsys.demon.co.uk/vtansi.htm#cursor\n\nThere isn't much that can be done to workaround this, but I can try including your &term on [this line](https://github.com/kien/ctrlp.vim/blob/96bd4b37f4459f30cc6963142aff6697e42bf69e/autoload/ctrlp.vim#L757). If you're comfortable with editing the script, put your `&term` value on that line and let me know if it works.\n\nIf it doesn't work, then use `<c-j>` and `<c-k>` to move the selection instead of using the arrow keys.\n. Not sure if I want to change that since we can use the root_markers option for it. See my answer in issue #166.\n. Have you installed any Vim plugin before? Don't drop the entire CtrlP.vim folder into `~/.vim/plugin`. The content of each of the plugin/, doc/, autoload/ folder is supposed to go into the corresponding folder under `~/.vim`.\n\nAlso, I recommend looking into using a plugin manager early on. For example, [vundle](https://github.com/gmarik/vundle) is a good one.\n. I see your point, but the text is actually a bit longer than that:\n\n> Extract the archive to ~/.vim on Linux/MacOSX or $HOME\\vimfiles on Windows.\n\nIt's the little instruction that you see everywhere for extracting stuff. And it really means what it says, that is extracting the content of the archive into the ~/.vim directory. Just follow it to the letter.\n. Yes, it's because ctrlp only started to have extensions after 1.6.1. But again, for the love of everything, **DO NOT** unpack the entire directory structure (autoload, doc, etc) into the `~/.vim/plugin` directory.\n\nI've made sure the ctrlp.zip archive doesn't have a subdir holding everything, so that you can do something like this `unzip ctrlp.zip -d ~/.vim`.\n. Have you done the following things?\n- Update the plugin.\n- Refresh the cache (`<F5>` while in the ctrlp window) after you've added the option. Restart Vim if you want to be sure.\n. OK, this works:\n\n``` vim\nlet g:ctrlp_custom_ignore = 'vendor/bundles/\\(DontIgnore\\)\\@!.\\+$'\n```\n\nAnd this doesn't:\n\n``` vim\nlet g:ctrlp_custom_ignore = 'vendor/\\(bundles/DontIgnore\\)\\@!.\\+$'\n```\n\nThe reason is because `vendor/bundles` also matches `vendor/\\(bundles/DontIgnore\\)\\@!.\\+$`.\n\nBasically, the second pattern means matching any \"vendor/\" not followed by \"bundles/DontIgnore\". A `vendor/bundles` alone fits this description, thus the entire `vendor/bundles` directory tree is removed when the scanner's scanning the `vendor` directory.\n\nSo the first pattern is the one you want.\n. How about you just try the thing out?\n\n> There are in fact, many folders in vendor/ to ignore, MyBundle is the only one to not ignore.\n\nDoesn't `vendor/bundles/\\(DontIgnore\\)\\@!.\\+$` fit that perfectly? It matches **any** \"vendor/bundles/\" not followed by \"MyBundle\".\n\nHow do you think path matching is?\n. Oh, right, I missed this part: `many folders in vendor/ to ignore`.\n\nHow about `vendor/\\(bundles\\)\\@!.\\+$\\|vendor/bundles/\\(MyBundle\\)\\@!.\\+$` then?\n. @balta2ar: Try `\\v(\\.cpp|\\.h|\\.hh|\\.cxx)@<!$`.\n. @balta2ar: Yeah, I missed a `<`. Already edited my comment right after but was a little too slow :)\n. @balta2ar: OK, it's a bit trickier than I thought. This should work, tested and all that:\n\n``` vim\nlet g:ctrlp_custom_ignore = { 'file': '\\v(\\.cpp|\\.h|\\.hh|\\.cxx)@<!$' }\n```\n\nRestart Vim or run `:unlet g:ctrlp_custom_ignore` if you get the \"E706: Variable type mismatch\" error.\n\nBTW, not sure what's going on with github, I keep not getting any notifications for new comments, even for yours that mention my username.\n. @balta2ar: The notifications appear in my github inbox, there's just no orange boxes. I only saw your 3 days old comment when I checked the inbox for someone's comment that I also didn't see.\n. Please read `:help ctrlp-mappings`.\n. You should type `templateemail` without that whitespace in the middle. If you type it without the whitespace but still get the literal string behavior, then make sure you aren't in regexp mode (use `<c-r>` to toggle).\n. OK, I'm going to assume it was the whitespace. Either way, I'm closing this because the fuzzy has been working fine. The plugin has been around for almost a year, people would have flipped if something so basic wasn't working as advertised, don't you think?\n\nAlso, about the `g:ctrlp_match_func` option, it's meant to be used to employ an external matcher, something more powerful than the internal Vimscript one which is the major bottleneck in ctrlp. It's not meant to be a cop-out for the slightest of things, nor for the basic functionalities.\n\nOne of the little things that convinced me to expose the option was the Windows-only search tool \"Everything\", which can search in _millions_ of files and directories, i.e. entire hard drives, extremely fast. Although I don't think Everything can be used with ctrlp, I still want to make it possible to use the power of such tools when the time comes and more of them are around.\n. They link to files in the same working directory, there will be duplicates\nif they are included. Why do you want to include them?\n\nI suppose you mean symlinks in the working directory but they link to files\noutside, in that case take a look at the g:ctrlp_follow_symlinks option.\n\nOn Thu, Jun 14, 2012 at 4:23 PM, georgexsh <\nreply@reply.github.com\n\n> wrote:\n> \n> Currently all same-root symlinks are excluded, ref b22ebbe\n> I don't get reasons behind this behavior, though I'd link those symlinks\n> to be included.\n> Maybe addming another option to control it?\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/kien/ctrlp.vim/issues/215\n. OK, I can always let the follow_symlinks option take another value, say 2, to follow all symlinks indiscriminately. I just want to understand the reasons.\n\nCan you explain why you would want to include both of these?\n\n```\n/root/working-directory/symlink\n/root/working-directory/mytextfile\n```\n\nWhere `/root/working-directory/symlink` pointed to `/root/working-directory/mytextfile`.\n\nThey would appear like this in ctrlp, and select any of the files would open mytextfile:\n\n```\nsymlink\nmytextfile\n```\n. I see. Thanks! I'll add the value soon.\n. Actually, the counter isn't real time, it only gets updated when the scanning of a directory depth is finished. When it hangs like that it basically means it's still scanning, and that directory depth just has a lot of files.\n\nSo yeah, no way to workaround because that's just how the counter works.\n\nAs for speeding this whole process up, take a look at the `g:ctrlp_user_command` option. Also, after the first scan of a directory tree, the refresh will be much faster because the OS caches the results.\n. Thanks! Glad you like it!\n\nAlso, since you restart Vim often, check out the clear_cache_on_exit option, see if setting it to 0 helps.\n. It is not yet possible to do this with the default_input option, I'll enable it regardless but would it be simple enough? It would work with every command, including `:CtrlP` and those that already accept a directory or a buffer name:\n\n``` vim\nnn <silent> ,d :let g:ctrlp_default_input = expand('<cword>')<cr>:CtrlPBufTag<cr>\n```\n\nUsing a command argument would be heavy on the coding side, but the mappings would look like these:\n\n``` vim\nnn <silent> ,d :exe \"CtrlPBufTag \".expand('<cword>')<cr>\nnn <silent> ,d :exe \"CtrlPBufTag -default-text=\".expand('<cword>')<cr>\n```\n\nAlso, currently you can insert `<cword>` through using the `<c-\\>` mapping inside the prompt.\n. Thanks for the pull request! But this is kind of pointless. `en` and `fini` are the short forms of `endif` and `finish`, and they are just as valid, see `:help :en` and `:help :fini`. And being listed as a valid command in Vim's help is safe enough, I think.\n. Have you cleared the cache after setting the options? Try pressing `<F5>` inside the prompt or restart Vim, just to be sure.\n\n> I thought these settings were supposed to help eliminate unwanted files from showing up in the results.\n\nThey are, and they have been working perfectly fine pretty much since introduction. The only problem people have had is not knowing about clearing the cache.\n. I also have had image files ignored with `wildignore` for a really long time now because I do web works, this line among others has worked without any problem in ctrlp and everywhere else:\n\n``` vim\nset wildignore+=*.zip,*.rar,*.gz,*.png,*.gif,*.jpg\n```\n\nPlease try the following:\n- Update the plugin to the current HEAD of master.\n- Clear the cache with `:CtrlPClearAllCaches`.\n- Start Vim with minimal configuration like this:\n  \n  ```\n  vim --noplugin -u path/to/a/simple/.vimrc\n  ```\n  \n  Use this as the content of the above .vimrc:\n  \n  ``` vim\n  set nocp\n  set runtimepath^=~/.vim/bundle/ctrlp.vim\n  runtime! plugin/ctrlp.vim\n  \n  set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.jpg,*.gif,*.png,*.pdf\n  let g:ctrlp_custom_ignore = {\n    \\ 'dir':  '\\.git$\\|\\.hg$\\|\\.svn$',\n    \\ 'file': '\\.png$\\|\\.gif$\\|\\.jpg$',\n    \\ }\n  ```\n  \n  Then try to reproduce the problem.\n\nAlso, try this both before and while using Vim in minimal configuration:\n1. cd into the `app/assets/images/` directory.\n2. Try using tab completion: type `:edit grid.p<tab>` where `<tab>` is the `<tab>` key.  \n   In both times, see if `grid.p` is auto-completed to `grid.png` or not.\n. Thanks! I'm going to go ahead and close this one now. For one, whatever the external source that causes `globpath()` to fail to obey `wildignore` probably isn't something I can address in ctrlp anyway. I mean if calling `globpath(path, expr)` suddenly isn't enough to apply `wildignore` then what is there to do?\n\nHowever, if you manage to track down the plugin or config that causes this, then please do leave a comment.\n. Ah, I thought of this before, but unfortunately Vimscript can't be run asynchronously. So no, it's not possible to build or rebuild cache in the background, or doing anything in the background for that matter.\n\nI think my closest attempt at this was to run the needed commands in another Vim instance through the client/server interface. I abandoned the idea because it was difficult to reliably implement for everyone. But if I remember correctly, it kind of worked.\n\nIf anyone wants to try, check `:help remote_send`. Basically, you just need to send the `:CtrlP /path/to/build/cache<cr>` string to the other Vim instance.\n. Alright, closing.\n\nAlso, as an addendum, to clear cache and rebuild, you can send `:CtrlPClearCache<cr>:CtrlP /path/to/rebuild/cache<cr>`. And to close the match window after the rebuild, send `:winc c<cr>`.\n. Close to a million entries is simply too many. ctrlp or vimscript can't handle that, at least with our current hardware. And I don't think there is any way to use vim's native tag jump in ctrlp.\n\nSo I suppose you just don't do it, don't use it for large tag files.\n. That'd require a pretty big code change, I think. Plus I don't really like making more special cases for the input.\n\nFor an alternative solution, you can use something like this:\n\n``` vim\nlet g:ctrlp_cmd = 'exe \"CtrlP\".get([\"\", \"Tag\", \"BufTag\"], v:count)'\n```\n\nThen pressing `<c-p>` will run `:CtrlP`, `1<c-p>` will run `:CtrlPTag` and `2<c-p>` will run `:CtrlPBufTag`. So technically it's still 1 mapping, and for example, instead of typing `<c-p>t anystring`, type `1<c-p>anystring`.\n. OK, closing. This won't be added. There's nothing in the current code that can support or extend into it. I probably won't accept a patch for something like `f anystring` or `#f anystring` either. It's a big code change for a rather small convenience.\n\nBut in any case, there'll need to be new unique and memorable identifiers for all the extensions, user made ones as well, i.e. the `t`, `f`, `bt`... that you suggest. This isn't much difference from predefining a bunch of mappings, in the sense that you have to memorize something. And if you have to memorize something anyway, then just memorize your mappings instead of the identifiers. And I hope that doesn't affect your workflow negatively.\n. Those are just the first files found in the directory. There's nothing special whatsoever. What you want is MRU mode, or Buffer mode would be suffice. Also, for that exact use case you have, you can just use Vim's `<c-w>T`, this will move the mistakenly opened split to a new tabpage instead.\n. No, they are just the ones that happen to be on the top of the returned list. And thanks for the idea, I'll think about it.\n. Thank you! I've made the current behavior optional instead. The new option is `g:ctrlp_tabpage_position`.\n. The basic usage on the homepage and in the readme should be enough, I think. All the pages link to each other anyway.\n\nFor your problem, please see #220. Most likely it's the cache. If it isn't then if you can, do some tests and help me track down the culprit.\n\nThanks!\n. You're correct, it's capped at the max height. That's pretty much how it works. The match window simply shows a few of the matches. To show more you can just change the max height option. I don't think I want to change this behavior now and make the window scrollable, mainly for performance reasons.\n. When `g:ctrlp_dotfiles` is disabled, all dotdirs under the working directory are ignored, no exception. The current file you are editing is in a dotdir or not doesn't matter. So basically what you want here is for ctrlp to make an exception for the directory of the current file being edited, and to disregard the `g:ctrlp_dotfiles` option in that case.\n\n> I would expect that when g:ctrlp_dotfiles is disabled, ctrlp wouldn't look past a dotfolder for a root marker.\n\nOK, why would it do that? What if people genuinely want to root to .git? What you expect is for the finding root feature to unexpectedly break when the current file you're editing happens to be in a dotdir.\n\nIf you often have files you want to search for inside dotdirs, then just don't reset `g:ctrlp_dotfiles`. But if you insist on setting it to 0, then use something like `:CtrlP %:h` to start ctrlp in those special cases.\n\nThis isn't a bug as the ignoring works exactly as it should. And I don't think want to add an option for this because it's simple to workaround.\n. Latex isn't a default filetype so you'll have to set the arguments to use to call ctags as well. You can set them with the `g:ctrlp_buftag_types` option.\n. Duplicate of #196. You're supposed press Enter (`<cr>`) to submit the dots.\n. No worries! At least searching is a bit easier now thanks to this :)\n. I'm still undecided, but I might look into adding options for defining custom opening functions so that this can be configured.\n\nHowever, if I decide not to add any option, this can still be done within an [extension](https://github.com/kien/ctrlp.vim/tree/extensions). One that only shows files it has a special opening command available for.\n. I've added an option. This is probably as far as I'm going to go with this feature.\n\nHere's an example function to open HTML files in the default web browser from the `<c-o>` prompt:\n\n``` vim\nfunction! HTMLOpenFunc(action, line)\n    if a:action == 'x'\n\n        if fnamemodify(a:line, ':e') =~? '^html\\?$'\n            \" Get the filename\n            let filename = fnameescape(fnamemodify(a:line, ':p'))\n\n            \" Close CtrlP\n            call ctrlp#exit()\n\n            \" Open the file\n            silent! execute '!xdg-open' filename\n        else\n            \" Not a HTML file, simulate pressing <c-o> again\n            call feedkeys(\"\\<c-o>\")\n        endif\n\n    else\n\n        \" Use CtrlP's default file opening function\n        call call('ctrlp#acceptfile', [a:action, a:line])\n\n    endif\nendfunction\n\nlet g:ctrlp_open_func = { 'files': 'HTMLOpenFunc' }\n```\n. @mMontu: no, the MRU list only records buffers that you open in Vim. But I'll see if it makes sense to allow adding items manually, since this probably won't be used for anything else.\n. @mMontu: I've added a new function: `ctrlp#mrufiles#add()`. You can call it, for example, after the file opening line in the `HTMLOpenFunc` function above. Use `call ctrlp#mrufiles#add(filename)`.\n. @mMontu: Sorry to disappoint you, but those are only visual cues :) For example, the top level folds with `*` have multiple functions, and the ones with `-` only have one function. The foldmethod is just `marker` with the default markers `{{{,}}}`, enforced by the modeline.\n. Did you test with the same buffer in the first window and in the current window? Does it make any difference if you set   `g:ctrlp_switch_buffer` to 0?\n\nEither way, can you provide steps to reproduce and the window layout (the positions and the file/buffer of each window) you have when opening the entries? Take a couple of screenshots if you can.\n. I see. With the `switch_buffer` option on, the cursor will be moved to the first window that has the buffer when an opening command is issued. It's very similar to running `:sb` when Vim's `switchbuf` has `useopen`.\n\nThis is still kind of counter intuitive with `:e`, though. I'll change it.\n. > I can open the file manually and then use the :CtrlPMixed command to find the file like normal.\n\nHave you cleared the cache after setting the options? You can either press `<F5>` in the match window or run `:CtrlPClearAllCaches` from Vim's command line.\n. Yes, definitely. Now I just have to decide which other items should be on it.\n. @timc3 @screwzm Have you guys increased the max_file limit before clearing the cache? That's pretty important.\n. @screwzm by default, ctrlp also set its own local working directory. Take a look at `g:ctrlp_working_path_mode` and `g:ctrlp_root_markers`.\n. @screwzm a blank window containing a unnamed buffer including the first one when you start Vim normally, is always reusable by default.\n. @screwzm then it's probably not a normal blank window. CtrlP only avoids replacing a buffer if it's a special buffer (unlisted with a non-empty buftype other than \"help\"), or has unsaved changes without hidden or autowrite set.\n. That dialog is a Vim's built-in feature that's triggered automatically. See `:help tag-matchlist` and check the example output under `:tselect`. And because these commands only accept the tag name, it's really hard to differentiate 2 tags with the same name in different files.\n\nThe tag extension has a workaround for this, but apparently it doesn't always work.\n\nCan you provide a test case including the tag names, the filenames, the tag files and their locations?\n. Let me know if this patch fixes it:\n\n``` diff\ndiff --git a/autoload/ctrlp/tag.vim b/autoload/ctrlp/tag.vim\nindex c54d5ad..f3efbb8 100644\n--- a/autoload/ctrlp/tag.vim\n+++ b/autoload/ctrlp/tag.vim\n@@ -23,8 +23,9 @@ let s:id = g:ctrlp_builtins + len(g:ctrlp_ext_vars)\n \" Utilities {{{1\n fu! s:findcount(str)\n    let [tg, fname] = split(a:str, '\\t\\+\\ze[^\\t]\\+$')\n-   let [fname, tgs] = [expand(fname, 1), taglist('^'.tg.'$')]\n-   if empty(tgs) | retu [1, 1] | en\n+   let tgs = taglist('^'.tg.'$')\n+   if tgs == [] | retu [1, 1] | en\n+   let fname = fnamemodify(simplify(fname), ':s?^[.\\/]\\+??:p:.')\n    let [fnd, ct, pos] = [0, 0, 0]\n    for each in tgs\n        let ct += 1\n```\n. OK, I was able to reproduce the switching problem. This fixes it for me:\n\n``` diff\ndiff --git a/autoload/ctrlp/tag.vim b/autoload/ctrlp/tag.vim\nindex c54d5ad..34d5043 100644\n--- a/autoload/ctrlp/tag.vim\n+++ b/autoload/ctrlp/tag.vim\n@@ -23,9 +23,20 @@ let s:id = g:ctrlp_builtins + len(g:ctrlp_ext_vars)\n \" Utilities {{{1\n fu! s:findcount(str)\n    let [tg, fname] = split(a:str, '\\t\\+\\ze[^\\t]\\+$')\n-   let [fname, tgs] = [expand(fname, 1), taglist('^'.tg.'$')]\n-   if empty(tgs) | retu [1, 1] | en\n-   let [fnd, ct, pos] = [0, 0, 0]\n+   let tgs = taglist('^'.tg.'$')\n+   if tgs == []\n+       retu [1, 1]\n+   en\n+   let bname = fnamemodify(bufname('%'), ':p')\n+   let fname = expand(fnamemodify(simplify(fname), ':s?^[.\\/]\\+??:p:.'), 1)\n+   let [fnd, ct, pos, idx] = [0, 0, 0, 0]\n+   wh idx < len(tgs)\n+       if bname == fnamemodify(tgs[idx][\"filename\"], ':p')\n+           cal insert(tgs, remove(tgs, idx))\n+           brea\n+       en\n+       let idx += 1\n+   endw\n    for each in tgs\n        let ct += 1\n        let fulname = fnamemodify(each[\"filename\"], ':p')\n```\n\nThe patch was created with `$ git format-patch -1 > test.patch` and works fine when applying. But I haven't updated my git installation for more than a year, so maybe that's the reason.\n. Great, thanks! I'll push this to master soon once I'm sure there isn't any side effect.\n. @jszakmeister can you provide a test case like Jeroen did in the 3rd comment?\n. Looks like you're using [an older commit without the above fix](https://github.com/jszakmeister/vimfiles/blob/41533f89a3b25a0f9eb4ca20878fdd01ce167d51/bundle/ctrlp.vim/autoload/ctrlp/tag.vim#L26-L28). Make sure to update to HEAD of `master`, and let me know if you still see the issue.\n. I still can't reproduce it by following the steps in your test. And oddly enough, the old version can also get the tag count from your tags file (meaning no Vim's tag-matchlist dialog).\n\nWhat's the full path to file1.py and file2.py? And what does `:pwd` return after you open gVim?\n. Please try starting gvim with this:\n\n```\ngvim --noplugin -u path/to/a/simple/.vimrc\n```\n\nUse this as the content of the above .vimrc:\n\n``` vim\nset nocp\nruntime! plugin/ctrlp.vim\n```\n\nJust make sure the parent directory of `plugin` is in your runtimepath, for example ~/.vim.\n\nSee if you still get the tag-matchlist.\n. It might be something that changes the `tags` option (see `:help 'tags'`), or the working directory. I'm honestly not sure.\n. Ah I see. Thanks! When `cst` is set, `:tag` uses `:cstag` which in turn performs `:tjump`. And `:tjump` always shows tag-matchlist when there are 2 or more similarly named tags.\n\nSince tag.vim only works with tags files, it might be a good idea to reset that option when using `:tag`.\n. You can by pressing `<F5>` in MRU mode. A bit hidden but this is mentioned in the doc at `:help ctrlp-mappings`.\n. In answer to your initial question, no, it's not possible. The `prompt_mappings` option is only meant for the mappings you see in the `ctrlp-mappings` section in the doc. You also shouldn't remap `<space>` because it's one of the keys used for inputting, and there isn't a way to map it only in one mode.\n\nYou may, however, use the followings which work in all modes, but be warned that you're not supposed to do this:\n\n``` vim\nlet g:ctrlp_prompt_mappings = { 'PrtAdd(\".*\")': ['<space>'] }\n\" or\nlet g:ctrlp_prompt_mappings = { 'PrtAdd(\".*\")': ['<c-@>'] }\n```\n\nOtherwise, just type `.*` directly.\n. This actually isn't a typo as I purposely changed it pretty early on. You can see this in the doc [here](https://github.com/kien/ctrlp.vim/blob/4d5b39c0cf005bc48e6d5916e631c0b444ebc419/doc/ctrlp.txt#L564), and [here](https://github.com/kien/ctrlp.vim/blob/4d5b39c0cf005bc48e6d5916e631c0b444ebc419/doc/ctrlp.txt#L1183). The long form's kept in the code because I don't want to break people's mappings.\n. Yes, there isn't a way to change the autocomplete, otherwise I'd have done it as well. And technically you were right, there isn't a `:CtrlPMRU` defined, it's just an abbreviation of `:CtrlPMRUFiles` which I think is slightly more difficult to remember.\n. Those autocmds work fine for me. I also use some autocmds to restore cursor position and folds and never had a problem.\n\nCan you consistently reproduce this? If you can, please provide a test case including the buffers you have open, how you move away and reopen them with ctrlp.\n. If I understand your situation correctly, you have a `.git` directory at your home directory? And the svn project is in a subdirectory also under your home directory? If that's correct, just put `.svn` in the root_markers option:\n\n``` vim\nlet g:ctrlp_root_markers = ['.svn']\n```\n\nAs for why, see my answers in issue #181. But now I think I might need to change this a bit. It seems like a lot of people expect it to work without the priority thing.\n. No, there's no other way with the plugin. But if you can, update your project and SVN install. From SVN 1.7, there's only one `.svn` directory at the root of the project: http://subversion.apache.org/docs/release-notes/1.7.html#single-db\n\nAnyway, I'll be making some changes to remove markers' priority so that people using multiple VCS'es won't have to put `.svn`, `.bzr`, ... in the root_markers option. This option will be reserved for the `.root` type of markers.\n. @danielb2: The number on the left is the total number of files found until the last directory depth.\n\nHow do you tell ctrlp to only search for .php files?\n\nAlso, the root_markers option is only for determining the local working directory inside ctrlp, it has no impact on the indexing. Unless of course the new root (with root_markers) is a parent directory of the old root (without root_markers), then the indexing being slower is simply because the parent directory has more files.\n\nP.S. I wasn't ignoring this, btw. For some reason I didn't get any notification for your comment, so I only saw it just now.\n. @prezjordan: It's an optional feature which you can disable. See `:help g:ctrlp_working_path_mode`.\n. No, it's not possible. This is pretty much what regexp mode is meant for: giving users control over the exact search patterns. You can just type `app.*a\\.xml`.\n. This simply can't be done. Vim is single threaded. Things can't be run in the background because there isn't a background to begin with. Everything happens in Vim happens in the same thread as your text editing actions.\n. Hmm, sounds like you have a different definition of \"background threads\". Things that you don't see running are not things running in a background thread. And I'm pretty sure the linters are simply fast enough so you don't notice the delay most of the times.\n. Oh I see. But it's simply impossible with Vimscript because Vim itself is single threaded.\n. AsyncCommand uses `--remote`. Basically, it runs the needed commands in another Vim instance. This also requires Vim built with `+clientserver`.\n\nThe top answer in the stackoverflow quesion also offers the same thing: `:!gvim -c 'MyMake'`, this starts another Vim instance.\n. Well, I just don't think it's reliable enough to implement within the plugin. But yeah, try it in your own configuration if you want, see if it works for you.\n. Yes. But I'm not completely against the idea. It's just not on a todo list.\n. I can't reproduce and there has not been any issue related to ctrlp's buffer local options. Please test with a clean environment to make sure this is a ctrlp's problem.\n. Did you also test with a minimal .vimrc? Or with simply using `:edit` to open the files?\n\nMake sure you don't have a `set number` line somewhere in your .vimrc before the `set rnu` line.\n\nIt still looks to me like it has something to do with your configuration. A single `set rnu` in .vimrc works for me (like it does for someone else [here](http://superuser.com/questions/259408/vims-relativenumber-setting-and-multiple-buffers)). And given how often this option is highlighted as a cool feature of Vim 7.3, a lot more people would have reported this if it came from having `set rnu` alone.\n. No, there isn't a way. Spaces are a part of the search pattern because they can be in a filename.\n. I see. I did study fuzzyfinder while writing ctrlp, many of ctrlp's features are my own interpretations of fuzzyfinder's. So for the most part, I'm sure you won't miss much.\n\nCheers!\n. > Maybe mention in the doc that custom_ignore is ignored if user_command is used?\n\nIt's mentioned, or implied, in the doc under [`g:ctrlp_custom_ignore`](https://github.com/kien/ctrlp.vim/blob/4d5b39c0cf005bc48e6d5916e631c0b444ebc419/doc/ctrlp.txt#L228) and under [`g:ctrlp_user_command`](https://github.com/kien/ctrlp.vim/blob/4d5b39c0cf005bc48e6d5916e631c0b444ebc419/doc/ctrlp.txt#L242-243).\n\n> Variable type mismatch for: g:ctrlp_custom_ignore\n\nThe options are for users to set. This error can only happen if _you_ set the option twice in one Vim session in different types. The plugin itself does not create `g:ctrlp_custom_ignore`.\n\nEdit: OK, I guess you probably don't even know that in Vim we can't set a variable in a different type without `:unlet` it first, otherwise you wouldn't have associated this error with the plugin as it is completely outside of the plugin's control. See `:help E706`, and think of the options as simple variables that you need to set.\n. Merged.\n\nCheers!\n. Can you share your full Vim configuration? Also, let me know the exact steps to reproduce these beginning from starting up Vim.\n\nLine 17 of BuildPrompt is a `redraw` command and E68 is related to syntax highlighting so the first problem might have something to do with the other buffers you have open (since `redraw` affects the whole screen). You can test this by opening ctrlp right after starting up Vim, and try to reproduce the error.\n\nFor the second problem, does the entire Vim window become jumpy or just the content of the non-ctrlp buffer(s) become jumpy?\n. What OS are you using on this computer? Do you have any customizations for amix's config?\n\nAlso, from the error msgs, it looks like this starts right from the init step to every action that calls BuildPrompt, including adding and deleting characters.\n\nI doubt this has anything to do with the cache, but you can try deleting the ctrlp.vim bundle and the cache directory, then clone the plugin again from here.\n. OK, I see. I'm going to need you to help me test these:\n- Instead of using amix's config, start gVim with minimal configuration like this:\n  \n  ```\n  gvim.exe --noplugin -u path/to/a/simple/_vimrc\n  ```\n  \n  You can add the extra arguments to the gVim shortcut, it works the same as running from a command line.\n  \n  Use this as the content of the `path/to/a/simple/_vimrc` file:\n  \n  ``` vim\n  set nocp\n  set runtimepath^=path/to/ctrlp/directory\n  runtime! plugin/ctrlp.vim\n  ```\n  \n  Change the `path/to/ctrlp/directory` to the location of ctrlp on your system.\n  \n  After starting gVim, press `<c-p>` to open ctrlp, then try to reproduce the problem.\n- Instead of the above test, apply this patch and start gVim in your normal configuration, then try to reproduce the problem:\n  \n  ``` diff\n  diff --git a/autoload/ctrlp.vim b/autoload/ctrlp.vim\n  index b27380d..7bb0627 100644\n  --- a/autoload/ctrlp.vim\n  +++ b/autoload/ctrlp.vim\n  @@ -529,7 +529,7 @@ fu! s:BuildPrompt(upd, ...)\n          \\ : ['CtrlPPrtText', 'CtrlPPrtCursor', base]\n      let hibase = 'CtrlPPrtBase'\n      \" Build it\n  -   redr\n  +   norm! :\n      exe 'echoh' hibase '| echon \"'.base.'\"\n          \\ | echoh' hiactive '| echon \"'.prt[0].'\"\n          \\ | echoh' hicursor '| echon \"'.prt[1].'\"\n  @@ -1597,7 +1597,8 @@ fu! s:insertstr()\n   endf\n  \n   fu! s:textdialog(str)\n  -   redr | echoh MoreMsg | echon a:str | echoh None\n  +   norm! :\n  +   echoh MoreMsg | echon a:str | echoh None\n      retu nr2char(getchar())\n   endf\n  ```\n\nAlso, make absolutely sure you're using the latest version of ctrlp by cloning it directly from here (the ctrlp's commit that amix's config points to is 3 months old).\n\nLet me know how it goes in each case.\n\nThanks!\n. I think the problem with the patch is the whitespaces (tabs vs. spaces, it happened before).\n\nAs for the errors, if ctrlp works in the first test, then something in your normal configuration is definitely conflicting with ctrlp.\n\nIf you're interested in tracking it down, you can try disabling each of the plugins and remove parts of your _vimrc and other configs etc... until you find the culprit. If you do find it, then please leave a comment or just open a new issue. If I can, I'll try to find a workaround for it regardless if it's a ctrlp's problem.\n. Hmm, sounds like it might be related to this powerline issue: https://github.com/Lokaltog/vim-powerline/issues/161\nI can't reproduce that, though so I'm not sure if it has something to do with the errors here.\n\nAs for the coloring issue, I think you should open a new issue with powerline since it is what powerline does. Other than calling a specified function, ctrlp doesn't have much say in how the custom statusline works or looks like.\n. It works fine for me and the code checks out, too. What mapping or command do you use to open ctrlp?\n. I can't reproduce this and I don't see how this part of the code can go wrong. It would be a much more widespread issue if it was straight up broken.\n\nCan you try deleting and cloning the repo again? And if that doesn't help, please do the following:\n1. Set `let g:ctrlp_log = 1` in your .vimrc.\n2. Restart Vim and start ctrlp to try to reproduce the error.\n3. Exit ctrlp and go find the `~/.cache/ctrlp/ctrlp.log` file.\n4. Post the content of the ctrlp.log file here.\n\nThanks!\n. Ping.\n\nI just need the error log because the E731 doesn't look like it's the only error message. It makes no sense to have this particular error with the current `SetWD()` function.\n\nAlso, just to avoid any interference, try starting Vim in minimal configuration like this when getting the error log:\n\n```\nvim --noplugin -u path/to/a/simple/.vimrc\n```\n\nUse this as the content of the path/to/a/simple/.vimrc file:\n\n``` vim\nset nocp\nset runtimepath^=path/to/ctrlp/directory\nruntime! plugin/ctrlp.vim\n\nlet g:ctrlp_lazy_update = 1\nlet g:ctrlp_max_files = 30000\n```\n. OK, I'm closing this for now due to lack of information. I can only see the E731 error happens there if somehow you use the older `autoload/ctrlp.vim` file with the newer `plugin/ctrlp.vim` file, thus passing a Dictionary from `:CtrlP` to be used as a String with the older `SetWD()` (line 3 of it had a `strlen()` call).\n\nBut it makes no sense with the newer `autoload/ctrlp.vim` because the newer `SetWD()` always treats its main argument as a Dictionary. There's just no way to create an E731 there, even if trying.\n\nSo as I see it, it's either an old Vim 7.0 bug which I can't reproduce, or something is getting mixed up in your configuration. If you manage to grab the error log or find out something new or how to consistently reproduce this, please leave a comment and reopen the issue.\n. Hmm, I don't see a point in adding that one pair of movement mappings. The other mappings get a mention because they are somewhat unique to ctrlp, people don't expect and don't look for them.\n. Maybe because they are guessable (`hjkl`)? But if someone doesn't figure it out, they can always read the mapping help at `:help ctrlp-mappings`, which is what I prefer people to do.\n. Yes, you can. Check the bundled extensions for examples. Here's the syntax highlighting in bookmarkdir.vim:\n\nhttps://github.com/kien/ctrlp.vim/blob/master/autoload/ctrlp/bookmarkdir.vim#L86-99\n. Oh, I see. That's currently only possible with filename related modes (files, buffers, mru etc). It's a bit complicated to highlight matches in other modes because of overlapped highlightings so I just disable it.\n\nI don't have any plan to enable it any time soon.\n. Yes, that's the spot. But just enabling it like that won't work well in many cases (e.g. it highlights the wrong strings).\n. Well, it's kind of too late for such a big change, or inclusion. Besides, I prefer using a buffer from the very beginning, it's basically the reason ctrlp exists and is what it is. But using a menu to display the results is how fuzzyfinder does it, so if that makes or breaks it for you then you might want to give fuzzyfinder a try.\n. See `:help g:ctrlp_prompt_mappings`, and also read the note under it regarding `<c-h>` and `<bs>`.\n. `:CtrlP .`, or turn off the root finder with `g:ctrlp_working_path_mode`.\n. Actually, this is quite a bit different from 159 and is simpler to implement. I can just compare a filename with the patterns in the option and push it down the results list if it matches them.\n\nBut I really don't want to complicate the matching even more now. In one way or another, this option will have to be checked and compared with on every single change in the search string (i.e. on almost every keystroke).\n. > If 'undordir' is set, the files are created with the same extension as the original file, so wildignore can't be used.\n\nYou can ignore directories with `wildignore`, not only files. Try `set wig+=*/undo/*` (or when `ssl` exists and is off: `set wig+=*\\\\undo\\\\*`).\n\nAs for custom_ignore, because the rtscript extension looks directly for files under `&rtp`, ignoring directories alone (e.g. with `{ 'dir': '/undo/' }`) won't work. You need something like `let g:ctrlp_custom_ignore = '/undo/'` which applies to everything (note that `set wig+=*/undo/*` does, too).\n. Merged. Thank you!\n. I suppose you use `g:ctrlp_user_command`?\n. What do you mean by \"won't search inside directories\"? Does setting `let g:ctrlp_custom_ignore = ''` change anything? What's the working directory inside ctrlp when you open it?\n\nI don't think this has anything to do with 258. He uses `g:ctrlp_user_command` to get the index from `git ls-files`.\n. It was because of a change I made to the default ignore rules that covered too much stuff. This should be properly fixed now in b7cb2f5.\n. `:CtrlP app/decorators` should open ctrlp in app/decorators and `:CtrlP app/models` should open it in app/models. This is the default behavior.\n\nYou probably have `set autochdir` somewhere in your config or a plugin or function that changes the working directory (outside of ctrlp) after opening a file.\n. Thanks! :)\n\nIf you want to use that autocmd or `set autochdir` later on, just use an absolute path with the `:CtrlP` command (since `:CtrlP directory` is basically `:lcd directory`). This probably applies to `:CommandT`, too.\n. It's the root finding feature. You can turn it off with the `g:ctrlp_working_path_mode` option.\n. This is a known limitation (of this type of prompt). I have to create a mapping for each and every key while the `timeoutlen` has to be set to 0. Because of these reasons it's not possible to type accented or multibyte chars that require multiple keypresses.\n. @lucapette: No, it's fine. I do take note of everything even if I don't post a reply :) Thank you!\n\nBut I'm still a bit undecided about the FAQ, actually. Right now, other than the issues with people not knowing about the cache, the other issues only ever show up once or twice, and they are pretty much \"how it is\" kind of things (either something with no workaround or a feature mentioned in the readme and in the help). If they keep showing up more, though, I'll probably put a few into a separate FAQ.md or a wiki page and put a link in the readme.\n. > Expected:\n> Vim opens with the CtrlP prompt open (vim -s enters the keys in the given file after the vimrc has been loaded)\n\nHmm, `vim -s file` is basically `:source! file` (note the `!`), so if you put `:CtrlPMixed` in that file, Vim will open with `:CtrlPMixed` in the command line, ready for you to press `<cr>` (this isn't your expected behavior). So unless every other terminals you've tested for some reason output the `/tmp/ctrlp` file with Windows' line ending (CR+LF), `vim -s file` won't ever work the way you expect it to work.\n\nIn any case, try just typing `vim -c \"CtrlPMixed\"`, or without typing the `-c` part, just `vim` and then press `<c-p>`, instead of going through the extra step of putting the command into a file, which shouldn't work in the first place.\n\nClosing this because the expected behavior is an incorrect behavior.\n. No, the new line only works if it has a CR character in it like a Windows' line ending, with CR+LF (`\\r\\n`). The carriage return (CR) will be read as a `<cr>` in Vim. That's the only way `vim -s file` is going to do what you're expecting it to do. But on Ubuntu, the new line is only comprised of a LF (`\\n`).\n\nI think what you actually meant to use is `vim -S file`. There's a big difference between `-s` and `-S`. And `-S` does exactly the behavior that you're expecting `-s` to do here.\n\nBut anyway, it's up to each person to choose what to use, making sense be damned... old habits die hard and all that. If you choose to keep trying to use `vim -s file` then who am I to say otherwise?\n. What do you see in Vim when using `-S`? Also, try `vim -c \"CtrlPMixed\"`.\n\n> If the CR character is not interpreted in the same way as \\n by vim -s.\n\nThat wasn't what I meant. What I meant was that a new line on Ubuntu only has a LF, so `vim -s file` should never work like you say.\n. Nope, that doesn't ring any bell. I'm sorry but I've no idea what's wrong with your environment at this point. None of the behaviors makes sense. I guess you'll have to settle with not being able to open ctrlp this way.\n. So far it's just yours. And that just adds to the mystery. Since first you said `vim -s file` worked fine (including with ctrlp) in all other terminals that you'd tested, while it should not. Now both `-c` and `-S` don't even work where `-s` worked. So everything is basically working backward on your set of terminals. And that's what I mean by \"your environment\".\n. Yes, `-c` and `-S` work fine for me on multiple OS'es including Ubuntu. Never had a problem.\n. Hmm, why? The tab completion inside the prompt isn't meant to be a replication of `:e`'s. The resulting string is simply used as a search string to search for files and directories _under_ ctrlp's current working directory, that's why it's relative.\n. > if you want to open ANY file you no longer have to think \"Is the file in my current directory or not?\".\n\nThat's not what ctrlp sets out to do. It doesn't and can't care about files outside of the working directory. Also, CtrlPMixed doesn't include CtrlPDir.\n. This is an intended behavior (done with the `:hide` command). When the changed buffer is hidden, the changes are not saved and also won't get lost.\n\nSo why do you want the confirmation dialog? I don't see any reason to have it at all.\n. I've changed this behavior a bit. Now instead of hiding the modified buffer and reusing the window, ctrlp opens a new split for the new buffer when `hidden`, `confirm`, `autowriteall`... are off.\n\nIf you find any problem with this change, let me know.\n. It's the root finding feature controlled by `g:ctrlp_working_path_mode`. Without setting it, it's defaulted to `'rc'`. The behavior you're seeing is the `'c'`.\n\nYou can use `let g:ctrlp_working_path_mode = 0` to disable this feature.\n\nYour other projects probably have a root marker (`.git`, `.hg`, etc) at `~/code/project`.\n. I'm not sure myself. The original screenshot was taken sometime last year. But it was likely one of the Proggy fonts or the ProFont at a larger size. If not, then I might have uninstalled it at some point.\n. It was definitely a pixel font, though. I was trying a lot of pixel and bitmap fonts at the time. I think I stopped using this one because of the small line space which made reading difficult.\n. Yes, I'm back to Consolas and Monaco now.\n\nAlso, thanks for the tip!\n. Added. You can check `:help g:ctrlp_switch_buffer` for details.\n. What tags file do you mean? And how exactly can scrapping a file list from a tags file be faster than say `git ls-files`?\n. Hmm, I guess you mean ctags-generated tags files, or similar... Well, the file list that can be scrapped from a tags file will be most definitely not the same as the index returned from `globpath()`, `find`, `dir` or `git ls-files`. So it simply can not be used as a direct replacement for those. Furthermore, I don't think scrapping and filtering a massive tags file for only a few files can be faster or more effective.\n. And not just filtering, whenever you wanted to update the file list, you would first have to run ctags on the entire code base to update the tags file...\n. Yeah, it's not really a bad idea, I just think it isn't very practical.\n. Thanks! But this is a user option. The most I can do with this type of information is adding new examples in the docs.\n. `mdfind` hardly fits the bill. It doesn't list hidden files by default, and the syntax you use only lists files that have `file` in their metadata (most likely in the filename). It only shows about 250 files in ~5000 total in my home directory.\n. Closing. This isn't exactly necessary and `mdfind` also doesn't work for what we need.\n. Added. Thank you!\n. Thanks! Just pushed a fix. Let me know if you find any other problem.\n. Hmm, can you be more specific? What exactly do you want to implement and how do you plan to implement it in Fugitive? I'm curious as to how something can possibly clobber the option, or more importantly, _why_ does it even have to do that? Since ctrlp runs in its own buffer and has its own local working directory, pretty much having its own world.\n\nI'll certainly consider this but to have that particular `ctrlp#custom()`, there'll need to be a lot of changes. So what _exactly_ do you want it for? Something to use in Fugitive to get the user_command feature for `:Gstatus`? I don't think I follow...\n\nAlso, `<c-p>` in Normal mode is a duplicate of `k`, so it's not hard to see why nobody has complained about that default (which can be very easily changed anyway, and the option to do this is plastered everywhere).\n. Oh I see. I thought you were talking about ctrlp's `<c-p>` mapping. I didn't know `:Gstatus`'s `<c-p>` clobbered ctrlp's. But I still don't get exactly what this will be used for, and in which situation... I'm down with allowing more control, in any case.\n\nSo what if you could use a `b:var` which could be modified freely, with the `git ls-files` command that would be used in `let files = split(system(...), \"\\n\")`?\n\n``` vim\nlet b:ctrlp_user_command = ['.git', 'git --git-dir=/tmp/repo/.git/modules/submodule ls-files -oc --exclude-standard']\n```\n\nAnd instead of using `call ctrlp#custom({ 'root': '/tmp/repo/submodule', ... })` to open up ctrlp, just use `:CtrlP /tmp/repo/submodule`, since this only matters for find file mode. \nAn alternative to this is `let b:ctrlp_working_path_mode = 0`, `lcd /tmp/repo/submodule`, then `:CtrlP`.\n\nWould that work/be enough?\n. Well, fugitive would have to mess around with `let files` and `call ctrlp#custom()` otherwise, right? With a `b:var`, it wouldn't have to run another `system()`, while the `git ls-files` command would still be needed in any case.\n\nThe `:CtrlP` command started to take a path very early on, about a year ago today I think... Also, the fact that I mainly use git from console probably contributes to me not getting this. I don't have a clear idea of what `:Gedit` does, for example.\n. Then just do the usual saving & restoring for `g:ctrlp_user_command`, like this for example:\n\n``` vim\nfunc! CustomUserCmd()\n    if exists('g:ctrlp_user_command')\n        let saved_user_command = g:ctrlp_user_command\n    en\n\n    unl! g:ctrlp_user_command\n\n    let g:ctrlp_user_command = ['.git', '...']\n    CtrlP /tmp/repo/submodule\n\n    unl! g:ctrlp_user_command\n\n    if exists('saved_user_command')\n        let g:ctrlp_user_command = saved_user_command\n    en\nendfunc\n\n\" Mapping for the status window\nnn <buffer> <silent> <c-p> :call CustomUserCmd()<cr>\n```\n\nWhat do you think? It beats me having to modify ctrlp so that it takes options' values via function arguments, which I suspect very few people (if not nobody else) will probably ever need.\n\nI'll still proceed with adding support for using `b:var`, though, since among other things, it'll allow people to (more easily) overrule the above behavior should they want to.\n. Yeah, it's very often used to workaround problematic Vim's options or to create a more suitable enviroment. Like this particular one, for example:\n\n``` vim\nlet s:keepcpo = &cpo\nset cpo&vim\n\n...\n\nlet &cpo = s:keepcpo\nunlet s:keepcpo\n```\n\nFor the `b:var` change, I'll push it out soon after I can do some testing.\n. So I decided to bite the bullet and add support for overriding some options when calling ctrlp. Here's what the function call should look like:\n\n``` vim\ncall ctrlp#init(0, { 'dir': '...', 'opts': { 'user_command': ['.git', '...'] } })\n```\n\nIf you find any problem with these changes, let me know. Thanks!\n. Thanks! But this should be done by the external matcher instead. There's no need to create a new option.\n\nHijacking the `s:highlight()` function like this also doesn't work well because the pattern sent to it is already reformatted, it isn't the same one sent to the external matcher.\n. I suppose you've solved your problem?\n\nAnyway, there's so much confusion regarding this option, and so many false bug reports, from both people who do and do not know of its existent. I'm really tempted to just disable or remove the feature altogether.\n. The `path_mode = 'r'` setting for ctrlp is only effective when a root (which should have a root marker) is actually found. If there's no root, ctrlp will use the current working directory, and I guess in your case it's set to the directory of the current file by the `autochdir` option.\n\nSo instead of a combination of `autochdir` and `:e`, you should use `:e %:h/new_file`.\n. OK, since I can't really test this, I'll trust you on it. I'll merge and push it out soon.\n. That's awesome. Thanks, @d11wtq!\n\nI encountered a few problems with the control mappings. For example, pressing `<tab>` (9)  throws an E471, and pressing `<c-\\>` (28) or `<c-o>` (15) does nothing.\n. Yep, that seems to fix it. But I just noticed, this stops working after toggling the focus with `<s-tab>` then back again. I tried adding another `s:KeyLoop()` call after toggling but this in turn causes errors when closing ctrlp. Any idea?\n. This solves the above problem for me, not sure if there's any side effect yet:\n\n``` diff\n+++ b/autoload/ctrlp.vim\n@@ -561,7 +561,7 @@ fu! s:BuildPrompt(upd)\n endf\n\n fu! s:KeyLoop()\n-   wh exists('s:focus') && s:focus\n+   wh exists('s:init')\n        redr\n        let n = getchar()\n        let c = type(n) == 0 ? nr2char(n) : n\n@@ -739,7 +739,7 @@ fu! s:PrtSelectJump(char)\n            let npos = match(lines, smartcs.'^'.chr, s:jmpchr[1] + 1)\n            let [jmpln, s:jmpchr] = [npos == -1 ? pos : npos, [chr, npos]]\n        en\n-       keepj exe jmpln + 1\n+       exe 'keepj norm!' ( jmpln + 1 ).'G'\n        if s:nolim != 1 | let s:cline = line('.') | en\n        if line('$') > winheight(0) | cal s:BuildPrompt(0) | en\n    en\n```\n. Merged. Thanks, @mattn! This is a very nice addition.\n. Would the `g:ctrlp_match_func` option work for what you need? Here's an example from a different script:\n\n``` vim\nlet g:ctrlp_match_func = { 'match': 'MatchFunc' }\nlet g:path_to_binary = \"/path/to/binary\"\n\nfunction! MatchFunc(items, str, limit, mmode, ispath, crfile, regex)\n  \" Create a cache file\n  let cachefile = ctrlp#utils#cachedir().'/custom.cache'\n  if !( filereadable(cachefile) && a:items == readfile(cachefile) )\n    call writefile(a:items, cachefile)\n  endif\n  if !filereadable(cachefile)\n    return []\n  endif\n\n  let cmd = g:path_to_binary.' --limit '.a:limit.' --manifest '.cachefile.' '.a:str\n  return split(system(cmd), \"\\n\")\nendfunction\n```\n\nYou can check the help for the details on the arguments.\n. Yeah, it's an option to replace the built-in matching function.\n\nSo this isn't possible, yet, I think. With an extension, ctrlp still does all the matching and filtering. I might do something about this in the future, but it probably won't be anytime soon.\n. With how ctrlp does the matching, adding this will impact performance. So I'm not going to add it. It's a good idea otherwise, though.\n. ``` vim\nlet g:ctrlp_show_hidden = 1\n```\n\nIt's `0` by default now. I switched it off because people keep complaining about indexing time. Plus, ctrlp was one of the few finders (if not the only one) that showed hidden files by default.\n. There's a short changelog in the help file. But yeah, I guess I could be a bit more explicit with it.\n. ctrlp doesn't have this built-in. I'm not going to add it because it's not essential, and you can just be creative with the options. Use something like this in your vimrc, for example:\n\n``` vim\nlet g:ctrlp_buffer_func = { 'enter': 'MyCtrlPMappings' }\n\nfunc! MyCtrlPMappings()\n    nnoremap <buffer> <silent> <c-@> :call <sid>DeleteBuffer()<cr>\nendfunc\n\nfunc! s:DeleteBuffer()\n    let line = getline('.')\n    let bufid = line =~ '\\[\\d\\+\\*No Name\\]$' ? str2nr(matchstr(line, '\\d\\+'))\n        \\ : fnamemodify(line[2:], ':p')\n    exec \"bd\" bufid\n    exec \"norm \\<F5>\"\nendfunc\n```\n\nThen pressing `<c-@>` in Buffer mode will delete the selected buffer.\n. It's partly because there aren't many usable mappings left to use. I'd also have to make something to allow changing the deletion command between `:bd`, `:bw`, `:bun`, otherwise people would be requesting it. Lastly, I think people should be using plugins dedicated to buffer management instead.\n. @amadeus Yeah, the snippet was written before the addition of No Name buffers. I've updated it a bit.\n. Does this happen everywhere or only in some directories? Does it happen with other commands like `:CtrlPBuffer`?\n\nWithout more information, it looks like it has something to do with the directory you are currently in. Line 1 of GlobPath is just a call to Vim's `globpath()`. The `E16: Invalid range` error otherwise makes no sense in the context of this function.\n\nYou can test by running `:CtrlP path/to/an/empty/directory`, where `path/to/an/empty/directory` is the path to any directory with no files and no sub directories.\n. Let me know if 10bbbfa changes anything.\n. Hmm, there's no `h` in `spec/requests/static_pages_spec.rb`, so wouldn't typing `static_h` or just `h` be enough to find the second file? If there are other files interfering then that's a bad example, I think.\n\nAnyway, I really don't want to make the matching more complex as it will impact performance. As for interpreting spaces as either underscores or spaces, take a look at the `g:ctrlp_abbrev` option.\n. It's a new option, so just update your copy.\n\nAnd yes, with the abbrev option you can replace the space entirely with the underscore. Example:\n\n``` vim\nlet g:ctrlp_abbrev = {\n    \\ 'gmode': 't',\n    \\ 'abbrevs': [\n        \\ {\n        \\ 'pattern': '\\(^@.\\+\\|\\\\\\@<!:.\\+\\)\\@<! ',\n        \\ 'expanded': '_',\n        \\ 'mode': 'pfrz',\n        \\ },\n        \\ ]\n    \\ }\n```\n\nThe `\\(^@.\\+\\|\\\\\\@<!:.\\+\\)\\@<!` part is for keeping the space in some special cases.\n. Those indicators interfere with the matching. They also mess up the opening of the buffers because they are added at the source and become a part of the buffer names.\n\nPersonally, I'd just use `:ls` to get a more informative buffer list.\n. Just one small (negligible) issue. When in regexp mode, the indicators break the highlighting of the matched string:\n\n```\n> doc/ctrlp.txt [+]\n[===statusline===]\nr>> txt$\n```\n\nNormally `txt` should be highlighted.\n. Thank you! This is good enough for now. I'll try to fix the issue with the highlighting later.\n\nBTW, I've changed the format of the indicators to resemble the output of `:ls`.\n. There are 2 limits: max number of files `g:ctrlp_max_files`, and max directory depth `g:ctrlp_max_depth`. Try increasing them. Also, check your wildignore option and make sure `temp*` (or something along that line), isn't in it.\n. See `:help g:ctrlp_prompt_mappings`. But `<c-x>` can't be changed to just `i` because `i` is used for inputting the letter `i` literally. If you want to change `<c-x>` to `<c-i>`, then you'll also need to replace `<tab>` (also with the option) because `<tab>` and `<c-i>` have the same keycode.\n. It can be used to autocomplete directory names for `@cd directory<cr>` (change ctrlp's working directory), or for `directory/filename<c-y>` (create a new file).\n. You can rebuild the statuslines with the `g:ctrlp_status_func` option and change or move the parts however you like. See `:help g:ctrlp_status_func` for details.\n. They are indeed swapped. I'll correct it. Thanks!\n. It's regexp matched against directories and filenames literally when scanning. I suppose you've figured this out with the other issue (#290).\n. That's because the option is applied after `globpath()` returns the results. The cache won't contain the ignored files. So it's close but isn't exactly \"when scanning\" (as is normally understood).\n\nTo apply some ignore rules when `globpath()` is running, you should use Vim's `wildignore`.\n. What do you mean by \"not showing any option\"? Does ctrlp not start? Or ctrlp starts but there's no result?\n\nHow many files are in the same directory as the file you just open?\n. Set `g:ctrlp_working_path_mode` to `0` or an empty string. Or if you pull in the recent commits, you won't have to because ctrlp now uses a different default behavior.\n. How about `let g:ctrlp_custom_ignore = $HOME.'/\\(Library\\|Music\\)$'`?\n. It already is, the BufLeave event is included along with BufAdd, BufEnter etc. So just update your copy. I added this a long time ago, but if you haven't updated for a while, you might not have it yet.\n\nAlso, if you want to keep the last access order when typing the search string, then set `g:ctrlp_mruf_default_order` to 1. Otherwise the list will be sorted just like in the other modes.\n. You can use `:CtrlP /var/www/myproject/bla/bla/theme`.\n. The root_markers option must be a List: `let g:ctrlp_root_markers = ['pom.xml']`.\n. The default value is a List in the help file. The option's name is also plural. But yes, if issues like this keep coming up, I'll explicitly mention the var type, at least for some options.\n. Doesn't happen to me (but I'm not using Janus), and so far no one else has had this problem nor there has been any similar issue. So it's likely caused by something else in your Vim config.\n\nYou can try starting Vim in minimal configuration (without Janus) with just the 2 plugins. If it doesn't happen then try disabling the plugins or any configurations you have in Janus one by one, until you find the culprit.\n\nIn any case, can you provide more details and steps to reproduce? Does it happen all the time or only with some specific window layouts? From which window do you invoke ctrlp (nerdtree or an existing vertical split)? ... Take some screenshots if you can.\n. OK, this is almost definitely because (at least) one of the existing windows next to nerdtree has `set winfixwidth`. That's the only way I see running `:vnew` can crush every other window including nerdtree. There's nothing special about how ctrlp opens a vertical split (just a plain `:vnew filename`).\n\nClosing since this isn't a ctrlp's problem.\n\nYou can find out what set `winfixwidth` for your windows by grepping your Vim config for `winfixwidth` or `wfw`.\n. Both of the commands already include named, unsaved buffers. I'll see what can be done about unnamed buffers.\n. You can use the `g:ctrlp_user_command` option for this. For example, if you have the `cscope.files` file at a directory where you normally want ctrlp to start scanning from:\n\n``` vim\nlet g:ctrlp_user_command = ['cscope.files', 'cat %s/cscope.files']\n```\n\nOn Windows, use `type` instead of `cat`.\n\nIf you want ctrlp to zoom onto the parent directory of `cscope.files` automatically:\n\n``` vim\nlet g:ctrlp_root_markers = ['cscope.files']\n```\n\nFor using several files, you can use autocmds to change the options based on the current buffer:\n\n``` vim\nau BufEnter *.py\n    \\ let g:ctrlp_user_command = ['py.files', 'cat %s/py.files'] |\n    \\ let g:ctrlp_root_markers = ['py.files']\n```\n\nIf I add a new option specifically for using file list files, it'll be very similar to `g:ctrlp_user_command` in this case and will require the same configurations. So I probably won't, to avoid redundancy.\n. All the past attempts to improve or make complicated the internal matching algo have resulted in lower performance. And performance is what Vimscript already severely lacks. Real improvements can only be done by using a different language. It's the main reason the `g:ctrlp_match_func` option was added.\n\nSo my answer to your question is I have no interest in improving the internal algorithm. And `g:ctrlp_match_func` will remain a user option.\n. See `:help g:ctrlp_open_multiple_files`.\n. Are you sure about that behavior? If you read taglist's help, `Tlist_Auto_Open` is only for automatically open the taglist window _when opening Vim_. If you check the code, this is the only place it is used:\n\n``` vim\n    if g:Tlist_Auto_Open\n        autocmd VimEnter * nested call s:Tlist_Window_Check_Auto_Open()\n    endif\n```\n\nThis won't automatically open the taglist window when you open a file after Vim is already open.\n\nEdit: I didn't see your second comment when I started investigating.  Well, it isn't a bug in taglist, either, since it isn't a bug to begin with. It seems you're just expecting the option to work differently than its defined behavior.\n. No problem. Also, taglist hasn't been updated for 5 years now, I'd just leave those changes in the plugin or branch it, just to be safe.\n. `<c-s>` is reserved for terminal control flow. You should use `<c-x>` to split horizontally instead.\n. It's a known limitation of the ctrlp prompt. Try setting `g:ctrlp_key_loop` and see if you can type those letters. Check out `:help g:ctrlp_key_loop` for the details. There's currently no other workaround.\n. Update to the version on github. The last version is 1.78.\n. I can't reproduce this. I tried with having a few horizontal splits and a quickfix window at the bottom. The present of the quickfix window doesn't seem to make any difference.\n\nCan you provide the reduced .vimrc and take some screenshots before and after opening ctrlp?\n. Thank you! It seems that the problem lies with Vim being unable to correctly restore the window layout from the output of `winrestcmd()`, in the case where there's a window with `set winfixheight` and it's crushed by a `:resize` command run on a new window.\n\nI've pushed a workaround. Let me know if you find any problem.\n. You can do that in ctrlp but only in filename-only mode, which can be toggled on/off with `<c-d>`.\n. It definitely works for me. Are you using the latest version on github?\n. My email can be found in the repo with `git log`. There's no need for a personal email but thank you for the intention! I appreciate it.\n. However it would work, it would require rebuilding of the cache in the background. This can't be done with Vimscript in a single Vim session.\n. Would moving the match window to the top of the screen work for you? The top hit won't jump around if the match window is at the top. You can have this by setting `g:ctrlp_match_window_bottom` to `0`.\n. Use `g:ctrlp_mruf_exclude` instead. `g:ctrlp_custom_ignore` and `wildignore` are only for ignoring files from `globpath()`. You should also check out `:help ctrlp-options`.\n\nBTW, instead of forcing ctrlp to ignore .vimrc, I'd investigate to find out why the file was always the most recent file because that's not normal. On ctrlp's side, a file's only added to the MRU list if it's opened as a buffer.\n. Looks like you're using this config line which is for Windows:\n\n``` vim\nlet g:ctrlp_user_command = 'dir %s /-n /b /s /a-d'\n```\n\nJust switch to the one for Linux. But unless you want a different list, or want to do something special with it, you don't need to use `g:ctrlp_user_command` to get the files.\n\nAlso, check out `:help ctrlp.txt`, there are a lot more stuff and more details than in the readme.\n. It's because a lot of the times the tag file can be pretty big, reformatting the tag lines will take a long time. So I want to keep it simple and fast. There's no other reason.\n. Good idea, but aside from the highlighting, there's still the problem with the matching. Matching a filename including path is different from matching a tag or a line entry.\n\nYour proof works because coincidently the tag's and the line's lines have very similar formats. But if you throw files or buffers into the mix then filename-only mode won't work, and the entire tag line (the tagname and the extra infos) will be included when matching.\n\nOriginally, I also wanted the mixed mode to work with a command like this:\n\n```\nCtrlPMixed --mode=files,buffers,tags,...\n```\n\nBut I didn't and still don't think it's worth making, at least until I can figure out how to solve all the major problems.\n. Actually, ctrlp is more like a search interface than a command mode auto completion system, so I'm not sure it fits what you're looking for. But basically, it uses the user input as a search string on a predefined list of items and then returns the results.\n\nThe buffer is a just normal buffer with a few settings like `buftype=nofile`, `nobuflisted`... It's not a preview nor a quickfix buffer/window. There's no cmap because the mappings are Normal mode mappings, which you can find in the Mappings section.\n\nBut in case you want to create a simplified version of ctrlp so that you can (basically) have an extension without the core, you might want to read the Mappings section for getting user input, the MatchedItems section for searching, and the BuildPrompt section for displaying everything in `autoload/ctrlp.vim`.\n. There are already mappings to open entries in vertical or horizontal splits. Please read `:help ctrlp-mappings`.\n. You probably hit the max_files limit which is set to 10000 files. Try increasing it with the `g:ctrlp_max_files` option.\n. There's no other condition. So naturally files that are in deeper directories have higher chance of being excluded.\n. Press `<F5>` when ctrlp's open or use the commands (see `:help ctrlp-commands`).\n. Merged. Thank you!\n. Duplicate of #280. You can start with the .vimrc snippet in that issue.\n. Can you help me test to see if read/write when receiving `SIGTERM` is actually working for you?\n\nFrom outside Vim, create a text file `/home/user/test/readwrite.txt` containing only one line: `read`. Then put this into your .vimrc and restart Vim:\n\n``` vim\nlet g:rwtestfile = '/home/user/test/readwrite.txt'\nau VimLeavePre * cal writefile(readfile(g:rwtestfile) + ['write'], g:rwtestfile)\n```\n\nAfter you run `shutdown` or kill the gVim process, check if the `readwrite.txt` file has this:\n\n```\nread\nwrite\n```\n\nBoth this and the MRU saving work fine for me with a `kill pID`, which also sends `SIGTERM`.\n. That's interesting. Thank you! I also just tried `shutdown`, and apparently the `readwrite.txt` file above isn't changed (`write` isn't appended) when using `shutdown`. So in any case, I'll need to find a workaround for this, possibly by saving the MRU list more frequently instead of only when exiting Vim.\n. I've added a new option: `g:ctrlp_mruf_save_on_update`, defaults to `1`. If you find any problem with it, let me know.\n\nI don't like it but there's really no other way. Saving on exit doesn't work when using `shutdown`, even when the autocmd consists of only `readfile()` and `writefile()`. Also, saving on every update is what mru.vim and others do (e.g. fuzzyfinder), ctrlp also did it by default in the beginning. It's not out of the norm.\n. I've made some new changes. Now saving only happens when a new entry is added. Changing of order won't be saved until exit or when another entry is added. This will be just enough to prevent completely losing the new entries in case Vim isn't closed normally.\n\nAlso, this was before adding the option, but in your test script, if I add another `sleep` instance after `killall` in the inner loop, then in both cases all of the 5 files are always shown.\n. Thank you! But this feature already exists. You can remove non-existing entries by pressing `<F5>` in MRU mode.\n. Merged. Thanks @mattn!\n. Yes, the window isn't supposed to be scrollable except for a few extensions. The number of results is limited at the max height. This is intended for performance reason.\n. Fixed. Sorry about that!\n. Thank you! But you can already do this with the `g:ctrlp_buftag_types` option. No need to change the code to get it.\n. Fixed. Thank you for reporting! This bug had been there pretty much since the beginning I think. It happened when `:cd` into an empty directory then open ctrlp and use `<c-y>` to create a new file (or some sub dirs and a new file).\n. There's already an option to keep the cache:\n\n``` vim\nlet g:ctrlp_clear_cache_on_exit = 0\n```\n. Just make sure the options are actually set. You can run `:echo g:ctrlp_clear_cache_on_exit` to check. The deletion happens at only one place, and it's just a simple `if` check for `g:ctrlp_clear_cache_on_exit` before running the clearing function.\n\nIn any case, try starting Vim in a clean environment like the following and see if it changes anything. From the console, run `vim --noplugin -u path/to/a/simple/.vimrc` and use this as the content of the .vimrc:\n\n``` vim\nset nocp\nset runtimepath^=~/.vim/bundle/ctrlp.vim\nruntime! plugin/ctrlp.vim\n\nlet g:ctrlp_use_caching = 1\nlet g:ctrlp_clear_cache_on_exit = 0\n```\n\nChange the runtimepath location accordingly.\n. Duplicate of #313. But good idea about adding an indicator for hitting max_files. I'll see what I can do.\n. Update to the latest version on github, currently 1.78. This has already been fixed.\n. There's an option for this. What you want is the second example at `:help g:ctrlp_abbrev`. Update the plugin before checking it out since it's a fairly new option.\n. That will replace all spaces with `.*`. You won't want that if you use special inputs like `@cd path/`. If you use those, start with the pattern from the help: `'\\(^@.\\+\\|\\\\\\@<!:.\\+\\)\\@<! '`.\n. Yes, it's intended, or was intended. If the option does take effect in Mixed mode then in most cases, it'll effectively remove all MRU files in the mix. But now that I see some people might actually want that, I think I'll enable it.\n. Files is the default mode because it's what the majority of people use ctrlp for. If Files isn't the default you want, you can easily change it with the `g:ctrlp_cmd` option:\n\n``` vim\nlet g:ctrlp_cmd = 'CtrlPMRU'\n```\n. The last mode isn't saved cross session. It's only stored in a script local variable. There isn't a way to save then initialize it yourself. But you can use something like this to start LastMode with something other than Files:\n\n``` vim\nlet g:ctrlp_cmd = 'call CallCtrlP()'\n\nfunc! CallCtrlP()\n    if exists('s:called_ctrlp')\n        CtrlPLastMode\n    else\n        let s:called_ctrlp = 1\n        CtrlPMRU\n    endif\nendfunc\n```\n. Which closed issue do you refer to? But this slowness is typically because ctrlp can't handle the large file list. This is slightly more apparent on Windows. There's really nothing I can do about it other than to tell you to try limiting the number of files with the `g:ctrlp_max_files` option, and updating ctrlp and gVim.\n. Have you read them or just put up everything you could find after I asked?\n\n#46 wasn't a bug. It was a delay when starting up caused by the user having similar mappings.\n#55 I even asked the person in another issue but he never provided the file that caused it.\n#116 was fixed. It was `fnamemodify()` being slow, the same reason I've always tried to avoid using this function.\n#331 is this issue.\n\nAlso, I want to add that I see every issue as something that I need to deal with, to be done. I will close and ignore the ones that I deem not worth following up, they may or may not be actual fixable bugs. But if there's a valid bug or a common problem I can identify, I always try to fix it or at least provide a solution for it as soon as I see the report.\n. CtrlP has a documentation which you can access by running `:help ctrlp.txt`. All the available options are documented in there.\n. You can use the `CtrlPLinePre` highlight group to change the color of the `>` marker.\n\nAlso, check out `:help ctrlp-customization` for the available hl groups.\n. An index from the results is worthless in term of identifying a string. There also isn't any way to get the actual index of the string in the initial list since the results are usually sorted. I think your best bet would be to add an identifier to the strings like this:\n\n```\nfoo\n  bar1 (1)\nbar\n  bar1 (2)\n  baz\n```\n. I suppose it is. You can just put them in a `s:syntax()` function in the extension. Also, use `'type': 'tabe'` for the `s:foo_var` variable, then add the identifiers like this:\n\n```\nbar1<tab><conceal_id_begin_char>1</conceal_id_end_char>\n```\n. Yes, some of the sorting functions are disabled for other types. So use `'type': 'path'` and make sure the conceal chars are unique then, maybe something like `+++ 1 +++`.\n. Well, it does match if you use `'type': 'path'` because this tells ctrlp to treat the entries as directories and files. So you'll want to make sure the conceal_id chars are unique and unlikely to be searched for.\n. Ok, I'm going to close this. I won't be adding it.\n. I can't reproduce it. Can you try reproducing it in a clean environment? If not then can you narrow it down and find out what might be interfering?\n. Can you rephrase that? Not sure if I understand what you mean.\n\nAlso, this would have been a major problem for a lot of people if it was easy to reproduce. I think something else in your Vim setup is probably interfering. It might be an autocmd, or something custom.\n. It's because of the `'exit': 'ctrlp#exit()'` key:value pair in `s:git_files_var`. You don't need that if you use the builtin `ctrlp#acceptfile()`.\n. Looks like you're using an older `plugin/ctrlp.vim` file with a newer `autoload/ctrlp/` directory. This might happen if you have multiple installations of ctrlp in different places.\n\nSo first remove anything you can find, then follow [this guide](http://kien.github.com/ctrlp.vim/#installation) to make a clean install.\n. OK, I'm going to close this. `g:ctrlp_buftags` and `CtrlPBufTag` are defined in the open and in the same file as the `CtrlP` command. The only way they don't exist while `CtrlP` does is if you're somehow using a really old `plugin/ctrlp.vim` file from before BuffterTag mode was added.\n. It's just the standard cursorline, you can change it by changing the CursorLine highlight group of your colorscheme.\n. Check out the `g:ctrlp_buffer_func` option then. You can put the `:highlight` commands in a pair of functions, and call one on `enter` and another on `exit`.\n. See `:help g:ctrlp_prompt_mappings`. Also, check out `:help ctrlp-options` and `:help ctrlp-mappings` while you're at it.\n. Thanks! But tag.vim doesn't have it because the `:tag`, `:tjump`... commands don't always jump to the tag's position (because of an outdated tags file, for example). I suggest you create a mapping for `zvzz`, like `,z`, which can be used elsewhere.\n. If `:tag` fails, running `zvzz` blindly will open the folds and change the view of the current buffer.\n. Vim has the `'foldopen'` option, but it only applies when the command is typed directly in the command line. I'll see if using `feedkeys()` can get around this.\n. Done. Let me know if you find any problem with this.\n. The reason for using `feedkeys()` is so that `'foldopen'` will take effect automatically. There's nothing for `zz`. If `:tag` fails, running `zz` will still change the view of the current buffer regardless. So no, it's not safe. You'll just have to type `zz` manually.\n. Actually no, unless in a `:try` `:catch`, Vim will continue with the next command, in this case with `zz` whether it's in `feedkeys()` or not.\n. The problem with that is without `:catch`, the commands after `:endtry` won't be executed. I also don't like using `:try` with commands that involve opening of files because `:try` can stop an autocmd from firing if an error happens before it.\n. Can you describe it a bit more? What exactly are you trying to do for your plugin? You want to create some mappings with `<leader>`?\n. So you want to be able to literally type `<leader>[c]`, for example, and it would take you to a file with `c` highlighted without having to press `<cr>`?\n. OK, so that'd be `searchstring<leader>c` or `<leader>c` to select an entry. That'd be very different but would it really be much better than say `searchstring[c]<cr>`? Or just `[c]<cr>`? Since you'd want the hotkeys to be unique anyway.\n. Still, it seems like a big change for speeding up a small task, that is selecting an entry already in the match window. You can also already press `<s-tab>` and type the first letter of the entries to jump to them, or just type a few more characters to narrow down the results. So I don't think I'm going to add support for this feature.\n\nTo simulate a keypress in general, try `feedkeys()` instead of `normal!`.\n. Oh I see. I just always consider adding things so that people don't have to modify the core to get what they want.\n. There's no option to hide specific buffers. If the netrw buffer shows up when you run `:ls` (it doesn't for me) and its `buftype` is empty, then `CtrlPBuffer` will list it.\n\nIn general, you can force a buffer from showing up by setting its `'buflisted'` option to 0.\n. Then you can get that resultant file list and feed it to ctrlp through an extension. It should be simple. But I don't think I'm going to add such an extension to ctrlp. It isn't really that useful since a file list from grep is usually quite short.\n. Have you typed the name of a file you want to create into the prompt first?\n\nJust in case, check out `:help ctrlp-input-formats`, section `f)` for the details on how to use `<c-y>`.\n. `<c-y>` basically just does a `:edit newfile` for you. If `:edit` does throw an error, you'll see it.\n. Make sure you update to HEAD of `master`. There used to be stricter rules of when ctrlp reuses the current window.\n\nWith the current version, ctrlp will still open a new split (when using the default `<cr>`) if the current buffer is either having a non-empty `buftype`, is help or quickfix.\n\nYou can add exceptions to this with the `g:ctrlp_reuse_window` option.\n. Usually `SYSTEM\\Rank.cpp` will be at the bottom (or at the top, if you've changed the default listing order), unless the other found files are much newer since this matters more in MRU mode. And regexp mode simply eliminates all the other files that aren't `Rank.cpp`.\n\nAlso, in case it isn't obvious enough, by default ctrlp shows results from best to worst from bottom to top (of the match window) and highlights the best one at the bottom.\n\nBut in any case, I won't be making any more changes to the sorting algo, at least in the foreseeable future. So that's as good as it gets.\n. You can use `<tab>` to autocomplete the directory names under the cwd. Try it and see if it's what you're looking for.\n\nFor example, type `@cd subd<tab>` where `subd` is from `subdirectory`.\n. Actually, ctrlp isn't a word-completion plugin, it's a finder. I'll have to recreate the e-like or cd-like completion inside the prompt in some way. The basic completion with `<tab>` is meant for directories under the cwd, which is ctrlp's main concern.\n\nWith that said, I'll still look into implementing this and will add it if it's simple enough. But if it turns out to be more trouble than it's worth, then I'll probably drop it.\n\nFor the time being, you can do a `@cd ~`, `@cd $HOME`, or `@cd /` before doing the `@cd subd<tab>`.\n. Well, the difficult part here is ctrlp operates in Normal mode. The prompt isn't actually the command line nor it's in Insert mode where word-completion is readily available.\n. You just need to clear the old file cache. Check the document (or the readme) for the mapping and commands. If you like, you can also disable caching permanently or partially with the `g:ctrlp_use_caching` option.\n. It's limited that way so that searching doesn't become too slow too quickly. You can search the old issues if you want to find out more about this.\n\nIf trying different search strings bothers you too much, you can either set a bigger `g:ctrlp_max_height` which may help, or use `g:ctrlp_match_func` to setup a custom matching function.\n. The highlighting of the selected line is just the default cursorline. If Vim's cursorline is somehow not visible with your colorscheme/setup then there's nothing I can do to change that. It's entirely up to you to configure it.\n. The initial order doesn't make much difference since the results are sorted and mixed up when you search anyway. There's no way to tell whether a result is file, buffer or mru unless we do a check for each which can be expensive. Also, the current initial order isn't always file + buffer + mru, it's just shorter list goes first.\n. Well, mru usually already contains buffers, exceptions like unsaved buffers are rare. So a mixed mode for only buffer + mru wouldn't be much different from mru mode.\n. What do you mean by \"all have working directory as 'src'\"? What does `:pwd` return after you `:cd` into those repos? \n\nThe name of the cache file is based on the return value of `getcwd()`, so it should already be the full path. Your patch also doesn't actually change anything since `dir` is always `getcwd()` (a case where `a:0 == 2` hasn't been used anywhere in ctrlp).\n. I believe this is an old issue of vim-powerline on Windows, the report used to be at Lokaltog/vim-powerline#161.\n\nThe vim-powerline issue tracker has been disabled and I don't remember the exact conditions, but it had something to do with the highlighting or folding in the current buffer, then simply echoing/redrawing would trigger error messages. The BuildPrompt() function just inevitably trips on the errors although none of the conditions was originated from ctrlp (so they couldn't be worked around).\n\nIt might help if you manage to fix that broken character in the font you're using that appears on the statuslines.\n. Makes me kind of wonder if it's a good idea to use `:silent!` when calling BuildPrompt() again to suppress the error msgs (harmless in this case), but that'll also make it more difficult to track down actual bugs in the future.\n. Vim has those options, `splitright` and `splitbelow`.\n. How often does it happen? When do you usually notice it after closing/starting Vim? Do you change your user account (thus change the home dir)? I'm going to need at least something.\n\nCtrlP itself only ever clear MRU if you press `<F7>` while in MRU mode, and there's a confirmation dialog. The caching has been unchanged for the last year and there hasn't been any related issue. You should check for external sources that can delete those cache files, starting with your Vim config.\n. Closing due to lack of information, plus I don't see any conceivable way ctrlp can mistakenly delete the cache file.\n. That's strange that it didn't happen in your last time exiting Vim. Can you post the output of `:ver` and any setting you have for ctrlp? Also, make sure your ctrlp bundle is up to date.\n\nI don't notice anything on the list, and ctrlp recreates the folders whenever something needs to be saved. Currently, this happens when pressing `<F5>` in ctrlp or exiting Vim.\n. That's normal. By default, any file that isn't a log file or cache.txt will be deleted upon exiting Vim. And `.DS_Store` is hidden.\n\nIf this starts happening again, you can try setting `g:ctrlp_clear_cache_on_exit` to 0, the clearing function simply won't be called.\n. @mMontu You can still avoid requesting cache updates by hand by having `let g:ctrlp_use_caching = 0`.\n\nBut in case you want to investigate at code-level, the main (and only) deletion function in ctrlp is `ctrlp#clra()`. It's called when exiting Vim if the clear_cache_on_exit option is set, running `:CtrlPClearAllCaches` calls it directly.\n. @whimdump I've pushed a change a couple of months ago that should prevent this kind of problem for good. Are you using HEAD of master of the ctrlp repo on github?\n. This can't be done with Vimscript because it's single threaded. It's not possible to do the loading while running something else to intercept the keystrokes. I'm unsure what we see when scanning the first time is either provided by Vim or by the OS, but it can't be replicated with scripting.\n. Yes, see `:help g:ctrlp_mruf_exclude`. You can use a pattern like this `\\v\\.git/(COMMIT_EDITMSG|index)`.\n. These are left out because I want to list only the more unique mappings that people don't look for if they don't know the features exist.\n. It's because `<c-s>` and `<c-q>` are used for control flow in terminal. They can't be mapped. If you really want to use `<c-s>`, you'll have to configure your terminal to pass it to Vim. Otherwise, just use `<c-x>` everywhere.\n. Is there any reason for the `s:MatchItPy()` function to be in `autoload/ctrlp.vim`? You can just as well define it as a global function and put it elsewhere. This is basically what the `g:ctrlp_match_func` option is there for, it's so that you don't have to make change to the core.\n. Yes, you can use `ctrlp#call(name[, args])` to call a function in the scope of `autoload/ctrlp.vim`.\n. If you're using `g:ctrlp_user_command` with a version control listing command then you'll have to commit the new files first or use a command that lists untracked files. If you aren't using this option, then make sure the new files aren't in an ignore list or are hidden files. Check `wildignore` and `g:ctrlp_custom_ignore` if you have them.\n\nNext time, if you think something is a bug, please provide details like steps to reproduce and your configurations. Don't use the tracker like a support forum when you run into a problem.\n. Don't change the help file, that does nothing. You're supposed to put the `let g:ctrlp_max_height = 40` line into your `.vimrc` file. It's the same file that you put the line to load up pathogen.\n. Just use anything that's present in the paths you want to be ignored but not in the others. Use the whole paths if need be.\n. The problem with staying pure Vimscript and in a single Vim instance is that there's no way to avoid the waiting part, so auto-updating with CursorHold (forcing a wait) is out of the question. The modification time of a directory also isn't reliable for detecting changes.\n\nBut to minimize or eliminate manual updates, you can use the `g:ctrlp_use_caching` option. For example, use `let g:ctrlp_use_caching = 200` to disable caching for directories that have fewer than 200 files.\n. You can remap the keys. See `:help g:ctrlp_prompt_mappings`.\n. If you don't select anything, you can close the ctrlp window by pressing either `<esc>` or `<c-c>`. If you want to close it from a script, `ctrlp#exit()` already calls `s:Close()` so there's no point for another function.\n. I see. Can you checkout commit 675faa7 and see if it still works for you? If it does work, then look into the change in 6c49f2a and let me know if you figure out something (try removing the bufnr or bufname or both) that works for you.\n\nThanks!\n. It's so that the closing function is called only once and it's through a `BufLeave` autocmd. It looks like this autocmd is never triggered for you. You can try to track down the cause, but if it's too much trouble, use this for now:\n\n``` vim\nlet g:ctrlp_prompt_mappings = { 'Close()': ['<esc>', '<c-c>'] }\n```\n. Duplicate of #368.\n. You probably have a new repo dir, like `.git`, in your home dir. Try `let g:ctrlp_working_path_mode = 0`, this will tell ctrlp to not try to find a root and just use the cwd.\n. It isn't there because I want to keep the readme brief, and there are a lot more at the suggested `:h ctrlp-mappings`.\n. No, both should work and they do for me. Where's the `/tmp` directory in relative to the directory you're indexing? Do you change any other option? What ctrlp version are you using? If you can consistently reproduce this, let me know how.\n. Oh I see. That's a known issue. It's because dirs and files are filtered separately with each pattern. Can't really avoid this unless I use the `dir` pattern to filter files as well, but this will make having different types redundant.\n\nSo it may seem inconsistent and odd when you notice it, but I think I'll just leave it that way. At least people will still have the option to ignore only dirs.\n\nAs for converting custom_ignore to `wildignore`, you can already use both, and for custom_ignore you can write complex regex while you can't for `wildignore`. A conversion will likely break it for a lot of people.\n. This isn't exactly a new idea, but understandably, everyone wants it. The problem is that there's no background thread in Vim and Vimscript. I'll have to either use a different language or start a new Vim just for the indexing.\n. That's partly by design. The height is to help speeding up the indexing and the searching. As a result, it becomes more difficult finding files further down the file list. This is usually fine since files further down usually have long paths and need more specific search patterns anyway. But with `git ls-files`, the files under `config` are returned after all the subdirs, so the `config/routes.php` is being placed closer to the bottom.\n\nThat's where you have your problem. I won't be making any change to the internal indexing and searching, so this won't ever really be fixed. But since you're already using `g:ctrlp_user_command`, you might want to look into using `g:ctrlp_match_func` as well.\n. I'm going to need a little more details. Which of the ignored files still show up? Can you post your full vimrc? Do you use `g:ctrlp_user_command`? What ctrlp version are you using? Post a step by step from when you save these options to when you open ctrlp. Also, try running `:CtrlPClearAllCaches` before opening ctrlp and see if it changes anything.\n. The OS shouldn't matter. So first, make sure you're actually rerunning ctrlp for the same directory, then find and check if any new cache file is written. The cache location is set by `g:ctrlp_cache_dir`, make sure this location is writable from Vim.\n\nIn any case, please post your full vim config and a step by step from when you open ctrlp the first time to the second time, and the location where you open it.\n. So it's the default value which is `$HOME.'/.cache/ctrlp'` on both. Check for the cache there.\n. Just press `<cr>`, or whatever key you have set to `AcceptSelection(\"e\")` with the `g:ctrlp_prompt_mappings` option. Provided that you're using a recent version, ctrlp won't avoid the current window unless the buffer in it has a non-empty `buftype`.\n\nThe `<c-o>` then `r` combo which works for you, does the same things that `<cr>` by default does.\n. OK, it looks like I might be too quick to assume you just didn't try `<cr>` but used `<c-x>`, or `<c-v>`, etc. instead (kind of made sense to me since you said `<c-o>r` worked). I took the liberty to look into your vimrc and found this line:\n\n``` vim\nlet g:ctrlp_split_window = 1 \" <CR> = New Tab\n```\n\nSo there you have it. It's an old option that allows you to change how `<cr>` opens a file. Either comment it out, switch to `g:ctrlp_prompt_mappings` completely, or keep using `<c-o>r`.\n\nAnyway, if you've been aware of the config line and actually didn't try `<cr>`, then my apologies for the redundant post.\n. You can do this with the `g:ctrlp_buftag_types` option. There's no need to make changes to the code.\n. The other ctrlp mappings, specifically the `<c-...>` mappings, do they work? Can I take a look at your full Vim configuration? What happens if you open ctrlp immediately after starting up Vim? What happens if you comment out your mappings? What happens if you start Vim in minimal configuration with only ctrlp?\n. Having a higher priority only means that the marker is closer to the beginning of the List. So you can solve your problem with git and perforce by placing `.git` before `.p4config` like the following, no need to change the code:\n\n``` vim\nlet g:ctrlp_root_markers = ['.git', '.p4config']\n```\n. It's not that simple. Using the formatted (i.e. the non-raw) list will leave behind duplicate entries which are MRU files in the cwd.\n. I've applied the option to the raw MRU list intead. Thank you for looking into this, anyhow!\n. This should be fixed now. Thank you for reporting!\n. The prompt and the match window are handled completely different in ctrlp. For one thing, you type everything in Normal mode instead of in Insert mode. It'll require a massive rewrite to allow for something like this, so no.\n. Either remove `--exclude-standard` or don't use `g:ctrlp_user_command` and hide unwanted files with the ignore options. But if you still want to use user_command, and removing `--exclude-standard` doesn't exactly do what you want, then read `git ls-files --help` and find out yourself whether or not you can get it to do what you want.\n\nOnce you use `g:ctrlp_user_command`, it's up to you to feed ctrlp the file list.\n. There's the `g:ctrlp_default_input` option with which you can create a command like this:\n\n``` vim\ncom! -n=? CtrlPDefInput let g:ctrlp_default_input = <q-args> | CtrlP\n```\n\nThen just use `:CtrlPDefInput profile`.\n\nIt's an option because allowing `:CtrlP search-string` while already having `:CtrlP path/` can complicate things quite a bit.\n. Other than in a few modes (Mixed, RTScript), I don't see how anything in ctrlp can create duplicates. All the internal actions are either removing or sorting.\n\nThe `git ls-files -moc` command you use, however, does create duplicates. It lists both modified files and cached files. You can test this by modifying a tracked file, then before adding the changes, run `git ls-files -mc`, you'll see the file showing up twice.\n. `git ls-files -moc | uniq` can still list duplicated files. Try it with a small repo so you can spot them more easily.\n. Well, `uniq` only removes successive identical lines, so it'll fail to remove duplicates if the lines simply aren't next to each other. But that aside, you can avoid the dupes by just not including `-m`, `-oc` already shows all the files, modified or not.\n. It's firstly because you've switched `<cr>` and `<c-t>`, and secondly because switch_buffer only applies for modes that handle files or buffers directly (the idea is from Vim's `switchbuf`).\n\nApplying this option to other modes will really complicate things. In Tag mode, for example, the commands for opening are just the `:tag` series of commands. I'd have to create something to replace them in order to apply switch_buffer.\n\nIf you only call the modes directly, you can probably use something like this:\n\n``` vim\nfunc! MyPrtMappings()\n    let g:ctrlp_prompt_mappings = {\n        \\ 'AcceptSelection(\"e\")': ['<c-t>'],\n        \\ 'AcceptSelection(\"t\")': ['<cr>', '<2-LeftMouse>'],\n        \\ }\nendfunc\n\nfunc! MyCtrlPTag()\n    let g:ctrlp_prompt_mappings = {\n        \\ 'AcceptSelection(\"e\")': ['<cr>', '<2-LeftMouse>'],\n        \\ 'AcceptSelection(\"t\")': ['<c-t>'],\n        \\ }\n    CtrlPTag\nendfunc\n\nlet g:ctrlp_buffer_func = { 'exit': 'MyPrtMappings' }\n\ncom! MyCtrlPTag call MyCtrlPTag()\n```\n\nThen use `:MyCtrlPTag` instead of `:CtrlPTag`.\n. Is there any reason to use `git ls-tree -r HEAD | grep -v -e \"^\\d\\+\\scommit\" | cut -f 2` instead of `git ls-tree --name-only -r HEAD`, or just `git ls-files`?\n\nTo list files not yet committed with `git ls-files` you can use `git ls-files . -co --exclude-standard`.\n\nBut to call the fallback command directly, use this instead:\n\n``` vim\ncom! -n=? -com=dir MyCtrlPFallback\n    \\ cal ctrlp#init(0, { 'dir': <q-args>, 'opts': { 'user_command': 'find %s -type f' } })\n```\n. Yes, ctrlp has some default ignore rules. If you want it to ignore something specific, you can use `wildignore` or `g:ctrlp_custom_ignore` or both.\n. ctrlp supports user-created extensions, so anyone knowing a bit of Vimscript will be able to write this. Take a look at the [extensions](//github.com/kien/ctrlp.vim/tree/extensions) branch and also `:help ctrlp-extensions`.\n. You can mark the bookmarks with `<c-z>` then press `<F7>` to delete them. This is mentioned twice in the docs, once in the `ctrlp-mappings` section, and once in the `ctrlp-extensions` section.\n. It may be that the cache location isn't writable in your new setup. By default, it's set at `$HOME/.cache/ctrlp`, you may have changed it with the `g:ctrlp_cache_dir` option. In either case, check this location and make sure you're the owner and have read/write permission to it.\n. What does `:echo $XDG_CACHE_HOME` return for you? There's no hardcoded base dir, but `$XDG_CACHE_HOME` is the other default and it's used if it exists.\n. Vim's `/pattern` has always done the job just fine for me. I'm not sure if a slight improvement will be worth adding this.\n. Neither. I simply want to avoid it being redundant. I'll look into this regardless.\n. @dusans `expand(\"%\")` is a function call. So the correct syntax is `:execute \"CtrlPLine \".expand(\"%\")`. But in this case, you can just use `:CtrlPLine %`.\n. You have to read that description in the context of the whole option. It means ctrlp's local directory is set to the directory of the current file, unless the current file is somewhere inside the current working directory.\n\nSo which parts do you think are difficult to understand? What do you suggest to make the description clearer?\n. I'm going to leave it as-is. It's not that difficult to understand once you know what each term means by reading the other settings. You need to do that anyway to know what `c` does, for example.\n. Yes, \"its local working directory\" means ctrlp has its own cwd. This is mentioned right at the top. And \"outside of ctrlp\" doesn't mean \"outside of vim\", it means exactly \"outside of ctrlp\". So the cwd used here is the non-ctrlp cwd.\n. I'd love to. I just honestly don't see how I can make this part any clearer. As in I don't know how. And since no one else has complaint in the past one year and a half, I'm inclined to believe that the majority of people understand it just fine.\n. My English isn't very good. If anyone cares enough to make any part of the help better, no matter how little, please go ahead and do so. Pull requests are always most welcome.\n. This will create a `<c-@>` mapping which you can use to toggle `mruf_relative` while in the prompt:\n\n``` vim\nlet g:ctrlp_buffer_func = {\n    \\ 'enter': 'PrtEnFunc',\n    \\ }\n\nfunc! PrtEnFunc()\n    nnoremap <buffer> <silent> <c-@> :call ToggleMRURelative()<cr>\nendfunc\n\nfunc! ToggleMRURelative()\n    let g:ctrlp_mruf_relative = !g:ctrlp_mruf_relative\n    call ctrlp#call('s:Reset', {})\n    call ctrlp#call('s:PrtClearCache')\nendfunc\n```\n\nI'm still undecided about adding this in, and the most I'll probably add is the `ToggleMRURelative` function.\n. I've already made the change, just haven't merged it. Also, that snippet is supposed to go into .vimrc, so you can choose the key and use it in any case.\n. Crashes like that are usually caused by problems in the environment or bugs in Vim itself. Your best bet is to keep updating Vim and avoid using this setup. `:Ggrep` is also a third party command. Plus, see tpope/vim-fugitive#306.\n. That already exists. You can use `;` in filename mode to filter the directories in front of the filename.\n. Oh I'm sorry, what you're proposing is a bit different. It's indeed nice to have. I'll look into improving the existing `;`.\n. > maybe we can mark this somewhere in the help file.\n\nIt's mentioned in the help file, actually, under the `ctrlp-input-formats` section.\n. They are actually pretty much self-explanatory and extremely obvious once you do something that changes them. You don't really need to care what they indicate from the start (or at all) so I don't think documentation is necessary.\n. Yes, that's correct. The \"ring\" rotates when you use `<c-f>` or `<c-b>`. And `prt` changes when you use `<s-tab>`. It might be nice to have all these explained throughout but it's really not necessary. You don't need to understand them to use anything, and your first guesses are most probably correct.\n. Nothing unless you know what you're using `<s-tab>` for.\n. I can see that there's always someone who finds it confusing, at least at first.\n\nBut I also don't think it's worth documented. You don't need to understand the statusline to do anything. Plus the help is already long as it is, people barely read it.\n\n@jsit they aren't tabs because there are more than 3 extensions. And you'll see what `<->` is once you use the feature that changes it.\n\n> Is there an option to define the separator characters? I looked but didn't see one\n\nWell, you can create your own statusline with `g:ctrlp_status_func`. Change everything if you feel like doing so.\n. @lsiden using an option (g:ctrlp_status_func) to customize the statusline is a bit different from forking and making change directly to the code. The former is what I am saying and mean.\n\nWhy do you think there's an option in the first place? Why don't I just not add it and tell everyone to fork the project, like you're saying? The option is there precisely because I figured some people would want to change the statusline, that whatever I chose wouldn't satisfy everyone.\n\n@jsit is for aesthetic good enough a reason? Because that was the reason the `<prev>={current}=<next>` was chosen.\n. @lsiden I don't think I'm being sarcastic(?). I always try to be matter of fact with my responses. I don't speak English natively, nor as a secondary language, so I'm sorry if somehow I gave off the wrong tone.\n. Not exactly what this option is for, but you can use `g:ctrlp_abbrev` to make hyphens be read as underscores:\n\n``` vim\nlet g:ctrlp_abbrev = {\n    \\ 'abbrevs': [\n        \\ {\n        \\ 'pattern': '-',\n        \\ 'expanded': '_',\n        \\ 'mode': 'pfrz',\n        \\ },\n        \\ ]\n    \\ }\n```\n\nCheck the docs if you want to know more about this option.\n. Have you looked into the options? What do you think of `g:ctrlp_use_caching` and `g:ctrlp_clear_cache_on_exit`?\n. Ok, closing. It seems you primarily just want to keep the cache file after exiting Vim. You can already tell ctrlp to do that, and you can also delete/update the cache whenever you like from both outside and inside of ctrlp.\n. No, it's not possible with ctrlp, but you can tell Vim to delete (or delist) a buffer when it's hidden:\n\n``` vim\nau BufRead * setl bufhidden=delete\n```\n\nThose buffers will then only show up when you run `:ls!`.\n\nOtherwise, what do you think about tagging the active buffers (probably with an `a` like `:ls` does)?\n. You can remove all MRU files outside the project with `g:ctrlp_mruf_relative`. Mixed mode will then effectively only show files and buffers.\n. Well, there are good, full featured plugins for managing buffers, so why build it into ctrlp? But people keep requesting this from time to time, I think I may just add it. There's also a .vimrc snippet which you can use right now, in #280.\n. Mixed mode basically loads all three File, Buffer, and MRU modes and the mixing also takes some more time. So naturally, it's slower than each of the modes.\n\nAnyway, buffer deletion may take a while since there are a few things I want to do first. I've also been a bit busy lately. If you don't want to wait, you can just create a mapping to delete a buffer in Buffer mode. All you have to do is grabbing the buffer name from the current line.\n. You can mark multiple files with `<c-z>`. So instead of opening each file, mark them both then press `<c-v>`.\n\nOtherwise, I think it's best to do this outside of ctrlp. Try creating an autocmd or a mapping that opens the spec file of the current file in a new vsplit.\n. No, it'd require reformatting the tag lines or at least the results. Tags files are sometimes quite large so the matching is slow already. I don't really want to bog it down by unnecessary reformatting.\n. This isn't a problem with CamelCase. It's because of ctrlp limiting the number of matches (which is exactly the max_height). This is something I can't fix without further slowing down the internal matching.\n\nSo if it annoys you too much, you should look into using `g:ctrlp_match_func`. Otherwise, try toggling regex or filename mode when the file you're looking for doesn't appear.\n. Yes, and there are already a few scripts/extensions written for match_func by other people. [burke/matcher](//github.com/burke/matcher) in C and at least 2 others in Python if I remember correctly.\n. Those don't mean much without the circumstances of how you get them or at least the Line numbers. I also can't reproduce it. So if it happens consistently, please narrow it down and provide steps to reproduce.\n. That's because you don't escape `~` in [the pattern you use](https://github.com/rainytooo/vimrc/blob/84c97089c3f04c06c9ae247038bc76525e0be2b7/vincent_base_vimrc#L389) for ctrlp_custom_ignore. In Vim, when used in a pattern, `~` matches the last given substitute string.\n. Using ctrlp just for that is kind of inefficient, but if you insist, try something like this:\n\n``` vim\nlet g:ctrlp_regexp = 1\nlet g:ctrlp_by_filename = 1\n\ncom! A cal feedkeys(\":CtrlP .\\<cr>\".expand('%:t:r').\"\\.\".( expand('%:e') == 'h' ? 'cc' : 'h' ).\"\\<cr>\", \"t\")\n```\n. It really won't be simple. Everything is centered around the prompt since it was the first piece that I started writing ctrlp on. And what you're looking for is basically a way to bypass this prompt.\n\nAnyway, how about saving the two variables (if they exist) and then reset them to their previous values after the feedkeys call? You can put all this into a function and call it with `:A` instead of calling feedkeys.\n. See `:h laststatus`.\n. You can use `g:ctrlp_buffer_func` to set `laststatus` locally to the ctrlp buffer. Just set it to 0 when entering and back to your default when exiting.\n. Did you use something like this?\n\n``` vim\nlet g:ctrlp_buffer_func = {\n    \\ 'enter': 'Function_Name_1',\n    \\ 'exit':  'Function_Name_2',\n    \\ }\n\nfunc! Function_Name_1()\n    set laststatus=0\nendfunc\n\nfunc! Function_Name_2()\n    set laststatus=2\nendfunc\n```\n. Then there's no other way. `laststatus` is the only option.\n. A few problems I can see now:\n1. Migrating/Invalidating the old cache files after changing the setting.\n2. Appending the file's path when putting the parts together. E.g. `subdir/file` -> `path/to/subdir/file`.\n. You'll need to have ctags installed and then set the location of the binary with `g:ctrlp_buftag_ctags_bin`. After that, you can run `:CtrlPBufTag` from Vim's command line to start ctrlp in buffer-tag mode. If you don't know how to do these things, just search around the web and do some reading until you do.\n. No, it's not possible. Also, the cache dir is used for not only File mode but other things as well, like MRU, prompt history, logs, other extensions... Separating these will require some pretty big changes. So what's your standard situation? And how would this help?\n. Yes, you can refresh cache for each project or directory by simply pressing `<F5>` in ctrlp when searching in that project. `:CtrlPClearCache` does something similar. You don't have to, and shouldn't use `:CtrlPClearAllCaches` all the time.\n. That means you already set it before somewhere and in a different var type. Just `:unlet` it before setting it again.\n. It's a limitation of the internal matching written in Vimscript. There's an old discussion about this exact issue in #110. Filename and regex modes can be used as quick workarounds, otherwise you can try `g:ctrlp_match_func`.\n. You're not supposed to be able to do that. When you paste that way, the text goes directly into the buffer making up the match window, which is non-modifiable. The prompt (where you want to paste into) is a pseudo prompt and you can only enter input into it through designated mappings. You can find the mappings for pasting at `:h ctrlp-pasting`.\n. It's because `\\` is mapped to inputting `\\` into the prompt. If you want to map something in ctrlp, use one starting with a modifier key (ctrl, shift, etc).\n. Mixed mode starts up slower. Changing a default also potentially forces a lot people to have to adjust their config. I generally only consider a change if it helps speed things up, avoid confusions, or is otherwise really necessary.\n. I'm aware of this but have always thought it's only a minor inconvenient, since you can quickly toggle `by_filename` with `<c-d>`. `by_filename` also dictates quite a few things, so I'll have to see if I can reasonably separate it.\n. Yes, it's like Shougo said, ctrlp only operates in Normal mode and `j`, `k` are already used for inputting `j` `k`.\n. Depending on where you place a mapping, it may be overwritten by another mapping or sometimes re-encoded, thus is lost. In this case, it's because Vim can't tell `<c-s-...>` and `<c-...>` apart, so they overwrite each other whenever one is defined. `<c-p>` is already used by ctrlp as the default mapping and loaded after .vimrc.\n. See `:h g:ctrlp_prompt_mappings`.\n. There should be documentation on how to write the custom glob function. But mostly this doesn't seem to fit in with the other `g:ctrlp_user_command` settings, replacing a function as opposed to running a command with `system()`.\n. It's because Vim's new regexp engine is still being worked on.\n\nIf you search for `new regexp engine:` in this file: ftp://ftp.vim.org/pub/vim/patches/7.3/README , you'll find entries for bugs like `only accepts up to \\{,10}` `Attempts to match \"^\" at every character`, and a lot of `{expression} not supported`.\n\nIt's unreasonable to try to account for all of those bugs. You should use a slightly older version (~ 7.3.900) and wait until the new engine is stable to update Vim.\n. Reported to the dev mailing list: https://groups.google.com/forum/?fromgroups#!topic/vim_dev/4L7p28MYIX0\n. @rene-aguirre what particular error did you run into? I haven't noticed anything else since 7.3.1223.\n. That sounds like it's the same error in OP.\n. @zdm that's an unrelated error that I don't think has much to do with ctrlp, or with the new regexp engine. See #248. Line 15 of `BuildPrompt()` is a `:redraw` command. So it's just as likely to occur at any random time you use `:redraw` anywhere.\n. Fixed in 53f3b2b.\n. It can't work with that. For example, with these entries:\n\n```\nparent/submodule\nparent/submodule/.git\nparent/submodule/subdir\n```\n\nThe pattern only matches the entry that has `.git`, so only the `.git` dir itself and everything under it are ignored.\n. Closing. This is impossible without specifying the submodule dirs.\n. Change it to a key that you know works to make sure `PrtClearCache()` is actually called. Also, you don't need to edit autoload/ctrlp.vim, there's an option for changing the mappings.\n\nSo try this, for example:\n\n``` vim\n  let g:ctrlp_prompt_mappings = {\n    \\ 'ToggleRegex()':        ['<F5>'],\n    \\ 'PrtClearCache()':      ['<c-r>'],\n    \\ }\n```\n. From what you describe, it looks like `<F5>` is being intercepted before Vim and Vim is interpreting an escape sequence as multiple keypresses.\n. Closing. This is almost definitely an issue with your term config, and not anything vimscript.\n\nEven when you don't map `<F5>` (ctrlp was the last place), pressing `<F5>` still does just about the same thing, and which is distinctive to an escape sequence: ctrlp is closed and then a seemingly random action is performed.\n. So I completely forgot about `<esc>` being mapped can cause this. See #432. Also, since `<F5>` has never been reported before, it looks like your terminal may be doing something unusual, e.g. sending extra escape sequences.\n. Duplicate of this request #350.\n. If using mappings isn't ideal for you, you can try using local .vimrc, or .lvimrc as some people call it. But for setting a one-time value, you need to call the init function directly:\n\n``` vim\ncall ctrlp#init(0, { 'mode': 'ra' })\n```\n. Closing. Specifying it when calling init() gives enough flexibility, I think.\n. It's because it's rather complicated to make the highlighting always work perfectly for the non-path types. So for now only 'path' is supported.\n. Yes, it's on my todo list for ctrlp. I'll definitely implement it, once things are figured out.\n. Yes, it's like Shougo said. And it only happens in the ctrlp buffer because the `<esc>` mapping is buffer local. To solve your problem, you can either try a different `&term`, or remove the `<esc>` mapping with the following setting, there's no other way:\n\n``` vim\n  let g:ctrlp_prompt_mappings = {\n    \\ 'PrtExit()': ['<c-c>', '<c-g>'],\n    \\ }\n```\n\nOtherwise, don't use arrow keys but `<c-j>` `<c-k>` to move the selection.\n. See also #209.\n. Then maybe it's because `timeoutlen` is set to 0 by default. But this is required for the inputting to work. In any case, there's no other options. You can try remapping the moving selection functions to some other keys you can use if using `<c-j>` `<c-k>` is somehow not an option.\n\nAlso, the ctrlp plugin itself doesn't load with `compatible` set, so the problem shouldn't be reproducible in that setting.\n. Just a thought, but if you can, try setting `ttimeoutlen` to a non-negative number (e.g. 100) so that you'll have different delays for key codes (100) and mappings (0).\n. Reproducible. I'll push a fix out soon.\n. That's impossible. The prompt is created with command line's output and Vim's command line can't be moved.\n. In a larger sense, yes, anything is possible. What I mean is that it's impossible with the way ctrlp operates now which is only in Normal mode. I'd have to change to a completely different inputting method, and rewrite much of ctrlp's core, just so the input prompt could be moved to the top along with the match window.\n\nAlso, ctrlp's interface is directly based on cmd-t's and lusty explorer's, in both of these you can't move the input prompt. Only in plugins that use Insert mode for inputting, the input prompt can be moved. Again, I mean among the plugins that I know of.\n. It is possible. See `:h ctrlp-input-formats`.\n. No, there isn't since ctrlp isn't based on fuzzyfinder. Recursive is more desirable than single directory search which isn't much better than `<tab>` completion with `:e`, which in turn is similar to how filename completion works in the shell.\n. Since you mention it, if I was happy with unite back then, ctrlp would have never been released or even started. It's a good thing that unite has improved a lot and now has many features ctrlp has. And I mean that. I'll switch to a different plugin or a different editor myself, if it better suits my needs.\n. That's a custom statusline created by powerline (a Vim plugin), not ctrlp's default statusline. You'll have to look into powerline's documentation and themes if you want to change those colors.\n. By default, `g:ctrlp_custom_ignore` doesn't get applied when you use `g:ctrlp_user_command`. You can check the notes under `:h g:ctrlp_user_command` for more details.\n. There's an option for this: `g:ctrlp_buftag_types`.\n. I see. I didn't realize it's supported by ctags.\n. See #443.\n. That doesn't have anything to do with ctrlp or the ctrlp repo. Check your local setup, you're referring to a nonexistent commit.\n. @aufula You can try turning on `g:ctrlp_key_loop` and see if it works with your input method. If it doesn't then there's no other way, since each character need to be mapped in Normal mode.\n. You can try setting a bigger max height for the match window to get more results, and/or toggle regexp mode for exact matching. As long as the some_file.ext is found, it's placed first.\n. It's intended. You're not supposed to be able to scroll pass what is on the list. You can increase the max height of the match window if you want more results.\n. Because it's faster to list exactly the number of results needed to fill the window, than list more but they aren't visible and you have to scroll to see them.\n. Then just increase the max height. There's little difference, I'm not sure it's worth a new setting.\n. I can't see the images. Can you re-upload them somewhere else?\n. Also, running `:syntax on` doesn't change anything for me.\n. I see. It's still not reproducible. Can you simplify your config and find whatever that contributes to this? Also, what ctrlp version are you using? What's your Vim version? Does it happen when you run `:syntax enable`? What happens if you have this in your .vimrc?\n\n``` vim\nhi CtrlPLinePre guifg=red ctermfg=red\n```\n\nThe highlight group for the `>` char is CtrlPLinePre, which by default uses your colorscheme's Normal group's background color as its foreground color.\n. OK, I think I found the cause. It's the `:hi clear` line that many colorschemes have. I use a modified, stripped down version of molokai which doesn't have that line, so even in minimum config, the issue didn't manifest.\n. It's not easy to avoid Vim's `:tselect` menu when using `:tjump`, since it's the default and the only behavior.\n\nI'm going to need you to provide a test case including the tag names, the filenames corresponding to the tags. Also, the 3 tags files and their relative locations.\n\nWhat do you mean by \"set currently searched string\"? Replacing `:tjump` would be even more complicated than avoiding `:tselect`.\n. The `feedkeys()` is only run once when you're done searching and are jumping to the tag. It's needed for respecting fold options. But what does it have anything to do with replacing `:tj`? And what do you consider smarter?\n. Oh I see. You can pass whole strings into the prompt with `g:ctrlp_default_input`.\n. It looks like there's no way to get the correct counts for use in `:[count]tag`. They desync with the counts on the menu as soon as there are 2 duplicates of the same tag in the active buffer. No way to recalculate and Vim doesn't provide any kind of reference.\n\nThis means using the `:tselect` menu in this case is unavoidable, but it's possible to enter the number for this menu automatically.\n. It's already doing that. But as I said, those numbers easily become unusable for `:[count]tag`.\n. That still has the desyncing problem, I think.\n. You mean you want it to highlight only the individual characters, not the entire matched string? This won't be simple since the matching is done with `match()` which only returns the first position.\n. It certainly does. Please go ahead with the pull request.\nThanks!\n. @aaronjensen some main functions in ctrlp are called with `sil!` to make it a bit more invisible/unobtrusive. So you may have to track down and remove a few of those instances for the messages to appear.\n. No, don't worry about that just yet.\n. There isn't such a function built in. But you can modify [this](https://gist.github.com/kien/1737475). Just replace the `exe 'lc!'` with a `return`.\n. By default, buffers with `buftype=nofile` are avoided because they are often used by plugins to display information. You can control this behavior with `g:ctrlp_reuse_window`.\n. @Wolfy87 That option doesn't work like that. See `:h g:ctrlp_reuse_window`.\n. Yes, just enable `g:ctrlp_mruf_relative`.\n. Looks like you have `data` ignored with custom_ignore in your [.vimrc here](https://github.com/Peregrinati/dot_files/blob/c066d43632c0b2d006f96da30609aca7913d9d17/vimrc#L95). If you want to keep that ignore rule, try something like `\\(mnt/\\)\\@<!data`.\n. That can potentially increase startup time exponentially with the number of buffers. Each buffer has to be compared with the others every time Buffer mode is used and the buffer list has been changed.\n. That will just add the extra step of generating the hash keys on top of everything. The comparison can simply be done directly with the tail.\nThe small number of non-uniques also isn't the issue. It's having to walk through the list to compare and find them, especially on the first time Buffer mode is open (all buffers are new), or on a subsequent opening when any number of buffers might have been added/removed/renamed.\n. I wrote [this](https://gist.github.com/kien/3748204) in my last attempt at shortening bufnames, which should explain my reluctance. It's basically something like that versus looping through the list once with `fnamemodify()`.\n. No, ctrlp is a finder, there's no option to show all files. You have to search and narrow down the results.\n. If you don't want to touch the options, just create a mapping for `:CtrlP .`.\n. No, it's not possible because of the way the prompt is built.\n. This is intentional. Unlisted buffers and buffers with non-empty buftype (`help`, `quickfix`, etc) aren't included in the listing to reduce cluster. Not sure if I want to change that.\n. ctrlp has its own buffer-local mappings. Take a look at `g:ctrlp_prompt_mappings` if you want to change them.\n. Changing an option name will break people's config. I try to avoid it unless it's really necessary. This seems too arbitrary to warrant a change. Besides, it's not going to work anyway since the var type is not supported. It's a List, while session can only store String and Number types.\n. `wildignore` does get applied unless you're using `g:ctrlp_user_command` without setting the `ignore` key to 1.\n. That's really odd. `wildignore` only gets applied when indexing a directory. If the files are listed in the cache file then they can definitely be found in vim. Also, try this syntax for ignoring a directory `set wildignore+=*/build/*`.\n. Yes, you can change them with `g:ctrlp_prompt_mappings`.\n. I'm going to need more details. What's your config for ctrlp? What happens if you set `g:ctrlp_max_files` to 0, then run ctrlp and clear the cache with `<F5>`? What happens if you reset wildignore with `:set wildignore&`? Does this problem happen with any directory other than your project?\n. Without more informations, it seems to be because you've reached the max_files limit (default is 10000). You can try either setting it to a bigger number, or to 0 which means no limit. There are maybe too many files in the first few levels of directories in your project.\n. That's definitely max_files. It's ignored when the commands in `user_command` are being used. So if you want to make sure this problem doesn't happen when you aren't in a git repo, just set `g:ctrlp_max_files` to a bigger number or to 0.\n. `g:ctrlp_prompt_mappings` is the option for that. If you search for mappings in the help, you should find it mentioned quite a few times.\n. Does (or did) airline detect the present of ctrlp? If the ctrlp.vim script wasn't even loaded, then it probably wasn't its fault if something in airline didn't load as a result. Also, the welcome info can be cleared by changes to the statusline.\n. Removing on demand is currently not possible. But if the current buffer isn't supported, you can simply leave the result list empty. I don't see why the extension has to be removed. Take buffertag.vim for an example, there's no harm leaving it there when the buffer has a FileType not supported by ctags.\n. I think so, yes. And you can change the labels right from your extension's init function. They aren't used until after the result list has been populated. So first find the Dictionary defining the extension in `g:ctrlp_ext_vars`, then change the values of the naming keys.\n. 10 is just the default number of results in the match window. It'll show you different files once you start searching. So just type in a few characters of the file you want to search for.\n. This isn't what it is for, but yes, you can get that by setting `g:ctrlp_mruf_relative` to 1.\n. No, there isn't such a shortcut. If you really want that, try using `feedkeys()` in a mapping to do the `<c-z>` and `<c-o>` steps automatically. Check out `g:ctrlp_buffer_func`.\n. No, when you use user_command, wildignore and custom_ignore are not applied by default.\n\nCan you explain what you mean by \"assign some directories to index directory\"? Currently, you can only specify one directory tree with `:CtrlP`. There's not yet a way to specify multiple directory trees.\n. Well, for now, you can either use some clever ignore rules (try negative-lookahead) to ignore everything else, or setup some mappings that each open ctrlp for a specific subdir.\n\nThere's already a feature request for supporting multiple starting directories, so I'm going to close this.\n. I think I prefer to keep ctrlp as a finder. If you want to use only the opening mechanism, try using Vim's `feedkeys()`. Also, take a look [here](https://github.com/kien/ctrlp.vim/issues/412).\n. Yes, this is simply because `<esc>` is mapped, so it can't really be fixed. But there are some ways to workaround, you can check #432 and #209.\n\nAlternatively, don't use arrow keys to navigate but `<c-j>`, `<c-k>`, etc.\n. This is because ctrlp only lists the first results found. That is if the foo.file is indexed and cached. You can solve this by toggling either filename or regexp modes with `<c-d>` `<c-r>`, or increase the max result or max height values.\n. Make sure the file is indexed. Set [max_files](https://github.com/kien/ctrlp.vim/issues/325) to 0. Also toggle both filename and regexp modes, use something like `^foo.file`. If the file is indexed, then it can be found.\n\nBTW, max result doesn't work like max_files. Setting max result to 0 only sets it to 1.\n. The selection is a cursorline. So it's Solarized that has a cursorline color too similar to the background color. You'll have to redefine the CursorLine color group, either in .vimrc or in the colorscheme.\n. For the first question, use `:CtrlP path` where you can only specify one directory path at a time. For the second question, there's a Most Recently Used (MRU) mode that remembers the files you've opened. For more details, check out `:h :CtrlP`, `:h ctrlp_working_path`, `:h :CtrlPMRU`, and `:h ctrlp_mruf`.\n. If you use vim-airline, you'll have to change the statusline colors through the plugin somehow. For the non-statusline colors, then use .vimrc and/or the colorscheme.\n. That's one of the main purposes of the feature. It wouldn't be useful if the command wasn't used as soon as the user `:cd`s into a subdir of their project because they had path_mode disabled for different reasons.\n\nSince you have a .git repo you want to be treated differently, I suggest putting a local .vimrc there to disable the user_command option.\n. Put it once, in the same directory as the `.git` dir. Just have a check for the cwd. If the cwd is a subdir, disable the option. An autocmd works, too, if you want this for every project.\n\nWhat you favor against is one of the things that make this feature worthwhile. Since the feature is basically \"using this custom listing command in this particular directory\".\n. Thank you! I'll check it out as soon as I can. It may be in a while, though, since I've been incredibly busy lately.\n. @kdurant I haven't been able to check it out yet. Plus it's still a work-in-progress.\n. It's already possible. Check out `g:ctrlp_abbrev`. Just expand `_` or `\\` to an empty string.\n. No, it's not always needed. You can prevent it from being called by setting `g:ctrlp_clear_cache_on_exit` to 0.\n. Can you provide steps to reproduce the error? Does updating Vim help? It looks like the parser confuses the colons in the Dictionary with operators.\n. Thanks! I can't reproduce it in Vim 7.1.0 to 7.4.0, but in 7.0.0. Looks like it's an old bug with the parser when Dictionary was new. I use ternary operators often, however, so I may have to change a few other places as well.\n. Natively, you can try `g:ctrlp_lazy_update` which should alleviate it somewhat. Otherwise, you'll want to look into using external, non-vimscript matchers through `g:ctrlp_match_func`. There are a few around.\n. That'd be the proper way, I think.\n. You can set either `hidden`, `autowrite`, `autowriteall`, or `confirm`. If none of these options is set, commands that replace the current unsaved buffer will fail with an error. To avoid this, ctrlp opens a new split.\n. Can you get the full error message, especially the error code, and provide steps to reproduce? Include details like which mode you're in, the filename you're trying to open, the current working directory, etc. Also, try starting Vim with as less configuration as possible, ideally with only ctrlp.\n. Thanks! You get those errors because you've either set `debug=msg` or `debug=throw` somewhere in your Vim config. When not set, bufnr() returns `-1` when no such buffer exists, and the error is omitted. Similarly with expand().\n. Yes, creating a new file in a vertical split is the default. You can change it with `g:ctrlp_open_new_file`.\n. Yes, matching is plugin-wide so you can't define a matcher for a specific mode or extension. But it does sound like something good to have.\n. No, highlighting of match is only supported in extensions that list filenames. I may try to extend it after #488.\nThis is the same request/issue as #431.\n. Do the splits have open files? What are their filetypes? If possible, can you provide those files as well?\n\nIt may have something to do with syntax highlighting being slow in Vim in general, and BuildPrompt() running redraw.\n. Glad you've solved it. Also, it's worth noting that syntax highlighting performance can otherwise be improved by setting a small synmaxcol, and small minlines maxlines for :syntax sync.\n. Yes, there is, by setting `g:ctrlp_mruf_relative`. For more MRU options, you can search for ctrlp_mruf in the docs.\n. I think I'll prefer keeping the cursor visible, since the cursorline by itself is sometimes pretty hard to see.\n. Actually, ctrlp's cursorline is Vim's default, enabled by `set cursorline` in the ctrlp window. And I still think the default cursor being visible is generally a good thing.\n. Yes, I understand you mean that cursor. What I'm trying to say is that it helps seeing the selected entry when the cursorline is hard to see. But hiding it when keyloop = 1 is fine.\n. Yes, when in the ctrlp prompt, you can press `<c-\\>` then press `f` to choose `c[f]ile`.\n. It's an intended behavior of Mixed mode. All mru files and buffers that are in the cwd as the regular files are filtered out to avoid duplicates. So if that mru file also shows up in Files mode, it'll show up in Mixed mode.\n\nThe reason the buffer and mru filter isn't run against the full files list from Files mode is because the list is often big enough to significantly slow down the mixing.\n. 1) It's in a hidden directory (.config), so for it to show up in Files mode, you need to at least set ctrlp_show_hidden.\n2) It's the step that determines whether or not a file has duplicates that is slow, i.e. comparing the buffer, mru and file lists.\n. By default, hidden files and hidden dirs (dotfiles and dotdirs) aren't listed. So if it shows up on your other laptop then there's something different. Also, in a subdir or not, it's still under the cwd.\n. Doing it the expected way isn't any more complicated, but as usual I have to choose between that and speed with some rough edges. If I have time, though, I'll probably rewrite Mixed mode and make it more flexible.\n. This is great. Thank you!\n\nAs for the filename, I'm not sure what the language code for Chinese is. If it's \"cn\" then the filename should be ctrlp.cnx.\n. You can set either `hidden`, `autowrite`, `autowriteall`, or `confirm`. But I think I should also try making this part a bit smarter. Those options shouldn't have to be set when working with the current buffer.\n. CtrlP has a feature that by default will zoom into the directory of the current file if the cwd is different. When you open `file1_dir1.txt` in `links/dir1/`, Vim will instead load the `file1_dir1.txt` file in `nolinks/dir1/`. The directory of the current file will then be `nolinks/dir1/`, while the cwd is still `links`.\n\nSo disabling the aforementioned feature with `g:ctrlp_working_path_mode` will solve your issue.\n. May I ask you to provide steps to reproduce? Also, what's your Vim version? Have you tried with minimal configuration (i.e. only CtrlP installed)? There's no freezing nor even any delay for me when I try opening a file this way.\n. Does it happen consistently?\n\nAs for starting Vim with minimal config, run:\n\n```\nvim --noplugin -u path/to/a/.vimrc\n```\n\nContent of this .vimrc:\n\n``` vim\nset nocp\nset runtimepath^=~/.vim/bundle/ctrlp.vim\nruntime! plugin/ctrlp.vim\n```\n\nWith `~/.vim/bundle/ctrlp.vim` a clone of the ctrlp.vim repo.\n. I still can't reproduce it, with or without tmux. And I doubt there's much I can do anyway with ctrlp being a vim script bound to Vim. The search window is basically a buffer named ControlP in a horizontal split with a few local mappings.\n\nI think I'm going to close this as it doesn't seem to worth the effort tracking down. With only 2-3 times, it's simpler to just avoid triggering it.\n. `<c-c>` is one of the default mappings to close ctrlp. To create new file, use `<c-y>`.\n\nYou might want to check out `:h ctrlp-mappings` as well, for the other available mappings.\n. You're not supposed to touch `g:syntax_on`, it's Vim's job to set/unset it whenever you run `:syntax on/off/enable`. Forcing the variable on while syntax is actually off will throw syntax highlighting detection off, and likely cause unexpected behaviors. So try removing the second line.\n. CtrlP doesn't do anything font-related. But those lines look like the cursorline, just multiple of it. You can test by setting cursorline in the other buffer.\n\nThe only thing I can think of here is to try changing Vim's `linespace` option, or terminal.app's equivalent. And if nothing else works, I guess you might just have to use a different font.\n. Ok I'm closing this. I doubt there's anything reasonable that I can do from CtrlP here, since this is font and term specific.\n. I believe this feature already exists. You can press `<c-o>a` to mark all files in the match window.\n. Yes, `<c-o>c`.\n. Sorry I forgot, `g:ctrlp_arg_map` needs to be set as well to enable the additional choices.\n. Can you clarify point 1? What seems to be a bug? Toggle the marking is what `<c-z>` is supposed to do.\n\nAs for point 2, it's a good point. I'll look into adding it. I didn't think anyone would use `<c-o>a` all that much so it's still rather basic.\n. 2.1 doesn't happen to me. The markings are just Vim's signs.\n. This looks great. But how does it interact with CtrlP's existing tab-completion? Also, since they are closely resemble, is merging them feasible?\n. @axelson see `:h ctrlp-autocompletion`. You need to type something first.\n. It's not supposed to. CtrlPLine helps you jump to a line in a file you're actively working on, not to a line anywhere. This also provides a mean to exclude some buffers, and is similar to Vim's `:bufdo` in that it only works on listed buffers.\n. You're misinterpreting the log. The clock column (first column) is recorded when the operations finish. You should look at the second column if you want to know how long each operation takes. So utils.vim's load time is only 0.433 ms. It's the \"BufEnter autocommands\" that is taking close to 1s (878.612 ms).\n. The `a`, `d`, and `x` choices are already mentioned under the mapping help section. The `x` again under its option. I just don't feel like they are practical enough to be shown in the inline help, which I want to keep a little less busy.\n. What does this have to do with ignoring results from submodules with custom_ignore? s:findroot() is only for finding a cwd. So if this change works, it'll only prevent submodules from being used as a cwd. Is that what you want?\n\nBut I don't think this is something that should be enforced and hard-coded in. If you want the superproject to always be the root, just use the .gitmodules or any other file as the root marker. Check out `g:ctrlp_root_markers`.\n. After a closer look, I think this not only won't work (aren't folder and directory the same thing?), and won't \"fix\" #427 (which doesn't need fixing), but will also break root finding for people who want to use a file as the root marker.\n. MiddleMouse is mapped to pasting from the clipboard register `+` by default. Not sure if I want to change it to `*`. See `:h quoteplus` and `:h 'clipboard'`.\n\nThat aside, PrtInsert() only accepts few certain arguments, not just any random string. And `'MiddleMouse'` should be `'<MiddleMouse>'`.\n\nBut being able to specify the register there with PrtInsert() would be nice. I think I might add it.\n. The command is run with Vim's `system()`. Your user_command also works fine for me on Windows. If it only just stopped working, then it's probably something in your environment that changed.\n\nClosing this as I don't think it is something I can fix from CtrlP.\n. The only difference in CtrlP is the argument for --git-dir being passed through `shellescape()` first with `&ssl` off. But even with shellescape() removed and `&ssl` on, just the system() call it still works fine for me.\n\nYou can try testing with a clean Vim configuration, different paths and cwds. And if nothing else works, try specifying the full path to git.exe like this: `'\"C:\\Program Files (x86)\\Git\\bin\\git.exe\" --git-dir=%s/.git ls-files'`.\n. I can't reproduce this. The file count goes down when I add more entries into either wildignore or custom_ignore.\n\nDoes turning off follow_symlinks change anything for you? You can do a simple test to see if those extra files are from `vendor` by temporarily moving `vendor` out of `zeus`.\n\nAnyway, CtrlP relies completely on Vim's globpath() for the indexing. You have `vendor` in wildignore, so globpath() should ignore it entirely. However, custom_ignore can only be applied after globpath() has finished indexing. So if globpath() is already slowed down by indexing all those files, there's no helping it.\n. There's probably a symlink pointing to directory outside.\n. If you're already in the home directory, typing the extra `~/` will show you a `NO ENTRIES` message, because `~/~/.vimrc` doesn't exist. And if you keep trying to open it, CtrlP will attempt to create the file including the path to it.\n\nI guess the same thing happens with those symbols, there are no files with them in their names.\n\nI don't think I should add workarounds to prevent cases like this. The `NO ENTRIES` is very apparent. Someone could make a typo, or type `<c-y>` by mistake, or any other things. I don't think they should or could be prevented.\n. Does setting `g:ctrlp_key_loop` change anything? It sounds like tilde and grave are used as \"dead key\" modifiers on your Linux setup, to produce characters like `\u00e0` `\u00e3`.\n. It's because you're using CtrlPMixed which includes files, buffers, and MRU files. The `/etc/hosts` entry you see is a MRU entry.\n. No, :CtrlP only shows files.\n\nTo clear MRUs, press `<F7>` while in MRU mode.\n. How exactly did you do those? Checking if there's only one file then call the accept function right from the init function should do it. If you want to send `<cr>`, try using feedkey().\n. Actually, I don't think this is possible, at least not yet. The init function is called before the prompt is rendered to properly close it. And there's no other point to accept the file until a selection is made by the user.\n. And if you don't want the file list cached, you can turn that off as well with `g:ctrlp_use_caching`.\n. You'll probably have more freedom using a local .vimrc for the project, and put the settings there. If you don't want to do that, a simple mapping to `:CtrlP ../` should be suffice, I think.\n. There isn't. But this does sound useful. Thanks for the suggestion!\n. BufferTag relies entirely on ctags for the results and hasn't been changed in a while. So check if ctags is installed and working properly on your system.\n. It's just Vimscript being slow when the list is too large. You'll have to employ an external matcher with `g:ctrlp_match_func`, preferably written in a faster language. Nothing else really helps.\n. The longer the search string is, the further down the file list the matcher has to dig for results. Over 100k entries is a lot for a List. As said in the other issue, you'll have to use an external matcher written in a more suitable language. There are at least a few of these matchers around, last time I looked.\n. It's probably the root finding feature. You can try turning it off with `g:ctrlp_working_path_mode`.\n. The root finding/zooming feature is the only thing that interacts with the file system when starting in Buffer mode. In File mode, the sorting compares modified times, so it also interacts with the file system regardless of the file list being cached.\n. You can call `s:PrtClearCache()` with `ctrlp#call({name} [, {args}])`. Or just simulate `<F5>` with Vim's `feedkeys()`. The extension's init will be called again.\n. It's preserved by default, unless `nolim` is set to 1 in the extension.\n. You can get it by setting `g:ctrlp_by_filename` to 1.\n. You've probably reached the max_files limit. The default value is 15000.\n. It's because the CtrlP buffer is opened with `:noautocmd`, mostly to avoid issues with plugins that do things when autocmds are triggered.\n\nI also use UltiSnips frequently but haven't run into that. I use an older copy from last year, not sure which revision or version.\n. There were actually some old issues with plugins changing things expecting the match window to be a regular buffer. It's why I want it to be more invisible.\n\nHow about adding a check for the correct buffer before running the iunmap's? Someone may use `:noautocmd` or `eventignore` anytime and change to a different buffer, which will raise the same errors from UltiSnips.\n. It's because you're setting prompt_mappings in buffer_func, and for when CtrlP is about to close.\n\nJust move the first prompt_mappings setting out of MyPrtMappings() and remove the buffer_func line. Or if you use MyPrtMappings() elsewhere, then just call MyPrtMappings() directly.\n. ",
    "randymorris": "Excellent.  Works great.  Thanks!\n. A possible problem with this is what if the only unique portion of the path is the portion that's hidden as \"...\"?  Something to consider anyway.\n. Excellent.  Works great.  Thanks!\n. A possible problem with this is what if the only unique portion of the path is the portion that's hidden as \"...\"?  Something to consider anyway.\n. ",
    "juanpabloaj": "I press in this sequence :\n`<ctrl-p>` : open ctrlp plugin\n`<down>` : I try move in the window of plugin, but insert a `B` in original file.\n\nthanks \n. I can use mapcheck this way\n\n`:echo mapcheck(';g')`\n\nbut how I can use mapcheck with `down` key ? \n. for track the problem I record the key with `q0` and get \n\n```\n ^P^[OA^[\n```\n\n^P : ctrl-p\n^[OA : esc O A , when I press `<up>`\n\nAny suggestion ? \n. [aparently the problem is with ncurses in OSX 10.6](http://stackoverflow.com/questions/2649644/what-is-happening-to-ncurses-and-os-x-10-6)\n\nI solved added this lines to my `~/.vimrc`\n\n```\nif has('mac')\n    \" problem with ncurses from 10.6\n    nnoremap ^[OA <up>\n    \"nnoremap ^[OB <down>\n    \"nnoremap ^[OD <left> \n    \"nnoremap ^[OC <right>                                                                                                              \nendif\n```\n\nIf I uncomment the four keys I lost the `<right>` key.\n. I change to develop branch and remove the if `if has('mac') ...` ,  the keys `<up>` and `<down>` work ok .\n\n@sorin-ionescu , work for you ?\n. after `:ClearAllCtrlPCaches` I try the same and ctrlp show the same.\nAnd I remove `~/.ctrlp_cache` dir but no change\n\nfor test the wildignore line I try \n\n```\n:!ls .git/obj<tab>\n```\n\nAnd vim don't show nothing.\n. with this work ok.\nthanks.\n\nand thanks for the plugin :)\n. I press in this sequence :\n`<ctrl-p>` : open ctrlp plugin\n`<down>` : I try move in the window of plugin, but insert a `B` in original file.\n\nthanks \n. I can use mapcheck this way\n\n`:echo mapcheck(';g')`\n\nbut how I can use mapcheck with `down` key ? \n. for track the problem I record the key with `q0` and get \n\n```\n ^P^[OA^[\n```\n\n^P : ctrl-p\n^[OA : esc O A , when I press `<up>`\n\nAny suggestion ? \n. [aparently the problem is with ncurses in OSX 10.6](http://stackoverflow.com/questions/2649644/what-is-happening-to-ncurses-and-os-x-10-6)\n\nI solved added this lines to my `~/.vimrc`\n\n```\nif has('mac')\n    \" problem with ncurses from 10.6\n    nnoremap ^[OA <up>\n    \"nnoremap ^[OB <down>\n    \"nnoremap ^[OD <left> \n    \"nnoremap ^[OC <right>                                                                                                              \nendif\n```\n\nIf I uncomment the four keys I lost the `<right>` key.\n. I change to develop branch and remove the if `if has('mac') ...` ,  the keys `<up>` and `<down>` work ok .\n\n@sorin-ionescu , work for you ?\n. after `:ClearAllCtrlPCaches` I try the same and ctrlp show the same.\nAnd I remove `~/.ctrlp_cache` dir but no change\n\nfor test the wildignore line I try \n\n```\n:!ls .git/obj<tab>\n```\n\nAnd vim don't show nothing.\n. with this work ok.\nthanks.\n\nand thanks for the plugin :)\n. ",
    "sorin-ionescu": "I am also on a Mac, and I can confirm this.\n. It also happens in Lion. You definitely should find a workaround. Have you hardcoded your Linux terminal escape sequences in CtrlP?\n\nOn Sep 14, 2011, at 3:47, kienreply@reply.github.com wrote:\n\n> Thanks Juan, looks like this is a problem with ncurses on OSX 10.6.3:\n> \n> > Instead of their proper action, they all quit the program and printed -respectively- \u201cOA\u201d, \u201cOB\u201d, \u201cOC\u201d and \u201cOD\u201d on the stdout.\n> > http://www.uponmyshoulder.com/blog/2010/os-x-10-6-3-broke-ncurses/\n> \n> And using those keys in Vim will just enter insert mode and insert A, B, C, D.\n> \n> So I'm not sure if I should try to find a work-around for that and include it in the plugin.\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/kien/ctrlp.vim/issues/2#issuecomment-2090675\n. This does not make much sense. The arrow key sequences are pretty standard across terminals and ncurses should take care of it.\n\nPlease read the key mapping section of Steve Losh's http://stevelosh.com/blog/2011/09/writing-vim-plugins.\n\nOn Sep 14, 2011, at 8:27, kienreply@reply.github.com wrote:\n\n> OK, I've pushed a fix to the dev branch: https://github.com/kien/ctrlp.vim/tree/develop\n> \n> Let me know if it works.\n> \n> Thanks!\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/kien/ctrlp.vim/issues/2#issuecomment-2092531\n. No, I believe that it assumes that everyone uses a VT\\* terminal instead of xterm*. Though, I have not checked, VT100 probably has different arrow key sequences than xterm.\n\nOn Sep 14, 2011, at 13:48, kienreply@reply.github.com wrote:\n\n> Also, I just want to clear this up, since @sorin-ionescu hinted toward it: this wasn't an issue caused by mapping keys with `nmap`, all the mappings in this plugin are `nnoremap` or `nn` from the get-go.\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/kien/ctrlp.vim/issues/2#issuecomment-2095948\n. I'm not sure. I just think you shouldn't have to do that. It should detect it automatically. Ask in #Vim on FreeNode.\n. This has been an issue for quite a while. Hopefully, Apple will fix it. I'll leave this [reference](https://gist.github.com/1215865/7fc6d02a479b0dec8cc5558d33b7e5c7d7c25eb0) here since it links to posts on how to fix this in other ncurses using code, not just Vim.\n. Vague, it may be, but he's not the first person to experience it. I have seen reports of segfaults on Twitter followed by 'going back to trusted Command-T'.\n. Awesome. Thank you.\n. I am also on a Mac, and I can confirm this.\n. It also happens in Lion. You definitely should find a workaround. Have you hardcoded your Linux terminal escape sequences in CtrlP?\n\nOn Sep 14, 2011, at 3:47, kienreply@reply.github.com wrote:\n\n> Thanks Juan, looks like this is a problem with ncurses on OSX 10.6.3:\n> \n> > Instead of their proper action, they all quit the program and printed -respectively- \u201cOA\u201d, \u201cOB\u201d, \u201cOC\u201d and \u201cOD\u201d on the stdout.\n> > http://www.uponmyshoulder.com/blog/2010/os-x-10-6-3-broke-ncurses/\n> \n> And using those keys in Vim will just enter insert mode and insert A, B, C, D.\n> \n> So I'm not sure if I should try to find a work-around for that and include it in the plugin.\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/kien/ctrlp.vim/issues/2#issuecomment-2090675\n. This does not make much sense. The arrow key sequences are pretty standard across terminals and ncurses should take care of it.\n\nPlease read the key mapping section of Steve Losh's http://stevelosh.com/blog/2011/09/writing-vim-plugins.\n\nOn Sep 14, 2011, at 8:27, kienreply@reply.github.com wrote:\n\n> OK, I've pushed a fix to the dev branch: https://github.com/kien/ctrlp.vim/tree/develop\n> \n> Let me know if it works.\n> \n> Thanks!\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/kien/ctrlp.vim/issues/2#issuecomment-2092531\n. No, I believe that it assumes that everyone uses a VT\\* terminal instead of xterm*. Though, I have not checked, VT100 probably has different arrow key sequences than xterm.\n\nOn Sep 14, 2011, at 13:48, kienreply@reply.github.com wrote:\n\n> Also, I just want to clear this up, since @sorin-ionescu hinted toward it: this wasn't an issue caused by mapping keys with `nmap`, all the mappings in this plugin are `nnoremap` or `nn` from the get-go.\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/kien/ctrlp.vim/issues/2#issuecomment-2095948\n. I'm not sure. I just think you shouldn't have to do that. It should detect it automatically. Ask in #Vim on FreeNode.\n. This has been an issue for quite a while. Hopefully, Apple will fix it. I'll leave this [reference](https://gist.github.com/1215865/7fc6d02a479b0dec8cc5558d33b7e5c7d7c25eb0) here since it links to posts on how to fix this in other ncurses using code, not just Vim.\n. Vague, it may be, but he's not the first person to experience it. I have seen reports of segfaults on Twitter followed by 'going back to trusted Command-T'.\n. Awesome. Thank you.\n. ",
    "johnantoni": "ace! thanks, worked for me. now i can exclude the vendor/bundle dir.\n\n```\nset wildignore+=*/vendor/bundle/*\n```\n. ace! thanks, worked for me. now i can exclude the vendor/bundle dir.\n\n```\nset wildignore+=*/vendor/bundle/*\n```\n. ",
    "pinkchry": "Thank you! Works great!\n. Nevermind, I had a typo in my .vimrc file. \n. Yes, it does.\n. Yup. \n. No worries. It's something I use occasionally when switching between two patterns in FuzzyFinder. \n. Thank you! Works great!\n. Nevermind, I had a typo in my .vimrc file. \n. Yes, it does.\n. Yup. \n. No worries. It's something I use occasionally when switching between two patterns in FuzzyFinder. \n. ",
    "teranex": "I just tested this functionality and it is really nice :)\nBut when using directory creation, it works a bit counter-intuitive IMHO. I would like to suggest a small change in the behaviour (maybe as an option) if it is feasible:\n- After creating a new file/directory clear the cache (or add the entry to the cache)\n- When there is a partial match on a directory (instead of an exact match) use that directory as the target for the new file.\n\nThis was my testcase:\n\n```\n    \" assumes noautochdir\n    :cd /tmp\n    <leader>t \" my ctrlp binding\n    path/to/file.txt\n    C-y \" this creates the 'path' and 'to' directories as expected\n    :w \" saves the 'file.txt' as expected\n    <leader>t \" invoke ctrlp again\n    C-u \" clear previous input in ctrlp\n    pa \" the newly created file directory does not show up, because ctrlp still uses the old cache\n    <F5> \" refresh cache in ctrlp, newly created directory shows up\n    /t/ \" continue entering a part of the path, ctrlp commandline now contains 'pa/t/', in results 'path/to/' is highlighted as match\n    foobar.txt \" ctrlp commandline now contains pa/t/foobar.txt\n    C-y \" a new buffer is created with path pa/t/foobar.txt, while I would expect it to be in path/to/foobar.txt\n```\n\nThx a lot for the nice feature!\n. Ok, that seems a logical explanation. Thx for the help!\n. I just tested this functionality and it is really nice :)\nBut when using directory creation, it works a bit counter-intuitive IMHO. I would like to suggest a small change in the behaviour (maybe as an option) if it is feasible:\n- After creating a new file/directory clear the cache (or add the entry to the cache)\n- When there is a partial match on a directory (instead of an exact match) use that directory as the target for the new file.\n\nThis was my testcase:\n\n```\n    \" assumes noautochdir\n    :cd /tmp\n    <leader>t \" my ctrlp binding\n    path/to/file.txt\n    C-y \" this creates the 'path' and 'to' directories as expected\n    :w \" saves the 'file.txt' as expected\n    <leader>t \" invoke ctrlp again\n    C-u \" clear previous input in ctrlp\n    pa \" the newly created file directory does not show up, because ctrlp still uses the old cache\n    <F5> \" refresh cache in ctrlp, newly created directory shows up\n    /t/ \" continue entering a part of the path, ctrlp commandline now contains 'pa/t/', in results 'path/to/' is highlighted as match\n    foobar.txt \" ctrlp commandline now contains pa/t/foobar.txt\n    C-y \" a new buffer is created with path pa/t/foobar.txt, while I would expect it to be in path/to/foobar.txt\n```\n\nThx a lot for the nice feature!\n. Ok, that seems a logical explanation. Thx for the help!\n. ",
    "DAddYE": "sorry :D\n\nwhen I call `ctrlp` and I find my match, It will open a new buffer, with the content of the matched file... right? So, if I press `ctrlp` (ctrlp is still active) instead to activate the old one try (giving some errors) to open a new instance.\n. Sorry, you are right, now will be closed, I don't know why before note. Sorry !\n. `ctrlg` is working, Im using vim from terminal.\n. Im under lion, using iTerm\n\n`xterm-256color`\n. notice this doesn't happen even, sometimes specially when I search something and I got \"no matches\"\n. Okey Thank you!\n. sorry :D\n\nwhen I call `ctrlp` and I find my match, It will open a new buffer, with the content of the matched file... right? So, if I press `ctrlp` (ctrlp is still active) instead to activate the old one try (giving some errors) to open a new instance.\n. Sorry, you are right, now will be closed, I don't know why before note. Sorry !\n. `ctrlg` is working, Im using vim from terminal.\n. Im under lion, using iTerm\n\n`xterm-256color`\n. notice this doesn't happen even, sometimes specially when I search something and I got \"no matches\"\n. Okey Thank you!\n. ",
    "cfebs": "Ah I was able to reproduce it without the symbolic links. `<c-c>` or `-g` does not seem to work, however I am able to `<c-w-w>` to the buffer.  I'll attempt to look through the source, but i'm not too handy with vimscript :)\n. oops, accidentally closed it\n. After some echo debugging of the script I gathered a little more info that might help.\n\nI started looking in `func! s:AcceptSelection(mode,...)` because because that's where the problem seemed to be, when opening a file everything worked fine but the ctrlp window wouldn't close. So that pointed me to `cal s:BufOpen('ControlP', 'del')`  which contains `if bufnum > 0 && bufwinnr(bufnum) > 0  \" then close the buffer`\n\nWhen moving around files i noticed that `bufwinnr(bufnum)` always returned a value `>0` and the window closed. But when using `..` it would return negative, and the bug would occur (but `bufnum` is somehow still found and positive).\n\nI'll try poking around a little more, but i hope that helps.\n. Ah ok that is interesting, debuged even further to find out where `bufwinnr(bufnr('ControlP'))` becomes `-1`  and I traced it back to:  `sil! exe 'chdir' parent`\n\nBefore that it's fine, directly after it's `-1`.\n. I tried the if statement above the the one below (replacing buf for bufnum as it was in the orig.\n\n``` vim\nif exists('a:2') || (bufnum > 0 && bufwinnr(bufnum) > 0)\n```\n\nIt seems to close the buffer, which is good!  However I get an error:\n\n```\nError detected while processing function <SNR>21_BufOpen:\nline    6:\nCannot unload last buffer\n```\n\nSooo close :)\n. Oh man I think I found it (at least for 7.2).  I threw in a couple `exe 'ls!'` to see what was going on with the buffers and there were about 3 calls being made to `BufOpen` every time a file was opened which seemd a little odd\n\nSo I found \n\n``` vim\nau BufLeave,WinLeave,BufUnload ControlP cal s:BufOpen('ControlP', 'del')\n```\n\nAnd took out the `BufUnload`\n\n``` vim\nau BufLeave,WinLeave ControlP cal s:BufOpen('ControlP', 'del')\n```\n\nChanged the check logic up a little bit\n\n``` vim\nif (exists('a:2') || bufwinnr(bufnum) > 0) && bufnum > 0\n```\n\nAnd now it opens and closes without error!  I am not sure about the repercussions of removing that call from the `au`, or that new logic, but it seems to be stable with basic navigation.\n. Ah very cool, i'll use that as a workaround for now.  I swapped all the logic back with the addition of the `exists('a:2')` and the `try catch`, and it seems pretty good. At least we narrowed it down quite a bit. \n. Yup works perfectly, thank you very much.\n. No problem, thank you for a great plugin, rivals if not exceeds CommandT and doesn't depend on ruby!\n. Ah I was able to reproduce it without the symbolic links. `<c-c>` or `-g` does not seem to work, however I am able to `<c-w-w>` to the buffer.  I'll attempt to look through the source, but i'm not too handy with vimscript :)\n. oops, accidentally closed it\n. After some echo debugging of the script I gathered a little more info that might help.\n\nI started looking in `func! s:AcceptSelection(mode,...)` because because that's where the problem seemed to be, when opening a file everything worked fine but the ctrlp window wouldn't close. So that pointed me to `cal s:BufOpen('ControlP', 'del')`  which contains `if bufnum > 0 && bufwinnr(bufnum) > 0  \" then close the buffer`\n\nWhen moving around files i noticed that `bufwinnr(bufnum)` always returned a value `>0` and the window closed. But when using `..` it would return negative, and the bug would occur (but `bufnum` is somehow still found and positive).\n\nI'll try poking around a little more, but i hope that helps.\n. Ah ok that is interesting, debuged even further to find out where `bufwinnr(bufnr('ControlP'))` becomes `-1`  and I traced it back to:  `sil! exe 'chdir' parent`\n\nBefore that it's fine, directly after it's `-1`.\n. I tried the if statement above the the one below (replacing buf for bufnum as it was in the orig.\n\n``` vim\nif exists('a:2') || (bufnum > 0 && bufwinnr(bufnum) > 0)\n```\n\nIt seems to close the buffer, which is good!  However I get an error:\n\n```\nError detected while processing function <SNR>21_BufOpen:\nline    6:\nCannot unload last buffer\n```\n\nSooo close :)\n. Oh man I think I found it (at least for 7.2).  I threw in a couple `exe 'ls!'` to see what was going on with the buffers and there were about 3 calls being made to `BufOpen` every time a file was opened which seemd a little odd\n\nSo I found \n\n``` vim\nau BufLeave,WinLeave,BufUnload ControlP cal s:BufOpen('ControlP', 'del')\n```\n\nAnd took out the `BufUnload`\n\n``` vim\nau BufLeave,WinLeave ControlP cal s:BufOpen('ControlP', 'del')\n```\n\nChanged the check logic up a little bit\n\n``` vim\nif (exists('a:2') || bufwinnr(bufnum) > 0) && bufnum > 0\n```\n\nAnd now it opens and closes without error!  I am not sure about the repercussions of removing that call from the `au`, or that new logic, but it seems to be stable with basic navigation.\n. Ah very cool, i'll use that as a workaround for now.  I swapped all the logic back with the addition of the `exists('a:2')` and the `try catch`, and it seems pretty good. At least we narrowed it down quite a bit. \n. Yup works perfectly, thank you very much.\n. No problem, thank you for a great plugin, rivals if not exceeds CommandT and doesn't depend on ruby!\n. ",
    "tfmoraes": "It's working. Thanks!\n. It's working. Thanks!\n. ",
    "travisjeffery": "https://github.com/Shougo/unite.vim is one example we could look at, it has a similar functionality with :Unite file, etc. where you can mark files. But it doesn't have the fuzzy matching and speed that Command-T and CtrlP have.\n\nEven if they match it's still useful because if you matched say account in a rails project, then you would likely have the account model , controller and tests all match and be easily openable.\n. Great! Yeah, I used it today and it worked like a charm!\n. Pretty sweet stuff going on in here! :D\n. Interesting. Ah well, c'est la vie! Thanks!\n. https://github.com/Shougo/unite.vim is one example we could look at, it has a similar functionality with :Unite file, etc. where you can mark files. But it doesn't have the fuzzy matching and speed that Command-T and CtrlP have.\n\nEven if they match it's still useful because if you matched say account in a rails project, then you would likely have the account model , controller and tests all match and be easily openable.\n. Great! Yeah, I used it today and it worked like a charm!\n. Pretty sweet stuff going on in here! :D\n. Interesting. Ah well, c'est la vie! Thanks!\n. ",
    "wjkoh": "Thanks for your comment! However, I tested both working path modes and it worked well. I used a `--fullpath` option for Mercurial to get an absolute path always. On top of that, the reason I modified ctrlp.vim itself is because if a user fixes `g:ctrlp_user_command` to one of those VCS commands, ctrlp.vim will not work in non-version tracked directories and the other VCS's. To resolve this, I modified ctrlp.vim and made it automatically choose among default (''), Git or Mercurial command. As a result, it works well in every case and improve performance at no extra cost. However, because it violates the conditon of pure Vim scripts, I had to add the option variable and make users choose on their own.\n. Oh my. I didn't notice that because I tested it only in Mac OS X and Linux.\nThanks for your brilliant plugin and effort again. I'll be waiting that feature happily. \n. Thanks for reconsidering this, Kien! \n. Read the manual, and be enlightened. :)\n. Thanks for your comment! However, I tested both working path modes and it worked well. I used a `--fullpath` option for Mercurial to get an absolute path always. On top of that, the reason I modified ctrlp.vim itself is because if a user fixes `g:ctrlp_user_command` to one of those VCS commands, ctrlp.vim will not work in non-version tracked directories and the other VCS's. To resolve this, I modified ctrlp.vim and made it automatically choose among default (''), Git or Mercurial command. As a result, it works well in every case and improve performance at no extra cost. However, because it violates the conditon of pure Vim scripts, I had to add the option variable and make users choose on their own.\n. Oh my. I didn't notice that because I tested it only in Mac OS X and Linux.\nThanks for your brilliant plugin and effort again. I'll be waiting that feature happily. \n. Thanks for reconsidering this, Kien! \n. Read the manual, and be enlightened. :)\n. ",
    "iynaix": "Running a git bisect, it appears that the error was introduced in the following commit: [000742dc](https://github.com/kien/ctrlp.vim/commit/000742dc0fb7f15e3cbfb62b13852a13b2b35966)\n. Running a git bisect, it appears that the error was introduced in the following commit: [000742dc](https://github.com/kien/ctrlp.vim/commit/000742dc0fb7f15e3cbfb62b13852a13b2b35966)\n. ",
    "graudeejs": "BRW, I've been tuning my g:ctrlp_user_command setting\n\nand here's what I came up with\n\n```\nlet g:ctrlp_max_depth = 20\nlet g:ctrlp_user_command = \"find %s '(' -type f -or -type l ')' -maxdepth \" . g:ctrlp_max_depth . \" -not -path '*/\\.*/*' | egrep -v '\\.(swp|swo|log|gitkeep|keepme|so|o)$'\"\n```\n\nThis one won't search hidden directories at all, however it will search for files and links\n. I was about to post this as well... but thought that someone would implement it, since ctrlp now has support for user extensions (judging by commits)\n\nI already ditched Command-T :D, FuzzyFinder to be next\n. I also use EazyTags, and I'd like to leave tag updating to it.\nRight now when I start CtrlPTag EasyTags complains that updatetime is set to less than 400.\n(I know I can set g:easytags_updatetime_min which would resolve, that but that's not what I want)\n\nAlso I don't see any tags if EasyTags is enabled\n\n(Didn't thought this extensions will be ready so soon and so short :) )\n\nFeel free to check my vim config for details:\nhttps://github.com/graudeejs/dot.vim\n\nto install extensions run make in ~/.vim\n. This problem also occurs with tags extension disabled.\n. Yes the issue is solved, but I still don't see tags\n\nYes tags file is included. But I've set easytags to create tags file for each filetype I edit.\nSo when I edit ruby my tagsfile is ~/tmp/.vim/eazytags/ruby, when I edit sh it's ~/tmp/.vim/eazytags/sh\n\nI suppose CtrlPTag should check tag file after each time it's invoked (since tags setting is dynamic)\n\n(EasyTags is managing last tags option (path to file))\n. Nope, F5 doesn't help\n. Still nothing... I'll get home and check my config... perhaps I'm missing something...\n. :set tags output:\n\n```\ntags=~/.vim/.git/vim.tags,~/.vim/.git/tags,./tags,./TAGS,tags,TAGS,~/.vimtags,/tmp/.graudeejs/.vim/easytags/vim\n```\n\n(~/tmp is link to /tmp/.graudeejs)\nHowever CtrlPTag show nothing (tagfile is generated)\n. On Mon, 28 Nov 2011 10:42:27 -0800\nkien\nreply@reply.github.com\nwrote:\n\n> Do `:echo tagfiles()` and `:echo taglist('.*')` return anything\n> before and after running `:CtrlPTag`? What's the output of `:echo\n> tagfiles()`?\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/kien/ctrlp.vim/issues/27#issuecomment-2904997\n\n`:echo tagfiles()` returns `['/tmp/.graudeejs/.vim/easytags/vim']`\nWhich is correct. After running `:CtrlPTag` output is the same.\n\n`:echo taglist('.*')` before and after return massive array of\ndictionaries with tags\n\n```\n[{'cmd': '/^map ,$ <plug>NERDCommenterToEOL$/', 'static': 0, 'name':\n',$', 'language': 'Vim', 'kind': 'm', 'filename': '/home/graudeejs/\n.vim/vimrc'},...\n```\n\n## \n\nAldis Berjoza\n  http://www.bsdroot.lv/\n. I disabled EasyTags (removed plugin) and manyally set tags path to /tmp/.graudeejs/.vim/easytags/vim with\n\n```\n:set tags+=/tmp/.graudeejs/.vim/easytags/vim\n```\n\nand CtrlPTag works.\n\nBtw, I have suggestion:\ntagfile might contain duplicates, so you should (somehow) filter these out\n. Yey, it works.\n\nNow one more thing:\nThere should be 2 modes:\n1) search tags in current buffer\n2) search tags in all buffers (or in entire tagfile)\n\nFor second, perhaps it would be good to enter tag name, and then search for file where this tag is. perhaps tag@file format (or should I make new Feature request?)\n. I just came to work. I'll work with it for few hours, then I'll let you know...\n. Ok, found a minor problem.\n\nWhen you work with multiple files, ctrlp caches tags for first file.\nWhen you switch to another file you need to Hit F5 for tags to be updated.\n\nI suggest doing that automatically when CtrlPTag is opened, because it will be annoying as hell to update tags every time I open ctrlp. Also that could prevent CtrlPTag from jumping to wrong line of code, if file was updated (I haven't tested, but I suppose it would jump to wrong line)\n\nI hit a bug..... CtrlPTag can't find tag... when I select any tag and hit Enter it opens Empty buffer saying: \"CtrlP: Tag not found.\"\n. Wow... this happens even if I delete tags file and EasyTags creates new (fresh) one\n. For sake of environment differences I suggest you take my vim config\n\n```\ngit clone https://github.com/graudeejs/dot.vim\ncd ~/.vim\nmake\nrm -f ~/tmp/.vim/eazytags/*\nvim vimrc\n```\n\nWait 4-5 seconds for EasyTags to generate tags\nnow when you open CtrlPTag select tag and press Enter it will show \"Tag not found\" error.\n. It works after last commit\n\nWill do more testing...\n. @kied..... CtrlPTag really needs to show tags of current file by default.\n\nI don't think it would be hard to implement (Need an idea on this?)\n. `taglist('.*')` return list of hashes.\nSimple algorithm would be check each element in list.\nAll you need to check is if `filename` keys value of each element (hash) match current files name\n\nThe result should probably be stored in other list. This would allow to implement quick switching to all tags mode and back to current buffers tags.\n\nI don't think it would be slow, but I'm VimL noob. Anyway, I think user will work with current buffers tags most of the time (also would be good to sort tags by weight according to filename path, similar to how file fuzzy searching is implemented now)\n. Another bug: Currently when you search for tag it show all tags. Now if there are multiple tags with same name but in different files, CtrlPTag can jump to wrong file (even if you manually [with arrow keys] select which tag you want to jump to)\n. It is now showing list of tags and from where they are, and asks me to enter number of tag that I want to open. No good.\nhttp://failiem.lv/thumb_show.php?i=svvoeax&n=not_so_good.jpg\n. Why not?\n\nMost of time while I work (as Rails programmer) I'll have more >1 tags with same name\n. I see\n. I still think removing \"parent\" makes it less confusing\n. Wow, that looks like some pretty big commit\n. OK, it works, I love it.\nThanks\n. Right... I'm working too much with rails lately.... :)\n. Very interesting\n. nope, it works perfectly fine even with over 250 buffers\n. No that's not the point. The point is that when I load session, ctrlp isn't even loaded until I hit ^C-P.\n\nBut since ^C-P is overriden (somehow, and I don't understand why), ctrlp will never get loaded and I get error, that CtrlP command is not found\n\nAbout the how overriding ^C-P happens. Overriding ^C-P happend when I edit some file and then run CtrlP and then save session. In session file ^C-P will be mapped to :CtrlP. However in my vimrc I've set it to \n`<Esc>:call LoadIfNeeded(['ctrlp'])<CR>:CtrlPCurWD<CR>`\n\nI hope you understand the problem here.\n. Thanks...\n. BRW, I've been tuning my g:ctrlp_user_command setting\n\nand here's what I came up with\n\n```\nlet g:ctrlp_max_depth = 20\nlet g:ctrlp_user_command = \"find %s '(' -type f -or -type l ')' -maxdepth \" . g:ctrlp_max_depth . \" -not -path '*/\\.*/*' | egrep -v '\\.(swp|swo|log|gitkeep|keepme|so|o)$'\"\n```\n\nThis one won't search hidden directories at all, however it will search for files and links\n. I was about to post this as well... but thought that someone would implement it, since ctrlp now has support for user extensions (judging by commits)\n\nI already ditched Command-T :D, FuzzyFinder to be next\n. I also use EazyTags, and I'd like to leave tag updating to it.\nRight now when I start CtrlPTag EasyTags complains that updatetime is set to less than 400.\n(I know I can set g:easytags_updatetime_min which would resolve, that but that's not what I want)\n\nAlso I don't see any tags if EasyTags is enabled\n\n(Didn't thought this extensions will be ready so soon and so short :) )\n\nFeel free to check my vim config for details:\nhttps://github.com/graudeejs/dot.vim\n\nto install extensions run make in ~/.vim\n. This problem also occurs with tags extension disabled.\n. Yes the issue is solved, but I still don't see tags\n\nYes tags file is included. But I've set easytags to create tags file for each filetype I edit.\nSo when I edit ruby my tagsfile is ~/tmp/.vim/eazytags/ruby, when I edit sh it's ~/tmp/.vim/eazytags/sh\n\nI suppose CtrlPTag should check tag file after each time it's invoked (since tags setting is dynamic)\n\n(EasyTags is managing last tags option (path to file))\n. Nope, F5 doesn't help\n. Still nothing... I'll get home and check my config... perhaps I'm missing something...\n. :set tags output:\n\n```\ntags=~/.vim/.git/vim.tags,~/.vim/.git/tags,./tags,./TAGS,tags,TAGS,~/.vimtags,/tmp/.graudeejs/.vim/easytags/vim\n```\n\n(~/tmp is link to /tmp/.graudeejs)\nHowever CtrlPTag show nothing (tagfile is generated)\n. On Mon, 28 Nov 2011 10:42:27 -0800\nkien\nreply@reply.github.com\nwrote:\n\n> Do `:echo tagfiles()` and `:echo taglist('.*')` return anything\n> before and after running `:CtrlPTag`? What's the output of `:echo\n> tagfiles()`?\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/kien/ctrlp.vim/issues/27#issuecomment-2904997\n\n`:echo tagfiles()` returns `['/tmp/.graudeejs/.vim/easytags/vim']`\nWhich is correct. After running `:CtrlPTag` output is the same.\n\n`:echo taglist('.*')` before and after return massive array of\ndictionaries with tags\n\n```\n[{'cmd': '/^map ,$ <plug>NERDCommenterToEOL$/', 'static': 0, 'name':\n',$', 'language': 'Vim', 'kind': 'm', 'filename': '/home/graudeejs/\n.vim/vimrc'},...\n```\n\n## \n\nAldis Berjoza\n  http://www.bsdroot.lv/\n. I disabled EasyTags (removed plugin) and manyally set tags path to /tmp/.graudeejs/.vim/easytags/vim with\n\n```\n:set tags+=/tmp/.graudeejs/.vim/easytags/vim\n```\n\nand CtrlPTag works.\n\nBtw, I have suggestion:\ntagfile might contain duplicates, so you should (somehow) filter these out\n. Yey, it works.\n\nNow one more thing:\nThere should be 2 modes:\n1) search tags in current buffer\n2) search tags in all buffers (or in entire tagfile)\n\nFor second, perhaps it would be good to enter tag name, and then search for file where this tag is. perhaps tag@file format (or should I make new Feature request?)\n. I just came to work. I'll work with it for few hours, then I'll let you know...\n. Ok, found a minor problem.\n\nWhen you work with multiple files, ctrlp caches tags for first file.\nWhen you switch to another file you need to Hit F5 for tags to be updated.\n\nI suggest doing that automatically when CtrlPTag is opened, because it will be annoying as hell to update tags every time I open ctrlp. Also that could prevent CtrlPTag from jumping to wrong line of code, if file was updated (I haven't tested, but I suppose it would jump to wrong line)\n\nI hit a bug..... CtrlPTag can't find tag... when I select any tag and hit Enter it opens Empty buffer saying: \"CtrlP: Tag not found.\"\n. Wow... this happens even if I delete tags file and EasyTags creates new (fresh) one\n. For sake of environment differences I suggest you take my vim config\n\n```\ngit clone https://github.com/graudeejs/dot.vim\ncd ~/.vim\nmake\nrm -f ~/tmp/.vim/eazytags/*\nvim vimrc\n```\n\nWait 4-5 seconds for EasyTags to generate tags\nnow when you open CtrlPTag select tag and press Enter it will show \"Tag not found\" error.\n. It works after last commit\n\nWill do more testing...\n. @kied..... CtrlPTag really needs to show tags of current file by default.\n\nI don't think it would be hard to implement (Need an idea on this?)\n. `taglist('.*')` return list of hashes.\nSimple algorithm would be check each element in list.\nAll you need to check is if `filename` keys value of each element (hash) match current files name\n\nThe result should probably be stored in other list. This would allow to implement quick switching to all tags mode and back to current buffers tags.\n\nI don't think it would be slow, but I'm VimL noob. Anyway, I think user will work with current buffers tags most of the time (also would be good to sort tags by weight according to filename path, similar to how file fuzzy searching is implemented now)\n. Another bug: Currently when you search for tag it show all tags. Now if there are multiple tags with same name but in different files, CtrlPTag can jump to wrong file (even if you manually [with arrow keys] select which tag you want to jump to)\n. It is now showing list of tags and from where they are, and asks me to enter number of tag that I want to open. No good.\nhttp://failiem.lv/thumb_show.php?i=svvoeax&n=not_so_good.jpg\n. Why not?\n\nMost of time while I work (as Rails programmer) I'll have more >1 tags with same name\n. I see\n. I still think removing \"parent\" makes it less confusing\n. Wow, that looks like some pretty big commit\n. OK, it works, I love it.\nThanks\n. Right... I'm working too much with rails lately.... :)\n. Very interesting\n. nope, it works perfectly fine even with over 250 buffers\n. No that's not the point. The point is that when I load session, ctrlp isn't even loaded until I hit ^C-P.\n\nBut since ^C-P is overriden (somehow, and I don't understand why), ctrlp will never get loaded and I get error, that CtrlP command is not found\n\nAbout the how overriding ^C-P happens. Overriding ^C-P happend when I edit some file and then run CtrlP and then save session. In session file ^C-P will be mapped to :CtrlP. However in my vimrc I've set it to \n`<Esc>:call LoadIfNeeded(['ctrlp'])<CR>:CtrlPCurWD<CR>`\n\nI hope you understand the problem here.\n. Thanks...\n. ",
    "jgallen23": "Did the warning ever get added?  \n. Awesome!  One issue though is this shows up:\n\n<pre>\n!_TAG_FILE_FORMAT   2   /extended format; --format=1 will not append ;\" to lines/\n!_TAG_FILE_SORTED   1   /0=unsorted, 1=sorted, 2=foldcase/\n!_TAG_PROGRAM_AUTHOR    Darren Hiebert  /dhiebert@users.sourceforge.net/\n!_TAG_PROGRAM_NAME  Exuberant Ctags //\n!_TAG_PROGRAM_URL   http://ctags.sourceforge.net    /official site/\n!_TAG_PROGRAM_VERSION   5.8 //\n</pre>\n. Do you know if there is an option in ctags to not output that?\n\nOn Dec 13, 2011, at 12:01 PM, kienreply@reply.github.com wrote:\n\n> Filtering those will slow CtrlPTag down when the tag file's large. It was what this extension did in an earlier version.\n> \n> I'll see if I can add the filter back without slowing it down too much.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/kien/ctrlp.vim/issues/50#issuecomment-3128677\n. worked like a charm.   Closing this issue.  Thanks\n. nm, found it in the docs.  F5 while in ctrlp\n. Thanks @kien for the quick turnaround.  You've done an amazing job on this plugin\n. I'm still having this issue with the latest version of ctrlp.  With or without searching, the results aren't sorted by recently used\n. if I run :echo g:ctrlp_cache_dir i get this on both boxes:\n\n```\nE121: Undefined variable: g:ctrlp_cache_dir\nE15: Invalid expression: g:ctrlp_cache_dir\nPress ENTER or type command to continue\n```\n. I figured out the problem.  the ~/.caches/ctrlp folder was owned by root.  Not sure how that happend, but I deleted the folder and it's working fine now.\n. I actually only want the files with profile in the name of the file (like how ctrlp works currently).  I just want to be able to programmatically invoke a search.  Sorry for the confusion.\n. Did the warning ever get added?  \n. Awesome!  One issue though is this shows up:\n\n<pre>\n!_TAG_FILE_FORMAT   2   /extended format; --format=1 will not append ;\" to lines/\n!_TAG_FILE_SORTED   1   /0=unsorted, 1=sorted, 2=foldcase/\n!_TAG_PROGRAM_AUTHOR    Darren Hiebert  /dhiebert@users.sourceforge.net/\n!_TAG_PROGRAM_NAME  Exuberant Ctags //\n!_TAG_PROGRAM_URL   http://ctags.sourceforge.net    /official site/\n!_TAG_PROGRAM_VERSION   5.8 //\n</pre>\n. Do you know if there is an option in ctags to not output that?\n\nOn Dec 13, 2011, at 12:01 PM, kienreply@reply.github.com wrote:\n\n> Filtering those will slow CtrlPTag down when the tag file's large. It was what this extension did in an earlier version.\n> \n> I'll see if I can add the filter back without slowing it down too much.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/kien/ctrlp.vim/issues/50#issuecomment-3128677\n. worked like a charm.   Closing this issue.  Thanks\n. nm, found it in the docs.  F5 while in ctrlp\n. Thanks @kien for the quick turnaround.  You've done an amazing job on this plugin\n. I'm still having this issue with the latest version of ctrlp.  With or without searching, the results aren't sorted by recently used\n. if I run :echo g:ctrlp_cache_dir i get this on both boxes:\n\n```\nE121: Undefined variable: g:ctrlp_cache_dir\nE15: Invalid expression: g:ctrlp_cache_dir\nPress ENTER or type command to continue\n```\n. I figured out the problem.  the ~/.caches/ctrlp folder was owned by root.  Not sure how that happend, but I deleted the folder and it's working fine now.\n. I actually only want the files with profile in the name of the file (like how ctrlp works currently).  I just want to be able to programmatically invoke a search.  Sorry for the confusion.\n. ",
    "SeyZ": "Hi, I just comment this issue in order to know what's the option? Is it available? Thanks.\n. Thanks very much @kien \n. Hi, I just comment this issue in order to know what's the option? Is it available? Thanks.\n. Thanks very much @kien \n. ",
    "andersoncustodio": "It would be to facilitate clearing the cache at certain times.\n\nI do not say to replace it, this uses the \"leader\" before \"C-p\"\n\nBut it's just a suggestion. :)\n. ```\n    \\ : expand(g:ctrlp_cache_dir) : $HOME.s:lash.'.ctrlp_cache'\n```\n\nadd expand to assign the path correctly in the \"autoload/ctrlp/utils.vim\" line 17\n. It would be to facilitate clearing the cache at certain times.\n\nI do not say to replace it, this uses the \"leader\" before \"C-p\"\n\nBut it's just a suggestion. :)\n. ```\n    \\ : expand(g:ctrlp_cache_dir) : $HOME.s:lash.'.ctrlp_cache'\n```\n\nadd expand to assign the path correctly in the \"autoload/ctrlp/utils.vim\" line 17\n. ",
    "jmazzi": "Thanks! I really appreciate your responsiveness. \n\nMay I suggest that you use full keywords and not vim shortcuts? It makes it easier to search through the code for things like :botright. The shortcut 'bo' is much harder to track down.\n. Yeah, certainly not a problem. I think it could make it easier for third-parties to contribute features.\n\nEither way, thanks again for an a awesome plugin!\n. Thanks! I really appreciate your responsiveness. \n\nMay I suggest that you use full keywords and not vim shortcuts? It makes it easier to search through the code for things like :botright. The shortcut 'bo' is much harder to track down.\n. Yeah, certainly not a problem. I think it could make it easier for third-parties to contribute features.\n\nEither way, thanks again for an a awesome plugin!\n. ",
    "eater": "Yeah, I'm running 1.5.8 and it doesn't show any prompt. I have these settings:\n\n```\nlet g:ctrlp_map = '<Leader>t'\nlet g:ctrlp_working_path_mode = 0\nlet g:ctrlp_match_window_reversed = 0\nlet g:ctrlp_max_height = 15\nlet g:ctrlp_max_files = 20000\nlet g:ctrlp_dotfiles = 0\nlet g:ctrlp_prompt_mappings = {\n      \\ 'ToggleType(1)':        ['<c-f>', '<c-up>', '<right>' ],\n      \\ 'ToggleType(-1)':       ['<c-b>', '<c-down>', '<left>'],\n      \\ 'PrtCurLeft()':         ['<c-h>'],\n      \\ 'PrtCurRight()':        ['<c-l>'],\n      \\ }\n```\n. Perfect, thank you!\n. Except in the instance where the open buffer has no name and you select Yes; then it throws an error.\n. Yeah, I'm running 1.5.8 and it doesn't show any prompt. I have these settings:\n\n```\nlet g:ctrlp_map = '<Leader>t'\nlet g:ctrlp_working_path_mode = 0\nlet g:ctrlp_match_window_reversed = 0\nlet g:ctrlp_max_height = 15\nlet g:ctrlp_max_files = 20000\nlet g:ctrlp_dotfiles = 0\nlet g:ctrlp_prompt_mappings = {\n      \\ 'ToggleType(1)':        ['<c-f>', '<c-up>', '<right>' ],\n      \\ 'ToggleType(-1)':       ['<c-b>', '<c-down>', '<left>'],\n      \\ 'PrtCurLeft()':         ['<c-h>'],\n      \\ 'PrtCurRight()':        ['<c-l>'],\n      \\ }\n```\n. Perfect, thank you!\n. Except in the instance where the open buffer has no name and you select Yes; then it throws an error.\n. ",
    "endesigner": "Works fine now. Thank you!\n. Works fine now. Thank you!\n. ",
    "claytron": "When I try and launch the `:CtrlPTag`, the vim process instantly goes to 100% CPU and never loads the tags. I tried with both MacVim snapshot 62 and my MacPorts compiled vim. Here is the console vim version info:\n\n```\n$ vim --version\nVIM - Vi IMproved 7.3 (2010 Aug 15, compiled Nov 14 2011 13:08:56)\nMacOS X (unix) version\nIncluded patches: 1-244, 246-353\nCompiled by clayton@clyde.local\nNormal version without GUI.  Features included (+) or not (-):\n-arabic +autocmd -balloon_eval -browse +builtin_terms +byte_offset +cindent \n-clientserver +clipboard +cmdline_compl +cmdline_hist +cmdline_info +comments \n-conceal +cryptv -cscope +cursorbind +cursorshape +dialog_con +diff +digraphs \n-dnd -ebcdic -emacs_tags +eval +ex_extra +extra_search -farsi +file_in_path \n+find_in_path +float +folding -footer +fork() -gettext -hangul_input +iconv \n+insert_expand +jumplist -keymap -langmap +libcall +linebreak +lispindent \n+listcmds +localmap -lua +menu +mksession +modify_fname +mouse -mouseshape \n-mouse_dec -mouse_gpm -mouse_jsbterm -mouse_netterm -mouse_sysmouse \n+mouse_xterm -mouse_urxvt +multi_byte +multi_lang -mzscheme +netbeans_intg \n+path_extra +perl +persistent_undo +postscript +printer -profile +python \n-python3 +quickfix +reltime -rightleft +ruby +scrollbind +signs +smartindent \n-sniff +startuptime +statusline -sun_workshop +syntax +tag_binary \n+tag_old_static -tag_any_white -tcl +terminfo +termresponse +textobjects +title\n -toolbar +user_commands +vertsplit +virtualedit +visual +visualextra +viminfo \n+vreplace +wildignore +wildmenu +windows +writebackup -X11 -xfontset -xim -xsmp\n -xterm_clipboard -xterm_save \n   system vimrc file: \"/opt/local/etc/vimrc\"\n     user vimrc file: \"$HOME/.vimrc\"\n      user exrc file: \"$HOME/.exrc\"\n  fall-back for $VIM: \"/opt/local/share/vim\"\nCompilation: /usr/bin/gcc-4.2 -c -I. -Iproto -DHAVE_CONFIG_H   -I/opt/local/include -DMACOS_X_UNIX -no-cpp-precomp  -pipe -O2 -arch x86_64 -D_FORTIFY_SOURCE=1      \nLinking: /usr/bin/gcc-4.2   -L. -L/opt/local/lib      -L/opt/local/lib -arch x86_64 -L/usr/local/lib -o vim       -lncurses -liconv -framework Cocoa    -L/opt/local/lib  -fstack-protector  -L/opt/local/lib/perl5/5.12.3/darwin-multi-2level/CORE -lperl -lm -lutil -lc -L/opt/local/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/config -lpython2.6 -framework CoreFoundation -u _PyMac_Error /opt/local/Library/Frameworks/Python.framework/Versions/2.6/Python   -lruby -lobjc  -L/opt/local/lib\n```\n. @kien I don't think it can handle the size of my tags file:\n\n```\n$ wc -l tags \n  144321 tags\n```\n\nI can let it run for a while to see how long it takes to complete. But right now it isn't usable for that many tags.\n. Using the latest code, my `:CtrlPTag` still searches across the tag, file and context even after clearing the cache file. Is there something special I have to do to get this to work?\n. When I try and launch the `:CtrlPTag`, the vim process instantly goes to 100% CPU and never loads the tags. I tried with both MacVim snapshot 62 and my MacPorts compiled vim. Here is the console vim version info:\n\n```\n$ vim --version\nVIM - Vi IMproved 7.3 (2010 Aug 15, compiled Nov 14 2011 13:08:56)\nMacOS X (unix) version\nIncluded patches: 1-244, 246-353\nCompiled by clayton@clyde.local\nNormal version without GUI.  Features included (+) or not (-):\n-arabic +autocmd -balloon_eval -browse +builtin_terms +byte_offset +cindent \n-clientserver +clipboard +cmdline_compl +cmdline_hist +cmdline_info +comments \n-conceal +cryptv -cscope +cursorbind +cursorshape +dialog_con +diff +digraphs \n-dnd -ebcdic -emacs_tags +eval +ex_extra +extra_search -farsi +file_in_path \n+find_in_path +float +folding -footer +fork() -gettext -hangul_input +iconv \n+insert_expand +jumplist -keymap -langmap +libcall +linebreak +lispindent \n+listcmds +localmap -lua +menu +mksession +modify_fname +mouse -mouseshape \n-mouse_dec -mouse_gpm -mouse_jsbterm -mouse_netterm -mouse_sysmouse \n+mouse_xterm -mouse_urxvt +multi_byte +multi_lang -mzscheme +netbeans_intg \n+path_extra +perl +persistent_undo +postscript +printer -profile +python \n-python3 +quickfix +reltime -rightleft +ruby +scrollbind +signs +smartindent \n-sniff +startuptime +statusline -sun_workshop +syntax +tag_binary \n+tag_old_static -tag_any_white -tcl +terminfo +termresponse +textobjects +title\n -toolbar +user_commands +vertsplit +virtualedit +visual +visualextra +viminfo \n+vreplace +wildignore +wildmenu +windows +writebackup -X11 -xfontset -xim -xsmp\n -xterm_clipboard -xterm_save \n   system vimrc file: \"/opt/local/etc/vimrc\"\n     user vimrc file: \"$HOME/.vimrc\"\n      user exrc file: \"$HOME/.exrc\"\n  fall-back for $VIM: \"/opt/local/share/vim\"\nCompilation: /usr/bin/gcc-4.2 -c -I. -Iproto -DHAVE_CONFIG_H   -I/opt/local/include -DMACOS_X_UNIX -no-cpp-precomp  -pipe -O2 -arch x86_64 -D_FORTIFY_SOURCE=1      \nLinking: /usr/bin/gcc-4.2   -L. -L/opt/local/lib      -L/opt/local/lib -arch x86_64 -L/usr/local/lib -o vim       -lncurses -liconv -framework Cocoa    -L/opt/local/lib  -fstack-protector  -L/opt/local/lib/perl5/5.12.3/darwin-multi-2level/CORE -lperl -lm -lutil -lc -L/opt/local/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/config -lpython2.6 -framework CoreFoundation -u _PyMac_Error /opt/local/Library/Frameworks/Python.framework/Versions/2.6/Python   -lruby -lobjc  -L/opt/local/lib\n```\n. @kien I don't think it can handle the size of my tags file:\n\n```\n$ wc -l tags \n  144321 tags\n```\n\nI can let it run for a while to see how long it takes to complete. But right now it isn't usable for that many tags.\n. Using the latest code, my `:CtrlPTag` still searches across the tag, file and context even after clearing the cache file. Is there something special I have to do to get this to work?\n. ",
    "fomichev": "Nope, it doesn't work. The problem here is that netrw buffer is not named 'Netrw'; its name is path that's currently shown.\n. Yes, now it works!\nThank you for such a nice fix and quick response!\n. Nope, it doesn't work. The problem here is that netrw buffer is not named 'Netrw'; its name is path that's currently shown.\n. Yes, now it works!\nThank you for such a nice fix and quick response!\n. ",
    "mkomitee": "Max height sounds like it would limit the amount of room ctrl-p would take\nup on your screen, not the number of results. Maybe a new variable would be\nmore appropriate. I'll work on that.\n\nOn Wednesday, November 23, 2011, kien <\nreply@reply.github.com>\nwrote:\n\n> Thanks! But I don't think this should be a default behavior. `s:maxfiles`\n> is the max number of files to scan for initially, the default is 20000. It\n> can also be set to 0 for no-limit.\n> \n> If you want to see more results, simply changing maxheight will be best.\n> There's no differences between that and limiting the maxheight yet showing\n> more results (which you have to scroll to see them).\n> \n> But let's keep this open in case someone wants to use maxfiles this way.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/kien/ctrlp.vim/pull/36#issuecomment-2849785\n. Sorry that there are multiple commits here, you can see how this feature evolved. Feel free to squash it into a single change.\n. Max height sounds like it would limit the amount of room ctrl-p would take\nup on your screen, not the number of results. Maybe a new variable would be\nmore appropriate. I'll work on that.\n\nOn Wednesday, November 23, 2011, kien <\nreply@reply.github.com>\nwrote:\n\n> Thanks! But I don't think this should be a default behavior. `s:maxfiles`\n> is the max number of files to scan for initially, the default is 20000. It\n> can also be set to 0 for no-limit.\n> \n> If you want to see more results, simply changing maxheight will be best.\n> There's no differences between that and limiting the maxheight yet showing\n> more results (which you have to scroll to see them).\n> \n> But let's keep this open in case someone wants to use maxfiles this way.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/kien/ctrlp.vim/pull/36#issuecomment-2849785\n. Sorry that there are multiple commits here, you can see how this feature evolved. Feel free to squash it into a single change.\n. ",
    "mattn": "This screenshot:\n\n![](http://go-gyazo.appspot.com/2fd69092336ab071.png)\n. Ok, thanks.\n. Thanks. I'll look into it from now.\n. This is the extension. :)\n\nhttps://github.com/mattn/ctrlp-hackernews\n\nThis require:\nhttps://github.com/mattn/webapi-vim\nhttps://github.com/tyru/open-browser.vim\n\nIf you add sort, we maybe possible to use this as rss reader. :)\n. It make `1` candidate to match. If extra information is too long like URL, it hinder to match with ctrlp. :-(\n. For example\n\n```\n  return [\n  \\ {\"title\": \"foo\", \"value\": {...more bigger nested datas...} },\n  \\ {\"title\": \"bar\", \"value\": {...more bigger nested datas...} },\n  \\ {\"title\": \"baz\", \"value\": {...more bigger nested datas...} }]\n```\n. However, I must hold s:list into script. And `1`, `2`, `3` interrupt that I find the title contained one.\n. Thanks.\n. Ah, it need first letter to expand. I didn't notice it. thanks. But if there are similar names in same directory, I must type letter which can be different. Today, I see my friend's tweet about ctrlp. He said: `ctrlp is not easy to create a file quickly, I must type many to point the directory`.\nSo I'm thinking that ctrlp have better to provide paste file/directory to the prompt quickly.\n. One more question. Is ctrlp possible to make directory when typing `<c-y>` ?\nMy friends think:\n- CtrlP require too many types to create buffer. (This will be solved with your answer)\n- CtrlP can't make directory to the new file.\n. Ah, sorry.\n. Thank you. But I want to do highlight matched strings.\n. Ah, It seens that highlight won't be enabled expect path. Is it true? Or:\n\n``` diff\ndiff --git a/autoload/ctrlp.vim b/autoload/ctrlp.vim\nindex 09237b3..f33f350 100644\n--- a/autoload/ctrlp.vim\n+++ b/autoload/ctrlp.vim\n@@ -1379,7 +1379,7 @@ endf\n fu! s:highlight(pat, grp)\n    if s:matcher != {} | retu | en\n    cal clearmatches()\n-   if !empty(a:pat) && s:ispath\n+   if !empty(a:pat) \"&& s:ispath\n        let pat = s:regexp ? substitute(a:pat, '\\\\\\@<!\\^', '^> \\\\zs', 'g') : a:pat\n        if s:byfname\n            let pat = substitute(pat, '\\[\\^\\(.\\{-}\\)\\]\\\\{-}', '[^\\\\/\\1]\\\\{-}', 'g')\n```\n. Chris, Can you explain what's wrong?\nAnd please let me know the code point of them.\nYou can make sure the code point with:\n\n:echo getchar()\n\nOn 9/13/12, Chris 'Chippie' Corbyn notifications@github.com wrote:\n\n> If I understand what it's supposed to do, I can probably test it. I work\n> with some romance and Nordic languages that include accented vowels like \u00e9\n> and \u00e8 and Nordic characters like \u00f0, \u00fe and \u00e6. Not sure if the idea is to\n> allow those characters to be typed in ctrlp or not though. Currently they\n> don't type correctly, at least on OS X's Terminal.app.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/kien/ctrlp.vim/pull/276#issuecomment-8497830\n\n## \n- Yasuhiro Matsumoto\n. I modified code to handle few mapped key codes.\n. @kein could you please show me the code you modified? and please let me know way to reproduce.\n. I don't get any problems with your changes.\n\nkien++\n. For example\n\n``` vim\nlet s:foo_var = {\n\\  'init':   'ctrlp#foo#init()',\n\\  'exit':   'ctrlp#foo#exit()',\n\\  'accept': 'ctrlp#foo#accept',\n\\  'lname':  'foo',\n\\  'sname':  'foo',\n\\  'type':   'path',\n\\  'sort':   0,\n\\  'with_index': 1,\n\\}\n```\n\nIf `with_index` is set as 1, passing index instead of string. How about this?\n. For example, Is it possible to be change to add conceal character to hide `(1)` ?\n. However, afaik, filtering entries does not work well without `'type': 'path'`.\n. and I hope that ctrlp don't match characters following with conceal_id_begin_char.\n. Ah, It's bad!\n. This index should be index in a whole, not filtered.\n. Try to use type which using `acceptfile` ?\n. I'm using [ctrlp-git](https://github.com/mattn/ctrlp-git). And this extension uses `acceptfile` to open the file.\nBut ctrlp-git does not close anything. So I wonder why current buffer is closed...\n. Just fixed! Thanks.\n. ctrlp have pseudo cursor & cursorline.\n\n![](http://go-gyazo.appspot.com/8c4001a9146cc3a9.png)\n\nSo it don't need to show vim's cursor.\n. Ah, it seems that the cursor will be visible when keyloop = 1.\n\n![](http://go-gyazo.appspot.com/f5d14be8c9422579.png)\n. I'm not talking about cursorline. I'm talking about blinking cursor displayed on the terminal.\n. ^M is not multi-byte character. It's CR-LF.\n. Hmm, @kien seems not actively. I don't mind to work for ctrlp.vim if someone want to use ctrlp.vim. But I want to hear him that he want that ctrlp.vim will be doing maintenance by other hands.\n. @gaving probaly, you don't know how ctrlp is conservative plugin. This is one of reason that I use ctrlp and reason of that I don't use unite.vim .\n. Ooops, sorry.\n. ooops, sorry.\n. sorry\n. This screenshot:\n\n![](http://go-gyazo.appspot.com/2fd69092336ab071.png)\n. Ok, thanks.\n. Thanks. I'll look into it from now.\n. This is the extension. :)\n\nhttps://github.com/mattn/ctrlp-hackernews\n\nThis require:\nhttps://github.com/mattn/webapi-vim\nhttps://github.com/tyru/open-browser.vim\n\nIf you add sort, we maybe possible to use this as rss reader. :)\n. It make `1` candidate to match. If extra information is too long like URL, it hinder to match with ctrlp. :-(\n. For example\n\n```\n  return [\n  \\ {\"title\": \"foo\", \"value\": {...more bigger nested datas...} },\n  \\ {\"title\": \"bar\", \"value\": {...more bigger nested datas...} },\n  \\ {\"title\": \"baz\", \"value\": {...more bigger nested datas...} }]\n```\n. However, I must hold s:list into script. And `1`, `2`, `3` interrupt that I find the title contained one.\n. Thanks.\n. Ah, it need first letter to expand. I didn't notice it. thanks. But if there are similar names in same directory, I must type letter which can be different. Today, I see my friend's tweet about ctrlp. He said: `ctrlp is not easy to create a file quickly, I must type many to point the directory`.\nSo I'm thinking that ctrlp have better to provide paste file/directory to the prompt quickly.\n. One more question. Is ctrlp possible to make directory when typing `<c-y>` ?\nMy friends think:\n- CtrlP require too many types to create buffer. (This will be solved with your answer)\n- CtrlP can't make directory to the new file.\n. Ah, sorry.\n. Thank you. But I want to do highlight matched strings.\n. Ah, It seens that highlight won't be enabled expect path. Is it true? Or:\n\n``` diff\ndiff --git a/autoload/ctrlp.vim b/autoload/ctrlp.vim\nindex 09237b3..f33f350 100644\n--- a/autoload/ctrlp.vim\n+++ b/autoload/ctrlp.vim\n@@ -1379,7 +1379,7 @@ endf\n fu! s:highlight(pat, grp)\n    if s:matcher != {} | retu | en\n    cal clearmatches()\n-   if !empty(a:pat) && s:ispath\n+   if !empty(a:pat) \"&& s:ispath\n        let pat = s:regexp ? substitute(a:pat, '\\\\\\@<!\\^', '^> \\\\zs', 'g') : a:pat\n        if s:byfname\n            let pat = substitute(pat, '\\[\\^\\(.\\{-}\\)\\]\\\\{-}', '[^\\\\/\\1]\\\\{-}', 'g')\n```\n. Chris, Can you explain what's wrong?\nAnd please let me know the code point of them.\nYou can make sure the code point with:\n\n:echo getchar()\n\nOn 9/13/12, Chris 'Chippie' Corbyn notifications@github.com wrote:\n\n> If I understand what it's supposed to do, I can probably test it. I work\n> with some romance and Nordic languages that include accented vowels like \u00e9\n> and \u00e8 and Nordic characters like \u00f0, \u00fe and \u00e6. Not sure if the idea is to\n> allow those characters to be typed in ctrlp or not though. Currently they\n> don't type correctly, at least on OS X's Terminal.app.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/kien/ctrlp.vim/pull/276#issuecomment-8497830\n\n## \n- Yasuhiro Matsumoto\n. I modified code to handle few mapped key codes.\n. @kein could you please show me the code you modified? and please let me know way to reproduce.\n. I don't get any problems with your changes.\n\nkien++\n. For example\n\n``` vim\nlet s:foo_var = {\n\\  'init':   'ctrlp#foo#init()',\n\\  'exit':   'ctrlp#foo#exit()',\n\\  'accept': 'ctrlp#foo#accept',\n\\  'lname':  'foo',\n\\  'sname':  'foo',\n\\  'type':   'path',\n\\  'sort':   0,\n\\  'with_index': 1,\n\\}\n```\n\nIf `with_index` is set as 1, passing index instead of string. How about this?\n. For example, Is it possible to be change to add conceal character to hide `(1)` ?\n. However, afaik, filtering entries does not work well without `'type': 'path'`.\n. and I hope that ctrlp don't match characters following with conceal_id_begin_char.\n. Ah, It's bad!\n. This index should be index in a whole, not filtered.\n. Try to use type which using `acceptfile` ?\n. I'm using [ctrlp-git](https://github.com/mattn/ctrlp-git). And this extension uses `acceptfile` to open the file.\nBut ctrlp-git does not close anything. So I wonder why current buffer is closed...\n. Just fixed! Thanks.\n. ctrlp have pseudo cursor & cursorline.\n\n![](http://go-gyazo.appspot.com/8c4001a9146cc3a9.png)\n\nSo it don't need to show vim's cursor.\n. Ah, it seems that the cursor will be visible when keyloop = 1.\n\n![](http://go-gyazo.appspot.com/f5d14be8c9422579.png)\n. I'm not talking about cursorline. I'm talking about blinking cursor displayed on the terminal.\n. ^M is not multi-byte character. It's CR-LF.\n. Hmm, @kien seems not actively. I don't mind to work for ctrlp.vim if someone want to use ctrlp.vim. But I want to hear him that he want that ctrlp.vim will be doing maintenance by other hands.\n. @gaving probaly, you don't know how ctrlp is conservative plugin. This is one of reason that I use ctrlp and reason of that I don't use unite.vim .\n. Ooops, sorry.\n. ooops, sorry.\n. sorry\n. ",
    "hail2u": "I'm using gVim on Winows 7.\n\n> Can you consistently reproduce this?\n\nYes, but\n\n> Does it happens if you comment out the gv\"vy line?\n\nNot.\n\nI tested with `vim --noplugin -u blank_vimrc` (blank_vimrc doesn't contain anything), unnamed register is still overridden with a empty string because `\"v` register doesn't have anything.\n\n---\n\nVim help (`:help quotequote`) says:\n\n> 1. Unnamed register \"\"  \n>    Vim fills this register with text deleted with the \"d\", \"c\", \"s\", \"x\" commands\n>    or copied with the yank \"y\" command, regardless of whether or not a specific\n>    register was used (e.g.  \"xdd).\n\nI think `gv\"vy` use `\"v` and `\"\"` (unnamed) register. Is it wrong?\n. > <c-t> work exactly like <cr> when jump_to_buffer = 2, is that what you want?\n\nYes, I set `g:ctrlp_jump_to_buffer` to `2`. This is what I want.\n\nI used [FuzzyFinder](http://www.vim.org/scripts/script.php?script_id=1984) with `g:fuf_reuseWindow = 1`. With this config, if selected file is opened already in buffer or tab, move to it. I want to make CtrlP works like that.\n. +1 to sort MRU \"recently-entered\" order by default.\n. I'm using gVim on Winows 7.\n\n> Can you consistently reproduce this?\n\nYes, but\n\n> Does it happens if you comment out the gv\"vy line?\n\nNot.\n\nI tested with `vim --noplugin -u blank_vimrc` (blank_vimrc doesn't contain anything), unnamed register is still overridden with a empty string because `\"v` register doesn't have anything.\n\n---\n\nVim help (`:help quotequote`) says:\n\n> 1. Unnamed register \"\"  \n>    Vim fills this register with text deleted with the \"d\", \"c\", \"s\", \"x\" commands\n>    or copied with the yank \"y\" command, regardless of whether or not a specific\n>    register was used (e.g.  \"xdd).\n\nI think `gv\"vy` use `\"v` and `\"\"` (unnamed) register. Is it wrong?\n. > <c-t> work exactly like <cr> when jump_to_buffer = 2, is that what you want?\n\nYes, I set `g:ctrlp_jump_to_buffer` to `2`. This is what I want.\n\nI used [FuzzyFinder](http://www.vim.org/scripts/script.php?script_id=1984) with `g:fuf_reuseWindow = 1`. With this config, if selected file is opened already in buffer or tab, move to it. I want to make CtrlP works like that.\n. +1 to sort MRU \"recently-entered\" order by default.\n. ",
    "mikecrittenden": "Nope, I'm on console vim on Linux. Must be something else interacting with\nit, or maybe a rogue mapping in vimrc. I'll check it out. Thanks!\n\nOn Mon, Dec 5, 2011 at 10:15, kien <\nreply@reply.github.com\n\n> wrote:\n> \n> `<bs>` should delete the character. Are you using console Vim on Windows?\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/kien/ctrlp.vim/issues/45#issuecomment-3018120\n\n## \n\nMike Crittenden\nSmirk Studio\n\n408 Woolridge Way,\nGreer, SC 29650\n\n864.832.7488\nhttp://smirkstudio.com\nhttp://mikethecoder.com\n. Ah very helpful, thanks a ton for tracking that down so quickly. I love this plugin and your obvious dedication to it is really encouraging.\n. Nope, I'm on console vim on Linux. Must be something else interacting with\nit, or maybe a rogue mapping in vimrc. I'll check it out. Thanks!\n\nOn Mon, Dec 5, 2011 at 10:15, kien <\nreply@reply.github.com\n\n> wrote:\n> \n> `<bs>` should delete the character. Are you using console Vim on Windows?\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/kien/ctrlp.vim/issues/45#issuecomment-3018120\n\n## \n\nMike Crittenden\nSmirk Studio\n\n408 Woolridge Way,\nGreer, SC 29650\n\n864.832.7488\nhttp://smirkstudio.com\nhttp://mikethecoder.com\n. Ah very helpful, thanks a ton for tracking that down so quickly. I love this plugin and your obvious dedication to it is really encouraging.\n. ",
    "eproxus": "@kien Yes, starting with a clean .vimrc CtrlP is indeed lightning fast. :-) Thanks for the hint!\n\nI'll try to track down the culprit in my .vimrc and post the results here.\n. Turns out it was my `<leader>b` mapping that had other mappings assigned after `b` so Vim applied the default timeout before executing commands. I now use the default Ctrl+P instead.\n. I was thinking it could be configurable with a list of directories manually. Alternatively, let the wildignore patterns work on absolute paths if possible.\n. Ok, fine enough. Thanks!\n. Of course there's a command for that, `<c-^>`. Should have thought of that. Thanks!\n. No, I was tryingi to say that fuzzy matching should be \"greedy\" by default, favoring bigger matching sub strings first. :-)\n\nI'm just comparing it to the regexp result since the string `cover\\.erl` is seen as one and only one complete string. It's not the same use case, it's just to illustrate what better search results would look like. Regexp search has many other applications which are not needed for simple fuzzy matching.\n\nAs for performance, I wouldn't know. I just know that a lot of other fuzzy matchers (Textmate Command-T and Emacs' Ido) have that kind of sorting.\n. Ah, that's too bad with those limitations with vimscript. Haven't worked with it that much so I don't know the limitations.\n\nIn my opinion the fuzzy matching is less useful (functionality wise) if it returns just \"random\" results based on (in the worst case) individual letters just happening to appear in the search string.\n. Just an idea: What would be the impact of returning the search results for the whole string before any other sub matches? Would that work?\n. @SpudNyk What about spaces in file names?\n. @SpudNyk It's probably sacrificable. :-P\n. It's quite a lot slower. For the repo above (approx. 20000 files) it's starting to get too slow to feel snappy after 4-5 typed characters, which isn't a lot. According to my taste, it does the right thing though.\n\nI wouldn't merge it just yet if there's ways to improve performance. If there aren't, I'd probably go for the older version because of the speed.\n. @DelvarWorld Yeah, that's was my conclusion at first as well. I mean, it's still a lot more useful that the standard `:e` so I'll continue using it for sure. But as it is now the regexp matching makes a lot more sense than the normal fuzzy matching which doesn't really work for bigger repositories.\n. @kien Yes, starting with a clean .vimrc CtrlP is indeed lightning fast. :-) Thanks for the hint!\n\nI'll try to track down the culprit in my .vimrc and post the results here.\n. Turns out it was my `<leader>b` mapping that had other mappings assigned after `b` so Vim applied the default timeout before executing commands. I now use the default Ctrl+P instead.\n. I was thinking it could be configurable with a list of directories manually. Alternatively, let the wildignore patterns work on absolute paths if possible.\n. Ok, fine enough. Thanks!\n. Of course there's a command for that, `<c-^>`. Should have thought of that. Thanks!\n. No, I was tryingi to say that fuzzy matching should be \"greedy\" by default, favoring bigger matching sub strings first. :-)\n\nI'm just comparing it to the regexp result since the string `cover\\.erl` is seen as one and only one complete string. It's not the same use case, it's just to illustrate what better search results would look like. Regexp search has many other applications which are not needed for simple fuzzy matching.\n\nAs for performance, I wouldn't know. I just know that a lot of other fuzzy matchers (Textmate Command-T and Emacs' Ido) have that kind of sorting.\n. Ah, that's too bad with those limitations with vimscript. Haven't worked with it that much so I don't know the limitations.\n\nIn my opinion the fuzzy matching is less useful (functionality wise) if it returns just \"random\" results based on (in the worst case) individual letters just happening to appear in the search string.\n. Just an idea: What would be the impact of returning the search results for the whole string before any other sub matches? Would that work?\n. @SpudNyk What about spaces in file names?\n. @SpudNyk It's probably sacrificable. :-P\n. It's quite a lot slower. For the repo above (approx. 20000 files) it's starting to get too slow to feel snappy after 4-5 typed characters, which isn't a lot. According to my taste, it does the right thing though.\n\nI wouldn't merge it just yet if there's ways to improve performance. If there aren't, I'd probably go for the older version because of the speed.\n. @DelvarWorld Yeah, that's was my conclusion at first as well. I mean, it's still a lot more useful that the standard `:e` so I'll continue using it for sure. But as it is now the regexp matching makes a lot more sense than the normal fuzzy matching which doesn't really work for bigger repositories.\n. ",
    "albasili": "I have a similar issue. CtrlP seems slow to accept keystroke when going through buffers and starting with a pristine vimrc did not help. My issue is only when I use `:CtrlpBuffer`. I have nearly 400 buffers open and it seems that it takes a while just to accept keystrokes, so I end up typing but nothing appears on the prompt. It renders the usage of the buffers just unfeasible. Funny thing is that I have more than few thousands entries in the project and using `:CtrlP` works faster (yes I'm caching results).\r\n\r\nNot really sure why that happens. Any suggestion?. I have a similar issue. CtrlP seems slow to accept keystroke when going through buffers and starting with a pristine vimrc did not help. My issue is only when I use `:CtrlpBuffer`. I have nearly 400 buffers open and it seems that it takes a while just to accept keystrokes, so I end up typing but nothing appears on the prompt. It renders the usage of the buffers just unfeasible. Funny thing is that I have more than few thousands entries in the project and using `:CtrlP` works faster (yes I'm caching results).\r\n\r\nNot really sure why that happens. Any suggestion?. ",
    "Janiczek": "I'm using Vim v7.3.353 on OSX.\nI have copied my .vim and .vimrc to my Linux machine and it works there:\n![linux](http://f.cl.ly/items/2Q073j00012P2R0x2J1l/Sn%C3%ADmek%20obrazovky%202011-12-13%20v%C2%A019.40.15.png)\n. Added it to my .vimrc, but no, still nothing, even after system restart.\n. That works, thank you!\n\nI noticed just now that it's even on the homepage:\n`let g:ctrlp_user_command = 'find %s -type f' \" MacOSX/Linux`\n\nOh well. :)\n. I'm using Vim v7.3.353 on OSX.\nI have copied my .vim and .vimrc to my Linux machine and it works there:\n![linux](http://f.cl.ly/items/2Q073j00012P2R0x2J1l/Sn%C3%ADmek%20obrazovky%202011-12-13%20v%C2%A019.40.15.png)\n. Added it to my .vimrc, but no, still nothing, even after system restart.\n. That works, thank you!\n\nI noticed just now that it's even on the homepage:\n`let g:ctrlp_user_command = 'find %s -type f' \" MacOSX/Linux`\n\nOh well. :)\n. ",
    "marttt": "Hi,\nI'm encountering a similar problem in Linux terminal: I can't type any of the Estonian umlaut characters `\u00e4, \u00f6, \u00fc, \u00f5` on the Ctrl-P command line.\n\nTyping `\u00e4` points the cursor to the first, topmost match in Ctrl-P window.\nTyping `\u00fc` points cursor to the last match at the bottom.\nTyping `\u00f6` does nothing.\nTyping `\u00f5` enters `gUl` to the command line.\n\nI tried all the settings described above, including multiple restarts. It looks as though Ctrl-P doesn't recognize my Estonian keyboard. Thanks for any help!\n. @kien: Yes, I had just found and applied the patch a second ago. This works brilliantly, thanks very much!\n. Okay, that's a fair point, thanks!\n. Hi,\nI'm encountering a similar problem in Linux terminal: I can't type any of the Estonian umlaut characters `\u00e4, \u00f6, \u00fc, \u00f5` on the Ctrl-P command line.\n\nTyping `\u00e4` points the cursor to the first, topmost match in Ctrl-P window.\nTyping `\u00fc` points cursor to the last match at the bottom.\nTyping `\u00f6` does nothing.\nTyping `\u00f5` enters `gUl` to the command line.\n\nI tried all the settings described above, including multiple restarts. It looks as though Ctrl-P doesn't recognize my Estonian keyboard. Thanks for any help!\n. @kien: Yes, I had just found and applied the patch a second ago. This works brilliantly, thanks very much!\n. Okay, that's a fair point, thanks!\n. ",
    "mculp": "thanks!\n. thanks!\n. ",
    "matthayter": "Just what I needed too, thanks!\n. Just what I needed too, thanks!\n. ",
    "sreedom": "thanks!\n. thanks!\n. ",
    "vqng": "thanks!\n. thanks!\n. ",
    "chantastic": "thanks\n. thanks\n. ",
    "thekindofme": "just another thanks comment ;)\n. just another thanks comment ;)\n. ",
    "antwonlee": "is it fn + f5 in mac?\n. is it fn + f5 in mac?\n. ",
    "elmerland": "yes, you can also set the F keys to the default (without having to preess the fn key) by going to \n\nsystem preferences -> keyboard -> Use all F1, F2, etc. keys as standard function keys\n. yes, you can also set the F keys to the default (without having to preess the fn key) by going to \n\nsystem preferences -> keyboard -> Use all F1, F2, etc. keys as standard function keys\n. ",
    "danawoodman": "You can remap this as well:\n\n``` vim\nmap <leader>C :CtrlPClearCache<cr>\n```\n. You can remap this as well:\n\n``` vim\nmap <leader>C :CtrlPClearCache<cr>\n```\n. ",
    "kingluddite": "I have a Mac Sierra OS but I'm using the Das keyboard so I lost this option\r\nsystem preferences -> keyboard -> Use all F1, F2, etc. keys as standard function keys\r\n\r\n![lost option](https://i.imgur.com/xh1q0KM.png)\r\n\r\nctrl + p + F5 key combo did not work to refresh the cache\r\n\r\nInstead, I installed Karabiner-Elements and had to click function keys. At the bottom you will see the Use all F1, F2 etc. keys as standard function keys. I check it and now F5 key works and clears the Ctrlp cache\r\n\r\n![karabiner option](https://i.imgur.com/YT3k8SC.png). I have a Mac Sierra OS but I'm using the Das keyboard so I lost this option\r\nsystem preferences -> keyboard -> Use all F1, F2, etc. keys as standard function keys\r\n\r\n![lost option](https://i.imgur.com/xh1q0KM.png)\r\n\r\nctrl + p + F5 key combo did not work to refresh the cache\r\n\r\nInstead, I installed Karabiner-Elements and had to click function keys. At the bottom you will see the Use all F1, F2 etc. keys as standard function keys. I check it and now F5 key works and clears the Ctrlp cache\r\n\r\n![karabiner option](https://i.imgur.com/YT3k8SC.png). ",
    "veloce": "I checked with expand() and glob(), it's the same. It seems that `wildignore` patterns have a different behavior with `wildmenu`.\nI'll just adapt my wildignore. So I close the issue ;)\n. I checked with expand() and glob(), it's the same. It seems that `wildignore` patterns have a different behavior with `wildmenu`.\nI'll just adapt my wildignore. So I close the issue ;)\n. ",
    "gjunkie": "I don't map anything to it globally. I've tried to reproduce the issue and have been unable to, so this may have been an offshoot. Though I can say that it happened while the other issue was happening as well with slow performance.\n\nVIM: 7.3.87\nMac OS X 10.7.2\n. I don't map anything to it globally. I've tried to reproduce the issue and have been unable to, so this may have been an offshoot. Though I can say that it happened while the other issue was happening as well with slow performance.\n\nVIM: 7.3.87\nMac OS X 10.7.2\n. ",
    "jeetsukumaran": "Fantastic! Appreciate it. And thanks for a great plugin!\n. Hi kien,\n\nThanks. That works fine! Really loving this plugin!\n. Fantastic! Appreciate it. And thanks for a great plugin!\n. Hi kien,\n\nThanks. That works fine! Really loving this plugin!\n. ",
    "blaenk": "@kien: just wanted to say this is a welcome coincidence this was just added considering I just found out about the great ctrlp and wanted something like this option. Thanks :) It does work fine.\n\n@jgallen23: I have it working fine:\n\n``` vim\nlet g:ctrlp_custom_ignore = 'node_modules\\|DS_Store\\|git'\n```\n\nNotice the escaped regex OR operator. That caught me off guard for a while :)\n. I figured it out :) If you do\n\n``` vim\nset gcr+=a:blinkon0\n```\n\nAll is well :)\n. I had a similar problem with a different plugin when I used the non-Lion build on Lion. Are you using the Lion build? You can't get it by simply updating regular MacVim. The current latest one is snapshot 64.\n\nJust wanted to say this isn't happening with me on Lion and MacVim's Lion build snapshot 64. Of course, it could be due to something else, but at least that rules something out.\n. @kien: just wanted to say this is a welcome coincidence this was just added considering I just found out about the great ctrlp and wanted something like this option. Thanks :) It does work fine.\n\n@jgallen23: I have it working fine:\n\n``` vim\nlet g:ctrlp_custom_ignore = 'node_modules\\|DS_Store\\|git'\n```\n\nNotice the escaped regex OR operator. That caught me off guard for a while :)\n. I figured it out :) If you do\n\n``` vim\nset gcr+=a:blinkon0\n```\n\nAll is well :)\n. I had a similar problem with a different plugin when I used the non-Lion build on Lion. Are you using the Lion build? You can't get it by simply updating regular MacVim. The current latest one is snapshot 64.\n\nJust wanted to say this isn't happening with me on Lion and MacVim's Lion build snapshot 64. Of course, it could be due to something else, but at least that rules something out.\n. ",
    "Ampersandy": "I just want to say thanks for this addition to the plugin. It has made a world of difference navigating the Twitter codebase. Keep up the good work.\n. I just want to say thanks for this addition to the plugin. It has made a world of difference navigating the Twitter codebase. Keep up the good work.\n. ",
    "chevex": "Was getting annoyed at this as well. Glad to know this is available! Testing now...\n\nEDIT:\n\n![](http://i.imgur.com/A6ZgMhW.jpg)\n. I placed this in my .vimrc file:\n\n```\nlet g:ctrlp_custom_ignore = 'node_modules\\|DS_Store\\|git'\n```\n\nIt worked wonderfully for me. The pipe (|) is the pattern delimiter. @fourcolors Post what you put in your .vimrc. Or better yet paste your whole .vimrc for even better context.\n. How would you do `:CtrlP /var/www/myproject/bla/bla/theme` in .vimrc?\n. Yeah I figured I could do that, but I meant how do I set that root directory manually in the .vimrc so that it uses that root every time instead of just when I manually invoke the `CtrlP` command.\n. I think I'm suffering from the sheer number of files as well. I'm working in a huge repository and depending on my search, it sometimes takes seconds to even display the letters I'm typing, let alone the results I'm looking for. This is only for certain searches though.\n\nI also have a problem with a couple files not being found at all, but if I search from a lower-level directory (where I know these two files that won't show up would be the only ones CtrlP could find) then it finds them. If I search from the higher-level directory it finds a file with the same name in a different subdirectory but not the files in the other.\n\nI will try setting the `g:ctrlp_max_files` variable and see if that helps. Is there a comprehensive list of CtrlP settings? It seems like I've discovered several settings by encountering issues and then Googling for them, finding the same issue in the issue tracker, and then seeing new variables I can use that I've never seen in the documentation. If you wouldn't mind adding a comprehensive list of these variables in the README I think it would be tremendously useful :)\n. It would be cool if I could do something simple like drop a .ctrlp file in a project's directory with some simple config stuff in it, like the root directory to use. If that was an option then I could put a .ctrlp file in `~/work-code/project1/.ctrlp` and inside that file manually set the root directory to `~/work-code/`.\n. Interesting. Not quite the ideal solution I was hoping for but I appreciate the reply :)\n\nI've just gone ahead with this for now:\n\n```\nnoremap <C-a> :CtrlP ~/work-code/<CR>\n```\n\nSo I can do ctrl-a when I want to search all my work code.\n\nI just think it would be so cool to be able to drop `.ctrlp` files in any directory and add it to list of files/folders to look for when it's traversing up the directory tree. If it finds the file and it's empty then it just uses it as a root marker like [it already does](https://coderwall.com/p/5xv7sq). However, if it finds settings inside then it should apply those settings. One of those settings being something like\n\n```\nlet g:ctrlp_root_directory = \"../\"\n```\n\nIn my setup this would tell ctrlp to go up one more directory (to my work-code directory).\n. Perfect, thank you! Love this plugin btw. Keep up the good work.\n. Was getting annoyed at this as well. Glad to know this is available! Testing now...\n\nEDIT:\n\n![](http://i.imgur.com/A6ZgMhW.jpg)\n. I placed this in my .vimrc file:\n\n```\nlet g:ctrlp_custom_ignore = 'node_modules\\|DS_Store\\|git'\n```\n\nIt worked wonderfully for me. The pipe (|) is the pattern delimiter. @fourcolors Post what you put in your .vimrc. Or better yet paste your whole .vimrc for even better context.\n. How would you do `:CtrlP /var/www/myproject/bla/bla/theme` in .vimrc?\n. Yeah I figured I could do that, but I meant how do I set that root directory manually in the .vimrc so that it uses that root every time instead of just when I manually invoke the `CtrlP` command.\n. I think I'm suffering from the sheer number of files as well. I'm working in a huge repository and depending on my search, it sometimes takes seconds to even display the letters I'm typing, let alone the results I'm looking for. This is only for certain searches though.\n\nI also have a problem with a couple files not being found at all, but if I search from a lower-level directory (where I know these two files that won't show up would be the only ones CtrlP could find) then it finds them. If I search from the higher-level directory it finds a file with the same name in a different subdirectory but not the files in the other.\n\nI will try setting the `g:ctrlp_max_files` variable and see if that helps. Is there a comprehensive list of CtrlP settings? It seems like I've discovered several settings by encountering issues and then Googling for them, finding the same issue in the issue tracker, and then seeing new variables I can use that I've never seen in the documentation. If you wouldn't mind adding a comprehensive list of these variables in the README I think it would be tremendously useful :)\n. It would be cool if I could do something simple like drop a .ctrlp file in a project's directory with some simple config stuff in it, like the root directory to use. If that was an option then I could put a .ctrlp file in `~/work-code/project1/.ctrlp` and inside that file manually set the root directory to `~/work-code/`.\n. Interesting. Not quite the ideal solution I was hoping for but I appreciate the reply :)\n\nI've just gone ahead with this for now:\n\n```\nnoremap <C-a> :CtrlP ~/work-code/<CR>\n```\n\nSo I can do ctrl-a when I want to search all my work code.\n\nI just think it would be so cool to be able to drop `.ctrlp` files in any directory and add it to list of files/folders to look for when it's traversing up the directory tree. If it finds the file and it's empty then it just uses it as a root marker like [it already does](https://coderwall.com/p/5xv7sq). However, if it finds settings inside then it should apply those settings. One of those settings being something like\n\n```\nlet g:ctrlp_root_directory = \"../\"\n```\n\nIn my setup this would tell ctrlp to go up one more directory (to my work-code directory).\n. Perfect, thank you! Love this plugin btw. Keep up the good work.\n. ",
    "fourcolors": "is isn't working for me :/\n. Thanks for the reply! This is what my .vimrc file looks like. I'm using YouCompleteMe as well. I'm not sure if this effects anything. \n\n```\n\"\" ----------------------------------------------------------------------------\n\"\"  Random other items\n\"\" ----------------------------------------------------------------------------\n\" Custom ignore for ctrl-p\nlet g:ctrlp_custom_ignore = '\\v[\\/]\\.(DS_Storegit|hg|svn|optimized|compiled|node_modules)$'\n\"let g:ctrlp_custom_ignore = 'node_modules\\|DS_Store\\|git'\n\n\" Ignore html in syntastic since it doesn't handle handlebars\nlet syntastic_mode_map = { 'passive_filetypes': ['html'] }\n\n\" Don't require saving a buffer before switching buffers\nset hidden\n\n\" Set notes directory for vim notes\nlet g:notes_directories = ['~/Dropbox/Notes']\n\n\"\" ----------------------------------------------------------------------------\n\"\"  Key bindings / Mappings\n\"\" ----------------------------------------------------------------------------\n\" mapleader\nlet mapleader = \",\"\n\nmap <Leader>s :source $MYVIMRC<CR>\nmap <Leader>e :e $MYVIMRC<CR>\nimap <Leader>a <C-n>\nmap <Leader>b :CtrlPBuffer<CR>\n\n\"\" toggle and start nerdtree\nmap <Leader>ns :NERDTreeToggle<CR>\n\n\"\" Add control tab support\nnoremap <c-tab> :tabnext<cr>\n\n\"\" Fix command typos (stolen from Adam Katz)\nnmap ; :\n\n\"\" Highlight lines over 80 characters long by pressing leader H\nnnoremap <Leader>H :call<SID>LongLineHLToggle()<cr>\nhi OverLength ctermbg=none cterm=none\nmatch OverLength /\\%>80v/\nfun! s:LongLineHLToggle()\n  if !exists('w:longlinehl')\n    let w:longlinehl = matchadd('ErrorMsg', '.\\%>80v', 0)\n    echo \"Long lines highlighted\"\n  else\n    call matchdelete(w:longlinehl)\n    unl w:longlinehl\n    echo \"Long lines unhighlighted\"\n  endif\nendfunction\n\"\" End of highlighting lines\n\n\"\" Treat <li> and <p> tags like the block tags they are\nlet g:html_indent_tags = 'li\\|p'\n\n\"\" ---------------------------------------------------------------------------\n\"\" Text type\n\"\" ---------------------------------------------------------------------------\n\"\"\n\"\" For .rabl type\nau BufRead,BufNewFile *.rabl setf ruby\n\n\"\" For Stylus\"\nau BufRead,BufNewFile *.styl setf sass\n\n\"\" For Haml\nau! BufRead,BufNewFile *.haml setfiletype haml\n\n\"\" Highlighting for .ejs files\nau BufNewFile,BufRead *.ejs set filetype=html\n\n\"\" Highlighting for .handlebars files\nau BufRead,BufNewFile *.handlebars,*.hbs set ft=html syntax=handlebars\n\n\"\" ---------------------------------------------------------------------------\n\"\" Color Schemes\n\"\" ---------------------------------------------------------------------------\n\"\"\n\"\" Color scheme\nsyntax enable\n\"\" set background=dark\n\n\"\" Font stuff\nset guifont=Inconsolata-dz\\ for\\ Powerline:h17\n\n\"\" Colors in your font\nset t_Co=256\n\nset relativenumber\nset number\nset numberwidth=5\nset nowrap\n```\n. I'm trying to ignore the node_modules folder in my project. I tried both cleaning my cache and restarting Vim with it not working.\n. is isn't working for me :/\n. Thanks for the reply! This is what my .vimrc file looks like. I'm using YouCompleteMe as well. I'm not sure if this effects anything. \n\n```\n\"\" ----------------------------------------------------------------------------\n\"\"  Random other items\n\"\" ----------------------------------------------------------------------------\n\" Custom ignore for ctrl-p\nlet g:ctrlp_custom_ignore = '\\v[\\/]\\.(DS_Storegit|hg|svn|optimized|compiled|node_modules)$'\n\"let g:ctrlp_custom_ignore = 'node_modules\\|DS_Store\\|git'\n\n\" Ignore html in syntastic since it doesn't handle handlebars\nlet syntastic_mode_map = { 'passive_filetypes': ['html'] }\n\n\" Don't require saving a buffer before switching buffers\nset hidden\n\n\" Set notes directory for vim notes\nlet g:notes_directories = ['~/Dropbox/Notes']\n\n\"\" ----------------------------------------------------------------------------\n\"\"  Key bindings / Mappings\n\"\" ----------------------------------------------------------------------------\n\" mapleader\nlet mapleader = \",\"\n\nmap <Leader>s :source $MYVIMRC<CR>\nmap <Leader>e :e $MYVIMRC<CR>\nimap <Leader>a <C-n>\nmap <Leader>b :CtrlPBuffer<CR>\n\n\"\" toggle and start nerdtree\nmap <Leader>ns :NERDTreeToggle<CR>\n\n\"\" Add control tab support\nnoremap <c-tab> :tabnext<cr>\n\n\"\" Fix command typos (stolen from Adam Katz)\nnmap ; :\n\n\"\" Highlight lines over 80 characters long by pressing leader H\nnnoremap <Leader>H :call<SID>LongLineHLToggle()<cr>\nhi OverLength ctermbg=none cterm=none\nmatch OverLength /\\%>80v/\nfun! s:LongLineHLToggle()\n  if !exists('w:longlinehl')\n    let w:longlinehl = matchadd('ErrorMsg', '.\\%>80v', 0)\n    echo \"Long lines highlighted\"\n  else\n    call matchdelete(w:longlinehl)\n    unl w:longlinehl\n    echo \"Long lines unhighlighted\"\n  endif\nendfunction\n\"\" End of highlighting lines\n\n\"\" Treat <li> and <p> tags like the block tags they are\nlet g:html_indent_tags = 'li\\|p'\n\n\"\" ---------------------------------------------------------------------------\n\"\" Text type\n\"\" ---------------------------------------------------------------------------\n\"\"\n\"\" For .rabl type\nau BufRead,BufNewFile *.rabl setf ruby\n\n\"\" For Stylus\"\nau BufRead,BufNewFile *.styl setf sass\n\n\"\" For Haml\nau! BufRead,BufNewFile *.haml setfiletype haml\n\n\"\" Highlighting for .ejs files\nau BufNewFile,BufRead *.ejs set filetype=html\n\n\"\" Highlighting for .handlebars files\nau BufRead,BufNewFile *.handlebars,*.hbs set ft=html syntax=handlebars\n\n\"\" ---------------------------------------------------------------------------\n\"\" Color Schemes\n\"\" ---------------------------------------------------------------------------\n\"\"\n\"\" Color scheme\nsyntax enable\n\"\" set background=dark\n\n\"\" Font stuff\nset guifont=Inconsolata-dz\\ for\\ Powerline:h17\n\n\"\" Colors in your font\nset t_Co=256\n\nset relativenumber\nset number\nset numberwidth=5\nset nowrap\n```\n. I'm trying to ignore the node_modules folder in my project. I tried both cleaning my cache and restarting Vim with it not working.\n. ",
    "JustinAzoff": "@fourcolors \n\n```\nlet g:ctrlp_custom_ignore = '\\v[\\/]\\.(DS_Storegit|hg|svn|optimized|compiled|node_modules)$'\n```\n\nnote the `\\.` at the beginning.  This is matching `.hg`, `.svn`, or.. `.node_modules` which is not what you want.\n. @fourcolors \n\n```\nlet g:ctrlp_custom_ignore = '\\v[\\/]\\.(DS_Storegit|hg|svn|optimized|compiled|node_modules)$'\n```\n\nnote the `\\.` at the beginning.  This is matching `.hg`, `.svn`, or.. `.node_modules` which is not what you want.\n. ",
    "spig": "@fourcolors \n\nI also noticed the my mru cache wasn't clearing so I had to do it manually by removing the cache.txt from ~/.cache/ctlrp/mru - this was where I was still seeing files that I thought should be ignored.\n. Here is what I have that ignores all node_modules folders at any level I've tested:\n\n`let g:ctrlp_custom_ignore = '\\v[\\/](node_modules|target|dist)|(\\.(swp|ico|git|svn))$'`\n. @fourcolors \n\nI also noticed the my mru cache wasn't clearing so I had to do it manually by removing the cache.txt from ~/.cache/ctlrp/mru - this was where I was still seeing files that I thought should be ignored.\n. Here is what I have that ignores all node_modules folders at any level I've tested:\n\n`let g:ctrlp_custom_ignore = '\\v[\\/](node_modules|target|dist)|(\\.(swp|ico|git|svn))$'`\n. ",
    "spikebrehm": "This successfully ignores `./node_modules`:\n\n```\nlet g:ctrlp_custom_ignore = 'node_modules\\|DS_Store\\|git'\n```\n\nWhat about ignoring `nodule_modules` in subdirectories?  Like `./examples/foo/node_modules`?\n. This successfully ignores `./node_modules`:\n\n```\nlet g:ctrlp_custom_ignore = 'node_modules\\|DS_Store\\|git'\n```\n\nWhat about ignoring `nodule_modules` in subdirectories?  Like `./examples/foo/node_modules`?\n. ",
    "lmartins": "Im still can't find a way to have ctrlp to ignore things like node_modules or jspm_packages in subfolders inside my git repo.\n\nMy repo has the following structure:\n\n```\nREPO\n   - Project A\n        - node_modules\n   - Project B\n        - node_modules\n   - ...\n```\n\nNo matter what I try, and I've tried every sample above, I always get results from those folders. \nBtw, im using Ag silver, not sure if it has any relation with this.\n\n```\n\" The Silver Searcher\n\" http://robots.thoughtbot.com/faster-grepping-in-vim\nif executable('ag')\n  \" Use ag over grep\n  set grepprg=ag\\ --nogroup\\ --nocolor\n\n  \" Use ag in CtrlP for listing files. Lightning fast and respects .gitignore\n  let g:ctrlp_user_command = 'ag %s -l --nocolor -g \"\"'\n\n  \" ag is fast enough that CtrlP doesn't need to cache\n  let g:ctrlp_use_caching = 0\nendif\n```\n\nAny tips?\n. Thanks @cabouffard , I did managed to get it working as I wanted, not really sure how. Im just switched to Vim recently, still a lot to learn ;)\n. Im still can't find a way to have ctrlp to ignore things like node_modules or jspm_packages in subfolders inside my git repo.\n\nMy repo has the following structure:\n\n```\nREPO\n   - Project A\n        - node_modules\n   - Project B\n        - node_modules\n   - ...\n```\n\nNo matter what I try, and I've tried every sample above, I always get results from those folders. \nBtw, im using Ag silver, not sure if it has any relation with this.\n\n```\n\" The Silver Searcher\n\" http://robots.thoughtbot.com/faster-grepping-in-vim\nif executable('ag')\n  \" Use ag over grep\n  set grepprg=ag\\ --nogroup\\ --nocolor\n\n  \" Use ag in CtrlP for listing files. Lightning fast and respects .gitignore\n  let g:ctrlp_user_command = 'ag %s -l --nocolor -g \"\"'\n\n  \" ag is fast enough that CtrlP doesn't need to cache\n  let g:ctrlp_use_caching = 0\nendif\n```\n\nAny tips?\n. Thanks @cabouffard , I did managed to get it working as I wanted, not really sure how. Im just switched to Vim recently, still a lot to learn ;)\n. ",
    "19WAS85": "Hi folks, I'm using the .gitignore itself to filter the useless files in ctrlp, the way I described in superuser (https://superuser.com/questions/649714/can-i-get-the-vim-ctrlp-plugin-to-ignore-a-specific-folder-in-one-project/900794#900794):\n\n---\n\nTo solve this with a file like `.gitignore` (based in the Nathan grep solution), I created a file named `.ctrlpignore` and put the patterns that should be ignored, separated by lines:\n\n```\nnode_modules/\n\\.log$\n...\n```\n\nAnd my ctrlp configuration:\n\n```\nlet g:ctrlp_user_command = 'find %s -type f | grep -v \"`cat .ctrlpignore`\"'\n```\n\nMaybe the `.gitignore` itself can be used to ignore the files in ctrlp, not needing to create a new file to do almost the same thing.\n\n---\n\nI hope it can help.\n. Hi folks, I'm using the .gitignore itself to filter the useless files in ctrlp, the way I described in superuser (https://superuser.com/questions/649714/can-i-get-the-vim-ctrlp-plugin-to-ignore-a-specific-folder-in-one-project/900794#900794):\n\n---\n\nTo solve this with a file like `.gitignore` (based in the Nathan grep solution), I created a file named `.ctrlpignore` and put the patterns that should be ignored, separated by lines:\n\n```\nnode_modules/\n\\.log$\n...\n```\n\nAnd my ctrlp configuration:\n\n```\nlet g:ctrlp_user_command = 'find %s -type f | grep -v \"`cat .ctrlpignore`\"'\n```\n\nMaybe the `.gitignore` itself can be used to ignore the files in ctrlp, not needing to create a new file to do almost the same thing.\n\n---\n\nI hope it can help.\n. ",
    "cabouffard": "@lmartins From what I have read, custom_ignore is not working when using a custom finder.\nYou must create a `.agignore` in your home directory or in the project directory using the same syntax as a `.gitignore`.\n\nPlease refer to the following link for a deeper explanation:\nhttp://stackoverflow.com/a/18601066\n. @lmartins From what I have read, custom_ignore is not working when using a custom finder.\nYou must create a `.agignore` in your home directory or in the project directory using the same syntax as a `.gitignore`.\n\nPlease refer to the following link for a deeper explanation:\nhttp://stackoverflow.com/a/18601066\n. ",
    "lesterzone": "Thanks @spig,  this\n\n```\nlet g:ctrlp_custom_ignore = '\\v[\\/](node_modules|target|dist)|(\\.(swp|ico|git|svn))$'\n```\n\nis working properly.\n\nAmazing project!\n. Interesting, I'll like to ignore `golang` binaries,\nI'm using for development:\n\n```\nCompileDaemon -build=\"go build -o server\" -directory=\".\" -command=\"./server\"\n```\n\nand it generates a `server` file, which I'll like to ignore since I'll like to `ctrl p server` and open `server.go`\n\nThanks for an amazing project\n. Thanks @spig,  this\n\n```\nlet g:ctrlp_custom_ignore = '\\v[\\/](node_modules|target|dist)|(\\.(swp|ico|git|svn))$'\n```\n\nis working properly.\n\nAmazing project!\n. Interesting, I'll like to ignore `golang` binaries,\nI'm using for development:\n\n```\nCompileDaemon -build=\"go build -o server\" -directory=\".\" -command=\"./server\"\n```\n\nand it generates a `server` file, which I'll like to ignore since I'll like to `ctrl p server` and open `server.go`\n\nThanks for an amazing project\n. ",
    "milushov": "my workaround\n\n```\nlet g:ctrlp_user_command = ['.git', 'cd %s && git ls-files --exclude-standard -co |& egrep -v \"\\.(png|jpg|jpeg|gif)$|node_modules\"']\n```\n. nice\n. maybe this should be realized inside of plugin? cause it's pain each time stumble with that kind of 'bug'? :)\n. plus one :thumbsup: for this feature request :smiley: (yep, i have read entire thread)\n. :+1:  :+1:  :+1: \n. +1\n. +1\n. thanks\n. my workaround\n\n```\nlet g:ctrlp_user_command = ['.git', 'cd %s && git ls-files --exclude-standard -co |& egrep -v \"\\.(png|jpg|jpeg|gif)$|node_modules\"']\n```\n. nice\n. maybe this should be realized inside of plugin? cause it's pain each time stumble with that kind of 'bug'? :)\n. plus one :thumbsup: for this feature request :smiley: (yep, i have read entire thread)\n. :+1:  :+1:  :+1: \n. +1\n. +1\n. thanks\n. ",
    "hew": "I tried a bunch of these options. For me, the only one that seemed to work is \n\n`let g:ctrlp_custom_ignore = '\\v[\\/](node_modules|target|dist)|(\\.(swp|ico|git|svn))$'`\n\nfrom @spig \n. I tried a bunch of these options. For me, the only one that seemed to work is \n\n`let g:ctrlp_custom_ignore = '\\v[\\/](node_modules|target|dist)|(\\.(swp|ico|git|svn))$'`\n\nfrom @spig \n. ",
    "paulosborne": "Solution posted by @blaenk works wonderfully :+1: \n. Solution posted by @blaenk works wonderfully :+1: \n. ",
    "dzlab": "this is awesome, I got huge perf boost by ignoring `target` folder in a scala project.\n. this is awesome, I got huge perf boost by ignoring `target` folder in a scala project.\n. ",
    "daoanhnhat1995": "let g:ctrlp_custom_ignore = '\\v[\\/](node_modules|target|dist)|(.(swp|ico|git|svn))$'\n works perfectly\n. let g:ctrlp_custom_ignore = '\\v[\\/](node_modules|target|dist)|(.(swp|ico|git|svn))$'\n works perfectly\n. ",
    "ain": "@hew's version worked best for me as well. Thanks a lot for sharing!\n. @hew's version worked best for me as well. Thanks a lot for sharing!\n. ",
    "nickrivadeneira": "Here's my `g:ctrlp_user_command`, which uses [the silver searcher](https://github.com/ggreer/the_silver_searcher) because it's so damn fast:\n\n``` vimscript\nif executable('ag')\n  let g:ctrlp_user_command = 'ag %s -l --nocolor --hidden -g \"\"'\nendif\n```\n\nand then my `~/.agignore`:\n\n```\nnode_modules\nbower_components\ngit\n```\n\nIt's working nicely for me.\n. @skgbanga I believe `-i` or `--ignore-case` only applies to selection, not rejection, of results in `ag`. So a case insensitive search for `foo` will match on `FOO`, but having `foo` in `.agignore` will not filter out `FOO`.\r\n\r\n[This StackOverflow answer](https://stackoverflow.com/a/11116789/337903) hints at an option. If you want to filter out case insensitive `node_modules`, you could write the following:\r\n```\r\n[nN][oO][dD][eE]_[mM][oO][dD][uU][lL][eE][sS]\r\n```\r\nAwkward, but it should work. There may be other options. I believe `.agignore` follows the same rules as `.gitignore`, so searching on `.gitignore` syntax is gonna be your best starting point. If you find something, post back here, because I'm curious now :). +1 - this would be sweet. Any luck @JosephFerano?\n. Here's my `g:ctrlp_user_command`, which uses [the silver searcher](https://github.com/ggreer/the_silver_searcher) because it's so damn fast:\n\n``` vimscript\nif executable('ag')\n  let g:ctrlp_user_command = 'ag %s -l --nocolor --hidden -g \"\"'\nendif\n```\n\nand then my `~/.agignore`:\n\n```\nnode_modules\nbower_components\ngit\n```\n\nIt's working nicely for me.\n. @skgbanga I believe `-i` or `--ignore-case` only applies to selection, not rejection, of results in `ag`. So a case insensitive search for `foo` will match on `FOO`, but having `foo` in `.agignore` will not filter out `FOO`.\r\n\r\n[This StackOverflow answer](https://stackoverflow.com/a/11116789/337903) hints at an option. If you want to filter out case insensitive `node_modules`, you could write the following:\r\n```\r\n[nN][oO][dD][eE]_[mM][oO][dD][uU][lL][eE][sS]\r\n```\r\nAwkward, but it should work. There may be other options. I believe `.agignore` follows the same rules as `.gitignore`, so searching on `.gitignore` syntax is gonna be your best starting point. If you find something, post back here, because I'm curious now :). +1 - this would be sweet. Any luck @JosephFerano?\n. ",
    "atcol": "I was using `ctrlp_user_command` which prevented `ctrlp_custom_ignore` from working. Removing the former fixed the latter for me!. I was using `ctrlp_user_command` which prevented `ctrlp_custom_ignore` from working. Removing the former fixed the latter for me!. ",
    "anpel": "I ended up doing what @wagnerandrade suggested, I just wrapped it in an if block to check if the .ctrlpignore file actually exists.\r\n\r\nThe section of my `.vimrc` looks like this:\r\n```\r\nif filereadable(\".ctrlpignore\")\r\n    let g:ctrlp_user_command = 'find %s -type f | grep -v \"`cat .ctrlpignore`\"'\r\nendif\r\n```\r\n\r\n. @a-eid Yes, you can add these directly to your `.vimrc`.. I ended up doing what @wagnerandrade suggested, I just wrapped it in an if block to check if the .ctrlpignore file actually exists.\r\n\r\nThe section of my `.vimrc` looks like this:\r\n```\r\nif filereadable(\".ctrlpignore\")\r\n    let g:ctrlp_user_command = 'find %s -type f | grep -v \"`cat .ctrlpignore`\"'\r\nendif\r\n```\r\n\r\n. @a-eid Yes, you can add these directly to your `.vimrc`.. ",
    "a-eid": "where do I add those commands? to `vimrc` directly?\r\n. where do I add those commands? to `vimrc` directly?\r\n. ",
    "skgbanga": "@nickrivadeneira is there a way to make that case insensitive? I added `-I` option but that didn't help. . @nickrivadeneira is there a way to make that case insensitive? I added `-I` option but that didn't help. . ",
    "diegoviola": "Thank you, and thanks for this great plug-in. :)\n. Why not just fork it?\n. Thank you, and thanks for this great plug-in. :)\n. Why not just fork it?\n. ",
    "pda": "Excellent - thanks, that's exactly what I was after.\n\nDo you think it's worth updating the README to suggest `g:ctrlp_custom_ignore` as an alternative?\n. Excellent - thanks, that's exactly what I was after.\n\nDo you think it's worth updating the README to suggest `g:ctrlp_custom_ignore` as an alternative?\n. ",
    "pcapriotti": "Thanks!\n\nThis works, but I would prefer to keep the MRU list as it is and only affect the buffer list. Also, it would be nice if the currently opened file were hidden as in the buffer list.\n. Thanks!\n\nThis works, but I would prefer to keep the MRU list as it is and only affect the buffer list. Also, it would be nice if the currently opened file were hidden as in the buffer list.\n. ",
    "rubiii": "Oh and, please feel free to close this \"issue\" ;)\n. Oh and, please feel free to close this \"issue\" ;)\n. ",
    "thenoseman": "Also from me a sincere thank you. Been using fuzzyfinder and your work beats it hands down.\nThe feature that auto-ignores buffer created by plugins _alone_ is fantastic.\n\nThank you very much!\n. Also from me a sincere thank you. Been using fuzzyfinder and your work beats it hands down.\nThe feature that auto-ignores buffer created by plugins _alone_ is fantastic.\n\nThank you very much!\n. ",
    "kusnier": ":+1: :clap:\nThis is the best plugin for vim.\n. :+1: :clap:\nThis is the best plugin for vim.\n. ",
    "askedrelic": "I'll ditto, this has taken over FuzzyFinder and LustyJuggler for me. Thanks for making a great plugin!\n. I'll ditto, this has taken over FuzzyFinder and LustyJuggler for me. Thanks for making a great plugin!\n. ",
    "regedarek": "Thanks, great plugin!\n\nYes, for me this option has high priority :P \n. Thanks, great plugin!\n\nYes, for me this option has high priority :P \n. ",
    "glynnforrest": "Great, thanks very much for your quick response. I'm still a bit stuck trying to get `<c-o>` to do what I want though. Here's the steps I'm hoping to go through:\n\nOpen vim\n\n`:cd /path/to/project`\n\n`:ctrlp`\n\nsearch for a string, mark some files with `<c-z>`\n\npress `<c-o>` and the marked files are all opened in the current window, one visible and the rest hidden.\n\nIs this possible with the current plugin? I guess I was hoping for the equivalent of `let g:ctrlp_open_multi = '1r'`, but I don't think that will work just now.\n. Brilliant! You've just made my day. Thanks so much again!\n. Great, thanks very much for your quick response. I'm still a bit stuck trying to get `<c-o>` to do what I want though. Here's the steps I'm hoping to go through:\n\nOpen vim\n\n`:cd /path/to/project`\n\n`:ctrlp`\n\nsearch for a string, mark some files with `<c-z>`\n\npress `<c-o>` and the marked files are all opened in the current window, one visible and the rest hidden.\n\nIs this possible with the current plugin? I guess I was hoping for the equivalent of `let g:ctrlp_open_multi = '1r'`, but I don't think that will work just now.\n. Brilliant! You've just made my day. Thanks so much again!\n. ",
    "scottnicolson": "Sure no worries.  See below.\n\nVIM - Vi IMproved 7.3 (2010 Aug 15, compiled Jan 10 2012 09:56:24)\nMacOS X (unix) version\nIncluded patches: 1-390\nCompiled by scott@mbp.local\nHuge version with MacVim GUI.  Features included (+) or not (-):\n+arabic +autocmd +balloon_eval +browse ++builtin_terms +byte_offset +cindent \n+clientserver +clipboard +cmdline_compl +cmdline_hist +cmdline_info +comments \n+conceal +cryptv -cscope +cursorbind +cursorshape +dialog_con_gui +diff \n+digraphs +dnd -ebcdic +emacs_tags +eval +ex_extra +extra_search +farsi \n+file_in_path +find_in_path +float +folding -footer +fork() +fullscreen \n-gettext -hangul_input +iconv +insert_expand +jumplist +keymap +langmap \n+libcall +linebreak +lispindent +listcmds +localmap -lua +menu +mksession \n+modify_fname +mouse +mouseshape +mouse_dec -mouse_gpm -mouse_jsbterm \n+mouse_netterm -mouse_sysmouse +mouse_xterm +mouse_urxvt +multi_byte \n+multi_lang -mzscheme +netbeans_intg +odbeditor +path_extra +perl \n+persistent_undo +postscript +printer +profile +python -python3 +quickfix \n+reltime +rightleft +ruby +scrollbind +signs +smartindent -sniff +startuptime \n+statusline -sun_workshop +syntax +tag_binary +tag_old_static -tag_any_white \n+tcl +terminfo +termresponse +textobjects +title +toolbar +transparency \n+user_commands +vertsplit +virtualedit +visual +visualextra +viminfo +vreplace \n+wildignore +wildmenu +windows +writebackup -X11 -xfontset +xim -xsmp \n-xterm_clipboard -xterm_save \n   system vimrc file: \"$VIM/vimrc\"\n     user vimrc file: \"$HOME/.vimrc\"\n      user exrc file: \"$HOME/.exrc\"\n  system gvimrc file: \"$VIM/gvimrc\"\n    user gvimrc file: \"$HOME/.gvimrc\"\n    system menu file: \"$VIMRUNTIME/menu.vim\"\n  fall-back for $VIM: \"/Applications/MacVim.app/Contents/Resources/vim\"\nCompilation: gcc -c -I. -Iproto -DHAVE_CONFIG_H -DFEAT_GUI_MACVIM -Wall -Wno-unknown-pragmas -pipe  -DMACOS_X_UNIX -no-cpp-precomp  -g -O2 -arch x86_64 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1     -I/System/Library/Frameworks/Tcl.framework/Headers  -D_REENTRANT=1  -D_THREAD_SAFE=1  -D_DARWIN_C_SOURCE=1  \nLinking: gcc   -L.   -L.        -arch x86_64 -L/usr/local/lib -o Vim -framework Cocoa -framework Carbon      -lncurses -liconv -framework Cocoa    -fstack-protector -L/usr/local/lib  -L/System/Library/Perl/5.12/darwin-thread-multi-2level/CORE -lperl -lm -lutil -lc -framework Python  -F/System/Library/Frameworks -framework Tcl -framework CoreFoundation -framework Ruby   \n. @blaenk I used homebrew to compile macvim snapshot 64 before i posted this issue. But thanks for the tip though.\n. No worries. I will give this a go next week and let you know how I get on.\n. I could seem to get the above instructions working.  Couldn't figure how to get ctrlp into my runtime path.\n\nHowever i ran ctrlp in a different directory than the project i am working on and it seemed to work fine.\nI created a new rails project and git inited it and ctrlp works fine. If i go back to my current project it still hangs.\n\nIt doesn't seem to be crashing out on me now, although i use ctrl+c to stop the process when it hangs.  it gets to 846 before it stops.  Perhaps that is some clue for me to look somewhere.  \n\nAny ideas on next steps to see why this directory structure breaks?\n. Update.  Went back to vim after writing last comment and it appears the plugin is working now.  It is just very slow on the initial build of the buffer.  Any ideas what to look for in terms of problems files?\n. Found the directory that was causing the issue.  Loads of files generated by tests that weren't cleaned up.  would appear the number of files created caused the massive slow down.\n\nAll looks okay now.\n\nNot seen the same original crash again.  Will keep you posted if i see it again.\n. Sure no worries.  See below.\n\nVIM - Vi IMproved 7.3 (2010 Aug 15, compiled Jan 10 2012 09:56:24)\nMacOS X (unix) version\nIncluded patches: 1-390\nCompiled by scott@mbp.local\nHuge version with MacVim GUI.  Features included (+) or not (-):\n+arabic +autocmd +balloon_eval +browse ++builtin_terms +byte_offset +cindent \n+clientserver +clipboard +cmdline_compl +cmdline_hist +cmdline_info +comments \n+conceal +cryptv -cscope +cursorbind +cursorshape +dialog_con_gui +diff \n+digraphs +dnd -ebcdic +emacs_tags +eval +ex_extra +extra_search +farsi \n+file_in_path +find_in_path +float +folding -footer +fork() +fullscreen \n-gettext -hangul_input +iconv +insert_expand +jumplist +keymap +langmap \n+libcall +linebreak +lispindent +listcmds +localmap -lua +menu +mksession \n+modify_fname +mouse +mouseshape +mouse_dec -mouse_gpm -mouse_jsbterm \n+mouse_netterm -mouse_sysmouse +mouse_xterm +mouse_urxvt +multi_byte \n+multi_lang -mzscheme +netbeans_intg +odbeditor +path_extra +perl \n+persistent_undo +postscript +printer +profile +python -python3 +quickfix \n+reltime +rightleft +ruby +scrollbind +signs +smartindent -sniff +startuptime \n+statusline -sun_workshop +syntax +tag_binary +tag_old_static -tag_any_white \n+tcl +terminfo +termresponse +textobjects +title +toolbar +transparency \n+user_commands +vertsplit +virtualedit +visual +visualextra +viminfo +vreplace \n+wildignore +wildmenu +windows +writebackup -X11 -xfontset +xim -xsmp \n-xterm_clipboard -xterm_save \n   system vimrc file: \"$VIM/vimrc\"\n     user vimrc file: \"$HOME/.vimrc\"\n      user exrc file: \"$HOME/.exrc\"\n  system gvimrc file: \"$VIM/gvimrc\"\n    user gvimrc file: \"$HOME/.gvimrc\"\n    system menu file: \"$VIMRUNTIME/menu.vim\"\n  fall-back for $VIM: \"/Applications/MacVim.app/Contents/Resources/vim\"\nCompilation: gcc -c -I. -Iproto -DHAVE_CONFIG_H -DFEAT_GUI_MACVIM -Wall -Wno-unknown-pragmas -pipe  -DMACOS_X_UNIX -no-cpp-precomp  -g -O2 -arch x86_64 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1     -I/System/Library/Frameworks/Tcl.framework/Headers  -D_REENTRANT=1  -D_THREAD_SAFE=1  -D_DARWIN_C_SOURCE=1  \nLinking: gcc   -L.   -L.        -arch x86_64 -L/usr/local/lib -o Vim -framework Cocoa -framework Carbon      -lncurses -liconv -framework Cocoa    -fstack-protector -L/usr/local/lib  -L/System/Library/Perl/5.12/darwin-thread-multi-2level/CORE -lperl -lm -lutil -lc -framework Python  -F/System/Library/Frameworks -framework Tcl -framework CoreFoundation -framework Ruby   \n. @blaenk I used homebrew to compile macvim snapshot 64 before i posted this issue. But thanks for the tip though.\n. No worries. I will give this a go next week and let you know how I get on.\n. I could seem to get the above instructions working.  Couldn't figure how to get ctrlp into my runtime path.\n\nHowever i ran ctrlp in a different directory than the project i am working on and it seemed to work fine.\nI created a new rails project and git inited it and ctrlp works fine. If i go back to my current project it still hangs.\n\nIt doesn't seem to be crashing out on me now, although i use ctrl+c to stop the process when it hangs.  it gets to 846 before it stops.  Perhaps that is some clue for me to look somewhere.  \n\nAny ideas on next steps to see why this directory structure breaks?\n. Update.  Went back to vim after writing last comment and it appears the plugin is working now.  It is just very slow on the initial build of the buffer.  Any ideas what to look for in terms of problems files?\n. Found the directory that was causing the issue.  Loads of files generated by tests that weren't cleaned up.  would appear the number of files created caused the massive slow down.\n\nAll looks okay now.\n\nNot seen the same original crash again.  Will keep you posted if i see it again.\n. ",
    "vrybas": "I came here from Google. I got exactly the same error message but I'm not using ctrlp (yet). \n\n```\n[NSMachPort handlePortMessage:]: dropping incoming DO message because the connection is invalid\n```\n\nList of my plugins (from Vundle)\n\n```\n Bundle 'vim-ruby/vim-ruby'\n Bundle 'tpope/vim-rails'\n Bundle 'scrooloose/nerdtree'\n Bundle 'scrooloose/nerdcommenter'\n Bundle 'mileszs/ack.vim'\n Bundle 'vim-scripts/bufexplorer.zip'\n Bundle 'topfunky/PeepOpen-EditorSupport', {'rtp': 'vim-peepopen/'}\n Bundle 'vim-scripts/delimitMate.vim'\n Bundle 'Lokaltog/vim-easymotion'\n Bundle 'tpope/vim-fugitive'\n Bundle 'sjl/gundo.vim'\n Bundle 'tsaleh/vim-matchit'\n Bundle 'cfurrow/vim-l9'\n Bundle 'chrismetcalf/vim-autocomplpop'\n Bundle 'ervandew/supertab'\n Bundle 'duff/vim-scratch'\n Bundle 'tpope/vim-surround'\n Bundle 'vim-scripts/ZoomWin'\n Bundle 'altercation/vim-colors-solarized'\n```\n\nBut it's not crashing my MacVim though. Just an error in console from which MacVim was started.\n. I came here from Google. I got exactly the same error message but I'm not using ctrlp (yet). \n\n```\n[NSMachPort handlePortMessage:]: dropping incoming DO message because the connection is invalid\n```\n\nList of my plugins (from Vundle)\n\n```\n Bundle 'vim-ruby/vim-ruby'\n Bundle 'tpope/vim-rails'\n Bundle 'scrooloose/nerdtree'\n Bundle 'scrooloose/nerdcommenter'\n Bundle 'mileszs/ack.vim'\n Bundle 'vim-scripts/bufexplorer.zip'\n Bundle 'topfunky/PeepOpen-EditorSupport', {'rtp': 'vim-peepopen/'}\n Bundle 'vim-scripts/delimitMate.vim'\n Bundle 'Lokaltog/vim-easymotion'\n Bundle 'tpope/vim-fugitive'\n Bundle 'sjl/gundo.vim'\n Bundle 'tsaleh/vim-matchit'\n Bundle 'cfurrow/vim-l9'\n Bundle 'chrismetcalf/vim-autocomplpop'\n Bundle 'ervandew/supertab'\n Bundle 'duff/vim-scratch'\n Bundle 'tpope/vim-surround'\n Bundle 'vim-scripts/ZoomWin'\n Bundle 'altercation/vim-colors-solarized'\n```\n\nBut it's not crashing my MacVim though. Just an error in console from which MacVim was started.\n. ",
    "jamischarles": "I was able to resolve the issue by doing 2 things:\n\n1) `$ mvim -u NONE` which starts vim without reading .vimrc\n2) MacVim -> Preferences -> Open Untitled window: only when macVim launches\n\nFor me some of the windows would get in a bad state and would crash. Then on re-open, it would try to open those windows and would crash again. 1) let met me open Vim, but those windows still would persist. 2) would close those windows and just drop them when I'd close vim, which would restore things back to normal\n\n```\n2015-03-26 14:33:36.705 Vim[28572:354003] *** -[NSMachPort handlePortMessage:]: dropping incoming DO message because the connection is invalid\n2015-03-26 14:33:36.706 Vim[28506:353812] *** -[NSMachPort handlePortMessage:]: dropping incoming DO message because the connection is invalid\n```\n\nFollowing these steps would reset MacVim to a state where it would start normally again.\n. I was able to resolve the issue by doing 2 things:\n\n1) `$ mvim -u NONE` which starts vim without reading .vimrc\n2) MacVim -> Preferences -> Open Untitled window: only when macVim launches\n\nFor me some of the windows would get in a bad state and would crash. Then on re-open, it would try to open those windows and would crash again. 1) let met me open Vim, but those windows still would persist. 2) would close those windows and just drop them when I'd close vim, which would restore things back to normal\n\n```\n2015-03-26 14:33:36.705 Vim[28572:354003] *** -[NSMachPort handlePortMessage:]: dropping incoming DO message because the connection is invalid\n2015-03-26 14:33:36.706 Vim[28506:353812] *** -[NSMachPort handlePortMessage:]: dropping incoming DO message because the connection is invalid\n```\n\nFollowing these steps would reset MacVim to a state where it would start normally again.\n. ",
    "spate": "I can understand not wanting to add a bunch of work-arounds. Just adding a note here that the situation's a little different from what you'd stated, to complete the paper trail here in case someone else stumbles across the same issue.\n\nThe only place laststatus is being set is via the ctags plugin; I don't touch laststatus in my .vimrc (what I posted above was my complete .vimrc file at the time). Whenever the statusline is incorrect, I can check its value and laststatus=2.\n\nIn any case, the upshot is that it appears that the ctags_statusline feature of that ctags script is incompatible with ctrlp.\n. I can understand not wanting to add a bunch of work-arounds. Just adding a note here that the situation's a little different from what you'd stated, to complete the paper trail here in case someone else stumbles across the same issue.\n\nThe only place laststatus is being set is via the ctags plugin; I don't touch laststatus in my .vimrc (what I posted above was my complete .vimrc file at the time). Whenever the statusline is incorrect, I can check its value and laststatus=2.\n\nIn any case, the upshot is that it appears that the ctags_statusline feature of that ctags script is incompatible with ctrlp.\n. ",
    "latortuga": "Interestingly I was playing around a bit with some of my config to see if maybe I was still the source of the problem and it turns out the following lines were causing my problem (or rather, I can't replicate my issue after getting rid of them):\n\n```\nau BufWinLeave * mkview\nau BufWinEnter * silent loadview\n```\n\nI suspect it's related to vim sessions and not your plugin!\n. I appreciate the note! Is there a way to know where the view files are\nstored and/or what they are named? My workaround was to simply remove the\ntwo lines from my vimrc and install session.vim which is pretty great and\ndoes exactly what I want. Those two lines have been in my vimrc for a long\ntime and I didn't have a comment next to them so I'm not even sure where I\noriginally found them.\n\nOn Thu, Jan 12, 2012 at 1:47 PM, Matthew Pietz <\nreply@reply.github.com\n\n> wrote:\n> \n> Hi @latortuga, I suspect you figured this out already, but you can open\n> vim view files as regular files, in there you'll probably find the command\n> like `cd ~/projects/project_b`, which you can just delete and that will fix\n> your problem.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/kien/ctrlp.vim/issues/74#issuecomment-3469263\n. Interestingly I was playing around a bit with some of my config to see if maybe I was still the source of the problem and it turns out the following lines were causing my problem (or rather, I can't replicate my issue after getting rid of them):\n\n```\nau BufWinLeave * mkview\nau BufWinEnter * silent loadview\n```\n\nI suspect it's related to vim sessions and not your plugin!\n. I appreciate the note! Is there a way to know where the view files are\nstored and/or what they are named? My workaround was to simply remove the\ntwo lines from my vimrc and install session.vim which is pretty great and\ndoes exactly what I want. Those two lines have been in my vimrc for a long\ntime and I didn't have a comment next to them so I'm not even sure where I\noriginally found them.\n\nOn Thu, Jan 12, 2012 at 1:47 PM, Matthew Pietz <\nreply@reply.github.com\n\n> wrote:\n> \n> Hi @latortuga, I suspect you figured this out already, but you can open\n> vim view files as regular files, in there you'll probably find the command\n> like `cd ~/projects/project_b`, which you can just delete and that will fix\n> your problem.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/kien/ctrlp.vim/issues/74#issuecomment-3469263\n. ",
    "sirlancelot": "Hi @latortuga, I suspect you figured this out already, but you can open vim view files as regular files, in there you'll probably find the command like `cd ~/projects/project_b`, which you can just delete and that will fix your problem.\n. You're probably better off using session.vim\n. Hi @latortuga, I suspect you figured this out already, but you can open vim view files as regular files, in there you'll probably find the command like `cd ~/projects/project_b`, which you can just delete and that will fix your problem.\n. You're probably better off using session.vim\n. ",
    "bitboxer": "Never mind, should have read the manual first ;)\n. Never mind, should have read the manual first ;)\n. ",
    "nocksock": "Awesome! Will check that out during the day and give feedback later! \n. Hm, with the latest update the first method doesn't work:\n\n```\nError detected while processing function <SNR>56_CreateNewFile:\nline   18:\nE121: Undefined variable: pad\nE116: Invalid arguments for function s:lash(pad).str])[0]\nE116: Invalid arguments for function ctrlp#rmbasedir([pah.s:lash(pad).str])[0]\nE15: Invalid expression: ctrlp#rmbasedir([pah.s:lash(pad).str])[0]\n```\n. Now that was quick!\n. Awesome! Will check that out during the day and give feedback later! \n. Hm, with the latest update the first method doesn't work:\n\n```\nError detected while processing function <SNR>56_CreateNewFile:\nline   18:\nE121: Undefined variable: pad\nE116: Invalid arguments for function s:lash(pad).str])[0]\nE116: Invalid arguments for function ctrlp#rmbasedir([pah.s:lash(pad).str])[0]\nE15: Invalid expression: ctrlp#rmbasedir([pah.s:lash(pad).str])[0]\n```\n. Now that was quick!\n. ",
    "sjl": "I used `let g:ctrlp_dont_split = 'NERD_tree_2'` instead of just `nerdtree` so that it will let ctrlp open up in that initial window, but future ones (which are really thin sidebars) will still jump out.\n. Unfortunately that autocommand doesn't work.  BufReadPost doesn't seem to fire when using CtrlP to open a file that's already been opened in the past.  It also doesn't _ever_ seem to work properly with the unfolding commands -- I have a feeling it's a timing issue.\n\nI can bind a key to zvzz so it's not critical, just nice to have.\n. Awesome, thanks!\n. I used `let g:ctrlp_dont_split = 'NERD_tree_2'` instead of just `nerdtree` so that it will let ctrlp open up in that initial window, but future ones (which are really thin sidebars) will still jump out.\n. Unfortunately that autocommand doesn't work.  BufReadPost doesn't seem to fire when using CtrlP to open a file that's already been opened in the past.  It also doesn't _ever_ seem to work properly with the unfolding commands -- I have a feeling it's a timing issue.\n\nI can bind a key to zvzz so it's not critical, just nice to have.\n. Awesome, thanks!\n. ",
    "nicksergeant": "Awesome. Thanks guys.\n. Awesome. Thanks guys.\n. ",
    "ViViDboarder": "I was wondering if this was still working for you all.\n\nIt seems like the first window isn't named `NERD_tree_2` anymore and I can only get it to prevent splitting by doing `let g:ctrlp_dont_split = 'NERD'`. Then that includes all NERD windows.\n. I was wondering if this was still working for you all.\n\nIt seems like the first window isn't named `NERD_tree_2` anymore and I can only get it to prevent splitting by doing `let g:ctrlp_dont_split = 'NERD'`. Then that includes all NERD windows.\n. ",
    "blayz3r": "The option let g:ctrlp_dont_split = 'NERD' works until you change the mode then it doesn't close nerdtree again.Anyone else have this issue\n. The option let g:ctrlp_dont_split = 'NERD' works until you change the mode then it doesn't close nerdtree again.Anyone else have this issue\n. ",
    "cmeiklejohn": "Weird, I've got .git results in there as well.  Looks like it's not honoring this at all.  Any easy way to debug this locally?\n. Even with the simple vimrc, just those options and noplugin, I'm still getting yardoc results in the finder.  I'm running version  7.3.363 of vim, packaged with debian sid.\n. Weird, none of those are working for me, and the echo shows the value.  I also tried by adding doc/ to both wildignore and ctrlp_custom_ignore and it's still matching files in there as well.\n\nWhat's interesting is that even though I'm getting yard results with the fuzzy finder, I am not getting results for files in .git if I try matching something in there, so it must be honoring part of the ignore?\n. I've also noticed that wildignore is honored by command-t when doing the matching (just trying to make sure something with wildignore isn't busted).\n. Fixed it for me as well.\n. Adding another note here: seems like I need to run `:ClearAllCtrlPCaches` whenever I switch branches to pick up new files -- this intended or could something else be causing a problem here?\n. Good to know; thanks!\n. Weird, I've got .git results in there as well.  Looks like it's not honoring this at all.  Any easy way to debug this locally?\n. Even with the simple vimrc, just those options and noplugin, I'm still getting yardoc results in the finder.  I'm running version  7.3.363 of vim, packaged with debian sid.\n. Weird, none of those are working for me, and the echo shows the value.  I also tried by adding doc/ to both wildignore and ctrlp_custom_ignore and it's still matching files in there as well.\n\nWhat's interesting is that even though I'm getting yard results with the fuzzy finder, I am not getting results for files in .git if I try matching something in there, so it must be honoring part of the ignore?\n. I've also noticed that wildignore is honored by command-t when doing the matching (just trying to make sure something with wildignore isn't busted).\n. Fixed it for me as well.\n. Adding another note here: seems like I need to run `:ClearAllCtrlPCaches` whenever I switch branches to pick up new files -- this intended or could something else be causing a problem here?\n. Good to know; thanks!\n. ",
    "greendog99": "I'm having the same problem. Both wildignore and g:ctrlp_custom_ignore seem to be... ignored. I moved over today from Command-T to CtrlP and suddenly noticed lots of \"tmp/sass-cache\" files showing in my search results. I'm on MacVim. I've tried all manner of expressions, but will keep experimenting. I tried the --no-plugin method above, same problem.\n. OK, I just ran a :ClearAllCtrlPCaches and all is well now!  Probably need to do that any time after changing the \"ignore\" options (I have cross-session caching enabled).\n. I'm having the same problem. Both wildignore and g:ctrlp_custom_ignore seem to be... ignored. I moved over today from Command-T to CtrlP and suddenly noticed lots of \"tmp/sass-cache\" files showing in my search results. I'm on MacVim. I've tried all manner of expressions, but will keep experimenting. I tried the --no-plugin method above, same problem.\n. OK, I just ran a :ClearAllCtrlPCaches and all is well now!  Probably need to do that any time after changing the \"ignore\" options (I have cross-session caching enabled).\n. ",
    "wmayner": ":+1:\n\nI'm still having this issue. I've tried clearing all caches, setting wildignore, and running CtrlP as the only plugin. I'm using a simple regex:\n\n```\nlet g:ctrlp_custom_ignore = {\n  \\ 'dir':  'node_modules',\n  \\ }\n```\n\nAnd the value `g:ctrlp_custom_ignore` is there when I `echo`.\n\nAny suggestions?\n\n---\n\nHere's the `vim --version` output if it's helpful:\n\n```\nVIM - Vi IMproved 7.3 (2010 Aug 15, compiled Jun 20 2012 13:16:02)\nCompiled by root@apple.com\nNormal version without GUI.  Features included (+) or not (-):\n-arabic +autocmd -balloon_eval -browse +builtin_terms +byte_offset +cindent\n-clientserver -clipboard +cmdline_compl +cmdline_hist +cmdline_info +comments\n-conceal +cryptv +cscope +cursorbind +cursorshape +dialog_con +diff +digraphs\n-dnd -ebcdic -emacs_tags +eval +ex_extra +extra_search -farsi +file_in_path\n+find_in_path +float +folding -footer +fork() -gettext -hangul_input +iconv\n+insert_expand +jumplist -keymap -langmap +libcall +linebreak +lispindent\n+listcmds +localmap -lua +menu +mksession +modify_fname +mouse -mouseshape\n-mouse_dec -mouse_gpm -mouse_jsbterm -mouse_netterm -mouse_sysmouse\n+mouse_xterm +multi_byte +multi_lang -mzscheme +netbeans_intg -osfiletype\n+path_extra -perl +persistent_undo +postscript +printer -profile +python/dyn\n-python3 +quickfix +reltime -rightleft +ruby/dyn +scrollbind +signs\n+smartindent -sniff +startuptime +statusline -sun_workshop +syntax +tag_binary\n+tag_old_static -tag_any_white -tcl +terminfo +termresponse +textobjects +title\n -toolbar +user_commands +vertsplit +virtualedit +visual +visualextra +viminfo\n+vreplace +wildignore +wildmenu +windows +writebackup -X11 -xfontset -xim -xsmp\n -xterm_clipboard -xterm_save\n   system vimrc file: \"$VIM/vimrc\"\n     user vimrc file: \"$HOME/.vimrc\"\n      user exrc file: \"$HOME/.exrc\"\n  fall-back for $VIM: \"/usr/share/vim\"\nCompilation: gcc -c -I. -D_FORTIFY_SOURCE=0 -Iproto -DHAVE_CONFIG_H -arch i386 -arch x86_64 -g -Os -pipe\nLinking: gcc -arch i386 -arch x86_64 -o vim -lncurses\n```\n. @kien I tried the string format and double-checked everything; still no dice. But it must be something weird with my setup, so I'll just keep looking into it. Thanks for the awesome plugin!\n. :+1:\n\nI'm still having this issue. I've tried clearing all caches, setting wildignore, and running CtrlP as the only plugin. I'm using a simple regex:\n\n```\nlet g:ctrlp_custom_ignore = {\n  \\ 'dir':  'node_modules',\n  \\ }\n```\n\nAnd the value `g:ctrlp_custom_ignore` is there when I `echo`.\n\nAny suggestions?\n\n---\n\nHere's the `vim --version` output if it's helpful:\n\n```\nVIM - Vi IMproved 7.3 (2010 Aug 15, compiled Jun 20 2012 13:16:02)\nCompiled by root@apple.com\nNormal version without GUI.  Features included (+) or not (-):\n-arabic +autocmd -balloon_eval -browse +builtin_terms +byte_offset +cindent\n-clientserver -clipboard +cmdline_compl +cmdline_hist +cmdline_info +comments\n-conceal +cryptv +cscope +cursorbind +cursorshape +dialog_con +diff +digraphs\n-dnd -ebcdic -emacs_tags +eval +ex_extra +extra_search -farsi +file_in_path\n+find_in_path +float +folding -footer +fork() -gettext -hangul_input +iconv\n+insert_expand +jumplist -keymap -langmap +libcall +linebreak +lispindent\n+listcmds +localmap -lua +menu +mksession +modify_fname +mouse -mouseshape\n-mouse_dec -mouse_gpm -mouse_jsbterm -mouse_netterm -mouse_sysmouse\n+mouse_xterm +multi_byte +multi_lang -mzscheme +netbeans_intg -osfiletype\n+path_extra -perl +persistent_undo +postscript +printer -profile +python/dyn\n-python3 +quickfix +reltime -rightleft +ruby/dyn +scrollbind +signs\n+smartindent -sniff +startuptime +statusline -sun_workshop +syntax +tag_binary\n+tag_old_static -tag_any_white -tcl +terminfo +termresponse +textobjects +title\n -toolbar +user_commands +vertsplit +virtualedit +visual +visualextra +viminfo\n+vreplace +wildignore +wildmenu +windows +writebackup -X11 -xfontset -xim -xsmp\n -xterm_clipboard -xterm_save\n   system vimrc file: \"$VIM/vimrc\"\n     user vimrc file: \"$HOME/.vimrc\"\n      user exrc file: \"$HOME/.exrc\"\n  fall-back for $VIM: \"/usr/share/vim\"\nCompilation: gcc -c -I. -D_FORTIFY_SOURCE=0 -Iproto -DHAVE_CONFIG_H -arch i386 -arch x86_64 -g -Os -pipe\nLinking: gcc -arch i386 -arch x86_64 -o vim -lncurses\n```\n. @kien I tried the string format and double-checked everything; still no dice. But it must be something weird with my setup, so I'll just keep looking into it. Thanks for the awesome plugin!\n. ",
    "voigtjr": "I finally fixed this problem by deleting my `~/.cache` directory. Nothing else was working, including `:ClearAllCtrlPCaches`.\n. I finally fixed this problem by deleting my `~/.cache` directory. Nothing else was working, including `:ClearAllCtrlPCaches`.\n. ",
    "dtamez": "Yes!  :ClearAllCtrlPCaches finally got this working.\n. Yes!  :ClearAllCtrlPCaches finally got this working.\n. ",
    "andrewrk": "One thing to note, the `^` seemed not to match for me. So this didn't work:\n\n``` vim\nlet g:ctrlp_custom_ignore = { 'dir': '^build$\\|^node_modules$' }\n```\n\nbut this did work:\n\n``` vim\nlet g:ctrlp_custom_ignore = { 'dir': 'build$\\|node_modules$' }\n```\n. One thing to note, the `^` seemed not to match for me. So this didn't work:\n\n``` vim\nlet g:ctrlp_custom_ignore = { 'dir': '^build$\\|^node_modules$' }\n```\n\nbut this did work:\n\n``` vim\nlet g:ctrlp_custom_ignore = { 'dir': 'build$\\|node_modules$' }\n```\n. ",
    "jtr109": "It was the problem I meet too!\r\nI copy all the vim script in README. So the line `ctrlp_user_command option` make the `ctrlp_custom_ignore` doesn't work!. It was the problem I meet too!\r\nI copy all the vim script in README. So the line `ctrlp_user_command option` make the `ctrlp_custom_ignore` doesn't work!. ",
    "Lokaltog": "That looks great! I'll try it now and give you feedback on how it works.\n. The update works great, and after I've rewritten some parts of Powerline Ctrl-P should work seamlessly. Thanks!\n. That looks great! I'll try it now and give you feedback on how it works.\n. The update works great, and after I've rewritten some parts of Powerline Ctrl-P should work seamlessly. Thanks!\n. ",
    "ssoriche": "Excellent! Works great, thank you very much.\n. That seems to have fixed it.\n\nFor the record I switched from using easytags to autotags because of the aggressive behaviour of easytags. It was messing with a couple of other plugins I use too.\n\nThanks again for your help!\n\n~Shawn\n. Excellent! Works great, thank you very much.\n. That seems to have fixed it.\n\nFor the record I switched from using easytags to autotags because of the aggressive behaviour of easytags. It was messing with a couple of other plugins I use too.\n\nThanks again for your help!\n\n~Shawn\n. ",
    "sickill": "What happened to this option? It doesn't work anymore, it's not in the source code anywhere but it is still described in help file.\n. Yeah, I'm seeing files outside the cwd. Oh, you know, maybe it's because I'm using CtrlPMixed. I thought that MRU code that is used in Mixed mode also scopes mru dirs to cwd but maybe that's wrong assumption. If not, it would be great to have it.\n. And btw, `g:ctrlp_mruf_relative` could be removed from help file as it's not used anywhere in the code now.\n. > No, it's in the code AND it's working fine. Did you check the link in my previous comment? {s:re} is g:ctrlp_mruf_relative.\n\nRight, sorry. I was grepping the source and didn't find references to it but now I see the config var mapping is there.\n\n> MRU files in the cwd are already covered by \"Files\".\n\nOki, doki. Sorry for confusion.\n\nThanks for awesome plugin, good job!\n. What happened to this option? It doesn't work anymore, it's not in the source code anywhere but it is still described in help file.\n. Yeah, I'm seeing files outside the cwd. Oh, you know, maybe it's because I'm using CtrlPMixed. I thought that MRU code that is used in Mixed mode also scopes mru dirs to cwd but maybe that's wrong assumption. If not, it would be great to have it.\n. And btw, `g:ctrlp_mruf_relative` could be removed from help file as it's not used anywhere in the code now.\n. > No, it's in the code AND it's working fine. Did you check the link in my previous comment? {s:re} is g:ctrlp_mruf_relative.\n\nRight, sorry. I was grepping the source and didn't find references to it but now I see the config var mapping is there.\n\n> MRU files in the cwd are already covered by \"Files\".\n\nOki, doki. Sorry for confusion.\n\nThanks for awesome plugin, good job!\n. ",
    "dlee": "Thanks. The text input is still located at the bottom of the window. Is there a way to move that to the top as well?\n. Is there then a way to replicate the current contents of the command line up on top?\n. I also wish the search would be weighted intelligently, like Textmate's Command-T.\n. Thanks. The text input is still located at the bottom of the window. Is there a way to move that to the top as well?\n. Is there then a way to replicate the current contents of the command line up on top?\n. I also wish the search would be weighted intelligently, like Textmate's Command-T.\n. ",
    "rodnaph": "Bosh - thanks! :)\n. Ah sweet, i did try and check the docs but looks like I totally missed that, apologies!\n. Bosh - thanks! :)\n. Ah sweet, i did try and check the docs but looks like I totally missed that, apologies!\n. ",
    "AndrewRayCode": "oh, ok. The wording of the help files tripped me up. What do you think about something like how the VIM docs shows defaults, like\n\n```\n:h guifont\n```\n\nhas default in parens:\n\n```\n'guifont' 'gfn'     string  (default \"\")\n```\n. Does this ticket being closed mean the feature is never going in? To be honest, and i'm not trying to be a troll or anything here, this basically means that ctrl-p doesn't actually work, as in it doesn't actually do fuzzy file finding. No fuzzy finding = no reason to use the plugin\n. Time to get your hands dirty with some C ;)\n. that's the issue, I want it always on, but typing for example `:e` turns off the coloration, and typing `:e` again turns it back on. I don't think that's intended.\n. For now i'm doing:\n\n```\n\" Fix ctrl-p's mixed mode https://github.com/kien/ctrlp.vim/issues/556\n\"let g:ctrlp_extensions = ['mixed']\nnnoremap <c-p> :CtrlPMixed<cr>\n```\n. oh, ok. The wording of the help files tripped me up. What do you think about something like how the VIM docs shows defaults, like\n\n```\n:h guifont\n```\n\nhas default in parens:\n\n```\n'guifont' 'gfn'     string  (default \"\")\n```\n. Does this ticket being closed mean the feature is never going in? To be honest, and i'm not trying to be a troll or anything here, this basically means that ctrl-p doesn't actually work, as in it doesn't actually do fuzzy file finding. No fuzzy finding = no reason to use the plugin\n. Time to get your hands dirty with some C ;)\n. that's the issue, I want it always on, but typing for example `:e` turns off the coloration, and typing `:e` again turns it back on. I don't think that's intended.\n. For now i'm doing:\n\n```\n\" Fix ctrl-p's mixed mode https://github.com/kien/ctrlp.vim/issues/556\n\"let g:ctrlp_extensions = ['mixed']\nnnoremap <c-p> :CtrlPMixed<cr>\n```\n. ",
    "mattkatz": "I think this might relate to a change in the globpath function between 7.2 and 7.3\n. BEAUT!  Thanks Kien!\n. I think this might relate to a change in the globpath function between 7.2 and 7.3\n. BEAUT!  Thanks Kien!\n. ",
    "rphillips": "Thanks\n. Perhaps I could get used to the current approach. I'm going to close this issue for now.\n. Thanks\n. Perhaps I could get used to the current approach. I'm going to close this issue for now.\n. ",
    "SpudNyk": "works perfectly now thanks for the prompt fix.\n. As a possible enhancement to this request how about allowing the use of another search type of all which search all sources - buffers, mru, files and possibly extensions too.\n. how about if a word is followed by a space it is looked for as a whole part (the space is thrown away)\nso you could type tools cover er1 and it would find the correct one.\n. do they ultimately matter for the sake of searching? \n. works perfectly now thanks for the prompt fix.\n. As a possible enhancement to this request how about allowing the use of another search type of all which search all sources - buffers, mru, files and possibly extensions too.\n. how about if a word is followed by a space it is looked for as a whole part (the space is thrown away)\nso you could type tools cover er1 and it would find the correct one.\n. do they ultimately matter for the sake of searching? \n. ",
    "d11wtq": "Would it be possible for somebody to add a snippet to their .vimrc to wrap ctrlp to do this. It would make closing multiple buffers much easier:\n\n```\n<C-p>\n<C-b>\n(start filtering buffers)\n<C-q> (close buffer under cursor)\n<C-q> (close buffer now under cursor)\n```\n\netc etc\n\nI don't mind writing a bit of Vimscript to do this in my own vimrc, but does ctrlp have any way of letting somebody add key mappings while it's open? Only really needs two things available:\n1. Run some key mapping only if ctrlp is open\n2. Some function call to ctrlp to get the name of the buffer/file under the cursor.\n. Awesome, thanks. Just poking around in the code. Might actually be easier to fork the plugin, refactor the OpenMulti() function and do this by marking buffers and then using a key combination to close them (instead of open them). Evening project!\n. Just my $0.02, but I definitely prefer hidden buffers. Often I'll bounce between two buffers while I'm still in the process of editing (as I'm cross-referencing, for example), so this would be better as an opt-in thing.\n. If I understand what it's supposed to do, I can probably test it. I work with some romance and Nordic languages that include accented vowels like \u00e9 and \u00e8 and Nordic characters like \u00f0, \u00fe and \u00e6. Not sure if the idea is to allow those characters to be typed in ctrlp or not though. Currently they don't type correctly, at least on OS X's Terminal.app.\n. Holy crap it works :) I can type all those characters from European languages just fine with this patch merged in. I can't type Japanese Hiragana (\u3053\u3093\u306b\u3061\u308f) or Katakana (\u30b3\u30f3\u30cb\u30c1\u30ef) using the Kotoeri keyboard on OS X, but that does some weird stuff where you have to type sequences of English characters in order to type a single Japanese character.\n. The fuzzy search doesn't trip on the multibyte characters neither.\n. @mattn I was saying that without your patch the characters can't be typed. With your patch (which I only tried after writing that first comment) I can confirm that the characters are typed as expected. I think it should be merged, since it's definitely a big improvement in the i18n department :)\n. @kien, no problem. I just tried the mappings you mention and got different behaviour. Tab does nothing (might be because I also have supertab installed), but `<c-\\>` brings up \"Insert: c[w]ord/c[f]ile/[s]earch/[v]isual/[c]lipboard/[r]egister?\" and `<c-o>` brings up the \"Open:\" prompt. I wonder if it makes a difference what Terminal is used.\n. @mattn @kien tested the update, tab now works, as do `<c-o>` and `<c-\\>`. The multibyte chars still work too.\n. I might take another stab at this. My extremely limited knowledge of Vimscript and of the source code in ctrlp tripped me up last time. Good to have some example code to go by :) I was aiming for something where you could `<c-z>` to mark a number of buffers (this already works out-of-the-box), then use some combination to delete those buffers. Starting with handling just a single buffer would be a good start though!\n\nI'm pretty bad at opening lots of buffers and then having the tedious task of closing the ones I'm no longer using.\n. I'm currently taking this snippet at looking to provide it as a plugin with the `C-z` functionality I was after too. Has anybody already done this and not linked to it here?\n\n@kien doing `let g:ctrlp_buffer_func = ....` in a plugin seems dangerous, since either the plugin will override a user setting, or the user will effectively disable the plugin by overriding this setting. Is there another way to let ctrlp know about the mapping function that is safe to do from shared code?\n. We're doing Hack Day for the next couple of days at work and I'm keen to use that time to add this functionality to ctrlp via an extension in a separate plugin. Some problems I need to solve are:\n1. Deleting multiple buffers that have been marked (solved).\n2. Finding a way to make sure `let g:ctrlp_buffer_func = 'MyPluginFunction'` doesn't break any user expectations with what they have in their own vimrc.\n\nHere's a work in progress version of the snippet that allows the use of `C-z` to mark multiple buffers and close them.\n\n``` vim\nlet g:ctrlp_buffer_func = { 'enter': 'CtrlPBDelete' }\n\nfunction! CtrlPBDelete()\n  nnoremap <buffer> <silent> <c-@> :call <sid>DeleteMarkedBuffers()<cr>\nendfunction\n\nfunction! s:DeleteMarkedBuffers()\n  \" list all marked buffers\n  let marked = ctrlp#getmarkedlist()\n\n  \" the file under the cursor is implicitly marked\n  if empty(marked)\n    call add(marked, fnamemodify(ctrlp#getcline(), ':p'))\n  endif\n\n  \" call bdelete on all marked buffers\n  for fname in marked\n    let bufid = fname =~ '\\[\\d\\+\\*No Name\\]$' ? str2nr(matchstr(fname, '\\d\\+'))\n          \\ : fnamemodify(fname[2:], ':p')\n    exec \"silent! bdelete\" bufid\n  endfor\n\n  \" refresh ctrlp\n  exec \"normal \\<F5>\"\nendfunction\n```\n\nI'm sure there are some bugs with it, but I have another day and half to work on this anyway.\n. Improved further and turned into a plugin. Pull requests welcomed. https://github.com/d11wtq/ctrlp_bdelete.vim\n. I'd be opposed to a non-Vimscript script personally. The big selling point for CtrlP over other solutions is that it will work with a vanilla Vim install. I tend to avoid plugins that depend on Ruby support etc (mostly because it's not compiled into Vim in all the places I use it).\n. Use `:BundleInstall!` with the bang, otherwise it will just keep your currently installed version, or just cd to the directory and update by hand.\n. Let's not start adding dependencies on Vim being built with Ruby/Python support. You can just use F5 to clear the cache. It would also be possible for you to do this yourself, if you wanted to run a separate process to watch the filesystem. Just write a .modified_time file or something that you can check for, then write a function that checks that file and decides if it needs to run :CtrlPClearAllCaches before running :CtrlP or not.\n. Does your project use multiple git repositories nested inside each other? Are apps and spec in a different git repo, higher up the directory hierarchy to wherever you opened vim?\n. @happypeter so basically just see `;` as an AND operator? `this;and that;and the other`.\n. @lsiden have you changed `ttimeoutlen` in your vim config to something too low, perhaps?\n. Have you change ttimeoutlen in your vimrc, by any chance? Values too short in that setting will cause Vim to mis-interpret the arrow keys as `ESC` followed by A, B, C or D (since that's what the arrow keys _actually_ send, just as a quick sequence). Vim needs a short amount of time to figure out of the initial ESC is part of a longer sequence, like an arrow key press, and if ttimeoutlen is too short, it doesn't receive the second part of the sequence in time.\n. I've also seen a plugin (I forget the name) that does 'save on mouse out' break the arrow keys in this way. A colleague uninstalled it, as it stopped him from using the arrow keys in insert mode.\n. I only use Vim in a terminal and it works fine ;) Have used it in both iTerm and Terminal.app on OS X.\n. Moved to: https://github.com/ctrlpvim/ctrlp.vim/pull/3\n. Moved to: https://github.com/ctrlpvim/ctrlp.vim/pull/4\n. @davebv is this still an issue? Wondering if this needs merging into https://github.com/ctrlpvim/ctrlp.vim or not.\n. @antognolli if you send a PR, send it to https://github.com/ctrlpvim/ctrlp.vim which is actively maintained, since @kien appears to have vanished for a year or so now.\n. :+1: :octocat: \n. Moved to: https://github.com/ctrlpvim/ctrlp.vim/pull/6\n. Moved to: https://github.com/ctrlpvim/ctrlp.vim/pull/7\n. This is a terrible idea IMHO. For one thing, as you say, it would prevent you from finding files that start with 'q' (I work with some... 'qt' as a prefix, and a web service called 'quova'). Secondly, the bevhaiour being conditional that it is the first key pressed is just confusing, and lastly, Vim does not use 'q' as a 'quit' binding, but rather as a 'macro record' binding.\n\nI know where you're coming from, but it would definitely get in the way of more people than it would help. And those that it would 'help', would eventually get tripped up by it.\n\nHave you tried using 'ctrl-c' to quit ctrlp? That should work nicely and does indeed map to something that most linux users already think of as 'exit'/'stop'.\n. Moved to: https://github.com/ctrlpvim/ctrlp.vim/pull/8\n. Moved to: https://github.com/ctrlpvim/ctrlp.vim/pull/9\n. Moved to https://github.com/ctrlpvim/ctrlp.vim/pull/10\n. ```\nlet g:ctrlp_show_hidden = 1\n```\n. It's probably worth scanning over `:help ctrlp` in Vim.\n. @cj ah, I see, I misunderstood. Well first you'll need `let g:ctrlp_show_hidden = 1`, then you can use Vim regexp to find the file. To do that, open ctrlp, then press `ctrl-r` to switch to regexp mode. Now type `^\\.` and files beginning with '.' should be shown.\n. Actually, in order to match files in subdirs it's a bit trickier, since the '.' isn't at the start of the path: `^\\.\\|/\\.`.\n. Moved to: https://github.com/ctrlpvim/ctrlp.vim/pull/11\n. Moved to https://github.com/ctrlpvim/ctrlp.vim/pull/12\n. Moved to https://github.com/ctrlpvim/ctrlp.vim/pull/13\n. Moved to https://github.com/ctrlpvim/ctrlp.vim/pull/14\n. I'm guessing this is because ctrlp runs in \"normal\" mode and vim-surround uses 'cs' for \"change surrounding\", so the \"css\" is read as \"change surrounding 's'\".\n\nThat said, I have vim-surround and ctrlp installed and I can't reproduce the issue on projects with scss files.\n. Here's my vimrc, if you want to cross-reference to see what may mean mine works and yours doesn't https://github.com/d11wtq/dot-vim/blob/master/vimrc.\n\nThe order in which ctrlp and vim-surround are loaded may have some effect (not sure how that works with Pathogen).\n. @kien has been worryingly absent from GitHub for months. I hope he's ok.\n. I've merged this into a new organization over at https://github.com/ctrlpvim/ctrlp.vim. See #591 for the discussion as to why.\n. Moved to https://github.com/ctrlpvim/ctrlp.vim/pull/15\n. @diegoviola because I'd like to hear from the (very respected) author before doing something like that. There's no reason we need to start diverging if we can keep the original project alive. Of course, if this project has stagnated and isn't coming back, forking would be the way to go. IMHO it is polite to discuss with @kien in any case. It's his hard work after all.\n. @mattn do you know @kien? You've been a fairly visible contributor to this project. Any thoughts?\n. If I start a new org, I'd want three or four contributors involved (preferably people who've either got outstanding PRs on ctrlp, or people who've got commits already in the codebase).\n. Tentatively: https://github.com/ctrlpvim/ctrlp.vim -- I'll give it a couple of days for @mattn to chime in, then I'll start working through PRs from here and merging them or replying to them. I would really like some developers to raise their hands if they are willing to help out too. Really a lot of the work will just be reviewing PRs, ideally with two required LGTM's before a merge can be done.\n. Yeah, I'm a bit concerned by the sudden absence actually. I hope everything is ok.\n. Ok, I think we can consider https://github.com/ctrlpvim/ctrlp.vim the new official repo. Anybody who has an outstanding PR they want reviewing and merging, please re-submit it over there. I'll go through PRs here when I get a moment too.\n\n@tacahiroy I had a look at your GitHub profile and I've invited you to the organization, thanks heaps! :+1: \n. Yes! I totally want this :)\n. Moved to https://github.com/ctrlpvim/ctrlp.vim/pull/16\n. Moved to https://github.com/ctrlpvim/ctrlp.vim/pull/17\n. @nfvs this looks useful. Would you like it merging into https://github.com/ctrlpvim/ctrlp.vim since this fork appears to no longer maintained as of 12 months ago?\n. Moved to: https://github.com/ctrlpvim/ctrlp.vim/pull/2\n. I use `:CtrlPBuffer` for that and have it mapped to `<c-b>`. So just `<c-b>` ENTER to switch between two open buffers. There's also MRU (most recently used) mode that will include files not currently open. Of course, the vanilla Vim way `:b#` ENTER is pretty quick too.\n. This won't get merged as the author has not been seen in a couple of years.\n. Thanks @kien!\n. Would it be possible for somebody to add a snippet to their .vimrc to wrap ctrlp to do this. It would make closing multiple buffers much easier:\n\n```\n<C-p>\n<C-b>\n(start filtering buffers)\n<C-q> (close buffer under cursor)\n<C-q> (close buffer now under cursor)\n```\n\netc etc\n\nI don't mind writing a bit of Vimscript to do this in my own vimrc, but does ctrlp have any way of letting somebody add key mappings while it's open? Only really needs two things available:\n1. Run some key mapping only if ctrlp is open\n2. Some function call to ctrlp to get the name of the buffer/file under the cursor.\n. Awesome, thanks. Just poking around in the code. Might actually be easier to fork the plugin, refactor the OpenMulti() function and do this by marking buffers and then using a key combination to close them (instead of open them). Evening project!\n. Just my $0.02, but I definitely prefer hidden buffers. Often I'll bounce between two buffers while I'm still in the process of editing (as I'm cross-referencing, for example), so this would be better as an opt-in thing.\n. If I understand what it's supposed to do, I can probably test it. I work with some romance and Nordic languages that include accented vowels like \u00e9 and \u00e8 and Nordic characters like \u00f0, \u00fe and \u00e6. Not sure if the idea is to allow those characters to be typed in ctrlp or not though. Currently they don't type correctly, at least on OS X's Terminal.app.\n. Holy crap it works :) I can type all those characters from European languages just fine with this patch merged in. I can't type Japanese Hiragana (\u3053\u3093\u306b\u3061\u308f) or Katakana (\u30b3\u30f3\u30cb\u30c1\u30ef) using the Kotoeri keyboard on OS X, but that does some weird stuff where you have to type sequences of English characters in order to type a single Japanese character.\n. The fuzzy search doesn't trip on the multibyte characters neither.\n. @mattn I was saying that without your patch the characters can't be typed. With your patch (which I only tried after writing that first comment) I can confirm that the characters are typed as expected. I think it should be merged, since it's definitely a big improvement in the i18n department :)\n. @kien, no problem. I just tried the mappings you mention and got different behaviour. Tab does nothing (might be because I also have supertab installed), but `<c-\\>` brings up \"Insert: c[w]ord/c[f]ile/[s]earch/[v]isual/[c]lipboard/[r]egister?\" and `<c-o>` brings up the \"Open:\" prompt. I wonder if it makes a difference what Terminal is used.\n. @mattn @kien tested the update, tab now works, as do `<c-o>` and `<c-\\>`. The multibyte chars still work too.\n. I might take another stab at this. My extremely limited knowledge of Vimscript and of the source code in ctrlp tripped me up last time. Good to have some example code to go by :) I was aiming for something where you could `<c-z>` to mark a number of buffers (this already works out-of-the-box), then use some combination to delete those buffers. Starting with handling just a single buffer would be a good start though!\n\nI'm pretty bad at opening lots of buffers and then having the tedious task of closing the ones I'm no longer using.\n. I'm currently taking this snippet at looking to provide it as a plugin with the `C-z` functionality I was after too. Has anybody already done this and not linked to it here?\n\n@kien doing `let g:ctrlp_buffer_func = ....` in a plugin seems dangerous, since either the plugin will override a user setting, or the user will effectively disable the plugin by overriding this setting. Is there another way to let ctrlp know about the mapping function that is safe to do from shared code?\n. We're doing Hack Day for the next couple of days at work and I'm keen to use that time to add this functionality to ctrlp via an extension in a separate plugin. Some problems I need to solve are:\n1. Deleting multiple buffers that have been marked (solved).\n2. Finding a way to make sure `let g:ctrlp_buffer_func = 'MyPluginFunction'` doesn't break any user expectations with what they have in their own vimrc.\n\nHere's a work in progress version of the snippet that allows the use of `C-z` to mark multiple buffers and close them.\n\n``` vim\nlet g:ctrlp_buffer_func = { 'enter': 'CtrlPBDelete' }\n\nfunction! CtrlPBDelete()\n  nnoremap <buffer> <silent> <c-@> :call <sid>DeleteMarkedBuffers()<cr>\nendfunction\n\nfunction! s:DeleteMarkedBuffers()\n  \" list all marked buffers\n  let marked = ctrlp#getmarkedlist()\n\n  \" the file under the cursor is implicitly marked\n  if empty(marked)\n    call add(marked, fnamemodify(ctrlp#getcline(), ':p'))\n  endif\n\n  \" call bdelete on all marked buffers\n  for fname in marked\n    let bufid = fname =~ '\\[\\d\\+\\*No Name\\]$' ? str2nr(matchstr(fname, '\\d\\+'))\n          \\ : fnamemodify(fname[2:], ':p')\n    exec \"silent! bdelete\" bufid\n  endfor\n\n  \" refresh ctrlp\n  exec \"normal \\<F5>\"\nendfunction\n```\n\nI'm sure there are some bugs with it, but I have another day and half to work on this anyway.\n. Improved further and turned into a plugin. Pull requests welcomed. https://github.com/d11wtq/ctrlp_bdelete.vim\n. I'd be opposed to a non-Vimscript script personally. The big selling point for CtrlP over other solutions is that it will work with a vanilla Vim install. I tend to avoid plugins that depend on Ruby support etc (mostly because it's not compiled into Vim in all the places I use it).\n. Use `:BundleInstall!` with the bang, otherwise it will just keep your currently installed version, or just cd to the directory and update by hand.\n. Let's not start adding dependencies on Vim being built with Ruby/Python support. You can just use F5 to clear the cache. It would also be possible for you to do this yourself, if you wanted to run a separate process to watch the filesystem. Just write a .modified_time file or something that you can check for, then write a function that checks that file and decides if it needs to run :CtrlPClearAllCaches before running :CtrlP or not.\n. Does your project use multiple git repositories nested inside each other? Are apps and spec in a different git repo, higher up the directory hierarchy to wherever you opened vim?\n. @happypeter so basically just see `;` as an AND operator? `this;and that;and the other`.\n. @lsiden have you changed `ttimeoutlen` in your vim config to something too low, perhaps?\n. Have you change ttimeoutlen in your vimrc, by any chance? Values too short in that setting will cause Vim to mis-interpret the arrow keys as `ESC` followed by A, B, C or D (since that's what the arrow keys _actually_ send, just as a quick sequence). Vim needs a short amount of time to figure out of the initial ESC is part of a longer sequence, like an arrow key press, and if ttimeoutlen is too short, it doesn't receive the second part of the sequence in time.\n. I've also seen a plugin (I forget the name) that does 'save on mouse out' break the arrow keys in this way. A colleague uninstalled it, as it stopped him from using the arrow keys in insert mode.\n. I only use Vim in a terminal and it works fine ;) Have used it in both iTerm and Terminal.app on OS X.\n. Moved to: https://github.com/ctrlpvim/ctrlp.vim/pull/3\n. Moved to: https://github.com/ctrlpvim/ctrlp.vim/pull/4\n. @davebv is this still an issue? Wondering if this needs merging into https://github.com/ctrlpvim/ctrlp.vim or not.\n. @antognolli if you send a PR, send it to https://github.com/ctrlpvim/ctrlp.vim which is actively maintained, since @kien appears to have vanished for a year or so now.\n. :+1: :octocat: \n. Moved to: https://github.com/ctrlpvim/ctrlp.vim/pull/6\n. Moved to: https://github.com/ctrlpvim/ctrlp.vim/pull/7\n. This is a terrible idea IMHO. For one thing, as you say, it would prevent you from finding files that start with 'q' (I work with some... 'qt' as a prefix, and a web service called 'quova'). Secondly, the bevhaiour being conditional that it is the first key pressed is just confusing, and lastly, Vim does not use 'q' as a 'quit' binding, but rather as a 'macro record' binding.\n\nI know where you're coming from, but it would definitely get in the way of more people than it would help. And those that it would 'help', would eventually get tripped up by it.\n\nHave you tried using 'ctrl-c' to quit ctrlp? That should work nicely and does indeed map to something that most linux users already think of as 'exit'/'stop'.\n. Moved to: https://github.com/ctrlpvim/ctrlp.vim/pull/8\n. Moved to: https://github.com/ctrlpvim/ctrlp.vim/pull/9\n. Moved to https://github.com/ctrlpvim/ctrlp.vim/pull/10\n. ```\nlet g:ctrlp_show_hidden = 1\n```\n. It's probably worth scanning over `:help ctrlp` in Vim.\n. @cj ah, I see, I misunderstood. Well first you'll need `let g:ctrlp_show_hidden = 1`, then you can use Vim regexp to find the file. To do that, open ctrlp, then press `ctrl-r` to switch to regexp mode. Now type `^\\.` and files beginning with '.' should be shown.\n. Actually, in order to match files in subdirs it's a bit trickier, since the '.' isn't at the start of the path: `^\\.\\|/\\.`.\n. Moved to: https://github.com/ctrlpvim/ctrlp.vim/pull/11\n. Moved to https://github.com/ctrlpvim/ctrlp.vim/pull/12\n. Moved to https://github.com/ctrlpvim/ctrlp.vim/pull/13\n. Moved to https://github.com/ctrlpvim/ctrlp.vim/pull/14\n. I'm guessing this is because ctrlp runs in \"normal\" mode and vim-surround uses 'cs' for \"change surrounding\", so the \"css\" is read as \"change surrounding 's'\".\n\nThat said, I have vim-surround and ctrlp installed and I can't reproduce the issue on projects with scss files.\n. Here's my vimrc, if you want to cross-reference to see what may mean mine works and yours doesn't https://github.com/d11wtq/dot-vim/blob/master/vimrc.\n\nThe order in which ctrlp and vim-surround are loaded may have some effect (not sure how that works with Pathogen).\n. @kien has been worryingly absent from GitHub for months. I hope he's ok.\n. I've merged this into a new organization over at https://github.com/ctrlpvim/ctrlp.vim. See #591 for the discussion as to why.\n. Moved to https://github.com/ctrlpvim/ctrlp.vim/pull/15\n. @diegoviola because I'd like to hear from the (very respected) author before doing something like that. There's no reason we need to start diverging if we can keep the original project alive. Of course, if this project has stagnated and isn't coming back, forking would be the way to go. IMHO it is polite to discuss with @kien in any case. It's his hard work after all.\n. @mattn do you know @kien? You've been a fairly visible contributor to this project. Any thoughts?\n. If I start a new org, I'd want three or four contributors involved (preferably people who've either got outstanding PRs on ctrlp, or people who've got commits already in the codebase).\n. Tentatively: https://github.com/ctrlpvim/ctrlp.vim -- I'll give it a couple of days for @mattn to chime in, then I'll start working through PRs from here and merging them or replying to them. I would really like some developers to raise their hands if they are willing to help out too. Really a lot of the work will just be reviewing PRs, ideally with two required LGTM's before a merge can be done.\n. Yeah, I'm a bit concerned by the sudden absence actually. I hope everything is ok.\n. Ok, I think we can consider https://github.com/ctrlpvim/ctrlp.vim the new official repo. Anybody who has an outstanding PR they want reviewing and merging, please re-submit it over there. I'll go through PRs here when I get a moment too.\n\n@tacahiroy I had a look at your GitHub profile and I've invited you to the organization, thanks heaps! :+1: \n. Yes! I totally want this :)\n. Moved to https://github.com/ctrlpvim/ctrlp.vim/pull/16\n. Moved to https://github.com/ctrlpvim/ctrlp.vim/pull/17\n. @nfvs this looks useful. Would you like it merging into https://github.com/ctrlpvim/ctrlp.vim since this fork appears to no longer maintained as of 12 months ago?\n. Moved to: https://github.com/ctrlpvim/ctrlp.vim/pull/2\n. I use `:CtrlPBuffer` for that and have it mapped to `<c-b>`. So just `<c-b>` ENTER to switch between two open buffers. There's also MRU (most recently used) mode that will include files not currently open. Of course, the vanilla Vim way `:b#` ENTER is pretty quick too.\n. This won't get merged as the author has not been seen in a couple of years.\n. Thanks @kien!\n. ",
    "mephux": "@d11wtq just curious if you got anything working? Would be an awesome feature to have.\n. @d11wtq just curious if you got anything working? Would be an awesome feature to have.\n. ",
    "rainerborene": "@mephux @d11wtq https://gist.github.com/rainerborene/8074898\n. One possible solution is to verify if the `.git` directory exists under the current gem directory..\n. @mephux @d11wtq https://gist.github.com/rainerborene/8074898\n. One possible solution is to verify if the `.git` directory exists under the current gem directory..\n. ",
    "majjoha": "@rainerborene Thanks for sharing this. This was exactly what I was looking for.\n. I'd love to see this too. What workarounds (except from symlinks) do people currently use to scope their search to only a selection of folders?\n. @rainerborene Thanks for sharing this. This was exactly what I was looking for.\n. I'd love to see this too. What workarounds (except from symlinks) do people currently use to scope their search to only a selection of folders?\n. ",
    "ezuk": "@rainerborene - very useful! Thank you.\n. @rainerborene - very useful! Thank you.\n. ",
    "zQueal": "Came here for this. Ended up using this: https://github.com/j5shi/ctrlp_bdelete.vim\n\nWorks perfectly on Windows.\n. @j5shi Thanks for the PR. Just added it to my Vim install on Windows. Working great.\n. Came here for this. Ended up using this: https://github.com/j5shi/ctrlp_bdelete.vim\n\nWorks perfectly on Windows.\n. @j5shi Thanks for the PR. Just added it to my Vim install on Windows. Working great.\n. ",
    "YANOUSHek": "Thanks. Just after writing the comment I figured out that I might dig in the source to find the place where it needs changing and I've found the setting variable. I think you should change the default value to something far lower - like 1000-2000?\n. That's weird. I'm running a MacBook Pro 2.4GHz Core2Duo, with 8GB of RAM, and a fast hard drive and ctrlp just stops after showing me that it counted about 5000 files. Then, if I leave vim running, it shows me the file list after about 15-20 seconds.\n. Thanks. Just after writing the comment I figured out that I might dig in the source to find the place where it needs changing and I've found the setting variable. I think you should change the default value to something far lower - like 1000-2000?\n. That's weird. I'm running a MacBook Pro 2.4GHz Core2Duo, with 8GB of RAM, and a fast hard drive and ctrlp just stops after showing me that it counted about 5000 files. Then, if I leave vim running, it shows me the file list after about 15-20 seconds.\n. ",
    "rscircus": "+1: it freezes (g)vim\n\n@kien \n`<c-c>` didn't stop it for me. Still frozen.\n. +1: it freezes (g)vim\n\n@kien \n`<c-c>` didn't stop it for me. Still frozen.\n. ",
    "fingermark": "Trying ctrlp.vim out and it's pretty awesome.  Is there a way to tell ctrlp to just ignore the home directory?\n. Trying ctrlp.vim out and it's pretty awesome.  Is there a way to tell ctrlp to just ignore the home directory?\n. ",
    "Raynes": "Doesn't seem to change anything.\n. - Open macvim.\n- :cd ~/code/4clojure\n- ctrlp\n- project.clj\n- no highlighting\n\nDidn't touch any buffer or anything. I just tried and it works fine for Ruby files. Looks like only `.clj` files are effected. Sorry, I hadn't tested any other files until now.\n. VimClojure. :e definitely works for me. \n. Bleh, oh well. Excellent work on this stuff in any case. Maybe it's a janus bug or something. \n. That fixed it. It didn't even occur to me that that exception could be causing a problem. Thank you so much for looking into this. I'm really happy to be able to use this fantastically awesome plugin now. :D\n. Doesn't seem to change anything.\n. - Open macvim.\n- :cd ~/code/4clojure\n- ctrlp\n- project.clj\n- no highlighting\n\nDidn't touch any buffer or anything. I just tried and it works fine for Ruby files. Looks like only `.clj` files are effected. Sorry, I hadn't tested any other files until now.\n. VimClojure. :e definitely works for me. \n. Bleh, oh well. Excellent work on this stuff in any case. Maybe it's a janus bug or something. \n. That fixed it. It didn't even occur to me that that exception could be causing a problem. Thank you so much for looking into this. I'm really happy to be able to use this fantastically awesome plugin now. :D\n. ",
    "datanoise": "Unfortunately, `<c-d>` doesn't help since on a large Java project for some buffers I don't even see their file names. They just don't fit into the window. I don't remember having that issue with command-t and I hate to switch back to it just because of that. \n. It only helps for files in the same directory with the current buffer. If the file is in another directory, the name is still expanded to a full path. \n. when you display buffer names why not to strip the full path relative to the current dir with `fnamemodify(bufname, ':.')` and display the full path for buffers opened not from the current directory or below? I believe that how Command-T implements it and I find it very convenient. \n. Thanks for making this change. BTW, it works as expected only if I set `let g:ctrlp_working_path_mode = 0`. \n\nSince I want to use that path mode only for the buffer list, I've made this change:\n\n``` diff\ndiff --git a/plugin/ctrlp.vim b/plugin/ctrlp.vim\nindex b0f416e..c17d66b 100644\n--- a/plugin/ctrlp.vim\n+++ b/plugin/ctrlp.vim\n@@ -15,7 +15,7 @@ if !exists('g:ctrlp_cmd') | let g:ctrlp_cmd = 'CtrlP' | en\n\n com! -n=? -com=dir CtrlP cal ctrlp#init(0, <q-args>)\n\n-com! CtrlPBuffer   cal ctrlp#init(1)\n+com! CtrlPBuffer   cal ctrlp#init(1, 0)\n com! CtrlPMRUFiles cal ctrlp#init(2)\n\n com! ClearCtrlPCache     cal ctrlp#clr()\n```\n. Nope. Commenting lines 731 and 735 doesn't help, as well as line 1362. \n\nIt seems like switching buffers make Vim to reevaluate modeline for some reason. \n. I don't see this issue when using  `:bn`, `:bp`, `<c-^>` or any other standard buffer switching commands. No issue with using BufExplorer or Command-T either. I would file a bug report to Bram if that was a standard behavior a long time ago :) \n. Hm, strange. I've just tested your modeline and I don't see that behavior when switching back and forth with `<c-^>`. Must be something to do with your setup. I do see that when I'm using `CtrlPBuffer` though. \n. This is really weird. Actually, just tried that with `Command-T` and in some cases I see the same issue, but I don't see it when I switch with `<c-^>` or `BufExplorer`.\n\nAnd I'm using the same revision number 7.3.401. That must be indeed a Vim's bug. I will try to debug it if the time permits. \n. I think I have found the issue. CtrlPBuffer uses :edit command to switch to a buffer, which makes Vim to reevaluate modeline. Please consider this patch:\n\n``` diff\ndiff --git a/autoload/ctrlp.vim b/autoload/ctrlp.vim\nindex a95df44..a942e69 100644\n--- a/autoload/ctrlp.vim\n+++ b/autoload/ctrlp.vim\n@@ -734,8 +734,10 @@ fu! ctrlp#acceptfile(mode, matchstr, ...)\n        el\n                \" Determine the command to use\n                let cmd = md == 't' || s:splitwin == 1 ? 'tabe'\n-                       \\ : md == 'h' || s:splitwin == 2 ? 'new'\n-                       \\ : md == 'v' || s:splitwin == 3 ? 'vne' : ctrlp#normcmd('e')\n+                       \\ : md == 'h' || s:splitwin == 2 ? (s:itemtype == 1 ? 'sb' : 'new')\n+                       \\ : md == 'v' || s:splitwin == 3 ? (s:itemtype == 1 ? 'vert sb' : 'vne')\n+                       \\ : md == 'e' && s:itemtype == 1 ? 'b'\n+                       \\ : ctrlp#normcmd('e')\n                \" Open new window/buffer\n                cal call('s:openfile', a:0 ? [cmd, filpath, ' +'.a:1] : [cmd, filpath])\n        en\n```\n\nThat would work only if `hidden` option is set, otherwise this patch has no effect.\n. Ah, you are right. I do have `<c-^>` redefined. I completely forgot about it. \n\nThanks for looking into that issue anyway.\n. See if this patch fixes the problem:\n\n``` diff\n\ndiff --git a/autoload/ctrlp.vim b/autoload/ctrlp.vim\nindex c1d9f15..95ba91f 100644\n--- a/autoload/ctrlp.vim\n+++ b/autoload/ctrlp.vim\n@@ -1125,7 +1125,7 @@ fu! s:syntax()\n    sy match CtrlPNoEntries '^ == NO ENTRIES ==$'\n    sy match CtrlPLineMarker '^>'\n    hi link CtrlPNoEntries Error\n-   hi CtrlPLineMarker guifg=bg\n+   hi CtrlPLineMarker guifg=bg ctermfg=bg\n endf\n\n fu! s:highlight(pat, grp, bfn)\n```\n. `:h ctrlp-mapping` \n\nwhat you are looking for is `<c-v>` and `<c-x>`\n. Unfortunately, `<c-d>` doesn't help since on a large Java project for some buffers I don't even see their file names. They just don't fit into the window. I don't remember having that issue with command-t and I hate to switch back to it just because of that. \n. It only helps for files in the same directory with the current buffer. If the file is in another directory, the name is still expanded to a full path. \n. when you display buffer names why not to strip the full path relative to the current dir with `fnamemodify(bufname, ':.')` and display the full path for buffers opened not from the current directory or below? I believe that how Command-T implements it and I find it very convenient. \n. Thanks for making this change. BTW, it works as expected only if I set `let g:ctrlp_working_path_mode = 0`. \n\nSince I want to use that path mode only for the buffer list, I've made this change:\n\n``` diff\ndiff --git a/plugin/ctrlp.vim b/plugin/ctrlp.vim\nindex b0f416e..c17d66b 100644\n--- a/plugin/ctrlp.vim\n+++ b/plugin/ctrlp.vim\n@@ -15,7 +15,7 @@ if !exists('g:ctrlp_cmd') | let g:ctrlp_cmd = 'CtrlP' | en\n\n com! -n=? -com=dir CtrlP cal ctrlp#init(0, <q-args>)\n\n-com! CtrlPBuffer   cal ctrlp#init(1)\n+com! CtrlPBuffer   cal ctrlp#init(1, 0)\n com! CtrlPMRUFiles cal ctrlp#init(2)\n\n com! ClearCtrlPCache     cal ctrlp#clr()\n```\n. Nope. Commenting lines 731 and 735 doesn't help, as well as line 1362. \n\nIt seems like switching buffers make Vim to reevaluate modeline for some reason. \n. I don't see this issue when using  `:bn`, `:bp`, `<c-^>` or any other standard buffer switching commands. No issue with using BufExplorer or Command-T either. I would file a bug report to Bram if that was a standard behavior a long time ago :) \n. Hm, strange. I've just tested your modeline and I don't see that behavior when switching back and forth with `<c-^>`. Must be something to do with your setup. I do see that when I'm using `CtrlPBuffer` though. \n. This is really weird. Actually, just tried that with `Command-T` and in some cases I see the same issue, but I don't see it when I switch with `<c-^>` or `BufExplorer`.\n\nAnd I'm using the same revision number 7.3.401. That must be indeed a Vim's bug. I will try to debug it if the time permits. \n. I think I have found the issue. CtrlPBuffer uses :edit command to switch to a buffer, which makes Vim to reevaluate modeline. Please consider this patch:\n\n``` diff\ndiff --git a/autoload/ctrlp.vim b/autoload/ctrlp.vim\nindex a95df44..a942e69 100644\n--- a/autoload/ctrlp.vim\n+++ b/autoload/ctrlp.vim\n@@ -734,8 +734,10 @@ fu! ctrlp#acceptfile(mode, matchstr, ...)\n        el\n                \" Determine the command to use\n                let cmd = md == 't' || s:splitwin == 1 ? 'tabe'\n-                       \\ : md == 'h' || s:splitwin == 2 ? 'new'\n-                       \\ : md == 'v' || s:splitwin == 3 ? 'vne' : ctrlp#normcmd('e')\n+                       \\ : md == 'h' || s:splitwin == 2 ? (s:itemtype == 1 ? 'sb' : 'new')\n+                       \\ : md == 'v' || s:splitwin == 3 ? (s:itemtype == 1 ? 'vert sb' : 'vne')\n+                       \\ : md == 'e' && s:itemtype == 1 ? 'b'\n+                       \\ : ctrlp#normcmd('e')\n                \" Open new window/buffer\n                cal call('s:openfile', a:0 ? [cmd, filpath, ' +'.a:1] : [cmd, filpath])\n        en\n```\n\nThat would work only if `hidden` option is set, otherwise this patch has no effect.\n. Ah, you are right. I do have `<c-^>` redefined. I completely forgot about it. \n\nThanks for looking into that issue anyway.\n. See if this patch fixes the problem:\n\n``` diff\n\ndiff --git a/autoload/ctrlp.vim b/autoload/ctrlp.vim\nindex c1d9f15..95ba91f 100644\n--- a/autoload/ctrlp.vim\n+++ b/autoload/ctrlp.vim\n@@ -1125,7 +1125,7 @@ fu! s:syntax()\n    sy match CtrlPNoEntries '^ == NO ENTRIES ==$'\n    sy match CtrlPLineMarker '^>'\n    hi link CtrlPNoEntries Error\n-   hi CtrlPLineMarker guifg=bg\n+   hi CtrlPLineMarker guifg=bg ctermfg=bg\n endf\n\n fu! s:highlight(pat, grp, bfn)\n```\n. `:h ctrlp-mapping` \n\nwhat you are looking for is `<c-v>` and `<c-x>`\n. ",
    "ralesi": "are you thinking along the lines of an awesome bar like in Firefox?\n. I haven't yet,  but I was gonna use some of the ideas from Tom Link's tlib\nlibrary and his tregister plugin to get started.\nOn Mar 3, 2012 1:07 PM, \"lucapette\" <\nreply@reply.github.com>\nwrote:\n\n> @ralesi Are you working on that? Because I'm thinking of writing something\n> for registers too. And I don't like the idea on re-inventing the wheel, you\n> know.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/kien/ctrlp.vim/issues/137#issuecomment-4303205\n. are you thinking along the lines of an awesome bar like in Firefox?\n. I haven't yet,  but I was gonna use some of the ideas from Tom Link's tlib\nlibrary and his tregister plugin to get started.\nOn Mar 3, 2012 1:07 PM, \"lucapette\" <\nreply@reply.github.com>\nwrote:\n\n> @ralesi Are you working on that? Because I'm thinking of writing something\n> for registers too. And I don't like the idea on re-inventing the wheel, you\n> know.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/kien/ctrlp.vim/issues/137#issuecomment-4303205\n. ",
    "gaving": "sounds mental, but I love it\n. Creepy the author has just vanished. Surprised to see over a year of inactivity when I checked from what was a very active plugin before.\n\nCheers for the fork, but with that said I'm gonna give https://github.com/Shougo/unite.vim a go which is perhaps the way the wind is blowing.\n. sounds mental, but I love it\n. Creepy the author has just vanished. Surprised to see over a year of inactivity when I checked from what was a very active plugin before.\n\nCheers for the fork, but with that said I'm gonna give https://github.com/Shougo/unite.vim a go which is perhaps the way the wind is blowing.\n. ",
    "philipgloyne": "Kien - you are a legend. Cheers\n. Kien - you are a legend. Cheers\n. ",
    "perfectworks": "@kien Can `:CtrlPMixed` mix tags mode in?\n. @kien Can `:CtrlPMixed` mix tags mode in?\n. ",
    "gbbr": "I'm trying to rebind the mapping that opens vertical / horizontal splits and can't find an answer on how to do so anywhere online. I'm kind of new to VIM so it may be obvious to seasoned players.\n\nCurrently splits open with Ctrl+X and Ctrl+V\n\nI want to change Ctrl+X to Ctrl+S\n. I'm trying to rebind the mapping that opens vertical / horizontal splits and can't find an answer on how to do so anywhere online. I'm kind of new to VIM so it may be obvious to seasoned players.\n\nCurrently splits open with Ctrl+X and Ctrl+V\n\nI want to change Ctrl+X to Ctrl+S\n. ",
    "PiDelport": "Thanks. :)\n. Thanks. :)\n. ",
    "ghost": "Why not adding this to the wiki/docs? I was also looking for this :)\n. Ok, thanks @kien that's helpful. \n. What I really wanted to do, was to have all the files in the project displayed (which I have done through the above setting), but then use ctrl-y to create a file in the current working directory. My workaround is to 'set autochdir' and then create a new file by using :e (new_file). \n. Hi Kien,\n\nYes, this works. Is it worth adding that root_markers needs to be a List on\nthe Wiki?\n\nOn 5 October 2012 12:04, kien notifications@github.com wrote:\n\n> The root_markers option must be a List: let g:ctrlp_root_markers =\n> ['pom.xml'].\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/kien/ctrlp.vim/issues/293#issuecomment-9172037.\n. I am sorry, I did not read your documentation :( I have tried it works excellent. Thank you :)\n. +1 !\n. Wouldn't a possible option be a script outside of Vim that you can run that uses inotify to remove the cache for a specific folder, and possibly regenerate it automatically?\n. Cool. It\u2019s pretty useful, should be added to the README.\n. +1 :)\n. While open Ctrlp, press F5 to refresh. [link](https://stackoverflow.com/questions/8663829/vim-ctrlp-vim-plugin-how-to-rescan-files)\r\n\r\n> <F5>\r\n\r\n  - Refresh the match window and purge the cache for the current directory.\r\n  - Remove deleted files from MRU list.. How did u end up making this work?. FZF is fantastic both for vim and outside of it. Thank you so much for the tip!. Why not adding this to the wiki/docs? I was also looking for this :)\n. Ok, thanks @kien that's helpful. \n. What I really wanted to do, was to have all the files in the project displayed (which I have done through the above setting), but then use ctrl-y to create a file in the current working directory. My workaround is to 'set autochdir' and then create a new file by using :e (new_file). \n. Hi Kien,\n\nYes, this works. Is it worth adding that root_markers needs to be a List on\nthe Wiki?\n\nOn 5 October 2012 12:04, kien notifications@github.com wrote:\n\n> The root_markers option must be a List: let g:ctrlp_root_markers =\n> ['pom.xml'].\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/kien/ctrlp.vim/issues/293#issuecomment-9172037.\n. I am sorry, I did not read your documentation :( I have tried it works excellent. Thank you :)\n. +1 !\n. Wouldn't a possible option be a script outside of Vim that you can run that uses inotify to remove the cache for a specific folder, and possibly regenerate it automatically?\n. Cool. It\u2019s pretty useful, should be added to the README.\n. +1 :)\n. While open Ctrlp, press F5 to refresh. [link](https://stackoverflow.com/questions/8663829/vim-ctrlp-vim-plugin-how-to-rescan-files)\r\n\r\n> <F5>\r\n\r\n  - Refresh the match window and purge the cache for the current directory.\r\n  - Remove deleted files from MRU list.. How did u end up making this work?. FZF is fantastic both for vim and outside of it. Thank you so much for the tip!. ",
    "plytophogy": "by the way, i have a fully patched vim 7.3 through patch 409\n. Here's my specific example.\n\nVim invoked with: gvim ~/.vim/snippets/*\n\nUsed :CtrlPBuffer to go to some buffer.\n\nHere's the result:\n\n![screenshot](http://i.imgur.com/IffDC.png)\n. I don't see that behavior. What version of vim are you on?\n. No. Any other method of buffer navigation works fine.\n. That does seem to fix the problem. Thanks!\n. by the way, i have a fully patched vim 7.3 through patch 409\n. Here's my specific example.\n\nVim invoked with: gvim ~/.vim/snippets/*\n\nUsed :CtrlPBuffer to go to some buffer.\n\nHere's the result:\n\n![screenshot](http://i.imgur.com/IffDC.png)\n. I don't see that behavior. What version of vim are you on?\n. No. Any other method of buffer navigation works fine.\n. That does seem to fix the problem. Thanks!\n. ",
    "lucapette": "That was fast! Thank you very much. It's working great now.\n. @ralesi Are you working on that? Because I'm thinking of writing something for registers too. And I don't like the idea on re-inventing the wheel, you know.\n. More than welcome. I saw the commits and you're obviously right about the deprecation stuff. I'm glad I'm helping a bit this awesome plugin.\n. OK, if it's the intended behaviour I'm closing the issue since it's not an issue. I guess my only option is to use wildignore then.\n\nNow that you confirmed it's the expected behaviour I find a bit difficult to understand the custom_ignore option. The doc says you can use the option for files you don't want to show. So I used the custom_ignore option for that very reason. I thought the option would act as a filter for every kind of search. No problem, by the way. Shall we just add a sentence in doc about that?\n. Actually I just noticed that what I said about using wildignore doesn't make sense. I have no options :) So, just for the sake of curiosity, What do you think of changing the current behaviour of custom_ignore in order to use it like an after filter? Is it a totally bad idea? If yes why?\n\nHope I don't bother you with all this question. I really like the idea of using a custom command for git repos it is really useful because it makes the search very fast with big projects.\n. This makes sense and I agree. Thank you very much for your time and for the tip about git too :)\n. @kien we talked about adding a FAQ to the README in a other issue. I think the \"whitespace bug\" can be part of that FAQ too.\n. @kien Since this \"issue\" shows up quite often maybe adding a FAQ section to the README is worth the effort?\n. @kien another example of what it's possible to insert into a FAQ section in the README. If I'm annoying you just tell me  :) if you still think it's a good idea maybe we can collect what to put in the FAQ in a new issue?\n. That was fast! Thank you very much. It's working great now.\n. @ralesi Are you working on that? Because I'm thinking of writing something for registers too. And I don't like the idea on re-inventing the wheel, you know.\n. More than welcome. I saw the commits and you're obviously right about the deprecation stuff. I'm glad I'm helping a bit this awesome plugin.\n. OK, if it's the intended behaviour I'm closing the issue since it's not an issue. I guess my only option is to use wildignore then.\n\nNow that you confirmed it's the expected behaviour I find a bit difficult to understand the custom_ignore option. The doc says you can use the option for files you don't want to show. So I used the custom_ignore option for that very reason. I thought the option would act as a filter for every kind of search. No problem, by the way. Shall we just add a sentence in doc about that?\n. Actually I just noticed that what I said about using wildignore doesn't make sense. I have no options :) So, just for the sake of curiosity, What do you think of changing the current behaviour of custom_ignore in order to use it like an after filter? Is it a totally bad idea? If yes why?\n\nHope I don't bother you with all this question. I really like the idea of using a custom command for git repos it is really useful because it makes the search very fast with big projects.\n. This makes sense and I agree. Thank you very much for your time and for the tip about git too :)\n. @kien we talked about adding a FAQ to the README in a other issue. I think the \"whitespace bug\" can be part of that FAQ too.\n. @kien Since this \"issue\" shows up quite often maybe adding a FAQ section to the README is worth the effort?\n. @kien another example of what it's possible to insert into a FAQ section in the README. If I'm annoying you just tell me  :) if you still think it's a good idea maybe we can collect what to put in the FAQ in a new issue?\n. ",
    "lindemannrichard": "I was struggling with the same problem, when CtrlP just does not want to show correct match on a big project and I have found out this  nice solution to this problem: https://github.com/burke/matcher \n\nIt's a C utility which implements a fuzzy search algo, the same as CommandT and Textmate does. \n\n``` VimL\nlet g:path_to_matcher = \"/path/to/matcher\"\nlet g:ctrlp_match_func = { 'match': 'GoodMatch' }\n\nfunction! GoodMatch(items, str, limit, mmode, ispath, crfile, regex)\n\n  \" Create a cache file if not yet exists\n  let cachefile = ctrlp#utils#cachedir().'/matcher.cache'\n  if !( filereadable(cachefile) && a:items == readfile(cachefile) )\n    call writefile(a:items, cachefile)\n  endif\n  if !filereadable(cachefile)\n    return []\n  endif\n\n  \" a:mmode is currently ignored. In the future, we should probably do\n  \" something about that. the matcher behaves like \"full-line\".\n  let cmd = g:path_to_matcher.' --limit '.a:limit.' --manifest '.cachefile.' '\n  if !( exists('g:ctrlp_dotfiles') && g:ctrlp_dotfiles )\n    let cmd = cmd.'--no-dotfiles '\n  endif\n  let cmd = cmd.a:str\n\n  return split(system(cmd), \"\\n\")\n\nendfunction\n```\n. @JazzCore: Great! Thank you! It works :)\n. I was struggling with the same problem, when CtrlP just does not want to show correct match on a big project and I have found out this  nice solution to this problem: https://github.com/burke/matcher \n\nIt's a C utility which implements a fuzzy search algo, the same as CommandT and Textmate does. \n\n``` VimL\nlet g:path_to_matcher = \"/path/to/matcher\"\nlet g:ctrlp_match_func = { 'match': 'GoodMatch' }\n\nfunction! GoodMatch(items, str, limit, mmode, ispath, crfile, regex)\n\n  \" Create a cache file if not yet exists\n  let cachefile = ctrlp#utils#cachedir().'/matcher.cache'\n  if !( filereadable(cachefile) && a:items == readfile(cachefile) )\n    call writefile(a:items, cachefile)\n  endif\n  if !filereadable(cachefile)\n    return []\n  endif\n\n  \" a:mmode is currently ignored. In the future, we should probably do\n  \" something about that. the matcher behaves like \"full-line\".\n  let cmd = g:path_to_matcher.' --limit '.a:limit.' --manifest '.cachefile.' '\n  if !( exists('g:ctrlp_dotfiles') && g:ctrlp_dotfiles )\n    let cmd = cmd.'--no-dotfiles '\n  endif\n  let cmd = cmd.a:str\n\n  return split(system(cmd), \"\\n\")\n\nendfunction\n```\n. @JazzCore: Great! Thank you! It works :)\n. ",
    "JazzCore": "You can try my implementation of CommandT matcher for CtrlP: https://github.com/JazzCore/ctrlp-cmatcher. It's more ctrlp oriented and supports filename matching, highlighting, searching in other modes\n. @burke's matcher does not support a bunch of ctrlp features like highlighting or filename mode ( yeah, you still need it sometimes ). You can try my version: [ctrlp-cmatcher](https://github.com/JazzCore/ctrlp-cmatcher)\n. Ah, alright, havent thought about this :) Thanks anyway\n. No, no reason at all. I just started the work before i found out about `g:ctrlp_match_func`. I will move it later. Also, this function uses one local function that is not globally defined - `s:mfunc` ( because its quiet complicated to write a matching for `first-non-tab` mode and tag list usually not very big and doesnt really require C matching ). So is there any way to access it from global function outside `autoload/ctrlp.vim` scope?\n. Alright, all main stuff is done. If anybody interested, you can try it here: https://github.com/JazzCore/ctrlp-cmatcher\n. Empty list means that you dont get an output from actual binary. Have you complied it? Try to use it from shell and see if you are getting any results.\n\nOnce again, I encourage people try my version of C matching: https://github.com/JazzCore/ctrlp-cmatcher. It does the same thing, but it supports a filename-mode, highlighting, properly respects regex mode. \n. You can try my implementation of CommandT matcher for CtrlP: https://github.com/JazzCore/ctrlp-cmatcher. It's more ctrlp oriented and supports filename matching, highlighting, searching in other modes\n. @burke's matcher does not support a bunch of ctrlp features like highlighting or filename mode ( yeah, you still need it sometimes ). You can try my version: [ctrlp-cmatcher](https://github.com/JazzCore/ctrlp-cmatcher)\n. Ah, alright, havent thought about this :) Thanks anyway\n. No, no reason at all. I just started the work before i found out about `g:ctrlp_match_func`. I will move it later. Also, this function uses one local function that is not globally defined - `s:mfunc` ( because its quiet complicated to write a matching for `first-non-tab` mode and tag list usually not very big and doesnt really require C matching ). So is there any way to access it from global function outside `autoload/ctrlp.vim` scope?\n. Alright, all main stuff is done. If anybody interested, you can try it here: https://github.com/JazzCore/ctrlp-cmatcher\n. Empty list means that you dont get an output from actual binary. Have you complied it? Try to use it from shell and see if you are getting any results.\n\nOnce again, I encourage people try my version of C matching: https://github.com/JazzCore/ctrlp-cmatcher. It does the same thing, but it supports a filename-mode, highlighting, properly respects regex mode. \n. ",
    "nilbus": "We'd get much better results if we matched from right to left. This problem usually comes from the fact that parts of the filename that are being typed match parts of the leading path, when really the right-most parts of the filepath are most significant.\n\nVim doesn't support right-to-left regex matching for non-greedy operators like `\\{-}`, but you could reverse both the match string and the filepath items, send the reversed match string into the pattern builder `s:buildpat`, and then re-reverse the matching items before they come out of `s:MatchIt` if they were originally reversed (track with a flag). Then it would match the end of the filepaths first.\n\nThe only thing I worry about is that reversing the entire file list strings will be slow. I don't know of a way better than this, which may possibly be slow for large lists:\n\n```\nfu! s:reverse_string(str)\n  retu join(reverse(split(a:str, '\\zs')), '')\nendf\n```\n\nThoughts on this?\n. You are correct, though right-most short matches should be preferred over more leftward matches. For example, from lowest to highest preference with the search string `app`:\n- altern<b>a</b>tes/<b>p</b>ort/ma<b>p</b>.txt\n- <b>app</b>/assets/master.js\n- <b>app</b>/assets/<b>app</b>le/large.png\n- <b>app</b>/assets/<b>app</b>le/<b>app</b>lication.png\n\nAs it is now, I type `app` and cannot find application.png, because app appears in many paths. In this case, I would have to type `appappapp` to find the file when there are many files in the assets and assets/apple directory.\n\nDo you see what I'm saying now?\n. Not as written. I found that this issue is not present in the equivalent\ncommand-t plugin, and it's also extremely fast.\n. You must have a different understanding of the problem. The matching\nbehavior is quite different.\n. We'd get much better results if we matched from right to left. This problem usually comes from the fact that parts of the filename that are being typed match parts of the leading path, when really the right-most parts of the filepath are most significant.\n\nVim doesn't support right-to-left regex matching for non-greedy operators like `\\{-}`, but you could reverse both the match string and the filepath items, send the reversed match string into the pattern builder `s:buildpat`, and then re-reverse the matching items before they come out of `s:MatchIt` if they were originally reversed (track with a flag). Then it would match the end of the filepaths first.\n\nThe only thing I worry about is that reversing the entire file list strings will be slow. I don't know of a way better than this, which may possibly be slow for large lists:\n\n```\nfu! s:reverse_string(str)\n  retu join(reverse(split(a:str, '\\zs')), '')\nendf\n```\n\nThoughts on this?\n. You are correct, though right-most short matches should be preferred over more leftward matches. For example, from lowest to highest preference with the search string `app`:\n- altern<b>a</b>tes/<b>p</b>ort/ma<b>p</b>.txt\n- <b>app</b>/assets/master.js\n- <b>app</b>/assets/<b>app</b>le/large.png\n- <b>app</b>/assets/<b>app</b>le/<b>app</b>lication.png\n\nAs it is now, I type `app` and cannot find application.png, because app appears in many paths. In this case, I would have to type `appappapp` to find the file when there are many files in the assets and assets/apple directory.\n\nDo you see what I'm saying now?\n. Not as written. I found that this issue is not present in the equivalent\ncommand-t plugin, and it's also extremely fast.\n. You must have a different understanding of the problem. The matching\nbehavior is quite different.\n. ",
    "thejohnfreeman": "I don't think the best algorithm is to match right to left, but to sort matches by shortest matching substring. I think users are less likely to use a pattern that spans multiple path components.\n. I see, but I'm not affiliated with this project. It is possible to combine \"shortest matching group\" and \"shortest trailing unmatched\" string, all without reversing any strings. Construct a pattern with the following algorithm:\n1. Start with search text entered by user.\n2. Split on each character.\n3. Interleave with `/.*/`\n4. Join.\n5. Wrap in `/(?:.*(search_text))*/`\n\nMatch on that pattern. It will have N captures and some remaining text. Order results by the shortest capture and shortest remaining text.\n. I switched to fzf some time ago and never looked back. It's a general program that works in situations beyond just vim, but it's not written in pure VimScript (a goal of this project, apparently).\n. I don't think the best algorithm is to match right to left, but to sort matches by shortest matching substring. I think users are less likely to use a pattern that spans multiple path components.\n. I see, but I'm not affiliated with this project. It is possible to combine \"shortest matching group\" and \"shortest trailing unmatched\" string, all without reversing any strings. Construct a pattern with the following algorithm:\n1. Start with search text entered by user.\n2. Split on each character.\n3. Interleave with `/.*/`\n4. Join.\n5. Wrap in `/(?:.*(search_text))*/`\n\nMatch on that pattern. It will have N captures and some remaining text. Order results by the shortest capture and shortest remaining text.\n. I switched to fzf some time ago and never looked back. It's a general program that works in situations beyond just vim, but it's not written in pure VimScript (a goal of this project, apparently).\n. ",
    "vilcans": "I find this behavior extremely annoying, and I don't use fuzzy matching. Just searching for the substring would be enough for me, and that should be fast. Is it possible to do that in CtrlP?\n. I find this behavior extremely annoying, and I don't use fuzzy matching. Just searching for the substring would be enough for me, and that should be fast. Is it possible to do that in CtrlP?\n. ",
    "sasq64": "No, the same problem exists in command-t unfortunately.\n. No, the same problem exists in command-t unfortunately.\n. ",
    "gf3": "Also, it would be cool if we could change that char, for example I would like to use `\u2192`.\n. It does indeed.\n\n![vim](http://f.cl.ly/items/171w1r033e2T2x0M3Q3Q/Screen%20Shot%202012-01-26%20at%2012.39.02%20AM.png)\n. @kien Right, but that's not an issue for me because I don't use vim on Windows. It would simply be in my personal vimrc.\n. Also, it would be cool if we could change that char, for example I would like to use `\u2192`.\n. It does indeed.\n\n![vim](http://f.cl.ly/items/171w1r033e2T2x0M3Q3Q/Screen%20Shot%202012-01-26%20at%2012.39.02%20AM.png)\n. @kien Right, but that's not an issue for me because I don't use vim on Windows. It would simply be in my personal vimrc.\n. ",
    "iautom8things": "Thank you for your work, kien! \n\nUnfortunately, I am experiencing this bug even though I am up-to-date and include your fix.\n\n(edit: Sorry for the double post!)\n\n![](https://img.skitch.com/20120130-1rhaxe6ypx8rhk1nkkggke2s4f.jpg)\n\n`````` :version\nVIM - Vi IMproved 7.3 (2010 Aug 15, compiled Jun 24 2011 20:00:09)\nCompiled by root@apple.com\nNormal version without GUI.  Features included (+) or not (-):\n-arabic +autocmd -balloon_eval -browse +builtin_terms +byte_offset +cindent -clientserver\n-clipboard +cmdline_compl +cmdline_hist +cmdline_info +comments -conceal +cryptv +cscope\n+cursorbind +cursorshape +dialog_con +diff +digraphs -dnd -ebcdic -emacs_tags +eval +ex_extra\n+extra_search -farsi +file_in_path +find_in_path +float +folding -footer +fork() -gettext\n-hangul_input +iconv +insert_expand +jumplist -keymap -langmap +libcall +linebreak +lispindent\n+listcmds +localmap -lua +menu +mksession +modify_fname +mouse -mouseshape -mouse_dec -mouse_gpm\n -mouse_jsbterm -mouse_netterm -mouse_sysmouse +mouse_xterm +multi_byte +multi_lang -mzscheme\n+netbeans_intg -osfiletype +path_extra -perl +persistent_undo +postscript +printer -profile\n-python -python3 +quickfix +reltime -rightleft -ruby +scrollbind +signs +smartindent -sniff\n+startuptime +statusline -sun_workshop +syntax +tag_binary +tag_old_static -tag_any_white -tcl\n+terminfo +termresponse +textobjects +title -toolbar +user_commands +vertsplit +virtualedit\n+visual +visualextra +viminfo +vreplace +wildignore +wildmenu +windows +writebackup -X11\n-xfontset -xim -xsmp -xterm_clipboard -xterm_save\n   system vimrc file: \"$VIM/vimrc\"\n     user vimrc file: \"$HOME/.vimrc\"\n      user exrc file: \"$HOME/.exrc\"\n  fall-back for $VIM: \"/usr/share/vim\"\nCompilation:\ngcc -c -I. -D_FORTIFY_SOURCE=0 -Iproto -DHAVE_CONFIG_H -arch i386 -arch x86_64 -g -Os -pipe\nLinking: gcc -arch i386 -arch x86_64 -o vim -lncurses```\n``````\n. Thank you, that does fix it!\n. Thank you for your work, kien! \n\nUnfortunately, I am experiencing this bug even though I am up-to-date and include your fix.\n\n(edit: Sorry for the double post!)\n\n![](https://img.skitch.com/20120130-1rhaxe6ypx8rhk1nkkggke2s4f.jpg)\n\n`````` :version\nVIM - Vi IMproved 7.3 (2010 Aug 15, compiled Jun 24 2011 20:00:09)\nCompiled by root@apple.com\nNormal version without GUI.  Features included (+) or not (-):\n-arabic +autocmd -balloon_eval -browse +builtin_terms +byte_offset +cindent -clientserver\n-clipboard +cmdline_compl +cmdline_hist +cmdline_info +comments -conceal +cryptv +cscope\n+cursorbind +cursorshape +dialog_con +diff +digraphs -dnd -ebcdic -emacs_tags +eval +ex_extra\n+extra_search -farsi +file_in_path +find_in_path +float +folding -footer +fork() -gettext\n-hangul_input +iconv +insert_expand +jumplist -keymap -langmap +libcall +linebreak +lispindent\n+listcmds +localmap -lua +menu +mksession +modify_fname +mouse -mouseshape -mouse_dec -mouse_gpm\n -mouse_jsbterm -mouse_netterm -mouse_sysmouse +mouse_xterm +multi_byte +multi_lang -mzscheme\n+netbeans_intg -osfiletype +path_extra -perl +persistent_undo +postscript +printer -profile\n-python -python3 +quickfix +reltime -rightleft -ruby +scrollbind +signs +smartindent -sniff\n+startuptime +statusline -sun_workshop +syntax +tag_binary +tag_old_static -tag_any_white -tcl\n+terminfo +termresponse +textobjects +title -toolbar +user_commands +vertsplit +virtualedit\n+visual +visualextra +viminfo +vreplace +wildignore +wildmenu +windows +writebackup -X11\n-xfontset -xim -xsmp -xterm_clipboard -xterm_save\n   system vimrc file: \"$VIM/vimrc\"\n     user vimrc file: \"$HOME/.vimrc\"\n      user exrc file: \"$HOME/.exrc\"\n  fall-back for $VIM: \"/usr/share/vim\"\nCompilation:\ngcc -c -I. -D_FORTIFY_SOURCE=0 -Iproto -DHAVE_CONFIG_H -arch i386 -arch x86_64 -g -Os -pipe\nLinking: gcc -arch i386 -arch x86_64 -o vim -lncurses```\n``````\n. Thank you, that does fix it!\n. ",
    "mihaibirsan": "Thanks, that works!\n. Thanks, that works!\n. ",
    "beaugunderson": "I can also verify that this happens in Ubuntu. I tried 1.6.3 and the latest version.\n\nI kept thinking the script was broken because I tried to ctrl+p from my home directory (which contains very few directories but 33,684 files deeper down).\n. @kien The problem occurred for me in both 1.6.3 and 1.6.9 (meaning I've already technically tested that patch, right?)\n. I can also verify that this happens in Ubuntu. I tried 1.6.3 and the latest version.\n\nI kept thinking the script was broken because I tried to ctrl+p from my home directory (which contains very few directories but 33,684 files deeper down).\n. @kien The problem occurred for me in both 1.6.3 and 1.6.9 (meaning I've already technically tested that patch, right?)\n. ",
    "jonathanfilip": "Only tested it a little bit, but it seems to have fixed the problem for me. I'll test it some more in a bit.\n. Only tested it a little bit, but it seems to have fixed the problem for me. I'll test it some more in a bit.\n. ",
    "jonhoo": "But this will mean that the other root markers aren't used... I'd like to use .lvimrc in addition to the other markers, not instead of..\n. Ah, didn't know that. Perhaps mention it in the docs?\n. But this will mean that the other root markers aren't used... I'd like to use .lvimrc in addition to the other markers, not instead of..\n. Ah, didn't know that. Perhaps mention it in the docs?\n. ",
    "miks": "Thanks.\n. Thanks.\n. ",
    "jonasdiemer": "I noticed that this breaks moving up a directory by \"..<cr>\". Any workaround?\n. But the syntastic plug in can run the linter in the background, so I am\nsure there is a way.\nAm 30.07.2012 22:20 schrieb \"kien\" <\nreply@reply.github.com\n\n> :\n> \n> This simply can't be done. Vim is single threaded. Things can't be run in\n> the background because there isn't a background to begin with. Everything\n> happens in Vim happens in the same thread as your text editing actions.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/kien/ctrlp.vim/issues/243#issuecomment-7380737\n. No, the linter takes multiple seconds to run, and is invoked on write. The\nresult shows up several seconds later, during which I can continue using\nvim.\n\nPython mode has recently adapted background linting because the delay on\nwriting for the linting was just too annoying. I think they use python to\ninvoke a background thread.\n\nI am no vim expert, but am sure it can be done.\n\nRegards\nAm 30.07.2012 22:41 schrieb \"kien\" <\nreply@reply.github.com\n\n> :\n> \n> Hmm, sounds like you have a different definition of \"background threads\".\n> Things that you don't see running are not things running in a background\n> thread. And I'm pretty sure the linters are simply fast enough so you don't\n> notice the delay most of the times.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/kien/ctrlp.vim/issues/243#issuecomment-7381369\n. I'm still not convinced :\n\nhttp://stackoverflow.com/questions/666453/running-make-from-gvim-in-background\n\nhttp://www.vim.org/scripts/script.php?script_id=3431\nAm 30.07.2012 22:53 schrieb \"kien\" <\nreply@reply.github.com\n\n> :\n> \n> Oh I see. But it's simply impossible with Vimscript because Vim itself is\n> single threaded.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/kien/ctrlp.vim/issues/243#issuecomment-7381747\n. I see. But wouldn't that be sufficient? All we need is to update the cache\nfiles in that other vim instance \"in the background\", right?\nAm 30.07.2012 23:13 schrieb \"kien\" <\nreply@reply.github.com\n\n> :\n> \n> AsyncCommand uses `--remote`. Basically, it runs the needed commands in\n> another Vim instance. This also requires Vim built with `+clientserver`.\n> \n> The top answer in the stackoverflow quesion also offers the same thing:\n> `:!gvim -c 'MyMake'`, this starts another Vim instance.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/kien/ctrlp.vim/issues/243#issuecomment-7382343\n. I noticed that this breaks moving up a directory by \"..<cr>\". Any workaround?\n. But the syntastic plug in can run the linter in the background, so I am\nsure there is a way.\nAm 30.07.2012 22:20 schrieb \"kien\" <\nreply@reply.github.com\n\n> :\n> \n> This simply can't be done. Vim is single threaded. Things can't be run in\n> the background because there isn't a background to begin with. Everything\n> happens in Vim happens in the same thread as your text editing actions.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/kien/ctrlp.vim/issues/243#issuecomment-7380737\n. No, the linter takes multiple seconds to run, and is invoked on write. The\nresult shows up several seconds later, during which I can continue using\nvim.\n\nPython mode has recently adapted background linting because the delay on\nwriting for the linting was just too annoying. I think they use python to\ninvoke a background thread.\n\nI am no vim expert, but am sure it can be done.\n\nRegards\nAm 30.07.2012 22:41 schrieb \"kien\" <\nreply@reply.github.com\n\n> :\n> \n> Hmm, sounds like you have a different definition of \"background threads\".\n> Things that you don't see running are not things running in a background\n> thread. And I'm pretty sure the linters are simply fast enough so you don't\n> notice the delay most of the times.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/kien/ctrlp.vim/issues/243#issuecomment-7381369\n. I'm still not convinced :\n\nhttp://stackoverflow.com/questions/666453/running-make-from-gvim-in-background\n\nhttp://www.vim.org/scripts/script.php?script_id=3431\nAm 30.07.2012 22:53 schrieb \"kien\" <\nreply@reply.github.com\n\n> :\n> \n> Oh I see. But it's simply impossible with Vimscript because Vim itself is\n> single threaded.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/kien/ctrlp.vim/issues/243#issuecomment-7381747\n. I see. But wouldn't that be sufficient? All we need is to update the cache\nfiles in that other vim instance \"in the background\", right?\nAm 30.07.2012 23:13 schrieb \"kien\" <\nreply@reply.github.com\n\n> :\n> \n> AsyncCommand uses `--remote`. Basically, it runs the needed commands in\n> another Vim instance. This also requires Vim built with `+clientserver`.\n> \n> The top answer in the stackoverflow quesion also offers the same thing:\n> `:!gvim -c 'MyMake'`, this starts another Vim instance.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/kien/ctrlp.vim/issues/243#issuecomment-7382343\n. ",
    "mmoya": "This is similar to #160.\n. This is similar to #160.\n. ",
    "Flink": "Well, I\u2019m using Janus and it includes CtrlP by default. I tried to set the option in .vimrc.after and .vimrc.before but it doesn\u2019t work.\n. Ok thanks, I\u2019ll try to find what\u2019s the matter and report it here (if it can help other people).\n. Ok found the matter :)\nI was editing my ~/.gvimrc.before instead of ~/.vimrc.before.\n. Well, I\u2019m using Janus and it includes CtrlP by default. I tried to set the option in .vimrc.after and .vimrc.before but it doesn\u2019t work.\n. Ok thanks, I\u2019ll try to find what\u2019s the matter and report it here (if it can help other people).\n. Ok found the matter :)\nI was editing my ~/.gvimrc.before instead of ~/.vimrc.before.\n. ",
    "danielb2": "kien: What happened was that I read the readme on github. For some reason the doc for ctrlp (or any other doc) doesn't come up and I have to browse to the file in the doc folder manually, and I often forget to do so.\n\nThat said, I do have a preference for online docs in html format. Perhaps enabling the wiki will make it come on it's own :)\n. datanoise: thanks :)\n. I experimented with using `vim -c 'g:ctrlp_working_path_mode = 1'` for when I needed it, but it still read in over 1000 files even though the dir I was in did not have that many.\n\nI'll try what you mentioned. thanks.\n. Sorry, that's what I meant and did try.\n. oh, I didn't realize that. thanks :)\n. I've noticed it takes a very long time for me to finish indexing my svn repo, so I tried this with setting root_markers.\n\nNow it takes even longer:\n\n`3341  (press ctrl-c to abort) ...`       \n\nWhat is this number to the left?  I only want it to operate on .php files, of which there are 1927.\n. Actually, this is failing because I'm using `g:ctrlp_user_command` as well (was trying to speed things up).\n\nMaybe mention in the doc that custom_ignore is ignored if user_command is used?\n. I was indeed thinking of a ctags file. But fair enough about filting and scraping\n. I was thinking of it as an option. The thing was that I generated a tags file, and suddenly the indexing happened almost instantly. For a moment I thought that's how it worked. I wasn't able to reproduce the rapid indexing, but it did get me to think to suggest it. \n. kien: What happened was that I read the readme on github. For some reason the doc for ctrlp (or any other doc) doesn't come up and I have to browse to the file in the doc folder manually, and I often forget to do so.\n\nThat said, I do have a preference for online docs in html format. Perhaps enabling the wiki will make it come on it's own :)\n. datanoise: thanks :)\n. I experimented with using `vim -c 'g:ctrlp_working_path_mode = 1'` for when I needed it, but it still read in over 1000 files even though the dir I was in did not have that many.\n\nI'll try what you mentioned. thanks.\n. Sorry, that's what I meant and did try.\n. oh, I didn't realize that. thanks :)\n. I've noticed it takes a very long time for me to finish indexing my svn repo, so I tried this with setting root_markers.\n\nNow it takes even longer:\n\n`3341  (press ctrl-c to abort) ...`       \n\nWhat is this number to the left?  I only want it to operate on .php files, of which there are 1927.\n. Actually, this is failing because I'm using `g:ctrlp_user_command` as well (was trying to speed things up).\n\nMaybe mention in the doc that custom_ignore is ignored if user_command is used?\n. I was indeed thinking of a ctags file. But fair enough about filting and scraping\n. I was thinking of it as an option. The thing was that I generated a tags file, and suddenly the indexing happened almost instantly. For a moment I thought that's how it worked. I wasn't able to reproduce the rapid indexing, but it did get me to think to suggest it. \n. ",
    "kidphys": "Don't really want to create a separate issue for this. I run Vim with CtrlP in Window (Mysysgit), and Ctrl-X, Ctrl-T works fine, except Ctrl-V. I've checked :map and see that it's not mapped to anywhere else.\n\nAny idea on how to resolve this?\n. @c9n I didn't, switched to Mac instead.\n. Don't really want to create a separate issue for this. I run Vim with CtrlP in Window (Mysysgit), and Ctrl-X, Ctrl-T works fine, except Ctrl-V. I've checked :map and see that it's not mapped to anywhere else.\n\nAny idea on how to resolve this?\n. @c9n I didn't, switched to Mac instead.\n. ",
    "c9n": "@kidphys Do u solve your problem?\n. @kidphys Do u solve your problem?\n. ",
    "wsdjeg": "please use this https://github.com/ctrlpvim\n. @pbassut  please use the active fork https://github.com/ctrlpvim/ctrlp.vim\n. as the readme of this repo shows ,This project is unmaintained, You should use this [fork](https://github.com/ctrlpvim/ctrlp.vim) instead.\nalso you can have a look at my [vimrc](https://github.com/wsdjeg/DotFiles/blob/master/vimrc), ctrlp_custom_ignore works well\nfor the ctrlp,you can use these ways to add ignore;\n1. g:ctrlp_custom_ignore\n2. g:ctrlp_user_command\n3.  set wildignore\nbut for git project ,if you have set your command to `git ls-files` these ways will not work,because git ls-filse only based on .gitignore,add it i will show the files you hava added to you repo ,the new file which has not been added  will not be shown\n. @w2moon what is out put of git ls-files in terminal in your root directory\n. if you have set use_command = git ls-files\nit will not show the files in sub repo\nand also only show the files you have added\nuse this command to add all the files `git add .`\n. @hakunin @razasayed please use this active fork \nhttps://github.com/ctrlpvim/ctrlp.vim\nwhen create an new file,maybe it can not be added ,because most git user,use git ls-files as ctrlp command,this only shows the file that has been added into repo.\n. https://github.com/ctrlpvim here is the most activity fork, if you want add some func,please open issue there\n. @d11wtq \nis there any way to remove the fork,now the project can not be search by github,also can not search code in the fork repo!!,it is very hard to read the src code of the fork repo!\n.  my god~ thanks @kien \nnow so many people work for this plugin\n. @jamesscholeyweb \nhttps://github.com/ctrlpvim/ctrlp.vim\n\n``` vim\n let g:ctrlp_user_command = {\n                \\ 'types': {\n                \\ 1: ['.git', 'cd %s && git ls-files'],\n                \\ 2: ['.hg', 'hg --cwd %s locate -I .'],\n                \\ },\n                \\ 'fallback': 'ag %s -i --nocolor --nogroup --hidden\n                \\ --ignore out\n                \\ --ignore .git\n                \\ --ignore .svn\n                \\ --ignore .hg\n                \\ --ignore .DS_Store\n                \\ --ignore \"**/*.pyc\"\n                \\ -g \"\"'\n                \\ }\n```\n. https://github.com/ctrlpvim/ctrlp.vim/issues/151\n. https://github.com/ctrlpvim/ctrlp.vim/issues/151\ncan you try with the  latest version of [Ctrlp.vim](https://github.com/ctrlpvim/ctrlp.vim)\n. here is an Organization for ctrlp maybe you can put you issue here\n#682 \nhttps://github.com/ctrlpvim/ctrlp.vim\n. here is an active fork of kien/ctrlp.vim,maybe you can get help from there.\nhttps://github.com/ctrlpvim/ctrlp.vim\nalso if you need to switch back and forth between two files,i think Unite maybe is a good choise\n. i think  this can be implemented by yourself\nmaybe this is what you need\nhttps://github.com/h14i/vim-ctrlp-buftab/blob/master/README.md\n. can you open your issue here\nhttps://github.com/ctrlpvim/ctrlp.vim ,it is an active fork\n. also you can try with this match\n'FelikZ/ctrlp-py-matcher' \nlet g:ctrlp_match_func = { 'match': 'pymatcher#PyMatch'  } \n. @eldamir let me have a try \n. ![2015-12-18 20-34-38](https://cloud.githubusercontent.com/assets/13142418/11897027/cba84c78-a5c6-11e5-9cef-7789230005ec.png)\n\nit seem works well for me ,if i type into InvoiceDetail my cursor is located on InvoiceDetailView,java\n. ok let me try will py\n. also works well ,you could see my cursor on InvoiceDetailView.py\n![2015-12-18 20-37-09](https://cloud.githubusercontent.com/assets/13142418/11897085/6a527448-a5c7-11e5-95df-45b206d36f1a.png)\n. how do you set g:ctrlp_custom_ignore and your match\n. can you show me you vimrc ,if possible,\n. ```\nNeoBundle 'FelikZ/ctrlp-py-matcher'\n\nlet g:ctrlp_match_func = { 'match': 'pymatcher#PyMatch'  }\n```\n\ncan you try to use this matcher?\n\ni just use your setting but can not reproduce,the diff is my matcher\n\nand i am using ag -i instead of ag -l\n. here is my ctrlp setting\n\n``` vim\nNeoBundle 'ctrlpvim/ctrlp.vim'\nNeoBundle 'FelikZ/ctrlp-py-matcher'\n    let g:ctrlp_map = '<c-p>'\n    let g:ctrlp_cmd = 'CtrlP'\n    let g:ctrlp_working_path_mode = 'ra'\n    let g:ctrlp_root_markers = 'pom.xml'\n    let g:ctrlp_match_window = 'bottom,order:btt,min:1,max:25,results:25'\n    let g:ctrlp_show_hidden = 1\n    \"for caching\n    let g:ctrlp_use_caching = 1\n    let g:ctrlp_clear_cache_on_exit = 0\n    let g:ctrlp_cache_dir = $HOME.'/.cache/ctrlp'\n    \"let g:ctrlp_map = ',,'\n    \"let g:ctrlp_open_multiple_files = 'v'\n    set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.class,tags\n    let g:ctrlp_custom_ignore = {\n                \\ 'dir':  '\\v[\\/]\\.(git|hg|svn)$|target',\n                \\ 'file': '\\v\\.(exe|so|dll|ttf|png)$',\n                \\ 'link': 'some_bad_symbolic_links',\n                \\ }\n    let g:ctrlp_user_command = ['ag %s -i --nocolor --nogroup --hidden\n                \\ --ignore out\n                \\ --ignore .git\n                \\ --ignore .svn\n                \\ --ignore .hg\n                \\ --ignore .DS_Store\n                \\ --ignore \"**/*.pyc\"\n                \\ -g \"\"'\n                \\ ]\n\n    let g:ctrlp_match_func = { 'match': 'pymatcher#PyMatch'  }\n\n```\n. vim variable should not be defind in diff type ,you can comment you setting for g:ctrlp_user_command\n\nit is due to i am using a list as it's value\n. ok  do you using neobundle?\n. ``` vim\nset nocompatible\nsyntax on\nfiletype off\nset rtp+=~/.vim/bundle/Vundle.vim/\ncall vundle#begin()\nPlugin 'VundleVim/Vundle.vim'\nPlugin 'ctrlpvim/ctrlp.vim'\nPlugin 'FelikZ/ctrlp-py-matcher'\n    let g:ctrlp_map = '<c-p>'\n    let g:ctrlp_cmd = 'CtrlP'\n    let g:ctrlp_working_path_mode = 'ra'\n    let g:ctrlp_root_markers = 'pom.xml'\n    let g:ctrlp_match_window = 'bottom,order:btt,min:1,max:25,results:25'\n    let g:ctrlp_show_hidden = 1\n    \"for caching\n    let g:ctrlp_use_caching = 1\n    let g:ctrlp_clear_cache_on_exit = 0\n    let g:ctrlp_cache_dir = $HOME.'/.cache/ctrlp'\n    \"let g:ctrlp_map = ',,'\n    \"let g:ctrlp_open_multiple_files = 'v'\n    set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.class,tags\n    let g:ctrlp_custom_ignore = {\n                \\ 'dir':  '\\v[\\/]\\.(git|hg|svn)$|target',\n                \\ 'file': '\\v\\.(exe|so|dll|ttf|png)$',\n                \\ 'link': 'some_bad_symbolic_links',\n                \\ }\n    let g:ctrlp_user_command = ['ag %s -i --nocolor --nogroup --hidden\n                \\ --ignore out\n                \\ --ignore .git\n                \\ --ignore .svn\n                \\ --ignore .hg\n                \\ --ignore .DS_Store\n                \\ --ignore \"**/*.pyc\"\n                \\ -g \"\"'\n                \\ ]\n\n    let g:ctrlp_match_func = { 'match': 'pymatcher#PyMatch'  }\ncall vundle#end()\nfiletype plugin indent on\n\n```\n. but why? it works well for me ,i have just use this script without anything others.\n\nmaybe it is better copy this class into ~/Test/  and try again\n. welcome,also it is better use this active fore \nhttps://github.com/ctrlpvim/ctrlp.vim\n. @Nicop06 maybe you can try with the active fork\nhttps://github.com/ctrlpvim/ctrlp.vim\n. open issue here \nhttps://github.com/ctrlpvim/ctrlp.vim\nit is a active fork,and abbr also can be used as `:h abbr`,by this way you can find what you want\n. please use this https://github.com/ctrlpvim\n. @pbassut  please use the active fork https://github.com/ctrlpvim/ctrlp.vim\n. as the readme of this repo shows ,This project is unmaintained, You should use this [fork](https://github.com/ctrlpvim/ctrlp.vim) instead.\nalso you can have a look at my [vimrc](https://github.com/wsdjeg/DotFiles/blob/master/vimrc), ctrlp_custom_ignore works well\nfor the ctrlp,you can use these ways to add ignore;\n1. g:ctrlp_custom_ignore\n2. g:ctrlp_user_command\n3.  set wildignore\nbut for git project ,if you have set your command to `git ls-files` these ways will not work,because git ls-filse only based on .gitignore,add it i will show the files you hava added to you repo ,the new file which has not been added  will not be shown\n. @w2moon what is out put of git ls-files in terminal in your root directory\n. if you have set use_command = git ls-files\nit will not show the files in sub repo\nand also only show the files you have added\nuse this command to add all the files `git add .`\n. @hakunin @razasayed please use this active fork \nhttps://github.com/ctrlpvim/ctrlp.vim\nwhen create an new file,maybe it can not be added ,because most git user,use git ls-files as ctrlp command,this only shows the file that has been added into repo.\n. https://github.com/ctrlpvim here is the most activity fork, if you want add some func,please open issue there\n. @d11wtq \nis there any way to remove the fork,now the project can not be search by github,also can not search code in the fork repo!!,it is very hard to read the src code of the fork repo!\n.  my god~ thanks @kien \nnow so many people work for this plugin\n. @jamesscholeyweb \nhttps://github.com/ctrlpvim/ctrlp.vim\n\n``` vim\n let g:ctrlp_user_command = {\n                \\ 'types': {\n                \\ 1: ['.git', 'cd %s && git ls-files'],\n                \\ 2: ['.hg', 'hg --cwd %s locate -I .'],\n                \\ },\n                \\ 'fallback': 'ag %s -i --nocolor --nogroup --hidden\n                \\ --ignore out\n                \\ --ignore .git\n                \\ --ignore .svn\n                \\ --ignore .hg\n                \\ --ignore .DS_Store\n                \\ --ignore \"**/*.pyc\"\n                \\ -g \"\"'\n                \\ }\n```\n. https://github.com/ctrlpvim/ctrlp.vim/issues/151\n. https://github.com/ctrlpvim/ctrlp.vim/issues/151\ncan you try with the  latest version of [Ctrlp.vim](https://github.com/ctrlpvim/ctrlp.vim)\n. here is an Organization for ctrlp maybe you can put you issue here\n#682 \nhttps://github.com/ctrlpvim/ctrlp.vim\n. here is an active fork of kien/ctrlp.vim,maybe you can get help from there.\nhttps://github.com/ctrlpvim/ctrlp.vim\nalso if you need to switch back and forth between two files,i think Unite maybe is a good choise\n. i think  this can be implemented by yourself\nmaybe this is what you need\nhttps://github.com/h14i/vim-ctrlp-buftab/blob/master/README.md\n. can you open your issue here\nhttps://github.com/ctrlpvim/ctrlp.vim ,it is an active fork\n. also you can try with this match\n'FelikZ/ctrlp-py-matcher' \nlet g:ctrlp_match_func = { 'match': 'pymatcher#PyMatch'  } \n. @eldamir let me have a try \n. ![2015-12-18 20-34-38](https://cloud.githubusercontent.com/assets/13142418/11897027/cba84c78-a5c6-11e5-9cef-7789230005ec.png)\n\nit seem works well for me ,if i type into InvoiceDetail my cursor is located on InvoiceDetailView,java\n. ok let me try will py\n. also works well ,you could see my cursor on InvoiceDetailView.py\n![2015-12-18 20-37-09](https://cloud.githubusercontent.com/assets/13142418/11897085/6a527448-a5c7-11e5-95df-45b206d36f1a.png)\n. how do you set g:ctrlp_custom_ignore and your match\n. can you show me you vimrc ,if possible,\n. ```\nNeoBundle 'FelikZ/ctrlp-py-matcher'\n\nlet g:ctrlp_match_func = { 'match': 'pymatcher#PyMatch'  }\n```\n\ncan you try to use this matcher?\n\ni just use your setting but can not reproduce,the diff is my matcher\n\nand i am using ag -i instead of ag -l\n. here is my ctrlp setting\n\n``` vim\nNeoBundle 'ctrlpvim/ctrlp.vim'\nNeoBundle 'FelikZ/ctrlp-py-matcher'\n    let g:ctrlp_map = '<c-p>'\n    let g:ctrlp_cmd = 'CtrlP'\n    let g:ctrlp_working_path_mode = 'ra'\n    let g:ctrlp_root_markers = 'pom.xml'\n    let g:ctrlp_match_window = 'bottom,order:btt,min:1,max:25,results:25'\n    let g:ctrlp_show_hidden = 1\n    \"for caching\n    let g:ctrlp_use_caching = 1\n    let g:ctrlp_clear_cache_on_exit = 0\n    let g:ctrlp_cache_dir = $HOME.'/.cache/ctrlp'\n    \"let g:ctrlp_map = ',,'\n    \"let g:ctrlp_open_multiple_files = 'v'\n    set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.class,tags\n    let g:ctrlp_custom_ignore = {\n                \\ 'dir':  '\\v[\\/]\\.(git|hg|svn)$|target',\n                \\ 'file': '\\v\\.(exe|so|dll|ttf|png)$',\n                \\ 'link': 'some_bad_symbolic_links',\n                \\ }\n    let g:ctrlp_user_command = ['ag %s -i --nocolor --nogroup --hidden\n                \\ --ignore out\n                \\ --ignore .git\n                \\ --ignore .svn\n                \\ --ignore .hg\n                \\ --ignore .DS_Store\n                \\ --ignore \"**/*.pyc\"\n                \\ -g \"\"'\n                \\ ]\n\n    let g:ctrlp_match_func = { 'match': 'pymatcher#PyMatch'  }\n\n```\n. vim variable should not be defind in diff type ,you can comment you setting for g:ctrlp_user_command\n\nit is due to i am using a list as it's value\n. ok  do you using neobundle?\n. ``` vim\nset nocompatible\nsyntax on\nfiletype off\nset rtp+=~/.vim/bundle/Vundle.vim/\ncall vundle#begin()\nPlugin 'VundleVim/Vundle.vim'\nPlugin 'ctrlpvim/ctrlp.vim'\nPlugin 'FelikZ/ctrlp-py-matcher'\n    let g:ctrlp_map = '<c-p>'\n    let g:ctrlp_cmd = 'CtrlP'\n    let g:ctrlp_working_path_mode = 'ra'\n    let g:ctrlp_root_markers = 'pom.xml'\n    let g:ctrlp_match_window = 'bottom,order:btt,min:1,max:25,results:25'\n    let g:ctrlp_show_hidden = 1\n    \"for caching\n    let g:ctrlp_use_caching = 1\n    let g:ctrlp_clear_cache_on_exit = 0\n    let g:ctrlp_cache_dir = $HOME.'/.cache/ctrlp'\n    \"let g:ctrlp_map = ',,'\n    \"let g:ctrlp_open_multiple_files = 'v'\n    set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.class,tags\n    let g:ctrlp_custom_ignore = {\n                \\ 'dir':  '\\v[\\/]\\.(git|hg|svn)$|target',\n                \\ 'file': '\\v\\.(exe|so|dll|ttf|png)$',\n                \\ 'link': 'some_bad_symbolic_links',\n                \\ }\n    let g:ctrlp_user_command = ['ag %s -i --nocolor --nogroup --hidden\n                \\ --ignore out\n                \\ --ignore .git\n                \\ --ignore .svn\n                \\ --ignore .hg\n                \\ --ignore .DS_Store\n                \\ --ignore \"**/*.pyc\"\n                \\ -g \"\"'\n                \\ ]\n\n    let g:ctrlp_match_func = { 'match': 'pymatcher#PyMatch'  }\ncall vundle#end()\nfiletype plugin indent on\n\n```\n. but why? it works well for me ,i have just use this script without anything others.\n\nmaybe it is better copy this class into ~/Test/  and try again\n. welcome,also it is better use this active fore \nhttps://github.com/ctrlpvim/ctrlp.vim\n. @Nicop06 maybe you can try with the active fork\nhttps://github.com/ctrlpvim/ctrlp.vim\n. open issue here \nhttps://github.com/ctrlpvim/ctrlp.vim\nit is a active fork,and abbr also can be used as `:h abbr`,by this way you can find what you want\n. ",
    "valentin-nemcev": "Ok, I'll try that, thank you!\n. Ok, I'll try that, thank you!\n. ",
    "cjbottaro": "Ahh, figured it out:  `g:ctrlp_custom_ignore` needs to be set before the first time CtrlP is invoked.\n\nThanks!\n. Ahh, figured it out:  `g:ctrlp_custom_ignore` needs to be set before the first time CtrlP is invoked.\n\nThanks!\n. ",
    "pansz": "I had tried to use \n\nhi link CtrlPLinePre Ignore\n\nAnd it seems to work great.\n. This returns -1 for me.\n\nSo, hi link CtrlPLinePre Ignore isn't a better approach? (I think all colors should be defined by color scheme and plugins should only use hi link)\n. Well, it is all about choice. If a colorscheme choose to use a visible color for Ignore, then it does meant to let user see what is intend to be hidden. And if a user choose to use such a colorscheme without any modification, this means he/she choose to see the hidden text (with a dim color, of course). \n\nWhen a colorscheme set ctermbg=None and use a background picture, it is impossible to hide the text completely, but the colorscheme may choose a foreground color very close to the background picture in order to make the text almost invisible, and define that group to be \"Ignore\".\n. I had tried to use \n\nhi link CtrlPLinePre Ignore\n\nAnd it seems to work great.\n. This returns -1 for me.\n\nSo, hi link CtrlPLinePre Ignore isn't a better approach? (I think all colors should be defined by color scheme and plugins should only use hi link)\n. Well, it is all about choice. If a colorscheme choose to use a visible color for Ignore, then it does meant to let user see what is intend to be hidden. And if a user choose to use such a colorscheme without any modification, this means he/she choose to see the hidden text (with a dim color, of course). \n\nWhen a colorscheme set ctermbg=None and use a background picture, it is impossible to hide the text completely, but the colorscheme may choose a foreground color very close to the background picture in order to make the text almost invisible, and define that group to be \"Ignore\".\n. ",
    "henrymazza": "That's perfectly true! Sorry for the dup!\n. That's perfectly true! Sorry for the dup!\n. ",
    "aleprovencio": "just for the record this is a us-international layout, but on a dead keys variant.\n. I second this, as it would allow to achieve the same behavior as pentadactyl completion list, although I'd rather having it working ctrlp's way, so I've just sent a message to the mail list.\n. just for the record this is a us-international layout, but on a dead keys variant.\n. I second this, as it would allow to achieve the same behavior as pentadactyl completion list, although I'd rather having it working ctrlp's way, so I've just sent a message to the mail list.\n. ",
    "lervag": "True. An option is to remove the beginning of the line instead of the end of the line.\n. In changeset d869903 I did some minor updates where I added a path filter. The reason for adding the filter is that I have some problems with ctrlp using the full path names instead of some symbolic links I have, which makes the path names very long. If I apply the path filter first, most of my long file name problems dissappear.\n\nI know this might not be interesting for to pull. I also made a change to the file name shortener, in that I made it possible to use a custom function \"MyPathShortener\".\n\nTo summarize: You might want to look at this and see if the idea of giving the user an option to filter the path or file names is something you like. Perhaps an idea is to simply give a choice to use a custom function to filter the path names alltogether, which results in only one new option.\n. No problem. It might not be the best solution, but at the moment, my MyPathFilter function is defined in my `.vimrc` like this:\n\n```\nfunction! MyPathFilter(str)\n  let newstr = fnamemodify(a:str,\n        \\ \":s?<some-path>?<target>?\")\n  let newstr = fnamemodify(newstr,\n        \\ \":s?<some-other-path>?<other-target>?\")\n  retu newstr\nendfunction\n```\n\nAs you probably notice, this is almost kind of rude, but it actually works fine.\n\nTo be specific, what I do is that I change paths like \"/home/location/of/Dropbox/folder/+++\" to \"~/symlink\". This is because I have chosen to let my Dropbox folder live in a separate home folder, and use symlinks to the folder in Dropbox that I need or use often (this gives me a very clean \"~/\").\n\nSince the MyPathFilter actually does exactly what I need, I actually don't have a MyPathShorten function any longer. I just added it to demonstrate what I thought could be a good idea.\n\nAfter some further thought, I think the better idea is to let the user specify a user function for filtering all paths/lines, that is to allow a custom formatline function as an alternative to the one that you currently use to shorten the long lines. This allows the flexibility that at least I need, at the same time as it makes it much cleaner.\n\nIf you want, I could try to make a prototype implementation of this to show you more specifically what I mean.\n. So, now I just added the change I mentioned above, and I think it is much better. I have these lines in my `.vimrc`, and this gives me the flexilibity I needed. Since it also opens the possilibity to generally change how the ctrlp lines look, I might play more with this in the future.\n\n``` viml\nlet g:ctrlp_custom_formatline = 'MyFormatLine'\n\nfunction! MyFormatLine(str, ispath, winw)\n  let str = a:str\n  if a:ispath\n    for fmod in [\n           \\ \":s?<path-to-change>?<target-path>?\",\n           \\ ]\n      let str = fnamemodify(str, fmod)\n    endfor\n    if s:strlen(str) > ( a:winw - 4 )\n      str = pathshorten(str)\n    endif\n  endif\n  return '> ' . str\nendfunction\n```\n\nLet me know what you think or if you have any further questions.\n. Hi! Sorry, I was away and could not respond for some days. I agree with your decision. Keep up the good work!\n. By the way: I really like your custom pathshorten. :)\n. Thanks! And no problem :)\n\n2012/12/2 kien notifications@github.com\n\n> Fixed. Sorry about that!\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/kien/ctrlp.vim/issues/321#issuecomment-10935668.\n. The issue was already fixed in recent commits from `vim-airline`.\n. I think airline has some sort of ctrlp.vim trigger that fired a change of the statusline. But I did not really get the details of what was wrong. In any case, it was not a fault with ctrlp.vim. :)\n. True. An option is to remove the beginning of the line instead of the end of the line.\n. In changeset d869903 I did some minor updates where I added a path filter. The reason for adding the filter is that I have some problems with ctrlp using the full path names instead of some symbolic links I have, which makes the path names very long. If I apply the path filter first, most of my long file name problems dissappear.\n\nI know this might not be interesting for to pull. I also made a change to the file name shortener, in that I made it possible to use a custom function \"MyPathShortener\".\n\nTo summarize: You might want to look at this and see if the idea of giving the user an option to filter the path or file names is something you like. Perhaps an idea is to simply give a choice to use a custom function to filter the path names alltogether, which results in only one new option.\n. No problem. It might not be the best solution, but at the moment, my MyPathFilter function is defined in my `.vimrc` like this:\n\n```\nfunction! MyPathFilter(str)\n  let newstr = fnamemodify(a:str,\n        \\ \":s?<some-path>?<target>?\")\n  let newstr = fnamemodify(newstr,\n        \\ \":s?<some-other-path>?<other-target>?\")\n  retu newstr\nendfunction\n```\n\nAs you probably notice, this is almost kind of rude, but it actually works fine.\n\nTo be specific, what I do is that I change paths like \"/home/location/of/Dropbox/folder/+++\" to \"~/symlink\". This is because I have chosen to let my Dropbox folder live in a separate home folder, and use symlinks to the folder in Dropbox that I need or use often (this gives me a very clean \"~/\").\n\nSince the MyPathFilter actually does exactly what I need, I actually don't have a MyPathShorten function any longer. I just added it to demonstrate what I thought could be a good idea.\n\nAfter some further thought, I think the better idea is to let the user specify a user function for filtering all paths/lines, that is to allow a custom formatline function as an alternative to the one that you currently use to shorten the long lines. This allows the flexibility that at least I need, at the same time as it makes it much cleaner.\n\nIf you want, I could try to make a prototype implementation of this to show you more specifically what I mean.\n. So, now I just added the change I mentioned above, and I think it is much better. I have these lines in my `.vimrc`, and this gives me the flexilibity I needed. Since it also opens the possilibity to generally change how the ctrlp lines look, I might play more with this in the future.\n\n``` viml\nlet g:ctrlp_custom_formatline = 'MyFormatLine'\n\nfunction! MyFormatLine(str, ispath, winw)\n  let str = a:str\n  if a:ispath\n    for fmod in [\n           \\ \":s?<path-to-change>?<target-path>?\",\n           \\ ]\n      let str = fnamemodify(str, fmod)\n    endfor\n    if s:strlen(str) > ( a:winw - 4 )\n      str = pathshorten(str)\n    endif\n  endif\n  return '> ' . str\nendfunction\n```\n\nLet me know what you think or if you have any further questions.\n. Hi! Sorry, I was away and could not respond for some days. I agree with your decision. Keep up the good work!\n. By the way: I really like your custom pathshorten. :)\n. Thanks! And no problem :)\n\n2012/12/2 kien notifications@github.com\n\n> Fixed. Sorry about that!\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/kien/ctrlp.vim/issues/321#issuecomment-10935668.\n. The issue was already fixed in recent commits from `vim-airline`.\n. I think airline has some sort of ctrlp.vim trigger that fired a change of the statusline. But I did not really get the details of what was wrong. In any case, it was not a fault with ctrlp.vim. :)\n. ",
    "m1r4ge": "Here is a fix\n\ndiff --git a/autoload/ctrlp.vim b/autoload/ctrlp.vim\nindex 2730172..971098c 100644\n--- a/autoload/ctrlp.vim\n+++ b/autoload/ctrlp.vim\n@@ -391,11 +391,12 @@ fu! s:Update(str)\n        let notail = substitute(a:str, '\\\\', '\\', 'g')\n        let notail = substitute(notail, '\\\\@<!:([^:]|\\:)*$', '', '')\n        let notail = substitute(notail, '\\\\ze:', '', 'g')\n-       \" Update tail\n-       let pat = s:SplitPattern(a:str)\n      \" Stop if the string's unchanged\n      if notail == oldstr && !empty(notail) && !exists('s:force')\n              retu\n      en\n-       let pat = s:SplitPattern(a:str)\n      let lines = exists('g:ctrlp_nolimit') && empty(notail) ? copy(g:ctrlp_lines)\n              \\ : s:MatchedItems(g:ctrlp_lines, pat, s:mxheight)\n      cal s:Render(lines, pat)\n. Here is a fix\n\ndiff --git a/autoload/ctrlp.vim b/autoload/ctrlp.vim\nindex 2730172..971098c 100644\n--- a/autoload/ctrlp.vim\n+++ b/autoload/ctrlp.vim\n@@ -391,11 +391,12 @@ fu! s:Update(str)\n        let notail = substitute(a:str, '\\\\', '\\', 'g')\n        let notail = substitute(notail, '\\\\@<!:([^:]|\\:)*$', '', '')\n        let notail = substitute(notail, '\\\\ze:', '', 'g')\n-       \" Update tail\n-       let pat = s:SplitPattern(a:str)\n      \" Stop if the string's unchanged\n      if notail == oldstr && !empty(notail) && !exists('s:force')\n              retu\n      en\n-       let pat = s:SplitPattern(a:str)\n      let lines = exists('g:ctrlp_nolimit') && empty(notail) ? copy(g:ctrlp_lines)\n              \\ : s:MatchedItems(g:ctrlp_lines, pat, s:mxheight)\n      cal s:Render(lines, pat)\n. ",
    "endel": "I've just wroted a simple and useful plugin for switching the current buffer filetype.\nhttps://github.com/endel/ctrlp-filetype.vim\n\nHope you guys like it. \n. I've just wroted a simple and useful plugin for switching the current buffer filetype.\nhttps://github.com/endel/ctrlp-filetype.vim\n\nHope you guys like it. \n. ",
    "mbadran": "There's a yankring here (which I haven't tried):\n\nhttps://github.com/sgur/ctrlp-extensions.vim\n. There's a yankring here (which I haven't tried):\n\nhttps://github.com/sgur/ctrlp-extensions.vim\n. ",
    "tacahiroy": "Thank you, `93cb20d` works fine:)\n. Oh - I see. I didn't read the manual:(\n. ah - I see.\nDo  you have a plan for implementing highlight feature for other types?\n\nBTW, I've been writing a ctrlp.vim extension called [ctrlp-funky](https://github.com/tacahiroy/ctrlp-funky) and it's matching type is **line**.\nI would like to enable highlight feature on it if possible.\nI can do it just change matching type to **path**, however, I guess it affects widely.\n\nIt's NOT a good idea to enable highlight feature, isn't it?\nCould you gimme any ideas please :)\n. By default, you can use `<C-u>` to do that.\nAnd you can map other key sequences using a variable `g:ctrlp_prompt_mappings['PrtClear()']`.\nSee `:help g:ctrlp_prompt_mappings`\n. The variable `g:ctrlp_custom_ignore` accepts regexp, so the patter you specified matches like `vendor/vendor` or `vendor_abc/vendor`.\n\nCould you try this please:\n\n```\n\\v[\\/](\\.git|\\.hg|\\.svn|\\.settings|\\.sass-cache|cache|\\.rsync_cache|vendor/([^\\/]+\\/)*vendor)$\n```\n\nIf you enable _cache_ in ctrlp.vim, you need to reload entries using `<F5>` (by default).\n. You can use `<C-u>` to clear strings in the ctrlp.vim prompt.\n. If my understanding is correct this config works for you:\n\n``` vim\nlet g:ctrlp_prompt_mappings = {\n  \\ 'AcceptSelection(\"e\")': ['<C-e>'],\n  \\ 'AcceptSelection(\"v\")': ['<Cr>']\n\\ }\n```\n. +1\nam willing to contribute ctrlp.vim, am not an expert of ctrlp.vim though.\nhope he's okay.\n. This repo is not maintained any more. It's suggested to use https://github.com/ctrlpvim/ctrlp.vim instead.. oops wrong repo :/ closing\n. ughaaaa :/\n. Thank you, `93cb20d` works fine:)\n. Oh - I see. I didn't read the manual:(\n. ah - I see.\nDo  you have a plan for implementing highlight feature for other types?\n\nBTW, I've been writing a ctrlp.vim extension called [ctrlp-funky](https://github.com/tacahiroy/ctrlp-funky) and it's matching type is **line**.\nI would like to enable highlight feature on it if possible.\nI can do it just change matching type to **path**, however, I guess it affects widely.\n\nIt's NOT a good idea to enable highlight feature, isn't it?\nCould you gimme any ideas please :)\n. By default, you can use `<C-u>` to do that.\nAnd you can map other key sequences using a variable `g:ctrlp_prompt_mappings['PrtClear()']`.\nSee `:help g:ctrlp_prompt_mappings`\n. The variable `g:ctrlp_custom_ignore` accepts regexp, so the patter you specified matches like `vendor/vendor` or `vendor_abc/vendor`.\n\nCould you try this please:\n\n```\n\\v[\\/](\\.git|\\.hg|\\.svn|\\.settings|\\.sass-cache|cache|\\.rsync_cache|vendor/([^\\/]+\\/)*vendor)$\n```\n\nIf you enable _cache_ in ctrlp.vim, you need to reload entries using `<F5>` (by default).\n. You can use `<C-u>` to clear strings in the ctrlp.vim prompt.\n. If my understanding is correct this config works for you:\n\n``` vim\nlet g:ctrlp_prompt_mappings = {\n  \\ 'AcceptSelection(\"e\")': ['<C-e>'],\n  \\ 'AcceptSelection(\"v\")': ['<Cr>']\n\\ }\n```\n. +1\nam willing to contribute ctrlp.vim, am not an expert of ctrlp.vim though.\nhope he's okay.\n. This repo is not maintained any more. It's suggested to use https://github.com/ctrlpvim/ctrlp.vim instead.. oops wrong repo :/ closing\n. ughaaaa :/\n. ",
    "kevwil": "I was trying v1.6.9.1. The colorscheme is \"vividchalk\" - perhaps it doesn't specify a background color.\n. I tried cloning from master rather than the vim.org download. The error is gone, even with the vividchalk color scheme unchanged. Thanks!\n. I was trying v1.6.9.1. The colorscheme is \"vividchalk\" - perhaps it doesn't specify a background color.\n. I tried cloning from master rather than the vim.org download. The error is gone, even with the vividchalk color scheme unchanged. Thanks!\n. ",
    "linduxed": "After the latest update, I've started to experience this issue. I haven't had any problems before, but now I get the E420.\n. It turned out that my remote was set to the vim-scripts fork of your repo, which didn't upgrade further than 1.6.9.1. The latest version solved my issue.\n. After the latest update, I've started to experience this issue. I haven't had any problems before, but now I get the E420.\n. It turned out that my remote was set to the vim-scripts fork of your repo, which didn't upgrade further than 1.6.9.1. The latest version solved my issue.\n. ",
    "johnhamelink": "FWIW, cscope is very similar in terms of functionality to ctags, but it finds functions/classes/whatever in a different way. I might take a look at adding this functionality, but with ctags (as that's what I use) sometime this weekend if I have time :)\n. FWIW, cscope is very similar in terms of functionality to ctags, but it finds functions/classes/whatever in a different way. I might take a look at adding this functionality, but with ctags (as that's what I use) sometime this weekend if I have time :)\n. ",
    "ringerc": "cscope support seems to be present in the 'tags' extension, at least if your vimrc contains:\n\n```\nset cscopetag\n```\n\nIf I just:\n\n```\nlet g:ctrlp_extensions = ['tag']\n```\n\nthen I get full tag search that appears to be using my cscope database.\n. cscope support seems to be present in the 'tags' extension, at least if your vimrc contains:\n\n```\nset cscopetag\n```\n\nIf I just:\n\n```\nlet g:ctrlp_extensions = ['tag']\n```\n\nthen I get full tag search that appears to be using my cscope database.\n. ",
    "j5shi": "@ringerc I tried as you recommended but not worked, do I have to set `tags` option as well? I tried to change `tags` option but don't know which database to add.. +1, please, add it to ctrlp or accept a pull request for it.\n. +1. > Natively, you can try g:ctrlp_lazy_update which should alleviate it somewhat\r\n\r\nWorks like a charm!. @ringerc I tried as you recommended but not worked, do I have to set `tags` option as well? I tried to change `tags` option but don't know which database to add.. +1, please, add it to ctrlp or accept a pull request for it.\n. +1. > Natively, you can try g:ctrlp_lazy_update which should alleviate it somewhat\r\n\r\nWorks like a charm!. ",
    "ryansch": "cc @morganick\n. cc @morganick\n. ",
    "morganick": "I am typing in: contacts_controller.rb and it doesn't show up.  I have also made sure the cache is current. That is the only file I can't seem to pull up.  If I back up and include the parent directory (controllers/contacts_controller.rb) I can get it to show up.  So I know it is in the cache.\n\nOther than that it works great.\n. I am typing in: contacts_controller.rb and it doesn't show up.  I have also made sure the cache is current. That is the only file I can't seem to pull up.  If I back up and include the parent directory (controllers/contacts_controller.rb) I can get it to show up.  So I know it is in the cache.\n\nOther than that it works great.\n. ",
    "skeept": "Thanks, \n\nyour solution is very good, going to use it from now on in my vimrc.\n. Right,\n\nit worked perfectly, thank you for the hint.\n\nOn Mon, Jan 14, 2013 at 2:44 AM, kien notifications@github.com wrote:\n\n> You just need to clear the old file cache. Check the document (or the\n> readme) for the mapping and commands. If you like, you can also disable\n> caching permanently or partially with the g:ctrlp_use_caching option.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/kien/ctrlp.vim/issues/347#issuecomment-12209066.\n. Hi Sirver,\n\nI use the A.vim plugin and the files .h in the project that I am working are currently under a folder ./inc, while the c++ end in a .C file. \n\nAdding the following lines to my .vimrc seems to fix the behavior of the plugin for me:\n\nlet g:alternateSearchPath = '../inc,./inc,../source,sfr,../src,../include,..'\nlet g:alternateExtensions_C = \"h,inc,H,HPP,hpp\"\nlet g:alternateExtensions_h = \"C,cpp,c++,CPP\"\n. Thanks, \n\nyour solution is very good, going to use it from now on in my vimrc.\n. Right,\n\nit worked perfectly, thank you for the hint.\n\nOn Mon, Jan 14, 2013 at 2:44 AM, kien notifications@github.com wrote:\n\n> You just need to clear the old file cache. Check the document (or the\n> readme) for the mapping and commands. If you like, you can also disable\n> caching permanently or partially with the g:ctrlp_use_caching option.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/kien/ctrlp.vim/issues/347#issuecomment-12209066.\n. Hi Sirver,\n\nI use the A.vim plugin and the files .h in the project that I am working are currently under a folder ./inc, while the c++ end in a .C file. \n\nAdding the following lines to my .vimrc seems to fix the behavior of the plugin for me:\n\nlet g:alternateSearchPath = '../inc,./inc,../source,sfr,../src,../include,..'\nlet g:alternateExtensions_C = \"h,inc,H,HPP,hpp\"\nlet g:alternateExtensions_h = \"C,cpp,c++,CPP\"\n. ",
    "obxhdx": "Thank you very much!\n. Thank you very much!\n. ",
    "ezmiller": "This is now `g:ctrlp_show_hidden`.. I'm using: ` :let g:ctrlp_user_command = 'ag %s -l --hidden --nocolor -g \"\"'` along with `g:ctrlp_show_hidden =1`, which works. Maybe something going on with the other parts of your user command? The line breaks?. This is now `g:ctrlp_show_hidden`.. I'm using: ` :let g:ctrlp_user_command = 'ag %s -l --hidden --nocolor -g \"\"'` along with `g:ctrlp_show_hidden =1`, which works. Maybe something going on with the other parts of your user command? The line breaks?. ",
    "kincorvia": "Same issue for me.. if I type 'user.rb' it doesn't find the filename with that exact name.. but if I type 'models/user.rb' it does find it.. would appreciate the same fix.\n. Same issue for me.. if I type 'user.rb' it doesn't find the filename with that exact name.. but if I type 'models/user.rb' it does find it.. would appreciate the same fix.\n. ",
    "scudco": "I really like CtrlP, but having to switch modes or add multiple mappings to Rails specific directories in order find an explicitly specified file seems pretty odd. I don't think there is anything that should necessarily be fixed or changed here, but the current matching method is obviously not as intuitive as CommandT's.\n. I really like CtrlP, but having to switch modes or add multiple mappings to Rails specific directories in order find an explicitly specified file seems pretty odd. I don't think there is anything that should necessarily be fixed or changed here, but the current matching method is obviously not as intuitive as CommandT's.\n. ",
    "jarednorman": "I use separate mappings for searching the controller/asset/model/view directories to save time in the first place. This works excellently, and greatly reduced mismatches. \n. I use separate mappings for searching the controller/asset/model/view directories to save time in the first place. This works excellently, and greatly reduced mismatches. \n. ",
    "gabriellima": "Did like you said, but still not working.\n\nOpened a file at `~/first_workspace`, than hit `:CtrlPDir ~/another_workspace`\n\nBut after closing CtrlP and opening it again, it came back to first folder.\n\nAny clue?\n\nThanks in advance!\n. Thanks! `<c-x>` worked like a charm.\n. Did like you said, but still not working.\n\nOpened a file at `~/first_workspace`, than hit `:CtrlPDir ~/another_workspace`\n\nBut after closing CtrlP and opening it again, it came back to first folder.\n\nAny clue?\n\nThanks in advance!\n. Thanks! `<c-x>` worked like a charm.\n. ",
    "hugows": "I was having the same issue, and thought you would filter results after the user_command. \n. I was having the same issue, and thought you would filter results after the user_command. \n. ",
    "ndaversa": "> I don't want to slow that down too much and lose that speed. So for git for example, I think it's faster to use the --exclude-from option of the git ls-files command. Here's what works for me:\n> \n> git ls-files --exclude-from=ignoredfile -i\n> Where the ignoredfile contains this:\n> \n> *\n> !_.log\n> !_.png\n> !*.jpg\n\nI have tried this, for the life of me I can't figure out why the --exclude commands do not work. I tried them on the command line and it seems that they take no effect.\n. > I don't want to slow that down too much and lose that speed. So for git for example, I think it's faster to use the --exclude-from option of the git ls-files command. Here's what works for me:\n> \n> git ls-files --exclude-from=ignoredfile -i\n> Where the ignoredfile contains this:\n> \n> *\n> !_.log\n> !_.png\n> !*.jpg\n\nI have tried this, for the life of me I can't figure out why the --exclude commands do not work. I tried them on the command line and it seems that they take no effect.\n. ",
    "robbles": "I'd be happy to give writing this a try myself, just wanted to know if it's in the works already. Or done in a fork somewhere.\n. I'd be happy to give writing this a try myself, just wanted to know if it's in the works already. Or done in a fork somewhere.\n. ",
    "ornicar": ":+1:\n. :+1:\n. ",
    "jb55": "I'm having this same issue in tag mode with large tag files. Narrowing down pretty much grinds it to a halt in large projects (I'm testing on llvm)\n. I'm having this same issue in tag mode with large tag files. Narrowing down pretty much grinds it to a halt in large projects (I'm testing on llvm)\n. ",
    "acook": "Given have a directory like this:\n\napp/\ncapp/\nother/\ndirectories/\n\nWhen I open CtrlP and type \"app\", then the selected result is \"capp\", and \"app\" is way down the list somewhere.\n\nExact matches should really be the first match. Even if the sorting isn't alphabetical. \nI'll take a look at the sorting algorithm in the code, thanks.\n. Given have a directory like this:\n\napp/\ncapp/\nother/\ndirectories/\n\nWhen I open CtrlP and type \"app\", then the selected result is \"capp\", and \"app\" is way down the list somewhere.\n\nExact matches should really be the first match. Even if the sorting isn't alphabetical. \nI'll take a look at the sorting algorithm in the code, thanks.\n. ",
    "jinzhu": "Hi Kien,\n\n   First, xxx/color_variation is a file, not a path.\n   And I am not sure if there are someone use file's suffix to search it.\n\n   I thought first letter of file's base name should get a higher priority. for example.\n   xxx/product_variation -> pv\n   xxx/size_variation -> sv\n   xxx/user.csv -> u\n\n   Maybe it is not easy to do above with VimScript. but at least,  I think file public/javascript/xxx.js should not get a higher position than xxx/color_variation\n\n   You could build the test environment in you local with follow shell command.\n@@@  \nmkdir xxx\nmkdir public/javascript/ -p\ntouch xxx/product_variation\ntouch xxx/size_variation\ntouch xxx/color_variation\ntouch xxx/color_image\ntouch xxx/user.csv\ntouch public/javascript/xxx.js\n@@@\n\n   Thanks.\n. Hi Kien,\n\n   First, xxx/color_variation is a file, not a path.\n   And I am not sure if there are someone use file's suffix to search it.\n\n   I thought first letter of file's base name should get a higher priority. for example.\n   xxx/product_variation -> pv\n   xxx/size_variation -> sv\n   xxx/user.csv -> u\n\n   Maybe it is not easy to do above with VimScript. but at least,  I think file public/javascript/xxx.js should not get a higher position than xxx/color_variation\n\n   You could build the test environment in you local with follow shell command.\n@@@  \nmkdir xxx\nmkdir public/javascript/ -p\ntouch xxx/product_variation\ntouch xxx/size_variation\ntouch xxx/color_variation\ntouch xxx/color_image\ntouch xxx/user.csv\ntouch public/javascript/xxx.js\n@@@\n\n   Thanks.\n. ",
    "sdhull": "Awesome. Thanks @kien!  :)\n. Awesome. Thanks @kien!  :)\n. ",
    "daGrevis": "Thanks!\n. Can't you call Python that calls VimL in new thread or something?\n. Bump!\n\nP.S. Maybe script in VimL?\n. Thanks!\n. Can't you call Python that calls VimL in new thread or something?\n. Bump!\n\nP.S. Maybe script in VimL?\n. ",
    "jlgasparrini": "Good Joob!! :+1: \n. For this behaviour! When we seek and open the first file with ctrl-p, Is there any way (with default settings) to remove the empty tab? (This empty tab is created by vim, when this is opened)\n![a little clearer](https://cloud.githubusercontent.com/assets/4787484/10310718/bf6d9cd8-6c19-11e5-8ca1-240dea42bed5.png)\n. Good Joob!! :+1: \n. For this behaviour! When we seek and open the first file with ctrl-p, Is there any way (with default settings) to remove the empty tab? (This empty tab is created by vim, when this is opened)\n![a little clearer](https://cloud.githubusercontent.com/assets/4787484/10310718/bf6d9cd8-6c19-11e5-8ca1-240dea42bed5.png)\n. ",
    "sivaswami": " :heart: this option\n.  :heart: this option\n. ",
    "runekaagaard": "The remapping don't seem to work with nerdtree. When nerdtree is open while I press enter in ctrlp it replaces nerdtree instead of creating a new tab. It works fine with ctrl+t.\n. I made it work with nerdtree and the powerline tabline by adding this to my .vimrc:\n\n```\nlet g:ctrlp_open_func = { 'files': 'CustomOpenFunc' }\nfunction! CustomOpenFunc(action, line)\n    call call('ctrlp#acceptfile', [':t', a:line])\nendfunction\n```\n. The remapping don't seem to work with nerdtree. When nerdtree is open while I press enter in ctrlp it replaces nerdtree instead of creating a new tab. It works fine with ctrl+t.\n. I made it work with nerdtree and the powerline tabline by adding this to my .vimrc:\n\n```\nlet g:ctrlp_open_func = { 'files': 'CustomOpenFunc' }\nfunction! CustomOpenFunc(action, line)\n    call call('ctrlp#acceptfile', [':t', a:line])\nendfunction\n```\n. ",
    "acidjazz": "@kien  I think this is definitely something that should be in the readme, everyone has their preference of how they open files and I think this really helps w/ that, if you want I'll write it up and submit a PR if you don't have the time.\n. @kien  I think this is definitely something that should be in the readme, everyone has their preference of how they open files and I think this really helps w/ that, if you want I'll write it up and submit a PR if you don't have the time.\n. ",
    "wuzzeb": "Thanks, I see it improves on my version by using a cache.  I got around that by starting it in a subfolder of my home directory, but with the cache I can probably just open it right in my home directory and have it scan everything.\n. After trying the code in the gist, it doesn't quite work when vcs dirs are nested inside each other (like submodules)  I fixed this by adding\n\n```\ncal ctrlp#setdir(s:cwd . ctrlp#utils#lash() . a:str, 'chd!')\n```\n\nto the ctrlp#vcsdir#accept function.  After that, everything works as expected using the code from the gist.\n. Thanks, I see it improves on my version by using a cache.  I got around that by starting it in a subfolder of my home directory, but with the cache I can probably just open it right in my home directory and have it scan everything.\n. After trying the code in the gist, it doesn't quite work when vcs dirs are nested inside each other (like submodules)  I fixed this by adding\n\n```\ncal ctrlp#setdir(s:cwd . ctrlp#utils#lash() . a:str, 'chd!')\n```\n\nto the ctrlp#vcsdir#accept function.  After that, everything works as expected using the code from the gist.\n. ",
    "vintikzzz": "Oh yes! I was stupid enough to copy paste example as is. )))\n. Oh yes! I was stupid enough to copy paste example as is. )))\n. ",
    "ryanjm": "@vintikzzz I did the same thing. :) \n\nIt is much better now. Thank you!\n. @vintikzzz I did the same thing. :) \n\nIt is much better now. Thank you!\n. ",
    "jorgeas80": "Same silly mistake here. Thanks! :)\n. Same silly mistake here. Thanks! :)\n. ",
    "pbassut": "Same thing!\n. The issue regarding the wrong use of ctrlp_custom_ignore is in this repo. We can't move to the active fork in this case, can we?\n. Same thing!\n. The issue regarding the wrong use of ctrlp_custom_ignore is in this repo. We can't move to the active fork in this case, can we?\n. ",
    "shennyg": "thanks kien, max_files was my issue.\n. thanks kien, max_files was my issue.\n. ",
    "freeformz": "Here is some debug from the top of SetWD\n\nFirst find (shared.rb)\npathmode\n0\na:0\n1\na:1\n/Users/edwardam/devel/project\n\nSecond find (shared.mustache)\npathmode\n0\na:0\n1\na:1\n/Users/edwardam/devel/project/spec/misc/resource_install\n\nFWIW: I am not using Janus.\n\nYou can find what I'm doing here:\nhttps://github.com/freeformz/dotvim\nand here:\nhttps://github.com/freeformz/Dotfiles\n. I'm no vimscripter ...\n\nBut the first path of the following snippet is running ...\n\n```\nif a:0 && strlen(a:1) | if type(a:1)\n  cal ctrlp#setdir(a:1) | retu\nel\n  let pathmode = a:1\nen | en\n```\n\nNot sure if it's related. So ctrlp#setdir(a:1) is being called.\n\nWhen I change the `cal ... | retu` line to just `retu` everything works as I need.\n\nNote, I'm also using macvim if that makes a difference.\n. doh. for some reason I needed that in older versions. :-(\n\nSorry for the confusion.\n. Here is some debug from the top of SetWD\n\nFirst find (shared.rb)\npathmode\n0\na:0\n1\na:1\n/Users/edwardam/devel/project\n\nSecond find (shared.mustache)\npathmode\n0\na:0\n1\na:1\n/Users/edwardam/devel/project/spec/misc/resource_install\n\nFWIW: I am not using Janus.\n\nYou can find what I'm doing here:\nhttps://github.com/freeformz/dotvim\nand here:\nhttps://github.com/freeformz/Dotfiles\n. I'm no vimscripter ...\n\nBut the first path of the following snippet is running ...\n\n```\nif a:0 && strlen(a:1) | if type(a:1)\n  cal ctrlp#setdir(a:1) | retu\nel\n  let pathmode = a:1\nen | en\n```\n\nNot sure if it's related. So ctrlp#setdir(a:1) is being called.\n\nWhen I change the `cal ... | retu` line to just `retu` everything works as I need.\n\nNote, I'm also using macvim if that makes a difference.\n. doh. for some reason I needed that in older versions. :-(\n\nSorry for the confusion.\n. ",
    "slyphon": "OOPS! yeah, probably would help if i were using the 1.7.0 branch instead of master...\n\nsorry! great extension! keep up the great work!\n. Oh, maybe i'll just try it w/ the default ctrl-p mapping then. I wasn't\nthinking of insert v. normal mode (good point).\n\nOn 3/20/12 7:25 PM, \"kien\"\n<reply+i-3737400-f90eb486c607015c1030153ba5b66744917f2c3a-46660@reply.githu\nb.com> wrote:\n\n> Hmm, the 1.7.0 branch is an experimental branch, it's buggy and slower\n> than master. You shouldn't use it. It also doesn't have any change\n> related to the invocation mapping (no changes in plugin/ctrlp.vim). And\n> this option has been pretty much the same since 1.0. So just make sure\n> you put the `let g:ctrlp_map = '<c-;>'` in your .vimrc and restart Vim.\n> \n> Also, `<c-p>` is only used for completion in Insert mode. In Normal mode,\n> `<c-p>` is a duplicate of `k`.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/kien/ctrlp.vim/issues/165#issuecomment-4607830\n. Ok, so i switched to using master, re-set `let g:ctrlp_map = '<c-;>'` in my .vimrc and restarted vim, and when I'm in normal mode and hit `C-;` nothing happens. \n\ndoing an `:nmap` shows:\n\n`n  <C-;>       * :<C-U>CtrlP<CR>`\n\nReading the docs it says that asterisk \"indicates that it is not remappable.\" I'm not sure what the impact of that is. \n\nWhen I remapped to `<f9>` it worked fine, but that's a little cumbersome. \n\nOh, and I found buried in my .vimrc a mapping of `<c-p>` and `<c-n>` to `:cn<cr>` (i.e. grep results, errors). \n. yeah, i don't think the 1.7.0 branch was related.\n\nThat's weird, I wonder what the story with that is. Anyway, thanks for the help!\n. OOPS! yeah, probably would help if i were using the 1.7.0 branch instead of master...\n\nsorry! great extension! keep up the great work!\n. Oh, maybe i'll just try it w/ the default ctrl-p mapping then. I wasn't\nthinking of insert v. normal mode (good point).\n\nOn 3/20/12 7:25 PM, \"kien\"\n<reply+i-3737400-f90eb486c607015c1030153ba5b66744917f2c3a-46660@reply.githu\nb.com> wrote:\n\n> Hmm, the 1.7.0 branch is an experimental branch, it's buggy and slower\n> than master. You shouldn't use it. It also doesn't have any change\n> related to the invocation mapping (no changes in plugin/ctrlp.vim). And\n> this option has been pretty much the same since 1.0. So just make sure\n> you put the `let g:ctrlp_map = '<c-;>'` in your .vimrc and restart Vim.\n> \n> Also, `<c-p>` is only used for completion in Insert mode. In Normal mode,\n> `<c-p>` is a duplicate of `k`.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/kien/ctrlp.vim/issues/165#issuecomment-4607830\n. Ok, so i switched to using master, re-set `let g:ctrlp_map = '<c-;>'` in my .vimrc and restarted vim, and when I'm in normal mode and hit `C-;` nothing happens. \n\ndoing an `:nmap` shows:\n\n`n  <C-;>       * :<C-U>CtrlP<CR>`\n\nReading the docs it says that asterisk \"indicates that it is not remappable.\" I'm not sure what the impact of that is. \n\nWhen I remapped to `<f9>` it worked fine, but that's a little cumbersome. \n\nOh, and I found buried in my .vimrc a mapping of `<c-p>` and `<c-n>` to `:cn<cr>` (i.e. grep results, errors). \n. yeah, i don't think the 1.7.0 branch was related.\n\nThat's weird, I wonder what the story with that is. Anyway, thanks for the help!\n. ",
    "john2x": "Sorry for the delay. I think the problem is with BClose (http://vim.wikia.com/wiki/VimTip165, https://github.com/cespare/vim-bclose). \n\nSteps:\n1. Open at least 2 files (any method would do) (so it will show MiniBufExpl at the top)\n2. Close the current buffer with BClose (`:Bclose`)\n3. Re-open the file closed in step 2 with with CtrlP\n. Sorry for the delay. I think the problem is with BClose (http://vim.wikia.com/wiki/VimTip165, https://github.com/cespare/vim-bclose). \n\nSteps:\n1. Open at least 2 files (any method would do) (so it will show MiniBufExpl at the top)\n2. Close the current buffer with BClose (`:Bclose`)\n3. Re-open the file closed in step 2 with with CtrlP\n. ",
    "rspeicher": "Ah ha, thanks for the info.\n. Ah ha, thanks for the info.\n. ",
    "houqp": "Thanks for the reply.\n\n> You can disable zooming to a project's root \n\nYes, I have disabled it and set `g:ctrlp_working_path_mode` to 0\n\nAha, I found out the causes. After I remove the `let g:ctrlp_user_command = 'find %s -type f` entry in my vimrc, it can display my Makefile now. Previously, using `find` also ignores the `README.md` in my root project directory. Only `README.md` in subdirectories are displayed.\n\nIs there anything wrong with the find command?\n. Clearing the cache does not help, but I can live with `globpath()` ;P\n\nThanks for your help. CtrlP is a great plugin :)\n. Thanks for the reply.\n\n> You can disable zooming to a project's root \n\nYes, I have disabled it and set `g:ctrlp_working_path_mode` to 0\n\nAha, I found out the causes. After I remove the `let g:ctrlp_user_command = 'find %s -type f` entry in my vimrc, it can display my Makefile now. Previously, using `find` also ignores the `README.md` in my root project directory. Only `README.md` in subdirectories are displayed.\n\nIs there anything wrong with the find command?\n. Clearing the cache does not help, but I can live with `globpath()` ;P\n\nThanks for your help. CtrlP is a great plugin :)\n. ",
    "jevy": "@kien I'm wondering if the \"git ls-files\" command you have here should be listed as the preferred solution over the simple \"git ls-files\".  Having ctrl-p skip files that aren't checked confused me for awhile before I dug into it.\n. @kien I'm wondering if the \"git ls-files\" command you have here should be listed as the preferred solution over the simple \"git ls-files\".  Having ctrl-p skip files that aren't checked confused me for awhile before I dug into it.\n. ",
    "Flimm": "+1 the patch\n. +1 the patch\n. ",
    "john-kurkowski": "+1. Shame this definitely won't be added, as it's becoming the standard in similar tools like `ack` and `ag`.\n\nHowever, I found a separate script to modify `wildignore` based on `vim-fugitive` support: http://www.vim.org/scripts/script.php?script_id=2557\n. +1. Although the fork in #591 carries CtrlP forward, I have never been bothered that development on this repo stopped. Sometimes it's stagnation. In my opinion, CtrlP was largely done. It _just works_ for me. Well done @kien.\n. +1. Shame this definitely won't be added, as it's becoming the standard in similar tools like `ack` and `ag`.\n\nHowever, I found a separate script to modify `wildignore` based on `vim-fugitive` support: http://www.vim.org/scripts/script.php?script_id=2557\n. +1. Although the fork in #591 carries CtrlP forward, I have never been bothered that development on this repo stopped. Sometimes it's stagnation. In my opinion, CtrlP was largely done. It _just works_ for me. Well done @kien.\n. ",
    "dhinus": "It took me a while to figure out the correct way of setting the `ctrlp_user_command` to read the `.gitignore` file. This one from @tpope (found in #273) does the job:\n\n```\nlet g:ctrlp_user_command = ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']\n```\n\nI'd be happy to prepare a pull request to include it in the doc file and the README, if @kien is interested.\n. It took me a while to figure out the correct way of setting the `ctrlp_user_command` to read the `.gitignore` file. This one from @tpope (found in #273) does the job:\n\n```\nlet g:ctrlp_user_command = ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']\n```\n\nI'd be happy to prepare a pull request to include it in the doc file and the README, if @kien is interested.\n. ",
    "ast-pellucid": "Thanks @dhinus :)\n. Thanks @dhinus :)\n. ",
    "hendricius": "@dhinus works great.\n. @dhinus works great.\n. ",
    "dvcrn": "Another big thanks to @dhinus. ctrlp is now opening in milliseconds while before it buffered through my entire project. Was looking for a solution that works on all projects independently\n. Another big thanks to @dhinus. ctrlp is now opening in milliseconds while before it buffered through my entire project. Was looking for a solution that works on all projects independently\n. ",
    "ashleyblackmore": "thanks @dhinus \n. thanks @dhinus \n. ",
    "pgilad": "Works great!\n. Running into this issue as well.\n`ag` works great when manually run in the directory.\n`ctrlp` along with `ag` as custom command lists `.gitignore` files as well.\n\nI simply could not solve this so reverted to OP's `git ls-files` solution\n. I didn't\n. Works great!\n. Running into this issue as well.\n`ag` works great when manually run in the directory.\n`ctrlp` along with `ag` as custom command lists `.gitignore` files as well.\n\nI simply could not solve this so reverted to OP's `git ls-files` solution\n. I didn't\n. ",
    "marcelolima": "Thanks a lot @dhinus! worked like a charm\n. Thanks a lot @dhinus! worked like a charm\n. ",
    "pklingem": "Works great for me as well.  Much better than duplicating all of those ignores in something like:\n\n```\nlet g:ctrlp_custom_ignore = {\n  \\ 'dir':  '\\v[\\/](doc|tmp|node_modules)',\n  \\ 'file': '\\v\\.(exe|so|dll)$',\n  \\ }\n```\n\nfound here: http://stackoverflow.com/questions/24479101/vim-ctrlp-not-parsing-ag-silver-search-ignore-option-correctly\n. Works great for me as well.  Much better than duplicating all of those ignores in something like:\n\n```\nlet g:ctrlp_custom_ignore = {\n  \\ 'dir':  '\\v[\\/](doc|tmp|node_modules)',\n  \\ 'file': '\\v\\.(exe|so|dll)$',\n  \\ }\n```\n\nfound here: http://stackoverflow.com/questions/24479101/vim-ctrlp-not-parsing-ag-silver-search-ignore-option-correctly\n. ",
    "faceleg": "@kien can we have @dhinus' comment included in the readme? This made CTRLP infinitely more usable for me\n. @euoia thanks for replying so quickly. My issue _might_ be related to `minibuffexpl`, but I can't experiment just now. I've been able to get the behaviour I want by using:\n\n```\n<c-p> \" find file to open\n<c-o> \" choose \"r\" to replace current pane\n\" profit\n```\n\nInteresting to learn that what I tried works for you, I will remove other plugins and retest @ lunch, and update this issue with the results.\n. @kien can we have @dhinus' comment included in the readme? This made CTRLP infinitely more usable for me\n. @euoia thanks for replying so quickly. My issue _might_ be related to `minibuffexpl`, but I can't experiment just now. I've been able to get the behaviour I want by using:\n\n```\n<c-p> \" find file to open\n<c-o> \" choose \"r\" to replace current pane\n\" profit\n```\n\nInteresting to learn that what I tried works for you, I will remove other plugins and retest @ lunch, and update this issue with the results.\n. ",
    "rafaelrinaldi": "@dhinus This is exactly what I was looking for. Thanks for sharing.\n. @OskarSigvardsson That's great, thanks for sharing. Also, you can replace `&&` by simply `;` so it works seamlessly in fish too \ud83d\udc4d . @dhinus This is exactly what I was looking for. Thanks for sharing.\n. @OskarSigvardsson That's great, thanks for sharing. Also, you can replace `&&` by simply `;` so it works seamlessly in fish too \ud83d\udc4d . ",
    "fibo": "@dhinus nice snippet, I just tryed it in neovim and works like a charm.\n. @dhinus nice snippet, I just tryed it in neovim and works like a charm.\n. ",
    "oblitum": "@dhinus hi, this is great, but if I start vim inside a subdirectory of the repository the command shows nothing and err because `.git/` is missing.\n. From http://kien.github.io/ctrlp.vim/, this is better and fix the previous:\n\n``` vim\nlet g:ctrlp_user_command = ['.git', 'cd %s && git ls-files . -co --exclude-standard', 'find %s -type f']\n```\n. @piotryordanov I've closed the issue b/c this repository URL is deprecated, I should have opened at https://github.com/ctrlpvim/ctrlp.vim. Shortly after I've moved away from ctrlp, I've solved by using FZF which I'm finding much better.. @dhinus hi, this is great, but if I start vim inside a subdirectory of the repository the command shows nothing and err because `.git/` is missing.\n. From http://kien.github.io/ctrlp.vim/, this is better and fix the previous:\n\n``` vim\nlet g:ctrlp_user_command = ['.git', 'cd %s && git ls-files . -co --exclude-standard', 'find %s -type f']\n```\n. @piotryordanov I've closed the issue b/c this repository URL is deprecated, I should have opened at https://github.com/ctrlpvim/ctrlp.vim. Shortly after I've moved away from ctrlp, I've solved by using FZF which I'm finding much better.. ",
    "tim-phillips": "I wanted to use the above `git ls-files` command along with a second command to ignore more file names. Turns out we can't use `g:ctrlp_custom_ignore` with `g:ctrlp_user_command`, and using multiple `types` within `g:ctrlp_user_command` is OR rather than AND. So I'm using the following in my `.vimrc`:\n\n```\nif executable('ag')\n  \" Use The Silver Searcher https://github.com/ggreer/the_silver_searcher\n  set grepprg=ag\\ --nogroup\\ --nocolor\n  \" Use ag in CtrlP for listing files. Lightning fast, respects .gitignore\n  \" and .agignore. Ignores hidden files by default.\n  let g:ctrlp_user_command = 'ag %s -l --nocolor -f -g \"\"'\nelse\n  \"ctrl+p ignore files in .gitignore\n  let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files . -co --exclude-standard', 'find %s -type f']\nendif\n```\n\nhttps://stackoverflow.com/questions/24479101/vim-ctrlp-not-parsing-ag-silver-search-ignore-option-correctly\n. I wanted to use the above `git ls-files` command along with a second command to ignore more file names. Turns out we can't use `g:ctrlp_custom_ignore` with `g:ctrlp_user_command`, and using multiple `types` within `g:ctrlp_user_command` is OR rather than AND. So I'm using the following in my `.vimrc`:\n\n```\nif executable('ag')\n  \" Use The Silver Searcher https://github.com/ggreer/the_silver_searcher\n  set grepprg=ag\\ --nogroup\\ --nocolor\n  \" Use ag in CtrlP for listing files. Lightning fast, respects .gitignore\n  \" and .agignore. Ignores hidden files by default.\n  let g:ctrlp_user_command = 'ag %s -l --nocolor -f -g \"\"'\nelse\n  \"ctrl+p ignore files in .gitignore\n  let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files . -co --exclude-standard', 'find %s -type f']\nendif\n```\n\nhttps://stackoverflow.com/questions/24479101/vim-ctrlp-not-parsing-ag-silver-search-ignore-option-correctly\n. ",
    "mightyiam": "It seems that the recommended `ctrlp_user_command` (in the readme) just works, right?\r\n\r\nPerhaps make it a little more robust by falling back to default somehow, in case there is no `git` command, and making it a default?\r\n\r\nSeems sane to me.. It seems that the recommended `ctrlp_user_command` (in the readme) just works, right?\r\n\r\nPerhaps make it a little more robust by falling back to default somehow, in case there is no `git` command, and making it a default?\r\n\r\nSeems sane to me.. ",
    "OskarSigvardsson": "Just adding my two cents here, I wanted CtrlP to ignore all binary files as well as the stuff in my gitignore, which the `git ls-files` version doesn't do. I happen to have [ripgrep](https://github.com/BurntSushi/ripgrep) installed, so this version works great for me: \r\n\r\n    let g:ctrlp_user_command = ['.git', 'cd %s && rg --files-with-matches \".*\"', 'find %s -type f']\r\n\r\nThe idea is that ripgrep respects .gitignore and doesn't search binary files. If you add the --files-with-matches flag, it just lists the files with matches, so if you search for `.*` (i.e. regex-speak for \"anything\"), it will just list all text files in your repo. Very handy, and extremely fast. I suspect you could coerce `git grep` into doing something similar. . Just adding my two cents here, I wanted CtrlP to ignore all binary files as well as the stuff in my gitignore, which the `git ls-files` version doesn't do. I happen to have [ripgrep](https://github.com/BurntSushi/ripgrep) installed, so this version works great for me: \r\n\r\n    let g:ctrlp_user_command = ['.git', 'cd %s && rg --files-with-matches \".*\"', 'find %s -type f']\r\n\r\nThe idea is that ripgrep respects .gitignore and doesn't search binary files. If you add the --files-with-matches flag, it just lists the files with matches, so if you search for `.*` (i.e. regex-speak for \"anything\"), it will just list all text files in your repo. Very handy, and extremely fast. I suspect you could coerce `git grep` into doing something similar. . ",
    "kberridge": "I tried &lt;c-r&gt;, which switched to regex mode, but it did not bring up the file.\n\nThe only way I can get ctrl-p to list this file is by typing the full path to the file with all intermediate directories.\n. yes there are a lot of *Report.cs files in the source tree (from migrations...), enough to keep \\Report.cs from showing up in regex mode.\n\nThere are also enough _Report_.cs files in the source tree to keep \\Report.cs from showing up in filename mode.\n\nThat's why I was suggesting enhancing it to rank them by what perctange of the characters of the file name it matched, or some similar algorithm.  That way if I type \"Report\" if would favor \"Report.cs\" over \"AddColumnBlahToReportTable.cs\" or \"CaseReport.cs\"\n\nThanks!\n. I tried &lt;c-r&gt;, which switched to regex mode, but it did not bring up the file.\n\nThe only way I can get ctrl-p to list this file is by typing the full path to the file with all intermediate directories.\n. yes there are a lot of *Report.cs files in the source tree (from migrations...), enough to keep \\Report.cs from showing up in regex mode.\n\nThere are also enough _Report_.cs files in the source tree to keep \\Report.cs from showing up in filename mode.\n\nThat's why I was suggesting enhancing it to rank them by what perctange of the characters of the file name it matched, or some similar algorithm.  That way if I type \"Report\" if would favor \"Report.cs\" over \"AddColumnBlahToReportTable.cs\" or \"CaseReport.cs\"\n\nThanks!\n. ",
    "ramn": "Thanks, good info. Didn't find those short cuts in the documentation, would be really good to have there!\n. Thanks, good info. Didn't find those short cuts in the documentation, would be really good to have there!\n. ",
    "tanwangzugata": "if you have the absolute path or relative to Vim's `pwd` path of a file, you can also do:\r\n\r\n`:drop (paste)`\r\n`:find (paste)`\r\n`:tabfind (paste)`\r\n`:sfind (paste)`\r\n`:vert sfind (paste)`. see: https://github.com/kien/ctrlp.vim/issues/176\r\nsee: https://vi.stackexchange.com/questions/6502/paste-from-clipboard-into-ctrlp-input-in-gvim. if you have the absolute path or relative to Vim's `pwd` path of a file, you can also do:\r\n\r\n`:drop (paste)`\r\n`:find (paste)`\r\n`:tabfind (paste)`\r\n`:sfind (paste)`\r\n`:vert sfind (paste)`. see: https://github.com/kien/ctrlp.vim/issues/176\r\nsee: https://vi.stackexchange.com/questions/6502/paste-from-clipboard-into-ctrlp-input-in-gvim. ",
    "mwilden": "That's interesting. I would have thought the 'obvious' solution would be to show matches sorted by MRU. Is that possible? because that would suit me to a T.\n. My use case may be unusual. I often want to \"edit that .sass files I was just working on\".\n. I definitely like this version, and I'll play with it some more.\n\nHowever, I think I'd like it even better if there was a mode where if I type 'coffee' at the CtrlP prompt, the first choice will be the most recently used file that matches. Perhaps this is an opportunity for a contribution.\n\nCtrlP is the third MRU plugin I've used, and it's by far the best.\n. I think I understand. My use case is that I don't care at all about ordering by best-match in MRU mode. For me, the match is binary. I'm looking for the most recent match - period. If I have to type some more characters to get to my file, that's OK - because in most cases, I won't have to. Again, this only applies to MRU-mode. Anywhere else, I like my fuzziness quantified.\n\nIt seems that the sorting algorithm likes shorter names (better percent of hit letters, I imagine). I just started noticing this after working on ~/antcat/app/assets/javascripts/widgets/jquery.antcat.reference_picker.coffee. Even though I spend 99% of my time with this file these days, I still can't get it just by typing 'coffee' at the prompt. All the other CoffeeScript files I've worked on show up first - because they're shorter.\n. Thanks so much - this looks great. If it turns out that you were right\nall along, I'll let you know and you can remove the option.\n\nOn Tue, Apr 17, 2012 at 1:59 PM, kien\nreply@reply.github.com\nwrote:\n\n> > I'm looking for the most recent match - period. If I have to type some more characters to get to my file, that's OK - because in most cases, I won't have to.\n> \n> That settles it, I guess. I've added an option to disable sorting. But personally, I've always run into the problem in my previous comment (for a while, ctrlp used to not sorting files in MRU mode). It was why I changed this in the first place, since I use MRU a lot myself.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/kien/ctrlp.vim/issues/177#issuecomment-5185823\n. I've been working with the new option, and it's great. Now when I type `<C-Z>cf<CR>` I get the last coffeescript file I edited (99% of the time). This means I don't even have to look down at the CtrlP prompt. Those keystrokes are virtually equivalent to a new command that's now in my muscle memory. Thanks again.\n. That's interesting. I would have thought the 'obvious' solution would be to show matches sorted by MRU. Is that possible? because that would suit me to a T.\n. My use case may be unusual. I often want to \"edit that .sass files I was just working on\".\n. I definitely like this version, and I'll play with it some more.\n\nHowever, I think I'd like it even better if there was a mode where if I type 'coffee' at the CtrlP prompt, the first choice will be the most recently used file that matches. Perhaps this is an opportunity for a contribution.\n\nCtrlP is the third MRU plugin I've used, and it's by far the best.\n. I think I understand. My use case is that I don't care at all about ordering by best-match in MRU mode. For me, the match is binary. I'm looking for the most recent match - period. If I have to type some more characters to get to my file, that's OK - because in most cases, I won't have to. Again, this only applies to MRU-mode. Anywhere else, I like my fuzziness quantified.\n\nIt seems that the sorting algorithm likes shorter names (better percent of hit letters, I imagine). I just started noticing this after working on ~/antcat/app/assets/javascripts/widgets/jquery.antcat.reference_picker.coffee. Even though I spend 99% of my time with this file these days, I still can't get it just by typing 'coffee' at the prompt. All the other CoffeeScript files I've worked on show up first - because they're shorter.\n. Thanks so much - this looks great. If it turns out that you were right\nall along, I'll let you know and you can remove the option.\n\nOn Tue, Apr 17, 2012 at 1:59 PM, kien\nreply@reply.github.com\nwrote:\n\n> > I'm looking for the most recent match - period. If I have to type some more characters to get to my file, that's OK - because in most cases, I won't have to.\n> \n> That settles it, I guess. I've added an option to disable sorting. But personally, I've always run into the problem in my previous comment (for a while, ctrlp used to not sorting files in MRU mode). It was why I changed this in the first place, since I use MRU a lot myself.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/kien/ctrlp.vim/issues/177#issuecomment-5185823\n. I've been working with the new option, and it's great. Now when I type `<C-Z>cf<CR>` I get the last coffeescript file I edited (99% of the time). This means I don't even have to look down at the CtrlP prompt. Those keystrokes are virtually equivalent to a new command that's now in my muscle memory. Thanks again.\n. ",
    "naught101": "Hrm... How is this supposed to work? I have \n\n```\nlet g:ctrlp_mruf_default_order = 1\n```\n\nin my .vimrc, and still if I `<c-p>` and select `R/PLUMBER_plot.R`, then `<c-p>` and select `R/PLUMBER.R`, and then `<c-p>pl`, then the first thing that comes up is `R/all_plots.R` (`PLUMBER_plot.R` is third up the list). Am I missing something?\n. Ah, I think I was misunderstanding how CtrlP works - didn't realise there were separate buffer and file lists. Feature request for what I'm talking about here: https://github.com/kien/ctrlp.vim/issues/659\n. Hrm... How is this supposed to work? I have \n\n```\nlet g:ctrlp_mruf_default_order = 1\n```\n\nin my .vimrc, and still if I `<c-p>` and select `R/PLUMBER_plot.R`, then `<c-p>` and select `R/PLUMBER.R`, and then `<c-p>pl`, then the first thing that comes up is `R/all_plots.R` (`PLUMBER_plot.R` is third up the list). Am I missing something?\n. Ah, I think I was misunderstanding how CtrlP works - didn't realise there were separate buffer and file lists. Feature request for what I'm talking about here: https://github.com/kien/ctrlp.vim/issues/659\n. ",
    "skwp": "Thanks @kien, I figured that was the reason...I'll take a look at the match func thanks for the help.\n. Sorry I never looked at this..living with the slight annoyance of having to toggle.\n. Ran the let, it didn't fix the problem. Ran the echo and it echoed `{}` which I think is what you expected. Here's a bit of a play by play of the log. By the way, awesome logging feature. I'm gonna have to learn about this for my own plugins :)\n1. Open vim, and do a regular `:CtrlP` call. No errors shown in vim, however the log shows\n\n```\nError detected while processing function <SNR>18_BMRemove:\nline    9:\nE329: No menu \"ControlP (3) ~/dev/crowdcast/x3\">d> _\n```\n\nThis error appears when I escape out of the ctrlp prompt without opening a file. If I open a file\n1. Open up a ruby spec file and run conqueterm on it (using skwp/vim-ruby-conque plugin). It turns out if I open a regular conqueterm, no problem. But when I run one of those conques, I get the problem in step 3:\n2. Run `:CtrlP app/models` to get a directory based ctrlp. See the 'Press Enter' message in vim, no errors in log. Hit escape out of that prompt, see message in log:\n\n```\nError detected while processing function ctrlp#init..<SNR>187_BuildPrompt..Powerline#Functions#fugitive#GetBranch..fugitive#statusline..<SNR>128_repo_head_ref:\nline    1:\nE484: Can't open file ./.git/HEAD\nE684: list index out of range: 0\nE15: Invalid expression: readfile(self.dir('HEAD'))[0]>>> _\n```\n\nAfter this, it's hard to describe what happens, but basically I can't really select any files from ctrlp as the prompt is messed up in this mode with the \"Press Enter\" message.\n\nThat was just a straight dump of what happened but now I will read your message and try to track it down :)\n. The strange part, after I close the conque term, everything is back to normal.\n. @kien thanks so much for taking the time to try to provide a fix. i'm having some trouble applying the patch. any chance you can just drop it in a branch and push it out? thanks!\n. Thanks kien, seems neither nor both fix my problem. I'll get into more detailed debugging by myself..thanks for your help\n. Thanks so much for helping with this @kien. Running the first command (with the conque window open after running a conque rspec):\n\n```\nError detected while processing function Powerline#Functions#fugitive#GetBranch..fugitive#statusline..<SNR>130_repo_head_ref:\nline    1:\nE484: Can't open file ./.git/HEAD\nE684: list index out of range: 0                                                     [Git] \u2b80 spec fast_spec/controllers/salesforce_shares_controller_spec.rb --color ->\nE15: Invalid expression: readfile(self.dir('HEAD'))[0]     \n```\n\nThe second command gives the same. I suspect you're trying to see if there's some autocommand getting in the way here? But I think it's actually something to do with the window system.\n\nBy the way, these errors appear only in the UI. In the ctrlp log I only see this error, which seems to happen any time I invoke ctrlp\n\n```\nError detected while processing function <SNR>18_BMRemove:\nline    9:\nE329: No menu \"ControlP (3)\n```\n. I removed the powerline plugin and things work just fine. So it must be some conflict in the powerline fugitive integration. Given the errors, my guess is that it's looking in the wrong path. Is there a chance that when we do \"CtrlP some/path\" that the current directory path is overwritten so that the fugitive integration craps out?\n. Thanks @kien . I agree it's not a ctrlp issue. I'll try to debug within fugitive/powerline and see if I can submit a pull request for those guys.\n. Thanks @kien, I figured that was the reason...I'll take a look at the match func thanks for the help.\n. Sorry I never looked at this..living with the slight annoyance of having to toggle.\n. Ran the let, it didn't fix the problem. Ran the echo and it echoed `{}` which I think is what you expected. Here's a bit of a play by play of the log. By the way, awesome logging feature. I'm gonna have to learn about this for my own plugins :)\n1. Open vim, and do a regular `:CtrlP` call. No errors shown in vim, however the log shows\n\n```\nError detected while processing function <SNR>18_BMRemove:\nline    9:\nE329: No menu \"ControlP (3) ~/dev/crowdcast/x3\">d> _\n```\n\nThis error appears when I escape out of the ctrlp prompt without opening a file. If I open a file\n1. Open up a ruby spec file and run conqueterm on it (using skwp/vim-ruby-conque plugin). It turns out if I open a regular conqueterm, no problem. But when I run one of those conques, I get the problem in step 3:\n2. Run `:CtrlP app/models` to get a directory based ctrlp. See the 'Press Enter' message in vim, no errors in log. Hit escape out of that prompt, see message in log:\n\n```\nError detected while processing function ctrlp#init..<SNR>187_BuildPrompt..Powerline#Functions#fugitive#GetBranch..fugitive#statusline..<SNR>128_repo_head_ref:\nline    1:\nE484: Can't open file ./.git/HEAD\nE684: list index out of range: 0\nE15: Invalid expression: readfile(self.dir('HEAD'))[0]>>> _\n```\n\nAfter this, it's hard to describe what happens, but basically I can't really select any files from ctrlp as the prompt is messed up in this mode with the \"Press Enter\" message.\n\nThat was just a straight dump of what happened but now I will read your message and try to track it down :)\n. The strange part, after I close the conque term, everything is back to normal.\n. @kien thanks so much for taking the time to try to provide a fix. i'm having some trouble applying the patch. any chance you can just drop it in a branch and push it out? thanks!\n. Thanks kien, seems neither nor both fix my problem. I'll get into more detailed debugging by myself..thanks for your help\n. Thanks so much for helping with this @kien. Running the first command (with the conque window open after running a conque rspec):\n\n```\nError detected while processing function Powerline#Functions#fugitive#GetBranch..fugitive#statusline..<SNR>130_repo_head_ref:\nline    1:\nE484: Can't open file ./.git/HEAD\nE684: list index out of range: 0                                                     [Git] \u2b80 spec fast_spec/controllers/salesforce_shares_controller_spec.rb --color ->\nE15: Invalid expression: readfile(self.dir('HEAD'))[0]     \n```\n\nThe second command gives the same. I suspect you're trying to see if there's some autocommand getting in the way here? But I think it's actually something to do with the window system.\n\nBy the way, these errors appear only in the UI. In the ctrlp log I only see this error, which seems to happen any time I invoke ctrlp\n\n```\nError detected while processing function <SNR>18_BMRemove:\nline    9:\nE329: No menu \"ControlP (3)\n```\n. I removed the powerline plugin and things work just fine. So it must be some conflict in the powerline fugitive integration. Given the errors, my guess is that it's looking in the wrong path. Is there a chance that when we do \"CtrlP some/path\" that the current directory path is overwritten so that the fugitive integration craps out?\n. Thanks @kien . I agree it's not a ctrlp issue. I'll try to debug within fugitive/powerline and see if I can submit a pull request for those guys.\n. ",
    "twe4ked": "@skwp did you come up with anything?\n. I'm looking into using @burke's [matcher](https://github.com/burke/matcher).\n. @skwp did you come up with anything?\n. I'm looking into using @burke's [matcher](https://github.com/burke/matcher).\n. ",
    "mrooney": "Ah okay, thanks for the info. I guess the previous behavior is what I found intuitive and what I really wanted, alas. I keep my home directory under version-control via git, so it will always find that when I'm working on a project in any other VCS (and make search useless as a result). I don't want it to look for anything \"first\", as I use git, bzr, and hg equally, I just want it to consider the closest directory with any of those directories the root.\n\nI guess I'll just give .git the lowest priority so my home directory is not preferred. Thanks for the detailed response!\n. Ah okay, thanks for the info. I guess the previous behavior is what I found intuitive and what I really wanted, alas. I keep my home directory under version-control via git, so it will always find that when I'm working on a project in any other VCS (and make search useless as a result). I don't want it to look for anything \"first\", as I use git, bzr, and hg equally, I just want it to consider the closest directory with any of those directories the root.\n\nI guess I'll just give .git the lowest priority so my home directory is not preferred. Thanks for the detailed response!\n. ",
    "lmarlow": "I like the speed of ctrlp compared to FuzzyFinder, but I miss the refining patterns (`;`) from FuzzyFinder. We have lots of similarly named files across different directories in our project, so the initial file matching isn't enough to find what I'm looking for.\n. I like the speed of ctrlp compared to FuzzyFinder, but I miss the refining patterns (`;`) from FuzzyFinder. We have lots of similarly named files across different directories in our project, so the initial file matching isn't enough to find what I'm looking for.\n. ",
    "mateusz": "Thanks kien, good work on hacking this vim script together.\n\nm\n\nOn Tue, May 1, 2012 at 3:08 PM, kien <\nreply@reply.github.com\n\n> wrote:\n> \n> Please read `:help g:ctrlp_max_height`.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/kien/ctrlp.vim/issues/187#issuecomment-5432868\n\n## \n\nMateusz Uzdowski | Developer\nSilverStripe\nhttp://silverstripe.com/\n\nPhone: +64 4 978 7330 xtn 68\nSkype: MateuszUzdowski\n. Thanks kien, good work on hacking this vim script together.\n\nm\n\nOn Tue, May 1, 2012 at 3:08 PM, kien <\nreply@reply.github.com\n\n> wrote:\n> \n> Please read `:help g:ctrlp_max_height`.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/kien/ctrlp.vim/issues/187#issuecomment-5432868\n\n## \n\nMateusz Uzdowski | Developer\nSilverStripe\nhttp://silverstripe.com/\n\nPhone: +64 4 978 7330 xtn 68\nSkype: MateuszUzdowski\n. ",
    "y": "If I want to scroll through 100 results, setting g:ctrlp_max_height seems wrong, because it tries to create a window 100 lines high, but my vim size is only 50, so it not only eats up the whole window, but only provides 50 results. I'd like to have a smaller window size (the default 10 is fine), but be able to scroll through more results that can fit in that window, i.e. a g:ctrlp_max_results setting.\n. If I want to scroll through 100 results, setting g:ctrlp_max_height seems wrong, because it tries to create a window 100 lines high, but my vim size is only 50, so it not only eats up the whole window, but only provides 50 results. I'd like to have a smaller window size (the default 10 is fine), but be able to scroll through more results that can fit in that window, i.e. a g:ctrlp_max_results setting.\n. ",
    "solidcell": "The results should be scrollable past what's already shown.  It's possible to have a situation where it's not possible to navigate to a certain file.  If, for example, you want \"/app/models/user.rb\", but there are files such as \"/app/models/facebook_user.rb\", then the base \"user.rb\" file will come last due to alphabetical order, and if there are enough other variations, the \"user.rb\" file won't even be reachable.  Thanks for the great script though.\n. The results should be scrollable past what's already shown.  It's possible to have a situation where it's not possible to navigate to a certain file.  If, for example, you want \"/app/models/user.rb\", but there are files such as \"/app/models/facebook_user.rb\", then the base \"user.rb\" file will come last due to alphabetical order, and if there are enough other variations, the \"user.rb\" file won't even be reachable.  Thanks for the great script though.\n. ",
    "runcom": "Any update on this?\n. Any update on this?\n. ",
    "jasonseney": "I'd be interested in helping out with this as well. I don't know vim script - but perhaps there's a way to replicate the result set window that [Ack.vim](https://github.com/mileszs/ack.vim) uses? It is variable height, and can show any number of results.\n\nI work on a HUGE codebase, with many files of similar names. Having a better result set would be really helpful.\n. I'd be interested in helping out with this as well. I don't know vim script - but perhaps there's a way to replicate the result set window that [Ack.vim](https://github.com/mileszs/ack.vim) uses? It is variable height, and can show any number of results.\n\nI work on a HUGE codebase, with many files of similar names. Having a better result set would be really helpful.\n. ",
    "bronson": "If anyone else stumbles on this looking how to increase the number of completions ctrlp will show, run `:help ctrlp_match_window`.  For example:\n\n```\nlet g:ctrlp_match_window = 'min:4,max:72'\n```\n. Much better, now I get it.  Thanks!\n\nTwo further clarifications might help...\n- I wasn't sure what \"disable this feature\" meant...  what feature are we disabling exactly?  opening based on working path?  Might be nice to say:\n  \n  `0` or `''` (empty string) - always use vim's cwd (:help getcwd)\n- Also, I thought the phrase \"when starting up\" meant vim startup, something that happens once and never again.  \"When opening\", or \"Every time it opens\" might be clearer.\n. Hi, I had a similar problem.  If i'm in a project, do a quick :e of ~/.vimrc, and then hit ctrl-p, blammo.  Everything locks up for 30 seconds.\n\nRemoving 'a' from `g:ctrlp_working_path_mode` fixed it for me: https://github.com/bronson/dotfiles/commit/4126863544da4cf20c016f728ed3586dda617f44\n\nThis doesn't help when you start vim in your homedir, alas.  I just remember not to do that...\n. Love ctrlp_bdelete.  Really hoping @kien adds this.\n. If anyone else stumbles on this looking how to increase the number of completions ctrlp will show, run `:help ctrlp_match_window`.  For example:\n\n```\nlet g:ctrlp_match_window = 'min:4,max:72'\n```\n. Much better, now I get it.  Thanks!\n\nTwo further clarifications might help...\n- I wasn't sure what \"disable this feature\" meant...  what feature are we disabling exactly?  opening based on working path?  Might be nice to say:\n  \n  `0` or `''` (empty string) - always use vim's cwd (:help getcwd)\n- Also, I thought the phrase \"when starting up\" meant vim startup, something that happens once and never again.  \"When opening\", or \"Every time it opens\" might be clearer.\n. Hi, I had a similar problem.  If i'm in a project, do a quick :e of ~/.vimrc, and then hit ctrl-p, blammo.  Everything locks up for 30 seconds.\n\nRemoving 'a' from `g:ctrlp_working_path_mode` fixed it for me: https://github.com/bronson/dotfiles/commit/4126863544da4cf20c016f728ed3586dda617f44\n\nThis doesn't help when you start vim in your homedir, alas.  I just remember not to do that...\n. Love ctrlp_bdelete.  Really hoping @kien adds this.\n. ",
    "ianmalott": "This did the trick for me:\n\n``` vim\nlet g:ctrlp_match_window = 'results:100' \" overcome limit imposed by max height\n```\n\nIt lets you keep the match window sized with its default min (1) and max (10) heights, but populates the window with more results (up to 100 in this example). You might need to experiment with the results number to find one that provides a better balance between comprehensive results and speed.\n\nFrom `:help ctrlp_match_window`:\n\n```\nThe minimum and maximum heights:\n  min:{n} - show minimum {n} lines (default: 1).\n  max:{n} - show maximum {n} lines (default: 10).\n\nThe maximum number of results:\n  results:{n} - list maximum {n} results (default: sync with max height).\n```\n. @yk2kus Glad it worked for you!\n. This did the trick for me:\n\n``` vim\nlet g:ctrlp_match_window = 'results:100' \" overcome limit imposed by max height\n```\n\nIt lets you keep the match window sized with its default min (1) and max (10) heights, but populates the window with more results (up to 100 in this example). You might need to experiment with the results number to find one that provides a better balance between comprehensive results and speed.\n\nFrom `:help ctrlp_match_window`:\n\n```\nThe minimum and maximum heights:\n  min:{n} - show minimum {n} lines (default: 1).\n  max:{n} - show maximum {n} lines (default: 10).\n\nThe maximum number of results:\n  results:{n} - list maximum {n} results (default: sync with max height).\n```\n. @yk2kus Glad it worked for you!\n. ",
    "borchy": "@ianmalott you sir, are awesome!\n. @ianmalott you sir, are awesome!\n. ",
    "yk2kus": "@ianmalott Thanks a lot. After trying many things only your solution worked!!\n. @ianmalott Thanks a lot. After trying many things only your solution worked!!\n. ",
    "marksweiss": "Just to add to @ianmalott's comment about balancing speed and window size. Please switch to using The Silver Searcher (ag) as your search tool -- it is lightning fast! The results window changes as you type, with zero lag. (It's also a great replacement for `grep` for code search, because it filters out everything you don't care about out of the box and is faster.) To switch, install Silver Searcher according to its instructions, and add this to your `.vimrc`: `let g:ctrlp_user_command = 'ag %s -l --nocolor -g <MY DEFAULT PATH>'`. So worth the few minutes this will take to set up!! Large `CTRLP` window plus `ag` is a great combination.\n. Awesome! That is such a great one. When your fingers get automatic with it it literally changes your whole workflow. Enjoy and glad to help!. Just to add to @ianmalott's comment about balancing speed and window size. Please switch to using The Silver Searcher (ag) as your search tool -- it is lightning fast! The results window changes as you type, with zero lag. (It's also a great replacement for `grep` for code search, because it filters out everything you don't care about out of the box and is faster.) To switch, install Silver Searcher according to its instructions, and add this to your `.vimrc`: `let g:ctrlp_user_command = 'ag %s -l --nocolor -g <MY DEFAULT PATH>'`. So worth the few minutes this will take to set up!! Large `CTRLP` window plus `ag` is a great combination.\n. Awesome! That is such a great one. When your fingers get automatic with it it literally changes your whole workflow. Enjoy and glad to help!. ",
    "dxuehu": "@marksweiss thank you so much for that! I already used ag but not with ctrlp. shit so fast now @_@\r\ni went from a broken ctrl p to a working speedy one. hnnggg made my day. thanks so much~ it was driving me crazy figuring out why my ctrl p suddenly broke . @marksweiss thank you so much for that! I already used ag but not with ctrlp. shit so fast now @_@\r\ni went from a broken ctrl p to a working speedy one. hnnggg made my day. thanks so much~ it was driving me crazy figuring out why my ctrl p suddenly broke . ",
    "yifeikong": "I'm using `let g:ctrlp_match_window = 'min:4,max:10,results=100'`. I'm using `let g:ctrlp_match_window = 'min:4,max:10,results=100'`. ",
    "techwizrd": "That's not what I meant. I am already using wildignore and g;ctrl_custom_ignore in my .vimrc, but they are tons of different filetypes and I cannot sit down and add every single one. It doesn't help that *.avi and *.AVI are the same unless you write a longer regular expression. I want to whitelist only textfiles.\n\nCurrently I have to manually write rule to ignore every image filetype (png, jpg, etc.), every audio filetype (wav, mp3, etc.),  every video filetype (avi, mp4, etc.), every type of archive (7zip, tar.gz, tar, zip, cbz, etc.), and so on. Vim cannot edit them and they clutter up the CtrlP pane making it difficult to actually get to files I want.\n. Okay. I'll see if I can figure out how to implement it as a plugin.\nIt's pretty useless for ctrlp to show files that Vim cannot even edit\n(which is the reason I made this issue).\n\nOn Tue, May 1, 2012 at 3:06 AM, kien\nreply@reply.github.com\nwrote:\n\n> Oh I see. Well, unless Vim provides MIME types recognition by default which it doesn't, this will have to be done manually (either in a plugin or in a vimrc file). But I don't think I want to do this in ctrlp, sorry!\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/kien/ctrlp.vim/issues/189#issuecomment-5434641\n. Yeah. Make no mistake, ctrlp is awesome. It's amazing for going\nthrough my numerous open buffers or quickly opening between files in a\nproject (the issue is that is also shows resource files that aren't\nsource code). I'll see what I can do in terms of coding up a better\nwildignore solution in pure Vimscript (or Python if it's easier).\nThanks for the great plugin though!\n\nOn Tue, May 1, 2012 at 8:41 AM, kien\nreply@reply.github.com\nwrote:\n\n> > pretty useless for ctrlp to show files that Vim cannot even edit\n> \n> It's not just for ctrlp but that's exactly what `wildignore` is there for. Every file listing plugin and many of Vim's commands and functions rely on this option. What you want is more than any existing plugin or Vim can provides, so by all means, write a new plugin. I'm pretty sure there is no MIME type detection plugin out there, yet, so it might be something worth making.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/kien/ctrlp.vim/issues/189#issuecomment-5437838\n. That's not what I meant. I am already using wildignore and g;ctrl_custom_ignore in my .vimrc, but they are tons of different filetypes and I cannot sit down and add every single one. It doesn't help that *.avi and *.AVI are the same unless you write a longer regular expression. I want to whitelist only textfiles.\n\nCurrently I have to manually write rule to ignore every image filetype (png, jpg, etc.), every audio filetype (wav, mp3, etc.),  every video filetype (avi, mp4, etc.), every type of archive (7zip, tar.gz, tar, zip, cbz, etc.), and so on. Vim cannot edit them and they clutter up the CtrlP pane making it difficult to actually get to files I want.\n. Okay. I'll see if I can figure out how to implement it as a plugin.\nIt's pretty useless for ctrlp to show files that Vim cannot even edit\n(which is the reason I made this issue).\n\nOn Tue, May 1, 2012 at 3:06 AM, kien\nreply@reply.github.com\nwrote:\n\n> Oh I see. Well, unless Vim provides MIME types recognition by default which it doesn't, this will have to be done manually (either in a plugin or in a vimrc file). But I don't think I want to do this in ctrlp, sorry!\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/kien/ctrlp.vim/issues/189#issuecomment-5434641\n. Yeah. Make no mistake, ctrlp is awesome. It's amazing for going\nthrough my numerous open buffers or quickly opening between files in a\nproject (the issue is that is also shows resource files that aren't\nsource code). I'll see what I can do in terms of coding up a better\nwildignore solution in pure Vimscript (or Python if it's easier).\nThanks for the great plugin though!\n\nOn Tue, May 1, 2012 at 8:41 AM, kien\nreply@reply.github.com\nwrote:\n\n> > pretty useless for ctrlp to show files that Vim cannot even edit\n> \n> It's not just for ctrlp but that's exactly what `wildignore` is there for. Every file listing plugin and many of Vim's commands and functions rely on this option. What you want is more than any existing plugin or Vim can provides, so by all means, write a new plugin. I'm pretty sure there is no MIME type detection plugin out there, yet, so it might be something worth making.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/kien/ctrlp.vim/issues/189#issuecomment-5437838\n. ",
    "grota": "gotcha, thanks for your answer.\n. cool, thanks.\n. gotcha, thanks for your answer.\n. cool, thanks.\n. ",
    "sfranky": "you're right, I didn't move away, but why would I want to? I want to be in\na window, press ctrlp and switch to another buffer. Do you mean I should I\nhave vim with two windows?\n\nOn Fri, May 18, 2012 at 8:35 PM, kien <\nreply@reply.github.com\n\n> wrote:\n> \n> The file in the current window where you invoke ctrlp is excluded from the\n> result. This is intended. Unless there's a missing step here you didn't\n> mention:\n> \n> > the file opens in a new buffer, but when pressing ctrlp -> buffers\n> \n> Did you or didn't you move away from the ch3.tex window before opening\n> ctrlp?\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/kien/ctrlp.vim/issues/202#issuecomment-5792587\n. I was actually under the impression that ctrlp was displayin less buffers\nthan the ones I had opened, but now I see that, indeed, the only one not\nshowing up is the current one.\nSorry for wasting your time and thanks again for your plugin, it is\nexcellent.\n\nOn Fri, May 18, 2012 at 8:45 PM, kien <\nreply@reply.github.com\n\n> wrote:\n> \n> > I want to be in a window, press ctrlp and switch to another buffer.\n> \n> Then explain to me why would you want to do this?\n> 1. Open ch3.tex in the current window.\n> 2. Open ctrlp.\n> 3. Select ch3.tex from the result list.\n> \n> ch3.tex isn't another buffer. It's why it's excluded.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/kien/ctrlp.vim/issues/202#issuecomment-5792811\n. you're right, I didn't move away, but why would I want to? I want to be in\na window, press ctrlp and switch to another buffer. Do you mean I should I\nhave vim with two windows?\n\nOn Fri, May 18, 2012 at 8:35 PM, kien <\nreply@reply.github.com\n\n> wrote:\n> \n> The file in the current window where you invoke ctrlp is excluded from the\n> result. This is intended. Unless there's a missing step here you didn't\n> mention:\n> \n> > the file opens in a new buffer, but when pressing ctrlp -> buffers\n> \n> Did you or didn't you move away from the ch3.tex window before opening\n> ctrlp?\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/kien/ctrlp.vim/issues/202#issuecomment-5792587\n. I was actually under the impression that ctrlp was displayin less buffers\nthan the ones I had opened, but now I see that, indeed, the only one not\nshowing up is the current one.\nSorry for wasting your time and thanks again for your plugin, it is\nexcellent.\n\nOn Fri, May 18, 2012 at 8:45 PM, kien <\nreply@reply.github.com\n\n> wrote:\n> \n> > I want to be in a window, press ctrlp and switch to another buffer.\n> \n> Then explain to me why would you want to do this?\n> 1. Open ch3.tex in the current window.\n> 2. Open ctrlp.\n> 3. Select ch3.tex from the result list.\n> \n> ch3.tex isn't another buffer. It's why it's excluded.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/kien/ctrlp.vim/issues/202#issuecomment-5792811\n. ",
    "AlecBenzer": "That got rid of the error message, but I'm still seeing a lot of lag every time I try to launch ctrlp (in like a 2 file directory). I might ask my employer about it, since it's their box (and it works fine on my own machines), but just wondering if anyone else was experiencing this (I thought it was related to the error message but apparently not)\n. FWIW, setting the directory managing mode to 0 (ie, don't change the working directory) seemed to stop the lag.\n. That got rid of the error message, but I'm still seeing a lot of lag every time I try to launch ctrlp (in like a 2 file directory). I might ask my employer about it, since it's their box (and it works fine on my own machines), but just wondering if anyone else was experiencing this (I thought it was related to the error message but apparently not)\n. FWIW, setting the directory managing mode to 0 (ie, don't change the working directory) seemed to stop the lag.\n. ",
    "cmcginty": "What about opening multiple files in the standard mode that <CR> on a single file gives you?\n. What about opening multiple files in the standard mode that <CR> on a single file gives you?\n. ",
    "airways": "I just realized this was already addressed by #160. Disregard.\n\nThis is a really excellent script!\n. I just realized this was already addressed by #160. Disregard.\n\nThis is a really excellent script!\n. ",
    "pluskid": "@kien Thanks for your reference of exrc. That helps me to resolve my problem!\n. @kien hi, sorry for bothering. After checking and experimenting with clean environment, I found its actually that the two lines of autocmd that is causing my cursor position to jump to the beginning of the buffer sometimes. After commenting out the two lines, everything works fine (though the cursor still jumps to the beginning of line each time when buffer is switched, but I guess this is a problem of vim itself). It looks strange but at least now it works. Thank you very much for your help and for creating such a beautiful plugin.\n. @kien Thanks for your reference of exrc. That helps me to resolve my problem!\n. @kien hi, sorry for bothering. After checking and experimenting with clean environment, I found its actually that the two lines of autocmd that is causing my cursor position to jump to the beginning of the buffer sometimes. After commenting out the two lines, everything works fine (though the cursor still jumps to the beginning of line each time when buffer is switched, but I guess this is a problem of vim itself). It looks strange but at least now it works. Thank you very much for your help and for creating such a beautiful plugin.\n. ",
    "eipark": "Ah I fixed it. I had set term=builtin_ansi in my .vimrc that wasn't there a little while back. Thanks!\n. Ah I fixed it. I had set term=builtin_ansi in my .vimrc that wasn't there a little while back. Thanks!\n. ",
    "lkraav": "Hi @eipark. I'm using urxvt (TERM=rxvt-256color) and adding |rxvt to MapSpecs helped me get arrow keys working. I think it is perfectly safe to patch that into master.\n. @mMontu make sure you check out [ranger](http://github.com/hut/ranger)\n. Hi @eipark. I'm using urxvt (TERM=rxvt-256color) and adding |rxvt to MapSpecs helped me get arrow keys working. I think it is perfectly safe to patch that into master.\n. @mMontu make sure you check out [ranger](http://github.com/hut/ranger)\n. ",
    "awwaiid": "@lkraav I started to do this after a vim/terminal upgrade started showing this problem, but then upgraded to the latest ctrlp first and the problem was solved elsewhere.\n. @lkraav I started to do this after a vim/terminal upgrade started showing this problem, but then upgraded to the latest ctrlp first and the problem was solved elsewhere.\n. ",
    "embray": "FWIW I encountered the same issue using CtrlP in Windows--had to add \"cygwin\" in `MapSpecs`.\n. FWIW I encountered the same issue using CtrlP in Windows--had to add \"cygwin\" in `MapSpecs`.\n. ",
    "r03": "I had this problem when using putty and with TERM set to putty-256color. After changing it to xterm-256color it worked fine.\n. I had this problem when using putty and with TERM set to putty-256color. After changing it to xterm-256color it worked fine.\n. ",
    "thiderman": "Oh, I see then. I will resort to that instead. Thanks for the swift reply!\n. Oh, I see then. I will resort to that instead. Thanks for the swift reply!\n. ",
    "garth": "Nope, not a big Vim user, mainly because of navigation, which is why I am trying out your plugin. Perhaps it might be worth expanding on the current install instructions which are not so comprehensive:\n\n```\ninstall details\nExtract the archive to ~/.vim\n```\n. Nope, not a big Vim user, mainly because of navigation, which is why I am trying out your plugin. Perhaps it might be worth expanding on the current install instructions which are not so comprehensive:\n\n```\ninstall details\nExtract the archive to ~/.vim\n```\n. ",
    "ery": "I found 1.6.1(tag) don't have any errors.\nAfter 1.6.1 have errors.\n. Thanks kien I got it.\nAnd now, I am using vundle, \njust this `Bundle 'kien/ctrlp.vim'`\nIt is ok.\n. I found 1.6.1(tag) don't have any errors.\nAfter 1.6.1 have errors.\n. Thanks kien I got it.\nAnd now, I am using vundle, \njust this `Bundle 'kien/ctrlp.vim'`\nIt is ok.\n. ",
    "jhogendorn": "- yes, head on plugin is 96bd4b3\n- testing using a complete vim restart every time.\n. Hmmmm, good spot but it's not quite there yet. There are in fact, many folders in vendor/ to ignore, MyBundle is the only one to not ignore. Your solution would allow those other folders as well?\n\nAlso, the negative lookahead would have to use the entire atom, which doesnt make sense with your explanation, unless its not path matching how I think its path matching...\n. I did in fact try it it, thanks :) And it does not work.\n\nI think the test case is:\n- `vendor/foo` (ignore)\n- `vendor/bundle/bar` (ignore)\n- `vendor/bundle/MyBundle` (use)\n\nIt is my understanding that `vendor/bundles/\\(MyBundle\\)\\@!.\\+$` would allow `foo` and `MyBundle`, which is not the intended behaviour.\n. Ah, of course. My brain must be off, what an obvious solution. Thankyou muchly for the help!\n. - yes, head on plugin is 96bd4b3\n- testing using a complete vim restart every time.\n. Hmmmm, good spot but it's not quite there yet. There are in fact, many folders in vendor/ to ignore, MyBundle is the only one to not ignore. Your solution would allow those other folders as well?\n\nAlso, the negative lookahead would have to use the entire atom, which doesnt make sense with your explanation, unless its not path matching how I think its path matching...\n. I did in fact try it it, thanks :) And it does not work.\n\nI think the test case is:\n- `vendor/foo` (ignore)\n- `vendor/bundle/bar` (ignore)\n- `vendor/bundle/MyBundle` (use)\n\nIt is my understanding that `vendor/bundles/\\(MyBundle\\)\\@!.\\+$` would allow `foo` and `MyBundle`, which is not the intended behaviour.\n. Ah, of course. My brain must be off, what an obvious solution. Thankyou muchly for the help!\n. ",
    "balta2ar": "I see you are using negative lookahead expressions in this issue. I unsuccessfully tried them to implement negated meaning of g:ctrlp_custom_ignore. What I want is to set a pattern to _include_ certain files, not ignore them. Specificially, I want Ctrl-P to only show me *.cpp, *.h, *.hh and *.cxx files.\nHow would a regular expression look like in this case?\n. @kien When I refresh the cache it says `== NO ENTRIES ==`.\n. @kien Same result :( I did `git pull` to make sure I'm using the latest version and I copy-pasted your expression to make sure I don't make a typo but I still get `== NO ENTRIES ==`.\n. @kien Awesome! Works exactly as I wanted! Thank you very very much! :)\nRegarding comments, that's weird. I receive notifications.\n. I see you are using negative lookahead expressions in this issue. I unsuccessfully tried them to implement negated meaning of g:ctrlp_custom_ignore. What I want is to set a pattern to _include_ certain files, not ignore them. Specificially, I want Ctrl-P to only show me *.cpp, *.h, *.hh and *.cxx files.\nHow would a regular expression look like in this case?\n. @kien When I refresh the cache it says `== NO ENTRIES ==`.\n. @kien Same result :( I did `git pull` to make sure I'm using the latest version and I copy-pasted your expression to make sure I don't make a typo but I still get `== NO ENTRIES ==`.\n. @kien Awesome! Works exactly as I wanted! Thank you very very much! :)\nRegarding comments, that's weird. I receive notifications.\n. ",
    "greg0ire": "Awesome, thanks!\n. Works like a charm! Thanks a lot!\n. Awesome, thanks!\n. Works like a charm! Thanks a lot!\n. ",
    "gregsabo": "Apologies for not responding quickly. The whitespace matching was indeed the issue. I've been using ctrlp a lot and it's been an awesome tool.\n. Apologies for not responding quickly. The whitespace matching was indeed the issue. I've been using ctrlp a lot and it's been an awesome tool.\n. ",
    "georgexsh": "thanks, kien.\nI knew g:ctrlp_follow_symlinks, cause this problem won't occurs if not follow symlinks.\nMy codebase has lots of symlink and I want  to open the file appears in log/traceback directly, rather than manually resolve the link, so I'd like to include all symlinks.  \n. > I can always let the follow_symlinks option take another value, say 2, to follow all symlinks indiscriminately. \n\nthat's just great!\n\n> I just want to understand the reasons.\n\nsay I have two python scripts:\n\n```\nsymlink_of_foo.py\nfoo.py\n```\n\nIf I run `symlink_of_foo.py` and error occurs, tracebacks would be something like\n\n```\nFile \"/home/georgexsh/dev/symlink_of_foo.py\", line 704, in render_bar\n    raise NameError(...)\n```\n\nthen I want to edit the source, as I saw `symlink_of_foo`, I just try to type `symlink_of_foo.py` in ctrlp\nIf not all of these names included, I would be confused that `symlink_of_foo.py` not shown.\n. big thanks!\n. thanks, kien.\nI knew g:ctrlp_follow_symlinks, cause this problem won't occurs if not follow symlinks.\nMy codebase has lots of symlink and I want  to open the file appears in log/traceback directly, rather than manually resolve the link, so I'd like to include all symlinks.  \n. > I can always let the follow_symlinks option take another value, say 2, to follow all symlinks indiscriminately. \n\nthat's just great!\n\n> I just want to understand the reasons.\n\nsay I have two python scripts:\n\n```\nsymlink_of_foo.py\nfoo.py\n```\n\nIf I run `symlink_of_foo.py` and error occurs, tracebacks would be something like\n\n```\nFile \"/home/georgexsh/dev/symlink_of_foo.py\", line 704, in render_bar\n    raise NameError(...)\n```\n\nthen I want to edit the source, as I saw `symlink_of_foo`, I just try to type `symlink_of_foo.py` in ctrlp\nIf not all of these names included, I would be confused that `symlink_of_foo.py` not shown.\n. big thanks!\n. ",
    "kronn": "Okay, so essentially, I can try to just reduce the number of directories searched.\n\nThe problem is only the first scan. I do, however, close and start Vim fairly often, even in the same project, so I need to reindex often.\n\nI will, however, play with the `g:ctrlp_user_command` and see if I can reduce that waiting.\n\nI haven't said it before, so: thanks for the plugin. It's super handy and has conceptionally no assumptions about the type of project. Thanks.\n. Okay, so essentially, I can try to just reduce the number of directories searched.\n\nThe problem is only the first scan. I do, however, close and start Vim fairly often, even in the same project, so I need to reindex often.\n\nI will, however, play with the `g:ctrlp_user_command` and see if I can reduce that waiting.\n\nI haven't said it before, so: thanks for the plugin. It's super handy and has conceptionally no assumptions about the type of project. Thanks.\n. ",
    "kikyous": "ok ,i know\n. ok ,i know\n. ",
    "fisadev": "The ctrlp_default_input is good enough, it's pretty simple to use :)\nThank you!\n\nBTW: ctrlp is one of the **best** vim extensions that I've seen. Is one of the star features of my https://github.com/fisadev/fisa-vim-config\n. The ctrlp_default_input is good enough, it's pretty simple to use :)\nThank you!\n\nBTW: ctrlp is one of the **best** vim extensions that I've seen. Is one of the star features of my https://github.com/fisadev/fisa-vim-config\n. ",
    "myusuf3": "you are totally right. I didn't know that; just getting into vimscript. Thanks for the good attitude. \n. you are totally right. I didn't know that; just getting into vimscript. Thanks for the good attitude. \n. ",
    "mrinterweb": "Yes. Even after I cleared the cache with <F5> (I also disabled the cache with `let g:ctrlp_use_caching = 0`). I get the result: app/assets/images/grid.png if I look for grid. I have many more examples where it will show results for file types that should be ignored.\n. The simplified .vimrc works as advertised. Also I was not able to autocomplete any image files when trying to open them with :e. I suppose something else in my configuration must be conflicting with ctrl-p. I will attempt some more exploration.\n. Yes. Even after I cleared the cache with <F5> (I also disabled the cache with `let g:ctrlp_use_caching = 0`). I get the result: app/assets/images/grid.png if I look for grid. I have many more examples where it will show results for file types that should be ignored.\n. The simplified .vimrc works as advertised. Also I was not able to autocomplete any image files when trying to open them with :e. I suppose something else in my configuration must be conflicting with ctrl-p. I will attempt some more exploration.\n. ",
    "allantokuda": "I was having a similar problem today. I found it was because, long ago, I had naively configured Ctrl-P with this option:\n\n```\nlet g:ctrlp_user_command = 'find %s -type f'\n```\n\nAnd this overrode its ability to follow the `wildignore` option. \n. I was having a similar problem today. I found it was because, long ago, I had naively configured Ctrl-P with this option:\n\n```\nlet g:ctrlp_user_command = 'find %s -type f'\n```\n\nAnd this overrode its ability to follow the `wildignore` option. \n. ",
    "alecdwm": "For future reference, if someone wanted to keep their `ctrlp_user_command` but still take advantage of vim's `wildignore` option, they could modify @allantokuda's example to look like the following:\r\n\r\n\tlet g:ctrlp_user_command = {\r\n\t\\\t'types': {\r\n\t\\\t\t1: ['find %s -type f'],\r\n\t\\\t},\r\n\t\\\t'ignore': 1,\r\n\t\\}\r\n\r\nHowever, it is noted in the docs that this can significantly reduce the performance benefits of using an external program (e.g. `ag`) in the first place.. For future reference, if someone wanted to keep their `ctrlp_user_command` but still take advantage of vim's `wildignore` option, they could modify @allantokuda's example to look like the following:\r\n\r\n\tlet g:ctrlp_user_command = {\r\n\t\\\t'types': {\r\n\t\\\t\t1: ['find %s -type f'],\r\n\t\\\t},\r\n\t\\\t'ignore': 1,\r\n\t\\}\r\n\r\nHowever, it is noted in the docs that this can significantly reduce the performance benefits of using an external program (e.g. `ag`) in the first place.. ",
    "mahemoff": "Thanks for the quick response @kien. Shame vim works this way,  but thanks for providing the workaround. I'm thinking an even simpler one might be make an AppleScript to detect idle and run it that way! Anyway, cheers for an excellent plugin!\n. Thanks for the quick response @kien. Shame vim works this way,  but thanks for providing the workaround. I'm thinking an even simpler one might be make an AppleScript to detect idle and run it that way! Anyway, cheers for an excellent plugin!\n. ",
    "mjackson": "My rebuild is actually really fast. I'm wondering if it's not a terrible idea to have a way to tell CtrlP to ignore the cache altogether?\n. My rebuild is actually really fast. I'm wondering if it's not a terrible idea to have a way to tell CtrlP to ignore the cache altogether?\n. ",
    "jeroendv": "Ok, noproblem.\n\nI was just wondering it it were possible or easily achievable.\n\nI do really like your solution to prefix my <c-p> shortcut with a number\nthough. Thanks!\nI prefer it over making several <c-?> shortcuts to not interfere with other\nshortcuts of other plugins.\n\nJeroen\n\nPs:\nIf you first open CtrlP in files mode and before you type any querry on the\ninput,  how the files that are then listed selected?\nin my case there are some files of the current directory some of a\ndirectory one deep. Some I use often, other I haven't even opened before\nusing CtrlP.\n\nI tough that maybe it would be the files that I open most often avoiding\nthe need to type a querry, because i can directly select those file.\nOr ...\nthat maybe those are the files that I used most recently, so that I can\neasily revisit those files again. for example If I openen a file in\nvertical split but then close the window because I meant to open in a new\ntab. In that case I would be able to invoke <c-p> and immediately follow it\nup by <c-t> for example.\n\nBut neither of those seems to be the case. So ... how do you select the\nfiles that are listed initially in absence of any querry input.\n\nOn Thu, Jul 5, 2012 at 6:44 AM, kien <\nreply@reply.github.com\n\n> wrote:\n> \n> OK, closing. This won't be added. There's nothing in the current code that\n> can support or extend into it. I probably won't accept a patch for\n> something like `f anystring` or `#f anystring` either. It's a big code\n> change for a rather small convenience.\n> \n> But in any case, there'll need to be new unique and memorable identifiers\n> for all the extensions, user made ones as well, i.e. the `t`, `f`, `bt`...\n> that you suggest. This isn't much difference from predefining a bunch of\n> mappings, in the sense that you have to memorize something. And if you have\n> to memorize something anyway, then just memorize your mappings instead of\n> the identifiers. And I hope that doesn't affect your workflow negatively.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/kien/ctrlp.vim/issues/224#issuecomment-6771426\n. This might be going a bit off-topic ...\n\nIs there some reason that you specifically list those?\nOr is that a result from how the plugin was written/designed?\n\nThe first files found seems to me to be a very arbitrary selection of files. You might as well list nothing and wait for the user to start entering a querry, no? \n\nIf so one could instead list something a bit more usefull like the 10 most recently used files or  the 10 most used files or something similar, while waiting for the user to enter a search querry.\n\nwith kind regards.\n\nJeroen\n\nps: At some point i have known the <C-W>T command, but it somehow got away from me over time. Thx for reminding me!! :-)\n. Admittedly performance and reaction speed is a major make or brake issue for a tool such as CtrlP, so if you prefer not to do it, then that is very valid reason :-)\n\nI guess you could say that CtrlP is used to quickly search for some file or tag, so one inherently knows what one is looking for and as long as it is not listed in the results list then it must mean that the search query is nor accurate enough. \n\nSo if I plan to scroll through the result list searching for what I need, then I might as well use a tool which is designed to do thus that, NerdTree for example like I used to do before :-)\n\nAnyway love the tool, been using it constantly lately and it seriously boosted my efficiency!!\n. $ mkdir CTrlPtest\n$ cd CTrlPtest/\n$ echo \"function foo()\" > file1.m\n$ echo \"function foo()\" > file2.m\n\n$ ctags --languages=Matlab -R ./\n\n$ ll\ntotal 12\n-rw-rw-r--. 1 jeroendv jeroendv  15 Jul 12 13:38 file1.m\n-rw-rw-r--. 1 jeroendv jeroendv  15 Jul 12 13:38 file2.m\n-rw-rw-r--. 1 jeroendv jeroendv 406 Jul 12 13:39 tags\n\n$ cat tags \n!_TAG_FILE_FORMAT2/extended format; --format=1 will not append ;\" to lines/\n!_TAG_FILE_SORTED1/0=unsorted, 1=sorted, 2=formatldcase/\n!_TAG_PROGRAM_AUTHORDarren Hiebert/dhiebert@users.sourceforge.net/\n!_TAG_PROGRAM_NAMEExuberant Ctags//\n!_TAG_PROGRAM_URLhttp://ctags.sourceforge.net/official site/\n!_TAG_PROGRAM_VERSION5.8//\nfoo./file1.m/^function foo()$/;\"f\nfoo./file2.m/^function foo()$/;\"f\n\n$ vim \n\nIf I then invoke CtrlP, switch to Tag mode and search for foo, I'll get two results.\nI can select either using &lt;c-n> and &lt;c-p> but when I press enter vim will invariable show me a tag-matchlist and ask me to choose on of them.\n. hmm, coudl there have been something wrong with the pathc?\nsee line 5: @@ -23,8 +23,9 @@ let s:id = g:ctrlp_builtins + len(g:ctrlp_ext_vars)\nAnyhow I ended up patching it manually\n\nAnyway, although I now no longer get a tag-matchlist it now does something very weird.\nafter invoking CtrlP, switch to Tag mode and search for foo, I'll get two results which looks like this:\n\n&gt; foo ./file2.m /^function fo()$/;\" f\n&gt; foo ./file1.m /^function fo()$/;\" f\n\n---\n\nprt path <mru&gt;={tags}=<bft&gt; <-v\n&gt;&gt;&gt; foo\n\nI select either one and all works as expected. The tag is openen in the file that I selected \n\nBut If reopen CrlP in tag mode again and try to select the other file weird thing start happening.\ntrying to open the tag in file1.m does nothing while opening the tag in file2.m switches the showed file.\nSo if i repeatedly open CtrlP in tag mode and select the tag foo in file2.m that it vim will repeatedly switch between file1.m and file2.m.\n\nSelecting the tag in file1.m does nothing though. \n\nvery weird :-s\n\nJeroen\n. yup that seems to do it! :-)\n\nthanks!!\n\nJeroen\n\nPs: it think the patching problems have to do with indenting, tab vs. spaces and how vim tends to retab files and how a tab is probably turning into a space when I copy the patch from this page into a textfile before applying it.\n\nsupplying the -l option to patch\n\n>  -l Match patterns loosely, in case tabs or spaces have been munged in your files\n\n did apply the patch succesfully but ended up screwing with the indentation of the patched lines.\nI'm a bit baffeled, but then again I'm not a regular patch user :-s\n. Ok, noproblem.\n\nI was just wondering it it were possible or easily achievable.\n\nI do really like your solution to prefix my <c-p> shortcut with a number\nthough. Thanks!\nI prefer it over making several <c-?> shortcuts to not interfere with other\nshortcuts of other plugins.\n\nJeroen\n\nPs:\nIf you first open CtrlP in files mode and before you type any querry on the\ninput,  how the files that are then listed selected?\nin my case there are some files of the current directory some of a\ndirectory one deep. Some I use often, other I haven't even opened before\nusing CtrlP.\n\nI tough that maybe it would be the files that I open most often avoiding\nthe need to type a querry, because i can directly select those file.\nOr ...\nthat maybe those are the files that I used most recently, so that I can\neasily revisit those files again. for example If I openen a file in\nvertical split but then close the window because I meant to open in a new\ntab. In that case I would be able to invoke <c-p> and immediately follow it\nup by <c-t> for example.\n\nBut neither of those seems to be the case. So ... how do you select the\nfiles that are listed initially in absence of any querry input.\n\nOn Thu, Jul 5, 2012 at 6:44 AM, kien <\nreply@reply.github.com\n\n> wrote:\n> \n> OK, closing. This won't be added. There's nothing in the current code that\n> can support or extend into it. I probably won't accept a patch for\n> something like `f anystring` or `#f anystring` either. It's a big code\n> change for a rather small convenience.\n> \n> But in any case, there'll need to be new unique and memorable identifiers\n> for all the extensions, user made ones as well, i.e. the `t`, `f`, `bt`...\n> that you suggest. This isn't much difference from predefining a bunch of\n> mappings, in the sense that you have to memorize something. And if you have\n> to memorize something anyway, then just memorize your mappings instead of\n> the identifiers. And I hope that doesn't affect your workflow negatively.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/kien/ctrlp.vim/issues/224#issuecomment-6771426\n. This might be going a bit off-topic ...\n\nIs there some reason that you specifically list those?\nOr is that a result from how the plugin was written/designed?\n\nThe first files found seems to me to be a very arbitrary selection of files. You might as well list nothing and wait for the user to start entering a querry, no? \n\nIf so one could instead list something a bit more usefull like the 10 most recently used files or  the 10 most used files or something similar, while waiting for the user to enter a search querry.\n\nwith kind regards.\n\nJeroen\n\nps: At some point i have known the <C-W>T command, but it somehow got away from me over time. Thx for reminding me!! :-)\n. Admittedly performance and reaction speed is a major make or brake issue for a tool such as CtrlP, so if you prefer not to do it, then that is very valid reason :-)\n\nI guess you could say that CtrlP is used to quickly search for some file or tag, so one inherently knows what one is looking for and as long as it is not listed in the results list then it must mean that the search query is nor accurate enough. \n\nSo if I plan to scroll through the result list searching for what I need, then I might as well use a tool which is designed to do thus that, NerdTree for example like I used to do before :-)\n\nAnyway love the tool, been using it constantly lately and it seriously boosted my efficiency!!\n. $ mkdir CTrlPtest\n$ cd CTrlPtest/\n$ echo \"function foo()\" > file1.m\n$ echo \"function foo()\" > file2.m\n\n$ ctags --languages=Matlab -R ./\n\n$ ll\ntotal 12\n-rw-rw-r--. 1 jeroendv jeroendv  15 Jul 12 13:38 file1.m\n-rw-rw-r--. 1 jeroendv jeroendv  15 Jul 12 13:38 file2.m\n-rw-rw-r--. 1 jeroendv jeroendv 406 Jul 12 13:39 tags\n\n$ cat tags \n!_TAG_FILE_FORMAT2/extended format; --format=1 will not append ;\" to lines/\n!_TAG_FILE_SORTED1/0=unsorted, 1=sorted, 2=formatldcase/\n!_TAG_PROGRAM_AUTHORDarren Hiebert/dhiebert@users.sourceforge.net/\n!_TAG_PROGRAM_NAMEExuberant Ctags//\n!_TAG_PROGRAM_URLhttp://ctags.sourceforge.net/official site/\n!_TAG_PROGRAM_VERSION5.8//\nfoo./file1.m/^function foo()$/;\"f\nfoo./file2.m/^function foo()$/;\"f\n\n$ vim \n\nIf I then invoke CtrlP, switch to Tag mode and search for foo, I'll get two results.\nI can select either using &lt;c-n> and &lt;c-p> but when I press enter vim will invariable show me a tag-matchlist and ask me to choose on of them.\n. hmm, coudl there have been something wrong with the pathc?\nsee line 5: @@ -23,8 +23,9 @@ let s:id = g:ctrlp_builtins + len(g:ctrlp_ext_vars)\nAnyhow I ended up patching it manually\n\nAnyway, although I now no longer get a tag-matchlist it now does something very weird.\nafter invoking CtrlP, switch to Tag mode and search for foo, I'll get two results which looks like this:\n\n&gt; foo ./file2.m /^function fo()$/;\" f\n&gt; foo ./file1.m /^function fo()$/;\" f\n\n---\n\nprt path <mru&gt;={tags}=<bft&gt; <-v\n&gt;&gt;&gt; foo\n\nI select either one and all works as expected. The tag is openen in the file that I selected \n\nBut If reopen CrlP in tag mode again and try to select the other file weird thing start happening.\ntrying to open the tag in file1.m does nothing while opening the tag in file2.m switches the showed file.\nSo if i repeatedly open CtrlP in tag mode and select the tag foo in file2.m that it vim will repeatedly switch between file1.m and file2.m.\n\nSelecting the tag in file1.m does nothing though. \n\nvery weird :-s\n\nJeroen\n. yup that seems to do it! :-)\n\nthanks!!\n\nJeroen\n\nPs: it think the patching problems have to do with indenting, tab vs. spaces and how vim tends to retab files and how a tab is probably turning into a space when I copy the patch from this page into a textfile before applying it.\n\nsupplying the -l option to patch\n\n>  -l Match patterns loosely, in case tabs or spaces have been munged in your files\n\n did apply the patch succesfully but ended up screwing with the indentation of the patched lines.\nI'm a bit baffeled, but then again I'm not a regular patch user :-s\n. ",
    "mMontu": "OK, just a suggestion :)\nClearing the cache indeed solved the problem\n\nThanks!\n. Thanks! It indeed solved the problem!\n\nSorry for bothering you about something that was on an old issue - unfortunately the search tool doesn't showed any issue for keywords .., \"..\", upward, and nothing related for keyword \"directory\".\n. @lkraav, thanks for the tip!\n. It works very well - thank you very much!!\n. @kien, is there a way to add the selected file to the CtrlP MRU list if it is opened with the external tool?\n. @kien: it works like a charm! Thanks!\n. @kien: I've browsed the plugin code a little, and got curious about your fold method. On `autoload/ctrlp.vim`, for example, some top level folds are marked with `**`, other with `*` and some with `-`. I've noticed that there is something similar on the lower level folds. Do you mind sharing your method? Is it enforced by some plugin you use?\n. Thanks for your quick answer! \nIt looked like as a fancy way for navigating through folds, which sometimes I miss.\nBut I will use your method as a start, along with '`fdc=1'` to avoid getting lost on folds :-)\n. I don't like hidden buffers, as I prefer to always save the buffers. If there is an unsaved buffer, I'd rather prefer to be notified to check if I forgot saving some intended change or if I hit the keyboard by distraction and the change was an accident.\nIf there is some unsaved hidden buffers, a commit operation may end-up incomplete, or there may be a couple of hidden buffers that I'll only notice when trying to leave Vim, often when shutting-down my machine (sometimes in a hurry).\nI know It would be possible to use `:ls` to repeatedly  check if there are buffers on this condition, but it seems a waste of time.\n\nTo be honest I never really understood the benefits of hidden buffers. If you know a better approach to this please let me know.\n\nYou may just ignore this request if you feel that this change will not be helpful to others.\n. @kien: it works very well! Thank you very much for improving this amazing plugin!\n. I've reduced the .vimrc to an empty file and the problem still occurs. The empty .vimrc is needed at $HOME so Vim defaults to `'nocompatible'`.\n\nScreenshots: \nhttp://imgur.com/N44eE\nhttp://imgur.com/N5OFy\n\nThis was tested only on gVim on ms-windows, maybe it just happens on this OS.\n. It works like a charm.\nThanks you for correcting it so fast, and for sharing this amazing plugin!\n. I've been experiencing the same problem since I started using this plugin almost a year ago. The MRU and CtrlPBookmarkDir information disappears. It seems that all information on ~/.cache/ctrlp is deleted.\n\nBut the frequency it occurs is low, something like one to three times a month, so I couldn't find a way to reproduce it. I'm just keeping a backup of ~/.cache/ctrlp/bkd after having to recreate it many times.\nSometimes I had the impression that it happened after I have opened another instances of gVim, but I couldn't confirm that.\n\nI performed a search on the issues in the hope someone with the same problems could have any leads on how to reproduce it, so I could investigate further.\n\nFor reference, this problem is happening on gVim 7.3 with ms-windows XP without changing user.\n. I've used this option previously and didn't liked it very much, because it is necessary to request cache update by hand.I'd rather investigate the root cause.\n\nI second @rgrinberg guess that it happens by interference with some other plugin.\n\nFollows the intersection of my plugins and @brablc \n\nBundle 'kien/ctrlp.vim'\nBundle 'mileszs/ack.vim'\nBundle 'msanders/snipmate.vim'\nBundle 'scrooloose/nerdcommenter'\nBundle 'tpope/vim-surround'\n. Thanks @rgrinberg, next time ctrlp cache disappear I'll try to trace to some of these three plugins.\n. Thanks, @kien. I'll let you know if I have any news.\n. I'm not sure about the \"dead key\" you mentioned, as typing ``` + `a` or `~` + `a` produces only `a` (the same for the others vowels). \n\n`let g:ctrlp_key_loop = 1` seems to solve the issue -- actually it now allow me to type `\u00e3` and `\u00e0`, which was not possible on ms-windows gVim and linux Vim. I wasn't missing typing `\u00e3` on `CtrlP` window as it was usually part of large filenames, thus I was just skipping those characters while avoiding regex mode. But it is great to have it working.\n\nThank you very much!\n. OK, just a suggestion :)\nClearing the cache indeed solved the problem\n\nThanks!\n. Thanks! It indeed solved the problem!\n\nSorry for bothering you about something that was on an old issue - unfortunately the search tool doesn't showed any issue for keywords .., \"..\", upward, and nothing related for keyword \"directory\".\n. @lkraav, thanks for the tip!\n. It works very well - thank you very much!!\n. @kien, is there a way to add the selected file to the CtrlP MRU list if it is opened with the external tool?\n. @kien: it works like a charm! Thanks!\n. @kien: I've browsed the plugin code a little, and got curious about your fold method. On `autoload/ctrlp.vim`, for example, some top level folds are marked with `**`, other with `*` and some with `-`. I've noticed that there is something similar on the lower level folds. Do you mind sharing your method? Is it enforced by some plugin you use?\n. Thanks for your quick answer! \nIt looked like as a fancy way for navigating through folds, which sometimes I miss.\nBut I will use your method as a start, along with '`fdc=1'` to avoid getting lost on folds :-)\n. I don't like hidden buffers, as I prefer to always save the buffers. If there is an unsaved buffer, I'd rather prefer to be notified to check if I forgot saving some intended change or if I hit the keyboard by distraction and the change was an accident.\nIf there is some unsaved hidden buffers, a commit operation may end-up incomplete, or there may be a couple of hidden buffers that I'll only notice when trying to leave Vim, often when shutting-down my machine (sometimes in a hurry).\nI know It would be possible to use `:ls` to repeatedly  check if there are buffers on this condition, but it seems a waste of time.\n\nTo be honest I never really understood the benefits of hidden buffers. If you know a better approach to this please let me know.\n\nYou may just ignore this request if you feel that this change will not be helpful to others.\n. @kien: it works very well! Thank you very much for improving this amazing plugin!\n. I've reduced the .vimrc to an empty file and the problem still occurs. The empty .vimrc is needed at $HOME so Vim defaults to `'nocompatible'`.\n\nScreenshots: \nhttp://imgur.com/N44eE\nhttp://imgur.com/N5OFy\n\nThis was tested only on gVim on ms-windows, maybe it just happens on this OS.\n. It works like a charm.\nThanks you for correcting it so fast, and for sharing this amazing plugin!\n. I've been experiencing the same problem since I started using this plugin almost a year ago. The MRU and CtrlPBookmarkDir information disappears. It seems that all information on ~/.cache/ctrlp is deleted.\n\nBut the frequency it occurs is low, something like one to three times a month, so I couldn't find a way to reproduce it. I'm just keeping a backup of ~/.cache/ctrlp/bkd after having to recreate it many times.\nSometimes I had the impression that it happened after I have opened another instances of gVim, but I couldn't confirm that.\n\nI performed a search on the issues in the hope someone with the same problems could have any leads on how to reproduce it, so I could investigate further.\n\nFor reference, this problem is happening on gVim 7.3 with ms-windows XP without changing user.\n. I've used this option previously and didn't liked it very much, because it is necessary to request cache update by hand.I'd rather investigate the root cause.\n\nI second @rgrinberg guess that it happens by interference with some other plugin.\n\nFollows the intersection of my plugins and @brablc \n\nBundle 'kien/ctrlp.vim'\nBundle 'mileszs/ack.vim'\nBundle 'msanders/snipmate.vim'\nBundle 'scrooloose/nerdcommenter'\nBundle 'tpope/vim-surround'\n. Thanks @rgrinberg, next time ctrlp cache disappear I'll try to trace to some of these three plugins.\n. Thanks, @kien. I'll let you know if I have any news.\n. I'm not sure about the \"dead key\" you mentioned, as typing ``` + `a` or `~` + `a` produces only `a` (the same for the others vowels). \n\n`let g:ctrlp_key_loop = 1` seems to solve the issue -- actually it now allow me to type `\u00e3` and `\u00e0`, which was not possible on ms-windows gVim and linux Vim. I wasn't missing typing `\u00e3` on `CtrlP` window as it was usually part of large filenames, thus I was just skipping those characters while avoiding regex mode. But it is great to have it working.\n\nThank you very much!\n. ",
    "ay3114": "I think it would be nice if there is a message saying there are more matched files but cannot be displayed due to the match window limit. (You can simply return this message when the number of matched lines == (display line limit + 1)). The performance impact would be minimal. \n. I think it would be nice if there is a message saying there are more matched files but cannot be displayed due to the match window limit. (You can simply return this message when the number of matched lines == (display line limit + 1)). The performance impact would be minimal. \n. ",
    "rawtaz": "+1 to what @ay3114 suggested.\n. +1 to what @ay3114 suggested.\n. ",
    "woto": "Also view https://github.com/kien/ctrlp.vim/issues/449 it allow to scroll results\n. Also view https://github.com/kien/ctrlp.vim/issues/449 it allow to scroll results\n. ",
    "idbrii": "I just found that I can use something like this to say that a folder is top-level:\n\n```\nlet g:ctrlp_root_markers = ['.ctrlp.root']\n```\n\nAnd then `touch .ctrlp.root` in .vim/ to make ctrlp stop there.\n\nThanks.\n. I did try using the PrtInsert map option and to force it into a register:\n\n```\nlet g:ctrlp_prompt_mappings = {\n            \\ 'PrtInsert(\"rc\")':       ['<Space>'],\n            \\ }\nnmap <C-p> :let @c='.*'<CR>:CtrlP<CR>\n```\n\nBut PrtInsert(\"rc\") doesn't work (seems that PrtInsert only wants a single character). Also, the above would apply in regex mode.\n. I've found more success with the approach in #218 (but this issue is easier to find when looking for this kind of solution):\n\n```\nnmap <Leader>fs :let g:ctrlp_default_input = expand('%:t:r') \\|\n    \\ call ctrlp#init(0) \\| unlet g:ctrlp_default_input<CR>\n```\n\n(The method described by kien above has problems with insert mode mappings. That may be due to my out of date ctrlp.)\n. Couldn't this be accomplished by users with `let g:ctrlp_root_markers = ['.p4rc']`? \n\nI think the file you're referring to is [P4CONFIG](http://www.perforce.com/perforce/doc.current/manuals/cmdref/P4CONFIG.html), which doesn't have a standard name since the desired name is configured with `p4 set` (and disabled by default?). I use `p4config` and I'm sure there's some spectrum of other names in use.\n. I just found that I can use something like this to say that a folder is top-level:\n\n```\nlet g:ctrlp_root_markers = ['.ctrlp.root']\n```\n\nAnd then `touch .ctrlp.root` in .vim/ to make ctrlp stop there.\n\nThanks.\n. I did try using the PrtInsert map option and to force it into a register:\n\n```\nlet g:ctrlp_prompt_mappings = {\n            \\ 'PrtInsert(\"rc\")':       ['<Space>'],\n            \\ }\nnmap <C-p> :let @c='.*'<CR>:CtrlP<CR>\n```\n\nBut PrtInsert(\"rc\") doesn't work (seems that PrtInsert only wants a single character). Also, the above would apply in regex mode.\n. I've found more success with the approach in #218 (but this issue is easier to find when looking for this kind of solution):\n\n```\nnmap <Leader>fs :let g:ctrlp_default_input = expand('%:t:r') \\|\n    \\ call ctrlp#init(0) \\| unlet g:ctrlp_default_input<CR>\n```\n\n(The method described by kien above has problems with insert mode mappings. That may be due to my out of date ctrlp.)\n. Couldn't this be accomplished by users with `let g:ctrlp_root_markers = ['.p4rc']`? \n\nI think the file you're referring to is [P4CONFIG](http://www.perforce.com/perforce/doc.current/manuals/cmdref/P4CONFIG.html), which doesn't have a standard name since the desired name is configured with `p4 set` (and disabled by default?). I use `p4config` and I'm sure there's some spectrum of other names in use.\n. ",
    "sotte": "Thanks a lot!\n. Thanks a lot!\n. ",
    "eedeep": "Sorry, closing this issue. Found the answer here: https://github.com/kien/ctrlp.vim/issues/209 \n\nie, use Ctrl+j and Ctrl+k\n\nGreat.\n. Sorry, closing this issue. Found the answer here: https://github.com/kien/ctrlp.vim/issues/209 \n\nie, use Ctrl+j and Ctrl+k\n\nGreat.\n. ",
    "vsobolmaven": "could you please provide an example with g:ctrlp_open_func that would open selected bookmark directory  (in a bookmark mode) in a vim explorer (ala e:) on AcceptSelection action? \nBookmarks extenension like this was the feature I had looked for, but sometimes I still feel comfortable to use vim's standard explorer to browse directories.\n\nCurrently I hacked it in ctrlp#bookmarkdir#accept and then found this issue which may provide me what I need.\n\nThank you so much! \n. could you please provide an example with g:ctrlp_open_func that would open selected bookmark directory  (in a bookmark mode) in a vim explorer (ala e:) on AcceptSelection action? \nBookmarks extenension like this was the feature I had looked for, but sometimes I still feel comfortable to use vim's standard explorer to browse directories.\n\nCurrently I hacked it in ctrlp#bookmarkdir#accept and then found this issue which may provide me what I need.\n\nThank you so much! \n. ",
    "mikebobroski": "Ah, I'm sorry I didn't clarify. This is in fact happening when the the buffer is the same for both windows.\nHere's a screencast: http://www.screenr.com/fUc8\n\nSetting 'g:ctrlp_switch_buffer' set to 0 solved the problem. Thanks!\n. Ah, I'm sorry I didn't clarify. This is in fact happening when the the buffer is the same for both windows.\nHere's a screencast: http://www.screenr.com/fUc8\n\nSetting 'g:ctrlp_switch_buffer' set to 0 solved the problem. Thanks!\n. ",
    "jjasonclark": "`:CtrlPClearAllCaches` worked. I can find all the files now.\n. `:CtrlPClearAllCaches` worked. I can find all the files now.\n. ",
    "timc3": "Clearing the cache doesn't work for me at all. It is always the same files that are missing.\n. It was actually the height of the chooser window not being tall enough. Pity that it doesn't scroll, but I set it longer and now I can find the \"missing\" files\n. I just noticed that because the match window is not scrollable it was always missing files that I was looking for.\n. +1\n. Clearing the cache doesn't work for me at all. It is always the same files that are missing.\n. It was actually the height of the chooser window not being tall enough. Pity that it doesn't scroll, but I set it longer and now I can find the \"missing\" files\n. I just noticed that because the match window is not scrollable it was always missing files that I was looking for.\n. +1\n. ",
    "screwzm": "Me too. \nAll files in one directory does not appear in ctrlp.\nClearing the cache does not help for me.\nPlease fix this. Thanks.\n.  let g:ctrlp_max_files=0 does fix the problem.\nThanks for your prompt reply. LOL\n. let g:ctrlp_max_files=0 is not enough. \nFor large project, we should also set \nlet g:ctrlp_max_depth=40 .\nWorks like a charm now.\n. New problem now:\nI can not find files in other directory.\nScenario:\nWorking in directory A. Invoke ctrlp, only get list of files in the directory A\n. @kien  Yeap, I have just tried g:ctrlp_working_path_mode='' and works. Thanks.\n. How can I reuse the first BLANK windows on vim start?\nlet g:ctrlp_reuse_window = 'HOW TO FILL IN HERE'.\nPlease add support to this. Thanks.\n. It's not the case for me. \nCtrlp can not reuse the first window.  \n. Me too. \nAll files in one directory does not appear in ctrlp.\nClearing the cache does not help for me.\nPlease fix this. Thanks.\n.  let g:ctrlp_max_files=0 does fix the problem.\nThanks for your prompt reply. LOL\n. let g:ctrlp_max_files=0 is not enough. \nFor large project, we should also set \nlet g:ctrlp_max_depth=40 .\nWorks like a charm now.\n. New problem now:\nI can not find files in other directory.\nScenario:\nWorking in directory A. Invoke ctrlp, only get list of files in the directory A\n. @kien  Yeap, I have just tried g:ctrlp_working_path_mode='' and works. Thanks.\n. How can I reuse the first BLANK windows on vim start?\nlet g:ctrlp_reuse_window = 'HOW TO FILL IN HERE'.\nPlease add support to this. Thanks.\n. It's not the case for me. \nCtrlp can not reuse the first window.  \n. ",
    "dey-dey": "@timc3 i still had this problem too, height notwithstanding. i fixed it by (after I clear my cache) opening ctrlp in a higher level directory, it seems to index recursively from the directory you open it in. maybe i'm missing something tho.\n. @kien can you further explain \"Define additional root markers with the g:ctrlp_root_markers option.\"\n\nif i just want to set a ctrlp directory how do i do that. also not sure what disabling the working path mode feature does.\n\nthanks for the help! sorry if i'm dense :/\n. @timc3 i still had this problem too, height notwithstanding. i fixed it by (after I clear my cache) opening ctrlp in a higher level directory, it seems to index recursively from the directory you open it in. maybe i'm missing something tho.\n. @kien can you further explain \"Define additional root markers with the g:ctrlp_root_markers option.\"\n\nif i just want to set a ctrlp directory how do i do that. also not sure what disabling the working path mode feature does.\n\nthanks for the help! sorry if i'm dense :/\n. ",
    "megalithic": "just a heads up that this: `let g:ctrlp_working_path_mode = \"\"` totally fixed an issue i was having with opening a specific file in a folder and only having CtrlP access to the files in that folder, none outside in the root of the project. thanks!\n. just a heads up that this: `let g:ctrlp_working_path_mode = \"\"` totally fixed an issue i was having with opening a specific file in a folder and only having CtrlP access to the files in that folder, none outside in the root of the project. thanks!\n. ",
    "mooreniemi": "`let g:ctrlp_max_files=0` worked for me!\n. @llinfeng fixed same issue for me, ty\n. `let g:ctrlp_max_files=0` worked for me!\n. @llinfeng fixed same issue for me, ty\n. ",
    "w2moon": "It cannot found the file in a git repo's submodule unless i enter the folder of the submodule first.\n. It cannot found the file in a git repo's submodule unless i enter the folder of the submodule first.\n. ",
    "berkos": "`let g:ctrlp_max_files=0` worked for me too. Thanks\n. `let g:ctrlp_max_files=0` worked for me too. Thanks\n. ",
    "iovanom": "I add\n\n```\nlet g:ctrlp_max_files=0\nlet g:ctrlp_max_depth=40\n```\n\nand worked for me. Thanks.\n. I add\n\n```\nlet g:ctrlp_max_files=0\nlet g:ctrlp_max_depth=40\n```\n\nand worked for me. Thanks.\n. ",
    "jponc": "`let g:ctrlp_max_files=0` worked as well, thanks!\n. `let g:ctrlp_max_files=0` worked as well, thanks!\n. ",
    "arturmalecki": "My project has 47404 files \ud83d\ude31 and without:\n\n```\nlet g:ctrlp_max_files=0\nlet g:ctrlp_max_depth=40\n```\n\nctrlp didn't work correctly.\n\nThanks!\n. My project has 47404 files \ud83d\ude31 and without:\n\n```\nlet g:ctrlp_max_files=0\nlet g:ctrlp_max_depth=40\n```\n\nctrlp didn't work correctly.\n\nThanks!\n. ",
    "ggalindezb": "@screwzm NAILED IT! Thanks man. I love you. No homo.. @screwzm NAILED IT! Thanks man. I love you. No homo.. ",
    "jszakmeister": "Hmmm... I still see this issue on `master` with the change. :-(\n. Yes.\n\n``` console\n$ echo 'def formatError(msg):\n    print \"ERROR [file1]:\", msg' > file1.py\n$ echo 'import sys\n\ndef formatError(msg):\n    print >>sys.stderr, \"ERROR [file2]:\", msg' > file2.py\n$ ctags -R .\n$ cat tags\n!_TAG_FILE_FORMAT   2   /extended format; --format=1 will not append ;\" to lines/\n!_TAG_FILE_SORTED   1   /0=unsorted, 1=sorted, 2=foldcase/\n!_TAG_PROGRAM_AUTHOR    Darren Hiebert  /dhiebert@users.sourceforge.net/\n!_TAG_PROGRAM_NAME  Exuberant Ctags //\n!_TAG_PROGRAM_URL   http://ctags.sourceforge.net    /official site/\n!_TAG_PROGRAM_VERSION   5.8 //\nformatError file1.py    /^def formatError(msg):$/;\" f\nformatError file2.py    /^def formatError(msg):$/;\" f\nsys file2.py    /^import sys$/;\"    i\n```\n\nThen:\n\n```\ngvim file1.py\n```\n\nRun:\n\n```\n:CtrlPTag\n```\n\nSelect the `formatError` in `file2.py` and hit Enter.  Vim will still bring up the taglist and ask you to choose, even though you selected the version in `file2.py`.\n\nI created a gist for this too: https://gist.github.com/e722a7aef7a3e63513a4\n. I don't believe I'm running an old version.  This is what git has to say:\n\n``` console\n$ git log -1\ncommit 675faa77f883df9025df1c947b5a7f07f14713fe\nAuthor: Kien N <contact@ndkien.com>\nDate:   Fri Dec 21 08:48:12 2012 +0700\n\n    Fix for recognizing/expanding of environment variables\n\n    Thanks to Simon Ruderich\n```\n\nThat's in my `~/.vim/bundle/ctrlp.vim` folder.\n. `:pwd` returns `/Users/jszakmeister/tmp/mulitple-tags`.\n\n`file1.py` is at `/Users/jszakmeister/tmp/mulitple-tags/file1.py` and `file2.py` is at `/Users/jszakmeister/tmp/mulitple-tags/file2.py`.\n\nThat is pretty odd. :-(\n. Interesting.  I did that and it works as expected.  :-/  Any idea what\ncould be interfering?\n\n-John\nOn Dec 25, 2012 10:01 AM, \"kien\" notifications@github.com wrote:\n\n> Please try starting gvim with this:\n> \n> gvim --noplugin -u path/to/a/simple/.vimrc\n> \n> Use this as the content of the above .vimrc:\n> \n> set nocp\n> runtime! plugin/ctrlp.vim\n> \n> Just make sure the parent directory of plugin is in your runtimepath, for\n> example ~/.vim.\n> \n> See if you still get the tag-matchlist.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/kien/ctrlp.vim/issues/235#issuecomment-11673676.\n. Found it.   I have \"set cscopetag\" in my vimrc because it provides a better\ntag interface.... But it doesn't appear to behave well with CtrlP.\n\n-John\nOn Dec 25, 2012 11:01 AM, \"John Szakmeister\" john@szakmeister.net wrote:\n\n> Interesting.  I did that and it works as expected.  :-/  Any idea what\n> could be interfering?\n> \n> -John\n> On Dec 25, 2012 10:01 AM, \"kien\" notifications@github.com wrote:\n> \n> > Please try starting gvim with this:\n> > \n> > gvim --noplugin -u path/to/a/simple/.vimrc\n> > \n> > Use this as the content of the above .vimrc:\n> > \n> > set nocp\n> > runtime! plugin/ctrlp.vim\n> > \n> > Just make sure the parent directory of plugin is in your runtimepath,\n> > for example ~/.vim.\n> > \n> > See if you still get the tag-matchlist.\n> > \n> > \u2014\n> > Reply to this email directly or view it on GitHubhttps://github.com/kien/ctrlp.vim/issues/235#issuecomment-11673676.\n. Thank you for all your help!  I think I have a workaround now.  It's so\nmuch nicer to not get prompted twice.  Thanks again!\n\n-John\nOn Dec 25, 2012 11:41 AM, \"kien\" notifications@github.com wrote:\n\n> Ah I see. Thanks! When cst is set, :tag uses :cstag which in turn\n> performs :tjump. And :tjump always shows tag-matchlist when there are 2\n> or more similarly named tags.\n> \n> Since tag.vim only works with tags files, it might be a good idea to reset\n> that option when using :tag.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/kien/ctrlp.vim/issues/235#issuecomment-11674454.\n. I still think it's nice to center, even if it doesn't land where it's supposed to.  Centering at least gives you a fair chance to find the actual tag in either direction.  Plus, it makes where to look for the cursor consistent.  At the moment, you have no idea where you're going to be.  And I'd like to avoid the extra keystrokes.\n. Would it be okay if I make this an option or is there someway to hook it to get the behavior I'd like?  I've been testing this for a little while, and I really like it.  It's a huge speed improvement to see the contents for a function right away, instead of having to center it myself.  In the case that the tags are off, I haven't run into a case where I've been unhappy with the result.  If the signature still matches, Vim still searches for the tag and finds it.  If the signature is off, it does expand the fold, but then I could see the target nearby.  And in most cases, Vim still found the right location via searching.\n\nIf you're really opposed, I'll happily run my patched version.  I just think it's a nice feature for users.  Thanks for all your help!\n. This does help with opening the folds.  Can we now safely add the centering?  Just calling `sil! norm! zz` didn't work, but wrapping it with feedkeys as well did:\n\n``` diff\ndiff --git a/autoload/ctrlp/tag.vim b/autoload/ctrlp/tag.vim\nindex bb78744..f10d6c0 100644\n--- a/autoload/ctrlp/tag.vim\n+++ b/autoload/ctrlp/tag.vim\n@@ -111,6 +111,7 @@ fu! ctrlp#tag#accept(mode, str)\n    el\n        sil! cal feedkeys(\":\".cmd.\" \".tg.\"\\r\", 'nt')\n    en\n+   sil! cal feedkeys(\"zz\", 'nt')\n    cal ctrlp#setlcdir()\n endf\n```\n. Right, I understood why you used `feedkeys()`.  My goal was to still center the tag.  With the original way, wouldn't a failure in `:tag` cause an exception and stop execution?  I'm not sure how it works with `feedkeys()`, but at least you would have been pretty sure not to change the view on error since you'd never get to the line that does the centering.\n\nI appreciate your effort, but I'm not content to hit `zz` manually, so I'll maintain a forked version if that's what I need to do.  Thanks for all your help!\n. Bah.  I always forget that VimScript operates differently than most languages.  One last try here, and I'll give up trying to convince you.  What about something like this then:\n\n``` diff\ndiff --git a/autoload/ctrlp/tag.vim b/autoload/ctrlp/tag.vim\nindex bb78744..fb6d9fe 100644\n--- a/autoload/ctrlp/tag.vim\n+++ b/autoload/ctrlp/tag.vim\n@@ -106,10 +106,17 @@ fu! ctrlp#tag#accept(mode, str)\n        en\n        let save_cst = &cst\n        set cst&\n-       sil! cal feedkeys(\":\".fnd[1].\"ta \".tg.\"\\r\", 'nt')\n-       let &cst = save_cst\n+       try\n+           sil! cal feedkeys(\":\".fnd[1].\"ta \".tg.\"\\r\", 'nt')\n+           sil! cal feedkeys(\"zz\", 'nt')\n+       finally\n+           let &cst = save_cst\n+       endtry\n    el\n-       sil! cal feedkeys(\":\".cmd.\" \".tg.\"\\r\", 'nt')\n+       try\n+           sil! cal feedkeys(\":\".cmd.\" \".tg.\"\\r\", 'nt')\n+           sil! cal feedkeys(\"zz\", 'nt')\n+       endtry\n    en\n    cal ctrlp#setlcdir()\n endf\n```\n\nThat'll keep the `zz` from executing when `:tag` fails, but center the line if it does.  I wish the fix were a little more elegant, but we've got the two paths here.\n. I spent last evening this morning looking over error and exception handling in VimScript.  I see what you're talking about.  There's really no clean way to make sure the `:tag` command was successful.  Even checking `v:errmsg` seems wrong because an autocmd may have done a `silent! ...`.  It's a real shame that there's no good way of coping with an error here. :-(\n\nThank you very much for taking the time to explain your position.  It was very instructive, and pushed me to dig in further to VimScript.\n. Hmmm... I still see this issue on `master` with the change. :-(\n. Yes.\n\n``` console\n$ echo 'def formatError(msg):\n    print \"ERROR [file1]:\", msg' > file1.py\n$ echo 'import sys\n\ndef formatError(msg):\n    print >>sys.stderr, \"ERROR [file2]:\", msg' > file2.py\n$ ctags -R .\n$ cat tags\n!_TAG_FILE_FORMAT   2   /extended format; --format=1 will not append ;\" to lines/\n!_TAG_FILE_SORTED   1   /0=unsorted, 1=sorted, 2=foldcase/\n!_TAG_PROGRAM_AUTHOR    Darren Hiebert  /dhiebert@users.sourceforge.net/\n!_TAG_PROGRAM_NAME  Exuberant Ctags //\n!_TAG_PROGRAM_URL   http://ctags.sourceforge.net    /official site/\n!_TAG_PROGRAM_VERSION   5.8 //\nformatError file1.py    /^def formatError(msg):$/;\" f\nformatError file2.py    /^def formatError(msg):$/;\" f\nsys file2.py    /^import sys$/;\"    i\n```\n\nThen:\n\n```\ngvim file1.py\n```\n\nRun:\n\n```\n:CtrlPTag\n```\n\nSelect the `formatError` in `file2.py` and hit Enter.  Vim will still bring up the taglist and ask you to choose, even though you selected the version in `file2.py`.\n\nI created a gist for this too: https://gist.github.com/e722a7aef7a3e63513a4\n. I don't believe I'm running an old version.  This is what git has to say:\n\n``` console\n$ git log -1\ncommit 675faa77f883df9025df1c947b5a7f07f14713fe\nAuthor: Kien N <contact@ndkien.com>\nDate:   Fri Dec 21 08:48:12 2012 +0700\n\n    Fix for recognizing/expanding of environment variables\n\n    Thanks to Simon Ruderich\n```\n\nThat's in my `~/.vim/bundle/ctrlp.vim` folder.\n. `:pwd` returns `/Users/jszakmeister/tmp/mulitple-tags`.\n\n`file1.py` is at `/Users/jszakmeister/tmp/mulitple-tags/file1.py` and `file2.py` is at `/Users/jszakmeister/tmp/mulitple-tags/file2.py`.\n\nThat is pretty odd. :-(\n. Interesting.  I did that and it works as expected.  :-/  Any idea what\ncould be interfering?\n\n-John\nOn Dec 25, 2012 10:01 AM, \"kien\" notifications@github.com wrote:\n\n> Please try starting gvim with this:\n> \n> gvim --noplugin -u path/to/a/simple/.vimrc\n> \n> Use this as the content of the above .vimrc:\n> \n> set nocp\n> runtime! plugin/ctrlp.vim\n> \n> Just make sure the parent directory of plugin is in your runtimepath, for\n> example ~/.vim.\n> \n> See if you still get the tag-matchlist.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/kien/ctrlp.vim/issues/235#issuecomment-11673676.\n. Found it.   I have \"set cscopetag\" in my vimrc because it provides a better\ntag interface.... But it doesn't appear to behave well with CtrlP.\n\n-John\nOn Dec 25, 2012 11:01 AM, \"John Szakmeister\" john@szakmeister.net wrote:\n\n> Interesting.  I did that and it works as expected.  :-/  Any idea what\n> could be interfering?\n> \n> -John\n> On Dec 25, 2012 10:01 AM, \"kien\" notifications@github.com wrote:\n> \n> > Please try starting gvim with this:\n> > \n> > gvim --noplugin -u path/to/a/simple/.vimrc\n> > \n> > Use this as the content of the above .vimrc:\n> > \n> > set nocp\n> > runtime! plugin/ctrlp.vim\n> > \n> > Just make sure the parent directory of plugin is in your runtimepath,\n> > for example ~/.vim.\n> > \n> > See if you still get the tag-matchlist.\n> > \n> > \u2014\n> > Reply to this email directly or view it on GitHubhttps://github.com/kien/ctrlp.vim/issues/235#issuecomment-11673676.\n. Thank you for all your help!  I think I have a workaround now.  It's so\nmuch nicer to not get prompted twice.  Thanks again!\n\n-John\nOn Dec 25, 2012 11:41 AM, \"kien\" notifications@github.com wrote:\n\n> Ah I see. Thanks! When cst is set, :tag uses :cstag which in turn\n> performs :tjump. And :tjump always shows tag-matchlist when there are 2\n> or more similarly named tags.\n> \n> Since tag.vim only works with tags files, it might be a good idea to reset\n> that option when using :tag.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/kien/ctrlp.vim/issues/235#issuecomment-11674454.\n. I still think it's nice to center, even if it doesn't land where it's supposed to.  Centering at least gives you a fair chance to find the actual tag in either direction.  Plus, it makes where to look for the cursor consistent.  At the moment, you have no idea where you're going to be.  And I'd like to avoid the extra keystrokes.\n. Would it be okay if I make this an option or is there someway to hook it to get the behavior I'd like?  I've been testing this for a little while, and I really like it.  It's a huge speed improvement to see the contents for a function right away, instead of having to center it myself.  In the case that the tags are off, I haven't run into a case where I've been unhappy with the result.  If the signature still matches, Vim still searches for the tag and finds it.  If the signature is off, it does expand the fold, but then I could see the target nearby.  And in most cases, Vim still found the right location via searching.\n\nIf you're really opposed, I'll happily run my patched version.  I just think it's a nice feature for users.  Thanks for all your help!\n. This does help with opening the folds.  Can we now safely add the centering?  Just calling `sil! norm! zz` didn't work, but wrapping it with feedkeys as well did:\n\n``` diff\ndiff --git a/autoload/ctrlp/tag.vim b/autoload/ctrlp/tag.vim\nindex bb78744..f10d6c0 100644\n--- a/autoload/ctrlp/tag.vim\n+++ b/autoload/ctrlp/tag.vim\n@@ -111,6 +111,7 @@ fu! ctrlp#tag#accept(mode, str)\n    el\n        sil! cal feedkeys(\":\".cmd.\" \".tg.\"\\r\", 'nt')\n    en\n+   sil! cal feedkeys(\"zz\", 'nt')\n    cal ctrlp#setlcdir()\n endf\n```\n. Right, I understood why you used `feedkeys()`.  My goal was to still center the tag.  With the original way, wouldn't a failure in `:tag` cause an exception and stop execution?  I'm not sure how it works with `feedkeys()`, but at least you would have been pretty sure not to change the view on error since you'd never get to the line that does the centering.\n\nI appreciate your effort, but I'm not content to hit `zz` manually, so I'll maintain a forked version if that's what I need to do.  Thanks for all your help!\n. Bah.  I always forget that VimScript operates differently than most languages.  One last try here, and I'll give up trying to convince you.  What about something like this then:\n\n``` diff\ndiff --git a/autoload/ctrlp/tag.vim b/autoload/ctrlp/tag.vim\nindex bb78744..fb6d9fe 100644\n--- a/autoload/ctrlp/tag.vim\n+++ b/autoload/ctrlp/tag.vim\n@@ -106,10 +106,17 @@ fu! ctrlp#tag#accept(mode, str)\n        en\n        let save_cst = &cst\n        set cst&\n-       sil! cal feedkeys(\":\".fnd[1].\"ta \".tg.\"\\r\", 'nt')\n-       let &cst = save_cst\n+       try\n+           sil! cal feedkeys(\":\".fnd[1].\"ta \".tg.\"\\r\", 'nt')\n+           sil! cal feedkeys(\"zz\", 'nt')\n+       finally\n+           let &cst = save_cst\n+       endtry\n    el\n-       sil! cal feedkeys(\":\".cmd.\" \".tg.\"\\r\", 'nt')\n+       try\n+           sil! cal feedkeys(\":\".cmd.\" \".tg.\"\\r\", 'nt')\n+           sil! cal feedkeys(\"zz\", 'nt')\n+       endtry\n    en\n    cal ctrlp#setlcdir()\n endf\n```\n\nThat'll keep the `zz` from executing when `:tag` fails, but center the line if it does.  I wish the fix were a little more elegant, but we've got the two paths here.\n. I spent last evening this morning looking over error and exception handling in VimScript.  I see what you're talking about.  There's really no clean way to make sure the `:tag` command was successful.  Even checking `v:errmsg` seems wrong because an autocmd may have done a `silent! ...`.  It's a real shame that there's no good way of coping with an error here. :-(\n\nThank you very much for taking the time to explain your position.  It was very instructive, and pushed me to dig in further to VimScript.\n. ",
    "narfdotpl": "Sorry, my bad. `:CtrlPM<Tab>` gave me `:CtrlPMRUFiles` and I assumed there's no `:CtrlPMRU`.\n. Sorry, my bad. `:CtrlPM<Tab>` gave me `:CtrlPMRUFiles` and I assumed there's no `:CtrlPMRU`.\n. ",
    "gcatlin": "Just noticed this is a dupe of 233. I'll investigate into why I'm not seeing the correct behavior.\n. I was running an out-of-date version of CtrlP. Thanks for fixing this, BTW!\n. Just noticed this is a dupe of 233. I'll investigate into why I'm not seeing the correct behavior.\n. I was running an out-of-date version of CtrlP. Thanks for fixing this, BTW!\n. ",
    "yoopea": "Thank you for your answer and the related link; it's working now (yes, I have a .git directory at my home directory).\n\nThe problem now is that the working dir is constantly changing because my project has .svn directories at each sub-directory of my project. I'l probably have to use the .root tip to manage this situation.\n\nNevertheless, you have another idea ?\n\nThank you and cheers for this great plugin !\n. Thank you for your answer and the related link; it's working now (yes, I have a .git directory at my home directory).\n\nThe problem now is that the working dir is constantly changing because my project has .svn directories at each sub-directory of my project. I'l probably have to use the .root tip to manage this situation.\n\nNevertheless, you have another idea ?\n\nThank you and cheers for this great plugin !\n. ",
    "jdan": "@kien, just curious - why not use the value of `:pwd`, instead of looking for a `.git` or `.svn` folder? I'm currently running into the same issue as @yoopea, where I have `.svn` folders in every subdirectory, so the fuzzy-finder isn't playing nice.\n. @kien, just curious - why not use the value of `:pwd`, instead of looking for a `.git` or `.svn` folder? I'm currently running into the same issue as @yoopea, where I have `.svn` folders in every subdirectory, so the fuzzy-finder isn't playing nice.\n. ",
    "tusj": "I found this when thinking about running ctrlp with inotify. Is this not going to be done simply because you want to have the requirement that ctlrp should be written strictly in vimscript? I'd love the idea of using a background process with inotify.\n. @SirVer Sorry, no progress there.\n. I found this when thinking about running ctrlp with inotify. Is this not going to be done simply because you want to have the requirement that ctlrp should be written strictly in vimscript? I'd love the idea of using a background process with inotify.\n. @SirVer Sorry, no progress there.\n. ",
    "SirVer": "@tusj I am looking into this right now too - did you make some progress on using inotify with ctrlp?\n\nI tried to change CtrlP to talk to a background process instead of reading from a cachefile. I then realized that I might just run a background process that uses inotify to keep the cache file updated. I learned that this is more work than I hoped because you have to keep track of moved directories yourself. I hoped the lazywebs have that solved for me already.\n. I made some progress. I figured out where the cache of ctrlp lives now and use my own inotify runner called shell grunt: https://github.com/SirVer/shell_grunt to rebuild the cache for my project dir every time a file changes:\n\n``` python\nclass RebuildCtrlPCache(WorkItem):\n    name = \"Rebuilding CtrlP cache\"\n    command = lambda self, paths: [\"find\", \"-E\", \".\", \"-type\", \"f\",\n            \"-and\", \"-not\", \"-iname\", \"*.png\",\n            \"-and\", \"-not\", \"-iname\", \"*.jpg\",\n            \"-and\", \"-not\", \"-iname\", \"*.mo\",\n            \"-and\", \"-not\", \"-iregex\", r\".*\\.bzr\\/.*\",\n            \"-and\", \"-not\", \"-iregex\", r\".*\\.bzr-repo\\/.*\",\n            \"-and\", \"-not\", \"-iregex\", r\".*binary\\/.*\",\n    ]\n    output_file = \"/Users/sirver/.cache/ctrlp/%Users%sirver%Desktop%Programming%cpp%widelands%bzr_repo.txt\"\n    start_delay = .5\n    path_matcher = staticmethod(lambda fn: True)\n    report_launch = lambda self: True\n```\n\nFull shell grunt config file for my Widelands project here: https://gist.github.com/SirVer/11122037\n. Thanks for getting back to me. This works great, but I am stuck with the two variables set (I'd like to have them unset in my normal usage). Unsetting them can only be done in the feedkeys call, because of the way Vim consumes keystrokes. And it feels a little sluggish.\n\nI assumed that CtrlP would be a good solution for this, because it already maintains a cache of the files under the current director. If I write my own method, I'd need to crawl all subdirectories.\n\nIt seems that a function that uses these CtrlP facilities and return the N best matches would solve this rather nicely, nor? Would it be easy to make such a function?\n\n```\nlet results = CtrlP#PotentialResultsFor(\"blah.h\", // filename\n   \".\", // in directory\n   1,  // by filename\n   0, // no reg_exp\n)\n```\n. I doubt this will work (I will test it this week though). From my experiences with writing UltiSnips, I learned that Vim will not empty the feedkeys() buffer immediately, but only after a script or call to a function has returned. Therefore the variables will be reset before the keys are played back - I might be wrong, as in UltiSnips case there is also Python involved, which adds another component, so I'll test and return back.\n. It is as expected - but nevertheless, this is a very close approximation to what I wanted to have. Thanks a lot for your help! And thanks for CtrlP - what a nice plugin you made there.\n. Thanks skeept - however, my projects are to varied to find a working set of options that are fine for me. The CtrlP hack that was put together here however works great for me.\n. > It's because the CtrlP buffer is opened with :noautocmd, mostly to avoid issues with plugins that do things when autocmds are triggered.\n\nthat is a weird argument. That is precisely what autocommands are for and CtrlP leaves the current buffer, so it should really raise the corresponding autocommand. Not raising correct autocommands can also interfere with plugins that expect them (case in point: UltiSnips needs to terminate the current snippet when you leave the current buffer. Not doing it leads to wrong state in the plugin). \n\n> I also use UltiSnips frequently but haven't run into that. I use an older copy from last year, not sure which revision or version.\n\nThat is great that you are using it! :) The bug was introduced by a recent contribution that adds support for unmapping jumping keys when there is no snippet (so that the default mappings can be used). When the cursor moves, UltiSnips understands that it is no longer inside of the last snippet and terminates it. But since we left the buffer, iunmap <buffer> will not work. That is why we also terminate snippets before leaving a buffer - but the only way to detect this is via the autocommand that CtrlP suppresses.\n\nI had to add a dirty work around for this issue which made me a sad panda :(\n. > How about adding a check for the correct buffer before running the iunmap's? Someone may use :noautocmd or eventignore anytime and change to a different buffer, which will raise the same errors from UltiSnips.\n\nthat is what I did, but it feels inelegant.\n\nBut I guess you are right, I have to blame Vim for actually offering the `noautocmd` - a design flaw imho, so I'll need to support people using it. My argument still stands though - a plugin should not use it, as they should not `vmap` (instead `xmap`) or `normal` (instead `normal!`). All of these are design flaws in Vim too - there should be no way of messing any of these up, but they are.\n. @tusj I am looking into this right now too - did you make some progress on using inotify with ctrlp?\n\nI tried to change CtrlP to talk to a background process instead of reading from a cachefile. I then realized that I might just run a background process that uses inotify to keep the cache file updated. I learned that this is more work than I hoped because you have to keep track of moved directories yourself. I hoped the lazywebs have that solved for me already.\n. I made some progress. I figured out where the cache of ctrlp lives now and use my own inotify runner called shell grunt: https://github.com/SirVer/shell_grunt to rebuild the cache for my project dir every time a file changes:\n\n``` python\nclass RebuildCtrlPCache(WorkItem):\n    name = \"Rebuilding CtrlP cache\"\n    command = lambda self, paths: [\"find\", \"-E\", \".\", \"-type\", \"f\",\n            \"-and\", \"-not\", \"-iname\", \"*.png\",\n            \"-and\", \"-not\", \"-iname\", \"*.jpg\",\n            \"-and\", \"-not\", \"-iname\", \"*.mo\",\n            \"-and\", \"-not\", \"-iregex\", r\".*\\.bzr\\/.*\",\n            \"-and\", \"-not\", \"-iregex\", r\".*\\.bzr-repo\\/.*\",\n            \"-and\", \"-not\", \"-iregex\", r\".*binary\\/.*\",\n    ]\n    output_file = \"/Users/sirver/.cache/ctrlp/%Users%sirver%Desktop%Programming%cpp%widelands%bzr_repo.txt\"\n    start_delay = .5\n    path_matcher = staticmethod(lambda fn: True)\n    report_launch = lambda self: True\n```\n\nFull shell grunt config file for my Widelands project here: https://gist.github.com/SirVer/11122037\n. Thanks for getting back to me. This works great, but I am stuck with the two variables set (I'd like to have them unset in my normal usage). Unsetting them can only be done in the feedkeys call, because of the way Vim consumes keystrokes. And it feels a little sluggish.\n\nI assumed that CtrlP would be a good solution for this, because it already maintains a cache of the files under the current director. If I write my own method, I'd need to crawl all subdirectories.\n\nIt seems that a function that uses these CtrlP facilities and return the N best matches would solve this rather nicely, nor? Would it be easy to make such a function?\n\n```\nlet results = CtrlP#PotentialResultsFor(\"blah.h\", // filename\n   \".\", // in directory\n   1,  // by filename\n   0, // no reg_exp\n)\n```\n. I doubt this will work (I will test it this week though). From my experiences with writing UltiSnips, I learned that Vim will not empty the feedkeys() buffer immediately, but only after a script or call to a function has returned. Therefore the variables will be reset before the keys are played back - I might be wrong, as in UltiSnips case there is also Python involved, which adds another component, so I'll test and return back.\n. It is as expected - but nevertheless, this is a very close approximation to what I wanted to have. Thanks a lot for your help! And thanks for CtrlP - what a nice plugin you made there.\n. Thanks skeept - however, my projects are to varied to find a working set of options that are fine for me. The CtrlP hack that was put together here however works great for me.\n. > It's because the CtrlP buffer is opened with :noautocmd, mostly to avoid issues with plugins that do things when autocmds are triggered.\n\nthat is a weird argument. That is precisely what autocommands are for and CtrlP leaves the current buffer, so it should really raise the corresponding autocommand. Not raising correct autocommands can also interfere with plugins that expect them (case in point: UltiSnips needs to terminate the current snippet when you leave the current buffer. Not doing it leads to wrong state in the plugin). \n\n> I also use UltiSnips frequently but haven't run into that. I use an older copy from last year, not sure which revision or version.\n\nThat is great that you are using it! :) The bug was introduced by a recent contribution that adds support for unmapping jumping keys when there is no snippet (so that the default mappings can be used). When the cursor moves, UltiSnips understands that it is no longer inside of the last snippet and terminates it. But since we left the buffer, iunmap <buffer> will not work. That is why we also terminate snippets before leaving a buffer - but the only way to detect this is via the autocommand that CtrlP suppresses.\n\nI had to add a dirty work around for this issue which made me a sad panda :(\n. > How about adding a check for the correct buffer before running the iunmap's? Someone may use :noautocmd or eventignore anytime and change to a different buffer, which will raise the same errors from UltiSnips.\n\nthat is what I did, but it feels inelegant.\n\nBut I guess you are right, I have to blame Vim for actually offering the `noautocmd` - a design flaw imho, so I'll need to support people using it. My argument still stands though - a plugin should not use it, as they should not `vmap` (instead `xmap`) or `normal` (instead `normal!`). All of these are design flaws in Vim too - there should be no way of messing any of these up, but they are.\n. ",
    "grod": "After testing in a clean environment with only ctrlp and experiencing the same issue I did some googling and it seems to be an issue with vim. I don't know if it's expected behavior or not, but setting\n'autocmd BufEnter \\* set rnu'\ninstead of just 'set rnu' works.\nThanks\n. Yes, the issue was having <code>set nu</code> before <code>set rnu</code>in my .vimrc even in the minimal version I used for testing this out. =)\nThank you for pointing this out.\n. After testing in a clean environment with only ctrlp and experiencing the same issue I did some googling and it seems to be an issue with vim. I don't know if it's expected behavior or not, but setting\n'autocmd BufEnter \\* set rnu'\ninstead of just 'set rnu' works.\nThanks\n. Yes, the issue was having <code>set nu</code> before <code>set rnu</code>in my .vimrc even in the minimal version I used for testing this out. =)\nThank you for pointing this out.\n. ",
    "dfang": "i've changed to FuzzyFinder\n. i've changed to FuzzyFinder\n. ",
    "shelper": "i use the configuration from amix : https://github.com/amix/vimrc\nit happens even with a pure restart of vim, i.e, start withno\nsession/buffer loaded.\nWhen i press C-F to start ctrlp, everything is fine\nthen i press C-F again to change to buffer search, the error shows up\nthen i keep pressing C-F to cycling buffer, mrt and files, all have the\nsame error\nwhen ctrp updates its list, the whole window is jumpy...\n\nit worked before on another PC...\nIs it possible that used another PC which updated some cache content in the\nshared fold and these cache are not valid for another PC?\nthanks alot\uff01\n\nOn Mon, Aug 6, 2012 at 1:56 PM, kien <\nreply@reply.github.com\n\n> wrote:\n> \n> Can you share your full Vim configuration? Also, let me know the exact\n> steps to reproduce these beginning from starting up Vim.\n> \n> Line 17 of BuildPrompt is a `redraw` command and E68 is related to syntax\n> highlighting so the first problem might have something to do with the other\n> buffers you have open (since `redraw` affects the whole screen). You can\n> test this by opening ctrlp right after starting up Vim, and try to\n> reproduce the error.\n> \n> For the second problem, does the entire Vim window become jumpy or just\n> the content of the non-ctrlp buffer(s) become jumpy?\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/kien/ctrlp.vim/issues/248#issuecomment-7530512\n. the OS is windows 7, gvim73.46\ni just re-installed everything including gvim for windows and the amix\nconfig files.\nand the same question happend. ..\nreally frustrating...\nthanks anyway\n\nOn Mon, Aug 6, 2012 at 2:43 PM, kien <\nreply@reply.github.com\n\n> wrote:\n> \n> What OS are you using on this computer? Do you have any customizations for\n> amix's config?\n> \n> Also, from the error msgs, it looks like this starts right from the init\n> step to every action that calls BuildPrompt, including adding and deleting\n> characters.\n> \n> I doubt this has anything to do with the cache, but you can try deleting\n> the ctrlp.vim bundle and the cache directory, then clone the plugin again\n> from here.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/kien/ctrlp.vim/issues/248#issuecomment-7531842\n. for the first part, ctrlp works.\nfor the second part, i dont think the diff file is for the master version of ctrlP here...\nanyway, i applied manually to sovle the unmatch, and got 2 error like follows\nE68: Invalid character after \\z\nE68: Invalid character after \\z\n\nnever mind, it worked on other PC, so i think it may be of a bug not from ctrlp\nthanks anyway.\n. after deleting vim plugins one by one\ni found the conflict was between ctrlP and powerline\nwish this clue helps\n\nhowever, i do have no problem using another pc that shares exactly the same\nvim settings.....\n\nfor the first time, computer becomes so unpredictable for me,\n\nOn Tue, Aug 7, 2012 at 10:13 AM, kien notifications@github.com wrote:\n\n> I think the problem with the patch is the whitespaces (tabs vs. spaces, it\n> happened before).\n> \n> As for the errors, if ctrlp works in the first test, then something in\n> your normal configuration is definitely conflicting with ctrlp.\n> \n> If you're interested in tracking it down, you can try disabling each of\n> the plugins and remove parts of your _vimrc and other configs etc... until\n> you find the culprit. If you do find it, then please leave a comment or\n> just open a new issue. If I can, I'll try to find a workaround for it\n> regardless if it's a ctrlp's problem.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/kien/ctrlp.vim/issues/248#issuecomment-7554537.\n. btw, i do notice that the other pc where ctrlp is working\nsome times does not have the colorful rendering by powerline.\nbut at least it does not give error message.\ni may send a screen shot here when i get back to that pc\n\nOn Tue, Aug 7, 2012 at 11:57 AM, zhijia yuan zhijia.yuan@gmail.com wrote:\n\n> after deleting vim plugins one by one\n> i found the conflict was between ctrlP and powerline\n> wish this clue helps\n> \n> however, i do have no problem using another pc that shares exactly the\n> same vim settings.....\n> \n> for the first time, computer becomes so unpredictable for me,\n> \n> On Tue, Aug 7, 2012 at 10:13 AM, kien notifications@github.com wrote:\n> \n> > I think the problem with the patch is the whitespaces (tabs vs. spaces,\n> > it happened before).\n> > \n> > As for the errors, if ctrlp works in the first test, then something in\n> > your normal configuration is definitely conflicting with ctrlp.\n> > \n> > If you're interested in tracking it down, you can try disabling each of\n> > the plugins and remove parts of your _vimrc and other configs etc... until\n> > you find the culprit. If you do find it, then please leave a comment or\n> > just open a new issue. If I can, I'll try to find a workaround for it\n> > regardless if it's a ctrlp's problem.\n> > \n> > \u2014\n> > Reply to this email directly or view it on GitHubhttps://github.com/kien/ctrlp.vim/issues/248#issuecomment-7554537.\n. you are right\ni am in a fold with my inital z.....\nat least now i know what is the cause\n\nthanks alot\n\nOn Tue, Aug 7, 2012 at 12:20 PM, kien notifications@github.com wrote:\n\n> Hmm, sounds like it might be related to this powerline issue:\n> https://github.com/Lokaltog/vim-powerline/issues/161\n> I can't reproduce that, though so I'm not sure if it has something to do\n> with the errors here.\n> \n> As for the coloring issue, I think you should open a new issue with\n> powerline since it is what powerline does. Other than calling a specified\n> function, ctrlp doesn't have much say in how the custom statusline works or\n> looks like.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/kien/ctrlp.vim/issues/248#issuecomment-7558552.\n. i use the configuration from amix : https://github.com/amix/vimrc\nit happens even with a pure restart of vim, i.e, start withno\nsession/buffer loaded.\nWhen i press C-F to start ctrlp, everything is fine\nthen i press C-F again to change to buffer search, the error shows up\nthen i keep pressing C-F to cycling buffer, mrt and files, all have the\nsame error\nwhen ctrp updates its list, the whole window is jumpy...\n\nit worked before on another PC...\nIs it possible that used another PC which updated some cache content in the\nshared fold and these cache are not valid for another PC?\nthanks alot\uff01\n\nOn Mon, Aug 6, 2012 at 1:56 PM, kien <\nreply@reply.github.com\n\n> wrote:\n> \n> Can you share your full Vim configuration? Also, let me know the exact\n> steps to reproduce these beginning from starting up Vim.\n> \n> Line 17 of BuildPrompt is a `redraw` command and E68 is related to syntax\n> highlighting so the first problem might have something to do with the other\n> buffers you have open (since `redraw` affects the whole screen). You can\n> test this by opening ctrlp right after starting up Vim, and try to\n> reproduce the error.\n> \n> For the second problem, does the entire Vim window become jumpy or just\n> the content of the non-ctrlp buffer(s) become jumpy?\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/kien/ctrlp.vim/issues/248#issuecomment-7530512\n. the OS is windows 7, gvim73.46\ni just re-installed everything including gvim for windows and the amix\nconfig files.\nand the same question happend. ..\nreally frustrating...\nthanks anyway\n\nOn Mon, Aug 6, 2012 at 2:43 PM, kien <\nreply@reply.github.com\n\n> wrote:\n> \n> What OS are you using on this computer? Do you have any customizations for\n> amix's config?\n> \n> Also, from the error msgs, it looks like this starts right from the init\n> step to every action that calls BuildPrompt, including adding and deleting\n> characters.\n> \n> I doubt this has anything to do with the cache, but you can try deleting\n> the ctrlp.vim bundle and the cache directory, then clone the plugin again\n> from here.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/kien/ctrlp.vim/issues/248#issuecomment-7531842\n. for the first part, ctrlp works.\nfor the second part, i dont think the diff file is for the master version of ctrlP here...\nanyway, i applied manually to sovle the unmatch, and got 2 error like follows\nE68: Invalid character after \\z\nE68: Invalid character after \\z\n\nnever mind, it worked on other PC, so i think it may be of a bug not from ctrlp\nthanks anyway.\n. after deleting vim plugins one by one\ni found the conflict was between ctrlP and powerline\nwish this clue helps\n\nhowever, i do have no problem using another pc that shares exactly the same\nvim settings.....\n\nfor the first time, computer becomes so unpredictable for me,\n\nOn Tue, Aug 7, 2012 at 10:13 AM, kien notifications@github.com wrote:\n\n> I think the problem with the patch is the whitespaces (tabs vs. spaces, it\n> happened before).\n> \n> As for the errors, if ctrlp works in the first test, then something in\n> your normal configuration is definitely conflicting with ctrlp.\n> \n> If you're interested in tracking it down, you can try disabling each of\n> the plugins and remove parts of your _vimrc and other configs etc... until\n> you find the culprit. If you do find it, then please leave a comment or\n> just open a new issue. If I can, I'll try to find a workaround for it\n> regardless if it's a ctrlp's problem.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/kien/ctrlp.vim/issues/248#issuecomment-7554537.\n. btw, i do notice that the other pc where ctrlp is working\nsome times does not have the colorful rendering by powerline.\nbut at least it does not give error message.\ni may send a screen shot here when i get back to that pc\n\nOn Tue, Aug 7, 2012 at 11:57 AM, zhijia yuan zhijia.yuan@gmail.com wrote:\n\n> after deleting vim plugins one by one\n> i found the conflict was between ctrlP and powerline\n> wish this clue helps\n> \n> however, i do have no problem using another pc that shares exactly the\n> same vim settings.....\n> \n> for the first time, computer becomes so unpredictable for me,\n> \n> On Tue, Aug 7, 2012 at 10:13 AM, kien notifications@github.com wrote:\n> \n> > I think the problem with the patch is the whitespaces (tabs vs. spaces,\n> > it happened before).\n> > \n> > As for the errors, if ctrlp works in the first test, then something in\n> > your normal configuration is definitely conflicting with ctrlp.\n> > \n> > If you're interested in tracking it down, you can try disabling each of\n> > the plugins and remove parts of your _vimrc and other configs etc... until\n> > you find the culprit. If you do find it, then please leave a comment or\n> > just open a new issue. If I can, I'll try to find a workaround for it\n> > regardless if it's a ctrlp's problem.\n> > \n> > \u2014\n> > Reply to this email directly or view it on GitHubhttps://github.com/kien/ctrlp.vim/issues/248#issuecomment-7554537.\n. you are right\ni am in a fold with my inital z.....\nat least now i know what is the cause\n\nthanks alot\n\nOn Tue, Aug 7, 2012 at 12:20 PM, kien notifications@github.com wrote:\n\n> Hmm, sounds like it might be related to this powerline issue:\n> https://github.com/Lokaltog/vim-powerline/issues/161\n> I can't reproduce that, though so I'm not sure if it has something to do\n> with the errors here.\n> \n> As for the coloring issue, I think you should open a new issue with\n> powerline since it is what powerline does. Other than calling a specified\n> function, ctrlp doesn't have much say in how the custom statusline works or\n> looks like.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/kien/ctrlp.vim/issues/248#issuecomment-7558552.\n. ",
    "alyandon": "I'm using the default key mapping to open ctrlp.  The only settings in my .vimrc related to ctrlp are:\n\nlet g:ctrlp_lazy_update=1\nlet g:ctrlp_max_files=30000\n. Sure, no problem.  I'll update the issue once I've had a chance to do that.\n. Sorry, I didn't have time this week to collect the information you requested but it is on my list of things to do. :)\n\nHowever, I think your comment about an old autoload/ctrlp.vim might have some bearing on my problem.  I'll see if that is the case and update this issue appropriately when I get the chance.\n. You were spot on - I'm using pathogen to load ctrlp and there was an version of ctrlp.vim in ~/.vim/autoload.  Works perfectly now and I really appreciate you spending time looking into this.\n. I'm using the default key mapping to open ctrlp.  The only settings in my .vimrc related to ctrlp are:\n\nlet g:ctrlp_lazy_update=1\nlet g:ctrlp_max_files=30000\n. Sure, no problem.  I'll update the issue once I've had a chance to do that.\n. Sorry, I didn't have time this week to collect the information you requested but it is on my list of things to do. :)\n\nHowever, I think your comment about an old autoload/ctrlp.vim might have some bearing on my problem.  I'll see if that is the case and update this issue appropriately when I get the chance.\n. You were spot on - I'm using pathogen to load ctrlp and there was an version of ctrlp.vim in ~/.vim/autoload.  Works perfectly now and I really appreciate you spending time looking into this.\n. ",
    "keyneston": "I discovered those key commands by guessing based upon the others mentioned. Do they work in other tools/places that I'm not aware of? Are there additional movement commands that work in this context?\n. I discovered those key commands by guessing based upon the others mentioned. Do they work in other tools/places that I'm not aware of? Are there additional movement commands that work in this context?\n. ",
    "liaofeng": "it works now, really thanks~\n. it works now, really thanks~\n. ",
    "IonicaBizau": "@kien I want to set it permanently to home (`~/`). `:CtrlP ~/` works fine, but I want to use this root directory always. How can I do that?\n. @kien I want to set it permanently to home (`~/`). `:CtrlP ~/` works fine, but I want to use this root directory always. How can I do that?\n. ",
    "funkotron": "Yeah... that explains it. Thanks!\n. Yeah... that explains it. Thanks!\n. ",
    "teoljungberg": "I don't know if its related to #258\n. `let g:ctrlp_custom_ignore = ''` worked like a charm!\n\nMy directory-structure looks like this\n\n```\n.\n\u251c\u2500\u2500 Gemfile\n\u251c\u2500\u2500 LICENSE\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 Rakefile\n\u251c\u2500\u2500 bin\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 rubdo\n\u251c\u2500\u2500 lib\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 rubdo\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 cli.rb\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 item.rb\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 list.rb\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 version.rb\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 rubdo.rb\n\u251c\u2500\u2500 pkg\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 rubdo-0.0.1.gem\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 rubdo-0.0.2.gem\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 rubdo-0.0.3.gem\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 rubdo-0.1.0.gem\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 rubdo-0.1.1.gem\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 rubdo-0.1.2.gem\n\u2514\u2500\u2500 rubdo.gemspec\n\n4 directories, 17 files\n```\n\nAnd when running CtrlP I see this\n![](http://f.cl.ly/items/08331L2s3E2Y3L3i1W1n/Screen%20Shot%202012-08-19%20at%2017.32.30.png)\n\nNone of my directories `lib`, `bin`, `pkg` are in there.\nAtleast the problem was fixes, I just don't get why it even occured\n. That's just fantastic, nicely done!\n. Great, you should have a CHANGELOG file so after each update the users can see what has been changed and so on\n. I don't know if its related to #258\n. `let g:ctrlp_custom_ignore = ''` worked like a charm!\n\nMy directory-structure looks like this\n\n```\n.\n\u251c\u2500\u2500 Gemfile\n\u251c\u2500\u2500 LICENSE\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 Rakefile\n\u251c\u2500\u2500 bin\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 rubdo\n\u251c\u2500\u2500 lib\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 rubdo\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 cli.rb\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 item.rb\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 list.rb\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 version.rb\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 rubdo.rb\n\u251c\u2500\u2500 pkg\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 rubdo-0.0.1.gem\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 rubdo-0.0.2.gem\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 rubdo-0.0.3.gem\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 rubdo-0.1.0.gem\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 rubdo-0.1.1.gem\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 rubdo-0.1.2.gem\n\u2514\u2500\u2500 rubdo.gemspec\n\n4 directories, 17 files\n```\n\nAnd when running CtrlP I see this\n![](http://f.cl.ly/items/08331L2s3E2Y3L3i1W1n/Screen%20Shot%202012-08-19%20at%2017.32.30.png)\n\nNone of my directories `lib`, `bin`, `pkg` are in there.\nAtleast the problem was fixes, I just don't get why it even occured\n. That's just fantastic, nicely done!\n. Great, you should have a CHANGELOG file so after each update the users can see what has been changed and so on\n. ",
    "jhenderson": "You're right! After much trial and error I discovered the following line: \n\nautocmd BufEnter \\* if bufname(\"\") !~ \"^[A-Za-z0-9]*://\" | lcd %:p:h | endif\n\nMy vimrc is based off https://github.com/spf13/spf13-vim, so I didn't notice it until now.\n\nThanks for for pointing me in the right direction.\n\nExcellent plugin btw. :)\n\nAll the best.\n. You're right! After much trial and error I discovered the following line: \n\nautocmd BufEnter \\* if bufname(\"\") !~ \"^[A-Za-z0-9]*://\" | lcd %:p:h | endif\n\nMy vimrc is based off https://github.com/spf13/spf13-vim, so I didn't notice it until now.\n\nThanks for for pointing me in the right direction.\n\nExcellent plugin btw. :)\n\nAll the best.\n. ",
    "mig-hub": "When I say, I have to restart Vim... well not really.\nI can do:\n\n  :CtrlP .\n\nBut obviously I like to use <C-p> to trigger it and stay in my working directory   :-)\n\nAlso it may not be a bug, but the consequence of an expected behaviour i did not get.\n\nCheers,\nmig\n. OK I will read about this.\nThank you for your quick answer.\n\nHave a nice day,\nmig\n. When I say, I have to restart Vim... well not really.\nI can do:\n\n  :CtrlP .\n\nBut obviously I like to use <C-p> to trigger it and stay in my working directory   :-)\n\nAlso it may not be a bug, but the consequence of an expected behaviour i did not get.\n\nCheers,\nmig\n. OK I will read about this.\nThank you for your quick answer.\n\nHave a nice day,\nmig\n. ",
    "AllisonV": "echo automatically appends a new line (\\n) unless you do echo -n, so the expected behavior is correct (unless I misunderstood).  I am aware of the other way of doing things, but for some reason I can't get used to it.I even tried\necho -n \";let g:ctrlp_default_input= '$'\\n;CtrlPMixed\"\nBut couldn't get used to that either.\n\nI wouldn't mind trying to figure this out myself just need somewhere to start.\n\nAh well I'll try posting on the urxvt page and see if I have any luck there.\n. If the CR character is not interpreted in the same way as \\n by vim -s. then I'm not sure why the other commands worked but I believe you. These commands will open vim with the help menu open for example:\necho \":help\" > /tmp/ctrlp\nvim -s /tmp/ctrlp\n\nAll I want to do is open vim with the CtrlP prompt open, is this possible?\necho -n \"CtrlPMixed\" > /tmp/ctrlp; vim -S /tmp/ctrlp;\nDoesn't work either (I tried -S in the past too)\n. Both the vim -S method and vim -c \"CtrlPMixed\" bring up the ctrlp menu  for less than a second (It shows Mixing...), then it closes.\n. Ok thanks, I appreciate the time you spent trying to help :)! The vim -S and vim -c fail in multiple environments so it's not just mine.\n. Wait does CtrlPMixed work with -S or -s on your environment? If so I will explore problems with my environment.\n. Okay thanks a lot I'll look into this, that's super helpful!\n. Same reasoning as behind CtrlPMixed, it would help ctrlp be a universal file-opening tool for vim. Just like when CtrlPMixed was introduced you no longer had to think \"Do I want to use CtrlPDir or CtrlPMRU?\" now if you want to open ANY file you no longer have to think \"Is the file in my current directory or not?\" (Do I use CtrlP or :e).\n. echo automatically appends a new line (\\n) unless you do echo -n, so the expected behavior is correct (unless I misunderstood).  I am aware of the other way of doing things, but for some reason I can't get used to it.I even tried\necho -n \";let g:ctrlp_default_input= '$'\\n;CtrlPMixed\"\nBut couldn't get used to that either.\n\nI wouldn't mind trying to figure this out myself just need somewhere to start.\n\nAh well I'll try posting on the urxvt page and see if I have any luck there.\n. If the CR character is not interpreted in the same way as \\n by vim -s. then I'm not sure why the other commands worked but I believe you. These commands will open vim with the help menu open for example:\necho \":help\" > /tmp/ctrlp\nvim -s /tmp/ctrlp\n\nAll I want to do is open vim with the CtrlP prompt open, is this possible?\necho -n \"CtrlPMixed\" > /tmp/ctrlp; vim -S /tmp/ctrlp;\nDoesn't work either (I tried -S in the past too)\n. Both the vim -S method and vim -c \"CtrlPMixed\" bring up the ctrlp menu  for less than a second (It shows Mixing...), then it closes.\n. Ok thanks, I appreciate the time you spent trying to help :)! The vim -S and vim -c fail in multiple environments so it's not just mine.\n. Wait does CtrlPMixed work with -S or -s on your environment? If so I will explore problems with my environment.\n. Okay thanks a lot I'll look into this, that's super helpful!\n. Same reasoning as behind CtrlPMixed, it would help ctrlp be a universal file-opening tool for vim. Just like when CtrlPMixed was introduced you no longer had to think \"Do I want to use CtrlPDir or CtrlPMRU?\" now if you want to open ANY file you no longer have to think \"Is the file in my current directory or not?\" (Do I use CtrlP or :e).\n. ",
    "mikem": "Of course, the root marker. Makes perfect sense. Thanks for clarifying.\n. Of course, the root marker. Makes perfect sense. Thanks for clarifying.\n. ",
    "egarrulo": "On 01/09/12 21:59, kien wrote:\n\n> I'm not sure myself. The original screenshot was taken sometime last\n> year. But it was likely one of the Proggy fonts or the ProFont at a\n> larger size. If not, then I might have uninstalled it at some point.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/kien/ctrlp.vim/issues/267#issuecomment-8216483.\n\nIt is neither.  It was a nice font.  What a pity that you forgot about it...\n\nThank you anyway.\n. On 01/09/12 22:30, kien wrote:\n\n> It was definitely a pixel font, though. I was trying a lot of pixel and\n> bitmap fonts at the time. I think I stopped using this one because of\n> the small line space which made reading difficult.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/kien/ctrlp.vim/issues/267#issuecomment-8216750.\n\nYes, I use bitmap fonts exclusively, that's why I noticed ;-)\n\nHowever, I'm trying Proggy Opti now, and it comes close.\n\nDid you switch to aliased fonts afterwards?  I've noticed that with\nbitmap fonts whose lines are one-pixel wide, a bright color theme like\nVibrant Ink improves readability.\n\nCheers.\n. On 01/09/12 21:59, kien wrote:\n\n> I'm not sure myself. The original screenshot was taken sometime last\n> year. But it was likely one of the Proggy fonts or the ProFont at a\n> larger size. If not, then I might have uninstalled it at some point.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/kien/ctrlp.vim/issues/267#issuecomment-8216483.\n\nIt is neither.  It was a nice font.  What a pity that you forgot about it...\n\nThank you anyway.\n. On 01/09/12 22:30, kien wrote:\n\n> It was definitely a pixel font, though. I was trying a lot of pixel and\n> bitmap fonts at the time. I think I stopped using this one because of\n> the small line space which made reading difficult.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/kien/ctrlp.vim/issues/267#issuecomment-8216750.\n\nYes, I use bitmap fonts exclusively, that's why I noticed ;-)\n\nHowever, I'm trying Proggy Opti now, and it comes close.\n\nDid you switch to aliased fonts afterwards?  I've noticed that with\nbitmap fonts whose lines are one-pixel wide, a bright color theme like\nVibrant Ink improves readability.\n\nCheers.\n. ",
    "jordwalke": "This is really awesome. Thanks!\n. This is the best! Is there any way you can point me to the logic that \"jumps to existing window\"? I think that should be made into a reusable mini-plugin. So many other vim plugins lack this capability and if you've already written the mundane logic, may as well save others the trouble, right?\n. I believe the ideal solution would be that, when docked to either the top _or_ the bottom, the search results change height, but they never upset your buffer lines. For the bottom docking, it already works correctly. For the top docking, a results pane of height 10 would need to be shown by adjusting the buffer lines by -10, to give the appearance that the results are \"overlayed\" in a layer on top of the buffer. Does anyone know how to make this work?\n. Are you sure about this? Is there any way to hack around it?\n. I too am running into this issue. I know that ctrlp allows hooks for \"exit\", but that occurs too early. I need the `BufLeave` command.\n. Thanks! I fixed the issue with your suggestion.\n. Any thoughts here?\n. I believe that using ctrlp docked to the \"bottom\" works fine, but not when using it aligned to top.\n(Edit: actually, I see the problem even when aligned to bottom (depending on where you've scrolled in the file)).\n. This is really awesome. Thanks!\n. This is the best! Is there any way you can point me to the logic that \"jumps to existing window\"? I think that should be made into a reusable mini-plugin. So many other vim plugins lack this capability and if you've already written the mundane logic, may as well save others the trouble, right?\n. I believe the ideal solution would be that, when docked to either the top _or_ the bottom, the search results change height, but they never upset your buffer lines. For the bottom docking, it already works correctly. For the top docking, a results pane of height 10 would need to be shown by adjusting the buffer lines by -10, to give the appearance that the results are \"overlayed\" in a layer on top of the buffer. Does anyone know how to make this work?\n. Are you sure about this? Is there any way to hack around it?\n. I too am running into this issue. I know that ctrlp allows hooks for \"exit\", but that occurs too early. I need the `BufLeave` command.\n. Thanks! I fixed the issue with your suggestion.\n. Any thoughts here?\n. I believe that using ctrlp docked to the \"bottom\" works fine, but not when using it aligned to top.\n(Edit: actually, I see the problem even when aligned to bottom (depending on where you've scrolled in the file)).\n. ",
    "philips": "Sent a PR with a readme.md update.\n. @tmcw It turns out it isn't faster. I can't figure out how to have mdfind actually list all files in a directory without filtering on metadata. And when you filter on metadata it is slower than find :-/\n\n```\nmdfind -onlyin `pwd` \"kMDItemContentType = '*'\" \n```\n. Sent a PR with a readme.md update.\n. @tmcw It turns out it isn't faster. I can't figure out how to have mdfind actually list all files in a directory without filtering on metadata. And when you filter on metadata it is slower than find :-/\n\n```\nmdfind -onlyin `pwd` \"kMDItemContentType = '*'\" \n```\n. ",
    "tmcw": "@philips love this idea, it's a big speed boost for OSX users. a great protip to document, thx.\n. Sorry, I might just be being dim: this replaces the existing ctrlp_match_func, right? I'm looking to add another mode that searches in files, while maintaining the same behavior for ctrlp w/ directories & filenames.\n. Okay - no problem. Thanks for the excellent plugin!\n. @philips love this idea, it's a big speed boost for OSX users. a great protip to document, thx.\n. Sorry, I might just be being dim: this replaces the existing ctrlp_match_func, right? I'm looking to add another mode that searches in files, while maintaining the same behavior for ctrlp w/ directories & filenames.\n. Okay - no problem. Thanks for the excellent plugin!\n. ",
    "asmod3us": "Have you tried kind:file like this?\n\n```\nmdfind kind:file -onlyin .\n```\n. Have you tried kind:file like this?\n\n```\nmdfind kind:file -onlyin .\n```\n. ",
    "majutsushi": "Great, thanks! I technically works, but I'm getting this error when jumping to certain tags:\n\n```\nError detected while processing function <SNR>158_AcceptSelection..ctrlp#buffertag#accept:\nline    8:\nE61: Nested *\nline   10:\nE61: Nested *\nE61: Nested *\nE61: Nested *\nE61: Nested *\nE61: Nested *\nE61: Nested *\nE61: Nested *\nE61: Nested *\nE61: Nested *\nE61: Nested *\nE61: Nested *\nE61: Nested *\nE61: Nested *\nE61: Nested *\nE61: Nested *\nE61: Nested *\nE61: Nested *\nE61: Nested *\nE61: Nested *\nE61: Nested *\nE61: Nested *\nE61: Nested *\n```\n\nI think it's because there are `*`s on the line of the tags (it's a C++ file):\n\n```\nnsThreadClassInfo::GetContractID(char **result)\n```\n\nIt works fine on lines without the asterisks. So I guess the regexp should be created in 'very nomagic' mode to prevent special characters from interfering.\n. Seems to work fine now, thanks!\n. Great, thanks! I technically works, but I'm getting this error when jumping to certain tags:\n\n```\nError detected while processing function <SNR>158_AcceptSelection..ctrlp#buffertag#accept:\nline    8:\nE61: Nested *\nline   10:\nE61: Nested *\nE61: Nested *\nE61: Nested *\nE61: Nested *\nE61: Nested *\nE61: Nested *\nE61: Nested *\nE61: Nested *\nE61: Nested *\nE61: Nested *\nE61: Nested *\nE61: Nested *\nE61: Nested *\nE61: Nested *\nE61: Nested *\nE61: Nested *\nE61: Nested *\nE61: Nested *\nE61: Nested *\nE61: Nested *\nE61: Nested *\nE61: Nested *\n```\n\nI think it's because there are `*`s on the line of the tags (it's a C++ file):\n\n```\nnsThreadClassInfo::GetContractID(char **result)\n```\n\nIt works fine on lines without the asterisks. So I guess the regexp should be created in 'very nomagic' mode to prevent special characters from interfering.\n. Seems to work fine now, thanks!\n. ",
    "tpope": "Well that was my attempt at a concise explanation, so I guess I'll have to go for a verbose one. Bear with me.\n\nI'll start my saying that some time ago, before I knew about ctrlp.vim, I mapped `<C-n>` and `<C-p>` in the `:Gstatus` window to mean \"next file\" and \"previous file\". I later became aware of the conflict, but it didn't seem like that big of deal, because `:Gstatus` is a preview window and who needs a fuzzy finder in a preview window?\n\nBut it's also possible to open that status in a regular window with `:Gedit :` (or even `:edit .git/index`). Right now, I'm probably the only one to do that, but it's such a handy springboard, I'm debating ways to make it far more prominent. For example, remapping `<C-W><C-N>` to open that window rather than a blank one. Nobody really wants a blank window, right? Except now I've blocked people from doing `<C-W><C-N><C-P>` to start finding in a new window.\n\nEasy solution: make my `<C-p>` map invoke `:CtrlP` on the first line (and consider deprecating it long term). This works, but it misses the submodule case, plus things like `.gitignore` aren't respected (although I suppose you could argue that's a feature). I could ask ctrlp to be smarter about that (and you are more than welcome to pursue that route instead), but since I'm maintaining a Git plugin, why not let the Git plugin be responsible for that?\n\nBeyond this, I can see some more advanced use cases, such as making it work when editing history (`:Gedit HEAD~3:README`) or giving higher precedence to dirty files. Both of those require a bit more control over how ctrlp seeds its file list.\n. I actually didn't realize `:CtrlP` took a path. (As I recall, the last time I looked it took an integer, but who knows how long ago that was.) Neat. I'll go ahead and hook that up.\n\nThe `b:ctrlp_user_command` does seem like it would address my other concern, but after thinking about it I'm on the fence about whether it's worth the trouble for fugitive to monkey with it. I would like to have it if it's easy to implement. I would consider it more than sufficient for resolving this issue.\n\nBummer I failed to convey my grand vision, but that might have something to with it not being fleshed out. Or grand. I may be back (with new requests) once I figure out what the hell I'm doing.\n. I guess I just felt tweaking the `<C-p>` map in a buffer was less invasive than tweaking, `b:ctrlp_user_command`, because the map wouldn't affect the user's use of `:CtrlP` etc. For example, if I set `b:ctrlp_user_command` to use `git ls-files`, and the use does `:CtrlP /path/to/mecurial/repo`, are they going to hate me? I have no idea.\n\n`:Gedit :` opens a buffer containing the output of `git status`. It's got all sorts of maps for staging and diffing and committing, but that's stuff that I (like you) mostly use the command line for. What I do use it for frequently is jumping to changed files, as I can often navigate to where I want I want faster than my fingers can even remember the name of the file.\n\n`:Gedit`'s more general purpose is to edit commits and blobs and whatnot (`:Gedit master~7:README`.) It would be pretty cool to provide a ctrlp interface to that, but that would require some monumental changes to ctrlp.vim.\n. Only in VimL does that pass for anything other than an antipattern. :) But yeah, it's good enough for what I'm doing. A buffer local variable would still be nice.\n. Wonderful! I'll give it a spin this weekend.\n\nOn Fri, Sep 14, 2012 at 10:41 PM, kien notifications@github.com wrote:\n\n> So I decided to bite the bullet and add support for overriding some\n> options when calling ctrlp. Here's what the function call should look like:\n> \n> call ctrlp#init(0, { 'dir': '...', 'opts': { 'user_command': ['.git', '...'] } })\n> \n> If you find any problem with these changes, let me know. Thanks!\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/kien/ctrlp.vim/issues/273#issuecomment-8581188.\n. Well that was my attempt at a concise explanation, so I guess I'll have to go for a verbose one. Bear with me.\n\nI'll start my saying that some time ago, before I knew about ctrlp.vim, I mapped `<C-n>` and `<C-p>` in the `:Gstatus` window to mean \"next file\" and \"previous file\". I later became aware of the conflict, but it didn't seem like that big of deal, because `:Gstatus` is a preview window and who needs a fuzzy finder in a preview window?\n\nBut it's also possible to open that status in a regular window with `:Gedit :` (or even `:edit .git/index`). Right now, I'm probably the only one to do that, but it's such a handy springboard, I'm debating ways to make it far more prominent. For example, remapping `<C-W><C-N>` to open that window rather than a blank one. Nobody really wants a blank window, right? Except now I've blocked people from doing `<C-W><C-N><C-P>` to start finding in a new window.\n\nEasy solution: make my `<C-p>` map invoke `:CtrlP` on the first line (and consider deprecating it long term). This works, but it misses the submodule case, plus things like `.gitignore` aren't respected (although I suppose you could argue that's a feature). I could ask ctrlp to be smarter about that (and you are more than welcome to pursue that route instead), but since I'm maintaining a Git plugin, why not let the Git plugin be responsible for that?\n\nBeyond this, I can see some more advanced use cases, such as making it work when editing history (`:Gedit HEAD~3:README`) or giving higher precedence to dirty files. Both of those require a bit more control over how ctrlp seeds its file list.\n. I actually didn't realize `:CtrlP` took a path. (As I recall, the last time I looked it took an integer, but who knows how long ago that was.) Neat. I'll go ahead and hook that up.\n\nThe `b:ctrlp_user_command` does seem like it would address my other concern, but after thinking about it I'm on the fence about whether it's worth the trouble for fugitive to monkey with it. I would like to have it if it's easy to implement. I would consider it more than sufficient for resolving this issue.\n\nBummer I failed to convey my grand vision, but that might have something to with it not being fleshed out. Or grand. I may be back (with new requests) once I figure out what the hell I'm doing.\n. I guess I just felt tweaking the `<C-p>` map in a buffer was less invasive than tweaking, `b:ctrlp_user_command`, because the map wouldn't affect the user's use of `:CtrlP` etc. For example, if I set `b:ctrlp_user_command` to use `git ls-files`, and the use does `:CtrlP /path/to/mecurial/repo`, are they going to hate me? I have no idea.\n\n`:Gedit :` opens a buffer containing the output of `git status`. It's got all sorts of maps for staging and diffing and committing, but that's stuff that I (like you) mostly use the command line for. What I do use it for frequently is jumping to changed files, as I can often navigate to where I want I want faster than my fingers can even remember the name of the file.\n\n`:Gedit`'s more general purpose is to edit commits and blobs and whatnot (`:Gedit master~7:README`.) It would be pretty cool to provide a ctrlp interface to that, but that would require some monumental changes to ctrlp.vim.\n. Only in VimL does that pass for anything other than an antipattern. :) But yeah, it's good enough for what I'm doing. A buffer local variable would still be nice.\n. Wonderful! I'll give it a spin this weekend.\n\nOn Fri, Sep 14, 2012 at 10:41 PM, kien notifications@github.com wrote:\n\n> So I decided to bite the bullet and add support for overriding some\n> options when calling ctrlp. Here's what the function call should look like:\n> \n> call ctrlp#init(0, { 'dir': '...', 'opts': { 'user_command': ['.git', '...'] } })\n> \n> If you find any problem with these changes, let me know. Thanks!\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/kien/ctrlp.vim/issues/273#issuecomment-8581188.\n. ",
    "amadeus": "Dude, @kien, that works awesomely. Thanks so much!\n\n@d11wtq If you get something worked out, let me know!\n. @kien the script you provided has been working great, however I have found one issue with it. If I attempt to delete default blank buffers, it seems to trip up.\n\nThe first buffer showing here: [123*No Name] as show here:\n\n![example1](https://f.cloud.github.com/assets/83376/904584/8ddb799e-fbcb-11e2-9d65-e2638604464b.png)\n\nIf I attempt to delete it using the `<c-@>` hotkey, I get the following error:\n\n![screen shot 2013-08-02 at 4 29 01 pm](https://f.cloud.github.com/assets/83376/904587/b1671c7e-fbcb-11e2-88ed-77d8062d2a32.png)\n\nI am not too hot with Vim script, but if you know a quick and easy fix for this, that would be awesome. I can select the buffer itself and manually :bd it no problem, so not sure what the problem is from the snippet's perspective.\n. Thanks, I'll check it out.\n. Sorry about that, the images should work now.\n. So I conducted a bit more testing and found some interesting results.\n\nFor reference, I use NeoBundle as a package manager, but I highly doubt this plays any roll in this (since I also used to have this problem when using Vundle).\n\nI disabled all plugins, except for CtrlP and NeoBundle (the 2 minimum requirements to use CtrlP for me without having to really reconfigure folders and stuff.\n\nI also had my entire vimrc settings disabled, so basically a bone stock MacVim with NeoBundle and CtrlP only, with just their default settings. Everything that I described above in my initial posts with the screenshots happens as I described it (with a different theme of course, since it's the basic default light theme).\n\nHowever, I was able to fix the problem by actually setting your CtrlPLinePre hi group in my color theme as per your example above.\n\nSo I guess in summary: The problem doesn't exist if you set the colors yourself, but it does if you don't.\n. Dude, @kien, that works awesomely. Thanks so much!\n\n@d11wtq If you get something worked out, let me know!\n. @kien the script you provided has been working great, however I have found one issue with it. If I attempt to delete default blank buffers, it seems to trip up.\n\nThe first buffer showing here: [123*No Name] as show here:\n\n![example1](https://f.cloud.github.com/assets/83376/904584/8ddb799e-fbcb-11e2-9d65-e2638604464b.png)\n\nIf I attempt to delete it using the `<c-@>` hotkey, I get the following error:\n\n![screen shot 2013-08-02 at 4 29 01 pm](https://f.cloud.github.com/assets/83376/904587/b1671c7e-fbcb-11e2-88ed-77d8062d2a32.png)\n\nI am not too hot with Vim script, but if you know a quick and easy fix for this, that would be awesome. I can select the buffer itself and manually :bd it no problem, so not sure what the problem is from the snippet's perspective.\n. Thanks, I'll check it out.\n. Sorry about that, the images should work now.\n. So I conducted a bit more testing and found some interesting results.\n\nFor reference, I use NeoBundle as a package manager, but I highly doubt this plays any roll in this (since I also used to have this problem when using Vundle).\n\nI disabled all plugins, except for CtrlP and NeoBundle (the 2 minimum requirements to use CtrlP for me without having to really reconfigure folders and stuff.\n\nI also had my entire vimrc settings disabled, so basically a bone stock MacVim with NeoBundle and CtrlP only, with just their default settings. Everything that I described above in my initial posts with the screenshots happens as I described it (with a different theme of course, since it's the basic default light theme).\n\nHowever, I was able to fix the problem by actually setting your CtrlPLinePre hi group in my color theme as per your example above.\n\nSo I guess in summary: The problem doesn't exist if you set the colors yourself, but it does if you don't.\n. ",
    "Tinche": "I'm going to respectfully disagree; so what if it's non essential? It sounds like a very useful feature to me: it fits naturally within the use case and looks like it'd be very easy to add.\n\nI realize the author is probably worried about bloat but making your users extend your addon through their .vimrc for simple things like this doesn't sound like a good design trade off to me.\n. I'm going to respectfully disagree; so what if it's non essential? It sounds like a very useful feature to me: it fits naturally within the use case and looks like it'd be very easy to add.\n\nI realize the author is probably worried about bloat but making your users extend your addon through their .vimrc for simple things like this doesn't sound like a good design trade off to me.\n. ",
    "wting": "I'm also interested in this feature. CtrlP has replaced BufExplorer for switching between buffers. The only reason I keep BufExplorer is to wipe buffers. I imagine I'm not alone in this common use case.\n\nIt would be awesome if I could run `:CtrlPBuffer`, select a bunch of buffers and with `<c-z>` and then delete/wipe with `<c-d>` or `<c-w>`.\n. The source of my lag was because I had `lazy_update = 1` set for some reason so I'll go ahead and close this issue.\n\nHowever I deleted the ctrlp cache directory, opened vim and recreated the cache. While ignored file types were not matched in vim, I was able to grep for them in the cache file.\n\nFor reference, here are my [ctrlp settings](https://github.com/wting/dotvim/blob/master/.vimrc#L613).\n. Oh never mind, build still comes up in search. I should have verified that beforehand, sorry.\n\nAdded that line, blew away ctrlp directory, restarted vim. Still comes up:\n![build](https://f.cloud.github.com/assets/622170/975661/dc719d6a-067d-11e3-84ab-0ed7203c791e.png)\n\nThis is a potential rabbit hole and ctrlp works fine as is since `lazy_update` was the actual problem. Thanks again for an awesome plugin!\n. I'm also interested in this feature. CtrlP has replaced BufExplorer for switching between buffers. The only reason I keep BufExplorer is to wipe buffers. I imagine I'm not alone in this common use case.\n\nIt would be awesome if I could run `:CtrlPBuffer`, select a bunch of buffers and with `<c-z>` and then delete/wipe with `<c-d>` or `<c-w>`.\n. The source of my lag was because I had `lazy_update = 1` set for some reason so I'll go ahead and close this issue.\n\nHowever I deleted the ctrlp cache directory, opened vim and recreated the cache. While ignored file types were not matched in vim, I was able to grep for them in the cache file.\n\nFor reference, here are my [ctrlp settings](https://github.com/wting/dotvim/blob/master/.vimrc#L613).\n. Oh never mind, build still comes up in search. I should have verified that beforehand, sorry.\n\nAdded that line, blew away ctrlp directory, restarted vim. Still comes up:\n![build](https://f.cloud.github.com/assets/622170/975661/dc719d6a-067d-11e3-84ab-0ed7203c791e.png)\n\nThis is a potential rabbit hole and ctrlp works fine as is since `lazy_update` was the actual problem. Thanks again for an awesome plugin!\n. ",
    "saamalik": "@wting that's exactly what I was thinking, `<c-z>` to select buffers, and then delete/wipe using some fancy keyboard shortcut. \n\n@kien soo how can we entice you to reconsider? =)\n. @rgrinberg Have you tried setting the `'incsearch'` option? Try `/pattern` with this option. The buffer will scroll to the appropriate match, and when you're done committing the line to your brain-memory, just hit `ESC` and you'll be back to where you started from. This trick even works with `i_Ctrl-O` =)\n. Possible to add this as an option?\nFor performance could this be implemented using a hash? Simple buffer names are added to hash, on a new buffer the hash key is checked if a buffer with same key already exists, in which case it'll process the addition a little differently. However, in the 95% case buffer names will unique. \n. @kien that's fine. i'll go ahead and close this request.\n. Oh man. That's intense!\n\nThank you, but I totally see the added complexity. I'll have a go at it in a couple days too--but more than likely I'll be happy with full paths in the buffer list =)\n. @wting that's exactly what I was thinking, `<c-z>` to select buffers, and then delete/wipe using some fancy keyboard shortcut. \n\n@kien soo how can we entice you to reconsider? =)\n. @rgrinberg Have you tried setting the `'incsearch'` option? Try `/pattern` with this option. The buffer will scroll to the appropriate match, and when you're done committing the line to your brain-memory, just hit `ESC` and you'll be back to where you started from. This trick even works with `i_Ctrl-O` =)\n. Possible to add this as an option?\nFor performance could this be implemented using a hash? Simple buffer names are added to hash, on a new buffer the hash key is checked if a buffer with same key already exists, in which case it'll process the addition a little differently. However, in the 95% case buffer names will unique. \n. @kien that's fine. i'll go ahead and close this request.\n. Oh man. That's intense!\n\nThank you, but I totally see the added complexity. I'll have a go at it in a couple days too--but more than likely I'll be happy with full paths in the buffer list =)\n. ",
    "nicklasos": "+1\n. +1\n. ",
    "451F": ":+1: \n. :+1: \n. ",
    "martco": ":+1:\n. :+1:\n. ",
    "rradonic": "+1\n. Awesome, thanks.\n. +1\n. Awesome, thanks.\n. ",
    "gdso": "+1  - I'd also like to avoid installing yet another buffer explorer plugin for this use case. That being said, CtrlP is an awesome plugin, great work!\n. +1  - I'd also like to avoid installing yet another buffer explorer plugin for this use case. That being said, CtrlP is an awesome plugin, great work!\n. ",
    "dhiemstra": "+1\n. +1\n. ",
    "kristijanhusak": "+1\n. This should do the trick, just add to vimrc.\n\n```\nnnoremap <C-p> :CtrlPBuffer<CR>\nnnoremap <C-f> :CtrlP<CR>\n```\n. Remove those and put these, just tried it and it works:\n\n```\nlet g:ctrlp_map = '<c-f>'\nnnoremap <c-p> :CtrlPBuffer<CR>\n```\n. +1\n. This should do the trick, just add to vimrc.\n\n```\nnnoremap <C-p> :CtrlPBuffer<CR>\nnnoremap <C-f> :CtrlP<CR>\n```\n. Remove those and put these, just tried it and it works:\n\n```\nlet g:ctrlp_map = '<c-f>'\nnnoremap <c-p> :CtrlPBuffer<CR>\n```\n. ",
    "ptrin": "+1\n. @mattjmorrison It sounds like you're using the script @kien  posted in #280 , not an actual Ctrl-p feature.\n\nJust change the mapping in this function:\n\n```\nfunc! MyCtrlPMappings()\n    nnoremap <buffer> <silent> <c-@> :call <sid>DeleteBuffer()<cr>\nendfunc\n```\n. +1\n. @mattjmorrison It sounds like you're using the script @kien  posted in #280 , not an actual Ctrl-p feature.\n\nJust change the mapping in this function:\n\n```\nfunc! MyCtrlPMappings()\n    nnoremap <buffer> <silent> <c-@> :call <sid>DeleteBuffer()<cr>\nendfunc\n```\n. ",
    "lukeorland": "Excellent. The plugin works for me!\n. Excellent. The plugin works for me!\n. ",
    "oopsitmelted": "Very cool! Thanks for the plugin. Works great!\n. Very cool! Thanks for the plugin. Works great!\n. ",
    "bravoecho": "@kien \nI've added this to the bouncing-vim distro with a key combo that works also in tmux and mimics the line deletion already provided by the plugin (https://github.com/lucabelmondo/bouncing-vim/commit/4e296557288a38c128ba714bebc059a57389509e) but I would like to  +1 :grinning:  \n. @kien \nI've added this to the bouncing-vim distro with a key combo that works also in tmux and mimics the line deletion already provided by the plugin (https://github.com/lucabelmondo/bouncing-vim/commit/4e296557288a38c128ba714bebc059a57389509e) but I would like to  +1 :grinning:  \n. ",
    "ngquerol": "It seems to happen only my home directory, when commands like `<CtrlP>` or `<CtrlPDir>` are invoked.\n\nTesting CtrlP in an empty directory results in no error...\n. Yup, it's all good now. Thank you for the amazing plugin by the way !\n. It seems to happen only my home directory, when commands like `<CtrlP>` or `<CtrlPDir>` are invoked.\n\nTesting CtrlP in an empty directory results in no error...\n. Yup, it's all good now. Thank you for the amazing plugin by the way !\n. ",
    "weaksauce": "Well there were a lot of files that I omitted for the example just h would not work because it picks up many other files with an h in it. In this particular example static_h would work but it's cumbersome to type the underscore. The underscore is really the pain to type.\n\nDo you have a synopsis of the `g:ctrlp_abbrev` option? In my help file there is no mention of it.\n\nActually a pretty good solution would be to just ignore the space altogether. Is there a way to do that? \n. Well there were a lot of files that I omitted for the example just h would not work because it picks up many other files with an h in it. In this particular example static_h would work but it's cumbersome to type the underscore. The underscore is really the pain to type.\n\nDo you have a synopsis of the `g:ctrlp_abbrev` option? In my help file there is no mention of it.\n\nActually a pretty good solution would be to just ignore the space altogether. Is there a way to do that? \n. ",
    "zah": "Sorry about that, I should have used it for a while before making the pull request. \nHow about the new version? \n. Thank you, too. \nI was planning to look at the issue myself, but I was too busy the last few days.\n. Sorry about that, I should have used it for a while before making the pull request. \nHow about the new version? \n. Thank you, too. \nI was planning to look at the issue myself, but I was too busy the last few days.\n. ",
    "ajankovic": "It was `<g:ctrlp_max_files>` after all.\n\nThank you.\n. It was `<g:ctrlp_max_files>` after all.\n\nThank you.\n. ",
    "jondkinney": "Thanks @kien, I guess I overlooked that in the options before.\n\nThis seems to work great for me:\n\n```\nlet g:ctrlp_prompt_mappings = {\n  \\ 'AcceptSelection(\"h\")': ['<c-x>', '<c-cr>', '<c-s>', '<c-i>']\n  \\ }\n```\n\nAs you suggest, hitting tab does now open a horizontal split too... but is that a problem really? I don't know what else I'd need tab to do inside ctrlp? Is there some tab related feature I'll miss out on if I don't remap tab to another unique and accessible key?\n\nThanks again,\n-Jon\n. Thanks @kien, I guess I overlooked that in the options before.\n\nThis seems to work great for me:\n\n```\nlet g:ctrlp_prompt_mappings = {\n  \\ 'AcceptSelection(\"h\")': ['<c-x>', '<c-cr>', '<c-s>', '<c-i>']\n  \\ }\n```\n\nAs you suggest, hitting tab does now open a horizontal split too... but is that a problem really? I don't know what else I'd need tab to do inside ctrlp? Is there some tab related feature I'll miss out on if I don't remap tab to another unique and accessible key?\n\nThanks again,\n-Jon\n. ",
    "talha131": "@kien I have added several directories and files in the ignore rule, but I haven't noticed any substantial decrease in the time CtrlP takes to rebuild cache. \n\nThis is my [ignore rule](https://github.com/talha131/dotfiles/blob/master/vim/vimrc#L151) \n\n``` ruby\nlet g:ctrlp_custom_ignore = $HOME.'/\\(Library\\|Google Drive\\|Music\\|Movies\\|Pictures\\|Documents\\)\\|.\\(pdf\\|epub\\|mobi\\|rar\\|png\\|jpg\\|dmg\\|nib\\|bz\\|gz\\|tar\\|xib\\)$'\n```\n\nThe output of match window is cleaner, for sure. But anytime I clean and rebuild cache of my home directory, it takes almost the same time as it took before I added these ignore rules.\n\nAny suggestion on how can I increase the cache rebuild speed? \n. Thanks @kien. This is super helpful.\n. @kien I have added several directories and files in the ignore rule, but I haven't noticed any substantial decrease in the time CtrlP takes to rebuild cache. \n\nThis is my [ignore rule](https://github.com/talha131/dotfiles/blob/master/vim/vimrc#L151) \n\n``` ruby\nlet g:ctrlp_custom_ignore = $HOME.'/\\(Library\\|Google Drive\\|Music\\|Movies\\|Pictures\\|Documents\\)\\|.\\(pdf\\|epub\\|mobi\\|rar\\|png\\|jpg\\|dmg\\|nib\\|bz\\|gz\\|tar\\|xib\\)$'\n```\n\nThe output of match window is cleaner, for sure. But anytime I clean and rebuild cache of my home directory, it takes almost the same time as it took before I added these ignore rules.\n\nAny suggestion on how can I increase the cache rebuild speed? \n. Thanks @kien. This is super helpful.\n. ",
    "leandromoreira": "Actually you are right it shows the files within the current folder. How can I change this behavior? I mean it shouldn't change the current dir for search.\n. Thank you very much :cake: and sorry for the lack os skills to find this on the doc. :(\n. Actually you are right it shows the files within the current folder. How can I change this behavior? I mean it shouldn't change the current dir for search.\n. Thank you very much :cake: and sorry for the lack os skills to find this on the doc. :(\n. ",
    "positron": "You could do something like\n\n`noremap <C-P> <Esc>:CtrlP /var/www/myproject/bla/bla/theme<CR>`\n. +1\n. Hit `F5` to refresh the cache.\n\nI think the cache refreshes at a set time interval, not necessarily when you restart vim?\n. If you set `let g:ctrlp_working_path_mode = 0` it will use the directory you started vim in to search out of. So what I do is just start vim from my root directory with `vim .`, and then use ctrlp to open the file(s) I want to edit.\n. Edit: I think I misunderstood and the below isn't true because this issue is saying ctrlp doesn't use autocommands in it's match window, not the buffers its opens.\n\nI use vim-lawrencium and I think ctrlp opening buffers with noautocmd is causing problems. lawrencium has this `augroup` that detects if the buffer is in a mercurial repository or not.\n\n```\naugroup lawrencium_detect\n     autocmd!\n     autocmd BufNewFile,BufReadPost *     call s:setup_buffer_commands()\n    autocmd VimEnter               *     if expand('<amatch>')==''|call s:setup_buffer_commands()|endif\naugroup end\n```\n\nI get errors because `setup_buffer_commands` hasn't run.\n. You could do something like\n\n`noremap <C-P> <Esc>:CtrlP /var/www/myproject/bla/bla/theme<CR>`\n. +1\n. Hit `F5` to refresh the cache.\n\nI think the cache refreshes at a set time interval, not necessarily when you restart vim?\n. If you set `let g:ctrlp_working_path_mode = 0` it will use the directory you started vim in to search out of. So what I do is just start vim from my root directory with `vim .`, and then use ctrlp to open the file(s) I want to edit.\n. Edit: I think I misunderstood and the below isn't true because this issue is saying ctrlp doesn't use autocommands in it's match window, not the buffers its opens.\n\nI use vim-lawrencium and I think ctrlp opening buffers with noautocmd is causing problems. lawrencium has this `augroup` that detects if the buffer is in a mercurial repository or not.\n\n```\naugroup lawrencium_detect\n     autocmd!\n     autocmd BufNewFile,BufReadPost *     call s:setup_buffer_commands()\n    autocmd VimEnter               *     if expand('<amatch>')==''|call s:setup_buffer_commands()|endif\naugroup end\n```\n\nI get errors because `setup_buffer_commands` hasn't run.\n. ",
    "mcnelson": "You're awesome. The problem was \"let g:NERDTreeWinSize = 40\". I had that in to solve a separate bug where NERDtree would open at an incorrect width (half-screen width) rather than 30 columns wide.\n. You're awesome. The problem was \"let g:NERDTreeWinSize = 40\". I had that in to solve a separate bug where NERDtree would open at an incorrect width (half-screen width) rather than 30 columns wide.\n. ",
    "mikeage": "Ah, great! Given this functionality, I definitely don't think it's worth adding a new option. Thanks.\n. Ah, great! Given this functionality, I definitely don't think it's worth adding a new option. Thanks.\n. ",
    "jdelStrother": "I take it you'd be opposed to including a non-vimscript script with CtrlP then?  (Is there a standard way of doing this with vim plugins?)\n. I take it you'd be opposed to including a non-vimscript script with CtrlP then?  (Is there a standard way of doing this with vim plugins?)\n. ",
    "aaronjensen": "for posterity, this works great: https://github.com/JazzCore/ctrlp-cmatcher\n. I implemented this for ctrlp-cmatcher: https://github.com/JazzCore/ctrlp-cmatcher/pull/8/files\n\nLet me know if it looks good @kien and I can pull request it here too.\n\n![wemux 1 tch - vim 2013-10-08 20-40-56](https://f.cloud.github.com/assets/8588/1294858/9a682f2e-3094-11e3-9338-31dfbce595d5.jpg)\n. @kien should I be able to use `echom` to print messages for debugging from ctrlp? They don't seem to end up in `:messages`. Is there some other trick to log what's going on?\n. thanks, that was helpful. one other question, do you want me to follow the style of shortening every keyword to its shortest possible? personally I find it incredibly hard to read, but I don't want to break existing style...\n. @alexandnpu you can follow along in the pull request: https://github.com/kien/ctrlp.vim/pull/488 \n\nI have to clean it up some and kien is going to take a look.\n. I'm not sure I understand your suggestion... I'd have to put the local .vimrc in every folder underneath my home directory. I choose to have ctrlp respect my current working directory and not hunt for one because I have other ways of managing my working directory. `ctrlp_user_command` ignores my working directory and hunts parent directories regardless of what I tell ctrlp or vim to do. I don't think putting a local .vimrc in every folder will work. I could maybe autocmd to look for being in a directory that doesn't have a `.git` and clear `ctrlp_user_command` but that seems like a surprising thing to need to do. Am I missing something here?\n\nExample just to make sure we're on the same page:\n\n```\n~\n+ .git\n+ foo\n    - bar\n```\n\nIf I `cd ~ && vim` then ctrlp I expect it to respect .git's user command\nIf I `cd ~/foo && vim` then ctrlp I expec it to respect the fallback/default \n\nI may be biased because I think `:cd` within a project is generally an anti-pattern (hence my usage of path_mode 0)\n. The directory with the .git dir is my home directory, so it'd be in my `.vimrc` proper. I'm not quite sure how I'll manage this but I may just take my home directory out of git, it was a hack any way.\n\nI guess I was thinking of it in the wrong way. I was thinking of it as, use this custom listing command when I'm in a directory that has this folder in it, whereas the use case you are envisioning is I would be in a project dir, `:cd` to a subfolder, then ctrlp and still want to use the `.git` user command but only see the subset of folders. That makes sense, it's just not how I'm used to working, hence the confusion.\n. First method https://github.com/aaronjensen/ctrlp.vim/commit/b5f826172498f5535561d44618fa31f608cc0852:\n![wemux 4 vim - vim 2013-10-10 23-53-26](https://f.cloud.github.com/assets/8588/1312687/d509d480-3241-11e3-8cd1-ec261c7e5a1d.jpg)\n\nSecond method https://github.com/aaronjensen/ctrlp.vim/commit/3559e2ba200cb96d1c00f6f5b0375f7569646efe:\n![wemux 4 vim - vim 2013-10-10 23-52-14](https://f.cloud.github.com/assets/8588/1312681/a9d782da-3241-11e3-8f6c-c2ab5ca22b61.jpg)\n. I wouldn't call it a work in progress anymore unless there is anything you'd like me to change. It seems to work. I'm using a similar thing w/ https://github.com/JazzCore/ctrlp-cmatcher and it's working great.\n. for posterity, this works great: https://github.com/JazzCore/ctrlp-cmatcher\n. I implemented this for ctrlp-cmatcher: https://github.com/JazzCore/ctrlp-cmatcher/pull/8/files\n\nLet me know if it looks good @kien and I can pull request it here too.\n\n![wemux 1 tch - vim 2013-10-08 20-40-56](https://f.cloud.github.com/assets/8588/1294858/9a682f2e-3094-11e3-9338-31dfbce595d5.jpg)\n. @kien should I be able to use `echom` to print messages for debugging from ctrlp? They don't seem to end up in `:messages`. Is there some other trick to log what's going on?\n. thanks, that was helpful. one other question, do you want me to follow the style of shortening every keyword to its shortest possible? personally I find it incredibly hard to read, but I don't want to break existing style...\n. @alexandnpu you can follow along in the pull request: https://github.com/kien/ctrlp.vim/pull/488 \n\nI have to clean it up some and kien is going to take a look.\n. I'm not sure I understand your suggestion... I'd have to put the local .vimrc in every folder underneath my home directory. I choose to have ctrlp respect my current working directory and not hunt for one because I have other ways of managing my working directory. `ctrlp_user_command` ignores my working directory and hunts parent directories regardless of what I tell ctrlp or vim to do. I don't think putting a local .vimrc in every folder will work. I could maybe autocmd to look for being in a directory that doesn't have a `.git` and clear `ctrlp_user_command` but that seems like a surprising thing to need to do. Am I missing something here?\n\nExample just to make sure we're on the same page:\n\n```\n~\n+ .git\n+ foo\n    - bar\n```\n\nIf I `cd ~ && vim` then ctrlp I expect it to respect .git's user command\nIf I `cd ~/foo && vim` then ctrlp I expec it to respect the fallback/default \n\nI may be biased because I think `:cd` within a project is generally an anti-pattern (hence my usage of path_mode 0)\n. The directory with the .git dir is my home directory, so it'd be in my `.vimrc` proper. I'm not quite sure how I'll manage this but I may just take my home directory out of git, it was a hack any way.\n\nI guess I was thinking of it in the wrong way. I was thinking of it as, use this custom listing command when I'm in a directory that has this folder in it, whereas the use case you are envisioning is I would be in a project dir, `:cd` to a subfolder, then ctrlp and still want to use the `.git` user command but only see the subset of folders. That makes sense, it's just not how I'm used to working, hence the confusion.\n. First method https://github.com/aaronjensen/ctrlp.vim/commit/b5f826172498f5535561d44618fa31f608cc0852:\n![wemux 4 vim - vim 2013-10-10 23-53-26](https://f.cloud.github.com/assets/8588/1312687/d509d480-3241-11e3-8cd1-ec261c7e5a1d.jpg)\n\nSecond method https://github.com/aaronjensen/ctrlp.vim/commit/3559e2ba200cb96d1c00f6f5b0375f7569646efe:\n![wemux 4 vim - vim 2013-10-10 23-52-14](https://f.cloud.github.com/assets/8588/1312681/a9d782da-3241-11e3-8f6c-c2ab5ca22b61.jpg)\n. I wouldn't call it a work in progress anymore unless there is anything you'd like me to change. It seems to work. I'm using a similar thing w/ https://github.com/JazzCore/ctrlp-cmatcher and it's working great.\n. ",
    "aflatt": "Upon more investigation I've discovered this is actually a bug in the taglist plugin. Also what I originally said was not quite true:\n\" as it does when opening a file using :Ex or opening a file from the command line\"\n\nWhen opening a file using Ex the taglist plugin also doesn't work.\n\nFor anyone curious, I've found a fix for the taglist plugin that seems to fix the problem:\n\nIn the s:Tlist_Window_Check_Auto_Open function add:\n\n```\n        let ft = s:Tlist_Get_Buffer_Filetype(buf_num)\n        if ft == 'taglist'                 \"  <---- line added\n           return                           \"  <---- line added\n       endif                                 \"  <---- line added\n       if !s:Tlist_Skip_File(filename, ft)\n```\n\nand then change the line:\n\n```\n    autocmd VimEnter * nested call s:Tlist_Window_Check_Auto_Open()\n```\n\nto\n\n```\n    autocmd BufReadPost * nested call s:Tlist_Window_Check_Auto_Open()\n```\n\nIn summary this isn't a bug in ctrlp, it's a bug in taglist - I'll try to submit my bugfix to the taglist plugin when I have a chance.\n. kien, yep, you're absolutely correct.\n\nAs you point out, I've been miss-understanding the intended behavior of the `Tlist_Auto_Open` option. Your suggestion that the `Tlist_Auto_Open` option only opens the taglist window when first starting Vim, is correct. After I re-read the taglist help documentation more thoroughly, I agree that this option is working as intended.\n\nThis is definitely off on a tangent from the ctrlp plugin (hopefully it'll be useful to someone else), but I still believe that the behavior of the `Tlist_Auto_Open` option as implemented in the taglist plugin, is poorly designed - although to be clear it is working as intended. \n\nI think the a better implementation would be for the `Tlist_Auto_Open` option to automatically show the taglist whenever a file is opened, regardless of how it was opened. I could go into more detail about why I think the current behavior is poorly designed, but since I'm already way off on a tangent from anything related to ctrlp, I'll stop now :-)\n\nFor the sake of anyone that arrives here while searching for a resolution to the 'problem' as I describe it: I think the change I outlined in my comment above will modify the behavior of the taglist plugin to show the taglist whenever a supported filetype is opened, regardless of how it was opened.\n\nkien, thanks again for looking into this, and sorry to cause a false alarm. This is definitely not a bug in ctrlp, and as you point out it's not really a bug in the taglist plugin either. I will send my enhancement suggestions in to the taglist maintainers.\n. Upon more investigation I've discovered this is actually a bug in the taglist plugin. Also what I originally said was not quite true:\n\" as it does when opening a file using :Ex or opening a file from the command line\"\n\nWhen opening a file using Ex the taglist plugin also doesn't work.\n\nFor anyone curious, I've found a fix for the taglist plugin that seems to fix the problem:\n\nIn the s:Tlist_Window_Check_Auto_Open function add:\n\n```\n        let ft = s:Tlist_Get_Buffer_Filetype(buf_num)\n        if ft == 'taglist'                 \"  <---- line added\n           return                           \"  <---- line added\n       endif                                 \"  <---- line added\n       if !s:Tlist_Skip_File(filename, ft)\n```\n\nand then change the line:\n\n```\n    autocmd VimEnter * nested call s:Tlist_Window_Check_Auto_Open()\n```\n\nto\n\n```\n    autocmd BufReadPost * nested call s:Tlist_Window_Check_Auto_Open()\n```\n\nIn summary this isn't a bug in ctrlp, it's a bug in taglist - I'll try to submit my bugfix to the taglist plugin when I have a chance.\n. kien, yep, you're absolutely correct.\n\nAs you point out, I've been miss-understanding the intended behavior of the `Tlist_Auto_Open` option. Your suggestion that the `Tlist_Auto_Open` option only opens the taglist window when first starting Vim, is correct. After I re-read the taglist help documentation more thoroughly, I agree that this option is working as intended.\n\nThis is definitely off on a tangent from the ctrlp plugin (hopefully it'll be useful to someone else), but I still believe that the behavior of the `Tlist_Auto_Open` option as implemented in the taglist plugin, is poorly designed - although to be clear it is working as intended. \n\nI think the a better implementation would be for the `Tlist_Auto_Open` option to automatically show the taglist whenever a file is opened, regardless of how it was opened. I could go into more detail about why I think the current behavior is poorly designed, but since I'm already way off on a tangent from anything related to ctrlp, I'll stop now :-)\n\nFor the sake of anyone that arrives here while searching for a resolution to the 'problem' as I describe it: I think the change I outlined in my comment above will modify the behavior of the taglist plugin to show the taglist whenever a supported filetype is opened, regardless of how it was opened.\n\nkien, thanks again for looking into this, and sorry to cause a false alarm. This is definitely not a bug in ctrlp, and as you point out it's not really a bug in the taglist plugin either. I will send my enhancement suggestions in to the taglist maintainers.\n. ",
    "mxgrn": "Looking into help (v1.7.6) - there's no mentioning of g:ctrlp_key_loop. Must be missing smth stupid.\n. Can't get past 1.7.6 with vundler\u2026 Tried both:\n\nBundle 'https://github.com/kien/ctrlp.vim.git'\n\nand\n\nBundle 'kien/ctrlp.vim'\n\nLate night here, will try to figure this out tomorrow morning... Thanks so far!\n. Finally updated, the option worked as promised. Thank you for your work!\n. Looking into help (v1.7.6) - there's no mentioning of g:ctrlp_key_loop. Must be missing smth stupid.\n. Can't get past 1.7.6 with vundler\u2026 Tried both:\n\nBundle 'https://github.com/kien/ctrlp.vim.git'\n\nand\n\nBundle 'kien/ctrlp.vim'\n\nLate night here, will try to figure this out tomorrow morning... Thanks so far!\n. Finally updated, the option worked as promised. Thank you for your work!\n. ",
    "jemmyw": "great, although I can't seem to make that work. Filename only mode works, but putting ;refinement at the end just gives no results. Is the refinement indicator a different character?\n. You're right, old version. Works now, fantastic thanks.\n. great, although I can't seem to make that work. Filename only mode works, but putting ;refinement at the end just gives no results. Is the refinement indicator a different character?\n. You're right, old version. Works now, fantastic thanks.\n. ",
    "docwhat": "Couldn't use python or ruby to fork, and restart the vimscript from the forked version?  The cache is kept on-disk, correct?\n. Well, here's a work around (sort of) for anyone interested:\n\n```\n\" CtrlP auto cache clearing.\n\" ----------------------------------------------------------------------------\nfunction! SetupCtrlP()\n  if exists(\"g:loaded_ctrlp\") && g:loaded_ctrlp\n    augroup CtrlPExtension\n      autocmd!\n      autocmd FocusGained  * CtrlPClearCache\n      autocmd BufWritePost * CtrlPClearCache\n    augroup END\n  endif\nendfunction\nif has(\"autocmd\")\n  autocmd VimEnter * :call SetupCtrlP()\nendif\n```\n\nIt's too bad there isn't an `autocmd` hook for `BufCreateFilePost` or something like that.\n\nCiao!\n. Couldn't use python or ruby to fork, and restart the vimscript from the forked version?  The cache is kept on-disk, correct?\n. Well, here's a work around (sort of) for anyone interested:\n\n```\n\" CtrlP auto cache clearing.\n\" ----------------------------------------------------------------------------\nfunction! SetupCtrlP()\n  if exists(\"g:loaded_ctrlp\") && g:loaded_ctrlp\n    augroup CtrlPExtension\n      autocmd!\n      autocmd FocusGained  * CtrlPClearCache\n      autocmd BufWritePost * CtrlPClearCache\n    augroup END\n  endif\nendfunction\nif has(\"autocmd\")\n  autocmd VimEnter * :call SetupCtrlP()\nendif\n```\n\nIt's too bad there isn't an `autocmd` hook for `BufCreateFilePost` or something like that.\n\nCiao!\n. ",
    "moeabdol": "+1 @docwhat works like a charm. Thanks.\n. +1 @docwhat works like a charm. Thanks.\n. ",
    "jlipps": "I _think_ it could work. In general I also like the idea of a fixed window height (whether it's at the top or bottom) so my eyes aren't drawn to something that looks like it's moving around. But whatever's the lower hanging fruit!\n\nOn Oct 25, 2012, at 8:33 PM, kien notifications@github.com wrote:\n\n> Would moving the match window to the top of the screen work for you? The top hit won't jump around if the match window is at the top.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n. thanks, this is great!\n. I _think_ it could work. In general I also like the idea of a fixed window height (whether it's at the top or bottom) so my eyes aren't drawn to something that looks like it's moving around. But whatever's the lower hanging fruit!\n\nOn Oct 25, 2012, at 8:33 PM, kien notifications@github.com wrote:\n\n> Would moving the match window to the top of the screen work for you? The top hit won't jump around if the match window is at the top.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n. thanks, this is great!\n. ",
    "othree": "Thanks.\n\nThat's the root of the problem. I copy both config but delete wrong line.\n. Thanks.\n\nThat's the root of the problem. I copy both config but delete wrong line.\n. ",
    "danemacmillan": "Being able to define what mixed mode means would be awesome. I currently would like to specify \"files\" and \"buffers\" as a custom mixed mode, but it's not possible.\n. @ahmedelgabri I'm having the same issue. This does not appear to be a problem when running `ag` from the command line, but when running it through `ctrlp` it just fails to include symlinks. This is what I use for my `.vimrc`:\n\n```\nif executable('ag')\n    let g:ctrlp_user_command = 'ag --ignore-case --nogroup --hidden --follow\n        \\ -l -m 50000\n        \\ --ignore .git\n        \\ --ignore .svn\n        \\ --ignore .hg\n        \\ --ignore .DS_Store\n        \\ %s -g \"\"'\nendif\n```\n\nNotice the `--follow` flag? That tells `ag` to follow symlinks as well. However, this option does not work within `ctrlp`; the shortened `-f` option does not work either. \n\nThe only way I've gotten `ctrlp` to actually follow symlinks is by using either of these three flags (reference https://www.mankier.com/1/ag):\n- `-a` or `--all-types`\n- `-t` or `--all-text`\n- `-u` or `--unrestricted`\n\nThe problem with including those is that they end up ignoring any custom ignore patterns and other ignore files, such as `.gitignore`, `.hgignore`, or `.agignore`, which means `ag` searches through `.git/` directories and all other ones like it. This obviously slows things down and produces cluttered search results. If you're okay with that, include one of those three flags and you'll get symlinks followed in searches.\n. After playing with the configuration some more, I've settled on a workaround / solution to this problem. `ag` makes use of a `.agignore` file, which can be specified explicitly, or fallback to a user's home directory. This has the added benefit that even when running `ag` from the command line, and not just through `ctrlp`, that the ignores specified are already defined.\n\nThe key flags to use are `-U` (Ignore VCS ignore files [.gitignore, .hgignore, svn:ignore], but still use .agignore) and `-p` (Provide a path to a specific .agignore file). The `-p` flag is not necessary if an `.agignore` file exists in the home directory, but I've included it to be explicit.\n\nThis is my new config for `.vimrc` related to `ctrlp`:\n\n```\nif executable('ag')\n    let g:ctrlp_user_command = 'ag --ignore-case --nogroup --hidden --follow\n        \\ -U -p ~/.agignore\n        \\ -l -m 50000\n        \\ %s -g \"\"'\nendif\n```\n\nNow when running `ctrlp` from vim, symlinks are suggested / followed in search results.\n\nRead https://www.mankier.com/1/ag for additional flags.\n. Being able to define what mixed mode means would be awesome. I currently would like to specify \"files\" and \"buffers\" as a custom mixed mode, but it's not possible.\n. @ahmedelgabri I'm having the same issue. This does not appear to be a problem when running `ag` from the command line, but when running it through `ctrlp` it just fails to include symlinks. This is what I use for my `.vimrc`:\n\n```\nif executable('ag')\n    let g:ctrlp_user_command = 'ag --ignore-case --nogroup --hidden --follow\n        \\ -l -m 50000\n        \\ --ignore .git\n        \\ --ignore .svn\n        \\ --ignore .hg\n        \\ --ignore .DS_Store\n        \\ %s -g \"\"'\nendif\n```\n\nNotice the `--follow` flag? That tells `ag` to follow symlinks as well. However, this option does not work within `ctrlp`; the shortened `-f` option does not work either. \n\nThe only way I've gotten `ctrlp` to actually follow symlinks is by using either of these three flags (reference https://www.mankier.com/1/ag):\n- `-a` or `--all-types`\n- `-t` or `--all-text`\n- `-u` or `--unrestricted`\n\nThe problem with including those is that they end up ignoring any custom ignore patterns and other ignore files, such as `.gitignore`, `.hgignore`, or `.agignore`, which means `ag` searches through `.git/` directories and all other ones like it. This obviously slows things down and produces cluttered search results. If you're okay with that, include one of those three flags and you'll get symlinks followed in searches.\n. After playing with the configuration some more, I've settled on a workaround / solution to this problem. `ag` makes use of a `.agignore` file, which can be specified explicitly, or fallback to a user's home directory. This has the added benefit that even when running `ag` from the command line, and not just through `ctrlp`, that the ignores specified are already defined.\n\nThe key flags to use are `-U` (Ignore VCS ignore files [.gitignore, .hgignore, svn:ignore], but still use .agignore) and `-p` (Provide a path to a specific .agignore file). The `-p` flag is not necessary if an `.agignore` file exists in the home directory, but I've included it to be explicit.\n\nThis is my new config for `.vimrc` related to `ctrlp`:\n\n```\nif executable('ag')\n    let g:ctrlp_user_command = 'ag --ignore-case --nogroup --hidden --follow\n        \\ -U -p ~/.agignore\n        \\ -l -m 50000\n        \\ %s -g \"\"'\nendif\n```\n\nNow when running `ctrlp` from vim, symlinks are suggested / followed in search results.\n\nRead https://www.mankier.com/1/ag for additional flags.\n. ",
    "skrobul": "Would it be worth opening separate issue with limited scope for just that? That's exactly what I need - just files and buffers, without risk of using wrong file from MRU.\n. Would it be worth opening separate issue with limited scope for just that? That's exactly what I need - just files and buffers, without risk of using wrong file from MRU.\n. ",
    "mattsacks": "Thanks for clearing that up for me @kien. While I did struggle getting my head around most of your code, I was able to figure out some of the methods you've employed into handling the interactivity with the CtrlP Buffer. I wasn't able to understand all of the buffer-local settings you apply in the CtrlP buffer, but I was able to simulate something similar with `laststatus=0`.\n\nI've actually managed to get just what I wanted working. You can check it out [at this repo](https://github.com/mattsacks/vim-complete).\n. Thanks for clearing that up for me @kien. While I did struggle getting my head around most of your code, I was able to figure out some of the methods you've employed into handling the interactivity with the CtrlP Buffer. I wasn't able to understand all of the buffer-local settings you apply in the CtrlP buffer, but I was able to simulate something similar with `laststatus=0`.\n\nI've actually managed to get just what I wanted working. You can check it out [at this repo](https://github.com/mattsacks/vim-complete).\n. ",
    "adarsh": "Ah - my bad - thanks!\n\nOn Mon, Nov 5, 2012 at 12:19 PM, kien notifications@github.com wrote:\n\n> There are already mappings to open entries in vertical or horizontal\n> splits. Please read :help ctrlp-mappings.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/kien/ctrlp.vim/issues/312#issuecomment-10086119.\n. Ah - my bad - thanks!\n\nOn Mon, Nov 5, 2012 at 12:19 PM, kien notifications@github.com wrote:\n\n> There are already mappings to open entries in vertical or horizontal\n> splits. Please read :help ctrlp-mappings.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/kien/ctrlp.vim/issues/312#issuecomment-10086119.\n. ",
    "MattNguyen": "@kien, you nailed it. Thanks a lot. Closing the issue. \n\nSo if you hit the max_files limit, what determines the files that will be included/excluded?\n. So I started running into this problem again and I figured out that the problem was due to ctrlp's ignore settings. I ended up putting the following in my .vimrc:\n\n```\n\" Sane Ignore For ctrlp\nlet g:ctrlp_custom_ignore = {\n  \\ 'dir':  '\\.git$\\|\\.hg$\\|\\.svn$\\|\\.yardoc\\|public\\/images\\|public\\/system\\|data\\|log\\|tmp$',\n  \\ 'file': '\\.exe$\\|\\.so$\\|\\.dat$'\n  \\ }\n```\n\nDoing so greatly improved the speed of ctrlp and the availability of files to search.\n\nThis was at the advice of an [HN Post](https://gist.github.com/67de417c5c38f0ff8093).\n. @kien, you nailed it. Thanks a lot. Closing the issue. \n\nSo if you hit the max_files limit, what determines the files that will be included/excluded?\n. So I started running into this problem again and I figured out that the problem was due to ctrlp's ignore settings. I ended up putting the following in my .vimrc:\n\n```\n\" Sane Ignore For ctrlp\nlet g:ctrlp_custom_ignore = {\n  \\ 'dir':  '\\.git$\\|\\.hg$\\|\\.svn$\\|\\.yardoc\\|public\\/images\\|public\\/system\\|data\\|log\\|tmp$',\n  \\ 'file': '\\.exe$\\|\\.so$\\|\\.dat$'\n  \\ }\n```\n\nDoing so greatly improved the speed of ctrlp and the availability of files to search.\n\nThis was at the advice of an [HN Post](https://gist.github.com/67de417c5c38f0ff8093).\n. ",
    "rizzatti": "You might enjoy searching for \"git ls-files\" inside :help ctrlp. It can use only the files known by git, hg, ...\ng:ctrlp_user_command would be the option I think.\n. `ls-tree --name-only` and `ls-files` show submodules, which will look like files.\n. You might enjoy searching for \"git ls-files\" inside :help ctrlp. It can use only the files known by git, hg, ...\ng:ctrlp_user_command would be the option I think.\n. `ls-tree --name-only` and `ls-files` show submodules, which will look like files.\n. ",
    "Supernats": "@rizzatti I should have read that section long ago. Such a wonderful tip. Thanks!\n. @rizzatti I should have read that section long ago. Such a wonderful tip. Thanks!\n. ",
    "savroff": "@rizzatti you just saved my ass \ud83d\udc4d \n. @rizzatti you just saved my ass \ud83d\udc4d \n. ",
    "nichtleiter": "Thanks for your fast reply.\n\nYour instructions work just as expected. Everytime i send `SIGTERM` to `gvim` the line\n\n```\nwrite\n```\n\nis appended to `/home/user/test/readwrite.txt`.\n\n---\n\nTo illustrate the strange behavior i observed further, i wrote a little script\n\n``` bash\n#!/bin/bash\nCACHE=~/.cache/ctrlp/mru/cache.txt\n\n\nfor i in {1..5} ; do\n    rm ${CACHE}\n    for j in {1..5} ; do\n    gvim -c \"e /tmp/mru_test_${j}\" -c 'w' &> /dev/null\n    sleep 0.5\n    killall -s TERM gvim\n    done\n    cat ${CACHE}\n    echo \"---------------------------------------------\"\ndone\n```\n\nif i run this script with no files in `/tmp` the output is (particular odd is, that on the first run of the inner `for` loop nothing is written to `${CACHE}` and on the second run that `mru_test_5` is not appended):\n\n```\n---------------------------------------------\n/tmp/mru_test_4\n/tmp/mru_test_3\n/tmp/mru_test_2\n/tmp/mru_test_1\n---------------------------------------------\n/tmp/mru_test_4\n/tmp/mru_test_3\n/tmp/mru_test_2\n/tmp/mru_test_1\n/tmp/mru_test_5\n---------------------------------------------\n/tmp/mru_test_4\n/tmp/mru_test_3\n/tmp/mru_test_2\n/tmp/mru_test_1\n/tmp/mru_test_5\n---------------------------------------------\n/tmp/mru_test_4\n/tmp/mru_test_3\n/tmp/mru_test_2\n/tmp/mru_test_1\n/tmp/mru_test_5\n---------------------------------------------\n```\n\nIn the other case, if i run the script with the files `/tmp/mru_test_{1..5}` already existing in `/tmp` the output is (particular odd in this case is, that `mru_test_5` is not appended to `${CACHE}` on the first run of the inner for loop).\n\n```\n\n/tmp/mru_test_4\n/tmp/mru_test_3\n/tmp/mru_test_2\n/tmp/mru_test_1\n---------------------------------------------\n/tmp/mru_test_4\n/tmp/mru_test_3\n/tmp/mru_test_2\n/tmp/mru_test_1\n/tmp/mru_test_5\n---------------------------------------------\n/tmp/mru_test_4\n/tmp/mru_test_3\n/tmp/mru_test_2\n/tmp/mru_test_1\n/tmp/mru_test_5\n---------------------------------------------\n/tmp/mru_test_4\n/tmp/mru_test_3\n/tmp/mru_test_2\n/tmp/mru_test_1\n/tmp/mru_test_5\n---------------------------------------------\n/tmp/mru_test_4\n/tmp/mru_test_3\n/tmp/mru_test_2\n/tmp/mru_test_1\n/tmp/mru_test_5\n---------------------------------------------\n```\n\nMaybe these information help chasing the bug!?\n. Interesting that this 'bug' isn't special to my setup. So, thanks a lot that you look into the matter. \n\nUnfortunately i can't serve with any solution. Writing the cache on every BufEnter and BufLeave would be a bit exaggerated. Or maybe not!?\n\nBest regards\n. Thanks a lot for your effort! \n\n---\n\n> This will be just enough to prevent completely losing the new entries in case Vim isn't closed normally.\n\nI encountered that lately. Probably i'will don't loose the mru files again in the future after checking out the new commits. In the other case i will let you know...\n\nBest regards\n. Thanks for your fast reply.\n\nYour instructions work just as expected. Everytime i send `SIGTERM` to `gvim` the line\n\n```\nwrite\n```\n\nis appended to `/home/user/test/readwrite.txt`.\n\n---\n\nTo illustrate the strange behavior i observed further, i wrote a little script\n\n``` bash\n#!/bin/bash\nCACHE=~/.cache/ctrlp/mru/cache.txt\n\n\nfor i in {1..5} ; do\n    rm ${CACHE}\n    for j in {1..5} ; do\n    gvim -c \"e /tmp/mru_test_${j}\" -c 'w' &> /dev/null\n    sleep 0.5\n    killall -s TERM gvim\n    done\n    cat ${CACHE}\n    echo \"---------------------------------------------\"\ndone\n```\n\nif i run this script with no files in `/tmp` the output is (particular odd is, that on the first run of the inner `for` loop nothing is written to `${CACHE}` and on the second run that `mru_test_5` is not appended):\n\n```\n---------------------------------------------\n/tmp/mru_test_4\n/tmp/mru_test_3\n/tmp/mru_test_2\n/tmp/mru_test_1\n---------------------------------------------\n/tmp/mru_test_4\n/tmp/mru_test_3\n/tmp/mru_test_2\n/tmp/mru_test_1\n/tmp/mru_test_5\n---------------------------------------------\n/tmp/mru_test_4\n/tmp/mru_test_3\n/tmp/mru_test_2\n/tmp/mru_test_1\n/tmp/mru_test_5\n---------------------------------------------\n/tmp/mru_test_4\n/tmp/mru_test_3\n/tmp/mru_test_2\n/tmp/mru_test_1\n/tmp/mru_test_5\n---------------------------------------------\n```\n\nIn the other case, if i run the script with the files `/tmp/mru_test_{1..5}` already existing in `/tmp` the output is (particular odd in this case is, that `mru_test_5` is not appended to `${CACHE}` on the first run of the inner for loop).\n\n```\n\n/tmp/mru_test_4\n/tmp/mru_test_3\n/tmp/mru_test_2\n/tmp/mru_test_1\n---------------------------------------------\n/tmp/mru_test_4\n/tmp/mru_test_3\n/tmp/mru_test_2\n/tmp/mru_test_1\n/tmp/mru_test_5\n---------------------------------------------\n/tmp/mru_test_4\n/tmp/mru_test_3\n/tmp/mru_test_2\n/tmp/mru_test_1\n/tmp/mru_test_5\n---------------------------------------------\n/tmp/mru_test_4\n/tmp/mru_test_3\n/tmp/mru_test_2\n/tmp/mru_test_1\n/tmp/mru_test_5\n---------------------------------------------\n/tmp/mru_test_4\n/tmp/mru_test_3\n/tmp/mru_test_2\n/tmp/mru_test_1\n/tmp/mru_test_5\n---------------------------------------------\n```\n\nMaybe these information help chasing the bug!?\n. Interesting that this 'bug' isn't special to my setup. So, thanks a lot that you look into the matter. \n\nUnfortunately i can't serve with any solution. Writing the cache on every BufEnter and BufLeave would be a bit exaggerated. Or maybe not!?\n\nBest regards\n. Thanks a lot for your effort! \n\n---\n\n> This will be just enough to prevent completely losing the new entries in case Vim isn't closed normally.\n\nI encountered that lately. Probably i'will don't loose the mru files again in the future after checking out the new commits. In the other case i will let you know...\n\nBest regards\n. ",
    "samflores": "ops, my bap :p\n. ops, my bap :p\n. ",
    "sheerun": "It doesn't work for me. I have following in my `.vimrc`:\n\n```\nBundle 'kien/ctrlp.vim'\nlet g:ctrlp_use_caching = 1\nlet g:ctrlp_clear_cache_on_exit = 0\n```\n\nCache is deleted every time I quit Vim.\n. It doesn't work for me. I have following in my `.vimrc`:\n\n```\nBundle 'kien/ctrlp.vim'\nlet g:ctrlp_use_caching = 1\nlet g:ctrlp_clear_cache_on_exit = 0\n```\n\nCache is deleted every time I quit Vim.\n. ",
    "dyfrgi": "Further investigation shows this is due to max_files. There are, uh, a lot of gems in there, and the root it's finding is probably ~/.rbenv, as that's a git repository. Going to have to think about reasonable roots to make this work. It also might work to have CtrlP load nearby files first, before loading ones which are further away. Or maybe say something when the max files is hit, instead of just silently ignoring a bunch of files that it seems like should be found?\n. Further investigation shows this is due to max_files. There are, uh, a lot of gems in there, and the root it's finding is probably ~/.rbenv, as that's a git repository. Going to have to think about reasonable roots to make this work. It also might work to have CtrlP load nearby files first, before loading ones which are further away. Or maybe say something when the max files is hit, instead of just silently ignoring a bunch of files that it seems like should be found?\n. ",
    "DeMarko": "A message when max files is hit would be awesome, I was unaware of this because of ignores I had already reached the default 10k limit but CtrlP only showed itself as indexing 5813 so I thought it was some other issue.\n. A message when max files is hit would be awesome, I was unaware of this because of ignores I had already reached the default 10k limit but CtrlP only showed itself as indexing 5813 so I thought it was some other issue.\n. ",
    "marr": "Added that to .vimrc fixed for me:\n\" Unset cap of 10,000 files so we find everything\nlet g:ctrlp_max_files = 0\n. Added that to .vimrc fixed for me:\n\" Unset cap of 10,000 files so we find everything\nlet g:ctrlp_max_files = 0\n. ",
    "ncjones": "This issue caught me by surprise when I switched from Command-T to CTRLP. My current workaround is to use the VCS ctrlp_user_command as per the docs:\n\n``` vim\n  let g:ctrlp_user_command = {                               \n    \\ 'types': {\n      \\ 1: ['.git', 'cd %s && git ls-files'],                \n      \\ 2: ['.hg', 'hg --cwd %s locate -I .'],               \n      \\ },                                                   \n    \\ 'fallback': 'find %s -type f'                          \n    \\ }\n```\n. This issue caught me by surprise when I switched from Command-T to CTRLP. My current workaround is to use the VCS ctrlp_user_command as per the docs:\n\n``` vim\n  let g:ctrlp_user_command = {                               \n    \\ 'types': {\n      \\ 1: ['.git', 'cd %s && git ls-files'],                \n      \\ 2: ['.hg', 'hg --cwd %s locate -I .'],               \n      \\ },                                                   \n    \\ 'fallback': 'find %s -type f'                          \n    \\ }\n```\n. ",
    "christeredvartsen": "Never mind. I suck.\n. Never mind. I suck.\n. ",
    "chris-roerig": "I suck too.. @christeredvartsen what did you do?\n. I suck too.. @christeredvartsen what did you do?\n. ",
    "rhwang201": "@christeredvartsen How did you resolve this?\n. @christeredvartsen How did you resolve this?\n. ",
    "knuckolls": "For those googling for this solution. This is what I had to end up adding to my .vimrc to get the desired functionality to work. Thanks kien!\n\nlet g:ctrlp_regexp = 1\n\nlet g:ctrlp_abbrev = {\n  \\ 'gmode': 't',\n  \\ 'abbrevs': [\n      \\ {\n        \\ 'pattern': ' ',\n        \\ 'expanded': '.*',\n        \\ 'mode': 'pfrz',\n      \\ }\n  ]\n  }\n. For those googling for this solution. This is what I had to end up adding to my .vimrc to get the desired functionality to work. Thanks kien!\n\nlet g:ctrlp_regexp = 1\n\nlet g:ctrlp_abbrev = {\n  \\ 'gmode': 't',\n  \\ 'abbrevs': [\n      \\ {\n        \\ 'pattern': ' ',\n        \\ 'expanded': '.*',\n        \\ 'mode': 'pfrz',\n      \\ }\n  ]\n  }\n. ",
    "janv": "That's not quite the same.\nI use the CtrlPLastMode to open CtrlP because I frequently switch between modes.\nBut the \"last mode\" immediately after starting Vim is file mode.\n\nI tried looking through the sources to find where this last mode is stored so I could overwrite/initialize it in my .vimrc but I could not find it. It would be very nice if you could maybe give me a hint where to look.\n. Cool, didn't think of that. Thanks a lot\n. That's not quite the same.\nI use the CtrlPLastMode to open CtrlP because I frequently switch between modes.\nBut the \"last mode\" immediately after starting Vim is file mode.\n\nI tried looking through the sources to find where this last mode is stored so I could overwrite/initialize it in my .vimrc but I could not find it. It would be very nice if you could maybe give me a hint where to look.\n. Cool, didn't think of that. Thanks a lot\n. ",
    "dezza": "Seems similar to these issues:\nhttps://github.com/kien/ctrlp.vim/issues/331\nhttps://github.com/kien/ctrlp.vim/issues/46\nhttps://github.com/kien/ctrlp.vim/issues/55\nhttps://github.com/kien/ctrlp.vim/issues/116\n. Seems similar to these issues:\nhttps://github.com/kien/ctrlp.vim/issues/331\nhttps://github.com/kien/ctrlp.vim/issues/46\nhttps://github.com/kien/ctrlp.vim/issues/55\nhttps://github.com/kien/ctrlp.vim/issues/116\n. ",
    "apaku": "Thanks for the hints, need to remember :help more often.\n. Thanks for the hints, need to remember :help more often.\n. ",
    "marlun": "Yes, you are correct. I added it as a submodule but for some reason it was not up to date, ran a git pull and now everything seems to be working as it should.\n\nThanks for the quick help!\n. But I only want it to change it for the ctrlp buffer. Sounds like I should do it with an autocmd but how can I know it's the ctrlp buffer?\n. Yes, you are correct. I added it as a submodule but for some reason it was not up to date, ran a git pull and now everything seems to be working as it should.\n\nThanks for the quick help!\n. But I only want it to change it for the ctrlp buffer. Sounds like I should do it with an autocmd but how can I know it's the ctrlp buffer?\n. ",
    "shyam-habarakada": "For vim novices like me who come across this question, put the following in `~/.vimrc` and you'll get nicer highlighting for the `ctrlp` selected line\n\n```\nhi CursorLine cterm=NONE ctermbg=darkred ctermfg=white guibg=darkred guifg=white\n```\n. Trying this, but unable to make it work. @kien by 'when you're in the ctrlp prompt' what do you mean? Is it when I have typed `:CtrlP`? or hit the `<c-p>` key?\n. For vim novices like me who come across this question, put the following in `~/.vimrc` and you'll get nicer highlighting for the `ctrlp` selected line\n\n```\nhi CursorLine cterm=NONE ctermbg=darkred ctermfg=white guibg=darkred guifg=white\n```\n. Trying this, but unable to make it work. @kien by 'when you're in the ctrlp prompt' what do you mean? Is it when I have typed `:CtrlP`? or hit the `<c-p>` key?\n. ",
    "bryankennedy": "I posted a little example of how to do this on Stack Overflow, in case it's every useful to folks.\nhttp://stackoverflow.com/questions/26434254/how-can-i-customize-the-line-highlight-color-in-vim-ctrlp\n. I posted a little example of how to do this on Stack Overflow, in case it's every useful to folks.\nhttp://stackoverflow.com/questions/26434254/how-can-i-customize-the-line-highlight-color-in-vim-ctrlp\n. ",
    "silesky": "I wanted a bright cursorline in ctrlp, but not in my day-to-day editing. It's as simple as this:\n\n```\nhi cursorline cterm=none ctermbg=darkred ctermfg=white guibg=darkred guifg=white\nset nocursorline\n```\n. I wanted a bright cursorline in ctrlp, but not in my day-to-day editing. It's as simple as this:\n\n```\nhi cursorline cterm=none ctermbg=darkred ctermfg=white guibg=darkred guifg=white\nset nocursorline\n```\n. ",
    "promisedlandt": "Thank you for the quick reply, I really appreciate it.\n\nIn the end, I decided CtrlP was great but sadly not for me.\n. Thank you for the quick reply, I really appreciate it.\n\nIn the end, I decided CtrlP was great but sadly not for me.\n. ",
    "goldfeld": "Hi, the complement to the code I've posted is that when your press <Leader> on the ctrlp prompt, I do a highlighting of a letter on each of the lines displayed, so that pressing [letter] takes you to that file without even having to press enter. I'm working on that now, but it's somewhat independent of the code I've posted, that's why I didn't go into details, though I'm happy to talk about the plugin as a whole especially once I can get a first working version.\n\nSo since the letter is chosen dynamically in my plugin's init function, I thought a mapping wouldn't work well. Furthermore, I'm capturing the leader key inside your ctrlp prompt, so it actually doesn't conflict with actual <Leader> mappings. So I figured the PrtFocusMap (or the KeyLoop) function was the more appropriate place to capture the input, though I'm totally open for suggestions.\n. Yes. To be clear, it would be <leader>c, I'm putting the brackets to show the user which key was picked for the hotkey, as well as for making it easy to do the regex highlight by finding the brackets (matchadd(grp, '\\[.\\]')). So I\"m doing my own highlighting on top of ctrlp default highlighting.\n\nThe brackets are also making it easy to filter to the file, so when the user presses <leader>c, I insert \"[c]\" on the prompt and would either send a <cr> or trigger AcceptSelection. Sending a <cr> would be fine but I couldn't find out how to do it.\n\nIn a way this functionality is like CtrlP meets EasyMotion.\n. I think it makes a difference since I'm doing this plugin with speed in mind. I have mapped my leader to a very reachable key, while brackets aren't that much. There's another reason too, that I'm doing with brackets as it's easier now but maybe later I could get something working with a hidden/unrendered character that wouldn't show up visually (or be typable), but I would be able to regex on it.\n\nAnd for the <cr>, the point is that, once the user pressed leader, he knows he only needs to type one letter to select a file. So there's no point in requiring an extra keypress (enter). Is there a way to send a <cr> or ^M? I tried using normal!, execute etc etc but I'm learning vimscript as I go and I couldn't get something that worked in the ctrlp prompt.\n. It's ok, I didn't mean to request that you support this, I'm just trying to find my way around the program flow to best modifiy it to my needs. Thanks for the help, I'll try feedkeys().\n. Hi, the complement to the code I've posted is that when your press <Leader> on the ctrlp prompt, I do a highlighting of a letter on each of the lines displayed, so that pressing [letter] takes you to that file without even having to press enter. I'm working on that now, but it's somewhat independent of the code I've posted, that's why I didn't go into details, though I'm happy to talk about the plugin as a whole especially once I can get a first working version.\n\nSo since the letter is chosen dynamically in my plugin's init function, I thought a mapping wouldn't work well. Furthermore, I'm capturing the leader key inside your ctrlp prompt, so it actually doesn't conflict with actual <Leader> mappings. So I figured the PrtFocusMap (or the KeyLoop) function was the more appropriate place to capture the input, though I'm totally open for suggestions.\n. Yes. To be clear, it would be <leader>c, I'm putting the brackets to show the user which key was picked for the hotkey, as well as for making it easy to do the regex highlight by finding the brackets (matchadd(grp, '\\[.\\]')). So I\"m doing my own highlighting on top of ctrlp default highlighting.\n\nThe brackets are also making it easy to filter to the file, so when the user presses <leader>c, I insert \"[c]\" on the prompt and would either send a <cr> or trigger AcceptSelection. Sending a <cr> would be fine but I couldn't find out how to do it.\n\nIn a way this functionality is like CtrlP meets EasyMotion.\n. I think it makes a difference since I'm doing this plugin with speed in mind. I have mapped my leader to a very reachable key, while brackets aren't that much. There's another reason too, that I'm doing with brackets as it's easier now but maybe later I could get something working with a hidden/unrendered character that wouldn't show up visually (or be typable), but I would be able to regex on it.\n\nAnd for the <cr>, the point is that, once the user pressed leader, he knows he only needs to type one letter to select a file. So there's no point in requiring an extra keypress (enter). Is there a way to send a <cr> or ^M? I tried using normal!, execute etc etc but I'm learning vimscript as I go and I couldn't get something that worked in the ctrlp prompt.\n. It's ok, I didn't mean to request that you support this, I'm just trying to find my way around the program flow to best modifiy it to my needs. Thanks for the help, I'll try feedkeys().\n. ",
    "branquito": "thanks.. actually i tried that but now i see the reason it wasnt working.. it was because i entered something like \n/some/file.txt and pressing <c-y> didnt do anything because it couldnt create file there because of permissions.. nor it warned me about not being able to create it.. anyway now with a path like ~/something everything is OK.. thanks for your quick response..! :))\n. ok.. thanks very much.. all clear now.. all working.\n. thanks.. actually i tried that but now i see the reason it wasnt working.. it was because i entered something like \n/some/file.txt and pressing <c-y> didnt do anything because it couldnt create file there because of permissions.. nor it warned me about not being able to create it.. anyway now with a path like ~/something everything is OK.. thanks for your quick response..! :))\n. ok.. thanks very much.. all clear now.. all working.\n. ",
    "OliverUv": "Thanks for the quick response! It isn't what I'm looking for though. The point is that I want quick access to non-subdirectories. I'm looking to do things like `@cd ~/projects/web/some_other_project/<cr>` (using some form of autocompletion), and then continue on as normal, even if I'm originally working from ~/scripts/docs/ or some other totally unrelated directory.\n. @cd ~ takes forever :) And though it isn't a word completion plugin, finding files sometimes gets easier with completion! So I really appreciate you taking the time to do this. :+1:\n\nIf you decide to drop it, look into letting people use insert-mode functionality while typing commands - if I can activate other completion plugins after `@cd`, I can easily use one of those to complete paths for me. I'm sure this would enable all sorts of other extensibility to CtrlP - though implementation could be troublesome. Again, it is enough if I could do something like\n\n```\nlet g:ctrlp_prompt_mappings = {\n    'neocomplcache#manual_filename_complete()': ['<expr><c-i>'],\n    ... }\n```\n\nwhich would essentially be the same as `imap <expr><c-i> :call neocomplcache#manual_filename_complete()<cr>` for normal vim. The keybindings seem to support that in the way they are written already, but it didn't work for me.\n. Thanks for the quick response! It isn't what I'm looking for though. The point is that I want quick access to non-subdirectories. I'm looking to do things like `@cd ~/projects/web/some_other_project/<cr>` (using some form of autocompletion), and then continue on as normal, even if I'm originally working from ~/scripts/docs/ or some other totally unrelated directory.\n. @cd ~ takes forever :) And though it isn't a word completion plugin, finding files sometimes gets easier with completion! So I really appreciate you taking the time to do this. :+1:\n\nIf you decide to drop it, look into letting people use insert-mode functionality while typing commands - if I can activate other completion plugins after `@cd`, I can easily use one of those to complete paths for me. I'm sure this would enable all sorts of other extensibility to CtrlP - though implementation could be troublesome. Again, it is enough if I could do something like\n\n```\nlet g:ctrlp_prompt_mappings = {\n    'neocomplcache#manual_filename_complete()': ['<expr><c-i>'],\n    ... }\n```\n\nwhich would essentially be the same as `imap <expr><c-i> :call neocomplcache#manual_filename_complete()<cr>` for normal vim. The keybindings seem to support that in the way they are written already, but it didn't work for me.\n. ",
    "tomislater": "Hmm, you are in \"Files mode\"? You can change them by ctrl-f - ctrl-b\n. Are you tried this configuration? https://gist.github.com/1280177\n\nCopy code to the terminal\n. Show .vimrc file\n. Try this before \"set background=light\":\n\n```\nset t_Co=16\n```\n. Show us your .vimrc file\n. ```\n<c-j>, <c-k>\n```\n\ndoes not work?\n. Hmm, you are in \"Files mode\"? You can change them by ctrl-f - ctrl-b\n. Are you tried this configuration? https://gist.github.com/1280177\n\nCopy code to the terminal\n. Show .vimrc file\n. Try this before \"set background=light\":\n\n```\nset t_Co=16\n```\n. Show us your .vimrc file\n. ```\n<c-j>, <c-k>\n```\n\ndoes not work?\n. ",
    "treyhunner": "@tomislater that's a solarized dark colorscheme.  It does seem to work with that (though the highlighting color is very similar to the background color).\n\nI'm using the solarized light colorscheme using [gnome-terminal-colors-solarized](https://github.com/sigurdga/gnome-terminal-colors-solarized):\n\n```\n./set_light.sh\n```\n. [My .vimrc](https://github.com/treyhunner/dotfiles/blob/master/vimrc)\n\n[My .vim directory](https://github.com/treyhunner/dotfiles/tree/master/vim)\n. That messed up the colors (because tmux didn't think I had a 256 color terminal) but it fixed the problem once I resolved that.\n. @tomislater that's a solarized dark colorscheme.  It does seem to work with that (though the highlighting color is very similar to the background color).\n\nI'm using the solarized light colorscheme using [gnome-terminal-colors-solarized](https://github.com/sigurdga/gnome-terminal-colors-solarized):\n\n```\n./set_light.sh\n```\n. [My .vimrc](https://github.com/treyhunner/dotfiles/blob/master/vimrc)\n\n[My .vim directory](https://github.com/treyhunner/dotfiles/tree/master/vim)\n. That messed up the colors (because tmux didn't think I had a 256 color terminal) but it fixed the problem once I resolved that.\n. ",
    "fatih": "I second this. This is useful if you have lots of files and you don't know what the content of the file is. With live preview we can easily see the content and can decide to open the file.\n. It seems `ctrlp_switch_buffer` is not working. For example when I say `:CtrlP`, then ctrlp doesn't list the file I'm on it. If I execute `:CtrlP`  on a other file, then I can jump to an existing file.\n\nBasically, `: CtrlpTag` should not create a new tab and open the file there. It should jump to the tag on the file I'm on it. Because I'm executing it on that file. \n. Or another solution is, can I use `'AcceptSelection(\"e\")': ['<cr>', '<2-LeftMouse>']`  only when used `:CtrpTag`, otherwise it should open always in Tab? This would fix the problem.\n. Thanks @kien, works like a charm!\n. I second this. This is useful if you have lots of files and you don't know what the content of the file is. With live preview we can easily see the content and can decide to open the file.\n. It seems `ctrlp_switch_buffer` is not working. For example when I say `:CtrlP`, then ctrlp doesn't list the file I'm on it. If I execute `:CtrlP`  on a other file, then I can jump to an existing file.\n\nBasically, `: CtrlpTag` should not create a new tab and open the file there. It should jump to the tag on the file I'm on it. Because I'm executing it on that file. \n. Or another solution is, can I use `'AcceptSelection(\"e\")': ['<cr>', '<2-LeftMouse>']`  only when used `:CtrpTag`, otherwise it should open always in Tab? This would fix the problem.\n. Thanks @kien, works like a charm!\n. ",
    "TeffenEllis": "+1\n. +1\n. ",
    "unel": "+1\n. +1\n. ",
    "rgrinberg": "+1 as well. hopefully this will be generalized to work for tags, etc.\n. +1\n. @JosephFerano i'll very much welcome your pull request into my own fork if I have to.\n. I can confirm this problem as well. But I have absolutely no clue on how to reproduce it. Also my .vimrc is littered with plugins as well so until I've read this report I've always blamed it on some plugin rather than ctrlp which has been super solid.\n. @mMontu I use all of the plugins above except for snipmate.\n. Yes I completely understand your position since it's only a tiny improvement. For me the change is worth is however because it's superior over `/pattern` because it does not jump from where you're navigating. Sometimes I would only like to reference the lines and immediately jump back. This saves me the interruption of context switching. And it's also superior to quickfix because of the incremental nature. In any case this is a trivial change to make so I will gladly keep it in my own fork. \n\nAre you against the feature on principle or is just you don't think it's worth your time?\n. why wouldn't other people want to have this by default however? I'm pretty sure that OCaml is more popular than eiffel for example.\n. +1\n. +1 as well. hopefully this will be generalized to work for tags, etc.\n. +1\n. @JosephFerano i'll very much welcome your pull request into my own fork if I have to.\n. I can confirm this problem as well. But I have absolutely no clue on how to reproduce it. Also my .vimrc is littered with plugins as well so until I've read this report I've always blamed it on some plugin rather than ctrlp which has been super solid.\n. @mMontu I use all of the plugins above except for snipmate.\n. Yes I completely understand your position since it's only a tiny improvement. For me the change is worth is however because it's superior over `/pattern` because it does not jump from where you're navigating. Sometimes I would only like to reference the lines and immediately jump back. This saves me the interruption of context switching. And it's also superior to quickfix because of the incremental nature. In any case this is a trivial change to make so I will gladly keep it in my own fork. \n\nAre you against the feature on principle or is just you don't think it's worth your time?\n. why wouldn't other people want to have this by default however? I'm pretty sure that OCaml is more popular than eiffel for example.\n. +1\n. ",
    "mdespuits": ":+1: Oh yes! Missing this from ST2.\n. :+1: Oh yes! Missing this from ST2.\n. ",
    "OrangeTux": "+1 Currently I use `:e#` for reopen the last file (when CtrlP replaces the file with the current one) or `:q`  to close the buffer (when CtrlP opens the file in a new buffer).\n. +1 Currently I use `:e#` for reopen the last file (when CtrlP replaces the file with the current one) or `:q`  to close the buffer (when CtrlP opens the file in a new buffer).\n. ",
    "onemanstartup": "+1\n. +1\n. ",
    "h0jeZvgoxFepBQ2C": "+1000\n. +1000\n. ",
    "JosephFerano": "Hi, I'm going to attempt to do this this weekend, would you welcome a pull request if I did so?\n. Hey guys, I did get something working but only for mac as its using Mac quicklook feature. If you want I can post that (on vacation so itll take a day or two till I get wifi.\n. Hey guys, this works on Mac OSX. Not ideal but it's something.\n\n```\nlet g:ctrlp_buffer_func = { 'enter': 'CtrlpMaps' }\n\nfunc! CtrlpMaps()\n    nnoremap <buffer> <silent> <c-q> :call <sid>QuickLook()<cr>\nendfunc\n\nfunc! s:QuickLook()\n    let line = getline('.')\n    let l:path = getcwd() . substitute(line, '> ', '/', \"\")\n    call system(\"qlmanage -p 2>/dev/null '\" . path . \"'\")\nendfunc\n```\n\nThe cool thing is that I got a plugin for syntax highlighting for qlmanage.\n. Hi, I'm going to attempt to do this this weekend, would you welcome a pull request if I did so?\n. Hey guys, I did get something working but only for mac as its using Mac quicklook feature. If you want I can post that (on vacation so itll take a day or two till I get wifi.\n. Hey guys, this works on Mac OSX. Not ideal but it's something.\n\n```\nlet g:ctrlp_buffer_func = { 'enter': 'CtrlpMaps' }\n\nfunc! CtrlpMaps()\n    nnoremap <buffer> <silent> <c-q> :call <sid>QuickLook()<cr>\nendfunc\n\nfunc! s:QuickLook()\n    let line = getline('.')\n    let l:path = getcwd() . substitute(line, '> ', '/', \"\")\n    call system(\"qlmanage -p 2>/dev/null '\" . path . \"'\")\nendfunc\n```\n\nThe cool thing is that I got a plugin for syntax highlighting for qlmanage.\n. ",
    "isaacseymour": "@JosephFerano did you get anywhere with this?\n. @JosephFerano did you get anywhere with this?\n. ",
    "lucagiovagnoli": "++ this would be a very sweet option\n. ++ this would be a very sweet option\n. ",
    "danielrasmuson": "+1 Any update on this?\n. +1 Any update on this?\n. ",
    "rleger": "+1\n. +1\n. ",
    "htatche": "+1\n. +1\n. ",
    "UncleGoogle": "+1 ones can use the vim 'preview window'\n. +1 ones can use the vim 'preview window'\n. ",
    "crivotz": "+1, good option. +1, good option. ",
    "githorse": "+1. +1. ",
    "kiryph": "I understand. I meant only the initial ordering, the behaviour during typing should be as you said.\n\nMy intention was to get an overview of the most recent files if no buffers are open and otherwise a list of buffers.\n\nSo I would rephrase my question/request. Would it be feasible to add/restrict mixed mode for buffer+mru\n. I didn't know that mru contains more or less all buffers. Ok that seems to be like the behaviour. Thank you for your help.\n. Why I am not supposed to scroll pass what is on the list. Wouldn't it be possible to have two settings: one for the height of the window (g:ctrlp_max_height) and one for the number of accessible items? Sometimes your active window can be smaller than you like for the use of ctrlp.\n\nBTW: Thank you for this awesome plugin\n. I see. If the two suggested settings match, can this resemble the current behaviour/speed?\n\nOnly users who are interested in accessing more items should change the additional setting and would have the speed penalty. However, I would guess this shouldn't be too bad for small number of additional unvisible items (say 20).\n. Well, it would not squeeze all open windows to make space for the ctrlp-window.\n\nI understand that not visible items are not very helpful to narrow down the fuzzy match by extending the search expression by the user. I just use ctrlp also to access the mru list and sometimes I just scroll through them out of curiosity which files I opened recently. Now I learned about the vim built-in command `:oldfiles` which fulfills this purpose. However, I am often reluctant to learn new commands and additional approaches to do the same task.\n\nAnyhow, thank you for your feedback.\n. thank you very much for your commit 6e4fb3b45fa\n. I understand. I meant only the initial ordering, the behaviour during typing should be as you said.\n\nMy intention was to get an overview of the most recent files if no buffers are open and otherwise a list of buffers.\n\nSo I would rephrase my question/request. Would it be feasible to add/restrict mixed mode for buffer+mru\n. I didn't know that mru contains more or less all buffers. Ok that seems to be like the behaviour. Thank you for your help.\n. Why I am not supposed to scroll pass what is on the list. Wouldn't it be possible to have two settings: one for the height of the window (g:ctrlp_max_height) and one for the number of accessible items? Sometimes your active window can be smaller than you like for the use of ctrlp.\n\nBTW: Thank you for this awesome plugin\n. I see. If the two suggested settings match, can this resemble the current behaviour/speed?\n\nOnly users who are interested in accessing more items should change the additional setting and would have the speed penalty. However, I would guess this shouldn't be too bad for small number of additional unvisible items (say 20).\n. Well, it would not squeeze all open windows to make space for the ctrlp-window.\n\nI understand that not visible items are not very helpful to narrow down the fuzzy match by extending the search expression by the user. I just use ctrlp also to access the mru list and sometimes I just scroll through them out of curiosity which files I opened recently. Now I learned about the vim built-in command `:oldfiles` which fulfills this purpose. However, I am often reluctant to learn new commands and additional approaches to do the same task.\n\nAnyhow, thank you for your feedback.\n. thank you very much for your commit 6e4fb3b45fa\n. ",
    "svrishi": "Ah my bad. I was in a chrooted directory and cwd was indeed /src and that confused me over the cachefile name. Sorry about the noise.\n. Ah my bad. I was in a chrooted directory and cwd was indeed /src and that confused me over the cachefile name. Sorry about the noise.\n. ",
    "brablc": "Hi, sorry for late feedback. I just started vim (after a day) and the MRU list was there. I have opened a file (the last one) and it opened. I closed with :q and opened vim again. Now I have called MRU again with this mapping:\n\nnnoremap <Leader>m :CtrlPMRU<cr>\n\nNow the list is empty:\n\n![Screen Shot 2013-02-04 at 21 56 02](https://f.cloud.github.com/assets/841734/125228/a0d7fc98-6f0d-11e2-9e57-e139f1fe1397.png)\n\nFiles in ~/.cache/ctrlp/mru disappeared - even my file cache.txt with datum prefix. Folders have time of running vim.\n\nDo you think some other plugin or something else deletes my .cache folder? Does CtrlP recreate folders immediatelly?\n\nMy plugins:\n\nBundle 'altercation/vim-colors-solarized'\nBundle 'kien/ctrlp.vim'\nBundle 'markabe/bufexplorer'\nBundle 'mileszs/ack.vim'\nBundle 'msanders/snipmate.vim'\nBundle 'scrooloose/nerdcommenter'\nBundle 'tomtom/checksyntax_vim'\nBundle 'tpope/vim-fugitive'\nBundle 'tpope/vim-repeat'\nBundle 'tpope/vim-speeddating'\nBundle 'tpope/vim-surround'\nBundle 'tpope/vim-vividchalk'\nBundle 'tsaleh/vim-matchit'\nBundle 'tsaleh/vim-supertab'\nBundle 'vim-scripts/FavEx'\nBundle 'vim-scripts/Tail-Bundle'\n. All bundles were uptodate, when this happened.\n\nI cannot reproduce it now, the only strange thing I can see is that CtrlP (vim) deletes files that I create in ~/.cache/ctrlp/{.,hist,mru}, but it won't delete the cache.txt and ~/.cache/ctrlp/.DS_Store file.\n\nOutput of :ver (this should be pretty standard MacVim):\n\nVIM - Vi IMproved 7.3 (2010 Aug 15, compiled Sep  1 2012 18:08:47)\nMacOS X (unix) version\nIncluded patches: 1-646\nCompiled by Bjorn Winckler bjorn.winckler@gmail.com\nHuge version with MacVim GUI.  Features included (+) or not (-):\n+arabic +autocmd +balloon_eval +browse ++builtin_terms +byte_offset +cindent +clientserver +clipboard +cmdline_compl +cmdline_hist +cmdline_info +comments +conceal +cryptv +cscope +cursorbind\n+cursorshape +dialog_con_gui +diff +digraphs +dnd -ebcdic +emacs_tags +eval +ex_extra +extra_search +farsi +file_in_path +find_in_path +float +folding -footer +fork() +fullscreen -gettext -hangul_input\n+iconv +insert_expand +jumplist +keymap +langmap +libcall +linebreak +lispindent +listcmds +localmap -lua +menu +mksession +modify_fname +mouse +mouseshape +mouse_dec -mouse_gpm -mouse_jsbterm\n+mouse_netterm -mouse_sysmouse +mouse_xterm +mouse_urxvt +mouse_sgr +multi_byte +multi_lang -mzscheme +netbeans_intg +odbeditor +path_extra +perl +persistent_undo +postscript +printer +profile +python\n-python3 +quickfix +reltime +rightleft +ruby +scrollbind +signs +smartindent -sniff +startuptime +statusline -sun_workshop +syntax +tag_binary +tag_old_static -tag_any_white -tcl +terminfo +termresponse\n+textobjects +title +toolbar +transparency +user_commands +vertsplit +virtualedit +visual +visualextra +viminfo +vreplace +wildignore +wildmenu +windows +writebackup -X11 -xfontset +xim -xsmp\n-xterm_clipboard -xterm_save\n   system vimrc file: \"$VIM/vimrc\"\n     user vimrc file: \"$HOME/.vimrc\"\n      user exrc file: \"$HOME/.exrc\"\n  system gvimrc file: \"$VIM/gvimrc\"\n    user gvimrc file: \"$HOME/.gvimrc\"\n    system menu file: \"$VIMRUNTIME/menu.vim\"\n  fall-back for $VIM: \"/Applications/MacVim.app/Contents/Resources/vim\"\nCompilation: clang -c -I. -Iproto -DHAVE_CONFIG_H -DFEAT_GUI_MACVIM -Wall -Wno-unknown-pragmas -pipe  -DMACOS_X_UNIX -no-cpp-precomp  -g -O2 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1\nLinking: clang   -L.    -L.         -L/usr/local/lib -o Vim -framework Cocoa -framework Carbon      -lncurses  -liconv -framework Cocoa    -fstack-protector -L/usr/local/lib  -L/System/Library/Perl/5.12/d\narwin-thread-multi-2level/CORE -lperl -lm -lutil -lc -framework Python   -framework Ruby\n. Thanks for the tip, I have set the variable and will see whether it does not happen again.\n. Since I have applied this fix I did not have the issue, and I haven't seen any side effects:\n\nlet g:ctrlp_clear_cache_on_exit = 0\n\nHappy ctrlp user.\n. Hi, sorry for late feedback. I just started vim (after a day) and the MRU list was there. I have opened a file (the last one) and it opened. I closed with :q and opened vim again. Now I have called MRU again with this mapping:\n\nnnoremap <Leader>m :CtrlPMRU<cr>\n\nNow the list is empty:\n\n![Screen Shot 2013-02-04 at 21 56 02](https://f.cloud.github.com/assets/841734/125228/a0d7fc98-6f0d-11e2-9e57-e139f1fe1397.png)\n\nFiles in ~/.cache/ctrlp/mru disappeared - even my file cache.txt with datum prefix. Folders have time of running vim.\n\nDo you think some other plugin or something else deletes my .cache folder? Does CtrlP recreate folders immediatelly?\n\nMy plugins:\n\nBundle 'altercation/vim-colors-solarized'\nBundle 'kien/ctrlp.vim'\nBundle 'markabe/bufexplorer'\nBundle 'mileszs/ack.vim'\nBundle 'msanders/snipmate.vim'\nBundle 'scrooloose/nerdcommenter'\nBundle 'tomtom/checksyntax_vim'\nBundle 'tpope/vim-fugitive'\nBundle 'tpope/vim-repeat'\nBundle 'tpope/vim-speeddating'\nBundle 'tpope/vim-surround'\nBundle 'tpope/vim-vividchalk'\nBundle 'tsaleh/vim-matchit'\nBundle 'tsaleh/vim-supertab'\nBundle 'vim-scripts/FavEx'\nBundle 'vim-scripts/Tail-Bundle'\n. All bundles were uptodate, when this happened.\n\nI cannot reproduce it now, the only strange thing I can see is that CtrlP (vim) deletes files that I create in ~/.cache/ctrlp/{.,hist,mru}, but it won't delete the cache.txt and ~/.cache/ctrlp/.DS_Store file.\n\nOutput of :ver (this should be pretty standard MacVim):\n\nVIM - Vi IMproved 7.3 (2010 Aug 15, compiled Sep  1 2012 18:08:47)\nMacOS X (unix) version\nIncluded patches: 1-646\nCompiled by Bjorn Winckler bjorn.winckler@gmail.com\nHuge version with MacVim GUI.  Features included (+) or not (-):\n+arabic +autocmd +balloon_eval +browse ++builtin_terms +byte_offset +cindent +clientserver +clipboard +cmdline_compl +cmdline_hist +cmdline_info +comments +conceal +cryptv +cscope +cursorbind\n+cursorshape +dialog_con_gui +diff +digraphs +dnd -ebcdic +emacs_tags +eval +ex_extra +extra_search +farsi +file_in_path +find_in_path +float +folding -footer +fork() +fullscreen -gettext -hangul_input\n+iconv +insert_expand +jumplist +keymap +langmap +libcall +linebreak +lispindent +listcmds +localmap -lua +menu +mksession +modify_fname +mouse +mouseshape +mouse_dec -mouse_gpm -mouse_jsbterm\n+mouse_netterm -mouse_sysmouse +mouse_xterm +mouse_urxvt +mouse_sgr +multi_byte +multi_lang -mzscheme +netbeans_intg +odbeditor +path_extra +perl +persistent_undo +postscript +printer +profile +python\n-python3 +quickfix +reltime +rightleft +ruby +scrollbind +signs +smartindent -sniff +startuptime +statusline -sun_workshop +syntax +tag_binary +tag_old_static -tag_any_white -tcl +terminfo +termresponse\n+textobjects +title +toolbar +transparency +user_commands +vertsplit +virtualedit +visual +visualextra +viminfo +vreplace +wildignore +wildmenu +windows +writebackup -X11 -xfontset +xim -xsmp\n-xterm_clipboard -xterm_save\n   system vimrc file: \"$VIM/vimrc\"\n     user vimrc file: \"$HOME/.vimrc\"\n      user exrc file: \"$HOME/.exrc\"\n  system gvimrc file: \"$VIM/gvimrc\"\n    user gvimrc file: \"$HOME/.gvimrc\"\n    system menu file: \"$VIMRUNTIME/menu.vim\"\n  fall-back for $VIM: \"/Applications/MacVim.app/Contents/Resources/vim\"\nCompilation: clang -c -I. -Iproto -DHAVE_CONFIG_H -DFEAT_GUI_MACVIM -Wall -Wno-unknown-pragmas -pipe  -DMACOS_X_UNIX -no-cpp-precomp  -g -O2 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1\nLinking: clang   -L.    -L.         -L/usr/local/lib -o Vim -framework Cocoa -framework Carbon      -lncurses  -liconv -framework Cocoa    -fstack-protector -L/usr/local/lib  -L/System/Library/Perl/5.12/d\narwin-thread-multi-2level/CORE -lperl -lm -lutil -lc -framework Python   -framework Ruby\n. Thanks for the tip, I have set the variable and will see whether it does not happen again.\n. Since I have applied this fix I did not have the issue, and I haven't seen any side effects:\n\nlet g:ctrlp_clear_cache_on_exit = 0\n\nHappy ctrlp user.\n. ",
    "gklingler": "I've the the same problem. My plugins in common with the plugins listed above are \n- ervandew/supertab (from ervandew!)\n- tpope/vim-fugitive\n. I've the the same problem. My plugins in common with the plugins listed above are \n- ervandew/supertab (from ervandew!)\n- tpope/vim-fugitive\n. ",
    "alexeymuranov": "I've got this problem with version 1.79 from vim.org, i\"ll try using the HEAD.\n. I've got this problem with version 1.79 from vim.org, i\"ll try using the HEAD.\n. ",
    "brandonhilkert": "Thanks for the insight. I added the following to my .bashrc to disable control flow and all is well now:\n\n```\nstty -ixon -ixoff\n```\n. Thanks for the insight. I added the following to my .bashrc to disable control flow and all is well now:\n\n```\nstty -ixon -ixoff\n```\n. ",
    "jithin1987": "It does work. Stupid me, failed to find them.\n. It does work. Stupid me, failed to find them.\n. ",
    "damienjbyrne": "Don't feel bad @jithin1987, four years later and I had to google this issue to find the obvious too.  :-). Don't feel bad @jithin1987, four years later and I had to google this issue to find the obvious too.  :-). ",
    "bling": "it's not optimal but you could simulate most of this functionality using symlinks.\n. as in:\n\n```\nmkdir ~/dev\ncd ~/dev\nln -s /path/to/app/foo/models foo-models\nln -s /path/to/app/bar/models bar-models\n```\n\nthen just set g:ctrlp_follow_symlinks=1 in your vimrc.\n. it's not optimal but you could simulate most of this functionality using symlinks.\n. as in:\n\n```\nmkdir ~/dev\ncd ~/dev\nln -s /path/to/app/foo/models foo-models\nln -s /path/to/app/bar/models bar-models\n```\n\nthen just set g:ctrlp_follow_symlinks=1 in your vimrc.\n. ",
    "darthdeus": "Can you be more specific? Do you mean symlinking `app/assets/javascripts/foo/models` under `app/assets/javascripts/models/foo` and `app/assets/javascripts/bar/models` under `app/assets/javascripts/models/bar`?\n. Can you be more specific? Do you mean symlinking `app/assets/javascripts/foo/models` under `app/assets/javascripts/models/foo` and `app/assets/javascripts/bar/models` under `app/assets/javascripts/models/bar`?\n. ",
    "svec": "I second the original request: having a way to search an arbitrary number of directories, without using symlinks, would be fantastic!\n. I second the original request: having a way to search an arbitrary number of directories, without using symlinks, would be fantastic!\n. ",
    "mitchellhenke": "This would be great for scripting CtrlP to search specific directories.\n. This would be great for scripting CtrlP to search specific directories.\n. ",
    "AgentCosmic": "+1 for this. I have a project with many files and folder. Would be much easier to search for files with this feature.\n. It's not so bad when you do it a few times. But having to do it 10, 20 times can be a real bother.\nReally hope you can improve it because I use CtrlP a lot. Thanks!\n. +1 for this. I have a project with many files and folder. Would be much easier to search for files with this feature.\n. It's not so bad when you do it a few times. But having to do it 10, 20 times can be a real bother.\nReally hope you can improve it because I use CtrlP a lot. Thanks!\n. ",
    "chibicode": ":+1 for the original request!\n. :+1 for the original request!\n. ",
    "sirbrillig": "+1 for this or a global variable that allows setting a set of default directories in which to begin the search.\n. +1 for this or a global variable that allows setting a set of default directories in which to begin the search.\n. ",
    "akarl": "+1 !\n. @chris-lesage I like it\n. +1 !\n. @chris-lesage I like it\n. ",
    "borko84": "+1\n. +1\n. ",
    "chris-lesage": "Alternatively, an option to search the default \"path\" variable that :find uses. Path allows you to append multiple directories with :set path+=/more/dirs/here/\n. Alternatively, an option to search the default \"path\" variable that :find uses. Path allows you to append multiple directories with :set path+=/more/dirs/here/\n. ",
    "bohrshaw": "+1\n. +1\n. ",
    "nshkg": "+\n. +\n. ",
    "dreamsComeTrue": "Can't wait to find this implementation! :) +1. Can't wait to find this implementation! :) +1. ",
    "Melkster": "+2. +2. ",
    "roseperrone": "Thanks!\n. Thanks!\n. ",
    "pyrat": "Thanks!\n. Thanks!\n. ",
    "lyuts": "The reason for I did that is that <esc> or <c-c> never worked for me. I'm not mapping those shortcuts and pressing them just makes brings focus back to the file while keeping ctrlp still open.\n. I did bisecting on git commits and found the first bad commit starting from which the closing is not working for me. It is c8d02c5902d4c4a87895eb4aba560f8aaf00046e. Taking a look at it. Sorry for this pull request noise.\n. Hi Kien,\nThis is the function that closes the ctrlp panel:\n\n``` vim\nfunc! s:PrtExit()\n    if has('autocmd') && s:currwin \n        exe s:currwin.'winc w' \n    else \n        cal s:BufOpen('ControlP', 'del')\n    endif                               \nendfunc\n```\n\nIn my case the execution enters the branch which executes wincmd and the closing never happens. The second way of closing with BUfOpen works fine. What's the case that made it necessary to have the wincmd closing variant?\n. The reason for I did that is that <esc> or <c-c> never worked for me. I'm not mapping those shortcuts and pressing them just makes brings focus back to the file while keeping ctrlp still open.\n. I did bisecting on git commits and found the first bad commit starting from which the closing is not working for me. It is c8d02c5902d4c4a87895eb4aba560f8aaf00046e. Taking a look at it. Sorry for this pull request noise.\n. Hi Kien,\nThis is the function that closes the ctrlp panel:\n\n``` vim\nfunc! s:PrtExit()\n    if has('autocmd') && s:currwin \n        exe s:currwin.'winc w' \n    else \n        cal s:BufOpen('ControlP', 'del')\n    endif                               \nendfunc\n```\n\nIn my case the execution enters the branch which executes wincmd and the closing never happens. The second way of closing with BUfOpen works fine. What's the case that made it necessary to have the wincmd closing variant?\n. ",
    "thenickcox": "That was exactly the issue, and that fix worked. Thanks so much! And thanks for the great plug in!\n. That was exactly the issue, and that fix worked. Thanks so much! And thanks for the great plug in!\n. ",
    "AguirreIF": "Using version 1.79, commit `c1646e3c28d75bcc834af4836f4c6e12296ba891`.\nTried with both setting in .vimrc without any other option. I can consistently reproduce it:\n- Start vim in the `/tmp` directory.\n- With `let g:ctrlp_custom_ignore = '\\/tmp'` I get  `== NO ENTRIES ==` as expected.\n- With `let g:ctrlp_custom_ignore = {'dir':'\\/tmp'}` it shows all the files in the directory.\n\nWould be possible to make `g:ctrlp_custom_ignore` as a `wildignore` pattern and replace this variable inmediatly before the `globpath` call and restored inmediatly after, so the results from the call are already filtered? Like:\n\n``` vim\n    let s:wildignore_save = &wildignore\n    let &wildignore = s:custom_wildignore\n    let entries = split(globpath(a:dirs, s:glob), \"\\n\")\n    let &wildignore = s:wildignore_save\n    unlet s:wildignore_save\n```\n\nThanks!\n. Using version 1.79, commit `c1646e3c28d75bcc834af4836f4c6e12296ba891`.\nTried with both setting in .vimrc without any other option. I can consistently reproduce it:\n- Start vim in the `/tmp` directory.\n- With `let g:ctrlp_custom_ignore = '\\/tmp'` I get  `== NO ENTRIES ==` as expected.\n- With `let g:ctrlp_custom_ignore = {'dir':'\\/tmp'}` it shows all the files in the directory.\n\nWould be possible to make `g:ctrlp_custom_ignore` as a `wildignore` pattern and replace this variable inmediatly before the `globpath` call and restored inmediatly after, so the results from the call are already filtered? Like:\n\n``` vim\n    let s:wildignore_save = &wildignore\n    let &wildignore = s:custom_wildignore\n    let entries = split(globpath(a:dirs, s:glob), \"\\n\")\n    let &wildignore = s:wildignore_save\n    unlet s:wildignore_save\n```\n\nThanks!\n. ",
    "vito-c": "Hi so I fixed the issue by commenting out the ctrlp_user_command below.. thanks a lot for the suggesting and writing such an awesome plugin :+1: \n      \"  let g:ctrlp_user_command = {\n      \"      \\ 'types': {\n      \"          \\ 1: ['.git', 'cd %s && git ls-files . --cached --exclude-standard --others'],\n      \"          \\ 2: ['.hg', 'hg --cwd %s locate -I .'],\n      \"      \\ },\n      \"      \\ 'fallback': 'find %s -type f'\n      \"  \\ }\n. I already tried filename search as well. Same result. I have max results set to 0 I also tried it with 100,000 and Foo.file still doesn't show up. I tried scrolling through the list and it's not in there. I pressed f5 after I searched and it's not in there. But if I type :find Foo.file it works fine :)\n. so it only works when I do ^foo.file in regex mode but it should really work when you are in file mode and search for foo.file ... foo.file should be the first result\n. Hi so I fixed the issue by commenting out the ctrlp_user_command below.. thanks a lot for the suggesting and writing such an awesome plugin :+1: \n      \"  let g:ctrlp_user_command = {\n      \"      \\ 'types': {\n      \"          \\ 1: ['.git', 'cd %s && git ls-files . --cached --exclude-standard --others'],\n      \"          \\ 2: ['.hg', 'hg --cwd %s locate -I .'],\n      \"      \\ },\n      \"      \\ 'fallback': 'find %s -type f'\n      \"  \\ }\n. I already tried filename search as well. Same result. I have max results set to 0 I also tried it with 100,000 and Foo.file still doesn't show up. I tried scrolling through the list and it's not in there. I pressed f5 after I searched and it's not in there. But if I type :find Foo.file it works fine :)\n. so it only works when I do ^foo.file in regex mode but it should really work when you are in file mode and search for foo.file ... foo.file should be the first result\n. ",
    "euoia": "What are you finding happens instead? If I 1) make a vertical split, 2)\nensure the cursor is in the rightmost split, 3) open a file which is not\nalready open in another pane - then it opens in the rightmost pane.\n\nOn 12 March 2013 17:21, Michael Robinson notifications@github.com wrote:\n\n> I'd like to know how I might make CtrlP open a file in the currently\n> active pane, I've tried to show what I mean in the screenshot below.\n> \n> [image: Is this even a sane question?]https://f.cloud.github.com/assets/1000759/250991/c2007bde-8b5a-11e2-8a6d-c16ca1a1129b.png\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/kien/ctrlp.vim/issues/378\n> .\n. What are you finding happens instead? If I 1) make a vertical split, 2)\nensure the cursor is in the rightmost split, 3) open a file which is not\nalready open in another pane - then it opens in the rightmost pane.\n\nOn 12 March 2013 17:21, Michael Robinson notifications@github.com wrote:\n\n> I'd like to know how I might make CtrlP open a file in the currently\n> active pane, I've tried to show what I mean in the screenshot below.\n> \n> [image: Is this even a sane question?]https://f.cloud.github.com/assets/1000759/250991/c2007bde-8b5a-11e2-8a6d-c16ca1a1129b.png\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/kien/ctrlp.vim/issues/378\n> .\n. ",
    "mislav": "Thanks for responding. I've taken a deeper look and it didn't turn out to be the fault of CtrlP but my tmux config which was sending an extra escape sequence with the keystroke and cancelled the CtrlP prompt. Sorry for the false report\n. Thanks for responding. I've taken a deeper look and it didn't turn out to be the fault of CtrlP but my tmux config which was sending an extra escape sequence with the keystroke and cancelled the CtrlP prompt. Sorry for the false report\n. ",
    "jturmel": "Yeah, noticed that dup bug shortly after I did the pull request, I think I've got a working solution. I'm a complete newb when it comes to vimscript and then of course not that familiar with ctrlp but I think this seems to be the cleanest way.\n. Thanks, I've updated my local version of the plugin, thanks for doing this.\n. @jgallen23 you need to use the tag or buffertag extension for ctrlp, it will search files for the word\n. Yeah, noticed that dup bug shortly after I did the pull request, I think I've got a working solution. I'm a complete newb when it comes to vimscript and then of course not that familiar with ctrlp but I think this seems to be the cleanest way.\n. Thanks, I've updated my local version of the plugin, thanks for doing this.\n. @jgallen23 you need to use the tag or buffertag extension for ctrlp, it will search files for the word\n. ",
    "usovalx": "Thanks a lot!\n. Thanks a lot!\n. ",
    "losingkeys": "I think it's something to do with the last opened file.  I still see that file duplicated with this option:\n\n``` viml\nlet g:ctrlp_user_command=['.git', 'cd %s && git ls-files -moc | uniq']\n```\n. Odd, I still can't get it to give me duplicates.  I'll read the docs on `git ls-files` and give it another shot later, thanks!\n. Ohh, nice catch.  sort | uniq does the trick :)\n\nOn Apr 2, 2013, at 9:03 AM, kien notifications@github.com wrote:\n\n> Well, uniq only removes successive identical lines, so it'll fail to remove duplicates if the lines simply aren't next to each other.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n. I think it's something to do with the last opened file.  I still see that file duplicated with this option:\n\n``` viml\nlet g:ctrlp_user_command=['.git', 'cd %s && git ls-files -moc | uniq']\n```\n. Odd, I still can't get it to give me duplicates.  I'll read the docs on `git ls-files` and give it another shot later, thanks!\n. Ohh, nice catch.  sort | uniq does the trick :)\n\nOn Apr 2, 2013, at 9:03 AM, kien notifications@github.com wrote:\n\n> Well, uniq only removes successive identical lines, so it'll fail to remove duplicates if the lines simply aren't next to each other.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n. ",
    "UncleBill": "Sorry , my mistake, `ctrlP` do ignore `.git` folder.Please close this issue.\n. Sorry , my mistake, `ctrlP` do ignore `.git` folder.Please close this issue.\n. ",
    "nchase": "yes! see the `g:ctrlp_match_window` configuration and add to your vimrc, e.g. `let g:ctrlp_match_window = 'order:ttb'`.\n. yes! see the `g:ctrlp_match_window` configuration and add to your vimrc, e.g. `let g:ctrlp_match_window = 'order:ttb'`.\n. ",
    "amiorin": "Try this map\n\n``` vim\nnnoremap <silent> sh :h<CR>:CtrlPTag<CR>\n```\n\nThe regex search is better. Too many results with the fuzzy search. `<C-r>`\n. Thanks @kien. Also <c-space> should be available for binding. c-@ requires the shift on my keyboard.\nI would prefer **s**:ToogleMRURelative() and the entry in the manual. I can make the pull request if you wish.\n. Try this map\n\n``` vim\nnnoremap <silent> sh :h<CR>:CtrlPTag<CR>\n```\n\nThe regex search is better. Too many results with the fuzzy search. `<C-r>`\n. Thanks @kien. Also <c-space> should be available for binding. c-@ requires the shift on my keyboard.\nI would prefer **s**:ToogleMRURelative() and the entry in the manual. I can make the pull request if you wish.\n. ",
    "trusktr": "That's awesome.\n. That's awesome.\n. ",
    "gregmuellegger": "Damit, sorry for bothering.\n\nIs there anyway that I can send you some money for your work? Or do you have a favourite charity you want to support?\n. Damit, sorry for bothering.\n\nIs there anyway that I can send you some money for your work? Or do you have a favourite charity you want to support?\n. ",
    "madx": "Thanks for your pointers, I already had the `$HOME/.cache/ctrlp/` directory with the right permissions.\n\nI noticed there was a `mru` in there and the MRU search was working indeed.\n\nAfter setting `g:ctrlp_cache_dir` explicitly in my `.vimrc` it worked again. So there may be an issue with default values (maybe a hardcoded `/home`)\n\nI'm closing this since my problem has been worked around.\n\nThanks \n. You're right, I guess I also copied my bashrc when switching to OSX,\n`XDG_CACHE_HOME` is defined to `/home/madx/.cache`.\n\nThanks again! (Oh, BTW, CtrlP is really a fantastic Vim plugin!)\n\n2013/4/10 kien notifications@github.com\n\n> What does :echo $XDG_CACHE_HOME return for you? There's no hardcoded base\n> dir, but $XDG_CACHE_HOME is the other default and it's used if it exists.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/kien/ctrlp.vim/issues/395#issuecomment-16177767\n> .\n\n## \n\nFran\u00e7ois Vaux\nhttp://madx.me/ - http://synbioz.com/\n. Thanks for your pointers, I already had the `$HOME/.cache/ctrlp/` directory with the right permissions.\n\nI noticed there was a `mru` in there and the MRU search was working indeed.\n\nAfter setting `g:ctrlp_cache_dir` explicitly in my `.vimrc` it worked again. So there may be an issue with default values (maybe a hardcoded `/home`)\n\nI'm closing this since my problem has been worked around.\n\nThanks \n. You're right, I guess I also copied my bashrc when switching to OSX,\n`XDG_CACHE_HOME` is defined to `/home/madx/.cache`.\n\nThanks again! (Oh, BTW, CtrlP is really a fantastic Vim plugin!)\n\n2013/4/10 kien notifications@github.com\n\n> What does :echo $XDG_CACHE_HOME return for you? There's no hardcoded base\n> dir, but $XDG_CACHE_HOME is the other default and it's used if it exists.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/kien/ctrlp.vim/issues/395#issuecomment-16177767\n> .\n\n## \n\nFran\u00e7ois Vaux\nhttp://madx.me/ - http://synbioz.com/\n. ",
    "dusans": "This works if i do for instance \n:CtrlPLine _vimrc\nbut i cant get it working with\n:CtrlPLine expand(\"%\")\nWhat am i doing wrong?\n. U should always write down your solution.\n. This works if i do for instance \n:CtrlPLine _vimrc\nbut i cant get it working with\n:CtrlPLine expand(\"%\")\nWhat am i doing wrong?\n. U should always write down your solution.\n. ",
    "flavius": "\"outside of CtrlP\" is misleading. Does CtrlP maintain its own CWD? Do you mean \"outside of vim\"? Do you mean `cd` or `lcd`?\n\nIt may be easy to you, as you've written it, you have \"inside knowledge\", but for outsiders it's not.\n. Do I have to beg for improvements in the documentation? We both like CtrlP and want it to become better. The paragraph I've mentioned is confusing - I still don't understand exactly where CtrlP starts searching. It's not clear what 'r' does, nor what the default 'ra' does. Is there any precedence rule?\n\nPlease address these issues in the documentation. Anyone would benefit from the improvement.\n. \"outside of CtrlP\" is misleading. Does CtrlP maintain its own CWD? Do you mean \"outside of vim\"? Do you mean `cd` or `lcd`?\n\nIt may be easy to you, as you've written it, you have \"inside knowledge\", but for outsiders it's not.\n. Do I have to beg for improvements in the documentation? We both like CtrlP and want it to become better. The paragraph I've mentioned is confusing - I still don't understand exactly where CtrlP starts searching. It's not clear what 'r' does, nor what the default 'ra' does. Is there any precedence rule?\n\nPlease address these issues in the documentation. Anyone would benefit from the improvement.\n. ",
    "elmart": "I don't understand it either. The fact that not many people complain only means that most of the people doesn't take the burden to report an issue.\n. I don't understand it either. The fact that not many people complain only means that most of the people doesn't take the burden to report an issue.\n. ",
    "redondos": "Pull request sent: https://github.com/kien/ctrlp.vim/pull/559\n. Pull request sent: https://github.com/kien/ctrlp.vim/pull/559\n. ",
    "oryband": ":+1: Thank you! The pull request really helps. Please merge it!\n. :+1:\nYeah, when using a global tags file (with easytags plugin for example), using tag mode vomits all tags to ctrlp window. I would like the option to see just the local project's tags.\n\nAnother solution would be to have a local tags file instead, and alter the `set tags` option to use it instead.\n. :+1:\n. :+1: Thank you! The pull request really helps. Please merge it!\n. :+1:\nYeah, when using a global tags file (with easytags plugin for example), using tag mode vomits all tags to ctrlp window. I would like the option to see just the local project's tags.\n\nAnother solution would be to have a local tags file instead, and alter the `set tags` option to use it instead.\n. :+1:\n. ",
    "yeban": "Ah. Thanks, @kien. I wasn't aware of this. This setup is something I came up with very recently so easy to avoid. Thanks again for CtrlP. It's been amazing for me.\n. Ah. Thanks, @kien. I wasn't aware of this. This setup is something I came up with very recently so easy to avoid. Thanks again for CtrlP. It's been amazing for me.\n. ",
    "happypeter": "> You can use ; in filename mode to filter the directories in front of the filename.\n\nI didn't realized I could do this when I was trying the `;`, thx, but maybe we can mark this somewhere in the help file. This is cool, but for me, not as cool as what I had with fuzzyfinder.\n\nWhat is practically sweeter for my daily use is that we can make this work in both filename and path mode, and what comes after `;` can either be part of a filename or dir names. It's to me not only more powerful but also more natural. \n. @d11wtq Yes. For me this is a live saving thing. It means the order doesn't matter any more.\n. @kien Thx, did not do enough homework, only searched `;`, not `semicolon` :smile: \n. > You can use ; in filename mode to filter the directories in front of the filename.\n\nI didn't realized I could do this when I was trying the `;`, thx, but maybe we can mark this somewhere in the help file. This is cool, but for me, not as cool as what I had with fuzzyfinder.\n\nWhat is practically sweeter for my daily use is that we can make this work in both filename and path mode, and what comes after `;` can either be part of a filename or dir names. It's to me not only more powerful but also more natural. \n. @d11wtq Yes. For me this is a live saving thing. It means the order doesn't matter any more.\n. @kien Thx, did not do enough homework, only searched `;`, not `semicolon` :smile: \n. ",
    "neitanod": "So...  does CtrlP have an AND operator?\n. I second this request!  I use :Ex for this but It would be a life saver if I could use ctrlp.\n. So...  does CtrlP have an AND operator?\n. I second this request!  I use :Ex for this but It would be a life saver if I could use ctrlp.\n. ",
    "lsiden": "Well I have changed them and watched what they do, but they're still\ncryptic to me.  If it were that obvious I wouldn't have to ask.\n\nPlease tell me what the different types of braces mean, and why do the\nlabels in the angular brackets on the left and right switch places when you\nchange them? Are they supposed to be like a rotating ring?\n\nOn Fri, May 3, 2013 at 11:28 AM, kien notifications@github.com wrote:\n\n> They are actually pretty much self-explanatory and extremely obvious once\n> you do something that changes them. You don't really need to care what they\n> indicate from the start so I don't think documentation is necessary.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/kien/ctrlp.vim/issues/401#issuecomment-17400564\n> .\n\n## \n\n-Larry Siden\n\n\"It's unfortunate that Americans have only two political parties to choose\nfrom.  One is made up of psychos; the other, wimps.\"\n- a friend who moved to the US from Italy\n\n\u201cThe United States is a nation of laws - poorly written and randomly\nenforced.\"\n-Frank Zappa, 1940-1993\n. What does \"prt\" mean?\n\nOn Fri, May 3, 2013 at 1:30 PM, kien notifications@github.com wrote:\n\n> Yes, that's correct. The \"ring\" rotates when you use <c-f> or <c-b>. And\n> prt changes when you use <s-tab>. It might be nice to have all these\n> explained throughout but it's really not necessary. You don't need to\n> understand them to use anything, and your first guesses are most probably\n> correct.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/kien/ctrlp.vim/issues/401#issuecomment-17407370\n> .\n\n## \n\n-Larry Siden\n\n\"It's unfortunate that Americans have only two political parties to choose\nfrom.  One is made up of psychos; the other, wimps.\"\n- a friend who moved to the US from Italy\n\n\u201cThe United States is a nation of laws - poorly written and randomly\nenforced.\"\n-Frank Zappa, 1940-1993\n. Guess I'm not crazy after all.\nOn Sep 24, 2013 10:18 AM, \"jsit\" notifications@github.com wrote:\n\n> I agree that this is weird and non-obvious.\n> \n> The most confusing thing about it for me is that the \"ring\" \"moves\",\n> rather than the highlight simply moving from left to right, as one would\n> expect on window tabs.\n> \n> The characters between the \"tabs\" are cryptic and make the status line\n> difficult to read. Why >={? Why not simply a vertical bar (|) between\n> each \"tab\"? I've been using CtrlP for a while now and I still don't know\n> what that <-> is at the far right of the status line.\n> \n> Is there an option to define the separator characters? I looked but didn't\n> see one.\n> \n> Great plugin, the interaction just strikes me as bizarre.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/kien/ctrlp.vim/issues/401#issuecomment-25007813\n> .\n. @jsit, I guess @kien is saying \"I designed this plug-in this for myself.\n If you don't like it, feel free to fork your own copy of the project and\nmodify it to your liking.\"\n\nThat's the charm of open source.  )  It could be a good way for you or\nsomeone to get started learning how to write vim scripts.\n\nYou could send your improvements to @kien as patches (diff) first to see if\nhe'll apply them, then fork your own project if he declines.  The GPL gives\nyou and everyone that right.\n\nEither way, please notify me if you post something new, and if your fork a\nnew project, be sure to re-share your improvements with the same GPL\nlicense.\n\nMeanwhile, I've found ctrl-P incredibly useful, even with it's little\nidiosyncrasies, and thank @kien for taking the time to do it and share it.\n\nOn Tue, Sep 24, 2013 at 10:28 PM, kien notifications@github.com wrote:\n\n> I can see that there's always someone who finds it confusing, at least at\n> first.\n> \n> But I also don't think it's worth documented. You don't need to understand\n> the statusline to do anything. Plus the help is already long as it is,\n> people barely read it.\n> \n> @jsit https://github.com/jsit they aren't tabs because there are more\n> than 3 extensions. And you'll see what <-> is once you use the feature\n> that changes it.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/kien/ctrlp.vim/issues/401#issuecomment-25058225\n> .\n\n## \n\n-Larry Siden\n\n\"It's unfortunate that Americans have only two political parties to choose\nfrom.  One is made up of psychos; the other, wimps.\"\n- a friend who moved to the US from Italy\n\n\u201cThe United States is a nation of laws - poorly written and randomly\nenforced.\"\n-Frank Zappa, 1940-1993\n. @kien, you can drop the sarcastic tone.  I forgot that the status line is\nconfigurable.  I haven't spent much time investigating it.  It's not what\nthey pay me for.  I have bigger fish to fry.\n\nOn Wed, Sep 25, 2013 at 9:55 AM, kien notifications@github.com wrote:\n\n> @lsiden https://github.com/lsiden using an option (g:ctrlp_status_func)\n> to customize the statusline is a bit different from forking and making\n> change directly to the code. The former is what I am saying and mean.\n> \n> Why do you think there's an option in the first place? Why don't I just\n> not add it and tell everyone to fork the project, like you're saying? The\n> option was there precisely because I figured some people would want to\n> change the statusline, that whatever I chose wouldn't satisfy everyone.\n> \n> @jsit https://github.com/jsit is for aesthetic good enough a reason?\n> Because that was the reason the <prev>={current}=<next> was chosen.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/kien/ctrlp.vim/issues/401#issuecomment-25087533\n> .\n\n## \n\n-Larry Siden\n\n\"It's unfortunate that Americans have only two political parties to choose\nfrom.  One is made up of psychos; the other, wimps.\"\n- a friend who moved to the US from Italy\n\n\u201cThe United States is a nation of laws - poorly written and randomly\nenforced.\"\n-Frank Zappa, 1940-1993\n. I still have BufExplorer and used to use it exclusively, but it's takes a\nlong time to come up if I have more than a few buffers.  Can't remember if\nit was always like that or what I may have changed that made it so slow.\n That's how I learned about ctrlp.\n\nI have to mention, ctrlp, too, can take a bit longer to come up when I\nstart it in Mixed mode as I've been trying since yesterday.\n\nOn Fri, May 17, 2013 at 10:16 AM, kien notifications@github.com wrote:\n\n> Well, there are good, full featured plugins for managing buffers, so why\n> build it into ctrlp? But people keep requesting this from time to time, I\n> think I may just add it. There's also a .vimrc snippet which you can use\n> right now, in #280 https://github.com/kien/ctrlp.vim/issues/280.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/kien/ctrlp.vim/issues/407#issuecomment-18063860\n> .\n\n## \n\n-Larry Siden\n\n\"It's unfortunate that Americans have only two political parties to choose\nfrom.  One is made up of psychos; the other, wimps.\"\n- a friend who moved to the US from Italy\n\n\u201cThe United States is a nation of laws - poorly written and randomly\nenforced.\"\n-Frank Zappa, 1940-1993\n. I already started using the script you pointed me to so there's no need to\nsweat it.  I agree that BufExplorer would be better for that but it takes\na long time to open once there are more than a few buffers.  Thanks.\nOn May 28, 2013 12:44 AM, \"kien\" notifications@github.com wrote:\n\n> Mixed mode basically loads all three File, Buffer, and MRU modes and the\n> mixing also takes some more time. So naturally, it's slower than each of\n> the modes.\n> \n> Anyway, buffer deletion may take a while since there are a few things I\n> want to do first. I've also been a bit busy lately. If you don't want to\n> wait, you can just create a mapping to delete a buffer in Buffer mode. All\n> you have to do is grabbing the buffer name from the current line.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/kien/ctrlp.vim/issues/407#issuecomment-18529255\n> .\n. Not a show-stopper, but thanks for replying.\n\nI supposed that there could be something in the _termcap_ on the Server but\nI doubt it because I set it all up myself and have never messed with the\ntermcaps.\n\nOn my side of the company firewall I have to depend on Putty as my terminal\nemulator.  (My company requires that I use only their XP-provisioned laptop\nthey provided me with to connect to their VPN.)  I did a brief check but\ncouldn't find anything in the session setup.\n\nNo matter.  Thanks.\n\nOn Thu, Jun 27, 2013 at 11:57 PM, kien notifications@github.com wrote:\n\n> So I completely forgot about <esc> being mapped can cause this. See #432https://github.com/kien/ctrlp.vim/issues/432.\n> Also, since <F5> have never been reported before, it looks like your\n> terminal may be sending some extra escape sequences.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/kien/ctrlp.vim/issues/428#issuecomment-20169256\n> .\n\n## \n\n-Larry Siden\n\n\"It's unfortunate that Americans have only two political parties to choose\nfrom.  One is made up of psychos; the other, wimps.\"\n- a friend who moved to the US from Italy\n\n\u201cThe United States is a nation of laws - poorly written and randomly\nenforced.\"\n-Frank Zappa, 1940-1993\n. Well I have changed them and watched what they do, but they're still\ncryptic to me.  If it were that obvious I wouldn't have to ask.\n\nPlease tell me what the different types of braces mean, and why do the\nlabels in the angular brackets on the left and right switch places when you\nchange them? Are they supposed to be like a rotating ring?\n\nOn Fri, May 3, 2013 at 11:28 AM, kien notifications@github.com wrote:\n\n> They are actually pretty much self-explanatory and extremely obvious once\n> you do something that changes them. You don't really need to care what they\n> indicate from the start so I don't think documentation is necessary.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/kien/ctrlp.vim/issues/401#issuecomment-17400564\n> .\n\n## \n\n-Larry Siden\n\n\"It's unfortunate that Americans have only two political parties to choose\nfrom.  One is made up of psychos; the other, wimps.\"\n- a friend who moved to the US from Italy\n\n\u201cThe United States is a nation of laws - poorly written and randomly\nenforced.\"\n-Frank Zappa, 1940-1993\n. What does \"prt\" mean?\n\nOn Fri, May 3, 2013 at 1:30 PM, kien notifications@github.com wrote:\n\n> Yes, that's correct. The \"ring\" rotates when you use <c-f> or <c-b>. And\n> prt changes when you use <s-tab>. It might be nice to have all these\n> explained throughout but it's really not necessary. You don't need to\n> understand them to use anything, and your first guesses are most probably\n> correct.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/kien/ctrlp.vim/issues/401#issuecomment-17407370\n> .\n\n## \n\n-Larry Siden\n\n\"It's unfortunate that Americans have only two political parties to choose\nfrom.  One is made up of psychos; the other, wimps.\"\n- a friend who moved to the US from Italy\n\n\u201cThe United States is a nation of laws - poorly written and randomly\nenforced.\"\n-Frank Zappa, 1940-1993\n. Guess I'm not crazy after all.\nOn Sep 24, 2013 10:18 AM, \"jsit\" notifications@github.com wrote:\n\n> I agree that this is weird and non-obvious.\n> \n> The most confusing thing about it for me is that the \"ring\" \"moves\",\n> rather than the highlight simply moving from left to right, as one would\n> expect on window tabs.\n> \n> The characters between the \"tabs\" are cryptic and make the status line\n> difficult to read. Why >={? Why not simply a vertical bar (|) between\n> each \"tab\"? I've been using CtrlP for a while now and I still don't know\n> what that <-> is at the far right of the status line.\n> \n> Is there an option to define the separator characters? I looked but didn't\n> see one.\n> \n> Great plugin, the interaction just strikes me as bizarre.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/kien/ctrlp.vim/issues/401#issuecomment-25007813\n> .\n. @jsit, I guess @kien is saying \"I designed this plug-in this for myself.\n If you don't like it, feel free to fork your own copy of the project and\nmodify it to your liking.\"\n\nThat's the charm of open source.  )  It could be a good way for you or\nsomeone to get started learning how to write vim scripts.\n\nYou could send your improvements to @kien as patches (diff) first to see if\nhe'll apply them, then fork your own project if he declines.  The GPL gives\nyou and everyone that right.\n\nEither way, please notify me if you post something new, and if your fork a\nnew project, be sure to re-share your improvements with the same GPL\nlicense.\n\nMeanwhile, I've found ctrl-P incredibly useful, even with it's little\nidiosyncrasies, and thank @kien for taking the time to do it and share it.\n\nOn Tue, Sep 24, 2013 at 10:28 PM, kien notifications@github.com wrote:\n\n> I can see that there's always someone who finds it confusing, at least at\n> first.\n> \n> But I also don't think it's worth documented. You don't need to understand\n> the statusline to do anything. Plus the help is already long as it is,\n> people barely read it.\n> \n> @jsit https://github.com/jsit they aren't tabs because there are more\n> than 3 extensions. And you'll see what <-> is once you use the feature\n> that changes it.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/kien/ctrlp.vim/issues/401#issuecomment-25058225\n> .\n\n## \n\n-Larry Siden\n\n\"It's unfortunate that Americans have only two political parties to choose\nfrom.  One is made up of psychos; the other, wimps.\"\n- a friend who moved to the US from Italy\n\n\u201cThe United States is a nation of laws - poorly written and randomly\nenforced.\"\n-Frank Zappa, 1940-1993\n. @kien, you can drop the sarcastic tone.  I forgot that the status line is\nconfigurable.  I haven't spent much time investigating it.  It's not what\nthey pay me for.  I have bigger fish to fry.\n\nOn Wed, Sep 25, 2013 at 9:55 AM, kien notifications@github.com wrote:\n\n> @lsiden https://github.com/lsiden using an option (g:ctrlp_status_func)\n> to customize the statusline is a bit different from forking and making\n> change directly to the code. The former is what I am saying and mean.\n> \n> Why do you think there's an option in the first place? Why don't I just\n> not add it and tell everyone to fork the project, like you're saying? The\n> option was there precisely because I figured some people would want to\n> change the statusline, that whatever I chose wouldn't satisfy everyone.\n> \n> @jsit https://github.com/jsit is for aesthetic good enough a reason?\n> Because that was the reason the <prev>={current}=<next> was chosen.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/kien/ctrlp.vim/issues/401#issuecomment-25087533\n> .\n\n## \n\n-Larry Siden\n\n\"It's unfortunate that Americans have only two political parties to choose\nfrom.  One is made up of psychos; the other, wimps.\"\n- a friend who moved to the US from Italy\n\n\u201cThe United States is a nation of laws - poorly written and randomly\nenforced.\"\n-Frank Zappa, 1940-1993\n. I still have BufExplorer and used to use it exclusively, but it's takes a\nlong time to come up if I have more than a few buffers.  Can't remember if\nit was always like that or what I may have changed that made it so slow.\n That's how I learned about ctrlp.\n\nI have to mention, ctrlp, too, can take a bit longer to come up when I\nstart it in Mixed mode as I've been trying since yesterday.\n\nOn Fri, May 17, 2013 at 10:16 AM, kien notifications@github.com wrote:\n\n> Well, there are good, full featured plugins for managing buffers, so why\n> build it into ctrlp? But people keep requesting this from time to time, I\n> think I may just add it. There's also a .vimrc snippet which you can use\n> right now, in #280 https://github.com/kien/ctrlp.vim/issues/280.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/kien/ctrlp.vim/issues/407#issuecomment-18063860\n> .\n\n## \n\n-Larry Siden\n\n\"It's unfortunate that Americans have only two political parties to choose\nfrom.  One is made up of psychos; the other, wimps.\"\n- a friend who moved to the US from Italy\n\n\u201cThe United States is a nation of laws - poorly written and randomly\nenforced.\"\n-Frank Zappa, 1940-1993\n. I already started using the script you pointed me to so there's no need to\nsweat it.  I agree that BufExplorer would be better for that but it takes\na long time to open once there are more than a few buffers.  Thanks.\nOn May 28, 2013 12:44 AM, \"kien\" notifications@github.com wrote:\n\n> Mixed mode basically loads all three File, Buffer, and MRU modes and the\n> mixing also takes some more time. So naturally, it's slower than each of\n> the modes.\n> \n> Anyway, buffer deletion may take a while since there are a few things I\n> want to do first. I've also been a bit busy lately. If you don't want to\n> wait, you can just create a mapping to delete a buffer in Buffer mode. All\n> you have to do is grabbing the buffer name from the current line.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/kien/ctrlp.vim/issues/407#issuecomment-18529255\n> .\n. Not a show-stopper, but thanks for replying.\n\nI supposed that there could be something in the _termcap_ on the Server but\nI doubt it because I set it all up myself and have never messed with the\ntermcaps.\n\nOn my side of the company firewall I have to depend on Putty as my terminal\nemulator.  (My company requires that I use only their XP-provisioned laptop\nthey provided me with to connect to their VPN.)  I did a brief check but\ncouldn't find anything in the session setup.\n\nNo matter.  Thanks.\n\nOn Thu, Jun 27, 2013 at 11:57 PM, kien notifications@github.com wrote:\n\n> So I completely forgot about <esc> being mapped can cause this. See #432https://github.com/kien/ctrlp.vim/issues/432.\n> Also, since <F5> have never been reported before, it looks like your\n> terminal may be sending some extra escape sequences.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/kien/ctrlp.vim/issues/428#issuecomment-20169256\n> .\n\n## \n\n-Larry Siden\n\n\"It's unfortunate that Americans have only two political parties to choose\nfrom.  One is made up of psychos; the other, wimps.\"\n- a friend who moved to the US from Italy\n\n\u201cThe United States is a nation of laws - poorly written and randomly\nenforced.\"\n-Frank Zappa, 1940-1993\n. ",
    "jsit": "I agree that this is weird and non-obvious.\n\nThe most confusing thing about it for me is that the \"ring\" \"moves\", rather than the highlight simply moving from left to right, as one would expect on window tabs.\n\nThe characters between the \"tabs\" are cryptic and make the status line difficult to read. Why `>={`? Why not simply a vertical bar (`|`) between each \"tab\"? I've been using CtrlP for a while now and I still don't know what that `<->` is at the far right of the status line.\n\nIs there an option to define the separator characters? I looked but didn't see one.\n\nGreat plugin, the interaction just strikes me as bizarre.\n. Even if the characters make some kind of sense that I fail to understand,\nI'd still _like_ to understand why they were chosen.\n\nOn Wed, Sep 25, 2013 at 8:00 AM, Larry Siden notifications@github.comwrote:\n\n> @jsit, I guess @kien is saying \"I designed this plug-in this for myself.\n> If you don't like it, feel free to fork your own copy of the project and\n> modify it to your liking.\"\n> \n> That's the charm of open source. ) It could be a good way for you or\n> someone to get started learning how to write vim scripts.\n> \n> You could send your improvements to @kien as patches (diff) first to see\n> if\n> he'll apply them, then fork your own project if he declines. The GPL gives\n> you and everyone that right.\n> \n> Either way, please notify me if you post something new, and if your fork a\n> new project, be sure to re-share your improvements with the same GPL\n> license.\n> \n> Meanwhile, I've found ctrl-P incredibly useful, even with it's little\n> idiosyncrasies, and thank @kien for taking the time to do it and share it.\n> \n> On Tue, Sep 24, 2013 at 10:28 PM, kien notifications@github.com wrote:\n> \n> > I can see that there's always someone who finds it confusing, at least\n> > at\n> > first.\n> > \n> > But I also don't think it's worth documented. You don't need to\n> > understand\n> > the statusline to do anything. Plus the help is already long as it is,\n> > people barely read it.\n> > \n> > @jsit https://github.com/jsit they aren't tabs because there are more\n> > than 3 extensions. And you'll see what <-> is once you use the feature\n> > that changes it.\n> > \n> > \u2014\n> > Reply to this email directly or view it on GitHub<\n> > https://github.com/kien/ctrlp.vim/issues/401#issuecomment-25058225>\n> > .\n> \n> ## \n> \n> -Larry Siden\n> \n> \"It's unfortunate that Americans have only two political parties to choose\n> from. One is made up of psychos; the other, wimps.\"\n> - a friend who moved to the US from Italy\n> \n> \u201cThe United States is a nation of laws - poorly written and randomly\n> enforced.\"\n> -Frank Zappa, 1940-1993\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/kien/ctrlp.vim/issues/401#issuecomment-25080303\n> .\n. I agree that this is weird and non-obvious.\n\nThe most confusing thing about it for me is that the \"ring\" \"moves\", rather than the highlight simply moving from left to right, as one would expect on window tabs.\n\nThe characters between the \"tabs\" are cryptic and make the status line difficult to read. Why `>={`? Why not simply a vertical bar (`|`) between each \"tab\"? I've been using CtrlP for a while now and I still don't know what that `<->` is at the far right of the status line.\n\nIs there an option to define the separator characters? I looked but didn't see one.\n\nGreat plugin, the interaction just strikes me as bizarre.\n. Even if the characters make some kind of sense that I fail to understand,\nI'd still _like_ to understand why they were chosen.\n\nOn Wed, Sep 25, 2013 at 8:00 AM, Larry Siden notifications@github.comwrote:\n\n> @jsit, I guess @kien is saying \"I designed this plug-in this for myself.\n> If you don't like it, feel free to fork your own copy of the project and\n> modify it to your liking.\"\n> \n> That's the charm of open source. ) It could be a good way for you or\n> someone to get started learning how to write vim scripts.\n> \n> You could send your improvements to @kien as patches (diff) first to see\n> if\n> he'll apply them, then fork your own project if he declines. The GPL gives\n> you and everyone that right.\n> \n> Either way, please notify me if you post something new, and if your fork a\n> new project, be sure to re-share your improvements with the same GPL\n> license.\n> \n> Meanwhile, I've found ctrl-P incredibly useful, even with it's little\n> idiosyncrasies, and thank @kien for taking the time to do it and share it.\n> \n> On Tue, Sep 24, 2013 at 10:28 PM, kien notifications@github.com wrote:\n> \n> > I can see that there's always someone who finds it confusing, at least\n> > at\n> > first.\n> > \n> > But I also don't think it's worth documented. You don't need to\n> > understand\n> > the statusline to do anything. Plus the help is already long as it is,\n> > people barely read it.\n> > \n> > @jsit https://github.com/jsit they aren't tabs because there are more\n> > than 3 extensions. And you'll see what <-> is once you use the feature\n> > that changes it.\n> > \n> > \u2014\n> > Reply to this email directly or view it on GitHub<\n> > https://github.com/kien/ctrlp.vim/issues/401#issuecomment-25058225>\n> > .\n> \n> ## \n> \n> -Larry Siden\n> \n> \"It's unfortunate that Americans have only two political parties to choose\n> from. One is made up of psychos; the other, wimps.\"\n> - a friend who moved to the US from Italy\n> \n> \u201cThe United States is a nation of laws - poorly written and randomly\n> enforced.\"\n> -Frank Zappa, 1940-1993\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/kien/ctrlp.vim/issues/401#issuecomment-25080303\n> .\n. ",
    "zhuweifeng314": "Kind of figured out the meanings ( just my understanding ). \n\nprt: indicates that the focus is on the prompt, not on the match window. When you use `<s-tab>` ( shift + tab ) to change the focus to the match window, `prt` will be `win` ( which indicates match window ).\n\n`<->`: when you use `<c-z>` to mark item in the match window, `<->` will display the number of items you marked.\n. Kind of figured out the meanings ( just my understanding ). \n\nprt: indicates that the focus is on the prompt, not on the match window. When you use `<s-tab>` ( shift + tab ) to change the focus to the match window, `prt` will be `win` ( which indicates match window ).\n\n`<->`: when you use `<c-z>` to mark item in the match window, `<->` will display the number of items you marked.\n. ",
    "markwu": "BTW, I use CtrlP from master branch through Vundle. My vim is 7.3.831 compiled from source under Ubuntu 13.04.\n. Yes, it works when I test it under bash shell, I use the following command inside my .vim for testing\n\n```\nfind . | /home/mark/.vim/bin/matcher bc\n```\n\nAnd comes out the following output\n\n```\n./.git/objects/bc\n./bundle/vim-abolish/.git/objects/bc\n./bundle/csapprox\n./bundle/css3-mod\n./bundle/phpfolding.vim/.git/objects/bc\n./bundle/tagbar-phpctags/.git/objects/bc\n./bundle/phpcomplete.vim/.git/objects/bc\n./bundle/colorizer\n./bundle/ctrlp.vim\n./.git/objects/49/bc059187a61dcdd166f059fd170a289c652e2f\n```\n\nIt seems no problem at all.\n\nI see, I will try cmatcher.  \n\nBut, I still want to know if there any hints for me to debug what's going? I try put some echo statements inside the scritps above, it echos nothing. Seems the FuzzyMatcher never been called. Weird.\n\nThanks for your help.\n. Okay, I think I found the problem, it is because my cache dir is only readable. I delete it, and the issue solved.\n\n@JazzCore , I definitely will try your cmatcher and thanks for your help.\n\nI think this issue can be closed.\n. BTW, I use CtrlP from master branch through Vundle. My vim is 7.3.831 compiled from source under Ubuntu 13.04.\n. Yes, it works when I test it under bash shell, I use the following command inside my .vim for testing\n\n```\nfind . | /home/mark/.vim/bin/matcher bc\n```\n\nAnd comes out the following output\n\n```\n./.git/objects/bc\n./bundle/vim-abolish/.git/objects/bc\n./bundle/csapprox\n./bundle/css3-mod\n./bundle/phpfolding.vim/.git/objects/bc\n./bundle/tagbar-phpctags/.git/objects/bc\n./bundle/phpcomplete.vim/.git/objects/bc\n./bundle/colorizer\n./bundle/ctrlp.vim\n./.git/objects/49/bc059187a61dcdd166f059fd170a289c652e2f\n```\n\nIt seems no problem at all.\n\nI see, I will try cmatcher.  \n\nBut, I still want to know if there any hints for me to debug what's going? I try put some echo statements inside the scritps above, it echos nothing. Seems the FuzzyMatcher never been called. Weird.\n\nThanks for your help.\n. Okay, I think I found the problem, it is because my cache dir is only readable. I delete it, and the issue solved.\n\n@JazzCore , I definitely will try your cmatcher and thanks for your help.\n\nI think this issue can be closed.\n. ",
    "galtenberg": "Hallelujah, that is a life saver, thank you!\n. Hallelujah, that is a life saver, thank you!\n. ",
    "unphased": "Great, thanks.\n. Amazing! thanks!\n. Great, thanks.\n. Amazing! thanks!\n. ",
    "sherwinyu": "Actually, now that you mention it, I'm not sure why I still use hidden buffers now that I use ctrl-p. Based on your suggestion, I could turn off hidden buffers (`set buffhidden=delete`), and then just use CtrlP's buffer search to jump to active buffers (because all buffers are active)\n\nI guess my more general question is: is there any reason to hide buffers if I never switch to hidden buffers? (Previously I used `:bu buffer name` with autocomplete, but now I can just use CtrlP). \n. Re: tagging active buffers -- do you mean by tagging them in the CtrlP menu? That would be a great feature also!\n. Actually, now that you mention it, I'm not sure why I still use hidden buffers now that I use ctrl-p. Based on your suggestion, I could turn off hidden buffers (`set buffhidden=delete`), and then just use CtrlP's buffer search to jump to active buffers (because all buffers are active)\n\nI guess my more general question is: is there any reason to hide buffers if I never switch to hidden buffers? (Previously I used `:bu buffer name` with autocomplete, but now I can just use CtrlP). \n. Re: tagging active buffers -- do you mean by tagging them in the CtrlP menu? That would be a great feature also!\n. ",
    "mtrudel": "Delicious! Thank you very much.\n. Delicious! Thank you very much.\n. ",
    "stefanosc": ":+1:  for buffer deletion \nI read all the previous requests and I would love to see this feature built into ctrlp, thank you for awesome plugin :smile: \n. :+1:  for buffer deletion \nI read all the previous requests and I would love to see this feature built into ctrlp, thank you for awesome plugin :smile: \n. ",
    "jwmann": ":+1:  For Buffer Deletion as well.\n\nI tried to use the snippet above but I have an OS mapping to Ctrl + 2 which obviously makes that mapping not useful.\n\nThere doesn't seem to be any other mapping combinations available to use though..\n\nFor the record, someone _did_ make an extension but it doesn't let you change the mapping.\nAlthough it _does_ let you mark multiple buffers with `<c-z>` which is neat.\nYou can find it here - https://github.com/d11wtq/ctrlp_bdelete.vim\n\nIt would be great if this was built-in though.\n. :+1:  For Buffer Deletion as well.\n\nI tried to use the snippet above but I have an OS mapping to Ctrl + 2 which obviously makes that mapping not useful.\n\nThere doesn't seem to be any other mapping combinations available to use though..\n\nFor the record, someone _did_ make an extension but it doesn't let you change the mapping.\nAlthough it _does_ let you mark multiple buffers with `<c-z>` which is neat.\nYou can find it here - https://github.com/d11wtq/ctrlp_bdelete.vim\n\nIt would be great if this was built-in though.\n. ",
    "EDmitry": "Is it because there is no particular sorting when we limit the matches? Does it work this way: we walk through all files until the match is found and if the number of matches reaches the limit we never look at other file names?\n. Just one more idea popped in my brain: can we just sort all files in lexical order and only then run search starting from the beginning? That would solve the problem.\nLooks like it's possible by using g:ctrlp_user_command so that I could first sort files by date and then sort them by the last component so that it would work properly for me. Sigh. This is why I still use peepOpen. I wish there was a unified search file engine written in c that could be used form ctrlP and other similar plugins. I guess with g:ctrlp_match_func I will be able to call an external app, right? I will probably implement something like this engine myself when I have a chance.\n. Is it because there is no particular sorting when we limit the matches? Does it work this way: we walk through all files until the match is found and if the number of matches reaches the limit we never look at other file names?\n. Just one more idea popped in my brain: can we just sort all files in lexical order and only then run search starting from the beginning? That would solve the problem.\nLooks like it's possible by using g:ctrlp_user_command so that I could first sort files by date and then sort them by the last component so that it would work properly for me. Sigh. This is why I still use peepOpen. I wish there was a unified search file engine written in c that could be used form ctrlP and other similar plugins. I guess with g:ctrlp_match_func I will be able to call an external app, right? I will probably implement something like this engine myself when I have a chance.\n. ",
    "rainytooo": "when I working on my vimwiki file ,I press ctrl +p , show this\n\n```\nError detected while processing function ctrlp#init..ctrlp#setlines..ctrlp#files..<SNR>70_GlobPath..ctrlp#dirnfile..<SNR>70_usrign:\nError detected while processing function ctrlp#init..ctrlp#setlines..ctrlp#files..<SNR>70_GlobPath..<SNR>70_GlobPath..ctrlp#dirnfile..<SNR>70_usrign:\nline    1:\nE33: No previous substitute regular expression\nE33: No previous substitute regular expression\n......\nand more\n```\n. Thanks very much ,I'm still thinking about whether to give my vimrc , you already get it,and find my mistake,\nit Solved, thanks again . \n. when I working on my vimwiki file ,I press ctrl +p , show this\n\n```\nError detected while processing function ctrlp#init..ctrlp#setlines..ctrlp#files..<SNR>70_GlobPath..ctrlp#dirnfile..<SNR>70_usrign:\nError detected while processing function ctrlp#init..ctrlp#setlines..ctrlp#files..<SNR>70_GlobPath..<SNR>70_GlobPath..ctrlp#dirnfile..<SNR>70_usrign:\nline    1:\nE33: No previous substitute regular expression\nE33: No previous substitute regular expression\n......\nand more\n```\n. Thanks very much ,I'm still thinking about whether to give my vimrc , you already get it,and find my mistake,\nit Solved, thanks again . \n. ",
    "cesarfigueroa": "Is there a way to hide only ctrlp\u2019s statusline? `prt  path  <mru>={ files }=<buf> <->` is all it ever displays.\n. I tried that, and now it displays `ControlP [-]`.\n. Aside from the function names, exactly like that.\n. Alright. Thanks for the help.\n. Is there a way to hide only ctrlp\u2019s statusline? `prt  path  <mru>={ files }=<buf> <->` is all it ever displays.\n. I tried that, and now it displays `ControlP [-]`.\n. Aside from the function names, exactly like that.\n. Alright. Thanks for the help.\n. ",
    "manasthakur": "For me, the solution posted above works fine (I am not getting any statusline after that). However, considering that this is an older post, is there a simpler solution now?\n. For me, the solution posted above works fine (I am not getting any statusline after that). However, considering that this is an older post, is there a simpler solution now?\n. ",
    "openjck": "What's the point of the statusbar, anyway? Like @cesarfigueroa I always see the same cryptic text. I'm new to ctrlp so I'm probably just missing something.. What's the point of the statusbar, anyway? Like @cesarfigueroa I always see the same cryptic text. I'm new to ctrlp so I'm probably just missing something.. ",
    "nomasprime": "Thanks @kien, was just missing the :CtrlPBufTag command.\n. Thanks @kien, was just missing the :CtrlPBufTag command.\n. ",
    "bijoutrouvaille": "My standard situation is unlikely to be different from most people. I may have several projects open at a time, and I was hoping to avoid refreshing caches for all of them, when I just need that done for one. Or maybe you already have this sort of optimization built in a different way?\n. My standard situation is unlikely to be different from most people. I may have several projects open at a time, and I was hoping to avoid refreshing caches for all of them, when I just need that done for one. Or maybe you already have this sort of optimization built in a different way?\n. ",
    "olalonde": "Thanks!\n. Thanks!\n. ",
    "hobbes3": "Weird that the Terminal `Vim` can paste it. I think it's because Terminal is actually pasting each key individually (there is a slight delay between displaying each character), whereas MacVim is actually calling `:call paste#Paste()` (see [here](https://github.com/b4winckler/macvim/blob/master/runtime/autoload/paste.vim) for the source code).\n\nWell thanks for pointing me to the docs. By the way you can't seem to map anything starting with `<Leader>` since it just prints out `\\` (even if you hold it and press another key).\n. Got it. I set it to `<c-v>` to mimic Window's paste shortcut.\n\nThanks for your help!\n. Weird that the Terminal `Vim` can paste it. I think it's because Terminal is actually pasting each key individually (there is a slight delay between displaying each character), whereas MacVim is actually calling `:call paste#Paste()` (see [here](https://github.com/b4winckler/macvim/blob/master/runtime/autoload/paste.vim) for the source code).\n\nWell thanks for pointing me to the docs. By the way you can't seem to map anything starting with `<Leader>` since it just prints out `\\` (even if you hold it and press another key).\n. Got it. I set it to `<c-v>` to mimic Window's paste shortcut.\n\nThanks for your help!\n. ",
    "Shougo": "> I was curious as to why j and k aren't used to move up and down the list of matching files, instead of the current ctrl-j and ctrl-k? To me, I would like to stay in the state of using j, k (which is normal for vim) to do the movement.\n\nIt is impossible. Because, ctrlp.vim has not mode.\nIf your feature is implemented, you cannot input \"j\" or \"k\" in ctrlp.vim.\n. \"j\", \"k\", and letters key mappings are used for narrowing in ctrlp.vim.\nSo you cannot custom letters key mappings.\n. I think this is Vim's feature.\nctrlp maps `<ESC>` key. So in terminal Vim, using `<ESC>` key sequence does not work.\n\n> as it stopped him from using the arrow keys in insert mode.\n\nYes. You should not use arrow keys.\n. I think this feature can not be implemented.\nBecause, ctrlp.vim uses original key-mappings by narrowing.\n. I think `<ESC>` is mapped in ctrlp buffer. I think it is feature...\n. This repository is not maintained.\n\nhttps://github.com/ctrlpvim/ctrlp.vim is maintained.  You should report the problem in it.\n. I think your idea is difficult to implement.\nBecause, ctrlp is insert mode only plugin.\n. @cj It is \"matcher_hide_hidden_files\" feature.\n. Please read the README.. It is not ctrlp problem.\nYou must convert files line format.\n. https://unix.stackexchange.com/questions/137842/what-is-the-point-of-ctrl-s\n. > I was curious as to why j and k aren't used to move up and down the list of matching files, instead of the current ctrl-j and ctrl-k? To me, I would like to stay in the state of using j, k (which is normal for vim) to do the movement.\n\nIt is impossible. Because, ctrlp.vim has not mode.\nIf your feature is implemented, you cannot input \"j\" or \"k\" in ctrlp.vim.\n. \"j\", \"k\", and letters key mappings are used for narrowing in ctrlp.vim.\nSo you cannot custom letters key mappings.\n. I think this is Vim's feature.\nctrlp maps `<ESC>` key. So in terminal Vim, using `<ESC>` key sequence does not work.\n\n> as it stopped him from using the arrow keys in insert mode.\n\nYes. You should not use arrow keys.\n. I think this feature can not be implemented.\nBecause, ctrlp.vim uses original key-mappings by narrowing.\n. I think `<ESC>` is mapped in ctrlp buffer. I think it is feature...\n. This repository is not maintained.\n\nhttps://github.com/ctrlpvim/ctrlp.vim is maintained.  You should report the problem in it.\n. I think your idea is difficult to implement.\nBecause, ctrlp is insert mode only plugin.\n. @cj It is \"matcher_hide_hidden_files\" feature.\n. Please read the README.. It is not ctrlp problem.\nYou must convert files line format.\n. https://unix.stackexchange.com/questions/137842/what-is-the-point-of-ctrl-s\n. ",
    "dbarros": "Thanks, @Shougo. Like I said, I was not complaining, just curious, and knew there would be a reason.\n. Thanks, @Shougo. Like I said, I was not complaining, just curious, and knew there would be a reason.\n. ",
    "trevor": "thanks for taking the the time to explain @kien, I'd forgotten ctrl and ctrl-shift map the same in the terminal.\n\nI went with ctrl-alt to get the desired behavior and it works well:\n\n``` vim\n\" ALT-CTRL-P\n\" <esc> style here for use with \"option key acts as +ESC\" in iterm2\nautocmd FileType * nnoremap <esc><c-p> :CtrlPTag<cr>\n```\n. thanks for taking the the time to explain @kien, I'd forgotten ctrl and ctrl-shift map the same in the terminal.\n\nI went with ctrl-alt to get the desired behavior and it works well:\n\n``` vim\n\" ALT-CTRL-P\n\" <esc> style here for use with \"option key acts as +ESC\" in iterm2\nautocmd FileType * nnoremap <esc><c-p> :CtrlPTag<cr>\n```\n. ",
    "sgur": "> But mostly this doesn't seem to fit in with the other g:ctrlp_user_command settings, replacing a function as opposed to running a command with system().\n\nI agree with your opinion that this pull request is not suitable for the use of `g:ctrlp_user_command`.\n\nI close this request and consider better way.\n. > But mostly this doesn't seem to fit in with the other g:ctrlp_user_command settings, replacing a function as opposed to running a command with system().\n\nI agree with your opinion that this pull request is not suitable for the use of `g:ctrlp_user_command`.\n\nI close this request and consider better way.\n. ",
    "liangfeng": "Got it. Thanks for the reply. \n. Got it. Thanks for the reply. \n. ",
    "rene-aguirre": "Hello Kien,\n\nIt had being really hard for me to find out the root cause of why CtrlP stopped working for me after I pulled and build from latest vim repository.\n\nWhile the issue is not actually blamed on CtrlP I think it would be a good idea to keep it open for visibility purposes.\n\nThanks for the great plugin BTW!\n. After a recent vim/ctrlp update I'm just getting and empty list of files on when using CtrlP.\n\nI use g:ctrlp_user_command for speeding up .git repository file matching.\n\nI'm usually using latest vim from development repository, compiled with mingw 32 bits, running on Windows 7 (with few extras like Python support).\n. Yes, now you understand my frustration when searching for fixes, first thing I did is to check if the issue had being reported.\n\nI was not able to find initially nothing as there are no open issues related at this point, so I'd like to save some time for others CrlP users :-) , furthermore, it would be nice to have a quick follow up thread (so watching the thread for a fix is easier than updating/building and testing in a regular basis).\n. Hello Kien,\n\nIt had being really hard for me to find out the root cause of why CtrlP stopped working for me after I pulled and build from latest vim repository.\n\nWhile the issue is not actually blamed on CtrlP I think it would be a good idea to keep it open for visibility purposes.\n\nThanks for the great plugin BTW!\n. After a recent vim/ctrlp update I'm just getting and empty list of files on when using CtrlP.\n\nI use g:ctrlp_user_command for speeding up .git repository file matching.\n\nI'm usually using latest vim from development repository, compiled with mingw 32 bits, running on Windows 7 (with few extras like Python support).\n. Yes, now you understand my frustration when searching for fixes, first thing I did is to check if the issue had being reported.\n\nI was not able to find initially nothing as there are no open issues related at this point, so I'd like to save some time for others CrlP users :-) , furthermore, it would be nice to have a quick follow up thread (so watching the thread for a fix is easier than updating/building and testing in a regular basis).\n. ",
    "zdm": "gvim-x64-7.3.1258 on windows8-x64 produce following errors:\n![capture-1](https://f.cloud.github.com/assets/1025608/725870/11c0711c-e0ae-11e2-9ce5-f4950a83c340.jpg)\n\non linux vim-x64-7.3.1259 works fine\n. gvim-x64-7.3.1258 on windows8-x64 produce following errors:\n![capture-1](https://f.cloud.github.com/assets/1025608/725870/11c0711c-e0ae-11e2-9ce5-f4950a83c340.jpg)\n\non linux vim-x64-7.3.1259 works fine\n. ",
    "dragonxlwang": "hope this thread is not buried yet. is this feature scheduled to be done any soon? Thanks,\n. hope this thread is not buried yet. is this feature scheduled to be done any soon? Thanks,\n. ",
    "rr-": "When I remove the `<esc>` mapping, hitting arrow keys results in strings like `0A`, `0B` etc showing up in the file name input box.\n\nThe same `&term` works fine if I use it locally (instead of having connected through SSH).\nI tried using all sorts of `&term` on SSH itself, going from `cons25` and `ansi` up to `rxvt-256color`. Ctrlp is always the only thing that arrows are breaking on - the only difference is whether it prints `[A` or `0A` in the file name box.\nNot using arrows is not an option, that should be up to me for decide.\n\n`Ctrl+V + Up arrow` = `^[[A`, both local and on SSH, on `xterm-256color` which is what I want to use.\n`Ctrl+V + Up arrow` = `^[0A`, however. That happens when I hit these keys inside vim, instead of shell.\n`ttimeoutlen` = `-1`.\n. `timeoutlen` = `1000`. Tinkering with both `timeoutlen` and `ttimeoutlen` option doesn't seem to solve the problem. PuTTy works okay, with its `&term` = `cygwin`... Problem occurs only for this particular combo: MinTTY+SSH. :cry:\n. When I remove the `<esc>` mapping, hitting arrow keys results in strings like `0A`, `0B` etc showing up in the file name input box.\n\nThe same `&term` works fine if I use it locally (instead of having connected through SSH).\nI tried using all sorts of `&term` on SSH itself, going from `cons25` and `ansi` up to `rxvt-256color`. Ctrlp is always the only thing that arrows are breaking on - the only difference is whether it prints `[A` or `0A` in the file name box.\nNot using arrows is not an option, that should be up to me for decide.\n\n`Ctrl+V + Up arrow` = `^[[A`, both local and on SSH, on `xterm-256color` which is what I want to use.\n`Ctrl+V + Up arrow` = `^[0A`, however. That happens when I hit these keys inside vim, instead of shell.\n`ttimeoutlen` = `-1`.\n. `timeoutlen` = `1000`. Tinkering with both `timeoutlen` and `ttimeoutlen` option doesn't seem to solve the problem. PuTTy works okay, with its `&term` = `cygwin`... Problem occurs only for this particular combo: MinTTY+SSH. :cry:\n. ",
    "marcinn": "I had same issue when tmux's default terminal was set to `tmux-256color`. Leaving the default one (a `screen` in my case) solved the issue.. I had same issue when tmux's default terminal was set to `tmux-256color`. Leaving the default one (a `screen` in my case) solved the issue.. ",
    "artfulrobot": "Set mine to screen-256color to get it working.. Set mine to screen-256color to get it working.. ",
    "toupeira": "Well, to quote Bram Moolenaar's signature: \"Nothing is impossible for the man who doesn't have to do it.\" ;-)\nI realize you can't use Vim's prompt and would have to implement your own, but it's definitely possible, as you can see from all the other plugins that did the same. But I can understand if this is not a big priority for you right now.\n. Okay I understand.\nOn Jul 5, 2013 3:19 AM, \"kien\" notifications@github.com wrote:\n\n> In a larger sense, yes, anything is possible. What I mean is that it's\n> impossible with the way ctrlp operates now which is only in Normal mode.\n> I'd have to change to a completely different inputting method, and rewrite\n> much of ctrlp's core, just so the input prompt could be moved to the top\n> along with the match window.\n> \n> Also, ctrlp's interface is directly based on cmd-t's and lusty explorer's,\n> in both of these you can't move the input prompt. Only in plugins that use\n> Insert mode for inputting, the input prompt can be moved. Again, I mean\n> among the plugins that I know of.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/kien/ctrlp.vim/issues/435#issuecomment-20497874\n> .\n. Ah ok, I didn't realize I'd have to press Enter first. I was using FuzzyFinder previously and was expecting CtrlP to work similarly, but I think there's a big difference in that CtrlP will always do recursive searches. Or is there a mode which will only complete one path component at a time, similar to how filename completion works in the shell?\n. Okay fair enough. Anyway, I found some other problems with CtrlP and have now switched again to Unite ;-)\n. To be fair though, Unite's fuzzy matching is still pretty basic and doesn't\nwork nearly as well as CtrlP's.\nOn Jul 5, 2013 3:57 AM, \"kien\" notifications@github.com wrote:\n\n> Since you mention it, if I was happy with unite back then, ctrlp would\n> have never been released or even started. It's a good thing that unite has\n> improved a lot and now has many features ctrlp has. And I mean that. I'll\n> switch to a different plugin or a different editor myself, if it better\n> suits my needs.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/kien/ctrlp.vim/issues/436#issuecomment-20498491\n> .\n. Well, to quote Bram Moolenaar's signature: \"Nothing is impossible for the man who doesn't have to do it.\" ;-)\nI realize you can't use Vim's prompt and would have to implement your own, but it's definitely possible, as you can see from all the other plugins that did the same. But I can understand if this is not a big priority for you right now.\n. Okay I understand.\nOn Jul 5, 2013 3:19 AM, \"kien\" notifications@github.com wrote:\n\n> In a larger sense, yes, anything is possible. What I mean is that it's\n> impossible with the way ctrlp operates now which is only in Normal mode.\n> I'd have to change to a completely different inputting method, and rewrite\n> much of ctrlp's core, just so the input prompt could be moved to the top\n> along with the match window.\n> \n> Also, ctrlp's interface is directly based on cmd-t's and lusty explorer's,\n> in both of these you can't move the input prompt. Only in plugins that use\n> Insert mode for inputting, the input prompt can be moved. Again, I mean\n> among the plugins that I know of.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/kien/ctrlp.vim/issues/435#issuecomment-20497874\n> .\n. Ah ok, I didn't realize I'd have to press Enter first. I was using FuzzyFinder previously and was expecting CtrlP to work similarly, but I think there's a big difference in that CtrlP will always do recursive searches. Or is there a mode which will only complete one path component at a time, similar to how filename completion works in the shell?\n. Okay fair enough. Anyway, I found some other problems with CtrlP and have now switched again to Unite ;-)\n. To be fair though, Unite's fuzzy matching is still pretty basic and doesn't\nwork nearly as well as CtrlP's.\nOn Jul 5, 2013 3:57 AM, \"kien\" notifications@github.com wrote:\n\n> Since you mention it, if I was happy with unite back then, ctrlp would\n> have never been released or even started. It's a good thing that unite has\n> improved a lot and now has many features ctrlp has. And I mean that. I'll\n> switch to a different plugin or a different editor myself, if it better\n> suits my needs.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/kien/ctrlp.vim/issues/436#issuecomment-20498491\n> .\n. ",
    "flyingfishercn": "THX, Kien. Everything is ok now\n. By now, I went to bundle/ctrlp,  and \"git checkout 1.79\" solved this problem.\n. My android project contains lots of files. such as follows:\nhardware\nkernel\nvendor\ndevelopment\nframeworks\n\nand so on.  I only want to work in some sub-directory under hardware and vendor , or some framework else.\nwhat can i do. Have you considered to add these new feature.???\n\nlookupfile.vim use a temp file which store files path in it,  the temp file could use these shell command\n\nfind hardware >>filenametags\nfind vendor/qcom >> filenametags\n\nand lookupfile use filenametags as it's  source and find file path.\n. @kien , I think this may be cool....\n. THX, Kien. Everything is ok now\n. By now, I went to bundle/ctrlp,  and \"git checkout 1.79\" solved this problem.\n. My android project contains lots of files. such as follows:\nhardware\nkernel\nvendor\ndevelopment\nframeworks\n\nand so on.  I only want to work in some sub-directory under hardware and vendor , or some framework else.\nwhat can i do. Have you considered to add these new feature.???\n\nlookupfile.vim use a temp file which store files path in it,  the temp file could use these shell command\n\nfind hardware >>filenametags\nfind vendor/qcom >> filenametags\n\nand lookupfile use filenametags as it's  source and find file path.\n. @kien , I think this may be cool....\n. ",
    "tmelz": "Upon further testing, this appears to break certain functionality. Closing request until I resolve issues.\n. Nope, was an issue with something else. Looks fine.\n. Upon further testing, this appears to break certain functionality. Closing request until I resolve issues.\n. Nope, was an issue with something else. Looks fine.\n. ",
    "naquad": "My scenario in short: there's a folder tags file (which is relative to folder) and file-specific tag file (generated by VIM) which has absolute file path.\n\nTo reproduce this issue:\n\n```\nwget https://dl.dropboxusercontent.com/u/185589/ctrlp-tag.tar.bz2 && \\\n  tar jxvf ctrl-tag.tar.bz2 && \\\n  cd ctrl-tag && sh make-tags.sh\n```\n\nopen VIM, then:\n\n```\nset tags=TAGS,tags\nCtrlPTag\n```\n\nChoose the one with absolute filename. Kaboom!\n\nBy setting currently searched string I mean something smarter than:\n\n```\n:CtrlPTag\ncall feedkeys(\"my_tag_here\", 't')\n```\n\nThe problem with this code is that it is slow. On every character tag is being searched which is redunant, because I have whole tag name.\n. `:tj` / and `feedkeys()` questions are separate. `:tj` problem still remains. `feedkeys()` runs once, but it behaves like I'm typing whole world. This is the code:\n\n```\nfunction! s:JumpToTagOrMenu(tag)\n  let t = taglist(a:tag)\n  if len(t) <= 1\n    exec 'tj ' . fnameescape(a:tag)\n  else\n    CtrlPTag\n    call feedkeys(a:tag, 'mt')\n  endif\nendfunction\n\n```\n\nAs you can see I have whole tag already, but passing it to CtrlP with `feedkeys()` behaves like I'm typing it character by character. So my second question is: can I somehow pass tag to CtrlPTag? Kind of CtrlPTag <tag to search> ?\n. Awesome! `g:ctrl_default_input` helped, thank you. Now the only problem left is tags.\n. What about storing number in menu item (that is add(tag, index)) and then use it?\n. nevermind.\nhttps://github.com/ivalkeen/vim-ctrlp-tjump - fixed the issue\n. bug didn't reproduce in my environment.\n\n2013/7/29 kien notifications@github.com\n\n> That still has the desyncing problem, I think.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/kien/ctrlp.vim/issues/451#issuecomment-21748471\n> .\n\n## \n\n## Regards, Danil Fartushnii.\n\nDanil Fartushnii\nSenior developer\nSkype: dfartushnii\nJabber: naquad@jabber.ru\nICQ: 226555656\n. thanks\n. My scenario in short: there's a folder tags file (which is relative to folder) and file-specific tag file (generated by VIM) which has absolute file path.\n\nTo reproduce this issue:\n\n```\nwget https://dl.dropboxusercontent.com/u/185589/ctrlp-tag.tar.bz2 && \\\n  tar jxvf ctrl-tag.tar.bz2 && \\\n  cd ctrl-tag && sh make-tags.sh\n```\n\nopen VIM, then:\n\n```\nset tags=TAGS,tags\nCtrlPTag\n```\n\nChoose the one with absolute filename. Kaboom!\n\nBy setting currently searched string I mean something smarter than:\n\n```\n:CtrlPTag\ncall feedkeys(\"my_tag_here\", 't')\n```\n\nThe problem with this code is that it is slow. On every character tag is being searched which is redunant, because I have whole tag name.\n. `:tj` / and `feedkeys()` questions are separate. `:tj` problem still remains. `feedkeys()` runs once, but it behaves like I'm typing whole world. This is the code:\n\n```\nfunction! s:JumpToTagOrMenu(tag)\n  let t = taglist(a:tag)\n  if len(t) <= 1\n    exec 'tj ' . fnameescape(a:tag)\n  else\n    CtrlPTag\n    call feedkeys(a:tag, 'mt')\n  endif\nendfunction\n\n```\n\nAs you can see I have whole tag already, but passing it to CtrlP with `feedkeys()` behaves like I'm typing it character by character. So my second question is: can I somehow pass tag to CtrlPTag? Kind of CtrlPTag <tag to search> ?\n. Awesome! `g:ctrl_default_input` helped, thank you. Now the only problem left is tags.\n. What about storing number in menu item (that is add(tag, index)) and then use it?\n. nevermind.\nhttps://github.com/ivalkeen/vim-ctrlp-tjump - fixed the issue\n. bug didn't reproduce in my environment.\n\n2013/7/29 kien notifications@github.com\n\n> That still has the desyncing problem, I think.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/kien/ctrlp.vim/issues/451#issuecomment-21748471\n> .\n\n## \n\n## Regards, Danil Fartushnii.\n\nDanil Fartushnii\nSenior developer\nSkype: dfartushnii\nJabber: naquad@jabber.ru\nICQ: 226555656\n. thanks\n. ",
    "kdurant": "yes, I look forward to that moment\n. I solve it\n. I think everyone can understand this setting\nlet g:ctrlp_custom_ignore = {\n            \\ 'dir': '.git$|.hg$|.svn$|release$|dojo$|work$|Debug$|PluginConfig/neocomplete$',\n            \\ 'file': '\\v.(exe|so|dll)$',\n            \\ 'link': 'SOME_BAD_SYMBOLIC_LINKS',\n            \\ }\n. Now there is a lot of issues needed to enchance, but ctrlp was not updated for  a  long time\n. Sorry my native language is not English.\n. @kien  why not accept this pull request?\n. yes, I look forward to that moment\n. I solve it\n. I think everyone can understand this setting\nlet g:ctrlp_custom_ignore = {\n            \\ 'dir': '.git$|.hg$|.svn$|release$|dojo$|work$|Debug$|PluginConfig/neocomplete$',\n            \\ 'file': '\\v.(exe|so|dll)$',\n            \\ 'link': 'SOME_BAD_SYMBOLIC_LINKS',\n            \\ }\n. Now there is a lot of issues needed to enchance, but ctrlp was not updated for  a  long time\n. Sorry my native language is not English.\n. @kien  why not accept this pull request?\n. ",
    "alexandnpu": "When will the code merge be done? @aaronjensen 's fix is very useful.\n. When will the code merge be done? @aaronjensen 's fix is very useful.\n. ",
    "mhinz": "Thanks for the quick response.\n. Thanks for the quick response.\n. ",
    "Olical": "@kien, I have tried this with `let g:ctrlp_reuse_window = 1` and it still opens within a split window. Maybe there's something else I am missing here?\n. Sorry @kien, I should of checked that first. I have since added [this](https://github.com/Wolfy87/vim-config/commit/c0a9f4d8f890332cc925a8eb4dbe7d35bcb1356d) to my configuration and it is all working perfectly now. Telling CtrlP to replace the \"startify\" buffer works as expected. Thanks for the help.\n\nThis information fixes mhinz/vim-startify/issues/6.\n. @kien, I have tried this with `let g:ctrlp_reuse_window = 1` and it still opens within a split window. Maybe there's something else I am missing here?\n. Sorry @kien, I should of checked that first. I have since added [this](https://github.com/Wolfy87/vim-config/commit/c0a9f4d8f890332cc925a8eb4dbe7d35bcb1356d) to my configuration and it is all working perfectly now. Telling CtrlP to replace the \"startify\" buffer works as expected. Thanks for the help.\n\nThis information fixes mhinz/vim-startify/issues/6.\n. ",
    "benbarbour": "Wow, that makes a lot more sense than some file system thing. Good catch! \n. Wow, that makes a lot more sense than some file system thing. Good catch! \n. ",
    "frioux": "lol, a long time is less than three weeks?\n. lol, a long time is less than three weeks?\n. ",
    "dd1994": "`:CtrlP .` still not working...\n. ok, it works fun\nhttp://stackoverflow.com/questions/21888869/how-to-make-ctrlps-search-directory-change-according-to-nerdtrees-root\n. `:CtrlP .` still not working...\n. ok, it works fun\nhttp://stackoverflow.com/questions/21888869/how-to-make-ctrlps-search-directory-change-according-to-nerdtrees-root\n. ",
    "caoxin1988": "hi,kien,\nthanks for your help,and i have solved this question by adding 'let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files']  ' in my .vimrc file.But i don't this is why.Maybe you can tell me the reason more deeply.Thank you very much.And this problem only happens when there are a lot of file in my project(such 1.5G files of linux kernel project)\n. hi,kien,\nthanks for your help,and i have solved this question by adding 'let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files']  ' in my .vimrc file.But i don't this is why.Maybe you can tell me the reason more deeply.Thank you very much.And this problem only happens when there are a lot of file in my project(such 1.5G files of linux kernel project)\n. ",
    "leeola": "My apologies, thank you for your help\n. My apologies, thank you for your help\n. ",
    "dsawardekar": "The thing is there are quite a few of these types. For instance there would be one for model, controller, view, factory, concern, and so one. Leaving the type as is makes cycling through CtrlP difficult, as the number of extensions becomes large.\n\nMaybe I am not doing this correct way. I initially thought of having only one extension that shows a different list based on the the current context. Would this be the right way to do this?\n\nI couldn't figure out a way to change the label shown in the status bar to reflect the context. Eg: Emodel or Econtroller, etc. Is there a way to change the label shown from say the `ctrlp#enter()` handler?\n. Just tried that, it works! Thank you for your help.\n. Hey @kien, Just dropping by to say thanks! I managed to build [Portkey](https://github.com/dsawardekar/portkey) which I had in mind when I filled the issue here. \n\nAlong the way I built a handy little [class](https://github.com/dsawardekar/portkey/blob/develop/lib/ctrlp/ctrlp_extension.riml) for CtrlP extensions with [Riml](https://github.com/luke-gru/riml). The use is something like below,\n\n``` ruby\nopts = {}\nopts.sort = true\nopts.specinput = false\n\nagent = new CtrlPAgent()\n\next = new CtrlPExtension()\next.set_options(opts)\next.set_name('Foo')\next.set_agent(agent)\n\next.enable()\n```\n\nThe `extension` object handles interaction with Ctrlp and the `agent` makes the list that CtrlP displays. Might come in handy. :)\n\nThanks again for CtrlP, and especially for taking the time to make it extensible!\n. I see. If you need any help with this let me know. Would love to see this implemented/merged at some point. This is a nifty feature to have. Thanks.\n. The thing is there are quite a few of these types. For instance there would be one for model, controller, view, factory, concern, and so one. Leaving the type as is makes cycling through CtrlP difficult, as the number of extensions becomes large.\n\nMaybe I am not doing this correct way. I initially thought of having only one extension that shows a different list based on the the current context. Would this be the right way to do this?\n\nI couldn't figure out a way to change the label shown in the status bar to reflect the context. Eg: Emodel or Econtroller, etc. Is there a way to change the label shown from say the `ctrlp#enter()` handler?\n. Just tried that, it works! Thank you for your help.\n. Hey @kien, Just dropping by to say thanks! I managed to build [Portkey](https://github.com/dsawardekar/portkey) which I had in mind when I filled the issue here. \n\nAlong the way I built a handy little [class](https://github.com/dsawardekar/portkey/blob/develop/lib/ctrlp/ctrlp_extension.riml) for CtrlP extensions with [Riml](https://github.com/luke-gru/riml). The use is something like below,\n\n``` ruby\nopts = {}\nopts.sort = true\nopts.specinput = false\n\nagent = new CtrlPAgent()\n\next = new CtrlPExtension()\next.set_options(opts)\next.set_name('Foo')\next.set_agent(agent)\n\next.enable()\n```\n\nThe `extension` object handles interaction with Ctrlp and the `agent` makes the list that CtrlP displays. Might come in handy. :)\n\nThanks again for CtrlP, and especially for taking the time to make it extensible!\n. I see. If you need any help with this let me know. Would love to see this implemented/merged at some point. This is a nifty feature to have. Thanks.\n. ",
    "fasterpython": "got it now, thanks!\n. got it now, thanks!\n. ",
    "axelson": "+1\n\nIs there any list at all?\n. @kien how does CtrlP's existing tab-completion work? I don't see it listed in the documentation anywhere.\n. @kien thanks! I didn't realize that auto completion was only for directories and not for files.\n. +1\n\nIs there any list at all?\n. @kien how does CtrlP's existing tab-completion work? I don't see it listed in the documentation anywhere.\n. @kien thanks! I didn't realize that auto completion was only for directories and not for files.\n. ",
    "Forethinker": "I forgot to thank your for your suggestion. Thanks. Here is what I wrote.\n\n```\nnmap <leader>ev :call User_open(\".vimrc\")<CR>\nnmap <leader>ez :call User_open(\".zshrc\")<CR>\nfunction! User_open(fileName)\n    call feedkeys(\":CtrlPMRUFiles\\<cr>\".a:fileName.\"\\<cr>\")\nendfunction\n```\n. I forgot to thank your for your suggestion. Thanks. Here is what I wrote.\n\n```\nnmap <leader>ev :call User_open(\".vimrc\")<CR>\nnmap <leader>ez :call User_open(\".zshrc\")<CR>\nfunction! User_open(fileName)\n    call feedkeys(\":CtrlPMRUFiles\\<cr>\".a:fileName.\"\\<cr>\")\nendfunction\n```\n. ",
    "statquant": "Thanks for all this it works nicely now... Cheers\n. Thanks for all this it works nicely now... Cheers\n. ",
    "notpratheek": "@kien \n\nThanks ! \n\nI was able to figure it out (with @bling's help). The colors must be added to the colorscheme itself even for airline ! :smile: \n. @kien \n\nThanks ! \n\nI was able to figure it out (with @bling's help). The colors must be added to the colorscheme itself even for airline ! :smile: \n. ",
    "tommcdo": "+1\n\nWould love to see this merged.\n. +1\n\nWould love to see this merged.\n. ",
    "drn": "+1 Would love to see this merged as well\n. +1 Would love to see this merged as well\n. ",
    "adelarsq": "+1\n. +1\n. ",
    "tolry": "great, thx\n. fyi: https://github.com/tolry/vim/commit/d8f27243ebb8fe4a0f3d4d2fbe36d52139cf8a8a\n. great, thx\n. fyi: https://github.com/tolry/vim/commit/d8f27243ebb8fe4a0f3d4d2fbe36d52139cf8a8a\n. ",
    "davebv": "To reproduce the error:\n1. Create tags file in ctags\n2. :CtrlPTags\n3. Search for any tag and try to open it.\n4. Error pops up.\n\nTested with vim 7.1\n. Thank you for the quick response! :+1: \n. I believe this will help when using dictionaries in Vim. I have problems with 7.1 but cannot reproduce it in newer versions.\n. To reproduce the error:\n1. Create tags file in ctags\n2. :CtrlPTags\n3. Search for any tag and try to open it.\n4. Error pops up.\n\nTested with vim 7.1\n. Thank you for the quick response! :+1: \n. I believe this will help when using dictionaries in Vim. I have problems with 7.1 but cannot reproduce it in newer versions.\n. ",
    "jbodah": "> Natively, you can try g:ctrlp_lazy_update which should alleviate it somewhat\n\nWorks great, thanks!\n. > Natively, you can try g:ctrlp_lazy_update which should alleviate it somewhat\n\nWorks great, thanks!\n. ",
    "sgharms": "Ah, OK, a bit further debugging.  If i took that directory (`LatinVerb.git`) and moved it to `/tmp` and renamed it to `jabubar` and `cd` into it, CtrlP scans the directory fine.\n\nI think this must be something with the `.git` suffix.  I understand the reason to exclude `**/.git` directories (who needs all that metadata) but a directory of the form `**/*.git` should probably be OK (I think this is the default path suggested by GitHub when you clone a repo).\n. OK one more datum:  it appears:\n\n`.janus/janus/vim/tools/janus/after/plugin/ctrlp.vim` is the bad guy here:\n\n``` viml\nif janus#is_plugin_enabled(\"ctrlp\")\n  let g:ctrlp_map = ''\n  let g:ctrlp_custom_ignore = {\n    \\ 'dir':  '\\.git$\\|\\.hg$\\|\\.svn$',\n    \\ 'file': '\\.pyc$\\|\\.pyo$\\|\\.rbc$|\\.rbo$\\|\\.class$\\|\\.o$\\|\\~$\\',\n    \\ }\nendif\n```\n\nRemoving the `\\.git$` segment fixes things.  At this point it's looking like a Janus bug to me. \n. Created:  https://github.com/carlhuda/janus/pull/550\n\n@kien: You might be able to recommend if this change is the proper way to address the issue, but as for now, I'm fixed.\n. Ah, OK, a bit further debugging.  If i took that directory (`LatinVerb.git`) and moved it to `/tmp` and renamed it to `jabubar` and `cd` into it, CtrlP scans the directory fine.\n\nI think this must be something with the `.git` suffix.  I understand the reason to exclude `**/.git` directories (who needs all that metadata) but a directory of the form `**/*.git` should probably be OK (I think this is the default path suggested by GitHub when you clone a repo).\n. OK one more datum:  it appears:\n\n`.janus/janus/vim/tools/janus/after/plugin/ctrlp.vim` is the bad guy here:\n\n``` viml\nif janus#is_plugin_enabled(\"ctrlp\")\n  let g:ctrlp_map = ''\n  let g:ctrlp_custom_ignore = {\n    \\ 'dir':  '\\.git$\\|\\.hg$\\|\\.svn$',\n    \\ 'file': '\\.pyc$\\|\\.pyo$\\|\\.rbc$|\\.rbo$\\|\\.class$\\|\\.o$\\|\\~$\\',\n    \\ }\nendif\n```\n\nRemoving the `\\.git$` segment fixes things.  At this point it's looking like a Janus bug to me. \n. Created:  https://github.com/carlhuda/janus/pull/550\n\n@kien: You might be able to recommend if this change is the proper way to address the issue, but as for now, I'm fixed.\n. ",
    "cbertoldi": "I'm using Pathogen with a few plugins, I tried disabling them all, except for Pathogen, and a couple related to the colorscheme. The error happens with every file I tried. I tried both open files in the same directory I launched vim (my home dir), and also in subdirectories.\nSteps to reproduce: \n1. start vim\n2. press ctrl-p\n3. enter a few letters\n4. press enter\n\nThis is the output of :mess after the error, I don't know how to tell you more. When I start vim in my home, with about 10000 files, I also noticed there is one more error in init. I didn't notice before because I started vim in a directory with not so many files. \n\n<pre>\nError detected while processing function ctrlp#init..<SNR>30_Open..<SNR>30_getenv:                  \nline    2:                                                                            \nE348: No string under cursor                                          \nE348: No string under cursor                                                         \nline    3:                                                                                          \nE446: No file name under cursor                                                                     \nError detected while processing function <SNR>30_AcceptSelection..ctrlp#acceptfile:                 \nline   17:                                                                                          \nE94: No matching buffer for ^/home/carlo/95proxies$\n</pre>\n\nThis is the output of :scriptnames\n\n<pre>\n 1: /usr/share/vim/vimrc                                                                           \n  2: /usr/share/vim/vim73/debian.vim                                                                \n  3: /usr/share/vim/vim73/syntax/syntax.vim                                                         \n  4: /usr/share/vim/vim73/syntax/synload.vim                                                        \n  5: /usr/share/vim/vim73/syntax/syncolor.vim                                                       \n  6: /usr/share/vim/vim73/filetype.vim                                                              \n  7: ~/dotfiles/vim.symlink/ftdetect/jar.vim                                                        \n  8: ~/.vimrc                                                                                       \n  9: /usr/share/vim/vim73/syntax/nosyntax.vim                                                       \n 10: ~/dotfiles/vim.symlink/autoload/pathogen.vim                                                   \n 11: /usr/share/vim/vim73/ftoff.vim                                                                 \n 12: ~/dotfiles/vim.symlink/vimrc-python                                                            \n 13: /usr/share/vim/vim73/ftplugin.vim                                                              \n 14: /usr/share/vim/vim73/indent.vim                                                                \n 15: ~/dotfiles/vim.symlink/colors/my_desert.vim                                                    \n 16: ~/dotfiles/vim.symlink/plugin/generate_record.vim                                              \n 17: ~/dotfiles/vim.symlink/plugin/guicolorscheme.vim                                               \n 18: ~/dotfiles/vim.symlink/bundle/ctrlp/plugin/ctrlp.vim                                           \n 19: ~/dotfiles/vim.symlink/bundle/ctrlp/autoload/ctrlp/mrufiles.vim                                \n 20: /usr/share/vim/vim73/plugin/getscriptPlugin.vim                                                \n 21: /usr/share/vim/vim73/plugin/gzip.vim                                                           \n 22: /usr/share/vim/vim73/plugin/matchparen.vim                                                     \n 23: /usr/share/vim/vim73/plugin/netrwPlugin.vim                                                    \n 24: /usr/share/vim/vim73/plugin/rrhelper.vim                                                       \n 25: /usr/share/vim/vim73/plugin/spellfile.vim                                                      \n 26: /usr/share/vim/vim73/plugin/tarPlugin.vim                                                      \n 27: /usr/share/vim/vim73/plugin/tohtml.vim                                                         \n 28: /usr/share/vim/vim73/plugin/vimballPlugin.vim                                                  \n 29: /usr/share/vim/vim73/plugin/zipPlugin.vim                                                      \n 30: ~/dotfiles/vim.symlink/bundle/ctrlp/autoload/ctrlp.vim                                         \n 31: ~/dotfiles/vim.symlink/bundle/ctrlp/autoload/ctrlp/utils.vim                                   \n 32: /usr/share/vim/vim73/scripts.vim                                                               \n 33: /usr/share/vim/vim73/syntax/conf.vim                                                           \n 34: /usr/share/vim/vim73/ftplugin/conf.vim      \n</pre>\n\nI hope I gave you enough details this time :)\n. I'm using Pathogen with a few plugins, I tried disabling them all, except for Pathogen, and a couple related to the colorscheme. The error happens with every file I tried. I tried both open files in the same directory I launched vim (my home dir), and also in subdirectories.\nSteps to reproduce: \n1. start vim\n2. press ctrl-p\n3. enter a few letters\n4. press enter\n\nThis is the output of :mess after the error, I don't know how to tell you more. When I start vim in my home, with about 10000 files, I also noticed there is one more error in init. I didn't notice before because I started vim in a directory with not so many files. \n\n<pre>\nError detected while processing function ctrlp#init..<SNR>30_Open..<SNR>30_getenv:                  \nline    2:                                                                            \nE348: No string under cursor                                          \nE348: No string under cursor                                                         \nline    3:                                                                                          \nE446: No file name under cursor                                                                     \nError detected while processing function <SNR>30_AcceptSelection..ctrlp#acceptfile:                 \nline   17:                                                                                          \nE94: No matching buffer for ^/home/carlo/95proxies$\n</pre>\n\nThis is the output of :scriptnames\n\n<pre>\n 1: /usr/share/vim/vimrc                                                                           \n  2: /usr/share/vim/vim73/debian.vim                                                                \n  3: /usr/share/vim/vim73/syntax/syntax.vim                                                         \n  4: /usr/share/vim/vim73/syntax/synload.vim                                                        \n  5: /usr/share/vim/vim73/syntax/syncolor.vim                                                       \n  6: /usr/share/vim/vim73/filetype.vim                                                              \n  7: ~/dotfiles/vim.symlink/ftdetect/jar.vim                                                        \n  8: ~/.vimrc                                                                                       \n  9: /usr/share/vim/vim73/syntax/nosyntax.vim                                                       \n 10: ~/dotfiles/vim.symlink/autoload/pathogen.vim                                                   \n 11: /usr/share/vim/vim73/ftoff.vim                                                                 \n 12: ~/dotfiles/vim.symlink/vimrc-python                                                            \n 13: /usr/share/vim/vim73/ftplugin.vim                                                              \n 14: /usr/share/vim/vim73/indent.vim                                                                \n 15: ~/dotfiles/vim.symlink/colors/my_desert.vim                                                    \n 16: ~/dotfiles/vim.symlink/plugin/generate_record.vim                                              \n 17: ~/dotfiles/vim.symlink/plugin/guicolorscheme.vim                                               \n 18: ~/dotfiles/vim.symlink/bundle/ctrlp/plugin/ctrlp.vim                                           \n 19: ~/dotfiles/vim.symlink/bundle/ctrlp/autoload/ctrlp/mrufiles.vim                                \n 20: /usr/share/vim/vim73/plugin/getscriptPlugin.vim                                                \n 21: /usr/share/vim/vim73/plugin/gzip.vim                                                           \n 22: /usr/share/vim/vim73/plugin/matchparen.vim                                                     \n 23: /usr/share/vim/vim73/plugin/netrwPlugin.vim                                                    \n 24: /usr/share/vim/vim73/plugin/rrhelper.vim                                                       \n 25: /usr/share/vim/vim73/plugin/spellfile.vim                                                      \n 26: /usr/share/vim/vim73/plugin/tarPlugin.vim                                                      \n 27: /usr/share/vim/vim73/plugin/tohtml.vim                                                         \n 28: /usr/share/vim/vim73/plugin/vimballPlugin.vim                                                  \n 29: /usr/share/vim/vim73/plugin/zipPlugin.vim                                                      \n 30: ~/dotfiles/vim.symlink/bundle/ctrlp/autoload/ctrlp.vim                                         \n 31: ~/dotfiles/vim.symlink/bundle/ctrlp/autoload/ctrlp/utils.vim                                   \n 32: /usr/share/vim/vim73/scripts.vim                                                               \n 33: /usr/share/vim/vim73/syntax/conf.vim                                                           \n 34: /usr/share/vim/vim73/ftplugin/conf.vim      \n</pre>\n\nI hope I gave you enough details this time :)\n. ",
    "antognolli": "I am also interested in this features, so do you feel like accepting patches to allow a custom matcher from an extension?\n. All right, I'll give it a try and as soon as I have something working, I'll publish something there. Thank you.\n. I am also interested in this features, so do you feel like accepting patches to allow a custom matcher from an extension?\n. All right, I'll give it a try and as soon as I have something working, I'll publish something there. Thank you.\n. ",
    "barunio": "I should have mentioned this initially, but the slowness is somehow related to using Ctrl-P with MacVim. Running `vim` directly from the console doesn't result in the same poor performance. \n. The splits do have open files; they are Ruby files, but unfortunately I can't share them (this is closed source code).\n\nThe issue does indeed seem to be with the redraw function (I'm assuming that's what `redr` does), as shown in the more detailed breakdown from the profile included below. Is there any way to improve this performance?\n\n```\nFUNCTION  <SNR>47_BuildPrompt()\nCalled 49 times\nTotal time:   4.273263\n Self time:   3.787346\n\ncount  total (s)   self (s)\n   49   0.000409   0.000297     let base = ( s:regexp ? 'r' : '>' ).( s:byfname() ? 'd' : '>' ).'> '\n   49   0.001914   0.000231     let str = escape(s:getinput(), '\\')\n   49              0.000217     let lazy = str == '' || exists('s:force') || !has('autocmd') ? 0 : s:lazy\n   49              0.000142     if a:upd && !lazy && ( s:matches || s:regexp || exists('s:did_exp') || str =~ '\\(\\\\\\(<\\|>\\)\\|[*|]\\)\\|\\(\\\\\\:\\([^:]\\|\\\\:\\)*$\\)' )\n   49   0.481437   0.000269         sil! cal s:Update(str)\n   49              0.000013     en\n   49   0.003139   0.000185     sil! cal ctrlp#statusline()\n                                \" Toggling\n   49              0.000228     let [hiactive, hicursor, base] = s:focus ? ['CtrlPPrtText', 'CtrlPPrtCursor', base] : ['CtrlPPrtBase', 'CtrlPPrtBase', tr(base, '>', '-')]\n   49              0.000052     let hibase = 'CtrlPPrtBase'\n                                \" Build it\n   49              3.783046     redr\n   49              0.000366     let prt = copy(s:prompt)\n   49              0.000381     cal map(prt, 'escape(v:val, ''\"\\'')')\n   49              0.001289     exe 'echoh' hibase '| echon \"'.base.'\" | echoh' hiactive '| echon \"'.prt[0].'\" | echoh' hicursor '| echon \"'.prt[1].'\" | echoh' hiactive '| echon \"'.prt[2].'\" | echoh None'\n                                \" Append the cursor at the end\n   49              0.000118     if empty(prt[1]) && s:focus\n   49              0.000227         exe 'echoh' hibase '| echon \"_\" | echoh None'\n   49              0.000028     en\n```\n. @kien Your guess was correct -- turning off syntax highlighting makes the performance issue go away. So now I just need to find a way to improve the performance of syntax highlighting. Any tips on that?\n. It turns out the culprit was a bug in the Regex engine for newer versions of Vim, which results in slow syntax highlighting performance for Ruby files. The solution is to force using the old regex engine: http://stackoverflow.com/a/16920294\n\nI'm going to close this issue, since there is nothing that needs to change with this plugin. @kien Thanks for the suggestion to look into syntax highlighting.\n. I should have mentioned this initially, but the slowness is somehow related to using Ctrl-P with MacVim. Running `vim` directly from the console doesn't result in the same poor performance. \n. The splits do have open files; they are Ruby files, but unfortunately I can't share them (this is closed source code).\n\nThe issue does indeed seem to be with the redraw function (I'm assuming that's what `redr` does), as shown in the more detailed breakdown from the profile included below. Is there any way to improve this performance?\n\n```\nFUNCTION  <SNR>47_BuildPrompt()\nCalled 49 times\nTotal time:   4.273263\n Self time:   3.787346\n\ncount  total (s)   self (s)\n   49   0.000409   0.000297     let base = ( s:regexp ? 'r' : '>' ).( s:byfname() ? 'd' : '>' ).'> '\n   49   0.001914   0.000231     let str = escape(s:getinput(), '\\')\n   49              0.000217     let lazy = str == '' || exists('s:force') || !has('autocmd') ? 0 : s:lazy\n   49              0.000142     if a:upd && !lazy && ( s:matches || s:regexp || exists('s:did_exp') || str =~ '\\(\\\\\\(<\\|>\\)\\|[*|]\\)\\|\\(\\\\\\:\\([^:]\\|\\\\:\\)*$\\)' )\n   49   0.481437   0.000269         sil! cal s:Update(str)\n   49              0.000013     en\n   49   0.003139   0.000185     sil! cal ctrlp#statusline()\n                                \" Toggling\n   49              0.000228     let [hiactive, hicursor, base] = s:focus ? ['CtrlPPrtText', 'CtrlPPrtCursor', base] : ['CtrlPPrtBase', 'CtrlPPrtBase', tr(base, '>', '-')]\n   49              0.000052     let hibase = 'CtrlPPrtBase'\n                                \" Build it\n   49              3.783046     redr\n   49              0.000366     let prt = copy(s:prompt)\n   49              0.000381     cal map(prt, 'escape(v:val, ''\"\\'')')\n   49              0.001289     exe 'echoh' hibase '| echon \"'.base.'\" | echoh' hiactive '| echon \"'.prt[0].'\" | echoh' hicursor '| echon \"'.prt[1].'\" | echoh' hiactive '| echon \"'.prt[2].'\" | echoh None'\n                                \" Append the cursor at the end\n   49              0.000118     if empty(prt[1]) && s:focus\n   49              0.000227         exe 'echoh' hibase '| echon \"_\" | echoh None'\n   49              0.000028     en\n```\n. @kien Your guess was correct -- turning off syntax highlighting makes the performance issue go away. So now I just need to find a way to improve the performance of syntax highlighting. Any tips on that?\n. It turns out the culprit was a bug in the Regex engine for newer versions of Vim, which results in slow syntax highlighting performance for Ruby files. The solution is to force using the old regex engine: http://stackoverflow.com/a/16920294\n\nI'm going to close this issue, since there is nothing that needs to change with this plugin. @kien Thanks for the suggestion to look into syntax highlighting.\n. ",
    "dillonforrest": "Okay thanks!  Not sure how I missed this in the docs.  Much appreciated!  :)\n. Okay thanks!  Not sure how I missed this in the docs.  Much appreciated!  :)\n. ",
    "bakoenig": "Hi, thanks for your quick response. Sorry, but I have another question (actually two more):\n\n1) in my case, the file ~/.config/awesome/rc.lua is not a duplicate, it shows up in mru files but not in the cwd files as the working directory is just ~ $HOME.\n\nand 2) I understand from your response that you filter out duplicates, but it should not take more time to keep one duplicate and filter the other duplicates than it does to throw away all duplicates. Does it?\n. Actually, I still don't understand: why does this file not show up in { fil + mru + buf }? It is not in the cwd (it is two steps up from the cwd). The file is not in the buffer list either. The reason I am asking so persistently is because I have almost the same directory structure on my other laptop and the file shows up in mixed mode in the same scenario.\n\nBtw, my setting on both laptops is\n\nlet g:ctrlp_cmd = 'CtrlPMixed'\nlet g:ctrlp_working_path_mode = '0'\n. Yes, I have default settings for hidden files but hidden files definitely\nshow in mru mode. So my philosophy is that those should also show up in\nmixed mode (they cannot be duplicates anyway). I will check my laptop again\nlater, but something is funny.\n\nOn 8 December 2013 13:31, kien notifications@github.com wrote:\n\n> By default, hidden files and hidden dirs (dotfiles and dotdirs) aren't\n> listed. If it's shown on your other laptop then there's definitely\n> something different.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/kien/ctrlp.vim/issues/505#issuecomment-30080615\n> .\n. I think I know what happened. Yesterday I played around with ctrlp_show_hidden and set it to 1: then it might have filtered the file .config/awesome/rc.lua because it was in one of the hidden subdirectories of HOME. Now I reset the hidden variable back to 0 by simply switching back to default. But the file rc.lua is still filtered out from mixed mode permanently (even after reboot). It only comes back if I switch to some directory that does not contain the rc.lua file as a child directory(!).\n\nCTRL-P is really a great add-on, but to be honest, all this filtering is a bit confusing as it might make your favorite files suddenly disappear.\n. OK, thank you very much for your help. I think I will switch to MRU mode as\ndefault for the time being. My guess would be that if each of fil, buf and\nmru are somehow reasonable in speed, then fil + buf + mru should also be\nreasonable still.\n\nOn 8 December 2013 18:19, kien notifications@github.com wrote:\n\n> Doing it the expected way isn't any more complicated, but as usual I have\n> to choose between that and speed with some rough edges. If I have time,\n> though, I'll probably rewrite Mixed mode to make it more flexible.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/kien/ctrlp.vim/issues/505#issuecomment-30086001\n> .\n. Hi, thanks for your quick response. Sorry, but I have another question (actually two more):\n\n1) in my case, the file ~/.config/awesome/rc.lua is not a duplicate, it shows up in mru files but not in the cwd files as the working directory is just ~ $HOME.\n\nand 2) I understand from your response that you filter out duplicates, but it should not take more time to keep one duplicate and filter the other duplicates than it does to throw away all duplicates. Does it?\n. Actually, I still don't understand: why does this file not show up in { fil + mru + buf }? It is not in the cwd (it is two steps up from the cwd). The file is not in the buffer list either. The reason I am asking so persistently is because I have almost the same directory structure on my other laptop and the file shows up in mixed mode in the same scenario.\n\nBtw, my setting on both laptops is\n\nlet g:ctrlp_cmd = 'CtrlPMixed'\nlet g:ctrlp_working_path_mode = '0'\n. Yes, I have default settings for hidden files but hidden files definitely\nshow in mru mode. So my philosophy is that those should also show up in\nmixed mode (they cannot be duplicates anyway). I will check my laptop again\nlater, but something is funny.\n\nOn 8 December 2013 13:31, kien notifications@github.com wrote:\n\n> By default, hidden files and hidden dirs (dotfiles and dotdirs) aren't\n> listed. If it's shown on your other laptop then there's definitely\n> something different.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/kien/ctrlp.vim/issues/505#issuecomment-30080615\n> .\n. I think I know what happened. Yesterday I played around with ctrlp_show_hidden and set it to 1: then it might have filtered the file .config/awesome/rc.lua because it was in one of the hidden subdirectories of HOME. Now I reset the hidden variable back to 0 by simply switching back to default. But the file rc.lua is still filtered out from mixed mode permanently (even after reboot). It only comes back if I switch to some directory that does not contain the rc.lua file as a child directory(!).\n\nCTRL-P is really a great add-on, but to be honest, all this filtering is a bit confusing as it might make your favorite files suddenly disappear.\n. OK, thank you very much for your help. I think I will switch to MRU mode as\ndefault for the time being. My guess would be that if each of fil, buf and\nmru are somehow reasonable in speed, then fil + buf + mru should also be\nreasonable still.\n\nOn 8 December 2013 18:19, kien notifications@github.com wrote:\n\n> Doing it the expected way isn't any more complicated, but as usual I have\n> to choose between that and speed with some rough edges. If I have time,\n> though, I'll probably rewrite Mixed mode to make it more flexible.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/kien/ctrlp.vim/issues/505#issuecomment-30086001\n> .\n. ",
    "codepiano": "Yeah\uff0cyou are right,it is because the file extension,I change the filename to ctrlp.cnx,and this time the :helptags command generate file 'tags' for ctrlp.txt and generate 'tags-cn' for ctrlp.cnx.In my language environment,use ':help ctrlp' command can show the correct Chinese doc file.\nI push to this branch again.\n. Yeah\uff0cyou are right,it is because the file extension,I change the filename to ctrlp.cnx,and this time the :helptags command generate file 'tags' for ctrlp.txt and generate 'tags-cn' for ctrlp.cnx.In my language environment,use ':help ctrlp' command can show the correct Chinese doc file.\nI push to this branch again.\n. ",
    "nyarly": "VIM - Vi IMproved 7.3 (2010 Aug 15, compiled Mar  1 2013 13:50:38)\n\nSteps to reproduce: (under tmux):\n1. vim --servername TEST1\n2. hit ^P to open the search.\n3. Start searching - enter a few characters.\n4. Leave the search uncompleted - switch to a different Tmux window\n5. vim --servername TEST1 --remote a_file\n\nSwitch back to original window - vim still has the CtrlP window open and is unresponsive.\n\nI have not set up a minimal vim config yet. It's bitten me 2-3 times so far, but I'll put the minimal config on my list.\n\nCould you kickstart me there? Easiest way to start Vim with just CtrlP?\n. It's pretty consistent, yes.\n\nNext time it happens I'll see about following up on the minimal config\n. I don't know if you're having the same problem as me: I'd set the g:ctrlp_root_markers setting, and it seems to behave differently than advertised. While the docs say \"in addition to\" the behavior is as if \"in replacement for\"\n. VIM - Vi IMproved 7.3 (2010 Aug 15, compiled Mar  1 2013 13:50:38)\n\nSteps to reproduce: (under tmux):\n1. vim --servername TEST1\n2. hit ^P to open the search.\n3. Start searching - enter a few characters.\n4. Leave the search uncompleted - switch to a different Tmux window\n5. vim --servername TEST1 --remote a_file\n\nSwitch back to original window - vim still has the CtrlP window open and is unresponsive.\n\nI have not set up a minimal vim config yet. It's bitten me 2-3 times so far, but I'll put the minimal config on my list.\n\nCould you kickstart me there? Easiest way to start Vim with just CtrlP?\n. It's pretty consistent, yes.\n\nNext time it happens I'll see about following up on the minimal config\n. I don't know if you're having the same problem as me: I'd set the g:ctrlp_root_markers setting, and it seems to behave differently than advertised. While the docs say \"in addition to\" the behavior is as if \"in replacement for\"\n. ",
    "shinokada": "Sorry I meant <c-y>. But anyway I found how to do it. I need type a file name first and hit <c-y> to create it.\nThanks for your help. I checked :h ctrlp-input-format f).\n. Sorry I meant <c-y>. But anyway I found how to do it. I need type a file name first and hit <c-y> to create it.\nThanks for your help. I checked :h ctrlp-input-format f).\n. ",
    "mdi": "I removed those two lines and still see the same issue. After some further\ntesting it appears related to the font. I'm using Pragmata Pro 14pt.\nChanging the font size doesn't help, but changing to a different font\ncauses the issue to go away. Another curious thing is that the same font\ndoesn't cause the issue if I use iTerm2. Using Terminal.app I do see this\nissue.\n\nOn Fri, Jan 10, 2014 at 1:49 PM, kien notifications@github.com wrote:\n\n> You're not supposed to touch g:syntax_on, it's Vim's job to set it\n> whenever you run :syntax on/off/enable. Forcing the variable on while\n> syntax is actually off will throw syntax highlighting detection off, and\n> likely cause unexpected behaviors. So try removing the second line.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/kien/ctrlp.vim/issues/511#issuecomment-32024657\n> .\n\n## \n\nMichael Irwin\n. I removed those two lines and still see the same issue. After some further\ntesting it appears related to the font. I'm using Pragmata Pro 14pt.\nChanging the font size doesn't help, but changing to a different font\ncauses the issue to go away. Another curious thing is that the same font\ndoesn't cause the issue if I use iTerm2. Using Terminal.app I do see this\nissue.\n\nOn Fri, Jan 10, 2014 at 1:49 PM, kien notifications@github.com wrote:\n\n> You're not supposed to touch g:syntax_on, it's Vim's job to set it\n> whenever you run :syntax on/off/enable. Forcing the variable on while\n> syntax is actually off will throw syntax highlighting detection off, and\n> likely cause unexpected behaviors. So try removing the second line.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/kien/ctrlp.vim/issues/511#issuecomment-32024657\n> .\n\n## \n\nMichael Irwin\n. ",
    "jceb": "Is there also a way to unmark all marked files?\n. Hm, how does it work with unmarking the files?  Once I marked all files using '<C-o>a' and try to press '<C-o>c', all files get opened upon typing '<C-o>'.\n. Thanks, now it works better.  The following two issues I found:\n- once I selected all files with C-oa, C-z should deselect the entry the cursor is on, which it does.  Additionally it toggles the markers' column what seems to be a bug\n- it's not possible to run C-oa once some file has been selected.  This makes it difficult to quickly select different sets of files in one Ctrlp run\n. Point 1:\n1. I type C-oa to select all files\n1.1. the column displaying the selected files is now visible\n2. I type C-z to deselect one file\n2.1. the column displaying the selected files is not visible anymore.  It looks like there are no files selected at all, although this is not true.  The files I selected in step 1, are still selected.\n\nIMHO, what should happen in step 2.1 is that\n1. the current file gets deselected (this is already the case)\n2. the column displaying the selected files should only disappear when no file is selected anymore (not implement, yet)\n\nI hope this makes it more clear.\n. Is there also a way to unmark all marked files?\n. Hm, how does it work with unmarking the files?  Once I marked all files using '<C-o>a' and try to press '<C-o>c', all files get opened upon typing '<C-o>'.\n. Thanks, now it works better.  The following two issues I found:\n- once I selected all files with C-oa, C-z should deselect the entry the cursor is on, which it does.  Additionally it toggles the markers' column what seems to be a bug\n- it's not possible to run C-oa once some file has been selected.  This makes it difficult to quickly select different sets of files in one Ctrlp run\n. Point 1:\n1. I type C-oa to select all files\n1.1. the column displaying the selected files is now visible\n2. I type C-z to deselect one file\n2.1. the column displaying the selected files is not visible anymore.  It looks like there are no files selected at all, although this is not true.  The files I selected in step 1, are still selected.\n\nIMHO, what should happen in step 2.1 is that\n1. the current file gets deselected (this is already the case)\n2. the column displaying the selected files should only disappear when no file is selected anymore (not implement, yet)\n\nI hope this makes it more clear.\n. ",
    "noscript": "Yeah, forgot about angle brackets :) It would be really great to be able to specify register. I know about `<c-\\> r *` but that's like 3 commands instead of just a middle click.\n. That works, but is it possible to preserve the cursor on the same line?\n. Thanks. Just what I needed.\n. Yeah, forgot about angle brackets :) It would be really great to be able to specify register. I know about `<c-\\> r *` but that's like 3 commands instead of just a middle click.\n. That works, but is it possible to preserve the cursor on the same line?\n. Thanks. Just what I needed.\n. ",
    "gpakosz": "Could please assist me in further debugging then?\n\nWhen I open Vim at the root of a project that is under git and I launch:\n\n```\nlet r=system('git --git-dir=.git ls-files -oc --exclude-standard')\n```\n\nThen `echo r` displays the list of files correctly. But when I launch `CtrlP` it complains git is not recognized (see message in my first post).\n. Could please assist me in further debugging then?\n\nWhen I open Vim at the root of a project that is under git and I launch:\n\n```\nlet r=system('git --git-dir=.git ls-files -oc --exclude-standard')\n```\n\nThen `echo r` displays the list of files correctly. But when I launch `CtrlP` it complains git is not recognized (see message in my first post).\n. ",
    "poc7667": "Hi @kien  thank you so so so much. I commented the `follow_symlink` and it works!\nAlthough I dont know why\n. Hi @kien  thank you so so so much. I commented the `follow_symlink` and it works!\nAlthough I dont know why\n. ",
    "kswope": "So nothing cleans out a MRU listing aside from physically deleting the cache?  \n\nAnd :CtrlP mode _includes_ buffers as well as files?  But CtrlpBuffer is just buffers and CtrlpMixed also includes mrus?\n\nI've been running ctrlp for quite a while and never new normal mode was files+buffers but not mrus.  I recommend a doc change\n\n\"Run :CtrlP or :CtrlP [starting-directory] to invoke CtrlP in find file mode.\"\n\nTo something like \n\nRun :CtrlP or :CtrlP [starting-directory] to invoke CtrlP in find file mode. (includes buffers)\n\nThats why I was using mixed mode, I didn't think regular mode included buffers.\n. So nothing cleans out a MRU listing aside from physically deleting the cache?  \n\nAnd :CtrlP mode _includes_ buffers as well as files?  But CtrlpBuffer is just buffers and CtrlpMixed also includes mrus?\n\nI've been running ctrlp for quite a while and never new normal mode was files+buffers but not mrus.  I recommend a doc change\n\n\"Run :CtrlP or :CtrlP [starting-directory] to invoke CtrlP in find file mode.\"\n\nTo something like \n\nRun :CtrlP or :CtrlP [starting-directory] to invoke CtrlP in find file mode. (includes buffers)\n\nThats why I was using mixed mode, I didn't think regular mode included buffers.\n. ",
    "jgandt": "I thought I would mention here that the `ctrlp_mruf_relative` option has been added. I came to this issue via a top google result and thought it important to share my findings. It solves an issue very close to what OP is describing.\r\n\r\nDocumentation here: https://github.com/kien/ctrlp.vim/blob/1.79/doc/ctrlp.txt#L75. I thought I would mention here that the `ctrlp_mruf_relative` option has been added. I came to this issue via a top google result and thought it important to share my findings. It solves an issue very close to what OP is describing.\r\n\r\nDocumentation here: https://github.com/kien/ctrlp.vim/blob/1.79/doc/ctrlp.txt#L75. ",
    "phalkunz": "Both `ctrlp#accept` and `feedkeys` didn't work. Wish there were hooks before and after the prompt is rendered with the list built in `init`x passed in. Might be there's no other uses beside my case. \n\nAnyways, I really appreciate your help :)\n. Both `ctrlp#accept` and `feedkeys` didn't work. Wish there were hooks before and after the prompt is rendered with the list built in `init`x passed in. Might be there's no other uses beside my case. \n\nAnyways, I really appreciate your help :)\n. ",
    "bkudria": "+1 for this functionality!\n. +1 for this functionality!\n. ",
    "razasayed": "Thanks positron, F5 works.\n. Thanks klen, thats really helpful.\n. @hakunin :+1: \n. Thanks @wsdjeg for pointing this out.\n. Thanks positron, F5 works.\n. Thanks klen, thats really helpful.\n. @hakunin :+1: \n. Thanks @wsdjeg for pointing this out.\n. ",
    "hakunin": "Btw why can't we just have the new files (that I save for the first time in project directory) show in ctrlp without any refresh? Seems like it could be just added to the cache once I create a new file.\n. Btw why can't we just have the new files (that I save for the first time in project directory) show in ctrlp without any refresh? Seems like it could be just added to the cache once I create a new file.\n. ",
    "othane": "It would be really good if you could add directories to scan like you do with tags, ie set ctrlp_search_dir+=~/work/blah ... I was looking to see if this was possible with the current code, but I cannot find any options for this. Could this be a new feature that is need?\n. It would be really good if you could add directories to scan like you do with tags, ie set ctrlp_search_dir+=~/work/blah ... I was looking to see if this was possible with the current code, but I cannot find any options for this. Could this be a new feature that is need?\n. ",
    "domi91c": "Could a variable be set with some other mapping which can then be used with `let g:ctrlp_root_directory = PROJECT_ROOT`? I don't know Vimscript ;_;\r\n. Sweet, this works: `let g:ctrlp_root_markers = ['.ctrlp']`\r\n\r\nhttps://coderwall.com/p/5xv7sq/ctrlp-root-markers. Could a variable be set with some other mapping which can then be used with `let g:ctrlp_root_directory = PROJECT_ROOT`? I don't know Vimscript ;_;\r\n. Sweet, this works: `let g:ctrlp_root_markers = ['.ctrlp']`\r\n\r\nhttps://coderwall.com/p/5xv7sq/ctrlp-root-markers. ",
    "hoschi": "JSCtags doesn't properly with node v10. Sorry for the noise :(\n. JSCtags doesn't properly with node v10. Sorry for the noise :(\n. ",
    "memeplex": "There really is a problem here. Right, jsctags doesn't work anymore but you can uninstall it and ctrlp will be smart enough to fallback to ctags. The issue is that `s:types` is configured with `--javascript-types=sf` and `s` is wrong for ctags.\n\nA workaround:\n\n```\nlet g:ctrlp_buftag_types = { 'javascript': '--language-force=javascript --javascript-types=fcmv' }\n```\n\nThe supported kinds are:\n\n```\nctags --list-kinds=javascript\nf  functions\nc  classes\nm  methods\np  properties\nv  global variables\n```\n\nBy the way, I think `kinds` is more consistent terminology than `types` regarding the ctags documentation.\n. There really is a problem here. Right, jsctags doesn't work anymore but you can uninstall it and ctrlp will be smart enough to fallback to ctags. The issue is that `s:types` is configured with `--javascript-types=sf` and `s` is wrong for ctags.\n\nA workaround:\n\n```\nlet g:ctrlp_buftag_types = { 'javascript': '--language-force=javascript --javascript-types=fcmv' }\n```\n\nThe supported kinds are:\n\n```\nctags --list-kinds=javascript\nf  functions\nc  classes\nm  methods\np  properties\nv  global variables\n```\n\nBy the way, I think `kinds` is more consistent terminology than `types` regarding the ctags documentation.\n. ",
    "korovkin": "thanks for the tip! \n\ni ended up doing this: \n(I am not interested in the fuzzy finger, just grepping will do) \n\nlet g:ctrlp_match_func = { 'match': 'GrepMatch' }\n\nfunction! GrepMatch(items, str, limit, mmode, ispath, crfile, regex)\n  let query = a:str\n  if query == \"\"\n    let query = \".\"\n  endif\n\n  let cachefile = '.files'\n  if !filereadable(cachefile)\n    let files = split(system('find . -type f -name *.c -o -name *.m -o -name *.h -o -name *.mm -o -name *.cpp -o -name *.hh -o -name *.py -o -name *.java -o -name *.json -o -name *.plist -o -name *.rb -o -name *.pbxproj', \"\\n\"))\n    call writefile(files, cachefile)\n  endif\n\n  let cmd = 'cat .files | grep -i '\n  let cmd = cmd.query.\" | head -n 100\"\n  echo cmd\n  return split(system(cmd), \"\\n\")\nendfunction\n. thanks for the tip! \n\ni ended up doing this: \n(I am not interested in the fuzzy finger, just grepping will do) \n\nlet g:ctrlp_match_func = { 'match': 'GrepMatch' }\n\nfunction! GrepMatch(items, str, limit, mmode, ispath, crfile, regex)\n  let query = a:str\n  if query == \"\"\n    let query = \".\"\n  endif\n\n  let cachefile = '.files'\n  if !filereadable(cachefile)\n    let files = split(system('find . -type f -name *.c -o -name *.m -o -name *.h -o -name *.mm -o -name *.cpp -o -name *.hh -o -name *.py -o -name *.java -o -name *.json -o -name *.plist -o -name *.rb -o -name *.pbxproj', \"\\n\"))\n    call writefile(files, cachefile)\n  endif\n\n  let cmd = 'cat .files | grep -i '\n  let cmd = cmd.query.\" | head -n 100\"\n  echo cmd\n  return split(system(cmd), \"\\n\")\nendfunction\n. ",
    "sheki": "this works thanks a ton. \n. this works thanks a ton. \n. ",
    "ehynds": "Any updates on this?\n. Any updates on this?\n. ",
    "sodapopcan": "I usually end up using esc, (sometimes c-c) but q is so ingrained and is used by all the plugins I use that open unmodifiable splits (fugitive and buffer gator to name a couple otherwise yes, q is the macro key) and I am too stubborn to change my ways at this point.  The idea is that this isn't enabled by default, just an option one could set!  But again, I can't speak for having to retrain finding files that start with q.\n\nI was pretty sure this would be an unpopular idea ;)\n. Whoa!  I clearly didn't read the help file thoroughly.  Now I'm embarrassed.\n\nCASE CLOSED!  Thanks  :)\n. Oh, well, not exactly what I was looking for since typing q ANYWHERE in the input quits... I was thinking ONLY if it's the first letter, but I'm gonna let this go now.\n\nThanks guys!\n. I usually end up using esc, (sometimes c-c) but q is so ingrained and is used by all the plugins I use that open unmodifiable splits (fugitive and buffer gator to name a couple otherwise yes, q is the macro key) and I am too stubborn to change my ways at this point.  The idea is that this isn't enabled by default, just an option one could set!  But again, I can't speak for having to retrain finding files that start with q.\n\nI was pretty sure this would be an unpopular idea ;)\n. Whoa!  I clearly didn't read the help file thoroughly.  Now I'm embarrassed.\n\nCASE CLOSED!  Thanks  :)\n. Oh, well, not exactly what I was looking for since typing q ANYWHERE in the input quits... I was thinking ONLY if it's the first letter, but I'm gonna let this go now.\n\nThanks guys!\n. ",
    "reentim": "Seem mad to me, but CtrlP provides for this sort of customisation, read `ctrlp_prompt_mappings`.\n\nYou'd want `let g:ctrlp_prompt_mappings = { 'PrtExit()': ['<esc>', '<c-c>', '<c-g>', 'q'] }`.\n. Seem mad to me, but CtrlP provides for this sort of customisation, read `ctrlp_prompt_mappings`.\n\nYou'd want `let g:ctrlp_prompt_mappings = { 'PrtExit()': ['<esc>', '<c-c>', '<c-g>', 'q'] }`.\n. ",
    "FriedSock": "Yes, its quite possible. This could be done quite easily as an extension and just returning the output of the `:history` command in the `init()` function. This will only work for ex commands though...\n. Yes, its quite possible. This could be done quite easily as an extension and just returning the output of the `:history` command in the `init()` function. This will only work for ex commands though...\n. ",
    "romanodesouza": "Found the cause. This occurs always when `g:ctrlp_user_command` is setted. =/\nSo, is this a bug or expected?\n. OK https://github.com/kien/ctrlp.vim/blob/master/doc/ctrlp.txt#L265-267\n. Found the cause. This occurs always when `g:ctrlp_user_command` is setted. =/\nSo, is this a bug or expected?\n. OK https://github.com/kien/ctrlp.vim/blob/master/doc/ctrlp.txt#L265-267\n. ",
    "cj": "@d11wtq thank you for the reply.  I know you can do that, but I was wondering if it's possible to just show files beginning with a period without showing all hidden.  I'll take a look at the docs :)\n. have you seen https://github.com/Shougo/unite.vim, they handle it in a really interesting way.  they have some sort of exception where when you just type a period it adds files that just start with a period to the search even if they are hidden.  I'll have to dig through the code and find out what they do.\n. @d11wtq thank you for the reply.  I know you can do that, but I was wondering if it's possible to just show files beginning with a period without showing all hidden.  I'll take a look at the docs :)\n. have you seen https://github.com/Shougo/unite.vim, they handle it in a really interesting way.  they have some sort of exception where when you just type a period it adds files that just start with a period to the search even if they are hidden.  I'll have to dig through the code and find out what they do.\n. ",
    "jridgewell": "I think this is a brilliant addition, and would help with my current directory searching. :+1: \n. I think this is a brilliant addition, and would help with my current directory searching. :+1: \n. ",
    "christianrondeau": "My Vimscript skills are limited, but if someone with good knowledge of CtrlP could point in the right direction, I might try to implement it (please do not wait for me though, it might take ages)\n. My Vimscript skills are limited, but if someone with good knowledge of CtrlP could point in the right direction, I might try to implement it (please do not wait for me though, it might take ages)\n. ",
    "ih4cku": "How to use `ctrlp` to search tags?\n. How to use `ctrlp` to search tags?\n. ",
    "aandrieiev": "Quite a primitive workaround:\n\n``` vim\nnnoremap <LEADER>f :call RunCtrlP()<CR>\n\nfun! RunCtrlP()\n  lcd %:p:h\n  if (getcwd() == $HOME)\n    echo \"Can't run in \\$HOME\"\n    return\n  endif\n  CtrlP\nendfunc\n\n```\n\nNote that I'm changing the working directory to that containing the current file. It fits my workflow but may not necessarily fit yours.\n. Quite a primitive workaround:\n\n``` vim\nnnoremap <LEADER>f :call RunCtrlP()<CR>\n\nfun! RunCtrlP()\n  lcd %:p:h\n  if (getcwd() == $HOME)\n    echo \"Can't run in \\$HOME\"\n    return\n  endif\n  CtrlP\nendfunc\n\n```\n\nNote that I'm changing the working directory to that containing the current file. It fits my workflow but may not necessarily fit yours.\n. ",
    "rlue": "I use `ag` as my ctrlp user command\r\n\r\n    if executable('ag')\r\n      let g:ctrlp_user_command = 'ag %s --nocolor -g \"\"'\r\n    endif\r\n\r\nand then any top-level directories in my home that don't usually contain text files go in my `.agignore`.. I use `ag` as my ctrlp user command\r\n\r\n    if executable('ag')\r\n      let g:ctrlp_user_command = 'ag %s --nocolor -g \"\"'\r\n    endif\r\n\r\nand then any top-level directories in my home that don't usually contain text files go in my `.agignore`.. ",
    "jonwingfield": "Same problem here.  In large projects CtrlP is useless because of the above problem.  \n. Same problem here.  In large projects CtrlP is useless because of the above problem.  \n. ",
    "wejrowski": ":+1: This bugs me too!\n. Ok it looks like literally just this one projects.. I can't search any folder, once I type / I get nothing. It is a gigantic project btw, if ctrlp may have a limit?\n. Found the issue. My project has 73k files. I had to set max files to higher... apparently there's a default? (not specified in help).\n\n```\nlet g:ctrlp_max_files=100000\n```\n. :+1: This bugs me too!\n. Ok it looks like literally just this one projects.. I can't search any folder, once I type / I get nothing. It is a gigantic project btw, if ctrlp may have a limit?\n. Found the issue. My project has 73k files. I had to set max files to higher... apparently there's a default? (not specified in help).\n\n```\nlet g:ctrlp_max_files=100000\n```\n. ",
    "collinpeters": "+1 for this. IMO in any mode, when sorting the matching anything that is an exact match, especially a full exact match, should be sorted first. I have the same problem that I literally cannot open a file named Lead.java as it shows tons of other matches first\n. Hmm... I see that that is \"an active fork of ctrl-p\" and that this (the original) has not received a commit since 2013. Is this one considered dead? :(\n. In any case, ctrlpvim/ctrlp.vim behaves no differently for me\n. +1 for this. IMO in any mode, when sorting the matching anything that is an exact match, especially a full exact match, should be sorted first. I have the same problem that I literally cannot open a file named Lead.java as it shows tons of other matches first\n. Hmm... I see that that is \"an active fork of ctrl-p\" and that this (the original) has not received a commit since 2013. Is this one considered dead? :(\n. In any case, ctrlpvim/ctrlp.vim behaves no differently for me\n. ",
    "edi9999": "Completely agree with this !\n. I think https://github.com/ctrlpvim/ctrlp.vim will by default give preferences to exact match\n. Why exactly do you want to get 100 results ? I'm not sure you're using the right tool to do that ? CtrlP.vim is to navigate between files inside vim. Do you want to get all files outside of vim ?\n. Completely agree with this !\n. I think https://github.com/ctrlpvim/ctrlp.vim will by default give preferences to exact match\n. Why exactly do you want to get 100 results ? I'm not sure you're using the right tool to do that ? CtrlP.vim is to navigate between files inside vim. Do you want to get all files outside of vim ?\n. ",
    "edwintorok": "I tried https://github.com/FelikZ/ctrlp-py-matcher, and it now finds files (exact matches) that it previously didn't due to max results / list height. It is also a lot faster than increasing max results in ctrlp itself (I would've needed max results set to 128 with ctrlp to find my file, which was very slow).\nEnable it with:\n\n``` vim\nlet g:ctrlp_match_func = { 'match': 'pymatcher#PyMatch' }\n```\n. I tried https://github.com/FelikZ/ctrlp-py-matcher, and it now finds files (exact matches) that it previously didn't due to max results / list height. It is also a lot faster than increasing max results in ctrlp itself (I would've needed max results set to 128 with ctrlp to find my file, which was very slow).\nEnable it with:\n\n``` vim\nlet g:ctrlp_match_func = { 'match': 'pymatcher#PyMatch' }\n```\n. ",
    "still-dreaming-1": "+1. It is pretty frustrating when your file finder does not show the file you typed in but does show a bunch of other files that are not the file you typed in.\n. +1. It is pretty frustrating when your file finder does not show the file you typed in but does show a bunch of other files that are not the file you typed in.\n. ",
    "elbajo": ":+1:  pretty annoying :-(\n. :+1:  pretty annoying :-(\n. ",
    "hpurmann": "I was annoyed by that as well. Try [fzf](https://github.com/junegunn/fzf.vim/), works pretty nicely. It also works with `ag`, if you do it like [this](https://github.com/hpurmann/dotfiles/commit/b1c8c42e380d724c1732121ad2cf3094a3045b10).. I was annoyed by that as well. Try [fzf](https://github.com/junegunn/fzf.vim/), works pretty nicely. It also works with `ag`, if you do it like [this](https://github.com/hpurmann/dotfiles/commit/b1c8c42e380d724c1732121ad2cf3094a3045b10).. ",
    "ohad-coursera": "+1. +1. ",
    "jrutishauser": "I was annoyed by this as well but discovered after hitting <ctrl-p> just also hit <ctrl-r>. You'll see a `r` show up before the `>>` where the path you type appears. This is regex mode as mentioned above, seems to always work well for me. Im working in a repo with many thousands of files. I was annoyed by this as well but discovered after hitting <ctrl-p> just also hit <ctrl-r>. You'll see a `r` show up before the `>>` where the path you type appears. This is regex mode as mentioned above, seems to always work well for me. Im working in a repo with many thousands of files. ",
    "huaihuaiVV": "does any one still  maintain this piugins  ?\n. does any one still  maintain this piugins  ?\n. ",
    "nobuf": "I've faced the same error after switching to fishshell from zsh. I ended up adding `set shell=/bin/bash` in vimrc and it started working again.\n. I've faced the same error after switching to fishshell from zsh. I ended up adding `set shell=/bin/bash` in vimrc and it started working again.\n. ",
    "AdrienGiboire": "It seems like it was actually a problem in the name of my directory. I worked in `/Users/adrien/code/geroni.mo` and migrate the code in `/Users/adrien/code/geronimo` and it works.\n\nI don't know what raises this issue exactly.\n. It seems like it was actually a problem in the name of my directory. I worked in `/Users/adrien/code/geroni.mo` and migrate the code in `/Users/adrien/code/geronimo` and it works.\n\nI don't know what raises this issue exactly.\n. ",
    "mtchavez": "OK so I just had a giant response written and when I got to the end I had written out some of my problem directories that would say `no entries` and saw a pattern and was able to fix my issue.\n\n@AdrienGiboire might be right that there is something particular about the directory path. So my specific problem was the word `blog`. I had these two directories that would not work regardless of what I tried to ignore or what shell was set or anything. I also tried to install Command-T to see if it was a plugin specific issue and saw the same issue with no entries.\n\nDirectories:\n1. `~/Projects/blog`\n2. `~/Projects/companyx/blog`\n\nI had suspected it was either vim regex issues on specific directories or something to do with using bundler to bundle to the vendor directory for some projects. Simply renaming the directories fixed my issue. But I am curious why `blog` is an issue or in @AdrienGiboire's case `geroni.mo`. I can't find anywhere where I am ignoring `blog` or telling ctrlp to not look in `blog` directories.\n\nHopefully this helps.\n. @goddamnyouryan Not really. I tried a few different approaches and other plugins, not sure what the issue is. I luckily could re-name my directories. Can you do something with symlinks or rsync to a separate place not named `blog`? Never tried that.\n. OK so I just had a giant response written and when I got to the end I had written out some of my problem directories that would say `no entries` and saw a pattern and was able to fix my issue.\n\n@AdrienGiboire might be right that there is something particular about the directory path. So my specific problem was the word `blog`. I had these two directories that would not work regardless of what I tried to ignore or what shell was set or anything. I also tried to install Command-T to see if it was a plugin specific issue and saw the same issue with no entries.\n\nDirectories:\n1. `~/Projects/blog`\n2. `~/Projects/companyx/blog`\n\nI had suspected it was either vim regex issues on specific directories or something to do with using bundler to bundle to the vendor directory for some projects. Simply renaming the directories fixed my issue. But I am curious why `blog` is an issue or in @AdrienGiboire's case `geroni.mo`. I can't find anywhere where I am ignoring `blog` or telling ctrlp to not look in `blog` directories.\n\nHopefully this helps.\n. @goddamnyouryan Not really. I tried a few different approaches and other plugins, not sure what the issue is. I luckily could re-name my directories. Can you do something with symlinks or rsync to a separate place not named `blog`? Never tried that.\n. ",
    "amaltson": "I'm running into this issue too when editing a project that was in a `tmp` directory in my Users folder. It turns out the name (or more explicitly the directory) was to blame. In my `.vimrc` I have a config for ctrl-p to ignore some directories\n\n```\nlet g:ctrlp_custom_ignore = 'tmp$\\|\\.git$\\|\\.hg$\\|...<lots more directories here>\n```\n\nThe behaviour that I was expecting is for ctrl-p to ignore the tmp directory starting from the directory where I open vim, not the parent directories. Hope that helps some how..\n. I'm running into this issue too when editing a project that was in a `tmp` directory in my Users folder. It turns out the name (or more explicitly the directory) was to blame. In my `.vimrc` I have a config for ctrl-p to ignore some directories\n\n```\nlet g:ctrlp_custom_ignore = 'tmp$\\|\\.git$\\|\\.hg$\\|...<lots more directories here>\n```\n\nThe behaviour that I was expecting is for ctrl-p to ignore the tmp directory starting from the directory where I open vim, not the parent directories. Hope that helps some how..\n. ",
    "goddamnyouryan": "@mtchavez I am having the exact same issue with my dirs named `blog`. Did you ever figure out what was causing this? I can't rename my directories, unfortunately.\n. @mtchavez I probably could, it's not a huge deal either way, it's just weird! Every other directory works except for `blog`.\n. @codingrogue @nobuf I tried setting my shell to bash and it still didn't work for finding files in the `blog` directory.\n. @jdart nice! yes definitely good to have that information here, but also to note that this is not the cause of our issue either.\n. @mtchavez I am having the exact same issue with my dirs named `blog`. Did you ever figure out what was causing this? I can't rename my directories, unfortunately.\n. @mtchavez I probably could, it's not a huge deal either way, it's just weird! Every other directory works except for `blog`.\n. @codingrogue @nobuf I tried setting my shell to bash and it still didn't work for finding files in the `blog` directory.\n. @jdart nice! yes definitely good to have that information here, but also to note that this is not the cause of our issue either.\n. ",
    "chalmagean": "+1 I can confirm this, same thing happens to me (the word blog in the folder name makes ctrlp return no entries)\n. +1 I can confirm this, same thing happens to me (the word blog in the folder name makes ctrlp return no entries)\n. ",
    "crsmithdev": "Same issue...working in one particular project where ctrlp finds no files whatsoever...after some trial and error, found that if I remove the '-' from the parent directory name, it works.\n. Same issue...working in one particular project where ctrlp finds no files whatsoever...after some trial and error, found that if I remove the '-' from the parent directory name, it works.\n. ",
    "thefron": "Same happens to me. As @crsmithdev says, removing '-' from directory name solves problem for now.\n. Same happens to me. As @crsmithdev says, removing '-' from directory name solves problem for now.\n. ",
    "alexlafroscia": "I'm getting this too, with a `pwd` that has dashes in it.  Unfortunately it's a Go project, so I can't easily change the path, because it needs to match the URL for where it was downloaded from.\n. I'm getting this too, with a `pwd` that has dashes in it.  Unfortunately it's a Go project, so I can't easily change the path, because it needs to match the URL for where it was downloaded from.\n. ",
    "codepushr": "wtf .. for me too the missing `set shell=/bin/bash` was the culprit .. i was googling for hours, huge thanks @nobuf \n. wtf .. for me too the missing `set shell=/bin/bash` was the culprit .. i was googling for hours, huge thanks @nobuf \n. ",
    "nicohvi": "+1\n. +1\n. ",
    "BRMatt": "I had a similar issue with go projects that were cloned from github. Seems I had the following in my vimrc file:\n\n``` viml\nlet g:ctrlp_custom_ignore = {\n  \\ 'dir': 'node_modules\\|DS_Store\\|.git'\n  \\ }\n```\n\nThe unescaped dot character was matching a forward slash. See also https://github.com/carlhuda/janus/pull/550\n. I had a similar issue with go projects that were cloned from github. Seems I had the following in my vimrc file:\n\n``` viml\nlet g:ctrlp_custom_ignore = {\n  \\ 'dir': 'node_modules\\|DS_Store\\|.git'\n  \\ }\n```\n\nThe unescaped dot character was matching a forward slash. See also https://github.com/carlhuda/janus/pull/550\n. ",
    "jdart": "Since this is the top search result for \"Ctrlp no entries\" I thought I'd add why ctrlp reported no entries in my case even though it's likely unrelated with this thread. I was working in a project folder with no .git folder - doing a git init in my project folder allowed ctrlp to find the files.\n. Since this is the top search result for \"Ctrlp no entries\" I thought I'd add why ctrlp reported no entries in my case even though it's likely unrelated with this thread. I was working in a project folder with no .git folder - doing a git init in my project folder allowed ctrlp to find the files.\n. ",
    "JmeHsieh": "Not sure if anyone has the same cause as mine, but here the _bug_ I find:\n\nI have this old vim plugin installed: [vim-scripts/gitignore](https://github.com/vim-scripts/gitignore)\nwhich will parse my `.gitignore` file\n\nAnd I have my `.gitignore` containing this line: `*,cover`\n(yes, that strange comma is not a mistake, according to this [comment](https://github.com/github/gitignore/commit/ba6f0a94abe2c802caba33b42da1e6a36e40f526))\n\nThat's my _bug_.\nIf I delete the comma in my `.gitignore`, everything is fine now.\nIf I remove the plugin, everything is fine even with that strange comma.\n\nSo I decide to remove the plugin. \ud83c\udf7a\n. Not sure if anyone has the same cause as mine, but here the _bug_ I find:\n\nI have this old vim plugin installed: [vim-scripts/gitignore](https://github.com/vim-scripts/gitignore)\nwhich will parse my `.gitignore` file\n\nAnd I have my `.gitignore` containing this line: `*,cover`\n(yes, that strange comma is not a mistake, according to this [comment](https://github.com/github/gitignore/commit/ba6f0a94abe2c802caba33b42da1e6a36e40f526))\n\nThat's my _bug_.\nIf I delete the comma in my `.gitignore`, everything is fine now.\nIf I remove the plugin, everything is fine even with that strange comma.\n\nSo I decide to remove the plugin. \ud83c\udf7a\n. ",
    "ramseydsilva": "The *,cover line in my .gitignore also breaks ctrlP. The *,cover line in my .gitignore also breaks ctrlP. ",
    "gouegd": "Had to change my `init.vim` and do as @nobuf .\r\nI could see it was a zsh-related error as it displayed:\r\n`zsh:1: no matches found: !*/tmp/*`. Had to change my `init.vim` and do as @nobuf .\r\nI could see it was a zsh-related error as it displayed:\r\n`zsh:1: no matches found: !*/tmp/*`. ",
    "ChenXiyu": "`shell=/bin/bash` works for me, thanks @nobuf . `shell=/bin/bash` works for me, thanks @nobuf . ",
    "calvinwoo": "I had the issue a lot of others seemed to get where files weren't listed specifically in a folder named `blog`. Turns out, I had `let g:ctrlp_custom_ignore` set to include `log`, which lead to a partial match with `blog`.. I had the issue a lot of others seemed to get where files weren't listed specifically in a folder named `blog`. Turns out, I had `let g:ctrlp_custom_ignore` set to include `log`, which lead to a partial match with `blog`.. ",
    "sjking": "Setting the custom user command to ignore files in `.gitignore` works for me to fix this issue: \r\n```\r\nlet g:ctrlp_user_command = ['.git', 'cd %s && git ls-files -co --exclude-standard']\r\n```. Setting the custom user command to ignore files in `.gitignore` works for me to fix this issue: \r\n```\r\nlet g:ctrlp_user_command = ['.git', 'cd %s && git ls-files -co --exclude-standard']\r\n```. ",
    "firedev": "Here is shows god knows what (including the files I need of course). Temp files, Vim help. How to fix this behaviour?\n\n```\n> /var/folders/jz/2t5hs51j0rs17q6c3psdnlk00000gn/T/vUUOKiH/202                                                   \n> /var/folders/jz/2t5hs51j0rs17q6c3psdnlk00000gn/T/vUUOKiH/205\n> /Users/pain/.vim/bundle/vim-unimpaired/doc/unimpaired.txt\n```\n. Here is shows god knows what (including the files I need of course). Temp files, Vim help. How to fix this behaviour?\n\n```\n> /var/folders/jz/2t5hs51j0rs17q6c3psdnlk00000gn/T/vUUOKiH/202                                                   \n> /var/folders/jz/2t5hs51j0rs17q6c3psdnlk00000gn/T/vUUOKiH/205\n> /Users/pain/.vim/bundle/vim-unimpaired/doc/unimpaired.txt\n```\n. ",
    "jmlucjav": "ok, found the issue, I needed to clear cache to see my user_command changed, please close, thanks\n. ok, found the issue, I needed to clear cache to see my user_command changed, please close, thanks\n. ",
    "Integralist": "Originally opened on vim-surround: https://github.com/tpope/vim-surround/issues/129. @tpope closed the issue suggesting the following:\n\n> I'm guessing this can be fixed on the ctrlp side with <nowait> mappings. I don't think I can work around it on my end. @kien\n. I'm going to close this as it's a problem that also caused a hard to track down bug that I thought was being caused by the vim-bookmarks plugin (but wasn't really). See https://github.com/MattesGroeger/vim-bookmarks/issues/47#issuecomment-44043332\n\nLooks like the solution is to use CtrlP's paste feature `<Ctrl-\\>` and to selection the clipboard option `c`. Pretty much as @d11wtq suggested the problem was.\n\nI don't think I can work around the loading order of plugins with Pathogen (@tpope) and I'd rather not have to go back to using Vundle so I'll work around it as described above.\n. Originally opened on vim-surround: https://github.com/tpope/vim-surround/issues/129. @tpope closed the issue suggesting the following:\n\n> I'm guessing this can be fixed on the ctrlp side with <nowait> mappings. I don't think I can work around it on my end. @kien\n. I'm going to close this as it's a problem that also caused a hard to track down bug that I thought was being caused by the vim-bookmarks plugin (but wasn't really). See https://github.com/MattesGroeger/vim-bookmarks/issues/47#issuecomment-44043332\n\nLooks like the solution is to use CtrlP's paste feature `<Ctrl-\\>` and to selection the clipboard option `c`. Pretty much as @d11wtq suggested the problem was.\n\nI don't think I can work around the loading order of plugins with Pathogen (@tpope) and I'd rather not have to go back to using Vundle so I'll work around it as described above.\n. ",
    "patspam": "I'm seeing the same issue with CtrlP + Surround plugins.\n\nSimple repro: type Xcs (where X can be any character) fast into the CtrlP prompt. Easiest way to repro is to use terminal copy/paste. The letters \"cs\" do not appear in the prompt, and the prompt waits for another character to be typed, at which point it beeps.\n\nProblem goes away as soon as a I unmap cs.\n\n@Integralist I don't understand your \"solution\" comment above - your originally reported issue (and mine here) is not related to copy/paste.\n. I normally work on a big project (100k files). I switched to a smaller project (7k files) and I could no longer trigger by typing fast. I could still trigger via copy/paste though.\n\nI commented out my entire vimrc except for loading vundle, and removed all plugins except for CtrlP and Surround.vim. I could still repro (on a directory containing only 2 files).\n\nDid not matter when I switched from iTerm.app to Terminal.app.\nDid not matter when I stopped using tmux.\n\nAll of this using MacVim.\n. I'm seeing the same issue with CtrlP + Surround plugins.\n\nSimple repro: type Xcs (where X can be any character) fast into the CtrlP prompt. Easiest way to repro is to use terminal copy/paste. The letters \"cs\" do not appear in the prompt, and the prompt waits for another character to be typed, at which point it beeps.\n\nProblem goes away as soon as a I unmap cs.\n\n@Integralist I don't understand your \"solution\" comment above - your originally reported issue (and mine here) is not related to copy/paste.\n. I normally work on a big project (100k files). I switched to a smaller project (7k files) and I could no longer trigger by typing fast. I could still trigger via copy/paste though.\n\nI commented out my entire vimrc except for loading vundle, and removed all plugins except for CtrlP and Surround.vim. I could still repro (on a directory containing only 2 files).\n\nDid not matter when I switched from iTerm.app to Terminal.app.\nDid not matter when I stopped using tmux.\n\nAll of this using MacVim.\n. ",
    "henrik": "@patspam I've seen this issue a few times, but I can't reproduce it by opening any project, opening ctrlp and then hitting \"acs\" (or whatever) quickly.\n\nAfter experimenting a bit, it seems I can reproduce this issue specifically during the period when ctrlp is building its file list (or something like that). So if I go into a big project and ctrp has not yet cached the list, typing e.g. \"acs\" while it's building the list (= while you see a a increase below the ctrlp list) reproduces the issue. So I can't reproduce it in the same project after the list is cached, or in a project that is small enough that building the list is super quick.\n\nThe prompt doesn't actually appear until after it's done building the list. When the prompt does appear, the \"a\" is there but the \"cs\" is not \u2013 I guess because it was treated as surround.vim stuff, as mentioned.\n. @patspam I've seen this issue a few times, but I can't reproduce it by opening any project, opening ctrlp and then hitting \"acs\" (or whatever) quickly.\n\nAfter experimenting a bit, it seems I can reproduce this issue specifically during the period when ctrlp is building its file list (or something like that). So if I go into a big project and ctrp has not yet cached the list, typing e.g. \"acs\" while it's building the list (= while you see a a increase below the ctrlp list) reproduces the issue. So I can't reproduce it in the same project after the list is cached, or in a project that is small enough that building the list is super quick.\n\nThe prompt doesn't actually appear until after it's done building the list. When the prompt does appear, the \"a\" is there but the \"cs\" is not \u2013 I guess because it was treated as surround.vim stuff, as mentioned.\n. ",
    "darfink": "I experience the same issue. When working with directories over SSHFS I can always reproduce this issue (the latency is much higher compared to working locally). It becomes extremely annoying during long work days. I guess the problem is exhibited whenever there is a longer delay involved.\n. I experience the same issue. When working with directories over SSHFS I can always reproduce this issue (the latency is much higher compared to working locally). It becomes extremely annoying during long work days. I guess the problem is exhibited whenever there is a longer delay involved.\n. ",
    "ddddavidmartin": "I haven't tried it myself, but 'g:ctrlp_working_path_mode' sounds like it might be what you are after. Check the [Basic Options](https://github.com/kien/ctrlp.vim#basic-options).\n. I haven't tried it myself, but 'g:ctrlp_working_path_mode' sounds like it might be what you are after. Check the [Basic Options](https://github.com/kien/ctrlp.vim#basic-options).\n. ",
    "ahmedelgabri": "@adkazakov Wow! I guess someone didn't read the issue properly. Maybe this will help you https://github.com/kien/ctrlp.vim/blob/master/doc/ctrlp.txt#L409-L416, instead of just being rude like this & then deleting your reply without even an apology.\n\nYou maybe forgot that people get notified through emails & you can't delete these emails.\n\n![screen shot 2014-07-30 at 12 24 00 pm](https://cloud.githubusercontent.com/assets/63876/3746649/ec3e1744-17c2-11e4-9f07-74ef09b441f8.png)\n. @adkazakov Ok, that's fine.\n. @adkazakov Wow! I guess someone didn't read the issue properly. Maybe this will help you https://github.com/kien/ctrlp.vim/blob/master/doc/ctrlp.txt#L409-L416, instead of just being rude like this & then deleting your reply without even an apology.\n\nYou maybe forgot that people get notified through emails & you can't delete these emails.\n\n![screen shot 2014-07-30 at 12 24 00 pm](https://cloud.githubusercontent.com/assets/63876/3746649/ec3e1744-17c2-11e4-9f07-74ef09b441f8.png)\n. @adkazakov Ok, that's fine.\n. ",
    "liberquaestor": "@ahmedelgabri  Man, sorry - it's comments not for you! It's my fail ))))\n. @ahmedelgabri  Man, sorry - it's comments not for you! It's my fail ))))\n. ",
    "rue": "I\u2019m running into the same problem\u2026 I typically open two instances specifically to work in separate workspaces (often e.g. different branches of the same project), so it\u2019s rather suboptimal\u2014and very error-prone\u2014to see files from both instances pop up.\n. I\u2019m running into the same problem\u2026 I typically open two instances specifically to work in separate workspaces (often e.g. different branches of the same project), so it\u2019s rather suboptimal\u2014and very error-prone\u2014to see files from both instances pop up.\n. ",
    "thejspr": "ctrlp already contains a solution for this.\n\n```\nlet g:ctrlp_mruf_relative = 1\n```\n\nwill only show MRU files relative to the current working directory.\n. ctrlp already contains a solution for this.\n\n```\nlet g:ctrlp_mruf_relative = 1\n```\n\nwill only show MRU files relative to the current working directory.\n. ",
    "Kazark": "I pulled the latest for most of the plugins and removed VimLParser. I'll report back about it.\n. Very strange. As odd as this behavior was in the first place, it has even more mysteriously disappeared. I'm unable to reproduce it now and I am going to close this issue until I can (which is hopefully never).\n. Okay, I have more details now. It seems that this only happens when you are typing in something that has a dash `-` in it. Also, it is not `A*` but `*A`, and I have seen a similar thing (presumably same root cause?) happen when I am typing something with a dash in it and then use the left and right arrow keys. Sometimes while pushing the left arrow the Ctrl-P window closes and suddenly `*D` is inserted into my buffer. Sometimes while pushing the right arrow the Ctrl-P window closes and suddenly `*C` is inserted into my buffer. This seems to happen around the time my cursor crosses the dash.\n. Okay, it isn't just with a dash `-`. This is very weird. I got a `*D` just now without having a dash in the word. Will continue to post things as I figure them out.\n. @liskin Hmm! That's good info. I tried to build Vim once before and did not succeed but I know a lot more now than I did then so I could try again. We'll see whether I have time... I'm about to exit a stage of life when I have a lot of free time, but bisecting that would be interesting...\n. @liskin You are awesome. What are you going to do about it?\n. I pulled the latest for most of the plugins and removed VimLParser. I'll report back about it.\n. Very strange. As odd as this behavior was in the first place, it has even more mysteriously disappeared. I'm unable to reproduce it now and I am going to close this issue until I can (which is hopefully never).\n. Okay, I have more details now. It seems that this only happens when you are typing in something that has a dash `-` in it. Also, it is not `A*` but `*A`, and I have seen a similar thing (presumably same root cause?) happen when I am typing something with a dash in it and then use the left and right arrow keys. Sometimes while pushing the left arrow the Ctrl-P window closes and suddenly `*D` is inserted into my buffer. Sometimes while pushing the right arrow the Ctrl-P window closes and suddenly `*C` is inserted into my buffer. This seems to happen around the time my cursor crosses the dash.\n. Okay, it isn't just with a dash `-`. This is very weird. I got a `*D` just now without having a dash in the word. Will continue to post things as I figure them out.\n. @liskin Hmm! That's good info. I tried to build Vim once before and did not succeed but I know a lot more now than I did then so I could try again. We'll see whether I have time... I'm about to exit a stage of life when I have a lot of free time, but bisecting that would be interesting...\n. @liskin You are awesome. What are you going to do about it?\n. ",
    "liskin": "Well, for me this started happenning when I upgraded vim from Debian's 2:7.4.273-2 to 2:7.4.335-1. Might be a vim issue, then. Have you perhaps got time to bisect this?\n. Well, if I had to do it (which I will if you don't manage to find free time sooner than I do), I'd just grab the Debian package source and tell it to build itself. :-)\n. Oh, and F5 doesn't work either. I guess I'm going to bisect it right now, this is annoying as hell. :-(\n. Okay, so it's this: ftp://ftp.vim.org/pub/vim/patches/7.4/7.4.305\n. Although I'm getting more and more convinced that this is actually a ctrlp problem. When I revert that patch, arrows and mouse work okay, but if i add \"set t_RV=\" to my .vimrc, it stops working. I'm not sure termresponse should be mandatory to ctrlp.\n\nAnyway, the workaround seems to be to remove set ttymouse from the vimrc, forcing vim to detect it itself and in doing so, request termresponse that is somehow needed for crtlp to work properly. I guess I can add a VimEnter autocmd to reset ttymouse to urxvt later.\n\nWell, maybe it's a vim problem after all. Setting ttymouse manually is hardly a reason to avoid termresponse altogether, as it seems to query all sorts of things other than that.\n. So, well, I don't know what I'm going to do about it. Sending an e-mail to the vim list might be a good idea, I guess.\n. VimEnter doesn't work, but this seems to do the trick:\n\n```\nautocmd TermResponse * set ttymouse=urxvt\n```\n. This may fix this: ftp://ftp.vim.org/pub/vim/patches/7.4/7.4.359\n(haven't tested it yet, though)\n. Well, for me this started happenning when I upgraded vim from Debian's 2:7.4.273-2 to 2:7.4.335-1. Might be a vim issue, then. Have you perhaps got time to bisect this?\n. Well, if I had to do it (which I will if you don't manage to find free time sooner than I do), I'd just grab the Debian package source and tell it to build itself. :-)\n. Oh, and F5 doesn't work either. I guess I'm going to bisect it right now, this is annoying as hell. :-(\n. Okay, so it's this: ftp://ftp.vim.org/pub/vim/patches/7.4/7.4.305\n. Although I'm getting more and more convinced that this is actually a ctrlp problem. When I revert that patch, arrows and mouse work okay, but if i add \"set t_RV=\" to my .vimrc, it stops working. I'm not sure termresponse should be mandatory to ctrlp.\n\nAnyway, the workaround seems to be to remove set ttymouse from the vimrc, forcing vim to detect it itself and in doing so, request termresponse that is somehow needed for crtlp to work properly. I guess I can add a VimEnter autocmd to reset ttymouse to urxvt later.\n\nWell, maybe it's a vim problem after all. Setting ttymouse manually is hardly a reason to avoid termresponse altogether, as it seems to query all sorts of things other than that.\n. So, well, I don't know what I'm going to do about it. Sending an e-mail to the vim list might be a good idea, I guess.\n. VimEnter doesn't work, but this seems to do the trick:\n\n```\nautocmd TermResponse * set ttymouse=urxvt\n```\n. This may fix this: ftp://ftp.vim.org/pub/vim/patches/7.4/7.4.359\n(haven't tested it yet, though)\n. ",
    "edanc": "i am also having this issue. i just started using ctrlp . It happens all the time. once i open up ctrlp and use the arrow key to navigate the letters are inserted into the current file i have open\n. i am also having this issue. i just started using ctrlp . It happens all the time. once i open up ctrlp and use the arrow key to navigate the letters are inserted into the current file i have open\n. ",
    "mollerhoj": "+1, I was just looking for this feature\n. +1, I was just looking for this feature\n. ",
    "mrvon": "+1, This feature always make me confuse.\n. +1, This feature always make me confuse.\n. ",
    "sassanh": "+1 I get confused by it too, I focus on a terminal that I wasn't working on for hours, press ctrl+p and try to open a file and it doesn't find it, and because I typed fast and just an abbreviation I start double checking what I typed again and again. please add this feature.\n. Guys any news about @kien ? I hope he's alright.. Yeah I'm using the new repository for a while. But all of a sudden while using ctrlp I felt it's really useful and I remembered about this thread and came here to see any news about kien. Btw, the merge commit for README file is a good sign.. +1 I get confused by it too, I focus on a terminal that I wasn't working on for hours, press ctrl+p and try to open a file and it doesn't find it, and because I typed fast and just an abbreviation I start double checking what I typed again and again. please add this feature.\n. Guys any news about @kien ? I hope he's alright.. Yeah I'm using the new repository for a while. But all of a sudden while using ctrlp I felt it's really useful and I remembered about this thread and came here to see any news about kien. Btw, the merge commit for README file is a good sign.. ",
    "foot": "+1 I do this regularly and get a bit flustered before realising my error.\n\nI guess you're actively filtering the current buffers, any hits about where would be best to implement this logic if one was to have a crack at a PR?\n. +1 I do this regularly and get a bit flustered before realising my error.\n\nI guess you're actively filtering the current buffers, any hits about where would be best to implement this logic if one was to have a crack at a PR?\n. ",
    "wkruszewski": "@foot There haven't been commits to this repo in two years. https://github.com/ctrlpvim/ctrlp.vim/ is an active community fork. I cross-posted this issue there https://github.com/ctrlpvim/ctrlp.vim/issues/95\n. @foot There haven't been commits to this repo in two years. https://github.com/ctrlpvim/ctrlp.vim/ is an active community fork. I cross-posted this issue there https://github.com/ctrlpvim/ctrlp.vim/issues/95\n. ",
    "TheLastProject": "The license information is apparently on https://github.com/kien/ctrlp.vim/blob/master/doc/ctrlp.txt#L1262.\n\nA LICENSE file would be great, though, it would make such information much more visible.\n. The license information is apparently on https://github.com/kien/ctrlp.vim/blob/master/doc/ctrlp.txt#L1262.\n\nA LICENSE file would be great, though, it would make such information much more visible.\n. ",
    "mmikeww": "Lol. So i'm supposed to hit Enter. Duh.\n\nAnyway, perhaps you can change the webpage to say something like `..<CR>` for idiots like me. Or the docs to say :\n\n```\n     Raw input    Interpreted as\n     ..<CR>           cd ../<CR>\n```\n\nOr even consider whether or not my attempted usage of `..searchstring` is a reasonable feature request. \n\nIn any case, my issue is resolved. :)\n. Lol. So i'm supposed to hit Enter. Duh.\n\nAnyway, perhaps you can change the webpage to say something like `..<CR>` for idiots like me. Or the docs to say :\n\n```\n     Raw input    Interpreted as\n     ..<CR>           cd ../<CR>\n```\n\nOr even consider whether or not my attempted usage of `..searchstring` is a reasonable feature request. \n\nIn any case, my issue is resolved. :)\n. ",
    "Sunxperous": "Agree with the <CR> suggestion, took this idiot (me) a few searches before I found this answer.\n. Agree with the <CR> suggestion, took this idiot (me) a few searches before I found this answer.\n. ",
    "RoyLee": "When you use a custom search tool, you'll have to set the ignore configuration for that specific tool, and in this case you need to create a .agignore file and add your ignored directories in it (similar to a .gitignore).\n. When you use a custom search tool, you'll have to set the ignore configuration for that specific tool, and in this case you need to create a .agignore file and add your ignored directories in it (similar to a .gitignore).\n. ",
    "benfrain": "Hi, thanks but having added that and restarted Vim I still get the same behaviour. \n. However, setting it to `<C-b>` does work :)\n. Thanks, actually just found that using your example I can have it even better than I expected:\n\n```\n\" Make CTRL+B open buffers\nnnoremap <C-b> :CtrlPBuffer<CR>\n\" Make CTRL+F open Most Recently Used files\nnnoremap <C-f> :CtrlPMRU<CR>\n```\n. Hi, thanks but having added that and restarted Vim I still get the same behaviour. \n. However, setting it to `<C-b>` does work :)\n. Thanks, actually just found that using your example I can have it even better than I expected:\n\n```\n\" Make CTRL+B open buffers\nnnoremap <C-b> :CtrlPBuffer<CR>\n\" Make CTRL+F open Most Recently Used files\nnnoremap <C-f> :CtrlPMRU<CR>\n```\n. ",
    "ludovicchabant": "I agree, this project is in desperate need of some love... if @kien is unable to maintain it (which is totally OK), there should be a way to pass the responsibility to someone else. Creating a GitHub organization would be better than just appointing a new maintainer in that case, so people can come and go, or even share responsibility...\n. Yes, all evidence points to this conclusion, but it's always good to do your due diligence in those matters. It's been 20 days, though, so I think @d11wtq can start creating a new Github org + CtrlP fork and declare it as the new official repo. If @kien comes back out of the blue, it will always be possible to merge things back.\n. You may need to use double backslashes, or use forward slashes, in your cache dir path.\n. What if you try something like this in your `vimrc`:\n\n```\nlet g:ctrlp_cache_dir = expand(\"<sfile>h\") . '/ctrlp_cache'\n```\n\nIt _should_ make CtrlP cache stuff just next to your `vimrc` in a `ctrlp_cache` folder. This is more or less what I have and it works on Windows...\n. Wait, what do you have on Dropbox? Your code, or the CtrlP cache? The CtrlP code is a bit hard to read for me, but I can see it's doing some timestamp comparisons to figure out if it should re-index a directory... maybe Dropbox is somehow changing timestamps a bit too much? Try to not use Dropbox to see if that fixes it.\n\nOther than that, yeah I've got no idea :(   I suppose you don't have any `let g:ctrlp_use_caching = 0` left somewhere? (check that it's still at 1 or undefined). Also check the permissions are OK on the cache folder.\n. In the cache folder you should get 2 directories, `hist` and `mru`... one is the history of your searches, I think, and the other is the list of \"most recently used\" files. So they persist across Vim sessions (if you close Vim and re-open it, you can press `<Tab>` and quickly open the last files you were working on last time).\n\nIn the same cache folder, you'll also see those weirdly named files (they look like paths with `%` characters instead of slashes). Those list the files in a given directory, so that pressing `<C-p>` several times will only scan that directory once (the first time). But it's cleaned by default when exiting Vim, presumably because there's a chance things will change before next time Vim starts... so next time you use Vim, it will rescan again each directory in which you use CtrlP. If you don't want this, set `g:ctrlp_clear_cache_on_exit` to 0. Then you should see those weird files persist in the cache directory, and CtrlP won't rescan anything until you press `<F5>`.\n. You may want to see how I use it with my [auto-ignore script](https://bitbucket.org/ludovicchabant/dotfiles/src/8db8c5f1fdd103184b87e220aa1ce4210e9be3b3/vim/autoload/ctrlpext/autoignore.vim?at=default) (you just need to activate it with a `ctrlpext#autoignore#init()` in your `vimrc`) and an example of a [`.ctrlpignore` file](https://bitbucket.org/ludovicchabant/dotfiles/src/8db8c5f1fdd103184b87e220aa1ce4210e9be3b3/.ctrlpignore?at=default). Cheers :)\n\n(after I play around with it more, I may release that auto-ignore script as a standalone Vim plugin)\n. Also, it's not very optimal right now (1 map lookup + 1 regex match per directory). I'll need to modify some more CtrlP code to fix that (probably some \"before/after scan\" hooks, so I can do only 1 map lookup for the whole project).\n. I agree, this project is in desperate need of some love... if @kien is unable to maintain it (which is totally OK), there should be a way to pass the responsibility to someone else. Creating a GitHub organization would be better than just appointing a new maintainer in that case, so people can come and go, or even share responsibility...\n. Yes, all evidence points to this conclusion, but it's always good to do your due diligence in those matters. It's been 20 days, though, so I think @d11wtq can start creating a new Github org + CtrlP fork and declare it as the new official repo. If @kien comes back out of the blue, it will always be possible to merge things back.\n. You may need to use double backslashes, or use forward slashes, in your cache dir path.\n. What if you try something like this in your `vimrc`:\n\n```\nlet g:ctrlp_cache_dir = expand(\"<sfile>h\") . '/ctrlp_cache'\n```\n\nIt _should_ make CtrlP cache stuff just next to your `vimrc` in a `ctrlp_cache` folder. This is more or less what I have and it works on Windows...\n. Wait, what do you have on Dropbox? Your code, or the CtrlP cache? The CtrlP code is a bit hard to read for me, but I can see it's doing some timestamp comparisons to figure out if it should re-index a directory... maybe Dropbox is somehow changing timestamps a bit too much? Try to not use Dropbox to see if that fixes it.\n\nOther than that, yeah I've got no idea :(   I suppose you don't have any `let g:ctrlp_use_caching = 0` left somewhere? (check that it's still at 1 or undefined). Also check the permissions are OK on the cache folder.\n. In the cache folder you should get 2 directories, `hist` and `mru`... one is the history of your searches, I think, and the other is the list of \"most recently used\" files. So they persist across Vim sessions (if you close Vim and re-open it, you can press `<Tab>` and quickly open the last files you were working on last time).\n\nIn the same cache folder, you'll also see those weirdly named files (they look like paths with `%` characters instead of slashes). Those list the files in a given directory, so that pressing `<C-p>` several times will only scan that directory once (the first time). But it's cleaned by default when exiting Vim, presumably because there's a chance things will change before next time Vim starts... so next time you use Vim, it will rescan again each directory in which you use CtrlP. If you don't want this, set `g:ctrlp_clear_cache_on_exit` to 0. Then you should see those weird files persist in the cache directory, and CtrlP won't rescan anything until you press `<F5>`.\n. You may want to see how I use it with my [auto-ignore script](https://bitbucket.org/ludovicchabant/dotfiles/src/8db8c5f1fdd103184b87e220aa1ce4210e9be3b3/vim/autoload/ctrlpext/autoignore.vim?at=default) (you just need to activate it with a `ctrlpext#autoignore#init()` in your `vimrc`) and an example of a [`.ctrlpignore` file](https://bitbucket.org/ludovicchabant/dotfiles/src/8db8c5f1fdd103184b87e220aa1ce4210e9be3b3/.ctrlpignore?at=default). Cheers :)\n\n(after I play around with it more, I may release that auto-ignore script as a standalone Vim plugin)\n. Also, it's not very optimal right now (1 map lookup + 1 regex match per directory). I'll need to modify some more CtrlP code to fix that (probably some \"before/after scan\" hooks, so I can do only 1 map lookup for the whole project).\n. ",
    "simonbaird": "+1\n. +1\n. ",
    "zackp30": ":+1:\n. @d11wtq If you take a look at their profile, there hasn't been any activity for the past 12 months. I doubt @kien would reply. :/\n. Okay, LGTM. :+1:\n. I'm concerned as well...\n. :+1:\n. @d11wtq If you take a look at their profile, there hasn't been any activity for the past 12 months. I doubt @kien would reply. :/\n. Okay, LGTM. :+1:\n. I'm concerned as well...\n. ",
    "wedgwood": "+1 :)\n. +1 :)\n. ",
    "tnorthcutt": "@d11wtq kudos for taking the lead on this!\n. @d11wtq kudos for taking the lead on this!\n. ",
    "WhyNotHugo": "FWIW, if you contact GitHub support, on cases like this, they'll change the cannonical/\"root\" repository -- so that new forks say \"forked from `ctrlpvim/ctrlp.vim`\", rather than this one.\r\n\r\nThis'd really help discoverability via forks quite a bit.. FWIW, if you contact GitHub support, on cases like this, they'll change the cannonical/\"root\" repository -- so that new forks say \"forked from `ctrlpvim/ctrlp.vim`\", rather than this one.\r\n\r\nThis'd really help discoverability via forks quite a bit.. ",
    "llinfeng": "Hi Ludovic,\n\nThanks for pointing the format for the cache dir path, however, it does not solve the problem. Here is some further observations: \n1. Through the following, the directory had been written on after my pressing of <C-P>\n   let g:ctrlp_cache_dir='C:\\Users\\Linfeng\\Documents\\Vim-document\\CtrlP'\n2. The odd thing is: in the aforementioned directory, CtrlP will create a .txt file named as \"C%%WINDOWS%system32.txt\", which is the name of the working directory of my Vim. \n   I tried to use cd commend (in my _vimrc) after the line specifying the ctrlp_cache_dir, however, a new .txt file will be created in the 'C:~\\CtrlP' directory. \n3.  More on the wired .txt file: \n   -  Upon closing of the gVim session, the fill will get deleted. (I think this is the problem that leads to the re-initializing problem);\n   -  In the .txt file, there are only files names that are in Vim's currently working directory. If I change the working directory out of the current-working-directory and press CtrlP again, the same initializing process would come again. This would end up with creating another .txt file named in the same way. \n\nUp to this point, I hope it would be clear what the problem would be coming from.\n\nThanks for your help!\n\nAll the best, \n- Linfeng\n. So, I did as suggested but it made the things worse. After I commented out my previous specification for ctrlp_cache_dir and used the line suggested above, CtrlP would have to reinitialize again every time I escape to normal mode. \n\nTo be more precise, when I change my directory to my dropbox folder and press <C-P>, it would take up to 10 seconds to initialize. If I were using the previous setting (let g:ctrlp_cache_dir='C:\\Users\\Linfeng\\Documents\\Vim-document\\CtrlP'), I will not have to wait for another 10 seconds if I escape to normal mode and then press <C-P>. However, under the new specification, I would wait for the same 10 seconds after escaping to normal mode and press <C-P>. This time, I would have to reinitialize within the same gVim session. \n\nAny idea why this keeps occurring?\n. So, what should be stored in the CtrlP cache directory? I have two directories, both containing a file called \"cache.txt\", and a temp-file named in a wired way (documenting the files in the CWD of Vim, when pressing Ctrl+P). And the temp file will be deleted after closing the gVim session.\n\nI found that in the two sub-directories, the \"cache.txt\" files will not get deleted. The will be appended to in stead. However, the temp file (e.g. C%%Image.txt), will be deleted after the ending of the session. \n\nI think this is where the re-initializing problem comes from. Is there a way to prevent Vim from deleting this file? _I have tried to make a copy of the temp file and paste it back to the cache directory. And this would save the effort of re-initialization._\n. Great! This is a perfect heal! \n\nSo I added the following line to my _vimrc and it worked.\n\n```\nlet g:ctrlp_clear_cache_on_exit = 0\n```\n\nLastly, note that <F5> is used to refresh the cache while one is in CtrlP console (correct me if I used the wrong name). That is, <C-P> and then press <F5> will force a refresh of the cache. \n\nThanks a lot! \n. Hi Ludovic,\n\nThanks for pointing the format for the cache dir path, however, it does not solve the problem. Here is some further observations: \n1. Through the following, the directory had been written on after my pressing of <C-P>\n   let g:ctrlp_cache_dir='C:\\Users\\Linfeng\\Documents\\Vim-document\\CtrlP'\n2. The odd thing is: in the aforementioned directory, CtrlP will create a .txt file named as \"C%%WINDOWS%system32.txt\", which is the name of the working directory of my Vim. \n   I tried to use cd commend (in my _vimrc) after the line specifying the ctrlp_cache_dir, however, a new .txt file will be created in the 'C:~\\CtrlP' directory. \n3.  More on the wired .txt file: \n   -  Upon closing of the gVim session, the fill will get deleted. (I think this is the problem that leads to the re-initializing problem);\n   -  In the .txt file, there are only files names that are in Vim's currently working directory. If I change the working directory out of the current-working-directory and press CtrlP again, the same initializing process would come again. This would end up with creating another .txt file named in the same way. \n\nUp to this point, I hope it would be clear what the problem would be coming from.\n\nThanks for your help!\n\nAll the best, \n- Linfeng\n. So, I did as suggested but it made the things worse. After I commented out my previous specification for ctrlp_cache_dir and used the line suggested above, CtrlP would have to reinitialize again every time I escape to normal mode. \n\nTo be more precise, when I change my directory to my dropbox folder and press <C-P>, it would take up to 10 seconds to initialize. If I were using the previous setting (let g:ctrlp_cache_dir='C:\\Users\\Linfeng\\Documents\\Vim-document\\CtrlP'), I will not have to wait for another 10 seconds if I escape to normal mode and then press <C-P>. However, under the new specification, I would wait for the same 10 seconds after escaping to normal mode and press <C-P>. This time, I would have to reinitialize within the same gVim session. \n\nAny idea why this keeps occurring?\n. So, what should be stored in the CtrlP cache directory? I have two directories, both containing a file called \"cache.txt\", and a temp-file named in a wired way (documenting the files in the CWD of Vim, when pressing Ctrl+P). And the temp file will be deleted after closing the gVim session.\n\nI found that in the two sub-directories, the \"cache.txt\" files will not get deleted. The will be appended to in stead. However, the temp file (e.g. C%%Image.txt), will be deleted after the ending of the session. \n\nI think this is where the re-initializing problem comes from. Is there a way to prevent Vim from deleting this file? _I have tried to make a copy of the temp file and paste it back to the cache directory. And this would save the effort of re-initialization._\n. Great! This is a perfect heal! \n\nSo I added the following line to my _vimrc and it worked.\n\n```\nlet g:ctrlp_clear_cache_on_exit = 0\n```\n\nLastly, note that <F5> is used to refresh the cache while one is in CtrlP console (correct me if I used the wrong name). That is, <C-P> and then press <F5> will force a refresh of the cache. \n\nThanks a lot! \n. ",
    "montastic77": "Figured this out. I need to add option to follow symbolic links since most of the files in database are links to the files in version controlled database.\n\nlet g:ctrlp_follow_symlinks=1.\n. Figured this out. I need to add option to follow symbolic links since most of the files in database are links to the files in version controlled database.\n\nlet g:ctrlp_follow_symlinks=1.\n. ",
    "bbatha": "Looks like you are right.\n. Looks like you are right.\n. ",
    "nfvs": "@d11wtq  sure, thanks!\n. @d11wtq  sure, thanks!\n. ",
    "YannMoisan": "Resolved, it's not a bug.\nThe default value for ctrlp_max_files is 10.000 and my project contains 19.000+ files.\n\nMaybe a warning that the limit is reached could be helpful\n. Resolved, it's not a bug.\nThe default value for ctrlp_max_files is 10.000 and my project contains 19.000+ files.\n\nMaybe a warning that the limit is reached could be helpful\n. ",
    "esauter5": "Thank you for this! Helped me resolve an issue as well.. Thank you for this! Helped me resolve an issue as well.. ",
    "breerly": "I'm in the same boat... any ideas?\n. I'm in the same boat... any ideas?\n. ",
    "NoAnyLove": "+1\n. +1\n. ",
    "samjacobson": "Consider: http://github.com/mantiz/vim-plugin-dirsettings\nIt plays nicely with Ctrlp in my experience. Just make sure you use \"b:\" instead of \"g:\" when setting variables.\ne.g. (in a .vimrc in you custom project):\n  let b:ctrlp_custom_ignore = '\\v[\\/].(git|hg|svn)$'\n. Consider: http://github.com/mantiz/vim-plugin-dirsettings\nIt plays nicely with Ctrlp in my experience. Just make sure you use \"b:\" instead of \"g:\" when setting variables.\ne.g. (in a .vimrc in you custom project):\n  let b:ctrlp_custom_ignore = '\\v[\\/].(git|hg|svn)$'\n. ",
    "Starefossen": "You should use [this supported fork](https://github.com/ctrlpvim/ctrlp.vim) of ctrlp in stead of this one and report any bugs [here](https://github.com/ctrlpvim/ctrlp.vim/issues).\n. You should use [this supported fork](https://github.com/ctrlpvim/ctrlp.vim) of ctrlp in stead of this one and report any bugs [here](https://github.com/ctrlpvim/ctrlp.vim/issues).\n. You should use [this supported fork](https://github.com/ctrlpvim/ctrlp.vim) of ctrlp in stead of this one and report any bugs [here](https://github.com/ctrlpvim/ctrlp.vim/issues).\n. You should use [this supported fork](https://github.com/ctrlpvim/ctrlp.vim) of ctrlp in stead of this one and report any bugs [here](https://github.com/ctrlpvim/ctrlp.vim/issues).\n. You should use [this supported fork](https://github.com/ctrlpvim/ctrlp.vim) of ctrlp in stead of this one and report any bugs [here](https://github.com/ctrlpvim/ctrlp.vim/issues).\n. You should use [this supported fork](https://github.com/ctrlpvim/ctrlp.vim) of ctrlp in stead of this one and report any bugs [here](https://github.com/ctrlpvim/ctrlp.vim/issues).\n. ",
    "ioannaK89": "i am getting exactly the same error. Does anyone manage to fix it?\n. i am getting exactly the same error. Does anyone manage to fix it?\n. ",
    "blainesch": "@rickywu You can do something [like this](https://github.com/blainesch/dotfiles/blob/535ae2906fc2d23cc08931fb11f0310ea8263fb8/vimrc.local#L8-L15)\n\n```\nlet g:ctrlp_prompt_mappings = {\n  \\ 'PrtSelectMove(\"j\")': ['<c-n>', '<c-j>', '<down>'],\n  \\ 'PrtSelectMove(\"k\")': ['<c-p>', '<c-k>', '<up>'],\n  \\ 'PrtHistory(-1)': ['<c-h>'],\n  \\ 'PrtHistory(1)': ['<c-l>'],\n  \\ 'PrtCurLeft()': ['<left>', '<c-^>'],\n  \\ 'PrtCurRight()': ['<right>'],\n  \\ }\n```\n. I can paste into Ctrlp. I have Vim 7.4 (via brew) and Terminal 2.6.1. I removed all my other plugins and configs and it's still working.\n. double ctrl + p works for me.\n. @rickywu You can do something [like this](https://github.com/blainesch/dotfiles/blob/535ae2906fc2d23cc08931fb11f0310ea8263fb8/vimrc.local#L8-L15)\n\n```\nlet g:ctrlp_prompt_mappings = {\n  \\ 'PrtSelectMove(\"j\")': ['<c-n>', '<c-j>', '<down>'],\n  \\ 'PrtSelectMove(\"k\")': ['<c-p>', '<c-k>', '<up>'],\n  \\ 'PrtHistory(-1)': ['<c-h>'],\n  \\ 'PrtHistory(1)': ['<c-l>'],\n  \\ 'PrtCurLeft()': ['<left>', '<c-^>'],\n  \\ 'PrtCurRight()': ['<right>'],\n  \\ }\n```\n. I can paste into Ctrlp. I have Vim 7.4 (via brew) and Terminal 2.6.1. I removed all my other plugins and configs and it's still working.\n. double ctrl + p works for me.\n. ",
    "WscriChy": "I would like to refresh  this topic. I think it is a great idea. Does anybody know is it possible to do?\n. I would like to refresh  this topic. I think it is a great idea. Does anybody know is it possible to do?\n. ",
    "aksrikanth": "For future reference: ctrlp_user_command.\n. For future reference: ctrlp_user_command.\n. ",
    "albfan": "By now I have solve it changing program\n\n```\nlet g:ctrlp_user_command = 'gfind %s -type f' \n```\n. That works!\n\nBut for large codebases (here 7000+ files) becomes unusable.\n. A hack that can be usable:\n\nles.cmd (stands for local search everything [es](http://www.voidtools.com/support/everything/command_line_interface/))  \n\n```\n@echo off\nes %cd% !.git\\ !.svn !target\\ !build\\ !bin\\ %* | perl -pe \"s/\\%cd:\\=\\\\\\%\\\\\\\\//\"\n```\n\nexplain\n- **es**: search tool from NTFS index\n- !: exclude common project directories\n- **%cd%**: current directory (see \\ is escaped) \n- **perl -pe**: remove current directory from results (they are absolute)\n\nso add to PATH and:\n\n```\nlet g:ctrlp_user_command = 'les %s'\n```\n\nwill work really quick even on large codebases\n. By now I have solve it changing program\n\n```\nlet g:ctrlp_user_command = 'gfind %s -type f' \n```\n. That works!\n\nBut for large codebases (here 7000+ files) becomes unusable.\n. A hack that can be usable:\n\nles.cmd (stands for local search everything [es](http://www.voidtools.com/support/everything/command_line_interface/))  \n\n```\n@echo off\nes %cd% !.git\\ !.svn !target\\ !build\\ !bin\\ %* | perl -pe \"s/\\%cd:\\=\\\\\\%\\\\\\\\//\"\n```\n\nexplain\n- **es**: search tool from NTFS index\n- !: exclude common project directories\n- **%cd%**: current directory (see \\ is escaped) \n- **perl -pe**: remove current directory from results (they are absolute)\n\nso add to PATH and:\n\n```\nlet g:ctrlp_user_command = 'les %s'\n```\n\nwill work really quick even on large codebases\n. ",
    "jmcomets": "I'm getting the same error on Windows after setting `let g:ctrlp_user_command = 'ag %s -i --nocolor --nogroup --hidden -g \"\"'`. Any updates on the issue? (I'd really like to use ag)\n. I'm getting the same error on Windows after setting `let g:ctrlp_user_command = 'ag %s -i --nocolor --nogroup --hidden -g \"\"'`. Any updates on the issue? (I'd really like to use ag)\n. ",
    "chaseruppert": "I ran into the same problem with using ag with CtrlP on Windows. It turns out the command itself (I grabbed the same one from a website) is actually incorrect (at least, on Windows). If you run ag by itself:\nag [OPTIONS] PATTERN [PATH]\n\nThe options come first. So in the example above:\n    let g:ctrlp_user_command = 'ag %s -i --nocolor --nogroup --hidden -g \"\"'\n\nShould actually be (at least, on Windows):\n    let g:ctrlp_user_command = 'ag -i --nocolor --nogroup --hidden -g \"\" %s'\n\nI installed ag on Windows with Chocolatey, so maybe the command syntax is different for other platforms.\n. I ran into the same problem with using ag with CtrlP on Windows. It turns out the command itself (I grabbed the same one from a website) is actually incorrect (at least, on Windows). If you run ag by itself:\nag [OPTIONS] PATTERN [PATH]\n\nThe options come first. So in the example above:\n    let g:ctrlp_user_command = 'ag %s -i --nocolor --nogroup --hidden -g \"\"'\n\nShould actually be (at least, on Windows):\n    let g:ctrlp_user_command = 'ag -i --nocolor --nogroup --hidden -g \"\" %s'\n\nI installed ag on Windows with Chocolatey, so maybe the command syntax is different for other platforms.\n. ",
    "stargoo": "Thanks albfan! using Everything (es) was way faster than Ag on windows. \n. Thanks albfan! using Everything (es) was way faster than Ag on windows. \n. ",
    "emilsoman": ":+1: Is there a way to get around this ? @kien \n. :+1: Is there a way to get around this ? @kien \n. ",
    "anoopelias": "Tried this,\n\n```\n$ dos2unix .vim/bundle/ctrlp.vim/plugin/ctrlp.vim\ndos2unix: converting file .vim/bundle/ctrlp.vim/plugin/ctrlp.vim to Unix format...\n```\n\nGot something like the below, (The error goes on for about 100-200 lines, I pasted only the last part. But it is similar)\n\n```\nE492: Not an editor command: ^M\nline  114:\nE488: Trailing characters\nline  119:\nE492: Not an editor command: ^M\nline  120:\nE488: Trailing characters\nline  124:\nE492: Not an editor command: ^M\nline  125:\nE488: Trailing characters\nline  128:\nE492: Not an editor command: ^M\nline  129:\nE488: Trailing characters\nline  132:\nE492: Not an editor command: ^M\nline  133:\nE488: Trailing characters\nline  140:\nE492: Not an editor command: ^M\nline  141:\nE488: Trailing characters\nline  153:\nE492: Not an editor command: ^M\nError detected while processing /home/Anoop.Elias/.vim/bundle/ctrlp.vim/plugin/ctrlp.vim:\nline   40:\nE117: Unknown function: ctrlp#mrufiles#init\nPress ENTER or type command to continue\n```\n\nIs there anything else, I can try?\n. Further, \n\nI tried to convert the file back using unix2dos command and the original error comes back,\n\n```\n$ unix2dos ctrlp.vim\nunix2dos: converting file ctrlp.vim to DOS format...\n\n$ vim\nError detected while processing /home/Anoop.Elias/.vim/bundle/ctrlp.vim/plugin/ctrlp.vim:\nline    7:\nE492: Not an editor command: ^M\nline    8:\nE15: Invalid expression: ( exists('g:loaded_ctrlp') && g:loaded_ctrlp ) || v:version < 700 || &cp^M\nline   15:\nE475: Invalid argument: ^M g:ctrlp_allmixes, g:ctrlp_buftags, g:ctrlp_ext_vars, g:ctrlp_builtins]^M = [[], [], [], [], {}, {}, [], 2]^M\nline   69:\nE171: Missing :endif\nPress ENTER or type command to continue\n```\n. #591\n. Tried this,\n\n```\n$ dos2unix .vim/bundle/ctrlp.vim/plugin/ctrlp.vim\ndos2unix: converting file .vim/bundle/ctrlp.vim/plugin/ctrlp.vim to Unix format...\n```\n\nGot something like the below, (The error goes on for about 100-200 lines, I pasted only the last part. But it is similar)\n\n```\nE492: Not an editor command: ^M\nline  114:\nE488: Trailing characters\nline  119:\nE492: Not an editor command: ^M\nline  120:\nE488: Trailing characters\nline  124:\nE492: Not an editor command: ^M\nline  125:\nE488: Trailing characters\nline  128:\nE492: Not an editor command: ^M\nline  129:\nE488: Trailing characters\nline  132:\nE492: Not an editor command: ^M\nline  133:\nE488: Trailing characters\nline  140:\nE492: Not an editor command: ^M\nline  141:\nE488: Trailing characters\nline  153:\nE492: Not an editor command: ^M\nError detected while processing /home/Anoop.Elias/.vim/bundle/ctrlp.vim/plugin/ctrlp.vim:\nline   40:\nE117: Unknown function: ctrlp#mrufiles#init\nPress ENTER or type command to continue\n```\n\nIs there anything else, I can try?\n. Further, \n\nI tried to convert the file back using unix2dos command and the original error comes back,\n\n```\n$ unix2dos ctrlp.vim\nunix2dos: converting file ctrlp.vim to DOS format...\n\n$ vim\nError detected while processing /home/Anoop.Elias/.vim/bundle/ctrlp.vim/plugin/ctrlp.vim:\nline    7:\nE492: Not an editor command: ^M\nline    8:\nE15: Invalid expression: ( exists('g:loaded_ctrlp') && g:loaded_ctrlp ) || v:version < 700 || &cp^M\nline   15:\nE475: Invalid argument: ^M g:ctrlp_allmixes, g:ctrlp_buftags, g:ctrlp_ext_vars, g:ctrlp_builtins]^M = [[], [], [], [], {}, {}, [], 2]^M\nline   69:\nE171: Missing :endif\nPress ENTER or type command to continue\n```\n. #591\n. ",
    "laszukdawid": "I had exactly the same problem, but on vanilla Ubuntu 16.04.\r\nMy solution was to disable git automatic end line conversion with `git config --global core.autocrlf false` before running `git clone`. I am not sure where the problem lays, but can imagine its both in non-consistency in ctrlP package and git going stupid with some edge cases. \r\n. I had exactly the same problem, but on vanilla Ubuntu 16.04.\r\nMy solution was to disable git automatic end line conversion with `git config --global core.autocrlf false` before running `git clone`. I am not sure where the problem lays, but can imagine its both in non-consistency in ctrlP package and git going stupid with some edge cases. \r\n. ",
    "phalgun": "Great, thanks for the tip @d11wtq \n. Great, thanks for the tip @d11wtq \n. ",
    "henricavalcante": "a have the same problem =(\n. a have the same problem =(\n. ",
    "thejchap": "Just encountered this as well\n. Just encountered this as well\n. ",
    "adamyonk": "Possibly relevant: https://github.com/ctrlpvim/ctrlp.vim/pull/258\n\nI think that repo is what is currently maintained.\n. Possibly relevant: https://github.com/ctrlpvim/ctrlp.vim/pull/258\n\nI think that repo is what is currently maintained.\n. ",
    "solyarisoftware": "inside vim! :-) let me explain better: \nlet say I'm looking for this file (assuming I do not remember exactly the name...):\n\n> /layouts/_shim.html.erb\n\nwith CtrlP, if I search digiting:\n>>>.html\n\nwith default configuration I didn't find the file above. I got just a fixed list of 10 (first) files (found); \n\n> app/views/users/show.html.erb\n> app/views/exams/edit.html.erb\n> app/views/exams/show.html.erb\n> app/views/users/edit.html.erb\n> app/views/users/old.html.erb\n> app/views/exams/new.html.erb\n> app/views/users/new.html.erb\n> public/500.html\n> public/422.html\n> public/404.html\n\nwhereas the full list of files containing .html contain many tents of files.\nAll in all I was expecting a list of ALL these files matching _.html_ ... not just (\"random\") 10 items.\n\nSo, a workaround have been to insert in .vimrc file the line:\n\nlet g:ctrlp_match_window = 'bottom,order:btt,min:1,max:10,results:40'\n\nbut the behaviour is not perfect...\nI was expected as default the list of all files containing .html\nno ? \n. yes, you are right, and the issue could be closed, I have been confused by buffers \"numbering\"!\n\nNow I'm far from my vim now and I can't test again, \nbut when I posted the issue It was seem to me from some tests, that CtrlP (:CtrlPBuffer or just :CtrlP, see also open issue: https://github.com/kien/ctrlp.vim/issues/631) do not always list ALL \"expected\" files...\nbut maybe I'm wrong.\n. inside vim! :-) let me explain better: \nlet say I'm looking for this file (assuming I do not remember exactly the name...):\n\n> /layouts/_shim.html.erb\n\nwith CtrlP, if I search digiting:\n>>>.html\n\nwith default configuration I didn't find the file above. I got just a fixed list of 10 (first) files (found); \n\n> app/views/users/show.html.erb\n> app/views/exams/edit.html.erb\n> app/views/exams/show.html.erb\n> app/views/users/edit.html.erb\n> app/views/users/old.html.erb\n> app/views/exams/new.html.erb\n> app/views/users/new.html.erb\n> public/500.html\n> public/422.html\n> public/404.html\n\nwhereas the full list of files containing .html contain many tents of files.\nAll in all I was expecting a list of ALL these files matching _.html_ ... not just (\"random\") 10 items.\n\nSo, a workaround have been to insert in .vimrc file the line:\n\nlet g:ctrlp_match_window = 'bottom,order:btt,min:1,max:10,results:40'\n\nbut the behaviour is not perfect...\nI was expected as default the list of all files containing .html\nno ? \n. yes, you are right, and the issue could be closed, I have been confused by buffers \"numbering\"!\n\nNow I'm far from my vim now and I can't test again, \nbut when I posted the issue It was seem to me from some tests, that CtrlP (:CtrlPBuffer or just :CtrlP, see also open issue: https://github.com/kien/ctrlp.vim/issues/631) do not always list ALL \"expected\" files...\nbut maybe I'm wrong.\n. ",
    "chrisstankevitz": "ctrlp does not work with some files that have \"test\" in the name.  I don't know why.\n\nEDIT: never mind.  I had \"test\" in my g:ctrlp_custom_ignore\n. ctrlp does not work with some files that have \"test\" in the name.  I don't know why.\n\nEDIT: never mind.  I had \"test\" in my g:ctrlp_custom_ignore\n. ",
    "borisbrodski": "I have the same behavior on Vim 8.0 (Windows). I have the same behavior on Vim 8.0 (Windows). ",
    "t7ko": "Well...  If you count carefully, you'll notice that your `:ls` returned 8 buffers.  And CtrlP _also_ returned 8 -- one current, and 7 options.\n. Well...  If you count carefully, you'll notice that your `:ls` returned 8 buffers.  And CtrlP _also_ returned 8 -- one current, and 7 options.\n. ",
    "ches": "Sorry, didn't realize this was a dupe of #590, closing. Seems like @ctrlpvim is the place to watch nowadays...\n. Sorry, didn't realize this was a dupe of #590, closing. Seems like @ctrlpvim is the place to watch nowadays...\n. ",
    "drogus": "It turns out that the problem was caused by `.gitignore` entries. The following works correctly:\n\n```\nnode_modules\nbower_components\n```\n\nBut this form fails:\n\n```\n/node_modules\n/bower_components\n```\n\nI'm still not sure if this is a bug in ag or in ctrlp, because when run in the project's root dir ag returns correct results (no node_modules etc.)\n. It turns out that the problem was caused by `.gitignore` entries. The following works correctly:\n\n```\nnode_modules\nbower_components\n```\n\nBut this form fails:\n\n```\n/node_modules\n/bower_components\n```\n\nI'm still not sure if this is a bug in ag or in ctrlp, because when run in the project's root dir ag returns correct results (no node_modules etc.)\n. ",
    "Konfekt": "I suspect it to be `ag`. Which version do you use? Here it's 0.19.2 and it correctly recognizes the absolute paths `/dir` with respect to the location of `.gitignore`. However, before it was `0.28` and this was not the case.\n. I suspect it to be `ag`. Which version do you use? Here it's 0.19.2 and it correctly recognizes the absolute paths `/dir` with respect to the location of `.gitignore`. However, before it was `0.28` and this was not the case.\n. ",
    "Dkendal": "I'm also get the same weird behavior with a custom command using ag.\nWith `/_build` in my .gitignore `ag -g ''` does not list anything from the directory.\nUsing `:CtrlP` inside (neo)vim shows the same output as ag, but when I run ctrlp for a second time entries from _build are shown, and ctrlp shows that it's caching even though I have `g:ctrlp_use_caching = 0`.\nChanging `/_build` to `_build` fixes this :confused: \n. I'm also get the same weird behavior with a custom command using ag.\nWith `/_build` in my .gitignore `ag -g ''` does not list anything from the directory.\nUsing `:CtrlP` inside (neo)vim shows the same output as ag, but when I run ctrlp for a second time entries from _build are shown, and ctrlp shows that it's caching even though I have `g:ctrlp_use_caching = 0`.\nChanging `/_build` to `_build` fixes this :confused: \n. ",
    "Numkil": "I have a problem that's a bit related to this issue here. I also use ag for searching with ctrlp and everything works as expected when I'm using regular vim. But when I'm using the same configuration with neovim I get strange results. Default ag settings and and .agignore are completely ignored and ctrlp finds everything, even in the folders I do not want it too. I'm guessing with neovim, ctrlp doesn't use ag but the default search engine?  I know this is a bit of a non-issue seeing as neovim is still in development but I still wanted to get it out there. Maybe other people will have the same problem as me.\n\nMy configuration for ctrlp is this:\nlet g:ctrlp_working_path_mode = 'ra'\nlet g:ctrlp_user_command = 'ag %s -l --hidden --nocolor -g \"\"'\n. I actually switched over to this maintained fork of ctrlp. It works there.\nhttps://github.com/ctrlpvim/ctrlp.vim\n. @stevedomin @pgilad Hope this helps for you guys\n. I have a problem that's a bit related to this issue here. I also use ag for searching with ctrlp and everything works as expected when I'm using regular vim. But when I'm using the same configuration with neovim I get strange results. Default ag settings and and .agignore are completely ignored and ctrlp finds everything, even in the folders I do not want it too. I'm guessing with neovim, ctrlp doesn't use ag but the default search engine?  I know this is a bit of a non-issue seeing as neovim is still in development but I still wanted to get it out there. Maybe other people will have the same problem as me.\n\nMy configuration for ctrlp is this:\nlet g:ctrlp_working_path_mode = 'ra'\nlet g:ctrlp_user_command = 'ag %s -l --hidden --nocolor -g \"\"'\n. I actually switched over to this maintained fork of ctrlp. It works there.\nhttps://github.com/ctrlpvim/ctrlp.vim\n. @stevedomin @pgilad Hope this helps for you guys\n. ",
    "stevedomin": "@Numkil @pgilad did you manage to solve this issue?\n\nI'm running into it as well\n. @Numkil @pgilad did you manage to solve this issue?\n\nI'm running into it as well\n. ",
    "zilman": "Combined with the fork @Numkil mentions, the following seems to work for me:\n\n``` vimscript\nif executable('ag')\n  set grepprg=ag\\ --nogroup\\ --nocolor \n\n  nnoremap <silent> t :CtrlP<cr>\n\n  let g:ctrlp_match_window = 'bottom,order:ttb'\n  let g:ctrlp_switch_buffer = 0\n  let g:ctrlp_working_path_mode = 'ra'\n  let g:ctrlp_use_caching = 0\n  let g:ctrlp_user_command = ['ag %s --files-with-matches -g \"\"']\n  let g:ctrlp_user_command += ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']\nendif \n```\n\n(To be honest not super sure if it actually ends up using ag properly or not)\n. Combined with the fork @Numkil mentions, the following seems to work for me:\n\n``` vimscript\nif executable('ag')\n  set grepprg=ag\\ --nogroup\\ --nocolor \n\n  nnoremap <silent> t :CtrlP<cr>\n\n  let g:ctrlp_match_window = 'bottom,order:ttb'\n  let g:ctrlp_switch_buffer = 0\n  let g:ctrlp_working_path_mode = 'ra'\n  let g:ctrlp_use_caching = 0\n  let g:ctrlp_user_command = ['ag %s --files-with-matches -g \"\"']\n  let g:ctrlp_user_command += ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']\nendif \n```\n\n(To be honest not super sure if it actually ends up using ag properly or not)\n. ",
    "moshen": ":+1: \n\nYou should submit this to: [ctrlpvim/ctrlp.vim](https://github.com/ctrlpvim/ctrlp.vim)\n. Np.  See #591 for discussion on the fork.\n. :+1: \n\nYou should submit this to: [ctrlpvim/ctrlp.vim](https://github.com/ctrlpvim/ctrlp.vim)\n. Np.  See #591 for discussion on the fork.\n. ",
    "ferranpm": "woops, thanks\n. woops, thanks\n. ",
    "herr-zimt": "In your <code>.vimrc</code>\n\n```\nlet g:ctrlp_prompt_mappings = {\n    \\ 'AcceptSelection(\"e\")': ['<2-LeftMouse>'],\n    \\ 'AcceptSelection(\"t\")': ['<cr>'],\n    \\ }\n```\n\nDon't omit the \"e\" line to make sure you \"unbind\" <code><cr></code> beforehand.\n. I think it would. That's why I recommend:\n\n```\nlet g:ctrlp_prompt_mappings = { \n    \\ 'AcceptSelection(\"h\")': ['<c-h>'],\n    \\ 'PrtCurLeft(): ['<c-x>'],\n    \\  }\n```\n\nNote that <code><c-h></code> by default is mapped to <code>'PrtCurLeft()'</code>, same as <code><left></code>.\n. Make sure to purge the cache for the current directory with <code>F5</code>.\n. In your <code>.vimrc</code>\n\n```\nlet g:ctrlp_prompt_mappings = {\n    \\ 'AcceptSelection(\"e\")': ['<2-LeftMouse>'],\n    \\ 'AcceptSelection(\"t\")': ['<cr>'],\n    \\ }\n```\n\nDon't omit the \"e\" line to make sure you \"unbind\" <code><cr></code> beforehand.\n. I think it would. That's why I recommend:\n\n```\nlet g:ctrlp_prompt_mappings = { \n    \\ 'AcceptSelection(\"h\")': ['<c-h>'],\n    \\ 'PrtCurLeft(): ['<c-x>'],\n    \\  }\n```\n\nNote that <code><c-h></code> by default is mapped to <code>'PrtCurLeft()'</code>, same as <code><left></code>.\n. Make sure to purge the cache for the current directory with <code>F5</code>.\n. ",
    "Hellseher": "Hi, possibly the \"klien/ctrl.vim\" is not maintained.\nHere is active fork - https://github.com/ctrlpvim/ctrlp.vim \n\nI have installed Ctrl-P to Vim, but I always forget to use it :)\nI've found for myself this work flow\nGnome-shell + tmux + fzf (https://github.com/junegunn/fzf)\n\nBut I see you use it as well... \n. Hi, possibly the \"klien/ctrl.vim\" is not maintained.\nHere is active fork - https://github.com/ctrlpvim/ctrlp.vim \n\nI have installed Ctrl-P to Vim, but I always forget to use it :)\nI've found for myself this work flow\nGnome-shell + tmux + fzf (https://github.com/junegunn/fzf)\n\nBut I see you use it as well... \n. ",
    "qstrahl": "Pretty sure this is just due to netrw making use of the `+` or `*` register. Netrw has some quirky behaviour  =)\n. There's yer problem.\n\nWhat you can do is not set `clipboard` like that, and instead any time you want to use your system's clipboard you can use the `\"+` register (or the `\"*` register for primary selection -- what you highlight with your mouse -- if you use linux)\n\nCheck out `:help quoteplus` and `:help quotestar` for more info.\n. Try checking out `:help 'regexengine'`. That's the first thing that comes to mind.\n. What would be nice is if ctrlp first checked if `b:ctrlp_custom_ignores` exists before looking at `g:ctrlp_custom_ignores` -- this would allow for buffer-specific configuration. The same technique could be applied to any option for which that makes sense.\n. Pretty sure this is just due to netrw making use of the `+` or `*` register. Netrw has some quirky behaviour  =)\n. There's yer problem.\n\nWhat you can do is not set `clipboard` like that, and instead any time you want to use your system's clipboard you can use the `\"+` register (or the `\"*` register for primary selection -- what you highlight with your mouse -- if you use linux)\n\nCheck out `:help quoteplus` and `:help quotestar` for more info.\n. Try checking out `:help 'regexengine'`. That's the first thing that comes to mind.\n. What would be nice is if ctrlp first checked if `b:ctrlp_custom_ignores` exists before looking at `g:ctrlp_custom_ignores` -- this would allow for buffer-specific configuration. The same technique could be applied to any option for which that makes sense.\n. ",
    "RichardDooling": "As near as I can tell Netrw will do this if you have:\n\nset clipboard=unnamed\n\nin your .vimrc\n\nHowever if you comment that out, then Vim will not use your system\nclipboard (*, I think) unless you explicitly tell it to.\n\nRick\n\nOn Wed, Apr 22, 2015 at 2:16 PM, ddaza notifications@github.com wrote:\n\n> Hello this is an odd bug and I'm not even sure it is caused by ctrlp.\n> I usually open a new tab with netrw to navigate to a localfile.\n> \n> :tabe .\n> \n> If the file is not in the local folder I use ctrlp and open it in the same\n> window.\n> This works great, but for whatever reason the clipboard gets populated\n> with junk from netrw.\n> \n> Let me know if you need more info about this.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/kien/ctrlp.vim/issues/648.\n\n## \n\nrd\n. As near as I can tell Netrw will do this if you have:\n\nset clipboard=unnamed\n\nin your .vimrc\n\nHowever if you comment that out, then Vim will not use your system\nclipboard (*, I think) unless you explicitly tell it to.\n\nRick\n\nOn Wed, Apr 22, 2015 at 2:16 PM, ddaza notifications@github.com wrote:\n\n> Hello this is an odd bug and I'm not even sure it is caused by ctrlp.\n> I usually open a new tab with netrw to navigate to a localfile.\n> \n> :tabe .\n> \n> If the file is not in the local folder I use ctrlp and open it in the same\n> window.\n> This works great, but for whatever reason the clipboard gets populated\n> with junk from netrw.\n> \n> Let me know if you need more info about this.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/kien/ctrlp.vim/issues/648.\n\n## \n\nrd\n. ",
    "ddaza": "I have my clipboard set to 'unnamedplus' which is basically the same. \nThis is a desired behavior to access xterm's clipboard. \n\nI'm fairly new to vim's registers but if there is a way to stop this I can try it.   \n. oops will take this to the new repo. I have my clipboard set to 'unnamedplus' which is basically the same. \nThis is a desired behavior to access xterm's clipboard. \n\nI'm fairly new to vim's registers but if there is a way to stop this I can try it.   \n. oops will take this to the new repo. ",
    "CrashyBang": "Hey did anyone figure this out I have disabled any clipboard stuff and `netrw` is still filling the register of `../` .\n\nCheers,\nOtis.\n. Hey did anyone figure this out I have disabled any clipboard stuff and `netrw` is still filling the register of `../` .\n\nCheers,\nOtis.\n. ",
    "z3t0": "Very odd because this is not a problem when using the command line vim instead of gvim\n. No idea what solved it.. but it works all of a sudden. Thanks\n. Very odd because this is not a problem when using the command line vim instead of gvim\n. No idea what solved it.. but it works all of a sudden. Thanks\n. ",
    "zhlinh": "I have the same problem now, and I want to know how to solve it?\n. Both Vim and gvim have this problem.So sad...\n. Sorry, still have no idea how to fix it. I think maybe it's the regex problem too.\n. See #665, the same problem.\n. Aha, It works now.\nI have fixed it using the setting of spf13/spf13-vim, and I have tested ag and no-ag.\nThe key is ag's command syntax. Windows is really ... vulnerable. \n\n```\nif executable('ag')\n    let s:ctrlp_fallback = 'ag -i --nocolor --nogroup --hidden -g \"\" %s'\nelseif executable('ack-grep')\n    let s:ctrlp_fallback = 'ack-grep %s --nocolor -f'\nelseif executable('ack')\n    let s:ctrlp_fallback = 'ack %s --nocolor -f'\nelseif (has(\"win32\") || has(\"win64\") || has(\"win95\") || has(\"win16\"))\n    let s:ctrlp_fallback = 'dir %s /-n /b /s /a-d'\nelse\n    let s:ctrlp_fallback = 'find %s -type f'\nendif\nif exists(\"g:ctrlp_user_command\")\n    unlet g:ctrlp_user_command\nendif\nlet g:ctrlp_user_command = {\n            \\ 'types': {\n            \\ 1: ['.git', 'cd %s && git ls-files . --cached --exclude-standard --others'],\n            \\ 2: ['.hg', 'hg --cwd %s locate -I .'],\n            \\ },\n            \\ 'fallback': s:ctrlp_fallback\n            \\ }\n```\n\nand my previous setting is that\n\n```\nlet g:ctrlp_user_command = 'ag %s -i --nocolor --nogroup --hidden -g \"\"'\n```\n\nThen you will find that '%s' must be putted at the end of the command on Windows!!!\n. I have the same problem now, and I want to know how to solve it?\n. Both Vim and gvim have this problem.So sad...\n. Sorry, still have no idea how to fix it. I think maybe it's the regex problem too.\n. See #665, the same problem.\n. Aha, It works now.\nI have fixed it using the setting of spf13/spf13-vim, and I have tested ag and no-ag.\nThe key is ag's command syntax. Windows is really ... vulnerable. \n\n```\nif executable('ag')\n    let s:ctrlp_fallback = 'ag -i --nocolor --nogroup --hidden -g \"\" %s'\nelseif executable('ack-grep')\n    let s:ctrlp_fallback = 'ack-grep %s --nocolor -f'\nelseif executable('ack')\n    let s:ctrlp_fallback = 'ack %s --nocolor -f'\nelseif (has(\"win32\") || has(\"win64\") || has(\"win95\") || has(\"win16\"))\n    let s:ctrlp_fallback = 'dir %s /-n /b /s /a-d'\nelse\n    let s:ctrlp_fallback = 'find %s -type f'\nendif\nif exists(\"g:ctrlp_user_command\")\n    unlet g:ctrlp_user_command\nendif\nlet g:ctrlp_user_command = {\n            \\ 'types': {\n            \\ 1: ['.git', 'cd %s && git ls-files . --cached --exclude-standard --others'],\n            \\ 2: ['.hg', 'hg --cwd %s locate -I .'],\n            \\ },\n            \\ 'fallback': s:ctrlp_fallback\n            \\ }\n```\n\nand my previous setting is that\n\n```\nlet g:ctrlp_user_command = 'ag %s -i --nocolor --nogroup --hidden -g \"\"'\n```\n\nThen you will find that '%s' must be putted at the end of the command on Windows!!!\n. ",
    "amosbird": "Same problem here. I'm using Gvim on Windows 10. \n. Same problem here. I'm using Gvim on Windows 10. \n. ",
    "dpo": "Works nicely. Thanks!\n. Works nicely. Thanks!\n. ",
    "seven1m": "Haha I did the same thing in [my vimrc](https://github.com/seven1m/vimfiles/blob/master/vimrc#L226-L228).\n\n:+1: \n. Haha I did the same thing in [my vimrc](https://github.com/seven1m/vimfiles/blob/master/vimrc#L226-L228).\n\n:+1: \n. ",
    "gyermolenko": "came here to ask the same, so: +1\nedit: As I see it's been forked. So i must forget about this particular Enhancement. OK.\n. came here to ask the same, so: +1\nedit: As I see it's been forked. So i must forget about this particular Enhancement. OK.\n. ",
    "dmitriy5181": "In vim I see \"press ctrl-c to abort\" in status line on long indexing.\n. In vim I see \"press ctrl-c to abort\" in status line on long indexing.\n. ",
    "nathanl": "Ah, that works unless I'm using MacVim in GUI mode (which I usually do), in which case it doesn't respond. Must be a MacVim bug.\n. Ah, that works unless I'm using MacVim in GUI mode (which I usually do), in which case it doesn't respond. Must be a MacVim bug.\n. ",
    "antoyo": "I've just noticed that `<c-s>` works fine in RXVT Unicode, but not in Mate Terminal (both of them running the fish shell). As I can use another terminal, this is not a problem for me and I believe this is not an issue of this plugin, so I close this issue.\n. I've just noticed that `<c-s>` works fine in RXVT Unicode, but not in Mate Terminal (both of them running the fish shell). As I can use another terminal, this is not a problem for me and I believe this is not an issue of this plugin, so I close this issue.\n. ",
    "paulriddle": "The project seems to be unmaintained, but there is an active fork of it at https://github.com/ctrlpvim/ctrlp.vim\n. The project seems to be unmaintained, but there is an active fork of it at https://github.com/ctrlpvim/ctrlp.vim\n. ",
    "dmurph": "awesome, thanks!\n. awesome, thanks!\n. ",
    "vsushkov": "Nice issue name. It's very easy to see, thanks! :+1: \n. @jamesscholeyweb please, see https://github.com/kien/ctrlp.vim/issues/669\n. @sid-kap https://github.com/kien/ctrlp.vim/issues/669\n. @wwalker please, see https://github.com/kien/ctrlp.vim/issues/669\n. Nice issue name. It's very easy to see, thanks! :+1: \n. @jamesscholeyweb please, see https://github.com/kien/ctrlp.vim/issues/669\n. @sid-kap https://github.com/kien/ctrlp.vim/issues/669\n. @wwalker please, see https://github.com/kien/ctrlp.vim/issues/669\n. ",
    "digital-carver": "Thanks for the notification. For those of us that use Vundle, it seems simply changing  \n`Plugin 'kien/ctrlp.vim'`  \nto  \n`Plugin 'ctrlpvim/ctrlp.vim'`  \nis enough. Vundle is [apparently smart enough](https://github.com/VundleVim/Vundle.vim/pull/440) to understand that it's the same plugin but with a new remote, and will automatically update the contents of the plugin folder during your next `PluginUpdate`. \n. Thanks for the notification. For those of us that use Vundle, it seems simply changing  \n`Plugin 'kien/ctrlp.vim'`  \nto  \n`Plugin 'ctrlpvim/ctrlp.vim'`  \nis enough. Vundle is [apparently smart enough](https://github.com/VundleVim/Vundle.vim/pull/440) to understand that it's the same plugin but with a new remote, and will automatically update the contents of the plugin folder during your next `PluginUpdate`. \n. ",
    "jteplitz": "You should probably add this to the readme. Made a PR https://github.com/kien/ctrlp.vim/pull/670\n. Ah. That's unfortunate.\nOn Aug 25, 2015 5:24 PM, \"Chris Corbyn\" notifications@github.com wrote:\n\n> This won't get merged as the author has not been seen in a couple of years.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/kien/ctrlp.vim/pull/670#issuecomment-134777602.\n. You should probably add this to the readme. Made a PR https://github.com/kien/ctrlp.vim/pull/670\n. Ah. That's unfortunate.\nOn Aug 25, 2015 5:24 PM, \"Chris Corbyn\" notifications@github.com wrote:\n\n> This won't get merged as the author has not been seen in a couple of years.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/kien/ctrlp.vim/pull/670#issuecomment-134777602.\n. ",
    "jamesscholeyweb": "Thanks for this Wang :)\n. Thanks for this Wang :)\n. ",
    "roxma": "It seems this repo is not active anymore\n. It seems this repo is not active anymore\n. ",
    "sid-kap": "OK, I see that I needed to do\n\n```\nlet g:ctrlp_extensions = ['tag']\n```\n\nPlease add this to your readme or website!\n. OK, I see that I needed to do\n\n```\nlet g:ctrlp_extensions = ['tag']\n```\n\nPlease add this to your readme or website!\n. ",
    "baruchel": "I reread the help and noticed that the MRU mode uses another variable. It seems t work now with:\n\n```\nlet g:ctrlp_mruf_exclude = '/tmp/.*'\n```\n\nBest regards.\n. I reread the help and noticed that the MRU mode uses another variable. It seems t work now with:\n\n```\nlet g:ctrlp_mruf_exclude = '/tmp/.*'\n```\n\nBest regards.\n. ",
    "UkuLoskit": "Hey! please note that this a unmaintained repo and maintained fork is at https://github.com/ctrlpvim/ctrlp.vim\n. Hey! please note that this a unmaintained repo and maintained fork is at https://github.com/ctrlpvim/ctrlp.vim\n. ",
    "wwalker": "Thanks!\n. Thanks!\n. ",
    "nowox": "I heard about [fuzzy-finder](https://github.com/junegunn/fzf) which might be a nice alternative to ctrlp\n. I heard about [fuzzy-finder](https://github.com/junegunn/fzf) which might be a nice alternative to ctrlp\n. ",
    "Bargs": "Ah, it's been awhile since I updated my Vim config, didn't even notice this repo was inactive. Thanks for the tips!\n. Ah, it's been awhile since I updated my Vim config, didn't even notice this repo was inactive. Thanks for the tips!\n. ",
    "josemarluedke": ":+1:\n. :+1:\n. ",
    "eldamir": "It seems to be true of any (Python) classes where I have an identical class name with a prefix of \"Test\". It always displays the test class first\n. When I start seaching, initially, the test won't show up:\n\n![not_listed](https://cloud.githubusercontent.com/assets/2298514/11897077/ac5da41a-a58c-11e5-85b6-36db8432d73f.png)\n\nAs I type, it shows up\n\n![now_listed](https://cloud.githubusercontent.com/assets/2298514/11897080/b401f964-a58c-11e5-830a-3311593090ba.png)\n\nAnd keeps getting ranked first\n\n![still_listed](https://cloud.githubusercontent.com/assets/2298514/11897084/bb88483c-a58c-11e5-97a2-7687b4a026f8.png)\n\nAdmittedly, a ton of classes contain the word \"Invoice\", but \"InvoiceDetail\" is specific to just those two\n. maybe the path to the file matters? Mine are\n\n`/home/ruben/workspace/v3/web/views/invoice.py::InvoiceDetailView`\n`/home/ruben/workspace/v3/web/tests/test_invoices.py::TestInvoiceDetail`\n. my ctrlp specific configs are \n\n```\nif executable('ag')                                                                                                                                   \n  \" Use ag over grep                                                                                                                                  \n  set grepprg=ag\\ --nogroup\\ --nocolor                                                                                                                \n\n  \" Use ag in CtrlP for listing files. Lightning fast and respects .gitignore                                                                         \n  let g:ctrlp_user_command = 'ag %s -l --nocolor -g \"\"'                                                                                               \n\n  \" ag is fast enough that CtrlP doesn't need to cache                                                                                                \n  let g:ctrlp_use_caching = 0                                                                                                                         \nendif\n\nset runtimepath^=~/.vim/bundle/ctrlp.vim                                                                                                              \nlet g:ctrlp_custom_ignore = {                                                                                                                         \n  \\ 'dir':  '\\v[\\/](\\.git|node_modules|\\.sass-cache|bower_components|build|media|__pycache__)$',                                                      \n  \\ 'file': '\\v\\.(exe|so|dll|pyc)$',                                                                                                                  \n  \\ 'link': 'some_bad_symbolic_links',                                                                                                                \n  \\ }  \n```\n\nThough commenting them away doesn't change the result\n. same result, although coloured differently\n\n![same_result](https://cloud.githubusercontent.com/assets/2298514/11897310/f5430dbc-a58e-11e5-89e0-0c933a831487.png)\n. yelds `Variable type mismatch for: g:ctrlp_user_command` for me\n. I don't understand. Would you mind giving me an example I can just paste to my vimrc?\n. I use vundle\n. same error :frowning: \n. Hmm.. I'll give it a shot at a later time. My head is swimming at the moment. Thanks for your quick response and suggestions :+1: \n. It seems to be true of any (Python) classes where I have an identical class name with a prefix of \"Test\". It always displays the test class first\n. When I start seaching, initially, the test won't show up:\n\n![not_listed](https://cloud.githubusercontent.com/assets/2298514/11897077/ac5da41a-a58c-11e5-85b6-36db8432d73f.png)\n\nAs I type, it shows up\n\n![now_listed](https://cloud.githubusercontent.com/assets/2298514/11897080/b401f964-a58c-11e5-830a-3311593090ba.png)\n\nAnd keeps getting ranked first\n\n![still_listed](https://cloud.githubusercontent.com/assets/2298514/11897084/bb88483c-a58c-11e5-97a2-7687b4a026f8.png)\n\nAdmittedly, a ton of classes contain the word \"Invoice\", but \"InvoiceDetail\" is specific to just those two\n. maybe the path to the file matters? Mine are\n\n`/home/ruben/workspace/v3/web/views/invoice.py::InvoiceDetailView`\n`/home/ruben/workspace/v3/web/tests/test_invoices.py::TestInvoiceDetail`\n. my ctrlp specific configs are \n\n```\nif executable('ag')                                                                                                                                   \n  \" Use ag over grep                                                                                                                                  \n  set grepprg=ag\\ --nogroup\\ --nocolor                                                                                                                \n\n  \" Use ag in CtrlP for listing files. Lightning fast and respects .gitignore                                                                         \n  let g:ctrlp_user_command = 'ag %s -l --nocolor -g \"\"'                                                                                               \n\n  \" ag is fast enough that CtrlP doesn't need to cache                                                                                                \n  let g:ctrlp_use_caching = 0                                                                                                                         \nendif\n\nset runtimepath^=~/.vim/bundle/ctrlp.vim                                                                                                              \nlet g:ctrlp_custom_ignore = {                                                                                                                         \n  \\ 'dir':  '\\v[\\/](\\.git|node_modules|\\.sass-cache|bower_components|build|media|__pycache__)$',                                                      \n  \\ 'file': '\\v\\.(exe|so|dll|pyc)$',                                                                                                                  \n  \\ 'link': 'some_bad_symbolic_links',                                                                                                                \n  \\ }  \n```\n\nThough commenting them away doesn't change the result\n. same result, although coloured differently\n\n![same_result](https://cloud.githubusercontent.com/assets/2298514/11897310/f5430dbc-a58e-11e5-89e0-0c933a831487.png)\n. yelds `Variable type mismatch for: g:ctrlp_user_command` for me\n. I don't understand. Would you mind giving me an example I can just paste to my vimrc?\n. I use vundle\n. same error :frowning: \n. Hmm.. I'll give it a shot at a later time. My head is swimming at the moment. Thanks for your quick response and suggestions :+1: \n. ",
    "PlugIN73": "@tkrugg try to enter double ctrl + p combination. First will open search, others will take previously results\n. @tkrugg try to enter double ctrl + p combination. First will open search, others will take previously results\n. ",
    "Nicop06": "Thank you, I didn't see that the repository changed. New pull-request: https://github.com/ctrlpvim/ctrlp.vim/pull/178.\n. Thank you, I didn't see that the repository changed. New pull-request: https://github.com/ctrlpvim/ctrlp.vim/pull/178.\n. ",
    "dedowsdi": "Ok thanks\n. Ok thanks\n. ",
    "mul14": "Hi, Chuck. This project is no longer maintained. Report the issue to this repo instead https://github.com/ctrlpvim/ctrlp.vim.\n. Hi, Chuck. This project is no longer maintained. Report the issue to this repo instead https://github.com/ctrlpvim/ctrlp.vim.\n. ",
    "gerases": "Ignore the comment about the non-reindexing. I was in the MRU mode. My bad. \n. Ignore the comment about the non-reindexing. I was in the MRU mode. My bad. \n. ",
    "blueyed": "Moved to https://github.com/ctrlpvim/ctrlp.vim/issues/244.\n. Moved to https://github.com/ctrlpvim/ctrlp.vim/issues/244.\n. ",
    "Goltergaul": "nevermind, just updated to newest version and it works as expected. Sorry\n. nevermind, just updated to newest version and it works as expected. Sorry\n. ",
    "sheinz": "You might have mapped CtrlP to `<C-m>`. \n`<C-m>` is an alias for `<CR>` in the terminal.\n. You might have mapped CtrlP to `<C-m>`. \n`<C-m>` is an alias for `<CR>` in the terminal.\n. ",
    "timfeirg": "move issue to https://github.com/ctrlpvim/ctrlp.vim/issues/314\n. move issue to https://github.com/ctrlpvim/ctrlp.vim/issues/314\n. ",
    "WhitleyStriber": "What operating system are you on? Did you see if CtrlP is installed through your OS's package manager? (apt-get, pacman, yum, etc.)\n. What operating system are you on? Did you see if CtrlP is installed through your OS's package manager? (apt-get, pacman, yum, etc.)\n. ",
    "TheLouisHong": "Thank you for your reply WhitleyStriber. I've figured out I could uninstall CtrlP by deleting the CtrlP.vim folder in my plugin manager's folder. Usually found somewhere in ~/.vim folder depending on the plugin manager.\n. Thank you for your reply WhitleyStriber. I've figured out I could uninstall CtrlP by deleting the CtrlP.vim folder in my plugin manager's folder. Usually found somewhere in ~/.vim folder depending on the plugin manager.\n. ",
    "nicoder": "ah, thank you for letting me know. And no typo there, I'll close this issue.. ah, thank you for letting me know. And no typo there, I'll close this issue.. ",
    "tsujigiri": "I just realized I'm in the wrong repo. :wave: \n. I just realized I'm in the wrong repo. :wave: \n. ",
    "PezCoder": "I tried removing all the plugins one by one, The Plugin [ryanoasis/vim-devicons](https://github.com/ryanoasis/vim-devicons) is messing stuff up. Will raise an issue there.\n. here's a reference for those who are looking to track the fix\nhttps://github.com/ctrlpvim/ctrlp.vim/pull/285\n. I tried removing all the plugins one by one, The Plugin [ryanoasis/vim-devicons](https://github.com/ryanoasis/vim-devicons) is messing stuff up. Will raise an issue there.\n. here's a reference for those who are looking to track the fix\nhttps://github.com/ctrlpvim/ctrlp.vim/pull/285\n. ",
    "bdfish": "This project is unmaintained,\r\nYou should use this instead.\r\nhttps://github.com/ctrlpvim/ctrlp.vim. This project is unmaintained,\r\nPlease go here \r\nhttps://github.com/ctrlpvim/ctrlp.vim. This project is unmaintained,\r\nYou should use this instead.\r\nhttps://github.com/ctrlpvim/ctrlp.vim. This project is unmaintained,\r\nPlease go here \r\nhttps://github.com/ctrlpvim/ctrlp.vim. ",
    "snoblenet": "Closing as (a) I notice I accidentally commented on the wrong fork and (b) and found a good solution here: https://vi.stackexchange.com/a/11300/12497. Closing as (a) I notice I accidentally commented on the wrong fork and (b) and found a good solution here: https://vi.stackexchange.com/a/11300/12497. ",
    "kyprifog": "Im getting the same behavior.. Im getting the same behavior.. ",
    "ecly": "Ah I'm sorry, this belongs in the maintained version. I'll move my issue there. \r\n. Ah I'm sorry, this belongs in the maintained version. I'll move my issue there. \r\n. ",
    "mbellgb": "This is a general vim feature, not a ctrlp bug (essentially it's a \"pause\" command for vim). Ctrl+q should resume vim!\r\n\r\nDetailed explanation: https://unix.stackexchange.com/a/72092. This is a general vim feature, not a ctrlp bug (essentially it's a \"pause\" command for vim). Ctrl+q should resume vim!\r\n\r\nDetailed explanation: https://unix.stackexchange.com/a/72092. ",
    "tony": "I recently split off a directory into.a git submodule\r\n\r\nAnd now I'm in hell. All the files in the submodule are no longer seen in ctrlp search when I load from the main repo.. @klen / anyone else: Any idea what config combination could get git submodules searching files as if they were just a subdirectory?. To Anybody reading this:\r\n\r\nWant to show git submodule files in in ctrlp? Have Git 2.11+?\r\n\r\nChange your `g:ctrlp_user_command` from `git ls-files` to `git ls-files --recurse-submodules`. I recently split off a directory into.a git submodule\r\n\r\nAnd now I'm in hell. All the files in the submodule are no longer seen in ctrlp search when I load from the main repo.. @klen / anyone else: Any idea what config combination could get git submodules searching files as if they were just a subdirectory?. To Anybody reading this:\r\n\r\nWant to show git submodule files in in ctrlp? Have Git 2.11+?\r\n\r\nChange your `g:ctrlp_user_command` from `git ls-files` to `git ls-files --recurse-submodules`. ",
    "codedmart": "Maybe related to? https://github.com/kien/ctrlp.vim/issues/463. Maybe related to? https://github.com/kien/ctrlp.vim/issues/463. "
}