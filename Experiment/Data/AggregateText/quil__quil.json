{
    "samaaron": "Actually, no - this isn't something that we've explored yet. It should be possible - both using the Java Applet, and also to combine it with ClojureScript and the JS Processing renderer. Patches, gladly accepted.\n. Awesome - that would be a wonderful patch :-)\n\nLet me know if I can help in any way.\n. OK, so one thing you're doing is using defapplet. This is almost certainly not going to work as the implementation of applet (which defapplet wraps) makes all sorts of calls to JFrame and friends. This is clearly not going to work in a webcontext. \n\nMy guess is that you'll have to write your own applet fn - which is probably most of the current implementation of applet - minus the applet-run part. The useful part of applet-run that you'll also need to keep is the call to .init - which will give you a running applet. \n. Ah, good catch, the 1.0.0-SNAPSHOT jar on clojars was out of date. I've pushed a new one which includes the helper fns (they're actually included with the jar, rather than being a separate dependency at the moment).\n\nPull quil again from clojars with lein and things should work nicely. Please let me know if this isn't the case.\n. You're very welcome :-)\n\nPlease do let me know what you get up to with Quil. Feedback is what gives me the energy to continue hacking on projects like this.\n. Yep, that's pretty much next on my list :-)\n\nI'll get on to it...\n. I've added a workflow description for generic editors: https://github.com/quil/quil/wiki/Dynamic-Workflow-%28for-generic-editors%29\n\nEmacs next...\n. Brilliant, thanks :-)\n. Hi Victor,\n\nit seems that you're trying to call Quil fns outside the scope of a sketch. In order for most of the Quil API (the fns marked as :requires-bindings true in the metadata) to work, they must be executed from the sketch thread. This just means that you need to add your fns as one of the sketch callbacks (setup, draw, etc) or for them to be called from one of those fns.\n\nDoes this make sense?\n. Is it possible to move an undecorated frame around and then close it?\n. How unfortunate - you sound like you have had a bad allergic reaction. This bug is clearly a human error rather than a problem with Quil. As a fix I therefore suggest drinking plenty of fluids and advise you to steer clear of such prose in the future. Oh, and don't go anywhere near Why's Poignant Guide to Ruby - your life might be in danger. \n\nI hope that you get better soon :-)\n. You're very welcome. I hope you do some very cool things with it!\n. These binding errors aren't part of Quil - you must be running something else concurrently which is causing the issues. Have you tried running Quil on its own in a separate project?\n. It's the first time I've ever seen something like this - I wonder if your setup isn't quite how it should be. Are you using the latest version of lein?\n\nI'm going to close this for now. Feel free to re-open it if you can give extra information on how to reproduce the errors.\n. Hi there,\n\nI just created a new project, added quil \"1.0.0\" as a dep, started a repl and copied in example 21, and it worked fine - raising no constant errors.\n\nCould you give me a description of what you did to observe the error?\n. Oh, sorry, I did actually mean 1.0.0-SNAPSHOT.\n. Could you give me more precise step-by-step instructions with which to duplicate this error? I'm not sure how you're getting it.\n. OK, great. Sorry that you had trouble, but it's good to hear that it's not with Quil. It's a shame to hear that we're incompatible with Incanter though...\n. So, Processing uses floats or ints throughout. What are you suggesting we do?\n. One of my concerns was to maintain compatibility with vanilla Processing. Perhaps there are quirks in some sketches that take 'advantage' of the number accuracy errors inherent in using floats.\n\nI think that a long term vision is to enable backward compatibility, but probably not have it as the default. I think that accuracy and efficiency should be the primary goals.\n\nI'll close this issue for now as it's not an immediate concern, but thanks for pointing it out.\n. Awesome, thanks.\n. Hi there,\n\nsorry that you're having issues. I just took a quick flick through the tutorial that you were following and saw that it was slightly out of date. You now reference the Quil lib with `(:use quil.core)` and it's now `defsketch` instead of `defapplet`.\n\nCould you try updating these things and giving things another try?\n. You're very welcome. Please do share anything you make with Quil - part of the joy of contributing to Open Source projects such as these is to get to see people making cool things with your stuff :-)\n. Haha, of course it isn't - I replaced it with the `:target` option which I promptly forgot and didn't document. Will fix.\n. Fixed.\n. Weird - it's not a typo - the Github wiki was mangling it. I added an extra space and it fixed things. I also updated to the kind of output lein2 spits out. \n\nThanks for pointing this out :-)\n. What do you mean by this? Do you have any specific examples?\n. Out of interest, why do you think you need to write a class?\n\nClojure isn't object-oriented like Processing - it has a focus on functional programming. Classes are typically a way of defining object factories that bundle functionality and state. Quil lets you store per-sketch state using set-state! Clojure lets you bundle fns using namespaces.\n\nIf you have a specific use case that you think really requires classes, I'd love to see it.\n. Hey Phil,\n\nlooks like a great start. One thing to consider is how this would work with the current state functionality. Perhaps it might make sense to keep it different? It's worth thinking about.\n\nCurrently, you can set the state with `'set-state!` (which may only be called once to stop it being used as a mutator). This is typically done in the sketch's `:setup` fn:\n\n`(set-state! :foo 1 :bar (atom true))`\n\n Once the state has been state, may then be retrieved by calling `state` and passing the keyword of the state val you'd like to read. i.e. to get the atom associated with the key bar you'd do:\n\n`(state :bar)`\n\nThis would typically be used in the `:draw` fn.\n\nThis means, if you want mutating stuff, you need to store them in refs thus preserving Clojure's nice identity mutation semantics.\n\nWith your approach, you probably wouldn't store stuff in refs, rather you'd just keep replacing vals in a similar way to using `loop`. I therefore wonder whether we need to explicitly store anything with this approach - i.e. it's orthogonal to the 'state' stuff.\n\nInterested in your thoughts...\n. What `set-state!` buys you over a top-level atom def in the sketch namespace is _sketch local_ state i.e. it's not shared across sketches. One of the first traps I fell into when playing with clj-processing was running multiple sketches which shared the same atom and wondering why things weren't working as expected.\n\n`:init` seems like a good name. My only concern at this stage is to try and not get the two state handling options confused. It's not clear to me which is going to be the most elegant solution and I think it's great to experiment. However, I think we need to be careful to not make things more confusing. Perhaps `:seed` or `:update-seed` are other names to consider.\n. Yeah, that definitely makes a lot more sense. I'll look into it when I get a few spare non-baby cycles :-)\n. Sounds extremely sane.\n\nMy current plan is to look at major changes like this when I start working on Quil 2.0 which will support Processing 2.0 when it's stable. I think we should leave Quil 1.x.y with the current API for stability purposes. \n\nAny prototypes of ideas would be great to see in the meantime though...\n. Sorry about that - I'll make the Clojure 1.4 requirement more explicit. If 1.3 compatibility is an issue for you, patches would certainly be accepted :-)\n. I just updated the readme :-)\n\nApologies once again for wasting your time tracking the issue.\n. Wonderful, thanks :-)\n. thanks :-)\n. This is by design so that the fn signatures match those of Processing itself. It's something that might change in the future though. You can tell which fns _won't_ work outside of a sketch by finding the following in their metadata `:requires-bindings true`.\n\nEssentially, these fns are methods defined on the Processing sketch object, and so only make sense in the context of a sketch.\n. Yes, there is some sporadic OpenGL bug. Any help pinpointing and fixing it would be appreciated. A bug manifests itself to me by sketches sporadically initiating with the incorrect size - perhaps it's related?\n\nI don't think that the Processing team built Processing with simultaneous execution of OpenGL contexts in mind.\n. That would be wonderful - any help is most appreciated.\n. Sounds interesting - fancy creating a prototype to play with?\n. Awesome - although I've just implemented exactly the same thing which I was going to push today. Great minds think alike!\n. Good catch, thanks.\n. Excellent work - thanks very much :-)\n. Brilliant, thanks :-)\n. Yes, this is a known bug, but unfortunately I'm not sure how to fix it - the error is probably in the bowels of the Processing OpenGL code. Patches accepted...\n. Quil requires Clojure `1.4.0`.\n. Thanks :-)\n. Awesome - thanks!\n. Absolutely :-) Go for it...\n. Brilliant, thanks :-)\n. Looks great, thanks very much :-)\n. Hi there,\n\nthanks for this - but I actually moved from highlighted code to non-highlighed for this README - it felt more in keeping with the aesthetics - especially since it's drawing grey circles.\n. Hey Dan,\n\nfantastic, thanks so much for this :-)\n. The project is called Quil. It is a reference to _why the lucky stiff. Apologies if you don't like it - it's impossible to please everyone.\n. I'm happy to merge in a tutorial of how to run the examples - I don't currently have time to write anything myself. However, it's essentially the same as running any arbitrary Clojure code - so any Clojure REPL or interactive Clojure editor like Emacs or Eclipse with Counter Clockwise will let you run arbitrary Clojure code with a simple key combination.\n. Take the first example:\n\nhttps://github.com/quil/quil/blob/master/examples/gen_art/01_cross_with_circle.clj\n\nThis has everything you need. The first form is the namespace declaration which imports/uses everything for you. You just then need to evaluate the `setup` fn and the `defsketch` macro, and you should see the visualisation appear...\n. I don't believe that you can redraw from a mouse-handler in a no-loop sketch with vanilla Processing. The mouse-handler requires the sketch to be in a loop to function at all.\n\nYou'd have to drive the sketch's redraw manually (i.e. not use Quil callback functionality) if your'e in no-loop mode.\n. Welcome to the deep and dirty world of Processing internals ;-)\n. Go for it :-)\n. Happy to merge in a pull request fixing this.\n. I'll get round to pushing an update soon - I promise :-)\n. I have been waiting for the 2.0 final to be released before spending the time to create a matching Quil 2.0.\n\nHowever, if you want to create a branch and kickstart things off, then that would be awesome.\n. Just go for it - I'm happy to help out wherever I can.\n\nPerhaps a methodic approach would be sensible - i.e. create a list of _all_ the Processing 2.0 methods and tick each off when you've verified it works with Quil 2.0 - this is the approach I took with Quil 1.0. That way others can help by tackling their own subset of methods.\n. I think that the release of Processing 2.0 presents an opportunity for us to redevelop Quil from the ground up. I'd like to see a discussion about the aspects of Quil 1.x that people like and don't like and then for a principled development plan to take shape for Quil 2.0.\n\nI won't have time to work on this for at least a couple of months. However, as with the recent development patches - if I'm not completely convinced that the next version is 100% ready for use, I'll hold off creating a 'quil' organisation approved release (obviously, this doesn't stop anyone creating their own forks).\n\nI therefore think it's worth our while collaborating on a design document. Who wants to take a lead on creating this document?\n. I'd love to help, but am a bit busy at the moment. Hopefully I'll be able to free some time at the end of the week. Getting Quil working with Processing 2.0 is an important milestone. Thanks for taking the time to look into this.\n. We moved to thread locals to gain some performance - but if it breaks things, then it's clearly better to go back to dynamic vars. Thanks so much for sorting this out.\n. There's no sane reason at all. If you want to submit a pull request fixing this, I'd be happy to merge it.\n. @tmcw Thanks for raising such an important issue - making this stuff easy to get running with is a clear priority. Does @jarav's comment help you at all?\n. Nice idea. Please could you resubmit this as a mergable pull request and not include the dev-dependency for swank-clojure.\n. Good call, thanks.\n. Awesome, thanks.\n. I haven't yet had time to look at this, but I will shortly.\n\nOut of interest, you say that you \"don't have OpenGL set up for the JVM\". What do you mean by this - you shouldn't need to - we pull in all the native libs for you. You just need to be using Leiningen version 2+\n. Could you be more specific about the errors you get? Which JVM, OS and version of Lein are you using?\n. Thanks :-)\n. Actually, I rather like the aesthetic of not having any syntax highlighting in the README file. Thanks for the thought though.\n. Awesome :-)\n. Looks nice. Thanks\n. Hmm, actually - `.size` does seem to be called before the the `setup` fn here:\n\nhttps://github.com/quil/quil/blob/master/src/quil/applet.clj#L351\n. Sounds like a neat trick. Could you hack something up that does this?\n. I haven't had any time to develop Quil recently. Last time I played with edge, there were a number of regression bugs when running the examples. If people are sure all the examples work smoothly on edge, I'd be happy to spend the time verifying it myself and then push out a new release.\n\nWith respect to long term plans - my aim is to get Quil working with the latest version of Processing. However this is going to take a much larger amount of development time. Hopefully I'll be able to find that in the new year.\n\nHappy Hacking!\n. Awesome, thanks :-)\n. Hmm, unfortunately this doesn't quite work. \n\nIt seems fine for all sketches which don't call `width` or `height`, but those that do have strange/non-functioning behaviour. For example, try `examples/gen_art/29_spiral_sphere.clj`\n. The spiral sketch works if you replace the calls to `width` and `height` with their correct values.\n. Sometimes it renders just fine, other times it presents a blank window which doesn't respond to being closed. If I move to the `p3d` renderer instead of `opengl` things seem just fine...\n. Hmm, perhaps this isn't related to this issue, but perhaps it's a new `opengl` specific issue that's crept in somehow. I can reproduce the error even if I hardcode the width and height rather than calling the fns. \n. No, I don't believe so as the window renders normal size.\n. Yeah, I was planning on working back on previous commits until it was working again. I've just not found the time yet :-)\n. Yep, things work perfectly with commit a79ee61af179f39b9b1069735d5f1415b3b3\n. Good find :-)\n. Thanks for this :-)\n. Actually, no - this isn't something that we've explored yet. It should be possible - both using the Java Applet, and also to combine it with ClojureScript and the JS Processing renderer. Patches, gladly accepted.\n. Awesome - that would be a wonderful patch :-)\n\nLet me know if I can help in any way.\n. OK, so one thing you're doing is using defapplet. This is almost certainly not going to work as the implementation of applet (which defapplet wraps) makes all sorts of calls to JFrame and friends. This is clearly not going to work in a webcontext. \n\nMy guess is that you'll have to write your own applet fn - which is probably most of the current implementation of applet - minus the applet-run part. The useful part of applet-run that you'll also need to keep is the call to .init - which will give you a running applet. \n. Ah, good catch, the 1.0.0-SNAPSHOT jar on clojars was out of date. I've pushed a new one which includes the helper fns (they're actually included with the jar, rather than being a separate dependency at the moment).\n\nPull quil again from clojars with lein and things should work nicely. Please let me know if this isn't the case.\n. You're very welcome :-)\n\nPlease do let me know what you get up to with Quil. Feedback is what gives me the energy to continue hacking on projects like this.\n. Yep, that's pretty much next on my list :-)\n\nI'll get on to it...\n. I've added a workflow description for generic editors: https://github.com/quil/quil/wiki/Dynamic-Workflow-%28for-generic-editors%29\n\nEmacs next...\n. Brilliant, thanks :-)\n. Hi Victor,\n\nit seems that you're trying to call Quil fns outside the scope of a sketch. In order for most of the Quil API (the fns marked as :requires-bindings true in the metadata) to work, they must be executed from the sketch thread. This just means that you need to add your fns as one of the sketch callbacks (setup, draw, etc) or for them to be called from one of those fns.\n\nDoes this make sense?\n. Is it possible to move an undecorated frame around and then close it?\n. How unfortunate - you sound like you have had a bad allergic reaction. This bug is clearly a human error rather than a problem with Quil. As a fix I therefore suggest drinking plenty of fluids and advise you to steer clear of such prose in the future. Oh, and don't go anywhere near Why's Poignant Guide to Ruby - your life might be in danger. \n\nI hope that you get better soon :-)\n. You're very welcome. I hope you do some very cool things with it!\n. These binding errors aren't part of Quil - you must be running something else concurrently which is causing the issues. Have you tried running Quil on its own in a separate project?\n. It's the first time I've ever seen something like this - I wonder if your setup isn't quite how it should be. Are you using the latest version of lein?\n\nI'm going to close this for now. Feel free to re-open it if you can give extra information on how to reproduce the errors.\n. Hi there,\n\nI just created a new project, added quil \"1.0.0\" as a dep, started a repl and copied in example 21, and it worked fine - raising no constant errors.\n\nCould you give me a description of what you did to observe the error?\n. Oh, sorry, I did actually mean 1.0.0-SNAPSHOT.\n. Could you give me more precise step-by-step instructions with which to duplicate this error? I'm not sure how you're getting it.\n. OK, great. Sorry that you had trouble, but it's good to hear that it's not with Quil. It's a shame to hear that we're incompatible with Incanter though...\n. So, Processing uses floats or ints throughout. What are you suggesting we do?\n. One of my concerns was to maintain compatibility with vanilla Processing. Perhaps there are quirks in some sketches that take 'advantage' of the number accuracy errors inherent in using floats.\n\nI think that a long term vision is to enable backward compatibility, but probably not have it as the default. I think that accuracy and efficiency should be the primary goals.\n\nI'll close this issue for now as it's not an immediate concern, but thanks for pointing it out.\n. Awesome, thanks.\n. Hi there,\n\nsorry that you're having issues. I just took a quick flick through the tutorial that you were following and saw that it was slightly out of date. You now reference the Quil lib with `(:use quil.core)` and it's now `defsketch` instead of `defapplet`.\n\nCould you try updating these things and giving things another try?\n. You're very welcome. Please do share anything you make with Quil - part of the joy of contributing to Open Source projects such as these is to get to see people making cool things with your stuff :-)\n. Haha, of course it isn't - I replaced it with the `:target` option which I promptly forgot and didn't document. Will fix.\n. Fixed.\n. Weird - it's not a typo - the Github wiki was mangling it. I added an extra space and it fixed things. I also updated to the kind of output lein2 spits out. \n\nThanks for pointing this out :-)\n. What do you mean by this? Do you have any specific examples?\n. Out of interest, why do you think you need to write a class?\n\nClojure isn't object-oriented like Processing - it has a focus on functional programming. Classes are typically a way of defining object factories that bundle functionality and state. Quil lets you store per-sketch state using set-state! Clojure lets you bundle fns using namespaces.\n\nIf you have a specific use case that you think really requires classes, I'd love to see it.\n. Hey Phil,\n\nlooks like a great start. One thing to consider is how this would work with the current state functionality. Perhaps it might make sense to keep it different? It's worth thinking about.\n\nCurrently, you can set the state with `'set-state!` (which may only be called once to stop it being used as a mutator). This is typically done in the sketch's `:setup` fn:\n\n`(set-state! :foo 1 :bar (atom true))`\n\n Once the state has been state, may then be retrieved by calling `state` and passing the keyword of the state val you'd like to read. i.e. to get the atom associated with the key bar you'd do:\n\n`(state :bar)`\n\nThis would typically be used in the `:draw` fn.\n\nThis means, if you want mutating stuff, you need to store them in refs thus preserving Clojure's nice identity mutation semantics.\n\nWith your approach, you probably wouldn't store stuff in refs, rather you'd just keep replacing vals in a similar way to using `loop`. I therefore wonder whether we need to explicitly store anything with this approach - i.e. it's orthogonal to the 'state' stuff.\n\nInterested in your thoughts...\n. What `set-state!` buys you over a top-level atom def in the sketch namespace is _sketch local_ state i.e. it's not shared across sketches. One of the first traps I fell into when playing with clj-processing was running multiple sketches which shared the same atom and wondering why things weren't working as expected.\n\n`:init` seems like a good name. My only concern at this stage is to try and not get the two state handling options confused. It's not clear to me which is going to be the most elegant solution and I think it's great to experiment. However, I think we need to be careful to not make things more confusing. Perhaps `:seed` or `:update-seed` are other names to consider.\n. Yeah, that definitely makes a lot more sense. I'll look into it when I get a few spare non-baby cycles :-)\n. Sounds extremely sane.\n\nMy current plan is to look at major changes like this when I start working on Quil 2.0 which will support Processing 2.0 when it's stable. I think we should leave Quil 1.x.y with the current API for stability purposes. \n\nAny prototypes of ideas would be great to see in the meantime though...\n. Sorry about that - I'll make the Clojure 1.4 requirement more explicit. If 1.3 compatibility is an issue for you, patches would certainly be accepted :-)\n. I just updated the readme :-)\n\nApologies once again for wasting your time tracking the issue.\n. Wonderful, thanks :-)\n. thanks :-)\n. This is by design so that the fn signatures match those of Processing itself. It's something that might change in the future though. You can tell which fns _won't_ work outside of a sketch by finding the following in their metadata `:requires-bindings true`.\n\nEssentially, these fns are methods defined on the Processing sketch object, and so only make sense in the context of a sketch.\n. Yes, there is some sporadic OpenGL bug. Any help pinpointing and fixing it would be appreciated. A bug manifests itself to me by sketches sporadically initiating with the incorrect size - perhaps it's related?\n\nI don't think that the Processing team built Processing with simultaneous execution of OpenGL contexts in mind.\n. That would be wonderful - any help is most appreciated.\n. Sounds interesting - fancy creating a prototype to play with?\n. Awesome - although I've just implemented exactly the same thing which I was going to push today. Great minds think alike!\n. Good catch, thanks.\n. Excellent work - thanks very much :-)\n. Brilliant, thanks :-)\n. Yes, this is a known bug, but unfortunately I'm not sure how to fix it - the error is probably in the bowels of the Processing OpenGL code. Patches accepted...\n. Quil requires Clojure `1.4.0`.\n. Thanks :-)\n. Awesome - thanks!\n. Absolutely :-) Go for it...\n. Brilliant, thanks :-)\n. Looks great, thanks very much :-)\n. Hi there,\n\nthanks for this - but I actually moved from highlighted code to non-highlighed for this README - it felt more in keeping with the aesthetics - especially since it's drawing grey circles.\n. Hey Dan,\n\nfantastic, thanks so much for this :-)\n. The project is called Quil. It is a reference to _why the lucky stiff. Apologies if you don't like it - it's impossible to please everyone.\n. I'm happy to merge in a tutorial of how to run the examples - I don't currently have time to write anything myself. However, it's essentially the same as running any arbitrary Clojure code - so any Clojure REPL or interactive Clojure editor like Emacs or Eclipse with Counter Clockwise will let you run arbitrary Clojure code with a simple key combination.\n. Take the first example:\n\nhttps://github.com/quil/quil/blob/master/examples/gen_art/01_cross_with_circle.clj\n\nThis has everything you need. The first form is the namespace declaration which imports/uses everything for you. You just then need to evaluate the `setup` fn and the `defsketch` macro, and you should see the visualisation appear...\n. I don't believe that you can redraw from a mouse-handler in a no-loop sketch with vanilla Processing. The mouse-handler requires the sketch to be in a loop to function at all.\n\nYou'd have to drive the sketch's redraw manually (i.e. not use Quil callback functionality) if your'e in no-loop mode.\n. Welcome to the deep and dirty world of Processing internals ;-)\n. Go for it :-)\n. Happy to merge in a pull request fixing this.\n. I'll get round to pushing an update soon - I promise :-)\n. I have been waiting for the 2.0 final to be released before spending the time to create a matching Quil 2.0.\n\nHowever, if you want to create a branch and kickstart things off, then that would be awesome.\n. Just go for it - I'm happy to help out wherever I can.\n\nPerhaps a methodic approach would be sensible - i.e. create a list of _all_ the Processing 2.0 methods and tick each off when you've verified it works with Quil 2.0 - this is the approach I took with Quil 1.0. That way others can help by tackling their own subset of methods.\n. I think that the release of Processing 2.0 presents an opportunity for us to redevelop Quil from the ground up. I'd like to see a discussion about the aspects of Quil 1.x that people like and don't like and then for a principled development plan to take shape for Quil 2.0.\n\nI won't have time to work on this for at least a couple of months. However, as with the recent development patches - if I'm not completely convinced that the next version is 100% ready for use, I'll hold off creating a 'quil' organisation approved release (obviously, this doesn't stop anyone creating their own forks).\n\nI therefore think it's worth our while collaborating on a design document. Who wants to take a lead on creating this document?\n. I'd love to help, but am a bit busy at the moment. Hopefully I'll be able to free some time at the end of the week. Getting Quil working with Processing 2.0 is an important milestone. Thanks for taking the time to look into this.\n. We moved to thread locals to gain some performance - but if it breaks things, then it's clearly better to go back to dynamic vars. Thanks so much for sorting this out.\n. There's no sane reason at all. If you want to submit a pull request fixing this, I'd be happy to merge it.\n. @tmcw Thanks for raising such an important issue - making this stuff easy to get running with is a clear priority. Does @jarav's comment help you at all?\n. Nice idea. Please could you resubmit this as a mergable pull request and not include the dev-dependency for swank-clojure.\n. Good call, thanks.\n. Awesome, thanks.\n. I haven't yet had time to look at this, but I will shortly.\n\nOut of interest, you say that you \"don't have OpenGL set up for the JVM\". What do you mean by this - you shouldn't need to - we pull in all the native libs for you. You just need to be using Leiningen version 2+\n. Could you be more specific about the errors you get? Which JVM, OS and version of Lein are you using?\n. Thanks :-)\n. Actually, I rather like the aesthetic of not having any syntax highlighting in the README file. Thanks for the thought though.\n. Awesome :-)\n. Looks nice. Thanks\n. Hmm, actually - `.size` does seem to be called before the the `setup` fn here:\n\nhttps://github.com/quil/quil/blob/master/src/quil/applet.clj#L351\n. Sounds like a neat trick. Could you hack something up that does this?\n. I haven't had any time to develop Quil recently. Last time I played with edge, there were a number of regression bugs when running the examples. If people are sure all the examples work smoothly on edge, I'd be happy to spend the time verifying it myself and then push out a new release.\n\nWith respect to long term plans - my aim is to get Quil working with the latest version of Processing. However this is going to take a much larger amount of development time. Hopefully I'll be able to find that in the new year.\n\nHappy Hacking!\n. Awesome, thanks :-)\n. Hmm, unfortunately this doesn't quite work. \n\nIt seems fine for all sketches which don't call `width` or `height`, but those that do have strange/non-functioning behaviour. For example, try `examples/gen_art/29_spiral_sphere.clj`\n. The spiral sketch works if you replace the calls to `width` and `height` with their correct values.\n. Sometimes it renders just fine, other times it presents a blank window which doesn't respond to being closed. If I move to the `p3d` renderer instead of `opengl` things seem just fine...\n. Hmm, perhaps this isn't related to this issue, but perhaps it's a new `opengl` specific issue that's crept in somehow. I can reproduce the error even if I hardcode the width and height rather than calling the fns. \n. No, I don't believe so as the window renders normal size.\n. Yeah, I was planning on working back on previous commits until it was working again. I've just not found the time yet :-)\n. Yep, things work perfectly with commit a79ee61af179f39b9b1069735d5f1415b3b3\n. Good find :-)\n. Thanks for this :-)\n. ",
    "maacl": "Ok, working on getting an example working, which is proving difficult.\n\nOn Tue, Mar 6, 2012 at 3:18 PM, Sam Aaron <\nreply@reply.github.com\n\n> wrote:\n> \n> Actually, no - this isn't something that we've explored yet. It should be\n> possible - both using the Java Applet, and also to combine it with\n> ClojureScript and the JS Processing renderer. Patches, gladly accepted.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/quil/quil/issues/1#issuecomment-4344999\n. [This](https://github.com/maacl/qtest) is my current attempt, which fails miserably with: load: class qtest.core not found. Any ideas?\n. I fumbled around with this a couple of hours yesterday, and it appears to be beyond my current grasp of Java and applets specifically to get something working. I might to return to it later if I improve my understanding of the relevant topics. I also looked into using Java Webstart but that also failed. If someone knows JWS it appears doable, but I cannot make it work.\n. Ok, working on getting an example working, which is proving difficult.\n\nOn Tue, Mar 6, 2012 at 3:18 PM, Sam Aaron <\nreply@reply.github.com\n\n> wrote:\n> \n> Actually, no - this isn't something that we've explored yet. It should be\n> possible - both using the Java Applet, and also to combine it with\n> ClojureScript and the JS Processing renderer. Patches, gladly accepted.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/quil/quil/issues/1#issuecomment-4344999\n. [This](https://github.com/maacl/qtest) is my current attempt, which fails miserably with: load: class qtest.core not found. Any ideas?\n. I fumbled around with this a couple of hours yesterday, and it appears to be beyond my current grasp of Java and applets specifically to get something working. I might to return to it later if I improve my understanding of the relevant topics. I also looked into using Java Webstart but that also failed. If someone knows JWS it appears doable, but I cannot make it work.\n. ",
    "mchampine": "Worked like a charm - thanks!\n. Worked like a charm - thanks!\n. ",
    "semperos": "Thanks. Just wanted to make sure I wasn't missing something. Awesome work, by the way, looking forward to experimenting.\n. I'm not sure how much Emacs-specific things you're going to go into, but this was plenty for me. Stupid on my part, not to just put the `setup` and `draw` functions in a different namespace. I tried just re-evaluating them with <kbd>C-x C-e</kbd>, but having them separated and just doing <kbd>C-c C-k</kbd> in the namespace with those functions is faster and cleaner anyway.\n\nI consider this closed; thank you for taking the time to lay it out nicely, with an example and some humor along the way :-)\n. In this vein, perhaps splitting your examples in the `examples` dir to at least use separate `setup` and `draw` functions, so folks could follow this core/dynamic paradigm simply by copying/pasting out of the examples.\n. Thanks. Just wanted to make sure I wasn't missing something. Awesome work, by the way, looking forward to experimenting.\n. I'm not sure how much Emacs-specific things you're going to go into, but this was plenty for me. Stupid on my part, not to just put the `setup` and `draw` functions in a different namespace. I tried just re-evaluating them with <kbd>C-x C-e</kbd>, but having them separated and just doing <kbd>C-c C-k</kbd> in the namespace with those functions is faster and cleaner anyway.\n\nI consider this closed; thank you for taking the time to lay it out nicely, with an example and some humor along the way :-)\n. In this vein, perhaps splitting your examples in the `examples` dir to at least use separate `setup` and `draw` functions, so folks could follow this core/dynamic paradigm simply by copying/pasting out of the examples.\n. ",
    "vemv": "Yes it does! Silly me, I thought `(defn draw []...` and  `(let [diam (random 100)` were two different blocks - I was trying to load them separately.\n\nSo all demos work seamlessly. Greetings.\n. Yes it does! Silly me, I thought `(defn draw []...` and  `(let [diam (random 100)` were two different blocks - I was trying to load them separately.\n\nSo all demos work seamlessly. Greetings.\n. ",
    "th0ma5w": "maybe this could be an option instead of a target, such as to unbind it from having to remain on top?\n. I tried on linux at home, and could with keyboard shortcuts like alt-space and the arrow keys, and alt-f4. I tried just now on windows, and could with the same techniques, although once moving I could move it with the mouse. Is that what you're asking? I didn't try programmaticly, and (applet-close *) and (applet-exit *) generally do weird things for me on both platforms, at least in the repl (seem to work fine in scripts maybe)\n. maybe this could be an option instead of a target, such as to unbind it from having to remain on top?\n. I tried on linux at home, and could with keyboard shortcuts like alt-space and the arrow keys, and alt-f4. I tried just now on windows, and could with the same techniques, although once moving I could move it with the mouse. Is that what you're asking? I didn't try programmaticly, and (applet-close *) and (applet-exit *) generally do weird things for me on both platforms, at least in the repl (seem to work fine in scripts maybe)\n. ",
    "rosado": "This can be useful for presentations and such.\n\nMoving  via keyboard shortcuts is pretty much the only option for undecorated frames, so that's expected.  But, per th0ma5w's comment, I'm in favour of this being an option, not a target. \n\nI'm closing this request: please, submit a new one, where undecorated is an option. \n. Thanks!\n. This can be useful for presentations and such.\n\nMoving  via keyboard shortcuts is pretty much the only option for undecorated frames, so that's expected.  But, per th0ma5w's comment, I'm in favour of this being an option, not a target. \n\nI'm closing this request: please, submit a new one, where undecorated is an option. \n. Thanks!\n. ",
    "pespes": "Thanks for the hard work on this, btw. Very cool project ;-)\n\nOn Mon, Mar 26, 2012 at 1:10 PM, Sam Aaron <\nreply@reply.github.com\n\n> wrote:\n> \n> How unfortunate - you sound like you have had a bad allergic reaction.\n> This bug is clearly a human error rather than a problem with Quil. As a fix\n> I therefore suggest drinking plenty of fluids and advise you to steer clear\n> of such prose in the future. Oh, and don't go anywhere near Why's Poignant\n> Guide to Ruby - your life might be in danger.\n> \n> I hope that you get better soon :-)\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/quil/quil/issues/8#issuecomment-4698774\n\n## \n\n## Peter Esveld\n\nPhone: 952.818.6488\nEmail:  peter.esveld@gmail.com\n\n## Twitter: @pesveld\n. Thanks for the hard work on this, btw. Very cool project ;-)\n\nOn Mon, Mar 26, 2012 at 1:10 PM, Sam Aaron <\nreply@reply.github.com\n\n> wrote:\n> \n> How unfortunate - you sound like you have had a bad allergic reaction.\n> This bug is clearly a human error rather than a problem with Quil. As a fix\n> I therefore suggest drinking plenty of fluids and advise you to steer clear\n> of such prose in the future. Oh, and don't go anywhere near Why's Poignant\n> Guide to Ruby - your life might be in danger.\n> \n> I hope that you get better soon :-)\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/quil/quil/issues/8#issuecomment-4698774\n\n## \n\n## Peter Esveld\n\nPhone: 952.818.6488\nEmail:  peter.esveld@gmail.com\n\n## Twitter: @pesveld\n. ",
    "cocodrino": "Hi sam..thanks for the reply...well actually I download the git and run the project directly..I going to check this problem this weekend because it's not the first time than I've this trouble with the latest clojure version \n. Hi sam..thanks for the reply...well actually I download the git and run the project directly..I going to check this problem this weekend because it's not the first time than I've this trouble with the latest clojure version \n. ",
    "guv": "I got quil 1.0.0-SNAPSHOT since it was the one clojars displayed. there is an \"1.0.0\" as well?\n. Well, I just copied the example and gave it another namespace.\nWhen trying to execute it, I encountered the above mentioned error.\nI had a look into the processing-core jar file with Eclipse: the constant is not displayed there.\n. Ok, I started a fresh project which worked and noticed that incanter has a processing dependency as well.\nI think that caused the error since incanter 1.2.4 has an older processing dep.\n. I got quil 1.0.0-SNAPSHOT since it was the one clojars displayed. there is an \"1.0.0\" as well?\n. Well, I just copied the example and gave it another namespace.\nWhen trying to execute it, I encountered the above mentioned error.\nI had a look into the processing-core jar file with Eclipse: the constant is not displayed there.\n. Ok, I started a fresh project which worked and noticed that incanter has a processing dependency as well.\nI think that caused the error since incanter 1.2.4 has an older processing dep.\n. ",
    "shaharz": "Correct me if I'm wrong, but the majority of Processing functions deal with coordinates, colors, i.e. values that are naturally bounded, so there's no problem there.\n\nI suppose that the issue is mainly with functions that already have counterparts in clojure.contrib, so maybe drop them entirely?\n. Correct me if I'm wrong, but the majority of Processing functions deal with coordinates, colors, i.e. values that are naturally bounded, so there's no problem there.\n\nI suppose that the issue is mainly with functions that already have counterparts in clojure.contrib, so maybe drop them entirely?\n. ",
    "mathisonian": "Ah thanks for the suggestions. After making those changes I found that my problem was I put `dynamic.clj` and `core.clj` in `$PROJECT_DIR/quil_workflow/` instead of `$PROJECT_DIR/src/quil_workflow/` Thanks for being so responsive!\n. Ah thanks for the suggestions. After making those changes I found that my problem was I put `dynamic.clj` and `core.clj` in `$PROJECT_DIR/quil_workflow/` instead of `$PROJECT_DIR/src/quil_workflow/` Thanks for being so responsive!\n. ",
    "ctrlsave": "btw are we going to be able to use classes in the future?\n. sorry maybe i am being unclear. Basically how can i write a class like I would in processing? \n. btw are we going to be able to use classes in the future?\n. sorry maybe i am being unclear. Basically how can i write a class like I would in processing? \n. ",
    "technomancy": "Thanks for the clarification. I had the nagging feeling I was missing something re: state.\n\nThe approach of working with individual fields and hiding the overall map strikes me as odd; was that something intentional or just something quil inherited from clj-processing? It seems like the current `set-state!` defn and friends don't get you much over just a top-level atom def in your sketch namespace. But I understand needing to not introduce breaking changes, so I can switch to making `:update` use its own independent atom.\n\n> With your approach, you probably wouldn't store stuff in refs, rather you'd just keep replacing vals in a similar way to using loop\n\nI think of it as being more like reduce since it's the return value that's used. Anyway, the only reason it's accepted as an argument to `applet` is so that an initial value can be specified; the change always comes from the `:update` function. Maybe `:init` would be a better name for that?\n. Yeah, I'd expect to just close over an atom if I wanted sketch-local state though. It's easy enough to do and doesn't require learning anything specific to the quil API. But it does sound like we want something other than the existing `:state` field, so I've switched the update-fn to use `:init` instead.\n. I feel now that `:init` might be the wrong thing. Wouldn't it be better to use the return value of the `:setup` function instead?\n. If the draw function can be expressed as a pure function, certain time-based constraints can be implemented as higher-order \"quil middlewares\", such as looping or a sketch that runs for only N seconds. In addition if even things like the height and width are moved to function arguments, middleware which composes multiple sketches together would be easy to implement.\n\n(Leaving this note to myself as a comment here because I'm more likely to remember it if it's here. But of course if anyone wants to run with the idea before I get a chance please do.)\n. Thanks for the clarification. I had the nagging feeling I was missing something re: state.\n\nThe approach of working with individual fields and hiding the overall map strikes me as odd; was that something intentional or just something quil inherited from clj-processing? It seems like the current `set-state!` defn and friends don't get you much over just a top-level atom def in your sketch namespace. But I understand needing to not introduce breaking changes, so I can switch to making `:update` use its own independent atom.\n\n> With your approach, you probably wouldn't store stuff in refs, rather you'd just keep replacing vals in a similar way to using loop\n\nI think of it as being more like reduce since it's the return value that's used. Anyway, the only reason it's accepted as an argument to `applet` is so that an initial value can be specified; the change always comes from the `:update` function. Maybe `:init` would be a better name for that?\n. Yeah, I'd expect to just close over an atom if I wanted sketch-local state though. It's easy enough to do and doesn't require learning anything specific to the quil API. But it does sound like we want something other than the existing `:state` field, so I've switched the update-fn to use `:init` instead.\n. I feel now that `:init` might be the wrong thing. Wouldn't it be better to use the return value of the `:setup` function instead?\n. If the draw function can be expressed as a pure function, certain time-based constraints can be implemented as higher-order \"quil middlewares\", such as looping or a sketch that runs for only N seconds. In addition if even things like the height and width are moved to function arguments, middleware which composes multiple sketches together would be easy to implement.\n\n(Leaving this note to myself as a comment here because I'm more likely to remember it if it's here. But of course if anyone wants to run with the idea before I get a chance please do.)\n. ",
    "nbeloglazov": "So user can use either `update` (update and draw something) or only `draw` (draw something)?  \nDid you consider (may be in IRC) using `update` function as only update? So it doesn't have sideeffects like drawing and should only update current state of the world. And `draw` function only draws this state without modifying it. This way there is a separation between logic and presentation. Every turn first `update` called and then `draw` called. \n. Functional mode was added in 2.1.0. See wiki [article](https://github.com/quil/quil/wiki/Functional-mode-%28fun-mode%29). Thanks for inspiration! \n. Fixed (at least I can't reproduce it) in quil2.0 branch. Also, as I understand, Processing guys strongly recommend to use P3D renderer instead of raw OpenGL. \n. Seems like new jogl version fixed the problem. \n. @samaaron: Most functions for `PGraphics` are the same as for `PApplet` so they can be used. How about adding something like `with-graphics` macro that takes graphics and forms:\n\n``` clojure\n(with-graphics gr\n  (background 255)\n  (line 0 0 10 10)\n  (rect 25 25 5 5))\n```\n\nAnd create `ThreadLocal` variable for current graphics, this macro first sets it and at the end sets null. And all drawing methods check this thread local var first and if it's null they take current-applet and draw on it.\n. Can be closed. See #37.\n. Close? Implemented in #34.\n. Accidentally closed. \nNeed to verify if reproducible in quil 2. \n. Cool! I'll try to reproduce it once quil 2 is released and then close the issue, but good to know that it is potentially fixed. \n. Cannot reproduce on 2.0.0, closing.\n. @samaaron  Yes, I see. I think the only way now is to revert the commit. I'll try to add protocols so all methods from core will be inside protocol. And add 2 identical implementations - for `processing.core.PApplet` and `processing.core.PGraphics`. I hope it will help to avoid reflection. But it will require pretty big changes and refactor almost whole `core.clj`. \n. @samaaron I think it will be good to revert it for now. Should I do it? Or you'll do it?\n. @hafdikra I like the name. I think search results depend on your zone/may be search history. When I google for quil + something relatied I get first 2 or 3 links to clojure's quil. Do you propose to rename whole library that already pretty known?\n. @samaaron do you have ideas how to fix it? I think all examples must have same start point e.g. every example has `defsketch` or function `run` that executes example.\n. This program works in vanilla processing 1.5.1:\n\n``` java\nint x = 0;\nint y = 0;\n\nvoid setup() {\n  size(200, 200);\n  noLoop();\n}\n\nvoid draw() {\n  background(226);\n  x++;\n  y++;\n  ellipse(x, y, 10, 10);\n}\n\nvoid mouseClicked() {\n  redraw();\n}\n```\n\nSo I think it's really a bug.\n. It's mad. The problem is that when loop is active all invocations to `mouseClicked` come from `AnimationThread`, when loop is off invocations come from `AWT-EventQueue-0` thread. In second case empty version of `mouseClicked` from `PApplet` is called instead of our handler. It's really weird because class the same: `quil.applet.proxy$processing.core.PApplet$IMeta$c506c738`. So when same method called on same object depending on current thread different versions are executed. I don't understand how it's possible.\n. I don't think it's processing. It's java and clojure. I extracted `PApplet` from processing and it doesn't contain magic with byte code manipulation. I'll try to extract clean example of this problem later without using processing at all. \n. It seems that problem with mult-arity overloading in proxy: http://stackoverflow.com/questions/13134633/overriding-multi-arity-methods-in-proxy-in-clojure And this article explains the problem: http://kotka.de/blog/2010/03/proxy_gen-class_little_brother.html. There is a solution suggested in the article: replace `proxy` with `gen-class`. I can try to do it and see what happens. @samaaron what do you think?\n. I replaced `proxy` with `gen-class` and it seems to work: I testes on examples. But there is a problem. Current state, applet, graphics and other stuff is stored inside `ThreadLocal` object. When we stop loop with `no-loop` all listeners inside another thread and current state, applet, etc are nil. And app is crashes.We can try replace thread locals with dynamic vars and keep state and other stuff inside applet. Every call to listeners will be placed inside [binding](http://clojuredocs.org/clojure_core/clojure.core/binding#example_770) where we bind current state, applet. What do you think?\n. `project.clj` is fine - it contains the url. The problem is that clojars takes url from `pom.xml` file that is generated by lein before deploying. And url field is missing from `pom.xml` in version 1.6.0. I think 1.6.0 was deployed using cake, not lein. And it seems that cake didn't add url field to `pom.xml`. I suppose if  @samaaron redeploys quil using lein it will be fixed.\n. Fixed in 1.7.0\n. I'm also interested in this question. I was going to start work on porting to 2.0 soon too :)\n. @samaaron what's wrong with current implementation? What do you have in mind so you want to redevelop from the ground?\n\n@vijaykiran I vote for google doc. I think it's easier to collaborate using google docs.\n. @lionandoil can you show an example? Is it some common way to use processing plugins?\n. Reopening as it's not \"fixed\" yet :) And it's one of quil major goals now so let's it be open.\n. As for dependencies: I think you can use jogl and gluegen-rt libraries from their official  repository. This will help you to avoid push manually all jogl and gluegen-rt jars to clojars. How would I do it:\n1. Look which version of jogl and gluegen-rt you need to import:  \n   a. Choose processing version. For example we want to use 2.1.1.  \n   b. Go to http://github.com/processing/processing and go to appropriate tag (press on \"branch: master\" and select tag). For 2.1.1 it would be: https://github.com/processing/processing/tree/processing-0224-2.1.1/  \n   c. Go to `core/library`, download `gluegen-rt.jar` and `jogl.jar` and open them (jars are just zip archives so you rename and open them as zip).  \n   d. Open `META-INF/MANIFEST.MF` and check version. In our example it is: 2.1.4-rc-20140113 for both gluegen-rt and jogl.\n2.  Import jogl and gluegen in your `project.clj`.  \n   a. Add jogamp repository: `:repositories [[\"jogamp\" \"http://www.jogamp.org/deployment/maven/\"]]`  \n   b. Add jogl-main and gluegen-rt-main to dependencies: \n\n``` clojure\n:dependencies [...\n               [org.jogamp.jogl/jogl-all-main \"2.1.4-rc-20140113\"]\n               [org.jogamp.gluegen/gluegen-rt-main \"2.1.4-rc-20140113\"]]\n```\n\nAfter that it hopefully should work and you won't need to upload all gluegen and jogl jars.\nOfficial [jogamp maven instructions](http://jogamp.org/wiki/index.php/Maven) .\n. I've created [quil2.0](https://github.com/quil/quil/tree/quil2.0) branch. Thanks to @tangrammer and @originalsurfmex  I used his `[processing/core \"2.1\"]` jar to avoid all this hustle with leiningen :)  \nI fixed some errors that appeared on my machine when moving to Processing 2.0 like window size wasn't set right, NullPointerException on frame close. Now it should work (at least some examples work!). And cool thing that opengl renderer works fine for me: it didn't work before on my machine (Ubuntu 13, 64bit) on quil 1.6. \n\nSo feel free to try. Now I want to test all function from `core.clj` to check whether they work or not.\n\nI would be glad if anyone helped me. I think there are  several ways to help that I know of:\n- run all examples on your machine on quil2.0 branch and verify that they work fine;\n- check some functions from `core.clj` manually (please discuss with me so we don't overlap);\n- ideally we should have tests. Test would check that functions doesn't throw errors. It's pretty hard to automate \"visual\" validation so let's stick with error validation for now. I can some ideas how we can achieve it. Would be happy if someone want to implement it. \n\nFeel free to leave any suggestion/comments/critique.\n\nNikita\n. Ah, I also meant @originalsurfmex for his processing 2.1 in clojars :)\n. Quil 2.0.0 with support of Processing 2.2.0 is released!\n. I see that you had dynamic vars before and replaced it with thread locals some time ago. What was the reason of this replacement?\n. Processing sources has folllowing code in `size()` method:\n\n``` java\nSwingUtilities.invokeLater(new Runnable() {\n      public void run() {\n        // Set the preferred size so that the layout managers can handle it\n        setPreferredSize(new Dimension(iwidth, iheight));\n        setSize(iwidth, iheight);\n      }\n    });\n```\n\nSo actual `setSize` will be called in other thread and if you call `(width)` or `(height)` from setup fn there is race condition between current thread and swing thread. This case can me manually handled in quil but it will be pretty messy.\n. Yes, I think so. \n. Fixed in quil2.0 branch.\n. Fixed for quil 2.0.\n. I think example from README is this one-liner. To run sketch you need to call `defsketch` and pass at least 2 functions: setup and draw. So example from README already pretty short. What do you mean by \"there's no connecting path between the copy-paste-have-file to the see-pretty-stuff-in-screenshot\"? \n. @ysmolsky \n`defsketch` - yes, it is pretty dumb macro that just calls `defapplet`. But I think it was done it order to call \"private\" macro `defapplet` which is defined in another namespace `quil.applet` which is not exposed in documentation.\n\n`defapplet` - is not useless. It does one pretty important thing - it wraps all functions passed in it to var. It allows to do interactive development which is pretty cool. Consider following example:\n\n``` clojure\n(defn draw []\n  (ellipse 50 50 100 100))\n\n(defsketch my-sketch\n  :size [500 500]\n  :draw draw))\n```\n\nIf I start sketch, then change `draw` to draw `(rect 0 0 100 100)` and finally recompile `draw` function without closing sketch - it will immediately use updated version of `draw`. The same effect can be achieved and without macros using following trick:\n\n``` clojure\n(sketch \n  :size [500 500]\n  :draw #'draw))\n```\n\nBut it is not very user-friendly and we requires long explanation which might be difficult for newcomers in clojure. \n\nPersonally I would recommend using `defsketch` while interactive development and switch to `sketch` function when \"exporting\" your work.\n\nIf you have proposals how we can improve these macros - I would be happy to discuss. \n. Hi Phil.\n\nIt depends on what editor you're using. I'm not sure you can achieve dynamic reloading with `lein run`. Have you tried LightTable? There is a small [tutorial](https://github.com/quil/quil/wiki/Dynamic-Workflow-%28for-LightTable%29) of how to start with Quil and LightTable.\n. I think it might be harder to achieve dynamic reloading from plain REPL than from emacs :)\nIn emacs my workflow is following:\n1. Open file with sketch.\n2. Evaluate the whole file using `C-c C-k`. It will launch a sketch.\n3. Modify functions, e.g. `draw` and reevaluate only this function using `C-c C-e`. After that you should see changes.\n\nNote that you should use `defsketch` to launch sketch if you want to get live reloading. `sketch` might not work.\n. I've just updated the page. It had contained incorrect (I didn't do a good job last time when updated it).\nNow it have new instructions and should reload without creating new window.\nBut I would suggest to try evaluating clojure not in cider REPL but in directly in file via `C-c C-e` keys. Or in LightTable. \n. Closing this long-standing issue. We have few tutorials of how to run Quil in REPL/LightTable and if there is still problems - please ask in google group: https://groups.google.com/forum/#!forum/clj-processing\n. Hi Kyle. \nSorry for delay.\nHave you though about/tried fixing `defapplet` macro so it doesn't wrap size inside `(var ...)`? \n. Thank you for the PR but I decided to avoid wrapping size to `(var)` at all. \n. Nice! Diddn't know that it's possible to get `PGraphics` from applet.\n. @samaaron yes I mentioned it in issue: `.size` doesn't set size - it post runnable on ui thread which change size. So actual size change happens in another thread and you can't be sure it happens before we call `(width)` or `(height)`.\n. @samaaron I can try to \"wait\" until all events in AWT event thread are consumed by posting empty runnable to this method [invokeAndWait](http://docs.oracle.com/javase/6/docs/api/javax/swing/SwingUtilities.html#invokeLater%28java.lang.Runnable%29). But it looks weird.\n. I tried it and worked. Check #65.\n. @samaaron hi! What is you current plans for release? It's been 2 months since last commit. What do you need for release? I can help. Or release SNAPSHOT version so we can use it for now.\n\nThank you \n. Anyone alive here? :) Any plans for future of quil?\n. Version 1.7.0-SNAPSHOT is available on clojars. Everyone is welcome to can with it and leave feedback/report problems.\n\nNikita\n. Released!\n. What exactly happens? It does work fine for me.\n. I have #24 error sometimes. It's not what you are talking about, right?\n. Can you test without this pull request? It may be a deadlock caused by it.\n. What is your environment?\n. `:on-close` handler is available in `1.7.0-SNAPSHOT` version that can be used to implement exit on close behaviour. This should work:\n\n``` clojure\n(defsketch my-sketch\n  ...\n  :on-close #(System/exit 0))\n```\n\nIs it ok?\n. I decided to add `:exit` option for `:on-close` handler so user doesn't need to know about `(System/exit 0)` and can just pass `:exit` like this:\n\n``` clojure\n(defsketch my-sketch\n  ...\n  :on-close :exit)\n```\n\nSo I reopen the bug until it's done. \n. Implemented as `:features [:exit-on-close]`\n. Hi\nI've investigated this issue a bit and got following results: it's processing's issue, not quil's. For some reason in `fill` method is always expects color in ARGB format so if you want opaque color you have to set highest bits to FF: `0xFF0000FF` instead of `0x0000FF` (blue color). So if it were java adding explicit alpha part to color would be sufficient.\n\nBut we are using clojure here :\\\n\nThe problem is following - value `0xFF0000FF` is different in java and clojure:  \njava: `0xFF0000FF` = -16776961 (int)\nclojure: `0xFF0000FF` = 4278190335 (long)\n\nQuil tries to convert all values passed to `fill` method to int using `int` function. But clojure's `int` function doesn't allow overflows, so it throws exception if value is greater than max int (it's our case).\n\nI found following ugly workaround: you can convert `0xFF0000FF` to int using `.intValue` method of `Long`:\n\n``` clojure\n(fill (.intValue 0xFF0000FF))\n```\n. Thanks, it does solve the problem! I was wrong and it was quil's fault. Thanks for suggesting `unchecked-int`.\n. Hi Bartek\n\nIt should work out of the box if you're using `defsketch` for creating sketches. If you're using `sketch` you can try following:\n\n``` clojure\n(defn draw []\n    ...)\n\n(sketch :draw (var draw))\n```\n\nCheck clojure doc on [vars](http://clojure.org/vars). It may help a little.\n. Weird. It should work with `defsketch` even without `(var draw)`.\n. It looks like answer is \"no\". Closing question.\n. Hi. Sorry for delay.\nThank you for the pull request!\nCould you please add few bureaucratic improvements:\n1. Squash all commits to one. [Tuorial](http://blog.steveklabnik.com/posts/2012-11-08-how-to-squash-commits-in-a-github-pull-request).\n2. Order functions in alphabetic order: there are **a lot** of functions in `core.clj` at it becomes important for them to be ordered.\n\nThank you,\nNikita \n. Hi. You can try to imitate meta from other functions. I will order other functions in`core.clj`. As for updating pull request - just close this one and create new one. I'm not sure you can 'clone' pull request.\n. I haven't worked with processing.video but still can try to help. Is there any particular problems you're facing?\n. Hi Patrick\nAre you still up to this task? I can help you if you want.\n. @tangrammer, @phiat  can you give link to any working example, no matter how hacky and ugly it looks like?  \n. As I see, the main problem here is this native libs that need to added to resources folder. But we want to pack them into jars so they can be easily included in project.clj... \n@tangrammer, did you try to pack all this `lib/macosx64` resources into a jar, install it into local lein repo and include it as dependency?\nI suppose it should be possible to do something like this. Though I'm not sure how. Could you check it, if you have time for it? \n. Cool. So it does work from jar, right? \n. Few other points:\n1. I saw you created `IMovie` interface and `quil.Applet` implemented it. Why not just add `movieEvent` directly to `quil.Applet`?\n2. Once we figure out how to pack native libs into jars so they work, we could use other libs `jna.jar` and `gstreamer-java.jar` from maven. I hope jar available on maven has same version which is used by Processing.\n3. The only thing left is `video.jar`. I think we can uppload `video.jar` along with `video-native.jar` to clojars under `quil` group.\n. I haven't worked on it since then. Would be happy if someone continued working on it. I can help with native resources if needed, as I had fun while preparing opengl deps for Quil so my experience might be useful.  \n. Michael, I'd suggest to try and make it work for you setup using whatever hacks you might need and then we can have a look and see how to make it general and compatible. I you already have a setup which does it - please post a link here.\n. Took a look at processing.video. I think a jar to clojars is pretty straightforward. The hard part is how to serve libraries (non-java libraries). In my Processing/libraries/video folder I see 97mb of libraries for Windows and MacOS. Uploading them to clojars doesn't seem like a good solution. Ideally there should be something like a script that downloads them to your computer when you \"enable\" video for quil. If lein had something like post-dependency-included-hook that would do it. But I don't know how to do it. \n. I've added your code to quil2.0 branch. Thank you! \n. Thank you!\n. Hi. Could you add full example (check `examples` folder for examples)?\n\nThank you, \nNikita\n. Cool. Thank you!  \nI think `require-bindings` means that function depends on current surface (it should be invoked inside applet like in `draw` or `setup` function) so they should be  `true`. I'll update them.\n. Hi George, thank you for heads up.  \nPersonally I don't see much point in `textWidth(char)` method when we have `textWidth(String)`. So for now I'll delete it. If someone really needs it we can add later. I think in clojure character are less often used that in java.\n. Fixed by #168.\n. Thanks. I'll check if it reproduces in quil 2.x branch.\n. Yep. As you said it was fixed in Processing 2.0 and it works find in quil2.0 branch.\n. Hi Max\n\nYou can use [load-file](http://clojuredocs.org/clojure_core/clojure.core/load-file) function to load file that is not in classpath. After this you should be able to use `docs.cheat-sheet-gen` namespace.\n. Something like:\n\n``` clojure\nuser=> (load-file \"docs/cheatsheet/cheat_sheet_gen.clj\")\nuser=> (docs.cheat-sheet-gen/bla-bla-bla)\n```\n. Hey, Chuck. Any success on cheat sheet?\n. Docsite now has links to processing page for almost all functions! \nCheck it here: http://quil.info/shape.html#3d-primitives\n. 50% of all functions covered.\n. Finally we did it! Thanks @norgat for helping with final bits of snippets.\nThere are still some functions left to be covered but they're mostly not easy to test in snippets and require special treatment.  \nBut I think this issue can be closed. As a result I found a few bugs in quil during adding snippets so they were worth it.\n. Quil aot-compiles some of it code and if we move quil to 1.6.0 than it won't work under 1.5.1. That's why we can't move 1.6.0 and have to use 1.5.1. We still should test it under 1.6.0 though. I can't think of nice way to do it because we need to test quil compiled by clojure 1.5.1 but in a project that uses 1.6.0. It would be nice if we could somehow set up `project.clj` to allow us to do it. \nAny ideas welcome.\n. It will work in 1.6 and 1.7, but will fail on 1.5. I agree that we can probably drop support of 1.5 now.\n\nI'd love to migrate to 1.7 and start using reader conditionals instead of cljx, but I don't think it is feasible now as it means breaking 1.6. \n. Which version of quil are you using? I suspect that `regitserMethod` was added in Processing 2 therefore you need to use Quil 2 which is not released yet, but you can try SNAPSHOT version: https://clojars.org/quil/versions/2.0.0-SNAPSHOT \nActually `registerMethod` is even used in Quil 2: https://github.com/quil/quil/blob/quil2.0/src/quil/applet.clj#L287 so it is definitely possible to call this method. \n. Updated! \nSnippet tests actually found an error caused by migration so they're not useless after all. Hurray!\n. Hi Yury\n\nNo, unfortunately there is no jar with sources that contains exactly the same code that was used to compile `processing-core` jar. But you can browse through processing github repo, specifically check version 1.5.1 (the one that was used for quil 1.7.0): https://github.com/processing/processing/tree/processing-1.5.1\nBe aware though that sources for 1.5.1 on github may be slightly different from the ones that were used to compile jar. But in most cases they should be the same.\n\nDo you have any other questions?\nPlease close the issue once they are resolved. \n. Hi\n\nI believe it how live mode works in lightable. It reevaluates the whole tab on each change, that is why  new sketch starts on each change. So it is not quil bug but rather incompatibility of `defsketch` and live mode. There are few ways to fix it:\n\n1 - You can disable `defsketch` after you launched first window by adding `#_` before `defsketch`:\n\n``` clojure\n#_(desketch bla-bla\n  :title \"Bla-bla\"\n  :draw draw\n  :size [100 200])\n```\n\nWhen you need to restart sketch - you close existing, remove `#_`, new sketch launches and then you add `#_` back.\n\n2 - You can change workflow to not use live mode. That is actually how I prefer to work. Initially I open tab and evaluate everything using `Ctrl+Shift+Enter` hotkeys. It launches new sketch. When I need to modify some part of code, e.g. `draw` function, I modify it and reevaluate only it by `Ctrl+Enter` hotkeys.\n\nHope this helps.\n. Cool. Please close the issue once you're satisfied with results.\n. Hi\nCould you please repost your question to quil mailing list: https://groups.google.com/forum/#!forum/clj-processing ?\nMailing list is better place for such questions because it is not really an issue with quil but rather \"How to use\" question.\nClosing this issue.\n\nThanks!\nNikita\n. Great, thanks!\n. Related thread on jogl forum:\nhttp://forum.jogamp.org/Creating-an-executable-jar-file-td3011748.html\n\nAnd FAQ section:\nhttps://jogamp.org/wiki/index.php/JogAmp_JAR_File_Handling\n. Fixed by creating fat jar for jogl and gluegen-rt libraries. More details how it was done here: https://github.com/quil/quil/wiki/Dev-notes#updating-jogl-and-gluegen-rt-jars\n. :require/:refer is preferred form over :use. See this question http://stackoverflow.com/questions/10358149/in-clojure-1-4-what-is-the-use-of-refer-within-require\n\nThank you for noticing contradiction! I will update README.\n. Can you split it to 2 different pull different pull requests? \n. And general question regarding `:on-close`.\nWhy did you decide add new option `:exit-on-close` instead of adding special value for `:on-close`?\n. Great, thanks!\n. Question about snippet: why `(image orig 0 0)` draws nothing? \n. In your project you misspelled `:rendered :pdf`. Should be `:renderer :pdf`. After I fixed it, sketch created pdf file with a diagonal line. So I suspect it works fine.  \n`processing.pdf` doesn't provide any new api - it just provides `PGraphicsPDF` class which is created automatically by Processing itself and we don't need to wrap/call anything.\n`processing.pdf`: https://github.com/processing/processing/blob/master/java/libraries/pdf/src/processing/pdf/PGraphicsPDF.java\n. Well, someone may want to call `.nextPage` on pdf graphics object. But I doubt that we should create special wrapper for that (at least for now). Our current goal - preserve same PDF behaviour as in Quil 1.7.0.\n. Cool, thanks!\n. Thanks!\n. Hi Dan.\nProcessing has beta-version of retina support: http://wiki.processing.org/w/Supported_Platforms#Retina_Support . You can use it in quil by using `processing.core.PGraphicsRetina2D` as renderer. Try following:\n\n``` clojure\n(defsketch sk\n  :title \"Retina support\"\n  :draw draw\n  :size [500 500]\n  :renderer \"processing.core.PGraphicsRetina2D\")\n```\n. Forgot to add - it is available only in Quil `2.0.0-SNAPSHOT` and not in released `1.7.0`.\n. Not sure. Looking at Processing docs they mention only support 3.0 which is still in alpha: https://github.com/processing/processing/wiki/Supported-Platforms#retina-support \nI don't know if older ways still work.\n. Wow. That's embarrassing. Thanks, will fix it.\n. Weird. Real link actually works:\nhttp://cloud.github.com/downloads/quil/quil/readme-oh-so-many-grey-circles.png\nBut on github page it is being replaced with:\nhttps://camo.githubusercontent.com/abbf97c0ede90ea785edbd2b27c5f43c3488a6a1/687474703a2f2f636c6f75642e6769746875622e636f6d2f646f776e6c6f6164732f7175696c2f7175696c2f726561646d652d6f682d736f2d6d616e792d677265792d636972636c65732e706e67\nwhich doesn't work. Probably something broke on their site. \n. Fixed.\n. Checked on my machine - no flickering on linux. \nCan you try it again with quil 1.7.0 and say if flickering remains?\n. Another question: what renderer are you using?\n. Shaders were added in processing 2.0. Are you using them? Or may be you're using some library which uses them? If no - try to clean project `lein clean` and then try again. \n. If flickering is not present on 2.0.0 then I would close the issue. \n. I believe the reason why we see the lag is that point is drawn inside `draw` function which is invoked repeatedly independent from `mouse-moved` callback. For example.\n1. On millisecond X `mouse-moved` was called and new x and y were saved in atom.\n2. On millisecond X+100 `draw` was invoked, which drew the point in old x and y position. In the same time you already moved mouse cursor away from the old point. \n\nThe same behaviour you can see in Processing itself:\n\n``` java\nint x;\nint y;\n\nvoid setup() {\n  size(200, 200);\n  smooth();\n}\n\nvoid draw() {\n  background(125);\n  strokeWeight(20);\n  stroke(10);\n  point(x, y);\n}\n\nvoid mouseMoved() {\n  x = mouseX;\n  y = mouseY;\n}\n```\n\nAs for how to solve it - you can draw point inside `mouse-moved` itself. This will make the lag much less noticeable. \n. I don't know. \nYou can check current frame using [current-frame-rate](http://quil.info/environment.html#current-frame-rate) function. I guess it might be less than 60fps in actual sketch. You can draw current frame rate on a screen, for example. \n. Have you tried drawing it on the screen instead of printing to console? I think console operations may slow down the whole function.  \nThinking about it - it would be nice to have some standard way to measure sketch \"speed\". Food for thoughts :)\n. Closing this issue. Looks like the problem with renderers in processing itself. If you think that there are things to fix in Quil itself - feel free to reopen.\n. Have you tried `:p2d` renderer? OpenGL renderer should not be used directly unless you know why you need it (at least that what I've read somewhere on processing website or source code). p2d internally uses OpenGL so it should be fine. \n. Ah, so you used 1.7.0 before? :)\n. Ah, stupid me. Should read reports more carefully. Closing the issue.\n. Quil 2.0.0 has been already released. Here is release notes: https://github.com/quil/quil/blob/master/RELEASE-NOTES.md\n. Have you run `lein test`?\n. Cool. Thanks! \n. Hi Christopher\nI'd suggest to check how it is done in inkwell library, which I mentioned above. And then try to implement something similar.\nNikita\n. Yay!\n. Thanks! \n. Will test it next week when I get access to 2 monitors and then release.\n. Hi Valentin\n\nWhat jdk are you using? Are you sure there are no other processing jars/classes on classpath? Did you try switching to clojure 1.5.1? And finally, what does `lein deps :tree` return?\n. Good catch. Thanks! \nI think we can have quite a few of such outdated notes. I don't think anyone recently checked that our docstrings are up-to-date compared to Processing ones.\n. Cool. Thanks!\n. Please add description, stating how to run the tests.\n. Here, to the pull request.\n. Please merge your branch with master branch. Currently there are conflicts.\n. We can update wiki and templates once 2.2.2 released. \n. Fixed by https://github.com/quil/quil/commit/6aee3513b9c214b1b7b4cefa1241440482d310c0\n. So after this PR is merged command for testing cljs will look something like this:\n\n``` shell\nlein with-profile test-1.6.0 do compile, ring server\n```\n\nRight?\n. Thanks!\n. Could you also print exception stacktrace?\n. Great. I like such bug fixes :)\n. We don't need to expose packing/unpacking to the user. I would suggest to do something like this:\n\n``` clojure\n(defn pixels []\n  (let [proc (current-graphics)]\n    (.loadPixels proc)\n    (let [pix-array (.toArray (.-pixels proc)]\n      (set! (.-stored-pix-array proc) pix-array)\n      pix-array)))\n\n(defn update-pixels []\n  (let [proc (current-graphics)\n        pix-array (.-stored-pix-array proc)]\n    (.set (.-pixels proc) pix-array)\n    (.updatePixels proc)))\n```\n\nI haven't tested the code, just wanted to show the idea. User doesn't need to know about internal packing/unpacking - it's even hidden from us. And behaviour is the same as clj Quil.\n. User don't need to work with `imageData`. We call `Processing.pixels.toArray()` method which returns packed array of ints. Each int is a color. We give that array to the user. He modifies it and then he calls `update-pixels`. In `update-pixels` we set `imageData` to be content of the array using `Porcessing.pixels.set(array)` method. Packing and unpacking is done for us by `pixels.toArray` and `pixels.set` methods.\nCheck the code I provided. It should do it. \n. Thanks!\n. Hi Alexei. \nAs Maksim mentioned - you should use `background` function for that. I see that you already call it - but only in `setup`, which is called once. You should call it in `draw` instead. Example:\n\n``` clojure\n(defn draw\n  (q/background 255)\n  ; all other drawings here\n  )\n```\n\nAs side-note, you may want to check [functional mode](https://github.com/quil/quil/wiki/Functional-mode-%28fun-mode%29) middleware. It helps you to handle the state of the sketch. \n. Thanks. I've fixed it. Feel free to fix it yourself next time - wiki is open for everyone to edit. \n. Thanks!\n. Has anything changed? Why wasn't the test enabled for cljs initially?\n. Weird. It would be good to know how it was fixed. But probably that's not so important at the moment..\n. Hi Bobby\nSemantics of `pixels` function was changed a bit. Now each invocation of `pixels` calls `.loadPixels` internally so you cannot call it for updating every pixel. You should save an array you got from `pixels` and update it:\n\n``` clojure\n(let [pxs (pixels)]\n  (doseq [...]\n    (aset-int pxs (+ x (* y (width))) (color bright))))\n(update-pixels)\n```\n. Thanks, I'll check if it works with Java2D and update the docs. Reopening bug for now so I don't forget about it.\n. Thanks a lot!\n. Hi Stuart.\n`map` returns a lazy sequence so invocations of `q/ellipse` are not evaluated until you request it explicitly. In your case you're just calling `map` and not using result. `map` is used when you need to transform some collection and get new collection as the result. In you case you want to perform perform side-effect operations. For that you should use [`doseq`](http://clojuredocs.org/clojure_core/clojure.core/doseq):\n\n``` clojure\n(doseq [point state]\n  (q/ellipse (:x point) (:y point) 10 10))\n```\n\n Alternatively you can force the result of `map` to be evaluated by using [`dorun`:](http://clojuredocs.org/search?x=0&y=0&q=dorun&lib=clojure_core)\n\n``` clojure\n(dorun (map #(q/ellipse (:x %1) (:y %1) 10 10) state))\n```\n\nBut I prefer `doseq` as it more explicitly shows that I'm doing some side-effecting here.\n\nIt is quite common confusion when dealing with `map`, so you should be aware of it. Consider this artificial example:\n\n``` clojure\n(defn load-users [ids]\n  (with-open-database [db (get-db)]\n    (map #(load db %) ids)))\n```\n\nThis function does following:\n1. Open database.\n2. Creates lazy seq containing specified users.\n3. Closes databases.\n4. Returns the sequence.\n   But the problem is that users are not loaded as you get lazy sequence. When you try to get first element of the sequence, `(load db some-id)` is be invoked but the database has been already closed and you get an exception. So here you have to force evaluation of all elements in the sequence using [`doall`](http://clojuredocs.org/clojure_core/clojure.core/doall): \n\n``` clojure\n(doall (map #(load db %) ids))\n```\n\nRule of thumb for me when I get weird exceptions is to try to force evaluate all sequences and see if it works.\n\nHope this helps. If it solved your problem - please close the issue.\n\nThanks,\nNikita \n. Daniel, did Maksim's answer resolve your issue? Feel free to ask, if you have more questions or close the issue if you're satisfied.\n. Closing this issue. Feel free to reopen if you still have problems.\n. Yes, please update version to `2.2.3-SNAPSHOT`.\n. Nice. Can you squash all commits to a single one so intermediate commits are not visible? http://eli.thegreenplace.net/2014/02/19/squashing-github-pull-requests-into-a-single-commit/\n\nThanks\n. Hi Rasmus\n\nCan you provide crash logs? Who knows, they might help. It would be cool too if you tried running p3d sketch in Processing itself: http://processing.org/ It should be pretty simple, just download and run. I believe they even include samples so you don't need to write your own sketch.\n\nCould you also try running the sketch via `lein run`? You might get more information as in cider messages are printed in different buffers and it is easy to miss something. \n. I think there is little we can when \"A fatal error has been detected by the Java Runtime Environment\". I don't think you can catch and ignore it, jvm simply shuts down, you cannot catch error and ignore it.\n\nThanks, Rasmus. Closing the issue.\n. Cool, thanks!\nI wonder what is the reason of so many repetitions.\n. Good catch. Thanks! \nI uploaded snapshot version that includes your fix: https://clojars.org/quil/versions/2.2.3-SNAPSHOT\n. Good. Test went well.\n. Hi Giuseppe. I think I saw similar issue on macos. The problem was that\nquil creates window with the sketch, but it is hidden, not focused. Can you\nlook through all opened windows and make sure that quil is not there?\n\nThanks,\nNikita\n\nOn Sun, Nov 30, 2014, 17:41 Giuseppe Capizzi notifications@github.com\nwrote:\n\n> This is my Java version:\n> \n> [~] java -version\n> java version \"1.7.0_45\"\n> Java(TM) SE Runtime Environment (build 1.7.0_45-b18)\n> Java HotSpot(TM) 64-Bit Server VM (build 24.45-b08, mixed mode)\n> \n> I'm in Mac OS X 10.9.5.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/quil/quil/issues/145#issuecomment-64990909.\n. You can also try using older versions of quil, e.g. 1.6. There were some refactorings made in 2.0 and I'm thinking whether they might have affected it.\n. Just tried on macos. As I said it creates sketch but it is in another window and you might need to switch to it if you're running emacs/console full window. Please verify that it works for you.\n. It definitely should be fixed, but I haven't found any ways to bring sketch to front. Glad to hear any ideas of how to fix it. For now I'll add comment in wiki saying that fullscreen terminal is not very friendly to sketch.\n. Updated FAQ to mention the problem: [link](https://github.com/quil/quil/wiki/FAQ#i-cannot-see-sketch-on-os-x)\n. I'll leave it open for now. Thinking about adding info message in console when you start sketch on OS X. \n. Decided against having message in console. Might be too annoying to see it each time sketch is started. \n. Hi Navin\njre-headless is a version of jre that doesn't have any graphics component and quil requires these components in order to show animations. So you have 2 choices:\n1. Install full version of JRE that includes graphics components.\n2. Use Quil on ClojureScript - it doesn't require graphics stuff from JRE because it only compiles cljs code to js. And then you run the sketch from a browser.\n\nI would recommend 1 because regular quil supports live reloading and generally it is easier to work with it.  \n. Cool. Thanks! Closing the issue.\n. What command are you using to start sketch? Does it really return nil or something like `#<Applet quil.Applet[panel0,0,0,500x300,layout=java.awt.FlowLayout]>`? \nThere is an issue with osx that sketch window is started in background, check #145 \n. Closing this issue. Feel free to reopen if you still have problems.\n. Hi Louis\n\nBy user painting a picture on the display you mean using some third party software like paint, photoshop and your program will read it from the screen in realtime? If so, I don't think it is possible to achieve with Quil/Processing, as it seems quite low-level and very OS-specific. \n\nOn the other hand if you want to create a sketch where user can draw (and you implement draw logic like mouse handlers and so on) then you definitely can read this display data. \n. Yes, pixels should do the work. Don't forget that to after you changed pixels array you should call [`update-pixels`](http://quil.info/api/image/pixels#update-pixels) to apply the changes.\n. Hi Thorsten\n`java.awt.HeadlessException` usually means that JDK you're using doesn't have components for dealing with graphics, which is essential for Quil. Can you check you JDK version? And which OS are you using? Also take a look at #146, which deals with the same issue.\n. Hi Timur\n\nQuil provides only primitives for drawing figures, it doesn't provide any modeling elements, you have to implement them yourselves. I usually represent elements as simple maps and implement functions that take this maps and draw object using Quil functions. This also allows easily extend my elements with additional data as they're simple maps and I can freely add new fields. \nIf you want, you can provide your current code and I could try to help adding dragability to it.\n\nNikita\n. Hi Kaiyin\n\nQuil doesn't provide tools to render TeX equations. You can use [JLatexMath](http://forge.scilab.org/index.php/p/jlatexmath/) to render equations into png file. If you want to embed it into Quil sketch you can then simply render result png file using [load-image](http://quil.info/api/image/loading-and-displaying#load-image)/[image](http://quil.info/api/image/loading-and-displaying#image) combination. JLatexMath is present in maven so it is easy to include into leiningen project.\n\nNikita\n. Closing issue. Feel free to reopen if you have other question or ask in [google group](https://groups.google.com/forum/#!forum/clj-processing)\n. Hi Timur\n\nTake a look at [rect](http://quil.info/api/shape/2d-primitives#rect) method which takes 5 arguments. Last argument is corner radius. Also you can use google group [clj-processing](https://groups.google.com/forum/#!forum/clj-processing) for similar questions. It is usually used to discuss implementation questions.\n\nThanks,\nNikita\n. Hi David\n\nDoes youi file has -main function? If you specify :main option in\nproject.clj file the namespace must have -main function. Check this:\nhttps://github.com/technomancy/leiningen/blob/master/sample.project.clj#L196\nOr more quil-specific instructions for building runnable jar:\nhttps://github.com/quil/quil/wiki/Runnable-jar\n\nNikita\n\nOn Wed, May 6, 2015 at 2:49 PM David Siah notifications@github.com wrote:\n\n> Hi I have the simple hello-quil example working however I recieve a\n> bizarre error when I run the lein run command. I did add the :main as\n> \n> :main hello-quil.core\n> \n> and I also added\n> \n> [quil \"2.2.5\" :exclusions [org.clojure/clojure] ]\n> \n> because lein pulled down a bunch of different versions of clojure\n> previously and recommended that add that exclusion.\n> \n> $ lein run\n> Exception in thread \"main\" java.lang.Exception: Cannot find anything to run for: hello-quil.core, compiling:(/private/var/folders/r_/v1q42f254450q9lz8ty2zyc80000gn/T/form-init8517717259846406503.clj:1:124)\n>     at clojure.lang.Compiler.load(Compiler.java:7142)\n>     at clojure.lang.Compiler.loadFile(Compiler.java:7086)\n>     at clojure.main$load_script.invoke(main.clj:274)\n>     at clojure.main$init_opt.invoke(main.clj:279)\n>     at clojure.main$initialize.invoke(main.clj:307)\n>     at clojure.main$null_opt.invoke(main.clj:342)\n>     at clojure.main$main.doInvoke(main.clj:420)\n>     at clojure.lang.RestFn.invoke(RestFn.java:421)\n>     at clojure.lang.Var.invoke(Var.java:383)\n>     at clojure.lang.AFn.applyToHelper(AFn.java:156)\n>     at clojure.lang.Var.applyTo(Var.java:700)\n>     at clojure.main.main(main.java:37)\n> Caused by: java.lang.Exception: Cannot find anything to run for: hello-quil.core\n>     at user$eval5.invoke(form-init8517717259846406503.clj:1)\n>     at clojure.lang.Compiler.eval(Compiler.java:6703)\n>     at clojure.lang.Compiler.eval(Compiler.java:6693)\n>     at clojure.lang.Compiler.load(Compiler.java:7130)\n>     ... 11 more\n> \n> Thanks\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/quil/quil/issues/153.\n. Quil provides 2 modes: \n1. Regular one, when you handle state changes by your own. In that mode `draw` function doesn't take any arguments and there is no `update` function.\n2. fun-mode, which is [functional mode](https://github.com/quil/quil/wiki/Functional-mode-%28fun-mode%29). It is enabled by adding `fun-mod` middleware to list of middlewares when you create a sketch. In that mode `draw` has to take a `state` argument. And also you can provide `update` function which updates the state on each tick.\n\nYou have to be careful and have correct version of `draw` depending on which state you're using. In your case above you're creating 2 sketches at the same time (which is probably wrong, I think you need only the sketch in `-main`). You need to figure it which mode you want to use and then use correct mode in the sketch inside `-main`.\n\nI think documentation is correct. Confusion comes from the fact that `lein new quil bla` generates a new quil project with default sketch which uses `fun-mode`, while \"runnable jar\" tutorial uses regular mode. \n. Good point, thanks for the suggestion! I'll add it this week. Or you can do it, if you want. Should not be hard to do. \n. Thanks for fixing.\n. Great. Thank you! \n. Can you provide an example? \nI have feeling that the answer will be \"it is limitation of processing.js\" which quil uses under the hood.\n. `blend-color` was indeed broken! Thanks for clear and concise reproducible test case, it was very helpful. \n\nAs for transparency - looks like we pass transparency to processing js all the way down to WebGL calls, but for some reason it doesn't work. I'd say it's something to do with processing js. Also saw this post: https://groups.google.com/forum/#!topic/processingjs/h2y2Aph89E4 Seems like other people having troubles with transparency in 3D too.\n. Closing the issue. If you have any other questions/ideas - feel free to reopen. \n. I pushed to clojars version 2.2.6-SNAPSHOT which contains the fix. \n. Hi Mika\nCurrently clojurescript version of quil doesn't have built-in support for live reloading. But I think you can do it pretty easily yourself. Try wrapping `draw` into anonymous function:\n\n``` clojure\n(q/defsketch my-sketch\n  :host \"canvas\"\n  :draw #(draw)\n  :setup setup\n  :size [300 300])\n```\n\nThis quil will always be calling `codejam-practice-solutions.core/draw` and reloading should work. \n. Please say if it helps. I don't use figweel or any other tool for live reloading of clojurescript so I can't check. If it works - we probably should include it into quil itself. \n. Great. I'll add it to quil itself.\n\nOn Fri, May 29, 2015, 09:49 Mika Vilpas notifications@github.com wrote:\n\n> Yep, sure enough, your method works perfectly - wrapping the function\n> calls in an anonymous function allows them to be reloaded like everything\n> else with figwheel. Thank you!\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/quil/quil/issues/157#issuecomment-106869058.\n. Mika, could you try version 2.2.6-SNAPSHOT? I added live reloading to clojurescript version and would be glad if you tested to make sure it works. \n\nThanks! \n. Cool, thanks for confirmation. I released 2.2.6 which contains the changes.\n\nOn Fri, Jun 5, 2015 at 8:21 AM Mika Vilpas notifications@github.com wrote:\n\n> Hi again, I finally got a chance to try this out. It seems to work in\n> 2.2.6-SNAPSHOT right out of the box. :)\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/quil/quil/issues/157#issuecomment-109325973.\n. For teaching purposes you can also try ClojureScript version of Quil. Since 2.2.6 quil supports live reloading if you're using plugins like figwheel to dynamically reload code as you modify it. This way there shouldn't be any macos-specific surprises as you'll be using chrome/firefox/safari which Quil equally supports. \n. Hi Andrea\n1. Agree, it is quite confusing that in cider all exception stack doesn't go to repl buffer. Actually it goes to another buffer `*nrepl-server*`. I believe if you switch to that buffer you'll see the stacks. For debugging purposes you can use [pause-on-error](http://quil.info/api/middleware#pause-on-error) middleware. Actually it was inspired by the inkwell library your mentioned. There is an open issue for redirecting stack traces to repl buffer [#115](https://github.com/quil/quil/issues/115), but doing so hurts performance a little bit so I don't want to enable it by default. I'm thinking about adding it to the `pause-on-error` middleware.\n2. Didn't understand the second question. Can you elaborate on the workflow you're thinking about? What should it draw and how do you want to interact with the sketch? \n. 1. Yes, it is still the same issue. Draw/update and other functions run in separate thread and output from that thread doesn't go to repl but to `*nrepl-server*`. \n2. Usually people clear the sketch on each frame and redraw everything. But if you want - you can clear sketch only when needed and each frame will be adding new shapes, thus avoiding needless redrawing. I did it for drawing trees recently: when I drew branches I didn't clear older branches so that at each point of time I had to draw only new branches, which drastically improved performance. \n. Closing this issue. @AndreaCrotti, if you have additional question feel free to reopen this issue or ask on [clj-processing](https://groups.google.com/forum/#!forum/clj-processing).\n. Looks good. `reductions` is definitely more appropriate here. Thank you!\n. Seems like it is issue of processing itself: they don't check whether noFill is set when drawing text. Added the check in Quil. @Rorschach22, thanks for reporting!\n. Hi Abel. \nI think if you call `(redraw)` anywhere in listener - it should be fine. It should redraw sketch using new state after handler is finished. It works like this:\n\n``` clojure\n\n(defn mouse-moved [state event]\n   (redraw) ; mark sketch to be redrawn on next iteration\n   (let [new-state ...]\n      new-state))\n\n; next iteration - 'redraw' flag is true\n; redrawing sketch using new state and set flag back to false\n```\n. Closing this issue. @abelnation i, if you have additional questions feel free to reopen this issue or ask on [clj-processing](https://groups.google.com/forum/#!forum/clj-processing).\n. Hi Nathan\n\nYes, I believe the best way to draw squiggle is to use `mouse-moved` or `mouse-dragged` events. And \"previous point\" should match current point of last polled location. Here is an example of a sketch that draws connecting line from mouse-dragged event: \nhttp://quil.info/sketches/show/8FoquKaDzP (you can run it from the browser)\n\nAlso if you want to save coordtinates of the squiggle - you can simply have a collection of all points in state and append a new point on each mouse-dragged event. In `draw` function you simply draw squiggle using all points:\nhttp://quil.info/sketches/show/LjeyT85ye8\n\nIn both cases I don't see gaps between lines and everything looks quite smooth. Is it possible that there is a bug in your implementation? Like if you in `mouse-dragged` event you store current and previous points to state and `draw` draws a line between them . What happens if `mouse-dragged` called twice before `draw` is called? \n. Glad I could help! Closing the issue. Feel free to reopen it if you have additional questions or ask on \"clj-processing\" google group.\n. Thanks!\n. Yes, I believe the main reason behind not adding `createShape` is that Quil doesn't have API for working with PShape object. Though you still can access them via java interop:\n\n``` clojure\n(let [shape (.createShape (q/current-graphics))]\n  (doto shape\n    (.beginShape)\n    (.noStroke)     \n    ...))\n```\n\nSo working with shapes is totally possible but in not a very clojury way. Pull requests with adding API (may via new namespace) for working with shapes is welcome! \n\nAs for `vertex`, yes it was designed to work with current-graphics (either applet instance or custom graphics object), but I think you can also use it with shape:\n\n``` clojure\n(q/with-graphics my-shape\n  (q/vertex 1 2 3)\n  ...))\n```\n. I think the reasons was that no one thought it was important enough to work on it. So one can say it is laziness :)\n. Same issue was recently raised in clj-processing group: https://groups.google.com/forum/#!topic/clj-processing/2OJNJUo507w The answer is yes, quil will be migrated to Processing 3. As for actual work, I haven't done anything yet. \n\nAs for estimates I'd say it shouldn't be very hard: I don't think they changed public API much, so most function will stay unchanged. The most fun part will be in quil.applet namespace where we create PApplet and access not so public methods which probably changed. \n\nPersonally I'm planning to do it in following way:\n1. Use Processing 3.0 from pure clojure without quil to create simple empty applet. Just to see if the way to create applets from code has changed. \n2. Update quil `project.clj` to use processing 3 and try to create simple applet from quil. Fix all bugs in quil.applet.\n3. Run tests which exercise all public function in quil.core and fix all broken functions, if any. Check if we need to add new functions.\n4. Check that creating uberjar still works (especially with 3D). \n\nAny help welcome!\n\nI'll keep this bug as main for Processing 3.0 migration.\n. Started today. Progress can be tracked in https://github.com/quil/quil/tree/processing3 branch. Also to have some fun I decided to use this issue and report migration progress here. \n\nSo I started with simple clojure program that uses raw `processing.core.PApplet`. High level API didn't change much. Here is the program: \n\n``` clojure\n(ns proc3.core\n  (:import processing.core.PApplet))\n\n(let [applet (proxy [PApplet] []\n               (settings []\n                 (.size this 200 200))\n               (setup []\n                 (.background this (int 0)))\n               (draw []\n                 (.stroke this 255)\n                 (when (.-mousePressed this)\n                   (.line this\n                          (.-mouseX this) (.-mouseY this)\n                          (.-pmouseX this) (.-pmouseY this))))\n               (exitActual []))]\n\n  (PApplet/runSketch (into-array String [\"Bla\"]) applet))\n```\n\nThe main (only?) difference with processing 2 that `(.size)` method has to be called inside new `PApplet.settngs` method and not from `PApplet.setup`. \n\nAfter that created branch in quil for the migration work. Changed deps to processing 3 and fixed few bugs in `quil.Applet` due to removal `PApplet.resize`. And was able to create a simple sketch from Quil! Used only `(q/ellipse)` so sketch was very simple. Didn't test any handlers or features like :present or :resizable modes. But it looks promising: I didn't expect to get simple sketch working so soon. \n. Things to do:\n- [x] make trivial sketch work\n- [x] check all functions in quil.core\n- [x] check all handler function\n- [x] check dxf and pdf renderers\n- [x] check keep-on-top\n- [x] check exit-on-close\n- [x] check resizable\n- [x] check present and fullscreen size\n- [x] check `:display` option\n- [x] check 3d rendering\n- [x] check uberjar with 3d rendering\n- [ ] add apple.jar to clojars and test on macos\n. Tested handlers - they work as expected. Checked keep-on-top and resizable features. They needed migration as Processing replaced PApplet.frame (which was java class) with their own PApplet.surface w (instance of PSurface interface). Luckily it has all methods we need (setResizable and setAlwaysOnTop), so it was easy to fix. Fixed present and fullscreen mode. Now we don't need to find out size of the screen manually in quil, instead we can just call PApplet.fullScreen. But didn't test it yet with multiple screens, might see some problems.  \n. Status update: \n- found out that latest processing is actually 3.0.1, not 3.0.0 and 3.0.1 is not in maven so had to fallback to hosting processing libs on clojars in quil organization;\n- tested pdf and dxf, work fine. Had to move `PApplet.size()` call for pdf from `PApplet.setup` to `PApplet.settings`, but code became a little bit cleaner. \n- tested p3d renderer and packing 3d sketch to uberjars, had to create fat jars for jogl and gluegen-rt libraries as we did for previous versions of quil;\n- tried to build processing dxf.jar from sources => need processing core.jar => tried to build processing to get core.jar => missing javafx on my machine => decided to upgrade to java 8 to get it => my ubuntu doesn't support java 8 => upgrade to ubuntu 15.10 => ubuntu broke while upgrading => had to reinstall it from usb flash drive => installed openjdk 8 => it doesn't have javafx => realized that I don't need build dxf.jar and can it get by downloading processing distributive from official site;\n\nLatest development version is available on clojars: https://clojars.org/quil/versions/2.3.0-SNAPSHOT so if anyone curious - feel free to try!\n. Tried running all tests (each test exercises some function from quil.core and checks that no errors is thrown, it doesn't check that rendering is correct). Many tests failed. Some due to broken `(width)` and `(height)` function which were easy to fix. Some tests due to internal changes in processing: some functions like `PApplet.copy` can take a `PImage` as source. So some tests create a new graphics, draw on it and then pass it as `PImage` because `PGraphics` externds `PImage`. Unfortunately processing no longer supports. So we have to workaround these tests by not using graphics as PImage.\n\nAlso noticed a bug when you close sketch that uses opengl renderer (which are in the fact p2d, p3d, opengl renderers), then underlying window object doesn't get destroyed and its icon stays in OS' task bar. I found how to destroy it: by getting `GLWindow` object: `PApplet.getSurface().getNative()` and then calling `destroy()` on it. There is a small problem though, if I destroy it immediately on sketch close there is still some delayed task being executed and I get NullPointerException because window was destroyed by the time this task runs. I couldn't find a way to wait until all tasks are done and then destroy window (I'm not that familiar with how jogl library internally works). So I'm thinking about simply waiting for 0.5 sec or so and then destroy window. It's ugly, but hopefully is fine for most usecases and users shouldn't worry much unless they create/close sketches _very_ fast. \n\nUnfortunately my work this weekend wasn't very productive, Fixed width/height, couple of tests and started fixing this destroying-windows things. \n. Tested all functions in quil.core. There was an issue with `(copy)`. The same problem I described earlier: passing `PGraphics` while `PImage` is expected. Also all tests cannot be run in single run, after a while JOGL throws error. I think it might be due to the fact that JOGL not optimized to create windows many times during single JVM run. And in our tests we have a lot (50+) tests that use JOGL renderers (:p2d or :p3d). As workaround I split all tests in sets of 50 tests in each and run single set at a time: `lein test :set-0`, `lein test :set-1`, etc. 4 sets total. \n. Added support for `:settings` callback. It's very similar to `:setup` but should be used only for `(smooth)` and `(no-smooth)` functions in clojure. It's new requirement of Processing 3. \n. Quil 2.3.0 was released today. It uses Processing 3. Closing this issue.\n. Could you try quil 2.3.0-SNAPSHOT which uses recently released Processing 3.0.1? \nhttps://clojars.org/quil/versions/2.3.0-SNAPSHOT\n. Hm, cool! I didn't really expect that it would fix it. \n. Argh, not cool. So processing 3 introduced new method `settings()` that should be used to set size and apparently smooth. I hoped I could keep it hidden in quil so API only has `:setup`. But I think I'll need to make `:settings` available as well only for smooth :( \nReopening this issue. \n. Thanks @GoToLoop. Added support for `:settings` just to support `smooth` and `no-smooth`. Feels ugly and I'm sure will be confusing for users, but couldn't think of a better way to support it. So usage is something like this;\n\n``` clojure\n(q/defsketch my-sketh\n  :settings #(q/smooth 2)\n  :setup setup\n  :draw draw)\n```\n\nUploaded latest version to  https://clojars.org/quil/versions/2.3.0-SNAPSHOT \n. @eigenhombre could you try with 2.3.0 and putting smooth inside :settings? \n. Update what exactly? I did update [smooth](http://quil.info/api/shape/attributes#smooth) and [no-smooth](http://quil.info/api/shape/attributes#no-smooth) docs to reflect the fact that they must be called inside :settings. \n. Looks good! Left few comments about some old functions that can be removed. \n. Check API docs for defsketch: http://quil.info/api/environment#defsketch it has all currently supported options. \n. Awesome, thanks! I'll merge it right now. As for piggybacking on API docs generation for site - good idea. API docs generation is a [script](https://github.com/quil/quil/blob/master/dev-resources/utils/docs.clj) that generates edn file with all functions and docstring. I think we can simply add a call to generate cheatsheet at the end of that file.\n\nAlso can you add instructions to `cheat_sheet_gen` how to generate pdf from tex? As I understand you first run script to generate tex file and then run latex to generate pdf, right? Also what dvi file is used for? \n. Right, I missed pixelDensity :( Didn't see it on Processing 2 => 3 changes pages and thought there were no new methods. I should take a closer look. Thanks for bringing that! Meanwhile as workaround you can try something like:  \n\n``` clojure\n(q/defsketch ...\n  :settings #(.pixelDensity (q/current-graphics) 2)\n)\n```\n\nBasically using java interop to call .pixelDensity() directly. Note that it must done from :settings handler.  \n. Ah, right, graphics is not created yet at this point, but applet is (because settings() called before graphics object is created). Then `(.pixelDensity (quil.applet/current-applet))` might work. I'll try it tonight at home. And work on adding proper support of pixel-density.\n. I also added logic that sets pixel density automatically: https://github.com/quil/quil/blob/master/src/clj/quil/applet.clj#L203. I think it should cover most cases so that users won't even need to be aware of `(pixel-density)` function. \n\n@shaunxcode what do you think? Can it be a problem? \n. Indeed. Thanks for reporting and providing good reproducible example, that helped! Apparently some processingJs functions use values constants instead of ints while we expected only ints (like in regular processing). Actually processingJs source [claims](https://github.com/processing-js/processing-js/blob/master/src/Processing.js#L6476) it takes int values (but in fact they're string) which adds to confusion. \n\nAlso thanks to your report `stroke-join` and `cursor` were fixed as well. \n. Aaah, missed that one. Thanks! :) \n. Agree, that would be quite useful. I'll think about how to implement it. In fun-mode it would be quite easy - all handlers get event object already so I can simply add some logic that adds few new keys to the events. As for standard, non-fun-mode, I'm not sure what the best way to do it. Meanwhile you can access event using `(.-keyEvent (quil.applet/current-applet))`. \n\n@GoToLoop yes, your approach is good but I think it works only for a set of special symbols such that CTRL+Z which have ASCII equivalent. Alt/shift + key don't have special meaning AFAIK. \n. I decided to go with `(q/key-modifiers)` functions that returns a set of currently active modifiers. Unfortunately I didn't find a way to get hold of event object in clojurescript so new function is available only in clojure. \n. Yes, I had this problem as well a few times. Looking at processing.js code which is used by Quil - I don't think there is anything we can do at this point: https://github.com/processing-js/processing-js/blob/master/src/P5Functions/touchmouse.js#L302  \n1. Processing registers mouse wheel event listener on document, not on canvas. \n2. Event object is not exposed in any way so we cannot call .preventDefaul() on it. \n\nI'll file a bug at processingjs repo about it.  \n. Filed a bug on processing.js: https://github.com/processing-js/processing-js/issues/220 \n. Yes, non-repl friendly is a known problem. In clojure (which uses java Processing) methods like `abs` or `sin` are static methods so you can use them without instance of applet. But in clojurescript all methods, like @Norgat mentioned, are instance methods so you have to have an applet. \n\nJared, what kind of repl development do you have in mind with Quil where you want to call functions without applet? So I can better understand how we can improve interface. \n. @GoToLoop that's unfortunate. I had plans to upgrade processing.js dependency to latest :(  I think I'll try it anyway to see if it really so bad. Maybe it's not officially supported but still works with some jumping through hoops. \n. @jaredly I see. Yes, that's a workaround. Though quil was designed with having \"draw\" function that does draw commands inside it and invoked many times per second. Instead you introduce another approach where nothing is being redrawn and instead you call drawing functions separately and their result is stored and not cleared. But I think at the end, if you want to use quil, you still need to go back to \"everything inside 'draw' function\" approach and this switch maybe confusing because user already got used to \"just call any drawing function anywhere and it results stays\". \n\nAlso cool tutorial! Is it cljs-in-cljs? I tried to set it up for http://quil.info/sketches/create but failed. Currently it uses server-side cljs compilation. How hard is it to add cljs-in-cljs support for quil.info do you think?\n. Thanks for the heads up. Yes, we should update quil to use latest processing. Unfortunately I don't think you can pull request as we need to [upload processing jars](https://github.com/quil/quil/wiki/Dev-notes#how-to-update-quil-when-new-version-of-processing-is-released) first and you don't have rights to push to quil repo in clojars. I'll try to do it tomorrow/this weekend. \n. Thanks for reporting! \n. I'm not sure it's possible. Processing `PApplet` class no longer extends awt Applet which means it's not a part of standard swing/awt framework that seesaw uses. Though if you use `:renderer :java2d` it created JFrame and Canvas elements under the hood and it is possible actually get them and add to your swing application created via seesaw, but it might be very fragile/hacky. I tried and couldn't make it work:\n\n``` clojure\n(ns test.core\n  (:require [quil.core :as q]\n            [quil.middleware :as m]\n            [seesaw.core :as c]))\n\n(defn setup []\n  (q/frame-rate 30)\n  (q/color-mode :hsb)\n  {:color 0\n   :angle 0})\n\n(defn update-state [state]\n  (println \"Dooing\")\n  {:color (mod (+ (:color state) 0.7) 255)\n   :angle (+ (:angle state) 0.1)})\n\n(defn draw-state [state]\n  (q/background 240)\n  (q/fill (:color state) 255 255)\n  (let [angle (:angle state)\n        x (* 150 (q/cos angle))\n        y (* 150 (q/sin angle))]\n    (q/with-translation [(/ (q/width) 2)\n                         (/ (q/height) 2)]\n      (q/ellipse x y 100 100))))\n\n(defn create-sketch []\n  (q/sketch\n    :title \"You spin my circle right round\"\n    :size [500 500]\n    :setup setup\n    :update update-state\n    :draw draw-state\n    :renderer :java2d\n    :features [:keep-on-top]\n    :middleware [m/fun-mode]))\n\n(defn main [& args]\n  (let [sketch (create-sketch)\n        surface (.getSurface sketch)\n        canvas (.getNative surface)\n        proc-frame (.getParent canvas)]\n\n    (c/invoke-later\n     (.remove proc-frame canvas)\n     (.setVisible surface false)\n     (-> (c/frame :title \"Hello\",\n                  :content (c/border-panel :center canvas)\n                  )\n         c/pack!\n         c/show!))))\n\n(main)\n```\n\nIt throws error `Exception in thread \"Animation Thread\" java.lang.IllegalStateException: Buffers have not been created` :( But a similar question was asked on StackOverflow and seems like it should work: http://stackoverflow.com/questions/33101812/embed-processing-3-into-swing Maybe I'm doing something wrong. \n. Closing old issue. @APOS80, if you still have problems/need help - feel free to reopen. We can try make it work. \n. Hi Camilo. You could try using [`pixels`](http://quil.info/api/image/pixels#pixels) function. It returns array of all pixels and you can convert it to base64 I assume. I think it will be close enough to byte-array. \n. Closing old issue. @carocad, if you still have problems with this - feel free to reopen it. \n. Hi Isaac. Can you provide more details? What error do you get? Is it compile or runtime error in browser console?\n\nI tested quil with optimization :advanced as part of QA before cutting release. Also quil.info uses :advanced and it seems to be working fine. \n. What version of clojurescript are you using? \n. Is your project available on github so I can try it myself?\n\nOn Sun, 10 Apr 2016, 18:54 Isaac Zeng, notifications@github.com wrote:\n\n> I tested at both version of [org.clojure/clojurescript \"1.7.228\"] and [org.clojure/clojurescript\n> \"1.8.40\"], the same result --- working with quil 2.3.0, not working with quil\n> 2.4.0\n> \n> \u2014\n> You are receiving this because you commented.\n> \n> Reply to this email directly or view it on GitHub\n> https://github.com/quil/quil/issues/182#issuecomment-208118444\n. Indeed. Looks like processing folks forgot to declare `l`. Though I didn't see any problems when using it on chrome/firefox/safari. I still not sure what runtime error you're getting. I'd expect browsers just to declare global window.l variable and proceed with whatever they were doing. Does it interfere with some other global `l` variable? Hm. I assume clojurescript might generate a global function or something named `l`. Is that what are you seeing? \n. Can you try adding externs file that contains just:\n\n``` javascript\nwindow.l;\n```\n\nI believe it should make closure compiler skip `l` variable. https://github.com/clojure/clojurescript/wiki/Dependencies#using-externs\n. Glad to hear you found a workaround. I'll update quil externs accordingly to ignore `l`. \n. So there are multiple ways to do it.\n1. Fix mistake in processing.js in their repo. Out of my control and probably not a critical issue for them.\n2. Fix compiled processing.js in quil/processing-js. That means I have to remember to fix it every time I upload new version of processing.js\n3. Add `window.l;` to externs. Might break if someone uses global `l` identifier on purpose (which I think is  unlikely). \n\nI think (1) is the ideal fix but I don't have much control here. And from (2) and (3) I prefer (3). \n. Indeed. Looking at implementation of `q/exit`: https://github.com/quil/quil/blob/master/src/cljc/quil/core.cljc#L1656 it looks like \n\n``` clj\n(.exit my-sketch)\n```\n\nshould do the trick. I'll try it and then update wiki.  \n. `(.exit my-sketch)` works. Updated wiki. Thanks for reporting!\n. This is related: https://groups.google.com/forum/#!topic/clj-processing/Fegk10gL4P8\n\nBasically you need \n1. Somehow include gifAnimation library to your project. If it's already in maven somewhere - perfect, just add its coordinates to `project.clj`. Otherwise you might need to download it, upload to local maven repo using [`localrepo`](https://github.com/kumarshantanu/lein-localrepo) plugin. \n2. Familiarize yourself with java interop. As you're going to work with plugin - you have to use create java class and call methods on it. \n3. Translate example from gifAnimation readme to clojure. Check thread I mentioned above as example of similar translation. Basically you need to create instance of `Gif` object in `setup` function passing `quil.applet/current-applet` instead of `this`. \n. Added answer in FAQ: https://github.com/quil/quil/wiki/FAQ#how-to-use-processing-plugin Closing this issue. Feel free to reopen if you still have problems/questions.\n. That sounds reasonable. I think I did such cleanup long time ago but probably new reflection calls were introduced since then. Would you be interested in doing? \n. That's fine. You can do it for clj and don't worry about cljs. Once you're ready - you can open pull request and I can test it for cljs. Or you can do it your self, see step 2 in release process: https://github.com/quil/quil/wiki/Dev-notes\n\nAll tests are manual as they involve looking at stuff and checking that it looks reasonable and couldn't think of a good way to automate it. \n. Hi Simon. I believe you can achieve the same effect with public API today. Can you try this:\n\n``` clojure\n(q/with-sketch (q/get-sketch-by-id canvas-id)\n  (q/exit))\n```\n. Yes, keeping reference to actual sketch seems like a better solution than using `get-sketch-by-id`. Glad to see that you made it work! \n. Actually, there is a way. You can use\n\n``` clojure\n(quil.applet/with-applet my-sketch\n  (ellipse 100 100 100 100))\n```\n\nIt's kinda \"internal\" because it's not in quil.core but should work. And I guess it makes sense to make it public as `with-sketch`. Would you be interested in adding it? \n. I mean that `quil.applet/with-applet` is \"private\" I think it should be public by adding it to `quil.core/with-sketch`. This way `with-sketch` is going to work both in clojure and clojurescript. \n. I tried to implement `with-sketch` for clojure but failed. Nothing was drawn on a sketch. I believe Processing doesn't support drawing outside of \"draw\" function. After `draw` is called processing [disposes graphics](https://github.com/processing/processing/blob/master/core%2Fsrc%2Fprocessing%2Fcore%2FPApplet.java#L2430) object and if we try to draw on it from another thread using `with-sketch` nothing will happen. It silently ignores all draw operations. \n\nSome other lifecycle functions like `start-loop` and `no-loop` might still work but it doesn't feel right to support `with-sketch` if only limited number of functions are going to work. I'm closing this issue as \"not feasible\". If anyone has ideas how to fix it - feel free to reopen.  \n. So the only possible way from some other code (like overtone) to write something is to save data into an atom and have sketch `draw` function read this data and draw. There might be small lag between overtone updating atom and sketch drawing it, but given that FPS is pretty high 30-60, the lag should be hardly noticeable. \n. Hi. Sorry for the late reply. I did some debugging and it's indeed impossible to do using only quil API, you'll have to use java interop. So the code will look like this:\n\n``` clojure\n(let [gr (create-graphics spiral-size spiral-size :pdf \"filename.pdf\")]\n  (with-graphics gr (draw-spiral))\n  (.dispose gr))\n```\n\nNote the `(.dispose gr)` call at the end. This call closes pdf writer and flushes all content to file on disk. Actually I think there is a more idiomatic Processing way to do it using `beginRecord()` and `endRecord()` methods, but quil currently doesn't expose them. I'll add `do-record` macro:\n\n``` clojure\n(do-record (create-graphics spiral-size spiral-size :pdf \"filename.pdf\")\n  (draw-spiral))\n```\n. Closing this issue due to inactivity. @Vandan-V-Phadke feel free to reopen it if you still see this problem and want to resolve it. . Hi Harrison. Most quil functions must be executed inside setup/update/draw or handlers because they need to know what \"current sketch\" is. `random` one of such functions: https://github.com/quil/quil/blob/master/src/cljc/quil/core.cljc#L3166 So it is working as intended. Generally quil is not very repl friendly: you cannot just run single quil function like `rect` or `line`. Instead you redefine the whole `draw` function:\n\n``` clojure\ntesting.core=> (defn draw-state [] (q/rect 0 0 100 100))\n; rect is drawn\ntesting.core=> (defn draw-state [] (q/ellipse 0 0 100 100))\n; ellipse is drawn\n```\n. You're welcome! \n. Hi Phil. If you use main function I'd suggest using `sketch` instead of `defsketch`. Check out [runnable jar](https://github.com/quil/quil/wiki/Runnable-jar) example. It uses exactly this technique and you can see that you easily use command line args during sketch initialization. \n. Hi. Are you trying to use [load-shape](http://quil.info/api/shape/loading-and-displaying#load-shape) function? If so, it return an instance of PShape as you said and you can call java methods on it. It's true that quil doesn't have any special methods for that, but java interop is good enough:\n\n``` clojure\n(let [shape (q/load-shape \"shape.svg\")]\n  (println (.getVertex shape))\n  (println (.getVertexCount shape)))\n```\n. Thanks for reporting and looking into it! Yes, suggested changes look reasonable but I think you need to keep `(.fillColor (current-graphics))` for regular clojure quil and add `(.-fillColor (current-graphics))` for clojurescript quil. Feel free to send a pull request.. Ah, thanks for the explanation! . Hi Yehonathan \r\n\r\nHave you looked at https://github.com/quil/quil-site/blob/master/src/cljs/editor/quil_site/compiler.cljs? It does the compilation part. The setup in quil.info is following:\r\n\r\nThere is the main window and iframe where sketch runs. \r\n1. User clicks \"compile\".\r\n2. We take user code and compile it in main window. Output of compilation is string with js code. Note that at this stage we compile only user code, we don't compile any of quil code. \r\n3. Compiled js code sent to the iframe with the sketch using postMessage.\r\n4. Sketch iframe upon receiving postMessage evaluates js code. In the iframe we preload unobfuscated compiled quil + clojurescript core js so upon evaluating user code all quil and core functions are defined.\r\n\r\nWhen we compile user code at step 2, it uses some quil and core macros and compiler has to be aware of them. To achieve that we preload compilation cache for quil and cljs macros namespaces: \r\nhttps://github.com/quil/quil-site/blob/master/src/cljs/editor/quil_site/compiler.cljs#L38\r\nhttps://github.com/quil/quil-site/blob/master/src/cljs/editor/quil_site/compiler.cljs#L45\r\n\r\nCache is built beforehand by running cljs self-host on nodejs: \r\nhttps://github.com/quil/quil-site/blob/master/cache/src/cljs/cache/core.cljs\r\n\r\nSo, to support quil inside klipse I'd suggest doing similar: reuse caches to compile user code to js and evaluate it assuming that main quil library already preloaded. . Here is script that is preloaded in sketch iframe. All it does - it includes quil.core, quil.middleware so they're included by compiler and listens to postMessages and evaluates them. Pretty straightforward.\r\nhttps://github.com/quil/quil-site/blob/master/src/cljs/preload/quil_site/preload.cljs. Please also enable tests for current-fill and current-stroke for clojurescript in the same pull request: https://github.com/quil/quil/blob/738a549cb3704e3d09fe0de9c88c486d35a1d6d0/test/cljc/snippets/color/creating_and_reading.cljc#L128 \r\n. Thanks! . Yes, looks good. The tests are pretty primitive: all they do is check that no js error thrown. Basically that all calls work without errors. They don't check any visual rendering. So ideally, if we enabled tests before you commit we'd see 2 js erros in console saying that current-fill doesn't work. . Franziska, thanks for reporting it! I believe there might be a real issue here. \r\n\r\n@Norgat, looking at quil implementation of `mouse-pressed?` we just return 'mousePressed' property of Processing object: [link](https://github.com/quil/quil/blob/master/src/cljc/quil/core.cljc#L2610). But according to the issue you referenced we should be using __mousePressed. I checked it and it seems to like __mousePressed indeed works:\r\n\r\nhttp://quil.info/sketches/local/47f91e27fb59ceb0a99e71e5342cc033ba0e8639d8257513fb6363db81a50a15. I'm ok with using non-public processing API. We can update our \"automated\" tests to verify that `mouse-pressed?` returns boolean. If it doesn't the test throws an error.\r\n\r\nMaksim, I didn't fully understand your example. I don't see `mouse-pressed?` in it. . Hm, haven't used github review process before. Interesting. . Thanks! Looks good now. Merging. . Hi Prakhar. \r\n\r\nHaving such function seems reasonable. I wouldn't use `PVector.random3D()` because it returns PVector and clojure has its own vector type. So clojure implementation of such function like you suggest is preferable. Though I'm wondering if there is a way to make it faster. I can imagine such function can be called often and should be optimized. Having multiple iterations like map/reduce/repeatedly might hurt performance. The optimized version won't be as idiomatic but I think it's a fair price to pay. Do you want to make a pull request? . Great! I was thinking the fact that vector has only 3 components. This allows us to generate each component separately as there are few them and not necessary to use iteration functions. We probably even use spherical coordinates to generate it: unit vector is essentially a point on a sphere with radius 1. And cartesian coordinatex x, y and z of point are determined using 2 angles and r: http://mathworld.wolfram.com/SphericalCoordinates.html Formulas 4, 5, 6\r\n\r\nGiven that r is 1. You just need generate 2 random angles and calculate x, y, z: \r\n\r\n```\r\ntheta = rand(0, 2PI)\r\nphi = rand(-Pi/2, Pi2/)\r\nx = cos(theta)*sin(phi)\r\ny = sin(theta)*sin(phi)\r\nz = cos(phi)\r\nanswer = [x, y, z]\r\n```\r\nIt think it should be faster than generating 3 random coordinates and normalizing them. Also It should have more even distribution of random vector (see [this](http://stackoverflow.com/a/6283140/575421) stackoverflow answer).. Ah, yes, I totally forgot about this. We're using PApplet.random to be more consistent with Processing. I guess `deftest` won't work in this case as you need instace of PApplet :( How about just adding this check into defsnippet itself?After you printed value of a random vector you can sample N vectors and check their length and fail the test if it's not 1. . Perfect. Thank you! . Hi Andy\r\n\r\nCan you provide code to reproduce the problem? Also have you tried the latest version 2.6.0?. Hi Andy. \r\n\r\nThanks so much for providing project to reproduce it and sorry for the delay. I finally borrowed a mac and tested and as I suspected it's due to retina display. In version 2.4.0 I decided that it would be a good idea to change display density from 1 to whatever current screen has: https://github.com/quil/quil/blob/master/src/clj/quil/applet.clj#L204 Probably it wasn't such a good idea after all. I'm still not sure to be honest.\r\n\r\nAnyway, to fix you problem you can set [pixel density](http://quil.info/api/environment#pixel-density) back to 1 in `:settings` function and it'll fix it:\r\n\r\n```clojure\r\nq/defsketch resize\r\n  :title \"You spin my circle right round\"\r\n  :size [220 220]\r\n  :setup setup\r\n  :settings #(q/pixel-density 1)\r\n  :draw draw-state\r\n  :features [:keep-on-top]\r\n  :middleware [m/fun-mode])\r\n```\r\n\r\nI'll keep this bug open until I decide if I should remove auto-detection for pixel dencity. \r\n. Maksim you're not waiting on me, right? We still need to resolve the issue \"new preload-font\" or \"update create-font\".. Having single `create-font` is less confusing than both `create-font` and `preload-font`. It's not clear how \"creating\" is different from \"preloading\". It's better to hide low-level implementation details from users, especially given that quil is fairly high-level library. \r\n\r\nI can't think of any performance issues if create-font is called inside `:draw`: only the first call loads the font while all the rest do nothing. If user still wants to optimize it - they can move `create-font` call to `:setup`. . Not sure to be honest. Try adding `:draw` function. You can basically rename :setup to :draw. Also I suggest adding (println) to -main to make sure it runs. And add println to setup/draw. . That's weird. I don't think I ever had problems when running using lein. Maybe it's specific to boot. One possible workaround is to block the main thread until sketch closes. Example:\r\n\r\n```clojure\r\n(defn -main  [& args]\r\n  (println \"starting\")\r\n  (let [sketch-finished (promise)]\r\n\r\n    (q/defsketch my-art\r\n      :size [800 800]\r\n      :draw draw\r\n      :on-close (fn [] (deliver sketch-finished true))\r\n\r\n    (println \"started sketch and wait for it to finish\")\r\n\r\n    ; derefing promise blocks thread until promise is fullfilled\r\n    (deref sketch-finished))\r\n\r\n  (println \"sketch finished, exiting\"))\r\n```. Interesting. @kchair can you copy the list of all files you have in `natives/macosx-universal`? I'm also curious why you're using Processing.py, is it a part of standard Processing package? . Just tried running [this](https://github.com/quil/quil/wiki/Navigation-3D#example) p3d sketch on MacOS 10.12.3 and it works just fine on my laptop :/ \r\n\r\nCan you post your `project.clj` setup? Also can you try unpacking `gluegen-rt-fat.jar` and copy contents of its `natives/macosx-universal/` folder to your sketch and see if it works? \r\n\r\n. Hi Joakim. What doesn't work exactly? There is an error or you simply can't see SVG being drawn? Does it work without `navigation-3d` middleware? . Can you provide your SVG? And what OS are you running on? I tried on linux and it worked. It was very slow, probably because load-shape took long time so FPS was around 5. And then I moved shape load to `setup` and it improved drastically:\r\n\r\n```clojure\r\n(defn setup []\r\n  {:shape (q/load-shape \"family_tree_01.svg\")})\r\n\r\n(defn draw [state]\r\n  (q/background 255)\r\n  (q/lights)\r\n  (q/fill 150 100 150)\r\n  (q/sphere 75)\r\n  (doseq [pos [[150 0 0] [-150 0 0]\r\n               [0 150 0] [0 -150 0]\r\n               [0 0 150] [0 0 -150]]]\r\n    (q/with-translation pos\r\n      (q/box 75)))\r\n   (q/shape (:shape state)))\r\n```\r\n. Btw here is svg that I used (first image): http://dragonhomer.blogspot.com/2014/11/family-tree-files.html Not sure if it matters, but just in case. . Sorry for the late reply. If you're still willing to debug this, can you run your sketch using `lein run -m yournamespace.core` or whatever your project structure is? I find it often hard to get error messages when running from emacs because they might be hidden somewhere in emacs depth so I just run sketch from command line and can see all errors. . Tried locally and worked fine. Are you using mackbook with retina display? I think this might be the cause: on retina \"size\" of applet internally is 2x which doesn't match the image. Can you try adding `pixel-density` as described [here](https://github.com/quil/quil/issues/202#issuecomment-282649108). Also it matches the fact that it worked for you on 2.3.0 as we switched pixel-density detection to automatic starting 2.4.0. . Closing this bug. If you have any questions - feel free to reopen. . Thanks, @carcigenicate! Didn't know about `lein check`. Before that, I manually enabled `*warn-on-reflection*` and compiled quil.core so I missed all middleware. Added `lein check` to the release process [doc](https://github.com/quil/quil/wiki/Dev-notes). Hi Brendon. Maybe it's a small bug. I thought that raw-key won't return anything in key-released because key was \"released\" and we no longer have it. But if it returns something then yes, we should pass event to the release handler. . Hi Andrew. I suspect the problem is with \"update\" step where you have to calculate new state which involves a lot manipulations and clojure is not particularly effective in these tasks. So you have to explore wonderful world of optimizing clojure code. I suggest you to try using benchmarks libraries like [criterium](https://github.com/hugoduncan/criterium). Measure how long it takes to run `update-state`. \r\n\r\nLooking at your algorithm I think there are some ways to improve it. First of all let's estimate complexity of single update. Let's say you have NxM table. You have N\\*M cells. And to update each cell you need to find all its neighbors. To find each neighbor you're iterating through all cells so looking up neighbor requires N\\*M operations. So total complexity of updating cells is:\r\n\r\nN\\*M (updates) \\* 8 (neighbors) \\* N\\*M (cost of finding neighbor) = 8\\*N^2\\*M^2\r\n\r\nIt's not really possible to optimize the first N*M because you have to recalculate state of each cell on every update. But we can optimize the getNeighbor to run in O(1) instead of O(N*M). For that we need to change the way you store cells. Today you store them as vector, but instead you can store them as map. Instead of:\r\n\r\n```clojure\r\n(def cells [\r\n  {:x 0 :y 0 :alive true} \r\n  {:x 0 :y 1 :alive false} \r\n  {:x 1 :y 0 :alive true}\r\n  {:x 1 :y 1 :alive false}])\r\n```\r\n\r\ntry following structure:\r\n\r\n```clojure\r\n(def cells {\r\n  [0 0] true\r\n  [0 1] false\r\n  [1 0] true\r\n  [1 1] false})\r\n```\r\n\r\nThat way getNeighbor can be written as:\r\n\r\n```clojure\r\n(defn getNeighbor [x y cells]   \r\n  (let [alive? (cells [x y] :none)]\r\n    (if (= alive? :none)\r\n      (rand-nth [true false])\r\n      alive?)))                                                                             \r\n```\r\n\r\nI believe it should drastically improve performance. But try criterium to verify improvements. It is so much fun optimizing code and see execution times go down. . Hm. I just saw that you checked `conway-state` execution and got time ~1ms but I still suspect the problem is there. Actually `(time (conway-state s))` might not give the result you expect because `conway-state` returns lazy collection without evaluating it. You should try `(time (doall (conway-state s)))` instead. . Hi Gregory. Where are you running quil? . Sorry for probably very late response. I just tried. \r\n\r\n1. Rent a headless server on google compute engine.\r\n2. Install openjdk 8, leiningen, other things from the [article](https://github.com/processing/processing/wiki/Running-without-a-Display)\r\n3. Create project using quil lein template: `lein new quil test`.\r\n4. Add `(q/save-frame \"foo-####.png)` to the `src/test/core.clj` at the end of `draw-state`. \r\n5. Run `xvfb-run lein run -m test.core`. \r\n6. Checked and I could see png files in the directory. \r\n\r\nSo it worked for me. How did you run xvfb-run?. Closing this bug. If you have any questions - feel free to reopen. . Hi Andreas. \r\n\r\nSorry for the late reply. Indeed, looks like resizing canvas element doesn't change internal width/height. But  it should be relatively easy to add to Quil. I'll do it. Thanks for reporting! . I made it work with P3D. Here is an example where we take this [image](https://github.com/quil/quil-site/blob/master/public/img/play.png) and reverse it: http://quil.info/sketches/show/-KoBCD2nlAgqIa_ivFQb\r\n\r\nNot sure though how to make it work with P2D. . Another version: http://quil.info/sketches/show/-KoBEH8HSD62Hf9Ujuoq. How are you opening html? Just from file manager or do you run static file\nserver, like \"python -m SimpleHTTPServer\" ? I think you have to do the\nserver so that page is opened using http:// protocol instead of file://\n\nOn Wed, Jul 12, 2017, 04:59 Andreas Schau <notifications@github.com> wrote:\n\n> Hey, sorry for the long wait, but i was quite busy.\n> It strikes me how it is, that in the online editor you used it works just\n> fine. But if i put your exact code in my project on my own computer with\n> \u00bblein cljsbuild auto\u00ab in a terminal, then it is compiled just fine, but i\n> don't see anything on the canvas but rather have an error message.\n>\n> Uncaught DOMException: Failed to execute 'texImage2D' on\n> 'WebGLRenderingContext': Tainted canvases may not be loaded.\n>\n> So is my processing.js to old or something?\n>\n> \u2014\n> You are receiving this because you commented.\n>\n>\n> Reply to this email directly, view it on GitHub\n> <https://github.com/quil/quil/issues/213#issuecomment-314747772>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AAPYldC7-FnHWvdl8_PsJkhna3UZrf5lks5sNLU8gaJpZM4OHnie>\n> .\n>\n. The goal of functional mode is to separate computation part from \"side-effect\" part, which drawing. The process of drawing involves 2 steps that are often intermixed but in functional mode they are separate: the first is **what** to draw (prepare data required for drawing) and the second is **how** to draw (implementing functions that take that data and draw it). Personally it helps me to think about data without being distracted with drawing details. Another benefit of that separation is that `update` should ideally be pure function. Which means you can run it in repl to test and iterate. At the same time you can't run `draw` from repl because it has to be run \"from\" sketch. \r\n\r\nHaving said that if you find it easier to combine them - you might find it easier using Quil without functional mode. Without functional mode you have only `draw` and no explicit state object. But it you need it - you can use either [state-atom](http://quil.info/api/state#state-atom) or even declare you own global atom variable and change it inside `draw`. . Hi Mehul. Try asking https://groups.google.com/forum/?fromgroups#!forum/clj-processing You reach more quil users there. . I believe printing works, but in prints to some other buffer by default. If you \u00e7heck all cider-related buffers in emacs you should see the message. Also there is a middleware that redirects all printlns to expected buffer. Here it is: https://github.com/quil/quil/blob/master/src/clj/quil/middlewares/bind_output.clj#L4 Try using it as `:middleware [quil.middlewares.bind-output/bind-output m/fun-mode]`. It should work (at least it worked when I created it originally) but no guarantees. . You can try [pause-on-error](http://quil.info/api/middleware#pause-on-error) middleware which pauses sketch and prints error on sketch screen. As for seeing error in cider, I don't remember for sure. It should be in one of emacs buffers. . Thanks Tim! . Also here is an example: https://github.com/quil/quil/blob/master/test/cljs/quil/manual.cljs#L132. It kinda works. In ClojureScript you can't save sketch to a file because it runs in browser and you can't create files from js in browser AFAIK. What q/save or q/save-frame do instead is they conver image into base64 and open a new tab using encoded image as source:  https://github.com/processing-js/processing-js/blob/master/src/Processing.js#L8796\r\n\r\nSo each time you call save/save-frame it opens a new tab. In my case chrome blocks all these new tabs thinking it's spam. There is a small icon in page url bar on the right which says that pop up blocked. If you click you'll see all new tabs for each frame. And when you click on one of them it should open a tab with image of your sketch.\r\n\r\nBut probably it's not what you need anyway. If you want to generate images I think you have to use clojure version. Or do saving yourself somehow using js/server side. . Hi Shaun. Yes, that would be great to patch. Would `pixelDensity()` set window.devicePixelRatio to a different value as well? . Hi. This error says that your java version is too old: https://stackoverflow.com/questions/22489398/unsupported-major-minor-version-52-0 Quil works only on jdk 1.8 since version 2.5.0: https://github.com/quil/quil/blob/master/RELEASE-NOTES.md#250\r\n\r\nSo you either have to update your jdk or use older version of quil.. Hi Jacob. Have you tested if this hint works with quil? I wonder how to test it. . Current quil requires jvm 8 (same as Processing). I was thinking about just testing manually, without unit tests. I don't think you can really test this functionality automatically. I can try testing it if you can't get java 8.   . It's good that it doesn't fail. Did you see any changes in sketch performance? With blocking saveframe performance should decrease if writing to disks is slow. I googled and we might be able to emulate slow disk using some trickery (on linux): https://askubuntu.com/questions/13590/can-i-simulate-a-slow-hard-drive Do you have bandwidth to try it out? . Yes, I wanted to make sure that `DISABLE_ASYNC_SAVEFRAME` does anything in quil. If you tested it then I'm happy. As for \"aren't we getting into testing/benchmarking Processing itself, not quil\", kinda. I wanted to test if this hint is propagated to processing and applied correctly. So run end-to-end test :) \r\n\r\nThanks for the pull request and testing! . So user can use either `update` (update and draw something) or only `draw` (draw something)?  \nDid you consider (may be in IRC) using `update` function as only update? So it doesn't have sideeffects like drawing and should only update current state of the world. And `draw` function only draws this state without modifying it. This way there is a separation between logic and presentation. Every turn first `update` called and then `draw` called. \n. Functional mode was added in 2.1.0. See wiki [article](https://github.com/quil/quil/wiki/Functional-mode-%28fun-mode%29). Thanks for inspiration! \n. Fixed (at least I can't reproduce it) in quil2.0 branch. Also, as I understand, Processing guys strongly recommend to use P3D renderer instead of raw OpenGL. \n. Seems like new jogl version fixed the problem. \n. @samaaron: Most functions for `PGraphics` are the same as for `PApplet` so they can be used. How about adding something like `with-graphics` macro that takes graphics and forms:\n\n``` clojure\n(with-graphics gr\n  (background 255)\n  (line 0 0 10 10)\n  (rect 25 25 5 5))\n```\n\nAnd create `ThreadLocal` variable for current graphics, this macro first sets it and at the end sets null. And all drawing methods check this thread local var first and if it's null they take current-applet and draw on it.\n. Can be closed. See #37.\n. Close? Implemented in #34.\n. Accidentally closed. \nNeed to verify if reproducible in quil 2. \n. Cool! I'll try to reproduce it once quil 2 is released and then close the issue, but good to know that it is potentially fixed. \n. Cannot reproduce on 2.0.0, closing.\n. @samaaron  Yes, I see. I think the only way now is to revert the commit. I'll try to add protocols so all methods from core will be inside protocol. And add 2 identical implementations - for `processing.core.PApplet` and `processing.core.PGraphics`. I hope it will help to avoid reflection. But it will require pretty big changes and refactor almost whole `core.clj`. \n. @samaaron I think it will be good to revert it for now. Should I do it? Or you'll do it?\n. @hafdikra I like the name. I think search results depend on your zone/may be search history. When I google for quil + something relatied I get first 2 or 3 links to clojure's quil. Do you propose to rename whole library that already pretty known?\n. @samaaron do you have ideas how to fix it? I think all examples must have same start point e.g. every example has `defsketch` or function `run` that executes example.\n. This program works in vanilla processing 1.5.1:\n\n``` java\nint x = 0;\nint y = 0;\n\nvoid setup() {\n  size(200, 200);\n  noLoop();\n}\n\nvoid draw() {\n  background(226);\n  x++;\n  y++;\n  ellipse(x, y, 10, 10);\n}\n\nvoid mouseClicked() {\n  redraw();\n}\n```\n\nSo I think it's really a bug.\n. It's mad. The problem is that when loop is active all invocations to `mouseClicked` come from `AnimationThread`, when loop is off invocations come from `AWT-EventQueue-0` thread. In second case empty version of `mouseClicked` from `PApplet` is called instead of our handler. It's really weird because class the same: `quil.applet.proxy$processing.core.PApplet$IMeta$c506c738`. So when same method called on same object depending on current thread different versions are executed. I don't understand how it's possible.\n. I don't think it's processing. It's java and clojure. I extracted `PApplet` from processing and it doesn't contain magic with byte code manipulation. I'll try to extract clean example of this problem later without using processing at all. \n. It seems that problem with mult-arity overloading in proxy: http://stackoverflow.com/questions/13134633/overriding-multi-arity-methods-in-proxy-in-clojure And this article explains the problem: http://kotka.de/blog/2010/03/proxy_gen-class_little_brother.html. There is a solution suggested in the article: replace `proxy` with `gen-class`. I can try to do it and see what happens. @samaaron what do you think?\n. I replaced `proxy` with `gen-class` and it seems to work: I testes on examples. But there is a problem. Current state, applet, graphics and other stuff is stored inside `ThreadLocal` object. When we stop loop with `no-loop` all listeners inside another thread and current state, applet, etc are nil. And app is crashes.We can try replace thread locals with dynamic vars and keep state and other stuff inside applet. Every call to listeners will be placed inside [binding](http://clojuredocs.org/clojure_core/clojure.core/binding#example_770) where we bind current state, applet. What do you think?\n. `project.clj` is fine - it contains the url. The problem is that clojars takes url from `pom.xml` file that is generated by lein before deploying. And url field is missing from `pom.xml` in version 1.6.0. I think 1.6.0 was deployed using cake, not lein. And it seems that cake didn't add url field to `pom.xml`. I suppose if  @samaaron redeploys quil using lein it will be fixed.\n. Fixed in 1.7.0\n. I'm also interested in this question. I was going to start work on porting to 2.0 soon too :)\n. @samaaron what's wrong with current implementation? What do you have in mind so you want to redevelop from the ground?\n\n@vijaykiran I vote for google doc. I think it's easier to collaborate using google docs.\n. @lionandoil can you show an example? Is it some common way to use processing plugins?\n. Reopening as it's not \"fixed\" yet :) And it's one of quil major goals now so let's it be open.\n. As for dependencies: I think you can use jogl and gluegen-rt libraries from their official  repository. This will help you to avoid push manually all jogl and gluegen-rt jars to clojars. How would I do it:\n1. Look which version of jogl and gluegen-rt you need to import:  \n   a. Choose processing version. For example we want to use 2.1.1.  \n   b. Go to http://github.com/processing/processing and go to appropriate tag (press on \"branch: master\" and select tag). For 2.1.1 it would be: https://github.com/processing/processing/tree/processing-0224-2.1.1/  \n   c. Go to `core/library`, download `gluegen-rt.jar` and `jogl.jar` and open them (jars are just zip archives so you rename and open them as zip).  \n   d. Open `META-INF/MANIFEST.MF` and check version. In our example it is: 2.1.4-rc-20140113 for both gluegen-rt and jogl.\n2.  Import jogl and gluegen in your `project.clj`.  \n   a. Add jogamp repository: `:repositories [[\"jogamp\" \"http://www.jogamp.org/deployment/maven/\"]]`  \n   b. Add jogl-main and gluegen-rt-main to dependencies: \n\n``` clojure\n:dependencies [...\n               [org.jogamp.jogl/jogl-all-main \"2.1.4-rc-20140113\"]\n               [org.jogamp.gluegen/gluegen-rt-main \"2.1.4-rc-20140113\"]]\n```\n\nAfter that it hopefully should work and you won't need to upload all gluegen and jogl jars.\nOfficial [jogamp maven instructions](http://jogamp.org/wiki/index.php/Maven) .\n. I've created [quil2.0](https://github.com/quil/quil/tree/quil2.0) branch. Thanks to @tangrammer and @originalsurfmex  I used his `[processing/core \"2.1\"]` jar to avoid all this hustle with leiningen :)  \nI fixed some errors that appeared on my machine when moving to Processing 2.0 like window size wasn't set right, NullPointerException on frame close. Now it should work (at least some examples work!). And cool thing that opengl renderer works fine for me: it didn't work before on my machine (Ubuntu 13, 64bit) on quil 1.6. \n\nSo feel free to try. Now I want to test all function from `core.clj` to check whether they work or not.\n\nI would be glad if anyone helped me. I think there are  several ways to help that I know of:\n- run all examples on your machine on quil2.0 branch and verify that they work fine;\n- check some functions from `core.clj` manually (please discuss with me so we don't overlap);\n- ideally we should have tests. Test would check that functions doesn't throw errors. It's pretty hard to automate \"visual\" validation so let's stick with error validation for now. I can some ideas how we can achieve it. Would be happy if someone want to implement it. \n\nFeel free to leave any suggestion/comments/critique.\n\nNikita\n. Ah, I also meant @originalsurfmex for his processing 2.1 in clojars :)\n. Quil 2.0.0 with support of Processing 2.2.0 is released!\n. I see that you had dynamic vars before and replaced it with thread locals some time ago. What was the reason of this replacement?\n. Processing sources has folllowing code in `size()` method:\n\n``` java\nSwingUtilities.invokeLater(new Runnable() {\n      public void run() {\n        // Set the preferred size so that the layout managers can handle it\n        setPreferredSize(new Dimension(iwidth, iheight));\n        setSize(iwidth, iheight);\n      }\n    });\n```\n\nSo actual `setSize` will be called in other thread and if you call `(width)` or `(height)` from setup fn there is race condition between current thread and swing thread. This case can me manually handled in quil but it will be pretty messy.\n. Yes, I think so. \n. Fixed in quil2.0 branch.\n. Fixed for quil 2.0.\n. I think example from README is this one-liner. To run sketch you need to call `defsketch` and pass at least 2 functions: setup and draw. So example from README already pretty short. What do you mean by \"there's no connecting path between the copy-paste-have-file to the see-pretty-stuff-in-screenshot\"? \n. @ysmolsky \n`defsketch` - yes, it is pretty dumb macro that just calls `defapplet`. But I think it was done it order to call \"private\" macro `defapplet` which is defined in another namespace `quil.applet` which is not exposed in documentation.\n\n`defapplet` - is not useless. It does one pretty important thing - it wraps all functions passed in it to var. It allows to do interactive development which is pretty cool. Consider following example:\n\n``` clojure\n(defn draw []\n  (ellipse 50 50 100 100))\n\n(defsketch my-sketch\n  :size [500 500]\n  :draw draw))\n```\n\nIf I start sketch, then change `draw` to draw `(rect 0 0 100 100)` and finally recompile `draw` function without closing sketch - it will immediately use updated version of `draw`. The same effect can be achieved and without macros using following trick:\n\n``` clojure\n(sketch \n  :size [500 500]\n  :draw #'draw))\n```\n\nBut it is not very user-friendly and we requires long explanation which might be difficult for newcomers in clojure. \n\nPersonally I would recommend using `defsketch` while interactive development and switch to `sketch` function when \"exporting\" your work.\n\nIf you have proposals how we can improve these macros - I would be happy to discuss. \n. Hi Phil.\n\nIt depends on what editor you're using. I'm not sure you can achieve dynamic reloading with `lein run`. Have you tried LightTable? There is a small [tutorial](https://github.com/quil/quil/wiki/Dynamic-Workflow-%28for-LightTable%29) of how to start with Quil and LightTable.\n. I think it might be harder to achieve dynamic reloading from plain REPL than from emacs :)\nIn emacs my workflow is following:\n1. Open file with sketch.\n2. Evaluate the whole file using `C-c C-k`. It will launch a sketch.\n3. Modify functions, e.g. `draw` and reevaluate only this function using `C-c C-e`. After that you should see changes.\n\nNote that you should use `defsketch` to launch sketch if you want to get live reloading. `sketch` might not work.\n. I've just updated the page. It had contained incorrect (I didn't do a good job last time when updated it).\nNow it have new instructions and should reload without creating new window.\nBut I would suggest to try evaluating clojure not in cider REPL but in directly in file via `C-c C-e` keys. Or in LightTable. \n. Closing this long-standing issue. We have few tutorials of how to run Quil in REPL/LightTable and if there is still problems - please ask in google group: https://groups.google.com/forum/#!forum/clj-processing\n. Hi Kyle. \nSorry for delay.\nHave you though about/tried fixing `defapplet` macro so it doesn't wrap size inside `(var ...)`? \n. Thank you for the PR but I decided to avoid wrapping size to `(var)` at all. \n. Nice! Diddn't know that it's possible to get `PGraphics` from applet.\n. @samaaron yes I mentioned it in issue: `.size` doesn't set size - it post runnable on ui thread which change size. So actual size change happens in another thread and you can't be sure it happens before we call `(width)` or `(height)`.\n. @samaaron I can try to \"wait\" until all events in AWT event thread are consumed by posting empty runnable to this method [invokeAndWait](http://docs.oracle.com/javase/6/docs/api/javax/swing/SwingUtilities.html#invokeLater%28java.lang.Runnable%29). But it looks weird.\n. I tried it and worked. Check #65.\n. @samaaron hi! What is you current plans for release? It's been 2 months since last commit. What do you need for release? I can help. Or release SNAPSHOT version so we can use it for now.\n\nThank you \n. Anyone alive here? :) Any plans for future of quil?\n. Version 1.7.0-SNAPSHOT is available on clojars. Everyone is welcome to can with it and leave feedback/report problems.\n\nNikita\n. Released!\n. What exactly happens? It does work fine for me.\n. I have #24 error sometimes. It's not what you are talking about, right?\n. Can you test without this pull request? It may be a deadlock caused by it.\n. What is your environment?\n. `:on-close` handler is available in `1.7.0-SNAPSHOT` version that can be used to implement exit on close behaviour. This should work:\n\n``` clojure\n(defsketch my-sketch\n  ...\n  :on-close #(System/exit 0))\n```\n\nIs it ok?\n. I decided to add `:exit` option for `:on-close` handler so user doesn't need to know about `(System/exit 0)` and can just pass `:exit` like this:\n\n``` clojure\n(defsketch my-sketch\n  ...\n  :on-close :exit)\n```\n\nSo I reopen the bug until it's done. \n. Implemented as `:features [:exit-on-close]`\n. Hi\nI've investigated this issue a bit and got following results: it's processing's issue, not quil's. For some reason in `fill` method is always expects color in ARGB format so if you want opaque color you have to set highest bits to FF: `0xFF0000FF` instead of `0x0000FF` (blue color). So if it were java adding explicit alpha part to color would be sufficient.\n\nBut we are using clojure here :\\\n\nThe problem is following - value `0xFF0000FF` is different in java and clojure:  \njava: `0xFF0000FF` = -16776961 (int)\nclojure: `0xFF0000FF` = 4278190335 (long)\n\nQuil tries to convert all values passed to `fill` method to int using `int` function. But clojure's `int` function doesn't allow overflows, so it throws exception if value is greater than max int (it's our case).\n\nI found following ugly workaround: you can convert `0xFF0000FF` to int using `.intValue` method of `Long`:\n\n``` clojure\n(fill (.intValue 0xFF0000FF))\n```\n. Thanks, it does solve the problem! I was wrong and it was quil's fault. Thanks for suggesting `unchecked-int`.\n. Hi Bartek\n\nIt should work out of the box if you're using `defsketch` for creating sketches. If you're using `sketch` you can try following:\n\n``` clojure\n(defn draw []\n    ...)\n\n(sketch :draw (var draw))\n```\n\nCheck clojure doc on [vars](http://clojure.org/vars). It may help a little.\n. Weird. It should work with `defsketch` even without `(var draw)`.\n. It looks like answer is \"no\". Closing question.\n. Hi. Sorry for delay.\nThank you for the pull request!\nCould you please add few bureaucratic improvements:\n1. Squash all commits to one. [Tuorial](http://blog.steveklabnik.com/posts/2012-11-08-how-to-squash-commits-in-a-github-pull-request).\n2. Order functions in alphabetic order: there are **a lot** of functions in `core.clj` at it becomes important for them to be ordered.\n\nThank you,\nNikita \n. Hi. You can try to imitate meta from other functions. I will order other functions in`core.clj`. As for updating pull request - just close this one and create new one. I'm not sure you can 'clone' pull request.\n. I haven't worked with processing.video but still can try to help. Is there any particular problems you're facing?\n. Hi Patrick\nAre you still up to this task? I can help you if you want.\n. @tangrammer, @phiat  can you give link to any working example, no matter how hacky and ugly it looks like?  \n. As I see, the main problem here is this native libs that need to added to resources folder. But we want to pack them into jars so they can be easily included in project.clj... \n@tangrammer, did you try to pack all this `lib/macosx64` resources into a jar, install it into local lein repo and include it as dependency?\nI suppose it should be possible to do something like this. Though I'm not sure how. Could you check it, if you have time for it? \n. Cool. So it does work from jar, right? \n. Few other points:\n1. I saw you created `IMovie` interface and `quil.Applet` implemented it. Why not just add `movieEvent` directly to `quil.Applet`?\n2. Once we figure out how to pack native libs into jars so they work, we could use other libs `jna.jar` and `gstreamer-java.jar` from maven. I hope jar available on maven has same version which is used by Processing.\n3. The only thing left is `video.jar`. I think we can uppload `video.jar` along with `video-native.jar` to clojars under `quil` group.\n. I haven't worked on it since then. Would be happy if someone continued working on it. I can help with native resources if needed, as I had fun while preparing opengl deps for Quil so my experience might be useful.  \n. Michael, I'd suggest to try and make it work for you setup using whatever hacks you might need and then we can have a look and see how to make it general and compatible. I you already have a setup which does it - please post a link here.\n. Took a look at processing.video. I think a jar to clojars is pretty straightforward. The hard part is how to serve libraries (non-java libraries). In my Processing/libraries/video folder I see 97mb of libraries for Windows and MacOS. Uploading them to clojars doesn't seem like a good solution. Ideally there should be something like a script that downloads them to your computer when you \"enable\" video for quil. If lein had something like post-dependency-included-hook that would do it. But I don't know how to do it. \n. I've added your code to quil2.0 branch. Thank you! \n. Thank you!\n. Hi. Could you add full example (check `examples` folder for examples)?\n\nThank you, \nNikita\n. Cool. Thank you!  \nI think `require-bindings` means that function depends on current surface (it should be invoked inside applet like in `draw` or `setup` function) so they should be  `true`. I'll update them.\n. Hi George, thank you for heads up.  \nPersonally I don't see much point in `textWidth(char)` method when we have `textWidth(String)`. So for now I'll delete it. If someone really needs it we can add later. I think in clojure character are less often used that in java.\n. Fixed by #168.\n. Thanks. I'll check if it reproduces in quil 2.x branch.\n. Yep. As you said it was fixed in Processing 2.0 and it works find in quil2.0 branch.\n. Hi Max\n\nYou can use [load-file](http://clojuredocs.org/clojure_core/clojure.core/load-file) function to load file that is not in classpath. After this you should be able to use `docs.cheat-sheet-gen` namespace.\n. Something like:\n\n``` clojure\nuser=> (load-file \"docs/cheatsheet/cheat_sheet_gen.clj\")\nuser=> (docs.cheat-sheet-gen/bla-bla-bla)\n```\n. Hey, Chuck. Any success on cheat sheet?\n. Docsite now has links to processing page for almost all functions! \nCheck it here: http://quil.info/shape.html#3d-primitives\n. 50% of all functions covered.\n. Finally we did it! Thanks @norgat for helping with final bits of snippets.\nThere are still some functions left to be covered but they're mostly not easy to test in snippets and require special treatment.  \nBut I think this issue can be closed. As a result I found a few bugs in quil during adding snippets so they were worth it.\n. Quil aot-compiles some of it code and if we move quil to 1.6.0 than it won't work under 1.5.1. That's why we can't move 1.6.0 and have to use 1.5.1. We still should test it under 1.6.0 though. I can't think of nice way to do it because we need to test quil compiled by clojure 1.5.1 but in a project that uses 1.6.0. It would be nice if we could somehow set up `project.clj` to allow us to do it. \nAny ideas welcome.\n. It will work in 1.6 and 1.7, but will fail on 1.5. I agree that we can probably drop support of 1.5 now.\n\nI'd love to migrate to 1.7 and start using reader conditionals instead of cljx, but I don't think it is feasible now as it means breaking 1.6. \n. Which version of quil are you using? I suspect that `regitserMethod` was added in Processing 2 therefore you need to use Quil 2 which is not released yet, but you can try SNAPSHOT version: https://clojars.org/quil/versions/2.0.0-SNAPSHOT \nActually `registerMethod` is even used in Quil 2: https://github.com/quil/quil/blob/quil2.0/src/quil/applet.clj#L287 so it is definitely possible to call this method. \n. Updated! \nSnippet tests actually found an error caused by migration so they're not useless after all. Hurray!\n. Hi Yury\n\nNo, unfortunately there is no jar with sources that contains exactly the same code that was used to compile `processing-core` jar. But you can browse through processing github repo, specifically check version 1.5.1 (the one that was used for quil 1.7.0): https://github.com/processing/processing/tree/processing-1.5.1\nBe aware though that sources for 1.5.1 on github may be slightly different from the ones that were used to compile jar. But in most cases they should be the same.\n\nDo you have any other questions?\nPlease close the issue once they are resolved. \n. Hi\n\nI believe it how live mode works in lightable. It reevaluates the whole tab on each change, that is why  new sketch starts on each change. So it is not quil bug but rather incompatibility of `defsketch` and live mode. There are few ways to fix it:\n\n1 - You can disable `defsketch` after you launched first window by adding `#_` before `defsketch`:\n\n``` clojure\n#_(desketch bla-bla\n  :title \"Bla-bla\"\n  :draw draw\n  :size [100 200])\n```\n\nWhen you need to restart sketch - you close existing, remove `#_`, new sketch launches and then you add `#_` back.\n\n2 - You can change workflow to not use live mode. That is actually how I prefer to work. Initially I open tab and evaluate everything using `Ctrl+Shift+Enter` hotkeys. It launches new sketch. When I need to modify some part of code, e.g. `draw` function, I modify it and reevaluate only it by `Ctrl+Enter` hotkeys.\n\nHope this helps.\n. Cool. Please close the issue once you're satisfied with results.\n. Hi\nCould you please repost your question to quil mailing list: https://groups.google.com/forum/#!forum/clj-processing ?\nMailing list is better place for such questions because it is not really an issue with quil but rather \"How to use\" question.\nClosing this issue.\n\nThanks!\nNikita\n. Great, thanks!\n. Related thread on jogl forum:\nhttp://forum.jogamp.org/Creating-an-executable-jar-file-td3011748.html\n\nAnd FAQ section:\nhttps://jogamp.org/wiki/index.php/JogAmp_JAR_File_Handling\n. Fixed by creating fat jar for jogl and gluegen-rt libraries. More details how it was done here: https://github.com/quil/quil/wiki/Dev-notes#updating-jogl-and-gluegen-rt-jars\n. :require/:refer is preferred form over :use. See this question http://stackoverflow.com/questions/10358149/in-clojure-1-4-what-is-the-use-of-refer-within-require\n\nThank you for noticing contradiction! I will update README.\n. Can you split it to 2 different pull different pull requests? \n. And general question regarding `:on-close`.\nWhy did you decide add new option `:exit-on-close` instead of adding special value for `:on-close`?\n. Great, thanks!\n. Question about snippet: why `(image orig 0 0)` draws nothing? \n. In your project you misspelled `:rendered :pdf`. Should be `:renderer :pdf`. After I fixed it, sketch created pdf file with a diagonal line. So I suspect it works fine.  \n`processing.pdf` doesn't provide any new api - it just provides `PGraphicsPDF` class which is created automatically by Processing itself and we don't need to wrap/call anything.\n`processing.pdf`: https://github.com/processing/processing/blob/master/java/libraries/pdf/src/processing/pdf/PGraphicsPDF.java\n. Well, someone may want to call `.nextPage` on pdf graphics object. But I doubt that we should create special wrapper for that (at least for now). Our current goal - preserve same PDF behaviour as in Quil 1.7.0.\n. Cool, thanks!\n. Thanks!\n. Hi Dan.\nProcessing has beta-version of retina support: http://wiki.processing.org/w/Supported_Platforms#Retina_Support . You can use it in quil by using `processing.core.PGraphicsRetina2D` as renderer. Try following:\n\n``` clojure\n(defsketch sk\n  :title \"Retina support\"\n  :draw draw\n  :size [500 500]\n  :renderer \"processing.core.PGraphicsRetina2D\")\n```\n. Forgot to add - it is available only in Quil `2.0.0-SNAPSHOT` and not in released `1.7.0`.\n. Not sure. Looking at Processing docs they mention only support 3.0 which is still in alpha: https://github.com/processing/processing/wiki/Supported-Platforms#retina-support \nI don't know if older ways still work.\n. Wow. That's embarrassing. Thanks, will fix it.\n. Weird. Real link actually works:\nhttp://cloud.github.com/downloads/quil/quil/readme-oh-so-many-grey-circles.png\nBut on github page it is being replaced with:\nhttps://camo.githubusercontent.com/abbf97c0ede90ea785edbd2b27c5f43c3488a6a1/687474703a2f2f636c6f75642e6769746875622e636f6d2f646f776e6c6f6164732f7175696c2f7175696c2f726561646d652d6f682d736f2d6d616e792d677265792d636972636c65732e706e67\nwhich doesn't work. Probably something broke on their site. \n. Fixed.\n. Checked on my machine - no flickering on linux. \nCan you try it again with quil 1.7.0 and say if flickering remains?\n. Another question: what renderer are you using?\n. Shaders were added in processing 2.0. Are you using them? Or may be you're using some library which uses them? If no - try to clean project `lein clean` and then try again. \n. If flickering is not present on 2.0.0 then I would close the issue. \n. I believe the reason why we see the lag is that point is drawn inside `draw` function which is invoked repeatedly independent from `mouse-moved` callback. For example.\n1. On millisecond X `mouse-moved` was called and new x and y were saved in atom.\n2. On millisecond X+100 `draw` was invoked, which drew the point in old x and y position. In the same time you already moved mouse cursor away from the old point. \n\nThe same behaviour you can see in Processing itself:\n\n``` java\nint x;\nint y;\n\nvoid setup() {\n  size(200, 200);\n  smooth();\n}\n\nvoid draw() {\n  background(125);\n  strokeWeight(20);\n  stroke(10);\n  point(x, y);\n}\n\nvoid mouseMoved() {\n  x = mouseX;\n  y = mouseY;\n}\n```\n\nAs for how to solve it - you can draw point inside `mouse-moved` itself. This will make the lag much less noticeable. \n. I don't know. \nYou can check current frame using [current-frame-rate](http://quil.info/environment.html#current-frame-rate) function. I guess it might be less than 60fps in actual sketch. You can draw current frame rate on a screen, for example. \n. Have you tried drawing it on the screen instead of printing to console? I think console operations may slow down the whole function.  \nThinking about it - it would be nice to have some standard way to measure sketch \"speed\". Food for thoughts :)\n. Closing this issue. Looks like the problem with renderers in processing itself. If you think that there are things to fix in Quil itself - feel free to reopen.\n. Have you tried `:p2d` renderer? OpenGL renderer should not be used directly unless you know why you need it (at least that what I've read somewhere on processing website or source code). p2d internally uses OpenGL so it should be fine. \n. Ah, so you used 1.7.0 before? :)\n. Ah, stupid me. Should read reports more carefully. Closing the issue.\n. Quil 2.0.0 has been already released. Here is release notes: https://github.com/quil/quil/blob/master/RELEASE-NOTES.md\n. Have you run `lein test`?\n. Cool. Thanks! \n. Hi Christopher\nI'd suggest to check how it is done in inkwell library, which I mentioned above. And then try to implement something similar.\nNikita\n. Yay!\n. Thanks! \n. Will test it next week when I get access to 2 monitors and then release.\n. Hi Valentin\n\nWhat jdk are you using? Are you sure there are no other processing jars/classes on classpath? Did you try switching to clojure 1.5.1? And finally, what does `lein deps :tree` return?\n. Good catch. Thanks! \nI think we can have quite a few of such outdated notes. I don't think anyone recently checked that our docstrings are up-to-date compared to Processing ones.\n. Cool. Thanks!\n. Please add description, stating how to run the tests.\n. Here, to the pull request.\n. Please merge your branch with master branch. Currently there are conflicts.\n. We can update wiki and templates once 2.2.2 released. \n. Fixed by https://github.com/quil/quil/commit/6aee3513b9c214b1b7b4cefa1241440482d310c0\n. So after this PR is merged command for testing cljs will look something like this:\n\n``` shell\nlein with-profile test-1.6.0 do compile, ring server\n```\n\nRight?\n. Thanks!\n. Could you also print exception stacktrace?\n. Great. I like such bug fixes :)\n. We don't need to expose packing/unpacking to the user. I would suggest to do something like this:\n\n``` clojure\n(defn pixels []\n  (let [proc (current-graphics)]\n    (.loadPixels proc)\n    (let [pix-array (.toArray (.-pixels proc)]\n      (set! (.-stored-pix-array proc) pix-array)\n      pix-array)))\n\n(defn update-pixels []\n  (let [proc (current-graphics)\n        pix-array (.-stored-pix-array proc)]\n    (.set (.-pixels proc) pix-array)\n    (.updatePixels proc)))\n```\n\nI haven't tested the code, just wanted to show the idea. User doesn't need to know about internal packing/unpacking - it's even hidden from us. And behaviour is the same as clj Quil.\n. User don't need to work with `imageData`. We call `Processing.pixels.toArray()` method which returns packed array of ints. Each int is a color. We give that array to the user. He modifies it and then he calls `update-pixels`. In `update-pixels` we set `imageData` to be content of the array using `Porcessing.pixels.set(array)` method. Packing and unpacking is done for us by `pixels.toArray` and `pixels.set` methods.\nCheck the code I provided. It should do it. \n. Thanks!\n. Hi Alexei. \nAs Maksim mentioned - you should use `background` function for that. I see that you already call it - but only in `setup`, which is called once. You should call it in `draw` instead. Example:\n\n``` clojure\n(defn draw\n  (q/background 255)\n  ; all other drawings here\n  )\n```\n\nAs side-note, you may want to check [functional mode](https://github.com/quil/quil/wiki/Functional-mode-%28fun-mode%29) middleware. It helps you to handle the state of the sketch. \n. Thanks. I've fixed it. Feel free to fix it yourself next time - wiki is open for everyone to edit. \n. Thanks!\n. Has anything changed? Why wasn't the test enabled for cljs initially?\n. Weird. It would be good to know how it was fixed. But probably that's not so important at the moment..\n. Hi Bobby\nSemantics of `pixels` function was changed a bit. Now each invocation of `pixels` calls `.loadPixels` internally so you cannot call it for updating every pixel. You should save an array you got from `pixels` and update it:\n\n``` clojure\n(let [pxs (pixels)]\n  (doseq [...]\n    (aset-int pxs (+ x (* y (width))) (color bright))))\n(update-pixels)\n```\n. Thanks, I'll check if it works with Java2D and update the docs. Reopening bug for now so I don't forget about it.\n. Thanks a lot!\n. Hi Stuart.\n`map` returns a lazy sequence so invocations of `q/ellipse` are not evaluated until you request it explicitly. In your case you're just calling `map` and not using result. `map` is used when you need to transform some collection and get new collection as the result. In you case you want to perform perform side-effect operations. For that you should use [`doseq`](http://clojuredocs.org/clojure_core/clojure.core/doseq):\n\n``` clojure\n(doseq [point state]\n  (q/ellipse (:x point) (:y point) 10 10))\n```\n\n Alternatively you can force the result of `map` to be evaluated by using [`dorun`:](http://clojuredocs.org/search?x=0&y=0&q=dorun&lib=clojure_core)\n\n``` clojure\n(dorun (map #(q/ellipse (:x %1) (:y %1) 10 10) state))\n```\n\nBut I prefer `doseq` as it more explicitly shows that I'm doing some side-effecting here.\n\nIt is quite common confusion when dealing with `map`, so you should be aware of it. Consider this artificial example:\n\n``` clojure\n(defn load-users [ids]\n  (with-open-database [db (get-db)]\n    (map #(load db %) ids)))\n```\n\nThis function does following:\n1. Open database.\n2. Creates lazy seq containing specified users.\n3. Closes databases.\n4. Returns the sequence.\n   But the problem is that users are not loaded as you get lazy sequence. When you try to get first element of the sequence, `(load db some-id)` is be invoked but the database has been already closed and you get an exception. So here you have to force evaluation of all elements in the sequence using [`doall`](http://clojuredocs.org/clojure_core/clojure.core/doall): \n\n``` clojure\n(doall (map #(load db %) ids))\n```\n\nRule of thumb for me when I get weird exceptions is to try to force evaluate all sequences and see if it works.\n\nHope this helps. If it solved your problem - please close the issue.\n\nThanks,\nNikita \n. Daniel, did Maksim's answer resolve your issue? Feel free to ask, if you have more questions or close the issue if you're satisfied.\n. Closing this issue. Feel free to reopen if you still have problems.\n. Yes, please update version to `2.2.3-SNAPSHOT`.\n. Nice. Can you squash all commits to a single one so intermediate commits are not visible? http://eli.thegreenplace.net/2014/02/19/squashing-github-pull-requests-into-a-single-commit/\n\nThanks\n. Hi Rasmus\n\nCan you provide crash logs? Who knows, they might help. It would be cool too if you tried running p3d sketch in Processing itself: http://processing.org/ It should be pretty simple, just download and run. I believe they even include samples so you don't need to write your own sketch.\n\nCould you also try running the sketch via `lein run`? You might get more information as in cider messages are printed in different buffers and it is easy to miss something. \n. I think there is little we can when \"A fatal error has been detected by the Java Runtime Environment\". I don't think you can catch and ignore it, jvm simply shuts down, you cannot catch error and ignore it.\n\nThanks, Rasmus. Closing the issue.\n. Cool, thanks!\nI wonder what is the reason of so many repetitions.\n. Good catch. Thanks! \nI uploaded snapshot version that includes your fix: https://clojars.org/quil/versions/2.2.3-SNAPSHOT\n. Good. Test went well.\n. Hi Giuseppe. I think I saw similar issue on macos. The problem was that\nquil creates window with the sketch, but it is hidden, not focused. Can you\nlook through all opened windows and make sure that quil is not there?\n\nThanks,\nNikita\n\nOn Sun, Nov 30, 2014, 17:41 Giuseppe Capizzi notifications@github.com\nwrote:\n\n> This is my Java version:\n> \n> [~] java -version\n> java version \"1.7.0_45\"\n> Java(TM) SE Runtime Environment (build 1.7.0_45-b18)\n> Java HotSpot(TM) 64-Bit Server VM (build 24.45-b08, mixed mode)\n> \n> I'm in Mac OS X 10.9.5.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/quil/quil/issues/145#issuecomment-64990909.\n. You can also try using older versions of quil, e.g. 1.6. There were some refactorings made in 2.0 and I'm thinking whether they might have affected it.\n. Just tried on macos. As I said it creates sketch but it is in another window and you might need to switch to it if you're running emacs/console full window. Please verify that it works for you.\n. It definitely should be fixed, but I haven't found any ways to bring sketch to front. Glad to hear any ideas of how to fix it. For now I'll add comment in wiki saying that fullscreen terminal is not very friendly to sketch.\n. Updated FAQ to mention the problem: [link](https://github.com/quil/quil/wiki/FAQ#i-cannot-see-sketch-on-os-x)\n. I'll leave it open for now. Thinking about adding info message in console when you start sketch on OS X. \n. Decided against having message in console. Might be too annoying to see it each time sketch is started. \n. Hi Navin\njre-headless is a version of jre that doesn't have any graphics component and quil requires these components in order to show animations. So you have 2 choices:\n1. Install full version of JRE that includes graphics components.\n2. Use Quil on ClojureScript - it doesn't require graphics stuff from JRE because it only compiles cljs code to js. And then you run the sketch from a browser.\n\nI would recommend 1 because regular quil supports live reloading and generally it is easier to work with it.  \n. Cool. Thanks! Closing the issue.\n. What command are you using to start sketch? Does it really return nil or something like `#<Applet quil.Applet[panel0,0,0,500x300,layout=java.awt.FlowLayout]>`? \nThere is an issue with osx that sketch window is started in background, check #145 \n. Closing this issue. Feel free to reopen if you still have problems.\n. Hi Louis\n\nBy user painting a picture on the display you mean using some third party software like paint, photoshop and your program will read it from the screen in realtime? If so, I don't think it is possible to achieve with Quil/Processing, as it seems quite low-level and very OS-specific. \n\nOn the other hand if you want to create a sketch where user can draw (and you implement draw logic like mouse handlers and so on) then you definitely can read this display data. \n. Yes, pixels should do the work. Don't forget that to after you changed pixels array you should call [`update-pixels`](http://quil.info/api/image/pixels#update-pixels) to apply the changes.\n. Hi Thorsten\n`java.awt.HeadlessException` usually means that JDK you're using doesn't have components for dealing with graphics, which is essential for Quil. Can you check you JDK version? And which OS are you using? Also take a look at #146, which deals with the same issue.\n. Hi Timur\n\nQuil provides only primitives for drawing figures, it doesn't provide any modeling elements, you have to implement them yourselves. I usually represent elements as simple maps and implement functions that take this maps and draw object using Quil functions. This also allows easily extend my elements with additional data as they're simple maps and I can freely add new fields. \nIf you want, you can provide your current code and I could try to help adding dragability to it.\n\nNikita\n. Hi Kaiyin\n\nQuil doesn't provide tools to render TeX equations. You can use [JLatexMath](http://forge.scilab.org/index.php/p/jlatexmath/) to render equations into png file. If you want to embed it into Quil sketch you can then simply render result png file using [load-image](http://quil.info/api/image/loading-and-displaying#load-image)/[image](http://quil.info/api/image/loading-and-displaying#image) combination. JLatexMath is present in maven so it is easy to include into leiningen project.\n\nNikita\n. Closing issue. Feel free to reopen if you have other question or ask in [google group](https://groups.google.com/forum/#!forum/clj-processing)\n. Hi Timur\n\nTake a look at [rect](http://quil.info/api/shape/2d-primitives#rect) method which takes 5 arguments. Last argument is corner radius. Also you can use google group [clj-processing](https://groups.google.com/forum/#!forum/clj-processing) for similar questions. It is usually used to discuss implementation questions.\n\nThanks,\nNikita\n. Hi David\n\nDoes youi file has -main function? If you specify :main option in\nproject.clj file the namespace must have -main function. Check this:\nhttps://github.com/technomancy/leiningen/blob/master/sample.project.clj#L196\nOr more quil-specific instructions for building runnable jar:\nhttps://github.com/quil/quil/wiki/Runnable-jar\n\nNikita\n\nOn Wed, May 6, 2015 at 2:49 PM David Siah notifications@github.com wrote:\n\n> Hi I have the simple hello-quil example working however I recieve a\n> bizarre error when I run the lein run command. I did add the :main as\n> \n> :main hello-quil.core\n> \n> and I also added\n> \n> [quil \"2.2.5\" :exclusions [org.clojure/clojure] ]\n> \n> because lein pulled down a bunch of different versions of clojure\n> previously and recommended that add that exclusion.\n> \n> $ lein run\n> Exception in thread \"main\" java.lang.Exception: Cannot find anything to run for: hello-quil.core, compiling:(/private/var/folders/r_/v1q42f254450q9lz8ty2zyc80000gn/T/form-init8517717259846406503.clj:1:124)\n>     at clojure.lang.Compiler.load(Compiler.java:7142)\n>     at clojure.lang.Compiler.loadFile(Compiler.java:7086)\n>     at clojure.main$load_script.invoke(main.clj:274)\n>     at clojure.main$init_opt.invoke(main.clj:279)\n>     at clojure.main$initialize.invoke(main.clj:307)\n>     at clojure.main$null_opt.invoke(main.clj:342)\n>     at clojure.main$main.doInvoke(main.clj:420)\n>     at clojure.lang.RestFn.invoke(RestFn.java:421)\n>     at clojure.lang.Var.invoke(Var.java:383)\n>     at clojure.lang.AFn.applyToHelper(AFn.java:156)\n>     at clojure.lang.Var.applyTo(Var.java:700)\n>     at clojure.main.main(main.java:37)\n> Caused by: java.lang.Exception: Cannot find anything to run for: hello-quil.core\n>     at user$eval5.invoke(form-init8517717259846406503.clj:1)\n>     at clojure.lang.Compiler.eval(Compiler.java:6703)\n>     at clojure.lang.Compiler.eval(Compiler.java:6693)\n>     at clojure.lang.Compiler.load(Compiler.java:7130)\n>     ... 11 more\n> \n> Thanks\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/quil/quil/issues/153.\n. Quil provides 2 modes: \n1. Regular one, when you handle state changes by your own. In that mode `draw` function doesn't take any arguments and there is no `update` function.\n2. fun-mode, which is [functional mode](https://github.com/quil/quil/wiki/Functional-mode-%28fun-mode%29). It is enabled by adding `fun-mod` middleware to list of middlewares when you create a sketch. In that mode `draw` has to take a `state` argument. And also you can provide `update` function which updates the state on each tick.\n\nYou have to be careful and have correct version of `draw` depending on which state you're using. In your case above you're creating 2 sketches at the same time (which is probably wrong, I think you need only the sketch in `-main`). You need to figure it which mode you want to use and then use correct mode in the sketch inside `-main`.\n\nI think documentation is correct. Confusion comes from the fact that `lein new quil bla` generates a new quil project with default sketch which uses `fun-mode`, while \"runnable jar\" tutorial uses regular mode. \n. Good point, thanks for the suggestion! I'll add it this week. Or you can do it, if you want. Should not be hard to do. \n. Thanks for fixing.\n. Great. Thank you! \n. Can you provide an example? \nI have feeling that the answer will be \"it is limitation of processing.js\" which quil uses under the hood.\n. `blend-color` was indeed broken! Thanks for clear and concise reproducible test case, it was very helpful. \n\nAs for transparency - looks like we pass transparency to processing js all the way down to WebGL calls, but for some reason it doesn't work. I'd say it's something to do with processing js. Also saw this post: https://groups.google.com/forum/#!topic/processingjs/h2y2Aph89E4 Seems like other people having troubles with transparency in 3D too.\n. Closing the issue. If you have any other questions/ideas - feel free to reopen. \n. I pushed to clojars version 2.2.6-SNAPSHOT which contains the fix. \n. Hi Mika\nCurrently clojurescript version of quil doesn't have built-in support for live reloading. But I think you can do it pretty easily yourself. Try wrapping `draw` into anonymous function:\n\n``` clojure\n(q/defsketch my-sketch\n  :host \"canvas\"\n  :draw #(draw)\n  :setup setup\n  :size [300 300])\n```\n\nThis quil will always be calling `codejam-practice-solutions.core/draw` and reloading should work. \n. Please say if it helps. I don't use figweel or any other tool for live reloading of clojurescript so I can't check. If it works - we probably should include it into quil itself. \n. Great. I'll add it to quil itself.\n\nOn Fri, May 29, 2015, 09:49 Mika Vilpas notifications@github.com wrote:\n\n> Yep, sure enough, your method works perfectly - wrapping the function\n> calls in an anonymous function allows them to be reloaded like everything\n> else with figwheel. Thank you!\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/quil/quil/issues/157#issuecomment-106869058.\n. Mika, could you try version 2.2.6-SNAPSHOT? I added live reloading to clojurescript version and would be glad if you tested to make sure it works. \n\nThanks! \n. Cool, thanks for confirmation. I released 2.2.6 which contains the changes.\n\nOn Fri, Jun 5, 2015 at 8:21 AM Mika Vilpas notifications@github.com wrote:\n\n> Hi again, I finally got a chance to try this out. It seems to work in\n> 2.2.6-SNAPSHOT right out of the box. :)\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/quil/quil/issues/157#issuecomment-109325973.\n. For teaching purposes you can also try ClojureScript version of Quil. Since 2.2.6 quil supports live reloading if you're using plugins like figwheel to dynamically reload code as you modify it. This way there shouldn't be any macos-specific surprises as you'll be using chrome/firefox/safari which Quil equally supports. \n. Hi Andrea\n1. Agree, it is quite confusing that in cider all exception stack doesn't go to repl buffer. Actually it goes to another buffer `*nrepl-server*`. I believe if you switch to that buffer you'll see the stacks. For debugging purposes you can use [pause-on-error](http://quil.info/api/middleware#pause-on-error) middleware. Actually it was inspired by the inkwell library your mentioned. There is an open issue for redirecting stack traces to repl buffer [#115](https://github.com/quil/quil/issues/115), but doing so hurts performance a little bit so I don't want to enable it by default. I'm thinking about adding it to the `pause-on-error` middleware.\n2. Didn't understand the second question. Can you elaborate on the workflow you're thinking about? What should it draw and how do you want to interact with the sketch? \n. 1. Yes, it is still the same issue. Draw/update and other functions run in separate thread and output from that thread doesn't go to repl but to `*nrepl-server*`. \n2. Usually people clear the sketch on each frame and redraw everything. But if you want - you can clear sketch only when needed and each frame will be adding new shapes, thus avoiding needless redrawing. I did it for drawing trees recently: when I drew branches I didn't clear older branches so that at each point of time I had to draw only new branches, which drastically improved performance. \n. Closing this issue. @AndreaCrotti, if you have additional question feel free to reopen this issue or ask on [clj-processing](https://groups.google.com/forum/#!forum/clj-processing).\n. Looks good. `reductions` is definitely more appropriate here. Thank you!\n. Seems like it is issue of processing itself: they don't check whether noFill is set when drawing text. Added the check in Quil. @Rorschach22, thanks for reporting!\n. Hi Abel. \nI think if you call `(redraw)` anywhere in listener - it should be fine. It should redraw sketch using new state after handler is finished. It works like this:\n\n``` clojure\n\n(defn mouse-moved [state event]\n   (redraw) ; mark sketch to be redrawn on next iteration\n   (let [new-state ...]\n      new-state))\n\n; next iteration - 'redraw' flag is true\n; redrawing sketch using new state and set flag back to false\n```\n. Closing this issue. @abelnation i, if you have additional questions feel free to reopen this issue or ask on [clj-processing](https://groups.google.com/forum/#!forum/clj-processing).\n. Hi Nathan\n\nYes, I believe the best way to draw squiggle is to use `mouse-moved` or `mouse-dragged` events. And \"previous point\" should match current point of last polled location. Here is an example of a sketch that draws connecting line from mouse-dragged event: \nhttp://quil.info/sketches/show/8FoquKaDzP (you can run it from the browser)\n\nAlso if you want to save coordtinates of the squiggle - you can simply have a collection of all points in state and append a new point on each mouse-dragged event. In `draw` function you simply draw squiggle using all points:\nhttp://quil.info/sketches/show/LjeyT85ye8\n\nIn both cases I don't see gaps between lines and everything looks quite smooth. Is it possible that there is a bug in your implementation? Like if you in `mouse-dragged` event you store current and previous points to state and `draw` draws a line between them . What happens if `mouse-dragged` called twice before `draw` is called? \n. Glad I could help! Closing the issue. Feel free to reopen it if you have additional questions or ask on \"clj-processing\" google group.\n. Thanks!\n. Yes, I believe the main reason behind not adding `createShape` is that Quil doesn't have API for working with PShape object. Though you still can access them via java interop:\n\n``` clojure\n(let [shape (.createShape (q/current-graphics))]\n  (doto shape\n    (.beginShape)\n    (.noStroke)     \n    ...))\n```\n\nSo working with shapes is totally possible but in not a very clojury way. Pull requests with adding API (may via new namespace) for working with shapes is welcome! \n\nAs for `vertex`, yes it was designed to work with current-graphics (either applet instance or custom graphics object), but I think you can also use it with shape:\n\n``` clojure\n(q/with-graphics my-shape\n  (q/vertex 1 2 3)\n  ...))\n```\n. I think the reasons was that no one thought it was important enough to work on it. So one can say it is laziness :)\n. Same issue was recently raised in clj-processing group: https://groups.google.com/forum/#!topic/clj-processing/2OJNJUo507w The answer is yes, quil will be migrated to Processing 3. As for actual work, I haven't done anything yet. \n\nAs for estimates I'd say it shouldn't be very hard: I don't think they changed public API much, so most function will stay unchanged. The most fun part will be in quil.applet namespace where we create PApplet and access not so public methods which probably changed. \n\nPersonally I'm planning to do it in following way:\n1. Use Processing 3.0 from pure clojure without quil to create simple empty applet. Just to see if the way to create applets from code has changed. \n2. Update quil `project.clj` to use processing 3 and try to create simple applet from quil. Fix all bugs in quil.applet.\n3. Run tests which exercise all public function in quil.core and fix all broken functions, if any. Check if we need to add new functions.\n4. Check that creating uberjar still works (especially with 3D). \n\nAny help welcome!\n\nI'll keep this bug as main for Processing 3.0 migration.\n. Started today. Progress can be tracked in https://github.com/quil/quil/tree/processing3 branch. Also to have some fun I decided to use this issue and report migration progress here. \n\nSo I started with simple clojure program that uses raw `processing.core.PApplet`. High level API didn't change much. Here is the program: \n\n``` clojure\n(ns proc3.core\n  (:import processing.core.PApplet))\n\n(let [applet (proxy [PApplet] []\n               (settings []\n                 (.size this 200 200))\n               (setup []\n                 (.background this (int 0)))\n               (draw []\n                 (.stroke this 255)\n                 (when (.-mousePressed this)\n                   (.line this\n                          (.-mouseX this) (.-mouseY this)\n                          (.-pmouseX this) (.-pmouseY this))))\n               (exitActual []))]\n\n  (PApplet/runSketch (into-array String [\"Bla\"]) applet))\n```\n\nThe main (only?) difference with processing 2 that `(.size)` method has to be called inside new `PApplet.settngs` method and not from `PApplet.setup`. \n\nAfter that created branch in quil for the migration work. Changed deps to processing 3 and fixed few bugs in `quil.Applet` due to removal `PApplet.resize`. And was able to create a simple sketch from Quil! Used only `(q/ellipse)` so sketch was very simple. Didn't test any handlers or features like :present or :resizable modes. But it looks promising: I didn't expect to get simple sketch working so soon. \n. Things to do:\n- [x] make trivial sketch work\n- [x] check all functions in quil.core\n- [x] check all handler function\n- [x] check dxf and pdf renderers\n- [x] check keep-on-top\n- [x] check exit-on-close\n- [x] check resizable\n- [x] check present and fullscreen size\n- [x] check `:display` option\n- [x] check 3d rendering\n- [x] check uberjar with 3d rendering\n- [ ] add apple.jar to clojars and test on macos\n. Tested handlers - they work as expected. Checked keep-on-top and resizable features. They needed migration as Processing replaced PApplet.frame (which was java class) with their own PApplet.surface w (instance of PSurface interface). Luckily it has all methods we need (setResizable and setAlwaysOnTop), so it was easy to fix. Fixed present and fullscreen mode. Now we don't need to find out size of the screen manually in quil, instead we can just call PApplet.fullScreen. But didn't test it yet with multiple screens, might see some problems.  \n. Status update: \n- found out that latest processing is actually 3.0.1, not 3.0.0 and 3.0.1 is not in maven so had to fallback to hosting processing libs on clojars in quil organization;\n- tested pdf and dxf, work fine. Had to move `PApplet.size()` call for pdf from `PApplet.setup` to `PApplet.settings`, but code became a little bit cleaner. \n- tested p3d renderer and packing 3d sketch to uberjars, had to create fat jars for jogl and gluegen-rt libraries as we did for previous versions of quil;\n- tried to build processing dxf.jar from sources => need processing core.jar => tried to build processing to get core.jar => missing javafx on my machine => decided to upgrade to java 8 to get it => my ubuntu doesn't support java 8 => upgrade to ubuntu 15.10 => ubuntu broke while upgrading => had to reinstall it from usb flash drive => installed openjdk 8 => it doesn't have javafx => realized that I don't need build dxf.jar and can it get by downloading processing distributive from official site;\n\nLatest development version is available on clojars: https://clojars.org/quil/versions/2.3.0-SNAPSHOT so if anyone curious - feel free to try!\n. Tried running all tests (each test exercises some function from quil.core and checks that no errors is thrown, it doesn't check that rendering is correct). Many tests failed. Some due to broken `(width)` and `(height)` function which were easy to fix. Some tests due to internal changes in processing: some functions like `PApplet.copy` can take a `PImage` as source. So some tests create a new graphics, draw on it and then pass it as `PImage` because `PGraphics` externds `PImage`. Unfortunately processing no longer supports. So we have to workaround these tests by not using graphics as PImage.\n\nAlso noticed a bug when you close sketch that uses opengl renderer (which are in the fact p2d, p3d, opengl renderers), then underlying window object doesn't get destroyed and its icon stays in OS' task bar. I found how to destroy it: by getting `GLWindow` object: `PApplet.getSurface().getNative()` and then calling `destroy()` on it. There is a small problem though, if I destroy it immediately on sketch close there is still some delayed task being executed and I get NullPointerException because window was destroyed by the time this task runs. I couldn't find a way to wait until all tasks are done and then destroy window (I'm not that familiar with how jogl library internally works). So I'm thinking about simply waiting for 0.5 sec or so and then destroy window. It's ugly, but hopefully is fine for most usecases and users shouldn't worry much unless they create/close sketches _very_ fast. \n\nUnfortunately my work this weekend wasn't very productive, Fixed width/height, couple of tests and started fixing this destroying-windows things. \n. Tested all functions in quil.core. There was an issue with `(copy)`. The same problem I described earlier: passing `PGraphics` while `PImage` is expected. Also all tests cannot be run in single run, after a while JOGL throws error. I think it might be due to the fact that JOGL not optimized to create windows many times during single JVM run. And in our tests we have a lot (50+) tests that use JOGL renderers (:p2d or :p3d). As workaround I split all tests in sets of 50 tests in each and run single set at a time: `lein test :set-0`, `lein test :set-1`, etc. 4 sets total. \n. Added support for `:settings` callback. It's very similar to `:setup` but should be used only for `(smooth)` and `(no-smooth)` functions in clojure. It's new requirement of Processing 3. \n. Quil 2.3.0 was released today. It uses Processing 3. Closing this issue.\n. Could you try quil 2.3.0-SNAPSHOT which uses recently released Processing 3.0.1? \nhttps://clojars.org/quil/versions/2.3.0-SNAPSHOT\n. Hm, cool! I didn't really expect that it would fix it. \n. Argh, not cool. So processing 3 introduced new method `settings()` that should be used to set size and apparently smooth. I hoped I could keep it hidden in quil so API only has `:setup`. But I think I'll need to make `:settings` available as well only for smooth :( \nReopening this issue. \n. Thanks @GoToLoop. Added support for `:settings` just to support `smooth` and `no-smooth`. Feels ugly and I'm sure will be confusing for users, but couldn't think of a better way to support it. So usage is something like this;\n\n``` clojure\n(q/defsketch my-sketh\n  :settings #(q/smooth 2)\n  :setup setup\n  :draw draw)\n```\n\nUploaded latest version to  https://clojars.org/quil/versions/2.3.0-SNAPSHOT \n. @eigenhombre could you try with 2.3.0 and putting smooth inside :settings? \n. Update what exactly? I did update [smooth](http://quil.info/api/shape/attributes#smooth) and [no-smooth](http://quil.info/api/shape/attributes#no-smooth) docs to reflect the fact that they must be called inside :settings. \n. Looks good! Left few comments about some old functions that can be removed. \n. Check API docs for defsketch: http://quil.info/api/environment#defsketch it has all currently supported options. \n. Awesome, thanks! I'll merge it right now. As for piggybacking on API docs generation for site - good idea. API docs generation is a [script](https://github.com/quil/quil/blob/master/dev-resources/utils/docs.clj) that generates edn file with all functions and docstring. I think we can simply add a call to generate cheatsheet at the end of that file.\n\nAlso can you add instructions to `cheat_sheet_gen` how to generate pdf from tex? As I understand you first run script to generate tex file and then run latex to generate pdf, right? Also what dvi file is used for? \n. Right, I missed pixelDensity :( Didn't see it on Processing 2 => 3 changes pages and thought there were no new methods. I should take a closer look. Thanks for bringing that! Meanwhile as workaround you can try something like:  \n\n``` clojure\n(q/defsketch ...\n  :settings #(.pixelDensity (q/current-graphics) 2)\n)\n```\n\nBasically using java interop to call .pixelDensity() directly. Note that it must done from :settings handler.  \n. Ah, right, graphics is not created yet at this point, but applet is (because settings() called before graphics object is created). Then `(.pixelDensity (quil.applet/current-applet))` might work. I'll try it tonight at home. And work on adding proper support of pixel-density.\n. I also added logic that sets pixel density automatically: https://github.com/quil/quil/blob/master/src/clj/quil/applet.clj#L203. I think it should cover most cases so that users won't even need to be aware of `(pixel-density)` function. \n\n@shaunxcode what do you think? Can it be a problem? \n. Indeed. Thanks for reporting and providing good reproducible example, that helped! Apparently some processingJs functions use values constants instead of ints while we expected only ints (like in regular processing). Actually processingJs source [claims](https://github.com/processing-js/processing-js/blob/master/src/Processing.js#L6476) it takes int values (but in fact they're string) which adds to confusion. \n\nAlso thanks to your report `stroke-join` and `cursor` were fixed as well. \n. Aaah, missed that one. Thanks! :) \n. Agree, that would be quite useful. I'll think about how to implement it. In fun-mode it would be quite easy - all handlers get event object already so I can simply add some logic that adds few new keys to the events. As for standard, non-fun-mode, I'm not sure what the best way to do it. Meanwhile you can access event using `(.-keyEvent (quil.applet/current-applet))`. \n\n@GoToLoop yes, your approach is good but I think it works only for a set of special symbols such that CTRL+Z which have ASCII equivalent. Alt/shift + key don't have special meaning AFAIK. \n. I decided to go with `(q/key-modifiers)` functions that returns a set of currently active modifiers. Unfortunately I didn't find a way to get hold of event object in clojurescript so new function is available only in clojure. \n. Yes, I had this problem as well a few times. Looking at processing.js code which is used by Quil - I don't think there is anything we can do at this point: https://github.com/processing-js/processing-js/blob/master/src/P5Functions/touchmouse.js#L302  \n1. Processing registers mouse wheel event listener on document, not on canvas. \n2. Event object is not exposed in any way so we cannot call .preventDefaul() on it. \n\nI'll file a bug at processingjs repo about it.  \n. Filed a bug on processing.js: https://github.com/processing-js/processing-js/issues/220 \n. Yes, non-repl friendly is a known problem. In clojure (which uses java Processing) methods like `abs` or `sin` are static methods so you can use them without instance of applet. But in clojurescript all methods, like @Norgat mentioned, are instance methods so you have to have an applet. \n\nJared, what kind of repl development do you have in mind with Quil where you want to call functions without applet? So I can better understand how we can improve interface. \n. @GoToLoop that's unfortunate. I had plans to upgrade processing.js dependency to latest :(  I think I'll try it anyway to see if it really so bad. Maybe it's not officially supported but still works with some jumping through hoops. \n. @jaredly I see. Yes, that's a workaround. Though quil was designed with having \"draw\" function that does draw commands inside it and invoked many times per second. Instead you introduce another approach where nothing is being redrawn and instead you call drawing functions separately and their result is stored and not cleared. But I think at the end, if you want to use quil, you still need to go back to \"everything inside 'draw' function\" approach and this switch maybe confusing because user already got used to \"just call any drawing function anywhere and it results stays\". \n\nAlso cool tutorial! Is it cljs-in-cljs? I tried to set it up for http://quil.info/sketches/create but failed. Currently it uses server-side cljs compilation. How hard is it to add cljs-in-cljs support for quil.info do you think?\n. Thanks for the heads up. Yes, we should update quil to use latest processing. Unfortunately I don't think you can pull request as we need to [upload processing jars](https://github.com/quil/quil/wiki/Dev-notes#how-to-update-quil-when-new-version-of-processing-is-released) first and you don't have rights to push to quil repo in clojars. I'll try to do it tomorrow/this weekend. \n. Thanks for reporting! \n. I'm not sure it's possible. Processing `PApplet` class no longer extends awt Applet which means it's not a part of standard swing/awt framework that seesaw uses. Though if you use `:renderer :java2d` it created JFrame and Canvas elements under the hood and it is possible actually get them and add to your swing application created via seesaw, but it might be very fragile/hacky. I tried and couldn't make it work:\n\n``` clojure\n(ns test.core\n  (:require [quil.core :as q]\n            [quil.middleware :as m]\n            [seesaw.core :as c]))\n\n(defn setup []\n  (q/frame-rate 30)\n  (q/color-mode :hsb)\n  {:color 0\n   :angle 0})\n\n(defn update-state [state]\n  (println \"Dooing\")\n  {:color (mod (+ (:color state) 0.7) 255)\n   :angle (+ (:angle state) 0.1)})\n\n(defn draw-state [state]\n  (q/background 240)\n  (q/fill (:color state) 255 255)\n  (let [angle (:angle state)\n        x (* 150 (q/cos angle))\n        y (* 150 (q/sin angle))]\n    (q/with-translation [(/ (q/width) 2)\n                         (/ (q/height) 2)]\n      (q/ellipse x y 100 100))))\n\n(defn create-sketch []\n  (q/sketch\n    :title \"You spin my circle right round\"\n    :size [500 500]\n    :setup setup\n    :update update-state\n    :draw draw-state\n    :renderer :java2d\n    :features [:keep-on-top]\n    :middleware [m/fun-mode]))\n\n(defn main [& args]\n  (let [sketch (create-sketch)\n        surface (.getSurface sketch)\n        canvas (.getNative surface)\n        proc-frame (.getParent canvas)]\n\n    (c/invoke-later\n     (.remove proc-frame canvas)\n     (.setVisible surface false)\n     (-> (c/frame :title \"Hello\",\n                  :content (c/border-panel :center canvas)\n                  )\n         c/pack!\n         c/show!))))\n\n(main)\n```\n\nIt throws error `Exception in thread \"Animation Thread\" java.lang.IllegalStateException: Buffers have not been created` :( But a similar question was asked on StackOverflow and seems like it should work: http://stackoverflow.com/questions/33101812/embed-processing-3-into-swing Maybe I'm doing something wrong. \n. Closing old issue. @APOS80, if you still have problems/need help - feel free to reopen. We can try make it work. \n. Hi Camilo. You could try using [`pixels`](http://quil.info/api/image/pixels#pixels) function. It returns array of all pixels and you can convert it to base64 I assume. I think it will be close enough to byte-array. \n. Closing old issue. @carocad, if you still have problems with this - feel free to reopen it. \n. Hi Isaac. Can you provide more details? What error do you get? Is it compile or runtime error in browser console?\n\nI tested quil with optimization :advanced as part of QA before cutting release. Also quil.info uses :advanced and it seems to be working fine. \n. What version of clojurescript are you using? \n. Is your project available on github so I can try it myself?\n\nOn Sun, 10 Apr 2016, 18:54 Isaac Zeng, notifications@github.com wrote:\n\n> I tested at both version of [org.clojure/clojurescript \"1.7.228\"] and [org.clojure/clojurescript\n> \"1.8.40\"], the same result --- working with quil 2.3.0, not working with quil\n> 2.4.0\n> \n> \u2014\n> You are receiving this because you commented.\n> \n> Reply to this email directly or view it on GitHub\n> https://github.com/quil/quil/issues/182#issuecomment-208118444\n. Indeed. Looks like processing folks forgot to declare `l`. Though I didn't see any problems when using it on chrome/firefox/safari. I still not sure what runtime error you're getting. I'd expect browsers just to declare global window.l variable and proceed with whatever they were doing. Does it interfere with some other global `l` variable? Hm. I assume clojurescript might generate a global function or something named `l`. Is that what are you seeing? \n. Can you try adding externs file that contains just:\n\n``` javascript\nwindow.l;\n```\n\nI believe it should make closure compiler skip `l` variable. https://github.com/clojure/clojurescript/wiki/Dependencies#using-externs\n. Glad to hear you found a workaround. I'll update quil externs accordingly to ignore `l`. \n. So there are multiple ways to do it.\n1. Fix mistake in processing.js in their repo. Out of my control and probably not a critical issue for them.\n2. Fix compiled processing.js in quil/processing-js. That means I have to remember to fix it every time I upload new version of processing.js\n3. Add `window.l;` to externs. Might break if someone uses global `l` identifier on purpose (which I think is  unlikely). \n\nI think (1) is the ideal fix but I don't have much control here. And from (2) and (3) I prefer (3). \n. Indeed. Looking at implementation of `q/exit`: https://github.com/quil/quil/blob/master/src/cljc/quil/core.cljc#L1656 it looks like \n\n``` clj\n(.exit my-sketch)\n```\n\nshould do the trick. I'll try it and then update wiki.  \n. `(.exit my-sketch)` works. Updated wiki. Thanks for reporting!\n. This is related: https://groups.google.com/forum/#!topic/clj-processing/Fegk10gL4P8\n\nBasically you need \n1. Somehow include gifAnimation library to your project. If it's already in maven somewhere - perfect, just add its coordinates to `project.clj`. Otherwise you might need to download it, upload to local maven repo using [`localrepo`](https://github.com/kumarshantanu/lein-localrepo) plugin. \n2. Familiarize yourself with java interop. As you're going to work with plugin - you have to use create java class and call methods on it. \n3. Translate example from gifAnimation readme to clojure. Check thread I mentioned above as example of similar translation. Basically you need to create instance of `Gif` object in `setup` function passing `quil.applet/current-applet` instead of `this`. \n. Added answer in FAQ: https://github.com/quil/quil/wiki/FAQ#how-to-use-processing-plugin Closing this issue. Feel free to reopen if you still have problems/questions.\n. That sounds reasonable. I think I did such cleanup long time ago but probably new reflection calls were introduced since then. Would you be interested in doing? \n. That's fine. You can do it for clj and don't worry about cljs. Once you're ready - you can open pull request and I can test it for cljs. Or you can do it your self, see step 2 in release process: https://github.com/quil/quil/wiki/Dev-notes\n\nAll tests are manual as they involve looking at stuff and checking that it looks reasonable and couldn't think of a good way to automate it. \n. Hi Simon. I believe you can achieve the same effect with public API today. Can you try this:\n\n``` clojure\n(q/with-sketch (q/get-sketch-by-id canvas-id)\n  (q/exit))\n```\n. Yes, keeping reference to actual sketch seems like a better solution than using `get-sketch-by-id`. Glad to see that you made it work! \n. Actually, there is a way. You can use\n\n``` clojure\n(quil.applet/with-applet my-sketch\n  (ellipse 100 100 100 100))\n```\n\nIt's kinda \"internal\" because it's not in quil.core but should work. And I guess it makes sense to make it public as `with-sketch`. Would you be interested in adding it? \n. I mean that `quil.applet/with-applet` is \"private\" I think it should be public by adding it to `quil.core/with-sketch`. This way `with-sketch` is going to work both in clojure and clojurescript. \n. I tried to implement `with-sketch` for clojure but failed. Nothing was drawn on a sketch. I believe Processing doesn't support drawing outside of \"draw\" function. After `draw` is called processing [disposes graphics](https://github.com/processing/processing/blob/master/core%2Fsrc%2Fprocessing%2Fcore%2FPApplet.java#L2430) object and if we try to draw on it from another thread using `with-sketch` nothing will happen. It silently ignores all draw operations. \n\nSome other lifecycle functions like `start-loop` and `no-loop` might still work but it doesn't feel right to support `with-sketch` if only limited number of functions are going to work. I'm closing this issue as \"not feasible\". If anyone has ideas how to fix it - feel free to reopen.  \n. So the only possible way from some other code (like overtone) to write something is to save data into an atom and have sketch `draw` function read this data and draw. There might be small lag between overtone updating atom and sketch drawing it, but given that FPS is pretty high 30-60, the lag should be hardly noticeable. \n. Hi. Sorry for the late reply. I did some debugging and it's indeed impossible to do using only quil API, you'll have to use java interop. So the code will look like this:\n\n``` clojure\n(let [gr (create-graphics spiral-size spiral-size :pdf \"filename.pdf\")]\n  (with-graphics gr (draw-spiral))\n  (.dispose gr))\n```\n\nNote the `(.dispose gr)` call at the end. This call closes pdf writer and flushes all content to file on disk. Actually I think there is a more idiomatic Processing way to do it using `beginRecord()` and `endRecord()` methods, but quil currently doesn't expose them. I'll add `do-record` macro:\n\n``` clojure\n(do-record (create-graphics spiral-size spiral-size :pdf \"filename.pdf\")\n  (draw-spiral))\n```\n. Closing this issue due to inactivity. @Vandan-V-Phadke feel free to reopen it if you still see this problem and want to resolve it. . Hi Harrison. Most quil functions must be executed inside setup/update/draw or handlers because they need to know what \"current sketch\" is. `random` one of such functions: https://github.com/quil/quil/blob/master/src/cljc/quil/core.cljc#L3166 So it is working as intended. Generally quil is not very repl friendly: you cannot just run single quil function like `rect` or `line`. Instead you redefine the whole `draw` function:\n\n``` clojure\ntesting.core=> (defn draw-state [] (q/rect 0 0 100 100))\n; rect is drawn\ntesting.core=> (defn draw-state [] (q/ellipse 0 0 100 100))\n; ellipse is drawn\n```\n. You're welcome! \n. Hi Phil. If you use main function I'd suggest using `sketch` instead of `defsketch`. Check out [runnable jar](https://github.com/quil/quil/wiki/Runnable-jar) example. It uses exactly this technique and you can see that you easily use command line args during sketch initialization. \n. Hi. Are you trying to use [load-shape](http://quil.info/api/shape/loading-and-displaying#load-shape) function? If so, it return an instance of PShape as you said and you can call java methods on it. It's true that quil doesn't have any special methods for that, but java interop is good enough:\n\n``` clojure\n(let [shape (q/load-shape \"shape.svg\")]\n  (println (.getVertex shape))\n  (println (.getVertexCount shape)))\n```\n. Thanks for reporting and looking into it! Yes, suggested changes look reasonable but I think you need to keep `(.fillColor (current-graphics))` for regular clojure quil and add `(.-fillColor (current-graphics))` for clojurescript quil. Feel free to send a pull request.. Ah, thanks for the explanation! . Hi Yehonathan \r\n\r\nHave you looked at https://github.com/quil/quil-site/blob/master/src/cljs/editor/quil_site/compiler.cljs? It does the compilation part. The setup in quil.info is following:\r\n\r\nThere is the main window and iframe where sketch runs. \r\n1. User clicks \"compile\".\r\n2. We take user code and compile it in main window. Output of compilation is string with js code. Note that at this stage we compile only user code, we don't compile any of quil code. \r\n3. Compiled js code sent to the iframe with the sketch using postMessage.\r\n4. Sketch iframe upon receiving postMessage evaluates js code. In the iframe we preload unobfuscated compiled quil + clojurescript core js so upon evaluating user code all quil and core functions are defined.\r\n\r\nWhen we compile user code at step 2, it uses some quil and core macros and compiler has to be aware of them. To achieve that we preload compilation cache for quil and cljs macros namespaces: \r\nhttps://github.com/quil/quil-site/blob/master/src/cljs/editor/quil_site/compiler.cljs#L38\r\nhttps://github.com/quil/quil-site/blob/master/src/cljs/editor/quil_site/compiler.cljs#L45\r\n\r\nCache is built beforehand by running cljs self-host on nodejs: \r\nhttps://github.com/quil/quil-site/blob/master/cache/src/cljs/cache/core.cljs\r\n\r\nSo, to support quil inside klipse I'd suggest doing similar: reuse caches to compile user code to js and evaluate it assuming that main quil library already preloaded. . Here is script that is preloaded in sketch iframe. All it does - it includes quil.core, quil.middleware so they're included by compiler and listens to postMessages and evaluates them. Pretty straightforward.\r\nhttps://github.com/quil/quil-site/blob/master/src/cljs/preload/quil_site/preload.cljs. Please also enable tests for current-fill and current-stroke for clojurescript in the same pull request: https://github.com/quil/quil/blob/738a549cb3704e3d09fe0de9c88c486d35a1d6d0/test/cljc/snippets/color/creating_and_reading.cljc#L128 \r\n. Thanks! . Yes, looks good. The tests are pretty primitive: all they do is check that no js error thrown. Basically that all calls work without errors. They don't check any visual rendering. So ideally, if we enabled tests before you commit we'd see 2 js erros in console saying that current-fill doesn't work. . Franziska, thanks for reporting it! I believe there might be a real issue here. \r\n\r\n@Norgat, looking at quil implementation of `mouse-pressed?` we just return 'mousePressed' property of Processing object: [link](https://github.com/quil/quil/blob/master/src/cljc/quil/core.cljc#L2610). But according to the issue you referenced we should be using __mousePressed. I checked it and it seems to like __mousePressed indeed works:\r\n\r\nhttp://quil.info/sketches/local/47f91e27fb59ceb0a99e71e5342cc033ba0e8639d8257513fb6363db81a50a15. I'm ok with using non-public processing API. We can update our \"automated\" tests to verify that `mouse-pressed?` returns boolean. If it doesn't the test throws an error.\r\n\r\nMaksim, I didn't fully understand your example. I don't see `mouse-pressed?` in it. . Hm, haven't used github review process before. Interesting. . Thanks! Looks good now. Merging. . Hi Prakhar. \r\n\r\nHaving such function seems reasonable. I wouldn't use `PVector.random3D()` because it returns PVector and clojure has its own vector type. So clojure implementation of such function like you suggest is preferable. Though I'm wondering if there is a way to make it faster. I can imagine such function can be called often and should be optimized. Having multiple iterations like map/reduce/repeatedly might hurt performance. The optimized version won't be as idiomatic but I think it's a fair price to pay. Do you want to make a pull request? . Great! I was thinking the fact that vector has only 3 components. This allows us to generate each component separately as there are few them and not necessary to use iteration functions. We probably even use spherical coordinates to generate it: unit vector is essentially a point on a sphere with radius 1. And cartesian coordinatex x, y and z of point are determined using 2 angles and r: http://mathworld.wolfram.com/SphericalCoordinates.html Formulas 4, 5, 6\r\n\r\nGiven that r is 1. You just need generate 2 random angles and calculate x, y, z: \r\n\r\n```\r\ntheta = rand(0, 2PI)\r\nphi = rand(-Pi/2, Pi2/)\r\nx = cos(theta)*sin(phi)\r\ny = sin(theta)*sin(phi)\r\nz = cos(phi)\r\nanswer = [x, y, z]\r\n```\r\nIt think it should be faster than generating 3 random coordinates and normalizing them. Also It should have more even distribution of random vector (see [this](http://stackoverflow.com/a/6283140/575421) stackoverflow answer).. Ah, yes, I totally forgot about this. We're using PApplet.random to be more consistent with Processing. I guess `deftest` won't work in this case as you need instace of PApplet :( How about just adding this check into defsnippet itself?After you printed value of a random vector you can sample N vectors and check their length and fail the test if it's not 1. . Perfect. Thank you! . Hi Andy\r\n\r\nCan you provide code to reproduce the problem? Also have you tried the latest version 2.6.0?. Hi Andy. \r\n\r\nThanks so much for providing project to reproduce it and sorry for the delay. I finally borrowed a mac and tested and as I suspected it's due to retina display. In version 2.4.0 I decided that it would be a good idea to change display density from 1 to whatever current screen has: https://github.com/quil/quil/blob/master/src/clj/quil/applet.clj#L204 Probably it wasn't such a good idea after all. I'm still not sure to be honest.\r\n\r\nAnyway, to fix you problem you can set [pixel density](http://quil.info/api/environment#pixel-density) back to 1 in `:settings` function and it'll fix it:\r\n\r\n```clojure\r\nq/defsketch resize\r\n  :title \"You spin my circle right round\"\r\n  :size [220 220]\r\n  :setup setup\r\n  :settings #(q/pixel-density 1)\r\n  :draw draw-state\r\n  :features [:keep-on-top]\r\n  :middleware [m/fun-mode])\r\n```\r\n\r\nI'll keep this bug open until I decide if I should remove auto-detection for pixel dencity. \r\n. Maksim you're not waiting on me, right? We still need to resolve the issue \"new preload-font\" or \"update create-font\".. Having single `create-font` is less confusing than both `create-font` and `preload-font`. It's not clear how \"creating\" is different from \"preloading\". It's better to hide low-level implementation details from users, especially given that quil is fairly high-level library. \r\n\r\nI can't think of any performance issues if create-font is called inside `:draw`: only the first call loads the font while all the rest do nothing. If user still wants to optimize it - they can move `create-font` call to `:setup`. . Not sure to be honest. Try adding `:draw` function. You can basically rename :setup to :draw. Also I suggest adding (println) to -main to make sure it runs. And add println to setup/draw. . That's weird. I don't think I ever had problems when running using lein. Maybe it's specific to boot. One possible workaround is to block the main thread until sketch closes. Example:\r\n\r\n```clojure\r\n(defn -main  [& args]\r\n  (println \"starting\")\r\n  (let [sketch-finished (promise)]\r\n\r\n    (q/defsketch my-art\r\n      :size [800 800]\r\n      :draw draw\r\n      :on-close (fn [] (deliver sketch-finished true))\r\n\r\n    (println \"started sketch and wait for it to finish\")\r\n\r\n    ; derefing promise blocks thread until promise is fullfilled\r\n    (deref sketch-finished))\r\n\r\n  (println \"sketch finished, exiting\"))\r\n```. Interesting. @kchair can you copy the list of all files you have in `natives/macosx-universal`? I'm also curious why you're using Processing.py, is it a part of standard Processing package? . Just tried running [this](https://github.com/quil/quil/wiki/Navigation-3D#example) p3d sketch on MacOS 10.12.3 and it works just fine on my laptop :/ \r\n\r\nCan you post your `project.clj` setup? Also can you try unpacking `gluegen-rt-fat.jar` and copy contents of its `natives/macosx-universal/` folder to your sketch and see if it works? \r\n\r\n. Hi Joakim. What doesn't work exactly? There is an error or you simply can't see SVG being drawn? Does it work without `navigation-3d` middleware? . Can you provide your SVG? And what OS are you running on? I tried on linux and it worked. It was very slow, probably because load-shape took long time so FPS was around 5. And then I moved shape load to `setup` and it improved drastically:\r\n\r\n```clojure\r\n(defn setup []\r\n  {:shape (q/load-shape \"family_tree_01.svg\")})\r\n\r\n(defn draw [state]\r\n  (q/background 255)\r\n  (q/lights)\r\n  (q/fill 150 100 150)\r\n  (q/sphere 75)\r\n  (doseq [pos [[150 0 0] [-150 0 0]\r\n               [0 150 0] [0 -150 0]\r\n               [0 0 150] [0 0 -150]]]\r\n    (q/with-translation pos\r\n      (q/box 75)))\r\n   (q/shape (:shape state)))\r\n```\r\n. Btw here is svg that I used (first image): http://dragonhomer.blogspot.com/2014/11/family-tree-files.html Not sure if it matters, but just in case. . Sorry for the late reply. If you're still willing to debug this, can you run your sketch using `lein run -m yournamespace.core` or whatever your project structure is? I find it often hard to get error messages when running from emacs because they might be hidden somewhere in emacs depth so I just run sketch from command line and can see all errors. . Tried locally and worked fine. Are you using mackbook with retina display? I think this might be the cause: on retina \"size\" of applet internally is 2x which doesn't match the image. Can you try adding `pixel-density` as described [here](https://github.com/quil/quil/issues/202#issuecomment-282649108). Also it matches the fact that it worked for you on 2.3.0 as we switched pixel-density detection to automatic starting 2.4.0. . Closing this bug. If you have any questions - feel free to reopen. . Thanks, @carcigenicate! Didn't know about `lein check`. Before that, I manually enabled `*warn-on-reflection*` and compiled quil.core so I missed all middleware. Added `lein check` to the release process [doc](https://github.com/quil/quil/wiki/Dev-notes). Hi Brendon. Maybe it's a small bug. I thought that raw-key won't return anything in key-released because key was \"released\" and we no longer have it. But if it returns something then yes, we should pass event to the release handler. . Hi Andrew. I suspect the problem is with \"update\" step where you have to calculate new state which involves a lot manipulations and clojure is not particularly effective in these tasks. So you have to explore wonderful world of optimizing clojure code. I suggest you to try using benchmarks libraries like [criterium](https://github.com/hugoduncan/criterium). Measure how long it takes to run `update-state`. \r\n\r\nLooking at your algorithm I think there are some ways to improve it. First of all let's estimate complexity of single update. Let's say you have NxM table. You have N\\*M cells. And to update each cell you need to find all its neighbors. To find each neighbor you're iterating through all cells so looking up neighbor requires N\\*M operations. So total complexity of updating cells is:\r\n\r\nN\\*M (updates) \\* 8 (neighbors) \\* N\\*M (cost of finding neighbor) = 8\\*N^2\\*M^2\r\n\r\nIt's not really possible to optimize the first N*M because you have to recalculate state of each cell on every update. But we can optimize the getNeighbor to run in O(1) instead of O(N*M). For that we need to change the way you store cells. Today you store them as vector, but instead you can store them as map. Instead of:\r\n\r\n```clojure\r\n(def cells [\r\n  {:x 0 :y 0 :alive true} \r\n  {:x 0 :y 1 :alive false} \r\n  {:x 1 :y 0 :alive true}\r\n  {:x 1 :y 1 :alive false}])\r\n```\r\n\r\ntry following structure:\r\n\r\n```clojure\r\n(def cells {\r\n  [0 0] true\r\n  [0 1] false\r\n  [1 0] true\r\n  [1 1] false})\r\n```\r\n\r\nThat way getNeighbor can be written as:\r\n\r\n```clojure\r\n(defn getNeighbor [x y cells]   \r\n  (let [alive? (cells [x y] :none)]\r\n    (if (= alive? :none)\r\n      (rand-nth [true false])\r\n      alive?)))                                                                             \r\n```\r\n\r\nI believe it should drastically improve performance. But try criterium to verify improvements. It is so much fun optimizing code and see execution times go down. . Hm. I just saw that you checked `conway-state` execution and got time ~1ms but I still suspect the problem is there. Actually `(time (conway-state s))` might not give the result you expect because `conway-state` returns lazy collection without evaluating it. You should try `(time (doall (conway-state s)))` instead. . Hi Gregory. Where are you running quil? . Sorry for probably very late response. I just tried. \r\n\r\n1. Rent a headless server on google compute engine.\r\n2. Install openjdk 8, leiningen, other things from the [article](https://github.com/processing/processing/wiki/Running-without-a-Display)\r\n3. Create project using quil lein template: `lein new quil test`.\r\n4. Add `(q/save-frame \"foo-####.png)` to the `src/test/core.clj` at the end of `draw-state`. \r\n5. Run `xvfb-run lein run -m test.core`. \r\n6. Checked and I could see png files in the directory. \r\n\r\nSo it worked for me. How did you run xvfb-run?. Closing this bug. If you have any questions - feel free to reopen. . Hi Andreas. \r\n\r\nSorry for the late reply. Indeed, looks like resizing canvas element doesn't change internal width/height. But  it should be relatively easy to add to Quil. I'll do it. Thanks for reporting! . I made it work with P3D. Here is an example where we take this [image](https://github.com/quil/quil-site/blob/master/public/img/play.png) and reverse it: http://quil.info/sketches/show/-KoBCD2nlAgqIa_ivFQb\r\n\r\nNot sure though how to make it work with P2D. . Another version: http://quil.info/sketches/show/-KoBEH8HSD62Hf9Ujuoq. How are you opening html? Just from file manager or do you run static file\nserver, like \"python -m SimpleHTTPServer\" ? I think you have to do the\nserver so that page is opened using http:// protocol instead of file://\n\nOn Wed, Jul 12, 2017, 04:59 Andreas Schau <notifications@github.com> wrote:\n\n> Hey, sorry for the long wait, but i was quite busy.\n> It strikes me how it is, that in the online editor you used it works just\n> fine. But if i put your exact code in my project on my own computer with\n> \u00bblein cljsbuild auto\u00ab in a terminal, then it is compiled just fine, but i\n> don't see anything on the canvas but rather have an error message.\n>\n> Uncaught DOMException: Failed to execute 'texImage2D' on\n> 'WebGLRenderingContext': Tainted canvases may not be loaded.\n>\n> So is my processing.js to old or something?\n>\n> \u2014\n> You are receiving this because you commented.\n>\n>\n> Reply to this email directly, view it on GitHub\n> <https://github.com/quil/quil/issues/213#issuecomment-314747772>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AAPYldC7-FnHWvdl8_PsJkhna3UZrf5lks5sNLU8gaJpZM4OHnie>\n> .\n>\n. The goal of functional mode is to separate computation part from \"side-effect\" part, which drawing. The process of drawing involves 2 steps that are often intermixed but in functional mode they are separate: the first is **what** to draw (prepare data required for drawing) and the second is **how** to draw (implementing functions that take that data and draw it). Personally it helps me to think about data without being distracted with drawing details. Another benefit of that separation is that `update` should ideally be pure function. Which means you can run it in repl to test and iterate. At the same time you can't run `draw` from repl because it has to be run \"from\" sketch. \r\n\r\nHaving said that if you find it easier to combine them - you might find it easier using Quil without functional mode. Without functional mode you have only `draw` and no explicit state object. But it you need it - you can use either [state-atom](http://quil.info/api/state#state-atom) or even declare you own global atom variable and change it inside `draw`. . Hi Mehul. Try asking https://groups.google.com/forum/?fromgroups#!forum/clj-processing You reach more quil users there. . I believe printing works, but in prints to some other buffer by default. If you \u00e7heck all cider-related buffers in emacs you should see the message. Also there is a middleware that redirects all printlns to expected buffer. Here it is: https://github.com/quil/quil/blob/master/src/clj/quil/middlewares/bind_output.clj#L4 Try using it as `:middleware [quil.middlewares.bind-output/bind-output m/fun-mode]`. It should work (at least it worked when I created it originally) but no guarantees. . You can try [pause-on-error](http://quil.info/api/middleware#pause-on-error) middleware which pauses sketch and prints error on sketch screen. As for seeing error in cider, I don't remember for sure. It should be in one of emacs buffers. . Thanks Tim! . Also here is an example: https://github.com/quil/quil/blob/master/test/cljs/quil/manual.cljs#L132. It kinda works. In ClojureScript you can't save sketch to a file because it runs in browser and you can't create files from js in browser AFAIK. What q/save or q/save-frame do instead is they conver image into base64 and open a new tab using encoded image as source:  https://github.com/processing-js/processing-js/blob/master/src/Processing.js#L8796\r\n\r\nSo each time you call save/save-frame it opens a new tab. In my case chrome blocks all these new tabs thinking it's spam. There is a small icon in page url bar on the right which says that pop up blocked. If you click you'll see all new tabs for each frame. And when you click on one of them it should open a tab with image of your sketch.\r\n\r\nBut probably it's not what you need anyway. If you want to generate images I think you have to use clojure version. Or do saving yourself somehow using js/server side. . Hi Shaun. Yes, that would be great to patch. Would `pixelDensity()` set window.devicePixelRatio to a different value as well? . Hi. This error says that your java version is too old: https://stackoverflow.com/questions/22489398/unsupported-major-minor-version-52-0 Quil works only on jdk 1.8 since version 2.5.0: https://github.com/quil/quil/blob/master/RELEASE-NOTES.md#250\r\n\r\nSo you either have to update your jdk or use older version of quil.. Hi Jacob. Have you tested if this hint works with quil? I wonder how to test it. . Current quil requires jvm 8 (same as Processing). I was thinking about just testing manually, without unit tests. I don't think you can really test this functionality automatically. I can try testing it if you can't get java 8.   . It's good that it doesn't fail. Did you see any changes in sketch performance? With blocking saveframe performance should decrease if writing to disks is slow. I googled and we might be able to emulate slow disk using some trickery (on linux): https://askubuntu.com/questions/13590/can-i-simulate-a-slow-hard-drive Do you have bandwidth to try it out? . Yes, I wanted to make sure that `DISABLE_ASYNC_SAVEFRAME` does anything in quil. If you tested it then I'm happy. As for \"aren't we getting into testing/benchmarking Processing itself, not quil\", kinda. I wanted to test if this hint is propagated to processing and applied correctly. So run end-to-end test :) \r\n\r\nThanks for the pull request and testing! . ",
    "gtrak": "I have a similar idea in a demo implementation, but it's a bit flaky sometimes.  I think Processing isn't expecting to be used that way somehow: https://github.com/gtrak/quilltest/blob/master/src/quilltest/core.clj#L35\n. I have a similar idea in a demo implementation, but it's a bit flaky sometimes.  I think Processing isn't expecting to be used that way somehow: https://github.com/gtrak/quilltest/blob/master/src/quilltest/core.clj#L35\n. ",
    "ysmolsky": "This looks real awesome! It reminds me of Racket's big-bang and a step forward functional style of Clojure.\n\nAs a side-note I might suggest to add feature to decouple update function from draw function for example when update function does not need to perform with the same rate as draw. So one would end up with updates per second parameter.\n. Nikita, I have examined macro defsketch and underlying macros which actually calls applet/applet.\n\nThe good style of Clojure is to avoid macros where function is sufficient. Those two macroses are not necessary at all, they create some function definition which is not used anywhere and thus pollutes namespace. And you cannot really pass macros as first class function.\n\nJust 2 cents... Thanks for the work on Quil!\n. Oh, silly me! All this makes sense now. You are right, wrapping symbols into `var` allows dynamic replacements. Thanks for explanation. You might want to add your comment into docs somewhere (API maybe) - it's good explanation!\n. Oh. That's helpful. \n\nThanks a lot!\n. Thanks for explanation.\n\nMy understanding was that draw is called every 1/60 second (60 fps), so expected lag behind mouse handler is about 17 ms. Atom performance is very fast in this case, operations on it is less than 1ms so we can neglect it. I cannot tell exact value of a lag, but it more that 17ms because it's very noticeable. Also the faster I move the mouse, the bigger lag seems to be (this is pure speculation :) )\n\nCould it be that rendering itself in draw performed with some lag?\n. I have tried to capture the actual lag using this modified script: https://gist.github.com/ysmolsky/d4ba1288b4e8c106f7fe\n\nIn rare cases it goes up to 80-100ms.\n\nIt shows following delays in milliseconds:\n:draw 38\n:draw 17\n:draw 16\n:draw 41\n:draw 51\n:draw 49\n:draw 75\n:draw 91\n:draw 17\n:draw 20\n:draw 15\n:draw 16\n:draw 21\n:draw 39\n:draw 16\n:draw 16\n:draw 35\n:draw 16\n:draw 17\n:draw 21\n:draw 47\n:draw 64\n:draw 14\n:draw 32\n:draw 49\n:draw 15\n:draw 24\n:draw 41\n. Yep :) Already tried that. It's around 35-40 for the mentioned example. Delay is affected by drawing speed of Quil.\n\nI use default renderer which is :java2d. I have never had experience with Processing, but what is the fastest 2D rendered I can use for Quil, so all shapes/texts functions are still available to me?\n\nUPDATE: Nevermind. I have tried :renderer :opengl and instantly I got FPS around 60-120 even in my prototype game. Silly me! Lag went to average value of 1/FPS ms without spikes.\n. I remember now why I skipped using opengl back in time. It has this bug: https://github.com/quil/quil/issues/113\n. Yeah, I have just tried it, but it has he same poor performance as :java2d,\nalso fonts are jagged.\n\nOn 4 June 2014 14:35, Nikita Beloglazov notifications@github.com wrote:\n\n> Have you tried :p2d renderer? OpenGL renderer should not be used directly\n> unless you know why you need it (at least that what I've read somewhere on\n> processing website or source code). p2d internally uses OpenGL so it should\n> be fine.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/quil/quil/issues/113#issuecomment-45079904.\n. I have tested this on Quil 2.0.0 and openGL renderer does not have this glitch. Also p2d renderer acts like openGL.\n\nThanks for releasing 2.0!\n. Yes, I mentioned that in the first post ;-)\n. Nikita, I got the question about what is to expect in 2.0 of Quil? Where can I read changes?\n. This looks real awesome! It reminds me of Racket's big-bang and a step forward functional style of Clojure.\n\nAs a side-note I might suggest to add feature to decouple update function from draw function for example when update function does not need to perform with the same rate as draw. So one would end up with updates per second parameter.\n. Nikita, I have examined macro defsketch and underlying macros which actually calls applet/applet.\n\nThe good style of Clojure is to avoid macros where function is sufficient. Those two macroses are not necessary at all, they create some function definition which is not used anywhere and thus pollutes namespace. And you cannot really pass macros as first class function.\n\nJust 2 cents... Thanks for the work on Quil!\n. Oh, silly me! All this makes sense now. You are right, wrapping symbols into `var` allows dynamic replacements. Thanks for explanation. You might want to add your comment into docs somewhere (API maybe) - it's good explanation!\n. Oh. That's helpful. \n\nThanks a lot!\n. Thanks for explanation.\n\nMy understanding was that draw is called every 1/60 second (60 fps), so expected lag behind mouse handler is about 17 ms. Atom performance is very fast in this case, operations on it is less than 1ms so we can neglect it. I cannot tell exact value of a lag, but it more that 17ms because it's very noticeable. Also the faster I move the mouse, the bigger lag seems to be (this is pure speculation :) )\n\nCould it be that rendering itself in draw performed with some lag?\n. I have tried to capture the actual lag using this modified script: https://gist.github.com/ysmolsky/d4ba1288b4e8c106f7fe\n\nIn rare cases it goes up to 80-100ms.\n\nIt shows following delays in milliseconds:\n:draw 38\n:draw 17\n:draw 16\n:draw 41\n:draw 51\n:draw 49\n:draw 75\n:draw 91\n:draw 17\n:draw 20\n:draw 15\n:draw 16\n:draw 21\n:draw 39\n:draw 16\n:draw 16\n:draw 35\n:draw 16\n:draw 17\n:draw 21\n:draw 47\n:draw 64\n:draw 14\n:draw 32\n:draw 49\n:draw 15\n:draw 24\n:draw 41\n. Yep :) Already tried that. It's around 35-40 for the mentioned example. Delay is affected by drawing speed of Quil.\n\nI use default renderer which is :java2d. I have never had experience with Processing, but what is the fastest 2D rendered I can use for Quil, so all shapes/texts functions are still available to me?\n\nUPDATE: Nevermind. I have tried :renderer :opengl and instantly I got FPS around 60-120 even in my prototype game. Silly me! Lag went to average value of 1/FPS ms without spikes.\n. I remember now why I skipped using opengl back in time. It has this bug: https://github.com/quil/quil/issues/113\n. Yeah, I have just tried it, but it has he same poor performance as :java2d,\nalso fonts are jagged.\n\nOn 4 June 2014 14:35, Nikita Beloglazov notifications@github.com wrote:\n\n> Have you tried :p2d renderer? OpenGL renderer should not be used directly\n> unless you know why you need it (at least that what I've read somewhere on\n> processing website or source code). p2d internally uses OpenGL so it should\n> be fine.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/quil/quil/issues/113#issuecomment-45079904.\n. I have tested this on Quil 2.0.0 and openGL renderer does not have this glitch. Also p2d renderer acts like openGL.\n\nThanks for releasing 2.0!\n. Yes, I mentioned that in the first post ;-)\n. Nikita, I got the question about what is to expect in 2.0 of Quil? Where can I read changes?\n. ",
    "puredanger": "I don't need 1.3 compatibility - just wanted to make sure no one else ran into it.\n. I don't need 1.3 compatibility - just wanted to make sure no one else ran into it.\n. ",
    "pdikmann": "i see - thanks for the clarification! :)\n. i see - thanks for the clarification! :)\n. ",
    "hackedy": "I just discovered P3D, so that means this bug isn't _crippling_.\n\nNext time I get a chance I will try to figure this issue out.\n. I just discovered P3D, so that means this bug isn't _crippling_.\n\nNext time I get a chance I will try to figure this issue out.\n. ",
    "astanin": "I tried quil2.0 branch (8d4524204abfea98ca8761bf74ae2d1b900f0e5f), and all new windows seem to have the correct size (400\u00d7300). It may require further testing, but I can't reproduce it right now.\n. I tried quil2.0 branch (8d4524204abfea98ca8761bf74ae2d1b900f0e5f), and all new windows seem to have the correct size (400\u00d7300). It may require further testing, but I can't reproduce it right now.\n. ",
    "aperiodic": "The fix is actually pretty trivial; see #61.\n. The things you learn from years of doing stupid JOGL tricks with Processing :)\n. The fix is actually pretty trivial; see #61.\n. The things you learn from years of doing stupid JOGL tricks with Processing :)\n. ",
    "john2x": "Sorry, I think this belongs in the mailing list. \n. Sorry, I think this belongs in the mailing list. \n. ",
    "quephird": "I'm really sorry if I wasn't thorough enough to check for things like this before committing my changes. Forgive me for sounding stupid, but how can I reproduce this so that I can prove that setting the encoding indeed resolves the problem.  I don't want to check in anything in the blind.\n. Nikita...\n\nI think my machine was in some weird state as I am no longer able to reproduce this problem. I _do_ also have JDK 1.8 installed but was positive that I was using JDK 1.7 at the time I wrote. Indeed, I no longer have to specify the :jvm-opts option for any version of quil >= 2.0 and everything works fine, no hanging no stack traces. \n\nI am sorry to have bothered you with this; I think you can safely close this issue.\n. I'm really sorry if I wasn't thorough enough to check for things like this before committing my changes. Forgive me for sounding stupid, but how can I reproduce this so that I can prove that setting the encoding indeed resolves the problem.  I don't want to check in anything in the blind.\n. Nikita...\n\nI think my machine was in some weird state as I am no longer able to reproduce this problem. I _do_ also have JDK 1.8 installed but was positive that I was using JDK 1.7 at the time I wrote. Indeed, I no longer have to specify the :jvm-opts option for any version of quil >= 2.0 and everything works fine, no hanging no stack traces. \n\nI am sorry to have bothered you with this; I think you can safely close this issue.\n. ",
    "aaron-santos": "Perhaps try \"Hide personal results\" on the Google search results page? I find very relevant results by searching for quil+clojure.\n. Perhaps try \"Hide personal results\" on the Google search results page? I find very relevant results by searching for quil+clojure.\n. ",
    "hafdikra": "quil+clojure works well because Clojure is a briliant name, a unique namespace. It's a pleasure learning Clojure partly because everything on the web related to Clojure is in one nice little package, regardless of where or how you search for it. Also, I wouldn't expect all Processing related material to contain Java, same goes for Clojure and Quil.\n\nProce55ing was renamed to Processing. ???\nclj-processing was renamed to Quil. ???\n\nProcessing and Quil are TERRIBLE names. They are 'all talk', practically useless as tags, search queries, etc. The whole philosophy of Processing is to make it easier for non-programmers to learn programming. Having your ability to look for answers hindered thus forcing duplicate questions on the subject is not helpful to anybody. \n\nType Clojure, Quil, and Processing into Twitter search. Feel the difference? This is why Rich Hickey is a genius on many levels, and those who renamed Proce55ing and clj-processing are not geniuses on at least one level where Rich Hickey is a genius.\n\nSo yes, I am proposing a name change. Not just a name change, but perhaps a design of guidelines that will assure that something like Processing and Quil never happen again.\n. quil+clojure works well because Clojure is a briliant name, a unique namespace. It's a pleasure learning Clojure partly because everything on the web related to Clojure is in one nice little package, regardless of where or how you search for it. Also, I wouldn't expect all Processing related material to contain Java, same goes for Clojure and Quil.\n\nProce55ing was renamed to Processing. ???\nclj-processing was renamed to Quil. ???\n\nProcessing and Quil are TERRIBLE names. They are 'all talk', practically useless as tags, search queries, etc. The whole philosophy of Processing is to make it easier for non-programmers to learn programming. Having your ability to look for answers hindered thus forcing duplicate questions on the subject is not helpful to anybody. \n\nType Clojure, Quil, and Processing into Twitter search. Feel the difference? This is why Rich Hickey is a genius on many levels, and those who renamed Proce55ing and clj-processing are not geniuses on at least one level where Rich Hickey is a genius.\n\nSo yes, I am proposing a name change. Not just a name change, but perhaps a design of guidelines that will assure that something like Processing and Quil never happen again.\n. ",
    "pushingice": "On google, all top 10 results for me are all related for 'quil clojure'. Top result for 'quil' is Github. Top 3 results for 'processing' are about Processing. The philosophy of Processing may or may not be for non-programmers to learn programming (IMO it isn't): I don't see how it follows that Quil has to be the library for people who can't use search engines.\n. On google, all top 10 results for me are all related for 'quil clojure'. Top result for 'quil' is Github. Top 3 results for 'processing' are about Processing. The philosophy of Processing may or may not be for non-programmers to learn programming (IMO it isn't): I don't see how it follows that Quil has to be the library for people who can't use search engines.\n. ",
    "odyssomay": "Fixed by updating to 1.4.0\n\nEdit: That is, I updated clojure to 1.4.0\n. Sorry, I didn't specify what it was that I updated.\n\nAre you using clojure 1.4.0+?\n. No problem! I'm glad it worked. :)\n. Fixed by updating to 1.4.0\n\nEdit: That is, I updated clojure to 1.4.0\n. Sorry, I didn't specify what it was that I updated.\n\nAre you using clojure 1.4.0+?\n. No problem! I'm glad it worked. :)\n. ",
    "tangrammer": "I have the same error running from emacs, with clojure-jack-in and quil 1.6.0\n\u00bfany ideas?\n. GUAU, this was the more faster answer that i ever had!\n This was the problem!, i was using clojure 1.3\nThank you very much!!\n. Hi @originalsurfmex,\nI didn't imaginehttp://stackoverflow.com/questions/20970318/how-to-push-a-lein-localrepo-of-dependencies-to-clojars-processing-org-jarsthat\nyou were working in quil to update version :)\n\n## I copy here my answer update, hoping that help you\n\nIn the quil project.cljhttps://github.com/quil/quil/blob/master/project.clj\nthe\n\"problematic\" dependencies are in \"handmade\" clojars. if you look into your\n~/.m2 local repository you can find all of them prefixed by \"org/clojars/\"\ninstead of \"org.processing\", The dev [@samaaron] that pushed these\ndependencies to clojars had to create one separated project by dependency,\nconfigured it:\n\n<dependency>\n  <groupId>org.clojars.processing-core</groupId>\n  <artifactId>org.processing.opengl</artifactId>\n  <version>1.5.1</version></dependency>\n\nand pushed each one to clojars.\n\nI think that if you take a look inside one of these quil dependencies on\nyour local maven repo you'll figure aout the way you have to follow to that\n(basically: to have a java project, download the source, configure pom.xml\nand upload java code to clojarshttps://github.com/ato/clojars-web/wiki/POM\n )\n\n## Good luck\n\n2014/1/10 originalsurfmex notifications@github.com\n\n> Hi There\n> \n> This is just in case anybody might find it useful, I was able to use my\n> github cloned .m2 repo as a repository - thanks to some stackoverflow help.\n> \n> If you go to my fork and see my project.clj it looks like this:\n> \n> ```\n> :dependencies [[org.clojure/clojure \"1.5.1\"]\n>              [processing/core \"2.1\"]\n>              [processing/jogl-all \"2.1\"]\n>              [processing/jogl-all-natives-linux-amd64 \"2.1\"]\n>              [processing/jogl-all-natives-linux-i586 \"2.1\"]\n>              [processing/jogl-all-natives-linux-armv6hf \"2.1\"]\n>              [processing/jogl-all-natives-macosx-universal \"2.1\"]\n>              [processing/jogl-all-natives-windows-amd64 \"2.1\"]\n>              [processing/jogl-all-natives-windows-i586 \"2.1\"]\n>              [processing/gluegen-rt \"2.1\"]\n>              [processing/gluegen-rt-natives-linux-amd64 \"2.1\"]\n>              [processing/gluegen-rt-natives-linux-i586 \"2.1\"]\n>              [processing/gluegen-rt-natives-linux-armv6hf \"2.1\"]\n>              [processing/gluegen-rt-natives-macosx-universal \"2.1\"]\n>              [processing/gluegen-rt-natives-windows-amd64 \"2.1\"]\n>              [processing/gluegen-rt-natives-windows-i586 \"2.1\"] ]\n> ```\n> \n>   :repositories [[\"processinglibs\" \"https://github.com/originalsurfmex/originalsurfmex_m2/tree/master/repository/\"]]\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/quil/quil/issues/48#issuecomment-31997835\n> .\n. Then we can do it together, what do you think? I'll start with one dep and\nwill try to have an example with a few instructions\nThis is my mail juanantonioruz@gmail.com\nEl 10/01/2014 12:42, \"originalsurfmex\" notifications@github.com escribi\u00f3:\n\n> Thanks tangrammer - I didn't want to mention it on a site like\n> stackoverflow because I'm not really a programmer. I'm just a tinkerer\n> trying to make art with different languages as I learn them. I'm don't even\n> really know clojure yet, I'm still learning it.\n> \n> Your github idea was awesome and super convenient, thanks.\n> \n> I'm going to take a little break from messing with repo's for the moment,\n> because I really want to get adjusting the wrappers in the core.clj file.\n> All I am doing is running lein clean and trying to figure out what is\n> causing each reflection warning and thread exception. After that maybe I\n> can see what needs to be added from updates. Is this a logical way to go\n> about bringing Quil up to date?\n> \n> lein clean only gives me a brief list then it says ...55 more is there a\n> way to just show me the whole list or pring it to a log or something?\n> \n> When I say I'm just learning, I mean I just have a stack of Clojure books\n> and minimal understanding of Lisp. All I want to do is make a little art\n> with a language that will grow my brain.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/quil/quil/issues/48#issuecomment-32021089\n> .\n. I think that i found the key tutorial\nhttp://www.cubrid.org/wiki_apis/entry/how-to-push-new-cubrid-jdbc-driver-to-clojars-maven-repository\ncan @originalsurfmex give it a try and tell me the results?\nperhaps you have to make an clojars account, i don't know yet\n\nHave a good weekend!\n\n2014/1/10 originalsurfmex notifications@github.com\n\n> Ok - that sounds awesome, thanks for the offer. What do you think about\n> using my fork? It currently references all the 2.1 libs.\n> \n> https://github.com/originalsurfmex/quil\n> \n> Then we do diffs and track stuff/etc.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/quil/quil/issues/48#issuecomment-32034819\n> .\n. Hi @originalsurfer!\nHave you tried the link that i wrote here?\nhttp://www.cubrid.org/wiki_apis/entry/how-to-push-new-cubrid-jdbc-driver-to-clojars-maven-repository\n\n2014/1/19 originalsurfmex notifications@github.com\n\n> I'm getting closer, I gotta admit though its kind of a pain. I'm having\n> trouble signing my jars and pom files. Here they are in github (the md5 and\n> sha1 files not included of course):\n> \n> https://github.com/originalsurfmex/originalsurfmex_m2/tree/master/repository/processing/core/2.1\n> \n> https://github.com/originalsurfmex/originalsurfmex_m2/tree/master/repository/processing/gluegen-rt/2.1\n> \n> here they are in clojars:\n> https://clojars.org/org.clojars.originalsurfmex.processing/core\n> https://clojars.org/org.clojars.originalsurfmex.processing/gluegen-rt\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/quil/quil/issues/48#issuecomment-32700241\n> .\n. a few days ago i follow this tutorial\nhttp://thornydev.blogspot.com.es/2013/03/signing-and-promoting-your-clojure.htmland\nworked for clojars, maybe you can give it a try also\n\ngood luck!\n\n2014/1/20 originalsurfmex notifications@github.com\n\n> Yes, I used that link - it was by far the most helpful thing I've seen\n> yet, thanks for sending it. My only remaining problem is that the jar's and\n> pom files I make are unsigned. I can upload them but Clojars indicates that\n> they are unsigned.\n> \n> When I log in the page says this:\n> \n> promotion\n> \u2022/home/clojars/repo/org/clojars/originalsurfmex/processing/core/2.1/core-2.1.jar\n> is not signed.\n> \u2022/home/clojars/repo/org/clojars/originalsurfmex/processing/core/2.1/core-2.1.pom\n> is not signed.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/quil/quil/issues/48#issuecomment-32785642\n> .\n. Hi Nikita,\nI don't know how I helped you :), anyway is an awesome news the quil2.0\nbranch. I'll try to use gsvideo again with these defaults and I will send\nthe results\n\nThanks a lot for your work!\n\n2014-02-06 22:39 GMT+01:00 Nikita Beloglazov notifications@github.com:\n\n> I've created quil2.0 https://github.com/quil/quil/tree/quil2.0 branch.\n> Thanks to @tangrammer https://github.com/tangrammer I used his [processing/core\n> \"2.1\"] jar to avoid all this hustle with leiningen :)\n> \n> I fixed some errors that appeared on my machine when moving to Processing\n> 2.0 like window size wasn't set right, NullPointerException on frame close.\n> Now it should work (at least some examples work!). And cool thing that\n> opengl renderer works fine for me: it didn't work before on my machine\n> (Ubuntu 13, 64bit) on quil 1.6.\n> \n> So feel free to try. Now I want to test all function from core.clj to\n> check whether they work or not.\n> \n> I would be glad if anyone helped me. I think there are several ways to\n> help that I know of:\n> - run all examples on your machine on quil2.0 branch and verify that\n>   they work fine;\n> - check some functions from core.clj manually (please discuss with me\n>   so we don't overlap);\n> - ideally we should have tests. Test would check that functions\n>   doesn't throw errors. It's pretty hard to automate \"visual\" validation so\n>   let's stick with error validation for now. I can some ideas how we can\n>   achieve it. Would be happy if someone want to implement it.\n> \n> Feel free to leave any suggestion/comments/critique.\n> \n> Nikita\n> \n> ## \n> \n> Reply to this email directly or view it on GitHubhttps://github.com/quil/quil/issues/48#issuecomment-34375144\n> .\n. Hi Nikita,\nI've been struggling with this video integration too.\nMy last solution was work with quil-processing2 and extend quil/applet.clj\nto integrate the movieEvent register methods into the defsketch macro\ndefinition. And still i have to declare my video library resources in\nproject.clj as resource-paths\n\n2014-04-09 23:10 GMT+02:00 Nikita Beloglazov notifications@github.com:\n\n> Hi Patrick\n> Are you still up to this task? I can help you if you want.\n> \n> ## \n> \n> Reply to this email directly or view it on GitHubhttps://github.com/quil/quil/issues/75#issuecomment-40016937\n> .\n. @nbeloglazov  here https://gist.github.com/tangrammer/10405691 you can see my\nchanges on quil2.0 to extend  video support\nI've only added the functions modified\n\nand here https://dl.dropboxusercontent.com/u/8688858/lib.zip the libs you\nneed as :resource-paths (until we can pack the video deps as clojar lib)\n\nThe same issue I've done to extend quil for using oscp5 lib\n\nThanks!\n\n2014-04-10 18:04 GMT+02:00 Nikita Beloglazov notifications@github.com:\n\n> @tangrammer https://github.com/tangrammer, @phiathttps://github.com/phiatcan you give link to any working example, no matter how hacky and ugly it\n> looks like?\n> \n> ## \n> \n> Reply to this email directly or view it on GitHubhttps://github.com/quil/quil/issues/75#issuecomment-40104412\n> .\n. @nbeloglazov , Ok,  I'll give a try to\nthis \"did you try to pack all this lib/macosx64 resources into a jar,\ninstall it into local lein repo and include it as dependency?\"\n\n2014-04-11 0:58 GMT+02:00 Nikita Beloglazov notifications@github.com:\n\n> As I see, the main problem here is this native libs that need to added to\n> resources folder. But we want to pack them into jars so they can be easily\n> included in project.clj...\n> @tangrammer https://github.com/tangrammer, did you try to pack all this\n> lib/macosx64 resources into a jar, install it into local lein repo and\n> include it as dependency?\n> I suppose it should be possible to do something like this. Though I'm not\n> sure how. Could you check it, if you have time for it?\n> \n> ## \n> \n> Reply to this email directly or view it on GitHubhttps://github.com/quil/quil/issues/75#issuecomment-40152773\n> .\n. @nbeloglazov I already have the macosx64 dir resources packaged into a jar in my maven local repo and using it from project.clj `[quil-video/macosx64 \"1\"]` \n\nthe lib https://dl.dropboxusercontent.com/u/8688858/macosx64-1.jar\n. yes it does\n\n2014-04-11 13:14 GMT+02:00 Nikita Beloglazov notifications@github.com:\n\n> Cool. So it does work from jar, right?\n> \n> ## \n> \n> Reply to this email directly or view it on GitHubhttps://github.com/quil/quil/issues/75#issuecomment-40193181\n> .\n. @nbeloglazov  following the same way i have all the necessaries libs in my local maven repo and now my project dependencies are these\n\n```\n(defproject dat00 \"0.1.0-SNAPSHOT\"\n  :description \"FIXME: write description\"\n  :url \"http://example.com/FIXME\"\n  :license {:name \"Eclipse Public License\"\n            :url \"http://www.eclipse.org/legal/epl-v10.html\"}\n  :dependencies [[org.clojure/clojure \"1.5.1\"]\n                 [quil/quil \"2.0.1-SNAPSHOT\"]\n                 [org.clojure/data.json \"0.2.4\"]\n                 [quil-video/macosx64 \"1\"]\n                 [quil-video/jna \"1\"]\n                 [quil-video/video \"1\"]\n                 [quil-video/gstreamer-java \"1\"]\n                 ]\n  )\n\n```\n\nBut i suspect there is a better way to group all these quil-video resources in one line, dont you think the same?\n\nAnd I still have a question about the better way to extend quil applet. \nIt seems that with each library (video, oscp5 ...) that uses the event listener approach we have to modify the applet.clj file and include this library as dependency on parent project. \n\n```\n(gen-interface\n :name quil.MovieI\n :methods [\n           [movieEvent\n            [processing.video.Movie] Object]\n           ])\n(gen-interface\n :name quil.OscP5\n :methods [\n           [oscEvent\n            [oscP5.OscMessage] Object]\n           ])\n(gen-class\n  :name \"quil.Applet\"\n  :implements [clojure.lang.IMeta quil.MovieI quil.OscP5]\n  :extends processing.core.PApplet\n  ;:methods [[movieEvent [processing.video.Movie] Object]]\n```\n\nDo you know a better approach to achieve this?\n. Hi @nbeloglazov again!\nIt seems that I've found another way (maybe better) to extend \"quil.Applet\" without modifying the base file applet.clj. As you can see in the code attached the new solution uses proxy to extend the processing.core.PApplet class \n\nwhat does it sounds?\n\nthanks!\n\n```\n(ns dat00.juan\n  (:import (processing.video Movie))\n  (:use quil.core\n        [quil.helpers.drawing :only [line-join-points]]\n        [quil.helpers.seqs :only [range-incl steps]]))\n(declare mov)\n\n(defn setup[]\n  (println \"setup completed!\")\n)\n\n(defn draw []\n  (image mov 0 0 ))\n\n(defsketch juan\n    :setup setup\n    :draw draw\n    :size [500 500]\n    )\n\n(gen-interface\n :name quil.MovieI\n :methods [\n           [movieEvent\n            [processing.video.Movie] Object]\n           ])\n\n(def other (proxy [processing.core.PApplet quil.MovieI] []\n             (dataPath [filename]\n               (println filename)\n               (.dataPath juan filename))\n             (registerDispose [o]\n               (println \"register dispose \" o )\n               (.registerDispose juan o))\n             (registerMethod [o #^Movie m]\n               (println \"register method \" o m)\n               (.registerMethod juan o m))\n             (unregisterMethod [o #^Movie m]\n               (println \"unregister method \" o m)\n               (.unregisterMethod juan o m))\n             (die [m]\n               (.die juan m))\n             (movieEvent [#^Movie movie]\n                 (.read movie))\n             (dispose []\n               (.dispose juan))\n             ))\n(set! (.-g other) (.-g juan))\n\n(def mov (Movie. other \"data/transit.mov\"))\n(.play mov)\n```\n. updated defsketch definition \n\n```\n(defsketch juan\n    :setup setup\n    :draw draw\n    :size [500 500])\n\n```\n\nwithout :movie-event \n. @nbeloglazov  bad news! The resources \"macosx64\" or video libraries were not actually working\n\nMy example project was using  the resources of quil parent project through checkouts simlink, and in this parent project there was the resources attached :(\n\nBut, the way for extending video  support with proxy is working anyway :)\n\nI'll try to get deeper on package clojure resources\n. Solution found!\n\nIt seems not to need the \"this\" parameter :)\n\n(let [fc (JFileChooser.)\n        returnval (.showOpenDialog fc nil) ]\n\n```\n(condp = returnval\n  0 (println (.getSelectedFile fc))\n  (str \"unexpected value\" returnval)\n  )\n)\n```\n. I think this pull must wait until integration with processing 2.0, so I'm going to close it\n. Hi Nikita!\n\nnow is working fine although for me It is very hard to find this kind of\ndetails on processing project\n\nanyway thanks a lot\nJuan\n\n2014-04-08 19:19 GMT+02:00 Nikita Beloglazov notifications@github.com:\n\n> Which version of quil are you using? I suspect that regitserMethod was\n> added in Processing 2 therefore you need to use Quil 2 which is not\n> released yet, but you can try SNAPSHOT version:\n> https://clojars.org/quil/versions/2.0.0-SNAPSHOT\n> Actually registerMethod is even used in Quil 2:\n> https://github.com/quil/quil/blob/quil2.0/src/quil/applet.clj#L287 so it\n> is definitely possible to call this method.\n> \n> ## \n> \n> Reply to this email directly or view it on GitHubhttps://github.com/quil/quil/issues/89#issuecomment-39875986\n> .\n. You are right Nikita\nthanks!\n\n2014-04-24 12:02 GMT+02:00 Nikita Beloglazov notifications@github.com:\n\n> Hi\n> Could you please repost your question to quil mailing list:\n> https://groups.google.com/forum/#!forum/clj-processing ?\n> Mailing list is better place for such questions because it is not really\n> an issue with quil but rather \"How to use\" question.\n> Closing this issue.\n> \n> Thanks!\n> Nikita\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/quil/quil/issues/93#issuecomment-41263051\n> .\n. Hi guys and specially @nbeloglazov !\nI'm having problems with this issue, my repl doesn't refresh automatically, so until i dont press ENTER i dont get any result in my cider REPL. \n\nThis is my cider config\n\n```\n;; Connected to nREPL server - nrepl://localhost:60551\n;; CIDER 0.14.0snapshot (package: 20160830.23), nREPL 0.2.12\n;; Clojure 1.8.0, Java 1.8.0_31\n\n```\n\nand my project settings\n\n```\n  :dependencies [[org.clojure/clojure \"1.8.0\"]\n                 [org.clojure/clojurescript \"1.8.51\"]\n                 [quil \"2.4.0\"]\n                 [clj-time \"0.12.0\"]]\n\n```\n\nthis is my defsketch definition\n\n``` clojure\n(q/defsketch gridtest\n  :size [680 520]\n  :setup setup\n  :update update-state\n  :key-pressed the-key-handler\n;  :key-released the-key-handler\n  :draw draw-state\n  :features [:keep-on-top ]\n  :middleware [m/fun-mode  m/pause-on-error ])\n```\n\nand the key-handler\n\n``` clojure\n(defn the-key-handler [state k]\n  (.println System/out  (pr-str k))\n\n  ;;(update-in state [:debugging :message ] (fn [_] (pr-str k)))\n  state)\n```\n\nBTW: `println` always freezes my current nrepl ....\n\nThanks!!\n\nPS: I also tried `:features [:keep-on-top :no-bind-output]` to have normal output in my nrepl-server with no success :(\n. I have the same error running from emacs, with clojure-jack-in and quil 1.6.0\n\u00bfany ideas?\n. GUAU, this was the more faster answer that i ever had!\n This was the problem!, i was using clojure 1.3\nThank you very much!!\n. Hi @originalsurfmex,\nI didn't imaginehttp://stackoverflow.com/questions/20970318/how-to-push-a-lein-localrepo-of-dependencies-to-clojars-processing-org-jarsthat\nyou were working in quil to update version :)\n\n## I copy here my answer update, hoping that help you\n\nIn the quil project.cljhttps://github.com/quil/quil/blob/master/project.clj\nthe\n\"problematic\" dependencies are in \"handmade\" clojars. if you look into your\n~/.m2 local repository you can find all of them prefixed by \"org/clojars/\"\ninstead of \"org.processing\", The dev [@samaaron] that pushed these\ndependencies to clojars had to create one separated project by dependency,\nconfigured it:\n\n<dependency>\n  <groupId>org.clojars.processing-core</groupId>\n  <artifactId>org.processing.opengl</artifactId>\n  <version>1.5.1</version></dependency>\n\nand pushed each one to clojars.\n\nI think that if you take a look inside one of these quil dependencies on\nyour local maven repo you'll figure aout the way you have to follow to that\n(basically: to have a java project, download the source, configure pom.xml\nand upload java code to clojarshttps://github.com/ato/clojars-web/wiki/POM\n )\n\n## Good luck\n\n2014/1/10 originalsurfmex notifications@github.com\n\n> Hi There\n> \n> This is just in case anybody might find it useful, I was able to use my\n> github cloned .m2 repo as a repository - thanks to some stackoverflow help.\n> \n> If you go to my fork and see my project.clj it looks like this:\n> \n> ```\n> :dependencies [[org.clojure/clojure \"1.5.1\"]\n>              [processing/core \"2.1\"]\n>              [processing/jogl-all \"2.1\"]\n>              [processing/jogl-all-natives-linux-amd64 \"2.1\"]\n>              [processing/jogl-all-natives-linux-i586 \"2.1\"]\n>              [processing/jogl-all-natives-linux-armv6hf \"2.1\"]\n>              [processing/jogl-all-natives-macosx-universal \"2.1\"]\n>              [processing/jogl-all-natives-windows-amd64 \"2.1\"]\n>              [processing/jogl-all-natives-windows-i586 \"2.1\"]\n>              [processing/gluegen-rt \"2.1\"]\n>              [processing/gluegen-rt-natives-linux-amd64 \"2.1\"]\n>              [processing/gluegen-rt-natives-linux-i586 \"2.1\"]\n>              [processing/gluegen-rt-natives-linux-armv6hf \"2.1\"]\n>              [processing/gluegen-rt-natives-macosx-universal \"2.1\"]\n>              [processing/gluegen-rt-natives-windows-amd64 \"2.1\"]\n>              [processing/gluegen-rt-natives-windows-i586 \"2.1\"] ]\n> ```\n> \n>   :repositories [[\"processinglibs\" \"https://github.com/originalsurfmex/originalsurfmex_m2/tree/master/repository/\"]]\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/quil/quil/issues/48#issuecomment-31997835\n> .\n. Then we can do it together, what do you think? I'll start with one dep and\nwill try to have an example with a few instructions\nThis is my mail juanantonioruz@gmail.com\nEl 10/01/2014 12:42, \"originalsurfmex\" notifications@github.com escribi\u00f3:\n\n> Thanks tangrammer - I didn't want to mention it on a site like\n> stackoverflow because I'm not really a programmer. I'm just a tinkerer\n> trying to make art with different languages as I learn them. I'm don't even\n> really know clojure yet, I'm still learning it.\n> \n> Your github idea was awesome and super convenient, thanks.\n> \n> I'm going to take a little break from messing with repo's for the moment,\n> because I really want to get adjusting the wrappers in the core.clj file.\n> All I am doing is running lein clean and trying to figure out what is\n> causing each reflection warning and thread exception. After that maybe I\n> can see what needs to be added from updates. Is this a logical way to go\n> about bringing Quil up to date?\n> \n> lein clean only gives me a brief list then it says ...55 more is there a\n> way to just show me the whole list or pring it to a log or something?\n> \n> When I say I'm just learning, I mean I just have a stack of Clojure books\n> and minimal understanding of Lisp. All I want to do is make a little art\n> with a language that will grow my brain.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/quil/quil/issues/48#issuecomment-32021089\n> .\n. I think that i found the key tutorial\nhttp://www.cubrid.org/wiki_apis/entry/how-to-push-new-cubrid-jdbc-driver-to-clojars-maven-repository\ncan @originalsurfmex give it a try and tell me the results?\nperhaps you have to make an clojars account, i don't know yet\n\nHave a good weekend!\n\n2014/1/10 originalsurfmex notifications@github.com\n\n> Ok - that sounds awesome, thanks for the offer. What do you think about\n> using my fork? It currently references all the 2.1 libs.\n> \n> https://github.com/originalsurfmex/quil\n> \n> Then we do diffs and track stuff/etc.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/quil/quil/issues/48#issuecomment-32034819\n> .\n. Hi @originalsurfer!\nHave you tried the link that i wrote here?\nhttp://www.cubrid.org/wiki_apis/entry/how-to-push-new-cubrid-jdbc-driver-to-clojars-maven-repository\n\n2014/1/19 originalsurfmex notifications@github.com\n\n> I'm getting closer, I gotta admit though its kind of a pain. I'm having\n> trouble signing my jars and pom files. Here they are in github (the md5 and\n> sha1 files not included of course):\n> \n> https://github.com/originalsurfmex/originalsurfmex_m2/tree/master/repository/processing/core/2.1\n> \n> https://github.com/originalsurfmex/originalsurfmex_m2/tree/master/repository/processing/gluegen-rt/2.1\n> \n> here they are in clojars:\n> https://clojars.org/org.clojars.originalsurfmex.processing/core\n> https://clojars.org/org.clojars.originalsurfmex.processing/gluegen-rt\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/quil/quil/issues/48#issuecomment-32700241\n> .\n. a few days ago i follow this tutorial\nhttp://thornydev.blogspot.com.es/2013/03/signing-and-promoting-your-clojure.htmland\nworked for clojars, maybe you can give it a try also\n\ngood luck!\n\n2014/1/20 originalsurfmex notifications@github.com\n\n> Yes, I used that link - it was by far the most helpful thing I've seen\n> yet, thanks for sending it. My only remaining problem is that the jar's and\n> pom files I make are unsigned. I can upload them but Clojars indicates that\n> they are unsigned.\n> \n> When I log in the page says this:\n> \n> promotion\n> \u2022/home/clojars/repo/org/clojars/originalsurfmex/processing/core/2.1/core-2.1.jar\n> is not signed.\n> \u2022/home/clojars/repo/org/clojars/originalsurfmex/processing/core/2.1/core-2.1.pom\n> is not signed.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/quil/quil/issues/48#issuecomment-32785642\n> .\n. Hi Nikita,\nI don't know how I helped you :), anyway is an awesome news the quil2.0\nbranch. I'll try to use gsvideo again with these defaults and I will send\nthe results\n\nThanks a lot for your work!\n\n2014-02-06 22:39 GMT+01:00 Nikita Beloglazov notifications@github.com:\n\n> I've created quil2.0 https://github.com/quil/quil/tree/quil2.0 branch.\n> Thanks to @tangrammer https://github.com/tangrammer I used his [processing/core\n> \"2.1\"] jar to avoid all this hustle with leiningen :)\n> \n> I fixed some errors that appeared on my machine when moving to Processing\n> 2.0 like window size wasn't set right, NullPointerException on frame close.\n> Now it should work (at least some examples work!). And cool thing that\n> opengl renderer works fine for me: it didn't work before on my machine\n> (Ubuntu 13, 64bit) on quil 1.6.\n> \n> So feel free to try. Now I want to test all function from core.clj to\n> check whether they work or not.\n> \n> I would be glad if anyone helped me. I think there are several ways to\n> help that I know of:\n> - run all examples on your machine on quil2.0 branch and verify that\n>   they work fine;\n> - check some functions from core.clj manually (please discuss with me\n>   so we don't overlap);\n> - ideally we should have tests. Test would check that functions\n>   doesn't throw errors. It's pretty hard to automate \"visual\" validation so\n>   let's stick with error validation for now. I can some ideas how we can\n>   achieve it. Would be happy if someone want to implement it.\n> \n> Feel free to leave any suggestion/comments/critique.\n> \n> Nikita\n> \n> ## \n> \n> Reply to this email directly or view it on GitHubhttps://github.com/quil/quil/issues/48#issuecomment-34375144\n> .\n. Hi Nikita,\nI've been struggling with this video integration too.\nMy last solution was work with quil-processing2 and extend quil/applet.clj\nto integrate the movieEvent register methods into the defsketch macro\ndefinition. And still i have to declare my video library resources in\nproject.clj as resource-paths\n\n2014-04-09 23:10 GMT+02:00 Nikita Beloglazov notifications@github.com:\n\n> Hi Patrick\n> Are you still up to this task? I can help you if you want.\n> \n> ## \n> \n> Reply to this email directly or view it on GitHubhttps://github.com/quil/quil/issues/75#issuecomment-40016937\n> .\n. @nbeloglazov  here https://gist.github.com/tangrammer/10405691 you can see my\nchanges on quil2.0 to extend  video support\nI've only added the functions modified\n\nand here https://dl.dropboxusercontent.com/u/8688858/lib.zip the libs you\nneed as :resource-paths (until we can pack the video deps as clojar lib)\n\nThe same issue I've done to extend quil for using oscp5 lib\n\nThanks!\n\n2014-04-10 18:04 GMT+02:00 Nikita Beloglazov notifications@github.com:\n\n> @tangrammer https://github.com/tangrammer, @phiathttps://github.com/phiatcan you give link to any working example, no matter how hacky and ugly it\n> looks like?\n> \n> ## \n> \n> Reply to this email directly or view it on GitHubhttps://github.com/quil/quil/issues/75#issuecomment-40104412\n> .\n. @nbeloglazov , Ok,  I'll give a try to\nthis \"did you try to pack all this lib/macosx64 resources into a jar,\ninstall it into local lein repo and include it as dependency?\"\n\n2014-04-11 0:58 GMT+02:00 Nikita Beloglazov notifications@github.com:\n\n> As I see, the main problem here is this native libs that need to added to\n> resources folder. But we want to pack them into jars so they can be easily\n> included in project.clj...\n> @tangrammer https://github.com/tangrammer, did you try to pack all this\n> lib/macosx64 resources into a jar, install it into local lein repo and\n> include it as dependency?\n> I suppose it should be possible to do something like this. Though I'm not\n> sure how. Could you check it, if you have time for it?\n> \n> ## \n> \n> Reply to this email directly or view it on GitHubhttps://github.com/quil/quil/issues/75#issuecomment-40152773\n> .\n. @nbeloglazov I already have the macosx64 dir resources packaged into a jar in my maven local repo and using it from project.clj `[quil-video/macosx64 \"1\"]` \n\nthe lib https://dl.dropboxusercontent.com/u/8688858/macosx64-1.jar\n. yes it does\n\n2014-04-11 13:14 GMT+02:00 Nikita Beloglazov notifications@github.com:\n\n> Cool. So it does work from jar, right?\n> \n> ## \n> \n> Reply to this email directly or view it on GitHubhttps://github.com/quil/quil/issues/75#issuecomment-40193181\n> .\n. @nbeloglazov  following the same way i have all the necessaries libs in my local maven repo and now my project dependencies are these\n\n```\n(defproject dat00 \"0.1.0-SNAPSHOT\"\n  :description \"FIXME: write description\"\n  :url \"http://example.com/FIXME\"\n  :license {:name \"Eclipse Public License\"\n            :url \"http://www.eclipse.org/legal/epl-v10.html\"}\n  :dependencies [[org.clojure/clojure \"1.5.1\"]\n                 [quil/quil \"2.0.1-SNAPSHOT\"]\n                 [org.clojure/data.json \"0.2.4\"]\n                 [quil-video/macosx64 \"1\"]\n                 [quil-video/jna \"1\"]\n                 [quil-video/video \"1\"]\n                 [quil-video/gstreamer-java \"1\"]\n                 ]\n  )\n\n```\n\nBut i suspect there is a better way to group all these quil-video resources in one line, dont you think the same?\n\nAnd I still have a question about the better way to extend quil applet. \nIt seems that with each library (video, oscp5 ...) that uses the event listener approach we have to modify the applet.clj file and include this library as dependency on parent project. \n\n```\n(gen-interface\n :name quil.MovieI\n :methods [\n           [movieEvent\n            [processing.video.Movie] Object]\n           ])\n(gen-interface\n :name quil.OscP5\n :methods [\n           [oscEvent\n            [oscP5.OscMessage] Object]\n           ])\n(gen-class\n  :name \"quil.Applet\"\n  :implements [clojure.lang.IMeta quil.MovieI quil.OscP5]\n  :extends processing.core.PApplet\n  ;:methods [[movieEvent [processing.video.Movie] Object]]\n```\n\nDo you know a better approach to achieve this?\n. Hi @nbeloglazov again!\nIt seems that I've found another way (maybe better) to extend \"quil.Applet\" without modifying the base file applet.clj. As you can see in the code attached the new solution uses proxy to extend the processing.core.PApplet class \n\nwhat does it sounds?\n\nthanks!\n\n```\n(ns dat00.juan\n  (:import (processing.video Movie))\n  (:use quil.core\n        [quil.helpers.drawing :only [line-join-points]]\n        [quil.helpers.seqs :only [range-incl steps]]))\n(declare mov)\n\n(defn setup[]\n  (println \"setup completed!\")\n)\n\n(defn draw []\n  (image mov 0 0 ))\n\n(defsketch juan\n    :setup setup\n    :draw draw\n    :size [500 500]\n    )\n\n(gen-interface\n :name quil.MovieI\n :methods [\n           [movieEvent\n            [processing.video.Movie] Object]\n           ])\n\n(def other (proxy [processing.core.PApplet quil.MovieI] []\n             (dataPath [filename]\n               (println filename)\n               (.dataPath juan filename))\n             (registerDispose [o]\n               (println \"register dispose \" o )\n               (.registerDispose juan o))\n             (registerMethod [o #^Movie m]\n               (println \"register method \" o m)\n               (.registerMethod juan o m))\n             (unregisterMethod [o #^Movie m]\n               (println \"unregister method \" o m)\n               (.unregisterMethod juan o m))\n             (die [m]\n               (.die juan m))\n             (movieEvent [#^Movie movie]\n                 (.read movie))\n             (dispose []\n               (.dispose juan))\n             ))\n(set! (.-g other) (.-g juan))\n\n(def mov (Movie. other \"data/transit.mov\"))\n(.play mov)\n```\n. updated defsketch definition \n\n```\n(defsketch juan\n    :setup setup\n    :draw draw\n    :size [500 500])\n\n```\n\nwithout :movie-event \n. @nbeloglazov  bad news! The resources \"macosx64\" or video libraries were not actually working\n\nMy example project was using  the resources of quil parent project through checkouts simlink, and in this parent project there was the resources attached :(\n\nBut, the way for extending video  support with proxy is working anyway :)\n\nI'll try to get deeper on package clojure resources\n. Solution found!\n\nIt seems not to need the \"this\" parameter :)\n\n(let [fc (JFileChooser.)\n        returnval (.showOpenDialog fc nil) ]\n\n```\n(condp = returnval\n  0 (println (.getSelectedFile fc))\n  (str \"unexpected value\" returnval)\n  )\n)\n```\n. I think this pull must wait until integration with processing 2.0, so I'm going to close it\n. Hi Nikita!\n\nnow is working fine although for me It is very hard to find this kind of\ndetails on processing project\n\nanyway thanks a lot\nJuan\n\n2014-04-08 19:19 GMT+02:00 Nikita Beloglazov notifications@github.com:\n\n> Which version of quil are you using? I suspect that regitserMethod was\n> added in Processing 2 therefore you need to use Quil 2 which is not\n> released yet, but you can try SNAPSHOT version:\n> https://clojars.org/quil/versions/2.0.0-SNAPSHOT\n> Actually registerMethod is even used in Quil 2:\n> https://github.com/quil/quil/blob/quil2.0/src/quil/applet.clj#L287 so it\n> is definitely possible to call this method.\n> \n> ## \n> \n> Reply to this email directly or view it on GitHubhttps://github.com/quil/quil/issues/89#issuecomment-39875986\n> .\n. You are right Nikita\nthanks!\n\n2014-04-24 12:02 GMT+02:00 Nikita Beloglazov notifications@github.com:\n\n> Hi\n> Could you please repost your question to quil mailing list:\n> https://groups.google.com/forum/#!forum/clj-processing ?\n> Mailing list is better place for such questions because it is not really\n> an issue with quil but rather \"How to use\" question.\n> Closing this issue.\n> \n> Thanks!\n> Nikita\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/quil/quil/issues/93#issuecomment-41263051\n> .\n. Hi guys and specially @nbeloglazov !\nI'm having problems with this issue, my repl doesn't refresh automatically, so until i dont press ENTER i dont get any result in my cider REPL. \n\nThis is my cider config\n\n```\n;; Connected to nREPL server - nrepl://localhost:60551\n;; CIDER 0.14.0snapshot (package: 20160830.23), nREPL 0.2.12\n;; Clojure 1.8.0, Java 1.8.0_31\n\n```\n\nand my project settings\n\n```\n  :dependencies [[org.clojure/clojure \"1.8.0\"]\n                 [org.clojure/clojurescript \"1.8.51\"]\n                 [quil \"2.4.0\"]\n                 [clj-time \"0.12.0\"]]\n\n```\n\nthis is my defsketch definition\n\n``` clojure\n(q/defsketch gridtest\n  :size [680 520]\n  :setup setup\n  :update update-state\n  :key-pressed the-key-handler\n;  :key-released the-key-handler\n  :draw draw-state\n  :features [:keep-on-top ]\n  :middleware [m/fun-mode  m/pause-on-error ])\n```\n\nand the key-handler\n\n``` clojure\n(defn the-key-handler [state k]\n  (.println System/out  (pr-str k))\n\n  ;;(update-in state [:debugging :message ] (fn [_] (pr-str k)))\n  state)\n```\n\nBTW: `println` always freezes my current nrepl ....\n\nThanks!!\n\nPS: I also tried `:features [:keep-on-top :no-bind-output]` to have normal output in my nrepl-server with no success :(\n. ",
    "marianoguerra": "any hint on how to do it? I start the repl and what should I import? if I can get any hints and I get it running I can write a small section on the readme on how to run the examples.\n. I found the way, running \"lein repl\" on the base of the project and then (load-file \"examples/gen_art/name_of_example.clj\") loads and plays the example\n. any hint on how to do it? I start the repl and what should I import? if I can get any hints and I get it running I can write a small section on the readme on how to run the examples.\n. I found the way, running \"lein repl\" on the base of the project and then (load-file \"examples/gen_art/name_of_example.clj\") loads and plays the example\n. ",
    "originalsurfmex": "Ok, I like it.  I'm going to start by adding 2.0 beta's core.jar here: \n\norg.clojars\n\nAny other tips before I set off?\n. Wow, ok.  I'll ruminate on that.  Thanks.\n. I have forked the repo and I'm hoping to start matching things up with Processing 2.1\n\nI am using a local repo (lein localrepo) of all the processing jars that are typically used in an Eclipse project.  I can't get the actual jars to upload to clojars though.  Here is where I have the project\n\nhttps://clojars.org/processing-jars\n\nthis is my project.clj that I used:\n\n```\n(defproject processing-jars \"0.1.0-SNAPSHOT\"\n  :description \"Processing 2.1 jars\"\n  :url \"http://www.processing.org\"\n  :license {:name \"Eclipse Public License\"\n            :url \"http://www.eclipse.org/legal/epl-v10.html\"}\n  :dependencies [[org.clojure/clojure \"1.5.1\"]\n                 [processing/core \"2.1\"]\n                 [processing/jogl-all \"2.1\"]\n                 [processing/jogl-all-natives-linux-amd64 \"2.1\"]\n                 [processing/jogl-all-natives-linux-i586 \"2.1\"]\n                 [processing/jogl-all-natives-linux-armv6hf \"2.1\"]\n                 [processing/jogl-all-natives-macosx-universal \"2.1\"]\n                 [processing/jogl-all-natives-windows-amd64 \"2.1\"]\n                 [processing/jogl-all-natives-windows-i586 \"2.1\"]\n                 [processing/gluegen-rt \"2.1\"]\n                 [processing/gluegen-rt-natives-linux-amd64 \"2.1\"]\n                 [processing/gluegen-rt-natives-linux-i586 \"2.1\"]\n                 [processing/gluegen-rt-natives-linux-armv6hf \"2.1\"]\n                 [processing/gluegen-rt-natives-macosx-universal \"2.1\"]\n                 [processing/gluegen-rt-natives-windows-amd64 \"2.1\"]\n                 [processing/gluegen-rt-natives-windows-i586 \"2.1\"] ])\n```\n\npom.xml generated by leningen:\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?><project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n  <groupId>processing-jars</groupId>\n  <artifactId>processing-jars</artifactId>\n  <packaging>jar</packaging>\n  <version>0.1.0-SNAPSHOT</version>\n  <name>processing-jars</name>\n  <description>Processing 2.1 jars</description>\n  <url>http://www.processing.org</url>\n  <licenses>\n    <license>\n      <name>Eclipse Public License</name>\n      <url>http://www.eclipse.org/legal/epl-v10.html</url>\n    </license>\n  </licenses>\n  <build>\n    <sourceDirectory>src</sourceDirectory>\n    <testSourceDirectory>test</testSourceDirectory>\n    <resources>\n      <resource>\n        <directory>resources</directory>\n      </resource>\n    </resources>\n    <testResources>\n      <testResource>\n        <directory>dev-resources</directory>\n      </testResource>\n      <testResource>\n        <directory>resources</directory>\n      </testResource>\n    </testResources>\n    <directory>target</directory>\n    <outputDirectory>target/classes</outputDirectory>\n    <plugins/>\n  </build>\n  <repositories>\n    <repository>\n      <id>central</id>\n      <url>http://repo1.maven.org/maven2/</url>\n      <snapshots>\n        <enabled>false</enabled>\n      </snapshots>\n      <releases>\n        <enabled>true</enabled>\n      </releases>\n    </repository>\n    <repository>\n      <id>clojars</id>\n      <url>https://clojars.org/repo/</url>\n      <snapshots>\n        <enabled>true</enabled>\n      </snapshots>\n      <releases>\n        <enabled>true</enabled>\n      </releases>\n    </repository>\n  </repositories>\n  <dependencies>\n    <dependency>\n      <groupId>org.clojure</groupId>\n      <artifactId>clojure</artifactId>\n      <version>1.5.1</version>\n    </dependency>\n    <dependency>\n      <groupId>processing</groupId>\n      <artifactId>core</artifactId>\n      <version>2.1</version>\n    </dependency>\n    <dependency>\n      <groupId>processing</groupId>\n      <artifactId>jogl-all</artifactId>\n      <version>2.1</version>\n    </dependency>\n    <dependency>\n      <groupId>processing</groupId>\n      <artifactId>jogl-all-natives-linux-amd64</artifactId>\n      <version>2.1</version>\n    </dependency>\n    <dependency>\n      <groupId>processing</groupId>\n      <artifactId>jogl-all-natives-linux-i586</artifactId>\n      <version>2.1</version>\n    </dependency>\n    <dependency>\n      <groupId>processing</groupId>\n      <artifactId>jogl-all-natives-linux-armv6hf</artifactId>\n      <version>2.1</version>\n    </dependency>\n    <dependency>\n      <groupId>processing</groupId>\n      <artifactId>jogl-all-natives-macosx-universal</artifactId>\n      <version>2.1</version>\n    </dependency>\n    <dependency>\n      <groupId>processing</groupId>\n      <artifactId>jogl-all-natives-windows-amd64</artifactId>\n      <version>2.1</version>\n    </dependency>\n    <dependency>\n      <groupId>processing</groupId>\n      <artifactId>jogl-all-natives-windows-i586</artifactId>\n      <version>2.1</version>\n    </dependency>\n    <dependency>\n      <groupId>processing</groupId>\n      <artifactId>gluegen-rt</artifactId>\n      <version>2.1</version>\n    </dependency>\n    <dependency>\n      <groupId>processing</groupId>\n      <artifactId>gluegen-rt-natives-linux-amd64</artifactId>\n      <version>2.1</version>\n    </dependency>\n    <dependency>\n      <groupId>processing</groupId>\n      <artifactId>gluegen-rt-natives-linux-i586</artifactId>\n      <version>2.1</version>\n    </dependency>\n    <dependency>\n      <groupId>processing</groupId>\n      <artifactId>gluegen-rt-natives-linux-armv6hf</artifactId>\n      <version>2.1</version>\n    </dependency>\n    <dependency>\n      <groupId>processing</groupId>\n      <artifactId>gluegen-rt-natives-macosx-universal</artifactId>\n      <version>2.1</version>\n    </dependency>\n    <dependency>\n      <groupId>processing</groupId>\n      <artifactId>gluegen-rt-natives-windows-amd64</artifactId>\n      <version>2.1</version>\n    </dependency>\n    <dependency>\n      <groupId>processing</groupId>\n      <artifactId>gluegen-rt-natives-windows-i586</artifactId>\n      <version>2.1</version>\n    </dependency>\n    <dependency>\n      <groupId>org.clojure</groupId>\n      <artifactId>tools.nrepl</artifactId>\n      <version>0.2.3</version>\n      <exclusions>\n        <exclusion>\n          <groupId>org.clojure</groupId>\n          <artifactId>clojure</artifactId>\n        </exclusion>\n      </exclusions>\n      <scope>test</scope>\n    </dependency>\n    <dependency>\n      <groupId>clojure-complete</groupId>\n      <artifactId>clojure-complete</artifactId>\n      <version>0.2.3</version>\n      <exclusions>\n        <exclusion>\n          <groupId>org.clojure</groupId>\n          <artifactId>clojure</artifactId>\n        </exclusion>\n      </exclusions>\n      <scope>test</scope>\n    </dependency>\n  </dependencies>\n</project>\n\n<!-- This file was autogenerated by Leiningen.\n  Please do not edit it directly; instead edit project.clj and regenerate it.\n  It should not be considered canonical data. For more information see\n  https://github.com/technomancy/leiningen -->\n```\n\nAny help in doing this?  I'd like to get the basic jars up on clojars and start learning away.\n. OK - I was able to find a workaround for clojars.  For the life of my I could not figure out how to upload dependencies to clojars.\n\nThis is just in case anybody might find it useful, I was able to use my github cloned .m2 repo as a repository - thanks to some stackoverflow help.\n\nIf you go to my fork and see my project.clj it looks like this:\n\n```\n    :dependencies [[org.clojure/clojure \"1.5.1\"]\n                 [processing/core \"2.1\"]\n                 [processing/jogl-all \"2.1\"]\n                 [processing/jogl-all-natives-linux-amd64 \"2.1\"]\n                 [processing/jogl-all-natives-linux-i586 \"2.1\"]\n                 [processing/jogl-all-natives-linux-armv6hf \"2.1\"]\n                 [processing/jogl-all-natives-macosx-universal \"2.1\"]\n                 [processing/jogl-all-natives-windows-amd64 \"2.1\"]\n                 [processing/jogl-all-natives-windows-i586 \"2.1\"]\n                 [processing/gluegen-rt \"2.1\"]\n                 [processing/gluegen-rt-natives-linux-amd64 \"2.1\"]\n                 [processing/gluegen-rt-natives-linux-i586 \"2.1\"]\n                 [processing/gluegen-rt-natives-linux-armv6hf \"2.1\"]\n                 [processing/gluegen-rt-natives-macosx-universal \"2.1\"]\n                 [processing/gluegen-rt-natives-windows-amd64 \"2.1\"]\n                 [processing/gluegen-rt-natives-windows-i586 \"2.1\"] ]\n  :repositories [[\"processinglibs\" \"https://github.com/originalsurfmex/originalsurfmex_m2/tree/master/repository/\"]]\n```\n. Thanks tangrammer - I didn't want to mention it on a site like stackoverflow because I'm not really a programmer.  I'm just a tinkerer trying to make art with different languages as I learn them.  I don't even really know clojure yet, I'm still learning it.\n\nYour github idea was awesome and super convenient, thanks.\n\nI'm going to take a little break from messing with repo's for the moment, because I really want to get adjusting the wrappers in the `core.clj` file.  All I am doing is running `lein clean` and trying to figure out what is causing each reflection warning and thread exception.  After that maybe I can see what needs to be added from updates.  Is this a logical way to go about bringing Quil up to date?\n\n`lein clean` only gives me a brief list then it says `...55 more` is there a way to just show me the whole list or print it to a log or something?\n\nWhen I say I'm just learning, I mean I just have a stack of Clojure books and minimal understanding of Lisp.  All I want to do is make a little art with a language that will grow my brain.\n\n---\n\nAs an aside, I can't help but wonder what it would be like using Quil without wrappers - or if its even possible.  I kind of like using vanilla Processing commands because it keeps me familiar with the API.\n. Ok - that sounds awesome, thanks for the offer.  What do you think about using my fork?  It currently references all the 2.1 libs.\n\nhttps://github.com/originalsurfmex/quil\n\nThen we do diffs and track stuff/etc.\n. Thanks for the help so far.  I have had some success - minus the ability to sign jars and poms.\n\nI'm getting closer, I gotta admit though its kind of a pain.  Here is the process.  There must be an automated way to do this right?\n\n**Go to your   `.m2/repository/group/library/version/`   folder**\n1. `md5sum lib.jar > lib.jar.md5`\n2. `sha1sum lib.jar > lib.jar.sha1`\n3. Change the groupId in lib.pom from\n\n``` xml\n<groupId>libgroup</groupId>\n```\n\nto\n\n``` xml\n<groupId>org.clojars.username.libgroup</groupId>\n```\n1. Add missing sections in lib.pom _by hand_ otherwise clojars complains:\n\n``` xml\n    <description>processing-libs</description>\n    <url>http://www.processing.org</url>\n    <scm>\n        <tag>something relevant?</tag>\n        <url>somewhere relevant?</url>\n    </scm>\n    <licenses>\n        <license>\n            <name/>\n            <url/>\n            <distribution/>\n        </license>\n    </licenses>\n    <developers>\n        <developer>\n            <id/>\n            <name/>\n            <email/>\n        </developer>\n    </developers>\n    <repositories>\n        <repository>\n            <id>clojars.org</id>\n            <url>http://clojars.org/repo/</url>\n        </repository>\n    </repositories>\n```\n1. `md5sum lib.pom > lib.pom.md5`\n2. `sha1sum lib.pom > lib.pom.sha1`\n3. `scp lib* clojars@clojars.org:`\n\nHere they are in github (the md5 and sha1 files not included of course):\nhttps://github.com/originalsurfmex/originalsurfmex_m2/tree/master/repository/processing/core/2.1\nhttps://github.com/originalsurfmex/originalsurfmex_m2/tree/master/repository/processing/gluegen-rt/2.1\n\nHere they are in clojars:\nhttps://clojars.org/org.clojars.originalsurfmex.processing/core\nhttps://clojars.org/org.clojars.originalsurfmex.processing/gluegen-rt\n\nBefore I go ahead and add all of these libs I have two concerns:\n1. I have polluted clojars.org my mistakes --> https://clojars.org/users/originalsurfmex\n2. Is it gonna be a waste or a deal breaker that my jars and poms aren't signed? I can't seem to figure out how to sign them.  I have SSH and PGP setup on clojar.org and scp runs just fine.\n. Yes, I used that link - it was by far the most helpful thing I've seen yet, thanks for sending it.  My only remaining problem is that the jar's and pom files I make are unsigned.  I can upload them but Clojars indicates that they are unsigned. \n\nWhen I log in the page says this:\n\n> promotion\n> \u2022/home/clojars/repo/org/clojars/originalsurfmex/processing/core/2.1/core-2.1.jar is not signed.\n> \u2022/home/clojars/repo/org/clojars/originalsurfmex/processing/core/2.1/core-2.1.pom is not signed.\n\nIf nobody else think that's a problem though, then I'm happy to upload all the jars and poms.\n. OK! Here they are - all the current 2.1 processing libs:\nhttps://clojars.org/groups/org.clojars.originalsurfmex.processing\n\n---\n\n### org.clojars.originalsurfmex.processing group\n\n### Projects\n\n```\norg.clojars.originalsurfmex.processing/core\norg.clojars.originalsurfmex.processing/gluegen-rt\norg.clojars.originalsurfmex.processing/gluegen-rt-natives-linux-amd64\norg.clojars.originalsurfmex.processing/gluegen-rt-natives-linux-armv6hf\norg.clojars.originalsurfmex.processing/gluegen-rt-natives-linux-i586\norg.clojars.originalsurfmex.processing/gluegen-rt-natives-macosx-universal\norg.clojars.originalsurfmex.processing/gluegen-rt-natives-windows-amd64\norg.clojars.originalsurfmex.processing/gluegen-rt-natives-windows-i586\norg.clojars.originalsurfmex.processing/jogl-all\norg.clojars.originalsurfmex.processing/jogl-all-natives-linux-amd64\norg.clojars.originalsurfmex.processing/jogl-all-natives-linux-armv6hf\norg.clojars.originalsurfmex.processing/jogl-all-natives-linux-i586\norg.clojars.originalsurfmex.processing/jogl-all-natives-macosx-universal\norg.clojars.originalsurfmex.processing/jogl-all-natives-windows-amd64\norg.clojars.originalsurfmex.processing/jogl-all-natives-windows-i586\n```\n\n---\n\nAs a final note, thanks for all the help.  All my jars and pom's are ending up usigned.  I could not figure out how to make them appear as signed while using the `scp` command to push to clojars.  Turns out I did not have to make my own md5 and sha1 hashes. `scp` creates all the for you as outlined in the SSH method here: https://github.com/ato/clojars-web/wiki/Pushing\n\nI already have SSH and PGP keys saved on Clojars.org and my PGP keys are on MIT's keyserver.  I can't see any reason for them to go out unsigned.\n\nIf anybody figures out how to sign them, feel free to comment, they are still in my repo:\nhttps://github.com/originalsurfmex/originalsurfmex_m2/tree/master/repository/processing/\n. Ok, I like it.  I'm going to start by adding 2.0 beta's core.jar here: \n\norg.clojars\n\nAny other tips before I set off?\n. Wow, ok.  I'll ruminate on that.  Thanks.\n. I have forked the repo and I'm hoping to start matching things up with Processing 2.1\n\nI am using a local repo (lein localrepo) of all the processing jars that are typically used in an Eclipse project.  I can't get the actual jars to upload to clojars though.  Here is where I have the project\n\nhttps://clojars.org/processing-jars\n\nthis is my project.clj that I used:\n\n```\n(defproject processing-jars \"0.1.0-SNAPSHOT\"\n  :description \"Processing 2.1 jars\"\n  :url \"http://www.processing.org\"\n  :license {:name \"Eclipse Public License\"\n            :url \"http://www.eclipse.org/legal/epl-v10.html\"}\n  :dependencies [[org.clojure/clojure \"1.5.1\"]\n                 [processing/core \"2.1\"]\n                 [processing/jogl-all \"2.1\"]\n                 [processing/jogl-all-natives-linux-amd64 \"2.1\"]\n                 [processing/jogl-all-natives-linux-i586 \"2.1\"]\n                 [processing/jogl-all-natives-linux-armv6hf \"2.1\"]\n                 [processing/jogl-all-natives-macosx-universal \"2.1\"]\n                 [processing/jogl-all-natives-windows-amd64 \"2.1\"]\n                 [processing/jogl-all-natives-windows-i586 \"2.1\"]\n                 [processing/gluegen-rt \"2.1\"]\n                 [processing/gluegen-rt-natives-linux-amd64 \"2.1\"]\n                 [processing/gluegen-rt-natives-linux-i586 \"2.1\"]\n                 [processing/gluegen-rt-natives-linux-armv6hf \"2.1\"]\n                 [processing/gluegen-rt-natives-macosx-universal \"2.1\"]\n                 [processing/gluegen-rt-natives-windows-amd64 \"2.1\"]\n                 [processing/gluegen-rt-natives-windows-i586 \"2.1\"] ])\n```\n\npom.xml generated by leningen:\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?><project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n  <groupId>processing-jars</groupId>\n  <artifactId>processing-jars</artifactId>\n  <packaging>jar</packaging>\n  <version>0.1.0-SNAPSHOT</version>\n  <name>processing-jars</name>\n  <description>Processing 2.1 jars</description>\n  <url>http://www.processing.org</url>\n  <licenses>\n    <license>\n      <name>Eclipse Public License</name>\n      <url>http://www.eclipse.org/legal/epl-v10.html</url>\n    </license>\n  </licenses>\n  <build>\n    <sourceDirectory>src</sourceDirectory>\n    <testSourceDirectory>test</testSourceDirectory>\n    <resources>\n      <resource>\n        <directory>resources</directory>\n      </resource>\n    </resources>\n    <testResources>\n      <testResource>\n        <directory>dev-resources</directory>\n      </testResource>\n      <testResource>\n        <directory>resources</directory>\n      </testResource>\n    </testResources>\n    <directory>target</directory>\n    <outputDirectory>target/classes</outputDirectory>\n    <plugins/>\n  </build>\n  <repositories>\n    <repository>\n      <id>central</id>\n      <url>http://repo1.maven.org/maven2/</url>\n      <snapshots>\n        <enabled>false</enabled>\n      </snapshots>\n      <releases>\n        <enabled>true</enabled>\n      </releases>\n    </repository>\n    <repository>\n      <id>clojars</id>\n      <url>https://clojars.org/repo/</url>\n      <snapshots>\n        <enabled>true</enabled>\n      </snapshots>\n      <releases>\n        <enabled>true</enabled>\n      </releases>\n    </repository>\n  </repositories>\n  <dependencies>\n    <dependency>\n      <groupId>org.clojure</groupId>\n      <artifactId>clojure</artifactId>\n      <version>1.5.1</version>\n    </dependency>\n    <dependency>\n      <groupId>processing</groupId>\n      <artifactId>core</artifactId>\n      <version>2.1</version>\n    </dependency>\n    <dependency>\n      <groupId>processing</groupId>\n      <artifactId>jogl-all</artifactId>\n      <version>2.1</version>\n    </dependency>\n    <dependency>\n      <groupId>processing</groupId>\n      <artifactId>jogl-all-natives-linux-amd64</artifactId>\n      <version>2.1</version>\n    </dependency>\n    <dependency>\n      <groupId>processing</groupId>\n      <artifactId>jogl-all-natives-linux-i586</artifactId>\n      <version>2.1</version>\n    </dependency>\n    <dependency>\n      <groupId>processing</groupId>\n      <artifactId>jogl-all-natives-linux-armv6hf</artifactId>\n      <version>2.1</version>\n    </dependency>\n    <dependency>\n      <groupId>processing</groupId>\n      <artifactId>jogl-all-natives-macosx-universal</artifactId>\n      <version>2.1</version>\n    </dependency>\n    <dependency>\n      <groupId>processing</groupId>\n      <artifactId>jogl-all-natives-windows-amd64</artifactId>\n      <version>2.1</version>\n    </dependency>\n    <dependency>\n      <groupId>processing</groupId>\n      <artifactId>jogl-all-natives-windows-i586</artifactId>\n      <version>2.1</version>\n    </dependency>\n    <dependency>\n      <groupId>processing</groupId>\n      <artifactId>gluegen-rt</artifactId>\n      <version>2.1</version>\n    </dependency>\n    <dependency>\n      <groupId>processing</groupId>\n      <artifactId>gluegen-rt-natives-linux-amd64</artifactId>\n      <version>2.1</version>\n    </dependency>\n    <dependency>\n      <groupId>processing</groupId>\n      <artifactId>gluegen-rt-natives-linux-i586</artifactId>\n      <version>2.1</version>\n    </dependency>\n    <dependency>\n      <groupId>processing</groupId>\n      <artifactId>gluegen-rt-natives-linux-armv6hf</artifactId>\n      <version>2.1</version>\n    </dependency>\n    <dependency>\n      <groupId>processing</groupId>\n      <artifactId>gluegen-rt-natives-macosx-universal</artifactId>\n      <version>2.1</version>\n    </dependency>\n    <dependency>\n      <groupId>processing</groupId>\n      <artifactId>gluegen-rt-natives-windows-amd64</artifactId>\n      <version>2.1</version>\n    </dependency>\n    <dependency>\n      <groupId>processing</groupId>\n      <artifactId>gluegen-rt-natives-windows-i586</artifactId>\n      <version>2.1</version>\n    </dependency>\n    <dependency>\n      <groupId>org.clojure</groupId>\n      <artifactId>tools.nrepl</artifactId>\n      <version>0.2.3</version>\n      <exclusions>\n        <exclusion>\n          <groupId>org.clojure</groupId>\n          <artifactId>clojure</artifactId>\n        </exclusion>\n      </exclusions>\n      <scope>test</scope>\n    </dependency>\n    <dependency>\n      <groupId>clojure-complete</groupId>\n      <artifactId>clojure-complete</artifactId>\n      <version>0.2.3</version>\n      <exclusions>\n        <exclusion>\n          <groupId>org.clojure</groupId>\n          <artifactId>clojure</artifactId>\n        </exclusion>\n      </exclusions>\n      <scope>test</scope>\n    </dependency>\n  </dependencies>\n</project>\n\n<!-- This file was autogenerated by Leiningen.\n  Please do not edit it directly; instead edit project.clj and regenerate it.\n  It should not be considered canonical data. For more information see\n  https://github.com/technomancy/leiningen -->\n```\n\nAny help in doing this?  I'd like to get the basic jars up on clojars and start learning away.\n. OK - I was able to find a workaround for clojars.  For the life of my I could not figure out how to upload dependencies to clojars.\n\nThis is just in case anybody might find it useful, I was able to use my github cloned .m2 repo as a repository - thanks to some stackoverflow help.\n\nIf you go to my fork and see my project.clj it looks like this:\n\n```\n    :dependencies [[org.clojure/clojure \"1.5.1\"]\n                 [processing/core \"2.1\"]\n                 [processing/jogl-all \"2.1\"]\n                 [processing/jogl-all-natives-linux-amd64 \"2.1\"]\n                 [processing/jogl-all-natives-linux-i586 \"2.1\"]\n                 [processing/jogl-all-natives-linux-armv6hf \"2.1\"]\n                 [processing/jogl-all-natives-macosx-universal \"2.1\"]\n                 [processing/jogl-all-natives-windows-amd64 \"2.1\"]\n                 [processing/jogl-all-natives-windows-i586 \"2.1\"]\n                 [processing/gluegen-rt \"2.1\"]\n                 [processing/gluegen-rt-natives-linux-amd64 \"2.1\"]\n                 [processing/gluegen-rt-natives-linux-i586 \"2.1\"]\n                 [processing/gluegen-rt-natives-linux-armv6hf \"2.1\"]\n                 [processing/gluegen-rt-natives-macosx-universal \"2.1\"]\n                 [processing/gluegen-rt-natives-windows-amd64 \"2.1\"]\n                 [processing/gluegen-rt-natives-windows-i586 \"2.1\"] ]\n  :repositories [[\"processinglibs\" \"https://github.com/originalsurfmex/originalsurfmex_m2/tree/master/repository/\"]]\n```\n. Thanks tangrammer - I didn't want to mention it on a site like stackoverflow because I'm not really a programmer.  I'm just a tinkerer trying to make art with different languages as I learn them.  I don't even really know clojure yet, I'm still learning it.\n\nYour github idea was awesome and super convenient, thanks.\n\nI'm going to take a little break from messing with repo's for the moment, because I really want to get adjusting the wrappers in the `core.clj` file.  All I am doing is running `lein clean` and trying to figure out what is causing each reflection warning and thread exception.  After that maybe I can see what needs to be added from updates.  Is this a logical way to go about bringing Quil up to date?\n\n`lein clean` only gives me a brief list then it says `...55 more` is there a way to just show me the whole list or print it to a log or something?\n\nWhen I say I'm just learning, I mean I just have a stack of Clojure books and minimal understanding of Lisp.  All I want to do is make a little art with a language that will grow my brain.\n\n---\n\nAs an aside, I can't help but wonder what it would be like using Quil without wrappers - or if its even possible.  I kind of like using vanilla Processing commands because it keeps me familiar with the API.\n. Ok - that sounds awesome, thanks for the offer.  What do you think about using my fork?  It currently references all the 2.1 libs.\n\nhttps://github.com/originalsurfmex/quil\n\nThen we do diffs and track stuff/etc.\n. Thanks for the help so far.  I have had some success - minus the ability to sign jars and poms.\n\nI'm getting closer, I gotta admit though its kind of a pain.  Here is the process.  There must be an automated way to do this right?\n\n**Go to your   `.m2/repository/group/library/version/`   folder**\n1. `md5sum lib.jar > lib.jar.md5`\n2. `sha1sum lib.jar > lib.jar.sha1`\n3. Change the groupId in lib.pom from\n\n``` xml\n<groupId>libgroup</groupId>\n```\n\nto\n\n``` xml\n<groupId>org.clojars.username.libgroup</groupId>\n```\n1. Add missing sections in lib.pom _by hand_ otherwise clojars complains:\n\n``` xml\n    <description>processing-libs</description>\n    <url>http://www.processing.org</url>\n    <scm>\n        <tag>something relevant?</tag>\n        <url>somewhere relevant?</url>\n    </scm>\n    <licenses>\n        <license>\n            <name/>\n            <url/>\n            <distribution/>\n        </license>\n    </licenses>\n    <developers>\n        <developer>\n            <id/>\n            <name/>\n            <email/>\n        </developer>\n    </developers>\n    <repositories>\n        <repository>\n            <id>clojars.org</id>\n            <url>http://clojars.org/repo/</url>\n        </repository>\n    </repositories>\n```\n1. `md5sum lib.pom > lib.pom.md5`\n2. `sha1sum lib.pom > lib.pom.sha1`\n3. `scp lib* clojars@clojars.org:`\n\nHere they are in github (the md5 and sha1 files not included of course):\nhttps://github.com/originalsurfmex/originalsurfmex_m2/tree/master/repository/processing/core/2.1\nhttps://github.com/originalsurfmex/originalsurfmex_m2/tree/master/repository/processing/gluegen-rt/2.1\n\nHere they are in clojars:\nhttps://clojars.org/org.clojars.originalsurfmex.processing/core\nhttps://clojars.org/org.clojars.originalsurfmex.processing/gluegen-rt\n\nBefore I go ahead and add all of these libs I have two concerns:\n1. I have polluted clojars.org my mistakes --> https://clojars.org/users/originalsurfmex\n2. Is it gonna be a waste or a deal breaker that my jars and poms aren't signed? I can't seem to figure out how to sign them.  I have SSH and PGP setup on clojar.org and scp runs just fine.\n. Yes, I used that link - it was by far the most helpful thing I've seen yet, thanks for sending it.  My only remaining problem is that the jar's and pom files I make are unsigned.  I can upload them but Clojars indicates that they are unsigned. \n\nWhen I log in the page says this:\n\n> promotion\n> \u2022/home/clojars/repo/org/clojars/originalsurfmex/processing/core/2.1/core-2.1.jar is not signed.\n> \u2022/home/clojars/repo/org/clojars/originalsurfmex/processing/core/2.1/core-2.1.pom is not signed.\n\nIf nobody else think that's a problem though, then I'm happy to upload all the jars and poms.\n. OK! Here they are - all the current 2.1 processing libs:\nhttps://clojars.org/groups/org.clojars.originalsurfmex.processing\n\n---\n\n### org.clojars.originalsurfmex.processing group\n\n### Projects\n\n```\norg.clojars.originalsurfmex.processing/core\norg.clojars.originalsurfmex.processing/gluegen-rt\norg.clojars.originalsurfmex.processing/gluegen-rt-natives-linux-amd64\norg.clojars.originalsurfmex.processing/gluegen-rt-natives-linux-armv6hf\norg.clojars.originalsurfmex.processing/gluegen-rt-natives-linux-i586\norg.clojars.originalsurfmex.processing/gluegen-rt-natives-macosx-universal\norg.clojars.originalsurfmex.processing/gluegen-rt-natives-windows-amd64\norg.clojars.originalsurfmex.processing/gluegen-rt-natives-windows-i586\norg.clojars.originalsurfmex.processing/jogl-all\norg.clojars.originalsurfmex.processing/jogl-all-natives-linux-amd64\norg.clojars.originalsurfmex.processing/jogl-all-natives-linux-armv6hf\norg.clojars.originalsurfmex.processing/jogl-all-natives-linux-i586\norg.clojars.originalsurfmex.processing/jogl-all-natives-macosx-universal\norg.clojars.originalsurfmex.processing/jogl-all-natives-windows-amd64\norg.clojars.originalsurfmex.processing/jogl-all-natives-windows-i586\n```\n\n---\n\nAs a final note, thanks for all the help.  All my jars and pom's are ending up usigned.  I could not figure out how to make them appear as signed while using the `scp` command to push to clojars.  Turns out I did not have to make my own md5 and sha1 hashes. `scp` creates all the for you as outlined in the SSH method here: https://github.com/ato/clojars-web/wiki/Pushing\n\nI already have SSH and PGP keys saved on Clojars.org and my PGP keys are on MIT's keyserver.  I can't see any reason for them to go out unsigned.\n\nIf anybody figures out how to sign them, feel free to comment, they are still in my repo:\nhttps://github.com/originalsurfmex/originalsurfmex_m2/tree/master/repository/processing/\n. ",
    "lionandoil": "any progress on this? Is @vijaykiran the most advanced branch attempting a 2.0 port? where should I join in if I wanna help?\n. One feature that springs to mind is the ability to specify arbitrary methods directly in the sketch/applet - processing libraries like fisica call methods with a certain name as callbacks, having a simple and straightforward way to register such methods via defsketch (not possible at the moment afaik) would be great!\n. any progress on this? Is @vijaykiran the most advanced branch attempting a 2.0 port? where should I join in if I wanna help?\n. One feature that springs to mind is the ability to specify arbitrary methods directly in the sketch/applet - processing libraries like fisica call methods with a certain name as callbacks, having a simple and straightforward way to register such methods via defsketch (not possible at the moment afaik) would be great!\n. ",
    "vijaykiran": "@lionandoil @nbeloglazov I'm trying to port I'll pull in latest processing this weekend into - https://github.com/vijaykiran/processing-libs - I just started and the vijaykiran/quil-2.0 alphas are working okay for me. I'm not a clojure pro - so when the canonical repo switches to 2.0 I'll switch back :)\n. @samaaron I can give it a shot for creating the document - but I'm afraid I don't have enough clojure or processing creds .I'm currently working on a project that uses quil - I'm very much interested in bringing 2.0 up to speed. \n\nIs google doc recommended or a wiki page on gh ?\n. @lionandoil @nbeloglazov I'm trying to port I'll pull in latest processing this weekend into - https://github.com/vijaykiran/processing-libs - I just started and the vijaykiran/quil-2.0 alphas are working okay for me. I'm not a clojure pro - so when the canonical repo switches to 2.0 I'll switch back :)\n. @samaaron I can give it a shot for creating the document - but I'm afraid I don't have enough clojure or processing creds .I'm currently working on a project that uses quil - I'm very much interested in bringing 2.0 up to speed. \n\nIs google doc recommended or a wiki page on gh ?\n. ",
    "ghost": "http://grokbase.com/t/gg/clojure/12bev5b4gd/quil-equivalent-for-clojurescript\n\nIs this possible?\n. http://grokbase.com/t/gg/clojure/12bev5b4gd/quil-equivalent-for-clojurescript\n\nIs this possible?\n. ",
    "balinterdi": "I tried to track this down but did not succeed. I verified that the `size` method of the PApplet is called correctly with the  passed in parameters from defsketch. The 100x100 response is the default one which I also verified by passing other values than `[200 200]`.\n\nFrom the [processing.org javadocs](http://processing.googlecode.com/svn/trunk/processing/build/javadoc/core/index.html):\n\n```\nIf size() is not called, the default size of the window is 100x100 pixels.\n```\n. Thank you for pointing that out. Does that mean that `width()` and `height()` should not be called from the setup function since its value can not be relied upon?\n. I tried to track this down but did not succeed. I verified that the `size` method of the PApplet is called correctly with the  passed in parameters from defsketch. The 100x100 response is the default one which I also verified by passing other values than `[200 200]`.\n\nFrom the [processing.org javadocs](http://processing.googlecode.com/svn/trunk/processing/build/javadoc/core/index.html):\n\n```\nIf size() is not called, the default size of the window is 100x100 pixels.\n```\n. Thank you for pointing that out. Does that mean that `width()` and `height()` should not be called from the setup function since its value can not be relied upon?\n. ",
    "tmcw": "I think what I'm looking for is something like `lein run`. People are more likely to copy & paste things into a file than a repl, and once you're in a file, you need to know how to run it. `lein run` appears to be that (correct me if I'm wrong)\n. Yep - that's super-helpful, I was a little concerned that the `lein run` way was just a wrapper around some other command that I should be using instead.\n. I think what I'm looking for is something like `lein run`. People are more likely to copy & paste things into a file than a repl, and once you're in a file, you need to know how to run it. `lein run` appears to be that (correct me if I'm wrong)\n. Yep - that's super-helpful, I was a little concerned that the `lein run` way was just a wrapper around some other command that I should be using instead.\n. ",
    "tbillington": "Is this what you are looking for ? https://github.com/quil/quil/wiki/Dynamic-Workflow-%28for-generic-editors%29\n. Is this what you are looking for ? https://github.com/quil/quil/wiki/Dynamic-Workflow-%28for-generic-editors%29\n. ",
    "jarav": "Being a newbie myself I had this problem too. After copy-pasting quil code( except for the defsketch part ) into a Leiningen created core.clj, modify the -main function as:\n`(defn -main   [ ]   (sketch  :title \"your title\"  :size [your-width your-height]   :setup setup  :draw draw))`\n\nand then, as you said, invoke lein run.\n. Being a newbie myself I had this problem too. After copy-pasting quil code( except for the defsketch part ) into a Leiningen created core.clj, modify the -main function as:\n`(defn -main   [ ]   (sketch  :title \"your title\"  :size [your-width your-height]   :setup setup  :draw draw))`\n\nand then, as you said, invoke lein run.\n. ",
    "interstar": "@nbeloglazov I'm having trouble understanding how to use quil dynamically (in the sense you're describing above). Every time I change my sketch I do a lein run which recompiles everything ... which is pretty slow. \n\nIs there a way to just update the draw function in a running sketch and have it change immediately? Any documentation / tutorial of how to do this?\n. I'm using emacs ... though just from the REPL would be fine for my current\npurposes\n\nOn 4 September 2014 08:30, Nikita Beloglazov notifications@github.com\nwrote:\n\n> Hi Phil.\n> \n> It depends on what editor you're using. I'm not sure you can achieve\n> dynamic reloading with lein run. Have you tried LightTable? There is a\n> small tutorial\n> https://github.com/quil/quil/wiki/Dynamic-Workflow-%28for-LightTable%29\n> of how to start with Quil and LightTable.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/quil/quil/issues/52#issuecomment-54421975.\n. Hi @nbeloglazov \n\nI started looking into Overtone's emacs-live and following the instructions here : \n\nhttps://github.com/quil/quil/wiki/Dynamic-Workflow-(for-REPL)\n\nI can launch my sketch from the cider repl in Emacs, but every time I do a (use :reload 'demo.core) it opens a new Processing window. Is there a way to make it update the same window?\n. OK. Thanks ... yes it's working well, now :-)\n. OK. Many thanks. \n\n(BTW : sorry to post questions here on GitHub ... wasn't sure if there was a better forum for that. Cheers.)\n. @nbeloglazov I'm having trouble understanding how to use quil dynamically (in the sense you're describing above). Every time I change my sketch I do a lein run which recompiles everything ... which is pretty slow. \n\nIs there a way to just update the draw function in a running sketch and have it change immediately? Any documentation / tutorial of how to do this?\n. I'm using emacs ... though just from the REPL would be fine for my current\npurposes\n\nOn 4 September 2014 08:30, Nikita Beloglazov notifications@github.com\nwrote:\n\n> Hi Phil.\n> \n> It depends on what editor you're using. I'm not sure you can achieve\n> dynamic reloading with lein run. Have you tried LightTable? There is a\n> small tutorial\n> https://github.com/quil/quil/wiki/Dynamic-Workflow-%28for-LightTable%29\n> of how to start with Quil and LightTable.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/quil/quil/issues/52#issuecomment-54421975.\n. Hi @nbeloglazov \n\nI started looking into Overtone's emacs-live and following the instructions here : \n\nhttps://github.com/quil/quil/wiki/Dynamic-Workflow-(for-REPL)\n\nI can launch my sketch from the cider repl in Emacs, but every time I do a (use :reload 'demo.core) it opens a new Processing window. Is there a way to make it update the same window?\n. OK. Thanks ... yes it's working well, now :-)\n. OK. Many thanks. \n\n(BTW : sorry to post questions here on GitHub ... wasn't sure if there was a better forum for that. Cheers.)\n. ",
    "fmsbeekmans": "Looks useful!\n. Looks useful!\n. ",
    "bobbywilson0": "I'm not sure if there was a regression at some point, but using a very similar sketch as referenced above https://gist.github.com/bobbywilson0/780db19ef0f3b9c1d24c (only changing load-pixels to pixels since load-pixels has since been removed), I see the same incorrect results as initially indicated, a grey window (even with P2D/P3D rendering set. \n. Hey Nikita, \n\nThanks, you're right this worked perfect. For anyone that finds this here is the final working source: https://github.com/bobbywilson0/quil-nature-of-code-examples/blob/master/src/nature_of_code/introduction/14_noise_2d/core.clj\n\nAlso what should be noted is that I didn't need to specify the renderer as P2D/P3D, the default renderer works. I'm not sure that #56 is still a valid concern.\n. I'm not sure if there was a regression at some point, but using a very similar sketch as referenced above https://gist.github.com/bobbywilson0/780db19ef0f3b9c1d24c (only changing load-pixels to pixels since load-pixels has since been removed), I see the same incorrect results as initially indicated, a grey window (even with P2D/P3D rendering set. \n. Hey Nikita, \n\nThanks, you're right this worked perfect. For anyone that finds this here is the final working source: https://github.com/bobbywilson0/quil-nature-of-code-examples/blob/master/src/nature_of_code/introduction/14_noise_2d/core.clj\n\nAlso what should be noted is that I didn't need to specify the renderer as P2D/P3D, the default renderer works. I'm not sure that #56 is still a valid concern.\n. ",
    "kyleburton": "When I tried to run the examples (interactively) that used opengl I got errors about a class not being defined.\n. I was working on an Ubuntu instance inside VirtualBox on Windows 7.  I don't have that particular VM handy, it was probably Ubuntu 12, open JDK 1.7 and Leiningen 1.7.\n. When I tried to run the examples (interactively) that used opengl I got errors about a class not being defined.\n. I was working on an Ubuntu instance inside VirtualBox on Windows 7.  I don't have that particular VM handy, it was probably Ubuntu 12, open JDK 1.7 and Leiningen 1.7.\n. ",
    "ericevans0": "Is there going to be a new release soon? I've been trying to port something to quil and the no-loop bug is making it very difficult. Thanks.\n. Wow! That's interesting. Layers and layers. It doesn't seem appropriate to workaround a bug two layers down. The difference between java and clojure makes me a bit uncomfortable. I like their choice better, but considering how important Java interop is, it seems like they should have stayed consistent.\n\nWell, the workaround will be useful. Thanks for figuring it out and giving such a clear explanation. It seems this is not a problem with Quil as such, so I'm closing the issue.\n. Is there going to be a new release soon? I've been trying to port something to quil and the no-loop bug is making it very difficult. Thanks.\n. Wow! That's interesting. Layers and layers. It doesn't seem appropriate to workaround a bug two layers down. The difference between java and clojure makes me a bit uncomfortable. I like their choice better, but considering how important Java interop is, it seems like they should have stayed consistent.\n\nWell, the workaround will be useful. Thanks for figuring it out and giving such a clear explanation. It seems this is not a problem with Quil as such, so I'm closing the issue.\n. ",
    "si14": "No updates here?\n. No updates here?\n. ",
    "nardove": "For a follow up on this issue please follow me https://groups.google.com/forum/?fromgroups=#!topic/emacs-live/7H2RW8aaVok\n. For a follow up on this issue please follow me https://groups.google.com/forum/?fromgroups=#!topic/emacs-live/7H2RW8aaVok\n. ",
    "uvtc": "Works great! Thanks!\n. Works great! Thanks!\n. ",
    "floybix": "Can I suggest Quil use `unchecked-int` rather than `int` given that hex colours are part of the processing API?\n. Can I suggest Quil use `unchecked-int` rather than `int` given that hex colours are part of the processing API?\n. ",
    "bartosz-k": "yes, amazing, worked for the first time :)\n\n```\n(defsketch example                  ;;Define a new sketch named example\n  :title \"Oh so many grey circles\"  ;;Set the title of the sketch\n  :setup setup                      ;;Specify the setup fn\n  :draw (var draw)\n  :size [323 200])  \n```\n\nI only had to change line 5 to `:draw (var draw)`.\n\nAfter that, I can recompile `draw` and see result immediately.\n. I didn't try without `var` :)\n. yes, amazing, worked for the first time :)\n\n```\n(defsketch example                  ;;Define a new sketch named example\n  :title \"Oh so many grey circles\"  ;;Set the title of the sketch\n  :setup setup                      ;;Specify the setup fn\n  :draw (var draw)\n  :size [323 200])  \n```\n\nI only had to change line 5 to `:draw (var draw)`.\n\nAfter that, I can recompile `draw` and see result immediately.\n. I didn't try without `var` :)\n. ",
    "Janiczek": "Actually, already there was a bug. I've encountered this problem:\n\n``` clojure\n(let [color [100 255 255]] ; imagine [color (if ... [...] [...])] or something more complicated\n  (with-fill color\n    (rect 0 0 10 10)))\n```\n\nThe 'color won't expand into the [100 255 255] and so the ~@fill-args in the macro will fail.\n\nThe solution is to use apply. Instead of (fill ~@fill-args), which needs the vector at compile-time, let's do (apply fill ~fill-args), which will happilly accept a symbol. At least now it does. Macros are tricky :D\n. I'm working on it - but because I've since deleted my fork repo, I hope my commits will work and it won't do much of a mess. Will reply shortly.\n. OK, I'm at loss as to how \"clone\" my pull request or fork your repo again so that I have the rights to push new commits to this pull request. Any ideas?\n\n**EDIT:** I've ordered my functions according to my best judgement (`core.clj` isn't really ordered, yeah):\n- `current-fill` and `current-stroke` between `create-output` and `cursor-modes`\n- `with-fill` and `with-stroke` between `width` and `with-translation`\n\nIs there some work to be done on the documentation in meta? (I don't have much experience with that.)\n. Will create another pull request shortly.\n. Actually, already there was a bug. I've encountered this problem:\n\n``` clojure\n(let [color [100 255 255]] ; imagine [color (if ... [...] [...])] or something more complicated\n  (with-fill color\n    (rect 0 0 10 10)))\n```\n\nThe 'color won't expand into the [100 255 255] and so the ~@fill-args in the macro will fail.\n\nThe solution is to use apply. Instead of (fill ~@fill-args), which needs the vector at compile-time, let's do (apply fill ~fill-args), which will happilly accept a symbol. At least now it does. Macros are tricky :D\n. I'm working on it - but because I've since deleted my fork repo, I hope my commits will work and it won't do much of a mess. Will reply shortly.\n. OK, I'm at loss as to how \"clone\" my pull request or fork your repo again so that I have the rights to push new commits to this pull request. Any ideas?\n\n**EDIT:** I've ordered my functions according to my best judgement (`core.clj` isn't really ordered, yeah):\n- `current-fill` and `current-stroke` between `create-output` and `cursor-modes`\n- `with-fill` and `with-stroke` between `width` and `with-translation`\n\nIs there some work to be done on the documentation in meta? (I don't have much experience with that.)\n. Will create another pull request shortly.\n. ",
    "phiat": "Ah thanks for the reply - but I actually got it working! I will post a repo with an example in a bit.  I thought I had to use a 'newer' quil (but that one had a few other dependencies that didn't work on my machine - namely glue-rt )...  I'll post a link here.  Can't wait to do some clojure + video + 3d work! \n. I jumped the gun... Still too many errors.  How would I go about bringing in this  [video library](https://github.com/processing/processing/tree/master/java/libraries/video) to work with quil?  \n. Hi Nikita,\n  I haven't attempted looking at it in a few months, but would love to get this going!  I'll get back to you soon after I get refreshed with it.   \n\nPatrick\n\n> On Apr 9, 2014, at 5:11 PM, Nikita Beloglazov notifications@github.com wrote:\n> \n> Hi Patrick\n> Are you still up to this task? I can help you if you want.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n. Ah thanks for the reply - but I actually got it working! I will post a repo with an example in a bit.  I thought I had to use a 'newer' quil (but that one had a few other dependencies that didn't work on my machine - namely glue-rt )...  I'll post a link here.  Can't wait to do some clojure + video + 3d work! \n. I jumped the gun... Still too many errors.  How would I go about bringing in this  [video library](https://github.com/processing/processing/tree/master/java/libraries/video) to work with quil?  \n. Hi Nikita,\n  I haven't attempted looking at it in a few months, but would love to get this going!  I'll get back to you soon after I get refreshed with it.   \n\nPatrick\n\n> On Apr 9, 2014, at 5:11 PM, Nikita Beloglazov notifications@github.com wrote:\n> \n> Hi Patrick\n> Are you still up to this task? I can help you if you want.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n. ",
    "jackrusher": "I've just started looking at this same problem. Any progress since April?\n. Thanks for the speedy fix. :)\n. I've just started looking at this same problem. Any progress since April?\n. Thanks for the speedy fix. :)\n. ",
    "ahdinosaur": "i'm interested in using processing.video within quil, what can i do to help push this along?\n. i'm interested in using processing.video within quil, what can i do to help push this along?\n. ",
    "minikomi": "There's a much easier way to do this for people who want to get started without having to patch quil:\n- Download processing, and move Processing.app/Contents/Java/modes/java/libraries/video/library/ into your project.\n- Add the following resource paths into your project.clj:\n\n``` clj\n  :resource-paths [\n                   \"library/jna.jar\"\n                   \"library/video.jar\"\n                   \"library/gstreamer-java.jar\"\n                   \"library/gstreamer/macosx64\"\n                   ]\n\n```\n- You can now use code like the following:\n\n``` clj\n(ns videotest.core\n  (:require [quil.core :as q]\n            [quil.middleware :as m]\n            )\n  (:import [processing.video Movie]))\n\n(defn setup []\n  (let [mov (Movie. (quil.applet/current-applet) \"resources/720.mp4\")]\n    (.play mov)\n    (.loop mov)\n    {:movie mov\n     :current-frame 0}))\n\n(defn update-state [state]\n  (when (and (not (nil? (:movie state)))\n                (.available (:movie state)))\n    (.read (:movie state)))\n  state)\n\n(defn draw-state [state]\n  (q/background 240)\n  (q/image (:movie state) 0 0))\n\n(q/defsketch videotest\n  :size [1280 720]\n  :setup setup\n  :update update-state\n  :draw draw-state\n  :features [:keep-on-top]\n  :middleware [m/fun-mode])\n```\n\nNote the use of `(.available (:movie state))`  to see if it's safe to read a new frame.\n. The easiest way I found was to download processing, start a new sketch, select add library from the sketch menu and then do a search for video. The one you want is the gstreamer libary called \"video\". Now, in your Documents folder should be a Processing/libraries folder with the video plugin there.\n. There's a much easier way to do this for people who want to get started without having to patch quil:\n- Download processing, and move Processing.app/Contents/Java/modes/java/libraries/video/library/ into your project.\n- Add the following resource paths into your project.clj:\n\n``` clj\n  :resource-paths [\n                   \"library/jna.jar\"\n                   \"library/video.jar\"\n                   \"library/gstreamer-java.jar\"\n                   \"library/gstreamer/macosx64\"\n                   ]\n\n```\n- You can now use code like the following:\n\n``` clj\n(ns videotest.core\n  (:require [quil.core :as q]\n            [quil.middleware :as m]\n            )\n  (:import [processing.video Movie]))\n\n(defn setup []\n  (let [mov (Movie. (quil.applet/current-applet) \"resources/720.mp4\")]\n    (.play mov)\n    (.loop mov)\n    {:movie mov\n     :current-frame 0}))\n\n(defn update-state [state]\n  (when (and (not (nil? (:movie state)))\n                (.available (:movie state)))\n    (.read (:movie state)))\n  state)\n\n(defn draw-state [state]\n  (q/background 240)\n  (q/image (:movie state) 0 0))\n\n(q/defsketch videotest\n  :size [1280 720]\n  :setup setup\n  :update update-state\n  :draw draw-state\n  :features [:keep-on-top]\n  :middleware [m/fun-mode])\n```\n\nNote the use of `(.available (:movie state))`  to see if it's safe to read a new frame.\n. The easiest way I found was to download processing, start a new sketch, select add library from the sketch menu and then do a search for video. The one you want is the gstreamer libary called \"video\". Now, in your Documents folder should be a Processing/libraries folder with the video plugin there.\n. ",
    "Norgat": "Little trick.\n\n``` Clojure\n:resource-paths [\n                   \"library/jna.jar\"\n                   \"library/video.jar\"\n                   \"library/gstreamer-java.jar\"\n                   \"library/gstreamer/macosx64\"\n                   ]\n```\n\nYou can use this plugin for adding (and more other things) jars to local maven repo: https://github.com/kumarshantanu/lein-localrepo\n. It's equivalent. To understand the difference look at the documentation:\nhttp://clojuredocs.org/clojure_core/clojure.core/use\nhttp://clojuredocs.org/clojure_core/clojure.core/require\n\nPersonally, I prefer to do (:require [some.lib :as slib]) if I want to use a lot of symbols from some.lib.\n\nAnd I prefer to do (:use [some.lib :only [a b c]) if I want to use only a few symbols from some.lib without slib prefix.\n\nThis will help to avoid conflicts caused by the same name functions.\n. `:on-close` - it is event. Not property I mean. What user must to do if he want to open sketch, show it and do then something (like show one more sketch)?\n\nI think we have one event `:on-close` and one property of this event - flag about what user want to do after sketch is closed: exit from app or do something or he want to doing somethink and close app?\n\nI think about code like that \n\n`:on-close [:exit on-close-fn]`\n\nor\n\n`:on-close [:no-exit on-close-fn]`\n\nbut it looks bad.\n\nFor example:\n\n``` clojure\n(defapplet hello\n    ...\n    :on-close do-some-next-task\n    :exit-on-close false\n)\n```\n\nHow to do it without :exit-on-close option and :on-close event?\n\nIn the end, my decision does not break compatibility with old code and adds the ability to control the behavior.\n. Fix previous code and commits.\n. No, this code draws a square of circles.\nBut shader repaint it black. So if we see two squares - the shader does not work.\nIf you see one shifted square on a black background - the shader works.\n\nThis visual inspection that the shader is doing something.\n. Oh, yes. I misprinted.\n\nI think this issue can be closed. Since creating wrappers for PDF is not too important now.\n. Wrapper added.\n. Check new commit. It fixed code and docs.\n. Check new fixes.\n. Check current version (commits with fixes :opts rebased in one commit).\nFix large code.\n. Fixed\n. I have same exceptions but I can run new sketch.\n\nLooks like OpenGL problem in Processing. I think it need to be trying reproduced on Processing or Java. Because the problem may not be in Quil.\n. Fixed\n. Hm, I can't reproduce this on my computer.\nIt your first usage of Quil? \n\nTry remove Quil from your local maven repository (m.b. it corrupted) and call `lein clean` for your project.\n\nMy repl output with your deps:\n\n``` Clojure\nPS D:\\gsoc\\tmp\\zoo> lein repl\n(Retrieving org/clojure/math.numeric-tower/0.0.4/math.numeric-tower-0.0.4.pom from central)\n(Retrieving clojure-lanterna/clojure-lanterna/0.9.4/clojure-lanterna-0.9.4.pom from clojars)\n(Retrieving com/googlecode/lanterna/lanterna/2.1.5/lanterna-2.1.5.pom from central)\n(Retrieving org/clojure/math.numeric-tower/0.0.4/math.numeric-tower-0.0.4.jar from central)\n(Retrieving com/googlecode/lanterna/lanterna/2.1.5/lanterna-2.1.5.jar from central)\n(Retrieving clojure-lanterna/clojure-lanterna/0.9.4/clojure-lanterna-0.9.4.jar from clojars)\nnREPL server started on port 49432 on host 127.0.0.1 - nrepl://127.0.0.1:49432\nREPL-y 0.3.1\nClojure 1.6.0\n    Docs: (doc function-name-here)\n          (find-doc \"part-of-name-here\")\n  Source: (source function-name-here)\n Javadoc: (javadoc java-object-or-class-here)\n    Exit: Control+D or (exit) or (quit)\n Results: Stored in vars *1, *2, *3, an exception in *e\n\nuser=> (use 'quil.core)\nnil\nuser=> quil.core/sketch\n#<core$sketch quil.core$sketch@50f1f567>\nuser=>\n```\n. Where to? To wiki or or to pull request description?\n. Added\n. Just call `lein with-profile test-1.6.0 ring server`.\n\nI use hooks for automatic recompilation tests before run.\n. > We don't need to expose packing/unpacking to the user.\n\nBut we must if we want to save the clj Quil behevior. Because in JS color stored in  4 integers variables in `imageData` buffer. Look at this code (https://github.com/processing-js/processing-js/blob/master/processing.js#L19136):\n\n``` JavaScript\n      setPixel: function(i,c) {\n        var offset = i*4, data = p.imageData.data;\n        data[offset+0] = (c & 0x00ff0000) >>> 16; // RED_MASK\n        data[offset+1] = (c & 0x0000ff00) >>> 8;  // GREEN_MASK\n        data[offset+2] = (c & 0x000000ff);        // BLUE_MASK\n        data[offset+3] = (c & 0xff000000) >>> 24; // ALPHA_MASK\n      },\n```\n\nAnd this apporach used in all `set` and `setPixel` functions in Processing.js. If user want to working directly with `imageData` buffer then they must pack\\unpack values.\n\nThis is different with Processing. Processing use one `int` variable per pixel. You can see it (for example) this: https://github.com/processing/processing/blob/master/core/src/processing/core/PGraphicsJava2D.java#L2607\n. Use [`quil.core/background`](https://github.com/quil/quil/blob/master/src/cljx/quil/core.cljx#L548) for redraw previous drawing.\n. I marked it has don't worked (I checked it before we merged tests for ClojureScript). Look at the cards in Trello.\n\nBut today I retesting it and all works well. May be I missed something or I fixed problem in previous commits.\n. Look at this code: https://github.com/quil/quil/blob/master/test/cljs/snippets/manual.cljs\n\nYou can start/stop sketch in the browser with `quil.core/start-loop` and `quil-core/no-loop`. For calling quil functions outside the sketch you must wrap it to `with-sketch` macro:\n\n```\n(q/with-sketch (q/get-sketch-by-id id)\n    *call drawing functions*)\n```\n\nwhere `id` is id of sketch canvas element. \n\nSo, you can run sketch once and stop it when animation is ended or when extern timer call `quil.core/no-loop` for sketch.\n\nAbout reloading canvas and sketch.\n\nIf you don't replace sketch on canvas you can use `no-loop` and `start` functions for it. With external function for state updating of course.\n\nSo, If you whant to replace sketch on Canvas I recommended using only `:P2D` or only `:P3D` on one canvas. In this case you must call `quil.core/exit` in old sketch and bind a new sketch to canvas.\n\nM.b. useful: \nhttps://github.com/quil/quil/wiki/List-of-available-functions-in-ClojureScript\nhttps://github.com/quil/quil/wiki/ClojureScript#with-sketch-macro\n. Fixed\n. Updated\n. Hi!\n\nLooks like you have problems with drivers. I got some crashes like this when launching sketches inside VMWare in Mac OS X.\n\nDo you can run any JOGL app (https://en.wikipedia.org/wiki/Java_OpenGL)? \nProcessing used it as OpenGL backend and we must check that you haven't problem with it.\n\n> if run from cider, that takes nrepl down too. I have a laptop with optimus, and ran into the error using both bumblebee and nouveau/PRIME.\n\nOpenGL works fine with it?\n\nP.S. \n\nI haven't PC with nvidia card now (on my PC I have AMD and Intel). Therefore, I can't reproduce your environment for testing. M.b. @nbeloglazov have?\n. Looks strange. Because your code works fine for me (I see white ellipse oh black background).\nI have Windows 8.1 and JDK 1.8.0.\n\nSo, which OS and JDK are you used?\n. > I am just assuming there is some meaningful difference between them.\n\nIt does not matter (as far as I understand Processing.js code). Because if you check https://github.com/processing-js/processing-js/blob/master/src/Processing.js (be careful! a lot of code!) for `Drawing3D.prototype.size` you can't find something different than\n\n```\nfunction getGLContext(canvas) {\n          var ctxNames = ['experimental-webgl', 'webgl', 'webkit-3d'],\n              gl;\n\n          for (var i=0, l=ctxNames.length; i<l; i++) {\n            gl = canvas.getContext(ctxNames[i], {antialias: false, preserveDrawingBuffer: true});\n            if (gl) {\n              break;\n            }\n          }\n\n          return gl;\n        }\n```\n\nfor initializing context of canvas element for 3D drawing mode. Therefore is no difference between `p3d` and `opengl` modes for Processing.js.\n\nI think this is just the inheritance from Java version of Processing.\n. Quil using `Processing.PApplet` class for running sketches on desktop (because `Processing.PApplet` contains some hacks for GUI problems for OS X and we don't want to maintain those hacks).\n\nQuil code for running applet: \n\nhttps://github.com/Norgat/quil/blob/master/src/clj/quil/applet.clj#L439\nhttps://github.com/Norgat/quil/blob/master/src/clj/quil/applet.clj#L77\n\n`Processing.PApplet.runSketch` :\n\nhttps://github.com/processing/processing/blob/7f63dad6f21db722fe98d7a1f2afaa3de6c17b4c/core/src/processing/core/PApplet.java#L9380\n\nSo, `quil.Applet` inherited from `processing.core.PApplet` and call `runSketch` method.\n\nI guess that you can explore what needed to adding support of dock icons and propose patch for it.\n. We need know current-applet because it contains html canvas contex (we can't draw without it).\nAll quil math functions inherite this behaviour from Processing.js\n\nDo you try use https://github.com/quil/quil/blob/master/src/cljs/quil/sketch.clj#L3 ?\nI add it for calling code in sketch context.\n. @GoToLoop I think that this is the answer for your question: https://github.com/quil/quil/blob/master/project.clj#L18\n. Please post draw function source code.\n. \u0421all `defsketch` inside `main` function. I think it should work.\n. Like this: https://github.com/processing-js/processing-js/issues/105 ?. Quil-cljs is a wrapper around processing.js. I recommend check processing.js issue list for potential sources of this problem.. @nbeloglazov yes we can. But on every release of Processing.js we must check ```_mousePressed``` behaviour (because it's not a part of Processing API).\r\n\r\nMay be we can use your code as a manual test with simple changes:\r\n```Clojure\r\n(ns my.core\r\n  (:require [quil.core :as q :include-macros true]\r\n            [quil.middleware :as m]))\r\n\r\n(defn setup []\r\n  (q/frame-rate 30)\r\n  (q/color-mode :hsb)\r\n  {:color 0\r\n   :angle 0})\r\n\r\n(defn update-by-mouse [state]\r\n  (let [{:keys [color angle]} state]\r\n    {:color (mod (+ color 11.7) 255)\r\n     :angle (mod (+ angle 1.1) q/TWO-PI)}))\r\n\r\n(defn draw-state [state]\r\n  (q/background 240)\r\n  (q/fill (:color state) 255 255)\r\n  (let [angle (:angle state)\r\n        x (* 150 (q/cos angle))\r\n        y (* 150 (q/sin angle))]\r\n    (q/with-translation [(/ (q/width) 2)\r\n                         (/ (q/height) 2)]\r\n      (q/ellipse x y 100 100))))\r\n\r\n(q/defsketch my\r\n  :host \"host\"\r\n  :size [500 500]\r\n  :setup setup\r\n  :draw draw-state\r\n  :mouse-pressed update-by-mouse\r\n  :middleware [m/fun-mode])\r\n```. @nbeloglazov huh, interesting. I thinking that ```mousePressed``` Processing event is what we need to call. I have miss that Processing.js have ```mousePressed``` event and ```mousePressed``` variable in Processing language **(!)**. So you're right - my code checks is not what we need.\r\n\r\nBut now I look at the Processing.js code and find one more potential bug in Quil cljs.\r\nThe list of Processing.js internal variables: https://github.com/processing-js/processing-js/blob/master/processing.js#L9796\r\n\r\n1. ```__mousePressed``` (this discussion)\r\n2. ```__keyPressed``` (missed now is Quil cljs)\r\n3. ```__frameRate``` (currently used: https://github.com/quil/quil/blob/master/src/cljc/quil/core.cljc#L1871)\r\n\r\n\r\nSo, I think we need to change:\r\n\r\n1. https://github.com/quil/quil/blob/master/src/cljc/quil/core.cljc#L2610\r\n2. https://github.com/quil/quil/blob/master/src/cljc/quil/core.cljc#L2220\r\n\r\nfor cljs code like ```current-frame-rate```.. @nbeloglazov \r\n\r\n> We can update our \"automated\" tests to verify that mouse-pressed? returns boolean. If it doesn't the test throws an error.\r\n\r\nHm, for Java version you write manual tests for events as I remember. What checks this test approach?. I create pull request for this bug: https://github.com/quil/quil/pull/198. Changed.\r\n\r\nGithub change request looks strange. Where is button ```Changed``` for pull request creator for marking change request as changed?. @nbeloglazov I await your decision. Do you accept or not its current changes?\r\nI expressed my opinion in my code. I prefer ```preload-font``` way.\r\n\r\nIf you have different opinion - write it. I described all available data and possible ways to resolve this problem.. Ok, I realize this approach the weekend.\n\n2017-03-02 10:12 GMT+04:00 Nikita Beloglazov <notifications@github.com>:\n\n> Having single create-font is less confusing than both create-font and\n> preload-font. It's not clear how \"creating\" is different from\n> \"preloading\". It's better to hide low-level implementation details from\n> users, especially given that quil is fairly high-level library.\n>\n> I can't think of any performance issues if create-font is called inside\n> :draw: only the first call loads the font while all the rest do nothing.\n> If user still wants to optimize it - they can move create-font call to\n> :setup.\n>\n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/quil/quil/pull/203#issuecomment-283566187>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/ABbMN52v7ZCIWxufZud8AxG0X6TZjtLWks5rhl3WgaJpZM4MHavg>\n> .\n>\n\n\n\n-- \nKarandashov M.V. (Norgat)\n. Little trick.\n\n``` Clojure\n:resource-paths [\n                   \"library/jna.jar\"\n                   \"library/video.jar\"\n                   \"library/gstreamer-java.jar\"\n                   \"library/gstreamer/macosx64\"\n                   ]\n```\n\nYou can use this plugin for adding (and more other things) jars to local maven repo: https://github.com/kumarshantanu/lein-localrepo\n. It's equivalent. To understand the difference look at the documentation:\nhttp://clojuredocs.org/clojure_core/clojure.core/use\nhttp://clojuredocs.org/clojure_core/clojure.core/require\n\nPersonally, I prefer to do (:require [some.lib :as slib]) if I want to use a lot of symbols from some.lib.\n\nAnd I prefer to do (:use [some.lib :only [a b c]) if I want to use only a few symbols from some.lib without slib prefix.\n\nThis will help to avoid conflicts caused by the same name functions.\n. `:on-close` - it is event. Not property I mean. What user must to do if he want to open sketch, show it and do then something (like show one more sketch)?\n\nI think we have one event `:on-close` and one property of this event - flag about what user want to do after sketch is closed: exit from app or do something or he want to doing somethink and close app?\n\nI think about code like that \n\n`:on-close [:exit on-close-fn]`\n\nor\n\n`:on-close [:no-exit on-close-fn]`\n\nbut it looks bad.\n\nFor example:\n\n``` clojure\n(defapplet hello\n    ...\n    :on-close do-some-next-task\n    :exit-on-close false\n)\n```\n\nHow to do it without :exit-on-close option and :on-close event?\n\nIn the end, my decision does not break compatibility with old code and adds the ability to control the behavior.\n. Fix previous code and commits.\n. No, this code draws a square of circles.\nBut shader repaint it black. So if we see two squares - the shader does not work.\nIf you see one shifted square on a black background - the shader works.\n\nThis visual inspection that the shader is doing something.\n. Oh, yes. I misprinted.\n\nI think this issue can be closed. Since creating wrappers for PDF is not too important now.\n. Wrapper added.\n. Check new commit. It fixed code and docs.\n. Check new fixes.\n. Check current version (commits with fixes :opts rebased in one commit).\nFix large code.\n. Fixed\n. I have same exceptions but I can run new sketch.\n\nLooks like OpenGL problem in Processing. I think it need to be trying reproduced on Processing or Java. Because the problem may not be in Quil.\n. Fixed\n. Hm, I can't reproduce this on my computer.\nIt your first usage of Quil? \n\nTry remove Quil from your local maven repository (m.b. it corrupted) and call `lein clean` for your project.\n\nMy repl output with your deps:\n\n``` Clojure\nPS D:\\gsoc\\tmp\\zoo> lein repl\n(Retrieving org/clojure/math.numeric-tower/0.0.4/math.numeric-tower-0.0.4.pom from central)\n(Retrieving clojure-lanterna/clojure-lanterna/0.9.4/clojure-lanterna-0.9.4.pom from clojars)\n(Retrieving com/googlecode/lanterna/lanterna/2.1.5/lanterna-2.1.5.pom from central)\n(Retrieving org/clojure/math.numeric-tower/0.0.4/math.numeric-tower-0.0.4.jar from central)\n(Retrieving com/googlecode/lanterna/lanterna/2.1.5/lanterna-2.1.5.jar from central)\n(Retrieving clojure-lanterna/clojure-lanterna/0.9.4/clojure-lanterna-0.9.4.jar from clojars)\nnREPL server started on port 49432 on host 127.0.0.1 - nrepl://127.0.0.1:49432\nREPL-y 0.3.1\nClojure 1.6.0\n    Docs: (doc function-name-here)\n          (find-doc \"part-of-name-here\")\n  Source: (source function-name-here)\n Javadoc: (javadoc java-object-or-class-here)\n    Exit: Control+D or (exit) or (quit)\n Results: Stored in vars *1, *2, *3, an exception in *e\n\nuser=> (use 'quil.core)\nnil\nuser=> quil.core/sketch\n#<core$sketch quil.core$sketch@50f1f567>\nuser=>\n```\n. Where to? To wiki or or to pull request description?\n. Added\n. Just call `lein with-profile test-1.6.0 ring server`.\n\nI use hooks for automatic recompilation tests before run.\n. > We don't need to expose packing/unpacking to the user.\n\nBut we must if we want to save the clj Quil behevior. Because in JS color stored in  4 integers variables in `imageData` buffer. Look at this code (https://github.com/processing-js/processing-js/blob/master/processing.js#L19136):\n\n``` JavaScript\n      setPixel: function(i,c) {\n        var offset = i*4, data = p.imageData.data;\n        data[offset+0] = (c & 0x00ff0000) >>> 16; // RED_MASK\n        data[offset+1] = (c & 0x0000ff00) >>> 8;  // GREEN_MASK\n        data[offset+2] = (c & 0x000000ff);        // BLUE_MASK\n        data[offset+3] = (c & 0xff000000) >>> 24; // ALPHA_MASK\n      },\n```\n\nAnd this apporach used in all `set` and `setPixel` functions in Processing.js. If user want to working directly with `imageData` buffer then they must pack\\unpack values.\n\nThis is different with Processing. Processing use one `int` variable per pixel. You can see it (for example) this: https://github.com/processing/processing/blob/master/core/src/processing/core/PGraphicsJava2D.java#L2607\n. Use [`quil.core/background`](https://github.com/quil/quil/blob/master/src/cljx/quil/core.cljx#L548) for redraw previous drawing.\n. I marked it has don't worked (I checked it before we merged tests for ClojureScript). Look at the cards in Trello.\n\nBut today I retesting it and all works well. May be I missed something or I fixed problem in previous commits.\n. Look at this code: https://github.com/quil/quil/blob/master/test/cljs/snippets/manual.cljs\n\nYou can start/stop sketch in the browser with `quil.core/start-loop` and `quil-core/no-loop`. For calling quil functions outside the sketch you must wrap it to `with-sketch` macro:\n\n```\n(q/with-sketch (q/get-sketch-by-id id)\n    *call drawing functions*)\n```\n\nwhere `id` is id of sketch canvas element. \n\nSo, you can run sketch once and stop it when animation is ended or when extern timer call `quil.core/no-loop` for sketch.\n\nAbout reloading canvas and sketch.\n\nIf you don't replace sketch on canvas you can use `no-loop` and `start` functions for it. With external function for state updating of course.\n\nSo, If you whant to replace sketch on Canvas I recommended using only `:P2D` or only `:P3D` on one canvas. In this case you must call `quil.core/exit` in old sketch and bind a new sketch to canvas.\n\nM.b. useful: \nhttps://github.com/quil/quil/wiki/List-of-available-functions-in-ClojureScript\nhttps://github.com/quil/quil/wiki/ClojureScript#with-sketch-macro\n. Fixed\n. Updated\n. Hi!\n\nLooks like you have problems with drivers. I got some crashes like this when launching sketches inside VMWare in Mac OS X.\n\nDo you can run any JOGL app (https://en.wikipedia.org/wiki/Java_OpenGL)? \nProcessing used it as OpenGL backend and we must check that you haven't problem with it.\n\n> if run from cider, that takes nrepl down too. I have a laptop with optimus, and ran into the error using both bumblebee and nouveau/PRIME.\n\nOpenGL works fine with it?\n\nP.S. \n\nI haven't PC with nvidia card now (on my PC I have AMD and Intel). Therefore, I can't reproduce your environment for testing. M.b. @nbeloglazov have?\n. Looks strange. Because your code works fine for me (I see white ellipse oh black background).\nI have Windows 8.1 and JDK 1.8.0.\n\nSo, which OS and JDK are you used?\n. > I am just assuming there is some meaningful difference between them.\n\nIt does not matter (as far as I understand Processing.js code). Because if you check https://github.com/processing-js/processing-js/blob/master/src/Processing.js (be careful! a lot of code!) for `Drawing3D.prototype.size` you can't find something different than\n\n```\nfunction getGLContext(canvas) {\n          var ctxNames = ['experimental-webgl', 'webgl', 'webkit-3d'],\n              gl;\n\n          for (var i=0, l=ctxNames.length; i<l; i++) {\n            gl = canvas.getContext(ctxNames[i], {antialias: false, preserveDrawingBuffer: true});\n            if (gl) {\n              break;\n            }\n          }\n\n          return gl;\n        }\n```\n\nfor initializing context of canvas element for 3D drawing mode. Therefore is no difference between `p3d` and `opengl` modes for Processing.js.\n\nI think this is just the inheritance from Java version of Processing.\n. Quil using `Processing.PApplet` class for running sketches on desktop (because `Processing.PApplet` contains some hacks for GUI problems for OS X and we don't want to maintain those hacks).\n\nQuil code for running applet: \n\nhttps://github.com/Norgat/quil/blob/master/src/clj/quil/applet.clj#L439\nhttps://github.com/Norgat/quil/blob/master/src/clj/quil/applet.clj#L77\n\n`Processing.PApplet.runSketch` :\n\nhttps://github.com/processing/processing/blob/7f63dad6f21db722fe98d7a1f2afaa3de6c17b4c/core/src/processing/core/PApplet.java#L9380\n\nSo, `quil.Applet` inherited from `processing.core.PApplet` and call `runSketch` method.\n\nI guess that you can explore what needed to adding support of dock icons and propose patch for it.\n. We need know current-applet because it contains html canvas contex (we can't draw without it).\nAll quil math functions inherite this behaviour from Processing.js\n\nDo you try use https://github.com/quil/quil/blob/master/src/cljs/quil/sketch.clj#L3 ?\nI add it for calling code in sketch context.\n. @GoToLoop I think that this is the answer for your question: https://github.com/quil/quil/blob/master/project.clj#L18\n. Please post draw function source code.\n. \u0421all `defsketch` inside `main` function. I think it should work.\n. Like this: https://github.com/processing-js/processing-js/issues/105 ?. Quil-cljs is a wrapper around processing.js. I recommend check processing.js issue list for potential sources of this problem.. @nbeloglazov yes we can. But on every release of Processing.js we must check ```_mousePressed``` behaviour (because it's not a part of Processing API).\r\n\r\nMay be we can use your code as a manual test with simple changes:\r\n```Clojure\r\n(ns my.core\r\n  (:require [quil.core :as q :include-macros true]\r\n            [quil.middleware :as m]))\r\n\r\n(defn setup []\r\n  (q/frame-rate 30)\r\n  (q/color-mode :hsb)\r\n  {:color 0\r\n   :angle 0})\r\n\r\n(defn update-by-mouse [state]\r\n  (let [{:keys [color angle]} state]\r\n    {:color (mod (+ color 11.7) 255)\r\n     :angle (mod (+ angle 1.1) q/TWO-PI)}))\r\n\r\n(defn draw-state [state]\r\n  (q/background 240)\r\n  (q/fill (:color state) 255 255)\r\n  (let [angle (:angle state)\r\n        x (* 150 (q/cos angle))\r\n        y (* 150 (q/sin angle))]\r\n    (q/with-translation [(/ (q/width) 2)\r\n                         (/ (q/height) 2)]\r\n      (q/ellipse x y 100 100))))\r\n\r\n(q/defsketch my\r\n  :host \"host\"\r\n  :size [500 500]\r\n  :setup setup\r\n  :draw draw-state\r\n  :mouse-pressed update-by-mouse\r\n  :middleware [m/fun-mode])\r\n```. @nbeloglazov huh, interesting. I thinking that ```mousePressed``` Processing event is what we need to call. I have miss that Processing.js have ```mousePressed``` event and ```mousePressed``` variable in Processing language **(!)**. So you're right - my code checks is not what we need.\r\n\r\nBut now I look at the Processing.js code and find one more potential bug in Quil cljs.\r\nThe list of Processing.js internal variables: https://github.com/processing-js/processing-js/blob/master/processing.js#L9796\r\n\r\n1. ```__mousePressed``` (this discussion)\r\n2. ```__keyPressed``` (missed now is Quil cljs)\r\n3. ```__frameRate``` (currently used: https://github.com/quil/quil/blob/master/src/cljc/quil/core.cljc#L1871)\r\n\r\n\r\nSo, I think we need to change:\r\n\r\n1. https://github.com/quil/quil/blob/master/src/cljc/quil/core.cljc#L2610\r\n2. https://github.com/quil/quil/blob/master/src/cljc/quil/core.cljc#L2220\r\n\r\nfor cljs code like ```current-frame-rate```.. @nbeloglazov \r\n\r\n> We can update our \"automated\" tests to verify that mouse-pressed? returns boolean. If it doesn't the test throws an error.\r\n\r\nHm, for Java version you write manual tests for events as I remember. What checks this test approach?. I create pull request for this bug: https://github.com/quil/quil/pull/198. Changed.\r\n\r\nGithub change request looks strange. Where is button ```Changed``` for pull request creator for marking change request as changed?. @nbeloglazov I await your decision. Do you accept or not its current changes?\r\nI expressed my opinion in my code. I prefer ```preload-font``` way.\r\n\r\nIf you have different opinion - write it. I described all available data and possible ways to resolve this problem.. Ok, I realize this approach the weekend.\n\n2017-03-02 10:12 GMT+04:00 Nikita Beloglazov <notifications@github.com>:\n\n> Having single create-font is less confusing than both create-font and\n> preload-font. It's not clear how \"creating\" is different from\n> \"preloading\". It's better to hide low-level implementation details from\n> users, especially given that quil is fairly high-level library.\n>\n> I can't think of any performance issues if create-font is called inside\n> :draw: only the first call loads the font while all the rest do nothing.\n> If user still wants to optimize it - they can move create-font call to\n> :setup.\n>\n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/quil/quil/pull/203#issuecomment-283566187>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/ABbMN52v7ZCIWxufZud8AxG0X6TZjtLWks5rhl3WgaJpZM4MHavg>\n> .\n>\n\n\n\n-- \nKarandashov M.V. (Norgat)\n. ",
    "bmaddy": "I'm also trying to get this to work.\nThose `.jar` files from @minikomi's comment seem to not exist in `Processing.app/Contents/Java/modes/java/libraries/video/library/` anymore. Does anyone know where I could find them? I installed the Video library in the Processing.app gui and thought that would make them appear.\n. I'm also trying to get this to work.\nThose `.jar` files from @minikomi's comment seem to not exist in `Processing.app/Contents/Java/modes/java/libraries/video/library/` anymore. Does anyone know where I could find them? I installed the Video library in the Processing.app gui and thought that would make them appear.\n. ",
    "hamoid": "@bmaddy In Processing, go to Preferences and note your sketchbook folder. I think you should find the files you are looking for inside `[sketchbook folder]/libraries/video/library`\n. Great! :)\n. I believe such eval-to-paint technique is powerful for teaching. You eval a call to `line`, and you see a line. It was one of the first things I asked when I started with Quil: https://twitter.com/hamoid/status/697431375230713860\n. @bmaddy In Processing, go to Preferences and note your sketchbook folder. I think you should find the files you are looking for inside `[sketchbook folder]/libraries/video/library`\n. Great! :)\n. I believe such eval-to-paint technique is powerful for teaching. You eval a call to `line`, and you see a line. It was one of the first things I asked when I started with Quil: https://twitter.com/hamoid/status/697431375230713860\n. ",
    "tripaces": "Pulling together several elements from this thread and others, I put together a sketch using a webcam and Raspberry Pi 2 using the newer Processing video libraries (as pointed out by @hamoid).\n\nThat sketch, which is inspired by one of the Processing Video Capture examples is at https://github.com/LifeInLights/twyla-opus/blob/master/spectacles/src/spectacles/mirror_camera.clj and is quite reliable.\n\nThe associated project (https://github.com/LifeInLights/twyla-opus/blob/master/spectacles/project.clj) indicates how to reference the necessary jars. Since the time of writing, it is possible that those libraries may have been made available in a public repo, but at the time they had to be directly embedded for reliable availability (https://github.com/LifeInLights/twyla-opus/tree/master/spectacles/resources/processing-video).\n. Pulling together several elements from this thread and others, I put together a sketch using a webcam and Raspberry Pi 2 using the newer Processing video libraries (as pointed out by @hamoid).\n\nThat sketch, which is inspired by one of the Processing Video Capture examples is at https://github.com/LifeInLights/twyla-opus/blob/master/spectacles/src/spectacles/mirror_camera.clj and is quite reliable.\n\nThe associated project (https://github.com/LifeInLights/twyla-opus/blob/master/spectacles/project.clj) indicates how to reference the necessary jars. Since the time of writing, it is possible that those libraries may have been made available in a public repo, but at the time they had to be directly embedded for reliable availability (https://github.com/LifeInLights/twyla-opus/tree/master/spectacles/resources/processing-video).\n. ",
    "daveliepmann": "This appears to be a version issue. I attempted to revise the definition of (arc) myself:\n\n``` clojure\n\n(def ^{:private true}\n  arc-modes {:open PConstants/OPEN\n             :chord PConstants/CHORD\n             :pie PConstants/PIE})\n\n(defn\n  ^{:requires-bindings true\n    :processing-name \"arc()\"\n    :category \"Shape\"\n    :subcategory \"2D Primitives\"\n    :added \"1.0\"}\n  arc\n  \"Draws an arc in the display window. Arcs are drawn along the outer\n  edge of an ellipse defined by the x, y, width and height\n  parameters. The origin of the arc's ellipse may be changed with the\n  ellipseMode() function. The start and stop parameters specify the\n  angles at which to draw the arc.\"\n  ([x y width height start stop]\n  (.arc (current-applet) (float x) (float y) (float width) (float height)\n        (float start) (float stop)))\n  ([x y width height start stop mode]\n     (let [arc-mode (resolve-constant-key mode arc-modes)])\n  (.arc (current-applet) (float x) (float y) (float width) (float height)\n        (float start) (float stop) (int arc-mode))))\n```\n\n...but `arc-modes` fails on CHORD and PIE:\n\n> CompilerException java.lang.RuntimeException: Unable to find static field: CHORD in interface processing.core.PConstants, compiling:(NO_SOURCE_PATH:1) \n\nIt appears that [CHORD and PIE were added in version 2.0b7](https://github.com/processing/processing/issues/1577) and would therefore not be available in Processing v1.5.1, which Quil currently uses. \n. This appears to be a version issue. I attempted to revise the definition of (arc) myself:\n\n``` clojure\n\n(def ^{:private true}\n  arc-modes {:open PConstants/OPEN\n             :chord PConstants/CHORD\n             :pie PConstants/PIE})\n\n(defn\n  ^{:requires-bindings true\n    :processing-name \"arc()\"\n    :category \"Shape\"\n    :subcategory \"2D Primitives\"\n    :added \"1.0\"}\n  arc\n  \"Draws an arc in the display window. Arcs are drawn along the outer\n  edge of an ellipse defined by the x, y, width and height\n  parameters. The origin of the arc's ellipse may be changed with the\n  ellipseMode() function. The start and stop parameters specify the\n  angles at which to draw the arc.\"\n  ([x y width height start stop]\n  (.arc (current-applet) (float x) (float y) (float width) (float height)\n        (float start) (float stop)))\n  ([x y width height start stop mode]\n     (let [arc-mode (resolve-constant-key mode arc-modes)])\n  (.arc (current-applet) (float x) (float y) (float width) (float height)\n        (float start) (float stop) (int arc-mode))))\n```\n\n...but `arc-modes` fails on CHORD and PIE:\n\n> CompilerException java.lang.RuntimeException: Unable to find static field: CHORD in interface processing.core.PConstants, compiling:(NO_SOURCE_PATH:1) \n\nIt appears that [CHORD and PIE were added in version 2.0b7](https://github.com/processing/processing/issues/1577) and would therefore not be available in Processing v1.5.1, which Quil currently uses. \n. ",
    "jobez": "hey @tangrammer! \n\ni sent you an email, but currently quil is supporting processing 2.0, so i wonder if this request can be reopened?\n. hey @tangrammer! \n\ni sent you an email, but currently quil is supporting processing 2.0, so i wonder if this request can be reopened?\n. ",
    "GKFX": "processing/processing#2338 now merged.\n. processing/processing#2338 now merged.\n. ",
    "akbiggs": "After talking with \"aperiodic\" on IRC, we discovered that this was a Processing bug with the PGraphics class where images were not getting marked as modified properly after a tint was applied (see https://github.com/processing/processing/issues/1730 ). Unfortunately, the fix for this in a Processing 2.0 patch, so simply upgrading the version of Processing 1 that Quil is based off of won't work.\n. Attempting to downgrade to quil 1.7.0 by modifying my project.clj throws `java.lang.ClassNotFoundException: processing.opengl.PShader` when I attempt to open a repl  -- do you have suggestions on what might be going on there?\n\nI'm using the default renderer, so Java2D. Switching to P2D doesn't seem to fix the issue.\nI can't tell if I'm nuts and just seeing things. It's a bit of a subtle effect that only appears to be happening now every 20 seconds or so, felt like it was happening more frequently yesterday. I'll see if I can capture it on video.\n. `lein clean` fixed the downgrading issue, thanks.\nThe flickering issue still seems to be present on Quil 1.7.0. Not really sure how to proceed from here...it never seems to happen when I record a video of the window, so my gut feeling says it's more likely to be something to do with my environment as opposed to with Quil.\n. Flickering is still present on 2.0.0. I finally found this issue on the Processing repo though that discusses it, turns out it does happen in Processing and I just never noticed it. I think it relates to using OS X + a retina display. https://github.com/processing/processing/issues/2423 The background example, although seizure-inducing, is an example that makes it very obvious. I'm going to close this since it's not a Quil problem.\n\nThe best workaround I've found for now is to use the OpenGL renderer -- I should have tried that before, it improves performance like crazy on retina displays at the expense of a slightly longer startup time.\n. After talking with \"aperiodic\" on IRC, we discovered that this was a Processing bug with the PGraphics class where images were not getting marked as modified properly after a tint was applied (see https://github.com/processing/processing/issues/1730 ). Unfortunately, the fix for this in a Processing 2.0 patch, so simply upgrading the version of Processing 1 that Quil is based off of won't work.\n. Attempting to downgrade to quil 1.7.0 by modifying my project.clj throws `java.lang.ClassNotFoundException: processing.opengl.PShader` when I attempt to open a repl  -- do you have suggestions on what might be going on there?\n\nI'm using the default renderer, so Java2D. Switching to P2D doesn't seem to fix the issue.\nI can't tell if I'm nuts and just seeing things. It's a bit of a subtle effect that only appears to be happening now every 20 seconds or so, felt like it was happening more frequently yesterday. I'll see if I can capture it on video.\n. `lein clean` fixed the downgrading issue, thanks.\nThe flickering issue still seems to be present on Quil 1.7.0. Not really sure how to proceed from here...it never seems to happen when I record a video of the window, so my gut feeling says it's more likely to be something to do with my environment as opposed to with Quil.\n. Flickering is still present on 2.0.0. I finally found this issue on the Processing repo though that discusses it, turns out it does happen in Processing and I just never noticed it. I think it relates to using OS X + a retina display. https://github.com/processing/processing/issues/2423 The background example, although seizure-inducing, is an example that makes it very obvious. I'm going to close this since it's not a Quil problem.\n\nThe best workaround I've found for now is to use the OpenGL renderer -- I should have tried that before, it improves performance like crazy on retina displays at the expense of a slightly longer startup time.\n. ",
    "ChuckFinley": "Worked like a charm. Thanks!\n. Worked like a charm. Thanks!\n. ",
    "bsima": "+1 now that Clojure 1.7 is out. What exactly is preventing this from moving forward? The comment above just mentions AOT compilation but I don't understand why that won't work in 1.6 or 1.7.\n. +1 now that Clojure 1.7 is out. What exactly is preventing this from moving forward? The comment above just mentions AOT compilation but I don't understand why that won't work in 1.6 or 1.7.\n. ",
    "kaosbeat": "I thought it was because I was changing stuff in the \"setup\" function, but apparently it also happens when I do it outside the setup function. I also commented out the setup function after the first instantiation, but that doesn't help either. Ideas?\n. That should solve it. Thanks!\nOn Apr 23, 2014 11:02 AM, \"Nikita Beloglazov\" notifications@github.com\nwrote:\n\n> Hi\n> \n> I believe it how live mode works in lightable. It reevaluates the whole\n> tab on each change, that is why new sketch starts on each change. So it is\n> not quil bug but rather incompatibility of defsketch and live mode. There\n> are few ways to fix it:\n> 1. You can disable defsketch after you launched first window by adding\n>    #_ before defsketch:\n> \n> #_(desketch bla-bla\n>   :title \"Bla-bla\"\n>   :draw draw\n>   :size [100 200])\n> \n> When you need to restart sketch - you close existing, remove #_, new\n> sketch launches and then you add #_ back.\n> 1. You can change workflow to not use live mode. That is actually how\n>    I prefer to work. Initially I open tab and evaluate everything using\n>    Ctrl+Shift+Enter hotkeys. It launches new sketch. When I need to\n>    modify some part of code, e.g. draw function, I modify it and\n>    reevaluate only it by Ctrl+Enter hotkeys.\n> \n> Hope this helps.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/quil/quil/issues/92#issuecomment-41139164\n> .\n. works! thanks a lot.\n. I thought it was because I was changing stuff in the \"setup\" function, but apparently it also happens when I do it outside the setup function. I also commented out the setup function after the first instantiation, but that doesn't help either. Ideas?\n. That should solve it. Thanks!\nOn Apr 23, 2014 11:02 AM, \"Nikita Beloglazov\" notifications@github.com\nwrote:\n\n> Hi\n> \n> I believe it how live mode works in lightable. It reevaluates the whole\n> tab on each change, that is why new sketch starts on each change. So it is\n> not quil bug but rather incompatibility of defsketch and live mode. There\n> are few ways to fix it:\n> 1. You can disable defsketch after you launched first window by adding\n>    #_ before defsketch:\n> \n> #_(desketch bla-bla\n>   :title \"Bla-bla\"\n>   :draw draw\n>   :size [100 200])\n> \n> When you need to restart sketch - you close existing, remove #_, new\n> sketch launches and then you add #_ back.\n> 1. You can change workflow to not use live mode. That is actually how\n>    I prefer to work. Initially I open tab and evaluate everything using\n>    Ctrl+Shift+Enter hotkeys. It launches new sketch. When I need to\n>    modify some part of code, e.g. draw function, I modify it and\n>    reevaluate only it by Ctrl+Enter hotkeys.\n> \n> Hope this helps.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/quil/quil/issues/92#issuecomment-41139164\n> .\n. works! thanks a lot.\n. ",
    "dazld": "Thanks, I'll give that a try!\n. I came back to quil after a while, and this doesn't seem to work any more, and I couldn't find an up to date example. Does this still work..?\n. Thanks, I'll give that a try!\n. I came back to quil after a while, and this doesn't seem to work any more, and I couldn't find an up to date example. Does this still work..?\n. ",
    "belucid": "Nah. It happens! Just figured you'd want to know.\n. Nah. It happens! Just figured you'd want to know.\n. ",
    "Christopher-Bui": "Where would I begin to make a change like this?\n. Where would I begin to make a change like this?\n. ",
    "valyagolev": "> Try remove Quil from your local maven repository (m.b. it corrupted) and call lein clean for your project.\n\nI did that (`rm -rf ~/.m2/repository/quil`, right?) and clean; it re-downloaded all the quil stuff. Still the same error.\n\nI tried to download and run Processing.app and it doesn't work either so probably there is something broken on the Processing side of things. I'll investigate that. If you have any ideas, though, please let me know!\n. Hi!\n\nNo, clojure 1.5.1 gives the same error.\n\nHere the classpath, jdk version and deps tree are \u2013 I couldn't find anything of interest in them:\n\n```\n; the classpath\n#<URL file:/Users/va1en0k/Mine/bgmoon/test/>\n#<URL file:/Users/va1en0k/Mine/bgmoon/src/>\n#<URL file:/Users/va1en0k/Mine/bgmoon/dev-resources>\n#<URL file:/Users/va1en0k/Mine/bgmoon/resources/>\n#<URL file:/Users/va1en0k/Mine/bgmoon/target/classes/>\n#<URL file:/Users/va1en0k/.m2/repository/clojure-complete/clojure-complete/0.2.3/clojure-complete-0.2.3.jar>\n#<URL file:/Users/va1en0k/.m2/repository/clojure-lanterna/clojure-lanterna/0.9.4/clojure-lanterna-0.9.4.jar>\n#<URL file:/Users/va1en0k/.m2/repository/watchtower/watchtower/0.1.1/watchtower-0.1.1.jar>\n#<URL file:/Users/va1en0k/.m2/repository/com/lowagie/itext/2.1.7/itext-2.1.7.jar>\n#<URL file:/Users/va1en0k/.m2/repository/quil/processing-pdf/2.2.1/processing-pdf-2.2.1.jar>\n#<URL file:/Users/va1en0k/.m2/repository/org/clojure/google-closure-library-third-party/0.0-20130212-95c19e7f0f5f/google-closure-library-third-party-0.0-20130212-95c19e7f0f5f.jar>\n#<URL file:/Users/va1en0k/.m2/repository/com/keminglabs/cljx/0.4.0/cljx-0.4.0.jar>\n#<URL file:/Users/va1en0k/.m2/repository/org/clojure/clojurescript/0.0-2080/clojurescript-0.0-2080.jar>\n#<URL file:/Users/va1en0k/.m2/repository/org/bouncycastle/bcmail-jdk14/1.38/bcmail-jdk14-1.38.jar>\n#<URL file:/Users/va1en0k/.m2/repository/com/google/protobuf/protobuf-java/2.4.1/protobuf-java-2.4.1.jar>\n#<URL file:/Users/va1en0k/.m2/repository/org/clojure/core.match/0.2.0/core.match-0.2.0.jar>\n#<URL file:/Users/va1en0k/.m2/repository/org/clojure/tools.reader/0.8.0/tools.reader-0.8.0.jar>\n#<URL file:/Users/va1en0k/.m2/repository/quil/jogl-all-fat/2.1.5/jogl-all-fat-2.1.5.jar>\n#<URL file:/Users/va1en0k/.m2/repository/net/cgrand/regex/1.1.0/regex-1.1.0.jar>\n#<URL file:/Users/va1en0k/.m2/repository/com/google/javascript/closure-compiler/v20130603/closure-compiler-v20130603.jar>\n#<URL file:/Users/va1en0k/.m2/repository/quil/quil/2.2.0/quil-2.2.0.jar>\n#<URL file:/Users/va1en0k/.m2/repository/org/mozilla/rhino/1.7R4/rhino-1.7R4.jar>\n#<URL file:/Users/va1en0k/.m2/repository/org/json/json/20090211/json-20090211.jar>\n#<URL file:/Users/va1en0k/.m2/repository/bouncycastle/bcprov-jdk14/138/bcprov-jdk14-138.jar>\n#<URL file:/Users/va1en0k/.m2/repository/org/clojure/math.numeric-tower/0.0.4/math.numeric-tower-0.0.4.jar>\n#<URL file:/Users/va1en0k/.m2/repository/org/bouncycastle/bctsp-jdk14/1.38/bctsp-jdk14-1.38.jar>\n#<URL file:/Users/va1en0k/.m2/repository/quil/gluegen-rt-fat/2.1.5/gluegen-rt-fat-2.1.5.jar>\n#<URL file:/Users/va1en0k/.m2/repository/bouncycastle/bcmail-jdk14/138/bcmail-jdk14-138.jar>\n#<URL file:/Users/va1en0k/.m2/repository/quil/processing-dxf/2.2.1/processing-dxf-2.2.1.jar>\n#<URL file:/Users/va1en0k/.m2/repository/quil/processing-core/2.2.1/processing-core-2.2.1.jar>\n#<URL file:/Users/va1en0k/.m2/repository/com/google/code/findbugs/jsr305/1.3.9/jsr305-1.3.9.jar>\n#<URL file:/Users/va1en0k/.m2/repository/com/googlecode/lanterna/lanterna/2.1.5/lanterna-2.1.5.jar>\n#<URL file:/Users/va1en0k/.m2/repository/net/cgrand/parsley/0.9.1/parsley-0.9.1.jar>\n#<URL file:/Users/va1en0k/.m2/repository/args4j/args4j/2.0.16/args4j-2.0.16.jar>\n#<URL file:/Users/va1en0k/.m2/repository/org/clojure/tools.nrepl/0.2.3/tools.nrepl-0.2.3.jar>\n#<URL file:/Users/va1en0k/.m2/repository/com/google/guava/guava/14.0.1/guava-14.0.1.jar>\n#<URL file:/Users/va1en0k/.m2/repository/com/cemerick/piggieback/0.1.3/piggieback-0.1.3.jar>\n#<URL file:/Users/va1en0k/.m2/repository/org/clojure/google-closure-library/0.0-20130212-95c19e7f0f5f/google-closure-library-0.0-20130212-95c19e7f0f5f.jar>\n#<URL file:/Users/va1en0k/.m2/repository/org/clojure/clojure/1.6.0/clojure-1.6.0.jar>\n#<URL file:/Users/va1en0k/.m2/repository/org/clojure/data.json/0.2.3/data.json-0.2.3.jar>\n#<URL file:/Users/va1en0k/.m2/repository/org/clojars/trptcolin/sjacket/0.1.0.6/sjacket-0.1.0.6.jar>\n#<URL file:/Users/va1en0k/.m2/repository/org/bouncycastle/bcprov-jdk14/1.38/bcprov-jdk14-1.38.jar>)\n\n\n % javac -version \njavac 1.6.0_65\n\n\n% lein deps :tree \n(WARNING!!! version ranges found for:)\n([quil \"2.2.0\"] -> [com.keminglabs/cljx \"0.4.0\"] -> [org.clojars.trptcolin/sjacket \"0.1.0.6\"] -> [org.clojure/clojure \"[1.3.0,)\"]\nConsider using [quil \"2.2.0\" :exclusions [org.clojure/clojure]].)\n([quil \"2.2.0\"] -> [com.keminglabs/cljx \"0.4.0\"] -> [org.clojars.trptcolin/sjacket \"0.1.0.6\"] -> [net.cgrand/regex \"1.1.0\"] -> [org.clojure/clojure \"[1.2.0,)\"]\nConsider using [quil \"2.2.0\" :exclusions [org.clojure/clojure]].)\n([quil \"2.2.0\"] -> [com.keminglabs/cljx \"0.4.0\"] -> [org.clojars.trptcolin/sjacket \"0.1.0.6\"] -> [net.cgrand/parsley \"0.9.1\"] -> [org.clojure/clojure \"[1.2.0,)\"]\nConsider using [quil \"2.2.0\" :exclusions [org.clojure/clojure]].)\n([quil \"2.2.0\"] -> [com.keminglabs/cljx \"0.4.0\"] -> [org.clojars.trptcolin/sjacket \"0.1.0.6\"] -> [net.cgrand/parsley \"0.9.1\"] -> [net.cgrand/regex \"1.1.0\"] -> [org.clojure/clojure \"[1.2.0,)\"]\nConsider using [quil \"2.2.0\" :exclusions [org.clojure/clojure]].)\nnil\n [clojure-complete \"0.2.3\" :exclusions [[org.clojure/clojure]]]\n [clojure-lanterna \"0.9.4\"]\n   [com.googlecode.lanterna/lanterna \"2.1.5\"]\n [org.clojure/clojure \"1.6.0\"]\n [org.clojure/math.numeric-tower \"0.0.4\"]\n [org.clojure/tools.nrepl \"0.2.3\" :exclusions [[org.clojure/clojure]]]\n [quil \"2.2.0\"]\n   [com.keminglabs/cljx \"0.4.0\"]\n     [com.cemerick/piggieback \"0.1.3\"]\n       [org.clojure/clojurescript \"0.0-2080\"]\n         [com.google.javascript/closure-compiler \"v20130603\"]\n           [args4j \"2.0.16\"]\n           [com.google.code.findbugs/jsr305 \"1.3.9\"]\n           [com.google.guava/guava \"14.0.1\"]\n           [com.google.protobuf/protobuf-java \"2.4.1\"]\n           [org.json/json \"20090211\"]\n         [org.clojure/data.json \"0.2.3\"]\n         [org.clojure/google-closure-library \"0.0-20130212-95c19e7f0f5f\"]\n           [org.clojure/google-closure-library-third-party \"0.0-20130212-95c19e7f0f5f\"]\n         [org.clojure/tools.reader \"0.8.0\"]\n         [org.mozilla/rhino \"1.7R4\"]\n     [org.clojars.trptcolin/sjacket \"0.1.0.6\"]\n       [net.cgrand/parsley \"0.9.1\"]\n       [net.cgrand/regex \"1.1.0\"]\n     [org.clojure/core.match \"0.2.0\"]\n     [watchtower \"0.1.1\"]\n   [com.lowagie/itext \"2.1.7\"]\n     [bouncycastle/bcmail-jdk14 \"138\"]\n     [bouncycastle/bcprov-jdk14 \"138\"]\n     [org.bouncycastle/bctsp-jdk14 \"1.38\"]\n       [org.bouncycastle/bcmail-jdk14 \"1.38\"]\n       [org.bouncycastle/bcprov-jdk14 \"1.38\"]\n   [quil/gluegen-rt-fat \"2.1.5\"]\n   [quil/jogl-all-fat \"2.1.5\"]\n   [quil/processing-core \"2.2.1\"]\n   [quil/processing-dxf \"2.2.1\"]\n   [quil/processing-pdf \"2.2.1\"]\n```\n. I tried as the last command suggested:\n\n```\n[quil \"2.2.0\" :exclusions [org.clojure/clojure]]\n```\n\nSame error still.\n. Ok, I solved it! For some reason I had the processing library in `/Library/Java/Extensions/core.jar`:\n\n```\nbgmoon.core=> (.getPath (.getLocation (.getCodeSource (.getProtectionDomain processing.core.PConstants))))\n```\n\n   \"/Library/Java/Extensions/core.jar\"\n\nThank you! I'm sorry to have bothered you with this.\n. > Try remove Quil from your local maven repository (m.b. it corrupted) and call lein clean for your project.\n\nI did that (`rm -rf ~/.m2/repository/quil`, right?) and clean; it re-downloaded all the quil stuff. Still the same error.\n\nI tried to download and run Processing.app and it doesn't work either so probably there is something broken on the Processing side of things. I'll investigate that. If you have any ideas, though, please let me know!\n. Hi!\n\nNo, clojure 1.5.1 gives the same error.\n\nHere the classpath, jdk version and deps tree are \u2013 I couldn't find anything of interest in them:\n\n```\n; the classpath\n#<URL file:/Users/va1en0k/Mine/bgmoon/test/>\n#<URL file:/Users/va1en0k/Mine/bgmoon/src/>\n#<URL file:/Users/va1en0k/Mine/bgmoon/dev-resources>\n#<URL file:/Users/va1en0k/Mine/bgmoon/resources/>\n#<URL file:/Users/va1en0k/Mine/bgmoon/target/classes/>\n#<URL file:/Users/va1en0k/.m2/repository/clojure-complete/clojure-complete/0.2.3/clojure-complete-0.2.3.jar>\n#<URL file:/Users/va1en0k/.m2/repository/clojure-lanterna/clojure-lanterna/0.9.4/clojure-lanterna-0.9.4.jar>\n#<URL file:/Users/va1en0k/.m2/repository/watchtower/watchtower/0.1.1/watchtower-0.1.1.jar>\n#<URL file:/Users/va1en0k/.m2/repository/com/lowagie/itext/2.1.7/itext-2.1.7.jar>\n#<URL file:/Users/va1en0k/.m2/repository/quil/processing-pdf/2.2.1/processing-pdf-2.2.1.jar>\n#<URL file:/Users/va1en0k/.m2/repository/org/clojure/google-closure-library-third-party/0.0-20130212-95c19e7f0f5f/google-closure-library-third-party-0.0-20130212-95c19e7f0f5f.jar>\n#<URL file:/Users/va1en0k/.m2/repository/com/keminglabs/cljx/0.4.0/cljx-0.4.0.jar>\n#<URL file:/Users/va1en0k/.m2/repository/org/clojure/clojurescript/0.0-2080/clojurescript-0.0-2080.jar>\n#<URL file:/Users/va1en0k/.m2/repository/org/bouncycastle/bcmail-jdk14/1.38/bcmail-jdk14-1.38.jar>\n#<URL file:/Users/va1en0k/.m2/repository/com/google/protobuf/protobuf-java/2.4.1/protobuf-java-2.4.1.jar>\n#<URL file:/Users/va1en0k/.m2/repository/org/clojure/core.match/0.2.0/core.match-0.2.0.jar>\n#<URL file:/Users/va1en0k/.m2/repository/org/clojure/tools.reader/0.8.0/tools.reader-0.8.0.jar>\n#<URL file:/Users/va1en0k/.m2/repository/quil/jogl-all-fat/2.1.5/jogl-all-fat-2.1.5.jar>\n#<URL file:/Users/va1en0k/.m2/repository/net/cgrand/regex/1.1.0/regex-1.1.0.jar>\n#<URL file:/Users/va1en0k/.m2/repository/com/google/javascript/closure-compiler/v20130603/closure-compiler-v20130603.jar>\n#<URL file:/Users/va1en0k/.m2/repository/quil/quil/2.2.0/quil-2.2.0.jar>\n#<URL file:/Users/va1en0k/.m2/repository/org/mozilla/rhino/1.7R4/rhino-1.7R4.jar>\n#<URL file:/Users/va1en0k/.m2/repository/org/json/json/20090211/json-20090211.jar>\n#<URL file:/Users/va1en0k/.m2/repository/bouncycastle/bcprov-jdk14/138/bcprov-jdk14-138.jar>\n#<URL file:/Users/va1en0k/.m2/repository/org/clojure/math.numeric-tower/0.0.4/math.numeric-tower-0.0.4.jar>\n#<URL file:/Users/va1en0k/.m2/repository/org/bouncycastle/bctsp-jdk14/1.38/bctsp-jdk14-1.38.jar>\n#<URL file:/Users/va1en0k/.m2/repository/quil/gluegen-rt-fat/2.1.5/gluegen-rt-fat-2.1.5.jar>\n#<URL file:/Users/va1en0k/.m2/repository/bouncycastle/bcmail-jdk14/138/bcmail-jdk14-138.jar>\n#<URL file:/Users/va1en0k/.m2/repository/quil/processing-dxf/2.2.1/processing-dxf-2.2.1.jar>\n#<URL file:/Users/va1en0k/.m2/repository/quil/processing-core/2.2.1/processing-core-2.2.1.jar>\n#<URL file:/Users/va1en0k/.m2/repository/com/google/code/findbugs/jsr305/1.3.9/jsr305-1.3.9.jar>\n#<URL file:/Users/va1en0k/.m2/repository/com/googlecode/lanterna/lanterna/2.1.5/lanterna-2.1.5.jar>\n#<URL file:/Users/va1en0k/.m2/repository/net/cgrand/parsley/0.9.1/parsley-0.9.1.jar>\n#<URL file:/Users/va1en0k/.m2/repository/args4j/args4j/2.0.16/args4j-2.0.16.jar>\n#<URL file:/Users/va1en0k/.m2/repository/org/clojure/tools.nrepl/0.2.3/tools.nrepl-0.2.3.jar>\n#<URL file:/Users/va1en0k/.m2/repository/com/google/guava/guava/14.0.1/guava-14.0.1.jar>\n#<URL file:/Users/va1en0k/.m2/repository/com/cemerick/piggieback/0.1.3/piggieback-0.1.3.jar>\n#<URL file:/Users/va1en0k/.m2/repository/org/clojure/google-closure-library/0.0-20130212-95c19e7f0f5f/google-closure-library-0.0-20130212-95c19e7f0f5f.jar>\n#<URL file:/Users/va1en0k/.m2/repository/org/clojure/clojure/1.6.0/clojure-1.6.0.jar>\n#<URL file:/Users/va1en0k/.m2/repository/org/clojure/data.json/0.2.3/data.json-0.2.3.jar>\n#<URL file:/Users/va1en0k/.m2/repository/org/clojars/trptcolin/sjacket/0.1.0.6/sjacket-0.1.0.6.jar>\n#<URL file:/Users/va1en0k/.m2/repository/org/bouncycastle/bcprov-jdk14/1.38/bcprov-jdk14-1.38.jar>)\n\n\n % javac -version \njavac 1.6.0_65\n\n\n% lein deps :tree \n(WARNING!!! version ranges found for:)\n([quil \"2.2.0\"] -> [com.keminglabs/cljx \"0.4.0\"] -> [org.clojars.trptcolin/sjacket \"0.1.0.6\"] -> [org.clojure/clojure \"[1.3.0,)\"]\nConsider using [quil \"2.2.0\" :exclusions [org.clojure/clojure]].)\n([quil \"2.2.0\"] -> [com.keminglabs/cljx \"0.4.0\"] -> [org.clojars.trptcolin/sjacket \"0.1.0.6\"] -> [net.cgrand/regex \"1.1.0\"] -> [org.clojure/clojure \"[1.2.0,)\"]\nConsider using [quil \"2.2.0\" :exclusions [org.clojure/clojure]].)\n([quil \"2.2.0\"] -> [com.keminglabs/cljx \"0.4.0\"] -> [org.clojars.trptcolin/sjacket \"0.1.0.6\"] -> [net.cgrand/parsley \"0.9.1\"] -> [org.clojure/clojure \"[1.2.0,)\"]\nConsider using [quil \"2.2.0\" :exclusions [org.clojure/clojure]].)\n([quil \"2.2.0\"] -> [com.keminglabs/cljx \"0.4.0\"] -> [org.clojars.trptcolin/sjacket \"0.1.0.6\"] -> [net.cgrand/parsley \"0.9.1\"] -> [net.cgrand/regex \"1.1.0\"] -> [org.clojure/clojure \"[1.2.0,)\"]\nConsider using [quil \"2.2.0\" :exclusions [org.clojure/clojure]].)\nnil\n [clojure-complete \"0.2.3\" :exclusions [[org.clojure/clojure]]]\n [clojure-lanterna \"0.9.4\"]\n   [com.googlecode.lanterna/lanterna \"2.1.5\"]\n [org.clojure/clojure \"1.6.0\"]\n [org.clojure/math.numeric-tower \"0.0.4\"]\n [org.clojure/tools.nrepl \"0.2.3\" :exclusions [[org.clojure/clojure]]]\n [quil \"2.2.0\"]\n   [com.keminglabs/cljx \"0.4.0\"]\n     [com.cemerick/piggieback \"0.1.3\"]\n       [org.clojure/clojurescript \"0.0-2080\"]\n         [com.google.javascript/closure-compiler \"v20130603\"]\n           [args4j \"2.0.16\"]\n           [com.google.code.findbugs/jsr305 \"1.3.9\"]\n           [com.google.guava/guava \"14.0.1\"]\n           [com.google.protobuf/protobuf-java \"2.4.1\"]\n           [org.json/json \"20090211\"]\n         [org.clojure/data.json \"0.2.3\"]\n         [org.clojure/google-closure-library \"0.0-20130212-95c19e7f0f5f\"]\n           [org.clojure/google-closure-library-third-party \"0.0-20130212-95c19e7f0f5f\"]\n         [org.clojure/tools.reader \"0.8.0\"]\n         [org.mozilla/rhino \"1.7R4\"]\n     [org.clojars.trptcolin/sjacket \"0.1.0.6\"]\n       [net.cgrand/parsley \"0.9.1\"]\n       [net.cgrand/regex \"1.1.0\"]\n     [org.clojure/core.match \"0.2.0\"]\n     [watchtower \"0.1.1\"]\n   [com.lowagie/itext \"2.1.7\"]\n     [bouncycastle/bcmail-jdk14 \"138\"]\n     [bouncycastle/bcprov-jdk14 \"138\"]\n     [org.bouncycastle/bctsp-jdk14 \"1.38\"]\n       [org.bouncycastle/bcmail-jdk14 \"1.38\"]\n       [org.bouncycastle/bcprov-jdk14 \"1.38\"]\n   [quil/gluegen-rt-fat \"2.1.5\"]\n   [quil/jogl-all-fat \"2.1.5\"]\n   [quil/processing-core \"2.2.1\"]\n   [quil/processing-dxf \"2.2.1\"]\n   [quil/processing-pdf \"2.2.1\"]\n```\n. I tried as the last command suggested:\n\n```\n[quil \"2.2.0\" :exclusions [org.clojure/clojure]]\n```\n\nSame error still.\n. Ok, I solved it! For some reason I had the processing library in `/Library/Java/Extensions/core.jar`:\n\n```\nbgmoon.core=> (.getPath (.getLocation (.getCodeSource (.getProtectionDomain processing.core.PConstants))))\n```\n\n   \"/Library/Java/Extensions/core.jar\"\n\nThank you! I'm sorry to have bothered you with this.\n. ",
    "arnm": "Thanks, `quil.core/background` worked great! I will also look into the functional mode middleware. Cheers\n\nEdit: The functional mode middleware is exactly what I am looking for. Thanks again\n. Ok will do\n. Thanks, `quil.core/background` worked great! I will also look into the functional mode middleware. Cheers\n\nEdit: The functional mode middleware is exactly what I am looking for. Thanks again\n. Ok will do\n. ",
    "shterrett": "Hi Nikita,\n\nThanks - that works perfectly! I'm new to clojure as well, and while I knew it could be lazy, I didn't realize that map was lazy by default. Thanks for the detailed explanation.\n\nStuart\n. Hi Nikita,\n\nThanks - that works perfectly! I'm new to clojure as well, and while I knew it could be lazy, I didn't realize that map was lazy by default. Thanks for the detailed explanation.\n\nStuart\n. ",
    "rbuchmann": "Hi, thanks for the quick reply and the otherwise awesome quil in general.\n\n> OpenGL works fine with it?\n\nYes, glxgears and some other opengly stuff works. glxinfo shows the correct drivers being used with the test in the [arch wiki](https://wiki.archlinux.org/index.php/PRIME). I tried some of the jogl examples, and at least the simple examples work fine (shadowmapping and HDR examples didn't work, both with DRI_PRIME set and unset). The funny thing is that the app window sometimes (most of the times actually, couldn't reproduce it not drawing just now) displays correctly, even with my test triangles in it, but can't be closed properly. I believe the crash doesn't even occur if I let it keep running.\nSummarizing, it is like parachuting without a chute atm: it works, but only once :grin: \n. Hi,\n\nlein run produces exactly the same error, in fact the one in my original post was copied from lein run output rather than the _messages_ buffer. I am fiddling with my drivers atm. because I need to get this working as soon as possible so I didn't try processing itself yet. I'll try to use nvidia only now and get back to you with the results\nThe error log is [here](https://gist.github.com/rbuchmann/366515f003abbbca3f86).\n. Ok, using the nvidia driver makes it work, so I guess you can close this if you like. It is probably preferable if a driver problem doesn't murder your repl completely, but maybe you can postpone further investigation until some other unfortunate soul runs into the same problem. I would rather not revert to nouveau for testing, because I spent ages getting nvidia to work (had a lingering file with intel sda settings in xorg.conf.d that prevented nvidia from working), but if you need more info I could do it if I get some free time.\nNow I am stuck with screen tearing and higher power consumption, but everything opengl works, which I think I prefer :) \n. Sure! Thanks for quil, saved me a lot of time.\n. Hi, thanks for the quick reply and the otherwise awesome quil in general.\n\n> OpenGL works fine with it?\n\nYes, glxgears and some other opengly stuff works. glxinfo shows the correct drivers being used with the test in the [arch wiki](https://wiki.archlinux.org/index.php/PRIME). I tried some of the jogl examples, and at least the simple examples work fine (shadowmapping and HDR examples didn't work, both with DRI_PRIME set and unset). The funny thing is that the app window sometimes (most of the times actually, couldn't reproduce it not drawing just now) displays correctly, even with my test triangles in it, but can't be closed properly. I believe the crash doesn't even occur if I let it keep running.\nSummarizing, it is like parachuting without a chute atm: it works, but only once :grin: \n. Hi,\n\nlein run produces exactly the same error, in fact the one in my original post was copied from lein run output rather than the _messages_ buffer. I am fiddling with my drivers atm. because I need to get this working as soon as possible so I didn't try processing itself yet. I'll try to use nvidia only now and get back to you with the results\nThe error log is [here](https://gist.github.com/rbuchmann/366515f003abbbca3f86).\n. Ok, using the nvidia driver makes it work, so I guess you can close this if you like. It is probably preferable if a driver problem doesn't murder your repl completely, but maybe you can postpone further investigation until some other unfortunate soul runs into the same problem. I would rather not revert to nouveau for testing, because I spent ages getting nvidia to work (had a lingering file with intel sda settings in xorg.conf.d that prevented nvidia from working), but if you need more info I could do it if I get some free time.\nNow I am stuck with screen tearing and higher power consumption, but everything opengl works, which I think I prefer :) \n. Sure! Thanks for quil, saved me a lot of time.\n. ",
    "thobbs": "Thanks very much for the quick merge!\n. Thanks very much for the quick merge!\n. ",
    "gcapizzi": "This is my Java version:\n\n```\n[~] java -version\njava version \"1.7.0_45\"\nJava(TM) SE Runtime Environment (build 1.7.0_45-b18)\nJava HotSpot(TM) 64-Bit Server VM (build 24.45-b08, mixed mode)\n```\n\nI'm in Mac OS X 10.9.5.\n. Ok, found the issue! Running iTerm2 fullscreen, I couldn't see any window. Exiting from full screen suddenly makes all the windows appear :smile: Not sure if this could or should be fixed, but it's pretty annoying!\n\nEdit: here is a [demo](https://dl.dropboxusercontent.com/u/164143/quil.mov).\n. Awesome, thanks. I think we can close this now!\n. This is my Java version:\n\n```\n[~] java -version\njava version \"1.7.0_45\"\nJava(TM) SE Runtime Environment (build 1.7.0_45-b18)\nJava HotSpot(TM) 64-Bit Server VM (build 24.45-b08, mixed mode)\n```\n\nI'm in Mac OS X 10.9.5.\n. Ok, found the issue! Running iTerm2 fullscreen, I couldn't see any window. Exiting from full screen suddenly makes all the windows appear :smile: Not sure if this could or should be fixed, but it's pretty annoying!\n\nEdit: here is a [demo](https://dl.dropboxusercontent.com/u/164143/quil.mov).\n. Awesome, thanks. I think we can close this now!\n. ",
    "takosuke": "In my case, the sketches not only hide behind the window - they sometimes run away and hide at the very bottom of the window stack, behind everything else but the desktop!It doesn't always happen, I'm not sure when sorry\nAnd when having exited an iterm2 fullscreen window, they appear as just tiny bars with the red/yellow/green buttons on top\n. Sorry I didn't get back to you before - christmas, life and everything. \nYes, it was probably the same as issue #145, plus my cluelesness about emacs/lighttable/nREPL\n. In my case, the sketches not only hide behind the window - they sometimes run away and hide at the very bottom of the window stack, behind everything else but the desktop!It doesn't always happen, I'm not sure when sorry\nAnd when having exited an iterm2 fullscreen window, they appear as just tiny bars with the red/yellow/green buttons on top\n. Sorry I didn't get back to you before - christmas, life and everything. \nYes, it was probably the same as issue #145, plus my cluelesness about emacs/lighttable/nREPL\n. ",
    "jaredly": "I'm also seeing this -- the quil sketch windows have no entry in the dock, and can't be `cmd-tab`'d to. But 4-swipe-up allows you to see & focus them. :/ this didn't always happen - a few days ago they appeared in the dock w/ a java icon.\nquil v2.2.5, clojure 1.7.0, OSX Yosemite\n. @nbeloglazov here's the (wip) repl http://jaredforsyth.com/tutorial-cljs/\nI've hacked it so that you can access the most recently created applet from the REPL, by just doing `(set! quil.sketch/*applet* the-applet)` :D so you can call the drawing functions too!\n. yup! it uses [replumb](https://github.com/ScalaConsultants/replumb) which gets some of the more confusing configuration out of your way. I'd be happy to help w/ any issues you run into -- I ended up doing a fair amount of digging into the internals\n. I'm also seeing this -- the quil sketch windows have no entry in the dock, and can't be `cmd-tab`'d to. But 4-swipe-up allows you to see & focus them. :/ this didn't always happen - a few days ago they appeared in the dock w/ a java icon.\nquil v2.2.5, clojure 1.7.0, OSX Yosemite\n. @nbeloglazov here's the (wip) repl http://jaredforsyth.com/tutorial-cljs/\nI've hacked it so that you can access the most recently created applet from the REPL, by just doing `(set! quil.sketch/*applet* the-applet)` :D so you can call the drawing functions too!\n. yup! it uses [replumb](https://github.com/ScalaConsultants/replumb) which gets some of the more confusing configuration out of your way. I'd be happy to help w/ any issues you run into -- I ended up doing a fair amount of digging into the internals\n. ",
    "giuliano108": "I found an easy way to reproduce the problem.\n- The Applet opens behind the other windows, doesn't show among the running MacOS apps, can't be `cmd-tab`'d to:\n  \n  ```\n  $ boot repl -m cider.nrepl/cider-middleware\n  boot.user=> (require 'sketch.core)\n  ```\n- Everything works as expected:\n  \n  ```\n  $ boot repl\n  boot.user=> (require 'sketch.core)\n  ```\n\nI'll do some more digging, but hopefully someone has an idea why `cider-middleware` is interfering?\n. I found an easy way to reproduce the problem.\n- The Applet opens behind the other windows, doesn't show among the running MacOS apps, can't be `cmd-tab`'d to:\n  \n  ```\n  $ boot repl -m cider.nrepl/cider-middleware\n  boot.user=> (require 'sketch.core)\n  ```\n- Everything works as expected:\n  \n  ```\n  $ boot repl\n  boot.user=> (require 'sketch.core)\n  ```\n\nI'll do some more digging, but hopefully someone has an idea why `cider-middleware` is interfering?\n. ",
    "novemberkilo": "Thanks @nbeloglazov - I have made a small edit to the wiki page to mention this. Please close this issue as appropriate.\n. Thanks @nbeloglazov - I have made a small edit to the wiki page to mention this. Please close this issue as appropriate.\n. ",
    "lpil": "Sorry, I've been very unclear!\n\nI would allow a user to draw by calling `ellipse` at the mouse location when they click a mouse button. I would like to then be able to read (or even modify) the data for individual pixels in the applet window- i.e. get a RGB value for a pixel.\n\nAfter exploring the API docs a little more I think I may have answered my own question- the [pixels](http://quil.info/api/image/pixels#pixels) function seems to do what I want. For some reason I thought this only worked with images after my first read earlier today.\n\nThank you for your time!\n. Sorry, I've been very unclear!\n\nI would allow a user to draw by calling `ellipse` at the mouse location when they click a mouse button. I would like to then be able to read (or even modify) the data for individual pixels in the applet window- i.e. get a RGB value for a pixel.\n\nAfter exploring the API docs a little more I think I may have answered my own question- the [pixels](http://quil.info/api/image/pixels#pixels) function seems to do what I want. For some reason I thought this only worked with images after my first read earlier today.\n\nThank you for your time!\n. ",
    "thorwil": "Installing openjdk-7-jre is the solution, thanks!\n\nPlain Processing worked (though I didn't try animation), so I assumed everything would be alright on that front. Ubuntu 14.04. I had openjdk-7-jre-headless and added openjdk-7-jre now. Despite not only a general search but also checking the issues here, I did not come across #146.\n. Installing openjdk-7-jre is the solution, thanks!\n\nPlain Processing worked (though I didn't try animation), so I assumed everything would be alright on that front. Ubuntu 14.04. I had openjdk-7-jre-headless and added openjdk-7-jre now. Despite not only a general search but also checking the issues here, I did not come across #146.\n. ",
    "timur-han": "Hi Nikita,\n\nThanks for the answer, it helped. \n\nRegards,\n\nTimur\n. Hi Nikita,\n\nThanks for the hint again :)\n\nI will ask my further questions in the mentioned google group. I was not\naware of it's existence.\n\nRegards,\n\nTimur\n\nOn Fri, Apr 17, 2015 at 7:45 AM Nikita Beloglazov notifications@github.com\nwrote:\n\n> Hi Timur\n> \n> Take a look at rect http://quil.info/api/shape/2d-primitives#rect\n> method which takes 5 arguments. Last argument is corner radius. Also you\n> can use google group clj-processing\n> https://groups.google.com/forum/#!forum/clj-processing for similar\n> questions. It is usually used to discuss implementation questions.\n> \n> Thanks,\n> Nikita\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/quil/quil/issues/152#issuecomment-93898068.\n. Hi Nikita,\n\nThanks for the answer, it helped. \n\nRegards,\n\nTimur\n. Hi Nikita,\n\nThanks for the hint again :)\n\nI will ask my further questions in the mentioned google group. I was not\naware of it's existence.\n\nRegards,\n\nTimur\n\nOn Fri, Apr 17, 2015 at 7:45 AM Nikita Beloglazov notifications@github.com\nwrote:\n\n> Hi Timur\n> \n> Take a look at rect http://quil.info/api/shape/2d-primitives#rect\n> method which takes 5 arguments. Last argument is corner radius. Also you\n> can use google group clj-processing\n> https://groups.google.com/forum/#!forum/clj-processing for similar\n> questions. It is usually used to discuss implementation questions.\n> \n> Thanks,\n> Nikita\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/quil/quil/issues/152#issuecomment-93898068.\n. ",
    "kindlychung": "Cool, thanks!\n. Cool, thanks!\n. ",
    "dsiah": "haha that was silly -- I assumed that the -main function was generated in the example. It is almost working...\n\n```\n(q/defsketch hello-quil\n  :title \"You spin my circle right round\"\n  :size [1200 500]                      ; setup function called only once, during sketch initialization.\n  :setup setup                          ; update-state is called on each iteration before draw-state.\n  :update update-state\n  :draw draw-state\n                                        ; This sketch uses functional-mode middleware.\n                                        ; Check quil wiki for more info about middlewares and particularly\n                                        ; fun-mode.\n  :middleware [m/fun-mode])\n\n(defn -main\n  [& args]\n  (q/sketch\n   :title \"Example is working\"\n   :setup setup\n   :draw draw-state\n   :size [400 400]\n   :features [:exit-on-close]))\n```\n\nThe top code is what was supposed to be I assume the -main function since it is almost identical to what the tutorial you linked led me to produce -- the second function is of course mine. The problem with the second function is that the draw-state function takes a state which I cannot seem to figure out what to write in the second function. When I do not give it a state it crashes giving me an arity error (wrong number of args) which is reproduced at each draw-state call :sob: \n\nP.S. the documentation looks a little dated compared to the templates that lein uses and once we get this sorted out I would be more than happy to update them accordingly.\n. perfect -- that clears it up, thank you.\n. haha that was silly -- I assumed that the -main function was generated in the example. It is almost working...\n\n```\n(q/defsketch hello-quil\n  :title \"You spin my circle right round\"\n  :size [1200 500]                      ; setup function called only once, during sketch initialization.\n  :setup setup                          ; update-state is called on each iteration before draw-state.\n  :update update-state\n  :draw draw-state\n                                        ; This sketch uses functional-mode middleware.\n                                        ; Check quil wiki for more info about middlewares and particularly\n                                        ; fun-mode.\n  :middleware [m/fun-mode])\n\n(defn -main\n  [& args]\n  (q/sketch\n   :title \"Example is working\"\n   :setup setup\n   :draw draw-state\n   :size [400 400]\n   :features [:exit-on-close]))\n```\n\nThe top code is what was supposed to be I assume the -main function since it is almost identical to what the tutorial you linked led me to produce -- the second function is of course mine. The problem with the second function is that the draw-state function takes a state which I cannot seem to figure out what to write in the second function. When I do not give it a state it crashes giving me an arity error (wrong number of args) which is reproduced at each draw-state call :sob: \n\nP.S. the documentation looks a little dated compared to the templates that lein uses and once we get this sorted out I would be more than happy to update them accordingly.\n. perfect -- that clears it up, thank you.\n. ",
    "Jickelsen": "Here's a repo with an example project\nhttps://github.com/Jickelsen/blending\n\nBlending does not seem to work in :p2d either, assuming I got the arguments right.\n. I haven't had time to try this out yet, but that's great! Thank you for tracking the bug down.\n\nQuil in cljs only supports the two rendering modes p2d and p3d, right? What is the reason for not including the other ones available in processing.js, such as opengl? I am just assuming there is some meaningful difference between them.\n. Here's a repo with an example project\nhttps://github.com/Jickelsen/blending\n\nBlending does not seem to work in :p2d either, assuming I got the arguments right.\n. I haven't had time to try this out yet, but that's great! Thank you for tracking the bug down.\n\nQuil in cljs only supports the two rendering modes p2d and p3d, right? What is the reason for not including the other ones available in processing.js, such as opengl? I am just assuming there is some meaningful difference between them.\n. ",
    "GoToLoop": "http://forum.processing.org/two/discussion/comment/43979/#Comment_43979\n. Don't forget **noSmooth()** either!  @_@\nThis discussion can be useful for Quil too:  https://GitHub.com/jdf/processing.py/issues/162\n. AFAIK in Processing Java, each key combo generates a diff. [_key_](https://Processing.org/reference/key.html).\nFor example, CTRL+Z is `26`. Check it out further below:\nhttps://forum.Processing.org/two/discussion/13928/reading-ctrl-z-in-keypressed\n. This is how I'd do it in \"Java Mode\":  :-D\n\n``` processing\n// https://GitHub.com/quil/quil/issues/174\n// GoToLoop (2015-Dec-14)\n\nboolean isShiftDown, isCtrlDown, isAltDown;\n\nvoid setup() {\n  size(400, 300);\n  smooth(4);\n  noLoop();\n\n  fill(#FFFF00);\n  textSize(050);\n  textAlign(CENTER, CENTER);\n}\n\nvoid draw() {\n  String modifiers\n    = \"SHIFT: \" + isShiftDown + ENTER\n    + \"CTRL:  \" + isCtrlDown  + ENTER\n    + \"ALT:   \" + isAltDown;\n\n  background(#0000A0);\n  text(modifiers, width>>1, height>>1);\n}\n\nvoid keyPressed() {\n  setKey(keyCode, true);\n  redraw = true;\n}\n\nvoid keyReleased() {\n  setKey(keyCode, false);\n  redraw = true;\n}\n\nvoid setKey(int k, boolean bool) {\n  if      (k == SHIFT)    isShiftDown = bool;\n  else if (k == CONTROL)  isCtrlDown  = bool;\n  else if (k == ALT)      isAltDown   = bool;\n}\n```\n. Dunno Clojure; but in Java outside **_PApplet**_ class context, as a _\".java\"_ suffixed tab, in order to access any `static` member like **abs()**, we just prefix it w/ the name of its class: `PApplet.abs(PConstants.MIN_INT);`\n\nP.S.: We can replace _PConstants.MIN_INT_ w/ _PApplet.MIN_INT_, given that **_PApplet**_ already `implements` **_PConstants**_.   ;-)\n. I wonder which _\"processing.js\"_ version Quill/ClosureScript is using?\n. - Thx @Norgat, processing-js \"1.4.8.2\". As I had feared...\n- The last \".2\" much probably means some sub-fork I believe.\n- Pjs 1.4.8 was the last release which allowed it to be used as a pure JS library.\n- The whole feature was suddenly removed unannounced (no debate & no release notes at all):\n  https://github.com/processing-js/processing-js/commits/v1.4.9/src\n- And only found out much later by chance: https://github.com/processing-js/processing-js/issues/192\n- Moreover, Pjs can't be used by transpilers anymore like ClojureScript, CoffeeScript, TypeScript, etc.\n- I conclude Quill project is stuck w/ Pjs 1.4.8 just like CoffeeScript Mode is too:\n  https://github.com/fjenett/coffeescript-mode-processing\n- B/c they all need to transpile to JS syntax rather than keep a Java-ish syntax! Alas...\n. Inner class **_PSurfaceAWT.SmoothCanvas**_ from package _processing.awt_ got a method called **getFrame()** which returns the **_JFrame**_ instance being used by its enclosing top class **_PSurfaceAWT**_:\n\nhttps://forum.Processing.org/two/discussion/15398/limiting-window-resize-to-a-certain-minimum\nhttps://GitHub.com/processing/processing/blob/master/core/src/processing/awt/PSurfaceAWT.java\n. Dunno Closure. But perhaps you can be interested in the original **PVector::random3D()** implementation for Pjs:\r\n\r\n```js\r\nconst TAU = 2 * Math.PI,\r\n      pjsCheck = obj => obj != null && 'lerp' in obj;\r\n\r\nfunction PVector(x, y, z) {\r\n  this.x = x || 0, this.y = y || 0, this.z = z || 0;\r\n}\r\n\r\nPVector.fromAngle = (ang, t) =>\r\n  t? t.set(Math.cos(ang), Math.sin(ang))\r\n   : new PVector(Math.cos(ang), Math.sin(ang));\r\n\r\nPVector.random2D = (t, p) => {\r\n  const isPjs = pjsCheck(t), rnd = p? p : isPjs && t || Math;\r\n  return PVector.fromAngle(TAU * rnd.random(), !isPjs && t || void 0);\r\n};\r\n\r\nPVector.random3D = (t, p) => {\r\n  const isPjs = pjsCheck(t),\r\n        rnd = p? p : isPjs && t || Math,\r\n        ang = TAU * rnd.random(),\r\n        vz  = 2*rnd.random() - 1,\r\n        vzr = Math.sqrt(1 - vz*vz),\r\n        vx  = vzr * Math.cos(ang),\r\n        vy  = vzr * Math.sin(ang);\r\n  return t && !isPjs? t.set(vx, vy, vz) : new PVector(vx, vy, vz);\r\n};\r\n```. Just a tip: all Firefox family browsers can run scripts under scheme `file://`. And always could!. @4nd1m4n, for a similar Firefox experience for Chrome-family browsers, there's a shortcut argument for it:\r\nhttp://chrome-allow-file-access-from-file.com/. http://forum.processing.org/two/discussion/comment/43979/#Comment_43979\n. Don't forget **noSmooth()** either!  @_@\nThis discussion can be useful for Quil too:  https://GitHub.com/jdf/processing.py/issues/162\n. AFAIK in Processing Java, each key combo generates a diff. [_key_](https://Processing.org/reference/key.html).\nFor example, CTRL+Z is `26`. Check it out further below:\nhttps://forum.Processing.org/two/discussion/13928/reading-ctrl-z-in-keypressed\n. This is how I'd do it in \"Java Mode\":  :-D\n\n``` processing\n// https://GitHub.com/quil/quil/issues/174\n// GoToLoop (2015-Dec-14)\n\nboolean isShiftDown, isCtrlDown, isAltDown;\n\nvoid setup() {\n  size(400, 300);\n  smooth(4);\n  noLoop();\n\n  fill(#FFFF00);\n  textSize(050);\n  textAlign(CENTER, CENTER);\n}\n\nvoid draw() {\n  String modifiers\n    = \"SHIFT: \" + isShiftDown + ENTER\n    + \"CTRL:  \" + isCtrlDown  + ENTER\n    + \"ALT:   \" + isAltDown;\n\n  background(#0000A0);\n  text(modifiers, width>>1, height>>1);\n}\n\nvoid keyPressed() {\n  setKey(keyCode, true);\n  redraw = true;\n}\n\nvoid keyReleased() {\n  setKey(keyCode, false);\n  redraw = true;\n}\n\nvoid setKey(int k, boolean bool) {\n  if      (k == SHIFT)    isShiftDown = bool;\n  else if (k == CONTROL)  isCtrlDown  = bool;\n  else if (k == ALT)      isAltDown   = bool;\n}\n```\n. Dunno Clojure; but in Java outside **_PApplet**_ class context, as a _\".java\"_ suffixed tab, in order to access any `static` member like **abs()**, we just prefix it w/ the name of its class: `PApplet.abs(PConstants.MIN_INT);`\n\nP.S.: We can replace _PConstants.MIN_INT_ w/ _PApplet.MIN_INT_, given that **_PApplet**_ already `implements` **_PConstants**_.   ;-)\n. I wonder which _\"processing.js\"_ version Quill/ClosureScript is using?\n. - Thx @Norgat, processing-js \"1.4.8.2\". As I had feared...\n- The last \".2\" much probably means some sub-fork I believe.\n- Pjs 1.4.8 was the last release which allowed it to be used as a pure JS library.\n- The whole feature was suddenly removed unannounced (no debate & no release notes at all):\n  https://github.com/processing-js/processing-js/commits/v1.4.9/src\n- And only found out much later by chance: https://github.com/processing-js/processing-js/issues/192\n- Moreover, Pjs can't be used by transpilers anymore like ClojureScript, CoffeeScript, TypeScript, etc.\n- I conclude Quill project is stuck w/ Pjs 1.4.8 just like CoffeeScript Mode is too:\n  https://github.com/fjenett/coffeescript-mode-processing\n- B/c they all need to transpile to JS syntax rather than keep a Java-ish syntax! Alas...\n. Inner class **_PSurfaceAWT.SmoothCanvas**_ from package _processing.awt_ got a method called **getFrame()** which returns the **_JFrame**_ instance being used by its enclosing top class **_PSurfaceAWT**_:\n\nhttps://forum.Processing.org/two/discussion/15398/limiting-window-resize-to-a-certain-minimum\nhttps://GitHub.com/processing/processing/blob/master/core/src/processing/awt/PSurfaceAWT.java\n. Dunno Closure. But perhaps you can be interested in the original **PVector::random3D()** implementation for Pjs:\r\n\r\n```js\r\nconst TAU = 2 * Math.PI,\r\n      pjsCheck = obj => obj != null && 'lerp' in obj;\r\n\r\nfunction PVector(x, y, z) {\r\n  this.x = x || 0, this.y = y || 0, this.z = z || 0;\r\n}\r\n\r\nPVector.fromAngle = (ang, t) =>\r\n  t? t.set(Math.cos(ang), Math.sin(ang))\r\n   : new PVector(Math.cos(ang), Math.sin(ang));\r\n\r\nPVector.random2D = (t, p) => {\r\n  const isPjs = pjsCheck(t), rnd = p? p : isPjs && t || Math;\r\n  return PVector.fromAngle(TAU * rnd.random(), !isPjs && t || void 0);\r\n};\r\n\r\nPVector.random3D = (t, p) => {\r\n  const isPjs = pjsCheck(t),\r\n        rnd = p? p : isPjs && t || Math,\r\n        ang = TAU * rnd.random(),\r\n        vz  = 2*rnd.random() - 1,\r\n        vzr = Math.sqrt(1 - vz*vz),\r\n        vx  = vzr * Math.cos(ang),\r\n        vy  = vzr * Math.sin(ang);\r\n  return t && !isPjs? t.set(vx, vy, vz) : new PVector(vx, vy, vz);\r\n};\r\n```. Just a tip: all Firefox family browsers can run scripts under scheme `file://`. And always could!. @4nd1m4n, for a similar Firefox experience for Chrome-family browsers, there's a shortcut argument for it:\r\nhttp://chrome-allow-file-access-from-file.com/. ",
    "sp3ctum": "When I run my app I see a black canvas element appear, and the message by `draw` outputted to the console every second. The setup function is called in the very beginning, but not after a figwheel reload / manual C-c C-k reload (I use emacs).\n. Also, after changing `draw`'s log message and re-evaluating it, I can see the changed result with a form like this:\n\n``` lisp\n(q/with-sketch (q/get-sketch-by-id \"canvas\")\n  (draw))\n```\n\nBut it is displayed only once. While the `draw` function is run the original `draw` persists in logging the original message to the console.\n\nAlso I forgot to mention I use `[quil \"2.2.5\"]`\n. Ah, good idea. I already tried #'var-quoting my draw function but it\nchanged nothing.\n\nIn addition to that, I found this example project that claims this should\nbe possible:\nhttps://github.com/ClojureTO/hello-quil\n\nLooks like that project does basically the same thing as I did but has its\ndefsketch and draw forms in different files. I'll investigate and report\nback.\n\n2015-05-29 7:24 GMT+03:00 Nikita Beloglazov notifications@github.com:\n\n> Please say if it helps. I don't use figweel or any other tool for live\n> reloading of clojurescript so I can't check. If it works - we probably\n> should include it into quil itself.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/quil/quil/issues/157#issuecomment-106680771.\n. Yep, sure enough, your method works perfectly - wrapping the function calls in an anonymous function allows them to be reloaded like everything else with figwheel. Thank you!\n. Hi again, I finally got a chance to try this out. It seems to work in 2.2.6-SNAPSHOT right out of the box. :)\n. When I run my app I see a black canvas element appear, and the message by `draw` outputted to the console every second. The setup function is called in the very beginning, but not after a figwheel reload / manual C-c C-k reload (I use emacs).\n. Also, after changing `draw`'s log message and re-evaluating it, I can see the changed result with a form like this:\n\n``` lisp\n(q/with-sketch (q/get-sketch-by-id \"canvas\")\n  (draw))\n```\n\nBut it is displayed only once. While the `draw` function is run the original `draw` persists in logging the original message to the console.\n\nAlso I forgot to mention I use `[quil \"2.2.5\"]`\n. Ah, good idea. I already tried #'var-quoting my draw function but it\nchanged nothing.\n\nIn addition to that, I found this example project that claims this should\nbe possible:\nhttps://github.com/ClojureTO/hello-quil\n\nLooks like that project does basically the same thing as I did but has its\ndefsketch and draw forms in different files. I'll investigate and report\nback.\n\n2015-05-29 7:24 GMT+03:00 Nikita Beloglazov notifications@github.com:\n\n> Please say if it helps. I don't use figweel or any other tool for live\n> reloading of clojurescript so I can't check. If it works - we probably\n> should include it into quil itself.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/quil/quil/issues/157#issuecomment-106680771.\n. Yep, sure enough, your method works perfectly - wrapping the function calls in an anonymous function allows them to be reloaded like everything else with figwheel. Thank you!\n. Hi again, I finally got a chance to try this out. It seems to work in 2.2.6-SNAPSHOT right out of the box. :)\n. ",
    "tjg": "Thanks @Norgat!\n\nFor ClojureBridge, I think I'll just advise learners to use `:features [:keep-on-top]`. For anyone morbidly interested, these didn't work yet:\n- Avoiding `JAppleMenuBar` didn't work.\n  - Tried reflection to set\n    `japplemenubar.JAppleMenuBar.instance.setVisible(true, false);`.\n  - Set `PApplet.platform = PConstants.WINDOWS;` to avoid `japplemenubar.JAppleMenuBar.instance.setHide();`.\n- Embedding the java.awt.Canvas into another app seems nontrivial: [docs are unclear](https://github.com/processing/processing/blob/dea1d58e918765808c82d6f1cc9413dd23954971/core/src/processing/core/PApplet.java#L91), and [so is the code](https://github.com/processing/processing/blob/dea1d58e918765808c82d6f1cc9413dd23954971/core/src/processing/core/PApplet.java#L9872).\n. Thanks @nbeloglazov, I'll try the ClojureScript version out!\n. Thanks @Norgat!\n\nFor ClojureBridge, I think I'll just advise learners to use `:features [:keep-on-top]`. For anyone morbidly interested, these didn't work yet:\n- Avoiding `JAppleMenuBar` didn't work.\n  - Tried reflection to set\n    `japplemenubar.JAppleMenuBar.instance.setVisible(true, false);`.\n  - Set `PApplet.platform = PConstants.WINDOWS;` to avoid `japplemenubar.JAppleMenuBar.instance.setHide();`.\n- Embedding the java.awt.Canvas into another app seems nontrivial: [docs are unclear](https://github.com/processing/processing/blob/dea1d58e918765808c82d6f1cc9413dd23954971/core/src/processing/core/PApplet.java#L91), and [so is the code](https://github.com/processing/processing/blob/dea1d58e918765808c82d6f1cc9413dd23954971/core/src/processing/core/PApplet.java#L9872).\n. Thanks @nbeloglazov, I'll try the ClojureScript version out!\n. ",
    "AndreaCrotti": "1. @nbeloglazov ok thanks yes I'll check, the weird thing is that after a while it seems that all the output that should go to the Cider repl disappears (for example just doing a \"println\").\n   Can this be related still with quil or is something else? (I only noticed it in this project)\n2. well I thought I could be able to add new shapes to an existing sketch, without having to redraw everything every time, but I'm not managing to do that so I think that maybe it's not possible?\n. 1. @nbeloglazov ok thanks yes I'll check, the weird thing is that after a while it seems that all the output that should go to the Cider repl disappears (for example just doing a \"println\").\n   Can this be related still with quil or is something else? (I only noticed it in this project)\n2. well I thought I could be able to add new shapes to an existing sketch, without having to redraw everything every time, but I'm not managing to do that so I think that maybe it's not possible?\n. ",
    "NathanSmutz": "That did the trick.  I didn't realize fun-mode allowed drawing from the mouse-dragged function.  I think you're right about multiple mouse events overwriting a single-map state before the draw funciton could execute.\n. Good deal.  Looks like the Processing project owner is on-board.\n. That did the trick.  I didn't realize fun-mode allowed drawing from the mouse-dragged function.  I think you're right about multiple mouse events overwriting a single-map state before the draw funciton could execute.\n. Good deal.  Looks like the Processing project owner is on-board.\n. ",
    "pxlpnk": "Thank you for merging! :fireworks: \n. Thank you for merging! :fireworks: \n. ",
    "blueberry": "Now I see that other methods of PShape are also missing in quil: endShape, setStroke, setFill etc...\n. And another: vertex in quil is hardcoded to use (current-graphics), while in Processing it can also work on a PShape. That use case is important for a little bit cleaner (although also non-pure) functional style...\n. Thank you.\nIs there any particular reason for not providing PShape support?\nI'll probably first experiment with PShape Java interop, and maybe create a mini clojure wrapper, and if/when that show value, I'll be glad if it is merged into quil. Even if it stays separate, I will try to make it compatible, so they can be used side to side.\n. Since I am still learning Processing, I doubt that I can provide any real help, but I will surely try to at least help with testing and reporting bugs :)\nThanks.\n. BTW, do you have any vague plans for the **start** of the migration work? A month, the end of this year, later?\n. Sure. However, I only use clj, so I am not sure about the development and testing process.\n. I'll put that on my todo list. I won't be able to do it in the following days, but will hopefully get to it eventually.\n. Now I see that other methods of PShape are also missing in quil: endShape, setStroke, setFill etc...\n. And another: vertex in quil is hardcoded to use (current-graphics), while in Processing it can also work on a PShape. That use case is important for a little bit cleaner (although also non-pure) functional style...\n. Thank you.\nIs there any particular reason for not providing PShape support?\nI'll probably first experiment with PShape Java interop, and maybe create a mini clojure wrapper, and if/when that show value, I'll be glad if it is merged into quil. Even if it stays separate, I will try to make it compatible, so they can be used side to side.\n. Since I am still learning Processing, I doubt that I can provide any real help, but I will surely try to at least help with testing and reporting bugs :)\nThanks.\n. BTW, do you have any vague plans for the **start** of the migration work? A month, the end of this year, later?\n. Sure. However, I only use clj, so I am not sure about the development and testing process.\n. I'll put that on my todo list. I won't be able to do it in the following days, but will hopefully get to it eventually.\n. ",
    "eigenhombre": "That seemed to do the trick!!!\n![screen shot 2015-11-03 at 7 35 25 am](https://cloud.githubusercontent.com/assets/382668/10909277/86fa1f76-81fd-11e5-8074-9cb886a0b144.png)\n\nThanks @nbeloglazov !\n. @nbeloglazov You are right, apparently.  I missed this:\n\n```\n>  lein run\nsmooth() can only be used inside settings()\n```\n\nSee also https://github.com/processing/processing-docs/issues/251\n\nShould we reopen, or new issue, or...?\n. @nbeloglazov -- yeah, it works (and it's gorgeous).  Thanks! I don't have time to do a PR at the moment, but maybe we should update the README / docs before closing?\n. @nbeloglazov see my PR -- seems like we're almost there.\n. That seemed to do the trick!!!\n![screen shot 2015-11-03 at 7 35 25 am](https://cloud.githubusercontent.com/assets/382668/10909277/86fa1f76-81fd-11e5-8074-9cb886a0b144.png)\n\nThanks @nbeloglazov !\n. @nbeloglazov You are right, apparently.  I missed this:\n\n```\n>  lein run\nsmooth() can only be used inside settings()\n```\n\nSee also https://github.com/processing/processing-docs/issues/251\n\nShould we reopen, or new issue, or...?\n. @nbeloglazov -- yeah, it works (and it's gorgeous).  Thanks! I don't have time to do a PR at the moment, but maybe we should update the README / docs before closing?\n. @nbeloglazov see my PR -- seems like we're almost there.\n. ",
    "SevereOverfl0w": "Made those changes for you! There may be some more updates required for applet/sketch options, but I'm not overly familiar with the api of quil to a point where I'd know what to look for.\n. How are the API docs generated, could we piggyback it at all for generating this cheat sheet do you think?\n\nI've updated the sketch options with the api from what was generated though! \n. Made those changes for you! There may be some more updates required for applet/sketch options, but I'm not overly familiar with the api of quil to a point where I'd know what to look for.\n. How are the API docs generated, could we piggyback it at all for generating this cheat sheet do you think?\n\nI've updated the sketch options with the api from what was generated though! \n. ",
    "shaunxcode": "Calling q/current-graphics inside of :settings handler yields nil for me?\n. Yep, the following works in settings:\n\n`#(.pixelDensity (quil.applet/current-applet) (.displayDensity (quil.applet/current-applet)))`\n. Calling q/current-graphics inside of :settings handler yields nil for me?\n. Yep, the following works in settings:\n\n`#(.pixelDensity (quil.applet/current-applet) (.displayDensity (quil.applet/current-applet)))`\n. ",
    "BorisKourt": "Ah alright.\n\nThanks for the details!\n. Ah alright.\n\nThanks for the details!\n. ",
    "drakezhard": "Sorry wrong repo.\n. Sorry wrong repo.\n. ",
    "gfZeng": "It's run time error in browser. when I change back to quil 2.3.0, It's working.\n\nIt seems has an global `l = 0` variable.\n. I tested at both version of `[org.clojure/clojurescript      \"1.7.228\"]` and  `[org.clojure/clojurescript      \"1.8.40\"]`, the same result --- working with `quil 2.3.0`, not working with `quil 2.4.0`\n. I also checked [quil.info js file](http://quil.info/js/main.js). There are also have a global variable `l` (search \"for(l=\")\n\nThis bug seems come from [processing-js](https://github.com/quil/processing-js/blob/master/resources/processing.js#L997) file\n. Yeah, The error throws from [js->clj](https://github.com/clojure/clojurescript/blob/master/src%2Fmain%2Fcljs%2Fcljs%2Fcore.cljs#L9613),\nIt seems clojurescript emmit `PersistentArrayMap` to global `l` in my project.\n. Yeah, I use this way, currently.\n. IMO. the better way is fix processing.js\n. That right. I agree. \nExpecting the  next version.\n. It's run time error in browser. when I change back to quil 2.3.0, It's working.\n\nIt seems has an global `l = 0` variable.\n. I tested at both version of `[org.clojure/clojurescript      \"1.7.228\"]` and  `[org.clojure/clojurescript      \"1.8.40\"]`, the same result --- working with `quil 2.3.0`, not working with `quil 2.4.0`\n. I also checked [quil.info js file](http://quil.info/js/main.js). There are also have a global variable `l` (search \"for(l=\")\n\nThis bug seems come from [processing-js](https://github.com/quil/processing-js/blob/master/resources/processing.js#L997) file\n. Yeah, The error throws from [js->clj](https://github.com/clojure/clojurescript/blob/master/src%2Fmain%2Fcljs%2Fcljs%2Fcore.cljs#L9613),\nIt seems clojurescript emmit `PersistentArrayMap` to global `l` in my project.\n. Yeah, I use this way, currently.\n. IMO. the better way is fix processing.js\n. That right. I agree. \nExpecting the  next version.\n. ",
    "simon-katz": "Hi Nikita.\n\nThat works\u2026 sometimes. :-)\n\nThe `q/get-sketch-by-id` is unreliable, often returning nil. This seems to happen when I have had more than one sketch displayed and am trying to exit the second one (but only sometimes).\n\nSome Googling suggested that other people had similar problems with Processing's `getInstanceById` (which is called by `q/get-sketch-by-id`).\n\nI've worked around it by holding onto the sketch when I create it, so I can do:\n\n``` clojurescript\n(q/with-sketch @saved-sketch-atom\n  (q/exit))\n```\n\nIf you are interested, my new code at and around https://github.com/simon-katz/nomisdraw/blob/5d21f77883ebacfc2a1c4d9d5da19141cce82fd0/src/cljs/nomisdraw/utils/nomis_quil_on_reagent.cljs#L72-L73\n\nSo I'm now only using the public API, which was my goal.\n\nThanks for your help.\n. Hi Nikita.\n\nThat works\u2026 sometimes. :-)\n\nThe `q/get-sketch-by-id` is unreliable, often returning nil. This seems to happen when I have had more than one sketch displayed and am trying to exit the second one (but only sometimes).\n\nSome Googling suggested that other people had similar problems with Processing's `getInstanceById` (which is called by `q/get-sketch-by-id`).\n\nI've worked around it by holding onto the sketch when I create it, so I can do:\n\n``` clojurescript\n(q/with-sketch @saved-sketch-atom\n  (q/exit))\n```\n\nIf you are interested, my new code at and around https://github.com/simon-katz/nomisdraw/blob/5d21f77883ebacfc2a1c4d9d5da19141cce82fd0/src/cljs/nomisdraw/utils/nomis_quil_on_reagent.cljs#L72-L73\n\nSo I'm now only using the public API, which was my goal.\n\nThanks for your help.\n. ",
    "magnetophon": "@nbeloglazov\nThanks, I'll try that.\nWhat do you mean by ''Would you be interested in adding it?''\n. @nbeloglazov Sounds good to me!\n. Thanks for looking in to it, and for providing a workaround.\n. @nbeloglazov\nThanks, I'll try that.\nWhat do you mean by ''Would you be interested in adding it?''\n. @nbeloglazov Sounds good to me!\n. Thanks for looking in to it, and for providing a workaround.\n. ",
    "Cynlic": "Also yes, I realize that I can use clojure's (rand) function -- I just wanted to put this up here. \n. Ah! I realized after opening this issue that most of the quil functions didn't work in the repl but I hadn't thought of redefining the draw function in the repl itself. Many thanks for the tip. \n. Also yes, I realize that I can use clojure's (rand) function -- I just wanted to put this up here. \n. Ah! I realized after opening this issue that most of the quil functions didn't work in the repl but I hadn't thought of redefining the draw function in the repl itself. Many thanks for the tip. \n. ",
    "soulawaker": "Thank you, Nikita. It worked!\n. Thank you, Nikita. It worked!\n. ",
    "satchit8": "Thanks for taking a look.\r\n\r\nAFAICT, the originally suggested form using instanceField form:\r\n\r\n```clojure\r\n  (.-fillColor (current-graphics))\r\n```\r\n\r\nworks for both Clojure and ClojureScript in this case.  I ran some tests with slightly modified new projects for Clojure and ClojureScript with success.  It's possible I messed up though :)\r\n\r\nAlso the Java Interop docs at clojure.org say:\r\n\r\n\r\n    The instanceField form is preferred for fields and required if both a field and a \r\n    0-argument method of the same name exist.\r\n\r\nwhere IIUC instanceField form refers to:\r\n\r\n``` clojure\r\n (.-instanceField instance)\r\n```\r\n\r\nAt least in PGraphics.java, fillColor looks like a field to me:\r\n\r\n``` java\r\n  public int fillColor = 0xffFFFFFF;\r\n```\r\n\r\nI don't understand why for Clojure in this case, the instanceMember form:\r\n\r\n``` clojure\r\n  (.fillColor (current-graphics))\r\n```\r\n\r\nis preferred.  Though I think I undertand why it would work, as the Java Interop docs say:\r\n\r\n    The instance member form works for both fields and methods.\r\n\r\nPlease help me understand.\r\n. Does the additional commit look appropriate?\r\n\r\nAs for confirming that the tests were enabled, I tried:\r\n\r\n    lein with-profile cljs-testing ring server\r\n\r\nthen observed some results in a browser window, but didn't catch whether the tests in question ran and what the results were.. Thanks for the explanation.  Had success in verifying your instructions :). Thanks for taking a look.\r\n\r\nAFAICT, the originally suggested form using instanceField form:\r\n\r\n```clojure\r\n  (.-fillColor (current-graphics))\r\n```\r\n\r\nworks for both Clojure and ClojureScript in this case.  I ran some tests with slightly modified new projects for Clojure and ClojureScript with success.  It's possible I messed up though :)\r\n\r\nAlso the Java Interop docs at clojure.org say:\r\n\r\n\r\n    The instanceField form is preferred for fields and required if both a field and a \r\n    0-argument method of the same name exist.\r\n\r\nwhere IIUC instanceField form refers to:\r\n\r\n``` clojure\r\n (.-instanceField instance)\r\n```\r\n\r\nAt least in PGraphics.java, fillColor looks like a field to me:\r\n\r\n``` java\r\n  public int fillColor = 0xffFFFFFF;\r\n```\r\n\r\nI don't understand why for Clojure in this case, the instanceMember form:\r\n\r\n``` clojure\r\n  (.fillColor (current-graphics))\r\n```\r\n\r\nis preferred.  Though I think I undertand why it would work, as the Java Interop docs say:\r\n\r\n    The instance member form works for both fields and methods.\r\n\r\nPlease help me understand.\r\n. Does the additional commit look appropriate?\r\n\r\nAs for confirming that the tests were enabled, I tried:\r\n\r\n    lein with-profile cljs-testing ring server\r\n\r\nthen observed some results in a browser window, but didn't catch whether the tests in question ran and what the results were.. Thanks for the explanation.  Had success in verifying your instructions :). ",
    "vsmart": "thanks @Norgat! made it work by using the `:mouse-pressed` and `:mouse-released` properties in `defsketch` now. thanks for the pointer!. thanks @Norgat! made it work by using the `:mouse-pressed` and `:mouse-released` properties in `defsketch` now. thanks for the pointer!. ",
    "prakhar1989": "Ok, I seem to have understood the problem (I think).\r\n\r\nIn the video, in the draw method, what Dan does is that for each star, calls the `update` and `show` function one after the other.\r\n\r\n```javascript\r\nvoid draw() {\r\n  for (star in stars) {\r\n     star.update();\r\n     star.show();\r\n  }\r\n}\r\n```\r\n\r\nWhereas in the functional mode where I've defined state to be a list of stars, first the `update` is called for each star, *and then* the `draw` is called for each star. Is there a way to achieve this in functional mode?. Nevermind, found the error. Sorry for the spam.. Hi @nbeloglazov,\r\n\r\nThanks for writing back! Having a more performant version of this completely makes sense and I would love to make a new PR. If you don't mind, can you give me ideas on how I can optimize the `map` and `reduce` portion of the above code?\r\n\r\nEDIT: Nevermind, I found a version of `norm` in the [existing code](https://github.com/quil/quil/blob/master/src/cljc/quil/middlewares/navigation_3d.cljc#L87)\r\n\r\n```clojure\r\n(defn- v-normalize\r\n  \"Normalize vector, returning vector\r\n  which has same direction but with norm equals to 1.\"\r\n  [v]\r\n  (let [norm (->> (map q/sq v)\r\n                  (apply +)\r\n                  (q/sqrt))]\r\n    (v-mult v (/ norm))))\r\n```. Thanks @nbeloglazov and @GoToLoop for the pointers! I'll raise a new PR shortly incorporating the changes you've suggested. Closing this for now.. Sure that makes sense. One question though, I can't get the test in `deftest` to run as I get a `NullPointerException` on this line ` (let [theta (.random (ap/current-applet) TWO-PI)]`. \r\n\r\nI'm sure there's a reason why the code is not using `(rand)` from `clojure.core`. Also, should the code that I added be fine with using it? Thanks!\r\n. Haha, no problem \ud83d\ude01\r\n\r\nI've moved the tests into the correct section, so let me know if there's anything missing . Awesome! Thanks for guiding me through this change. Super happy to have contributed to Quil! \ud83d\udc4d . Ok, I seem to have understood the problem (I think).\r\n\r\nIn the video, in the draw method, what Dan does is that for each star, calls the `update` and `show` function one after the other.\r\n\r\n```javascript\r\nvoid draw() {\r\n  for (star in stars) {\r\n     star.update();\r\n     star.show();\r\n  }\r\n}\r\n```\r\n\r\nWhereas in the functional mode where I've defined state to be a list of stars, first the `update` is called for each star, *and then* the `draw` is called for each star. Is there a way to achieve this in functional mode?. Nevermind, found the error. Sorry for the spam.. Hi @nbeloglazov,\r\n\r\nThanks for writing back! Having a more performant version of this completely makes sense and I would love to make a new PR. If you don't mind, can you give me ideas on how I can optimize the `map` and `reduce` portion of the above code?\r\n\r\nEDIT: Nevermind, I found a version of `norm` in the [existing code](https://github.com/quil/quil/blob/master/src/cljc/quil/middlewares/navigation_3d.cljc#L87)\r\n\r\n```clojure\r\n(defn- v-normalize\r\n  \"Normalize vector, returning vector\r\n  which has same direction but with norm equals to 1.\"\r\n  [v]\r\n  (let [norm (->> (map q/sq v)\r\n                  (apply +)\r\n                  (q/sqrt))]\r\n    (v-mult v (/ norm))))\r\n```. Thanks @nbeloglazov and @GoToLoop for the pointers! I'll raise a new PR shortly incorporating the changes you've suggested. Closing this for now.. Sure that makes sense. One question though, I can't get the test in `deftest` to run as I get a `NullPointerException` on this line ` (let [theta (.random (ap/current-applet) TWO-PI)]`. \r\n\r\nI'm sure there's a reason why the code is not using `(rand)` from `clojure.core`. Also, should the code that I added be fine with using it? Thanks!\r\n. Haha, no problem \ud83d\ude01\r\n\r\nI've moved the tests into the correct section, so let me know if there's anything missing . Awesome! Thanks for guiding me through this change. Super happy to have contributed to Quil! \ud83d\udc4d . ",
    "happy-lisper": "Hi,\r\nThe repo is here https://github.com/coreasync/resize . Yes, I tried 2.6.0 and there is no difference.\r\n\r\nThis is what I see https://github.com/coreasync/resize/blob/master/actual.png were as in 2.3.0 I am getting this https://github.com/coreasync/resize/blob/master/with2.3.0.png\r\n\r\nIt could be other way around, that something got fixes in 2.4.0 though. However, it is still weird that I specify `:size [220 220]` which matches size of https://github.com/coreasync/resize/blob/master/clojure.png yet it does not cover all the background.\r\n\r\nBest,\r\nAndy\r\n\r\n\r\n\r\n\r\n. Hi,\r\nThe repo is here https://github.com/coreasync/resize . Yes, I tried 2.6.0 and there is no difference.\r\n\r\nThis is what I see https://github.com/coreasync/resize/blob/master/actual.png were as in 2.3.0 I am getting this https://github.com/coreasync/resize/blob/master/with2.3.0.png\r\n\r\nIt could be other way around, that something got fixes in 2.4.0 though. However, it is still weird that I specify `:size [220 220]` which matches size of https://github.com/coreasync/resize/blob/master/clojure.png yet it does not cover all the background.\r\n\r\nBest,\r\nAndy\r\n\r\n\r\n\r\n\r\n. ",
    "jtoy": "interesting. changing it to draw didn't help. but adding a sleep after calling defsketch does, this works for 5 seconds before shutting down:\r\n\r\n    #!/usr/bin/env boot\r\n    (set-env! :dependencies '[[quil \"2.6.0\"]])\r\n    (require '[quil.core :as q])\r\n\r\n    (defn draw []\r\n      (println \"in draw\")\r\n      (q/background 111 111 111 )  )\r\n\r\n    (defn -main  [& args]\r\n      (println \"starting\")\r\n      (q/defsketch my-art\r\n        :size [800 800]\r\n       :draw draw)\r\n    (Thread/sleep 5000)\r\n     )\r\n\r\nI thought that by using drawing, that should take over the program execution because it should be continuously called.  If I don't add the sleep ,the println inside of draw never gets called.   The println in main always gets called though.  There must be a more appropriate way to do this. \r\n\r\n. FYI, on mac, adding sleep works, and on linux headless mode it works fine.  . interesting. changing it to draw didn't help. but adding a sleep after calling defsketch does, this works for 5 seconds before shutting down:\r\n\r\n    #!/usr/bin/env boot\r\n    (set-env! :dependencies '[[quil \"2.6.0\"]])\r\n    (require '[quil.core :as q])\r\n\r\n    (defn draw []\r\n      (println \"in draw\")\r\n      (q/background 111 111 111 )  )\r\n\r\n    (defn -main  [& args]\r\n      (println \"starting\")\r\n      (q/defsketch my-art\r\n        :size [800 800]\r\n       :draw draw)\r\n    (Thread/sleep 5000)\r\n     )\r\n\r\nI thought that by using drawing, that should take over the program execution because it should be continuously called.  If I don't add the sleep ,the println inside of draw never gets called.   The println in main always gets called though.  There must be a more appropriate way to do this. \r\n\r\n. FYI, on mac, adding sleep works, and on linux headless mode it works fine.  . ",
    "kchair": "So I dug around a bit and extracted the JNI lib files from all the JARs in `/Applications/Processing.py/libraries/processing/opengl/` into the `natives/macosx-universal` directory, which allows me to run the P3D renderer. . Hmm, I thought I had copied it from Processing.app. I was just trying it out to see what it was like. It used to be a standalone package, but it is now bundled as a mode in Processing. \r\n\r\nIf you're interested in the standalone package (which include the libraries), there are some download links here:\r\nhttp://py.processing.org/tutorials/command-line/\r\n\r\nHere is the list of files from `natives/macosx-universal`:\r\n\r\n```\r\nnatives/\r\n\u2514\u2500\u2500 macosx-universal/\r\n    \u251c\u2500\u2500 libgluegen-rt.jnilib\r\n    \u251c\u2500\u2500 libjogl_desktop.jnilib\r\n    \u251c\u2500\u2500 libjogl_mobile.jnilib\r\n    \u251c\u2500\u2500 libnativewindow_awt.jnilib\r\n    \u251c\u2500\u2500 libnativewindow_macosx.jnilib\r\n    \u2514\u2500\u2500 libnewt.jnilib\r\n```. Hi @nbeloglazov, thanks for reply. After seeing your comment, I tried building some sketches and was able to find an old processing JAR file I had put in `/Library/Java/Extensions` a while ago, which seemed to be the root cause of the issue. Removing the file, allowed me to compile sketches without the natives directory. Thanks for your help.. Downgrading to quil 2.3.0 seems to solve this issue for me.. So I dug around a bit and extracted the JNI lib files from all the JARs in `/Applications/Processing.py/libraries/processing/opengl/` into the `natives/macosx-universal` directory, which allows me to run the P3D renderer. . Hmm, I thought I had copied it from Processing.app. I was just trying it out to see what it was like. It used to be a standalone package, but it is now bundled as a mode in Processing. \r\n\r\nIf you're interested in the standalone package (which include the libraries), there are some download links here:\r\nhttp://py.processing.org/tutorials/command-line/\r\n\r\nHere is the list of files from `natives/macosx-universal`:\r\n\r\n```\r\nnatives/\r\n\u2514\u2500\u2500 macosx-universal/\r\n    \u251c\u2500\u2500 libgluegen-rt.jnilib\r\n    \u251c\u2500\u2500 libjogl_desktop.jnilib\r\n    \u251c\u2500\u2500 libjogl_mobile.jnilib\r\n    \u251c\u2500\u2500 libnativewindow_awt.jnilib\r\n    \u251c\u2500\u2500 libnativewindow_macosx.jnilib\r\n    \u2514\u2500\u2500 libnewt.jnilib\r\n```. Hi @nbeloglazov, thanks for reply. After seeing your comment, I tried building some sketches and was able to find an old processing JAR file I had put in `/Library/Java/Extensions` a while ago, which seemed to be the root cause of the issue. Removing the file, allowed me to compile sketches without the natives directory. Thanks for your help.. Downgrading to quil 2.3.0 seems to solve this issue for me.. ",
    "jave": "Nikita Beloglazov <notifications@github.com> writes:\n\n> Hi Joakim. What doesn't work exactly? There is an error or you simply can't see SVG being drawn? Does it work without navigation-3d middleware?\n\nThe svg is drawn once, and then the svg disapears on the next frame I\nthink, and then emacs/cider starts beeping. I guess because null pointer\nor something.\n\nThe thing does work without middleware.\n\nAlso, I have a larger example where i move the camera around in a forest\nof svg:s, and this works with plain 3d rendering, but not with the\nnavigation-3d middleware.\n\nIt's odd, I agree.\n\n>\n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub, or mute the thread.\n>\n-- \nJoakim Verona\njoakim@verona.se\n\n. Ok, I will commit my sketch to a repo somewhere. Let me get back on\nthat.\n\nMeanwhile, the svg im using is drawn with Inkscape and is super simple.\nI also noticed the slowdown and moved the svg loading to setup.\n\nMy OS is Fedora 25.\n\n/Joakim\n\nNikita Beloglazov <notifications@github.com> writes:\n\n> Can you provide your SVG? And what OS are you running on? I tried on linux and it worked. It was very slow, probably because load-shape took long time so FPS was around 5. And then I moved shape load to setup and it improved\n> drastically:\n>\n> (defn setup []\n>   {:shape (q/load-shape \"family_tree_01.svg\")})\n>\n> (defn draw [state]\n>   (q/background 255)\n>   (q/lights)\n>   (q/fill 150 100 150)\n>   (q/sphere 75)\n>   (doseq [pos [[150 0 0] [-150 0 0]\n>                [0 150 0] [0 -150 0]\n>                [0 0 150] [0 0 -150]]]\n>     (q/with-translation pos\n>       (q/box 75)))\n>    (q/shape (:shape state)))\n>\n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub, or mute the thread.\n>\n-- \nJoakim Verona\njoakim@verona.se\n\n. Ok, I tried using the family tree svg you used, and I still have the problem.\r\n\r\nSo maybe theres some problem with my environment?\r\n\r\nThe project was created using the quil lein template.\r\n. Nikita Beloglazov <notifications@github.com> writes:\n\n> Hi Joakim. What doesn't work exactly? There is an error or you simply can't see SVG being drawn? Does it work without navigation-3d middleware?\n\nThe svg is drawn once, and then the svg disapears on the next frame I\nthink, and then emacs/cider starts beeping. I guess because null pointer\nor something.\n\nThe thing does work without middleware.\n\nAlso, I have a larger example where i move the camera around in a forest\nof svg:s, and this works with plain 3d rendering, but not with the\nnavigation-3d middleware.\n\nIt's odd, I agree.\n\n>\n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub, or mute the thread.\n>\n-- \nJoakim Verona\njoakim@verona.se\n\n. Ok, I will commit my sketch to a repo somewhere. Let me get back on\nthat.\n\nMeanwhile, the svg im using is drawn with Inkscape and is super simple.\nI also noticed the slowdown and moved the svg loading to setup.\n\nMy OS is Fedora 25.\n\n/Joakim\n\nNikita Beloglazov <notifications@github.com> writes:\n\n> Can you provide your SVG? And what OS are you running on? I tried on linux and it worked. It was very slow, probably because load-shape took long time so FPS was around 5. And then I moved shape load to setup and it improved\n> drastically:\n>\n> (defn setup []\n>   {:shape (q/load-shape \"family_tree_01.svg\")})\n>\n> (defn draw [state]\n>   (q/background 255)\n>   (q/lights)\n>   (q/fill 150 100 150)\n>   (q/sphere 75)\n>   (doseq [pos [[150 0 0] [-150 0 0]\n>                [0 150 0] [0 -150 0]\n>                [0 0 150] [0 0 -150]]]\n>     (q/with-translation pos\n>       (q/box 75)))\n>    (q/shape (:shape state)))\n>\n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub, or mute the thread.\n>\n-- \nJoakim Verona\njoakim@verona.se\n\n. Ok, I tried using the family tree svg you used, and I still have the problem.\r\n\r\nSo maybe theres some problem with my environment?\r\n\r\nThe project was created using the quil lein template.\r\n. ",
    "carcigenicate": "@nbeloglazov\nAwesome, thank you! . @nbeloglazov\nAwesome, thank you! . ",
    "aljones15": "ok I will try both of those tomorrow. thanks for the update. I was actually using an index based look up before map-indexed then neighbors would (get cells (- index 1) for left etc however in that case I had to make checks for if border cases i.e. to far right or to far left. or on top etc. the new structure looks nice.. you were right it was the look up data structures I need to spend more time with them thanks. First time I've ever seen it really work. will upload to github soon.. ok I will try both of those tomorrow. thanks for the update. I was actually using an index based look up before map-indexed then neighbors would (get cells (- index 1) for left etc however in that case I had to make checks for if border cases i.e. to far right or to far left. or on top etc. the new structure looks nice.. you were right it was the look up data structures I need to spend more time with them thanks. First time I've ever seen it really work. will upload to github soon.. ",
    "ror6ax": "Fedora 25, my laptop. I'm surprised since it looks like quil does not recognize I run graphic environment.... Is there a way to render directly into file? `-o filename.png`  kind of thing.. ```\r\n(ns core\r\n  (:use quil.core))\r\n\r\n\r\n(defn setup [])\r\n\r\n\r\n(defn draw []\r\n  (background 153)\r\n  (line 0 0 300 300)\r\n  (exit))\r\n\r\n\r\n(defsketch circles\r\n  :title \"Circles\"\r\n  :setup setup\r\n\r\n  :renderer :pdf\r\n  :output-file \"./tt.pdf\"\r\n\r\n  :draw draw\r\n  :size [300 300])\r\n\r\n(defn -main [] ())\r\n```\r\n\r\nTried :output-file. Same result - error, no pdf anywhere.. Fedora 25, my laptop. I'm surprised since it looks like quil does not recognize I run graphic environment.... Is there a way to render directly into file? `-o filename.png`  kind of thing.. ```\r\n(ns core\r\n  (:use quil.core))\r\n\r\n\r\n(defn setup [])\r\n\r\n\r\n(defn draw []\r\n  (background 153)\r\n  (line 0 0 300 300)\r\n  (exit))\r\n\r\n\r\n(defsketch circles\r\n  :title \"Circles\"\r\n  :setup setup\r\n\r\n  :renderer :pdf\r\n  :output-file \"./tt.pdf\"\r\n\r\n  :draw draw\r\n  :size [300 300])\r\n\r\n(defn -main [] ())\r\n```\r\n\r\nTried :output-file. Same result - error, no pdf anywhere.. ",
    "4nd1m4n": "Hey, sorry for the long wait, but i was quite busy.\r\nIt strikes me how it is, that in the online editor you used it works just fine. But if i put your exact code in my project on my own computer with \u00bblein cljsbuild auto\u00ab in a terminal, then it is compiled just fine, but i don't see anything on the canvas but rather have an error message.\r\n\r\nUncaught DOMException: Failed to execute 'texImage2D' on 'WebGLRenderingContext': Tainted canvases may not be loaded.\r\n\r\nSo is my processing.js to old or something?. Ha! Thank you guys! Now it just works. With Firefox out of the box and with Chrome when i load it via http server.\r\n\r\nI would have never figured that out that fast. :D. Hey, sorry for the long wait, but i was quite busy.\r\nIt strikes me how it is, that in the online editor you used it works just fine. But if i put your exact code in my project on my own computer with \u00bblein cljsbuild auto\u00ab in a terminal, then it is compiled just fine, but i don't see anything on the canvas but rather have an error message.\r\n\r\nUncaught DOMException: Failed to execute 'texImage2D' on 'WebGLRenderingContext': Tainted canvases may not be loaded.\r\n\r\nSo is my processing.js to old or something?. Ha! Thank you guys! Now it just works. With Firefox out of the box and with Chrome when i load it via http server.\r\n\r\nI would have never figured that out that fast. :D. ",
    "xfcjscn": "Thanks.. Thanks.. ",
    "mefuru": "Thanks Nikita, I'll ask there.. Hi, to add colour cell by cell, you'd need to use the (q/set-pixel) function, rather than (q/pixel) and to set the fill colour, use the (q/fill) function rather than (q/colour).. Thanks Nikita, I'll ask there.. Hi, to add colour cell by cell, you'd need to use the (q/set-pixel) function, rather than (q/pixel) and to set the fill colour, use the (q/fill) function rather than (q/colour).. ",
    "heyarne": "I just realized my problem came from a slightly different angle; I had an erroneous call in `draw-state`, where I was calling the fill function like `(q/fill [0 255 255])`. The vector argument is wrong of course, but I didn't realize it at the time - so I guess stderr is not redirected at times? Thanks for the hint about the middleware though.\r\n\r\nI tried adding the original `*err*` binding to the middleware to make it more robust but failed unfortunately. Any idea why that is? Thanks so much for the great library by the way, I'm enjoying it a lot!. I just realized my problem came from a slightly different angle; I had an erroneous call in `draw-state`, where I was calling the fill function like `(q/fill [0 255 255])`. The vector argument is wrong of course, but I didn't realize it at the time - so I guess stderr is not redirected at times? Thanks for the hint about the middleware though.\r\n\r\nI tried adding the original `*err*` binding to the middleware to make it more robust but failed unfortunately. Any idea why that is? Thanks so much for the great library by the way, I'm enjoying it a lot!. ",
    "elect000": "Thanks for your Teaching!!!\r\n\r\n![2017-10-25](https://user-images.githubusercontent.com/18697629/31982213-87643054-b992-11e7-8e52-883e2485f5b8.png)\r\n. Thanks for your Teaching!!!\r\n\r\n![2017-10-25](https://user-images.githubusercontent.com/18697629/31982213-87643054-b992-11e7-8e52-883e2485f5b8.png)\r\n. ",
    "Vaguery": "Ah. Is `q/save-frame` not supported by ClojureScript? https://github.com/quil/quil/wiki/List-of-available-functions-in-ClojureScript. Whew. I checked, and indeed the anti-spam settings in Safari were also blocking the new tabs.\r\n\r\nBut you're right; I should probably be maintaining a CLJ branch of my project to save movie frames to disk.. Ah. Is `q/save-frame` not supported by ClojureScript? https://github.com/quil/quil/wiki/List-of-available-functions-in-ClojureScript. Whew. I checked, and indeed the anti-spam settings in Safari were also blocking the new tabs.\r\n\r\nBut you're right; I should probably be maintaining a CLJ branch of my project to save movie frames to disk.. ",
    "shaunlebron": "If you're referring to what the MDN example was doing, it's actually wrong\u2014 nothing is really done when setting `window.devicePixelRatio`.  I fixed the example and description after double-checking the spec:\r\n\r\nhttps://developer.mozilla.org/en-US/docs/Web/API/Window/devicePixelRatio (fixed)\r\n\r\nSo, as far as quil goes, `pixelDensity()` should just keep the given value as internal state and use it for setting the canvas `style` size and scaling the coordinate system for both drawing and mouse events.\r\n\r\nI'll look at how to do this for Quil, but feel free to take if the new MDN example clears it up enough.  It seems straightforward, but I'll need to spend a little time learning what Quil is doing.. actually, I think it makes more sense to add this to processing.js first:\r\nhttps://github.com/processing-js/processing-js/issues/289. If you're referring to what the MDN example was doing, it's actually wrong\u2014 nothing is really done when setting `window.devicePixelRatio`.  I fixed the example and description after double-checking the spec:\r\n\r\nhttps://developer.mozilla.org/en-US/docs/Web/API/Window/devicePixelRatio (fixed)\r\n\r\nSo, as far as quil goes, `pixelDensity()` should just keep the given value as internal state and use it for setting the canvas `style` size and scaling the coordinate system for both drawing and mouse events.\r\n\r\nI'll look at how to do this for Quil, but feel free to take if the new MDN example clears it up enough.  It seems straightforward, but I'll need to spend a little time learning what Quil is doing.. actually, I think it makes more sense to add this to processing.js first:\r\nhttps://github.com/processing-js/processing-js/issues/289. ",
    "plotinus5": "Thank you!\n\n\nBest,\n\nMarcus.\n\n________________________________\nDe : Nikita Beloglazov <notifications@github.com>\nEnvoy\u00e9 : samedi 28 octobre 2017 21:53\n\u00c0 : quil/quil\nCc : Marcus Missal; Author\nObjet : Re: [quil/quil] Error message (#222)\n\n\nHi. This error says that your java version is too old: https://stackoverflow.com/questions/22489398/unsupported-major-minor-version-52-0 Quil works only on jdk 1.8 since version 2.5.0: https://github.com/quil/quil/blob/master/RELEASE-NOTES.md#250\n\nSo you either have to update your jdk or use older version of quil.\n\n-\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub<https://github.com/quil/quil/issues/222#issuecomment-340215670>, or mute the thread<https://github.com/notifications/unsubscribe-auth/AMpSrwGVaeXEO6umpMM14GziQkLXQ2aMks5sw4YjgaJpZM4QJ25O>.\n. Thank you!\n\n\nBest,\n\nMarcus.\n\n________________________________\nDe : Nikita Beloglazov <notifications@github.com>\nEnvoy\u00e9 : samedi 28 octobre 2017 21:53\n\u00c0 : quil/quil\nCc : Marcus Missal; Author\nObjet : Re: [quil/quil] Error message (#222)\n\n\nHi. This error says that your java version is too old: https://stackoverflow.com/questions/22489398/unsupported-major-minor-version-52-0 Quil works only on jdk 1.8 since version 2.5.0: https://github.com/quil/quil/blob/master/RELEASE-NOTES.md#250\n\nSo you either have to update your jdk or use older version of quil.\n\n-\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub<https://github.com/quil/quil/issues/222#issuecomment-340215670>, or mute the thread<https://github.com/notifications/unsubscribe-auth/AMpSrwGVaeXEO6umpMM14GziQkLXQ2aMks5sw4YjgaJpZM4QJ25O>.\n. ",
    "mainej": "It looks like [this file](https://github.com/quil/quil/blob/master/test/cljc/snippets/rendering.cljc) is where the `hint` tests live. Is that what you were thinking?\r\n\r\nTo be honest, I can't get the quil tests to compile. (`java.lang.UnsupportedClassVersionError: processing/core/PApplet : Unsupported major.minor version 52.0`) I'm hesitant to add tests without being able to run them. What do you think?. I was able to install Java 8 and added tests that ensure that `:enable-async-saveframe` and `:disable-async-saveframe` can resolve to their corresponding values in `processing.core.PConstants`.\r\n\r\nI also ran the following manually, which doesn't crash:\r\n\r\n```clj\r\n(q/hint :disable-async-saveframe)\r\n(q/ellipse 250 250 400 200)\r\n(q/save \"test_ellipse.tif\")\r\n```\r\n\r\nLet me know if there are other tests you'd like to see.\r\n. Are you asking whether `DISABLE_ASYNC_SAVEFRAME` actually does anything? The answer is yes. I was saving files in a tight loop, and the bottom half of them was often pure black. I think I was overwriting some shared frame buffer in Processing's background thread before it had finished saving. `DISABLE_ASYNC_SAVEFRAME` fixed the problem. See https://github.com/processing/processing/issues/4578 for an example of other people with the same problem.\r\n\r\nRegardless of all that though, aren't we getting into testing/benchmarking Processing itself, not quil?\r\n. It looks like [this file](https://github.com/quil/quil/blob/master/test/cljc/snippets/rendering.cljc) is where the `hint` tests live. Is that what you were thinking?\r\n\r\nTo be honest, I can't get the quil tests to compile. (`java.lang.UnsupportedClassVersionError: processing/core/PApplet : Unsupported major.minor version 52.0`) I'm hesitant to add tests without being able to run them. What do you think?. I was able to install Java 8 and added tests that ensure that `:enable-async-saveframe` and `:disable-async-saveframe` can resolve to their corresponding values in `processing.core.PConstants`.\r\n\r\nI also ran the following manually, which doesn't crash:\r\n\r\n```clj\r\n(q/hint :disable-async-saveframe)\r\n(q/ellipse 250 250 400 200)\r\n(q/save \"test_ellipse.tif\")\r\n```\r\n\r\nLet me know if there are other tests you'd like to see.\r\n. Are you asking whether `DISABLE_ASYNC_SAVEFRAME` actually does anything? The answer is yes. I was saving files in a tight loop, and the bottom half of them was often pure black. I think I was overwriting some shared frame buffer in Processing's background thread before it had finished saving. `DISABLE_ASYNC_SAVEFRAME` fixed the problem. See https://github.com/processing/processing/issues/4578 for an example of other people with the same problem.\r\n\r\nRegardless of all that though, aren't we getting into testing/benchmarking Processing itself, not quil?\r\n. "
}