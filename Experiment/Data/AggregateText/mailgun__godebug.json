{
    "jeremyschlatter": "@glycerine Thanks! I've updated the README. Let me know if you have any feedback.\n. @klizhentas \n. @glycerine Thanks for the bug report. I just pushed a patch. Can you verify it fixed the problem?\n. Thanks for the report. I'm hoping that fixing this will just be a matter of configuring [loader](https://godoc.org/golang.org/x/tools/go/loader) correctly. I'll look into it tonight.\n. @glycerine Try again at 7e8da1d0152ab55f6cd92da7e66a287da7cbdbca\n. The tests were parallelized in 5e8843d0b97f4a4889d22a0b13cba5462a397dc8\n. That's a nice idea. I had been working on a version that throws away the generated code every time, but I think something like this can work.\n\nWe can do it without rewriting import paths, too. `$GOPATH` can point to multiple directories. We can have a special `godebug` directory that contains generated source in `godebug/src` and compiled versions in `godebug/pkg`. Then when the user runs `godebug <run | test | build>`, we can set `GOPATH=<godebug-dir>:$GOPATH` in the environment for the `go` command and it will use the debug-instrumented packages instead of the normal ones. This avoids both regenerating and recompiling code for packages that haven't changed.\n\nI want godebug to support instrumenting a subset of the packages in the program, though, and that subset can be different each time the user runs the command. So I want the `go` command to ignore any packages in the `godebug` directory that the user has not chosen to instrument for this run. My proposal for that is to recursively hide all of the subdirectories of the `godebug` directory, probably by prepending '.' to their names, and then temporarily unhiding the directories we want to instrument just before running the `go` command.\n\nA downside of my proposal is that concurrent runs of the godebug tool will interfere with each other. One workaround for that is to have godebug check a lock file on startup, and if it finds another instance running it does all of its work in a new temporary directory.\n. @glycerine good point. I thought about this a bit and have two proposals: \n1. `godebug build` always outputs a binary file that ends in \".godebug\"\n2. The godebug library has an `init()` function that prints a prompt and waits for confirmation before continuing. This prompt is disabled for any `godebug test` and `godebug run` commands that do not produce binaries. Example prompt is something like:\n\n> Welcome to godebug!\n> For help, type \"help\". To run the program until the first breakpoint, type \"run\".\n> (godebug) _\n\nIf stdin is closed, the program is halted.\n\nThoughts?\n. @omeid that's a good idea. A downside of GOPATH directory per package is that it results in a quadratic search for packages. For example, if a build transitively includes 100 packages and all of them are godebug-enabled, then the `go` tool will do 100 package lookups that each check on average 50 directories.\n\nBut even for 100 packages this isn't much work. It would take thousands of packages, all instrumented in the same build, for this to become a problem. That seems unrealistic for now.\n. Another factor worth noting: the `go` tool supports packages outside of the GOPATH workspace. It would be nice for godebug to support them, too. I think we should use temporary directories for that case.\n. @omeid ah, I think I misunderstood your suggestion. Is this what you are envisioning?\n\n```\nmy-real-gopath/\n    src/\n        pkg1/\n        pkg2/\n        pkg3/\n    pkg/\n        pkg1.a\n        pkg2.a\n        pkg3.a\ngodebug/\n    src/\n        pkg1/\n        pkg2/\n        pkg3/\n    pkg/\n        pkg1.a\n        pkg2.a\n        pkg3.a\ntmp/\n    synthesized-gopath-1/\n        src/\n            pkg2/  <- symlink to godebug/src/pkg2\n            pkg3/  <- symlink to godebug/src/pkg3\n        pkg/\n            pkg2.a  <- symlink to godebug/pkg/pkg2.a\n            pkg3.a  <- symlink to godebug/pkg/pkg3.a\n    synthesized-gopath-2/\n        src/\n            pkg3/  <- symlink to godebug/src/pkg3\n        pkg/\n            pkg3.a  <- symlink to godebug/pkg/pkg3.a\n```\n\nEach time godebug runs it generates a temporary GOPATH directory that contains symlinks to only the packages that we want to instrument, then prepends that directory to the user's GOPATH. The `go` tool does at most one extra lookup for each package.\n\n^ This is cleaner than what I was thinking. Is this the same thing you were imagining?\n. `godebug run` and `godebug test` have now been implemented, using temporary directories for now.\n\nrun: 5e8843d0b97f4a4889d22a0b13cba5462a397dc8\ntest: b1c7171d241751afc353bda8ffe628b167b41708\n. Cool, thanks for the pointer.\n. After looking through several options I'm planning to go with https://github.com/peterh/liner. I've written the change and just need to finish up testing. Should be ready soon.\n. @rambocoder exactly\n\nAlso, when godebug gains the ability to evaluate expressions it would be nice to refer to function names and imported identifiers. \n. @jeffallen sorry to hear that :( Is there some UX change we could make that would at least make it more obvious what was going on?\n. Here's one idea: when the user runs \"step\", parse the next line and see if it contains a function call. Then run as normal until we hit the next `godebug.Line` call. If that call is in the same function as before -- we had no intervening `godebug.EnterFunc` or `godebug.ExitFunc` calls -- and we saw a function call in the code for the previous line, report to the user that it stepped over a function call, probably because the function was not instrumented.\n. Nice, I like the labeled breakpoint idea.\n. I implemented something different:\n\n```\n_ = \"breakpoint\"\n```\n\nI prefer the look of `// godebug: break`, but implementing it was trickier than I expected. Since comments are not part of the AST, it's not clear where to put the breakpoint for a comment in all cases. Here's an example weird case:\n\n``` go\nfor {\n    fmt.Println(\"y\")\n} // godebug: break\n```\n\nThe go/ast package provides a [mapping function](http://golang.org/pkg/go/ast/#NewCommentMap) between AST nodes and associated comments, but there is a fair amount of extra work to do to go from an arbitrary AST statement node to the appropriate place in the tree to insert a breakpoint function call.\n\n`_ = \"breakpoint`, on the other hand, is straightforward. It is parsed as part of the AST. All we have to do is replace its node with the AST representation of `godebug.SetTraceGen(ctx)`.\n\nI considered `_ = \"godebug: break\"`, but thought it looked too complicated. I expect `_ = \"breakpoint\"` to be easier to memorize.\n. You can do conditional breakpoints like this for now:\n\n``` go\nfor i:=1; i < 200; i++ {\n    if i == 100 {\n        _ = \"breakpoint\"\n    }\n}\n```\n. I do like getting to blow people's minds :) I'll think about it.\n. > I am not sure if I am liking the new syntax. Having to change code for break points is not the best way to go in my opinion.\n\nWhat do you think is bad about changing the code like this for a breakpoint?\n\n> I understand that comment basted instrumentation maybe slightly slow but some proper caching can mitigate that issue.\n\nSlowness is not the issue with using comment syntax. When I said \"there is a fair amount of extra work to do to go from an arbitrary AST statement node to the appropriate place in the tree\", I meant that there was a fair amount of extra thought and programming work to do, not that it would be slow at runtime.\n\n`_ = \"breakpoint\"` was just a lot easier to implement.\n. Thanks for the report! Surprisingly, it looks like you found a bug in `golang.org/x/tools/go/loader`:\n\nMinimal loader program loader.go:\n\n```\npackage main\n\nimport (\n    \"fmt\"\n\n    \"golang.org/x/tools/go/loader\"\n)\n\nfunc main() {\n    var conf loader.Config\n    conf.CreateFromFilenames(\"main\", \"small.go\")\n    _, err := conf.Load()\n    fmt.Println(err)\n}\n```\n\nresults on your minimal test case small.go\n\n```\n$ go run loader.go\nsmall.go:7:6: touchedInClosure declared but not used\ncouldn't load packages due to errors: main\n```\n\nI'll see if I can find out what's going on and get this fixed upstream.\n. @omeid is right. It's unfortunate that godebug does not accept a program that the go tool does, though.\n\nI was curious what the spec had to say about this. I found [this](https://golang.org/ref/spec#Variable_declarations):\n\n> Implementation restriction: A compiler may make it illegal to declare a variable inside a function body if the variable is never used.\n\nSo the spec leaves this open, and both the go tool and the loader library are in compliance. The latter is just more strict.\n. Early versions of godebug used `golang.org/x/tools/go/types` for type checking. That library does not object to small.go:\n\n```\npackage main\n\nimport (\n    \"fmt\"\n    \"go/ast\"\n    \"go/parser\"\n    \"go/token\"\n\n    \"golang.org/x/tools/go/types\"\n)\n\nfunc main() {\n    var fs token.FileSet\n    f, err := parser.ParseFile(&fs, \"small.go\", nil, 0)\n    if err != nil {\n        fmt.Println(\"error in parsing: \", err)\n        return\n    }\n    _, err = types.Check(\"main\", &fs, []*ast.File{f})\n    fmt.Println(err)\n}\n```\n\nRunning it:\n\n```\n$ go run parser.go\n<nil>\n```\n\nThe loader library provides a lot that the types library does not, so it might not be worth the effort to switch to it. But it would make godebug behave more like go for this case.\n. c2go isn't outdated. It runs on tip (or, at least, my copy of tip from last week):\n\n```\n~/src/github.com/glycerine/c2go$ go version\ngo version devel +180fbb1 Fri Mar 27 00:30:14 2015 +0000 linux/amd64\n~/src/github.com/glycerine/c2go$ go run *.go\nusage: c2go [options] *.c\n  -I string\n        include directory\n  -c string\n        config file\n  -dst string\n        GOPATH root of destination (default \"/tmp/c2go\")\nexit status 2\n```\n\nThe surprising behavior is that `godebug`'s type checker behaves differently from `go`'s type checker, even though both are compliant with the language spec.\n. @glycerine I tried just deleting that variable from the code and `godebug run` worked fine:\n\n```\n$ godebug run *.go\nusage: c2go [options] *.c\n  -I=\"\": include directory\n  -c=\"\": config file\n  -dst=\"/tmp/c2go\": GOPATH root of destination\n```\n. Oops, I messed up my test with `golang.org/x/tools/go/types`. I had edited small.go before I ran the test. Running again with the original file, it gives the same error as the loader library:\n\n```\n$ go run parser.go\nsmall.go:7:6: touchedInClosure declared but not used\n```\n\nI'm going to call this one `wontfix`. Sorry, @glycerine! If you want to debug that library, just delete that variable.\n. go/loader and go/types behave the same way, and both are different from gc. I thought differently earlier in the ticket, but I was mistaken. \n. Good point, thanks! godebug could have an option to use an arbitrary wrapper instead of the go command. The two tricky parts that come to mind now are: (1) The initial parsing and type-checking of the program, for which there is probably no godep wrapper command, and (2) Multiple tools manipulating `GOPATH` could easily run into problems [related](https://github.com/mailgun/godebug/commit/e5ba457312a994ebe0adbecfbc1d55769035fbf6) to [this](https://github.com/golang/go/blob/9d0239771a2ddd77be0ba64c2782e1328a378190/src/cmd/go/pkg.go#L805-L811).\n\nI'll look into this more.\n. > The latter is being addressed for Go 1.5 in golang/go#10509! \\o/\n\nNice! That's awesome.\n. Ah, that makes sense. I know where the bug is. I'll fix it shortly.\n. Thanks for reporting it!\n. Should be fixed in 77636161ee217cca20a349a0c64fddad7a99d1e8. Does it work for you now?\n. @dcu ^\n. @dcu Thanks for the pointer to go-eval. Yes, I definitely want to integrate something like that soon. See #10 and #18\n. Good catch, thanks! I forgot to update that README when the command changed.\n. Fixed in 980a46a7caf1a722cc2e520b1e394219b2376b8a\n. godebug can only evaluate variable names right now. I want to add pointer dereferencing and other expressions soon. See #10 \n. @nealsanche This is now fixed!\n. Done. :+1: \n. Thanks for the report! Fixing now.\n. Fixed in bc74b8dafd779a8ebdda5742aca1ff0cacd63d8f\n. The problem happens because, in the above example, `a/b/c` is instrumented but `a/b` is not. godebug should be fixed to make this work, but in the meantime you can also instrument the parent packages as a workaround:\n\n```\na $ godebug run -instrument a/b/c,a/b a.go\nB\n-> _ = \"breakpoint\"\n(godebug) c\nC\n```\n. Strange. I'm not sure what happened here. What version of Go are you using?\n. Thanks!\n. > I'm not sure I see the reason behind output, too. Maybe as a undocumented command for debugging?\n\nLeaving it undocumented sounds good to me. It's mostly an artifact of the early days of godebug when there were no wrapper commands and `godebug` just wrote files in-place. I do find it useful for debugging from time to time, though.\n. This is great, thanks. Looking through it now.\n. Looks great, thanks. \n. In some cases it will also be possible to preserve the original line number by putting new statements on the same line, e.g.\n\n``` go\ngodebug.Line(ctx, example_in_go_scope, 6); x := mul(1, 2)\n```\n\nvs \n\n``` go\ngodebug.Line(ctx, example_in_go_scope, 6)\n//line example-in.go:6\nx := mul(1,2)\n```\n\nGiven the two snippets above, I think the second one looks better. It is also probably simpler to implement than to implement a mix of line comments and multiple statements on the same line. But it's worth noting the first one as an option.\n. @FiloSottile thanks for the issue reports and pull requests! I'll take a look this evening.\n. Resolved in 070b120e3208eb5d847ca73611296a43ea36290d\n. Hi @kylehr,\n\nThanks for the bug report! The \"cannot use _ as value\" problem is now fixed. I even found a second issue with godebug when I was testing github.com/ugorji/go/codec -- that issue is fixed now, too.\n\n> Awesome piece of work BTW. Are you thinking about a code coverage extension at all :)\n\nGlad you like it :) For code coverage, did you know about this? https://blog.golang.org/cover\n\n-Jeremy\n. Thanks!\n. Agreed. Thanks for the patch. Sorry again that it you wasted time because of this.\n. Wow, that's surprising behavior. Thanks for reporting this and thanks for the clear test case!\n. Merged and fixed. Thanks!\n. Sure. Quit is really easy, so I've already added it. Return shouldn't be much harder, and is also useful.\n. Return from current function: what should the command be called? @glycerine says that it is \"fin\" in gdb. pdb calls this \"return\". pdb also has \"up\" and \"down\" commands that let you move up and down the stack, so that \"up\" and then \"next\" does almost the same thing as \"return\".\n\nThoughts? I think I prefer pdb's scheme.\n. Right, up and down don't affect execution, which is cool. I mentioned them because \"up\" followed by \"next\" is similar to \"return\".\n\nI prefer \"return\", too. @glycerine, does that sound good to you?\n. @glycerine Of course :)\n. Thanks! I would like to solve the underlying issue, too. Could you post a copy of reorder.go or a simplified version that shows the same problem?\n. I made it print to stderr and cleaned up the message a bit. Thanks for letting me know about this!\n\nI'm guessing godebug should still work in this case, though possibly a bit slower. Is it otherwise working correctly for you?\n. This is doable. It's not something I have wanted myself, though -- can you give an example where this would be helpful, so I can better understand the use case?\n\nOne thing I have considered doing is automatically inserting a breakpoint at program/test start when there are no other breakpoints. Would that provide what you want? Or are there times when you have inserted explicit `_ = \"breakpoint\"` lines in your source and you also want to beak at program/test start?\n. Thanks for working on this. I agree that readline support would be convenient. I want to avoid dependencies on external libraries, though, in addition to the licensing issue @glycerine mentioned. I'm working on a version of this that uses https://github.com/peterh/liner. It will be ready soon.\n. You can also run `godebug run *.go`. The same is true of the normal `go` command.\n. Strange. Here's a guess: godebug.EnteringNewScope was recently renamed to godebug.EnteringNewFile. If you updated the code in your directory by running \"git pull\" but didn't run \"go install github.com/mailgun/godebug\", then you would have been using an older code-generating binary that outputted godebug.EnteringNewScope calls, and they would fail to link against the new library that only had godebug.EnteringNewFile calls.\n\nCould that be the case?\n. Printing expressions: I know, right?! :) I've been using it a lot. I find myself wanting to store local variables and write loops, too. I may add statement evaluation later.\n\nThe original issue: Yes, this is a dup of #49.\n. There is no API exposed yet, but I would be happy to work with you on one.\n. Here's the stack trace you get from runtime.Stack(): http://play.golang.org/p/TzttmeRRD0\n\nThe runtime package also exports a [Func](http://golang.org/pkg/runtime/#Func) type that we could use to build a cleaner trace.\n. Here's an example of using runtime.Func to make a cleaner stack trace: http://play.golang.org/p/3BiuMP_ocl\n. Good catch, thanks!\n. I'm interested in this. I'm not sure what it will take to get it to work, though.\n. @glycerine Thanks! I've updated the README. Let me know if you have any feedback.\n. @klizhentas \n. @glycerine Thanks for the bug report. I just pushed a patch. Can you verify it fixed the problem?\n. Thanks for the report. I'm hoping that fixing this will just be a matter of configuring [loader](https://godoc.org/golang.org/x/tools/go/loader) correctly. I'll look into it tonight.\n. @glycerine Try again at 7e8da1d0152ab55f6cd92da7e66a287da7cbdbca\n. The tests were parallelized in 5e8843d0b97f4a4889d22a0b13cba5462a397dc8\n. That's a nice idea. I had been working on a version that throws away the generated code every time, but I think something like this can work.\n\nWe can do it without rewriting import paths, too. `$GOPATH` can point to multiple directories. We can have a special `godebug` directory that contains generated source in `godebug/src` and compiled versions in `godebug/pkg`. Then when the user runs `godebug <run | test | build>`, we can set `GOPATH=<godebug-dir>:$GOPATH` in the environment for the `go` command and it will use the debug-instrumented packages instead of the normal ones. This avoids both regenerating and recompiling code for packages that haven't changed.\n\nI want godebug to support instrumenting a subset of the packages in the program, though, and that subset can be different each time the user runs the command. So I want the `go` command to ignore any packages in the `godebug` directory that the user has not chosen to instrument for this run. My proposal for that is to recursively hide all of the subdirectories of the `godebug` directory, probably by prepending '.' to their names, and then temporarily unhiding the directories we want to instrument just before running the `go` command.\n\nA downside of my proposal is that concurrent runs of the godebug tool will interfere with each other. One workaround for that is to have godebug check a lock file on startup, and if it finds another instance running it does all of its work in a new temporary directory.\n. @glycerine good point. I thought about this a bit and have two proposals: \n1. `godebug build` always outputs a binary file that ends in \".godebug\"\n2. The godebug library has an `init()` function that prints a prompt and waits for confirmation before continuing. This prompt is disabled for any `godebug test` and `godebug run` commands that do not produce binaries. Example prompt is something like:\n\n> Welcome to godebug!\n> For help, type \"help\". To run the program until the first breakpoint, type \"run\".\n> (godebug) _\n\nIf stdin is closed, the program is halted.\n\nThoughts?\n. @omeid that's a good idea. A downside of GOPATH directory per package is that it results in a quadratic search for packages. For example, if a build transitively includes 100 packages and all of them are godebug-enabled, then the `go` tool will do 100 package lookups that each check on average 50 directories.\n\nBut even for 100 packages this isn't much work. It would take thousands of packages, all instrumented in the same build, for this to become a problem. That seems unrealistic for now.\n. Another factor worth noting: the `go` tool supports packages outside of the GOPATH workspace. It would be nice for godebug to support them, too. I think we should use temporary directories for that case.\n. @omeid ah, I think I misunderstood your suggestion. Is this what you are envisioning?\n\n```\nmy-real-gopath/\n    src/\n        pkg1/\n        pkg2/\n        pkg3/\n    pkg/\n        pkg1.a\n        pkg2.a\n        pkg3.a\ngodebug/\n    src/\n        pkg1/\n        pkg2/\n        pkg3/\n    pkg/\n        pkg1.a\n        pkg2.a\n        pkg3.a\ntmp/\n    synthesized-gopath-1/\n        src/\n            pkg2/  <- symlink to godebug/src/pkg2\n            pkg3/  <- symlink to godebug/src/pkg3\n        pkg/\n            pkg2.a  <- symlink to godebug/pkg/pkg2.a\n            pkg3.a  <- symlink to godebug/pkg/pkg3.a\n    synthesized-gopath-2/\n        src/\n            pkg3/  <- symlink to godebug/src/pkg3\n        pkg/\n            pkg3.a  <- symlink to godebug/pkg/pkg3.a\n```\n\nEach time godebug runs it generates a temporary GOPATH directory that contains symlinks to only the packages that we want to instrument, then prepends that directory to the user's GOPATH. The `go` tool does at most one extra lookup for each package.\n\n^ This is cleaner than what I was thinking. Is this the same thing you were imagining?\n. `godebug run` and `godebug test` have now been implemented, using temporary directories for now.\n\nrun: 5e8843d0b97f4a4889d22a0b13cba5462a397dc8\ntest: b1c7171d241751afc353bda8ffe628b167b41708\n. Cool, thanks for the pointer.\n. After looking through several options I'm planning to go with https://github.com/peterh/liner. I've written the change and just need to finish up testing. Should be ready soon.\n. @rambocoder exactly\n\nAlso, when godebug gains the ability to evaluate expressions it would be nice to refer to function names and imported identifiers. \n. @jeffallen sorry to hear that :( Is there some UX change we could make that would at least make it more obvious what was going on?\n. Here's one idea: when the user runs \"step\", parse the next line and see if it contains a function call. Then run as normal until we hit the next `godebug.Line` call. If that call is in the same function as before -- we had no intervening `godebug.EnterFunc` or `godebug.ExitFunc` calls -- and we saw a function call in the code for the previous line, report to the user that it stepped over a function call, probably because the function was not instrumented.\n. Nice, I like the labeled breakpoint idea.\n. I implemented something different:\n\n```\n_ = \"breakpoint\"\n```\n\nI prefer the look of `// godebug: break`, but implementing it was trickier than I expected. Since comments are not part of the AST, it's not clear where to put the breakpoint for a comment in all cases. Here's an example weird case:\n\n``` go\nfor {\n    fmt.Println(\"y\")\n} // godebug: break\n```\n\nThe go/ast package provides a [mapping function](http://golang.org/pkg/go/ast/#NewCommentMap) between AST nodes and associated comments, but there is a fair amount of extra work to do to go from an arbitrary AST statement node to the appropriate place in the tree to insert a breakpoint function call.\n\n`_ = \"breakpoint`, on the other hand, is straightforward. It is parsed as part of the AST. All we have to do is replace its node with the AST representation of `godebug.SetTraceGen(ctx)`.\n\nI considered `_ = \"godebug: break\"`, but thought it looked too complicated. I expect `_ = \"breakpoint\"` to be easier to memorize.\n. You can do conditional breakpoints like this for now:\n\n``` go\nfor i:=1; i < 200; i++ {\n    if i == 100 {\n        _ = \"breakpoint\"\n    }\n}\n```\n. I do like getting to blow people's minds :) I'll think about it.\n. > I am not sure if I am liking the new syntax. Having to change code for break points is not the best way to go in my opinion.\n\nWhat do you think is bad about changing the code like this for a breakpoint?\n\n> I understand that comment basted instrumentation maybe slightly slow but some proper caching can mitigate that issue.\n\nSlowness is not the issue with using comment syntax. When I said \"there is a fair amount of extra work to do to go from an arbitrary AST statement node to the appropriate place in the tree\", I meant that there was a fair amount of extra thought and programming work to do, not that it would be slow at runtime.\n\n`_ = \"breakpoint\"` was just a lot easier to implement.\n. Thanks for the report! Surprisingly, it looks like you found a bug in `golang.org/x/tools/go/loader`:\n\nMinimal loader program loader.go:\n\n```\npackage main\n\nimport (\n    \"fmt\"\n\n    \"golang.org/x/tools/go/loader\"\n)\n\nfunc main() {\n    var conf loader.Config\n    conf.CreateFromFilenames(\"main\", \"small.go\")\n    _, err := conf.Load()\n    fmt.Println(err)\n}\n```\n\nresults on your minimal test case small.go\n\n```\n$ go run loader.go\nsmall.go:7:6: touchedInClosure declared but not used\ncouldn't load packages due to errors: main\n```\n\nI'll see if I can find out what's going on and get this fixed upstream.\n. @omeid is right. It's unfortunate that godebug does not accept a program that the go tool does, though.\n\nI was curious what the spec had to say about this. I found [this](https://golang.org/ref/spec#Variable_declarations):\n\n> Implementation restriction: A compiler may make it illegal to declare a variable inside a function body if the variable is never used.\n\nSo the spec leaves this open, and both the go tool and the loader library are in compliance. The latter is just more strict.\n. Early versions of godebug used `golang.org/x/tools/go/types` for type checking. That library does not object to small.go:\n\n```\npackage main\n\nimport (\n    \"fmt\"\n    \"go/ast\"\n    \"go/parser\"\n    \"go/token\"\n\n    \"golang.org/x/tools/go/types\"\n)\n\nfunc main() {\n    var fs token.FileSet\n    f, err := parser.ParseFile(&fs, \"small.go\", nil, 0)\n    if err != nil {\n        fmt.Println(\"error in parsing: \", err)\n        return\n    }\n    _, err = types.Check(\"main\", &fs, []*ast.File{f})\n    fmt.Println(err)\n}\n```\n\nRunning it:\n\n```\n$ go run parser.go\n<nil>\n```\n\nThe loader library provides a lot that the types library does not, so it might not be worth the effort to switch to it. But it would make godebug behave more like go for this case.\n. c2go isn't outdated. It runs on tip (or, at least, my copy of tip from last week):\n\n```\n~/src/github.com/glycerine/c2go$ go version\ngo version devel +180fbb1 Fri Mar 27 00:30:14 2015 +0000 linux/amd64\n~/src/github.com/glycerine/c2go$ go run *.go\nusage: c2go [options] *.c\n  -I string\n        include directory\n  -c string\n        config file\n  -dst string\n        GOPATH root of destination (default \"/tmp/c2go\")\nexit status 2\n```\n\nThe surprising behavior is that `godebug`'s type checker behaves differently from `go`'s type checker, even though both are compliant with the language spec.\n. @glycerine I tried just deleting that variable from the code and `godebug run` worked fine:\n\n```\n$ godebug run *.go\nusage: c2go [options] *.c\n  -I=\"\": include directory\n  -c=\"\": config file\n  -dst=\"/tmp/c2go\": GOPATH root of destination\n```\n. Oops, I messed up my test with `golang.org/x/tools/go/types`. I had edited small.go before I ran the test. Running again with the original file, it gives the same error as the loader library:\n\n```\n$ go run parser.go\nsmall.go:7:6: touchedInClosure declared but not used\n```\n\nI'm going to call this one `wontfix`. Sorry, @glycerine! If you want to debug that library, just delete that variable.\n. go/loader and go/types behave the same way, and both are different from gc. I thought differently earlier in the ticket, but I was mistaken. \n. Good point, thanks! godebug could have an option to use an arbitrary wrapper instead of the go command. The two tricky parts that come to mind now are: (1) The initial parsing and type-checking of the program, for which there is probably no godep wrapper command, and (2) Multiple tools manipulating `GOPATH` could easily run into problems [related](https://github.com/mailgun/godebug/commit/e5ba457312a994ebe0adbecfbc1d55769035fbf6) to [this](https://github.com/golang/go/blob/9d0239771a2ddd77be0ba64c2782e1328a378190/src/cmd/go/pkg.go#L805-L811).\n\nI'll look into this more.\n. > The latter is being addressed for Go 1.5 in golang/go#10509! \\o/\n\nNice! That's awesome.\n. Ah, that makes sense. I know where the bug is. I'll fix it shortly.\n. Thanks for reporting it!\n. Should be fixed in 77636161ee217cca20a349a0c64fddad7a99d1e8. Does it work for you now?\n. @dcu ^\n. @dcu Thanks for the pointer to go-eval. Yes, I definitely want to integrate something like that soon. See #10 and #18\n. Good catch, thanks! I forgot to update that README when the command changed.\n. Fixed in 980a46a7caf1a722cc2e520b1e394219b2376b8a\n. godebug can only evaluate variable names right now. I want to add pointer dereferencing and other expressions soon. See #10 \n. @nealsanche This is now fixed!\n. Done. :+1: \n. Thanks for the report! Fixing now.\n. Fixed in bc74b8dafd779a8ebdda5742aca1ff0cacd63d8f\n. The problem happens because, in the above example, `a/b/c` is instrumented but `a/b` is not. godebug should be fixed to make this work, but in the meantime you can also instrument the parent packages as a workaround:\n\n```\na $ godebug run -instrument a/b/c,a/b a.go\nB\n-> _ = \"breakpoint\"\n(godebug) c\nC\n```\n. Strange. I'm not sure what happened here. What version of Go are you using?\n. Thanks!\n. > I'm not sure I see the reason behind output, too. Maybe as a undocumented command for debugging?\n\nLeaving it undocumented sounds good to me. It's mostly an artifact of the early days of godebug when there were no wrapper commands and `godebug` just wrote files in-place. I do find it useful for debugging from time to time, though.\n. This is great, thanks. Looking through it now.\n. Looks great, thanks. \n. In some cases it will also be possible to preserve the original line number by putting new statements on the same line, e.g.\n\n``` go\ngodebug.Line(ctx, example_in_go_scope, 6); x := mul(1, 2)\n```\n\nvs \n\n``` go\ngodebug.Line(ctx, example_in_go_scope, 6)\n//line example-in.go:6\nx := mul(1,2)\n```\n\nGiven the two snippets above, I think the second one looks better. It is also probably simpler to implement than to implement a mix of line comments and multiple statements on the same line. But it's worth noting the first one as an option.\n. @FiloSottile thanks for the issue reports and pull requests! I'll take a look this evening.\n. Resolved in 070b120e3208eb5d847ca73611296a43ea36290d\n. Hi @kylehr,\n\nThanks for the bug report! The \"cannot use _ as value\" problem is now fixed. I even found a second issue with godebug when I was testing github.com/ugorji/go/codec -- that issue is fixed now, too.\n\n> Awesome piece of work BTW. Are you thinking about a code coverage extension at all :)\n\nGlad you like it :) For code coverage, did you know about this? https://blog.golang.org/cover\n\n-Jeremy\n. Thanks!\n. Agreed. Thanks for the patch. Sorry again that it you wasted time because of this.\n. Wow, that's surprising behavior. Thanks for reporting this and thanks for the clear test case!\n. Merged and fixed. Thanks!\n. Sure. Quit is really easy, so I've already added it. Return shouldn't be much harder, and is also useful.\n. Return from current function: what should the command be called? @glycerine says that it is \"fin\" in gdb. pdb calls this \"return\". pdb also has \"up\" and \"down\" commands that let you move up and down the stack, so that \"up\" and then \"next\" does almost the same thing as \"return\".\n\nThoughts? I think I prefer pdb's scheme.\n. Right, up and down don't affect execution, which is cool. I mentioned them because \"up\" followed by \"next\" is similar to \"return\".\n\nI prefer \"return\", too. @glycerine, does that sound good to you?\n. @glycerine Of course :)\n. Thanks! I would like to solve the underlying issue, too. Could you post a copy of reorder.go or a simplified version that shows the same problem?\n. I made it print to stderr and cleaned up the message a bit. Thanks for letting me know about this!\n\nI'm guessing godebug should still work in this case, though possibly a bit slower. Is it otherwise working correctly for you?\n. This is doable. It's not something I have wanted myself, though -- can you give an example where this would be helpful, so I can better understand the use case?\n\nOne thing I have considered doing is automatically inserting a breakpoint at program/test start when there are no other breakpoints. Would that provide what you want? Or are there times when you have inserted explicit `_ = \"breakpoint\"` lines in your source and you also want to beak at program/test start?\n. Thanks for working on this. I agree that readline support would be convenient. I want to avoid dependencies on external libraries, though, in addition to the licensing issue @glycerine mentioned. I'm working on a version of this that uses https://github.com/peterh/liner. It will be ready soon.\n. You can also run `godebug run *.go`. The same is true of the normal `go` command.\n. Strange. Here's a guess: godebug.EnteringNewScope was recently renamed to godebug.EnteringNewFile. If you updated the code in your directory by running \"git pull\" but didn't run \"go install github.com/mailgun/godebug\", then you would have been using an older code-generating binary that outputted godebug.EnteringNewScope calls, and they would fail to link against the new library that only had godebug.EnteringNewFile calls.\n\nCould that be the case?\n. Printing expressions: I know, right?! :) I've been using it a lot. I find myself wanting to store local variables and write loops, too. I may add statement evaluation later.\n\nThe original issue: Yes, this is a dup of #49.\n. There is no API exposed yet, but I would be happy to work with you on one.\n. Here's the stack trace you get from runtime.Stack(): http://play.golang.org/p/TzttmeRRD0\n\nThe runtime package also exports a [Func](http://golang.org/pkg/runtime/#Func) type that we could use to build a cleaner trace.\n. Here's an example of using runtime.Func to make a cleaner stack trace: http://play.golang.org/p/3BiuMP_ocl\n. Good catch, thanks!\n. I'm interested in this. I'm not sure what it will take to get it to work, though.\n. ",
    "glycerine": "Excellent. Short and sweet. I like the example especially.\n. verified. new issue #5 popped up, but this one is gone.\n. How ever you do it, I would make it really easy to know, in fact it should be blindingly obvious, if a binary contains _any_ debug information from godebug at all.\n\nYou don't want to accidentally release a build with debug info in it. Both for security and for performance.\n. @jeremyschlatter Sounds good--together those two precautions should catch most unintended debug -compiles. \n. Haven't used this myself, but I think I saw it utilized to good effect in one of the web-login-via-ssh projects. It provides very readline-like functionality (special key handling, emacs-like key-bindings, command history and terminal control) in pure go: \n\nhttps://github.com/kless/term/blob/master/readline/doc.go\n. @omeld 's suggestion seems to resolve the problem of improper placement, just error out.\n\nI particularly like this comment based breakpoint idea also because then break points could have meaningful names/phrases attached to them rather than being known by numbers only when enabling/disabling/deleting/making conditional/managing breakpoints.\n\ne.g.\n\n`// godebug: break \"top of main event loop\"` \n\nGranted this isn't needed when debugging in, say, emacs; but until you get full source code for context, knowing which breakpoint you've stopped on can instantly give you the relevant context.\n. Very clever solution. I especially like that its a no-op without godebug, so I can leave it in the code.  Can _ = \"breakpoint\" style breakpoints have comments on top?  I'm imagining a conditional breakpoint syntax.\n\n```\nfor i:=1; i < 200; i++ {\n_ = \"breakpoint\" // if i == 100\n}\n```\n. I know. I just thought it would blow people's minds when they saw it. ;-)\n. Arg. Agree we can't fix this locally, but I am still inclined to think we\r\nshould upstream this as an issue so that \"go run\" and the types library are\r\nconsistent.\r\n\r\nOn Sun, Apr 5, 2015 at 9:58 PM, Jeremy Schlatter notifications@github.com\r\nwrote:\r\n\r\n> Closed #14 https://github.com/mailgun/godebug/issues/14.\r\n> \r\n> \u2014\r\n> Reply to this email directly or view it on GitHub\r\n> https://github.com/mailgun/godebug/issues/14#event-273861199.\r\n\r\n## \r\n\r\nBest regards,\r\nJason\r\n. err, I misread -- It's the \"golang.org/x/tools/go/loader\" library that\r\ndiffers in strictness, yes?\r\n\r\nOn Mon, Apr 6, 2015 at 7:55 AM, Jason E. Aten j.e.aten@gmail.com wrote:\r\n\r\n> Arg. Agree we can't fix this locally, but I am still inclined to think we\r\n> should upstream this as an issue so that \"go run\" and the types library are\r\n> consistent.\r\n> \r\n> On Sun, Apr 5, 2015 at 9:58 PM, Jeremy Schlatter <notifications@github.com\r\n> \r\n> > wrote:\r\n> > \r\n> > Closed #14 https://github.com/mailgun/godebug/issues/14.\r\n> > \r\n> > \u2014\r\n> > Reply to this email directly or view it on GitHub\r\n> > https://github.com/mailgun/godebug/issues/14#event-273861199.\r\n> \r\n> ## \r\n> \r\n> Best regards,\r\n> Jason\r\n> \r\n> ## \r\n> . opened https://github.com/golang/go/issues/10356 to track upstream\n. @jeremyschlatter I don't mind 'return' -- as long as the short to type abbreviation 'r' also suffices to the same effect!\n. The problem with classical readline is that it is infectiously GPLed, which is bad news for many.\n\nSee #9 for alternatives and discussion such as it is.\n. So odd. This reproduced a couple of times, then just now it started working(!) Closing because I can't repro any longer.\n. Ah. Good to know. Was probably using an out of date binary.\n. (maybe just abbreviated as 'f'; these one character commands are really nice)\n. btw printing expressions totally rocks! I know this is totally offtopic for this issue, but I'm just blown away at how nicely the integrated printing is working now. STUNNINGLY AWESOME.\n. implementation note: debug.PrintStack() prints the stack for you.\n. http://stackoverflow.com/questions/19094099/how-to-dump-goroutine-stacktraces\n\nAlso I see the docs for debug.Stack() say it is deprecated in favor of runtime.Stack(). Not sure which is called by debug.PrintStack() these days.\n. I assume that additional information is to allow those debugging the generated assembly to do so. Hence it is valuable (perhaps essential) to some.  I don't find it distracting; I would leave it \"uncleaned\".\n. @willfaught , Jeremy is super busy of late, and the code is pretty simple. Why not dig in and implement this?\n. go get will put the binary in $GOPATH/bin\n. Excellent. Short and sweet. I like the example especially.\n. verified. new issue #5 popped up, but this one is gone.\n. How ever you do it, I would make it really easy to know, in fact it should be blindingly obvious, if a binary contains _any_ debug information from godebug at all.\n\nYou don't want to accidentally release a build with debug info in it. Both for security and for performance.\n. @jeremyschlatter Sounds good--together those two precautions should catch most unintended debug -compiles. \n. Haven't used this myself, but I think I saw it utilized to good effect in one of the web-login-via-ssh projects. It provides very readline-like functionality (special key handling, emacs-like key-bindings, command history and terminal control) in pure go: \n\nhttps://github.com/kless/term/blob/master/readline/doc.go\n. @omeld 's suggestion seems to resolve the problem of improper placement, just error out.\n\nI particularly like this comment based breakpoint idea also because then break points could have meaningful names/phrases attached to them rather than being known by numbers only when enabling/disabling/deleting/making conditional/managing breakpoints.\n\ne.g.\n\n`// godebug: break \"top of main event loop\"` \n\nGranted this isn't needed when debugging in, say, emacs; but until you get full source code for context, knowing which breakpoint you've stopped on can instantly give you the relevant context.\n. Very clever solution. I especially like that its a no-op without godebug, so I can leave it in the code.  Can _ = \"breakpoint\" style breakpoints have comments on top?  I'm imagining a conditional breakpoint syntax.\n\n```\nfor i:=1; i < 200; i++ {\n_ = \"breakpoint\" // if i == 100\n}\n```\n. I know. I just thought it would blow people's minds when they saw it. ;-)\n. Arg. Agree we can't fix this locally, but I am still inclined to think we\r\nshould upstream this as an issue so that \"go run\" and the types library are\r\nconsistent.\r\n\r\nOn Sun, Apr 5, 2015 at 9:58 PM, Jeremy Schlatter notifications@github.com\r\nwrote:\r\n\r\n> Closed #14 https://github.com/mailgun/godebug/issues/14.\r\n> \r\n> \u2014\r\n> Reply to this email directly or view it on GitHub\r\n> https://github.com/mailgun/godebug/issues/14#event-273861199.\r\n\r\n## \r\n\r\nBest regards,\r\nJason\r\n. err, I misread -- It's the \"golang.org/x/tools/go/loader\" library that\r\ndiffers in strictness, yes?\r\n\r\nOn Mon, Apr 6, 2015 at 7:55 AM, Jason E. Aten j.e.aten@gmail.com wrote:\r\n\r\n> Arg. Agree we can't fix this locally, but I am still inclined to think we\r\n> should upstream this as an issue so that \"go run\" and the types library are\r\n> consistent.\r\n> \r\n> On Sun, Apr 5, 2015 at 9:58 PM, Jeremy Schlatter <notifications@github.com\r\n> \r\n> > wrote:\r\n> > \r\n> > Closed #14 https://github.com/mailgun/godebug/issues/14.\r\n> > \r\n> > \u2014\r\n> > Reply to this email directly or view it on GitHub\r\n> > https://github.com/mailgun/godebug/issues/14#event-273861199.\r\n> \r\n> ## \r\n> \r\n> Best regards,\r\n> Jason\r\n> \r\n> ## \r\n> . opened https://github.com/golang/go/issues/10356 to track upstream\n. @jeremyschlatter I don't mind 'return' -- as long as the short to type abbreviation 'r' also suffices to the same effect!\n. The problem with classical readline is that it is infectiously GPLed, which is bad news for many.\n\nSee #9 for alternatives and discussion such as it is.\n. So odd. This reproduced a couple of times, then just now it started working(!) Closing because I can't repro any longer.\n. Ah. Good to know. Was probably using an out of date binary.\n. (maybe just abbreviated as 'f'; these one character commands are really nice)\n. btw printing expressions totally rocks! I know this is totally offtopic for this issue, but I'm just blown away at how nicely the integrated printing is working now. STUNNINGLY AWESOME.\n. implementation note: debug.PrintStack() prints the stack for you.\n. http://stackoverflow.com/questions/19094099/how-to-dump-goroutine-stacktraces\n\nAlso I see the docs for debug.Stack() say it is deprecated in favor of runtime.Stack(). Not sure which is called by debug.PrintStack() these days.\n. I assume that additional information is to allow those debugging the generated assembly to do so. Hence it is valuable (perhaps essential) to some.  I don't find it distracting; I would leave it \"uncleaned\".\n. @willfaught , Jeremy is super busy of late, and the code is pretty simple. Why not dig in and implement this?\n. go get will put the binary in $GOPATH/bin\n. ",
    "klizhentas": "lgtm\n. lgtm\n. ",
    "omeid": "The generated source can be perhaps kept under `$GOPATH/godebug/$IMPORT/PATH`? This will allow to just scan directory for changes against the counterparts under $GOPATH/godebug and only regenerate source if you must, of course, this means some changes to the import path of projects though.\n\nWhat do you think?\n. I like the idea of multi GOPATH better.\n\nThe issue of concurrency can be mitigated with having a GOPATH per project under `godebug` with packages selected for instrumentation linked from the `godebug/{src,pkg}`\n. @jeremyschlatter I don't see how you would be looking up more than one directory, you keep the instrumented source in `godebug/src` and only symlink them to the required projects. This way there will be only one instrumented source of every project at a time.\n. Yup, that is exactly what I meant by _having a GOPATH per project under godebug with packages selected for instrumentation linked from the godebug/{src,pkg}._\n. :+1:  `// godebug: break`\n\nThrow an error/warning when a breakpoint is not possible.\n. I am not sure if I am liking the new syntax. Having to change code for break points is not the best way to go in my opinion.\n\nI understand that comment basted instrumentation maybe slightly slow but some proper caching can mitigate that issue.\n. This isn't a bug. Using a variable isn't just writing to it but reading it and because the variable is never used inside it's scope, it complains about it.\n. Please don't downgrade.\n\n**c2go** has been written against an older version of Go and should be ported to the latest if they want to use **godebug**, not the other way around.\n. The generated source can be perhaps kept under `$GOPATH/godebug/$IMPORT/PATH`? This will allow to just scan directory for changes against the counterparts under $GOPATH/godebug and only regenerate source if you must, of course, this means some changes to the import path of projects though.\n\nWhat do you think?\n. I like the idea of multi GOPATH better.\n\nThe issue of concurrency can be mitigated with having a GOPATH per project under `godebug` with packages selected for instrumentation linked from the `godebug/{src,pkg}`\n. @jeremyschlatter I don't see how you would be looking up more than one directory, you keep the instrumented source in `godebug/src` and only symlink them to the required projects. This way there will be only one instrumented source of every project at a time.\n. Yup, that is exactly what I meant by _having a GOPATH per project under godebug with packages selected for instrumentation linked from the godebug/{src,pkg}._\n. :+1:  `// godebug: break`\n\nThrow an error/warning when a breakpoint is not possible.\n. I am not sure if I am liking the new syntax. Having to change code for break points is not the best way to go in my opinion.\n\nI understand that comment basted instrumentation maybe slightly slow but some proper caching can mitigate that issue.\n. This isn't a bug. Using a variable isn't just writing to it but reading it and because the variable is never used inside it's scope, it complains about it.\n. Please don't downgrade.\n\n**c2go** has been written against an older version of Go and should be ported to the latest if they want to use **godebug**, not the other way around.\n. ",
    "emicklei": "I have build tools around https://github.com/GeertJohan/go.linenoise.  Maybe this fits as well here.\n. I have build tools around https://github.com/GeertJohan/go.linenoise.  Maybe this fits as well here.\n. ",
    "willfaught": "+1\n. Have the same issue\n. Agreed, I'm fine with typing \"p foo\" to print.\n. +1\n. I would name it \"return\" because it's self-documenting, and on the off-chance this is ever localized, it doesn't make sense to use a French word where English is used everywhere else.\n\nIt's been a while since I used pdb, but I thought up and down let you examine other stack frames, but didn't affect execution?\n. Automatically inserting a breakpoint at program/test start when there are no other breakpoints would be perfect.\n. I've had that problem too. I like that idea. The ability to name funcs/methods to break at the start of would be useful too.\n. Is this the same as #49?\n. The full default stack trace with arg values is probably too noisy. Perhaps even just the function names are enough, but I could see how file/line could be helpful too.\n\nIf there's ever a feature to examine other stack frames (move up/down the stack), this feature could be reused for that navigation.\n. Perhaps the goroutine number would be useful too.\n. @glycerine the issue documents the need, it's not a request for anyone specific to do it\n. :+1:. What's your PATH and GOPATH?\n\nOn Sat, Feb 18, 2017 at 4:53 AM samirakhalili <notifications@github.com>\nwrote:\n\n> Hi;\n> I run this program for testing debuger; by he way i install go get\n> github.com/mailgun/godebug , but I did'n know how to use this debuger\n> ,plz help me ,\n> Thank'a alot.\n> Samira\n> package main\n>\n> import \"fmt\"\n>\n> func main() {\n> _ = \"breakpoint\"\n> fmt.Println(-> fmt.Println(\"Hello, world!\"))\n> bufio.NewScanner(os.Stdin).Scan()\n> fmt.Println(\"Hello, world!\")\n> }\n>\n> For run my program\n> testGo # go build\n> testGo # godebug run testGo\n>\n> (after run i have this error)\n> No command 'godebug' found, did you mean:\n> godebug: command not found\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mailgun/godebug/issues/92>, or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AAD5VrE1aPU3ufgMmT0edC5Ev5gL0R0Sks5rdunkgaJpZM4MFHXw>\n> .\n>\n. +1\n. Have the same issue\n. Agreed, I'm fine with typing \"p foo\" to print.\n. +1\n. I would name it \"return\" because it's self-documenting, and on the off-chance this is ever localized, it doesn't make sense to use a French word where English is used everywhere else.\n\nIt's been a while since I used pdb, but I thought up and down let you examine other stack frames, but didn't affect execution?\n. Automatically inserting a breakpoint at program/test start when there are no other breakpoints would be perfect.\n. I've had that problem too. I like that idea. The ability to name funcs/methods to break at the start of would be useful too.\n. Is this the same as #49?\n. The full default stack trace with arg values is probably too noisy. Perhaps even just the function names are enough, but I could see how file/line could be helpful too.\n\nIf there's ever a feature to examine other stack frames (move up/down the stack), this feature could be reused for that navigation.\n. Perhaps the goroutine number would be useful too.\n. @glycerine the issue documents the need, it's not a request for anyone specific to do it\n. :+1:. What's your PATH and GOPATH?\n\nOn Sat, Feb 18, 2017 at 4:53 AM samirakhalili <notifications@github.com>\nwrote:\n\n> Hi;\n> I run this program for testing debuger; by he way i install go get\n> github.com/mailgun/godebug , but I did'n know how to use this debuger\n> ,plz help me ,\n> Thank'a alot.\n> Samira\n> package main\n>\n> import \"fmt\"\n>\n> func main() {\n> _ = \"breakpoint\"\n> fmt.Println(-> fmt.Println(\"Hello, world!\"))\n> bufio.NewScanner(os.Stdin).Scan()\n> fmt.Println(\"Hello, world!\")\n> }\n>\n> For run my program\n> testGo # go build\n> testGo # godebug run testGo\n>\n> (after run i have this error)\n> No command 'godebug' found, did you mean:\n> godebug: command not found\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mailgun/godebug/issues/92>, or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AAD5VrE1aPU3ufgMmT0edC5Ev5gL0R0Sks5rdunkgaJpZM4MFHXw>\n> .\n>\n. ",
    "jmburges": "Excited!\n. Excited!\n. ",
    "chzyer": "@jeremyschlatter I will recommend the library I'm working on: https://github.com/chzyer/readline ;)\nIt works well on darwin/linux/windows, and bring us the zsh-style-readline user experience.\n. @jeremyschlatter I will recommend the library I'm working on: https://github.com/chzyer/readline ;)\nIt works well on darwin/linux/windows, and bring us the zsh-style-readline user experience.\n. ",
    "rambocoder": "@jeremyschlatter you mean variables and consts outside of function bodies?\n\n```\npackage blah\nconst c = 10\nvar x string\nfunc fun(){\n_ = \"breakpoint\" // 'h c' OR 'h x' in godebug does not print their values\n}\n```\n. @jeremyschlatter you mean variables and consts outside of function bodies?\n\n```\npackage blah\nconst c = 10\nvar x string\nfunc fun(){\n_ = \"breakpoint\" // 'h c' OR 'h x' in godebug does not print their values\n}\n```\n. ",
    "pwaller": "Along these lines, I need to place a breakpoint in the standard library. I'm currently hitting net/http.ErrBodyReadAfterClose, and it's very difficult to tell why, so I want to set breakpoints in bufio and net/http, which I take it isn't possible or easy right now.\n. Along these lines, I need to place a breakpoint in the standard library. I'm currently hitting net/http.ErrBodyReadAfterClose, and it's very difficult to tell why, so I want to set breakpoints in bufio and net/http, which I take it isn't possible or easy right now.\n. ",
    "jeffallen": "I just hit this problem, and I wasted a significant amount of time on it. :(\n. Well, it would be awesone if right before you stepped into non insrumented code it told you. Don't know if this is possible without too much overhead...\n. +1\nOn Jun 21, 2015 7:24 AM, \"Jeremy Schlatter\" notifications@github.com\nwrote:\n\n> Here's one idea: when the user runs \"step\", parse the next line and see if\n> it contains a function call. Then run as normal until we hit the next\n> godebug.Line call. If that call is in the same function as before -- we\n> had no intervening godebug.EnterFunc or godebug.ExitFunc calls -- and we\n> saw a function call in the code for the previous line, report to the user\n> that it stepped over a function call, probably because the function was not\n> instrumented.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mailgun/godebug/issues/12#issuecomment-113865080.\n. I just hit this problem, and I wasted a significant amount of time on it. :(\n. Well, it would be awesone if right before you stepped into non insrumented code it told you. Don't know if this is possible without too much overhead...\n. +1\nOn Jun 21, 2015 7:24 AM, \"Jeremy Schlatter\" notifications@github.com\nwrote:\n\n> Here's one idea: when the user runs \"step\", parse the next line and see if\n> it contains a function call. Then run as normal until we hit the next\n> godebug.Line call. If that call is in the same function as before -- we\n> had no intervening godebug.EnterFunc or godebug.ExitFunc calls -- and we\n> saw a function call in the code for the previous line, report to the user\n> that it stepped over a function call, probably because the function was not\n> instrumented.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mailgun/godebug/issues/12#issuecomment-113865080.\n. ",
    "andradei": ":+1: Oh how much I wish for the std lib support\n. This is very useful! Hope it passes all tests and the conflicts are resolved!\n. +1 For merging this.\n. :+1: I'd love to see support for this!\n. 6 months and no contact from contributors. This might not be dead just yet, but delve seems to be the best alternative now, with it being integrated into text editors and all.\n. @enkoder It is not as user friendly either. But it is far more powerful. It got integrated into a few IDE debuggers (VS Code via the vscode-go package and IntelliJ via the intellij-go plugin) and works really well so far.\n. :+1: Oh how much I wish for the std lib support\n. This is very useful! Hope it passes all tests and the conflicts are resolved!\n. +1 For merging this.\n. :+1: I'd love to see support for this!\n. 6 months and no contact from contributors. This might not be dead just yet, but delve seems to be the best alternative now, with it being integrated into text editors and all.\n. @enkoder It is not as user friendly either. But it is far more powerful. It got integrated into a few IDE debuggers (VS Code via the vscode-go package and IntelliJ via the intellij-go plugin) and works really well so far.\n. ",
    "doublerebel": ":+1: \n. :+1: \n. ",
    "dmitshur": "> blow people's minds\n\nAs far as I know, most users of Go prefer simple, obvious, dumb solutions, rather than shocking, unexpected, complex or mind-blowing. :)\n. > easily run into problems [related](https://github.com/mailgun/godebug/commit/e5ba457312a994ebe0adbecfbc1d55769035fbf6) to [this](https://github.com/golang/go/blob/9d0239771a2ddd77be0ba64c2782e1328a378190/src/cmd/go/pkg.go#L805-L811).\n\nThe latter is being addressed for Go 1.5 in https://github.com/golang/go/issues/10509! \\o/\n. > blow people's minds\n\nAs far as I know, most users of Go prefer simple, obvious, dumb solutions, rather than shocking, unexpected, complex or mind-blowing. :)\n. > easily run into problems [related](https://github.com/mailgun/godebug/commit/e5ba457312a994ebe0adbecfbc1d55769035fbf6) to [this](https://github.com/golang/go/blob/9d0239771a2ddd77be0ba64c2782e1328a378190/src/cmd/go/pkg.go#L805-L811).\n\nThe latter is being addressed for Go 1.5 in https://github.com/golang/go/issues/10509! \\o/\n. ",
    "dcu": "I found the issue, it's because the program starts with a number\n. @jeremyschlatter Yeah I confirm it works fine.\n\nDo you think it's possible to use something like https://github.com/sbinet/go-eval to evaluate expressions?\n. I found the issue, it's because the program starts with a number\n. @jeremyschlatter Yeah I confirm it works fine.\n\nDo you think it's possible to use something like https://github.com/sbinet/go-eval to evaluate expressions?\n. ",
    "hyper0x": "My pleasure.:)\n. My pleasure.:)\n. ",
    "nealsanche": "Great. I'll have a look. Thanks.\nOn Jul 11, 2015 10:45 PM, \"Jeremy Schlatter\" notifications@github.com\nwrote:\n\n> @nealsanche https://github.com/nealsanche This is now fixed!\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mailgun/godebug/issues/18#issuecomment-120686922.\n\n## \n\nRobots and Pencils Inc | 1507 14th Ave SW Calgary AB T3C 0W4\nYou can unsubscribe from the Robots and Pencils mailing lists by clicking \nhere. https://robotsandpencils.com/contact/unsubscribe.html\n. Great. I'll have a look. Thanks.\nOn Jul 11, 2015 10:45 PM, \"Jeremy Schlatter\" notifications@github.com\nwrote:\n\n> @nealsanche https://github.com/nealsanche This is now fixed!\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mailgun/godebug/issues/18#issuecomment-120686922.\n\n## \n\nRobots and Pencils Inc | 1507 14th Ave SW Calgary AB T3C 0W4\nYou can unsubscribe from the Robots and Pencils mailing lists by clicking \nhere. https://robotsandpencils.com/contact/unsubscribe.html\n. ",
    "FiloSottile": "Hit the same problem when trying to build (with the new UX) package `github.com/FiloSottile/BERserk/BERserker` which imports `github.com/FiloSottile/BERserk`.\n. See #8\n. Replaced by #32 \n. Actually I realized that supporting -tags involves more than just passing the flag, so I'm changing this to target tags support.\n. Fixed in 30769a0ac5e1da7290ad3a22699ea11cffc096fd\n. How I see this working is with build accepting a package name and run a file name.\n\nThat should account for most uses, while being a lot simpler on the UX.\n. Here's a sketch of a usage I'll look at implementing:\n\n```\ngodebug build [-godebugwork] [-instrument pkgs...] [-o output] [package]\n    Takes a single main package. If arguments are a list of *.go files they\n    are treated as a single package. -o as in go build with .debug suffix.\ngodebug run [-godebugwork] [-instrument pkgs...] gofiles... [--] [arguments...]\n    Compile and run the given set of *.go files as a main package.\ngodebug test [-godebugwork] [-instrument pkgs...] [-c] [-o output] [packages] [flags for test binary]\n    -c, -o, packages and flags like go test.\n```\n\nI'm not sure I see the reason behind `output`, too. Maybe as a undocumented command for debugging?\n. I didn't actually understand the code :) sorry for the noise\n. ~~Small bug to fix before merging: godebug test foo/... will also try to include packages like foo/bar_test. It probably needs a different way to do expansion.~~\n\nThis is #33\n. Should have addressed all the points, except the tests. I haven't had the time to figure out how the tests scaffolding works (I added the files while I was testing manually).\n\nThere are various aspects of the build and test commands that need testing, too, but that will require some more work to make the tests run the binary etc.\n. Hit the same problem when trying to build (with the new UX) package `github.com/FiloSottile/BERserk/BERserker` which imports `github.com/FiloSottile/BERserk`.\n. See #8\n. Replaced by #32 \n. Actually I realized that supporting -tags involves more than just passing the flag, so I'm changing this to target tags support.\n. Fixed in 30769a0ac5e1da7290ad3a22699ea11cffc096fd\n. How I see this working is with build accepting a package name and run a file name.\n\nThat should account for most uses, while being a lot simpler on the UX.\n. Here's a sketch of a usage I'll look at implementing:\n\n```\ngodebug build [-godebugwork] [-instrument pkgs...] [-o output] [package]\n    Takes a single main package. If arguments are a list of *.go files they\n    are treated as a single package. -o as in go build with .debug suffix.\ngodebug run [-godebugwork] [-instrument pkgs...] gofiles... [--] [arguments...]\n    Compile and run the given set of *.go files as a main package.\ngodebug test [-godebugwork] [-instrument pkgs...] [-c] [-o output] [packages] [flags for test binary]\n    -c, -o, packages and flags like go test.\n```\n\nI'm not sure I see the reason behind `output`, too. Maybe as a undocumented command for debugging?\n. I didn't actually understand the code :) sorry for the noise\n. ~~Small bug to fix before merging: godebug test foo/... will also try to include packages like foo/bar_test. It probably needs a different way to do expansion.~~\n\nThis is #33\n. Should have addressed all the points, except the tests. I haven't had the time to figure out how the tests scaffolding works (I added the files while I was testing manually).\n\nThere are various aspects of the build and test commands that need testing, too, but that will require some more work to make the tests run the binary etc.\n. ",
    "TechnotronicOz": "I have been having this same issue. We have multiple Go apps and we have structured the mains like:\n\n```\n|--- ./appOne/\n        |--- appOne.go\n|--- ./appTwo/\n        |--- appTwo.go\n```\n\nthen the sub packages exist in:\n\n```\n|--- ./lib/\n        |--- appOne/packageOne/\n                |--- packageOne.go\n        |--- appOne/packageTwo/\n                |--- packageTwo.go\n        |--- appTwo/packageOne/\n                |--- packageOne.go\n```\n. I have been having this same issue. We have multiple Go apps and we have structured the mains like:\n\n```\n|--- ./appOne/\n        |--- appOne.go\n|--- ./appTwo/\n        |--- appTwo.go\n```\n\nthen the sub packages exist in:\n\n```\n|--- ./lib/\n        |--- appOne/packageOne/\n                |--- packageOne.go\n        |--- appOne/packageTwo/\n                |--- packageTwo.go\n        |--- appTwo/packageOne/\n                |--- packageOne.go\n```\n. ",
    "otoolep": "Same here, really struggling when trying to instrument packages with this otherwise great tool.\n. Same here, really struggling when trying to instrument packages with this otherwise great tool.\n. ",
    "propag": "unintentionally, i make you wait for me for a long time. i'm sorry.\n\n```\ngo version devel +4ddd751 Mon May 4 06:38:54 2015 +0000 windows/386\n```\n. unintentionally, i make you wait for me for a long time. i'm sorry.\n\n```\ngo version devel +4ddd751 Mon May 4 06:38:54 2015 +0000 windows/386\n```\n. ",
    "devtoro": "same problem here...\ngo version go1.6 linux/amd64\n. Actually I solved this by adding $GOPATH/bin to my PATH. Don't know how to solve that in windows though.\n\nDespite that, I now get the following error:\n\n> godebug run clock.go\n> fork/exec /tmp/godebug235875476/godebug.a.out: permission denied\n. same problem here...\ngo version go1.6 linux/amd64\n. Actually I solved this by adding $GOPATH/bin to my PATH. Don't know how to solve that in windows though.\n\nDespite that, I now get the following error:\n\n> godebug run clock.go\n> fork/exec /tmp/godebug235875476/godebug.a.out: permission denied\n. ",
    "resilva87": "have the same issue https://github.com/mailgun/godebug/issues/23#issuecomment-219670288\n\n```\n$go version \ngo1.6 linux/amd64\n```\n. have the same issue https://github.com/mailgun/godebug/issues/23#issuecomment-219670288\n\n```\n$go version \ngo1.6 linux/amd64\n```\n. ",
    "nussjustin": "The bug is in your code. Calling `go log.Fatal(http.ListenAndServe(\":8080\", nil))` is the same as:\n\n``` go\nerr := http.ListenAndServe(\":8080\", nil) // blocks the goroutine\ngo log.Fatal(err)\n```\n\nYou are only calling log.Fatal in another goroutine. The evaluation of the arguments (in this case your http.ListenAndServe call) still happens in the calling goroutine, which in your case is the main goroutine. This blocks your main goroutine including the debugger.\n\nYou can fix your code with an anonymous function:\n\n``` go\ngo func() {\n    log.Fatal(http.ListenAndServe(\":8080\", nil))\n}()\n```\n. The bug is in your code. Calling `go log.Fatal(http.ListenAndServe(\":8080\", nil))` is the same as:\n\n``` go\nerr := http.ListenAndServe(\":8080\", nil) // blocks the goroutine\ngo log.Fatal(err)\n```\n\nYou are only calling log.Fatal in another goroutine. The evaluation of the arguments (in this case your http.ListenAndServe call) still happens in the calling goroutine, which in your case is the main goroutine. This blocks your main goroutine including the debugger.\n\nYou can fix your code with an anonymous function:\n\n``` go\ngo func() {\n    log.Fatal(http.ListenAndServe(\":8080\", nil))\n}()\n```\n. ",
    "btfak": "thanks,solved\n @nuss-justin \n. thanks,solved\n @nuss-justin \n. ",
    "WnP": "@andradei done ;)\n@jeremyschlatter readme needs to be updated, by the way I don't know if help message modifications are good, english is not my natural language, let me know your through about it and I'll fix it\n. @andradei done ;)\n@jeremyschlatter readme needs to be updated, by the way I don't know if help message modifications are good, english is not my natural language, let me know your through about it and I'll fix it\n. ",
    "philipmulcahy": "+1\n. Any idea why the appveyor build is failing, or how to re-run it?\n. Hi Nicolas - I suspected that might be the issue, but I couldn\u2019t see how to persuade it to re-run - do you know how?\n\nThanks,\n\nPhilip\n\n> On 16 Feb 2016, at 03:28, Nicolas Martin notifications@github.com wrote:\n> \n> Great feature, was looking for this as well. Looks like the tests took too long to run, is it possible to just re-run it?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub https://github.com/mailgun/godebug/pull/74#issuecomment-184480166.\n. I just tickled it, with the same result - appveyor timeout. Is it possible that appveyor is broken rather than my change?\n. +1\n. Any idea why the appveyor build is failing, or how to re-run it?\n. Hi Nicolas - I suspected that might be the issue, but I couldn\u2019t see how to persuade it to re-run - do you know how?\n\nThanks,\n\nPhilip\n\n> On 16 Feb 2016, at 03:28, Nicolas Martin notifications@github.com wrote:\n> \n> Great feature, was looking for this as well. Looks like the tests took too long to run, is it possible to just re-run it?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub https://github.com/mailgun/godebug/pull/74#issuecomment-184480166.\n. I just tickled it, with the same result - appveyor timeout. Is it possible that appveyor is broken rather than my change?\n. ",
    "remexre": "+1\n. +1\n. ",
    "jsgv": "same issue. \nhaving to declare package path:\n\n```\n$ godebug run -instrument=github.com/jesusjjf/myproject/package1,github.com/jesusjjf/myproject/package2 myproject.go\n```\n\n+1 on godebug being able to detect automatically \n\nAwesome tool!!\n. same issue. \nhaving to declare package path:\n\n```\n$ godebug run -instrument=github.com/jesusjjf/myproject/package1,github.com/jesusjjf/myproject/package2 myproject.go\n```\n\n+1 on godebug being able to detect automatically \n\nAwesome tool!!\n. ",
    "benfleis": "+1 on the awesomeness of the tool\n+1 on some way to handle this\n. +1 on the awesomeness of the tool\n+1 on some way to handle this\n. ",
    "mcastilho": "+1\n. +1\n. ",
    "Dr-Terrible": ":+1: \n. :+1: \n. ",
    "ucirello": "now favoring GOVENDOREXPERIMENT.\n. now favoring GOVENDOREXPERIMENT.\n. ",
    "xinhuang327": "I looked into the source code and found this may be Windows platform specific. setGopath to tmpDir in cmd.go seems have no effect on go build, go tool still build with original GOPATH.\n\nSo I tweaked the code a little bit and resolve the issue: rename those package directory names before second build, and restore after build. (Changes in fork: https://github.com/xinhuang327/godebug/commit/26d0353fd5d07f7ba9baa78d775d769f0f4089b4)\n\nThis is just my nasty try, this issue still need further investigation and improvement.\n. I looked into the source code and found this may be Windows platform specific. setGopath to tmpDir in cmd.go seems have no effect on go build, go tool still build with original GOPATH.\n\nSo I tweaked the code a little bit and resolve the issue: rename those package directory names before second build, and restore after build. (Changes in fork: https://github.com/xinhuang327/godebug/commit/26d0353fd5d07f7ba9baa78d775d769f0f4089b4)\n\nThis is just my nasty try, this issue still need further investigation and improvement.\n. ",
    "dradtke": "I can second this, as I just ran into a number of \"undefined\" errors, and modifying my code from\n\n``` go\nvar (\n    x = 1\n    y = 2\n)\n```\n\nto\n\n``` go\nvar x = 1\nvar y = 2\n```\n\nfixes it.\n. I can second this, as I just ran into a number of \"undefined\" errors, and modifying my code from\n\n``` go\nvar (\n    x = 1\n    y = 2\n)\n```\n\nto\n\n``` go\nvar x = 1\nvar y = 2\n```\n\nfixes it.\n. ",
    "Ripounet": "Hi Jeremy\nThe same happens when godebug running a hello world go file.\nThe root of the problem seems to be that for some reason \"go list std\" prints errors and returns value 1 (though it also prints the non-error packages).\nNot sure anything can be done in godebug, it's already sensible to print the error and continue execution.\nMaybe print the error to Stderr instead of Stdout?\nCheers\n. Hi Jeremy\nThe same happens when godebug running a hello world go file.\nThe root of the problem seems to be that for some reason \"go list std\" prints errors and returns value 1 (though it also prints the non-error packages).\nNot sure anything can be done in godebug, it's already sensible to print the error and continue execution.\nMaybe print the error to Stderr instead of Stdout?\nCheers\n. ",
    "blamarche": "Not to necro this... but for use in environments with strict code quality control, having devs forget to remove  `_ = \"breakpoint\"` lines when committing becomes an annoying overhead problem. So related to this particular feature request, would also be nice to have the ability to pass in breakpoints via the command line by specifying the file+line number. Something like: `godebug run -break=file1.go:34,file2.go:183 ...`\n. Not to necro this... but for use in environments with strict code quality control, having devs forget to remove  `_ = \"breakpoint\"` lines when committing becomes an annoying overhead problem. So related to this particular feature request, would also be nice to have the ability to pass in breakpoints via the command line by specifying the file+line number. Something like: `godebug run -break=file1.go:34,file2.go:183 ...`\n. ",
    "willf": "Great. Thanks for the update.\n. Great. Thanks for the update.\n. ",
    "melihmucuk": "Oh, I found how to handle it. \n\nrun `godebug build`, this will create projectName.debug file at project folder.\n\nthen run debug exec like this `./projectName.debug`\n. Oh, I found how to handle it. \n\nrun `godebug build`, this will create projectName.debug file at project folder.\n\nthen run debug exec like this `./projectName.debug`\n. ",
    "saurabh2013": "Invalid Issue \n. Invalid Issue \n. ",
    "hasit": "@jeremyschlatter \r\n\r\nThis is something I would be happy to work with you on. I was thinking about making a graphical version of godebug and I thought that API and its documentation would be nice to work on.. @jeremyschlatter \r\n\r\nThis is something I would be happy to work with you on. I was thinking about making a graphical version of godebug and I thought that API and its documentation would be nice to work on.. ",
    "interlock": ":+1: stops us dead when trying to debug right now.\n. :+1: stops us dead when trying to debug right now.\n. ",
    "cjrd": ":+1: is there a current work around?\n. :+1: is there a current work around?\n. ",
    "rxwen": "+1 for the support for vendor.\n. +1 for the support for vendor.\n. ",
    "gotschmarcel": "<img src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/1f44d.png\" height=\"24px\" /> Should definitely be supported, since it will probably be enabled by default in the next Go version!\n. I agree with **andradei**, **delve** is a really good alternative!\n. <img src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/1f44d.png\" height=\"24px\" /> Should definitely be supported, since it will probably be enabled by default in the next Go version!\n. I agree with **andradei**, **delve** is a really good alternative!\n. ",
    "leonlee": "+1 for the support for vendor. thanks\n. +1 for the support for vendor. thanks\n. ",
    "enkoder": "I really like godebug and now that I am moving to a vendor folder I am very sad about this issue. delve is not nearly as good as godebug IMO.   \n. The one thing I really liked about godebug was `_ = \"breakpoint\" to be able to drop a breakpoint in code. I use vim for my editor so it was my \"click on sidebar\" set breakpoint. I'll give devel a better chance but was initially turned off by it. \n. I really like godebug and now that I am moving to a vendor folder I am very sad about this issue. delve is not nearly as good as godebug IMO.   \n. The one thing I really liked about godebug was `_ = \"breakpoint\" to be able to drop a breakpoint in code. I use vim for my editor so it was my \"click on sidebar\" set breakpoint. I'll give devel a better chance but was initially turned off by it. \n. ",
    "meowssir": "Try running `$ go get .` in the main project folder as a workaround.\n\n```\n\u279c  github.com tree | grep meowssir -A2\n\u251c\u2500\u2500 meowssir\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 main\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 main.go\n```\n. Try running `$ go get .` in the main project folder as a workaround.\n\n```\n\u279c  github.com tree | grep meowssir -A2\n\u251c\u2500\u2500 meowssir\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 main\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 main.go\n```\n. Closing issue.\n\nI ran `$ go get .` then `$ go build ./...` in the main folder. It's working.\n. Try running `$ go get .` in the main project folder as a workaround.\n\n```\n\u279c  github.com tree | grep meowssir -A2\n\u251c\u2500\u2500 meowssir\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 main\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 main.go\n```\n. Try running `$ go get .` in the main project folder as a workaround.\n\n```\n\u279c  github.com tree | grep meowssir -A2\n\u251c\u2500\u2500 meowssir\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 main\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 main.go\n```\n. Closing issue.\n\nI ran `$ go get .` then `$ go build ./...` in the main folder. It's working.\n. ",
    "jaytaylor": "@cristianmtr Thank you for filing this.  It seems obvious in hindsight, but your reference to this limitation helped me realize why godebug wasn't working right for my program!\n. @cristianmtr Thank you for filing this.  It seems obvious in hindsight, but your reference to this limitation helped me realize why godebug wasn't working right for my program!\n. ",
    "fzerorubigd": "After a simple check. I found this happen if I have a break point after this lines : \n\n```\nquit := make(chan os.Signal, 5)\nsignal.Notify(quit, os.Interrupt, os.Kill, syscall.SIGTERM, syscall.SIGINT, syscall.SIGKILL)\n<-quit\n```\n. After a simple check. I found this happen if I have a break point after this lines : \n\n```\nquit := make(chan os.Signal, 5)\nsignal.Notify(quit, os.Interrupt, os.Kill, syscall.SIGTERM, syscall.SIGINT, syscall.SIGKILL)\n<-quit\n```\n. ",
    "voutasaurus": "godebug test appears to be working for me (I'm on Windows 10)\n. godebug test appears to be working for me (I'm on Windows 10)\n. ",
    "ObjectIsAdvantag": "works for me on windows 7, 64 bits\n. works for me on windows 7, 64 bits\n. ",
    "jordanbtucker": "I'm getting this same error on Windows 10. I'm not sure what information you need to help figure out this issue.\n. I just figured it out. I was trying to run godebug against a library instead of an executable.\n. I'm getting this same error on Windows 10. I'm not sure what information you need to help figure out this issue.\n. I just figured it out. I was trying to run godebug against a library instead of an executable.\n. ",
    "danielmanesku": "Excellent idea! I might take this feature to implement in coming weeks/months.\nI had a similar idea and went through issues of this project, to see if somebody already came up with something similar and I found this.\nMy idea was to have some json file where you define your watches. Something like this:\n\n``` json\n{\n  \"a\": [\n    \"var1\",\n    \"var2\",\n    \"var3\"\n  ],\n  \"b\": [\n    \"var4\",\n    \"var5\"\n  ]\n}\n```\n\nIn help menu you would get something along the lines:\n\n```\n-> _ = \"breakpoint\"\n(godebug) h\n\nCommands:\n    (h) help: Print this help.\n    (n) next: Run the next line.\n    (s) step: Run for one step.\n    (c) continue: Run until the next breakpoint.\n    (l) list: Show the current line in context of the code around it.\n    (p) print <expression>: Print a variable or any other Go expression.\n    (q) quit: Exit the program. Uses os.Exit; deferred functions are not run.\n\n    **(a) print variable group** \n    **(b) print variable group** \n\nCommands may be given by their full name or by their parenthesized abbreviation.\n\nPressing enter without typing anything repeats the previous command.\n```\n\nBut now, I like your idea more! This way you don't have to maintain an external file, no additional command line parameter for file path.\n\n@jeremyschlatter @FiloSottile what is your take on this?\n. Excellent idea! I might take this feature to implement in coming weeks/months.\nI had a similar idea and went through issues of this project, to see if somebody already came up with something similar and I found this.\nMy idea was to have some json file where you define your watches. Something like this:\n\n``` json\n{\n  \"a\": [\n    \"var1\",\n    \"var2\",\n    \"var3\"\n  ],\n  \"b\": [\n    \"var4\",\n    \"var5\"\n  ]\n}\n```\n\nIn help menu you would get something along the lines:\n\n```\n-> _ = \"breakpoint\"\n(godebug) h\n\nCommands:\n    (h) help: Print this help.\n    (n) next: Run the next line.\n    (s) step: Run for one step.\n    (c) continue: Run until the next breakpoint.\n    (l) list: Show the current line in context of the code around it.\n    (p) print <expression>: Print a variable or any other Go expression.\n    (q) quit: Exit the program. Uses os.Exit; deferred functions are not run.\n\n    **(a) print variable group** \n    **(b) print variable group** \n\nCommands may be given by their full name or by their parenthesized abbreviation.\n\nPressing enter without typing anything repeats the previous command.\n```\n\nBut now, I like your idea more! This way you don't have to maintain an external file, no additional command line parameter for file path.\n\n@jeremyschlatter @FiloSottile what is your take on this?\n. ",
    "nicolas-martin": "Great feature, was looking for this as well. Looks like the tests took too long to run, is it possible to just re-run it? \n. Not sure, maybe you can try to trigger another build by amending and re-pushing your commit?\n. Looks like it to me.. appveyor returns\n\n> **\\* Test killed: ran too long (10m0s)\n\nCould we get someone else to look at this?\n. Great feature, was looking for this as well. Looks like the tests took too long to run, is it possible to just re-run it? \n. Not sure, maybe you can try to trigger another build by amending and re-pushing your commit?\n. Looks like it to me.. appveyor returns\n\n> **\\* Test killed: ran too long (10m0s)\n\nCould we get someone else to look at this?\n. ",
    "pyotr777": "And also other flags: https://golang.org/cmd/go/#hdr-Compile_packages_and_dependencies\n. And also other flags: https://golang.org/cmd/go/#hdr-Compile_packages_and_dependencies\n. ",
    "neelmitra": "ok got it. Thank you.\n. ok got it. Thank you.\n. ",
    "DHowett": "\"exeSuffix\" was intended more to mean \"executable suffix\", though I can see\nwhy it would appear platform-specific\n. \"exeSuffix\" was intended more to mean \"executable suffix\", though I can see\nwhy it would appear platform-specific\n. ",
    "lujiajing1126": "I also have this issue\n. I also have this issue\n. ",
    "athirn": "I've opened issue #88 for a related (but different) item.  Unfortunately, @meowssir suggestion does not work for #88.\n. Believe the issue is that the file loader.go (_workspace/src/golang.org/x/tools/loader/loagergo) does not support vendoring.  it needs to be enhanced add the vendored directories to ImportPath\n. I have some more information.  for some reason the file /usr/local/go//src/net/http/h2_bundle.go has an include for `golang_org/x/net/http2/hpack`.  Not sure why is golang_org rather golang.org.\n. I believe it has something to do with this bug https://github.com/golang/go/issues/16333.\n\nStill don't understand why building the code normally works but it fails with godebug\n. OK, I found where the golang_org directory is.  It's vendor in go 1.7 (/usr/local/go/src/vendor/golang_org/).\n\nSo the issues is that when I use godebug, it's not supporting the vendoring directory.  If you look at the top of the original error, you can see its checking 3 directories for the golang_org/x/route package.  But the list does not contain the vendor subdir\n. I've opened issue #88 for a related (but different) item.  Unfortunately, @meowssir suggestion does not work for #88.\n. Believe the issue is that the file loader.go (_workspace/src/golang.org/x/tools/loader/loagergo) does not support vendoring.  it needs to be enhanced add the vendored directories to ImportPath\n. I have some more information.  for some reason the file /usr/local/go//src/net/http/h2_bundle.go has an include for `golang_org/x/net/http2/hpack`.  Not sure why is golang_org rather golang.org.\n. I believe it has something to do with this bug https://github.com/golang/go/issues/16333.\n\nStill don't understand why building the code normally works but it fails with godebug\n. OK, I found where the golang_org directory is.  It's vendor in go 1.7 (/usr/local/go/src/vendor/golang_org/).\n\nSo the issues is that when I use godebug, it's not supporting the vendoring directory.  If you look at the top of the original error, you can see its checking 3 directories for the golang_org/x/route package.  But the list does not contain the vendor subdir\n. ",
    "scher200": "I have the same issue:\r\n```\r\ncgo failed: [go tool cgo -objdir /tmp/net_C303750830 -- -I /tmp/net_C303750830 cgo_linux.go cgo_resnew.go cgo_socknew.go cgo_unix.go]: exit status 1\r\n/usr/local/go/src/net/lookup_unix.go:58:24: undeclared name: cgoLookupHost\r\n/usr/local/go/src/net/lookup_unix.go:70:24: undeclared name: cgoLookupIP\r\n/usr/local/go/src/net/lookup_unix.go:86:23: undeclared name: cgoLookupPort\r\n/usr/local/go/src/net/lookup_unix.go:95:24: undeclared name: cgoLookupCNAME\r\n/usr/local/go/src/net/lookup_unix.go:162:23: undeclared name: cgoLookupPTR\r\n/usr/local/go/src/net/http/h2_bundle.go:45:2: could not import golang_org/x/net/http2/hpack (cannot find package \"golang_org/x/net/http2/hpack\" in any of:\r\n\t/usr/local/go/src/golang_org/x/net/http2/hpack (from $GOROOT)\r\n\t/go/vendor/src/golang_org/x/net/http2/hpack (from $GOPATH)\r\n\t/go/src/golang_org/x/net/http2/hpack)\r\n/usr/local/go/src/net/http/h2_bundle.go:46:2: could not import golang_org/x/net/lex/httplex (cannot find package \"golang_org/x/net/lex/httplex\" in any of:\r\n\t/usr/local/go/src/golang_org/x/net/lex/httplex (from $GOROOT)\r\n\t/go/vendor/src/golang_org/x/net/lex/httplex (from $GOPATH)\r\n\t/go/src/golang_org/x/net/lex/httplex)\r\n/usr/local/go/src/net/http/http.go:10:2: could not import golang_org/x/net/lex/httplex (cannot find package \"golang_org/x/net/lex/httplex\" in any of:\r\n\t/usr/local/go/src/golang_org/x/net/lex/httplex (from $GOROOT)\r\n\t/go/vendor/src/golang_org/x/net/lex/httplex (from $GOPATH)\r\n\t/go/src/golang_org/x/net/lex/httplex)\r\n/usr/local/go/src/net/http/server.go:31:2: could not import golang_org/x/net/lex/httplex (cannot find package \"golang_org/x/net/lex/httplex\" in any of:\r\n\t/usr/local/go/src/golang_org/x/net/lex/httplex (from $GOROOT)\r\n\t/go/vendor/src/golang_org/x/net/lex/httplex (from $GOPATH)\r\n\t/go/src/golang_org/x/net/lex/httplex)\r\n/usr/local/go/src/net/http/transfer.go:21:2: could not import golang_org/x/net/lex/httplex (cannot find package \"golang_org/x/net/lex/httplex\" in any of:\r\n\t/usr/local/go/src/golang_org/x/net/lex/httplex (from $GOROOT)\r\n\t/go/vendor/src/golang_org/x/net/lex/httplex (from $GOPATH)\r\n\t/go/src/golang_org/x/net/lex/httplex)\r\n/usr/local/go/src/net/http/transport.go:30:2: could not import golang_org/x/net/lex/httplex (cannot find package \"golang_org/x/net/lex/httplex\" in any of:\r\n\t/usr/local/go/src/golang_org/x/net/lex/httplex (from $GOROOT)\r\n\t/go/vendor/src/golang_org/x/net/lex/httplex (from $GOPATH)\r\n\t/go/src/golang_org/x/net/lex/httplex)\r\n/usr/local/go/src/net/http/h2_bundle.go:848:19: undeclared name: hpack\r\n/usr/local/go/src/net/http/h2_bundle.go:1827:11: undeclared name: hpack\r\n/usr/local/go/src/net/http/h2_bundle.go:1851:52: undeclared name: hpack\r\n/usr/local/go/src/net/http/h2_bundle.go:1862:51: undeclared name: hpack\r\n/usr/local/go/src/net/http/h2_bundle.go:5020:11: undeclared name: hpack\r\n/usr/local/go/src/net/http/h2_bundle.go:6722:20: undeclared name: hpack\r\n/usr/local/go/src/net/http/h2_bundle.go:3131:18: undeclared name: hpack\r\n/usr/local/go/src/net/http/h2_bundle.go:3187:46: undeclared name: hpack\r\n/usr/local/go/src/net/http/h2_bundle.go:6821:22: undeclared name: hpack\r\n/usr/local/go/src/net/http/h2_bundle.go:6913:30: undeclared name: hpack\r\n/usr/local/go/src/net/http/transport.go:323:8: undeclared name: httplex\r\n/usr/local/go/src/net/http/transport.go:327:9: undeclared name: httplex\r\n/usr/local/go/src/net/http/h2_bundle.go:5287:26: undeclared name: hpack\r\n/usr/local/go/src/net/http/h2_bundle.go:5290:12: undeclared name: hpack\r\n/usr/local/go/src/net/http/h2_bundle.go:6646:4: undeclared name: httplex\r\n/usr/local/go/src/net/http/h2_bundle.go:1920:2: invalid operation: hdec (variable of type *invalid type) has no field or method SetEmitEnabled\r\n/usr/local/go/src/net/http/h2_bundle.go:1921:2: invalid operation: hdec (variable of type *invalid type) has no field or method SetMaxStringLength\r\n/usr/local/go/src/net/http/h2_bundle.go:1922:2: invalid operation: hdec (variable of type *invalid type) has no field or method SetEmitFunc\r\n/usr/local/go/src/net/http/h2_bundle.go:1922:27: undeclared name: hpack\r\n/usr/local/go/src/net/http/h2_bundle.go:1926:7: undeclared name: httplex\r\n/usr/local/go/src/net/http/h2_bundle.go:1942:4: invalid operation: hdec (variable of type *invalid type) has no field or method SetEmitEnabled\r\n/usr/local/go/src/net/http/h2_bundle.go:1948:4: invalid operation: hdec (variable of type *invalid type) has no field or method SetEmitEnabled\r\n/usr/local/go/src/net/http/h2_bundle.go:1957:8: invalid operation: hdec (variable of type *invalid type) has no field or method SetEmitFunc\r\n/usr/local/go/src/net/http/h2_bundle.go:1957:33: undeclared name: hpack\r\n/usr/local/go/src/net/http/h2_bundle.go:1962:16: invalid operation: hdec (variable of type *invalid type) has no field or method Write\r\n/usr/local/go/src/net/http/h2_bundle.go:1979:12: invalid operation: hdec (variable of type *invalid type) has no field or method Close\r\n/usr/local/go/src/net/http/h2_bundle.go:5784:7: undeclared name: httplex\r\n/usr/local/go/src/net/http/h2_bundle.go:5788:8: undeclared name: httplex\r\n/usr/local/go/src/net/http/h2_bundle.go:5879:2: invalid operation: cc.henc (variable of type *invalid type) has no field or method WriteField\r\n/usr/local/go/src/net/http/h2_bundle.go:5879:21: undeclared name: hpack\r\n/usr/local/go/src/net/http/server.go:789:25: undeclared name: httplex\r\n/usr/local/go/src/net/http/server.go:793:7: undeclared name: httplex\r\n/usr/local/go/src/net/http/server.go:797:8: undeclared name: httplex\r\n/usr/local/go/src/net/http/h2_bundle.go:2517:7: undeclared name: httplex\r\n/usr/local/go/src/net/http/h2_bundle.go:3042:20: undeclared name: hpack\r\n/usr/local/go/src/net/http/h2_bundle.go:3045:23: undeclared name: hpack\r\n/usr/local/go/src/net/http/h2_bundle.go:3899:3: invalid operation: sc.hpackEncoder (variable of type *invalid type) has no field or method SetMaxDynamicTableSize\r\n/usr/local/go/src/net/http/h2_bundle.go:6698:22: undeclared name: httplex\r\n/usr/local/go/src/net/http/h2_bundle.go:6825:2: invalid operation: enc (variable of type *invalid type) has no field or method WriteField\r\n/usr/local/go/src/net/http/h2_bundle.go:6825:17: undeclared name: hpack\r\n/usr/local/go/src/net/http/h2_bundle.go:6929:8: undeclared name: httplex\r\n/usr/local/go/src/net/http/http.go:42:10: undeclared name: httplex\r\n/usr/local/go/src/net/http/transfer.go:566:14: undeclared name: httplex\r\n/usr/local/go/src/net/http/transfer.go:568:23: undeclared name: httplex\r\ncouldn't load packages due to errors: net, net/http\r\n```\r\n\r\nafter the workaround: \"go get .\"\r\n```\r\ngodebug run\r\n```\r\nruns but does not debug my go files \r\n. I have the same issue:\r\n```\r\ncgo failed: [go tool cgo -objdir /tmp/net_C303750830 -- -I /tmp/net_C303750830 cgo_linux.go cgo_resnew.go cgo_socknew.go cgo_unix.go]: exit status 1\r\n/usr/local/go/src/net/lookup_unix.go:58:24: undeclared name: cgoLookupHost\r\n/usr/local/go/src/net/lookup_unix.go:70:24: undeclared name: cgoLookupIP\r\n/usr/local/go/src/net/lookup_unix.go:86:23: undeclared name: cgoLookupPort\r\n/usr/local/go/src/net/lookup_unix.go:95:24: undeclared name: cgoLookupCNAME\r\n/usr/local/go/src/net/lookup_unix.go:162:23: undeclared name: cgoLookupPTR\r\n/usr/local/go/src/net/http/h2_bundle.go:45:2: could not import golang_org/x/net/http2/hpack (cannot find package \"golang_org/x/net/http2/hpack\" in any of:\r\n\t/usr/local/go/src/golang_org/x/net/http2/hpack (from $GOROOT)\r\n\t/go/vendor/src/golang_org/x/net/http2/hpack (from $GOPATH)\r\n\t/go/src/golang_org/x/net/http2/hpack)\r\n/usr/local/go/src/net/http/h2_bundle.go:46:2: could not import golang_org/x/net/lex/httplex (cannot find package \"golang_org/x/net/lex/httplex\" in any of:\r\n\t/usr/local/go/src/golang_org/x/net/lex/httplex (from $GOROOT)\r\n\t/go/vendor/src/golang_org/x/net/lex/httplex (from $GOPATH)\r\n\t/go/src/golang_org/x/net/lex/httplex)\r\n/usr/local/go/src/net/http/http.go:10:2: could not import golang_org/x/net/lex/httplex (cannot find package \"golang_org/x/net/lex/httplex\" in any of:\r\n\t/usr/local/go/src/golang_org/x/net/lex/httplex (from $GOROOT)\r\n\t/go/vendor/src/golang_org/x/net/lex/httplex (from $GOPATH)\r\n\t/go/src/golang_org/x/net/lex/httplex)\r\n/usr/local/go/src/net/http/server.go:31:2: could not import golang_org/x/net/lex/httplex (cannot find package \"golang_org/x/net/lex/httplex\" in any of:\r\n\t/usr/local/go/src/golang_org/x/net/lex/httplex (from $GOROOT)\r\n\t/go/vendor/src/golang_org/x/net/lex/httplex (from $GOPATH)\r\n\t/go/src/golang_org/x/net/lex/httplex)\r\n/usr/local/go/src/net/http/transfer.go:21:2: could not import golang_org/x/net/lex/httplex (cannot find package \"golang_org/x/net/lex/httplex\" in any of:\r\n\t/usr/local/go/src/golang_org/x/net/lex/httplex (from $GOROOT)\r\n\t/go/vendor/src/golang_org/x/net/lex/httplex (from $GOPATH)\r\n\t/go/src/golang_org/x/net/lex/httplex)\r\n/usr/local/go/src/net/http/transport.go:30:2: could not import golang_org/x/net/lex/httplex (cannot find package \"golang_org/x/net/lex/httplex\" in any of:\r\n\t/usr/local/go/src/golang_org/x/net/lex/httplex (from $GOROOT)\r\n\t/go/vendor/src/golang_org/x/net/lex/httplex (from $GOPATH)\r\n\t/go/src/golang_org/x/net/lex/httplex)\r\n/usr/local/go/src/net/http/h2_bundle.go:848:19: undeclared name: hpack\r\n/usr/local/go/src/net/http/h2_bundle.go:1827:11: undeclared name: hpack\r\n/usr/local/go/src/net/http/h2_bundle.go:1851:52: undeclared name: hpack\r\n/usr/local/go/src/net/http/h2_bundle.go:1862:51: undeclared name: hpack\r\n/usr/local/go/src/net/http/h2_bundle.go:5020:11: undeclared name: hpack\r\n/usr/local/go/src/net/http/h2_bundle.go:6722:20: undeclared name: hpack\r\n/usr/local/go/src/net/http/h2_bundle.go:3131:18: undeclared name: hpack\r\n/usr/local/go/src/net/http/h2_bundle.go:3187:46: undeclared name: hpack\r\n/usr/local/go/src/net/http/h2_bundle.go:6821:22: undeclared name: hpack\r\n/usr/local/go/src/net/http/h2_bundle.go:6913:30: undeclared name: hpack\r\n/usr/local/go/src/net/http/transport.go:323:8: undeclared name: httplex\r\n/usr/local/go/src/net/http/transport.go:327:9: undeclared name: httplex\r\n/usr/local/go/src/net/http/h2_bundle.go:5287:26: undeclared name: hpack\r\n/usr/local/go/src/net/http/h2_bundle.go:5290:12: undeclared name: hpack\r\n/usr/local/go/src/net/http/h2_bundle.go:6646:4: undeclared name: httplex\r\n/usr/local/go/src/net/http/h2_bundle.go:1920:2: invalid operation: hdec (variable of type *invalid type) has no field or method SetEmitEnabled\r\n/usr/local/go/src/net/http/h2_bundle.go:1921:2: invalid operation: hdec (variable of type *invalid type) has no field or method SetMaxStringLength\r\n/usr/local/go/src/net/http/h2_bundle.go:1922:2: invalid operation: hdec (variable of type *invalid type) has no field or method SetEmitFunc\r\n/usr/local/go/src/net/http/h2_bundle.go:1922:27: undeclared name: hpack\r\n/usr/local/go/src/net/http/h2_bundle.go:1926:7: undeclared name: httplex\r\n/usr/local/go/src/net/http/h2_bundle.go:1942:4: invalid operation: hdec (variable of type *invalid type) has no field or method SetEmitEnabled\r\n/usr/local/go/src/net/http/h2_bundle.go:1948:4: invalid operation: hdec (variable of type *invalid type) has no field or method SetEmitEnabled\r\n/usr/local/go/src/net/http/h2_bundle.go:1957:8: invalid operation: hdec (variable of type *invalid type) has no field or method SetEmitFunc\r\n/usr/local/go/src/net/http/h2_bundle.go:1957:33: undeclared name: hpack\r\n/usr/local/go/src/net/http/h2_bundle.go:1962:16: invalid operation: hdec (variable of type *invalid type) has no field or method Write\r\n/usr/local/go/src/net/http/h2_bundle.go:1979:12: invalid operation: hdec (variable of type *invalid type) has no field or method Close\r\n/usr/local/go/src/net/http/h2_bundle.go:5784:7: undeclared name: httplex\r\n/usr/local/go/src/net/http/h2_bundle.go:5788:8: undeclared name: httplex\r\n/usr/local/go/src/net/http/h2_bundle.go:5879:2: invalid operation: cc.henc (variable of type *invalid type) has no field or method WriteField\r\n/usr/local/go/src/net/http/h2_bundle.go:5879:21: undeclared name: hpack\r\n/usr/local/go/src/net/http/server.go:789:25: undeclared name: httplex\r\n/usr/local/go/src/net/http/server.go:793:7: undeclared name: httplex\r\n/usr/local/go/src/net/http/server.go:797:8: undeclared name: httplex\r\n/usr/local/go/src/net/http/h2_bundle.go:2517:7: undeclared name: httplex\r\n/usr/local/go/src/net/http/h2_bundle.go:3042:20: undeclared name: hpack\r\n/usr/local/go/src/net/http/h2_bundle.go:3045:23: undeclared name: hpack\r\n/usr/local/go/src/net/http/h2_bundle.go:3899:3: invalid operation: sc.hpackEncoder (variable of type *invalid type) has no field or method SetMaxDynamicTableSize\r\n/usr/local/go/src/net/http/h2_bundle.go:6698:22: undeclared name: httplex\r\n/usr/local/go/src/net/http/h2_bundle.go:6825:2: invalid operation: enc (variable of type *invalid type) has no field or method WriteField\r\n/usr/local/go/src/net/http/h2_bundle.go:6825:17: undeclared name: hpack\r\n/usr/local/go/src/net/http/h2_bundle.go:6929:8: undeclared name: httplex\r\n/usr/local/go/src/net/http/http.go:42:10: undeclared name: httplex\r\n/usr/local/go/src/net/http/transfer.go:566:14: undeclared name: httplex\r\n/usr/local/go/src/net/http/transfer.go:568:23: undeclared name: httplex\r\ncouldn't load packages due to errors: net, net/http\r\n```\r\n\r\nafter the workaround: \"go get .\"\r\n```\r\ngodebug run\r\n```\r\nruns but does not debug my go files \r\n. ",
    "richard-julien": "Same problem for me. Do you find any solution ?\n. @chenwee thanks for your answer. I also tried dlv with intellij with some crashes. Anyway, it seems to be the best solution today.\n. Same problem for me. Do you find any solution ?\n. @chenwee thanks for your answer. I also tried dlv with intellij with some crashes. Anyway, it seems to be the best solution today.\n. ",
    "chenwee": "@richard-julien Now I use IntellJ's Go Plugin, which can debug golang step by step and visible some-like visual studio for C++, so~ \n. @richard-julien Now I use IntellJ's Go Plugin, which can debug golang step by step and visible some-like visual studio for C++, so~ \n. ",
    "go2run": "@athirn sorry \r\nI still don't know how to fix this\r\nMy problem is the same as yours.\r\nCould you show me how you fix this?\r\n. @athirn thank you.\r\nI found a way to fix this.\r\ncp -R golang_org $GOPATH/src. @athirn sorry \r\nI still don't know how to fix this\r\nMy problem is the same as yours.\r\nCould you show me how you fix this?\r\n. @athirn thank you.\r\nI found a way to fix this.\r\ncp -R golang_org $GOPATH/src. ",
    "jennylia": "Thanks go2run for the above comment\r\nFor those who are new to this like me, cp -R copies all files in golang_or.\r\n\r\nwhat I did was\r\n`` cd $GOPATH/src``\r\nthen\r\n``\r\ncp -R /usr/local/go/src/vendor/golang_org .\r\n``. Thanks go2run for the above comment\r\nFor those who are new to this like me, cp -R copies all files in golang_or.\r\n\r\nwhat I did was\r\n`` cd $GOPATH/src``\r\nthen\r\n``\r\ncp -R /usr/local/go/src/vendor/golang_org .\r\n``. ",
    "jsonperl": "I just symlinked em for now\r\n`ln -s golang.org golang_org`. I just symlinked em for now\r\n`ln -s golang.org golang_org`. ",
    "micanzhang": "so does there any way to fix this issue without do like @jennylia or @jsonperl does?. so does there any way to fix this issue without do like @jennylia or @jsonperl does?. ",
    "mibzman": "For those of us on Windows the `golang_org` folder can be found at `C:\\Go\\src\\vendor`. For those of us on Windows the `golang_org` folder can be found at `C:\\Go\\src\\vendor`. ",
    "CrabbyPete": "I symlinked and I still get errors like\r\nusr/local/Cellar/go/1.8/libexec/src/crypto/tls/key_agreement.go:20:2: could not import golang_org/x/crypto/curve25519 (cannot find package \"golang_org/x/crypto/curve25519\" in any of:\r\n\t/usr/local/Cellar/go/1.8/libexec/src/golang_org/x/crypto/curve25519 (from $GOROOT). I symlinked and I still get errors like\r\nusr/local/Cellar/go/1.8/libexec/src/crypto/tls/key_agreement.go:20:2: could not import golang_org/x/crypto/curve25519 (cannot find package \"golang_org/x/crypto/curve25519\" in any of:\r\n\t/usr/local/Cellar/go/1.8/libexec/src/golang_org/x/crypto/curve25519 (from $GOROOT). ",
    "rgcooper53": "apologies, as soon as I looked at the prior issues I realized I am late to the game, so I take it that for now this won't work.  Thanks.  . apologies, as soon as I looked at the prior issues I realized I am late to the game, so I take it that for now this won't work.  Thanks.  . ",
    "MaxPRafferty": "Seems like it - dunno why it is still the top google link. Try Delve, it works well for me: https://blog.gopheracademy.com/advent-2015/debugging-with-delve/ \r\nIf youre on osx, its as easy as `brew install go-delve/delve/delve` then `dlv debug` from inside your project directory.. Seems like it - dunno why it is still the top google link. Try Delve, it works well for me: https://blog.gopheracademy.com/advent-2015/debugging-with-delve/ \r\nIf youre on osx, its as easy as `brew install go-delve/delve/delve` then `dlv debug` from inside your project directory.. ",
    "horkhe": "I have added deprecation notice at the top of the readme file. Unless @jeremyschlatter or anybody else would like to step in and become a project maintainer.. I have added deprecation notice at the top of the readme file. Unless @jeremyschlatter or anybody else would like to step in and become a project maintainer.. "
}