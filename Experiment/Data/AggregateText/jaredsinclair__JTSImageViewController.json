{
    "mattbischoff": ":+1:\n. :+1:\n. ",
    "jaredsinclair": "Just pushed up my podspec. Didn't see yours yet. :-)\n. Yeah, I don't use CocoaPods myself so I don't know what needed. An OvershareKit contributor added them to the OvershareKit podspec, so I figured somebody somewhere must need them.\n. That\u2019s on purpose. The fact that it\u2019s an image view is an implementation detail. Callers don\u2019t need to know that it\u2019s a subclass of UIView.\n\n## \n\nJared Sinclair\nSent with Sparrow (http://www.sparrowmailapp.com/?sig)\n\nOn Tuesday, April 1, 2014 at 10:24 AM, dkhamsing wrote:\n\n> Maybe nitpicking here but the definition and return are not consistent in blurredSnapshotFromParentmostViewController: (https://github.com/jaredsinclair/JTSImageViewController/blob/master/Source/JTSImageViewController.m#L788): defined as UIView and returned as UIImageView\n> Thanks for your work :-)\n> \n> \u2014\n> Reply to this email directly or view it on GitHub (https://github.com/jaredsinclair/JTSImageViewController/issues/2).\n. Fair question, though. :-)\n. Exposed the label and hints as readwrite properties.\n. That's certainly possible on older devices. What device are you testing with? That code is taken directly from Apple's open source `UIImage+ImageEffects` category (part of the WWDC 2013 sample code).\n\nYou can turn off the blurring effect by passing `JTSImageViewControllerBackgroundStyle_ScaledDimmed` as the background style.\n. I pushed a possible fix for this issue to the `dev` branch. Would you mind seeing if this helps?\n. Pull requests should now be submitted on the `dev` branch (I'm updating the README in a bit).\n\nI am not sure that this is the best way to go about the result you're after. The method that shows/hides the progress and activity indicators (the progress timer callback) are where hiding logic should go, especially since the \"hideSpinner\" property could be set from NO to YES at any time. Implementing the logic in `viewDidLoad` is prone to cause confusion for future devs.\n\nAnother reason I'm not sure this is the right solution, is that these indicators are shown in response to image downloads. Since these are network-dependent, arbitrarily setting `hideSpinner` to `NO` would not be a good idea for anyone on a slow network (which is still common, e.g. for commuters). Another solution would be to not show the activity/progress indicator until after a pre-defined interval (say, 0.1 to 0.2 seconds), which would hide them for fast downloads without also hiding them for slower downloads.\n. When they're ready. :-)\n. You're gtg. Submitted a PR to the Specs repo.\n. Thanks!\n. Thanks, I'll look into this.\n. Closing this in favor of moving the discussion here: https://github.com/jaredsinclair/JTSImageViewController/pull/13\n. There's too much work that would have to be undertaken to provide iOS 6 support, especially since that 11% is diminishing, not increasing.\n. Yep. short of adding an OpenGL library like GPUImage, I don't think there's a way around that delay on older devices.\n. This looks really great! Welcome improvements. I have a few questions.\n\n**New Dependency?**\n\nSo `SDWebImage` has only been included for the sample app, right? It's not an external dependency?\n\n**Naming**\n\nI think the new methods would benefit from more self-explanatory names. Something more like this:\n\n```\n- (instancetype)initWithImageInfo:(JTSImageInfo *)imageInfo\n                             mode:(JTSImageViewControllerMode)mode\n                  backgroundStyle:(JTSImageViewControllerBackgroundStyle)backgroundStyle\n       customImageLoadingProgress:(NSProgress*)progress;\n```\n\nAnd this:\n\n```\n-(void)customImageLoadingDidFinish:(UIImage*)image;\n```\n\n**NSProgress**\n\nAre there any potential conflicts when using an NSProgress to track progress? I don't understand from reading the docs how multiple **unrelated** NSProgress instances are resolved.\n. Thanks for the clarifications. I'm AFK at the moment, but I'm looking forward to trying this pull request out for myself. :-)\n. Adding a comment here. \n. ? There's already support for all for orientations in the latest release. \n\nSent from my iPhone\n\n> On Apr 30, 2014, at 8:04 PM, dkhamsing notifications@github.com wrote:\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n. Sorry, introducing iOS 6 support means I'd have to continue supporting it in the future. JTSIVC will continue to require iOS 7 or later.\n. Closing this but adding the change manually on the `dev` branch, along with a bunch of new stuff. Thanks.\n. Please see [this](https://github.com/jaredsinclair/JTSImageViewController/pull/24#discussion_r16032771) and [this](https://github.com/jaredsinclair/JTSImageViewController/pull/24#discussion_r16032775). Pinging @mtitolo.\n. @mtitolo Thanks!\n. That\u2019s a really interesting idea. I\u2019ll think about this one, since it would make the transitions look so much nicer.  \n\n\u2013 Jared Sinclair\n\nOn Wednesday, July 30, 2014 at 8:52 AM, Tobias Hagemann wrote:\n\n> Would this even be possible? To get a smooth transition from UIImageViews that have a layer.cornerRadius set.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub (https://github.com/jaredsinclair/JTSImageViewController/issues/25).\n. I'm closing the pull request so I can add your code manually on the `dev` branch. I'm in the middle of a big cleanup to dot notation and some other iOS 8 fixes. This way I can handle any merge conflicts myself and save you the trouble.\n\nYour patch looks _really_ nice. Thanks. You'll get credit in the actual commit message containing this code.\n. Please post a sample project.\n. Thanks, fixed.\n. Have you pulled the latest changes from master? This issue was fixed about 9 days ago.\n. Yep. I'll fix it.\n. I'm closing this because JTSImageviewcontroller intentionally leaves this kind of UI up to the implementing application. The appropriate hook is the [interactions delegate](https://github.com/jaredsinclair/JTSImageViewController/blob/master/Source/JTSImageViewController.h#L170).\n. I'm not convinced that UIMenuController is worth the trouble, since there are plenty of alternatives that don't require such changes: action sheets, etc. \n\nSent from my iPhone\n\n> On Sep 8, 2014, at 5:07 PM, \"Ignacio Romero Z.\" notifications@github.com wrote:\n> \n> I though it too, but unfortunately, getting a delegate callback of the long press gesture is not enough, since:\n> \n> the gesture object is not returned, to detect the gesture position and therefore align the appropriate UI.\n> to conform to UIMenuController the object must override several UIResponder methods like -canBecomeFirstResponder, -canPerformAction:withSender: and -(void)copy:(id)sender, which doesn't make sense to do outside of JTSImageViewController since its view is present on top of the presenting view controller.\n> \u2014\n> Reply to this email directly or view it on GitHub.\n. @dzenbot Alright, you convinced me. I like that it's opt-in and enabled via the delegate method.\n. @bcapps Although I feel compelled to say that that the use of the UIMenuController in Photos.app in particular confuses the hell out of me all the time. I would wager that my use case is the average one, that users **almost never** need to copy and paste and image, but they'll often want to share it / add it to an album / etc. \n. I'll do what I can, but some of this may be beyond my control. The new simulators are full of inconsistencies (UIScreen main screen scale = 2 etc.)\n. Nice addition.\n. Thanks. This issue has already been fixed on the dev branch and is awaiting further testing before merging to master. Seems good so far. The dev branch is where day/to/day work can be found.\n\n> On Oct 6, 2014, at 12:10 AM, Matt Moss notifications@github.com wrote:\n> \n> Fixed issue where double tapping on images causes a flicker in iOS 8.\n> \n> You can merge this Pull Request by running\n> \n>   git pull https://github.com/matthewmoss/JTSImageViewController master\n> Or view, comment on, or merge it at:\n> \n>   https://github.com/jaredsinclair/JTSImageViewController/pull/34\n> \n> Commit Summary\n> \n> Fixed flicker on double tap\n> File Changes\n> \n> M Source/JTSImageViewController.m (2)\n> Patch Links:\n> \n> https://github.com/jaredsinclair/JTSImageViewController/pull/34.patch\n> https://github.com/jaredsinclair/JTSImageViewController/pull/34.diff\n> \u2014\n> Reply to this email directly or view it on GitHub.\n. I like this. Can you fix the merge conflict so I can merge it?\n. Merged and trunked.\n. This has been fixed on `dev`, merging to `master` soon.\n. Thanks!\n. This is a good suggestion.\n. Thanks.\n. Are you providing the imageInfo with an `image` or a `placeholderImage` property before initializing the viewer?\n. http://git-scm.com/docs/git-submodule or `CMD+A, CMD+V`\n. This delegate: https://github.com/jaredsinclair/JTSImageViewController/blob/master/Source/JTSImageViewController.h#L217\n. Can you please apply the same correction to line 827 inside `showImageViewerByScalingDownFromOffscreenPositionWithViewController:`? That's an alternate presentation style for when a thumbnail expansion isn't appropriate.\n\nThanks!\n. I am certain that this is not the default UIKit behavior on iOS 8. Set an Xcode symbolic breakpoint on `[UIScrollView setContentOffset:]` and read the call stacks until you find your culprit. \n\n> On Feb 22, 2015, at 12:26 AM, Shayan Yousefizadeh notifications@github.com wrote:\n> \n> Hi,\n> \n> First of all thank you for all the amazing work on this project.\n> \n> The issue I have is very minuscule. In iOS 8 while using a UITableView, I present the JTSImageViewController and upon dismissal the table view scrolls (not animated) to the top, that is to say the contentOffset is lost.\n> \n> I read through most of the code in JTSImageViewController.m and it is not at fault. Apparently it's the default behaviour to reset the contentOffset after returning from a modal view controller. I have tried automaticallyAdjustsScrollViewInsets = NO and using a UITableView inside a UIViewController instead of a UITableViewController but no luck. I've also tried setting the contentOffset back after the dismissal but it flashes.\n> \n> It seems setting the modal presentation style of JTSImageViewController to UIModalPresentationOverFullScreen fixes the issue (since it doesn't remove the hierarchy below it and retains the scroll position I think). As this enum is new to iOS 8 I am going to assume that it's an iOS 8 only issue (since if it wasn't there would be more issues about it).\n> \n> Any thoughts? Has anyone else experienced this? If so should I make a pull request for this simple change?\n> \n> if ([[[UIDevice currentDevice] systemVersion] compare:@\"8.0\" options:NSNumericSearch] != NSOrderedAscending) {\n>     self.modalPresentationStyle = UIModalPresentationOverFullScreen;\n> }\n> \u2014\n> Reply to this email directly or view it on GitHub.\n. What warning is given?\n. @12207480 Thanks for the reproducible test case. Fixed! :-)\n. You can use this in a project that also uses Swift.\n\n\u2013 Jared Sinclair\n\nOn Tuesday, April 7, 2015 at 10:28 AM, Stefan Sturm wrote:\n\n> How is the compatibility to use this library in a Swift project?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub (https://github.com/jaredsinclair/JTSImageViewController/issues/57).\n. Cool. I worry that implementers might get confused by the `duration` argument since this is called after the animation is over. Maybe drop that argument?\n. It sounds like your Xcode app target isn't configured to support the iPhone 6. If you're not using a launch storyboard you'll have to include the appropriate launch images to get native support for iPhone 6 and 6 Plus.\n. Bah, thanks, will do.\n. Okay, cool. The latest is now `1.5.1`, too.\n. Fixed in 1.5.1\n. That\u2019s in there for legacy reasons. At the time I created JTSImageviewController, not every app was using the modern style. In the future I will remove these references but there's no reason to do so hastily. Your app can use `prefersStatusBarHidden` in all your view controllers and things will \"just work.\"\n. This PR changes a _lot_ more than just checking for GIFs, including rewriting most of the pod spec.\n. Just pushed up my podspec. Didn't see yours yet. :-)\n. Yeah, I don't use CocoaPods myself so I don't know what needed. An OvershareKit contributor added them to the OvershareKit podspec, so I figured somebody somewhere must need them.\n. That\u2019s on purpose. The fact that it\u2019s an image view is an implementation detail. Callers don\u2019t need to know that it\u2019s a subclass of UIView.\n\n## \n\nJared Sinclair\nSent with Sparrow (http://www.sparrowmailapp.com/?sig)\n\nOn Tuesday, April 1, 2014 at 10:24 AM, dkhamsing wrote:\n\n> Maybe nitpicking here but the definition and return are not consistent in blurredSnapshotFromParentmostViewController: (https://github.com/jaredsinclair/JTSImageViewController/blob/master/Source/JTSImageViewController.m#L788): defined as UIView and returned as UIImageView\n> Thanks for your work :-)\n> \n> \u2014\n> Reply to this email directly or view it on GitHub (https://github.com/jaredsinclair/JTSImageViewController/issues/2).\n. Fair question, though. :-)\n. Exposed the label and hints as readwrite properties.\n. That's certainly possible on older devices. What device are you testing with? That code is taken directly from Apple's open source `UIImage+ImageEffects` category (part of the WWDC 2013 sample code).\n\nYou can turn off the blurring effect by passing `JTSImageViewControllerBackgroundStyle_ScaledDimmed` as the background style.\n. I pushed a possible fix for this issue to the `dev` branch. Would you mind seeing if this helps?\n. Pull requests should now be submitted on the `dev` branch (I'm updating the README in a bit).\n\nI am not sure that this is the best way to go about the result you're after. The method that shows/hides the progress and activity indicators (the progress timer callback) are where hiding logic should go, especially since the \"hideSpinner\" property could be set from NO to YES at any time. Implementing the logic in `viewDidLoad` is prone to cause confusion for future devs.\n\nAnother reason I'm not sure this is the right solution, is that these indicators are shown in response to image downloads. Since these are network-dependent, arbitrarily setting `hideSpinner` to `NO` would not be a good idea for anyone on a slow network (which is still common, e.g. for commuters). Another solution would be to not show the activity/progress indicator until after a pre-defined interval (say, 0.1 to 0.2 seconds), which would hide them for fast downloads without also hiding them for slower downloads.\n. When they're ready. :-)\n. You're gtg. Submitted a PR to the Specs repo.\n. Thanks!\n. Thanks, I'll look into this.\n. Closing this in favor of moving the discussion here: https://github.com/jaredsinclair/JTSImageViewController/pull/13\n. There's too much work that would have to be undertaken to provide iOS 6 support, especially since that 11% is diminishing, not increasing.\n. Yep. short of adding an OpenGL library like GPUImage, I don't think there's a way around that delay on older devices.\n. This looks really great! Welcome improvements. I have a few questions.\n\n**New Dependency?**\n\nSo `SDWebImage` has only been included for the sample app, right? It's not an external dependency?\n\n**Naming**\n\nI think the new methods would benefit from more self-explanatory names. Something more like this:\n\n```\n- (instancetype)initWithImageInfo:(JTSImageInfo *)imageInfo\n                             mode:(JTSImageViewControllerMode)mode\n                  backgroundStyle:(JTSImageViewControllerBackgroundStyle)backgroundStyle\n       customImageLoadingProgress:(NSProgress*)progress;\n```\n\nAnd this:\n\n```\n-(void)customImageLoadingDidFinish:(UIImage*)image;\n```\n\n**NSProgress**\n\nAre there any potential conflicts when using an NSProgress to track progress? I don't understand from reading the docs how multiple **unrelated** NSProgress instances are resolved.\n. Thanks for the clarifications. I'm AFK at the moment, but I'm looking forward to trying this pull request out for myself. :-)\n. Adding a comment here. \n. ? There's already support for all for orientations in the latest release. \n\nSent from my iPhone\n\n> On Apr 30, 2014, at 8:04 PM, dkhamsing notifications@github.com wrote:\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n. Sorry, introducing iOS 6 support means I'd have to continue supporting it in the future. JTSIVC will continue to require iOS 7 or later.\n. Closing this but adding the change manually on the `dev` branch, along with a bunch of new stuff. Thanks.\n. Please see [this](https://github.com/jaredsinclair/JTSImageViewController/pull/24#discussion_r16032771) and [this](https://github.com/jaredsinclair/JTSImageViewController/pull/24#discussion_r16032775). Pinging @mtitolo.\n. @mtitolo Thanks!\n. That\u2019s a really interesting idea. I\u2019ll think about this one, since it would make the transitions look so much nicer.  \n\n\u2013 Jared Sinclair\n\nOn Wednesday, July 30, 2014 at 8:52 AM, Tobias Hagemann wrote:\n\n> Would this even be possible? To get a smooth transition from UIImageViews that have a layer.cornerRadius set.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub (https://github.com/jaredsinclair/JTSImageViewController/issues/25).\n. I'm closing the pull request so I can add your code manually on the `dev` branch. I'm in the middle of a big cleanup to dot notation and some other iOS 8 fixes. This way I can handle any merge conflicts myself and save you the trouble.\n\nYour patch looks _really_ nice. Thanks. You'll get credit in the actual commit message containing this code.\n. Please post a sample project.\n. Thanks, fixed.\n. Have you pulled the latest changes from master? This issue was fixed about 9 days ago.\n. Yep. I'll fix it.\n. I'm closing this because JTSImageviewcontroller intentionally leaves this kind of UI up to the implementing application. The appropriate hook is the [interactions delegate](https://github.com/jaredsinclair/JTSImageViewController/blob/master/Source/JTSImageViewController.h#L170).\n. I'm not convinced that UIMenuController is worth the trouble, since there are plenty of alternatives that don't require such changes: action sheets, etc. \n\nSent from my iPhone\n\n> On Sep 8, 2014, at 5:07 PM, \"Ignacio Romero Z.\" notifications@github.com wrote:\n> \n> I though it too, but unfortunately, getting a delegate callback of the long press gesture is not enough, since:\n> \n> the gesture object is not returned, to detect the gesture position and therefore align the appropriate UI.\n> to conform to UIMenuController the object must override several UIResponder methods like -canBecomeFirstResponder, -canPerformAction:withSender: and -(void)copy:(id)sender, which doesn't make sense to do outside of JTSImageViewController since its view is present on top of the presenting view controller.\n> \u2014\n> Reply to this email directly or view it on GitHub.\n. @dzenbot Alright, you convinced me. I like that it's opt-in and enabled via the delegate method.\n. @bcapps Although I feel compelled to say that that the use of the UIMenuController in Photos.app in particular confuses the hell out of me all the time. I would wager that my use case is the average one, that users **almost never** need to copy and paste and image, but they'll often want to share it / add it to an album / etc. \n. I'll do what I can, but some of this may be beyond my control. The new simulators are full of inconsistencies (UIScreen main screen scale = 2 etc.)\n. Nice addition.\n. Thanks. This issue has already been fixed on the dev branch and is awaiting further testing before merging to master. Seems good so far. The dev branch is where day/to/day work can be found.\n\n> On Oct 6, 2014, at 12:10 AM, Matt Moss notifications@github.com wrote:\n> \n> Fixed issue where double tapping on images causes a flicker in iOS 8.\n> \n> You can merge this Pull Request by running\n> \n>   git pull https://github.com/matthewmoss/JTSImageViewController master\n> Or view, comment on, or merge it at:\n> \n>   https://github.com/jaredsinclair/JTSImageViewController/pull/34\n> \n> Commit Summary\n> \n> Fixed flicker on double tap\n> File Changes\n> \n> M Source/JTSImageViewController.m (2)\n> Patch Links:\n> \n> https://github.com/jaredsinclair/JTSImageViewController/pull/34.patch\n> https://github.com/jaredsinclair/JTSImageViewController/pull/34.diff\n> \u2014\n> Reply to this email directly or view it on GitHub.\n. I like this. Can you fix the merge conflict so I can merge it?\n. Merged and trunked.\n. This has been fixed on `dev`, merging to `master` soon.\n. Thanks!\n. This is a good suggestion.\n. Thanks.\n. Are you providing the imageInfo with an `image` or a `placeholderImage` property before initializing the viewer?\n. http://git-scm.com/docs/git-submodule or `CMD+A, CMD+V`\n. This delegate: https://github.com/jaredsinclair/JTSImageViewController/blob/master/Source/JTSImageViewController.h#L217\n. Can you please apply the same correction to line 827 inside `showImageViewerByScalingDownFromOffscreenPositionWithViewController:`? That's an alternate presentation style for when a thumbnail expansion isn't appropriate.\n\nThanks!\n. I am certain that this is not the default UIKit behavior on iOS 8. Set an Xcode symbolic breakpoint on `[UIScrollView setContentOffset:]` and read the call stacks until you find your culprit. \n\n> On Feb 22, 2015, at 12:26 AM, Shayan Yousefizadeh notifications@github.com wrote:\n> \n> Hi,\n> \n> First of all thank you for all the amazing work on this project.\n> \n> The issue I have is very minuscule. In iOS 8 while using a UITableView, I present the JTSImageViewController and upon dismissal the table view scrolls (not animated) to the top, that is to say the contentOffset is lost.\n> \n> I read through most of the code in JTSImageViewController.m and it is not at fault. Apparently it's the default behaviour to reset the contentOffset after returning from a modal view controller. I have tried automaticallyAdjustsScrollViewInsets = NO and using a UITableView inside a UIViewController instead of a UITableViewController but no luck. I've also tried setting the contentOffset back after the dismissal but it flashes.\n> \n> It seems setting the modal presentation style of JTSImageViewController to UIModalPresentationOverFullScreen fixes the issue (since it doesn't remove the hierarchy below it and retains the scroll position I think). As this enum is new to iOS 8 I am going to assume that it's an iOS 8 only issue (since if it wasn't there would be more issues about it).\n> \n> Any thoughts? Has anyone else experienced this? If so should I make a pull request for this simple change?\n> \n> if ([[[UIDevice currentDevice] systemVersion] compare:@\"8.0\" options:NSNumericSearch] != NSOrderedAscending) {\n>     self.modalPresentationStyle = UIModalPresentationOverFullScreen;\n> }\n> \u2014\n> Reply to this email directly or view it on GitHub.\n. What warning is given?\n. @12207480 Thanks for the reproducible test case. Fixed! :-)\n. You can use this in a project that also uses Swift.\n\n\u2013 Jared Sinclair\n\nOn Tuesday, April 7, 2015 at 10:28 AM, Stefan Sturm wrote:\n\n> How is the compatibility to use this library in a Swift project?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub (https://github.com/jaredsinclair/JTSImageViewController/issues/57).\n. Cool. I worry that implementers might get confused by the `duration` argument since this is called after the animation is over. Maybe drop that argument?\n. It sounds like your Xcode app target isn't configured to support the iPhone 6. If you're not using a launch storyboard you'll have to include the appropriate launch images to get native support for iPhone 6 and 6 Plus.\n. Bah, thanks, will do.\n. Okay, cool. The latest is now `1.5.1`, too.\n. Fixed in 1.5.1\n. That\u2019s in there for legacy reasons. At the time I created JTSImageviewController, not every app was using the modern style. In the future I will remove these references but there's no reason to do so hastily. Your app can use `prefersStatusBarHidden` in all your view controllers and things will \"just work.\"\n. This PR changes a _lot_ more than just checking for GIFs, including rewriting most of the pod spec.\n. ",
    "dkhamsing": "I thought it might be on purpose\nThx\n. @bcapps thanks man, nice article\n. uh.. \nyes\n. Yeah, I like the idea of the pre-defined interval.\n. Oops my bad, my app has the wrong device orientation setting\n\nThanks Jared\n. I thought it might be on purpose\nThx\n. @bcapps thanks man, nice article\n. uh.. \nyes\n. Yeah, I like the idea of the pre-defined interval.\n. Oops my bad, my app has the wrong device orientation setting\n\nThanks Jared\n. ",
    "bcapps": "@dkhamsing Further reading on this principle, in case you're interested: http://en.wikipedia.org/wiki/Liskov_substitution_principle\n. @jaredsinclair Devil's Advocate: A menu controller is the control that people expect from using the Photos and Messages apps and covers less of the image than an action sheet.\n. @jaredsinclair Maybe, but I'm the opposite way. I constantly long press and copy images into other apps and forget that there's a share option at all in Photos. In fact, I do it in Messages conversations all the time because it feels faster to switch apps and paste than it does to re-find a conversation when I share to Messages. I don't know if most people ever need to copy or paste an image, but I bet that the interaction isn't totally foreign to them, either.\n\nIt's interesting that this even came up, because I generally feel that third party libraries should be as simple and maintainable as possible, but I jumped in with my quick thought just because of how frequently I actually use image copying and pasting.\n. @dkhamsing Further reading on this principle, in case you're interested: http://en.wikipedia.org/wiki/Liskov_substitution_principle\n. @jaredsinclair Devil's Advocate: A menu controller is the control that people expect from using the Photos and Messages apps and covers less of the image than an action sheet.\n. @jaredsinclair Maybe, but I'm the opposite way. I constantly long press and copy images into other apps and forget that there's a share option at all in Photos. In fact, I do it in Messages conversations all the time because it feels faster to switch apps and paste than it does to re-find a conversation when I share to Messages. I don't know if most people ever need to copy or paste an image, but I bet that the interaction isn't totally foreign to them, either.\n\nIt's interesting that this even came up, because I generally feel that third party libraries should be as simple and maintainable as possible, but I jumped in with my quick thought just because of how frequently I actually use image copying and pasting.\n. ",
    "jordanbrown": "+1\n. +1\n. ",
    "guoxj": "ipod 4\uff0c and thanks for your reply\n. ipod 4\uff0c and thanks for your reply\n. ",
    "EsSpectacularrr": "Agreed but its a large enough number to warrant support.\n. changing JTSImageViewControllerBackgroundStyle_ScaledDimmedBlurred to JTSImageViewControllerBackgroundStyle_ScaledDimmed fixes it, there's a high CPU usage spike when calculating the blur I think.\n. Agreed but its a large enough number to warrant support.\n. changing JTSImageViewControllerBackgroundStyle_ScaledDimmedBlurred to JTSImageViewControllerBackgroundStyle_ScaledDimmed fixes it, there's a high CPU usage spike when calculating the blur I think.\n. ",
    "geoffmacd": "**Dependancy**\n\nSDWebImage was intended as dependancy for sample app only of course as an example of why it is useful to have this custom progress initializer. However, I removed it entirely as I didn't want to add so many files to the repo and didn't want to create a podfile for just a sample app. Instead I modified the sample app to use NSProgress directly using NSURLSessionDownloadTask request and it's delegate methods to update progress.\n\n**Naming**\n\nI agree they needed to be more verbose and I commited your suggestions.\n\n**NSProgress**\n\nThis object is simply used as a way to encapsulate the progression of a unit of work. It is used in AFNetworking which is what inspired this need. Read [Matt Thompson's explanation](http://nshipster.com/ios7/)\n. **Dependancy**\n\nSDWebImage was intended as dependancy for sample app only of course as an example of why it is useful to have this custom progress initializer. However, I removed it entirely as I didn't want to add so many files to the repo and didn't want to create a podfile for just a sample app. Instead I modified the sample app to use NSProgress directly using NSURLSessionDownloadTask request and it's delegate methods to update progress.\n\n**Naming**\n\nI agree they needed to be more verbose and I commited your suggestions.\n\n**NSProgress**\n\nThis object is simply used as a way to encapsulate the progression of a unit of work. It is used in AFNetworking which is what inspired this need. Read [Matt Thompson's explanation](http://nshipster.com/ios7/)\n. ",
    "iaomw": "Hi @jaredsinclair , are you still merging that? \n. Hi @jaredsinclair , are you still merging that? \n. ",
    "LanceFu": "I know this is old, but for those who are using JTSImageViewController and want to cache with SDWebImage, you can easily achieve it by using the JTSImageViewControllerDismissalDelegate to cache when the view dismisses.\n\nThis is what I am doing right now: \n- In the tap action on the UIImageView, check if image is cached:\n\n```\n- (void)tapImageViewAction:(id)sender {\n    UIImage *image = [[SDImageCache sharedImageCache] imageFromDiskCacheForKey:imageURL.absoluteString];\n    if (image) {\n        JTSImageInfo *imageInfo = [[JTSImageInfo alloc] init];\n        imageInfo.image = image;\n        imageInfo.referenceRect = self.imageView.frame;\n        imageInfo.referenceView = self.imageView.superview;\n        JTSImageViewController *imageViewer = [[JTSImageViewController alloc]\n                                               initWithImageInfo:imageInfo\n                                               mode:JTSImageViewControllerMode_Image\n                                               backgroundStyle:JTSImageViewControllerBackgroundOption_Scaled];\n        [imageViewer showFromViewController:self transition:JTSImageViewControllerTransition_FromOriginalPosition];\n    }\n    else {\n        JTSImageInfo *imageInfo = [[JTSImageInfo alloc] init];\n        imageInfo.imageURL = imageURL;\n        imageInfo.referenceRect = self.imageView.frame;\n        imageInfo.referenceView = self.imageView.superview;\n        JTSImageViewController *imageViewer = [[JTSImageViewController alloc]\n                                               initWithImageInfo:imageInfo\n                                               mode:JTSImageViewControllerMode_Image\n                                               backgroundStyle:JTSImageViewControllerBackgroundOption_Scaled];\n        imageViewer.dismissalDelegate = self;\n        [imageViewer showFromViewController:self transition:JTSImageViewControllerTransition_FromOriginalPosition];\n    }\n}\n```\n\nIf an image is returned, then you just pass it to JTSImageInfo and present the controller. If not, then you pass the URL and let JTSImageViewController handle the download.\n- Do the following to cache the image when image viewer dismissed:\n\n```\n- (void)imageViewerDidDismiss:(JTSImageViewController *)imageViewer {\n    if (imageViewer.image) {\n        [[SDImageCache sharedImageCache] storeImage:imageViewer.image forKey:imageURL.absoluteString];\n    }\n}\n```\n\nHope this helps. I do think keeping JTSImageViewController as light as possible is better. \n. I know this is old, but for those who are using JTSImageViewController and want to cache with SDWebImage, you can easily achieve it by using the JTSImageViewControllerDismissalDelegate to cache when the view dismisses.\n\nThis is what I am doing right now: \n- In the tap action on the UIImageView, check if image is cached:\n\n```\n- (void)tapImageViewAction:(id)sender {\n    UIImage *image = [[SDImageCache sharedImageCache] imageFromDiskCacheForKey:imageURL.absoluteString];\n    if (image) {\n        JTSImageInfo *imageInfo = [[JTSImageInfo alloc] init];\n        imageInfo.image = image;\n        imageInfo.referenceRect = self.imageView.frame;\n        imageInfo.referenceView = self.imageView.superview;\n        JTSImageViewController *imageViewer = [[JTSImageViewController alloc]\n                                               initWithImageInfo:imageInfo\n                                               mode:JTSImageViewControllerMode_Image\n                                               backgroundStyle:JTSImageViewControllerBackgroundOption_Scaled];\n        [imageViewer showFromViewController:self transition:JTSImageViewControllerTransition_FromOriginalPosition];\n    }\n    else {\n        JTSImageInfo *imageInfo = [[JTSImageInfo alloc] init];\n        imageInfo.imageURL = imageURL;\n        imageInfo.referenceRect = self.imageView.frame;\n        imageInfo.referenceView = self.imageView.superview;\n        JTSImageViewController *imageViewer = [[JTSImageViewController alloc]\n                                               initWithImageInfo:imageInfo\n                                               mode:JTSImageViewControllerMode_Image\n                                               backgroundStyle:JTSImageViewControllerBackgroundOption_Scaled];\n        imageViewer.dismissalDelegate = self;\n        [imageViewer showFromViewController:self transition:JTSImageViewControllerTransition_FromOriginalPosition];\n    }\n}\n```\n\nIf an image is returned, then you just pass it to JTSImageInfo and present the controller. If not, then you pass the URL and let JTSImageViewController handle the download.\n- Do the following to cache the image when image viewer dismissed:\n\n```\n- (void)imageViewerDidDismiss:(JTSImageViewController *)imageViewer {\n    if (imageViewer.image) {\n        [[SDImageCache sharedImageCache] storeImage:imageViewer.image forKey:imageURL.absoluteString];\n    }\n}\n```\n\nHope this helps. I do think keeping JTSImageViewController as light as possible is better. \n. ",
    "winzig": "Is this PR still being considered for merging? I too am needing to download from a specialized source, and it would be nice to tap into the progress bar JTSImageViewController displays when it is in charge of downloading the image.\n. @inb4ohnoes I was interested in these features so was checking out your branch, but can't get it to compile. Looks like JTSMediaInfo.h (replacement for JTSImageInfo.h?) is missing from the repo?\n. @inb4ohnoes OK it's compiling now, thanks. However, experimenting with the sample app (modified to try and use the new functionality), it doesn't seem to be working. I've tried setting imageInfo.videoURL to an NSURL pointing to a video, instead of setting imageInfo.image, but then it crashes. (Looks like the code requires either the .image or .imagePlaceholder property to be set.) So I just set .image to the banecat image (the default), and ALSO set the videoURL, just to see if the video might start playing, but I don't see anything happening except for the image display. \n\nCan you provide an example of how you fire it up? Thanks!\n. Is this PR still being considered for merging? I too am needing to download from a specialized source, and it would be nice to tap into the progress bar JTSImageViewController displays when it is in charge of downloading the image.\n. @inb4ohnoes I was interested in these features so was checking out your branch, but can't get it to compile. Looks like JTSMediaInfo.h (replacement for JTSImageInfo.h?) is missing from the repo?\n. @inb4ohnoes OK it's compiling now, thanks. However, experimenting with the sample app (modified to try and use the new functionality), it doesn't seem to be working. I've tried setting imageInfo.videoURL to an NSURL pointing to a video, instead of setting imageInfo.image, but then it crashes. (Looks like the code requires either the .image or .imagePlaceholder property to be set.) So I just set .image to the banecat image (the default), and ALSO set the videoURL, just to see if the video might start playing, but I don't see anything happening except for the image display. \n\nCan you provide an example of how you fire it up? Thanks!\n. ",
    "kbala": "Yes, Good if it supports video. Really nice components, works like rock!\n\nThanks\n. Oh good. Let me test\n\nSent from my iPhone\n\n> On 24-Feb-2015, at 4:07 pm, Laurin Brandner notifications@github.com wrote:\n> \n> @rosskimes, @kbala, @BObereder I made a fork that has a basic video support.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n. Yes, Good if it supports video. Really nice components, works like rock!\n\nThanks\n. Oh good. Let me test\n\nSent from my iPhone\n\n> On 24-Feb-2015, at 4:07 pm, Laurin Brandner notifications@github.com wrote:\n> \n> @rosskimes, @kbala, @BObereder I made a fork that has a basic video support.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n. ",
    "BObereder": "Video would be amazing!\n. Video would be amazing!\n. ",
    "lbrndnr": "@rosskimes, @kbala, @BObereder I made a [fork](https://github.com/larcus94/JTSImageViewController) that has basic video support. \n. What the heck is happening, why did it add so many commits :D\n. Oh those are commits from the master branch as I synced them. Shouldn't matter I guess.\n. Excuse me? Would you mind explaining me what's wrong with this pull request?\n. @rosskimes, @kbala, @BObereder I made a [fork](https://github.com/larcus94/JTSImageViewController) that has basic video support. \n. What the heck is happening, why did it add so many commits :D\n. Oh those are commits from the master branch as I synced them. Shouldn't matter I guess.\n. Excuse me? Would you mind explaining me what's wrong with this pull request?\n. ",
    "happiehappie": "Just wondering, is this being worked on at the moment???\n. Just wondering, is this being worked on at the moment???\n. ",
    "ZevEisenberg": "Actually, Tweetbot has it aliased. Not sure where I saw it properly antialiased.\n. Actually, Tweetbot has it aliased. Not sure where I saw it properly antialiased.\n. ",
    "rounak": "I am also looking forward to the addition of this feature.\n. @mluisbrown Vertical gestured could be used to dismiss, and horizontal gestures could be used to page between images.\n. I am also looking forward to the addition of this feature.\n. @mluisbrown Vertical gestured could be used to dismiss, and horizontal gestures could be used to page between images.\n. ",
    "alvintchui": "would be very useful to have this enhancement done\n. would be very useful to have this enhancement done\n. ",
    "makartraktor": "me too!\n. me too!\n. ",
    "mluisbrown": "If you used the component you would understand why. What gesture would you use to scroll to the next image? A single touch pan is already used to flick / slide the image away. The use case for this control is clearly for viewing a single image at a time and then flicking it away to go back to where you were.\n. @isaced and @rounak have either of you played with JTSImageViewController? Either in the sample app or in the [Unread](https://itunes.apple.com/us/app/unread-rss-news-reader/id911364254?mt=8) app (originally created by Jared Sinclair)? Have you ever used a similar control in Tweetbot for iOS?\n\nIf you had, you would understand why there is no gesture that could be used for swiping between multiple images. The whole _point_ of this control is for viewing a **single** image and being able to dismiss it by flicking it in **any** direction.\n\nIf you would like an image viewer that supports multiple images, there are plenty of others out there.\n. @inb4ohnoes my bad, Tweetbot (which I use every day btw) does have multiple image support. They have done it by using the horizontal pan gesture, which significantly reduces the 'flickability' of the image to dismiss it, all though I guess it's a necessary compromise in that case. JTSImageViewController was created for Unread.app, where the use case is/was specifically single image viewing.\n. If you used the component you would understand why. What gesture would you use to scroll to the next image? A single touch pan is already used to flick / slide the image away. The use case for this control is clearly for viewing a single image at a time and then flicking it away to go back to where you were.\n. @isaced and @rounak have either of you played with JTSImageViewController? Either in the sample app or in the [Unread](https://itunes.apple.com/us/app/unread-rss-news-reader/id911364254?mt=8) app (originally created by Jared Sinclair)? Have you ever used a similar control in Tweetbot for iOS?\n\nIf you had, you would understand why there is no gesture that could be used for swiping between multiple images. The whole _point_ of this control is for viewing a **single** image and being able to dismiss it by flicking it in **any** direction.\n\nIf you would like an image viewer that supports multiple images, there are plenty of others out there.\n. @inb4ohnoes my bad, Tweetbot (which I use every day btw) does have multiple image support. They have done it by using the horizontal pan gesture, which significantly reduces the 'flickability' of the image to dismiss it, all though I guess it's a necessary compromise in that case. JTSImageViewController was created for Unread.app, where the use case is/was specifically single image viewing.\n. ",
    "isaced": "+1, Just like [IDMPhotoBrowser](https://github.com/ideaismobile/IDMPhotoBrowser).\n. +1, Just like [IDMPhotoBrowser](https://github.com/ideaismobile/IDMPhotoBrowser).\n. ",
    "inb4ohnoes": "I think if you had used Tweetbot like you said yourself, you would have seen that Tweetbot has multiple image support just like everybody here is requesting. Please check your facts before berating other people.\n. Sorry about that, try it again.\n. I have not updated the sample project to work with the new modifications yet, mainly because I haven\u2019t actually finished the implementation yet. When I get time this weekend I will be able to probably update the sample to work with the current implementation. \n. I think if you had used Tweetbot like you said yourself, you would have seen that Tweetbot has multiple image support just like everybody here is requesting. Please check your facts before berating other people.\n. Sorry about that, try it again.\n. I have not updated the sample project to work with the new modifications yet, mainly because I haven\u2019t actually finished the implementation yet. When I get time this weekend I will be able to probably update the sample to work with the current implementation. \n. ",
    "maxehmookau": "Yes please. :+1: \n. Yes please. :+1: \n. ",
    "dzenbot": "Any chance of merging this?\n. This is really helpful (and standard) for users. Must have!\n![image](https://cloud.githubusercontent.com/assets/590579/4192115/afbe0616-3794-11e4-9bd9-de0db2c46e38.png)\n. I though it too, but unfortunately, getting a delegate callback of the long press gesture is not enough, since:\n- the gesture object is not returned, to detect the gesture position and therefore align the appropriate UI.\n- to conform to UIMenuController the object must override several UIResponder methods like `-canBecomeFirstResponder`, `-canPerformAction:withSender:` and `-copy:`, which doesn't make sense to do outside of `JTSImageViewController` since its view is presented on top of the presenting view controller.\n. UIMenuController is the most common, and system-wide control to simply copy something. Like @bcapps just said, it is less intruding than an action sheet. Plus it's a very cheep alternative.\n\nIt's not a default behaviour either. Whoever wants to use it just needs to return a BOOL from the [interactions delegate](https://github.com/jaredsinclair/JTSImageViewController/blob/master/Source/JTSImageViewController.h#L170).\n. Great! Thanks\n. I tend to do the same than @bcapps. Copy/Pasting from app to app.\nIt's hard to tell which user case is the best, but to be able to give enough freedom to cover most user cases makes an app/library great IMHO.\n. Any chance of including this in a pod release? Thanks!\n. Thanks!\n. Any chance of merging this?\n. This is really helpful (and standard) for users. Must have!\n![image](https://cloud.githubusercontent.com/assets/590579/4192115/afbe0616-3794-11e4-9bd9-de0db2c46e38.png)\n. I though it too, but unfortunately, getting a delegate callback of the long press gesture is not enough, since:\n- the gesture object is not returned, to detect the gesture position and therefore align the appropriate UI.\n- to conform to UIMenuController the object must override several UIResponder methods like `-canBecomeFirstResponder`, `-canPerformAction:withSender:` and `-copy:`, which doesn't make sense to do outside of `JTSImageViewController` since its view is presented on top of the presenting view controller.\n. UIMenuController is the most common, and system-wide control to simply copy something. Like @bcapps just said, it is less intruding than an action sheet. Plus it's a very cheep alternative.\n\nIt's not a default behaviour either. Whoever wants to use it just needs to return a BOOL from the [interactions delegate](https://github.com/jaredsinclair/JTSImageViewController/blob/master/Source/JTSImageViewController.h#L170).\n. Great! Thanks\n. I tend to do the same than @bcapps. Copy/Pasting from app to app.\nIt's hard to tell which user case is the best, but to be able to give enough freedom to cover most user cases makes an app/library great IMHO.\n. Any chance of including this in a pod release? Thanks!\n. Thanks!\n. ",
    "mtitolo": "Sorry, been a bit busy. Should get to this in the next day or two.\n. Sorry, been a bit busy. Should get to this in the next day or two.\n. ",
    "anasb": "+1\n. +1\n. ",
    "tobihagemann": "I used your sample project. :)\n. :) Yeah, it's probably best to wait for the devices...\n. I had this issue, too... with `UILongPressGestureRecognizer` on a `UICollectionViewCell`. But that was totally fine, because the gesture recognizer event is called twice.\n\nCheck for this `if (gesture.state == UIGestureRecognizerStateBegan)` and `UIGestureRecognizerStateEnded` should be ignored.\n. I used your sample project. :)\n. :) Yeah, it's probably best to wait for the devices...\n. I had this issue, too... with `UILongPressGestureRecognizer` on a `UICollectionViewCell`. But that was totally fine, because the gesture recognizer event is called twice.\n\nCheck for this `if (gesture.state == UIGestureRecognizerStateBegan)` and `UIGestureRecognizerStateEnded` should be ignored.\n. ",
    "hampusiggstrom": "This issue differ from #29 and is still present in the current master branch. On double tap to zoom the image does not uses the tap location as the origin for the zoom animation.\n. This issue differ from #29 and is still present in the current master branch. On double tap to zoom the image does not uses the tap location as the origin for the zoom animation.\n. ",
    "honkmaster": "Thanks in advance.\n. Will this be merged anytime?\n. Nice feature, is a merge intended?\n. Thanks in advance.\n. Will this be merged anytime?\n. Nice feature, is a merge intended?\n. ",
    "pramodsharma403": "Hey...this issue fixed or not?? I am thinking to integrate in one of my project.. Thanx in advance\n. Hey...this issue fixed or not?? I am thinking to integrate in one of my project.. Thanx in advance\n. ",
    "matthewmoss": "Hey @pramodsharma403 and @honkmaster, fixed image flicker on double tap in #34.\n. Thanks!\n. Hey @pramodsharma403 and @honkmaster, fixed image flicker on double tap in #34.\n. Thanks!\n. ",
    "richardortiz84": "Apologies I see you have already included contentMode from the ImageInfo.\n. Apologies I see you have already included contentMode from the ImageInfo.\n. ",
    "andrew-frank": "Also it would be nice to add an option to disable flickToDismiss. In my case I don't need it that much, but it's a pain to zoom the image\n. thanks for response and closing the issue\n. Hi @bigbadleroybrown. I had no luck here (as of version 1.3), so I ended up using https://github.com/ideaismobile/IDMPhotoBrowser\n. Also it would be nice to add an option to disable flickToDismiss. In my case I don't need it that much, but it's a pain to zoom the image\n. thanks for response and closing the issue\n. Hi @bigbadleroybrown. I had no luck here (as of version 1.3), so I ended up using https://github.com/ideaismobile/IDMPhotoBrowser\n. ",
    "bigbadleroybrown": "Hey @frandrzej looks like you were doing something similar to what I've got going on. If you have a second I'd love to ask you a quick question about how you implemented this library with UIImageView inside of Tableview cell.\n\nThanks!\n. Hey @frandrzej looks like you were doing something similar to what I've got going on. If you have a second I'd love to ask you a quick question about how you implemented this library with UIImageView inside of Tableview cell.\n\nThanks!\n. ",
    "pranavss11": "Has this been merged to master? Coz I still see it with the latest cocoapods.\n. @jaredsinclair I still get a jerking motion with the latest cocoapods. Any updates?\n. Has this been merged to master? Coz I still see it with the latest cocoapods.\n. @jaredsinclair I still get a jerking motion with the latest cocoapods. Any updates?\n. ",
    "civilordergone": "It's still present w/ the latest build...\n. It's weird because the issue isn't consistent.  When presenting the\njtsimageviewer modal, it might appear to load properly on the 5th click or\nthe 12th...\n\nOk\n\nOn Monday, June 8, 2015, Evan Dekhayser notifications@github.com wrote:\n\n> Sorry I have not resolved this sooner. I will not have time to find the\n> root of the problem until school ends on the 18th.\n> \n> If you happen to fix the bug, please fork and file a pull request so it\n> can be fixed.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/jaredsinclair/JTSImageViewController/issues/39#issuecomment-110041517\n> .\n. It's occurring on my iPhone 6.  It appears to work properly on an iPhone 4s. :|\n. @jaredsinclair by adding the appropriate launch images, it'll get this project to work properly on the iPhone 6?\n. For launch images, I'm selecting \"iOS 7.0 and Later - iPhone Portrait\", do you mean I should select iOS 8 and later iphone portrait as well?\n. Okay, just added a launch storyboard and it added iPhone 6 support, thanks\n. It's still present w/ the latest build...\n. It's weird because the issue isn't consistent.  When presenting the\njtsimageviewer modal, it might appear to load properly on the 5th click or\nthe 12th...\n\nOk\n\nOn Monday, June 8, 2015, Evan Dekhayser notifications@github.com wrote:\n\n> Sorry I have not resolved this sooner. I will not have time to find the\n> root of the problem until school ends on the 18th.\n> \n> If you happen to fix the bug, please fork and file a pull request so it\n> can be fixed.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/jaredsinclair/JTSImageViewController/issues/39#issuecomment-110041517\n> .\n. It's occurring on my iPhone 6.  It appears to work properly on an iPhone 4s. :|\n. @jaredsinclair by adding the appropriate launch images, it'll get this project to work properly on the iPhone 6?\n. For launch images, I'm selecting \"iOS 7.0 and Later - iPhone Portrait\", do you mean I should select iOS 8 and later iphone portrait as well?\n. Okay, just added a launch storyboard and it added iPhone 6 support, thanks\n. ",
    "Kowaio": "Hi everybody,\n\nJust snaking in to say that I experience a similar problem in my app. All works well (entering, exiting, single taping, double taping) but when I'm trying to pinch to zoom in on the picture, the view is flickering and appears quickly below one finger and the other. I still don't know from where this bug is coming from though.\n\nThanks a lot for your help if you already experienced this issue guys!\n\nEdit: just uploaded a video that show the issue. Lower your sound, I sucked the conversion and it's noisy: http://cl.ly/070K282n2d1c\n\nBest,\n. Thanks for your input @runia!\n\nIt seems to do the trick so I think we can close this issue. \n\nMy best,\nG\n. Hi everybody,\n\nJust snaking in to say that I experience a similar problem in my app. All works well (entering, exiting, single taping, double taping) but when I'm trying to pinch to zoom in on the picture, the view is flickering and appears quickly below one finger and the other. I still don't know from where this bug is coming from though.\n\nThanks a lot for your help if you already experienced this issue guys!\n\nEdit: just uploaded a video that show the issue. Lower your sound, I sucked the conversion and it's noisy: http://cl.ly/070K282n2d1c\n\nBest,\n. Thanks for your input @runia!\n\nIt seems to do the trick so I think we can close this issue. \n\nMy best,\nG\n. ",
    "balkarov": "Hi, Kowaio!\n\nThis problem occurs only when Device Orientation is only Portrait. But if you use all Device Orientation (Portrait, Landskape Left, Right),  the pinch will work well!\n\nGood luck to you!\n. Hi, Kowaio!\n\nThis problem occurs only when Device Orientation is only Portrait. But if you use all Device Orientation (Portrait, Landskape Left, Right),  the pinch will work well!\n\nGood luck to you!\n. ",
    "jeremiahthomasharris": "I'm having this issue as well and would like to keep it in portrait only. \n. I have a pull request opened on March 18th that fixes the issue. You can pull from that until it gets merged in.\n. I'm having this issue as well and would like to keep it in portrait only. \n. I have a pull request opened on March 18th that fixes the issue. You can pull from that until it gets merged in.\n. ",
    "VrasidasP": "I still see that issue in the latest version, even when all orientations are supported.\nAny ideas what to do?\n. @jtbh89 Indeed your solution is what was needed! Thank you!\nSilly pan gesture...\n. I still see that issue in the latest version, even when all orientations are supported.\nAny ideas what to do?\n. @jtbh89 Indeed your solution is what was needed! Thank you!\nSilly pan gesture...\n. ",
    "seanhealy": "I'm also seeing this same issue. Just looking through older versions to see if it was lost somewhere.\n. +1 Would love to see this.\n. I'm also seeing this same issue. Just looking through older versions to see if it was lost somewhere.\n. +1 Would love to see this.\n. ",
    "mythodeia": "@jaredsinclair any updates on this?\n. @jaredsinclair any updates on this?\n. ",
    "jevonszmx": "same warning.\n\nI try to addGestureRecognizer to imageview in UItableViewCell\uff0cit woks fine\uff0cbut i get this warning\u3002\n. same warning.\n\nI try to addGestureRecognizer to imageview in UItableViewCell\uff0cit woks fine\uff0cbut i get this warning\u3002\n. ",
    "inPhilly": "I'm a very novice programmer so I have no idea how to do this, or I would do it myself. Sorry, because I do still think it would be a super useful enhancement.\n. The issue is that it is a user-supplied image. The user is able to select their own images, and an image may be smaller than the imageview size. In this case, I would hope that JTSImageViewController would resize the imageview or at least change its content mode accordingly. Not everything is controllable by the developer and often with images it is the case that image sizes are not under strict developer control so that the user can choose images appropriate to their task. While it is easier to enforce a max image size by resizing a large image, I personally do not find it user friendly to enforce a min image size, as the user doesn't even always control the image size themselves but may be showing an image from the web, etc. I just think it is always a good idea to handle each case scenario, this being an important one.\n\n> On Dec 25, 2015, at 10:55 PM, Yao (Frank) Fan notifications@github.com wrote:\n> \n> Hey mommyme, you might want to check if you have a larger image. If you used a larger one, which is larger or exactly the same as the image view, you'd get an image with very good quality.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n. I'm a very novice programmer so I have no idea how to do this, or I would do it myself. Sorry, because I do still think it would be a super useful enhancement.\n. The issue is that it is a user-supplied image. The user is able to select their own images, and an image may be smaller than the imageview size. In this case, I would hope that JTSImageViewController would resize the imageview or at least change its content mode accordingly. Not everything is controllable by the developer and often with images it is the case that image sizes are not under strict developer control so that the user can choose images appropriate to their task. While it is easier to enforce a max image size by resizing a large image, I personally do not find it user friendly to enforce a min image size, as the user doesn't even always control the image size themselves but may be showing an image from the web, etc. I just think it is always a good idea to handle each case scenario, this being an important one.\n\n> On Dec 25, 2015, at 10:55 PM, Yao (Frank) Fan notifications@github.com wrote:\n> \n> Hey mommyme, you might want to check if you have a larger image. If you used a larger one, which is larger or exactly the same as the image view, you'd get an image with very good quality.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n. ",
    "hashitha": "I had the same issue and it appear to happen when i calculated tableviewcell height from an attributed string in heightForRowAtIndexPath. i fixed this by caching the heights when it first loads.\n. I had the same issue and it appear to happen when i calculated tableviewcell height from an attributed string in heightForRowAtIndexPath. i fixed this by caching the heights when it first loads.\n. ",
    "nmock": "Thanks! That fixed the problem!\n. Thanks! That fixed the problem!\n. ",
    "markrickert": "No problem. You might also be interested in this that I whipped up this morning - https://github.com/OTGApps/motion-imager\n. No problem. You might also be interested in this that I whipped up this morning - https://github.com/OTGApps/motion-imager\n. ",
    "mjanda": "Sure. Done\n. Sure. Done\n. ",
    "Shayanzadeh": "Thanks for the response.\n\nI just tried that and looking at the call stack I don't see anything that could be causing it (that is in our control at least). Looks like most of it is just private internal methods that get called that trigger it. I Googled `_adjustContentOffsetIfNecessary` and this [tweet](https://twitter.com/steipete/status/219848151765483520) by Peter Steinberger suggests to make sure the main view isn't a scrollview and the first subview is a dummy view, as well as setting `automaticallyAdjustsScrollViewInsets = NO`, but I have tried both of those and it doesn't work.\n\nUnfortunately I have to finish this app in the next 3 days so I can't spend anymore time investigating, and my solution works in my case so I will just move on.\n\n```\n(lldb) bt\n* thread #1: tid = 0x413cb, 0x00000001867ecd00 UIKit`-[UIScrollView setContentOffset:], queue = 'com.apple.main-thread', stop reason = breakpoint 1.1\n  * frame #0: 0x00000001867ecd00 UIKit`-[UIScrollView setContentOffset:]\n    frame #1: 0x00000001868a2dd4 UIKit`-[UITableView setContentOffset:] + 300\n    frame #2: 0x0000000186aa7e40 UIKit`-[UIScrollView(UIScrollViewInternal) _adjustContentOffsetIfNecessary] + 864\n    frame #3: 0x00000001867e500c UIKit`-[UIScrollView setContentSize:] + 344\n    frame #4: 0x00000001868aa748 UIKit`-[UITableView _updateContentSize] + 540\n    frame #5: 0x00000001868b05f4 UIKit`-[UITableView didMoveToWindow] + 88\n    frame #6: 0x00000001867cd5f8 UIKit`-[UIView(Internal) _didMoveFromWindow:toWindow:] + 1464\n    frame #7: 0x00000001867eea34 UIKit`-[UIScrollView _didMoveFromWindow:toWindow:] + 68\n    frame #8: 0x00000001867cd310 UIKit`-[UIView(Internal) _didMoveFromWindow:toWindow:] + 720\n    frame #9: 0x00000001867cd310 UIKit`-[UIView(Internal) _didMoveFromWindow:toWindow:] + 720\n    frame #10: 0x00000001867cd310 UIKit`-[UIView(Internal) _didMoveFromWindow:toWindow:] + 720\n    frame #11: 0x00000001867cd310 UIKit`-[UIView(Internal) _didMoveFromWindow:toWindow:] + 720\n    frame #12: 0x00000001867cd310 UIKit`-[UIView(Internal) _didMoveFromWindow:toWindow:] + 720\n    frame #13: 0x00000001867cd310 UIKit`-[UIView(Internal) _didMoveFromWindow:toWindow:] + 720\n    frame #14: 0x00000001867cc9e0 UIKit`__45-[UIView(Hierarchy) _postMovedFromSuperview:]_block_invoke + 144\n    frame #15: 0x00000001867cc8c0 UIKit`-[UIView(Hierarchy) _postMovedFromSuperview:] + 484\n    frame #16: 0x00000001867d83a0 UIKit`-[UIView(Internal) _addSubview:positioned:relativeTo:] + 1764\n    frame #17: 0x0000000186805784 UIKit`+[UIView(UIViewAnimationWithBlocks) _setupAnimationWithDuration:delay:view:options:factory:animations:start:animationStateGenerator:completion:] + 508\n    frame #18: 0x000000018681d3d4 UIKit`+[UIView(UIViewAnimationWithBlocks) animateWithDuration:delay:options:animations:completion:] + 68\n    frame #19: 0x00000001868c3744 UIKit`-[UIViewControllerBuiltinTransitionViewAnimator animateTransition:] + 1140\n    frame #20: 0x0000000186ace738 UIKit`__56-[UIPresentationController runTransitionForCurrentState]_block_invoke + 1836\n    frame #21: 0x0000000186853564 UIKit`_applyBlockToCFArrayCopiedToStack + 356\n    frame #22: 0x00000001867c4e78 UIKit`_afterCACommitHandler + 532\n    frame #23: 0x0000000181fdaa50 CoreFoundation`__CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION__ + 32\n    frame #24: 0x0000000181fd79dc CoreFoundation`__CFRunLoopDoObservers + 360\n    frame #25: 0x0000000181fd7dbc CoreFoundation`__CFRunLoopRun + 836\n    frame #26: 0x0000000181f050a4 CoreFoundation`CFRunLoopRunSpecific + 396\n    frame #27: 0x000000018b09f5a4 GraphicsServices`GSEventRunModal + 168\n    frame #28: 0x0000000186836aa4 UIKit`UIApplicationMain + 1488\n    frame #29: 0x00000001000e3600 Jailbreak`main(argc=1, argv=0x000000016fd37a60) + 116 at main.m:14\n    frame #30: 0x0000000192ddaa08 libdyld.dylib`start + 4\n```\n. I totally forgot to mention that I was using iOS 8 dynamic cells with `self.tableView.rowHeight = UITableViewAutomaticDimension;` and that is completely the problem. Jerky scrolling and contentOffset issues due to it falling back on `estimatedRowHeight` and it being a poor estimate of the actual cell heights hence scrolling up. It's already given me days of grief with other things like pull to refresh and pagination and pushing a new view controller. There's even bug reports in the developer forums. I'm going to close this as there's nothing we can do to fix it \ud83d\ude04\n. Thanks for the response.\n\nI just tried that and looking at the call stack I don't see anything that could be causing it (that is in our control at least). Looks like most of it is just private internal methods that get called that trigger it. I Googled `_adjustContentOffsetIfNecessary` and this [tweet](https://twitter.com/steipete/status/219848151765483520) by Peter Steinberger suggests to make sure the main view isn't a scrollview and the first subview is a dummy view, as well as setting `automaticallyAdjustsScrollViewInsets = NO`, but I have tried both of those and it doesn't work.\n\nUnfortunately I have to finish this app in the next 3 days so I can't spend anymore time investigating, and my solution works in my case so I will just move on.\n\n```\n(lldb) bt\n* thread #1: tid = 0x413cb, 0x00000001867ecd00 UIKit`-[UIScrollView setContentOffset:], queue = 'com.apple.main-thread', stop reason = breakpoint 1.1\n  * frame #0: 0x00000001867ecd00 UIKit`-[UIScrollView setContentOffset:]\n    frame #1: 0x00000001868a2dd4 UIKit`-[UITableView setContentOffset:] + 300\n    frame #2: 0x0000000186aa7e40 UIKit`-[UIScrollView(UIScrollViewInternal) _adjustContentOffsetIfNecessary] + 864\n    frame #3: 0x00000001867e500c UIKit`-[UIScrollView setContentSize:] + 344\n    frame #4: 0x00000001868aa748 UIKit`-[UITableView _updateContentSize] + 540\n    frame #5: 0x00000001868b05f4 UIKit`-[UITableView didMoveToWindow] + 88\n    frame #6: 0x00000001867cd5f8 UIKit`-[UIView(Internal) _didMoveFromWindow:toWindow:] + 1464\n    frame #7: 0x00000001867eea34 UIKit`-[UIScrollView _didMoveFromWindow:toWindow:] + 68\n    frame #8: 0x00000001867cd310 UIKit`-[UIView(Internal) _didMoveFromWindow:toWindow:] + 720\n    frame #9: 0x00000001867cd310 UIKit`-[UIView(Internal) _didMoveFromWindow:toWindow:] + 720\n    frame #10: 0x00000001867cd310 UIKit`-[UIView(Internal) _didMoveFromWindow:toWindow:] + 720\n    frame #11: 0x00000001867cd310 UIKit`-[UIView(Internal) _didMoveFromWindow:toWindow:] + 720\n    frame #12: 0x00000001867cd310 UIKit`-[UIView(Internal) _didMoveFromWindow:toWindow:] + 720\n    frame #13: 0x00000001867cd310 UIKit`-[UIView(Internal) _didMoveFromWindow:toWindow:] + 720\n    frame #14: 0x00000001867cc9e0 UIKit`__45-[UIView(Hierarchy) _postMovedFromSuperview:]_block_invoke + 144\n    frame #15: 0x00000001867cc8c0 UIKit`-[UIView(Hierarchy) _postMovedFromSuperview:] + 484\n    frame #16: 0x00000001867d83a0 UIKit`-[UIView(Internal) _addSubview:positioned:relativeTo:] + 1764\n    frame #17: 0x0000000186805784 UIKit`+[UIView(UIViewAnimationWithBlocks) _setupAnimationWithDuration:delay:view:options:factory:animations:start:animationStateGenerator:completion:] + 508\n    frame #18: 0x000000018681d3d4 UIKit`+[UIView(UIViewAnimationWithBlocks) animateWithDuration:delay:options:animations:completion:] + 68\n    frame #19: 0x00000001868c3744 UIKit`-[UIViewControllerBuiltinTransitionViewAnimator animateTransition:] + 1140\n    frame #20: 0x0000000186ace738 UIKit`__56-[UIPresentationController runTransitionForCurrentState]_block_invoke + 1836\n    frame #21: 0x0000000186853564 UIKit`_applyBlockToCFArrayCopiedToStack + 356\n    frame #22: 0x00000001867c4e78 UIKit`_afterCACommitHandler + 532\n    frame #23: 0x0000000181fdaa50 CoreFoundation`__CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION__ + 32\n    frame #24: 0x0000000181fd79dc CoreFoundation`__CFRunLoopDoObservers + 360\n    frame #25: 0x0000000181fd7dbc CoreFoundation`__CFRunLoopRun + 836\n    frame #26: 0x0000000181f050a4 CoreFoundation`CFRunLoopRunSpecific + 396\n    frame #27: 0x000000018b09f5a4 GraphicsServices`GSEventRunModal + 168\n    frame #28: 0x0000000186836aa4 UIKit`UIApplicationMain + 1488\n    frame #29: 0x00000001000e3600 Jailbreak`main(argc=1, argv=0x000000016fd37a60) + 116 at main.m:14\n    frame #30: 0x0000000192ddaa08 libdyld.dylib`start + 4\n```\n. I totally forgot to mention that I was using iOS 8 dynamic cells with `self.tableView.rowHeight = UITableViewAutomaticDimension;` and that is completely the problem. Jerky scrolling and contentOffset issues due to it falling back on `estimatedRowHeight` and it being a poor estimate of the actual cell heights hence scrolling up. It's already given me days of grief with other things like pull to refresh and pagination and pushing a new view controller. There's even bug reports in the developer forums. I'm going to close this as there's nothing we can do to fix it \ud83d\ude04\n. ",
    "shagedorn": "`.../JTSImageViewController.m:1597:39: Absolute value function 'fabsf' given an argument of type 'CGFloat' (aka 'double') but has parameter of type 'float' which may cause truncation of value`\n. I will close this as there's another PR/branch based on the current master:\nhttps://github.com/jaredsinclair/JTSImageViewController/pull/58\n\nPlease consider merging the changes as Xcode 6.3 is out of beta now.\n. This PR fixes the warnings if you only support iOS 9 and up, while still allowing you to use the deprecated model in case you must support earlier versions:\nhttps://github.com/jaredsinclair/JTSImageViewController/pull/101\n. `.../JTSImageViewController.m:1597:39: Absolute value function 'fabsf' given an argument of type 'CGFloat' (aka 'double') but has parameter of type 'float' which may cause truncation of value`\n. I will close this as there's another PR/branch based on the current master:\nhttps://github.com/jaredsinclair/JTSImageViewController/pull/58\n\nPlease consider merging the changes as Xcode 6.3 is out of beta now.\n. This PR fixes the warnings if you only support iOS 9 and up, while still allowing you to use the deprecated model in case you must support earlier versions:\nhttps://github.com/jaredsinclair/JTSImageViewController/pull/101\n. ",
    "IsaiahJTurner": "I can't seem to get it to work either. Using CocoaPods I added `#import \"JTSImageViewController/JTSImageViewController.h\"` to my bridging header but I can't create an `JTSImageInfo` object in a Swift class.\n. I can't seem to get it to work either. Using CocoaPods I added `#import \"JTSImageViewController/JTSImageViewController.h\"` to my bridging header but I can't create an `JTSImageInfo` object in a Swift class.\n. ",
    "odedharth": "Got it to work by opening the xcprojectworkspace file instead of xcproject file\n. Got it to work by opening the xcprojectworkspace file instead of xcproject file\n. ",
    "mrojas": "@IsaiahJTurner you have to `import JTSImageViewController` in your swift class\n. @IsaiahJTurner you have to `import JTSImageViewController` in your swift class\n. ",
    "Elgins": "@mrojas I add source code into my Swift project but I can not even import JTSImageViewController and I am sure I have added the bridging file and added the#import \"JTSImageViewController/JTSImageViewController.h\", do u have any idea how can I import JTSImageViewController? Many thks if u could help me.\n. @mrojas I add source code into my Swift project but I can not even import JTSImageViewController and I am sure I have added the bridging file and added the#import \"JTSImageViewController/JTSImageViewController.h\", do u have any idea how can I import JTSImageViewController? Many thks if u could help me.\n. ",
    "ghost": "Yes you are right, i'll fix this.\n. Yes you are right, i'll fix this.\n. ",
    "GeorgesAlkhouri": "Changed it.\n. Changed it.\n. ",
    "elpatxificador": "+1\n. +1\n. ",
    "adamcjohnson": "Closing this issue, as I just added the support I needed in a fork.\n. Closing this issue, as I just added the support I needed in a fork.\n. ",
    "colinta": "I just realized that the `willDismiss` delegate method is on the `ello/JTSImageViewController` fork.  I'm also going to add another fix in there: update the snapshotView before the bg fadeout begins.\n. I just realized that the `willDismiss` delegate method is on the `ello/JTSImageViewController` fork.  I'm also going to add another fix in there: update the snapshotView before the bg fadeout begins.\n. ",
    "andrewjaykeller": "Yeah i'm seeing this as well any fix?\n. Yeah i'm seeing this as well any fix?\n. ",
    "arturkyulyan": "Click on your target, go to Build Settings, in the search box put \"Enable Modules\" and switch the flag from NO to YES. Compile again. Hope this will help.\n. Click on your target, go to Build Settings, in the search box put \"Enable Modules\" and switch the flag from NO to YES. Compile again. Hope this will help.\n. ",
    "knt": "I'm facing the same issue as well. Did you ever find a workaround?\n. I'm facing the same issue as well. Did you ever find a workaround?\n. ",
    "Hackmodford": "No, I ended up not using it. I didn't come up with an alternative either.\n. No, I ended up not using it. I didn't come up with an alternative either.\n. ",
    "bmoliveira": "I have the same issue as well, anyone found a solution or an alternative?\n. I have the same issue as well, anyone found a solution or an alternative?\n. ",
    "siberianisaev": "``` swift\nextension MyController : JTSImageViewControllerDismissalDelegate {\n\n    func imageViewerDidDismiss(imageViewer: JTSImageViewController!) {\n        // handle orientation did change\n    }\n\n}\n```\n. ``` swift\nextension MyController : JTSImageViewControllerDismissalDelegate {\n\n    func imageViewerDidDismiss(imageViewer: JTSImageViewController!) {\n        // handle orientation did change\n    }\n\n}\n```\n. ",
    "dlo": "Yep. Looks like 1.5 hasn't been pushed to Cocoapods. @jaredsinclair could you do us all a solid and `pod trunk push`? :sparkles: \n. Yep. Looks like 1.5 hasn't been pushed to Cocoapods. @jaredsinclair could you do us all a solid and `pod trunk push`? :sparkles: \n. ",
    "Arthraim": "@honkmaster yes, please :smile: \n. @honkmaster yes, please :smile: \n. ",
    "steam": "@jaredsinclair my bad, this should not be on the main project. Meant to submit to our fork. Sorry!\n. @jaredsinclair my bad, this should not be on the main project. Meant to submit to our fork. Sorry!\n. ",
    "matrpedreira": "This is how I'm using the code from ReadMe on my code in swift.\n@IBAction func openImage(sender: UIButton) {\n        let imageInfo = JTSImageInfo()\n        imageInfo.image = profileUser.profilePic\n        imageInfo.referenceRect = sender.frame\n        imageInfo.referenceView = sender.superview\n        let imageViewer = JTSImageViewController(imageInfo: imageInfo, mode: JTSImageViewControllerMode.Image, backgroundStyle: JTSImageViewControllerBackgroundOptions.Scaled)\n        imageViewer.showFromViewController(self, transition: JTSImageViewControllerTransition._FromOriginalPosition)\n    }\n. This is how I'm using the code from ReadMe on my code in swift.\n@IBAction func openImage(sender: UIButton) {\n        let imageInfo = JTSImageInfo()\n        imageInfo.image = profileUser.profilePic\n        imageInfo.referenceRect = sender.frame\n        imageInfo.referenceView = sender.superview\n        let imageViewer = JTSImageViewController(imageInfo: imageInfo, mode: JTSImageViewControllerMode.Image, backgroundStyle: JTSImageViewControllerBackgroundOptions.Scaled)\n        imageViewer.showFromViewController(self, transition: JTSImageViewControllerTransition._FromOriginalPosition)\n    }\n. ",
    "StevenTso": "the only thing I would change is for the last line:\n\n`imageViewer.showFromViewController(self, transition: JTSImageViewControllerTransition.FromOriginalPosition)`\n. the only thing I would change is for the last line:\n\n`imageViewer.showFromViewController(self, transition: JTSImageViewControllerTransition.FromOriginalPosition)`\n. ",
    "akhilcb": "This is a great library. Any plans to have the above mentioned feature added to it?\n. This is a great library. Any plans to have the above mentioned feature added to it?\n. ",
    "myusuf08": "how to solve this?\n. how to solve this?\n. ",
    "UberJason": "Seconding this fix (would love to get rid of those warnings), but also a link to a StackOverflow that shows that you can still animate the status bar change: http://stackoverflow.com/questions/32808593/setstatusbarhidden-withanimation-deprecated-in-ios-9\n. Seconding this fix (would love to get rid of those warnings), but also a link to a StackOverflow that shows that you can still animate the status bar change: http://stackoverflow.com/questions/32808593/setstatusbarhidden-withanimation-deprecated-in-ios-9\n. ",
    "tomlerendu": "@Marindrew I am having the same issue as you described. Did you ever find a work around for this?\n. @Marindrew I am having the same issue as you described. Did you ever find a work around for this?\n. ",
    "fysteven": "Hey mommyme, you might want to check if you have a larger image. If you used a larger one, which is larger or exactly the same as the image view, you'd get an image with very good quality.\n. Ok. I got what you mean. It makes sense to not scale a small image on the screen.\n. Hey mommyme, you might want to check if you have a larger image. If you used a larger one, which is larger or exactly the same as the image view, you'd get an image with very good quality.\n. Ok. I got what you mean. It makes sense to not scale a small image on the screen.\n. ",
    "IanHoar": "After some further investigation, the changes I made broke presentation from onscreen, so we ended up reverting to the original repo. Furthermore, upon reverting to the original source, we noticed that the flickering was only present on the simulator, and actually was perfectly smooth on device.\n. After some further investigation, the changes I made broke presentation from onscreen, so we ended up reverting to the original repo. Furthermore, upon reverting to the original source, we noticed that the flickering was only present on the simulator, and actually was perfectly smooth on device.\n. ",
    "markst": "Nice\n. Nice\n. ",
    "smartinspereira": "Just register for _JTSImageViewControllerInteractionsDelegate_ and listen to\n_\\- (void)imageViewerDidLongPress:(JTSImageViewController *)imageViewer atRect:(CGRect)rect;_\nSimply retrieve the image _[imageViewer image]_ and process / save it as needed.\n\nTo add buttons, you could subclass _JTSImageViewController_ with a custom xib and then simply add the buttons you need, or do it directly in code.\n. Just register for _JTSImageViewControllerInteractionsDelegate_ and listen to\n_\\- (void)imageViewerDidLongPress:(JTSImageViewController *)imageViewer atRect:(CGRect)rect;_\nSimply retrieve the image _[imageViewer image]_ and process / save it as needed.\n\nTo add buttons, you could subclass _JTSImageViewController_ with a custom xib and then simply add the buttons you need, or do it directly in code.\n. ",
    "anxiaoyi": "Sorry, I didn't notice it : GitHub's Pull Requests are designed to be per-branch, not per-commit. \n. Sorry, I didn't notice it : GitHub's Pull Requests are designed to be per-branch, not per-commit. \n. "
}