{
    "crosbymichael": "nice\n. nice\n. ",
    "shazow": "Thanks. :)\n. Thanks!\n. Ha, very cute!\n. Did you run this? Won't it print every message twice?\n. Looks decent. What do you think, @voldyman? :) \n. Thankies!\n. Awesome, thanks!\n. HMM interesting, any idea how this looks like on lesser terminals?\n\nAlso will need to rebase this. Will merge other PRs first.\n. Cute! Thanks! :)\n. Good idea.\n. Good call, thanks!\n. Why? Doesn't ssh use md5 by default, or am I mistaken? I wanna show the same fingerprints you get when you ssh into a host.\n. Well, find out what ssh clients use, if it's sha1 then I'll merge it. :)\n. Let's do this after we complete #19 and migrate in one fell swoop.\n\nAlso maybe allow for specifying the full pubkey, not just fingerprint.\n. Oops forgot to close this now that the refactor branch is merged. But yea, this is done.\n\nhttps://github.com/shazow/ssh-chat/blob/master/sshd/auth.go#L67\n\n@freewil Maybe we saw the same tweet. :)\n. Thanks!\n. Good call, thanks!\n. Hm, try again? Might have been a bad commit.\n. Btw, what version of Go? We're targeting 1.4 (or 1.3 at least) I think.\n. Yay glad it works!\n. Sick. I love it.\n. In general.\n\nWhen we use the name as an index in our map[string]..., we should lowercase the key before inserting/comparing.\n. Fast like :zap: \n. In fact, it was a little bit :ghost:\n. Why not put a space in front of it? I'd prefer to stick more true to traditional IRC behavior.\n. I GUESS! I'd like to support reserving names and marking admins in a similar fashion, but we can add it later.\n\nAlso I'd suggest supporting pubkey signatures, similar to ~/.ssh/known_hosts. Easier to fill them from github profiles and whatnot.\n. pubkeys for future PR is cool. :)\n. Done. It accepts authorized_keys-style files now.\n. @Fastidious Added a section here: https://github.com/shazow/ssh-chat/wiki/FAQ#can-i-block-users-from-connecting-how-do-i-assign-admins\n\nBasically it's one pubkey per line, as you wrote it.\n. TY\n. Good call, thanks!\n. This way we can shove in some classy ascii art into it, like a banner.\n. Neat!\n\nI kinda like people not being able to control their colors. Let's keep it that way. :)\n. Or how about we just remove black colors from being chosen instead? :)\n. If we'd like to avoid having the same color as somebody else, we could make the colors cycle rather than be random, but I don't think it's worth doing that.\n. Well isn't black near the edge, couldn't you make the number smaller/make an offset? :)\n. Ooo neat chart, thanks.\n\nRe white terminals, turning off colors will help for now. Later adding more themes will help (dark vs light).\n\nWonder if there's a golang library that has some of this color stuff figured out... Wanna search? :D\n. Right you are. :) Fixing.\n. You can keep the same PR (branch) if you'd prefer; it can be easier to keep discussion context that way.\n\nIf you're worried about commit history, I can squash before merging (but I generally don't care).\n. Hey, thanks for this, very cool!\n\nI'm reluctant in merging a feature like this right now, I think there are a lot of open questions (e.g. how do you handle presence in multiple channels?) and I'm not sure it's a necessary feature just yet (1 server per channel is not too bad).\n\nBut you're welcome to continue developing this in your fork. I would be interested to hear how you're using this. :)\n. I appreciate the thought, it's a cool idea. :)\nOn Dec 13, 2014 7:18 PM, \"Evgeniy Vasilev\" notifications@github.com wrote:\n\n> Sure, it was just proof of concept. Thanks.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/shazow/ssh-chat/pull/31#issuecomment-66901170.\n. Looks good, thanks! :) Fix that typo and I'll hit the button.\n. Lovely, thanks! Wanna do the same in history.go? :D\n. Hm wanna rebase so I can hit the button? :D\n. Yay!\n. Now need to make a nice ascii banner.\n. Same idea as #31. Very cool, but out of scope for the project as it is right now. Maybe sometime in the future. :)\n. Could allow for specifying a theme (start with just two themes, mono and color). Either way.\n. Good call, thanks.\n. Seems like a lot of work, but it's not clear to me for what, can you explain?\n\nWe just added reading MOTD from a file, which lets you write longer intros. Does this improve anything over that?\n. > 1. Adds a `/clear` command which resets the screen (useful if you want to keep track of what you have read or not)\n\nTerminals already let you do this with ctrl+L.\n\n> 2. Rather than only sending the last 10 lines of history when you log in, it will detect the height of your terminal and send that amount of previously received messages (up to 80 lines)\n\nI don't think this is necessarily better. This might overwhelm a lot of people if they see a wall of text as soon as they join.\n\n> 3. Gives you one of the following messages whenever you log in (depending on how many other users are in the room):\n> - \"You are all alone in here.\"\n> - \"At least you have **shazow** to keep you company.\"\n> - \"There are currently 12 users chatting.\"\n\nThat's cute, and I'd be happy if you maintained this in your own chat server, but I rather not keep this as part of the main implementation. :) I rather keep the master branch more generic and simple.\n. You do know how many people are in the room with you,\n\n```\n...\n * shazow joined. (Total connected: 41)\n-> Welcome to ssh-chat. Enter /help for more.\n```\n. ~~I actually like the idea that it's possible but not trivial to change your color. I rather not allow people spamming color changes (we already have enough problems with people spamming renames).~~\n. Oh this turns off color, not changes it. Interesting.\n. Would probably be better to not color in the first place rather than de-color after the fact (if color is turned off).\n. > So change the default to no color at all?\n\nSorry, I meant that instead of applying colors to strings and then stripping colors off if people don't want them, we shouldn't be applying colors to strings in the first place if people don't want them.\n\nUltimately this should also allow us to apply _different_ kinds of colors for people on demand, based on selected themes.\n\nThat aside, I believe colors should be on by default.\n\nThis improvement might be better for a separate PR though, what do you think?\n. Mmm yea I think we might need a big refactor to handle coloring on-demand. Let's go forward with this as-is for now, then.\n. Oh btw, wanna add the `/theme` command to the help text?\n. Thank you! :)\n. Fixed in #54.\n. Not right now, I think.\n\nWe still haven't chosen our storage mechanism for persisting state. Let's do this piece afterwards. :)\n\nI opened an issue: #47\n. Hey @JeanSebTr, that looks really nice, thank you!\n\nI'm actually planning on rewriting that whole section of code myself also. Do you might if I hang onto this PR as a reference? I had a different idea for how to structure the code and I'd like to give it a try. (Unfortunately this will probably have to wait until next week.)\n. This is done within the refactor branch that was merged.\n. Thank you! :)\n. sqlite is my least favorite choice right now as relational schema-enforced is not beneficial for the problem at hand and adds a fair bit of code complexity to setup, maintain, and query.\n\nI don't believe there is a need for a config file just yet, as long as the command-line flags remain simple enough.\n\nI can confidently say that we are definitely not touching XML for anything. :)\n. Decoupling makes sense when you have something to decouple, it's still too early to even know what we want to store or what we'll do with it. Further, depends which storage backend we choose will dictate how simple/complex the usage of it is and how we implement the feature.\n\nYou're welcome to tackle and propose an interface, but I suspect it's going to change a lot before it's put into use. :/\n. Hopefully fixed by #50, will re-open otherwise.\n. Looks like this is still a problem, we've more pprof'ing to do. /cc @empathetic-alligator \n. Hmm might not be a problem actually, garbage collector doing garbage collecty things. Will leave it running for a while longer. Note to self: run with pprof.\n. Should be much better as of v1.2\n. @empathetic-alligator You're a fantastic human being, thank you!\n\n> I used pprof to find it, should it be permanently enabled? The only problem is that an http server must be running in the background. Should I add a command line arg that turns it on?\n\nYea I was thinking adding an optional `--pprof <port>`, what do you think? (Maybe diff PR)\n. Nice! Can you please rebase against the latest master so that I can hit the big red merge button? :D\n\nThank you again!\n. Wonderful, thank you!\n\nIf you can find a way to make travisci fail on linting errors, that'd be great. :)\n. Excellent, one nit. :)\n. Also failing our new stricter travisci lint tests: https://travis-ci.org/shazow/ssh-chat/builds/44044384\n. Excellent!\n. I like this solution, thank you. :)\n. Thank you!\n. I think that's a good idea. I want to try to do this next week too, but if you want to try and beat me to it, have at it! :)\n. Not yet.\n\nJust a warning, I'm going to be going offline until next week and possibly reworking this while I'm away. There's a good chance I'll do this while I'm offline, but you're welcome to try as well if you don't mind the chance of being superseded. :)\n. Done.\n. aquilax claims it's working now, yay! http://i.imgur.com/II14xR5.png\n. @empathetic-alligator Just restarted with the new version an hour ago, so give it a try again.\n\n@aquilax Any tips?\n. Shippin' it! Thank you.\n. @empathetic-alligator I would adore a better fix. :) This is the only workaround we could think of.\n. Clearly there are a lot of options, need to pick something sensible.\n\nI like the idea of being notified wherever I'm mentioned, making mentioners have to prefix with @ to know I got notified feels like an unnecessary thing to educate them on. :/\n. Regexp has been vastly improved in the new version.\n. Whitelist implies that nobody except people in the whitelist can join, so that's still fine.\n\nAs far as banning goes, yes it wouldn't work anymore. I have mixed feelings about implementing ip-based banning as opposed to using something like iptables.\n\nEither way, I'd like to support no-pubkey connections, at least optionally (might add a flag later). Thank you for this. :)\n. @songgao Oh can you send a PR that rejects no-pubkey connections if whitelist is defined?\n. Maybe something like:\n\n``` go\nif !server.IsWhitelisted(\"\") {\n    return nil, fmt.Errorf(\"Not Whitelisted.\")\n}\n```\n\nIf there is no whitelist, it should do the Right Thing I think.\n. Not yet.\nOn Dec 16, 2014 4:27 PM, \"persontwo\" notifications@github.com wrote:\n\n> Has the server been restarted since PR#62 was merged? I attempted auth w/o\n> pubkey but it won't work.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/shazow/ssh-chat/pull/62#issuecomment-67258468.\n. Thanks for reporting, that's no fun. :)\n. Done.\n. Thank you! Very important feature. :)\n. Will take a look at this later. FYI, in the future, you don't have to open a new PR just to change stuff. Feel free to force-push to overwrite commit history if you're worried about it. I'm not too worried about commit history purity, though.\n. `git commit --amend` to merge into the previous commit, then `git push origin $branch --force`.\n\nAlternatively, you can push your new branch into the old branch: `git push origin $newbranch:$oldbranch --force`.\n. NP. :) Will take a look at PRs tomorrow, taking a day off ssh-chat otherwise (as you can tell lol).\n. Some good ideas, but what do you think about doing something like #44 instead?\n\nI plan to do this kind of refactor myself soon, maybe it'd be best to leave it off until then.\n. Thanks @peterhellberg. Sorry for not giving this feedback earlier. :)\n. I've thought about this but I leaned towards not including it. The main reason to include it on-join is to alert the joining user how many people are in the room with him/her. For leaving, there's no point. If someone who is already in the room wants to know, they can always do /list. :)\n\nThank you though, I appreciate the effort!\n. Crafty, thanks.\n. This will still tab-complete to lowercase names rather than properly-cased names, right? Can we fix that too?\n. Thank you for pinging! :)\n\nLooks good, can you rebase against master, looks like there are some merge conflicts. I think we added a RWLock around iterating over clients.\n. Perfect, thank you!\n. There is no name \"registration\" yet, that will come as a feature in the future once the plumbing is done. :)\n. @empathetic-alligator Good stuff, thank you. Left some review comments. Happy to merge this after we clean up the code. :)\n. Not a problem, I appreciate you getting involved. :)\n. Please ping me when I should take a look at it again. :)\n. Looks great, thank you! :)\n. /cc @jazzychad Check this out.\n. Saw this in the logs yesterday after the server crashed.\n\nI don't believe the server was shutting down, except for this crash. There were many hundreds of lines of traceback from various goroutines\u2014we might also be leaking goroutines. :p\n. Should be fixed in https://github.com/shazow/ssh-chat/commit/b90017bfe6f96252e9db96bb972d27f2c7246a66\n. Yup this is planned, thank you for tracking it.\n\nCurrently blocked on #47 (feel free to join the discussion).\n\nThis will likely be an optional feature, possibly not enabled on public servers, or maybe users will need to ask for permission from ops to be able to register their nicks.\n. More thoughts on this as I'm starting to spec it out:\n\n## User registration and out-of-band notifications\n\nYou'll be able to type `/register myemail@domain.com` and it will attach your pubkey to your email (after sending off a validation email and confirming ownership through another command). The benefit of registration is you get offline presence (aka you appear as in-chat even if you disconnect) and you get instant email notifications of mentions and emails of conversation summaries of what you missed (hourly/daily maybe). Possibly do push notifications too (through pushbullet or something else).\n. When email notifications get sent, they're going to include a \"safe\" unencrypted section, and the context of the notification will be encrypted below if you want to read it without reconnecting. Something like this:\n\n> You were mentioned on chat.shazow.net.\n> \n> Connect to the server to read the notification, or run the command below to decrypt the context:\n> \n> $ openssl command to decrypt using your ssh privkey << EOF\n> [[encrypted base64 blob to your ssh pubkey]]\n> EOF\n. A quick update: There's some progress in the [refactor branch](https://github.com/shazow/ssh-chat/tree/refactor) towards design changes that are required for this, but I'd say it's still around 50% done. I'm not actively working on this right now so it might be a while.. Done.\n. Merged the giant refactor branch into master, preparing for v1.0 release. \n. Just release v1.1 with binary builds. Still lots of work to do, but tests pass and there are no detected race conditions, it doesn't crash in trivial cases anymore, and we have 46.6% coverage across modules. While not all of the TODOs are completed, I think it's in a good state and good enough to close this issue for now.\n. Sorry I just beat you to it. :)\n\nAlso I don't think we need to check for \"\", because that's a nice easy way to disable no-auth logins (banning \"\" fingerprint).\n. I'll fix that, thanks!\n. Fixed in https://github.com/shazow/ssh-chat/commit/8bba2e391797ad21f1dc4ae3751f6ab9a8744791 among other things.\n. @empathetic-alligator Glad you asked! I have some great news for you. I wrote precisely that piece yesterday, but I don't have the piece you're working on. :)\n\nhttps://github.com/shazow/ssh-hammer\n\nFeel free to steal any/all of that code, or contribute back to it. Whatever makes sense.\n. Btw, in case it wasn't clear, please don't use this on the live chat.shazow.net, your IP will get blacklisted by iptables. :)\n. Take a look at https://github.com/peterhellberg/check-ssh-chat, too.\n. Tests are in a much better state now, yay.\n. Thanks!\n. Using this script with my fork of it:\n\n``` bash\n#!/bin/bash\nwhile true; do\n    echo \"$(date): Checking...\"\n    if check-ssh-chat -t 10s -v -h localhost -p 22 -n \"ghost-of-shazow\"; then\n        sleep 3600\n        continue\n    fi\n\n    echo \"KILLING!!\"\n    pkill -2 -f ssh-chat\n    sleep 30\ndone\n```\n. Thank you, can you post which commit version you were using? Seems your fork is 20 commits behind the upstream, we might have fixed this bug. :)\n. Yes that bug happened on the latest upstream master, or yes the bug might have been fixed?\n. Ah fair enough, I think we might have fixed it then (I pursued several bugs yesterday). Can you sync to latest master and let me know if this happens again? :D\n. Did the server hang for you when you did this? Or did you write this comment in the wrong issue?\n. @vectorijk This issue is about the server hanging, please open a separate issue?\n. Hopefully fixed in master.\n. Wonderful. :)\n. You'll probably need v1.3 or newer, since we're using http timeouts for a recent feature.\n. Excellent! Also it runs far better on the latest versions. :) I ran it on 1.2 for a while and it was leaking memory and such, I think related to one of the std crypto libs we were using.\n. Pinging top contributors, in case you feel like looking around and giving some feedback. :) Open to ideas for the rewrite.\n\n/cc @empathetic-alligator, @Kealper, @IQAndreas, @jazzychad\n. Just added a bunch of work. Should be almost at feature parity, would love it if people tried it and let me know how it is. Things I need to add:\n- [x] Name sanitizing\n- [x] Uptime/version\n\nAnything else?\n. YAY IT'S MERGED!\n\nNot super battle tested yet, but ready for trial by combat.\n. Mmm yea, nicks get unwhitelisted characters stripped, we should do that before announcing.\n. Oops opened #92 as dupe, fixed now tho.\n. Hmm interesting, I wonder if it's related to us not handling the `shell` channel properly. Thanks for filing! Would appreciate any help looking into this.\n. Please give it a try on v1.1 and re-open if it's still a problem. :)\n. Fixed in https://github.com/shazow/ssh-chat/tree/refactor with aliases. :)\n. OKAAAY. :P\n. Should be good now, lmk if it doesn't work.\n. I'm afraid it's out of scope for this particular project, but feel free to fork and implement your own version (I suggest starting from the `refactor` branch, which will be v1.0 soon).\n\nFor now, you can host multiple instances of these and call each one a channel. :)\n. FWIW, I'd avoid mixing IRC-style and Unix-style commands. Stick with IRC, it already has commands for all of this.\n. Aha, thanks for doing it for this branch, you rock. :)\n. Might be fun to add const/iota types to messages for extra annotation/filtering, will think about this...\n. Can you rebase so that I can hit the big green button? :D\n. ty. just refactored that and didn't catch all the type assertions yet. :)\n. Ah thanks for doing this!\n\nHmm, can you think of other cli tools that solve it this way? Not sure it's a good idea to accept a password through a cli flag as it will show up in the process list and leak the password. Stdin is fine. Environment variable possibly.\n. It would be possible, but we decided not to in this particular project. We feel the experience is more magical without timestamps.\n. Thank you!\n. You're awesome!\n. Done.\n. :custard: thank you\n. What distinguishes a human interface from a bot interface? Are we going to start presenting CAPTCHAs? :)\n. Ah, well there is /theme mono which removes all colors. No plans for JSON yet, though. Maybe someday.\n. There is no way to force bots to identify themselves as such, /mute command will come eventually to let you silence whoever you don't like. We can also add better throttling heuristics if anyone has ideas.\n\nMost likely implementation of a non-human interface is maybe something like TERM=bot env variable which will skip PTY handling and won't set a prompt.\n. I was thinking of exposing the TERM variable in the /whois (any objections?), so that may help further in identifying people vs bots.\n. @chexo3 This is unrelated to bash, it's your terminal (that you might run bash inside).\n\nNo, I don't think there should be security implications. But someone correct me if I'm wrong.\n. IMO setting a TERM variable to bot or readline something would be the cleanest thing to do.\n. That's nothing to do with ssh-chat, that's screen. You need to do ctrl+a, ctrl+d to scrawl with pgup/down.\nhttp://www.cyberciti.biz/faq/scroll-up-down-look-at-data-in-gnuscreen-using-pageup-pagedown-keys/\n. Thanks. :)\n. You're welcome to fork this project and maintain a version of it that has these things, but it's out of scope for the mainline version. :)\n. Your bikeshed is lovely, thank you!\n. One thing that could be improved if you're up for it is to print the host/port based on the socket that actually gets allocated, that way it'll do the Right Thing when you specify port 0 (random available port).\n. Hmm strange, maybe try a fresh $GOPATH? I suggest something like...\n\n```\n$ export GOPATH=$PWD/pkg\n$ go get github.com/shazow/ssh-chat\n```\n. No, you don't need root unless you run ssh-chat on port 22. You definitely\ndon't need root to just build it.\nOn Jan 4, 2015 10:55 PM, \"devNET software group\" notifications@github.com\nwrote:\n\n> Yes, it needs root.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/shazow/ssh-chat/issues/110#issuecomment-68674187.\n. Let me know if this is still happening.\n. Would be cool if we had somekind of continuous builds setup, I think there are some services that do this. For now, a Docker image might suffice.\n. @smiller171 I don't think we need docker for this, but you're welcome to help. :) We need a GOARCH/GOOS build matrix and then publish the binaries somewhere (maybe github releases).\n. Thank you! Feel free to submit an in-progress PR for early feedback (just mark it as WIP in the title).\n. Not quite continuous, but I have some scripts to generate packaged binary releases. Good enough for now! https://github.com/shazow/ssh-chat/releases\n. :revolving_hearts: \n. We're just piggybacking on golang's crypto/ssh library for these things. Would need to fork it to add that support, or report the bug to them. Sorries.\n\nhttps://godoc.org/golang.org/x/crypto/ssh#pkg-constants\n. Fixed.\n. What version of Go? Need v1.3 or newer.\n. Type `go version`.\n. Maybe try a fresh Go environment? Something like...\n\n```\n$ export GOPATH=$HOME/Go2\n$ go get github.com/shazow/ssh-chat\n```\n. Sorry I'm out of ideas. :/ Try building Go from source? Or ask somebody on #go-nuts on freenode IRC?\n\nLet me know if you figure it out.\n. When you `go get ...`, it builds it from source.\n\nAnyways, if you get a copy of the repo, you can do:\n\n```\n$ go get .\n$ go build ./...\n```\n. Make sure you're in the directory of the ssh-chat source code.\n. You'll need to do `go get .` to get all the dependencies first, then build.\n\nOn Tue, Jan 13, 2015 at 1:52 PM, chexo3 notifications@github.com wrote:\n\n> Last login: Tue Jan 13 16:48:36 on ttys000\n> isaacbeckett@MacIron:[~]-04:50 PM > export GOPATH=/Users/isaacbeckett/Desktop/ssh-chat-master\n> isaacbeckett@MacIron:[~]-04:50 PM > go build ./...\n> Desktop/ssh-chat/go/src/ssh-chat/cmd.go:13:2: cannot find package \"github.com/alexcesaro/log\" in any of:\n>     /usr/local/go/src/github.com/alexcesaro/log (from $GOROOT)\n>     /Users/isaacbeckett/Desktop/ssh-chat-master/src/github.com/alexcesaro/log (from $GOPATH)\n> Desktop/ssh-chat/go/src/ssh-chat/cmd.go:14:2: cannot find package \"github.com/alexcesaro/log/golog\" in any of:\n>     /usr/local/go/src/github.com/alexcesaro/log/golog (from $GOROOT)\n>     /Users/isaacbeckett/Desktop/ssh-chat-master/src/github.com/alexcesaro/log/golog (from $GOPATH)\n> Desktop/ssh-chat/go/src/ssh-chat/cmd.go:15:2: cannot find package \"github.com/jessevdk/go-flags\" in any of:\n>     /usr/local/go/src/github.com/jessevdk/go-flags (from $GOROOT)\n>     /Users/isaacbeckett/Desktop/ssh-chat-master/src/github.com/jessevdk/go-flags (from $GOPATH)\n> Desktop/ssh-chat/go/src/ssh-chat/client.go:9:2: cannot find package \"golang.org/x/crypto/ssh\" in any of:\n>     /usr/local/go/src/golang.org/x/crypto/ssh (from $GOROOT)\n>     /Users/isaacbeckett/Desktop/ssh-chat-master/src/golang.org/x/crypto/ssh (from $GOPATH)\n> Desktop/ssh-chat/go/src/ssh-chat/client.go:10:2: cannot find package \"golang.org/x/crypto/ssh/terminal\" in any of:\n>     /usr/local/go/src/golang.org/x/crypto/ssh/terminal (from $GOROOT)\n>     /Users/isaacbeckett/Desktop/ssh-chat-master/src/golang.org/x/crypto/ssh/terminal (from $GOPATH)\n> isaacbeckett@MacIron:[~]-04:51 PM > cd /Users/isaacbeckett/ssh-chat/go/src\n> isaacbeckett@MacIron:[~/ssh-chat/go/src]-04:51 PM > go build ./...\n> ssh-chat/cmd.go:13:2: cannot find package \"github.com/alexcesaro/log\" in any of:\n>     /usr/local/go/src/github.com/alexcesaro/log (from $GOROOT)\n>     /Users/isaacbeckett/Desktop/ssh-chat-master/src/github.com/alexcesaro/log (from $GOPATH)\n> ssh-chat/cmd.go:14:2: cannot find package \"github.com/alexcesaro/log/golog\" in any of:\n>     /usr/local/go/src/github.com/alexcesaro/log/golog (from $GOROOT)\n>     /Users/isaacbeckett/Desktop/ssh-chat-master/src/github.com/alexcesaro/log/golog (from $GOPATH)\n> ssh-chat/cmd.go:15:2: cannot find package \"github.com/jessevdk/go-flags\" in any of:\n>     /usr/local/go/src/github.com/jessevdk/go-flags (from $GOROOT)\n>     /Users/isaacbeckett/Desktop/ssh-chat-master/src/github.com/jessevdk/go-flags (from $GOPATH)\n> ssh-chat/client.go:9:2: cannot find package \"golang.org/x/crypto/ssh\" in any of:\n>     /usr/local/go/src/golang.org/x/crypto/ssh (from $GOROOT)\n>     /Users/isaacbeckett/Desktop/ssh-chat-master/src/golang.org/x/crypto/ssh (from $GOPATH)\n> ssh-chat/client.go:10:2: cannot find package \"golang.org/x/crypto/ssh/terminal\" in any of:\n>     /usr/local/go/src/golang.org/x/crypto/ssh/terminal (from $GOROOT)\n>     /Users/isaacbeckett/Desktop/ssh-chat-master/src/golang.org/x/crypto/ssh/terminal (from $GOPATH)\n> isaacbeckett@MacIron:[~/ssh-chat/go/src]-04:51 PM >\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/shazow/ssh-chat/issues/115#issuecomment-69827656.\n. ssh-chat is installed in $GOPATH/bin.\n. You can drop it wherever you want. `go get ...` installs is in $GOPATH/bin, what you do with it after is up to you. :) Closing this issue.\n. `/motd` is a thing.\n. More specifically, the message you see when you join is that. :)\n. I appreciate your thought, but that's out of scope for this version of the project. I welcome you to build your own fork with some of these features! :)\n. What do you mean? How is that different from how it works now?\n. Yea, that's no fun.\n\nUnfortunately I'm fairly sure the relevant code is inside this library that we're using: https://godoc.org/golang.org/x/crypto/ssh/terminal\n\nI'm not sure we can do much about it without forking it, but might be worth forking.\n\nRegarding limiting connections, that's not an easy problem to solve.\n. @Lana-chan Could be!\n\nThe latest refactor branch should handle this better. I wrote a little library to handle rate limiting at the net.Conn level: https://godoc.org/github.com/shazow/rateio\n. Fixed in the latest master.\n. Eeeh, yolomerging.\n. @swecide There is socket read rate limiting. I kinda eyeballed the default values right now, but it's likely we'll need to tweak it more. Can you tell me more about your behaviour? Is the message hand-typed, or program-generated?\n\nThe default is here: https://github.com/shazow/ssh-chat/blob/master/sshd/net.go#L31 (That's 10kb per 2 minutes, with a 3 second grace period in the beginning.)\n\nRegarding not being able to join again, that shouldn't happen unless you banned yourself somehow. There's no auto-ban yet.\n. @swecide Can you be more specific, like how long are the messages?\n\nI need to get better benchmarks on how many bytes ssh sends per character. But I figure allowing 150-200 chars/minute is fairly safe?\n\nIt may vary with encryption/compression types, though. Hmmm.\n. Hmm that shouldn't happen. Are you able to reproduce it?\n\nI just tried the same messages on my own local server and it didn't kick me. I had to paste it about 30 times before I got kicked.\n. Yea not clue what's going on here. I'll try to add some logging when somebody is kicked, stay tuned (on vacation atm, might be a while).\n. Okay, tracked down the problem. Each character is ~52 bytes when sent separately (ie. keystrokes, vs copypasta). I'll need to add a different Limiter to the RateLimited connection which does counts # reads rather than # bytes (unless it's a really big read). Will fix soon. :)\n. Thank you!\n. This is already a thing. You need to be an admin to /kick or /ban users.\n\nYou can add initial admins by supplying a file with their public key using the --admin flag. After that, you can /admin people.\n. No worries. :)\n. Appreciate the suggestion!\n\nI think a better approach to have pre-built binaries people can download. See #111.\n. Yup, I'm familiar with brew. I've been using it for years on my OSX. Unfortunately, it's only relevant to OSX.\n\nWhy would a .pkg work better?\n\nGolang can compile binaries for all platforms, not just *nix.\n\nI'm not going to stop you from making a Brew recipe for ssh-chat, I'm just saying it's not something I'm going to pursue. :)\n. You might be mistaking what a golang-built binary is. The tarball download you're asking for is exactly what it is. I'm not sure what difference you're drawing between a *nix binary and a prebuilt binary and a .pkg native format.\n\nAlso, you need git for brew to work regardless (albeit brew installs it for you). Anyways, feel free to make whatever recipe you'd like. :)\n. > I mean a *nix binary is for *nix systems, it is prebuilt as well, but you would need to decompile it and recompile on a mac to use it on a mac\n\nThat's not how it works. You don't decompile anything. Go builds binaries for target platforms. You can build one for each of Linux, Mac, Windows.\n\n> What version is ssh-chat at?\n\nWhat do you mean? The latest commit hash is the version right now. Vaguely v1.x.\n. Good find, fixed! \n. Ban user/ip already exists.\n\nChannels is out of scope for this fork, but you're welcome to add it yourself. :)\n. I appreciate the thought but I don't want to introduce remote code execution to ssh-chat as that would open up a big can of vulnerabilities for us to fight against. :)\n. I forget, it might already be possible to pipe things. It'll likely trigger anti-spam throttling, though.\n. Nevermind, I think we disabled that because people were having too much fun piping in junk.\n. @chexo3 This is not something I need, but you're welcome to do that in your fork. :) You may need to implement a handler for the `exec` channel request type to do what @aminehmida proposed.\n. @fjarlq As you noticed, this package is a bit stale as it's not actively being worked on at the moment. I appreciate you diving in and cleaning up, very welcome improvements. :)\n\nThank you again!\n. Thank you!\n. Can we make this only run on the master branch after the PRs have been merged, in a separate suite?\n\nI still want to keep travisci tests for PRs.\n. > You need to set DOCKER_USER, DOCKER_EMAIL, and DOCKER_PASS environment variables in Travis for it to push the image to Docker Hub\n\nDoes it make any sense to do this? I don't want to let everyone in the world push to my docker hub account. Or can I do this privately in my travis account?\n. What version of Go are you running? What OS?\n. Yea looks like the tests are hanging, probably a deadlock. Not sure why. We should add a `-timeout 10s` or something to the `go test` command. Default is 10min which is a bit cray.\n. If you can identify how you reproduce the failures on a specific platform, please open an issue. :)\n. Removed docker releases in favour of binary releases, can be easily wrapped with any blank docker now.\n. Can't reproduce. Maybe your internet connection is blocking outbound SSH? Could try it from a different network.\n. Oh, if you're connecting but getting permission denied, it's possible your ssh key got banned. You can try a fresh key. :)\n. ssh-chat accepts an optional whitelist of public keys. chat.shazow.net does not operate with a whitelist, so all public keys are accepted unless they're invalid/banned.\n. You too, happy chatting! :)\n. Umm, you could run ssh from bash to ssh into your ssh-chat server. :) Or read the logs.\n. Start it on a different port?\n. ssh-chat is not a client, it's a server. Having users run ssh-chat is not going to do what you want. ssh is a client for ssh-chat (the server). ssh is also a client for sshd (the server).\n\nNormal sshd and ssh-chat can't share a port right now, you'd need to write a multiplexer of somekind.\n. Thank you!\n. Glad you like it, enjoy! :)\n. @epitron Btw you're from Toronto? I'm moving back to Toronto in a few months, we should grab a beverage.\n. Hey there, the demo server is running v0 (version before a major refactor). You're welcome to try out that branch!\n\nBetter yet, if you can find what's causing the bug, I'd appreciate a fix. :)\n. I believe there's a --pprof flag which starts ssh-chat with a [pprof server](https://golang.org/pkg/net/http/pprof/) that you should be able to inspect after it becomes unresponsive. That output should give us a hint of what's going on, maybe there's a run-away goroutine cluster or a blocked channel somewhere.\n. Glad you like it and thanks for helping out! I'm actually also working on a [custom irc server](https://github.com/shazow/go-irckit) that I hope to combine someday. >.>\n. Btw couple more things, might be worth making a build with the race detector enabled (-race). Also hope you're using Go 1.6, it has some improved stack output that will be easier to parse.\n. No, master should have more features but v0 might be more stable.\n\n\"won't run\" is just not enough information to help. :) Is there an error, maybe?\n. You're not running it in the pasta?\n. Er sorry, pasta is slang for copy-paste. :)\n\nYou pasted the commands you typed to build ssh-chat, but you say it won't run and you didn't include anything about running it? Is there an error? With what you're sharing, I just have no information about what is going wrong, all I have is your word telling me it's not working. :)\n. You're welcome. :) Hope you'll have the opportunity to dig into why master is failing for you.\n. `--whitelist=` flag, see `--help`\n. Should be fixed in v1.1, give it a try. :)\n. Which version did you try? Latest master has the new format iirc.\n. Well, my \"reference server\" is a bit out of date. :)\n\n```\n[shazow] /uptime\n-> 11017h53m7.906117303s\n```\n. Indeed it would, but alas keybase does not do anything with ssh pubkeys so it doesn't really fit. :( Related issue: https://github.com/keybase/keybase-issues/issues/710\n\nAlso PM me your email address and I'll send you an invite. :)\n. Hmm so it's not bindable from 0.0.0.0:2022 locally? That's frustrating. Honestly not sure what the problem is here, would appreciate any help with debugging. :)\n. Can anyone confirm if this is still a problem with v1.1? Check the latest binary release here: https://github.com/shazow/ssh-chat/releases\n\nPlease re-open the issue if its.\n. Ah you probably want a more modern Go, 1.3 is several years old. Try to get 1.5 or newer.\n. @jbenet I like the idea but not comfortable rewriting imports to use ipfs for a non-ipfs-related project though. (Not yet at least.) :)\n. @jbenet:\n1. I don't feel the transport should be hardcoded into the import namespace. I think this is consistent with Go's decision to exclude http(s)://, git:// etc from the import statements, and adding ipfs:// or similar (even /ipfs/...) would be a regression in that direction.\n2. I don't want to _require_ an additional non-ubiquitous service that is largely unrelated to golang dev just to build the project. If it was an optional enhancement, that'd be cool.\n\nReally a pinning/lock file is probably the way to go, where aware tools can fetch the dependencies from the best possible source (yay ipfs if available!) but still fall back to the normal golang vendoring/namespacing mechanics.\n. > `gx` works out of the box without ipfs, it uses http from the ipfs.io gateway. (think of it as our github.com or our npm), but it verifies all the content is correct, and version locks.\n\nFair point. My ideal dep tool degrades gracefully to not requiring any external tools but adds value when available.\n\nThe package mapping thing will put it at a place where it could work, though!\n. Should be fixed with https://github.com/shazow/ssh-chat/commit/838f58e648b30bbf2ee2b9351fdf92bd1eb6a333\n. Which version of ssh-chat are you using? The latest master?\n. Cool cool. Any interest in helping debug? :) I'm not actively working on ssh-chat right now but I'd be happy to review PRs and point you in the right direction.\n. No worries, thanks for reporting it! I'll take a look at this if I pick up the project again, but can't promise a timeline. Maybe someone will beat me to it! :)\n. Fixed in v1.1, weee.\n. I'm going to be working on fixing some panic/crash bugs in master, and I want to add email notifications. Also binary builds releases.\n. Let's say starting around 1pm EST? Also changed the tentative date to Sat July 9th. I'll likely continue doing some work into June 10th and a bit onwards if people want to keep going remotely. :)\n. @0x004a \n\n> When typing a line wider than terminal width, it skips a line. (not sure why)\n\nIt's a known issue in the terminal stdlib we're using unfortunately, related info here: https://github.com/shazow/ssh-chat/issues/22\n. Hey everyone, hope you're ready to hack on ssh-chat this weekend!\n\nI'm super busy with moving back to Canadia but I'm making time for this. Looking forward to pushing out some fun features. :)\n. Okay it'shappening.gif, join the main ssh-chat server to participate.\n\n``` sh\n$ ssh chat.shazow.net\n```\n. Hey everyone, thanks for those of you who came online to hack with me. :D We got some stuff done:\n- @prologic wrote keepalive code that I'm excited to merge soon (feedback pending), and some other good-spirited submissions.\n- @mcroydon cheered us on from the sidelines.\n- My buddy Ted hung out and learned Go next to me (I helped a bit!)\n- I wrote a script to package up binary releases so that people can stop complaining about having to use Go to run ssh-chat.\n\nThis date snuck up on me this time around but I'd like to do this again soon. I'm going to keep hacking on stuff on and off until then. Will ping this thread for the next hackathon. :heart:\n. Have you tried setting your GOPATH environment variable? :)\n\nSome instructions here: https://golang.org/doc/install#testing\n\nIdeally we'll be providing binaries so you don't need to build it from scratch, but that's not done yet. Sorry.\n. See the link I shared. It's Go's \"workspace\", it's where it will download the dependencies into, build/compile, etc.\n. Mentions with tab-complete are already supported, no @ necessary. :)\n. There is a `--whitelist` flag which accepts a list of public keys that are allowed to connect. I believe whitelisting can also occur by admins while the server is running with `/whitelist` but it's ephemeral for now.\n. Fixed.\n. Do you think we could get away with just doing something like this instead?\n\n``` go\n// in sshd/terminal.go:NewTerminal\n...\ngo func() {\n    for range time.Tick(keepaliveInterval) {\n        _, err := channel.SendRequest(\"keepalive\", true, nil)\n        if err != nil {\n            // We'll get an err when the channel is closed, so this goroutine\n            // will clean up itself. Bonus points for catching a specific err.\n            return\n        }\n    }\n}()\n```\n\nMight be a bit nicer since we avoid introducing more parameters/state to unrelated functions.\n. When the client disconnects. If the goroutine returns, it will get cleaned\nup.\nOn Jul 10, 2016 1:02 PM, \"James Mills\" notifications@github.com wrote:\n\n> Maybe :) Are we worried at all about cleaning up the goroutines on client\n> disconnect or server termination? Or do we rely on GC for that?\n> \n> \u2014\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> https://github.com/shazow/ssh-chat/pull/147#issuecomment-231599202, or mute\n> the thread\n> https://github.com/notifications/unsubscribe/AAAYlJDNLrZ_PsCY7lDrlPLJyVERadwcks5qUSWegaJpZM4JIvMa\n> .\n. Merged the proposed variant in 8b9ebbdb6b27f0a00880bd72446e9cac08a4091e, thank you. :)\n. Any concrete benefits here or just your preference?\n\nAs it is, the [godoc that gets generated](https://godoc.org/github.com/shazow/ssh-chat) is fairly small and easy to follow, I would prefer to avoid hiding core/required components (`auth`, `host`) into more subpackages until things get too messy (`sshchat` is practically unusable without them).\n\n`Set` is probably the only one that is obvious but I didn't feel making a util package was justified for just this one struct, since it's not very big and it's not being reused by any other subpackages.\n\nRegarding the `logger`, note how every subpackage has a copy of that. It wouldn't make sense to subpackage just for the sshchat package.\n. That's pretty standard for Go, the idea is you should be able to import the \"primary\" functionality of a package by importing the root repo, as in:\n\n``` go\nimport \"github.com/shazow/ssh-chat\"\n```\n\nAgain I super-appreciate this initiative. I'm going to close this for now but let's keep it in mind if things get messier. :)\n. Just realized I already did this in https://github.com/shazow/ssh-chat/commit/838f58e648b30bbf2ee2b9351fdf92bd1eb6a333 and forgot to close the issue, oops!\n. (I decided to skip adding Godep to avoid dependency on a specific third-party tool, the submodule pins should be sufficient for now.)\n. @anarcat ssh-chat is _all_ about reinventing wheels, but I'm very aware of the IRC protocol (I've even implemented [my own IRC server](https://github.com/shazow/go-irckit) but haven't gotten around to v3 extensions yet). Thanks. :)\n. Looks great! How do you feel about using a [`Set`](https://github.com/shazow/ssh-chat/blob/master/chat/set.go) rather than a list of ignored users? (Might need to move it into a shared package.)\n\nThen we can get rid of `IgnoredNames()`. Maybe even make it a public attribute on `User` and avoid having `Ignore(...)` and `Unignore(...)` altogether since it's all boilerplate anyways?\n. Yay thank you, that's great. I wish we could get travisci to work again, sighhh.\n. This was done a while ago, I think. (cc @sleibrock). Would you be up for writing a test, too? :)\n. Btw, I fixed travisci on the master branch, so should get proper badges if you rebase. :)\n. Going to do a new release so I made the change myself, hope you don't mind. :) Your changes still got merged, thank you!\n. @aaronwinter Excellent, thank you. Also lots more minor issues cropped off if you're feeling inspired. :)\n. There are themes, try `/theme mono`. I'm open to adding more themes like `light`, want to contribute one?\n. Basically https://github.com/shazow/ssh-chat/blob/master/chat/message/theme.go#L176-L186\n\nCould use a couple more themes, one for solarized, one for light backgrounds.\n. Yea basically we'd need a solarized/light background palette, the rest should be the similar. Btw this little block is handy for debugging: https://github.com/shazow/ssh-chat/blob/master/chat/message/theme.go#L189-L192\n. Also the default colourscheme is not readable on iTerm2 using the solarized-dark theme. I think just the system messages, would be good to tweak it a bit (see #178).\n. We now have a `hacker` and `solarized` colorscheme, thanks to @sleibrock <3\n. It's a known bug, not sure what we can do about it right now:\n\nhttps://github.com/shazow/ssh-chat/issues/22\n. Also on-join, chat history messages get injected before the motd.\n. Autocomplete is disabled on the chat2 server until this is fixed.\n. This can be reproduced with Autocomplete enabled by running a server, joining with at least one user, then running `cat /dev/urandom | ssh ...` a few times.\n. Thank you!\n. Hm fair point, thanks!\n. Also BEL emitting for mentions, bonus points for optional enable/disable.\n. Would be nice to include a few extra things while we're at it, like time since joined and client used (v0 had this).\n. Yea I think that's fine, or make it an incremental improvement later.\n. @C0FFEEC0FFEE Thanks! Is there any way to turn on verbose logging?\n. Weird, thanks for reporting it! Will look into it once the more urgent bugs are fixed, or you're welcome to dive in too. :)\n. @botto I think it might have to do with my aggressive rate limiting and the size of your key. I'll tweak that.\n. @botto @C0FFEEC0FFEE Could you both try this server and let me know if it's better? Port 2222 on chat2.shazow.net:\n\n```\n$ ssh -p 2222 chat2.shazow.net\n```\n. @botto Can you confirm also?\n\nOtherwise I'm closing this issue, should be resolved with the next release.\n. That's quite a few bits. :P\n\nCould you try with a shorter key for funsies?\n. Hmmm might be the iptables configuration I was using. Can you try now?\n\nAlso could you try running a [local release](https://github.com/shazow/ssh-chat/releases) and see if you still have problems?\n. FWIW I had iptables set to disconnect after 10 quick successive tcp flushes, bumped that up to 20.\n. `/quiet` should do it.\n. Duplicate of https://github.com/shazow/ssh-chat/pull/157, but thank you. :)\n. It does have `/names`, consider `/list` a secret alias. :)\n. This will be done in #74.\n. All the normal bash terminal shortcuts should work. HOME key and ctrl+a jump to the beginning of the line, just like bash.\n. Is this a problem on chat2.shazow.net? What you're saying is that the colour is too dark for your terminal?\n. Which terminal/colorscheme are you on?\n. Mmm yes, I see what you mean, thank you.\n\nIf you'd like to supply a PR that tweaks the colourscheme, that would be appreciated. :) Seems chat.shazow.net is a bit better than chat2.shazow.net, right?\n. Merging this into #160\n. Ah this isn't a problem, I just didn't define the escape codes properly in my test.\n. Same way as anywhere else, you just need to use an editor that will let you inject the necessary bytes into the file. For example:\n\n``` bash\n$ printf \"\\033[91mHello \\033[0m world.\\n\" > motd.txt\n```\n. I think it's okay to leave some non-essential commands hidden. :)\n\nIf you feel strongly about this, feel free to add Help field to it and send a PR.\n. https://github.com/shazow/ssh-chat/blob/master/host.go#L339\n\nNote that there are going to be a bunch of hidden commands. I want to avoid /help turning into a massive appendix, but rather a quick-start essentials guide.\n. @shurcooL \n\n> How do you determine if a command is essential or not? \n\nBy making a judgement call. :) I feel not knowing about `/version` and `/uptime` does not prevent you from enjoying ssh-chat in the default case it's intended for. Software has had hidden commands and features since software has become a thing. That's not to make you feel cheated, but more to allow for advanced usecases without shoving every possible scenario down the throats of beginners. :)\n\nAs I said before, if you feel super strongly about this then please make a PR to satisfy your use case. The extra commands can be included in a manual page. Or maybe a `/help commands` which just exhaustively lists all registered commands without the extra info would be a good compromise? Anyways, all up to how strongly you feel about this.\n. @Fastidious I'm going to keep this closed because I don't intend to support this issue personally. As it stands, I'll consider it if someone feels super strongly about it and provides good reasoning why /help should have every command (and a PR would help too).\n. Btw I appreciate your efforts. A lot of random people open issues all the time and it's easier for me to keep track on what's actually being worked on when only open issues are ones that are actively pursued. :)\n. Thanks! This is going to change soon alas, but good to have.\n. I would not be opposed but it would be pretty hard as you'd need to fork the ssh/terminal package we're using and change the formatting mechanics. If you're interested in doing it, I would welcome a PR that does it but I'm going to close this issue for now as it's not on the roadmap for now. :)\n. Cool, I'll check it out in a bit, gotta work on another project this weekend. :)\n. Looks good. Was there anything you were worried about before I merge?\n. Excellent, thank you. :)\n. /motd is already a thing, there are no rooms yet so /topic makes no sense.\n. Make sure it builds. :) I suggest using go integration with your editor, it'll do it automagically.\n. Yes I understand that, but I still want to fix the bug rather than hiding from it. :)\n. Couple of comments, otherwise looks great. Thank you! :)\n. Perfect, thank you! :)\n. I don't understand what you mean? We ignore empty messages, but whitespace messages are not ignored intentionally.\n. Why?\n. Duplicate of https://github.com/shazow/ssh-chat/issues/99, please search for old issues.\n. One nit, otherwise looks good!\n. We really need a theme for light backgrounds though, solar light would be more useful maybe.\n. @sleibrock Omg my internet is the worst right now. How about we just rename the solardark theme to \"solarized\" since you said it works with both light/dark and call it a day for now? :D\n. Hm doesn't look like it was causing the problem I thought it did, closing for now.\n. It's impossible to detect exactly when a user disconnects when it's not user-initiated, also ssh can try to recover the connection for lossy networks. The keep-alive ping will kick your disconnected ghost next time it rolls around, that's the best we can do until user registration is implemented.\n. Might be out of date, would you like to update it?\n\nAnd yes, you need to get pubkeys out of band to whitelist them. It takes a file in the same format as ~/.ssh/authorized_keys\n. Thanks!\n. Yea I think I took it out because there was a race condition that is now fixed, wee.\n. Yea, there's a few TODOs in that genre depending how big of a names list we want to handle. Using a trie would be one of them.\n. @sahilgoel1610 Evaluating which library to use is part of this task, make sure to look at various options. After a really quick survey, https://github.com/armon/go-radix looks like a good option.. Also this PR does a lot of the work and has some related feedback: https://github.com/shazow/ssh-chat/pull/221 . Correct. :) The idea is to make it easier to visually match names listed to names in the chat.\n. @sahilgoel1610 Why wouldn't it work? You could colorize them in this function: https://github.com/shazow/ssh-chat/blob/master/chat/command.go#L176. Basically something like [this](https://github.com/shazow/ssh-chat/blob/d2f08490f7f8fbfdbbcc4c9beffeae3f18d4dc83/chat/message/message.go#L125-L127) near [here](https://github.com/shazow/ssh-chat/blob/d2f08490f7f8fbfdbbcc4c9beffeae3f18d4dc83/host.go#L289).\n. See the hints in https://github.com/shazow/ssh-chat/issues/207. The user needs to be able to disable BELs.\n. Feel free to re-open or make a new one if you feel like doing it later.. Thank you!\n. Which version of Go are you using? Can you try Go 1.7?\n. Looks like you have Go 1.3 installed, which is several years old. I'm guessing your distribution's package manager does not carry a recent version of Go, so you'll need to install it out of band: https://golang.org/dl/\n\nAlternatively, use the pre-built ssh-chat release binaries for ARM: https://github.com/shazow/ssh-chat/releases\n. How did you install it?\n- If you [use the binary releases](https://github.com/shazow/ssh-chat/releases), extract it and run it from the directory of where it's extracted or move the binary somewhere into your `$PATH`.\n- If you're compiling it, `make build` or `go build ./cmd/ssh-chat` will spit out the binary in the project root directory, so you'll need to `./ssh-chat`\n- If you're using `go get github.com/shazow/ssh-chat`, then the binary will be in your `$GOPATH/bin`. Add it to your `$PATH` or use the absolute path.\n. Yay welcome to the ssh-party. :P\n. Some notes for myself so I don't forget everything and have to re-figure-everything-out from scratch again next time:\r\n\r\n- Multiplexing connections in the client struct is not the way to go: The room skips sending messages to itself, so the clients are not kept in-sync that way. It would be better to keep separate clients but perhaps share a UserConfig.\r\n- .. Or maybe it's fine if we do it at the terminal layer.. @rileytg Hi! Good question. I would suggest working on master. It's not certain that the v2 refactor will get merged anytime soon\u2014I'm experimenting with some big changes which might not pan out.\r\n\r\nIf you're looking for things to hack on, I suggest checking the [Tiny](https://github.com/shazow/ssh-chat/issues?q=is%3Aissue+is%3Aopen+label%3ATiny) tag which should be just a few lines of changes and a great place to start. For bigger work, [Help Wanted](https://github.com/shazow/ssh-chat/labels/Help%20Wanted) is a good one.. @zorchenhimer Neat, would you be interested in doing a PR to swap it out?\n. @zorchenhimer Don't worry about Windows off the bat, would be good to switch regardless and we can figure out if Windows works later. :)\n. Thank you! :)\n. Thanks for the thought but we removed our Dockerfile recipe since we've started shipping pre-compiled binaries. It's trivial to run ssh-chat now with or without docker. :)\n. \ud83d\udc4f \ud83c\udf6e \u2728 \n\nThank you! :)\n. Some thoughts:\n1. Any reason why it makes sense to move the completion from the Host to the Room?\n2. Should a TrieSet be a separate thing from Set? The rest of our sets don't need this feature. TrieSet could embed the normal Set and wrap additional functionality onto it. (It can also live in the `set` package though.)\n. 1. Given that the only place `Room.CompleteName` is used is by the Host, I'd say that this logic belongs in the Host.\n2. I'm happy to review your trie implementation as a standalone thing if that would be interesting for you (let me know what kind of feedback you'd like), but for the purpose of this PR I would prefer to use one of the implementations here: https://github.com/Workiva/go-datastructures\n. Will do. :). @haikuginger Thanks for playing along before. I still look back at this occasionally. If you don't get around to it, I might use your integration points and swap out the Trie implementation. Thanks for doing most of the work for that. :). That's already a thing, ssh-chat emits a [BEL character](https://en.wikipedia.org/wiki/Bell_character) when you're mentioned so you can configure your terminal to respond accordingly.. Hi Deksar,\r\n\r\nWhen you're ready to start working on a feature, please open an issue for that specific feature to discuss the approach.\r\n\r\nFor auto-executing commands, I'd suggest waiting on #74 instead because registered users will retain their configuration state between sessions (wether you have /quiet or not) so you won't need any auto-executing commands.\r\n\r\n> How to set a specific login/nickname so that it can write ONLY to an another defined nickname (via msg?), instead of entire the \"chat channel\"?\r\n\r\nYou can `/msg othernick hello` if that's what you mean. If you want a user that can only write to another user, that's too narrow of a use case and out of scope for this project. I suggest forking for that.\r\n\r\n> How to set passwords? After logging in with a nickname, requesting a password.\r\n\r\nYou can [whitelist users using public keys](https://github.com/shazow/ssh-chat/wiki/FAQ#can-i-block-users-from-connecting-how-do-i-assign-admins), passwords are less safe and considered out of scope for this project.\r\n\r\n> Also perhaps, someday support for RSA ssh keys generated by using -o?\r\n\r\nHmm where is it not supported? Please open a specific bug for this, I'd like to support this fully.. Verbosity of the sshd package is set by the ssh-chat when called in debug verbosity: https://github.com/shazow/ssh-chat/blob/master/cmd/ssh-chat/cmd.go#L84. I'm confused, can you expand on what's wrong?. How does it fail?. Sounds like a good PR if you're interested. :). Not with that attitude! :>. How are you installing it? Try `go get -u github.com/shazow/ssh-chat`?\r\n\r\nIf you want to use `make`, you need to make sure you have the latest version (`git pull`) and have it in your `$GOPATH`.\r\n\r\nThe master branch no longer has any mentions of the common package.. More instructions here: https://github.com/shazow/ssh-chat/wiki/FAQ#how-can-i-build-ssh-chat\r\n\r\nLet me know if you're still having problems.. What version of Go are you using? Make sure to use a recent version of Go.. What version is \"the latest\"? Type `go version`. You're using gccgo, which is probably like 5 years old. Please use a recent version of Go from here: https://golang.org/dl/. Go 1.3 is from 2014. Please try it with a recent version of Go from https://golang.org/dl/, that means 1.8 or 1.7.. Try nuking your old GOPATH (since it was created with a really old version of Go) and try again?\r\n\r\n```\r\nrm -rf /opt/gopkg\r\ngo get -u github.com/shazow/ssh-chat\r\n```. Oh also those warnings you got are fine. `make` or `go build ./cmd/ssh-chat` should still work.\r\n\r\nThe warnings are about the vendor submodules which are optional.. Uhh which directory did you nuke? Is your $GOPATH directory _inside_ your go installation? That'll break everything, it needs to be outside of it.. If you don't need to work with ssh-chat from source, please use the binary releases: https://github.com/shazow/ssh-chat/releases/\r\n\r\nOtherwise, you need to setup a working Go environment first, follow these instructions: https://golang.org/doc/code.html. If you don't need to work with ssh-chat from source, please use the binary releases: https://github.com/shazow/ssh-chat/releases/\r\n\r\nOtherwise, you need to setup a working Go environment first, follow these instructions: https://golang.org/doc/code.html\r\n\r\nssh-chat needs to be inside $GOPATH. $GOPATH cannot be inside of your Go installation or $GOROOT.. You're welcome, have fun. :). You'll probably want to check here if the user is still valid:\r\nhttps://github.com/shazow/ssh-chat/blob/master/host.go#L237\r\nhttps://github.com/shazow/ssh-chat/blob/master/host.go#L319\r\nAnd if not, reset the ReplyTo to avoid future checks and fail normally.. No clue how to reproduce this, unfortunately.. @rfyiamcool Have you reproduced this bug? Please provide constructive content in comments, use emoji reactions to +1 to things if needed.. Awesome looks good. Now why is travis upset.... Tried it locally, works, yolo.. Which version of Go is this? I can't reproduce locally on Go v1.8.1 no matter how many times I run it.. Specifically fails on Linux. Works on Darwin.. Some quick notes: This is happening because we changed our tests from binding to a hardcoded port to binding to port 0 which is supposed to allocate a random available port that we can use. This _should_ work, no idea why it's not working on Linux. Need to reproduce with a simple example, or fix whatever is making it not work.. LGTM. Wanna figure out why travis is upset?. It's not the same error as #231. This looks like a linting thing.. I appreciate the thought but I'd prefer to avoid including trivial Dockerfiles, especially since this is the same for every Go project and we ship binaries so you don't really need it to run ssh-chat. Feel free to publish on Dockerhub, though!. Hi there, is there an existing issue for this?\r\n\r\nPlease make sure all changes are run through `gofmt` and such.. Looks good, thank you! I assume you tried it and it works? Our CI is broken right now, unfortunately. \ud83d\ude2d . Excellent, thank you!\r\n\r\nNo worries, it's a pretty change test so as long as it doesn't break any existing tests I'm happy.\r\n\r\nUnfortunately our current state of tests is not great... A bunch of things broke on Linux (still works on Mac), and haven't had a chance to fix them. :( Let me know if you're interested in helping with that! :). \ud83d\udc4f \\<standing ovation\\> \ud83d\udc4f \r\n\r\nThank you @ograff \u2764\ufe0f \u2728 \ud83c\udf6e . Excellent, thank you! :). Nice, love it! I'm happy to make it more strict.\r\n\r\nWant to do that, and also make the minor changes in the codebase to make it pass? :D. @shurcooL Wow thanks for all your effort writing up the situation.\r\n\r\nLet's just move forward with plain `go fmt` without the `-s` since it seems Everything Works with it for now and I'll investigate ignoring `vendor` later.. Excellent, huge thanks @shurcooL! :custard:. @za267 That's cool that you made a feature for your server. :)\r\n\r\nOne thing to keep in mind is that history message replay will break the `time.Now()` (historic messages will appear to have been sent when they're rendered).\r\n\r\nThis isn't how I would implement this feature for our version of ssh-chat, but I hope it's working for you! If you're interested in implementing a feature to be merged, pleased open an issue to discuss design/requirements first.. If you want a super quick-and-dirty way to add timestamps, you could prepend the current timestamp right before it gets sent to the user's screen in this function: https://github.com/shazow/ssh-chat/blob/master/chat/message/user.go#L168. Messages already have a timestamp you can use, no need to make your own: https://github.com/shazow/ssh-chat/blob/master/chat/message/message.go#L14. Which code? From the PR? You're definitely welcome to use it for your server but I'd want a different approach to merge it in here. :). Ah, you'll need to update the prompt every minute or somesuch: https://github.com/shazow/ssh-chat/blob/master/host.go#L175. This PR doesn't pass our linting requirements: https://travis-ci.org/shazow/ssh-chat/jobs/268981527\r\n\r\nMake sure your editor runs the code through gofmt etc.. Thanks for helping out, btw. :). Thank you!. To recap some feedback: This is largely considered out of scope for this repo of ssh-chat, but if it's implemented in a nice unobtrusive way then we may consider it for merging. :)\r\n\r\n1. Easiest way to do it quick & hacky (**will not be merged, but fine for your own fork**): Prepend `time.Now()` to each line that gets sent to the user's screen: https://github.com/shazow/ssh-chat/blob/50001bf1727c8ec7fcfc3ae78ab66a125016d13e/chat/message/user.go#L170\r\n2. A more comprehensive way to do it (**not likely to be merged**, but open for debate): Use [`message.Message.Timestamp()`](https://github.com/shazow/ssh-chat/blob/50001bf1727c8ec7fcfc3ae78ab66a125016d13e/chat/message/message.go#L14) as a timestamp for each message, and render it as part of a theme. Would need to add a `theme.ColorTimestamp(...)` function to properly colorize the message segment. Then we could add a theme option whether to render timestamps at all, this would be configured per-user. If disabled, then `theme.ColorTimestamp(...)` would simply return an empty string. Optional: Also change the user Prompt every minute to keep self-sent messages timestamped. Would need to rewrite where the prompt is set which might be a fair bit of work.\r\n3. A more ergonomic approach that is fairly likely to be merged: Anytime a message is sent after some amount of inactivity (e.g. 30min or 1hr), emit the current timestamp as a system message just before relaying the message. This can be done in a very unobtrusive way, and give people a general idea of when messages were sent without polluting the chat too much. It would be configured server-side.. @MaddSauer Please provide constructive content in comments. You can use emoji reactions to +1 things if there's nothing to add to the conversation.. @Atheatos Cool! Unfortunate that just doing SetPrompt is not sufficient.. Ah that is handy to know indeed!. Duplicate of #74. Indeed, it's not possible to run both OpenSSH and ssh-chat on the same port right now.. I believe dep will generate the `Gopkg.tml` based on the current stuff. But yea, that's the idea.\r\n\r\nI don't think much needs to change in the Makefile, just the `dep` target. I can make that change.\r\n\r\nWant to do a PR if you confirmed it works?. Thanks @sleibrock <3. /me searches, here are some random projects using go dep:\r\n\r\nhttps://github.com/apex/gh-polls\r\nhttps://github.com/davecheney/httpstat\r\nhttps://github.com/heptio/ark. >  By deleting the submodules and vendor folder, will this affect the `go get` process of cloning the code? Once it gets cloned it won't have access to the libs like `rateio` so it won't be able to build without having `dep` installed. Is this the correct way to go about this?\r\n\r\nI don't believe it will affect anything. `go get` does not require `dep`. `dep` is optional. `vendor/` dir is only used if it's there. If it's not there, `go get` does what `go get` has been doing since it was first created, long before `vendor/` was introduced.. Love it. Still good to merge as soon as you're ready (remove WIP).. Indeed, other clients work, not sure why JuiceSSH does not.. @tionis Have you read our FAQ? This question should be relevant: https://github.com/shazow/ssh-chat/wiki/FAQ#can-i-block-users-from-connecting-how-do-i-assign-admins. @tionis That's just how linux/bash works. In order to be able to run a binary from anywhere, it needs to be in your `$PATH`, such as `/usr/bin/`. If you want to run a binary that does not live inside a directory that is in your `$PATH`, then you need to specify the path to the binary.\r\n\r\nLet's say you put `ssh-chat` in `/root/downloads/`, then you can run it as\r\n\r\n```bash\r\n$ /root/downloads/ssh-chat --help\r\n```\r\n\r\nOr\r\n\r\n```bash\r\n/ $  cd /root/downloads\r\n/root/downloads $  ./ssh-chat --help\r\n```\r\n\r\nNote the `./` in front, because it still needs to be a path.\r\n\r\nMore on that here: https://stackoverflow.com/questions/6331075/why-do-you-need-dot-slash-before-script-name-to-run-it-in-bash. Thanks. :)\n. Thanks!\n. Ha, very cute!\n. Did you run this? Won't it print every message twice?\n. Looks decent. What do you think, @voldyman? :) \n. Thankies!\n. Awesome, thanks!\n. HMM interesting, any idea how this looks like on lesser terminals?\n\nAlso will need to rebase this. Will merge other PRs first.\n. Cute! Thanks! :)\n. Good idea.\n. Good call, thanks!\n. Why? Doesn't ssh use md5 by default, or am I mistaken? I wanna show the same fingerprints you get when you ssh into a host.\n. Well, find out what ssh clients use, if it's sha1 then I'll merge it. :)\n. Let's do this after we complete #19 and migrate in one fell swoop.\n\nAlso maybe allow for specifying the full pubkey, not just fingerprint.\n. Oops forgot to close this now that the refactor branch is merged. But yea, this is done.\n\nhttps://github.com/shazow/ssh-chat/blob/master/sshd/auth.go#L67\n\n@freewil Maybe we saw the same tweet. :)\n. Thanks!\n. Good call, thanks!\n. Hm, try again? Might have been a bad commit.\n. Btw, what version of Go? We're targeting 1.4 (or 1.3 at least) I think.\n. Yay glad it works!\n. Sick. I love it.\n. In general.\n\nWhen we use the name as an index in our map[string]..., we should lowercase the key before inserting/comparing.\n. Fast like :zap: \n. In fact, it was a little bit :ghost:\n. Why not put a space in front of it? I'd prefer to stick more true to traditional IRC behavior.\n. I GUESS! I'd like to support reserving names and marking admins in a similar fashion, but we can add it later.\n\nAlso I'd suggest supporting pubkey signatures, similar to ~/.ssh/known_hosts. Easier to fill them from github profiles and whatnot.\n. pubkeys for future PR is cool. :)\n. Done. It accepts authorized_keys-style files now.\n. @Fastidious Added a section here: https://github.com/shazow/ssh-chat/wiki/FAQ#can-i-block-users-from-connecting-how-do-i-assign-admins\n\nBasically it's one pubkey per line, as you wrote it.\n. TY\n. Good call, thanks!\n. This way we can shove in some classy ascii art into it, like a banner.\n. Neat!\n\nI kinda like people not being able to control their colors. Let's keep it that way. :)\n. Or how about we just remove black colors from being chosen instead? :)\n. If we'd like to avoid having the same color as somebody else, we could make the colors cycle rather than be random, but I don't think it's worth doing that.\n. Well isn't black near the edge, couldn't you make the number smaller/make an offset? :)\n. Ooo neat chart, thanks.\n\nRe white terminals, turning off colors will help for now. Later adding more themes will help (dark vs light).\n\nWonder if there's a golang library that has some of this color stuff figured out... Wanna search? :D\n. Right you are. :) Fixing.\n. You can keep the same PR (branch) if you'd prefer; it can be easier to keep discussion context that way.\n\nIf you're worried about commit history, I can squash before merging (but I generally don't care).\n. Hey, thanks for this, very cool!\n\nI'm reluctant in merging a feature like this right now, I think there are a lot of open questions (e.g. how do you handle presence in multiple channels?) and I'm not sure it's a necessary feature just yet (1 server per channel is not too bad).\n\nBut you're welcome to continue developing this in your fork. I would be interested to hear how you're using this. :)\n. I appreciate the thought, it's a cool idea. :)\nOn Dec 13, 2014 7:18 PM, \"Evgeniy Vasilev\" notifications@github.com wrote:\n\n> Sure, it was just proof of concept. Thanks.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/shazow/ssh-chat/pull/31#issuecomment-66901170.\n. Looks good, thanks! :) Fix that typo and I'll hit the button.\n. Lovely, thanks! Wanna do the same in history.go? :D\n. Hm wanna rebase so I can hit the button? :D\n. Yay!\n. Now need to make a nice ascii banner.\n. Same idea as #31. Very cool, but out of scope for the project as it is right now. Maybe sometime in the future. :)\n. Could allow for specifying a theme (start with just two themes, mono and color). Either way.\n. Good call, thanks.\n. Seems like a lot of work, but it's not clear to me for what, can you explain?\n\nWe just added reading MOTD from a file, which lets you write longer intros. Does this improve anything over that?\n. > 1. Adds a `/clear` command which resets the screen (useful if you want to keep track of what you have read or not)\n\nTerminals already let you do this with ctrl+L.\n\n> 2. Rather than only sending the last 10 lines of history when you log in, it will detect the height of your terminal and send that amount of previously received messages (up to 80 lines)\n\nI don't think this is necessarily better. This might overwhelm a lot of people if they see a wall of text as soon as they join.\n\n> 3. Gives you one of the following messages whenever you log in (depending on how many other users are in the room):\n> - \"You are all alone in here.\"\n> - \"At least you have **shazow** to keep you company.\"\n> - \"There are currently 12 users chatting.\"\n\nThat's cute, and I'd be happy if you maintained this in your own chat server, but I rather not keep this as part of the main implementation. :) I rather keep the master branch more generic and simple.\n. You do know how many people are in the room with you,\n\n```\n...\n * shazow joined. (Total connected: 41)\n-> Welcome to ssh-chat. Enter /help for more.\n```\n. ~~I actually like the idea that it's possible but not trivial to change your color. I rather not allow people spamming color changes (we already have enough problems with people spamming renames).~~\n. Oh this turns off color, not changes it. Interesting.\n. Would probably be better to not color in the first place rather than de-color after the fact (if color is turned off).\n. > So change the default to no color at all?\n\nSorry, I meant that instead of applying colors to strings and then stripping colors off if people don't want them, we shouldn't be applying colors to strings in the first place if people don't want them.\n\nUltimately this should also allow us to apply _different_ kinds of colors for people on demand, based on selected themes.\n\nThat aside, I believe colors should be on by default.\n\nThis improvement might be better for a separate PR though, what do you think?\n. Mmm yea I think we might need a big refactor to handle coloring on-demand. Let's go forward with this as-is for now, then.\n. Oh btw, wanna add the `/theme` command to the help text?\n. Thank you! :)\n. Fixed in #54.\n. Not right now, I think.\n\nWe still haven't chosen our storage mechanism for persisting state. Let's do this piece afterwards. :)\n\nI opened an issue: #47\n. Hey @JeanSebTr, that looks really nice, thank you!\n\nI'm actually planning on rewriting that whole section of code myself also. Do you might if I hang onto this PR as a reference? I had a different idea for how to structure the code and I'd like to give it a try. (Unfortunately this will probably have to wait until next week.)\n. This is done within the refactor branch that was merged.\n. Thank you! :)\n. sqlite is my least favorite choice right now as relational schema-enforced is not beneficial for the problem at hand and adds a fair bit of code complexity to setup, maintain, and query.\n\nI don't believe there is a need for a config file just yet, as long as the command-line flags remain simple enough.\n\nI can confidently say that we are definitely not touching XML for anything. :)\n. Decoupling makes sense when you have something to decouple, it's still too early to even know what we want to store or what we'll do with it. Further, depends which storage backend we choose will dictate how simple/complex the usage of it is and how we implement the feature.\n\nYou're welcome to tackle and propose an interface, but I suspect it's going to change a lot before it's put into use. :/\n. Hopefully fixed by #50, will re-open otherwise.\n. Looks like this is still a problem, we've more pprof'ing to do. /cc @empathetic-alligator \n. Hmm might not be a problem actually, garbage collector doing garbage collecty things. Will leave it running for a while longer. Note to self: run with pprof.\n. Should be much better as of v1.2\n. @empathetic-alligator You're a fantastic human being, thank you!\n\n> I used pprof to find it, should it be permanently enabled? The only problem is that an http server must be running in the background. Should I add a command line arg that turns it on?\n\nYea I was thinking adding an optional `--pprof <port>`, what do you think? (Maybe diff PR)\n. Nice! Can you please rebase against the latest master so that I can hit the big red merge button? :D\n\nThank you again!\n. Wonderful, thank you!\n\nIf you can find a way to make travisci fail on linting errors, that'd be great. :)\n. Excellent, one nit. :)\n. Also failing our new stricter travisci lint tests: https://travis-ci.org/shazow/ssh-chat/builds/44044384\n. Excellent!\n. I like this solution, thank you. :)\n. Thank you!\n. I think that's a good idea. I want to try to do this next week too, but if you want to try and beat me to it, have at it! :)\n. Not yet.\n\nJust a warning, I'm going to be going offline until next week and possibly reworking this while I'm away. There's a good chance I'll do this while I'm offline, but you're welcome to try as well if you don't mind the chance of being superseded. :)\n. Done.\n. aquilax claims it's working now, yay! http://i.imgur.com/II14xR5.png\n. @empathetic-alligator Just restarted with the new version an hour ago, so give it a try again.\n\n@aquilax Any tips?\n. Shippin' it! Thank you.\n. @empathetic-alligator I would adore a better fix. :) This is the only workaround we could think of.\n. Clearly there are a lot of options, need to pick something sensible.\n\nI like the idea of being notified wherever I'm mentioned, making mentioners have to prefix with @ to know I got notified feels like an unnecessary thing to educate them on. :/\n. Regexp has been vastly improved in the new version.\n. Whitelist implies that nobody except people in the whitelist can join, so that's still fine.\n\nAs far as banning goes, yes it wouldn't work anymore. I have mixed feelings about implementing ip-based banning as opposed to using something like iptables.\n\nEither way, I'd like to support no-pubkey connections, at least optionally (might add a flag later). Thank you for this. :)\n. @songgao Oh can you send a PR that rejects no-pubkey connections if whitelist is defined?\n. Maybe something like:\n\n``` go\nif !server.IsWhitelisted(\"\") {\n    return nil, fmt.Errorf(\"Not Whitelisted.\")\n}\n```\n\nIf there is no whitelist, it should do the Right Thing I think.\n. Not yet.\nOn Dec 16, 2014 4:27 PM, \"persontwo\" notifications@github.com wrote:\n\n> Has the server been restarted since PR#62 was merged? I attempted auth w/o\n> pubkey but it won't work.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/shazow/ssh-chat/pull/62#issuecomment-67258468.\n. Thanks for reporting, that's no fun. :)\n. Done.\n. Thank you! Very important feature. :)\n. Will take a look at this later. FYI, in the future, you don't have to open a new PR just to change stuff. Feel free to force-push to overwrite commit history if you're worried about it. I'm not too worried about commit history purity, though.\n. `git commit --amend` to merge into the previous commit, then `git push origin $branch --force`.\n\nAlternatively, you can push your new branch into the old branch: `git push origin $newbranch:$oldbranch --force`.\n. NP. :) Will take a look at PRs tomorrow, taking a day off ssh-chat otherwise (as you can tell lol).\n. Some good ideas, but what do you think about doing something like #44 instead?\n\nI plan to do this kind of refactor myself soon, maybe it'd be best to leave it off until then.\n. Thanks @peterhellberg. Sorry for not giving this feedback earlier. :)\n. I've thought about this but I leaned towards not including it. The main reason to include it on-join is to alert the joining user how many people are in the room with him/her. For leaving, there's no point. If someone who is already in the room wants to know, they can always do /list. :)\n\nThank you though, I appreciate the effort!\n. Crafty, thanks.\n. This will still tab-complete to lowercase names rather than properly-cased names, right? Can we fix that too?\n. Thank you for pinging! :)\n\nLooks good, can you rebase against master, looks like there are some merge conflicts. I think we added a RWLock around iterating over clients.\n. Perfect, thank you!\n. There is no name \"registration\" yet, that will come as a feature in the future once the plumbing is done. :)\n. @empathetic-alligator Good stuff, thank you. Left some review comments. Happy to merge this after we clean up the code. :)\n. Not a problem, I appreciate you getting involved. :)\n. Please ping me when I should take a look at it again. :)\n. Looks great, thank you! :)\n. /cc @jazzychad Check this out.\n. Saw this in the logs yesterday after the server crashed.\n\nI don't believe the server was shutting down, except for this crash. There were many hundreds of lines of traceback from various goroutines\u2014we might also be leaking goroutines. :p\n. Should be fixed in https://github.com/shazow/ssh-chat/commit/b90017bfe6f96252e9db96bb972d27f2c7246a66\n. Yup this is planned, thank you for tracking it.\n\nCurrently blocked on #47 (feel free to join the discussion).\n\nThis will likely be an optional feature, possibly not enabled on public servers, or maybe users will need to ask for permission from ops to be able to register their nicks.\n. More thoughts on this as I'm starting to spec it out:\n\n## User registration and out-of-band notifications\n\nYou'll be able to type `/register myemail@domain.com` and it will attach your pubkey to your email (after sending off a validation email and confirming ownership through another command). The benefit of registration is you get offline presence (aka you appear as in-chat even if you disconnect) and you get instant email notifications of mentions and emails of conversation summaries of what you missed (hourly/daily maybe). Possibly do push notifications too (through pushbullet or something else).\n. When email notifications get sent, they're going to include a \"safe\" unencrypted section, and the context of the notification will be encrypted below if you want to read it without reconnecting. Something like this:\n\n> You were mentioned on chat.shazow.net.\n> \n> Connect to the server to read the notification, or run the command below to decrypt the context:\n> \n> $ openssl command to decrypt using your ssh privkey << EOF\n> [[encrypted base64 blob to your ssh pubkey]]\n> EOF\n. A quick update: There's some progress in the [refactor branch](https://github.com/shazow/ssh-chat/tree/refactor) towards design changes that are required for this, but I'd say it's still around 50% done. I'm not actively working on this right now so it might be a while.. Done.\n. Merged the giant refactor branch into master, preparing for v1.0 release. \n. Just release v1.1 with binary builds. Still lots of work to do, but tests pass and there are no detected race conditions, it doesn't crash in trivial cases anymore, and we have 46.6% coverage across modules. While not all of the TODOs are completed, I think it's in a good state and good enough to close this issue for now.\n. Sorry I just beat you to it. :)\n\nAlso I don't think we need to check for \"\", because that's a nice easy way to disable no-auth logins (banning \"\" fingerprint).\n. I'll fix that, thanks!\n. Fixed in https://github.com/shazow/ssh-chat/commit/8bba2e391797ad21f1dc4ae3751f6ab9a8744791 among other things.\n. @empathetic-alligator Glad you asked! I have some great news for you. I wrote precisely that piece yesterday, but I don't have the piece you're working on. :)\n\nhttps://github.com/shazow/ssh-hammer\n\nFeel free to steal any/all of that code, or contribute back to it. Whatever makes sense.\n. Btw, in case it wasn't clear, please don't use this on the live chat.shazow.net, your IP will get blacklisted by iptables. :)\n. Take a look at https://github.com/peterhellberg/check-ssh-chat, too.\n. Tests are in a much better state now, yay.\n. Thanks!\n. Using this script with my fork of it:\n\n``` bash\n#!/bin/bash\nwhile true; do\n    echo \"$(date): Checking...\"\n    if check-ssh-chat -t 10s -v -h localhost -p 22 -n \"ghost-of-shazow\"; then\n        sleep 3600\n        continue\n    fi\n\n    echo \"KILLING!!\"\n    pkill -2 -f ssh-chat\n    sleep 30\ndone\n```\n. Thank you, can you post which commit version you were using? Seems your fork is 20 commits behind the upstream, we might have fixed this bug. :)\n. Yes that bug happened on the latest upstream master, or yes the bug might have been fixed?\n. Ah fair enough, I think we might have fixed it then (I pursued several bugs yesterday). Can you sync to latest master and let me know if this happens again? :D\n. Did the server hang for you when you did this? Or did you write this comment in the wrong issue?\n. @vectorijk This issue is about the server hanging, please open a separate issue?\n. Hopefully fixed in master.\n. Wonderful. :)\n. You'll probably need v1.3 or newer, since we're using http timeouts for a recent feature.\n. Excellent! Also it runs far better on the latest versions. :) I ran it on 1.2 for a while and it was leaking memory and such, I think related to one of the std crypto libs we were using.\n. Pinging top contributors, in case you feel like looking around and giving some feedback. :) Open to ideas for the rewrite.\n\n/cc @empathetic-alligator, @Kealper, @IQAndreas, @jazzychad\n. Just added a bunch of work. Should be almost at feature parity, would love it if people tried it and let me know how it is. Things I need to add:\n- [x] Name sanitizing\n- [x] Uptime/version\n\nAnything else?\n. YAY IT'S MERGED!\n\nNot super battle tested yet, but ready for trial by combat.\n. Mmm yea, nicks get unwhitelisted characters stripped, we should do that before announcing.\n. Oops opened #92 as dupe, fixed now tho.\n. Hmm interesting, I wonder if it's related to us not handling the `shell` channel properly. Thanks for filing! Would appreciate any help looking into this.\n. Please give it a try on v1.1 and re-open if it's still a problem. :)\n. Fixed in https://github.com/shazow/ssh-chat/tree/refactor with aliases. :)\n. OKAAAY. :P\n. Should be good now, lmk if it doesn't work.\n. I'm afraid it's out of scope for this particular project, but feel free to fork and implement your own version (I suggest starting from the `refactor` branch, which will be v1.0 soon).\n\nFor now, you can host multiple instances of these and call each one a channel. :)\n. FWIW, I'd avoid mixing IRC-style and Unix-style commands. Stick with IRC, it already has commands for all of this.\n. Aha, thanks for doing it for this branch, you rock. :)\n. Might be fun to add const/iota types to messages for extra annotation/filtering, will think about this...\n. Can you rebase so that I can hit the big green button? :D\n. ty. just refactored that and didn't catch all the type assertions yet. :)\n. Ah thanks for doing this!\n\nHmm, can you think of other cli tools that solve it this way? Not sure it's a good idea to accept a password through a cli flag as it will show up in the process list and leak the password. Stdin is fine. Environment variable possibly.\n. It would be possible, but we decided not to in this particular project. We feel the experience is more magical without timestamps.\n. Thank you!\n. You're awesome!\n. Done.\n. :custard: thank you\n. What distinguishes a human interface from a bot interface? Are we going to start presenting CAPTCHAs? :)\n. Ah, well there is /theme mono which removes all colors. No plans for JSON yet, though. Maybe someday.\n. There is no way to force bots to identify themselves as such, /mute command will come eventually to let you silence whoever you don't like. We can also add better throttling heuristics if anyone has ideas.\n\nMost likely implementation of a non-human interface is maybe something like TERM=bot env variable which will skip PTY handling and won't set a prompt.\n. I was thinking of exposing the TERM variable in the /whois (any objections?), so that may help further in identifying people vs bots.\n. @chexo3 This is unrelated to bash, it's your terminal (that you might run bash inside).\n\nNo, I don't think there should be security implications. But someone correct me if I'm wrong.\n. IMO setting a TERM variable to bot or readline something would be the cleanest thing to do.\n. That's nothing to do with ssh-chat, that's screen. You need to do ctrl+a, ctrl+d to scrawl with pgup/down.\nhttp://www.cyberciti.biz/faq/scroll-up-down-look-at-data-in-gnuscreen-using-pageup-pagedown-keys/\n. Thanks. :)\n. You're welcome to fork this project and maintain a version of it that has these things, but it's out of scope for the mainline version. :)\n. Your bikeshed is lovely, thank you!\n. One thing that could be improved if you're up for it is to print the host/port based on the socket that actually gets allocated, that way it'll do the Right Thing when you specify port 0 (random available port).\n. Hmm strange, maybe try a fresh $GOPATH? I suggest something like...\n\n```\n$ export GOPATH=$PWD/pkg\n$ go get github.com/shazow/ssh-chat\n```\n. No, you don't need root unless you run ssh-chat on port 22. You definitely\ndon't need root to just build it.\nOn Jan 4, 2015 10:55 PM, \"devNET software group\" notifications@github.com\nwrote:\n\n> Yes, it needs root.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/shazow/ssh-chat/issues/110#issuecomment-68674187.\n. Let me know if this is still happening.\n. Would be cool if we had somekind of continuous builds setup, I think there are some services that do this. For now, a Docker image might suffice.\n. @smiller171 I don't think we need docker for this, but you're welcome to help. :) We need a GOARCH/GOOS build matrix and then publish the binaries somewhere (maybe github releases).\n. Thank you! Feel free to submit an in-progress PR for early feedback (just mark it as WIP in the title).\n. Not quite continuous, but I have some scripts to generate packaged binary releases. Good enough for now! https://github.com/shazow/ssh-chat/releases\n. :revolving_hearts: \n. We're just piggybacking on golang's crypto/ssh library for these things. Would need to fork it to add that support, or report the bug to them. Sorries.\n\nhttps://godoc.org/golang.org/x/crypto/ssh#pkg-constants\n. Fixed.\n. What version of Go? Need v1.3 or newer.\n. Type `go version`.\n. Maybe try a fresh Go environment? Something like...\n\n```\n$ export GOPATH=$HOME/Go2\n$ go get github.com/shazow/ssh-chat\n```\n. Sorry I'm out of ideas. :/ Try building Go from source? Or ask somebody on #go-nuts on freenode IRC?\n\nLet me know if you figure it out.\n. When you `go get ...`, it builds it from source.\n\nAnyways, if you get a copy of the repo, you can do:\n\n```\n$ go get .\n$ go build ./...\n```\n. Make sure you're in the directory of the ssh-chat source code.\n. You'll need to do `go get .` to get all the dependencies first, then build.\n\nOn Tue, Jan 13, 2015 at 1:52 PM, chexo3 notifications@github.com wrote:\n\n> Last login: Tue Jan 13 16:48:36 on ttys000\n> isaacbeckett@MacIron:[~]-04:50 PM > export GOPATH=/Users/isaacbeckett/Desktop/ssh-chat-master\n> isaacbeckett@MacIron:[~]-04:50 PM > go build ./...\n> Desktop/ssh-chat/go/src/ssh-chat/cmd.go:13:2: cannot find package \"github.com/alexcesaro/log\" in any of:\n>     /usr/local/go/src/github.com/alexcesaro/log (from $GOROOT)\n>     /Users/isaacbeckett/Desktop/ssh-chat-master/src/github.com/alexcesaro/log (from $GOPATH)\n> Desktop/ssh-chat/go/src/ssh-chat/cmd.go:14:2: cannot find package \"github.com/alexcesaro/log/golog\" in any of:\n>     /usr/local/go/src/github.com/alexcesaro/log/golog (from $GOROOT)\n>     /Users/isaacbeckett/Desktop/ssh-chat-master/src/github.com/alexcesaro/log/golog (from $GOPATH)\n> Desktop/ssh-chat/go/src/ssh-chat/cmd.go:15:2: cannot find package \"github.com/jessevdk/go-flags\" in any of:\n>     /usr/local/go/src/github.com/jessevdk/go-flags (from $GOROOT)\n>     /Users/isaacbeckett/Desktop/ssh-chat-master/src/github.com/jessevdk/go-flags (from $GOPATH)\n> Desktop/ssh-chat/go/src/ssh-chat/client.go:9:2: cannot find package \"golang.org/x/crypto/ssh\" in any of:\n>     /usr/local/go/src/golang.org/x/crypto/ssh (from $GOROOT)\n>     /Users/isaacbeckett/Desktop/ssh-chat-master/src/golang.org/x/crypto/ssh (from $GOPATH)\n> Desktop/ssh-chat/go/src/ssh-chat/client.go:10:2: cannot find package \"golang.org/x/crypto/ssh/terminal\" in any of:\n>     /usr/local/go/src/golang.org/x/crypto/ssh/terminal (from $GOROOT)\n>     /Users/isaacbeckett/Desktop/ssh-chat-master/src/golang.org/x/crypto/ssh/terminal (from $GOPATH)\n> isaacbeckett@MacIron:[~]-04:51 PM > cd /Users/isaacbeckett/ssh-chat/go/src\n> isaacbeckett@MacIron:[~/ssh-chat/go/src]-04:51 PM > go build ./...\n> ssh-chat/cmd.go:13:2: cannot find package \"github.com/alexcesaro/log\" in any of:\n>     /usr/local/go/src/github.com/alexcesaro/log (from $GOROOT)\n>     /Users/isaacbeckett/Desktop/ssh-chat-master/src/github.com/alexcesaro/log (from $GOPATH)\n> ssh-chat/cmd.go:14:2: cannot find package \"github.com/alexcesaro/log/golog\" in any of:\n>     /usr/local/go/src/github.com/alexcesaro/log/golog (from $GOROOT)\n>     /Users/isaacbeckett/Desktop/ssh-chat-master/src/github.com/alexcesaro/log/golog (from $GOPATH)\n> ssh-chat/cmd.go:15:2: cannot find package \"github.com/jessevdk/go-flags\" in any of:\n>     /usr/local/go/src/github.com/jessevdk/go-flags (from $GOROOT)\n>     /Users/isaacbeckett/Desktop/ssh-chat-master/src/github.com/jessevdk/go-flags (from $GOPATH)\n> ssh-chat/client.go:9:2: cannot find package \"golang.org/x/crypto/ssh\" in any of:\n>     /usr/local/go/src/golang.org/x/crypto/ssh (from $GOROOT)\n>     /Users/isaacbeckett/Desktop/ssh-chat-master/src/golang.org/x/crypto/ssh (from $GOPATH)\n> ssh-chat/client.go:10:2: cannot find package \"golang.org/x/crypto/ssh/terminal\" in any of:\n>     /usr/local/go/src/golang.org/x/crypto/ssh/terminal (from $GOROOT)\n>     /Users/isaacbeckett/Desktop/ssh-chat-master/src/golang.org/x/crypto/ssh/terminal (from $GOPATH)\n> isaacbeckett@MacIron:[~/ssh-chat/go/src]-04:51 PM >\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/shazow/ssh-chat/issues/115#issuecomment-69827656.\n. ssh-chat is installed in $GOPATH/bin.\n. You can drop it wherever you want. `go get ...` installs is in $GOPATH/bin, what you do with it after is up to you. :) Closing this issue.\n. `/motd` is a thing.\n. More specifically, the message you see when you join is that. :)\n. I appreciate your thought, but that's out of scope for this version of the project. I welcome you to build your own fork with some of these features! :)\n. What do you mean? How is that different from how it works now?\n. Yea, that's no fun.\n\nUnfortunately I'm fairly sure the relevant code is inside this library that we're using: https://godoc.org/golang.org/x/crypto/ssh/terminal\n\nI'm not sure we can do much about it without forking it, but might be worth forking.\n\nRegarding limiting connections, that's not an easy problem to solve.\n. @Lana-chan Could be!\n\nThe latest refactor branch should handle this better. I wrote a little library to handle rate limiting at the net.Conn level: https://godoc.org/github.com/shazow/rateio\n. Fixed in the latest master.\n. Eeeh, yolomerging.\n. @swecide There is socket read rate limiting. I kinda eyeballed the default values right now, but it's likely we'll need to tweak it more. Can you tell me more about your behaviour? Is the message hand-typed, or program-generated?\n\nThe default is here: https://github.com/shazow/ssh-chat/blob/master/sshd/net.go#L31 (That's 10kb per 2 minutes, with a 3 second grace period in the beginning.)\n\nRegarding not being able to join again, that shouldn't happen unless you banned yourself somehow. There's no auto-ban yet.\n. @swecide Can you be more specific, like how long are the messages?\n\nI need to get better benchmarks on how many bytes ssh sends per character. But I figure allowing 150-200 chars/minute is fairly safe?\n\nIt may vary with encryption/compression types, though. Hmmm.\n. Hmm that shouldn't happen. Are you able to reproduce it?\n\nI just tried the same messages on my own local server and it didn't kick me. I had to paste it about 30 times before I got kicked.\n. Yea not clue what's going on here. I'll try to add some logging when somebody is kicked, stay tuned (on vacation atm, might be a while).\n. Okay, tracked down the problem. Each character is ~52 bytes when sent separately (ie. keystrokes, vs copypasta). I'll need to add a different Limiter to the RateLimited connection which does counts # reads rather than # bytes (unless it's a really big read). Will fix soon. :)\n. Thank you!\n. This is already a thing. You need to be an admin to /kick or /ban users.\n\nYou can add initial admins by supplying a file with their public key using the --admin flag. After that, you can /admin people.\n. No worries. :)\n. Appreciate the suggestion!\n\nI think a better approach to have pre-built binaries people can download. See #111.\n. Yup, I'm familiar with brew. I've been using it for years on my OSX. Unfortunately, it's only relevant to OSX.\n\nWhy would a .pkg work better?\n\nGolang can compile binaries for all platforms, not just *nix.\n\nI'm not going to stop you from making a Brew recipe for ssh-chat, I'm just saying it's not something I'm going to pursue. :)\n. You might be mistaking what a golang-built binary is. The tarball download you're asking for is exactly what it is. I'm not sure what difference you're drawing between a *nix binary and a prebuilt binary and a .pkg native format.\n\nAlso, you need git for brew to work regardless (albeit brew installs it for you). Anyways, feel free to make whatever recipe you'd like. :)\n. > I mean a *nix binary is for *nix systems, it is prebuilt as well, but you would need to decompile it and recompile on a mac to use it on a mac\n\nThat's not how it works. You don't decompile anything. Go builds binaries for target platforms. You can build one for each of Linux, Mac, Windows.\n\n> What version is ssh-chat at?\n\nWhat do you mean? The latest commit hash is the version right now. Vaguely v1.x.\n. Good find, fixed! \n. Ban user/ip already exists.\n\nChannels is out of scope for this fork, but you're welcome to add it yourself. :)\n. I appreciate the thought but I don't want to introduce remote code execution to ssh-chat as that would open up a big can of vulnerabilities for us to fight against. :)\n. I forget, it might already be possible to pipe things. It'll likely trigger anti-spam throttling, though.\n. Nevermind, I think we disabled that because people were having too much fun piping in junk.\n. @chexo3 This is not something I need, but you're welcome to do that in your fork. :) You may need to implement a handler for the `exec` channel request type to do what @aminehmida proposed.\n. @fjarlq As you noticed, this package is a bit stale as it's not actively being worked on at the moment. I appreciate you diving in and cleaning up, very welcome improvements. :)\n\nThank you again!\n. Thank you!\n. Can we make this only run on the master branch after the PRs have been merged, in a separate suite?\n\nI still want to keep travisci tests for PRs.\n. > You need to set DOCKER_USER, DOCKER_EMAIL, and DOCKER_PASS environment variables in Travis for it to push the image to Docker Hub\n\nDoes it make any sense to do this? I don't want to let everyone in the world push to my docker hub account. Or can I do this privately in my travis account?\n. What version of Go are you running? What OS?\n. Yea looks like the tests are hanging, probably a deadlock. Not sure why. We should add a `-timeout 10s` or something to the `go test` command. Default is 10min which is a bit cray.\n. If you can identify how you reproduce the failures on a specific platform, please open an issue. :)\n. Removed docker releases in favour of binary releases, can be easily wrapped with any blank docker now.\n. Can't reproduce. Maybe your internet connection is blocking outbound SSH? Could try it from a different network.\n. Oh, if you're connecting but getting permission denied, it's possible your ssh key got banned. You can try a fresh key. :)\n. ssh-chat accepts an optional whitelist of public keys. chat.shazow.net does not operate with a whitelist, so all public keys are accepted unless they're invalid/banned.\n. You too, happy chatting! :)\n. Umm, you could run ssh from bash to ssh into your ssh-chat server. :) Or read the logs.\n. Start it on a different port?\n. ssh-chat is not a client, it's a server. Having users run ssh-chat is not going to do what you want. ssh is a client for ssh-chat (the server). ssh is also a client for sshd (the server).\n\nNormal sshd and ssh-chat can't share a port right now, you'd need to write a multiplexer of somekind.\n. Thank you!\n. Glad you like it, enjoy! :)\n. @epitron Btw you're from Toronto? I'm moving back to Toronto in a few months, we should grab a beverage.\n. Hey there, the demo server is running v0 (version before a major refactor). You're welcome to try out that branch!\n\nBetter yet, if you can find what's causing the bug, I'd appreciate a fix. :)\n. I believe there's a --pprof flag which starts ssh-chat with a [pprof server](https://golang.org/pkg/net/http/pprof/) that you should be able to inspect after it becomes unresponsive. That output should give us a hint of what's going on, maybe there's a run-away goroutine cluster or a blocked channel somewhere.\n. Glad you like it and thanks for helping out! I'm actually also working on a [custom irc server](https://github.com/shazow/go-irckit) that I hope to combine someday. >.>\n. Btw couple more things, might be worth making a build with the race detector enabled (-race). Also hope you're using Go 1.6, it has some improved stack output that will be easier to parse.\n. No, master should have more features but v0 might be more stable.\n\n\"won't run\" is just not enough information to help. :) Is there an error, maybe?\n. You're not running it in the pasta?\n. Er sorry, pasta is slang for copy-paste. :)\n\nYou pasted the commands you typed to build ssh-chat, but you say it won't run and you didn't include anything about running it? Is there an error? With what you're sharing, I just have no information about what is going wrong, all I have is your word telling me it's not working. :)\n. You're welcome. :) Hope you'll have the opportunity to dig into why master is failing for you.\n. `--whitelist=` flag, see `--help`\n. Should be fixed in v1.1, give it a try. :)\n. Which version did you try? Latest master has the new format iirc.\n. Well, my \"reference server\" is a bit out of date. :)\n\n```\n[shazow] /uptime\n-> 11017h53m7.906117303s\n```\n. Indeed it would, but alas keybase does not do anything with ssh pubkeys so it doesn't really fit. :( Related issue: https://github.com/keybase/keybase-issues/issues/710\n\nAlso PM me your email address and I'll send you an invite. :)\n. Hmm so it's not bindable from 0.0.0.0:2022 locally? That's frustrating. Honestly not sure what the problem is here, would appreciate any help with debugging. :)\n. Can anyone confirm if this is still a problem with v1.1? Check the latest binary release here: https://github.com/shazow/ssh-chat/releases\n\nPlease re-open the issue if its.\n. Ah you probably want a more modern Go, 1.3 is several years old. Try to get 1.5 or newer.\n. @jbenet I like the idea but not comfortable rewriting imports to use ipfs for a non-ipfs-related project though. (Not yet at least.) :)\n. @jbenet:\n1. I don't feel the transport should be hardcoded into the import namespace. I think this is consistent with Go's decision to exclude http(s)://, git:// etc from the import statements, and adding ipfs:// or similar (even /ipfs/...) would be a regression in that direction.\n2. I don't want to _require_ an additional non-ubiquitous service that is largely unrelated to golang dev just to build the project. If it was an optional enhancement, that'd be cool.\n\nReally a pinning/lock file is probably the way to go, where aware tools can fetch the dependencies from the best possible source (yay ipfs if available!) but still fall back to the normal golang vendoring/namespacing mechanics.\n. > `gx` works out of the box without ipfs, it uses http from the ipfs.io gateway. (think of it as our github.com or our npm), but it verifies all the content is correct, and version locks.\n\nFair point. My ideal dep tool degrades gracefully to not requiring any external tools but adds value when available.\n\nThe package mapping thing will put it at a place where it could work, though!\n. Should be fixed with https://github.com/shazow/ssh-chat/commit/838f58e648b30bbf2ee2b9351fdf92bd1eb6a333\n. Which version of ssh-chat are you using? The latest master?\n. Cool cool. Any interest in helping debug? :) I'm not actively working on ssh-chat right now but I'd be happy to review PRs and point you in the right direction.\n. No worries, thanks for reporting it! I'll take a look at this if I pick up the project again, but can't promise a timeline. Maybe someone will beat me to it! :)\n. Fixed in v1.1, weee.\n. I'm going to be working on fixing some panic/crash bugs in master, and I want to add email notifications. Also binary builds releases.\n. Let's say starting around 1pm EST? Also changed the tentative date to Sat July 9th. I'll likely continue doing some work into June 10th and a bit onwards if people want to keep going remotely. :)\n. @0x004a \n\n> When typing a line wider than terminal width, it skips a line. (not sure why)\n\nIt's a known issue in the terminal stdlib we're using unfortunately, related info here: https://github.com/shazow/ssh-chat/issues/22\n. Hey everyone, hope you're ready to hack on ssh-chat this weekend!\n\nI'm super busy with moving back to Canadia but I'm making time for this. Looking forward to pushing out some fun features. :)\n. Okay it'shappening.gif, join the main ssh-chat server to participate.\n\n``` sh\n$ ssh chat.shazow.net\n```\n. Hey everyone, thanks for those of you who came online to hack with me. :D We got some stuff done:\n- @prologic wrote keepalive code that I'm excited to merge soon (feedback pending), and some other good-spirited submissions.\n- @mcroydon cheered us on from the sidelines.\n- My buddy Ted hung out and learned Go next to me (I helped a bit!)\n- I wrote a script to package up binary releases so that people can stop complaining about having to use Go to run ssh-chat.\n\nThis date snuck up on me this time around but I'd like to do this again soon. I'm going to keep hacking on stuff on and off until then. Will ping this thread for the next hackathon. :heart:\n. Have you tried setting your GOPATH environment variable? :)\n\nSome instructions here: https://golang.org/doc/install#testing\n\nIdeally we'll be providing binaries so you don't need to build it from scratch, but that's not done yet. Sorry.\n. See the link I shared. It's Go's \"workspace\", it's where it will download the dependencies into, build/compile, etc.\n. Mentions with tab-complete are already supported, no @ necessary. :)\n. There is a `--whitelist` flag which accepts a list of public keys that are allowed to connect. I believe whitelisting can also occur by admins while the server is running with `/whitelist` but it's ephemeral for now.\n. Fixed.\n. Do you think we could get away with just doing something like this instead?\n\n``` go\n// in sshd/terminal.go:NewTerminal\n...\ngo func() {\n    for range time.Tick(keepaliveInterval) {\n        _, err := channel.SendRequest(\"keepalive\", true, nil)\n        if err != nil {\n            // We'll get an err when the channel is closed, so this goroutine\n            // will clean up itself. Bonus points for catching a specific err.\n            return\n        }\n    }\n}()\n```\n\nMight be a bit nicer since we avoid introducing more parameters/state to unrelated functions.\n. When the client disconnects. If the goroutine returns, it will get cleaned\nup.\nOn Jul 10, 2016 1:02 PM, \"James Mills\" notifications@github.com wrote:\n\n> Maybe :) Are we worried at all about cleaning up the goroutines on client\n> disconnect or server termination? Or do we rely on GC for that?\n> \n> \u2014\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> https://github.com/shazow/ssh-chat/pull/147#issuecomment-231599202, or mute\n> the thread\n> https://github.com/notifications/unsubscribe/AAAYlJDNLrZ_PsCY7lDrlPLJyVERadwcks5qUSWegaJpZM4JIvMa\n> .\n. Merged the proposed variant in 8b9ebbdb6b27f0a00880bd72446e9cac08a4091e, thank you. :)\n. Any concrete benefits here or just your preference?\n\nAs it is, the [godoc that gets generated](https://godoc.org/github.com/shazow/ssh-chat) is fairly small and easy to follow, I would prefer to avoid hiding core/required components (`auth`, `host`) into more subpackages until things get too messy (`sshchat` is practically unusable without them).\n\n`Set` is probably the only one that is obvious but I didn't feel making a util package was justified for just this one struct, since it's not very big and it's not being reused by any other subpackages.\n\nRegarding the `logger`, note how every subpackage has a copy of that. It wouldn't make sense to subpackage just for the sshchat package.\n. That's pretty standard for Go, the idea is you should be able to import the \"primary\" functionality of a package by importing the root repo, as in:\n\n``` go\nimport \"github.com/shazow/ssh-chat\"\n```\n\nAgain I super-appreciate this initiative. I'm going to close this for now but let's keep it in mind if things get messier. :)\n. Just realized I already did this in https://github.com/shazow/ssh-chat/commit/838f58e648b30bbf2ee2b9351fdf92bd1eb6a333 and forgot to close the issue, oops!\n. (I decided to skip adding Godep to avoid dependency on a specific third-party tool, the submodule pins should be sufficient for now.)\n. @anarcat ssh-chat is _all_ about reinventing wheels, but I'm very aware of the IRC protocol (I've even implemented [my own IRC server](https://github.com/shazow/go-irckit) but haven't gotten around to v3 extensions yet). Thanks. :)\n. Looks great! How do you feel about using a [`Set`](https://github.com/shazow/ssh-chat/blob/master/chat/set.go) rather than a list of ignored users? (Might need to move it into a shared package.)\n\nThen we can get rid of `IgnoredNames()`. Maybe even make it a public attribute on `User` and avoid having `Ignore(...)` and `Unignore(...)` altogether since it's all boilerplate anyways?\n. Yay thank you, that's great. I wish we could get travisci to work again, sighhh.\n. This was done a while ago, I think. (cc @sleibrock). Would you be up for writing a test, too? :)\n. Btw, I fixed travisci on the master branch, so should get proper badges if you rebase. :)\n. Going to do a new release so I made the change myself, hope you don't mind. :) Your changes still got merged, thank you!\n. @aaronwinter Excellent, thank you. Also lots more minor issues cropped off if you're feeling inspired. :)\n. There are themes, try `/theme mono`. I'm open to adding more themes like `light`, want to contribute one?\n. Basically https://github.com/shazow/ssh-chat/blob/master/chat/message/theme.go#L176-L186\n\nCould use a couple more themes, one for solarized, one for light backgrounds.\n. Yea basically we'd need a solarized/light background palette, the rest should be the similar. Btw this little block is handy for debugging: https://github.com/shazow/ssh-chat/blob/master/chat/message/theme.go#L189-L192\n. Also the default colourscheme is not readable on iTerm2 using the solarized-dark theme. I think just the system messages, would be good to tweak it a bit (see #178).\n. We now have a `hacker` and `solarized` colorscheme, thanks to @sleibrock <3\n. It's a known bug, not sure what we can do about it right now:\n\nhttps://github.com/shazow/ssh-chat/issues/22\n. Also on-join, chat history messages get injected before the motd.\n. Autocomplete is disabled on the chat2 server until this is fixed.\n. This can be reproduced with Autocomplete enabled by running a server, joining with at least one user, then running `cat /dev/urandom | ssh ...` a few times.\n. Thank you!\n. Hm fair point, thanks!\n. Also BEL emitting for mentions, bonus points for optional enable/disable.\n. Would be nice to include a few extra things while we're at it, like time since joined and client used (v0 had this).\n. Yea I think that's fine, or make it an incremental improvement later.\n. @C0FFEEC0FFEE Thanks! Is there any way to turn on verbose logging?\n. Weird, thanks for reporting it! Will look into it once the more urgent bugs are fixed, or you're welcome to dive in too. :)\n. @botto I think it might have to do with my aggressive rate limiting and the size of your key. I'll tweak that.\n. @botto @C0FFEEC0FFEE Could you both try this server and let me know if it's better? Port 2222 on chat2.shazow.net:\n\n```\n$ ssh -p 2222 chat2.shazow.net\n```\n. @botto Can you confirm also?\n\nOtherwise I'm closing this issue, should be resolved with the next release.\n. That's quite a few bits. :P\n\nCould you try with a shorter key for funsies?\n. Hmmm might be the iptables configuration I was using. Can you try now?\n\nAlso could you try running a [local release](https://github.com/shazow/ssh-chat/releases) and see if you still have problems?\n. FWIW I had iptables set to disconnect after 10 quick successive tcp flushes, bumped that up to 20.\n. `/quiet` should do it.\n. Duplicate of https://github.com/shazow/ssh-chat/pull/157, but thank you. :)\n. It does have `/names`, consider `/list` a secret alias. :)\n. This will be done in #74.\n. All the normal bash terminal shortcuts should work. HOME key and ctrl+a jump to the beginning of the line, just like bash.\n. Is this a problem on chat2.shazow.net? What you're saying is that the colour is too dark for your terminal?\n. Which terminal/colorscheme are you on?\n. Mmm yes, I see what you mean, thank you.\n\nIf you'd like to supply a PR that tweaks the colourscheme, that would be appreciated. :) Seems chat.shazow.net is a bit better than chat2.shazow.net, right?\n. Merging this into #160\n. Ah this isn't a problem, I just didn't define the escape codes properly in my test.\n. Same way as anywhere else, you just need to use an editor that will let you inject the necessary bytes into the file. For example:\n\n``` bash\n$ printf \"\\033[91mHello \\033[0m world.\\n\" > motd.txt\n```\n. I think it's okay to leave some non-essential commands hidden. :)\n\nIf you feel strongly about this, feel free to add Help field to it and send a PR.\n. https://github.com/shazow/ssh-chat/blob/master/host.go#L339\n\nNote that there are going to be a bunch of hidden commands. I want to avoid /help turning into a massive appendix, but rather a quick-start essentials guide.\n. @shurcooL \n\n> How do you determine if a command is essential or not? \n\nBy making a judgement call. :) I feel not knowing about `/version` and `/uptime` does not prevent you from enjoying ssh-chat in the default case it's intended for. Software has had hidden commands and features since software has become a thing. That's not to make you feel cheated, but more to allow for advanced usecases without shoving every possible scenario down the throats of beginners. :)\n\nAs I said before, if you feel super strongly about this then please make a PR to satisfy your use case. The extra commands can be included in a manual page. Or maybe a `/help commands` which just exhaustively lists all registered commands without the extra info would be a good compromise? Anyways, all up to how strongly you feel about this.\n. @Fastidious I'm going to keep this closed because I don't intend to support this issue personally. As it stands, I'll consider it if someone feels super strongly about it and provides good reasoning why /help should have every command (and a PR would help too).\n. Btw I appreciate your efforts. A lot of random people open issues all the time and it's easier for me to keep track on what's actually being worked on when only open issues are ones that are actively pursued. :)\n. Thanks! This is going to change soon alas, but good to have.\n. I would not be opposed but it would be pretty hard as you'd need to fork the ssh/terminal package we're using and change the formatting mechanics. If you're interested in doing it, I would welcome a PR that does it but I'm going to close this issue for now as it's not on the roadmap for now. :)\n. Cool, I'll check it out in a bit, gotta work on another project this weekend. :)\n. Looks good. Was there anything you were worried about before I merge?\n. Excellent, thank you. :)\n. /motd is already a thing, there are no rooms yet so /topic makes no sense.\n. Make sure it builds. :) I suggest using go integration with your editor, it'll do it automagically.\n. Yes I understand that, but I still want to fix the bug rather than hiding from it. :)\n. Couple of comments, otherwise looks great. Thank you! :)\n. Perfect, thank you! :)\n. I don't understand what you mean? We ignore empty messages, but whitespace messages are not ignored intentionally.\n. Why?\n. Duplicate of https://github.com/shazow/ssh-chat/issues/99, please search for old issues.\n. One nit, otherwise looks good!\n. We really need a theme for light backgrounds though, solar light would be more useful maybe.\n. @sleibrock Omg my internet is the worst right now. How about we just rename the solardark theme to \"solarized\" since you said it works with both light/dark and call it a day for now? :D\n. Hm doesn't look like it was causing the problem I thought it did, closing for now.\n. It's impossible to detect exactly when a user disconnects when it's not user-initiated, also ssh can try to recover the connection for lossy networks. The keep-alive ping will kick your disconnected ghost next time it rolls around, that's the best we can do until user registration is implemented.\n. Might be out of date, would you like to update it?\n\nAnd yes, you need to get pubkeys out of band to whitelist them. It takes a file in the same format as ~/.ssh/authorized_keys\n. Thanks!\n. Yea I think I took it out because there was a race condition that is now fixed, wee.\n. Yea, there's a few TODOs in that genre depending how big of a names list we want to handle. Using a trie would be one of them.\n. @sahilgoel1610 Evaluating which library to use is part of this task, make sure to look at various options. After a really quick survey, https://github.com/armon/go-radix looks like a good option.. Also this PR does a lot of the work and has some related feedback: https://github.com/shazow/ssh-chat/pull/221 . Correct. :) The idea is to make it easier to visually match names listed to names in the chat.\n. @sahilgoel1610 Why wouldn't it work? You could colorize them in this function: https://github.com/shazow/ssh-chat/blob/master/chat/command.go#L176. Basically something like [this](https://github.com/shazow/ssh-chat/blob/d2f08490f7f8fbfdbbcc4c9beffeae3f18d4dc83/chat/message/message.go#L125-L127) near [here](https://github.com/shazow/ssh-chat/blob/d2f08490f7f8fbfdbbcc4c9beffeae3f18d4dc83/host.go#L289).\n. See the hints in https://github.com/shazow/ssh-chat/issues/207. The user needs to be able to disable BELs.\n. Feel free to re-open or make a new one if you feel like doing it later.. Thank you!\n. Which version of Go are you using? Can you try Go 1.7?\n. Looks like you have Go 1.3 installed, which is several years old. I'm guessing your distribution's package manager does not carry a recent version of Go, so you'll need to install it out of band: https://golang.org/dl/\n\nAlternatively, use the pre-built ssh-chat release binaries for ARM: https://github.com/shazow/ssh-chat/releases\n. How did you install it?\n- If you [use the binary releases](https://github.com/shazow/ssh-chat/releases), extract it and run it from the directory of where it's extracted or move the binary somewhere into your `$PATH`.\n- If you're compiling it, `make build` or `go build ./cmd/ssh-chat` will spit out the binary in the project root directory, so you'll need to `./ssh-chat`\n- If you're using `go get github.com/shazow/ssh-chat`, then the binary will be in your `$GOPATH/bin`. Add it to your `$PATH` or use the absolute path.\n. Yay welcome to the ssh-party. :P\n. Some notes for myself so I don't forget everything and have to re-figure-everything-out from scratch again next time:\r\n\r\n- Multiplexing connections in the client struct is not the way to go: The room skips sending messages to itself, so the clients are not kept in-sync that way. It would be better to keep separate clients but perhaps share a UserConfig.\r\n- .. Or maybe it's fine if we do it at the terminal layer.. @rileytg Hi! Good question. I would suggest working on master. It's not certain that the v2 refactor will get merged anytime soon\u2014I'm experimenting with some big changes which might not pan out.\r\n\r\nIf you're looking for things to hack on, I suggest checking the [Tiny](https://github.com/shazow/ssh-chat/issues?q=is%3Aissue+is%3Aopen+label%3ATiny) tag which should be just a few lines of changes and a great place to start. For bigger work, [Help Wanted](https://github.com/shazow/ssh-chat/labels/Help%20Wanted) is a good one.. @zorchenhimer Neat, would you be interested in doing a PR to swap it out?\n. @zorchenhimer Don't worry about Windows off the bat, would be good to switch regardless and we can figure out if Windows works later. :)\n. Thank you! :)\n. Thanks for the thought but we removed our Dockerfile recipe since we've started shipping pre-compiled binaries. It's trivial to run ssh-chat now with or without docker. :)\n. \ud83d\udc4f \ud83c\udf6e \u2728 \n\nThank you! :)\n. Some thoughts:\n1. Any reason why it makes sense to move the completion from the Host to the Room?\n2. Should a TrieSet be a separate thing from Set? The rest of our sets don't need this feature. TrieSet could embed the normal Set and wrap additional functionality onto it. (It can also live in the `set` package though.)\n. 1. Given that the only place `Room.CompleteName` is used is by the Host, I'd say that this logic belongs in the Host.\n2. I'm happy to review your trie implementation as a standalone thing if that would be interesting for you (let me know what kind of feedback you'd like), but for the purpose of this PR I would prefer to use one of the implementations here: https://github.com/Workiva/go-datastructures\n. Will do. :). @haikuginger Thanks for playing along before. I still look back at this occasionally. If you don't get around to it, I might use your integration points and swap out the Trie implementation. Thanks for doing most of the work for that. :). That's already a thing, ssh-chat emits a [BEL character](https://en.wikipedia.org/wiki/Bell_character) when you're mentioned so you can configure your terminal to respond accordingly.. Hi Deksar,\r\n\r\nWhen you're ready to start working on a feature, please open an issue for that specific feature to discuss the approach.\r\n\r\nFor auto-executing commands, I'd suggest waiting on #74 instead because registered users will retain their configuration state between sessions (wether you have /quiet or not) so you won't need any auto-executing commands.\r\n\r\n> How to set a specific login/nickname so that it can write ONLY to an another defined nickname (via msg?), instead of entire the \"chat channel\"?\r\n\r\nYou can `/msg othernick hello` if that's what you mean. If you want a user that can only write to another user, that's too narrow of a use case and out of scope for this project. I suggest forking for that.\r\n\r\n> How to set passwords? After logging in with a nickname, requesting a password.\r\n\r\nYou can [whitelist users using public keys](https://github.com/shazow/ssh-chat/wiki/FAQ#can-i-block-users-from-connecting-how-do-i-assign-admins), passwords are less safe and considered out of scope for this project.\r\n\r\n> Also perhaps, someday support for RSA ssh keys generated by using -o?\r\n\r\nHmm where is it not supported? Please open a specific bug for this, I'd like to support this fully.. Verbosity of the sshd package is set by the ssh-chat when called in debug verbosity: https://github.com/shazow/ssh-chat/blob/master/cmd/ssh-chat/cmd.go#L84. I'm confused, can you expand on what's wrong?. How does it fail?. Sounds like a good PR if you're interested. :). Not with that attitude! :>. How are you installing it? Try `go get -u github.com/shazow/ssh-chat`?\r\n\r\nIf you want to use `make`, you need to make sure you have the latest version (`git pull`) and have it in your `$GOPATH`.\r\n\r\nThe master branch no longer has any mentions of the common package.. More instructions here: https://github.com/shazow/ssh-chat/wiki/FAQ#how-can-i-build-ssh-chat\r\n\r\nLet me know if you're still having problems.. What version of Go are you using? Make sure to use a recent version of Go.. What version is \"the latest\"? Type `go version`. You're using gccgo, which is probably like 5 years old. Please use a recent version of Go from here: https://golang.org/dl/. Go 1.3 is from 2014. Please try it with a recent version of Go from https://golang.org/dl/, that means 1.8 or 1.7.. Try nuking your old GOPATH (since it was created with a really old version of Go) and try again?\r\n\r\n```\r\nrm -rf /opt/gopkg\r\ngo get -u github.com/shazow/ssh-chat\r\n```. Oh also those warnings you got are fine. `make` or `go build ./cmd/ssh-chat` should still work.\r\n\r\nThe warnings are about the vendor submodules which are optional.. Uhh which directory did you nuke? Is your $GOPATH directory _inside_ your go installation? That'll break everything, it needs to be outside of it.. If you don't need to work with ssh-chat from source, please use the binary releases: https://github.com/shazow/ssh-chat/releases/\r\n\r\nOtherwise, you need to setup a working Go environment first, follow these instructions: https://golang.org/doc/code.html. If you don't need to work with ssh-chat from source, please use the binary releases: https://github.com/shazow/ssh-chat/releases/\r\n\r\nOtherwise, you need to setup a working Go environment first, follow these instructions: https://golang.org/doc/code.html\r\n\r\nssh-chat needs to be inside $GOPATH. $GOPATH cannot be inside of your Go installation or $GOROOT.. You're welcome, have fun. :). You'll probably want to check here if the user is still valid:\r\nhttps://github.com/shazow/ssh-chat/blob/master/host.go#L237\r\nhttps://github.com/shazow/ssh-chat/blob/master/host.go#L319\r\nAnd if not, reset the ReplyTo to avoid future checks and fail normally.. No clue how to reproduce this, unfortunately.. @rfyiamcool Have you reproduced this bug? Please provide constructive content in comments, use emoji reactions to +1 to things if needed.. Awesome looks good. Now why is travis upset.... Tried it locally, works, yolo.. Which version of Go is this? I can't reproduce locally on Go v1.8.1 no matter how many times I run it.. Specifically fails on Linux. Works on Darwin.. Some quick notes: This is happening because we changed our tests from binding to a hardcoded port to binding to port 0 which is supposed to allocate a random available port that we can use. This _should_ work, no idea why it's not working on Linux. Need to reproduce with a simple example, or fix whatever is making it not work.. LGTM. Wanna figure out why travis is upset?. It's not the same error as #231. This looks like a linting thing.. I appreciate the thought but I'd prefer to avoid including trivial Dockerfiles, especially since this is the same for every Go project and we ship binaries so you don't really need it to run ssh-chat. Feel free to publish on Dockerhub, though!. Hi there, is there an existing issue for this?\r\n\r\nPlease make sure all changes are run through `gofmt` and such.. Looks good, thank you! I assume you tried it and it works? Our CI is broken right now, unfortunately. \ud83d\ude2d . Excellent, thank you!\r\n\r\nNo worries, it's a pretty change test so as long as it doesn't break any existing tests I'm happy.\r\n\r\nUnfortunately our current state of tests is not great... A bunch of things broke on Linux (still works on Mac), and haven't had a chance to fix them. :( Let me know if you're interested in helping with that! :). \ud83d\udc4f \\<standing ovation\\> \ud83d\udc4f \r\n\r\nThank you @ograff \u2764\ufe0f \u2728 \ud83c\udf6e . Excellent, thank you! :). Nice, love it! I'm happy to make it more strict.\r\n\r\nWant to do that, and also make the minor changes in the codebase to make it pass? :D. @shurcooL Wow thanks for all your effort writing up the situation.\r\n\r\nLet's just move forward with plain `go fmt` without the `-s` since it seems Everything Works with it for now and I'll investigate ignoring `vendor` later.. Excellent, huge thanks @shurcooL! :custard:. @za267 That's cool that you made a feature for your server. :)\r\n\r\nOne thing to keep in mind is that history message replay will break the `time.Now()` (historic messages will appear to have been sent when they're rendered).\r\n\r\nThis isn't how I would implement this feature for our version of ssh-chat, but I hope it's working for you! If you're interested in implementing a feature to be merged, pleased open an issue to discuss design/requirements first.. If you want a super quick-and-dirty way to add timestamps, you could prepend the current timestamp right before it gets sent to the user's screen in this function: https://github.com/shazow/ssh-chat/blob/master/chat/message/user.go#L168. Messages already have a timestamp you can use, no need to make your own: https://github.com/shazow/ssh-chat/blob/master/chat/message/message.go#L14. Which code? From the PR? You're definitely welcome to use it for your server but I'd want a different approach to merge it in here. :). Ah, you'll need to update the prompt every minute or somesuch: https://github.com/shazow/ssh-chat/blob/master/host.go#L175. This PR doesn't pass our linting requirements: https://travis-ci.org/shazow/ssh-chat/jobs/268981527\r\n\r\nMake sure your editor runs the code through gofmt etc.. Thanks for helping out, btw. :). Thank you!. To recap some feedback: This is largely considered out of scope for this repo of ssh-chat, but if it's implemented in a nice unobtrusive way then we may consider it for merging. :)\r\n\r\n1. Easiest way to do it quick & hacky (**will not be merged, but fine for your own fork**): Prepend `time.Now()` to each line that gets sent to the user's screen: https://github.com/shazow/ssh-chat/blob/50001bf1727c8ec7fcfc3ae78ab66a125016d13e/chat/message/user.go#L170\r\n2. A more comprehensive way to do it (**not likely to be merged**, but open for debate): Use [`message.Message.Timestamp()`](https://github.com/shazow/ssh-chat/blob/50001bf1727c8ec7fcfc3ae78ab66a125016d13e/chat/message/message.go#L14) as a timestamp for each message, and render it as part of a theme. Would need to add a `theme.ColorTimestamp(...)` function to properly colorize the message segment. Then we could add a theme option whether to render timestamps at all, this would be configured per-user. If disabled, then `theme.ColorTimestamp(...)` would simply return an empty string. Optional: Also change the user Prompt every minute to keep self-sent messages timestamped. Would need to rewrite where the prompt is set which might be a fair bit of work.\r\n3. A more ergonomic approach that is fairly likely to be merged: Anytime a message is sent after some amount of inactivity (e.g. 30min or 1hr), emit the current timestamp as a system message just before relaying the message. This can be done in a very unobtrusive way, and give people a general idea of when messages were sent without polluting the chat too much. It would be configured server-side.. @MaddSauer Please provide constructive content in comments. You can use emoji reactions to +1 things if there's nothing to add to the conversation.. @Atheatos Cool! Unfortunate that just doing SetPrompt is not sufficient.. Ah that is handy to know indeed!. Duplicate of #74. Indeed, it's not possible to run both OpenSSH and ssh-chat on the same port right now.. I believe dep will generate the `Gopkg.tml` based on the current stuff. But yea, that's the idea.\r\n\r\nI don't think much needs to change in the Makefile, just the `dep` target. I can make that change.\r\n\r\nWant to do a PR if you confirmed it works?. Thanks @sleibrock <3. /me searches, here are some random projects using go dep:\r\n\r\nhttps://github.com/apex/gh-polls\r\nhttps://github.com/davecheney/httpstat\r\nhttps://github.com/heptio/ark. >  By deleting the submodules and vendor folder, will this affect the `go get` process of cloning the code? Once it gets cloned it won't have access to the libs like `rateio` so it won't be able to build without having `dep` installed. Is this the correct way to go about this?\r\n\r\nI don't believe it will affect anything. `go get` does not require `dep`. `dep` is optional. `vendor/` dir is only used if it's there. If it's not there, `go get` does what `go get` has been doing since it was first created, long before `vendor/` was introduced.. Love it. Still good to merge as soon as you're ready (remove WIP).. Indeed, other clients work, not sure why JuiceSSH does not.. @tionis Have you read our FAQ? This question should be relevant: https://github.com/shazow/ssh-chat/wiki/FAQ#can-i-block-users-from-connecting-how-do-i-assign-admins. @tionis That's just how linux/bash works. In order to be able to run a binary from anywhere, it needs to be in your `$PATH`, such as `/usr/bin/`. If you want to run a binary that does not live inside a directory that is in your `$PATH`, then you need to specify the path to the binary.\r\n\r\nLet's say you put `ssh-chat` in `/root/downloads/`, then you can run it as\r\n\r\n```bash\r\n$ /root/downloads/ssh-chat --help\r\n```\r\n\r\nOr\r\n\r\n```bash\r\n/ $  cd /root/downloads\r\n/root/downloads $  ./ssh-chat --help\r\n```\r\n\r\nNote the `./` in front, because it still needs to be a path.\r\n\r\nMore on that here: https://stackoverflow.com/questions/6331075/why-do-you-need-dot-slash-before-script-name-to-run-it-in-bash. ",
    "IQAndreas": "This is my first time in Go, so pardon me if I don't follow certain coding practices. I will gladly re-write any code to comply.\n. I have one more fix in the pipeline, but it's getting the best of me. :(\n\nhttps://gist.github.com/IQAndreas/4499cd73da59331f1864\n\nIt seems the more I try to fix the issue, the worse I'm making it. If anyone more experienced with Go has any tips on how to fix the errors in that Gist, please, be my guest.\n. > I kinda like people not being able to control their colors. Let's keep it that way. :)\n\nHow about just keeping the `/change-color` command in that randomizes the color (as opposed to manually being able to set the value)? That way, if they get a \"bad color\" (such as the black one) or the same color as someone else, they can shuffle it without re-logging.\n. > Or how about we just remove black colors from being chosen instead? :)\n\nBut I really like this line:\n\n```\nreturn fmt.Sprintf(\"38;05;%d\", rand.Intn(256))\n```\n\nI'd just hate to sully that elegant little line with a whole bunch of `if` statements that pick out and ignore the colors we deem \"inappropriate\".\n. > Well isn't black near the edge, couldn't you make the number smaller/make an offset? :)\n\nOh, if it only were that simple:\n\n[![ANSI Colors](http://misc.flogisoft.com/_media/bash/colors_format/256_colors_fg.png)](http://misc.flogisoft.com/bash/tip_colors_and_formatting#foreground_text1)\n\nSome colors are not black, but still difficult to read. And second, we are completely ignoring users with white terminal backgrounds.\n. I'm working on it (though, not at the moment). I plan to completely re-write the way colors are handled and displayed.\n\nThere was a discussion regarding adding themes (`/theme dark` `/theme light` `/theme monochrome`), which would solve this, as well as compatibility issues with terminals that have a more limited set of colors.\n. > Seems like a lot of work, but it's not clear to me for what, can you explain?\n1. Adds a `/clear` command which resets the screen (useful if you want to keep track of what you have read or not)\n2. Rather than only sending the last 10 lines of history when you log in, it will detect the height of your terminal and send that amount of previously received messages (up to 80 lines)\n3. Gives you one of the following messages whenever you log in (depending on how many other users are in the room):\n   - \"You are all alone in here.\"\n   - \"At least you have **shazow** to keep you company.\"\n   - \"There are currently 12 users chatting.\"\n\n> We just added reading MOTD from a file, which lets you write longer intros. Does this improve anything over that?\n\nIt should actually work well with those changes. The code that uses the MOTD in this pull request just measures how many lines long the message is, then it subtracts that amount from the amount of history to display (since that information will be off-screen anyway).\n. > That's cute, and I'd be happy if you maintained this in your own chat server, but I rather not keep this as part of the main implementation.\n\nThough, I do think knowing how many users are in the room when you log in is useful information (so you don't have to type `/list` once you log in to find out if you are talking to an empty room).\n\nWould it work if the messages were changed to:\n- \"You are all alone in here.\"\n- \"There is one other user in here.\"\n- \"There are currently 12 users chatting.\"\n. > You do know how many people are in the room with you,\n\nAh, I assumed the join message wasn't broadcasted to the person who just logged in (and you would have to wait until another person logs in to the the message).\n. This is my first time in Go, so pardon me if I don't follow certain coding practices. I will gladly re-write any code to comply.\n. I have one more fix in the pipeline, but it's getting the best of me. :(\n\nhttps://gist.github.com/IQAndreas/4499cd73da59331f1864\n\nIt seems the more I try to fix the issue, the worse I'm making it. If anyone more experienced with Go has any tips on how to fix the errors in that Gist, please, be my guest.\n. > I kinda like people not being able to control their colors. Let's keep it that way. :)\n\nHow about just keeping the `/change-color` command in that randomizes the color (as opposed to manually being able to set the value)? That way, if they get a \"bad color\" (such as the black one) or the same color as someone else, they can shuffle it without re-logging.\n. > Or how about we just remove black colors from being chosen instead? :)\n\nBut I really like this line:\n\n```\nreturn fmt.Sprintf(\"38;05;%d\", rand.Intn(256))\n```\n\nI'd just hate to sully that elegant little line with a whole bunch of `if` statements that pick out and ignore the colors we deem \"inappropriate\".\n. > Well isn't black near the edge, couldn't you make the number smaller/make an offset? :)\n\nOh, if it only were that simple:\n\n[![ANSI Colors](http://misc.flogisoft.com/_media/bash/colors_format/256_colors_fg.png)](http://misc.flogisoft.com/bash/tip_colors_and_formatting#foreground_text1)\n\nSome colors are not black, but still difficult to read. And second, we are completely ignoring users with white terminal backgrounds.\n. I'm working on it (though, not at the moment). I plan to completely re-write the way colors are handled and displayed.\n\nThere was a discussion regarding adding themes (`/theme dark` `/theme light` `/theme monochrome`), which would solve this, as well as compatibility issues with terminals that have a more limited set of colors.\n. > Seems like a lot of work, but it's not clear to me for what, can you explain?\n1. Adds a `/clear` command which resets the screen (useful if you want to keep track of what you have read or not)\n2. Rather than only sending the last 10 lines of history when you log in, it will detect the height of your terminal and send that amount of previously received messages (up to 80 lines)\n3. Gives you one of the following messages whenever you log in (depending on how many other users are in the room):\n   - \"You are all alone in here.\"\n   - \"At least you have **shazow** to keep you company.\"\n   - \"There are currently 12 users chatting.\"\n\n> We just added reading MOTD from a file, which lets you write longer intros. Does this improve anything over that?\n\nIt should actually work well with those changes. The code that uses the MOTD in this pull request just measures how many lines long the message is, then it subtracts that amount from the amount of history to display (since that information will be off-screen anyway).\n. > That's cute, and I'd be happy if you maintained this in your own chat server, but I rather not keep this as part of the main implementation.\n\nThough, I do think knowing how many users are in the room when you log in is useful information (so you don't have to type `/list` once you log in to find out if you are talking to an empty room).\n\nWould it work if the messages were changed to:\n- \"You are all alone in here.\"\n- \"There is one other user in here.\"\n- \"There are currently 12 users chatting.\"\n. > You do know how many people are in the room with you,\n\nAh, I assumed the join message wasn't broadcasted to the person who just logged in (and you would have to wait until another person logs in to the the message).\n. ",
    "magisterquis": "Fixed the double-message code.  Added rate-limiting and put . and - in SSH version strings.\n. Why, thank you.  gofmt really help.\n\nUpdate the PR with /msg.\n. Might want to add it to /help.\n. Fixed the double-message code.  Added rate-limiting and put . and - in SSH version strings.\n. Why, thank you.  gofmt really help.\n\nUpdate the PR with /msg.\n. Might want to add it to /help.\n. ",
    "voldyman": "i say, it looks better than decent \u2665\n. sure, on it\n. i say, it looks better than decent \u2665\n. sure, on it\n. ",
    "noahbuscher": "This should be closed now. \ud83d\ude09\n. Can I ask what you mean by this? What feature currently is case-sensitive? DMs?\n. Wow. That was fast. Nice work, @empathetic-alligator! :+1: \n. This should be closed now. \ud83d\ude09\n. Can I ask what you mean by this? What feature currently is case-sensitive? DMs?\n. Wow. That was fast. Nice work, @empathetic-alligator! :+1: \n. ",
    "hemanth": "Sorry missed to read the TODO, seems like PR #5 is doing that, thanks!\n. Sorry missed to read the TODO, seems like PR #5 is doing that, thanks!\n. ",
    "film42": "I'm not sure. Going off of this, http://en.wikipedia.org/wiki/Public_key_fingerprint, sha1 and md5 can be used for fingerprints. However, since md5 is broken, it would make sense to use SHA1.\n. These might generate some ideas:\n1. http://unix.stackexchange.com/questions/27636/how-does-ssh-connection-survive-a-network-restart\n2. http://www.cyberciti.biz/faq/if-sshd-is-restart-will-any-connections-be-disconnected/\n\nEdit: They're just TCP sockets at the end of the day, so handling them like an HTTP server with sockets should be the same, right?\n. I'm not sure. Going off of this, http://en.wikipedia.org/wiki/Public_key_fingerprint, sha1 and md5 can be used for fingerprints. However, since md5 is broken, it would make sense to use SHA1.\n. These might generate some ideas:\n1. http://unix.stackexchange.com/questions/27636/how-does-ssh-connection-survive-a-network-restart\n2. http://www.cyberciti.biz/faq/if-sshd-is-restart-will-any-connections-be-disconnected/\n\nEdit: They're just TCP sockets at the end of the day, so handling them like an HTTP server with sockets should be the same, right?\n. ",
    "rockneurotiko": "I think that SSH2 uses SHA-1 by default: http://csce.uark.edu/~kal/info/private/ssh/ch03_09.htm\n. I think that SSH2 uses SHA-1 by default: http://csce.uark.edu/~kal/info/private/ssh/ch03_09.htm\n. ",
    "ghost": "@shazow I think they are trying to avoid MD5 collision attack.\n\nCreating two different files with identical MD5: [FastColl](https://github.com/upbit/clone-fastcoll)\n\nFor extra safety, I even suggest you use multiple checksums. For example, check both MD5 and SHA1.\n. Thank you @naggie and @shazow, I installed latest released Go from source as you suggested and am now using `go version go1.4 linux/arm`. Now, `ssh-chat` succeeded to build and run on my Raspberry Pi :)\n. I've been able to reproduce the scenario by pasting in a lot of text. However, only a few of the times have resulted in me not being able to join the chat again (the others I got the rate limiter warning and sometimes got booted but was able to join the chat again). The text I pasted is obviously several magnitutdes bigger than what I've been typing when I've triggered it by accident.\n. The messages are typed by hand, nothing program-generated. It usually happens when I've been writing 3-4 messsages in quick succession, not quick enough for a \"Rate limiting in effect.\" warning to appear though.\n. This is what the chatlog looks like the last time it happened:\n\notheruser: jo\n[swecide] men h\u00e5ller med\n[swecide] Har ju ett h\u00f6rnskrivbord\n[swecide] men sitter ju alltConnection to serverIP closed by remote host.\nConnection to serverIP closed.\n\nAfter that I was unable to join. As you can see, not a lot of text and no rate limiting.\n. Yep I just tried it again with three test clients and me mashing letters\n\n![Image](http://i.imgur.com/X7gpUAk.png)\n\nI'm using a whitelist if that has anything to do with it.\n. I have found the same problem. But apparently, you need to create a net.Listener separately. The http package's ListenAndServe functions are for convenience, and are not a complete solution.\n\n```\npackage main\n\nimport (\n    \"log\"\n    \"net\"\n    \"net/http\"\n)\n\nfunc main() {\n    sm := http.NewServeMux()\n    sm.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n        w.WriteHeader(200)\n        w.Write([]byte(\"Hello!\\r\\n\"))\n    })\n\n    l, err := net.Listen(\"tcp4\", \":8080\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    log.Fatal(http.Serve(l, sm))\n}\n```\n\nhttps://github.com/golang/go/issues/5197\n. So I've changed line 19; https://github.com/shazow/ssh-chat/blob/master/sshd/net.go\n\n```\n    socket, err := net.Listen(\"tcp4\", laddr)\n```\n. Sounds great!\n- I'm currently using https://github.com/mailgun/mailgun-go to receive email alerts for logins.\n- I've had to hard edit to tcp4 to get it to listen on ipv4 address.\n- When typing a line wider than terminal width, it skips a line. (not sure why)\n. Seems only to affect JuiceSSH, Termius works fine. Well, what i did was using tmux for keeping the ssh-chat running\r\nMy problem is that i dont get how to modify settings like whitelist and admin\r\n. yes of course! thats where i got the idea from, but my question was how i can type in this command (simply said). ![screenshot_20171118-195521](https://user-images.githubusercontent.com/24686969/32985465-38955c06-cc92-11e7-9113-6eac6ec999db.jpg)\r\n. thank you, i knew i was doing a fundamental mistake.\r\nI'm currently getting myself into that whole shell/bash thing. @shazow I think they are trying to avoid MD5 collision attack.\n\nCreating two different files with identical MD5: [FastColl](https://github.com/upbit/clone-fastcoll)\n\nFor extra safety, I even suggest you use multiple checksums. For example, check both MD5 and SHA1.\n. Thank you @naggie and @shazow, I installed latest released Go from source as you suggested and am now using `go version go1.4 linux/arm`. Now, `ssh-chat` succeeded to build and run on my Raspberry Pi :)\n. I've been able to reproduce the scenario by pasting in a lot of text. However, only a few of the times have resulted in me not being able to join the chat again (the others I got the rate limiter warning and sometimes got booted but was able to join the chat again). The text I pasted is obviously several magnitutdes bigger than what I've been typing when I've triggered it by accident.\n. The messages are typed by hand, nothing program-generated. It usually happens when I've been writing 3-4 messsages in quick succession, not quick enough for a \"Rate limiting in effect.\" warning to appear though.\n. This is what the chatlog looks like the last time it happened:\n\notheruser: jo\n[swecide] men h\u00e5ller med\n[swecide] Har ju ett h\u00f6rnskrivbord\n[swecide] men sitter ju alltConnection to serverIP closed by remote host.\nConnection to serverIP closed.\n\nAfter that I was unable to join. As you can see, not a lot of text and no rate limiting.\n. Yep I just tried it again with three test clients and me mashing letters\n\n![Image](http://i.imgur.com/X7gpUAk.png)\n\nI'm using a whitelist if that has anything to do with it.\n. I have found the same problem. But apparently, you need to create a net.Listener separately. The http package's ListenAndServe functions are for convenience, and are not a complete solution.\n\n```\npackage main\n\nimport (\n    \"log\"\n    \"net\"\n    \"net/http\"\n)\n\nfunc main() {\n    sm := http.NewServeMux()\n    sm.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n        w.WriteHeader(200)\n        w.Write([]byte(\"Hello!\\r\\n\"))\n    })\n\n    l, err := net.Listen(\"tcp4\", \":8080\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    log.Fatal(http.Serve(l, sm))\n}\n```\n\nhttps://github.com/golang/go/issues/5197\n. So I've changed line 19; https://github.com/shazow/ssh-chat/blob/master/sshd/net.go\n\n```\n    socket, err := net.Listen(\"tcp4\", laddr)\n```\n. Sounds great!\n- I'm currently using https://github.com/mailgun/mailgun-go to receive email alerts for logins.\n- I've had to hard edit to tcp4 to get it to listen on ipv4 address.\n- When typing a line wider than terminal width, it skips a line. (not sure why)\n. Seems only to affect JuiceSSH, Termius works fine. Well, what i did was using tmux for keeping the ssh-chat running\r\nMy problem is that i dont get how to modify settings like whitelist and admin\r\n. yes of course! thats where i got the idea from, but my question was how i can type in this command (simply said). ![screenshot_20171118-195521](https://user-images.githubusercontent.com/24686969/32985465-38955c06-cc92-11e7-9113-6eac6ec999db.jpg)\r\n. thank you, i knew i was doing a fundamental mistake.\r\nI'm currently getting myself into that whole shell/bash thing. ",
    "agarrharr": "I agree, I wouldn't use md5, it's broken. The security of the MD5 hash function is severely compromised.\n. I agree, I wouldn't use md5, it's broken. The security of the MD5 hash function is severely compromised.\n. ",
    "freewil": "I found this very recent (Dec 2014) diff in the OpenSSH repo:\n\n```\nAdd FingerprintHash option to control algorithm used for key\nfingerprints. Default changes from MD5 to SHA256 and format\nfrom hex to base64.\n```\n\nhttp://cvsweb.openbsd.org/cgi-bin/cvsweb/src/usr.bin/ssh/sshkey.h.diff?r1=1.1&r2=1.2&f=h\n. I found this very recent (Dec 2014) diff in the OpenSSH repo:\n\n```\nAdd FingerprintHash option to control algorithm used for key\nfingerprints. Default changes from MD5 to SHA256 and format\nfrom hex to base64.\n```\n\nhttp://cvsweb.openbsd.org/cgi-bin/cvsweb/src/usr.bin/ssh/sshkey.h.diff?r1=1.1&r2=1.2&f=h\n. ",
    "wirehack7": "Oh god, yeah Debian got in the way again with it's packages.\nInstalled GO from source, works now. Thank you!\n. Oh god, yeah Debian got in the way again with it's packages.\nInstalled GO from source, works now. Thank you!\n. ",
    "wpovell": "@NoahBuscher Thanks!\n. What can I say, I always give :100:% and move like a race :car:\n. @shazow Probably should close this when you get the chance\n. I've never really used IRC, so I may not be understanding what you're looking for, but doesn't this fix just require changing\n\n`case \"\\list\":`\nto\n`case \"\\list\", \"\\name\":`\n. I think I might also play around with this, although my solution may be a little more temporary than @IQAndreas.\n. Addressed, see pull request #41\n. Sure\n. See 0fd74cb\n. @shazow  Probably should close this when you get the chance\n. Addressed, see pull request #41 \n. Ok, cool. My pull shouldn't do anything in that respect, then (although it still adds a /color command related to issue #37). \n. Resolved officially as of 3e3f965e62552030235c06a8caa40ad412c89d00\n. So change the default to no color at all?\n. @shazow, how does this look?\n. Addressed issue #24 \n. @shazow Should be good to merge :+1:. Anything other requested changes?\n. Okay, so fixed the formatting and made coloring be default :+1:\n\nOne of the issues of adding color rather than taking it away (which I agree makes more sense) is that there are a lot of different places where color is added. For example, the terminal prompt is handled separately from the rest of the text. Also, broadcasting would be much less nice since you'd have to send a different message to each client. It's unfortunate that coloring can't just be selectively done on client side.\n. Ah, of course! One sec\n. There we go, added\n. If there are multiple keys, which should be used? Or I suppose all should just be whitelisted.\n. Yeah, I realize now that was a silly question. I might work on this and submit a PR\n. @scrothers Can you explain what that is? I've never heard of it and google hasn't been too enlightening.\n. Oh, nice! This would just be a combination of all the aforementioned methods, leaving the decision to the user? \n. Sure I'll work on that :+1:\n. @shazow Passing lint tests now!\n. Also added small node about `make debug` to developer section of README.\n. Interestingly it prompts for a passphrase, something it doesn't do when I connect via a real terminal. Not sure what this means, though.\n. Do you know how he configured it? I tried when the issue was first posted but never figured it out.\n. _the kludge, it burns_\n\nThis does seem to be a problem with the ssh library itself based on the issue in golang/go#9319. I'm guessing to fix it you'd somehow have to detect if the terminal automatically wraps?\n. Or @username\n. @naggie, not sure I understand. Whitelisting the keys for a github user will allow that user to then join the server using any of those keys (this only matters if the server is using a whitelist). Their name is still set the same way as it is currently, the client's local username. Users are also still able to change their name using the `/nick` command.\n. @shazow Thanks for the feedback! I'll work on these changes. Sorry for the roughness, I'm pretty new to Go and have been using this project to get a hang of the language :+1:\n. @shazow Phew -- Okay, I think I fixed everything. Thank you for taking the time to critique my code so thoroughly!\n. @shazow In what context did this occur?\n\nBased on the line numbers, it look like someone tried to a private message while the server was shutting down, but I could be wrong. One possible fix would just be to check if the channel is open before sending data.\n. @shazow Related to this, I've been working on a script to automatically join and speak on a server to simulate load. However, I've been having trouble authenticating (and the go documentation hasn't been very useful). What type of authentication does the server use? Based on the code it looks like `PublicKey` or `KeyboardInteractive`, but I haven't had much success with using either.\n\nUnfortunately most example code I've found online is for password authentication, which the server doesn't use.\n. @shazow I've got a version working where the program can join the chat server, but so far I've been unable to have it send any messages.\n\nBefore it had only been making a connection:\n\n```\n2014-12-17 20:03:13.524 INFO Connection #10 from: 127.0.0.1:59996, hammer, SSH-2.0-Go\n```\n\nBut now I've got it to actually display the join/leave messages, which may partly simulate what we're looking for:\n\n```\n2014-12-17 18:52:54.230 INFO Connection #9 from: 127.0.0.1:59898, hammer, SSH-2.0-Go\n2014-12-17 18:52:54.230 DEBUG Broadcast to 2:  * hammer joined. (Total connected: 2)\n2014-12-17 20:02:52.517 DEBUG Broadcast to 1:  * hammer left.\n```\n. Addressed in PR #84 \n. @NoahBuscher Thanks!\n. What can I say, I always give :100:% and move like a race :car:\n. @shazow Probably should close this when you get the chance\n. I've never really used IRC, so I may not be understanding what you're looking for, but doesn't this fix just require changing\n\n`case \"\\list\":`\nto\n`case \"\\list\", \"\\name\":`\n. I think I might also play around with this, although my solution may be a little more temporary than @IQAndreas.\n. Addressed, see pull request #41\n. Sure\n. See 0fd74cb\n. @shazow  Probably should close this when you get the chance\n. Addressed, see pull request #41 \n. Ok, cool. My pull shouldn't do anything in that respect, then (although it still adds a /color command related to issue #37). \n. Resolved officially as of 3e3f965e62552030235c06a8caa40ad412c89d00\n. So change the default to no color at all?\n. @shazow, how does this look?\n. Addressed issue #24 \n. @shazow Should be good to merge :+1:. Anything other requested changes?\n. Okay, so fixed the formatting and made coloring be default :+1:\n\nOne of the issues of adding color rather than taking it away (which I agree makes more sense) is that there are a lot of different places where color is added. For example, the terminal prompt is handled separately from the rest of the text. Also, broadcasting would be much less nice since you'd have to send a different message to each client. It's unfortunate that coloring can't just be selectively done on client side.\n. Ah, of course! One sec\n. There we go, added\n. If there are multiple keys, which should be used? Or I suppose all should just be whitelisted.\n. Yeah, I realize now that was a silly question. I might work on this and submit a PR\n. @scrothers Can you explain what that is? I've never heard of it and google hasn't been too enlightening.\n. Oh, nice! This would just be a combination of all the aforementioned methods, leaving the decision to the user? \n. Sure I'll work on that :+1:\n. @shazow Passing lint tests now!\n. Also added small node about `make debug` to developer section of README.\n. Interestingly it prompts for a passphrase, something it doesn't do when I connect via a real terminal. Not sure what this means, though.\n. Do you know how he configured it? I tried when the issue was first posted but never figured it out.\n. _the kludge, it burns_\n\nThis does seem to be a problem with the ssh library itself based on the issue in golang/go#9319. I'm guessing to fix it you'd somehow have to detect if the terminal automatically wraps?\n. Or @username\n. @naggie, not sure I understand. Whitelisting the keys for a github user will allow that user to then join the server using any of those keys (this only matters if the server is using a whitelist). Their name is still set the same way as it is currently, the client's local username. Users are also still able to change their name using the `/nick` command.\n. @shazow Thanks for the feedback! I'll work on these changes. Sorry for the roughness, I'm pretty new to Go and have been using this project to get a hang of the language :+1:\n. @shazow Phew -- Okay, I think I fixed everything. Thank you for taking the time to critique my code so thoroughly!\n. @shazow In what context did this occur?\n\nBased on the line numbers, it look like someone tried to a private message while the server was shutting down, but I could be wrong. One possible fix would just be to check if the channel is open before sending data.\n. @shazow Related to this, I've been working on a script to automatically join and speak on a server to simulate load. However, I've been having trouble authenticating (and the go documentation hasn't been very useful). What type of authentication does the server use? Based on the code it looks like `PublicKey` or `KeyboardInteractive`, but I haven't had much success with using either.\n\nUnfortunately most example code I've found online is for password authentication, which the server doesn't use.\n. @shazow I've got a version working where the program can join the chat server, but so far I've been unable to have it send any messages.\n\nBefore it had only been making a connection:\n\n```\n2014-12-17 20:03:13.524 INFO Connection #10 from: 127.0.0.1:59996, hammer, SSH-2.0-Go\n```\n\nBut now I've got it to actually display the join/leave messages, which may partly simulate what we're looking for:\n\n```\n2014-12-17 18:52:54.230 INFO Connection #9 from: 127.0.0.1:59898, hammer, SSH-2.0-Go\n2014-12-17 18:52:54.230 DEBUG Broadcast to 2:  * hammer joined. (Total connected: 2)\n2014-12-17 20:02:52.517 DEBUG Broadcast to 1:  * hammer left.\n```\n. Addressed in PR #84 \n. ",
    "jazzychad": "i'd like to tackle this in my next PR. was thinking of just starting simple and having one fingerprint per line to allow access to connecting. i think maybe having another sort of config file for mapping fingerprints to nicks or admin/op privileges would solve the other problem. thoughts?\n. Also that way specifying the whitelist file would imply --whitelistOnly and wouldn't need to be another option\n. k, i just got the fingerprints working... can add pubkeys in a future PR?\n. ABANDON THIS PR!!!\n. will send another PR w/ updated code\n. yeah, knew it would cause conflicts, one sec\n. This was due to 2 concurrent patches being merged without knowledge of each other, so the build got broken. I have a PR which fixes this bug my patch \"introduced\" - we should put the Travis button on the readme or something\n. presumably it would have to be all of them\n\nOn Mon, Dec 15, 2014 at 6:44 AM, William Povell notifications@github.com\nwrote:\n\n> If there are multiple keys, which should be used?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/shazow/ssh-chat/issues/46#issuecomment-67003400.\n. my gut says flat-file is gonna be the preferred way to start - we already have configs/keys loading from files using commandline flags. plus this doesn't add any more dependencies for ppl to install their own ssh-chat on a server somewhere. simple and effective. but, after things settle down and are more stable, then creating an adapter layer would be the way to go, methinks.. then we can build adapters for other storage drivers\n. neat!!\n. i'd like to tackle this in my next PR. was thinking of just starting simple and having one fingerprint per line to allow access to connecting. i think maybe having another sort of config file for mapping fingerprints to nicks or admin/op privileges would solve the other problem. thoughts?\n. Also that way specifying the whitelist file would imply --whitelistOnly and wouldn't need to be another option\n. k, i just got the fingerprints working... can add pubkeys in a future PR?\n. ABANDON THIS PR!!!\n. will send another PR w/ updated code\n. yeah, knew it would cause conflicts, one sec\n. This was due to 2 concurrent patches being merged without knowledge of each other, so the build got broken. I have a PR which fixes this bug my patch \"introduced\" - we should put the Travis button on the readme or something\n. presumably it would have to be all of them\n\nOn Mon, Dec 15, 2014 at 6:44 AM, William Povell notifications@github.com\nwrote:\n\n> If there are multiple keys, which should be used?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/shazow/ssh-chat/issues/46#issuecomment-67003400.\n. my gut says flat-file is gonna be the preferred way to start - we already have configs/keys loading from files using commandline flags. plus this doesn't add any more dependencies for ppl to install their own ssh-chat on a server somewhere. simple and effective. but, after things settle down and are more stable, then creating an adapter layer would be the way to go, methinks.. then we can build adapters for other storage drivers\n. neat!!\n. ",
    "Fastidious": "So, what is the format of the admin file again? Right now, a public key starts:\n\n`ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDpckxI...`\n\nHow to make that public key an admin on a file I will pass to ssh-chat using the `--admin` parameter?\n. How do you define escape codes on the motd file?\n. @shazow I am not a programmer, but will gladly do this, if I knew where the file containing the help list is. Point me, please? :-)\n. On second though, I think it is fine as it is, as long as hidden commands are documented somewhere. Closing this. Thanks @shazow!\n. I guess this is still valid. Reopening for the time being.\n. So, what is the format of the admin file again? Right now, a public key starts:\n\n`ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDpckxI...`\n\nHow to make that public key an admin on a file I will pass to ssh-chat using the `--admin` parameter?\n. How do you define escape codes on the motd file?\n. @shazow I am not a programmer, but will gladly do this, if I knew where the file containing the help list is. Point me, please? :-)\n. On second though, I think it is fine as it is, as long as hidden commands are documented somewhere. Closing this. Thanks @shazow!\n. I guess this is still valid. Reopening for the time being.\n. ",
    "peterhellberg": "Fixed in #54\n. Sure thing :+1: \n. The build is now green, had to fix some lint issues that arrived in upstream/master\n. Sure thing, I do that for client projects.\n. Just noticed the overlap with #42\n. Maybe only highlight if the message start with 'username:'?\n. Ok, I tend to want my commit history pretty :)\n. We\u2019ll probably want to revisit how commands work later on, but this change is just meant to simplify `handleShell` and reduce the churn\n. Thank you for the tips.\n. Ok, I\u2019ll close this for now then.\n\nIt might be a good idea to have a `commands` package and then register each command using `init`\n. No problem, the PRs just keep on arriving in this project :)\n. Yes, I\u2019ve been running that server all day today :)\n. Sorry, I meant that I was running old code since the server had been online for more than a day.\n. :+1: \n. The line based format is ok when building simple bots (like my [ssh-chat-bot](https://github.com/peterhellberg/ssh-chat-bot))\n\nBut it would be nice to be able to identify as a bot so that human users could opt to filter out potential noise.\n. I was thinking that well behaved bots should have an option to identify themselves as bots, since we don\u2019t have control over the clients.\n\nI\u2019ll experiment some more with my little bot.\n. Ah, that might be a good way to do it. (Unless there are security implications in doing so)\n. I would like to suggest that you use the 64-bit version of Go in order to not have any 32-bit issues.\n\nhttps://storage.googleapis.com/golang/go1.4.darwin-amd64-osx10.6.pkg\n. Fixed in #54\n. Sure thing :+1: \n. The build is now green, had to fix some lint issues that arrived in upstream/master\n. Sure thing, I do that for client projects.\n. Just noticed the overlap with #42\n. Maybe only highlight if the message start with 'username:'?\n. Ok, I tend to want my commit history pretty :)\n. We\u2019ll probably want to revisit how commands work later on, but this change is just meant to simplify `handleShell` and reduce the churn\n. Thank you for the tips.\n. Ok, I\u2019ll close this for now then.\n\nIt might be a good idea to have a `commands` package and then register each command using `init`\n. No problem, the PRs just keep on arriving in this project :)\n. Yes, I\u2019ve been running that server all day today :)\n. Sorry, I meant that I was running old code since the server had been online for more than a day.\n. :+1: \n. The line based format is ok when building simple bots (like my [ssh-chat-bot](https://github.com/peterhellberg/ssh-chat-bot))\n\nBut it would be nice to be able to identify as a bot so that human users could opt to filter out potential noise.\n. I was thinking that well behaved bots should have an option to identify themselves as bots, since we don\u2019t have control over the clients.\n\nI\u2019ll experiment some more with my little bot.\n. Ah, that might be a good way to do it. (Unless there are security implications in doing so)\n. I would like to suggest that you use the 64-bit version of Go in order to not have any 32-bit issues.\n\nhttps://storage.googleapis.com/golang/go1.4.darwin-amd64-osx10.6.pkg\n. ",
    "mcroydon": "This was fixed in #54 and merged, this issue can probably be closed out.\n. This was fixed in #54 and merged, this issue can probably be closed out.\n. ",
    "aquilax": "Sure, it was just proof of concept. Thanks.\n. :+1: \n. When creating connection make sure you click [Identity] Import... , and pick your private key.\n. Sure, it was just proof of concept. Thanks.\n. :+1: \n. When creating connection make sure you click [Identity] Import... , and pick your private key.\n. ",
    "scrothers": "I personally like the idea of sqlite, but, I could be bias. I've wanted to find a project to learn GoLang with, and this one seems like a no brainer, small but complex and such. I have experience from other SQL providers, so obviously I'm quick to choose sqlite.\n\nHowever my inner developer says we need to create interfaces and adapters for pluggable storage systems.\n\nSo how about an interface \"storage\" which relies on an adapters directory for storage systems that can be picked from?\n\nThis also naturally leads to a configuration file, which I believe should be simple and uncomplex. Maybe XML (though that seems overly complex for the job, but simple enough so that it can be read/understood by anybody) or standard ini style parsing.\n\nThe config file \"system\" should have some type of RFS, for example, if we choose XML, we need to discuss how the sections will lay out in the file. If we choose an INI based mechanism, we need to understand how the ini file sections will lay out.\n\nSo, I would say a pre-req to this ticket, is the creation of some type of configuration file and parser before this can be implemented.\n. What is your opinion on interfacing the data storage layer then? I would love to attempt to tackle this :)\n. http://en.wikipedia.org/wiki/Adapter_pattern\n\nIn this case, I believe it would look something like this (excuse my Go noobishness):\n\nClass \"storage\" has several functions, which would be: whitelistadd, whitelistdel, opadd, opdel, etc.\n\nThis storage class is the \"interface\", but each function simply calls into the adapters, for example, one such adapter might be \"storage_flatfile\", which appends and reorders text files and exposes common functions to the interface, like \"put, get, delete\" or similar.\n\nThat way you can create more adapters later, say a \"storage_dynamodb\" and a \"storage_sqlite\" which expose the same \"put, get, delete\" functions that the interface can consume as a unified API for the rest of the application. \n\nBut that's it essentially, again, not a Go expert, so how it may be written or used in Go is a mystery to me.\n. That's the idea :) but with less rigid structure and with less inter-dependancy on a specific adapter.\nThe hip word I believe is \"de-coupling\".\n. I personally like the idea of sqlite, but, I could be bias. I've wanted to find a project to learn GoLang with, and this one seems like a no brainer, small but complex and such. I have experience from other SQL providers, so obviously I'm quick to choose sqlite.\n\nHowever my inner developer says we need to create interfaces and adapters for pluggable storage systems.\n\nSo how about an interface \"storage\" which relies on an adapters directory for storage systems that can be picked from?\n\nThis also naturally leads to a configuration file, which I believe should be simple and uncomplex. Maybe XML (though that seems overly complex for the job, but simple enough so that it can be read/understood by anybody) or standard ini style parsing.\n\nThe config file \"system\" should have some type of RFS, for example, if we choose XML, we need to discuss how the sections will lay out in the file. If we choose an INI based mechanism, we need to understand how the ini file sections will lay out.\n\nSo, I would say a pre-req to this ticket, is the creation of some type of configuration file and parser before this can be implemented.\n. What is your opinion on interfacing the data storage layer then? I would love to attempt to tackle this :)\n. http://en.wikipedia.org/wiki/Adapter_pattern\n\nIn this case, I believe it would look something like this (excuse my Go noobishness):\n\nClass \"storage\" has several functions, which would be: whitelistadd, whitelistdel, opadd, opdel, etc.\n\nThis storage class is the \"interface\", but each function simply calls into the adapters, for example, one such adapter might be \"storage_flatfile\", which appends and reorders text files and exposes common functions to the interface, like \"put, get, delete\" or similar.\n\nThat way you can create more adapters later, say a \"storage_dynamodb\" and a \"storage_sqlite\" which expose the same \"put, get, delete\" functions that the interface can consume as a unified API for the rest of the application. \n\nBut that's it essentially, again, not a Go expert, so how it may be written or used in Go is a mystery to me.\n. That's the idea :) but with less rigid structure and with less inter-dependancy on a specific adapter.\nThe hip word I believe is \"de-coupling\".\n. ",
    "kevinvangelder": ":+1: for flat file, not that I know anything Go related.\n. Yeah, I realized this after the fact. :) Stupid user. :P\n. @shazow Yesterday, someone jumped on the server along with 20-some bots. He had his bots type random gibberish but never hit enter. As such, their buffers (presumably) grew to fit everything they type. Over time, the server got really laggy. As soon as he disconnected all his bots everything returned to normal.\n\nThe idea is that, theoretically, we could discard anything over a certain number of characters (for example, not sure exactly how everything works myself) to prevent this type of attack.\n. @mkaminsky11 Unfortunately there isn't currently a way to limit his number of connected clients because he wasn't using an SSH key. If @shazow at some point put in IP tools then he could limit the number of connections per IP.\n. :+1: for flat file, not that I know anything Go related.\n. Yeah, I realized this after the fact. :) Stupid user. :P\n. @shazow Yesterday, someone jumped on the server along with 20-some bots. He had his bots type random gibberish but never hit enter. As such, their buffers (presumably) grew to fit everything they type. Over time, the server got really laggy. As soon as he disconnected all his bots everything returned to normal.\n\nThe idea is that, theoretically, we could discard anything over a certain number of characters (for example, not sure exactly how everything works myself) to prevent this type of attack.\n. @mkaminsky11 Unfortunately there isn't currently a way to limit his number of connected clients because he wasn't using an SSH key. If @shazow at some point put in IP tools then he could limit the number of connections per IP.\n. ",
    "chadtummy": "Of the suggested options, I'm inclined to think either flatfile or leveldb would be the best options.\r\n\r\nMy understanding is that BoltDB is based on LMDB, which is rather slow at nonsequential writes.  If this is the case, it does not strike me as the best option for a data storage format that will eventually be used for things like username registrations (because returning to the username to add more SSH keys to access ssh-chat from multiple computers might be important), for instance.\r\n\r\nSQLite is great and has its uses, but it seems a bit hefty for this, and there are some legal issues in places that do not recognize a right to reliquish copyright.. Of the suggested options, I'm inclined to think either flatfile or leveldb would be the best options.\r\n\r\nMy understanding is that BoltDB is based on LMDB, which is rather slow at nonsequential writes.  If this is the case, it does not strike me as the best option for a data storage format that will eventually be used for things like username registrations (because returning to the username to add more SSH keys to access ssh-chat from multiple computers might be important), for instance.\r\n\r\nSQLite is great and has its uses, but it seems a bit hefty for this, and there are some legal issues in places that do not recognize a right to reliquish copyright.. ",
    "mrfabbri": "DISCLAIMER: very very beginner Go level here, so I may have totally misinterpreted/mystified things, still the project is neat and the problem (graceful restart with persistent connections) is interesting.\n\nBasically, both rcrwoley/goagain and facebookgo/grace provide same way to recover Listener connections from the restarted process (via a clever use of environment variables for passing the number/file descriptors of active listener connections, and then getting back the net connection from the file descriptor).\n\nI guess a similar approach can be replicated on the file descriptors of the active connections but will prove slightly more complicated than with just Listener connection(s) (Accept() makes a very natural point where to break/restart the service and almost no state is carried across restart):\n- some state to rebuild clients (from connection file descriptors) should be saved/serialised somewhere;\n- client.handleChannels() should be \"restart-wise\" and handle the restart gracefully (stopping at the \"right\" point / saving info for restart).\n\nWell, maybe this would just turn out an \"ad-hoc, informally specified, implementation of half of a failover proxy frontend\".\n. DISCLAIMER: very very beginner Go level here, so I may have totally misinterpreted/mystified things, still the project is neat and the problem (graceful restart with persistent connections) is interesting.\n\nBasically, both rcrwoley/goagain and facebookgo/grace provide same way to recover Listener connections from the restarted process (via a clever use of environment variables for passing the number/file descriptors of active listener connections, and then getting back the net connection from the file descriptor).\n\nI guess a similar approach can be replicated on the file descriptors of the active connections but will prove slightly more complicated than with just Listener connection(s) (Accept() makes a very natural point where to break/restart the service and almost no state is carried across restart):\n- some state to rebuild clients (from connection file descriptors) should be saved/serialised somewhere;\n- client.handleChannels() should be \"restart-wise\" and handle the restart gracefully (stopping at the \"right\" point / saving info for restart).\n\nWell, maybe this would just turn out an \"ad-hoc, informally specified, implementation of half of a failover proxy frontend\".\n. ",
    "persontwo": "Maybe a small proxy could be written in Erlang? I dunno, I've just heard people talk about hot code reloading in Erlang.\n. There's a thread on HN today about graceful server restart with Go: https://news.ycombinator.com/item?id=8772636. Might be of interest to you.\n. Has the server been restarted since PR#62 was merged? I attempted auth w/o pubkey but it won't work.\n\nEdit: Sam told me to `/uptime` and it seems that it was indeed restarted since.\n\nFurther information: I'm using _VX ConnectBot_ on Android.\n. Maybe a small proxy could be written in Erlang? I dunno, I've just heard people talk about hot code reloading in Erlang.\n. There's a thread on HN today about graceful server restart with Go: https://news.ycombinator.com/item?id=8772636. Might be of interest to you.\n. Has the server been restarted since PR#62 was merged? I attempted auth w/o pubkey but it won't work.\n\nEdit: Sam told me to `/uptime` and it seems that it was indeed restarted since.\n\nFurther information: I'm using _VX ConnectBot_ on Android.\n. ",
    "el3ctro-": "nice find...\n. nice find...\n. ",
    "paked": "Do we already have a defined structure for Message? Or would that need to be created?\n. Do we already have a defined structure for Message? Or would that need to be created?\n. ",
    "songgao": "Whoa I was gonna comment here only to find it's closed. Yes it seems to be due to PublicKey authentication. When no key is imported, Chrome Secure Shell plugins doesn't initiate PublicKey authentication, while `ssh-chat` expects only PublicKey authentication (https://github.com/shazow/ssh-chat/blob/master/server.go#L66). The `PublicKeyCallback` wouldn't be called if no PublicKey is available in Chrome Secure Shell.\n\nIssue #30 , when fixed, should address this issue as well.\n. Thanks!\n. (amended the commit to remove an unnecessary whitespace change)\n. Thanks for merging! Yeah you are right about the Whitelist'ing.\n. Sounds good! Will do that.\n. Ah, that's fine. I didn't realize you already did this.\n\nAs for \"\", since a blank line is too easy to be added to a configuration file, people might accidently disable the whitelisting when they don't mean to. What do you think something more explicit like `<all>` as a special \"fingerprints\" for quickly disable whitelisting?\n. Thanks!\n. Cool\n. Whoa I was gonna comment here only to find it's closed. Yes it seems to be due to PublicKey authentication. When no key is imported, Chrome Secure Shell plugins doesn't initiate PublicKey authentication, while `ssh-chat` expects only PublicKey authentication (https://github.com/shazow/ssh-chat/blob/master/server.go#L66). The `PublicKeyCallback` wouldn't be called if no PublicKey is available in Chrome Secure Shell.\n\nIssue #30 , when fixed, should address this issue as well.\n. Thanks!\n. (amended the commit to remove an unnecessary whitespace change)\n. Thanks for merging! Yeah you are right about the Whitelist'ing.\n. Sounds good! Will do that.\n. Ah, that's fine. I didn't realize you already did this.\n\nAs for \"\", since a blank line is too easy to be added to a configuration file, people might accidently disable the whitelisting when they don't mean to. What do you think something more explicit like `<all>` as a special \"fingerprints\" for quickly disable whitelisting?\n. Thanks!\n. Cool\n. ",
    "tfmm": "Just popped this into the code for consistency, all it adds is a display of the number of connected users when someone disconnects. \n. Just popped this into the code for consistency, all it adds is a display of the number of connected users when someone disconnects. \n. ",
    "mvrilo": "Right, that makes sense. Sure we can.\n. @shazow can you check my last commit? I believe it's ok now.\n. Done!\n. Right, that makes sense. Sure we can.\n. @shazow can you check my last commit? I believe it's ok now.\n. Done!\n. ",
    "naggie": "Can a user still authenticate but impersonate another user by simply changing name, or is the key bound to the username from the github URL?\n. Excellent! :)\n. go1.0.2 is too old. Try 1.2 from source.\n. For example, no ANSI colours and a machine parseable interface -- eg, JSON\n. Can a user still authenticate but impersonate another user by simply changing name, or is the key bound to the username from the github URL?\n. Excellent! :)\n. go1.0.2 is too old. Try 1.2 from source.\n. For example, no ANSI colours and a machine parseable interface -- eg, JSON\n. ",
    "vectorijk": "Server didn't hang. When I `make run` whole project with another key. It happened same information you mentioned above.\n\n```\nmake run\ngo build ./...\ngo build -ldflags \"-X main.buildCommit 'git describe --long --tags --dirty --always'\" .\n./ssh-chat -i host_key --bind \":2022\" -vv\n2015-01-06 23:39:13.673 INFO Listening on :2022\n2015-01-06 23:39:16.671 ERROR Failed to handshake: read tcp 127.0.0.1:35211: connection reset by peer\n2015-01-06 23:39:19.755 ERROR Failed to handshake: read tcp 127.0.0.1:35212: connection reset by peer\n2015-01-06 23:39:20.853 ERROR Failed to handshake: read tcp 127.0.0.1:35213: connection reset by peer\n^C2015-01-06 23:39:23.185 WARNING Interrupt signal detected, shutting down.\nMakefile:25: recipe for target 'run' failed\nmake: *** [run] Interrupt\n```\n. Server didn't hang. When I `make run` whole project with another key. It happened same information you mentioned above.\n\n```\nmake run\ngo build ./...\ngo build -ldflags \"-X main.buildCommit 'git describe --long --tags --dirty --always'\" .\n./ssh-chat -i host_key --bind \":2022\" -vv\n2015-01-06 23:39:13.673 INFO Listening on :2022\n2015-01-06 23:39:16.671 ERROR Failed to handshake: read tcp 127.0.0.1:35211: connection reset by peer\n2015-01-06 23:39:19.755 ERROR Failed to handshake: read tcp 127.0.0.1:35212: connection reset by peer\n2015-01-06 23:39:20.853 ERROR Failed to handshake: read tcp 127.0.0.1:35213: connection reset by peer\n^C2015-01-06 23:39:23.185 WARNING Interrupt signal detected, shutting down.\nMakefile:25: recipe for target 'run' failed\nmake: *** [run] Interrupt\n```\n. ",
    "grawity": "It might be not the clients but the NAT gateways doing so (some have unfortunately short timeouts for TCP connections)... <del>[TCP-level keepalives](http://felixge.de/2014/08/26/tcp-keepalive-with-golang.html) may also help if that's the case.</del> edit: damn it, first comment on that page says no :(\n. It might be not the clients but the NAT gateways doing so (some have unfortunately short timeouts for TCP connections)... <del>[TCP-level keepalives](http://felixge.de/2014/08/26/tcp-keepalive-with-golang.html) may also help if that's the case.</del> edit: damn it, first comment on that page says no :(\n. ",
    "fortytw2": "Would love for there to also be an option to ignore nick changes entirely \n. Would love for there to also be an option to ignore nick changes entirely \n. ",
    "nickpresta": "<3\n\nThanks!\n. Done. Thanks for getting this in!\n. Good point (about the process list). I've swapped it for an env var (with fallback to STDIN).\n. <3\n\nThanks!\n. Done. Thanks for getting this in!\n. Good point (about the process list). I've swapped it for an env var (with fallback to STDIN).\n. ",
    "shezi": "Oh, absolutely, and I believe that a proper channel implementation would make the server a few times more complicated. This was just so I don't forget my ideas. =)\n. Probably better, but also less funny. I mean, we're already in an ssh shell...\n. Oh, absolutely, and I believe that a proper channel implementation would make the server a few times more complicated. This was just so I don't forget my ideas. =)\n. Probably better, but also less funny. I mean, we're already in an ssh shell...\n. ",
    "deavmi": "This would be cool.\n. I think that there should be an actual plugin system that works like so.\n\nThe server runs a basic TCP server that habdles requests from these plugins to do things in the chat room and such.\n\nThat is how I see plugins in this system. It could possibly work\n\nIdk tho.\n\nIf there is a better way to do plugins rather than re-compiling then yeah, do that.\n\nI am saying this as these services like HTTP could be implemented as plugins.\n. Awesome.\n. #Mention all the commands in the /help menu.\n. > Btw I appreciate your efforts. A lot of random people open issues all the time and it's easier for me to keep track on what's actually being worked on when only open issues are ones that are actively pursued. :)\n\nFair enough. I'd feel the same way.\n. Nevermind. I see this is already implemented.\n\nKeep up the great work on this project. I love it.\n. Just saying for when rooms are implemented. But okay :)\n. I mean sending three characters that are space character should not be sent. I guess.\n. Because why send them.\n. I guess why not.\n. K. :smile: \n. This would be cool.\n. I think that there should be an actual plugin system that works like so.\n\nThe server runs a basic TCP server that habdles requests from these plugins to do things in the chat room and such.\n\nThat is how I see plugins in this system. It could possibly work\n\nIdk tho.\n\nIf there is a better way to do plugins rather than re-compiling then yeah, do that.\n\nI am saying this as these services like HTTP could be implemented as plugins.\n. Awesome.\n. #Mention all the commands in the /help menu.\n. > Btw I appreciate your efforts. A lot of random people open issues all the time and it's easier for me to keep track on what's actually being worked on when only open issues are ones that are actively pursued. :)\n\nFair enough. I'd feel the same way.\n. Nevermind. I see this is already implemented.\n\nKeep up the great work on this project. I love it.\n. Just saying for when rooms are implemented. But okay :)\n. I mean sending three characters that are space character should not be sent. I guess.\n. Because why send them.\n. I guess why not.\n. K. :smile: \n. ",
    "ruggi": "This can be closed as of https://github.com/shazow/ssh-chat/pull/154\n. @shazow yeah, I agree on using the `Set` (it would be also nice to ignore users based on fingerprint rather than name, tying IDs with fingerprints also on room scope probably). About having the set as a public field now makes sense, before it was wrapped in a function in order to avoid concurrency issues ;)\n. Here you go @shazow \ud83d\ude09\n- `chat/set.go` is now `common/set.go`\n- use `*IdSet` as type for ignored list for users\n- remove `IsIgnoring` and `IgnoredNames` user functions, so to use directly `IdSet` methods\n- refactor code accordingly\n. This can be closed as of https://github.com/shazow/ssh-chat/pull/154\n. @shazow yeah, I agree on using the `Set` (it would be also nice to ignore users based on fingerprint rather than name, tying IDs with fingerprints also on room scope probably). About having the set as a public field now makes sense, before it was wrapped in a function in order to avoid concurrency issues ;)\n. Here you go @shazow \ud83d\ude09\n- `chat/set.go` is now `common/set.go`\n- use `*IdSet` as type for ignored list for users\n- remove `IsIgnoring` and `IgnoredNames` user functions, so to use directly `IdSet` methods\n- refactor code accordingly\n. ",
    "chexo3": "I think that is fine. It's your fault if you use an insecure version of bash anyways.\n. I am using 1.4 I believe. _Checks Desktop installer .pkg_ yep. To be specific I used a version of go installed with this installer filename 'go1.4.darwin-386-osx10.6.pkg' I believe that was the correct version for my system. I am on an old 2006~ MacBook, which is an intel mac.\n. Also, thanks for the quick reply, I literally just cleaned my inbox after posting this and found this inside.\n. Ok\n. Here is the complete output:\n\n``` bash\nLast login: Fri Jan  9 16:28:07 on ttys000\nIsaac-Becketts-MacBook:~ isaacbeckett$ go version\ngo version go1.4 darwin/386\nIsaac-Becketts-MacBook:~ isaacbeckett$ \n```\n. oh yeah, I've been on chat.shazow.net as isaacbeckett, but I usually nick myself as chexo3 after login\n. I just created that go environment, but I will give it a try.\n![Screenshot](http://i.imgur.com/j3XL6Cy.png?1)\n. still gives me that illegal instruction error.\n\n```\ngo get github.com/shazow/ssh-chat\n# cd .; git clone https://github.com/shazow/ssh-chat Go2/src/github.com/shazow/ssh-chat\npackage github.com/shazow/ssh-chat: signal: illegal instruction\n\n```\n. maybe I could uninstall go? And then reinstall go 1.3\nWhere is the unistaller?\n. unistalled go 1.4\ninstalling go 1.3.3\n. Ok so downgrading didn't work.\n\n``` bash\nLast login: Fri Jan  9 16:58:50 on ttys000\nIsaac-Becketts-MacBook:~ isaacbeckett$ mkdir Go\nIsaac-Becketts-MacBook:~ isaacbeckett$ export GOPATH=Go\nIsaac-Becketts-MacBook:~ isaacbeckett$ go get github.com/shazow/ssh-chat\n# cd .; git clone https://github.com/shazow/ssh-chat Go/src/github.com/shazow/ssh-chat\npackage github.com/shazow/ssh-chat: signal: illegal instruction\nIsaac-Becketts-MacBook:~ isaacbeckett$\n```\n. ok\n. I'm trying to build ssh-chat from source now but need to know how, it did not work with go install on the ssh-chat master file I extracted from the downloaded zip\n. ```\nisaacbeckett@MacIron:[~]-06:36 PM > go install /Users/isaacbeckett/Desktop/ssh-chat-master\\  \ncan't load package: package /Users/isaacbeckett/Desktop/ssh-chat-master : import \"/Users/isaacbeckett/Desktop/ssh-chat-master \": cannot import absolute path\nisaacbeckett@MacIron:[~]-06:36 PM > export GOPATH = Go\n-bash: export: `=': not a valid identifier\nisaacbeckett@MacIron:[~]-06:37 PM > export GOPATH=Go\nisaacbeckett@MacIron:[~]-06:37 PM > go install /Users/isaacbeckett/Desktop/ssh-chat-master\\  \ncan't load package: package /Users/isaacbeckett/Desktop/ssh-chat-master : import \"/Users/isaacbeckett/Desktop/ssh-chat-master \": cannot import absolute path\nisaacbeckett@MacIron:[~]-06:37 PM > go install /Users/isaacbeckett/Desktop/ssh-chat-master\ncan't load package: package /Users/isaacbeckett/Desktop/ssh-chat-master: import \"/Users/isaacbeckett/Desktop/ssh-chat-master\": cannot import absolute path\nisaacbeckett@MacIron:[~]-06:37 PM > go install /Users/isaacbeckett/Desktop/ssh-chat-master/\ncan't load package: package /Users/isaacbeckett/Desktop/ssh-chat-master: import \"/Users/isaacbeckett/Desktop/ssh-chat-master\": cannot import absolute path\nisaacbeckett@MacIron:[~]-06:37 PM > \n```\n. So, I would do this inside the master folder?\n. ok thanks\n. ```\nLast login: Tue Jan 13 16:48:36 on ttys000\nisaacbeckett@MacIron:[~]-04:50 PM > export GOPATH=/Users/isaacbeckett/Desktop/ssh-chat-master \nisaacbeckett@MacIron:[~]-04:50 PM > go build ./...\nDesktop/ssh-chat/go/src/ssh-chat/cmd.go:13:2: cannot find package \"github.com/alexcesaro/log\" in any of:\n    /usr/local/go/src/github.com/alexcesaro/log (from $GOROOT)\n    /Users/isaacbeckett/Desktop/ssh-chat-master/src/github.com/alexcesaro/log (from $GOPATH)\nDesktop/ssh-chat/go/src/ssh-chat/cmd.go:14:2: cannot find package \"github.com/alexcesaro/log/golog\" in any of:\n    /usr/local/go/src/github.com/alexcesaro/log/golog (from $GOROOT)\n    /Users/isaacbeckett/Desktop/ssh-chat-master/src/github.com/alexcesaro/log/golog (from $GOPATH)\nDesktop/ssh-chat/go/src/ssh-chat/cmd.go:15:2: cannot find package \"github.com/jessevdk/go-flags\" in any of:\n    /usr/local/go/src/github.com/jessevdk/go-flags (from $GOROOT)\n    /Users/isaacbeckett/Desktop/ssh-chat-master/src/github.com/jessevdk/go-flags (from $GOPATH)\nDesktop/ssh-chat/go/src/ssh-chat/client.go:9:2: cannot find package \"golang.org/x/crypto/ssh\" in any of:\n    /usr/local/go/src/golang.org/x/crypto/ssh (from $GOROOT)\n    /Users/isaacbeckett/Desktop/ssh-chat-master/src/golang.org/x/crypto/ssh (from $GOPATH)\nDesktop/ssh-chat/go/src/ssh-chat/client.go:10:2: cannot find package \"golang.org/x/crypto/ssh/terminal\" in any of:\n    /usr/local/go/src/golang.org/x/crypto/ssh/terminal (from $GOROOT)\n    /Users/isaacbeckett/Desktop/ssh-chat-master/src/golang.org/x/crypto/ssh/terminal (from $GOPATH)\nisaacbeckett@MacIron:[~]-04:51 PM > cd /Users/isaacbeckett/ssh-chat/go/src \nisaacbeckett@MacIron:[~/ssh-chat/go/src]-04:51 PM > go build ./...\nssh-chat/cmd.go:13:2: cannot find package \"github.com/alexcesaro/log\" in any of:\n    /usr/local/go/src/github.com/alexcesaro/log (from $GOROOT)\n    /Users/isaacbeckett/Desktop/ssh-chat-master/src/github.com/alexcesaro/log (from $GOPATH)\nssh-chat/cmd.go:14:2: cannot find package \"github.com/alexcesaro/log/golog\" in any of:\n    /usr/local/go/src/github.com/alexcesaro/log/golog (from $GOROOT)\n    /Users/isaacbeckett/Desktop/ssh-chat-master/src/github.com/alexcesaro/log/golog (from $GOPATH)\nssh-chat/cmd.go:15:2: cannot find package \"github.com/jessevdk/go-flags\" in any of:\n    /usr/local/go/src/github.com/jessevdk/go-flags (from $GOROOT)\n    /Users/isaacbeckett/Desktop/ssh-chat-master/src/github.com/jessevdk/go-flags (from $GOPATH)\nssh-chat/client.go:9:2: cannot find package \"golang.org/x/crypto/ssh\" in any of:\n    /usr/local/go/src/golang.org/x/crypto/ssh (from $GOROOT)\n    /Users/isaacbeckett/Desktop/ssh-chat-master/src/golang.org/x/crypto/ssh (from $GOPATH)\nssh-chat/client.go:10:2: cannot find package \"golang.org/x/crypto/ssh/terminal\" in any of:\n    /usr/local/go/src/golang.org/x/crypto/ssh/terminal (from $GOROOT)\n    /Users/isaacbeckett/Desktop/ssh-chat-master/src/golang.org/x/crypto/ssh/terminal (from $GOPATH)\nisaacbeckett@MacIron:[~/ssh-chat/go/src]-04:51 PM > \n```\n. ```\nisaacbeckett@MacIron:[~/Desktop/ssh-chat-master]-04:59 PM > export GOPATH=/Users/isaacbeckett/Desktop/ssh-chat-master\nisaacbeckett@MacIron:[~/Desktop/ssh-chat-master]-05:00 PM > go get .\n# cd .; git clone https://github.com/alexcesaro/log /Users/isaacbeckett/Desktop/ssh-chat-master/src/github.com/alexcesaro/log\npackage github.com/alexcesaro/log: signal: illegal instruction\npackage github.com/alexcesaro/log/golog\n    imports github.com/alexcesaro/log/golog\n    imports github.com/alexcesaro/log/golog: cannot find package \"github.com/alexcesaro/log/golog\" in any of:\n    /usr/local/go/src/github.com/alexcesaro/log/golog (from $GOROOT)\n    /Users/isaacbeckett/Desktop/ssh-chat-master/src/github.com/alexcesaro/log/golog (from $GOPATH)\n# cd .; git clone https://github.com/jessevdk/go-flags /Users/isaacbeckett/Desktop/ssh-chat-master/src/github.com/jessevdk/go-flags\npackage github.com/alexcesaro/log/golog\n    imports github.com/jessevdk/go-flags: signal: illegal instruction\n# cd .; git clone https://go.googlesource.com/crypto /Users/isaacbeckett/Desktop/ssh-chat-master/src/golang.org/x/crypto\npackage github.com/alexcesaro/log/golog\n    imports golang.org/x/crypto/ssh: signal: illegal instruction\npackage github.com/alexcesaro/log/golog\n    imports golang.org/x/crypto/ssh/terminal\n    imports golang.org/x/crypto/ssh/terminal\n    imports golang.org/x/crypto/ssh/terminal: cannot find package \"golang.org/x/crypto/ssh/terminal\" in any of:\n    /usr/local/go/src/golang.org/x/crypto/ssh/terminal (from $GOROOT)\n    /Users/isaacbeckett/Desktop/ssh-chat-master/src/golang.org/x/crypto/ssh/terminal (from $GOPATH)\nisaacbeckett@MacIron:[~/Desktop/ssh-chat-master]-05:01 PM > go build ./...cmd.go:13:2: cannot find package \"github.com/alexcesaro/log\" in any of:\n    /usr/local/go/src/github.com/alexcesaro/log (from $GOROOT)\n    /Users/isaacbeckett/Desktop/ssh-chat-master/src/github.com/alexcesaro/log (from $GOPATH)\ncmd.go:14:2: cannot find package \"github.com/alexcesaro/log/golog\" in any of:\n    /usr/local/go/src/github.com/alexcesaro/log/golog (from $GOROOT)\n    /Users/isaacbeckett/Desktop/ssh-chat-master/src/github.com/alexcesaro/log/golog (from $GOPATH)\ncmd.go:15:2: cannot find package \"github.com/jessevdk/go-flags\" in any of:\n    /usr/local/go/src/github.com/jessevdk/go-flags (from $GOROOT)\n    /Users/isaacbeckett/Desktop/ssh-chat-master/src/github.com/jessevdk/go-flags (from $GOPATH)\nclient.go:9:2: cannot find package \"golang.org/x/crypto/ssh\" in any of:\n    /usr/local/go/src/golang.org/x/crypto/ssh (from $GOROOT)\n    /Users/isaacbeckett/Desktop/ssh-chat-master/src/golang.org/x/crypto/ssh (from $GOPATH)\nclient.go:10:2: cannot find package \"golang.org/x/crypto/ssh/terminal\" in any of:\n    /usr/local/go/src/golang.org/x/crypto/ssh/terminal (from $GOROOT)\n    /Users/isaacbeckett/Desktop/ssh-chat-master/src/golang.org/x/crypto/ssh/terminal (from $GOPATH)\nisaacbeckett@MacIron:[~/Desktop/ssh-chat-master]-05:01 PM > ssh-chat\n-bash: ssh-chat: command not found\nisaacbeckett@MacIron:[~/Desktop/ssh-chat-master]-05:01 PM > \n```\n. still didn't work\nit just won't build cleanly. I even installed go 1.4 again, and this time using the\ngo1.4.darwin-amd64-osx10.6.pkg file\n. ![Seriously?](https://cloud.githubusercontent.com/assets/10382225/5730285/cb61a51a-9b46-11e4-8640-ec98bd37f024.gif)\n**Come on, work!**\n. I have gotten it to use git properly after installing brew and git for unrelated reasons...\n\n```\nLast login: Sat Feb  7 19:44:09 on ttys000\nisaacbeckett@MacIron.local:[~]-08:59 PM > rmdir go\nrmdir: go: Directory not empty\nisaacbeckett@MacIron.local:[~]-08:59 PM > rm -rf go\nisaacbeckett@MacIron.local:[~]-08:59 PM > mkdir go\nisaacbeckett@MacIron.local:[~]-08:59 PM > export GOPATH=/Users/isaacbeckett/go\nisaacbeckett@MacIron.local:[~]-09:00 PM > echo $GOPATH\n/Users/isaacbeckett/go\nisaacbeckett@MacIron.local:[~]-09:00 PM > go get github.com/shazow/ssh-chat\nisaacbeckett@MacIron.local:[~]-09:02 PM > ls go\npkg src\nisaacbeckett@MacIron.local:[~]-09:02 PM > ssh-chat\n-bash: ssh-chat: command not found\nisaacbeckett@MacIron.local:[~]-09:02 PM > echo ...but it\\'s still not working\n...but it's still not working\nisaacbeckett@MacIron.local:[~]-09:02 PM > \n```\n. ok is it possible I could drop it into the bash commands folder?\n. ![Yes, hidden files ARE being shown in Finder.](http://i.imgur.com/Zp88ZKX.png?1)\n. Well, those I have seen are *nix binaries, a .pkg or .mpkg would work better. Plus brew makes it easy to manage the versions of ssh-chat you have installed. No more complicated removal processes before using your new .pkg. That also makes it easier to integrate as a dependency for other brews, and to make add-ons that can be installed with brew. It is sometimes easier to do things the old fashioned way as well.\n. Ok, well a .pkg is better because it does not require xcode. I needed git to go get ssh chat, and that required xcode one way or another, although `brew install git` made it easy. a .pkg would not require xcode because it is already built. then rookie users like me (especially those with old macs and that have to sign up for a developer id to get access to old xocde versions, also me) can install with ease. And homebrew makes this easy. Now, if I didn't have go installed, `brew install ssh-chat` would have installed go as a dependency. This streamlines everything, and if I make an addon for ssh-chat, I can manage that easily.\n. I'd make a brew formula, but first I need a tarball download.\nOr a zip.\n. Oh, and with .pkg you are using a native file format, no unzipping and decompiling and other porting shenanigans. But at that point using a *nix binary defeats the purpose of a prebuilt binary.\n. I mean a *nix binary is for *nix systems, it is prebuilt as well, but you would need to decompile it and recompile on a mac to use it on a mac\n. I basically need a .tgz source.\nYou know what. I know almost nothing about brewing formulae. I'm gonna experiment now and come back to you later.\n. What version is ssh-chat at?\n. Well, then can you re-enable it? At least, with some sort if anti-spam, like a maximum amount of memory per time period.\n. I think that is fine. It's your fault if you use an insecure version of bash anyways.\n. I am using 1.4 I believe. _Checks Desktop installer .pkg_ yep. To be specific I used a version of go installed with this installer filename 'go1.4.darwin-386-osx10.6.pkg' I believe that was the correct version for my system. I am on an old 2006~ MacBook, which is an intel mac.\n. Also, thanks for the quick reply, I literally just cleaned my inbox after posting this and found this inside.\n. Ok\n. Here is the complete output:\n\n``` bash\nLast login: Fri Jan  9 16:28:07 on ttys000\nIsaac-Becketts-MacBook:~ isaacbeckett$ go version\ngo version go1.4 darwin/386\nIsaac-Becketts-MacBook:~ isaacbeckett$ \n```\n. oh yeah, I've been on chat.shazow.net as isaacbeckett, but I usually nick myself as chexo3 after login\n. I just created that go environment, but I will give it a try.\n![Screenshot](http://i.imgur.com/j3XL6Cy.png?1)\n. still gives me that illegal instruction error.\n\n```\ngo get github.com/shazow/ssh-chat\n# cd .; git clone https://github.com/shazow/ssh-chat Go2/src/github.com/shazow/ssh-chat\npackage github.com/shazow/ssh-chat: signal: illegal instruction\n\n```\n. maybe I could uninstall go? And then reinstall go 1.3\nWhere is the unistaller?\n. unistalled go 1.4\ninstalling go 1.3.3\n. Ok so downgrading didn't work.\n\n``` bash\nLast login: Fri Jan  9 16:58:50 on ttys000\nIsaac-Becketts-MacBook:~ isaacbeckett$ mkdir Go\nIsaac-Becketts-MacBook:~ isaacbeckett$ export GOPATH=Go\nIsaac-Becketts-MacBook:~ isaacbeckett$ go get github.com/shazow/ssh-chat\n# cd .; git clone https://github.com/shazow/ssh-chat Go/src/github.com/shazow/ssh-chat\npackage github.com/shazow/ssh-chat: signal: illegal instruction\nIsaac-Becketts-MacBook:~ isaacbeckett$\n```\n. ok\n. I'm trying to build ssh-chat from source now but need to know how, it did not work with go install on the ssh-chat master file I extracted from the downloaded zip\n. ```\nisaacbeckett@MacIron:[~]-06:36 PM > go install /Users/isaacbeckett/Desktop/ssh-chat-master\\  \ncan't load package: package /Users/isaacbeckett/Desktop/ssh-chat-master : import \"/Users/isaacbeckett/Desktop/ssh-chat-master \": cannot import absolute path\nisaacbeckett@MacIron:[~]-06:36 PM > export GOPATH = Go\n-bash: export: `=': not a valid identifier\nisaacbeckett@MacIron:[~]-06:37 PM > export GOPATH=Go\nisaacbeckett@MacIron:[~]-06:37 PM > go install /Users/isaacbeckett/Desktop/ssh-chat-master\\  \ncan't load package: package /Users/isaacbeckett/Desktop/ssh-chat-master : import \"/Users/isaacbeckett/Desktop/ssh-chat-master \": cannot import absolute path\nisaacbeckett@MacIron:[~]-06:37 PM > go install /Users/isaacbeckett/Desktop/ssh-chat-master\ncan't load package: package /Users/isaacbeckett/Desktop/ssh-chat-master: import \"/Users/isaacbeckett/Desktop/ssh-chat-master\": cannot import absolute path\nisaacbeckett@MacIron:[~]-06:37 PM > go install /Users/isaacbeckett/Desktop/ssh-chat-master/\ncan't load package: package /Users/isaacbeckett/Desktop/ssh-chat-master: import \"/Users/isaacbeckett/Desktop/ssh-chat-master\": cannot import absolute path\nisaacbeckett@MacIron:[~]-06:37 PM > \n```\n. So, I would do this inside the master folder?\n. ok thanks\n. ```\nLast login: Tue Jan 13 16:48:36 on ttys000\nisaacbeckett@MacIron:[~]-04:50 PM > export GOPATH=/Users/isaacbeckett/Desktop/ssh-chat-master \nisaacbeckett@MacIron:[~]-04:50 PM > go build ./...\nDesktop/ssh-chat/go/src/ssh-chat/cmd.go:13:2: cannot find package \"github.com/alexcesaro/log\" in any of:\n    /usr/local/go/src/github.com/alexcesaro/log (from $GOROOT)\n    /Users/isaacbeckett/Desktop/ssh-chat-master/src/github.com/alexcesaro/log (from $GOPATH)\nDesktop/ssh-chat/go/src/ssh-chat/cmd.go:14:2: cannot find package \"github.com/alexcesaro/log/golog\" in any of:\n    /usr/local/go/src/github.com/alexcesaro/log/golog (from $GOROOT)\n    /Users/isaacbeckett/Desktop/ssh-chat-master/src/github.com/alexcesaro/log/golog (from $GOPATH)\nDesktop/ssh-chat/go/src/ssh-chat/cmd.go:15:2: cannot find package \"github.com/jessevdk/go-flags\" in any of:\n    /usr/local/go/src/github.com/jessevdk/go-flags (from $GOROOT)\n    /Users/isaacbeckett/Desktop/ssh-chat-master/src/github.com/jessevdk/go-flags (from $GOPATH)\nDesktop/ssh-chat/go/src/ssh-chat/client.go:9:2: cannot find package \"golang.org/x/crypto/ssh\" in any of:\n    /usr/local/go/src/golang.org/x/crypto/ssh (from $GOROOT)\n    /Users/isaacbeckett/Desktop/ssh-chat-master/src/golang.org/x/crypto/ssh (from $GOPATH)\nDesktop/ssh-chat/go/src/ssh-chat/client.go:10:2: cannot find package \"golang.org/x/crypto/ssh/terminal\" in any of:\n    /usr/local/go/src/golang.org/x/crypto/ssh/terminal (from $GOROOT)\n    /Users/isaacbeckett/Desktop/ssh-chat-master/src/golang.org/x/crypto/ssh/terminal (from $GOPATH)\nisaacbeckett@MacIron:[~]-04:51 PM > cd /Users/isaacbeckett/ssh-chat/go/src \nisaacbeckett@MacIron:[~/ssh-chat/go/src]-04:51 PM > go build ./...\nssh-chat/cmd.go:13:2: cannot find package \"github.com/alexcesaro/log\" in any of:\n    /usr/local/go/src/github.com/alexcesaro/log (from $GOROOT)\n    /Users/isaacbeckett/Desktop/ssh-chat-master/src/github.com/alexcesaro/log (from $GOPATH)\nssh-chat/cmd.go:14:2: cannot find package \"github.com/alexcesaro/log/golog\" in any of:\n    /usr/local/go/src/github.com/alexcesaro/log/golog (from $GOROOT)\n    /Users/isaacbeckett/Desktop/ssh-chat-master/src/github.com/alexcesaro/log/golog (from $GOPATH)\nssh-chat/cmd.go:15:2: cannot find package \"github.com/jessevdk/go-flags\" in any of:\n    /usr/local/go/src/github.com/jessevdk/go-flags (from $GOROOT)\n    /Users/isaacbeckett/Desktop/ssh-chat-master/src/github.com/jessevdk/go-flags (from $GOPATH)\nssh-chat/client.go:9:2: cannot find package \"golang.org/x/crypto/ssh\" in any of:\n    /usr/local/go/src/golang.org/x/crypto/ssh (from $GOROOT)\n    /Users/isaacbeckett/Desktop/ssh-chat-master/src/golang.org/x/crypto/ssh (from $GOPATH)\nssh-chat/client.go:10:2: cannot find package \"golang.org/x/crypto/ssh/terminal\" in any of:\n    /usr/local/go/src/golang.org/x/crypto/ssh/terminal (from $GOROOT)\n    /Users/isaacbeckett/Desktop/ssh-chat-master/src/golang.org/x/crypto/ssh/terminal (from $GOPATH)\nisaacbeckett@MacIron:[~/ssh-chat/go/src]-04:51 PM > \n```\n. ```\nisaacbeckett@MacIron:[~/Desktop/ssh-chat-master]-04:59 PM > export GOPATH=/Users/isaacbeckett/Desktop/ssh-chat-master\nisaacbeckett@MacIron:[~/Desktop/ssh-chat-master]-05:00 PM > go get .\n# cd .; git clone https://github.com/alexcesaro/log /Users/isaacbeckett/Desktop/ssh-chat-master/src/github.com/alexcesaro/log\npackage github.com/alexcesaro/log: signal: illegal instruction\npackage github.com/alexcesaro/log/golog\n    imports github.com/alexcesaro/log/golog\n    imports github.com/alexcesaro/log/golog: cannot find package \"github.com/alexcesaro/log/golog\" in any of:\n    /usr/local/go/src/github.com/alexcesaro/log/golog (from $GOROOT)\n    /Users/isaacbeckett/Desktop/ssh-chat-master/src/github.com/alexcesaro/log/golog (from $GOPATH)\n# cd .; git clone https://github.com/jessevdk/go-flags /Users/isaacbeckett/Desktop/ssh-chat-master/src/github.com/jessevdk/go-flags\npackage github.com/alexcesaro/log/golog\n    imports github.com/jessevdk/go-flags: signal: illegal instruction\n# cd .; git clone https://go.googlesource.com/crypto /Users/isaacbeckett/Desktop/ssh-chat-master/src/golang.org/x/crypto\npackage github.com/alexcesaro/log/golog\n    imports golang.org/x/crypto/ssh: signal: illegal instruction\npackage github.com/alexcesaro/log/golog\n    imports golang.org/x/crypto/ssh/terminal\n    imports golang.org/x/crypto/ssh/terminal\n    imports golang.org/x/crypto/ssh/terminal: cannot find package \"golang.org/x/crypto/ssh/terminal\" in any of:\n    /usr/local/go/src/golang.org/x/crypto/ssh/terminal (from $GOROOT)\n    /Users/isaacbeckett/Desktop/ssh-chat-master/src/golang.org/x/crypto/ssh/terminal (from $GOPATH)\nisaacbeckett@MacIron:[~/Desktop/ssh-chat-master]-05:01 PM > go build ./...cmd.go:13:2: cannot find package \"github.com/alexcesaro/log\" in any of:\n    /usr/local/go/src/github.com/alexcesaro/log (from $GOROOT)\n    /Users/isaacbeckett/Desktop/ssh-chat-master/src/github.com/alexcesaro/log (from $GOPATH)\ncmd.go:14:2: cannot find package \"github.com/alexcesaro/log/golog\" in any of:\n    /usr/local/go/src/github.com/alexcesaro/log/golog (from $GOROOT)\n    /Users/isaacbeckett/Desktop/ssh-chat-master/src/github.com/alexcesaro/log/golog (from $GOPATH)\ncmd.go:15:2: cannot find package \"github.com/jessevdk/go-flags\" in any of:\n    /usr/local/go/src/github.com/jessevdk/go-flags (from $GOROOT)\n    /Users/isaacbeckett/Desktop/ssh-chat-master/src/github.com/jessevdk/go-flags (from $GOPATH)\nclient.go:9:2: cannot find package \"golang.org/x/crypto/ssh\" in any of:\n    /usr/local/go/src/golang.org/x/crypto/ssh (from $GOROOT)\n    /Users/isaacbeckett/Desktop/ssh-chat-master/src/golang.org/x/crypto/ssh (from $GOPATH)\nclient.go:10:2: cannot find package \"golang.org/x/crypto/ssh/terminal\" in any of:\n    /usr/local/go/src/golang.org/x/crypto/ssh/terminal (from $GOROOT)\n    /Users/isaacbeckett/Desktop/ssh-chat-master/src/golang.org/x/crypto/ssh/terminal (from $GOPATH)\nisaacbeckett@MacIron:[~/Desktop/ssh-chat-master]-05:01 PM > ssh-chat\n-bash: ssh-chat: command not found\nisaacbeckett@MacIron:[~/Desktop/ssh-chat-master]-05:01 PM > \n```\n. still didn't work\nit just won't build cleanly. I even installed go 1.4 again, and this time using the\ngo1.4.darwin-amd64-osx10.6.pkg file\n. ![Seriously?](https://cloud.githubusercontent.com/assets/10382225/5730285/cb61a51a-9b46-11e4-8640-ec98bd37f024.gif)\n**Come on, work!**\n. I have gotten it to use git properly after installing brew and git for unrelated reasons...\n\n```\nLast login: Sat Feb  7 19:44:09 on ttys000\nisaacbeckett@MacIron.local:[~]-08:59 PM > rmdir go\nrmdir: go: Directory not empty\nisaacbeckett@MacIron.local:[~]-08:59 PM > rm -rf go\nisaacbeckett@MacIron.local:[~]-08:59 PM > mkdir go\nisaacbeckett@MacIron.local:[~]-08:59 PM > export GOPATH=/Users/isaacbeckett/go\nisaacbeckett@MacIron.local:[~]-09:00 PM > echo $GOPATH\n/Users/isaacbeckett/go\nisaacbeckett@MacIron.local:[~]-09:00 PM > go get github.com/shazow/ssh-chat\nisaacbeckett@MacIron.local:[~]-09:02 PM > ls go\npkg src\nisaacbeckett@MacIron.local:[~]-09:02 PM > ssh-chat\n-bash: ssh-chat: command not found\nisaacbeckett@MacIron.local:[~]-09:02 PM > echo ...but it\\'s still not working\n...but it's still not working\nisaacbeckett@MacIron.local:[~]-09:02 PM > \n```\n. ok is it possible I could drop it into the bash commands folder?\n. ![Yes, hidden files ARE being shown in Finder.](http://i.imgur.com/Zp88ZKX.png?1)\n. Well, those I have seen are *nix binaries, a .pkg or .mpkg would work better. Plus brew makes it easy to manage the versions of ssh-chat you have installed. No more complicated removal processes before using your new .pkg. That also makes it easier to integrate as a dependency for other brews, and to make add-ons that can be installed with brew. It is sometimes easier to do things the old fashioned way as well.\n. Ok, well a .pkg is better because it does not require xcode. I needed git to go get ssh chat, and that required xcode one way or another, although `brew install git` made it easy. a .pkg would not require xcode because it is already built. then rookie users like me (especially those with old macs and that have to sign up for a developer id to get access to old xocde versions, also me) can install with ease. And homebrew makes this easy. Now, if I didn't have go installed, `brew install ssh-chat` would have installed go as a dependency. This streamlines everything, and if I make an addon for ssh-chat, I can manage that easily.\n. I'd make a brew formula, but first I need a tarball download.\nOr a zip.\n. Oh, and with .pkg you are using a native file format, no unzipping and decompiling and other porting shenanigans. But at that point using a *nix binary defeats the purpose of a prebuilt binary.\n. I mean a *nix binary is for *nix systems, it is prebuilt as well, but you would need to decompile it and recompile on a mac to use it on a mac\n. I basically need a .tgz source.\nYou know what. I know almost nothing about brewing formulae. I'm gonna experiment now and come back to you later.\n. What version is ssh-chat at?\n. Well, then can you re-enable it? At least, with some sort if anti-spam, like a maximum amount of memory per time period.\n. ",
    "rkeene": "Perhaps another way forward would be to use the SSH \"exec\" session request rather than \"shell\" session request to differentiate the protocol-based interface from the UI, leaving the \"UI\" with shell.\n\nThen someone could do \"ssh _server_ sshchat/1.0\" to get the protocol interface v1.0 and a session would be established, or an error returned in the form of an exit code.\n. I'd argue against passing environment variables in a \"shell\" session because there's no right answer -- setting it to \"bot\" isn't good enough since someone in the future may define a \"bot\" terminal (probably not) and we can avoid ambiguity thanks to SSH's existing features.\n. Perhaps another way forward would be to use the SSH \"exec\" session request rather than \"shell\" session request to differentiate the protocol-based interface from the UI, leaving the \"UI\" with shell.\n\nThen someone could do \"ssh _server_ sshchat/1.0\" to get the protocol interface v1.0 and a session would be established, or an error returned in the form of an exit code.\n. I'd argue against passing environment variables in a \"shell\" session because there's no right answer -- setting it to \"bot\" isn't good enough since someone in the future may define a \"bot\" terminal (probably not) and we can avoid ambiguity thanks to SSH's existing features.\n. ",
    "Munzy": "I was using export GOPATH=$HOME/go which points to /home/chat/go/ and in that folder is the bin scr and third folder which I forget at the moment. \n\nI did a fresh wipe of go as well and started from scratch on the vm and still nothing. \n\nDoes it need root?\n. BTW, as added info, I am using the prebuilt linux i386 version that is found on the golang.org website. \n. I was using export GOPATH=$HOME/go which points to /home/chat/go/ and in that folder is the bin scr and third folder which I forget at the moment. \n\nI did a fresh wipe of go as well and started from scratch on the vm and still nothing. \n\nDoes it need root?\n. BTW, as added info, I am using the prebuilt linux i386 version that is found on the golang.org website. \n. ",
    "smiller171": "@shazow I would like to help you set this up in Travis.ci to build various images. I already have an idea of how to build a much smaller Docker image and have the build run automatically\n. @shazow I'll take a look and submit a PR when something is ready\n. @shazow I think I have it set up to only deploy to Docker hub on Master, not on PRs, but let me confirm that is working\n. @shazow I fixed the issue with the makefile so that it's built differently in Travis for the purposes of packaging in Docker. I also changed the way the deployment is handled so that it will only deploy on master and tested that this works\n. @shazow I'm getting the following when trying to run tests locally, and it's failing on Travis with my changes. I think the two may be related\n\n``` bash\nmake test\ngo test ./...\n# ssh-chat\n./auth_test.go:17: key.Public undefined (type *rsa.PrivateKey has no field or method Public)\n./host_test.go:151: clientkey.Public undefined (type *rsa.PrivateKey has no field or method Public)\nFAIL    ssh-chat [build failed]\nok      ssh-chat/chat   0.002s\nok      ssh-chat/chat/message   0.002s\n?       ssh-chat/cmd/ssh-chat   [no test files]\nok      ssh-chat/sshd   0.039s\nMakefile:30: recipe for target 'test' failed\nmake: *** [test] Error 2\n```\n. Ok, this is odd. I have confirmed that your tests run just fine in Travis' new Docker infrastructure, but completely hang in their legacy infrastructure.\n\nThey also won't run on my machine. Are you perhaps making some assumptions about the environment that don't work?\n. @shazow I'm on Ubuntu 15.04 with Go 1.4.\n\n Travis infrastructure is on Ubuntu 14.04, with Go 1.4 or 1.5\n\nFrom a Travis perspective there is one version running on some kind of VM infrastructure and another running in Docker. The latter works, the first does not.\n. @shazow I don't really know go, but if you make the change I can merge it into this branch.\n\nI wish I had any idea why it was hanging, but there should probably be a bug for tests not running properly in some environments\n. @shazow I have no idea how to create an environment where it actually runs. The only one I have access to is Travis' new Docker infrastructure\n. @shazow I would like to help you set this up in Travis.ci to build various images. I already have an idea of how to build a much smaller Docker image and have the build run automatically\n. @shazow I'll take a look and submit a PR when something is ready\n. @shazow I think I have it set up to only deploy to Docker hub on Master, not on PRs, but let me confirm that is working\n. @shazow I fixed the issue with the makefile so that it's built differently in Travis for the purposes of packaging in Docker. I also changed the way the deployment is handled so that it will only deploy on master and tested that this works\n. @shazow I'm getting the following when trying to run tests locally, and it's failing on Travis with my changes. I think the two may be related\n\n``` bash\nmake test\ngo test ./...\n# ssh-chat\n./auth_test.go:17: key.Public undefined (type *rsa.PrivateKey has no field or method Public)\n./host_test.go:151: clientkey.Public undefined (type *rsa.PrivateKey has no field or method Public)\nFAIL    ssh-chat [build failed]\nok      ssh-chat/chat   0.002s\nok      ssh-chat/chat/message   0.002s\n?       ssh-chat/cmd/ssh-chat   [no test files]\nok      ssh-chat/sshd   0.039s\nMakefile:30: recipe for target 'test' failed\nmake: *** [test] Error 2\n```\n. Ok, this is odd. I have confirmed that your tests run just fine in Travis' new Docker infrastructure, but completely hang in their legacy infrastructure.\n\nThey also won't run on my machine. Are you perhaps making some assumptions about the environment that don't work?\n. @shazow I'm on Ubuntu 15.04 with Go 1.4.\n\n Travis infrastructure is on Ubuntu 14.04, with Go 1.4 or 1.5\n\nFrom a Travis perspective there is one version running on some kind of VM infrastructure and another running in Docker. The latter works, the first does not.\n. @shazow I don't really know go, but if you make the change I can merge it into this branch.\n\nI wish I had any idea why it was hanging, but there should probably be a bug for tests not running properly in some environments\n. @shazow I have no idea how to create an environment where it actually runs. The only one I have access to is Travis' new Docker infrastructure\n. ",
    "mkaminsky11": "i don't know how it works now, but i do know that someone ground the chat to a halt by exploiting this. I looked through the logs. this is what the person who was making it lag said:\n\n\"it's a small script I wrote\nbasically,\nI connect to this ssh-chat\nand just keep writing lots of data\nwithout actually pressing \"enter\"\nso all the data is being sent to the server\nwithout you seeing it\"\n\nHe also had a lot of bots online, so that may have had something to do with it. There were probably 10 or 20 bots. Each of them may have been doing something similar. As soon as all of the bots left, the lagging stopped.\n. maybe only allow a certain number of users per client? this would prevent the creation of 20 bots to lag the server. you could get around this, but it would take more work.\n. i don't know how it works now, but i do know that someone ground the chat to a halt by exploiting this. I looked through the logs. this is what the person who was making it lag said:\n\n\"it's a small script I wrote\nbasically,\nI connect to this ssh-chat\nand just keep writing lots of data\nwithout actually pressing \"enter\"\nso all the data is being sent to the server\nwithout you seeing it\"\n\nHe also had a lot of bots online, so that may have had something to do with it. There were probably 10 or 20 bots. Each of them may have been doing something similar. As soon as all of the bots left, the lagging stopped.\n. maybe only allow a certain number of users per client? this would prevent the creation of 20 bots to lag the server. you could get around this, but it would take more work.\n. ",
    "Lana-chan": "Something to note: while writing my bot ( https://github.com/Lana-chan/ssh-chat-bot ) I found out that to effectively join the chat you need to get pty and invoke shell, otherwise you can be connected but not showing up in the chat. Maybe the spambots are opening a session and streaming bytes that way, but in order to hide they don't invoke a shell and as such don't show up in the connected list?\n. Something to note: while writing my bot ( https://github.com/Lana-chan/ssh-chat-bot ) I found out that to effectively join the chat you need to get pty and invoke shell, otherwise you can be connected but not showing up in the chat. Maybe the spambots are opening a session and streaming bytes that way, but in order to hide they don't invoke a shell and as such don't show up in the connected list?\n. ",
    "pwoolcoc": "huh, sorry, don't know how I missed that.\n. huh, sorry, don't know how I missed that.\n. ",
    "aminehmida": "I just want to say that this is not a remote execution : you run a local process and you just pipe the output to ssh-chat. After making more research, I think it is not possible to make the `/exec` command but we could use something like : `echo \"Hello world\" | ssh username@server echo`\n\nI think that this feature has no security risk for any user. Please feel free to correct me :) \n. I have not found any reference on how to pipe things to ssh-chat. Can you give me an indication on where to look ?\n. I just want to say that this is not a remote execution : you run a local process and you just pipe the output to ssh-chat. After making more research, I think it is not possible to make the `/exec` command but we could use something like : `echo \"Hello world\" | ssh username@server echo`\n\nI think that this feature has no security risk for any user. Please feel free to correct me :) \n. I have not found any reference on how to pipe things to ssh-chat. Can you give me an indication on where to look ?\n. ",
    "fjarlq": "When I submitted my pull request for clarifying `README.md` and fixing the #130 `go vet` nitpicks, the CI tests failed for this same reason, missing dependencies.\n\nTo fix the CI tests, I modified `make deps` to run `go get ./...` instead of merely `go get .`\n\nThen I noticed that `make build` will also fail due to missing dependencies. So I modified the `$(BUILD)` target to depend on the `deps` target.\n. When I submitted my pull request for clarifying `README.md` and fixing the #130 `go vet` nitpicks, the CI tests failed for this same reason, missing dependencies.\n\nTo fix the CI tests, I modified `make deps` to run `go get ./...` instead of merely `go get .`\n\nThen I noticed that `make build` will also fail due to missing dependencies. So I modified the `$(BUILD)` target to depend on the `deps` target.\n. ",
    "Schezuk": "Problem solved. Adding any private ssh key with ssh-add will solve this problem.\nWhen I tried to connect with Cygwin/Putty/some other server without private key added, it would fail.\n\nBTW: How does ssh-chat manage public key? I haven't submitted any to the server.\n. Indeed, I didn't realize private ssh key is necessary, since public key is not submitted.\nThank you very much and have a happy Christmas!\n. Err, is it possible to run a command to convert to ssh-chat from bash?\nEveryone login to `bash`, and runs `ssh-chat` to get into chat room, or run `ssh-chat &` to just watch?\nRHCloud allow only port 22 for ssh, and disallow `wall`. \nPort 22 has to be available for normal ssh use.\n. Then how should I manage ssh-chat server, if it has only one port for ssh?\n. Or switch between bash and ssh-chat based on different user?\nOnly white-listed user can get bash, others ssh-chat?\n. Oh, I see. Thanks.\n. Problem solved. Adding any private ssh key with ssh-add will solve this problem.\nWhen I tried to connect with Cygwin/Putty/some other server without private key added, it would fail.\n\nBTW: How does ssh-chat manage public key? I haven't submitted any to the server.\n. Indeed, I didn't realize private ssh key is necessary, since public key is not submitted.\nThank you very much and have a happy Christmas!\n. Err, is it possible to run a command to convert to ssh-chat from bash?\nEveryone login to `bash`, and runs `ssh-chat` to get into chat room, or run `ssh-chat &` to just watch?\nRHCloud allow only port 22 for ssh, and disallow `wall`. \nPort 22 has to be available for normal ssh use.\n. Then how should I manage ssh-chat server, if it has only one port for ssh?\n. Or switch between bash and ssh-chat based on different user?\nOnly white-listed user can get bash, others ssh-chat?\n. Oh, I see. Thanks.\n. ",
    "epitron": "No problemo! Fun little tool. :)\n. No problemo! Fun little tool. :)\n. ",
    "packrobottom": "Thanks for the reply! \u00a0I will try branch v0\n\nI have been testing. \u00a0Both servers don\u2019t exhibit the issue when using no options. \u00a0just running as ssh-chat from an init.d script they are fine and stable. \u00a0If I run them with --verbose --admin\u00a0\u00a0/pathtofile/\u00a0 --whitelist\u00a0\u00a0/pathtofile/\u00a0--motd /pathtofile/ --log\u00a0\u00a0/pathtofile/ after a period of time sometimes short sometimes a bit longer clients connect and instantly disconnects.\n\nThanks,\n\nPack\n. ok I will try that option as well.  Thanks .  Really great idea btw so simple and portable for chat.\n. I spoke to soon debian server (running no options) is now auto disconnecting clients as well until a ssh-chat restart\n. I am using go 1.6.  I'm not able to build v0 branch. builds but binary won't run.  On debian 7.\nany thoughts would be greatly appreciated.  Master branch builds fine.  So branch v0 is older but has more features than master?\n. it builds completes but binary won't run. just hangs\n~/go/src/v0 # make build\ngo build ./...\ngo build -ldflags \"-X main.buildCommit `git describe --long --tags --dirty --always`\" .\n#v0\nlink: warning: option -X main.buildCommit e12982d may not work in future releases; use -X main.buildCommit=e12982d\n~/go/src/v0 #\n. you'll have to forgive me I don't know what that means\n. haha no problem I'd never heard that one.  I like it.  I think I've figured it out v0 uses port 22. I will see if this is more stable for me.  I really appreciate the comments most devs would just ignore.\n. v0 stable for me.  Can't get white list keys to work but it's stable.  what is the process for whitelist keys to work on v0 branch?  pub keys in a text file? \n. yah I already had it working on the master build  --whitelist ~/ssh-chat/keysfile\nthis isn't working on v0  public key denied when trying to connect that same flag.  Haven't changed anything and whitelist was working so i just wondered if the option was slightly different in v0\n. Thanks for the reply! \u00a0I will try branch v0\n\nI have been testing. \u00a0Both servers don\u2019t exhibit the issue when using no options. \u00a0just running as ssh-chat from an init.d script they are fine and stable. \u00a0If I run them with --verbose --admin\u00a0\u00a0/pathtofile/\u00a0 --whitelist\u00a0\u00a0/pathtofile/\u00a0--motd /pathtofile/ --log\u00a0\u00a0/pathtofile/ after a period of time sometimes short sometimes a bit longer clients connect and instantly disconnects.\n\nThanks,\n\nPack\n. ok I will try that option as well.  Thanks .  Really great idea btw so simple and portable for chat.\n. I spoke to soon debian server (running no options) is now auto disconnecting clients as well until a ssh-chat restart\n. I am using go 1.6.  I'm not able to build v0 branch. builds but binary won't run.  On debian 7.\nany thoughts would be greatly appreciated.  Master branch builds fine.  So branch v0 is older but has more features than master?\n. it builds completes but binary won't run. just hangs\n~/go/src/v0 # make build\ngo build ./...\ngo build -ldflags \"-X main.buildCommit `git describe --long --tags --dirty --always`\" .\n#v0\nlink: warning: option -X main.buildCommit e12982d may not work in future releases; use -X main.buildCommit=e12982d\n~/go/src/v0 #\n. you'll have to forgive me I don't know what that means\n. haha no problem I'd never heard that one.  I like it.  I think I've figured it out v0 uses port 22. I will see if this is more stable for me.  I really appreciate the comments most devs would just ignore.\n. v0 stable for me.  Can't get white list keys to work but it's stable.  what is the process for whitelist keys to work on v0 branch?  pub keys in a text file? \n. yah I already had it working on the master build  --whitelist ~/ssh-chat/keysfile\nthis isn't working on v0  public key denied when trying to connect that same flag.  Haven't changed anything and whitelist was working so i just wondered if the option was slightly different in v0\n. ",
    "cmosetick": "I have not tried a local build.\n\nI just ran these commands and still got MD5 / hex format:\n\n```\nssh root@ssh root@chat.shazow.net\n/list\n/whois neo\n-> neo is 1a:ee:c0:99:3b:f4:75:18:67:38:84:a3:96:16:54:5a via SSH-2.0-OpenSSH_6.9\n```\n\nSo, if you think I should be getting a different output on your reference server, let me know.\n. Yes, I noticed that early this morning when I was playing with the hidden commands!\n. Thanks for the link to that issue in keybase. Looks like a lot of folks are interested in public half of ssh key support too.\n. I have not tried a local build.\n\nI just ran these commands and still got MD5 / hex format:\n\n```\nssh root@ssh root@chat.shazow.net\n/list\n/whois neo\n-> neo is 1a:ee:c0:99:3b:f4:75:18:67:38:84:a3:96:16:54:5a via SSH-2.0-OpenSSH_6.9\n```\n\nSo, if you think I should be getting a different output on your reference server, let me know.\n. Yes, I noticed that early this morning when I was playing with the hidden commands!\n. Thanks for the link to that issue in keybase. Looks like a lot of folks are interested in public half of ssh key support too.\n. ",
    "basdds": "Ok, first post on github :-) \n\nTried to install ssh-chat for private/testing use on my own machine: \n\n```\nbas@earth:~/workspace$ go get github.com/shazow/ssh-chat/... \n# golang.org/x/crypto/ssh\nsrc/golang.org/x/crypto/ssh/keys.go:566: undefined: crypto.Signer\n```\n\nThis is on a debian machine, running these versions of the go packages: \n\n```\nbas@earth:~$ dpkg --list | grep golang\nii  golang                         2:1.3.3-1                         all          Go programming language compiler - metapackage\nii  golang-doc                     2:1.3.3-1                         all          Go programming language compiler - documentation\nii  golang-go                      2:1.3.3-1                         amd64        Go programming language compiler\nii  golang-go-linux-amd64          2:1.3.3-1                         amd64        Go standard library compiled for linux_amd64\nii  golang-go.tools                0.0~hg20140703-4                  amd64        supplementary Go tools\nii  golang-src                     2:1.3.3-1                         amd64        Go programming language compiler - source files\n```\n. Thank you @shazow ! I was using debian stable, so indeed; older version of go was installed. (1.3.x)\n\nAfter installing the precompiled 1.6.1 linux/amd64 binaries (*)  it compiled without problems. \n\nAnd 'computer says yes': \n\n`bas@earth:~/workspace/bin$ ./ssh-chat --verbose --bind \":2222\" --identity ~/.ssh/id_rsa & \nListening for connections on [::]:2222\n\nbas@earth:~$ ssh -p 2222 localhost \nThe authenticity of host '[localhost]:2222 ([::1]:2222)' can't be established.\nRSA key fingerprint is 8c:d5:aa:67:d3:77:39:45:6d:d2:e2:7d:3c:a9:e3:7d.\nAre you sure you want to continue connecting (yes/no)? yes\nWarning: Permanently added '[localhost]:2222' (RSA) to the list of known hosts.\n- bas joined. (Connected: 1)\n  [bas] cool!!!!`\n\n(*) For other go newbies like me, see:  https://golang.org/dl/\n. Ok, first post on github :-) \n\nTried to install ssh-chat for private/testing use on my own machine: \n\n```\nbas@earth:~/workspace$ go get github.com/shazow/ssh-chat/... \n# golang.org/x/crypto/ssh\nsrc/golang.org/x/crypto/ssh/keys.go:566: undefined: crypto.Signer\n```\n\nThis is on a debian machine, running these versions of the go packages: \n\n```\nbas@earth:~$ dpkg --list | grep golang\nii  golang                         2:1.3.3-1                         all          Go programming language compiler - metapackage\nii  golang-doc                     2:1.3.3-1                         all          Go programming language compiler - documentation\nii  golang-go                      2:1.3.3-1                         amd64        Go programming language compiler\nii  golang-go-linux-amd64          2:1.3.3-1                         amd64        Go standard library compiled for linux_amd64\nii  golang-go.tools                0.0~hg20140703-4                  amd64        supplementary Go tools\nii  golang-src                     2:1.3.3-1                         amd64        Go programming language compiler - source files\n```\n. Thank you @shazow ! I was using debian stable, so indeed; older version of go was installed. (1.3.x)\n\nAfter installing the precompiled 1.6.1 linux/amd64 binaries (*)  it compiled without problems. \n\nAnd 'computer says yes': \n\n`bas@earth:~/workspace/bin$ ./ssh-chat --verbose --bind \":2222\" --identity ~/.ssh/id_rsa & \nListening for connections on [::]:2222\n\nbas@earth:~$ ssh -p 2222 localhost \nThe authenticity of host '[localhost]:2222 ([::1]:2222)' can't be established.\nRSA key fingerprint is 8c:d5:aa:67:d3:77:39:45:6d:d2:e2:7d:3c:a9:e3:7d.\nAre you sure you want to continue connecting (yes/no)? yes\nWarning: Permanently added '[localhost]:2222' (RSA) to the list of known hosts.\n- bas joined. (Connected: 1)\n  [bas] cool!!!!`\n\n(*) For other go newbies like me, see:  https://golang.org/dl/\n. ",
    "jbenet": "consider github.com/whyrusleeping/gx -- it's early days, but it works for go-ipfs.\n\nfile issues if anything is unclear.\n. @shazow is that a \"not comfortable yet\" or a \"not comfortable ever\" point? would like to understand the perspective. \n\n(the `/ipfs` prefix is convenience and for making it clear to the tooling that it can use ipfs to fetch it, eventually we'll submit patches to the go tool to add ipfs support)\n\nI dont mean to derail this issue though, can you give some feedback somewhere?\n. > 1. I don't feel the transport should be hardcoded into the import namespace. I think this is consistent with Go's decision to exclude http(s)://, git:// etc from the import statements, and adding ipfs:// or similar would be a regression in that direction.\n\nThis is a misunderstanding. `/ipfs` is there because it allows mounting the whole filesystem and accessing packages that way. Think of it like the service provider, \"github.com\" part. `gx` itself uses _either_ ipfs OR http to pull down the content into that directory.\n\nBTW: the scheme identifier is evil and separated the Web from the Filesystem, which is a problem we're fixing by correctly labeling transports, AND self-describing.\n\n> 1. I don't want to require an additional non-ubiquitous service that is largely unrelated to golang dev just to build the project. If it was an optional enhancement, that'd be cool.\n\n`gx` works out of the box without ipfs, it uses http from the ipfs.io gateway. (think of it as our github.com or our npm), but it verifies all the content is correct, and version locks.\n\ntry it out.\n\nalso the import rewriting will disappear once we add hash mapping in the `package.json` `name: hash` (like the `name: version` mapping in npm package.json) \n\n> Really a pinning/lock file is probably the way to go, where aware tools can fetch the dependencies from the best possible source but still fall back to the normal golang vendoring/namespacing mechanics.\n\nyeah do whatever is best for your project. it's still early days of gx.\n. consider github.com/whyrusleeping/gx -- it's early days, but it works for go-ipfs.\n\nfile issues if anything is unclear.\n. @shazow is that a \"not comfortable yet\" or a \"not comfortable ever\" point? would like to understand the perspective. \n\n(the `/ipfs` prefix is convenience and for making it clear to the tooling that it can use ipfs to fetch it, eventually we'll submit patches to the go tool to add ipfs support)\n\nI dont mean to derail this issue though, can you give some feedback somewhere?\n. > 1. I don't feel the transport should be hardcoded into the import namespace. I think this is consistent with Go's decision to exclude http(s)://, git:// etc from the import statements, and adding ipfs:// or similar would be a regression in that direction.\n\nThis is a misunderstanding. `/ipfs` is there because it allows mounting the whole filesystem and accessing packages that way. Think of it like the service provider, \"github.com\" part. `gx` itself uses _either_ ipfs OR http to pull down the content into that directory.\n\nBTW: the scheme identifier is evil and separated the Web from the Filesystem, which is a problem we're fixing by correctly labeling transports, AND self-describing.\n\n> 1. I don't want to require an additional non-ubiquitous service that is largely unrelated to golang dev just to build the project. If it was an optional enhancement, that'd be cool.\n\n`gx` works out of the box without ipfs, it uses http from the ipfs.io gateway. (think of it as our github.com or our npm), but it verifies all the content is correct, and version locks.\n\ntry it out.\n\nalso the import rewriting will disappear once we add hash mapping in the `package.json` `name: hash` (like the `name: version` mapping in npm package.json) \n\n> Really a pinning/lock file is probably the way to go, where aware tools can fetch the dependencies from the best possible source but still fall back to the normal golang vendoring/namespacing mechanics.\n\nyeah do whatever is best for your project. it's still early days of gx.\n. ",
    "jonashoechst": "Yes.\n\n```\n$ git rev-parse --verify HEAD\n64335f33d72b6084d40f98651b6a2b794ef6490e\n```\n. Unfortunately I didn't do anything in golang yet, so I think debugging and fixing this bug is a bit too much right now. Im sorry, but I can't help you out here...\n. Yes.\n\n```\n$ git rev-parse --verify HEAD\n64335f33d72b6084d40f98651b6a2b794ef6490e\n```\n. Unfortunately I didn't do anything in golang yet, so I think debugging and fixing this bug is a bit too much right now. Im sorry, but I can't help you out here...\n. ",
    "jaredmichaelwilliams": "I'm the director of devops at my company, and i can do quite a bit, i used to be a programmer. \n. I'm the director of devops at my company, and i can do quite a bit, i used to be a programmer. \n. ",
    "sirreal": "What would the timeframe be? That can make quite a difference in the weekday/weekend choice depending on your timezone.\n. What would the timeframe be? That can make quite a difference in the weekday/weekend choice depending on your timezone.\n. ",
    "prologic": "For the record I'm in (_was in, am in!_) \ud83d\udce6 \n\nSubmitted #148  and #147 so far :)\n. Maybe :) Are we worried at all about cleaning up the goroutines on client disconnect or server termination? Or do we rely on GC for that?\n. Ahh because the send will fail. Of course! Let me amend this PR...\n. Yeah all good points. I just thought it might bit a bit messy mixing `*.go` source files in the top-level repo as well as other non-source files :)\n. No problems :)\n. Cool! :)\n. For the record I'm in (_was in, am in!_) \ud83d\udce6 \n\nSubmitted #148  and #147 so far :)\n. Maybe :) Are we worried at all about cleaning up the goroutines on client disconnect or server termination? Or do we rely on GC for that?\n. Ahh because the send will fail. Of course! Let me amend this PR...\n. Yeah all good points. I just thought it might bit a bit messy mixing `*.go` source files in the top-level repo as well as other non-source files :)\n. No problems :)\n. Cool! :)\n. ",
    "mi12092": "Ok. but what is main point behind GOPATH, once I installed go.\nWhat I do need to do, change GOPATH to point to directory where go is installed or where ssh-chat is downloaded?\n. Ok thanks. I will try that tutorial.\n. Ok. but what is main point behind GOPATH, once I installed go.\nWhat I do need to do, change GOPATH to point to directory where go is installed or where ssh-chat is downloaded?\n. Ok thanks. I will try that tutorial.\n. ",
    "anarcat": "note that the irc folks are working on a major overhaul and extension of the protocol, including authentication, backlogs and federation. your input would be very welcome here:\n\nhttp://ircv3.net/\n\nit seems to me that reinventing the federation wheel again here would be a waste of time, to say the least. ;)\n. note that the irc folks are working on a major overhaul and extension of the protocol, including authentication, backlogs and federation. your input would be very welcome here:\n\nhttp://ircv3.net/\n\nit seems to me that reinventing the federation wheel again here would be a waste of time, to say the least. ;)\n. ",
    "aaronwinter": "Of course not, thanks! I will make another PR for the tests\n. Of course not, thanks! I will make another PR for the tests\n. ",
    "dharden": "I'd be curious-- how are themes defined?\n. Cool, thanks. What other items would you want to colorize? With just system messages, pms, highlights (and default text I suppose), I don't know how much of the solarized-ness would come through. Maybe limit the nick colors to just that palette (might not be enough colors)?\n. I'd be curious-- how are themes defined?\n. Cool, thanks. What other items would you want to colorize? With just system messages, pms, highlights (and default text I suppose), I don't know how much of the solarized-ness would come through. Maybe limit the nick colors to just that palette (might not be enough colors)?\n. ",
    "sdegutis": "@dharden see https://github.com/shazow/ssh-chat/blob/master/chat/message/theme.go\n. @dharden see https://github.com/shazow/ssh-chat/blob/master/chat/message/theme.go\n. ",
    "allentc": "Duplicate of #162 \n. Duplicate of #162 \n. ",
    "dmitshur": "But then how will we know which parts of the world all the users are from? Hehe, just kidding.\n. Are you okay with [`github.com/dustin/go-humanize`](https://godoc.org/github.com/dustin/go-humanize) dependency for printing a human readable version of \"time since joined\"?\n. > I think it's okay to leave some non-essential commands hidden. :)\n\nHow do you determine if a command is essential or not? Doesn't it depend on the user and the context? If the user wants to find out the version of the chat, then `/version` is essential. If they want to rename themselves, then `/nick` is essential. If they don't want to change their nick, then `/nick` is useless to them.\n\nFrom a UX perspective, as a user, I feel cheated when there's what appears to be an exhaustive list of commands, but in reality it turns out that it was an incomplete list.\n\nIt encourages guessing and feeling unconfident. A real example of what I ran into was that I wanted to find out the version, and when I saw that `/help` didn't list `/version`, I figured it must be impossible. Then I tried `/version` just in case, and was frustrated to find out that `/help` lied to me. So next time I see a list of commands, I won't have the confidence in knowing if there's other unlisted commands or not, which leads to a poorer user experience.\n\nI'd be happier if there was a sentence at the end saying \"There are additional hidden commands, see full list in source.\" or \"Additional minor commands are hidden.\", if you don't want to actually list all commands.\n\nJust wanted to share some feedback. :) ssh-chat is awesome!\n. > Software has had hidden commands and features since software has become a thing.\n\nTrue. But that's not proof that it's a good practice, just that it's an existing practice. I want software to become better. :)\n\n> That's not to make you feel cheated, but more to allow for advanced usecases without shoving every possible scenario down the throats of beginners. \n\nThat makes sense. I just prefer it to be done in a friendly way.\n\n> Anyways, all up to how strongly you feel about this.\n\nWe shall find out. For now, I just wanted to share constructive feedback.\n. I think this is useful. But why did you call it \"_Attempted_ confirmation\"?\n. PTAL.\n\nSorry, I force pushed because I needed to fix the submodule stuff (and github UI doesn't let you easily see diffs between PR revisions, unlike Gerrit).\n. > Nice, love it! I'm happy to make it more strict.\r\n\r\nGlad to hear that.\r\n\r\n> Want to do that, and also make the minor changes in the codebase to make it pass? :D\r\n\r\nSure, I'll expand the scope of the PR to include that as well.. The reason CI fails is because some of the vendored dependencies are not compatible with `gofmt -s` (luckily, they are compatible with plain `gofmt`).\r\n\r\nI've discussed the options for a resolution with @shazow, which are:\r\n\r\n1. See if a newer version already fixes it, update to it if so.\r\n2. Otherwise, try to send a PR upstream to fix it myself, and if/once it's merged, update the vendored copy.\r\n3. Find a way to ignore `/vendor/` from `gofmt -s` check.\r\n\r\nHe told me he prefers option 3, and it's consistent with some of the CI checks already skipping /vendor/.\r\n\r\nI've never had to skip `/vendor/` from `gofmt` checks in my experience, because I use a different solution to vendoring. So I looked into this now, and it's not easy.\r\n\r\n- `gofmt` itself takes a path (not import paths), and as soon as you give it a directory, you have no way of stopping it from recursively descending all further directories, including /vendor/.\r\n- `gofmt` can take individual .go files, but then I'd need to write a bash loop that iterates over all directories, but doesn't descend into /vendor/, and calls `gofmt -s` on all `.go` files it finds.\r\n- `go fmt`, a higher level command available in `go` binary, takes import paths, so `go fmt (go list ./... | grep -v /vendor/)` could be done to skip /vendor/. But it's not configurable, and defaults to writing to disk, listing files that were affected, and not actually displaying the diff, which makes it hard to see in failed CI output what the gofmt problem was.\r\n\r\nI don't want to spend time writing that custom loop logic in bash, so the best long term solution I think is to create a small custom Go command that performs the needed logic (skipping vendor directories). (Or find an existing command that does what's needed, if that's faster/easier.) But, I don't have a budget to work on that for this PR, so that leaves me with these 2 options:\r\n\r\n1. Avoid `-s` flag and use plain `gofmt`. It will run on vendored directories, which will make tests pass for now, but might cause a failure in the future if a vendored dependency is added that is not compatible with `gofmt`.\r\n2. Close this PR because I don't have the resources to implement all the work needed to get it to merge-able state.\r\n\r\n@shazow How would you like to proceed?. SGTM, I'll do that.. Updated, tests are passing, PTAL.. But then how will we know which parts of the world all the users are from? Hehe, just kidding.\n. Are you okay with [`github.com/dustin/go-humanize`](https://godoc.org/github.com/dustin/go-humanize) dependency for printing a human readable version of \"time since joined\"?\n. > I think it's okay to leave some non-essential commands hidden. :)\n\nHow do you determine if a command is essential or not? Doesn't it depend on the user and the context? If the user wants to find out the version of the chat, then `/version` is essential. If they want to rename themselves, then `/nick` is essential. If they don't want to change their nick, then `/nick` is useless to them.\n\nFrom a UX perspective, as a user, I feel cheated when there's what appears to be an exhaustive list of commands, but in reality it turns out that it was an incomplete list.\n\nIt encourages guessing and feeling unconfident. A real example of what I ran into was that I wanted to find out the version, and when I saw that `/help` didn't list `/version`, I figured it must be impossible. Then I tried `/version` just in case, and was frustrated to find out that `/help` lied to me. So next time I see a list of commands, I won't have the confidence in knowing if there's other unlisted commands or not, which leads to a poorer user experience.\n\nI'd be happier if there was a sentence at the end saying \"There are additional hidden commands, see full list in source.\" or \"Additional minor commands are hidden.\", if you don't want to actually list all commands.\n\nJust wanted to share some feedback. :) ssh-chat is awesome!\n. > Software has had hidden commands and features since software has become a thing.\n\nTrue. But that's not proof that it's a good practice, just that it's an existing practice. I want software to become better. :)\n\n> That's not to make you feel cheated, but more to allow for advanced usecases without shoving every possible scenario down the throats of beginners. \n\nThat makes sense. I just prefer it to be done in a friendly way.\n\n> Anyways, all up to how strongly you feel about this.\n\nWe shall find out. For now, I just wanted to share constructive feedback.\n. I think this is useful. But why did you call it \"_Attempted_ confirmation\"?\n. PTAL.\n\nSorry, I force pushed because I needed to fix the submodule stuff (and github UI doesn't let you easily see diffs between PR revisions, unlike Gerrit).\n. > Nice, love it! I'm happy to make it more strict.\r\n\r\nGlad to hear that.\r\n\r\n> Want to do that, and also make the minor changes in the codebase to make it pass? :D\r\n\r\nSure, I'll expand the scope of the PR to include that as well.. The reason CI fails is because some of the vendored dependencies are not compatible with `gofmt -s` (luckily, they are compatible with plain `gofmt`).\r\n\r\nI've discussed the options for a resolution with @shazow, which are:\r\n\r\n1. See if a newer version already fixes it, update to it if so.\r\n2. Otherwise, try to send a PR upstream to fix it myself, and if/once it's merged, update the vendored copy.\r\n3. Find a way to ignore `/vendor/` from `gofmt -s` check.\r\n\r\nHe told me he prefers option 3, and it's consistent with some of the CI checks already skipping /vendor/.\r\n\r\nI've never had to skip `/vendor/` from `gofmt` checks in my experience, because I use a different solution to vendoring. So I looked into this now, and it's not easy.\r\n\r\n- `gofmt` itself takes a path (not import paths), and as soon as you give it a directory, you have no way of stopping it from recursively descending all further directories, including /vendor/.\r\n- `gofmt` can take individual .go files, but then I'd need to write a bash loop that iterates over all directories, but doesn't descend into /vendor/, and calls `gofmt -s` on all `.go` files it finds.\r\n- `go fmt`, a higher level command available in `go` binary, takes import paths, so `go fmt (go list ./... | grep -v /vendor/)` could be done to skip /vendor/. But it's not configurable, and defaults to writing to disk, listing files that were affected, and not actually displaying the diff, which makes it hard to see in failed CI output what the gofmt problem was.\r\n\r\nI don't want to spend time writing that custom loop logic in bash, so the best long term solution I think is to create a small custom Go command that performs the needed logic (skipping vendor directories). (Or find an existing command that does what's needed, if that's faster/easier.) But, I don't have a budget to work on that for this PR, so that leaves me with these 2 options:\r\n\r\n1. Avoid `-s` flag and use plain `gofmt`. It will run on vendored directories, which will make tests pass for now, but might cause a failure in the future if a vendored dependency is added that is not compatible with `gofmt`.\r\n2. Close this PR because I don't have the resources to implement all the work needed to get it to merge-able state.\r\n\r\n@shazow How would you like to proceed?. SGTM, I'll do that.. Updated, tests are passing, PTAL.. ",
    "C0FFEEC0FFEE": "This occurs for me only on chat2.shazow.net, chat.shazow.net works fine.\n\nI'm on Android 6.0.1 with a Nexus 7 and JuiceSSH 2.1.3.\n\nI generated a ECDS 384 bit key pair.\n. > _`\n> ![screenshot_20160803-203109](https://cloud.githubusercontent.com/assets/20687034/17377307/7213e3f0-59b9-11e6-8d6c-2859f3955f50.png)\n> `_\n. I don't see any way to do that.\n\nAlso I tried all possible terminal types.\n\nThe connection will just timeout after something like 30 seconds.\n. On port 2222 it works fine.\n. This occurs for me only on chat2.shazow.net, chat.shazow.net works fine.\n\nI'm on Android 6.0.1 with a Nexus 7 and JuiceSSH 2.1.3.\n\nI generated a ECDS 384 bit key pair.\n. > _`\n> ![screenshot_20160803-203109](https://cloud.githubusercontent.com/assets/20687034/17377307/7213e3f0-59b9-11e6-8d6c-2859f3955f50.png)\n> `_\n. I don't see any way to do that.\n\nAlso I tried all possible terminal types.\n\nThe connection will just timeout after something like 30 seconds.\n. On port 2222 it works fine.\n. ",
    "botto": "Had an issue with Win 10 Putty 0.67 on chat2, but regular chat works find.\n\nAdded event log  \n\n```\n2016-08-04 00:50:02 Looking up host \"chat2.shazow.net\"\n2016-08-04 00:50:02 Connecting to 104.131.112.139 port 22\n2016-08-04 00:50:02 We claim version: SSH-2.0-PuTTY_Release_0.67\n2016-08-04 00:50:02 Server version: SSH-2.0-Go\n2016-08-04 00:50:02 Using SSH protocol version 2\n2016-08-04 00:50:02 Using Diffie-Hellman with standard group \"group14\"\n2016-08-04 00:50:02 Doing Diffie-Hellman key exchange with hash SHA-1\n2016-08-04 00:50:02 Host key fingerprint is:\n2016-08-04 00:50:02 ssh-rsa 2048 ae:26:58:90:9c:07:71:a1:62:27:07:91:f2:25:9c:19\n2016-08-04 00:50:02 Initialised AES-256 SDCTR client->server encryption\n2016-08-04 00:50:02 Initialised HMAC-SHA-256 client->server MAC algorithm\n2016-08-04 00:50:02 Initialised AES-256 SDCTR server->client encryption\n2016-08-04 00:50:02 Initialised HMAC-SHA-256 server->client MAC algorithm\n2016-08-04 00:50:02 Pageant is running. Requesting keys.\n2016-08-04 00:50:02 Pageant has 1 SSH-2 keys\n2016-08-04 00:50:04 Trying Pageant key #0\n2016-08-04 00:50:10 Sending Pageant's response\n2016-08-04 00:50:10 Server unexpectedly closed network connection\n```\n. Hi @shazow Sorry I haven't been back since reporting.\nI still get disconnected when using my key, but without the key, no problems.\nIt's RSA 16384 bit length\n. Tried with a 10240 and that worked.\nNot first time I've pissed of owners of ssh servers :laughing: \n. Had an issue with Win 10 Putty 0.67 on chat2, but regular chat works find.\n\nAdded event log  \n\n```\n2016-08-04 00:50:02 Looking up host \"chat2.shazow.net\"\n2016-08-04 00:50:02 Connecting to 104.131.112.139 port 22\n2016-08-04 00:50:02 We claim version: SSH-2.0-PuTTY_Release_0.67\n2016-08-04 00:50:02 Server version: SSH-2.0-Go\n2016-08-04 00:50:02 Using SSH protocol version 2\n2016-08-04 00:50:02 Using Diffie-Hellman with standard group \"group14\"\n2016-08-04 00:50:02 Doing Diffie-Hellman key exchange with hash SHA-1\n2016-08-04 00:50:02 Host key fingerprint is:\n2016-08-04 00:50:02 ssh-rsa 2048 ae:26:58:90:9c:07:71:a1:62:27:07:91:f2:25:9c:19\n2016-08-04 00:50:02 Initialised AES-256 SDCTR client->server encryption\n2016-08-04 00:50:02 Initialised HMAC-SHA-256 client->server MAC algorithm\n2016-08-04 00:50:02 Initialised AES-256 SDCTR server->client encryption\n2016-08-04 00:50:02 Initialised HMAC-SHA-256 server->client MAC algorithm\n2016-08-04 00:50:02 Pageant is running. Requesting keys.\n2016-08-04 00:50:02 Pageant has 1 SSH-2 keys\n2016-08-04 00:50:04 Trying Pageant key #0\n2016-08-04 00:50:10 Sending Pageant's response\n2016-08-04 00:50:10 Server unexpectedly closed network connection\n```\n. Hi @shazow Sorry I haven't been back since reporting.\nI still get disconnected when using my key, but without the key, no problems.\nIt's RSA 16384 bit length\n. Tried with a 10240 and that worked.\nNot first time I've pissed of owners of ssh servers :laughing: \n. ",
    "ndxf": "I'll try the local release also. but it seems that the problem is resolved now \n. I'll try the local release also. but it seems that the problem is resolved now \n. ",
    "jiegec": "Yes, I followed your advice and it works by `/theme mono`, but I think it would be better to change the dark color.\n. iTerm2 solarized-dark\n. I think chat2 is better because this issue does not really matter -- I can still see them if I select them. Adding a new color scheme might be the right way.\n. Yes, I followed your advice and it works by `/theme mono`, but I think it would be better to change the dark color.\n. iTerm2 solarized-dark\n. I think chat2 is better because this issue does not really matter -- I can still see them if I select them. Adding a new color scheme might be the right way.\n. ",
    "fyears": "Ok, according to https://news.ycombinator.com/item?id=12217830 , the new server is `chat2.shazow.net`. And the fingerprint I get is `ae:26:58:90:9c:07:71:a1:62:27:07:91:f2:25:9c:19`\n. Ok, according to https://news.ycombinator.com/item?id=12217830 , the new server is `chat2.shazow.net`. And the fingerprint I get is `ae:26:58:90:9c:07:71:a1:62:27:07:91:f2:25:9c:19`\n. ",
    "hloeffler": "https://github.com/gliderlabs/ssh\r\nis there now :-)\r\nbut without ratelimit. https://github.com/gliderlabs/ssh\r\nis there now :-)\r\nbut without ratelimit. ",
    "mordof": "As far as I can tell, it's good to go. It's simple enough that it shouldn't have any issues with anything else.\n. @shurcooL ah, lol.. that's because I'm not really a Go dev, i've only worked with it once or twice. At first my code wasn't building/working/doing anything at all, so i made a PR for shazow to help look at - this one. Turns out it was an import issue pointing to his code, not mine. I committed the working code in the same PR not thinking about the title.\n. As far as I can tell, it's good to go. It's simple enough that it shouldn't have any issues with anything else.\n. @shurcooL ah, lol.. that's because I'm not really a Go dev, i've only worked with it once or twice. At first my code wasn't building/working/doing anything at all, so i made a PR for shazow to help look at - this one. Turns out it was an import issue pointing to his code, not mine. I committed the working code in the same PR not thinking about the title.\n. ",
    "sleibrock": "It only comes up when a theme has one color for names. To avoid that I gave the hacker theme two identical colors.\n. Here's the output in full from when a user tries activating a theme with only one color defined.\n\n```\n\u279c  ssh-chat git:(master) \u2717 ./ssh-chat\nListening for connections on [::]:2022\npanic: runtime error: integer divide by zero\n[signal 0x8 code=0x1 addr=0x57e0eb pc=0x57e0eb]\n\ngoroutine 10 [running]:\npanic(0x8c6420, 0xc82000a0f0)\n    /usr/lib/go/src/runtime/panic.go:481 +0x3e6\ngithub.com/shazow/ssh-chat/chat/message.Theme.ColorName(0x965bc8, 0x6, 0x7f6483c21780, 0xc82000b159, 0x7f6483c21780, 0xc82000b15a, 0x7f6483c217b0, 0xc82000b190, 0xc8200c9000, 0xc820254120, ...)\n    /home/steve/work/src/github.com/shazow/ssh-chat/chat/message/theme.go:120 +0xcb\ngithub.com/shazow/ssh-chat.GetPrompt(0xc820254120, 0x0, 0x0)\n    /home/steve/work/src/github.com/shazow/ssh-chat/host.go:23 +0xa7\ngithub.com/shazow/ssh-chat.(*Host).Connect(0xc82014b360, 0xc82024fb00)\n    /home/steve/work/src/github.com/shazow/ssh-chat/host.go:170 +0x1054\ngithub.com/shazow/ssh-chat.(*Host).Connect-fm(0xc82024fb00)\n    /home/steve/work/src/github.com/shazow/ssh-chat/host.go:185 +0x2a\ngithub.com/shazow/ssh-chat/sshd.(*SSHListener).Serve.func1(0xc820170510, 0x7f6483b9d000, 0xc820026070)\n    /home/steve/work/src/github.com/shazow/ssh-chat/sshd/net.go:64 +0x146\ncreated by github.com/shazow/ssh-chat/sshd.(*SSHListener).Serve\n    /home/steve/work/src/github.com/shazow/ssh-chat/sshd/net.go:65 +0x1e7\n```\n. Amended to rename solardark to solarized, here's a preview (ignore the solardark name).\n\n![2016-08-08-130037_263x149_scrot](https://cloud.githubusercontent.com/assets/15330989/17489227/0b6a9cc4-5d6b-11e6-8e84-734982ffe697.png)\n. The error stems from [host.go#L310](https://github.com/shazow/ssh-chat/blob/398cd75c5e9a2ca27e61b25d45c91962d1ccd040/host.go#L310) because it's getting an error when looking for a user to reply back to. Which I'm guessing implies we never set a user to reply to when a `/msg` command is sent to the server.\n\nI just did a search against the code; do we ever use `setReplyTo()` anywhere? The only instance I could find [is where we define setReplyTo() in the code](https://github.com/shazow/ssh-chat/search?utf8=%E2%9C%93&q=setReplyTo). Maybe it's a matter of `/msg` doesn't use `setReplyTo()`?\n. I'm guessing there isn't a sort function before autocomplete picks a name.\n\nEdit: yep. [host.go#L196](https://github.com/shazow/ssh-chat/blob/a9603fba7dc77516ddbf9ea2a447582e41f9d7ae/host.go#L196)\n. I'm not sure if you set a $GOPATH or not, or if you pulled with `go get`.\r\n\r\nHere's me building from scratch\r\n```\r\n\u279c  ~ mkdir -p workspace\r\n\u279c  ~ export GOPATH=$HOME/workspace\r\n\u279c  ~ go get -u github.com/shazow/ssh-chat\r\npackage github.com/shazow/ssh-chat/vendor/github.com/alexcesaro/log: /home/steve/workspace/src/github.com/shazow/ssh-chat/vendor/github.com/alexcesaro/log/.git exists but is not a directory\r\npackage github.com/shazow/ssh-chat/vendor/github.com/dustin/go-humanize: /home/steve/workspace/src/github.com/shazow/ssh-chat/vendor/github.com/dustin/go-humanize/.git exists but is not a directory\r\npackage github.com/shazow/ssh-chat/vendor/github.com/shazow/rateio: /home/steve/workspace/src/github.com/shazow/ssh-chat/vendor/github.com/shazow/rateio/.git exists but is not a directory\r\n\u279c  ~ cd $GOPATH/src/github.com/shazow/ssh-chat \r\n\u279c  ssh-chat git:(master) make\r\ngo get ./...\r\ngo build  ./cmd/ssh-chat\r\n\u279c  ssh-chat git:(master) ./ssh-chat\r\nListening for connections on [::]:2022\r\n^CInterrupt signal detected, shutting down.\r\n\u279c  ssh-chat git:(master) \r\n```\r\nHopefully this helps.. I fixed my logic mistake and added an else branch to do `u.SetReplyTo(nil)`.. Not entirely sure. It builds normally but it times out on receiving output\nfor some reason.\n\nOn Thu, Apr 27, 2017, 9:00 PM Andrey Petrov <notifications@github.com>\nwrote:\n\n> Awesome looks good. Now why is travis upset...\n>\n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/shazow/ssh-chat/pull/230#issuecomment-297879264>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AOnurcl8KX9EtLKlicOumCj2m7OiXFsGks5r0To4gaJpZM4NKwfg>\n> .\n>\n. Also, the test previously worked in 0.01 seconds.\r\n\r\n<img width=\"267\" alt=\"test\" src=\"https://cloud.githubusercontent.com/assets/15330989/25590440/8f0f5260-2e7e-11e7-9a5d-20abd68bb9a1.png\">\r\n\r\nNot sure what caused the test to start failing.. I did it with Go 1.8, but I believe it's still a problem in 1.6 and 1.7, as per the Travis build.\r\n\r\n[See the Travis build here](https://travis-ci.org/shazow/ssh-chat/jobs/231209160#L219). I filed an issue for that in #231.\r\n\r\nEdit: im dumb. The linter says Line 125 on `host.go`, but I think the problem carried over from the batch of commits you added on the refactor branch. Here's the diff from doing `git diff master..theme-stuff -- host.go`\r\n\r\n```diff\r\n-       if h.isOp(term.Conn) {\r\n-               h.Room.Ops.Add(set.Itemize(member.ID(), member))\r\n+       if key := term.Conn.PublicKey(); key != nil {\r\n+               authItem, err := h.auth.ops.Get(newAuthKey(key))\r\n+               if err == nil {\r\n+                       err = h.Room.Ops.Add(set.Rename(authItem, member.ID()))\r\n+               }\r\n+       }\r\n+       if err != nil {\r\n+               logger.Warningf(\"[%s] Failed to op: %s\", term.Conn.RemoteAddr(), err)\r\n        }\r\n-       ratelimit := rateio.NewSimpleLimiter(3, time.Second*3)\r\n\r\n+       ratelimit := rateio.NewSimpleLimiter(3, time.Second*3)\r\n        logger.Debugf(\"[%s] Joined: %s\", term.Conn.RemoteAddr(), user.Name())\r\n```\r\n\r\nIt claims that `err = h.Room.Ops.Add(set.Rename(authItem, member.ID()))` is an ineffective assign. But I'm not entirely certain as to why.\r\n\r\nEdit: changing target branch to master as per previous discussion to develop features from master.. Updated to use a single byte buffer instead of sending two separate messages. I used three spaces to keep it properly indented with the system message arrow. I didn't do the inner check skip just because I thought it would further complicate it a bit.. Closed, will come back to this idea at a later time.. Related to #231. `sshd` and `ssh-chat` should be running on separate ports. `ssh-chat`'s default port is `2022` and it can be changed when launching `ssh-chat` with the `--bind` option (eg. `--bind 0.0.0.0:2022`).\r\n\r\nYou might want to check `netstat --listen` to see which programs are listening on which ports.. In order to port `ssh-chat` to using `go dep`, the solution would require crafting a `Gopkg.toml` file with the packages, changing the Makefile to account for downloading packages through `dep`, and removing any submodules from the Git tracker to avoid extra cloning.\r\n\r\n`dep` puts all dependencies into the local `vendor/` folder, making the Git submodule clones (the ones stored under `$GOPATH/github.com`) unnecessary.\r\n\r\nI tested this by running `dep init`, deleting the `vendor/` folder in the project, deleting all the extra folders under `$GOPATH/github.com` and seeing if the build failed, which it did. Then I ran `dep ensure` to clone the dependencies to `vendor/` and ran the build again, which ran successfully.\r\n\r\nI prefer the dependencies to be listed in a file like with `Gopkg.toml` because it's a nice and easy way of adding/removing deps as need be instead of depending on Git submodules. Granted moving over to `dep` will involve some work with the Makefile and the Travis script still.. Before we merge this in, I'm just gonna double-check things:\r\n\r\n* We want the `Gopkg.lock` file so I should unmodify the `.gitignore` file and include the lock file.\r\n* By deleting the submodules and vendor folder, will this affect the `go get` process of cloning the code? Once it gets cloned it won't have access to the libs like `rateio` so it won't be able to build without having `dep` installed. Is this the correct way to go about this?\r\n* Which other projects use `go dep` successfully / have them built into their build process? I could use them for reference for how to go about this properly.. It only comes up when a theme has one color for names. To avoid that I gave the hacker theme two identical colors.\n. Here's the output in full from when a user tries activating a theme with only one color defined.\n\n```\n\u279c  ssh-chat git:(master) \u2717 ./ssh-chat\nListening for connections on [::]:2022\npanic: runtime error: integer divide by zero\n[signal 0x8 code=0x1 addr=0x57e0eb pc=0x57e0eb]\n\ngoroutine 10 [running]:\npanic(0x8c6420, 0xc82000a0f0)\n    /usr/lib/go/src/runtime/panic.go:481 +0x3e6\ngithub.com/shazow/ssh-chat/chat/message.Theme.ColorName(0x965bc8, 0x6, 0x7f6483c21780, 0xc82000b159, 0x7f6483c21780, 0xc82000b15a, 0x7f6483c217b0, 0xc82000b190, 0xc8200c9000, 0xc820254120, ...)\n    /home/steve/work/src/github.com/shazow/ssh-chat/chat/message/theme.go:120 +0xcb\ngithub.com/shazow/ssh-chat.GetPrompt(0xc820254120, 0x0, 0x0)\n    /home/steve/work/src/github.com/shazow/ssh-chat/host.go:23 +0xa7\ngithub.com/shazow/ssh-chat.(*Host).Connect(0xc82014b360, 0xc82024fb00)\n    /home/steve/work/src/github.com/shazow/ssh-chat/host.go:170 +0x1054\ngithub.com/shazow/ssh-chat.(*Host).Connect-fm(0xc82024fb00)\n    /home/steve/work/src/github.com/shazow/ssh-chat/host.go:185 +0x2a\ngithub.com/shazow/ssh-chat/sshd.(*SSHListener).Serve.func1(0xc820170510, 0x7f6483b9d000, 0xc820026070)\n    /home/steve/work/src/github.com/shazow/ssh-chat/sshd/net.go:64 +0x146\ncreated by github.com/shazow/ssh-chat/sshd.(*SSHListener).Serve\n    /home/steve/work/src/github.com/shazow/ssh-chat/sshd/net.go:65 +0x1e7\n```\n. Amended to rename solardark to solarized, here's a preview (ignore the solardark name).\n\n![2016-08-08-130037_263x149_scrot](https://cloud.githubusercontent.com/assets/15330989/17489227/0b6a9cc4-5d6b-11e6-8e84-734982ffe697.png)\n. The error stems from [host.go#L310](https://github.com/shazow/ssh-chat/blob/398cd75c5e9a2ca27e61b25d45c91962d1ccd040/host.go#L310) because it's getting an error when looking for a user to reply back to. Which I'm guessing implies we never set a user to reply to when a `/msg` command is sent to the server.\n\nI just did a search against the code; do we ever use `setReplyTo()` anywhere? The only instance I could find [is where we define setReplyTo() in the code](https://github.com/shazow/ssh-chat/search?utf8=%E2%9C%93&q=setReplyTo). Maybe it's a matter of `/msg` doesn't use `setReplyTo()`?\n. I'm guessing there isn't a sort function before autocomplete picks a name.\n\nEdit: yep. [host.go#L196](https://github.com/shazow/ssh-chat/blob/a9603fba7dc77516ddbf9ea2a447582e41f9d7ae/host.go#L196)\n. I'm not sure if you set a $GOPATH or not, or if you pulled with `go get`.\r\n\r\nHere's me building from scratch\r\n```\r\n\u279c  ~ mkdir -p workspace\r\n\u279c  ~ export GOPATH=$HOME/workspace\r\n\u279c  ~ go get -u github.com/shazow/ssh-chat\r\npackage github.com/shazow/ssh-chat/vendor/github.com/alexcesaro/log: /home/steve/workspace/src/github.com/shazow/ssh-chat/vendor/github.com/alexcesaro/log/.git exists but is not a directory\r\npackage github.com/shazow/ssh-chat/vendor/github.com/dustin/go-humanize: /home/steve/workspace/src/github.com/shazow/ssh-chat/vendor/github.com/dustin/go-humanize/.git exists but is not a directory\r\npackage github.com/shazow/ssh-chat/vendor/github.com/shazow/rateio: /home/steve/workspace/src/github.com/shazow/ssh-chat/vendor/github.com/shazow/rateio/.git exists but is not a directory\r\n\u279c  ~ cd $GOPATH/src/github.com/shazow/ssh-chat \r\n\u279c  ssh-chat git:(master) make\r\ngo get ./...\r\ngo build  ./cmd/ssh-chat\r\n\u279c  ssh-chat git:(master) ./ssh-chat\r\nListening for connections on [::]:2022\r\n^CInterrupt signal detected, shutting down.\r\n\u279c  ssh-chat git:(master) \r\n```\r\nHopefully this helps.. I fixed my logic mistake and added an else branch to do `u.SetReplyTo(nil)`.. Not entirely sure. It builds normally but it times out on receiving output\nfor some reason.\n\nOn Thu, Apr 27, 2017, 9:00 PM Andrey Petrov <notifications@github.com>\nwrote:\n\n> Awesome looks good. Now why is travis upset...\n>\n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/shazow/ssh-chat/pull/230#issuecomment-297879264>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AOnurcl8KX9EtLKlicOumCj2m7OiXFsGks5r0To4gaJpZM4NKwfg>\n> .\n>\n. Also, the test previously worked in 0.01 seconds.\r\n\r\n<img width=\"267\" alt=\"test\" src=\"https://cloud.githubusercontent.com/assets/15330989/25590440/8f0f5260-2e7e-11e7-9a5d-20abd68bb9a1.png\">\r\n\r\nNot sure what caused the test to start failing.. I did it with Go 1.8, but I believe it's still a problem in 1.6 and 1.7, as per the Travis build.\r\n\r\n[See the Travis build here](https://travis-ci.org/shazow/ssh-chat/jobs/231209160#L219). I filed an issue for that in #231.\r\n\r\nEdit: im dumb. The linter says Line 125 on `host.go`, but I think the problem carried over from the batch of commits you added on the refactor branch. Here's the diff from doing `git diff master..theme-stuff -- host.go`\r\n\r\n```diff\r\n-       if h.isOp(term.Conn) {\r\n-               h.Room.Ops.Add(set.Itemize(member.ID(), member))\r\n+       if key := term.Conn.PublicKey(); key != nil {\r\n+               authItem, err := h.auth.ops.Get(newAuthKey(key))\r\n+               if err == nil {\r\n+                       err = h.Room.Ops.Add(set.Rename(authItem, member.ID()))\r\n+               }\r\n+       }\r\n+       if err != nil {\r\n+               logger.Warningf(\"[%s] Failed to op: %s\", term.Conn.RemoteAddr(), err)\r\n        }\r\n-       ratelimit := rateio.NewSimpleLimiter(3, time.Second*3)\r\n\r\n+       ratelimit := rateio.NewSimpleLimiter(3, time.Second*3)\r\n        logger.Debugf(\"[%s] Joined: %s\", term.Conn.RemoteAddr(), user.Name())\r\n```\r\n\r\nIt claims that `err = h.Room.Ops.Add(set.Rename(authItem, member.ID()))` is an ineffective assign. But I'm not entirely certain as to why.\r\n\r\nEdit: changing target branch to master as per previous discussion to develop features from master.. Updated to use a single byte buffer instead of sending two separate messages. I used three spaces to keep it properly indented with the system message arrow. I didn't do the inner check skip just because I thought it would further complicate it a bit.. Closed, will come back to this idea at a later time.. Related to #231. `sshd` and `ssh-chat` should be running on separate ports. `ssh-chat`'s default port is `2022` and it can be changed when launching `ssh-chat` with the `--bind` option (eg. `--bind 0.0.0.0:2022`).\r\n\r\nYou might want to check `netstat --listen` to see which programs are listening on which ports.. In order to port `ssh-chat` to using `go dep`, the solution would require crafting a `Gopkg.toml` file with the packages, changing the Makefile to account for downloading packages through `dep`, and removing any submodules from the Git tracker to avoid extra cloning.\r\n\r\n`dep` puts all dependencies into the local `vendor/` folder, making the Git submodule clones (the ones stored under `$GOPATH/github.com`) unnecessary.\r\n\r\nI tested this by running `dep init`, deleting the `vendor/` folder in the project, deleting all the extra folders under `$GOPATH/github.com` and seeing if the build failed, which it did. Then I ran `dep ensure` to clone the dependencies to `vendor/` and ran the build again, which ran successfully.\r\n\r\nI prefer the dependencies to be listed in a file like with `Gopkg.toml` because it's a nice and easy way of adding/removing deps as need be instead of depending on Git submodules. Granted moving over to `dep` will involve some work with the Makefile and the Travis script still.. Before we merge this in, I'm just gonna double-check things:\r\n\r\n* We want the `Gopkg.lock` file so I should unmodify the `.gitignore` file and include the lock file.\r\n* By deleting the submodules and vendor folder, will this affect the `go get` process of cloning the code? Once it gets cloned it won't have access to the libs like `rateio` so it won't be able to build without having `dep` installed. Is this the correct way to go about this?\r\n* Which other projects use `go dep` successfully / have them built into their build process? I could use them for reference for how to go about this properly.. ",
    "sahilgoel1610": "is using this [dependency](https://github.com/fvbock/trie) advisable here? Pretty clean APIs.. @shazow What do you suggest here? Coloring the names before calling the `render` would not work. I cannot think of a short work around here?. is using this [dependency](https://github.com/fvbock/trie) advisable here? Pretty clean APIs.. @shazow What do you suggest here? Coloring the names before calling the `render` would not work. I cannot think of a short work around here?. ",
    "mordof-work": "would the coloring match their currently assigned color when they talk?\n. would the coloring match their currently assigned color when they talk?\n. ",
    "zenware": "hm, I think this is a good idea, I'll take a stab at it soon, to try and familiarize myself with Go, and the project. :P. hm, I think this is a good idea, I'll take a stab at it soon, to try and familiarize myself with Go, and the project. :P. ",
    "y0d4a": "hi Shazow,\n\nwell it is latest (last day installed): \n golang                                 2:1.3.3-1     \n. this binary works fine :)\nthank you!\n. hi Shazow,\n\nwell it is latest (last day installed): \n golang                                 2:1.3.3-1     \n. this binary works fine :)\nthank you!\n. ",
    "drwasho": "Ugh, I'm an idiot... yeah working now \ud83d\udc4d \n. Ugh, I'm an idiot... yeah working now \ud83d\udc4d \n. ",
    "rileytg": "should i be using this branch for dev? no concrete plans but starting to use ssh-chat more and might wanna hack on it. im happy to take this further, docs, tests/ci etc. just need some direction. should i be using this branch for dev? no concrete plans but starting to use ssh-chat more and might wanna hack on it. im happy to take this further, docs, tests/ci etc. just need some direction. ",
    "erikpenninga": "I would suggest that a `--noratelimit` flag (or similar) would suffice initially for a private environment. At least that would serve me. ;o)\n. I would suggest that a `--noratelimit` flag (or similar) would suffice initially for a private environment. At least that would serve me. ;o)\n. ",
    "zorchenhimer": "I've used `github.com/howeyc/gopass` on windows without any issue.  The call is slightly different, but works pretty much the same way (doesn't take a prompt string).\n. Sure, although it might take a little while. I don't have the build environment setup on my Windows system.\n. I've used `github.com/howeyc/gopass` on windows without any issue.  The call is slightly different, but works pretty much the same way (doesn't take a prompt string).\n. Sure, although it might take a little while. I don't have the build environment setup on my Windows system.\n. ",
    "haikuginger": "Whoops, this is incorrect. Will need additional work before review.\n. 1. Well, the Room is closer to where the logic is; it's actually on the NameTrie itself. But that wasn't a conscious decision - there's already existing logic in both places; it's just now substantially more in the Room. Note that I haven't removed any of the existing code in the Room; that could play a factor in why it seems like code is being moved there.\n2. That sounds like a BDFL kid of decision, so I can make that change if you want; there'd be a bit of work in updating code that uses the Set methods.\n. I'd definitely appreciate a review from the perspective of \"this is how the implementation falls short of a reference implementation; these are the things that are good but need cultivation; these are the ways in which you comply/don't comply with golang idioms.\". I am closing this PR; I don't have the bandwidth to do the proper implementation right now, and this obviously isn't it. \ud83d\ude04. Whoops, this is incorrect. Will need additional work before review.\n. 1. Well, the Room is closer to where the logic is; it's actually on the NameTrie itself. But that wasn't a conscious decision - there's already existing logic in both places; it's just now substantially more in the Room. Note that I haven't removed any of the existing code in the Room; that could play a factor in why it seems like code is being moved there.\n2. That sounds like a BDFL kid of decision, so I can make that change if you want; there'd be a bit of work in updating code that uses the Set methods.\n. I'd definitely appreciate a review from the perspective of \"this is how the implementation falls short of a reference implementation; these are the things that are good but need cultivation; these are the ways in which you comply/don't comply with golang idioms.\". I am closing this PR; I don't have the bandwidth to do the proper implementation right now, and this obviously isn't it. \ud83d\ude04. ",
    "Plazmaz": "Ah. My sound was muted, sorry.. Ah. My sound was muted, sorry.. ",
    "kr1pt0ph0b14": "Also perhaps, someday support for RSA ssh keys generated by using -o? They're much stronger. \r\n-o:\r\nCauses ssh-keygen to save private keys using the new OpenSSH format rather than the more compatible PEM format. The new format has increased resistance to brute-force password cracking but is not supported by versions of OpenSSH prior to 6.5.. Also perhaps, someday support for RSA ssh keys generated by using -o? They're much stronger. \r\n-o:\r\nCauses ssh-keygen to save private keys using the new OpenSSH format rather than the more compatible PEM format. The new format has increased resistance to brute-force password cracking but is not supported by versions of OpenSSH prior to 6.5.. ",
    "Symbian9": "I currently test ssh-chat throw s2putty. Soon will describe problems.\r\n\r\nCurrently its look like near fully worked, but sometime client got mistakes in chat.. I currently test ssh-chat throw s2putty. Soon will describe problems.\r\n\r\nCurrently its look like near fully worked, but sometime client got mistakes in chat.. ",
    "d33tah": "@shazow write something, press up arrow and see your own previous text getting in the way of typing.. @shazow I'm sorry, I'm no Go developer :<. @shazow write something, press up arrow and see your own previous text getting in the way of typing.. @shazow I'm sorry, I'm no Go developer :<. ",
    "TheFonix": "So im trying with `make build` in the directory with the latest pull in, and im getting \r\n\r\nmake build\r\ngo get ./...\r\nsrc/golang.org/x/crypto/acme/acme.go:40:2: cannot find package \"golang.org/x/net/context\" in any of:\r\n\t/root/go/src/golang.org/x/net/context (from $GOROOT)\r\n\t/home/go/src/golang.org/x/net/context (from $GOPATH)\r\nsrc/golang.org/x/crypto/acme/acme.go:41:2: cannot find package \"golang.org/x/net/context/ctxhttp\" in any of:\r\n\t/root/go/src/golang.org/x/net/context/ctxhttp (from $GOROOT)\r\n\t/home/go/src/golang.org/x/net/context/ctxhttp (from $GOPATH). im using the latest, when i run `go get -u github.com/shazow/ssh-chat` i get \r\n\r\n`Segmentation fault (core dumped)` back . This is returned `go version xgcc (Ubuntu 4.9.3-0ubuntu4) 4.9.3 linux/amd64`. Ok so I've got rid of the gccgo and I've not got go, i run the version command and i now get this\r\n `go version go1.3.3 linux/amd64z`\r\n\r\n That ok? When running \r\n`go get -u github.com/shazow/ssh-chat` \r\n\r\ni get\r\n\r\n `# golang.org/x/crypto/ed25519\r\n/opt/gopkg/src/golang.org/x/crypto/ed25519/ed25519.go:54: undefined: crypto.SignerOptsz`. Ok that should be updated now, `go version go1.8 linux/amd64` is what it returns, when i run \r\n\r\n`go get -u github.com/shazow/ssh-chat`\r\n\r\nI know get:\r\n\r\n`go get -u github.com/shazow/ssh-chat\r\npackage github.com/shazow/ssh-chat/vendor/github.com/alexcesaro/log: /opt/gopkg/src/github.com/shazow/ssh-chat/vendor/github.com/alexcesaro/log/.git exists but is not a directory\r\npackage github.com/shazow/ssh-chat/vendor/github.com/dustin/go-humanize: /opt/gopkg/src/github.com/shazow/ssh-chat/vendor/github.com/dustin/go-humanize/.git exists but is not a directory\r\npackage github.com/shazow/ssh-chat/vendor/github.com/shazow/rateio: /opt/gopkg/src/github.com/shazow/ssh-chat/vendor/github.com/shazow/rateio/.git exists but is not a directory`\r\n\r\n. So i nuked the directory and it re-genned, i then ran `make build` and got this huge output:\r\n\r\nhttps://hastebin.com/ofihenawom.sql\r\n\r\nAnd when trying to run ` go build ./cmd/ssh-chat` i get:\r\n\r\n`go build ./cmd/ssh-chat\r\n_/root/go/cmd/ssh-chat\r\ncmd/ssh-chat/cmd.go:82: cannot use \"github.com/alexcesaro/log/golog\".New(os.Stderr, logLevel) (type *\"github.com/alexcesaro/log/golog\".Logger) as type *\"github.com/shazow/ssh-chat/vendor/github.com/alexcesaro/log/golog\".Logger in argument to sshchat.SetLogger`. They are in one folder, if i try to run `make` when they are not together i get, \r\n\r\n`make\r\ngo get ./...\r\ngo install: no install location for directory /root/ssh-chat-master/ssh-chat-master outside GOPATH\r\n        For more details see: 'go help gopath'\r\ngo install: no install location for directory /root/ssh-chat-master/ssh-chat-master/chat outside GOPATH\r\n        For more details see: 'go help gopath'\r\ngo install: no install location for directory /root/ssh-chat-master/ssh-chat-master/chat/message outside GOPATH\r\n        For more details see: 'go help gopath'\r\ngo install: no install location for directory /root/ssh-chat-master/ssh-chat-master/cmd/ssh-chat outside GOPATH\r\n        For more details see: 'go help gopath'\r\ngo install: no install location for directory /root/ssh-chat-master/ssh-chat-master/set outside GOPATH\r\n        For more details see: 'go help gopath'\r\ngo install: no install location for directory /root/ssh-chat-master/ssh-chat-master/sshd outside GOPATH\r\n        For more details see: 'go help gopath'\r\nmake: *** [deps] Error 1\r\n`. yeah i grabbed a binary release and it worked first time, sorry for wasting your time dude, but thanks for the amazing support! :). So im trying with `make build` in the directory with the latest pull in, and im getting \r\n\r\nmake build\r\ngo get ./...\r\nsrc/golang.org/x/crypto/acme/acme.go:40:2: cannot find package \"golang.org/x/net/context\" in any of:\r\n\t/root/go/src/golang.org/x/net/context (from $GOROOT)\r\n\t/home/go/src/golang.org/x/net/context (from $GOPATH)\r\nsrc/golang.org/x/crypto/acme/acme.go:41:2: cannot find package \"golang.org/x/net/context/ctxhttp\" in any of:\r\n\t/root/go/src/golang.org/x/net/context/ctxhttp (from $GOROOT)\r\n\t/home/go/src/golang.org/x/net/context/ctxhttp (from $GOPATH). im using the latest, when i run `go get -u github.com/shazow/ssh-chat` i get \r\n\r\n`Segmentation fault (core dumped)` back . This is returned `go version xgcc (Ubuntu 4.9.3-0ubuntu4) 4.9.3 linux/amd64`. Ok so I've got rid of the gccgo and I've not got go, i run the version command and i now get this\r\n `go version go1.3.3 linux/amd64z`\r\n\r\n That ok? When running \r\n`go get -u github.com/shazow/ssh-chat` \r\n\r\ni get\r\n\r\n `# golang.org/x/crypto/ed25519\r\n/opt/gopkg/src/golang.org/x/crypto/ed25519/ed25519.go:54: undefined: crypto.SignerOptsz`. Ok that should be updated now, `go version go1.8 linux/amd64` is what it returns, when i run \r\n\r\n`go get -u github.com/shazow/ssh-chat`\r\n\r\nI know get:\r\n\r\n`go get -u github.com/shazow/ssh-chat\r\npackage github.com/shazow/ssh-chat/vendor/github.com/alexcesaro/log: /opt/gopkg/src/github.com/shazow/ssh-chat/vendor/github.com/alexcesaro/log/.git exists but is not a directory\r\npackage github.com/shazow/ssh-chat/vendor/github.com/dustin/go-humanize: /opt/gopkg/src/github.com/shazow/ssh-chat/vendor/github.com/dustin/go-humanize/.git exists but is not a directory\r\npackage github.com/shazow/ssh-chat/vendor/github.com/shazow/rateio: /opt/gopkg/src/github.com/shazow/ssh-chat/vendor/github.com/shazow/rateio/.git exists but is not a directory`\r\n\r\n. So i nuked the directory and it re-genned, i then ran `make build` and got this huge output:\r\n\r\nhttps://hastebin.com/ofihenawom.sql\r\n\r\nAnd when trying to run ` go build ./cmd/ssh-chat` i get:\r\n\r\n`go build ./cmd/ssh-chat\r\n_/root/go/cmd/ssh-chat\r\ncmd/ssh-chat/cmd.go:82: cannot use \"github.com/alexcesaro/log/golog\".New(os.Stderr, logLevel) (type *\"github.com/alexcesaro/log/golog\".Logger) as type *\"github.com/shazow/ssh-chat/vendor/github.com/alexcesaro/log/golog\".Logger in argument to sshchat.SetLogger`. They are in one folder, if i try to run `make` when they are not together i get, \r\n\r\n`make\r\ngo get ./...\r\ngo install: no install location for directory /root/ssh-chat-master/ssh-chat-master outside GOPATH\r\n        For more details see: 'go help gopath'\r\ngo install: no install location for directory /root/ssh-chat-master/ssh-chat-master/chat outside GOPATH\r\n        For more details see: 'go help gopath'\r\ngo install: no install location for directory /root/ssh-chat-master/ssh-chat-master/chat/message outside GOPATH\r\n        For more details see: 'go help gopath'\r\ngo install: no install location for directory /root/ssh-chat-master/ssh-chat-master/cmd/ssh-chat outside GOPATH\r\n        For more details see: 'go help gopath'\r\ngo install: no install location for directory /root/ssh-chat-master/ssh-chat-master/set outside GOPATH\r\n        For more details see: 'go help gopath'\r\ngo install: no install location for directory /root/ssh-chat-master/ssh-chat-master/sshd outside GOPATH\r\n        For more details see: 'go help gopath'\r\nmake: *** [deps] Error 1\r\n`. yeah i grabbed a binary release and it worked first time, sorry for wasting your time dude, but thanks for the amazing support! :). ",
    "rfyiamcool": "+1. +1. ",
    "ograff": "Interestingly enough, this hangs for me on Darwin (OS X)\r\n`go version go1.8.3 darwin/amd64`\r\n```$ go env\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOEXE=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"darwin\"\r\nGOOS=\"darwin\"\r\nGOPATH=\"/Users/ograff/go_path\"\r\nGORACE=\"\"\r\nGOROOT=\"/usr/local/Cellar/go/1.8.3/libexec\"\r\nGOTOOLDIR=\"/usr/local/Cellar/go/1.8.3/libexec/pkg/tool/darwin_amd64\"\r\nGCCGO=\"gccgo\"\r\nCC=\"clang\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/ww/c79qv30x5r7c_qpqz5qr0shm0000gn/T/go-build045279866=/tmp/go-build -gno-record-gcc-switches -fno-common\"\r\nCXX=\"clang++\"\r\nCGO_ENABLED=\"1\"\r\nPKG_CONFIG=\"pkg-config\"\r\nCGO_CFLAGS=\"-g -O2\"\r\nCGO_CPPFLAGS=\"\"\r\nCGO_CXXFLAGS=\"-g -O2\"\r\nCGO_FFLAGS=\"-g -O2\"\r\nCGO_LDFLAGS=\"-g -O2\"```\r\n\r\nI'll mess around and see what I can figure out. Yup, there is an existing issue (referenced in the commit summary). This fixes #234 \r\n\r\nHmm, I ran gofmt, but it seems like my changes still have spaces wile the file uses tabs.. @shazow yup, tested locally. I didn't see anywhere to add an applicable unit test :/. @shazow Definitely happy to help!. Fixes #231 \r\nTo be honest I'm not sure why the signature originally was that it was hanging, that might be an issue in itself, but things are green now!. Looks like we were never feeding channels that were waiting if the SSH connection errored out. Fixed.\r\n\r\nTesting:\r\n\r\n```\r\n23:08:17 \ue0b0 ograff@Olivers-MacBook-Air \ue0b0 ...github.com/shazow/ssh-chat \ue0b0 \ue0a0 master \u2714 \ue0b0\r\n$ git checkout -b fix_hang_but_not_test\r\nSwitched to a new branch 'fix_hang_but_not_test'\r\n\r\n 23:08:27 \ue0b0 ograff@Olivers-MacBook-Air \ue0b0 ...github.com/shazow/ssh-chat \ue0b0 \ue0a0 fix_hang_but_not_test \u2714 \ue0b0\r\n$ git show fix_unit_tests | cat\r\ncommit c073e1f3f0fad434d86ac6f63be99dfc0b3fe535\r\nAuthor: Oliver Graff <oliver.e.graff@gmail.com>\r\nDate:   Tue Jun 13 22:57:32 2017 -0700\r\n\r\n    Fix host_test so it will not hang if the SSH connection fails\r\n\r\ndiff --git a/host_test.go b/host_test.go\r\nindex 334506e..f98724a 100644\r\n--- a/host_test.go\r\n+++ b/host_test.go\r\n@@ -97,6 +97,7 @@ func TestHostNameCollision(t *testing.T) {\r\n \t\t\treturn nil\r\n \t\t})\r\n \t\tif err != nil {\r\n+\t\t\tdone <- struct{}{}\r\n \t\t\tt.Fatal(err)\r\n \t\t}\r\n \t}()\r\n@@ -203,6 +204,7 @@ func TestHostKick(t *testing.T) {\r\n \t\t\treturn nil\r\n \t\t})\r\n \t\tif err != nil {\r\n+\t\t\tconnected <- struct{}{}\r\n \t\t\tclose(connected)\r\n \t\t\tt.Fatal(err)\r\n \t\t}\r\n@@ -218,6 +220,7 @@ func TestHostKick(t *testing.T) {\r\n \t\t\treturn nil\r\n \t\t})\r\n \t\tif err != nil {\r\n+\t\t\tclose(done)\r\n \t\t\tt.Fatal(err)\r\n \t\t}\r\n \t\tclose(done)\r\n\r\n 23:08:34 \ue0b0 ograff@Olivers-MacBook-Air \ue0b0 ...github.com/shazow/ssh-chat \ue0b0 \ue0a0 fix_hang_but_not_test \u2714 \ue0b0\r\n$ git cherry-pick fix_unit_tests\r\n[fix_hang_but_not_test c36c3ff] Fix host_test so it will not hang if the SSH connection fails\r\n Date: Tue Jun 13 22:57:32 2017 -0700\r\n 1 file changed, 3 insertions(+)\r\n\r\n 23:08:41 \ue0b0 ograff@Olivers-MacBook-Air \ue0b0 ...github.com/shazow/ssh-chat \ue0b0 \ue0a0 fix_hang_but_not_test \u2714 \ue0b0\r\n$ go test -v\r\n=== RUN   TestAuthWhitelist\r\n--- PASS: TestAuthWhitelist (0.01s)\r\n=== RUN   TestHostGetPrompt\r\n--- PASS: TestHostGetPrompt (0.00s)\r\n=== RUN   TestHostNameCollision\r\n--- FAIL: TestHostNameCollision (0.01s)\r\n\thost_test.go:101: ssh: must specify HostKeyCallback\r\n\thost_test.go:124: ssh: must specify HostKeyCallback\r\n=== RUN   TestHostWhitelist\r\n--- FAIL: TestHostWhitelist (0.01s)\r\n\thost_test.go:152: ssh: must specify HostKeyCallback\r\n=== RUN   TestHostKick\r\n--- FAIL: TestHostKick (0.01s)\r\n\thost_test.go:224: ssh: must specify HostKeyCallback\r\nFAIL\r\nexit status 1\r\nFAIL\tgithub.com/shazow/ssh-chat\t0.055s\r\n\r\n 23:08:45 \ue0b0 \u2718 \ue0b0 ograff@Olivers-MacBook-Air \ue0b0 ...github.com/shazow/ssh-chat \ue0b0 \ue0a0 fix_hang_but_not_test \u2714 \ue0b0\r\n$```. My pleasure!. Interestingly enough, this hangs for me on Darwin (OS X)\r\n`go version go1.8.3 darwin/amd64`\r\n```$ go env\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOEXE=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"darwin\"\r\nGOOS=\"darwin\"\r\nGOPATH=\"/Users/ograff/go_path\"\r\nGORACE=\"\"\r\nGOROOT=\"/usr/local/Cellar/go/1.8.3/libexec\"\r\nGOTOOLDIR=\"/usr/local/Cellar/go/1.8.3/libexec/pkg/tool/darwin_amd64\"\r\nGCCGO=\"gccgo\"\r\nCC=\"clang\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/ww/c79qv30x5r7c_qpqz5qr0shm0000gn/T/go-build045279866=/tmp/go-build -gno-record-gcc-switches -fno-common\"\r\nCXX=\"clang++\"\r\nCGO_ENABLED=\"1\"\r\nPKG_CONFIG=\"pkg-config\"\r\nCGO_CFLAGS=\"-g -O2\"\r\nCGO_CPPFLAGS=\"\"\r\nCGO_CXXFLAGS=\"-g -O2\"\r\nCGO_FFLAGS=\"-g -O2\"\r\nCGO_LDFLAGS=\"-g -O2\"```\r\n\r\nI'll mess around and see what I can figure out. Yup, there is an existing issue (referenced in the commit summary). This fixes #234 \r\n\r\nHmm, I ran gofmt, but it seems like my changes still have spaces wile the file uses tabs.. @shazow yup, tested locally. I didn't see anywhere to add an applicable unit test :/. @shazow Definitely happy to help!. Fixes #231 \r\nTo be honest I'm not sure why the signature originally was that it was hanging, that might be an issue in itself, but things are green now!. Looks like we were never feeding channels that were waiting if the SSH connection errored out. Fixed.\r\n\r\nTesting:\r\n\r\n```\r\n23:08:17 \ue0b0 ograff@Olivers-MacBook-Air \ue0b0 ...github.com/shazow/ssh-chat \ue0b0 \ue0a0 master \u2714 \ue0b0\r\n$ git checkout -b fix_hang_but_not_test\r\nSwitched to a new branch 'fix_hang_but_not_test'\r\n\r\n 23:08:27 \ue0b0 ograff@Olivers-MacBook-Air \ue0b0 ...github.com/shazow/ssh-chat \ue0b0 \ue0a0 fix_hang_but_not_test \u2714 \ue0b0\r\n$ git show fix_unit_tests | cat\r\ncommit c073e1f3f0fad434d86ac6f63be99dfc0b3fe535\r\nAuthor: Oliver Graff <oliver.e.graff@gmail.com>\r\nDate:   Tue Jun 13 22:57:32 2017 -0700\r\n\r\n    Fix host_test so it will not hang if the SSH connection fails\r\n\r\ndiff --git a/host_test.go b/host_test.go\r\nindex 334506e..f98724a 100644\r\n--- a/host_test.go\r\n+++ b/host_test.go\r\n@@ -97,6 +97,7 @@ func TestHostNameCollision(t *testing.T) {\r\n \t\t\treturn nil\r\n \t\t})\r\n \t\tif err != nil {\r\n+\t\t\tdone <- struct{}{}\r\n \t\t\tt.Fatal(err)\r\n \t\t}\r\n \t}()\r\n@@ -203,6 +204,7 @@ func TestHostKick(t *testing.T) {\r\n \t\t\treturn nil\r\n \t\t})\r\n \t\tif err != nil {\r\n+\t\t\tconnected <- struct{}{}\r\n \t\t\tclose(connected)\r\n \t\t\tt.Fatal(err)\r\n \t\t}\r\n@@ -218,6 +220,7 @@ func TestHostKick(t *testing.T) {\r\n \t\t\treturn nil\r\n \t\t})\r\n \t\tif err != nil {\r\n+\t\t\tclose(done)\r\n \t\t\tt.Fatal(err)\r\n \t\t}\r\n \t\tclose(done)\r\n\r\n 23:08:34 \ue0b0 ograff@Olivers-MacBook-Air \ue0b0 ...github.com/shazow/ssh-chat \ue0b0 \ue0a0 fix_hang_but_not_test \u2714 \ue0b0\r\n$ git cherry-pick fix_unit_tests\r\n[fix_hang_but_not_test c36c3ff] Fix host_test so it will not hang if the SSH connection fails\r\n Date: Tue Jun 13 22:57:32 2017 -0700\r\n 1 file changed, 3 insertions(+)\r\n\r\n 23:08:41 \ue0b0 ograff@Olivers-MacBook-Air \ue0b0 ...github.com/shazow/ssh-chat \ue0b0 \ue0a0 fix_hang_but_not_test \u2714 \ue0b0\r\n$ go test -v\r\n=== RUN   TestAuthWhitelist\r\n--- PASS: TestAuthWhitelist (0.01s)\r\n=== RUN   TestHostGetPrompt\r\n--- PASS: TestHostGetPrompt (0.00s)\r\n=== RUN   TestHostNameCollision\r\n--- FAIL: TestHostNameCollision (0.01s)\r\n\thost_test.go:101: ssh: must specify HostKeyCallback\r\n\thost_test.go:124: ssh: must specify HostKeyCallback\r\n=== RUN   TestHostWhitelist\r\n--- FAIL: TestHostWhitelist (0.01s)\r\n\thost_test.go:152: ssh: must specify HostKeyCallback\r\n=== RUN   TestHostKick\r\n--- FAIL: TestHostKick (0.01s)\r\n\thost_test.go:224: ssh: must specify HostKeyCallback\r\nFAIL\r\nexit status 1\r\nFAIL\tgithub.com/shazow/ssh-chat\t0.055s\r\n\r\n 23:08:45 \ue0b0 \u2718 \ue0b0 ograff@Olivers-MacBook-Air \ue0b0 ...github.com/shazow/ssh-chat \ue0b0 \ue0a0 fix_hang_but_not_test \u2714 \ue0b0\r\n$```. My pleasure!. ",
    "JimmyByte": "No problem :). No problem :). ",
    "za267": "Ah, good to know - I'll open a feature next time, possibly in the near future :)   And I'll take a look at the function you point to on Line 168 of user.go.  \r\n\r\nAs you mention, I did notice that the timestamps were not quite accurate... meaning that the timestamp is generated during rendering instead of when it is actually sent.  I was having a conundrum with that bit.  Initially I wanted to see if it was possible to have a user option that could enable/disable timestamps.  If the user entered /ts for example, it would trigger a boolean. Anyway it only partially worked because the prompts are sent in a different manner than the messages, and I absolutely needed both of these to have it.\r\n\r\nAh well... back to the drawing board.  Cheers!. I didn't notice it in the code... Do you think any of this code can be reused to add a timestamp to the prompts?. I'll test with the function you mention.  I'm just wondering how I might add timestamps to the \"prompt\" line.  EG: own messages.. I'm going to open up a proper feature request... . Here is a screenshot of the change I propose.  The timestamps would be enabled or disabled globally on the host as a command line option.  For example:  --timestamps\r\n\r\n![ssh-chat-timestamp](https://user-images.githubusercontent.com/2365202/29781521-70c00cac-8be7-11e7-80db-58f681a150ba.png)\r\n. I'm going to try a shot at the third option.... Ah, good to know - I'll open a feature next time, possibly in the near future :)   And I'll take a look at the function you point to on Line 168 of user.go.  \r\n\r\nAs you mention, I did notice that the timestamps were not quite accurate... meaning that the timestamp is generated during rendering instead of when it is actually sent.  I was having a conundrum with that bit.  Initially I wanted to see if it was possible to have a user option that could enable/disable timestamps.  If the user entered /ts for example, it would trigger a boolean. Anyway it only partially worked because the prompts are sent in a different manner than the messages, and I absolutely needed both of these to have it.\r\n\r\nAh well... back to the drawing board.  Cheers!. I didn't notice it in the code... Do you think any of this code can be reused to add a timestamp to the prompts?. I'll test with the function you mention.  I'm just wondering how I might add timestamps to the \"prompt\" line.  EG: own messages.. I'm going to open up a proper feature request... . Here is a screenshot of the change I propose.  The timestamps would be enabled or disabled globally on the host as a command line option.  For example:  --timestamps\r\n\r\n![ssh-chat-timestamp](https://user-images.githubusercontent.com/2365202/29781521-70c00cac-8be7-11e7-80db-58f681a150ba.png)\r\n. I'm going to try a shot at the third option.... ",
    "MaddSauer": "+1 for timestamp per default\r\n. +1 for timestamp per default\r\n. ",
    "Atheatos": "I currently have a combination of options 1 and 2 implemented in a local fork.\r\n\r\n> Optional: Also change the user Prompt every minute to keep self-sent messages timestamped. Would need to rewrite where the prompt is set which might be a fair bit of work.\r\n\r\nI had to modify `./vendor/golang.org/x/crypto/ssh/terminal/terminal.go` to export `clearAndRepaintLinePlusNPrevious` to make this work. The prompt can be updated without this function, but the update will not be visible on the client side. For example, if one begins typing at 15:00 and then hits enter at 15:01, the message would be still be stamped with 15:00. Since it's updated on the server side, however, it appears correctly as 15:01 to all other users. Unless there is another way to update the client prompt, an implementation of Option 2 is probably not reasonable for the main repo.. After commenting, I decided to take another look and actually discovered an alternative. Calling `term.Write` will cause the prompt to update on the client side. I now have it implemented this way in my local fork. \r\n\r\nI got a bit of tunnel vision after finding that `clearAndRepaintLinePlusNPrevious` suited my needs, and did not look too deeply into its implementation. The function needed to send information back to the client is `t.c.Write` in golang's `terminal.go`, which is indirectly accessible from `SetSize`, `Write`, and `ReadLine`.\r\n\r\nEdit: The hacky implementation is now available at https://github.com/Atheatos/ssh-chat/tree/timestamps. . I currently have a combination of options 1 and 2 implemented in a local fork.\r\n\r\n> Optional: Also change the user Prompt every minute to keep self-sent messages timestamped. Would need to rewrite where the prompt is set which might be a fair bit of work.\r\n\r\nI had to modify `./vendor/golang.org/x/crypto/ssh/terminal/terminal.go` to export `clearAndRepaintLinePlusNPrevious` to make this work. The prompt can be updated without this function, but the update will not be visible on the client side. For example, if one begins typing at 15:00 and then hits enter at 15:01, the message would be still be stamped with 15:00. Since it's updated on the server side, however, it appears correctly as 15:01 to all other users. Unless there is another way to update the client prompt, an implementation of Option 2 is probably not reasonable for the main repo.. After commenting, I decided to take another look and actually discovered an alternative. Calling `term.Write` will cause the prompt to update on the client side. I now have it implemented this way in my local fork. \r\n\r\nI got a bit of tunnel vision after finding that `clearAndRepaintLinePlusNPrevious` suited my needs, and did not look too deeply into its implementation. The function needed to send information back to the client is `t.c.Write` in golang's `terminal.go`, which is indirectly accessible from `SetSize`, `Write`, and `ReadLine`.\r\n\r\nEdit: The hacky implementation is now available at https://github.com/Atheatos/ssh-chat/tree/timestamps. . "
}