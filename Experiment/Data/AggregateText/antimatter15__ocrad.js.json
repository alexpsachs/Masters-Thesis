{
    "tedpennings": "Looks like http://antimatter15.github.io/ocrad.js/demo.html has that?\n. Looks like http://antimatter15.github.io/ocrad.js/demo.html has that?\n. ",
    "demohi": "thanks @tedpennings \n. thanks @tedpennings \n. ",
    "antimatter15": "I've added some simple examples as well https://github.com/antimatter15/ocrad.js/tree/master/examples\n. There are no dependencies\nOn Mar 19, 2014 10:15 PM, \"Cassidy Williams\" notifications@github.com\nwrote:\n\n> Do you need to only include ocrad.js, or are there other dependencies?\n> \n> ## \n> \n> Reply to this email directly or view it on GitHubhttps://github.com/antimatter15/ocrad.js/issues/2#issuecomment-38129141\n> .\n. I just added one here: https://github.com/antimatter15/ocrad.js/blob/master/examples/locations.html\n. Ocrad has a simple letter segmentation algorithm so an image like that\nwould probably involve some preprocessing.\nOn Jan 14, 2014 3:14 AM, \"Josep\" notifications@github.com wrote:\n\n> Like this\n> .\n> . .\n> . .\n> . .\n> .\n> .. .\n> . '\n> .\n> .. .\n> .\n> .\n> .\n> .. .\n> \n> | - . . - - . . - !\n> .\n> .. .\n> . .\n> .\n> .\n> .\n> .` .\n> .\n> .\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/antimatter15/ocrad.js/issues/3#issuecomment-32245758\n> .\n. To read something like that you could for instance downscale the image or\napply a blur so that the dots appear connected.\n\nIt is possible to get ocrad to spit out what it thinks a letter may be and\nthe candidates and where each letter is found. However it is not terribly\nuseful or accurate in my experience.\nOn Jan 14, 2014 1:12 PM, \"Josep\" notifications@github.com wrote:\n\n> \u00bfNosotros podemos visualizar el preproceso?\n> Los vectores previos a la fuente de texto mostrada\n> \n> 2014/1/14 Kevin Kwok notifications@github.com\n> \n> > Ocrad has a simple letter segmentation algorithm so an image like that\n> > would probably involve some preprocessing.\n> > On Jan 14, 2014 3:14 AM, \"Josep\" notifications@github.com wrote:\n> > \n> > > Like this\n> > > .\n> > > . .\n> > > . .\n> > > . .\n> > > .\n> > > .. .\n> > > . '\n> > > .\n> > > .. .\n> > > .\n> > > .\n> > > .\n> > > .. .\n> > > \n> > > | - . . - - . . - !\n> > > .\n> > > .. .\n> > > . .\n> > > .\n> > > .\n> > > .\n> > > .` .\n> > > .\n> > > .\n> > > \n> > > \u2014\n> > > Reply to this email directly or view it on GitHub<\n> > > https://github.com/antimatter15/ocrad.js/issues/3#issuecomment-32245758>\n> > > \n> > > .\n> > \n> > \u2014\n> > Reply to this email directly or view it on GitHub<\n> > https://github.com/antimatter15/ocrad.js/issues/3#issuecomment-32245857>\n> > .\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/antimatter15/ocrad.js/issues/3#issuecomment-32290693\n> .\n. Ocrad and gocr are both GPL so that's how any derivative has to be\nlicensed. I'll get around to add the files eventually.\n\nIts the sheer quantity of js that needs to be loaded into memory and that's\nnot something you can address with using local storage, and if you can use\nnode, then you have access to a server and can probably just install\ntesseract.\nOn Feb 5, 2014 7:50 PM, \"Brett Zamir\" notifications@github.com wrote:\n\n> Also, if I can ask, would it be a lot of work to make Tesseract available\n> to JavaScript, or were you just afraid of the file size? If it is just the\n> file size, I would think that localStorage (or Node.js usage) could\n> mitigate this problem.\n> \n> ## \n> \n> Reply to this email directly or view it on GitHubhttps://github.com/antimatter15/ocrad.js/issues/4#issuecomment-34280823\n> .\n. I would just filter out the recognized letters that aren't numbers.\n. You could take the output and then pass it through a regex `.replace(/[^\\d]/g, '')\n. I've updated it to Ocrad 0.24 and built the javascript bindings for applying filters and other things. Look at `examples/browser/numbers.html` for how to restrict it to numeric recognition.\n. I think in general ocrad works best with sans serif fonts, I don't know\nwhat's the best though.\nOn Mar 10, 2014 12:06 PM, \"JoeCoderGuy\" notifications@github.com wrote:\n\n> antimatter15,\n> \n> Thank you so much for this lib! It is amazing, fast, and easy!\n> \n> I'm currently implementing your library to read Base64 strings that would\n> be impractical for a user to manually input.\n> \n> Which font has the highest degree of accuracy & precision for reading\n> Base64 strings?\n> \n> Thank you so much in advance!\n> \n> ## \n> \n> Reply to this email directly or view it on GitHubhttps://github.com/antimatter15/ocrad.js/issues/6\n> .\n. Is still an issue?\n. I think building a font-specific OCR system would be really useful, but\nit's a bit outside of what Ocrad.js is meant to do. While working on\nNaptha, I've played with building my own text recognition system which was\ndependent on knowledge of the font a priori (another interesting problem to\nsolve is to figure out what font some text is written in before recognizing\nits letters, which serves as the basis of an interesting chicken-and-egg\nproblem).\n\nI'd really love to see something like this exist, and I'm not sure I'll\nhave the time to make something like this (and I'm not convinced I know\nenough about OCR to do it well). But I too would love to see something like\nthis exist.\n\nOn Sat, May 3, 2014 at 5:33 AM, adam80 notifications@github.com wrote:\n\n> THis is a great tool and I have been playing around with it for the last\n> couple of days. Is there anyway to use an specific font for the basis of\n> OCR, say Calibri? This means that if the user know what the base font of\n> the text they are scanning is there would be a higher chance of conversion?\n> That is what I am hoping for.\n> \n> Please let me know of there is a way to do this if you can.\n> \n> Thanks!\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/antimatter15/ocrad.js/issues/8\n> .\n. https://www.npmjs.org/package/ocrad.js\n. I don't think it's possible.\nOn May 28, 2014 6:59 AM, \"Frank Roth\" notifications@github.com wrote:\n\n> Amazing project!\n> \n> I have problems with the recognition of the @. Is that even possible?\n> \n> Here is an example image: http://jlanchat.mynotiz.de/author.gif\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/antimatter15/ocrad.js/issues/10\n> .\n. I'm currently working on a Convnet.JS based OCR library. It doesn't work yet, but it'll be able to recognize @ signs. https://github.com/naptha/ocracy\n. look into\nhttps://github.com/antimatter15/ocrad.js/blob/master/examples/locations.html\n\nOn Wed, Jun 11, 2014 at 11:57 AM, adam80 notifications@github.com wrote:\n\n> Is it possible to extract the more than 1 match from the results file from\n> OCRAD for each character? Can you please show an example of this? It seems\n> to only return one result however OCRAD refers to an array of matches with\n> confidence levels??\n> \n> Any help on this would be much appreciated. Thanks!\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/antimatter15/ocrad.js/issues/11.\n. Have you tried to binarize the image first? I just opened it up in the mac photo viewer and blew up the contrast so that it was black and white and fed it in, getting a substantially better result:\n\n\u00a0\n\n\u2014\nSent from Mailbox\n\nOn Wed, Sep 17, 2014 at 5:22 AM, konycert notifications@github.com\nwrote:\n\n> Dear antimatter15,\n>   when scanning numbers, such as the following image\n> http://lancelotlam.com/numbertest/numbers.png\n>  ocrad.js  only detect \n> ___ - ______'**'**'r'\n> \n> ---\n> \n> **_-_________**_\n> _ ___7 __' __o,__o,7o,\n> __'T-| __T__T__T_O,\n> . E_ _ _ _ _\n> - **_-_**_-____-______-____\n> \n> most of the numbers were scanned as _\n> i have found the following enums in common.cc \n> const char \\* const charset_name[charsets] =\n>   { \"ascii\", \"iso-8859-9\", \"iso-8859-15\" };\n> and \n> const F_entry F_table[] =\n>   {\n>   { \"none\",         Filter::none },\n>   { \"letters\",      Filter::letters },\n>   { \"letters_only\", Filter::letters_only },\n>   { \"numbers\",      Filter::numbers },\n>   { \"numbers_only\", Filter::numbers_only },\n>   { 0, Filter::none }\n>   };\n> but how to apply that on javascript side?\n> \n> ## Thanks and regards\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/antimatter15/ocrad.js/issues/13\n. I've updated it to Ocrad 0.24 and built the javascript bindings for applying filters and other things. Look at `examples/browser/numbers.html` for how to restrict it to numeric recognition.\n. It only supports latin characters.\n. Yeah, Ocrad doesn't support anything other than the basic latin character set. However, I'm currently working on a port of Tesseract (I'm figuring out how to make it smaller and faster right now)\u2014\u00a0and it should be possible to get Chinese to work with that. \n. It'll be launching within a week, keep tuned.\n. check out http://tesseract.projectnaptha.com/\n. Yeah recognition accuracy isn't super fantastically great, this is just how it works.\n. Yeah, we're working on tesseract.js (see tesseract.projectnaptha.com) which\nsupports multiple languages\n\nOn Tue, Dec 8, 2015 at 2:53 PM, benag notifications@github.com wrote:\n\n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/antimatter15/ocrad.js/issues/26.\n. I've added some simple examples as well https://github.com/antimatter15/ocrad.js/tree/master/examples\n. There are no dependencies\nOn Mar 19, 2014 10:15 PM, \"Cassidy Williams\" notifications@github.com\nwrote:\n\n> Do you need to only include ocrad.js, or are there other dependencies?\n> \n> ## \n> \n> Reply to this email directly or view it on GitHubhttps://github.com/antimatter15/ocrad.js/issues/2#issuecomment-38129141\n> .\n. I just added one here: https://github.com/antimatter15/ocrad.js/blob/master/examples/locations.html\n. Ocrad has a simple letter segmentation algorithm so an image like that\nwould probably involve some preprocessing.\nOn Jan 14, 2014 3:14 AM, \"Josep\" notifications@github.com wrote:\n\n> Like this\n> .\n> . .\n> . .\n> . .\n> .\n> .. .\n> . '\n> .\n> .. .\n> .\n> .\n> .\n> .. .\n> \n> | - . . - - . . - !\n> .\n> .. .\n> . .\n> .\n> .\n> .\n> .` .\n> .\n> .\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/antimatter15/ocrad.js/issues/3#issuecomment-32245758\n> .\n. To read something like that you could for instance downscale the image or\napply a blur so that the dots appear connected.\n\nIt is possible to get ocrad to spit out what it thinks a letter may be and\nthe candidates and where each letter is found. However it is not terribly\nuseful or accurate in my experience.\nOn Jan 14, 2014 1:12 PM, \"Josep\" notifications@github.com wrote:\n\n> \u00bfNosotros podemos visualizar el preproceso?\n> Los vectores previos a la fuente de texto mostrada\n> \n> 2014/1/14 Kevin Kwok notifications@github.com\n> \n> > Ocrad has a simple letter segmentation algorithm so an image like that\n> > would probably involve some preprocessing.\n> > On Jan 14, 2014 3:14 AM, \"Josep\" notifications@github.com wrote:\n> > \n> > > Like this\n> > > .\n> > > . .\n> > > . .\n> > > . .\n> > > .\n> > > .. .\n> > > . '\n> > > .\n> > > .. .\n> > > .\n> > > .\n> > > .\n> > > .. .\n> > > \n> > > | - . . - - . . - !\n> > > .\n> > > .. .\n> > > . .\n> > > .\n> > > .\n> > > .\n> > > .` .\n> > > .\n> > > .\n> > > \n> > > \u2014\n> > > Reply to this email directly or view it on GitHub<\n> > > https://github.com/antimatter15/ocrad.js/issues/3#issuecomment-32245758>\n> > > \n> > > .\n> > \n> > \u2014\n> > Reply to this email directly or view it on GitHub<\n> > https://github.com/antimatter15/ocrad.js/issues/3#issuecomment-32245857>\n> > .\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/antimatter15/ocrad.js/issues/3#issuecomment-32290693\n> .\n. Ocrad and gocr are both GPL so that's how any derivative has to be\nlicensed. I'll get around to add the files eventually.\n\nIts the sheer quantity of js that needs to be loaded into memory and that's\nnot something you can address with using local storage, and if you can use\nnode, then you have access to a server and can probably just install\ntesseract.\nOn Feb 5, 2014 7:50 PM, \"Brett Zamir\" notifications@github.com wrote:\n\n> Also, if I can ask, would it be a lot of work to make Tesseract available\n> to JavaScript, or were you just afraid of the file size? If it is just the\n> file size, I would think that localStorage (or Node.js usage) could\n> mitigate this problem.\n> \n> ## \n> \n> Reply to this email directly or view it on GitHubhttps://github.com/antimatter15/ocrad.js/issues/4#issuecomment-34280823\n> .\n. I would just filter out the recognized letters that aren't numbers.\n. You could take the output and then pass it through a regex `.replace(/[^\\d]/g, '')\n. I've updated it to Ocrad 0.24 and built the javascript bindings for applying filters and other things. Look at `examples/browser/numbers.html` for how to restrict it to numeric recognition.\n. I think in general ocrad works best with sans serif fonts, I don't know\nwhat's the best though.\nOn Mar 10, 2014 12:06 PM, \"JoeCoderGuy\" notifications@github.com wrote:\n\n> antimatter15,\n> \n> Thank you so much for this lib! It is amazing, fast, and easy!\n> \n> I'm currently implementing your library to read Base64 strings that would\n> be impractical for a user to manually input.\n> \n> Which font has the highest degree of accuracy & precision for reading\n> Base64 strings?\n> \n> Thank you so much in advance!\n> \n> ## \n> \n> Reply to this email directly or view it on GitHubhttps://github.com/antimatter15/ocrad.js/issues/6\n> .\n. Is still an issue?\n. I think building a font-specific OCR system would be really useful, but\nit's a bit outside of what Ocrad.js is meant to do. While working on\nNaptha, I've played with building my own text recognition system which was\ndependent on knowledge of the font a priori (another interesting problem to\nsolve is to figure out what font some text is written in before recognizing\nits letters, which serves as the basis of an interesting chicken-and-egg\nproblem).\n\nI'd really love to see something like this exist, and I'm not sure I'll\nhave the time to make something like this (and I'm not convinced I know\nenough about OCR to do it well). But I too would love to see something like\nthis exist.\n\nOn Sat, May 3, 2014 at 5:33 AM, adam80 notifications@github.com wrote:\n\n> THis is a great tool and I have been playing around with it for the last\n> couple of days. Is there anyway to use an specific font for the basis of\n> OCR, say Calibri? This means that if the user know what the base font of\n> the text they are scanning is there would be a higher chance of conversion?\n> That is what I am hoping for.\n> \n> Please let me know of there is a way to do this if you can.\n> \n> Thanks!\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/antimatter15/ocrad.js/issues/8\n> .\n. https://www.npmjs.org/package/ocrad.js\n. I don't think it's possible.\nOn May 28, 2014 6:59 AM, \"Frank Roth\" notifications@github.com wrote:\n\n> Amazing project!\n> \n> I have problems with the recognition of the @. Is that even possible?\n> \n> Here is an example image: http://jlanchat.mynotiz.de/author.gif\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/antimatter15/ocrad.js/issues/10\n> .\n. I'm currently working on a Convnet.JS based OCR library. It doesn't work yet, but it'll be able to recognize @ signs. https://github.com/naptha/ocracy\n. look into\nhttps://github.com/antimatter15/ocrad.js/blob/master/examples/locations.html\n\nOn Wed, Jun 11, 2014 at 11:57 AM, adam80 notifications@github.com wrote:\n\n> Is it possible to extract the more than 1 match from the results file from\n> OCRAD for each character? Can you please show an example of this? It seems\n> to only return one result however OCRAD refers to an array of matches with\n> confidence levels??\n> \n> Any help on this would be much appreciated. Thanks!\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/antimatter15/ocrad.js/issues/11.\n. Have you tried to binarize the image first? I just opened it up in the mac photo viewer and blew up the contrast so that it was black and white and fed it in, getting a substantially better result:\n\n\u00a0\n\n\u2014\nSent from Mailbox\n\nOn Wed, Sep 17, 2014 at 5:22 AM, konycert notifications@github.com\nwrote:\n\n> Dear antimatter15,\n>   when scanning numbers, such as the following image\n> http://lancelotlam.com/numbertest/numbers.png\n>  ocrad.js  only detect \n> ___ - ______'**'**'r'\n> \n> ---\n> \n> **_-_________**_\n> _ ___7 __' __o,__o,7o,\n> __'T-| __T__T__T_O,\n> . E_ _ _ _ _\n> - **_-_**_-____-______-____\n> \n> most of the numbers were scanned as _\n> i have found the following enums in common.cc \n> const char \\* const charset_name[charsets] =\n>   { \"ascii\", \"iso-8859-9\", \"iso-8859-15\" };\n> and \n> const F_entry F_table[] =\n>   {\n>   { \"none\",         Filter::none },\n>   { \"letters\",      Filter::letters },\n>   { \"letters_only\", Filter::letters_only },\n>   { \"numbers\",      Filter::numbers },\n>   { \"numbers_only\", Filter::numbers_only },\n>   { 0, Filter::none }\n>   };\n> but how to apply that on javascript side?\n> \n> ## Thanks and regards\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/antimatter15/ocrad.js/issues/13\n. I've updated it to Ocrad 0.24 and built the javascript bindings for applying filters and other things. Look at `examples/browser/numbers.html` for how to restrict it to numeric recognition.\n. It only supports latin characters.\n. Yeah, Ocrad doesn't support anything other than the basic latin character set. However, I'm currently working on a port of Tesseract (I'm figuring out how to make it smaller and faster right now)\u2014\u00a0and it should be possible to get Chinese to work with that. \n. It'll be launching within a week, keep tuned.\n. check out http://tesseract.projectnaptha.com/\n. Yeah recognition accuracy isn't super fantastically great, this is just how it works.\n. Yeah, we're working on tesseract.js (see tesseract.projectnaptha.com) which\nsupports multiple languages\n\nOn Tue, Dec 8, 2015 at 2:53 PM, benag notifications@github.com wrote:\n\n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/antimatter15/ocrad.js/issues/26.\n. ",
    "cassidoo": "Do you need to only include ocrad.js, or are there other dependencies?\n. Do you need to only include ocrad.js, or are there other dependencies?\n. ",
    "bartels76": "Are there any examples of getting the results of the OCR scan, such as the X, Y location, width, height, or confidence levels, etc?\n. Thank You!  This is exactly what I was looking for.\n. Are there any examples of getting the results of the OCR scan, such as the X, Y location, width, height, or confidence levels, etc?\n. Thank You!  This is exactly what I was looking for.\n. ",
    "josepssv": "Like this\n.\n. .\n. .\n. .\n.\n.. .\n. '\n.\n.. .\n.\n.\n.\n.. .\n\n| - . . - - . . - !\n.\n.. .\n. .\n.\n.\n.\n.` .\n.\n.\n. \u00bfNosotros podemos visualizar el preproceso?\nLos vectores previos a la fuente de texto mostrada\n\n2014/1/14 Kevin Kwok notifications@github.com\n\n> Ocrad has a simple letter segmentation algorithm so an image like that\n> would probably involve some preprocessing.\n> On Jan 14, 2014 3:14 AM, \"Josep\" notifications@github.com wrote:\n> \n> > Like this\n> > .\n> > . .\n> > . .\n> > . .\n> > .\n> > .. .\n> > . '\n> > .\n> > .. .\n> > .\n> > .\n> > .\n> > .. .\n> > \n> > | - . . - - . . - !\n> > .\n> > .. .\n> > . .\n> > .\n> > .\n> > .\n> > .` .\n> > .\n> > .\n> > \n> > \u2014\n> > Reply to this email directly or view it on GitHub<\n> > https://github.com/antimatter15/ocrad.js/issues/3#issuecomment-32245758>\n> > .\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/antimatter15/ocrad.js/issues/3#issuecomment-32245857\n> .\n. Quiz\u00e1 est\u00e9 perdido...\n\u00bfAcaso Ocrad no vectoriza?\nTrabaja con patrones de pixel!!\nYa!. Una letra girada un \u00e1ngulo no la leer\u00e1 correctamente!!\nr +180\u00ba = 7 ?  http://es.letrag.com/caracteres/279.png\n\n2014/1/14 Kevin Kwok notifications@github.com\n\n> To read something like that you could for instance downscale the image or\n> apply a blur so that the dots appear connected.\n> \n> It is possible to get ocrad to spit out what it thinks a letter may be and\n> the candidates and where each letter is found. However it is not terribly\n> useful or accurate in my experience.\n> On Jan 14, 2014 1:12 PM, \"Josep\" notifications@github.com wrote:\n> \n> > \u00bfNosotros podemos visualizar el preproceso?\n> > Los vectores previos a la fuente de texto mostrada\n> > \n> > 2014/1/14 Kevin Kwok notifications@github.com\n> > \n> > > Ocrad has a simple letter segmentation algorithm so an image like that\n> > > would probably involve some preprocessing.\n> > > On Jan 14, 2014 3:14 AM, \"Josep\" notifications@github.com wrote:\n> > > \n> > > > Like this\n> > > > .\n> > > > . .\n> > > > . .\n> > > > . .\n> > > > .\n> > > > .. .\n> > > > . '\n> > > > .\n> > > > .. .\n> > > > .\n> > > > .\n> > > > .\n> > > > .. .\n> > > > \n> > > > | - . . - - . . - !\n> > > > .\n> > > > .. .\n> > > > . .\n> > > > .\n> > > > .\n> > > > .\n> > > > .` .\n> > > > .\n> > > > .\n> > > > \n> > > > \u2014\n> > > > Reply to this email directly or view it on GitHub<\n> > > \n> > > https://github.com/antimatter15/ocrad.js/issues/3#issuecomment-32245758>\n> > > \n> > > > .\n> > > \n> > > \u2014\n> > > Reply to this email directly or view it on GitHub<\n> > > https://github.com/antimatter15/ocrad.js/issues/3#issuecomment-32245857>\n> > > \n> > > .\n> > \n> > \u2014\n> > Reply to this email directly or view it on GitHub<\n> > https://github.com/antimatter15/ocrad.js/issues/3#issuecomment-32290693>\n> > .\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/antimatter15/ocrad.js/issues/3#issuecomment-32299202\n> .\n. Like this\n.\n. .\n. .\n. .\n.\n.. .\n. '\n.\n.. .\n.\n.\n.\n.. .\n\n| - . . - - . . - !\n.\n.. .\n. .\n.\n.\n.\n.` .\n.\n.\n. \u00bfNosotros podemos visualizar el preproceso?\nLos vectores previos a la fuente de texto mostrada\n\n2014/1/14 Kevin Kwok notifications@github.com\n\n> Ocrad has a simple letter segmentation algorithm so an image like that\n> would probably involve some preprocessing.\n> On Jan 14, 2014 3:14 AM, \"Josep\" notifications@github.com wrote:\n> \n> > Like this\n> > .\n> > . .\n> > . .\n> > . .\n> > .\n> > .. .\n> > . '\n> > .\n> > .. .\n> > .\n> > .\n> > .\n> > .. .\n> > \n> > | - . . - - . . - !\n> > .\n> > .. .\n> > . .\n> > .\n> > .\n> > .\n> > .` .\n> > .\n> > .\n> > \n> > \u2014\n> > Reply to this email directly or view it on GitHub<\n> > https://github.com/antimatter15/ocrad.js/issues/3#issuecomment-32245758>\n> > .\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/antimatter15/ocrad.js/issues/3#issuecomment-32245857\n> .\n. Quiz\u00e1 est\u00e9 perdido...\n\u00bfAcaso Ocrad no vectoriza?\nTrabaja con patrones de pixel!!\nYa!. Una letra girada un \u00e1ngulo no la leer\u00e1 correctamente!!\nr +180\u00ba = 7 ?  http://es.letrag.com/caracteres/279.png\n\n2014/1/14 Kevin Kwok notifications@github.com\n\n> To read something like that you could for instance downscale the image or\n> apply a blur so that the dots appear connected.\n> \n> It is possible to get ocrad to spit out what it thinks a letter may be and\n> the candidates and where each letter is found. However it is not terribly\n> useful or accurate in my experience.\n> On Jan 14, 2014 1:12 PM, \"Josep\" notifications@github.com wrote:\n> \n> > \u00bfNosotros podemos visualizar el preproceso?\n> > Los vectores previos a la fuente de texto mostrada\n> > \n> > 2014/1/14 Kevin Kwok notifications@github.com\n> > \n> > > Ocrad has a simple letter segmentation algorithm so an image like that\n> > > would probably involve some preprocessing.\n> > > On Jan 14, 2014 3:14 AM, \"Josep\" notifications@github.com wrote:\n> > > \n> > > > Like this\n> > > > .\n> > > > . .\n> > > > . .\n> > > > . .\n> > > > .\n> > > > .. .\n> > > > . '\n> > > > .\n> > > > .. .\n> > > > .\n> > > > .\n> > > > .\n> > > > .. .\n> > > > \n> > > > | - . . - - . . - !\n> > > > .\n> > > > .. .\n> > > > . .\n> > > > .\n> > > > .\n> > > > .\n> > > > .` .\n> > > > .\n> > > > .\n> > > > \n> > > > \u2014\n> > > > Reply to this email directly or view it on GitHub<\n> > > \n> > > https://github.com/antimatter15/ocrad.js/issues/3#issuecomment-32245758>\n> > > \n> > > > .\n> > > \n> > > \u2014\n> > > Reply to this email directly or view it on GitHub<\n> > > https://github.com/antimatter15/ocrad.js/issues/3#issuecomment-32245857>\n> > > \n> > > .\n> > \n> > \u2014\n> > Reply to this email directly or view it on GitHub<\n> > https://github.com/antimatter15/ocrad.js/issues/3#issuecomment-32290693>\n> > .\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/antimatter15/ocrad.js/issues/3#issuecomment-32299202\n> .\n. ",
    "brettz9": "Also, if I can ask, would it be a lot of work to make Tesseract available to JavaScript, or were you just afraid of the file size? If it is just the file size, I would think that localStorage (or Node.js usage) could mitigate this problem.\n. Technically, I'd think your derivative portions could be dual-licensed as copycenter even if your derivative portions would probably be meaningless by themselves unless the Ocrad and GOCR projects themselves were to change their license.\n\nI could do a pull request for you if that'd help, but I figure you might want to ensure you were getting them from the source anyways.\n. Also, if I can ask, would it be a lot of work to make Tesseract available to JavaScript, or were you just afraid of the file size? If it is just the file size, I would think that localStorage (or Node.js usage) could mitigate this problem.\n. Technically, I'd think your derivative portions could be dual-licensed as copycenter even if your derivative portions would probably be meaningless by themselves unless the Ocrad and GOCR projects themselves were to change their license.\n\nI could do a pull request for you if that'd help, but I figure you might want to ensure you were getting them from the source anyways.\n. ",
    "Flimm": "+1 for including a license file, especially if it's GPL.\n. Thanks!\n. +1 for including a license file, especially if it's GPL.\n. Thanks!\n. ",
    "rikartn": "How, specifically, would you do that? I'm fairly new to this, and sifting through 1MB of code to find that specific line of code; it would take me ages! \n. It may be that I have misunderstood the concept, but I thought that reducing the number of characters ocrad could recognize would make it more accurate. As of now, whenever I write \"3\", I end up with \"j\", \"J\", \"_\" or another character as often as \"3\", \"1\" produces \"I\", \"6\" produces \"b\" etc. If there was no \"j\", \"J\" og \"b\" in the \"baseline\", ocrad would not mix it up as often?\n\nAnd it may be that I misunderstand what you mean on using regex.replace on the output. Do you mean ie. to manually replace all instances of \"j\", \"J\" with \"3\" and all instances of \"b\" with 6, and so on? Wouldn't reducing ocrad.js (in some way) be more effective programming?\n\nAll I (initially) want it to detect is \"1234567890\". Later I may want to expand to \"+-*/:\".\n\nIs it possible to strip ocrad down like this in an easy way?\n. How, specifically, would you do that? I'm fairly new to this, and sifting through 1MB of code to find that specific line of code; it would take me ages! \n. It may be that I have misunderstood the concept, but I thought that reducing the number of characters ocrad could recognize would make it more accurate. As of now, whenever I write \"3\", I end up with \"j\", \"J\", \"_\" or another character as often as \"3\", \"1\" produces \"I\", \"6\" produces \"b\" etc. If there was no \"j\", \"J\" og \"b\" in the \"baseline\", ocrad would not mix it up as often?\n\nAnd it may be that I misunderstand what you mean on using regex.replace on the output. Do you mean ie. to manually replace all instances of \"j\", \"J\" with \"3\" and all instances of \"b\" with 6, and so on? Wouldn't reducing ocrad.js (in some way) be more effective programming?\n\nAll I (initially) want it to detect is \"1234567890\". Later I may want to expand to \"+-*/:\".\n\nIs it possible to strip ocrad down like this in an easy way?\n. ",
    "ghost": "Thank you so much!\n. Thank you so much!\n. ",
    "tomayac": "Thanks for merging this pull request! Have you considered publishing this on the npm registry, so that people can just \"npm install ocrad\"? Once you have added your user (https://www.npmjs.org/doc/cli/npm-adduser.html), publishing to the npm registry is as easy as https://www.npmjs.org/doc/cli/npm-publish.html, my package.json should hopefully work. What do you think? \n. Thanks for merging this pull request! Have you considered publishing this on the npm registry, so that people can just \"npm install ocrad\"? Once you have added your user (https://www.npmjs.org/doc/cli/npm-adduser.html), publishing to the npm registry is as easy as https://www.npmjs.org/doc/cli/npm-publish.html, my package.json should hopefully work. What do you think? \n. ",
    "MarcGodard": "Everything is possible, just not with the current limitations of this library. One thing you can do is after detection replace the underline with the @. Especially if you know the format.\n\nI was wondering if it was possible to have the library give the segmented character images that fail to pass to another library. Like a small neural network.\n. Everything is possible, just not with the current limitations of this library. One thing you can do is after detection replace the underline with the @. Especially if you know the format.\n\nI was wondering if it was possible to have the library give the segmented character images that fail to pass to another library. Like a small neural network.\n. ",
    "dmpe": "Hmmmm, it seems working without an issue with most of pictures I am testing now. Therefore, I close it - unless you want to investigate it further. \n. Hmmmm, it seems working without an issue with most of pictures I am testing now. Therefore, I close it - unless you want to investigate it further. \n. ",
    "tasahara": "Hello.\n\nThat's Canvas only I was also fillText, \"-\" was investigated because it is recognized as .\n\nWhen the background is transparent but , unfortunately characters are not recognized .\n\nIn this case , when you hit the dot , because the background is filled white , has come to be recognized .\n\nDoes this problem , would be possible to correspond OCRAD.js?\n\nClumsy I'm sorry in English .\n. Hello.\n\nThat's Canvas only I was also fillText, \"-\" was investigated because it is recognized as .\n\nWhen the background is transparent but , unfortunately characters are not recognized .\n\nIn this case , when you hit the dot , because the background is filled white , has come to be recognized .\n\nDoes this problem , would be possible to correspond OCRAD.js?\n\nClumsy I'm sorry in English .\n. ",
    "bboyairwreck": "I, too, kept getting this hyphen dash error. I was working on this for hours. I finally figured out that I needed to call reset_canvas() on load. This sets the fillStyle of the canvas. This is the method from the demo.html:\n<b>\nfunction reset_canvas(){\n    o.fillStyle = 'white';\n    o.fillRect(0, 0, c.width, c.height)\n    o.fillStyle = 'black';\n}\n</b>\nYou want to make sure you call this. Don't just import it. So a simple call of\n<b>reset_canvas();</b>\ndoes the trick\n. I, too, kept getting this hyphen dash error. I was working on this for hours. I finally figured out that I needed to call reset_canvas() on load. This sets the fillStyle of the canvas. This is the method from the demo.html:\n<b>\nfunction reset_canvas(){\n    o.fillStyle = 'white';\n    o.fillRect(0, 0, c.width, c.height)\n    o.fillStyle = 'black';\n}\n</b>\nYou want to make sure you call this. Don't just import it. So a simple call of\n<b>reset_canvas();</b>\ndoes the trick\n. ",
    "stolenfusion": "Hi bboyairwreck,\n\nNice to hear that you got a workaround. It would be nice if you can tell me from which function reset_canvas() needs to be called. I'm stuck since a long time. really frustrated. \n. Hi bboyairwreck,\n\nNice to hear that you got a workaround. It would be nice if you can tell me from which function reset_canvas() needs to be called. I'm stuck since a long time. really frustrated. \n. ",
    "cades": "feature request +1\n\nthe [Ocrad documentation](http://www.gnu.org/software/ocrad/manual/ocrad_manual.html#Character-sets) page said it support charset, could we expose this option to ocrad.js API?\n. just play with ocrad command, find it only support charset: ascii  iso-8859-9  iso-8859-15\nwhich means chinese is not supported... what a pity :(\n. feature request +1\n\nthe [Ocrad documentation](http://www.gnu.org/software/ocrad/manual/ocrad_manual.html#Character-sets) page said it support charset, could we expose this option to ocrad.js API?\n. just play with ocrad command, find it only support charset: ascii  iso-8859-9  iso-8859-15\nwhich means chinese is not supported... what a pity :(\n. ",
    "pedrovieira": "@antimatter15 any updates on that port with chinese characters?\n. @antimatter15 awesome! can't wait\n. @antimatter15 any updates on that port with chinese characters?\n. @antimatter15 awesome! can't wait\n. ",
    "wx-chevalier": "can i use it for chinese now?\n. can i use it for chinese now?\n. ",
    "benjick": "I see. Thank you. Do you have any other recommendation regarding ocr\nsoftware?\nOn 23 Jun 2015 02:24, \"Kevin Kwok\" notifications@github.com wrote:\n\n> Yeah recognition accuracy isn't super fantastically great, this is just\n> how it works.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/antimatter15/ocrad.js/issues/23#issuecomment-114311391\n> .\n. I see. Thank you. Do you have any other recommendation regarding ocr\nsoftware?\nOn 23 Jun 2015 02:24, \"Kevin Kwok\" notifications@github.com wrote:\n\n> Yeah recognition accuracy isn't super fantastically great, this is just\n> how it works.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/antimatter15/ocrad.js/issues/23#issuecomment-114311391\n> .\n. ",
    "BBosman": "It looks like this was fixed by #30 and can therefore be closed. \n. It looks like this was fixed by #30 and can therefore be closed. \n. ",
    "YasharF": "Yes, MIT license is prefered.\n. Is the license supposed to be just a copy of the OCRad's license: https://github.com/antimatter15/ocrad.js/blob/master/ocrad-0.24/COPYING ?  I just realized that is GPL2.\n\nIf that is the case, may be we just need to have a separate project as a port of Tesseract and deal with it. (I did see the note about your attempt for porting Tesseract by the way).\n. Yes, MIT license is prefered.\n. Is the license supposed to be just a copy of the OCRad's license: https://github.com/antimatter15/ocrad.js/blob/master/ocrad-0.24/COPYING ?  I just realized that is GPL2.\n\nIf that is the case, may be we just need to have a separate project as a port of Tesseract and deal with it. (I did see the note about your attempt for porting Tesseract by the way).\n. ",
    "cburatto": "+1 for the license update. \r\n\r\nBut since OCrad is GPLv2, that means this ocrad.js could be GPLv2 as well. AFAIK, GPLv2 is a bit more permissive than GPLv3 with regards to original work -- especially for Web applications. If that is correct, I would suggest changing ocrad.js to GPLv2.. +1 for the license update. \r\n\r\nBut since OCrad is GPLv2, that means this ocrad.js could be GPLv2 as well. AFAIK, GPLv2 is a bit more permissive than GPLv3 with regards to original work -- especially for Web applications. If that is correct, I would suggest changing ocrad.js to GPLv2.. ",
    "gamecubate": "<bump>\n. <bump>\n. ",
    "mikailcetinkaya": "No response , sad. No response , sad. "
}