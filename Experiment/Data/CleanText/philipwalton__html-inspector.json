{
    "philipwalton": "Can you elaborate?\n. Yeah, actually I've been working on it a lot the past few days, and I hope to release something this weekend or early next week. It'll probably be alpha, but I want to get it into people's hands for feedback and rule suggestions and things like that.\nStay tuned.\n. Hey, thanks for catching this!\nI've updated the code to temporarily ignore <svg> elements and their children since they're not listed in the document I took the validation data from. Furthermore, as I read that document, <svg> elements aren't really part of HTML per se, they're their own document type.\nIt also seems like supporting  and all its sub-element and attributes would require a bit of work, so I decided to ignore it for now.\nI've bumped to version 0.2.0. Let me know if you're still experiencing any of these problems, and thanks again for catching this bug.\n. I originally toyed with the idea of having reporter.warn and reporter.error methods in the rule files but ultimately concluded that what I considered an error, you might only consider a warning (and vise-versa), so I opted not to set error priority in the rule files themselves.\nThe way HTML Inspector is today, you can basically achieve what you want by overriding the default onComplete function and warn via whatever method you see fit, though perhaps a more declarative way would be nicer.\nCSSLint addresses this problem by passing either a 1 or a 2 to the initialization function, which in HTML Inspector's case would look something like this:\njs\nHTMLInspector.inspect(\n  [\"some-rule\", 1],\n  [\"some-other-rule\", 2]\n)\nBut I'm not sure I like this as much as just overriding the onComplete function yourself (though I don't have strong feelings either way).\nAnyway, if you have some other ideas, I'd love to hear them.\n. @thejameskyle I always love help. Did you have anything in particular in mind? I must warn you though that the designer in me is pretty picky, and I don't want to release a docs site that doesn't look good :)\n. That's strange. As long as HTMLInspector.inspect() is invoked after all the stylesheet elements, it shouldn't matter where it is.\nAre you able to put up a test case online somewhere, either your own site or codepen.io or jsfiddle.net or something like that? Then I can take a look. As of right now I'm not sure what the issue could be. Also, what browser are you using?\n. Using file:// for the stylesheets or for HTML Inspector?\n. Hmmm, looks like this is a browser bug. HTML Inspector gets the style information by looking through the objects in document.styleSheets, and it looks like Chrome returns null for document.styleSheets[0].cssRules whereas Firefox returns the expected CSSRuleList object.\nProbably nothing I can do here. Thanks for reporting though.\n. I have not. I may if I have some time later. If you file one, let me know.\n. Awesome. Thanks!\n. I'll have to think about this a bit more, but my initial inclination is to not include these classes in the whitelist. Modernizr provides a really easy way to prefix all its class names, which makes extending the \"unused-classes\" rule trivial. Furthermore, most of those classes are pretty safe, but I could see something like .flexbox being widely used as a helper class by a lot of people, so I wouldn't necessarily want it to be whitelisted everywhere.\nAt my company we use Modernizr and we just prefix every class name with the string supports- to mimic the native CSS @supports conditional rules. As you probably noticed, the /supports\\-/ RegExp is included in the whitelist out of the box.\nBut either way, I think you bring up a good point that most people who use both Modernizr and HTML Inspector with their default configs will be annoyed with all those errors. At a minimum I think it deserves a mention in the README.\n. Yeah, you do need to use a custom build to get a prefix, but as far as I know, must people do that. There's even an awesome Web interface for it.\nThe only downside of a custom prefix (that I can think of) is for large, existing sites that don't want to or aren't able to change their existing CSS that already uses the default Modernizr classes. But perhaps for those sites, simply excluding the HTML element is better.\nI'm still thinking about this.\n. I updated the README with an FAQs section that specifically mentions how to deal with the Modernizr case. I'm going to close this issue for now, but definitely let me know if you think it needs to be presented more clearly or accomplished more easily.\n. Unfortunately this is not as easy as it looks.\nSince HTML Inspector runs in the browser on live DOM, it's inspecting elements that have already been parsed and altered by the browser. That means that if the browser has corrected some of your unclosed tags, HTML Inspector sees them as properly closed.\nThe only way to actually validate raw markup from inside the browser would be to do an AJAX request for the content and parse the returned text yourself, which would be a lot of work and, at this point, is not something I'm planning on doing with HTML Inspector.\nBut who knows, maybe I'll change my mind in the future. Anyway, thanks for the suggestion.\n. @keeganstreet I like this idea a lot. I actually had the same thought when I was pondering how to detect closing tags. But I'm worried it might introduce too much disconnect from HTML Inspector's current scope.\nHTML Inspector's main selling point is it works on live DOM. That means it can check your HTML after your backbone views have been rendered and after your jQuery plugins have finished thrashing your initial DOM.\nIf we introduced pre-browser parsed validation, we'd either have to filter out most of those errors or live with duplicates. It would also not respect the config options like which node to start from or which subtrees to exclude, so that might introduce some confusion.\nAnyway, I want to think about it a bit more before deciding against it, but those are my initial thoughts on the idea.\n. I haven't had time to try out the gist, but I'm 100% in favor of a CLI. it was on my personal list of enhancement todos.\nI'll test out cli.js later tonight, but feel free to start on a PR if you have time. I'm sure I'd be willing to merge it in.\n. OK, I tried it out and it works really well. Actually, so well it got me started thinking about the use cases for a CLI, so let me just throw out some ideas / wish-list items.\n- You should somehow be able to specify which rules to run.\n- You should be able to specify what arguments get passed to .inspect()\n- You should be able to extend rules with your custom settings\n- You should be able to customize how the errors are reported\n- If the page already contains a call to HTMLInspector.inspect() it should just run that.\nI guess, basically, you should be able to do all the things you can currently do in the browser. At the moment, I'm not sure how best to accomplish this. I'll have to think about it, but I wanted to get those ideas out there in case you're working on it, so we could be on the same page.\nLet me know if you have any thoughts. I'll think about this a bit more and get back to you with any new ideas I have.\n. @gotdibbs I haven't had a chance to try out your grunt task yet, but I'm definitely interested in taking a look. Thanks for putting that together!\n. @webpro I haven't tested out the CLI yet (probably not until this weekend), but I like the interface as you've described it. I definitely like the system checking for the presence of a file rather than the -l and -u options.\n\nthe script is now assuming phantomjs to be globally available. We could use this or be OK with it. Note that phantomjs already gets installed by this project, but only from devDepencies.\n\nPersonally, I'm OK with this. I imagine anyone wanting to use the CLI will be savvy enough to install PhantomJS themselves, but maybe that's not a good assumption. I'd rather leave it as-is. We can always add it in later if we hear feedback that it's confusing.\nAlso, I'm assuming the point of the setConfig() function is so you you can always just call inspect() with no arguments and have it either run the default or what the user has passed in via a config file. Is that correct?\n. Yeah, that's the idea with this feature. I'll try to get to it soon.\nHowever, one way of solving the problem today is by prefixing the Modernizr classes (that's why I do anyway). With Modernizr you can prefix all the classes with a namespace, and I've chosen \"supports-\" to mimic the @supports CSS conditional rules. You could also start the inspection point at body, but that's less ideal. Anyway, a fix is coming soon.\nThere's also a pull request about this issue that you may want to comment on.\n. Hey, nice work overall. There are a couple things I noticed and have questions about.\n1) I'm seeing the errors logged twice. I looked at the two files in ./bin and didn't immediately see why, so I thought I'd just ask.\n2) I think it would be great to, by default, check for the presence of an html-inspector-config.js file in the current directory and, if found, load that if nothing was passed via -c.\n3) I don't have much experience with node CLI stuff, but I'm wondering if console.log is the best way to report the errors. If the point of the CLI is for other programs to be able to run the tests and read the results, shouldn't we use STDOUT or STDERR, or is console.log aliased to that? Thoughts?\n4) I noticed that you're listening for messages logged to the console in PhantomJS via page.onConsoleMessage. I think there's probably a better way since the page being loaded may be logging to the console itself for legitimate reasons. Probably the best bet is to override the onComplete config option with something else.\n. 1) Gah, I'm an idiot. I was running the script on my local test page, which (obviously) was already making a call to HTMLInspector.inspect(). Non-issue.\n3) Cool. Like I said, I'm not very familiar with these things, so whatever you think is good is fine by me.\n. Thanks @webpro I merged this in to master. There are a few minor changes I may make in the future, but I figured it'd be best to get this in and let people use it so I can get some feedback.\nRandom question (please excuse my ignorance): your examples used the htmlinspector command, but are you actually able to use that command literally as-is? How is that found in your path, or did you manually add it? I saw that the bin property was added to package.json, but I'm not sure if that has anything to do with anything.\nAnyway, thanks again for your work.\n. Ahh, that makes sense. I'll register it with NPM before I release the next version.\n. Thanks. I'll fix this in the next release and add it to NPM.\n. A browser extension is definitely something I've thought about (and a lot of people have asked for), but I'm not sure how useful it would be for this particular tool.\nRunning HTML Inspector with the default rules would produce a lot of errors on your average site, and without the customization and override options, I'm not sure how much use a browser extension would be.\nAnyway, I'll definitely look into that possibility in the future. Perhaps a standalone product is in-order. I'm going to close this for now since it's not on my immediate timeline, but feel free to submit a pull request if you like.\n. Thanks for the suggestion. I'm planning on making the FAQs more comprehensive soon, and since a lot of people have asked about this kind of thing I'll probably add it there.\n. I've included your bookmarklet in the FAQs section.\n. @jaimeiniesta thanks for catching this! It should be fixed now in master. Let me know if you're still having problems.\n. Thanks for the reminder. I've been meaning to put something in the README indicating browser support.\nSince HTML Inspector is primarily a dev/test tool and not a production tool, I don't intend to support old IE. As such, I can use a lot of ES5 methods (like Object.keys as you pointed out) that old browsers don't support.\nIf you really want/need it to run in old IE you could always add an ES5 Shim and then override the onComplete handler to do something other than logging to the console (since old IE doesn't support console.log).\n. Yeah, I had that same problem with installing it on our work app. The solution I used (which is crappy) is to only include HTML Inspector if the domain is localhost. Since we use macs and do all our IE testing with VMWare, that solution works for us because our IE testing domain is never localhost.\nYou could also try using IE conditional comments, which can be used to negate a condition (e.g., only include this code if the browser isn't IE).\nI'll also spend some time thinking about a better solution as well, and keep this issue open until it's resolved.\n. I've tried using HTML Inspector with IE7-10 and, even with the es5-shim, IE10 is the only one that reports the correct errors. IE9 doesn't error but it doesn't report the same HTML Inspector warnings that all other browsers correctly report. I might look in to this further, but I suspect the primary reason is that IE7-9 don't fully support the CSSOM, which is giving the CSS-related rules problems.\nBecause HTML Inspector is a development tool, I don't think there's any compelling reason to support non-standard browsers; however, there should be an easy way add HTML Inspector to your dev setup and not have it completely break in old IE.\nAt this point I think the best way is to use IE conditional comments, which I've currently switched my setup to use with no issues so far:\n<!--[if gt IE 9]><!-->\n  <script src=\"path/to/html-inspector.js\"></script>\n<!--<![endif]-->\nUnless anyone strongly objects or has a better idea, I'll add this info and a more general browser support section to the README.\n. Nice catch. Thanks! I'll push a new version as soon as I get a chance.\n. Yeah, excluding rules is on my list of TODOs before the next release. I'll track it via this issue.\nWhat do you mean about a list of default rules? Like in the code or just documented more clearly somewhere?\n. The README does contain a complete list of the built-in rules, though they are separated into categories so maybe it's not super easy to get a holistic overview.\n. Ahh, OK, now I get what your question is.\nYeah, I can make it more clear what the name identifier is for each of the default rules.\n. Thanks!\n. Thanks! Some of those were embarrassing; I'm glad you fixed them!\n. I agree that this is helpful, but I think it's still good to have the text that explains that the element can't be displayed. Can you add that part back in, and then I'll merge.\nPerhaps something like:\n(can't display iframe with cross-origin source: \"http://example.com\")\nWhat do you think?\n. Thanks, I'm actually doing this a different way in my new branch, but I'll make sure and handle the case where an <iframe> has a blank or invalid src.\nI'd pull this in temporarily, but there were conflicts. If you want me to merge it for the time being, could you just rebase with master and push the new changes?\n. I've merged in the branch so this should be fixed now on master as of 34b9eeead3610e1d6417995fbd0ebf77287ed815. Let me know if you're still having issues.\n. Weird, that's what happens when you try to merge pull requests on vacation.\n. Thanks.\n. If the CSS is not being added dynamically, it should be fine. You could try calling HTMLInspector.inspect() after a timeout of 3000ms or something like that just to make sure, but, like I said, it should work.\nThe only other thought I had is if you're using a CSS preprocessor or minifier, they sometimes strip out empty declarations. That may also be the problem.\nEither way, I'd recommend whitelisting those classes instead of adding empty declarations. Whitelisting is what I always do with third party stuff that doesn't follow my rules.\n. Is this anywhere online that I can take a look? It's hard to know without seeing a test case, but if this is in fact a bug I'd like to track it down.\n. Hmmmm, this appears to be because you're loading the CSS file from a different domain. I'm not sure if this can be fixed.\nIf you look at the document.styleSheets object in the Web console, you'll see that the style sheet for the datatables plugin is returning null for its cssRules property. Perhaps there's a way to get this to work but I'm not sure how. I know very little about cross-origin stuff.\nHere's all I could find in the spec. Apparently the origin-clean flag must be set appropriately to access cssRules: http://dev.w3.org/csswg/cssom/#concept-css-style-sheet-css-rules\n. I don't see them when I copy the CSS directly into jsfiddle: http://jsfiddle.net/VKKXc/\n. Weird, if you type the following line into the web console (in Chrome), here's what you get:\njs\ndocument.styleSheets[0].cssRules[0].selectorText\n// table.datatable\nNotice that the \"t\" in datatable is lowercase. It's uppercase in Firefox.\nI don't think this is just a Chrome issue because I've checked a few other sites that I know use uppercase letters in CSS selectors, and they work fine.\nCan you think of any reason why this may be happening only on your site?\n. OK, I think I tracked this down. If you add a doctype to the top of your page, it works <!DOCTYPE html>.\n. The variable name here will be the attribute name. /data-([a-z]+)/ is a regular expression and the .test() method of regex instances tests to see if the passed in string (in this case name) matches the regular expression.\nIf the test fails, it returns false because (false && anythingElse) will always return false since the first part of the expression is false. If .test() is true it returns the second part of the expression. The part after the &&, which in this case is RegExp.$1 which simply means the value of the first capture group in the most recent match.\nHere are some examples:\n``` javascript\n/data-([a-z]+)/.test(\"data-foo-bar\") && RegExp.$1; // returns \"foo\"\n/data-([a-z]+)/.test(\"blah blah blah\") && RegExp.$1; // returns false\n```\nIf you're unfamiliar with Regular Expressions, you should read up on them here:\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions\n. I think you could probably do that with the existing tool, assuming you're in the browser. That's basically what I do in the tests. Here's an example from the duplicate-ids rule test:\n``` js\nit(\"warns when the same ID attribute is used more than once\", function() {\n  var html = parseHTML(''\n        + ''\n        + '  Foo'\n        + '  bar Em'\n        + ''\n      )\nHTMLInspector.inspect({\n    useRules: [\"duplicate-ids\"],\n    domRoot: html,\n    onComplete: onComplete\n  })\nexpect(log.length).to.equal(2)\n  expect(log[0].message).to.equal(\"The id 'foobar' appears more than once in the document.\")\n  expect(log[1].message).to.equal(\"The id 'barfoo' appears more than once in the document.\")\n  expect(log[0].context).to.deep.equal([html, html.querySelector(\"p#foobar\")])\n  expect(log[1].context).to.deep.equal([html.querySelector(\"p#barfoo\"), html.querySelector(\"em#barfoo\")])\n})\n```\nThe parseHTML function in the second line is really nothing magical. It's just just delegating to innerHTML behind the scenes as you can see here.\nIf you needed to do this serve side for whatever reason I suppose you could use phantomJS, but that might be more complicated. Also keep in mind that since the markup is being parsed by a browser it won't report errors that are forgiven by a browser, like improperly closed tags and whatnot.\nIf you actually wanted to validate the HTML it might be better to POST to validator.nu as described in this issue.\n. In that case I think it might make more sense to run HTML Inspector within the context of the generated <iframe>, and then maybe post message back to the parent with the results. HTML Inspector's CSS module gets the list of CSS rules by looping through the document.styleSheet object. In Codepen's case, it looks like this just works if run in the context of the generated <iframe>.\nHere's an example. If you look at the console you'll see the CSS rules are showing up.\nhttp://codepen.io/anon/pen/GInCp\n. Sweet!\n. Yeah, this is not going to be possible (at least not with the current implementation) because HTML Inspector doesn't deal with the source code at all. It just deals with DOM nodes.\nAt some point in the future I might try to implement a server-side component that consumes raw HTML and CSS and parses it, but unfortunately that's pretty low on my list of todos.\n. @palewar I think this is a great rule, but I'm concerned that it's not universal enough to be included in the library by default.\nI'm leaning toward creating a section in the README that links to project blessed community rules like this one. That way you'd have exposure to your custom rule, but it wouldn't be something all users got by default.\n. I've added a \"Third Party Rules\" section to the README and included this rule in it.\n. Closed via 8075147f0eb378843c9493cc3c93209839976b6d\n. There were actually two problems here. The first is I'm assuming you don't have PhantomJS installed. That should fix your error. If you're on mac just do:\nsh\nbrew install phantomjs\nThe second problem should be fixed by upgrading to 0.7.1. I discovered this bug while trying to debug your issue.\n. Agreed. I added some info to the REAME. When I get a chance I'll add some code that throws a warning if PhantomJS isn't installed.\n. Closed via 9c56bed64d8b83c6c264353029bed2abca530ed0\n. Thanks for catching this. I accidentally put \"shelljs\" in devDependencies instead of just dependencies. It should be fixed in v0.7.3.\nLet me know if you're still having issues.\n. When you say you ran the tests, does that mean you ran npm test with no failures?\nAlso, is your index.html file available online anywhere that I could take a look?\n. OK, I was able to reproduce it on my work laptop with your repo. I'll take a look at it later to see if I can track down the issue.\nI'm going to keep this issue closed, but I opened up another one to track this bug.\n. @adrianstainforth In your specific case it seems to be because index.html is loading RequireJS, and that is conflicting with Browserify's UMD shim.\nBrowserify detects that AMD is happening on the page, so it doesn't expose the HTMLInspector object on window (since it assumes you'll be requiring it somewhere). I'll have to think about whether I want to support this case.\n. I wouldn't necessarily change what you're doing. HTML Inspector should be able to handle this case. I just need to think of the best way.\nThat being said, Browserify is a cool tool. I recommend learning it.\n. This should be fixed as of v0.8.0. If you're still having problems let me know.\n. Firefox 14 is pretty old. I don't get this error on my test page in Firefox 27 (the current version), so I'm going to close this for now.\n. Thanks, I was going to do this once the new version became live on cdnjs, and I see it now has.\n. It looks like they're using attribute selectors (instead of classes) in the CSS for some reason:\ncss\n.pure-g-r [class*=\"pure-u\"] {\n  font-family: sans-serif;\n}\nSo, HTML Inspector is correctly telling you that the class is not in the CSS even though a matching rule is. In cases like this you can whitelist those classes to avoid warnings.\n. Thanks!\n. Thanks, but I don't see the point of this change.\n. I don't see it as being about validation success vs. markup correctness. I see it as about being consistent. HTML Inspector needs to either pick the W3C version or the WHATWG version of the spec and stick to it.\nFrom looking at my current source, it seems like I picked the W3C version (probably by accident) without giving much thought to the choice between the two. Moving forward I should pick one and stick to it. WRT the <main> element, I don't think it makes sense to change this rule without changing the whole validation module.\nAny thoughts? Recommendations?\n. Thanks! How embarrassing!\n. Thanks, fixed via 32aa897855d2bb09b08d8ca4d0cac7e33bd49975.\n. Hmmm, this may be a Windows/Unix compatibility issue. Out of curiousity, what does running which phantomjs return from the command line?\nI ask because here's the logic that produces the error you're seeing:\nhttps://github.com/philipwalton/html-inspector/blob/0.8.1/bin/html-inspector#L32-L35\n. Thanks, should be fixed as of 0.8.2. Let me know if you're still having problems.\n. @jonkessler thoughts on #47?\n. Thanks, but the existing code in this repo doesn't use semi-colons, so that's why I'm not using it in the README. I'll update the script source myself.\n. Ah, thanks, I didn't see those, I just saw the semi-colon additions. Fixed via 7549eed853b36b34173f7e9599b234de527e54f7.\n. Closed as not reproducible. \n. Thanks!\n. Yeah, it's been a while since I updated the attributes list. Thanks for reminding me.\n. @jonmiles, HTML Inspector doesn't parse the contents of script tags, so there must be something else going on. Do you have these examples hosted anywhere so I could take a look?\n. I don't think PhantomJS supports requestAnimationFrame, so that's probably where the error is coming from. Either way, it's a JavaScript error, not an error produced by HTML Inspector.\n. > I think what we're asking is why is the html-inspector throwing JavaScript errors?\nIt's not. PhantomJS is throwing those errors. HTML Inspector needs a JavaScript runtime with a DOM in order to work, but that means if there are other JavaScript errors on the page, those errors will affect HTML Inspector's ability to do it's work.\n\nWhat was wrong with the two examples I provided? Both snippets reproduce the errors on their own. Is it not valid HTML?\n\nAgain, these errors have nothing to do with HTML Inspector or the validity of the HTML. They're being thrown because there are errors with the JavaScript (either downloading it, parsing it, executing it, etc.).\n. > the JavaScript errors do not affect the HTML Inspectors ability to do it's job.\nOne of the core principles of HTML Inspector is that it operates on live DOM. This allows it to inspect DOM that's dynamically generated as is the case in many single page applications today.\nIf there's a JavaScript error on the page that prevents the DOM from generating, HTML Inspector may (incorrectly) report that it found no errors, when in fact it would have had the JavaScript run properly.\n\nIn phantom-runner.js in your page.onError handler you're re-throwing JavaScript errors from the page and then exiting.\n\nI can see an argument for not exiting, but I can also see an argument for wanting to fail the tests if any JavaScript errors are found.\nHonestly, the main problem here (as I see it) is not that that I'm exiting on JS errors, it's that PhantomJS doesn't support a lot of the JavaScript features used by devs today, so it's saying the page contains errors when it doesn't if run in a modern browser.\nI'm very much open to replacing PhantomJS. In fact, I started trying to use jsdom a few months back, but at the time it didn't support all the features needed.\nFWIW, In my personal tests, I don't use the CLI at all; I use selenium webdriver.\n. Thanks, but the version number is added by the build script, so merging this PR won't actually fix anything.\n. @evilebottnawi please be patient, if you'd like to submit a patch to fix this error, feel free, otherwise realize that it may take some time for me to get to it.\n. Thanks!\n. I've been meaning to upgrade this tool for a while, but since I don't actively use it anymore (I no longer work at the company I built it for), I haven't been able to find the time.\nI'd happily accept a pull request though if you or anyone else wants to contribute. Getting it working with npm and module loaders is absolutely something I'd like to support.\n. ",
    "clakech": "just a ping to know if this cool stuff is still alive and could be released in a near future or not ;)\nseems like the ping latency is ok !\n. ",
    "operatino": "At least host those docs somewhere.\n. ",
    "jamiebuilds": "@philipwalton would you like help with this?\n. ",
    "franciscolourenco": "I found what is causing the problem, using file:// scheme name. Serving the page with an http server solves the problem. Can you fix it?\nThanks :)\nOn Sunday, 16 June 2013 at 19:25 , Philip Walton wrote:\n\nThat's strange. As long as HTMLInspector.inspect() is invoked after all the stylesheet elements, it shouldn't matter where it is.\nAre you able to put up a test case online somewhere, either your own site or codepen.io (http://codepen.io) or jsfiddle.net (http://jsfiddle.net) or something like that? Then I can take a look. As of right now I'm not sure what the issue could be. Also, what browser are you using?\n\u2014\nReply to this email directly or view it on GitHub (https://github.com/philipwalton/html-inspector/issues/6#issuecomment-19516467).\n. using file:// in the address bar for the html file  \n\nOn Sunday, 16 June 2013 at 19:25 , Philip Walton wrote:\n\nThat's strange. As long as HTMLInspector.inspect() is invoked after all the stylesheet elements, it shouldn't matter where it is.\nAre you able to put up a test case online somewhere, either your own site or codepen.io (http://codepen.io) or jsfiddle.net (http://jsfiddle.net) or something like that? Then I can take a look. As of right now I'm not sure what the issue could be. Also, what browser are you using?\n\u2014\nReply to this email directly or view it on GitHub (https://github.com/philipwalton/html-inspector/issues/6#issuecomment-19516467).\n. Have you filled a bug report on the chromium bug tracker? \n\nOn Sunday, 16 June 2013 at 20:04 , Philip Walton wrote:\n\ndocument.styleSheets\n. It has already been reported by someone else: https://code.google.com/p/chromium/issues/detail?id=143626\n\nOn Sunday, 16 June 2013 at 21:24 , Philip Walton wrote:\n\nI have not. I may if I have some time later. If you file one, let me know.\n\u2014\nReply to this email directly or view it on GitHub (https://github.com/philipwalton/html-inspector/issues/6#issuecomment-19518457).\n. Found other 2 reports:\nhttps://code.google.com/p/chromium/issues/detail?id=49001\nhttps://code.google.com/p/chromium/issues/detail?id=45786\n\nOn Sunday, 16 June 2013 at 21:24 , Philip Walton wrote:\n\nI have not. I may if I have some time later. If you file one, let me know.\n\u2014\nReply to this email directly or view it on GitHub (https://github.com/philipwalton/html-inspector/issues/6#issuecomment-19518457).\n. +1\n. \n",
    "oskarjakiela": "If I'm not mistaken in Modernizr 2.6 only way to prefix every class is using custom builder, is not? It could be some obstacle for existing projects.\nBut I agree with you - prefix Modernizr is more \"elegant\" than hardcode every possibility - now i realize it ;) Update doc and little gist with whitelisted class names should solve the case.\n. ",
    "isimmons": "After taking a look at your \"CSS Architecture\" article, it makes good sense to prefix with supports or js so this works well. I think the addition of the ability to exclude DOM elements would cover older sites and those who for what ever reason may not want to add a prefix. Plus people who use the cdnjs version which is not prefixed.\n. First thing I'm looking for in the usage instructions and not finding it.\nWith modernizer I get a long list of  \nThe class [insert-classname] is used in the HTML but not found in any stylesheet\nWould be good to have a simple way to exclude the html tag all together or exclude modernizr classes\n. ",
    "webpro": "@nychng You could do that with an HTML validator (which you pass the original/source HTML as text).\n. No problem, I'll whip up something later today.\nLet's definitely not make it \"grunt-only\" or something.\n. At first I was thinking about a local JSON configuration file to specify what rules to run (e.g. htmlinspector.json) which could be used by client (browser) and server (PhantomJS). However, some kind of declarative JSON configuration would be limited to enable/disable rules.\nI think it's better to have a htmlinspector-config.js file (or similar) that is inserted after htmlinspector[*].js. Here the user can imperatively configure at will (e.g. add/extend rules, etc), and both client and server do the same. This script can also include a call to HTMLInspector.config() or something (need to add this), with the same API as .inspect().\nIf we would standardize on the name, we could check if it's already in the page, and otherwise inject the local user configuration script (filename could be overridden from CLI). Then just call HTMLInspector.inspect().\nHaving all the things available from CLI directly doesn't seem feasible to me. However, I do like the idea of a globally available inspector (i.e. npm install -g) that optionally takes a local config file, and run it against any url.\nforking...\n. Started work in a branch. It works, also globally:\n```\n$ htmlinspector --help\nUsage: htmlinspector [options]\nOptions:\n-h, --help           output usage information\n  -V, --version        output the version number\n  -l, --local [file]   Inspect local file\n  -u, --url [url]      Inspect external url\n  -c, --config [file]  Configuration file\n``\n. Also addedHTMLInspector.setConfig` method. Example:\n$ htmlinspector -l page.html -c config.js\nWhere config.js could include this:\n```\n// From README\nHTMLInspector.rules.add(\"deprecated-data-prefixes\");\n// Only use these rules\nHTMLInspector.setConfig({\n  useRules: ['validate-attributes', 'deprecated-data-prefixes'],\n  domRoot: \"body\"\n});\n```\n. Two improvements today:\n1. just provide a file or url (script will look if local file exists, otherwise assumes url)\n2. provide base version (from available builds, defaults to \"full\")\nSome output:\n```\n$ htmlinspector\nUsage: htmlinspector [options] \nOptions:\n-h, --help           output usage information\n-V, --version        output the version number\n-c, --config [file]  Configuration file\n-b, --base [base]    Use HTML Inspector version (full, core, convention, best-practices, validation)\n\n```\nWhat do you guys think? I'm just going to submit a PR and we can take it from there.\nI also have a question: the script is now assuming phantomjs to be globally available. We could use this or be OK with it. Note that phantomjs already gets installed by this project, but only from devDepencies.\n. @gotdibbs, usually there's an API for that (for good reason), but maybe this is actually a different discussion :-)\n. > Personally, I'm OK with this. I imagine anyone wanting to use the CLI will be savvy enough to install PhantomJS themselves, but maybe that's not a good assumption. I'd rather leave it as-is. We can always add it in later if we hear feedback that it's confusing.\nOK, agreed.\n\nAlso, I'm assuming the point of the setConfig() function is so you you can always just call inspect() with no arguments and have it either run the default or what the user has passed in via a config file. Is that correct?\n\nExactly!\nShall we move further discussion to #14? Otherwise, feel free to re-open.\n. 1. I'm not seeing them twice. Are you sure? E.g. when I do htmlinspector http://google.com I'm seeing some errors multiple times, but that's correct. How can I reproduce your case?\n2. Me too.\n3. Since console.log writes to STDOUT, I think it's OK.\n4. Good point, and thanks @gotdibbs! I borrowed your bridge :-)\nWill commit some stuff after this.\n. Yes, by all means, release early :-) Feel free to ping me in any issues/RFC's people may have.\nAnd yes, the globally available htmlinspector command is the beauty of npm install -g. That was actually the purpose of this CLI exercition. With a global install, the project is installed in a global node_modules registry on your system, and npm adds a symlink htmlinspector (referencing bin/html-inspector.js) to the bin folder (/usr/local/bin in my case).\nHowever, you need to submit your project to the npm registry for users to globally install this module. You can do that with npm publish from the project root. Let me know if you need any info.\nWithout a global install, it's still usable, but people would need to do e.g. node path/to/bin/html-inspector.\n. One solution is to use the CLI feature once it's released (i.e. HTML Inspector does its job through PhantomJS).\nAnyway, can anybody report whether it actually works in oldIE using ES5 shim? And I guess it's good practice to feature test for window.console before using it in any case.\n. ",
    "keeganstreet": "Hey @philipwalton,\nI reckon I could help you implement this. As you said, the raw HTML could be accessed by sending an Ajax request to the URL of the current page.\nI wouldn't go and reinvent the wheel by parsing the returned text, but instead POST it to http://validator.nu. I know from experience that validator.nu supports CORS, so we would be able to make the request from the page being tested and get a response. This would be similar to what I did in http://validator.keegan.st\nWe would probably then need to parse the errors returned from validator.nu and give the user a way to filter out the errors they don't care about. Again I would be able to leverage some of the code I wrote for validator.keegan.st\nDo you think this would be useful?\nCheers\n. ",
    "gotdibbs": "I setup a Grunt task for this last night which will let you accomplish the same goal (see: http://github.com/gotdibbs/grunt-html-inspector). It is not entirely as flexible as @webpro 's solution, but if you'd be using the command line to run HTML Inspector on multiple files frequently, Grunt is the right solution I would think anyways.\n. @webpro I think something like what you've described would actually make any CLI/automated implementation much easier. I'd vote for your HTMLInspector.config() or possibly an HTMLInspector.defaults() function to set the configuration defaults which could then be overridden by a call to HTMLInspector.inspect().\nLet me know if there's anything I can do to help look down that path, I'd be glad to contribute.\n. For the configuration stuff, what would you guys think about exposing the configuration properties directly on the HTMLInspector object? Like:\njavascript\nHTMLInspector.domRoot = \"body\";\nHTMLInspector.useRules = [ ... ];\nHTMLInspector.onComplete = onComplete;\n... that could be in addition to your new .setConfig() function which would then be what .inspect() calls if passed configuration overrides. Seems like a lot of redundancy when you type it out but I think the flexibility that provides would be awesome.\n. With # 4 might I suggest tying into onAlert instead of onConsoleMessage? You'd have to inject a bit of bridge code to accomplish that, but it is exactly what I'm doing in the grunt task I made (and it works well) so you could borrow the bridge from that if you wanted.\n. @philipwalton To clarify, IE7+ actually supports console.log, just only when the developer tools open.\n. ",
    "niksy": "I didn\u2019t see this package on npm registry, so I tried installing it manually and I get this error:\nbash\n$ npm install -g https://github.com/philipwalton/html-inspector/archive/0.4.1.tar.gz\nnpm http GET https://github.com/philipwalton/html-inspector/archive/0.4.1.tar.gz\nnpm http 200 https://github.com/philipwalton/html-inspector/archive/0.4.1.tar.gz\nnpm http GET https://registry.npmjs.org/commander\nnpm http 304 https://registry.npmjs.org/commander\nnpm http GET https://registry.npmjs.org/keypress\nnpm http 304 https://registry.npmjs.org/keypress\nnpm ERR! Error: ENOENT, chmod '/usr/local/share/npm/lib/node_modules/html-inspector/bin/html-inspector'\nnpm ERR! If you need help, you may report this log at:\nnpm ERR!     <http://github.com/isaacs/npm/issues>\nnpm ERR! or email it to:\nnpm ERR!     <npm-@googlegroups.com>\nI suppose this is related to npm not finding the correct file in bin folder\u2014currently html-inspector has .js extension.\n. ",
    "creartinc": "That's a good idea! I hope they make it :)\n. ",
    "jaimeiniesta": "Thanks, it works fine now :)\n. ",
    "kimptoc": "Cool - thanks - must put my thinking cap on and find a way to only include the inspector in dev/chrome  - maybe I will make my index.html an erb file and only include it as appropriate.\nRumour has it our corp browser will be IE10 by year end... although there has been rumours of an option to use Chrome as well circulating....\n. Works for me - thanks :)\n. Hi - its a Backbone, SPA app - but the CSS is referenced in the initial index.html page and I already have a few seconds delay before calling HTML Inspector :)\nNo minifiers/preprocessors (yet).\nThanks for the whitelisting tip - will try that.\nCheers, \nChris\n. Try this - http://jsfiddle.net/kimptoc/YtUdy/  - this is on a 15 second delay before calling html-inspector.  An example class that is in the css file is dataWrapper_info, but it gets reported as used but not in CSS.\n. Not at my desk now but I think I would get same error if CSS copied directly into js fiddle - I use local file in my app\n. I see what you mean, strange.\nHere is a local css file based version:\nhttp://ssdvps1.kimptoc.net/test/\nSource here - although should all be visible - https://github.com/kimptoc/html-inspector-with-datatables\n. It seems class names are case insensitive but HTML attribs are case sensitive ... http://stackoverflow.com/questions/12533926/are-class-names-in-css-selectors-case-sensitive\nConfusing ...\n. Yes, that helps a lot  :)\n. Thanks for the help - and I always thought those DOCTYPE lines didnt help... :)\n. ",
    "lukasmlady": "No problem. Thank bower instead :).\n. ",
    "scottgallant": "Glad to hear it's on your radar! \nRegarding the \"default rules\",  I was just looking for a list of rules (such as the \"unused-classes\" rule) to add to useRules config option.  I didn't see a complete list in the docs.  Thanks!\n. Is the config-friendly name for each rule the lowercase, hyphenated name?  For example, \"Script Placement\" would become \"script-placement\"?\n. Haha, sorry for the confusion. Looking forward to the updates!\n. Very glad to see this! Thanks!\n. ",
    "eheikes": "Sure thing... here you go.\n. No problem... I'm using my own fork, but issued the PR in case others found it helpful.\n. ",
    "MGTHEBOSS": "Sir,\nNice explanation.\nI hope someday I'll be able to contribute to this project.\nI've already made a submission in ChallengePost.\nThank you.\nRegards,\nManojit Ghosh\n. ",
    "chriscoyier": "Perfect. Will give it a go.\nI noticed output like \"This element has this class which isn't used in any stylesheet\" kind of thing (in regular usage). Can I also specify a set of CSS to be checked against? \n. Works great:\n\nAnd yep, we should definitely ultimately run it in the full-page context and report back up the errors. I have notes in this code to do just that, but I might release with this wicked simple implementation first and see what kind feedback there is.\n. ",
    "palewar": "Waiting to hear your thoughts on this pull request. Are you considering to merge this or you think this may not be a good fit?\n. I agree. View State is an ASP.NET only thing, however as you can see \nthat view states are basically hidden input fields and input fields are \nuniversal and I think many platforms and even developers may use hidden \ninput fields to store all kinds of values. Do you think a new rule to \nmeasure all hidden input fields and not just asp.net view-state will be \nof universal use?\nAlso how do you plan to implement community rules like this one? Do you \nwant me to include in a separate branch or do you have some other plans \nfor having a central repo for such rules?\n. Ok. Thanks.\n. ",
    "mcandre": "@philipwalton Oh, excellent! I love when a package is on Homebrew!\nCould we make this more evident, by:\n1. Noting in the README that phantomjs is a prerequisite\n2. Printing a more pertinent error message, along the lines of \"Error: phantomjs is required, see https://github.com/philipwalton/html-inspector#getting-started for more information\"\n. ",
    "solaoner": "Change lovg\n. ",
    "adrianstainforth": "Ok, firstly thanks for the quick response, that's working now and I can install it.  However I'm now getting a reference failure:\nhtmlinspector index.html \nReferenceError: Can't find variable: HTMLInspector\nI did fork and run your test see if I can see anything obvious, but not sure I can see where it's failing\n. Sorry it's taken a bit to get back. Well I forked and ran grunt test, but assume that it runs the same tests?\nMy files are here if you want a look https://github.com/djforth/image-replace\n. Ahhh, ok, well give me a good excuse to learn Browserify!  Well thanks for looking into it :)\n. ",
    "djforth": "Awesome, thank you that works perfectly :) \nThat said enjoying playing with Browserify!\n. ",
    "lkraav": "Yes indeed I thought that could be it. What's the reason Inspector cannot recognize selectors?\n. ",
    "erikwoods": "It is unfortunate that we have to write exceptions for attribute selectors. :( I have many.\n. ",
    "impressivewebs": "Great tool, Philip!\nFYI, this is only true if you accept the WHATWG's version of the spec The W3C's still says that main should only be included once:\n\nAuthors must not include more than one main element in a document.\n\nAnd:\n\nAuthors must not include the main element as a descendant of an article, aside, footer, header or nav element.\n\nsource\n. Haha, no problem! Great tool, that's all that matters. I'm sure the technical parts of the readme were fine. The least I can do to help. :)\n. ",
    "jonkessler": "Well, what does html-inspector aim for? W3C validation success or markup correctness? If the WHATWG spec says it's OK, it's OK in my book.\n. ",
    "yuricamara": "Windows doesn\u00b4t recognize the which command.\n. Thank you very much @philipwalton .\nIt works like a charm! \n. ",
    "DragorWW": "ok, good, but in readme missed ')' in forEach\njs\nHTMLInspector.inspect({\n  domRoot: \"body\",\n  excludeRules: [\"some-rule-name\", \"some-other-rule-name\"],\n  excludeElements: [\"svg\", \"iframe\"],\n  onComplete: function(errors) {\n    errors.forEach(function(error) {\n      // report errors to external service...\n    } // <-- missed ')' !!!\n  }\n})\n. ",
    "jonmiles": "In case it helps, I've found two more examples of what I previously reported as Bug 1.  \nExample 1\nhtml\n<!DOCTYPE html><html lang=\"en-US\" xmlns=\"http://www.w3.org/1999/xhtml\"><head>\n<script type=\"text/javascript\" async=\"\" src=\"file:///home/milesj/Documents/seotodo/data/3pxt6/49n6b.js\"></script><script src=\"https://apis.google.com/_/scs/apps-static/_/js/k=oz.gapi.en_GB.nA4eUF06vL8.O/m=plusone/rt=j/sv=1/d=1/ed=1/am=AQ/rs=AGLTcCNcXA0KaQorIa7m2ep19XOiE7Q6rQ/t=zcms/cb=gapi.loaded_0\" async=\"\"></script>\n</head><html>\njavascript\nReferenceError: Can't find variable: gapi\nExample 2\nhtml\n<!DOCTYPE html><html><body><script src=\"https://cdn.syndication.twimg.com/widgets/timelines/478801075776942080?callback=__twttr.callbacks.tl_478801075776942080_1&amp;dnt=false&amp;domain=blog.buzzvil.com&amp;lang=en&amp;suppress_response_codes=true&amp;t=1591762\" async=\"\"></script></body></html>\njavascript\nReferenceError: Can't find variable: __twttr\nIn both these examples, it appears to be throwing the error while parsing a url query string.  Is it supposed to parse query strings?\nHave I set something up wrong?  It's possible I know, but I can't see what it could be.  It works on some sites, but not on others.\nOne final thing, in case it's related in some way.  When I remove I remove the src value completely e.g. src=\"\" it throws a different error SyntaxError: Parse error.  It's not a warning that there's a syntax error, it's the htmlinspector process failing to handle the content.  That doesn't make any sense to me either, as surely src=\"\" is a valid mistake, as opposed to syntax the parser can not handle.  This again makes me think I'm doing something wrong, but if I am I have no idea.\n. I think what we're asking is why is the html-inspector throwing JavaScript errors?\nIf it doesn't inspect scripts why is the cli output referring to a JavaScript variable, or part of a URL in the script tag's SRC?\nWhat was wrong with the two examples I provided? Both snippets reproduce the errors on their own. Is it not valid HTML?\nI've actually rewrote your code to work without phantomjs, or a browser, so this is no longer a problem for me.\n. In phantom-runner.js in your page.onError handler you're re-throwing JavaScript errors from the page and then exiting.  \nYou don't need to do this, the JavaScript errors do not affect the HTML Inspectors ability to do it's job.\nThe only errors you should be concerned with are from the phantom.onError callback.\nSo you see the errors are coming from the HTML inspector, and essentially you are inspecting the content of scripts.\n. ",
    "leotsem": "I'm getting a similar response when running the CLI version of html-inspector 0.8.1 with phantomjs 1.9.8 using stock config against http://theinnerlogic.com/.\nReferenceError: Can't find variable: requestAnimationFrame\nIt works on some sites, but not on others.\n. ",
    "evilebottnawi": "@philipwalton repo is not maintenance?\n. @philipwalton thanks for answer, when I have time, and if there is no patch, I'll do it\n. ",
    "modulexcite": "As a workaround, I have added html-inspector.js as a Chrome DevTools Snippet to be able to run it in the browser.. ",
    "Januszpl": "I have the same problem. "
}