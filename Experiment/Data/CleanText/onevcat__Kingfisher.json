{
    "onevcat": "Thanks for it. But I reverted the pod project file. It seems you are using an earlier version of CocoaPods, which changes the pod file.\n. Thanks for pointing it out. Some of them should be fixed in #3 \nBut I cannot find \"cahe\" in the project.\n. Thanks for it. It would be great if Xcode has spelling checking. :(\n. While NSFileManager.defaultManager() is thread-safe, the file manager created by NSFileManager() is not. So there is a possibility of creating the file manager in a thread, but using it in another. An ioQueue could ensure all file IOs are in the same thread.\nSee the \"Threading Considerations\" section in NSFileManager doc.\n. Hi, in fact here should be no problem to just use fileManager = NSFileManager(), or even use a defaultManager. But if you want to add some delegate later, you will need a new created file manager and consider the thread problem.\nHere I prefer a new file manager since Kingfisher is a framework and should be isolated in the io operations from the \"host\" app, which might be using the shared file manager.\n. Thanks for it!\n. I am adding a UIButton category for it now. An update will be released when it done.\n. Pod updated to 1.1 :)\n. Thanks!\n. No idea about it currently. May I know your CocoaPods version and the content of your Podfile? Maybe I can reproduce it in my Mac.\n. Hi, @jerometonnelier \nIt compiled without error for me (except a plist file missing for AcknowledgementsBundle).\nWould you please update to the latest CocoaPods and try again. I am using version 0.36.3 and it works well.\n. Hi, CocoaPods supports Swift framework from 0.36, so you cannot use Kingfisher from CocoaPods if it is 0.35.\n. It is a lack of Kingfisher currently, and there is a plan to add it later.\n. Added in #23 \nWait for merging.\n. Merged.\nYou can now customize the request like this:\nswift\nKingfisherManager.sharedManager.downloader.requestModifier = {\n        (request: NSMutableURLRequest) in\n        // Do what you need to modify the download request.\n}\n. @NBoymanns \nTake a look at this and this.\n. Hi, thanks for the p-r.\nBut if you always check the nil before set, how about if you actually want to set the image to nil? If you need to keep the original image, pass the imageView.image as the placeholder image will be OK.\n. Hi,\nKingfisher does not support iOS 7, since it is using cancelable block object and an option of low priority when downloading, which is iOS 8 feature.\nKingfisher is very young and I suggest you persist in SDWebImage if you need to support iOS 7 for a while. Kingfisher would be a choice if you prefer sure Swift instead of Swift/OC mixed.\nAbout the performance, I did not do a benchmark myself. But the core implementation of both is similar, so I guess you can expect similar performance if you use Kingfisher.\n. :) Thanks!\n. It is a feature in plan and will be added later.\n. Added in #15 \n. Waiting for merge.\n. Merged.\nPlease use this to get cache files size in disk:\nswift\nKingfisherManager.sharedManager.cache.calculateDiskCacheSizeWithCompletionHandler { (size) -> () in\n    println(\"disk size in bytes: \\(size)\")\n}\n. Thanks for reporting. Challenge is not implemented now. I will add it later.\n. Hi, @szuniverse \nI just tested your url and it seems work for me well. The site is well certificated and I believe the problem would be the date and time setting of your test devices/simulators. If you set them correctly, Kingfisher should work well for it.\nAnd I also plan to add an interface for the certification challenge in case of someone needs self-signed certification support later. But it would be at a lower priority.\n. Added in #21. Wait for merging.\n. Merged. You can now use trustedHosts of ImageDownloader to skip the self-signed host.\nKingfisherManager.sharedManager.downloader.trustedHosts = Set([\"i.scdn.co\"])\nfor example.\nBut it is not recommended unless you know what this means. It would be better to get a certification from a CA.\n@szuniverse And I believe you have no need to use this for i.scdn.co, there should be something else wrong with your environment.\n. Hi, @alexdd55 \nThanks.\nIt is an interesting feature and could be achieved if we implement a multi-cache system. \nHowever, currently there is not a good way to do such things in Kingfisher since its single cache structure. A possible solution would be set/replace different cache object in the shared KingfisherManager object. But there is risk of thread issues since the cache property is not thread safe now.\nIt will not be difficult to add this feature but the hardest part is how to design the API.\nI will consider it later. Thank you.\n. Oh, I guess we'd better leave it open since there is possibility to add it later. :)\nIt is a cool feature.\n. By the way, if you need to separate the disk cache duration, a possible way for now would be giving up the UIImageView category (the kf_setImageWithURL methods), but to use the downloader and cache classes solely. \nYou are always free create and config your own cache with a name and duration. When you need an image, just check if a url is already cached there. If not, you can download with the default downloader and then store it in the cache you need. Although it is a bit hard to use :(\n. Implemented in #30 . Waiting for merging.\n. Added in version 1.2.0\nNow you can use this code to use different caches for your images:\n``` swift\nlet avatarCache = ImageCache(name: \"avatar\")\navatarCache.maxCachePeriodInSecond = 100\nlet contentCache = ImageCache(name: \"content\")\ncontentCache.maxCachePeriodInSecond = 200\navatarImageView.kf_setImageWithURL(NSURL(string: \"avatar_image_url\")!, \n                                                         placeholderImage: nil, \n                                            optionsInfo: [.TargetCache: avatarCache])\ncontentImageView.kf_setImageWithURL(NSURL(string: \"content_image_url\")!, \n                                                           placeholderImage: nil, \n                                              optionsInfo: [.TargetCache: contentCache])\n```\nPlease let me know whether it works for you. Please notice that the options APIs are now deprecated, and you need to switch to the new optionsInfo version.\n. If you are using the UIImageView category, the download would be started in a background thread very soon once you call kf_setImageWithURL methods.\nThere should be no timer or intended delay for it. Does it happen every time?\n. Hi,\nThe retrieveImageWithURL:options:progressBlock:completionHandler: will try to seek the image in cache with url as the key. If not found, it will begin to download and do cache. That means you are doing seeking and caching twice for every image.\nSince you are already checked it with the first line, it is better to just use the self.kfmanager.downloader to download it by downloadImageWithURL method and cache it in the completion handler in the download method.\nBut it should not cause the download delay. If it is, it might be something wrong when handling the thread dispatch. I will check and confirm it later. Thanks for the sample code.\n. I will keep an eye on it. If anyone suffers from the same issue, please let me know.\n@alexdd55 Is it possible to provide a reproducible demo for it? It will be a great help for finding what happened.\n. Hi, @htarwara6245 \nCould you describe your problem in more detail? And may I know what does the &w=150 mean in your url?\n. @htarwara6245 \nThe code snippet posted above seems good to me. It might be somewhere else caused that issue.\n(And since the default cache used in Kingfisher is the KingfisherManager.sharedManager.cache, so there is no necessary to set the optionsInfo again. But it should not the reason for your issue.)\n. Seems there is no other report for this. So I guess it is an app project issue instead of .Kingfisher. I am closing this.\n. Thanks! It looks great.\n. It is not the core feature for a downloading and cache framework.\nAnd the same effect could be implemented by extending the framework with simple UIAnimation. So I guess this will not be implemented in Kingfisher, to keep it a lightweight framework.\n. Hi, you can use requestModifier to modify the request before sending it, where you can add your auth logic. Please see #10 for more.\n. Hi, @rainypixels \nYes, Kingfisher's ForceRefresh will always download the image from web again. I agree it make sense to check 304 status code and will try to see what I can do with that.\nThanks!\n. @rainypixels Fixed in #42 . I decided to leave the handling detail to framework users and this wiki explained how to implement it with Kingfisher. Please let me know if it works for you or not.\nThanks!\n. Hi, @rainypixels \nThanks for the reply.\n1. As I know, there are several solutions for a server to response 304. Instead of sending and checking ETag, there is also date checking on \"Last-Modified\". Since users may adopt to different strategies when they handle 304, so I decide to leave the detail implementation to the users. If it turns an ETag based system is a common request, it is also possible to extend the downloader class by adding an option to give a default implementation for ETag based 304 checking and downloading.\n2. With the consideration to flexibility, it is necessary to expose the request to framework users. In fact the request of Kingfisher is nothing more than a simple plain GET request for the URL. The core idea when implementing Kingfisher is keeping it simple for simple use case, and make it flexible and extendable whenever you need. And for the requestModifier, you should use it to modify these urls/requests which are necessary to do so, instead of all requests.\n3. Surely. Instead of an error, it should be a state. Although 304 code is now only used internally, it should be reconsidered.\n. Thanks for your kind words and effort.\n. Currently no. This issue is duplicated to #35 \nIt is a planned feature and will be added later. Right now, you can only use different url/key for different images or force a download by using the ForceRefresh option.\n. Closing since duplicated. See #35 \n. Hi, @yonaskolb \nWow, great work. Thank you very much for the p-r.\nLGTM, but could I request some modification before it could be merged?\nFirst, currently ImageDownloaderCompletionHandler is a typealias of CompletionHandler, which is not necessary in fact. Downloader should know nothing about the cache (and the cacheType as well), so I suggest to refactor the ImageDownloaderCompletionHandler to remain without cacheType. The cacheType should be only returned from manager or cache class. By doing so, we can ensure the decoupling of downloader and cache.\nAnd would you please to issue another p-r with this to branch 1.2.1 instead of master?\nThank you!\n. Merged. Thanks!\n. No, Kingfisher only supports from iOS 8 since it is using some new API (mainly the cancelable block object).\n. Definitely! Thanks for pointing it out. I will fix it soon.\n. Should be fixed in #50 \n. Webp is not supported yet. However it is a planned feature and will be added later.\n. It will not be in a high priority, since webp format is not so widely used currently. So I cannot guarantee a time schedule for it. If you are relying on the format and have a pressing deadline, I suggest to switch to other framework first.\n. As mentioned in #362 \nsince the WebP support will introduce additional dependency and in fact it is not a popular or officially supported format in Apple platform, I decided to not add it for a while.\nI will keep an eye to see whether there could be a chance to do it later. But not for now at least.\n. P.S. There is a WebP framework as plugin for Kingfisher now. Check https://github.com/yeatse/KingfisherWebP. :( It seems caused by the WatchKit. I will have a look at it soon.\n. @tomquist  Should be fixed in #59 . Please do a pod install to take effect in your project. :)\n. Thanks for confirming it!\n. Hi, since the client-managed cache is one of the core concept of Kingfisher, the Cache-Control from response header will not be used.\n. Hi, @htarwara6245 \nI saw this post. However I am quite busy currently, I will try to reply as soon as possible.\n. Hi, @htarwara6245 \nTo download the images from network or get them from cache, you can just use the -retrieveImageWithURL:optionsInfo:progressBlock:completionHandler: method. It will search the cache first and if it is not found in cache, Kingfisher will download it from the url. Here is some code snippet for it:\n``` swift\nvar urlString = [car.image0, car.image1]\nvar images = UIImage\nfor url in urlString {\n    let imageUrl = NSURL(string: url)\n    KingfisherManager.sharedManager.retrieveImageWithURL(imageUrl, optionsInfo: nil, \n                   progressBlock: nil, completionHandler: { (image, error, cacheType, imageURL) -> () in\n        if image = image {\n            images.append(image)\n        //your completion logic\n        //...\n    } else {\n        // Error\n    }\n})\n\n}\n```\n. Hi, @htarwara6245 \nAs asked in Stackoverflow, may I know if this issue could be closed or not?\n. Wow! Really BIG!\nThank you guy!\n. Already answered in SO. http://stackoverflow.com/questions/30749494/why-my-image-is-not-display-immediately-after-downloaded/30749996#30749996\n. Hi, @Pe-te \nKingfisher now follows only local rules on cache and will ignore the expire date in response header. \nInstead of a discrete file cache expiration duration control, Kingfisher prefers to manage it per cache now, that is the maxCachePeriodInSecond in the cache object. In my opinion, it is simpler to use and understand, compared to both of local cache expiration duration and the server instruction exist at the same time.\nMoreover, there is rarely a chance that a resource expiration duration would change in my opinion. If you need different expiration duration for different types of resource (for example avatar may need a shorter cache duration, while static images could be cached for a longer time), you can setup multiple caches with different cache duration and send your images to the correct cache. You can have a look at #18 for more on it.\nSo, I am sorry but I guess there is little chance to add it into Kingfisher, since the core concept is client-managed cache here.\n. Seems cool. Thank you!\n. You can switch to the swift-2.0 branch if you need to. It will not be merged into master until Swift 2.0 released.\n. No, it should work on 7A121l. Maybe you need to clone it again.\n. Sure, you are right. I will fix it soon.\n. Resolved in #77 \n. Hi, @alexliubj \nThanks for the advice, but it should not be the responsibility of Kingfisher to handle such things like user interaction, since Kingfisher is an image download & cache framework.\nYou can implement your own with an extension for it, but it should not exist in Kingfisher.\n. Hi, @alexliubj \nThanks for the pull-request, it looks great.\nBut instead of making the indicator a default action and creating & adding the indicator view every time loading an image, would I ask for some change before it can be merged?\n1. Make an option on it, to create and show the indicator only when the option is true. I suggest to add an associated object (like kf_showIndicatorWhenLoading) to UIImageView to hold this option. So the users could set it whenever they need.\n2. Rely on the option mentioned in 1 to create the indicator view. It is addition cost to create and draw a view, so please avoid doing it every time. Please also do not remove it once added. Compare to adding/removing it, just hide it would be a better tradeoff.\n. @vfn Thanks for the review!\nSince it is popular to show an indicator when loading, I guess it would be a good feature to add a default indicator for those \"lazy guys\" who just need an out of box solution. Surely we will make it an option so if the default indicator doesn't match the app's UI, framework users can always add their customized indicator.\nThe reason of using a boolean (kf_showIndicatorWhenLoading) is that this is a UIImageView attachment instead of relating with the Kingfisher core. Currently, the image view extension knows nothing about the options detail and only passes it to Kingfisher manager. I guess it would be better to keep this isolation.\nI will handle this p-r, try to modify current code to a better quality and open another pull request later.\n. The original implementation hides the Float detail and tries to make things simpler. But I guess it is reasonable to give users more control on it by setting a value for the priority. However, changes on it might means API breaking. I will take a look to see if we could mark current lowPriority option as deprecated and introduce a new way to set initial priority for a download task soon.\nAnd for changing the priority on air when downloading, the downloader APIs (as well as the image view extension APIs) are returning a image task. We could just expose the priority property of task object to support changing it after download task started. It will be implemented soon in next major version.\n. Implemented in #194 \n. It will be released later as a part of version 2.0.0.\n. \u611f\u8c22\u6c47\u62a5\uff0c\u5468\u672b\u7684\u65f6\u5019\u6211\u4f1a\u770b\u770b\u3002\n. Checked it and it could be always reproduced. I believe it is a bug of Xcode beta version, since Apple did the same thing last year.\n\nI ran into this exact problem at WWDC. I spoke to a couple of Apple engineers who told me this is a bug in the SDK caused by moving some symbols between CFNetwork & Foundation, and that it would be resolved in the next release, due very soon. You can work around it in some cases by playing with the order frameworks are imported, but it won't always work.\n\nSo instead of including the CFNetwork explicitly in the dependency, I prefer to wait for next release to see whether it could be resolved. Currently, you can manually add CFNetwork as a dependency library for either your app target or Kingfisher target to get a workaround.\nRefer: http://stackoverflow.com/questions/24043532/dyld-symbol-not-found-nsurlauthenticationmethodclientcertificate-when-trying\n. Let's wait for another beta or even the release version to see if it could be solved by Apple.\n. I guess it is the time to add CFNetwork as a dependency now. :( \nI will do it later.\n. Kingfisher 1.5.0 released with CFNetwork as a dependency.\n. I will add it later.\n. Added in #129 \n. Version 1.7.0 contains support for GIF.\n. @vfn It's cool. How could it happen that I didn't notice the retain cycle in task before. \nThank you very much. It works perfectly. I am preparing a new release now. :)\n. Perfect! Thank you!\n. Similar issue has been reported as well. I am quite busy with my work now, so I guess I will check what happens this weekend.\n. Checked it and it could be always reproduced. I believe it is a bug of Xcode beta version, since Apple did the same thing last year.\n\nI ran into this exact problem at WWDC. I spoke to a couple of Apple engineers who told me this is a bug in the SDK caused by moving some symbols between CFNetwork & Foundation, and that it would be resolved in the next release, due very soon. You can work around it in some cases by playing with the order frameworks are imported, but it won't always work.\n\nSo instead of including the CFNetwork explicitly in the dependency, I prefer to wait for next release to see whether it could be resolved. Currently, you can manually add CFNetwork as a dependency library for either your app target or Kingfisher target to get a workaround.\nRefer: http://stackoverflow.com/questions/24043532/dyld-symbol-not-found-nsurlauthenticationmethodclientcertificate-when-trying\n. Leave #74 opened. I am closing this p-r.\n. @RuiAAPeres Fixed in another commit here https://github.com/onevcat/Kingfisher/commit/67e35376081832101848fba4114c51afbff5dbc5\n. Thanks for it!\n. \u56e0\u4e3a\u7528\u5230\u4e86\u4e00\u4e9b iOS 8 \u7684\u7279\u6027\uff0c\u6240\u4ee5\u5e76\u6ca1\u6709\u652f\u6301 iOS 7 \u7684\u8ba1\u5212\n. @alexliubj @vfn Would you please check current implementation on it?\nimageView.kf_indicator could be used to set basic style or color as well. And the indicator will not be removed until kf_showIndicatorWhenLoading explicitly set to false, to improve the performance a bit.\n. @faccuo \nThanks for the p-r. However, it seems you were working on an earlier version of this branch. Please check the latest swift-2.0 branch and it should be compatible with Xcode 7 beta 4 now.\n. \u8c22\u8c22\u63d0\u51fa\u3002\u4e4b\u540e\u5c06\u4f1a\u52a0\u5165\u5b58\u50a8\u4e3a JPG \u7684\u7279\u6027\u3002\n. Fixed in #110 \n. \u56e0\u4e3a\u9ed8\u8ba4\u7684\u8bdd\u56fe\u7247\u4f1a\u4fdd\u5b58\u5728 memory cache \u4e2d\uff0c\u4e0d\u5230 memory warning \u7684\u8bdd\u662f\u4e0d\u4f1a\u4e3b\u52a8\u53bb\u91ca\u653e\u7684\uff0c\u8fd9\u6837\u5bf9\u6027\u80fd\u4f1a\u662f\u6700\u597d\u7684\u3002\u4f60\u53ef\u4ee5\u8bd5\u8bd5\u770b\u6a21\u62df\u4e2a memory warning \u6216\u8005\u4e00\u76f4\u5230\u89e6\u53d1 memory warning \u770b\u770b\u4f1a\u4e0d\u4f1a\u4e0b\u964d\u3002\n\u5f53\u7136\u4e5f\u786e\u5b9e\u6709\u53ef\u80fd\u6709\u95ee\u9898\uff0c\u5982\u679c\u53ef\u80fd\u7684\u8bdd\uff0c\u80fd\u63d0\u4f9b\u4e00\u4e2a demo project \u662f\u6700\u597d\u7684\uff0c\u56e0\u4e3a\u6211\u8fd9\u8fb9\u6d4b\u8bd5\u7684\u60c5\u51b5\u662f\u5e76\u6ca1\u6709 unbounded increasing\u3002\n. @buginux \u6bd4\u5982\u53ef\u4ee5\u628a\u60a8\u6d4b\u8bd5\u7684\u8fd9\u4e2a\u9879\u76ee\u653e\u5230 GitHub \u4e0a\u3002\u4e0d\u8fc7\u5982\u679c\u53ea\u662f\u5f88\u7b80\u5355 set image \u8fd9\u79cd\u7684\u8bdd\u5c31\u4e0d\u7528\u4e86..\u6211\u4e5f\u68c0\u67e5\u8fc7\uff0c\u56fe\u7247\u7684\u8bdd\u5e94\u8be5\u662f\u6ca1\u6709\u6cc4\u9732\u7684\u3002\u5176\u4ed6\u90e8\u5206\u5012\u786e\u5b9e\u6709\u53ef\u80fd\uff0c\u6211\u4f1a\u518d\u770b\u770b\u3002\u60a8\u4e5f\u53ef\u4ee5\u5e2e\u52a9\u5728\u68c0\u67e5\u4e0b\uff0c\u5982\u679c\u80fd\u627e\u5230\u7684\u8bdd\u63d0\u4ea4 p-r \u6765\u4fee\u590d\u662f\u6700\u597d\u7684\u3002\n. \u6211\u7684\u8d44\u6599\u9875\u9762\u4e0a\u5c31\u6709\u90ae\u7bb1\u3002\u8c22\u8c22\n. @lorrykiko \u60a8\u597d\uff0c\u4e0d\u597d\u610f\u601d\uff0c\u4f46\u662f\u4e00\u76f4\u6ca1\u6709\u6536\u5230\u60a8\u7684\u90ae\u4ef6..\n. \u518d\u6b21\u67e5\u8bc1\u4e86\u4e00\u4e0b\uff0c\u5728 Instruments \u91cc\u5e76\u6ca1\u6709\u53d1\u73b0 Kingfisher \u7684\u6cc4\u9732\u3002\u6682\u65f6\u5148\u5173\u6389\u4e86\u3002\n. @lizzie8023 If you are operating a large amount of cells and images, it is an expected behavior since Kingfisher will try to cache the used images as much as possible to improve performance (by default). Until a memory warning is received, Kingfisher will not purge the memory cache. So, once you triggered a memory warning, you will be able to see the memory drop (if you implement your reusing logic correctly).\nIf it happens when you scroll several cells up and down, maybe you encountered this issue of Xcode.\n. @lizzie8023 Glad to hear that you solved it. \ud83c\udf7b \n. Hi. @minikin  @marcelofabri \nThanks for the reporting. I will keep on eye on this.\n@marcelofabri And may I get some more detail information on it? Would you please paste the full log, maybe it could tell more. Thanks!\n. Thanks for it. I will investigate what I can do with it.\n. I believe it should be OK now with ver 1.4.4. But we'd better to keep this issue open for a while, to see if there is new cases happen.\n. For reference \nA similar issue is reported in https://github.com/SwiftyJSON/SwiftyJSON/issues/261\nI would just keep trying to dig what happened with subscript + type casting.\n. It seems that this issue does not appear in current version of Kingfisher (2.0.4) and Swift (2.1). So I am closing it. If there is any further report on it, please leave a comment and I will reopen it.\n. @AvdLee Yes, it was an unrelated issue from this one.\n. LGTM. And I guess I can implement to save the image as JPG format later if it is a JPG file.\n. @RuiAAPeres It will be merged to master after Xcode 7 GM released.\n. LGTM. Thanks!\n. There is no need to do so. You can just use ImageCache separately. You could just throw your thumbnail to the default cache (KingfisherManager.sharedManager.cache) by calling storeImage:forKey: with a key different from your original file. Of course, you can create a new cache object to store these thumbnail if you do not want to mess it up with the default cache. It depends on you.\nWhen you need to access these thumbnails, you could use retrieveImageForKey:options:completionHandler:. If there is no such cached image there, you will get nil and then you know you should download it from web.\n. Hi, @RuiAAPeres @dmcrodrigues \nGreat suggestion for decoupling the key and URL. It is very easy to adjust current code for it. I will handle it soon.\n. Currently no.\nBut you can always use the ImageDownloader and ImageCache separately. Maybe something like this:\n``` swift\nKingfisherManager.sharedManager.cache.retrieveImageForKey(\"key\", options: KingfisherManager.OptionsNone) { (image, _) -> () in\n    if image != nil {\n        self.imageView.image = image\n    } else {\n        KingfisherManager.sharedManager.downloader.downloadImageWithURL(NSURL(string: \"http://example.com/example.png\"), progressBlock: nil, completionHandler: { (image, error, imageURL) -> () in\n        if image != nil {\n            let transformedImage = doTransforms(image)\n            KingfisherManager.sharedManager.cache.storeImage(transformedImage, forKey: \"key\")\n            self.imageView.image = transformedImage\n        } else {\n            //blabla\n        }\n\n    })\n}\n\n}\n```\n. I am closing it.\n. Of course.\n. Hi, @hazytint \nThanks for the pull request, it seems great.\nDifferent from Objective-C, Swift has default parameters. So in fact we could just leave only one of these APIs (the full one). However, there is a reason for leaving several versions of the same API. The auto completion for methods containing default parameters in Xcode 6.x is really suck. You will always get the full version of the method, even when you need some parameters being default. That means you have to remove some of them manually often, which is a waste of time. So I decided to have different versions of the same API for you to choose from the auto complete popup list.\nBut it seems things changes in Xcode 7. Now in Xcode 7 the auto completion of such methods gets improved. So I will reconsider to add default values to APIs after the new version of Xcode released later.\n. Yeah, that's cool. I will add it later.\n. Please check this.\nAnd according to your use case, you may also want to use a customized ImageProcessor or an ImageDataProvider to do similar things. But it depends on your needs to find the best approach.. So I guess you can just use the LocalFileImageDataProvider.\n```swift\nvar testing = true\nlet source: Source\nlet remoteImageURL: URL\nfunc getLocalURL(remote: URL) -> URL {\n    return remoteToDiskMap[remote]\n}\nif testing {\n    let localImageURL = getLocalURL(remote: remoteImageURL)\n    source = .provider(LocalFileImageDataProvider(fileURL: localImageURL))\n} else {\n    source = .network(remoteImageURL)\n}\nimageView.kf.setImage(with: source)\n```. The problem still exists in Xcode 7 GM. So I guess I should opt-out the disk task canceling temporarily (since it is not a common scene to cancel a disk search at all).\n. @hankbao Thanks for reporting this. Yes, I believe it is the same issue.\n. Ref commit https://github.com/onevcat/Kingfisher/commit/e271e3ed0b6461efbb6b8c4f3df040a140c4f15d\nOnce it gets fixed, we should add this back to Kingfisher.\n. @hankbao With no luck. It is still crashing.\n. Thanks for the information.\nSure, we can get a workaround by wrapping it with Objective-C. But I am not quite willing to introduce it into Kingfisher, since it is a pure Swift implementation now. It is not a big problem with lacking of disk task cancel for this project, so I decided to opt it from Kingfisher temporarily.\n. This is fixed in Xcode 7.1 beta 2. So we could add it back when the new Xcode gets released.\n. Now Xcode 7.1 was released. We could get it back and I will send a p-r on it later today.\n. Fixed in #128\n. See #90 \n. Hi, there is no plan for iOS 7.x supporting.\n. Your code seems good to me except reseting the image once again when downloading successfully. The  kf_setImageWithURL will set the image for you when everything goes OK.\nMay I know some more detail and context on how do you configure your cell? And you could check and the demo project in the repo as well, in which a collection view is used to show some images.\n. :)\n. There should be no concern for it. Kingfisher will remember the last set image url and ignore previous image loading, even if it is not yet finished.. May I know how did you install Kingfisher into your project?\nYou should have permission to load WatchKit from your Mac if things goes correctly.\nHowever, you could just remove the WKInterfaceImage+Kingfisher.swift file and the WatchKit framework from \"Link Binary With Libraries\" of Build Phase to opt out the WatchKit support.\n. @sondangpangaribuan  I am not quite sure about your issue. However, maybe it is something related to your project settings, such as Framework search path pointing to a strange place or there is something wrong with the file/folder permission. \nThere are some similar issues here and here for you to refer.\n. And if your project has a plan to update to Swift 2.0 soon, I guess you could just ignore this. Since Kingfisher for Swift 2.0 version removed WatchKit support temporarily. And it will be released soon with iOS 9.\n. Kingfisher 1.5.0 for Swift 2 released. \n. Thanks!\n. It would be useful. I will take a look at how to implement it. Maybe it would be a good idea to add it in the optionsInfo.\n. Added in #109 .\nUse like this:\nswift\nimageView.kf_setImageWithURL(URL, placeholderImage: nil, optionsInfo: [.Transition: ImageTransition.Fade(1)]\nYou can also find other options in ImageTransition.\n. \u8bf7\u68c0\u67e5\u4e00\u4e0b\u4f60\u7684 command line \u7248\u672c\u3002\u53e6\u5916\u73b0\u5728 master \u4e5f\u662f Swift 2.0 \u7248\u672c\u4e86\u3002\n. \u8bf7\u786e\u8ba4\u4e0b\u5728 Xcode \u91cc\u8bbe\u7f6e\u7684 Locations \u91cc Command Line Tools \u7248\u672c\u662f 7.0\n. \u5df2\u7ecf\u4e0d\u5c5e\u4e8e\u672c repo \u7684\u5185\u5bb9\uff0c\u8bf7\u81ea\u884c\u67e5\u9605\u8d44\u6599\u548c\u89e3\u51b3\u3002\nI am closing this.\n. It will be cached in Kingfisher's cache.\n. Sure. It is a feature of Kingfisher.\n. Hi, @borut-t \nThanks for the p-r. But it will cause a problem when reusing the image view in a cell. The image in a reused cell will be the original one instead of nil while loading, it makes it look strange when scrolling a table view or collection view.\nIf you need to keep the earlier image while loading, you could just pass that image as a placeholder image:\nswift\nimageView.kf_setImageWithURL(url, placeholderImage: imageView.image)\n. I am closing it.\n. Some error on pod trunk push now. Please use ~> 1.5 instead. It should be updated soon.\n. Yes, it is.\n. I guess we could leave it open until CocoaPods trunk restores.\n. Should be fixed now.\n. :(  Maybe you encountered some annoying SourceKit bugs of Apple. Did you try to update to the latest Xcode? And another thing you could try is removing third party plugins, sometimes they also may cause these kind of problems.\nSince it works well for me for my three own projects, I cannot tell why yet. I guess there is little I could do to help it, expect for waiting Apple to improve the IDE.\n. Since there is no further clue on it, I am closing it for now. If anyone facing the same problem, please give a report by reopening it.\n. The indicator should be in the center of image view (https://github.com/onevcat/Kingfisher/blob/master/Kingfisher/UIImageView%2BKingfisher.swift#L284), however, since it is a setting for frame directly, it might be some cases the position gets wrong when using auto layout and do some rotation. \nMay I know some context of your code? So I can get some detail on the problem to get a fix for it.\n. @jfizz \nWow, that's cool. Didn't notice that before. Would you like to send a pull request on it?\n. :) Let me do it.\n. Fixed in #115 \n. Thanks for pointing it out!\nYes, Kingfisher stores the url to identify the image view to prevent multiple setting image for the same image view. By holding a url, it can only update for the last downloading task. But it is not the real reason about this flicking. The problem seems to be the unnecessary queue dispatching when retrieving an image from memory.\nInstead of solving it by checking url, I guess I have a better approach for it.\nI will take a look at it later. Thank you\uff01\n. Fixed in #116\n. Thanks for the feedback. :)\n. @wieseljonas Tried to reload data but didn't see a flickering in the latest demo project. What's your implementation now?. \uff1a\uff09. Hi,\nThe options version of API is deprecated. You should use the optionsInfo version instead. You can just pass a nil for it, like this:\nimgView.kf_setImageWithURL(NSURL(string: product.pictureUrl)!, placeholderImage: nil, optionsInfo: nil, progressBlock: nil, completionHandler: { (image, error, CacheType, imageURL) -> () in\n                self.ProductTable.reloadRowsAtIndexPaths([indexPath], withRowAnimation: UITableViewRowAnimation.Automatic)\n                })\n. Why do you need to reload the cell after setting image finished? Kingfisher will set the image to the image view for you. If you reload the same cell, your tableView: cellForRowAtIndexPath: will be called again and again. Is that what you really need?\n. Kingfisher is a network image framework, and it will not support load images from photo library.\n. Currently no such option built-in. You need to use Kingfisher downloader and cache separately for it now.\n. Kingfisher will link your url to the image when using kf_setImageWithURL methods. When the image loading finished, there is a check on whether the url of downloaded image matches the target url. The image will be set only when the two urls match. So I guess it is probably not a Kingfisher issue.\nThe reason might be your cells of organization are reused in the persons tab, without cellImage updated (your layoutSubviews not get called in these two cells).\n. I guess I know why.\nself.cellImage.image = UIImage(named: \"no photo\") it will not set the under-hood url for Kingfisher.\nWould you please try to change this line to:\nself.cellImage.kf_setImageWithURL(NSURL(string: \"\")!, placeholderImage: UIImage(named: \"no photo\"))\nand have a try to see the result?\n. @wieseljonas Hi.  :)\n How's going on this?\n. Cool. Thanks for it. I guess I will add fully GIF support for it later since it is a common request.\n75\n. :( \nIt seems to be a side-effect for the Swift 2 type inference. I will give it a fix soon.\nThanks for pointing it out.\n. @Limon-catch \nBefore a fix on it, you could use as KingfisherOptions to get a temporary workaround:\n``` swift\nlet optionsInfos: KingfisherOptionsInfo = [.Options: [KingfisherOptions.CacheMemoryOnly, KingfisherOptions.ForceRefresh] as KingfisherOptions]\n```\n. Fixed in #127 \nPlease notice that the original usage of KingfisherOptionsInfo changed a little. It is now safer and better. It is fairly easy to fix it. Just change your original code:\nswift\nlet optionsInfos: KingfisherOptionsInfo = \n[\n    .Options: [KingfisherOptions.CacheMemoryOnly, KingfisherOptions.ForceRefresh], \n    .Transition: ImageTransition.Fade(1)\n]\nto something like this:\nswift\nlet optionsInfos: KingfisherOptionsInfo = \n[\n    .Options([KingfisherOptions.CacheMemoryOnly, KingfisherOptions.ForceRefresh]), \n    .Transition(ImageTransition.Fade(1))\n]\n. May I know how did you build the framework? What do you mean by using code from master branch? Did you try to install it by specifying the master in CocoaPods or anything else? If so, would please tell me the CocoaPods version you are using?\nIt could be great help if you could describe it more detail, including a reproducing step would be better.\nThank you. :)\n. And I found something might be related to it. It seems no solution there although. Just link it here for future refer. https://github.com/CocoaPods/CocoaPods/issues/3200\n. Thanks for it.\nThat's true! \nAlthough there is no direct retain cycle here between self and block, the generated block task might be held outside by framework users and when this happens the cache is also held unintended. It will not be a big problem if you are using the default cache of Kingfisher, since it is a singleton. However, it is a good catch for implementing cache logic by using a standalone cache.\nThank you a lot.\n. @chunkyguy \nBut there is another concern for it. Think about the code below:\nswift\nlet cache = ImageCache(name: \"MyCache\")\ncache.retrieveImageForKey(\"Hi\", options: KingfisherManager.OptionsNone) { (image, type) -> () in\n    print(\"Finished\")\n}\nYou will never get the \"Finished\" print out since the cache is not held and released before the closure(task) could complete.\nSo I guess we could better to capture self temporarily in the closure with another variable, and set it to nil after the completion block get called. Maybe something like this:\nswift\nvar sSelf: ImageCache! = self\nblock = dispatch_block_create(DISPATCH_BLOCK_INHERIT_QOS_CLASS) {\n    dispatch_async(sSelf.ioQueue, { () -> Void in\n        // Do Work\n        completionHandler(image, .Disk)\n        sSelf = nil\n    }\n}\nBy doing so, the completion block could always be called with some result, as well as the task will not hold the cache (self).\nHow do you think about it? Or do you have any better suggestion for it?\n. Thanks for it.\nIt was a race condition in test only appears in CI server. I tried to give it a fix before but without luck. I should take a look back at it sometimes later. :(\nAnother run of testing could fix it. Let me do it.\n. I guess it could not be a widely use case and I am closing it.\n. I guess it could not be a widely use case and I am closing it.\n. @yurijmi Thanks for the pull-request. But may I know the main purpose of it?\nIf you just want to display the first frame of a GIF instead of an animating one, you can set the image again in the completion handler of Kingfisher's image view extension like this:\nswift\nimageView.kf_setImageWithURL(some_url_to_a_gif) { \n    (image, error, cacheType, imageURL) -> () in\n    imageView.image = image?.images?[0]\n}\nSo the improvement of it might be the performance. Indeed it will boost the decode time and memory usage for users who only want to use the first frame of GIF. However, the whole GIF image will be downloaded even you only need to display the first frame. Compared to the downloading time, I guess the decoding time would not be an overhead since it is implemented in C and just some operation on raw data (Remember Kingfisher is doing image decoding in a background progress as well, so there is no chance to block UI thread).\nBy introducing these two options, it is making the framework confusing and more complex. And the things you stored also might be not the same/cannot be restored to what you downloaded, which is also a potential problem.\nSo I guess this p-r will not be merged and we could find a better way to handle it later.\n. Fixed in #136 \n. I guess you are doing the right thing. But I just want to notice some detail here.\nThe memory size will be restricted to the limitation you set. However, instead of the byte size in memory, it is a \"cost\" related to your image resolution. Currently, Kingfisher is using the pixels count for it. \n\nmaxMemoryCost: The largest cache cost of memory cache. The total cost is pixel count of all cached images in memory.\n\nWhen new data is being stored in memory, the total cost in cache will be checked and compared to your setting. If there is no enough cost for your new image, the largest one already in the cache will be purged. So cache.maxMemoryCost = 30 * 1024 * 1024 means 30M pixels instead of 30M bytes. If you have a 32-bits depth RGBA image (that means white color is FF FF FF FF), 1 pixel would be 4 bytes, so the limit size would be 120MB for you (if you only store 32-bit images).\nThe disk cache will not be purged until you switch your app to background or you call the cleanExpiredDiskCacheWithCompletionHander method manually. It will swipe the your disk cache to a size under the limitation.\nAnd of course you need to set these properties on the correct cache. By default, Kingfisher is using the ImageCache.defaultCache for the UIImageView extension and default KingfisherManager.\n. Please update to 1.7.1 and have a try.\n. You can always use the components in Kingfisher separately. Maybe you could have a look at the ImageDownloader type.\n. You could find some example in the test files: https://github.com/onevcat/Kingfisher/blob/master/KingfisherTests/ImageDownloaderTests.swift\n. \u4ee3\u7801\u6ca1\u95ee\u9898\uff0c\u5c31\u8fd9\u4e48\u7528\u5e94\u8be5\u5c31\u53ef\u4ee5\u3002\u5982\u679c\u8fd8\u662f\u4e0d\u884c\u7684\u8bdd\u8bf7\u505a\u4e00\u4e2ademo\u6211\u4f1a\u518d\u770b\u770b\u3002\n. Thanks for it, but It is the new syntax for version 1.7.\n. Oh, sure. You are correct. I will handle it later.\n. Fixed in #148 \n. Thanks for the pull request. I will add Carthage support later before it could be merged.\n. I guess the answer is no. There are some types not subclass of NSObject so it might not be compatible with Objective-C. I suggest you use SDWebImage or YYImage instead if you need to target for Objective-C project.\n. It might be duplicated with #114 . Please update to the latest version and try again.\n. The downloader will only do download things. If you want to store it into cache, you need to use the ImageCache.\n. I believe you are using some outdated mirror of the pods repo. Please update it. I attached the screenshot of current CocoaPods spec repo.\n\n. Thanks!\n. Cool. Thanks for it.\n. Great! Thanks a lot for contributing.\n. Hi. Thanks for reporting this.\nI will investigate it soon.\nMay I know some detail about it, it would be great help if you could attach some code snippet or a demo project to explain more detail about what/how did you do.\n. Oh, that's fine.\nI will have a look at it and try something on camera permission requesting and around. Hope I can reproduce it.\n. That could help a lot to narrow down the problem! Thanks!\n. And it would be great if you could tell me something about how did you \"redirect the user to the settings panel\". Does this issue reproduce every time for you?\nI can not reproduce it by:\nswift\nlet url = NSURL(string: UIApplicationOpenSettingsURLString)!\nUIApplication.sharedApplication().openURL(url)\nSo I want to know did you do something else before you switch your app to setting panel or you are using another way to do so?\n. You could always use ImageCache type standalone. Maybe something like this.\nswift\nif ImageCache.defaultCache.isImageCachedForKey(\"your_key\") {\n    ImageCache.defaultCache.retrieveImageForKey(\"your_key\", options: KingfisherManager.OptionsNone) { (image, type) -> () in\n        cell.imageView.image = image\n    }\n} else {\n    let image = //Generate your image\n    cell.imageView.image = image\n    ImageCache.defaultCache.storeImage(image, forKey: \"your_key\")\n}\nOf course, you could do some wrapping affairs for it yourself to make it easier.\n. @Nautiyalsachin \nThe same code in Swift 4 now should be:\nswift\nif ImageCache.default.imageCachedType(forKey: \"your_key\").cached {\n    ImageCache.default.retrieveImage(forKey: \"your_key\", options: nil, completionHandler: { image, _ in\n        cell.imageView.image = image\n    })\n} else {\n    let image = //Generate your image\n    cell.imageView.image = image\n    ImageCache.default.store(image, forKey: \"your_key\")\n}. What's your deploy target? Kingfisher requires iOS 8+ and be used as a framework in Swift.\n. I guess it is some cocoa pods error instead of Kingfisher. Did you try some other pods?\nAnd may I know the content of your Podfile? \n. I have tried it in my environment and it seems work well for me (with pod version 0.39.0).\nJust did some search and it seems like you encountered this? https://github.com/CocoaPods/CocoaPods/issues/4373\nI guess maybe you could just downgrade to 0.38.2 as a workaround and wait for the new version of CocoaPods. Or you could also try to modify the pod 'Kingfisher', '~> 1.8' to some more specified version like pod 'Kingfisher', '1.8.2' (I am not sure it could work although).\n. assets library url is not supported yet.\n. It should not be a Kingfisher problem and you could have a look at the ViewController.swift to know the correct syntax.\nI am closing it.\n. @sheepy1 Hey,\nIt's cool. I'd like to merge it, but there are some conflicts now. \nIt would be great if you could make these changes from current master, since there are quite some changes from the version you based now. As result, it is not easy to resolve these conflicts in place :(\nWould you mind to resolve the conflicts and send another pull request for it? Thanks!\n. Closed for #165 \n. Thanks for it!\n. I am not sure how did you try it, but you may need to link to CFNetwork manually.\n. Cool. In fact it seems to be a change in the linking system. Before the CFNetwork is auto linked if you refer to Foundation. But the behavior was changed in Xcode 7. See this https://github.com/onevcat/Kingfisher/pull/78 for more.\n. Maybe you mean the kf_showIndicatorWhenLoading?\n. Should be fixed in https://github.com/onevcat/Kingfisher/pull/175\n. Sure, and It could be a feature in version 2.0.0 I guess. I will check if I have time to implement it recently. But for now, there is no time schedule yet.\n. Implemented in #201 \n. It is useful and seems not difficult to implement. I will add it later. Thanks for it.\n. Implemented in #185\n. Maybe you could just use the UIImageView extension with placeholder.\nswift\nlet defaultImage = UIImage(named: \"your_default_image\")\nimageView.kf_setImageWithURL(URL, placeholderImage: defaultImage)\nThe image property of imageView will not be set when there is an error during getting image from disk or net. So you will keep the defaultImage shown when there is a downloading problem.\n. Good catch! I will give a patch on it later.\n. Added in #184 \n. Kingfisher is using the image property directly for setting a GIF image to image view. So the animated image is not a sequence of images. It is not be played by startAnimating API, so you could not stop it by stopAnimating as well.\nA workaround for it is adding a wrap to convert the single animated image to an array of images and then play it with startAnimating in the image view set method completion handler. Like this:\nswift\nimageView.kf_setImageWithURL(URL, placeholderImage: nil, optionsInfo: nil, progressBlock: nil,\n    completionHandler: {\n        image, error, cacheType, imageURL in\n        if let image = image {\n            imageView.animationImages = image.images\n            imageView.animationDuration = image.duration\n            imageView.animationRepeatCount = 0\n            imageView.image = image.images?.last\n            imageView.startAnimating()\n        }\n    })\nThen, you can call stopAnimating on the image view to stop it when you need:\nswift\nimageView.stopAnimating()\nI hope it could help.\n. You response is a 403 Forbidden, which means the request itself is valid but some restriction is applied and the server refused to response it.  It is usually due to your server is doing some validation on the request and it thinks that the request does not have permission for it.\nYou may need to investigate what is the restriction. I guess the server might be doing validating on some header field like user agent. If so, you can use the requestModifier of ImageDownloader to modify your request to match the server exception as a workaround.\n. @mrchenhao Just want to confirm that did #190 fix it?\n. Cool, thanks for it.\n. The .swiftlint.yml is in the repo.\nIt seems to be the version problem. Since there is no version pinning option in SwiftLint, it will break since they added addition rules that produce an error. \nI will add a step of upgrading to latest swiftlint in Kingfisher's CI to prevent this happens again later.\n. @andreyz Hi, just checked the latest version of SwiftLint and there are only warnings instead of error. Could I know the error log of yours? Which does prevent the building process?\n. Cool. Thanks let me know it. :)\n. Implemented in #194 \n. Implemented in #210 \n. Done\n. @tripleCC \nLGTM. Would you please send a fix for the comment as well?\nAnd please ignore the broken tests. It is some race condition in CI environment and I am fixing it now.\n. Yes, you are right.\n. The \"options\" is being rewritten now for milestone 2.0.0, so you could just leave it there. They will disappear soon.\n. It is more likely a historical reason. There was no original data argument for this API before. Currently, it ensures the data is valid and could be converted to an image. However, this might not be a must in my opinion since we should be able to trust the data from sever here. Another reason is that the ImageCache could be used separately.  Converting the image first could make sure even if the user did not pass in an originalData, we could also store the image correctly.\nA PR on it is warmly welcomed. We should respect the originalData and store it directly. If it is lack of the data, we should convert the input image to data and store the result data instead.\n. Currently Kingfisher does not support to set a sequence of images once. However, if your image is a GIF animated one, you can just load it with Kingfisher's API and it is supported out of box.\nAnd you can always use the downloader separately to download all of your necessary images and then create and set the animationImages manually yourself currently. If it is necessary, you can also use the ImageCache to store them somewhere for quicker access later.\n. Sure. It would be cool if we have an API for the key frame images like animationImages. However, there are two concerns about it now.\n1. We are using UIImage.animatedImageNamed:duration: to keep the API the same for animating GIF, which is working perfectly now. It just setup a single image and set it to the UIImageView.image property. If we introduce another way for animation images, but with a different property of animationImages, it might be a bit confusing. So we may need to consider the API very carefully when implementing this. I guess a new extension on setting animationImages from an array of images would promise. If you decide to begin this work, please let us talk and decide what the API for it should look like.\n2. I am working on Kingfisher version 2 currently, which contains quite some changes including OS X support and better options. Since it will be merged into master later, there should be no need to do the work again for your modification. I suggest if you decide to contribute, you could make d2076776801773c0811387f2e81fc692d040e057 as a start point, which you could find in the feature/NSImage-support branch now.\n. That's cool. :)\n. @orta It's great you can help! Thank you,\n. It should be not difficult to add one, by using the same strategy of UIImageView. If you'd like, you could send a p-r on it. Otherwise I will try to add it later :)\n. Implemented in #221 \n. Cool. Thanks!\n. SDWebImage \u5b58\u5728\u8fd9\u4e2a\u95ee\u9898\u4e48\uff1f\u4e0d\u6e05\u695a\uff0c\u6709\u76f8\u5173\u7684 issue \u4e48\uff1f\n. Hi, there is no guarantee for a cache to be accessible indefinitely on disk. If so, it should not be a cache, but a persistence. Kingfisher is using the cache folder of your app to store the disk cache, which could be wiped by system whenever the device disk space is not enough.\nYou could set the maxCachePeriodInSecond and maxDiskCacheSize to something large, or infinity. By doing this, Kingfisher will never remove your disk cache and you could expect a long period of the cache. However, as said above, it does not guarantee a persistence store.\nYou could consider to download them and store the data in Document folder. But from Apple's guide, if the content is not user created and could be restored later, it should be placed in cache folder, or your app may in a risk to be rejected.\n. Thanks for mention it. I will check it later. And could you supply some reference for it, on removing the blend layer and how it could involve the performance.\nThank you.\n. Just had a detail look into this problem.\nAnd I believe instead of adding an option to remove alpha channel of the image, we could solve it in a more generic way. By implementing a method of transforming/re-render the image data would be better. \nSee #248 .\nSo, it would be cleaner to pass a special image transformer. I will update this issue when the transforming block implemented.\n. As mentioned above, should be customizable from Kingfisher 3.\n. Thanks for reporting this. I will check it later.\n. Hi, @schickling I just did some tests on it. I cannot reproduce your issue and the size is correct for me from both cache and internet.\nIs it possible that you are using something like \"@2x\" suffix in your image name?\n. Never mind. :)\n. Yes, it is a known issue and fixed in 2.0.0 (but not released yet). I guess I should give it a fix in current version as well. Will do it later.\n. Fixed in #216 \n. Implemented in #220 \n. Kingfisher \u4f1a\u4e0b\u8f7d\u5e76\u5c06 GIF \u8fdb\u884c\u9010\u5e27\u89e3\u7801\uff0c\u6240\u4ee5\u5982\u679c\u4e00\u6b21\u6027\u4e0b\u8f7d\u548c\u663e\u793a\u7684 GIF \u592a\u591a\u7684\u8bdd\u80af\u5b9a\u4f1a\u5360\u7528\u5f88\u591a\u5185\u5b58\u3002\u5efa\u8bae\u7011\u5e03\u6d41\u4e2d\u4f7f\u7528\u9759\u6001\u7f29\u7565\u56fe\uff0c\u800c\u6ca1\u6709\u5fc5\u8981\u4f7f\u7528 GIF \u539f\u56fe\u3002\n\u5982\u679c\u6709\u5176\u4ed6\u5185\u5b58\u6cc4\u9732\u65b9\u9762\u7684\u95ee\u9898\uff0c\u6b22\u8fce\u518d\u63d0\u51fa\u3002\n. @xspyhack \nKingfisher \u6682\u65f6\u5bf9\u4e8e GIF \u7684\u652f\u6301\u975e\u5e38\u521d\u7ea7\uff0c\u56e0\u4e3a\u6211\u81ea\u5df1\u5e76\u6ca1\u6709\u4f7f\u7528\u8fd9\u4e2a\u6846\u67b6\u6765\u52a0\u8f7d GIF \u7684\u9700\u6c42\uff0c\u6240\u4ee5\u5c31\u53ea\u662f\u5f88\u7b80\u5355\u5730\u5b9e\u73b0\u4e86\u4e00\u4e0b\uff0c\u73b0\u5728 Kingfisher \u5bf9\u4e8e GIF \u662f\u76f4\u63a5\u5168\u90e8\u52a0\u8f7d\uff0c\u5bf9\u4e8e\u65f6\u95f4\u8f83\u957f\uff0c\u5c3a\u5bf8\u8f83\u5927\u7684 GIF\uff0c\u786e\u5b9e\u4f1a\u5b58\u5728\u5185\u5b58\u5360\u7528\u4e0a\u7684\u95ee\u9898\u3002\n\u6211\u6ca1\u6709\u7ec6\u770b OLImageView \u6216\u8005 YYWebImage \u7684\u5b9e\u73b0\uff0c\u4e0d\u8fc7\u53ef\u4ee5\u731c\u6d4b\u57fa\u672c\u662f\u53ea\u9884\u5148\u52a0\u8f7d\u4e24\u4e09\u5e27\uff0c\u800c\u4e0d\u662f\u4e00\u6b21\u5168\u90e8\u89e3\u7801\uff0c\u8fd9\u6837\u663e\u7136\u53ef\u4ee5\u51cf\u5c11\u5185\u5b58\u5360\u7528\u3002\u4f46\u6211\u6700\u8fd1\u5e76\u6ca1\u6709\u65f6\u95f4\u548c\u7cbe\u529b\u4e3a Kingfisher \u6dfb\u52a0\u66f4\u597d\u7684 GIF \u652f\u6301\uff0c\u8fd8\u8bf7\u89c1\u8c05\u3002\n\u5982\u679c\u60a8\u6709\u5174\u8da3\u7684\u8bdd\u4e5f\u53ef\u4ee5\u53c2\u7167\u4ed6\u4eec\u7684\u5b9e\u73b0\u53d1 p-r \u8fc7\u6765\u5e2e\u52a9\u6539\u8fdb~\n\u8c22\u8c22\uff01\n. \u53e6\u5916\uff0c\u5982\u679c\u4f60\u60f3\u7528 Swift \u6765\u663e\u793a\u548c\u5904\u7406 GIF \u7684\u8bdd\uff0c\u53ef\u80fd Gifu \u4f1a\u662f\u4e00\u4e2a\u4e0d\u9519\u7684\u9009\u62e9\u3002\n\u5982\u679c\u4f60\u60f3\u4e3a Kingfisher \u8d21\u732e\u4ee3\u7801\u6539\u5584\u8fd9\u5757\u7684\u8bdd\uff0c\u53c2\u8003\u4e00\u4e0b Gifu \u7684\u5b9e\u73b0\u5e94\u8be5\u4e5f\u4f1a\u5f88\u6709\u5e2e\u52a9\u3002\n. :)\n. \u66f4\u65b0\u4e86\uff0c\u8bf7\u68c0\u67e5\u4f60\u662f\u4e0d\u662f\u7528\u4e86\u81ea\u5df1\u7684\u6e90\n. If you are using NSURLAuthenticationMethodServerTrust, you can add your server host to trustedHosts of ImageDownloader to mark your server trusted:\nswift\nImageDownloader.defaultDownloader.trustedHosts!.insert(\"yourhost.com\")\nAnd if you are using HTTP basic authentication, you could just modify the request by injecting with requestModifier of the downloader.\nHowever, if you are using other authentication methods, like client certificate, currently there is no way in Kingfisher for it. \nI believe we should add a delegate of it for better extensibility. I will check it to see whether I could do something on this later.\n. Now you should be able to use authenticationChallengeResponder for it.\n. Version 2.1.0 is released, which contains this feature.\n. Hi,\nYou could always use the ImageDownloader and ImageCache separately to download or cache/retrieve images.\nUsing image view extension of Kingfisher is not a must but an option and convenient way.\n. Hi, @GodIsI \nYou could use the methods in ImageCache to check whether an image is already cached or not.\nI believe the following code snippet would help if you are using the default cache:\n``` swift\nlet cacheResult = ImageCache.defaultCache.isImageCachedForKey(\"your_image_url\")\ncacheResult.cached // true or false\ncacheResult.cacheType // .None, .Memory or .Disk\n```\n. :) So could you please close this issue?\n. Hi, @michaelbina \nThanks for this. Kingfisher itself is a library, it is generally not a good idea for an image download/caching library to have another UI library as a dependency. As you said, Kingfisher supplies a progress callback so you could implement this quite easily yourself. However, built-in support for LoadingImageView or any other UI libraries will not be introduced into Kingfisher.\nAnd in case you missed it, I want to mention if you only need a loading indicator instead of a percentage indicator, you could just set kf_showIndicatorWhenLoading property of your UIImageView to true to enable a default system indicator.\nBest regards & good luck.\n. \u5355\u5e27\u7684 GIF \u56fe\u7247\u89e3\u6790\u6709\u70b9\u95ee\u9898\u3002\u5df2\u7ecf\u5728 #234 \u4e2d\u4fee\u6b63\uff0c\u7a0d\u540e update \u7248\u672c\u53f7\u3002\n\u8c22\u8c22\uff01\n. Hi, the sessionConfiguration will be used to create the session. Instead of setting its property, you may need to set the whole sessionConfiguration to recreate a session. Would you please try this?\n``` swift\nlet c = KingfisherManager.sharedManager.downloader.sessionConfiguration\nc.HTTPCookieStorage = NSHTTPCookieStorage.sharedHTTPCookieStorage()\nKingfisherManager.sharedManager.downloader.sessionConfiguration = c\n```\n. Hi @dopcn \n\u611f\u8c22\u63d0\u4ea4\u3002\u76f8\u8f83\u4e8e\u65b0\u52a0\u5165\u4e00\u4e2a property completionQueue \u6765\u9650\u5b9a\u56de\u8c03\u7ebf\u7a0b\uff0c\u662f\u5426\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u5df2\u6709\u7684 KingfisherOptionsInfo \u4e2d\u7684\u9009\u9879\u8fdb\u884c\u914d\u7f6e\uff1f\u53ef\u4ee5\u901a\u8fc7 KingfisherOptionsInfo \u7684 callbackDispatchQueue \u6765\u8fdb\u884c\u83b7\u53d6\u3002\u73b0\u5728\u6682\u65f6\u53ea\u5728 cache \u7684\u65f6\u5019\u4f7f\u7528\u4e86\u8fd9\u4e2a\u9009\u9879\uff0c\u53ef\u80fd\u5c06\u6240\u6709\u56de\u8c03\u90fd\u6539\u4e3a\u9075\u5b88\u8fd9\u4e2a\u9009\u9879\u4f1a\u66f4\u597d\u3002\n. @dopcn \u5bf9\u3002\n\u53ef\u4ee5\u53c2\u770b #114 \u548c #116 \n. @dopcn \u53e6\u5916\u518d\u8bf7\u4fee\u6b63\u4e00\u4e0b dispatch_async_safely \u548c optional \u7684\u95ee\u9898\u3002callbackDispatchQueue \u5e94\u8be5\u5e76\u4e0d\u9700\u8981\u662f Optional \u503c\uff0c\u53ef\u4ee5\u5728 dispatch_async_safely \u4e2d\u5224\u65ad\u4e00\u4e0b\uff0c\u5982\u679c\u5df2\u7ecf\u662f main thread \u7684\u8bdd\u76f4\u63a5\u8c03\u7528 block \u5373\u53ef\u3002\n\u73b0\u5728\u7684 dispatch_async_safely \u4e2d\u5982\u679c\u8f93\u5165\u7684 queue \u662f main queue \u7684\u8bdd\u5224\u65ad\u903b\u8f91\u5c06\u88ab\u7ed5\u5f00\uff0c\u4ece\u800c\u9020\u6210\u5728\u4e3b\u7ebf\u7a0b\u8c03\u7528 dispatch_async(dispatch_get_main_queue(),...)\u3002\n\u8bf7\u786e\u8ba4\u4e00\u4e0b\uff0c\u8c22\u8c22\uff01\n. @dopcn \u554a\u54a7..\u4e3a\u4ec0\u4e48 close \u6389\u4e86\uff1f\u662f\u8bef\u64cd\u4f5c\u4e86\u4e48\uff1f\n. \u6069..\u4e86\u89e3\u4e86\u3002\u8fd9\u5757\u5f53\u65f6\u786e\u5b9e\u4e5f\u5199\u5f97\u6bd4\u8f83\u4e71\uff0c\u540e\u6765\u6539 option \u7684\u65f6\u5019\u91cd\u6784\u4e86\u4e00\u6b21\u4f46\u662f\u6ca1\u78b0\u8fd9\u5757\uff0c\u5bfc\u81f4\u53ef\u80fd\u6709\u4e9b\u5730\u65b9\u6b20\u8003\u8651\u3002\n\u786e\u5b9e\u53ef\u4ee5\u53ea\u5728 Downloader \u91cc\u52a0\uff08cache \u7684\u8bdd\u73b0\u5728\u5df2\u7ecf\u6709\u4e86\uff09\u3002\u56e0\u4e3a\u4e0d\u7ba1\u662f manager \u8fd8\u662f image view \u7684 extension \u6700\u7ec8\u90fd\u8fd8\u662f\u8c03\u7528\u7684 downloader \u548c cache\u3002\u4e0d\u8fc7\u5176\u5b9e\u7edd\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u7528\u6237\u90fd\u5e0c\u671b\u5728 main thread \u91cc\u63a5\u53d7\u56de\u8c03\uff0c\u6240\u4ee5\u5982\u679c\u6709 dispatch_async_safely \u7684\u4fdd\u8bc1\u7684\u8bdd\uff0c\u8fd0\u884c\u5e76\u4e0d\u4f1a\u6709\u592a\u5927\u95ee\u9898\u3002\u5176\u5b9e\u6211\u4e2a\u4eba\u662f\u4e0d\u592a\u60f3\u5f97\u5230\u5728\u975e\u4e3b\u7ebf\u7a0b\u63a5\u53d7\u56de\u8c03\u7684\u4f7f\u7528\u573a\u666f\u7684...\n\u5148\u5728 Downloader \u91cc\u52a0\u4e0a\u5fc5\u8981\u7684\u7ebf\u7a0b\u56de\u8c03\u5427\uff0c\u7136\u540e\u518d\u770b\u770b\u600e\u4e48\u628a\u8fd9\u4e2a\u95ee\u9898\u68b3\u7406\u6e05\u695a\u3002\n. @cache0928 \u8fd9\u5f20\u56fe\u6211\u8fd9\u8fb9\u6ca1\u6709\u95ee\u9898\u3002\n. Should be fixed in #236 \n. Currently, the image transition will only work when the image is downloaded. Support for forcing transition is in plan but not implemented yet.\nCould you please try to clean your cache & try to see whether it works?\n. Maybe this will help? #228 \n. I had a brief look at it just now and the first impression is cool. I will check how it would behave in detail later today.\nThanks for contributing!\n. Thanks!\n. @dopcn \n1. \u8fd9\u4e2a\u6d4b\u8bd5\u786e\u5b9e\u53ef\u4ee5\u79fb\u9664\uff0c\u4e00\u4f1a\u513f\u6211\u5f04\u3002\n2. \u5c06 queue dispatch \u7684\u903b\u8f91\u5168\u90e8\u5c01\u5230 ImageDownloader \u662f\u4e0d\u53ef\u53d6\u7684\uff0c\u56e0\u4e3a ImageCache \u53ef\u80fd\u88ab\u5355\u72ec\u4f7f\u7528\uff0c\u800c\u4e14 ImageCache \u4ece disk \u8fdb\u884c\u8bfb\u53d6\u7684\u8bdd\u4e5f\u4f1a\u8d70\u72ec\u7acb\u7684 thread\u3002\n3. \u91cd\u65b0\u5ba1\u89c6\u4e86\u4e00\u4e0b\uff0c\u5728 ImageDownloader \u4e2d\u4f7f\u7528\u989d\u5916\u7684 NSOperationQueue (\u4e5f\u5c31\u662f sessionDelegationQueue) \u6765\u4f5c\u4e3a delegate queue \u4f3c\u4e4e\u6ca1\u6709\u5fc5\u8981\uff0c\u4e3b\u7ebf\u7a0b\u5c31\u53ef\u4ee5\u5f88\u597d\u5730\u62c5\u5f53 delegate callback queue\u3002\u6b64\u5916\uff0c\u76f4\u63a5\u4f7f\u7528 main queue \u505a delegate queue\uff0c\u914d\u5408 ThreadHelper \u8fd8\u53ef\u4ee5\u5728\u9700\u8981\u4e3b\u7ebf\u7a0b\u56de\u8c03\u65f6\u51cf\u5c11\u4e00\u6b21\u989d\u5916\u7684 dispatch\u3002\u6211\u4f1a\u628a\u5b83\u6539\u56de\u53bb\u3002\n\u5176\u4ed6\u5e94\u8be5\u6ca1\u4ec0\u4e48\u4e86\u3002\u60a8\u60f3\u8981\u4e00\u4e2a\u9879\u76ee\u7684 commiter \u6743\u9650\u4e48\uff1f\u8fd9\u6837\u4ee5\u540e\u8ba8\u8bba\u548c\u6539\u52a8\u4e5f\u4f1a\u65b9\u4fbf\u4e00\u4e9b\u3002\u5982\u679c OK \u7684\u8bdd\u6211\u7a0d\u540e\u628a\u4f60\u52a0\u6210\u9879\u76ee maintainer\u3002\n. Fix: \n\u53c8\u60f3\u4e86\u4e00\u4e0b\uff0c\u6d4b\u8bd5\u8fd8\u662f\u4fdd\u7559\u5427\uff0c\u4f5c\u4e3a image extension \u56de\u8c03\u5fc5\u5b9a\u5728 main queue \u7684\u4fdd\u8bc1 \uff08\u4e0e options \u4e2d\u6307\u5b9a\u7684 queue \u65e0\u5173\u3002\uff09\n. I will merge it.\n. Image Extension \u56e0\u4e3a\u662f UI \u76f8\u5173\uff0c\u56de\u8c03\u662f\u4e0d\u5e94\u8be5\u6709\u4e3b\u7ebf\u7a0b\u4ee5\u5916\u7684\u9700\u6c42\u7684\uff0c\u7406\u5ff5\u4e0a\u6765\u8bf4\u6d89\u53ca\u6b63\u8bef\uff0c\u800c\u5e76\u4e0d\u662f\u7075\u6d3b\u6027\u7684\u95ee\u9898\uff0c\u6211\u8ba4\u4e3a\u5728\u5e93\u91cc\u76f4\u63a5\u5e2e\u52a9\u7528\u6237\u5904\u7406\u6389\u4f1a\u66f4\u53cb\u597d\u4e00\u4e9b\u3002\u73b0\u5728\u6211\u4f7f\u7528\u6587\u6863\u8fdb\u884c\u5bf9\u6b64\u8fdb\u884c\u4e86\u4e00\u4e9b\u8bf4\u660e\uff0c\u4e0d\u8fc7\u5176\u5b9e\u66f4\u597d\u7684\u505a\u6cd5\u662f\u76f4\u63a5\u675c\u7edd\u5728 UIKit extension \u65b9\u6cd5\u4e2d\u4f20\u5165 queue \u9009\u9879\u7684\u53ef\u80fd\u6027\uff0c\u6dfb\u52a0 assert \u4e5f\u8bb8\u662f\u66f4\u597d\u7684\u9009\u62e9\u3002\nmaintainer \u5c31\u662f\u53ef\u4ee5\u76f4\u63a5\u5728\u8fd9\u4e2a\u9879\u76ee\u91cc\u505a branch \u548c commit\uff0c\u4ee5\u53ca\u5408\u5e76\u548c\u5173\u522b\u4eba issue \u7b49\u7b49\uff0c\u5927\u6982\u5c31\u548c\u81ea\u5df1\u7684 repo \u662f\u4e00\u6837\u7684\u3002\nP.S. \u53ef\u80fd\u7684\u8bdd\u8fd8\u662f\u5c3d\u91cf\u7528\u82f1\u8bed\u4ea4\u6d41\uff0c\u8fd9\u6837\u522b\u7684\u5f00\u53d1\u8005\u4e5f\u80fd\u53c2\u4e0e\u8fdb\u6765\u3002\u8c22\u8c22\u3002\n. \u8fd9\u79cd\u95ee\u9898\u8bf7\u5230 Stackoverflow \u63d0..GitHub issue \u5e76\u4e0d\u662f\u95ee\u7b54\u7684\u5730\u65b9\u3002\u4e0d\u597d\u610f\u601d\u3002\n. Basically implemented in #346 \n. There is not a default options now. And the original default options is not intended to be public in fact. It was a API design mistake and prevents the flexibility of the options. So we removed it in version 2.0.\nIf you really need such a thing, I suggest you could create a helper method for the Kingfisher image extension, with setting/passing the scale option.\n. Thanks!\n. @burczyk Yes, I agree that this would be a useful feature. I will see how could I implement it in a good way. Instead of a callback in the kf_setImage methods, I guess some hooks in the cache or downloader would be a better place for them. By doing so, you could even cache your blurred or cornered image instead of the original one, so there is no need to process it again and again.\n@ivanbruel Great to know your implementation. However it seems there is quite a lot of work to do if it is used. So I guess I could implement it myself later for it.\n. Implemented in Kingfisher 3. Check ImageProcessor for more.\n. Hi, @krider2010 \nThanks for the pull request. I just took a look at it and I believe it is a cool feature that could boost the speed.\nExcept the comment above for the implementation detail, I have several concern and want to have a discussion.\n1. The KingfisherManager type is now used as a \"glue\" between ImageDownloader and ImageCache. Framework users/image extension could use KingfisherManager to download and cache images without knowing the detail of downloader and cache. However, I don't think it is the situation for ImagePrefetcher. The prefetcher property is even not used in KingfisherManager. It would be better to \n2. Now ImagePrefetcher is relying KingfisherManager and caching the downloaded images to the manager's cache. It is probably not a good choice. There is no chance for a user who wants to cache the prefetched images to another cache besides the manager's one.\nHow do you think about these?\n. Oops, sorry for the cut off. I was considering whether we should contain a prefetcher in the manager as a member. In fact at least we are not using it at all in the manager.\nBut yes you are right. It is already a good start point for it now. I will consider how to improve/refactor this to a better way later before it could be released. Now please just fix that obvious things and I will merge it when everything looks good!\nThanks in advance!\n. Great. Thanks for this.\n. If you find a issue, you could go deeper to find what happens and then submit it with detail to point out where and how the problem is.\nOpening an issue like this has nothing to help, but a waste of time.\n. Thanks for it. \nHowever, Swift ABI is not stable yet, and every new build of Swift (Xcode) would break the earlier built framework, even when the syntax keeps the same. You cannot use the old one once you upgrade your Xcode. Since that, there is high risk that the build breaks when different versions of Xcode are used (it always happens when Xcode upgrade, because some developers would like to insist on the older version, but some would upgrade to latest.) Only one framework file could be supplied in release for Carthage to download, but there might be different Swift versions.\nSo, a better way now, at least for framework creators, is only supplying the source code and let the users to build it with their own Swift version. It is also a high voted feature for carthage to build some specified frameworks only. Now it is quite slow and painful to use Carthage, I believe they should do something to improve it.\nAnyway, thanks for your suggestion on it. I will add the pre-built framework after Swift ABI reaches stable. But until then, there is no plan to contain a framework zip in release. I hope you could understand that.\n. No, I mean building only one framework out of many. The most wanted now would be something like this, for example:\nbash\ncarthage update --framework Kingfisher\nSo when you adding a framework in your Cartfile, you could leave others untouched and just build the newly added one.\nAnother lack feature of Carthage now is that it could not skip the already built framework, even the environment is all the same. That is also the main reason why Carthage is so slow. It will always try to build it from scratch, instead of checking and using the built ones.\nSo instead of the framework developers to add framework zip file every time when releasing a version, it would be great help if Carthage could implement these lacked feature. So ALL the frameworks could benefit from the speed boosting.\n. @ivanbruel Thanks!\n. Thanks, it makes sense. \n. Yes, you are right.\n. Hi, @kbpontius \nI guess you could get the indicator view by accessing imageView.kf_indicator and then set it there. Does it work for you?\n. @korzonek Cool. Thanks for letting me know code beat. I'd like to contain it in README, but would you mind to place the badge next to the platform badge, in the read me header?\nThanks!\n. Maybe you can see this.\n. \u4e0d\u660e\u767d\u95ee\u9898\u3002\u800c\u4e14 issue \u5e76\u4e0d\u662f\u63d0\u95ee\u9898\u7684\u5730\u65b9..\u8bf7\u5230 Stackoverflow \u6216\u8005\u627e\u522b\u7684\u9014\u5f84\u95ee\u4e00\u4e0b\uff0c\u8c22\u8c22~\n. Hi.\nThere is no time period limitation for memory cache. Different from disk cache, the memory cache is not persisted, so there is no need to set something like \"expired date\" for it, IMO.\nKingfisher will handle the memory cache automatically, in most cases you could leave the work to Kingfisher. However, if you need to clear the memory cache, you could use the clearMemoryCache method in ImageCache to force empty the memory cache.\n. Hi, @borut-t \nIt makes sense and might be a better approach to invalidate the corresponding memory cache too. I will do it later.\nThe purpose of expiration date of disk cache is limiting the disk size used. It should not be used for invalidating and updating an image since there is no guarantee to clear disk cache in an accurate time (the disk cache cleaning will only happen when the app being about to be switched to background or you call the cleaning methods explicitly). \nSo if you want to updating an image after some time interval accurately, a better way would be use a URL with some time stamp appended. Kingfisher will recognize it as a new image, then download/cache it.\n. After some consideration recently, I believe it is not a good idea to remove the memory cache when expired disk cache gets cleaned.\nIf we only change current implementation, we will suffer from a separation of API's name and its behavior, which is not acceptable. So I decide to leave it to a later major update and then I will reconsider about this.\nCurrently, you may observe the KingfisherDidCleanDiskCacheNotification and clear the memory cache, if the disk expiration is really critical for you. As mentioned above, the design purpose of disk cache is just a soft limitation of disk size, instead of accurate validation.\n. Thanks!\n. Hi,\nThanks for the p-r. But I think it is no need to specify a minor version in dependency.\n. Now you could use the ImagePrefecher for this.\n. @rain2540 Thanks for it. I will check & merge it later!\n. Fixed in #290 \n. Thanks for considering to contribute. \nBut does this make sense for you? I think it could give a way to stop GIF without changing current implementation: https://github.com/onevcat/Kingfisher/issues/187 . I cannot see much improvement so I am afraid it will not be merged yet.\nAnyway, thank you! \n. @bistrform What's your version of Kingfisher? It should be already fixed here https://github.com/onevcat/Kingfisher/pull/224/files\n. Does the BackgroundDecode option work for you?\n. @mmonroe86 It is not what backgroundDecode does. It refers to decode the image from a certain data format (JEPG or PNG) to a raw pixel representation for faster rendering. But it does NOT mean to unzip your data from a format (like ZIP or GZIP) to a plain uncompressed format.\nIt is not recommended to gzip a binary (like an image) when sending the response to the client since they are already in compressed format. If you choose to compress it again with gzip, maybe you need to implement your own ImageProcessor to decompress it first before it can be sent to Kingfisher's built-in image processor. \nYou can find some guide on ImageProcessor in this wiki page. . Hi, @jarsen \nThanks for opening this issue.\nIf you are integrating Kingfisher by CocoaPods, only the classes files will be imported and built. If you are using Carthage, although all the files will be fetched to your Carthage folder, only the framework will be built and no demo things will be used. Neither will cause the polluting problem. However, yes, if you integrate by dragging the project file into your project and then build the framework, it will happen.\nContaining a demo in the repo is very common, so the potential users could just download and see the demo without much effort, then choose whether they want adopt in. So, I prefer solution 2 on it, maybe just like the way Alamofire is doing. A p-r on this is warmly welcomed!\nThanks in advance.\n. I think I could do this later.\n. @frankrausch Sorry for my laziness. \ud83d\ude02\nSure. It would be great if you'd like to do so! However, in fact we have already have a \"Demo\" folder, in which demo files are located. Instead of moving the demo files, this issue is related to make another Kingfisher-Demo project to hold all the demo targets.. BTW, your work of Typographizer looks fancy!. I just merged the most recent commit to master, so you could just start from master! Thanks!. Fixed in #869 \nThank you @frankrausch !. Hi, @ogezue \nKingfisher will not store the ETag information from server or handle it transparently. It is possible to implement a ETag based cache yourself. There was a wiki for it and still valid for current version. You can find it here: https://github.com/onevcat/Kingfisher/wiki/How-to-implement-ETag-based-304-(Not-Modified)-handling-in-Kingfisher\nHowever, it is not recommended to do so strongly. The cache policy used in Kingfisher is very simple by only checking the URL or cache key, so it could avoid to sending requests to your server at all. A much easier implementation for the same purpose might be changing your image url with something like a time stamp query (e.g. http://domain.com/image.jpg?t=123456) then let the client to know the latest URL.\n. @sreeji44 @FredholmIsak \nHi, as mentioned in README, the newest version of Kingfisher (version 2.2.0) supports Xcode 7.3 and Swift 2.2. If you are using an earlier Xcode/Swift version, you may want to spin your version to 2.1.0.\n. There is no need for that. Kingfisher will check both memory and disk cache for a URL, and if it is there, the cached image will be used instead of downloading again. So probably the thing you want is already implemented in Kingfisher.\nHowever, in case you really need it, you can use the isImageCachedForKey: method in ImageCache.\nAnd I just want to mention that it is not a good idea to ask question in GitHub issue. If you find any problem and/or have a feature request, issue would be a good place. But for a question like this, a proper place for this would be in Stackoverflow :)\nGood luck!\n. @AhmadFayyas Answered it and hope it could help you!. Cool, thanks for it.\n. http://cocoadocs.org/docsets/Kingfisher/2.2.0/Classes/ImageDownloader.html#/s:vC10Kingfisher15ImageDownloader15requestModifierGSqFCSo19NSMutableURLRequestT__\n. Since the image setting methods will use the default downloader, you could just set the modifier block to the default downloader to make things easier:\nswift\nImageDownloader.defaultDownloader.requestModifier = {\n    request in\n    // Set request header here\n}\n. :) Never mind~\n. Thanks for reporting this. I will take a look at it.\n. Should be fixed in #281 \n. Oops, Forgot it :(\n. It should be fixed in 2.2.2. \nThanks for catching it!\n. Maybe you could try to clean the derived folder (~/Library/Developer/Xcode/DerivedData)? \nLots of build related issues could be solved after a clean.\n. I guess currently is not supported automatically.\nWe may need to implement this for redirecting. \nFeature in plan.\n. Sorry but I wish I could have time to implement it soon, in next week. Let's see.  :(. @bluesoulx Just tested with Kingfisher and Facebook image url. It seems that the 302 redirect is already handled by NSURLSession now and I could load the image from the \"http://graph.facebook.com/{Fb_UserId}/picture?type=large\" without problem. Could you confirm this too?. @jackyzh Sorry for the late reply!\nThanks for the pull request. It seems cool at first glance. I will take a look deeper later. Since the APIs of UIButton and NSButton are quite different, I guess it should be no problem to keep them separated. It will not be hard to combine them into one too, if we'd like to do so later.\nCheers.\n. Brilliant! Thanks for this.\n. Thanks for it. I also removed some unnecessary reference of NSButton extension in #292 \n. It makes sense! Thanks for pointing it out.\n. Wow, amazing! GJ @xspyhack \nIt seems cool for a first glance to me. I will take a detail look on it later!\nThank you for your contributing!\n. I didn't see a leak here since the strong self will be released in either of the completion handler. However, I will check it twice later to ensure that.\n. @kylebegeman How did you profile for this? I didn't see any leak in Instruments for it.\n. Duplicated with #280 \nIt's an Apple issue instead of Kingfisher and we already have a workaround in recent version.\n. The latest version of Kingfisher only supports from Swift 2.2. So maybe you need to pin your version to an earlier one if you are using Xcode 7.2. Please see README for more.\n. Hi,\nThe main purpose of Kingfisher is downloading/caching images from web. Since you can use the components in Kingfisher separately, there is an ImageCache type to help you manage the cache for images, either from web or local. However, there is not a component to load a local image directly currently. You may need to use image APIs from Cocoa/CocoaTouch to load an image and then send it to the ImageCache, if it is not already in the cache.\n. Hi, \nThanks for considering to contribute! We could discuss it.\nIn fact I am not quite sure about whether it could be useful to have a feature to load from local disk. It will not boost your loading process.\nIf you are using UIImage(named:), the image will automatically cached in memory. If you are using a path or data object to create an image, it could be also very easy to implement a cache by using NSCache, instead of introducing a lot of unrelated (web-oriented) code from Kingfisher.\nCould I know something more your use case? Why do you need to cache an image from disk which is already there?\n. Ah,\nYes, it makes sense that you have a mixed source of images. \nSure, it could be a useful feature in your case to have a framework to handle. Since I am not quite familiar with loading an image from photo library or iCloud, I will investigate them first to see whether we could keep using current API for it as well as make it back compatible. If not, we may need to add some new APIs for it.\nAnd cool, if you'd like, a p-r for this will be warmly welcome! :)\n. The ImageCache for disk is not using the main queue for IO, so there is no synchronous way to load image from disk safely. The only reliable method of loading an image is retrieveImageForKey(_:options:completionHandler:). You could use it at any time to load an image correctly, even you just add it into the cache.\n. @jaipee1 Thanks for commenting. But now for Kingfisher 5, we have a LocalFileImageDataProvider for this task, which works better and seamlessly with existing Kingfisher features. See this.. Hi,\nThe default options in version 1.x was not intended to be mutable. So we removed it in version 2.x.\nYou could simply create a wrap method and pass your options there to make things easier.\n. It was a workaround for the lack of autocompletion for methods with default parameters in Swift 1.x and Xcode 6.x. Now in Swift 2 this part works better so there is no reason to keep them!\nThanks for it. \ud83d\udc4d \n. Hi, it seems that you are still using Swift 2.1 or earlier. The latest version of Kingfisher supports from Swift 2.2. You could solve it by upgrading to the latest Xcode 7.3 (which contains Swift 2.2) or specify an earlier version of Kingfisher in you Podfile.\n. And I believe Kingfisher 2.1.0 is the latest version which is compatible with Swift 2.1.\n. You can find a download link for the dmg file here https://developer.apple.com/downloads/\nBut you may need a developer account to access this page.\n. Hi,\nThanks for pointing it out!\nIn fact this file is now quite different from the one being used in HanekeSwift. It's now more likely another derivation from the original one in CryptoSwift. I will check whether I can remove the description about Haneke and make it following CryptoSwift's license directly.\nThanks in advance.\n. See #310 for more.\n. I cannot reproduce this crash.\n. I believe it should not be related to Kingfisher.\nNormally, it might just because you forget to connect your IBOutlet.\n. It is not released yet. Please do not use master branch, but specify a version/tag to use Kingfisher.\n. Oops. Although I don't know why, but the code looks good to me.\nThanks for it.\n. Cool. It makes sense. Thanks for the explanation.\n. The image will be loaded by default if it is started, even you do not use the image after loading finished. You could try to use kf_cancelDownloadTask to cancel a task if you are sure it is no longer needed anymore. See the Cancel Task part of read me for more.\n. @googlb You could just call kf_cancelDownloadTask in the tableView(_:didEndDisplaying:forRowAt:) method of your table view delegate.\n. \u4ece 2.2.1 \u5f00\u59cb\u652f\u6301\u3002https://github.com/onevcat/Kingfisher/pull/278\n. It is intended to support app extension, so we cannot use sharedApplication here.\n. Hi, @pixyzehn\nThanks for the p-r. Would you mind to send another pull request but change the parameter name from type to value? It should not be a type in fact.\nThank you!\n. \ud83d\udc4d \nThanks!\n. Hi, @racer1988 \nThanks for the link and information.\nI checked the doc from Apple. Since there is no low level calling in Kingfisher at all, so I believe there should be no need to do any modification in Kingfisher to fully support IPv6.\n. Yes, Kingfisher fully supports IPv6 only network. I am using Kingfisher in my company project and it was approved several weeks ago and today. So I believe it might be other reason for you. Are you using any thing like IP address to access any resource?\n. Currently no. But it will be an interesting feature. I will consider it in a later version. (P-R for it will be welcome as well, let me know if you want to do so.)\n. @jdmoreira Sure!\n. Merged.\n. @mihaibulic Thanks for letting me know it.\nMay I know the number of images you are trying to fetch as well as the maxConcurrentDownloads you are using? It might be help for me to track what happens.\nThanks!\n. Hi, @mihaibulic \nI checked it and failed to reproduce your issue.\nFor you case, since you were only prefetching 3 images, the requested count should be always the same as prefetchResources.count. It will produce an empty slice and should not lead a crash.\nI am now not sure what could lead the requested count be larger than the total resource count. Could you reproduce this error in a good way, or even better supply a simple demo so I could dig it deeper?\n. Thanks! It could help.\nI will take a second look at it later and let you know if there is any progress.\n. And for a first glance now, I guess it could be a problem of using the same downloader for both the prefetcher and retrieveImageWithURL.\nWould you please try to pass an option to the image prefetcher to specify another downloader to see whether the issue still being there?\nYou could do that by changing the line \nswift\ncurrentPrefetcher = ImagePrefetcher(urls: prefetchUrls)\nto\nswift\ncurrentPrefetcher = ImagePrefetcher(urls: prefetchUrls, optionsInfo: [KingfisherOptionsInfoItem.Downloader(ImageDownloader(name: \"downloader\"))])\n. It would be better to do so. Since the downloader will count up and combine all tasks with the same URL, so there could be a chance that even you called stop on the prefetched, but there are some other downloader (or prefetcher) is requiring this resource. So the download progress might not be stopped as expected.\nUsing standalone downloader for each prefetcher would be a more safer way here.\nIf this could solve your issue, I will switch to a new created inner downloader for each new prefetcher, so this potential issue could be solved completely.\n. Hi, @mihaibulic \nIt could be a problem if you are using the same downloader for multiple prefetchers and retrieve method (the retrieve method is using a default downloader if you do not specify one). \nA downloader in Kingfisher will count the download request sent for a same URL, if the downloading for that URL is already there, it will prevent the later requests. The same thing happens when you try to stop a download: if the task count for a URL is not 0, it means there are still some other task waiting for the download, so it will not be stopped.\nFor both cases you described, if you are using different downloaders, the two downloading processes should be independent. Calling stop on a prefetcher should have nothing to do with another one, they do not share state each other (unless you are using the same downloader).\nI will try to build a demo to see how can I regenerate this problem later today, and let you know if there is any progress.\n. It is worthy to try that, using a different downloader instead of reusing a previous one.\nEspecially if you are creating new prefetcher right after you stop the previous one. Although the stop methods will try to cancel these download tasks in the current main runloop (I assume you are trying to stop and recreate them in main thread), the download task finishing callback will arrive at the next main run loop, so it could cause a problem.\n. That should be no problem.\n. Should be fixed. Thanks all!\n. Hi,\nI suggest to always use weak instead of unowned if you are not sure about the reference relationship, especially when doing some async networking request. I believe it should be totally OK to use weak in your completionHandler, the only side effect is that your self will be released a bit later when the image request finished.\nHowever, for this particular case, I guess it could be an improvement for Kingfisher. If the weak self does not exist any more, it should not call the completion handler since the owner of image view was already released and it does not care about it anymore.\nI will make a patch for it soon.\n. Fixed in #319 \n. There is a plan to add some hook after the image being downloaded and just before cache. So you could do additional editing for the image once, then load the edited images from cache later.\n. Implemented in Kingfisher 3. Check ImageProcessor for more.\n. It could be more help if you could supply more information on it.\nFor example, is there any useful log or information? Could it be just a slow network connection?\n. You could set the placeholder image to your current old image to prevent the disappearance. And there is already an out-of-box indicator to use. Try to set kf_showIndicatorWhenLoading of UIImageView to true to show an indicator while downloading.\n. Should be fixed in #309 \n. Embarrassing! Thanks for it.\n. That's true. I will check whether we could enable it in Release build without introducing any issues.\n. Turned on in Swift 3 branch.\n. As #320 \nFeature in plan.\n. Implemented in Kingfisher 3. Check ImageProcessor for more.\n. @lucasecf Maybe it worth to check https://github.com/onevcat/Kingfisher/issues/810, although it is  not implemented yet.. You need to add CFNetwork.framework as a linked framework for your project manually :(\nI guess it is a regression of the latest Xcode. See #169 and #78 for more.\n. The cache system is always storing the original image now. There should be no chance in Kingfisher now to store a modified version of image. (It is a feature in plan and will be added later. Ref: #326 and #320)\n. Hi, @ArtisOracle \nMay I know for which target you are developing for, iOS or OS X?\n. Just did some search and this post suggests to check whether you are copying the dSYM into your app bundle.\nNot quite sure what happened yet, since I myself submitted a version with Carthage installed Kingfisher recently without any problem.\nWould you mind to check that post and make sure there is no dSYM file in wrong place?\n. :) Never mind. Could you close this issue now?\n. Hi, @kostapappas \nThanks for the idea. A pull request on this will be welcomed!\n. It will not be supported for a while.\nRef #54 #362 \n. It makes sense! Thanks for this.\n. Not sure what happened. But there is no other report on it, so I guess it should be a rare case.\n. Sure. I will create a swift3 branch and would you mind to open another p-r to there?\n. I believe it is a good start point. We will do some more detail work on compatibility for following Swift 3 API guidelines. Thanks for it.\n. Hi, @Codeido \nThanks for contacting. It's a great idea. However, I believe this feature is already contained in Kingfisher.\nYou could set kf_showIndicatorWhenLoading for your ImageView (both UIImageView and NSImageView) to enable the indicator during loading image from web. I should add it readme file to make it clear. (And if you'd like, you could create a p-r for the readme file to add this).\nOf course, any contribution on improving it is warmly welcomed. :) \n. There is already a swift3 branch for it. However, it is just a auto migration and not following Swift 3 API guide at all.\nKingfisher will not support Swift 3 in such an early stage, since it is only the first preview. There could be quite a lot of additional changes in Swift 3 and now no one could use Swift 3 in their product.\nMaybe we will work on it from next month.\n. Swift 3 support is in progress in #371 \n. Swift 3 supported from Kingfisher 3, and in master branch now.\n. Great to hear you solved it!\n. Hi, @koji-inoue \nThanks for this p-r. It looks good to me at a first glance! I will take a detail look to it later.\nThank you.\n. \ud83d\udc4d \n. Feature in plan. See #320 and #326 \n. Implemented in Kingfisher 3. Check ImageProcessor for more.\n. Hi. @onmyway133 \nThanks for letting me know your repo. It seems great and cool!\nCommonCrypto could be used in a Swift app or extension target, but not in a framework. \nI would like to use your work if I am working on an app project. However, Kingfisher is a framework itself, so I prefer to depend less or no other frameworks. So the users could have no concern about conflicting with other frameworks.\nI hope you could understand it. Thank you!\n. It's now isolated and should work properly.. @Haojen \nKingfisher will use a default CacheSerializer to encode the processed image data when storing it to disk. If you need to keep all the original data (including exif), you could implement your own serializer to just store the original data.\nSee our wiki to know how to write and apply a custom serializer. Once you have an image from original data, you should be able to get the exif from it.. @leoMehlig Thanks for the p-r.\nSwiftLint is keeping introducing new rules that prevent compiling. I found sometimes the newly introduced rules make no sense and it might cause users a bit confused since the error, I decided to remove SwiftLint from this project. The master branch is now already SwiftLint-free, and I will do it for the swift3 branch later too. So I just close this p-r without merging it.\nAnyway, thank you for the contributing!\n. Thanks!\n. It's not an issue so I am closing this.\nAnd by using barrier, you could ensure the safety of multiple threads instead of just one. The resource will not be shared until the barrier queue exits. . There is a calculateDiskCacheSizeWithCompletionHandler method to show you the size of the whole disk cache. But now there is no method or property exposed for the expired cache size. The cache system is more likely a black box and generally speaking you could use it without worrying this. It is really a rare need to show the expired cache size (since they will be cleaned out from disk when the user switch you app to background).\n. TODO: Add repeatCount and related delegate methods to AnimatedImageView.. Supported in #829 . Thanks!\n. @TheSwifter I believe you could use the requestModifier of ImageDownloader to modify the image request. You could find some description of it in the README.md:\n``` swift\nlet downloader = KingfisherManager.sharedManager.downloader\n// requestModifier will be called before image download request made.\ndownloader.requestModifier = {\n    (request: NSMutableURLRequest) in\n    // Do what you need to modify the download request. Maybe add your HTTP basic authentication for example.\n}\n``\n.requestModifier` was removed from Kingfisher from version 3. Instead, you may need to use a modifier to change your request. See this for more.\n. The master branch is now for Swift 2.2, and there is a plan to jump to Swift 3 later.\nThere should be not so much change needed for Swift 2.3, so it would be fine to setup a swift2.3 branch later for back compatibility.\nI will open a swift 2.3 branch later.\n@andreyz Would you mind to open another p-r for that branch? Thanks.\n. And it would be great help if you can change the travis setting to make test passing.\n. Amazing! No problem with the CI errors, I will trigger them again and confirm everything goes well before merging.\nGreat work! Thank you for your contributing.\n. @alessandro-martin Thanks for the answer. \nIt's true that you could get the image without setting to an image view. However, you might lose the cache part if you just use downloader standalone as well. (You may need to call the cache methods yourself)\n@Minitour For your case, there is no worry about network usage. Kingfisher is smart enough to recognize that this image url is already in downloading progress. It will not start another download when you try to set a same url to the second image view. Once the download finishes, both of your image views will be set.\n. @Elshad No, it will not be added to downloader, since the downloader should not know anything about cache.\nInstead, you could try the methods of KingfisherManager, in which a method taking care of both download and cache contained.\n. @jeffreylyg \u8bf7\u95ee\u4e0b\u6709\u5b9e\u4f8b\u7684\u56fe\u7247\u4e48\uff1f\u6211\u53ef\u4ee5\u7528\u6765\u6d4b\u8bd5\u4e00\u4e0b..\n. \u6211\u7684 Safari \u4e5f\u662f\u4e0d\u80fd\u8bc6\u522b\u7684\uff0c\u4e0d\u8fc7 Chrome \u53ef\u4ee5\u3002\n\u52a0\u611f\u53f9\u53f7\u7684\u7248\u672c\u4e03\u725b\u8fd4\u56de\u7684\u662f\u4e00\u4e2a webp \u56fe\u7247\uff0c\u6682\u65f6 Kingfisher \u4e0d\u652f\u6301 webp \u683c\u5f0f\uff0c\u6240\u4ee5\u65e0\u6cd5\u4f7f\u7528\u3002\n\u6211\u6ca1\u7528\u8fc7\u4e03\u725b\u7684\u670d\u52a1\uff0c\u4f60\u53ef\u4ee5\u770b\u770b\u6709\u6ca1\u6709\u4fdd\u6301 png \u7684\u8bbe\u7f6e\u65b9\u6cd5\u3002\n. Thanks for this cool p-r and your great effort on it. \nIn fact I am now considering whether Kingfisher should support WebP or not.\nWebP is currently not widely supported or used, especially on Apple's platforms. I believe the costing of introducing a new framework as dependency and disabling bit-code support is not negligible for quite a few users. The core concept of Kingfisher is lightweight, with only necessary part being included.\nI will leave this pull request open for a while before I could have a final decision later.\nAnyway, good job on it. Thanks!\n. Will not be added in Kingfisher. At lease for now.\n. From Kingfisher version 3, you could implement an ImageProcessor and convert any format (including webp) to UIImage. We will not introduce a webp framework dependency into Kingfisher, but you could implement it quite easily now. See this for more.\n. P.S. There is a WebP framework as plugin for Kingfisher now. Check https://github.com/yeatse/KingfisherWebP. Oops...\n. Thanks for pointing it out\n. What a bad news.\nI think we could commit it out temporarily until we find another way to test it.\n. testSSLCertificateValidation is removed temporarily in #366 \n. :] Thanks for the great work!\n. @rabbitinspace \n\n. You could try to set preloadAllGIF to true to decode all data at once to get better scrolling performance (with more using of memory although.)\n. Prerelease 3.0.0-beta.1 https://github.com/onevcat/Kingfisher/releases/tag/3.0.0-beta.1\n. So what you need is the cache feature. You could use ImageCache class standalone for this, instead of setting a resource.. It's a good shorthand and I'd like to see it in Kingfisher.\nWould you mind to add it and send me a p-r? I'd prefer \"kf_setImageWithURLString\" as the API name for Swift 2.2, which would be verbose and more suitable for current API guide. \nAnd I could later give it a more Swifty name in Swift 3.0.\n. In Swift 3, we made Resource a protocol and to be the only acceptable thing for any extension method. Now you can implement this easily by making String adopt to Resource protocol.\nI guess we could make it default in a later update. \n. After some reconsideration, it's better to leave it to users of framework.. Please ensure you have embedded Kingfisher.framework in your Embed Framework build phase.\n. Now you can use onlyLoadFirstFrame to load the first frame of a GIF.. @MHX792 \nThe default implementation of retrieving an image from cache is an async operation. It is intended to be an optimization for loading a lot of images in a table view or collection view, to keep the scrolling smoothly. If you are try to load only one image, there is no need to use the async way. Instead, you could use the retrieveImageInDiskCacheForKey in ImageCache to do a sync accessing to your disk cached image.\nKingfisher will look for images in memory first, and then in disk. However, it is not the reason which causes your issue.\n. The kf_setImage method will be always an async operation. \n. Hi,\nThanks for the suggestion. But Kingfisher itself is a standalone framework and it is not always a wise decision to introduce a coupling between different framework.\nIn another perspective, it requires either of Kingfisher or another network framework keeping a set of rule to make network request. In fact there is no such protocol or standards on how to make a request or data downloading. So it could really difficult to add it in a meaning way. So it will not be added, at least for a while.\n. \n. @andreyz Thanks for the work. However, some work has already done with beta 4. I will also keep improving the Swift 3 support later.\n. Kingfisher is using the modification date of a file to determine the expiration. So you should be able to extend the date by modify the file. Did you try to remove that cache first and then store the same file again? (I am not sure whether it could work though..)\nMaybe we should use the access day instead of modification date to check the expiration. It might work better. How do you think about it?\n. Use access date instead of modification date. So, just access that image from disk will extend the expiration date for the same. Implemented in #406 \n. @MichaelTzach \nHi, thanks for the p-r.\nMay I know what does the gifDefaultFrameDuration (0.100) and the frameDuration.doubleValue > 0.011 means? I am not sure I could understand what happened here. Could you give some reference for this modification?\nAnd do not worry about the CI. It should not be your issue, but a thread stall due to limited resource for open source project. I will take a look at it later.\n. Make sense!\nThanks.\n. @nowfalsalam \nHi, the CacheType will never be a nil. It will only be one of .None, .Memory or .Disk. The compiler could ensure that it will always has a value. So I believe the optional unwrapping issue you encountered is from somewhere else. (maybe you are trying to unwrap a nil image?)\n. Maybe you are using an earlier version?\nI could remember there is a commit for it: #334 \nSo I believe you could solve it by upgrading to the latest 2.4.2.\n. Hi,\n@victorg1991 Thanks for the p-r. It looks good, expect these two concerns for me. If you would like to fix them, I am glad to merge it.\n1. The option name CacheOnly is a bit confusing. It could mean download it and do not cache it, which is not correct. Could you modify it to something more clear? Maybe OnlyFromCache would be better?\n2. Please use space instead of tab as indent.\n. Thanks!\nAnd I think I will remove the old pod file style later.\n. Done.\n. Good news!\n. @anooj1483 \n:(\nDidn't receive other reports on it. Did you try something like restart your Xcode or clean the project?\nYou may also need to add the SWIFT_VERSION option in your build setting.\n. If the recipesClass.objectId is different for each index path, you are creating multiple caches, and throwing your image there. And the same, if you are seeking an image in that cache but it isn't there, Kingfisher will try to download it again.\nIt is not a recommended way to create a cache for each image (as I understand from your code). A cache object should represent a kind of images, like all user thumbnails images in a cache, or all video previews. Or just use the default shared cache (ImageCache.sharedCache) would be a better choice.\nAnd also specify a CallbackDispatchQueue to your customized queue is not necessary, if you are not sure what you are doing and/or it is not a must, just leave it empty to use the default implementation.\nSo, maybe you could try just use:\nswift\nlet optionInfo: KingfisherOptionsInfo = [\n            .Transition(ImageTransition.Fade(1))\n        ]\nand see whether it could solve your problem.\n. This will not merge but only for state review.\nSwift 3 will be the default branch for Kingfisher later.\n. Added back compatible for Swift 2.2. So we could merge it now.\n. Maybe you could use ImageCache for it? There is a storeImage(_:originalData:forKey:toDisk:completionHandler:) method for it. You could call it with your images/keys(which is the absolute string of your url by default) to add it to Kingfisher's cache system.\n. Have no idea, since the tests for progress are working well. And I just had a try in the demo app, the progress callback works well for me.\nA possible reason is you are loading a cached image, so there is no downloading progress.\n. As I know, there should be several seconds left for app to finish the downloading. If the downloading process could finish, the placeholder images should be replaced by the downloaded ones.\nIf the downloading process is interrupted (which should be a rare case or you are in a bad network environment), the completion handler should be called with an error, maybe you could use that for retrying when you come back to foreground.\nIf the image representation is very important to you, observe the UIApplicationWillEnterForegroundNotification and do a reloadData is also a good idea.\n. Hi, @sendyhalim \nI am a newbie on macOS development. So I am not sure about what is the right way to use NSProgressIndicator. However, instead of adding a kf_invalidateActivityIndicatorCache and letting users to call it manually, is there a better way to center the position automatically when reused? I would like to prefer that it keeps in superview's center.\n. There should be a better way for it. I will take a look at it later today!\n. Maybe related to #797 . @pmierzejewski Thanks for the contribution. Good job!\nHowever, Kingfisher will drop support for Swift 2.2 and Xcode 7 once Xcode 8 be released. And the master branch will be the Swift 3 version. So this p-r will not be merged (mainly because personal preferences. I do not like to introduce these kind of version definition condition into the code base).\nAnyway, thank you! \ud83d\udc4d \n. The transition option only works when you use the image extension methods of Kingfisher. Instead of checking the cache of manager, just use the imageView.kf_setImage methods will apply the transition effect.\nI could understand that you need to cache the resized images before storing it. It is a feature in plan and will be implemented soon. Currently, you might do the transition yourself if you are using the imageView setter method directly.\nRef: #320 \n. All options work with image extensions. But usually the default values are good enough (except for the transition style), so there is no need to set them explicitly unless you really need.\n. No. Kingfisher is a framework focusing on image. Maybe some cache specified framework would be a better choice for you, like AwesomeCache?\n. It's a good idea to delegate the image decoding out, but we should have a better implementation for it (may be a decoding delegate instead of a static property like this).\nI opened an issue for this and will give an implementation for this later. This p-r will be closed since that.\nThank you for the suggestion!\n. A better solution is implemented in Kingfisher 3.\n. Hi, sorry for not noticing your question. LOL. I am always getting a bit busy so sometimes I could forget to answer a question. Could you give me a link so that I could have a look.\nI had a brief look at the tutorial, it seems in that tutorial only an NSCache is used for caching. NSCache is a memory cache, and it will be lost when you quit your app. If you use Kingfisher, there is no need to worry about this problem, since Kingfisher already has a disk cache layer built-in. Generally speaking you could just use the image extension method to set the image and you've done. As mentioned in the read me file:\nswift\nimageView.kf_setImageWithURL(NSURL(string: \"http://your_image_url.png\")!, placeholderImage: placeholderImage)\n. What's the size of your image?\n. You cannot expect to load an image of several mega bytes so fast unless you do some preloading it to memory. The disk speed of iPhone is at 200MB/s so it will take almost 25ms to load a single 5MB image from disk to memory, it will take more time to decode and render it (which means you cannot scroll at 60 fps and suffer from a frame dropping).\nFor your 0.9 ms loading from memory cache, there is no problem, since you will have 16.7ms per frame to keep your UI at 60FPS. So it is a tradeoff between loading time and memory usage. You could get faster loading time if the images are already in memory (you could use ImagePrefetcher to load them from disk before you need to display them).\nSo, I believe you should make your image size smaller. Since you are showing it in a collection view, they should not be so large.\n. Implemented in Kingfisher 3.\n. @andreyz Thanks for the great work. But it is already done here: https://github.com/onevcat/Kingfisher/pull/371/commits/15f911402fff8cb2d806eb6e103da264de803eb9\n. Not sure what happened. Can you build a simple demo project to show it, so I can dig into it deeper.\n. @MaeseppTarvo Hi, I just tried your demo.\nIt is not related to the cache control settings in the response, Kingfisher has its own cache layer so it will be simply ignored. The problem is Kingfisher is using the full url for cache key by default, so you need to have the same url for that url or the cache could not be retrieved correctly. In your app, the image url is appended by a varying token every time, so Kingfisher sees different url and since that url is not in cache, Kingfisher will download it again.\nInstead of using the url as the key, you could choose to create a resource object and use your product id (or something could identify your image) as the cache key. Then, load the resource instead of plain url, to make Kingfisher search/cache for that key.\nSome code below based on your current implementation, hope it could help:\nswift\nlet productImageref = productsValue[indexPath.row][\"Products\"] as? String\nFIRStorage.storage().reference().child(\"\\(productImageref!).png\").downloadURLWithCompletion({(url, error)in\n            guard let url = url else {\n                return\n            }\n            let resource = Resource(downloadURL: url, cacheKey: productImageref)\n            cell.snusProductImageView.kf_setImageWithResource(resource)\n        })\n. @MaeseppTarvo The above code works well for me. I could see these log, which indicates the image are from disk:\ncell.snusProductImageView.kf_setImageWithResource(resource, placeholderImage: nil,\n                optionsInfo: [.Transition(ImageTransition.Fade(1))],\n                progressBlock: { receivedSize, totalSize in\n                    print(\"\\(indexPath.row + 1): \\(receivedSize)/\\(totalSize)\")\n                },\n                completionHandler: { image, error, cacheType, imageURL in\n                    print(\"\\(indexPath.row + 1): Finished, \\(cacheType)\")\n            })\n3: Finished, Disk\n1: Finished, Disk\n2: Finished, Disk\n. It is the correct behavior. Kingfisher has two layers of cache: disk and memory. The images loaded from disk will be kept in memory for later use and better performance. And once you switch you app to background or receive a memory warning, the memory cache will be swiped.\nIf this is not what you want, you could set the maxMemoryCost of ImageCache.defaultCache to a small number (like 1) to disable the memory cache.\n. There is no internet request when the image come from either memory or disk. :)\n. It might be the firebase request I guess?\n. The loading time is because of the downloadURLWithCompletion of FIRStorage.storage. As I understand, it will send request to Firebase and get the image url. It will take some time and Kingfisher could only begin its work after that.\nI suggest to use some network inspector like Charles to see what happened indeed.\n. It's usually because you are not handling cell reusing correctly.\n. Since it's not an issue of Kingfisher's cache, I am closing it.\n. Currently the cache will fail silently. \nA lookup strategy to remove the oldest images or just do a clean would be an improvement to the framework.\n. Ah, I misunderstood your words. I thought you were meaning to set an unlimited size and trying to add images to the cache when the whole disk of phone is full.\nFor your case:\n1. Set disk limit to 50MB\n2. No images expired\n3. Now the cache is 49.9MB\nAdding another images to cache will not fail, even it exceeded the disk size limitation. The disk cleaning work will not happen unless the app is switched to background or terminated. So your images will be cached, it will only fail when your phone disk is full (which is a rare case I think).\nThe disk cleaning work will follow a LRU way to clean the images when the size exceeded or there are images expired. First Kingfisher will check whether there are any expired images and remove them. Then, if the disk size usage is larger than what set, Kingfisher will delete the earliest cached files, until it gets to the target size (which is half of the max disk size you set).\n. Use access date instead of modification date. So, just access that image from disk will extend the expiration date for the same. Implemented in #406\n. Hi, @dluksza \nThanks for the suggestion.\nInstead of exposing it, I prefer that the framework users could add what they need to the image view themselves. You can easily add your customized indicator view (even not a UIActivityIndicatorView subclass) to your image view and then control its appearance and animation all as you like. There is also a progress block and a completion block of the image extension method, to notify the image downloading/setting process, so there should be no problem to add a highly customized wrapper for it.\nAs a framework, Kingfisher will only supply a most common solution (with plain UIActivityIndicatorView) and keep its as simple as enough.\n. @sherwinzadeh May I know which commit and which line of code you are meaning? I didn't find anything like URLTransform or escaping things.\n. :)\n. Kingfisher for Swift 3 is not back compatible. You now need to use kf_setImage(with:). And Resource is now a protocol. URL conforms it by default.\nWe will work on the migration guide later when Xcode 8 GM version is out. Before that, you might need to adopt and explore the change yourself. Generally speaking, you could expect that the APIs of Kingfisher for Swift 3 following the Swift 3 API guideline.\n. All image resources management will happen in main thread, since under hood Kingfisher is using something like mutable array to manage it, which is not thread safe in Cocoa. Think that you are adding a new task while some code is trying to cancel one, if we do not specify a serial thread, there will be race condition. So here we need to dispatch to main thread.\nAs a framework user of Kingfisher, you could always start/cancel your task in any thread. It will not block the UI since all time-consuming parts (like downloading and caching) are happened in other threads. So it is not \"everything\" in main queue, but just that race-condition things.\n. Sure, you could. But I guess it will be a premature optimization. Or even worse. Since thread dispatching itself is not free after all.\n. @hifall Hi,\ndispatch_async_safely_to_main_queue will not do any dispatch if invoked from main thread. So there is no overhead if the users start a prefetch from main thread (which will always happen for most of framework users).\nSince the prefetcher is using ImageDownloader internally to download images, so all time consuming things are already in background. If you add another serial queue for the callbacks, there could be quite some additional dispatch things happening.\nThe start method is fairly simple, I don't believe it could cause performance issues, unless you set the maxConcurrentDownloads to a huge number as well as you have a very large prefetchResources.\nFor the time-consuming completion handler passed in, it is not a framework problem but a users one. So it should be another story.\n. @JustinJiaDev Great to know that!\n. Not a bad idea. I guess we could add another option case like RequestHeader in KingfisherOptionsInfoItem.\n. Implemented in Kingfisher 3.\n. Check https://github.com/onevcat/Kingfisher/wiki/Cheat-Sheet#modify-a-request-before-sending. If you need an HTTP basic auth, just requestModifier. If you need to handle with NSURLCredential, use AuthenticationChallengeResponsable. Please find more about both in the API reference and/or in our wiki.\nSince it is not an issue but a question, I am closing it.\n. So you could just pass forceTransition for the first time, and opt it in later setting.\n. Since it is not an issue but instead a question, I closed it.\n. If there is no other strong reference to imageView, it will be released and the completion handler will not be called since it is already released. Kingfisher will not hold the image view.\n. Since there is no further response from @vethos . I am closing it.\nIf there is any similar case, feel free to reopen.\n. It's a planned feature and being implemented now. But it will only appear in next major version of Kingfisher (for Swift 3).\nSee #348 and https://github.com/onevcat/Kingfisher/tree/feature/image-processor\n. Did you try something like Kingfisher.Resource?\n. Since we should be able to solve it by adding module name (and it is more about the Swift design pattern), so I am closing it.\n. Ummm, I guess it is this https://forums.developer.apple.com/thread/47421 and https://bugs.swift.org/browse/SR-898\nSwift compiler is trying to find the Kingfisher class instead of as the framework namespace.\nIf only a statement like \"import Kingfisher as kf\" would solve it though, it does not exist in Swift yet. So I guess the only fix would be renaming current Kingfisher class to another name, with breaking the API in this version. (I guess we would do it later in Kingfisher 5.x, with Swift 5.0).\nCurrently, if you are using your Resource protocol in your app bundle, I suggest to rename it temporarily. If the Resource protocol is from another module beside of your main app, you could create a separated file in which only Kingfisher imported, and do a typealias to Kingfisher's Resource there.. In Kingfisher 5.0, the duplicated name Kingfisher (as the module name) and Kingfisher (as the compatible protocol name) is refactored. So this issue should be solved.. I think it's ready to merge. Let's wait for CI result.\n. @mickymickymicky @bedaronco \nJust had a try and this url works perfect for me, on both master and swift3 branch, in the demo app in this repo. Please make sure you disabled the ATS when you are using an http scheme.\nIt would be a help as well if you can supply more info (error code or log message if there is any). Or even better, prepare a demo which could reproduce it. I'd glad to have a look.\n\n. @bedaronco Thanks for the detail description.\nIt is strange since you have set the placeholder image, so at least the placeholder should be shown, regardless of how other parts of Kingfisher could work or not.\nThe first two screenshots are easier to track in. Would you mind to add some print or breakpoint to see whether the completionHandler could be called, and you could also check whether the result image/cache type is expected there.\n. Thanks for the information. So it might be some issue in UIKit of iOS 10. Maybe it could be a better idea to fire a radar.\nI will close this issue for now. If anyone find the same issue, would you please a comment and I could track on this later (if not fixed in the official iOS release.)\n. @bedaronco It could be a workaround. Thanks for reporting this.\nSince the problem is reported as reproducible. I will reopen this to see whether we could have a better solution.\n. After some research on this, I found it might relate this change mentioned in iOS 10 SDK release note:\n\nSending layoutIfNeeded to a view is not expected to move the view, but in earlier releases, if the view had translatesAutoresizingMaskIntoConstraints set to NO, and if it was being positioned by constraints, layoutIfNeeded would move the view to match the layout engine before sending layout to the subtree.\nThese changes correct this behavior, and the receiver\u2019s position and usually its size won\u2019t be affected by layoutIfNeeded.\nSome existing code may be relying on this incorrect behavior that is now corrected. There is no behavior change for binaries linked before iOS 10, but when building on iOS 10 you may need to correct some situations by sending -layoutIfNeeded to a superview of the translatesAutoresizingMaskIntoConstraints view that was the previous receiver, or else positioning and sizing it before (or after, depending on your desired behavior) layoutIfNeeded.\n\nI guess it might be a side effect of this change. Now the bounds and frame property of image view is not correct at first time. So you are getting wrong sizing related value until you explicitly call layoutIfNeeded. I am not sure it is intended in iOS 10 or only a regression. Since it is in fact a problem before Kingfisher could do anything, I think I will not add a workaround for it in Kingfisher (at least for now). You could add a layoutIfNeeded before you set anything depending on image view's size to \"fix\" it.\nIf you are using Kingfisher 3.0, there is a better solution, just use RoundCornerImageProcessor and you will get much better performance as well as get rid of this problem. You could find some code snippet on how to use it here.\nI will leave this issue open for a while to see whether it is possible/necessary to add an out-of-box workaround in Kingfisher.\n. @ratkins It's not related to the system version you are running, but the SDK version you are linking to. It always happens when using iOS 10 SDK.\n. @bedaronco I could remember there was an issue by setting it to the screen scale. But I am not sure about it right now. I will double check that again.\n. @bedaronco The scale here means the image scale, instead of the screen scale.\nMaybe we should modify the name to clarify it later!\nThanks.\n. LGTM! Thanks for pointing this out!\n. Does your imageString keep the same? Kingfisher is using the url as cache key by default. If the url varies (even only the query part), it will not be in the cache.\nAnd I am not sure why you need a prefetcher here. \nIs it enough to just do an image setting like this for you?\nswift\nfoodImage.kf_setImageWithURL(NSURL(string: food.imageString!), placeholderImage: imagepLace)\n. Sure, Kingfisher will first search in memory and disk cache, if not found, it will try to download.\nSo if your images are already in disk cache, you could load and display it offline.\n. Hi, @cosmo1234 \nIt depends on you, but both should work with cache.\n. It should not happen. \nCould you supply a demo so I can dig into?\nOr you could just try the demo app inside this framework to see how it work?\n. KingfisherManager or the extension methods on UIImageView encapsulate most details of downloading and caching an image. So, instead of using the highly wrapped types, you may need to use the downloader and cache separately for your purpose. You can get the original data in this callback by using the download API in ImageDownloader.\n. That's right.\nAnother possible workaround would to be using the ImageDownloaderDelegate, in which there is a delegate method to inform you about the downloading response. From there you might be able to build a list your own to hold the information you need. So you could keep using the KingfisherManager or extension methods.\n. Most of users do not care about it, for them, it is just noise and implementation detail. So by hiding it could make the APIs of framework easier to use and understand.\n. Hi, @jdmoreira \nJust had a brief look at it. Great implementation!\nBut I have some concern before merging it. You have removed kf_showIndicatorWhenLoading and IndicatorView typealias, which were marked as public before. I understand that by doing so could  make code cleaner and expressive. However, as a framework, it is also important to keep back compatible as mush as possible. As semantic versioning requiring, we may need a major update for such API breaking. IMO, it is not a good idea to do so for this kind of change.\nSo before it could be merged, may I ask to add back the IndicatorView typealias as well as the kf_showIndicatorWhenLoading property, and make it behave as .activity is set when kf_indicatorType is set to .none. (and maybe mark this API as deprecated with warning).\nI also commented in the code for a trivial style/convention. And it would be even greater if you can also make a p-r to swift3 branch (there you could do the breaking change by removing the kf_showIndicatorWhenLoading), since the main development of Kingfisher will continue there instead of Swift 2.x version.\nThanks again for it. It's impressive to me!\n. Fix and merged in #430 \n. @hifall It's already in version 2.6.0. And I will continue work on it for Swift 3 later.\n. Hi,\nIn swift3 branch we introduced an ImageProcessor to process images. Here we want to store the processed images instead of its original data (which is downloaded from web).\nI just tried the gifRepresentation on a sample gif image (http://www.sherv.net/cm/emo/funny/2/big-dancing-banana-smiley-emoticon.gif) and it works well for me. serializer.data(with: image, original: original) returns correct data for it. So I guess it is an image decoding issue for you to get nil. May I know one of your gif files so I could look deeper to see what happens.\nAnd for you to workaround quickly now, you can implement your own CacheSerializer and let it behave exactly what Kingfisher did before (by returning originalData), then pass it in as an option.\n. The system UIImage(data:) will not work for GIF data. How about changing it to the Kingfisher gif parser, I believe this should work for you:\n``` swift\nif let image = DefaultImageProcessor.default.process(item: .data(data), options: []) {\n    // You could check whether the image could be created correctly.\n    print(image)\nKingfisherManager.shared.cache.store(image, original: data, forKey: identifier, toDisk: true, completionHandler: {\n// Do something\n})\n\n}\n```\n. Cool.\n. \ud83d\udc4d Thanks!\n. Kingfisher will cache the images in memory by default. If a memory warning is received, the memory cache will be purged automatically for you, so there is no worry about it.\nIf you need to limit the memory cache usage, set the ImageCache.defaultCache. maxMemoryCost.\n. Or you can call the clearMemoryCache of ImageCache to do a force purge too. But IMO, it is not necessary. It is already proved that Kingfisher could manage it very well (at least in all apps I am working on).\n. I think you are right on it. Defining a new operator sometimes is not a good idea.\nThanks for catching it.\n. However, + or ++ cannot express the meaning of pipeline well. And there is no commutative property too (which might lead misunderstanding when using +). So I decide to use >> instead.\n. Fixed in https://github.com/onevcat/Kingfisher/pull/371/commits/3ac0dd1a06ec127f3cfd53b423e46884ec872037\n. @jdmoreira Hi, I think your wrapper solution is also great. But the blocking is that it cannot compile in Release mode with -O optimization. It crashes LLVM in the conversion of T to AnyObject. Furthermore, in Swift 3 we cannot depend on AnyObject to check class (since everything is imported as Any now). So I guess it would be better to leave it to us developers to decide which should be in box.\nI am working on Swift 3 for the indicator now. Glad and honor that you help to improve it!\n. WebP is not supported built-in the framework. However, if you are using Kingfisher 3 or later, it should be quite easy to implement your own ImageProcessor and CacheSerializer with any existing WebP framework easily.\nMaybe we could build an official one later.\n. No. It is not supported yet. And there is no plan for it currently.\n. It works for me well.\nMaybe you need update your pod spec repo with pod setup or pod repo update first.\nSince it is a CocoaPods issue instead of Kingfisher, I will close it.\n. @Viktormax Kingfisher 3.x is already in CocoaPods's repo, so you'd better to submit it to CocoaPods if you are sure it's an issue.\nref: https://github.com/CocoaPods/CocoaPods/issues/5260 & https://github.com/CocoaPods/CocoaPods/issues/5545\n. Hi,\nOnly ImageCache is used as a very basic type name in Kingfisher and there is no imageCache property/syntax in Kingfisher. This (ImageCahce as type name) should never trigger a static analysis failing in private API. \nSince there is no other report on this kind of rejecting until now, I believe it is more likely a bug of Apple's system or only your case (if you are using the lower letter case imageCache in your code.)\nHave you argued it with Apple's guys for it?\n. @Sunitadaffodil Sure!\nPlease let me know the result so I could see whether we should do something on it.\n. @Sunitadaffodil Hi, any progress on it? Does it still gets rejected?\n. :) So I am closing this.\nIt is not surprising since they are also human and could make mistake on this time to time.\n. When you are passing a url, it is converted to a Resource with the url and its absolute string as cache key in fact.\nSo instead of barely passing a url, you could create a Resource with an URL and a customized cache key, then pass it to Kingfisher to process.\n. Please read our wiki:\nCustomize cache key:\nhttps://github.com/onevcat/Kingfisher/wiki/Cheat-Sheet#use-a-specified-key-other-than-the-url-for-cache\nForce downloading:\nhttps://github.com/onevcat/Kingfisher/wiki/Cheat-Sheet#skip-cache-searching-force-downloading-image-again\n. @alimysoyang It should be able to display either local and remote GIF file. May I know the url address of your GIF file so I could have a deeper look at it.\nThanks!\n. Should be resolved in #461 and version 3.1.1. Would you like to confirm it in the latest version? Thanks!\n. @webfrogs LGTM\n. @Sundin Thanks for the solution. \n@thieu75 @iLucas97 I believe it should be a CocoaPods issue when using branch to build instead of tag. Maybe it misses some config when using a branch.\nBesides of that, I suggest always to use a tag (released version) in your Podfile and/or Cartfile. Although it should work, there is no guarantee that the master branch would always work. Since it is a dev branch, it might break from time to time, so it is not a wise decision to depend on that branch.\nJust use this should works fine:\npod 'Kingfisher', '~> 3.0'\n. It turned out to be an error in Kingfisher master branch, which causes it could not pass the cocoapods lint. Maybe we should add cocoapods lint to daily CI instead of only doing it when releasing. I will improve the CI integration later. https://github.com/onevcat/Kingfisher/issues/449\nThe master branch should also work now. But as the same, I suggest to use a released version instead of a branch, to get benefit from semantic version and better compatibility.\n. No, there was no callback from long ago. It is not an error, but indicating the image view itself gets released. Since the owner of this code does not existing in this case anymore, there seems no reason to have any callback to be invoked. No one should expect a result here.\n. @tengpeng \nHi, thanks for considering to contribute.\nThe redirected url support is a feature in plan and I am appreciated that you did a implementation for it. However, this p-r could not be merged since it changed the file format and coding style so much.\nI understand that it might be caused without noticing and by a script. But would you mind to just add the url redirecting things, without changing the file access mode and/or indent of files? I will take a look at it once there is another p-r for it!\nThanks.\n. @tengpeng \nHi, it seems you are changing all files to 755. See the screenshot below:\n\nYou can also check it in the \"Files changed\" tab in this page.\n. It's great! Thanks @sahandnayebaziz \n(English is too hard for me!)\n. Will take a look at it soon.\n. @hifall Hi, \nAfter some investigation, I believe there is no issue in Kingfisher's loading indicator behaviors.\nThe issue you encountered might be related to the changes on collection view/table view in iOS 10. If you are calling Kingfisher's cancelDownloadTask in didEndDisplaying delegate method and resetting the image in collectionView(:cellForItemAt:), you may suffer from this. Since in iOS 10, Apple is using a more aggressive cache way on cells. Now they will not be in reuse queue at the time it goes out of screen, which means the resetting method in collectionView(:cellForItemAt:) may not be called. So the indicator will not show again.\nYou could try to put your set image code to collectionView(:willDisplay:forItemAt:) instead, to make sure the image is being reloaded and set correctly for that cell.\n. You could find more about this change in iOS in session 219\n. Some sample code added in #448 to show how to get performance benefit from iOS 10's prefetching cell and new cell life cycle.\n. @Codeido I can not reproduce this issue on my environment (I tried both iOS 9 and 10).\nCan you build a sample project for this? So I can dig into it deeper.\n. Yes, I tried swift2.3 branch and cannot reproduce it.\nBut I did find a bug which might stop you from setting the kf_showIndicatorWhenLoading to false, but it should not relate to this issue, if you are only setting it to true.\n. @Codeido So may I know what's your original code? Maybe it could be improved.\n. @Codeido That's true, you need to set the loading indicator before you begin loading an image.\n@hifall I pushed a commit for it in swift2.3 branch. Would you like to give it a try?\n. It should be there.\nhttps://github.com/onevcat/Kingfisher/commit/c20e4556e84326e47e7e8081ea6903b2c2c00a39\nI made the change earlier, just didn't push it until now.\n. @hifall Ummm, checked the code again and not sure about why.\nAre you trying to set the indicator and/or image in another thread instead of main thread?\n. Or if there is a demo could reproduce it, I'd like to dig it deeper. Currently I cannot reproduce it so it's quite hard to debug.\n. @hifall Hi, any progress for this?\n. May I get a demo or any hits for this?\nI cannot reproduce any leak in the demo project (Kingfisher-Demo) in the repo.\n. Sometimes you need to restart your Xcode to make the error gone. :(\nAnd you might also need the newest CocoaPods (1.1.0 or its RC versions) for Swift 3 support.\n. @gregorpichler Can you access your resource with a plain URLSession task?\nKingfisher is using a very simple URLSession way to download image data, so if you can download the images by a session you create yourself, it should also work in Kingfisher.\nAnd instead of modifying the session configuration, would you like to try to use the requestModifier to add the header? It is a suggested way to do such things like header modification. You can find some sample here.\n. @gregorpichler If your server return you a 401, it means your authorization information is not correct. IMO, that is not the self-signed certification issue here (I am not sure though).\nSo, you could first try whether you could access your image data by creating your own URLSession and with the token you are using. If the server turns to 200, there must be something wrong in Kingfisher's downloader. Otherwise, it might just because your bearer token is not correct or there is something wrong with your server.\nThe trustedHosts property should already handled the self-signed certificate for you. Or for a more advanced usage, you could set the authenticationChallengeResponder of downloader and supply your own implementation for the challenge (in this case, trustedHosts will be just ignored)\n. Is it a POST request or a GET one? By default Kingfisher will use GET method. If your server expects a POST request, you also need to change it in modifier.\n. Ummm.\nI turn back to suggest you to try to implement a demo of getting the data with URLSession first. Once you can get the image by an URLSession, we could get to know where the problem exactly happens and give it a fix.\nYou could ignore the self-signed certification check by setting the session delegate and supply a proper method for challenge (see this for more, the same approach is now used in Kingfisher if you set the trustedHosts). \nHowever, as I mentioned before, it's more likely a token problem instead of certification one, since you already received a 401 from server instead of a certification NSURLError (NSURLErrorDomain Code=-1202). If the issue happens with the certification, you should not have a chance to get a server response at all.\n. Nope. Kingfisher is not a networking request framework at last. It only supplied simple server trust credential. If you need to use a certification in the app bundle, you may need to implement the authenticationChallengeResponder and create it from your bundle cert with SecCertificateCreateWithData yourself. :(\n. @gregorpichler Hi, any news for this?\n. So it means the issue comes from the \"Accept\" field in the header? Your server does not expect an accept field but you were sending one? \nWould you mind to confirm it so we could decide whether we need to dig it deeper to see where the issue lives indeed.\nThanks! :)\n. It is not correct here: modified.setValue($0.key, forHTTPHeaderField: $0.value)\nI believe which should be modified.setValue($0.value, forHTTPHeaderField: $0.key) instead.. @adrianhr91 Oops, the comment is outdated. Use this instead.\nIf you were mentioning this in your 1, you can have only one AnyModifier and pass it as an option everywhere.\n. Done.\n. Hi,\nIf you are using Swift 3 and Kingfisher 3, it could be easily implemented with an ImageProcessor. \nYou could create a type which conforms to ImageProcessor and pass it as an option into the image setting extension method. Please see Processor part of wiki to get more info about this. :)\n. LGTM\n. @Mathieu-o Oops. You are definitely correct on this! Thanks for pointing this out.\nI will take a look at your patch later, and decide a good way for it!\n. Just had a look at your implementation, and it seems quite good to me!\nBut I guess we could refactor that a bit to make things more clear. I will give it a fix soon (maybe tomorrow) and release an update for it.\nThank you again for reporting this. Great work \ud83d\udc4d  :)\n. Should be fixed in #460 \nI will release an update for it later today.\n. Version 3.1.1 was released for this.\n. By default, Kingfisher will follow your image format when caching (serializing) your image. If you are using a JPEG, the transparency of round corner will be lost when saving as a JPEG, which leads the bg color to be the default white.\nA possible solution would be supplying PNG images instead of JPEG, or creating a CacheSerializer which always convert an image object to png data by using PNGRepresentation methods.\n. Thanks for reporting! I'll take a look at it soon.\n. Should be fixed in version 3.1.1. Let me know it does not work for you!\n. This will only happen in real devices. Everything goes well in simulator.\nI am not sure whether there are any side effect by removing the ARGB8888 fix (which was originally added for blur images which is not ARGB8888). It seems that all tests are still green after I removed this at least.\n. Hi,\nYou need to implement your own ImageProcessor to convert svg data to an image object (UIImage or NSImage). I believe you can find some other libraries for it. So generally speaking you need to have Kingfisher and that converting library working together.\n. See Create and use your own processor part too.\n. Currently the default options cannot be modified. So a possible solution would be creating a helper method and pass that modifier there. Then you could use your helper method instead of original one in Kingfisher.\n. It turned out to be an optional interpolation. Since it was fully discussed in #452, I am closing it now.\n. Not quite sure what does you mean. And in fact it's not a proper place to ask question in GitHub issues.\nBut maybe you could try the ResizingImageProcessor.\n. Sure, it could be a great improvement! Do you have time to implement it? (or I will handle it later since I'm getting quite busy for now)\n. I believe it would be better to be a new one :)\n. With crop anchor as parameter, and center as its default value.\n. @L4grange Good job! I'll take a look at it to see whether we could implement a built-in crop processor based on this.. Cropping image is implemented in #630 now.. Just create a CroppingImageProcessor and pass it as an option to setImage methods. Please have a look at our wiki for more.. Wow, incredible! Thanks for it.\nI will also read that article later. Thanks for letting me know it! \n. I will give it a tag and release a new version now.\n. :( You are right. I will take a look to see what we could do for it.\n. Fixed in #470\n. May I know how did you set the image with processor?\nIf you are using the image view extension, Kingfisher will send the processed image to cache by default, so it is intended that the processor method not being called again when retrieving data from cache, since the data should already be precessed before being stored.\n. @AlbertoGuerreroMartin Hmmm, interesting. You mean the process method didn't get called at all?\nCould you post your implementation of grayscaleProcessor here? Or even better, preparing a sample project which could reproduce it. I could have a detail look at it then.\n. Maybe you need this if you are using UIImageView.\nAnd it is not the correct place in GitHub issue to ask questions.\n. 1. We are using Kingfisher heavily in a commercial app ourselves. We didn't encounter a memory issue for now, so it should not be a problem and we didn't do any cleaning cache things manually. If you are trying to load a lot of images in a table/collection view, you may want to load the thumbnail version of it, instead of the original one. And you can cancel the task when the cell disappeared to reduce pressure.\n2. It depends to you. We choose unlimited disk size in our project and it works well. Since there is a two weeks expiration time by default, it usually not a big problem with the cache size. But if you really need one, just go ahead and set it.\n. For the clean/clear cache things, Kingfisher will do that in memory warning automatically, so you do not have to do it yourself (and twice). \nFor the code in cheat sheet, it just demonstrates you could use these APIs, there is no relationship and no need to set them both. I am sorry for the confusion it caused.\n. This should be compatible with earlier version of Kingfisher.\nWhat's your current code and it could be a great help if you paste the error you encountered here too.\n. The ImageProcessor should be your choice. See this for more.\n. Maybe you mean this one? https://github.com/onevcat/Kingfisher/issues/465\nI do not have a chance to implement it yet, but any p-r for this is welcomed.\n. There should be no need to worry about the setImage things. You could just add a struct which conforms to ImageProcessor and implement the logic of converting some data and/or an image to the cropped one. You can find other built-in ImageProcessor in the file with the same name, and follow the implementation there. :)\n. There should be no need to run with dispatch_async. However, I have no idea about what causes it. The code seems good to me and it should work if you have correct model.\n. It should not happen unless you are trying to load an image with huge size (and I/O matters most of the time in such case.)\n. Oops. Thanks for pointing it out!\n. Fixed.\n. Maybe choosing Kingfisher 2.5.1 could be a workaround (if you are not using the new indicator type) for now. Another possible solution is extract IndicatorType from UIImageView, I have to consider this twice since it would introduce a public API change and breaks semantic version rule.\n. @hifall It seems that it will not break current API if we extract IndicatorType out. I pushed a commit to swift2.3 branch and would you please to give it a try and see whether it could solve your issue? If so, I will give it a tag and release an update soon.\n. Great, I will tag and release it now.\n. Solved in version 2.6.1.\n. Does it relate to this iOS 10 issue? https://github.com/onevcat/Kingfisher/issues/421\nIf you are setting round corner or any other layer property, you may need to call layoutSubviews. You can find more information in this page\n. Thanks for the feedback.\n. Kingfisher should have nothing to do with the image view size. I noticed that you are trying to scale your image to a size of CGSize(width: UIScreen.main.bounds.width, height: UIScreen.main.bounds.height), so does it mean that your processed image is full screen? If so, AND if your image view does not have a size constraint (which means it will use the intrinsicContentSize and resize itself, here, the image size which would be set to the image view), this could happen.\nIs this your case?\n. Maybe you could use CocoaPods to integrate Kingfisher, so you can have it built with Xcode instead of the the command line tool.\n. @vzsg You are right. It is a bug and I will give it a fix soon. Wait for 10 mins!\n. Fixed in 3.1.4. \n@vzsg Thank you!\n. What's the problem by just using the image view extension described here? There should be no need to reload your table view.\n. No, it is not the correct logic to call the handler only once when you set it multiple times actually. \nIt's more likely that you are choosing a not-so-good strategy by reloading the whole table view and set the image again. I'll choose just relayout/update the cell without reseting the cell image view by Kingfisher. Maybe it's also worth to reconsider your table view setting flow and choose a better way to update the cell.\n. Although it is not a right place to ask such question, you could use ImageDownloader for it.\n. No, it is a black box to framework users and not intended to be changed.\n. What do you mean by the JSON file?\nAnd you could use isImageCache to determine whether an image at that url cached or not.\n. \u5c1d\u8bd5 Clean \u4e00\u4e0b\u4e4b\u7c7b\u7684\u5427\u2026\u6211\u5e76\u6ca1\u6709\u6539\u4ec0\u4e48\u7279\u522b\u5927\u7684\u4e1c\u897f\nWei Wang (@onevcat)\n2016\u5e7410\u670831\u65e5 +0900 18:31 Hanwei notifications@github.com\uff0c\u5199\u9053\uff1a\n\n\u55b5\u795e\u4f60\u597d\uff0c\n\u6211\u521a\u624d\u7528cocoapods\u66f4\u65b0\u4e86\u4f60\u7684\u6846\u67b6\u3002Installing Kingfisher 3.1.4 (was 3.1.3)\n\u7136\u540e\u53c8\u5728Xcode\u4e2dupdate\u5230\u4e86swift3.0\n\u73b0\u5728\u62a5\u9519\uff0c\u8be5\u600e\u4e48\u89e3\u51b3\uff0c\u8c22\u8c22\uff01\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub (https://github.com/onevcat/Kingfisher/issues/491), or mute the thread (https://github.com/notifications/unsubscribe-auth/AA-P48AhEfHUolYWfl7JMHtt1ouno0_Oks5q5bVXgaJpZM4Kk0eK).\n. \u5347\u7ea7 cocoapods\uff0c\u5220 derived data \u6587\u4ef6\u5939\uff0c\u5220 Pods \u6587\u4ef6\u5939\u91cd\u65b0 pod install \u7b49\u7b49\u7b49\u7b49..\n\u5982\u679c\u4f60\u65b0\u5efa\u4e00\u4e2a\u9879\u76ee\u5bfc\u5165\u6ca1\u95ee\u9898\u7684\u8bdd\u57fa\u672c\u5c31\u662f\u4f60\u7684\u672c\u5730\u73af\u5883\u7684\u95ee\u9898\u4e86\u3002pod lint \u548c\u9a8c\u8bc1\u90fd\u662f pass \u7684\uff0c\u6240\u4ee5\u6211\u8fd9\u8fb9\u6ca1\u4ec0\u4e48\u53ef\u505a\u7684\u3002\n. Currently no. Maybe we could implement an option to load first several frames for a GIF in a later version.\n. Should be added in version 3.4.0. Use .onlyLoadFirstFrame for that purpose.. You may need to rebuild Kingfisher once you upgrade your Xcode version, since Xcode 8.1 shipped with a new version of Swift (3.0.1), and the ABI of Swift is not back compatible yet.\n\nSo it means a clean for your project might solve it.\n. You could also try to remove your old version app from your phone and reinstall it.\n. So could you build a sample project to reproduce it? I tried the latest version with cocoapods installing and it works fine for me.\n. Have no idea what happened.\n. Nope, no idea what happened. It seems to be a bad access which is buried deeply in the CFNetwork. I guess we have nothing to help with it in Kingfisher now. :(. Thanks for the feedback.. I'll suggest to just use the current image of image view as the placeholder as you mentioned. It should be a fairly good and reasonable solution, at least to me.\nWhat's your concern about that?\n. Um, I agree with you that it will be clearer to have an option to describe it explicitly, instead of just using current image. I will find some time to implement this.\nThanks.\n. Added in 3.2.0\n. Thanks for your kind word and it's my honor.\n. Kingfisher is distributed with source code, and there is no API change needed for Swift 3.0.1. So it is you who should compile the framework in the newer version of Swift.\nI believe you could try to do a full clean for your project as well as Pods to solve it.\n. As well as to try the latest version of cocoa pods\n. What do you mean by \"always show\"? Once you set the indicatorType, the indicator should be automatically shown on downloading and hidden after that.\n. Instead of making it a property for all the original ImageView class,I believe it would be more general and simpler to create your own subclass of UIImageView and set the indicatorType there, then use the subclass.. No, not yet. And there is no such plan for it currently.\n. Thanks for pointing it out!\n. Yes.\n. The unit of image processor is pixel instead of point. If you are trying to set the image to a 77x77 point image view on a retina display (I guess you should need so), it means you need to resize it to 2x at least, which means 154x154.\nAnd if you are also targeting an iPhone x Plus 3x display, you need 231x231.\n. Sure.\n. Not a bad idea. Would you mind to send a p-r for this?\n. @ManueGE Great! I will add some documentation for them before we could release an update.\nThanks!\n. Hi,\nYou need to change the class of it to AnimatedImageView in your storyboard too.\n. You may need to specify the module to Kingfisher too, if you are using it as a dynamic framework.\n\nDo not forget to link to the framework. If this is not shown in your IB, it might be possible that you are not integrating it correctly.\n. It should be no harm to be public. I'll do it later.\n. It will not work only when set url to nil (there should be nothing changed when using an non-nil url)\nThis might be caused by an internal change of #503.\nI will give it a fix to load placeholder for nil resource later.\n. Should be fixed in 3.2.1\n. @chungkol I can not fully understand what's your situation. But in your code you were trying to set .cacheMemoryOnly when you using the downloader. It will take no effect since it is just related to the cache instead of downloader.\n@monica18p Can you build a demo project for it? I am glad to dig into it.\n. No, this is intended and the KingfisherManager would not expose its initializer. If you need to use another cache instead of the default one, pass a .targetCache option with your customized one in the image loading APIs.\n. You could use the requestModifier for this.\n. You could do that by implementing your own CacheSerializer. Please read the cheat sheet in wiki for more on it.\n. Just took a look at the RNCryptor and tried your code. It works perfect for me and all images are encrypted and decrypted without problem. None of them could be previewed:\n\nAre these images you could preview downloaded before you apply the encrypting cache serializer? You could try a ImageCache.default.clearDiskCache() to clean your disk cache and have another try.. You are definitely correct on this!\nThanks.\n. Please read the migration guide.\n. You may need to do a pod repo update, or even reset your pod environment.\n. Hi,\nThanks for reporting this. I can verify the same in both iPhone simulators and devices with iOS 10. But once I switched to iOS 9, all leaks disappeared and the checks were all green. So I believe it might be related to some iOS system and/or Swift internal change.\nIt seems that most leaks are from creating a URL session and its configuration. All of them are Foundation code and not accessible in Kingfisher. I will take a deeper look to see what happened.. Not sure whether it is related to this issue in Alamofire. Just for ref. https://github.com/Alamofire/Alamofire/issues/1717. After some investigation, I discovered some interesting fact.\n\n\nThe leak will happen when you access the ImageDownloader.default, which will create one for you if there is no one. Leaks always happen just in the ImageDownloader.init, even you never do a network request. This code will simply cause it: let _ = ImageDownloader.default\n\n\nThe var fetchLoads = [URL: ImageFetchLoad]() will cause the _NativeDictionaryStorageOwner and _NativeDictionaryStorageImp leaks, which are the same case in Alamofire issue above. As said by @cnoon, we have to wait for Apple to fix it.\n\n\nWhen I comment out the line open var requestsUsePipeling = false, more than half of the leaks disappeared.\n\n\nBefore:\n\nAfter:\n\nThe requestsUsePipeling is nothing more than a Bool flag. However, quite some of the url session leaks get fixed by removing a Bool property. This does not make sense to me at all.\n\nI continued and get a minimal case for the leak. Consider to store a URLSessionConfiguration in an NSObject:\n\n```swift\nclass ViewController: UIViewController {\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        // Do any additional setup after loading the view, typically from a nib.\n        let _ = Downloader.default\n    }\n}\nclass Downloader: NSObject {\n    var sessionConfiguration = URLSessionConfiguration.ephemeral\n    static let default = Downloader()\n}\n```\nYes, it is all the code. And try it in a new iOS project and profile it. Guess the result?\n\nIt's still \"leaking\"!\nEverything goes fine if I remove the Downloader's super class and make it a Swift class. This code will not leak:\nswift\nclass Downloader {\n    var sessionConfiguration = URLSessionConfiguration.ephemeral\n    static let `default` = Downloader()\n}\nConclusion\nDo not trust Instrument with iOS 10. It cannot work well with Swift + Cocoa. If you need to check the memory issues, use the memory graph in Debug panel, or find an iOS 9 device.\nI will fire a radar and hope Apple could fix it soon.\n. There is a workaround to drop NSObject superclass for ImageDownloader to make the Instrument happy. It would be merged later, since I think it is reasonable to drop OC support now.. Updated:\nThe code above: \n```swift\nclass ViewController: UIViewController {\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        // Do any additional setup after loading the view, typically from a nib.\n        let _ = Downloader.default\n    }\n}\nclass Downloader: NSObject {\n    var sessionConfiguration = URLSessionConfiguration.ephemeral\n    static let default = Downloader()\n}\n```\nis not leaking anymore in the latest iOS simulator (10.3) in Xcode 8.3.3.. Thanks for the suggestion. Yes, it might be a problem when using a slow network connection.\nI guess at lease currently I will not change this, unless there is a good way to split the test target from framework. It is important to test the images and processors and it seems the current model works well for most cases (for both human and CI).\nFurthermore, usually you just need to download them once when integrating the framework until you are ready to upgrade it. If the downloading time is too long for you, please consider to integrate this framework by using a submodule, which could save you from re-downloading these test image when there is no change for them.\nAnyway, thank you for it. I will also keep an eye on the repo size and see what I could do in future.. \u8fd9\u6837 CI \u5c31\u8dd1\u4e0d\u8fc7\u4e86\uff0c\u800c\u4e14\u8981\u4ece repo \u79fb\u8c03\u9700\u8981\u6539\u52a8\u524d\u9762\u7684 commit\u3002. Sure! It is a typo. Will fix it.. Fixed.. Since there is no change between these two versions here, so I believe it is a Swift issue. Maybe you could fix it by do a full clean of the project and/or derived data folder. Or try to remove the old one with Kingfisher 3.1.4 and reinstall the app to your simulator or device.. @mihaibulic Does it happen for all urls? Or some specified ones. And may I know some more information for it, is there any stacks or other messages besides of EXC_BAD_ACCESS?. There is no other report on this, so I guess it is a special case and currently I have no idea for it.\nIf anyone find the same issue, feel free to reopen it.. Hi,\nThe progress block will be called every time the url session task received a data trunk, so there is no good way to increase the amount in a good way.\nAnd if your server is returning the correct expected size to you, the progress block should be called when it finishes. But a better way to handle the finish things should be the completion handler callback instead.. It's no need to create such an image if the request is successful (which would be a normal case), so it seems to be a waste of performance and adding complication to the API. I believe you should just set the \"failed image\" in the completion handler instead. It would not be hard too if you want create a wrapper for it yourself, if feel like to.. Thanks for reporting this. But it seems that these crashes happen deeply in the Foundation framework and I think there is little we could do to help it. :(. Thanks for confirming this!. LGTM!. I cannot understand what you mean.. @ixialuo I cannot reproduce it. progressBlock is called when downloading an image for me, even when the options is nil.\nCan you build a demo which could reproduce what you said? Thanks!. Kingfisher will cache all the downloaded images by default, so it is not surprising that it will take some memory even if you are not displaying the images, especially when you are displaying some large images. Generally, there is no worry about it, since Kingfisher will release these cached memory when a memory warning received.\nIf it is important to you, you could just set the maxMemoryCost property of ImageCache.default to customize it.\nAnd since SDWebImage is an Objective-C project, sometimes the Instruments cannot track it properly. Instead of using Instruments, you could try the Debug panel in Xcode. As I know SDWebImage is also caching all images in memory, so both should share the same behavior on this.. @abellee \nNo, purging the memory cache should not clear disk cache. If this happened to you, please open a new issue and give more details. . Thanks for reporting this. I will take a deeper look on this.\nBefore I could conclude what happened, could you try to move the calling on kf.cancelDownloadTask to the didEndDisplayingCell method (if you are using this in a cell of a table view or collection view) to see whether the same thing occurs?. @OneSman7 Great catch! \ud83d\udc4d I found an issue on this. Instead of a associated object problem, it is a race condition in cancel task. I will give a fix on it tomorrow!\n@damien-nd And your issue might be related to another disk cache cancelling problem, which the callback not called properly. I will also fix it tomorrow since it is now quite late for me and I need a sleep.\n. I am giving it a fix now. :-/. @mono0926 Could you give this branch a try to see whether it works for you? Thanks!. I just tried your color (which is likely a dimmed gray with a little blue), and it looks fine for me. It does work but maybe you need to decrease the fraction to make it more obvious.\nAnd if what you want is a tint instead of color overlay, you could also try the TintImageProcessor. Or you could even implement your own filter effect very easily.. Please describe your question more specified. And it is not a good place for asking questions. If there is no such feature now in Kingfisher, it would be appreciated to post a feature request instead of asking \"how can\".. If you mean the connectionProxyDictionary of session configuration, the configuration used in Kingfisher is already exposed. It should work if you set your proxy settings there and reassign it to ImageDownloader:\nswift\nlet conf = ImageDownloader.default.sessionConfiguration\nconf.connectionProxyDictionary = [\n    kCFNetworkProxiesHTTPEnable as AnyHashable : true,\n    kCFNetworkProxiesHTTPPort as AnyHashable : proxyPort,\n    kCFNetworkProxiesHTTPProxy as AnyHashable : proxyURL\n]\nImageDownloader.default.sessionConfiguration = conf\nThe session used will be recreated and updated, so you could use a session with proxy you set.. So you could just add something like\nswift\nImageDownloader.default.sessionConfiguration = customizeEphemeralSessionConfiguration()\nto your app did finish launching method of your app delegate to u. Umm..The BlurProcessor (as well as all of other processors) does not do anything on the orientation. Maybe you could implement a processor your own to normalize the image, if you need to display an image with different orientation settings. There is a kf.normalized property you could use for it.\nThe final processor might be something like this:\n```swift\nstruct NormalizingProcessor: ImageProcessor {\n    let identifier = \"normalized\"\n    func process(item: ImageProcessItem, options: KingfisherOptionsInfo) -> Image? {\n        switch item {\n        case .image(let image):\n            return image.kf.normalized\n        case .data(_):\n            return (DefaultImageProcessor() >> self).process(item: item, options: options)\n        }\n    }\n}\nlet p = BlurImageProcessor(blurRadius: r) >> NormalizingProcessor()\nimageView.kf.setImage(with: URL(string: \"\"), options: [.processor(p)])\n```. It is due to the cgImage based filter. I will give it a better fix now.. Fixed in 3.2.3.. @lastcc \nAs mentioned in your ref links, there is no exif information in a PNG file, so the rotation info in a JPEG will be lost in a PNG representation. I tried JPEG with non-unified orientation in latest Kingfisher and it works well in both loading from web or cache. (I was using this image: https://github.com/recurser/exif-orientation-examples/blob/master/Landscape_2.jpg for testing).\nIf you are loading a JPEG with problem, may I know the image url so I could have a deep look into it.. It seems to be an issue in CocoaDocs or jazzy. I commented it in this issue https://github.com/CocoaPods/cocoadocs.org/issues/493 and I guess they could solve it.\nBefore that, you can install jazzy and run jazzy in Kingfisher's folder to generate a local copy of reference yourself, if you need it.. https://github.com/onevcat/Kingfisher/wiki/Cheat-Sheet#authentication-with-nsurlcredential. Thanks for reporting this. I will dig it deeper. Does it always happen when you scroll fast while the prefetcher working? Or there is a chance?. You could try to:\n\nAdd a cancel downloading call in the cell disappear delegate method like this\nSet the maxMemoryCost to a small value like 10 to disable the memory cache.\n\nto see whether it could fix it.\nAnd it is recommended to keep the thumbnail image small, especially when you need to show them at one time, there would be huge memory pressure. The images used as thumbnail should be not the same as the ones which used as detail views.. It's due to memory according to your description. \niPhone 6 has 1GB, while iPhone 6s has 2GB. And the same for your case of iPad Air 1 and iPad Pro. But it's strange that it's still crashing when you limit the memory cost. Can you confirm that you are setting the maxMemoryCost for the correct cache, which should be ImageCache.default by default used in prefetcher.\nAnd you could check the memory with \"Debug Memory Graph\" when you are in the middle of downloading progress, to see whether the downloaded images are stored in memory or not. (It should not if everything goes fine).\n. Hmmm, after some detail investigating, I found an interesting fact.\nI setup a list of about 500 images with size of 3000x2000, and tried to prefetch them in different devices. Although none of these crashes, I found that in iOS 8, the memory keeps going up unbounded. So it means if I repeat downloading, there would be an OOM at last. The increased memory is all in CFNetwork under the iOS system.\nBut when I compile and run the same code for iOS 9 and 10, the memory usage keeps unchanged, expect when an image gets loaded, which causes a peak with ~20M usage. For a conclusion, there is something wrong in iOS 8 system and it is not likely that we could find a good fix for it. Furthermore, the share of iOS 8 is so small that I wonder it is worth to find a workaround now.\nIf you find it crashes in iOS 9 or 10, please let me know.\n. No, it is not supported in Kingfisher now.. What the size of your image, and how can you show it without Kingfisher?\nI am not sure what you want, but Kingfisher is made only as a shortcut to display normal images in an image view from web, instead of a specified domain solution (such as showing very large images). If you are using some other method to decode and show the image, maybe you could implement your own ImageProcessor to process the image data by chunk and then show it.. So you mean a photo from camera? It should be no problem by using Kingfisher.\nAnd the losing connect to your iPhone should have nothing to do with Kingfisher and the network, maybe it is something related to your device or cable?. Unless you are trying to load multiple photos at the same time.... If you want to show a list of small images, instead of loading the original ones, I suggest you upload a smaller version of your photos and load them. Whenever you need to show an image as thumbnail, use the smaller version. It is never a good idea to use an extreme large and detailed photo as a thumbnail. \nA thumbnail is a thumbnail, while the large image should only be used in the detail view when user is interested in it.\nOr you can try to resize it to a smaller version by using the ResizingImageProcessor. However, it could be a waste of network.. Why do you use a scroll view? It would be better to use a collection view for that. So you could get benefit from cell reusing and only the image in cell being displayed will be loaded. It will be much easier compared to adopting to a plain scroll view and managing all states yourself.. So isn't it perfect to use a collection view with paginate enabled?. :) I will close this for now. If there is still an issue on memory, you could also try to set ImageCache.default.maxMemoryCost to a small value (like 1) to disable the memory cache.. @ceyhuno Thanks for the p-r.\nIt is intended to store the data converted from image instead of the original data. The original data is the data downloaded from network, without applying any processor. Storing that data directly could work if you are not using any image processor. However, if you apply a processor on the original image, you definitely want to store the processed image instead, so there is no need to do the processing again when retrieving it from cache.. :( Have no idea. Any more information?. Duplicated to #536 \nIt's a CocoaDoc issue. There seems to be little we could do in Kingfisher for it. For now, you could refer to the API reference version of 3.1.0, which should be all compatible with current version.. @jyounus Had a double check and found this issue has been fixed several days ago (but after the deployment of Kingfisher 3.2.2). After a regenerating, the latest doc should work properly now. Try to access the http://cocoadocs.org/docsets/Kingfisher/3.2.2/ (and maybe refresh the browser)!. I believe it's an issue due to your cell reusing and/or the timing of updateUI instead of Kingfisher. \n(It is rare and strange to me to update UI in layoutSubviews, which should only update the layout as name indicating).\nWould you please check your code, especially the cell reusing timing and logic?. :). The image of your url has a white border itself. Could it be the blank space you mentioned?. So is it due to your aspect to fit mode?\nKingfisher should do nothing on the content mode, but just setting the image property of an image view. So I guess it's more likely a problem of your image view content mode.. P.S.\n. Instead of doing the dirty work in the completion handler, I suggest to using a ImageProcessor for this purpose. By that, you could get rid of modifying the images again and again but store the processed images in the cache. \nThere is already a ResizingImageProcessor, which might be a good start point.. Should be fixed in 3.2.4. Let's remove it!. I guess you could try to resize your images to fit your image view size first, and then apply a round corner filter. You could use the append method of ImageProcessor to concatenate two processors and create a new one.. Yes, you are right on the ImageProcessor. The main idea of storing the data converted from image instead of original data is for ImageProcessor. Kingfisher prefers to using more disk space instead of  applying the processor filter every time. CPU time and filter applying is much expensive and should be reduced as much as possible, compared to disk space. So, I guess the DefaultCacheSerializer now plays well in most situation.\nHowever, since you could implement and specify a new serializer as you like, it could be a performance improvement to store the original data, as long as you are not using any special processor. It depends on your choice. . You need import Kingfisher before you want to refer anything of this framework.. It's not supported in Kingfisher now, and there is no plan for it currently. :(. It is now an option. Please see the migration guide and our cheat sheet for more.. Hi,\nSorry for the late reply. So you means that the GIF is not playing when loaded from cache?\nAre you trying to use some your own image cache serializer? And may I know the GIF url you are using or could you even build a demo project so I could investigate it deeper?\nThanks!. Great to know that!. @ivampir  Sorry for the late reply! But as @sahandnayebaziz mentioned, Kingfisher does not support PDF files. You might be able to download and cache them by implementing some specified ImageProcessor and CacheSerializer, but it would be much easier to use some other ways in the comment above.. @ADevelopStudio Great work. Thanks for the code snippet.. Could you paste a url of that image? I will take a look.. You need to escape (url encoding) it before creating and sending it as an url to Kingfisher. Like this:\nswift\nguard let urlString = \"\u00e5\u00e5\u00e5\u00e5.png\".addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) else {\n    return\n}\nguard let url = URL(string: urlString) else {\n    return\n}\nimageView.kf.setImage(with: url). @zhanswift Oops. Sorry for that. Hope it does no harm.. Instead of using the default cache, you could setup and use two different caches (ImageCache), one for each.\nSee the cheat sheet for more.\n. Oh,\nThere is no such \"infinity\" date currently. Maybe you could set maxCachePeriodInSecond to a relatively large number, like \"300 * 50 * 60 * 60 * 24 * 7\" (about 300 years).. Sure. It could be clear to add a forever option for the cache time. I will do it later.\nAnd there is a KingfisherDidCleanDiskCache notification you could use for the images. You can find the API reference here.. Your selector will not get called if the instance (target) is not there.\nYou'd like to add that to a long life time object, for example your app delegate or your very first tab view controller which will exist across the whole app life time.. Cool. It should be no harm to expose them. And I will add documentation for them later.. It should not happen. Can you give some sample for it?. I guess your configure(data:) also got called multiple times?. :( Just tried to load the same image in the demo scene and a new project. Cannot reproduce it.\nIs it possible to build a demo project which could reproduce this problem?. Currently none of the built-in image processors (expect the default one) would work for GIF files.\nKingfisher applied some basic support for GIFs, like downloading and displaying. However, it is neither a professional nor a complete library for processing GIF.\nYou may need to implement your own ImageProcessor for that. And you could even use some other GIF-specified framework to help you for that. The only requirement is you can turn a GIF UIImage or even its data to a resized valid GIF image.. It seems that you are applying this processor to an image without alpha channel (for example, jpg files). When you caching that file to disk, Kingfisher will keep the format and use a nearest presenting way, which means stored as jpg.\nYou could implement a customized CacheSerializer to store the processed image as png to keep the alpha channel. Here is some code snippet for it:\n```swift\nstruct PNGCacheSerializer: CacheSerializer {  \n    public func data(with image: Image, original: Data?) -> Data? {\n        return UIImagePNGRepresentation(image)\n    }\nfunc image(with data: Data, options: KingfisherOptionsInfo?) -> Image? {\n    return UIImage(data: data)\n}\n\n}\nlet s = PNGCacheSerializer()\ntest.kf.setImage(with: url, options: [.processor(procesosor), .cacheSerializer(s)])\n```\nOr, just ask your server to give you PNG files instead of JPEGs.. Maybe related to #535 \nHowever, I cannot reproduce this issue for an image with non-top orientation exif. The round corner processor is doing nothing on the image orientation. So it is a bit weird.\nCan you upload this image in this issue? So I can take a look at it.\nAnd for a quick \"workaround\", maybe you could follow the NormalizingProcessor way to see whether it could work or not. (But it should not be necessary.). Since there is no additional comment, I will close it now. If there are any other similar cases, feel free to reopen this one or just create a new issue.. Hey.\nIt might be caused by some strange format of that image. May I know the image url (or the image itself) crashes your app? So I could have a look at what happen indeed.\nThanks.. Should be fixed in #567.\nThere are some other work to do before a new version could be released. I will tag it later ASAP.. @anhhtbk @salyasev @Eldhopj May I know what image causes this problem? Is there a link or an image I can use to reproduce this issue?. @seanliu1 Not quite sure about it. The image itself seems fine.\nIs there any crash log for it?\n@Eldhopj The crash of DownsamplingImageProcessor for zero or negative size should be already fixed in #1074, can you confirm that you are using the latest version?\n. It's a bug of Xcode 8. Please upgrade to Xcode 8.2, or you can just use an earlier version of Kingfisher (3.2.4) for a while until you upgrade your Xcode version.. Indeed, I think we'd better modify it to support some (not so) early Xcode version. I will take look at it later. Thanks for the feedback!. That makes sense! . Thanks for mention it. I will see what I could do with it. Maybe just cancel the previous downloading (but without calling the failure handler) could be a good idea.. The progress block now should only report the latest set url.. Thanks for the pull request. I noticed this issue and it's great you are trying to fix it. \ud83d\udc4d \nBut it turns that this p-r would be a breaking change of existing API, so it does not seems that it could be merged currently.\nInstead of ignoring and not calling the progress callback, is it possible to just cancel the current downloading task and make sure only one downloading running at a time? I believe it could be a clearer and correct way to solve it.\nIt could be a bit complicated since there is now a mechanism that multiple image views could share a same downloading task. Since the cancelling would break current downloading process, so if you are not sure about it, feel free to just leave it to me. I will give it a fix soon in this week I hope.\nThanks again for considering contributing.\n:). LGTM.\nIt's a good enough temporary workaround for now!. Fixed. :)\nThanks.. Maybe you mean something like this?\n```swift\nstruct GradientFilter: CIImageProcessor {\nlet startColor: UIColor\nlet endColor: UIColor\n\nlet startVector: CIVector\nlet endVector: CIVector\n\nvar identifier: String {\n    return \"com.domain.CILinearGradient_#{startcolor}_#{endcolor}_#{startvector}_#{endvector}\"\n}\n\nvar filter: Filter {\n    return Filter {\n        input in\n        guard let colorFilter = CIFilter(name: \"CILinearGradient\") else { return nil }\n\n        let startColor = CIColor(cgColor: self.startColor.cgColor)\n        let endColor = CIColor(cgColor: self.endColor.cgColor)\n\n        colorFilter.setValue(self.startVector, forKey: \"inputPoint0\")\n        colorFilter.setValue(self.endVector, forKey: \"inputPoint1\")\n        colorFilter.setValue(startColor, forKey: \"inputColor0\")\n        colorFilter.setValue(endColor, forKey: \"inputColor1\")\n\n        let colorImage = colorFilter.outputImage\n        let filter = CIFilter(name: \"CISourceOverCompositing\")!\n        filter.setValue(colorImage, forKey: kCIInputImageKey)\n        filter.setValue(input, forKey: kCIInputBackgroundImageKey)\n        return filter.outputImage?.cropping(to: input.extent)\n    }\n}\n\n}\n```\nPlease note that the identifier property should be identical, which says, for every combination of the startColor, endColor, startVector and endVector, the identifier should be different. Or Kingfisher will be confused when retrieving the images from cache.. @MayaLekova \nThanks for the information. I seems to be a gif decoding issue (Kingfisher is not a gif library after all). I guess we could add the same fallback in Kingfisher. I will check your sample app above and see what is the best way to solve it.\nThanks for your time in investigating it. It is really helpful and you are great!. Hi, may I get the GIF file with problem?\nI tried the one you mentioned in your original post (this) and it seems that Kingfisher decode it without problem for both UIImageView and AnimatedImageView (and it has 95 frames instead of 71). So I guess it is not the one with issue.. Should be fixed in version 3.4.0.. You can choose any string as your key. Just create an ImageResource and pass it to Kingfisher's image setting methods.\nSee\nhttps://github.com/onevcat/Kingfisher/blob/master/Sources/Resource.swift#L45-L64\nor the wiki for more.\n. Oh,\nNo, there is no such feature in Kingfisher. And it is not likely to be added since I didn't see good reason for it in an image downloading framework. You may use some other persistent way for your purpose. :(. \nIt works for me well, at least in the demo app.\nAny more information?. Maybe take a look at the demo app in Kingfisher, which is also using image view within a collection cell.\nCould it be related to this? https://github.com/onevcat/Kingfisher/blob/master/Demo/Kingfisher-Demo/CollectionViewCell.swift#L37. Can you build a sample app which could reproduce it? I'd like to have a look at it if there is a way to reproduce on my side.. Good to know that.\nYou mentioned about the shadow, which I guess is added by UIKit of tvOS to show a focus indicator?\nIt seems we do not have much to do with it since it is a system behavior and a almost a black-box to us. :( \nMaybe it would be better to use a small round-corner image instead of a fully round image to get a nice visual effect.. You are definitely correct on this! Thank you!. Should be fixed in version 3.4.0.. This should fix #492 and #375 . DO NOT use unowned unless you really know what it exactly means. Instead, I suggest you to use weak or just keep a strong reference here.. Hi, I cannot reproduce this in the demo project, everything goes well and no cell is retained. The demo project is also using a collection view and with cancelling of downloading in didEndDisplayingCell.\n\n\n\nAre you using some ImagePrefetcher for these cells? By default the prefetcher would use the same default downloader and it can will hold the download progress.\n\n\nHave you tried to upgrade Kingfisher to the latest version? We have a fix on the cancel behavior recently in version 3.4.0 (although I don't think it's related on this)\n\n\nTry to test in iOS 9 or 10, since there is a queue memory bug for debug environment of iOS 8.\n\n\nIf none of them solve the problem, would you like to try to reproduce it in the demo project? (Remember to disable the prefetcher things)\nSince I cannot see the issue, so it would be great if you could build a sample to reproduce it and I'd like to dig it to find what's going wrong.. ImageCache.default.retrieveImageInDiskCache(forKey: \"key\", options: [.onlyFromCache]) returns an optional image, so you just need to unwrap and use it. You do not need the ?.imges?.first, unless you r image is an animating one (GIF image).. You image size is 1440x2560, which means it will take more than 10MB. So it is not surprising it will take some amount of memory (but it should be only 10+MB for you)\nAnd it is not wise to do any profiling in a simulator or attaching to debugger. Please always try to profile your app in Instruments and if you find anything strange, you could attach the profile result and log, so I could have a deeper look.\nFor the log things, you may want to look at this.. Hi, thanks for considering contributing!\nThat's great if you could implement it! I think just extending the ResizingImageProcessor to contains additional properties would be a totally fine and better way.\nSince it should not be a breaking change, so please add this as an option and keep current implementation for default using. Currently, the input size will be respected without aspect fitting or filling. So I guess just add an enum in the ResizingImageProcessor to indicate the resizing strategy might be a good idea. I suggest an interface like:\n```swift\nstruct ResizingImageProcessor {\n    enum ContentMode {\n        case none // This will be the default one\n        case aspectFit\n        case aspectFill\n    }\ninit(targetSize: CGSize, mode: ContentMode = .none) { ... }\n\n}\n```\nHow do you think about it?. \ud83d\udc4d  @Drusy It's great to hear that you are interested in it too. I'd like to receive a p-r from you!\nHowever, since @TimOliver was earlier and might be still working on this, let's keep for a while to see Tim's comment now. :) . @TimOliver Great! Thank you.\n@Drusy :) . @TimOliver @BrikerMan @Drusy Thank you all! #600 was merged and I will prepare a release for it later today.\nfunc resize(to size: CGSize, for contentMode: UIViewContentMode) -> Image is now a UIKit specified helper method and we could merge it to the general resize one with new ContentMode enum, to improve readability. That should be another story and maybe I could find some time later for it.. @pNre Good catch. I believe you are right on this.\nCould you please also send p-r for button types too? Thank you!. @BrikerMan Could you see my comment and do some refactoring to the existing resize(to size: CGSize, for contentMode: UIViewContentMode), making it something like resize(to size: CGSize, for contentMode: ContentMode) so we could use it in both iOS and macOS?\nThanks!\n. @BrikerMan Good to see this.\nSince a similar p-r #600 was merged, I am going to close this one.\nThanks for your time and considering to contributing! \ud83d\udc4d . LGTM. @Drusy Sorry for the unclear test flow. :(\nThe test images has been moved to another project to keep this main repo slim recently. You could run setup.sh to add these test files to the project (which clones the test repo to local). I am now be back to my computer so I think I could add some tests for them very quickly.\nI will add the instruction to setup test to README too.. :(\nIt should not happen since ImagePrefetcher is using the same downloader as the ImageView extension under-hood. Generally speaking they should behave as the same (or at least similar) performance.\nBut I will check what happened here. Maybe it just because you are trying to load huge amount of images here? May I know the links.count you are using? Or you could try to set the maxConcurrentDownloads of ImagePrefetcher to a number smaller (default is 5) .. Maybe related to https://github.com/onevcat/Kingfisher/issues/634, since the delegate queue of url session in ImageDownloader is now the main queue. I will try to apply a patch for it, you could check whether it could fix this issue.. Currently, you can only stop the whole created image prefetcher, instead of stopping some specified urls.. This should be related to https://github.com/onevcat/Kingfisher/commit/9ce57167d9d95c788e66a6bfdff37ba6cbe63ec2#diff-6589daa66ba3ebddcf378d70a2c29032 and I believe it was fixed now.. How did you include Kingfisher into your framework? You also need to build Kingfisher for all valid architectures if you want your own framework to be compatible with all architectures.. Maybe you need to specified it in the Pods target?\nSome Ref. And I guess it could be done by a post install action in the Podfile.. And I am not sure if you are on the correct way to develop a framework which depends on another.\nIf my understanding is correct, you are trying to develop your own framework (and archive it as a .framework file) which depends on Kingfisher. First, the CocoaTouch framework (I am not sure whether your framework is a CocoaTouch Framework target, but Kingfisher is) is a dynamic framework and you may need to use lipo to combine x64, arm7 and arm64 architectures to a fat binary. Then when you are archiving it in your final app, you may need to resign it (and optionally strip the unused x64 part). The same thing has to be done for Kingfisher if you want to embed Kingfisher into the Framework folder in your framework. It is not a trivial work at all.\nIf you have no idea about what I am talking about, I suggest to use CocoaPods or Carthage to manage the dependency. You could just specify Kingfisher in your podspec or Cartfile, then deliver your framework as a dependency. It would be much easier.. Maybe related to #647 \nI suggest to upgrade both CocoaPods and Kingfisher version to see whether it could work.. Hi, @webmaster128 \nYes, the problem here is related to the reusing. There is a mechanism in Kingfisher's image view extension that if the target URL is not the same as the url of currently loaded image, it will neither think the image setting would finish nor call the completion handler. Instead, it just keep trying to wait the \"correct\" image to be back.\nIt is a reasonable behavior for it working with UIKit and from an end-user stand. The way of Kingfisher's is not quite the same as you thought.\nFor your specified situation, what you really need is to hook up to the downloading process. I suggest you to subclass the ImageDownloader and override the downloadImage method as you need. Then, use the customized downloader as an option to make your indicator working.\nMaybe some code snippet would help: (I didn't test them myself, so just for you as a reference)\n```swift\n// MyDownloader.swift\nclass MyDownloader: ImageDownloader {\n    override func downloadImage(with url: URL, options: KingfisherOptionsInfo?, progressBlock: ImageDownloaderProgressBlock?, completionHandler: ImageDownloaderCompletionHandler?) -> RetrieveImageDownloadTask? {\n    NetworkActivityIndicatorManager.shared.incrementActivityCount()\n\n    return super.downloadImage(with: url, options: options, progressBlock: progressBlock) { (image, error, url, data) in\n        NetworkActivityIndicatorManager.shared.decrementActivityCount()\n        completionHandler?(image, error, url, data)\n    }\n}\n\n}\n// In some global scope\nlet myDownloader = MyDownloader(name: \"my_downloader\")\n// Using the new downloader\nimageView.kf.setImage(with: url, options: [.downloader(myDownloader)],\n```. @tomaskraina \nThe extension methods are using ImageDownloader.default instead of the KingfisherManager.shared.downloader. The one in KingfisherManager is a legacy way and now should not be used outside (I will add deprecated annotation to it later.)\nI strongly suggest to use the options way in the sample above to pass the downloader for each downloading. It could reduce risk of unintended code sharing. If you need to use your own downloader more than once, you could create your own wrapper of existing code like this:\n```swift\nextension Kingfisher where Base: UIImageView {\n    func setImageWithMyOwnDownloader(with resource: Resource?,\n                                     placeholder: Image? = nil,\n                                     options: KingfisherOptionsInfo? = nil,\n                                     progressBlock: DownloadProgressBlock? = nil,\n                                     completionHandler: CompletionHandler? = nil) -> RetrieveImageTask\n    {\n        var options = options ?? []\n        options.append(.downloader(ImageDownloader.default))\n    return setImage(with: resource,\n                    placeholder: placeholder,\n                    options: options,\n                    progressBlock: progressBlock,\n                    completionHandler: completionHandler)\n}\n\n}\n```\nThen you could use anywhere else.. @tomaskraina \nOops, you are right, the one actually called by extension method is not the overridable one.\nI think it is much clearer and is a correct direction to use a delegate to implement it! But be careful that the didDownload callback will only get fired when the downloading finished without problem as well as an image object could be created from data. You have also to handle the case of downloading or creating error. Currently there is no callback for that and maybe we could add them later.\nHowever, I've tried the imageDownloader(_:didDownload:for:with), it seems that this method works fine for me, with correct count. Could you give some more information on it (like the url you are trying to download)? It is strange to me since it should definitely be called once per image downloading.\nThanks!. :(\nKingfisher itself handles the disk full error when writing data, but I guess there is little we could do with this according to your log, since it is deeply in the ImageIO while converting the image to data. It is before Kingfisher could even try to write the file to disk with NSFileManager.\nMaybe opening a radar to Apple would be a better way to solve this.. The setImage method of Kingfisher is an async operation. The image property of your folie1Image is still nil when you trying to force unwrap it.\nIt is not a Kingfisher issue but the way you use Swift. I suggest to ask in Stackoverflow instead of opening an issue here. You would get more chance to be helped there.. I believe you could always run your code in main thread in your own processor, by using:\nswift\npublic func process(item: ImageProcessItem, options: KingfisherOptionsInfo) -> Image?\n    return DispatchQueue.main.sync {\n        let image = ... // Your code needs to be performed in UI thread\n        return image\n    }\n}. Please read the Cheat Sheet wiki to know how to use a feature. And refer to the docs for more detail of ImageCache.. What is the sparkAddressString? \nThere is no such method in Kingfisher nor Kingfisher tries to call.\nSo, it seems not to be a problem in Kingfisher. Are you using some runtime swizzle or injection to modify the ImageCache class?\nI guess you are using Spark Inspector in your project? Try to turn it off to see whether it could help.. It's nothing to do with the quality of Kingfisher project and should be an issue of Spark Inspector.. Should be fixed in https://github.com/onevcat/Kingfisher/pull/613\nIt took me about 2000ms before. And now 100ms. . Only aspectFit and aspectFill now is supported in a AnimatedImageView. All other cases will fall into the scaleFill. This is an aggressive optimization for large size gif, which will resize them to the image view size instead of wasting memory by a render scaling.\nYou can set needsPrescaling on AnimatedImageView to false to disable it, then Kingfisher will respect your content mode setting on the image view.. I cannot fully understand you, but it seems you are trying to do an aspect fit resizing?\nMaybe you could just try the resizing processor with that option:\nswift\nlet p = ResizingImageProcessor(targetSize: size, contentMode: .aspectFit)\nwhere the size should be your image view's size.. Maybe you could try to do some brief search before open such an issue. Like this might help.. Maybe you could try to do some brief search before open such an issue. Like this might help.. Have no idea. It should be your project setting instead of a Kingfisher issue. Please try to clean and update the cocoapod repo.. @mono0926 \nThanks for your fix on crash. I will take a look at it later.\nFor the flickering, it is intended since Kingfisher will clean the memory cache when you switch to background. When you reload the images after that, the images will be retrieved from disk, which is an async operation (to keep best UI performance). The image views will be set to placeholder as soon as you call set method, but the final images will be set after a few run loops. It is the reason for the flickering if you are using something like nil as placeholder. \nYou could add .keepCurrentImageWhileLoading option to keep the loaded images so it could be avoided. However, this flickering should always happen when after you switching background, I wonder why you say \"If Reload button tapped a few seconds after became foreground, not flickering occurred\".. :(\nI cannot reproduce the flickering after I added .keepCurrentImageWhileLoading in the sample app. So I guess it might be some other issues. Which systems/devices did you try? Did you change anything else in the sample app?. Ah,\nI could reproduce it! You need to click the reload button really quite fast.\nCurrently have no idea on it, but I will investigate it more on it.\nBefore we could get conclusion, we could leave this issue open for a while.. In Kingfisher 5, we have a better way to prevent any of the flickerings in the table view or collection view. Use loadDiskFileSynchronously to solve it and avoid side effects in cell reusing.. Great!. This crash is deeply in the NSAllocateMemoryPages and I guess it is more or less related to a low level memory problem. Maybe it happens when the device has a low memory. In fact there is little we could do in Kingfisher for it. \nMaybe you could try to set a smaller memory cache value (or disable the memory cache) to get some trade off on memory usage.. \ud83d\ude02. I am not familiar with SVG file. However, if you can find a way to convert your SVG file between Data and UIImage/NSImage, you could implement an ImageProcessor and a CacheSerializer pass them to Kingfisher's manager as an option, then Kingfisher could handle downloading/caching for it.. @Codeido Thanks for the detail explanation!\nAnd you may also want to implement a CacheSerializer if you need to cache the image instead of downloading it again and again. (But I believe since the svg files are usually really small, this would not be a big impact on user experience.). It's not a Kingfisher issue, but an Xcode 8 simulator debug problem. Maybe this post would help.. Background decoding does not support back ground decode now. And it could help little on this. \nThe main reason of lagging gif might mainly be that you trying to use the AnimatedImageView. You could try to use the normal UIImageView if the size of your GIF image is not large. You have to get a balance of memory/cpu usage between the two modes (all decode at once or decode one image per frame).. You can download and cache any image if you know the url.\nAnd it is not a good place to ask question in GitHub issue. The issue page is for reporting problems, instead of asking for a tutorial.\nI'll close it.. Not sure what happened because this crash is deeply laying in Apple's codebase.\nMaybe related to https://github.com/AFNetworking/AFNetworking/issues/2468\nHowever, it seems that there is little we could do in Kingfisher.\nP.S. Does this always happen in iOS 8 only? If so, I guess it might be an system issue which was already fixed recently.. You need to use the extension methods of image view to set it. Please read our wiki before open such an issue.. The disk cache size limit is a \"soft\" limit instead of a \"hard\" one. Calculate the whole cache size before determine whether to store it or not would be a performance cost behavior. Kingfisher will only check the disk size and remove some older caches which exceed size limit when you switch the app background.. Yes, you are correct. The files will be checked and cleaned when user click Home button to switch your app background, or when you call the cleanExpiredDiskCache manually.\nI guess it is a reasonable place to set it in AppDelegate.. Done in https://github.com/onevcat/Kingfisher/pull/641. It makes sense. Thanks.. @alibasta Yes, you are right. There should be no need to delegate the session to main queue. Maybe we could just pass nil when creating the session object and let the system creating one for us, according to doc:\n\nIf nil, the session creates a serial operation queue for performing all delegate method calls and completion handler calls.\n\nWhat do you think about it? If you feel that this is OK, a p-r on it is warmly welcome!. Instead of change the access level of url session or delegate queue, I prefer to keep a minimal interface to framework users unless it is really necessary. Hope you could understand it. (If you think it would be better to make the url session open or public, feel free to leave a comment and discuss more. :] ). Instead of downloading them like this, I suggest to use the ImagePrefetcher for this purpose, which is wrapped to a better API and limited the concurrent jobs at a time. You could just feed your urls to it and wait for the result:\nswift\nImagePrefetcher(urls: urls).start()\nThere are also progress and completion callbacks for you to know the result of downloading. Refer to the wiki on it for more.. And another delegate queue instead of main queue could definitely be an improve too!. Maybe you could try this branch: https://github.com/onevcat/Kingfisher/tree/fix/non-main-queue-delegate\n(Not merged into master yet). But I guess the improvement of it might be trivial. It would be appreciated if you could tell me about the result when you have any progress.. Do you know what is the most CPU consuming method? Could you do a profiling in Instruments for that?\nAnd since you are not likely to using them, I guess you could also disable the memory cache by setting ImageCache.default.maxMemoryCost = 1 to limit the RAM.\nAfter all, Kingfisher is not designed as a raw data downloader for huge amount of files (which I believe you are seeking for). Instead of just giving you the raw data (what is needed in your case), the default downloader of Kingfisher also creates and prepares the images to be displayed. It could be a waste. IMO, if you are in bottleneck on this, it would be better to use or implement a specified version of file downloader.. It's cool to know that. Is it possible for you to send a pull request on it? Thanks!. Merged. Thank you!. Hey, what was the version you were using before upgrade? Recently there should be no change on memory management in Kingfisher so I guess it would be some other reasons.\nBTW, it is normal that the memory usage keeps going up when you show more images, since there is a memory layer of cache in Kingfisher which would hold your images in memory. The in-memory cache follows some rules so generally you should have no worry about it. When the size limitation hit or a memory warning received, Kingfisher will release the resources automatically. \nYou could try to call ImageCache.defalt.clearMemoryCache() to see whether the memory usage drops. Or you could set maxMemoryCost to a value (default is 0, means unlimited) to change this behavior. But as I mentioned before, it should not be necessary since Kingfisher would purge the cache itself.. It is an NSCache underhood, so it will refuse new cache once upper limit is reached. You could set the maxMemoryCost at any place you want. A general place could be the app did finish launching delegate method in AppDelegate.. I cannot open your urls (like http://www.nust.edu.pk/PublishingImages/pdc-apr17-ws-2.jpg) even in my browser. So it seems that your images are not served correctly?. Maybe you need to turn off the ATS, if you are trying to load it in the demo project.. @MadsBogeskov Thanks for considering to contribute. But I am afraid I cannot merge this due to these two consideration:\n\n\nSetting a highlight image is not a regular operation, so I wonder whether it is worth to have an extension method on it. It somehow added complexity to the framework and its users, but could only benefit very limited or few developers. \n\n\nThe ImageView extension contains  a web url associated object, to keep track of current loading url. In your implementation. When downloading finished, Kingfisher will try to check the url to set whether it should actually set that image or not (since there might be multiple setting invocation before an image downloading finished). In this p-r, the url will be share between normal state images and highlight images. It would cause problem if you try to set a normal image and a highlighted image at the same time.\n\n\nTo use Kingfisher for highlighted image property of an image view, it should be not hard to use the KingfisherManager's retrieve method and then set the highlight image in completion block. The downloading and cache will also be handled by using the manager.\nThank you for your time and this great p-r. I'll keep on eye to this feature too to see whether we have a better choice on it.. We have to be prudent to add such an extension method to the framework, unless it is a very widely-used feature. Now Kingfisher supplies an ImageView extension since almost all use cases is targeted to an ImageView. However, UIBarButtonItem should not be in this case.\nOf course you could wrap an extension for your own project if you are using it for UIBarButtonItem. Thanks to the KingfisherManager it would not be hard. Basically, you just use the retrieveImage method in the KingfisherManager to get the images from cache or web, then set it in the completion handler. \nYou could find reference on that in this page.. Yes, it will be recognized as a new and different image, and will be cached as the first kind. The url absolute string will be used as cache key by default.. And I have to say, the GitHub issue is not a good place to ask questions.. Hi,\nIt is intended to have only async method for getting disk size. If there are quite a few (like thousands) files in the disk, getting the total size of them could be a time-consuming work and it might cause your UI freezing if not used properly. Making it an async method instead of a sync one could be a tip for users for that.\nYou code will fail since the return statement happens before the block has a chance to be invoked. If you need to get the size (and maybe display it in UI), you need:\nImageCache.default.calculateDiskCacheSize { size in\n    print(\"size is (size)\");\n    self.label.text = \"Size (size)\" // The callback is already in main thread so you have no need to dispatch it again.\n}\nIf this could not solve your problem, could you tell me why do you need a sync way to get the size?  . Hi,\nThe behavior of ResizingImageProcessor is intended and correct here. The target size is only a \"target\", or say, a reference size when you are passing a contentMode. It could be not the same as the final image size since we have to respect the ratio if there is an \"aspect\" mode. \nHere you are using . aspectFill, and the resized image has to be 64x99 to respect the aspect ratio of your image. And I believe the final image size should be also 64x99, without squashed, it might be something like this (if you were using a RoundCornerImageProcessor with 32.0 as its cornerRadius):\n\nMaybe you are using a \"Scale To Fill\" as your image view content mode, so you are getting a squashed image. You could try to change it to something like \"Center\" to see whether it could display the final image.\nWe should improve the documentation for targetSize of ResizingImageProcessor to make it clearer, however, it is the intended way that the resizing processor working.\nFor your case, I suggest you to use a CroppingImageProcessor (or a combination of CroppingImageProcessor and ResizingImageProcessor) to get a squared version of your image, and then RoundCornerImageProcessor to get a proper roundcornered image.. @bmetitiri Yes, you are right. I will update the documentation for it soon. And maybe also rename the parameter labels.. https://github.com/onevcat/Kingfisher/pull/646. Oops, yes. We need consider image scale when cropping it. I'll give it a fix soon.\nHowever, I suggest to pass the .scaleFactor from the image setting methods instead of injecting it in the processor. You will lose it when you trying to load it from disk cache, so the image might be at scale of 1 at there.. Scaling fixed in #649 . Just tried to follow the instruction and everything goes fine to me:\n\nSo I believe it is something wrong with you dev environment. Could you try to switch the scheme to Kingfisher and build it to see whether there is any error?. Not sure what happened. :[. It is hard to say where exactly the issue is unless I could reach your environment. But it should be related to framework search path setting somewhere.\nInstead of manually installing, could you give a third party dependency manager like CocoaPods or Carthage a try?. :(\nSorry but have no idea now. . @shevakuilin @lususvir @achal1012 \nThanks for reporting this. However, I have no issue in installing and using it through CocoaPods. Since Kingfisher has passed the pod lint when submitting to CocoaPods, so I believe it might be an issue related to specified development environment. Could you tell me something more about it? Like your CocoaPod and Xcode version. \nIt would be great help to dig it if you can paste the result of pod env in the project directory here.\nThanks.. @lususvir @achal1012 \nThanks for confirming that. Although I am note 100% sure about it, but it seems to be an issue with unmatched Swift version and CocoaPods submitting supported version. For everyone later encountered it, I suggest to try to use the latest combination (Swift/Xcode, CocoaPods and Kingfisher) to see whether it could work or not.\nThank you again all.. @pallavi10aggarwal Could you try to upgrade your CocoaPods to 1.6.0 beta? It seems that they fixed some errors for Xcode 10, maybe it is related.. @pallavi10aggarwal It should be not related to your deployment target.\nIs there any detail error information in your build log, except for the \"No such module\"? Is there any build error inside Kingfisher, or can you find the built Kingfisher.framework in the Products folder of your Pods project?\nI also suggest cleaning the derived data folder then restart your Xcode to have a try.. Could you just build your Pod project correctly? You could try it by changing your build scheme to Pods-CocoaPods or Kingfisher under the \"Pods project\" to see whether the framework itself gets built.. @pallavi10aggarwal Good to hear that!. Thanks for reporting this. However, there might be very little Kingfisher could do since the crash lays deeply in Apple's code.\nMaybe we could dig it deeper by setting the NSZombieEnabled, MallocStackLogging and some sanitizers to get more detailed information.\nBTW, does it still happen when you comment the cancelDownloadTask()? I guess we need to shrink the search area down first.. Fine. At least we have some clue.. @Killectro Hi, no idea on this now. Could you find a stable way to reproduce it?. It makes sense and definitely to be an improvement. I will consider to see whether we could add an option for it later. Thanks!. Implemented in 3.10.0. You need a valid url which conforms to RFC 1808, RFC 1738, and RFC 2732. Try to make sure your URL is not nil before sending it to Kingfisher.\n. I suggest you to set the allowed memory cache to a very small value to avoid memory cache for these huge image:\nswift\nImageCache.default.maxMemoryCost = 1\nAnd for your case, maybe it worth to also set the image property of image view to nil when the page did disappear from the screen, to make sure that only one image is being loaded into memory at one time.. 1. Yes. However, by setting maxMemoryCost to 1, you have already disabled the memory cache.\n2. It is not the cache. The system needs such memory to hole and display a full bitmap image (approximate for a 32 bit png ~ 600038218bit*4channel = 733Mbits = 87MB).. Please try to encode your url and make sure that you are not passing nil to Kingfisher.. If your images are already in the app bundle or disk, you could just pass the local url of that image to Kingfisher to do so, like this:\nswift\nlet url = Bundle.main.url(forResource: \"my-image\", withExtension: \"png\", subdirectory: nil)!\nimageView.kf.setImage(with: url, options: someOptions)\nIt is now not supported to set the images directly in the behavior you need now. Some options like . processor or cacheSerializer are only work with ImageDownloader or ImageCache, and they are not actually related to the image view.\nFor processors, all the built-in processors are marked as public, so you could just create a processor and apply it to your image object directly, then set it to an image view.\nThe transition will not be hard either, it is nothing more than an invoking to UIView.transition(with:duration:animations:).\nGenerally, it will not be difficult to implement it in the base of current Kingfisher. However, I think it is not a good idea to supply such a method in this framework. What Kingfisher does want to handle is networking images and we need to be focus on this as much as possible.\nThank you for proposing it , and let me know what you think about it.. @damirstuhec \nThank you for your understanding on this!\nIf anyone needs this feature later, please feel free to add a comment. We will keep an eye to see whether it would be a widely wanted feature. . Hi, @jwelton \nThank you for proposing it. However, it is intended to not include a binary version when releasing, at least until the ABI stability of Swift.\nThe reason is simple. Since you can only use a framework with the same version of your Swift, an earlier version will not be able to use when new Swift version released. That would mess things up if the user need to pin to a specified version of Kingfisher while they want to upgrade to new Swift. Also, any one still using an older Xcode/Swift could not be benefit from newer version of Kingfisher either. It also adds unnecessary complexity when using and maintaining the framework. Quite a few frameworks are uploading binaries in release, but the result and feedback is not so good as I know.\nFrom Carthage 0.20, there is a --cache-builds flag to skip build when there is no change for the framework, which would boost the build process. Maybe you could keep your git repo and previous built artifacts for dependency, and use --cache-builds to make your build faster.. Should be fixed now. Thank you!. WebP is not supported in Kingfisher by default. You may implement your own processor and cache serializer to use WebP. See #54 . Hi, @ShaharHD \nThanks for considering it. However, we have no plan to add built-in support for WebP in Kingfisher currently. In fact it is still a not-so-widely used feature on iOS platform, Apple does not support it yet either. To support WebP, we have to introduce some dependency into Kingfisher, which is not a good idea for now. \nSince we have ImageProcessor, it should not be a hard thing for framework users to implement their own solution, or they could just use KingfisherWebP for a quick solution.\nOnce Apple supports WebP decoding and encoding in iOS, we could support it too quite easily.\n. It seems that you are not setting the image if the avatar path is nil, so the reused cell with pre-set images will show. Maybe you could add an else clause to reset the cell image. And also remember there is a placeholder parameter for you to show a place holder while loading the image.\n```swift\nlet placeholder = UIImage(named: \"ListenerImage\")\n if item?.post?.owner?.avatarPath != nil\n{\n    let avatarPath = item?.post?.owner?.avatarPath!\n    let urlString = \"http://s3.amazonaws.com/(avatarPath!)\"\n    let profileImageURL = URL(string: urlString)\ncell.ImageView?.kf.setImage(with: profileImageURL, placeholder: placeholder, options: [.transition(.fade(0.5))])\n\n}\nelse\n{\n    cell.ImageView.image = placeholder\n}\nreturn cell\n``. You could useReqeustModifierfor it. Please read our [wiki](https://github.com/onevcat/Kingfisher/wiki/Cheat-Sheet#modify-a-request-before-sending).. TheM_PIshould be already fixed recently. Please upgrade your Kingfisher.. TheURLtype is conformingResourceprotocol, so it is fine to have a url as the first parameter.. TheImageDownloaderSessionHandleris an internal type which is used to handle and encapsulate theImageDownloader. It is intended to be private to hide details from the framework users. A possible way for you would be using theImageDownloaderDelegate. There is a [imageDownloader(:didDownload:for:with:)`](http://onevcat.github.io/Kingfisher/Protocols/ImageDownloaderDelegate.html#/s:FP10Kingfisher23ImageDownloaderDelegate15imageDownloaderFTCS_15ImageDownloader11didDownloadCSo7UIImage3forV10Foundation3URL4withGSqCSo11URLResponse__T_) method you could use to measure a task. It does contain the processing duration from downloaded data to an image, however, it should be a good measurement if you are using the same processor (or the default processor, if you are not specifying a customized one).. @ShaharHD Yes, I think that is a good direction. Thanks for it.. Thanks!\nIt was a travis issue and I'll restart the tests.. > Version 3.7.0 was never pushed to cocoapods\nOops, didn't notice it. It should since the release script runs without issue. I guess it might be a CocoaPods issue.\n\nI would appreciate if you can push 3.7.1 also with my fix after you approve it so I can base KingfisherWebP on the latest while I'm implementing the proper animation (right now I have it pointed to my branch for development)\n\nSure. I'll release 3.7.1 once it prepared.. @ShaharHD \nGreat. I added another comment. Please fix that too before we could finally merge it.. @parbo86 Hi, thanks for reporting this.\nHowever, I tried your steps but I cannot reproduce the issue. All completion blocks are called for me. Here is the snippet I am using in the collection view cell willDisplay method:\n```swift\nprint(\"(indexPath.row + 1): Started\")\nlet url = URL(string: \"https://dummyimage.com/100/888888/(indexPath.row + 1).jpg\")!\n_ = (cell as! CollectionViewCell).cellImageView.kf.setImage(with: url,\n                                       placeholder: nil,\n                                       options: [.transition(ImageTransition.fade(1))],\n                                       completionHandler: { image, error, cacheType, imageURL in\n                                            print(\"(indexPath.row + 1): Finished\")\n})\n```\nAnd after several try and double check, I could pair every \"Started\" and \"Finished\" without problem. Could you confirm that you have the same number of \"Started\" and \"Finished\"? Maybe the UIKit would skip some \"willDisplay\" method when you scrolling too fast in a device? (I am not sure about it)\nAnother possible reason might be the slow connection? There is a 15 seconds timeout duration. If the downloading progress gets stuck, you may need to wait for 15 seconds before the completion handler called (with a timeout error).\nIf none of above could explain this, does this issue happens only in a specified device type/system version? I tried it in an iPhone 7 simulator with iOS 10.3. May I know your environment?. OK, I think I found the reason. This is due to we are not holding the base image view here.\nThe completion handler should be always called, however, we do not want to hold the image view since it is a waste if the image view is already get dealloced.\nI will give it a patch soon. Thanks again for reporting this!. Hey,\nHow about just adding the FirstImageView to the SecondViewController? Like this:\n```swift\n// In first view controller\nlet vc = SecondViewController()\nvc.imageView = FirstImageView\npresent(vc animated: false)\n// In second view controller\nvar imageView: AnimatedImageView\noverride func viewDidLoad() {\n    super.viewDidLoad()\n    view.addSubview(imageView)\n}\n```\nMaybe you also need to add it back to FirstViewController to correct superview when you come back from SecondImageView.. Good suggestion. I will look at it now to see what we can do.. Implemented in #669 . I don't think it worth to add such an option, since Kingfisher's main purpose is Downloading & Caching images. That the image view extension doing is combining all these parts together. So I cannot see a good reason to have an option opposing against this.\nFor your case, you could just use the ImageDownloader method to download an image (see the wiki). It should also be very easy to write your own wrapper to set an image view without caching by using ImageDownloader.. @mxp7064 In Kingfisher 5, you can use this to prevent cache (or override the cache option with per image bias):\nswift\nimageView.kf.setImage(\n    with: url,\n    options: [.memoryCacheExpiration(.expired), .diskCacheExpiration(.expired)]\n). @oradyvan You are definitely correct on this!\nFixed in #673 . Not possible now. I am working on a solution (bringing back the defaultOption to KingfisherManager, which was once existing quite long ago) and will release an update for it later.. Implemented in #674 . @ldantona \nSure, I am releasing it now.. Your description is not enough for me to know what's going wrong. Could you tell me more about your situation? A demo project which could reproduce the issue and/or some steps which could reproduce it would be a great help.. @luannguyenkhoa Just tried you demo and everything goes fine to me:\nhttps://i.gyazo.com/63af8b7546eb71c6b99866ffd7ef394c.mp4\nIs there any special steps to reproduce this? \nOr could it be a version specified issue? On which versions of Xcode or iOS devices you tried it?. I guess you set the allocation life span to \"All Allocations\"? You may need to use \"Created & Persiatent\" to see the used memory. (And it is normal to keep going up in \"All Allocations\" when using AnimatedImageView, since it DOES allocating all the time to keep a small usage of memory.)\n\n\n. Please use related method in KingfisherManager. Read our cheat sheet for more.. Umm,\nYes, we are using a feature of the latest Swift.\nI'll try to fix it later. Before that, you could downgrade to 3.8.0, or even upgrade your Xcode to 8.3.. Fixed in 3.9.1.. @igordeoliveirasa In fact there were some discussion on it before and I made some change for it here (have not been merged yet). \nI am not familiar about AwaitKit and I am not sure what happens. But does change the delegate queue from .main to nil (just like in the commit above) solve your problem?. It's not supported.. Please add more information on this or there is little we could do.. What's the crash log or error message? And how could you/I reproduce it?\nPlease follow the issue template to submit an issue, this could save a lot of time for both of us.. No. It is not supported.. Please use search before you open an issue. (and also keep the issue template)\nhttps://github.com/onevcat/Kingfisher/search?q=webp&type=Issues&utf8=\u2713. It will not be added until Apple embedding a decoder for it in iOS system.\nSee https://github.com/onevcat/Kingfisher/pull/362. I tried that url on iOS 8.1 Simulator and 8.4 Simulator, but I cannot reproduce it. It loads fine for me.\nCan you confirm that this issue happens every time (or at least frequently) for you? Could you try to clear the disk cache and then try to download that image again?. @codwam Thanks for the feedback. Could you try to load the same url in the demo project in the repo, or a clean project, to see whether the same thing happens?\nAnd I'd also glad to have a deep look into it if I could reproduce it. If it only happens with FSPagerView, could you kindly build a small sample demo for me to continue? Thanks!. @codwam It's quite hard to say where is the problem. Any chance to build a minimal project to reproduce this stably? Or is there any useful log in your project when it happens?. There is little thing I could do unless I can reproduce the problem. How could I reproduce your issue? Anything like a sample project or some steps to crash the app would be a great help.\nA common reason according to your description might be that you are using the full version of images as thumbnails (say the image view is only 50x50 but you are loading a 1000x1000 image into it). . Hey, @ruipfcosta \nWe didn't see difference in memory between a normal decoding and a background decoding in our sample project.\nWe didn't receive any reports on this before, so I am not sure what happened now. Is it possible for you to build a demo project which could reproduce this stably? I'd like to have a deep look at it if I could reproduce it.\nThanks!. autoPlayAnimatedImage is only used for playing it automatically when image set.\nMaybe you need to use stopAnimating() to stop an animation?. ResizingImageProcessor respects your image scale, so if your image is in 1x scale (it seemly to be your case), while you are targeting a device with 2x or 3x display, you need to set the size according to your screen:\nswift\nlet scale = UIScreen.main.scale\nlet resizingProcessor = ResizingImageProcessor(referenceSize: CGSize(width: size.width * scale, height: size.height * scale)). @cikpis Can I get the link of your original image? Thanks.. @cikpis Just checked code in Kingfisher and also compared with Toucan. I cannot see real difference between the resizing methods of Toucan and Kingfisher, except the scale handling. In Toucan, the images are drawn with the screen scale, that means 2 in most retina devices and 3 for iPhone x Plus. \nBy using a larger size in Kingfisher you should be able to get the same result.\nCould you please try to make sure that you are setting the image size correctly? You can print the final image size and image scale. The image quality should be the same if the final image size * scale equals each other.\nFor example, when you set size = (100, 100) for Kingfisher's resizing method and pass an image with scale of 1 (it is the regular case for downloaded image) into it, you will get an image sized to (100, 100) with scale 1, that means 10,000 pixels. However, when you use Toucan with the same size, Toucan will try to convert it to scale 2 at the given size, the result is (100, 100) at scale 2, which means 40,000 pixels. That is the reason why Toucan's result is better. If you pass (200, 200) as the size input to Kingfisher, the result image will be (200, 200) at scale 1, it should be exactly the same quality with the Toucan result.\nI tried your image with (500, 500)@1x of Kingfisher and (250, 250)@2x of Toucan, and then set the image to a 250x250 image view. You can see that there is no difference between them:\n\nKingfisher (500, 500)@1x\n\n\n\nToucan (250, 250)@2x\n\n\n. Oops. have no idea what happened. Are you trying to set them to an image view with 325x325?. Tried again to set images by both result. I also got them from disk and compared side by side:\n\nLeft is from Kingfisher (650x650@1x) and right is Toucan (325x325@2x). I resized the preview window to make them the same size and I cannot find any difference in detail.\nI think I cannot reproduce this issue now, at least in the sample project. I created a branch (https://github.com/onevcat/Kingfisher/tree/issue-689) to include Toucan result in the demo project. Could you try to checkout it and build the Kingfisher-Demo target to see whether the images are the same for you? So we could know whether it is a environment-related issue or not?\nThanks!. @cikpis \nOh, I see. You are using shouldRasterize, it is also related to the image scale. I think you could add\nswift\nimageView.layer.rasterizationScale = UIScreen.main.scale\nto avoid this.. I think you can never get this work if you use shouldRasterize. The transition are built on UIView animation (UIView.transition) but shouldRasterize requires the layer be rendered as composing, so it is not possible (or not a good idea) to perform animations like fading, since it requires multiple redrawing of the image.\nA possible workaround might be setting the shouldRasterize in the completion handler, where the animation is just over (And you may need also to remember to reset it before loading a new image in the same view). However, I am not sure whether this is what you want and/or whether there is risk to introduce performance issue to your UI.. @lastcc Hi, all the processors (ResizingImageProcessor, CroppingImageProcessor) will result an output image in point instead of pixel. \nThe problem might be that you didn't specify a correct scale on loading it. Since in Kingfisher, most of the images would be downloaded from network, there is no such \"@2x\" or \"@3x\" convention to decide the scale of an image, Kingfisher leave it to the framework users. If your images should be a 2x image, you need to also pass .scaleFactor(2.0) to the methods in Kingfisher as an option (default is 1.0). The processors you mentioned will respect the image scale. (Please submit an issue if it does not work like that.)\nThe blur processor will apply a pixel blur radius to the pixel based image (its raw data) and then create a new image based on original image scale. In other word, you should be able to treat the blur radius as a point-based value. My previous comment for the original post might be a bit confusing. Instead of handling scale in the processor, maybe it would be better to create an image in the scale you need to get a correct point-based image first.\nThe anchor is a related value to the image size and it works fine for my own needs to crop at center or corner. But yes it would be useful if we could also crop at an origin. Any p-r on this would be welcome. If you'd like dismiss more about it, please open another issue.. @lastcc Ah, yes there is an issue in the background decoding. I will give it a fix soon.\nNot only blur processor, all processors do not contain the scale as the identifier key. It should not be a problem since generally there should be no case to use different scale in a single device.. @wjling The referenceSize is the target (final) size of your image, not the pixel count. For your case, instead of using a ResizingImageProcessor, I guess it should be enough if you just pass .scaleFactor(2.0) as the option when you set an image.. It should not happen if you are trying to set the image view with urls since Kingfisher will use the hashed value of absoluteString of URL as the cache key.\nIf you are using some other Resource instead of the default implementation, please check that you are doing things right and these two resource have different cache key.\nAnother possible reason might be you are setting the wrong image view. You could check the image url in image setting completion handlers to see whether you are setting the correct ones. \nIf you cannot solve this, it would be appreciated if you could supply a demo to reproduce it and I am glad to have a deeper look into it.. Please read our wiki and issue template before ask such a question.. What do you mean on the \"cache of expired time\"? Did you mean the expired time of cache? Is this what you want?\n. > Set this value to a negative value (like -1) will make the disk cache never expiring.. I noticed that you are fetching a lot of images and it might be a problem of the stack. The completion stack is too large and it might be a stack overflow.\nCould you confirm that this issue only happens when you have a large number of images?\nIf so, a possible quick workaround is breaking down your images into smaller set and download it with multiple prefetchers.. @cl3m Good catch on it. I will try it soon. Thanks!. The prefetcher stack overflow issue should be fixed in 4.4.1. (preparing a release now.). @JunyuKuang I agree with you on this. I'll try to implement this later.\nOr do you want to submit a PR to implement it? \ud83d\udc7b. Merged.. @ealymbaev \nAs @JunyuKuang mentioned, this is a commit without changing current behavior. Instead of invasion of  default serializer by checking an processor option (which will introduce a coupling between these two parts), it is a good idea to leave it to framework users to determine how to store the images to disk.\nJust pass .cacheSerializer(FormatIndicatedCacheSerializer.png) as an option to your setting methods with round corner process will do the trick.. LGTM! Thanks!. See #698 . Kingfisher will cache your images in memory by default. Please read our wiki and FAQ page for more. (And also do a search in the repo you will find more information on this). May I know what the Swift / Xcode version you are using?. Seem it is a non-back-compatible change in Swift 3.1. I'll merge it and tag a new version now.. Fixed in 3.10.1. By default, Kingfisher will cache the images in system cache folder. If you are not setting the max disk cache, the default value \"0\" will be used, which means unlimited disk cache. So Kingfisher will never purge your disk cache.\nHowever, since the system cache path is used, there is a chance that the system would delete that folder or remove some files under the folder when there is no enough disk (or by some other similar strategy, which is an implementation detail of iOS system). Since it is possible to access the cache folder on your phone or simulator, I suggest to check whether the folder and files are still there.\nSo it means using the cache folder is not a good idea as a persistence mean. It could be purged by system without notice. If you really need to persist the downloaded images, you could try to create a new ImageCache with a diskCachePathClosure pointed to a path like Document, which will not be deleted by system. However, I am not sure whether it could pass the AppStore review, since there is a rule says that if the resource is downloadable and not created by users, it should be placed to Cache.\nP.S. In fact, it is almost an abusing of ImagePrefetcher as well as ImageCache. Kingfisher is not a framework for file downloading after all. :(. Please remember that you need to create the prefetcher with the newly created cache like this:\nswift\nImagePrefetcher(urls: urls, options: [.targetCache(yourCache)])\nAnd how about just 1 image? Does this only happens when there are lots of images? Could you build a minimal sample which could reproduce it? So I can have a deep look into it.\nThanks.. I've no idea about it. The problem in the link you gave turns out to be a memory leak caused by the framework user who kept adding views but never remove them. So it was not a Kingfisher issue.\nAnd for your case, if you have multiple high resolution images to show, it is quite normally to take hundreds MB images. You could calculate it to see whether it is in reasonable size.\n. Have no idea on this. Kingfisher should be doing nothing when the memory gets released for this case. Can you build a minimal sample to reproduce your issue so I could help to see where the problem is. Thanks!. @lfarah It will not be merged until Swift 4 officially released. Before that, you could just use the \"swift4\" branch to continue use Kingfisher is your Swift 4 project.. @lightsprint09 \nFallback to legacy build system/. It should work properly since I just have tried it.\nPlease provide more detail on this or there is little help to get you out.. +1!. Thanks!. The expire date is set per cache, not per resource.\nFor your case, you could create your own ImageCache for different types of your images and set the resource to that cache by passing in with .targetCache option.. Maybe try to add .keepCurrentImageWhileLoading as an option?. It could also be a reason if the processor or setting method is not implemented correctly.\nYou could always check the source in the setting completion handler. May I know which processor you are using? And how did you use it?. Can not reproduce it in the sample project with your code, as long as the memory cache valid. It is normal if these images are not in memory cache since in Kingfisher the disk cache retrieving is an async operation (that's why .keepCurrentImageWhileLoading should work, and I am not sure what's your concern on it).\nCould you confirm that your images are from memory cache? You could print it by adding print(cacheType) to your setting image completion handler.\n. So what's the size and/or roundness? Could them be different time to time? The processor needs the same identifier  to locate the cache. Try to check your processor.identifier and make sure they are the same for the same image.. It seems fine to me. :(\nSo I have no idea on why the cache does not work for you now. Maybe if you could build a simple sample which can reproduce it then I'd like to dig in.. @ealymbaev Is it possible that your issue related to this? https://github.com/onevcat/Kingfisher/issues/711. Will release a new version later, maybe in several hours. Now I am rushing home :]. Please try the latest version 3.10.2 to see whether it gets resolved.. So no idea on it now. \nI'll wait for your sample project for a further step.. Hi,\nFor most part it is as expected, expect that the blurred images are not cached (and I will fix it later)\nHere is the reason:\n\nThe original images are cached due to the prefetcher. You may not notice that we have a prefetch support in the demo, which will try to get original images (and cache them).\nThe first four blurred images are downloaded and processed, then cached as normal.\nFor the later blurred images, there is an optimization in Kingfisher to check whether an original image is already in cache. If so, that image will not be downloaded again but only be processed with input cache.\nAnd I forgot to store the processed images in cache from step 3!\n\nI will give it a fix now. Thank you!. 3.10.2 released and this should be fixed.. I am not sure we need this or not. In fact, there is no such \"progress\" when loading an image from disk. Furthermore, it does not make sense to have its size as \"1\". Progress calling back is mainly for displaying an indicator with percentage or remaining size value. However, it should be not needed when loading from disk.\n@math-nao Thanks for contributing. Is there any good reason to also call the progress block when loading from disk?. There should be a cacheType parameter in the completion handler for the retrieveImage method. Could that be a help?. Just tried with Release build and locking screen and I cannot reproduce it with this code. I limited the network speed so the downloading will not be finished before I quit and lock the screen.\nswift\n_ = (cell as! CollectionViewCell).cellImageView.kf.setImage(with: url,\n                                   placeholder: nil,\n                                   options: [.transition(ImageTransition.fade(1))],\n                                   progressBlock: { receivedSize, totalSize in\n                                    print(\"\\(indexPath.row + 1): \\(receivedSize)/\\(totalSize)\")\n    },\n                                   completionHandler: { image, error, cacheType, imageURL in\n                                    print(\"\\(indexPath.row + 1): Finished\")\n                                    print(error)\n})\nSee the attached video for the result.\nvideo.mov.zip\nPlease attach the reproduce steps so we could investigate deeper.. You could pass .keepCurrentImageWhileLoading as an option to keep the image.. Oh,\nThanks for pointing it out. I'll check it later.. @AMatecki \nIt should be something related to CADisplayLink and its duration not matching the update calling.\nCan you try to add this to your Info.pllist to see whether it could work?\n<key>CADisableMinimumFrameDuration</key> <true/>\nI don't have an iPad Pro 10.5 at my hand now, and it seems that the simulator does not support ProMotion.. @AMatecki It should be fixed in this P-R https://github.com/onevcat/Kingfisher/pull/719. Could you help to confirm it? Thanks!. @AMatecki Did you have a chance to try the fix?. Tried on my device and it seems that be resolved. I am closing this.. Maybe you could use the modifier for this. Please check the \"Modify a request before sending\" part in our cheat sheet in wiki.. I am not sure what you want to do. Can you give some examples?. Hmm, currently the image downloader is a wrapper of a plain session and getting an image from url. It cannot be used for your case yet. I'd take a look at whether we could adopt to a more generic way while keeping the back compatibility.. Implemented as a part of version 5. Now you could use ImageDataProvider to pass any data to Kingfisher and using its processors and caches.\nMore information will be added to wiki later when it is released.. Ref: https://github.com/onevcat/Kingfisher/wiki/Cheat-Sheet#with-a-loading-indicator-while-downloading. It's not supported yet and I will take a look at it later.. It's a bug of iOS 8. I am not quite willing to fix it by introducing an Objective-C layer.\nI guess it could be a good chance to upgrade the deploy target to iOS 9 now... :[. It is for the beta 3. Please upgrade to Xcode beta 3.. Thanks for this p-r anyway! :]. Fixed. Thanks!. Not sure what happened. The retrieveImageInDiskCache just getting the data from the cached files from disk, so it should not take such a huge amount of memory, unless you are trying to loading quite a lot of high resolution images. What's the size of your image? Could it be the problem?\nAnd it would be great if I could have a sample project which can reproduce this.. It could happen if you are trying to decode the images. Take care when the images are set to image views or decoded in background, since they will take full size of the raw pixel data.\nInstead of showing 30+ full resolution images in image views, I suggest to just display thumbnails (you don't have such big screen for them on a mobile) and only load the full version when needed (maybe in a detail view controller).\nBut if you are doing the same loading operation, it could be strange. And also the images should be released instead of keeping increase, which means you have something leaking in your code. \nI'd quite like to check it deeper once there is a sample for it.. Please read our wiki and cheat sheet before asking such a question.. Although you could use Kingfisher to play GIF images, the framework is not originally designed for loading and showing a local GIF image. I suggest to use some other frameworks specifically for it instead.. I think you are right on this. I'll give it a change later. However, instead of breaking the current API, I prefer to add a new one and mark current one as deprecated.\nThanks for the suggestion!. Fixed in #741 and will be contained in Kingfisher 4.. Basically, the viewCenter is only for internal using as a way to make indicator generalized. There is already a default implementation for it to center with the image view it attaching. So you could leave the implementation for viewCenter as its default.\n. We wish we could but it is not permitted to declare an internal thing for public protocol. :[. I am not sure an ico file could be handled correctly by the DefaultImageProcessor or not. But when I tried the google's icon in the demo project (nothing special but a plain call to kf.setImage), it was working fine to me. The downloaded icon is 32x32:\n\nAre you trying to set some options like scaleFactor when setting the image? Or does this issue only happens on a certain simulator/device/Xcode version?\n. https://github.com/onevcat/Kingfisher/pull/704. Thanks for pointing it out!. @dev-fuad I just tested your images in my device and all of them loaded without problem to me.\nI am using an iPhone 7 Plus with the largest memory so it behaves fine, but it really could be a problem if you are loading them in an older device. Each of the images in your links takes 200~300 MB memory, which is expected according to their pixel count. I did not find any memory leak or unintended usage in Kingfisher.\nHowever, loading a single image once a time should not be a problem, since the memory usage is reasonable. So if you cannot load even one image, please check the memory usage of your app (you may need at least 300MB to load such a big image at one time.)\nKingfisher is doing nothing special for large images like that. It just respect all the data and decode it then render in image view. If you need to improve the memory usage, a general way is titling them into small pieces and only loading the visible part. But this should not be the scope of Kingfisher, which is mainly designed for loading frequently used images like user avatars.\nIf you just want to load them in a list as thumbnails, you'd better to use a smaller version instead of the full resolution ones.. It should be fine if you just set one image, and probably if you are setting multiple.\nAnd it is normal that you could download them all since the most memory consuming process is decoding the compressed image data to raw pixel and show in image view.\nMaybe you could try to use the ResizingImageProcessor to resize your huge images to smaller ones if you plan just use them as thumbnails. However, I am not sure whether it could and maybe you also need to process them one by one to avoid memory problem.. The only change from 3.10.3 to 3.10.4 is the indicator size, so it should do nothing about the image loading and setting itself.\nWhat is the previous version you were using? Does it work without issue in the same environment?. The NSURL should not be able to cast to Resource, it should be already assured by compiler.. You are doing this kind of force conversion:\nswift\nurl as? Resource\nYou may need to know what does this mean before you do it. Instead, URL already conforms to `Resource, so there is no need to do such thing for it.. Oops!. The typo should be also fixed! Thank you.. @reversepanda \nHi, yes. I believe it should be a correct way to fix it and I am glad to receive a pull request on this. Thank you!\nAnd instead of reusing the current AuthenticationChallengeResponsable's downloader(_:didReceive :completionHandler:), I prefer to add a new protocol method with task contained as its parameter, to make it a forward of the original method.. Released in 3.11.0.. At the first time, your cell height is determined by the original image view height, and setting an image to the image view will not change its layout anymore. When you reloading the table view, since the image view already has an image set, it has an intrinsicContentSize and the cell would layout itself with this size.\nSo basically it is how the UIKit works and I believe it should not be an issue in Kingfisher. (and Kingfisher is not touching anything about view layout or dimension at all. It is just setting the image property). Fantastic! Thank you.. Maybe it is no need to use a processor for adding a image border, since you could do it easily by using the image view layer.. @s4cha Thanks for the suggestion. Maybe we could reconsider this.. Good idea! And I think the case 1 will be quite useful since it is very common. I'd be glad to see a PR if you could contribute your time to it!\nI have several consideration on this:\n\nWe need to keep it back compatible since it is a very common API. I suggest to add a protocol like Placeholder and make Image conform to this protocol.\n\nTo avoid introduce runtime overhead, we'd better not do any type cast when setting the placeholder. A possible way IMO is defining the Placeholder protocol and implementing it like this:\nswift\nprotocol Placeholder {\n    func add(to imageView: ImageView)\n    func remove(from imageView: ImageView)\n}\n\n\nAnd now we could give some default implementation by protocol extension.\n```swift\nextension Image: Placeholder {\n    func add(to imageView: ImageView) { imageView.image = self }\n    func remove(from imageView: ImageView) { imageVIew.image = nil }\n}\nextension Placeholder where Self:UIView {\n    func add(to imageView: ImageView) { \n        imageView.addSubView(self)\n        // also set constraints\n    }\n    func remove(from imageView: ImageView) {\n        removeFromSuperview()\n    }\n}\n```\n\n\nFinally, we could replace the placeholder Image in the original API to Placeholder. And also update it when we setting/resetting the image view.\n\n\n@teameh How do you think about it? Tell me if you are going to try it or if you have any good idea on this! And never mind if it is not quite possible for you to implement it, I could also do it late. :]. @teameh Sure! +1. @teameh Wow, great. I'd check it soon.\nI will take a look at how to make it generic and definitely we do not want to do Any conversion like this.\nThe extension Placeholder where Self:UIView {...} is also a consideration on type inference. And we might not want all UIViews to be compatible with Placeholder, unless the users set them explicitly too. Don't worry I will try to see how to handle it!\nThanks for your contribution!. Yes, I created a p-r and did some additional work here. It will be merged once everything goes fine. (I think it should be fine to just support Image View now, but I am still considering a better interface.). Implemented in 3.12.0.. Maybe you need BlendImageProcessor?. Please check whether you are trying to access with an image resource with \"http\" scheme. If so, you need to switch to \"https\" or disable ATS in your Info.plist.. It's not supported now.. You need to also pass the processorIdentifier to this API.\n. There is no API to remove cached images for a certain processor. However, you could use the targetCache option to specify your own customized cache and make Kingfisher store the images there. Then you are able to clear that whole cache.. @tizaks Oh, I didn't know that! Yes, please open a pull request for it. I am glad to merge it.\nThank you!. Thanks!. Hi,\nI believe it should be an implement detail in Kingfisher. I think it is not reasonable to expose such a hash key calculating method in an image downloading library. Basically, you should just provide a cache key and leave Kingfisher to do other things.\nMay I know why do you want to access it? . @sxdxzkq \nMaybe you could fork Kingfisher and mark this method as public in your own version. However, I still suggest you to just contain a copy of that file in your project, since it is not a correct design to expose it in Kingfisher (as an image framework) and there could be a chance that the implementation of cache key changed in Kingfisher in future.. The round corner has to be transparent or it would contain a background color. So it is normal to be red in blender layer instrument.. Yes, it could bring overhead, but I believe it should be totally fine in a device you could find in real world.\nIf you seek a all green in instrument, you could try to add parameter in the RoundedCornerProcessor to indicate a color to use when round the image and strip out the alpha channel to avoid blending. I am glad to see a p-r on this as long as keep current default behavior (clear background color).. I tried to create a new project and install Kingfisher 3.11.0 (the latest now) and cannot reproduce it.\n.preloadAllGIFData should be already deprecated quite a few months ago in #664, so it is intended to use .preloadAllAnimationData\nMay I know the version and hash of Kingfisher in your Podfile.lock? Maybe you need a pod update before you install.. Maybe this could help?\nhttps://github.com/onevcat/Kingfisher/wiki/Cheat-Sheet#cache-original-image-while-using-a-processor. You should set different images in different images views.. Should be fixed in #760 . The maxCachePeriodInSecond does not mean the cache file could be removed just after the period. It is a reference duration for Kingfisher to determine whether a cached file could be removed or not. To actually remove the expired cache, you need to switch your app to background or call cleanExpiredDiskCache on ImageCache.. I am not sure I could understand your comment.\nIn other words, maxCachePeriodInSecond does not play as a timer to count down for removing the cached files. It defines a reference date that Kingfisher could check with it when removing cache.. Thanks for reporting this. I will take a look at it later.. After some investigation, I guess it might be an issue of the ThreadSanitizer of Xcode, which might not be able to work well with a barrier queue. Like indicated in the documentation of dispatch_barrier_sync:\n\nWhen the barrier block reaches the front of a private concurrent queue, it is not executed immediately. Instead, the queue waits until its currently executing blocks finish executing. At that point, the queue executes the barrier block by itself. Any blocks submitted after the barrier block are not executed until the barrier block completes.\n\nBoth of the racing statement are surrounded by a barrier sync, it should be totally fine since the execution of them will be happened in a sequence way, without a race condition. There should be no case that both of them get accessed or modified.\nSo you could just ignore this. I don't think the sanitizer works well on this. However, I am not 100% sure about for which case the thread sanitizer could give a warning (since it is true that they happens in different threads. So maybe it is just the way thread sanitizer works).\nMaybe I was wrong. Please let me know if you have any other ideas. Thanks!. Umm, it seems that I misunderstood the sanitizer warning. There was actually a race condition in reading without barrier. Now it should be fixed in #790 \n@AndrewBarba @shilei365 Thanks for reporting this!. It should not be an issue of Kingfisher. Please try to do a full clean to your project and install Kingfisher again. If the problem is still there, consider to open an issue in Carthage project.. It was a protocol added in the latest version. Please try to update you Kingfisher as well as clean your project.. Please make sure you have installed correct version of Kingfisher. If you are using CocoaPods, also make sure you have updated the pod spec repos as well.\n. LGTM! Thanks!. @luruke I am creating a version for now.. @chapayGhub \nIf you have neither resource nor placeholder set (both are nil), the loading would finished at once and the placeholder be set to nil. .keepCurrentImageWhileLoading will only keep the existing image while loading. But the loading is already finished when you set a resourceto nil.\nI guess it should be the correct behavior?. Hi,\nCould you confirm that the profile.avatar60 is different every time you uploaded the image and is going to call setImage? Kingfisher is using URL absolute string as the key by default. So if you have the same key every time, the result image should be the same (and got from cache).. No idea on what happened according to your description. Could you build a sample project which could reproduce this problem so I can have a deeper look at it.\nThanks.. @bartando Thanks for the information.\n@bartando @khuong291 \nI checked with RxSwift just right now and this code works for me fine:\n```swift\nimport UIKit\nimport Kingfisher\nimport RxSwift\nclass ViewController: UIViewController {\nvar url: Variable<URL?> = Variable(URL(string: \"\"))\nvar bag = DisposeBag()\nvar index = 1\n\n@IBOutlet weak var imageView: UIImageView!\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n    // Do any additional setup after loading the view, typically from a nib.\n\n    url.asObservable().subscribe(onNext: { value in\n        print(\"Set \\(String(describing: value))\")\n        self.imageView.kf.setImage(with: value)\n    }).addDisposableTo(bag)\n\n    Timer.scheduledTimer(withTimeInterval: 5, repeats: true) { _ in\n        self.url.value = URL(string: \"https://raw.githubusercontent.com/onevcat/Kingfisher/master/images/kingfisher-\\(self.index).jpg\")!\n        self.index += 1\n    }\n}\n\n}\n```\nI am using Kingfisher (3.13.1), RxCocoa (3.6.1), RxSwift (3.6.1).\nI think we need more information to know what happened. Any code snippet or could you build a sample to reproduce it? Thanks!. @wailaw Thanks for the information. It is quite hard for me to track this issue for now. Any possibility to build a sample in which this problem could be reproduced?\nAnd for the race condition issue, currently I think it is an overstepping of ThreadSanitizer of Xcode. I explained more in this comment.. Umm, it seems that I misunderstood the sanitizer warning. There was actually a race condition in reading without barrier. Now the race condition should be fixed in #790.\nHowever, I don't think it is related to this RxSwift issue. Still not sure what could cause this problem.\n. @wailaw Oh, never mind. Great to hear that. I will keep the issue open for a while to see whether there is any similar cases or not.\nThank you for your feedback!. @abdulKarim002 \nHi, thanks for this. But the race condition should be already fixed.\n\nUmm, it seems that I misunderstood the sanitizer warning. There was actually a race condition in reading without barrier. Now the race condition should be fixed in #790.. Oops, you are right on this. I will give it an update now.. https://github.com/onevcat/Kingfisher/releases/tag/4.0.1. @rmnblm \nPlease try version 4 instead of branch swift4 instead.. Nope, it should not or you are using an old Xcode 9 beta version. See the CI result of your p-r yourself. https://travis-ci.org/onevcat/Kingfisher/builds/276195803. Kingfisher 4 is for Swift 4. If you are using Swift 3.2, please roll back to Kingfisher 3.. Please check:\n\n\nThe Swift Version setting of Kingfisher is set to Swift 4.\nIf you have a .swift-version file under your project, make sure the content of it is \"4.0\".\nTry to clean your project.\n\nIf the problem is still there, I suggest to submit it to CocoaPods, since there should be no problem in Kingfisher for it. We have already been using it in our Swift 4 project for a while.. Version 4.1.0 should fixed this kind of problems (mismatching versions with Kingfisher code and build setting when used with CocoaPods)\nRef: #781 . @Ashok28 Thanks for the commit. It could be useful and please take a look at the review comment above. Thank you!. And I guess it would be better to interrupt the process and call completion handler with an error if nil is returned in this delegate method. By this, the user could have more control on what should happen according. (Say, not showing an image and getting an error when decrypting is failing).\n@Ashok28  How do you think about that?\nAnyway, I will merge this for now and do some improvement based on it. Thanks!. Please ensure you have specified the version of your environment by adding a .swift-version file and set the version to 4.0.\nRef: https://github.com/CocoaPods/CocoaPods/pull/5841. I also noticed that the BlackWhite performance is much worse than iOS 10. Not sure what caused it but  I guess it worth to open a radar for it.. Maybe related to https://forums.developer.apple.com/message/265191. 1. Did you remove the RetrieveImageDownloadTask from the array you created? Could it be the reason? According the screenshot, it seems that these tasks are held in an array.\n\nI am not sure which method you are using to download, but all of them should contain a completion handler, like this.\n\n. How did you use the returned value (RetrieveImageDownloadTask) from your downloadImage(imageURL:sku:downloadGroup:) method? What do you mean by \"set to nil\" in the array. I cannot find related code for that from your snippet.\nIs it possible for you to create a sample project to reproduce this issue, so I could have a detail look at what happens. Thanks!. It should be fine if you set downloadTasks = [nil, RetrieveImageDownloadTask2, RetrieveImageDownloadTask3] in the completion handler. (However I cannot find this from your code snippet). Remember that the tasks will not become to nil themselves since you are holding them in the array, so you need a way to remove them from array.\nI will try to take a look at the sample project once you prepare it!\nThank you.. Plesae make sure you are using Swift 4.\nSee https://github.com/onevcat/Kingfisher/issues/772. It seems that the urlSession(_:task:didCompleteWithError:) delegate method is never called on iOS 8 with URLSessionConfiguration.ephemeralephemeral or URLSessionConfiguration.default when trackingNetwork to be true. Only the background configuration could work fine with the Bugtags.\nSince the Bugtags is not open source and it is hard to know what trackingNetwork does, it is not possible for me to track and dig this issue now.\nCurrently, Kingfisher just uses an ephemeral without any modification. I guess it is not an option for Kingfisher to adopt to a background configuration due to this issue. It is more likely that trackingNetwork is doing something bad and causing the url session delegate broken on iOS 8, or it is a problem in the old iOS 8 system.\nI believe there is no fix needed or should be applied in Kingfisher. You may report this to Bugtags support instead.. Please check https://github.com/onevcat/Kingfisher/pull/777 and https://github.com/onevcat/Kingfisher/issues/772. DemoProj % carthage update --platform iOS\n*** Fetching Kingfisher\n*** Checking out Kingfisher at \"4.0.1\"\n*** xcodebuild output can be found in /var/folders/jt/jvdcwqdn31z1zd0qyvcqnqmc0000gp/T/carthage-xcodebuild.F6cnVU.log\n*** Building scheme \"Kingfisher\" in Kingfisher.xcworkspace\nCannot reproduce in my environment. Could you try to check whether is there any useful information in your log file (/var/folders/5j/w1h417ld0255b2dn_k0n143c0000gn/T/carthage-xcodebuild.azYHHQ.log)?\nAnd I also suggest to remove the carthage cache folder under ~/Library/Caches/org.carthage.CarthageKit/. It usually fixes most carthage related issues. If not, consider to open an issue in Carthage repo instead of here, since I believe there is little we could do in Kingfisher.. Great!. Kingfisher 4 already supports Swift 4. To use the latest version, please upgrade to version 4.\nAnd you also need to change the Swift version to 4.0 in the build setting in Kingfisher. Or try to upgrade your CocoaPods.\nSee https://github.com/onevcat/Kingfisher/issues/772 https://github.com/onevcat/Kingfisher/issues/777 https://github.com/onevcat/Kingfisher/issues/779\nPlease, make sure you have searched in existing issues, but did find a same one. :] Never mind. Since it seems that CocoaPods decides not to use setting provided in our podspec (https://github.com/CocoaPods/CocoaPods/issues/6791), I think it should be better to provide a version supports both Swift 3.2 and Swift 4, to avoid further issues like this. I will create a new version soon.\nThanks. . Version 4.1.0 was released with supporting for both 3.2 and 4.0. That should fix this kind of issues.. Not sure what what happened on this and it seems to be a crash in Swift reverse extension method on Sequence. I believe it should not be an issue of Kingfisher and there is actually little we could do with it.. As indicated, you need to run pod repo update before pod install or pod update to get the latest version.. WebP is not built-in supported in Kingfisher. See our FAQ page for more.. @ivanbruel Kingfisher 4 is for Swift 4 and 3.2. If you are still using Swift 3.1 or earlier (Xcode 8), you have to use Kingfisher 3.x instead.. Maybe it is worth trying pod repo update first.. Kingfisher 3.x -> Swift 3.1\nKingfisher 4.x -> Swift 3.2 & Swift 4. Kingfisher 3.x -> Swift 3.1\nKingfisher 4.x -> Swift 3.2 & Swift 4\nAnd I don't think the code snippet you pasted comes from Kingfisher. There should be no such code in this repo.. You could use this: https://github.com/onevcat/Kingfisher/blob/635dbf4b9c21d00c42bcdb6dfae876f10ed5a59a/Sources/ImageCache.swift#L557. You could just use cacheKey of your URL for it, as long as you are not implementing your own logic to provide the cache key. Basically, it is just the absolute string of the url by default.. Please make sure you are using Swift 4 and Kingfisher 4.x. And I suggest you follow the check list to do some search before opening such an issue.\nhttps://github.com/onevcat/Kingfisher/issues?utf8=\u2713&q=is%3Aissue%20is%3Aclosed%20cropping. No idea. Maybe it is worth to try a full clean or reinstall. BTW, which version of Kingfisher you are using?. Cannot reproduce and of course it is not an issue in Kingfisher.\nYou're using right now another library and all seems ok. \nSo I think there is no need to discuss more on this, unless someone else encounters the same issue. If anyone has the same problem and has more information to share, please reopen it.. Yes. I did.\nSignal 6 comes from an abort and if you cannot use any other methods in Kingfisher as well, it could indicate that you are failing on loading (dlopen) the framework. Is there any other logs besides of the signal number?. Kingfisher is using NSCache for caching images in memory, which will be purged by system when your app being switched to background. It means Kingfisher needs to load it again from disk, which is now an async operation happens in another thread (for not blocking main thread when loading huge files). So basically it is what Kingfisher and iOS works. It is expected and design choice instead of an issue.\nSince there is no plan to change this behavior now, I am closing it.. @yigitcanyurtsever Thanks for it. It looks promising. I would take a look at it later.\nBTW, for the testing images, you could take a look at https://github.com/onevcat/Kingfisher#developments-and-tests. @yigitcanyurtsever No problem, bro!\nThe code looks very nice and I am so glad to merge it. I will prepare an update for it now.\nThank you!. Hey, @Baleen-Y \nThis seems to be a WebP format image. Kingfisher does not support WebP by default, so you may need some other third party library or implement your own deserializer for it.\n\nSee https://github.com/onevcat/Kingfisher/wiki/FAQ#can-i-load-some-special-image-format-like-webp. Hi, @lastcc Thanks for the reporting. I'd take a detail look once I could get the sample project.\nThere is no way for Kingfisher to determine the image format if it is already decoded to raw data, so the only \"safe\" way to store data like that would be using PNG. If you know the data format when passing it to cache storing APIs, you would like to use pass the FormatIndicatedCacheSerializer.jpeg as an option.\nAnd it could actually takes huge memory to decode an image in that size, I am not surprising on it. So instead of decode/display multiple large panoramas images, I suggest to use one per time, as well as disable the memory cache for it.. @lastcc Thanks for your feedback! Glad to hear that you could solve the incorrect type issue.\n\nBut Kingfisher should fail gracefully because the developer may have no control of the remote server, and developers may want to display images in their full resolution sometimes.\n\nI wonder what do you mean by \"failing gracefully\"? Is that for the not enough memory? I think it would be better for Kingfisher to respect user's data and choice. The crash from OOM goes to a category of universal error and it should not be handled in Kingfisher in my opinion. How do you think about that?. @lastcc Oh, so the result of PINRemoteImage seems good. But as I know, they are using a memory cache limited to 50MB by default, while Kingfisher has no limitation on it by default. They are using different strategy and Kingfisher's one is more aggressive. So it is not quite a fair comparison here on memory usage.\nThe energy impact is strange, I think it worth to have a deep look into it. May I know how did you measure the performance? Since Xcode often gives wrong result on Simulator, I suggest you always try it in a real device and Instruments instead of using Xcode debug panel.. Ummm, interesting. Thanks for the information.\nI wish I could have some time to read implementation of PINRemoteImage soon, to see whether we could have optimization and improvements!. I think I found an issue in setting indicator frame. I pushed a fix on it. could you try whether it could work for you? See here: https://github.com/onevcat/Kingfisher/pull/798. Kingfisher should have nothing to do with the original image setting method in UIKit. It only adds an extension to set image from a URL. Maybe it worths to confirm that your image setting method is called in UI thread.. I am not sure about what the JSQMessageView and JSQPhotoMediaItem is doing. Maybe it should not be an issue in Kingfisher.\nI am closing it.. The latest Kingfisher (version 4.x) is for Swift 4. Please make sure you are using Swift 4 as your toolchain when building it.\nIf you are still using Swift 3.1 or earlier, please try Kingfisher 3.x instead.. Good idea on this. I'd take a look at it soon. Thanks!. @cp3hnu Great to know that! I guess we could create another framework or something like a sub-pod for it if necessary!\nThank you for the reminding.. I am afraid this is not supported in Kingfisher now. Kingfisher is not using NSURLCache system so there is no way to refresh the cache in that behavior.. A new option fromMemoryCacheOrRefresh was added  in version 4.3.0 as a \"similar\" solution in Kingfisher cache. Instead of checking the cache setting for URL response (in the NSURLCache), this option will always download the image and cache it to memory. Once it is in memory, the same image will not be downloaded again (as the behavior of  forceRefresh) until it disappears from memory cache.\nSince Kingfisher is not using the URL cache system, it also ignore the cache policy provided by the response. If you want a behavior like that, to respect the cache control tag of response header, you might want to just use a plain URL session and do not do anything additional on the data.. Hi. When you want to cache an image to disk, the image would be encoded to a binary data format. This is what pngRepresentation or jpegRepresentation does. \nIt is unavoidable but it should not cause your UI lag, since it happens in a background queue, unless you are doing some other heavy work at the same time.. The performance on this should be improved by #805 \nSince maybe I have some other fix before I could tag a new version, you could try the master branch to see whether it could solve your issue. Please notice that you also need to modify your code to also send the originalData, otherwise the change will not apply for your case. For your code, you should change \nswift\nImageCache.default.store(image!, forKey: \"photo-\\(number)\")\nto \nswift\nImageCache.default.store(image!, original: data, forKey: \"photo-\\(number)\")\nafter you upgrade Kingfisher to master branch.. Please read our wiki.. As indicated by the error message, it is a request timeout.\nPlease make sure you have correct Internet connection to your resource. I believe there is little we could do in Kingfisher.. So can I know the URL you are using? We need more information on this before we could get to know what happens.. Hey, @actualfan \nIt works pretty fine for me, at least in the demo app contained in this repo. \n\nSo I guess there must be some other reason instead of in Kingfisher for it. I strongly suggest you check your network setting and/or proxy setting in both your system and app.\n. @sp0cket This issue should not relate to the indicator, but a thread issue which cannot be reproduced easily. Do you have some code to reproduce this problem stably?. Hi, @ethansinjin \nThanks for reporting this!\nYes, this is a problem. For now, as a quick workaround, you need to also implement your own CacheSerializer to also apply the render mode in the final image. When getting an image from disk, it is the serializer/deserializer which takes response. (And I also found a regression in version 4.3.0 which caused the cache not working well with a customized processor, it should be already fixed in 4.3.1).\nLike this:\n```swift\npublic struct MyCacheSerializer: CacheSerializer {\n    public func data(with image: Image, original: Data?) -> Data? {\n        return DefaultCacheSerializer.default.data(with: image, original: original)\n    }\npublic func image(with data: Data, options: KingfisherOptionsInfo?) -> Image? {\n    let image = DefaultCacheSerializer.default.image(with: data, options: options)\n    return image?.withRenderingMode(.alwaysOriginal)\n}\n\n}\n```\nAnd also set it as an option.\nRe-running of the processor on a processed image might cause some confusion, so compared to re-running, I personally prefer to adding an option to not cache the final image in your suggestion.\nHowever, what I am concerning is that, is this a good use case for an image processor/serializer or not? An ImageProcessor is designed to \"decode\" and \"transform\" the images from Internet, or say, it manipulates the downloaded data. After that, the final processed data could be sent to cache and we could use it later without any other modification (just applying a correct CacheSerializer). So neither of them should do this kind of work IMO.\nIn your case, instead of manipulating the data, you are in fact setting some properties for the image. It should happen just before you set the image to the view. So maybe a better way is injecting the setting image by adding something like \"imageModifier\" to give the user a final chance to modify the images already in memory, just before send it to an image view or a button.\nHow do you think about it?. Great. Sure, I'd like to receive one from you, if you wish to add it. : ]. And you could check the existing KingfisherOptionsInfoItem.requestModifier and ImageDownloadRequestModifier, which contains similar concept, but for the request.. Please keep our issue template and describe your problem in a clearer way. There could be little we can do unless we know your issue better.. @joninsky Hi,\nI am not quite sure I could 100% understand what you want to do. According to your description, it seems like you want to:\n\nTry to get an image with a key from Kingfisher's cache.\nIf there is no image from step 1, then try to load it from a url1 (here in your example, it is the localURL).\nIf there is no image from step 2, then try to get the image from url2 (remoteURL).\n\n(If this is what you want to do)\nIt is in fact not a general way to use images from network so I am not sure it should be added to the framework. However, since Kingfisher is designed as a flexible structure, you might achieve it without huge effort. For example, you could just create your own ImageCache subclass and override the retrieveImageInDiskCache to your own version very easily, say like this:\n```swift\nclass MyImageCache: ImageCache {\n    override func retrieveImageInDiskCache(forKey key: String, options: KingfisherOptionsInfo?) -> Image? {\n        if let image = super.retrieveImageInDiskCache(forKey: key, options: options) {\n            return image // The image is found in Kingfisher's disk cache.\n        }\n    // If the image is not in Kingfisher's cache, \n    // load it from your own path, say, \"file:///temp/myImageID.png\", eg.\n    return Image.from(localURL)\n}\n\n}\n```\nThen, pass the created cache as an option to Kingfisher's API:\nswift\nlet cache = MyImageCache(name: \"com.abc.app.myImageCache\")\nimageView.kf.setImage(with: remoteURL, options: [.targetCache(cache)])\nNow, you could get the behaviors above.\n. @Rusik I could verify this issue and yes you are correct on the reason. The problem is that the resizing processor (and maybe some other ones) are not respecting the option when applied to an image instead of data. They are just using the current image scale. And when you load the image to memory (as in task 1 of test 2), the image is loaded as scale 1 and it just use that cached image as a start point for processor. It could be fixed by always respecting the inputing scale option when existing.\nFor the blur image processor, please take notice that the blur is specified with pixel instead of point.. Release in 4.4.0.. @ethansinjin \nThanks for the p-r. I have to say it is a much bigger one than I expected! IMO, it would be sufficient to just provide a single and light wrapper type to meet all the needs, just similar to the existing RequestModifier. Something like this:\n```swift\nimport Foundation\n/// Request modifier of image downloader.\npublic protocol ImageModifier {\n    func modified(for image: Image) -> Image?\n}\nstruct DefaultImageModifier: ImageModifier {\n    static let default = DefaultImageModifier()\n    private init() {}\n    func modified(for image: Image) -> Image? {\n        return image\n    }\n}\npublic struct AnyImageModifier: ImageModifier {\nlet block: (Image) -> Image?\n\npublic func modified(for image: Image) -> Image? {\n    return block(image)\n}\n\npublic init(modify: @escaping (Image) -> Image? ) {\n    block = modify\n}\n\n}\n```\nBy passing a modifying block to AnyImageModifier, users could do everything they want to apply change to the image. Currently it seems that you are following the way of ImageProcessor, to have identifier and cascading of modifiers. However, the identifiers there are mainly used for purpose of data persisting and caching. It is not the case here for image modifier.\nHow do you think about it? Does the identifier take any responsibility here?\n. @ethansinjin Great work!\n\nI still think we should include a RenderingModeImageModifier and FlipsForRightToLeftLayoutDirectionImageModifier because I'm pretty sure those are the most common reasons this class is needed.\n\nYes, I totally agree with you.\n\nI think the return parameter should be Image instead of Image?, because at the point of execution of the ImageModifier, a valid Image is already required as a parameter. So, if the change isn't possible, couldn't the original image just be returned?\n\nThe original thought is letting users have a chance to return nil if the do not want to set the image at the last minute. But I guess it could rarely happen so current implementation looks fine!. I think I could do the last part of applying the modifier later. Once it has been done, I will release an update version. Thank you!. It seems that opencollective is now using a case sensitive way to handle url. It should be fine now, expect for some cached images on GitHub (and they should be fine soon).. @yemodin Looks great.\nHowever, if we increase the minimal deploy target, we have to release another major update since it breaks compatibility. May I know which API you are using is 10.11 above?\nAnd do not worry about the failing tests. If we could add this processor to the framework, I will check and fix these tests.\n. Oh, cool! I will check it now.. Great catch!. Thanks!. @chdzq  Thanks for considering of that!\nThe reason of current MD5 implementation is that in early age of Swift, CommonCrypto (or some other C library) cannot be used in a framework target (like Kingfisher), although you could import it in a bridge header and use it in an application target.\nI am not sure about current state, should we add a Swift wrapper of CommonCrypto and link to it if we want to use CC_MD5 or other C APIs? If so, I think I'd prefer to staying in current implementation instead of importing another layer of complexity.\nIf it is easy enough and we could do it without huge changes, I'd like to see a p-r on it and then we could see how it works.\nThank you!. @chdzq Thanks! The changes looks great to me. I will restart the test and also check usability with CocoaPods and Carthage with these changes before we could merge it!. @chdzq I also tested it with Carthage and it works well!\nI think there is one more thing before it could be merged. May I ask you to move the \"CommonCrypto\" from root folder to \"Source\"? Maybe it would be a better place where it should be. And both the swift include path in build setting and the pod settings in spec file needs update too.\nThank you!. @chdzq Oh, great work!\nThanks for your effort on the build phase script. But I am afraid it would break CocoaPods integration for current framework users and it requires a major release. I am not quite willing to do so and it seems that this change could increase the degree of difficulty when adding this framework. Personally I prefer to use commit 9520b2a.\nMay I know is there any other concerns than introducing the CommonCrypto to Pods? IMO, it is totally worth to doing that, if we can keep user's Podfile clean without this post install script.\nHow do you think about it?. Fantastic! Thank you for your effort.. @SlinToWin LGTM\nCould you also update the documentation above in the comment for this argument? Thanks!. Hi,\nProbably no. This type is intended to be a class since it will hold reference types like image view or image. It's not likely to be a good idea to use struct here, which might misleading users to think it could be a value type. Additionally, a struct could introduce unnecessary difficulty in property setting or mutating.. I am not sure what is your problem. Do you mean that the animation will stop when you click the cell? Have you changed the default runLoopMode?. Hey, @noppefoxwolf \nIt is your responsibility to call Kingfisher's UI-extension methods on UI thread. So please check the caller side of imageView.kf.setImage to see whether it is on the main thread or not.. Hey,\nIt should not happen since Kingfisher will not change the content mode of an image view. By default, Kingfisher just get the image from either cache or web, then call imageView.image = image to set it underhood.\nAre you using any image processor to resize or crop the image, which might need you to specify a content mode. And it would be great if you could attach some code snippet you are using or even better to build a sample project in which this issue could be reproduced.\nThanks!. Thanks for the report.\nUmm, but it's weird. I tried the demo project under this repo and everything seems fine to me. The images are square and the (collection) cell is a tall rectangle. I got these results:\nAspect Fit\n\nAspect Fill\n\nScale to Fill\n\nAnd all of them are expected.\n@Dmurph24 Can you confirm that you are calling the image setting method in main thread? Or can you build a sample project in which this issue could be reproduced?\n. @JacobMao Fantastic!\nI noticed that you also list \"Adding delegate\" as to-do, I think we could merge these commits when that also gets done.\nThanks!. I guess I would prefer a new protocol and corresponding delegate, following the normal UIKit way, as well as avoiding the potential (and annoying) memory management things in a strong closure.. @JacobMao Thanks for the additional commits!\nMay I have two requests below?\n\n\nInstead of naming it to didFinishAnimate, which is a more likely closure property name, I think we could just follow the Cocoa convention, to name this delegate method to something like animatedImageViewDidFinishAnimating(_ imageView: AnimatedImageView). It would be more home-like for users of this framework, who might be familiar with Cocoa framework.\n\n\nBesides of the \"finish\" delegate, could you add another delegate method to notify users that a loop has been done. It could have a signature like animatedImageView(_ imageView: AnimatedImageView, didPlayAnimationLoop count: Int). It could be useful if the users want to do something at the time when a single loop has finished.\n\n\nThanks again for your effort. The work looks amazing!. 1. Umm, it's interesting that SKSceneDelegate is using the shorter version like that. I guess it might be an attempt for changing of API convention. Additionally, in game and/or CG render related things, developers might be more familiar with an onXXX API (like quite a lot of APIs on this page). However, it is obviously a violation to Cocoa Naming Guideline on Naming Delegate Method. Anyway, if the convention changes in future, it will not be hard to adopt. But for now, let's just follow the Cocoa guideline.\n\nAnd please just add the method containing count in the same p-r. That's no problem for it. :]. @SURYAKANTSHARMA Can you paste your Podfile.lock as well?\n\nnd remember to add import Kingfisher before you try to use any API from Kingfisher.. Maybe it's an Xcode issue. Usually restart Xcode / clean derived data path would fix it.. Fixed. Thanks!. Hi, @x1911 \nSorry for the late reply.\nIt is strange that you were \"dequeue\" a cell in the didEndDisplaying delegate method. Why don't you just use the cell comes from invocation directly?\nI am not sure whether this is an issue in Kingfisher or not, but it seems likely being caused by a misuse of collection view. Is there any stack information or console log to help understand what happened?. Hi,\nThe CommonCrypto.h should not be needed in the latest version 4.6.1. Could you try to upgrade to the latest version?. @Ankish Currently ImagePrefetcher is basically a simple wrapper to combine downloader and cache.  I definitely agree with @krodak for the long-term solution. Instead of current data task-based session, we need to create download tasks instead. It is not a trivial work and I guess we may have a good chance to implement it in a major update. (I have a plan to rewrite most of the \"legacy\" Swift code when Swift 5, but it will not happen too soon I guess.)\nI will keep in mind of this when I find some time for the next major release!. @XaviorXiao I have no problem to open the url you posted. I noticed that it was a url starting with \"http\", maybe you forgot to disable the ATS?\n@x1911 I am not sure what do you mean. Could you describe the issue more clear? Thanks!\n. Seems it is not a Kingfisher issue. So I am closing it.. @nickgate  Hey.\nThanks for the feedback. Instead of an iOS issue, it is more likely a limiting in using of the table view or collection view. In the sample project, you were using the default UITableViewCell, which contains an image view with {0, 0, 0,0 } as its initial frame. When setting an image from bundle (say, using UIImage(named:)), the cell itself could calculate its layout before display, so everything is fine. However, Kingfisher's (or AlamofireImage's) image setting method is async. There is no way to know the intrinsic size of the image before the download finishing.\nIn your workaround, you re-layouted your cell to fit the image size. If you want a fixed size of image, another possible (or better) way would be using a customized cell.\nYou could read this post for more about it.. Not sure what happened. Are you using any resizing or crop processor to shrink the downloaded images? Can you paste some related code snippet on how did you use Kingfisher? Or even better, build a sample project in which this could be reproduced?\nThanks!. Hey, @tadija \nI just tried a customized serializer and printed the images returned from the serializer and in the final completion handler. It seems they are the same image object and I believe your code above should work as expected as they should be the same one, unless you were using some other image processors, or using a background decoding option.\n\nCould you check your using side of retrieveImage to see whether you have any other options applied? And it would be great help if you'd like to create a simple demo for this issue, so I could have a detailed look into it.\nThank you!. Hi, @tadija \nThanks for digging it. However, that line is intended to do so. I guess you misunderstood the CacheSerializer, which is only used when converting an image to data for storing in disk, or converting a data to an image for displaying from cache. That line you pointed out is for processing some data to image, it is not related to the cache part of Kingfisher.\nWhat you want besides the CacheSerializer is also creating a customized ImageProcessor, and implement process(item:options:) method to return an image with your needed data there.. I believe you should never change the implementation inside Kingfisher, or you will make it is hard to maintain and update.\nFor your case, maybe you could just check load with a placeholder and then when completion handler called with error, replace the image to a failed one:\nswift\nimageView.kf.setImage(with: url, placeholder: someImage, completionHandler: { \n    image, error, cacheType, imageURL in\n        if error != nil {\n            self.imageView.image = someFailingImage\n        }\n    })\nSince it is not an issue but a question, I am closing it.. Hi,\nThe cells are reusable so you need to make sure all code path would set the image of the cell. Otherwise, the previous images will be kept.. If there is a chance that your code falls into any else clause, the image setting method will not be called and the previous images in the reused cell will be used. So it would seem like that your images are in random order.. @lillogoal Not sure what happened. It should work fine and show your PlaceholderProfile images if you uncomment the code in elses.\nI noticed that you are using gruppo.getLastModified() as your cache key. Kingfisher is using this cacheKey to determine whether an image was already in cache or not. If you have multiple images with the same gruppo.getLastModified() value, Kingfisher will just use the cached one instead of downloading it again. Maybe it causes your problem?\nI suggest you to check it again. It would be also great if you could create a sample project to reproduce it so I could take another look at it.. @lillogoal \nHi, I could understand your meaning. However, it is the way how Kingfisher works. The images are basically bound to the download urls, the library depends this fact to coordinate its behavior.\nFor your case, maybe you could try to modify your url by appending some arguments. This will not change the request destination, at the same time, Kingfisher will recognize them as different urls. Like this:\nhttps://domain.com/your_path/asset.jpg?path=abc. The resource is defined by downloadURL of resource struct. Each resource (or say, asset) should have its own URL, this is also what the URI (Uniform Resource Identifier) should do. It's really a rare case (if not wrong) to use something like header in a request to serve resources dynamically like that. So there is no plan to change current behavior I am afraid.. I guess you could just try to set the image view content mode before using Kingfisher's image view extension setting method. Then set the content mode back to what you need in the completion handler.\nMaybe something like this:\nswift\nimageView.contentMode = .center\nimageView.kf.setImage(with: url) { _, _, _, _ in\n    imageView.contentMode = .scaleAspectFill\n}\n. Hi,\nYou could try the cocoapods-1.4.0 branch for now. We still have to confirm something before it could be merged to master and releasing.. @0xwangbo @jeffreylyg \nAdding static framework option to podspec file will make other dependencies of Kingfisher unavailable,  unless they all change their podspec. And it seems that CocoaPods 1.5.0 supports to build static library even without that flag, I think there is no need anymore for Kingfisher to do anything on this topic.. The idea behind this is that every time you call set image method, you could expect the completion handler be called for once (and just once). If we remove the completionHandler invocation, it will make things confusing and not consistent.. Not quite sure about the behavior. Maybe it is related to the timeout for a download task.\nIn Kingfisher 5, I rewrote the network part, so could you have another try to see whether it is expected or not?. @bes Thanks for reporting this. It seems to be related on some operation of the semaphore. The libdispatch trapped it when waiting a semaphore. However, I am not sure whether it is an issue we could fix in Kingfisher or not. I would leave it open for a while and check again with related code again.. Yes,\nI am rewriting this part and try to remove the semaphore related code. I hope I could release the new version (and quite a few other refactoring) soon.. This should be also related to #1001 \nBasically, these related issues should be already fixed in Kingfisher 5. I rewrote most of the code and introduced a more conservative way to handle memory cache. There is already a What's new in Kingfisher 5 article to describe the noticeable changes, as well as a migration guide.\nThe development for version 5 should be done now, and the beta version was already used in several of our products, with great response. So I recommend adapt to it soon!\nI will tag and release it in a few hours.. It seems that static building support will force all dependencies to build as static. So I guess it is not safe yet to support it now.. I am not sure what's your problem or issue. Could you describe your question more clear?. Basically you need to decode your GIF images. By using Image(contentsOfFile: path!), your GIF file will be just a plain image with first frame (since UIImage does not support GIF format directly). I suggest you could use DefaultImageProcessor and decode the GIF file to a valid animated image, then try to set it to the AnimatedImageView.\nswift\nlet image = DefaultImageProcessor.default.process(.data(yourGifData), options:[])\nNow you should have an image source.. Not sure what happens. Could you always reproduce it in iOS 8 Simulators?. It will not support since the embedded image view in a UIButton is always a plain UIImageView instead of an AnimatedImageView. There seems to be no chance to change this behavior in UIKit (without using some undocumented APIs).. There is no obvious way to embed an AnimatedImageView into UIButton, as I know.\nHowever, you could always overlap a button above the image view (and also create your custom control to contain both), to make it visually equal.. What do you mean by setting a UIImage? I cannot understand what you want to do. If you want to get an image from a url, you could use (and wrap) the retrieving method of KingfisherManager.. Hi,\nNo. The response header should do nothing with Kingfisher's image cache. Kingfisher will just ignore the server cache policy but try to cache all downloaded images (by default). I guess there might be some other reason caused it.. It works totally fine to me, with the logs. You could also check it in the demo project in this repo:\n```\n// Initial Launch\n1: 20592/55645\n1: 55645/55645\nFrom none\nhttps://firebasestorage.googleapis.com/v0/b/staance-staging.appspot.com/o/user%2F-KqM9HQ2YoUF8_StwzGS%2Fpic%2Fp?alt=media&token=e71835ea-f082-40a6-bd08-a015795fff00: Finished\n// Reload (set again by UIImageView kf extension method)\nFrom memory\nhttps://firebasestorage.googleapis.com/v0/b/staance-staging.appspot.com/o/user%2F-KqM9HQ2YoUF8_StwzGS%2Fpic%2Fp?alt=media&token=e71835ea-f082-40a6-bd08-a015795fff00: Finished\n// Restart the app\nFrom disk\nhttps://firebasestorage.googleapis.com/v0/b/staance-staging.appspot.com/o/user%2F-KqM9HQ2YoUF8_StwzGS%2Fpic%2Fp?alt=media&token=e71835ea-f082-40a6-bd08-a015795fff00: Finished\n```\nBe caution that by default Kingfisher will use your url as the cache key. So if the url changes (say you have another token for user id), you will not be able to find the image in cache.. @Ankish Thanks!\nThat's fine to just keep it open for a while, until you find the reason/solution for your issue. :]. @DhruvTekchandani \nSorry but I cannot catch what issue you are facing. What did you do before calling imageCachedType? If that method returns true to you, it means that there is an image in either memory cache or disk cache under the key. Does it behave correct in your case?\nUnless you describe the problem more clearly, there is little I could help since I cannot understand what the issue is. :[. @DhruvTekchandani \nOh, hi.\nKingfisher is using a url based cache by default. If two images has the same url, they will be recognized as the same image. \nCan you check whether the newly added images has a different url from the old one?\n. @Panajev No, it's using absoluteString as its cache key by default.\n@DhruvTekchandani Could you try to print the cacheKey of your url before setting to image view or getting the caching state? Or is there any code snippet on how are you using Kingfisher?\nI noticed you are checking the cache state with \"DataSnapshot.value\", is it a constant or the cache key you are using for a certain image?. Hi, @DhruvTekchandani \nI meant the cacheKey property of Resource here. By default it will be the url absolute string if you are using Kingfisher's image view extensions and KingfisherManager class to get images.\nIn your code, (you are not using Kingfisher's extension/manager methods). So it seems that you are using DataSnapshot.value as the key to get an image:\nswift\nImageCache.default.retrieveImage(forKey: DataSnapshot.value as! String, ...\nIn this case, you need to make sure that this DataSnapshot.value is different for each image. I didn't see the implementation of how did you cache the images. Could you try to print like this print(DataSnapshot.value as! String) just before the ImageCache.default.retrieveImage to check whether they are the same value?. Can you also post the code you are using to print the above values?. Hey, @Ankish \nThanks for open it. It seems you are trying to decode a big gif. Decoding and rendering a gif (which contains multiple frames) itself is a performance consuming operation, especially the large gifs. In AnimatedImageView, the frames are decoded frame by frame when needed. Your huge gif (2287\u2006\u00d7\u20062287) takes too much time to decode and render. Instead of a Kingfisher issue, I believe you are hitting the limitation of UIKit and the device.\nneedsPrescaling will scale your image to the size to the image view, as long as keeping its scaleFactor for screen.\nI suggest you to keep the needsPrescaling to be true to keep acceptable performance. Or you could resize and provide the gif file in a reasonable size.\n. Should be fixed in version 5.. Hi. @Lee827 \n\nAs mentioned in documentation\n\n\nSetting this to a negative value will make the disk cache never expiring.\n\nHowever, keep in mind there are two possible trigger for a disk cache clearing operation: date expiring or total cache size limit hit (default is no limit).\nAfter setting ImageCache.default.maxCachePeriodInSecond, your images downloaded/cached by image view extension methods or KingfisherManager retrieving images methods will never expires. But ImageDownloader is not in this case, which has nothing to do with ImageCache.\n\nNo. Kingfisher is not using response cache policy. It is using its own url-based way to cache images, so you need to implement last modified or e-tag support yourself. The didDownload delegate method in ImageDownloaderDelegate might be a good start point, for getting any header field from the server response.. There is no method for listing all cached images now. However, you could use FileManager to list all files under the diskCachePath of a cache. All disk files are stored there. But please notice the name of the image file is a hashed string from your resource key. You could use hash(forKey:processorIdentifier:) method to get the actual file name by inputing the key and processorIdentifier (if any) you are using.. @harifsp Your code seems to be fine to me. The image with name of \"placeholderImg\" should be displayed while loading. \n\nIf it shows a blank one, I suggest to check whether you have a valid image under that name. (Make sure UIImage(named:\"placeholderImg\") is not nil).. Wow.\nI am traveling now so I have no chance to look at it in detail. But you are definitely right according to the screenshot. The p-r also looks great! I\u2019d check it as soon as my feet in land!\nThank you! \ud83d\ude03 . LGGGGGGTM\nThanks!. You need a valid URL to set it as the resource of Kingfisher. For URL(string:) method, it only accept a string with acsii characters, so you need to encode your url string first, create the valid URL instance (make sure it is not nil), then send it to Kingfisher.. Button images are rendered as template by default. You may want to use the original version. Try something like this:\nswift\nlet modifier = AnyImageModifier { return $0.withRenderingMode(.alwaysOriginal) }\nbutton.kf.setImage(with: url, for: .normal, placeholder: nil, options: [.imageModifier(modifier)], progressBlock: nil, completionHandler: nil). @frankrausch Sorry for the late reply. The CI failed due to a known issue in travis. I restarted it and let's see the result.\nI hope I have time to look at it in detail tomorrow!. We could do nothing on this unless more detail could be provided.. I believe you could just set the maxCachePeriodInSecond https://github.com/onevcat/Kingfisher/blob/master/Sources/ImageCache.swift#L104 to a proper duration and then let Kingfisher handle the cache period for you.. @alfasolutions It seems that associated object does not work well with Swift protocol, even it is marked to receive Any? now.\nA workaround is in #878 and I think we could release it later as an update.. Thanks for reporting this!. @chyrta Sorry for the delay. But I guess I could not do a release until approximate 10hrs later. I would release it tonight (JST)!. @CHONUMAN Kingfisher will use the centerOffset and the image intrinsic size to determine the position. See this for more. You need to implement centerOffset for layout.. @FedericoSub Sorry for the late reply.\nKingfisher's setImage method is an async one, so your cell.setNeedsLayout() will not layout the cell according to the real image size. The original image view size will be used when layout happens.\nA possible workaround would be calling cell.setNeedsLayout() inside the completion handler of setting image method, like this:\nswift\ncell.immagineVetrina.kf.setImage(with: resource1) { _, _, _, _ in\n    cell.layoutIfNeeded()\n}\nThis will layout your cell with the constraint of your cell and the image view's intrinsic content size   (as long as you are not setting the size constraint for the image view). So if you were using an auto sizing cell, it will work for you to resize the cell by downloaded image.. There is a completion handler in set image extension methods to tell you where does the image come from. Is that what you need?\nSee \nhttps://github.com/onevcat/Kingfisher/wiki/Cheat-Sheet#with-a-completion-handler. @hcanzonetta Maybe we could also remove the s.pod_target_xcconfig in the spec file?. Thanks for the information. I am not sure why it could happen and I will check the implementation here once more.. We are not compressing images in Kingfisher, and I have not much experience on this topic myself, so I am afraid it is not easy for me to answer that question. :[. Kingfisher is using an ephemeral session to download images, so you may need to set your cookie manually. Maybe you can try to modify the request as you need, mentioned here.. @ShaneQi You are correct. I'll check it later.. @ShaneQi Hey, sorry for the late reply. Just got a chance to look at this. Could you try whether this code works for you?\nswift\nimageView.kf.setImage(with: url, \n                options: [\n                      .transition(ImageTransition.fade(0.3)), \n                      .forceTransition, \n                      .keepCurrentImageWhileLoading\n                ]\n)\nBasically, you also want to use .keepCurrentImageWhileLoading to keep currently loaded images when loading a new one, instead of using a placeholder (which is nil in this case).. @jyounus Good idea. I'll implement it now.. Merged #894 and I think I will find a chance to release it in an update later.. @agforte Cannot reproduce it.\nIt should be fine to call KingfisherManager retrieving method from a background queue.\nCould you try to build a minimal sample in which this behavior could be reproduced? So we could have a deeper look into it.\nThanks!. @mishagray Thanks for the detail explanation and it looks good at the first glance to me. I will check it later when I get a chance and let you know!\nThank you!. @mishagray Thanks for keeping this pull request for such a long time!\nTerribly sorry for the huge delay. Recently I was busy with the new version of Kingfisher so I didn't find a chance to see this until now.\nFor your situation:\n\nour backend would like to send as Images that were HUGE and loading the whole image into RAM would basically cause our app to 'die' on older devices (\n\nNow Kingfisher 5 supports to use a DownsamplingImageProcessor to handle large images better. I believe it can solve your issue in a better and cleaner way. Instead of introducing another workflow for loading images, it uses downsampling to orignal image data (before decode it to pixel format) to create thumbnails.\nYou can check it here in the wiki.\nYour changes on converting data tasks to download tasks is interesting. Yes, it enables we use a background URL session and open the possibility of resuming a download. But in my use cases, it is very rare to have an image with such a large size to benefit a lot from resuming downloading. Although we had some discussion on it in #837 , I am not still wondering whether it worths to do so.\nSince it is not a trivial change, and it seems that the original issue can be solved better in Kingfisher 5, can I close it without merging?\nThanks again for your contributing and patience!. Hi, @joystate \nThanks for it!\nI am so sorry that I recently didn't get a chance to look at the issues. The discussion on that issue looks reasonable and I wish I could interact it soon. But I wonder why you need to make these change in a separated class. Can it be an improvement to the original ImageFetcher?. Thanks!. \ud83d\udc4d  Thanks!. A new version 4.7.0 was released for Swift 4.1. Should be fixed in #889. @lizizi \nYes. As @jzau said, you need to encode your url string before you create a valid URL, otherwise, it will be nil when you creating URL from string and the image will not be loaded.. It's more likely a problem in your development environment.\nMaybe you need to check your SDK settings. There is little we could do in Kingfisher. Please consider asking help from Carthage if you still cannot build it in a correct environment.. \ud83d\ude02 Thabks for it!. It's not supported to show an indicator in a button now. It's just for an image view (with Kingfisher's image view extension method.)\nSo you need to implement your own activity view and animate/stop it yourself. It should be not difficult to use the completion handler of the image setting method for button class.. @Sunnyyoung Thank you for it!\nEverything seems fine expect the change for public init(transform: @escaping Transformer). It is a public API changing and will break current code. I would do some additional work leave & deprecate the old version to keep code compatible. After I have a chance to do that I will merge it.\nThank you for your supporting.. @tomaskraina Thanks for it! Happened to be quite busy recently but this addition looks fine to me at the first glance. I'd take a detail look at it later and get you back then!. Yes, you are definitely correct! Thanks!. @Dschee Not sure what could cause it, but it is more likely an issue that the test bundle (target) does not contain libswiftAccelerate.dylib. Maybe it worth to try to enable ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES in the Info.plist of your UI test target too?. Great!. @Dschee No, don't worry guy. I was not angry at all. \ud83d\ude02\nThanks for taking time on trying this project and opening the issue. I am sorry that I didn't help you out and I'd take a look at it when I have a chance later since it is weird to me.. Sure. Maybe you were importing or using Kingfisher\u2019s method in the UI test target, which did not make sense and should not happen in fact. I would try to see whether I can reproduce it later, but if I cannot, I will just let it go.\nThanks!. Kingfisher relies on Accelerate framework to do fast blur processor. In an app target, Xcode could find these kinds of implicit dependencies automatically and link them when necessary. But in a test target, it seems that Xcode has some issues to find implicit dependencies, so you need to add the Accelerate.framework to the linked binary section in build setting yourself manually.. Fixed. @GarthSnyder Thank you!. Should be fixed in #984 . For now, it should be fine since the file manager delegate is not in use. However, the decision of using a unique file manager instead of the shared one in another thread might cause problems if later we want to inspect some events. The FileManager class is not thread-safe after all.\nAccording to the documentation, I think it would be better to create it within the using thread as well.. @DrewKiino \nSorry for the late reply. Great suggestion!\nHowever, as I know, UIImage does not have the ability to load a PDF file out of the box. As I know, a possible and fast way is using PDFView, but it is a very new API which starts from iOS 11.\nMay I ask how are you setting your pdf data as an image now?. @DrewKiino PDF inside xcassets will be built to plain images at compiling-time, so in fact it is not compatible with UIImageView or UIImage as pdf data. It is not the case Kingfisher could handle now.\nI'd keep an eye on the possibility for supporting it, but now I don't have a good idea yet.. Now as in Kingfisher 5, instead of downloading an image from the network, Kingfisher also supports to set image from a data provider. See this section in Wiki for more. https://github.com/onevcat/Kingfisher/wiki/Cheat-Sheet#imagedataprovider\nHowever, you still need to develop a way to convert the PDF data to a UIImage object to show it (with your customized ImageProcessor. There is no built-in support to convert a PDF to an image).\nTo know more about ImageProcessor, take a look at this page: https://github.com/onevcat/Kingfisher/wiki/Cheat-Sheet#processor . Yes, it is now just a wrapper for it. It was used to prevent rewriting some logic other than invoking completionHandler. But that code had already gone now. See this. From version 5.0 (not released yet now), we use a better memory management strategy with the max limit of memory cache, so memory related issues should be much less now.\nAnd for huge images, you can now use DownsamplingImageProcessor first to downsample it before showing (in a list, eg). A demo for using it is also contained in the repo sample app.. @rdgborges Seems cool at first glance! Thanks for it.\nI'd check it later and merge it at a proper time. :). @ParkGwangBeom Good direction as an optimization.\nHowever, the animation playing is now could be controlled by users with invoking startAnimating and stopAnimating. Maybe we also need to consider it when start/stop? (Say, the animation should not be started automatically if the user chooses to stop it manually before switching to background.). Hi, @quicklywilliam \nThanks for the suggestion. This seems to be under a sub-domain of implement #722 , however, currently Kingfisher heavily depends on the URL to download the image, so under current architecture implementing an arbitrary customizable resource is not so trivial. (I plan to find time to refactoring the whole project and release a major update for that.)\nFor your particular case, what you want is the cache part of Kingfisher (which is managed by ImageCache). So once you have a way to give the image an identifier, you could add an extension to UIImageView easily. Maybe something like this:\n```swift\nclass ComputedImageData {\n    public var imageSize: CGSize = CGSize.zero\n    public var opaque: Bool = false\n    public var identifier: String = \"\"\n}\nextension Kingfisher where Base: ImageView {\n    func setImage(with resource: ComputedImageData,\n                         placeholder: Placeholder? = nil,\n                         options: KingfisherOptionsInfo? = nil,\n                         progressBlock: DownloadProgressBlock? = nil,\n                         completionHandler: CompletionHandler? = nil)\n    {\n        let options = KingfisherManager.shared.defaultOptions + (options ?? [])\n        options.targetCache.retrieveImage(forKey: resource.identifier, options: options) { (image, type) in\n            if let image = image {\n                self.base.image = image\n                completionHandler?(image, nil, type, nil)\n            } else {\n                UIGraphicsBeginImageContextWithOptions(resource.imageSize, resource.opaque , 0.0)\n                // do things, render the image\n                let image = UIGraphicsGetImageFromCurrentImageContext()!\n                options.targetCache.store(image, forKey: resource.identifier)\n                self.base.image = image\n                completionHandler?(image, nil, .none, nil)\n            }\n        }\n    }\n}\n``. It should be added from version 5 (not released yet, but you can try it from branch 5.0 or some beta release later). Use theImageDataProvider` would do the trick.. Did you try to disable memory cache or set it to a too small value? Kingfisher has to load images again from disk if it fails to find it in memory cache. And loading an image from disk is an async operation which might cause the flash.\nCould you check where Kingfisher get the images by printing the cache type in completion handler?\nswift\nimageView.kf.setImage(with: url, completionHandler: { image, error, cacheType, imageURL in\n    print(\"images from: \\(cacheType)\")\n}). : ). \ud83d\udc4d . Not quite sure what you want to do? What do you mean by changing placeholder image size? The placeholder image is set by you and maybe you could decide the content mode of that image view?. Not sure what the issue is about and the description is not enough for us to know what happens.. It's magic! Thanks!. I didn't see something like loop count or repeat count in GIF data specification. Not quite sure about it.\nBut you can set the loop count manually. For UIImageView, it is animationRepeatCount. And for the AnimatedImageView, it is repeatCount.. I don't think loading this image would ever cause a memory issue. This 1024*768 image at RGB would take 18MB~ memory, it should be far away from receiving a memory warning. \nSo maybe you need to profile your app in a more detail way with Instrument to find what's taking your memory.\n. Version 5 (not released yet now) will ship a better memory management with upper limitation. The memory related problem should be solved at a higher level. If you are trying to load huge images, I suggest to use DownsamplingImageProcessor to downsample the image before show it. Some demo for handling huge images are also contained.. https://github.com/onevcat/Kingfisher/wiki/Cheat-Sheet#use-imagecache-to-store-or-get-images. https://github.com/onevcat/Kingfisher/wiki/FAQ#can-i-load-some-special-image-format-like-webp. Kingfisher uses URL string as the cache key. So a better approach is adding a suffix or query to your image URL, say like \"https://domain.com/image.png?time=12345\".. Thanks!. How do you want to \"control\" the cache? Kingfisher provides a max duration for a cached image and it will purge that image if it is not accessed for a while. However, there is no such control in a per image duration to determine its lifetime in the cache.. \u770b\u63cf\u8ff0\u662f runloop mode \u7684\u95ee\u9898\uff0c\u53ef\u4ee5\u8bd5\u7740\u6539\u6539\uff1f\n\u53e6\u5916 Kingfisher \u5185\u7f6e\u5e76\u6ca1\u6709 webp \u652f\u6301\uff0c\u6240\u4ee5\u53ef\u80fd\u6700\u597d\u95ee\u4e00\u4e0b\u7528\u7684\u5177\u4f53\u662f\u54ea\u4e2a processor\u3002. @Juefeiye \nTry to change this: https://github.com/onevcat/Kingfisher/blob/master/Sources/AnimatedImageView.swift#L107-L119 on the AnimatedImageView, if you are using it to show the animation.. It might be an internal problem in URLSession, which gives you the \"totalSize\" as -1 to indicate it is not available (unknown) for the request, so maybe you need to ignore that case. :(. From version 5.0, the progress block will not be called anymore when the \"totalSize\" as -1 (the server does not returning the expected size info in response header).. This is the URL struct to recognize your string with trailing space to nil. Then nil URL is sent to Kingfisher which makes it unloadable. You could just add your own extension on URL to trim your URL string before creating a URL, and it should not be an issue in Kingfisher (and we can do little for it I guess).. In the current implementation, the downloading for the first image will not canceled automatically for you when a new one started. You could either:\n\n\nCall cancel on the returned task before setting another image to get an error\nswift\nlet task = imageView.kf.setImage(with: url1)\ntask.cacnel()\n_ = imageView.kf.setImage(with: url2)\n\n\nOr, compare the webURL to imageURL in the callback to see whether it is the current set one:\nswift\nimageView.kf.setImage(with: url ) {_, _, _, imageURL in \n    if imageView.kf.webURL == imageURL {\n        // Second set\n    }\n}. Sorry for the late reply.\n\n\nIt seems to be a good idea. Could you prepare a P-R for it? (Maybe as well as corresponding tests if you'd like).. @lscheepers Thanks for opening this issue.\nHowever, after some double check on both the code and demo project, I cannot reproduce this problem or find any issue on this.\nIt's not quite easy for us to say what's going wrong unless we can reproduce it. And I wonder what do you mean by \"shown 50% of the time\". The indicator will show and hide itself while loading and loading-finished. So if there is not loading process (say the image was found in cache or so), the indicator will not show.. Just had a brief look at your implementation, basically it is due to a poor layout timing before Kingfisher could get correct frame of your image view.\nI guess you could solve it by dispatching your image setting method to next main loop, to give Kingfisher a chance to get correct frame of your image view, maybe something like this:\nswift\npublic func setImage(with imageUrl: String) {\n    DispatchQueue.main.async {\n        self.setImage(with: imageUrl, retryCount: 0)\n    }\n}\nBut why not just use a collection view for your purpose? It could save you from these kind of layout headache.. @cuzv Yes, thanks for the suggestion.\nThere are quite a few of legacy code in Kingfisher and there is indeed a lot of space to improve. Currently, Kingfisher supports from iOS 8.0. We may have to drop it and 9.0 if you want to adapt to UIGraphicsImageRenderer. We could use some compilation condition to support both, but it also causes some inconsistency between iOS versions, which is not quite desired now. Maybe we could consider to drop iOS 8 and 9 after iOS 12 comes out!\nFor the downsampling with ImageIO, I totally agree that we could reimplement the ResizingImageProcessor to save memory. Any chance to give a PR for it? Since I am not quite easy to find some time for this. :[ (But feel free to say no!) \nThanks!. @worthbak \nWow, great work!\nIt make sense that you need some additional steps to make it work. However, I have a question on the cache side, especially the necessity of separating targetCache and originalCache. \nIf you set .cacheOriginalImage on, Kingfisher will in fact cache both the downsampled one by the processor, as well as the original one. But as you said, \"since we never want to fully serialize and cache the original image as a UIImage - instead, we only want to cache downsampled versions of the original image\". So maybe we don't want/need the .cacheOriginalImage at all? Otherwise it would make Kingfisher to store the original image.\nAnd it is a bit strange to me to pass a cacheSerializer.pipeline as a processor. I think it would be more reasonable to be a DownsamplingImageProcessor instead, and the sharing part of downsampling cache serializer and processor could be extracted to a third type like DownsamplingPipline or so.\nIf we could understand whether indeed we need separated caches or not, we could decide whether we need to provide a \"bundled option\" for downsampling. It would make it easier for users who want to adopt it, instead of creating the correct options following documentation.. Downsampling processor was implemented in Kingfisher 5. The UIGraphicsImageRenderer requires more work and there is a plan for it in the future.\nAnd now, ImageCache has a method to accept store raw data to disk.\nSince most of the discussion was done, and the left things are on my ToDo list, I close this issue for now.. I could reproduce it too.\nBut no idea about this. Kingfisher will only operate on the Cache folder and you could see the code on this, which is really trivia: https://github.com/onevcat/Kingfisher/blob/master/Sources/ImageCache.swift#L403\nI believe it should be an issue of iOS system and maybe it worths to fire a radar.\nAnd as a workaround, if you really care about it, might be storing one or two images to the cache after you clear them manually. :(. @ashish-naik \nSure, thanks!\nI will post a radar and let's see what Apple could do with it.. Currently there is AuthenticationChallengeResponsable protocol exposed, with which you could implement SSL pinning or any other challenge yourself. However, it is not yet abstracted to an option or something like that in Alamofire. We could improve to add it later, I think (when I can find a chance to do that!)\nThanks for the suggestion.. It's a webp file and not natively supported in Kingfisher and iOS. Read this: https://github.com/onevcat/Kingfisher/wiki/FAQ#can-i-load-some-special-image-format-like-webp . If you want to get the path of a cached file, you could use cachePath(forKey:processorIdentifier:). You just pass a key of the cached image (by default, it is the absoluteString of the image URL) to it.. It's not supported for now. And a better approach is to use progressive JPEG (and it's in the plan to implement).. Hi,\nKingfisher accept a valid URL as parameter, so please make sure you are not sending a nil to the image setting method.\nI guess a url contains arabic letters without escaping would lead to a nil result when you create URL struct.. When you do let url: URL? = URL(string: \"https://www.marraa.com/wp-content/uploads/2018/06/\u0662\u0660\u0661\u0668\u0660\u0666\u0662\u0664_\u0660\u0660\u0662\u0660\u0661\u0668.jpg\"), you may get a nil.. May I have some code snippet or a sample URL string? The link you gave me above results to a nil, if the URL.init(string:) initializer used.\n\n. It is just how URL works in Swift. You need to provide Kingfisher a valid url, otherwise, a nil input means reset the image view to its placeholder, if any.. I believe your code returns early since the guard let url = URL(string: linkString) not pass.. Maybe it is written here: https://github.com/onevcat/Kingfisher#developments-and-tests. Memory cache does not mean the memory usage your images may take. It is the cached images in memory for loading again quickly, instead of the memory used for displaying or referred by your own variables.. @gordontucker @ejmartin504 \nSorry for the late reply. LGTM at the first glance. I'd take a detailed look at these changes and merge it ASAP.\nThanks!. The downloading will continue (with the consideration that you might need that image anyway later). However, the image setting will check current (the latest set) URL so it will only show the latest one you need.. Make sure you have a valid URL before sending it to Kingfisher.\nMaybe see https://github.com/onevcat/Kingfisher/issues/863 as well.. Basically Kingfisher will clean its memory cache automatically when receiving a memory warning, however, you could still trigger it manually. Please read this: https://github.com/onevcat/Kingfisher/wiki/Cheat-Sheet#clear-cache-manually. @L4grange Not sure what could cause it, but sounds like the image is not set in the main thread. (But that should not be the case since we are actually dispatching the image setting to main queue)\nDoes this issue happens 100% on iOS 9 and 10? Could it be a layout issue that your image view is just not in the screen? (say something you could try to set some background color and set the image manually to nil to see whether you could see the color, or just confirm the view's frame and/or cliping status).. UIImageView and UIKit does not support GIF out of the box, so creating an image view yourself and setting it will not animate as you wish. I suggest you should always use Kingfisher's extension to set it, as described here: https://github.com/onevcat/Kingfisher/wiki/Cheat-Sheet#animated-gif. Thanks for contributing! Seems cool. I will look at it this weekend. :]. LGTM! Sorry for the latency!. This kind of Swift version support wasn't added until CocoaPods 1.1.0. So I guess you could solve it by just upgrading you CocoaPods version.. The whole cache system was redesigned and implemented in Kingfisher 5. Upgrading to the latest version should solve this issue.. @fassko Thanks for it. All Xcode 10 related changes should be in xcode-10 branch. I changed the p-r base to there and will merge it now.\nThank you!. Sorry for the late reply. The problem is that your image is JPEG instead of PNG, so when storing the downloaded images to disk, Kingfisher will respect your image format and make it a JPEG, which is a format without alpha channel. You could set your image with a FormatIndicatedCacheSerializer.png to force convert your images to PNG:\nswift\nimageView.kf.setImage(with: url, options: [.cacheSerializer(FormatIndicatedCacheSerializer.png)]). Hi,\nIf your image scale does not match your screen scale, it might happen. You may need to specify the image scale yourself if you are trying to load it from disk manually, like this:\nswift\n// For your case, it seems you are trying to load a 3x image.\nImageCache.default.retrieveImage(forKey: \"key\", options: [.scaleFactor(3.0)]). Not sure what can cause it. I cannot think out any reason on this crash. So I am closing it.\nIf you encountered this issue, please try to upgrade to the latest version. If the issue is still there, consider to reopen it.. Duplicated https://github.com/onevcat/Kingfisher/pull/967. @BabyAzerty DefaultCacheSerializer will cache the decoded image only when it knows its original image data format. In your case, Kingfisher cannot recognize your the encrypted data so it chooses to cache your original data instead.\nI believe you could solve it by just provide an explicit format CacheSerializer, like FormatIndicatedCacheSerializer.png or FormatIndicatedCacheSerializer.jpeg, and pass it as an item in options.. As mentioned in #1001 . This issue should be already resolved in Kingfisher version 5. I quote the comment here:\n\nKingfisher v4 (and any of an earlier version) is using an aggressive strategy to cache images in memory. It relies on the system memory warning notification to free up cache in memory. However, it seems that recently the system sometimes fails to fire this notification to the app.\nThis behavior is changed in Kingfisher version 5. Now we are using a better approach to cache images. At most, a maximum 25% of your memory will be used for caching images in memory. Version 5 will be released in a few days (currently it is in beta and I am writing migration guide and document for it). If you'd like to try it now, just use the beta versions like this.\nIf this issue bothers you a lot, and you have no chance to upgrade to version 5, you can set the maxMemoryCost to a reasonable value:\nswift\n// It means disabling memory cache.\nKingfisherManager.default.cache.maxMemoryCost = 1. Thanks for it!. There isn't a definite definition of what is a tint for. And it's not possible for Kingfisher to provide all the filters. So if that one is not for you, you could easily create your own by conforming the CIImageProcessor.. It should work when you pass it as an .processor option in any Kingfisher image view setting method, regardless of the image is from local cache or downloading (and by default the processed image will be cached so there is no need to process it anymore when loading from cache).. Yes, if you set up your processor identifier correctly. Please read this wiki and related reference. @wudijimao I depends on what the format is your images. So I cannot say what happened for your case.\n\nThe default cache serializer only supports jpg, png and gif. If you are trying to do any other data format, you need to implement your own serializer.. Unless more information can be given (eg, what does your customize processor do, what is your original image data format is), I cannot give any comment on this topic.\nPlease ask a question in a better way, what did you do, what did you expect to happen, what did it happen actually? By only saying \"it is broken\" does not help on solving your issue at all.\nThe default processor used in Kingfisher itself is not a special one at all. The image processor takes responsibility on converting downloaded data to an image, while the CacheSerializer converts the processed image to data for storing in the cache. \nIf you returned an image from your processor can be serialized, everything should work seamlessly. However, if your image contains unsupported properties (and different underlying raw data), you may need either use your own serializer for your special needs or lose them in the cache.. :) No problem!\nBTW, you could use a FormatIndicatedCacheSerializer to force it to a PNG if you need. See the cheat sheet here. Duplicated to #1001 \nThis issue should be resolved from Kingfisher version 5.\nParticularly for the high-resolution images, we also have a DownsamplingImageProcessor now to downsample the original image to smaller one before loading it in memory. It is useful if you want to show a bunch of high-res images in a list. A demoscene to show the best practice (with caching the original high-res images to disk, to prevent downloading it again) is also contained in the demo app for Kingfisher version 5. Check it when you want to upgrade!\nI also paste my comment in #1001 below for reference.\n\nKingfisher v4 (and any of an earlier version) is using an aggressive strategy to cache images in memory. It relies on the system memory warning notification to free up cache in memory. However, it seems that recently the system sometimes fails to fire this notification to the app.\nThis behavior is changed in Kingfisher version 5. Now we are using a better approach to cache images. At most, a maximum 25% of your memory will be used for caching images in memory. Version 5 will be released in a few days (currently it is in beta and I am writing migration guide and document for it). If you'd like to try it now, just use the beta versions like this.\nIf this issue bothers you a lot, and you have no chance to upgrade to version 5, you can set the maxMemoryCost to a reasonable value:\nswift\n// It means disabling memory cache.\nKingfisherManager.default.cache.maxMemoryCost = 1\n. Thanks!\n\nIt's a breaking change and I guess we will not merge it recently.\nTo customize an indicator, you could access the indicator after setting the activity type:\nswift\ncell.cellImageView.kf.indicatorType = .activity\nlet activity = cell.cellImageView.kf.indicator?.view as! UIActivityIndicatorView\nactivity.color = .red. \ud83d\udc4d  Thank you for sharing it @ludriv . Wow, good catch!. Thanks for this!. LGTM. Thanks.. Thanks for this PR. However, it is not doing the same thing. \nBy calling the completion handler with .cancel, you will get a \"cancelled\" error. In some cases, it is important for users to know why the download does not succeed, it requires we to get the whole response body (maybe it could be some permission errors or not found). By allowing the request continuing, more information is provided to know what's going on.\nWhat's your opinion on it?. Hi, @zhongwuzw \nYes, a status code could indicate what happens. However, by calling completionHandler with .cancel would result in an error with code -999 \"user cancelled\", instead of an error containing the status code. So it will erase the error information and users will have no idea on what happened.\nThe error handing of Kingfisher is quite old, from the age of Swift 1.x, before Error comes out. I have an idea to make it more compatible with latest tech. Maybe we could improve it in a major update later for Swift 5. But not in this way, I am afraid.... @zhongwuzw Maybe you misunderstood me. I mean, if the request fails due to an invalid status code number after we .allow it in this delegate method, the user could get a detail response error with its actual code to know what happened. However, if we .cancel it here, only an NSURLError with code -999 (user canceled) will be thrown. It hides the real reason of the error.. No, the error which is passed to users is different.. @zhongwuzw Oh, sorry. I think I was wrong with it. You are right, the URL session handler would do nothing since the fetch load happens to be cleared already.\nIt is a bit hidden and more like a side effect. I am not quite like it and it prints out some confusing logs like URL request errored with -999 user-canceled. But you are right, the behavior of Kingfisher does not change for it and it improves since no additional loading required.\nThanks for the p-r!. Good catch!. @zhongwuzw Thanks for this PR. I am not quite sure when the case you described would happen. In the same extension, we have added the activity as a subview to image view. And if you provide another implementation for customizing activity indicator, you may also want to provide a remove. So I cannot see an obvious case or necessity for it.\nCould you give me an example? Thanks!. I guess it is a misuse of that view and it should be prevented from using side instead of our framework. So I cannot see an obvious reason to add this checking. Anyway, thank you for letting me know this concern! I'll watch on it to see whether we need this in future.. maxCachePeriodInSecond is a \"suggestion\" of longest cache duration. It is not an aggressive way to control and clean the cache when any access happens. Basically, Kingfisher will check and clear the expired cached images when user tap Home button to send your app to background. If you need such an aggressive cleaning behavior, you may need to call cleanExpiredDiskCache(completion:) every time you try to access the images yourself, and do image retrieving in the completion handler.. Thanks for the PR. The change looks good, but basically, it is intended to hold them longer, so the completion handler will be always called. It keeps the behavior consistent and easier to understand.. Not sure what happened. The visibility of activity indicator always binds to the animation. So if the animation stops, it should be hidden. I also tried a similar implementation of your logic but cannot reproduce it. Is it possible to create a minimal sample of it, so I could take a deep look into it.\nThanks!. Should be supported in Kingfisher 5. See the Base64ImageDataProvider.. Now there is a default limitation for memory, so you can load infinity number of images.\nFor more about how Kingfisher handles memory cache and changes in Kingfisher 5, see https://github.com/onevcat/Kingfisher/wiki/New-In-Kingfisher-5\nFor some tips on performance tricking in Kingfisher 5, see https://github.com/onevcat/Kingfisher/wiki/Cheat-Sheet#performance-tips. This is due to the image is already released from memory cache and will be loaded again from disk cache, with a nil placeholder. You could try to set images with .keepCurrentImageWhileLoading to see whether it could work:\nswift\nimageView.kf.setImage(with: url, options: [.keepCurrentImageWhileLoading]). @hernangonzalez  \ud83d\udc4d \n@renshaw1 \nBTW, if you are using it in a reusable cell in table view or collection, maybe the flickering comes from the cell reusing. You could also try:\nswift\ncell.imageView.kf.setImage(with: url, placeholder: cell.imageView.image)\nto use the current image as your loading placeholder to prevent it.. You may need to upgrade your CocoaPods to the latest version.. iOS cache folder is used for caching images. So uninstall the app will not purge it. Try calling cache clear method explicitly if you want to remove them:\nswift\nImageCache.default.clearMemoryCache()\nImageCache.default.cache.clearDiskCache() //This is an async operation and you may want it finishes before you reload.\nSee the wiki for more.. maxCachePeriodInSecond is a \"suggestion\" for clearing cache when your app SWITCHED to the background. It is not an aggressive way to clear your cache. See https://github.com/onevcat/Kingfisher/issues/988\nFor the cache not being cleared in a real device, we didn't receive any report on it before. And now I am not sure what happens. I'll check it later to see if I could reproduce it.. Could you try to print the cache type in the setting image completion handler to see where is it from. Like this:\nswift\nimageView.kf.setImage(with: url, completionHandler: { \n    (image, error, cacheType, imageUrl) in\n    print(cacheType)\n}). So it seems fine and everything is correct to me...Do you have any cache policy header in the response? Or did you changed the image downloader session of Kingfisher?\nMaybe it would be helpful to use a proxy to check the response to see what does your server return to you.. I suggest you could try the AnimatedImageView instead of the normal UIImageView for this purpose. In UIImageView, all GIF data will be loaded at once, which is a memory consuming operation if your GIF is large or contains lots of frames. AnimatedImageView will take care of the preloading for only several frames to save the memory. (However, it asks for more CPU time and battery energy, it is a trade off.). kf is mainly for avoiding namespace conflicting. Kingfisher itself is an aged project, which could be retroacted to Swift 1. So some APIs are not so Swifty in current days.\nI have a plan to rewrite most code in Swift 5, but it might not happen until 2019.\nSo I will keep your suggestion in mind to see what we could do to make it better!\nThanks.. scaleFactor is not a part of image data, so you need to specify a proper value when converting the data to an image then set to a view.. This an abusing of ImageModifier, or say, it is a sick design of ImageModifier. ImageModifier is basically for some un-serializable properties, like renderingMode, imageFlippedForRightToLeftLayoutDirection or other things. If you want to change the image data itself, you need a processor.\nThe documentation on it needs to be improved.. @reenaphilip I suggest you could also add this code to your cell's reuse methods:\n```swift\n// In your customized cell\nclass MyCell: UICollectionViewCell {\n@IBOutlet weak var cellImageView: UIImageView!\n\noverride func prepareForReuse() {\n    super.prepareForReuse()\n    cellImageView.kf.cancelDownloadTask()\n    cellImageView.image = nil\n}\n\n}\n``. No, Kingfisher is using its own cache and does not use ETag or modified date (URL cache). If you need to update the resource, the easiest way would be appending a query (like a timestamp,https://domain.com/image.png?t=123456`) to your URL.. Kingfisher v4 (and any of an earlier version) is using an aggressive strategy to cache images in memory. It relies on the system memory warning notification to free up cache in memory. However, it seems that recently the system sometimes fails to fire this notification to the app.\nThis behavior is changed in Kingfisher version 5. Now we are using a better approach to cache images. At most, a maximum 25% of your memory will be used for caching images in memory. Version 5 will be released in a few days (currently it is in beta and I am writing migration guide and document for it). If you'd like to try it now, just use the beta versions like this.\nIf this issue bothers you a lot, and you have no chance to upgrade to version 5, you can set the maxMemoryCost to a reasonable value:\nswift\n// It means disabling memory cache.\nKingfisherManager.default.cache.maxMemoryCost = 1. Since this issue should be resolved in Kingfisher version 5, I am closing it now.\nIf you have a similar crash in version 5, feel free to open another issue.. @ryang1428 It depends on your using case. If you have a lot of small images in a table view or collection view, I believe it would be useful to set it to a reasonable number. If you have several very large image to show at a time, setting it to 1 to disable memory cache is better.\nBTW, it might be hard to understand, but the maxMemoryCost in Kingfisher 4 is the pixel count instead of MB size in memory.. Please check https://github.com/onevcat/Kingfisher/wiki/FAQ#can-i-load-some-special-image-format-like-webp. I guess it is not possible since the image size is not contained in the response header, so there is no chance to get it until downloading all the image data.. I didn't see a good reason to add such a feature into Kingfisher for now. The use case might be calculating the height for a dynamic cell which contains a sizable image view. However, even doing something like size fetching, it is still an async operation and you still suffer from the same issue (flickering before image set). If it is really needed, I believe integrate ImageSizeFetcher to your project should be fairly easy as well.\nA more correct way should be that your server returns the image size to you alone with the URL. It adds only several bytes usually and give you a really quick way to get rid of the issue.. xcode-10 branch is for that. But not merged into master yet. I'll do it later.. Should be done in #1010 and I will release a new version later.. It seems that you have some swizzling \"magic\" in your project. Kingfisher does not use any \"NSForwarding\"  or runtime method and should not cause this kind of crash. So I suggest you to check your own code base to see if something wrong happens in your swizzling (if any).. Check https://github.com/onevcat/Kingfisher#developments-and-tests\nJust run setup.sh to fix it!. Should be done in #1010 . Not quite sure the pixel size of your images. However, loading lots of large images may cause this problem sometimes, especially you are still keeping strong references to them when you scroll between controllers.\nI suggest you try to unload the images (by setting imageView.image to nil), when you do not display them.\nCancelling the download tasks might have nothing to do with it.. You need to do a pod repo update to update your local spec repo before you try to install/upgrade any pod in your project.. Yes, you are right. A method for storing raw data only would be useful. I think I would add it later.\nFor now, the code snippet you posted should work perfectly, except that it creates and cache the image object in memory even you do not need it yet.\n. Master is already in Swift 4.2 (which is not tagged yet), while the version 4.9.0 is still 4.0. I will release it later today.. Maybe you could check this https://github.com/onevcat/Kingfisher/wiki/Cheat-Sheet#authentication-with-nsurlcredential\nBasically it is just forwarding urlSession(_:task:didReceive:completionHandler:) and urlSession(_:didReceive:completionHandler:), so you could do the same thing to verify or ignore your self-signed cert.. Swift 4.2 should be fully supported in version 4.10.. All the operation queue and processing is redesigned in Kingfisher 5. I suggest upgrading to the latest version to have a try. It should be fixed there.. 4.10 is using Swift 4.2 so you need Xcode 10 for it. If you are still using Xcode 9, please do not upgrade it now.. It depends on how did you integrate Kingfisher. If you are using CocoaPods, just specify the version 4.9.0 and do a pod install as long as you are using Xcode 9:\npod 'AFNetworking', '= 4.9.0'. Oh, interesting. Swift should be able to tell from these two ContentMode in different modules. Maybe you could explicitly change it to Kingfisher.ContentMode.aspectFill or simply use .aspectFill. I will investigate on how it could happen.. @sejolopab You need to do the similar, as long as you are still using Xcode 9, you need github \"onevcat/Kingfisher\" == 4.9.0. @ParkGwangBeom Hi, great work! It looks much cleaner now.\nHowever, I have a plan to make these clean-up works in 5.0. I am also already in progress of that major release. So it would be not easy to merge these changes. Could you instead check whether you could do them from the 5.0 branch and send the PR there if you'd like? \nhttps://github.com/onevcat/Kingfisher/tree/5.0\nThanks!. @ParkGwangBeom Fantastic! Let's wait for CI and merge it later. Thank you.. It's crashing due to memory. This gif is too large (1600\u2006\u00d7\u2006900) and system UIImageView requires all frames to be decoded before it can create a serial of images.\nSo please use AnimatedImageView to only decode several frames to display this image, which is just for this case.\n. Thanks for it.. Are you creating your binary with Xcode 10?\nMaybe it is related to the issue that Xcode 10 binary not working well on iOS 9? Could you try to see whether Xcode 10.1 beta could solve it?\nhttps://developer.apple.com/documentation/xcode_release_notes/xcode_10_1_beta_2_release_notes. Not sure what happened, not reproducible so I am closing it. . LGTM.. What's your CocoaPods version? Maybe it worths to try 1.6.0.beta.1.. The error log indicates that you are still trying to build it with Swift 4.0/4.1.\nHow did you set your own podspec Swift version? I guess you may need something like s.swift_version = \"4.2\" in your podspec too.. Do you guys still have a .swift-version under your repos? It is deprecated and maybe you need to remove it before you do a lint.\n@LemonadeEX @yishuiliunian May I know your repo/branch so I could check what happened.. @ARGAMX Kingfisher 4.10 supports from Xcode 10 and Swift 4.2. To use in Xcode 9, please try Kingfisher 4.9.. OK. I will add Swift 4.0 support back.. 4.10.1 was released with Swift 4.0 compatibility. Now you should be able to build it with Swift 4.0 or 4.1.\nI am closing this.. Placeholder is a protocol and you could make any view as a placeholder. So you could just extend an image view as Placeholder and load image there.. I guess KingfisherWebP is good enough on this task.\nIt might still be needed to use something like libwebp as a dependency if we want to integrate WebP support in Kingfisher. Since it is not a cost-free dependency, we still need to provide another framework or subpod for it, which does not make things easier at all.\nSo there is no such plan now for Kingfisher. Just using KingfisherWebP should be fine!. Thanks for it.\nI am now rewriting the bad code of this project now, quite a few things have been changed. It would be easier to make the changes later directly in the refactored version, to avoid potential merge conflicting.\nIt is a useful feature and I would keep it in mind in the new version (or you could try to add it again in the new version later). Thank you!. Done in branch 5.0.. Done in branch 5.0.. You are right on this!. This is already open. See https://github.com/onevcat/Kingfisher/wiki/Cheat-Sheet#authentication-with-nsurlcredential. Thanks!. Hi, @dstranz \nI understand your purpose, but I still wonder how this option is a must. Does this code work for your case?\nswift\nimageView.kf.setImage(with: \"https://domain.com/image.png\") {  \n    image, error, cacheType, imageURL in\n    if let error = error {\n        imageView.image = placeholderImage\n    }\n}. Sorry for the late reply.\nI got your idea. And yes, maybe it is good to have it as an option.\nHowever, I am working on a major release in the branch 5.0, which contains a few refactoring to this framework. I want to contain this as a feature from 5.0, could you try to rebase your work to that branch and send another PR there? So we could reduce the merge conflicting.\nAnd I suggest instead of .onFailureImage(Image), we'd prefer .onFailureImage(Image?), which can give users a chance to set the image view empty.\nI will later do some additional work based on your progress, like adding the transition animation to the failure image when .transition option provided.\nThank you!. @dstranz I think that's the fantastic use case for double optional. Thanks!. Bad code. These will be refactored in version 5.0.. Hey,\nBasically now SPM does not support for iOS. It is good at developing a command line tool or server-side Swift.\nI am a bit curious why or how would you use Kingfisher with SPM? Because I am planning to drop SPM support for the next major version until it could support app development (which is the domain of Kingfisher.). Hi,\nNot sure what's going on. But it seems to be related to Carthage https://github.com/Carthage/Carthage/issues/808\nI am checking to see the reason, but I guess there is little we can do in Kingfisher.. Didn't find a way for it. And it is not likely to be an issue in Kingfisher. So I am closing it.. @ixongju  Thanks!. @zfrankz Thanks for opening this issue.\nCan you paste some snippet on how did you add the activity indicator? Or even better, can you prepare a simple demo in which we could reproduce and track it? Thanks!. Not sure what happened and cannot reproduce it in my environment.\nI suggest upgrading to Kingfisher 5 to see whether the crash is still there or not. \nIf there is more information or crash stack could be provided, please reopen it.. A UIImage or NSImage object does not contain image format information anymore, it is just a representation for underline raw pixel data. (However, image format like PNG and JPEG is the way they encoded as data trunk).\nYou need to access to the original downloaded or loaded data to know exactly what format it is. May In know what's your using case? Maybe I can give you some suggestion based on that.. By default, Kingfisher will keep the input (downloaded) format and store in on disk with the same format (PNG, JPEG and GIF is supported out of the box). If you are forced to use a certain format, you could pass a FormatIndicatedCacheSerializer to let Kingfisher serialize your image to that certain format.. Thanks for reporting. I'd check and try to fix it in the next release version!. No, it supports both HTTP and HTTPS, as long as you set up everything correctly.\nThe option reads as \"Allow Arbitrary Loads\", please check your Info.plist setting.\nBTW, maybe you can get some information by checking the console log or printing out the error in the completion block.. Are you using any processor when you first download and store the image in cache? If so, you may need to also contain the processor identifier in the cachePath method to get the correct path.\nAnother possible reason might be that you are not using the same cache. I noticed that you set the manager's default cache to a name with \"SOUL\". Can you make sure that you have put the image to the same disk cache?\nBest regards.. Image loading from cache could be an async behavior (when loading from disk). So there would be a chance that when your cell gets reused, the previous image loading (from disk) has not finished yet, but the latter one (maybe from cache) is done. Then, the disk loading finishes and the completion handler is set again. There is no sync built-in in the multiple image cache loading.\nWhy don't you just use the UIImageView extension method for your work? It should be much easier and the result is filtered for you to only set the latest loading.. Basically I suggest you do all these things in Kingfisher, maybe something like this:\n```swift\ncell.iv_picture.kf.indicatorType = .activity\nimgRef.downloadURL { url, error in\n    if let url = url {\n        cell.iv_picture.kf.setImage(with: url, placeholder: UIImage(named: \"user_image\"), options:[.processor(ResizingImageProcessor(referenceSize: size))])\n    } else {\n        cell.iv_picture.image = UIImage(named: \"user_image\")\n    }\n}\n```\nIf you really need to do something special and use the ImageCache independently, be careful about that the operation is asynchronous (and your imgRef.downloadURL seems to be also asynchronous). So when the cell reused, you need to take care of it yourself to make sure it is setting the one you need.. No, setImage will firstly check whether the image is already in cache. If not, it will download and cache it for you.\nPlease take some time to read our wiki. It will save you a lot of time in struggling.. I suggest you store the result of imgRef.downloadURL somewhere in your code once you get it for the first time, to prevent reloading it again and again. So you can get rid of the getting URL method and use the stored URL for later loading.. @honbolau Thanks for the PR.\nBut I didn't see a good reason for this change. Since the KingfisherCompatible is a public protocol, this change at last breaks the compatibility (although it probably no one is trying to conform to it) somehow.\nMaybe it brings minor performance improvement since it gets rid of the dynamic dispatch. But it should be almost ignorable. How do you think about it?. @honbolau \ud83d\ude02\nI'd like to merge it, but not for version 4. Could you make the same change and send a pull request to branch 5.0? I think we could contain this change in the new major update version.. Ummm, yes, if your image is already cached in memory, it will be returned as soon as retrieved. So in your case, the latter one comes first.\nIf you really need the order, I suggest you can call the latter set image method in the completion handler of the first one. So your second one would definitely come after the first, in order. You can also add .cacheOriginalImage to the options of the first setting, so your second setting can reuse the downloaded image and only do processing, which would be faster.. > For me it's unexpected behavior. The same issue can be potentially reproduced during cell reuse when previous image is loaded after current one.\nIt will not happen, if you try to load images at different URL. The image view setting method will keep the last URL you are loading and call the completion handler only if the loaded one has the same URL as the last one. In your case, since you are loading images from the same URL (only the processor is different), so the completion handler called unexpectedly. A simple (and maybe better) workaround for your case is, instead of loading the image URL directly, you can add some extra queries to distinguish them, like https://example.com/image.jpg?p=30x30 and https://example.com/image.jpg?p=0x30. Most servers will ignore the query if it does not recognize it, but Kingfisher will treat them as different resources so the completion handler will be called for the last set one. (Or you can just use the identifier of your processor as the query, which is unique for each kind of ImageProcessor)\nIt is a design defect to use URL as the image setting identifier (we didn't have the processor in the beginning. At that time, it was enough to just use the URL to determine the last setting task). In Kingfisher version 5, I fixed it by letting users specify a customized identifier for every resource and not use the URL anymore.\n. Most work has been done in branch 5.0 and there is also some beta tags for it. But I still need some more time to polish the code and documentation. There is also a plan to use it first in my own projects before I can release it finally. Maybe it takes two or three weeks for these things.. The share for all iOS 9 and earlier is below 1.0%. I didn't find a reason to still support iOS 9.\nAnd later I have a plan to adapt to UIGraphicsImageRenderer instead of a traditional CGContext drawing. It requires iOS 10+. I do not want to make the deploy target different in the same major version.. The prefetcher will not only download the images but also cache them for later use. If the images are already in cache, it will not be downloaded again. I guess you can find them in the skippedResources array.. Not sure what do you want to do...\nAre you creating something like a carousel from a set of URLs? If so, you can just prefetch them as you did now and then just use imageView.kf.setImage(with: url) to get them from cache. Why do you want to redownload them?. Kingfisher is using URL as the cache key by default. There are several ways for your needs:\n\nAppend a query for a different image at the same URL if possible. Like \"https://example.com/image.jpg?id=1\" and \"https://example.com/image.jpg?id=2\" means different images in Kingfisher. And it will redownload the version of \"id=2\" even when you have the image for \"id=1\" in the cache. But it requires you have a way to receive different queries from your server for different URL. This is the recommended way if you have control to your server.\nInstead of using the URL directly, create an ImageResource with this URL, and a unique cacheKey. The idea is the same as above, but without the capability of reusing the image anymore, since as a client app, you have no idea on whether the images are changed or not on the server (in the same URL).\nSet a .targetCache other than the default one in options parameter when you prefetch, then when you need to fetch them again, clear that cache.. @wudijimao \n\nAs @ixongju mentioned, there is no built-in auto retry support now in Kingfisher. (However, it is possible if we can limit the auto retry count to a number so it will not keep retrying forever).\nFor me, since I always use Kingfisher in a table view or collection view, every time the cell be loaded, it will try to load the image. More or less, it behaves like a \"retry\" for downloading images. And it works well for me without any user complain about it. (and we also have a mechanism to allow the user to tap on the image to load.)\nBut auto retry itself is an interesting feature, I think I'd like to implement it in the future.\n@ixongju Thanks for the information about the errors. Currently (version 4.x), the error types are not so useful. In branch 5.0, we can have fully detailed errors to show what exactly happened inside Kingfisher. You can find it in this file: https://github.com/onevcat/Kingfisher/blob/5.0/Sources/General/KingfisherError.swift\nAnd the new version now is already in beta. If everything goes well, there would be no more API changes so you could have a try on it. \nIf I decide to add support for built-in auto retry, it will be done after version 5 released.. Hi,\nThanks for opening this pull request.\nCould you add some description on what the purpose of this pull request? Like what is to be solved, what is the improvements and how? Is your work on it already done?\nAfter you prepared detail, I can start to have a review.. LGTM! Thanks!. There should be no such version as 4.10.2. Check the release page to see all released Kingfisher version. For the latest of version 4, it should be 4.10.1, and it is both Swift 4.0 and 4.2 compatible. So check your build/pod lint environment, especially the swift_version setting in your podspec file.\nSince it is not likely an issue of Kingfisher, but instead of a CocoaPods integration problem, I am closing it. To get more help, maybe discussing in the CocoaPods repo or Stackoverflow tag would be more helpful.. Some explanation is here: \nhttps://github.com/onevcat/Kingfisher/issues/1053#issuecomment-445609054\n\nThe share for all iOS 9 and earlier is below 1.0%. I didn't find a reason to still support iOS 9.\nAnd later I have a plan to adapt to UIGraphicsImageRenderer instead of a traditional CGContext drawing. It requires iOS 10+. I do not want to make the deploy target different in the same major version.\n\nApple once had some suggestion that for an app target, support iOS N-1. For a library, support iOS N-2. We just follow it. And as I know, some other famous framework like Alamofire also supports from iOS 10 now.\nJust keep using version 4 if you still need to support iOS 9 for a while.. Currently, there is no plan to integrate it. Sorry! . Yes, now the kf returns a struct instead of class. This change is for performance, and for your case, try:\nswift\nextension UIImageView {\n    func doSomething() {\n        var kf = self.kf\n        kf.indicatorType = .activity\n    }\n}. Thanks for the proposal.\nFor the issues part:\n\nDownsamplingImageProcessor works differently for .data(...) and .image(...)\n\nAs indicated in the doc, DownsamplingImageProcessor should be used as the first processor in the pipeline. Currently, if used by being appended to another processor, it just falls back to use the resizing processor. You are right on it, the resizing strategy is a bit different. So instead of simply use resizing as a fallback, I guess it would be better to follow the same way to create an image source and get thumbnail image from the source. I'd try to give it a fix soon.\n\napp cleanup cache directory, images will not be cached\n\nIf I am right, once the directory created, it will be always there, even you clear the disk cache. You could find related code here. The skipCreatingDirectory is only used in test cases for an injection purpose. In framework itself and for external users, the directory would be always recreated. (unless you delete the folder manually, instead of using Kingfisher's clear disk cache method. But this behavior should be out of our scape.)\nFor the improvements part\nThanks again for your PR on DownloadTask!\n\nNSData will not be loaded in memory and CGImageSourceCreateWithURL will be used instead of CGImageSourceCreateWithData\n\nUnderlying, CGImageSourceCreateWithURL read the data from the URL, and then create the image source from the data. So there should be no memory difference between them.\nI am not 100% sure about it, but you can find some clue from CGImageSource doc:\n\nCGImageSource objects abstract the data-reading task. An image source can read image data from a URL, a CFData object, or a data consumer.\n\nLet me know if I am wrong with it.\n\nhave one processor instead of two DownsamplingImageProcessor and ResizingImageProcessor \n\nKeeping ResizingImageProcessor unchanged is more or less a backward compatibility choice. Downsampling will just accept sizes smaller than the original image, with the same aspect ratio. However, the resizing processor could accept arbitrary sizes (and with any given content mode). So I guess there is not a good way to combine them in a good way and satisfy everyone after all.\nBut for most use cases (shrinking the image with the same ratio, that is, aspect fit), the DownsamplingImageProcessor should be chosen. For other purposes, such as a different content mode, users can choose resizing or downsampling followed by a resizing.\n. > In case when there is cached original image .image(...) will be used\nGood catch!\n\nMy case is when content of cache directory was deleted manually.\n\nThere seem to be two possible options for it:\n\n\nCheck folder existence every time and create one if it is not there.\nI am not sure about how it would affect to performance if we check the folder existence every time when storing an image. Do you have any idea on it? Or some benchmark needs to be done before we can add such a check. \n\n\nJust give some log and information.\ncreateFile(atPath:contents:attributes:) does not throw any error but only return a Bool to indicate success or failure. So I am not sure how it would be useful to just see a log like \"createFile fails at path xxx\".\n\n\nOr there is another way: trying to check and recreate the folder only when createFile fails, and then retry creating the file one more time. But it is a bit \"magical\" and hiding things, adding internal complexity, which I do not quite like.\nWhat's your option? What kind of error/log/handling do you prefer?\n\nwe get originalImage from disk cache still can be improved using data instead of image\n\nYes, you are right. It is mainly due to the lack of image source support for DefaultCacheSerializer. Currently, only the DownsamplingImageProcessor lives in the world of CGImaSource, others are playing with CGContext. I wonder if there is a good way to unify the provider, without breaking current implementation and behavior. I would investigate more about it.\n\nI mean that it can be handled internally\n\nSo, it seems that you mean to add a contentMode parameter to downsampling processor, with appending a normal resizing processor? Is my understanding correct?. @gabors \nI believe you could use this init method to create a cache with a given path or closure to customize the cache folder location. After created, the cache value could be set to KingfisherManager.shared.cache so it will be used across your app.. @andrei-kuzma \nThanks for your kindly explanation. I got your idea and will see how can it be improved.\n\nJust one more thing.\n\nCurrently, every invocation on the setImage method would result a calling of completionHandler. This is a much more stable and predictable behavior compared to earlier implementation. I am sure it reduces the mental burden in development, you now do not have to think about when the complemetion would get called and when it would not. It also provides more information on every possible cases.\nFor your case, if you do not care about these two errors, instead of writing the filtering again and again, you could try to add a wrapper to ignore them and use your wrapper method:\nswift\nextension KingfisherWrapper where Base: UIImageView {\n    func mySetImage(with url: URL, completionHandler: ((Result<RetrieveImageResult, KingfisherError>) -> Void)? = nil) -> DownloadTask?\n    {\n        setImage(with: url) { result in\n            switch result {\n            case .success:\n                completionHandler?(result)\n            case .failure(let error):\n                if !error.isTaskCancelled && !error.isTaskCancelled {\n                    completionHandler?(result)\n                }\n            }\n        }\n    }\n}\nAnd here are suggestions from me on error handling in Kingfisher:\n\nCreate a general method or an extension method to make you error handling in the same place as possible as you can. Do not write error handling code everywhere when you call setImage, which will lead you to a situation of \"repeating yourself\".\nOnly pick up the errors you are most interested in, and let the user know what happened. For most image downloading tasks, it is not so critical in failing download or setting an image, especially if you have a retry mechanism (for example, setting the image again when scrolling in a table view). So do not bother your users for an error. (In fact, in my own use cases, I called setImage in almost 100 files, but only use the completion handler in two places).\nIf needed, you could also create your helper methods and properties by extending KingfisherError. This could more or less make the error handling easier.. Yes, you are 100% right on this.\n\nThe default value of .untouch in ImageCache gives a chance to \"overwrite\" the default .mainCurrentOrAsync in options (since there should be no need to dispatch to the main queue). It is a performance trick but I forgot to use the callback queue at an upper level. I will give it a fix now.. > Currently I've managed to reproduce this issue only when image is loaded form disk cache. For downloading image and in memory cache it seems that it works fine.\nI guess loading from memory cache would also cause this problem.... This log comes out from NSURLSession when an on-going task is canceled. Since it is a behavior in Foundation framework, I guess there is little Kingfisher could do.\nMaybe there would be some log options in Xcode could suppress this log. But now I don't have any information on it. You can also try to ask on StackOverflow or file a radar to Apple.. Duplicated to #1064 . LGTM!. Thanks for opening this issue.\nThe Swift module is just for this. To prevent this kind of conflicting, you can change Kingfisher related Result to Kingfisher.Result. This should be the correct way to do it.\nHowever, this should be only required when you need to create the Kingfisher.Result for your own. When used in a method callback, the context of Kingfisher should be inferred for you and there should be no such case. May I know your use case? So I can give a better suggestion.\nApple's Result in the standard library is also considered. There is a plan to use some conditional compilation flag with Swift version to control which Result to be used. For now, we just keep the API similar so we can avoid most migration issues when official Result comes out.\nSo the design of the current Kingfisher.Result is intended, and I don't think there is a need to rename it.. Duplicated to #1062 . Not sure why, but we wrote the license file correctly in the podspec. So I guess it should be a CocoaPods issue.\nDose this help?\n\nI had this warning and it was fixed by commenting all the pods in the Podfile then running pod install then uncomment them back running pod install. I don't know why but it worked fine.\n\nfrom https://github.com/realm/SwiftLint/issues/1083. And maybe also try this: https://github.com/CocoaPods/CocoaPods/issues/5711#issuecomment-339061898\nBefore that, I suggest upgrading your CocoaPods first.\nSince it is not reproducible and seems likely a CocoaPods issue, I am closing it.. Thanks for the effort. As mentioned in #1062, the main reason for starting from iOS 10 is I have a plan to adapt to UIGraphicsImageRenderer soon. I prefer not making the deploy target be different in the same major version, so iOS 9 was dropped from the beginning.\nFor this reason, I am afraid this PR cannot be merged into master. However, I did receive a few requests on it and this PR looks good to me. So I made a branch \"ios9\" and would you like to change the base to that branch? So as long as the UIGraphicsImageRenderer not being added, everyone has a chance to use that branch if they are still in iOS 9.\nThanks!. (And please also check the compiling error...although it is in test target.). These changes should be already in the ios9 branch. I am closing it now.. Thanks for opening this.\nDuplicated to #1064 \nIt is a side effect, that kf now is a struct instead of a class value for better performance. So setting it requires the host (image view) a mutable variable. It is more a Swift language restriction instead of an intentional way. But you are right, we should make it clearer in the migration guide. I will add it soon.\n. Done https://github.com/onevcat/Kingfisher/wiki/Kingfisher-5.0-Migration-Guide/_compare/dc79c07790a1c37a1552d702f134d7f5cda8ee60...20633eee6a130935da4581ccb977c170a6052f5d. This is a performance consideration. struct would be much faster than class.\nKingfisher does not consider the usage in Objective-C. If you want to use it in Objective-C, I suggest you could write your own wrapper. Can you give me some example of your use case and information? So maybe I can give some more suggestion.. If you are developing an app, you could just choose the latter. \nThe main reason Kingfisher chose a kf compatible wrapper, is that as a library (instead of the final app), there might be name conflicting when extending a class from Foundation or UIKit.\nIn your particular example, you can define the completionLoop in an internal Timer extension, instead of defining it to Test. Then you should be able to use @objc and target-action pattern. I didn't try myself, but something like this:\n``swift\nextension Test where Base: Timer {\n    static func scheduledTimer (timeInterval: TimeInterval,\n                                   repeats: Bool,\n                                   completion:@escaping ((_ timer:Timer)->())) -> Timer{\n        return Timer.scheduledTimer(timeInterval: timeInterval,\n                                    target: base, // Usebaseinstead ofself`\n                                    selector: #selector(completionLoop(timer:)),\n                                    userInfo: completion, repeats: repeats)\n    }\n}\nextension Timer {  \n    @objc static func completionLoop(timer:Timer) {\n        guard let completion = timer.userInfo as? ((Timer) -> ()) else {\n            return\n        }\n        completion(timer)\n    }\n}\n```. It could be an improvement and I will try to add it later.. Not sure what the Kingfisher version you are using. I suggest you use the latest version 5 if possible. In the new version, we improved a lot on performance on both memory usage and loading speed.\nFor some more advanced performance tips, please read our wiki to know some best practice when using Kingfisher. . What's the version of Kingfisher you are using? And what kind of images (how many of them, average size in pixel, etc)\nFor most cases, the image decoding should not be an issue and you just need to use Kingfisher's image view extension method to set the images.\nThe images would be always cached as they were, if possible. For unknown format images, PNG will be used for most compatibility. But I guess this is not related to your issue.. Great to hear that.\nFor GIF, no. Background decoding on GIFs is not supported now.. Thanks for reporting this. I'd investigate it soon.. @robertmryan \nI guess it should be fixed in #1089 \nCan you try to confirm it in your environment? Thank you!. Yes, as @Boxleitner pointed out, you can solve it by just removing unused parameters.\nThis is also described in our migration guide here:\nhttps://github.com/onevcat/Kingfisher/wiki/Kingfisher-5.0-Migration-Guide#result-based-api-callback. It looks like a memory issue since I noticed that you only have \"RAM Free: 5.9%\" in the log.\nAre you trying to load some huge images? Maybe it worth to try to downsample the images. See this tip for more.. @dstranz Thanks for the information.\nNot quite sure about what happened, and I cannot reproduce the crash in any of the demo scenes in this repo with prefetching.\nThey are actually different crash information. But according to one of them, which indicates \"Incorrect checksum for freed object 0x1034191a8: probably modified after being freed.\" I wonder whether it could be related to #1085 \nThere is a fix for that in #1089, can you try to see whether that branch fixes the problem?. Thanks for the feedback. \nCan I get a sample project in which I can reproduce it?. This needs to import AVFoundation and be only used in a very limited case. So I am afraid it is not a widely required feature for now.\nIn Kingfisher 5, it can be implemented with a customize ImageDataProvider very easily. Check this wiki page to know how to add your own data provider. Basically, you just need to add the logic above and call the data(handler:) with the image data.. There is no indicatorType on image view, it is on the kf extension of image view. So this would not work now:\nswift\nlet imageView = UIImageView()\nimageView.kf.indicatorType = .activity\nYou can just either make the image view mutable or the kf mutable:\n```swift\nvar i = imageView\ni.kf.indicatorType = .activity\nvar kf = imageView.kf\nkf.indicatorType = .activity\n```. There are already too many discussion on memory in Kingfisher. Please search it and you are likely to get your answer perfectly.\nhttps://github.com/onevcat/Kingfisher/issues?utf8=\u2713&q=is%3Aissue+is%3Aclosed+memory. I even didn't know this could work in version 4.x. The setImage with a URL was designed for networking, which uses a URLSession to make an HTTP request. This behavior is not changed in version 5, so I am not sure about the situation.\nHowever, in version 5, you can use the ImageDataProvider for loading an image from disk. See this wiki for more: https://github.com/onevcat/Kingfisher/wiki/Cheat-Sheet#image-from-local-file. I don't know how can it be related to Swift version.\nKingfisher 5 supports from iOS 10 as the deploy target, so please make sure that your app also uses iOS 10 or later as the iOS Deployment Target. If you are integrating Kingfisher through CocoaPods, it also worth to check the \"platform :ios\" setting in your Podfile. . Have no idea on this yet. :( \nMaybe try a clean/full clean for the derived folder, or restart your Xcode.\n. @aleene \nKingfisher 5 should support both Swift 4 and 4.2. How did you integrate Kingfisher to your project (CocoaPods or Carthage? And its version?)\nIs there any chance to give me a reproducible sample on this error? \nOr does it also happen in a new project?. @aleene @teolemon Kingfisher 5 now requires iOS 10 or later. So please try to confirm that your deploy target is above iOS 10. If you still need to support iOS 9 for a while, you can choose to use Kingfisher 4.x instead.. Now there is an \"ios9\" branch fo iOS 9 supporting temporarily before we migrate to image renderer. Please consider to use that branch when you need to use Kingfisher 5 on iOS 9.. Kingfisher is using pixel instead of point by default, since the images from Internet does not contain any information of scale. You can use scaleFactor in the option to specified a scale you need. . Oh, it seems that this option is not applied for the animated image view. I guess it worths to consider screen factor here.. Please let me know if https://github.com/onevcat/Kingfisher/pull/1096 works for you.. There is no response for a while. It seems to be working well for now,  so I decided to merge it.. I cannot reproduce your issue with the code snippet you posted. But according to the error message, it is possible that your doctorImageView is declared as UIImageView! and it is nil when you call setting image method on it.. @jranthm Did you find your issue? Can we close this now?. There is no response so I am closing it.. Hi, @jeffreylyg \nThanks for the PR. You are totally correct on the naming convention, the parameter path indeed should be a file path instead of an absolute string of a full file URL.\nHowever, this method exists for years. And the change in this PR would be a breaking change to the current code. Instead of changing its behavior internally, I prefer to mark this method as deprecated and create a new one with correct naming and behavior inside.\nHow do you think about it? Would you like to send another PR for this?. Related work was done in #1114 \nThanks for opening this PR but I am closing it now.. There is already a PR #1098 for Swift 5 support. We are waiting for CI support for Xcode 10.2 before we can merge it into master. If you need Swift 5 for now, please use the \"swift5.0\" branch instead.. Thanks for it but it should be already done in #1098 \nOnce we can find a CI for it, we'd merge it into master. Before that, you can just use that branch in Swift 5.0 beta.. Not sure what's going on here. According to the stack, it is a crash inside Foundation. Unless more information can be given, there is very little I can do with this issue.\nIf you encountered the same issue here, it is appreciated if you can post more detail information (like system versions, Kingfisher version and detail stack track).. Kingfisher relies on Accelerate framework to do fast blur processor. In an app target, Xcode could find these kinds of implicit dependencies automatically and link them when necessary. But in a test target, it seems that Xcode has some issues to find  implicit dependencies, so you need to add the Accelerate.framework to the linked binary section in build setting yourself manually.. @gal-orlanczyk \nAnd for your special case, I guess you can choose your app as the Host Application in \"General\" tab in the test target setting. If you have worked correctly with the dependencies and framework copying things, the frameworks would also be found and loaded correctly for the test targets. In the case of that you are not quite familiar with dynamic library loading rules, it would be the fastest way to solve the issue. . LGTM!. Thanks for reporting this. I will check it as soon as I can.. Should be fixed by making all prefetcher use the same queue.. 5.1.1 was released.. These race condition should be fixed for ImagePrefetcher in  https://github.com/onevcat/Kingfisher/commit/4903511a4e23015de2fab6a80326887c66e8439a . Please search for the existing (closed) issue for this topic and know the reason that we do not support iOS 9.\nTemporarily, there is an \"ios9\" branch now, you can use that for iOS 9 support before we migrate to new image renderer system. https://github.com/onevcat/Kingfisher/tree/ios9. Hi,\nThanks for the PR. There is already a PR https://github.com/onevcat/Kingfisher/pull/1098/ and branch for it. We will merge it when Xcode 10.2 officially released. Before that, you can use the \"swift5.0\" branch to use Kingfisher in Xcode beta version.. @tprevost-phunware \nNo, it is not. It is due to the new compiler shipped in Xcode 10.2 has a more strict language model when handling mutating for a variable like this.\nI am not sure what is your concern to just use the \"swift5.0\" branch (there also contains some modification for warnings in Xcode 10.2, and this PR should be just a subset of #1098 )? \nDoes that branch work for Xcode 10.2 or not?. Your code looks fine to me.\nIs there any error happens during downloading or caching? For example, you can try to print the result in these places:\n```swift\nself.iv_picture.kf.setImage(with: url) { result in\n    print(result)\n   // ...\n        ImageCache.default.store(valueImg.image, forKey: picture) {result in\n            print(result.diskCacheResult)\n        }\n}\n```. Hi, @patrikdevlin \nI am not sure is it only in your code snippet here. But you are using urlString as the cache key, while using \"cacheKey\" to retrieve, so it might be a problem. \nYou said you can go to the switch statement, so cache.isCached(forKey: urlString) succeeded. It should be in either memory or disk cache.\nCan you confirm that you are trying to get and set the cache with the same key?\nIn fact we have unit test for both memory cache and disk cache, it is not likely it fails.. @patrikdevlin \nYes, create your own ImageDataProvider like this:\n```swift\nstruct VideoThumbnailImageProvider: ImageDataProvider {\nenum ProviderError: Error {\n    case convertingFailed(CGImage)\n}\n\nlet url: URL\nlet size: CGSize\n\nvar cacheKey: String { return \"\\(url.absoluteString)_\\(size)\" }\nfunc data(handler: @escaping (Result<Data, Error>) -> Void) {\n\n    DispatchQueue.global(qos: .userInitiated).async {\n        let asset = AVAsset(url: self.url)\n        let assetImgGenerate = AVAssetImageGenerator(asset: asset)\n        assetImgGenerate.appliesPreferredTrackTransform = true\n        assetImgGenerate.maximumSize = self.size\n        let time = CMTime(seconds: 1, preferredTimescale: 10)\n        do {\n            let img = try assetImgGenerate.copyCGImage(at: time, actualTime: nil)\n            if let data = UIImage(cgImage: img).jpegData(compressionQuality: 0.8) {\n                handler(.success(data))\n            } else {\n                handler(.failure(ProviderError.convertingFailed(img)))\n            }\n        } catch {\n            handler(.failure(error))\n        }\n    }\n}\n\n}\n```\nAnd then you can set the image:\nswift\nlet p = VideoThumbnailImageProvider(\n            url: URL(string: \"abc\")!,\n            size: CGSize(width: 100, height: 100))\nimageView.kf.setImage(with: p)\nBe careful that size is also a part of the cacheKey in the code snippet above, so if the size is different, the thumbnail will be fetched again and stored.\nYou can read the wiki on ImageDataProvider to know more about it.. (I guess it is what you need. If you only need a raw image setting, check the RawImageDataProvider instead.). Can you try to print and check what error is it in the setting completion handler?\nYou link is a non-HTTPS one and I guess you need to change you ATS (app transport security) settings to load it.. Hi,\nMay I know what's your version? There are some fixes on the thread recently in the latest release. Could you try the latest version to see whether it is still there? Thanks!. Do you have a chance to try this branch fix/locks?. Yes, will do it later.. Hi, @ChristopherRogers \nThanks for it. \nBut there is already a branch \"swift5.0\" as well as a related PR https://github.com/onevcat/Kingfisher/pull/1098 for it. I guess it is ready to be merged and released soon (with some other fixes). Before that, you can try that branch instead to use Kingfisher in Xcode 10.2.. retrieveImageInDiskCache should do nothing or lock with SessionDelegate. So I guess there is another reason. Did you try the latest 5.2.0? There we have fixed a deadlock in the session delegate. . The reason that the \"image.kf.scaled\" method gets called is Kingfisher failed to find the exact cached image in the cache. It might be due to that you have a different bound size when showing the image again. Kingfisher's DownsamplingImageProcessor also use the input size as a cache identifier. So if you provide different size later, Kingfisher would think that it is another version requested. Then, luckily, Kingfisher knows that the original image is already cached (the .cacheOriginalImage option), it can just load the cached original image and then do a downsampling operation.\nHowever, the current implementation for downsampling a cached original image is just reverting to a resizing. I guess it should not be a limitation here (which also causes a performance regression when downsampling from a disk image). I will try to give a fix for it soon.. The original image will never be sent to memory. It is a disk only cache.\nConverting between data and image is not that performance critical, as long as we do not render it. However, the kf.resize would decompress the full original image and render it to a smaller size, which is a memory critical operation. The main purpose of DownsamplingImageProcessor is to solve the high memory pressure when loading large images, so I believe it worths to avoid using resize at all.\nIt is not ideal to convert the image to data again. It is more a design limitation in the cache serializer system of Kingfisher. A possible workaround for it is that we can make some special handling to not use default cache serializer when encountering a DownsamplingImageProcessor. But I didn't find an elegant way to do it now. I will consider twice later when I have more time for it.. Can you let me know the url of that image? Or upload the original image somewhere so I can have a test. Thanks!. Thanks for the PR. But I don't understand what is the difference between this value and the .forceRefresh option?. Oh, I see it.\nI guess this addition makes the behavior not stable anymore. For these reasons:\n\nThe completion handler will be called twice, which is not expected actually. One invocation should correspond one and only one completion callback. The additional option logic here makes confusing on this convention and introduces a different pattern. It might be very hard to track and maintain later. There might be also some end users logic replies on the fact that the completion handler would be called once, it also breaks these kinds of size effect code.\nAs the image changed behind the same URL, end users may always want the latest image. I cannot see a good example of the use case for this option. A flickering of the image from a previous version to a newer version may also be thought as an implementation bug.\nI guess the same behavior can be implemented easily by nesting two setting image methods, like this:\n    swift\n    imageView.kf.setImage(with: url) { result in\n        imageView.kf.setImage(with: url, placeholder: result.value?.image, options: [.forceRefresh])\n    }\nThis might be clearer to describe what is going on.\n\nWhat do you think about it?. Are you using any ImageProcessor? May I know some code snippet when you setting your image views?. Good to hear that you found it! Never mind. :]. You could use an ImageDataProvider. More specifically, a RawImageDataProvider should be fine.. Have no idea about this. Maybe you can try to clean the DerivedData folder as well as Carthage cache. :(\nThe blog was down due to some DDoS attack. Now it should be up.. Kingfisher should support response from either GET or POST, as long as you are returning the correct image data.\nThe error indicates that the result is discarded because you are trying to load another image for the image view. So Kingfisher will respect the latter setting and ignore the result from the first setImage. Is that your case, of any idea on this?. That means your request is not correct and your server returns you an error. : (\nI suggest you try to observe the request with a proxy or on your server, to make sure it is what you expected. Kingfisher would just send the request you give, regardless it is a GET or a POST, and parse the response data to the image.. @GarthSnyder Making the nonmutating seems crashing the tests with EXC_BAD_ACCESS on Xcode 10.1 when setting the kf properties. So I don't think we should merge it before we can fully understand why. (It's going well on Xcode 10.2, so it might be a bug in Swift 4 compiler?)\nNow you can always assign kf to a var to use it. For your example, try:\nswift\nclass TestView: UIImageView {\n    func setUp() {\n        var kf = self.kf\n        kf.indicatorType = .activity\n    }\n}. Hi, @GarthSnyder \nThanks for updating it. I am so sorry that I didn't explain it clearly.\nYes, you are right on the git history. The change to make it only struct compatible was made in Kingfisher 5. The main purpose was for performance.\nThis compatible helper type (kf) was once split into two kinds, one for class and another for struct. For class base members (like UIImage), it was using the class version; while for struct (CGSize, etc.), the struct version. \nHowever, the getter of KingfisherCompatible.kf is trying to create a new instance of KingfisherWrapper every time when it is called. When it is a class, heap allocating will happen and it would create quite a few \"temporary\" objects during a simple image setting call. Making KingfisherWrapper a struct prevents it, because creating a struct only happens in the stack, which makes it faster. So it is an intended change in Kingfisher 5, with some minor inconvenience as price when setting in a nonmutating context.\nAs you pointed out, nonmutating would be the best solution for it, since it actually not mutates anything. But since we still want to support Xcode 10.1 for a while, I guess we'd better just leave it as is now.\n. Oh, that looks great!. Thank you for it!. @vfn Sure. I guess I will improve this p-r later since there is no response from @alexliubj \n. I guess we could just simplify the API from an optional completionHandler to a non-option one. There would be meaningless if no callback supplied. Since that, we could get rid of the optional chaining here. Would you please file another commit for it? Thanks!\n. If the main queue is passed in as argument, the following NSThread.isMainThread() statement will never executed, which may cause a flickering.\n. Although it could be useful and a quick way to check an image cached or not, I don't think it's a good idea to have a method for it here. \nI believe it should only in the ImageCache. Furthermore, since cache of KingfisherManager could be set by the users, it is not clear and might be confusing which cache is used for the checking.\nGenerally speaking, I cannot agree to add this here. We could use the same methods in ImageCache directly. Would you mind to remove this before this p-r could be merged?\n. The C style loop will be deprecated and removed in a later Swift version. So we would better to rewrite it in a Swift way.\n. The cancel logic contains some gutter here. Consider about the situation that you call prefetchURLs before the previous prefetchURLs download finishing.\nBecause there is no cancelling now for the download process, there is a chance that the completionHandler of downloadAndCacheImageWithURL for previous fetch is called wrongly and finishedCount gets added by mistake.\n. To follow Swift 2 API guideline, please use upper case for enum member here.\n. It's intended to have only negative number for \"forever\". 0 means expiring immediately. And since there is a default non-zero value here, it is better to opt out 0 so we could avoid to introduce misunderstanding.. This will change ImageProcessor to be UIKit-only. We may want to keep it working on macOS too. So I suggest to not introducing UIViewContentMode here. We need to do change the resize(to size: CGSize, for contentMode: UIViewContentMode) implantation a bit too.. identifier is used to identify the post-processed images in cache, so we need to keep the identifier the same for .none case.. Not bad to me.. We could refactor this if necessary later. Let's make the tests green first.. Sorry for the original bad code, but FileManager.DirectoryEnumerationOptions.skipsHiddenFiles could be simplified to .skipsHiddenFiles.. Yes you are definitely right! Thanks for pointing it out.. Maybe we could just return preloadAllAnimationData?. Since it is an internal API, we could just remove it instead of marking it as deprecated.. Could you move the deprecated statements to an extra extension at the end of this file (like what is done here)?. It should be fine to have this static property in an extension (as long as the extension is public, it should also supply good back compatibility).. Here you are using a static property to \"simulate\" the syntax of an enum case:\nswift\n@available(*, deprecated, renamed: \"preloadAllAnimation\")\nstatic let preloadAllGIFData = KingfisherOptionsInfoItem.preloadAllAnimationData\nSo it is possible to move it to extension (it is not an enum member anymore). Sure you could keep it as an enum member (in which case you cannot move it to an extension), but I think it is a clever way to make it a static property here.\nIn there, this should also compile:\nswift\npublic extension KingfisherOptionsInfoItem {\n    @available(*, deprecated, renamed: \"preloadAllAnimation\")\n    static let preloadAllGIFData = KingfisherOptionsInfoItem.preloadAllAnimationData\n}\nAnd users could get a rename warning if it is used.. This should return a Bool with implementation like this:\nswift\n@available(*, deprecated, renamed: \"preloadAllAnimation\")\npublic var preloadAllGIFData: Bool {\n    return preloadAllAnimationData\n}. @teameh \nBy extension View: Placeholder {...}, you will make ALL subclasses of UIView to be a Placeholder. It could be too wide. While by using extension Placeholder where Self: View, only those ones declared as extension MyView: Placeholder {} could be used as a placeholder. \nI would prefer to keep it minimal, and let users to specify the conformance only when necessary.\n. Maybe we should just return the original data instead of nil? Any reason to return a nil here?. XD. Could you also refactor the code in init to use this as well? Now they are seemly a bit duplicated.. Please use a guard instead of if let when getting task failing. It would make code path clearer.. And instead of callbacks.first, maybe it is better to use a \"last dominate\" way, to let the last input callback to determine which redirectHandler should be used. . Please also contain other parameters, like task and response to provide a more compatible function signature. I suggest handleHTTPRedirection(for task: SessionDataTask, response: HTTPURLResponse, newRequest: URLRequest, completionHandler: @escaping (URLRequest?) -> Void) would be better. It follows the URLSessionDelegate to give more context to user and make an async request modification possible.. ",
    "alexdd55": "no problem, you fixed that already in \"retriveImageInMemoryCaheForKey\" ;)\ngood job :)\n. Version is missing ;)\n. thanks for the quick answer. :)\n. you right, keep that open :)\nthis is not a showstopper, it would just be very comfortable ;)\n. nice! :+1: \n. what can i say? Awesome Job! :+1: \nI might test it over the weekend.\nGreat work! \n. when i start the app it took about 5 secs to start downloading after everything else is shown.\ni experienced longer time yesterday.\nwhen i scroll this doesn't seem to happen, there is no delay on downloading. \nhere is what i do.. maybe the problem is on my side ;)\nif self.kfmanager.cache.isImageCachedForKey(screenname).cached {\n            cell.avatar?.image = self.kfmanager.cache.retrieveImageInDiskCacheForKey(screenname)\n        } else {\n            self.kfmanager.retrieveImageWithURL(avaImgUrl, options: nil, progressBlock: {\n                (receivedSize, totalSize) -> () in\n                println(receivedSize)\n                }, completionHandler: {\n                    (image, error, imageURL) -> () in\n                    cell.avatar?.image = image\n                    self.kfmanager.cache.storeImage(image!, forKey: screenname)\n            })\n        }\n. Thanks for the hint. Removing the double check, made things (of course) quicker. :+1: \nFunny is, that after opening the app, the first unloaded image still takes around 5-7 seconds (last two test). after that everything is great. images get loaded instantly.\ni will keep an eye on it, \nit seems that i might be the only one having this issue, maybe i do something wrong sowmwhere in my code that delays the inital call on the script...?! \n. let me just mention, that this is great work. thank you. :)\n. +1\n. :+1: \n. Is it possible that you are not setting the image view to nil if no pic is available?\n. Set your imageview = Nil at the beginning - then your code - else it will reuse the tablecell and the image will be reused, too.\nI hope this will do the trick\n. ",
    "mrahmiao": "Do you mean that self.fileManager may be used when initializing an instance of ImageCache?\n. ",
    "jerometonnelier": "Sure,here it is. Thx.\npod 'Reachability'\npod 'KVNProgress'\npod 'AcknowledgementsBundle'\npod 'JDStatusBarNotification'\npod 'HACLocationManager'\npod 'SWBufferedToast'\npod 'BBBadgeBarButtonItem'\npod 'Onboard'\npod 'IAPHelper'\npod 'NYTPhotoViewer'\npod 'FSDDropdownPicker'\npod 'DMRNotificationView'\n. Hi,\nI'm using 0.35 indeed,but I can't upgrade to the latest since a whole team uses cocoa pods :-/\nThanks anyway ;)\n. ",
    "sealedace": "CocoaPods supports Swift framework from 0.36. That helped me!\n. ",
    "ammerzon": "Thanks for your quick solution. I really appreciate your work and motivation.\n. ",
    "NBoymanns": "@onevcat I used you're solution for basic Auth:\nKingfisherManager.sharedManager.downloader.requestModifier = {\n        (request: NSMutableURLRequest) in\n        // Do what you need to modify the download request.\n}\nCan you tell me how to do this with the new Kingfisher 3.0 :)?\n. ",
    "AvdLee": "Thanks, clear answer. Will mark this project to use in the next iOS 8 only project.\n. I'm currently investigating this, but I am seeing this again. Especially when opening and closing my app very fast multiple times. It seems to be related to the backgroundTask running cleanExpiredDiskCacheWithCompletionHander. I'll dive into this right now\n. Update:\nNevermind, this commit fixed it: https://github.com/onevcat/Kingfisher/commit/ae2789fcc136034549d71ee94ab42415fdf9eefd#diff-7cdf8106380eb2d5b68719cb46ac25cf\nI was on version 2.3.1, 2.4.1 doesn't have this issue anymore. \n. ",
    "szuniverse": "Nice! thanks!\n. Thanks! its very useful! thanks again\n. Okey, it would be great the self-signed cerf support! I am waiting...\nI dont know whats wrong with my environment because everything looks good..\n. you are awesome! thanks!\n. Okey, yes you're right. Thanks+\n. ",
    "thihaaung6245": "I really love this library which can download image faster than my old code.\nFirst of all thanks to the one who created this library,Thank you,Sir.\nMy car images from tableview stop downloading or not appear when i finished showing the results of 150 so,car total images will be 150..i dont know why.My car images stop showing after 150 results.I have a table view which show car images and records per table cell.Here is my code,any help?\nhttp://puu.sh/ibQrT/38f9c92f75.png\nMay be because of the cache?\nHelp...\n. \"&w=150\" means i download the photo that are come with width=150,so it will be lower size.\n. Thank you.Sir...I will be glad to wait your reply. \n. Thank you,Sir...I am really appreciated your help.Thank You So Much for your help.I gonna apply in my project now.Thank in advance.\n. I have tried the above instruction like you described.But images that downloaded are not show in scrollview.I dont know what is going with me.Everytime that i enter to that view(detailview) again,images are downloaded and duplicated.Any help please?\nhttp://puu.sh/ii1DT/4ab21c4be2.png\nyou will see detailData which also got from json parsing api.\nI also added this scrollview in viewDidAppear().Please check.\nhttp://puu.sh/ii1HJ/3d2c24f7cd.png\nAny help please,I am new to async programming,scrollview and swift.\nThank you.\n. yes sir,Thanks for your answer\n. ",
    "leizard": "And the same effect could be implemented by extending the framework with simple UIAnimation.\n@onevcat , @szuniverse , I'm interested and not clear about what you said and how to implement animation when download image. Is there any way I could check if image is cached and not set animation in that case ?\n. I'm sorry I didn't read the Readme carefully. This is how I implement the animation:\n```\n        imageView.kf_setImageWithURL(url,\n                                     placeholderImage: nil,\n                                     optionsInfo: nil,\n                                     progressBlock: { (receivedSize, totalSize) -> () in\n                                        print(\"Download Progress: (receivedSize)/(totalSize)\")\n                                        imageView.alpha = 0\n        },\n                                 completionHandler: { (image, error, cacheType, imageURL) -> () in\n                                    UIView.animateWithDuration(2, animations: { imageView.alpha = 1 })\n                                    print(\"Downloaded and set!\")\n        }\n\n```\nHope I was right \ud83d\ude03 \n. ",
    "aemreunal": "Superb, thank you very much.\n. ",
    "rainypixels": "@onevcat Apologies! I've been heads down working on my code, so I just saw this. \nFirst off, thanks for looking into this feature request so quickly! Much appreciated. \nAs I understand it (from your latest check-in and the wiki), you've modified Kingfisher to support downloading and caching, but its up to the framework users to manage caching/storing eTags, and passing them along to the server whenever necessary. Your wiki is very clear, and the solution you're proposing is elegant. Let me address your question:\n\nPlease let me know if it works for you or not.\n\nI have a few concerns:\n1. I know you used NSUserDefaults for illustrative purposes. As you can imagine, in production users will have to roll their own NSCache implementation (or something similar) to store eTags. This is not a huge amount of overhead, but it does add some complexity. Some users will be OK with that, but my hunch is that the kind of user who would adopt your library is looking for a turnkey image download and caching solution, and this may be a bit of a deal-breaker for that user. \n2. I'm worried that the user implementation to intercept requests and responses is going to be prone to breaking over time as you update your framework because of the number of points of contact. Effectively, anyone who wants to support 304-Not-Modified responses is modifying core functionality of Kingfisher, e.g. modifying all requests through KingfisherManager.sharedManager.downloader.requestModifier. I think you anticipate this risk as well because your wiki starts with: This wiki page is wrote on 30 Apr, 2015, for Kingfisher 1.3.0. I hope I can remember to update it if something changes later. :-)\n3. Finally, I noticed that your implementation to support 304's classifies NotModified as an error. The 3xx class of status codes are redirection codes (only 4xx and 5xx are errors). From a framework perspective, I would be far more comfortable seeing a 304 reflected as what it is: a redirection code. This may seem like a tiny implementation detail, but I think it informs the architecture of the framework and its future extensibility (e.g. when other use cases come along in the 3xx class). In the near term, we can already see the effect it has had on the current implementation to handle 304's. \nFinally: will this work for me? Honestly, I'm not entirely sure yet. I'm very careful about the dependencies I take, and the above issues are legitimate concerns for me. For instance, I am definitely in the group seeking a turnkey solution that doesn't even have to worry about managing a cache. But, again, it's too early for me to tell. Fortunately, I'm probably 6-8 weeks from having to worry about an image download/caching solution, so I don't have to make the decision now.\nAll that said, I truly appreciate your response and the effort (both for the check-in and the wiki)! I'll continue watching this space. :-)\n. Makes sense on all fronts. I shall continue noodling on this in the meantime. I may have the need to take a generic caching solution dependency in any case, so I might just end up rolling with Kingfisher because I solidly support this sentiment:\n\nThe core idea when implementing Kingfisher is keeping it simple for simple use case\n\nMaybe I'll even end up forking and sending you a pull request for a turnkey solution. I should know where I stand in time. \nThanks, again! \n. ",
    "BhavinBhadani": "this fromMemoryCacheOrRefresh not work for me .. still give me first cache image even if its changed. customize cache key??? how? If same url is there I got always the old one except new one.. any simple solution without force refresh?. so I have a collectionview and image in every cell .. so I need to make cache key for image to check if its there or not but how do I know that same url cached and need to remove from cache and send a new one .. sorry but too much confused with this functionality. And how do I know that both url is same but image is different on a same view after refresh collection or table view?. @Panajev right .. this process is complicated .. better to have a single line of code or option that can make the difference.. Lots of threads and issue regarding this anyway . ",
    "yonaskolb": "Ok, I've separated out the ImageDownloadCompletionHandler without the cacheType, and made a PR to 1.2.1\n. Any updates on this?\n. Having this issue too\n. setting this to 0 should have the same effect as negative. <= 0. ",
    "alenofx": "Thank you, it's fixed.\n. ",
    "hablema": "Thanks. Hope you would update it soon. Waiting for it.\n. No probs... Will wait..! :)\n. ",
    "morizotter": ":eyes: \n. ",
    "kenshincui": "\u5e0c\u671b\u5c3d\u5feb\u589e\u52a0webp\u683c\u5f0f\u652f\u6301\uff01\n. +1\n. ",
    "susieyy": "+1\n. ",
    "arden": "+1 for this\uff0ci'm hope add webp support quickly.\n. https://github.com/seanooi/iOS-WebP\n. ",
    "bauloc": "I'm hope WEBP available quickly \ud83d\udc6f \n. ",
    "skerkewitz": "@hablema \nHad the same issue. Seems like a bug in WebPImageSerialization. This little change solved the problem for me:\nhttps://github.com/mattt/WebPImageSerialization/pull/12/commits\n. ",
    "tomquist": "I can confirm that this has been fixed by 1.4.1. Thank you very much!\n. ",
    "matrpedreira": "The problem was on my end. Great api, sorry for that.\n. ",
    "Pe-te": "We can work around it then and send the current maxCachePeriodInSecond from the server. Just thought you might be working on the header thing. ;) Thanks for the information and for the great library!\n. ",
    "katopz": "I'm using swift-2.0 branch with Xcode 7.0 beta (7A120f) and it working fine,\nbut not Xcode 7.0 beta (7A121l) which just release tho.\nI'm now switching back as workaround while wait.\n. Aw, now I know what going on, my Podfile need to be change from swift-2 to swift-2.0\n\nIt's working now, Thanks\n. ",
    "alexliubj": "Updated code, please help me check again.\n. So by default 'cache' works???\n. [!] Unable to satisfy the following requirements:\n- Kingfisher (~> 1.6) required by Podfile\n. Is 1.5 supporting swift 2.0? Coz I found you deleted that branch.\n. Thank, Awesome!\n. lol\n. Let me check it ASAP. Sorry for replying to late, I was super busy last week.\n. ",
    "vfn": "The addition of an activity indicator would need to allow the user to define what activity indicator to use. I believe it's easier to create and add the activity indicator yourself before making the request and then remove it once the download finishes.\nLeaving it out of the library, makes the code simple and cleaner.\n. @onevcat let me know if you need anything to be changed on this PR\n. No problems!\nI'm looking forward to the new version\n. That's part of the Foundation framework. CFNetwork shouldn't be required.\nhttps://developer.apple.com/library/ios/documentation/Foundation/Reference/NSURLSessionTask_class/index.html#//apple_ref/occ/cl/NSURLSessionTask\nHave you tried to clear/deleted the DerivedData folder at ~/Library/Developer/Xcode/DerivedData?\n. Indicator can be a constant. I would also remove the _ prefix as it doesn't match the current coding style. Any thoughts @onevcat \nswift\nlet indicator = UIActivityIndicatorView(activityIndicatorStyle:.Gray)\n. Indicator should not be created twice. I believe you only won't to create it inside the if below\n. Curly brackets should be in the same line as the if, to follow the same coding style.\n. if showIndicatorWhenLoading { should be enough\n. swift\nindicator.autoresizingMask = .FlexibleLeftMargin | .FlexibleRightMargin | .FlexibleBottomMargin | .FlexibleTopMargin\n. Why don't you add the activity indicator flag as a boolean option that's part of KingfisherOptionsInfo\n. This will be set globally to all UIImageView. Meaning that if you set it to true to 1 UIImage, It will be true to all the other instances. One more reason to have the the activity indicator as a item in the options. \n. ",
    "schickling": "This would be a huge improvement! :+1: \n. Also is there a reason for just toggling between NSURLSessionTaskPriorityLow and NSURLSessionTaskPriorityDefault? The priority parameter is a float ranging from 0 to 1. This flexibility shouldn't be hidden.\n. \n. Really looking forward to this improvement!\n. Nice! Can't wait until it gets released!\n. Great!\n. Wow. That was fast @onevcat!\nThanks mate! :+1: \n. I'm sorry @onevcat. Turns out it was a problem on my end. Closing this...\n. ",
    "ejoebstl": "Yes, I a agree. That feature would be very useful. \n. ",
    "cloud-hot": "After i add the CFNetwork it still posted the error:\ndyld: Symbol not found: _NSURLSessionTaskPriorityDefault\n  Referenced from: /private/var/mobile/Containers/Bundle/Application/104DD702-07C1-45B7-951D-C79956818E5F/USA-Baby.app/Frameworks/Kingfisher.framework/Kingfisher\n  Expected in: /System/Library/Frameworks/Foundation.framework/Foundation\n. And i am using the Cocoapods to install the kingfisher\n. I have solved it. The above stack overflow link suggested that \"Make sure the Foundation framework include is before CFNetwork\" but this does not work for me. Instead i must put the Foundation framework after CFNetwork. I do not understand why.\n. ",
    "kukushi": "I'm still seeing the error in beta 5.\n. Same issue here (Kingfisher 5.1.0).\n```\n10. Crashed: NSOperationQueue 0x282bd8680 (QOS: UNSPECIFIED)\n0  libobjc.A.dylib                0x1a7739428 objc_retain + 8\n1  libswiftFoundation.dylib       0x106241f4c (Missing)\n2  libswiftFoundation.dylib       0x10624f6e4 (Missing)\n3  libswiftFoundation.dylib       0x10624f844 (Missing)\n4  libswiftFoundation.dylib       0x106180d44 (Missing)\n5  libswiftFoundation.dylib       0x10624bfec (Missing)\n6  libswiftFoundation.dylib       0x10624bf68 (Missing)\n7  libswiftFoundation.dylib       0x10617e698 (Missing)\n8  Foundation                     0x1a912f69c 49-[NSDispatchData enumerateByteRangesUsingBlock:]_block_invoke + 44\n9  Foundation                     0x1a8f33a18 -[_NSDispatchData enumerateByteRangesUsingBlock:] + 68\n10 libswiftFoundation.dylib       0x1061860d4 (Missing)\n11 Kingfisher                     0x105611394 specialized SessionDelegate.urlSession(:dataTask:didReceive:) (SessionDelegate.swift:169)\n12 Kingfisher                     0x10560ef30 @objc SessionDelegate.urlSession(_:dataTask:didReceive:) ()\n13 CFNetwork                      0x1a8cecb94 __67-[NSURLSession delegate_dataTask:didReceiveData:completionHandler:]_block_invoke.303 + 36\n14 Foundation                     0x1a8fe08bc __NSBLOCKOPERATION_IS_CALLING_OUT_TO_A_BLOCK + 16\n15 Foundation                     0x1a8ee8ab8 -[NSBlockOperation main] + 72\n16 Foundation                     0x1a8ee7f8c -[__NSOperationInternal _start:] + 740\n17 Foundation                     0x1a8fe2790 __NSOQSchedule_f + 272\n18 libdispatch.dylib              0x1a7f896c8 _dispatch_call_block_and_release + 24\n19 libdispatch.dylib              0x1a7f8a484 _dispatch_client_callout + 16\n20 libdispatch.dylib              0x1a7f60e04 _dispatch_continuation_pop$VARIANT$armv81 + 404\n21 libdispatch.dylib              0x1a7f604e8 _dispatch_async_redirect_invoke + 592\n22 libdispatch.dylib              0x1a7f6caec _dispatch_root_queue_drain + 344\n23 libdispatch.dylib              0x1a7f6d34c _dispatch_worker_thread2 + 116\n24 libsystem_pthread.dylib        0x1a816d17c _pthread_wqthread + 472\n25 libsystem_pthread.dylib        0x1a816fcec start_wqthread + 4\n. #1122 fix the dead lock, but this issue is actually a crash.. Each prefetcher instance runs on an independent serial queue, while they are using the same image downloader. When downloading images, the downloader concurrently overwrites the same task's `onTaskDone` delegate's `block`, which cause a double free issue.. Will the new version release in coming days?. Some Other related stack traces:\nCrashed: com.onevcat.Kingfisher.ImageDownloader.Process\n0  libobjc.A.dylib                0x1ba126b00 objc_object::release() + 16\n1  libswiftCore.dylib             0x101a1fecc swift_arrayDestroy + 68\n2  Kingfisher                     0x1011056f0 specialized VariantDictionaryBuffer.nativeDelete(:idealBucket:offset:) ()\n3  Kingfisher                     0x101105664 specialized VariantDictionaryBuffer.nativeRemoveObject(forKey:) ()\n4  Kingfisher                     0x101103a88 closure #1 in ImagePrefetcher.downloadAndCache(:) ()\n5  Kingfisher                     0x101118b78 cacheImage #1 (:) in KingfisherManager.loadAndCacheImage(source:options:progressBlock:completionHandler:) (KingfisherManager.swift:269)\n6  Kingfisher                     0x1010fdb04 partial apply for closure #1 in closure #4 in ImageDownloader.downloadImage(with:options:progressBlock:completionHandler:) ()\n7  Kingfisher                     0x1010fdb24 partial apply for thunk for @escaping @callee_guaranteed (@guaranteed ImageDownloader, @in_guaranteed Result) -> () ()\n8  Kingfisher                     0x1010fdb7c partial apply for specialized  ()\n9  Kingfisher                     0x1010fbe28 closure #2 in closure #1 in closure #5 in ImageDownloader.downloadImage(with:options:progressBlock:completionHandler:) (ImageDownloader.swift)\n10 Kingfisher                     0x1010cfd8c specialized CallbackQueue.execute(:) (:54)\n11 Kingfisher                     0x1010fbd90 closure #1 in closure #5 in ImageDownloader.downloadImage(with:options:progressBlock:completionHandler:) (ImageDownloader.swift:267)\n12 Kingfisher                     0x1010fe9d8 partial apply for thunk for @escaping @callee_guaranteed (@guaranteed ImageDownloader, @in_guaranteed Result, @in_guaranteed SessionDataTask.TaskCallback) -> () ()\n13 Kingfisher                     0x1010fea64 partial apply for specialized  ()\n14 Kingfisher                     0x1010f6034 ImageDataProcessor.doProcess() (ImageDataProcessor.swift)\n15 Kingfisher                     0x1010feae0 partial apply ()\n16 Kingfisher                     0x1010d3b84 partial apply for closure #2 in CallbackQueue.execute(_:) ()\n17 Kingfisher                     0x1010cc058 thunk for @escaping @callee_guaranteed () -> () ()\n18 libdispatch.dylib              0x1ba9756c8 _dispatch_call_block_and_release + 24\n19 libdispatch.dylib              0x1ba976484 _dispatch_client_callout + 16\n20 libdispatch.dylib              0x1ba950fa0 _dispatch_lane_serial_drain$VARIANT$armv81 + 548\n21 libdispatch.dylib              0x1ba951ae4 _dispatch_lane_invoke$VARIANT$armv81 + 412\n22 libdispatch.dylib              0x1ba959f04 _dispatch_workloop_worker_thread + 584\n23 libsystem_pthread.dylib        0x1bab590dc _pthread_wqthread + 312\n24 libsystem_pthread.dylib        0x1bab5bcec start_wqthread + 4\n```\nCrashed: com.onevcat.Kingfisher.ImageDownloader.Process\n0  libswiftCore.dylib             0x103543580 swift_unownedCheck + 76\n1  Kingfisher                     0x102b6baa4 closure #1 in ImagePrefetcher.downloadAndCache(_:) (Result.swift:55)\n2  Kingfisher                     0x102b6baa4 closure #1 in ImagePrefetcher.downloadAndCache(_:) (Result.swift:55)\n3  Kingfisher                     0x102b80b78 cacheImage #1 (_:) in KingfisherManager.loadAndCacheImage(source:options:progressBlock:completionHandler:) (KingfisherManager.swift:269)\n4  Kingfisher                     0x102b65b04 partial apply for closure #1 in closure #4 in ImageDownloader.downloadImage(with:options:progressBlock:completionHandler:) (<compiler-generated>)\n5  Kingfisher                     0x102b65b24 partial apply for thunk for @escaping @callee_guaranteed (@guaranteed ImageDownloader, @in_guaranteed Result<ImageLoadingResult, KingfisherError>) -> () (<compiler-generated>)\n6  Kingfisher                     0x102b65b7c partial apply for specialized  (<compiler-generated>)\n7  Kingfisher                     0x102b63e28 closure #2 in closure #1 in closure #5 in ImageDownloader.downloadImage(with:options:progressBlock:completionHandler:) (ImageDownloader.swift)\n8  Kingfisher                     0x102b37d8c specialized CallbackQueue.execute(_:) (<compiler-generated>:54)\n9  Kingfisher                     0x102b63d90 closure #1 in closure #5 in ImageDownloader.downloadImage(with:options:progressBlock:completionHandler:) (ImageDownloader.swift:267)\n10 Kingfisher                     0x102b669d8 partial apply for thunk for @escaping @callee_guaranteed (@guaranteed ImageDownloader, @in_guaranteed Result<UIImage, KingfisherError>, @in_guaranteed SessionDataTask.TaskCallback) -> () (<compiler-generated>)\n11 Kingfisher                     0x102b66a64 partial apply for specialized  (<compiler-generated>)\n12 Kingfisher                     0x102b5e034 ImageDataProcessor.doProcess() (ImageDataProcessor.swift)\n13 Kingfisher                     0x102b66ae0 partial apply (<compiler-generated>)\n14 Kingfisher                     0x102b3bb84 partial apply for closure #2 in CallbackQueue.execute(_:) (<compiler-generated>)\n15 Kingfisher                     0x102b34058 thunk for @escaping @callee_guaranteed () -> () (<compiler-generated>)\n16 libdispatch.dylib              0x18e9316c8 _dispatch_call_block_and_release + 24\n17 libdispatch.dylib              0x18e932484 _dispatch_client_callout + 16\n18 libdispatch.dylib              0x18e90cfa0 _dispatch_lane_serial_drain$VARIANT$armv81 + 548\n19 libdispatch.dylib              0x18e90dae4 _dispatch_lane_invoke$VARIANT$armv81 + 412\n20 libdispatch.dylib              0x18e915f04 _dispatch_workloop_worker_thread + 584\n21 libsystem_pthread.dylib        0x18eb150dc _pthread_wqthread + 312\n22 libsystem_pthread.dylib        0x18eb17cec start_wqthread + 4. ",
    "RuiAAPeres": "I am confirming this as well on Beta5.\n. @onevcat could this be re-open and accepted? \n. :100: Thanks! \n. Could this be merge, as it has the fix for the _NSURLSessionTaskPriorityDefault bug. \n. Thanks for the feedback @onevcat \n. > I think the key can be the URL's absolute string by default\n```\nstruct Resource {\n    let key : String\n    let url : NSURL\ninit(key: String, url: NSURL) {\n    self.key = key\n    self.url = url\n}\n\ninit(url: NSURL) {\n    self.init(key: url.absoluteString, url: url)\n}\n\n}\n``\n. After merging this work on master, can we also push it to branchswift-2.0`? Awesome work.\n. Awesome @onevcat \u2728\n. ",
    "lizhijun": "+1\n. ",
    "AbelSu131": "\uff1f\n. ",
    "huynhphan89": "+1\n. ",
    "yurijmi": "@onevcat written you an email about it yesterday.\n. Warning occurs while using this pod\npod 'Kingfisher', git: 'https://github.com/onevcat/Kingfisher.git'\nEverything's okay (gif does not work ;()\npod 'Kingfisher'\n. I looked at CocoaPods/CocoaPods#3200. It did't solve anything.\nThe most interesting fact is that I use 3 different pods from GitHub and the warning only occurs on Kingfisher\n. Also look at this:\nUmbrella for the APNGKit:\n\nUmbrella for the Kingfisher:\n\n. Fixed it. CocoaPods wants a Objective-C bridging header even if you don't use Objective-C in your project.\nMade a pull request #126 \n. Travis build failed due to broken tests. Not my fault :/\n. Implemented in #133 \n. This pull request is ready, but:\n- There's some issues regarding performance if user sets options for animated images on not animated ones.\n- There's an issue? then download for GIF with NoAnimation option is started and you queue another one without that option. The issue is that you get the non animated one on the last query and the first query is canceled. This is not really an issue for Kingfisher, but for implementation of some apps.\n- The tests needs to be updated\nThis is the list of the things that I can't fix by myself. Except the first one, I don't have to worry about it in my app but someone might.\n. I need to recode that since it's purpose not really clear. Basically this code is for handling caches if you don't want animated images. You can't save not animated GIFs to cache using \"vanilla\" approach.\n. :+1: \n. ",
    "KyoheiG3": "I tried.\n- create Project KingfisherTest.\n- change iOS Deployment Target as 8.0.\n- pod install and Run.\n```\nsource 'https://github.com/CocoaPods/Specs.git'\nplatform :ios, '8.0'\npod 'Kingfisher', :git => \"git@github.com:onevcat/Kingfisher.git\", :branch => \"swift-2.0\"\nuse_frameworks!\n```\nexception\ndyld: Library not loaded: @rpath/Pods.framework/Pods\n  Referenced from: /private/var/mobile/Containers/Bundle/Application/D0A34AA6-6031-48A9-B5F7-C8188E923D31/Kingfisher.app/Kingfisher\n  Reason: image not found\n- add copy files and Run\nhttp://stackoverflow.com/questions/29126835/swift-framework-depending-on-cocoa-pod\nexception\ndyld: Library not loaded: /System/Library/Frameworks/WatchKit.framework/WatchKit\n  Referenced from: /private/var/mobile/Containers/Bundle/Application/BF8E4896-95B3-4597-9DBA-0B6DA693ECC0/KingfisherTest.app/Frameworks/Kingfisher.framework/Kingfisher\n  Reason: image not found\niOS8.0 is not support WatchKit.\n- change Build Settings and Run\n\nI want resolution this issue...\nTARGETS > Kingfisher > Build Settings > Build Options > Enable Bitcode is No\nTARGETS > Pod-Kingfisher > Build Settings > Build Options > Enable Bitcode is No\ndyld: Symbol not found: _NSURLSessionTaskPriorityDefault\n  Referenced from: /private/var/mobile/Containers/Bundle/Application/F245CE80-E8B1-4179-A143-E8F9E7F58CD9/KingfisherTest.app/Frameworks/Kingfisher.framework/Kingfisher\n  Expected in: /System/Library/Frameworks/Foundation.framework/Foundation\n in /private/var/mobile/Containers/Bundle/Application/F245CE80-E8B1-4179-A143-E8F9E7F58CD9/KingfisherTest.app/Frameworks/Kingfisher.framework/Kingfisher\nMay be ios 9 issues.\n. ",
    "huipengo": "I said these methods didn't work\uff01I don't use pod!. ",
    "faccuo": "Ok! Yes it's working. Thanks!\n. ",
    "buginux": "\u6211\u521a\u521a\u6309\u7167\u60a8\u7684\u5efa\u8bae\u6d4b\u8bd5\u4e86\u51e0\u904d\uff0c\u73b0\u5728\u60c5\u51b5\u662f\u8fd9\u6837\u7684\uff1a\n- \u7b2c\u4e00\u6b21\u8fd0\u884c\u7a0b\u5e8f\u7684\u65f6\u5019\uff0c\u4f3c\u4e4e\u90fd\u4e0d\u4f1a\u8fdb\u884c\u56de\u6536\uff0c\u5185\u5b58\u4f1a\u4e00\u76f4\u589e\u52a0\u5230100M+\n- \u5728\u6211\u624b\u52a8\u89e6\u53d1 memory warning \u4e4b\u540e\uff0c\u5185\u5b58\u4f1a\u51cf\u5c11\u5230 40M \u5de6\u53f3\n- \u4e4b\u540e\u7684\u56de\u6536\u4e0d\u592a\u786e\u5b9a\uff0c\u6211\u8bd5\u9a8c\u8fc7\u597d\u591a\u6b21\uff0c\u6709\u65f6\u4f1a\u4fdd\u6301\u572840~50M\u4e4b\u95f4\uff0c\u6709\u65f6\u8fd8\u662f\u4f1a\u5f80\u4e0a\u6da8\u523080+\n\u4ee5\u4e0a\u7684\u6d4b\u8bd5\u90fd\u662f\u5728\u6a21\u62df\u5668\u4e2d\u8fdb\u884c\u7684\uff0c\u6ca1\u6709\u5728\u771f\u673a\u4e2d\u6d4b\u8bd5\u8fc7\u3002Xcode \u7248\u672c\u662f 6.3\u3002\n\u5982\u679c\u8981\u63d0\u4f9b\u6d4b\u8bd5\u7a0b\u5e8f\u7684\u8bdd\uff0c\u5e94\u8be5\u4ee5\u4f55\u79cd\u65b9\u6cd5\u63d0\u4f9b\u5462\u3002\n. OK\uff0c\u597d\u7684\uff0c\u90a3\u6211\u518d\u6d4b\u8bd5\u4e0b\uff0c\u5c3d\u91cf\u627e\u5230\u51fa\u95ee\u9898\u7684\u5730\u65b9\u3002\n. ",
    "lorrykiko": "\u6211\u4e5f\u9047\u5230\u8fd9\u4e2a\u95ee\u9898\u4e86\uff1d\u3002\uff1d\uff0c\u6709\u90ae\u4ef6\u4e48 \u6211\u53ef\u4ee5\u628a\u6211\u505a\u7684\u9879\u76ee\u53d1\u7ed9\u4f60\u770b\u770b\n. \u4e0d\u597d\u610f\u601d \u5468\u672b\u6ca1\u770b\u5230\u4f60\u7684\u56de\u590d \u9879\u76ee\u53d1\u7ed9\u4f60 \u9ebb\u70e6\u4f60\u770b\u4e0b\nDate: Fri, 31 Jul 2015 03:23:40 -0700\nFrom: notifications@github.com\nTo: Kingfisher@noreply.github.com\nCC: lorrykiko@outlook.com\nSubject: Re: [Kingfisher] \u6846\u67b6\u4f3c\u4e4e\u6709\u5185\u5b58\u6cc4\u9732\u7684\u95ee\u9898 (#85)\n\u6211\u7684\u8d44\u6599\u9875\u9762\u4e0a\u5c31\u6709\u90ae\u7bb1\u3002\u8c22\u8c22\n\u2015\nReply to this email directly or view it on GitHub.\n. ",
    "lizzie8023": "\u55b5\u795e,\u6211\u4e5f\u9047\u5230Kingfisher\u4e0d\u4e3b\u52a8\u91ca\u653e\u5185\u5b58\u7684\u95ee\u9898,\u4e0d\u65ad\u7684\u4e0a\u4e0b\u6eda\u52a8cell,\u6700\u540e\u5185\u5b58\u90fd\u98d9\u5230600M\u4e86\n. Sorry, I just found, because I \"canEditRowAtIndexPath\" which used the wrong method to determine the cell, which leads to my cell memory soared when I found this error came back immediately ready to delete the previous question, and found that already reply I, thank reply\n. ",
    "marcelofabri": "I'm seeing this issue as well. According to Fabric, it's on:\n\nImageCache.swift line 389\nKingfisher.ImageCache.(cleanExpiredDiskCacheWithCompletionHander (Kingfisher.ImageCache) -> (Swift.Optional<() -> ()>) -> ()).(closure #1)\n. Thread : Crashed: com.onevcat.Kingfisher.ImageCache.ioQueue.default\n0  libswiftCore.dylib             0x00000001017e491c swift_getObjCClassMetadata + 240\n1  libswiftCore.dylib             0x00000001017cb0bc findDynamicValueAndType(swift::OpaqueValue*, swift::Metadata const*, swift::OpaqueValue*&, swift::Metadata const*&) + 128\n2  libswiftCore.dylib             0x00000001017cb0bc findDynamicValueAndType(swift::OpaqueValue*, swift::Metadata const*, swift::OpaqueValue*&, swift::Metadata const*&) + 128\n3  libswiftCore.dylib             0x00000001017cbe20 _dynamicCastToExistential(swift::OpaqueValue*, swift::OpaqueValue*, swift::Metadata const*, swift::ExistentialTypeMetadata const*, swift::DynamicCastFlags) + 72\n4  libswiftCore.dylib             0x00000001017cba94 swift_dynamicCast + 612\n5  libswiftCore.dylib             0x00000001016d9238 _TFSs26_forceBridgeFromObjectiveCU__FTPSs9AnyObject_MQ__Q_ + 180\n6  libswiftCore.dylib             0x0000000101703ca4 _TFOSs25_VariantDictionaryStorage8maybeGetUSs8Hashable___fGS_Q_Q0__FQ_GSqQ0__ + 244\n7  Kingfisher                     0x0000000100dcfa64 Kingfisher.ImageCache.(cleanExpiredDiskCacheWithCompletionHander (Kingfisher.ImageCache) -> (Swift.Optional<() -> ()>) -> ()).(closure #1) (ImageCache.swift:389)\n8  Kingfisher                     0x0000000100dccbcc reabstraction thunk helper from @callee_owned () -> (@unowned ()) to @callee_unowned @convention(block) () -> (@unowned ()) (ImageCache.swift)\n9  libdispatch.dylib              0x0000000194649994 _dispatch_call_block_and_release\n10 libdispatch.dylib              0x0000000194649954 _dispatch_client_callout\n11 libdispatch.dylib              0x00000001946540a4 _dispatch_queue_drain\n12 libdispatch.dylib              0x000000019464ca5c _dispatch_queue_invoke\n13 libdispatch.dylib              0x0000000194656318 _dispatch_root_queue_drain\n14 libdispatch.dylib              0x0000000194657c4c _dispatch_worker_thread3\n15 libsystem_pthread.dylib        0x000000019482922c _pthread_wqthread + 816\n16 libsystem_pthread.dylib        0x0000000194828ef0 start_wqthread + 4\n. \n",
    "richardtop": "Got this bug in v1.4.5, here is the stack trace:\nSwift\nThread : Crashed: com.onevcat.Kingfisher.ImageCache.ioQueue.default\n0  libswiftCore.dylib             0x0000000101bc091c swift_getObjCClassMetadata + 240\n1  libswiftCore.dylib             0x0000000101ba70bc findDynamicValueAndType(swift::OpaqueValue*, swift::Metadata const*, swift::OpaqueValue*&, swift::Metadata const*&) + 128\n2  libswiftCore.dylib             0x0000000101ba70bc findDynamicValueAndType(swift::OpaqueValue*, swift::Metadata const*, swift::OpaqueValue*&, swift::Metadata const*&) + 128\n3  libswiftCore.dylib             0x0000000101ba7e20 _dynamicCastToExistential(swift::OpaqueValue*, swift::OpaqueValue*, swift::Metadata const*, swift::ExistentialTypeMetadata const*, swift::DynamicCastFlags) + 72\n4  libswiftCore.dylib             0x0000000101ba7a94 swift_dynamicCast + 612\n5  libswiftCore.dylib             0x0000000101ab5238 _TFSs26_forceBridgeFromObjectiveCU__FTPSs9AnyObject_MQ__Q_ + 180\n6  libswiftCore.dylib             0x0000000101adfca4 _TFOSs25_VariantDictionaryStorage8maybeGetUSs8Hashable___fGS_Q_Q0__FQ_GSqQ0__ + 244\n7  Kingfisher                     0x00000001010a3668 _TFFC10Kingfisher10ImageCache41cleanExpiredDiskCacheWithCompletionHanderFS0_FGSqFT_T__T_U_FT_T_ + 1872\n8  Kingfisher                     0x00000001010a07a4 _TTRXFo__dT__XFdCb__dT__ + 44\n9  libdispatch.dylib              0x0000000195f81994 _dispatch_call_block_and_release + 24\n10 libdispatch.dylib              0x0000000195f81954 _dispatch_client_callout + 16\n11 libdispatch.dylib              0x0000000195f8c0a4 _dispatch_queue_drain + 1448\n12 libdispatch.dylib              0x0000000195f84a5c _dispatch_queue_invoke + 132\n13 libdispatch.dylib              0x0000000195f8e318 _dispatch_root_queue_drain + 720\n14 libdispatch.dylib              0x0000000195f8fc4c _dispatch_worker_thread3 + 108\n15 libsystem_pthread.dylib        0x000000019616122c _pthread_wqthread + 816\n16 libsystem_pthread.dylib        0x0000000196160ef0 start_wqthread + 4\n. ",
    "tomaskraina": "There are two possible solutions:\n1) Use UIImageJPEGRepresentation instead of UIImagePNGRepresentation when saving an image to disk\n2) Rotate the instance of UIImage using its imageOrientation property before saving it to disk as a PNG image, possible implementation could look like this (objc code): http://stackoverflow.com/a/5427890/1161723\n. @onevcat I'm trying to use the solution you proposed above with my own image downloader used as the default on KingfisherManager:\nKingfisherManager.shared.downloader = MyImageDownloader(name: \"MyImageDownloader\")\nHowever, the method downloadImage  gets never called on MyImageDownloader.\nDo have any suggestion how to set MyImageDownloader globally?. Awesome. Thanks, I will try that out.. @onevcat I have tried that and it does not work, unfortunately.\nThe problem seems two-fold.\nFirst, the overridden method downloadImage does not get called when using the kf extension on UIImageView. What get's called instead is the other downloadImage method. However, this method is not open and thus, can't be overridden. \nI have sold this issue by adding another ImageDownloaderDelegate method - imageDownloader(_:willDownloadImageForURL:with:) that gets called when the ImageDownloader object will start downloading an image from specified URL.\nThe second issue is that the imageDownloader(_:, didDownload:, for:, with) method seems to get called more times than the number of actual network requests. I didn't find the root cause, but I was able to implement a workaround in my implementation of ImageDownloaderDelegate - see gist: https://gist.github.com/tomaskraina/ef2c84e568f07491fe4d7f0480b65602. Thanks!. ",
    "dmcrodrigues": "Yeah I think this is really important, for example URL can contain dynamic parameters which can break the cache. I think the key can be the URL's absolute string by default but we should be able to customise it somehow to handle our specific use-case.\nThe approach suggested by @RuiAAPeres seems great to handle this. :+1: \n. Awesome work, thank you for this!\n. Yeah that flexibility would be great for testing but also to provide a customised NSURLSessionConfiguration, e.g. request timeout interval, maximum connections per host, shared container identifier. :+1: \n. ",
    "thanhdevapp": "why you not update to framework , we need it, thanks\n. fixed, close issue, thanks\n. ",
    "Krisiacik": "Thank you Onevcat! :)\n. ",
    "RafaelPlantard": "Nowadays, is it possible? Stub of images?. Thanks, I want just use this stub for my instrumented tests with KIF, I want all my tests have no limitation such need to be internet connection (for downloading an image, for example).. Thank you @onevcat I will try. ",
    "hankbao": "This problem may related to https://openradar.appspot.com/22437691\n. :+1:\n. Any luck with this after iOS 9 officially released?\n. Bad Apple.\n. Found a workaround according to an Apple engineer working on Swift compiler  https://twitter.com/jckarter/status/641963107225501696\n. That's alright.\n. :+1:\n. Finally ;)\n. ",
    "emmasuzuki": "Thanks, you gave me a hint.  The issue was the resetting.  I guess my function did not maintain the imageView's references since it is a reused cell from collection view.  \nHere is a revised code:\nswift\nimageView.kf_setImageWithURL(thumbnailUrl,\n    placeholderImage: UIImage(named: \"loading_image\"),\n    optionsInfo: nil,\n    completionHandler: { [weak imageView] (image, error, cacheType, imageURL) -> () in\n        if error != nil {\n            imageView?.image = UIImage(named: \"no_image\")\n        }\n})\n. @HariNarayanan777 UIImage(named: \"no_image\") is local image. When an error occurs fetching the image from the url, I will replace the placeholder image (\"loading_image\") to \"no_image\" image.\nAnd kf_setImageWithURL is an old API and also Kingfisher's API is on UIImageView. Not on UIImage.  \nI think you can try \nswift\nimageView.kf.setImage(\n    with: imageUrl,\n    placeholder: UIImage(named:\"some_placeholder_image\"),\n    options: nil,\n    progressBlock: nil,\n    completionHandler: { (image: Image?, error: NSError?, cache: CacheType, url: URL?) in\n}). ",
    "Ankish": "@onevcat \nimageView.kf_setImageWithURL(thumbnailUrl,\n    placeholderImage: UIImage(named: \"loading_image\"),\n    optionsInfo: nil,\n    completionHandler: { [weak imageView] (image, error, cacheType, imageURL) -> () in\n        if error != nil {\n            imageView?.image = UIImage(named: \"no_image\")\n        }\n        // for fast scrolling when the cell is reused and you might have 2 request for same cell on queue .should we also check if previous url is same as current one. To avoid showing wrong image on the cell till the correct one invokes and reloads the cell or is this handled. In the demo this is not handled. \nNote I am using prepareForReuse() to set imageview.image = nil // does this take care  of it.\nJust curious before I put KF code in all over my project.\n   something like\n    if thumbnailUrl != imageURL{ // a completion for previous cell\n                 imageView?.image = nil\n       }\n})\n. @valdirunars : Did you do a workaround for Kingfisher with Firebase? Would be really helpful. Thanks!. @onevcat : any possible resolution to this. This stalls the main thread and it affects the tableview scrolling.. @krodak : can you paste the temporary-fix code here, will be really helpful for me to analyze this than doing it all over again.. @krodak : \nFew things I am trying to analyse:\n1) If I set completion handler to nil for ImagePrefetcher - would KF still have main queue issues?\n2) If I use  KingfisherManager.shared.retrieveImage and set URL here - it still does things in main thread. Did you try that as well ?\n3) If we use local caching then we do not get the processing for gifs and other aspects of this library. Which makes it very difficul to synchrnize across the app.\nMy requirement is simple, I dont care much about completion. Need to throw in urls and get cached image if present else download and show.\nSurprising we cannot download an image in background !\nThanks !. @onevcat : any suggestions for prefetching without main thread stall?\nI don't need completion handler, just throwing URLS should be fine.. @onevcat : Will this feature/issue be considered. It is important to prefetch in most of the apps, using another library to prefetch and store in KF would be cumbersome. An update or any direction to this feature will be of great help. Thanks!. I do not expect UIButton's imageview to be AnimatedImageView. It is not possible.\nBut Use AnimatedImageView Imageview's features with UIBUtton's imageview. Thanks.. can you check this url. It downloads in disk but appears only for a second initially on imageview and later if i try to set imageview with same url it does not load the image.\nhttps://firebasestorage.googleapis.com/v0/b/staance-staging.appspot.com/o/user%2F-KqM9HQ2YoUF8_StwzGS%2Fpic%2Fp?alt=media&token=e71835ea-f082-40a6-bd08-a015795fff00. Thanks for confirming max-cache does not affect the Image cache. Leads me to the correct path. \n@onevcat : you can close the issue. ",
    "HariNarayanan777": "Here what  is the name of the image \"no_image\" means which is downloaded from the server image or your placeholder image.\n?????. And also i am getting error \"Value of type 'UIImage?' has no member 'kf_setImageWithURL'\"  what the extension for the method.?\nPlease help me.. ",
    "sondangpangaribuan": "I install using Carthage, \ncan you explain how to load permission for WatchKit ?\nAnyway Thank for Kingfisher\n. ",
    "zhouzizi": "command line \u7248\u672c\uff1f\u8bf7\u95ee\u5982\u4f55\u66f4\u65b0\uff1f\n. \u53ef\u4ee5\u4e86\u3002\u8c22\u8c22\u60a8 \uff01\u987a\u4fbf\u8bf7\u95ee\u4e00\u4e0b\uff0c\u522b\u7684\u7b2c\u4e09\u65b9\u5e93\u4e5f\u66f4\u65b0\u5230\u4e862.0\u8fd8\u662f\u6709\u597d\u591aissues\uff0c\u4e0d\u77e5\u9053\u8fd8\u9700\u8981\u6539\u4ec0\u4e48\u5730\u65b9\uff0c\u80fd\u9ebb\u70e6\u60a8\u6307\u6559\u4e00\u4e0b\u5417\uff1f\n. import Kingfisher \u53d1\u73b0  Could not build Objective-C module 'Kingfisher'\n. \u8c22\u8c22\uff01\u66f4\u65b0\u4e86\u4e0b\u3002\u786e\u5b9e\u4e0d\u4f1a\u95ea\u4e86\uff01\n. ",
    "borut-t": "I am not sure if this is ok. Perhaps it would be better if would be vice-versa. So by default image is not set before loading new image. Anyway, it's your call.\nThanks!\n. @onevcat What about for an example when disk cache expired but images are still in the memory? I will always get old images until memory is purged. But that can last hours or even days. \nThere should be a mechanism that if you defined cache expiration in general than cache on all levels should expire.\n. @onevcat It does for fetched images. But have no idea how to load images from asset catalogues. Do you?\n. I've implemented custom background decode without Kingfisher. Code bellow can run on background thread.\nUIGraphicsBeginImageContextWithOptions(image.size, true, 1)\nimage.drawAtPoint(CGPoint.zero, blendMode: CGBlendMode.Copy, alpha: 1)\nlet decompressedImage = UIGraphicsGetImageFromCurrentImageContext()\nUIGraphicsEndImageContext()\n. @onevcat You are right. This is solved in 8.2. But on older versions this causes an error. We are using CircleCI and they obviously have older version. Tests fails because of this issue.\nYou could make this right on older versions like this:\nswift\nlet expiredDate: Date? = (maxCachePeriodInSecond < 0) ? nil : Date(timeIntervalSinceNow: -maxCachePeriodInSecond)\nThat way property doesn't need to infer data type and will not cause error on older versions.\nCould you make a fix asap?. @onevcat CircleCI did upgrade to version 8.2 and there is no more problem.. ",
    "agustr": "Hi,\nI am sorry to have bothered you but I fixed the problem it seems. I have tried many thing in different order and now I am unable to reproduce the problem so I dont really know what fixed it but the last few things I tried was to do the following:\n1. Remove the 'include Kingfisher' in my swift file.\n2. Comment out all calls to Kingfisher functions.\n3. Close xcode.\n4. Delete everything in the following folder: /Users//Library/Developer/Xcode/DerivedData\n5. Start xcode and open my project.\n6. Run the 'Clean' command. At this point the autocompletion started working again.\n7. Re-include Kingfisher and un-comment out all the references to Kingfisher functions.\neverything workes as expected.\n. Okay after a few compiles the autocomplete stopped working again.\n. ",
    "spidergears": "I have been using this for some time now, never had a problem.\n. @jfizz\nCan you please create pull request for this. It will be really helpful.\n. ",
    "jfizz": "I had the same issue after upgrading to the latest version. changing https://github.com/onevcat/Kingfisher/blob/master/Kingfisher/UIImageView%2BKingfisher.swift#L284 to the code below resolved the issue. i believe this post explains what is going on: http://stackoverflow.com/questions/8588248/uiview-center-uiimageview-center-but-image-view-doesnt-seem-to-be-in-centre-i\nindicator.center = CGPointMake(CGRectGetMidX(bounds), CGRectGetMidY(bounds))\n. ",
    "wieseljonas": "I will give it a spin! Thanks\n. Working like a charm\n. Hi @onevcat I seem to be having this issue again can't really trace back to which version since I updated the library recently in my project. Ignore this it was simple the fact that the cell reloading animation was set to fade, setting it to none fixed it\ntableView?.reloadRows(at: [indexPath!], with: UITableViewRowAnimation.none). Strange I force the `layoutSubviews` in the `cellForIndexpath`. This only happens when the datasource changes while the view is scrolling\n\n. I see! makes sense I will try it. I killed the scroll before switching the datasource and it seems like it resolved the problem. But this suggestion makes sense\n. @onevcat  Sorry! It's working to perfection! thanks a lot\n. ",
    "ghost": "Wow thank you very much sir, it fixes my problem!\nHave a good day\n. Well, if I don't do this then the image never appear until I scroll the cells because the views are not refreshed? Maybe this is not a good pactice?\n. Ok i fixes the problem, is because I used the default Image set by apple in the UITableViewCell, and not mine...\n. Ok thanks\n. Hum, my project is really big :/ \nI don't think I can/have the expertise to find a relevant code snippet to reproduce/illustrate the problem..\n. This is my QRCodesScanViewController, but the kingfisher part is everywhere else.\n```\n//\n//  ScanProductVC.swift\n//  Created by Alexandre Camilleri on 27/10/15.\n//  Copyright \u00a9 2015 cgi. All rights reserved.\n//\nimport Foundation\nimport UIKit\nimport AVFoundation\nimport Alamofire\n/\n  Here the productsId are used, and not the sku. it's just because they printed the\n   QRs in the showcase using pID and not SKU. One day it should change to SKU.\n  In the end we use a redirect in the getProduct request to use id over sku.\n/\nclass ScanProductVC: UIViewController, AVCaptureMetadataOutputObjectsDelegate {\n    var progressHUD = ProgressHUD(text: USRMSG.LOADING)\n    var captureSession: AVCaptureSession!\n    var videoPreviewLayer: AVCaptureVideoPreviewLayer!\n    var qrCodeFrameView: UIView!\n    var currentRequest: Request?\noverride func viewDidLoad() {\n    super.viewDidLoad()\n    configureVideoCapture()\n    addVideoPreviewLayer()\n    initializeQRView()\n}\n\noverride func viewWillDisappear(animated: Bool) {\n    cancelPendingRequest(currentRequest)\n}\n\noverride func viewWillAppear(animated: Bool) {\n    restartCapture()\n}\n\nfunc captureOutput(captureOutput: AVCaptureOutput!, didOutputMetadataObjects metadataObjects: [AnyObject]!, fromConnection connection: AVCaptureConnection!) {\n    if metadataObjects == nil || metadataObjects.count == 0 {\n        qrCodeFrameView.frame = CGRectZero\n        return\n    }\n    let objMetadataMachineReadableCodeObject = metadataObjects[0] as! AVMetadataMachineReadableCodeObject\n\n    if objMetadataMachineReadableCodeObject.type == AVMetadataObjectTypeQRCode {\n        let objBarCode = videoPreviewLayer.transformedMetadataObjectForMetadataObject(objMetadataMachineReadableCodeObject as AVMetadataMachineReadableCodeObject) as! AVMetadataMachineReadableCodeObject\n        qrCodeFrameView.frame = objBarCode.bounds;\n        if objMetadataMachineReadableCodeObject.stringValue != nil {\n            captureSession.stopRunning()\n\n            let pURL = objMetadataMachineReadableCodeObject.stringValue\n            let productID = getProductIDFromURL(pURL)\n            setProgressHUD(&progressHUD, parentView: self)\n            progressHUD.fadeIn()\n            getProductThenSegue(productID)\n        }\n    }\n}\n\nprivate func getProductThenSegue(pID: String) {\n    let products = Products()\n\n    // Retrieve the scanned product with its pID\n    currentRequest = products.getProductRedirect(pID) {\n        networkActivity(false)\n        self.progressHUD.fadeOut()\n        // Once the async func finish we set it and refresh the view\n        if let product = products.elements.first {\n            self.performSegueWithIdentifier(SEGUE.SHOWPRODUCTDFS, sender: product)\n        } else {\n            var choices = [ACChoiceContent]()\n\n            choices.append((title: USRMSG.OK,\n                style: UIAlertActionStyle.Default,\n                handler: { _ in\n                    self.restartCapture()\n            }))\n            popACChoice((ERRMSG.SCAN, ERRMSG.D_NOPRODUCTFOUND), choiceContent: choices)\n        }\n    }\n}\n\n/*\n** This allows us to pass data from this view to the next \"connected by\n**  segue\" view PDetailsVC\n*/\noverride func prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?) {\n    if segue.identifier == SEGUE.SHOWPRODUCTDFS {\n        let dest: PDetailsVC = segue.destinationViewController as! PDetailsVC\n\n        dest.product = sender as! Product\n    }\n}\n\n/* -- Private ----------------------------------------------------------- */\n\n/*\n**  Return sku from the URL\n**   pURL: \"http://www.showroom.dev/product-075.html\" ->  (Int)075\n*/\nprivate func getProductIDFromURL(pURL: String) -> String {\n    // Calculate the indexes\n    let startIndex = pURL.startIndex.advancedBy(D_QRCODESTART.characters.count)\n    let endIndex = pURL.endIndex.advancedBy(D_QRCODEEND.characters.count * -1)\n    // Create the range\n    let range = startIndex ..< endIndex\n    // Get the subscript\n    let resString = pURL.substringWithRange(range)\n\n    return resString\n}\n\nprivate func configureVideoCapture() {\n    let objCaptureDevice = AVCaptureDevice.defaultDeviceWithMediaType(AVMediaTypeVideo)\n    let objCaptureDeviceInput: AnyObject!\n\n    do {\n        objCaptureDeviceInput = try AVCaptureDeviceInput(device: objCaptureDevice) as AVCaptureDeviceInput\n    } catch let error as NSError {\n        errCheck(error)\n        objCaptureDeviceInput = nil\n        return\n    }\n    captureSession = AVCaptureSession()\n    captureSession.addInput(objCaptureDeviceInput as! AVCaptureInput)\n    let objCaptureMetadataOutput = AVCaptureMetadataOutput()\n    captureSession.addOutput(objCaptureMetadataOutput)\n    objCaptureMetadataOutput.setMetadataObjectsDelegate(self, queue: dispatch_get_main_queue())\n    objCaptureMetadataOutput.metadataObjectTypes = [AVMetadataObjectTypeQRCode]\n}\n\nprivate func addVideoPreviewLayer() {\n    videoPreviewLayer = AVCaptureVideoPreviewLayer(session: captureSession)\n    videoPreviewLayer.videoGravity = AVLayerVideoGravityResizeAspectFill\n    videoPreviewLayer.frame = view.layer.bounds\n    self.view.layer.addSublayer(videoPreviewLayer)\n    captureSession.startRunning()\n}\n\nprivate func initializeQRView() {\n    qrCodeFrameView = UIView()\n    qrCodeFrameView.layer.borderColor = UIColor.redColor().CGColor\n    qrCodeFrameView.layer.borderWidth = 5\n    self.view.addSubview(qrCodeFrameView)\n    self.view.bringSubviewToFront(qrCodeFrameView)\n}\n\nprivate func restartCapture() {\n    qrCodeFrameView.removeFromSuperview()\n    initializeQRView()\n    if !captureSession.running {\n        captureSession.startRunning()\n    }\n}\n\n}\n```\n. I mostly use king fisher for loading tableview cells images asynchronously\n. This is the code used to redirent tes user\n```\n    /\n  When the user tap on ScanProduct\n       it will check for authorizations before showing the view\n    /\n    @IBAction func scanTapped() {\n        let authStatus = AVCaptureDevice.authorizationStatusForMediaType(AVMediaTypeVideo)\n    switch authStatus {\n    case AVAuthorizationStatus.Authorized:\n        performSegueWithIdentifier(SEGUE.SHOWSCAN, sender: nil)\n    case AVAuthorizationStatus.Denied:\n        alertToEncourageCameraAccessInitially()\n    case AVAuthorizationStatus.NotDetermined:\n        alertPromptToAllowCameraAccessViaSetting()\n    default:\n        alertToEncourageCameraAccessInitially()\n    }\n}\n\nprivate func alertToEncourageCameraAccessInitially() {\n    let alert = UIAlertController(title: USRMSG.ACCESSREQUIRED, message: USRMSG.CAMERAACCESSNEEDED, preferredStyle: UIAlertControllerStyle.Alert)\n\n    alert.addAction(UIAlertAction(title: USRMSG.ALLOWCAMERA, style: .Cancel, handler: { (alert) -> Void in\n        UIApplication.sharedApplication().openURL(NSURL(string: UIApplicationOpenSettingsURLString)!)\n    }))\n\n    alert.addAction(UIAlertAction(title: USRMSG.CANCEL, style: .Default, handler: nil))\n\n    presentViewController(alert, animated: true, completion: nil)\n}\n\nprivate func alertPromptToAllowCameraAccessViaSetting() {\n\n    let alert = UIAlertController(title: USRMSG.ACCESSREQUIRED, message: USRMSG.CAMERAACCESSREQUEST, preferredStyle: UIAlertControllerStyle.Alert)\n\n    alert.addAction(UIAlertAction(title: USRMSG.DISMISS, style: .Cancel) { alert in\n        if AVCaptureDevice.devicesWithMediaType(AVMediaTypeVideo).count > 0 {\n            AVCaptureDevice.requestAccessForMediaType(AVMediaTypeVideo) { granted in\n                dispatch_async(dispatch_get_main_queue()) {\n                    self.scanTapped() } }\n        }\n        })\n\n    presentViewController(alert, animated: true, completion: nil)\n}\n\n```\nAnd before redirect him to the setting panel I already load many images in other places of the app, if that's usefull somehow. Don't hesitate to ask me more! \nedit: sorry for the fail gramar everywhere, my keyboard is doing french autocompletion... \n. @arn00s Could you explain how you sorted it out?\n. It's find I sorted it out, but Xcode is updating. I'll post my code asap\n. myImageView.kf_setImageWithURL(URL, optionsInfo:[...]).downloadTask?.ownerDownloader?.requestModifier = { request in\n    request.addValue(\"application/json\", forHTTPHeaderField: \"Content-Type\")\n    ...\n}\nIt's not working yet, but I guess it's setted before the call as precised in the documentation right?\n. Looks better indeed, but where does this instance of ImageDownloader come from? \nEdit: I guess it's related to KingfisherManager.sharedManager...\nEdit2: Ok my bad, KingFisher import was missing. Shame on me. Thanks a lot\n. Yeah well tbh I did a PoC style patch. I think grouping the callbacks and option in a tuple might be a good idea in order to avoid dealing with double indexes. And the whole repetition of what callback() is doing in processImage() is also ugly. I wanted to introduce a callback(atIndex:) variant but that didn't turn to be good.\n. ",
    "KimiChiu": "Forget this. I used the wrong field of my cell.\nI should use cell.preivewImage not cell.imageView.\n--\nI have the same problem.\nKingfisher didn't show image after downloading. How did you fix this issue?\nI don't have any default image in my ImageView.\nAnd the resizing doesn't work too.\nlet url = URL(string: contentBase.link)!\ncell.imageView?.kf.indicatorType = .activity\ncell.imageView?.autoresizingMask = [.flexibleWidth, .flexibleHeight, .flexibleBottomMargin, .flexibleRightMargin, .flexibleLeftMargin, .flexibleTopMargin]\ncell.imageView?.contentMode = .scaleAspectFill\ncell.imageView?.kf.setImage(with: url, options: [.transition(.fade(0.2))])\n. I tried, it worked the same as UIImage. Both of them need to remove .backgroundDecode.. ",
    "Limon-O-O": "\ud83d\udc4c\n. ",
    "rxbit": "\u7b80\u5355\u7c97\u66b4\ud83d\ude02\n. ",
    "britzlieg": "1.7.1 fixed the bug.\n. ",
    "MauMaxxa": "Sorry i dont know how to do it, could you please help me? \nThank you\n. Thank you, work done!\n'\n    var downloader: ImageDownloader! = ImageDownloader(name: \"downloadBanners\")\n```\nlet group = dispatch_group_create()\nlet banners = self.page.banners.allObjects as! [Bannerphoto]\nfor (index, element) in banners.enumerate() {\n    if let URL = NSURL(string: element.immagine) {\n        dispatch_group_enter(group)\n        downloader.downloadImageWithURL(URL, options: KingfisherManager.OptionsNone, progressBlock: { (receivedSize, totalSize) -> () in\n        }, completionHandler: { (image, error, imageURL, data) -> () in\n            if (image != nil){\n                images.append(image!)\n            }\n            dispatch_group_leave(group)\n    })\n}\n\n}\ndispatch_group_notify(group, dispatch_get_main_queue()) { () -> Void in\n    if (images.count>0){\n         //This is my images array!:-)\n    }\n}\n```\n'\nHave a nice day!\n. ",
    "angelen10": "\u90a3\u5e94\u8be5\u662f\u6211\u5904\u7406\u7684\u95ee\u9898\u3002\n. ",
    "eclipsegst": "In case anyone else has this problem, there's a default image with name \"imageView\" in UITableViewCell. You can try to use a different name for your custom UIImageView. Make sure to set your customImageView.layer.masksToBounds = true as well, or you can also set your customImageView.clipsToBounds = true in code or check the clipsToBounds check box for your image view in Interface Builder.\n. ",
    "lmcmz": "It seem that the version 1.8 is no available now.\n\n. OK, I'm gonna figure it out.\nBtw, thanks to reply me. XD\nSee you in Chinese Swift Developer Conference.\n :)\n. ",
    "RyanRamchandar": "Thanks this works pretty well. Do all the same default cache constraints apply to this defaultCache as well? (eg. expiration)\nAlso, theres a small typo in your snippet. isImageCachedForKey should have its cached property checked:\nif ImageCache.defaultCache.isImageCachedForKey(\"your_key\").cached {\n    ImageCache.defaultCache.retrieveImageForKey(\"your_key\", options: KingfisherManager.OptionsNone) { (image, type) -> () in\n        cell.imageView.image = image\n    }\n} else {\n    let image = //Generate your image\n    cell.imageView.image = image\n    ImageCache.defaultCache.storeImage(image, forKey: \"your_key\")\n}\n. ",
    "Nautiyalsachin": "Can you provide updated version for this methods with swift 4 please? Thanks!. ",
    "chenminhua": "I use swift and ios 9.0\n. \n. of course, I just \nsource 'https://github.com/CocoaPods/Specs.git'\nplatform :ios, '8.0'\nuse_frameworks!\ntarget 'KingFisherIos' do\npod 'Kingfisher', '~> 1.8'\nend\nI have try some other lib and didn't find that error\nthanks a lot\n. I still can't figure it out\nbut I have get it done manually by \"git submodule\" way\nanyway, thanks for your help.\ud83d\ude0a\n. ",
    "awind": "you could try this code instead:\nprofileImage.kf_setImageWithURL(NSURL(string: \"your_image_url\")!,\n        placeholderImage: nil,\n        optionsInfo: nil,\n        progressBlock: { receivedSize, totalSize in\n            println(\"Download Progress: \\(receivedSize)/\\(totalSize)\")\n        },\n        completionHandler: { image, error,cacheType, imageURL in\n            println(\"Downloaded and set!\")\n        }\n    )\n. ",
    "gregkerzhner": "small change for swift 2\nprofileImage.kf_setImageWithURL(NSURL(string: \"your_image_url\")!,\n        placeholderImage: nil,\n        optionsInfo: nil,\n        progressBlock: { receivedSize, totalSize in\n            println(\"Download Progress: \\(receivedSize)/\\(totalSize)\")\n        },\n        completionHandler: { image, error,cacheType, imageURL in\n            print(\"Downloaded and set!\")\n        }\n    )\n. ",
    "misuqian": "I install Kingfisher by pod and it perfect work\nI find the reason is that I copy files directly to project and I got these errors\n. ",
    "vCrespoP": "Yeah! That's it, I didn't notice that.\nThanks for the quick response, I'm searching for a replacement made in swift for SDWebImage and this might be it!\n. +1\nAnd it would be nice to use the downloader so we have a timeout as well\nKingfisher.sharedManager.downloader.downloadTimeout\nThanks!\n. ",
    "NikKovIos": "swift 3\nimageView.kf.indicatorType = .activity. ",
    "josmanperez": "Yes...you were absolutely right. Thanks and sorry for such a silly question :)\nThanks again!\n. ",
    "codecov-io": "Current coverage is 71.98%\n\nMerging #184 into master will increase coverage by +0.67% as of 129b430\n\ndiff\n@@            master    #184   diff @@\n======================================\n  Files           12      12       \n  Stmts         1098    1110    +12\n  Branches         0       0       \n  Methods                          \n======================================\n+ Hit            783     799    +16\n  Partial          0       0       \n+ Missed         315     311     -4\n\nReview entire Coverage Diff as of 129b430\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 72.38%\nMerging #185 into master will increase coverage by +0.40% as of ba52132\n\ndiff\n@@            master    #185   diff @@\n======================================\n  Files           12      12       \n  Stmts         1110    1126    +16\n  Branches         0       0       \n  Methods                          \n======================================\n+ Hit            799     815    +16\n  Partial          0       0       \n  Missed         311     311\n\nReview entire Coverage Diff as of ba52132\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 72.42%\nMerging #186 into master will increase coverage by +0.04% as of c3cf25e\n\ndiff\n@@            master    #186   diff @@\n======================================\n  Files           12      12       \n  Stmts         1126    1128     +2\n  Branches         0       0       \n  Methods                          \n======================================\n+ Hit            815     817     +2\n  Partial          0       0       \n  Missed         311     311\n\nReview entire Coverage Diff as of c3cf25e\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 72.42%\nMerging #190 into master will not affect coverage as of 40976a6\n\ndiff\n@@            master    #190   diff @@\n======================================\n  Files           12      12       \n  Stmts         1128    1128       \n  Branches         0       0       \n  Methods          0               \n======================================\n  Hit            817     817       \n  Partial          0       0       \n  Missed         311     311\n\nReview entire Coverage Diff as of 40976a6\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 76.05%\nMerging #194 into 2.0.0 will increase coverage by +3.00% as of 67bad23\n\ndiff\n@@            2.0.0    #194   diff @@\n=====================================\n  Files          12      11     -1\n  Stmts        1121    1115     -6\n  Branches        0       0       \n  Methods                         \n=====================================\n+ Hit           819     848    +29\n  Partial         0       0       \n+ Missed        302     267    -35\n\nReview entire Coverage Diff as of 67bad23\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 72.88%\nMerging #195 into master will increase coverage by +0.46% as of 542542c\n\ndiff\n@@            master    #195   diff @@\n======================================\n  Files           12      12       \n  Stmts         1128    1121     -7\n  Branches         0       0       \n  Methods          0               \n======================================\n  Hit            817     817       \n  Partial          0       0       \n+ Missed         311     304     -7\n\nReview entire Coverage Diff as of 542542c\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 73.05%\nMerging #196 into master will increase coverage by +0.45% as of 2588394\n\ndiff\n@@            master    #196   diff @@\n======================================\n  Files           12      12       \n  Stmts         1128    1121     -7\n  Branches         0       0       \n  Methods                          \n======================================\n  Hit            819     819       \n  Partial          0       0       \n+ Missed         309     302     -7\n\nReview entire Coverage Diff as of 2588394\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 73.21%\nMerging #197 into master will increase coverage by +0.16% as of 7b81ce1\n\ndiff\n@@            master    #197   diff @@\n======================================\n  Files           12      12       \n  Stmts         1121    1109    -12\n  Branches         0       0       \n  Methods                          \n======================================\n- Hit            819     812     -7\n  Partial          0       0       \n+ Missed         302     297     -5\n\nReview entire Coverage Diff as of 7b81ce1\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 75.52%\nMerging #199 into master will increase coverage by +2.33% as of 104f4eb\n\ndiff\n@@            master    #199   diff @@\n======================================\n  Files           12      11     -1\n  Stmts         1108    1250   +142\n  Branches         0       0       \n  Methods                  0       \n======================================\n+ Hit            811     944   +133\n  Partial          0       0       \n- Missed         297     306     +9\n\nReview entire Coverage Diff as of 104f4eb\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 73.17%\nMerging #200 into master will decrease coverage by -0.04% as of 9e756d9\n\ndiff\n@@            master    #200   diff @@\n======================================\n  Files           12      12       \n  Stmts         1109    1107     -2\n  Branches         0       0       \n  Methods                          \n======================================\n- Hit            812     810     -2\n  Partial          0       0       \n  Missed         297     297\n\nReview entire Coverage Diff as of 9e756d9\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 74.50%\nMerging #201 into 2.0.0 will decrease coverage by -1.92% as of 86c7518\n\ndiff\n@@            2.0.0   #201   diff @@\n====================================\n  Files          11     11       \n  Stmts        1103   1200    +97\n  Branches        0      0       \n  Methods                0       \n====================================\n+ Hit           843    894    +51\n  Partial         0      0       \n- Missed        260    306    +46\n\nReview entire Coverage Diff as of 86c7518\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 73.17%\nMerging #204 into master will not affect coverage as of 40d438a\n\ndiff\n@@            master    #204   diff @@\n======================================\n  Files           12      12       \n  Stmts         1107    1107       \n  Branches         0       0       \n  Methods                          \n======================================\n  Hit            810     810       \n  Partial          0       0       \n  Missed         297     297\n\nReview entire Coverage Diff as of 40d438a\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 74.66%\nMerging #206 into 2.0.0 will not affect coverage as of 0272264\n\ndiff\n@@            2.0.0    #206   diff @@\n=====================================\n  Files          11      11       \n  Stmts        1200    1200       \n  Branches        0       0       \n  Methods         0       0       \n=====================================\n  Hit           896     896       \n  Partial         0       0       \n  Missed        304     304\n\nReview entire Coverage Diff as of 0272264\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 74.66%\nMerging #207 into 2.0.0 will not affect coverage as of 9d7fe3e\n\ndiff\n@@            2.0.0    #207   diff @@\n=====================================\n  Files          11      11       \n  Stmts        1200    1200       \n  Branches        0       0       \n  Methods         0       0       \n=====================================\n  Hit           896     896       \n  Partial         0       0       \n  Missed        304     304\n\nReview entire Coverage Diff as of 9d7fe3e\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 73.17%\nMerging #208 into master will not affect coverage as of 6d3c97d\n\ndiff\n@@            master    #208   diff @@\n======================================\n  Files           12      12       \n  Stmts         1107    1107       \n  Branches         0       0       \n  Methods                          \n======================================\n  Hit            810     810       \n  Partial          0       0       \n  Missed         297     297\n\nReview entire Coverage Diff as of 6d3c97d\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 84.35%\nMerging #209 into 2.0.0 will increase coverage by +9.85% as of 65a6697\n\ndiff\n@@            2.0.0    #209   diff @@\n=====================================\n  Files          11      19     +8\n  Stmts        1200    2160   +960\n  Branches        0       0       \n  Methods         0       0       \n=====================================\n+ Hit           894    1822   +928\n  Partial         0       0       \n- Missed        306     338    +32\n\nReview entire Coverage Diff as of 65a6697\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 74.50%\nMerging #210 into 2.0.0 will decrease coverage by -0.16% as of 053fa0c\n\ndiff\n@@            2.0.0   #210   diff @@\n====================================\n  Files          11     11       \n  Stmts        1200   1200       \n  Branches        0      0       \n  Methods         0      0       \n====================================\n- Hit           896    894     -2\n  Partial         0      0       \n- Missed        304    306     +2\n\nReview entire Coverage Diff as of 053fa0c\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 73.19%\nMerging #216 into master will increase coverage by +0.02% as of ad861a5\n\ndiff\n@@            master    #216   diff @@\n======================================\n  Files           12      12       \n  Stmts         1107    1108     +1\n  Branches         0       0       \n  Methods          0               \n======================================\n+ Hit            810     811     +1\n  Partial          0       0       \n  Missed         297     297\n\nReview entire Coverage Diff as of ad861a5\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 73.19%\nMerging #217 into master will not affect coverage as of 57eb723\n\ndiff\n@@            master    #217   diff @@\n======================================\n  Files           12      12       \n  Stmts         1108    1108       \n  Branches         0       0       \n  Methods                          \n======================================\n  Hit            811     811       \n  Partial          0       0       \n  Missed         297     297\n\nReview entire Coverage Diff as of 57eb723\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 75.06%\nMerging #220 into 2.0.0 will increase coverage by +0.38% as of 0417ccb\n\ndiff\n@@            2.0.0    #220   diff @@\n=====================================\n  Files          11      11       \n  Stmts        1201    1227    +26\n  Branches        0       0       \n  Methods         0       0       \n=====================================\n+ Hit           897     921    +24\n  Partial         0       0       \n- Missed        304     306     +2\n\nReview entire Coverage Diff as of 0417ccb\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 75.52%\nMerging #221 into 2.0.0 will increase coverage by +0.63% as of 1a06d91\n\ndiff\n@@            2.0.0    #221   diff @@\n=====================================\n  Files          11      11       \n  Stmts        1227    1250    +23\n  Branches        0       0       \n  Methods         0       0       \n=====================================\n+ Hit           919     944    +25\n  Partial         0       0       \n+ Missed        308     306     -2\n\nReview entire Coverage Diff as of 1a06d91\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 75.55%\nMerging #234 into master will increase coverage by +0.03% as of 3592e84\n\ndiff\n@@            master    #234   diff @@\n======================================\n  Files           11      11       \n  Stmts         1250    1252     +2\n  Branches         0       0       \n  Methods          0       0       \n======================================\n+ Hit            944     946     +2\n  Partial          0       0       \n  Missed         306     306\n\nReview entire Coverage Diff as of 3592e84\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 75.49%\nMerging #236 into master will decrease coverage by -0.06% as of 553bba1\n\ndiff\n@@            master    #236   diff @@\n======================================\n  Files           11      11       \n  Stmts         1252    1273    +21\n  Branches         0       0       \n  Methods          0       0       \n======================================\n+ Hit            946     961    +15\n  Partial          0       0       \n- Missed         306     312     +6\n\nReview entire Coverage Diff as of 553bba1\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 75.55%\nMerging #238 into master will not affect coverage as of 402931c\n\ndiff\n@@            master    #238   diff @@\n======================================\n  Files           11      11       \n  Stmts         1252    1252       \n  Branches         0       0       \n  Methods          0       0       \n======================================\n  Hit            946     946       \n  Partial          0       0       \n  Missed         306     306\n\nReview entire Coverage Diff as of 402931c\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 75.68%\nMerging #240 into master will increase coverage by +0.13% as of 9d7f0d2\n\ndiff\n@@            master    #240   diff @@\n======================================\n  Files           11      11       \n  Stmts         1252    1250     -2\n  Branches         0       0       \n  Methods          0       0       \n======================================\n  Hit            946     946       \n  Partial          0       0       \n+ Missed         306     304     -2\n\nReview entire Coverage Diff as of 9d7f0d2\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 75.55%\nMerging #241 into master will not affect coverage as of 28f53da\n\ndiff\n@@            master    #241   diff @@\n======================================\n  Files           11      11       \n  Stmts         1252    1252       \n  Branches         0       0       \n  Methods          0       0       \n======================================\n  Hit            946     946       \n  Partial          0       0       \n  Missed         306     306\n\nReview entire Coverage Diff as of 28f53da\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 76.99%\nMerging #244 into master will increase coverage by +1.31% as of 7bf88fe\n\ndiff\n@@            master    #244   diff @@\n======================================\n  Files           11      11       \n  Stmts         1250    1239    -11\n  Branches         0       0       \n  Methods          0       0       \n======================================\n+ Hit            946     954     +8\n  Partial          0       0       \n+ Missed         304     285    -19\n\nReview entire Coverage Diff as of 7bf88fe\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 76.90%\nMerging #247 into master will not affect coverage as of 88c8b55\n\ndiff\n@@            master   #247   diff @@\n=====================================\n  Files           11     11       \n  Stmts         1260   1260       \n  Branches         0      0       \n  Methods          0      0       \n=====================================\n  Hit            969    969       \n  Partial          0      0       \n  Missed         291    291\n\nReview entire Coverage Diff as of 88c8b55\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 78.38%\nMerging #249 into master will increase coverage by +0.98% as of bf24397\n\ndiff\n@@            master    #249   diff @@\n======================================\n  Files           11      12     +1\n  Stmts         1257    1314    +57\n  Branches         0       0       \n  Methods          0       0       \n======================================\n+ Hit            973    1030    +57\n  Partial          0       0       \n  Missed         284     284\n\nReview entire Coverage Diff as of bf24397\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 76.90%\nMerging #252 into master will not affect coverage as of 8311f13\n\ndiff\n@@            master   #252   diff @@\n=====================================\n  Files           11     11       \n  Stmts         1260   1260       \n  Branches         0      0       \n  Methods          0      0       \n=====================================\n  Hit            969    969       \n  Partial          0      0       \n  Missed         291    291\n\nReview entire Coverage Diff as of 8311f13\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 76.90%\nMerging #253 into master will not affect coverage as of fb8e91d\n\ndiff\n@@            master   #253   diff @@\n=====================================\n  Files           11     11       \n  Stmts         1260   1260       \n  Branches         0      0       \n  Methods          0      0       \n=====================================\n  Hit            969    969       \n  Partial          0      0       \n  Missed         291    291\n\nReview entire Coverage Diff as of fb8e91d\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 77.03%\nMerging #254 into master will increase coverage by +0.13% as of 7265fe0\n\ndiff\n@@            master    #254   diff @@\n======================================\n  Files           11      11       \n  Stmts         1260    1267     +7\n  Branches         0       0       \n  Methods          0       0       \n======================================\n+ Hit            969     976     +7\n  Partial          0       0       \n  Missed         291     291\n\nReview entire Coverage Diff as of 7265fe0\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 76.90%\nMerging #256 into master will not affect coverage as of b0dcce2\n\ndiff\n@@            master   #256   diff @@\n=====================================\n  Files           11     11       \n  Stmts         1260   1260       \n  Branches         0      0       \n  Methods          0      0       \n=====================================\n  Hit            969    969       \n  Partial          0      0       \n  Missed         291    291\n\nReview entire Coverage Diff as of b0dcce2\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 77.28%\nMerging #257 into master will increase coverage by +0.38% as of 718e050\n\ndiff\n@@            master    #257   diff @@\n======================================\n  Files           11      11       \n  Stmts         1260    1250    -10\n  Branches         0       0       \n  Methods          0       0       \n======================================\n- Hit            969     966     -3\n  Partial          0       0       \n+ Missed         291     284     -7\n\nReview entire Coverage Diff as of 718e050\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 78.38%\nMerging #259 into master will not affect coverage as of 9f32e22\n\ndiff\n@@            master    #259   diff @@\n======================================\n  Files           12      12       \n  Stmts         1314    1314       \n  Branches         0       0       \n  Methods          0       0       \n======================================\n  Hit           1030    1030       \n  Partial          0       0       \n  Missed         284     284\n\nReview entire Coverage Diff as of 9f32e22\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 78.38%\nMerging #260 into master will not affect coverage as of 61e467c\n\ndiff\n@@            master    #260   diff @@\n======================================\n  Files           12      12       \n  Stmts         1314    1314       \n  Branches         0       0       \n  Methods          0       0       \n======================================\n  Hit           1030    1030       \n  Partial          0       0       \n  Missed         284     284\n\nReview entire Coverage Diff as of 61e467c\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 79.57%\nMerging #263 into master will increase coverage by +1.19% as of fd38434\n\ndiff\n@@            master    #263   diff @@\n======================================\n  Files           12      12       \n  Stmts         1314    1371    +57\n  Branches         0       0       \n  Methods          0       0       \n======================================\n+ Hit           1030    1091    +61\n  Partial          0       0       \n+ Missed         284     280     -4\n\nReview entire Coverage Diff as of fd38434\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 79.49%\nMerging #265 into master will not affect coverage as of c67369c\n\ndiff\n@@            master    #265   diff @@\n======================================\n  Files           12      12       \n  Stmts         1375    1375       \n  Branches         0       0       \n  Methods          0       0       \n======================================\n  Hit           1093    1093       \n  Partial          0       0       \n  Missed         282     282\n\nReview entire Coverage Diff as of c67369c\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 79.49%\nMerging #268 into master will increase coverage by +0.15% as of 49bcf8a\n\ndiff\n@@            master    #268   diff @@\n======================================\n  Files           12      12       \n  Stmts         1375    1375       \n  Branches         0       0       \n  Methods          0       0       \n======================================\n+ Hit           1091    1093     +2\n  Partial          0       0       \n+ Missed         284     282     -2\n\nReview entire Coverage Diff as of 49bcf8a\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 82.49%\nMerging #270 into master will increase coverage by +3.15% as of df58f38\n\ndiff\n@@            master    #270   diff @@\n======================================\n  Files           12      11     -1\n  Stmts         1375    1177   -198\n  Branches         0       0       \n  Methods          0               \n======================================\n- Hit           1091     971   -120\n  Partial          0       0       \n+ Missed         284     206    -78\n\nReview entire Coverage Diff as of df58f38\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 77.26%\nMerging #271 into master will decrease coverage by -2.08% as of b1801bf\n\ndiff\n@@            master    #271   diff @@\n======================================\n  Files           12      13     +1\n  Stmts         1375    1412    +37\n  Branches         0       0       \n  Methods          0       0       \n======================================\n  Hit           1091    1091       \n  Partial          0       0       \n- Missed         284     321    +37\n\nReview entire Coverage Diff as of b1801bf\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 79.34%\nMerging #278 into master will not affect coverage as of aa06e19\n\ndiff\n@@            master    #278   diff @@\n======================================\n  Files           12      12       \n  Stmts         1375    1375       \n  Branches         0       0       \n  Methods          0       0       \n======================================\n  Hit           1091    1091       \n  Partial          0       0       \n  Missed         284     284\n\nReview entire Coverage Diff as of aa06e19\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 79.27%\nMerging #281 into master will decrease coverage by -0.07% as of f93eb78\n\ndiff\n@@            master    #281   diff @@\n======================================\n  Files           12      12       \n  Stmts         1375    1370     -5\n  Branches         0       0       \n  Methods          0       0       \n======================================\n- Hit           1091    1086     -5\n  Partial          0       0       \n  Missed         284     284\n\nReview entire Coverage Diff as of f93eb78\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 79.34%\nMerging #282 into master will not affect coverage as of c539f04\n\ndiff\n@@            master    #282   diff @@\n======================================\n  Files           12      12       \n  Stmts         1375    1375       \n  Branches         0       0       \n  Methods          0       0       \n======================================\n  Hit           1091    1091       \n  Partial          0       0       \n  Missed         284     284\n\nReview entire Coverage Diff as of c539f04\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 79.34%\nMerging #282 into master will not affect coverage as of 6ffb5ac\n\ndiff\n@@            master    #282   diff @@\n======================================\n  Files           12      12       \n  Stmts         1375    1375       \n  Branches         0       0       \n  Methods          0       0       \n======================================\n  Hit           1091    1091       \n  Partial          0       0       \n  Missed         284     284\n\nReview entire Coverage Diff as of 6ffb5ac\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 82.14%\nMerging #283 into master will increase coverage by +2.87% as of 9334517\n\ndiff\n@@            master    #283   diff @@\n======================================\n  Files           12      12       \n  Stmts         1370    1322    -48\n  Branches         0       0       \n  Methods          0       0       \n======================================\n  Hit           1086    1086       \n  Partial          0       0       \n+ Missed         284     236    -48\n\nReview entire Coverage Diff as of 9334517\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 82.64%\nMerging #287 into master will increase coverage by +0.50% as of e1b2537\n\ndiff\n@@            master    #287   diff @@\n======================================\n  Files           12      13     +1\n  Stmts         1322    1406    +84\n  Branches         0       0       \n  Methods          0       0       \n======================================\n+ Hit           1086    1162    +76\n  Partial          0       0       \n- Missed         236     244     +8\n\nReview entire Coverage Diff as of e1b2537\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 82.64%\nMerging #289 into master will increase coverage by +0.50% as of e1b2537\n\ndiff\n@@            master    #289   diff @@\n======================================\n  Files           12      13     +1\n  Stmts         1322    1406    +84\n  Branches         0       0       \n  Methods          0       0       \n======================================\n+ Hit           1086    1162    +76\n  Partial          0       0       \n- Missed         236     244     +8\n\nReview entire Coverage Diff as of e1b2537\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 81.92%\nMerging #290 into master will decrease coverage by -0.22% as of 710dc7e\n\ndiff\n@@            master    #290   diff @@\n======================================\n  Files           12      12       \n  Stmts         1322    1328     +6\n  Branches         0       0       \n  Methods          0       0       \n======================================\n+ Hit           1086    1088     +2\n  Partial          0       0       \n- Missed         236     240     +4\n\nReview entire Coverage Diff as of 710dc7e\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 82.29%\nMerging #292 into master will decrease coverage by -0.14% as of d190108\n\ndiff\n@@            master    #292   diff @@\n======================================\n  Files           13      13       \n  Stmts         1412    1412       \n  Branches         0       0       \n  Methods          0       0       \n======================================\n- Hit           1164    1162     -2\n  Partial          0       0       \n- Missed         248     250     +2\n\nReview entire Coverage Diff as of d190108\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 82.97%\nMerging #293 into master will increase coverage by +0.54% as of 0625eba\n\ndiff\n@@            master    #293   diff @@\n======================================\n  Files           13      13       \n  Stmts         1412    1433    +21\n  Branches         0       0       \n  Methods          0       0       \n======================================\n+ Hit           1164    1189    +25\n  Partial          0       0       \n+ Missed         248     244     -4\n\nReview entire Coverage Diff as of 0625eba\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 82.97%\nMerging #293 into master will increase coverage by +0.54%\n\ndiff\n@@           master    #293   diff @@\n=====================================\n  Files          13      13          \n  Lines        1412    1433    +21   \n  Methods         0       0          \n  Branches        0       0          \n=====================================\n+ Hits         1164    1189    +25   \n+ Misses        248     244     -4   \n  Partials        0       0\n1. File Sources/Image.swift was modified. more \n   - Misses -2 \n   - Partials 0 \n   - Hits +2\n\n\nPowered by Codecov. Last updated by 0625eba\n. ## Current coverage is 79.53%\nMerging #299 into master will increase coverage by -2.90%\n\ndiff\n@@           master       #299   diff @@\n========================================\n  Files          13         47     +34   \n  Lines        1412       3976   +2564   \n  Methods         0          0           \n  Branches        0          0           \n========================================\n+ Hits         1164       3162   +1998   \n- Misses        248        814    +566   \n  Partials        0          0\n1. 9 files (not in diff) in ...ests/KingfisherTests were created. more\n2. 2 files (not in diff) in ...ocilla/Nocilla/Stubs were created. more\n3. 7 files (not in diff) in ...lla/Nocilla/Matchers were created. more\n4. 4 files (not in diff) in ...a/Hooks/NSURLRequest were created. more\n5. 3 files (not in diff) in ...Hooks/ASIHTTPRequest were created. more\n6. 2 files (not in diff) in ...ocilla/Nocilla/Hooks were created. more\n7. 3 files (not in diff) in .../Nocilla/Nocilla/DSL were created. more\n8. 2 files (not in diff) in ...a/Nocilla/Categories were created. more\n9. 2 files (not in diff) in Pods/Nocilla/Nocilla were created. more\n10. 12 files (not in diff) in Sources were modified. more \n    - Misses +42 \n    - Hits +220\n\n\nPowered by Codecov. Last updated by 9a32c01\n. ## Current coverage is 76.89%\nMerging #300 into master will decrease coverage by -2.64%\n\ndiff\n@@             master       #300   diff @@\n==========================================\n  Files            47         48     +1   \n  Lines          3976       4370   +394   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits           3162       3360   +198   \n- Misses          814       1010   +196   \n  Partials          0          0\n1. 2 files in Sources were modified. more \n   - Misses -13 \n   - Hits +114\n\nPowered by Codecov. Last updated by 905c841\n. ## Current coverage is 74.40%\nMerging #309 into master will increase coverage by +0.08%\n1. File ...mageDownloader.swift (not in diff) was modified. more \n   - Misses -2 \n   - Partials 0 \n   - Hits +2\n\ndiff\n@@             master       #309   diff @@\n==========================================\n  Files            14         14          \n  Lines          1621       1621          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits           1204       1206     +2   \n+ Misses          417        415     -2   \n  Partials          0          0\n\nPowered by Codecov. Last updated by 41d1b82...ae2789f\n. ## Current coverage is 74.28%\nMerging #312 into master will not change coverage\n\ndiff\n@@             master       #312   diff @@\n==========================================\n  Files            14         14          \n  Lines          1621       1621          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits           1204       1204          \n  Misses          417        417          \n  Partials          0          0\n\nPowered by Codecov. Last updated by 0e9a6ca...45940ec\n. ## Current coverage is 74.17%\nMerging #319 into 2.4.1 will decrease coverage by -0.13%\n\ndiff\n@@              2.4.1       #319   diff @@\n==========================================\n  Files            14         14          \n  Lines          1624       1622     -2   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n- Hits           1207       1203     -4   \n- Misses          417        419     +2   \n  Partials          0          0\n\nPowered by Codecov. Last updated by a7e2562...59ef69f\n. ## Current coverage is 74.25%\nMerging #332 into master will increase coverage by 0.21%\n1. File ...mageDownloader.swift (not in diff) was modified. more \n   - Misses -2 \n   - Partials 0 \n   - Hits +2\n\ndiff\n@@             master       #332   diff @@\n==========================================\n  Files            14         14          \n  Lines          1622       1651    +29   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits           1201       1226    +25   \n- Misses          421        425     +4   \n  Partials          0          0\n\nPowered by Codecov. Last updated by 7db7678...ba616c3\n. ## Current coverage is 74.04%\nMerging #334 into master will not change coverage\n\ndiff\n@@             master       #334   diff @@\n==========================================\n  Files            14         14          \n  Lines          1622       1622          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits           1201       1201          \n  Misses          421        421          \n  Partials          0          0\n\nPowered by Codecov. Last updated by 7db7678...39091e8\n. ## Current coverage is 71.77%\nMerging #342 into master will decrease coverage by 2.36%\n\ndiff\n@@             master       #342   diff @@\n==========================================\n  Files            14         13     -1   \n  Lines          1651       1534   -117   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n- Hits           1224       1101   -123   \n- Misses          427        433     +6   \n  Partials          0          0\n\nPowered by Codecov. Last updated by 26d3121...6a8a956\n. ## Current coverage is 74.21%\nMerging #346 into master will decrease coverage by 0.04%\n\ndiff\n@@             master       #346   diff @@\n==========================================\n  Files            14         14          \n  Lines          1651       1656     +5   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits           1226       1229     +3   \n- Misses          425        427     +2   \n  Partials          0          0\n\nPowered by Codecov. Last updated by 9a0e54c...036c4ba\n. ## Current coverage is 67.27%\nNo coverage report found for swift3 at aacbf04.\nPowered by Codecov. Last updated by aacbf04...acbb183\n. ## Current coverage is 74.13%\nMerging #363 into master will decrease coverage by 0.12%\n\ndiff\n@@             master       #363   diff @@\n==========================================\n  Files            14         14          \n  Lines          1651       1651          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n- Hits           1226       1224     -2   \n- Misses          425        427     +2   \n  Partials          0          0\n\nPowered by Codecov. Last updated by 0aec8be...238c4f3\n. ## Current coverage is 76.25% (diff: 76.27%)\nMerging #371 into master will increase coverage by 1.97%\n\ndiff\n@@             master       #371   diff @@\n==========================================\n  Files            14         18     +4   \n  Lines          1691       2055   +364   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits           1256       1567   +311   \n- Misses          435        488    +53   \n  Partials          0          0\n\nPowered by Codecov. Last update b1fa34e...3ac0dd1\n. ## Current coverage is 73.72% (diff: 86.66%)\nMerging #383 into master will increase coverage by 0.05%\n\ndiff\n@@             master       #383   diff @@\n==========================================\n  Files            14         14          \n  Lines          1656       1667    +11   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits           1220       1229     +9   \n- Misses          436        438     +2   \n  Partials          0          0\n\nPowered by Codecov. Last update ac99e1b...d977768\n. ## Current coverage is 73.93% (diff: 100%)\nMerging #385 into master will increase coverage by 0.26%\n\ndiff\n@@             master       #385   diff @@\n==========================================\n  Files            14         14          \n  Lines          1656       1665     +9   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits           1220       1231    +11   \n+ Misses          436        434     -2   \n  Partials          0          0\n\nPowered by Codecov. Last update ac99e1b...8f0a261\n. ## Current coverage is 73.67% (diff: 100%)\nMerging #386 into master will not change coverage\n\ndiff\n@@             master       #386   diff @@\n==========================================\n  Files            14         14          \n  Lines          1656       1656          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits           1220       1220          \n  Misses          436        436          \n  Partials          0          0\n\nPowered by Codecov. Last update ac99e1b...eae374d\n. ## Current coverage is 73.88% (diff: 100%)\nMerging #390 into master will increase coverage by 0.09%\n\ndiff\n@@             master       #390   diff @@\n==========================================\n  Files            14         14          \n  Lines          1656       1662     +6   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits           1222       1228     +6   \n  Misses          434        434          \n  Partials          0          0\n\nPowered by Codecov. Last update 86ae54d...bff7a87\n. ## Current coverage is 74.49% (diff: 88.88%)\nMerging #391 into master will increase coverage by 0.55%\n\ndiff\n@@             master       #391   diff @@\n==========================================\n  Files            14         14          \n  Lines          1673       1694    +21   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits           1237       1262    +25   \n+ Misses          436        432     -4   \n  Partials          0          0\n\nPowered by Codecov. Last update 633e424...6b37c4e\n. ## Current coverage is 73.73% (diff: 0.00%)\nMerging #399 into master will decrease coverage by 0.20%\n\ndiff\n@@             master       #399   diff @@\n==========================================\n  Files            14         14          \n  Lines          1673       1675     +2   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n- Hits           1237       1235     -2   \n- Misses          436        440     +4   \n  Partials          0          0\n\nPowered by Codecov. Last update 5a8bf00...5eea0b6\n. ## Current coverage is 73.81% (diff: 100%)\nMerging #408 into master will decrease coverage by 0.11%\n\ndiff\n@@             master       #408   diff @@\n==========================================\n  Files            14         14          \n  Lines          1673       1673          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n- Hits           1237       1235     -2   \n- Misses          436        438     +2   \n  Partials          0          0\n\nPowered by Codecov. Last update 6d65c5e...a2f2b9d\n. ## Current coverage is 73.81% (diff: 100%)\nMerging #412 into master will not change coverage\n\ndiff\n@@             master       #412   diff @@\n==========================================\n  Files            14         14          \n  Lines          1673       1673          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits           1235       1235          \n  Misses          438        438          \n  Partials          0          0\n\nPowered by Codecov. Last update 3bfc91d...441faab\n. ## Current coverage is 77.07% (diff: 82.34%)\nMerging #420 into swift3 will increase coverage by 3.73%\n\ndiff\n@@             swift3       #420   diff @@\n==========================================\n  Files            14         16     +2   \n  Lines          1628       2037   +409   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits           1194       1570   +376   \n- Misses          434        467    +33   \n  Partials          0          0\n\nPowered by Codecov. Last update 6f618f6...6eb0c0e\n. ## Current coverage is 74.27% (diff: 96.96%)\nMerging #422 into master will decrease coverage by 0.22%\n\ndiff\n@@             master       #422   diff @@\n==========================================\n  Files            14         14          \n  Lines          1694       1691     -3   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n- Hits           1262       1256     -6   \n- Misses          432        435     +3   \n  Partials          0          0\n\nPowered by Codecov. Last update f3b298a...61025bd\n. ## Current coverage is 73.04% (diff: 71.08%)\nMerging #425 into master will decrease coverage by 1.22%\n\ndiff\n@@             master       #425   diff @@\n==========================================\n  Files            14         16     +2   \n  Lines          1691       1755    +64   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits           1256       1282    +26   \n- Misses          435        473    +38   \n  Partials          0          0\n\nPowered by Codecov. Last update b1fa34e...126f42a\n. ## Current coverage is 72.55% (diff: 68.39%)\nMerging #430 into master will decrease coverage by 1.72%\n\ndiff\n@@             master       #430   diff @@\n==========================================\n  Files            14         16     +2   \n  Lines          1691       1767    +76   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits           1256       1282    +26   \n- Misses          435        485    +50   \n  Partials          0          0\n\nPowered by Codecov. Last update b1fa34e...841c6b6\n. ## Current coverage is 72.12% (diff: 100%)\nMerging #431 into master will decrease coverage by 0.11%\n\ndiff\n@@             master       #431   diff @@\n==========================================\n  Files            16         16          \n  Lines          1747       1747          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n- Hits           1262       1260     -2   \n- Misses          485        487     +2   \n  Partials          0          0\n\nPowered by Codecov. Last update 442982c...ea19442\n. ## Current coverage is 74.15% (diff: 65.47%)\nMerging #441 into master will decrease coverage by 2.38%\n\ndiff\n@@             master       #441   diff @@\n==========================================\n  Files            20         21     +1   \n  Lines          2106       2194    +88   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits           1612       1627    +15   \n- Misses          494        567    +73   \n  Partials          0          0\n\nPowered by Codecov. Last update 2c8ebc8...86159a4\n. ## Current coverage is 76.44% (diff: 0.00%)\nMerging #442 into master will decrease coverage by 0.09%\n\ndiff\n@@             master       #442   diff @@\n==========================================\n  Files            20         20          \n  Lines          2106       2106          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n- Hits           1612       1610     -2   \n- Misses          494        496     +2   \n  Partials          0          0\n\nPowered by Codecov. Last update 2c8ebc8...a2f3367\n. ## Current coverage is 73.71% (diff: 67.64%)\nMerging #445 into master will decrease coverage by 0.43%\n\ndiff\n@@             master       #445   diff @@\n==========================================\n  Files            21         21          \n  Lines          2194       2207    +13   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits           1627       1627          \n- Misses          567        580    +13   \n  Partials          0          0\n\nPowered by Codecov. Last update 8773312...c76c548\n. ## Current coverage is 74.24% (diff: 100%)\nMerging #446 into master will increase coverage by 0.09%\n\ndiff\n@@             master       #446   diff @@\n==========================================\n  Files            21         21          \n  Lines          2194       2194          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits           1627       1629     +2   \n+ Misses          567        565     -2   \n  Partials          0          0\n\nPowered by Codecov. Last update 8773312...9949522\n. ## Current coverage is 74.24% (diff: 100%)\nMerging #448 into master will increase coverage by 0.09%\n\ndiff\n@@             master       #448   diff @@\n==========================================\n  Files            21         21          \n  Lines          2194       2194          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits           1627       1629     +2   \n+ Misses          567        565     -2   \n  Partials          0          0\n\nPowered by Codecov. Last update b083fda...f5772a2\n. ## Current coverage is 74.40% (diff: 100%)\nMerging #456 into master will increase coverage by 0.25%\n\ndiff\n@@             master       #456   diff @@\n==========================================\n  Files            21         21          \n  Lines          2194       2196     +2   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits           1627       1634     +7   \n+ Misses          567        562     -5   \n  Partials          0          0\n\nPowered by Codecov. Last update 1118bd0...2b6b307\n. ## Current coverage is 73.57% (diff: 100%)\nMerging #467 into master will increase coverage by 0.04%\n\ndiff\n@@             master       #467   diff @@\n==========================================\n  Files            21         21          \n  Lines          2210       2214     +4   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits           1625       1629     +4   \n  Misses          585        585          \n  Partials          0          0\n\nPowered by Codecov. Last update 434ac82...5e4dd30\n. ## Current coverage is 73.96% (diff: 100%)\nMerging #499 into master will decrease coverage by 0.06%\n\ndiff\n@@             master       #499   diff @@\n==========================================\n  Files            21         21          \n  Lines          2214       2216     +2   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits           1639       1639          \n- Misses          575        577     +2   \n  Partials          0          0\n\nPowered by Codecov. Last update 6737c74...534e0b8\n. ## Current coverage is 74.02% (diff: 100%)\nMerging #500 into master will not change coverage\n\ndiff\n@@             master       #500   diff @@\n==========================================\n  Files            21         21          \n  Lines          2214       2214          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits           1639       1639          \n  Misses          575        575          \n  Partials          0          0\n\nPowered by Codecov. Last update 6737c74...73322a6\n. ## Current coverage is 74.05% (diff: 100%)\nMerging #501 into master will increase coverage by 0.02%\n\ndiff\n@@             master       #501   diff @@\n==========================================\n  Files            21         21          \n  Lines          2214       2216     +2   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits           1639       1641     +2   \n  Misses          575        575          \n  Partials          0          0\n\nPowered by Codecov. Last update 6737c74...9600307\n. ## Current coverage is 74.20% (diff: 93.75%)\nMerging #506 into master will not change coverage\n\ndiff\n@@             master       #506   diff @@\n==========================================\n  Files            21         21          \n  Lines          2229       2229          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits           1654       1654          \n  Misses          575        575          \n  Partials          0          0\n\nPowered by Codecov. Last update 61d09f3...a736572\n. ## Current coverage is 74.20% (diff: 100%)\nMerging #509 into master will increase coverage by 0.08%\n\ndiff\n@@             master       #509   diff @@\n==========================================\n  Files            21         21          \n  Lines          2229       2229          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits           1652       1654     +2   \n+ Misses          577        575     -2   \n  Partials          0          0\n\nPowered by Codecov. Last update 1e057c7...80c5560\n. ## Current coverage is 74.17% (diff: 60.00%)\nMerging #511 into master will increase coverage by 0.05%\n\ndiff\n@@             master       #511   diff @@\n==========================================\n  Files            21         21          \n  Lines          2229       2234     +5   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits           1652       1657     +5   \n  Misses          577        577          \n  Partials          0          0\n\nPowered by Codecov. Last update 1e057c7...0446a2d\n. ## Current coverage is 74.08% (diff: 100%)\nMerging #517 into master will decrease coverage by 0.08%\n\ndiff\n@@             master       #517   diff @@\n==========================================\n  Files            21         21          \n  Lines          2234       2234          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n- Hits           1657       1655     -2   \n- Misses          577        579     +2   \n  Partials          0          0\n\nPowered by Codecov. Last update 8158735...eae3ca5\n. ## Current coverage is 74.79% (diff: 80.00%)\nMerging #524 into master will increase coverage by 0.70%\n\ndiff\n@@             master       #524   diff @@\n==========================================\n  Files            21         21          \n  Lines          2234       2277    +43   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits           1655       1703    +48   \n+ Misses          579        574     -5   \n  Partials          0          0\n\nPowered by Codecov. Last update 0ebd09b...c49851a. ## Current coverage is 73.90% (diff: 10.00%)\nMerging #529 into master will decrease coverage by 0.24%\n\ndiff\n@@             master       #529   diff @@\n==========================================\n  Files            21         21          \n  Lines          2232       2238     +6   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n- Hits           1655       1654     -1   \n- Misses          577        584     +7   \n  Partials          0          0\n\nPowered by Codecov. Last update 743e3f2...c9d7f82. ## Current coverage is 73.89% (diff: 100%)\nMerging #540 into master will decrease coverage by <.01%\n\ndiff\n@@             master       #540   diff @@\n==========================================\n  Files            21         21          \n  Lines          2238       2241     +3   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits           1654       1656     +2   \n- Misses          584        585     +1   \n  Partials          0          0\n\nPowered by Codecov. Last update 402c933...45d0e94. ## Current coverage is 73.83% (diff: 100%)\nMerging #560 into master will not change coverage\n\ndiff\n@@             master       #560   diff @@\n==========================================\n  Files            21         21          \n  Lines          2240       2240          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits           1654       1654          \n  Misses          586        586          \n  Partials          0          0\n\nPowered by Codecov. Last update 61db70c...9e74c63. ## Current coverage is 73.63% (diff: 100%)\nMerging #566 into master will decrease coverage by 0.19%\n\ndiff\n@@             master       #566   diff @@\n==========================================\n  Files            21         21          \n  Lines          2240       2242     +2   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n- Hits           1654       1651     -3   \n- Misses          586        591     +5   \n  Partials          0          0\n\nPowered by Codecov. Last update 077fc0a...e459e89. ## Current coverage is 74.80% (diff: 100%)\nMerging #569 into master will decrease coverage by 0.05%\n\ndiff\n@@             master       #569   diff @@\n==========================================\n  Files            21         21          \n  Lines          2228       2231     +3   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits           1668       1669     +1   \n- Misses          560        562     +2   \n  Partials          0          0\n\nPowered by Codecov. Last update 515d3c0...61f7877. ## Current coverage is 74.80% (diff: 100%)\nMerging #570 into master will decrease coverage by 0.05%\n\ndiff\n@@             master       #570   diff @@\n==========================================\n  Files            21         21          \n  Lines          2228       2231     +3   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits           1668       1669     +1   \n- Misses          560        562     +2   \n  Partials          0          0\n\nPowered by Codecov. Last update 515d3c0...992f532. ## Current coverage is 74.83% (diff: 100%)\nMerging #571 into master will decrease coverage by 0.03%\n\ndiff\n@@             master       #571   diff @@\n==========================================\n  Files            21         21          \n  Lines          2228       2233     +5   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits           1668       1671     +3   \n- Misses          560        562     +2   \n  Partials          0          0\n\nPowered by Codecov. Last update 515d3c0...667bbe5. # Codecov Report\nMerging #574 into master will not impact coverage.\n\n```diff\n@@           Coverage Diff           @@\nmaster     #574   +/-\n=======================================\n  Coverage   74.84%   74.84%         \n=======================================\n  Files          21       21         \n  Lines        2226     2226         \n=======================================\n  Hits         1666     1666         \n  Misses        560      560\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ca02c9b...78c8368. Read the comment docs.. # Codecov Report\nMerging #578 into master will increase coverage by -0.01%.\n\n```diff\n@@            Coverage Diff             @@\nmaster     #578      +/-\n==========================================\n- Coverage   74.75%   74.75%   -0.01%   \n==========================================\n  Files          21       21            \n  Lines        2226     2218       -8   \n==========================================\n- Hits         1664     1658       -6   \n+ Misses        562      560       -2\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5eaf3de...fee7b8e. Read the comment docs.. # Codecov Report\nMerging #592 into master will decrease coverage by -0.22%.\n\n```diff\n@@            Coverage Diff             @@\nmaster     #592      +/-\n==========================================\n- Coverage   74.92%   74.71%   -0.22%   \n==========================================\n  Files          21       21            \n  Lines        2237     2246       +9   \n==========================================\n+ Hits         1676     1678       +2   \n- Misses        561      568       +7\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1da0c5a...5969fc3. Read the comment docs.. # Codecov Report\nMerging #598 into master will increase coverage by 0.01%.\nThe diff coverage is 100%.\n\n```diff\n@@            Coverage Diff             @@\nmaster     #598      +/-\n==========================================\n+ Coverage   74.71%   74.72%   +0.01%   \n==========================================\n  Files          21       21            \n  Lines        2246     2247       +1   \n==========================================\n+ Hits         1678     1679       +1   \n  Misses        568      568\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1add8d8...55a9ca4. Read the comment docs.. # Codecov Report\nMerging #599 into master will decrease coverage by -0.26%.\nThe diff coverage is 25%.\n\n```diff\n@@            Coverage Diff             @@\nmaster     #599      +/-\n==========================================\n- Coverage   74.72%   74.46%   -0.26%   \n==========================================\n  Files          21       21            \n  Lines        2247     2256       +9   \n==========================================\n+ Hits         1679     1680       +1   \n- Misses        568      576       +8\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 9f576cc...547b7f2. Read the comment docs.. # Codecov Report\nMerging #600 into master will decrease coverage by -0.06%.\nThe diff coverage is 72.22%.\n\n```diff\n@@            Coverage Diff             @@\nmaster     #600      +/-\n==========================================\n- Coverage   74.72%   74.66%   -0.06%   \n==========================================\n  Files          21       21            \n  Lines        2247     2262      +15   \n==========================================\n+ Hits         1679     1689      +10   \n- Misses        568      573       +5\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 9f576cc...fe4e84d. Read the comment docs.. # Codecov Report\nMerging #601 into master will decrease coverage by -0.05%.\nThe diff coverage is 75%.\n\n```diff\n@@            Coverage Diff             @@\nmaster     #601      +/-\n==========================================\n- Coverage   74.66%   74.62%   -0.05%   \n==========================================\n  Files          21       21            \n  Lines        2262     2266       +4   \n==========================================\n+ Hits         1689     1691       +2   \n- Misses        573      575       +2\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 2f47966...c1eaba3. Read the comment docs.. # Codecov Report\nMerging #620 into master will decrease coverage by -0.04%.\nThe diff coverage is 65.21%.\n\n```diff\n@@            Coverage Diff             @@\nmaster     #620      +/-\n==========================================\n- Coverage   75.67%   75.63%   -0.04%   \n==========================================\n  Files          21       21            \n  Lines        2269     2266       -3   \n==========================================\n- Hits         1717     1714       -3   \n  Misses        552      552\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5b6e4ae...20cf654. Read the comment docs.. # Codecov Report\nMerging #622 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster     #622   +/-\n=======================================\n  Coverage   75.63%   75.63%         \n=======================================\n  Files          21       21         \n  Lines        2266     2266         \n=======================================\n  Hits         1714     1714         \n  Misses        552      552\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 54351b1...5f6f063. Read the comment docs.. # Codecov Report\nMerging #630 into master will increase coverage by 0.17%.\nThe diff coverage is 83.78%.\n\n```diff\n@@            Coverage Diff             @@\nmaster     #630      +/-\n==========================================\n+ Coverage   75.63%   75.81%   +0.17%   \n==========================================\n  Files          21       21            \n  Lines        2266     2299      +33   \n==========================================\n+ Hits         1714     1743      +29   \n- Misses        552      556       +4\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4e80b0f...bfd540b. Read the comment docs.. # Codecov Report\nMerging #632 into master will increase coverage by 2.07%.\nThe diff coverage is n/a.\n\n```diff\n@@            Coverage Diff             @@\nmaster     #632      +/-\n==========================================\n+ Coverage   75.81%   77.89%   +2.07%   \n==========================================\n  Files          21       21            \n  Lines        2299     2352      +53   \n==========================================\n+ Hits         1743     1832      +89   \n+ Misses        556      520      -36\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a53f6f9...3a557f4. Read the comment docs.. # Codecov Report\nMerging #633 into master will not change coverage.\nThe diff coverage is 25%.\n\n```diff\n@@           Coverage Diff           @@\nmaster     #633   +/-\n=======================================\n  Coverage   75.81%   75.81%         \n=======================================\n  Files          21       21         \n  Lines        2299     2299         \n=======================================\n  Hits         1743     1743         \n  Misses        556      556\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a53f6f9...6552660. Read the comment docs.. # Codecov Report\nMerging #636 into master will not change coverage.\nThe diff coverage is 100%.\n\n```diff\n@@           Coverage Diff           @@\nmaster     #636   +/-\n=======================================\n  Coverage   75.81%   75.81%         \n=======================================\n  Files          21       21         \n  Lines        2299     2299         \n=======================================\n  Hits         1743     1743         \n  Misses        556      556\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c326010...f2573ca. Read the comment docs.. # Codecov Report\nMerging #639 into master will decrease coverage by 0.18%.\nThe diff coverage is 9.09%.\n\n```diff\n@@            Coverage Diff             @@\nmaster     #639      +/-\n==========================================\n- Coverage   75.81%   75.62%   -0.19%   \n==========================================\n  Files          21       21            \n  Lines        2299     2306       +7   \n==========================================\n+ Hits         1743     1744       +1   \n- Misses        556      562       +6\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 913b86c...7dc6d18. Read the comment docs.. # Codecov Report\nMerging #641 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster     #641   +/-\n=======================================\n  Coverage   75.81%   75.81%         \n=======================================\n  Files          21       21         \n  Lines        2299     2299         \n=======================================\n  Hits         1743     1743         \n  Misses        556      556\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 913b86c...cdb31cf. Read the comment docs.. \n",
    "fstrub": "Thanks! That works for me.\n. ",
    "HarriesChen": "@onevcat   Yes, i fix it in #190 \n. ",
    "andreyz": "SwiftLint stops Carthage build from finishing. My Cartfile is\ngithub \"onevcat/Kingfisher\" \"2.0.2\"\n. @onevcat maybe you've forgot to include your custom .swiftlint.yml?\n. It was probably SwiftLint's fault. Just updated to swiftlint v0.9.1 and Kingfisher builds with no errors\n. Closing this, given that PR 367 supersedes this one.\n. @onevcat OK. Feel free to cherry-pick changes to tests from this PR, since your other branch isn't Swift 3 compatible tests.\n. ",
    "tripleCC": "I guess there are more API can be simplified from an optional completionHandler to a non-option one, such as retrieveImageForKey:options:completionHandler:\u3002 How do you think about it?\n. It seems that writing let (options, targetCache, downloader) = parseOptionsInfo(optionsInfo)will not cause a complier error any more in retrieveImageWithResource:optionsInfo:progressBlock:completionHandler:\n. Cool!\n. ",
    "shahdhiren": "Thanks for prompt reply. \nCan we have include this as new feature request for the same? For now, I will try to use the alternate solution. But certainly I would try to modify Kingfisher to have this feature. And if successful then I will contribute here...\n. Sure, I will try to incorporate point 1. For now, I don't think I can immediately start working on this, but after 1 month due to other immediate tasks. I will talk to you before I will start working on this.\n. ",
    "ed-mejia": "Thanks @onevcat that's what I was thinking :disappointed_relieved:\n. ",
    "AaronKovacs": "So some googling revealed that by default images are rendered in a graphic context with alpha so to remove this you have to supply your own graphics context where you remove the alpha channel link. Performance wise I don't have any concrete sources other than being able to see how changing views to opaque boosts performance.\n. ",
    "taufikobet": "+1\nAlso for more reference: https://yalantis.com/blog/mastering-uikit-performance/\n. ",
    "SebastianCrow": "Hi @onevcat,\nwhat would be your recommendation to achieve a fully opaque image?\nThere is no built-in Kingfisher Image processor for that so rather creating a custom ImageProcessor removing an alpha channel from the source image?\nWhen you're loading a lot of images from the backend endpoint (and you can be sure that they're all opaque) to the collection, it's really helpful (performance wise) to avoid blending.\nMigrating to the UIGraphicsBeginImageContextWithOptions(size, true, scale) works but, as mentioned above, it's not a clean and generic solution.\nA quote from the Apple docs (https://developer.apple.com/library/content/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/LoadingImages/LoadingImages.html):\n\nRemove alpha channels from opaque PNG files. If every pixel of a PNG image is opaque, removing the alpha channel avoids the need to blend the layers containing that image. This simplifies compositing of the image considerably and improves drawing performance.\n\nThanks for help! :). OK, something like that works for me:\n```\nimport Kingfisher\nstruct OpaqueImageProcessor: ImageProcessor {\n// `identifier` should be the same for processors with same properties/functionality\n// It will be used when storing and retrieving the image to/from cache.\nlet identifier = \"com.sebastiancrow.OpaqueImageProcessor\"\n\n// Convert input data/image to target image and return it.\nfunc process(item: ImageProcessItem, options: KingfisherOptionsInfo) -> Image? {\n    switch item {\n    case .image(let image):\n        return getOpaqueImage(fromSourceImage: image, withScaleFactor: options.scaleFactor) ?? image\n\n    case .data(let data):\n        if let image = UIImage(data: data) {\n            return getOpaqueImage(fromSourceImage: image, withScaleFactor: options.scaleFactor) ?? image\n        }\n        return nil\n    }\n}\n\n///\n\nprivate func getOpaqueImage(fromSourceImage image: Image, withScaleFactor scale: CGFloat) -> Image? {\n    UIGraphicsBeginImageContextWithOptions(image.size, true, scale)\n    defer { UIGraphicsEndImageContext() }\n\n    image.draw(in: CGRect(origin: .zero, size: image.size))\n\n    return UIGraphicsGetImageFromCurrentImageContext()\n}\n\n}\n```\nThe only thing is that it needs to be appended at the end because another processors can overwrite this to the transparent context... Still good enough for my use case. Sorry for bringing a confusion ;). Hi @onevcat :)\nFYI, I had a slightly different problem. After applying a RoundCornerImageProcessor to the Image, it has been ending up with the white background color. It turned out that the JPEG image format is a reason because it obviously doesn't have an alpha channel. The PR like that could also \"fix\" this case so it would be possible to at least specify the background color instead of white (not saying about a more fancy stuff like converting the source image so it has an alpha channel so the clear background color would be possible).. Reference results\nInitial state -> a background color outside of the rounded image (JPEG, rounded .topLeft and .bottomLeft) is white:\n\nAfter an implementation, a background is set to the same color as the CollectionView:\n\nAlso, the blending is totally fine:\n\n. ",
    "xspyhack": "Hi, \u975e\u5e38\u611f\u8c22\u55b5\u5927\u7ed9\u6211\u4eec\u5e26\u6765\u8fd9\u4e48\u597d\u7528\u7684\u4e00\u4e2a\u5e93\u3002\n\u5728\u4f7f\u7528\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6211\u53d1\u73b0\u4e86\u4e00\u4e9b\u5185\u5b58\u76f8\u5173\u7684\u95ee\u9898\uff1a\n\u5f53\u52a0\u8f7d\u90e8\u5206 GIF \u56fe\u7247\u65f6\uff0cKingfisher \u4e2d\u5bf9 GIF \u56fe\u7247\u7684\u5904\u7406\uff0c\u4f1a\u4f7f\u5f97\u5185\u5b58\u7279\u522b\u5927\u3002\u6240\u4ee5\u6211\u5c1d\u8bd5\u8fc7\u7528\u5176\u4ed6\u7684\u65b9\u5f0fSwiftGif\u6765\u5904\u7406 UIImage\uff0c\u53d1\u73b0\u548c Kingfisher \u51e0\u4e4e\u4e00\u6837\u3002\n\u4f46\u662f\u7528 OLImageView + OLImage \u6216\u8005 YYImage + YYAnimatedImageView \u65f6\uff0c\u5185\u5b58\u7684\u4f7f\u7528\uff0c\u4f1a\u6bd4\u524d\u9762\u7684\u4e24\u79cd\u65b9\u5f0f\u5927\u5927\u7684\u51cf\u5c11\u3002\n\u4e00\u7ec4\u6d4b\u8bd5\u6570\u636e\uff1a\nKingfisher/SwiftGif image1: 106 MB, image2: 180 MB, image3: 201 MB\nOLImageView: image1: 37 MB, image2: 38 MB, image3: 39 MB\nYYWebImage: 32 MB, image2: 33 MB, image3: 36 MB\n\u6211\u5199\u4e86\u4e00\u4e2a Demo\n. Thanks,\n\u6211\u6765\u5c1d\u8bd5\u4e00\u4e0b\u3002\n. swift\nCannot form weak reference to instance (0x14ddb6e30) of class Kingfisher.AnimatedImageView.\nIt is possible that this object was over-released, or is in the process of deallocation.\nIt seems when displayLink object getting assigned is being deallocated. stopAnimating() or isAnimating() is being called within deinit, so that it will crash if setImage haven't be call ( so displayLink still nil ) before deinit.\n. It seems that this issue just happen when the image had be cached in the disk.\n. It works well with CacheSerializer, thanks for your help! \ud83d\udc90\n. @onevcat Hi, I added a short description for purpose.. poor performance. \ud83d\udc4d . sure. ",
    "TNikolai": "@onevcat Could you write example how to use authenticationChallengeResponder, basicaly i want to download image like this :\nimageView.kf_setImageWithURL(url, placeholderImage: UIImage(named: PlaceHolderImageName))\n. ",
    "GodIsI": "Thanks, that works just as I need. Appreciate the quick responses.\n. ",
    "dowhilenet": "\u67e5\u4e86\u67e5\uff0c\u597d\u50cf\u77e5\u9053\u4e86\u3002 \u662f\u5bf9 svg+xml\u8fdb\u884c\u4e86 base64\u7f16\u7801\u3002\u5f97\u5230\u7684 PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53..... \ud83d\ude04\n. ",
    "anohren": "Hello, thank you for your answer.\nI was thinking the same thing and tried some combinations without success. But now it seems that both your solution and assigning a new ephemeral session configuration work :+1: :+1: :+1: \n. Okay, I just found the KingfisherManager.sharedManager.retrieveImageWithURL(imageUrl, optionsInfo: .None, progressBlock: nil) which seems to do what I wanted :)\nI looked in the downloader first though (because of the name), and it wasn't apparent that the downloader didn't use the cache. Maybe you can refer future users to the manager methods instead if they want the cache to come into play.\n. ",
    "shailyglobal83": "hi, How to apply Signed cookies in Kingfisher, I have tried but unable to download image getting \"Forbidden\" error. That is what I am doing \n    let kingfisherManagerSession = KingfisherManager.shared.downloader.sessionConfiguration\n    kingfisherManagerSession.httpCookieStorage = HTTPCookieStorage.shared\n    KingfisherManager.shared.downloader.sessionConfiguration = kingfisherManagerSession\n\n    self.kf.setImage(with: _url, placeholder: #imageLiteral(resourceName: \"placeholder\"), options: [.requestModifier(modifier)], progressBlock: { (receivedSize, totalSize) in\n        let percentage = (Float(receivedSize) / Float(totalSize)) * 100.0\n        self.kf.indicatorType = .activity\n        print(percentage)\n    }) { (image, error, cacheType, url) in\n        print(error?.localizedDescription)\n    }\n\nCan you please help me what am I doing wrong?. ",
    "shintarogit": "@shailyglobal83 \nchange\nlet kingfisherManagerSession = KingfisherManager.shared.downloader.sessionConfiguration\nkingfisherManagerSession.httpCookieStorage = HTTPCookieStorage.shared\nKingfisherManager.shared.downloader.sessionConfiguration = kingfisherManagerSession\nto\nKingfisherManager.shared.downloader.sessionConfiguration = URLSessionConfiguration.default. ",
    "dopcn": "\u6536\u5230@onevcat  \u4e4b\u524d\u6ca1\u6709\u6ce8\u610f\u5230callbackDispatchQueue\u8fd9\u4e2a\u9009\u9879\uff0c\u5728manager \u4e2d\u589e\u52a0\u4e00\u4e2acompletionQueue \u7684\u65b9\u6cd5\u7684\u786e\u91cd\u590d\u4e86\u3002\u65b0\u7684commit \u4f7f\u7528callbackDispatchQueue\u3002\n\u65b0\u7684commit \u91cc\u4fee\u6539\u4e86KingfisherOptionsInfo \u4e2dvar callbackDispatchQueue \u7684\u8fd4\u56de\u503c\uff0c\u8fd4\u56de\u4e00\u4e2aoptional \u7c7b\u578b\u503c\u3002\u8fd9\u4e48\u505a\u662f\u4e3a\u4e86\u907f\u514d\u53ef\u80fd\u53d1\u751f\u5728\u4e3b\u7ebf\u7a0b\u8c03\u7528 dispatch_async(dispatch_get_main_queue(),...)\uff0c\u81f3\u4e8e\u4e3a\u4ec0\u4e48\u8981\u907f\u514d\u8fd9\u79cd\u8c03\u7528\u6211\u662f\u56e0\u4e3a\u9047\u5230\u8fc7\u8fd9\u4e48\u505a\u6709\u65f6\u4f1a\u5bfc\u81f4\u56fe\u7247\u95ea\u52a8\u4e00\u4e0b\uff0cThreadHelper \u91cc\u7684\u51fd\u6570\u4e2dNSThread.isMainThread() \u7684\u5224\u65ad\u6b65\u9aa4\u53ef\u4ee5\u907f\u514d\u95ea\u52a8\uff0c\u4e0d\u8fc7\u6ca1\u529e\u6cd5\u89e3\u91ca\u6e05\u695a\u6709\u65f6\u4f1a\u9020\u6210\u95ea\u52a8\u7684\u539f\u56e0\uff0c\u4e0d\u77e5\u9053\u55b5\u795e\u589e\u52a0\u8fd9\u4e2aThreadHelper \u662f\u4e0d\u662f\u56e0\u4e3a\u8fd9\u4e2a\u539f\u56e0\uff0c\u5982\u679c\u662f\u7684\u8bdd\u600e\u4e48\u5206\u6790\u6709\u65f6\u4f1a\u9020\u6210\u95ea\u52a8\u7684\u539f\u56e0\uff0c\u662f\u56e0\u4e3a completion block \u5728 next runloop iteration \u6240\u4ee5imageView \u88ab\u91cd\u753b\u4e86\u4e00\u6b21\uff1f\n. @onevcat \u8fd9\u662f\u4e00\u76f4\u5728\u7ebf\u5417\u2026\u2026\n\u6211\u91cd\u65b0\u8fc7\u4e86\u4e00\u4e0b\u4e0b\u8f7d\u548c\u7f13\u5b58\u7684\u7ebf\u7a0b\u7ba1\u7406\u5b9e\u73b0\uff0c\u89c9\u5f97\u76f4\u63a5\u5f80manager \u91cc\u52a0\u6709\u5173\u7ebf\u7a0b\u7ba1\u7406\u7684\u903b\u8f91\uff08\u539f\u672c\u662f\u5b8c\u5168\u6ca1\u6709\u7684\uff09\u603b\u4f53\u4e0a\u662f\u5f0a\u5927\u4e8e\u5229\u589e\u52a0\u4e86\u4e0d\u5fc5\u8981\u7684\u590d\u6742\u5ea6\u3002\u6240\u4ee5\u60f3\u53e6\u5916\u4eceImageDownloader \u548cImageCache \u91cc\u5c1d\u8bd5\u5b9e\u73b0\u3002\u521a\u521a\u8fd8\u5728\u60f3\u600e\u4e48\u8bf4\u660e\u8fd9\u4e2a\u2026\u2026\n. \u53e6\u5916 manager \u5176\u5b9e\u5e76\u4e0d\u4f1a\u771f\u6b63\u8c03\u7528progress block \u548c completion handler\uff0c\u4ed6\u4eec\u53ea\u662f\u7ecf\u8fc7manager \u4f20\u9012\u7ed9 ImageDownloader \u6216 ImageCache\uff0c\u5728\u4f20\u9012\u7684\u8fc7\u7a0b\u4e2d dispatch \u611f\u89c9\u4e0d\u662f\u5f88\u597d\n. ImageDownloader \u91cc\u7684 sessionDelegationQueue \u662f\u6a21\u4eff AFNetworking \u91cc\u7684\u5904\u7406\uff0c\u5176\u5b9e\u8bf4\u8d77\u6765\u6574\u4e2a\u6539\u52a8\u7684\u8d77\u56e0\u90fd\u662f\u89c9\u5f97 AFNetworking \u91cc\u5bf9 queue \u7684\u5904\u7406\u65b9\u5f0f\u975e\u5e38 elegant\uff0c\u4ece\u4f7f\u7528\u8005\u7684\u89d2\u5ea6\u6765\u8bf4\u53ea\u9700\u8981\u914d\u7f6e\u597d\u5e93\u9009\u9879\uff0c\u4f7f\u7528\u63a5\u53e3\u65f6\u5b8c\u5168\u4e0d\u9700\u8981\u518d\u8003\u8651 queue dispatch\uff0c\u6240\u4ee5\u5e0c\u671b\u80fd\u628a\u8fd9\u4e00\u7279\u6027\u5f15\u5165 KingfisherManager\uff0c\u76ee\u524d\u770b\u6765\u5e94\u8be5\u662f\u4e0d\u6210\u529f\uff0c\u53ef\u80fd\u662f\u56e0\u4e3a AF \u91cc\u6838\u5fc3\u529f\u80fd\u57fa\u672c\u90fd\u5728 manager \u91cc\uff0c\u7136\u800c Kingfisher \u7684\u6838\u5fc3\u903b\u8f91\u662f\u5206\u5728\u4e24\u4e2a\u4e0d\u540c\u7684\u7c7b\u91cc cache \u548c downloader\uff0c\u6240\u4ee5\u4e0d\u80fd\u76f4\u63a5\u7167\u642c\u3002\u63a5\u4e0b\u6765\u518d\u8fdb\u884c\u5c1d\u8bd5\u5427\n\u53e6\u5916\u5bf9\u4e8e\u8fd9\u4e2a image extension \u56de\u8c03\u5fc5\u5b9a\u5728 main queue \u7684\u4fdd\u8bc1 \uff08\u4e0e options \u4e2d\u6307\u5b9a\u7684 queue \u65e0\u5173\u3002\uff09\u6211\u89c9\u5f97\u5982\u679c\u4ece\u4e00\u4e2a\u8981\u63d0\u4f9b\u7ed9\u522b\u4eba\u7528\u7684\u5e93\u89d2\u5ea6\u8bb2\uff0c\u628a\u8fd9\u4e2a\u903b\u8f91\u5199\u6b7b\u5728\u5e93\u91cc\u4e0d\u4e00\u5b9a\u662f\u4e00\u4e2a\u597d\u9009\u62e9\u3002\u5e93\u63d0\u4f9b\u7684\u662f\u4e0d\u540c\u7684\u914d\u7f6e\u9009\u9879\u548c\u7528\u6237\u9009\u62e9\u4e86\u67d0\u4e2a\u9009\u9879\u4e4b\u540e\u80fd\u591f\u6210\u529f\u5730\u5b9e\u73b0\u8be5\u9009\u9879\u7684\u6548\u679c\uff0c\u7528\u6237\u5e94\u8be5\u81ea\u5df1\u8d1f\u8d23\u5728\u4f7f\u7528\u5e93\u65f6\u9009\u62e9\u6b63\u786e\u7684\u9009\u9879\u3002\u5728\u8fd9\u4e2a\u4f8b\u5b50\u91cc\u5c31\u662f Kingfisher \u63d0\u4f9b\u9ed8\u8ba4\u548c\u81ea\u5b9a\u4e49\u4e24\u4e2a\u9009\u9879\uff0c\u9009\u62e9\u9ed8\u8ba4\u56de\u8c03\u5c31\u4f1a\u5728\u4e3b\u7ebf\u7a0b\uff0c\u9009\u62e9\u81ea\u5b9a\u4e49\u5c31\u4f1a\u5728\u81ea\u5b9a\u4e49 queue\u3002\u5982\u679c\u7528\u6237\u5728 UIKit extension \u8fd9\u79cd\u5e94\u8be5\u5728\u4e3b\u7ebf\u7a0b\u56de\u8c03\u7684\u65b9\u6cd5\u91cc\u5374\u81ea\u5b9a\u4e49\u4e86\u975e main queue \u90a3\u4e48\u8fd9\u662f\u4e00\u4e2a\u7528\u6237\u9519\u8bef\uff0c\u5e94\u8be5\u6539\u7684\u662f\u4ed6\u81ea\u5df1\u7684\u8c03\u7528\u4ee3\u7801\n\u6700\u540e\u6211\u4e0d\u662f\u5f88\u6e05\u695a\u6210\u4e3a\u9879\u76ee maintainer \u6709\u4ec0\u4e48\u5176\u4ed6\u6743\u9650\uff0c\u4e0d\u8fc7\u5f88\u8363\u5e78\u53ef\u4ee5\u6210\u4e3a maintainer \u7684\u4e00\u5458\n. OK\n. ",
    "cache0928": "\u65b0\u7248\u672c\u4e0b\u8c8c\u4f3c\u67d0\u4e9bjpg\u4e5f\u4f1a\u51fa\u73b0\u4e0b\u8f7d\u95ee\u9898\uff0c\u4f8b\u5982\u56fe\u7247\uff1ahttp://ww2.sinaimg.cn/bmiddle/66966373jw1f108cxxuw4j20bl0rswh8.jpg\n. ",
    "Tarpsvo": "Thank you for clearing that up for me, it does work as intended when I clear the cache. I use Kingfisher to switch between images in a view and sometimes it flashes the view background color before loading the image. Is that an indication of using the disk cache?\nThanks again.\n. ",
    "tooolbox": "\nCurrently, the image transition will only work when the image is downloaded. Support for forcing transition is in plan but not implemented yet.\n\nJust ran into this same behavior; did this never get implemented?  Should I do a PR?  \ud83d\ude04 . ",
    "Jatstar": "` \ndispatch_group_enter(group)\n```\n            let downloader = KingfisherManager.sharedManager.downloader\n        downloader.downloadImageWithURL(url, progressBlock: nil, completionHandler: { (image, error, imageURL, originalData) -> () in\n            dispatch_group_leave(group)\n        })\n    }\n\n```\n`\n??? am I right?\n. ",
    "grantmk": "Never mind, I was being stupid - referencing the wrong item in Storyboards!\n. ",
    "mrstone": "+1 This would be a great addition\n. ",
    "greg3z": "Got it, thank you ;)\n. ",
    "ivanbruel": "I've actually been using my own fork with a primitive version of an image filter block, still needs polish before doing a PR though. (https://github.com/ivanbruel/Kingfisher)\n. ",
    "nitinbizsingh": "@onevcat This will also be useful in the situation where the image source is not in your control and supplies higher or lower resolution images. In such cases we can do the resizing based on UiImageView size before applying it instead of doing it on the fly which has impact on performance.\n. ",
    "burczyk": "Great news. Thanks for providing some implemented processors!\n. ",
    "krider2010": "@onevcat can you confirm what it would be better to do in point 1. ? It got cut off!\nAs for point 2. I did mention above \"It is a simple implementation, using default managers etc. but could be expanded upon pretty easily to use different managers, downloaders, and queues etc.\" but I had no time to do this for our needs. I think it is a perfectly acceptable initial/default case. The solution here is to expand it more which I can look at doing.\n. @onevcat let me know what you think of the latest changes :)\n. I'll happily move it to ImageCache but I feel it is important for our use case with prefetching as we do not care what the cache is doing. We let the library do that!\n. I'll clear it up.\n. ",
    "kylejm": "Thank you for the details response, that's a really good reply. I respect your decision, it's very well thought out.\nIn regards to your comments on Carthage being able to build specified frameworks, do you mean being able to specify a platform? So for example saying you want an iOS version of the framework as apposed to Mac? If so, you can do this. Or are you meaning to specifying something else?\n. Yeah I agree with all of these points.\nI kinda feel like Carthage is been a bit slower since Justin Spahr-Summers went to Facebook. \nPerhaps it will slow in momentum more as SPM gets closer to being integrated with Xcode.\n. ",
    "kbpontius": "Good suggestion, I'll give it a shot. Thanks!\n. ",
    "jm-schaeffer": "For the record, here's how you can set it with kf.indicator:\nswift\n(imageView.kf.indicator?.view as? UIActivityIndicatorView)?.color = .white\nI don't really like all those ? but I think that's the best way to do it.\nAnother solution would be to add an associated value to .activity but it would break existing projects.\nswift\npublic enum IndicatorType {\n    /// No indicator.\n    case none\n    /// Use system activity indicator.\n    case activity(let color: UIColor?) // Too bad we cannot set its default value to nil\n    /// Use an image as indicator. GIF is supported.\n    case image(imageData: Data)\n    /// Use a custom indicator, which conforms to the `Indicator` protocol.\n    case custom(indicator: Indicator)\n}\nExisting projects would have to change .kf.indicatorType = .activity to .kf.indicatorType = .activity(color: nil).. ",
    "korzonek": "@onevcat thank you! I will open a new pull request :)\n. ",
    "wgywgy": "```\nprivate let pngHeader: [UInt8] = [0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A]\nprivate let jpgHeaderSOI: [UInt8] = [0xFF, 0xD8]\nprivate let jpgHeaderIF: [UInt8] = [0xFF]\nprivate let gifHeader: [UInt8] = [0x47, 0x49, 0x46]\n// MARK: - Image format\nenum ImageFormat {\n    case Unknown, PNG, JPEG, GIF\n}\nextension NSData {\n    var kf_imageFormat: ImageFormat {\n        var buffer = UInt8\n        self.getBytes(&buffer, length: 8)\n        if buffer == pngHeader {\n            return .PNG\n        } else if buffer[0] == jpgHeaderSOI[0] &&\n            buffer[1] == jpgHeaderSOI[1] &&\n            buffer[2] == jpgHeaderIF[0]\n        {\n            return .JPEG\n        }else if buffer[0] == gifHeader[0] &&\n            buffer[1] == gifHeader[1] &&\n            buffer[2] == gifHeader[2]\n        {\n            return .GIF\n        }\n    return .Unknown\n}\n\n}\n```\n\u5e0c\u671b\u80fd\u5e2e\u5230\u4f60\uff0cMagic number\n\u6216\u8005\u662f\u53d6Content type\uff0c\u4e0d\u8fc7\u6709\u53ef\u80fd\u4e0d\u51c6\n. ",
    "eggeggeg": "\u8b1d\u8b1d\u5404\u4f4d\u5e6b\u5fd9\uff0c\u5c0f\u5f1f\u7684\u554f\u984c\u5df2\u89e3\u6c7a\u3002\n\u81ea\u5df1\u5728trace\u7684\u6642\u5019\u6709\u770b\u5230\u9019\u6bb5\uff0c\u5df2\u7d93\u662fNSData\u53bb\u8f49\uff0c\u5f8c\u4f86\u767c\u73fe\u662f\nNSURLSessionConfiguration.ephemeralSessionConfiguration \u9019\u884c\u6703\u6e05\u6389\u7db2\u7ad9\u7684Session\u5c31\u88ab\u767b\u51fa\uff0c\u5c0e\u81f4\u6293\u4e0d\u5230\u5716\u7247\u3002\n. ",
    "codwam": "+1\nIt need to cache manually...\nImageCache.defaultCache.storeImage(self, forKey: url.absoluteString)\n. Yes, happens every time.\nI use in https://github.com/WenchaoD/FSPagerView. It only happens in my project with iOS8 simulator.\nWhen I new a demo which only pod Kingfisher and FSPagerView, it's no problem, but no quite same with my project.. Have no ideas to reproduce.. ",
    "macbaszii": "@yonaskolb I changed to use SDWebImage for an extension.\n. ",
    "xiaoxiaocainiao": "giphy is very popular. i just want to extension UIImageView class, add a methord for it,  with this methord , u can switch the starting animation and  stop animation more simple.  i think   #187 is a  simpler solution to do this.  thank you~\n. ",
    "nikita-afonasov": "I didn't verify the exact version, just have it as a pod in my project (without specifying the exact version in the podfile). Sorry for bothering in this case, something wrong at my end.\n. ",
    "mmonroe86": "@onevcat I am unable to decompress gzipped files post download, with the .backgroundDecode option set. Is this the correct option to use in this instance?. ",
    "frankrausch": "Hi,\njust wanted to ask if you ~~need~~ would like any help with this.\nI have solved the potential demo file \u201cworkspace pollution\u201d in one of my projects by adding a subfolder for the demo project:\nhttps://github.com/frankrausch/Typographizer\nSo how about adding a subfolder KingfisherDemo and then adding the framework to the demo?\nThanks.. Yeah, sorry\u2014I took another look and found out that everything is already in place, except for a separate demo app project. :). Which would be the best commit to build a PR on? Latest commit on master?. Cool, I\u2019ll give it a try now. \ud83d\ude05. Done.. I fixed (or at least improved) it this morning, see #467 \n. Do you remember which version you had before? That would make it easier to isolate the problem.\nI took a quick look at the blurred function but didn\u2019t see anything suspicious (like a complex equation in one line).. Amazing! Still unbelievable that splitting the statement into 3 lines makes such a huge compile time difference.. Hmmm, these failing Travis tests have nothing to do with my changes, right? @onevcat. Cool, thanks. Travis now says: \u201cAll checks have passed\u201d \ud83c\udf89. Thank you\u2014perfect!. Ah, I didn\u2019t think of that. Thank you very much for the quick reply! I will give it a try and come back to this thread if I see any issues with the approach you suggested.. ",
    "FredholmIsak": "Yep, I am getting this exact error aswell.\n. ",
    "AhmadFayyas": "Referring to your answer, could you please advice for solving this question?. ",
    "arn00s": "Thx @onevcat ! :+1: \n. @camill-a I can't find back the code, I finally used Alamofire and Alamofire-Image !\n. ",
    "liuweicode": "Very useful, thanks!. ",
    "zwang": "Thanks for fixing this. Had the same issue. After figured it might be related to this library, I came here and already saw a solution for it. :+1: \n. Got the same issue a lot from our users in Fabric, although personally I was never able to reproduce it.\nMy understanding is this EXC_BREAKPOINT happens when trying to access a nil object? But by checking the code, I don't see any where could lead to this error.  \nProbably like @onevcat has said, this could be an issue with semaphore.  \n@onevcat  do you have any more thoughts about this issue? Do you think there could be a workaround for this? Like refactoring the code to not using semaphore? Since there is only one place using semaphore,  I can try to get a PR together if that is OK.\nThanks.\n#0Crashed: com.apple.main-thread EXC_BREAKPOINT 0x000000018339a63c\nCrashed: com.apple.main-thread\n0  libdispatch.dylib              0x18339a63c _os_object_retain$VARIANT$mp + 72\n1  Kingfisher                     0x1020efe34 specialized ImageDownloaderSessionHandler.callCompletionHandlerFailure(error : Error, url : URL) -> () (ImageDownloader.swift:578)\n2  Kingfisher                     0x1020f1188 specialized ImageDownloaderSessionHandler.urlSession(URLSession, task : URLSessionTask, didCompleteWithError : Error?) -> () (ImageDownloader.swift:528)\n3  Kingfisher                     0x1020e98a4 @objc ImageDownloaderSessionHandler.urlSession(URLSession, task : URLSessionTask, didCompleteWithError : Error?) -> () (ImageDownloader.swift)\n4  CFNetwork                      0x1841fb760 __51-[NSURLSession delegate_task:didCompleteWithError:]_block_invoke.207 + 76\n5  Foundation                     0x1844cee88 __NSBLOCKOPERATION_IS_CALLING_OUT_TO_A_BLOCK__ + 16\n6  Foundation                     0x1844108d0 -[NSBlockOperation main] + 72\n7  Foundation                     0x18440fcac -[__NSOperationInternal _start:] + 848\n8  libdispatch.dylib              0x183398ae4 _dispatch_client_callout + 16\n9  libdispatch.dylib              0x1833a01f4 _dispatch_block_invoke_direct$VARIANT$mp + 224\n10 libdispatch.dylib              0x183398ae4 _dispatch_client_callout + 16\n11 libdispatch.dylib              0x1833a01f4 _dispatch_block_invoke_direct$VARIANT$mp + 224\n12 libdispatch.dylib              0x1833a00e0 dispatch_block_perform$VARIANT$mp + 104\n13 Foundation                     0x1844d0750 __NSOQSchedule_f + 376\n14 libdispatch.dylib              0x183398ae4 _dispatch_client_callout + 16\n15 libdispatch.dylib              0x1833a56e0 _dispatch_main_queue_callback_4CF$VARIANT$mp + 1012\n16 CoreFoundation                 0x183a4f070 __CFRUNLOOP_IS_SERVICING_THE_MAIN_DISPATCH_QUEUE__ + 12\n17 CoreFoundation                 0x183a4cbc8 __CFRunLoopRun + 2272\n18 CoreFoundation                 0x18396cda8 CFRunLoopRunSpecific + 552\n19 GraphicsServices               0x18594f020 GSEventRunModal + 100\n20 UIKit                          0x18d94d78c UIApplicationMain + 236\n21 Pla                            0x100c32918 main (AppDelegate.swift:23)\n22 libdyld.dylib                  0x1833fdfc0 start + 4. Likely fixed here: https://github.com/onevcat/Kingfisher/pull/1122. Thanks @onevcat . That's super fast reply.  \ud83d\udc4d  I was going to add the version but interrupted. Thought I could add later before you reply. Sorry. :)\nI have the latest version of 5.1.1 because I manually merged everything from latest master to my fork in this branch https://github.com/zwang/Kingfisher/tree/ios9 . The revision we were using is https://github.com/zwang/Kingfisher/commit/df7c452d351b292b43bbdf741e574794e38b5bde, in which you can see there are the changes of 5.1.1. \nThe difference is I still need to support iOS 9 so I have manually applied this patch: https://github.com/zwang/Kingfisher/commit/71b6dcb85dd828e0df91e905a89f9544b49dda77 \nTo make sure I am using the exact latest version of 5.1.1, I am going to make a build of our app based on Kingfisher 5.1.1 release in this repo and test again. I will report back in about 4-5 hours. \nThank you for jumping on this fast. \ud83d\udc4d \ud83d\ude4f \n. I updated the minimal target to 10.0 for our app and then use Kingfisher 5.1.1 from this repository. Still get the same error as below:\n\n\nI am using Xcode 10.1 (10B61), debugging on iPhone X with iOS 12.1.4.. > Do you have a chance to try this branch fix/locks?\n@onevcat thanks a lot. You beat me again. I was going to try the same thing you just did since I just caught up with the code after reading some documents for NSLock. But then I found you made this branch 3 hours ago!\nI am trying that now.  Thank you very much!. @onevcat After trying the fix for 25 minutes without a crash, I think it is safe to say this commit https://github.com/onevcat/Kingfisher/commit/7742aff5ffafb530f98e11058c6a814b9bb77373 fixed the issue. Usually I can get a crash without the fix in like 1 minute of scrolling. \nThanks a lot for the fix. I really appreciate it. \ud83d\udc4d \ud83d\ude4f. \ud83d\udc4d  Can we have this merged to iOS 9 please? Thank you :). ",
    "VladislavJevremovic": "Thanks for a quick response! ;)\n. ",
    "jaimeagudo": "I confirm it's not supported, I have suffered it myself implementing a 307 with NGINX and HSTS as iOS requirement to server images through https is coming. You can test it with \nhttps://p.aidto.party:41337/parse/files/Paid2Party/ca398f02933ab89ddd0b9f3f43bfbcd5_p1w7xaoRAL_0.jpg, the browser does it just fine.\nI think it worth to mention on the docs. Thanks for sharing the good work guys \ud83d\udc4d  . ",
    "bluesoulx": "@onevcat Today I try this url with Kingfisher\nI can confirm this is fixed! Thanks for your helps ^^. ",
    "Foriger": "Hi guys, sorry for hijacking this issue, but I have a question related to that :)\nI have  GET REST call, which returns 302 and redirects to Azure Blob store URL.To download image correctly I need to modify Blob store URL a bit (I need to add one key to URL).Is this possible with your library?. ",
    "sukhvir1313": "It is resolved now, I think problem was with imageview's drag and drop into related view controller. After doing all that process again, everything resolved.\nThanks\n. ",
    "avityagi5": "I am face same problem.\nMay be I am doing some wrong\nSample : \nif let imageUrl = AdvisorInfoModel.info.clientDetails[sections[indexPath.section].index + indexPath.row].objectForKey(\"avatarUrl\") as? String\n            {\n                clientImageView.kf_setImageWithURL(NSURL(string: imageUrl)!)\n            }\nThanks\n. Thanks it helped a lot...\nAlso got a workaround by:\noverride func prepareForReuse() {\n        clientImage.image = UIImage(named: \"default_profile\")\n    }\n. ",
    "jzau": "I think you can remove some codes of os version check in UIButton extension file as well.\n. @BrikerMan\nfunc collectionView(_ collectionView: UICollectionView, prefetchItemsAt indexPaths: [IndexPath]) This function is called multiple times when you scrolling, while the code inside this function is not associated with indexPaths. which means ImagePrefetcher(urls: links).start() will be called multiple times with the same links.\nCan you please try to move ImagePrefetcher(urls: links).start() somewhere else and let me know how it goes?. @KimiChiu \nFrom my understanding, backgroundDecode doesn't support gif for now, please see https://github.com/onevcat/Kingfisher/issues/625. This is probably because you have included special characters in your URL. Please try to encode your URL before setImage(with: url). It works.. ",
    "kylebegeman": "Any updates? Getting the same leak\n. ",
    "Hesse-Huang": "\u55ef\u55ef\uff0c\u6211\u5c06Kingfisher\u75312.1.0\u66f4\u65b0\u5230\u6700\u65b0\u5c31\u89e3\u51b3\u4e86\u3002\n\u8c22\u8c22\u55b5\u795e\uff0c\u6211\u8fd8\u6253\u7b97\u91cd\u5199\u6211\u81ea\u5df1\u7684\u4ee3\u7801\u5462\u3002\n. ",
    "DavdRoman": "Sounds about right. Would you be interested in somebody implementing this particular feature? I think it'd be a nice thing to have within the main framework.\n. In my case, my app handles images coming from both disk and web (like iCloud Photo Library does), so it'd pretty convenient not to have to worry about the source of the images when loading and displaying them. I could build some abstraction on top of Kingfisher and my own local caching mechanism, but I like how other caches provide this out of the box (e.g. Haneke).\n. I wasn't actually meaning loading photos from iCloud or the photo library, but rather loading them from a local path (Documents folder). I don't believe this would require any breaking changes, just a new mechanism similar to KingfisherManager.sharedManager.downloader for local images.\n. ",
    "mkc842": "Hi there,\nI would like to be able to determine synchronously whether I can immediately access a cached image. I don't want to wait for an async block to complete (albeit very quickly if cached\u2014or at indeterminate length if downloading) before deciding how to proceed. I think this is along the lines of your discussion. Any suggestions? Thanks!\n. ",
    "jaipee1": "\nFirst of all, great work here @onevcat \ud83c\udf7b\nI was wondering if Kingfisher allows for loading and caching images from disk (local paths) as well as downloading. Maybe I skipped some part of the docs where it's said, but I can't quite find it.\n\n@onevcat @DavdRoman \ni think you need this for locally image show on image view:-\n```\nextension KingfisherWrapper where Base: ImageView{\npublic func setLocalImage(withUrl url: URL?){\n    if let url = url{\n        do {\n            let imageData = try Data(contentsOf: url)\n            self.base.image = UIImage(data: imageData)\n        } catch {\n            print(\"Unable to load data: \\(error)\")\n        }\n    }\n}\n\n}\n```. ",
    "mheicke": "okay, that seems reasonable. You probably want to put that in your migration guide :-) thanks for your time and great work\n. ",
    "troy21688": "This image is actually more comprehensive:\n\n. Is there an easier way to download the latest XCode other than through the Apple Store? I simply want to update and the progress bar is stating it may take a few hours...\n. ",
    "meh-uk": "Cool :).\n. Thanks :).\n. ",
    "mengheangrat": "It's worked. Thx Q so much\n. ",
    "googlb": "@onevcat \u6211\u5728UItableviewCell\u91cc\u9762\u7528kf\u52a0\u8f7d\u56fe\u7247\u7684\u65f6\u5019\u4e5f\u9047\u5230\u4e86\u76f8\u540c\u7684\u95ee\u9898\uff0c\u641c\u7d22\u4e86\u4e00\u4e9b\u7b54\u6848\u540e\u53d1\u73b0\u539f\u56e0\u4e5f\u5c31\u5feb\u5ea6\u6eda\u52a8\u7684\u65f6\u5019\u540c\u65f6\u5f00\u542f\u4e86\u5f88\u591a\u52a0\u8f7d\u56fe\u7247\u7684\u8fdb\u7a0b\u4f7f\u5f97\u5185\u5b58\u6cc4\u6f0f\uff0c\u770b\u4e86\u4f60\u7684\u56de\u590d\u5927\u6982\u660e\u767d\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u7684\u6839\u672c\u662f\u8981\u628a\u4e00\u4e9b\u4e0d\u5728\u663e\u793a\u8303\u56f4\u5185\u7684\u52a0\u8f7d\u8fdb\u7a0b\u7ed3\u675f\u6389\uff0c\u4f46\u662f\u73b0\u5728\u4e00\u76f4\u627e\u4e0d\u5230\u65b9\u6cd5\u5904\u7406\u5f53\u5feb\u901f\u6eda\u52a8table\u65f6\uff0c\u628a\u5df2\u7ecf\u6eda\u52a8\u5230\u4e3b\u5c4f\u5e55\u4e4b\u5916\u7684cell\u8fd8\u5728\u6ca1\u6709\u52a0\u8f7d\u5b8c\u6210\u7684kf\u52a0\u8f7d\u4efb\u52a1\u7ed3\u675f\u6389\uff0c\u4e0d\u77e5\u5927\u795e\u5bf9\u4e8e\u8fd9\u4e2a\u573a\u666f\u6709\u6ca1\u6709\u4ec0\u4e48\u529e\u6cd5\uff0c\u8fd8\u8bf7\u4e0d\u541d\u8d50\u6559\uff01\n. ",
    "yortuc": "yes, as far as i experimented, KingFisher is not releasing memory cache. (fix me if i'm wrong)\nmy solution was to fix memory-cache-size in pixels:\nKingfisherManager.sharedManager.cache.maxMemoryCost = 600*400*10\n. ",
    "pixyzehn": "@onevcat \nSure. I'll send another one.\n. ",
    "racer1988": "@onevcat Thanks! I will close this then\n. ",
    "SwiftySpartan": "Hi there,\nI recently just had one of my apps rejected as the images were not loading.\nAre you entirely sure that KingFisher fully supports IPv6?\n\nthe attached screenshot is from apple \n. @onevcat thank you, i found out the this morning that my app was approved. Didnt change anything but except for handling my errors properly. I believed the images were not loading at all  as you could see not even the first two had loaded.\nThank you so much for creating a great framework/module! honestly love it!\n. ",
    "jdmoreira": "I'll do this if that's ok with you. P-R soon.\n. Pull Request -> #425 \n. Absolutely. I'll do it :)\n. I've seen you merged and did a few changes. I'm sorry I didn't had much time the last couple of days. Thanks for taking the time.\nI agree that the keeping the objc_set/getObject and using Box is a much better solution \ud83d\udc4d \n. ",
    "mihaibulic": "I have 2 separate prefetchers, never prefetching more than 3 images.  I don't change maxConcurrentDownload from the default\n. @onevcat, any word on this?\n. Hey @onevcat,\nunfortunately it's not deterministic.  The only thing I have noticed is that once it starts to occur, it continues to occur.\nHere is what I'm (basically) doing:\n```\nprivate let PREFIX = \"https://storage.googleapis.com/spree-photo-storage/photos/1080x1920-\"\nprivate let SUFFEX = \".jpg\"\nprivate let IDS = [\n    \"0000a635-b38c-4521-bded-fdc173d884b2\",\n    \"000130c9-884f-489e-a5f2-65e7ec1066fc\",\n    \"000140b2-5f09-4845-90c2-0e2a56109243\"\n]\nprivate var currentPrefetcher : ImagePrefetcher?\n/*\nThis function is generally called every 30 seconds, but may be called back-to-back\n/\nprivate func prefetch(photoIds: [String]) {\n    currentPrefetcher?.stop()\n    var prefetchUrls : [NSURL] = []\nfor id in photoIds {\n    if let urlNotNil = generateURL(photoId) {\n        prefetchUrls.append(urlNotNil)\n    }\n}\n\ncurrentPrefetcher = ImagePrefetcher(urls: prefetchUrls)\ncurrentPrefetcher?.start()\n\n}\n/*\nThis function may be called at anytime, even immediately before or after prefetch is called with the same photoId\n/\nprivate func loadPhoto(photoId: String, decache: Bool = false) {\n    guard let urlNotNil = generateURL(photoId) else {\n        return\n    }\nKingfisherManager.sharedManager.retrieveImageWithURL(\n            urlNotNil,\n            optionsInfo: nil,\n            progressBlock: nil,\n            completionHandler: {(image: Image?, error: NSError?, cacheType: CacheType, imageURL: NSURL?) -> () in\n                if error != nil || image == nil {\n                    self.fail(photoId)\n                } else {\n                    self.setImage(image, photoId: photoId, loadTime: (CACurrentMediaTime() - startTime))\n                    if decache {\n                        KingfisherManager.sharedManager.cache.removeImageForKey(urlNotNil.absoluteString)\n                    }\n                }\n            })\n\n}\nprivate func generateURL(photoId: String) -> NSURL? {\n   return NSURL(PREFIX + photoId + SUFFIX)\n}\n```\n. I've changed those lines, I'll see if it happens again (like I said it's not deterministic or even easy to repro, so it might take a couple of days)\n@onevcat, Should I be using different downloaders for each prefetcher (I have 2)?\n. Thanks for the quick responses @onevcat \nI'll let you know if I see more issues\n. Hey @onevcat, still seeing the issue.\nCould this be problematic:\n-create and start a prefetcher with url X\n-immediately after, call retrieveImageWithURL with the same url X\nAlso what about this::\n-create a prefetcher with url X\n-create another prefetch, also with url X\n-stop the initial prefetcher\n-stop the 2nd prefetcher\n(I was thinking that calling stop() on the 1st prefetcher would cancel the downloading of the image at url X in both prefetchers and would cause issues when trying to stop the 2nd prefetcher?)\nI could try not calling stop on the prefetcher and just letting it run its course, that should technically fix the crash, right?\n. I create prefetchers in 2 different classes, and I use a different downloader for each of the different classes, but within those classes I do reinstantiate the prefetchers frequently (everytime with the same downloader).  Should I create a new downloader everytime I reinstantiate the prefetcher, like so:\ncurrentPrefetcher = ImagePrefetcher(urls: prefetchUrls, optionsInfo: [KingfisherOptionsInfoItem.Downloader(ImageDownloader(name: \"classname (CACurrentMediaTime())\"))])\n. I'll try that.  Would it cause problems if I create hundreds of downloaders over the course of my app's lifecycle?\n. I reverted to 3.1.4 and everything works as expected.. I did do a clean and I uninstalled the app.. ",
    "danhollywells": "I have run into this same issue. Because the start() method captures the initial X Resources by index and ships them off to startPrefetchingResource() and that methods recursive behavior, you can end up in a state where all the items have been processed but the initial X resources will get double processed because they were captured in the for loop in the start() method and again in the recursion of the startPrefetchingResource(). So if during the prefetch you get into this state and you call stop() you will end up with an unbalanced Range when sorting out the failedResources. I've submitted a pull request #422 with a fix where i've eliminated the use of the manually incremented requestedCount. \n. ",
    "jasnig": "Thanks a lot! I am agree to your suggestion that 'always use weak instead of unowned if you are not sure about the reference relationship, especially when doing some async networking request ' . It's a safer way! Thanks again! have a good day.\n. @floriannagel  I think you may need to download the image first and then you can edit the image.\n. ",
    "mrfarukturgut": "It turns out, downloading doesn't fails but it takes some time. \nThere is a new issue here, when it starts the download the new image, old image disappears. Now the question is, is there a way to show downloading animation while download task? \n. ",
    "Werbelow": "I fixed it by changing the framePreloadCount to 1, thanks again for this library! \n. ",
    "lucasecf": "Hi @onevcat @shams-ahmed , I came across this issue because I want to implement the same user case as first mentioned in the description.\nChecking the suggestion, I understand that the ImageProcessor's process method is invoked before the image is set, but changing the contentMode is an operation in the imageView, not in the image itself. Is there any cleaner way to achieve this result? Only thing I came across so far is creating this custom processor: \n```\nstruct TestProcessor: ImageProcessor {\n        let imageView: UIImageView\n    var identifier: String {\n        return \"test.processor\"\n    }\n\n    func process(item: ImageProcessItem, options: KingfisherOptionsInfo) -> Image? {\n        imageView.contentMode = .scaleAspectFill\n        return DefaultImageProcessor.default.process(item: item, options: options)\n    }\n}\n\n```. Hello @onevcat , if I may ask, was the redirected url support ever implemented? Couldn't find any references besides this closed issue.. ",
    "alfredcc": "Great: ) OK now. \nI have used Carthage to integrate Kingfisher and i find that the CFNetwork.framework must linked before Kingfisher.framework.If not do this, also crashed\ud83d\ude02\n. The only difference is \n``` Swift\n// version 1.8.5\nfunc kfe_setRoundImageWithURLString(URLString: String?, cornerRadiusRatio: CGFloat? = nil, options: KingfisherManager.Options = KingfisherManager.DefaultOptions, progressBlock: ImageDownloaderProgressBlock? = nil)  { ... }\n// version 2.4.1\nfunc kfe_setRoundImageWithURLString(URLString: String?, cornerRadiusRatio: CGFloat? = nil, options: KingfisherOptionsInfo? = nil, progressBlock: ImageDownloaderProgressBlock? = nil) { ... }\n// version 1.8.5\nfunc kfe_setImageWithURLString(URLString: String?,\n        placeholderImage: UIImage?,\n        optionsInfo: KingfisherOptionsInfo?,\n        progressBlock: DownloadProgressBlock?,\n        completionHandler: CompletionHandler?) -> RetrieveImageTask?\n    {\n            ...\n            let defaultOptions: KingfisherOptionsInfo = [\n                .Options([.BackgroundDecode, .LowPriority]),\n                .Transition(ImageTransition.Fade(0.55))\n            ]\n           ...\n    }\n// version 2.4.1\nfunc kfe_setImageWithURLString(URLString: String?,\n                                   placeholderImage: UIImage?,\n                                   optionsInfo: KingfisherOptionsInfo?,\n                                   progressBlock: DownloadProgressBlock?,\n                                   completionHandler: CompletionHandler?) -> RetrieveImageTask?\n    {\n            ...     \n            let defaultOptions: KingfisherOptionsInfo = [\n                .BackgroundDecode,\n                .DownloadPriority(NSURLSessionTaskPriorityLow),\n                .Transition(ImageTransition.Fade(0.55))\n            ]\n            ...\n    }\n```\n. Version 2.4.1\nhttps://github.com/alfredcc/KingfisherExtension\nVersion 1.8.5\nhttps://github.com/Limon-O-O/KingfisherExtension\n. Thanks\n. ",
    "ArtisOracle": "My cartfile has github \"onevcat/Kingfisher\" ~> 2.4\n. Yes, I am targeting iOS.\n. Wow, that appears to have been the issue. I'm not sure how they got into the copy bundle resources. I guess just carelessly dragging in the Carthage folder into Xcode will do this...\nSorry to waste your time.\n. ",
    "Yamilquery": "Please help me. I have the same issue, but I'm using Nativescript. I get the following error:\nCouldn't find platform family in Info.plist CFBundleSupportedPlatforms or Mach-O LC_VERSION_MIN for phantomjs\n. ",
    "matthewsommer": "I am having this same issue. I have to make a network query to get a URL of an image before I then download the image. What would be cool is if I can check if an image is already cached based on a resource cache key and if not then I'd run my two network calls (get the URL, then get image from the URL).\n. As I workaround I used the code below. Is this okay?\nif let image:Image = KingfisherManager.sharedManager.cache.retrieveImageInDiskCacheForKey(\"112312321\") {\ncell.imageViewAvatar?.image = image\n}\n. ",
    "MHX792": "How did you solve it?\n. Update: To test disk performance I wrote some functions on my own to save images to the disk and retrieve them form there. It's way faster than kingfisher. But why? Does kingfisher look for the cached images in the memory first when the app gets started? Is there an option to skip this step and directly look for on the disk?\n. @onevcat Thanks it seems like retrieveImageInDiskCacheForKey solves the problem.\nSo I think loading it sync on the first init of the view is better for a good user experience. But how to make sure that afterwards only the async method gets fired?\n```\n// first load sync from disk cache\nself.userImageView.image = ImageCache.defaultCache.retrieveImageInDiskCacheForKey(\"thumbnailImage_(userId)\")\n// then async from memory / disk and for possible updates\nlet url = NSURL(string: imageUrl)!\nlet resource = Resource(downloadURL: url, cacheKey: \"thumbnailImage_(userId)\")\nself.userImageView.kf_setImageWithResource(resource, placeholderImage: UIImage(named: \"profile_blank\"))\n```\n. ",
    "miciny": "it's ok now! sorry\n. ",
    "GigabyteTheOne": "Sure, no problem\n. ",
    "pmusolino": "Thanks @onevcat. You're right.\n. I have the same problem, before Xcode 8 and the transition to swift 2.3, the activity indicator worked properly on all my collectionViews. Now it doesn't work.\n. @onevcat you used swift 2.3?\n. I fixed it on swift 2.3 and iOS 10 calling kf_showIndicatorWhenLoading=true before the method kf_setImageWithURL \ud83d\udc4d  :| \n. Yeah @onevcat !\nMy original code was: \ncell.imageProduct.kf_setImageWithURL(NSURL(string: variantSelected!.gallery![indexPath.item] ?? \"\"),\n                                             placeholderImage: nil,\n                                             optionsInfo: [.Transition(ImageTransition.Fade(0.5)), .ForceTransition])\ncell.imageProduct.kf_showIndicatorWhenLoading = true\nnow is:\ncell.imageProduct.kf_showIndicatorWhenLoading = true\ncell.imageProduct.kf_setImageWithURL(NSURL(string: variantSelected!.gallery![indexPath.item] ?? \"\"),\n                                             placeholderImage: nil,\n                                             optionsInfo: [.Transition(ImageTransition.Fade(0.5)), .ForceTransition])\n. +1 for this feature \ud83d\udc4d . Try to see my solution here: https://github.com/onevcat/Kingfisher/issues/623. There is the entire code on above post, but -for reporting- the solution doesn't work with all SVG types, it depends on the file format.. You don't have to modify the Kingfisher's pod, simply use a new class where you add the struct and read the doc of Kingfisher about how to use ImageProcessor. I used PocketSVG + Kingfisher.\nFirst of all i implemented the ImageProcessor like this:\n```\nstruct SVGProcessor: ImageProcessor {\n    let imgSize: CGSize?\ninit(size: CGSize? = CGSize(width:250, height:250)) {\n    imgSize = size\n}\n\n// `identifier` should be the same for processors with same properties/functionality\n// It will be used when storing and retrieving the image to/from cache.\nlet identifier = \"my.app.svg\"\n\n// Convert input data/image to target image and return it.\nfunc process(item: ImageProcessItem, options: KingfisherOptionsInfo) -> Image? {\n    switch item {\n    case .image(let image):\n        //already an image\n        return image\n    case .data(let data):\n        let frame = CGRect(x: 0, y: 0, width: imgSize!.width, height: imgSize!.height)\n        if let svgString = String(data: data, encoding: .utf8){\n            let svgLayer = SVGLayer(svgSource: svgString)\n            svgLayer.frame = frame\n            return snapshotImage(for: svgLayer)\n        }\n        return nil\n    }\n}\n\n}\n```\nand i have this extra method to convert a CALayer to UIImage:\nfunc snapshotImage(for layer: CALayer) -> UIImage? {\n    UIGraphicsBeginImageContextWithOptions(layer.bounds.size, false, UIScreen.main.scale)\n    guard let context = UIGraphicsGetCurrentContext() else { return nil }\n    layer.render(in: context)\n    let image = UIGraphicsGetImageFromCurrentImageContext()\n    UIGraphicsEndImageContext()\n    return image\n}\nLet me know if is ok for you.. Revisited implementation with CacheSerializer\n```\n//\n//  SVGProcessor.swift\n//\n//  Created by Paolo Musolino on 21/03/17.\n//  Copyright \u00a9 2017. All rights reserved.\n//\nimport UIKit\nimport Kingfisher\nimport PocketSVG\nstruct SVGProcessor: ImageProcessor {\n    let imgSize: CGSize?\ninit(size: CGSize? = CGSize(width:250, height:250)) {\n    imgSize = size\n}\n\n// `identifier` should be the same for processors with same properties/functionality\n// It will be used when storing and retrieving the image to/from cache.\nlet identifier = \"my.app.svg\"\n\n// Convert input data/image to target image and return it.\nfunc process(item: ImageProcessItem, options: KingfisherOptionsInfo) -> Image? {\n    switch item {\n    case .image(let image):\n        //already an image\n        return image\n    case .data(let data):\n        return generateSVGImage(data: data, size: imgSize) ?? DefaultImageProcessor().process(item: item, options: options)\n    }\n}\n\n}\nstruct SVGCacheSerializer: CacheSerializer {\n    func data(with image: Image, original: Data?) -> Data? {\n        return original\n    }\nfunc image(with data: Data, options: KingfisherOptionsInfo?) -> Image? {\n    return generateSVGImage(data: data) ?? image(with: data, options: options)\n}\n\n}\nfunc generateSVGImage(data: Data, size: CGSize? = CGSize(width:250, height:250)) -> UIImage?{\n    let frame = CGRect(x: 0, y: 0, width: size!.width, height: size!.height)\n    if let svgString = String(data: data, encoding: .utf8){\n        let svgLayer = SVGLayer(svgSource: svgString)\n        svgLayer.frame = frame\n        return snapshotImage(for: svgLayer)\n    }\n    return nil\n}\nfunc snapshotImage(for layer: CALayer) -> UIImage? {\n    UIGraphicsBeginImageContextWithOptions(layer.bounds.size, false, UIScreen.main.scale)\n    guard let context = UIGraphicsGetCurrentContext() else { return nil }\n    layer.render(in: context)\n    let image = UIGraphicsGetImageFromCurrentImageContext()\n    UIGraphicsEndImageContext()\n    return image\n}\n```. Probably the type of SVG file that you are passing to PocketSVG is not supported.. Try to open an issue on PocketSVG repo, the crash is not referred to Kingfisher.. No, I tried only PockerSVG.. I don't have much time to dedicate, but I think that the integration process can be the same of PocketSVG. \nEverything you need is in the documentation files (Kingfisher and SVGKit). . ",
    "kvnbautista": "@indrajitsinh Swift 3.0\nRefer to the adjustment changes here\nhttps://github.com/ideago/MouQu\n. ",
    "Tulleb": "@onevcat: swift3branch needs a new update for the Xcode 8 Beta 6 compatibility.\n. ",
    "alexanderkhitev": "I'm sorry it was my mistake \n```\n   override func collectionView(collectionView: UICollectionView, cellForItemAtIndexPath indexPath: NSIndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCellWithReuseIdentifier(reuseIdentifier, forIndexPath: indexPath) as! LifelineCollectionViewCell\n        // Configure the cell\n        let user = LifelineManager.instance.leaderboardRecentUsers[indexPath.row]\n    guard let profileImagePath = user.avatar?.path else { return cell }\n    guard let url = NSURL(string: profileImagePath) else { return cell }\n    cell.userImageView.kf_setImageWithURL(url)\n\n    return cell\n}\n\n```\n. Hi @onevcat Yes, I also thought at first that this framework holds a lot of UIView and does not release them. I did an elementary test, commented out the code that is associated with Kingfisher in this UIView, and this behavior was no longer observed. What bothers me most is that during the release of memory, the main queue is blocked (as I think).. @onevcat Well, I'll try to do it within two days.. @onevcat As I said earlier, I'll do the project a little later, but for now I'll show you this screenshot of Instruments, it can help you.\n\n. @onevcat Hi again! I found a regularity when this happens. This jump in memory occurs when ImageCache extracts an image that is larger than 5 megabytes. I found it using debugPrint in this method diskImage, if the image is equal to or more than 5 megabytes, then there is a jump, if 4 megabytes, then everything is fine.\nI'm testing on the iPhone 7, more than 74 gigabytes of free memory.\nfunc diskImage(forComputedKey key: String, serializer: CacheSerializer, options: KingfisherOptionsInfo) -> Image? {\n        if let data = diskImageData(forComputedKey: key) {\n            debugPrint(\"ImageCache data.count\", data.count / 1024 / 1024)\n            return serializer.image(with: data, options: options)\n        } else {\n            return nil\n        }\n    }\n. @onevcat At the moment I solved my problem, I wrote my Custom CacheSerializer, and I compress the images up to 3 megabytes.. https://stackoverflow.com/questions/27397015/alamofire-download-progress-totalbytesexpectedtoread-always-1. ",
    "Haojen": "\u540c\u95ee\u8fd9\u4e2a\u95ee\u9898\uff0c\u76ee\u524d\u60f3\u4ece\u7f13\u5b58\u4e2d\u83b7\u53d6 NSData\uff0c\u56e0\u4e3a\u9700\u8981\u83b7\u53d6\u56fe\u7247\u7684 EXIF \u4fe1\u606f. @onevcat  \u9047\u5230\u4e00\u4e2a\u95ee\u9898\uff0c\u56fe\u7247\u672a\u88ab Kingfisher \u7f13\u5b58\u65f6\uff0c\u53ef\u4ee5\u83b7\u53d6\u5230\u56fe\u7247\u5b8c\u6574\u7684 exif \u4fe1\u606f\uff0c\u4f46\u662f\u4e00\u65e6\u88ab\u7f13\u5b58\u540e\uff0c\u6211\u7528 \nImageCache.default.cachePath(forKey: urlString) \u548c try? Data(contentsOf: URL(fileURLWithPath: cachePath)) \u83b7\u53d6\u5230\u7684 exif \u4fe1\u606f\u5374\u4e25\u91cd\u4e22\u5931\u4e86\n\u6240\u4ee5\u731c\u6d4b\u5f53\u7f13\u5b58\u7684\u65f6\u5019\uff0c\u539f\u56fe\u88ab\u5904\u7406\u8fc7\u624d\u8fdb\u884c\u7684\u7f13\u5b58\u3002 \u770b\u5230\u5728\u8fdb\u884c\u7f13\u5b58\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u5c06 Data \u4f20\u9012\u7ed9\u7f13\u5b58\u56fe\u7247\u7684 original: Data \u53c2\u6570\uff0c\u53ea\u662f\u5728\u4ece\u7f13\u5b58\u62ff\u6570\u636e\u7684\u65f6\u5019\uff0c\u53ea\u770b\u5230\u4e86 Image\uff0c\u6ca1\u6709\u627e\u5230\u66b4\u9732\u51fa\u6765\u7684 original\uff0c\u4e0d\u77e5\u5982\u4f55\u89e3\u51b3\uff0c\u4e5f\u5728 Stack Overflow \u641c\u7d22\u4e86\u8bb8\u4e45\uff0c\u6ca1\u6709\u627e\u5230\u5982\u4f55\u89e3\u51b3\u7f13\u5b58\u540e\u7684\u6570\u636e exif \u4e22\u5931\u7684\u95ee\u9898\uff0c\u6240\u4ee5\u8feb\u4e0d\u5f97\u5df2\u53ea\u80fd\u5728\u6b64\u6c42\u52a9\u4e86\u3002\n. @onevcat  \u975e\u5e38\u611f\u8c22\u4f60\u80fd\u62bd\u51fa\u5b9d\u8d35\u65f6\u95f4\uff0c\u5bf9\u6211\u7684\u7591\u60d1\u8fdb\u884c\u8be6\u7ec6\u7684\u89e3\u7b54\uff0c\u8fd9\u4e2a\u95ee\u9898\u6211\u5728\u6628\u5929\u665a\u4e9b\u65f6\u5019\u89e3\u51b3\u4e86\uff0c\u5c31\u662f\u5728\u7814\u7a76\u9601\u4e0b\u7684\u6587\u6863\u65f6\uff0c\u7528\u81ea\u8ba2 CacheSerializer \u7684\u65b9\u5f0f\u89e3\u51b3\u4e86\u95ee\u9898\u3002\n\u518d\u6b21\u611f\u8c22\uff0c\u80fd\u5f97\u5230\u60a8\u7684\u5e2e\u52a9\uff0c\u500d\u611f\u8363\u5e78\u3002\n\u65e5\u5b89\n. ",
    "halonsoluis": "..and also known when it has ended.\n. ",
    "JacobMao": "@halonsoluis and @szuniverse \nI created a PR for this issue. @onevcat It's my pleasure.\nI am thinking that I should define a new protocol or just add a closure property as a callback. I agree your opinion and I prefer to use delegate too\nBTW, \u5feb\u8fc7\u5e74\u4e86\uff0cline\u4e0d\u662f\u5f88\u5fd9\uff0c\u54c8\u54c8. @onevcat I added the delegate.\nPlease review it when you're free, thanks!. @onevcat \nThanks for your reply!\n\nI followed the name pattern of SKSceneDelegate-> optional func didFinishUpdate(for scene: SKScene). \nThat's right, I should follow Cocoa convention.\nI was going to add some methods like you said, but I don't know whether I should do more than scope of this issue. I will add this method.\n\nThank you again! \ud83d\ude47 . Got it. Thanks. @KimiChiu \nThere is AnimatedImageView that can play gif, can you use it?. hi @agforte \nI can not reproduce it.\nI used your code snippet and download this image\nThe output looks good:\nDownload progress:  197658\nDownload progress:  181274\nDownload progress:  164890\nDownload progress:  148506\nDownload progress:  132122\nDownload progress:  115738\nDownload progress:  82970\nDownload progress:  66586\nDownload progress:  50202\nDownload progress:  33818\nDownload progress:  17434\nDownload progress:  0\nDownload done!. Hi, @joystate .\nThanks for your PR.\nI also think we don't need a new class to do it. we can improve ImageFetcher.\nIf you wanna use a new object to do it, I think it's better that use a struct instead of a class.\nSwift prefer to use guard to do the early exit. ",
    "Bargetor": "also need\n. ",
    "TheSwifter": "Anyone could help us ?\n. ",
    "Mazorati": "+1\n. @onevcat but what about solution in this issues?\nCan you show an example of this helper?\n. ",
    "macecchi": "Thanks for sharing that \ud83d\udc4d \nYou can also update the Xcode version in .travis.yml to xcode8 (line 3) to make the Travis CI bot build correctly.\n. I've created another fork with the updated Xcode image but there are some other issues. The other targets (for macOS etc) haven't added the legacy swift flag and there are some other sdk changes. I'm working on them :)\n. I just pushed a PR (#367) with the Swift 2.3 version working with all targets and all tests passing.\n. The CI build failed because Travis sucks at building Xcode projects. If you want to trigger the tests again they should work. Or you can check the build from my fork, which passes: https://travis-ci.org/macecchi/Kingfisher/builds/146659059\n. ",
    "alessandro-martin": "I think that ImageDownloader is the perfect choice for you.\nImageDownloader.defaultDownloader.downloadImageWithURL(URL: progressBlock:completionHandler)\n. ",
    "Elshad": "@onevcat Are you planning to add automatically cache to downloader standalone?\n. ",
    "13hoop": "\uff0b1 \ud83d\udc4d\n. ",
    "jeffreylyg": "\u9996\u5148\u611f\u8c22\u55b5\u795e @onevcat \u7684\u56de\u590d\u3002 \n\u539f\u5730\u5740\uff1ahttp://qiniu.22double.com/Fq8hbzaEfBTkaMIWB8Mp2g1PlN-G\n\u6309\u7167\u4e03\u725b\u7684\u89c4\u5219 http://qiniu.22double.com/Fq8hbzaEfBTkaMIWB8Mp2g1PlN-G!180\n\u4e24\u4e2a\u5730\u5740\u5728\u6d4f\u89c8\u5668\u4e2d\u90fd\u662f\u53ef\u4ee5\u8bbf\u95ee\u7684\uff0c\u4f46Kingfisher\u53ea\u80fd\u62ff\u5230\u539f\u5730\u5740\u7684\u56fe\u7247\uff0c\u8bbf\u95ee\u52a0\u540e\u7f00\u7684\u5730\u5740\u540e\u62a5\u51fa\u7684\u9519\u8bef\u4e3a error: Optional(Error Domain=com.onevcat.Kingfisher.Error Code=10000 \"(null)\")\n. @onevcat I was planning to send another PR according your advice after the Spring Festival. I have missed a chance to contribute to your awesome project\ud83d\ude02. Thanks for your fix anyway. :). ",
    "cherishloveyou": "\u6211\u7684safari\u80fd\u6253\u5f00\u54e6\n. > I guess it is not possible since the image size is not contained in the response header, so there is no chance to get it until downloading all the image data.\nhttps://github.com/malcommac/ImageSizeFetcher  Can integrate like this?\nActually, I did it a few years ago in Objective-C  for some disgusting needs.(Sometimes we need to know image's size for display image original ratio (not contentModeScaleAspectFit )) and the sever does not provide the pixel value.\nOf course, After I viewed this repo I remembered this feature.\nAlso another view: If you can estimate the image size, you can allocate the download strategy more reasonably. \n. ",
    "looseyi": "\ud83d\udc4c \n. ",
    "Sadmansamee": "It will be very hellfull and nice if there was WebP Support\n. ",
    "0xpablo": "You should use url.path, not url.absoulteString.. ",
    "leviathan": "@mixlan123 could you elaborate a bit further (add a more detailed explanation) ? \nI don't understand what this issue is about.\n. ",
    "titopalito": "Maybe it can be a problem with the images size, that's my case using another pod with similar functions.\nyou can make an hybrid cache with something like this:\n     //ViewController variable \"cache\"\n     var cache                           : NSCache!\n                           if let objImagen = self.cache.object(forKey: urlString+\"reduced\" as AnyObject)  {\n                                cell.imageView.image = objImagen as? UIImage\n                                print(\"Size cached: \\(cell.imageView.image?.size ?? CGSize(width: 0, height: 0))\")\n                            }else {\n                                cell.imageView.sd_setImage(with: URL(string: artworkUrl), completed: {\n                                    (image, error, imgCacheType, url) in\n                                    print(\"Size real: \\(image?.size ?? CGSize(width: 0, height: 0)))\")\n                                        let imgReduced = image?.resized(toWidth: imgWidth)\n                                        cell.headerImageView.image = imgReduced\n                                        self.cache.setObject(imgReduced!, forKey: urlString+\"reduced\" as AnyObject)\n                                })\n                            }\n\nAnd an extension for the resizing image:\n extension UIImage {\n       func resized(toWidth width: CGFloat) -> UIImage? {\n              let canvasSize = CGSize(width: width, height: CGFloat(ceil(width/size.width * size.height)))\n              UIGraphicsBeginImageContextWithOptions(canvasSize, false, scale)\n              defer { UIGraphicsEndImageContext() }\n              draw(in: CGRect(origin: .zero, size: canvasSize))\n              return UIGraphicsGetImageFromCurrentImageContext()\n        }\n  }\n\nYou can make something similar with your kingfisher pod cause it has completion handlers like SDWebImage.\nBest regards. ",
    "lonsky": "@onevcat thank you for reply and for great framework!\nremove/add should work. but it's not neat solution :)\ni can think about two different cache strategies:\n1) (the current one) image file (or group of file) after downloading has limited lifetime (equal maxCachePeriodInSecond) before subsequent download of new version of file.\nWith this strategy image file will have fixed expiration date: expirationDate = downloadTime + maxCachePeriodInSecond and will be removed even if it was used recently.\n2) image file (or group of file) after downloading modify its NSFileModificationDate attribute while being accessed via retrieveImageForKey.\nWith this strategy image file will shift its expiration date every time it is accessed and \"garbage collector\" will remove only unused/less used files.\nAlso, as \"side effect\", if cache will run out of available free space, it's possible to remove less relevant files first.\nmaybe it can be a property that will allow to switch between these strategies\n. ",
    "victorg1991": "You have a variable cacheType in the callback where you can check where the image comes from\n. The same as you did, in the completionhandler block add the variable to the print function\nprint(\"cacheType: (cacheType) (indexPath.row + 1): Finished\")\n. I\u2019m happy to help\n. Totally agree, I will change it and submit it again :)\nThanks\n. @onevcat  I hope you like it now \ud83d\ude09\n. ",
    "kwstasna": "Can you write me an example?\n. Ah, so now it prints\nFinished: cachType: Disk\nSo now i'm sure that it is loaded from cache thanks !\nBut does it actually load it from the disk? I haven't every used cache so i have to ask!\n. Let it be. I closed the app and opened it again. \nIf i run the app for the very first time it downloads 20mb\nbut if i open it again it has 0.1mb on network so it uses disk!\nThanks :D \n. With the code above i make a new Cache each time a cell deques? Or the cache remains the same even though the cell deques?\n. So the problem is partially fixed. Only the images with >2mb takes some time to be displayed at the cell and this is a bit annoying too.\n. The problem by using this for a cell is that it makes slow the scroll of the collection view....\nIf i run \"Instruments\" i can see that rendering of the image takes a lot of time (AppleJPEG), and also it takes some time to show the image from the disk cache.\nhttps://github.com/onevcat/Kingfisher/issues/389\nThen i tried 'BackgroundDecode' inside Options. It solved the problem of rendering the images but still if an iPhone is old and has lots of memory used, when it tries to scroll up and down it still takes some time 0.9ms to load the image from Memory Cache this time (cause of background decode i guess).\nI really don't know what to do about it.\n. it varies from 40kb to 4-5mb (the images above 4mb are just for testing period.. although it has to work smoothly for those too)\n. Yes you are right. Thought that we had more memory available but it's ok. I will make a column for thumbnail that will have the minimum size so it can load faster.\nThanks for the advice!\n. ",
    "MichaelTzach": "@onevcat \nHey,\nThanks for the quick response.\nWe had a bug with gif playback when using the images downloaded using Kingfisher but without using AnimatedImage. I saw that when calculating a frame's length you used the kCGImagePropertyGIFDelayTime property.\nWhen searching for the answer I came across this: http://stackoverflow.com/a/17824564/6690172 which explains the way webkit calculates the gif animation duration.\nThis is the way webkit does it:\n1. UnclampedDelayTime\n2. DelayTime\n3. 100 milliseconds\n- frames under 11 milliseconds are not allowed (in the past they were used to display blinking ads)\n. ",
    "nowfalsalam": "Hi,\n But my problem solved when i changed CacheType as optional,\nRegards\nNowfal E Salam\nOn Sun, Aug 7, 2016 at 6:44 PM, Wei Wang notifications@github.com wrote:\n\n@nowfalsalam https://github.com/nowfalsalam\nHi, the CacheType will never be a nil. It will only be one of .None,\n.Memory or .Disk. The compiler could ensure that it will always has a\nvalue. So I believe the optional unwrapping issue you encountered is from\nsomewhere else. (maybe you are trying to unwrap a nil image?)\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/onevcat/Kingfisher/issues/384#issuecomment-238081779,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AT30oT3HnRprb0-2x-etXZbbzGG_M8xGks5qddpHgaJpZM4JcleR\n.\n. \n",
    "Minitour": "Update:\nI realized I didn't have the latest Xcode beta, therefor there was an issue with the syntax. I updated to Xcode 8 beta 4 and it works fine now.\n. This ImageProcessor is quite limited, I need to run my own functions on the image.\nI was actually thinking that for future updates you can implement a function like this one:\nswift\nkf.setImage(with: url, completionHandler: (image, error, cacheType, imageUrl) -> UIImage?\nwhere the usage would be as the following:\n``` swift\nimageView.kf.setImage(with: url, completionHandler: { \n    (image, error, cacheType, imageUrl) -> UIImage? in\nif let image = image {\n          //make modifications to image\n          return image\n   } else {\n          return nil\n   }\n})\n```\nEDIT:\nI didn't read the part where you can make your own processor which could be what I am looking for. But still that function could be useful to make a small change quickly on the go without the need to implement and create your own classes so it would be cool to see something like it in the future.\n. @onevcat Alright I'll see if I can do it myself. Can you refer to me inside the source code where is the function \"setImage\" is implemented?\n. Yeah that's seems like the perfect solution for now. Thanks a lot :D\n. ",
    "anooj1483": "I have the latest Xcode 8.0 (8A218a). After installing Kingfisher via pods, Xcode prompts me to convert it to Swift 3. When I choose to convert, it gives me lots of conversion issues.\n\n\n. @onevcat \nThanks. I found your comment in Cocoapods GitHub. \nThis issue got fixed by updating pods. ( pod update )\n. ",
    "hifall": "Thanks! I will go ahead and try what you recommend.\n. Cool, thanks for the suggestion!\n. Thanks for your reply.\nI think limiting the disk cache's size and keep the images in it for a long time (or even indefinitely) is a useful case, and phasing out old images to make room for the latest ones should benefit in such case.\nAny plan to add this in the future?\nThanks!\n. Awesome! This is what one can expect from a nice cache system!\n. Now I see your reply in https://github.com/onevcat/Kingfisher/issues/381.\nYou stated:\n\"Maybe we should use the access day instead of modification date to check the expiration. It might work better.\"\nIn all fairness, I agree with you on using something other than modification date to check for expiration. Using modification date doesn't seem all that elegant to me. After all, if the app keeps reading the image without modifying it, the image should be kept in cache for faster processing, right?\n. WOW, can't believe this is happening so quickly. Amazing!\n. Just curious -- can you dispatch to a serial thread other than the main thread?\n. @onevcat, thanks for your kind reply.\nBut that doesn't answer my question. Since you call dispatch_async_safely_to_main_queue to dispatch to the main queue, it incurs costs as well, just like dispatching to a background thread (I assume).\nSince ImagePrefetcher has an optional completionHandler, a time-consuming completion handler passed in by the caller can still block the main UI, right?\n. I see. Thanks!\n. Looks like an awesome feature! I can't wait to add this in ASAP.\nWill the document be updated soon?\n. Okay -- thanks for the heads-up. But the issue happened in iOS 9.3.5, instead of 10. Not sure enough at the moment what's going on, yet.\nI will take a deeper look into this later.\n. So, I did try a few more times on iOS 9.3.5., and I saw the issue again. Although I did not dig through the source code to find the problem.\n. @Codeido,\nI don't see much difference between your code and what I posted at top, except that you pass in non-nil optionsInfo. I tried yours, but the problem stays.\n. @onevcat,\nRegarding your comment: \"But I did find a bug which might stop you from setting the kf_showIndicatorWhenLoading to false, but it should not relate to this issue, if you are only setting it to true.\", this is what it's like in our scenario: we have 2 types of images managed using Kingfisher, one that displays a loading indicator when the image is being loaded, and the other one that displays NO loading indicator. So indeed, kf_showIndicatorWhenLoading can be set to false in our case -- could that cause the images that are supposed to display a loading indicator to actually fail to do so?\n. @onevcat,\nThis issue happens around 50% chance on my device. So once you have a fix for the kf_showIndicatorWhenLoading issue you mentioned, maybe I can give it a test here.\n. @onevcat,\nI am not seeing any new commit from last few hours in swift2.3 branch. Am I missing something here?\n. Thanks @onevcat.\nI have tested your fix. But the problem still shows.\n. @onevcat,\nI have not been able to find time to isolate this issue in a reasonably small project. I will get back to you when I can.\n. @onevcat,\nThanks so much for such a quick turnaround! I have tested the new changes, and it seems that the issue is gone now.\n. ",
    "sendyhalim": "@onevcat I'm a newbie in macOS and iOS development too. Yep, there's a way to automatically center the position, that is by calculating new frame everytime viewWillDraw is called (tested manually)\n``` swift\nprivate var centerPointKey: Void?\nextension ImageView {\n  private var kf_centerPoint: CGPoint? {\n    let value = objc_getAssociatedObject(self, &centerPointKey) as? NSValue\nreturn value?.pointValue\n\n}\nprivate func kf_setCenterPoint(point: CGPoint) {\n    objc_setAssociatedObject(self, &centerPointKey, NSValue(point: point), .OBJC_ASSOCIATION_RETAIN_NONATOMIC)\n  }\npublic override func viewWillDraw() {\n    guard let indicator = kf_indicator where kf_showIndicatorWhenLoading else {\n      return\n    }\nlet centerPoint = kf_centerPoint\nlet newCenterPoint = CGPoint(x: bounds.midX, y: bounds.midY)\n\nif centerPoint == nil || newCenterPoint != centerPoint {\n  let indicatorFrame = indicator.frame\n  indicator.frame =  CGRect(\n    x: newCenterPoint.x - indicatorFrame.size.width / 2.0,\n    y: newCenterPoint.y - indicatorFrame.size.height / 2.0,\n    width: indicatorFrame.size.width,\n    height: indicatorFrame.size.height\n  )\n\n  kf_setCenterPoint(newCenterPoint)\n}\n\n}\n}\n```\nbut I'm not sure if it's efficient, I guess we can cache the last center point of the ImageView and comparing it before creating frame if the last center equals to the new center point then we can just return. any thoughts?\n. ",
    "MattTimmons": "Hi, any progress in exposing a fix?. ",
    "lucio1392": "Thank for quick reply. I have 1 more question. \nDo you mean only transition option work with image extension methods of Kingfisher or any others options like BackgroundDecode or CacheMemoryOnly have same ?\n. ",
    "MaeseppTarvo": "Yeah sure. Check this out, thats the project I am working with: https://github.com/MaeseppTarvo/SnusPedia\nI think there is something with the Cache-Control: max-age\n. @onevcat  I tried that but it still doesn't cache them :( I think the problem is Firebase not this library. But I think it should work since many people nowadays uses the Firebase and its Storage but there is no other way to get the url from Firebase according to their documentation.\n. @onevcat First it shows the Disk but after scrolling shows Memory:\n```\nlet productImageref = productsValue[indexPath.row][\"Products\"] as? String\n    cell.snusProductImageView.image = nil\n    cell.snusProductImageView.kf_showIndicatorWhenLoading = true\n\n    FIRStorage.storage().reference().child(\"\\(productImageref!).png\").downloadURLWithCompletion({(url, error)in\n        guard let url = url else {\n            return\n        }\n        let resource = Resource(downloadURL: url, cacheKey: productImageref)\n        cell.snusProductImageView.kf_setImageWithResource(resource, placeholderImage: nil,\n            optionsInfo: [.Transition(ImageTransition.Fade(1))],\n            progressBlock: { receivedSize, totalSize in\n                print(\"\\(indexPath.row + 1): \\(receivedSize)/\\(totalSize)\")\n            },\n            completionHandler: { image, error, cacheType, imageURL in\n                print(\"\\(indexPath.row + 1): Finished, \\(cacheType)\")\n        })\n    })\n\n```\n3: Finished, Disk\n1: Finished, Disk\n2: Finished, Disk\n4: Finished, Disk\n7: Finished, Disk\n6: Finished, Disk\n5: Finished, Disk\n3: Finished, Memory\n2: Finished, Memory\n4: Finished, Memory\nTry turning off internet.. It doesn't take them from the disk for some reason.\nThat is the quote that Firebase guy  Mike McDonald told me: \"The Github one has Cache-Control: max-age=300 while Firebase Storage doesn't have cache control set by default (you can set it when you upload the file, or change it by updating metadata), so I assume that's why KingFisher isn't caching it.\"\n. I just want it not to load and use internet on every time I scroll or come back into the app. So I thought that the disk cache could solve it. I tried to change the macMemoryCost = 1 but it didn't change anything.\n. Xcode debugger shows that there is :D\nHave a look at this image.\nBut with the example app and the url those both are zero.\n. Please use english. What do you even mean when you start typing inside hieroglyphics?\n. I can say that in my previous version of application I also used erlier version of Kingfisher and I had no problems uploading my application. Now I converted to Swift 3, should I be scared? Which version of Kingfisher you are using?\n. ",
    "technoplato": "I realize this is closed, but to help @MaeseppTarvo and any others, this definitely appears to be an issue with Firebase's caching headers coming from their storage platform. I'm coming from Android, but had a similar issue with an image loading library not caching images, but upon further inspection of the headers realized for some reason that the max age of the file was 0. Trying an image hosted on Github (drag a file into an issue and copy the address) worked perfectly with the cache. Not sure why those default headers are there... =. ",
    "johnyluyte": "I know this is closed, but as @lustigdev said, you can and may want to set Cache-Control metadata when uploading images to Firebase Storage. The default setting (as 2018 March) is Private, max-age=0, thus no cache.\nSearch for metadata in the following official docs for more information how to upload files with customized metadata.\n- https://firebase.google.com/docs/storage/ios/upload-files (iOS)\n- https://firebase.google.com/docs/storage/web/upload-files (javascript)\nHere's a the list of metadata properties that you can set\n- https://firebase.google.com/docs/reference/js/firebase.storage.SettableMetadata#cacheControl\n. ",
    "TouseefSarwar": "Bro i am facing the same problem. Some images are cached and some are not. The images with extension .jpeg or .jpg are cached without any problem but when we are trying to cached image with extension .png they are not caching successfully. @onevcat  @MaeseppTarvo . ",
    "bradmuzza": "I have tried cache control but it still not working. Has anyone found  a workable solution? . ",
    "sherwinzadeh": "My apologies! This was a bug for ObjectMapper, not Kingfisher.\n. ",
    "JustinM1": "Got it, thanks for clearing that up\n. ",
    "morisk": "Hi @onevcat ,\nThank you for the thorough answers(just saw it). I think maybe we can make better, \nI patched Kingfisher version to behave on background thread. Since I don't need safety it was easy and I have much improved results.\nI'll make PR with proper safe thread handling and i will be glad if you could take a look. \n. @hifall you right and this is what I moved away from main thread.\n. At first I tried to direct all Kingfisher extra -\"controlling\" operations to background thread away from main. \nThe reason for that is maybe my edge case: I am running TableView and I am forward caching n images. My original code using Kingfisher framework was:\nswift\nlet prefetcher = ImagePrefetcher(urls: productsPrefetching)\nprefetcher.start()\nAnd I had noticeable  performance issues when scrolling. So I went back to simpler code, only storing into Kingfisher cache and doing my own fetching:\nswift\n            dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_BACKGROUND, 0)) {\n....\n                let manager = KingfisherManager.sharedManager\n                for imageUrl in imageUrlArray {\n                    if manager.cache.cachedImageExistsforURL(imageUrl) == false {\n                        NSURLSession.sharedSession().dataTaskWithURL(imageUrl, completionHandler: { (data, response, error) in\n                            if let data = data where manager.cache.cachedImageExistsforURL(imageUrl) == false {\n                                if let image = UIImage(data: data), let absoluteUrl = imageUrl.absoluteString {\n                                    manager.cache.storeImage(image, forKey: absoluteUrl)\n                                }\n                            }\n                        }).resume()\n                    }\n                }\n          }\nWhile NSCache is thread safe NSFileManager is not and it seems handled well in storeImage(_:).\n. ",
    "linhaosunny": "it's there any example for modify http header? @onevcat . ",
    "vethos": "any url i use it doesn't work\n. ",
    "MylesCaley": "Well, unfortunately the first time the image is shown it will be the unmodified image. I think what I am looking for is a callback before the image is saved and displayed. Since this involves both the UI and the cache not sure what the cleanest approach is. imageModifierHandler on downloadAndCacheImageWithURL ?\n. Ah, perfect . I will just cobble something together for now then dump my changes when this is released.\n. ",
    "wxxsw": "I have a protocol called Resource. When I try to use Kingfisher.Resource, the compiler tells me:\nType 'Kingfisher<_>' has no member 'Resource'. Thank you very much for your super quick reply, my Resource protocol is in the Utils module. Now I'm dealing with this Kingfisher.Resource extension in a separate file in the main module, and waiting for Apple to fix this problem.. ",
    "bedaronco": "Are you using the swift3 branch?  I'm having a similar issue with images not properly showing when moving to swift3.  Trying to track it down but not having much luck.\n. I don't get any errors and it works most of the time.  That's why I'm having trouble figuring out what's happening.  Most features in my app work but when it goes to show user images some of them don't update on the display.  If I force the display to refresh by rotating the device the images appear.  This all worked fine pre-swift3.  So it's either something in the kingfisher updates or it's something in iOS 10 that is causing this to fail.\nIn the screenshots below you can see two different views where I notice this happening.  In the first there should be a user image to the left of the users name.  The second screenshot shows what happens when I scroll down to the next image and back up.  The users image is now there.\nThe last two show a different view where most users images are being displayed properly.  There are a couple that are not display the placeholder image properly.  Above \"joemags\" should be a default placeholder image because he does not have a profile picture.  The last screenshot shows what happens when I rotate the device.  All images are now properly shown.\nHere is some example code that I'm using.  I tried with and without dispatching to the main thread but I get the same results in each case.\n```\nimport UIKit\nclass UserProfileCollectionViewCell: UICollectionViewCell {\n  @IBOutlet weak var profilePic: UIImageView!\n  @IBOutlet weak var nameLabel: UILabel!\n  @IBOutlet weak var verifiedBadge: UIImageView!\nvar imageUrl: String? {\n    didSet {\n      if let url = imageUrl, !url.isEmpty {\n        // tried with and without forcing to the main thread with the same results\n        DispatchQueue.main.async {\n          self.profilePic.kf_setImage(with: URL(string: url)!, placeholder: UIImage(named:\"iconPoint\"),\n            optionsInfo: nil,\n            progressBlock: { (receivedSize, totalSize) -> () in\n              print(\"progress.\")\n            },\n            completionHandler: { (image, error, cacheType, imageURL) in\n              if let isError = error {\n                print(\"Error loading pic: (isError.description)\")\n              }\n            }\n          )\n        }\n      }\n      else {\n        self.profilePic.image = UIImage(named:\"iconPoint\")\n      }\n    }\n  }\noverride func layoutSubviews() {\n    profilePic.layer.cornerRadius = profilePic.bounds.height / 2\n    profilePic.clipsToBounds = true\n  }\n}\n```\nHow it originally looks when the view loads:\n\nAfter scrolling to the next image and back up:\n\nInitial load:\n\nAfter rotating to landscape and back to portrait:\n\n. Yeah, did all of that.  Everything looks like it should work.  I broke when\nthe placeholder get set.  I forced setting the placeholder image on the\nmain thread.  I broke when the image gets set.  I broke in the completion\nhandlers.  It should all work.  It just doesn't always.  I even changed to\nuse the normal async call instead of the asyncSafe, just in case.  Same\nresult.\nI also updated one section to use AlamofireImage and I get the same\nbehavior.  So I don't think this is a kingfisher issue.  Not sure where the\nissue is.\nOn Mon, Sep 5, 2016 at 10:48 PM Wei Wang notifications@github.com wrote:\n\n@bedaronco https://github.com/bedaronco Thanks for the detail\ndescription.\nIt is strange since you have set the placeholder image, so at least the\nplaceholder should be shown, regardless of how other parts of Kingfisher\ncould work or not.\nThe first two screenshots are easier to track in. Would you mind to add\nsome print or breakpoint to see whether the completionHandler could be\ncalled, and you could also check whether the result image/cache type is\nexpected there.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/onevcat/Kingfisher/issues/421#issuecomment-244837854,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAVDUvepfV290XjPWZq8v78CwB5WpFPgks5qnNSSgaJpZM4Jxc8y\n.\n\nBlaine DaRonco\nhttp://iamhere2.com\nhttp://thatjusthappenedllc.com\nhttp://bedaronco.com\n. Might have found a fix.  Try adding self.setNeedsLayout() to your completionHandler of kf_setImage.\n. @ntnhon It will definitely use additional resources than if you don't call this.  But setNeedsLayout() doesn't do anything immediately.  It is supposed to wait for the next drawing cycle before laying out the view.  So there shouldn't be a huge impact on performance, if any.\n\nAnd, as @onevcat mentioned, this is most likely just a temporary workaround.  There should be something that can be done internally to KingFisher to ensure ImageViews get updated properly.  If/when an update is made, you will want to make sure you remove this workaround so that each ImageView doesn't potentially get updated twice.\n. @jawwad What is self in your case?\n. In the completion handler I would call setNeedsLayout() on the imageView, not self and see if that works.\n. @jawwad - Interesting.  Maybe because I'm setting corderRadius in override func layoutSubviews()?\nJust tested and if I move the cornerRadius code to awakeFromNib I have to use imageView.layoutIfNeeded().  \nI think I like this better since it's not called as much as layoutSubviews().\n. @onevcat - RoundCornerImageProcessor does work.  It took me a little while because it didn't seem like it was working at first due to image sizes.  I ended up doing the following:\nlet processor = RoundCornerImageProcessor(cornerRadius: self.profilePic.bounds.height / 2, \n    targetSize: CGSize(width: self.profilePic.bounds.width, \n                       height: self.profilePic.bounds.height))\nThe size of the imageView is 50x50.  The size of the actual image being displayed is much larger.  So I have to set the targetSize so that the image ends up being a circle.  The problem with this is that the image ends up blurry because it's not taking into account the devices scale.  I set the scaleFactor option and that worked much better:\nself.profilePic.kf_setImage(with: url,\n                            options: [.processor(processor), .scaleFactor(UIScreen.main.scale)])\nBut shouldn't the device scale be taken into account by default instead of having to set it every time?  I noticed that scaleFactor defaults to 1.0.  Maybe default it to UIScreen.main.scale instead?\n. ",
    "ntnhon": "I'm facing the same problem. It seems to come from UIKit lately. When I remove the cornerRadius or maskToBounds it works ok. I did try with both iOS 9 and 10 but it produces the same way. Any idea?\n. @bedaronco, @onevcat  thank for pointing out. Will forcing setNeedsLayout() at every image load cause performance problem?\n. Yes right, I actually did the same way to get things work: call\nlayoutIfNeeded on imageView and set corner radius right after that. I\nalso marked it as a todo for eventual optimization, it seems a bad idea for\nme to continuously layout and set corner radius.\nOn Monday, 19 September 2016, Jawwad Ahmad notifications@github.com wrote:\n\nCalling self.setNeedsLayout() in the completion handler didn't work for\nme but calling imageView.layouIfNeeded() right before I set the corner\nradius on the imageView worked.\nReference: http://stackoverflow.com/a/39380129/340508\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/onevcat/Kingfisher/issues/421#issuecomment-248129756,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AD9gbT08juqsUeWH7lz4QR915iTmsty5ks5qrvvwgaJpZM4Jxc8y\n.\n. \n",
    "jawwad": "Calling self.setNeedsLayout() in the completion handler didn't work for me but calling imageView.layouIfNeeded() right before I set the corner radius on the imageView worked.\nReference: http://stackoverflow.com/a/39380129/340508\n. @bedaronco - I tried it on a subclass of UICollectionViewCell.\n. @bedaronco - Just tried it and it didn't work. Also tried with layoutIfNeeded and it didn't work either. \nFor clarity here is what I tried. So this didn't work:\nswift\navatarImageView.kf_setImageWithURL(user.avatarURL) { _, _, _, _ in\n    self.avatarImageView.setNeedsLayout()\n}\nBut this did:\n``` swift\noverride func awakeFromNib() {\n    super.awakeFromNib()\navatarImageView.layoutIfNeeded() // iOS 10 Fix\navatarImageView.layer.cornerRadius = avatarImageView.bounds.width / 2\navatarImageView.clipsToBounds = true\n\n}\n```\n. @bedaronco - Yeah, that's probably it. The comment on this answer also mentions setting the radius in layoutSubviews: http://stackoverflow.com/a/39380129/340508\n. ",
    "ratkins": "We have exactly the same problem on iOS 9: UIImageViews which are subviews of a UIView with rounded corners in a UITableViewCell don't always render properly the first go. Scrolling the cells off and then back onto the screen fixes the problem.\nAdding cell.setNeedsLayout() after the cell.voucherImageView.kf_setImageWithURL(voucher.imageURL) call does not fix the problem for us, and neither does adding a layoutIfNeeded() before we set the corner radius as suggested by the above SO answer.\nUpdate: We've fixed our problem, we were reloading the table view a couple of times unnecessarily which was cancelling in-flight Kingfisher image requests and they weren't re-starting properly. Removing the second reload fixes it. This does suggest a race in Kingfisher somewhere though.\n. ",
    "sagaya": "Yes i can do that . But i want to display the cached image when offline \n. Can i load images when device is offline?\n. Ok so i don't need to prefetcher? \n. Yes but when i turn off my wifi or there is no internet connection it is not loading the cached image\n. ",
    "ZionChang": "\u5bf9\u7684\uff0c\u6211\u4e5f\u77e5\u9053\u53ef\u4ee5\u5355\u72ec\u7528ImageDownloader\u6765\u83b7\u53d6\u4e0b\u8f7d\u6210\u529f\u7684\u56de\u8c03\uff0c \u4f46\u662f\u5176\u4ed6\u7684\u903b\u8f91\u6bd4\u5982\u7f13\u5b58\uff0c\u5b58\u5165\u672c\u5730\uff0c\u8fd9\u4e9b\u90fd\u662f\u548c\u4f60\u5199\u7684retrieveImageWithURL\u8fd9\u91cc\u9762\u5c31\u4e00\u6a21\u4e00\u6837\u4e86\u3002\u90a3\u5c31\u610f\u5473\u7740\u6211\u53ea\u80fd\u91cd\u65b0\u5c06\u7f13\u5b58\u4ee5\u53ca\u4e0b\u8f7d\u8fd8\u6709\u5b58\u6c99\u76d2\u90fd\u91cd\u65b0\u81ea\u5df1\u5728\u65b9\u6cd5\u4e2d\u5b9e\u73b0\u5417\uff1f\n. OK, Thank you very much\uff01\nSo would you tell me the reason why completionHandler doesn't provide original data or file path?\n. ",
    "leobarrospereira": "Hi @onevcat,\nThis is an example of one of the gifs that I'm using (https://raw.githubusercontent.com/leobarrospereira/files/master/images--KO9Glhl2T7C_b3qLKcX.gif)\nIn my case I download the image from the server not using the Kingfisher, I'm using the Firebase Storage. It returns the Data of the file, so I create a UIImage using this data and then I save it in the Kingfisher cache passing the image and the data.\nThis is a sample of the code after download the data from Firebase Storage:\nlet image = UIImage(data: data)\nKingfisherManager.shared.cache.store(image, original: data, forKey: identifier, toDisk: true, completionHandler: {\n    // Do something\n})\nAnd in this case the file is not added into the cache because serializer.data(with: image, original: original) returns nil.\nI'm having this kind of problem only with gifs, for jpg it works.\nThanks!\n. Hi @onevcat \nI tried your suggestion and it worked!\nYou can close the issue.\nThanks for your support!\n. ",
    "AdvanceYe": "I see, thanks a lot~\n. ",
    "Viktormax": "I've the same issue too... tried to update source repos, nothing change\n. ",
    "webfrogs": "Looks great. But I have some different ideas about the implement of namespace.It's about adding namespace extension with Struct type in swift.\n1. Using the generic struct Kingfisher<Base> as the default implement for Class Type\n2. When extension the Struct type like Swift 3's Data  type. Define a new struct named like XXXProxy to implement the KingfisherCompatible type which is defined before. Then writing all extension of the Proxy struct to do the  extension jobs. By doing this, We can avoid using type cast to get the right type, because I believe type casting is the bad code smell of swift.\nFirst, making some small change of KingfisherCompatible protocol, There is no need to give the set property.\nSwift\nprotocol KingfisherCompatible {\n    associatedtype CompatibleType\n    var kf: CompatibleType { get }\n}\nThen, extension Data type can be something like this:\n``` Swift\nstruct DataProxy {\n    fileprivate let value: String\n    init(_ value: String) {\n        self.value = value\n    }\n}\nextension Data: KingfisherCompatible {\n    typealias CompatibleType = DataProxy\n    var kf: CompatibleType {\n        return DataProxy(self)\n    }\n}\nextension DataProxy {\n   // Do whatever you want, and you can use value to get the exactly type: Data\n}\n```\n. #441 , I create a pr ,just change the way of implemention\n. ",
    "jeffreyabarrios": "My bad, I was still on version 2 of the repository, sorry!\n. ",
    "Sunitadaffodil": "Hey,\nNo I have not argued it with Apple's guys for it.\nBut I have confirmed , that imageCache is not used in project code.\n Let me argue with Apple , may be they can give exact insight into it.\nThanks for this qiuck response.\n. Hi, my app is now approved by Review Team. But its strange , that they rejected app previously.\n. ",
    "Panajev": "To be fair the force download option, for static URL\u2019s where the content may change, could work more similarly to SDWebImage where it would serve the image in cache of present, discard the item in the cache, fetch the image from the remote server, and call the completion block again with the updated image (even if it did we would have the image next time we fetch it from the cache anyways). What do you think?\nSent from my iPhone\n\nOn 6 Mar 2018, at 06:27, Wei Wang notifications@github.com wrote:\nPlease read our wiki:\nCustomize cache key:\nhttps://github.com/onevcat/Kingfisher/wiki/Cheat-Sheet#use-a-specified-key-other-than-the-url-for-cache\nForce downloading:\nhttps://github.com/onevcat/Kingfisher/wiki/Cheat-Sheet#skip-cache-searching-force-downloading-image-again\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Does the library ignore the cache busting parameter and just uses the base path?\n\nSent from my iPhone\n\nOn 13 Feb 2018, at 07:40, Dhurv Tekchandani notifications@github.com wrote:\nThe images are added like this, with each being different with their names\nDelishMenu1, DelishMenu2\nImage 1: \"https://firebasestorage.googleapis.com/v0/b/foodoncampus-1f07c.appspot.com/o/RestaurantMenus%2FDelish%2FDelishMenu1.jpg?alt=media&token=5b5b330c-1093-4de9-b0b2-1a7c44ebabb3\"\nNew Image added: https://firebasestorage.googleapis.com/v0/b/foodoncampus-1f07c.appspot.com/o/RestaurantMenus%2FDelish%2FDelishMenu10.jpg?alt=media&token=41bdd206-909e-47f8-b86b-d0cb155d33bc\nSo as you can see the urls are different.\nTherefore I am a bit confused on how to solve this.\nThank you.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. \n",
    "alimysoyang": "\u8bf7\u95ee\u4e00\u4e2a\u95ee\u9898\uff0cAnimatedImageView\u8fd9\u4e2a\u7c7b\u662f\u4e0d\u662f\u53ea\u80fd\u663e\u793a\u672c\u5730GIF\uff0c\u4e0d\u80fd\u663e\u793a\u7f51\u7edcGIF\uff0c\u8c22\u8c22\n. \u6211\u8bf4\u4e00\u4e0b\u6211\u8c03\u7528\u7684\u65b9\u6cd5\uff0c\u521d\u59cb\u5316\u4e00\u4e2aAnimatedImageView\uff0c\u5982\u4e0b\uff1a\nfileprivate lazy var ivMonsterEmoji:AnimatedImageView = {\n        let imageView:AnimatedImageView = AnimatedImageView(frame: CGRect.zero);\n        imageView.contentMode = UIViewContentMode.scaleAspectFit;\n        imageView.isHidden = true;\n        imageView.autoPlayAnimatedImage = false;\n        return imageView;\n   }();\n\u8c03\u7528\u8fdc\u7aefGIF\n        self.ivMonsterEmoji.kf_setImage(with:URL(string: String(format: \"%@%@/id/%@\", BBHelper.kHostName, BBHelper.kHTTPMonsterEmojiUrlPath, emojid)), placeholder: nil, options: [.preloadAllGIFData], progressBlock: nil, completionHandler: {weak self in\n            if let strongSelf = self\n            {\n                strongSelf.ivMonsterEmoji.isHidden = false;\n                strongSelf.ivMonsterEmoji.startAnimating();\n            }\n           });\n\u540e\u6765\u6211\u6d4b\u8bd5\u4e86\u4e00\u4e0b\uff0c\u53d1\u73b0\u95ee\u9898\u51fa\u5728\u201coptions: [.preloadAllGIFData]\u201d\uff0c\u8fd9\u4e2a\u53c2\u6570\uff0c\u6211\u5f00\u59cb\u8bbe\u7f6e\u7684\u662f\u201coptions:nil\u201d\uff0c\u8fd9\u6837\u8bbe\u7f6e\u5728\u6a21\u62df\u5668\u4e0a\u6ca1\u6709\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u64ad\u653eGIF\uff0c\u4f46\u662f\u5728\u771f\u673a\u4e0a\u8fd0\u884c\u5c31crash\u4e86\uff0c\u4f46\u662f\u5982\u679c\u6211\u8bbe\u7f6e\u6210\u201coptions: [.preloadAllGIFData]\u201d\uff0c\u53c8\u51fa\u73b0\u4e00\u4e2a\u95ee\u9898\uff0cAnimatedImageView\u8fd9\u4e2a\u91cc\u9762\u7684\u65b9\u6cd5\u90fd\u4e0d\u6267\u884c\u4e86\uff0c\u53d8\u6210\u4e86\u4e00\u4e2a\u5b8c\u5168\u7684UIImageView\u7684\u6269\u5c55\n. ",
    "wangghon": "I have the same issue as iLucas97 mentioned above\n. ",
    "thieu75": "I also have the same problem. \nCocoaPods install 2.x when using Pod 'Kingfisher'.\nPod 'Kingfisher', '~> 3.0' generate an error during pod install\nSo I also use\npod 'Kingfisher', :git => 'https://github.com/onevcat/Kingfisher', :branch => 'master'\n104 issues for me. \ud83d\udc4d  !!\nThanks,\nMatthieu\n. ",
    "Sundin": "pod 'Kingfisher', :git => 'https://github.com/onevcat/Kingfisher.git', :tag => '3.0.1'\nsolved the issue for me.\n. Hi @jjjeeerrr111 and @sham3k. I don't know if this helps you, but I faced a similar issue and in my case it was caused by a retain cycle in my completionHandler. So if you reference self inside the completionHandler, you need to make it a weak reference like this:\ncompletionHandler: { [weak self] image, error, cacheType, imageURL in\n    self?.doSomething()\n}. ",
    "tengpeng": "Thanks for reviewing. I suppose the indent is changed by default ctrl + I in Xcode 8, since I don't use swiftLint. I'll try to revert such changes.\nOn file access mode, can you give me an example? I am not sure what could be improved or prevented.  Thanks.\n. ",
    "phimage": "Maybe you swap key and value\nswift\nconfiguration.httpAdditionalHeaders = [\n     \"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=1.0\" ,\n     \"Authorization\":  \"Bearer \\(tokens.accessToken)\"\n]\n. @Mazorati the issue you point out #452 is described also here https://github.com/onevcat/Kingfisher/wiki/Cheat-Sheet#use-your-own-session-configuration-in-a-downloader and must work\n. ",
    "gregorpichler": "Hi @phimage, thanks for your very good hint! Unfortunately I'm still having the same problem (401 - unauthorized)\n. @onevcat thanks for your answer. I've changed my code from modifying the session configuration to requestModifier. \nI think the problem is that I need to tell URLSession that it should trust my self-signed certificate, I somehow thought that the option trustedHosts = Set([\"testing.mywebsite.com\", \"api.mywebsite.com\"]) will solve the problem. Am I doing something wrong with this setting?\n. @onevcat I'm not sure if it works with URLSession due to the self-signed certificate. What I can confirm is, that it works with Postman if I turn off SSL certificate verification and use the same bearer token that I'm using in the app.\n. Yeah just double checked it, it's a GET.\n. Hmmm I doubt that it has something to do with a token issue, as I'm performing a couple of other requests to the server that are working. For other network requests I'm using Moya, where I set the following manager (Alamofire SessionManager)\n```\nclass func trustCaCert() -> Manager {\n    let policies: [String: ServerTrustPolicy] = [\n        \"testing.mywebsite.com\": .pinCertificates(\n            certificates: ServerTrustPolicy.certificates(in: Bundle(for: self)),\n            validateCertificateChain: true,\n            validateHost: true\n        ),\n        \"api.mywebsite.com\": .pinCertificates(\n            certificates: ServerTrustPolicy.certificates(in: Bundle(for: self)),\n            validateCertificateChain: true,\n            validateHost: true\n        )\n    ]\n\n    let manager = Manager(\n        configuration: URLSessionConfiguration.default,\n        serverTrustPolicyManager: ServerTrustPolicyManager(policies: policies)\n    )\n\n    return manager\n\n}\n```\nIs there some similar option in Kingfisher?\n. @onevcat Unfortunately I'm not having any success on this. I've replaced my self signed certificate with a SSL certificate from a trusted CA and now I can access the image resource with Postman.\nHowever Kingfisher still returns an unauthorized error code. I'm using the code below and if I'm using the accessToken in Postman everything works fine (so it can't be a token issue).\n```\nlet modifier = AnyModifier { request in\n        var r = request\n        r.setValue(\"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,/;q=1.0\", forHTTPHeaderField: \"Accept\")\n        r.setValue(\"Bearer (accessToken)\", forHTTPHeaderField: \"Authorization\")\n    return r\n\n}\nlet url = URL(string: \"https://www.mywebsite.com\")\nself.kf.setImage(with: url, placeholder: placeholder, options: [.requestModifier(modifier)],   progressBlock: nil) { (image, error, cacheType, url) in\n        if let img = image {\n            self.image = img\n        } else {\n            self.image = placeholder\n        }\n    completion?(image, error, cacheType, url)\n\n}\n```\n. UPDATE\nI've now replaced requestModifier by the following code and now it works.\n```\nlet configuration = URLSessionConfiguration.default\nconfiguration.httpAdditionalHeaders = [\n     \"Authorization\" : \"Bearer (user.userData.tokenAuthentication!.accessToken!)\"\n]\nlet imgManager = ImageDownloader.default\nimgManager.sessionConfiguration = configuration\n``\n. Oh my god, I think I've found the issue (not sure if it would also solve the initial issue with a self signed certificate), the accessToken I've set as value was interpreted asOptional(\"...\")` by Swift so I had to force unwrap it. Now it's working fine :)\nMany thanks for your patience and keep up the good work\n. ",
    "geraldeersteling": "Sorry to open up this issue again, but I'm having similar issues.\nI keep getting a 401 even though I verified that manually downloading  the binary data (with a URLSession and data task) works, I get a 200 and the bytes I expect.\nI'm not sure why the downloader fails, I double checked that the session token I send is attached through the .requestModifier and I send the correct credentials in the authentication challenge.\nI've implemented the ImageDownloader's delegate methods and keep seeing: \nOptional(Error Domain=com.onevcat.Kingfisher.Error Code=10002 \"unauthorized\" UserInfo={NSLocalizedDescription=unauthorized, statusCode=401})\neven though I logged the request just before sending: \nrequest: Optional(https://{PATH_TO_IMG_BINARY})\nheaders: Optional([\"{A_SESSION_TOKEN}\": \"Session-Token\", \"image/png\": \"Content-Type\"])\n\nPATH_TO_IMG_BINARY and A_SESSION_TOKEN above both contain valid values. When I use a REST client (PAW) and execute the same request I get the correct image back\n\nI've made an convenience extension on UIImageView:\n``` swift\nfunc imageFromEndpoint(_ url: URL, request: URLRequest) { \n        kf.cancelDownloadTask()\n    let modifier = AnyModifier {\n            var modified = $0\n            modified.httpMethod = request.httpMethod\n            let _ = request.allHTTPHeaderFields?.compactMap {\n                    modified.setValue($0.key, forHTTPHeaderField: $0.value)\n            }\n            return modified\n    }\n    kf.setImage(with: ImageResource(downloadURL: url),\n                         options: [.requestModifier(modifier)])\n\n}\n```\nAm I doing something wrong here?\n\nEDIT:\nHm, \ud83c\udd97  I just got it to work. Instead of returning the $0 in the AnyModifier's block I Just returned the request and ignored the provided request. I.e.:\nswift\nlet modifier = AnyModifier { _ in\n    return request\n}\nThis led me to believe I'm doing something wrong in the modifying block or there is a bug/issue with it. \ud83e\udd14 . Woops, sorry forgot to update my comment. I already figured my own noobish mistake...sigh sorry for wasting your time, but thanks for responding!. ",
    "adrianhr91": "Actually found a solution to my problem, posting it here in case someone is having the same issue.\n``` swift\nlet downloader = KingfisherManager.shared.downloader\nlet headers = [\"header1\": \"valu1\"]\nlet configuration = URLSessionConfiguration.default\nconfiguration.httpAdditionalHeaders = headers\ndownloader.sessionConfiguration = configuration\n```\n. ",
    "weichencoder": "\u8c22\u5927\u55b5\u795e\n. ",
    "vaibhav-varshaaweblabs": "@Codeido Can you please show step by step how to implement this SVGProcessor and how to call?. @Codeido Check this image. I'm trying to implement your code, but how to import PocketSVG inside KingFisher Pods?\n\n. @Codeido my code crashes at this line \n\n. @Codeido how can we handle this crash via try-catch?. @Codeido Ohk. @Codeido Have you used SVGKit instead of PocketSVG?. @Codeido Can you help me add SVGKit in ImageProcessor file?. Same issue with me. ",
    "newmanw": "I can certainly take a crack at it, with a warning that I just started using swift ;)\nDo you think it makes more sense as a separate ImageProcessor, or possibly as part of options passed to the current resize processor?\n. ",
    "L4grange": "I put together a quick centre crop processor that I needed for my app, posting it here for anyone that might need it. I have not implemented the anchor yet, if I do I'll create a pull request. :) (P.S.: The code was found on stack overflow, I just put it in an ImageProcessor)\n```swift\nimport Foundation\nimport Kingfisher\n/// Processor for cropping the center of an image\npublic struct CenterCropImageProcessor: ImageProcessor {\n        public let identifier: String\n    /// Center point to crop to.\n    public var centerPoint: CGFloat = 0.0\n\n    /// Initialize a `CenterCropImageProcessor`\n    ///\n    /// - parameter centerPoint: The center point to crop to.\n    ///\n    /// - returns: An initialized `CenterCropImageProcessor`.\n    public init(centerPoint: CGFloat? = nil) {\n        if let center = centerPoint {\n            self.centerPoint = center\n        }\n        self.identifier = \"com.l4grange.CenterCropImageProcessor(\\(centerPoint))\"\n    }\n\n    public func process(item: ImageProcessItem, options: KingfisherOptionsInfo) -> Image? {\n        switch item {\n        case .image(let image):\n\n            var imageHeight = image.size.height\n            var imageWidth = image.size.width\n\n            if imageHeight > imageWidth {\n                imageHeight = imageWidth\n            }\n            else {\n                imageWidth = imageHeight\n            }\n\n            let size = CGSize(width: imageWidth, height: imageHeight)\n\n            let refWidth : CGFloat = CGFloat(image.cgImage!.width)\n            let refHeight : CGFloat = CGFloat(image.cgImage!.height)\n\n            let x = (refWidth - size.width) / 2\n            let y = (refHeight - size.height) / 2\n\n            let cropRect = CGRect(x: x, y: y, width: size.height, height: size.width)\n            if let imageRef = image.cgImage!.cropping(to: cropRect) {\n                return UIImage(cgImage: imageRef, scale: 0, orientation: image.imageOrientation)\n            }\n\n            return nil\n\n        case .data(_):\n            return (DefaultImageProcessor.default >> self).process(item: item, options: options)\n        }\n    }\n\n}\n```. Thanks for your reply. I have done what you've asked me and it turns out even without using kingfisher, my imageview gets hidden on ios 9 and 10. The imageView is inside a scrollview and gets hidden by a white view that does not appear on the view hierarchy debugger. This is a layout issue that I'll have to debug myself. Thank you for your time and your help, and this amazing library!. ",
    "mhtranbn": "how i can crop image @onevcat many thank for support, great respo!. ",
    "pajapro": "Awesome thanks @frankrausch, @onevcat \n. ",
    "AndrewBarba": "I should have been more clear, this does not compile:\nlet imageView = UIImageView()\nimageView.kf.indicatorType = .activity\nBut this does:\nvar imageView = UIImageView()\nimageView.kf.indicatorType = .activity\nThe screenshot I posted is my own extension on UIImageView which I guess is the same thing as the let case\n. No problem, I should have also stated this is on Swift 4 (swift4 branch) and iOS 11, Xcode 9 beta 6.. ",
    "AlbertoGuerreroMartin": "Hi @onevcat , I'm doing this:\nself.cellImageView.kf_setImage(with: ImageResource(downloadURL: imageURL), placeholder: placeholderImage, options: [.processor(grayscaleProcessor)], progressBlock: nil, completionHandler: nil)\nwhere grayscaleProcessor is my custom image processor.\nThe problem is that the processor is never called, not even when I clear the cache (which I suppose I'm not doing correctly)\n. ok @onevcat , nevermind, I had an old version of Kingfisher. After updating it, everything is working fine \ud83d\ude05  sorry and thanks!\n. ",
    "LarsWith": "@onevcat thanks!\nRight now I am using it like this in my tableview:\nmyImage.kf.setImage(with: thumbUrl, placeholder: placeImg, options: [.transition(.fade(0.2))])\n- It downloads a thumbnail like you said\nAnd in didEndDisplaying I call myImage.kf.cancelDownloadTask()\nI have not seen any issues with memory/cache I just wanted to double check :)\nTwo questions:\nHow do I call clearMemoryCache() clearDiskCache()  the example file shows:\nKingfisherManager.shared.cache.clearMemoryCache()\nKingfisherManager.shared.cache.clearDiskCache()\nwhile the Cheat-Sheet shows:\ncache.clearMemoryCache()\ncache.clearDiskCache()\nI was thinking on calling them inside \noverride func didReceiveMemoryWarning() {\n        super.didReceiveMemoryWarning()\n        // Dispose of any resources that can be recreated.\n}\nAnd lastly I am thinking of setting maxDiskCacheSize in viewdidload but do you set durtion and size in the same function?\n```\nImageCache.default.maxDiskCacheSize = 60 * 60 * 24 * 3\n// Default value is 60 * 60 * 24 * 7, which means 1 week.\n```\n// 50 MB\nImageCache.default.maxDiskCacheSize = 50 * 1024 * 1024\n// Default value is 0, which means no limit.\nI got a bit confussed with with those examples.\nThanks in advance!\n. ",
    "fuboyou": "\u611f\u8c22\u56de\u590d\uff0c\u7684\u786e\u6709\u53ef\u80fd\u662f\u56fe\u50cf\u95ee\u9898\uff0c\u4f7f\u7528\u7684\u9ad8\u6e05\u56fe\uff0c\u6211\u5c06\u5728\u8f83\u5c0f\u7684\u56fe\u7247\u518d\u6b21\u9a8c\u8bc1\uff0c\u5148\u5173\u95ed\u8fd9\u4e2aissue\n. ",
    "profesori": "Re install Kingfisher (pod install) solves the issue\n. Re installing Kingfisher solves the problem\n. ",
    "NSLogxiaoyu3": "I add \"imageview.layoutIfNeeded()\" and fixed \n. ",
    "pentarex": "you can close the issue, for no reason the problem was in \nswift\nreturn UIImage.scaleTo(image: image, w: desiredWidth, h: desiredHeight)\nIve used your function kf.resize and now everything is fine :)\n. ",
    "faisalrasbihan": "I used that, but my project have a dynamic cell height so the cell height is dependent on the size of the image. And since I load the image asynchronously I need to call tableView.reloadData() in the completion handler. I eventually get around this issue by creating an array of bool to check if I should reload the table view for a specific cell. What would be nice is if there is an option to call the completion handler only once.\n. ",
    "heeween": "manually change class ImageCache function \"defaultDiskCachePathClosure(path:, cacheName:)\" maybe solve your problem @kiwo12345\n. ",
    "Hanwp": "\u6211\u91cd\u65b0clean\u8fd8\u662f\u90a3\u4e2a\u9519\u8bef\uff0c\u6211\u7528\u7684xcode8.1\n. ",
    "kubajakowski": "besides memory issues it's also related to https://github.com/onevcat/Kingfisher/issues/375. ",
    "RajeshRajendiran": "@onevcat tried not working any other ?\n. @onevcat  not working \n. @onevcat Ya working in new sample project, How can i do work with current project any suggestions ?\n. ",
    "Drusy": "Hello, \nMy Cartfile.resolved looks like github \"onevcat/Kingfisher\" \"3.2.0\" and I am experimenting the same issue. The crash happens at random for me if I start a large number of parallel connections.\nWill post the stack soon.\n. Can this help ?\n(lldb) bt\n* thread #10: tid = 0xba08b, 0x00000001001f2e8c libBacktraceRecording.dylib`__gcd_queue_item_enqueue_hook_block_invoke, name = 'com.apple.NSURLConnectionLoader', stop reason = EXC_BAD_ACCESS (code=1, address=0xa9417bfdd10043df)\n  * frame #0: 0x00000001001f2e8c libBacktraceRecording.dylib`__gcd_queue_item_enqueue_hook_block_invoke\n    frame #1: 0x00000001001f241c libBacktraceRecording.dylib`gcd_queue_item_enqueue_hook + 232\n    frame #2: 0x0000000101845ee8 libdispatch.dylib`_dispatch_introspection_queue_item_enqueue_hook + 40\n    frame #3: 0x0000000101824ba4 libdispatch.dylib`_dispatch_queue_push + 196\n    frame #4: 0x000000018b94b864 CFNetwork`Throttler::noteOutstandingBytes(long long) + 96\n    frame #5: 0x000000018b8eea9c CFNetwork`HTTPProtocol::tryToSendDispatchDataToDelegate(dispatch_data_s*) + 116\n    frame #6: 0x000000018b8e8810 CFNetwork`HTTPProtocol::bytesAvailable(dispatch_data_s*) + 120\n    frame #7: 0x000000018b8e7e40 CFNetwork`HTTPProtocol::handleStreamEvent(__CFHTTPMessage*, dispatch_data_s*, CFStreamError const*) + 596\n    frame #8: 0x000000018b9c5d64 CFNetwork`___ZN15HTTPTransaction22_onqueue_invokeHandlerEv_block_invoke.64 + 60\n    frame #9: 0x000000010181921c libdispatch.dylib`_dispatch_client_callout + 16\n    frame #10: 0x0000000101823c9c libdispatch.dylib`_dispatch_block_invoke_direct + 400\n    frame #11: 0x000000018b9dfeb4 CFNetwork`RunloopBlockContext::_invoke_block(void const*, void*) + 36\n    frame #12: 0x000000018b09b9a8 CoreFoundation`CFArrayApplyFunction + 68\n    frame #13: 0x000000018b9dfd98 CFNetwork`RunloopBlockContext::perform() + 136\n    frame #14: 0x000000018b9e10c0 CFNetwork`MultiplexerSource::perform() + 312\n    frame #15: 0x000000018b9e0e2c CFNetwork`MultiplexerSource::_perform(void*) + 64\n    frame #16: 0x000000018b170278 CoreFoundation`__CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE0_PERFORM_FUNCTION__ + 24\n    frame #17: 0x000000018b16fbc0 CoreFoundation`__CFRunLoopDoSources0 + 524\n    frame #18: 0x000000018b16d7c0 CoreFoundation`__CFRunLoopRun + 804\n    frame #19: 0x000000018b09c048 CoreFoundation`CFRunLoopRunSpecific + 444\n    frame #20: 0x000000018b88dfd0 CFNetwork`+[NSURLConnection(Loader) _resourceLoadLoop:] + 336\n    frame #21: 0x000000018bcab47c Foundation`__NSThread__start__ + 1024\n    frame #22: 0x000000018a258850 libsystem_pthread.dylib`_pthread_body + 240\n    frame #23: 0x000000018a258760 libsystem_pthread.dylib`_pthread_start + 284\n    frame #24: 0x000000018a255dac libsystem_pthread.dylib`thread_start + 4. Hi @onevcat, @TimOliver,\nI just had to implement this feature this morning for my project functional scope.\nWould you like me to share and make the PR for this or @TimOliver do you want to implement this one ?\nLet me know\n. @onevcat of course, keep me updated :). @onevcat After reading @BrikerMan PR, I actually didn't know the existence of a such method func resize(to size: CGSize, for contentMode: UIViewContentMode) -> Image. If I would, I would probably have done the same.\nHere is my PR #600 for this feature using your size proxy (no UIKit). @onevcat Up to date. @onevcat Do you plan adding some test to test the content modes ?\nI tried to look at the test on ImageProcessor but it looks more complicated than I expected.\nAlso, I am missing the linked images such as kingfisher.jpg, onevcat.jpg, etc. These images are not in the project, what am I missing ?\nI am actually missing all the Original and Modified images from the project.. @onevcat Well I let you handle this so :)\nThanks for this clarifications, will still be useful for a future pull request (tested this time) !\nContinue great work on this great framework \ud83e\udd47 . @GWesley clean build folder made it work for me, I don't think this is related to Kingfisher. See better solution than this one ?\nif contentMode == .none {\n            self.identifier = \"com.onevcat.Kingfisher.ResizingImageProcessor(\\(targetSize))\"\n        } else {\n            self.identifier = \"com.onevcat.Kingfisher.ResizingImageProcessor(\\(targetSize), \\(contentMode))\"\n        }. ",
    "indrajitsinh": "upgrade to Xcode 8.2 it's work fine for me in Xcode 8.2. ",
    "danieldelouya": "I guess it can work yeah, but it would feel 'safer' if there was a feature where you could wait setting the image in the imageview until the image has finished downloaded. I know that's possible with AlamofireImage, but I just prefer Kingfisher way more \ud83d\udc4d \n. And thank you for the quick response! Really appreciate it. \n. ",
    "mikkelam": "I mean an option to have the indicator always be present without having to set it for each imageview\n. ",
    "chenawu2": "Hey Thanks.\nLast question, if I reuse the same processor with the same arguments, and I call it on the same image url, is Kingfisher smart enough to know that a 77x77 resize of this image already has been done before?\n. ",
    "ManueGE": "Sure! I'll do it soon\n. ",
    "LucaIaconelli": "Hello,\nI've done this but Xcode give me this error: \nUnknown class AnimatedImageView in Interface Builder file.\nThanks you so much\n. Works!\nThank you so much. ",
    "LvJianfeng": "\u4e0d\u597d\u610f\u601d\uff0c\u6211\u8fd9\u5f15\u7528\u9519\u4e86\u3002\u3002\u3002\n. @onevcat \u55ef\u55ef\uff0c\u597d\u4e86\uff0c\u8c22\u8c22\u5462\u3002. \u6211\u60f3\u63a7\u5236cachekey\uff0c\u6628\u665a\u770b\u4e86\u4e0b\uff0c\u6211\u60f3\u6211\u627e\u5230\u65b9\u6cd5\u4e86ImageCache\uff0c\u6765\u8bbe\u7f6ekey\u4e3aurl\u7684\u67d0\u4e2a\u56fa\u5b9a\u7684\u90e8\u5206\uff0cretrieveImage\u53bb\u53d6\u56de\u3002. ",
    "monica18p": "I am also facing similar issue.\nI have a view where the images get loaded correctly.\nThen when i go to another view which is not having any image(image url is not having any image) then, the previous' view's images are shown in this empty image view instead of placeholder image.\nThis happens when i use [.forceRefresh] option. with no options this isn't happening.\nI think its something related to incorrect indexing while storing image in disk/memory\n. ",
    "noear": "\u975e\u5e38\u611f\u8c22\uff01\n. \u6211\u6025\u9700\u8981\u8fd9\u4e2a\u529f\u80fd\uff1b\u5e0c\u671b\u5e2e\u52a9\u89e3\u51b3\u3002\n. \u975e\u5e38\u611f\u8c22\uff01\n. \u6211\u7528\u7684\u4ee3\u7801\u5e93\u7248\u672c\u4e3a\uff1a3.6.2. \u53ef\u7528\u4e8e\u6d4b\u8bd5\u7684\u5730\u56fe\u5730\u5740\uff1ahttps://nos.netease.com/comic/2d7e6a5df8f94debb857f593701cdbeb?NOSAccessKeyId=c92f74b0d48f4fb39271a1109da74cc2&Expires=1495173017&Signature=zQXKqX%2BtOD4bwRMD5s4E4e7CRTfQ2pJ7tF8y1CBRyOc%3D  . \u627e\u5230\u539f\u56e0\u4e86\uff0ccode=10000\u662f\u8f6c\u6362\u5931\u8d25\u7684\u610f\u601d\u3002\n\u8fd9\u4e2a\u56fe\u7247\u683c\u5f0f\u662f\uff1awebp\u3002\u6240\u4ee5\u8f6c\u6362\u5931\u8d25\u3002\n\u53ef\u5426\u652f\u6301webp \u683c\u5f0f\uff1f. \u8c22\u8c22\u3002. ",
    "tranvutuan": "From the cheat sheet in wiki, I created my own CacheSerializer named NewSerializer like below\n```\nstruct NewSerializer: CacheSerializer\n{\n    public func data(with image: Image, original: Data?) -> Data? {\n        return RNCryptor.encrypt(data: UIImagePNGRepresentation(image)!, withPassword: \"123456789\")\n    }\nfunc image(with data: Data, options: KingfisherOptionsInfo?) -> Image?\n{\n    var image = Image()\n    do {\n        image = try UIImage(data: RNCryptor.decrypt(data: data, withPassword: \"123456789\"), scale: 1)!\n    }\n    catch{\n\n    }\n    return image\n}\n\n}\n```\nFor the first method, I'm currently using RNCryptor for encryption and decryption. \nFrom the sample code, I am doing:\n_ = (cell as! CollectionViewCell).cellImageView.kf.setImage(with: resource, placeholder: nil, options: [.cacheSerializer(serializer)], progressBlock: nil, completionHandler: { image, error, cacheType, imageUrl in\n            print(\"\\(cacheType, indexPath.row): Finished\")\n        })\nI am facing an issue : \nFrom the cache folder located at :../Library/Caches/com.onevcat.Kingfisher.ImageCache.default/,  some of the images are still be previewed.\nAny thoughts about this.\n. @onevcat: I figured it out. The reason I am able to preview some of them is because prefetching image process which is currently using default serializer. In order to encrypt, I have to pass my own serializer to ImagePrefetcher like following\nImagePrefetcher(urls: urls, options: [.cacheSerializer(serializer)]).start()\nand then everything works like expectation.. ",
    "Sol88": "Thank you very much! I've also checked on iOS 9 and everything is ok.. Oh... I see. Thank you very much for such detail investigation! And one more time thanks for your lib!!! . ",
    "zyxlcr": "\u53ef\u4ee5\u7528git\u628a\u56fe\u7247\u7684\u6587\u4ef6\u5939\u4e2d\u7684\u5185\u5bb9\u5ffd\u7565\u6389,\u8fd9\u6837\u5c31\u6ca1\u6709\u5f71\u54cd\u4e86. ",
    "hi-guy": "```\nlet processoor = options.processor\nvar image = imageCache[processoor.identifier]\nif image == nil {\n    image = processoor.process(item: .data(data), options: options)\n// Add the processed image to cache. \n// If `image` is nil, nothing will happen (since the key is not existing before).\n\nimageCache[processoor.identifier] = image\n\n}\n``processoor`  \u55b5\u5927 \ud83d\ude02.  . ",
    "jaybowong": "One more crash happened.\n\nConsole output:\n2016-11-29 18:27:28.667 Xxxxxx[7215:3330203] *** Terminating app due to uncaught exception 'NSInvalidArgumentException', reason: '*** NSAllocateMemoryPages(408522) failed'\n*** First throw call stack:\n(0x181de6db0 0x18144bf80 0x181de6cf8 0x18273f9f4 0x18271510c 0x1826df988 0x1870a215c 0x187237e58 0x187174088 0x104b77968 0x104b726ec 0x104ba6228 0x104ba2a6c 0x10589da7c 0x10589da3c 0x1058a8a24 0x10589da3c 0x1058acc9c 0x1058ac364 0x181a49470 0x181a49020)\nlibc++abi.dylib: terminating with uncaught exception of type NSException\n----\n(lldb) bt\n* thread #38: tid = 0x32d09b, 0x000000018198011c libsystem_kernel.dylib`__pthread_kill + 8, queue = 'com.onevcat.Kingfisher.ImageDownloader.Process.clickReadDownload', stop reason = signal SIGABRT\n    frame #0: 0x000000018198011c libsystem_kernel.dylib`__pthread_kill + 8\n    frame #1: 0x0000000181a4cef8 libsystem_pthread.dylib`pthread_kill + 112\n    frame #2: 0x00000001818f1dc8 libsystem_c.dylib`abort + 140\n    frame #3: 0x00000001814253f4 libc++abi.dylib`abort_message + 132\n    frame #4: 0x0000000181441e98 libc++abi.dylib`default_terminate_handler() + 304\n    frame #5: 0x000000018144c248 libobjc.A.dylib`_objc_terminate() + 124\n    frame #6: 0x000000018143ef44 libc++abi.dylib`std::__terminate(void (*)()) + 16\n    frame #7: 0x000000018143e85c libc++abi.dylib`__cxa_throw + 136\n    frame #8: 0x000000018144c094 libobjc.A.dylib`objc_exception_throw + 332\n    frame #9: 0x0000000181de6cf8 CoreFoundation`+[NSException raise:format:] + 120\n    frame #10: 0x000000018273f9f4 Foundation`NSAllocateMemoryPages + 100\n    frame #11: 0x000000018271510c Foundation`_NSDataCreateVMDispatchData + 36\n    frame #12: 0x00000001826df988 Foundation`-[_NSPlaceholderData initWithBytes:length:copy:deallocator:] + 256\n    frame #13: 0x00000001870a215c UIKit`_UIImageRefFromData + 364\n    frame #14: 0x0000000187237e58 UIKit`-[UIImage(UIImagePrivate) _initWithData:preserveScale:cache:] + 124\n    frame #15: 0x0000000187174088 UIKit`-[UIImage initWithData:scale:] + 28\n    frame #16: 0x0000000104b77968 Kingfisher`function signature specialization <Arg[0] = Owned To Guaranteed, Arg[3] = Dead> of generic specialization <__ObjC.UIImage> of static (extension in Kingfisher):Kingfisher.Kingfisher<A where A: __ObjC.UIImage>.image (data : Foundation.Data, scale : CoreGraphics.CGFloat, preloadAllGIFData : Swift.Bool) -> Swift.Optional<__ObjC.UIImage> + 176 at Image.swift:0\n    frame #17: 0x0000000104b726ec Kingfisher`protocol witness for Kingfisher.ImageProcessor.process (item : Kingfisher.ImageProcessItem, options : Swift.Array<Kingfisher.KingfisherOptionsInfoItem>) -> Swift.Optional<__ObjC.UIImage> in conformance Kingfisher.DefaultImageProcessor : Kingfisher.ImageProcessor in Kingfisher + 112 at Image.swift:0\n  * frame #18: 0x0000000104ba6228 Kingfisher`function signature specialization <Arg[0] = Owned To Guaranteed, Arg[1] = Owned To Guaranteed, Arg[2] = Owned To Guaranteed, Arg[3] = Owned To Guaranteed> of Kingfisher.ImageDownloaderSessionHandler.((processImage in _1CBBE1CEF600480D48F123F40F117AB5) (for : __ObjC.URLSessionTask, url : Foundation.URL) -> ()).(closure #1) + 7248 at ImageDownloader.swift:499\n    frame #19: 0x0000000104ba2a6c Kingfisher`partial apply forwarder for Kingfisher.ImageDownloaderSessionHandler.((processImage in _1CBBE1CEF600480D48F123F40F117AB5) (for : __ObjC.URLSessionTask, url : Foundation.URL) -> ()).(closure #1) + 92 at ImageDownloader.swift:0\n    frame #20: 0x000000010589da7c libdispatch.dylib`_dispatch_call_block_and_release + 24\n    frame #21: 0x000000010589da3c libdispatch.dylib`_dispatch_client_callout + 16\n    frame #22: 0x00000001058a8a24 libdispatch.dylib`_dispatch_async_redirect_invoke + 2196\n    frame #23: 0x000000010589da3c libdispatch.dylib`_dispatch_client_callout + 16\n    frame #24: 0x00000001058acc9c libdispatch.dylib`_dispatch_root_queue_drain + 2344\n    frame #25: 0x00000001058ac364 libdispatch.dylib`_dispatch_worker_thread3 + 132\n    frame #26: 0x0000000181a49470 libsystem_pthread.dylib`_pthread_wqthread + 1092\n    frame #27: 0x0000000181a49020 libsystem_pthread.dylib`start_wqthread + 4\n. Should I close this issue?. I think it's the same OOM issue as #538 .\nAfter I solved the OOM when downloading large images by making the images smaller with a custom ImageProcessor, my app won't crash anymore, even there's no space left.. Not always but can happen easily. \nMaybe the images are too large? The file size is 600KB to 1MB, and the pixel is around 1360x2480. There're 466 image in total.. One more crash happened while downloading these images with ImagePrefetcher.\nIt's virtual memory exhausted error.\n\n. And another one happened just now at line 482 in ImageDownloader.\n\n(lldb) bt\nKingfisher was compiled with optimization - stepping may behave oddly; variables may not be available.\n* thread #1021: tid = 0x1e56df, 0x00000001946f00a8 libobjc.A.dylib`objc_exception_throw, queue = 'com.onevcat.Kingfisher.ImageDownloader.Process.clickReadDownload', stop reason = breakpoint 1.3\n    frame #0: 0x00000001946f00a8 libobjc.A.dylib`objc_exception_throw\n    frame #1: 0x0000000183ce24dc CoreFoundation`+[NSException raise:format:] + 128\n    frame #2: 0x0000000184b3f128 Foundation`NSAllocateMemoryPages + 104\n    frame #3: 0x0000000184b117b0 Foundation`_NSDataCreateVMDispatchData + 36\n    frame #4: 0x0000000184ad8e60 Foundation`-[_NSPlaceholderData initWithBytes:length:copy:deallocator:] + 272\n    frame #5: 0x00000001056308d0 libswiftFoundation.dylib`function signature specialization <Arg[0] = Owned To Guaranteed, Arg[2] = Dead> of static Foundation.CharacterSet._forceBridgeFromObjectiveC (__ObjC.NSCharacterSet, result : inout Swift.Optional<Foundation.CharacterSet>) -> () with unmangled suffix \"_merged\" + 44\n    frame #6: 0x00000001055dd5a4 libswiftFoundation.dylib`protocol witness for static Swift._ObjectiveCBridgeable._forceBridgeFromObjectiveC (A._ObjectiveCType, result : inout Swift.Optional<A>) -> () in conformance Foundation.Data : Swift._ObjectiveCBridgeable in Foundation + 20\n    frame #7: 0x0000000104b494ac Kingfisher`specialized ImageDownloaderSessionHandler.(processImage(for : URLSessionTask, url : URL) -> ()).(closure #1) [inlined] _TTSg5V10Foundation4DataS0_s21_ObjectiveCBridgeableS____forceBridgeFromObjectiveC_bridgeable + 28 at ImageDownloader.swift:0 [opt]\n  * frame #8: 0x0000000104b49490 Kingfisher`specialized ImageDownloaderSessionHandler.(downloader=<unavailable>, url=<unavailable>, self=<unavailable>, task=<unavailable>) -> ()).(closure #1) + 540 at ImageDownloader.swift:482 [opt]\n    frame #9: 0x0000000104b47708 Kingfisher`partial apply for ImageDownloaderSessionHandler.(processImage(for : URLSessionTask, url : URL) -> ()).(closure #1) [inlined] Kingfisher.ImageDownloaderSessionHandler.((processImage in _1CBBE1CEF600480D48F123F40F117AB5) (for : __ObjC.URLSessionTask, url : Foundation.URL) -> ()).(closure #1) + 20 at ImageDownloader.swift:0 [opt]\n    frame #10: 0x0000000104b476f4 Kingfisher`partial apply for ImageDownloaderSessionHandler.(processImage(for : URLSessionTask, url : URL) -> ()).(closure #1) + 72 at ImageDownloader.swift:0 [opt]\n    frame #11: 0x00000001058f0e30 libdispatch.dylib`_dispatch_call_block_and_release + 24\n    frame #12: 0x00000001058f0df0 libdispatch.dylib`_dispatch_client_callout + 16\n    frame #13: 0x00000001058fa044 libdispatch.dylib`_dispatch_async_redirect_invoke + 816\n    frame #14: 0x00000001058f0df0 libdispatch.dylib`_dispatch_client_callout + 16\n    frame #15: 0x00000001058fd9a0 libdispatch.dylib`_dispatch_root_queue_drain + 1280\n    frame #16: 0x00000001058fef18 libdispatch.dylib`_dispatch_worker_thread3 + 132\n    frame #17: 0x0000000194f112e4 libsystem_pthread.dylib`_pthread_wqthread + 816\n    frame #18: 0x0000000194f10fa8 libsystem_pthread.dylib`start_wqthread + 4\n(lldb). Sorry for that I didn't explain it well. The thumbnail images are actually much smaller than the full size images. The average file size of those thumbnail images is about 50 KB, and I think it's fine.\nAfter trying all the ways you mentioned, it's better. Thanks so much.\n\nAnd there's only problem left. I'm pretty sure about it because it always happens.\nConditions:\n- As I mentioned above, the file size of those images is 600KB to 1MB, and the pixel is around 1360x2480. There're 466 image in total.\n- iPad Air 1, iOS 8.1.3\nOperations:\n- Comment out the code for thumbnail images. Only test downloading the full size images.\n- Set imageCache.maxMemoryCost = 10\n- Set imageDownloader.maxConcurrentDownloads = 1\n- Download all the images with ImagePrefetcher\n- Do nothing. Just wait.\nResult:\nAfter downloading 176 images, the crash comes.\nThis crash only happens on this iPad Air 1(iOS 8.1.3). My iPad Pro(9.7 inch, iOS 10) works well.\nConsole output:\nXxxxxx(17620,0x108e24000) malloc: *** mach_vm_map(size=147456) failed (error code=3)\n*** error: can't allocate region\n*** set a breakpoint in malloc_error_break to debug\nXxxxxx(17620,0x108e24000) malloc: *** mach_vm_map(size=147456) failed (error code=3)\n*** error: can't allocate region\n*** set a breakpoint in malloc_error_break to debug\nlibBacktraceRecording.dylib:  allocate_free_list_pages() -- virtual memory exhausted!\n\nIs it something related to hardware? \nOne of my colleagues finds out that a very large image(like 10000x10000) will crash iPhone 6, but will not crash iPhone 6s. These two iPhones have the same iOS version. I guess all devices newer than iPhone 6 would handle large images well. Maybe this is not related to this issue, but I think I should mention this.. Thank you so much. You always response so quickly. \ud83d\udc4d\nI'll try iOS 9 and 10 again. If something unexpected happens, I'll be back.. ",
    "ixialuo": "when options is nil, progressBlock is don't go. ",
    "zhnnnnn": "\u8c22\u55b5\u795e~. ",
    "abellee": "@onevcat so I also could clear memory cache by myself, right? \nbut after do that, seems the disk cache was disappear too? so how to clear the memory cache in right way?. @onevcat sorry, I don't know if this is an issue. I just found the memory will increased almost 40mb after I opened a large image yesterday, so I tried to clear the memory cache with kingfisher, and it works. but when I offline for a while and reopen the app, some images can not display even though I have showed before. but it won't happened before I do clear the memory cache.. ",
    "damien-nd": "I'm sorry but in didEndDisplayingCell I still can reproduce.\nIt is a tableview with 3 images. I should change it for collection view as now the design is the same.\nOn table view with just 1 image, it is harder to reproduce it, but sometime I face it.\nThank you for investing it.. ",
    "OneSman7": "Hello, @onevcat!\nUsing latest version from pod. I can confirm that cancelling image load in similar example does nothing.\nMy view controller has one image view. In viewDidLoad I write following:\nlet urlString = \"https://s-media-cache-ak0.pinimg.com/736x/c6/8e/1c/c68e1c54710c1a002d4317917e745337.jpg\"\nlet url = URL(string: urlString)\nimageView.kf.setImage(with: url)\nimageView.kf.cancelDownloadTask() \nThen I place breakpoints on \nimageView.kf.cancelDownloadTask() \nand retrieveImage, tryToRetrieveImageFromCache methods of KingfisherManager, cancel method of RetrieveImageTask.\nI was able to determine that imageView.kf.cancelDownloadTask() is called first, but cancel on task is never called. Then image loading proceeds as usual.\nI see this as a major bug. Probably, it will be a good idea to move from associated objects to something more reliable for storing operations. For example a static dictionary/map.. ",
    "yuvalt": "From what I've seen in my code, this can still happen if you pass the option \" .cacheMemoryOnly\".. Thanks for the quick response. You're right, did not think of running it with the sync() method, always use the async method :-) Thanks. ",
    "mono0926": "@onevcat \nOn version 3.9.1, this problem was reproduced.\nOn demo project, cancelDownloadTask rarely called, so I modified the demo source code to reproduce it easily:\nhttps://github.com/mono0926/Kingfisher/tree/fix-missing-image (commit: https://github.com/mono0926/Kingfisher/commit/e2fe4b53f831b745e55b2f6c351f4d94aff2f433 )\n\nClear Cache\nCall kf.setImage(will be cancelled)\nCall task.cancel()\nCall kf.setImage\nImage should be shown, but sometimes missing.\n\nThis error occurred, even after 4. Call kf.setImage.\nError Domain=NSURLErrorDomain Code=-999 \"cancelled\" UserInfo={NSErrorFailingURLKey=https://raw.githubusercontent.com/onevcat/Kingfisher/master/images/kingfisher-3.jpg, NSLocalizedDescription=cancelled, NSErrorFailingURLStringKey=https://raw.githubusercontent.com/onevcat/Kingfisher/master/images/kingfisher-3.jpg}\nI think that the cause is the called timing of delegate method:\n```swift\n    func urlSession(_ session: URLSession, task: URLSessionTask, didCompleteWithError error: Error?) {\n    guard let url = task.originalRequest?.url else {\n        return\n    }\n\n    guard error == nil else {\n        callCompletionHandlerFailure(error: error!, url: url) // Called after `4. Call kf.setImage`.\n        return\n    }\n\n    processImage(for: task, url: url)\n}\n\n```\nI'm troubled with it on my project, so I tried to fix, but I couldn't :(\nCould you fix it?. > I'm troubled with it on my project\nThis fails setting an image sometimes:\nswift\nkf.cancelDownloadTask()\nkf.setImage(with: \ud83d\udc36)\nBy inserting DispatchQueue.main.async, that seems to be fixed \ud83d\udc40 \nswift\nkf.cancelDownloadTask()\nDispatchQueue.main.async { [weak self] in\n    self?.kf.setImage(with: \ud83d\udc36)\n}. @onevcat \nThanks for the quick fix!\nIt works fine now \ud83c\udf89 . The crash is fixed by this commit: https://github.com/gram30/Kingfisher/commit/d222bf4eaae3b045bff4c79e6033c36399697f05\n(Of course, this isn't desirable solution.)\nThe crash occurred in background task( and I saw the crash if open the app immediately after closed).\n(The crash occurred only archived/release build.)\n\nI saw the image view flickering a little(reproduced on the sample project)\n\nAnd this flickering remains :(\nYou can reproduce flickering by this:\n\nLaunch iOS sample app\nClose the app (not terminate, just close to be background)\nOpen the app\nTap Reload button immediately after the app became foreground\nImage view is flickering\nIf Reload button tapped a few seconds after became foreground, not flickering occurred.. I fixed the crash by https://github.com/onevcat/Kingfisher/pull/620\nIs it okay?\n\n\n\n\nI saw the image view flickering a little(reproduced on the sample project)\n\nI think this is different problem, and I have no solution yet.. @onevcat \nThank you, I've figured out the flicking :)\nI'm happy that the crash resolved.\n(I re-archived my app using Kingfisher built from master branch, and no crash occured.)\nSo, I think this issue can be closed \ud83d\ude04 \nI added . keepCurrentImageWhileLoading option, but flickering occurred still, and it is reproduced on the sample app\u2026\nThis code seems to be correct, so I don't know why the flickering isn't resolved.\n\nHowever, this flickering should always happen when after you switching background, I wonder why you say \"If Reload button tapped a few seconds after became foreground, not flickering occurred\".\n\nI don't why, but it seems to me that the flickering likely to occur under that condition \ud83e\udd14\n(I suspect that, after launched, a few process run, so UI refreshing is relatively slow.). @onevcat \nI modified only this line:\nViewController.swift#L73\n- options: [.transition(ImageTransition.fade(1))],\n+ options: [.transition(ImageTransition.fade(1)), .keepCurrentImageWhileLoading],\nCondition:\n\nXcode 8.2.1\niPhone 7 (iOS 10.2) Simulator\niPhone 7 Plus (iOS 10.3 beta) Device, also (modified only signing setting to execute)\n\nIf I noticed the cause I'll report, thanks \ud83d\ude03 . I don't know why enumerator(at:includingPropertiesForKeys:options:errorHandler:) caused crash but   the crash resolved by using contentsOfDirectory(at:includingPropertiesForKeys:options:) instead of it.\nAnyway, the latter is simpler, I think.\nI thought these problems are involved, but it seems to be other problems.\n\n[SR-2690] Bad code generated for FileManager.enumerator(at:includingPropertiesForKeys:options:errorHandler:) - Swift\n[SR-2872] Crash when FileManager's enumerate(at:...) tries to report an error - Swift\n. @onevcat \n\nThanks, if it is okay, merge please :octocat: . @onevcat \nOkay, I corrected and amended: https://github.com/onevcat/Kingfisher/pull/620/commits/33b3f28386a76740cc099d28e4bb5c51b2587324. ",
    "inamiy": "Guessing this issue is fixed in #698 :). ",
    "AndreMarvell": "I tried with the TintImageProcessor and it did the job. \nThank you for you help, you can close the ticket. ",
    "Syed2837": "I haven't gone through the entire framework... my mistake.\nYeah, I can say its feature request (to support proxy setting).. My proxy related code\n```\nfunc customizeEphemeralSessionConfiguration() -> NSURLSessionConfiguration {\nlet proxy_server = proxyServerString() // proxy server\nlet proxy_port = proxyPortNumber() // your port\n\nlet hostKey: NSString = kCFNetworkProxiesHTTPProxy as NSString\nlet portKey: NSString = kCFNetworkProxiesHTTPPort as NSString\n\nlet proxyDict:[String:AnyObject] = [kCFNetworkProxiesHTTPEnable as String: true, hostKey as String:proxy_server, portKey as String: proxy_port]\n\nlet config = NSURLSessionConfiguration.ephemeralSessionConfiguration()\nconfig.connectionProxyDictionary = proxyDict as [NSObject : AnyObject]\n\nreturn config\n\n}\n```\nMy code\nif let url = NSURL(string: collectionSection.sectionImageUrlStr!) {\n                        KingfisherManager.sharedManager.retrieveImageWithURL(url, optionsInfo: nil, progressBlock: nil, completionHandler: { (image, error, cacheType, imageURL) -> () in\n                            cell.titleImageView.image = image\n                            cell.titleImageView.clipsToBounds = true\n                        }) } else {\n                        print(\"Doesn\u2019t contain a url\")\n                        cell.titleImageView.image = UIImage(named: \"location_not_found\")\n                        cell.titleImageView.clipsToBounds = true\n                    }\nSorry I'm novice developer and I don't know exactly how to include your code. Could you please go through my code and let me know where can I put your code to set proxy.\nNote: I added KingFisher through Pod.. Thanks a lot..... ",
    "nbortolussi": "If it is the case that the processors do not affect rotation at all then not sure why image.kf.setImage(with: image) and  image.kf.setImage(with: image, placeholder: nil, options: [.processor(processor)]) gives different rotation results?\nAnyway your recommendation with normalize did do the trick - thanks!. Sure here is the image url: https://s3.amazonaws.com/winering-production/10906-313f1f875b62f3a-full. ",
    "lastcc": "@onevcat Hi again.\nI am using the latest version of KingFisher, and the image is not correctly displayed. Is there a way to fix this? Because the above post mentioned that this was fixed  in 3.2.3.\nThe code snippet that I am using:\nswift\nimageView.kf.setImage(with: asset.fileURL, placeholder: asset.transientImage, options: [.backgroundDecode])\nAfter the transformation of an UIImage object to PNG Data object, the open var imageOrientation: UIImageOrientation information is lost forever.\nSo, set the image to UIImageView, the image is correctly displayed.\nBut after the data is persisted on disk and load again by KingFisher, the orientation is wrong. \nSee this, and this.\n. @onevcat oh sorry I mean I have problems with PNGs. I think I may address my problem by passing an custom RotateProcessor to the method.\nI was misunderstanding this GitHub issue, and thought it had something to do with processors. Since I also used blur. Turns out the problem is on my side.. @onevcat Hi, onevcat!\nI also got the low quality image and I already know and noticed the scale problem. But I think it is not necessary for developers to add a new line just to get and set a pixel size like:\nswift\nlet adjustedPixelSize = CGSize(width: adjustedSize.width * UIScreen.main.scale, height: adjustedSize.height * UIScreen.main.scale)\nBecause almost always, we just want to put the image into an UIImageView, and the size of that view is measured by points.\nIn my case, the cache code gets a little complex because I don't always download images from the remote. Over 50% of the images are already in the database asset folder and many are PNGs. I need to cache a resized version of the large image to accelerate the display in a table view. ( because decoding PNGs are time consuming.) I also need to cache a memory version of the original images as needed on the fly.\nThe tactic I am now using is using an alternative key when caching the small preview images:\nswift\nlet imageResource = ImageResource(downloadURL: asset.fileURL, cacheKey: asset.fileURL.absoluteString + \"|\\(UIScreen.main.bounds.width)\")\nNote that I am using the absoluteString + \"|\\(UIScreen.main.bounds.width)\" because the Plus devices or future devices may have different display mode.\nSo, as you can see, for me I have to write all these lines to wire things up. Because the extension method of UIImageView does not provide a cache key param.\nAnd I suggest that there should be a version key, which does not replace the cache key but:\nswift\nlet cacheKey = URL.absoluteString + versionKey. Ohh, I guess...\nThere is an identifier key in the Processors... T T. ResizingImageProcessor takes a CGSize that is Pixel Size. \nHowever CroppingImageProcessor takes a size that is Point Size. \nThe point is: no explaination in the docs. \nThe BlurImageProcessor takes an argument blurRadius is this pixel or point, kinda confused. T T\n```swift\nprivate lazy var chainedProcessors: ImageProcessor = {\n        let scale = UIScreen.main.scale\n        let blurRadius = 2 * scale\n        let size = CGSize(width: 27 * scale, height: 27 * scale)\n        let anchor = CGPoint(x: 6.5 * scale, y: 6.5 * scale)\n        let cornerRadius = 14 * scale\n    return (BlurImageProcessor(blurRadius: blurRadius) >> CroppingImageProcessor(size: size, anchor: anchor)) >> RoundCornerImageProcessor(cornerRadius: cornerRadius)\n\n}()\n```\n@onevcat sorry man, at you again... \n... and isn't the anchor quite counterintuitive? \n///   For example, when you have an image size of `CGSize(width: 100, height: 100)`,\n///   and a target size of `CGSize(width: 20, height: 20)`: \n///   - with a (0.0, 0.0) anchor (top-left), the crop rect will be `{0, 0, 20, 20}`; \n///   - with a (0.5, 0.5) anchor (center), it will be `{40, 40, 20, 20}`\n///   - while with a (1.0, 1.0) anchor (bottom-right), it will be `{80, 80, 20, 20}`\n\nAt first I thought anchor point is the origin in the point-based coordinate systems, or  the origin point in the unit coordinate systems. But according to the explain in the source code, it is a center point against which the rect is resized into. Unfortunately in (my) practice, the output image's size is a size that is tied to screen coordinates, and the fraction value is hard to reason about.. @onevcat  Let me explain:\nNo. Even if I provided a correct scale.\nI am using the CroppingImageProcessor:\n- I'm using an image on the internet. \n- I want a result image of Point Size {27, 27}. \n- I am using the Plus device so the scale should be 3.0.\nThe result image should be in Point Size {27, 27}, scale 3.0 == pixel {82, 82}\nIf I po resultImage!.size, it should be {27, 27}, and when I po resultImage!.scale it should be 3.0 The actual pixel dimension should be size * scale == pixel {82, 82} \nIn other words, the size property (of an UIImage) returns a logical size, because Apple defines so.\nBut the output image is of Logical Size/Point Size {82, 82} with a scale factor set to 3.0, which means a pixel size of {246, 246}. \n(lldb) po resultImage!.size\n\u25bf (82.0, 82.0)\n  - width : 82.0\n  - height : 82.0\n\n(lldb) po resultImage!.scale\n  3.0\n\nThe code I am using:\nswift \nlet url = URL(string: \"https://...\")\nimageView.kf.setImage(with: url, placeholder: nil, options: [.backgroundDecode, .processor(CroppingImageProcessor(size: CGSize(width: 27, height: 27))), .scaleFactor(UIScreen.main.scale)])\n\nand BlurImageProcessor's identifier is not associated with the scale factor, will this be of an issue?\nself.identifier = \"com.onevcat.Kingfisher.BlurImageProcessor((blurRadius))\". @onevcat Hi thanks for response.  The download link: https://raw.githubusercontent.com/lastcc/open-r/master/kf.TestLargeImage.zip\nI could pass in the original image data, the options param does not exist for store-image-for-key.. @onevcat I'm closing this one for now. The last two issues have little to do with Kingfisher. \nBut Kingfisher should fail gracefully because the developer may have no control of the remote server, and developers may want to display images in their full resolution sometimes.. @onevcat you are right. I'm trying other options to solve my problem.\nI think OOM is also related to the unserialized/un-queued use of UIGraphicsBeginImageContextWithOptions API. Image if we have very large images and we want to cache a smaller version of them. We should not begin drawing them all at once when memory usage is already high. \nBut wait a minute, that should really be the edge case and not usual. So, I'm trying some low level API to create thumbnails manually and then cache.\n. @onevcat Hi, I have some advice today. I might propose some PR when i have time.\nToday I was reading some best practice advice from Apple: Getting the Best Performance\nhttps://developer.apple.com/library/content/documentation/GraphicsImaging/Conceptual/CoreImaging/ci_performance/ci_performance.html#//apple_ref/doc/uid/TP30001185-CH10-SW1\nUse Core Graphics or Image I/O functions to crop or downsample, such as the functions CGImageCreateWithImageInRect or CGImageSourceCreateThumbnailAtIndex.\nSome code snippets:\nhttp://nshipster.com/image-resizing/.  just tried the lib from Pinterest:\n\nBoth Kingfisher and  PINRemoteImage works good... \nHowever you can observe a memory surge in Kingfisher, not happening when you use PINRemoteImage\nWhen you scroll the tableview back & forth:\nPin: 15 ~ 40MB               Energy Impact: Always Low.\nKing: 100 ~ 600MB        Energy Impact: High.\nswift\nimageView.pin_setImage(from: urls[indexPath.row]) { (result) in\n            print(result.image!.size)\n}\nor\n```swift\n        imageView.kf.setImage(with: urls[indexPath.row], placeholder: nil, options: nil, progressBlock: nil) { (image, , , _) in\n            print(image!.size)\n        }\n```\nthe output:\n(7033.0, 10110.0)\n(7033.0, 10110.0)\n(7033.0, 10110.0)\n(7033.0, 10110.0)\n\n. @onevcat \nso i have investigated and now i can come to the conclusion that the compare is unfair.\npincache is doing some algorithm to avoid unnecessary file IO. so the memory surge quickly subsides.\ni didn't knew that.. ",
    "bmughal": "ok, is there any workaround to show big images using kingfisher?. Size of image vary from iPhone to iPhone, capturing images via phone camera then uploading to S3.\nAim is to download list of above type images in Scrollview using memory efficiently.. Yes I am loading multiple photos at same time.. Right now what I am doing is, loading list of views in paginated scrollview, and load the respective image of view when that specific view is in front, rest all view images gets cancel download request, \nIs that correct way sir. ? . Actual the aim to to make horizontal media gallery using scrollview, where user can swipe left or right to view the next or previous media.. Yes, I understand.. I will try UIcollectionView horizontal scroll. Thankyou for guidance.. Sure, Thanx again.. ",
    "jyounus": "Ah, sorry! I only searched for \"documentation\" before opening this issue and that one didn't pop up.\nCool, thanks. Will use version 3.1.0 for now! :). You're right, that worked for me now. Thanks! :D. Awesome, thanks a lot! :D . ",
    "llodi": "I've solved my issue, I just set all outlets to nil or \"\" before fill them.\nAnd Thanx, I refactored my code, splitted them on setup UI components and update UI with data . ",
    "tirrorex": "By blank space i mean with the same image redimensionned with aspect fit, edges touching the edges of the screen (so lower height), there is half the screen (vertical) being occupied by blank space, this is not related to the tiny white border of the image.\nAnd after that half blank screen there is the image properly sized, followed by another half blank screen and then my textview (which has a top constraint of 15 in relation to my image bottom)\nI would take a screenshoot for you guys but i am not allowed to do so yet.\n. Aspect fit should not behave like this, since the image is properly sized after the huge first blank, the image is supposed to be clipped to the top of the view without any blank actually.\nAlso i don't have the issue if the post is coming from facebook but just with post coming from twitter (with large image).\nDidn't see any issue with uncached images so i assumed kingfisher did some resize on his own.\nps : i did some dirty testing by download the image with nssurlrequest.\nSeems that indeed the blank spaces are coming from the image, nothing you guys can do about it.\nClosing ticket\n. Putting a scale to fill fixed the issue.\nHad to modify some constraints though :). I know i read the wiki and some other issues, but it was more a proof of concept, thanks though. ",
    "kikettas": "Hi,\nFirst of all, sorry for the delay. It was my bad, I was using AnimatedImageView on code but I had not set AnimatedImageView class on IB Identity inspector. Sorry for bothering you, and again congrats for this outstanding library.\nRegards.\n. ",
    "sahandnayebaziz": "@ivampir it is possible to download PDF files from an iOS or macOS application, but I don't think Kingfisher would best serve you for this. Kingfisher is great for getting images and getting them to your UIImageViews and other views where you display images.\nIf you need to download a PDF file over HTTP, I would use Alamofire. If you need to display the PDF, you could use a webview or another Swift open source library like UXMPDFKit :). ",
    "ADevelopStudio": "@ivampir you can use my code:\n``\nstruct PDFProcessor: ImageProcessor {\n    //identifier` should be the same for processors with same properties/functionality\n    // It will be used when storing and retrieving the image to/from cache.\n    let identifier = \"au.com.makemeapp.testus\"\n// Convert input data/image to target image and return it.\nfunc process(item: ImageProcessItem, options: KingfisherOptionsInfo) -> Image? {\n    switch item {\n    case .image(let image):\n        return image\n    case .data(let data):\n        let pdfData = data as CFData\n        guard let provider:CGDataProvider = CGDataProvider(data: pdfData) else {return nil}\n        guard let pdfDoc:CGPDFDocument = CGPDFDocument(provider) else {return nil}\n        guard let pdfPage:CGPDFPage = pdfDoc.page(at: 1) else {return nil}\n        var pageRect:CGRect = pdfPage.getBoxRect(.mediaBox)\n        pageRect.size = CGSize(width:pageRect.size.width, height:pageRect.size.height)\n        UIGraphicsBeginImageContextWithOptions(pageRect.size, false, UIScreen.main.scale)\n        guard let context:CGContext = UIGraphicsGetCurrentContext()  else {return nil}\n        context.saveGState()\n        context.translateBy(x: 0.0, y: pageRect.size.height)\n        context.scaleBy(x: 1, y: -1)\n        context.concatenate(pdfPage.getDrawingTransform(.mediaBox, rect:  pageRect, rotate: 0, preserveAspectRatio: true))\n        context.drawPDFPage(pdfPage)\n        context.restoreGState()\n        let pdfImage = UIGraphicsGetImageFromCurrentImageContext()\n        UIGraphicsEndImageContext()\n        return pdfImage\n    }\n}\n\n}\n```\nso you could:\n\n        let processor = PDFProcessor()\n        yourImageView.kf.setImage(with: url, placeholder: #imageLiteral(resourceName: \"tile1\"), options: [.processor(processor)]).\n\n",
    "zhanswift": "It is was helped! Thank you!  Please in you answrer do my url with *. Thank you! . ",
    "jovanpreet": "I already saw that. My issue wasn't that. I just wanna know how to implement maxCachePeriodInSecond = infinity //Unlimited.\njust like maxDiskCacheSize can be set to 0 for unlimited storage size. Okay thanks i would implement that.\nJust wanna ask, are you planning to implement this in future?\nAnd one more thing. Is there a callback of images that are going to be deleted? I mean just the image keys might work. @onevcat Please help . What if i added this notification on a controller and kingfisher perform cleanup when that controller is not ye initialized. then?\nDo i have to implement this on every controller(bad idea).\nPlease provide a example with best use case.. Ok thank you.\nWill disturb you again if i got stuck in any other problem...:p. Will this impact scrolling performance. ",
    "Albinzr": "Ya sure\n\nIf you look at the log you can see it have been called multiple times . Nop,I checked that too.... @onevcat this happens only the first time downloading image, not when retrieving from cache. Ok I will try that. When I restarted Xcode it started to work fine, Some wired issue. \n@onevcat Which lib will you suggest for cropping gif which is comparable with kf. ",
    "ro6lyo": "Right its JPEG. Thanks for help appreciated! . ",
    "anhhtbk": "@onevcat Tomorrow I migrate Kingfisher to 5.0, after I received this bug.. @pzmudzinski Did you find solution for\n\nIt's displayed almost correctly, except for a first time\n\n?. @pixyzehn Sorry. I added it wrong position. Now I add it in cellForRowAt indexPath and it work correctly. Thanks!. ",
    "salyasev": "@onevcat  Hello, I'm getting this issue on last Kingfisher 5.1.0. ",
    "Eldhopj": "Same issue in here , while scrolling it getting crashed . @onevcat \ncrash happens when the imageview size is zero also . ",
    "seanliu1": "Same crash, but line 505 in ImageDrawing.swift.\nIt will happen when using DownsamplingImageProcessor while scrolling \nEverything time it is crashed by a same png image, but I did not fine any abnormal for this image. \n\n```\nimageView.kf.setImage(\n            with: viewModel.thumbnailURL,\n            placeholder: nil,\n            options: [\n                .processor(DownsamplingImageProcessor(size: imageView.bounds.size)),\n                .scaleFactor(UIScreen.main.scale),\n                .cacheOriginalImage\n            ])\n```\nAfter some investigation, the root cause is that for collectionview, cell can partially show up and actual imageView has not show up yet, but I really do not know why it only crash for the cell with same image. . Thanks for update. I updated to 5.2.0 and played around with couple times, I did not notice deadlock. Since I can not consistently reproduce the issue using the older version, I will close this issue for now. Thanks for your response and the fix. The way I tested it and reproduced using large images (8mb) and small cache size(80mb) within a collection view around 30 images in total.\nbounds are exactly same, any in memory cache are just not large enough to hold everything, since I also enabled to cache original image.   \nI believe your fix should also work, but I wonder do we need to convert to data and image back and forth. I felt the issue is caused by inconsistency, since when we downsample using data, we have this parameter kCGImageSourceCreateThumbnailWithTransform (scale based on original image ratio and orientation). When downsampling using original image, we do not scale or resize based on original image ratio. If we change it from \nreturn image.kf.scaled(to: options.scaleFactor)\n                        .kf.resize(to: size, for: .none)\nto \nreturn image.kf.scaled(to: options.scaleFactor)\n                        .kf.resize(to: size, for: .aspectFit)\nShould it be enough to fix the problem? Let me know if I missed anything, since I only tested for my own use case. \n. ",
    "Fnoz": "\u597d\u7684\uff0c\u6211\u8fd9\u4e48\u6539\u4e5f\u662f\u5f53\u505a\u4e00\u4e2a\u4e34\u65f6\u4fee\u6539\uff0c\u6211\u8ba4\u4e3a\u5e94\u8be5\u8fd9\u6837\u4fee\u6539\uff1a\n\u5728setImage\u7684\u65f6\u5019\uff0cremovePreviousBlock\u800c\u4e0d\u662fcancel\uff0c\u8fd9\u6837\u4e4b\u524d\u7684\u8bf7\u6c42\u7684\u6570\u636e\u4e0d\u81f3\u4e8e\u5168\u90e8\u6d6a\u8d39\u4e86\uff0c\u8981\u662f\u80fd\u5904\u7406\u597d\u65ad\u70b9\u4e0b\u8f7d\uff0c\u90a3\u5c31\u66f4\u597d\u4e86\u3002\n\u6211\u662f\u60f3\u7ed9imageTask\u52a0\u4e2aidentifier\uff0cremovePreviousBlock\u7684\u65f6\u5019\uff0c\u5220\u9664fetchLoad.contents\u4e2d\u5bf9\u5e94identifier\u7684\u5185\u5bb9\u3002. ",
    "mixmastertube": "Wow, that was it!!\nthanks so much.. ",
    "MayaLekova": "Sorry if I'm adding too much info, but:\nI switched to using a not-anymore supported library called MapleBacon and it succesfully loads the gif. They have a similar code to obtain the delays between the gif frames, but also include a fallback in case there are no delays embedded. You can take a look here. Hello @onevcat , thank you for your reply! Really pleased if I can help.\nSeems the guys hosting the gifs have changed the one that I tested with initially, but here's another one constructed from the same static frames - it should contain 71 frames again. Hope this will help you!\nPS: Just in case they wipe this other gif, I've committed it as part of my project here. ",
    "ilandbt": "@onevcat thanks for the response, i will explain what exactly i meant.\nI need to cache a image + description together.\nI dont want the description to be the key because then i need to save the descriptions in core data or some other DB.\nI want the key to be something like image and then i can save my last index in user defaults instead of in a DB.\nThanks\n. Thanks anyway!!. ",
    "stijnwesterhof": "@onevcat I wish that I could give you more information, but the fact is every processor works for me except the rounded image. But when I have an imageview outside of a collection view cell then the roundedcorner processor does work properly... @onevcat sadly enough it's not related to it. I had these properties already. Sorry for the late reaction. The problem was that the size of the image wasn't right to accomplish what I wanted. So I needed a resize processor as well.\nlet processor = ResizingImageProcessor(targetSize: CGSize(width: 300, height: 300)) >> RoundCornerImageProcessor(cornerRadius: 150)\nimageView.kf.setImage(with: url, placeholder: nil, options: [.processor(processor)])\nThis works, but it shows the shadow behind the collectionviewcell, which is not that nice :(. ",
    "danigarciaalva": "@stijnwesterhof Nice man!\nIf someone uses it:\nextension UIImageView {\n    func download(url: String?, rounded: Bool = true) {\n        guard let _url = url else {\n            return\n        }\n        if rounded {\n            let processor = ResizingImageProcessor(referenceSize: self.frame.size) >> RoundCornerImageProcessor(cornerRadius: self.frame.size.width / 2)\n            self.kf.setImage(with: URL(string: _url), placeholder: nil, options: [.processor(processor)])\n        } else {\n            self.kf.setImage(with: URL(string: _url))\n        }\n    }\n}. ",
    "mingzizhennanqu": "\u4f60\u597d\uff1a\n     \u5728\u4f7f\u7528kingfisher\u5e93\u8fdb\u884c\u56fe\u7247\u7f13\u5b58\u5904\u7406\u65f6\u5019\uff0c\nself.iconImageV.kf.setImage(with: URL.init(string: url), placeholder: self.iconImageV.loading(28, h: 28), options: nil, progressBlock: nil, completionHandler: { unowned self in\n                DispatchQueue.main.async {\n                    if image == nil{\n                        self.iconImageV.image = self.iconImageV.loadFail()\n                    }\n                }\n            })\n\u5f53view\u8bf7\u6c42\u56fe\u7247\u5931\u8d25\u65f6\uff0c\u8fdb\u5165\u4e86completionHandler?(nil, error, cacheType,imageURL) ,\u6b64\u65f6\u5982\u679c\u5feb\u901f\u8fd4\u56de\u522b\u7684\u9875\u9762\uff0c\u8fd9\u91cc\u7ebf\u7a0b\u4ecd\u7136\u5728\u8fdb\u884c\uff0c\u800c\u8fd9\u65f6\u9875\u9762\u5df2\u7ecf\u91ca\u653e\u4e86\uff0c\u5bfc\u81f4\u5d29\u6e83\uff0c\u8bf7\u6559\u4e0b\uff0c\u8fd9\u91cc\u5982\u4f55\u5bf9kingfisher\u7684\u5931\u8d25\u8fdb\u884c\u5904\u7406\n. ",
    "jjjeeerrr111": "ok ill look into it and build a sample. thanks. 1. not using a prefetcher\n2. im on the latest pod, i tried updating to fix this issue\n3. I tried on both\nMaybe its worth noting that my collection view is in a tableview cell.. ",
    "sham3k": "+1 \nSame Problem.\nHorizontally scrolling CollectionView in a TableView Cell.\nMemory Usage jumps to 250MB from 10-20MB when scrolling this CollectionView.. ",
    "Isuru-Nanayakkara": "Thanks!. ",
    "TimOliver": "Hey @Drusy, and @onevcat! Thanks for that!\nOh cool! No, I hadn't started it yet. I'm on a deadline to ship an app this week, so I would have had to have started it next week at the earliest. \nIf you've already got an implementation, then by all means, don't let me stand in the way! :). Awesome! Great work all! :D . ",
    "BrikerMan": "added #599. I don't think the problem is images count. I have only 22 models here~ Maximum links count is 6.\nWhen All image has cached, It will 60 FPS if I disable the prefetch code, and will drop to 40 at the first several time when scroll with prefetch enabled, then back to 60.\nswift\nmodels.count = 22\nlinks.count = 6. ok~ will try.. ",
    "futomtom": "How to cancel ImagePrefetcher fetch task [only find how to prefetch in cheat sheet]  func collectionView( collectionView: UICollectionView, cancelPrefetchingForRowsAt indexPaths: [IndexPath]) {\n       let urls = indexPaths.flatMap {  model[$0.row].photoUrl }\n        ImagePrefetcher(urls: urls).stop()    }\n        }\n    }\n. would using ImageDownloader be a better approach    func collectionView( collectionView: UICollectionView, prefetchItemsAt indexPaths: [IndexPath]) {\n    for indexPath in indexPaths {\n        let article = articles[indexPath.row]\n        //save task into our model , then we can cancel them , if needed.  \n        article.task = ImageDownloader.default.downloadImage(with: article.thumbnail, options: [], progressBlock: nil) {\n            (image, error, url, data) in\n            article.image = image   //should we save \n        }\n    }\n}\n\nfunc collectionView(_ collectionView: UICollectionView, cancelPrefetchingForItemsAt indexPaths: [IndexPath]) {\n    for indexPath in indexPaths {\n        let article = articles[indexPath.row]\n        article.task?.cancel()\n    }\n}\n\n. ",
    "EnderTan": "\u5f53ImagePrefetcher \u914d\u5408WebP\u4f7f\u7528\u65f6\uff0c\u963b\u585e\u4e3b\u7ebf\u7a0b\u73b0\u8c61\u4f1a\u975e\u5e38\u660e\u663e\uff0c\u611f\u89c9.backgroundDecode\u6ca1\u6709\u751f\u6548. ",
    "petard": "ImageDownloader doesn't cache images according to the cheatsheet. I'm using this helper function to prefetch images in the background, it uses the same download function as setImage and cache if needed. I'm loading a lot of images and ImagePrefcher made my collectionviews stutter.\n```swift\nclass KingfisherPrefetchManager {\nstatic let shared: KingfisherPrefetchManager = KingfisherPrefetchManager()\n\nprivate lazy var serialQueue: DispatchQueue = DispatchQueue(label: \"imageQueue\")\n\npublic func fetch(urls: [URL]) {\n    DispatchQueue.global(qos: .background).async {\n        for imageUrl in urls {\n            self.serialQueue.sync {\n                self.fetchData(imageUrl)\n            }\n        }\n    }\n\n}\n\nprivate func fetchData(_ url: URL) {\n\n    let _ = KingfisherManager.shared.retrieveImage(\n        with: url,\n        options: nil,\n        progressBlock: nil,\n        completionHandler: {_, error, cacheType, imageURL in\n           //Add if needed\n    })\n}\n\n}\n```\n. ",
    "ZeroOnet": "Using KingfisherWebP will make the same trouble too.. ",
    "NateFuller": "I've since updated to Xcode 8.3, Swift 3, and am using Kingfisher 3.6.2. Same issue. How would I specify to build Kingfisher for all valid architectures?\nedit: I included Kingfisher via Cocoapods pod 'Kingfisher'\nedit 2: Building with \"Build Active Architectures Only\" (BAAO) to \"Yes\" silences the errors, but causes a runtime error reporting the following when I attempt to run the app that I've included the built framework in:\ndyld: Library not loaded: @rpath/Kingfisher.framework/Kingfisher\n  Referenced from: /private/var/containers/Bundle/Application/XXXXXXX-XXXX-XXXX-XXXX-XXXXXXXX/MySampleApp.app/Frameworks/SampleLibrary.framework/SampleLibrary\n  Reason: image not found. ",
    "webmaster128": "Thanks a lot for the detailed answer. Unfortunately we did choose another library and I did not get the chance to test the suggested solution. But it looks like this is of interest for other users :) From my side, this issue can be closed. I leave it open for now as long as other users need it. Feel free to close this whenever you want.. ",
    "andy1247008998": "@onevcat Yeah, you are right. I am using SparkInspector.\nThe solution might be this:\n\nlet ImageCache inherit from NSObject\nopen class ImageCache:NSObject\nadd super.init()\nsuper.init()\nioQueue.sync { fileManager = FileManager() }. \n",
    "bes": "This is showing up since upgrading from 3.3.3, but I can't see any changes in blurred between those versions. Right now blurred is the function that takes the longest time to compile in our project (according to -debug-time-function-bodies), but I can't say how accurate that is...\nI am coming from 7 years of Android development, and I must say the iOS tool chain is quite bad compared to anything Java / Android related.. Thank you!. ",
    "rkittinger": "using option .preloadAllGIFData seems to help now. Thank you.. ",
    "kherlopian2": "let processor = ResizingImageProcessor(targetSize: CGSize(width: im1.bounds.width, height: 0))\n        //\n        let url = URL(string: \"http://thediplomat.com/wp-content/uploads/2013/05/2910_52438736b9ef2-386x248.jpg\")\n        cell.im1.kf.indicatorType = .activity\n        cell.im1.kf.setImage(with: url,options: [.transition(.fade(0.2)), .processor(processor)], completionHandler: {\n            (image, error, cacheType, imageUrl) in\n            print(self.cell.im1.bounds.width)\n            print(self.cell.im1.bounds.height)\n            print(image?.size.width)\n            print(image?.size.height)\n        var hei = (((image?.size.height)!*self.cell.im1.bounds.width)/(image?.size.width)!)\n        print(hei)\n        var image1 = self.resizeImage(image: image!, targetSize: CGSize(width: self.cell.im1.bounds.width, height: hei))\n\n        self.cell.im1.image = image1\n\n    })\n\nfunc resizeImage(image: UIImage, targetSize: CGSize) -> UIImage {\n        let size = image.size\n    let widthRatio  = targetSize.width  / image.size.width\n    let heightRatio = targetSize.height / image.size.height\n\n    // Figure out what our orientation is, and use that to form the rectangle\n    var newSize: CGSize\n    if(widthRatio > heightRatio) {\n        newSize = CGSize(width: size.width * heightRatio, height: size.height * heightRatio)\n    } else {\n        newSize = CGSize(width: size.width * widthRatio,  height: size.height * widthRatio)\n    }\n\n    // This is the rect that we've calculated out and this is what is actually used below\n    let rect = CGRect(x: 0, y: 0, width: newSize.width, height: newSize.height)\n\n    // Actually do the resizing to the rect using the ImageContext stuff\n    UIGraphicsBeginImageContextWithOptions(newSize, false, 1.0)\n    image.draw(in: rect)\n    let newImage = UIGraphicsGetImageFromCurrentImageContext()\n    UIGraphicsEndImageContext()\n\n    return newImage!\n}\n\nDo You guys think this is good way of implementing?. ",
    "genadyo": "Thanks for the feedback, I'll test it!. ",
    "black-lotus": "@Codeido wow nice...\nby the way, i got error when using SVGLayer...\nI've already create an issue on PocketSVG https://github.com/pocketsvg/PocketSVG/issues/84\n@onevcat noted, i will implement CacheSerializer\nThank you. ",
    "timonchev": "how get size of image from data? Or proportions weight/height. or something like Aspect fit for svg layer? \n. ",
    "luongtuananh168": "@vaibhav-varshaaweblabs  :  SVGKit in ImageProcessor solution \ud83d\udc4d \nIn struct WebpProcessor: ImageProcessor\n//Convert input data/image to target image and return it\ncase .data(let data):\n                let imageSVG : SVGKImage = SVGKImage(data: data)\n                    return imageSVG.uiImage\n            }\n// Then pass it to the setImage methods:\nlet processor = WebpProcessor()\nlet url = URL(string: \"https://yourdomain.com/example.webp\")\nimageView.kf.setImage(with: url, options: [.processor(processor)])\n. ",
    "jacobsapps": "The imageSVG version works fine some of the time but when trying to load multiple images concurrently it crashes hard. . ",
    "puji26": "Argument labels '(svgSource:)' do not match any available overloads. ",
    "ecristerna": "Oh, i get it. So, id I set my cache limit to 10MB, and the maxCachePeriod to -1, this will cause to only delete files from disk once the 10MB capacity has been overpassed?\nAlso, is the AppDelegate the correct place to put this code?. ",
    "alibasta": "Hi @onevcat \nthanks for your fast response! I think the problem is somewhere else. \nMy CPU usage is higher than 100% using the following code to download more than 1000 Images:\nfunc cacheImages(_ urls: [URL], completion: (() -> Void)? = nil) {\n        var imagesProcessed = 0\n        let downloader = ImageDownloader(name: \"imageDownloaderJob\")\n        downloader.sessionConfiguration.httpMaximumConnectionsPerHost = 1\n        urls.forEach({\n            let cacheKey = $0.absoluteString\n            let isImageCached = ImageCache.default.isImageCached(forKey: cacheKey).cached\n            if !isImageCached {\n                downloader.downloadImage(with: $0, options: [], progressBlock: nil) {\n                    (image, error, url, data) in\n                    if let image = image {\n                        // cache image\n                        ImageCache.default.store(image, forKey: cacheKey)\n                    }\n                }\n            } else {\n                imagesProcessed += 1\n                if imagesProcessed == urls.count {\n                    completion?()\n                }\n            }\n        })\n    }\nDo you have experience using Kingfisher to download this large amount of urls?\nBest\nAlex. @onevcat Sorry for the late response. I was afk a few days. \nI changed the code to use the ImagePrefetcher and the performance looks better now.  I think the next step is to test Kingfisher with changing the queue in Kingfisher. Have you already done some tests?. CPU is still over 100%. I'm starting the ImagePrefetcher from a background DispatchQueue.\n. RAM is also exploding. More than a gig. I'm downloading 10806 images right now in the ImagePrefetcher.. ",
    "LimChihi": "Cool, I had sent a pull request.. ",
    "viktorwillmann": "You are right, the memory does drop if i simulate a warning or put in the background so i guess i have never noticed it before. Where do i set the maxMemoryCost? Will it work like FIFO, kicking out the oldest unrecently used image from cache? We can close this issue then.. ",
    "AmeerChand": "\nsee the url . ATS???. i already seted the ATS but not working.. ",
    "IvanVelickovski": "@AmeerChand \nMaybe you haven't set transport security in .plist.\nMore here: http://stackoverflow.com/questions/31254725/transport-security-has-blocked-a-cleartext-http. ",
    "pepejeria": "Alright, sounds good. . ",
    "jerry0317": "Thanks! This solves my problem.. ",
    "iDevelopper": "Got it! #145 . ",
    "bmetitiri": "Oh wow, I was completely misinterpreting how ResizingImageProcessor is supposed to work apparently. I assumed you passed in the target size for the resized image that you want, and I assumed that the addition of the .aspectFill mode would cause it to crop to reach the target size rather than squashing. \nMaybe if you added a note to the contentMode docs saying that it overrides the targetSize, and that you should see CroppingImageProcessor for cropping? I guess it should seem obvious that you use CroppingImageProcessor for cropping, but I was just super assuming the .aspectFill mode would act like that mode on a UIImageView.\n. So a follow up question, how do I get CroppingImageProcessor to respect the scale factor? It seems to be behaving differently with this processor than with the others. I changed my custom processor code to:\nfunc process(item: ImageProcessItem, options: KingfisherOptionsInfo) -> Image? {\n  let resize = ResizingImageProcessor(targetSize: targetSize, contentMode: .aspectFill)\n  let crop = CroppingImageProcessor(size: targetSize)\n  let round = RoundCornerImageProcessor(cornerRadius: targetSize.height / 2)\n  var newOptions = options\n  newOptions.append(.scaleFactor(UIScreen.main.scale))\n  return ((resize >> crop) >> round).process(<stuff>, options: newOptions)\n}\nbut the image that comes out after the crop step is half the width and height of the targetSize, cropping out 3/4 of the image. If I double my target size and don't pass in a scale factor, it works as expected, but this behavior just seems strange.. Actually, it seems to be perfectly stable if I remove canceling entirely.. ",
    "KairaKrishna": "The framework is building successfully, but my sample app is not compiling. Keeps on popping the same error.\nThe actual problem is, in the main project which gets successfully compiled on other mac machines, but the same source code doesn't get compiled on my mac system. Always stuck at the same problem: \"No such module 'Kingfisher'\"\nThere could be any other possible system level settings/configuration/environment changes possible that could be affecting the compilation of the same source code? By same source code, I meant: I have compressed the main project and shared to other members, and exactly same code without any changes get compiled successfully.\n. There are multiple dependent submodules under the main project, so I really don't wanna make a mess by changing it to pods.\nFramework search path variable is set to:\n$(inherited)\n$(SRCROOT)\nand I have checked with all possible combinations of recursive and non-recursive for both variables.\n. ",
    "shevakuilin": "I also the same situation. ",
    "mnearents": "Same here, installed with cocoapods, won't compile. I was one version behind in Xcode and Swift. So I went from 3.1 to 3.1.1 and now it compiles.. ",
    "achal1012": "I also have the same issue using pods \n:(. Thank you for replying instantly :)\nI installed it using   pod 'Kingfisher', '~> 3.2.3' and it worked.\nHere is my pod env:\nStack\nCocoaPods : 1.2.0\n        Ruby : ruby 2.0.0p648 (2015-12-16 revision 53162) [universal.x86_64-darwin16]\n    RubyGems : 2.0.14.1\n        Host : Mac OS X 10.12.4 (16E195)\n       Xcode : 8.3.1 (8E1000a)\n         Git : git version 2.11.0 (Apple Git-81)\nRuby lib dir : /System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib\nRepositories : master - https://github.com/CocoaPods/Specs.git @ 2be89b680bd9dddca8acdd0bfdd6cd1e444f295b\nInstallation Source\nExecutable Path: /usr/local/bin/pod\nPlugins\ncocoapods-deintegrate : 1.0.1\ncocoapods-plugins     : 1.0.0\ncocoapods-search      : 1.0.0\ncocoapods-stats       : 1.0.0\ncocoapods-trunk       : 1.1.2\ncocoapods-try         : 1.1.0\nPodfile\n```ruby\nUncomment the next line to define a global platform for your project\nplatform :ios, '10.0'\ntarget 'ProductCatalogue' do\n  # Comment the next line if you're not using Swift and don't want to use dynamic frameworks\n  use_frameworks!\n# Pods for ProductCatalogue\n  pod 'Firebase/Core'\n  pod 'Firebase/Database'\n  pod 'FSPagerView'\n  pod 'Firebase/Auth'\n  pod 'GoogleSignIn'\n  pod 'Kingfisher', '~> 3.2.3'\n  source 'https://github.com/CocoaPods/Specs.git'\n  pod 'SideMenu'\nend\n```\n. ",
    "pcambre": "I had same issue, but I cleaned up my project and after re compile it every thing works well.\n. ",
    "jiafei1986": "I also solved this issue by clean and build the project. ",
    "c0dehunter": "I tried clean&rebuild and it didn't help the first 3 times. After shutting down XCode and restarting the computer, opening .xcworkspace fresh up and clean&build, it now works. \nGood that I am already used to XCode (iOS?) bugs, reminds me of old days when I was developing microcontroler code in KDevelop.. the worst shit I've ever been working with. And iOS development is getting close to that.. Thank you for this guideline. It seems we were misinterpreting this value's role and will fix our code accordingly.. ",
    "pallavi10aggarwal": "@onevcat \nI am facing the same issue No such module 'Kingfisher' \nXCODE 10 ,  deployment target also 10 , Swift4.2  , cocoapods-1.5.3\n\n This is my pod file \n\nALSO pod env\nStack\nCocoaPods : 1.5.3\n        Ruby : ruby 2.5.1p57 (2018-03-29 revision 63029) [x86_64-darwin17]\n    RubyGems : 2.7.6\n        Host : Mac OS X 10.13.6 (17G65)\n       Xcode : 10.0 (10A255)\n         Git : git version 2.17.1\nRuby lib dir : /usr/local/Cellar/ruby/2.5.1/lib\nRepositories : master - https://github.com/CocoaPods/Specs.git @ 43343d455e6d4f99db11ff9547b6e96fdae6af24\n               stanwood - https://github.com/stanwood/Stanwood_Core.git @ 4b86a455322a0f098b993e4cb5f2c2c5c8315cb2\nInstallation Source\nExecutable Path: /usr/local/bin/pod\nPlugins\ncocoapods-clean       : 0.0.1\ncocoapods-deintegrate : 1.0.2\ncocoapods-plugins     : 1.0.0\ncocoapods-search      : 1.0.0\ncocoapods-stats       : 1.0.0\ncocoapods-trunk       : 1.3.0\ncocoapods-try         : 1.1.0\nPodfile\n```ruby\nsource 'git@github.com:CocoaPods/Specs.git'\nplatform :ios, '10.0'\nuse_frameworks!\nworkspace 'IPS.xcworkspace'\ndef main_pods\n    pod 'ACS', :path => \"IPS Packages/ACSBT_EVK_iOS/ACSBluetooth/\"\n# might be removed\n\npod 'Alamofire'\n# stanwood core libs\npod 'Moya'\npod 'Firebase/RemoteConfig'\npod 'Firebase/Performance'\npod 'Kingfisher', '~> 4.10.0'\npod 'SwiftLint'\n#pod 'Reveal-SDK', '= 11\u2019, :configurations => ['Debug\u2019, 'Debug QA\u2019]\npod 'IQKeyboardManagerSwift'\npod 'ReachabilitySwift'\npod 'Cache'\n\npod 'StanwoodCore'\nend\ntarget 'IPS Monteur' do\n    project 'IPS Monteur.xcodeproj'\n    pod 'StanwoodAnalytics'\n    main_pods\nend\ntarget 'IPS MonteurTests' do\n    project 'IPS Monteur.xcodeproj'\n    pod 'Fabric'\n    main_pods\nend\n```\nI have almost tried every solution proposed above . But does not help :(. @onevcat  I updated to beta version  but no luck , Kindly suggest some other way out . . @onevcat  I even changed my deployment target to iOS 11 . \nNo Luck , the issue still persists. @onevcat I cleaned my project also removed derived data.\nalong with  \"No such module\" I get this error \"Command CompileSwift failed with a nonzero exit code\"\nwith the below error description\n\n\n. @onevcat  the issue got resolved , I exactly don't know what solved it , a number of trials  including deleting derived data , restarting  Mac , cleaning project build  also I observed that frameworks were not there in Products folder under Pods Project , I resolved that too may be that could be the reason .\nAnyways , Thanks for your support .. ",
    "Killectro": "Is there any update on this? I've also seen this issue in our production app.. ",
    "AlexeyAfanasyev": "Hello guys,\nDo you have any idea when to expect the feature in release?\nThank you. . ",
    "dmial": "Yes, ImageCache.default.maxMemoryCost = 1 makes it work as well as ImageCache.default.clearMemoryCache().\nI would like to find best solution.\nDo I understand right that\n1) Kingfisher uses two caches: disk, RAM?\n2) ImageIO_PNG_data (category presented in Xcode memory debugger) relates to the RAM cache?\nEach of my files (6000\u2006\u00d7\u20063821) is about 300 kb on disk and 100 mb in RAM (ImageIO_PNG_data). They are loaded from network by Kingfisher.\nIs there a way to make Kingfisher cache files on disk but not cache them in RAM?. As I can see in memory debugger, ImageIO_PNG_data's counters and total amount of memory are somehow related to Kingfisher memory cache: when I setImageCache.default.maxMemoryCost = 1ImageIO_PNG_data's total memory and counters are constrained otherwise they are growing. It would be great if you clarify this issue a little bit. But anyway thanks a lot for your answers. Now it's clear how to set up best configuration.. ",
    "damirstuhec": "Thank you for a quick response. I agree with you on the scope side of things, just wanted to hear your thoughts on this.\nFor now, I'm accomplishing my needs with processor.process(item: .image(image), options: options) and setting the resulting image to the UIImageView, together with other manual effects like fade, as you suggested.. ",
    "ShaharHD": "@khuong291 You might want to take a look at: KingfisherWebP\nI've got it updated with latest libwebp 0.6.0 and just submitted a PR to support animated webp (for now just the 1st frame).\n@onevcat Are you willing to consider adding built-in support for webp? I think it might be beneficial to have it as a supported type as it is starting to get more popular.\nI think I might be able to assist with that.. @onevcat created #663 to allow for more generic naming support via ImageProcessor. Fixed with #664 . @onevcat Please note that the initial pod install changed all the files I've put in the 1st commit (didn't touch anything)\nAll my changes afterwards are in the 2nd commit.\n~Also, when trying to run the tests on Xcode I'm getting errors on Kingfisher/Kingfisher-TestImages/Modified/Overlay/onevcat-overlay-red-07-mac.jpg: No such file or directory Are some files missing from the git repo?~\nFound git clone https://github.com/onevcat/Kingfisher-TestImages.git Kingfisher-TestImages\nAll Tests on my machine completes with no errors.\nEven the one travis-ci reported as failed:\nTest Suite 'KingfisherTests-macOS.xctest' passed at 2017-05-08 07:17:35.353.\n     Executed 92 tests, with 0 failures (0 unexpected) in 7.738 (8.656) seconds. Worked.\nTwo FYIs:\n1. Version 3.7.0 was never pushed to cocoapods\n2. I would appreciate if you can push 3.7.1 also with my fix after you approve it so I can base KingfisherWebP on the latest while I'm implementing the proper animation (right now I have it pointed to my branch for development). The difference here it's a enum and not functions. But I'll fix the other ones as requested.. I don't understand how you suggest having the enum value deprecated outside of the enum declaration (Swift AFAIK does not support adding to an enum through inheritance or any other extension mechanism). Tried the same, but with incorrect syntax is seems... Thanks \ud83d\udc4d \n. My bad a typo of copy & paste.\nFixed. ",
    "hamzauzumcu": "The problem is solved by adding the following codes.\ncell.ImageView.image = nil\ncell.ImageView.image = UIImage(named: \"ListenerImage\")\n. Thanks your right. Especially thanks for the additional info \"placeholder\". I didn't know this detail. . ",
    "gujianxing": "\u6211\u4eec\u7684\u9a8c\u8bc1\u662f\u901a\u8fc7\u670d\u52a1\u5668\u7684\u4f1a\u8bdd\u8fdb\u884c\u9a8c\u8bc1\u3002\u6211\u5c1d\u8bd5\u5728\u53c2\u6570\u4e2d\u52a0\u5165\u8bf7\u6c42\u5934\uff0c\u4f46\u8fd8\u662f\u65e0\u6cd5\u901a\u8fc7\u9a8c\u8bc1\u3002\n\u4e0b\u9762\u662f\u6211\u7684\u4ee3\u7801\uff1a\nlet modifier = AnyModifier { request in\nvar r = request\nfor (key, value) in HttpHelper.headers {\nr.setValue(value, forHTTPHeaderField: key)\n}\nreturn r\n}\nAt 2017-04-26 17:46:57, \"Wei Wang\" notifications@github.com wrote:\nYou could use ReqeustModifier for it. Please read our wiki.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub, or mute the thread.. ",
    "hh1myfei": "@gujianxing    \u52b3\u70e6\u95ee\u4e00\u4e0b\uff0c\u540e\u6765\u600e\u4e48\u89e3\u51b3\u7684\uff1f. ",
    "borkuslav": "Thank you very much @onevcat ! . ",
    "131e55": "Thank you very much @onevcat \ud83d\ude0d\u2757. ",
    "mxp7064": "use .forceRefresh in options. ",
    "ldantona": "@onevcat awesome, thank you!\nWill it be released shortly? :). ",
    "luannguyenkhoa": "Tks for your enthusiastic support.\nTempTestKingfisher.zip\nThe attached file is my demo. Debug with Instrument you can see the memory goes up continuously as the video above.\nBest.. Yah. You're right. I just tried \"Created & Persiatent\", everything goes fine.\nSorry for bothering. I'm gonna close this issue.\nBest.. ",
    "kishor010": "I read it but didn't get.\nThanks\n@onevcat . ",
    "kristoff2016": "This file KingfisherManager.swift line 122:  forKey: resource.cacheKey I got error this point . ",
    "GorCat": "\u8fd9\u4e2a\u95ee\u9898\u53ef\u4ee5 100% \u590d\u73b0. \u52a0\u8f7d\u56fe\u7247\u7684\u4ee3\u7801\u5982\u4e0b\uff1a\n`\n/// \u52a0\u8f7d\u56fe\u7247\n    public func loadImage() {\n        for imageObject in picuresArray {\n\n            let imageUrl = TSURLPath.imageURLPath(storageIdentity: Int(imageObject.storageIdentity), compressionRatio: ratio)!\n\n            button.kf.setImage(with: imageUrl, for: .normal)\n\n       }\n\n}\n\n`\n\u53d6\u6d88\u56fe\u7247\u52a0\u8f7d\u4ee3\u7801\u5982\u4e0b:\n`\n /// \u53d6\u6d88\u52a0\u8f7d\u56fe\u7247\npublic func cancelLoadImage() {\n\n    for imageObject in picuresArray {\n\n        let index = picuresArray.index(of: imageObject)!\n\n        let button = viewWithTag(basicTagForImageButton + index) as! TSPreviewButton\n\n        button.kf.cancelImageDownloadTask()\n\n    }\n\n}\n\n`\n. \u56fe\u7247\u90fd\u662f\u6839\u636e\u5b9e\u9645\u5c55\u793a\u5927\u5c0f\u5bf9\u5206\u8fa8\u7387\u8fdb\u884c\u4e86\u538b\u7f29\u7684\uff0c\u90a3\u6211\u5148\u6574\u7406\u51fa\u4e00\u4e2a Demo\uff0c\u7136\u540e\u9ebb\u70e6\u55b5\u795e\u6709\u7a7a\u7684\u65f6\u5019\u5e2e\u5fd9\u770b\u4e00\u4e0b\u4e86\uff0c\u6574\u7406\u597d\u540e\u6211\u5427 Demo \u53d1\u5230\u4f60\u7684\u90ae\u7bb1\u54c8 ~\n. \u5df2\u53d1\u9001 Demo\u3002. \u95ee\u9898\u5df2\u89e3\u51b3\uff0c\u662f\u6211\u7684\u95ee\u9898. ",
    "ddffsg": "@GorCat \u80fd\u8bf4\u4e00\u4e0b\u5177\u4f53\u539f\u56e0\u5417\uff0c\u6211\u4e5f\u9047\u5230\u4e86\u7c7b\u4f3c\u7684\u95ee\u9898. \u5982\u679c\u6211\u8fd9\u8fb9\u9700\u8981\u6279\u91cf\u52a0\u8f7d\u7f29\u7565\u56fe\uff0c\u4f46\u670d\u52a1\u5668\u90a3\u8fb9\u53ea\u7ed9\u4e86\u6211\u5b8c\u6574\u56fe\uff0c\u6211\u8be5\u600e\u4e48\u5904\u7406\u964d\u4f4e\u5185\u5b58\u554a. ",
    "rlaguilar": "Hi @onevcat,\nI've experienced this kind of random crashes (without using Kingfisher) when working with UIGraphicsBeginImageContextWithOptions. In my case I was using UIGraphicsGetImageFromCurrentImageContext for retrieving the image, which retrieves an autoreleased image. This means that all the images you create during a single iteration of the Run Loop will be released after this iteration finishes, so if you are decoding too much images during the same iteration you can experiment memory issues. The solution that I found was to enclose my drawing code inside an autoreleasepool block, so the autorrelased images would be released just before my code returns. \nIn your case you are using CGContext.makeImage for retrieving the image, so I don't know if in this case the returned image is an autorreleased object too, in which case the problem the problem here could be the same.\nRegards. ",
    "qiusuo8": "Same situation. In iOS 10.3.3, easy to reproduce in my project.\n\n. Sorry, it's my fault. The JPGs are too large. . ",
    "commando24": "Yeah i have tried stopAnimating and that's working.. ",
    "cikpis": "@onevcat comment updated.. @onevcat here it is https://www.dropbox.com/s/l4rkyppkcjrd468/orginal.jpg?dl=0. Using size(width = 325, height = 325)\nResizingImageProcessor\nswift\nlet scale = UIScreen.main.scale\nlet resizingProcessor = ResizingImageProcessor(referenceSize: CGSize(width: size.width * scale, height: size.height * scale))\nimage scale = 1.0\nimage size  = 650.0, 650.0\nToucan\nswift\nlet resizedImage = Toucan(image: image).resize(CGSize(width: size.width, height: size.height),\n                                                                                     fitMode: .crop).image\nimage scale = 2.0\nimage size  = 325.0, 325.0\nThe result is identical of the images I have posted in my previous comment. With ResizingImageProcessor the image seems to be with a blur effect applied.. Yes. Ok man, I might found where the problem is with your library. I changed the code in the link you gave me in order to make it same as mine. \n```swift\noverride func collectionView(_ collectionView: UICollectionView, willDisplay cell: UICollectionViewCell, forItemAt indexPath: IndexPath) {\nlet url = URL(string: \"https://photos-2.dropbox.com/t/2/AAABiXAtTmZiiqeuCwUSVaD0fps9iCb_-6MIDnfP_BzJEw/12/1913294/jpeg/32x32/3/1495998000/0/2/orginal.jpg/EKmXxAEY85LLRiACKAI/lt9cWxuehMA5zQ4CQDMm1X3YkmVIeVkj8IpskhMr8fs?dl=0&size=2048x1536&size_mode=3\")!\nlet imageView = (cell as! CollectionViewCell).cellImageView!\nimageView.layer.masksToBounds = false\nimageView.layer.shadowColor = UIColor.black.cgColor\nimageView.layer.shadowOpacity = 0.0\nimageView.layer.shadowOffset = CGSize(width: 0, height: 10)\nimageView.layer.shadowRadius = 10\nimageView.layer.shadowPath = UIBezierPath(rect: imageView.bounds).cgPath\nimageView.layer.shouldRasterize = true\nif (indexPath.row == 0) {\n    let scale = UIScreen.main.scale\n    let p = ResizingImageProcessor(referenceSize: CGSize(width: 325 * scale, height: 325 * scale))\n    imageView.kf.setImage(with: url,\n                          placeholder: nil,\n                          options: [.transition(ImageTransition.fade(1)), .processor(p)],\n                          progressBlock: { receivedSize, totalSize in\n                            print(\"\\(indexPath.row + 1): \\(receivedSize)/\\(totalSize)\")\n    },\n                          completionHandler: { image, error, cacheType, imageURL in\n                            imageView.layer.shadowOpacity = 0.5\n                            print(\"\\(indexPath.row + 1): Finished\")\n    })\n} else {\n    imageView.kf.setImage(with: url,\n                          placeholder: nil,\n                          options: [.transition(ImageTransition.fade(1))],\n                          progressBlock: { receivedSize, totalSize in\n                            print(\"\\(indexPath.row + 1): \\(receivedSize)/\\(totalSize)\")\n    },\n                          completionHandler: { image, error, cacheType, imageURL in\n                            (cell as! CollectionViewCell).cellImageView.image = Toucan(image: image!).resize(CGSize(width: 325, height: 325),\n                                                                                                             fitMode: .crop).image\n                            (cell as! CollectionViewCell).cellImageView.layer.shadowOpacity = 0.5\n\n                            print(\"\\(indexPath.row + 1): Finished\")\n    })\n}\n\n}\n```\nSo, adding the follow code breaks something in your processor\nswift\nimageView.layer.masksToBounds = false\nimageView.layer.shadowColor = UIColor.black.cgColor\nimageView.layer.shadowOpacity = 0.0\nimageView.layer.shadowOffset = CGSize(width: 0, height: 10)\nimageView.layer.shadowRadius = 10\nimageView.layer.shadowPath = UIBezierPath(rect: imageView.bounds).cgPath\nimageView.layer.shouldRasterize = true. Now yes! Finally :) \nWell, thanks for your time man! Was nice chat with you, cheers!. Hey @onevcat , I just discovered that the fade animation is not working with the previous UIImageView Layer settings. Any clue?. Yeah. In fact I'm doing something tricky for that. Anyway, thanks again \ud83d\udc4d . 4.1.1 and of course I tried full clean/reinstall\nI'm using right now another library and all seems ok.. Why did you close the issue?. When I said I'm using another library I meant that I tried my  code with another one and all is ok so the problem seems in KF. \nDid you try it with Xcode 9.0.1?. Unfortunately no. I'll remove all cocoa pods and reinstall them again and see if it is solved.. ",
    "wjling": "Still have the problem as @lastcc mentioned.  I have an image, size {100, 40}. I use ResizingImageProcessor with referenceSize {100, 40}, scale 2.0,  but the result image has size {100, 40}, scale 2.0. It supposed to be size {50, 20}, scale 2.0. Using Kingfisher 4.8.1. @onevcat Thanks for help. Just pass .scaleFactor(2.0) works well. But I still need ResizingImageProcessor to fit my UIImageView's size. I pass referenceSize in point count instead of pixel count and it works as expected. Thanks again!. I happened to finding that ContentMode in Kingfisher conflicts with ContentMode in UIView. My code \nlet processor = ResizingImageProcessor.init(referenceSize: CGSize.init(width: _width, height: _height), mode: ContentMode.aspectFill)\noccurs an error said Type 'UIView.ContentMode' has no member 'aspectFill'.\nI'm using XCode 10 but my project Swift version is Swift 4.0. I think this UIView's new feature should only appear in Swift 4.2. Maybe this is a bug of XCode. ",
    "pangpingfei": "I'm so sorry but I really have just done the reading and searching job before ask my question ... so i need \u2026help. Maybe, I want to keep the image cache only when  clear it manually.. @onevcat Thank you very much!. ",
    "techyowl": "I removed the whole prefetched code out from a dispatch in background task and it is running a lot better and hasn't crashed yet however I'm noticing what appears to be socket errors in writing data. they aren't crashing the app but I am wondering If I'm running through everything too quickly? I might have to break the images into smaller sets as the though did cross my mind thank you. and yeah there is a lot of images being fetched. Thanks for the fast reply.. Thank you for getting back to me so quickly, I have setup a custom instance of an ImageCache object with a custom diskCachePathClosure option as you suggested and I'm still testing it. I did want to clarify the user will be prompted to cache the images locally and it is designed for offline access to Google Photos and I'm not certain it will be accepted by Apple but I kind of just wanted to build it because I needed it to work. I know this library isn't intended to download files but It is the most full featured caching library I know of for swift so I thought I could make it work. The user will be in control of which \"Albums\" are cached or not cached and will be able to manage the cache themselves. There were some apps that did this in the past but the developers have removed them from sale. Possible Apple Guideline violation like you said. Thanks for pointing me in the right direction though definitely helps. I'll re open this if I find it isn't the disk cache location and there might be a problem with the retrieve image from disk function until then thank you.. I think i may be calling retrieve image in disk cache incorrectly. this is my current implementation:\nimagecache?.retrieveImageInDiskCache(forKey: img)\nwhere image cache is a custom instance of ImageCache with diskCachePathClosure defined. however I'm still having issues with nil images. I know the urls aren't different and I'm not sure why they would be nil if I'm prefetching them.. I think I traced it down to networking issues. I was implementing it exactly like that and I noticed I can check for failedResources which I'm assuming is an array in the ImagePrefetcher and if so iterate through the prefetched until their isn't a failure or a failure of a low percentage or some sort of condition that will obtain the images when networking is restored. I'll work through the logic in a couple days. It seems to download small amount of images fine and I've had issues with the communication with google when requesting several hundred items instantaneously. I think I will do a 3 time retry as that is typically standard procedure when networking errors occur. I might also add a delay in there too because it can prefetch ~500 images no problem. I'll need to rework my code. thanks for clarifying I setup my image prefetched correctly.. Wow,\nI ran it with that example and sure enough everything was loading from disk.\n I was just searching for something like it and I found this after searching a while through thousands of lines:\nImageCache.default.maxMemoryCost = 1\ncommenting that out fixed my problem.\nThank you for the speedy response!!!. ",
    "cl3m": "@onevcat  I had the same problem. It seems the recursion is too deep when prefetching thousand of image. \nThe easiest solution was to add an DispatchQueue.main.async  in reportCompletionOrStartNext.. ",
    "JunyuKuang": "I will try it. \ud83d\ude01. @ealymbaev you need to add an option to your image download request. Check FormatIndicatedCacheSerializer's description.. ",
    "ealymbaev": "I also need this urgently. Could you please merge this asap. Does not seem to fix anything.... This will not help as I am clearing both image and canceling request when the cell is being reused. Otherwise it could end up displaying wrong image while loading new one.. Processors seem not to cache processed images in memory or something.. ```\nlet resizeProcessor = ResizingImageProcessor(referenceSize: size, mode: .aspectFill)\nlet cornerRadiusProcessor = RoundCornerImageProcessor(cornerRadius: size.width * roundness)\nlet processor = resizeProcessor >> cornerRadiusProcessor\nview?.kf.setImage(with: URL(string: url), options: [.cacheSerializer(FormatIndicatedCacheSerializer.png), .transition(.fade(0.2)), .processor(processor)], completionHandler: { [weak self] image, error, cacheType, imageUrl in\n    if image == nil {\n        self?.showPlaceholder()\n    }\n})\n```\nAlso please note that I have tried removing all other options except processor (cacheSerializer and transition) and it flickers anyway. Only removing processors does help.. WITH processors:\nalways \"none\"\nWITHOUT processors:\nmemory\nmemory\nmemory\nmemory\nmemory\nmemory\nmemory\nmemory\nmemory\nmemory\nmemory\nnone\nmemory\nmemory\nmemory\nmemory\nmemory\ndisk\ndisk\nmemory\nmemory\nmemory\nmemory\nnone. As for .keepCurrentImageWhileLoading:\nHere is my code:\n```\noverride func bindView(toContainer container: UIView, storage: ViewStorage) {\n    super.bindView(toContainer: container, storage: storage)\nview?.label.frame = bounds\nview?.label.font = UIFont.systemFont(ofSize: frame.size.width / 2.2)\n\nif let url = url, let processor = processor {\n    view?.kf.setImage(with: URL(string: url), options: [.cacheSerializer(FormatIndicatedCacheSerializer.png), .transition(.fade(0.2))], completionHandler: { [weak self] image, error, cacheType, imageUrl in\n        print(cacheType)\n        if image == nil {\n            self?.showPlaceholder()\n        }\n    })\n} else {\n    showPlaceholder()\n}\n\n}\noverride func unbindView(storage: ViewStorage) {\n    view?.kf.cancelDownloadTask()\n    view?.image = nil\n    view?.backgroundColor = nil\n    view?.label.isHidden = true\nsuper.unbindView(storage: storage)\n\n}\n```\nAs you can see unbindView sets image to nil. So when the imageView is reused - it will NOT have the previous image. And as you may know we cannot leave the image in the unbinded view because collectionView can use any random view from storage. Here are the logs with identifiers:\ncom.onevcat.Kingfisher.ResizingImageProcessor((74.0, 74.0), aspectFill)|>com.onevcat.Kingfisher.RoundCornerImageProcessor(37.0)\ncom.onevcat.Kingfisher.ResizingImageProcessor((74.0, 74.0), aspectFill)|>com.onevcat.Kingfisher.RoundCornerImageProcessor(37.0)\ncom.onevcat.Kingfisher.ResizingImageProcessor((74.0, 74.0), aspectFill)|>com.onevcat.Kingfisher.RoundCornerImageProcessor(37.0)\ncom.onevcat.Kingfisher.ResizingImageProcessor((74.0, 74.0), aspectFill)|>com.onevcat.Kingfisher.RoundCornerImageProcessor(37.0)\ncom.onevcat.Kingfisher.ResizingImageProcessor((74.0, 74.0), aspectFill)|>com.onevcat.Kingfisher.RoundCornerImageProcessor(37.0)\ncom.onevcat.Kingfisher.ResizingImageProcessor((74.0, 74.0), aspectFill)|>com.onevcat.Kingfisher.RoundCornerImageProcessor(37.0)\nnone\nnone\nnone\nnone\nnone\nnone. Ok, just give me some time. I will provide a repo link here soon. @onevcat Yes, seems so. Any quick fix for this?. Thanks... will be waiting for it. And hope it will fix the issue. @onevcat I have tried the latest version. But it does not solve the issue. Here is the new log:\nmemory\nnone\nmemory\nmemory\nmemory\nmemory\nmemory\nmemory\nmemory\nnone\nnone\nmemory\nmemory\nmemory\nmemory\nnone\nnone\nmemory\nnone\nnone\nnone\nmemory\nmemory\nmemory\nmemory\nnone\nnone\nnone\nmemory\nnone\nnone\nnone\nPlease note that I have tried to reopen controller several times and it gives the same log every time.. ",
    "arkth-araya": "hey,\ni'm facing the same problem too. i use carthage.\nthe error message is\n'Kingfisher/Sources/KingfisherManager.swift:224:25: error: use of local variable 'handleNoCache' before its declaration\n                        handleNoCache()'\nso, you should move handleNoCache function to above line 212.\nMaybe i will create pull-request later.\n. ",
    "arismamo": "@onevcat  I am using swift 3.0.2 and xcode 8.2.1. @arkth-araya i can confirm that moving the function above the line, every works is fine. i think its due to the last version of swift. Thanks. ",
    "lfarah": "@onevcat when are you merging this? Would love to continue using Kingfisher in my project!\n\n. ",
    "lightsprint09": "Hey. There is an issues withe carthage and the new build system. Would it be ok to revert to the old build system??. ",
    "wy284086": "please support webp format,  this format is better. ",
    "math-nao": "I'm using it for handling a progress UIView. It works fine when image is downloaded but not when image is coming from cache; currently, there is no way to know that image is coming from cache in retrieveImage method so I cannot handle this case for my needs.\nI choose receivedSize == totalSize with a value of 1 so progress is done at 100%. I currently do not use numerical value, just percent. But of course, we could also use image size value instead to fulfill requirements.. Yes, cacheType parameter fits my needs. Thanks.\nThis pull requests can be closed.. ",
    "iHTCboy": "I find:\nopen func calculateDiskCacheSize(completion handler: @escaping ((_ size: UInt) -> ())) {\n        ioQueue.async {\n            let (_, diskCacheSize, _) = self.travelCachedFiles(onlyForCacheSize: true)\n            DispatchQueue.main.async {\n                handler(diskCacheSize)\n            }\n        }\n    }\nuse\uff1a\n`\nKingfisherManager.shared.cache.calculateDiskCacheSize(completion: { (cacheSize) in\n            })\n\n`. ",
    "AMatecki": "Sorry for not responding, I was on holiday. I'll try the fix it soon!. ",
    "valdirunars": "Yes, I could try and figure out the appropriate body for the request, the only problem is that it contains a lot of info which would have to be fetched from different APIs in Firebase, which is tedious compared to using their methods to handle it for you. \nResource and ImageDownloader could be more customizable. in ImageDownloader there is a open method for customizing image downloads. The problem is that it relies on me knowing the URL.\nswift\nopen func downloadImage(with url: URL, retrieveImageTask: RetrieveImageTask? = nil, options: KingfisherOptionsInfo? = nil, progressBlock: ImageDownloaderProgressBlock? = nil, completionHandler: ImageDownloaderCompletionHandler? = nil) -> RetrieveImageDownloadTask?\nBut in my case I have a closed function from an external library to figure out the URL. I only provide internal paths to their public API and eventually get a Data object.\nI want to be able to provide KingFisherManager a custom ImageDownloader which uses this external library (Firebase SDK) for downloading my images as Data, with all the other benefits of KingFisher, such as the UIImageView extensions, Cache and ImageProcessing. What I am forced to use:\n```swift\n// Create a reference to the file you want to download\nlet islandRef = storageRef.child(\"images/island.jpg\")\n// Download in memory with a maximum allowed size of 1MB (1 * 1024 * 1024 bytes)\nislandRef.getData(maxSize: 1 * 1024 * 1024) { data, error in\n  if let error = error {\n    // Uh-oh, an error occurred!\n  } else {\n    // Data for \"images/island.jpg\" is returned\n    let image = UIImage(data: data!)\n  }\n}\n```\nI would like to be able to provide a custom ImageDownloader for Kingfisher that uses this method, that way I don't need to know all the parameters Firebase eventually add to my URL, Kingfisher shouldn't have to know either, all Kingfisher should be worried about is the image itself, right?\n. Yeah seemed like there was a commit in cheat sheet that went through, ahead of the source.\nThanks. ",
    "CK11FOR333": "Yes, I found it on iOS 8.3 at the beginning, and also on iOS 10.3.2 later. Both target is 8.2.  I will consider it. Thanks a lot \ud83d\ude0a\nOn 2017\u5e747\u670810\u65e5 +0800 PM5:41, Wei Wang notifications@github.com, wrote:\n\nIt's a bug of iOS 8. I am not quite willing to fix it by introducing an Objective-C layer.\nI guess it could be a good chance to upgrade the deploy target to iOS 9 now... :[\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. \n",
    "caiovidaln": "For those who have this problem as I do, just upgrade to the latest version of Kingfisher that will solve.. ",
    "matsuokah": "\nIt is for the beta 3. Please upgrade to Xcode beta 3.\n\nThanks share me!\n. ",
    "fans3210": "Yes it's about a total number of 30 of high resolution images. When they are in 'kf mermory cache', the total size consumed is about 20mb. But when they are loaded from disk cache, they consume more memory storage: more or less 200mb - 10 times of the cost of 'kf memroy cache'. So if I open this page 10 times, the memory cost will easily increase to 2gb(which also means I failed to release these images when the vc disappeared).  I will provide a sample project later for my issue. Sorry @onevcat . After setup a new project and tested, I found that the leaking issue is my own problem. Sorry about this. Although retrieveImageInDiskCache cost more memory compared to retrieveImageInMemoryCache, all images still got released when the vc disappeared. \nSo, for my issue. I will take ur advice use thumbnails for collectionview cells and resolve the leaking prob. Sorry again for my own fault and thanks a lot for your patience and the advice!. I was having similar issue too. But my lagging happens during the image(all are HD images) downloading process via the image downloader. I queued the image downloading process for each image and used instrument to monitor the activity and saw a few peaks in the background thread instead of main thread. Using iphone 7 with IOS 11.2. ",
    "ryango": "sweet!. ",
    "Amos729": "IndicatorScreenshot. Thank you very much. Sorry,  I always set viewCenter when comforming to Indicator protocol, resulting in a wrong showing.  Maybe you can declare viewCenter as private when it's already provided a default implement inside. Anyhow, thanks for the trouble again.. ohh, it may be a pity for swift to do so.. ",
    "lingzlu": "Interesting, you are right, google.com does return 32x32 icon, it's a bad example. Most other websites I have returns 16x16, e.g. www.bing.com, youtube.com, facebook.com, tasks.office.com, etc. Google's scenario lead me to think that's probably a default configuration by the web?. ",
    "dev-fuad": "@onevcat Thanx for the reply. I've tested it on iPhone 6 and older devices and it does crash on them.\nOne thing I've noticed is that the download have no problem but as soon as I set that image to an UIImageView it crashes and the memory usage is more than 500MB. \nFor now I'm using KingfisherManager.shared.retrieveImage to get the image and resize it before setting it to UIImageView. Is there a better option! cause I don't have access to the server or thumbnail url.\nAnyways Thanks again.. That works good. Thanks. ",
    "ceeyang": "Thanks for reply.. I updated my MacOS on the same day,The previous version is 3.10.3.\nAnd I don't sure isn't worked well on 3.10.3 in my environment.\nIs there some suggestions to find the problem?. I built a new project with carthage use Kingfisher 3.10.4.The same proble happend.\n```swift\nimport UIKit\nimport Kingfisher\nclass ViewController: UIViewController {\noverride func viewDidLoad() {\n    super.viewDidLoad()\n    let imageView = UIImageView(frame: CGRect(x: 20, y: 20, width: 100, height: 100));\n    imageView.backgroundColor = UIColor.lightGray;\n    view.addSubview(imageView)\n    let url = NSURL(string:\"http://pic.58pic.com/10/73/59/48bOOOPICe2.jpg\")\n    imageView.kf.setImage(with: url as? Resource)\n}\n\noverride func didReceiveMemoryWarning() {\n    super.didReceiveMemoryWarning()\n    // Dispose of any resources that can be recreated.\n}\n\n}\nI think maybe the problem is on the carthage,When I copy the `Sources` file to my project,It worning me :`Use of undeclared type 'Resource'`.. When I use `cocoapods ` with the version 3.10.4,I found the problem.swift\n        guard let resource = resource else {\n            base.image = placeholder\n            setWebURL(nil)\n            completionHandler?(nil, nil, .none, nil)\n            return .empty // I made a breakpoint here,it run to this breakpoint,return me a empty\n        }\nIs there problem in my code ?swift\n        let url = NSURL(string:\"http://pic.58pic.com/10/73/59/48bOOOPICe2.jpg\")\n        imageView.kf.setImage(with: url as? Resource)\n``. OK,I find the reason,I havd used theNSURL,When I change it withURL,it worked.\nThanks.\nBut I think you should add  support  forNSURL,or let people know should useURL.. When I useNSURL,I built it complete.\nIs this a bug on myXcode version(Version 9.0 beta 4 (9M189t))`.. ahahaha,thanks for your patience.. ",
    "emadd": "I have my doubts.  Like I said, when I set the image to a local asset, this doesn't happen.  Also, the height of the image is dynamic to match the resulting height of the cell, which is dynamically tall depending on the height of the label.. ",
    "s4cha": "+1 @onevcat adding a border through the layer api is fine but it can be very detrimental to the perfomances in a tableview context.\nHaven't the time to look at it right now unfortunately but that would be a great addition :). ",
    "teameh": "Thanks for the quick reply. I'll definitely have a go at it. Thanks a lot for the pointers, that will really help. You'll probably need to rework the PR a bit but we'll see. I'll try to submit it somewhere in August. Cheers!. Hi @onevcat I finally had a chance to work on this, see https://github.com/onevcat/Kingfisher/compare/master...teameh:custom-placeholder. \n\n(I basically copy and pasted your code \ud83d\ude1d ) \nBut I ran into a couple of problems. While the protocol works fine for UIImageView the protocol should be different for UIButton or NSButton. Or well.. it would be better if it would be the same of course but that would make the protocol implementation look something like: \n```\nextension Image: Placeholder {\n    public func add(to imageViewOrButton: Any) {\n        if let imageView = imageViewOrButton as? ImageView {\n            imageView.image = self\n        } else if let uiButton = imageViewOrButton as? UIButton {\n            uiButton.setImage(self, for: / hmm we need the state here as well / )\n        } else if let nsButton = imageViewOrButton as? NSButton {\n            nsButton.image = self\n        }\n    }\npublic func remove(from imageViewOrButton: Any) {\n    if let imageView = imageViewOrButton as? ImageView {\n        imageView.image = nil\n    } else if let uiButton = imageViewOrButton as? UIButton {\n        uiButton.setImage(nil, for: /* hmm we need the state here as well */ )\n    } else if let nsButton = imageViewOrButton as? NSButton {\n        nsButton.image = nil\n    }\n}\n\n}\n```\nNot ideal. \nI was also wondering why you use extension Placeholder where Self:UIView {...} in your example code btw, why not extension UIView: Placeholder {...}\nI'm not sure if I have time to finish this PR, any time soon, go ahead with implementing it if you feel like it. \n. Cool!\nYou don't need me to create a PR for this right? Here's my remote git@github.com:teameh/Kingfisher.git so you don't have to look it up if you want to continue on my custom-placeholder branch.\nGood luck, cheers!. Wow, you move fast! Kudo's! . Nice \ud83d\ude03 . Check!. I still don't get why this is better than extension Placeholder : View {...}. Could you explain it if you have the time for it? Nevermind otherwise :) . Check. That makes sense! . ",
    "basememara": "I don't think the tinted processor works as one would expect. In the source code, it says it only works with CG-based images. For everything else, I had to do the following to get tinted colours to work:\nUIImageView.kf.setImage(\n  with: urlResource,\n  completionHandler: { (image, error, cacheType, imageUrl) in\n    self.tintColor = myTintColor\n    self.image = self.image?.withRenderingMode(.alwaysTemplate)\n  }\n). ",
    "coder360": "Thanks for your response. Yes, after a day worth of scrambling, I had stumbled on to this observation that it worked for https scheme and not http. ATS is no longer optional in iOS 10 but, that is fine. I will go ahead and ensure the use of https.. ",
    "ivanstang": "@onevcat Thanks, it can work.\nAnother question: \nIs there a way to remove all cached images produced by processors? Because I have some different processors in different view controllers. I need to remove them at one point.\n. ",
    "tizaks": "Thanks! Fixed in #753. ",
    "sxdxzkq": "Just because I also need to use the function of MD5, when I see Kingfisher also have this function, feel to introduce another library is a function of waste.. ok, thank you.. ",
    "mding5692": "Thanks for helping me! pod update worked :)\nYep fixed it, sorry about that, did a beginner mistake there. ",
    "anddygon": "\u975e\u5e38\u611f\u8c22\u55b5\u795e\u53ca\u65f6\u56de\u590d\n\u6211\u6709\u5b8c\u6574\u770b\u8fc7\n\n\u671f\u671b\u7684\u7ed3\u679c\u662f\u539f\u56fe\uff0cresize(100 * 100),resize(200 * 200)\u90fd\u4f1a\u88ab\u5b58\u50a8\u8d77\u6765\uff0c\u4f46\u662f\u73b0\u5728\u7684\u7ed3\u679c\u53ea\u4f1a\u5b58\u50a8\u539f\u56fe\u548cresize(200*200)\n\n\u6ca1\u6709\u5b58\u50a8resize(100*100). ",
    "XOneto9": "@onevcat Thanks'\nhum,, in other words, just checking what the saved cache is removed or not?\nthe store is not removed, just check cache file for reference of doing other work??\nis that??. @onevcat Ok..\nThank you!\neventually, If I should remove cache, Only one to use cleanDiskCache function. :)\nOk, I got it thanks\n. ",
    "shilei365": "I have the same problem, but only on simulator - Swift 3.2 and Xcode 9. If unchecking the option \"Thread sanitizer\" in the xcode settings, then it works well :). ",
    "sergeymild": "thanks. ",
    "volodymyrslipak": "I can't fix it \nI try to update  Kingfisher well and clean my project \nBut its not fix it\n. ",
    "luruke": "Thank you! Any ETA for the update of the pod spec for this?. ",
    "chapayGhub": "Ok\nIt wasn't clear for me\nThanks you for assist!. ",
    "khuong291": "Yes, it is different every time after I upload successfully new avatar, then I remove old one using your function removeImage then I use setImage. My view controller like this:\n------------------- (I'm Here)\nA        ->     B ->   EditProfile\n(change) (change) (no change). @bartando the same with me, I also use RxSwift.. I think we should close this issue, as this is not Kingfisher's issue.. ",
    "bartando": "Hi, I'm having similar problem. I'm using rxswift and in my onNext when I try to use setImage the first time, everything works. But once the object that I'm observing is updated, the image doesn't change. I have to use the .forceRefresh option to get it refreshed, then the image is displayed correctly... (thus I know I'm having different image everytime). . Hi, I'm sorry but I couldn't reproduce the bug in sample project. I've used everything the same way I do in my project but it worked completely fine. Not sure if you would be able to look at my project specifically. . @khuong291 don't think so... What else could cause the issue?. ",
    "wailaw": "Got this issue too. \nUse Kingfisher (3.13.1), RxCocoa (3.6.1), RxSwift (3.6.1).\nTry on iOS10.3.1 & iOS11.1.\nIt could be a threading issue but not sure.. In addition, there is an Swift Access Race issue in the below function in ImageDownloader.swift\nfunc clean(for url: URL) {\n        barrierQueue.sync(flags: .barrier) {\n            fetchLoads.removeValue(forKey: url)\n            return\n        }\n    }. @onevcat Sorry, it's my bad. In my case, this issue is not related to Kingfisher. \nThere is a 3rd-party blurView on top of my imageView. I didn't notice that the blurView is not transparent, and it takes snapshot of the views behind it to proceed the blur effect. \nThe blurView won't refresh itself when Kingfisher completed to set the image, so the old snapshot makes I think Kingfisher doesn't set the image. . ",
    "abdulKarim002": "@onevcat adding more information for \n\nSwift access race detected reported by @wailaw \n\nhttps://gist.github.com/abdulKarim002/1a0d91bf6218d659e0112ee6cf85a54e. OK Cool.. Thank @onevcat I thought the issue is open by seeing the @wailaw post. ",
    "rmnblm": "@onevcat \nI did but the methods are still incorrect, e.g. https://github.com/onevcat/Kingfisher/blob/4.0.1/Sources/Filter.swift#L74. ",
    "ndduong97": "Sorry, I am using Swift 4. Thanks I fixed it by changing the language to Swift 4 for Kingfisher.. ",
    "Ashok28": "Definitely, this should have acted just as basic implementation, which I used for one specific use case, wasn't sure, if it's going to get merged. I can further improve it.. You're right, there's no particular reason, to return nil. I've pushed updated version.. ",
    "ivanvranjic": "Actually, problem is in CoreImage's createCGImage function. It takes a long time on iOS 11 for some reason. I am closing this.. ",
    "DonBedard": "Hey onevcat, thanks for the reply.\nCurrently, the RetrieveImageDownloadTask is set to nil in the array as the task finishes. I thought this would be good enough to have the object deallocate. If this is incorrect, let me know.\nBelow is my downloadImage function.\n/// Downloads and caches the image.\nstatic func downloadImage(imageURL: String, sku: String, downloadGroup: DispatchGroup) -> RetrieveImageDownloadTask\n{\n    let identifier = \"\\(sku).png\"\n\n    // Kingfisher uses modifiers to add token strings to the header.\n    let modifier = AnyModifier { (request) in\n        var r = request\n        r.setValue(\"Bearer \\(ImageManager.getTokenString()!)\", forHTTPHeaderField: \"Authorization\")\n        return r\n    }\n\n    // Set the download time out. Set the max age for images (-1 means forever), and download the image.\n    ImageDownloader.default.downloadTimeout = 3000.0\n    ImageCache.default.maxCachePeriodInSecond = -1\n    ImageCache.default.maxMemoryCost = 1\n\n    return ImageDownloader.default.downloadImage(with: try! imageURL.asURL(), options: [.requestModifier(modifier)], completionHandler: { (image, error, cacheType, ImageURL) in\n\n        // If the image was retrieved, cache it.\n        if image != nil{\n            print(\"Image for sku: \\(sku) downloaded.\")\n            ImageCache.default.store(image!, forKey: identifier)\n        }\n\n        // If the task was cancelled (code: -999) then save the sku where the cancel was pressed.\n        if error?.code == -999 && !NetRequest.isCancelled{\n            NetRequest.isCancelled = true\n            ImageManager.setBookmark(sku: sku)\n        }\n\n        if error != nil{\n            print(\"downloadImage Error: \\(error)\")\n        }\n\n        // Increase the counter and leave the image download group.\n        MultiDownloadController.completedDownloadCounter += 1\n        downloadGroup.leave()\n    })!\n}\n\nThat's pretty well the extent of the job. If anything looks wrong, please let me know.\nThanks!. The returned value from downloadImage(imageURL:sku:downloadGroup:) was put into an array so if the cancel button was clicked, I could iterate through the array calling RetrieveImageDownloadTask.cancel for each one. \nHowever, in my attempt to free up memory, as each completion block finished I set the RetrieveImageDownloadTask to nil. \nFor example:\ndownloadTasks = [RetrieveImageDownloadTask1, RetrieveImageDownloadTask2, RetrieveImageDownloadTask3]\nThen the completion handler for RetrieveImageDownloadTask1 finishes. Now the array looks like:\ndownloadTasks = [nil, RetrieveImageDownloadTask2, RetrieveImageDownloadTask3]\nI'll try to put together a sample project when I can.\nThanks!. ",
    "oradyvan": "Hi @onevcat ,\nYou are absolutely right, removing the directory ~/Library/Caches/org.carthage.CarthageKit fixed this issue. Now, the command carthage update --platform iOS produces this output:\n*** Cloning Kingfisher\n*** Checking out Kingfisher at \"4.0.1\"\n*** xcodebuild output can be found in /var/folders/5j/w1h417ld0255b2dn_k0n143c0000gn/T/carthage-xcodebuild.3jeVIQ.log\n*** Building scheme \"Kingfisher\" in Kingfisher.xcworkspace\nThank you very much for your quick response, please consider this issue closed!. ",
    "3zcurdia": "temporal solution from stackoverflow, append this to your Podfile\n```ruby\npost_install do |installer|\n      installer.pods_project.targets.each do |target|\n          if target.name == 'Kingfisher'\n              target.build_configurations.each do |config|\n                  config.build_settings['SWIFT_VERSION'] = '3.2'\n              end\n          end\n      end\n  end\n``. Sorry I did not realized that my cocoapods was not updated and I thought3.13.1` and I did not check the closed issues/PR Thanks anyway. ",
    "ivangodfather": "how did u solve this?. ",
    "chashmeetsingh": "I used v3 of the pod.. ",
    "turkeyaa": "This error is in HandyJSON. Not here, I'm Sorry.... ",
    "ZackZheng2014": "@onevcat I don't know the key...Just know the URL.. ",
    "OstrichRunning": "ok. . ",
    "yigitcanyurtsever": "@onevcat Thanks for looking at it! I've updated the PR with some tests. \nBy the way, I didn't know that it was recommended to open a discussion first \u2013 sorry about that.. Hey @onevcat. \ud83d\udc4b Did you get a chance to look at this? Let me know if I can help.. ",
    "Baleen-Y": "\u597d\u7684\uff0c\u8c22\u55b5\u5927. ",
    "Reelevant": "This issue is not solved in current version 4.7.0. ",
    "doovers": "Doh! What a rookie error I can't believe I missed that! Thanks for the help.. ",
    "juanjoseluisgarcia": "In ca reproduce it with Swift 4!!!! Please reopen and fix!!!!!!!. @kimgysen what I did is to follow the instructions for manual installation. Swift package manager does not work. I am currently using it with no problems.. ",
    "kimgysen": "Uhm yes, I'm very interested in this library but it seems that I cannot build it with swift 4.0.3 for the reasons mentioned above. Not sure why this doesn't work though... . ",
    "maeji": "I have same issue build for macOS. I'm using 4.6.4 version. Please check this.. ",
    "freak4pc": "Sorry for bumping this but it seems that as of today this still doesn't build via SPM. (Either 4.0 or 4.1 toolchain)\n. Very cool. Was just looking into this for RxKingfisher and gave up on watchOS for it :) \nThanks @rdgborges !. ",
    "cp3hnu": "@onevcat  \u7ed9\u4e2a\u63d0\u9192\uff0cApp\u6ca1\u6709\u5b9e\u73b0Map\u529f\u80fdimport MapKit\u4f1a\u88abApple\u62d2\u7edd\u3002\u4e0d\u7ba1\u662f\u81ea\u5df1\u7684App\u5f15\u5165\u7684\u8fd8\u662f\u7b2c\u4e09\u65b9framework\u5f15\u5165\u7684\u3002\nGuideline 2.1 - Performance\nYour app links against the MapKit framework but does not appear to include Maps functionality.\nNext Steps\nIf your app does include Maps functionality, please respond to this message in Resolution Center with steps on how to locate it within your app.\nIf you do not intend to use Maps, please unlink the MapKit framework. If you would like to use Maps, please add the \"com.apple.developer.maps\" entitlement and submit an updated binary for review.\nResources\nFor information on Maps, please review the Location and Maps Programming Guide.\nIf you are using a third-party framework that links against the MapKit framework, you may want to contact the third-party framework provider for help on unlinking from it.. ",
    "Pocito": "Thank you for your quick reply @onevcat ! I have been trying to Dispatch other UI elements processing at the same time, but didn't succeed to fix it for now. I will keep trying and comment down here if I find why. . Thank you, I just tried exactly what you said with the new master branch and the updated code but I have the exact same lag.\nAs it's the heaviest task far from any other task on Instruments, I can't imagine that something else could be responsible of the lag.. I made some new tests, my bad .pngrepresentation is not used anymore most of the time and not showed on Instruments anymore, I have other stuffs that are still causing a lag, I have to improve my use of multithreading, but this is fixed, thanks \ud83d\udcaf . ",
    "actualfan": "Thank you for your response.\nI think there's a problem.\nIt always fail to download image.\nMy internet connection is good.\nThe other apps using SDWebImage works well.. https://s3-us-west-1.amazonaws.com/cutup-debug/2008/profile/o0t1j5ec.bho.jpeg. ",
    "antonioallen": "Interesting \ud83e\udd14. I'm encountering this issue as well. It loads some images and for others, this issue occurs. . ",
    "htjohn": "I'm encountering the same issue as well. Using Swift 4 . ",
    "florencelomojones": "I am facing the same issue as well. When the image is .jpeg extension it does not work\n. ",
    "sp0cket": "Same issue with me, Using Kingfisher 4.7.0. Interesting,When I commentimageView.kf.indicatorType = .activity, It's works well. ",
    "anwent": "Same issue with me,Using Kingfisher 4.7.0\nImage: http://rdtest.myhiott.com:8081/uploadImage/2018/04-17/img_1523929328770.png\nTask <AC6932EE-ACA2-41BE-BB38-AFF8B76F9920>.<1> finished with error - code: -1002. ",
    "GhaisB": "Same here, error code -999 with 4.10 !\nThe image displays itself when not using KingFisher \n. ",
    "ethansinjin": "Thanks for the quick response and the workaround!\nI like the idea of an imageModifier, especially since there are other properties on UIImage that can only be modified after being fetched from the cache. A few examples would be flipsForRightToLeftLayoutDirection and alignmentRectInsets.\nPlease let me know if you plan to start a PR; I'd be happy to start one if needed!. That's a fair point; I guess it is a bit over-architected. I'll rework it to be more like RequestModifier.\nA few thoughts:\n\nI still think we should include a RenderingModeImageModifier and FlipsForRightToLeftLayoutDirectionImageModifier because I'm pretty sure those are the most common reasons this class is needed.\nI think the return parameter should be Image instead of Image?, because at the point of execution of the ImageModifier, a valid Image is already required as a parameter. So, if the change isn't possible, couldn't the original image just be returned?. Alright, please let me know what you think of the changes! @onevcat . Thanks for merging!. \n",
    "saroar": "```\n    func getProfPic()  {\n        guard let url = PerfectLocalAuth.profileimage else {\n            ImageCache.default.retrieveImage(forKey: \"(PerfectLocalAuth.userid)\", options: nil) {\n                image, cacheType in\n            print(\"cacheType\", cacheType.cached)\n\n            if let image = image {\n                self.profileImage.image = image\n            } else {\n                self.profileImage.image = #imageLiteral(resourceName: \"avatar\")\n            }\n        }\n        return\n    }\n\n    let imageURL = ImageResource(downloadURL: URL(string: url)!, cacheKey: \"\\(PerfectLocalAuth.userid)\")\n\n\n    profileImage.kf.setImage(with: imageURL)\n\n}\n\n```\nHi there also try this way but does not work sad. ",
    "joninsky": "Thanks for the response @onevcat. It looks like your example would solve my problem. \nThe use case that drove my need to cache an image that does not have a remote URL comes from an offline first architecture where the user is allowed to upload photos.\nLets say the user is offline and they take or select a photo using the UIImagePickerController. I now have a chunk of data I need to cache until I am back online to upload the photo. I still want to be able to use Kingfisher to cache this photo (So it shows up in the UI while still using the kingfisher API). I also wan't kingfisher to realize it already has the photo after upload. The upload is done by my own code. Once it's available at the remote URL Kingfisher should be able to look at the URL and the Cache key and realize it already has this photo cached. \nSo I have two problems. First, my photo was not showing in the UI before the image was uploaded even though I had cached it in Kingfisher using a unique identifier. Second, after upload, Kingfisher could not recognize that I had the photo cached. It was then downloaded and cached again.\nFeel free to close this as it was more of a general question which is now answered.. ",
    "yemodin": "Also, I changed macOS version to 10.11 to successfully build and run.. @onevcat I changed only demo project target, not framework target. Next lines of macOS demo require 10.11+: \nhttps://github.com/onevcat/Kingfisher/blob/10ec0f22197789bb23d9b613ba312365a902f462/Demo/Kingfisher-macOS-Demo/ViewController.swift#L46\nhttps://github.com/onevcat/Kingfisher/blob/10ec0f22197789bb23d9b613ba312365a902f462/Demo/Kingfisher-macOS-Demo/ViewController.swift#L56. Also, I added the test to each image processor. And made the pull request for image assets:\nhttps://github.com/onevcat/Kingfisher-TestImages/pull/1. ",
    "chdzq": "only testSSL timeout\uff0cother all passed\u3002\nlike follow\uff1a\n\n. I only test Kingfisher for platform iOS and watchOS with CocoaPods. I built a Demo demonstration how to use it.\n Demo Project\nReference\nPodfile add:\n```\npost_install do |installer|\n    generate_kingfisher_frameworks_script installer\nend\ndef generate_kingfisher_frameworks_script (installer)\n    shell_script = <<-SP\nmkdir -p \"${BUILT_PRODUCTS_DIR}/CommonCrypto\"\ncat < \"${BUILT_PRODUCTS_DIR}/CommonCrypto/module.modulemap\"\nmodule CCommonCrypto [system] {\n    header \"${SDKROOT}/usr/include/CommonCrypto/CommonCrypto.h\"\n    export *\n}\nEOF\n    SP\nPod::UI.puts \"generate script for kingfisher frameworks\"\nproject = installer.pods_project\ninstaller.pods_project.targets.each do |target|\n    if /^Kingfisher*?/.match(\"#{target.name}\")\n        phase = target.new_shell_script_build_phase(\"[KF]CommonCrypto\")\n        phase.shell_script = shell_script\n        target.build_phases.unshift(phase).uniq! unless target.build_phases.first == phase\n        project.save()\n    end\nend\n\nend\n```. Commit 9520b2a \u7684\u662f\u4e4b\u524d\u7684\u5de5\u4f5c\u65b9\u5f0f\u3002\u540e\u9762\u7684\u662f\u6362\u4e00\u79cd\u589e\u52a0Build Phase\u811a\u672c\uff0c\u8fd9\u6837\u5c31\u4e0d\u4f1a\u5728Pods\u4e2d\u51fa\u73b0CommonCrypto\u6587\u4ef6\u5939\u4e86\u3002. yes, you are right. do that when we can keep user's Podfile clean without this post install script.\ni reset to commit 9520b2a.. also can test with  Demo Project by clear post_install work, then clean xcode and delete the work DerivedData .. \u6211\u611f\u89c9\u8fd9\u4e2a\u76f8\u5bf9\u597d\u70b9\u5904\u7406\u65b9\u5f0f\u662f\u548cOC\u6df7\u7f16\uff0c\u4e13\u95e8\u5904\u7406\u8fd9\u4e2aMD5. ",
    "Glianze": "I have already solved the problem. ",
    "noppefoxwolf": "@onevcat Thank you for your quick response!\nI understood your answer.. ",
    "yoshinorisano": "@onevcat \nThank you for your reply : )\nI see your point. This might be my fault...\nI'm not using any image processor.\nI'll recheck my code.. ",
    "Dmurph24": "I am having the exact same problem. I am using kingfisher within a table cell and not until the cell is pressed does it update the image to the correct content mode.. @onevcat yes, I will confirm with you soon. Definitely seems to be working in your example.. The problem had nothing to do with Kingfisher. Thanks for closing.\n. This doesn't solve the problem for me. The only way I can get it to auto layout the height properly is by adding the .forceRefresh option to setImage ... which defeats the whole purpose of using the cache. . ",
    "SURYAKANTSHARMA": "@onevcat  kindly, can you check please ?. import Kingfisher is previously there.\nissue get resolved ,It work perfecty fine now, I don't think it is your library issue because it is while i am upgrading xcode and swift version. But it look weired when autocomplete give suggestion while writing the code and get error on building the project.. ",
    "x1911": "sorry with the mistake, its used func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell\nand i found the way to solve the problem.\nsorry for disturb  . i use like this\n`   extension UIImageView {      \n func ZImgWithProgressAndCallback(_ url : String, completion:@escaping (UIImage?) ->Void) {\n    self.contentMode = UIViewContentMode.scaleAspectFill\n    self.kf.indicatorType = .activity\n    self.kf.setImage(with: URL(string: url),\n                     placeholder: nil,\n                     options: nil,\n\n        progressBlock: { receivedSize, totalSize in\n\n            let progressView = getPview() \n            let progress = Float(receivedSize) / Float(totalSize)\n            if ( progress < 1 ){  \n                progressView.setProgress(progress, animated: true)\n            }\n            else{\n                progressView.removeFromSuperview()\n            }\n\n        },\n        completionHandler: { (image, error, cacheType, imageUrl) in\n\n            if let _ = error{\n\n                AlertInfo(\"image not exist\", dismissTime: 2)\n                completion(nil)\n            }\n            print(\"image Size::\", image!.size, \"  cache type\uff1a\uff1a\", cacheType)\n            completion( image )\n        } //completionHandler:\n    )   //self.kf.setImage\n}  //func ZImgWithCallback\n\n}   `\nevery thing works fine with loading indicator\nbut \n\nGIF file only show once\n\nthe gif from cache type \"disk\" shows, from cache type \"memory\" show nothing\n. @onevcat  thank you for you reply, i found the problem with the lib hero\nhttps://github.com/lkzhao/Hero\nafter import the Hero lib, the Gif file shows only once,\nin the seconde time when i open the viewcontroller, which use hero\nthe gif file didn't show, only a blanc view. @Au12th0psav  got an answer from hero,\n\ntry using .useNoSnapshot on your kingfisher imageView\n\nbut it dosent work in my case.\nso here is my temporary solution:\nlet canUseHero = data?.type != \"gif\"\n        self.navigationController.isHeroEnabled = canUseHero\ndont use hero, when file type is gif.....  it looks so sad....\n. ",
    "krodak": "@ankish in the end I went with custom solution as there are few places that Kingfisher forces main queue (local cache access is one of them too...). ",
    "khanhshopback": "Can you describe more details when posting an issue?. ",
    "Au12th0psav": "@x1911 I have also encountered this problem, do you have a solution?. ",
    "nickgate": "This seems to be a general iOS issue. I can also reproduce it using AlamofireImage.\nHowever, there is a workaround. It works when you replace\nswift\ncell.imageView?.kf.setImage(with: url)\nwith\nswift\ncell.imageView?.kf.setImage(with: url, placeholder: nil, options: nil, progressBlock: nil, completionHandler: { (image, error, cacheType, URL) in\n    cell.setNeedsLayout()\n})\nBut still, isn't it supposed to work without this?. ",
    "tonyxu-io": "\nThis seems to be a general iOS issue. I can also reproduce it using AlamofireImage.\nHowever, there is a workaround. It works when you replace\nswift\ncell.imageView?.kf.setImage(with: url)\nwith\nswift\ncell.imageView?.kf.setImage(with: url, placeholder: nil, options: nil, progressBlock: nil, completionHandler: { (image, error, cacheType, URL) in\n    cell.setNeedsLayout()\n})\nBut still, isn't it supposed to work without this?\n\nThank you this solves my problem!. ",
    "imobdevtech": "@onevcat  here is the code snippet for this cell , \n\"Are you using any resizing or crop processor to shrink the downloaded images? \" - no we manage that functionality at server side\nif objChannel.channelImg.imgURL != nil\n        {\n            let strUrl = objChannel.channelImg.getImageUrl(withSize: CGSize.init(width: cell.imgPlayVideo.frame.height * 2.0, height: cell.imgPlayVideo.frame.height * 2.0))\n            if let url = URL(string: strUrl)\n            {\n                cell.imgvAdver.kf.setImage(with: url, placeholder: #imageLiteral(resourceName: \"icon-catch-feed-placeHolder\"), options: nil, progressBlock: nil, completionHandler: { (image, error, cacheType, url) in\n                    if image != nil\n                    {\n                        cell.imgvAdver.image = image\n                        cell.imgvAdver.contentMode = .scaleToFill\n                    }\n                })\n            }\n        }. @onevcat  okay got the problem it will be at this line         \nlet strUrl = objChannel.channelImg.getImageUrl(withSize: CGSize.init(width: cell.imgPlayVideo.frame.height * 2.0, height: cell.imgPlayVideo.frame.height * 2.0))\nThanks for supports. ",
    "tadija": "Hi @onevcat, thank you very much for your quick response.\nI think my problem is that UIImage by default doesn't preserve original metadata, so I'm using sort of a custom UIImage subclass which has a metadata property which I populate from my ImageWithMetadataCacheSerializer.\nI'll get back to you with more details on this issue that I'm experiencing as soon as I have some time to prepare a demo for it.. Hi again @onevcat ,\nI still didn't have time to make a proper demo, but at least I think I found a bug:\nIf I change if let image = image in this line with if let image = options.cacheSerializer.image(with: fetchedData, options: options) then my custom cache serializer is being called and metadata is preserved even when using ImagePrefetcher or KingfisherManager.retrieveImage directly, otherwise I think it works only when images are loaded from the disk cache again (which doesn't happen after download, until app relaunches).\nI could make a PR if this change sounds reasonable to you?. Hey @onevcat,\nyou're absolutely right, I somehow missed the fact that I need both custom CacheSerializer and ImageProcessor in order to preserve image metadata in all cases.\nThank you very much for your help on this!. ",
    "fanguohuiruan": "Currently! i change the implementation in UIImageView+Kingfisher\u3002 such as i create a new varies named failedPlaceholder  in  Kingfisher's extension, and change the method \"public func setImage(with resource: Resource?,\n                         placeholder: Placeholder? = nil,\n                         options: KingfisherOptionsInfo? = nil,\n                         progressBlock: DownloadProgressBlock? = nil,\n                         completionHandler: CompletionHandler? = nil) -> RetrieveImageTask\" to   ''setImage(with resource: Resource?,\n                     placeholder: Placeholder? = nil,\n                     failPlaceholder: Placeholder? = nil,\n                     options: KingfisherOptionsInfo? = nil,\n                     progressBlock: DownloadProgressBlock? = nil,\n                     completionHandler: CompletionHandler? = nil) -> RetrieveImageTask ', and change to content in this method! That is below:   guard let resource = resource else {\n        self.placeholder = nil\n        setWebURL(nil)\n        self.failedPlaceholder = failPlaceholder\n        completionHandler?(nil, nil, .none, nil)\n        return .empty\n    }\nvar options = KingfisherManager.shared.defaultOptions + (options ?? KingfisherEmptyOptionsInfo)\nlet noImageOrPlaceholderSet = base.image == nil && self.placeholder == nil\n\nif !options.keepCurrentImageWhileLoading || noImageOrPlaceholderSet { // Always set placeholder while there is no image/placehoer yet.\n    self.placeholder = placeholder\n}\n\nlet maybeIndicator = indicator\nmaybeIndicator?.startAnimatingView()\n\nsetWebURL(resource.downloadURL)\n\nif base.shouldPreloadAllAnimation() {\n    options.append(.preloadAllAnimationData)\n}\n\nlet task = KingfisherManager.shared.retrieveImage(\n    with: resource,\n    options: options,\n    progressBlock: { receivedSize, totalSize in\n        guard resource.downloadURL == self.webURL else {\n            return\n        }\n        if let progressBlock = progressBlock {\n            progressBlock(receivedSize, totalSize)\n        }\n},\n    completionHandler: {[weak base] image, error, cacheType, imageURL in\n        DispatchQueue.main.safeAsync {\n            maybeIndicator?.stopAnimatingView()\n            guard let strongBase = base, imageURL == self.webURL else {\n                self.failedPlaceholder = failPlaceholder\n                self.placeholder = nil\n                completionHandler?(image, error, cacheType, imageURL)\n                return\n            }\n\n            self.setImageTask(nil)\n            guard let image = image else {\n                self.placeholder = nil\n                self.failedPlaceholder = failPlaceholder\n                completionHandler?(nil, error, cacheType, imageURL)\n                return\n            }\n\n            guard let transitionItem = options.lastMatchIgnoringAssociatedValue(.transition(.none)),\n                case .transition(let transition) = transitionItem, ( options.forceTransition || cacheType == .none) else\n            {\n                self.placeholder = nil\n                self.failedPlaceholder = nil\n                strongBase.image = image\n                completionHandler?(image, error, cacheType, imageURL)\n                return\n            }\n\n            #if !os(macOS)\n                UIView.transition(with: strongBase, duration: 0.0, options: [],\n                                  animations: { maybeIndicator?.stopAnimatingView() },\n                                  completion: { _ in\n                                    self.failedPlaceholder = nil\n                                    self.placeholder = nil\n                                    UIView.transition(with: strongBase, duration: transition.duration,\n                                                      options: [transition.animationOptions, .allowUserInteraction],\n                                                      animations: {\n                                                        // Set image property in the animation.\n                                                        transition.animations?(strongBase, image)\n                                    },\n                                                      completion: { finished in\n                                                        transition.completion?(finished)\n                                                        completionHandler?(image, error, cacheType, imageURL)\n                                    })\n                })\n            #endif\n        }\n})\n\nsetImageTask(task)\n\nreturn task. @onevcat . @onevcat  can you explain the question from me!   https://github.com/onevcat/Kingfisher/issues/842.\n",
    "lillogoal": "Sorry i'm not dire that have understand. How do i have to do? Thanks. I too tryed to uncomment my else instructions but It didn't work.\nCan you suggest me?\nThanks. @fanguohuiruan sorry but this is my question. @onevcat hi, the problem isn't gruppo.getLastModified().\nBecause if i scroll ttableview sometimes It Will load correct Image in the correct position.\nMy Imageview is a circual Imageview... I used swityavatar maybe this problem ?.\nIf i uncomment else instruction problem persists. I understand the bug in library and i solved.\nIn my REquests i Use always the same url, but i change value in header (getPath and Cutkn).\nKingfisher check the url of queue request and don't execute the same or skip the same.\nYou haven't to check the URL but the request so too header and other value.\nLet me if you understand\n@onevcat . Yes i solved when i typed last message.\nIn my opinion this is a bug.\nWhay do you think?. ",
    "xushao1990": "This is my way\u3002Is there a better way?\n```\nprotocol PlaceholderOwnerType: Placeholder {\n    var image: UIImage? { get }\n}\nclass PlaceholderOwner: PlaceholderOwnerType {\nstatic let `default` = PlaceholderOwner(UIImage(named: \"logo\"))\n\nlet image: UIImage?\n\ninit(_ image: UIImage?) {\n    self.image = image\n}\n\nfunc add(to imageView: ImageView) {\n    imageView.image = image\n    imageView.contentMode = .center\n}\n\nfunc remove(from imageView: ImageView) {\n    imageView.image = nil\n    imageView.contentMode = .scaleAspectFill\n}\n\n}\n```\n. ",
    "hujunfeng": "Running into the same problem. Tried the above suggestions:\n\nThe custom Placeholder way. I couldn't get it work. Somehow remove(from:) is never called.\nSet content mode before and after setImage. It works, but the change of content mode at the end is noticeable. Not ideal.\n\nIn general, what I would like to achieve is, being able to set a different content mode for placeholder. Any other solution?. ",
    "dreampiggy": "For URLSession, you should register your custom URLProtocol class. See protocolclasses. ",
    "SebastianBoldt": "I solved this issue by swizzling URLSessions ephemeral property with my custom implementation.. ",
    "0xwangbo": "\u8fdb\u5c55\uff1f @onevcat . ",
    "CodeEagle": "Sorry, this is not the code that causing the problem. I'll report it later.. Hi @onevcat \nI've changed number of cells from 10 to 100.\nI add a token to log if animate is in current request token.\n```\n...\nself.token = self.token.addingReportingOverflow(1).partialValue\n        let task = KingfisherManager.shared.retrieveImage(\n...\n```\n```\nUIView.transition(with: strongBase, duration: transition.duration,\n                                                              options: [transition.animationOptions, .allowUserInteraction],\n                                                              animations: {\n                                                                if currnetToken != self.token {\n                                                                    print(\"not set image token change: old:(currnetToken), new:(self.token)\")\n                                                                    return\n                                                                }\n                                                                // Set image property in the animation.\n                                                                transition.animations?(strongBase, image)\n                                                              },\n                                                              completion: { finished in\n                                                                if currnetToken != self.token {\n                                                                    completionHandler?(nil, error, cacheType, imageURL)\n                                                                } else {\n                                                                    print(\"set image token change: old:(currnetToken), new:(self.token)\")\n                                                                    transition.completion?(finished)\n                                                                    completionHandler?(image, error, cacheType, imageURL)\n                                                                }\n                                                          })\n\n```\nApp logs here\nAs you can see below, not set image token change: old:37, new:51, some animate was called when the request token is changed.\n```\n5: 1936/22827\n6: 4692/82221\n7: 1933/96368\n7: 4692/96368\n6: 7451/82221\n7: 7451/96368\n7: 10210/96368\n7: 12969/96368\n11: Finished\n12: Finished\n13: Finished\n14: 15560/38142\n17: 23835/96368\n17: 26594/96368\n15: 10213/22827\n16: 21076/82221\n21: Finished\n22: Finished\n23: Finished\n31: Finished\n32: Finished\n33: Finished\n41: Finished\n42: Finished\n43: Finished\n6: 29353/82221\n46: 29353/82221\n44: 31944/38142\n7: 48326/96368\n37: 48326/96368\n47: 48326/96368\n51: Finished\n52: Finished\n53: Finished\n61: Finished\n63: Finished\n62: Finished\n71: Finished\n65: 22827/22827\n5: Finished\n15: Finished\n25: Finished\n35: Finished\n45: Finished\n55: Finished\n75: Finished\n72: Finished\n65: Finished\n73: Finished\n85: Finished\n81: Finished\n82: Finished\n83: Finished\n87: 64710/96368\n95: Finished\n91: Finished\n92: Finished\n93: Finished\n58: 4693/29717\n98: 4693/29717\n58: 7452/29717\n98: 7452/29717\n4: Finished\n14: Finished\n24: Finished\n34: Finished\n44: Finished\n54: Finished\n64: Finished\n74: Finished\n94: Finished\n7: 81094/96368\n37: 81094/96368\n47: 81094/96368\n57: 81094/96368\n67: 81094/96368\n97: 81094/96368\n58: 10211/29717\n98: 10211/29717\n7: 83853/96368\n37: 83853/96368\n47: 83853/96368\n57: 83853/96368\n67: 83853/96368\n97: 83853/96368\n96: 48326/82221\n7: 86612/96368\n37: 86612/96368\n47: 86612/96368\n57: 86612/96368\n67: 86612/96368\n97: 86612/96368\n7: 89371/96368\n37: 89371/96368\n47: 89371/96368\n57: 89371/96368\n67: 89371/96368\n97: 89371/96368\n58: 12970/29717\n98: 12970/29717\n98: 12970/29717\n99: 1935/84473\n58: 15559/29717\n98: 15559/29717\n98: 15559/29717\n99: 4694/84473\n58: 18318/29717\n98: 18318/29717\n98: 18318/29717\n94: Finished\n95: Finished\n81: Finished\n39: 7453/84473\n69: 7453/84473\n79: 7453/84473\n69: 7453/84473\n67: 96368/96368\n7: Finished\n17: Finished\n27: Finished\n37: Finished\n47: Finished\n57: Finished\n67: Finished\n77: Finished\n87: Finished\n97: Finished\n67: Finished\n57: Finished\n35: Finished\n37: Finished\n19: 10212/84473\n29: 10212/84473\n89: 10212/84473\n59: 10212/84473\n25: Finished\n27: Finished\n24: Finished\n17: Finished\n14: Finished\n15: Finished\n48: Finished\n49: Finished\n50: Finished\n41: Finished\n42: Finished\n43: Finished\n36: Finished\n30: Finished\n31: Finished\n32: Finished\n26: Finished\n28: Finished\n22: Finished\n23: Finished\n18: Finished\n19: Finished\n20: Finished\n21: Finished\n96: 64710/82221\n16: 64710/82221\n12: Finished\n13: Finished\n80: 1935/12340\n10: 1935/12340\n7: Finished\n11: Finished\n80: 4694/12340\n10: 4694/12340\n5: Finished\n8: 26595/29717\n4: Finished\n8: 29717/29717\n8: Finished\n18: Finished\n28: Finished\n38: Finished\n48: Finished\n58: Finished\n68: Finished\n78: Finished\n98: Finished\n98: Finished\n68: Finished\n58: Finished\nnot set image token change: old:21, new:22\n26: 81094/82221\n36: 81094/82221\n6: 81094/82221\n26: 82221/82221\n36: 82221/82221\n6: 82221/82221\n6: Finished\n16: Finished\n46: Finished\n56: Finished\n66: Finished\n86: Finished\n96: Finished\n96: Finished\nnot set image token change: old:35, new:51\nnot set image token change: old:37, new:51\n56: Finished\n16: Finished\n26: Finished\n36: Finished\n10: Finished\n20: Finished\n30: Finished\n40: Finished\n50: Finished\n60: Finished\n70: Finished\n90: Finished\n100: Finished\n80: Finished\n10: Finished\n8: Finished\nset image token change: old:51, new:51\n6: Finished\n9: Finished\n19: Finished\n29: Finished\n39: Finished\n49: Finished\n59: Finished\n69: Finished\n79: Finished\n89: Finished\n99: Finished\n79: Finished\n69: Finished\n59: Finished\n9: Finished\n3: 1936/36013\n2: 1935/26931\n1: 1934/32564\n1: 4693/32564\n2: 4694/26931\n1: 7452/32564\n3: 4695/36013\n3: 7454/36013\n2: 7453/26931\n1: 21077/32564\n3: 10213/36013\n1: 23836/32564\n2: 10212/26931\n3: 12972/36013\n1: 26595/32564\n1: 29354/32564\n3: 15561/36013\n1: 32564/32564\n2: 18319/26931\n2: 21078/26931\n2: 23837/26931\n2: 26931/26931\n3: 26597/36013\n3: 29356/36013\n3: 31945/36013\nset image token change: old:54, new:54\n1: Finished\n3: 34704/36013\n3: 36013/36013\nset image token change: old:29, new:29\n2: Finished\nset image token change: old:22, new:22\n3: Finished\n```\n. Network link Conditioner's config\n\n. ",
    "orschaef": "We have the exact same issue. Also Fabric reported us some crashes within Kingfisher. These two lines are the same:\n1  Kingfisher                     0x100b41848 specialized ImageDownloaderSessionHandler.callCompletionHandlerFailure(error:url:) (ImageDownloader.swift:525)\n2  Kingfisher                     0x100b42e58 specialized ImageDownloaderSessionHandler.urlSession(_:task:didCompleteWithError:) (ImageDownloader.swift:475)\nSo this does not seem to be an isolated/single case in one dedicated project.. ",
    "torip3ng": "I've also have a strange crash. Only on iOS 10.1.1.\ncom.easyshop.iphoneapp_issue_2_crash_bcf08c8c781a47f4aed2db521aa833c6_DNE_0_v2.txt\ncom.easyshop.iphoneapp_issue_3_crash_bf0944f957154f6987611719ddccce2e_DNE_0_v2.txt\n. ",
    "bank18651": "I've also have a crash only on iOS 11 from ImageDownloader and CacheSerializer.\nImageDownloader.swift line 457\nspecialized ImageDownloaderSessionHandler.urlSession(URLSession, dataTask : URLSessionDataTask, didReceive : Data) -> ()\nFatal Exception: NSMallocException\n0  CoreFoundation                 0x186207164 __exceptionPreprocess\n1  libobjc.A.dylib                0x185450528 objc_exception_throw\n2  Foundation                     0x186be1e58 _NSErrnoMessage\n3  CoreFoundation                 0x186165790 __CFSafelyReallocate\n4  Foundation                     0x186b193d4 _NSMutableDataGrowBytes\n5  Foundation                     0x186b19200 -[NSConcreteMutableData appendBytes:length:]\n6  Foundation                     0x186d4b7d4 __49-[_NSDispatchData enumerateByteRangesUsingBlock:]_block_invoke\n7  libdispatch.dylib              0x185bdf364 _dispatch_data_apply\n8  Foundation                     0x186d4b79c -[_NSDispatchData enumerateByteRangesUsingBlock:]\n9  Foundation                     0x186b19068 -[NSConcreteMutableData appendData:]\n10 Kingfisher                     0x10382b7d8 specialized ImageDownloaderSessionHandler.urlSession(URLSession, dataTask : URLSessionDataTask, didReceive : Data) -> () (ImageDownloader.swift:457)\n11 Kingfisher                     0x1038248f8 @objc ImageDownloaderSessionHandler.urlSession(URLSession, dataTask : URLSessionDataTask, didReceive : Data) -> () (ImageDownloader.swift)\n12 Pomelo                         0x102e8f678 -[NRURLSessionTaskDelegateBase URLSession:dataTask:didReceiveData:] (NRMAURLSessionTaskDelegateBase.m:63)\n13 CFNetwork                      0x186943970 __67-[NSURLSession delegate_dataTask:didReceiveData:completionHandler:]_block_invoke.264\n14 Foundation                     0x186bddba0 __NSBLOCKOPERATION_IS_CALLING_OUT_TO_A_BLOCK__\n15 Foundation                     0x186b1d894 -[NSBlockOperation main]\n16 Foundation                     0x186b0d4c4 -[__NSOperationInternal _start:]\n17 libdispatch.dylib              0x185b86a14 _dispatch_client_callout\n18 libdispatch.dylib              0x185bc29c4 _dispatch_block_invoke_direct$VARIANT$armv81\n19 libdispatch.dylib              0x185b86a14 _dispatch_client_callout\n20 libdispatch.dylib              0x185bc29c4 _dispatch_block_invoke_direct$VARIANT$armv81\n21 libdispatch.dylib              0x185bc2878 dispatch_block_perform$VARIANT$armv81\n22 Foundation                     0x186bdf878 __NSOQSchedule_f\n23 libdispatch.dylib              0x185b86a14 _dispatch_client_callout\n24 libdispatch.dylib              0x185bc7c80 _dispatch_main_queue_callback_4CF$VARIANT$armv81\n25 CoreFoundation                 0x1861af344 __CFRUNLOOP_IS_SERVICING_THE_MAIN_DISPATCH_QUEUE__\n26 CoreFoundation                 0x1861acf20 __CFRunLoopRun\n27 CoreFoundation                 0x1860ccc58 CFRunLoopRunSpecific\n28 GraphicsServices               0x187f78f84 GSEventRunModal\n29 UIKit                          0x18f8255c4 UIApplicationMain\n30 Pomelo                         0x1028f6b5c main (PMLCategoryDetailsTableViewCell.swift:20)\n31 libdyld.dylib                  0x185bec56c start\nImageDownloader.swift line 551\nImageDownloaderSessionHandler.(processImage(for : URLSessionTask, url : URL) -> ()).(closure #1)\nFatal Exception: NSInvalidArgumentException\n0  CoreFoundation                 0x1837ab164 __exceptionPreprocess\n1  libobjc.A.dylib                0x1829f4528 objc_exception_throw\n2  CoreFoundation                 0x1837ab0ac -[NSException initWithCoder:]\n3  Foundation                     0x18410c4d0 NSAllocateMemoryPages\n4  Foundation                     0x1840e3b8c _NSDataCreateVMDispatchData\n5  Foundation                     0x1840af590 -[_NSPlaceholderData initWithBytes:length:copy:deallocator:]\n6  libswiftFoundation.dylib       0x1021185cc (Missing)\n7  libswiftFoundation.dylib       0x10205c7ac (Missing)\n8  Kingfisher                     0x101880db0 ImageDownloaderSessionHandler.(processImage(for : URLSessionTask, url : URL) -> ()).(closure #1) (ImageDownloader.swift:551)\n9  Kingfisher                     0x101871aec _T0Ieg_IeyB_TR (ImageCache.swift)\n10 libdispatch.dylib              0x18312aa54 _dispatch_call_block_and_release\n11 libdispatch.dylib              0x18312aa14 _dispatch_client_callout\n12 libdispatch.dylib              0x183132f08 _dispatch_continuation_pop$VARIANT$mp\n13 libdispatch.dylib              0x18313180c _dispatch_async_redirect_invoke$VARIANT$mp\n14 libdispatch.dylib              0x183137cf4 _dispatch_root_queue_drain\n15 libdispatch.dylib              0x183137a38 _dispatch_worker_thread3\n16 libsystem_pthread.dylib        0x1833d306c _pthread_wqthread\n17 libsystem_pthread.dylib        0x1833d2b6c start_wqthread\nCacheSerializer.swift line 197\nDefaultCacheSerializerdataData?UIImagewith first-element-marker UIImage\nFatal Exception: NSMallocException\n0  CoreFoundation                 0x18132ed8c __exceptionPreprocess\n1  libobjc.A.dylib                0x1804e85ec objc_exception_throw\n2  Foundation                     0x181d5ad7c _NSErrnoMessage\n3  CoreFoundation                 0x18128dfd8 __CFSafelyReallocate\n4  Foundation                     0x181cc1b18 _NSMutableDataGrowBytes\n5  Foundation                     0x181c8574c -[NSConcreteMutableData appendBytes:length:]\n6  ImageIO                        0x1833fcd70 IIOImageWriteSession::putBytes(void const*, unsigned long)\n7  ImageIO                        0x1833d0e4c iioWriteCallback(void*, int, void*)\n8  AppleJPEG                      0x183350298 aj_ostream_write\n9  AppleJPEG                      0x183372188 aj_block_encode_ac\n10 AppleJPEG                      0x1833421d0 aj_encode_buffers_baseline\n11 AppleJPEG                      0x183342618 aj_encode_row\n12 AppleJPEG                      0x1833738f0 applejpeg_encode_image_row\n13 ImageIO                        0x183530b8c AppleJPEGWritePlugin::writeOne(IIOImagePixelDataProvider*, IIODictionary*, IIODictionary*, unsigned int)\n14 ImageIO                        0x183531b14 IIO_Writer_AppleJPEG::write(void*, void*)\n15 ImageIO                        0x1834b9f48 IIOImageDestination::finalize()\n16 UIKit                          0x18b318500 _UIImageJPEGRepresentation\n17 Kingfisher                     0x1017c4990 DefaultCacheSerializerdataData?UIImagewith first-element-marker UIImage (CacheSerializer.swift:197)\n18 Kingfisher                     0x1017c46fc DefaultCacheSerializerKingfisherCacheSerializer (CacheSerializer.swift)\n19 Kingfisher                     0x1017ce524 ImageCache.(store(UIImage, original : Data?, forKey : String, processorIdentifier : String, cacheSerializer : CacheSerializer, toDisk : Bool, completionHandler : () -> ()?) -> ()).(closure #1) (ImageCache.swift:214)\n20 Kingfisher                     0x1017da904 partial apply for ImageCache.(store(UIImage, original : Data?, forKey : String, processorIdentifier : String, cacheSerializer : CacheSerializer, toDisk : Bool, completionHandler : () -> ()?) -> ()).(closure #1) (ImageCache.swift)\n21 Kingfisher                     0x1017cdaec _T0Ieg_IeyB_TR (ImageCache.swift)\n22 libdispatch.dylib              0x180c20b24 _dispatch_call_block_and_release\n23 libdispatch.dylib              0x180c20ae4 _dispatch_client_callout\n24 libdispatch.dylib              0x180c5f1b4 _dispatch_queue_serial_drain$VARIANT$armv81\n25 libdispatch.dylib              0x180c5fad8 _dispatch_queue_invoke$VARIANT$armv81\n26 libdispatch.dylib              0x180c6047c _dispatch_root_queue_drain_deferred_wlh$VARIANT$armv81\n27 libdispatch.dylib              0x180c6844c _dispatch_workloop_worker_thread$VARIANT$armv81\n28 libsystem_pthread.dylib        0x180f53e70 _pthread_wqthread\n29 libsystem_pthread.dylib        0x180f53b08 start_wqthread. ",
    "gmogames": "I just wanted to say we're also getting crashes like the ones reported here, at:\nImageDownloader.swift line 486\nspecialized ImageDownloaderSessionHandler.urlSession(_:dataTask:didReceive:)\nFatal Exception: NSMallocException\nFailed to grow buffer\nFatal Exception: NSMallocException\n0  CoreFoundation                 0x186023164 __exceptionPreprocess\n1  libobjc.A.dylib                0x18526c528 objc_exception_throw\n2  Foundation                     0x1869fde58 _NSErrnoMessage\n3  CoreFoundation                 0x185f81790 __CFSafelyReallocate\n4  Foundation                     0x1869353d4 _NSMutableDataGrowBytes\n5  Foundation                     0x186935200 -[NSConcreteMutableData appendBytes:length:]\n6  Foundation                     0x186b677d4 __49-[_NSDispatchData enumerateByteRangesUsingBlock:]_block_invoke\n7  Foundation                     0x186b6779c -[_NSDispatchData enumerateByteRangesUsingBlock:]\n8  Foundation                     0x186935068 -[NSConcreteMutableData appendData:]\n9  Kingfisher                     0x106da8b68 specialized ImageDownloaderSessionHandler.urlSession(_:dataTask:didReceive:) (ImageDownloader.swift:486)\n10 Kingfisher                     0x106d9fb24 @objc ImageDownloaderSessionHandler.urlSession(_:dataTask:didReceive:) (ImageDownloader.swift)\n11 CFNetwork                      0x18675f970 __67-[NSURLSession delegate_dataTask:didReceiveData:completionHandler:]_block_invoke.264\n12 Foundation                     0x1869f9ba0 __NSBLOCKOPERATION_IS_CALLING_OUT_TO_A_BLOCK__\n13 Foundation                     0x186939894 -[NSBlockOperation main]\n14 Foundation                     0x1869294c4 -[__NSOperationInternal _start:]\n15 libdispatch.dylib              0x1859a2a14 _dispatch_client_callout\n16 libdispatch.dylib              0x1859de9c4 _dispatch_block_invoke_direct$VARIANT$armv81\n17 libdispatch.dylib              0x1859a2a14 _dispatch_client_callout\n18 libdispatch.dylib              0x1859de9c4 _dispatch_block_invoke_direct$VARIANT$armv81\n19 libdispatch.dylib              0x1859de878 dispatch_block_perform$VARIANT$armv81\n20 Foundation                     0x1869fb878 __NSOQSchedule_f\n21 libdispatch.dylib              0x1859a2a14 _dispatch_client_callout\n22 libdispatch.dylib              0x1859e3c80 _dispatch_main_queue_callback_4CF$VARIANT$armv81\n23 CoreFoundation                 0x185fcb344 __CFRUNLOOP_IS_SERVICING_THE_MAIN_DISPATCH_QUEUE__\n24 CoreFoundation                 0x185fc8f20 __CFRunLoopRun\n25 CoreFoundation                 0x185ee8c58 CFRunLoopRunSpecific\n26 GraphicsServices               0x187d94f84 GSEventRunModal\n27 UIKit                          0x18f6415c4 UIApplicationMain\n28 Holonis                        0x104071130 main (AppDelegate.swift:25)\n29 libdyld.dylib                  0x185a0856c start\nWhich could possible be an Out of Memory problem. And we are having about 4% of our user base have OOM sessions.. @worthbak Any chance you could share the updates you did to include the new downsampling suggestions from Apple into Kingfisher? Starting that process now on my project and would be awesome to see what has been done before.. ",
    "iranjith4": "We got this issue reported by Fabric couple of times. Any solution to avoid this ? or Need to be fixed in Kingfisher ?. ",
    "abiaad": "Same for me. ",
    "kapoorsahil": "Same for me.\n```\n1  Kingfisher        0x101ff87f8 specialized ImageDownloaderSessionHandler.callCompletionHandlerFailure(error : Error, url : URL) -> () (ImageDownloader.swift:578)\n2  Kingfisher        0x101ff9b4c specialized ImageDownloaderSessionHandler.urlSession(URLSession, task : URLSessionTask, didCompleteWithError : Error?) -> () (ImageDownloader.swift:528)\n3  Kingfisher        0x101ff2268 @objc ImageDownloaderSessionHandler.urlSession(URLSession, task : URLSessionTask, didCompleteWithError : Error?) -> () (ImageDownloader.swift)\n```. ",
    "Froelund": "We have this same issue. Also Reported on Fabric\nCrashed: com.apple.main-thread\n0  libdispatch.dylib              0x182629788 _os_object_retain$VARIANT$armv81 + 64\n1  Kingfisher                     0x1055b4194 specialized ImageDownloaderSessionHandler.callCompletionHandlerFailure(error:url:) (ImageDownloader.swift:525)\n2  Kingfisher                     0x1055b5344 specialized ImageDownloaderSessionHandler.urlSession(_:task:didCompleteWithError:) (ImageDownloader.swift:475)\n3  Kingfisher                     0x1055adf68 @objc ImageDownloaderSessionHandler.urlSession(_:task:didCompleteWithError:) (ImageDownloader.swift)\n4  CFNetwork                      0x18345b990 __51-[NSURLSession delegate_task:didCompleteWithError:]_block_invoke.207 + 76\n5  Foundation                     0x18372ee88 __NSBLOCKOPERATION_IS_CALLING_OUT_TO_A_BLOCK__ + 16\n6  Foundation                     0x1836708d0 -[NSBlockOperation main] + 72\n7  Foundation                     0x18366fcac -[__NSOperationInternal _start:] + 848\n8  libdispatch.dylib              0x1825f8a60 _dispatch_client_callout + 16\n9  libdispatch.dylib              0x182634b2c _dispatch_block_invoke_direct$VARIANT$armv81 + 216\n10 libdispatch.dylib              0x1825f8a60 _dispatch_client_callout + 16\n11 libdispatch.dylib              0x182634b2c _dispatch_block_invoke_direct$VARIANT$armv81 + 216\n12 libdispatch.dylib              0x182634a20 dispatch_block_perform$VARIANT$armv81 + 104\n13 Foundation                     0x183730750 __NSOQSchedule_f + 376\n14 libdispatch.dylib              0x1825f8a60 _dispatch_client_callout + 16\n15 libdispatch.dylib              0x182639d80 _dispatch_main_queue_callback_4CF$VARIANT$armv81 + 964\n16 CoreFoundation                 0x182caf070 __CFRUNLOOP_IS_SERVICING_THE_MAIN_DISPATCH_QUEUE__ + 12\n17 CoreFoundation                 0x182cacbc8 __CFRunLoopRun + 2272\n18 CoreFoundation                 0x182bccda8 CFRunLoopRunSpecific + 552\n19 GraphicsServices               0x184bb1020 GSEventRunModal + 100\n20 UIKit                          0x18cbe9758 UIApplicationMain + 236\n21 AppName                       0x10417ac38 main (AppDelegate.swift:14)\n22 libdyld.dylib                  0x18265dfc0 start + 4. ",
    "mouness2020": "same \nFatal Exception: NSMallocException\n0  CoreFoundation                 0x184026d8c exceptionPreprocess\n1  libobjc.A.dylib                0x1831e05ec objc_exception_throw\n2  Foundation                     0x184a52d7c _NSErrnoMessage\n3  CoreFoundation                 0x183f85fd8 __CFSafelyReallocate\n4  Foundation                     0x1849b9b18 _NSMutableDataGrowBytes\n5  Foundation                     0x18497d74c -[NSConcreteMutableData appendBytes:length:]\n6  Foundation                     0x184bac5cc __49-[_NSDispatchData enumerateByteRangesUsingBlock:]_block_invoke\n7  libdispatch.dylib              0x18397130c _dispatch_data_apply\n8  Foundation                     0x184bac594 -[_NSDispatchData enumerateByteRangesUsingBlock:]\n9  Foundation                     0x18499cc60 -[NSConcreteMutableData appendData:]\n10 Kingfisher                     0x103c014dc specialized ImageDownloaderSessionHandler.urlSession(URLSession, dataTask : URLSessionDataTask, didReceive : Data) -> () (ImageDownloader.swift:506)\n11 Kingfisher                     0x103bfa1bc @objc ImageDownloaderSessionHandler.urlSession(URLSession, dataTask : URLSessionDataTask, didReceive : Data) -> () (ImageDownloader.swift)\n12 CFNetwork                      0x18477c92c __67-[NSURLSession delegate_dataTask:didReceiveData:completionHandler:]_block_invoke.264\n13 Foundation                     0x184a4ee88 __NSBLOCKOPERATION_IS_CALLING_OUT_TO_A_BLOCK\n14 Foundation                     0x1849908d0 -[NSBlockOperation main]\n15 Foundation                     0x18498fcac -[NSOperationInternal _start:]\n16 libdispatch.dylib              0x183918a60 _dispatch_client_callout\n17 libdispatch.dylib              0x183954b2c _dispatch_block_invoke_direct$VARIANT$armv81\n18 libdispatch.dylib              0x183918a60 _dispatch_client_callout\n19 libdispatch.dylib              0x183954b2c _dispatch_block_invoke_direct$VARIANT$armv81\n20 libdispatch.dylib              0x183954a20 dispatch_block_perform$VARIANT$armv81\n21 Foundation                     0x184a50750 __NSOQSchedule_f\n22 libdispatch.dylib              0x183918a60 _dispatch_client_callout\n23 libdispatch.dylib              0x183959d80 _dispatch_main_queue_callback_4CF$VARIANT$armv81\n24 CoreFoundation                 0x183fcf070 __CFRUNLOOP_IS_SERVICING_THE_MAIN_DISPATCH_QUEUE\n25 CoreFoundation                 0x183fccbc8 __CFRunLoopRun\n26 CoreFoundation                 0x183eecda8 CFRunLoopRunSpecific\n27 GraphicsServices               0x185ed1020 GSEventRunModal\n28 UIKit                          0x18df09758 UIApplicationMain\n29 syarahswift                    0x1025d6854 main (AppDelegate.swift:47)\n30 libdyld.dylib                  0x18397dfc0 start\n. ",
    "aksswami": "Having the same issue. \nFatal Exception: NSMallocException\n0  CoreFoundation                 0x1e2a2fef8 __exceptionPreprocess\n1  libobjc.A.dylib                0x1e1bfda40 objc_exception_throw\n2  Foundation                     0x1e34c178c _NSInitializePlatform\n3  CoreFoundation                 0x1e29621e8 __CFReallocationFailed\n4  CoreFoundation                 0x1e2962188 __CFSafelyReallocate\n5  Foundation                     0x1e34769f0 _NSMutableDataGrowBytes\n6  Foundation                     0x1e33bec7c -[NSConcreteMutableData appendBytes:length:]\n7  Foundation                     0x1e360a80c __49-[_NSDispatchData enumerateByteRangesUsingBlock:]_block_invoke\n8  Foundation                     0x1e340ec28 -[_NSDispatchData enumerateByteRangesUsingBlock:]\n9  Foundation                     0x1e3415340 -[NSConcreteMutableData appendData:]\n10 Kingfisher                     0x1033fc464 $S10Kingfisher29ImageDownloaderSessionHandlerC03urlD0_8dataTask10didReceiveySo12NSURLSessionC_So0k4DataH0C10Foundation0L0VtFTf4dnnn_n (ImageDownloader.swift:522)\n11 Kingfisher                     0x1033f55f4 $S10Kingfisher29ImageDownloaderSessionHandlerC03urlD0_8dataTask10didReceiveySo12NSURLSessionC_So0k4DataH0C10Foundation0L0VtFTo (<compiler-generated>)\n12 CFNetwork                      0x1e31c7928 __67-[NSURLSession delegate_dataTask:didReceiveData:completionHandler:]_block_invoke.303\n13 Foundation                     0x1e34bbb6c __NSBLOCKOPERATION_IS_CALLING_OUT_TO_A_BLOCK__\n14 Foundation                     0x1e33c3cc8 -[NSBlockOperation main]\n15 Foundation                     0x1e33c319c -[__NSOperationInternal _start:]\n16 Foundation                     0x1e34bda40 __NSOQSchedule_f\n17 libdispatch.dylib              0x1e24151e0 _dispatch_block_async_invoke2\n18 libdispatch.dylib              0x1e2468484 _dispatch_client_callout\n19 libdispatch.dylib              0x1e24149ec _dispatch_main_queue_callback_4CF$VARIANT$mp\n20 CoreFoundation                 0x1e29be1bc __CFRUNLOOP_IS_SERVICING_THE_MAIN_DISPATCH_QUEUE__\n21 CoreFoundation                 0x1e29b9084 __CFRunLoopRun\n22 CoreFoundation                 0x1e29b85b8 CFRunLoopRunSpecific\n23 GraphicsServices               0x1e4c2c584 GSEventRunModal\n24 UIKitCore                      0x20f5b0bc8 UIApplicationMain\n25 XXXXXX                         0x102999ff4 main (UIFont+Extension.swift:14)\n26 libdyld.dylib                  0x1e2478b94 start. Thanks for quick response.\nBut I was able to build other dependencies just fine. Only Kingfisher is failing. And I have already reported the issue with carthage, waiting for their comment. \nhttps://github.com/Carthage/Carthage/issues/2405. I am also facing this issue after migrating to 5.0. As a workaround for now, I have switched to main thread in completion handler.\nBtw @onevcat thanks for the v5, It improved a lot of things and resolved couple of pressing issues.. ",
    "jyyjkt": "let path = Bundle.main.path(forResource: \"2\", ofType: \"gif\")\n        let image  = Image(contentsOfFile: path!);\n        let animatedImageView : AnimatedImageView = AnimatedImageView.init(image: image);\n        self.view.addSubview(animatedImageView);\n        animatedImageView.frame = CGRect(x: (UIScreen.main.bounds.size.width - 100)/2, y: 400, width: 100, height: 100);\n        animatedImageView.backgroundColor = UIColor.blue;\n        animatedImageView.delegate = self;\n        animatedImageView.autoPlayAnimatedImage = true;\n        animatedImageView.framePreloadCount = 10;\n        animatedImageView.runLoopMode = RunLoopMode.commonModes;\n        animatedImageView.repeatCount = .finite(count: 1);. \u6211\u4f20\u5165\u4e00\u4e2aGIF,kf.setImage\u65f6\u5019\u6ca1\u6cd5\u64ad\u653e,\u6b63\u5e38\u5199\u6210animatateImageView.image = image,gif\u4e0d\u4f1a\u64ad\u653e\u4e14\u4e0d\u8c03\u7528\u4ee3\u7406,\u65e0\u6cd5\u63a7\u5236GIF\u64ad\u653e\u51e0\u6b21,\u53d1\u73b0\u95ee\u9898\u51fa\u5728AnimatedImageView.swift\u6587\u4ef6\u4e2d,imageSource = image?.kf.imageSource?.imageRef \u7684imageRef\u4e00\u76f4\u662fnil,\u6240\u4ee5\u4e0d\u4f1a\u8d70:\nanimator = Animator(imageSource: imageSource,\n                                contentMode: contentMode,\n                                size: bounds.size,\n                                framePreloadCount: framePreloadCount,\n                                repeatCount: repeatCount)\n            animator?.delegate = self\n            animator?.needsPrescaling = needsPrescaling\n            animator?.prepareFramesAsynchronously()\n\u6211\u5c31\u65e0\u6cd5\u83b7\u53d6\u4ee3\u7406\u5b9e\u73b0.\n\u60f3\u8981\u5c1d\u8bd5\u52a0\u5165ImageSource,\n\u4f46.kf.imageSource\u662f\u4e2afileprivate(set) var imageSource: ImageSource? { },\u53ea\u80fd\u6587\u4ef6\u5185\u4f7f\u7528.\n\u6211\u65e0\u6cd5\u81ea\u5df1\u7ed9\u8fd9\u4e2a\u5c5e\u6027\u8d4b\u503c.. \u597d\u7684\u660e\u767d\u4e86 \u8c22\u8c22\u55b5\u795e. ",
    "DhruvTekchandani": "Sorry, let me try to explain myself better.\nSo right now, I am downloading images from firebase. \nThe first time you run the app it detects that no images have beem cached, so it downloads the images from firebase and then caches them.\nThe problem arises when I add a new image into the firebase database.\nRather than downloading the new image (cause the key for this new image should not exist in cache as it was not there the first time.) it just retrieves the old images from the cache. \nI am using isImageCached to check if they have been cached or not. But even if  a new image has been added and the key does not exist. \nThe isImageCached return true.\nHope that explaination was good enough.\nThank you.. The images are added like this, with each being different with their names\nDelishMenu1, DelishMenu2\nImage 1: \"https://firebasestorage.googleapis.com/v0/b/foodoncampus-1f07c.appspot.com/o/RestaurantMenus%2FDelish%2FDelishMenu1.jpg?alt=media&token=5b5b330c-1093-4de9-b0b2-1a7c44ebabb3\"\nNew Image added: https://firebasestorage.googleapis.com/v0/b/foodoncampus-1f07c.appspot.com/o/RestaurantMenus%2FDelish%2FDelishMenu10.jpg?alt=media&token=41bdd206-909e-47f8-b86b-d0cb155d33bc\nSo as you can see the urls are different.\nTherefore I am a bit confused on how to solve this.\nThank you.\n. @onevcat when you say cacheKey do you mean the hashValue?\nBut if not then:\nprint(ImageCache.default.cachePath(forKey: DataSnapshot.value as! String)\nprint -> disks\nand I print the hash value for each\nThey all are different. (When the new image has been added, it shows a new hash value when printed but some reason doesnt re-download them)\n`Database.database().reference().child(\"RestaurantMenu\").child(restaurantChosen).observe(.childAdded, with: { (DataSnapshot) in\n        // if the images has been cached then retrieve them from disk \n        if ImageCache.default.imageCachedType(forKey: DataSnapshot.value as! String).cached {\n            print(ImageCache.default.hash(forKey:  DataSnapshot.value as! String)\n            ImageCache.default.retrieveImage(forKey: DataSnapshot.value as! String, options: nil, completionHandler: { (image, cacheType) in\n                self.pageControl.numberOfPages = self.count\n                self.count = self.count + 1\n                if let downloadedImage = image{\n                    self.imageDownloadedCount = self.imageDownloadedCount + 1\n                    self.images.append(downloadedImage)\n                    self.imageScrollView.display(image: self.images[self.index])\n                    if self.imageDownloadedCount >= 1 {\n                        self.swipeLeft?.isEnabled = true\n                        SVProgressHUD.dismiss()\n                    }\n                }\n            })\n        }else{\n           // if a new image has been downloaded then remove them all from cache and re-download the images\n            print(\"images are not the same are being downloaded\")\n            ImageCache.default.removeImage(forKey: DataSnapshot.value as! String)\n            self.download(key: DataSnapshot.value as! String)\n        }\n    }, withCancel: nil)\n\n}`\nBtw thank you for taking the time to help me out. . Hey @onevcat , Sorry for the late reply.\nSo I printed the url just before ImageCache.default.retrieveImage and this is the value I got:\n\nhttps://firebasestorage.googleapis.com/v0/b/foodoncampus-     1f07c.appspot.com/o/RestaurantMenus%2FDelish%2FDelishMenu1.jpg?alt=media&token=5b5b330c-1093-4de9-b0b2-1a7c44ebabb3\nhttps://firebasestorage.googleapis.com/v0/b/foodoncampus-1f07c.appspot.com/o/RestaurantMenus%2FDelish%2FDelishMenu2.jpg?alt=media&token=6fd4e7b1-9e46-46b1-a778-530b24a1b6c2\nhttps://firebasestorage.googleapis.com/v0/b/foodoncampus-1f07c.appspot.com/o/RestaurantMenus%2FDelish%2FDelishMenu3.jpg?alt=media&token=d9ff2234-0387-4850-bd21-efbac21bf4f9\nhttps://firebasestorage.googleapis.com/v0/b/foodoncampus-1f07c.appspot.com/o/RestaurantMenus%2FDelish%2FDelishMenu4.jpg?alt=media&token=3ce75aae-d8b3-4e14-b0cd-0ca3d7f01d24\nhttps://firebasestorage.googleapis.com/v0/b/foodoncampus-1f07c.appspot.com/o/RestaurantMenus%2FDelish%2FDelishMenu5.jpg?alt=media&token=a396def7-a49c-477a-b0c0-2f2aabab3f27\nhttps://firebasestorage.googleapis.com/v0/b/foodoncampus-1f07c.appspot.com/o/RestaurantMenus%2FDelish%2FDelishMenu6.jpg?alt=media&token=6c401519-4f35-4f6c-9216-7a1db22159e8\nhttps://firebasestorage.googleapis.com/v0/b/foodoncampus-1f07c.appspot.com/o/RestaurantMenus%2FDelish%2FDelishMenu7.jpg?alt=media&token=8128be79-831d-4b23-a32f-4572fe46e469\nhttps://firebasestorage.googleapis.com/v0/b/foodoncampus-1f07c.appspot.com/o/RestaurantMenus%2FDelish%2FDelishMenu8.jpg?alt=media&token=3ce1f15a-c15e-4880-bffa-1af44107e2cb\nhttps://firebasestorage.googleapis.com/v0/b/foodoncampus-1f07c.appspot.com/o/RestaurantMenus%2FDelish%2FDelishMenu9.jpg?alt=media&token=c69e5381-9da6-447d-92b8-a0adfa2cddc4\n\nAs you can see all the strings have different values.. @onevcat, I firgured out my mistake. \nInstead of using Datasnapshot.value, I used DataSnapshot.key and it worked perfectly. \nI read through your comments above and it kinda hit me that I was not using the right key value to store the images.\nThanks alot for clearing my doubts and helping me out.\nI highly appreciate it!\nI'll be closing this thread. . ",
    "Lee827": "Check List\nThanks for considering to open an issue. Before you submit your issue, please confirm these boxes are checked.\nI have read the wiki page and cheat sheet, but there is no information I need.\n I have searched in existing issues, but did not find a same one.\n I want to reoprt a problem instead of asking a question. It'd better to use kingfisher tag in Stack Overflow to ask a question.. Sorry, And I have a new question.\nI download images from URL, and kingfisher will save the URL Path to cache image.\nIf I want to get all images URL from kingfisher, how to I get it?\n-ImageCache(name: \"default\").diskCachePath\nThis code only get \".../Library/Caches/com.onevcat.Kingfisher.ImageCache.default\"\nBut I want to get URL Path for local debug.\nThank you!!\n. My project has a banner, it can auto-scroll per 2 seconds and will loop the last banner to the first banner. If the banner image from URL, the image is a big size ( eg. 5MB). The banner is not smooth and slow. if show the banner view, I will reload the banner every time.(collection view) DispatchQueue.main.async {}\nthis will affect the download image?\nThank you!!!!!. ",
    "mliberatore": "Sounds great, and thank you!. currentFrameIndex now tracks the current frame of the gif being displayed. currentFrameIndexInBuffer serves the old purpose of currentFrameIndex, which is the index of the current frame of the gif as it exists in the animatedFrames buffer.. This was the off-by-one error that caused one frame to be skipped on the first loop of a gif. From the context of the code, it\u2019s not clear what the + 1 is for initially, so it\u2019s possible this may also be fixed by removing the + 1 instead of subtracting from the result.. ",
    "rodericj": "I'm running my app with the thread sanitizer and it's complaining on when I access animatedFrames.reserveCapacity(frameToProcess). [AnimatedFrames] contains some UIImage code and yet this line is run on a background queue. I'm thinking this may be an indicator of something and I'm currently investigating. . ",
    "mca-shahabuddin": "I have resolved it after encoding URL.\nFor Example:\nlet image_url = \"/image/cache/catalog/NEE/150\u0630\u0647\u0628\u064a%20\u062c\u062f\u064a\u062f\u0629-500x500.jpg\".addingPercentEncoding(withAllowedCharacters: CharacterSet.urlQueryAllowed)\nThanks. ",
    "singhtulsa": "Duplicate.. ",
    "dmathewwws": "I set the button's type to custom and it worked. (instead of system). ",
    "chyrta": "Thanks for resolving the issue.\n@onevcat When are you going to release a new version?. @onevcat Nice to hear that. Thanks for maintaining this cool library \ud83d\udc4d. ",
    "CHONUMAN": "hello. my custom indicator position is wrong. is this issue fixed? i made it as instructed in the documentation.\n```\nstruct ImageIndicator: Indicator {\n    let view: UIView = UIView()\n    let lottie = LOTAnimationView(name: \"mamaLoader\")\nfunc startAnimatingView() {\n    view.isHidden = false\n    lottie.play()\n}\nfunc stopAnimatingView() {\n    lottie.stop()\n    view.isHidden = true\n}\n\ninit() {\n    view.backgroundColor = .clear\n    view.layout(lottie).topBottom().leftRight()\n}\n\n}\n```. ",
    "pzmudzinski": "@onevcat I created custom UITableViewCell and for simplicity added just one UIImageView with leading/tailing/top/bottom constraints set to cell's margins. \nThis is how I am loading image into a cell: \n```\nclass AttachmentCell: UITableViewCell {\n@IBOutlet weak var attachmentImageView: UIImageView!\n\ninternal var aspectConstraint : NSLayoutConstraint? {\n    didSet {\n        if oldValue != nil {\n            attachmentImageView.removeConstraint(oldValue!)\n        }\n        if aspectConstraint != nil {\n            aspectConstraint?.priority = UILayoutPriority(999)\n            attachmentImageView.addConstraint(aspectConstraint!)\n        }\n    }\n}\n\nvar message: Message? {\n    didSet {\n        guard let message = message else { return }\n\n        guard let attachment = message.info.attachment else {\n            fatalError(\"Tried to bind non-attachment message to a cell!\")\n        }\n\n        attachmentImageView.kf.indicatorType = .activity\n\n        attachmentImageView.kf.setImage(with: attachment.downloadUrl, completionHandler: { [weak self]  (image, error, cacheType, imageUrl) in\n                guard let strongSelf = self, let image = image else { return }\n\n                let aspect = image.size.width / image.size.height\n\n                print(\"setting aspect \\(aspect)\")\n\n                strongSelf.aspectConstraint = NSLayoutConstraint(item: strongSelf.attachmentImageView, attribute: NSLayoutAttribute.width, relatedBy: NSLayoutRelation.equal, toItem: strongSelf.attachmentImageView, attribute: NSLayoutAttribute.height, multiplier: aspect, constant: 0.0)\n\n                strongSelf.setNeedsLayout()\n\n                strongSelf.layoutIfNeeded()\n            })\n    }\n}\n\n\noverride func prepareForReuse() {\n    super.prepareForReuse()\n    aspectConstraint = nil\n}\n\n}\n```\nIt's displayed almost correctly, except for a first time. Cell does not resize itself and tried different combination of layoutIfNeeded / setNeedsLayout. \nThose are my constraints:\n\nAny idea how to set it up? Maybe you could spin up some example? . @chamitha this is solution I've found: \n```\n                cell.setNeedsLayout()\n            UIView.performWithoutAnimation {\n                tableView.beginUpdates()\n                tableView.endUpdates()\n            }\n\n```\nYou might remove that performWithoutAnimation block so images will resize in animated way, I just didn't like that effect. . Uhm yes. I posted my solution?. ",
    "chamitha": "I have this same issue too and would be interested in a solution. . ",
    "gorbat-o": "Hello,\nI have the same problem.\nAn other point, sometimes I will have an image to load in the cell and sometimes not. \nAnd it is the fiesta in the tableview, the cell are not sized correctly, I have to scroll down and scroll up to make appear some images.\nHope you find a solution :)\n. Hey @bsarmiento-akurey \nI found a solution for this, it is to know if i will load an image or not in the tableview before instantiate an uitableviewcell\nIf yes, uitableviewcellIMAGE\nif not, i have an other uitableviewcellNOIMAGE\nThe recycler made some crazy things with my cells.\nIf you need I can provide some code here.. ",
    "bsarmiento-akurey": "Hello\nNothing yet? I have found some solutions, but all of them feel glitchy. When you are scrolling the tableview resizes and you lost track of were you where before. I don't like that. ",
    "masuhara": "Me, too. Any great ideas?. ",
    "antoinepemeja": "Maybee this can help some people, add this function in your tableviewcell class : \noverride func prepareForReuse() { \nsuper.prepareForReuse()\nfooImageView.kf.cancelDownloadTask()\nfooImageView.image = nil\n}. ",
    "hcanzonetta": "@onevcat good point. Done!. ",
    "mingabc": "if i create new dispatchqueue replace ioQueue to perform func  retrieveImage(forKey:) block, it work normal(ImageCache.swift,line 352). hi, i have a question that how to compress image , i use system api to drawrect a new image or UIImageJPEGRepresentation(image,compression), but i want  know wherther not it is have other method,  ps:The  saw same problem, How do you deal with it?    Looking forward to your answer. ",
    "ShaneQi": "Thanks for considering it as a legit feature requset.\nI achieved what I wanted by retrieving image from KingfisherManager and animating image view manually. Although it's working fine for me, it's not an ideal solution.\nSo I'm going to leave the code here, just in case someone wants the same.\nswift\nKingfisherManager.shared.retrieveImage(\n    with: someURL, options: nil, progressBlock: nil,\n    completionHandler: { image, _, _, _ in\n        UIView.transition(with: someImageView, duration: 0.3, options: .transitionCrossDissolve, animations: {\n            someImageView.image = image\n        }, completion: nil)\n    }\n). @onevcat It makes sense and works like a charm.\nThanks you so much!. @onevcat \nThanks for the response. \nWhile the method 2 totally works, method 1 doesn't work all the time. In the case that url1 is already cached in disk, there won't be an error passed in the completion. (see screenshot)\n. ",
    "RecherJ": "@KimiChiu so at least, how did you resolve this problem, i have faced some issue with you.. ",
    "agforte": "Hi @JacobMao and thanks for the answer.\nHmmm could the difference be that I call the retrieveImage() code above from a function called renderImages() called as follows:\nDispatchQueue.main.async { [unowned self] in\n            self.delegate?.renderImages(imgs: imgDictionary)\n}\nCould this async call cause the problem?\n(Please note that the dictionary contained only one image in the tests above!)\nThanks!. ",
    "icoco": "got it, AnyModifier...\nThanks. ",
    "Sweefties": "@onevcat  could you bump to new tag version for cocoapods/carthage ?. ",
    "lizizi": "ok. ",
    "MartinP7r": "Have you tried:\nswift\nlet btn = UIButton() \nlet img = UIImage()\nbtn.setImage(img, for: UIControlState())\nbtn.imageView?.kf.indicatorType = .activity\nI haven't verified it by compiling, but the auto-completion suggests it's there.. > btn.imageView? is read-only, so this won't compile.\nThe code compiles without problem, since it's only accessing the imageView's properties. Please refer to UIButton.imageView's documentation. However it doesn't show the result I was hoping for, yes.  \n@onevcat , thanks for the info. I was somehow expecting it to work since UIButton.imageView is a UIImageView and therfore has the kingfisher extensions.. ",
    "dmzza": "btn.imageView? is read-only, so this won't compile. . ",
    "siddrajput": "Got it working by changing the Bundle Identifier in Xcode.. ",
    "Dschee": "I tried everything here and there without success. :(. Already tried that, didn't work. Found a workaround: Using HanekeSwift now instead of Kingfisher. ;). Sorry for being rude, shouldn't have made a joke about it, was disrespectful.\nThank you for taking the time to help me. \ud83d\ude47 . Ah, ok, then I overknterpreted things. Anyways, was rude. ^^\nBy the way, the project structure where I integrated this os weird, too. If I were you I\u2018d keep in the back of my mind that there was such an issue bbt won\u2018t do anything about it unless someone else would run into similar problems. But it\u2018s weird in any case .... ",
    "radugrinico": "Hello @onevcat.\nI have the same issue. \nThe bundle \u201cTests\u201d couldn\u2019t be loaded because it is damaged or missing necessary resources. \nTry reinstalling the bundle.\n(dlopen_preflight(/Tests.xctest/Tests): Library not loaded: @rpath/libswiftAccelerate.dylib\nReferenced from: /Kingfisher.framework/Kingfisher\nReason: image not found)\nAny ideas on how to fix it?\n. Solved by importing accelerate in the header file of the networking framework (where kf is imported):\n```\nimport \nimport \n```. ",
    "GWesley": "Try clean build folder . ",
    "puelocesar": "Adding the imports didn't worked for me, neither cleaning build folder. Not even adding Accelerate.framework to the \"Link Binary with Libraries\" phase\nAny other ideas?. One alternative is to fork Kingfisher and remove everything related to Accelerate. It's basically just removing the \"blur\" feature anyway, so I think it won't be an issue for most people. ",
    "ichibod": "I am also running into this issue. Changing @rpath settings for my project hasn't resulted in a compiled UI test either.\n\n(dlopen_preflight(/Users/ryan.jones/Library/Developer/Xcode/DerivedData/*-dqxcewttakcreqdcoyalatljzzay/Build/Products/Debug-iphonesimulator/UITests-Runner.app/PlugIns/*UITests.xctest/UITests): Library not loaded: @rpath/libswiftAccelerate.dylib\nReferenced from: /Users/ryan.jones/Library/Developer/Xcode/DerivedData/*-dqxcewttakcreqdcoyalatljzzay/Build/Products/Debug-iphonesimulator/UITests-Runner.app/PlugIns/***UITests.xctest/Frameworks/Kingfisher.framework/Kingfisher\n. \n",
    "muukii": "I fixed this with adding import Accelerate to some swift files in test scheme.. ",
    "bill350": "The same here. I've removed Kingfisher to AlamofireImage. \nI think we have to create sub-spec for advanced filtering image effect. It will avoid specific linking of unused framework imports too.. ",
    "gal-orlanczyk": "The issue is still happening why was it closed? I get the same issue on my test target. ",
    "MSavisko": "@gal-orlanczyk \nYou could add a new empty target (as single view application), add Accelerate framework (General - Linked Frameworks and Libraries) and define \"Host Application\" as just added target.\nInspired by:\nhttps://stackoverflow.com/a/42424793. ",
    "ricsantos": "I've also noticed a ThreadSanitizer data race on ImageDownloader.swift line 475:\nguard let downloader = downloadHolder else {\n```\nWARNING: ThreadSanitizer: data race (pid=95761)\n  Read of size 8 at 0x7b040004d2e8 by main thread:\n    #0 _T010Kingfisher29ImageDownloaderSessionHandlerC03urlD0ySo10URLSessionC_So0G8DataTaskC04dataI0So11URLResponseC10didReceiveyAF19ResponseDispositionOc010completionE0tF ImageDownloader.swift:475 (Kingfisher:x86_64+0x52fa9)\n    #1 _T010Kingfisher29ImageDownloaderSessionHandlerC03urlD0ySo10URLSessionC_So0G8DataTaskC04dataI0So11URLResponseC10didReceiveyAF19ResponseDispositionOc010completionE0tFTo ImageDownloader.swift (Kingfisher:x86_64+0x54b06)\n    #2 NSBLOCKOPERATION_IS_CALLING_OUT_TO_A_BLOCK  (Foundation:x86_64+0x3b362)\n    #3 _dispatch_client_callout  (libdispatch.dylib:x86_64+0x37eb)\n    #4 start  (libdyld.dylib:x86_64+0x1954)\nPrevious write of size 8 at 0x7b040004d2e8 by thread T27:\n    #0 T010Kingfisher15ImageDownloaderC08downloadB0AA08RetrieveB12DownloadTaskVSg10Foundation3URLV4with_AA0ebG0CSg08retrievebG0SayAA0A15OptionsInfoItemOGSg7optionsys5Int64V_AVtcSg13progressBlockySo7UIImageCSg_So7NSErrorCSgAJSgAH4DataVSgtcSg17completionHandlertFySo10URLSessionC_AC0B9FetchLoadCtcfU ImageDownloader.swift:371 (Kingfisher:x86_64+0x4f23a)\n    #1 T010Kingfisher15ImageDownloaderC08downloadB0AA08RetrieveB12DownloadTaskVSg10Foundation3URLV4with_AA0ebG0CSg08retrievebG0SayAA0A15OptionsInfoItemOGSg7optionsys5Int64V_AVtcSg13progressBlockySo7UIImageCSg_So7NSErrorCSgAJSgAH4DataVSgtcSg17completionHandlertFySo10URLSessionC_AC0B9FetchLoadCtcfU_TA ImageDownloader.swift (Kingfisher:x86_64+0x5a995)\n    #2 _T010Kingfisher15ImageDownloaderC5setupyys5Int64V_AFtcSg13progressBlock_ySo7UIImageCSg_So7NSErrorCSg10Foundation3URLVSgAO4DataVSgtcSg4withAQ3forSayAA0A15OptionsInfoItemOGSg7optionsySo10URLSessionC_AC0B9FetchLoadCtc7startedtF07preparetU0L_yyFyycfU ImageDownloader.swift:400 (Kingfisher:x86_64+0x50bd2)\n    #3 T010Kingfisher15ImageDownloaderC5setupyys5Int64V_AFtcSg13progressBlock_ySo7UIImageCSg_So7NSErrorCSg10Foundation3URLVSgAO4DataVSgtcSg4withAQ3forSayAA0A15OptionsInfoItemOGSg7optionsySo10URLSessionC_AC0B9FetchLoadCtc7startedtF07preparetU0L_yyFyycfU_TA ImageDownloader.swift (Kingfisher:x86_64+0x5e066)\n    #4 _T0s5Error_pIgzo_ytsAA_pIgrzo_TR ImageDownloader.swift (Kingfisher:x86_64+0x4d426)\n    #5 _T0s5Error_pIgzo_ytsAA_pIgrzo_TRTA.146 ImageDownloader.swift (Kingfisher:x86_64+0x5e11e)\n    #6 _T0So13DispatchQueueC0A0E11_syncHelper33_F417D752D2C4E9330E1C700411CE0C6ALLxyyycc2fn_xyKc7executexs5Error_pKc6rescuetKlFyxyKccfU_yycfU  (libswiftDispatch.dylib:x86_64+0xbacb)\n    #7 dispatch_client_callout  (libdispatch.dylib:x86_64+0x37eb)\n    #8 _T0So13DispatchQueueC0A0E12_syncBarrier33_F417D752D2C4E9330E1C700411CE0C6ALLyyyc5block_tFTA  (libswiftDispatch.dylib:x86_64+0x128fc)\n    #9 _T010Kingfisher15ImageDownloaderC5setupyys5Int64V_AFtcSg13progressBlock_ySo7UIImageCSg_So7NSErrorCSg10Foundation3URLVSgAO4DataVSgtcSg4withAQ3forSayAA0A15OptionsInfoItemOGSg7optionsySo10URLSessionC_AC0B9FetchLoadCtc7startedtF ImageDownloader.swift:415 (Kingfisher:x86_64+0x4fc49)\n    #10 _T010Kingfisher15ImageDownloaderC08downloadB0AA08RetrieveB12DownloadTaskVSg10Foundation3URLV4with_AA0ebG0CSg08retrievebG0SayAA0A15OptionsInfoItemOGSg7optionsys5Int64V_AVtcSg13progressBlockySo7UIImageCSg_So7NSErrorCSgAJSgAH4DataVSgtcSg17completionHandlertF ImageDownloader.swift:360 (Kingfisher:x86_64+0x4e63f)\n    #11 _T06Totsie7OverlayV22downloadThumbnailImageyySo7UIImageCSg_s5Error_pSgtcSg10completion_tF DataStructs.swift:555 (Totsie:x86_64+0x100531ec2)\n    #12 _T06Totsie11DataManagerC19checkContentUpdatedyyFyycfU DataManager.swift:1159 (Totsie:x86_64+0x1001428d0)\n    #13 _T06Totsie11DataManagerC19checkContentUpdatedyyFyycfU_TA DataManager.swift (Totsie:x86_64+0x100143591)\n    #14 _T0Ieg_IeyB_TR RegisterViewController.swift (Totsie:x86_64+0x10000c830)\n    #15 __tsan::invoke_and_release_block(void*)  (libclang_rt.tsan_iossim_dynamic.dylib:x86_64+0x622bb)\n    #16 _dispatch_client_callout  (libdispatch.dylib:x86_64+0x37eb)\nLocation is heap block of size 16 at 0x7b040004d2e0 allocated by main thread:\n    #0 calloc  (libclang_rt.tsan_iossim_dynamic.dylib:x86_64+0x471a2)\n    #1 class_createInstance  (libobjc.A.dylib:x86_64+0xf37f)\n    #2 _T010Kingfisher15ImageDownloaderCACSS4name_tcfc ImageDownloader.swift:299 (Kingfisher:x86_64+0x4c9e9)\n    #3 _T010Kingfisher15ImageDownloaderCACSS4name_tcfC ImageDownloader.swift (Kingfisher:x86_64+0x4b590)\n    #4 globalinit_33_1CBBE1CEF600480D48F123F40F117AB5_func1 ImageDownloader.swift:281 (Kingfisher:x86_64+0x4b4f6)\n    #5 dispatch_once  (libclang_rt.tsan_iossim_dynamic.dylib:x86_64+0x62f14)\n    #6 dispatch_once_f  (libclang_rt.tsan_iossim_dynamic.dylib:x86_64+0x63000)\n    #7 _T010Kingfisher15ImageDownloaderC7defaultACvau ImageDownloader.swift:281 (Kingfisher:x86_64+0x4b5f9)\n    #8 _T010Kingfisher0A7ManagerCACycfc KingfisherManager.swift:91 (Kingfisher:x86_64+0x90ff4)\n    #9 _T010Kingfisher0A7ManagerCACycfC KingfisherManager.swift (Kingfisher:x86_64+0x906b7)\n    #10 globalinit_33_34361C00AC0F1B424C7ED272C635AF94_func2 KingfisherManager.swift:69 (Kingfisher:x86_64+0x9060f)\n    #11 dispatch_once  (libclang_rt.tsan_iossim_dynamic.dylib:x86_64+0x62f14)\n    #12 dispatch_once_f  (libclang_rt.tsan_iossim_dynamic.dylib:x86_64+0x63000)\n    #13 _T010Kingfisher0A7ManagerC6sharedACvau KingfisherManager.swift:69 (Kingfisher:x86_64+0x90729)\n    #14 _T010KingfisherAACAASo11UIImageViewCRbzlE8setImageAA08RetrieveE4TaskCAA8Resource_pSg4with_AA11Placeholder_pSg11placeholderSayAA0A15OptionsInfoItemOGSg7optionsys5Int64V_ATtcSg13progressBlockySo0B0CSg_So7NSErrorCSgAA9CacheTypeO10Foundation3URLVSgtcSg17completionHandlertF ImageView+Kingfisher.swift:70 (Kingfisher:x86_64+0x81cd7)\n    #15 _T06Totsie13FeedImageCellC06updateD7ForItemyAA0bG0V4item_SS12sectionTitletF FeedImageCell.swift:60 (Totsie:x86_64+0x10041c92d)\n    #16 _T06Totsie18FeedViewControllerC010collectionC0So012UICollectionC4CellCSo0fC0C_10Foundation9IndexPathV13cellForItemAttF FeedViewController.swift:308 (Totsie:x86_64+0x1006c67d8)\n    #17 _T06Totsie18FeedViewControllerC010collectionC0So012UICollectionC4CellCSo0fC0C_10Foundation9IndexPathV13cellForItemAttFTo FeedViewController.swift (Totsie:x86_64+0x1006c6a45)\n    #18 -[UICollectionView _createPreparedCellForItemAtIndexPath:withLayoutAttributes:applyAttributes:isFocused:notify:]  (UIKit:x86_64+0xaed755)\n    #19 start  (libdyld.dylib:x86_64+0x1954)\nThread T27 (tid=2782474, running) is a GCD worker thread\nSUMMARY: ThreadSanitizer: data race ImageDownloader.swift:475 in _T010Kingfisher29ImageDownloaderSessionHandlerC03urlD0ySo10URLSessionC_So0G8DataTaskC04dataI0So11URLResponseC10didReceiveyAF19ResponseDispositionOc010completionE0tF\n```\nReproduce:\n- Kingfisher (4.8.0) via CocoaPods\n- Xcode Version 9.4\n- Swift 4.1\n- Simulator iPhone 8 Plus - iOS 11.4. ",
    "JoshuaFeng5": "simple , sorry..... ",
    "thundercatchris": "I found my answer, sorry \nResizingImageProcessor.init(referenceSize: CGSize(width: 100, height: 100), mode: .aspectFit). ",
    "DrewKiino": "@onevcat no worries! currently, we are loading them locally via xcassets\nwe use UIImage because it already natively handles it by initializing with the named parameter and it sets it. We're not trying to view it in any special way so I think PDFView might be a bit too much for our use case.. ",
    "guoyingtao": "Thanks for your answer.. ",
    "VermouthC": "@ya-eternity  kingfisher\u5728\u5904\u7406\u56fe\u7247\u7684\u65f6\u5019,\u8981\u52a0\u8f7d\u5230\u5185\u5b58\u91cc,iOS\u8bbe\u5907\u5185\u5b58\u80af\u5b9a\u5403\u7d27,\u5f53\u8d85\u8fc7\u9608\u503c\u80af\u5b9a\u4f1a\u5d29\u6e83\n\u6240\u4ee5\u5927\u56fe\u7684\u5904\u7406,\u4e0a\u4f20\u7684\u65f6\u5019\u5c31\u8981\u8fdb\u884c\u8d28\u91cf\u538b\u7f29\u548c\u5bbd\u9ad8\u7684\u7b49\u6bd4\u7f29\u653e. ",
    "Songkunda": "\u5982\u679c\u5fc5\u8981\u9ad8\u8d28\u91cf\u7684\u56fe \u53ef\u4ee5\u5206\u9636\u6bb5\u8bfb\u53d6\u4e0a\u4f20 \u4e0d\u8fc74m\u52a0\u5230\u5185\u5b58\u91cc\u4e5f\u5c3110m\u5de6\u53f3 \u5e94\u8be5\u4e0d\u4f1a\u51fa\u73b0\u8fd9\u4e2a\u95ee\u9898 \u662f\u4e0d\u662f\u4f60\u4e00\u6b21\u6027\u52a0\u8f7d\u4e86\u8fc7\u591a\u7684\u56fe\u7247\u5230\u5185\u5b58\u91cc\u4e86\uff1f. ",
    "a1259667899": "\u73b0\u5728\u9700\u8981\u5224\u65ad\u67d0\u4e2aurl\u7684\u56fe\u7247\u662f\u5426\u5df2\u7ecf\u88ab\u7f13\u5b58\u5230\u672c\u5730. ",
    "Tawfikk": "I solved this problem. Just deleted and installed SDWebImage \ud83d\ude01. ",
    "zengyuanchen": "imageView.kf.setImage(with: url, placeholder: nil, options: [.fromMemoryCacheOrRefresh], progressBlock: nil, completionHandler: nil). ",
    "wudijimao": "You had better let your server not do this!!!    You at lest get the header from server to know if it been updated!!  It will be a big waste!!. My processor is work. But cache is broken by add a custom processor!. ",
    "manojmahapatra": "no problem. . ",
    "Juefeiye": "\u7528\u7684\u662fKingfisherWebp\u52a0\u8f7d\u7684webp\u56fe\u7247. \u52a0\u8f7dgif\u4e5f\u662f\u4e00\u6837\u7684\u60c5\u51b5\uff0c\u8bf7\u95eecell\u4e0a\u600e\u4e48\u53bb\u4f7f\u7528runloop\u5462. ",
    "Shagans982": "If it loaded negative then went to positive I could ignore but it only shows negatives. So my progress indicator is never filled. Bummer - I suppose I just can\u2019t use it. . ",
    "hairui19": "For anyone has the same problem in future, just try to escape the string by adding \nlet escapeURL = urlLink.addingPercentEncoding(withAllowedCharacters: .urlQueryAllowed)!\nYou can try the different url character set . ",
    "JUJUNJIE": "\u597d\u5427\uff0c\u66f4\u65b0\u4e86\u4e00\u4e0bpodfile\u4e2d\u7684kingfisher 4.8.0\uff0c\u95ee\u9898\u89e3\u51b3\u4e86\uff08\u5c34\u5c2c\u8138\uff09. ",
    "JustOneLastDance": "\u6dfb\u52a0\u4e86\u4e00\u884c selectionStyle = .none \u5c31\u597d\u4e86\u3002\u8fd8\u5728\u770b\u4ee3\u7801\u4e3a\u4ec0\u4e48\u4f1a\u51fa\u73b0\u8fd9\u4e2a\u95ee\u9898\u3002. ",
    "lscheepers": "Hi there, any advice / feedback on how I can get the activity indicator to show when using an UIImageView within an UIScrollView?. Hi there, thanks for the feedback. \nWhen I use the setImage on a normal UIImageView, or table, the indicator is shown. However, when I use the UIImageView within a scroll view, the indicator is not shown. \nI have even tried using a custom loader, but this is also not displayed. I can confirm that images are not found in cache, as I clear the cache at every start up.\nAttached is an example app of what the behaviour I am seeing. I have a horizontal scroll view with 3 images, there no indicator shown, and a separate UIImage view, where the indicator is shown\nKingfisherTestApp.zip\n. Thank you so much for the feedback.\nThis does solve the activity loader issue. \nWe are still looking at what view is the best to use. ",
    "cuzv": "@onevcat Thanks for your reply.\nI'm so glad you agree with me. Would love to support downsampling feature when it's ready.. ",
    "worthbak": "We just finished adding a downsampling step to our Kingfisher render pipeline in order to save memory (also inspired by some of the sessions from WWDC). In doing so, we were able to keep our app's memory usage below an acceptable threshold consistently when viewing many large images. \nHowever, it did require a bit more customization than expected, since you need to try and prevent Kingfisher from ever allocating a full image buffer for large images (as that image buffer's memory footprint is exactly what we're trying to avoid) , and by default Kingfisher will do this on both when an image is downloaded and when it is serialized from the disk cache. Caching was also a bit of an issue, since we never want to fully serialize and cache the original image as a UIImage - instead, we only want to cache downsampled versions of the original image. \nIn any case, getting it to work involved using a custom ImageProcessor both in the render phase and also in a custom CacheSerializer, and also using separate caches for original files (on disk) and downsampled images (in memory). The final option set looks like this:\n```swift\n// will render the image downsampled to the given dimension\nlet dimension = max(size.width, size.height)\nlet cacheSerializer = DownsamplingImageCacheSerializer(dimension)\nlet options: KingfisherOptionsInfo =  [\n    .targetCache(memoryCache),\n    .originalCache(originalCache),\n    .cacheOriginalImage,\n    .cacheSerializer(cacheSerializer),\n    .processor(cacheSerializer.pipeline) // share the render pipeline from the serializer\n]\n```\nI'd be happy to try and contribute some of this work back into Kingfisher, but I'm not quite sure how to slot it into the library, since our implementation is more like a custom configuration of the library, and not something that would lend itself to a single custom type or processing step. @onevcat any thoughts or suggestions on that? Let me know if I'm missing some obvious step that would have made this work a bit easier! Also, thanks for making the library so open to customization \ud83d\udc4d. @onevcat thanks for the feedback! The main reason we want to try and cache the original image is that, for our purposes, we download a large original, and then reuse that image in various places / sizes in our app. So it\u2019s not quite good enough to only cache the downsampled versions, since we\u2019d have to fetch the original over and over. \nOne detail I didn\u2019t mention was the limits we set on the caches - we try to lock the originals cache to only store on-disk (so that it only deals in Data, not UIImage), and lock the memory cache (for downsampled images) to memory only: \n```swift \nImageCache.memoryCache.maxMemoryCost = 20 * 1024 * 1024\nImageCache.memoryCache.maxDiskCacheSize = 1\nImageCache.originalCache.maxMemoryCost = 1\nImageCache.originalCache.maxDiskCacheSize = 100 * 1024 * 1024\n```\nThe desired effect here is to a) ensure that the originals are always cached (as Data), and b) try to never make a UIImage from the original data. While this seems to work ok, a better solution might be to add a .cacheOnlyData option to ImageCache, wherein it would only stick the Data blobs for the original images into the memory or disk cache, but still keep them around for serialization into a downsampled version. Instead of locking the originals cache to disk-only, it would just know to only store Data in memory or on disk. Does that make sense? \nAs far as the cache serializer goes, that makes sense, and is kinda what we\u2019re doing already - we need to ensure that the original image being serialized from the disk cache goes directly into its downsampled form, and not into its full-res form. As such, we simply share the downsampling code from the processor, which for us meant sharing the pipeline code (and only initializing one pipeline). Open to suggestions on that front. \nIf you like that .cacheOnlyData option I mentioned, I can get to work on a PR for that - IIRC, the NSCache used by ImageCache is typed as AnyObject, so it shouldn\u2019t be a ton of work (no need for a separate managed cache or anything). Let me know! \nSent with GitHawk. ",
    "ashish-naik": "@onevcat could you please help?\nThanks\nAshish. i am not really concerned about this issue as it doesn't affect my app. \nI don't how to file a radar. Would you mind doing it?\nThanks,\nAshish. @ednofedulo Thanks. it is working. ",
    "satishVekariya": "You're welcome \nAnd thanks for quick replay.. ",
    "hydyy": "ok thx\uff01. ",
    "nooralam6": "let placeholderImage = UIImage(named: \"Profile_icon\")\nimageView.kf.setImage(with: imageURL, placeholder: placeholderImage, options: [.forceRefresh, .cacheOriginalImage], progressBlock: nil, completionHandler: nil). I am having the same issue, please let us know a way for this.. i hve done it this way, \n```\nlet cacheImage = ImageCache.default.retrieveImageInDiskCache(forKey: \"cache\")\nlet resource = ImageResource(downloadURL: imageURL, cacheKey: \"cache\")\nimageView.kf.setImage(with: resource, placeholder: cacheImage, options: [.keepCurrentImageWhileLoading], progressBlock: nil, completionHandler: nil)\n```\nand whenever the image is being updated I store the image with:\nImageCache.default.store(image, forKey: \"cache\"). ",
    "CivelXu": "I finished this work Kingfisher-Texture. ",
    "abdoh476": "no I pass a Valid URL like this one : \nhttps://www.marraa.com/wp-content/uploads/2018/06/\u0662\u0660\u0661\u0668\u0660\u0666\u0662\u0664_\u0660\u0660\u0662\u0660\u0661\u0668.jpg. I already tested it and it's not nil \nmy code was a collectionView and having data from api \nthe data is backed fully from the api \nbut failed to load with kf \nonly fully English link (that came from the same service for another photo) loaded \nAnd when I made the encoding I mentioned above the link with arabic letters worked . so I made extension for UIImageView as follow : \nfunc setImageWith(_ linkString: String?)  {\n        guard let linkString = linkString,\n            let url = URL(string: linkString) else { return }\n        self.kf.setImage(with: url) \n    }\nThen my using for it as follow : \nself.adPictureImageView.setImageWith(adModel.picture)\nthe adModel.picture is the link above \nthis made it not to download \nthe code that worked with me was : \nself.adPictureImageView.setImageWith(adModel.picture.addingPercentEncoding(withAllowedCharacters: CharacterSet.urlQueryAllowed))\n. I think it's not the problem since it pass with the English letters and when encoded too \n. ",
    "nadia-dev": "Got it, thanks!. ",
    "KarthikaReddy": "You have to do it manually - I have changed my logic to below.\nFirst fetch the thumbnail by querying Kingfisher and then set this thumbnail image as a placeholder image while the library actually fetches for full size image.\nImageCache.default.retrieveImage(forKey: thumbnailURL, options: nil) { image, _ in\nself. fullImage.kf.setImage(with: url, placeholder: image, options: [.requestModifier(header)],\n            self.showImage(url, image, header, ID)\n}. ",
    "xuegeliu": "the same que. ",
    "ejmartin504": "I believe our app is suffering from the same issue. We prefetch a LOT of images when we first load the app, and our tableView starts to stutter.\n@onevcat I think this would be a great addition to the library \ud83d\udc4d . Great, thank you @onevcat!. ",
    "lxzzzzzz": "\u770b\u770b\u6587\u6863\u3002\u3002\u3002 cancel-a-downloading-or-retriving-task. ",
    "Beyond-Chao": "// In table view delegate\nfunc tableView(_ tableView: UITableView, didEndDisplaying cell: UITableViewCell, forRowAt indexPath: IndexPath) {\n    //...\n    cell.imageView.kf.cancelDownloadTask()\n}\n\u8fd8\u662f\u9700\u8981\u624b\u52a8\u53bb\u8c03\u7528cancel \u5f53 cell endDisplaying \u7684\u65f6\u5019\u3002\u6211\u610f\u601d\u662f\u8bf4\u80fd\u4e0d\u80fd\u76f4\u63a5\u5199\u5728setImage\u91cc\u9762\uff0c\u50cfSD\u4e00\u6837\u3002. ",
    "richschonthal": "I posed my question the wrong way. The  problem is I need a Data instead of an Image and I can't figure out how to do that.. ",
    "lixiang1994": "\u6682\u65f6\u89e3\u51b3\u65b9\u6848: \u907f\u514d\u4f7f\u7528disk\u7f13\u5b58, \u4f7f\u7528.fromMemoryCacheOrRefresh. ",
    "linqingmo": "try this\nswift\nKingfisherManager.shared.cache.maxMemoryCost = 30 * 1024. try this\nswift\nKingfisherManager.shared.cache.maxMemoryCost = 30 * 1024\nKingfisher's memory cache is unlimited by default, it should be a limited size 30mb or other.. ",
    "Michelasso": "Ok, I'll give it a try. Thanks!. ",
    "luicm": "same issue here, did you manage to solve it?. thanks :). ",
    "sc0rch": "I don't have this problem anymore for some reason. I'm using Kingfisher 4.10.1\nI've changed nothing in my code, I'm sure.. ",
    "BabyAzerty": "Thank you @onevcat \nYour solution works perfectly \ud83d\udc4d . ",
    "laus102": "Getting the same generic crash as well. bump. Yes, I am having the same issue.  Seems to happen in my case when loading many images at once. ",
    "ryang1428": "We are seeing similar crashes in our apps, but are having issues tracking down the cause. We were wondering if it is image sized / memory based. Any suggestions here? \nWe are currently in production with v4.9.0, but will be moving to the latest in our next release.\n```\n0 | CoreFoundation 0x0000000186323ea0 __exceptionPreprocess + 224\n-- | --\n\u00a0 | 1 | libobjc.A.dylib 0x00000001854f5a40 objc_exception_throw + 52\n\u00a0 | 2 | Foundation 0x0000000186db844c NSOutOfMemoryErrorHandler + 52\n\u00a0 | 3 | CoreFoundation 0x0000000186257d98 __CFReallocationFailed + 88\n\u00a0 | 4 | CoreFoundation 0x0000000186257d38 __CFSafelyReallocate + 64\n\u00a0 | 5 | Foundation 0x0000000186d6d6b0 _NSMutableDataGrowBytes + 380\n\u00a0 | 6 | Foundation 0x0000000186cb59dc -[NSConcreteMutableData appendBytes:length:] + 424\n\u00a0 | 7 | ImageIO 0x00000001885f2a90 IIOImageWriteSession::putBytes() + 180\n\u00a0 | 8 | ImageIO 0x00000001885caf5c iioWriteCallback() + 40\n\u00a0 | 9 | AppleJPEG 0x00000001885452b8 aj_ostream_write + 388\n\u00a0 | 10 | AppleJPEG 0x0000000188567ab8 aj_block_encode_ac + 1332\n\u00a0 | 11 | AppleJPEG 0x0000000188537240 aj_encode_buffers_baseline + 48\n\u00a0 | 12 | AppleJPEG 0x0000000188537684 aj_encode_row + 176\n\u00a0 | 13 | AppleJPEG 0x0000000188569208 applejpeg_encode_image_row + 580\n\u00a0 | 14 | ImageIO 0x00000001886c8e10 AppleJPEGWritePlugin::writeOne() + 1268\n\u00a0 | 15 | ImageIO 0x00000001886c97d0 IIO_Writer_AppleJPEG::write() + 52\n\u00a0 | 16 | ImageIO 0x00000001886b0398 IIOImageDestination::finalize() + 1584\n\u00a0 | 17 | UIKitCore 0x00000001b319a950 _UIImageJPEGRepresentation + 648\n\u00a0 | 18 | Kingfisher 0x0000000103b12fec data (image, original) (CacheSerializer.swift:71)\n\u00a0 | 19 | Kingfisher 0x0000000103b12d58 data () (CacheSerializer.swift:65)\n\u00a0 | 20 | Kingfisher 0x0000000103b1d748 _T010Kingfisher10ImageCacheC5storeySo7UIImageC_10Foundation4DataVSg8originalSS6forKeySS19processorIdentifierAA0C10Serializer_p05cacheM0Sb6toDiskyycSg17completionHandlertFyycfU (ImageCache.swift:212)\n\u00a0 | 21 | Kingfisher 0x0000000103b29d84 _T010Kingfisher10ImageCacheC5storeySo7UIImageC_10Foundation4DataVSg8originalSS6forKeySS19processorIdentifierAA0C10Serializer_p05cacheM0Sb6toDiskyycSg17completionHandlertFyycfU_TA (ImageCache.swift:0)\n\u00a0 | 22 | Kingfisher 0x0000000103b1cd9c _T0Ieg_IeyB_TR (ImageCache.swift:0)\n\u00a0 | 23 | libdispatch.dylib 0x0000000185d5d6c8 _dispatch_call_block_and_release + 20\n\u00a0 | 24 | libdispatch.dylib 0x0000000185d5e484 _dispatch_client_callout + 12\n\u00a0 | 25 | libdispatch.dylib 0x0000000185d38fb0 _dispatch_lane_serial_drain$VARIANT$armv81 + 544\n\u00a0 | 26 | libdispatch.dylib 0x0000000185d39af4 _dispatch_lane_invoke$VARIANT$armv81 + 408\n\u00a0 | 27 | libdispatch.dylib 0x0000000185d41f14 _dispatch_workloop_worker_thread + 580\n\u00a0 | 28 | libsystem_pthread.dylib 0x0000000185f400dc _pthread_wqthread + 308\n\u00a0 | 29 | libsystem_pthread.dylib 0x0000000185f42cec start_wqthread + 0\n0 | CoreFoundation 0x0000000186323ea0 __exceptionPreprocess + 224\n-- | --\n\u00a0 | 1 | libobjc.A.dylib 0x00000001854f5a40 objc_exception_throw + 52\n\u00a0 | 2 | Foundation 0x0000000186db844c NSOutOfMemoryErrorHandler + 52\n\u00a0 | 3 | CoreFoundation 0x0000000186257d98 __CFReallocationFailed + 88\n\u00a0 | 4 | CoreFoundation 0x0000000186257d38 __CFSafelyReallocate + 64\n\u00a0 | 5 | Foundation 0x0000000186d6d6b0 _NSMutableDataGrowBytes + 380\n\u00a0 | 6 | Foundation 0x0000000186cb59dc -[NSConcreteMutableData appendBytes:length:] + 424\n\u00a0 | 7 | ImageIO 0x00000001885f2a90 IIOImageWriteSession::putBytes() + 180\n\u00a0 | 8 | ImageIO 0x00000001885caf5c iioWriteCallback() + 40\n\u00a0 | 9 | AppleJPEG 0x00000001885452b8 aj_ostream_write + 388\n\u00a0 | 10 | AppleJPEG 0x0000000188567ab8 aj_block_encode_ac + 1332\n\u00a0 | 11 | AppleJPEG 0x0000000188537240 aj_encode_buffers_baseline + 48\n\u00a0 | 12 | AppleJPEG 0x0000000188537684 aj_encode_row + 176\n\u00a0 | 13 | AppleJPEG 0x0000000188569208 applejpeg_encode_image_row + 580\n\u00a0 | 14 | ImageIO 0x00000001886c8e10 AppleJPEGWritePlugin::writeOne() + 1268\n\u00a0 | 15 | ImageIO 0x00000001886c97d0 IIO_Writer_AppleJPEG::write() + 52\n\u00a0 | 16 | ImageIO 0x00000001886b0398 IIOImageDestination::finalize() + 1584\n\u00a0 | 17 | UIKitCore 0x00000001b319a950 _UIImageJPEGRepresentation + 648\n\u00a0 | 18 | Kingfisher 0x0000000103b12fec data (image, original) (CacheSerializer.swift:71)\n\u00a0 | 19 | Kingfisher 0x0000000103b12d58 data () (CacheSerializer.swift:65)\n\u00a0 | 20 | Kingfisher 0x0000000103b1d748 _T010Kingfisher10ImageCacheC5storeySo7UIImageC_10Foundation4DataVSg8originalSS6forKeySS19processorIdentifierAA0C10Serializer_p05cacheM0Sb6toDiskyycSg17completionHandlertFyycfU (ImageCache.swift:212)\n\u00a0 | 21 | Kingfisher 0x0000000103b29d84 _T010Kingfisher10ImageCacheC5storeySo7UIImageC_10Foundation4DataVSg8originalSS6forKeySS19processorIdentifierAA0C10Serializer_p05cacheM0Sb6toDiskyycSg17completionHandlertFyycfU_TA (ImageCache.swift:0)\n\u00a0 | 22 | Kingfisher 0x0000000103b1cd9c _T0Ieg_IeyB_TR (ImageCache.swift:0)\n\u00a0 | 23 | libdispatch.dylib 0x0000000185d5d6c8 _dispatch_call_block_and_release + 20\n\u00a0 | 24 | libdispatch.dylib 0x0000000185d5e484 _dispatch_client_callout + 12\n\u00a0 | 25 | libdispatch.dylib 0x0000000185d38fb0 _dispatch_lane_serial_drain$VARIANT$armv81 + 544\n\u00a0 | 26 | libdispatch.dylib 0x0000000185d39af4 _dispatch_lane_invoke$VARIANT$armv81 + 408\n\u00a0 | 27 | libdispatch.dylib 0x0000000185d41f14 _dispatch_workloop_worker_thread + 580\n\u00a0 | 28 | libsystem_pthread.dylib 0x0000000185f400dc _pthread_wqthread + 308\n\u00a0 | 29 | libsystem_pthread.dylib 0x0000000185f42cec start_wqthread + 0\n0 | CoreFoundation 0x0000000186323ea0 __exceptionPreprocess + 224\n-- | --\n\u00a0 | 1 | libobjc.A.dylib 0x00000001854f5a40 objc_exception_throw + 52\n\u00a0 | 2 | Foundation 0x0000000186db844c NSOutOfMemoryErrorHandler + 52\n\u00a0 | 3 | CoreFoundation 0x0000000186257d98 __CFReallocationFailed + 88\n\u00a0 | 4 | CoreFoundation 0x0000000186257d38 __CFSafelyReallocate + 64\n\u00a0 | 5 | Foundation 0x0000000186d6d6b0 _NSMutableDataGrowBytes + 380\n\u00a0 | 6 | Foundation 0x0000000186cb59dc -[NSConcreteMutableData appendBytes:length:] + 424\n\u00a0 | 7 | ImageIO 0x00000001885f2a90 IIOImageWriteSession::putBytes() + 180\n\u00a0 | 8 | ImageIO 0x00000001885caf5c iioWriteCallback() + 40\n\u00a0 | 9 | AppleJPEG 0x00000001885452b8 aj_ostream_write + 388\n\u00a0 | 10 | AppleJPEG 0x0000000188567ab8 aj_block_encode_ac + 1332\n\u00a0 | 11 | AppleJPEG 0x0000000188537240 aj_encode_buffers_baseline + 48\n\u00a0 | 12 | AppleJPEG 0x0000000188537684 aj_encode_row + 176\n\u00a0 | 13 | AppleJPEG 0x0000000188569208 applejpeg_encode_image_row + 580\n\u00a0 | 14 | ImageIO 0x00000001886c8e10 AppleJPEGWritePlugin::writeOne() + 1268\n\u00a0 | 15 | ImageIO 0x00000001886c97d0 IIO_Writer_AppleJPEG::write() + 52\n\u00a0 | 16 | ImageIO 0x00000001886b0398 IIOImageDestination::finalize() + 1584\n\u00a0 | 17 | UIKitCore 0x00000001b319a950 _UIImageJPEGRepresentation + 648\n\u00a0 | 18 | Kingfisher 0x0000000103b12fec data (image, original) (CacheSerializer.swift:71)\n\u00a0 | 19 | Kingfisher 0x0000000103b12d58 data () (CacheSerializer.swift:65)\n\u00a0 | 20 | Kingfisher 0x0000000103b1d748 _T010Kingfisher10ImageCacheC5storeySo7UIImageC_10Foundation4DataVSg8originalSS6forKeySS19processorIdentifierAA0C10Serializer_p05cacheM0Sb6toDiskyycSg17completionHandlertFyycfU (ImageCache.swift:212)\n\u00a0 | 21 | Kingfisher 0x0000000103b29d84 _T010Kingfisher10ImageCacheC5storeySo7UIImageC_10Foundation4DataVSg8originalSS6forKeySS19processorIdentifierAA0C10Serializer_p05cacheM0Sb6toDiskyycSg17completionHandlertFyycfU_TA (ImageCache.swift:0)\n\u00a0 | 22 | Kingfisher 0x0000000103b1cd9c _T0Ieg_IeyB_TR (ImageCache.swift:0)\n\u00a0 | 23 | libdispatch.dylib 0x0000000185d5d6c8 _dispatch_call_block_and_release + 20\n\u00a0 | 24 | libdispatch.dylib 0x0000000185d5e484 _dispatch_client_callout + 12\n\u00a0 | 25 | libdispatch.dylib 0x0000000185d38fb0 _dispatch_lane_serial_drain$VARIANT$armv81 + 544\n\u00a0 | 26 | libdispatch.dylib 0x0000000185d39af4 _dispatch_lane_invoke$VARIANT$armv81 + 408\n\u00a0 | 27 | libdispatch.dylib 0x0000000185d41f14 _dispatch_workloop_worker_thread + 580\n\u00a0 | 28 | libsystem_pthread.dylib 0x0000000185f400dc _pthread_wqthread + 308\n\u00a0 | 29 | libsystem_pthread.dylib 0x0000000185f42cec start_wqthread + 0\n```. We are seeing similar crashes in our apps, but are having issues tracking down the cause. We were wondering if it is image sized / memory based. Any suggestions here? \nWe are currently in production with v4.9.0, but will be moving to the latest in our next release.\n```\n0 | CoreFoundation 0x0000000186323ea0 __exceptionPreprocess + 224\n-- | --\n\u00a0 | 1 | libobjc.A.dylib 0x00000001854f5a40 objc_exception_throw + 52\n\u00a0 | 2 | Foundation 0x0000000186db844c NSOutOfMemoryErrorHandler + 52\n\u00a0 | 3 | CoreFoundation 0x0000000186257d98 __CFReallocationFailed + 88\n\u00a0 | 4 | CoreFoundation 0x0000000186257d38 __CFSafelyReallocate + 64\n\u00a0 | 5 | Foundation 0x0000000186d6d6b0 _NSMutableDataGrowBytes + 380\n\u00a0 | 6 | Foundation 0x0000000186cb59dc -[NSConcreteMutableData appendBytes:length:] + 424\n\u00a0 | 7 | ImageIO 0x00000001885f2a90 IIOImageWriteSession::putBytes() + 180\n\u00a0 | 8 | ImageIO 0x00000001885caf5c iioWriteCallback() + 40\n\u00a0 | 9 | AppleJPEG 0x00000001885452b8 aj_ostream_write + 388\n\u00a0 | 10 | AppleJPEG 0x0000000188567ab8 aj_block_encode_ac + 1332\n\u00a0 | 11 | AppleJPEG 0x0000000188537240 aj_encode_buffers_baseline + 48\n\u00a0 | 12 | AppleJPEG 0x0000000188537684 aj_encode_row + 176\n\u00a0 | 13 | AppleJPEG 0x0000000188569208 applejpeg_encode_image_row + 580\n\u00a0 | 14 | ImageIO 0x00000001886c8e10 AppleJPEGWritePlugin::writeOne() + 1268\n\u00a0 | 15 | ImageIO 0x00000001886c97d0 IIO_Writer_AppleJPEG::write() + 52\n\u00a0 | 16 | ImageIO 0x00000001886b0398 IIOImageDestination::finalize() + 1584\n\u00a0 | 17 | UIKitCore 0x00000001b319a950 _UIImageJPEGRepresentation + 648\n\u00a0 | 18 | Kingfisher 0x0000000103b12fec data (image, original) (CacheSerializer.swift:71)\n\u00a0 | 19 | Kingfisher 0x0000000103b12d58 data () (CacheSerializer.swift:65)\n\u00a0 | 20 | Kingfisher 0x0000000103b1d748 _T010Kingfisher10ImageCacheC5storeySo7UIImageC_10Foundation4DataVSg8originalSS6forKeySS19processorIdentifierAA0C10Serializer_p05cacheM0Sb6toDiskyycSg17completionHandlertFyycfU (ImageCache.swift:212)\n\u00a0 | 21 | Kingfisher 0x0000000103b29d84 _T010Kingfisher10ImageCacheC5storeySo7UIImageC_10Foundation4DataVSg8originalSS6forKeySS19processorIdentifierAA0C10Serializer_p05cacheM0Sb6toDiskyycSg17completionHandlertFyycfU_TA (ImageCache.swift:0)\n\u00a0 | 22 | Kingfisher 0x0000000103b1cd9c _T0Ieg_IeyB_TR (ImageCache.swift:0)\n\u00a0 | 23 | libdispatch.dylib 0x0000000185d5d6c8 _dispatch_call_block_and_release + 20\n\u00a0 | 24 | libdispatch.dylib 0x0000000185d5e484 _dispatch_client_callout + 12\n\u00a0 | 25 | libdispatch.dylib 0x0000000185d38fb0 _dispatch_lane_serial_drain$VARIANT$armv81 + 544\n\u00a0 | 26 | libdispatch.dylib 0x0000000185d39af4 _dispatch_lane_invoke$VARIANT$armv81 + 408\n\u00a0 | 27 | libdispatch.dylib 0x0000000185d41f14 _dispatch_workloop_worker_thread + 580\n\u00a0 | 28 | libsystem_pthread.dylib 0x0000000185f400dc _pthread_wqthread + 308\n\u00a0 | 29 | libsystem_pthread.dylib 0x0000000185f42cec start_wqthread + 0\n0 | CoreFoundation 0x0000000186323ea0 __exceptionPreprocess + 224\n-- | --\n\u00a0 | 1 | libobjc.A.dylib 0x00000001854f5a40 objc_exception_throw + 52\n\u00a0 | 2 | Foundation 0x0000000186db844c NSOutOfMemoryErrorHandler + 52\n\u00a0 | 3 | CoreFoundation 0x0000000186257d98 __CFReallocationFailed + 88\n\u00a0 | 4 | CoreFoundation 0x0000000186257d38 __CFSafelyReallocate + 64\n\u00a0 | 5 | Foundation 0x0000000186d6d6b0 _NSMutableDataGrowBytes + 380\n\u00a0 | 6 | Foundation 0x0000000186cb59dc -[NSConcreteMutableData appendBytes:length:] + 424\n\u00a0 | 7 | ImageIO 0x00000001885f2a90 IIOImageWriteSession::putBytes() + 180\n\u00a0 | 8 | ImageIO 0x00000001885caf5c iioWriteCallback() + 40\n\u00a0 | 9 | AppleJPEG 0x00000001885452b8 aj_ostream_write + 388\n\u00a0 | 10 | AppleJPEG 0x0000000188567ab8 aj_block_encode_ac + 1332\n\u00a0 | 11 | AppleJPEG 0x0000000188537240 aj_encode_buffers_baseline + 48\n\u00a0 | 12 | AppleJPEG 0x0000000188537684 aj_encode_row + 176\n\u00a0 | 13 | AppleJPEG 0x0000000188569208 applejpeg_encode_image_row + 580\n\u00a0 | 14 | ImageIO 0x00000001886c8e10 AppleJPEGWritePlugin::writeOne() + 1268\n\u00a0 | 15 | ImageIO 0x00000001886c97d0 IIO_Writer_AppleJPEG::write() + 52\n\u00a0 | 16 | ImageIO 0x00000001886b0398 IIOImageDestination::finalize() + 1584\n\u00a0 | 17 | UIKitCore 0x00000001b319a950 _UIImageJPEGRepresentation + 648\n\u00a0 | 18 | Kingfisher 0x0000000103b12fec data (image, original) (CacheSerializer.swift:71)\n\u00a0 | 19 | Kingfisher 0x0000000103b12d58 data () (CacheSerializer.swift:65)\n\u00a0 | 20 | Kingfisher 0x0000000103b1d748 _T010Kingfisher10ImageCacheC5storeySo7UIImageC_10Foundation4DataVSg8originalSS6forKeySS19processorIdentifierAA0C10Serializer_p05cacheM0Sb6toDiskyycSg17completionHandlertFyycfU (ImageCache.swift:212)\n\u00a0 | 21 | Kingfisher 0x0000000103b29d84 _T010Kingfisher10ImageCacheC5storeySo7UIImageC_10Foundation4DataVSg8originalSS6forKeySS19processorIdentifierAA0C10Serializer_p05cacheM0Sb6toDiskyycSg17completionHandlertFyycfU_TA (ImageCache.swift:0)\n\u00a0 | 22 | Kingfisher 0x0000000103b1cd9c _T0Ieg_IeyB_TR (ImageCache.swift:0)\n\u00a0 | 23 | libdispatch.dylib 0x0000000185d5d6c8 _dispatch_call_block_and_release + 20\n\u00a0 | 24 | libdispatch.dylib 0x0000000185d5e484 _dispatch_client_callout + 12\n\u00a0 | 25 | libdispatch.dylib 0x0000000185d38fb0 _dispatch_lane_serial_drain$VARIANT$armv81 + 544\n\u00a0 | 26 | libdispatch.dylib 0x0000000185d39af4 _dispatch_lane_invoke$VARIANT$armv81 + 408\n\u00a0 | 27 | libdispatch.dylib 0x0000000185d41f14 _dispatch_workloop_worker_thread + 580\n\u00a0 | 28 | libsystem_pthread.dylib 0x0000000185f400dc _pthread_wqthread + 308\n\u00a0 | 29 | libsystem_pthread.dylib 0x0000000185f42cec start_wqthread + 0\n0 | CoreFoundation 0x0000000186323ea0 __exceptionPreprocess + 224\n-- | --\n\u00a0 | 1 | libobjc.A.dylib 0x00000001854f5a40 objc_exception_throw + 52\n\u00a0 | 2 | Foundation 0x0000000186db844c NSOutOfMemoryErrorHandler + 52\n\u00a0 | 3 | CoreFoundation 0x0000000186257d98 __CFReallocationFailed + 88\n\u00a0 | 4 | CoreFoundation 0x0000000186257d38 __CFSafelyReallocate + 64\n\u00a0 | 5 | Foundation 0x0000000186d6d6b0 _NSMutableDataGrowBytes + 380\n\u00a0 | 6 | Foundation 0x0000000186cb59dc -[NSConcreteMutableData appendBytes:length:] + 424\n\u00a0 | 7 | ImageIO 0x00000001885f2a90 IIOImageWriteSession::putBytes() + 180\n\u00a0 | 8 | ImageIO 0x00000001885caf5c iioWriteCallback() + 40\n\u00a0 | 9 | AppleJPEG 0x00000001885452b8 aj_ostream_write + 388\n\u00a0 | 10 | AppleJPEG 0x0000000188567ab8 aj_block_encode_ac + 1332\n\u00a0 | 11 | AppleJPEG 0x0000000188537240 aj_encode_buffers_baseline + 48\n\u00a0 | 12 | AppleJPEG 0x0000000188537684 aj_encode_row + 176\n\u00a0 | 13 | AppleJPEG 0x0000000188569208 applejpeg_encode_image_row + 580\n\u00a0 | 14 | ImageIO 0x00000001886c8e10 AppleJPEGWritePlugin::writeOne() + 1268\n\u00a0 | 15 | ImageIO 0x00000001886c97d0 IIO_Writer_AppleJPEG::write() + 52\n\u00a0 | 16 | ImageIO 0x00000001886b0398 IIOImageDestination::finalize() + 1584\n\u00a0 | 17 | UIKitCore 0x00000001b319a950 _UIImageJPEGRepresentation + 648\n\u00a0 | 18 | Kingfisher 0x0000000103b12fec data (image, original) (CacheSerializer.swift:71)\n\u00a0 | 19 | Kingfisher 0x0000000103b12d58 data () (CacheSerializer.swift:65)\n\u00a0 | 20 | Kingfisher 0x0000000103b1d748 _T010Kingfisher10ImageCacheC5storeySo7UIImageC_10Foundation4DataVSg8originalSS6forKeySS19processorIdentifierAA0C10Serializer_p05cacheM0Sb6toDiskyycSg17completionHandlertFyycfU (ImageCache.swift:212)\n\u00a0 | 21 | Kingfisher 0x0000000103b29d84 _T010Kingfisher10ImageCacheC5storeySo7UIImageC_10Foundation4DataVSg8originalSS6forKeySS19processorIdentifierAA0C10Serializer_p05cacheM0Sb6toDiskyycSg17completionHandlertFyycfU_TA (ImageCache.swift:0)\n\u00a0 | 22 | Kingfisher 0x0000000103b1cd9c _T0Ieg_IeyB_TR (ImageCache.swift:0)\n\u00a0 | 23 | libdispatch.dylib 0x0000000185d5d6c8 _dispatch_call_block_and_release + 20\n\u00a0 | 24 | libdispatch.dylib 0x0000000185d5e484 _dispatch_client_callout + 12\n\u00a0 | 25 | libdispatch.dylib 0x0000000185d38fb0 _dispatch_lane_serial_drain$VARIANT$armv81 + 544\n\u00a0 | 26 | libdispatch.dylib 0x0000000185d39af4 _dispatch_lane_invoke$VARIANT$armv81 + 408\n\u00a0 | 27 | libdispatch.dylib 0x0000000185d41f14 _dispatch_workloop_worker_thread + 580\n\u00a0 | 28 | libsystem_pthread.dylib 0x0000000185f400dc _pthread_wqthread + 308\n\u00a0 | 29 | libsystem_pthread.dylib 0x0000000185f42cec start_wqthread + 0\n``. Thanks for all that info @onevcat . We are actually shipping our next release settingmaxMemoryCostto:maxMemoryCost = 100 * 1024 * 1024 // 100mb`\nWould that also help prevent this issue? Or do you suggest setting it to 1 to completely disable it until we move to v5?. Thanks @onevcat we appreciate your help! We are setting this for now in our release going out this week, and we are moving to v5 for our next big release. Great work with KF btw!. @onevcat We have a pod, URBNSwiftyConvenience, which also includes a Result type. We reference our type throughout our apps-- for now to be able to update to v5 I had to just be more specific with our references, ie URBNSwiftyConvenience.Result instead of Result (which now gives compile errors due to namespace issues).\nThis \"workaround\" does work for us now so we will be upgrading to v5! Our eventual plan also is to use Apple's Result as well whenever that is a thing.\nThanks again for your prompt responses!. ",
    "R-U-N": "@onevcat  So it mean that the default behavior for the ImageProcessor is to process the image downloaded from network and that cache the processed Image so it won't be process again after loading from disk?. I got it,Thanks. ",
    "ldp940622": "It seems that I met this problem too, when I use a custom processor, I found the memory cached image is not same as the disk cached image .. @onevcat Sorry, I found the image is not the png format, so when the image be cached on disk, it lose the alpha channel. This is my fault and I'm very sorry for this comment.. ",
    "8bitramen": "I'm having a similar issue on the project i'm currently working on. The collectionView in question is reused a couple of times, and for some reason it's not crashing with some photos (when i do the same behavior) but with others, it is. . ",
    "ludriv": "You can do it your own by using the same container url in the main app and extensions.\n```\nlet containerURL = FileManager.default.containerURL(forSecurityApplicationGroupIdentifier: \"foo.bar.shared\")!\nKingfisherManager.shared.cache = ImageCache(name: \"shared\", path: containerURL.path)\n```. ",
    "codebendr-product-designer": "Thank you for this. \nRegards,\nEvans. \nSent from my iPhone 7\n\nOn Aug 24, 2018, at 7:56 AM, Ludovic Riviere notifications@github.com wrote:\nYou can do it your own by using the same container url in the main app and extensions.\nlet containerURL = FileManager.default.containerURL(forSecurityApplicationGroupIdentifier: \"foo.bar.shared\")!\nKingfisherManager.shared.cache = ImageCache(name: \"shared\", path: containerURL.path)\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. \n",
    "zhongwuzw": "@onevcat Emm, IMO, status code should do this thing, to tell user what's wrong with it, e.x. not found 404, forbidden 403 (status code seems  more clear than response body and also is its responsibility), if status code belongs to error category, which means this request is invalid, for us the image library, means no valid image.\nBut if user always wants to  get the response data, no matter what error code is, I think he can implement the delegate of isValidStatusCode(_ code: Int, for downloader: ImageDownloader) and always return true, so he can get all what he wants. @onevcat What do you think \ud83e\udd14 ?. @onevcat Emm, am I missing something? we call  completion handler in place, and in callCompletionHandlerFailure, we would clean fetchload, so no erasing issue would happen.. @onevcat \ud83e\udd14 Emm, could you please read the code again to ensure what you want to express? \ud83d\ude02 We call callCompletionHandlerFailure In urlSession(_:dataTask:didReceive:completionHandler:), it removes downloadHolder fetchLoad or any callbacks. \nTBO. After this PR, no things breaking.. Emm, can you show me the code link that I can figure out? Where it would passed to users? Thanks. - URLSession:task:didCompleteWithError:  would be called, but nothing would do because every callback has been cleaned. \nSorry I truly can't find any issue like you said. \ud83d\ude22 . @onevcat Emm, the reason I added the check is to make it more robust, if user use a customView A extension A: Placeholder {} as a placeholder view, then he reuse this placeholder view for other purpose, maybe added to another view, after that, if UIImageView reuse and load a image with another placeholder B, it would reset placeholder, which means remove A from superview. So may break something. Maybe it's the rare case? Feel free to close this PR if it not necessary. \ud83d\ude02 . @onevcat \ud83d\udc4c , yeah, it's up to you, but I want to say, hold them longer maybe very simple as you think, but it would leads more useless Networking\u3001CPU\u3001Memory or any system resources when download image\u3001decode image\u3001save image etc., and just extend lifetime of objects user created is not a very good practice IMO, objects may contains many other objects, so not just a simple UIImageView.\nWe can see, AFNetworking\u3001SDWebImage both would not extend the lifetime of UIImageView.. From this line [weak base], I assume you don't want to retain UIImageView, but it's not what you want, so this makes no sense in here any more IMO.. ",
    "ednofedulo": "you need to set\nmarker.tracksInfoWindowChanges = true\nand disable it on completion of setImage. ",
    "hernangonzalez": "Hi @onevcat ,\nI am also seeing this even with keepCurrentImageWhileLoading.  \nI think my issue is with the transition. Since even with that flags it tries to set to nil the placeholder. Or am I using it wrong there?\nThanks,\nH.. Nevermind, @onevcat. I was not using that flag on my second call. . ",
    "shadyk": "I forked Kingfisher 4.8.1. \nChanged something in Xcode 9.4.1 (swift 4.1)\nthen i tried to to install the pod from my github \n pod 'Kingfisher', :git => 'https://github.com/shadyk/Kingfisher.git', :branch => \"master\".\nit is giving the following errors: \nPre-downloading: Kingfisher from https://github.com/shadyk/Kingfisher.git, branch master\n[!] Failed to load 'Kingfisher' podspec: \n[!] Invalid Kingfisher.podspec file: undefined method `swift_version=' for #.\n#  from /var/folders/44/vdkn4f6951n4bjnhf71dcp5c0000gn/T/d20180903-13628-1aen4yy/Kingfisher.podspec:28\n #  -------------------------------------------\n #  \n\ns.swift_version = \"4.1\"\n #\n #  -\n\nIs it something from my side? or Kingfisher?. ",
    "DreamParagon": "\u521a\u521a\u53d1\u73b0\u6a21\u62df\u5668\u662f\u597d\u4e86\uff0c\u4f46\u662f\u771f\u673a\u4e0a\u8fd8\u662f\u4e0d\u884cImageCache.default.clearMemoryCache()\nImageCache.default.cache.clearDiskCache()\uff0c\u8fd9\u4e9b\u52a0\u4e0a\u540e\u8fd8\u662f\u6ca1\u6cd5\u6539\u53d8\u65e7\u56fe\u7247. \u53e6\u5916\uff0c\u6211\u4fee\u6539maxCachePeriodInSecond = 60\uff0c\u8fc7\u4e865\u5206\u949f\uff0c\u6211\u91cd\u65b0\u8fd0\u884cxcode\u542f\u52a8\u6211\u7684app\uff0c\u53d1\u73b0\u4e5f\u5e76\u6ca1\u6709\u91cd\u65b0\u5237\u65b0\u56fe\u7247\u3002\u3002\u3002\u7528\u4e86\u51e0\u53f0\u771f\u673a\u8bbe\u5907\uff0c\u5747\u662f\u6b64\u95ee\u9898\uff0c\u6a21\u62df\u5668\u8fd0\u884c\uff0cImageCache.default.clearMemoryCache()\nImageCache.default.cache.clearDiskCache()\n\u8fd9\u4fe9\u884c\u4ee3\u7801\u53ef\u4ee5\u4fdd\u8bc1\u91cd\u65b0\u542f\u52a8\u540e\uff0c\u7f13\u5b58\u662f\u88ab\u6e05\u6389\u4e86\u7684\uff0c\u80fd\u591f\u770b\u5230\u65b0\u56fe\u7247. \n\u5b9e\u9645\u4e0a\uff0c\u5982\u56fe\uff0c\u5728\u6211\u6e05\u9664\u6389\u7f13\u5b58\u540e\uff0c\u6211\u770b\u5230kingfisher\u7684\u7f13\u5b58\u6587\u4ef6\u5939\u5185\u5df2\u7ecf\u7a7a\u4e86\u3002\u3002\u3002\u6240\u4ee5\u6211\u5f88\u56f0\u60d1\uff0c\u4e0d\u77e5\u9053\u65e7\u7684\u56fe\u7247\u662f\u54ea\u91cc\u6765\u7684\uff0c\u611f\u8c22\u55b5\u5927\u91cd\u5f00\u8fd9\u4e2aissue~. \n\u4f60\u597d\uff0c\u55b5\u5927\uff0c\u8fd9\u662f\u6211\u5728\u6e05\u9664\u7f13\u5b58\u540e\u672a\u7ecf\u4efb\u4f55\u4e0eapp\u4ea4\u4e92\uff0c\u76f4\u63a5\u6740\u6389\u7a0b\u5e8f\u518d\u8fdb\u6765\u4e4b\u540e\u7684\u65ad\u70b9\u622a\u56fe\u3002\n\n\u8fd9\u662f\u6211\u5728\u4e0a\u6b21\u6d4b\u8bd5\u540e\u7559\u4e0b\u6765\u7684\u7f13\u5b58\u672a\u88ab\u6e05\u9664\uff0c\u6740\u6389\u7a0b\u5e8f\u540e\u518d\u8fdb\u6765\u7684\u65ad\u70b9\u622a\u56fe\n\u53e6\u5916\uff0c\u5728App\u8fd0\u884c\u4e2d\uff0c\u6211\u4e5f\u770b\u5230type\u6253\u5370\u51fa\u6765\u7684\u662fmemory\uff0c\u8fd9\u4e9b\u6253\u5370\u770b\u4e0a\u53bb\u90fd\u662f\u6b63\u786e\u7684. \u611f\u8c22\u55b5\u5927\u7684\u8010\u5fc3\uff0c\u6211\u5148\u53bb\u95ee\u95ee\u670d\u52a1\u7aef\uff0c\u60a8\u53ef\u4ee5\u5148\u5173\u95ed\u8fd9\u4e2aissue\uff0c\u5341\u5206\u611f\u8c22. ",
    "Z-JaDe": "\u8fd9\u79cd\u5199\u6cd5\u611f\u89c9\u5f88\u723d\uff0c\u4e5f\u5f88\u8212\u670d. \u73b0\u5728options\u662f\u679a\u4e3e\u7684\u65b9\u5f0f\u6765\u5199\u7684\uff0c\u5982\u679c\u6309\u7167rx\u90a3\u79cd\u601d\u60f3\u5199\u7684\u8bdd\uff0c\u5047\u8bbe\u6211\u96c6\u6210\u9879\u76ee\u540e\u6709\u4ec0\u4e48\u5176\u4ed6\u7684\u6269\u5c55\uff0c\u53ea\u8981\u9879\u76ee\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u751f\u4ea7\u8005\uff0c\u9075\u5faa\u4e0b\u8f7d\u72b6\u6001\u7684\u534f\u8bae\uff0c\u7136\u540e\u5c31\u80fd\u548c\u73b0\u6709\u7684Kingfisher\u5b8c\u7f8e\u517c\u5bb9. ",
    "MariaKulkova": "@reenaphilip \"If set, Kingfisher will try to retrieve the image from memory cache first. If the image is not in memory cache, then it will ignore the disk cache but download the image again from network\"\nIt seems to me that your image is in memory when the data behind the URL changes. \nIf image refreshing is critical I use [.forceRefresh, .keepCurrentImageWhileLoading]. This combination keeps the current image visible and updates the image data ignoring cache.. ",
    "reenaphilip": "@MariaKulkova Thank you for the solution. I tried with that and its working fine. But when I used it to load images, in tableview, there is problem in reusing the same images in different cells. \nI am loading cells from an object array. Each object will have image url and the imageview has to be loaded from the corresponding imageURL. When I use [.forceRefresh, .keepCurrentImageWhileLoading], tableview reuses the images. Why this happens? Is it because of the wrong handling of tableview ?. ",
    "aeberbach": "Does Kingfisher support detection changed network resource by examining Etag responses or by using conditional GET requests and taking note of the 304 status response?\n. ",
    "bohachevskyy": "The same crash for me.\nhttp://crashes.to/s/e46726e898e. @baoluo no, I just ignore this issue :). ",
    "baoluo": "Same crash for me too, do someone found a way to fix this ?. ",
    "grighakobian": "The same crash for me. I think this crash related to memory issue.\nPlatform: ios\n Application: ImageDownloaderTest\n Version: 6.3.8 (180)\n Bundle Identifier: <>\n Issue #: 367\n Issue ID: 5be69c73f8b88c296351bdc2\n Session ID: a8e2b3f366ae4a4a86c2b1a2fd0ca683_DNE_2_v2\n Date: 2018-12-04T22:20:00Z\n OS Version: 11.4.1 (15G77)\nDevice: iPhone X\nRAM Free: 1.1%\nDisk Free: 44.5%\n. ",
    "cansurmeli": "I'm having the same issue. Any updates on this?. Ok, that makes sense now. I knew the SPM's case but when you wrote pure-Swift to the description, I though you weren't reliant on AppKit or UIKit(even though I saw their imports everywhere in your codebase). My silliness.\nCurrently, I'm building a simple scripting tool to download images from a specific web site that I should first parse the HTML content in order to be able to grab the images(just a simple side project to get into Swift scripting). Better convert it to a macOS CLI app though.\nRegarding SPM support. I think you're right. Since SPM is just for scripting+server-side projects and you're reliant on either AppKit or UIKit, you're better off without it.. ",
    "ArmsZhou": "\nI'm having the same issue. Any updates on this?\n\nem, i add the souce files to my project, and remove  the files list below:\nAnimatedImageView.swift\nUIButton+Kingfisher.swift\nWKInterfaceImage+Kingfisher.swift\nand it works.. ",
    "freezy7": "Yes, the swizzling \"magic\" cause this crash, due to the online version has a bug, we hook NotificationCenter. default.addObserver, this really is a very dangerous operation. This is only reflected in iOS12, and iOS11 doesn't have that problem. Thanks\uff01. ",
    "applepeopletsai": "Thank you for your suggestion!\nI will try it.. ",
    "RonakKhandelwal": "I can see a commit 2 days ago apparently incorporated the changes for xcode-10 but the issue is still there. Is there something specific we need to do to get the library working with the new version of xcode.\nEdit: The code is already there in the repo with corrections. Not sure where the problem is.. ",
    "rainerjungwirth": "I tried removing the kingfisher pod and added it again but the problem stays the same. Cleaning the pod cash also does not work.. i found a workaround \npod 'Kingfisher', :git => 'https://github.com/onevcat/Kingfisher.git'\nin the podfile redownloads everything directly from git. And so you get the latest version . ",
    "swftvsn": "Now that I have read a bit more code, maybe I should just do\nswift\nlet image = DefaultCacheSerializer.default.image(with: data: options: nil)\nImageCache.default.store(image, original: data, forKey: url)\nand be happy :) \nCan anyone confirm, that the code above is good to save original picture?. ",
    "joebenton": "Yeah I have got the commits after the 4.9 release which has the Swift 4.2 changes, but the build setting is still Swift 4 and needs changing with it. Let me know when you release it with that change :). Yeah thanks spotted 4.10.0 got released :). ",
    "MrBoog": "Found this today https://github.com/onevcat/Kingfisher/releases/tag/4.10.0. Feel free to try the new release now,  . ",
    "lekeCoder": "@onevcat thanks for the reply. Unfortunately l have upgrade the library. How can l downgrade or what options do l have left?. ",
    "sejolopab": "what about Carthage? I'm trying to do Carthage update on the version 4.9.0 but it's not compiling correctly ( github \"onevcat/Kingfisher\" ~> 4.9.0 ). ",
    "ParkGwangBeom": "@onevcat #1021 5.0 Based on PR. ",
    "LemonadeEX": "\n\nWhat's your CocoaPods version? Maybe it worths to try 1.6.0.beta.1.\n\nI already tried both 1.5.3 and 1.6.0.beta.1 still not working.. > The error log indicates that you are still trying to build it with Swift 4.0/4.1.\n\nHow did you set your own podspec Swift version? I guess you may need something like s.swift_version = \"4.2\" in your podspec too.\n\nTried s.swift_version = 4.2 and pod spec lint --swift-version=4.2 \nProblem still persist.\n. Problem still persist even with Xcode 10.1 update.. ",
    "tangjinzhao": "me did it too ,it didn't work, help!. ",
    "yishuiliunian": "i use cocoapods 1.5.3 and set s.swift_version = \"4.2\" , occurs this error too. ",
    "ARGAMX": "The same error on Kingfisher 4.10.0 with Xcode 9.4.1, Swift 4.1, Cocoapods 1.5.3.. ",
    "luai-kalkatawi": "Right now I have Xcode 10.1 and after I installed Kingfisher in a new project I'm facing some issues\n like:\nPlaceholder\nImageModifier\n@onevcat  Kingfisher (4.10.1) installed and Cocoapod version is 1.5.3. Need your help thanks from now.\nSOLVED\nI have pod update instead of pod install and it is working fine . ",
    "ethancheung1990": "\nThis is already open. See https://github.com/onevcat/Kingfisher/wiki/Cheat-Sheet#authentication-with-nsurlcredential\n\nthanks!. ",
    "dstranz": "@onevcat Yes, it would work. But it will be more useful to set the option rather than providing a custom callback in each case.. @onevcat I've rebases my work on 5.0 branch and change PR target branch.\nI've also add an option to use .failureImage(nil) and public var onFailureImage: Optional<Image?> to provide .some(Image?) when this option is available and .none when is not. Hope it's fine for you.. Another crash related to ImagePrefetcher:\n\n. @onevcat It couldn't be related to image size - I'm prefetching only small png's. 32x32 px, around 1 KB.\nAnother one:\n```\nmalloc: Incorrect checksum for freed object 0x1034191a8: probably modified after being freed. Corrupt value: 0x2ffffffe00000000\nPlatform: ios\nDate: 2019-01-08T15:48:00Z\nOS Version: 12.1.2 (16C101)\nDevice: iPhone X\nRAM Free: 7.8%\nDisk Free: 28.4%\nCrashed: com.onevcat.Kingfisher.ImageDownloader.Process\n0  libsystem_kernel.dylib         0x1ebeb7104 __pthread_kill + 8\n1  libsystem_pthread.dylib        0x1ebf37948 pthread_kill$VARIANT$armv81 + 296\n2  libsystem_c.dylib              0x1ebe0ed78 abort + 140\n3  libsystem_malloc.dylib         0x1ebf0b768 malloc_put + 570\n4  libsystem_malloc.dylib         0x1ebf0b998 malloc_zone_error + 104\n5  libsystem_malloc.dylib         0x1ebf0b258 free_list_checksum_botch + 36\n6  libsystem_malloc.dylib         0x1ebf071c4 tiny_free_list_remove_ptr + 488\n7  libsystem_malloc.dylib         0x1ebf07c28 tiny_free_no_lock + 672\n8  libsystem_malloc.dylib         0x1ebf08dc8 free_tiny + 376\n9  libswiftCore.dylib             0x1018ff58c _hidden#24848 (__hidden#24872_:627)\n10 Kingfisher                     0x100fcc28c objectdestroy.54Tm + 4315021964\n11 libswiftCore.dylib             0x1018ff58c hidden#24848 (__hidden#24872_:627)\n12 Kingfisher                     0x100fcc2d8 block_destroy_helper ()\n13 libswiftCore.dylib             0x1018ff58c hidden#24848 (__hidden#24872_:627)\n14 Kingfisher                     0x100fcc39c partial apply for thunk for @escaping @callee_guaranteed (@guaranteed ImageDownloader, @in_guaranteed Result, @in_guaranteed SessionDataTask.TaskCallback) -> () ()\n15 libswiftCore.dylib             0x1018ff58c hidden#24848 (__hidden#24872_:627)\n16 Kingfisher                     0x100fa4cb0 Delegate.__deallocating_deinit (Delegate.swift:30)\n17 libswiftCore.dylib             0x1018ff58c hidden#24848 (__hidden#24872_:627)\n18 Kingfisher                     0x100fefe80 SessionDataTask.__deallocating_deinit (SessionDataTask.swift:31)\n19 libswiftCore.dylib             0x1018ff58c hidden#24848 (__hidden#24872_:627)\n20 Kingfisher                     0x100fd1394 closure #1 in ImagePrefetcher.downloadAndCache(:) (Result.swift:55)\n21 Kingfisher                     0x100fe5ee0 cacheImage #1 (:) in KingfisherManager.loadAndCacheImage(source:options:progressBlock:completionHandler:) (KingfisherManager.swift:272)\n22 Kingfisher                     0x100fcb514 partial apply for closure #1 in closure #4 in ImageDownloader.downloadImage(with:options:progressBlock:completionHandler:) ()\n23 Kingfisher                     0x100fcb534 partial apply for thunk for @escaping @callee_guaranteed (@guaranteed ImageDownloader, @in_guaranteed Result) -> () ()\n24 Kingfisher                     0x100fcb58c partial apply for specialized  ()\n25 Kingfisher                     0x100fc994c closure #2 in closure #1 in closure #5 in ImageDownloader.downloadImage(with:options:progressBlock:completionHandler:) (ImageDownloader.swift)\n26 Kingfisher                     0x100f9dd5c specialized CallbackQueue.execute(:) (:54)\n27 Kingfisher                     0x100fc98b4 closure #1 in closure #5 in ImageDownloader.downloadImage(with:options:progressBlock:completionHandler:) (ImageDownloader.swift:265)\n28 Kingfisher                     0x100fcc370 partial apply for thunk for @escaping @callee_guaranteed (@guaranteed ImageDownloader, @in_guaranteed Result, @in_guaranteed SessionDataTask.TaskCallback) -> () ()\n29 Kingfisher                     0x100fcc3fc partial apply for specialized  ()\n30 Kingfisher                     0x100fc3d84 ImageDataProcessor.doProcess() (ImageDataProcessor.swift)\n31 Kingfisher                     0x100fcc478 partial apply ()\n32 Kingfisher                     0x100fa1b54 partial apply for closure #2 in CallbackQueue.execute(:) ()\n33 Kingfisher                     0x100f9a028 thunk for @escaping @callee_guaranteed () -> () ()\n34 libdispatch.dylib              0x1ebd596c8 _dispatch_call_block_and_release + 24\n35 libdispatch.dylib              0x1ebd5a484 _dispatch_client_callout + 16\n36 libdispatch.dylib              0x1ebd34fa0 _dispatch_lane_serial_drain$VARIANT$armv81 + 548\n37 libdispatch.dylib              0x1ebd35ae4 _dispatch_lane_invoke$VARIANT$armv81 + 412\n38 libdispatch.dylib              0x1ebd3df04 _dispatch_workloop_worker_thread + 584\n39 libsystem_pthread.dylib        0x1ebf3d0dc _pthread_wqthread + 312\n40 libsystem_pthread.dylib        0x1ebf3fcec start_wqthread + 4\n```. And another one:\n```\nCrashed: com.onevcat.Kingfisher.ImageDownloader.Process\nEXC_BAD_ACCESS KERN_INVALID_ADDRESS 0x0000000000000000\nPlatform: ios\nDate: 2019-01-08T16:01:00Z\nOS Version: 12.1.2 (16C101)\nDevice: iPhone X\nRAM Free: 9.1%\nDisk Free: 28.3%\nCrashed: com.onevcat.Kingfisher.ImageDownloader.Process\n0  libswiftCore.dylib             0x101c67ef4 hidden#24852 (__hidden#24874_:1095)\n1  libswiftCore.dylib             0x101c66764 hidden#24844 (__hidden#24874_:1330)\n2  Kingfisher                     0x1013267d8 specialized VariantDictionaryBuffer.ensureUniqueNativeBuffer(withBucketCount:) ()\n3  Kingfisher                     0x101326e08 specialized _VariantDictionaryBuffer.nativeRemoveObject(forKey:) ()\n4  Kingfisher                     0x101325378 closure #1 in ImagePrefetcher.downloadAndCache(:) ()\n5  Kingfisher                     0x101339ee0 cacheImage #1 (:) in KingfisherManager.loadAndCacheImage(source:options:progressBlock:completionHandler:) (KingfisherManager.swift:272)\n6  Kingfisher                     0x10131f514 partial apply for closure #1 in closure #4 in ImageDownloader.downloadImage(with:options:progressBlock:completionHandler:) ()\n7  Kingfisher                     0x10131f534 partial apply for thunk for @escaping @callee_guaranteed (@guaranteed ImageDownloader, @in_guaranteed Result) -> () ()\n8  Kingfisher                     0x10131f58c partial apply for specialized  ()\n9  Kingfisher                     0x10131d94c closure #2 in closure #1 in closure #5 in ImageDownloader.downloadImage(with:options:progressBlock:completionHandler:) (ImageDownloader.swift)\n10 Kingfisher                     0x1012f1d5c specialized CallbackQueue.execute(:) (:54)\n11 Kingfisher                     0x10131d8b4 closure #1 in closure #5 in ImageDownloader.downloadImage(with:options:progressBlock:completionHandler:) (ImageDownloader.swift:265)\n12 Kingfisher                     0x101320370 partial apply for thunk for @escaping @callee_guaranteed (@guaranteed ImageDownloader, @in_guaranteed Result, @in_guaranteed SessionDataTask.TaskCallback) -> () ()\n13 Kingfisher                     0x1013203fc partial apply for specialized  ()\n14 Kingfisher                     0x101317d84 ImageDataProcessor.doProcess() (ImageDataProcessor.swift)\n15 Kingfisher                     0x101320478 partial apply ()\n16 Kingfisher                     0x1012f5b54 partial apply for closure #2 in CallbackQueue.execute(_:) ()\n17 Kingfisher                     0x1012ee028 thunk for @escaping @callee_guaranteed () -> () ()\n18 libdispatch.dylib              0x1ebd596c8 _dispatch_call_block_and_release + 24\n19 libdispatch.dylib              0x1ebd5a484 _dispatch_client_callout + 16\n20 libdispatch.dylib              0x1ebd34fa0 _dispatch_lane_serial_drain$VARIANT$armv81 + 548\n21 libdispatch.dylib              0x1ebd35ae4 _dispatch_lane_invoke$VARIANT$armv81 + 412\n22 libdispatch.dylib              0x1ebd3df04 _dispatch_workloop_worker_thread + 584\n23 libsystem_pthread.dylib        0x1ebf3d0dc _pthread_wqthread + 312\n24 libsystem_pthread.dylib        0x1ebf3fcec start_wqthread + 4\n``. @onevcat I works fine when I comment outImagePrefetcher(resources: urls).start()but keep image loading in cells viaimageView.kf.setImage(...)`.. @onevcat Just tried it and it crash here on iOS 12.1 Simulator:\n\n. @onevcat Wait a bit... I probably tested without the fix minutes ago. Now after Clean + Build it looks like code from fix/racing fixed also this issue.. I've just checked Fabric logs and there are zero crashes from last build with fix/racing. It looks like it fixed this issue.\nThank you @onevcat \ud83e\udd47 . ",
    "zfrankz": "```\nprivate func setupPerson() {\n        guard let profilePicture = person?.picture else { return }\n    personPicture.kf.indicatorType = .activity\n    personPicture.kf.setImage(with: URL(string: profilePicture), placeholder: UIImage(assetIdentifier: .appIcon))\n\n}\n```. ",
    "iOkay": "Hi @onevcat \nThanks for your explain. I know what's wrong in my mind.\nIt is possible to create an extension to save format while serializing image to forbid calculating again.. Thanks your answer. I know what to do.. ",
    "JasonSparrow": "\u95ee\u9898\u5df2\u89e3\u51b3. \u6211\u8be5\u5982\u4f55\u5220\u9664\u8fd9\u4e2aissue.. ",
    "yuyedaidao": "\u6211\u662f\u5728CollectionView\u4e0a\u653e\u4e86\u51e0\u4e2aAnimatedImageView\uff0c\u7136\u540e\u6eda\u51e0\u4e0bcup\u5229\u7528\u7387\u5c31\u5230300\u591a\u4e86\uff0c\u52a8\u753b\u6709\u660e\u663e\u7684\u4e0d\u534f\u8c03\uff0c\u611f\u89c9\u50cf\u662f\u6709\u597d\u51e0\u4e2a\u5728\u4e00\u5757\u52a8\uff0c\u624b\u673a\u53d1\u70ed\u4e25\u91cd. ",
    "dudisitchy": "Ok... let me put all the code inside cellForRowAt in order to get your insights.\nBecause I download the images if there is no cache for it.\n```\nif listUsers[indexPath.row].cPicture.count > 0 {\n     ImageCache.default.retrieveImage(forKey: listUsers[indexPath.row].cPicture, options: nil) { image, cacheType in\n         if let image = image {\n             cell.iv_picture.image = image.resize(targetSize: CGSize.init(width: cell.iv_picture.bounds.width, height: cell.iv_picture.bounds.height))\n         }\n         else {\n             cell.activityIndicator.startAnimating()\n             let imgRef = mainVariables.storageBucketImages.reference(withPath: \"/images/users/\" + self.listUsers[indexPath.row].cPicture)\n         // Fetch the download URL\n         imgRef.downloadURL { url, error in\n             if error != nil {\n                 cell.activityIndicator.stopAnimating()\n                 cell.iv_picture.image = UIImage.init(named: \"user_image\")\n             }\n             else {\n                 cell.iv_picture.kf.setImage(with: url, completionHandler: { (image, error, cacheType, imageUrl) in\n                     if image == nil || error != nil {\n                          cell.iv_picture.image = UIImage.init(named: \"user_image\")\n                     }\n                     else {\n                         ImageCache.default.store(image!, forKey: self.listUsers[indexPath.row].cPicture)\n                         cell.iv_picture.image = image!.resize(targetSize: CGSize.init(width: cell.iv_picture.bounds.width, height: cell.iv_picture.bounds.height))\n                     }\n\n                     cell.activityIndicator.stopAnimating()\n                 })\n             }\n         }\n     }\n }\n\n}\nelse {\n     cell.activityIndicator.stopAnimating()\n     cell.iv_picture.image = UIImage.init(named: \"user_image\")\n}\nreturn cell\n```\nThanks a lot!. Thanks for you suggestion!!!\nBut in that way the image is always dowloaded and not use the cached one. Am I right?\nHow can I avoid download if it is in cache?. Ok... I got it!\nBut when I scroll the tableview and back to the top, it keeps showing the loading indicator in images loaded already and then shows the right image.\nMy past code didn't that. Because I verify if there is an image before the imgRef.downloadURL.\nImageCache.default.retrieveImage(forKey: listUsers[indexPath.row].cPicture, options: nil) { image, cacheType in\n         if let image = image {\n             cell.iv_picture.image = image.resize(targetSize: CGSize.init(width: cell.iv_picture.bounds.width, height: cell.iv_picture.bounds.height))\n         }\n         else {\n             cell.activityIndicator.startAnimating()\n             let imgRef = mainVariables.storageBucketImages.reference(withPath: \"/images/users/\" + self.listUsers[indexPath.row].cPicture)\nHow can I do it without ImageCache.default.retrieveImage ??\nThanks a lot for you help!. Hi onevcat! I can't make this work with your suggestion. :(\nSo I create a function to download and store the UIImage and the reference in a dictionary and use it on cellForRowAt.\nFollow my solution:\n```\nfunc downloadImages(user: UserMessage) {\n     ImageCache.default.retrieveImage(forKey: user.cPicture, options: nil) { image, cacheType in\n          if let image = image {\n               self.dictUrls[user.cUid] = image\n               self.tv_users.reloadData()\n          }\n          else {\n               let imgRef = mainVariables.storageBucketImages.reference(withPath: \"/images/users/\" + user.cPicture)        \n           // Fetch the download URL\n           imgRef.downloadURL { url, error in\n                if error != nil {\n                     self.dictUrls[user.cUid] = UIImage.init(named: \"user_image\")\n                     self.tv_users.reloadData()\n                }\n           }\n           else {\n                ImageDownloader.default.downloadImage(with: url!, options: [], progressBlock: nil) { (image, error, url, data) in\n                     if image == nil || error != nil {\n                          self.dictUrls[user.cUid] = UIImage.init(named: \"user_image\")\n                          self.tv_users.reloadData()\n                     }\n                     else {\n                          ImageCache.default.store(image!, forKey: user.cPicture)\n                          self.dictUrls[user.cUid] = image?.resize(targetSize: CGSize.init(width: 65, height: 60))\n                          self.tv_users.reloadData()\n                     }\n                }\n           }\n      }\n }\n\n}\n```\nand then in cellForRowAt:\nif listUsers[indexPath.row].cPicture.count > 0 {\n     if dictUrls.count > 0 {\n         if dictUrls[listUsers[indexPath.row].cUid] != nil {\n             cell.iv_picture.image = dictUrls[listUsers[indexPath.row].cUid]\n             cell.activityIndicator.stopAnimating()\n         }\n         else {\n             cell.activityIndicator.startAnimating()\n         }\n    }\n}\nelse {\n     cell.activityIndicator.stopAnimating()\n     cell.iv_picture.image = UIImage.init(named: \"user_image\")\n}\nThanks for all your support and time spent!. ",
    "honbolau": "If kf was rewritten by other users, so what's the meaning of other users to rewrite this property? What can you do after rewriting? kf type for Kingfisher, defined as follows. With a final class like this, you cannot create a SubClass, so you cannot add an stored property directly. If only add computed property and associated property and method, don't have to fully implement a kf properties.. Feel free to close this PR if it not necessary. \ud83d\ude02. ",
    "andrei-kuzma": "For me it's unexpected behavior. The same issue can be potentially reproduced during cell reuse when previous image is loaded after current one.\nThe reason is that task is only \"partially canceled\" and even we run new task result of previous is applied. As all images are applied on main thread probably for now it's enough to check if task is not canceled or running task is the same as associated with UIImageView before applying result.\nThis change should not influence on performance and current behavior but will fix that issue. @onevcat \nThank you for proposed fix.\nCould you tell when you plan to release 5.0 version?. Hi @onevcat,\nIs there any reason why support of iOS 9 was dropped in v5.0?. \n\n\nDownsamplingImageProcessor works differently for .data(...) and .image(...)\n\nAs indicated in the doc, DownsamplingImageProcessor should be used as the first processor in the pipeline. Currently, if used by being appended to another processor, it just falls back to use the resizing processor. You are right on it, the resizing strategy is a bit different. So instead of simply use resizing as a fallback, I guess it would be better to follow the same way to create an image source and get thumbnail image from the source. I'd try to give it a fix soon.\n\nIn case when there is cached original image .image(...) will be used\n\n\napp cleanup cache directory, images will not be cached\n\nIf I am right, once the directory created, it will be always there, even you clear the disk cache. You could find related code here. The skipCreatingDirectory is only used in test cases for an injection purpose. In framework itself and for external users, the directory would be always recreated. (unless you delete the folder manually, instead of using Kingfisher's clear disk cache method. But this behavior should be out of our scape.)\n\nYou are right. My case is when content of cache directory was deleted manually.\nBut the main thing is not that this behavior exist but that it could be invisible during development.\nAnd detected too late :).\n\nFor the improvements part\nThanks again for your PR on DownloadTask!\n\nNSData will not be loaded in memory and CGImageSourceCreateWithURL will be used instead of CGImageSourceCreateWithData\n\nUnderlying, CGImageSourceCreateWithURL read the data from the URL, and then create the image source from the data. So there should be no memory difference between them.\nI am not 100% sure about it, but you can find some clue from CGImageSource doc:\n\nCGImageSource objects abstract the data-reading task. An image source can read image data from a URL, a CFData object, or a data consumer.\n\nLet me know if I am wrong with it.\n\nLooks like you are right that there is no difference between CGImageSourceCreateWithURL and CGImageSourceCreateWithData.\nBut case when we get originalImage from disk cache still can be improved using data instead of image\n\n\nhave one processor instead of two DownsamplingImageProcessor and ResizingImageProcessor\n\nKeeping ResizingImageProcessor unchanged is more or less a backward compatibility choice. Downsampling will just accept sizes smaller than the original image, with the same aspect ratio. However, the resizing processor could accept arbitrary sizes (and with any given content mode). So I guess there is not a good way to combine them in a good way and satisfy everyone after all.\nBut for most use cases (shrinking the image with the same ratio, that is, aspect fit), the DownsamplingImageProcessor should be chosen. For other purposes, such as a different content mode, users can choose resizing or downsampling followed by a resizing.\n\nFor example you have image with size 5000x5000 and you need to show it in size 50x100 with .apspectFill. Downsampling will resize that image to 100x100 and only that image will be loaded in memory and after that you 'resize' it to 50x100\nIn case when .aspectFit is used resize will not be applied (I mean that it can be handled internally)\n. \n\n\nMy case is when content of cache directory was deleted manually.\n\nThere seem to be two possible options for it:\n\nCheck folder existence every time and create one if it is not there.\nJust give some log and information.\nOr there is another way: trying to check and recreate the folder only when createFile fails, and then retry creating the file one more time. But it is a bit \"magical\" and hiding things, adding internal complexity, which I do not quite like.\n\n\nFor me handling file creation failures is more logical as it will not influence on performance on normal scenarios. It just like a handling errors: something goes wrong, we should check why and restore state (recreate directory, clean disk cache if there is not enough disk space etc.). Probably 'retry' adds more complexity but this step is not required as it is not critical path. The main goal is to avoid new failures\n\nSo, it seems that you mean to add a contentMode parameter to downsampling processor, with appending a normal resizing processor? Is my understanding correct?\n\nI'm not sure which option is better: have downsampling with contentMode and resize processors separately or have one resize processor that do downsampling internally if needed.\nThe goal of this processors is decrease memory usage and minimize image size(that also has influence on memory and performance)\nFirst one gives me ability to decide myself which one is better on each case. The second one just gives me result that I want with best algorithm( I hope :)). \nThe final decision can be made only after some tests for big and small images.\nProbably when original image is much bigger than final it make sense to combine downsampling and resize and if not resizing is preferred. I don't know. But I think that it would be great if library provide\nme processor that already has that algorithm based on tests.\nI think we can have downsampling and resize processors separately and another one processor that uses both of them internally (of course if tests give us good results)\n(Everything that I wrote are just thoughts. Currently I don't have enough time to test if it really make sense, may be in future I will. It will be great if someone can investigate this question)\nJust one more thing.\nI'm wondering what is the reason to call completionHandler when task was canceled or result of previous task is applied? Do you have real examples when it's needed?\nI my scenarios I should always filter if !error.isTaskCancelled and  !error.isNotCurrentTask.\nProbably that cases can be somehow separated from main completionHandler?\nWhat do you think about it?. ",
    "kwalker0456": "I see. You were correct about them being in skippedResources. Would .forceRefresh be the only way to handle re-downloading with KF? I am thinking I will use .forceRefresh based on a timer. Basically I have 1 UIImage and a timer that sets it to a different image URL every few seconds.. Basically yes. I only want to do it this way as my client doesn't like the way traditional carousels animate. He just wants it to switch to the next image with no carousel effect/animation, hence the timer. I want to redownload because he wants to be able to control what image is shown by changing the image at these fixed URLs.. ",
    "ixongju": "Nope! Think about that, Kingfisher is able to  auto retry when download fails, and you offer a wrong URL... Kingfisher will keep doing useless work.\nIn fact, Kingfisher downloads image from a URL which is offered by you, \nwhen it succeeded, you will get the image and error info from CompletionHandler(image, error, cacheType, imageURL), and of course the error is nil. \nwhen it failed, image will be nil, you can get the error information from error.\nSo far, errors information offered by Kingfisher are as follows:\n10000 - badData\n10001 - notModified\n10002 - invalidStatusCode\n10003 - notCached\n20000 - invalidURL\n30000 - downloadCancelledBeforeStarting. ",
    "ZSMHup": "\u6211\u4e5f\u662f\u7684\uff0c\u6211\u5728tableview\u4e0a\u52a0\u8f7d\u56fe\u7247\u65f6\u5185\u5b58\u4e00\u76f4\u5f80\u4e0a\u98d9\uff0c\u7528SDWebImage\u5c31\u6ca1\u6709\u8fd9\u4e2a\u95ee\u9898. ",
    "MarcSteven": "@zhangshuqing  I think you should use instruments to check the memory leaks  and then report the issue ,no pic ,just words ....... ",
    "SeongBrave": "\u55b5\u795e\uff0c\u60a8\u597d\uff0c\u4e0d\u597d\u610f\u601d\u554a\uff0c\u6211\u7528\u7684\u7248\u672c\u662f4.10.1\uff0c\u6211\u7684\u9519\u8bef\u662f\u56e0\u4e3a\u6211\u4f7f\u7528\u7684XcodeBuild \u662f9.4.1\u5bfc\u81f4\u7684\uff0c\u516c\u53f8\u6253\u5305\u8981\u6c42\u7528xcode9.4.1\u7684\ud83e\udd2d. ",
    "robin-nyman-mi": "Yes, this fixes the compilation error.\nI was worried that the changes would not be reflected, but it seems to work.\nThanks for the help.. ",
    "gabors": "I also noticed that there is no way to control the location of the disk cache folder.\nWhich is livable for iOS/tvOS apps, but on macOS the caches folder is created under \n~/Library/Caches/com.onevcat.Kingfisher.ImageCache.default\nI would like to be able to store this instead under \n~/Library/Caches/MY_APP_FOLDER/com.onevcat.Kingfisher.ImageCache.default\nThere is a closure I saw used for generating the directory path but it is marked as internal. Please advise.\n. ",
    "elveatles": "Thank you for the quick reply. What a bummer that it's coming from Foundation code. I'll see what I can get out of StackOverflow or Apple.. ",
    "MoElnaggar14": "issue was solved when install version '5.0', i think you need check license file in version 5.0.1 @onevcat  . ",
    "iFallen": "\u8c22\u8c22\uff0c\u90a3\u95ee\u4e00\u4e0b\u3002\n\u4e3e\u4e2a\u4f8b\u5b50\uff0c\n\u6211\u662f\u8fd9\u4e48\u5b50\u5199\u597d\uff1a\n\u5148\u4e0d\u8003\u8651iOS10 \u7684\u65b0\u65b9\u6cd5\u3002\n```\nextension Test where Base: Timer {\n    static func scheduledTimer (timeInterval: TimeInterval,\n                                   repeats: Bool,\n                                   completion:@escaping ((_ timer:Timer)->())) -> Timer{\n        return Timer.scheduledTimer(timeInterval: timeInterval,\n                                    target: self,\n                                    selector: #selector(Timer.zx.completionLoop(timer:)),//\u8fd9\u4e2a\u5730\u65b9\u6ca1\u6cd5\u5904\u7406\n                                    userInfo: completion, repeats: repeats)\n    }\n@objc static func completionLoop(timer:Timer) {//Members of constrained extensions cannot be declared @objc\n    guard let completion = timer.userInfo as? ((Timer) -> ()) else {\n        return\n    }\n    completion(timer)\n}\n\n}\n```\n\u8fd8\u662f\u76f4\u63a5\u8fd9\u4e48\u5b50\u4e9b\uff1a\n```\nextension Timer {\n    class func zx_scheduledTimer (timeInterval: TimeInterval,\n                                   repeats: Bool,\n                                   completion:@escaping ((_ timer:Timer)->())) -> Timer{\n        return Timer.scheduledTimer(timeInterval: timeInterval,\n                                    target: self,\n                                    selector: #selector(zx_completionLoop(timer:)),\n                                    userInfo: completion, repeats: repeats)\n    }\n@objc class func zx_completionLoop(timer:Timer) {\n    guard let completion = timer.userInfo as? ((Timer) -> ()) else {\n        return\n    }\n    completion(timer)\n}\n\n}\n```\nTnks,master!!!\ud83d\ude4f\ud83d\ude4f\ud83d\ude4f. ",
    "fschaus": "Thanks for the reply! Yes I am using 4.10.1. I got it to work - I had a lot of images (main feed) being decoded on the main thread at display time. Which explains why I was seeing lots of JPEG decoding traces in my main thread. \nI looked more carefully through the documentation and found the .backgroundDecode which works great. Thanks for that! The only challenge is that it is quite aggressive with the memory (as you outlined on the release not for v5.0.0) and can sometime crash the app. \nI'll try v5.0.0 and if it's indeed a bit less aggressive on the memory, I think it will be the perfect combination. \nThe only issue I still have is doing background decoding of gifs - it seem to only decode the first image and not the sequence and thus shows a still image instead of a gif. \nAm I missing something or is gif decoding on background thread not supported? Not critical for my use-case since I have a gif to display only every so often (and so can afford to decode it on the main thread) but just curious if I am missing something.\nThanks again for a great lib! . ",
    "robertmryan": "By the way, the second example doesn\u2019t reproduce the problem as consistently as my first example with 1000 images, but I wager if I add more URLs to the array, it started producing it with greater frequency, e.g.,\nswift\nlet urls = [\n    \"https://images-assets.nasa.gov/image/KSC-20171024-PH_ULA01_0001/KSC-20171024-PH_ULA01_0001~orig.jpg\",\n    \"https://images-assets.nasa.gov/image/201407020003HQ/201407020003HQ~orig.tif\",\n    \"https://images-assets.nasa.gov/image/sts063-s-007/sts063-s-007~orig.jpg\",\n    \"https://images-assets.nasa.gov/image/PIA23001/PIA23001~orig.jpg\",\n    \"https://images-assets.nasa.gov/image/PIA22977/PIA22977~orig.jpg\",\n    \"https://images-assets.nasa.gov/image/KSC-20180803-PH_BOE01_0005/KSC-20180803-PH_BOE01_0005~orig.jpg\",\n    \"https://images-assets.nasa.gov/image/PIA22990/PIA22990~orig.jpg\",\n    \"https://images-assets.nasa.gov/image/KSC-20180803-PH_BOE01_0001/KSC-20180803-PH_BOE01_0001~orig.jpg\",\n    \"https://images-assets.nasa.gov/image/AFRC2018-0287-072/AFRC2018-0287-072~orig.jpg\"\n].map { URL(string: $0)! }\nAnd, by the way, this second example actual has the \u201cSwift access race\u201d in a slightly different spot, namely:\n\nBut the consistency in both of these examples is that the image view has its image set asynchronously before the prior image had a chance to finish.. ",
    "Boxleitner": "I have the same issue.\nI solved it by stripping the function call of unused parameters\n\n. ",
    "ntvhouston": "Wonderful. Thanks a lot. It was a typo for imageView.kf.indicatorType but thanks a lot. It worked simply awesome. Thanks again.. ",
    "HebaAtallah": "the platform :ios in Podfile is 10.0 indeed.. I figured it out, the iOS Deployment Target in Project and Target in Build Settings was below 10.. ",
    "aleene": "With Xcode 10.1 and build setting to Swift 4, I get this error as well. Revert to KingFisher 4.0?. I am afraid that did not help me. I am using Carthage and get the error message in a processing struct:\n\n. ",
    "teolemon": "@HebaAtallah could you reopen this issue to make it visible again ?. ",
    "dlxxl06": "\u662f\u7684\u3002\u6700\u5f00\u59cb\u6211\u4e5f\u662f\u52a0\u4e86 scaleFactoroption \u4f46\u662f\u6ca1\u6709\u751f\u6548\uff0c\u67e5\u770b\u6e90\u7801\u624d\u53d1\u73b0\u7684\u3002\n. ",
    "IvanovDeveloper": "the same\n. > > the same\n\nI think u didn't solved it, right?\n\nI've solved it. For get ability download the image by url, I needed add \"Authorization\" header to kf request.\nIt is my code:\nlet modifier = AnyModifier { request in\n    var r = request\n    r.setValue(\"TOKEN\", forHTTPHeaderField: \"Authorization\")\n    return r\n}\nKingfisherManager.shared.defaultOptions.append(contentsOf: [KingfisherOptionsInfoItem.requestModifier(modifier)])\nKingfisher documentation https://github.com/onevcat/Kingfisher/wiki/Cheat-Sheet#downloader. ",
    "stefanosisto": "\nthe same\n\nI think u didn't solved it, right?. Thanks man! Let me try :). ",
    "zackshapiro": "Been testing this on my phone, works well from my limited testing. Looks like it's fixed some of my crashes . I'm also testing on iOS 12 but with the deploy target of 9.3, so I'm essentially just testing that this builds and runs with sub-10 iOS deploy target. ",
    "leah": "This is a very small change, unrelated to Swift 5.0. No problem though, it\u2019s not urgent!. ",
    "tprevost-phunware": "@onevcat Yeah, this also fails to build even in Swift 4.2 mode (for some reason), so I don't really think this is a Swift 5 issue (unless I'm misunderstanding something).. Ah, I see, thanks for clearing that up for me, @onevcat ! Nah I don't have a problem with using the swift5.0 branch. I tried it just now, and it seems to compile just fine! Thanks again!. ",
    "wywei": "i have found it\uff0cthank u. ",
    "patrikdevlin": "I also am always getting nil during ImageCache.default.retrieveImage(). \nEssentially if the image is cached then use the cached version. If not, go and create a thumbnail image from a video URL. I can confirm that the thumbnail and image code is working correctly because the thumbnail that is created on the fly is showing up, however when switching on value the result is always .none leading to the function -> self.setThumbnail(urlString: urlString, width: width, height: height)\nHere is my code (Swift 4):\n```swift\nlet urlString = URL(string: \"someString\")!\nlet cache = ImageCache.default\nlet width = self.contentView.bounds.width\nlet height = self.contentView.bounds.height\nif cache.isCached(forKey: urlString) {\n    cache.retrieveImage(forKey: \"cacheKey\") { result in\n        switch result {\n        case .success(let value):\n            switch value {\n            case .none:\n                self.setThumbnail(urlString: urlString, width: width, height: height)\n            case .disk:\n                DispatchQueue.main.async { self.imageView.image = value.image }\n            case .memory:\n                DispatchQueue.main.async { self.imageView.image = value.image }\n            }\n        case .failure(let error):\n            print(error)\n        }\n    }\n} else {\n    setThumbnail(urlString: urlString, width: width, height: height)\n}\nprivate func setThumbnail(urlString: String, width: CGFloat, height: CGFloat){\n    DispatchQueue.global(qos: .userInitiated).async {\n        if let image = self.createThumbnailOfVideoFromRemoteUrl(url: urlString, width: width, height: height) {\n            ImageCache.default.store(image, forKey: urlString)\n            DispatchQueue.main.async {\n                self.imageView.image = image\n            }\n        }\n    }\n}\nfunc createThumbnailOfVideoFromRemoteUrl(url: String, width: CGFloat, height: CGFloat) -> UIImage? {\n    guard let vidURL = URL(string: url) else { return nil }\n    let asset = AVAsset(url: vidURL)\n    let assetImgGenerate = AVAssetImageGenerator(asset: asset)\n    assetImgGenerate.appliesPreferredTrackTransform = true\n    //Can set this to improve performance if target size is known before hand\n    //assetImgGenerate.maximumSize = CGSize(width: width, height: height)\n    let time = CMTime(seconds: 1, preferredTimescale: 10)\n    do {\n        let img = try assetImgGenerate.copyCGImage(at: time, actualTime: nil)\n        let thumbnail = UIImage(cgImage: img)\n        return thumbnail\n    } catch {\n        print(error.localizedDescription)\n        return nil\n    }\n}\n```\nLet me know if you need any other information. Thanks in advance! \nUpdate\nI changed the store function to:\nswift\nImageCache.default.store(image, forKey: urlString, completionHandler: { (result) in\n    print(result)\n})\nand this is the result in the debugger \nswift\nCacheStoreResult(memoryCacheResult: Result.success(()), diskCacheResult: Result.success(()))\n. Hi, @onevcat \nI appreciate the timely response! Sometimes you need the extra eye... That did the job! Sorry to use up your time on such a trivial fix. \nI have another quick question if you have second. Is there any way to use imageView.kf.setImage() with a UIImage() i.e the one being returning from the video thumbnail? Or is it just for remote URLs? \nBest,\nPat. ",
    "gharary": "Problem Solved with ATS.\nThanks a lot.. ",
    "ChristopherRogers": "OK, I'll close this then. Thanks.. ",
    "sxsasha": "If  .forceRefresh set, Kingfisher will ignore the cache. But .fromCacheThenRefresh options get image from cache and then try to download. Yes, you are right. Invocation twicely completion handler is will hard complicate logic and will provoke various bugs in the future. I use your example for implement cacheThenRefresh logic in my project. Thanks). ",
    "LinusGeffarth": "@onevcat was an issue on my end, sorry! I'm fetching images with the parameters ?w=width&q=quality and for some reason it passed ?w=2&q=90 where 2 is 2px, which leads to the abovementioned issue.. ",
    "devny": "Please give me some examples... ",
    "Mephsito23": "\u6211\u540e\u6765\u5347\u7ea7\u4e86 Xcode \u523010.1 \u540e\u89e3\u51b3\u4e86\u8fd9\u4e2a\u95ee\u9898,\u56de\u8fc7\u5934\u6765\u627e\u539f\u56e0\u7684\u65f6\u5019\u53d1\u73b0\u5f53\u521d\u81ea\u5df1\u7684 Xcode9.4.1\u81ea\u5e26\u7684 swift \u7248\u672c\u4e3a4.1.2,\u800c\u6211\u5c1d\u8bd5\u7684\u8fd9\u51e0\u4e2a\u7248\u672c\u90fd\u662f swift4.2,\u6216\u8005 swift5.0\u7684,\u611f\u89c9\u81ea\u5df1\u597d\u50bb\ud83d\ude01. ",
    "tarsVEVO": "I'm put the code inside func collectionView(_ collectionView: UICollectionView, willDisplay cell: UICollectionViewCell, forItemAt indexPath: IndexPath)\nIs it right or not ? \nI also check the data(39 bytes) from error log and it's login error. Omg, can't believe that I forgot to pass header. \nSolved ! thanks for the replies . ",
    "GarthSnyder": "Indeed not! How interesting...\nUnfortunately, KingfisherCompatible is applied to both value and reference types, so it can't simply be a class protocol (see the OP above for an explanation of why this is an alternate solution). However, it looks like there are no extensions other than kf, so it appears pretty straightforward to split out a separate KingfisherCompatibleValue protocol, as in the updated PR.\nI see in the git history that this protocol was for a while split into KingfisherClassCompatible and KingfisherValueCompatible between 4 and 5, so I may be going down a path that someone has already trodden. That previous split seems to have involved different types for KingfisherWrapper as well, however, so I'm not sure if the motivation was related.. Thanks for the additional comments. \nDid you take a look at the detailed diffs? The KingfisherWrapper can continue to be a struct for both reference and value types.\nWhen the outer KingfisherCompatible entity is a class, the compiler knows it won't try to assign self. When it's a value type, assigning self would be fine, so the compiler doesn't complain there either. Only the outermost protocol needs to split.. ",
    "houndci-bot": "Colon Violation: When specifying a type, always associate the colon with the identifier\n. Length Violation: Line should be 100 characters or less: currently 131 characters\n. Length Violation: Line should be 100 characters or less: currently 104 characters\n. Length Violation: Line should be 100 characters or less: currently 201 characters\n. Length Violation: Line should be 100 characters or less: currently 205 characters\n. Length Violation: Line should be 100 characters or less: currently 104 characters\n. Trailing Whitespace Violation: Line #59 should have no trailing whitespace\n. Trailing Whitespace Violation: Line #86 should have no trailing whitespace\n. Length Violation: Line should be 100 characters or less: currently 122 characters\n. ",
    "raxityo": "I think we want to say:\n\na target size of CGSize(width: 20, height: 20)\n\n. ",
    "mishagray": "Should maybe make URL optional so it's only returned if the 'copy' or 'move'  was successful.. ",
    "nanoxd": "\ud83d\udc4b It's funny to see my blog post on a library I use \ud83d\ude04 . ",
    "kylinroc": "Factory method's argument label style should be like initializer, use makeAnimatedFrame(image: UIImage?) is better.. "
}